{"cell_type":{"ab63cd3a":"code","1bb2b90c":"code","f6e9f6b7":"code","185b949e":"code","6c467100":"code","9b1f2c69":"code","9d4ad796":"code","a30c9149":"code","b336ce15":"code","224bd992":"code","c9e4e8a1":"code","79d2cce5":"code","aedf3c2b":"code","e3110a71":"code","e04d2f32":"code","19f4e290":"code","602f4cb9":"code","32d9a7ec":"code","74d94d81":"code","0d4fc760":"code","40d10c48":"code","b8b9040c":"code","99c5add8":"code","cf94f478":"code","a3c672a3":"code","9a6402cc":"code","15028e30":"code","513bd3d0":"code","6da71759":"code","adff4883":"code","e2c1fbb4":"code","11935fa8":"code","4c333101":"code","21f2bbc1":"code","6ed2d5d3":"code","645e31a8":"code","e2fa043b":"code","88af8bc4":"code","e1972b90":"code","0e194aa9":"code","9b02d6ed":"code","75dd2c39":"code","aa2ecc06":"code","8de47a2c":"code","08ee8090":"code","23b0fc3d":"code","a1b75d07":"code","4aa85eb4":"code","4c92f790":"code","0b894421":"code","cebc4d84":"code","8cf308b2":"code","1faf1e24":"code","f124aa21":"code","d27e0b44":"code","19a2e50c":"code","2c37012f":"code","fc735b47":"code","a314aac3":"code","d2ba9864":"code","60b844e0":"code","04391333":"code","5a6649f6":"code","a976f1b4":"code","900727b9":"code","ae8e4c61":"code","49d3d7f3":"code","ce853ff1":"code","d845c296":"code","43a28b18":"code","7a1a36af":"code","fc97433b":"code","6515febb":"code","1e596e16":"code","4adab4ed":"code","32c57ac0":"code","6cf769ff":"code","a9960d07":"code","a250a516":"code","83129766":"code","ff2b3d65":"code","750e223a":"code","9162251d":"code","be73891e":"code","00aa6d82":"code","52a5f08e":"code","2220f56d":"code","dda412d8":"code","aca312a8":"code","5f26c28a":"code","37b04ec4":"code","02865d41":"code","780fc132":"code","57257557":"code","31492dc8":"code","622859b1":"code","c6603284":"markdown","827a46f3":"markdown","58706b1f":"markdown","bd1a5f07":"markdown","db561e90":"markdown"},"source":{"ab63cd3a":"import numpy as np # linear algebra\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nimport matplotlib.image as pltimg\n","1bb2b90c":"train=pd.read_csv('\/kaggle\/input\/kaggledatafest\/train.csv')\nsub=pd.read_csv('\/kaggle\/input\/kaggledatafest\/sample_submission.csv')\n\ntest=pd.read_csv('\/kaggle\/input\/kaggledatafest\/test.csv')\ntrain.info()","f6e9f6b7":"def area_fet(data):\n    match = re.search(\"\\D*(\\d+\\.\\d+)\\W* Kanal\", data)\n    if match!=None:\n        return float(match.group(1))*20\n    else:\n        match = re.search(\"\\D*(\\d+)\\W* Kanal\", data)\n        if match!=None:\n            return float(match.group(1))*20\n        \n    mar = re.search(\"\\D*(\\d+\\.\\d+)\\W* Marla\", data)\n    if mar!=None:\n        return float(mar.group(1)) \n    else:\n        mar = re.search(\"\\D*(\\d+)\\W* Marla\", data)\n        if mar!=None:\n            return float(mar.group(1)) \ntrain['Area_Marla'] = train['Area'].apply(lambda x: area_fet(x))","185b949e":"train['Area_Marla'].value_counts()","6c467100":"test['Area_Marla'] = test['Area'].apply(lambda x: area_fet(x))\ntest[['Area_Marla','Area'] ]","9b1f2c69":"train.Area_Marla.hist()","9d4ad796":"fig, ax = plt.subplots(figsize=(12,6))\nax.scatter(train['Area_Marla'], train['Property_Id'])\nax.set_xlabel('Area_Marla')\nax.set_ylabel('ID')\nplt.show()","a30c9149":"train['Area_Marla'].mean()","b336ce15":"print(train['Area_Marla'].quantile(0.30))\nprint(train['Area_Marla'].quantile(0.70))\ntrain.shape","224bd992":"def split_def(regex,data):\n    match = re.search(regex, data)\n    if match!=None:\n        return int(match.group(1))\n    else:\n        return np.nan\ndef split_bool(regex,data):\n    match = re.search(regex, data)\n    if match!=None:\n        return int(1)\n    else:\n        return np.nan","c9e4e8a1":"\n#return re.findall(\"\\W* Built in year[^:]*:\\D*(\\d+)\", data)\ntrain['Main_BuildYear'] = train['Main Features'].apply(lambda x: split_def(\"\\W* Built in year[^:]*:\\D*(\\d+)\",x))\ntrain['Main_Parking_space'] = train['Main Features'].apply(lambda x: split_def(\"\\W* Parking Spaces[^:]*:\\D*(\\d+)\",x))\ntrain['Main_Floors'] = train['Main Features'].apply(lambda x: split_def(\"\\W* Floors[^:]*:\\D*(\\d+)\",x))\ntrain['Main_dgw'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Double Glazed Windows\",x))\ntrain['Main_Flooring'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Flooring\",x))\ntrain['Main_eBackup'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Electricity Backup\",x))\ntrain['Main_Furnished'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Furnished\",x))\ntrain['Main_waste'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Waste Disposal\",x))\ntrain['Main_cenAC'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Central Air Conditioning\",x))\ntrain['Main_cenHeat'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Central Heating\",x))\ntrain['Main_otherMain'] = train['Main Features'].apply(lambda x: split_bool(\"\\W* Other Main Features\",x))\n# Double Glazed Windows , Flooring , Electricity Backup , Waste Disposal , Floors: 2 , Furnished ,Central Air Conditioning , Central Heating , Other Main Features ","79d2cce5":"train['Main_BuildYear'].mean()","aedf3c2b":"train['Baths']=train['Baths'].apply(lambda x: split_def(\"\\D*(\\d+)\",x))\ntrain['Bedroom(s)']=train['Bedroom(s)'].apply(lambda x: split_def(\"\\D*(\\d+)\",x))\n","e3110a71":"train['Business_MediaRoom'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* Business Center or Media Room in Building\",x))\ntrain['Business_Broadband'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* Broadband Internet Access\",x))\ntrain['Business_TV'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* Satellite or Cable TV Ready\",x))\ntrain['Business_ConferenceRoom'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* Conference Room in Building\",x))\ntrain['Business_Intercom'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* Intercom\",x))\ntrain['Business_ATM'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W* ATM\",x))\ntrain['Business_OtherBusiness'] = train['Business and Communication'].apply(lambda x: split_bool(\"\\W*Other Business and Communication Facilities\",x))\ntrain['Healthcare_lawn'] = train['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Lawn or Garden\",x))\ntrain['Healthcare_swimmingpool'] = train['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Swimming Pool\",x))\ntrain['Healthcare_Sauna'] = train['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Sauna\",x))\ntrain['Healthcare_Jacuzzi'] = train['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Jacuzzi\",x))\ntrain['Healthcare_Other'] = train['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Other Healthcare and Recreation Facilities'\",x))","e04d2f32":"train['Nearby_Schools'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Schools\",x))\ntrain['Nearby_Hospitals'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Hospitals\",x))\ntrain['Nearby_Shopping_Malls'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Shopping Malls\",x))\ntrain['Nearby_Restaurants'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Restaurants\",x))\ntrain['Nearby_Airport'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Distance From Airport (kms)\",x))\ntrain['Nearby_Public_Transport'] = train['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Public Transport Service\",x))\ntrain['r_kitchens']=train['Rooms'].apply(lambda x:  split_def(\"\\W* Kitchens[^:]*:\\D*(\\d+)\",x))\ntrain['r_servant quarters']=train['Rooms'].apply(lambda x:  split_def(\"\\W* Servant Quarters[^:]*:\\D*(\\d+)\",x))\ntrain['r_extra_rooms']=train['Rooms'].apply(lambda x:  split_def(\"\\W* Prayer Room[^:]*:\\D*(\\d+)\",x)) + train['Rooms'].apply(lambda x:  split_def(\"\\W* Powder Room[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Gym[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Steam Room[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Laundry Room[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Other Room[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Study Room[^:]*:\\D*(\\d+)\",x))+train['Rooms'].apply(lambda x:  split_def(\"\\W* Lounge or Sitting Room[^:]*:\\D*(\\d+)\",x))\ntrain['r_store rooms']=train['Rooms'].apply(lambda x:  split_def(\"\\W* Store Rooms[^:]*:\\D*(\\d+)\",x))","19f4e290":"train['r_extra_rooms'].value_counts()","602f4cb9":"def set_value(row_number, assigned_value): \n    return assigned_value[row_number] \n\nevent_dictionary ={'Premium' : 4, 'Semi-Premium' : 3, 'Affordable' : 2,'Cheap':1}  \n  \n# Add a new column named 'Price' \ntrain['cat_w'] = train['Price_Category'].apply(set_value, args =(event_dictionary, )) \n  ","32d9a7ec":"def set_val(row_number, assigned_value): \n    return assigned_value[row_number] \ned ={'super hot' : 2, 'hot' :1 ,np.nan: 0}  \n  \n# Add a new column named 'Price' \ntrain['cat_Popular'] = train['Popular'].apply(set_val, args =(ed, )) ","74d94d81":"train['cat_w'].value_counts()","0d4fc760":"for x in [18,20,15,53]:\n    train =train.drop(train.loc[train['Main_Parking_space'] == x].index)\n\nfor x in [2021]:\n    train =train.drop(train.loc[train['Main_BuildYear'] > x].index)\n\nfor x in [500]:\n    train =train.drop(train.loc[train['Main_BuildYear'] < x].index)","40d10c48":"train['Main_BuildYear']=train['Main_BuildYear'].replace([0],np.nan)","b8b9040c":"train.info()","99c5add8":"fig, ax = plt.subplots(figsize=(12,6))\nax.scatter(train['Main_BuildYear'], train['Property_Id'])\nax.set_xlabel('Main_BuildYear')\nax.set_ylabel('ID')\nplt.show()","cf94f478":"train['Main_BuildYear'].describe()","a3c672a3":"train['House_Baths']=train['Baths']\ntrain['House_Bedrooms']=train['Bedroom(s)']","9a6402cc":"train['Main_BuildYear'].median()","15028e30":"for x in [85]:\n    train =train.drop(train.loc[train['Area_Marla'] >= x].index)","513bd3d0":"X = train\n","6da71759":"X = X.drop(['Baths','Bedroom(s)','Time Stamp','Source', 'Popular', 'Description', 'Main Features', 'Rooms','Property_Id',\n       'Business and Communication', 'Healthcare Recreational','Price_Category','cat_w',\n       'Nearby Locations and Other Facilities', 'Other Facilities', 'Title', 'Label', 'Type', 'Location',\n       'Area', 'Purpose','Healthcare_Other','Nearby_Airport','r_extra_rooms','Business_ATM','Business_ConferenceRoom','Business_MediaRoom'], axis =1)\nX.columns","adff4883":"X.describe()","e2c1fbb4":"X['Main_BuildYear'].fillna(2019, inplace=True)","11935fa8":"X['Main_cenHeat'].fillna(0, inplace=True)\nX['Main_cenAC'].fillna(0, inplace=True)\nX['Main_Furnished'].fillna(0, inplace=True)\nX['Healthcare_swimmingpool'].fillna(0, inplace=True)\nX['Healthcare_Sauna'].fillna(0, inplace=True)\nX['Healthcare_Jacuzzi'].fillna(0, inplace=True)  ","4c333101":"X=X.fillna(X.mean())","21f2bbc1":"X.info()","6ed2d5d3":"Q1 = X.quantile(0.25)\nQ3 = X.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","645e31a8":"print(X['Area_Marla'].skew())\nX['Area_Marla'].describe()","e2fa043b":"#X = df[['Main_Parking_space',  'Bedroom(s)','Baths','Area_Marla']]\ny = train[['cat_w']]","88af8bc4":"\nfig, ax = plt.subplots(figsize=(12,6))\nax.scatter(train['Main_BuildYear'], train['Property_Id'])\nax.set_xlabel('Main_BuildYear')\nax.set_ylabel('ID')\nplt.show()","e1972b90":"X['Main_BuildYear'].hist()","0e194aa9":"from sklearn import tree\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nimport matplotlib.pyplot as plt\nimport matplotlib.image as pltimg","9b02d6ed":"X.info()","75dd2c39":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\n\nprint(regr.coef_)","aa2ecc06":"X_train, X_test, y_train, y_test = train_test_split(  \n    X, y, test_size = 0.3, random_state = 100) ","8de47a2c":"y_train.shape","08ee8090":"y_train","23b0fc3d":"X_train.shape","a1b75d07":"from sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train['cat_w'])\n\ny_pred=clf.predict(X_test)","4aa85eb4":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","4c92f790":"from sklearn.ensemble import RandomForestClassifier\n\nrf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train, y_train['cat_w'])\nrf_predictions = rf_classifier.predict(X_test)\n","0b894421":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","cebc4d84":"y_test.shape","8cf308b2":"X.shape","1faf1e24":"# Function to perform training with giniIndex. \ndef train_using_gini(X_train, X_test, y_train): \n  \n    # Creating the classifier object \n    clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n            random_state = 20,max_depth=3, min_samples_leaf=10) \n  \n    # Performing training \n    clf_gini.fit(X_train, y_train) \n    return clf_gini \n      \n# Function to perform training with entropy. \ndef tarin_using_ginni(X_train, X_test, y_train): \n  \n    # Decision tree with entropy \n    clf_entropy = DecisionTreeClassifier( \n            criterion = \"gini\", random_state = 47, \n            max_depth = 3, min_samples_leaf = 6) \n  \n    # Performing training \n    clf_entropy.fit(X_train, y_train) \n    return clf_entropy \n  \n  \n# Function to make predictions \ndef prediction(X_test, clf_object): \n  \n    # Predicton on test with giniIndex \n    y_pred = clf_object.predict(X_test) \n    print(\"Predicted values:\") \n    print(y_pred) \n    return y_pred \n      \n# Function to calculate accuracy \ndef cal_accuracy(y_test, y_pred): \n      \n    \n      \n    print(\"Accuracy : \")\n    accuracy_score(y_test,y_pred)*100 \n      \n    print(\"Report : \")\n    classification_report(y_test, y_pred) \n    print(\"Confusion Matrix: \")\n    #confusion_matrix(y_test, y_pred)\n  ","f124aa21":"clf_gini = train_using_gini(X_train, X_test, y_train) \nclf_entropy = tarin_using_ginni(X_train, X_test, y_train) \n  \n# Operational Phase \nprint(\"Results Using Gini Index:\") \n\n  ","d27e0b44":"  \n# Prediction using gini \ny_pred_gini = prediction(X_test, clf_gini) \n","19a2e50c":"print(\"Confusion Matrix: \")\nconfusion_matrix(y_test, y_pred_gini)\n      \n    ","2c37012f":"print(\"Accuracy : \")\naccuracy_score(y_test,y_pred_gini)*100 \n      \n    ","fc735b47":"print(\"Report : \")\nclassification_report(y_test, y_pred_gini) ","a314aac3":"\nprint(\"Results Using Entropy:\") \n# Prediction using entropy \ny_pred_entropy = prediction(X_test, clf_entropy) \n#cal_accuracy(y_test, y_pred_entropy) ","d2ba9864":"print(\"Accuracy : \")\naccuracy_score(y_test,y_pred_entropy)","60b844e0":"print(\"Report : \")\nclassification_report(y_test, y_pred_entropy) ","04391333":"\ntest['House_Baths']=test['Baths'].apply(lambda x: split_def(\"\\D*(\\d+)\",x))\ntest['House_Bedrooms']=test['Bedroom(s)'].apply(lambda x: split_def(\"\\D*(\\d+)\",x))","5a6649f6":"test['Main_BuildYear'] = test['Main Features'].apply(lambda x: split_def(\"\\W* Built in year[^:]*:\\D*(\\d+)\",x))\ntest['Main_Parking_space'] = test['Main Features'].apply(lambda x: split_def(\"\\W* Parking Spaces[^:]*:\\D*(\\d+)\",x))\ntest['Main_Floors'] = test['Main Features'].apply(lambda x: split_def(\"\\W* Floors[^:]*:\\D*(\\d+)\",x))\ntest['Main_dgw'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Double Glazed Windows\",x))\ntest['Main_Flooring'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Flooring\",x))\ntest['Main_eBackup'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Electricity Backup\",x))\ntest['Main_Furnished'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Furnished\",x))\ntest['Main_waste'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Waste Disposal\",x))\ntest['Main_cenAC'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Central Air Conditioning\",x))\ntest['Main_cenHeat'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Central Heating\",x))\ntest['Main_otherMain'] = test['Main Features'].apply(lambda x: split_bool(\"\\W* Other Main Features\",x))\n\ntest['Business_Broadband'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* Broadband Internet Access\",x))\ntest['Business_TV'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* Satellite or Cable TV Ready\",x))\ntest['Business_MediaRoom'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* Business Center or Media Room in Building\",x))\ntest['Business_ConferenceRoom'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* Conference Room in Building\",x))\ntest['Business_Intercom'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* Intercom\",x))\ntest['Business_ATM'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W* ATM\",x))\ntest['Business_OtherBusiness'] = test['Business and Communication'].apply(lambda x: split_bool(\"\\W*Other Business and Communication Facilities\",x))\n\ntest['Healthcare_lawn'] = test['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Lawn or Garden\",x))\ntest['Healthcare_swimmingpool'] = test['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Swimming Pool\",x))\ntest['Healthcare_Sauna'] = test['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Sauna\",x))\ntest['Healthcare_Jacuzzi'] = test['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Jacuzzi\",x))\ntest['Healthcare_Other'] = test['Healthcare Recreational'].apply(lambda x: split_bool(\"\\W* Other Healthcare and Recreation Facilities'\",x))\n\ntest['Nearby_Schools'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Schools\",x))\ntest['Nearby_Hospitals'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Hospitals\",x))\ntest['Nearby_Shopping_Malls'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Shopping Malls\",x))\ntest['Nearby_Restaurants'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Restaurants\",x))\ntest['Nearby_Airport'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Distance From Airport (kms)\",x))\ntest['Nearby_Public_Transport'] = test['Nearby Locations and Other Facilities'].apply(lambda x: split_bool(\"\\W* Nearby Public Transport Service\",x))\n\n\ntest['r_kitchens']=test['Rooms'].apply(lambda x:  split_def(\"\\W* Kitchens[^:]*:\\D*(\\d+)\",x))\n\ntest['r_servant quarters']=test['Rooms'].apply(lambda x:  split_def(\"\\W* Servant Quarters[^:]*:\\D*(\\d+)\",x))\n\ntest['r_store rooms']=test['Rooms'].apply(lambda x:  split_def(\"\\W* Store Rooms[^:]*:\\D*(\\d+)\",x))\n\ntest['r_extra_rooms']=test['Rooms'].apply(lambda x:  split_def(\"\\W* Prayer Room[^:]*:\\D*(\\d+)\",x)) + test['Rooms'].apply(lambda x:  split_def(\"\\W* Powder Room[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Gym[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Steam Room[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Laundry Room[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Other Room[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Study Room[^:]*:\\D*(\\d+)\",x))+test['Rooms'].apply(lambda x:  split_def(\"\\W* Lounge or Sitting Room[^:]*:\\D*(\\d+)\",x))\n\n\n    \n\n","a976f1b4":"def set_val(row_number, assigned_value): \n    return assigned_value[row_number] \ned ={'super hot' : 2, 'hot' :1 ,np.nan: 0}  \n  \n# Add a new column named 'Price' \ntest['cat_Popular'] = test['Popular'].apply(set_val, args =(ed, )) ","900727b9":"ytest = test\nytest = ytest.drop(['Baths','Bedroom(s)','Property_Id','Time Stamp','Source', 'Popular', 'Description', 'Main Features', 'Rooms',\n       'Business and Communication', 'Healthcare Recreational',\n       'Nearby Locations and Other Facilities', 'Other Facilities', 'Title', 'Label', 'Type', 'Location',\n       'Area', 'Purpose','Healthcare_Other','Nearby_Airport','r_extra_rooms','Business_ATM','Business_ConferenceRoom',\n    'Business_MediaRoom'], axis =1)\n","ae8e4c61":"ytest.info()","49d3d7f3":"X.info()","ce853ff1":"X.describe()","d845c296":"Q1 = X.quantile(0.25)\nQ3 = X.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","43a28b18":"print(X['Area_Marla'].skew())\nX['Area_Marla'].describe()","7a1a36af":"X.Main_BuildYear.hist()","fc97433b":"X.Main_BuildYear.value_counts()","6515febb":"X.Area_Marla.hist()","1e596e16":"X.Area_Marla.value_counts()","4adab4ed":"tree.plot_tree(clf_gini) ","32c57ac0":"import graphviz \ndot_data = tree.export_graphviz(clf_gini, out_file=None, \n                     feature_names=X.columns,  \n                     class_names=X.columns,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph.save('deta.gv')","6cf769ff":"graph","a9960d07":"import graphviz \ndot_data = tree.export_graphviz(clf_entropy, out_file=None, \n                     feature_names=X.columns,  \n                     class_names=X.columns,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph.save('deta-gii.gv')","a250a516":"graph","83129766":"X.head()","ff2b3d65":"tree.plot_tree(clf_entropy) ","750e223a":"#y_pred_gini = prediction(ytest, clf_gini) \ny_pred = clf_entropy.predict(X_test)","9162251d":"from sklearn import metrics \nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","be73891e":"ytest['Main_BuildYear'].fillna(2019, inplace=True)\nytest['Main_cenHeat'].fillna(0, inplace=True)\nytest['Main_cenAC'].fillna(0, inplace=True)\nytest['Main_Furnished'].fillna(0, inplace=True)\nytest['Healthcare_swimmingpool'].fillna(0, inplace=True)\nytest['Healthcare_Sauna'].fillna(0, inplace=True)\nytest['Healthcare_Jacuzzi'].fillna(0, inplace=True)  ","00aa6d82":"ytest=ytest.fillna(ytest.mean())","52a5f08e":"\n# Prediction using gini \ny_pred_gini = prediction(ytest, clf_entropy) \n\n# Prediction using gini ","2220f56d":"\ny_pred_rf = prediction(ytest, clf)  ","dda412d8":"from sklearn import metrics \nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","aca312a8":"submission = pd.read_csv('\/kaggle\/input\/kaggledatafest\/sample_submission.csv')\n","5f26c28a":"submission['Price_Category'] = y_pred_rf","37b04ec4":"submission['Price_Category'] = submission['Price_Category'].replace(3,'Semi-Premium')\nsubmission['Price_Category'] = submission['Price_Category'].replace(4,'Premium')\nsubmission['Price_Category'] = submission['Price_Category'].replace(2,'Affordable')\nsubmission['Price_Category'] = submission['Price_Category'].replace(1,'Cheap')\nsubmission.head()\n#{'Premium' : 4, 'Semi-Premium' : 3, 'Affordable' : 2,'Cheap':1}   in cat_w","02865d41":"submission.to_csv('submission-rf.csv', index=False)","780fc132":"y_pred_ent = prediction(ytest, clf_entropy)  ","57257557":"submission = pd.read_csv('\/kaggle\/input\/kaggledatafest\/sample_submission.csv')\nsubmission['Price_Category'] = y_pred_ent","31492dc8":"submission['Price_Category'] = submission['Price_Category'].replace(3,'Semi-Premium')\nsubmission['Price_Category'] = submission['Price_Category'].replace(4,'Premium')\nsubmission['Price_Category'] = submission['Price_Category'].replace(2,'Affordable')\nsubmission['Price_Category'] = submission['Price_Category'].replace(1,'Cheap')\nsubmission.head()\n#{'Premium' : 4, 'Semi-Premium' : 3, 'Affordable' : 2,'Cheap':1}   in cat_w","622859b1":"submission.to_csv('submission-ent.csv', index=False)","c6603284":"# Importing Files","827a46f3":"# Working With Test Data","58706b1f":"# Regex Funtion","bd1a5f07":"# Area Marla","db561e90":"# **Fetching data**"}}