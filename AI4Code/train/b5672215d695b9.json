{"cell_type":{"39e8dced":"code","398cacd9":"code","7ada70ea":"code","160fbbd3":"code","7cb5331d":"code","87b37a82":"code","f073947e":"code","ccb212a1":"code","5aa14829":"code","868e72f6":"code","0dcbe90c":"code","0de68acb":"code","51e38e5c":"code","8e7e45d9":"code","bb93494d":"code","a693814c":"code","16fc804b":"code","0a33f739":"code","972091b9":"code","006d85b9":"code","b23e3411":"markdown"},"source":{"39e8dced":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom fbprophet import Prophet\nfrom sklearn.metrics import *\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","398cacd9":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\ndf_train.date_time = df_train.date_time.astype('datetime64[ns]')\ndf_test.date_time = df_test.date_time.astype('datetime64[ns]')\n","7ada70ea":"df_train","160fbbd3":"df_test","7cb5331d":"df_train.describe().T","87b37a82":"df_test.describe().T","f073947e":"# Concatenate train and test datasets\ndf_all_data = pd.concat([df_train.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],axis=1), df_test], axis = 0)\n","ccb212a1":"df_all_data","5aa14829":"fig = plt.figure(figsize = (12, 8))\nfor i in range(len(df_all_data.columns)-1):\n    fig.add_subplot(np.ceil(len(df_all_data.columns)\/5), 5, i+1)\n    df_all_data.iloc[:, i+1].hist(bins = 20)\n    plt.title(f'{df_all_data.columns[i+1]}')\nplt.show()","868e72f6":"corr = df_all_data.corr()\nmask = np.triu(np.ones_like(corr, dtype = bool))\n\nplt.figure(figsize = (5, 5))\nplt.title('Corelation matrix')\nsns.heatmap(corr, mask = mask, cmap = 'Spectral_r', linewidths = .5)\nplt.show()","0dcbe90c":"corr = df_train.corr()\nmask = np.triu(np.ones_like(corr, dtype = bool))\n\nplt.figure(figsize = (5, 5))\nplt.title('Corelation matrix')\nsns.heatmap(corr, mask = mask, cmap = 'Spectral_r', linewidths = .5)\nplt.show()","0de68acb":"\nmday = pd.to_datetime('2010-6-01')\n\ndf_train1 = df_train[df_train.date_time >= mday]\ndf_val = df_train[df_train.date_time < mday]\ndf_train1.columns\n","51e38e5c":"def create_data(target):\n    #train = df_train1[['date_time', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',target]]\n    train = df_train[['date_time', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',target]]\n    train.columns = ['ds', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5','y']\n    train\n    val = df_val[['date_time', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5',target]]\n    val.columns = ['ds', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5','y']\n    val\n    test = df_test[['date_time', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']]\n    test.columns = ['ds', 'deg_C', 'relative_humidity', 'absolute_humidity','sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\n    test\n\n    #m1 = Prophet(yearly_seasonality=False,weekly_seasonality=False,daily_seasonality=True,seasonality_mode='multiplicative')\n    m1 = Prophet(yearly_seasonality=False,weekly_seasonality=False,daily_seasonality=True)\n    \n    \n    '''\n    if target == 'target_nitrogen_oxides':\n        # \u6e29\u5ea6\u30c7\u30fc\u30bf\u3001\u6e7f\u5ea6\u30c7\u30fc\u30bf\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n        m1.add_regressor('deg_C')\n        m1.add_regressor('sensor_1')\n        m1.add_regressor('sensor_2')\n        m1.add_regressor('sensor_3')\n        m1.add_regressor('sensor_5')\n        \n    else:\n        \n        # \u6e29\u5ea6\u30c7\u30fc\u30bf\u3001\u6e7f\u5ea6\u30c7\u30fc\u30bf\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n        m1.add_regressor('deg_C')\n        m1.add_regressor('relative_humidity')\n        m1.add_regressor('absolute_humidity')\n        m1.add_regressor('sensor_1')\n        m1.add_regressor('sensor_2')\n        m1.add_regressor('sensor_3')\n        m1.add_regressor('sensor_4')\n        m1.add_regressor('sensor_5')\n    '''\n    \n    # \u6e29\u5ea6\u30c7\u30fc\u30bf\u3001\u6e7f\u5ea6\u30c7\u30fc\u30bf\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u306b\u8ffd\u52a0\n    m1.add_regressor('deg_C')\n    m1.add_regressor('relative_humidity')\n    m1.add_regressor('absolute_humidity')\n    m1.add_regressor('sensor_1')\n    m1.add_regressor('sensor_2')\n    m1.add_regressor('sensor_3')\n    m1.add_regressor('sensor_4')\n    m1.add_regressor('sensor_5')\n    \n    \n\n    m1.fit(train)\n    \n    # val\u30c7\u30fc\u30bf\u306b\u3088\u308b\u4e88\u6e2c\n    val_predict = m1.predict(val)\n    ypred1 = val_predict[['yhat']].values\n    # \u30de\u30a4\u30ca\u30b9\u306e\u5024\u306f0\u306b\u5909\u63db\n    ypred1 = np.maximum(ypred1,0)\n    ytest1 = val['y'].values\n    r2score = r2_score(ytest1,ypred1)\n    rmsle = np.sqrt(mean_squared_log_error(ytest1,ypred1))\n    \n    m1.plot(val_predict)\n    plt.show()\n\n    print(f'{target} R2 SCORE\uff1a{r2score:.4f}')\n    print(f'{target} RMSLE\uff1a{rmsle:.4f}')\n    \n    # \u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u306e\u4e88\u6e2c\u3092\u5b9f\u65bd\n    predict = m1.predict(test)\n    \n    m1.plot(predict)\n    plt.show()\n    \n    return  predict\n","8e7e45d9":"predict_result = []\nfor target in df_train.columns[-3:]:\n    predict_result.append(create_data(target))","bb93494d":"predict_result[0]","a693814c":"df_submision = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\ndf_submision","16fc804b":"# \u4e88\u6e2c\u5024\u3092\u51fa\u529b\u3001\u4e88\u6e2c\u304c\u30de\u30a4\u30ca\u30b9\u306e\u5834\u5408\u306f0\u306b\u5909\u63db\ndf_submision.target_carbon_monoxide = np.maximum(predict_result[0]['yhat'].values,0)\ndf_submision.target_benzene = np.maximum(predict_result[1]['yhat'].values,0)\ndf_submision.target_nitrogen_oxides = np.maximum(predict_result[2]['yhat'].values,0)\n#df_submision.target_nitrogen_oxides = 300.0\n","0a33f739":"df_submision","972091b9":"df_submision.describe()","006d85b9":"df_submision.to_csv('prophet_3.csv',index=None)","b23e3411":"### Use Prophet and predict each target data\n"}}