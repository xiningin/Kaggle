{"cell_type":{"d99a6037":"code","5c7b32ff":"code","4559332f":"code","ebf3a5a4":"code","57b02149":"code","eb9b6c28":"code","33daa15b":"code","bd8aac07":"code","aee377e8":"code","9c144026":"code","c8c75603":"code","c1acfdbf":"code","03622fbd":"code","98cfa09e":"code","d4c6c1b8":"code","290f0597":"code","58a44d47":"code","256f2de1":"code","c364b92c":"markdown","f25d5d10":"markdown"},"source":{"d99a6037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport copy\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c7b32ff":"import librosa\nimport matplotlib.pyplot as plt","4559332f":"# np.argmax(x)\ndef find_max_and_return_index(mylist):\n    co = 0\n    mymax = 0\n    for i,value in enumerate(mylist):\n        if mymax < value:\n            mymax = value\n            co = i\n    return mymax,co","ebf3a5a4":"list_folder = os.listdir('\/kaggle\/input\/gunshot-audio-dataset\/')\n\nhop_length = 512 #the default spacing between frames\nn_fft = 255 #number of samples\n\nraw_x = []\nraw_y = []\nfor i in list_folder:\n    list_file_wave = os.listdir('\/kaggle\/input\/gunshot-audio-dataset\/' + i)\n    for j in list_file_wave:\n        filename = '\/kaggle\/input\/gunshot-audio-dataset\/' + i + '\/' + j\n        data, sr = librosa.load(filename,sr=22050)\n        \n        raw_x.append(data)\n        raw_y.append(i)\n        \n        \n   ","57b02149":"x = []\ny = []\nfor i in range(len(raw_x)):\n    data = raw_x[i]\n    if len(data) == 44100:\n        mfcc_data = np.array(librosa.feature.mfcc(data, n_fft=n_fft,hop_length=hop_length,n_mfcc=128))\n        x.append(mfcc_data)\n        y.append(raw_y[i])","eb9b6c28":"x_copy = copy.copy(x)\ny_copy = copy.copy(y)","33daa15b":"#x_copy = np.array((x_copy-np.min(x_copy))\/(np.max(x_copy)-np.min(x_copy)))\n#x_copy = x_copy\/np.std(x_copy)","bd8aac07":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nle.fit(y_copy)\ny_copy_new = le.transform(y_copy)\n\n# from tensorflow.keras.utils import to_categorical\n# y_copy_new = to_categorical(y_copy_new, dtype =\"uint8\")","aee377e8":"len_x_copy = []\nfor i in range(len(x_copy)):\n    temp = x_copy[i].shape\n    # print(temp)\n    len_x_copy.append(temp)","9c144026":"value, count = np.unique(len_x_copy, return_counts=True)\nprint(value,count)","c8c75603":"x_copy = np.array(x_copy)","c1acfdbf":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_copy, y_copy_new, test_size=0.25, random_state=123, stratify=y)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=123)\n","03622fbd":"from tensorflow.keras.layers import LSTM, Dense,Dropout,Flatten\nfrom tensorflow import keras","98cfa09e":"\ninput_shape = x_copy[0].shape\n\nmodel = keras.Sequential()\nmodel.add(LSTM(128,input_shape=input_shape,return_sequences=True))\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(48, activation='relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(9, activation='softmax'))\nmodel.summary()\nmodel.compile(loss=\"SparseCategoricalCrossentropy\", optimizer=\"adam\", metrics=['accuracy'])","d4c6c1b8":"history = model.fit(X_train, y_train, epochs=50, batch_size=72, validation_data=(X_val, y_val), shuffle=False)","290f0597":"#Adapted from Deep Learning with Python by Francois Chollet, 2018\nhistory_dict=history.history\nloss_values=history_dict['loss']\nacc_values=history_dict['accuracy']\nval_loss_values = history_dict['val_loss']\nval_acc_values=history_dict['val_accuracy']\nepochs=range(1,51)\nfig,(ax1,ax2)=plt.subplots(1,2,figsize=(15,5))\nax1.plot(epochs,loss_values,'co',label='Training Loss')\nax1.plot(epochs,val_loss_values,'m', label='Validation Loss')\nax1.set_title('Training and validation loss')\nax1.set_xlabel('Epochs')\nax1.set_ylabel('Loss')\nax1.legend()\nax2.plot(epochs,acc_values,'co', label='Training accuracy')\nax2.plot(epochs,val_acc_values,'m',label='Validation accuracy')\nax2.set_title('Training and validation accuracy')\nax2.set_xlabel('Epochs')\nax2.set_ylabel('Accuracy')\nax2.legend()\nplt.show()","58a44d47":"from tensorflow.math import confusion_matrix\n\nTrainLoss, Trainacc = model.evaluate(X_train,y_train)\nTestLoss, Testacc = model.evaluate(X_test, y_test)\ny_pred=model.predict(X_test)\nprint('Confusion_matrix: ',confusion_matrix(y_test, np.argmax(y_pred,axis=1)))","256f2de1":"import librosa.display\nfig, ax = plt.subplots(figsize=(20,7))\nlibrosa.display.specshow(X_train[0],sr=sr, cmap='cool',hop_length=hop_length)\nax.set_xlabel('Time', fontsize=15)\nax.set_title('MFCC', size=20)\nplt.colorbar()\nplt.show()","c364b92c":"os.chdir(path) ## can change current directory    np.argmax(x)","f25d5d10":"remember2 = sorted(remember,reverse=True)"}}