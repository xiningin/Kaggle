{"cell_type":{"c81cdbd7":"code","42478b51":"code","289ff7a7":"code","a783327b":"code","937b8ca9":"code","77cd1f51":"code","8a0bea5b":"code","49a7eefa":"code","be784c03":"code","bbe6807d":"code","e4ee6d52":"code","0416ea88":"code","1bc08276":"code","2668b1cb":"code","6f7f68b7":"markdown","66b2a47d":"markdown","8aa79613":"markdown","b192a377":"markdown","860d0503":"markdown","414b1de7":"markdown","7fdf0c29":"markdown","2706d31b":"markdown","76da80a8":"markdown"},"source":{"c81cdbd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42478b51":"# load the training data in\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","289ff7a7":"# load the test data in\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","a783327b":"# see info about training data\ntrain_data.info()\ntrain_data.describe()","937b8ca9":"# see info about test data\ntest_data.info()\ntest_data.describe()","77cd1f51":"# replace missing values of Age and Fare\ntrain_data['Age'].fillna(train_data['Age'].dropna().median(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].dropna().median(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].dropna().median(), inplace=True)\n\n# replace strings with ints for Sex column\ngender = {'male': 1, 'female': 2}\ntrain_data['Sex'] = [gender[item] for item in train_data['Sex']]\ntest_data['Sex'] = [gender[item] for item in test_data['Sex']]","8a0bea5b":"women = train_data.loc[train_data.Sex == 2][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","49a7eefa":"men = train_data.loc[train_data.Sex == 1][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)\n","be784c03":"# print what medians I can\nmedian_age = train_data['Age'].median()\nmedian_pclass = train_data['Pclass'].median()\nmedian_sibsp = train_data['SibSp'].median()\nmedian_fare = train_data['Fare'].median()\nmedian_parch = train_data['Parch'].median()\nprint(\"median age:\", median_age)\nprint(\"median pclass\", median_pclass)\nprint(\"median sibsp:\", median_sibsp)\nprint(\"median fare:\", median_fare)\nprint(\"median parch:\", median_parch)","bbe6807d":"print(train_data[['Pclass', 'Survived']].groupby(['Pclass']).mean())\nprint(train_data[['SibSp', 'Survived']].groupby(['SibSp']).mean())\nprint(train_data[['Parch', 'Survived']].groupby(['Parch']).mean())","e4ee6d52":"train_data = train_data.drop(['PassengerId', 'Age', 'Ticket', 'Cabin', 'Name', 'Embarked'], axis=1)\ntest_data = test_data.drop(['Age', 'Ticket', 'Cabin', 'Name', 'Embarked'], axis=1)","0416ea88":"X_train = train_data.drop('Survived', axis=1)\ny_train = train_data['Survived']\nX_test = test_data.drop('PassengerId', axis=1).copy()\n\nLR = LinearRegression()\nLR.fit(X_train, y_train)\n\nKNN = KNeighborsClassifier()\nKNN.fit(X_train, y_train)\n\nDTC = DecisionTreeClassifier()\nDTC.fit(X_train, y_train)\n\nSGD = SGDClassifier()\nSGD.fit(X_train, y_train)","1bc08276":"LR_prediction = LR.predict(X_test)\nLR_score = LR.score(X_train, y_train)\nprint(\"LinearRegression accuracy is \", LR_score)\n\nKNN_prediction = KNN.predict(X_test)\nKNN_score = KNN.score(X_train, y_train)\nprint(\"KNeighborsClassifier accuracy is \", KNN_score)\n\nDTC_prediction = DTC.predict(X_test)\nDTC_score = DTC.score(X_train, y_train)\nprint(\"DecisionTreeClassifier accuracy is \", DTC_score)\n\nSGD_prediction = SGD.predict(X_test)\nSGD_score = SGD.score(X_train, y_train)\nprint(\"SGDClassifier accuracy is \", SGD_score)","2668b1cb":"output = pd.DataFrame({\n    \"PassengerId\": test_data[\"PassengerId\"],\n    \"Survived\": DTC_prediction\n})\n\noutput.to_csv('submissionfile.csv', index=False)","6f7f68b7":"Seems that all 3 of these columns are somewhat relevant.\nI'm going to drop PassengerId, Age, Ticket, Cabin, Name, and Embarked because I don't think they are\nimportant features.","66b2a47d":"# Evaluating Models","8aa79613":"# Building Models","b192a377":"The Decision Tree had the highest accuracy, so I'll use that one for the submission","860d0503":"# Generate Submission Data","414b1de7":"Evaluate each of the 4 models and compare their accuracies","7fdf0c29":"Cameron Berezuk \nCAP4611 Assignment 0\n\n# Loading Data","2706d31b":"# Exploratory Data Analysis","76da80a8":"Build the 4 different models we are allowed to use for this assignment"}}