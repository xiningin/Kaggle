{"cell_type":{"633d90eb":"code","570265d0":"code","7753ffc8":"code","bc570d54":"code","44ad3948":"code","a6f7a884":"code","38e4724c":"code","7d70cdb7":"code","804b72b2":"code","7354a5c0":"code","0feec61a":"code","3f4fb324":"code","8e712422":"code","a1fcd287":"code","c8329624":"code","8477a11b":"code","ad2534ee":"code","46f40ed5":"code","4d032f08":"code","b6a6caa0":"code","96e20bac":"code","c8f356e2":"code","65599fa5":"code","40bac7ee":"code","aa53a9af":"markdown","26f06deb":"markdown","a3d5d787":"markdown","aab89e50":"markdown","132d768c":"markdown","7f3fbcdb":"markdown","11307818":"markdown","27916fa4":"markdown","ba975107":"markdown","dc9c93a6":"markdown","abb833d6":"markdown","8b40099a":"markdown","8229154c":"markdown","cb14908e":"markdown","09d7dc4c":"markdown","f3fda8ba":"markdown"},"source":{"633d90eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","570265d0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7753ffc8":"df_tr=pd.read_csv(\"..\/input\/banking-dataset-marketing-targets\/train.csv\",sep=';')\ndf_te=pd.read_csv(\"..\/input\/banking-dataset-marketing-targets\/test.csv\",sep=';')","bc570d54":"df_tr.head()","44ad3948":"df_tr.isnull().sum()","a6f7a884":"df_tr.shape","38e4724c":"sns.heatmap(df_tr.corr())","7d70cdb7":"df_tr.age.unique()","804b72b2":"df_tr.job.unique()","7354a5c0":"df_tr.info()","0feec61a":"df_tr.columns","3f4fb324":"df_tr.age.dtype","8e712422":"for col in df_tr.columns:\n    if df_tr[col].dtype=='int64':\n        plt.hist(df_tr[col].value_counts(),Label=True)\n        plt.title('Histogram for {}'.format(col))\n        plt.show(); \n    \n    else:\n        plt.pie(df_tr[col].value_counts(),labels=df_tr[col].unique())\n        plt.title('Piechart for {}'.format(col))\n        plt.show();","a1fcd287":"for col in df_tr.columns:\n    if df_tr[col].dtype != 'object':\n        sns.catplot(x=col, y='y',kind=\"boxen\",data=df_tr.sort_values(col))\n        plt.title('Catplot for {}'.format(col))\n        plt.show();","c8329624":"dftr=pd.get_dummies(df_tr,prefix=None,prefix_sep='_',drop_first=True)","8477a11b":"dfte=pd.get_dummies(df_te,prefix=None,prefix_sep='_',drop_first=True)","ad2534ee":"dftr","46f40ed5":"dftr.info()","4d032f08":"xtr=dftr.iloc[:,:42]\nytr=dftr.iloc[:,42]\n","b6a6caa0":"xte=dfte.iloc[:,:42]\nyte=dfte.iloc[:,42]","96e20bac":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(xtr)\nX_train = scaler.transform(xtr)\nX_test = scaler.transform(xte)","c8f356e2":"# Oversample and plot imbalanced dataset with SMOTE\nfrom collections import Counter\nfrom numpy import where\nfrom imblearn.over_sampling import SMOTE\n# summarize class distribution\ncounter = Counter(ytr)\nprint(counter)\n# transform the dataset\noversample = SMOTE()\nXne, yne = oversample.fit_resample(X_train, ytr)\n# summarize the new class distribution\ncounter = Counter(yne)\nprint(counter)\n# scatter plot of examples by class label\nfor label, _ in counter.items():\n\trow_ix = where(yne == label)[0]\n\tplt.scatter(Xne[row_ix, 0], Xne[row_ix, 1], label=str(label))\nplt.legend()\nplt.show()","65599fa5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nmodel = LogisticRegression(solver='liblinear', random_state=0)\nmodel.fit(Xne, yne)\ny_pred = model.predict(X_test)\nresult = confusion_matrix(yte, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(yte, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(yte,y_pred)\nprint(\"Accuracy:\",result2)","40bac7ee":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 2)\nclassifier.fit(Xne, yne)\ny_pred = classifier.predict(X_test)\nresult = confusion_matrix(yte, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(yte, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(yte,y_pred)\nprint(\"Accuracy:\",result2)","aa53a9af":"**Visualizing the relation**","26f06deb":"Accuracy is very bad here","a3d5d787":"**Trying to get into the dataset columns relation**","aab89e50":"***Reading The Datasets***","132d768c":"***Logistic***","7f3fbcdb":"***KNN***","11307818":"***Differntiating X,y***","27916fa4":"knn is giving us excellent accuracy","ba975107":"***Creatibg Dummies for categorical columns***","dc9c93a6":"***Visualizing the features and response***","abb833d6":"**Visualizing the correlation**","8b40099a":"**Understanding The Dataset**","8229154c":"***Importing Required packages***","cb14908e":"**SEEing there is any null values or not**","09d7dc4c":"Clearly this is an imbalanced data","f3fda8ba":"**Transforming X's**"}}