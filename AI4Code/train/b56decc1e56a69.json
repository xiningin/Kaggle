{"cell_type":{"fa9e89c2":"code","36dfd2f4":"code","2229645d":"code","c1de739f":"code","b5624d75":"code","28396108":"code","ced92fc0":"markdown","ebbde087":"markdown","bb965bb9":"markdown","25dd2c2b":"markdown","7b32666b":"markdown","8cccbd41":"markdown","022453d0":"markdown"},"source":{"fa9e89c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36dfd2f4":"#Load the data : Training set\n\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","2229645d":"#Load the data : Test set\n\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","c1de739f":"# Exploring pattern: all female passengers survived, all male dies\n\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n\n# Calculating the percentage of female passengers who survived\n\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","b5624d75":"# Calculating the percentage of female passengers who survived\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","28396108":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ced92fc0":"### The challenge\n\nThe competition is simple: we want you to use the Titanic passenger data (name, age, price of ticket, etc) to try to predict who will survive and who will die.","ebbde087":"### The data\n\nThere are three files in the data: \n(1) **train.csv**, \n(2) **test.csv**, \n(3) **gender_submission.csv**.\n\n#### (1) train.csv\n\n**train.csv** contains the details of a subset of the passengers on board (891 passengers, to be exact -- where each passenger gets a different row in the table).  To investigate this data, click on the name of the file on the left of the screen.  Once you've done this, you can view all of the data in the window.  \n\nThe values in the second column (**\"Survived\"**) can be used to determine whether each passenger survived or not: \n- if it's a \"1\", the passenger survived.\n- if it's a \"0\", the passenger died.\n\nFor instance, the first passenger listed in **train.csv** is Mr. Owen Harris Braund.  He was 22 years old when he died on the Titanic.\n\n#### (2) test.csv\n\nUsing the patterns you find in **train.csv**, you have to predict whether the other 418 passengers on board (in **test.csv**) survived.  \n\nClick on **test.csv** (on the left of the screen) to examine its contents.  Note that **test.csv** does not have a **\"Survived\"** column - this information is hidden from you, and how well you do at predicting these hidden values will determine how highly you score in the competition! \n\n#### (3) gender_submission.csv\n\nThe **gender_submission.csv** file is provided as an example that shows how you should structure your predictions.  It predicts that all female passengers survived, and all male passengers died.  Your hypotheses regarding survival will probably be different, which will lead to a different submission file.  But, just like this file, your submission should have:\n- a **\"PassengerId\"** column containing the IDs of each passenger from **test.csv**.\n- a **\"Survived\"** column (that you will create!) with a \"1\" for the rows where you think the passenger survived, and a \"0\" where you predict that the passenger died.\n","bb965bb9":"## Getting started\n\n* First competition participation at Kaggle\n* First use of Python programming language \n* First use of random forest model with Python \n* Following the tutorial of [Alexis Cook](https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial)","25dd2c2b":"## Building Random Forest Model\n\nThis model is constructed of several \"trees\" (there are three trees in the picture below, but we'll construct 100!) that will individually consider each passenger's data and vote on whether the individual survived.  Then, the random forest model makes a democratic decision: the outcome with the most votes wins!\n\n![](https:\/\/i.imgur.com\/AC9Bq63.png)\n\nThe code cell below looks for patterns in four different columns (**\"Pclass\"**, **\"Sex\"**, **\"SibSp\"**, and **\"Parch\"**) of the data.  \n\nIt constructs the trees in the *random forest model* based on patterns in the **train.csv** file, before generating predictions for the passengers in **test.csv**.  The code also saves these new predictions in a CSV file **submission.csv**.\n","7b32666b":"### Exploring 1 Pattern: Code\n\nRemember our goal: we want to find patterns in train.csv that help us predict whether the passengers in test.csv survived.\n\nIn the sample submission file, the  **gender_submission.csv** assumes that all female passengers survived (and all male passengers died).\n\nIs this a reasonable first guess? We'll check if this pattern holds true in the data (in **train.csv**).","8cccbd41":"## Training ML model \n\nIn this section, I'm training my own ML model to improve my predictions for the challenge. \n\n### Loading data\n","022453d0":"### Exploring 1 Pattern: Conclusion\n\nAlmost 75% of the women on board survived, whereas only 19% of the men lived to tell about it. \n\nSince gender seems to be such a strong indicator of survival, the submission file in gender_submission.csv is not a bad first guess!\n\nThis gender-based submission bases its predictions on only a single column. \n\nIf we consider multiple columns, we can discover more complex patterns that can potentially yield better-informed predictions. \n\nSince it is quite difficult to consider several columns at once (or, it would take a long time to consider all possible patterns in many different columns simultaneously), we'll use machine learning to automate this for us.\n"}}