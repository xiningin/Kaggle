{"cell_type":{"cfadaf73":"code","96dbc69c":"markdown"},"source":{"cfadaf73":"import numpy as np\nimport pandas as pd\nimport math\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndf = pd.read_csv(\"..\/input\/flightdata\/FlightData.csv\")\ndf.head()\ndf.shape\ndf.isnull().values.any()\ndf.isnull().sum()\ndf = df.drop('Unnamed: 25', axis=1)\nprint(df.isnull().sum())\ndf = df[[\"MONTH\", \"DAY_OF_MONTH\", \"DAY_OF_WEEK\", \"ORIGIN\", \"DEST\", \"CRS_DEP_TIME\", \"ARR_DEL15\"]]\nprint(df.isnull().sum())\nprint(df[df.isnull().values.any(axis=1)].head())\n\n#Filling null coulmn values\ndf = df.fillna({'ARR_DEL15': 1})\nprint(df.iloc[177:185])\n\nprint(df.head())\n\n\nfor index, row in df.iterrows():\n    df.loc[index, 'CRS_DEP_TIME'] = math.floor(row['CRS_DEP_TIME'] \/ 100)\nprint(df.head())\n\ndf = pd.get_dummies(df, columns=['ORIGIN', 'DEST'])\nprint(df.head())\n\n\ntrain_x, test_x, train_y, test_y = train_test_split(df.drop('ARR_DEL15', axis=1), df['ARR_DEL15'], test_size=0.2, random_state=42)\nprint(train_x.shape)\n\nprint(test_x.shape)\n\n\nmodel = RandomForestClassifier(random_state=13)\nmodel.fit(train_x, train_y)\n\npredicted = model.predict(test_x)\nmodel.score(test_x, test_y)\n\nprobabilities = model.predict_proba(test_x)\n\nroc_auc_score(test_y, probabilities[:, 1])\n\n\nconfusion_matrix(test_y, predicted)\nprint('Confusion Matrix')\nprint(confusion_matrix(test_y, predicted))\n\ntrain_predictions = model.predict(train_x)\nprint('Precision Value ',precision_score(train_y, train_predictions))\n\n\nprint('Recall value ',recall_score(train_y, train_predictions))\n\nsns.set()\n\n\nfpr, tpr, _ = roc_curve(test_y, probabilities[:, 1])\nplt.plot(fpr, tpr, color='darkorange')\nplt.plot([0, 1], [0, 1], color='blue', lw=1, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n\nplt.show()\n\n\n\ndef predict_delay(departure_date_time, origin, destination):\n\n    try:\n        departure_date_time_parsed = datetime.strptime(departure_date_time, '%d\/%m\/%Y %H:%M:%S')\n    except ValueError as e:\n        return 'Error parsing date\/time - {}'.format(e)\n\n    month = departure_date_time_parsed.month\n    day = departure_date_time_parsed.day\n    day_of_week = departure_date_time_parsed.isoweekday()\n    hour = departure_date_time_parsed.hour\n\n    origin = origin.upper()\n    destination = destination.upper()\n\n    input = [{'MONTH': month,\n              'DAY': day,\n              'DAY_OF_WEEK': day_of_week,\n              'CRS_DEP_TIME': hour,\n              'ORIGIN_ATL': 1 if origin == 'ATL' else 0,\n              'ORIGIN_DTW': 1 if origin == 'DTW' else 0,\n              'ORIGIN_JFK': 1 if origin == 'JFK' else 0,\n              'ORIGIN_MSP': 1 if origin == 'MSP' else 0,\n              'ORIGIN_SEA': 1 if origin == 'SEA' else 0,\n              'DEST_ATL': 1 if destination == 'ATL' else 0,\n              'DEST_DTW': 1 if destination == 'DTW' else 0,\n              'DEST_JFK': 1 if destination == 'JFK' else 0,\n              'DEST_MSP': 1 if destination == 'MSP' else 0,\n              'DEST_SEA': 1 if destination == 'SEA' else 0 }]\n\n    return model.predict_proba(pd.DataFrame(input))[0][0]\n\nprint(predict_delay('1\/10\/2018 21:45:00', 'DTW', 'SEA'))\n#Histogram generation\nlabels = ('09\/08', '22\/05', '30\/10', '15\/04', '25\/07', '07\/09', '11\/03')\nvalues = (predict_delay('09\/08\/2019 20:30:00', 'ATL', 'SEA'),\n          predict_delay('22\/05\/2019 18:05:00', 'DTW', 'ATL'),\n          predict_delay('30\/10\/2019 16:45:00', 'MSP', 'JFK'),\n          predict_delay('15\/04\/2019 01:26:00', 'DTW', 'MSP'),\n          predict_delay('25\/07\/2019 08:10:00', 'MSP', 'ATL'),\n          predict_delay('07\/09\/2019 04:03:32', 'SEA', 'JFK'),\n          predict_delay('11\/03\/2019 02:15:45', 'DTW', 'ATL'))\nalabels = np.arange(len(labels))\n\nplt.bar(alabels, values, align='center', alpha=0.8)\nplt.xticks(alabels, labels)\nplt.ylabel('Probability of On-Time Arrival')\nplt.ylim((0.0, 1.0))\nplt.show()\n","96dbc69c":"ABSTARCT:\n\nConsidering the present situation and scenario of domestic flights in USA (Constraint: The country where the major transport for most of the people), the percentage of flight delays are seen in numerous instances and cancellations. For this project, we have considered the dataset of 5 major airports. which is one of the most depended and the world's biggest carrier as far as number of destinations served. In this case, with regards to domestic flights, AA has not satisfied the hopes as far as reliability or on-time performance in reality.\n\nFlight Delays additionally bring about airline organizations working business flights to bring about enormous losses. In this way, they are attempting their best to anticipate or stay away from Flight Delays and Cancellations by taking certain measures. This examination targets breaking down flight data of US residential flights worked by American Airlines, covering top 5 busiest air terminals of US and foreseeing conceivable appearance deferral of the flight utilizing Data Mining and Machine Learning Approaches. The Gradient Boosting Classifier Model is deployed by preparing(training) and hyper-parameter tuning it, accomplishing a most extreme precision of 85.73%. Such an Intelligent System is basic in prognosticating flights \u2018on-time execution.\n\nFlying for business is brimming with vulnerability. For business travelers with a tight connection flights and on time schedule for meetings or an arrival time near an important meeting, even a short flight deferral can cause genuine tension and economical losses. There are around 33% of the flight delays that have been recorded for a year 2015-16.  Of the postponed flights, 11% were delayed over one hour and 4% were deferred more than two, which is insensible. Postpones aren't only an aggravation for the traveler either \u2014 regarding lost profitability, productivity- organizations could see misfortunes into the many thousands, if not a great many dollars for each year.\n\n As indicated by the Bureau of Transportation Statistics, local airlines revealed an on-time appearance performance of about 80% for 2015\u201316. Of the delayed flights, anyplace between 25\u201335% of those flights (contingent upon the long stretch of the year) were postponed because of terrible climate. Another 5\u201310% of delayed flights were because generally showing up aircraft. In the event that we can show these postponements precisely, we'll represent practically 50% of every single deferred flight every year! \n \n \nProject Problem Summary:\n\nOne of the major concerns for airliners around the world is how to predict delays which usually affect the functioning of aircrafts ultimately resulting in loss of revenue and increasing costs. The goal of that model is to predict whether a flight you are considering booking is likely to arrive on time. If you know that the flight is likely to be late, you might choose to book another flight.\n\nPreparation of Project:\n\n\uf0d8\tGo to Bureau of Transportation Statistics site: \nhttps:\/\/www.bts.gov\/topics\/airlines-and-airports-0\n\uf0d8\tDownload the dataset and the guidelines from: \nhttps:\/\/docs.microsoft.com\/en-us\/learn\/paths\/intro-to-ml-with-python\/\nhttps:\/\/docs.microsoft.com\/en-us\/learn\/modules\/predict-flight-delays-with-python\/0-introduction\n\uf0d8\t Restore dataset and check whether the data is clean. \n\uf0d8\t After the step 2, you should see following tables.\n\n\nPoints- To- Remember:\n\n\uf0d8\tCheck the dataset and install all the prerequisites.\n\uf0d8\tCheck the versions and the libraries before you run the program.py\n\uf0d8\tClean the dataset and prepare data for machine learning model.\n\uf0d8\tMake sure the python program is picking the dataset properly or any missing attributes.\n\uf0d8\tInstall the require library for the visualization.\n\nRequired Software\u2019s and Installations: \n\n\uf0d8\tInstall Sublime text 3 for better experience in Mac\/ Windows.\n\uf0d8\tInstall Python 3.6 or higher version for some of the library functionalities.\n\uf0d8\tFlightData (a Sample Data Warehouse) and data from 2015-16 for 5 major airports.\n\uf0d8\tRequired libraries are mainly: PANDAS, SCIKIT-LEARN, MATPLOTLIB.\n\nWORK FLOW && Query Optimizer Implementation:\n\t\t\t\t\t\t\t\t\t\n\uf0d8\tDownload Dataset FlightData.csv from Bureau of Transportation Statistics site:\nhttps:\/\/www.bts.gov\/topics\/airlines-and-airports-0\n\uf0d8\tWe have tried to get the dataset which has 1,100,000 data which cannot be loaded\/ imported into an excel file in our local systems, since it has a limitation of 50MB. So, we have selected the dataset which is lesser in volume i.e., FlightData.csv\n\uf0d8\tDownload the one under as shown below. \nDatabase-> Filter the results (5 major airports)\n* Click on the zip file and download will start automatically.\n\uf0d8\tCopy this FlightData.csv file and paste it in the\nC:\/Users\/cetadmin\/Desktop\/dm final project \/MLNotebooks\/flightdata.csv  \nfolder. (The folder changes for each individual depends on the system Name, folder and program path etc.) \n\uf0d8\tAfter installing the python higher than 3.6 add few library installations such as:\n\n* PANDAS for cleaning and preparing data to be used for machine learning model.\n* SCIKIT-LEARN is used to create machine learning model.\n* MATPLOTLIB is used to visualize the model\u2019s performance.\n\uf0d8\tInstall Sublime Text 3 or higher and check whether python is free to connect to it.\n\n\n\n\nPreparation of Data: \n\n\uf0d8\tBasically, we have prepared data using bureau of transportation statistics. we have picked attributes according to the requirement of this project.\n\uf0d8\tIn bureau of transportation we have chosen data which is related to the airlines and airports and selected the attributes which really effect in predicting delay for the airlines.\n\uf0d8\tHere is the link which we have used in collecting the data.\nhttps:\/\/www.bts.gov\/topics\/airlines-and-airports-0 \n\nData Description: \n\n\uf0d8\tThis csv file contains 112310 rows and 26 columns.\n\uf0d8\tThis data contains information about flights in 2016 from 5 major airports (ALT, DTW, JFK, MSP, SEA).\n\nClean and Prepare Data:\n\n\uf0d8\tA dataset is a two-dimensional marked data structure. The columns in a dataset can be of various kinds (data types), much the same as sections in a spreadsheet or database table. It is the most normally utilized object in PANDAS. In this activity, you will look at the dataset \u2014 and the information inside it \u2014 all the more intently.\n\uf0d8\tThe first thing we have to do for a dataset is to check whether the dataset has any missing values\n\uf0d8\tThe easy way to check for missing values in PANDAS\n>> df.isnull().values.any()\n\uf0d8\tFind out where the missing values are. To do so, execute the following code:\n       >> df.isnull().sum()\n       Feature selection and data preprocessing:\n\n\uf0d8\tAs the dataset contains lot of attributes that is not required for predicting we have selected the attributes that are needed to such as \"MONTH\", \"DAY_OF_MONTH\", \"DAY_OF_WEEK\", \"ORIGIN\", \"DESTINATION\", \u201dSCHEDULE_DEP_TIME\", \"ARR_DELAY_15\u201d.\n\uf0d8\tIn the selected attributes checking for missing values and binarizing the attributes to convert it into 0\u2019s and 1\u2019s.\n\uf0d8\tBinning the attribute SCHEDULE_DEP_TIME to get the time into discrete integers.\n\uf0d8\tWe have used discretization for ORIGIN and DESTINATION to check whether a given flight originated at or was destined for the corresponding airport.\n\nBuild Machine Learning Model:\n\n\uf0d8\tTo create a model and to test the accuracy we have divided the dataframe into training set and test set (80% and 20%) using random_state.\n\uf0d8\tScikit-learn is one of the simple and effective tool for predictive data analysis.\n\uf0d8\tOne of the advantages of using scikit-learn is that you don't need to assemble these models or actualize the calculations that they use by hand. Scikit-learn incorporates an assortment of classes for executing regular AI models. One of them is RandomForestClassifier, which fits numerous decision trees to the information and utilizations averaging to help the general exactness and utmost overfitting.\n\nRandom forest classifier: \n\nA random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is always the same as the original input sample size but the samples are drawn with replacement if bootstrap=True (default).\n\n\uf0d8\tRandom forest classifier creates a set of decision trees from randomly selected subset of training set. It then aggregates the votes from different decision trees to decide the final class of the test object.\n\uf0d8\tRandom forest classifier is used to generate multiple decision tree as single decision tree may be prone to noise. So, taking the aggregate of many decision trees reduce the effect of noise and gives us more accurate results.\n\uf0d8\tThe accuracy we got using random forest classifier is 86%.\n\nArea under the Receiver operating Characteristic Curve (AUC Score):\n\n\uf0d8\tLet's dig a little deeper and determine how accurate the model really is that is, how adapt it is at determining whether a flight will arrive on time by using ROC AUC (Area Under Receiver Operating Characteristic Curve).\n\uf0d8\tROC AUC it is one of the most important evaluation metrics for checking any classification model\u2019s performance.\n\uf0d8\tBut before generating the curve we need to generate prediction probabilities for test set.\n\uf0d8\tThe score we got using ROC AUC is about 67%.\n\uf0d8\tScore method reflects how many of the items in the test set in the model are predicted correctly. This score of 67% due to the dataset as it contains more information about flights arriving on time that about flights that will be late. So, for accurate results it will be better to predict the flight that arrives on time than to predict whether the flight will be delayed.\n\uf0d8\tROC AUC considers and gives a precise value of how likely it is that a forecast of on-time or late will be correct.\n\nprecision_score:\n\n\uf0d8\tGenerated a confusion matrix also known as an error matrix. The confusion matrix quantifies the number of times each answer was classified correctly or incorrectly. \n\uf0d8\tOnce the confusion matrix is generated, we can predict the accuracy percentage. We used precision_score package in python to find the accuracy.\n\nFuture Implementations:\n\n\uf0d8\tWe have tried to predict the flight delays using the weather reports and considering the weather for next six months and predict the flight delays and cancellations, but the weather dataset was difficult to pull out because it was not free from dark-sky.API\n\uf0d8\tMixing up AI in this machine learning Model and training the data helps in faster conclusions and predictions.\n\uf0d8\tImplementing other classifiers on this dataset and identifying the best suitable classifier for this dataset.\n\uf0d8\tThis model helps us to predict if the flight we have booked is likely to get delayed by knowing this we can select a different flight that could save us time as well as money.\n\n\n\n\n\n"}}