{"cell_type":{"4180b8b6":"code","4d4a505a":"code","2f926ef4":"code","2e384c92":"code","ea9aa402":"code","5b17683b":"code","3b23e0f6":"code","04c44241":"code","2a38200d":"code","f55996c5":"code","45eba631":"markdown","cea7fe9a":"markdown","7a093b4f":"markdown","4e673dda":"markdown","16245a44":"markdown"},"source":{"4180b8b6":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import svm, neighbors, linear_model, neural_network\nfrom sklearn.svm import NuSVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom tqdm import tqdm\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.feature_selection import VarianceThreshold\nfrom tqdm import tqdm\nimport pickle\nimport matplotlib.pylab as plt","4d4a505a":"train = pd.read_csv('..\/input\/instant-gratification\/train.csv')\ntest = pd.read_csv('..\/input\/instant-gratification\/test.csv')\nwith open('..\/input\/predictions\/prediction.pkl', 'rb') as f:\n    vlad_preds = pickle.load(f)","2f926ef4":"oof_qda = np.zeros(len(train)) \npred_te_qda = np.zeros(len(test))\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor i in range(512):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n    \n    # STRATIFIED K-FOLD\n    skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        # MODEL AND PREDICT WITH QDA\n        clf = QuadraticDiscriminantAnalysis(reg_param=0.5)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n       \n    \nauc = roc_auc_score(train['target'],oof)\nprint('QDA scores CV =',round(auc,5))","2e384c92":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10))\ntest['qda_preds_target'] = preds\ntest['vlads_preds'] = vlad_preds[0:131073]\ntest[['qda_preds_target','vlads_preds']].sort_values('qda_preds_target').reset_index(drop=True) \\\n    .plot(style='.', alpha=0.1,\n          title='Vlad 0.973 Public Test predictions vs. QDA - Ordered by QDA',\n          ax=ax1)\ntest[['qda_preds_target','vlads_preds']].sort_values('vlads_preds').reset_index(drop=True) \\\n    .plot(style='.', alpha=0.1,\n          title='Vlad 0.973 Public Test predictions vs. QDA - Ordered by Vlads',\n          ax=ax2)\nplt.show()","ea9aa402":"test['diff'] = test['vlads_preds'] - test['qda_preds_target']\ntest['diff'].plot(kind='hist', figsize=(15, 5), bins=200, title='Distribution of difference between Vlad and Simple QDA preds')\nplt.show()","5b17683b":"test['qda_preds_target'] = test['qda_preds_target'].round(5)","3b23e0f6":"test[['vlads_preds','qda_preds_target','diff']].tail()","04c44241":"test[['vlads_preds','qda_preds_target','diff']] \\\n    .sort_values('diff') \\\n    .reset_index(drop=True) \\\n    .plot(style='.', figsize=(15, 5), title='Plot Predictions sorted by difference')\nplt.show()","2a38200d":"test.plot(x='vlads_preds',\n          y='qda_preds_target',\n          kind='scatter',\n          figsize=(15, 15),\n          alpha=0.2,\n          title='Vlad Predictions vs QDA')\nplt.show()","f55996c5":"test['vlads_rank'] = test['vlads_preds'].rank(method='first')\ntest['qda_rank'] = test['qda_preds_target'].rank(method='first')\ntest.plot(x='vlads_rank', y='qda_rank', kind='scatter', figsize=(15, 15), alpha=0.2, title='Vlads public test preds vs QDA by Rank')\nplt.show()","45eba631":"# Train a QDA model for comparison","cea7fe9a":"# Objective\nIn this notebook we will compare the public test set that Vlad released that has 0.973 LB for public test data only. We compare it with a standard QDA model and observe some interesting things.\n\nThe infamous \"don't fork\" kernel : https:\/\/www.kaggle.com\/speedwagon\/no-don-t-fork-it\n\nSome analysis of the data was done here: https:\/\/www.kaggle.com\/c\/instant-gratification\/discussion\/94785#latest-547646\nIt is theorized that the public test predictions are legitimate.","7a093b4f":"# Distribution of the difference between Vlad and QDA","4e673dda":"# Plot Vlad's Predictions vs. QDA\n- Predictions are much more confident for target of 1\n- Less confident for target of 0","16245a44":"# Plot by Rank"}}