{"cell_type":{"54f7bfc2":"code","93f9c909":"code","4a485b05":"code","17a2d870":"code","63f92a98":"code","ec6294fe":"code","19993b2a":"code","f4005413":"code","26d2fd82":"code","298ee2b9":"code","504dcd58":"code","bb56adf8":"code","7f37d43d":"code","f0453146":"code","a929dbc5":"code","d062f62c":"code","65e32792":"code","19bcf105":"code","685f5bde":"code","751cf0eb":"code","a23dee74":"code","cd41a0d1":"code","60711074":"code","7e1d1fb9":"code","704400b7":"code","abc3baa0":"code","7e7a4d6c":"code","5099ba4e":"code","e1fe48d1":"code","71305dca":"code","b4b1ff98":"code","e07118aa":"code","6d868a68":"code","1e3f72cc":"markdown","2e241e58":"markdown","ed27454f":"markdown","7c8f4db7":"markdown","167466c6":"markdown","cf6f56b5":"markdown","e9bd312e":"markdown","dc1045f6":"markdown","ac100a9c":"markdown","82ced76e":"markdown","21c339d6":"markdown","347cd037":"markdown","425041d2":"markdown","1a6a8b9a":"markdown","ae3b882f":"markdown","5fadb6a8":"markdown","aa048d98":"markdown","a90053b9":"markdown","efc8f466":"markdown"},"source":{"54f7bfc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93f9c909":"import numpy as np # linear algebra\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd","4a485b05":"#pip install tabula-py","17a2d870":"pd.set_option('display.max_columns',370) # setting the visulaization on columns\npd.set_option('display.max_rows',370)\npd.set_option(\"display.max_colwidth\",300)","63f92a98":"df_basedata= pd.read_csv('\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv',)\ndf=df_basedata.copy()\ndf_question=pd.read_csv('..\/input\/2021-kaggle-survey-question-modified-dataframe\/2021_Survey_question_DF.csv')","ec6294fe":"df.head(2)","19993b2a":"df=df.replace(['United States of America'],'USA')\ndf=df.replace(['United Kingdom of Great Britain and Northern Ireland'],'UK')\ndf=df.replace(['Iran, Islamic Republic of...'],'Iran')\ndf=df.replace(['No formal education past high school'],'High_School')\ndf=df.replace(['Some college\/university study without earning a bachelor\u2019s degree'],'Private_College')\ndf=df.replace(['I prefer not to answer'],'Prefer_not_answer')\ndf=df.replace(['A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)'],'Cloud_Platform')\ndf=df.replace(['A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)'],'GPU')\ndf=df.replace(['A personal computer \/ desktop'],'PC\/Desktop')\ndf=df.replace(['Cloud-certification programs (direct from AWS, Azure, GCP, or similar)'],'Certification_Program')\ndf=df.replace(['University Courses (resulting in a university degree)'],'University_Course')\ndf=df.replace(['Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)'],'Podcasts')\n","f4005413":"df['Cloud\/Not']=np.NaN #Creating a new feature to segregate Cloud users and non_Cloud users","26d2fd82":"filt_top10=(df['Q3'] == 'India')| (df['Q3'] == 'USA')| (df['Q3'] == 'Japan')| (df['Q3'] == 'China')|(df['Q3'] == 'Brazil')| (df['Q3'] == 'Russia')| (df['Q3'] == 'Nigeria')| (df['Q3'] == 'UK')| (df['Q3'] == 'Pakistan')|(df['Q3'] == 'Eygpt')\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,9))\ntotal = float(len(df))\nax = sns.countplot(x=df['Q3'].loc[filt_top10].loc[filt_top10],palette=\"Blues_d\", data=df,order=df['Q3'].loc[filt_top10].value_counts().index)\nplt.title('Top 10 Countries in the Survey', fontsize=20)\nax.set(xlabel=\" Countries\", ylabel = \"Count\")\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\nplt.show()","298ee2b9":"counts = df.iloc[1:][\"Q2\"].value_counts()\nplt.figure(figsize=(12,9))\nax=sns.barplot(y = counts.values, x=counts.index,palette=\"Blues_d\")\npatches = ax.patches\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right',)\n\nplt.show()","504dcd58":"counts = df.iloc[1:][\"Q1\"].value_counts()\nplt.figure(figsize=(12,9))\nax=sns.barplot(y = counts.values, x=counts.index,palette=\"Blues_d\")\npatches = ax.patches\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right',)\n\nplt.show()","bb56adf8":"counts = df.iloc[1:][\"Q4\"].value_counts()\nplt.figure(figsize=(12,9))\nax=sns.barplot(y = counts.values, x=counts.index,palette=\"Blues_d\")\npatches = ax.patches\nax.set_xticklabels(ax.get_xticklabels(), rotation=90,);\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\nplt.show()","7f37d43d":"counts = df.iloc[1:][\"Q5\"].value_counts()\nplt.figure(figsize=(12,9))\nax=sns.barplot(y = counts.values, x=counts.index,palette=\"Blues_d\")\npatches = ax.patches\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\nplt.show()","f0453146":"counts = df.iloc[1:][\"Q6\"].value_counts()\nplt.figure(figsize=(12,9))\nax=sns.barplot(y = counts.values, x=counts.index,palette=\"Blues_d\")\npatches = ax.patches\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\nplt.show()","a929dbc5":"Q7_all =['Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', 'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7', 'Q7_Part_8', 'Q7_Part_9', 'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER']\n        \ndf_Q7 = df.iloc[1:][Q7_all]\ndf_Q7_desc = df_Q7.describe().T.sort_values(\"freq\", ascending=False)\n\nplt.figure(figsize=(12,6))\nax=sns.barplot(x='top', y='count', data= df_Q7_desc)\nax.set(xlabel=\" Language\", ylabel = \"Count\")\n#ax.set_xticklabels(ax.get_xticklabels(),rotation=90);\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\n","d062f62c":"Q9_IDE= []\nfor x in df.columns:\n    if 'Q9' in x:\n        Q9_IDE.append(x)\n        \n\ndf_Q9=df.iloc[1:][Q9_IDE]\ndf_Q9.describe().T.sort_values('count',ascending=False)\n\nplt.figure(figsize=(12,6))\nax=sns.barplot(x='top',y='count',data=df_Q9.describe().T.sort_values('count',ascending=False))\nax.set(xlabel=\"Notebook \", ylabel = \"Count\")\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);","65e32792":"Q10_host_ide=[]\nfor x in df.columns:\n    if 'Q10' in x:\n        Q10_host_ide.append(x)\n        \ndf_Q10=df.iloc[1:][Q10_host_ide]\n\n\nplt.figure(figsize=(12,8))\nax=sns.barplot(x='top',y='count',data=df_Q10.describe().T.sort_values('count',ascending=False))\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);\nax.set(xlabel=\"Hosted Notebook \", ylabel = \"Count\")\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')","19bcf105":"for i in range(0,len(df)):\n    if df['Q11'].iloc[i]== 'Cloud_Platform':\n        df['Cloud\/Not'].iloc[i] = 'Cloud'\n    else :\n        df['Cloud\/Not'].iloc[i] = 'Non_Cloud'\n\ndf_cloud_count=pd.Series(df.iloc[1:,]['Q11'].value_counts())\ndf_cloud_count=df_cloud_count.reset_index()\n\ndf_cloud_count\n\nplt.figure(figsize=(12,8))\nax=sns.barplot(x='index',y='Q11',data=df_cloud_count)\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);\n\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\n","685f5bde":"plt.figure(figsize=(8,6))\nax=sns.countplot(x=df.iloc[1:,]['Cloud\/Not'])\nax.set(xlabel='Cloud_Usage')\nfor p in ax.patches:\n    percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n    x = p.get_x() + p.get_width()\n    y = p.get_height()\n    ax.annotate(percentage, (x, y),ha='right')\n\n","751cf0eb":"Q14_list=[]\nfor x in df.columns:\n    if 'Q14' in x:\n        Q14_list.append(x)","a23dee74":"df_q14=df.iloc[1:][Q14_list]","cd41a0d1":"df_q14.describe().T.sort_values('count',ascending=False)","60711074":"plt.figure(figsize=(8,10))\nax=sns.barplot(x='top',y='count',data=df_q14.describe().T.sort_values('count',ascending=False))\nax.set(xlabel='Vis_Tool')\nax.set_xticklabels(ax.get_xticklabels(),rotation=90);\n#later on can be segregated wrt python and non python libraries","7e1d1fb9":"#Created the list of columns(questions group) where kaggle is associated in the answer\nquestion_kaggle=set()\nquestions_with_kaggle=[]\nfor x in range(0,len(df_question)):\n    if 'Kaggle' in df_question['Suffix'][x]:\n        question_kaggle.add(df_question['Q_Id'][x].split('_')[0])\n        #print(df_question['Q_Id'][x].split('_')[0])\n        for i in df.columns:\n            if df_question['Q_Id'][x].split('_')[0] in i:\n                #print(i)\n                questions_with_kaggle.append(i)","704400b7":"question_kaggle","abc3baa0":"df_kaggle=df.iloc[1:,][questions_with_kaggle]","7e7a4d6c":"df=df.replace(['Podcasts (Chai Time Data Science, O\u2019Reilly Data Show, etc)'],'Podcasts')","5099ba4e":"df_kaggle.head(2)","e1fe48d1":"\nfilt_top10=(df['Q3'] == 'India')| (df['Q3'] == 'USA')| (df['Q3'] == 'Japan')#| (df['Q3'] == 'China')|(df['Q3'] == 'Brazil')| (df['Q3'] == 'Russia')| (df['Q3'] == 'Nigeria')| (df['Q3'] == 'UK')| (df['Q3'] == 'Pakistan')|(df['Q3'] == 'Eygpt')\nax=sns.countplot(df['Q3'].loc[filt_top10],hue=df['Q4'].loc[filt_top10].loc[filt_top10],order=df['Q3'].loc[filt_top10].value_counts().index)\nax.set(xlabel=\"Top 3 Countries\", ylabel = \"Count\")\nplt.legend(title='Qualification', loc='upper right')\nplt.figure(figsize=(25,10))","71305dca":"filt_lan = df.iloc[0,:]=='Language'\ndf.loc[:,filt_lan]","b4b1ff98":"df.head(2)","e07118aa":"group_student=df.iloc[2:,].groupby(['Q5'])\ngroup_student['Q7_Part_1'].value_counts()","6d868a68":"df['Q5'].unique()","1e3f72cc":"## Q1 AGE","2e241e58":"## Q14 VISUALIZATION","ed27454f":" # WORK IN PROGRESS","7c8f4db7":"## Q10_HOSTED NOTEBOOK","167466c6":"## Q5 PROFESSION","cf6f56b5":"## Q7_LANGUAGE","e9bd312e":"# Talent for Service Industry and Innovative Centers Top 3 Countrei\nUSA has highest chance of innovative Ideas generation in Data Science Field, since the most number of Doctoral Degree\nIndia has the resourse to give support to any Service Based industries becasue of its availablilty of Bachelors degree professioanls\nStarting a high end innovative technology company in USA is more succesfull than any other country.\nAnd starting a service industry in India is more easy in terms of readly avaialbe talents compared to other countries.","dc1045f6":"## Q3 COUNTRY","ac100a9c":"# INITIAL OBSERVATIONS","82ced76e":"### NEW FEATURES CREATION ","21c339d6":"## Q11_COMPUTING_PLATFORM","347cd037":"## Q6 EXPERIENCE","425041d2":"# ANALYTICAL COMPETITION","1a6a8b9a":"# KAGGLE","ae3b882f":"## Q2 GENDER","5fadb6a8":"### Renaming ","aa048d98":"Renaming long strings to short for convenience","a90053b9":"## Q4 QUALIFICATION","efc8f466":"## Q9_IDE"}}