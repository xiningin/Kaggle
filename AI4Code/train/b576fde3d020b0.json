{"cell_type":{"41cc7c7d":"code","f653fa7c":"code","b5764679":"code","11257797":"code","9d24bda9":"code","564c10cc":"code","4c4a3f0b":"code","4791bcaf":"code","3cdfc180":"code","7fe6b7e0":"code","0f34a8d0":"code","83211ec7":"code","1e88150f":"code","16440773":"code","110b35b8":"code","7e11890e":"code","9ee12621":"code","e6988ac2":"code","1ce636fd":"code","d9369930":"code","fcac4442":"code","8ba0f705":"code","2abcfd68":"code","1530d7a7":"code","da1787f5":"code","025ce979":"code","30766749":"markdown","e729c36b":"markdown","332e65dc":"markdown","0e594fa7":"markdown"},"source":{"41cc7c7d":"# DATA_PATH = '..\/input\/'\nDATA_PATH = '..\/input\/shopee-product-matching\/'\n\nimport psutil","f653fa7c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2, matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nimport gc\n\n# import cudf, cuml, cupy\n# from cuml.feature_extraction.text import TfidfVectorizer\n# from cuml.neighbors import NearestNeighbors\n\ndef getMetric(col):\n    def f1score(row):\n        n = len( np.intersect1d(row.target,row[col]) )\n        return 2*n \/ (len(row.target)+len(row[col]))\n    return f1score","b5764679":"COMPUTE_CV = True\n\ntest = pd.read_csv(DATA_PATH + 'test.csv')\nif len(test)>3: COMPUTE_CV = False\nelse: print('this submission notebook will compute CV score, but commit notebook will not')\n\n# COMPUTE_CV = False\n\nif COMPUTE_CV:\n    train = pd.read_csv(DATA_PATH + 'train.csv')\n    train['image'] = DATA_PATH + 'train_images\/' + train['image']\n    tmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\n    train['target'] = train.label_group.map(tmp)\n    # train_gf = cudf.read_csv(DATA_PATH + 'train.csv')\nelse:\n    train = pd.read_csv(DATA_PATH + 'test.csv')\n    train['image'] = DATA_PATH + 'test_images\/' + train['image']\n    # train_gf = cudf.read_csv(DATA_PATH + 'test.csv')\n    \nprint('train shape is', train.shape )\ntrain.head()","11257797":"tmp = train.groupby('image_phash').posting_id.agg('unique').to_dict()\ntrain['oof_hash'] = train.image_phash.map(tmp)","9d24bda9":"if COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_hash'),axis=1)\n    print('CV score for baseline =',train.f1.mean())","564c10cc":"# train['title_word'] = train['title'].apply(lambda x: x.lower().split(' '))\n\n# from gensim.test.utils import get_tmpfile\n# from gensim.models import KeyedVectors\n\n# vectors = KeyedVectors.load_word2vec_format(\"..\/input\/glove2word2vec\/glove_w2v.txt\") # import the data file","4c4a3f0b":"# title_feats = []\n# for title in tqdm_notebook(train['title_word'].values[:]):\n#     title_feat = []\n#     for word in title:\n#         if word in vectors:\n#             title_feat.append(vectors[word])\n#     if len(title_feat) == 0:\n#         title_feat = np.random.rand(200)\n#     else:\n#         title_feat = np.vstack(title_feat).max(0)\n#     title_feats.append(title_feat)\n#     # break\n    \n# del vectors;","4791bcaf":"# from sklearn.preprocessing import normalize\n\n# # l2 norm to kill all the sim in 0-1\n# title_feats = np.vstack(title_feats)\n# title_feats = normalize(title_feats)","3cdfc180":"# preds = []\n# CHUNK = 1024*4\n\n# title_feats = cupy.array(title_feats)\n\n# print('Finding similar images...')\n# CTS = len(title_feats)\/\/CHUNK\n# if len(title_feats)%CHUNK!=0: CTS += 1\n# for j in range( CTS ):\n    \n#     a = j*CHUNK\n#     b = (j+1)*CHUNK\n#     b = min(b, len(title_feats))\n#     print('chunk',a,'to',b)\n    \n#     distances = cupy.matmul(title_feats, title_feats[a:b].T).T\n#     # distances = np.dot(imagefeat[a:b,], imagefeat.T)\n    \n#     for k in range(b-a):\n#         IDX = cupy.where(distances[k,]>0.90)[0]\n#         # IDX = np.where(distances[k,]>0.95)[0][:]\n#         o = train.iloc[cupy.asnumpy(IDX)].posting_id.values\n#         preds.append(o)\n        \n# # del imagefeat, imgmodel","7fe6b7e0":"# train['oof_w2v'] = preds\n\n# if COMPUTE_CV:\n#     train['f1'] = train.apply(getMetric('oof_w2v'),axis=1)\n#     print('CV score for baseline =',train.f1.mean())","0f34a8d0":"from PIL import Image\n\nimport torch\ntorch.manual_seed(0)\ntorch.backends.cudnn.deterministic = False\ntorch.backends.cudnn.benchmark = True\n\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.autograd import Variable\nfrom torch.utils.data.dataset import Dataset\n\nclass ShopeeImageDataset(Dataset):\n    def __init__(self, img_path, transform):\n        self.img_path = img_path\n        self.transform = transform\n        \n    def __getitem__(self, index):\n        img = Image.open(self.img_path[index]).convert('RGB')\n        img = self.transform(img)\n        return img\n    \n    def __len__(self):\n        return len(self.img_path)","83211ec7":"imagedataset = ShopeeImageDataset(\n    train['image'].values,\n    transforms.Compose([\n        transforms.Resize((512, 512)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n]))\n    \nimageloader = torch.utils.data.DataLoader(\n    imagedataset,\n    batch_size=40, shuffle=False, num_workers=2\n)","1e88150f":"class ShopeeImageEmbeddingNet(nn.Module):\n    def __init__(self):\n        super(ShopeeImageEmbeddingNet, self).__init__()\n              \n        model = models.resnet18(True)\n        model.avgpool = nn.AdaptiveMaxPool2d(output_size=(1, 1))\n        model = nn.Sequential(*list(model.children())[:-1])\n        model.eval()\n        self.model = model\n        \n    def forward(self, img):        \n        out = self.model(img)\n        return out","16440773":"!mkdir -p \/root\/.cache\/torch\/hub\/checkpoints\/\n!cp ..\/input\/pretrained-pytorch-models\/resnet18-5c106cde.pth \/root\/.cache\/torch\/hub\/checkpoints\/\n!cp ..\/input\/pretrained-pytorch-models\/resnet50-19c8e357.pth \/root\/.cache\/torch\/hub\/checkpoints\/","110b35b8":"DEVICE = 'cuda'\n\nimgmodel = ShopeeImageEmbeddingNet()\nimgmodel = imgmodel.to(DEVICE)\n\nimagefeat = []\nwith torch.no_grad():\n    for data in tqdm_notebook(imageloader):\n        data = data.to(DEVICE)\n        feat = imgmodel(data)\n        feat = feat.reshape(feat.shape[0], feat.shape[1])\n        feat = feat.data.cpu().numpy()\n        \n        imagefeat.append(feat)","7e11890e":"from sklearn.preprocessing import normalize\n\n# l2 norm to kill all the sim in 0-1\nimagefeat = np.vstack(imagefeat)\nimagefeat = normalize(imagefeat)","9ee12621":"imagefeat = torch.from_numpy(imagefeat)\nimagefeat = imagefeat.cuda()","e6988ac2":"preds = []\nCHUNK = 1024*4\n\n\nprint('Finding similar images...')\nCTS = len(imagefeat)\/\/CHUNK\nif len(imagefeat)%CHUNK!=0: CTS += 1\nfor j in range( CTS ):\n    \n    a = j*CHUNK\n    b = (j+1)*CHUNK\n    b = min(b, len(imagefeat))\n    print('chunk',a,'to',b)\n    \n    distances = torch.matmul(imagefeat, imagefeat[a:b].T).T\n    distances = distances.data.cpu().numpy()\n    # distances = np.dot(imagefeat[a:b,], imagefeat.T)\n    \n    for k in range(b-a):\n        # IDX = cupy.where(distances[k,]>0.95)[0]\n        IDX = np.where(distances[k,]>0.95)[0][:]\n        o = train.iloc[IDX].posting_id.values\n#         o = train.iloc[cupy.asnumpy(IDX)].posting_id.values\n        preds.append(o)\n        \ndel imagefeat, imgmodel","1ce636fd":"train['oof_cnn'] = preds\n\nif COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_cnn'),axis=1)\n    print('CV score for baseline =',train.f1.mean())\n    \n# 0.6527899883424048 0.95\n# 0.6686372611222741 0.94\n# 0.6762305764407363 0.93","d9369930":"from sklearn.feature_extraction.text import TfidfVectorizer\nmodel = TfidfVectorizer(stop_words=None, binary=True, max_features=55000, use_idf=False)\ntext_embeddings = model.fit_transform(train.title).toarray()\nprint('text embeddings shape',text_embeddings.shape)","fcac4442":"text_embeddings = torch.from_numpy(text_embeddings)\ntext_embeddings = text_embeddings.cuda()","8ba0f705":"preds = []\nCHUNK = 1024*4\n\nprint('Finding similar titles...')\nCTS = len(train)\/\/CHUNK\nif len(train)%CHUNK!=0: CTS += 1\nCTS_index = 0\nfor j in range( CTS ):\n    \n    a = j*CHUNK\n    b = (j+1)*CHUNK\n    b = min(b,len(train))\n    print('chunk',a,'to',b)\n    \n    # COSINE SIMILARITY DISTANCE\n    # cts = np.dot( text_embeddings, text_embeddings[a:b].T).T\n    cts = torch.matmul(text_embeddings, text_embeddings[a:b].T).T\n    cts = cts.data.cpu().numpy()\n    print(cts.shape)\n    for k in range(b-a):\n        # IDX = np.where(cts[k,]>0.7)[0]\n        IDX = np.where(cts[k,]>0.7)[0]\n        o = train.iloc[IDX].posting_id.values\n        preds.append(o)\n        CTS_index += 1\n# del model, text_embeddings","2abcfd68":"train['oof_text'] = preds\n\nif COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_text'),axis=1)\n    print('CV score for baseline =',train.f1.mean())\n    \n    \n# 0.6137154152579091 0.7\n# 0.6507316994356058 0.6","1530d7a7":"def combine_for_sub(row):\n    x = np.concatenate([row.oof_text,row.oof_cnn, row.oof_hash])\n    return ' '.join( np.unique(x) )\n\ndef combine_for_cv(row):\n    x = np.concatenate([row.oof_text,row.oof_cnn, row.oof_hash])\n    return np.unique(x)","da1787f5":"if COMPUTE_CV:\n    tmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\n    train['target'] = train.label_group.map(tmp)\n    train['oof'] = train.apply(combine_for_cv,axis=1)\n    train['f1'] = train.apply(getMetric('oof'),axis=1)\n    print('CV Score =', train.f1.mean() )\n\ntrain['matches'] = train.apply(combine_for_sub,axis=1)","025ce979":"train[['posting_id','matches']].to_csv('submission.csv',index=False)\nsub = pd.read_csv('submission.csv')\nsub.head()","30766749":"# image CNN","e729c36b":"# title TFIDF","332e65dc":"# image hash","0e594fa7":"# text word2vec"}}