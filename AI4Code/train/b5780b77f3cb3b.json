{"cell_type":{"4206aa35":"code","02c057b4":"code","7b2becc5":"code","0fb3a68b":"code","09bbc6a4":"code","da6fab8a":"code","6997cd87":"code","8fe4a038":"code","e116f702":"code","c0a05731":"code","db246d1e":"code","3c2368cb":"code","eeeebb5c":"code","d0bfb467":"code","896aa569":"code","f236390b":"code","257d63d0":"code","e5afc5d4":"code","7c77386c":"code","4902bc71":"code","72d275f2":"code","04c39f68":"code","0ab7c3d9":"code","070129f5":"code","2d941c5d":"code","10094c71":"code","12cff433":"code","94f55827":"code","a19cdd67":"code","8e0cc990":"code","c2426f88":"code","09bc59cc":"code","ec359e41":"code","7c2fabe4":"code","fb129b89":"code","1ed95893":"code","ac2a9bf5":"code","af083513":"code","038dfa71":"code","21ab0a4f":"code","804716c5":"code","762b91b6":"code","8e6bf914":"code","d22e26e7":"code","0818c0fe":"code","300173c6":"code","5a15e221":"code","a0d33245":"code","e4fc5b69":"code","782686c7":"code","402da70b":"code","70a7c950":"code","bab066e0":"code","914c012c":"code","cec321a1":"code","f8a348be":"code","8c9fbdf6":"code","3ff65297":"code","d4be62d7":"markdown","002b36f7":"markdown","0f924be6":"markdown","50eb7061":"markdown","b8cb4703":"markdown","52f38a60":"markdown","639fbe81":"markdown","e6f5134f":"markdown","f7721d63":"markdown","1e8a1ca3":"markdown","5fc48ec8":"markdown","05599e2c":"markdown","20249b0c":"markdown","feaff2b8":"markdown","9a8b3a6f":"markdown","16047440":"markdown","71b45c0a":"markdown","8eb61877":"markdown","8801a3b8":"markdown","434dc069":"markdown","ae59c3dd":"markdown","eed0579d":"markdown","d8509066":"markdown","e7bbdaa6":"markdown","5812d7e0":"markdown","822c921f":"markdown","0506bb48":"markdown","6eb3572c":"markdown","78ded9b1":"markdown","8abd5de8":"markdown","a8ca003c":"markdown","d875c799":"markdown","ba533318":"markdown","773d65c5":"markdown","f64fab20":"markdown","570b31da":"markdown","905b0ab2":"markdown","d0379687":"markdown"},"source":{"4206aa35":"# Loading packages\nimport pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","02c057b4":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')","7b2becc5":"print(\"train.csv. Shape: \",df_train.shape)\nprint(\"test.csv. Shape: \",df_test.shape)","0fb3a68b":"df_train.head()","09bbc6a4":"#descriptive statistics summary\ndf_train['price'].describe()","da6fab8a":"#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","6997cd87":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","8fe4a038":"fig = plt.figure(figsize = (15,10))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(df_train['price'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(df_train['price']), plot=plt)","e116f702":"df_train['price'] = np.log1p(df_train['price'])\n#histogram\nf, ax = plt.subplots(figsize=(8, 6))\nsns.distplot(df_train['price'])","c0a05731":"# correlation\uc774 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 heatmap\n# continuous + sequential variables --> spearman\n# abs\ub294 \ubc18\ube44\ub840\uad00\uacc4\ub3c4 \uace0\ub824\ud558\uae30 \uc704\ud568\n# https:\/\/www.kaggle.com\/junoindatascience\/let-s-eda-it \uc900\ud638\ub2d8\uc774 \uc218\uc815\ud574 \uc900 \ucf54\ub4dc\ub85c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nimport scipy as sp\n\ncor_abs = abs(df_train.corr(method='spearman')) \ncor_cols = cor_abs.nlargest(n=10, columns='price').index # price\uacfc correlation\uc774 \ub192\uc740 column 10\uac1c \ubf51\uae30(\ub0b4\ub9bc\ucc28\uc21c)\n# spearman coefficient matrix\ncor = np.array(sp.stats.spearmanr(df_train[cor_cols].values))[0] # 10 x 10\nprint(cor_cols.values)\nplt.figure(figsize=(10,10))\nsns.set(font_scale=1.25)\nsns.heatmap(cor, fmt='.2f', annot=True, square=True , annot_kws={'size' : 8} ,xticklabels=cor_cols.values, yticklabels=cor_cols.values)","db246d1e":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","3c2368cb":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","eeeebb5c":"data = pd.concat([df_train['price'], df_train['sqft_living15']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living15', y=\"price\", data=data)","d0bfb467":"data = pd.concat([df_train['price'], df_train['sqft_above']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_above', y=\"price\", data=data)","896aa569":"data = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bathrooms', y=\"price\", data=data)","f236390b":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(18, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","257d63d0":"from plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nimport plotly.graph_objs as go\n\nimport time\nimport random\n\n#https:\/\/www.kaggle.com\/ashishpatel26\/bird-eye-view-of-two-sigma-nn-approach\ndef mis_value_graph(data):  \n    data = [\n    go.Bar(\n        x = data.columns,\n        y = data.isnull().sum(),\n        name = 'Counts of Missing value',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\n    layout= go.Layout(\n        title= '\"Total Missing Value By Column\"',\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig, filename='skin')\n    \ndef generate_color():\n    color = '#{:02x}{:02x}{:02x}'.format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color\n\ndf_all = pd.concat([df_train,df_test])\ndel df_all['price']\nmis_value_graph(df_all)","e5afc5d4":"### \uc720\ub2c8\ud06c \uac2f\uc218 \uacc4\uc0b0\ntrain_unique = []\ncolumns = ['bedrooms','bathrooms','floors','waterfront','view','condition','grade']\n\nfor i in columns:\n    train_unique.append(len(df_train[i].unique()))\nunique_train = pd.DataFrame()\nunique_train['Columns'] = columns\nunique_train['Unique_value'] = train_unique\n\ndata = [\n    go.Bar(\n        x = unique_train['Columns'],\n        y = unique_train['Unique_value'],\n        name = 'Unique value in features',\n        textfont=dict(size=20),\n        marker=dict(\n        line=dict(\n            color= generate_color(),\n            #width= 2,\n        ), opacity = 0.45\n    )\n    ),\n    ]\nlayout= go.Layout(\n        title= \"Unique Value By Column\",\n        xaxis= dict(title='Columns', ticklen=5, zeroline=False, gridwidth=2),\n        yaxis= dict(title='Value Count', ticklen=5, gridwidth=2),\n        showlegend=True\n    )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='skin')","7c77386c":"df_train['floors'].unique()","4902bc71":"data = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.regplot(x='sqft_living', y=\"price\", data=data)","72d275f2":"df_train.loc[df_train['sqft_living'] > 13000]","04c39f68":"df_train = df_train.loc[df_train['id']!=8990]","0ab7c3d9":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='grade', y=\"price\", data=data)","070129f5":"df_train.loc[(df_train['price']>12) & (df_train['grade'] == 3)]","2d941c5d":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","10094c71":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","12cff433":"df_train = df_train.loc[df_train['id']!=456]\ndf_train = df_train.loc[df_train['id']!=2302]\ndf_train = df_train.loc[df_train['id']!=4123]\ndf_train = df_train.loc[df_train['id']!=7259]\ndf_train = df_train.loc[df_train['id']!=2777]","94f55827":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='bedrooms', y=\"price\", data=data)","a19cdd67":"skew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)","8e0cc990":"for df in [df_train,df_test]:\n    df['date'] = df['date'].apply(lambda x: x[0:8])\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","c2426f88":"df_train.head()","09bc59cc":"for df in [df_train,df_test]:\n    # \ubc29\uc758 \uc804\uccb4 \uac2f\uc218 \n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    \n    # \uac70\uc2e4\uc758 \ube44\uc728 \n    df['sqft_ratio'] = df['sqft_living'] \/ df['sqft_lot']\n    \n    df['sqft_total_size'] = df['sqft_above'] + df['sqft_basement']\n    \n    # \uba74\uc801 \ub300\ube44 \uac70\uc2e4\uc758 \ube44\uc728 \n    df['sqft_ratio_1'] = df['sqft_living'] \/ df['sqft_total_size']\n    \n    df['sqft_ratio15'] = df['sqft_living15'] \/ df['sqft_lot15'] \n    \n    # \uc7ac\uac74\ucd95 \uc5ec\ubd80 \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    df['date'] = df['date'].astype('int')","ec359e41":"df_train['per_price'] = df_train['price']\/df_train['sqft_total_size']\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')\n\nfor df in [df_train,df_test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total_size']\n    df['zipcode_var'] = df['var'] * df['sqft_total_size']\n    del df['mean']; del df['var']","7c2fabe4":"train_columns = [c for c in df_train.columns if c not in ['id','price','per_price']]\nX = df_train[train_columns]\ny = df_train['price']\nx_sub = df_test[train_columns]","fb129b89":"from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom scipy.stats import skew\nfrom sklearn.decomposition import PCA, KernelPCA\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.linear_model import ElasticNet, SGDRegressor, BayesianRidge\nfrom sklearn.kernel_ridge import KernelRidge\nfrom xgboost import XGBRegressor\nfrom datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor","1ed95893":"# define cross validation strategy\ndef rmse_cv(model,X,y):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=5))\n    return rmse","ac2a9bf5":"models = [LinearRegression(),Ridge(),Lasso(alpha=0.01,max_iter=10000),RandomForestRegressor(),GradientBoostingRegressor(),SVR(),LinearSVR(),\n          ElasticNet(alpha=0.001,max_iter=10000),SGDRegressor(max_iter=1000,tol=1e-3),BayesianRidge(),XGBRegressor(), LGBMRegressor()]","af083513":"names = [\"LR\", \"Ridge\", \"Lasso\", \"RF\", \"GBR\", \"SVR\", \"LinSVR\", \"Ela\",\"SGD\",\"Bay\", \"Xgb\", \"LGB\"]\nfor name, model in zip(names, models):\n    score = rmse_cv(model, X, y)\n    print(\"{}: {:.6f}, {:.4f}\".format(name,score.mean(),score.std()))","038dfa71":"kfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse)","21ab0a4f":"alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","804716c5":"ridge = make_pipeline(RobustScaler(), RidgeCV(alphas=alphas_alt, cv=kfolds))\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas=alphas2, random_state=42, cv=kfolds))\nelasticnet = make_pipeline(RobustScaler(), ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio))                                \n# svr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003,))","762b91b6":"gbr = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42)         ","8e6bf914":"lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )","d22e26e7":"xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006,\n                                     tree_method = \"hist\")","0818c0fe":"stack_gen = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, gbr, xgboost, lightgbm),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","300173c6":"# score = cv_rmse(ridge)\n# print(\"RIDGE: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\n# score = cv_rmse(lasso)\n# print(\"LASSO: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\n# score = cv_rmse(elasticnet)\n# print(\"elastic net: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\n# score = cv_rmse(svr)\n# print(\"SVR: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(xgboost)\nprint(\"xgboost: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )","5a15e221":"print('START Fit')\n\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X), np.array(y))\n\n# print('elasticnet')\n# elastic_model_full_data = elasticnet.fit(X, y)\n\n# print('Lasso')\n# lasso_model_full_data = lasso.fit(X, y)\n\n# print('Ridge')\n# ridge_model_full_data = ridge.fit(X, y)\n\n# print('Svr')\n# svr_model_full_data = svr.fit(X, y)\n\nprint('GradientBoosting')\ngbr_model_full_data = gbr.fit(X, y)\n\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X, y)\n\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X, y)","a0d33245":"# def blend_models_predict(X):\n#     return ((0.1 * elastic_model_full_data.predict(X)) + \\\n#             (0.05 * lasso_model_full_data.predict(X)) + \\\n#             (0.1 * ridge_model_full_data.predict(X)) + \\\n#             (0.1 * svr_model_full_data.predict(X)) + \\\n#             (0.1 * gbr_model_full_data.predict(X)) + \\\n#             (0.15 * xgb_model_full_data.predict(X)) + \\\n#             (0.1 * lgb_model_full_data.predict(X)) + \\\n#             (0.3 * stack_gen_model.predict(np.array(X))))","e4fc5b69":"# print('RMSLE score on train data:')\n# print(rmsle(y, blend_models_predict(X)))","782686c7":"def blend_models_predict(X):\n    return ((1 * gbr_model_full_data.predict(X)) + \\\n            (0.0 * xgb_model_full_data.predict(X)) + \\\n            (0.0 * lgb_model_full_data.predict(X)) + \\\n            (0 * stack_gen_model.predict(np.array(X))))\n# 0.11\n# 0.14\n# 0.16\n# 0.11","402da70b":"print('RMSLE score on train data:')\nprint(rmsle(y, blend_models_predict(X)))","70a7c950":"winsor = blend_models_predict(X)\nwinsor = np.floor(np.expm1(winsor))\nwinsor = pd.DataFrame(winsor, columns = [\"Predict\"])\n# q1 = winsor['Predict'].quantile(0.005)\n# q2 = winsor['Predict'].quantile(0.995)\n# winsor['Predict'] = winsor['Predict'].apply(lambda x: x if x > q1 else x*0.77)\n# winsor['Predict'] = winsor['Predict'].apply(lambda x: x if x < q2 else x*1.1)\n\npred_y = np.floor(np.expm1(y))\nprint('RMSLE score on train data:')\nprint(rmsle(pred_y, winsor))","bab066e0":"def blend_models_predict(X):\n    return ((1 * gbr_model_full_data.predict(X)) + \\\n            (0.0 * xgb_model_full_data.predict(X)) + \\\n            (0.0 * lgb_model_full_data.predict(X)) + \\\n            (0 * stack_gen_model.predict(np.array(X))))","914c012c":"prediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission.csv\", index = False)\n\nprediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nq1 = prediction['Predict'].quantile(0.005)\nq2 = prediction['Predict'].quantile(0.995)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x > q1 else x*0.77)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x < q2 else x*1.1)\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission2.csv\", index = False)","cec321a1":"def blend_models_predict(X):\n    return ((0.9 * gbr_model_full_data.predict(X)) + \\\n            (0.0 * xgb_model_full_data.predict(X)) + \\\n            (0.0 * lgb_model_full_data.predict(X)) + \\\n            (0.1 * stack_gen_model.predict(np.array(X))))","f8a348be":"prediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission3.csv\", index = False)\n\nprediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nq1 = prediction['Predict'].quantile(0.005)\nq2 = prediction['Predict'].quantile(0.995)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x > q1 else x*0.77)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x < q2 else x*1.1)\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission4.csv\", index = False)","8c9fbdf6":"def blend_models_predict(X):\n    return ((0.8 * gbr_model_full_data.predict(X)) + \\\n            (0.0 * xgb_model_full_data.predict(X)) + \\\n            (0.0 * lgb_model_full_data.predict(X)) + \\\n            (0.2 * stack_gen_model.predict(np.array(X))))","3ff65297":"prediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission5.csv\", index = False)\n\nprediction = np.expm1(blend_models_predict(x_sub))\nprediction = pd.DataFrame(prediction, columns = [\"Predict\"])\nq1 = prediction['Predict'].quantile(0.005)\nq2 = prediction['Predict'].quantile(0.995)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x > q1 else x*0.77)\nprediction['Predict'] = prediction['Predict'].apply(lambda x: x if x < q2 else x*1.1)\nsub = pd.DataFrame()\nsub['id'] = df_test.id\nsub['price'] = prediction.values\nsub.to_csv(\"submission6.csv\", index = False)","d4be62d7":"bathrooms\uac19\uc740\uacbd\uc6b0 \uc18c\uc22b\uc810\uc774 \uc788\uc5b4\uc11c \ub9ce\uc774 \ud5f7\uac08\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uac12\uc774 \uc758\ubbf8\ud558\ub294\uac83\uc740 \uc544\ub798\uc640 \uac19\uace0 \uc704\uc758 \uac12\ub9cc\uc744 \uac00\uc9c0\uace0 \uac01\uac01\uc758 \uac12\uc774 \uba87\uac1c\uc788\ub294\uc9c0\ub294 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \n- 0.5 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4 \n- 0.75 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4\n- 1 : \uc138\uba74\ub300, \ud654\uc7a5\uc2e4, \uc0e4\uc6cc\uc2e4, \uc695\uc870 ","002b36f7":"\ud6c8\ub828\uacfc \ud3c9\uac00 \ub370\uc774\ud130\uc758 \ud06c\uae30\ub294 15000\uacfc 6500\uc73c\ub85c \uc801\uc740\ud3b8\uc774\uace0 \ube44\uc728\uc740 5:2 \ub85c \uc2ec\ud558\uac8c \ubd88\uade0\ub4f1\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ubcc0\uc218\uc758 \uac2f\uc218\uac00 20\uac1c\ub85c \uc801\uc740\ud3b8\uc774\uc11c \uc88b\uc740 \ud53c\uccd0\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294\uac83\uc774 \ubaa8\ub378\uc131\ub2a5\uc5d0 \uad00\uac74\uc73c\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4. ","0f924be6":"\ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 min\uacfc max\uc758 \ucc28\uc774\uac00 \ud06c\uace0, std\uac00 \uad49\uc7a5\ud788 \ud070 \ud3b8\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \uadf8\ub9bc\uc744 \ubcf4\uba74 \ub354 \uba85\ud655\ud558\uaca0\uc9c0\ub9cc \uc67c\ucabd\uc73c\ub85c \ubd84\ud3ec\uac00 \uad49\uc7a5\ud788 \uce58\uc6b0\uce5c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","50eb7061":"## 3. \ubcc0\uc218 \uc0dd\uc131","b8cb4703":"\uc704\uc758 3\uac12 \ubaa8\ub450 \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc5c6\uc774 \uac00\uaca9\uc774 \ub192\uc544 \ubcf4\uc774\ubbc0\ub85c \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","52f38a60":"\ub2e4\ud589\ud788\ub3c4 \uc704\uc758 \uacb0\uce21\uce58 \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \uacb0\uce21\uce58\uac00 \uc5c6\ub294 \uc0c1\ud669\uc785\ub2c8\ub2e4. ","639fbe81":"- \uc65c\ub3c4 : \uc624\ub978\ucabd \uaf2c\ub9ac\uac00 \uae38\uc218\ub85d \uac12\uc774 \ub354 \ud07d\ub2c8\ub2e4. \n- \ucca8\ub3c4 (kurtosis \/ kurtosis) : \ucca8\ub3c4 \uac12 (K)\uc774 3\uc5d0 \uac00\uae4c\uc6b8 \uacbd\uc6b0, scatter\uc740 \uc815\uaddc \ubd84\ud3ec\uc5d0 \uac00\uae5d\uc2b5\ub2c8\ub2e4. (K <3), \ubd84\ud3ec\uac00 \uc815\uaddc \ubd84\ud3ec\ubcf4\ub2e4 \ub354 \ud3c9\ud0c4\ud558\uac8c \ud3c9\ud0c4\ud558\ub2e4\uace0 \ud310\ub2e8 \ud560 \uc218 \uc788\uc73c\uba70, \ucca8\ub3c4\uac00 3\ubcf4\ub2e4 \ud070 \uc591\uc218\uc778 \uacbd\uc6b0 (K> 3), \ubd84\ud3ec\uac00\ubcf4\ub2e4 \ubfb0\uc871\ud55c \ubd84\ud3ec\ub85c \uac04\uc8fc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","e6f5134f":"\uce68\uc2e4\uc758 \uc218\ub97c \ubcf4\uba74 \uc704\uc5d0\uc11c \ud55c \uc598\uae30\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c median\uc774 \uc591\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ub744\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 bedrooms\uac00 2 ~ 6\uc740 \ubd84\uc0b0\uc774 \ub9e4\uc6b0 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc6b4\ub370\uc758 \uc800 \uac12\ub4e4\uc740 \ub2e4\ub978 \ubcc0\uc218\ub4e4\uc758 \uc601\ud5a5\uc774 \ud06c\ubbc0\ub85c \uc704\uc758 \uc815\ubcf4\ub9cc\uc744 \ubcf4\uace0 \uc81c\uac70\ud558\uc9c0\ub294 \uc54a\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.  ","f7721d63":"\ubaa9\uc801\ubcc0\uc218 price\uc758 \uacbd\uc6b0 *\uc9d1\uc744 \uad6c\ub9e4\ud55c \uc2dc\uc810* \uc758 \uac00\uaca9\uc785\ub2c8\ub2e4. \uc774 \ub9d0\uc740 \ud604\uc7ac\uc758 \uac00\uaca9\uc744 \ubc18\uc601\ud558\ub294\uac8c \uc544\ub2c8\ub77c\ub294 \ub9d0\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc9d1\uc744 \uc0b0 \uc774\ud6c4 \ub9ac\ubaa8\ub378\ub9c1\uc744 \ud1b5\ud574 \uc9d1\uc744 \uace0\ucce4\uc5b4\ub3c4 \uc9d1\uc758 \uac00\uaca9\uc5d0\ub294 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \n\n\ucc38\uace0 : https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83957","1e8a1ca3":"### 1.2 \ubcc0\uc218\uc124\uba85\n\ubcc0\uc218 \uc124\uba85\uc740 \uc0c1\ud601\ub2d8\uc758 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4  : https:\/\/www.kaggle.com\/cookierhkwk\/eda-house-price-prediction\n- ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n- date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n- price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n- bedrooms : \uce68\uc2e4\uc758 \uc218\n- bathrooms : \ud654\uc7a5\uc2e4\uc758 \uc218\n- sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- floors : \uc9d1\uc758 \uce35 \uc218\n- waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n- view : Has been viewed\n- condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n- grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n- sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n- yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n- yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n- zipcode : \uc6b0\ud3b8\ubc88\ud638\n- lat : \uc704\ub3c4\n- long : \uacbd\ub3c4\n- sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n- sqft_lot15 : 2015\ub144 \uae30\uc900 \uc8fc\ucc28 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788","5fc48ec8":"# Blending Models","05599e2c":"- date\uc758 \uacbd\uc6b0 yyyy-mm-dd + T000000\uc758 \ud615\ud0dc\ub85c \uc800\ud76c\uac00 \ud544\uc694\ud55c \ubd80\ubd84\uc740 \uc55e\uc758 8\uc790\ub9ac \uc785\ub2c8\ub2e4. \n- bathrooms\uc758 \uacbd\uc6b0 \uc18c\uc22b\uc810\uc758 \uac12\uc774 \ubcf4\uc774\ub294\ub370, \uc774\ub294 \ubbf8\uad6d\uc758 \uae30\uc900\uc5d0 \ub530\ub978 \uac83\uc785\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798 \ubd80\ubd84\uc5d0 \ub098\uc635\ub2c8\ub2e4. \n- yr_renovated\uc758 \uacbd\uc6b0 0\uc758 \uac12\uc774 \ubcf4\uc774\ub294\ub370, 0\ub144\ub3c4\uc5d0 \uc7ac\uac74\ucd95\uc774 \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uac00 \uc544\ub2c8\ub77c \uc7ac\uac74\ucd95\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \n- sqft_living \uacfc sqft_living15\ucc98\ub7fc \ube44\uc2b7\ud55c \uac12\uc774 \ubcf4\uc785\ub2c8\ub2e4. \ub458\uc740 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud06c\uae30 \uacc4\uc0b0\uc758 \uae30\uc900\uc5d0 \ub530\ub77c \ub2e4\ub978 \uac12\uc744 \ubcf4\uc785\ub2c8\ub2e4. \ub458\uc758 \ucc28\uc774\uac00 \uaf64 \ud070 \ubd80\ubd84\ub3c4 \uc788\uc5b4\uc11c \uc774\ub97c \uc798 \ud65c\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n\nhead\ub97c \ud1b5\ud574\uc11c\ub294 \uc774 \uc815\ub3c4\ub85c \uac00\ubccd\uac8c \ubcc0\uc218\ub97c \uc774\ud574\ud574\ubcf4\uace0 \ud558\ub098\ud558\ub098 \ubcc0\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc804\ucc98\ub9ac\ud574\uc57c \ud560 \ubd80\ubd84\uacfc \ud53c\uccd0 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \ud560 \uc544\uc774\ub514\uc5b4\ub97c \uace0\ubbfc\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","20249b0c":"grade\uc758 \uacbd\uc6b0 *\"1-3\uc740 \uac74\ubb3c \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc5d0 \ubbf8\uce58\uc9c0 \ubabb\ud558\uace0 7\uc740 \ud3c9\uade0 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744, 11-13\uc740 \ub192\uc740 \uc218\uc900\uc758 \uac74\ucd95 \ubc0f \ub514\uc790\uc778\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4.\" * \ub77c\uace0 \ud569\ub2c8\ub2e4. \n\n\uc9d1\uc758 \ub4f1\uae09\uc774 \ub192\uc73c\uba74 \uac00\uaca9\uc774 \uc88b\uc544\uc9c0\ub294 \uac83\uc740 \uc704\uc758 \ud788\ud2b8\ub9f5\uc5d0\uc11c\ub3c4 \ubd24\ub4ef\uc774 \ub2f9\uc5f0\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc804\ubc15\uc801\uc73c\ub85c \uc0c1\uc2b9\uace1\uc120\uc758 \ud615\ud0dc\ub3c4 \ubcf4\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \n- ***\ub4f1\uae09 3\uc758 \uacbd\uc6b0 \uac12\uc774 \ud070 \uc774\uc720***\n- ***\ub4f1\uae09 7,8,9\uc5d0\uc11c \uc774\uc0c1\uce58\uac00 \ub9ce\uc740 \uc774\uc720*** \n- ***\ub4f1\uae09 8\uacfc 11\uc5d0\uc11c \ucc28\uc774\uac00 \ud070 \uc774\uc0c1\uce58\uac00 \ub098\ud0c0\ub098\ub294 \uc774\uc720***\n\n\uc704\uc758 3\uac00\uc9c0\ub294 \uc880 \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubd10\uc57c \ud569\ub2c8\ub2e4. ","feaff2b8":"\uc544\ub798\ub294 \ubaa9\uc801\ubcc0\uc218\uc778 \uac00\uaca9\uacfc \uac00\uc7a5 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf8 \ud788\ud2b8\ub9f5\uc785\ub2c8\ub2e4. \uc804\ubd80 \ubcf4\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubd84\uc11d\uc758 \ud3b8\uc758\ub97c \uc704\ud574 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \uc0c1\uc704 10\uac1c\uc758 \uac12\ub9cc \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","9a8b3a6f":"\uc804\ubc18\uc801\uc73c\ub85c \uc120\ud615\uc131\uc744 \ubcf4\uc774\uc9c0\ub9cc \uac00\uaca9\uc774 14~15\uc0ac\uc774\uc5d0 sqft_living\uc774 14000\uc5d0 \uac00\uae4c\uc6b4 \uac12\uc740 \uaf64\ub098 \uc774\uc0c1\ud55c \uac12(\uc774\uc0c1\uce58)\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9d1\ub2c8\ub2e4. \uc81c\uac70\ud560\uc9c0 \ub9d0\uc9c0\ub294 \uc800 \uac12\uc744 \ud655\uc778\ud574\ubcf4\uace0 \uacb0\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. ","16047440":"\uc704\uc758 \ubaa9\uc801\ubcc0\uc218\uc758 \uacbd\uc6b0 \ucca8\ub3c4, \uc65c\ub3c4\ub3c4 \uad49\uc7a5\ud788 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0\uc54a\uace0, \ubd84\uc0b0 \ub610\ud55c \ub9e4\uc6b0 \ud070 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\ub294 \ud68c\uadc0\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 Normalize\ub97c \ud1b5\ud574 price\uc758 \ubd84\ud3ec\uac00 \uc815\uaddc\ubd84\ud3ec\ub97c \uac00\uc9c0\ub3c4\ub85d \ub9cc\ub4e4\uc5b4 \uc8fc\uaca0\uc2b5\ub2c8\ub2e4. ","71b45c0a":"#### 2.1.1 sqft_living","8eb61877":"sqft_living15\uc758 \uacbd\uc6b0 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \ud588\ub2e4\ubcf4\ub2c8 sqft_living\uc5d0 \ube44\ud574 \uac00\uaca9\uc758 \ubd84\uc0b0\uc774 \ud07d\ub2c8\ub2e4. \uc544\ubb34\ub798\ub3c4 \uc7ac\uac74\ucd95\uc73c\ub85c \uc778\ud55c \uc601\ud5a5\uc77c \uac83\uc73c\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 sqft_living15 \uadf8 \uc790\uccb4\ub97c \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4\ub294 \uc801\uc808\ud55c FE\uc774 \ud544\uc694\ud574 \ubcf4\uc785\ub2c8\ub2e4. ","8801a3b8":"### sqlf_living \/ sqlf_lot\n(\uc8fc\uac70 \ud3c9\ubc29 \ud53c\ud2b8 \/ \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8)\n\n1sqlf\ub294 0.0281\ud3c9\uc785\ub2c8\ub2e4. sqlf_lot\ub294 \ubd80\uc9c0 \ud3c9\ubc29 \ud53c\ud2b8\uc778\ub370, \ud754\ud788 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0, 32\ud3c9\ud615 \uc544\ud30c\ud2b8\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc2e4\uc81c\ub85c \uc4f0\ub294 \uc804\uc6a9 \uba74\uc801\uc740 25.7\ud3c9 \uc815\ub3c4\uc785\ub2c8\ub2e4. \n\n*\uc989, sqlf_living\uc740 \uc2e4\uc81c \uc0ac\uc6a9 \uba74\uc801 \/ sqlf_lot\ub294 \ucd1d \ubd80\uc9c0\uc758 \uba74\uc801\uc73c\ub85c \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4.*","434dc069":"\uc544\ub798\ub294 \uc9d1\uac12 \uac19\uc740 \uacbd\uc6b0\ub294 \ube44\uc2b7\ud55c \uc9c0\uc5ed\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc544\uc11c \uadf8\uac83\uc744 \ucf54\ub4dc\ub85c \uad6c\ud604\ud55c \uac83 \uc785\ub2c8\ub2e4. \uc8fc\uc758\ud574\uc57c \ud560 \uc810\uc740 \ub2e8\uc21c \uc9d1\uac12\uc774 \uc544\ub2c8\ub77c \ud3c9\ub2f9 \uac00\uaca9\uc744 \uc368\uc57c \ud55c\ub2e4\ub294 \uc810 \uc785\ub2c8\ub2e4 !!!","ae59c3dd":"### 1.5 \uc720\ub2c8\ud06c\ud55c \uac2f\uc218","eed0579d":"\ubaa9\uc801\ubcc0\uc218\uc640 \uc0c1\uad00\ub3c4\uac00 \ub192\uc740 \ubcc0\uc218\ub294 \uc9d1\uc758 \ub4f1\uae09 - \uc8fc\uac70\uacf5\uac04\uc758 \ud06c\uae30 - \uc804\uccb4 \ud06c\uae30\uc21c\uc774\uace0 \uc7ac\ubbf8\uc788\uac8c lat\uc774\ub77c\ub294 \uc704\ub3c4 \uac12\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc704\ub3c4\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac00\uaca9\uc774 \uc65c \uc99d\uac00\ud558\ub294\uc9c0 ? \uc774\uac83\uc744 \uc5b4\ub5bb\uac8c \ud65c\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0\ub294 \uc880 \ub354 \ud0d0\uc0c9\uc774 \ud544\uc694\ud574\ubcf4\uc785\ub2c8\ub2e4. \n\n--- \n2019-03-12 +) \uc704\uc5d0\uc11c lat\uc758 \uacbd\uc6b0 price\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uce74\ud1a1\ubc29\uacfc [Discussion](https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83549)\uc5d0 \ub530\ub974\uba74, \uc704\uc758 \uc9c0\uc5ed\uc740 \uc2dc\uc560\ud2c0\uc778\ub370 \uc2dc\uc560\ud2c0\uc740 \ubd81\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc0b4\uae30 \uc88b\uc740 \uc9d1\ub4e4\uc774 \ub9ce\ub2e4\uace0 \ud569\ub2c8\ub2e4. \n\n\uc774 \ubd80\ubd84\uc5d0 \ub300\ud574\uc11c [\uae40\ud0dc\uc9c4\ub2d8\uc758 \ucee4\ub110](https:\/\/www.kaggle.com\/fulrose\/map-visualization-with-folium-ing)\uc758 \uc790\ub8cc\uc5d0\uc11c \ub098\uc628 \ubd80\ubd84\uc744 \ubcf4\uba74 \ub354 \uc790\uc138\ud558\uac8c \uc778\uc0ac\uc774\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","d8509066":"### 1.4 \uacb0\uce21\uce58 ","e7bbdaa6":"### 1.3 \ubcc0\uc218\uc2dc\uac01\ud654 ( \ubc18\uc751\ubcc0\uc218 )\n- \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 : \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\n- \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4 : \ubc94\uc8fc\ud615 \ubcc0\uc218\ub3c4 \ud3ec\ud568\ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9 ","5812d7e0":"## 2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac \n### 2.1 \uc774\uc0c1\uce58 \uc81c\uac70 \n\uc704\uc5d0\uc11c \uc911\uc694\ud55c \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc2dc\uac01\ud654\ub97c \ud574\ubd24\uc744\ub54c, \ub2e4\uc74c\uc758 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574 \uc774\uc0c1\uce58\uac00 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \n- sqft_living, grade, bedrooms ","822c921f":"## 4. \ubaa8\ub378\ub9c1","0506bb48":"\ubc29\uc758 \uacbd\uc6b0 median \uac12\uc744 \uc911\uc2ec\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uba74 \uc5b4\ub290\uc815\ub3c4 \uc120\ud615\uad00\uacc4\ub97c \ub744\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubc29\uc758 \uac2f\uc218\uac00 2~6\uc758 \uacbd\uc6b0 \ubc29\uc774 \uc801\uc74c\uc5d0\ub3c4 \uac12\uc774 \ud070 \uac12\ub4e4\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc6b0\ub9ac\ub098\ub77c\uc758 \uacbd\uc6b0\ucc98\ub7fc \ubc29\uc758 \ud06c\uae30\ub294 \uc791\uc544\ub3c4 \uac15\ub0a8\ucc98\ub7fc \ube44\uc2fc \uc9c0\uc5ed\uc77c \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4.  ","6eb3572c":"#### 2.1.3 bedrooms ","78ded9b1":"#### 2.1.2 grade","8abd5de8":"view\uc758 \uc720\ub2c8\ud06c\uac2f\uc218\uac00 5\uc778\uac78\ub85c \ubcf4\ub2c8 grade\uac19\uc774 \uc21c\uc704\ud615\ubcc0\uc218\ub85c \uc0dd\uac01\ub418\uc5b4\uc9c0\uace0 waterfront\uc758 \uacbd\uc6b0\ub294 2\uac1c\ub85c \uc788\ub2e4\/\uc5c6\ub2e4\ub294 \uc0c1\uc9d5\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc704\uc5d0\uc11c \uba87\uba87 \uac12\ub4e4\uc744 \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uba74, ","a8ca003c":"\uc704\uc758 \uac12\uc744 \ubd24\uc744 \ub54c, \ub2e4\ub978\uac12\ub4e4\uc5d0 \ube44\ud574 sqft_living\ub9cc \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uaf64 \ud070 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c price\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uc740 `grade`\uc640 \ub2e4\ub978 \ud3c9\uc218\ub4e4\uc744 \uc0b4\ud3b4\ubd10\ub3c4 \ud070 \uc758\ubbf8\ub294 \uc5c6\uc5b4\ubcf4\uc774\ubbc0\ub85c \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","d875c799":"log\ub97c \ucde8\ud574\uc8fc\uba74 \uae30\uc874\ubcf4\ub2e4 \ub354 \uc815\uaddc\uc131\uc744 \uac00\uc9c0\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","ba533318":"### 1.3 \ubcc0\uc218 \uc2dc\uac01\ud654 ( \ubaa9\uc801\ubcc0\uc218 )","773d65c5":"\uac00\uc7a5 \uc911\uc694\ud55c \ubcc0\uc218\uc778 grade, sqft_ \ubaa8\ub450 \ub0ae\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub450 \uac12 \ubaa8\ub450 \uc774\uc0c1\uce58\ub85c \uaddc\uc815\ud558\uace0 \uc81c\uac70\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","f64fab20":"\uce35\uc218\uc758 \uacbd\uc6b0 1.5, 2.5, 3.5\uc640 \uac19\uc774 \uc18c\uc22b\uc810\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc774\ub294 \ubbf8\uad6d\uc5d0\uc11c \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \ud615\ud0dc\ub85c \ub2e4\ub77d\ubc29\uc744 \ub07c\uace0 \uc788\ub294 \ud615\ud0dc\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. ","570b31da":"### 2.3 \ubcc0\uc218 \uc218\uc815","905b0ab2":"### 2.2 \uc815\uaddc\ud654 \n\ucf54\ub4dc\ub294 \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ud65c\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. \nhttps:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline","d0379687":"### Model Selection"}}