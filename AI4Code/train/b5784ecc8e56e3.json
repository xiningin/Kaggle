{"cell_type":{"a5bb6beb":"code","b4d1fab1":"code","bf0fc3f7":"code","cb9cc2c5":"code","8632b047":"code","4e2e1247":"code","a390eeac":"code","e92f0a9f":"code","3b2626b5":"code","40bb7525":"code","5214b852":"code","7ebbb09e":"code","b5a16509":"code","3bff2d9c":"code","fb340c9d":"code","c1083428":"markdown","baae88cc":"markdown","9141ce8e":"markdown"},"source":{"a5bb6beb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\nimport csv\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b4d1fab1":"# read required data\nuk_historical = pd.DataFrame(pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/github\/covid-19-uk-historical-data.csv'))\ntest_by_country = pd.DataFrame(pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/world_bank\/total-covid-19-tests-performed-by-country.csv'))\ncases_by_country = pd.DataFrame(pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-over-time.csv'))\ngov_measures = pd.DataFrame(pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/HDE_update\/acaps-covid-19-government-measures-dataset.csv'))","bf0fc3f7":"cases_by_country_update = pd.DataFrame(pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-by-country.csv'))\n# cases_by_country_update.head(3)\n\nmost_confirmed = cases_by_country_update.\\\n                            sort_values(by = 'confirmed', ascending = False).\\\n                            iloc[:10][['country_region', 'confirmed']]\n\nmost_deaths = cases_by_country_update.\\\n                            sort_values(by = 'deaths', ascending = False).\\\n                            iloc[:10][['country_region', 'deaths']]","cb9cc2c5":"# Housekeeping for visuzalization\nimport matplotlib.colors\n\ncol_dict = {}\ncolors = [*matplotlib.colors.get_named_colors_mapping().keys()]\ncountries = cases_by_country_update.country_region.unique()\n\nfor i in range(len(countries)):\n    col_dict[countries[i]] = np.random.choice(colors)\n    colors.remove(col_dict[countries[i]])\n    \ncol_dict['US'] = 'crimson'","8632b047":"plt.figure(figsize=(16,8))\nfor c in [*most_deaths.country_region]:\n    timeseries = cases_by_country[cases_by_country.country_region == c]\n    dates = [*timeseries.last_update]\n    plt.plot(dates, timeseries.deaths.diff().rolling(14).sum(), linewidth = 1.8, alpha = 0.9, color = col_dict[c],\n             label = c)\n    plt.fill_between(dates, timeseries.deaths.diff().rolling(14).sum(), color = col_dict[c], alpha=0.2)\n\nplt.title('Daily death numbers by country')\nplt.rcParams['font.size'] = 12\n    \nindices = np.arange(0, len(dates), 5)\nplt.xticks([dates[x] for x in indices])\nplt.xticks(rotation='vertical')\nplt.legend()","4e2e1247":"plt.figure(figsize=(16,8))\nfor c in [*most_deaths.country_region]:\n    timeseries = cases_by_country[cases_by_country.country_region == c]\n    dates = [*timeseries.last_update]\n    plt.plot(dates, timeseries.deaths, linewidth = 1.8, alpha = 0.9, color = col_dict[c],\n             label = c)\n    plt.fill_between(dates, timeseries.deaths, color = col_dict[c], alpha=0.2)\n\nplt.title('Total death numbers by country')\nplt.rcParams['font.size'] = 12\n    \nindices = np.arange(0, len(dates), 5)\nplt.xticks([dates[x] for x in indices])\nplt.xticks(rotation='vertical')\nplt.legend()","a390eeac":"plt.figure(figsize=(16,8))\nfor c in [*most_confirmed.country_region]:\n    timeseries = cases_by_country[cases_by_country.country_region == c]\n    dates = [*timeseries.last_update]\n    plt.plot(dates, timeseries.delta_confirmed.rolling(14).sum(), linewidth = 1.8, alpha = 0.9, color = col_dict[c],\n             label = c)\n    plt.fill_between(dates, timeseries.delta_confirmed.rolling(14).sum(), color = col_dict[c], alpha=0.2)\n\nplt.title('Daily confirmed numbers by country')\nplt.rcParams['font.size'] = 12\n    \nindices = np.arange(0, len(dates), 5)\nplt.xticks([dates[x] for x in indices])\nplt.xticks(rotation='vertical')\nplt.legend()","e92f0a9f":"plt.figure(figsize=(16,8))\nfor c in [*most_confirmed.country_region]:\n    timeseries = cases_by_country[cases_by_country.country_region == c]\n    dates = [*timeseries.last_update]\n    plt.plot(dates, timeseries.confirmed, linewidth = 1.8, alpha = 0.9, color = col_dict[c],\n             label = c)\n    plt.fill_between(dates, timeseries.confirmed, color = col_dict[c], alpha=0.2)\n\nplt.title('Total confirmed numbers by country')\nplt.rcParams['font.size'] = 12\n    \nindices = np.arange(0, len(dates), 5)\nplt.xticks([dates[x] for x in indices])\nplt.xticks(rotation='vertical')\nplt.legend()","3b2626b5":"uk_historical.head(3)","40bb7525":"def annotate_and_format(bars, color_ = 'dimgrey'):\n    max_height = max([x.get_height() for x in bars])\n    plt.ylim(0, max_height*1.2)\n    for i in bars:\n        plt.text(i.get_x() + i.get_width()\/2.5, \n                 i.get_height() + max_height * 0.04, \n                 str(i.get_height()),\n                 fontsize = 15, color = color_)","5214b852":"# random selector for '1 to 4' cases to preserve the average\nuk_historical['totalcases'] = uk_historical.totalcases.apply(lambda x: \\\n                                                             np.random.randint(2,4) \\\n                                                             if x == '1 to 4' else int(x))","7ebbb09e":"# get most recent dates in data for each country in the UK\nuk_cases = uk_historical.groupby('country').max()\nmost_recent = {c: uk_cases.loc[c].date for c in uk_cases.index}\nmost_recent","b5a16509":"uk_case_by_country = {c: uk_historical[(uk_historical.country == c)&\\\n                                       (uk_historical.date == most_recent[c])].totalcases.sum()\\\n                      for c in most_recent.keys()}\n\nuk_case_df = pd.DataFrame(uk_case_by_country, index= ['currentcases']).T.\\\n                          sort_values(by = 'currentcases', ascending = False)\n\nuk_case_df","3bff2d9c":"plt.figure(figsize=(16,8))\nbars = plt.bar(uk_case_df.index, uk_case_df.currentcases, \n        color='navy', alpha = 0.6)\n\n# annotate\nannotate_and_format(bars)\nplt.title('Most recent case numbers by country in the UK')\nplt.rcParams['font.size'] = 15","fb340c9d":"plt.figure(figsize=(16,8))\nfor c in ['United Kingdom']:\n    timeseries = cases_by_country[cases_by_country.country_region == c]\n    dates = [*timeseries.last_update]\n    plt.plot(dates, timeseries.delta_confirmed.rolling(14).sum(), linewidth = 1.8, alpha = 0.9, color = col_dict[c],\n             label = 'Confirmed COVID Cases (UK)')\n    plt.plot(dates, timeseries.deaths.diff().rolling(14).sum(), linewidth = 1.8, alpha = 0.9, color = 'r',\n             label = 'COVID-related Deaths (UK)')\n    plt.fill_between(dates, timeseries.delta_confirmed.rolling(14).sum(), color = col_dict[c], alpha=0.2)\n    plt.fill_between(dates, timeseries.deaths.diff().rolling(14).sum(), color = 'r', alpha=0.2)\n\nplt.title('Daily confirmed cases in the United Kingdom')\nplt.rcParams['font.size'] = 12\n    \nindices = np.arange(0, len(dates), 5)\nplt.xticks([dates[x] for x in indices])\nplt.xticks(rotation='vertical')\nplt.legend()","c1083428":"[](http:\/\/)# **Understanding COVID-19**\n\nExploratory analysis for understanding COVID-19 by country and state.","baae88cc":"## 1 - United Kingdom","9141ce8e":"Load Data"}}