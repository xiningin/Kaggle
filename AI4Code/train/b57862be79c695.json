{"cell_type":{"081e8927":"code","753e2eba":"code","227e5baf":"code","bc47fd82":"code","893140dd":"code","4c03e5cc":"code","5243f174":"code","7c6aa030":"code","5b208e74":"code","3c142c7a":"code","9d9574c7":"code","8fc60218":"markdown","3ecfa734":"markdown","34023050":"markdown","9ee852e5":"markdown"},"source":{"081e8927":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","753e2eba":"X = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/X.npy\")\nY = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Y.npy\")","227e5baf":"X.shape","bc47fd82":"Y.shape","893140dd":"sample = 450\nplt.imshow(X[sample])\nplt.title(Y[sample])\nplt.show()","4c03e5cc":"X = X.reshape(-1, 64*64)\nX.shape","5243f174":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.15, random_state = 23)","7c6aa030":"from keras.models import Sequential\nfrom keras.layers import Dense","5b208e74":"model = Sequential()\nmodel.add(Dense(4096, input_dim = 4096, activation = \"relu\"))\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","3c142c7a":"hist = model.fit(X_train, y_train, epochs = 50, batch_size = 32, validation_data = (X_test, y_test))","9d9574c7":"plt.plot(hist.history[\"val_accuracy\"])\nplt.title(\"Validation Accuracy Graph\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.show()","8fc60218":"## Train Test Split","3ecfa734":"## Load Data","34023050":"# Introduction\n\nHello. In this data set, I will try to convert the numbers shown in sign language into computer language.\n\nFirst, I will load data and after I will try to implement ANN in a simple form.","9ee852e5":"## Create an ANN Model"}}