{"cell_type":{"cd0744e7":"code","3024b8c8":"code","a0395ca9":"code","500e88c4":"code","4456a52a":"code","ae818472":"code","6d9f93ca":"code","9569dabb":"markdown","0b59d7a7":"markdown","e5a0d2be":"markdown"},"source":{"cd0744e7":"import cv2\nimport numpy as np\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.callbacks import Callback, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport tensorflow as tf\nfrom tqdm import tqdm","3024b8c8":"def build_model(pretrained):\n    model = Sequential([\n        pretrained,\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(1, activation='sigmoid')\n    ])\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(),\n        metrics=['accuracy']\n    )\n    \n    return model","a0395ca9":"base_path = '\/kaggle\/input\/140k-real-and-fake-faces\/real-vs-fake\/'\nimage_gen = ImageDataGenerator(rescale=1.\/255.)\n\ntrain_flow = image_gen.flow_from_directory(\n    base_path + 'train\/',\n    target_size=(224, 224),\n    batch_size=64,\n    class_mode='binary'\n)\n\nvalid_flow = image_gen.flow_from_directory(\n    base_path + 'valid\/',\n    target_size=(224, 224),\n    batch_size=64,\n    class_mode='binary'\n)\n\ntest_flow = image_gen.flow_from_directory(\n    base_path + 'test\/',\n    target_size=(224, 224),\n    batch_size=64,\n    class_mode='binary'\n)","500e88c4":"densenet = DenseNet121(\n    weights='\/kaggle\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n)\nmodel = build_model(densenet)\nmodel.summary()","4456a52a":"train_steps = 100000\/\/64\nvalid_steps = 20000\/\/64\n\nmodel.fit_generator(\n    train_flow,\n    epochs=3,\n    steps_per_epoch=train_steps,\n    validation_data=valid_flow,\n    validation_steps=valid_steps\n)","ae818472":"y_pred = model.predict_generator(test_flow)\ny_test = test_flow.classes","6d9f93ca":"print(\"ROC AUC Score:\", metrics.roc_auc_score(y_test, y_pred))\nprint(\"AP Score:\", metrics.average_precision_score(y_test, y_pred))\nprint()\nprint(metrics.classification_report(y_test, y_pred > 0.5))","9569dabb":"# Train Model","0b59d7a7":"# Evaluation","e5a0d2be":"# Generator"}}