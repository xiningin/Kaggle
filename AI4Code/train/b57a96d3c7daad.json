{"cell_type":{"f1fa7c7c":"code","abec1062":"code","8210e4b8":"markdown","6a56c282":"markdown"},"source":{"f1fa7c7c":"class Trader():\n    \n    def __init__(self,vola):\n        self.vola = vola\n        \n    def setMarket(self, vola):\n        self.vola = vola\n        \n    def trade(self):\n        if self.vola == 'stable':\n            return 0\n        else: \n            return 1\n        \nclass Volatility():\n    def __init__(self,prev_date, num_trade, feature_64, last_time):\n        self.prev_date = prev_date\n        self.num_trade = num_trade\n        self.feature_64 = feature_64\n        self.last_time = last_time\n    def check_vola(self, trader, test_df):\n        if test_df['date'].values == self.prev_date:\n            self.num_trade +=1\n            self.feature_64.append(test_df['feature_64'])\n        else:\n            self.prev_date = test_df['date'].values\n            self.num_trade = 0\n            self.feature_64 = []\n            trader.setMarket('stable')\n\n        if self.num_trade%100==0:\n            if self.last_time is not None and (test_df['feature_64'].values<0.7 or test_df['feature_64'].values < 1.8):\n                self.time_between = test_df['feature_64'].values-self.last_time\n                if self.time_between < 0.1:\n                    trader.setMarket('volatile')\n                else:\n                    trader.setMarket('stable')\n            self.last_time = test_df['feature_64'].values\n            \nvolatility = Volatility(0.0, 0, [], None)\ntrader = Trader('stable')","abec1062":"import numpy  as np\nimport pandas as pd\nimport janestreet\nenv = janestreet.make_env()\niter_test = env.iter_test()\nfor (test_df, sample_prediction_df) in iter_test:\n    # Check volatility\n    volatility.check_vola(trader, test_df)\n    \n    \n    feature_0   = test_df['feature_0'].item()  # 1 == buy, -1 == sell\n    feature_64  = test_df['feature_64'].item() # the 'clock' feature\n    \n    # 'selling' features\n    feature_43  = test_df['feature_43'].item()\n    feature_117 = test_df['feature_117'].item()\n    \n    # 'buying' features\n    feature_8   = test_df['feature_8'].item()\n    feature_9   = test_df['feature_9'].item()\n    \n    # selling\n    if feature_0 < 0:\n        sample_prediction_df.action = 1 if (feature_117 > 0.2) and (feature_43 > 0) else trader.trade()\n        \n    # buying (...but only after a nice lunch)\n    else:\n        sample_prediction_df.action = 1 if (feature_64  > 0.7) and (feature_8 > 0.1) and (feature_9 > 0.2) else trader.trade()\n        \n    env.predict(sample_prediction_df)","8210e4b8":"**Note:** `0.7` is the lower limit of the lunchtime discontinuity in `feature_64`.","6a56c282":"#### This little contribution is inspired by the following two notebooks:\n* [Rule 3443](https:\/\/www.kaggle.com\/fbykov\/rule-3443) by [Filipp Bykov](https:\/\/www.kaggle.com\/fbykov)\n* [[No GPU time] Sell at 10 a.m, play golf.](https:\/\/www.kaggle.com\/snippsy\/no-gpu-time-sell-at-10-a-m-play-golf\/) by [Kire](https:\/\/www.kaggle.com\/snippsy)"}}