{"cell_type":{"ce471bcb":"code","f035066a":"code","9cca4d6c":"code","832451df":"code","7b7d4c54":"code","eafb7751":"code","5c73b593":"code","52423dd6":"code","813ef871":"code","fae2d4ce":"code","fb5aa8b6":"code","b4ad0fc3":"code","6cb03f39":"code","75f64ea4":"code","2d82eac4":"code","bec20f00":"code","9c3ce096":"code","68c6294a":"code","57ba44f6":"code","cb04f7d9":"code","1abe08b5":"code","28bd230b":"code","14653246":"code","0f0fc2b9":"code","f0bdf01c":"code","b4dde30c":"code","1680d5fc":"code","7cde9ddc":"code","c00f7f7d":"code","fcc5e872":"code","66a6e858":"code","8c0b03c7":"code","0399688e":"code","df14b622":"markdown"},"source":{"ce471bcb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import AdaBoostRegressor\n","f035066a":"! pip install xgboost\n! pip install lightgbm\n! pip install tensorflow","9cca4d6c":"df = pd.read_csv('..\/input\/beyond-analysis\/train.csv')","832451df":"le = LabelEncoder()\ncate = ['CATEGORY_1', 'CATEGORY_2']\ndf[cate]= df[cate].apply(le.fit_transform)","7b7d4c54":"df1 = df.groupby('UNIQUE_IDENTIFIER').mean().reset_index()","eafb7751":"df1.shape","5c73b593":"\ndf1.drop(['PRACTICE_ENTRY_NUMBER', 'PRACTICE_ENTRY', 'ENTRY_NUMBER','WINNINGS_2', 'ENTRY', 'UNIQUE_IDENTIFIER', 'DEPOSIT_2'], inplace = True, axis= 1)","52423dd6":"df1.shape","813ef871":"X = df1.drop(['Y1', 'Y2'], axis=1)\ny = df1[['Y1', 'Y2']]","fae2d4ce":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, train_size = 0.9)","fb5aa8b6":"from xgboost import XGBRegressor\nimport lightgbm as lgb\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","b4ad0fc3":"model = Sequential()","6cb03f39":"model.add(Dense(128, input_dim=16, activation='relu'))\nmodel.add(Dense(64,input_dim=128,  activation='relu'))\nmodel.add(Dense(16,input_dim=64, activation='relu'))\nmodel.add(Dense(2,input_dim=16,activation='relu'))","75f64ea4":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=[tf.keras.metrics.RootMeanSquaredError()])","2d82eac4":"\nmodel.summary()","bec20f00":"ba = model.fit(X_train, y_train, epochs= 100 )","9c3ce096":"y_predict3 = model.predict(X_test)","68c6294a":"model2 = lgb.LGBMRegressor()\nmodel1 = XGBRegressor()\n","57ba44f6":"clf1 = MultiOutputRegressor(XGBRegressor(random_state = 0)).fit(X_train, y_train)\nclf2 = MultiOutputRegressor(lgb.LGBMRegressor(random_state = 0)).fit(X_train, y_train)\n\n","cb04f7d9":"y_predict1 = clf1.predict(X_test)\ny_predict2 = clf2.predict(X_test)\ny_predict3 = model.predict(X_test)\nfinal_predict = (y_predict1+y_predict2+y_predict3)\/3","1abe08b5":"score =  mean_squared_error(y_test, final_predict, squared=False)\nscore","28bd230b":"tdf = pd.read_csv('..\/input\/beyond-analysis\/test.csv')","14653246":"tdf.shape","0f0fc2b9":"le = LabelEncoder()\ncate = ['CATEGORY_1', 'CATEGORY_2']\ntdf[cate]= df[cate].apply(le.fit_transform)","f0bdf01c":"tdf1 = tdf.groupby('UNIQUE_IDENTIFIER').mean().reset_index()","b4dde30c":"tdf2 = tdf1.copy()","1680d5fc":"tdf1.shape","7cde9ddc":"tdf1.drop(['PRACTICE_ENTRY_NUMBER', 'PRACTICE_ENTRY', 'ENTRY_NUMBER','WINNINGS_2', 'ENTRY', 'UNIQUE_IDENTIFIER', 'DEPOSIT_2'], inplace = True, axis= 1)","c00f7f7d":"y_predict1 = clf1.predict(tdf1)\ny_predict2 = clf2.predict(tdf1)\ny_predict3 = model.predict(tdf1)\n\nfinal_predict = (y_predict1+y_predict2+y_predict3)\/3","fcc5e872":"result = pd.DataFrame(final_predict, columns = ['Y1', 'Y2'])\nresult.head()","66a6e858":"result['UNIQUE_IDENTIFIER'] = tdf2['UNIQUE_IDENTIFIER']\nresult","8c0b03c7":"result = result[['UNIQUE_IDENTIFIER', 'Y1', 'Y2']]","0399688e":"result.to_csv('prediction9.csv', index = False)","df14b622":"### Loading test data"}}