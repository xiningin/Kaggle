{"cell_type":{"e6b38479":"code","0a8c543b":"code","a51207fa":"code","acbfca9c":"code","6e486629":"code","b3209f84":"code","43ba161a":"code","b6a8776b":"code","f9acc640":"code","5f31e6da":"code","b4877b33":"code","90660609":"code","bd4dd513":"code","8bd32339":"code","cb8e2a67":"code","952d99fb":"code","00fda0b3":"code","d0d6167b":"code","34e58ac8":"code","1c88e274":"code","cca511b5":"code","534aafe3":"code","e8562def":"code","3dbb6935":"code","5a90cc66":"code","cfba21de":"code","cbe315e3":"code","c9022cbb":"code","af075b29":"code","f7a0638e":"code","2c81c9e8":"code","9fdbf27d":"code","8fd61657":"code","2570be11":"code","331d7066":"code","9e11a885":"code","d1e738da":"code","7983f680":"code","ee12fbb4":"code","6bee6d23":"code","f81bf548":"code","931e4ae9":"code","26bcc50e":"code","fd908f7e":"code","0da6851d":"code","0956fbe7":"code","af5b1c03":"code","dc25fccb":"code","6c2ef69d":"code","53e94437":"code","ad04a185":"code","f796437c":"code","9c0208d2":"code","48239b95":"code","f32e1e4c":"code","1a02db06":"code","ae997c4a":"code","9e585a01":"code","2f12792b":"code","3dace6d6":"code","c513fdc6":"code","834122c8":"code","e8b0288f":"code","a5f224f4":"code","59b80000":"code","173cde1b":"code","4d8184a2":"code","fdc83070":"code","cbc7ed39":"code","e0b1053f":"code","2662ffa2":"code","3d7e75b9":"code","9027d75e":"code","e9d031a3":"code","5b0bd04e":"code","5a514242":"code","6ac72020":"code","fa969faa":"code","08957bce":"code","2eba05e3":"code","87fefb45":"code","90eceb49":"code","26a9739e":"markdown","e7bed1eb":"markdown","62ef08c3":"markdown","abbf4ced":"markdown","08a6c016":"markdown","2f3c27de":"markdown","9b76a681":"markdown","2ffec91a":"markdown","f04d24a0":"markdown","93197b18":"markdown","f6da69b5":"markdown","8a556e98":"markdown","9def33f4":"markdown","84973c22":"markdown","b26e84a9":"markdown","c3f39b23":"markdown","55664aca":"markdown","9e09d0b2":"markdown","e573b1b6":"markdown","98e392ae":"markdown","56c17b41":"markdown","53aab29b":"markdown","8f1bc893":"markdown","369392de":"markdown","861ec75d":"markdown","1e89cede":"markdown","b1c9e6c8":"markdown"},"source":{"e6b38479":"#Import Libraries\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0a8c543b":"fifa = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\nfifa.head()","a51207fa":"fifa.shape","acbfca9c":"fifa.info()","6e486629":"# dropping ALL duplicte values \nfifa.drop_duplicates(subset =\"Name\",  keep = False, inplace = True)","b3209f84":"fifa.shape","43ba161a":"fifa.drop(['ID', 'Unnamed: 0', 'Photo','Flag','Club Logo', 'Jersey Number', 'Loaned From', 'Real Face', \n           'Release Clause', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM',\n          'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'], axis=1,inplace=True)","b6a8776b":"def value_to_int(fifa_value):\n    try:\n        value = int(float(fifa_value[1:-1]))\n        suffix = fifa_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\nfifa['Value'] = fifa['Value'].apply(value_to_int)\nfifa['Wage'] = fifa['Wage'].apply(value_to_int)","f9acc640":"fifa['Height'].unique()","5f31e6da":"def replace_height(height):\n    try: \n        return height.replace(\"'\", \".\")\n    except AttributeError:\n        # first we return zero value to calculate mean height.\n        #return 0\n        # to fill missing values after calculate mean height we return 5.8 in inch as a value return\n        return 5.8\n\nfifa['Height'] = fifa['Height'].map(replace_height)","b4877b33":"def feet_to_cm(height_feet):\n    height_cm=round(float(height_feet)\/int(1)*int(12)*float(2.54))\n    return height_cm\nfifa['Height'] = fifa['Height'].apply(feet_to_cm) ","90660609":"fifa['Height'].unique()","bd4dd513":"def replace_weight(weight):\n    try: \n        return weight.replace('lbs', '')\n    except AttributeError:\n        # first we return zero value to calculate mean weight in Kg.\n        #return 0\n        # to fill missing values after calculate mean weight we return 165 in lbs as a value return\n        return 165\nfifa['Weight'] = fifa['Weight'].apply(replace_weight)","8bd32339":"def lbs_to_kg(weight_lbs):\n    weight_kg=round(int(weight_lbs)\/int(1)*float(0.453592))\n    return weight_kg\nfifa['Weight'] = fifa['Weight'].apply(lbs_to_kg)","cb8e2a67":"def year_joined(joined_date):\n    try:\n        return joined_date.replace(joined_date, joined_date[-4:])\n    except AttributeError:\n        return 2018\n\nfifa['Joined'] = fifa['Joined'].apply(year_joined)","952d99fb":"def year_joined(joined_date):\n    try:\n        return joined_date.replace(joined_date, joined_date[-4:])\n    except AttributeError:\n        return 2020\n\nfifa['Contract Valid Until'] = fifa['Contract Valid Until'].apply(year_joined)","00fda0b3":"fifa['Club'].fillna('No Club', inplace = True)\nfifa['Preferred Foot'].fillna('Right', inplace = True)\nfifa['International Reputation'].fillna(fifa['International Reputation'].mean(), inplace= True)\nfifa['Weak Foot'].fillna(fifa['Weak Foot'].mean(), inplace = True)\nfifa['Skill Moves'].fillna(fifa['Skill Moves'].mean(), inplace = True)\nfifa['Work Rate'].fillna('Medium\/ Medium', inplace = True)\nfifa['Body Type'].fillna('Normal', inplace = True)\nfifa['Position'].fillna('ST', inplace = True)\nfifa['Crossing'].fillna(fifa['Crossing'].mean(), inplace = True)\nfifa['Finishing'].fillna(fifa['Finishing'].mean(), inplace = True)\nfifa['HeadingAccuracy'].fillna(fifa['HeadingAccuracy'].mean(), inplace = True)\nfifa['ShortPassing'].fillna(fifa['ShortPassing'].mean(), inplace = True)\nfifa['Volleys'].fillna(fifa['Volleys'].mean(), inplace = True)\nfifa['Dribbling'].fillna(fifa['Dribbling'].mean(), inplace = True)\nfifa['Curve'].fillna(fifa['Curve'].mean(), inplace = True)\nfifa['FKAccuracy'].fillna(fifa['FKAccuracy'].mean(), inplace = True)\nfifa['LongPassing'].fillna(fifa['LongPassing'].mean(), inplace = True)\nfifa['BallControl'].fillna(fifa['BallControl'].mean(), inplace = True)\nfifa['Acceleration'].fillna(fifa['Acceleration'].mean(), inplace = True)\nfifa['SprintSpeed'].fillna(fifa['SprintSpeed'].mean(), inplace = True)\nfifa['Agility'].fillna(fifa['Agility'].mean(), inplace = True)\nfifa['Reactions'].fillna(fifa['Reactions'].mean(), inplace = True)\nfifa['Balance'].fillna(fifa['Balance'].mean(), inplace = True)\nfifa['ShotPower'].fillna(fifa['ShotPower'].mean(), inplace = True)\nfifa['Jumping'].fillna(fifa['Jumping'].mean(), inplace = True)\nfifa['Stamina'].fillna(fifa['Stamina'].mean(), inplace = True)\nfifa['Strength'].fillna(fifa['Strength'].mean(), inplace = True)\nfifa['LongShots'].fillna(fifa['LongShots'].mean(), inplace = True)\nfifa['Aggression'].fillna(fifa['Aggression'].mean(), inplace = True)\nfifa['Interceptions'].fillna(fifa['Interceptions'].mean(), inplace = True)\nfifa['Positioning'].fillna(fifa['Positioning'].mean(), inplace = True)\nfifa['Vision'].fillna(fifa['Vision'].mean(), inplace = True)\nfifa['Penalties'].fillna(fifa['Penalties'].mean(), inplace = True)\nfifa['Composure'].fillna(fifa['Composure'].mean(), inplace = True)\nfifa['Marking'].fillna(fifa['Marking'].mean(), inplace = True)\nfifa['StandingTackle'].fillna(fifa['StandingTackle'].mean(), inplace = True)\nfifa['SlidingTackle'].fillna(fifa['SlidingTackle'].mean(), inplace = True)\nfifa['GKDiving'].fillna(fifa['GKDiving'].mean(), inplace = True)\nfifa['GKHandling'].fillna(fifa['GKHandling'].mean(), inplace = True)\nfifa['GKKicking'].fillna(fifa['GKKicking'].mean(), inplace = True)\nfifa['GKPositioning'].fillna(fifa['GKPositioning'].mean(), inplace = True)\nfifa['GKReflexes'].fillna(fifa['GKReflexes'].mean(), inplace = True)","d0d6167b":"fifa['International Reputation']= fifa['International Reputation'].astype('int64')\nfifa['Weak Foot']=fifa['Weak Foot'].astype('int64')\nfifa['Skill Moves']=fifa['Skill Moves'].astype('int64')\nfifa['Crossing']=fifa['Crossing'].astype('int64')\nfifa['Finishing']=fifa['Finishing'].astype('int64')\nfifa['HeadingAccuracy']=fifa['HeadingAccuracy'].astype('int64')\nfifa['ShortPassing']=fifa['ShortPassing'].astype('int64')\nfifa['Volleys']=fifa['Volleys'].astype('int64')\nfifa['Dribbling']=fifa['Dribbling'].astype('int64')\nfifa['Curve']=fifa['Curve'].astype('int64')\nfifa['FKAccuracy']=fifa['FKAccuracy'].astype('int64')\nfifa['LongPassing']=fifa['LongPassing'].astype('int64')\nfifa['BallControl']=fifa['BallControl'].astype('int64')\nfifa['Acceleration']=fifa['Acceleration'].astype('int64')\nfifa['SprintSpeed']=fifa['SprintSpeed'].astype('int64')\nfifa['Agility']=fifa['Agility'].astype('int64')\nfifa['Reactions']=fifa['Reactions'].astype('int64')\nfifa['Balance']=fifa['Balance'].astype('int64')\nfifa['ShotPower']=fifa['ShotPower'].astype('int64')\nfifa['Jumping']=fifa['Jumping'].astype('int64')\nfifa['Stamina']=fifa['Stamina'].astype('int64')\nfifa['Strength']=fifa['Strength'].astype('int64')\nfifa['LongShots']=fifa['LongShots'].astype('int64')\nfifa['Aggression']=fifa['Aggression'].astype('int64')\nfifa['Interceptions']=fifa['Interceptions'].astype('int64')\nfifa['Positioning']=fifa['Positioning'].astype('int64')\nfifa['Vision']=fifa['Vision'].astype('int64')\nfifa['Penalties']=fifa['Penalties'].astype('int64')\nfifa['Composure']=fifa['Composure'].astype('int64')\nfifa['Marking']=fifa['Marking'].astype('int64')\nfifa['StandingTackle']=fifa['StandingTackle'].astype('int64')\nfifa['SlidingTackle']=fifa['SlidingTackle'].astype('int64')\nfifa['GKDiving']=fifa['GKDiving'].astype('int64')\nfifa['GKHandling']=fifa['GKHandling'].astype('int64')\nfifa['GKKicking']=fifa['GKKicking'].astype('int64')\nfifa['GKPositioning']=fifa['GKPositioning'].astype('int64')\nfifa['GKReflexes']=fifa['GKReflexes'].astype('int64')","34e58ac8":"order = fifa['Nationality'].value_counts(ascending=False).head(50).index\nplt.figure(figsize=(14,16))\n\nax = sns.countplot(y=\"Nationality\", data=fifa, order=order, palette='Paired') \nax.set_xlabel('Count',fontsize=20)\nax.set_ylabel('Nationality', fontsize=20)\nax.set_title('Distribution of Nationality',fontsize=20, weight='bold')\n\n\ntotal = len(fifa['Nationality'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+3\n        y=p.get_y()+height-0.1\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","1c88e274":"plt.figure(figsize=(18,9))\nax = sns.countplot(x=\"Age\", data=fifa)\nax.set_xlabel('Age',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Age',fontsize=20, weight='bold')\n\ntotal = len(fifa['Age'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.8\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","cca511b5":"plt.figure(figsize=(18,9))\nax = sns.boxplot(x=\"Age\", y=\"Overall\", data=fifa)\nax.set_xlabel('Age',fontsize=16)\nax.set_ylabel('Overall', fontsize=16)\nax.set_title('Player Age and Overall',fontsize=20, weight='bold')       \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","534aafe3":"plt.figure(figsize=(18,9))\nax = sns.boxplot(x=\"Age\", y=\"Potential\", data=fifa)\nax.set_xlabel('Age',fontsize=16)\nax.set_ylabel('Potential', fontsize=16)\nax.set_title('Player Age and Potential',fontsize=20, weight='bold')       \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","e8562def":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=\"Position\", data=fifa)\nax.set_xlabel('Position',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Position',fontsize=20, weight='bold')\n\ntotal = len(fifa['Position'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.8\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","3dbb6935":"plt.hist('Overall', data=fifa, color='blue') \nplt.style.use('ggplot')\nplt.title(\"Distribution of Overall\") \nplt.xlabel(\"Overall\")  \nplt.ylabel(\"Count\") \nplt.show()","5a90cc66":"plt.hist('Potential', data=fifa, color='pink') \nplt.style.use('ggplot')\nplt.title(\"Distribution of Potential\")  \nplt.xlabel(\"Potential\")  \nplt.ylabel(\"Count\") \nplt.show()","cfba21de":"plt.figure(figsize=(15,5))\nax = sns.countplot(x=\"Work Rate\", data=fifa)\nax.set_xlabel('Work Rate',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Work Rate',fontsize=20, weight='bold')\n\ntotal = len(fifa['Work Rate'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","cbe315e3":"plt.figure(figsize=(5,5))\nax = sns.countplot(x=\"Preferred Foot\", data=fifa)\nax.set_xlabel('Preferred Foot',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Prefferd Foot',fontsize=20, weight='bold')\n\ntotal = len(fifa['Preferred Foot'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","c9022cbb":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=\"Body Type\", data=fifa)\nax.set_xlabel('Body Type',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Body Type',fontsize=20, weight='bold')\n\ntotal = len(fifa['Body Type'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","af075b29":"order = fifa['Weight'].value_counts(ascending=False).index\nplt.figure(figsize=(14,16))\n\nax = sns.countplot(y=\"Weight\", data=fifa, order=order, palette='Paired') \nax.set_xlabel('Count',fontsize=20)\nax.set_ylabel('Weight', fontsize=20)\nax.set_title('Distribution of Weight',fontsize=20, weight='bold')\n\n\ntotal = len(fifa['Weight'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+3\n        y=p.get_y()+height-0.1\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","f7a0638e":"order = fifa['Height'].value_counts(ascending=False).index\nplt.figure(figsize=(14,7))\n\nax = sns.countplot(y=\"Height\", data=fifa, order=order, palette='Paired') \nax.set_xlabel('Count',fontsize=20)\nax.set_ylabel('Height', fontsize=20)\nax.set_title('Distribution of Height',fontsize=20, weight='bold')\n\n\ntotal = len(fifa['Height'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_width()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width+3\n        y=p.get_y()+height-0.1\n        ax.annotate(percentage,(x,y))\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","2c81c9e8":"plt.figure(figsize = (9, 5)) \nfifa['Special'].plot(kind =\"hist\")","9fdbf27d":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=\"International Reputation\", data=fifa)\nax.set_xlabel('International Reputation',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of International Reputation',fontsize=20, weight='bold')\n\ntotal = len(fifa['International Reputation'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","8fd61657":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=\"Weak Foot\", data=fifa)\nax.set_xlabel('Weak Foot',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Weak Foot',fontsize=20, weight='bold')\n\ntotal = len(fifa['Weak Foot'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","2570be11":"plt.figure(figsize=(20,5))\nax = sns.countplot(x=\"Skill Moves\", data=fifa)\nax.set_xlabel('Skill Moves',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Skill Moves',fontsize=20, weight='bold')\n\ntotal = len(fifa['Skill Moves'])\nfor p in ax.patches:\n        percentage ='{:.2f}%'.format(100 * p.get_height()\/total)\n        width, height =p.get_width(),p.get_height()\n        x=p.get_x()+width-0.6\n        y=p.get_y()+height\n        ax.annotate(percentage,(x,y))\n        \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","331d7066":"plt.figure(figsize=(18,9))\nax = sns.boxenplot(x=\"International Reputation\", y=\"Overall\", scale=\"linear\", data=fifa)\nax.set_xlabel('International Reputation',fontsize=16)\nax.set_ylabel('Overall', fontsize=16)\nax.set_title('Player International Reputation and Overall',fontsize=20, weight='bold')       \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","9e11a885":"plt.figure(figsize=(18,9))\nax = sns.boxenplot(x=\"International Reputation\", y=\"Potential\", scale=\"linear\", data=fifa)\nax.set_xlabel('International Reputation',fontsize=16)\nax.set_ylabel('Overall', fontsize=16)\nax.set_title('Player International Reputation and Potential',fontsize=20, weight='bold')       \nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","d1e738da":"fifa.groupby('Club')['Overall'].mean().sort_values(ascending=False).head(10).plot(\n    kind='bar', figsize=(10,5), color='chocolate')\nplt.xlabel('Club', fontsize=18)\nplt.ylabel('Overall', fontsize=18)\nplt.title('Top 10 Clubs with the highest Overall', fontsize=18)","7983f680":"fifa.groupby('Club')['Potential'].mean().sort_values(ascending=False).head(10).plot(\n    kind='bar', figsize=(10,5), color='sandybrown')\nplt.xlabel('Club', fontsize=18)\nplt.ylabel('Potential', fontsize=18)\nplt.title('Top 10 Clubs with the highest Potential', fontsize=18)","ee12fbb4":"fifa.groupby('Club')['Value'].sum().sort_values(ascending=False).head(10).plot(\n    kind='bar', figsize=(10,5), color='mediumturquoise')\nplt.xlabel('Club', fontsize=18)\nplt.ylabel('Value', fontsize=18)\nplt.title('Top 10 Clubs with the highest total Value', fontsize=18)","6bee6d23":"fifa.groupby('Club')['Wage'].mean().sort_values(ascending=False).head(10).plot(\n    kind='bar', figsize=(10,5), color='orangered')\nplt.xlabel('Club', fontsize=18)\nplt.ylabel('Wage', fontsize=18)\nplt.title('Top 10 Clubs with the highest average Wage', fontsize=18)","f81bf548":"fifa.groupby('Club')['International Reputation'].mean().sort_values(ascending=False).head(10).plot(\n    kind='bar', figsize=(10,5), color='chocolate')\nplt.xlabel('Club', fontsize=18)\nplt.ylabel('International Reputation', fontsize=18)\nplt.title('Top 10 Club with the highest average International Reputation', fontsize=18)","931e4ae9":"fifa.loc[fifa.groupby(['Position', 'Preferred Foot'])['Value'].idxmax()][['Name', 'Age', 'Position', 'Value', 'Wage',\n                                                                'Overall', 'Club', 'Nationality', 'Preferred Foot']]","26bcc50e":"fifa.loc[fifa.groupby(['Position', 'Preferred Foot'])['Overall'].idxmax()][['Name', 'Age', 'Position', 'Value', 'Wage'\n                                                            , 'Overall', 'Club', 'Nationality', 'Preferred Foot']]","fd908f7e":"fifa.loc[fifa.groupby(['Position', 'Preferred Foot'])['Special'].idxmax()][['Name', 'Age', 'Position', 'Value', 'Wage'\n                                                     , 'Overall', 'Club', 'Nationality', 'Special', 'Preferred Foot']]","0da6851d":"corrmat = fifa.corr()\n  \nf, ax = plt.subplots(figsize =(26, 16)) \nsns.heatmap(corrmat, ax = ax,  linewidths = 0.1, annot=True)","0956fbe7":"corrmat = fifa.corr()   \ncg = sns.clustermap(corrmat, linewidths = 0.1, annot=True, figsize=(28, 18)) \nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(), rotation = 0) \n  \ncg","af5b1c03":"k = 19\n  \ncols = corrmat.nlargest(k, 'Special')['Special'].index \n  \ncm = np.corrcoef(fifa[cols].values.T) \nf, ax = plt.subplots(figsize =(18, 10)) \n  \nsns.heatmap(cm, ax = ax, \n            linewidths = 0.1,annot=True, yticklabels = cols.values,  \n                              xticklabels = cols.values)","dc25fccb":"import statsmodels.api as sm\nfifa['intercept']=1\nlm_mlr=sm.OLS(fifa['Special'], fifa[['intercept', 'BallControl', 'ShortPassing', 'Dribbling', 'Crossing', 'Curve',\n                                            'LongPassing', 'LongShots', 'ShotPower', 'Positioning', 'FKAccuracy', 'Stamina',\n                                            'Volleys', 'Skill Moves', 'Vision', 'Composure', 'Penalties', 'Finishing', \n                                             'Agility']])\nresults_mlr=lm_mlr.fit()\nresults_mlr.summary()","6c2ef69d":"from sklearn.model_selection import train_test_split\nX = fifa[['Potential']]\ny = fifa[['Overall']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)","53e94437":"# Import Libraries\nfrom sklearn.linear_model import LinearRegression\n\n#Applying Linear Regression Model \n\nLinearRegressionModel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nLinearRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\n\n#Calculating Prediction\ny_LRM = LinearRegressionModel.predict(X_test)","ad04a185":"plt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_LRM, color='blue', linewidth=3)\nplt.xlabel(\"Potential\")\nplt.ylabel(\"Overall\")\nplt.show()","f796437c":"from sklearn.metrics import mean_squared_error, r2_score #common metris to evaluate regression models\n# The mean squared error\nprint(\"Mean squared error is : %.2f\" % mean_squared_error(y_test, y_LRM))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score is : %.2f' % r2_score(y_test, y_LRM))","9c0208d2":"plt.hist('Height', data=fifa, color='blue') \nplt.style.use('ggplot')\nplt.title(\"Distribution of Height\")  \nplt.xlabel(\"Height\")  \nplt.ylabel(\"Count\") \nplt.show()","48239b95":"plt.hist('Weight', data=fifa, color='pink') \nplt.style.use('ggplot')\nplt.title(\"Distribution of Weight\") #Assign title \nplt.xlabel(\"Weight\") #Assign x label \nplt.ylabel(\"Count\") #Assign y label\nplt.show()","f32e1e4c":"X = fifa[['Height']]\ny = fifa[['Weight']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)","1a02db06":"#Applying Linear Regression Model \n\nLinearRegressionModel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nLinearRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\n\n#Calculating Prediction\ny_LRM = LinearRegressionModel.predict(X_test)","ae997c4a":"plt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_LRM, color='blue', linewidth=3)\nplt.xlabel(\"Height\")\nplt.ylabel(\"Weight\")\nplt.show()","9e585a01":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_LRM))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_LRM))","2f12792b":"from sklearn.model_selection import train_test_split\nX = fifa[['Value']]\ny = fifa[['Overall']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)","3dace6d6":"#Applying Linear Regression Model \n\nLinearRegressionModel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nLinearRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\n\n#Calculating Prediction\ny_LRM = LinearRegressionModel.predict(X_test)","c513fdc6":"plt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_LRM, color='blue', linewidth=3)\nplt.xlabel(\"Value\")\nplt.ylabel(\"Overall\")\nplt.show()","834122c8":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_LRM))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_LRM))","e8b0288f":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import linear_model\n\n# Create linear regression object\npoly = PolynomialFeatures(degree=2, include_bias=True, interaction_only=False)\n\nX_train = poly.fit_transform(X_train)\nX_test = poly.fit_transform(X_test)\n\nmodel = linear_model.LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nmodel.fit(X_train, y_train)\n\nprint('Linear Regression Train Score is : ', model.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , model.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\ny_poly_LRM = model.predict(X_test)","a5f224f4":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_poly_LRM))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_poly_LRM))","59b80000":"#Import Libraries\nfrom sklearn.svm import SVR\n\nSVRModel = SVR(C = 1.0 ,epsilon=0.1,kernel = 'rbf', gamma='auto') # it also can be : linear, poly, rbf, sigmoid, precomputed\nSVRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('SVRModel Train Score is : ' , SVRModel.score(X_train, y_train))\nprint('SVRModel Test Score is : ' , SVRModel.score(X_test, y_test))\n\ny_SVR = SVRModel.predict(X_test)","173cde1b":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_SVR))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_SVR))","4d8184a2":"#Import Libraries\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n#Applying Gradient Boosting Regressor Model \n\nGBRModel = GradientBoostingRegressor(n_estimators=1000,max_depth=8,learning_rate = 0.1 ,random_state=99)\nGBRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GBRModel Train Score is : ' , GBRModel.score(X_train, y_train))\nprint('GBRModel Test Score is : ' , GBRModel.score(X_test, y_test))\n\n#Calculating Prediction\ny_GBR = GBRModel.predict(X_test)","fdc83070":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_GBR))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_GBR))","cbc7ed39":"X=fifa[['BallControl', 'ShortPassing', 'Dribbling', 'Crossing', 'Curve',\n                                            'LongPassing', 'LongShots', 'ShotPower', 'Positioning', 'FKAccuracy', 'Stamina',\n                                            'Volleys', 'Skill Moves', 'Vision', 'Composure', 'Penalties', 'Finishing', \n                                             'Agility']]\ny = fifa[['Special']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=44, shuffle =True)","e0b1053f":"#Applying Linear Regression Model \n\nLinearRegressionModel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nLinearRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\n\n#Calculating Prediction\ny_LRM = LinearRegressionModel.predict(X_test)","2662ffa2":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_LRM))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_LRM))","3d7e75b9":"# Create linear regression object\npoly = PolynomialFeatures(degree=2, include_bias=True, interaction_only=False)\n\nX_train = poly.fit_transform(X_train, y_train)\nX_test = poly.fit_transform(X_test, y_test)\n\nmodel = linear_model.LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nmodel.fit(X_train, y_train)\n\nprint('Linear Regression Train Score is : ', model.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , model.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\ny_pred = model.predict(X_test)","9027d75e":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_pred))","e9d031a3":"#Applying Gradient Boosting Regressor Model\nGBRModel = GradientBoostingRegressor(n_estimators=1000,max_depth=8,learning_rate = 0.1 ,random_state=99)\nGBRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GBRModel Train Score is : ' , GBRModel.score(X_train, y_train))\nprint('GBRModel Test Score is : ' , GBRModel.score(X_test, y_test))\n\n#Calculating Prediction\ny_pred = GBRModel.predict(X_test)","5b0bd04e":"# The mean squared error\nprint(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n \n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % r2_score(y_test, y_pred))","5a514242":"X=fifa[['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', \n        'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n        'Jumping', 'Stamina','Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', \n        'Penalties', 'Composure', 'Marking','StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling', 'GKKicking', \n        'GKPositioning', 'GKReflexes']]\ny=fifa[['Position']]","6ac72020":"from sklearn.ensemble import RandomForestClassifier\nmy_model = RandomForestClassifier(n_estimators=100, random_state=0).fit(X, y)","fa969faa":"from eli5.sklearn import PermutationImportance\nimport eli5\nperm = PermutationImportance(my_model,n_iter=2).fit(X, y)\neli5.show_weights(perm, feature_names = X.columns.tolist())","08957bce":"from lightgbm import LGBMClassifier\nlgbc=LGBMClassifier(n_estimators=500, learning_rate=0.05, num_leaves=32, colsample_bytree=0.2,\n            reg_alpha=3, reg_lambda=1, min_split_gain=0.01, min_child_weight=40)\nlgbc.fit(X,y)","2eba05e3":"from sklearn.metrics import accuracy_score\n#define a score function. In this case I use accuracy\ndef score(X, y):\n    y_pred = lgbc.predict(X)\n    return accuracy_score(y, y_pred)","87fefb45":"from eli5.permutation_importance import get_score_importances\n# This function takes only numpy arrays as inputs\nbase_score, score_decreases = get_score_importances(score, np.array(X), y)\nfeature_importances = np.mean(score_decreases, axis=0)","90eceb49":"feature_importance_dict = {}\nfor i, feature_name in enumerate(X.columns):\n    feature_importance_dict[feature_name]=feature_importances[i]\nprint(dict(sorted(feature_importance_dict.items(), key=lambda x: x[1], reverse=True)[:5]))","26a9739e":"### Which Players have maximum overall with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?","e7bed1eb":"### Which position has most number of Soccer Players collected in FIFA 19?","62ef08c3":"## 2. Removing Unused columns:","abbf4ced":"### Find out the top 10 clubs with highest average overall and average potential?","08a6c016":"## Introduction\n\nThis data set contains information about 18207 players collected from The FIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series, It consist of 89 columns such as Name, Age, Nationality, Overall, etc...\n\nLets load a FIFA 19 database csv file:","2f3c27de":"### Which Nation has most number of Soccer Players collected in FIFA 19?","9b76a681":"### Find out top 10 clubs with highest average Internation Reputation?","2ffec91a":"## 3. Columns assess:\n#### Value: remove \u20ac, M.\n#### Wage: remove \u20ac, K.\n#### Height: remove ' and change measure to cm.\n#### Weight: remove lbs and change measure to kg.\n#### Contract Valid Until: remove day and month date.","f04d24a0":"### How about overall, potential and  age distribution FIFA 19 Players?","93197b18":"### Find out the top 10 clubs with highest total player market value, and the highest average player wage?","f6da69b5":"## 1.Removing the duplicates in the rows:","8a556e98":"### Distributions of height & weight and find Best fit line, coefficient and intercept between height & weight and find mean squared error & variance score?","9def33f4":"## 4. Fill columns that have missing values.","84973c22":"# Data Cleaning","b26e84a9":"### The questions I will answer in this project:\n\n1- Which Nation has most number of Soccer Players collected in FIFA 19?\n2- How about the age distribution of the FIFA 19 Players?\n3- How about overall, potential and  age distribution FIFA 19 Players?\n4- Which position has most number of Soccer Players collected in FIFA 19?\n5- How about the (overall, potential, work rate, preffered foot, body type, weight, height, special, International Reputation, weak foot, skill moves) distributions of the FIFA 19 Players?\n6- How about the Player International Reputation and overall, potential distribution FIFA 19 Players?\n7- Find out the top 10 clubs with highest average overall and average potential?\n8- Find out the top 10 clubs with highest total player market value, and the highest average player wage?\n9- Find out top 10 clubs with highest average Internation Reputation?\n10- Which Players have maximum value with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?\n11- Which Players have maximum overall with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?\n12-  Which Players have maximum special with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?\n13- Correlation between all features? \n14- Find the strong Correlation between features, and using OLS Models?\n15- Find Best fit line, coefficient and intercept between overall & potential and find mean squared error & variance score?\n16- Distributions of height & weight and find Best fit line, coefficient and intercept between height & weight and find mean squared error & variance score?\n17- Find Best fit line, coefficient and intercept between value & overall and find mean squared error & variance score?\n18- Which Models have around or near to 1 variance score between value & overall?\n19- Using Q14,  Which Models have around or near to 1 variance score?\n20- Find out the important feature for players position?","c3f39b23":"### Find out the important feature for players position?","55664aca":"### Using Q14,  Which Models have around or near to 1 variance score?","9e09d0b2":"### Correlation between all features?","e573b1b6":"### Which Players have maximum value with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?","98e392ae":"### How about the (overall, potential, work rate, preffered foot, body type, weight, height, special, International Reputation, weak foot, skill moves) distributions of the FIFA 19 Players?","56c17b41":"### How about the Player International Reputation and overall, potential distribution FIFA 19 Players?","53aab29b":"### How about the age distribution of the FIFA 19 Players?","8f1bc893":"### Find Best fit line, coefficient and intercept between value & overall and find mean squared error & variance score?","369392de":"### Find the strong Correlation between features, and using OLS Models?","861ec75d":"### Find Best fit line, coefficient and intercept between overall & potential and find mean squared error & variance score?","1e89cede":"### Which Players have maximum special with group by position and preferred foot by each position, and give me the details about that with Name, Age, Value, Wage, Club, Nationality?","b1c9e6c8":"### Which Models have around or near to 1 variance score between value & overall?"}}