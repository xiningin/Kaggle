{"cell_type":{"3102b1a1":"code","ddb8c191":"code","c004e9ad":"code","2c34b72d":"code","010c7296":"code","b53ac6ea":"code","9c2e9a16":"code","3d3bc6b4":"code","cbaed3ff":"code","82d17f1e":"code","7b1f64d0":"code","54154bee":"markdown","0c314bbd":"markdown","8aa6a6a7":"markdown","969d315d":"markdown","6830391f":"markdown"},"source":{"3102b1a1":"import numpy as np\nimport cudf\nimport datatable as dt\n\nimport tensorflow as tf\nimport janestreet\n\nfrom tensorflow.keras.layers import Input, BatchNormalization, Dense, Dropout, Activation\nfrom tensorflow.keras.losses import binary_crossentropy, BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import AUC\nfrom tensorflow.keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.activations import swish\n\nfrom tqdm.notebook import tqdm","ddb8c191":"TRAIN_PATH = '..\/input\/jane-street-market-prediction\/train.csv'\nBATCH = 4096\nEPOCHS = 100","c004e9ad":"%%time\n\ndata = dt.fread(TRAIN_PATH)\ndata = data.sort('ts_id')\n\n# Converting to pandas DataFrame\ndf = data.to_pandas()\n\n# Remove rows where weight = 0 \ndf = df[df.weight != 0]\n\n# Fill NaN values both ways\ndf = df.fillna(method='ffill').fillna(method='bfill')\n\n# Create the target data\ndf['action'] = (df['resp'] > 0).astype(np.int32)","2c34b72d":"features = [ f'feature_{i}' for i in range(130)]","010c7296":"def create_model():\n    \n    model = tf.keras.Sequential([ \n        \n        Input(len(features)),\n        BatchNormalization(),\n        Dropout(0.1),\n        \n        Dense(128),\n        BatchNormalization(),\n        Activation(swish),\n        Dropout(0.1),\n        \n        Dense(64),\n        BatchNormalization(),\n        Activation(swish),\n        Dropout(0.1),\n\n        Dense(1,activation='sigmoid')\n    ])\n    \n    model.compile(loss=binary_crossentropy, optimizer=Adam(0.01), metrics=AUC(name = 'AUC'))\n    \n    return model","b53ac6ea":"train = df[df['date'] < 499]\nval = df[df['date'] == 499]\n\nX_tr = train[features].values\ny_tr = train['action'].values\n\nX_val = val[features].values\ny_val = val['action'].values\n","9c2e9a16":"model = create_model()\nmodel.fit(X_tr, y_tr,\n          validation_data=(X_val, y_val),\n          epochs=EPOCHS, \n          batch_size=BATCH,\n          verbose=1)","3d3bc6b4":"# From https:\/\/medium.com\/@micwurm\/using-tensorflow-lite-to-speed-up-predictions-a3954886eb98\n\nclass LiteModel:\n    \n    @classmethod\n    def from_file(cls, model_path):\n        return LiteModel(tf.lite.Interpreter(model_path=model_path))\n    \n    @classmethod\n    def from_keras_model(cls, kmodel):\n        converter = tf.lite.TFLiteConverter.from_keras_model(kmodel)\n        tflite_model = converter.convert()\n        return LiteModel(tf.lite.Interpreter(model_content=tflite_model))\n    \n    def __init__(self, interpreter):\n        self.interpreter = interpreter\n        self.interpreter.allocate_tensors()\n        input_det = self.interpreter.get_input_details()[0]\n        output_det = self.interpreter.get_output_details()[0]\n        self.input_index = input_det[\"index\"]\n        self.output_index = output_det[\"index\"]\n        self.input_shape = input_det[\"shape\"]\n        self.output_shape = output_det[\"shape\"]\n        self.input_dtype = input_det[\"dtype\"]\n        self.output_dtype = output_det[\"dtype\"]\n        \n    def predict(self, inp):\n        inp = inp.astype(self.input_dtype)\n        count = inp.shape[0]\n        out = np.zeros((count, self.output_shape[1]), dtype=self.output_dtype)\n        for i in range(count):\n            self.interpreter.set_tensor(self.input_index, inp[i:i+1])\n            self.interpreter.invoke()\n            out[i] = self.interpreter.get_tensor(self.output_index)[0]\n        return out\n    \n    def predict_single(self, inp):\n        \"\"\" Like predict(), but only for a single record. The input data can be a Python list. \"\"\"\n        inp = np.array([inp], dtype=self.input_dtype)\n        self.interpreter.set_tensor(self.input_index, inp)\n        self.interpreter.invoke()\n        out = self.interpreter.get_tensor(self.output_index)\n        return out[0]","cbaed3ff":"# Model conversion\ntflite_model = LiteModel.from_keras_model(model)","82d17f1e":"env = janestreet.make_env()\nenv_iter = env.iter_test()","7b1f64d0":"opt_th = 0.5\n\nfor (test_df, pred_df) in tqdm(env_iter):\n    if test_df['weight'].item() > 0:\n        test_df = test_df.fillna(method='ffill').fillna(method='bfill')\n        x_tt = test_df.loc[:, features].values\n        pred = tflite_model.predict(x_tt)\n        pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","54154bee":"## Converting the model\n\nLet's convert our model to be a **Tensorflow-lite model**\n\nI got the code from: [using-tensorflow-lite-to-speed-up-predictions](https:\/\/medium.com\/@micwurm\/using-tensorflow-lite-to-speed-up-predictions-a3954886eb98)","0c314bbd":"### Loading the data","8aa6a6a7":"### NN Model\n\nThis is a very simple NN model just for tests.","969d315d":"\n> This Notebook aims to share the idea of using Tensorflow-lite for inference. \n> The NN model and the way I'm splitting\/training the data is very naive and was done just for code completion.","6830391f":"### Splitting tha data\n\nFor test purpose I'll validate on last day. There are plenty of notebooks describing the proper way to split time series data."}}