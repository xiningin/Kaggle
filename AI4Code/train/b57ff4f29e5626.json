{"cell_type":{"552437c1":"code","88cfa54c":"code","08909d11":"code","3e49c0c0":"code","27f509db":"code","94f1d834":"code","220c0aea":"code","3d10b6c4":"code","68966614":"code","c8bc4c01":"code","5330d07d":"code","19523204":"code","72b75e34":"code","9d638b28":"code","dc57eacf":"code","f7a8dc7f":"code","246f02a0":"code","31b98532":"code","4a58dcf8":"code","6e1eff3c":"code","60587b65":"code","14354a99":"code","3a680bb0":"code","1bbe41d1":"markdown"},"source":{"552437c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","88cfa54c":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ndf_submit = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","08909d11":"df_train.describe()","3e49c0c0":"df_train.head()","27f509db":"#Converting the object type column into datetime type\ndf_train['Date'] = df_train.Date.apply(pd.to_datetime)\ndf_test['Date'] = df_test.Date.apply(pd.to_datetime)","94f1d834":"df_train.insert(1,'Month',df_train['Date'].dt.month)\n\ndf_train.insert(2,'Day',df_train['Date'].dt.day)","220c0aea":"df_test.insert(1,'Month',df_test['Date'].dt.month)\n\ndf_test.insert(2,'Day',df_test['Date'].dt.day)","3d10b6c4":"df_train['Province_State'].fillna(df_train['Country_Region'],inplace=True)\ndf_test['Province_State'].fillna(df_test['Country_Region'],inplace=True)","68966614":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndf_train.Country_Region = le.fit_transform(df_train.Country_Region)\ndf_train['Province_State'] = le.fit_transform(df_train['Province_State'])\n\ndf_test.Country_Region = le.fit_transform(df_test.Country_Region)\ndf_test['Province_State'] = le.fit_transform(df_test['Province_State'])","c8bc4c01":"#Avoiding duplicated data.\ndf_train = df_train.loc[:,~df_train.columns.duplicated()]\ndf_test = df_test.loc[:,~df_test.columns.duplicated()]\nprint (df_test.shape)","5330d07d":"# Dropping the object type columns\n\nobjList = df_train.select_dtypes(include = \"object\").columns\ndf_train.drop(objList, axis=1, inplace=True)\ndf_test.drop(objList, axis=1, inplace=True)\nprint (df_train.shape)","19523204":"df_train.drop('Date',axis=1,inplace=True)\ndf_test.drop('Date',axis=1,inplace=True)","72b75e34":"X = df_train.drop(['Id','ConfirmedCases', 'Fatalities'], axis=1)\ny = df_train[['ConfirmedCases', 'Fatalities']]","9d638b28":"from sklearn.model_selection import ShuffleSplit, cross_val_score,train_test_split\nfrom sklearn.metrics import make_scorer, r2_score, mean_squared_log_error\nskfold = ShuffleSplit(random_state=7)\nimport xgboost as xgb","dc57eacf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","f7a8dc7f":"clf_CC = xgb.XGBRegressor(n_estimators = 10000)\nclf_Fat = xgb.XGBRegressor(n_estimators = 9000)","246f02a0":"xgb_cc = cross_val_score(clf_CC, X_train, y_train['ConfirmedCases'], cv = skfold)\nxgb_fat = cross_val_score(clf_Fat, X_train, y_train['Fatalities'], cv = skfold)\n\nprint (xgb_cc.mean(), xgb_fat.mean())","31b98532":"X_test_CC = df_test.drop(['ForecastId'],axis=1)\nX_test_Fat = df_test.drop(['ForecastId'],axis=1)","4a58dcf8":"clf_CC.fit(X_train, y_train['ConfirmedCases'])\nY_pred_CC = clf_CC.predict(X_test_CC) \n\nclf_Fat.fit(X_train, y_train['Fatalities'])\nY_pred_Fat = clf_Fat.predict(X_test_Fat) ","6e1eff3c":"df_cc = pd.DataFrame(Y_pred_CC)\ndf_fat = pd.DataFrame(Y_pred_Fat)","60587b65":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Calling DataFrame constructor on list \ndf_results = pd.DataFrame(columns=['ForecastId','ConfirmedCases','Fatalities']) \ndf_results","14354a99":"df_results['ForecastId'] = df_test['ForecastId']\ndf_results['ConfirmedCases'] = df_cc.astype(int)\ndf_results['Fatalities'] = df_fat.astype(int)\n\ndf_results.head()","3a680bb0":"df_results.to_csv('submission.csv', index=False)","1bbe41d1":"**Covid-19 Week 4 **"}}