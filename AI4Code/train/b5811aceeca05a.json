{"cell_type":{"0f166019":"code","0650aeb8":"code","cc490c4d":"code","f5ec36ef":"code","068312ff":"code","037ad1ee":"code","a97480fc":"code","3aab9824":"code","6620c935":"code","8f53912a":"code","cea2a5e7":"code","07c5b9ed":"code","f862b638":"code","0ea27c26":"code","4d6e6775":"code","f521cfe2":"code","ec29fb85":"code","b525626c":"code","d023e490":"code","13898f3f":"code","63fdee6b":"code","88771dc0":"code","f9c2ef86":"code","fb53d2e1":"code","93e01c13":"code","823b93b6":"code","da99cfc9":"code","23496f23":"code","fd2a19f6":"code","b7fc7b8f":"code","f970cdc2":"code","2e3d5780":"code","b3103d61":"code","31bd2b00":"code","58216d67":"code","4fb77b3a":"code","eded437e":"code","79dd644f":"code","8493c14f":"code","f6e6620c":"code","1097dfd6":"code","bc76b992":"code","21ebfafc":"code","4047247f":"code","05560c4f":"code","76f62227":"code","f0f1d237":"code","2c621939":"code","a0302e7e":"code","5298191b":"code","342bbb4f":"code","34675a25":"code","eadb6d53":"code","6593e7a3":"code","103972a8":"code","1126679e":"code","13e2d4b9":"code","0fb0bf31":"code","cc7f624c":"code","9719d10d":"code","5376321b":"code","cb103272":"code","705f2f97":"code","f86de286":"code","eaf82f30":"code","b0c91827":"code","785a63a2":"code","50127abf":"code","2ce1f0bf":"code","cf675a20":"code","556a9b55":"code","a263f3cc":"code","20ec2914":"code","7df2f67b":"code","4c5fc404":"code","dfed74b7":"code","80694373":"code","25b5d794":"code","d767ec7a":"code","432a6bd0":"code","fae57784":"code","8722a46e":"code","46ea7a64":"code","a5057d8f":"code","dcae8cf8":"code","e14e245e":"code","79736e8c":"code","ff95220e":"code","a44826e4":"code","086c9e76":"code","78dc20e4":"code","858d7c2e":"code","cfebdaef":"code","995c77ca":"code","35cf7810":"code","1d9a7dca":"code","accd342d":"code","4c70bd87":"code","1a2bda61":"code","2779c906":"code","3ea0709c":"code","5f3c036e":"code","738a6657":"code","5666ca70":"code","43270048":"code","2c601e54":"code","c642cddd":"code","d75dde23":"code","5f040602":"code","b193bf0d":"code","dbc873e5":"code","130c8154":"code","d934cc6e":"code","9d6efa74":"code","4ae8eb5b":"code","415e4c03":"code","ed51b637":"code","36a8a8d4":"code","3e7e565c":"code","68f46c05":"code","4fc68336":"code","646c3fbd":"code","62604ab0":"code","4c709c83":"code","22aaaccd":"code","e246126d":"code","73d0d4bd":"code","6eed1c9a":"code","ef0828f7":"code","4a22a952":"code","ca9941c4":"code","916a4dd6":"code","b4fae547":"code","56bfda50":"code","070ccb8b":"code","a1f88ec4":"code","1aef2047":"code","0253e934":"code","dae5a657":"code","044e6834":"code","d883e3ec":"code","9261e71e":"code","47ff2b6a":"code","5e480a84":"code","954ff0eb":"code","42770e92":"code","1b34e855":"code","9ddff9ac":"code","0575585e":"code","1d2eea73":"code","c8c367e4":"code","f2db48bd":"code","7660d1d5":"code","436e4ea8":"code","3a7b969e":"code","bcb7ea9f":"code","94ece724":"code","078c4d35":"code","f1a9692b":"code","47daeeca":"code","f06b2da6":"code","c5a81a24":"code","bd66f3f7":"code","91b5049c":"code","f623f8d0":"code","ca357fec":"code","adda03b8":"code","a5ad4927":"code","c8312dfb":"code","813d59e4":"code","707c7582":"code","2073ec43":"code","d290ccc6":"code","0a85c69b":"code","c2c6602f":"code","1f189acc":"code","595c215d":"code","061d91c9":"code","4fb0ea48":"code","09b59f15":"code","6ca26fe6":"code","77093452":"code","7d12c740":"code","dc4a13fd":"code","37698a06":"code","5f98bdcf":"code","4eea8762":"code","a47c2839":"code","9b88ecf3":"code","c178c0d2":"code","dc1d517e":"code","c0a33ed0":"code","f75894c4":"code","46f65fea":"code","e0bc65a4":"code","49a42e87":"code","eeaedf1a":"code","a2356a3e":"code","50efc49e":"code","16a0f0a8":"code","56471ff0":"code","66f70f23":"code","8fb29447":"code","6d728fb1":"code","b4b7105a":"code","d8211f59":"code","fb1fa345":"code","3e191501":"code","96478099":"code","1dd45df3":"code","5e5018fb":"code","cdd1d409":"code","c3296f78":"code","5f3ca13a":"code","4c0f9174":"code","9c9d3a8c":"code","83b9c3d6":"code","b2e21739":"code","cb0ec9ea":"code","592b9dc4":"code","a3c2a17a":"code","d26d7c8c":"code","010955c0":"markdown","a8f577e3":"markdown","6bec88ef":"markdown","b7d1c2f7":"markdown","20d07952":"markdown","bf992345":"markdown","28234a8e":"markdown","d80fcfb4":"markdown","3085119e":"markdown","baee2b31":"markdown","961d9e06":"markdown","41a3cd7b":"markdown","aab6f0ee":"markdown","18d4870c":"markdown","a5267260":"markdown","9b43e2c4":"markdown","03415004":"markdown","5be7a394":"markdown","5ff1aeee":"markdown","3a63e816":"markdown","497ca55b":"markdown","5c9099bb":"markdown","acd84e7a":"markdown","f8ffa29e":"markdown","9539919b":"markdown","a6a3d122":"markdown","619a9d8b":"markdown","76e927f8":"markdown","b3a0258a":"markdown","265155ab":"markdown","dc488508":"markdown","98daae7e":"markdown","07325afe":"markdown","7f1aaa23":"markdown","b8edf73a":"markdown","2de644c4":"markdown","2d9cd6b0":"markdown","fc45977b":"markdown","43542a74":"markdown","7a86f310":"markdown","139487a1":"markdown","6fe3480e":"markdown","49c60385":"markdown","173ce830":"markdown","2a1834cb":"markdown","11377468":"markdown","adbc0227":"markdown","3db06df7":"markdown","c20b90c1":"markdown","930863ab":"markdown"},"source":{"0f166019":"from IPython.display import Markdown, display","0650aeb8":"def content(text):\n    \"\"\" This function allows you to output content \"\"\"\n    my_response = \"<div style= 'background-color:rgb(247, 247, 247); border:1px solid rgb(207,207,207); border-color:rgb(107,107,107); padding: 10px'> \\\n    <span style='color: black;  font-family: medium-content-serif-font, Georgia, Cambria, 'Times New Roman', Times, serif; \\\n    font-weight: 400; letter-spacing: -0.004em; line-height: 1.58; '>\"+ text + \"<\/span><\/div>\"\n    display(Markdown(my_response))","cc490c4d":"content(\n    \"This notebook explores the '2020 Kaggle Machine Learning & Data Science Survey' with a special focus \" +\n    \"on women and those who choose not to describe themself as man or woman. Notably, there is a difference \" +\n    \"between the words 'SEX' and 'GENDER'. While the former refers to biological attributes, the latter \" +\n    \"refers to socially constructed roles, behaviours, expressions and identities. \" + \"\\n\\n\" +\n    \"Through this notebook, I hope to introduce myself to the world of Data Visualization and \" +\n    \"Interpretation. Please consider giving an UPVOTE if you like it. Comment and let me know what you think!\"\n)","f5ec36ef":"# Import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data wrangling\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt \nfrom matplotlib.patches import ConnectionPatch\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style = \"whitegrid\")\nimport squarify\nimport folium\nimport itertools \nfrom matplotlib import cm\nfrom math import log10\nfrom sklearn.decomposition import PCA","068312ff":"data = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")","037ad1ee":"content(\n    \"How does gender influence the decisions the Data Science and Machine Learning community makes? \\\n    Let's find out! But first, let's have a look at the proportion of participants we are interested in.\"\n)","a97480fc":"gender = data.loc[1:, \"Q2\"].value_counts()\ncategories = list(gender.keys())\npalette = sns.color_palette(\"Set2\", len(categories)) \ncolors1 = {k:v for k,v in zip(categories, palette)}\ncolors2 = {k:v for k,v in zip(categories[:2] + [\"Others\"], palette[:2] + [(1, 0, 0)])}\ncolors3 = {k:v for k,v in zip(categories[2:], palette[2:])}","3aab9824":"gen1 = gender.to_frame()\ngen1.loc[\"others\"] =  gen1[2:].sum()\ngen1 = gen1.drop(categories[2:])\ngen1[\"Q2\"] = gen1[\"Q2\"]\/gen1[\"Q2\"].sum() * 100\n\ngen2 = gender.to_frame()\ngen2[\"Q2\"] = gen2[\"Q2\"]\/gen2[\"Q2\"].sum() * 100\ngen2 = gen2.drop(categories[:2])","6620c935":"# make figure and assign axis objects\nfig = plt.figure(figsize = (15, 7))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\nfig.subplots_adjust(wspace = 0)\n\n# pie chart parameters\nratios = gen1[\"Q2\"].values\nlabels = colors2.keys() \nexplode = [0, 0, 0.2]\nangle = ratios[-1]\n\nax1.pie(\n    ratios, \n    autopct = \"%1.2f%%\", \n    startangle = angle,\n    labels = labels, \n    explode = explode,\n    colors = colors2.values(), \n    pctdistance = 0.85,\n    wedgeprops = dict(width = 0.5)\n)\n\n# bar chart parameters\nxpos = 0\nbottom = 0\nratios = gen2[\"Q2\"].values\nwidth = .2\n\nfor j in range(len(ratios)):\n    height = ratios[j]\n    ax2.bar(xpos, height, width, bottom = bottom, color = palette[2:][j])\n    ypos = bottom + ax2.patches[j].get_height() \/ 2\n    bottom += height\n    ax2.text(\n        xpos, ypos, \n        \"%.2f%%\" % (ax2.patches[j].get_height()) + \"\\n\" + categories[2:][j], \n        ha  = \"center\"\n    )\n\nax2.set_title(\"Others\")\nax2.axis('off')\nax2.set_xlim(- 2.5 * width, 2.5 * width)\n\n# use ConnectionPatch to draw lines between the two plots\ntheta1, theta2 = ax1.patches[-1].theta1, ax1.patches[-1].theta2\ncenter, r = ax1.patches[-1].center, ax1.patches[-1].r\nbar_height = sum([item.get_height() for item in ax2.patches])\n\n# draw top connecting line\nx = r * np.cos(np.pi \/ 180 * theta2) + center[0]\ny = r * np.sin(np.pi \/ 180 * theta2) + center[1]\n\ncon = ConnectionPatch(\n    xyA = (-width \/ 2, bar_height), \n    coordsA = ax2.transData,\n    xyB = (x, y), \n    coordsB = ax1.transData\n)\ncon.set_color([0, 0, 0])\ncon.set_linewidth(0.5)\nax2.add_artist(con)\n\n# draw bottom connecting line\nx = r * np.cos(np.pi \/ 180 * theta1) + center[0]\ny = r * np.sin(np.pi \/ 180 * theta1) + center[1]\n\ncon = ConnectionPatch(\n    xyA = (-width \/ 2, 0), \n    coordsA = ax2.transData,\n    xyB = (x, y), \n    coordsB = ax1.transData\n)\ncon.set_color([0, 0, 0])\nax2.add_artist(con)\ncon.set_linewidth(0.5)\n\nplt.show()","8f53912a":"content(\n    \"Clearly, we are looking at a minority. 'Woman' makes up 19.36% while 'Prefer not to say',\\\n    'Prefer to self-describe' and 'Nonbinary' make up only 1.31%, 0.27% and 0.26% of the participants \\\n    respectively.\"\n)","cea2a5e7":"content(\n    \"Now let's have a look at which countries the participants belong to. Feel free to play around \" +\n    \"with the layering option at the right top corner to better understand the gender distribution over the \" +\n    \"world map. By hovering over the countries you will be able to see thier names. Click the points to see \" +\n    \"more information including the count of people. The geo-coordinates do not represent the exact\" +  \n    \"location of the participant.\"\n)","07c5b9ed":"df = data.loc[1:, [\"Q2\", \"Q3\"]]\n\ndf = df[df[\"Q3\"] != \"Other\"]\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q3\": \"country\"\n})\n\ndf[\"country\"] = df[\"country\"].replace({\n    \"Iran, Islamic Republic of...\": \"Iran, Islamic Republic of\",\n    \"Republic of Korea\": \"South Korea\",\n    \"United Kingdom of Great Britain and Northern Ireland\": \"United Kingdom\",\n    \"United States of America\": \"United States\",\n})\n\ntemp = df.groupby([\"country\", \"gender\"]).size().reset_index(name = \"count\")\n\nlink = \"https:\/\/gist.githubusercontent.com\/tadast\/8827699\/raw\/f5cac3d42d16b78348610fc4ec301e9234f82821\/countries_codes_and_coordinates.csv\"\ncoordinates = pd.read_csv(link)\n\ncoordinates = coordinates.drop(columns = [\"Alpha-2 code\", \"Alpha-3 code\", \"Numeric code\"])\n\ncoordinates = coordinates.rename(columns = {\n    \"Latitude (average)\": \"latitude\", \n    \"Longitude (average)\": \"longitude\",\n    \"Country\": \"country\"\n})\n\ncoordinates[\"latitude\"] = coordinates[\"latitude\"].str.replace('\"', '').astype(float)\ncoordinates[\"longitude\"] = coordinates[\"longitude\"].str.replace('\"', '').astype(float)\n\ntemp = pd.merge(temp, coordinates)\n\ntemp[\"latitude\"] = temp[\"latitude\"].astype(float) + np.random.normal(0, 1, temp.shape[0])\ntemp[\"longitude\"] = temp[\"longitude\"].astype(float) + np.random.normal(0, 1, temp.shape[0])\n\nmax_bubble_size = 30\ntemp[\"count_size\"] = temp[\"count\"]\/max(temp[\"count\"]) * max_bubble_size","f862b638":"def MakeMap(temp, fg):\n    mycolors = {\n        \"Man\": \"yellow\",\n        \"Woman\": \"orange\" ,\n        \"Prefer not to say\": \"blue\",\n        \"Prefer to self-describe\": \"red\",\n        \"Nonbinary\": \"green\"\n    } \n    \n    for i, row in temp.iterrows():\n        mycolor = mycolors[row[\"gender\"]]\n\n        html = \"{} <br> {} <br> {}\".format(row[\"country\"], row[\"gender\"], row[\"count\"])\n        iframe = folium.IFrame(\n            html,\n            width = 180,\n            height = 80\n        )\n\n        popup = folium.Popup(\n            iframe,\n            max_width = 180\n        )\n    \n        fg.add_child(\n            folium.CircleMarker(\n                location = (row[\"latitude\"], row[\"longitude\"]),\n                radius = row[\"count_size\"] + 0.05, \n                color = mycolor,\n                fill = True,\n                fill_color = mycolor,\n                fill_opacity = 0.3,\n                popup = popup,\n                tooltip = row[\"country\"]\n            )\n        )\n    \n    return fg","0ea27c26":"folium_map = folium.Map(\n    location = [46.2276, 2.2137], # Center of earth coordinates\n    zoom_start = 2.45,\n#     tiles = \"CartoDB dark_matter\"\n)\n\nfor c in categories:\n    fg = MakeMap(\n        temp[temp[\"gender\"] == c], \n        folium.FeatureGroup(name = c)\n    )\n\n    folium_map.add_child(fg)","4d6e6775":"folium_map.add_child(folium.LayerControl())","f521cfe2":"content(\n    \"Evidently, a great deal of participants come from India and Europe. Smaller concentrations can be \" +\n    \"found in the US, Asian countries like China, and Africa. 'Woman' (orange) mostly come from India. \" + \n    \"This is evident even in the Kaggle Grand-Masters list (Go India!!). India is followed by the US and \" +\n    \"European countries. 'Prefer not to say' (blue) and 'Prefer to self describe' (red) follow the same \" +\n    \"pattern. 'Nonbinary' (green) appear to be scattered all around the globe. Let's study the trends by \" + \n    \"continent.\"\n)","ec29fb85":"link = \"https:\/\/raw.githubusercontent.com\/dbouquin\/IS_608\/master\/NanosatDB_munging\/Countries-Continents.csv\"\ncontinents = pd.read_csv(link)\n\ncontinents = continents.rename(columns = {\n    \"Continent\": \"continent\",\n    \"Country\": \"country\"\n})\n\ncontinents[\"country\"] = continents[\"country\"].replace({\n    \"Iran\": \"Iran, Islamic Republic of\",\n    \"Russian Federation\": \"Russia\",\n    \"Korea, South\": \"South Korea\",\n    \"Vietnam\": \"Viet Nam\"\n})\n\ntemp = pd.merge(df, continents, how = \"left\")\n\ntemp[\"gender\"] = pd.Categorical(temp[\"gender\"])\n\ntemp.loc[temp[\"country\"] == \"United States\", \"continent\"] = \"North America\"\ntemp.loc[temp[\"country\"] == \"Taiwan\", \"continent\"] = \"Asia\"\n\ntemp = temp.drop(columns = [\"country\"])\n\ntemp = temp.groupby(\n    [\"continent\", \"gender\"]\n).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()  \n\ntemp[\"normal_gender_count\"] = temp.groupby([\"gender\"])[\"count\"].transform(lambda x: x\/x.sum() * 100)","b525626c":"sns.catplot(\n    x = \"continent\", \n    y = \"count\", \n    hue = \"gender\", \n    data = temp, \n    palette = colors1,\n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Number of Kagglers\")\nplt.xticks(rotation = 45)\nplt.title(\"Gender distribution over continents\")\nplt.show()","d023e490":"content(\n    \"There are too few people to look at so normalizing the data by gender appears to be a good idea.\"\n)","13898f3f":"sns.catplot(\n    x = \"continent\", \n    y = \"normal_gender_count\", \n    hue = \"gender\", \n    data = temp, \n    palette = colors1,\n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"Continent\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.xticks(rotation = 45)\nplt.title(\"Normalized gender distribution over continents\")\nplt.show()","63fdee6b":"content(\n    \"By normalizing, we reduce the effect of unequally surveyed gender groups. What do we observe? \" + \n    \"In Africa, Oceania and South America, the normalized number of participants is nearly the same. \" + \n    \"This means that gender does not affect participation much. In Asia, participation from 'Nonbinary' \" + \n    \"category is relatively smaller. In North America, participation from 'Nonbinary' category is \" + \n    \"relatively higher. In Europe, participation from 'Prefer to self describe' category is relatively \" +\n    \"higher.\"\n)","88771dc0":"content(\n    \"How does age affect the participation of people belonging to different gender categories? Let's find out.\"\n)","f9c2ef86":"temp = data.loc[1:, [\"Q1\", \"Q2\"]]\n\ntemp = temp.rename(columns = {\n    \"Q1\": \"age\",\n    \"Q2\": \"gender\"\n})\n\ndf = temp.pivot_table(\n    index = \"age\", \n    columns = \"gender\", \n    aggfunc = {\n        \"gender\": \"count\"\n    },\n    fill_value = 0\n)\n\ndf.columns = df.columns.droplevel(0)\ndf.columns.name = \"Gender\"\n\ndf[\"Others\"] = df[categories[2]] + df[categories[3]] + df[categories[4]]\n\ndf.drop(columns = categories[2:]).plot(\n    kind = 'bar', \n    stacked = True, \n    color = colors2\n)\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Number of Kagglers\")\nplt.title(\"Gender distribution over age group\")\nplt.show()","fb53d2e1":"content(\n    \"This histogram makes it clear that we are looking at an extremely small group of people. \" +\n    \"It encourages us to normalize the effect of  unequally surveyed gender groups.\"\n)","93e01c13":"df = temp.groupby([\"gender\", \"age\"]).agg(\n    count = pd.NamedAgg(\"age\", \"count\")\n).reset_index()\n\ndf[\"normal_gender_count\"] = df.groupby([\"gender\"])[\"count\"].transform(\n    lambda x: x\/x.sum() * 10000\n)\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\ndf = df.sort_values([\"gender\", \"age\"], ignore_index = True)\n\nfg = sns.FacetGrid(\n    data = df, \n    hue = 'gender',\n    hue_order = categories,\n    palette = \"Set2\", \n    height = 5, \n    aspect = 2\n)\nfg.map(plt.scatter, \"age\", \"gender\", \"normal_gender_count\")\nplt.margins(0.1)\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Gender\")\nplt.title(\"Normalized gender distribution over age group\")\nplt.show()","823b93b6":"content(\n    \"Clearly, the patterns of all 5 gender categories are quite similar. This is evedent by the sizes \" +\n    \"of the circles. They appear to be the same size almost irrespective of gender group. There are minor \" +\n    \"deviations from that pattern. For example, we don't have much data for 'Nonbinary' group after age 50 \" +\n    \"while the proportion of 'Man' appears to be slightly larger by the end.\"\n)","da99cfc9":"content(\n    \"Education level tells us a lot of things. Less educated people often have less access to resources \" + \n    \"and hence it is possible that we see lesser participation from them. Education affects a lot of other \" +\n    \"factors as well. So let's find out the education levels of different gender groups.\" \n)","23496f23":"df = data.loc[1:, [\"Q2\", \"Q4\"]]\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q4\": \"education\"\n})\n\ndf[\"education\"] = df[\"education\"].replace({\n    \"Some college\/university study without earning a bachelor\u2019s degree\": \"College\",\n    \"No formal education past high school\": \"High School\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\n\norder = [\n    'High School',\n    'College',\n    'Bachelor\u2019s degree',\n    'Master\u2019s degree',\n    'Doctoral degree',\n    'Professional degree',\n    'I prefer not to answer'\n]\n\ndf[\"education\"] = pd.Categorical(\n    df[\"education\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.groupby([\"gender\", \"education\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()  ","fd2a19f6":"def GetRedBar(df, categories, col_name, xlabel):\n    df[\"gender\"] = pd.Categorical(\n        df[\"gender\"],\n        categories = categories,\n        ordered = True\n    )\n\n    plt.subplots(figsize = (25, 5))\n    for i, cat in enumerate(categories):\n        plt.subplot(1, 5, i+1)\n    \n        temp = df[df[\"gender\"] == cat]\n        values = temp[\"count\"].values\n\n        sns.barplot(\n            x = col_name, \n            y = \"count\", \n            data = temp,\n            palette =  ['grey' if (v < max(values)) else 'red' for v in values],\n        )\n    \n        plt.xlabel(xlabel)\n        plt.ylabel(\"Number of Kagglers\")\n        plt.xticks(rotation = 90)\n        plt.title(cat)\n    \n    plt.tight_layout()","b7fc7b8f":"GetRedBar(df, categories, \"education\", \"Education Level\")","f970cdc2":"content(\n    \"In any gender category, the majority hold a masters degree. The bachelors degree \" + \n    \"appears to be the second highest followed by doctoral degree. So irrespective of gender, the \"  +\n    \"participants appear to be well educated.\"\n)","2e3d5780":"content(\n    \"Let's learn about the gender distribution for each role\/title.\"\n)","b3103d61":"df = data.loc[1:, [\"Q2\", \"Q5\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q5\": \"role\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\ndf[\"role\"] = pd.Categorical(df[\"role\"])\n\ndf = df.groupby([\"gender\", \"role\"]).agg(\n    count = pd.NamedAgg(\"role\", \"count\")\n).reset_index()","31bd2b00":"# sns.catplot(\n#     x = \"role\", \n#     y = \"count\", \n#     hue = \"gender\", \n#     data = df, \n#     palette = colors1,\n#     s = 10,\n#     jitter = True\n# )\n# plt.xlabel(\"Role\")\n# plt.ylabel(\"Number of Kagglers\")\n# plt.xticks(rotation = 90)\n# plt.title(\"Gender distribution over roles\")\n# plt.show()","58216d67":"temp = df.pivot_table(\n    index = \"role\", \n    columns = \"gender\", \n    values = \"count\",\n    fill_value = 0\n)\n\n# sns.heatmap(\n#     temp,\n#     annot = True,\n#     cmap = \"YlGnBu\",\n#     fmt = \"g\",\n# )\n# plt.xticks(rotation = 70)\n# plt.title(\"Gender distribution over roles\")\n# plt.show()","4fb77b3a":"df[\"normal_gender_count\"] = df.groupby([\"gender\"])[\"count\"].transform(lambda x: x\/x.sum() * 100)","eded437e":"sns.catplot(\n    x = \"role\", \n    y = \"normal_gender_count\", \n    hue = \"gender\", \n    data = df, \n    palette = colors1,\n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"Role\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.xticks(rotation = 90)\nplt.title(\"Normalized gender distribution over roles\")\nplt.show()","79dd644f":"content(\n    \"This gender normalized plot tells an interesting story. The gender distribution almost always clusters \" +\n    \"together, with the exception of the 'Student' category where there is a considerable amount of \" +\n    \"variation. Clustering together shows that participation is near identical in each role, irrespective \" +\n    \"of gender.\"\n    \n)","8493c14f":"temp = temp.apply(lambda x: x\/x.sum() * 100)","f6e6620c":"# sns.heatmap(\n#     temp,\n#     annot = True,\n#     cmap = \"YlGnBu\",\n#     fmt = \".2f\"\n# )\n# plt.xticks(rotation = 70)\n# plt.title(\"Normalized gender distribution over roles\")\n# plt.show()","1097dfd6":"sns.clustermap(\n    temp,\n    annot = True,\n    cmap = \"YlGnBu\",\n    fmt = \".2f\",\n    figsize = (7, 7)\n)\nplt.title(\"Normalized gender distribution over roles\")\nplt.show()","bc76b992":"content(\n    \"Look at the columns of this cluter map. They represent the gender groups. The color pattern of all \" +\n    \"columns appears to be quite similar right? That shows how gender did not affect the roles much. \" +\n    \"We must remember that these are normalized distributions. Drawing inferences from the absolute \" +\n    \"distributions can be hard due to unequally surveyed gender groups. If we look at the cluster map more\" +\n    \"closely, it tells us how similar the gender groups are to each other as well as the similarity \" +\n    \"between various roles.\"\n)","21ebfafc":"content(\n    \"Experience at coding tells us a lot of things. For example, it gives us insights into which groups \" +\n    \"are presumably new to Data Science and Machine Learning or even Kaggle.\"\n)","4047247f":"df = data.loc[1:, [\"Q2\", \"Q6\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q6\": \"experience\"\n})\n\ndf[\"experience\"] = df[\"experience\"].replace({\n    'I have never written code': \"Never\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\ndf[\"experience\"] = pd.Categorical(\n    df[\"experience\"],\n    categories = [\n        'Never',\n        '< 1 years',\n        '1-2 years',\n        '3-5 years',\n        '5-10 years',\n        '10-20 years',\n        '20+ years'\n    ],\n    ordered = True\n)\n\ndf = df.groupby([\"gender\", \"experience\"]).agg(\n    count = pd.NamedAgg(\"experience\", \"count\")\n).reset_index()\n\ndf = df.pivot_table(\n    index = \"experience\", \n    columns = \"gender\", \n    values = \"count\",\n    fill_value = 0\n)\n\ndf = df.apply(lambda x: x\/x.sum() * 100)","05560c4f":"df.T.plot(\n    kind = \"bar\",\n    stacked = True,\n    figsize = (10, 5),\n    colormap = \"plasma_r\",\n    width = 1,\n    alpha = 0.7\n)\nplt.ylim(0, 135)\nplt.xticks(rotation = 45)\nplt.yticks([])\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.title(\"Normalized gender distribution over programming experience\")\nplt.legend(ncol = 4, loc = \"upper center\", title = \"Programming Experience\")\n\nax = plt.gca()\nax.grid(False)","76f62227":"content(\n    \"The near identical widths of any category (of programming experience) in all gender groups tells us how\" +\n    \"similar the gender groups are. Although there is a minor devation in the case of 'Nonbinary' people \" +\n    \"(whose 5-10 years category is much larger than other gender groups), the patterns are otherwise similar\"\n)","f0f1d237":"content(\n    \"Let's see the programming language preferences amongst the different gender groups.\"\n)","2c621939":"def GenderPiePlot(df, categories, cols):\n    df[df[cols].notnull()] = 1\n    df = df.fillna(0)\n    \n    df = df.groupby([\"gender\"]).sum()\n    \n    temp = df.apply(lambda x: x\/x.sum(), axis = 1)\n    \n    for i, cat in enumerate(categories):\n        plt.subplot(2, 3, i+1)\n        temp.loc[cat, :].plot(\n            kind = \"pie\",\n            explode = [0.1]*len(cols),   \n            autopct = \"%1.2f%%\", \n            pctdistance = 0.6,\n            wedgeprops = dict(width = 0.5),\n            colormap = \"plasma_r\",\n            figsize = (20, 10),\n        )\n        plt.ylabel(\"\")\n        plt.xlabel(cat)\n    \n    plt.tight_layout()\n    \n    return temp, df","a0302e7e":"def GenderScatterPlot(temp, categories):\n    pca = PCA(n_components = 2)\n    embeddings = pca.fit_transform(temp.values)\n    variances = pca.explained_variance_ratio_\n#     print(variances.cumsum())\n    \n    embeddings = pd.DataFrame(embeddings, index = categories, columns = [\"PC1\", \"PC2\"])\n    embeddings.index.name = \"gender\"\n    embeddings = embeddings.apply(lambda x: x\/np.sqrt(np.sum(x**2)), axis = 1)\n    embeddings = embeddings.reset_index()\n    \n    plt.figure(figsize = (5, 5))\n    sns.scatterplot(\n        x = \"PC1\", \n        y = \"PC2\",\n        hue = \"gender\",\n        data = embeddings,\n        hue_order = categories,\n        palette = \"Set2\", \n        s = 100,\n        legend = False,\n        x_jitter = True,\n        y_jitter = True,\n    )\n    \n    for i, txt in enumerate(categories):\n        plt.annotate(txt, (embeddings.loc[i, \"PC1\"], embeddings.loc[i, \"PC2\"]))\n        \n    plt.title(\"Clustering gender\")\n    plt.xlim(-1.2, 1.6)\n    plt.show()","5298191b":"def CategoryPiePlot(df, categories, cols, nrow, ncol):\n    dummy = df.drop(categories[2:])\n    dummy.loc[\"Other\", :] = df.loc[categories[2:], :].sum()\n    dummy = dummy.apply(lambda x: x\/x.sum())\n\n    for i, c in enumerate(cols):\n        plt.subplot(nrow, ncol, i+1)\n    \n        dummy.loc[:, c].plot(\n            kind = \"pie\",\n            explode = [0.1]*3,   \n            autopct = \"%1.2f%%\", \n            pctdistance = 0.7,\n            wedgeprops = dict(width = 0.5),\n            colormap = \"plasma\",\n            figsize = (20, 10)\n        )\n        plt.ylabel(\"\")\n        plt.xlabel(c)\n    \n    plt.tight_layout()","342bbb4f":"def CategoryScatterPlot(df, cols, typ):\n    temp = df.apply(lambda x: x\/x.sum(), axis = 0)\n    \n    pca = PCA(n_components = 2)\n    embeddings = pca.fit_transform(temp.T.values)\n    variances = pca.explained_variance_ratio_\n#     print(variances.cumsum())\n    \n    embeddings = pd.DataFrame(embeddings, index = cols, columns = [\"PC1\", \"PC2\"])\n    embeddings.index.name = typ\n    embeddings = embeddings.apply(lambda x: x\/np.sqrt(np.sum(x**2)), axis = 1)\n    embeddings = embeddings.reset_index()\n    \n    plt.figure(figsize = (5, 5))\n    sns.scatterplot(\n        x = \"PC1\", \n        y = \"PC2\",\n        hue = typ,\n        data = embeddings,\n        s = 100,\n        legend = False,\n        x_jitter = True,\n        y_jitter = True,\n    )\n    for i, txt in enumerate(cols):\n        plt.annotate(txt, (embeddings.loc[i, \"PC1\"], embeddings.loc[i, \"PC2\"]))\n        \n    plt.title(\"Clustering \" + typ)\n    plt.xlim(-1.2, 2)\n    plt.show()","34675a25":"q_cols = [\n    'Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', 'Q7_Part_5', 'Q7_Part_6', 'Q7_Part_7', 'Q7_Part_8',\n    'Q7_Part_9', 'Q7_Part_10', 'Q7_Part_11', 'Q7_Part_12', 'Q7_OTHER'\n]\ndf = data.loc[1:, [\"Q2\"] + q_cols]\n\nprog_lang = [\n    \"Python\", \"R\", \"SQL\", \"C\", \"C++\", \"Java\", \"Javascript\", \"Julia\", \"Swift\", \"Bash\", \"MATLAB\", \"None\", \n    \"Other\"\n]\ndf.columns = [\"gender\"] + prog_lang","eadb6d53":"temp, df = GenderPiePlot(df, categories, prog_lang)","6593e7a3":"content(\n    \"The pie charts appear to be similar in any age category. Python is the favourite language of all, \" +\n    \"irrespective of gender. SQL and R programming languages follow.\"\n)","103972a8":"GenderScatterPlot(temp, categories)","1126679e":"content(\n    \"In terms of programming language preferences, 'Man' and 'Nonbinary' appear to be most similar.\"\n)","13e2d4b9":"CategoryPiePlot(df, categories, prog_lang, 3, 5)","0fb0bf31":"content(\n    \"Amongst all people who like Python, most are 'Man' followed by 'Woman'. This is unsurprising as we \" +\n    \"are interested in a small group of people here.\"\n)","cc7f624c":"CategoryScatterPlot(df, prog_lang, \"programming language\")","9719d10d":"content(\n    \"In terms of gender, Python is unlike any other language. I'm a Python fan btw. :D\"\n)","5376321b":"content(\n    \"We know the programming preferences of each gender group. Now let's see what people would recommend \" +\n    \"other people.\"\n)","cb103272":"df = data.loc[1:, [\"Q2\", \"Q8\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q8\": \"programming language\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\ndf[\"programming language\"] = pd.Categorical(df[\"programming language\"])\n\ndf = df.groupby([\"gender\", \"programming language\"]).agg(\n    count = pd.NamedAgg(\"programming language\", \"count\")\n).reset_index()","705f2f97":"GetRedBar(df, categories, \"programming language\", \"Recommended programming language\")","f86de286":"content(\n    \"Python appears to be the winner in any case. Leading by a LOT.\"\n)","eaf82f30":"content(\n    \"Let's now look at the IDEs used regularly by different gender groups.\"\n)","b0c91827":"ide_cols = [\n    'Q9_Part_1', 'Q9_Part_2', 'Q9_Part_3', 'Q9_Part_4', 'Q9_Part_5', 'Q9_Part_6', 'Q9_Part_7', 'Q9_Part_8', \n    'Q9_Part_9', 'Q9_Part_10', 'Q9_Part_11', 'Q9_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + ide_cols]\n\nide = [\n    \"Jupyter\", \"RStudio\", \"Visual Studio\", \"VSCode\", \"PyCharm\", \"Spyder\", \"Notepad++\", \n    \"Sublime Text\", \"Vim\/Emacs\", \"Matlab\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + ide\n\ntemp, df = GenderPiePlot(df, categories, ide)","785a63a2":"content(\n    \"The distributions appear to be identical irrespective of gender. Jupyter is the most popular choice \" +\n    \"in any gender group. Other Python based IDEs such as VSCode and PyCharm follow.\"\n)","50127abf":"GenderScatterPlot(temp, categories)","2ce1f0bf":"content(\n    \"Considering IDE preferences, 'Woman' and 'Prefer not to say' appear to be most similar.\"\n)","cf675a20":"CategoryPiePlot(df, categories, ide, 3, 5)","556a9b55":"content(\n    \"Again, these pie chart make it clear that we are interested in only about 2-3% of the total population.\"\n)","a263f3cc":"CategoryScatterPlot(df, ide, \"IDE\")","20ec2914":"content(\n    \"Notice something interesting? In terms of gender, Python based IDE cluster together.\"\n)","7df2f67b":"content(\n    \"We know that most people regularly use Jupyter, which offers notebooks. Let's explore the gender \" +\n    \"distribution for each hosted notebook product\"\n)","4c5fc404":"not_cols = [\n    'Q10_Part_1', 'Q10_Part_2', 'Q10_Part_3', 'Q10_Part_4', 'Q10_Part_5', 'Q10_Part_6', 'Q10_Part_7', \n    'Q10_Part_8', 'Q10_Part_9', 'Q10_Part_10', 'Q10_Part_11', 'Q10_Part_12', 'Q10_Part_13', 'Q10_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + not_cols]\n\nnotebook = [\n    \"Kaggle\", \"Colab\", \"Azure\", \"Paperspace\/Gradient\", \"Binder\/JupyterHub\", \"Code Ocean\", \"Watson Studio\", \n    \"Sagemaker\", \"Amazon EMR\", \"Google AI Notebooks\", \"Datalab Notebooks\",  \"Databricks\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + notebook\n\ndf[df[notebook].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ntemp = df.apply(lambda x: x\/x.sum(), axis = 1)","dfed74b7":"plt.figure(figsize = (10, 5))\nfor i, c in enumerate(categories):\n    (markerline, stemlines, baseline) = plt.stem(\n        temp.columns,\n        temp.loc[c]\n    )\n    plt.setp(\n        markerline, \n        marker = 'o', \n        markersize = 15,\n        markeredgewidth = 2, \n        color = palette[i]\n    )\n    plt.setp(stemlines, color = \"gold\")\n    plt.setp(baseline, visible = False)\n    plt.tick_params(labelsize = 12)\n    plt.xticks(rotation = 45)\n    \n    plt.xlabel(\"Preferred Notebook\")\n    plt.ylabel(\"Number of Kagglers (Normalized)\")\n    plt.title(\"Gender distribution over notebook preference.\")\n    \nplt.tight_layout()","80694373":"content(\n    \"Again, the gender groups cluster together in each category. It can be said that Kaggle and Colab are \" +\n    \"popular platforms. A lot of people (in any gender group) do not like any.\"\n)","25b5d794":"content(\n    \"Computing platforms are important for data scientists and machine learning engineers. Let's explore \" +\n    \"people's preferences.\"\n)","d767ec7a":"df = data.loc[1:, [\"Q2\", \"Q11\"]]\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q11\": \"compute platform\"\n})\n\ndf[\"compute platform\"] = df[\"compute platform\"].replace({\n    \"A personal computer or laptop\": \"PC\",\n    \"A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)\": \"DL Workstation\",\n    \"A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)\": \"Cloud\"\n})\n\ndf = df.groupby([\"gender\", \"compute platform\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()\n\ndf[\"normal_gender_count\"] = df.groupby([\"gender\"])[\"count\"].transform(\n    lambda x: x\/x.sum() * 5000\n)\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\ndf = df.sort_values([\"gender\", \"compute platform\"], ignore_index = True)","432a6bd0":"fg = sns.FacetGrid(\n    data = df, \n    hue = 'gender',\n    hue_order = categories,\n    palette = \"Set2\", \n    height = 5, \n    aspect = 2\n)\nfg.map(plt.scatter, \"compute platform\", \"gender\", \"normal_gender_count\")\nplt.margins(0.1)\nplt.xlabel(\"Compute Platform\")\nplt.ylabel(\"Gender\")\nplt.title(\"Normalized gender distribution over compute platform\")\nplt.show()","fae57784":"content(\n    \"Irrespective of gender, the patterns appear to be quite similar. Most users prefer PC. This trend is \" +\n    \"followed by Cloud users. Users of other computing platforms show similar trends. The absence of data \" +\n    \"in the case of 'Nonbinary' and 'Prefer to self describe' categories is no reason to disconsider the \" +\n    \"fact that the patterns are otherwise similar.\"\n)","8722a46e":"content(\n    \"Let's explore which hardware people of different gender groups like to use on a regular basis.\"\n)","46ea7a64":"hard_cols = ['Q12_Part_1', 'Q12_Part_2', 'Q12_Part_3', 'Q12_OTHER']\ndf = data.loc[1:, [\"Q2\"] + hard_cols]\n\nhardware = [\"GPU\", \"TPU\", \"None\", \"Other\"]\ndf.columns = [\"gender\"] + hardware\n\ndf[df[hardware].notnull()] = 1\ndf = df.fillna(0)\n\ntemp = df.groupby([\"gender\"]).sum()","a5057d8f":"fig = plt.figure(figsize = (25,5)) \ngs = fig.add_gridspec(1, len(categories))\n\nfor i, cat in enumerate(categories):\n    ax = fig.add_subplot(gs[0, i])\n    \n    squarify.plot(\n        sizes = temp.loc[cat].values,  \n        label = temp.loc[cat].keys(), \n        color = sns.color_palette(\"magma_r\"),\n        alpha = 0.7,\n        text_kwargs = {\n            \"size\": 10\n        },\n        ax = ax\n    )\n    ax.axis(\"off\")\n    ax.set_title(cat)\n    \nplt.tight_layout()","dcae8cf8":"content(\n    \"In any gender group, the specialized hardware used on a regular basis is GPU. A lot of people use \" + \n    \"none. The distribution is quite similar in all the gender groups.\" \n)","e14e245e":"content(\n    \"Although GPUs are the popular choice, we know how much better (mainly speed) TPUs can be. \" +\n    \"TPUs are the future and it's interesting to explore how often people \" +\n    \"use TPUs today, because the numbers are definitely going to shoot in the years to come.\"\n)","79736e8c":"df = data.loc[1:, [\"Q2\", \"Q13\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q13\": \"frequency\"\n})\n\ndf[\"frequency\"] = df[\"frequency\"].replace({\n    \"More than 25 times\": \"> 25 times\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\n\norder = [\"Never\", \"Once\", \"2-5 times\", \"6-25 times\", \"> 25 times\"]\ndf[\"frequency\"] = pd.Categorical(\n    df[\"frequency\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.groupby([\"gender\", \"frequency\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()\n\ndf[\"count\"] = df[\"count\"] + np.random.uniform(0, 1, df.shape[0])","ff95220e":"plt.subplots(figsize = (25, 5))\nfor i, c in enumerate(categories):\n    plt.subplot(1, 5, i+1)\n    (markerline, stemlines, baseline) = plt.stem(\n        df[df[\"gender\"] == c][\"frequency\"].values,\n        df[df[\"gender\"] == c][\"count\"].values, \n    )\n    plt.setp(\n        markerline, \n        marker = '*', \n        markersize = 15,\n        markeredgewidth = 2, \n        color = palette[i]\n    )\n    plt.setp(stemlines, color = palette[i])\n    plt.setp(baseline, visible = False)\n    plt.tick_params(labelsize = 12)\n    plt.xticks(rotation = 45)\n    \n    plt.xlabel(\"TPU usage frequency\")\n    plt.ylabel(\"Number of Kagglers\")\n    \n    plt.title(c)\n    \nplt.tight_layout()","a44826e4":"content(\n    \"Woah, yet again, the trends appear to be similar irrespective of gender. Most people have never used \" +\n    \"a TPU. A small number of people have used it once and so on (fewer and fewer people). You may also \" +\n    \"observe deviations. For example, for 'Prefer to self describe' and 'Nonbinary' categories, the  \" +\n    \"trend is slightly off.\"\n)","086c9e76":"content(\n    \"Let's explore the data visualization libraries or tools people prefer.\"\n)","78dc20e4":"vis_cols = [\n    'Q14_Part_1', 'Q14_Part_2', 'Q14_Part_3', 'Q14_Part_4', 'Q14_Part_5', 'Q14_Part_6', 'Q14_Part_7', \n    'Q14_Part_8', 'Q14_Part_9', 'Q14_Part_10', 'Q14_Part_11', 'Q14_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + vis_cols]\n\nvis = [\n    \"Matplotlib\", \"Seaborn\", \"Plotly\", \"Ggplot\", \"Shiny\", \"D3 js\", \"Altair\", \"Bokeh\", \"Geoplotlib\", \n    \"Leaflet\/Folium\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + vis\n\ndf[df[vis].notnull()] = 1\ndf = df.fillna(0)\n\ndf = df.groupby(\"gender\").sum()\n\ndf = df.apply(lambda x: x\/x.sum() * 100, axis = 1)","858d7c2e":"df.plot(\n    kind = \"bar\",\n    stacked = True,\n    figsize = (10, 5),\n    colormap = \"plasma_r\",\n    width = 1,\n    alpha = 0.6\n)\nplt.ylim(0, 150)\nplt.xticks(rotation = 45)\nplt.yticks([])\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.title(\"Normalized gender distribution over visualization tools\")\nplt.legend(ncol = 4, loc = \"upper center\", title = \"Visualization Tools\")\n\nax = plt.gca()\nax.grid(False)","cfebdaef":"content(\n    \"The trend is similar for all gender categories. We previously saw how much people love Python. Their \" +\n    \"love for python based visualization libraries such as Matplotlib, Seaborn and Plotly is not \" +\n    \"surprising. Capable of producing excellent quality graphics, R's Ggplot follows.\" \n)","995c77ca":"content(\n    \"Let's look at for how long people have been using ML.\"\n)","35cf7810":"df = data.loc[1:, [\"Q2\", \"Q15\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q15\": \"experience\"\n})\n\ndf[\"experience\"] = df[\"experience\"].replace({\n    '20 or more years': \"> 20 years\",\n    'I do not use machine learning methods': \"Don't use ML\"\n})\n\ndf[\"gender\"] = pd.Categorical(df[\"gender\"])\n\norder = [\n    \"Don't use ML\", 'Under 1 year', '1-2 years', '2-3 years', '3-4 years', '4-5 years', '5-10 years', \n    '10-20 years', \"> 20 years\"\n]\ndf[\"experience\"] = pd.Categorical(\n    df[\"experience\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.pivot_table(\n    index = \"experience\",\n    columns = \"gender\",\n    aggfunc = {\n        \"gender\": \"count\"\n    },\n    fill_value = 0\n)\n\ndf.columns = df.columns.droplevel(0)\ndf.columns.name = \"Gender\"\n\ndf = df.apply(lambda x: x\/x.sum())","1d9a7dca":"cat = order\nN = len(cat)\n\nf, ax = plt.subplots()\nf.set_figheight(15)\nf.set_figwidth(15)\nfor i, c in enumerate(categories):\n    values = list(df[c])\n    values += [values[0]]\n \n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += [angles[0]]\n \n    ax = plt.subplot(1, len(categories), i+1, polar=True)\n    plt.xticks(angles[:-1], cat, color='black', size=8)\n    plt.xlabel(c)\n    ax.set_rlabel_position(0)\n    ax.plot(angles, values, linewidth=1, linestyle='solid', color = palette[i])\n    ax.fill(angles, values, color = palette[i], alpha=0.1)\n    ax.set_theta_offset(np.deg2rad(90))\n    \nplt.tight_layout()","accd342d":"content(\n    \"Notice how similar the distributions are? In any gender group, most people belong to 'Under 1 year' \" +\n    \"of ML experience. This is followed by '1-2 years' and 'Don't use ML'. Irrespective of gender, there \" +\n    \"are hardly any people with a lot of experience.\"\n)","4c70bd87":"content(\n    \"Let's find out which ML frameworks are popular amongst each gender group.\"\n)","1a2bda61":"frame_cols = [\n    'Q16_Part_1', 'Q16_Part_2', 'Q16_Part_3', 'Q16_Part_4', 'Q16_Part_5', 'Q16_Part_6', 'Q16_Part_7', \n    'Q16_Part_8', 'Q16_Part_9', 'Q16_Part_10', 'Q16_Part_11', 'Q16_Part_12', 'Q16_Part_13', 'Q16_Part_14',\n    'Q16_Part_15', 'Q16_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + frame_cols]\n\nframe = [\n    \"Scikit-learn\", \"TensorFlow\", \"Keras\", \"PyTorch\", \"Fast.ai\", \"MXNet\", \"Xgboost\", \"LightGBM\", \"CatBoost\",\n    \"Prophet\", \"H2O 3\", \"Caret\", \"Tidymodels\", \"JAX\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + frame\n\ndf[df[frame].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n\ndf = df.apply(lambda x: x\/x.sum() * 100, axis = 1)\n\ndf.columns.name = \"frameworks\"\ndf = df.unstack().reset_index(name = \"count\")","2779c906":"sns.catplot( \n    x = \"frameworks\", \n    y =\"count\",\n    hue = \"gender\", \n    data = df, \n    palette = colors1,\n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"ML Framework\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.xticks(rotation = 90)\nplt.title(\"Gender distribution over ml framework\")\nplt.show()","3ea0709c":"content(\n    \"In each category, the genders are somewhat close, indicating that people of any gender have similar \" +\n    \"tastes for ML frameworks. Scikit-learn is everyone's favourite, followed by other Python (mainly) \" +\n    \"based libraries including TensorFlow, Keras and PyTorch.\"\n)","5f3c036e":"content(\n    \"We previously looked at ML frameworks. Now let's look at ML algorithms popular in different \" +\n    \"gender groups.\"\n)","738a6657":"algo_cols = [\n    'Q17_Part_1', 'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5', 'Q17_Part_6', 'Q17_Part_7', \n    'Q17_Part_8', 'Q17_Part_9', 'Q17_Part_10', 'Q17_Part_11', 'Q17_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + algo_cols]\n\nalgo = [\n    \"Linear\/Logistic Regression\", \"DT\/RF\", \"GBM\", \"Bayesian\", \"Evolutionary\", \"DNN\", \"CNN\", \"GAN\", \"RNN\", \n    \"Transformers\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + algo\n\ndf[df[algo].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum() * 100, axis = 1)\n\ndf.columns.name = \"algo\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n\ndf = df.sort_values([\"gender\", \"algo\"])","5666ca70":"col = [(t,)*len(algo) for t in palette]\ncol = list(itertools.chain(*col)) \n\nlObjectsALLcnts = df[\"count\"]\n\nlObjectsALLlbls = df[\"algo\"]\n\niN = len(lObjectsALLcnts)\narrCnts = np.array(lObjectsALLcnts)\n\ntheta=np.arange(0,2*np.pi,2*np.pi\/iN)\nwidth = (2*np.pi)\/iN *0.9\nbottom = 50\n\nfig = plt.figure(figsize=(6,6))\nax = fig.add_axes([0.1, 0.1, 0.75, 0.75], polar=True)\nbars = ax.bar(theta, arrCnts, width=width, bottom=bottom, color=col)\n\nplt.axis('off')\n\nrotations = np.rad2deg(theta)\ny0,y1 = ax.get_ylim()\n\nfor x, bar, rotation, label in zip(theta, bars, rotations, lObjectsALLlbls):\n    offset = (bottom+bar.get_height())\/(y1-y0)\n    lab = ax.text(0, 0, label, transform=None, ha='center', va='center')\n    renderer = ax.figure.canvas.get_renderer()\n    bbox = lab.get_window_extent(renderer=renderer)\n    invb = ax.transData.inverted().transform([[0,0],[bbox.width,0] ])\n    lab.set_position((x,offset+(invb[1][0]-invb[0][0])\/2.*2.7 ) )\n    lab.set_transform(ax.get_xaxis_transform())\n    lab.set_rotation(rotation)\n    \nplt.show()","43270048":"content(\n    \"What do we see here? There appears to be a pattern in the liking for ML algorithms. Linear\/Logistic \" +\n    \"Regression (two of the simplest approaches for regression and classification respectively) are most \" +\n    \"popular irrespective of gender. Decision Tress \/ Random Forest follows. In any gender group, simpler \" +\n    \"ML algorithms are much more popular than use of modern (and relatively difficult) ones like \" +\n    \"GANs and Transformers.\"\n)","2c601e54":"content(\n    \"Computer vision methods are an important area of focus in the Machine Learning domain. Let's explore \" + \n    \"the computer vision methods popular amongst gender groups.\"\n)","c642cddd":"cv_cols = [\n    'Q18_Part_1', 'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5', 'Q18_Part_6', 'Q18_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + cv_cols]\n\ncv = [\n    \"General purpose\", \"Segmentation\", \"Object detection\", \"Classification\", \"Generative\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + cv\n\ndf[df[cv].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum() * 100, axis = 1)\n\ndf.columns.name = \"cv\"\n\ndf = df.unstack().reset_index(name = \"count\")\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n\ndf = df.sort_values([\"cv\", \"gender\"])","d75dde23":"for c in set(df[\"cv\"]):\n    temp = df[df[\"cv\"] == c]\n\n    labels = list(temp[\"gender\"])\n    values = list(temp[\"count\"])\n    \n    #number of data points\n    n = len(values)\n    #find max value for full ring\n    k = 10 ** int(log10(max(values)))\n    m = k * (1 + max(values) \/\/ k)\n\n    #radius of donut chart\n    r = 1.5\n    #calculate width of each ring\n    w = r \/ n \n\n    #create figure, axis\n    fig, ax = plt.subplots()\n    ax.axis(\"equal\")\n\n    #create rings of donut chart\n    for i in range(n):\n        #hide labels in segments with textprops: alpha = 0 - transparent, alpha = 1 - visible\n        innerring, _ = ax.pie(\n            [m - values[i], values[i]], \n            radius = r - i * w, \n            startangle = 90, \n            labels = [\"\", labels[i]], \n            labeldistance = 1 - 1 \/ (1.5 * (n - i)), \n            textprops = {\"alpha\": 0}, \n            colors = [\"white\", palette[i]]\n        )\n        plt.setp(innerring, width = w, edgecolor = \"white\")\n\n    plt.legend(loc = \"upper center\")\n    plt.title(c)\n    plt.ylim(0, 3)\n    plt.show()","5f040602":"content(\n    \"It appears that different computer vision techniques are popular amongst different gender groups. For \" +\n    \"Object Detection methods are almost equally popular amongst all. Segmentation methods are popular \" +\n    \"amongst 'Woman' and 'Prefer not to say'. Generative modeling methods are popular amongst 'Prefer to \" +\n    \"self describe'. Classification methods are popular amongst 'Man', 'Woman' and 'Prefer not to say'.\"\n)","b193bf0d":"content(\n    \"Apart from Computer Vision methods, Natural Language Processing methods are an important area of \" +\n    \"focus in the Machine Learning domain. Let's explore which methods are liked by which groups.\"\n)","dbc873e5":"nlp_cols = [\n    \"Q19_Part_1\", \"Q19_Part_2\", \"Q19_Part_3\", \"Q19_Part_4\", \"Q19_Part_5\", \"Q19_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + nlp_cols]\n\nnlp = [\n    \"Embedding vectors\", \"Encoder-decoder\", \"Contextual embeddings\", \"Transformer\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + nlp\n\ndf[df[nlp].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n\ndf.columns.name = \"nlp\"\ndf = df.unstack().reset_index(name = \"count\")","130c8154":"GetRedBar(df, categories, \"nlp\", \"NLP Method\")","d934cc6e":"content(\n    \"Embedding vectors are the most popular choice irrespective of gender. Encode-decoder frameworks and \" +\n    \"Transformers follow. These patterns are consistent across different gender groups.\"\n)","9d6efa74":"content(\n    \"Information about companies where people work tells us a lot about the opportunities people get. \"\n)","4ae8eb5b":"df = data.loc[1:, [\"Q2\", \"Q20\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q20\": \"size\"\n})\n\norder = [\n    '0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', \n    '10,000 or more employees' \n]\ndf[\"size\"] = pd.Categorical(\n    df[\"size\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.pivot_table(\n    index = \"size\", \n    columns = \"gender\", \n    aggfunc = {\n        \"gender\": \"count\"\n    },\n    fill_value = 0\n)\n\ndf.columns = df.columns.droplevel(0)\ndf.columns.name = \"Gender\"\n\ndf = df + np.random.uniform(0, 1, df.shape[0])","415e4c03":"fig = plt.figure(figsize = (25,5)) \ngs = fig.add_gridspec(1, len(categories))\n\nfor i, cat in enumerate(categories):\n    ax = fig.add_subplot(gs[0, i])\n    \n    squarify.plot(\n        sizes = df[cat].values,  \n        label = df[cat].keys(), \n        color = sns.color_palette(\"magma_r\"),\n        alpha = 0.7,\n        text_kwargs = {\n            \"size\": 10\n        },\n        ax = ax\n    )\n    ax.axis(\"off\")\n    ax.set_title(cat)\n    \nplt.tight_layout()","ed51b637":"content(\n    \"Interestingly, irrespective of gender, people mostly work at small sized comapies (0-49 employees). \" +\n    \"This trend is followed by slightly larger (50-249 employees). Despite disregarding the orientation of \" +\n    \"the partitions, there is at least one inconsistency in the pattern. In the 'Prefer to self describe' \" +\n    \"category, there are relatively very few who work at companies as large as 1000-9999 employees. \" +\n    \"This is not to say they are necessarily discriminated against, because many belonging to that category \" +\n    \"work at organizations with over 10000 employees.\"\n)","36a8a8d4":"content(\n    \"Let's find out how people respond to this question.\"\n)","3e7e565c":"df = data.loc[1:, [\"Q2\", \"Q21\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q21\": \"people\"\n})\n\norder = ['0', '1-2', '3-4', '5-9', '10-14', '15-19', '20+']\ndf[\"people\"] = pd.Categorical(\n    df[\"people\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.groupby([\"gender\", \"people\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()","68f46c05":"cat = order\nN = len(cat)\n\nf, ax = plt.subplots()\nf.set_figheight(15)\nf.set_figwidth(15)\nfor i, c in enumerate(categories):\n    temp = df[df[\"gender\"] == c]\n    values = list(temp[\"count\"])\n    values += [values[0]]\n \n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += [angles[0]]\n \n    ax = plt.subplot(1, len(categories), i+1, polar=True)\n    plt.xticks(angles[:-1], cat, color='black', size=8)\n    plt.xlabel(c)\n    ax.set_rlabel_position(0)\n    ax.plot(angles, values, linewidth=1, linestyle='solid', color = palette[i])\n    ax.fill(angles, values, color = palette[i], alpha=0.1)\n    ax.set_theta_offset(np.deg2rad(90))\n    \nplt.tight_layout()","4fc68336":"content(\n    \"There isn't much of a pattern apparent in this case. Except for the 'Prefer to self-describe' category \" +\n    \"there are mostly only 1-2 people handling data science work loads. This is followed by 0 or 3-4 \" +\n    \"which are small numbers. 20+ is also a popular choice. It may be interpretted that there are either \" +\n    \"upto 4 people (perhaps in smaller companies) while about 20+ (perhaps in larger companies) which are \" +\n    \"responsible for workloads, irrespective of gender.\"\n)","646c3fbd":"content(\n    \"The answer to this question gives us insights into what kind of places different gender groups work \" +\n    \"at. Companies incorporting ML methods into business (i.e. Data driven companies) may be regarded to \" +\n    \"be better than those which do not incorporate ML. It is well known that companies not leveraging \" +\n    \"data for decision making and running their business will fall behind those who do, in the near future.\"\n)","62604ab0":"df = data.loc[1:, [\"Q2\", \"Q22\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q22\": \"adopt\"\n})\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n\ndf[\"adopt\"] = df[\"adopt\"].replace({\n    \"No (we do not use ML methods)\": \"No\",\n    \"We are exploring ML methods (and may one day put a model into production)\": \"Exploring\",\n    \"We have well established ML methods (i.e., models in production for more than 2 years)\": \"Been >2 years\",\n    \"We recently started using ML methods (i.e., models in production for less than 2 years)\": \"Been <2 years\",\n    \"We use ML methods for generating insights (but do not put working models into production)\": \"Only insights\"\n})\n\ndf = df.pivot_table(\n    index = \"adopt\", \n    columns = \"gender\", \n    aggfunc = {\n        \"gender\": \"count\"\n    },\n    fill_value = 0\n)\n\ndf.columns = df.columns.droplevel(0)\ndf.columns.name = \"Gender\"\n\ndf = df.apply(lambda x: x\/x.sum())","4c709c83":"column_names = list(df.columns)\nrow_names = list(df.index)\n\nfig = plt.figure()\nax = Axes3D(fig)\n\ndf = df.values\n\nlx= len(df[0])            # Work out matrix dimensions\nly= len(df[:,0])\nxpos = np.arange(0,lx,1)    # Set up a mesh of positions\nypos = np.arange(0,ly,1)\nxpos, ypos = np.meshgrid(xpos+0.25, ypos+0.25)\n\nxpos = xpos.flatten()   # Convert positions to 1D array\nypos = ypos.flatten()\nzpos = np.zeros(lx*ly)\n\ndx = 0.5 * np.ones_like(zpos)\ndy = dx.copy()\ndz = df.flatten()\n\nax.bar3d(xpos,ypos,zpos, dx, dy, dz, color=palette*ly)\n\nax.w_xaxis.set_ticklabels([]) #column_names, rotation = 90)\nax.w_yaxis.set_ticklabels(row_names, rotation = 90)\n# ax.set_xlabel('Letter')\n# ax.set_ylabel('Day')\n# ax.set_zlabel('Occurrence')\nax.set_ylim3d(0, 10)\n\nplt.show()","22aaaccd":"content(\n    \"There appears to be a regular pattern. Irrespective of gender, most work at companies that have been \" +\n    \"using ML for at least 2 years now. Other popular choices include - 'Exploring' and 'Only insights'. \" +\n    \"Irrespective of gender, a lot of people have no knowledge of whether or not their companies us ML.\"\n)","e246126d":"content(\n    \"What people do at work gives us insights into things like - the positions they hold, the \" +  \n    \"opportunities they get and the kind of things they choose to do. Let's explore.\"\n)","73d0d4bd":"role_cols = [\n    'Q23_Part_1', 'Q23_Part_2', 'Q23_Part_3', 'Q23_Part_4', 'Q23_Part_5', 'Q23_Part_6', 'Q23_Part_7', \n    'Q23_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + role_cols]\n\nrole = [\n    \"Analyze and understand\", \"Build infrastructure\", \"Build prototype\", \"Build ML service\", \n    \"Experiment with ML\", \"Research\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + role\n\ndf[df[role].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)","6eed1c9a":"sns.clustermap(\n    df,\n    annot = True,\n    cmap = \"YlGnBu\",\n    fmt = \".2f\",\n    figsize = (7, 7)\n)\nplt.title(\"Normalized gender distribution over roles\")\nplt.show()","ef0828f7":"content(\n    \"There is a decreasing pattern of darkness from left to right for any gender group. In any case, \" + \n    \"people mostly work on analyzing and understanding data.\"\n)","4a22a952":"content(\n    \"Yearly compensation tells us how wealth is distributed amongst different gender groups. It is \" +\n    \"an important factor to consider when evaluating gender groups.\"\n)","ca9941c4":"df = data.loc[1:, [\"Q2\", \"Q24\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q24\": \"compensation\"\n})\n\norder = [\n    '$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999',\n    '10,000-14,999', '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999',\n    '50,000-59,999', '60,000-69,999', '70,000-79,999', '80,000-89,999', '90,000-99,999', '100,000-124,999',\n    '125,000-149,999', '150,000-199,999', '200,000-249,999', '250,000-299,999', '300,000-500,000', \n    '> $500,000'\n]\n\ndf[\"compensation\"] = pd.Categorical(\n    df[\"compensation\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.groupby([\"gender\", \"compensation\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()\n\ndf[\"normal_gender_count\"] = df.groupby([\"gender\"])[\"count\"].transform(lambda x: x\/x.sum() * 100)\ndf[\"normal_gender_count\"] = df[\"normal_gender_count\"] + np.random.uniform(0, 2, df.shape[0])","916a4dd6":"sns.catplot(\n    x = \"gender\", \n    y = \"normal_gender_count\", \n    hue = \"compensation\", \n    data = df, \n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"Role\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.xticks(rotation = 90)\nplt.title(\"Normalized gender distribution over roles\")\nplt.show()","b4fae547":"content(\n    \"What we see here is that irrespective of gender, the distribution of wealth within gender groups \" +\n    \"appears to be similar. With the exception of 'Nonbnary', most earn between 0-999 USD a year. \" +\n    \"In general, in any gender group, there are some who earn a lot, some who earn very little \" + \n    \"and some who earn in between.\"\n)","56bfda50":"content(\n    \"Let's find out how much gender groups have spent on ML cloud computing services.\"\n)","070ccb8b":"df = data.loc[1:, [\"Q2\", \"Q25\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q25\": \"expenditure\"\n})\n\ndf[\"expenditure\"] = df[\"expenditure\"].replace({\n    '$0 ($USD)': \"0\",\n    '$1-$99': \"1-99\",\n    '$10,000-$99,999': \"10000-99999\",\n    '$100,000 or more ($USD)': \">= 100000\",\n    '$100-$999': \"100-999\",\n    '$1000-$9,999': \"1000-9999\"\n})\n\norder = [\"0\", \"1-99\", \"100-999\", \"1000-9999\", \"10000-99999\", \">= 100000\"]\ndf[\"expenditure\"] = pd.Categorical(\n    df[\"expenditure\"],\n    categories = order,\n    ordered = True\n)\n\ndf = df.pivot_table(\n    index = \"expenditure\", \n    columns = \"gender\", \n    aggfunc = {\n        \"gender\": \"count\"\n    },\n    fill_value = 0\n)\n\ndf.columns = df.columns.droplevel(0)\ndf.columns.name = \"Gender\"\n\ndf = df.apply(lambda x: x\/x.sum()* 100)","a1f88ec4":"plt.subplots(figsize = (25, 5))\nfor i, c in enumerate(categories):\n    plt.subplot(1, 5, i+1)\n    \n    temp = df[c]\n\n    my_range = range(1, len(temp) + 1)\n    \n    plt.hlines(\n        y = my_range, \n        xmin = 0, \n        xmax = temp.values, \n        color = 'gray'\n    )\n\n    plt.plot(\n        temp.values, \n        my_range, \n        'o', \n        markersize = 11,\n        color = colors1[c]\n    )\n\n    plt.yticks(my_range, order)\n    plt.xlim(left = 0)\n    plt.title(c)\n    plt.xlabel(\"Number of Kagglers\")\n    plt.ylabel(\"Expenditure\")\n    \nplt.tight_layout()","1aef2047":"content(\n    \"Notice the regular pattern over all gender groups? In each gender group, most have selected 0. Other \" +\n    \"selections also appear to be very similar.\"\n)","0253e934":"content(\n    \"Let's explore the different cloud computing platforms used by different gender groups.\"\n)","dae5a657":"cloud_cols = [\n    \"Q26_A_Part_1\", \"Q26_A_Part_2\", \"Q26_A_Part_3\", \"Q26_A_Part_4\", \"Q26_A_Part_5\", \"Q26_A_Part_6\", \n    \"Q26_A_Part_7\", \"Q26_A_Part_8\", \"Q26_A_Part_9\", \"Q26_A_Part_10\", \"Q26_A_Part_11\", \"Q26_A_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + cloud_cols]\n\ncloud = [\n    \"AWS\", \"Azure\", \"GCP\", \"IBM Cloud \/ Red Hat\", \"Oracle Cloud\", \"SAP Cloud\", \"Salesforce Cloud\",\n    \"VMware Cloud\", \"Alibaba Cloud\", \"Tencent Cloud\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + cloud\n\ndf[df[cloud].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum() * 100, axis = 1)","044e6834":"df.plot(\n    kind = \"bar\",\n    stacked = True,\n    figsize = (10, 5),\n    colormap = \"plasma_r\",\n    width = 1,\n    alpha = 0.6\n)\nplt.ylim(0, 150)\nplt.xticks(rotation = 45)\nplt.yticks([])\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.title(\"Normalized gender distribution over cloud platforms\")\nplt.legend(ncol = 4, loc = \"upper center\", title = \"Cloud Platforms\")\n\nax = plt.gca()\nax.grid(False)","d883e3ec":"content(\n    \"With the exception of 'Nonbinary', the pattern appears to be similar. In any gender category, most \" +\n    \"use AWS, followed by GCP and Azure. Other platforms do not seem to be very popular. \" + \n    \"A lot of people use 'None'. In the case of 'Nonbinary', relatively more use AWS.\"\n)","9261e71e":"content(\n    \"Let's look at which cloud platforms people hope to become more familiar with in the following years.\"\n)","47ff2b6a":"cloud_cols = [\n    'Q26_B_Part_1', 'Q26_B_Part_2', 'Q26_B_Part_3', 'Q26_B_Part_4', 'Q26_B_Part_5', 'Q26_B_Part_6', \n    'Q26_B_Part_7', 'Q26_B_Part_8', 'Q26_B_Part_9', 'Q26_B_Part_10', 'Q26_B_Part_11', 'Q26_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + cloud_cols]\n\ncloud = [\n    \"AWS\", \"Azure\", \"GCP\", \"IBM Cloud \/ Red Hat\", \"Oracle Cloud\", \"SAP Cloud\", \"VMware Cloud\", \n    \"Salesforce Cloud\", \"Alibaba Cloud\", \"Tencent Cloud\", \"None\", \"Other\"\n]\n\ndf.columns = [\"gender\"] + cloud\n\ndf[df[cloud].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf.columns.name = \"cloud platform\"\ndf = df.unstack().reset_index(name = \"count\")\n\nGetRedBar(df, categories, \"cloud platform\", \"Cloud Computing Platform\")","5e480a84":"content(\n    \"Unsurprisingly, AWS is a popular choice but GCP does not seem to be far behind. Azure is the other \" +\n    \"popular choice in any gender group. Other platforms are not so popular.\"\n)","954ff0eb":"content(\n    \"Let's look at which cloud computing products are used by people on a regular basis.\"\n)","42770e92":"cloud_cols = [\n    \"Q27_A_Part_1\", \"Q27_A_Part_2\", \"Q27_A_Part_3\", \"Q27_A_Part_4\", \"Q27_A_Part_5\", \"Q27_A_Part_6\", \n    \"Q27_A_Part_7\", \"Q27_A_Part_8\", \"Q27_A_Part_9\", \"Q27_A_Part_10\", \"Q27_A_Part_11\", \"Q27_A_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + cloud_cols]\n\ncloud = [\n    \"Amazon EC2\", \"AWS Lambda\", \"Amazon Elastic Container Service\", \"Azure Cloud Services\", \n    \"Microsoft Azure Container Instances\", \"Azure Functions\", \"Google Cloud Compute Engine\",\n    \"Google Cloud Functions\", \"Google Cloud Run\", \"Google Cloud App Engine\", \"No \/ None\", \"Other\"\n]\ndf.columns = [\"gender\"] + cloud\n\ndf[df[cloud].notnull()] = 1\ndf = df.fillna(0)\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ntemp = df.apply(lambda x: x\/x.sum(), axis = 1)","1b34e855":"plt.figure(figsize = (10, 8))\nfor i, c in enumerate(categories):\n    (markerline, stemlines, baseline) = plt.stem(\n        temp.columns,\n        temp.loc[c]\n    )\n    plt.setp(\n        markerline, \n        marker = 'o', \n        markersize = 15,\n        markeredgewidth = 2, \n        color = palette[i]\n    )\n    plt.setp(stemlines, color = \"gold\")\n    plt.setp(baseline, visible = False)\n    plt.tick_params(labelsize = 12)\n    plt.xticks(rotation = 80)\n    plt.ylim(-0.05, 0.3)\n    \n    plt.xlabel(\"Cloud Products\")\n    plt.ylabel(\"Number of Kagglers (Normalized)\")\n    \n    plt.legend(categories)\n    plt.title(\"Gender distribution over cloud computing products\")\n    \nplt.tight_layout()","9ddff9ac":"content(\n    \"It appears that different cloud products are used by different gender groups. For example, 'Nonbinary'\" +\n    \"regularly use Amazon EC2, AWS Lambda, Azure Container Instances and Azure Functions. 'Prefer to self \" +\n    \"describe' regularly use Azure Cloud Services and Google Cloud App Engine. A lot of them use other, \" +\n    \"lesser known services and there are whose who use None. There isn't an evident pattern in people's \" +\n    \"use of products. This could be attributed to the different roles people take up at work. This does not \" +\n    \"imply that any one is better than another.\"\n)","0575585e":"content(\n    \"Now that we know which cloud computing products people use on a regular basis, let's look at products \" +\n    \"they want to become familiar with in the next 2 years.\"\n)","1d2eea73":"cloud_cols = [\n    'Q27_B_Part_1', 'Q27_B_Part_2', 'Q27_B_Part_3', 'Q27_B_Part_4', 'Q27_B_Part_5', 'Q27_B_Part_6', \n    'Q27_B_Part_7', 'Q27_B_Part_8', 'Q27_B_Part_9', 'Q27_B_Part_10', 'Q27_B_Part_11', 'Q27_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + cloud_cols]\n\ndf.columns = [\"gender\"] + cloud\n\ndf[df[cloud].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n\ndf.columns.name = \"cloud\"\ndf = df.unstack().reset_index(name = \"count\")\n\nGetRedBar(df, categories, \"cloud\", \"Cloud Computing Product\")","c8c367e4":"content(\n    \"While 'Prefer to self describe' mainly want to learn Google  Cloud Functions and Google Cloud App \" + \n    \"Engine in the next 2 years, others intend to learn maily Google Cloud Compute Engine. In general, \" +\n    \"Google Cloud remains the platform of choice in any gender category.\"\n)","f2db48bd":"content(\n    \"Let's explore the ML products used by gender groups on a regular bases.\"\n)","7660d1d5":"prod_cols = [\n    \"Q28_A_Part_1\", \"Q28_A_Part_2\", \"Q28_A_Part_3\", \"Q28_A_Part_4\", \"Q28_A_Part_5\", \"Q28_A_Part_6\", \n    \"Q28_A_Part_7\", \"Q28_A_Part_8\", \"Q28_A_Part_9\", \"Q28_A_Part_10\", \"Q28_A_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + prod_cols]\n\nprod = [\n    \"Amazon SageMaker\", \"Amazon Forecast\", \"Amazon Rekognition\", \"Azure ML Studio\", \"Azure Cognitive Services\",\n    \"Google AI Platform\", \"Google Video AI\", \"Google Natural Language\", \"Google Vision AI\", \"No \/ None\", \n    \"Other\"\n]\ndf.columns = [\"gender\"] + prod\n\ndf[df[prod].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum()*2000, axis = 1)\n\ndf.columns.name = \"prod\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\ndf = df.sort_values([\"gender\", \"prod\"], ignore_index = True)","436e4ea8":"fg = sns.FacetGrid(\n    data = df, \n    hue = 'gender',\n    hue_order = categories,\n    palette = \"Set2\", \n    height = 5, \n    aspect = 2\n)\nfg.map(plt.scatter, \"prod\", \"gender\", \"count\")\nplt.margins(0.1)\nplt.xlabel(\"ML Product\")\nplt.ylabel(\"Gender\")\nplt.xticks(rotation = 70)\nplt.title(\"Normalized gender distribution over regularly used ml products\")\nplt.show()","3a7b969e":"content(\n    \"The 'Nonbinary' category doesn't have enough data. Othrwise the pattern is quite regular. Most \" + \n    \"people belonging to any gender group do not use any ML products.\"\n)","bcb7ea9f":"content(\n    \"Let's have a look at which ML products people hope to become more familiar with in the next 2 years.\"\n)","94ece724":"prod_cols = [\n    'Q28_B_Part_1', 'Q28_B_Part_2', 'Q28_B_Part_3', 'Q28_B_Part_4', 'Q28_B_Part_5', 'Q28_B_Part_6',\n    'Q28_B_Part_7', 'Q28_B_Part_8', 'Q28_B_Part_9', 'Q28_B_Part_10', 'Q28_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + prod_cols]\n\nprod = [\n    \"Amazon SageMaker\", \"Amazon Forecast\", \"Amazon Rekognition\", \"Azure ML Studio\", \"Azure Cognitive Services\",\n    \"Google AI Platform\", \"Google Video AI\", \"Google Natural Language\", \"Google Vision AI\", \"No \/ None\", \n    \"Other\"\n]\ndf.columns = [\"gender\"] + prod\n\ndf[df[prod].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n\ndf.columns.name = \"prod\"\ndf = df.unstack().reset_index(name = \"count\")\n\nGetRedBar(df, categories, \"prod\", \"ML Product\")","078c4d35":"content(\n    \"While Google AI Platform is the most popular choice amongst 'Man', 'Woman' and 'Prefer not to say', \" +\n    \"those which belong to 'Prefer to self describe' and 'Nonbinary' intend to learn Google Cloud Natural \" +\n    \"Language. Google products appear to be quite popular in all gender groups.\"\n)","f1a9692b":"content(\n    \"Let's have a look at the big data products used by people on a regular basis.\"\n)","47daeeca":"prod_cols = [\n    \"Q29_A_Part_1\", \"Q29_A_Part_2\", \"Q29_A_Part_3\", \"Q29_A_Part_4\", \"Q29_A_Part_5\", \"Q29_A_Part_6\", \n    \"Q29_A_Part_7\", \"Q29_A_Part_8\", \"Q29_A_Part_9\", \"Q29_A_Part_10\", \"Q29_A_Part_11\", \"Q29_A_Part_12\", \n    \"Q29_A_Part_13\", \"Q29_A_Part_14\", \"Q29_A_Part_15\", \"Q29_A_Part_16\", \"Q29_A_Part_17\", \"Q29_A_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + prod_cols]\n\nprod = [\n    \"MySQL\", \"PostgreSQL\", \"SQLite\", \"Oracle Database\", \"MongoDB\", \"Snowflake\", \"IBM Db2\", \n    \"Microsoft SQL Server\", \"Microsoft Access\", \"Azure Data Lake Storage\", \"Amazon Redshift\", \"Amazon Athena\",\n    \"Amazon DynamoDB\", \"Google BigQuery\", \"Google Cloud SQL\", \"Google Firestore\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + prod\n\ntemp, df = GenderPiePlot(df, categories, prod)","f06b2da6":"content(\n    \"SQLite, PostgreSQL, MySQL and Microsoft SQL Server are popular choices. A lot of people use None. These\" +\n    \"trends are consistent through the gender categories. Minor deviations such as relatively high MySQL \" +\n    \"and low PostgreSQL in 'Prefer to self describe'.\"\n)","c5a81a24":"content(\n    \"We saw the big data products used regularly. Now let's look at those big data products which people \" +\n    \"want to become more familiar with in the next 2 years.\"\n)","bd66f3f7":"prod_cols = [\n    'Q29_B_Part_1', 'Q29_B_Part_2', 'Q29_B_Part_3', 'Q29_B_Part_4', 'Q29_B_Part_5', 'Q29_B_Part_6', \n    'Q29_B_Part_7', 'Q29_B_Part_8', 'Q29_B_Part_9', 'Q29_B_Part_10', 'Q29_B_Part_11', 'Q29_B_Part_12',\n    'Q29_B_Part_13', 'Q29_B_Part_14', 'Q29_B_Part_15', 'Q29_B_Part_16', 'Q29_B_Part_17', 'Q29_B_OTHER' \n]\ndf = data.loc[1:, [\"Q2\"] + prod_cols]\ndf.columns = [\"gender\"] + prod\n\ndf[df[prod].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\ndf.columns.name = \"prod\"\ndf = df.unstack().reset_index(name = \"count\")\n\nGetRedBar(df, categories, \"prod\", \"Big Data Products\")","91b5049c":"content(\n    \"MySQL appears to be the favourite in all 5 cases. In the case of 'Nonbinary', PostgresSQL and MongoDB \" +\n    \"appear to be equally popular.\"\n)","f623f8d0":"content(\n    \"We've seen big data products that people use regularly and those that people would like to learn \" +\n    \"in the next 2 years. Let's see which ones are used most often.\"\n)","ca357fec":"df = data.loc[1:, [\"Q2\", \"Q30\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q30\": \"prod\"\n})\n\ndf[\"prod\"] = pd.Categorical(\n    df[\"prod\"],\n    categories = set(df[\"prod\"])\n)\n\ndf = df.groupby([\"gender\", \"prod\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()","adda03b8":"for i, cat in enumerate(categories):\n    temp = df[df[\"gender\"] == cat]\n    max_count = temp[temp[\"count\"] == max(temp[\"count\"])]\n    other_sum = temp.drop(max_count.index)[\"count\"].sum()\n    \n    max_count = max_count.append({\n        \"gender\": cat,\n        \"prod\": \"Others\",\n        \"count\": other_sum\n    }, \n        ignore_index = True\n    )\n    \n    plt.subplot(1, 5, i+1)\n    max_count[\"count\"].plot(\n        kind = \"pie\",\n        explode = [0.1]*max_count.shape[0],   \n        autopct = \"%1.2f%%\", \n        pctdistance = 0.6,\n        wedgeprops = dict(width = 0.5),\n        colors = [\"red\"] * (max_count.shape[0] - 1) + [\"gray\"],\n        figsize = (15, 15),\n        labels = max_count[\"prod\"]\n    )\n    plt.ylabel(\"\")\n    plt.xlabel(cat)\n    \nplt.tight_layout()    ","a5ad4927":"content(\n    \"Again, MySQL and PostgresSQL are the most popular choices. In the case of 'Prefer to self describe' \" +\n    \"and 'Nonbinary', there is an exceptional number of people contributing to the total. This is likely \" +\n    \"due to little data collection from these groups.\"\n)","c8312dfb":"content(\n    \"With the advent of data era, Business Intelligence Tools became popular. Let's see the tools used by \" +\n    \"different groups.\"\n)","813d59e4":"bi_cols = [\n    \"Q31_A_Part_1\", \"Q31_A_Part_2\", \"Q31_A_Part_3\", \"Q31_A_Part_4\", \"Q31_A_Part_5\", \"Q31_A_Part_6\", \n    \"Q31_A_Part_7\", \"Q31_A_Part_8\", \"Q31_A_Part_9\", \"Q31_A_Part_10\", \"Q31_A_Part_11\", \"Q31_A_Part_12\", \n    \"Q31_A_Part_13\", \"Q31_A_Part_14\", \"Q31_A_OTHER\"\n]\n\ndf = data.loc[1:, [\"Q2\"] + bi_cols]\n\nbi = [\n    \"Amazon QuickSight\", \"Microsoft Power BI\", \"Google Data Studio\", \"Looker\", \"Tableau\", \"Salesforce\", \n    \"Einstein Analytics\", \"Qlik\", \"Domo\", \"TIBCO Spotfire\", \"Alteryx\", \"Sisense\", \"SAP Analytics Cloud\",\n    \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + bi\n\ndf[df[bi].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"bi\"\ndf = df.unstack().reset_index(name = \"count\")","707c7582":"sns.catplot( \n    x = \"bi\", \n    y =\"count\",\n    hue = \"gender\", \n    data = df, \n    palette = colors1,\n    s = 10,\n    jitter = True\n)\nplt.xlabel(\"BI Tool\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.xticks(rotation = 90)\nplt.title(\"Gender distribution over bi tool\")\nplt.show()","2073ec43":"content(\n    \"We see that gender groups cluster together in each category of BI Tool. This means that gender groups \" +\n    \"behave in a similar manner. Most participants selected None. Tableau is otherwise most popular.\"\n)","d290ccc6":"content(\n    \"Let's have a look at the BI Tools that people hope to become familiar with in the next 2 years.\"\n)","0a85c69b":"bi_cols = [\n    'Q31_B_Part_1', 'Q31_B_Part_2', 'Q31_B_Part_3', 'Q31_B_Part_4', 'Q31_B_Part_5', 'Q31_B_Part_6', \n    'Q31_B_Part_7', 'Q31_B_Part_8', 'Q31_B_Part_9', 'Q31_B_Part_10', 'Q31_B_Part_11', 'Q31_B_Part_12',\n    'Q31_B_Part_13', 'Q31_B_Part_14', 'Q31_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + bi_cols]\n\nbi = [\n    \"Microsoft Power BI\", \"Amazon QuickSight\", \"Google Data Studio\", \"Looker\", \"Tableau\", \"Salesforce\",\n    \"Einstein Analytics\", \"Qlik\", \"Domo\", \"TIBCO Spotfire\", \"Alteryx\", \"Sisense\", \"SAP Analytics Cloud\",\n    \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + bi\n\ndf[df[bi].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"bi\"\n\ndf = df.unstack().reset_index(name = \"count\")","c2c6602f":"GetRedBar(df, categories, \"bi\", \"BI Tools\")","1f189acc":"content(\n    \"Again, Tableau appears to be the favourite. In the case of 'Nonbinary', you may notice a minor deviation.\"\n)","595c215d":"content(\n    \"We saw the dominance of Tableau. Should we see anything different this time?\"\n)","061d91c9":"df = data.loc[1:, [\"Q2\", \"Q32\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q32\": \"bi\"\n})\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n\ndf[\"bi\"] = pd.Categorical(\n    df[\"bi\"],\n    categories = set(df[\"bi\"])\n)\n\ndf = df.groupby([\"gender\", \"bi\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()","4fb0ea48":"GetRedBar(df, categories, \"bi\", \"BI Tools\")","09b59f15":"content(\n    \"We do not see anything different this time. Tableau is the winner. Deviations can be observed in the \" +\n    \"case of 'Prefer to self describe'.\"\n)","6ca26fe6":"content(\n    \"As Data Science and Machine Learning became popular, people realized that there was a somewhat fixed \" +\n    \"sequence of steps that needed to be followed to get decent if not the best output. For example, the \" +\n    \"analysis process begins with cleaning tasks such as filling in missing values, then processing and \" +\n    \"finally post processing. It was quicky realized that these could be automated in many cases. Thus came \" +\n    \"into existence AutoML.\"\n)","77093452":"automl_cols = [\n    'Q33_A_Part_1', 'Q33_A_Part_2', 'Q33_A_Part_3', 'Q33_A_Part_4', 'Q33_A_Part_5', 'Q33_A_Part_6', \n    'Q33_A_Part_7', 'Q33_A_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + automl_cols]\n\nautoml = [\n    \"Augmentation\", \"Feature engineering \/ selection\", \"Model selection\", \"Model architecture\", \n    \"Hyperparameter tuning\", \"ML pipelines\", \"No \/ None\", \"Other\"\n]\ndf.columns = [\"gender\"] + automl\n\ndf[df[automl].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"automl\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf = df.sort_values([\"gender\", \"automl\"], ignore_index = True)","7d12c740":"cat = set(df[\"automl\"])\nN = len(cat)\n\nf, ax = plt.subplots()\nf.set_figheight(20)\nf.set_figwidth(20)\nfor i, c in enumerate(categories):\n    temp = df[df[\"gender\"] == c]\n    values = list(temp[\"count\"])\n    values += [values[0]]\n \n    angles = [n \/ float(N) * 2 * np.pi for n in range(N)]\n    angles += [angles[0]]\n \n    ax = plt.subplot(1, len(categories), i+1, polar=True)\n    plt.xticks(angles[:-1], cat, color='black', size=8)\n    plt.xlabel(c)\n    ax.set_rlabel_position(0)\n    ax.plot(angles, values, linewidth=1, linestyle='solid', color = palette[i])\n    ax.fill(angles, values, color = palette[i], alpha=0.1)\n    ax.set_theta_offset(np.deg2rad(90))\n    \nplt.tight_layout()","dc4a13fd":"content(\n    \"With the exception of 'Nonbinary' group, the trend is somewhat similar. Most use AutoML for \" +\n    \"Hyperparameter Tuning. In the case of  'Nonbinary' group, people seem to use other tools relatively more.\"\n)","37698a06":"content(\n    \"While certain tasks can be fully automated. Many tasks that we seem to automate can only be partially \" +\n    \"automated. That said, let's have a look at partial AutoML tools.\"\n)","5f98bdcf":"automl_cols = [\n    'Q33_B_Part_1', 'Q33_B_Part_2', 'Q33_B_Part_3', 'Q33_B_Part_4', 'Q33_B_Part_5', 'Q33_B_Part_6',\n    'Q33_B_Part_7', 'Q33_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + automl_cols]\n\ndf.columns = [\"gender\"] + automl\n\ndf[df[automl].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"automl\"\n\ndf = df.unstack().reset_index(name = \"count\")","4eea8762":"GetRedBar(df, categories, \"automl\", \"AutoML\")","a47c2839":"content(\n    \"Itterspective of gendr, Model Selection seems to be the favourite. Minor deviations can be observed \" +\n    \"in the case of 'Prefer to self describe' and 'Nonbinary' categories.\"\n)","9b88ecf3":"content(\n    \"Let's have a look at which automated machine learning tools are used by people on a regular basis.\"\n)","c178c0d2":"automl_cols = [\n    'Q34_A_Part_1', 'Q34_A_Part_2', 'Q34_A_Part_3', 'Q34_A_Part_4', 'Q34_A_Part_5', 'Q34_A_Part_6', \n    'Q34_A_Part_7', 'Q34_A_Part_8', 'Q34_A_Part_9', 'Q34_A_Part_10', 'Q34_A_Part_11', 'Q34_A_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + automl_cols]\n\nautoml = [\n    \"Google Cloud AutoML\", \"H20 Driverless AI\", \"Databricks AutoML\", \"DataRobot AutoML\", \"Tpot\", \"Auto-Keras\",\n    \"Auto-Sklearn\", \"Auto_ml\", \"Xcessiv\", \"MLbox\", \"No \/ None\", \"Other\"\n]\ndf.columns = [\"gender\"] + automl\n\ndf[df[automl].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum()*100, axis = 1)","dc1d517e":"df.plot(\n    kind = \"bar\",\n    stacked = True,\n    figsize = (10, 5),\n    colormap = \"plasma_r\",\n    width = 1,\n    alpha = 0.6\n)\nplt.ylim(0, 150)\nplt.xticks(rotation = 45)\nplt.yticks([])\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Number of Kagglers (Normalized)\")\nplt.title(\"Normalized gender distribution over regularly used ML Tools\")\nplt.legend(ncol = 4, loc = \"upper center\", title = \"Regular ML Tools\")\n\nax = plt.gca()\nax.grid(False)","c0a33ed0":"content(\n    \"With the exception of 'Nonbinary', the gender groups appear to have a similar usage pattern.\" \n)","f75894c4":"content(\n    \"Let's now see which automated machine learning tools do people hope to become familiar with in the \" +\n    \"next 2 years.\"\n)","46f65fea":"automl_cols = [\n    'Q34_B_Part_1', 'Q34_B_Part_2', 'Q34_B_Part_3', 'Q34_B_Part_4', 'Q34_B_Part_5', 'Q34_B_Part_6', \n    'Q34_B_Part_7', 'Q34_B_Part_8', 'Q34_B_Part_9', 'Q34_B_Part_10', 'Q34_B_Part_11', 'Q34_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + automl_cols]\n\ndf.columns = [\"gender\"] + automl\n\ndf[df[automl].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"automl\"\ndf = df.unstack().reset_index(name = \"count\")","e0bc65a4":"GetRedBar(df, categories, \"automl\", \"AutoML\")","49a42e87":"content(\n    \"Auto-sklearn is unsurprisingly the favourite. 'prefer not to say', 'Prefer to self describe' and \" +\n    \"'Nonbinary' groups also have a liking for other tools such as Google Cloud AutoML. Liking for Google \" +\n    \"products is evident in other groups as well. Even previously we saw how popular Google Cloud is.\"\n)","eeaedf1a":"content(\n    \"Managing Machine Learning Experiments is critical for Data Scientists and Machine Learning Engineers. \" +\n    \"Let's explore the tools people use to manage ML experiments.\"\n)","a2356a3e":"exp_cols = [\n    'Q35_A_Part_1', 'Q35_A_Part_2', 'Q35_A_Part_3', 'Q35_A_Part_4', 'Q35_A_Part_5', 'Q35_A_Part_6', \n    'Q35_A_Part_7', 'Q35_A_Part_8', 'Q35_A_Part_9', 'Q35_A_Part_10', 'Q35_A_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + exp_cols]\n\nexp = [\n    \"Neptune.ai\", \"Weights & Biases\", \"Comet.ml\", \"Sacred + Omniboard\", \"TensorBoard\", \"Guild.ai\", \"Polyaxon\",\n    \"Trains\", \"Domino Model Monitor\", \"No \/ None\", \"Other\"\n]\ndf.columns = [\"gender\"] + exp\n\ndf[df[exp].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum()*100, axis = 1)\n\ndf.columns.name = \"Manage ML Experiments\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf = df.sort_values([\"gender\", \"Manage ML Experiments\"])","50efc49e":"col = [(t,)*len(exp) for t in palette]\ncol = list(itertools.chain(*col)) \n\nlObjectsALLcnts = df[\"count\"]\n\nlObjectsALLlbls = df[\"Manage ML Experiments\"]\n\niN = len(lObjectsALLcnts)\narrCnts = np.array(lObjectsALLcnts)\n\ntheta=np.arange(0,2*np.pi,2*np.pi\/iN)\nwidth = (2*np.pi)\/iN *0.9\nbottom = 50\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_axes([0.1, 0.1, 0.75, 0.75], polar=True)\nbars = ax.bar(theta, arrCnts, width=width, bottom=bottom, color=col)\n\nplt.axis('off')\n\nrotations = np.rad2deg(theta)\ny0,y1 = ax.get_ylim()\n\nfor x, bar, rotation, label in zip(theta, bars, rotations, lObjectsALLlbls):\n    offset = (bottom+bar.get_height())\/(y1-y0)\n    lab = ax.text(0, 0, label, transform=None, ha='center', va='center')\n    renderer = ax.figure.canvas.get_renderer()\n    bbox = lab.get_window_extent(renderer=renderer)\n    invb = ax.transData.inverted().transform([[0,0],[bbox.width,0] ])\n    lab.set_position((x,offset+(invb[1][0]-invb[0][0])\/2.*2.7 ) )\n    lab.set_transform(ax.get_xaxis_transform())\n    lab.set_rotation(rotation)\n    \nplt.show()","16a0f0a8":"content(\n    \"Irrespective of gender, most people selected 'None'. Amongst the tools used, TensorBoard is the most \" +\n    \"popular choice irrespective of gender.\"\n)","56471ff0":"content(\n    \"Let's now see which tools people hope to become familiar with in the following years.\"\n)","66f70f23":"exp_cols = [\n    'Q35_B_Part_1', 'Q35_B_Part_2', 'Q35_B_Part_3', 'Q35_B_Part_4', 'Q35_B_Part_5', 'Q35_B_Part_6', \n    'Q35_B_Part_7', 'Q35_B_Part_8', 'Q35_B_Part_9', 'Q35_B_Part_10', 'Q35_B_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + exp_cols]\n\ndf.columns = [\"gender\"] + exp\n\ndf[df[exp].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\n\ndf.columns.name = \"exp\"\ndf = df.unstack().reset_index(name = \"count\")","8fb29447":"GetRedBar(df, categories, \"exp\", \"ML Experiments\")","6d728fb1":"content(\n    \"While 'Man', 'Woman' and 'Prefer to self describe' intend to learn TensorBoard, most people belonging \" +\n    \"to 'Prefer to self describe' and 'Nonbinary' groups selected 'None'. TensorBoard was however the \" +\n    \"second most popular choice of these two groups.\"\n)","b4b7105a":"content(\n    \"It is important to understand the deployment side of the Machine Learning pipeline because \" +\n    \"without deployment, ML products or projects become inaccessible to the world. It is only through \" +\n    \"open-source and code sharing that most great projects have come into being.\"\n)","d8211f59":"share_cols = [\n    'Q36_Part_1', 'Q36_Part_2', 'Q36_Part_3', 'Q36_Part_4', 'Q36_Part_5', 'Q36_Part_6', 'Q36_Part_7', \n    'Q36_Part_8', 'Q36_Part_9', 'Q36_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + share_cols]\n\nshare = [\n    \"Plotly Dash\", \"Streamlit\", \"NBViewer\", \"GitHub\", \"Personal blog\", \"Kaggle\", \"Colab\", \"Shiny\", \"None\",\n    \"Other\"\n]\ndf.columns = [\"gender\"] + share\n\ndf[df[share].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum()*2000, axis = 1)\n\ndf.columns.name = \"share\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n\ndf = df.sort_values([\"gender\", \"share\"], ignore_index = True)","fb1fa345":"fg = sns.FacetGrid(\n    data = df, \n    hue = 'gender',\n    hue_order = categories,\n    palette = \"Set2\", \n    height = 5, \n    aspect = 2\n)\nfg.map(plt.scatter, \"share\", \"gender\", \"count\")\nplt.margins(0.1)\nplt.xlabel(\"ML Product\")\nplt.ylabel(\"Gender\")\nplt.xticks(rotation = 70)\nplt.title(\"Normalized gender distribution over preferred sharing platform\")\nplt.show()","3e191501":"content(\n    \"The patterns are quite similar across the gender categories. Most prefer GitHub. The second most \" +\n    \"common choice was None. Other options weren't too common.\"\n)","96478099":"content(\n    \"To be in Data Science and Machine Learning, you must learn Data Science and Machine Learning. Let's \" +\n    \"discover where most people prefer to do courses.\"\n)","1dd45df3":"course_cols = [\n    'Q37_Part_1', 'Q37_Part_2', 'Q37_Part_3', 'Q37_Part_4', 'Q37_Part_5', 'Q37_Part_6', 'Q37_Part_7', \n    'Q37_Part_8', 'Q37_Part_9', 'Q37_Part_10', 'Q37_Part_11', 'Q37_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + course_cols]\n\ncourse = [\n    \"Coursera\", \"edX\", \"Kaggle\", \"DataCamp\", \"Fast.ai\", \"Udacity\", \"Udemy\", \"LinkedIn\", \"Cloud-certification\",\n    \"University\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + course\n\ndf[df[course].notnull()] = 1\ndf = df.fillna(0)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum()*100, axis = 1)\n\ndf.columns.name = \"course\"\ndf = df.unstack().reset_index(name = \"count\")\n\ndf = df.sort_values([\"gender\", \"course\"], ignore_index = True)","5e5018fb":"plt.subplots(figsize = (25, 5))\nfor i, c in enumerate(categories):\n    plt.subplot(1, 5, i+1)\n    (markerline, stemlines, baseline) = plt.stem(\n        df[df[\"gender\"] == c][\"course\"].values,\n        df[df[\"gender\"] == c][\"count\"].values, \n    )\n    plt.setp(\n        markerline, \n        marker = '*', \n        markersize = 15,\n        markeredgewidth = 2, \n        color = palette[i]\n    )\n    plt.setp(stemlines, color = palette[i])\n    plt.setp(baseline, visible = False)\n    plt.tick_params(labelsize = 12)\n    plt.xticks(rotation = 90)\n    \n    plt.xlabel(\"Course\")\n    plt.ylabel(\"Number of Kagglers\")\n    \nplt.tight_layout()","cdd1d409":"content(\n    \"The patterns are fairly consistent across 5 gender categories. They all prefer Coursera most. Kaggle \" +\n    \"and Udemy are other popular options.\"\n)","c3296f78":"content(\n    \"Let's see which tools people subscribing to different gender identities prefer to use to analyze data.\"\n)","5f3ca13a":"df = data.loc[1:, [\"Q2\", \"Q38\"]].dropna().reset_index(drop = True)\n\ndf = df.rename(columns = {\n    \"Q2\": \"gender\",\n    \"Q38\": \"analysis\"\n})\n\ndf[\"analysis\"] = df[\"analysis\"].replace({\n    'Advanced statistical software (SPSS, SAS, etc.)': \"Advanced Statistics Software\",\n    'Basic statistical software (Microsoft Excel, Google Sheets, etc.)': \"Basic Statistics Software\",\n    'Business intelligence software (Salesforce, Tableau, Spotfire, etc.)': \"BI Software\",\n    'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)': \"Cloud based software\",\n    'Local development environments (RStudio, JupyterLab, etc.)': \"Local Softwares\",\n})\n\ndf = df.groupby([\"gender\", \"analysis\"]).agg(\n    count = pd.NamedAgg(\"gender\", \"count\")\n).reset_index()\n\ndf[\"normal_gender_count\"] = df.groupby([\"gender\"])[\"count\"].transform(lambda x: x\/x.sum() * 100)\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)","4c0f9174":"for c in set(df[\"analysis\"]):\n    temp = df[df[\"analysis\"] == c]\n\n    labels = list(temp[\"gender\"])\n    values = list(temp[\"normal_gender_count\"])\n    \n    #number of data points\n    n = len(values)\n    #find max value for full ring\n    k = 10 ** int(log10(max(values)))\n    m = k * (1 + max(values) \/\/ k)\n\n    #radius of donut chart\n    r = 1.5\n    #calculate width of each ring\n    w = r \/ n \n\n    #create figure, axis\n    fig, ax = plt.subplots()\n    ax.axis(\"equal\")\n\n    #create rings of donut chart\n    for i in range(n):\n        #hide labels in segments with textprops: alpha = 0 - transparent, alpha = 1 - visible\n        innerring, _ = ax.pie(\n            [m - values[i], values[i]], \n            radius = r - i * w, \n            startangle = 90, \n            labels = [\"\", labels[i]], \n            labeldistance = 1 - 1 \/ (1.5 * (n - i)), \n            textprops = {\"alpha\": 0}, \n            colors = [\"white\", palette[i]]\n        )\n        plt.setp(innerring, width = w, edgecolor = \"white\")\n\n    plt.legend(loc = \"upper center\")\n    plt.title(c)\n    plt.ylim(0, 3)\n    plt.show()","9c9d3a8c":"content(\n    \"Local software appear to be the most common choice across the gender groups. Other patterns are not \" +\n    \"so apparent. Different gender groups seem to like different products to different degrees.\"\n)","83b9c3d6":"content(\n    \"To remain updated with the latest developments in Data Science and Machine Learning, it is important \" +\n    \"find a good source of reliable information. Let's see which media sources people use to learn more \" +\n    \"about Data Science and Machine Learning topics.\"\n)","b2e21739":"media_cols = [\n    'Q39_Part_1', 'Q39_Part_2', 'Q39_Part_3', 'Q39_Part_4', 'Q39_Part_5', 'Q39_Part_6', 'Q39_Part_7', \n    'Q39_Part_8', 'Q39_Part_9', 'Q39_Part_10', 'Q39_Part_11', 'Q39_OTHER'\n]\n\ndf = data.loc[1:, [\"Q2\"] + media_cols]\n\nmedia = [\n    \"Twitter\", \"Email newsletters\", \"Reddit\", \"Kaggle\", \"Course Forums\", \"YouTube\", \"Podcasts\", \"Blogs\",\n    \"Journal Publications\", \"Slack Communities\", \"None\", \"Other\"\n]\ndf.columns = [\"gender\"] + media\n\ndf[df[media].notnull()] = 1\ndf = df.fillna(0)\n\ndf[\"gender\"] = pd.Categorical(\n    df[\"gender\"],\n    categories = categories,\n    ordered = True\n)\n    \ndf = df.groupby([\"gender\"]).sum()\n    \ndf = df.apply(lambda x: x\/x.sum(), axis = 1)\ndf.columns.name = \"media\"","cb0ec9ea":"plt.figure(figsize = (10, 8))\nfor i, c in enumerate(categories):\n    (markerline, stemlines, baseline) = plt.stem(\n        df.columns,\n        df.loc[c]\n    )\n    plt.setp(\n        markerline, \n        marker = 'o', \n        markersize = 15,\n        markeredgewidth = 2, \n        color = palette[i]\n    )\n    plt.setp(stemlines, color = \"gold\")\n    plt.setp(baseline, visible = False)\n    plt.tick_params(labelsize = 12)\n    plt.xticks(rotation = 80)\n    plt.ylim(-0.05, 0.3)\n    \n    plt.xlabel(\"Media Sources\")\n    plt.ylabel(\"Number of Kagglers (Normalized)\")\n    \n    plt.legend(categories)\n    plt.title(\"Gender distribution over media\")\n    \nplt.tight_layout()","592b9dc4":"content(\n    \"We observe a regular pattern across the gender groups. They cluster together for each category. This \" +\n    \"demonstrates how similar gender groups are in the choices they make. Most learn new things directly \" +\n    \"on Kaggle. YouTube and Blogs are other popular options.\"\n)","a3c2a17a":"content(\n    \"Let's ask ourselves the same question we started off with - How does gender influence the decisions \" + \n    \"the Data Science and Machine Learning community makes? What do you think is the answer? I believe \" +\n    \"that gender does affect the choice people make, but only a little bit. That little bit makes all the \" +\n    \"difference in defining who we are. But the big picture is that we all are the same. :D\" + \"\\n\\n\" +\n    \"If you like my work or if you learned something new, consider giving me an UPVOTE. Thanks a lot.\"\n)","d26d7c8c":"content(\n    \"Credits - Sharlto Cope and Harveen Singh Chadha. I learnt quite a lot from their notebooks.\"\n)","010955c0":"# What programming language would you recommend an aspiring data scientist to learn first?","a8f577e3":"# Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis? (Select all that apply)","6bec88ef":"# Who\/what are your favorite media sources that report on data science topics? (Select all that apply)","b7d1c2f7":"# Which categories of computer vision methods do you use on a regular basis? (Select all that apply)","20d07952":"# Conclusion","bf992345":"# What data visualization libraries or tools do you use on a regular basis? (Select all that apply)","28234a8e":"# Which of the following hosted notebook products do you use on a regular basis? (Select all that apply)","d80fcfb4":"# Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years? (Select all that apply)","3085119e":"# Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years? (Select all that apply)","baee2b31":"# Which types of specialized hardware do you use on a regular basis? (Select all that apply)","961d9e06":"# Do you use any tools to help manage machine learning experiments? (Select all that apply)","41a3cd7b":"# Approximately how many times have you used a TPU (tensor processing unit)?","aab6f0ee":"# Approximately how much money have you (or your team) spent on machine learning and\/or cloud computing services at home (or at work) in the past 5 years (approximate USD)?","18d4870c":"# Who are they?","a5267260":"# In which country do you currently reside?","9b43e2c4":"# Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? (Select all that apply)","03415004":"# Which of the following integrated development environments (IDE's) do you use on a regular basis? (Select all that apply)","5be7a394":"# Which of the following natural language processing (NLP) methods do you use on a regular basis? (Select all that apply)","5ff1aeee":"# Which of the following business intelligence tools do you use most often?","3a63e816":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/4\/48\/Gay_Pride_Flag.svg\/1024px-Gay_Pride_Flag.svg.png\" alt=\"Drawing\" style=\"width: 1500px; height:150px\"\/>","497ca55b":"# Do you use any of the following cloud computing products on a regular basis? (Select all that apply)","5c9099bb":"# What is the primary tool that you use at work or school to analyze data? (Include text response)","acd84e7a":"# Select the title most similar to your current role (or most recent title if retired):","f8ffa29e":"# What is your gender?","9539919b":"# For how many years have you been writing code and\/or programming?","a6a3d122":"# What programming languages do you use on a regular basis? (Select all that apply)","619a9d8b":"# Does your current employer incorporate machine learning methods into their business?","76e927f8":"# In the next 2 years, do you hope to become more familiar with any of these specific machine learning products? (Select all that apply)","b3a0258a":"# On which platforms have you begun or completed data science courses? (Select all that apply)","265155ab":"# Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (Select all that apply)","dc488508":"# Which of the following ML algorithms do you use on a regular basis? (Select all that apply)","98daae7e":"# Which of the following cloud computing platforms do you use on a regular basis? (Select all that apply)","07325afe":"# What is your current yearly compensation (approximate USD)?","7f1aaa23":"# What type of computing platform do you use most often for your data science projects?","b8edf73a":"# Which of the following machine learning frameworks do you use on a regular basis? (Select all that apply)","2de644c4":"# Do you use any of the following machine learning products on a regular basis? (Select all that apply)","2d9cd6b0":"# What is the size of the company where you are employed?","fc45977b":"# What is your age (# years)?","43542a74":"# Which of the following big data products (relational database, data warehouse, data lake, or similar) do you use most often?","7a86f310":"# Which of the following business intelligence tools do you use on a regular basis? (Select all that apply)","139487a1":"# Approximately how many individuals are responsible for data science workloads at your place of business?","6fe3480e":"# Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis? (Select all that apply)","49c60385":"# Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years? (Select all that apply)","173ce830":"# Select any activities that make up an important part of your role at work: (Select all that apply)","2a1834cb":"# For how many years have you used machine learning methods?","11377468":"# Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?","adbc0227":"# In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments? (Select all that apply)","3db06df7":"# What is the highest level of formal education that you have attained or plan to attain within the next 2 years?","c20b90c1":"# In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products? (Select all that apply)","930863ab":"# Where do you publicly share or deploy your data analysis or machine learning applications? (Select all that apply)"}}