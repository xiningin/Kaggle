{"cell_type":{"f1ec7505":"code","3a73c4b4":"code","ad61bf4a":"code","c90ae1af":"code","1fe376c1":"code","225e93b6":"code","50160990":"code","5105f7bb":"code","485d0c27":"code","1b6d5d8a":"code","37f41473":"code","81c0fd32":"code","773d1ffb":"code","d1e740d6":"code","ddb9436b":"code","072e0089":"code","9a5e8e47":"code","6676b3a0":"code","99fedc9b":"code","0885ccc2":"code","04e4a07d":"code","e2120c1d":"code","f3e40c49":"code","890a3a90":"code","3765bbbb":"code","9b83df26":"code","a205acb7":"code","508c8498":"code","fe38982a":"code","e4bef10f":"code","43d28e30":"code","b637a036":"code","6694c31f":"code","a057588d":"code","f729c203":"code","3b092cfe":"code","3adba2bd":"code","2e043171":"code","33381960":"code","629d3acf":"code","5411d5c7":"code","7fbe4f01":"code","3d994d76":"code","856b9451":"code","84562b15":"code","736fcbfd":"code","9690824f":"code","4a5e7384":"code","e2c04dd7":"code","c050871c":"code","18c8debd":"code","3492b000":"code","4af88189":"code","f96b3258":"code","b0a0d6a8":"code","390bd314":"code","1b131dd4":"code","f20f5657":"code","eba3f439":"code","cc5a7715":"code","f579bae8":"code","3a982aac":"code","cfcdd4e0":"code","4bd46efb":"markdown","f3e5c391":"markdown","6b3ffe98":"markdown","bfed3a90":"markdown","82322eef":"markdown","39ebdcfe":"markdown","940a20b9":"markdown","6663c8b9":"markdown","28cc3b6b":"markdown","bb568524":"markdown","e2272077":"markdown","41d4fe28":"markdown","bf4df4a5":"markdown","e593e2ca":"markdown","1fc56078":"markdown","e87fea02":"markdown","38b5eb77":"markdown","df431440":"markdown","43881b1e":"markdown","91c8c70b":"markdown","6c0f5438":"markdown","cbf83f55":"markdown","20fed758":"markdown","c73b554e":"markdown","8dfdc9c7":"markdown","88fd5551":"markdown","37aad673":"markdown","a1ff7c1f":"markdown","b9a951af":"markdown","c346e102":"markdown","e399b258":"markdown","35376320":"markdown","79a045bd":"markdown","16bb09a6":"markdown","30a97034":"markdown","0ecfe5ec":"markdown","031fa587":"markdown","f94fe7dd":"markdown","c342358f":"markdown","86718cdd":"markdown","a9dbdfa5":"markdown","3ed3bc93":"markdown","1e047645":"markdown","6eb1b64b":"markdown","d45da273":"markdown"},"source":{"f1ec7505":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a73c4b4":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","ad61bf4a":"bikeSharing = pd.read_csv('\/kaggle\/input\/boombikedata\/day.csv')\nbikeSharing.head()","c90ae1af":"bikeSharing.shape","1fe376c1":"bikeSharing.info()","225e93b6":"# percentage of missing values in each column\nround(100*(bikeSharing.isnull().sum()\/len(bikeSharing)), 2).sort_values(ascending=False)","50160990":"bikeSharing.describe()","5105f7bb":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n# setting the style for seaborn plots\n%matplotlib inline","485d0c27":"#Dropping instant and dteday since they dont have significance with data\nbikeSharing.drop(['instant','dteday','casual','registered'],inplace=True,axis=1)\nbikeSharing.head()","1b6d5d8a":"bikeSharing['season'] = bikeSharing['season'].map({1:'spring',2:'summer', 3:'fall', 4:'winter'})\nbikeSharing['mnth'] = bikeSharing['mnth'].map({1:'Jan',2:'Feb', 3:'Mar', 4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sept',10:'Oct',11:'Nov',12:'Dec'})\nbikeSharing['weekday'] = bikeSharing['weekday'].map({0:'Sunday',1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday'})\nbikeSharing['weathersit'] = bikeSharing['weathersit'].map({1:'Clear-Partlycloudy',2:'Mist-Cloudy',3:'LightSnow-lightRain-Thunderstorm',4:'HeavyRain-IcePallets-Thunderstorm'})\n\nbikeSharing.head()\n\n","37f41473":"bikeSharing.info()","81c0fd32":"def boxplot_cat_var(cat_var,target):\n    plt.figure(figsize=(20, 12))\n    for i in range(0,len(cat_var)):\n        plt.subplot(2,3,i+1)\n        sns.boxplot(x = cat_var[i], y = target, data = bikeSharing)\n    plt.show()\n\ncat_var =['season','yr','holiday','weekday','workingday','weathersit']\nboxplot_cat_var(cat_var,'cnt')","773d1ffb":"sns.boxplot(x = 'mnth', y = 'cnt', data = bikeSharing)","d1e740d6":"# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n# Applying the function to the bikeSharing\n\nbikeSharing = dummies('season',bikeSharing)\nbikeSharing = dummies('mnth',bikeSharing)\nbikeSharing = dummies('weekday',bikeSharing)\nbikeSharing = dummies('weathersit',bikeSharing)\nbikeSharing.head()","ddb9436b":"bikeSharing.shape","072e0089":"bikeSharing.describe()","9a5e8e47":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\n\ndf_train, df_test = train_test_split(bikeSharing, train_size = 0.7, test_size = 0.3, random_state = 100)","6676b3a0":"df_train.shape","99fedc9b":"df_test.shape","0885ccc2":"# we can see patterns between variables \nsns.pairplot(df_train[[ 'temp','atemp', 'hum', 'windspeed','cnt']],diag_kind='kde')\nplt.show()","04e4a07d":"#Correlation using heatmap\nplt.figure(figsize = (30, 25))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","e2120c1d":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","f3e40c49":"# Apply scaler() to all the columns except 'dummy' variables\nnum_vars = ['temp','atemp', 'hum', 'windspeed', 'cnt']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n\ndf_train.head()","890a3a90":"df_train.describe()","3765bbbb":"y_train = df_train.pop('cnt')\nX_train = df_train","9b83df26":"#importing libs for RFE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","a205acb7":"# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 15)\nrfe = rfe.fit(X_train, y_train)","508c8498":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","fe38982a":"X_train.columns[rfe.support_]","e4bef10f":"X_train.columns[~rfe.support_]","43d28e30":"X_train_rfe = X_train[X_train.columns[rfe.support_]]\nX_train_rfe.head()","b637a036":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)\n\n","6694c31f":"X_train_new = build_model(X_train_rfe,y_train)","a057588d":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","f729c203":"X_train_new=X_train_new.drop([\"Jan\"], axis = 1)","3b092cfe":"X_train_new = build_model(X_train_new,y_train)","3adba2bd":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","2e043171":"X_train_new=X_train_new.drop([\"holiday\"], axis = 1)","33381960":"X_train_new = build_model(X_train_new,y_train)","629d3acf":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","5411d5c7":"X_train_new=X_train_new.drop([\"spring\"], axis = 1)","7fbe4f01":"X_train_new = build_model(X_train_new,y_train)","3d994d76":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","856b9451":"X_train_new=X_train_new.drop([\"Jul\"], axis = 1)","84562b15":"X_train_new = build_model(X_train_new,y_train)","736fcbfd":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","9690824f":"#Correlation using heatmap\nplt.figure(figsize = (30, 25))\nsns.heatmap(X_train_new.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","4a5e7384":"X_train_new=X_train_new.drop([\"workingday\"], axis = 1)","e2c04dd7":"X_train_new = build_model(X_train_new,y_train)","c050871c":"X_train_new=X_train_new.drop([\"Saturday\"], axis = 1)","18c8debd":"X_train_new = build_model(X_train_new,y_train)","3492b000":"#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","4af88189":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_cnt= lm.predict(X_train_new)","f96b3258":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_cnt), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)   ","b0a0d6a8":"#Scaling the test set\nnum_vars = ['temp','atemp', 'hum', 'windspeed', 'cnt']\ndf_test[num_vars] = scaler.fit_transform(df_test[num_vars])","390bd314":"#Dividing into X and y\ny_test = df_test.pop('cnt')\nX_test = df_test","1b131dd4":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","f20f5657":"# Making predictions\ny_pred = lm.predict(X_test_new)","eba3f439":"from sklearn.metrics import r2_score \nr2=r2_score(y_test, y_pred)\nprint(r2)","cc5a7715":"X_test_new.shape","f579bae8":"# We already have the value of R^2 (calculated in above step)\n# n is number of rows in X\nn = X_test_new.shape[0]\n\n# Number of features (predictors, p) is the shape along axis 1\np = X_test_new.shape[1]\n\n# We find the Adjusted R-squared using the formula\n\nadjusted_r2 = 1-(1-r2)*(n-1)\/(n-p-1)\nadjusted_r2","3a982aac":"#EVALUATION OF THE MODEL\n# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)   ","cfcdd4e0":"print(lm.summary())","4bd46efb":"### Business Goal:\nYou are required to model the demand for shared bikes with the available independent variables. It will be used by the management to understand how exactly the demands vary with different features. They can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations. Further, the model will be a good way for management to understand the demand dynamics of a new market. \n\n- Which variables are significant in predicting the demand for shared bikes.\n- How well those variables describe the bike demands","f3e5c391":"### Adjusted R^2 Value for TEST","6b3ffe98":"### Residual Analysis of Model","bfed3a90":"### Dummy Variables","82322eef":"### Prediction and Evaluation","39ebdcfe":"### Final Results \n- Train R^2 :0.833\n- Train Adjusted R^2 :0.830\n- Test R^2 :0.800\n- Test Adjusted R^2 :0.791\n#### This seems to be a really good model that can very well 'Generalize' various datasets.","940a20b9":"p-vale of `Jan` seems to be higher than the significance value of 0.05, hence dropping it as it is insignificant in presence of other variables.","6663c8b9":"#### Evaluation of test via comparison of y_pred and y_test","28cc3b6b":"## Splitting the Data into Training and Testing Sets","bb568524":"#### The above Pair-Plot tells us that there is a LINEAR RELATION between 'temp','atemp' and 'cnt' , we can see both variables has close values, we will predict with model to remove one variable ","e2272077":"#### MODEL 5","41d4fe28":"#### Visualising Categorical Variables\n\nAs we can notice, there are a few categorical variables as well. Let's make a boxplot for some of these variables with target variables to find best target variable.","bf4df4a5":"#### Inspect the various aspects of the bikeSharing dataframe","e593e2ca":"Error terms seem to be approximately normally distributed, so the assumption on the linear modeling seems to be fulfilled.","1fc56078":"### Dividing the testset into X and Y sets for the model building","e87fea02":"### RFE\nRecursive feature elimination","38b5eb77":"#### MODEL 3","df431440":"### Observations \n- Model looks perfect with 9 variables and R-squared- 83.3 , Adj. R-squared- 83\n- VIF less than - 2\n- P values - 0\n- Prob (F-statistic) - almost equal to - 0","43881b1e":"#### MODEL 2","91c8c70b":"#### We can see workingday and Saturday high negative correlation value","6c0f5438":"### Observations:\n#### season: \n- Almost 32% of the bike booking were happening in fall with a median of over 5000 booking (for the period of 2 years). This was followed by summer & winter with 27% & 25% of total booking. This indicates, season can be a good predictor for the dependent variable.\n####  yr: \n- Almost 99% of the bike booking were increased in year with median of close to previus year booking (for the period of 2 years). This indicates, yr can be a good predictor for the dependent variable\n####  weathersit:\n- Almost 67% of the bike booking were happening during \u2018Clear-Partlycloudy with a median of close to 5000 booking (for the period of 2 years). This was followed by Mist-Cloudy with 30% of total booking. This indicates, weathersit does show some trend towards the bike bookings can be a good predictor for the dependent variable.\n####  holiday: \n- Almost 97.6% of the bike booking were happening when it is not a holiday which means this data is clearly biased. This indicates, holiday CANNOT be a good predictor for the dependent variable.\n#### weekday: \n- weekday variable shows very close trend (between 13.5%-14.8% of total booking on all days of the week) having their independent medians between 4000 to 5000 bookings. This variable can have some or no influence towards the predictor. I will let the model decide if this needs to be added or not.\n####  workingday: \n- Almost 69% of the bike booking were happening in \u2018workingday\u2019 with a median of close to 5000 booking (for the period of 2 years). This indicates, workingday can be a good predictor for the dependent variable\n####  mnth: \n- Almost 10% of the bike booking were happening in the months may,jun,jul,aug & sept with a median of over 4000 booking per month. This indicates, mnth has some trend for bookings and can be a good predictor for the dependent variable.","cbf83f55":"- The heatmap clearly shows which all variable are multicollinear in nature, and which variable have high collinearity with the target variable.\n- We will refer this map back-and-forth while building the linear model so as to validate different correlated values along with VIF & p-value, for identifying the correct variable to select\/eliminate from the model.","20fed758":"### Converting categarical variables ","c73b554e":"## Data Preparation and Visualising\n\nLet's now spend some time doing what is arguably the most important step - **understanding the data**.\n- If there is some obvious multicollinearity going on, this is the first place to catch it\n- Here's where you'll also identify if some predictors directly have a strong association with the outcome variable\n\nWe'll visualise our data using `matplotlib` and `seaborn`.","8dfdc9c7":"### Drop  unnessasary variables \n   - instant - index variale, so it doest make any siginficance for model, so we will consider to drop\n   - dteday - year ,month and weekday as separate columns, we can consider to drop\n   - casual,registered = cnt, we will consider to drop casual,registered and treate \"cnt\" as target variable ","88fd5551":"#### We can see P values 0 and VIF less than 2, now we will check for correlation between remaining varibales","37aad673":"#### MODEL 6","a1ff7c1f":"#### Visualising Numeric Variables\n\nLet's make a pairplot of all the numeric variables","b9a951af":"### We can see that the equation of our best fitted line is:\n- cnt= 0.2215+0.2292 *yr+0.5754 * temp-0.1755 *hum-0.1890 *windspeed+0.0909 *summer+0.1391 *winter+0.1034 *sept-0.2320 *LightSnow-lightRain-Thunderstorm-0.0499 *Mist-Cloudy","c346e102":"#### MODEL 4","e399b258":"### Observations:\n- The heatmap clearly shows which all variable are multicollinear in nature, and which variable have high collinearity with the target variable.\n- We will refer this map back-and-forth while building the linear model so as to validate different correlated values along with VIF & p-value, for identifying the correct variable to select\/eliminate from the model.","35376320":"### Dividing into X and Y sets for the model building","79a045bd":"### Hypothesis Testing\n##### Hypothesis testing states that:\n\n- H0:B1=B2=...=Bn=0\n- H1: at least one Bi!=0\n\n- From the final model summary, it is evident that all our coefficients are not equal to zerowhich means We REJECT the NULL HYPOTHESIS\n\n","16bb09a6":"## Bike Sharing Assignment (BoomBikes) Linear Regression Model","30a97034":"### Analysing the above model, the comapny should focus on the following features:\n\n- year: The company should encounter an increase in the number of users when the situation comes back to normal as compared to 2019.\n- season: The company should focus on expanding it's business in the Summer and the Fall season.\n- weather: The users prefer to rent a bike when the weather is pleasant i.e. either clear or cloudy.\n- temp: The users prefer to ride or rent a bike in a moderate temperature.\n\n### Hence when the situation comes back to normal, the company should face an increase in the business as compared to 2019 and should expand it's business with new availing offers or schemes in the season of summer and fall when the weather is pleasant with clear sky and moderate temperature.","0ecfe5ec":"### Rescaling the Features \n\nWe will use MinMax scaling.","031fa587":"#### Building model using statsmodel, for the detailed statistics","f94fe7dd":"- spring has high VIF and p value, so we will consider to drop","c342358f":"### Model Building\n#### Assumptions\n- Linear relationship\n- Multivariate normality\n- No or little multicollinearity\n- No auto-correlation\n- Homoscedasticity","86718cdd":"#### MODEL 1","a9dbdfa5":"- Jul has high P value comparativly, we will consider to drop","3ed3bc93":"#### No null\/NA values identified ","1e047645":"- we can see holiday has high P value , will consider to drop","6eb1b64b":"### Importing and Understanding Data","d45da273":"#### MODEL 7"}}