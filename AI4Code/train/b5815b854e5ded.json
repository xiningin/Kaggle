{"cell_type":{"59b3a894":"code","f9eddc35":"code","262a39f9":"code","1b08da75":"code","a8716780":"code","393ced12":"code","3a1657d8":"code","f1e6cedc":"code","5a9c3bbc":"code","9e5dd326":"code","54d7a43e":"code","f522c386":"code","4b48a7ec":"code","c01d9cc0":"code","fdf3cd8e":"code","5e43338d":"code","3edc7624":"code","8e336959":"code","4933bef7":"code","35a89354":"code","3a6ea099":"code","2c740c5b":"code","21d7b4d0":"code","78cbd5dd":"code","32a574ac":"code","6cce696d":"code","d9aedf41":"code","bd25af8f":"code","e0a7d446":"code","240b3f5b":"code","a2fab874":"code","a61bb7e5":"code","9d4e763a":"code","a51f1f7e":"code","7e87bc9b":"code","79b4a5e7":"code","e143fe90":"code","061a1eb2":"code","5a576bd2":"code","dabd58f6":"code","a9802be4":"code","3c76cd39":"code","cc99ff4c":"code","65bd7f02":"code","320d5b0e":"code","157e565c":"code","4ec05733":"markdown","9727b381":"markdown","d80dc6f2":"markdown","5f1d9f41":"markdown","750b57c7":"markdown","7609e90a":"markdown","abcc9bfe":"markdown","c2a282cf":"markdown","d07f1df6":"markdown","7e6781ea":"markdown","32ac3df2":"markdown","e8ca4e23":"markdown","5135ccb8":"markdown","f649c5cb":"markdown","1970ab7c":"markdown","fb989050":"markdown","b80de6ad":"markdown","9899d97d":"markdown","64131ef8":"markdown","a6ea4a83":"markdown","9735463d":"markdown","54cfb907":"markdown","2b42d761":"markdown","c0b3f4bd":"markdown","337752b7":"markdown","f5af20b0":"markdown"},"source":{"59b3a894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9eddc35":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom keras.preprocessing import text, sequence\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Embedding,LSTM,Dropout,Bidirectional,GRU\nimport tensorflow as tf","262a39f9":"df = pd.read_json(\"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset_v2.json\", lines=True)\ndf.head()","1b08da75":"df.isna().sum() # Checking for NaN values","a8716780":"del df['article_link'] # Deleting this column as it is of no use","393ced12":"df.head()","3a1657d8":"sns.set_style(\"dark\")\nsns.countplot(df.is_sarcastic)","f1e6cedc":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","5a9c3bbc":"def strip_html(text):\n    soup = BeautifulSoup(text, \"html.parser\")\n    return soup.get_text()\n\n#Removing the square brackets\ndef remove_between_square_brackets(text):\n    return re.sub('\\[[^]]*\\]', '', text)\n# Removing URL's\ndef remove_between_square_brackets(text):\n    return re.sub(r'http\\S+', '', text)\n#Removing the stopwords from text\ndef remove_stopwords(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            final_text.append(i.strip())\n    return \" \".join(final_text)\n#Removing the noisy text\ndef denoise_text(text):\n    text = strip_html(text)\n    text = remove_between_square_brackets(text)\n    text = remove_stopwords(text)\n    return text\n#Apply function on review column\ndf['headline']=df['headline'].apply(denoise_text)","9e5dd326":"plt.figure(figsize = (20,20)) # Text that is Not Sarcastic\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800).generate(\" \".join(df[df.is_sarcastic == 0].headline))\nplt.imshow(wc , interpolation = 'bilinear')","54d7a43e":"plt.figure(figsize = (20,20)) # Text that is Sarcastic\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800).generate(\" \".join(df[df.is_sarcastic == 1].headline))\nplt.imshow(wc , interpolation = 'bilinear')","f522c386":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntext_len=df[df['is_sarcastic']==1]['headline'].str.len()\nax1.hist(text_len,color='red')\nax1.set_title('Sarcastic text')\ntext_len=df[df['is_sarcastic']==0]['headline'].str.len()\nax2.hist(text_len,color='green')\nax2.set_title('Not Sarcastic text')\nfig.suptitle('Characters in texts')\nplt.show()","4b48a7ec":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\ntext_len=df[df['is_sarcastic']==1]['headline'].str.split().map(lambda x: len(x))\nax1.hist(text_len,color='red')\nax1.set_title('Sarcastic text')\ntext_len=df[df['is_sarcastic']==0]['headline'].str.split().map(lambda x: len(x))\nax2.hist(text_len,color='green')\nax2.set_title('Not Sarcastic text')\nfig.suptitle('Words in texts')\nplt.show()","c01d9cc0":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(20,10))\nword=df[df['is_sarcastic']==1]['headline'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax1,color='red')\nax1.set_title('Sarcastic text')\nword=df[df['is_sarcastic']==0]['headline'].str.split().apply(lambda x : [len(i) for i in x])\nsns.distplot(word.map(lambda x: np.mean(x)),ax=ax2,color='green')\nax2.set_title('Not Sarcastic text')\nfig.suptitle('Average word length in each text')","fdf3cd8e":"words = []\nfor i in df.headline.values:\n    words.append(i.split())\nwords[:5]","5e43338d":"import gensim\n#Dimension of vectors we are generating\nEMBEDDING_DIM = 200\n\n#Creating Word Vectors by Word2Vec Method (takes time...)\nw2v_model = gensim.models.Word2Vec(sentences = words , size=EMBEDDING_DIM , window = 5 , min_count = 1)","3edc7624":"#vocab size\nlen(w2v_model.wv.vocab)\n#We have now represented each of 38071 words by a 100dim vector.","8e336959":"tokenizer = text.Tokenizer(num_words=35000)\ntokenizer.fit_on_texts(words)\ntokenized_train = tokenizer.texts_to_sequences(words)\nx = sequence.pad_sequences(tokenized_train, maxlen = 20)","4933bef7":"# Adding 1 because of reserved 0 index\n# Embedding Layer creates one more vector for \"UNKNOWN\" words, or padded words (0s). This Vector is filled with zeros.\n# Thus our vocab size inceeases by 1\nvocab_size = len(tokenizer.word_index) + 1","35a89354":"# Function to create weight matrix from word2vec gensim model\ndef get_weight_matrix(model, vocab):\n    # total vocabulary size plus 0 for unknown words\n    vocab_size = len(vocab) + 1\n    # define weight matrix dimensions with all 0\n    weight_matrix = np.zeros((vocab_size, EMBEDDING_DIM))\n    # step vocab, store vectors using the Tokenizer's integer mapping\n    for word, i in vocab.items():\n        weight_matrix[i] = model[word]\n    return weight_matrix","3a6ea099":"#Getting embedding vectors from word2vec and usings it as weights of non-trainable keras embedding layer\nembedding_vectors = get_weight_matrix(w2v_model, tokenizer.word_index)","2c740c5b":"#Defining Neural Network\nmodel = Sequential()\n#Non-trainable embeddidng layer\nmodel.add(Embedding(vocab_size, output_dim=EMBEDDING_DIM, weights=[embedding_vectors], input_length=20, trainable=True))\n#LSTM \nmodel.add(Bidirectional(LSTM(units=128 , recurrent_dropout = 0.3 , dropout = 0.3,return_sequences = True)))\nmodel.add(Bidirectional(GRU(units=32 , recurrent_dropout = 0.1 , dropout = 0.1)))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer=keras.optimizers.Adam(lr = 0.01), loss='binary_crossentropy', metrics=['acc'])\n\ndel embedding_vectors","21d7b4d0":"model.summary()","78cbd5dd":"x_train, x_test, y_train, y_test = train_test_split(x, df.is_sarcastic , test_size = 0.3 , random_state = 0) ","32a574ac":"history = model.fit(x_train, y_train, batch_size = 128 , validation_data = (x_test,y_test) , epochs = 3)","6cce696d":"print(\"Accuracy of the model on Training Data is - \" , model.evaluate(x_train,y_train)[1]*100)\nprint(\"Accuracy of the model on Testing Data is - \" , model.evaluate(x_test,y_test)[1]*100)","d9aedf41":"epochs = [i for i in range(3)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['acc']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_acc']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Testing Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'go-' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'ro-' , label = 'Testing Loss')\nax[1].set_title('Training & Testing Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","bd25af8f":"pred = model.predict_classes(x_test)\npred[:5]","e0a7d446":"cm = confusion_matrix(y_test,pred)\ncm","240b3f5b":"cm = pd.DataFrame(cm , index = ['Not Sarcastic','Sarcastic'] , columns = ['Not Sarcastic','Sarcastic'])\nplt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='' , xticklabels = ['Not Sarcastic','Sarcastic'] , yticklabels = ['Not Sarcastic','Sarcastic'])","a2fab874":"x_train,x_test,y_train,y_test = train_test_split(df.headline,df.is_sarcastic, test_size = 0.3 , random_state = 0)","a61bb7e5":"max_features = 35000\nmaxlen = 200","9d4e763a":"tokenizer = text.Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(x_train)\ntokenized_train = tokenizer.texts_to_sequences(x_train)\nx_train = sequence.pad_sequences(tokenized_train, maxlen=maxlen)","a51f1f7e":"tokenized_test = tokenizer.texts_to_sequences(x_test)\nX_test = sequence.pad_sequences(tokenized_test, maxlen=maxlen)","7e87bc9b":"EMBEDDING_FILE = '..\/input\/glove-twitter\/glove.twitter.27B.200d.txt'","79b4a5e7":"def get_coefs(word, *arr): \n    return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE))","e143fe90":"all_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\n#change below line if computing normal stats is too slow\nembedding_matrix = embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector","061a1eb2":"batch_size = 128\nepochs = 2\nembed_size = 200","5a576bd2":"#Defining Neural Network\nmodel = Sequential()\n#Non-trainable embeddidng layer\nmodel.add(Embedding(nb_words, output_dim=embed_size, weights=[embedding_matrix], input_length=200, trainable=True))\n#LSTM \nmodel.add(Bidirectional(LSTM(units=128 , recurrent_dropout = 0.5 , dropout = 0.5)))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer=keras.optimizers.Adam(lr = 0.01), loss='binary_crossentropy', metrics=['acc'])","dabd58f6":"model.summary()","a9802be4":"history = model.fit(x_train, y_train, batch_size = batch_size , validation_data = (X_test,y_test) , epochs = 2)","3c76cd39":"print(\"Accuracy of the model on Testing Data is - \" , model.evaluate(X_test,y_test)[1]*100)","cc99ff4c":"pred = model.predict_classes(X_test)\npred[:5]","65bd7f02":"print(classification_report(y_test, pred, target_names = ['Not Sarcastic','Sarcastic']))","320d5b0e":"cm = confusion_matrix(y_test,pred)\ncm","157e565c":"cm = pd.DataFrame(cm , index = ['Not Sarcastic','Sarcastic'] , columns = ['Not Sarcastic','Sarcastic'])\nplt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='' , xticklabels = ['Not Sarcastic','Sarcastic'] , yticklabels = ['Not Sarcastic','Sarcastic'])","4ec05733":"**Converting text to format acceptable by gensim**","9727b381":"# LOADING THE DATASET","d80dc6f2":"**THE ACCURACY IMPROVED FROM 79% TO 83%**","5f1d9f41":"# Introduction to GloVe\n**GloVe method is built on an important idea, You can derive semantic relationships between words from the co-occurrence matrix. Given a corpus having V words, the co-occurrence matrix X will be a V x V matrix, where the i th row and j th column of X, X_ij denotes how many times word i has co-occurred with word j. An example co-occurrence matrix might look as follows.**\n![image.png](attachment:image.png)\n**The co-occurrence matrix for the sentence \u201cthe cat sat on the mat\u201d with a window size of 1. As you probably noticed it is a symmetric matrix. How do we get a metric that measures semantic similarity between words from this? For that, you will need three words at a time. Let me concretely lay down this statement.**","750b57c7":"**WORDCLOUD FOR SARCASTIC TEXT (LABEL - 1)**","7609e90a":"**WORDCLOUD FOR TEXT THAT IS NOT SARCASTIC (LABEL - 0)**","abcc9bfe":"![image.png](attachment:image.png)\n**The behavior of P_ik\/P_jk for various words Consider the entity P_ik\/P_jk where P_ik = X_ik\/X_i Here P_ik denotes the probability of seeing word i and k together, which is computed by dividing the number of times i and k appeared together (X_ik) by the total number of times word i appeared in the corpus (X_i). You can see that given two words, i.e. ice and steam, if the third word k (also called the \u201cprobe word\u201d), is very similar to ice but irrelevant to steam (e.g. k=solid), P_ik\/P_jk will be very high (>1), is very similar to steam but irrelevant to ice (e.g. k=gas), P_ik\/P_jk will be very small (<1), is related or unrelated to either words, then P_ik\/P_jk will be close to 1 So, if we can find a way to incorporate P_ik\/P_jk to computing word vectors we will be achieving the goal of using global statistics when learning word vectors.**","c2a282cf":"# ANALYSIS AFTER TRAINING OF WORD2VEC MODEL ","d07f1df6":"**SEEMS LIKE THE MODEL IS OVERFITTING AND NOT PERFORMING WELL ON THE TEST DATA**","7e6781ea":"# Why do we need them?\n**Consider the following similar sentences: Have a good day and Have a great day. They hardly have different meaning. If we construct an exhaustive vocabulary (let\u2019s call it V), it would have V = {Have, a, good, great, day}.\nNow, let us create a one-hot encoded vector for each of these words in V. Length of our one-hot encoded vector would be equal to the size of V (=5). We would have a vector of zeros except for the element at the index representing the corresponding word in the vocabulary. That particular element would be one. The encodings below would explain this better.\nHave = [1,0,0,0,0] ; a=[1,0,0,0,0] ; good=[0,0,1,0,0] ; great=[0,0,0,1,0] ; day=[0,0,0,0,1] (represents transpose)\nIf we try to visualize these encodings, we can think of a 5 dimensional space, where each word occupies one of the dimensions and has nothing to do with the rest (no projection along the other dimensions). This means \u2018good\u2019 and \u2018great\u2019 are as different as \u2018day\u2019 and \u2018have\u2019, which is not true.**\n**Our objective is to have words with similar context occupy close spatial positions. Mathematically, the cosine of the angle between such vectors should be close to 1, i.e. angle close to 0.**\n![image.png](attachment:image.png)\n**Here comes the idea of generating distributed representations. Intuitively, we introduce some dependence of one word on the other words. The words in context of this word would get a greater share of this dependence. In one hot encoding representations, all the words are independent of each other, as mentioned earlier.**\n\n**Source Credits : https:\/\/towardsdatascience.com\/introduction-to-word-embedding-and-word2vec-652d0c2060fa **","32ac3df2":"# ANALYSIS AFTER TRAINING OF GLOVE EMBEDDINGS MODEL","e8ca4e23":"# DATA VISUALIZATION AND PREPROCESSING","5135ccb8":"**Number of words in each text**","f649c5cb":"# OVERVIEW OF DATASET\n**Past studies in Sarcasm Detection mostly make use of Twitter datasets collected using hashtag based supervision but such datasets are noisy in terms of labels and language. Furthermore, many tweets are replies to other tweets and detecting sarcasm in these requires the availability of contextual tweets.**\n\n**To overcome the limitations related to noise in Twitter datasets, this News Headlines dataset for Sarcasm Detection is collected from two news website. TheOnion aims at producing sarcastic versions of current events and we collected all the headlines from News in Brief and News in Photos categories (which are sarcastic). We collect real (and non-sarcastic) news headlines from HuffPost.**\n\n**The dataset consists about 28000 text data points where each data category belongs to 2 category - Sarcastic or Not Sarcastic**\n\n**We will use two models for making predictions - Word2Vec and GloVe Embeddings. We will then compare their results and see which performs better**\n![image.png](attachment:image.png)","1970ab7c":"# TRAINING WORD2VEC MODEL","fb989050":"# TRAINING GLOVE EMBEDDINGS MODEL","b80de6ad":"**SO, WE CAN SEE THAT THE DATASET IS BALANCED**","9899d97d":"**BASIC MODEL PARAMETERS**","64131ef8":"**Tokenizing Text -> Repsesenting each word by a number**\n\n**Mapping of orginal word to number is preserved in word_index property of tokenizer**\n\n**Tokenized applies basic processing like changing it to lower case, explicitely setting that as False**\n\n**Lets keep all news to 200, add padding to news with less than 200 words and truncating long ones**","a6ea4a83":"# LOADING THE NECESSARY LIBRARIES","9735463d":"**Number of characters in texts**","54cfb907":"**WHAT ARE STOPWORDS?**\n\n**Stopwords are the English words which does not add much meaning to a sentence. They can safely be ignored without sacrificing the meaning of the sentence. For example, the words like the, he, have etc. Such words are already captured this in corpus named corpus. We first download it to our python environment.**","2b42d761":"**Average word length in a text**","c0b3f4bd":"**PLS UPVOTE THIS NOTEBOOK IF YOU LIKE IT. THANKS FOR YOUR TIME!**","337752b7":"**BASIC DATA CLEANING**","f5af20b0":"# Introduction to Word Embedding and Word2Vec\n**Word embedding is one of the most popular representation of document vocabulary. It is capable of capturing context of a word in a document, semantic and syntactic similarity, relation with other words, etc.\nWhat are word embeddings exactly? Loosely speaking, they are vector representations of a particular word. Having said this, what follows is how do we generate them? More importantly, how do they capture the context?\nWord2Vec is one of the most popular technique to learn word embeddings using shallow neural network. It was developed by Tomas Mikolov in 2013 at Google.**"}}