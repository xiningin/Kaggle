{"cell_type":{"2cd886fc":"code","ddd39add":"code","34d91d98":"code","9b2bf80f":"code","4a674aeb":"code","72f57544":"code","08c0ad2e":"code","2fa124f1":"code","64811d4e":"code","8dfa49bf":"code","a95f2a73":"code","5e2a2245":"code","2685e08d":"code","69dfd93c":"code","e3b2002e":"code","9639afd1":"code","f2d7835d":"code","49d72e8b":"code","c136d3c0":"code","f1a1c692":"code","84dc3417":"code","222e0ff4":"code","2ef412f0":"code","df4355db":"code","e4906f4d":"code","058a73bf":"code","14344493":"code","06105023":"code","3de16c6a":"code","9ccd7a6d":"code","fca7cda5":"code","65eb8243":"code","ef812cf8":"code","4652f5a6":"code","518cf5d5":"code","d746360e":"code","23bd1c5a":"code","deb33da2":"code","7f012a50":"code","e7b9180c":"code","21070d1b":"code","de3e58ec":"code","7cd191e6":"code","29f8787b":"code","e15b534c":"code","25e02820":"code","8397f50c":"code","2113cde1":"code","2443f937":"code","d4270df8":"code","7eabe228":"code","3127f319":"code","a91870ac":"code","24ce50b5":"code","232b9a98":"code","a09c6c3a":"code","611270f9":"code","76ba8595":"code","86d68ca0":"code","ac7b21c0":"code","fd0d7231":"code","e053e0c1":"code","05c93b1c":"code","e6db82c4":"code","c56640e4":"code","333f6889":"code","f18effdb":"code","79c5d59e":"code","86942683":"code","c1a1f4eb":"code","55fc66bc":"code","7b1652d0":"code","97d41114":"code","a1d537d2":"code","ad85fd34":"code","2011d495":"code","eae28f70":"code","f1f63486":"code","31a20aa1":"code","e9f687ac":"code","b89c1ada":"code","f335b69f":"code","6e9432f5":"code","280c8932":"code","30ec9058":"code","3ffbfe79":"code","2fdce026":"code","3d4a1494":"code","27bf5a32":"code","93045ea3":"code","09e6c405":"code","4f80d31f":"code","bbd3e42f":"code","6d417515":"code","2a230382":"code","526bfe47":"code","29c2a279":"code","0b0fc8a2":"code","3a08704c":"code","ba2f4a62":"code","3898336f":"code","e7261997":"code","ea447041":"code","467e690e":"code","b1c2123b":"code","45701a63":"code","cfb7fe7d":"code","3f4fa186":"code","3a8f3214":"code","9b59260f":"code","4fc60c4f":"code","fc019531":"code","1b10d27b":"code","30731640":"code","a22104f7":"code","bf036aca":"code","81be4602":"code","7e19920d":"code","268f263c":"code","8f181f68":"code","a5125e7e":"code","97ac3074":"code","e784d709":"code","9a34e38d":"code","7558b0cc":"code","dceff413":"code","51cebb49":"code","10ef26c5":"code","b62d012c":"code","1ca86e53":"code","eba0e09d":"code","b2beb98b":"markdown","e44d9690":"markdown","999252b3":"markdown","5800ee43":"markdown","0c76dbc9":"markdown","e14b42b9":"markdown","64879a6c":"markdown","d3cda902":"markdown","b0ab928b":"markdown","5f85e615":"markdown"},"source":{"2cd886fc":"# import necessary Libraries\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","ddd39add":"movies_meta=pd.read_csv(\"..\/input\/imdb-5000-movie-dataset\/movie_metadata.csv\")","34d91d98":"movies_meta.head()","9b2bf80f":"movies_meta.shape","4a674aeb":"movies_meta.columns","72f57544":"# Plot a graph which showing the no of movies release in a specific year\nmovies_meta.title_year.value_counts(dropna=False).sort_index().plot(kind=\"barh\",figsize=(15,16))\nplt.show()","08c0ad2e":"# Select these columns for data Preprocessing\nmovies_meta=movies_meta.loc[:,['director_name','actor_1_name','actor_2_name','actor_3_name','genres','movie_title']]","2fa124f1":"movies_meta.head()","64811d4e":"# Replace Nan values to \"unknown\" in these columns\nmovies_meta['actor_1_name']=movies_meta['actor_1_name'].replace(np.nan,\"unknown\")\nmovies_meta['actor_2_name']=movies_meta['actor_2_name'].replace(np.nan,\"unknown\")\nmovies_meta['actor_3_name']=movies_meta['actor_3_name'].replace(np.nan,\"unknown\")\nmovies_meta['director_name']=movies_meta['director_name'].replace(np.nan,\"unknown\")","8dfa49bf":"# Split \"genres\" column values by \" \"\nmovies_meta['genres'] = movies_meta['genres'].str.replace('|', ' ')","a95f2a73":"# Lower the values of \" movies_title \" column\nmovies_meta['movie_title']=movies_meta['movie_title'].str.lower()","5e2a2245":"# null terminating char at the end\nmovies_meta['movie_title'][1]","2685e08d":"# removing the null terminating char at the end\nmovies_meta['movie_title'] = movies_meta['movie_title'].apply(lambda x : x[:-1])","69dfd93c":"movies_meta[\"movie_title\"][1]","e3b2002e":"# Read Datasets\ncredit_data=pd.read_csv(\"..\/input\/the-movies-dataset\/credits.csv\")","9639afd1":"credit_data.head()","f2d7835d":"credit_data.info()","49d72e8b":"# Read Meta dataset\nmeta=pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\")","c136d3c0":"meta.head()","f1a1c692":"# Extract years from \" release_date \"\nmeta[\"release_date\"]=pd.to_datetime(meta[\"release_date\"],errors=\"coerce\")\nmeta['year'] = meta['release_date'].dt.year\nmeta[\"year\"].value_counts().sort_index()","84dc3417":"# In meta dataset Extract 'genres','id','title','year' of 2017 movies\nnew_meta=meta.loc[meta.year==2017,['genres','id','title','year']]\nnew_meta.head()","222e0ff4":"new_meta.info()","2ef412f0":"new_meta.shape","df4355db":"# Convert Id column datatype to int\nnew_meta[\"id\"]=new_meta[\"id\"].astype(int)\n","e4906f4d":"# merge modified meta data and credit data on id column\ndata = pd.merge(new_meta, credit_data, on='id')\ndata.head()","058a73bf":"pd.set_option('display.max_colwidth', 75)\n","14344493":"data[\"genres\"].dtypes","06105023":"import ast\ndata[\"genres\"]=data[\"genres\"].map(lambda x : ast.literal_eval(x))\ndata[\"cast\"]=data[\"cast\"].map(lambda x : ast.literal_eval(x))\ndata[\"crew\"]=data[\"crew\"].map(lambda x : ast.literal_eval(x))","3de16c6a":"data[\"genres\"].dtypes","9ccd7a6d":"# Create a function which convert to a list of genres\ndef make_genresList(x):\n    gen = []\n    st = \" \"\n    for i in x:\n        if i.get('name') == 'Science Fiction':\n            scifi = 'Sci-Fi'\n            gen.append(scifi)\n        else:\n            gen.append(i.get('name'))\n    if gen == []:\n        return np.NaN\n    else:\n        return (st.join(gen))","fca7cda5":"data['genres_list'] = data['genres'].map(lambda x: make_genresList(x))\ndata[\"genres_list\"]","65eb8243":"# Create a function which extract first actor from \"cast\" column\ndef get_actor1(x):\n    casts=[]\n    for i in x:\n        casts.append(i.get(\"name\"))\n        if casts==[]:\n            return np.Nan\n        else:\n            return (casts[0])","ef812cf8":"data['actor_1_name'] = data['cast'].map(lambda x: get_actor1(x))\ndata[\"actor_1_name\"]","4652f5a6":"# Create a function which extract second actor from \"cast\" column\ndef get_actor2(x):\n    casts = []\n    for i in x:\n        casts.append(i.get('name'))\n    if casts == [] or len(casts)<=1:\n        return np.NaN\n    else:\n        return (casts[1])","518cf5d5":"data['actor_2_name'] = data['cast'].map(lambda x: get_actor2(x))\ndata[\"actor_2_name\"]","d746360e":"# Create a function which extract third actor from \"cast\" column\ndef get_actor3(x):\n    casts = []\n    for i in x:\n        casts.append(i.get('name'))\n    if casts == [] or len(casts)<=2:\n        return np.NaN\n    else:\n        return (casts[2])","23bd1c5a":"data['actor_3_name'] = data['cast'].map(lambda x: get_actor3(x))\ndata[\"actor_3_name\"]","deb33da2":"# Create a function which extract Director name from \"crew\" column\ndef get_directors(x):\n    dt = []\n    st = \" \"\n    for i in x:\n        if i.get('job') == 'Director':\n            dt.append(i.get('name'))\n    if dt == []:\n        return np.NaN\n    else:\n        return (st.join(dt))","7f012a50":"data['director_name'] = data['crew'].map(lambda x: get_directors(x))\ndata['director_name']","e7b9180c":"data.columns","21070d1b":"# Choose only these columns for data preprocessing\nmovies_data=data.loc[:,['actor_1_name','actor_2_name', 'actor_3_name', 'director_name',\"genres_list\",'title']]\nmovies_data.head()","de3e58ec":"# Check null values\nmovies_data.isna().sum()","7cd191e6":"# Drop null values\nmovies_data=movies_data.dropna(how=\"any\")\nmovies_data.isna().sum()","29f8787b":"# Rename columns\nmovies_data=movies_data.rename(columns={'genres_list':'genres'})\nmovies_data=movies_data.rename(columns={'title':'movie_title'})\n","e15b534c":"movies_data[\"movie_title\"]=movies_data[\"movie_title\"].str.lower()","25e02820":"# Make a column which is combination of all the columns of dataset\nmovies_data[\"comb\"]=movies_data[\"actor_1_name\"]+' '+movies_data[\"actor_2_name\"]+\" \"+ movies_data[\"actor_3_name\"]+' ' + movies_data[\"director_name\"]\nmovies_data.head()","8397f50c":"# Read old data which is stored in data.csv\nold_data=pd.read_csv(\"..\/input\/movie-recommendation-data\/data.csv\")\nold_data.head()","2113cde1":"# Also for this Data Make a column which is combination of all the columns of dataset\nold_data['comb'] = old_data['actor_1_name'] + ' ' + old_data['actor_2_name'] + ' '+ old_data['actor_3_name'] + ' '+ old_data['director_name'] +' ' + old_data['genres']\nold_data.head()","2443f937":"# Append  old and new data\nnew_data=old_data.append(movies_data)\nnew_data","d4270df8":"new_data.drop_duplicates(subset =\"movie_title\", keep = 'last', inplace = True)\nnew_data","7eabe228":"new_data.to_csv('new_data.csv',index=False)","3127f319":"# Load data from wikipedia\nlink = \"https:\/\/en.wikipedia.org\/wiki\/List_of_American_films_of_2018\"\ndata1=pd.read_html(link,header=0)[2]\ndata2=pd.read_html(link,header=0)[3]\ndata3=pd.read_html(link,header=0)[4]\ndata4=pd.read_html(link,header=0)[5]","a91870ac":"# append all the data\nall_data=data1.append(data2.append(data3.append(data4,ignore_index=True),ignore_index=True),ignore_index=True)","24ce50b5":"all_data","232b9a98":"# install TMBDV3API for access of movies data \n!pip install tmdbv3api","a09c6c3a":"# Access your api keys from TMBD website\nfrom tmdbv3api import TMDb\nimport json\nimport requests\ntmdb = TMDb()\ntmdb.api_key='26dd2b4303a353ce9da1643a477fbbf4'","611270f9":"from tmdbv3api import Movie\ntmdb_movie = Movie()\ndef get_genre(x):\n    genres = []\n    result = tmdb_movie.search(x)\n    movie_id = result[0].id\n    response = requests.get('https:\/\/api.themoviedb.org\/3\/movie\/{}?api_key={}'.format(movie_id,tmdb.api_key))\n    data_json = response.json()\n    if data_json['genres']:\n        genre_str = \" \" \n        for i in range(0,len(data_json['genres'])):\n            genres.append(data_json['genres'][i]['name'])\n        return genre_str.join(genres)\n    else:\n        np.NaN","76ba8595":"all_data['genres'] = all_data['Title'].map(lambda x: get_genre(str(x)))","86d68ca0":"all_data","ac7b21c0":"all_data=all_data[['Title','Cast and crew','genres']]\nall_data","fd0d7231":"# Create a function which extract Director name from \"Cast and crew\" column\ndef get_director(x):\n    if \" (director)\" in x:\n        return x.split(\" (director)\")[0]\n    elif  \" (directors)\" in x:\n        return x.split(\" (directors)\")[0]\n    else:\n         return x.split(\" (director\/screenplay)\")[0]","e053e0c1":"all_data[\"director_name\"]=all_data['Cast and crew'].map(lambda x : get_director(x))","05c93b1c":"all_data","e6db82c4":"# Create a function which extract first actor from \"cast and crew\" column\ndef get_actor1(x):\n    return ((x.split(\"screenplay); \")[-1]).split(\", \")[0])","c56640e4":"all_data['actor_1_name']=all_data[\"Cast and crew\"].map(lambda x : get_actor1(x))\nall_data","333f6889":"# Create a function which extract second actor from \"cast and crew\" column\ndef get_actor2(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 2:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[1])","f18effdb":"all_data[\"actor_2_name\"]=all_data[\"Cast and crew\"].map(lambda x : get_actor2(x))","79c5d59e":"all_data","86942683":"# Create a function which extract third actor from \"cast and crew\" column\ndef get_actor3(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 3:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[2])","c1a1f4eb":"all_data[\"actor_3_name\"]=all_data[\"Cast and crew\"].map(lambda x : get_actor3(x))\nall_data","55fc66bc":"# Rename title column\nall_data=all_data.rename(columns={'Title': 'movie_title'})","7b1652d0":"# Select these columns for data preprocessing\nall_data=all_data.loc[:,['director_name','actor_1_name','actor_2_name','actor_3_name','genres','movie_title']]\nall_data","97d41114":"all_data[\"actor_2_name\"]=all_data[\"actor_2_name\"].replace(np.nan,\"unknown\")\nall_data[\"actor_3_name\"]=all_data[\"actor_3_name\"].replace(np.nan,\"unknown\")","a1d537d2":"all_data[\"movie_title\"]=all_data[\"movie_title\"].str.lower()","ad85fd34":"all_data","2011d495":"all_data['comb'] = all_data['actor_1_name'] + ' ' + all_data['actor_2_name'] + ' '+ all_data['actor_3_name'] + ' '+ all_data['director_name'] +' ' + all_data['genres']","eae28f70":"all_data","f1f63486":"link = \"https:\/\/en.wikipedia.org\/wiki\/List_of_American_films_of_2019\"\ndf1 = pd.read_html(link, header=0)[2]\ndf2 = pd.read_html(link, header=0)[3]\ndf3 = pd.read_html(link, header=0)[4]\ndf4 = pd.read_html(link, header=0)[5]","31a20aa1":"df = df1.append(df2.append(df3.append(df4,ignore_index=True),ignore_index=True),ignore_index=True)\ndf","e9f687ac":"df['genres'] = df['Title'].map(lambda x: get_genre(str(x)))","b89c1ada":"df_2019 = df[['Title','Cast and crew','genres']]\ndf_2019","f335b69f":"def get_director(x):\n    if \" (director)\" in x:\n        return x.split(\" (director)\")[0]\n    elif \" (directors)\" in x:\n        return x.split(\" (directors)\")[0]\n    else:\n        return x.split(\" (director\/screenplay)\")[0]","6e9432f5":"df_2019['director_name'] = df_2019['Cast and crew'].map(lambda x: get_director(str(x)))","280c8932":"def get_actor1(x):\n    return ((x.split(\"screenplay); \")[-1]).split(\", \")[0])","30ec9058":"df_2019['actor_1_name'] = df_2019['Cast and crew'].map(lambda x: get_actor1(x))","3ffbfe79":"def get_actor2(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 2:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[1])","2fdce026":"df_2019['actor_2_name'] = df_2019['Cast and crew'].map(lambda x: get_actor2(x))","3d4a1494":"def get_actor3(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 3:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[2])","27bf5a32":"df_2019['actor_3_name'] = df_2019['Cast and crew'].map(lambda x: get_actor3(x))","93045ea3":"df_2019 = df_2019.rename(columns={'Title':'movie_title'})","09e6c405":"new_df19 = df_2019.loc[:,['director_name','actor_1_name','actor_2_name','actor_3_name','genres','movie_title']]","4f80d31f":"new_df19['actor_2_name'] = new_df19['actor_2_name'].replace(np.nan, 'unknown')\nnew_df19['actor_3_name'] = new_df19['actor_3_name'].replace(np.nan, 'unknown')","bbd3e42f":"new_df19['movie_title'] = new_df19['movie_title'].str.lower()","6d417515":"new_df19['comb'] = new_df19['actor_1_name'] + ' ' + new_df19['actor_2_name'] + ' '+ new_df19['actor_3_name'] + ' '+ new_df19['director_name'] +' ' + new_df19['genres']\nnew_df19","2a230382":"my_df = all_data.append(new_df19,ignore_index=True)\nmy_df","526bfe47":"final_df =new_data.append(my_df,ignore_index=True)\nfinal_df","29c2a279":"final_df.isna().sum()","0b0fc8a2":"final_df = final_df.dropna(how='any')\nfinal_df.isna().sum()","3a08704c":"import requests\nimport bs4 as bs\nimport urllib.request","ba2f4a62":"link = \"https:\/\/en.wikipedia.org\/wiki\/List_of_American_films_of_2020\"\nsource = urllib.request.urlopen(link).read()\nsoup = bs.BeautifulSoup(source,'lxml')","3898336f":"tables = soup.find_all('table',class_='wikitable sortable')\nlen(tables)","e7261997":"df1 = pd.read_html(str(tables[0]))[0]\ndf2 = pd.read_html(str(tables[1]))[0]\ndf3 = pd.read_html(str(tables[2]))[0]\ndf4 = pd.read_html(str(tables[3]).replace(\"'1\\\"\\'\",'\"1\"'))[0]","ea447041":"df = df1.append(df2.append(df3.append(df4,ignore_index=True),ignore_index=True),ignore_index=True)\ndf","467e690e":"df_2020 = df[['Title','Cast and crew']]\ndf_2020","b1c2123b":"df_2020['genres'] = df_2020['Title'].map(lambda x: get_genre(str(x)))","45701a63":"df_2020","cfb7fe7d":"def get_director(x):\n    if \" (director)\" in x:\n        return x.split(\" (director)\")[0]\n    elif \" (directors)\" in x:\n        return x.split(\" (directors)\")[0]\n    else:\n        return x.split(\" (director\/screenplay)\")[0]","3f4fa186":"df_2020['director_name'] = df_2020['Cast and crew'].map(lambda x: get_director(str(x)))","3a8f3214":"def get_actor1(x):\n    return ((x.split(\"screenplay); \")[-1]).split(\", \")[0])","9b59260f":"df_2020['actor_1_name'] = df_2020['Cast and crew'].map(lambda x: get_actor1(str(x)))","4fc60c4f":"def get_actor2(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 2:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[1])","fc019531":"df_2020['actor_2_name'] = df_2020['Cast and crew'].map(lambda x: get_actor2(str(x)))","1b10d27b":"def get_actor3(x):\n    if len((x.split(\"screenplay); \")[-1]).split(\", \")) < 3:\n        return np.NaN\n    else:\n        return ((x.split(\"screenplay); \")[-1]).split(\", \")[2])","30731640":"df_2020['actor_3_name'] = df_2020['Cast and crew'].map(lambda x: get_actor3(str(x)))\ndf_2020","a22104f7":"df_2020 = df_2020.rename(columns={'Title':'movie_title'})","bf036aca":"new_df20 = df_2020.loc[:,['director_name','actor_1_name','actor_2_name','actor_3_name','genres','movie_title']]\nnew_df20","81be4602":"new_df20['comb'] = new_df20['actor_1_name'] + ' ' + new_df20['actor_2_name'] + ' '+ new_df20['actor_3_name'] + ' '+ new_df20['director_name'] +' ' + new_df20['genres']","7e19920d":"new_df20 = new_df20.dropna(how='any')","268f263c":"new_df20.isna().sum()","8f181f68":"new_df20['movie_title'] = new_df20['movie_title'].str.lower()\nnew_df20","a5125e7e":"final_df = new_data.append(new_df20,ignore_index=True)\nfinal_df","97ac3074":"# import necessary libraries\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import naive_bayes\nfrom sklearn.metrics import roc_auc_score,accuracy_score\n","e784d709":"nltk.download(\"stopwords\")","9a34e38d":"# Load dataset of movie reviews\ndatasets=pd.read_csv('..\/input\/movie-recommendation-data\/reviews.txt',sep = '\\t', names =['Reviews','Comments'])","7558b0cc":"datasets.head()","dceff413":"stopset=set(stopwords.words(\"english\"))","51cebb49":"# apply tfidf vectorizer \nvectorizer=TfidfVectorizer(use_idf = True,lowercase = True, strip_accents='ascii',stop_words=stopset)","10ef26c5":"x=vectorizer.fit_transform(datasets.Comments)\ny=datasets.Reviews","b62d012c":"# split data into train and test\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)","1ca86e53":"clf = naive_bayes.MultinomialNB()\nclf.fit(X_train,y_train)","eba0e09d":"# Check your score\naccuracy_score(y_test,clf.predict(X_test))*100","b2beb98b":"<\/h1><\/center><center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">Movie Recommendation System Project using ML\n<\/h1><\/center>\n\n<p style=\"font-size:150%; font-family:cursive;\">The main goal of this machine learning project is to build a recommendation engine that recommends movies to users. This Python project is designed to help you understand the functioning of how a recommendation system works. We will be developing an Item Based Collaborative Filter. By the end of this tutorial, you will gain experience of implementing your Python, Data Science, and Machine learning skills in a real-life project.\nBefore moving ahead in this movie recommendation system project in ML, you need to know what recommendation system means.<\/p>","e44d9690":"\n<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 5. Work with 2020 Movies dataset\n<\/h1><\/center>","999252b3":"<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 1. Work with IMBD Movie Dataset\n<\/h1><\/center>","5800ee43":"<center><h1 style=\"font-size:280%; font-family:cursive; background:yellow; color:black; border-radius:10px 10px; padding:10px;\">What is a Recommendation System?\n<\/h1><\/center>\n\n\n<p style=\"font-size:150%; font-family:cursive;\">A recommendation system provides suggestions to the users through a filtering process that is based on user preferences and browsing history. The information about the user is taken as an input. The information is taken from the input that is in the form of browsing data. This information reflects the prior usage of the product as well as the assigned ratings. A recommendation system is a platform that provides its users with various contents based on their preferences and likings. A recommendation system takes the information about the user as an input. The recommendation system is an implementation of the machine learning algorithms.<\/p>","0c76dbc9":"\n<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 6. Now work with sentiment Analysis of Movies Reviews\n<\/h1><\/center>","e14b42b9":"<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 2. Work with  Movies Credit and Meta Datasets\n<\/h1><\/center>","64879a6c":"\n<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 3. Work with 2018 Movies dataset\n<\/h1><\/center>","d3cda902":"<center><img src=\"https:\/\/developer-blogs.nvidia.com\/wp-content\/uploads\/2021\/04\/Whats-recommendation-system_Pic-2.png\"><\/center>","b0ab928b":"\n<\/h1><\/center><center><h1 style=\"font-size:180%; font-family:cursive; background:pink; color:black; border-radius:10px 10px; padding:10px;\"> Step 4. Work with 2019 Movies dataset\n<\/h1><\/center>","5f85e615":"<p style=\"font-size:150%; font-family:cursive;\">A recommendation system also finds a similarity between the different products. For example, Netflix Recommendation System provides you with the recommendations of the movies that are similar to the ones that have been watched in the past. Furthermore, there is a collaborative content filtering that provides you with the recommendations in respect with the other users who might have a similar viewing history or preferences. There are two types of recommendation systems \u2013 Content-Based Recommendation System and Collaborative Filtering Recommendation. In this project of recommendation system in R, we will work on a collaborative filtering recommendation system and more specifically, ITEM based collaborative recommendation system.<\/p>"}}