{"cell_type":{"17319ea5":"code","dbce9e3b":"code","a15d2fab":"code","333ba430":"code","4d8c213c":"code","642f4dd7":"code","8d1a0324":"code","58e62aa8":"code","97cf08df":"code","fff3d2b6":"code","c77574d9":"code","e81c0de9":"code","aff1ad23":"code","ad9a4051":"code","760a9b12":"code","66d7dab4":"code","178bd6b8":"code","ab31e885":"code","d87718a4":"markdown","83a49268":"markdown","d1d8d608":"markdown","e2cba48d":"markdown","c0b36cb6":"markdown","77c47e18":"markdown","91ed0e12":"markdown","c4d1e065":"markdown","14d8f88b":"markdown","0a834044":"markdown","e1ef047b":"markdown","92a821f2":"markdown"},"source":{"17319ea5":"#!pip install seaborn\n#!pip install folium\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nfrom datetime import datetime\nimport folium\nfrom folium import plugins\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","dbce9e3b":"## LOAD DATA INTO PANDAS DATAFRAME\n\n# Original data: https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html\n\ndata_path=\"..\/input\/divvy-bicycle-data-year-2021\/\"\npath = r'..\/input\/divvy-bicycle-data-year-2021\/'\nall_files = glob.glob(path + \"\/*.csv\")\n\n\nli = []\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    li.append(df)\ndframe = pd.concat(li, axis=0, ignore_index=True)\ndframe[\"elapsed_time\"]=pd.to_datetime(dframe[\"ended_at\"])-pd.to_datetime(dframe[\"started_at\"])\ndframe[\"date\"]=pd.to_datetime(dframe[\"started_at\"]).dt.date\ndframe=dframe[dframe[\"rideable_type\"]!=\"docked_bike\"]\ndframe.shape\n","a15d2fab":"#  There are 1 million rows without a station name or id and this creates problem with grouping and counting\n\ndframe.dropna(inplace=True)\ndframe.head()","333ba430":"# clean for hist outliers\n\ndhist1=dframe[dframe[\"elapsed_time\"]>pd.to_timedelta(\"0 days 00:00:00\")]\ndhist=dhist1[dhist1[\"elapsed_time\"]<pd.to_timedelta(\"0 days 02:00:00\")]","4d8c213c":"# Histogram of global ride time distribution\nmy_colors = ['brown','green', 'blue','pink', 'red', 'cyan','orange','purple']\nfig = plt.figure(figsize =(10, 7))\n# Horizontal Bar Plot\nplt.hist(dhist[\"elapsed_time\"].dt.total_seconds()\/60, bins=24,ec=\"black\")\n# Show Plot\nplt.xlabel(\"Usage in minutes(ranges of 5)\", labelpad=14,fontsize=1)\nplt.ylabel(\"Count\", labelpad=14,fontsize=1)\nplt.title(\"Distribution of usage in 5 minutes ranges\", y=1.02,fontsize=12);\nplt.show()","642f4dd7":"## Matrix of Hist for ride time over type of bike and type of user\nsns.set(font_scale=1)\ndhist[\"elapsed_time_mins\"] = dhist.elapsed_time.dt.total_seconds()\/60\ng = sns.FacetGrid(dhist, col=\"rideable_type\", row=\"member_casual\",margin_titles=True, height=6)\ng.map_dataframe(sns.histplot, x=\"elapsed_time_mins\", binwidth=5, binrange=(0, 120))\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Ride time over type of bike and type of user\")","8d1a0324":"## BARCHARTS per type of user and type of bike\nfigure(figsize=(6,5), dpi=80)\n\ndframe[\"member_casual\"].value_counts().plot(kind='bar',color=my_colors,ec=\"black\")\n#plt.xlabel(\"Type of user\", labelpad=14,fontsize=7)\nplt.ylabel(\"Count\", labelpad=14,fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.title(\"Types of users\", y=1.02,fontsize=14);\nplt.show()\nfigure(figsize=(6, 5), dpi=80)\ndframe[\"rideable_type\"].value_counts().plot(kind='bar',color=my_colors[4:],ec=\"black\")\n#plt.xlabel(\"Type of bike\", labelpad=14,fontsize=7)\nplt.ylabel(\"Count\", labelpad=14,fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.title(\"Types of bikes\", y=1.1,fontsize=14);\nplt.show()","58e62aa8":"## PLOT general usage by day of the year\nper_day_usage=dframe.groupby(['date']).size().reset_index(name='counts')\nper_day_usage.head()\nfigure(figsize=(10, 7), dpi=80)\nplt.plot(per_day_usage['date'],per_day_usage['counts'])\nplt.ylabel('rides per day',fontsize=12)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.title(\"Rides per day\", y=1.1,fontsize=14);\nplt.show()","97cf08df":"dstart=dframe[['start_station_name','start_lat','start_lng']]\ndstart1=dstart.drop_duplicates(subset=['start_station_name'],keep='first')\ndstart2=dstart.groupby(['start_station_name']).size().reset_index(name='counts')\ndstart = pd.merge(dstart1, dstart2, how='inner', on = 'start_station_name')\n\n\ndend=dframe[['end_station_name','end_lat','end_lng']]\ndend1=dend.drop_duplicates(subset=['end_station_name'],keep='first')\ndend2=dend.groupby(['end_station_name']).size().reset_index(name='counts')\ndend = pd.merge(dend1, dend2, how='inner', on = 'end_station_name')\n","fff3d2b6":"from branca.element import Template, MacroElement\n\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>\n\n \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Size = Popularity<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:red;opacity:0.7;'><\/span>Pickup<\/li>\n    <li><span style='background:blue;opacity:0.7;'><\/span>Return<\/li>\n\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\nmacro = MacroElement()\nmacro._template = Template(template)\n\n","c77574d9":"# MAP pickup & delivery (black&white) stations and their popularity (green=less, red=more)\n# Marker for pickup and delivery are duplicated and offsetted of a few meters for readibility\n\nmaxcountstart=dstart['counts'].max()\nmaxcountend=dend['counts'].max()\n\nm = folium.Map(location=[41.85,-87.5], tiles=\"OpenStreetMap\", zoom_start=10.5)\n\nfor i in range(0,len(dstart)):\n    colorg=hex(int(255*dstart.iloc[i]['counts']\/maxcountstart))[2:4].zfill(2)\n    \n    folium.CircleMarker(radius=50\/(maxcountstart\/dstart.iloc[i]['counts']),color=\"#DD5555\",opacity=0.1,\n            fill=True,\n            fill_color='#DD5555',\n            fill_opacity=0.5,              \n      location=[dstart.iloc[i]['start_lat'], dstart.iloc[i]['start_lng']],icon=folium.Icon(color='black',fill_opacity=0.8),\n      popup=dstart.iloc[i]['start_station_name']+' [PICKUP] N='+str(dstart.iloc[i]['counts']),\n   ).add_to(m)\n \n\n## THIS BLOCKS put markers for RETURN stations. We comment it out after having verified that\n## Counts of pickup and return are very similar\n\n#for i in range(0,len(dend)):\n#    colorg=hex(int(255*dend.iloc[i]['counts']\/maxcountend))[2:4].zfill(2)\n#\n#    folium.CircleMarker(radius=50\/(maxcountend\/dend.iloc[i]['counts']),color=\"#5555AA\",\n#            fill=True,\n#            fill_color='#3333DD',\n#            fill_opacity=0.3, \n#      location=[dend.iloc[i]['end_lat'], dend.iloc[i]['end_lng']+0.0002],icon=folium.Icon(color='white',fill_opacity=0.8,icon_color=icolor,icon='bicycle',prefix='fa'),\n#      popup=dend.iloc[i]['end_station_name']+' [RETURN] N='+str(dend.iloc[i]['counts']),\n#   ).add_to(m)\n\nm.get_root().add_child(macro)\n\nm","e81c0de9":"from branca.element import Template, MacroElement\n\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>\n\n \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Most popular stations<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:black;opacity:0.7;'><\/span>Coffe = Casual<\/li>\n    <li><span style='background:white;opacity:0.7;'><\/span>Book = Member<\/li>\n\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\nmacro = MacroElement()\nmacro._template = Template(template)","aff1ad23":"dmem=dframe.loc[dframe.member_casual=='member',['start_station_name','start_lat','start_lng']]\ndmem1=dmem.drop_duplicates(subset=['start_station_name'],keep='first')\ndmem2=dmem.groupby(['start_station_name']).size().reset_index(name='counts')\ndmem = pd.merge(dmem1, dmem2, how='inner', on = 'start_station_name')\ndmem=dmem.loc[dmem.counts>10000]\n","ad9a4051":"dcas=dframe.loc[dframe.member_casual=='casual',['start_station_name','start_lat','start_lng']]\ndcas1=dcas.drop_duplicates(subset=['start_station_name'],keep='first')\ndcas2=dcas.groupby(['start_station_name']).size().reset_index(name='counts')\ndcas = pd.merge(dcas1, dcas2, how='inner', on = 'start_station_name')\ndcas=dcas.loc[dcas.counts>10000]\n","760a9b12":"# Prints the most popular stations among members and casual users (>10000 usage)\n# white bicycle = member, black bicycle = casual\n\n\nm1 = folium.Map(location=[41.85,-87.5], tiles=\"OpenStreetMap\", zoom_start=10.5)\n\nfor i in range(0,len(dmem)):\n    icolor=\"#\"+\"FF\"+\"FF\"+\"FF\"\n    folium.Marker(\n      location=[dmem.iloc[i]['start_lat'], dmem.iloc[i]['start_lng']],icon=folium.Icon(color='blue',fill_opacity=0.3,icon_color=icolor,icon='book',prefix='fa'),\n      popup=dmem.iloc[i]['start_station_name'],\n   ).add_to(m1)\n    \nfor i in range(0,len(dcas)):\n    icolor=\"#\"+\"00\"+\"00\"+\"00\"\n    folium.Marker(\n      location=[dcas.iloc[i]['start_lat'], dcas.iloc[i]['start_lng']],icon=folium.Icon(color='blue',fill_opacity=0.3,icon_color=icolor,icon='coffee',prefix='fa'),\n      popup=dcas.iloc[i]['start_station_name'],\n   ).add_to(m1)\n\n\nm1.get_root().add_child(macro)\nm1","66d7dab4":"dmem=dframe.loc[dframe.member_casual=='member']\ndcas=dframe.loc[dframe.member_casual=='casual']\n\ndmem[\"day_of_week\"]=pd.to_datetime(dmem[\"started_at\"]).dt.day_of_week\ndcas[\"day_of_week\"]=pd.to_datetime(dcas[\"started_at\"]).dt.day_of_week\n\ndmem[\"hour\"]=pd.to_datetime(dmem[\"started_at\"]).dt.hour\ndcas[\"hour\"]=pd.to_datetime(dcas[\"started_at\"]).dt.hour\n\n","178bd6b8":"days=['Monday','Tuesday','Wenesday','Thursday','Friday','Saturday','Sunday']\nfigure(figsize=(8, 6), dpi=80)\ndmem[\"day_of_week\"].value_counts().sort_index().plot(kind='bar',ec=\"black\")\nplt.xlabel(\"Day of week (Mon-Sun)\", labelpad=14,fontsize=12)\nplt.ylabel(\"Count\", labelpad=14,fontsize=12)\nplt.title(\"[MEMBER] Usage per day of the week\", y=1.02,fontsize=12);\nplt.show()\nfigure(figsize=(8, 6), dpi=80)\ndcas[\"day_of_week\"].value_counts().sort_index().plot(kind='bar',ec=\"black\")\nplt.xlabel(\"Day of week (Mon-Sun)\", labelpad=14,fontsize=12)\nplt.ylabel(\"Count\", labelpad=14,fontsize=12)\nplt.title(\"[CASUAL] Usage per day of the week\", y=1.02,fontsize=12);\nplt.show()","ab31e885":"fig, axs = plt.subplots(2, 2,figsize=(15,15))\n\nfigure(figsize=(6,4), dpi=80)\ndmem.loc[dmem[\"day_of_week\"]<5][\"hour\"].value_counts().sort_index().plot(kind='bar',ec=\"black\",ax=axs[0,0])\n#axs[0,0].xlabel(\"Hour of day\", labelpad=14,fontsize=12)\n#axs[0,0].ylabel(\"Count\", labelpad=14,fontsize=12)\n#axs[0,0].title(\"[MEMBER] Usage per Hour of day during working days\", y=1.02,fontsize=12);\naxs[0,0].title.set_text('[MEMBER] Working Day - Hours of day')\n\nfigure(figsize=(6,4), dpi=80)\ndcas.loc[dcas[\"day_of_week\"]<5][\"hour\"].value_counts().sort_index().plot(kind='bar',ec=\"black\",ax=axs[0,1])\n#axs[0,1].plt.xlabel(\"Hour of day\", labelpad=14,fontsize=12)\n#axs[0,1].plt.ylabel(\"Count\", labelpad=14,fontsize=12)\n#axs[0,1].plt.title(\"[CASUAL] Usage per Hour of day during working days\", y=1.02,fontsize=12);\naxs[0,1].title.set_text('[CASUAL] Working Day - Hours of day')\n\nfigure(figsize=(6,4), dpi=80)\ndmem.loc[dmem[\"day_of_week\"]>4][\"hour\"].value_counts().sort_index().plot(kind='bar',ec=\"black\",ax=axs[1,0])\n#axs[1,0].plt.xlabel(\"Hour of day\", labelpad=14,fontsize=12)\n#axs[1,0].plt.ylabel(\"Count\", labelpad=14,fontsize=12)\n#axs[1,0].plt.title(\"[MEMBER] Usage per Hour of day during weekend\", y=1.02,fontsize=12);\naxs[1,0].title.set_text('[MEMBER] Weekend - Hours of day')\n\nfigure(figsize=(6,4), dpi=80)\ndcas.loc[dcas[\"day_of_week\"]>4][\"hour\"].value_counts().sort_index().plot(kind='bar',ec=\"black\",ax=axs[1,1])\n#axs[1,1].plt.xlabel(\"Hour of day\", labelpad=14,fontsize=12)\n#axs[1,1].plt.ylabel(\"Count\", labelpad=14,fontsize=12)\n#axs[1,1].plt.title(\"[CASUAL] Usage per Hour of day during weekend\", y=1.02,fontsize=12);\naxs[1,1].title.set_text('[CASUAL] Weekend - Hours of day')\nplt.show()\n\n","d87718a4":"**In the following plot we consider the global popularity of stations**\nWe consider for this plot the \"Start Station\" after having compared that the popularity of \"End Station\" is overlapping, \nso for more graphical clarity we only plot the start stations\nThe size of the circle is proportional to the popularity or usage.","83a49268":"**In the following plot we see the usage over week days for both members and casual riders**\nWe can derive that most members use the bicycle to commute to work but they also use it in weekend.\nThe second barplot seems to suggest that casual riders are either tourists or people that mostly use the bike during weekends.","d1d8d608":"**When we consider the bike usage over the year not surprisingly the warmer months are preferred**","e2cba48d":"# How do annual members and casual riders use Cyclistic bikes differently?\n![Cyclistic Bike Sharing](https:\/\/transportationtodaynews.com\/wp-content\/uploads\/2019\/04\/shutterstock_364832024.jpg)","c0b36cb6":"**As we can see the ride time is mostly concenctrated between 5 to 25 minues with a peak around 10 minutes**","77c47e18":"## So, how casual riders differ from members?\n\n### From all the above data these are the conclusions that can be made ##\n\n* Casual riders prefer weekends.\n* All riders prefer warmer months.\n* Most riders prefer classic bikes.\n* The average ride time is between 5 and 25 minutes with a peak around 10 minutes.\n* Downtown stations are the most popular.\n* Universities and offices seems to be most popular among members.\n\nIf the plan is to turn casual riders into annual members maybe should marketing should be focused in central locations, venues, offices and universities.\nData does not have any rider id so it's not possible to draw further conclusions on which casual riders would be better candidates for the annual membership.\n\n\n","91ed0e12":"## Ask ##\n### About the company ### \n\n__Cyclistic Bike Share__ it's a bike share program who offers more than 5,800 bicycles and 600 dock stations in Chicago's City. Cyclistic sets itself apart by offering different kind of bicycles making bike-share more inclusive to people with disabilities and riders who can't use a standard two-wheels bike. Cyclistic offers a flexible pricing plan which include single-ride passes, full-day passes and annual memberships. \n\n### Bussiness Taks ### \nThe company is looking for increases the number of annual memberships because they are much more profitable than casual riders and this will be key to future growth. To get that, Cyclistic needs to know __How do annual members and casual riders use Cyclistic bikes differently?__ Answer this question will help the company to focus their actions in this task.\n\n## Prepare ##\n\n### Data ###\n\n#### Content ####\n\nDataset contains the detail of the last 12 months (from 01-2021 to 12-2021) of bike-trips in Chicago's City throw Cyclistic bicycle share program. The data has information about start station and end station (name, longitude and latitude), start and end time, type of bicycle used and type of customer.\nThis data could be use to analyze the differences between casual riders and members and get insights which helps to develop marketing strategies in order to increase the number of annual members.\n\n\n#### Structure ####\n\nData is provided in twelve (12) *.csv files, starting at 1-2021 to 12-2021. Each file contain the next features:\n\n*  __ride_id__: Unique trip ID.\n*  __rideable_type__: Type of used bike.\n    + classic_bike\n    + electric_bike\n    + docked_bike\n*  __started_at__: Datetime of start at format DD\/MM\/YYYY hh:mm. e.g. 23\/2\/2021 15:07\n*  __ended_at__: Datetime of end at format DD\/MM\/YYYY hh:mm. e.g. 23\/2\/2021 15:22\n*  __start_station_name__: Name of start station. e.g. State St & 33rd St\n*  __start_station_id__: ID of start station e.g. KP1705001026 or 18003\n*  __end_station_name__: Name of end station. e.g. Emerald Ave & 31st St\n*  __end_station_id__: ID of start station e.g. TA1309000055 or 520\n*  __start_lat__: Start Latitude expressed in DD (Decimal Degree)\n*  __start_lng__: Start Longitude expressed in DD (Decimal Degree)\n*  __end_lat__: End Latitude expressed in DD (Decimal Degree)\n*  __end_lng__: End longitude expressed in DD (Decimal Degree)\n*  __member_casual__: Type of users\n     + member: have a annual membership\n     + casual: use to have a full-day or single-ride pass\n\n\n\n__Metadata__               |  __Detail__\n-------------------------- | ---------------\n__License__:               |  Public Domain\n__Visibility__:            |  Public\n__Source__:                |  https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html \n__Dataset Owner__:         |  City of Chicago\u2019s\n \n","c4d1e065":"As we can see classic bikes are more popular and also a big part of the rides is by the annual members.","14d8f88b":"**If we divide into 4 groups over bicycle type and user type, we have the following plots for ride time**","0a834044":"**In the following map we plot the most popular stations among members and casual riders**\nThe white book icon is for members, while the black coffee icon is for casual riders.","e1ef047b":"<p style=\"text-align: center;\">\n<center><h3>Google Data Analytics Specialization Capstone<\/h3>\n\n\n<h1>Cyclistic Bike Sharing Analysis for year 2021<\/h1>\n\n<\/center><\/p>\n<center>\n<img src=\"https:\/\/miro.medium.com\/max\/293\/1*nPqUTH1pkj8BWtQrd8WYIg.png\">\n<\/center>\n\n\n### Claudio Nanni\nJanuary, 27th 2022\n\nhttps:\/\/www.linkedin.com\/in\/claudionanni\/\n","92a821f2":"**We also break down usage for hours of the day in weekdays and weekends**\nThe top left plot seems to confirm that many members use the bike to commute to work since there are two peaks around start and end of the working day, 8 and 17 hours. Also to notice that casual riders use the bike around office ending hours, but not at the beginning of the day.\nSeveral interpretations could be made about this, like for example that some workers non-annual members prefer to bike home in nice sunny days. Weekend usage is similar in both groups."}}