{"cell_type":{"43470c32":"code","4438d74c":"code","32195638":"code","089879d2":"code","66fa9bcc":"code","eb5f1259":"code","293c5e37":"code","3b97bc17":"code","b6a4784d":"code","4bb0510d":"code","eea40066":"code","42398e66":"code","10324c1a":"code","67d97fb6":"code","c9095d91":"code","2928556a":"code","49525761":"code","b7fcb2be":"code","9bc0b9b5":"code","4f6d0571":"code","f102cb47":"code","adf72e38":"code","2aba9bbd":"code","d7dc2e2d":"code","d99d19b5":"code","ceaad891":"code","e1b00a0d":"code","7f2e6e54":"code","8f33f9bb":"code","8e404b1c":"code","7db1e422":"code","80e9f194":"markdown","8f7f5276":"markdown","f26ffd4d":"markdown","f8d1c5bb":"markdown","37f0d2cc":"markdown","34a61de9":"markdown","0535ce8e":"markdown","e6ae580c":"markdown","b6b9e5fa":"markdown","4d5d51fc":"markdown","23d61ab2":"markdown","468e838e":"markdown","09deea09":"markdown","95db8636":"markdown","608941b1":"markdown","1f2f9ed7":"markdown","fdf886f4":"markdown","152ec3f3":"markdown","31dd63c5":"markdown","a2379e79":"markdown","2af677df":"markdown"},"source":{"43470c32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4438d74c":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndata=pd.read_csv('\/kaggle\/input\/machine-failure-predictions\/machine failure.csv')","32195638":"data.sample(10)","089879d2":"data.info()","66fa9bcc":"data.isnull().sum()","eb5f1259":"data.drop(['TWF',\"HDF\",\"PWF\",\"OSF\",\"RNF\"],inplace=True,axis=1)\ndata.head()","293c5e37":"data.sample(3)","3b97bc17":"corr= data.corr()\nplt.figure (figsize = (8,4))\nsns.heatmap(corr,annot=True)\nplt.show()","b6a4784d":"data.describe().T","4bb0510d":"sns.countplot(x='Machine failure', data=data)","eea40066":"sns.boxplot(x=data['Machine failure'])","42398e66":"sns.displot(data,x='Type',hue='Machine failure', multiple=\"stack\")","10324c1a":"data_failed=data[data['Machine failure']==1]\ndata_failed","67d97fb6":"data['Machine failure'].value_counts()\n","c9095d91":"data.nunique()","2928556a":"data['Type'].value_counts()","49525761":"data_notfailed=data[data['Machine failure']==0]","b7fcb2be":"y=data['Machine failure']\nx=data.drop(['Machine failure','Product ID','Type'],axis=1)\nx.head()","9bc0b9b5":"sns.relplot(y='Tool wear [min]',x='Rotational speed [rpm]',hue=\"Machine failure\", data=data)","4f6d0571":"sns.relplot(y='Torque [Nm]',x='Rotational speed [rpm]',hue=\"Machine failure\", data=data)","f102cb47":"sns.relplot(y='Process temperature [K]',x='Rotational speed [rpm]',hue=\"Machine failure\", data=data)","adf72e38":"sns.relplot(y='Torque [Nm]',x='Rotational speed [rpm]',hue=\"Machine failure\", data=data,kind='line')","2aba9bbd":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=1,test_size=0.3)\nx_train.head()","d7dc2e2d":"from sklearn.preprocessing import MinMaxScaler\nminmax = MinMaxScaler()\n\ntrain_minmax = minmax.fit_transform(x)\n\nX = pd.DataFrame(train_minmax, columns=x_train.columns)\n","d99d19b5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=1,test_size=0.3)\n","ceaad891":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,plot_confusion_matrix\nlr=LogisticRegression()\nlr.fit(X_train, y_train)\npredictions=lr.predict(X_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)","e1b00a0d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,plot_confusion_matrix\nlr=LogisticRegression()\nlr.fit(x_train, y_train)\npredictions=lr.predict(x_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)\n","7f2e6e54":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(X_train,y_train)\npredictions=rfc.predict(X_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)","8f33f9bb":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\npredictions=rfc.predict(x_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)","8e404b1c":"from sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npredictions=dtree.predict(X_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)","7db1e422":"from sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\ndtree.fit(x_train,y_train)\npredictions=dtree.predict(x_test)\naccscore=accuracy_score(y_test,predictions)\nprint(accscore)","80e9f194":"# **Dropping the unwanted values**","8f7f5276":"# **Box plot the Machine failure**","f26ffd4d":"# **Checking for the null values**","f8d1c5bb":"# **Unique values count**","37f0d2cc":"# **Splitting the normalised data**","34a61de9":"# **Regression - Random Forest Classifier**","0535ce8e":"# **Train and test data seperation**","e6ae580c":"# **Correlation**","b6b9e5fa":"# **Relationplot between the Rotational speed and Tool wear**","4d5d51fc":"# **Information about the dataset**","23d61ab2":"# **Displot the Type **","468e838e":"# **Preprocessing**","09deea09":"# **Regression DecisionTree Classifier**","95db8636":"# **Relational plot between the Rotational speed and Torque**","608941b1":"# **Reading the data using Pandas**","1f2f9ed7":"# **Classification - Logistic Regression**","fdf886f4":"# **Relational Plot between the Rotational Speed and Process temperature**","152ec3f3":"# **Relational plot between the Rotational speed and Torque Line form**","31dd63c5":"# **Countplot the Machine failure **","a2379e79":"# **Description about the dataset**","2af677df":"# **Sample check**"}}