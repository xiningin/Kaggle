{"cell_type":{"b6750242":"code","71af1d84":"code","8d3b801a":"code","0e2775c2":"code","f3b6de93":"code","f645f04d":"code","70f4bd35":"code","bd56584d":"code","100ecbc6":"code","5a0acb42":"code","f3dc9724":"code","36805f01":"code","27529745":"code","2f9490db":"code","2b20ba57":"code","b8d3cf49":"code","bff4ad8c":"code","167fa774":"code","bb22be1b":"code","4e4d968e":"code","b735174a":"code","c6f56708":"code","9bc6662e":"code","dada0974":"code","4fe5ed7d":"code","429f97d3":"code","2f7296f7":"code","f19d28b9":"code","0a911fae":"code","4b1bc224":"markdown","0d8d2dfc":"markdown","858f53be":"markdown","df73e169":"markdown","8a677352":"markdown","fe60b28e":"markdown","7bd1c96b":"markdown","50b6f0cf":"markdown","10d9a273":"markdown","a6819a00":"markdown","d2f2b6eb":"markdown","ea45b55f":"markdown"},"source":{"b6750242":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns \nsns.set(style = \"whitegrid\")\nimport matplotlib.pyplot as plt \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.figure_factory as ff \nimport  plotly.offline as py\nimport plotly.graph_objs as go \n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode, iplot, plot\nfrom plotly import tools \npy.init_notebook_mode(connected = True)\n\nimport cufflinks as cf \ncf.go_offline()","71af1d84":"df=pd.read_csv('..\/input\/BlackFriday.csv')","8d3b801a":"df.head(20)","0e2775c2":"Data_types = df.dtypes.value_counts()\nprint(Data_types)\n\nplt.figure(figsize = (14,4))\nsns.barplot(x = Data_types.index, y = Data_types.values)\nplt.title(\"Data Type Distribution\")","f3b6de93":"df.isnull().sum()","f645f04d":"Numerical_data=df.select_dtypes(include=(\"float64\", \"int64\"))\nCategr_data=df.select_dtypes(include=(\"object\"))\n\n\nfig, (ax1, ax2) =plt.subplots(nrows=2, ncols=1, figsize = (15,10))\n\nsns.heatmap(Categr_data.isnull(), cbar = False, annot = False, cmap =\"cividis\", yticklabels=False, ax=ax1)\nplt.title(\"Missing Values in Categorical Columns\")\nsns.heatmap(Numerical_data.isnull(), cbar = False, annot = False, cmap =\"cividis\", yticklabels=False)\nplt.title(\"Missing Values in Numberical Columns\")\nplt.tight_layout()","70f4bd35":"df['Product_Category_2'].mean()","bd56584d":"df['Product_Category_3'].mean()","100ecbc6":"df[\"Product_Category_2\"].fillna(\"9.842144034798471\", inplace = True) \ndf[\"Product_Category_3\"].fillna(\"12.669840149015693\", inplace = True) ","5a0acb42":"# check null value agine \ndf.isnull().sum()","f3dc9724":"df['Gender'].value_counts()","36805f01":"Female = df[(df['Gender'] == 'F')]\nMale = df[(df['Gender'] != 'F')]\n\ntrace = go.Pie(labels = ['Male', 'Females'], values = df['Gender'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['blueviolet','cadetblue'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of Gender as Pie')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)\ntrace0 = go.Bar(\n    y=df['Gender'].value_counts(),\n  \n)\n\ndata = [trace0]\n\nfig = go.Figure(data=data)\nlayout = dict(title =  'Distribution of Gender as Bar')\n           \nfig = dict(data = [trace0], layout=layout)\npy.iplot(fig)\n\n","27529745":"\nLooging_Age = df['Age'].values.tolist()\nAge_MAle = df['Age'].loc[df['Gender'] == 'M'].values.tolist()\nAge_Female = df['Age'].loc[df['Gender'] != 'M'].values.tolist()\n\ntrace0 = go.Histogram(\n    x=Age_MAle,\n    histnorm='probability',\n    name=\"GMale\",\n    marker = dict(\n        color = 'rgba(100, 149, 237, 0.6)',\n    )\n)\ntrace1 = go.Histogram(\n    x=Age_Female,\n    histnorm='probability',\n    name=\" Female\",\n    marker = dict(\n        color = 'rgba(255, 182, 193, 0.6)',\n    )\n)\ntrace2 = go.Histogram(\n    x=Looging_Age,\n    histnorm='probability',\n    name=\"Overall Gender\",\n     marker = dict(\n        color = 'rgba(169, 169, 169, 0.6)',\n    )\n)\nfig = tools.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Males','Female', 'All Genders'))\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title='Distribution of Age Male and Female ', bargap=0.05)\niplot(fig, filename='custom-sized-subplot-with-subplot-titles')","2f9490db":"Age = df['Age'].value_counts()\ntrace = go.Pie(labels = ['26-35', '36-45','18-25','46-50','51-55','55+','0-17'], values = df['Age'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['darkgoldenrod','darkturquoise'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of Age')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","2b20ba57":"df.groupby(['Product_Category_1','Gender'])['Gender'].count().unstack(1).plot.bar()\n","b8d3cf49":"df.groupby(['Product_Category_2','Gender'])['Gender'].count().unstack(1).plot.bar()","bff4ad8c":"df.groupby(['Product_Category_3','Gender'])['Gender'].count().unstack(1).plot.bar()","167fa774":"df.groupby(['Gender','Age'])['Gender'].count().unstack(1).plot.bar()","bb22be1b":"df.info()","4e4d968e":"df.groupby(['City_Category','Gender'])['Gender'].count().unstack(1).plot.bar()","b735174a":"Gender_M = df.loc[df[\"Gender\"]=='M']\nCity_Category_Male = df[\"City_Category\"].unique().tolist()\n\nA_m = Gender_M[\"Age\"].loc[Gender_M[\"City_Category\"] == \"A\"].values\nB_m = Gender_M[\"Age\"].loc[Gender_M[\"City_Category\"] == \"B\"].values\nC_m = Gender_M[\"Age\"].loc[Gender_M[\"City_Category\"] == \"C\"].values\n\nAges = [A_m, B_m, C_m]\n\n\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)',\n          'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', \n          'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)',\n         'rgba(229, 126, 56, 0.5)', 'rgba(229, 56, 56, 0.5)',\n         'rgba(174, 229, 56, 0.5)', 'rgba(229, 56, 56, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(City_Category_Male, Ages, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Distribution of Ages by City_Category_Male',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(224,255,246)',\n    plot_bgcolor='rgb(251,251,251)',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\niplot(fig)\n\n\n\n","c6f56708":"Gender_Female = df.loc[df[\"Gender\"]=='F']\nCity_Category_Male = df[\"City_Category\"].unique().tolist()\n\nA_Female = Gender_Female[\"Age\"].loc[Gender_Female[\"City_Category\"] == \"A\"].values\nB_Female = Gender_Female[\"Age\"].loc[Gender_Female[\"City_Category\"] == \"B\"].values\nC_Female = Gender_Female[\"Age\"].loc[Gender_Female[\"City_Category\"] == \"C\"].values\n\nAges = [A_Female, B_Female, C_Female]\n\n\n\ncolors = ['rgba(200, 180, 214, 0.5)', 'rgba(255, 160, 34, 0.5)',\n          'rgba(180, 160, 110, 0.5)', 'rgba(255, 65, 84, 0.5)', \n          'rgba(300, 90, 255, 0.5)', 'rgba(190, 96, 0, 0.5)',\n         'rgba(150, 150, 255, 0.5)', 'rgba(229, 56, 56, 0.5)',\n         'rgba(230, 210, 156, 0.5)', 'rgba(229, 56, 56, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(City_Category_Male, Ages, colors):\n        traces.append(go.Box(\n            y=yd,\n            name=xd,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=cls,\n            marker=dict(\n                size=2,\n            ),\n            line=dict(width=1),\n        ))\n\nlayout = go.Layout(\n    title='Distribution of Ages by City_Category_Female',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        dtick=5,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(210,230,180)',\n    plot_bgcolor='rgb(180,200,180)',\n    showlegend=False\n)\n\nfig = go.Figure(data=traces, layout=layout)\niplot(fig)\n\n\n\n\n\n","9bc6662e":"df['Occupation'].unique()","dada0974":"df['Occupation'].value_counts()","4fe5ed7d":"Occupation_4 = df[(df['Occupation'] == 4)]\nOccupation_0 = df[(df['Occupation'] == 0)]\nOccupation_7 = df[(df['Occupation'] == 7)]\nOccupation_1 = df[(df['Occupation'] == 1)]\nOccupation_17 = df[(df['Occupation'] == 17)]\nOccupation_20 = df[(df['Occupation'] == 20)]\nOccupation_12 = df[(df['Occupation'] == 12)]\nOccupation_14 = df[(df['Occupation'] == 14)]\nOccupation_2 = df[(df['Occupation'] == 2)]\nOccupation_16 = df[(df['Occupation'] == 16)]\nOccupation_6 = df[(df['Occupation'] == 6)]\nOccupation_3 = df[(df['Occupation'] == 3)]\nOccupation_10 = df[(df['Occupation'] == 10)]\nOccupation_5 = df[(df['Occupation'] == 5)]\nOccupation_15 = df[(df['Occupation'] == 15)]\nOccupation_11 = df[(df['Occupation'] == 11)]\nOccupation_19 = df[(df['Occupation'] == 19)]\nOccupation_13 = df[(df['Occupation'] == 13)]\nOccupation_18 = df[(df['Occupation'] == 18)]\nOccupation_9 = df[(df['Occupation'] == 9)]\nOccupation_8 = df[(df['Occupation'] == 8)]\n\n\ntrace8 = go.Pie(labels = [4, 0, 7,  1, 17,  20,  12, 14, 2,  16,  6,  3, 10,  5, 15,  11, 19,\n        13, 18, 9,  8], values = df['Occupation'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['Turquoise','gold'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of Occupation')\n           \nfig = dict(data = [trace8], layout=layout)\npy.iplot(fig)","429f97d3":"df_Occupation = df.Occupation.value_counts()\ntrace_df_Occupation = go.Bar(\n    x=df_Occupation.index,\n    y=df['Product_Category_1'].value_counts(),\n\n    name='Product_Category_1',\n    marker=dict(\n        color='rgb(200, 70, 150)'\n    )\n)\n\ntrace_df_Occupation2 = go.Bar(\n    x=df_Occupation.index,\n    y=df['Product_Category_2'].value_counts(),\n\n    name='Product_Category_2',\n    marker=dict(\n        color='rgb(400, 180, 30)'\n    )\n)\n\n\n\n\ntrace_df_Occupation3 = go.Bar(\n    x=df_Occupation.index,\n    y=df['Product_Category_3'].value_counts(),\n\n    name='Product_Category_3',\n    marker=dict(\n        color='rgb(100, 200, 300)'\n    )\n)\n\n\n\ndata = [trace_df_Occupation,trace_df_Occupation2,trace_df_Occupation3]\nlayout = go.Layout(\n    xaxis=dict(tickangle=-45),\n    barmode='group',\n    \n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='angled-text-bar')","2f7296f7":"sns.pairplot(df.select_dtypes(include=[np.number]), dropna=True)","f19d28b9":"#correlation\ncorrelation = df.corr()\n#tick labels\nmatrix_cols = correlation.columns.tolist()\n#convert to array\ncorr_array  = np.array(correlation)","0a911fae":"# Correalation plot in order to identify the relationship between the Numberical Features:\nplt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), linewidths=.1, annot=True, cmap='magma')\ndf.corr()[\"Purchase\"].sort_values(ascending = False).head(5)","4b1bc224":"# If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated. Please let me know if you have quetions","0d8d2dfc":"# ploting  20 Occupation in each Product_Category_1,Product_Category_2, and Product_Category_3","858f53be":"# Finding the Distrbution of Gender.\nExploaring Age Distrbution by Gender as you see above Age from (['0-17', '55+', '26-35', '46-50', '51-55', '36-45', '18-25'],","df73e169":"# Description\n\nThe dataset here is a sample of the transactions made in a retail store. The store wants to know better the customer purchase behaviour against different products. Specifically, here the problem is a regression problem where we are trying to predict the dependent variable (the amount of purchase) with the help of the information contained in the other variables.\n\nClassification problem can also be settled in this dataset since several variables are categorical, and some other approaches could be \"Predicting the age of the consumer\" or even \"Predict the category of goods bought\". This dataset is also particularly convenient for clustering and maybe find different clusters of consumers within it.\n\n# Dataset of 550 000 observations about the black Friday in a retail store, it contains different kinds of variables either numerical or categorical. It contains missing values.","8a677352":"# General Essential Libraries:\n\n","fe60b28e":"# Visualize the correlation of the numerical variables","7bd1c96b":"# Show The distrbution of each Gender with Age in Bar Plot","50b6f0cf":"# Gender Analasis:\n# 1- We have 75% Male in our dataset 405.380\n# 2- We have 25% Female in our dataset 123.197","10d9a273":"# # Datatypes and its distribution","a6819a00":"# Checking for Null Value","d2f2b6eb":"# Now modifying null value in this column Product_Category_2 and Product_Category_3 with 9.842144034798471 and 12.669840149015693","ea45b55f":"# Exploratory data analysis"}}