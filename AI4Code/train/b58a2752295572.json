{"cell_type":{"62014156":"code","42a8a553":"code","b5845a31":"code","7d883746":"code","b4b1c0bf":"code","8b3d20d4":"code","182bf2ca":"code","6c36a928":"code","8a5456c0":"code","8e554368":"code","9be2e25e":"code","b1598233":"code","b4c8e613":"code","523f5dec":"code","d28bdc15":"code","94e68a88":"code","8e890e4f":"code","516d2c0e":"code","0c654e42":"code","f4ebe5d5":"code","b4570780":"code","5e58f58f":"code","87a5aff8":"code","d75309ff":"code","78bf8e36":"code","bb715825":"code","77467039":"code","1725ded7":"code","0748029f":"code","f0a2de68":"code","768c999c":"code","e1e9bf41":"code","f0f04072":"code","c0984add":"code","6d28bcfc":"code","8101cf19":"code","dfe2820d":"code","756dc26f":"code","5d164eee":"code","f2e4fc37":"code","e02d58e7":"code","2a766129":"code","2866d296":"markdown","364eeca8":"markdown","408198b5":"markdown","7e405fa8":"markdown","9978cbbd":"markdown","9ab608eb":"markdown","ec9a6c28":"markdown","eee6ca4f":"markdown","74dc2ee9":"markdown","ff5cb617":"markdown","1d9986bb":"markdown","42814144":"markdown","7e458719":"markdown","56aec487":"markdown","162217c0":"markdown","c72e12e2":"markdown","b3f6fef0":"markdown","e0958fac":"markdown","2301bbc5":"markdown","ad1b28e4":"markdown","555cb7c9":"markdown","bc68edbf":"markdown","b5feb535":"markdown","613e18b2":"markdown","14c1b6e3":"markdown","d1e835de":"markdown"},"source":{"62014156":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, f1_score, classification_report \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import plot_tree","42a8a553":"df = pd.read_csv('..\/input\/drug-classification\/drug200.csv')","b5845a31":"df.head()","7d883746":"df.shape","b4b1c0bf":"df.info()","8b3d20d4":"# Check for missing values\n\ndf.isnull().sum()","182bf2ca":"# Check for duplicates\n\nduplicate = df[df.duplicated()]\nduplicate","6c36a928":"# Find minimum and maximum age\n\nprint(\"Minimum Age is {} years\".format(df['Age'].min()))\nprint(\"Maximum Age is {} years\".format(df['Age'].max()))","8a5456c0":"# Find unique values in categorical attributes\n\nprint(\"Sex:\", df['Sex'].unique())\nprint(\"BP:\", df['BP'].unique())\nprint(\"Cholesterol:\", df['Cholesterol'].unique())\nprint(\"Drug:\", df['Drug'].unique())","8e554368":"# Analyze Cholesterol based on Sex\n\ndf_Sex_Cholesterol = df.groupby([\"Sex\", \"Cholesterol\"]).size().reset_index(name = \"Count\")\n\nplt.figure(figsize = (10,10))\nsns.barplot(x = \"Sex\", y = \"Count\", hue = \"Cholesterol\", data = df_Sex_Cholesterol)\nplt.title(\"Sex - Cholesterol\", fontsize=20, fontweight='bold')\nplt.show()","9be2e25e":"# Analyze BP based on Sex\n\ndf_Sex_BP = df.groupby([\"Sex\", \"BP\"]).size().reset_index(name = \"Count\")\n\nplt.figure(figsize = (10,7))\nsns.barplot(x = \"Sex\", y = \"Count\", hue = \"BP\", data = df_Sex_BP)\nplt.title(\"Sex - BP\", fontsize=20, fontweight='bold')\nplt.show()","b1598233":"# Analyze Drug based on Age\n\nplt.figure(figsize = (10,6))\nsns.swarmplot(x = \"Drug\", y = \"Age\", data = df)\nplt.legend(df.Drug.value_counts().index)\nplt.title(\"Age vs Drug\", fontsize=20, fontweight='bold')\nplt.show()","b4c8e613":"# Analyze Drug based on Sex\n\ndf_Sex_Drug = df.groupby([\"Drug\", \"Sex\"]).size().reset_index(name = \"Count\")\n\nplt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"Sex\", data = df_Sex_Drug)\nplt.title(\"Sex - Drug\", fontsize=20, fontweight='bold')\nplt.show()","523f5dec":"# Analyze Drug based on Na_to_K\n\nplt.figure(figsize = (10,6))\nsns.swarmplot(x = \"Drug\", y = \"Na_to_K\", data = df)\nplt.legend(df.Drug.value_counts().index)\nplt.title(\"Na_to_K vs Drug\", fontsize=20, fontweight='bold')\nplt.show()","d28bdc15":"# Analyze Drug based on Cholesterol\n\ndf_Sex_Drug = df.groupby([\"Drug\", \"Cholesterol\"]).size().reset_index(name = \"Count\")\n\nplt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"Cholesterol\", data = df_Sex_Drug)\nplt.title(\"Cholesterol - Drug\", fontsize=20, fontweight='bold')\nplt.show()","94e68a88":"# Analyze Drug based on BP\n\ndf_Sex_Drug = df.groupby([\"Drug\", \"BP\"]).size().reset_index(name = \"Count\")\n\nplt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"BP\", data = df_Sex_Drug)\nplt.title(\"BP - Drug\", fontsize=20, fontweight='bold')\nplt.legend(loc='upper center')\nplt.show()","8e890e4f":"# Distribution of Drug\n\nsns.countplot(x='Drug', data=df)\nplt.xlabel('Drug')","516d2c0e":"# Encoding categorical variables\n\nfrom sklearn.preprocessing import LabelEncoder\n\ndef label_encoder(x):\n    le = LabelEncoder()\n    df[x] = le.fit_transform(df[x])\n\nlables = ['Sex', 'BP', 'Cholesterol', 'Drug']\nfor i in lables:\n    label_encoder(i)","0c654e42":"df","f4ebe5d5":"X = df.iloc[:, :-1]        # independent variable\ny = df.iloc[:, -1]         # dependent variable","b4570780":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","5e58f58f":"# without tuning hyperparameters\n\nclf1 = RandomForestClassifier(random_state=42)\naccuracies = cross_val_score(clf1, X_train, y_train, cv=5)\nclf1.fit(X_train, y_train)\n\nprint(\"Train Score:\", np.mean(accuracies))\nprint(\"Test Score:\", clf1.score(X_test, y_test))","87a5aff8":"# Predicting values\n\ny_pred1 = clf1.predict(X_test)\ny_pred1","d75309ff":"# F1 score\n\nclf1_f1_score = f1_score(y_test, y_pred1, average='weighted')\nclf1_f1_score","78bf8e36":"print(classification_report(y_test, y_pred1))","bb715825":"cm = confusion_matrix(y_test, y_pred1)\ncm","77467039":"# using GridSearchCV\n\ngrid = {'n_estimators': np.arange(1, 100), 'criterion':['gini','entropy']}\n\nclf2 = RandomForestClassifier(random_state=42)\nclf2_cv = GridSearchCV(clf2, grid, cv=5)\nclf2_cv.fit(X_train, y_train)\n\nprint(\"Hyperparameters Used:\", clf2_cv.best_params_)\nprint(\"Train Score:\", np.mean(accuracies))\nprint(\"Test Score:\", clf2_cv.score(X_test, y_test))","1725ded7":"y_pred2 = clf2_cv.predict(X_test)\ny_pred2","0748029f":"# F1 score\n\nclf2_f1_score = f1_score(y_test, y_pred2, average='weighted')\nclf2_f1_score","f0a2de68":"print(classification_report(y_test, y_pred2))","768c999c":"cm = confusion_matrix(y_test, y_pred2)\ncm","e1e9bf41":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)","f0f04072":"y_pred_dt = dt.predict(X_test)\ny_pred_dt","c0984add":"# F1 score\n\ndt_f1_score = f1_score(y_test, y_pred_dt, average='weighted')\ndt_f1_score","6d28bcfc":"print(classification_report(y_test, y_pred_dt))","8101cf19":"cm = confusion_matrix(y_test, y_pred_dt)\ncm","dfe2820d":"# Visualising the graph\n\nplt.figure(figsize = (20,10))\ndec_tree = plot_tree(decision_tree=dt, feature_names = df.columns, filled = True , precision = 4, rounded = True)","756dc26f":"grid = {'n_neighbors': np.arange(1,100)}\n\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, grid)\nknn_cv.fit(X_train, y_train)\n\nprint(\"Hyperparameters Used:\", knn_cv.best_params_)\nprint(\"Train Score:\", np.mean(accuracies))\nprint(\"Test Score:\", knn_cv.score(X_test, y_test))","5d164eee":"y_pred_knn = knn_cv.predict(X_test)\ny_pred_knn","f2e4fc37":"# F1 score\n\nknn_f1_score = f1_score(y_test, y_pred_knn, average='weighted')\nknn_f1_score","e02d58e7":"print(classification_report(y_test, y_pred_knn))","2a766129":"cm = confusion_matrix(y_test, y_pred_knn)\n\nplt.figure(figsize=(5,5))\n\nsns.heatmap(data=cm,linewidths=.5, annot=True,square = True,  cmap = 'Blues')\n\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\nall_sample_title = 'Accuracy Score: {0}'.format(knn_cv.score(X_test, y_test))\nplt.title(all_sample_title, size = 15)","2866d296":"## Exploratory Data Analysis","364eeca8":"<b>Observation:-<\/b>\n\n<ul>\n    <li>DrugY is given to most patients followed by drugX.<\/li>\n    <li>drugA, drugB and drugC are given to less number of patients.<\/li> \n<\/ul>    ","408198b5":"<b>Observation:-<\/b>\n\n<ul>\n    <li>drugA is only given to patients whose age is between 20 to 50 years.<\/li>\n    <li>drugB is only given to patients above 50 years.<\/li>\n    <li>DrugY, drugC and drugX can be given to all age groups.<\/li>    \n<\/ul>    ","7e405fa8":"**Hence, Decision Tree Classifier shows a 100% accuracy.**","9978cbbd":"<b>Observation:-<\/b>\n\n<ul>\n    <li>DrugY is only given to patients whose Na_to_K ratio is greater than 15.<\/li>\n    <li>drugC, drugX, drugA and drugB are given to patients whose Na_to_K ratio is between 5 and 15.<\/li>    \n<\/ul>    ","9ab608eb":"**K Nearest Neighbors Classifier only gave an accuracy of 64.62% with hyperparameter tuning.**","ec9a6c28":"### Attribute Description:-\n\n<ol>\n    <li>Age: stores the age of patient<\/li>\n    <li>Sex: stores the gender of patients<\/li>\n    <li>BP: contains blood pressure of patient<\/li>\n    <li>Cholesterol: stores cholesterol of patient<\/li>\n    <li>Na_to_K: contains Sodium to Potassium ratio in blood<\/li>\n    <li>Drug: contains he drug type given to patients<\/li>\n<\/ol>","eee6ca4f":"### 2. Decision Tree Classifier","74dc2ee9":"<b>Observation:-<\/b>\n\n<ul>\n    <li>It can be observed that maximum errors have occured in predicting class label 4.<\/li>\n    <li>Label 3 is also wrongly predicted as class 1 and 2.<\/li>\n<\/ul>","ff5cb617":"The dataset doesn't have any null values.","1d9986bb":"The dataset has 1 float, 1 integer and 4 object columns.","42814144":"### Splitting the data into training and testing set","7e458719":"No duplicate records are present.","56aec487":"## Loading the dataset","162217c0":"**Hence, Random Forest Classifier shows a 100% accuracy with and without tuning hyperparameters.**","c72e12e2":"### 3. KNN Classifier","b3f6fef0":"## Importing libraries","e0958fac":"<b>Observation:-<\/b>\n\n<ul>\n    <li>DrugY is given to more female patients.<\/li>\n    <li>drugA, drugB and drugC is only given to more male patients.<\/li>\n    <li>drugX ig given equally to male and female patients.<\/li>    \n<\/ul>    ","2301bbc5":"Hence, all the categorical attributes are encoded.","ad1b28e4":"<b>Observation:-<\/b>\n\n<ul>\n    <li>DrugY and drugA is given to more patients whose Cholesterol level is High.<\/li>\n    <li>drugB can be given to patients whose Cholesterol level is High or Normal.<\/li> \n    <li>drugC is only given to those patients who have High Cholesterol level.<\/li>\n    <li>drugX is given to more patients whose Cholesterol level is Normal.<\/li>\n<\/ul>    ","555cb7c9":"## Model","bc68edbf":"<b>Observation:-<\/b>\n\n<ul>\n    <li>DrugY is given to more patients whose BP is High.<\/li>\n    <li>drugA and drugB can be given to only those patients whose BP is High.<\/li> \n    <li>drugC is only given to those patients who have Low BP.<\/li>\n    <li>drugX is given to more patients whose BP is Normal.<\/li>\n<\/ul>    ","b5feb535":"The dataset has 200 records and 6 attributes.","613e18b2":"### 1. Random Forest Classifier","14c1b6e3":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Both Female and Male suffer from high blood pressure levels.<\/li>\n    <li>More males suffer from high blood pressure than females.<\/li>\n    <li>Almost same number of male and female have normal blood pressure.<\/li>    \n<\/ul>    ","d1e835de":"<b>Observation:-<\/b> It is observed that both Female and Male suffer from high cholesterol levels."}}