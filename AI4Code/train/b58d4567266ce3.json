{"cell_type":{"011fe5c6":"code","febb5315":"code","0291b01e":"code","4aac17c3":"code","ba43b51b":"code","26e196fe":"code","c421c357":"code","bfbd925d":"code","e679ed84":"code","30bd522c":"code","ac088eef":"code","cc2341f8":"code","91b480bc":"code","223df4d9":"code","ce42c93a":"code","9f421e5d":"code","45f57f4e":"code","91e0f11b":"code","734d82c3":"code","5379270d":"code","467df1c4":"code","b478eec3":"code","5d67cce1":"code","4b8ed859":"code","f98b31f3":"code","3f965ef3":"code","e70ea735":"markdown","09292c68":"markdown","50d6dbf7":"markdown","3a3177e7":"markdown","1016d1d7":"markdown","892d96cf":"markdown","9110c1ba":"markdown","3df1b4b8":"markdown","eaf7ae20":"markdown","47a8fc56":"markdown"},"source":{"011fe5c6":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow import keras","febb5315":"# get the version number of the libraries\nprint(f'Numpy Version: {np.__version__}')\nprint(f'Pandas Version: {pd.__version__}')\nprint(f'Matplotlib Version: {mpl.__version__}')\nprint(f'Seaborn Version: {sns.__version__}')\nprint(f'TensorFlow Version: {tf.__version__}')","0291b01e":"for root, directories, files in os.walk('\/kaggle\/input'):\n    for file in files:\n        print(os.path.join(root, file))","4aac17c3":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","ba43b51b":"# 28px*28px + output label\ntrain.shape","26e196fe":"# 28px*28px (no output label)\ntest.shape","c421c357":"train.head()","bfbd925d":"test.head()","e679ed84":"train.info()","30bd522c":"print(train.describe().loc['min'].min())\nprint(train.describe().loc['max'].max())","ac088eef":"# lets convert pandas to a numpy array\nX_train = train.loc[:, 'pixel0':].to_numpy()\nX_test = test.loc[:, 'pixel0' :].to_numpy()\nprint(X_train.shape)\nprint(X_test.shape)","cc2341f8":"y_train = train.loc[:, 'label'].to_numpy()\nprint(y_train.shape)","91b480bc":"X_2d_train = X_train.reshape((X_train.shape[0], 28, 28, 1))\nX_2d_test = X_test.reshape((X_test.shape[0], 28, 28, 1))\nprint(X_2d_train.shape)\nprint(X_2d_test.shape)","223df4d9":"y_train","ce42c93a":"#draw the first 5 images\nfig, ax = plt.subplots(figsize=(20,10),nrows=1, ncols=5)\nfor i in range(5):\n    ax[i].imshow(X_2d_train[i].reshape(28, 28), cmap='binary')\n    y_train[0]","9f421e5d":"X_2d_train = X_2d_train \/ 255.0\nX_2d_test = X_2d_test \/ 255.0","45f57f4e":"# Simple ANN Model\n# model = keras.models.Sequential([\n#     keras.layers.Flatten(input_shape=[28, 28]),\n#     keras.layers.Dense(100, activation='relu'),\n#     keras.layers.BatchNormalization(),\n#     keras.layers.Dense(100, activation='relu'),\n#     keras.layers.BatchNormalization(),\n#     keras.layers.Dense(10, activation='softmax')\n# ])\n\n# model.summary()","91e0f11b":"# these parameters were taken from the official keras website\n# https:\/\/keras.io\/examples\/vision\/mnist_convnet\/\nmodel = keras.models.Sequential([\n    keras.layers.Conv2D(32, kernel_size=(3, 3), input_shape=[28, 28, 1], activation='relu'),\n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    keras.layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(10, activation=\"softmax\")\n])","734d82c3":"model.summary()","5379270d":"model.compile(loss=keras.losses.sparse_categorical_crossentropy, optimizer='adam', metrics=['accuracy'])","467df1c4":"history = model.fit(X_2d_train, y_train, epochs=30, validation_split=0.1)","b478eec3":"predictions = model.predict_classes(X_2d_test)","5d67cce1":"predictions","4b8ed859":"output = pd.DataFrame({'ImageId': range(1, X_2d_test.shape[0] + 1), 'Label': predictions})","f98b31f3":"output.shape","3f965ef3":"output.to_csv('submission.csv', index=False)","e70ea735":"## Model Implementation","09292c68":"The pictures are unrolled","50d6dbf7":"## Output","3a3177e7":"> WORK IN PROGRESS","1016d1d7":"# MNIST Classification with Keras and TF","892d96cf":"## Import dataset","9110c1ba":"## Import necessary libraries","3df1b4b8":"## EDA","eaf7ae20":"## Data Preprocessing","47a8fc56":"## Feature engineering (Augmentation)"}}