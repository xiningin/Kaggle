{"cell_type":{"7891828f":"code","6c1d1c59":"code","0f1cda49":"code","0c4dc745":"code","a0ea1f41":"code","4f8e56c8":"code","ed321a4e":"code","2099c39b":"code","a77ca2e5":"code","77cae9c4":"markdown","e1410a13":"markdown","aa295825":"markdown","f3f6a7d6":"markdown","da177eae":"markdown","d78a4470":"markdown"},"source":{"7891828f":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import cross_validate, StratifiedKFold\nfrom sklearn.svm import NuSVC\nfrom sklearn.metrics import roc_auc_score\nfrom bayes_opt import BayesianOptimization\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.options.display.max_columns = None","6c1d1c59":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0f1cda49":"train_sample = train[train['wheezy-copper-turtle-magic']==0]\nX_train = train_sample.drop(['id', 'wheezy-copper-turtle-magic', 'target'], axis=1)\ny_train = train_sample['target']","0c4dc745":"def f(nu, tol):\n    model = NuSVC(\n        nu = nu,\n        tol = tol,\n        random_state = 42\n    )\n    \n    result = cross_validate(model, X_train, y_train, scoring='roc_auc')\n\n    return np.mean(result['test_score'])","a0ea1f41":"pbounds = {\n        'nu':(0.01, 1),\n        'tol':(1e-4, 1e-2)\n}\n\noptimizer = BayesianOptimization(f=f, pbounds=pbounds)\n\noptimizer.maximize()","4f8e56c8":"oof = np.zeros(len(train))\npreds = np.zeros(len(test))\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","ed321a4e":"for i in range(512):\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx_train = train2.index\n    idx_test = test2.index\n    train2.reset_index(drop=True,inplace=True)\n\n    df = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n    df_pca = PCA(n_components=40, random_state=4).fit_transform(df[cols])\n    df2 = StandardScaler().fit_transform(df_pca)\n    split = train2.shape[0]\n    train3 = df2[:split]\n    test3 = df2[split:]\n    \n    skf = StratifiedKFold(n_splits=5, random_state=42)\n    for train_index, test_index in skf.split(train2, train2['target']):\n        clf = NuSVC(probability=True, nu=0.1135, tol=0.008654)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof[idx_train[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        preds[idx_test] += clf.predict_proba(test3)[:,1] \/ skf.n_splits","2099c39b":"print(roc_auc_score(train['target'], oof))","a77ca2e5":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds\nsub.to_csv('submission.csv', index=False)","77cae9c4":"# submission","e1410a13":"# Libraries","aa295825":"# Inport","f3f6a7d6":"I tried to separate dataset and predict target with NuSVC.","da177eae":"# Prediction","d78a4470":"# BayesianOptimal"}}