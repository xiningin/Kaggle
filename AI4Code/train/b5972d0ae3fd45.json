{"cell_type":{"0da4a5d4":"code","93e7392b":"code","40e02c7d":"code","f1bf9c07":"code","1ae2eee5":"code","cd2c7d47":"code","2e07635a":"code","d3bf4c8d":"code","730d91d7":"code","bfcaedae":"code","f99c4a41":"code","2be363ab":"code","89d4e6cd":"code","8b58b23b":"code","8aaefc05":"code","af6cd5c5":"code","77cc0e8d":"code","14040bcd":"code","75a42e48":"code","a32e63a6":"code","9a8a6d3c":"code","8c1dbf23":"code","dfa6e061":"code","c59a3da3":"code","605a2e2d":"code","55ad9e17":"code","13bacd7d":"code","502819aa":"code","0ae9ceae":"code","8ce4ef99":"code","b312bcb8":"code","aa8194f1":"code","84202c74":"code","f5b7512f":"code","5fd1734c":"code","3a3089e5":"code","08a66555":"code","d64be92a":"code","135b14c9":"code","de144ac1":"code","de18fe70":"code","4a5d59f0":"code","12c7152d":"code","d94dee88":"code","cfe8c6f2":"code","282e6005":"code","61e4f20a":"code","b2643790":"code","74305da7":"code","f73c12f4":"code","e337ed5f":"code","0acfc687":"code","20d77aa6":"code","8e8d302b":"code","e0afdffe":"code","a8a5891c":"code","d9209661":"code","9c81447b":"code","72e480cc":"code","06ceed12":"code","ae3d3ff6":"markdown","d3661ab9":"markdown","f125e755":"markdown"},"source":{"0da4a5d4":"import numpy as np # linear algebra\nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport matplotlib as mpl\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.colors as mcolors\n\nimport operator \nimport random\n\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.layers import Input, Dropout, Dense, Embedding, SpatialDropout1D, concatenate, BatchNormalization, Flatten\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.preprocessing import text, sequence\nfrom tensorflow.keras.callbacks import Callback\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.losses import mean_squared_error as mse_loss\n\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau","93e7392b":"data=pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')","40e02c7d":"data.head()","f1bf9c07":"data.describe()","1ae2eee5":"train=data\nb=len(train)\nprint(\"total examples:\",b)\nfor col in train.columns:\n  a=train[col].isna().sum()\n  c=(a\/b)*100\n  print(col, \"has\", a ,\"NaN's with\",c,\"percentage\")","cd2c7d47":"fig, ax = plt.subplots(figsize=(50,25))\n# use a ranked correlation to catch nonlinearities\ncorr = train[[col for col in train.columns]].corr(method='spearman')\n_ = sns.heatmap(corr, annot=True,\n                xticklabels=corr.columns.values,\n                yticklabels=corr.columns.values)","2e07635a":"confirmed=data\ndates = confirmed.keys()\ndates","d3bf4c8d":"confirmed_df=data\ncols = confirmed_df.keys()\nconfirmed=data.loc[:, cols[4]:cols[-1]]\ndates = confirmed.keys()\n\nworld_cases = []\n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nindia_cases= []\nspain_cases = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n   \n    world_cases.append(confirmed_sum)\n    \n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    india_cases.append(confirmed_df[confirmed_df['Country\/Region']=='India'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())","730d91d7":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nworld_daily_increase = daily_increase(world_cases)\nchina_daily_increase = daily_increase(china_cases)\nitaly_daily_increase = daily_increase(italy_cases)\nus_daily_increase = daily_increase(us_cases)\nspain_daily_increase = daily_increase(spain_cases)\nindia_daily_increase = daily_increase(india_cases)","bfcaedae":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\n","f99c4a41":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","2be363ab":"type(world_cases)","89d4e6cd":"x = []\nfor sublist in adjusted_dates:\n    for item in sublist:\n        x.append(item)\n\n#x=adjusted_dates.tolist()\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=world_cases,mode='lines+markers',name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Over Time',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","8b58b23b":"fig = go.Figure()\nfig.add_trace(go.Bar(y=world_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","8aaefc05":"fig = go.Figure()\nfig.add_trace(go.Bar(y=china_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time in China',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","af6cd5c5":"fig = go.Figure()\nfig.add_trace(go.Bar(y=italy_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time in Italy',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","77cc0e8d":"fig = go.Figure()\nfig.add_trace(go.Bar(y=us_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time in US',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","14040bcd":"fig = go.Figure()\nfig.add_trace(go.Bar(y=spain_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time in Spain',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","75a42e48":"fig = go.Figure()\nfig.add_trace(go.Bar(y=india_daily_increase,name='Confirmed cases'))\nfig.update_layout(title='Coronavirus Cases Increasing Over Time in India',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","a32e63a6":"#x=adjusted_dates.tolist()\nfig = go.Figure()\n\n\nfig.add_trace(go.Scatter(x=x, y=india_cases,mode='lines+markers',name=\"India's cases\"))\n\n\nfig.update_layout(title='Coronavirus Cases Over Time In India',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","9a8a6d3c":"#x=adjusted_dates.tolist()\nfig = go.Figure()\n\n#fig.add_trace(go.Scatter(x=x, y=world_cases,mode='lines+markers',name='Totla cases'))\nfig.add_trace(go.Scatter(x=x, y=china_cases,mode='lines+markers',name=\"China's cases\"))\nfig.add_trace(go.Scatter(x=x, y=india_cases,mode='lines+markers',name=\"India's cases\"))\nfig.add_trace(go.Scatter(x=x, y=us_cases,mode='lines+markers',name=\"USA's cases\"))\nfig.add_trace(go.Scatter(x=x, y=italy_cases,mode='lines+markers',name=\"Italy's cases\"))\nfig.add_trace(go.Scatter(x=x, y=spain_cases,mode='lines+markers',name=\"Spain's cases\"))\n\nfig.update_layout(title='Coronavirus Cases Over Time',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","8c1dbf23":"#x=adjusted_dates.tolist()\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=x, y=world_cases,mode='lines+markers',name='Total cases'))\nfig.add_trace(go.Scatter(x=x, y=china_cases,mode='lines+markers',name=\"China's cases\"))\nfig.add_trace(go.Scatter(x=x, y=india_cases,mode='lines+markers',name=\"India's cases\"))\nfig.add_trace(go.Scatter(x=x, y=us_cases,mode='lines+markers',name=\"USA's cases\"))\nfig.add_trace(go.Scatter(x=x, y=italy_cases,mode='lines+markers',name=\"Italy's cases\"))\nfig.add_trace(go.Scatter(x=x, y=spain_cases,mode='lines+markers',name=\"Spain's cases\"))\n\nfig.update_layout(title='Coronavirus Cases Over Time',xaxis_title=\"Days Since 1\/22\/2020\",\n    yaxis_title=\"Number of cases\",)\nfig.update_yaxes(nticks=20)\nfig.update_xaxes(nticks=36)\nfig.show()","dfa6e061":"unique_countries =  list(confirmed_df['Country\/Region'].unique())\ncountry_confirmed_cases = []\nlatest_confirmed = confirmed_df[dates[-1]]\nno_cases = []\nfor i in unique_countries:\n    cases = latest_confirmed[confirmed_df['Country\/Region']==i].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_confirmed[confirmed_df['Country\/Region']==unique_countries[i]].sum()","c59a3da3":"# number of cases per country\/region\nprint('Confirmed Cases by Countries\/Regions:')\nfor i in range(len(unique_countries)):\n    print(f'{unique_countries[i]}: {country_confirmed_cases[i]} cases')","605a2e2d":"visual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[10:])\n\nfor i in range(len(country_confirmed_cases[:10])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n    \nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","55ad9e17":"plt.figure(figsize=(16, 9))\nplt.barh(visual_unique_countries, visual_confirmed_cases)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","13bacd7d":"confirmed_df.head(),20,22","502819aa":"confirmed_df['first_1']=confirmed_df['1\/22\/20']\nconfirmed_df['first_2']=confirmed_df['2\/13\/20']\nconfirmed_df['first_3']=confirmed_df['2\/15\/20']\nconfirmed_df['mid_1']=confirmed_df['3\/13\/20']\nconfirmed_df['mid_2']=confirmed_df['3\/15\/20']\nconfirmed_df['mid_3']=confirmed_df['3\/17\/20']\nconfirmed_df['last_1']=confirmed_df['3\/27\/20']\nconfirmed_df['last_2']=confirmed_df['3\/25\/20']\nconfirmed_df['last_3']=confirmed_df['3\/22\/20']","0ae9ceae":"confirmed_df.head()","8ce4ef99":"full_table = confirmed_df.melt(id_vars=[\"Province\/State\", \"Country\/Region\", \"Lat\", \"Long\",\"first_1\",\"first_2\",\n                                        \"first_3\",\"mid_1\",\"mid_2\",\"mid_3\",\"last_1\",\"last_2\",\"last_3\"], var_name=\"Date\", value_name=\"Confirmed\")\n\nfull_table['Date'] = pd.to_datetime(full_table['Date'])\nfull_table.head()","b312bcb8":"len(full_table)","aa8194f1":"#full_table.head()","84202c74":"data=full_table.drop(['Lat','Long'],axis=1)","f5b7512f":"data['days']=(data['Date']-pd.to_datetime(\"2020-01-22\")).dt.days","5fd1734c":"data.tail()","3a3089e5":"data['Confirmed'].max()","08a66555":"from sklearn.preprocessing import LabelEncoder\nle1 = LabelEncoder()\nle2 = LabelEncoder()","d64be92a":"categoricals=[\"Province\/State\", \t\"Country\/Region\"]\nnumericals=[\"days\",\"first_1\",\"first_2\",\"first_3\",\"mid_1\",\"mid_2\",\"mid_3\",\"last_1\",\"last_2\",\"last_3\"]","135b14c9":"data.fillna(value=\"no\",inplace=True)\ndata.tail()","de144ac1":"data[\"Province\/State\"]=le1.fit_transform(data[\"Province\/State\"])\ndata[\"Country\/Region\"]=le2.fit_transform(data[\"Country\/Region\"])","de18fe70":"data.tail()","4a5d59f0":"from sklearn.preprocessing import StandardScaler\nscaler1 = StandardScaler()\nscaler2 = StandardScaler()\nscaler3 = StandardScaler()\nscaler4 = StandardScaler()\nscaler5 = StandardScaler()\nscaler6 = StandardScaler()\nscaler7 = StandardScaler()\nscaler8 = StandardScaler()\nscaler9 = StandardScaler()\nscaler10 = StandardScaler()\nscaler11 = StandardScaler()\n","12c7152d":"data[[\"Confirmed\"]]=scaler1.fit_transform(data[[\"Confirmed\"]].to_numpy())\n","d94dee88":"data[[\"days\"]]=scaler2.fit_transform(data[[\"days\"]].to_numpy())","cfe8c6f2":"data[[\"first_1\"]]=scaler3.fit_transform(data[[\"first_1\"]].to_numpy())\ndata[[\"first_2\"]]=scaler4.fit_transform(data[[\"first_2\"]].to_numpy())\ndata[[\"first_3\"]]=scaler5.fit_transform(data[[\"first_3\"]].to_numpy())\n\ndata[[\"mid_1\"]]=scaler6.fit_transform(data[[\"mid_1\"]].to_numpy())\ndata[[\"mid_2\"]]=scaler7.fit_transform(data[[\"mid_2\"]].to_numpy())\ndata[[\"mid_3\"]]=scaler8.fit_transform(data[[\"mid_3\"]].to_numpy())\n\ndata[[\"last_1\"]]=scaler9.fit_transform(data[[\"last_1\"]].to_numpy())\ndata[[\"last_2\"]]=scaler10.fit_transform(data[[\"last_2\"]].to_numpy())\ndata[[\"last_3\"]]=scaler11.fit_transform(data[[\"last_3\"]].to_numpy())","282e6005":"data=data.drop(\"Date\",axis=1)\ndata.head()","61e4f20a":"val=data[data.days>61]\ntrain=data[data.days<62]","b2643790":"train.describe()","74305da7":"#Unique values in each column\nfor col in train.columns:\n  #print(col)\n  print(\"the number of unique values in \"+col +\" is \"+str(len(data[col].value_counts())))\n  ","f73c12f4":"def model(dense_dim_1=16, dense_dim_2=16, dense_dim_3=16, dense_dim_4=8, \ndropout1=0.4, dropout2=0.3, dropout3=0.3, dropout4=0.4, lr=0.0005,pre_model=None):\n\n    #Inputs   #16,16,16,8\n    state = Input(shape=[1], name=\"Province\/State\")\n    country = Input(shape=[1], name=\"Country\/Region\")\n    days = Input(shape=[1], name=\"days\")\n    \n    first_1=Input(shape=[1], name=\"first_1\")\n    first_2 =Input(shape=[1], name=\"first_2\")\n    first_3 =Input(shape=[1], name=\"first_3\")\n\n    mid_1 =Input(shape=[1], name=\"mid_1\")\n    mid_2 =Input(shape=[1], name=\"mid_2\")\n    mid_3 =Input(shape=[1], name=\"mid_3\")\n\n    last_1 =Input(shape=[1], name=\"last_1\")\n    last_2 \t=Input(shape=[1], name=\"last_2\")\n    last_3 \t=Input(shape=[1], name=\"last_3\")\n   \n    #Embeddings layers\n    emb_state = Embedding(77, 4)(state)\n    emb_country = Embedding(176, 8)(country) #change these dimension based on number of unique countries and states\n    \n\n    concat_emb = concatenate([\n           Flatten() (emb_state)\n         , Flatten() (emb_country)\n         \n    ])\n    \n    categ = Dropout(dropout1)(Dense(dense_dim_1,activation='relu') (concat_emb))\n    categ = BatchNormalization()(categ)\n    categ = Dropout(dropout2)(Dense(dense_dim_2,activation='relu') (categ))\n    \n    #main layer\n    main_l = concatenate([\n          categ\n        , days,first_1 ,first_2, first_3,\tmid_1, mid_2,\tmid_3, last_1, last_2,\n         \tlast_3 \t        \n    ])\n    \n    main_l = Dropout(dropout3)(Dense(dense_dim_3,activation='relu') (main_l))\n    main_l = BatchNormalization()(main_l)\n    main_l = Dropout(dropout4)(Dense(dense_dim_4,activation='relu') (main_l))\n    \n    #output\n    output = Dense(1) (main_l)\n\n    model = Model([ state,\n                    country, \n                    days,first_1 ,first_2, first_3,\tmid_1, mid_2,\tmid_3, last_1, last_2,last_3 ], output)\n\n    model.compile(optimizer = Adam(lr=lr),\n                  loss= mse_loss,\n                  metrics=[root_mean_squared_error])\n    return model\n\ndef root_mean_squared_error(y_true, y_pred):\n    return K.sqrt(K.mean(K.square(y_pred - y_true), axis=0))","e337ed5f":"def get_keras_data(df, num_cols, cat_cols):\n    cols = num_cols + cat_cols\n    X = {col: np.array(df[col]) for col in cols}\n    return X","0acfc687":"Y_train=train.Confirmed\nX_train=train.drop('Confirmed',axis=1)\nY_valid=val.Confirmed\nX_valid=val.drop(\"Confirmed\",axis=1)","20d77aa6":"X_t = get_keras_data(X_train, numericals, categoricals)\nX_v = get_keras_data(X_valid, numericals, categoricals)","8e8d302b":"keras_model=model(lr=0.005)","e0afdffe":"early_stopping = EarlyStopping(patience=105, verbose=2)\nmodel_checkpoint = ModelCheckpoint(\"corona.hdf5\",\n                                       save_best_only=True, verbose=2, monitor='val_root_mean_squared_error', mode='min')\nhist = keras_model.fit(X_t, Y_train, batch_size=32, epochs=300, #bs=32,\n                            validation_data=None, validation_split=0.15,\n                            callbacks=[early_stopping, model_checkpoint])","a8a5891c":"plt.plot(hist.history['val_loss'])","d9209661":"plt.plot(hist.history['val_root_mean_squared_error'])","9c81447b":"Modl=load_model(\"corona.hdf5\",custom_objects={'root_mean_squared_error': root_mean_squared_error})","72e480cc":"\ndef predict(Country,State=None,day=70):\n  entry=pd.DataFrame()\n  if not State:\n    entry['Province\/State']=[\"no\"]\n  entry['Country\/Region']=[Country]\n  entry['days']=[day]\n\n  \n  try:\n    entry['Province\/State']=le1.transform(entry[\"Province\/State\"])\n    entry[\"Country\/Region\"]=le2.transform(entry[\"Country\/Region\"])\n    for col in numericals:\n      entry[col]=data[(data['Province\/State']==entry['Province\/State'].loc[0]) & (data['Country\/Region']==entry[\"Country\/Region\"].loc[0])].iloc[0][col]\n    entry[[\"days\"]]=scaler2.transform(entry[[\"days\"]].to_numpy())\n    for_prediction=get_keras_data(entry,numericals,categoricals)\n    result=Modl.predict(for_prediction)\n    result=scaler1.inverse_transform(result)\n    print(\"Number of cases will be \"+ str(int(result)))\n \n\n  except:\n    print(\"Enter the Country and State which are in dataset\")\n","06ceed12":"predict(\"India\")","ae3d3ff6":"#Predictions","d3661ab9":"Dataset obtained from [here](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv)","f125e755":"# Visualizations"}}