{"cell_type":{"049aefdb":"code","fc181e23":"code","38c0487a":"code","eccc4dda":"code","f82e2dd5":"code","ed6d5ec3":"code","9777572c":"code","fdc948f2":"code","06f0ce06":"code","3553601f":"code","40a8cdbc":"code","882c6fcd":"code","b81d7c05":"code","2aa580be":"code","de42db91":"code","15cb24dd":"code","c29802cf":"code","1375ca85":"code","efdbfe29":"code","27327fa5":"code","69ab458d":"code","e7f368db":"code","3606a430":"code","edfcb3ca":"code","12264a6e":"code","a7afa615":"code","88e4a17b":"code","8eff0b49":"code","5f208d30":"code","1a045a0c":"code","0e64df72":"code","40f1b967":"code","16ac6ab5":"markdown","6a306863":"markdown"},"source":{"049aefdb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc181e23":"# import libraries\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","38c0487a":"# Load data using pandas.read_csv()\n\ndata = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","eccc4dda":"# View partial data\n\ndata.head()","f82e2dd5":"# View data dimensions\n\ndata.shape","ed6d5ec3":"# Extract the label column and convert it to numpy array\n\nlabels = data.pop('label').to_numpy()","9777572c":"labels","fdc948f2":"# Looking at the data dimensions again, the label column has been extracted\n\ndata.shape","06f0ce06":"data = data.to_numpy().reshape(-1,28,28)","3553601f":"plt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(labels[i])","40a8cdbc":"# Add dimension\n\ndata = np.expand_dims(data,axis=-1)\nlabels = np.expand_dims(labels,axis=-1)","882c6fcd":"# You can see that there's one more dimension at the end\n\ndata.shape","b81d7c05":"labels.shape","2aa580be":"# Fill the image with zeros around it\n\ndata = tf.pad(data,[[0,0],[2,2],[2,2],[0,0]])","de42db91":"# You can see the shape change\n\ndata.shape","15cb24dd":"num = data.shape[0] \/\/ 10\ntrain_data, val_data, test_data = tf.split(data,[num*8, num, num])\ntrain_label, val_label, test_label = tf.split(labels,[num*8, num, num])","c29802cf":"print('train:',train_data.shape,'-- label:',train_label.shape)\nprint('validition:',val_data.shape,'-- label:',val_label.shape)\nprint('test:',test_data.shape,'-- label:',test_label.shape)","1375ca85":"# Show some pictures. Everything is all right\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(train_data[i])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(train_label[i][0].numpy())","efdbfe29":"train_ds = tf.data.Dataset.from_tensor_slices((train_data,train_label)).shuffle(33600,seed=42).batch(128)\nval_ds = tf.data.Dataset.from_tensor_slices((val_data,val_label)).shuffle(33600,seed=42).batch(128)\ntest_ds = tf.data.Dataset.from_tensor_slices((test_data,test_label)).shuffle(33600,seed=42).batch(128)","27327fa5":"# Use 'take' to view a batch of data\n\nplt.figure(figsize=(10,10))\n\nfor image,label in train_ds.take(1):\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[i])\n        plt.xticks([])\n        plt.yticks([])\n        plt.xlabel(label[i][0].numpy())","69ab458d":"# The shape of the picture\n\nimage_shape = (32,32,1)","e7f368db":"# Use Monte-Carlo Dropout to reduce overfitting\n\nclass MCDropout(layers.Dropout):\n    def call(self,inputs):\n        return super().call(inputs,training=True)\n\n\n# Use a LeNet-style neural network. Some parameters are adjusted\n\ninputs = layers.Input(shape=image_shape)\nx = layers.experimental.preprocessing.Rescaling(1.\/255)(inputs) # normalized\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.MaxPooling2D(2,strides=2)(x)\nx = layers.Conv2D(128,5,strides=1,activation='relu')(x)\nx = layers.Flatten()(x)\nx = layers.Dense(84,activation='relu')(x)\nx = MCDropout(0.1)(x)\noutputs = layers.Dense(10)(x)\n\nmodel = keras.Model(inputs,outputs)\n\nmodel.compile(\n    optimizer=keras.optimizers.Adam(lr=0.001),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy']\n)","3606a430":"# View network architecture\nmodel.summary()","edfcb3ca":"# Using EarlyStopping, end training when val_accuracy is not improved for 10 consecutive times\nearly_stopping = keras.callbacks.EarlyStopping(monitor='val_accuracy',mode='max',\n                                    patience=10,restore_best_weights=True)\n\n# Using ReduceLROnPlateau, the learning rate is reduced by half when val_accuracy is not improved for 5 consecutive times\nlr_scheduler = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',mode='max',factor=0.5,patience=5)\n\n# training\nhistory = model.fit(train_ds,batch_size=128,epochs=100,validation_data=val_ds,\n                    callbacks=[early_stopping,lr_scheduler])","12264a6e":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([min(plt.ylim()),1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([0,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","a7afa615":"# test model\nmodel.evaluate(test_ds,verbose=2)","88e4a17b":"# load data\n\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","8eff0b49":"# process data\n\ntest = test.to_numpy().reshape(-1,28,28)\ntest = np.expand_dims(test,axis=-1)\ntest = tf.pad(test,[[0,0],[2,2],[2,2],[0,0]])\n\ntest.shape","5f208d30":"# predict\nresult =  model.predict(test)\n\nresult.shape","1a045a0c":"# get predict label\npredict_label = np.argmax(result,axis=-1)\n\npredict_label.shape","0e64df72":"# Show some prediction results\n\nplt.figure(figsize=(10,10))\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(test[i,...,0])\n    plt.xticks([])\n    plt.yticks([])\n    plt.xlabel(predict_label[i])","40f1b967":"sample_submission['Label'] = predict_label\nsample_submission.to_csv('submission.csv', index=False)","16ac6ab5":"# Build model","6a306863":"# Submission"}}