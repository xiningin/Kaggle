{"cell_type":{"f5426fd2":"code","173d37c7":"code","c15a4f21":"code","3a06783a":"code","444882f1":"code","f9d34675":"code","74ef1abc":"code","cb8ade0a":"code","6450d82c":"code","f0078e57":"code","21d14522":"code","ab50cecc":"code","a762a916":"code","d8d548e7":"code","6afd195a":"code","4eb57ac8":"code","b84260dd":"code","040fc085":"code","b2534e9b":"code","b1fea19b":"code","47fb8cbc":"code","efaca9c2":"code","6de87958":"code","52a885c7":"code","0c2bf145":"code","8967da17":"code","327512b9":"code","83780239":"code","cf6a33ef":"code","f8b94170":"markdown","54ef869f":"markdown","3de26f48":"markdown","52fa70eb":"markdown","5e3e21fe":"markdown","ac156ab8":"markdown","9a11591f":"markdown","487832c8":"markdown","aa80eb4a":"markdown","c535422d":"markdown","b60e9526":"markdown","e59f3df9":"markdown","1f884d38":"markdown","b76944ab":"markdown","65d0d737":"markdown","1b0ad398":"markdown","85854352":"markdown","857ed0f5":"markdown","df088830":"markdown","a3ebdb48":"markdown","d4b73f11":"markdown","69067224":"markdown","973ee71d":"markdown","09b4e725":"markdown","7b5872b4":"markdown","471f600d":"markdown","9ae0dd6b":"markdown","885c1361":"markdown","4b2a325e":"markdown","595b7ff0":"markdown"},"source":{"f5426fd2":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom google.cloud import bigquery \nimport bq_helper\nfrom bq_helper import BigQueryHelper","173d37c7":"#Using BigQuery\nbq = bigquery.Client()\n\n#Using BigQueryHelper\ngoogle_analytics = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\", dataset_name=\"data:google_analytics_sample\")\nbqh = BigQueryHelper(\"bigquery-public-data\", \"google_analytics_sample\")","c15a4f21":"#Listing\ntable_list = bqh.list_tables()\n\n#Print the result. Note: Elements that are not string by string must be parsed in order to be represented. This is done by entering the element in the str() function.\nprint ('Number of tables: ' + str(len(table_list)) +  '\\nFirst 3 tables: ' + str(table_list[0:3]))","3a06783a":"bqh.head(table_list[0], num_rows=10)","444882f1":"bqh.table_schema(table_list[0])","f9d34675":"#The query to be executed\nsize_query = \"\"\"\nSELECT\n    SUM(size_bytes) Bytes\nFROM\n    `bigquery-public-data.google_analytics_sample.__TABLES__`\n\"\"\"\n\n#Query execution and save the result in a data frame. The name of the colums of the dataset are defined in the query.\nsize_result = bq.query(size_query).to_dataframe()\n\nprint('The dataset size is ' + str(round(size_result.iloc[0]['Bytes']\/(2**30),3)) + ' GB')","74ef1abc":"JSON_query = \"\"\"\nSELECT\n    totals,\n    trafficSource,\n    device,\n    geoNetwork,\n    customDimensions,\n    hits\nFROM\n    `bigquery-public-data.google_analytics_sample.\"\"\"+ bqh.list_tables()[1] +\"\"\"`\nLIMIT 1\n\"\"\"\nJSON_result = bq.query(JSON_query).to_dataframe()\n\nprint('totals: \\n' +\nstr(JSON_result.iloc[0]['totals']) +\n'\\n\\ntrafficSource: \\n'+\nstr(JSON_result.iloc[0]['trafficSource'])+\n'\\n\\ndevice: \\n'+\nstr(JSON_result.iloc[0]['device']) +\n'\\n\\ngeoNetwork: \\n'+\nstr(JSON_result.iloc[0]['geoNetwork'])+\n'\\n\\ncustomDimensions: \\n'+\nstr(JSON_result.iloc[0]['customDimensions'])+\n'\\n\\nhits: \\n' +\nstr(JSON_result.iloc[0]['hits']))\n","cb8ade0a":"year_query = \"\"\"\nSELECT substr(date,0,4) Year,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Year\n\"\"\"\nyear_result = bq.query(year_query).to_dataframe()\nyear_result","6450d82c":"#The bar plot plot\nyear_graph = year_result.plot(kind='bar',x='Year',y='Visits')\n#Title\nyear_graph.set_title('Visits per year')\n#Removing the legend because does not add any important information\nyear_graph.legend().remove()\n#Set the y and x axis labels\nyear_graph.set_ylabel('Visits')\nyear_graph.set_xlabel('Year')\nplt.show()","f0078e57":"month_query = \"\"\"\nSELECT CONCAT(substr(date,0,4),'-', substr(date,5,2)) Month,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Month\nORDER BY Month\n\"\"\"\nmonth_result = bq.query(month_query).to_dataframe()\nmonth_result","21d14522":"month_graph = month_result.plot(kind='line',x='Month',y='Visits')\nmonth_graph.set_title('Visits per month')\nmonth_graph.legend().remove()\nmonth_graph.set_ylabel('Visits')\nmonth_graph.set_xlabel('Month')\n#Adding a grid in the plot for improve the visualization\nmonth_graph.xaxis.grid(True, linestyle='-.', which='major', color='grey', alpha=.2)\nmonth_graph.yaxis.grid(True, linestyle='-.', which='major', color='grey', alpha=.2)\nplt.show()","ab50cecc":"zone_query = \"\"\"\nSELECT geoNetwork.continent Area,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Area\nORDER BY Visits\n\"\"\"\nzone_result = bq.query(zone_query).to_dataframe()\nzone_result","a762a916":"zone_graph = zone_result.plot(kind='bar',x='Area',y='Visits')\nzone_graph.set_title('Visits per area')\nzone_graph.legend().remove()\nzone_graph.set_ylabel('Visits')\nzone_graph.set_xlabel('Area')\nplt.show()","d8d548e7":"country_query = \"\"\"\nSELECT geoNetwork.country Country,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Country\nORDER BY Visits DESC\n\"\"\"\ncountry_result = bq.query(country_query).to_dataframe()\ncountry_result","6afd195a":"country_graph = country_result.iloc[0:10].plot(kind='bar',x='Country',y='Visits')\ncountry_graph.set_title('Visits per country')\ncountry_graph.legend().remove()\ncountry_graph.set_ylabel('Visits')\ncountry_graph.set_xlabel('Country')\nplt.show()","4eb57ac8":"city_query = \"\"\"\nSELECT geoNetwork.city City,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nWHERE geoNetwork.country = (\n    SELECT Country FROM ( \n        SELECT geoNetwork.country Country, COUNT(*) Visits \n            FROM \n                `bigquery-public-data.google_analytics_sample.*`\n                GROUP BY Country ORDER BY Visits DESC) S LIMIT 1)\nGROUP BY City\nORDER BY Visits DESC\n\"\"\"\ncity_result = bq.query(city_query).to_dataframe()\ncity_result","b84260dd":"city_graph = city_result.iloc[1:6].plot(kind='bar',x='City',y='Visits')\ncity_graph.set_title('Visits per city')\ncity_graph.legend().remove()\ncity_graph.set_ylabel('Visits')\ncity_graph.set_xlabel('City')\nplt.show()","040fc085":"city_an_query = \"\"\"\nSELECT geoNetwork.city City,\n        geoNetwork.country Country,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nWHERE geoNetwork.country = (\n    SELECT Country FROM ( \n        SELECT geoNetwork.country Country, COUNT(*) Visits \n            FROM \n                `bigquery-public-data.google_analytics_sample.*`\n                GROUP BY Country ORDER BY Visits DESC) S LIMIT 1)\nGROUP BY City, Country\nORDER BY Visits DESC\n\"\"\"\ncity_an_result = bq.query(city_an_query).to_dataframe()\ncity_an_result","b2534e9b":"city_country_an_query = \"\"\"\nSELECT  City,\n        COUNT(*) CountCountry\n        FROM (\n            SELECT DISTINCT geoNetwork.city City, geoNetwork.country Country  \n            FROM `bigquery-public-data.google_analytics_sample.*`\n            )\nGROUP BY City\nHAVING CountCountry > 1\nORDER BY CountCountry DESC         \n\"\"\"\ncity_country_an_result = bq.query(city_country_an_query).to_dataframe()\n\nfor i in range(city_country_an_result.shape[0]):\n    print(str(city_country_an_result.iloc[i]['City']) + ' -> ' + str(city_country_an_result.iloc[i]['CountCountry']))","b1fea19b":"city_country_test_query = \"\"\"\n    SELECT geoNetwork.city City, \n            geoNetwork.country Country,\n            Count(*) Count, \n            ROW_NUMBER() OVER (PARTITION BY geoNetwork.city ORDER BY Count(*) DESC) AS row_num \n    FROM `bigquery-public-data.google_analytics_sample.*`\n    GROUP BY Country, City\n    ORDER BY City, row_num\n\"\"\"\ncity_country_test_result = bq.query(city_country_test_query).to_dataframe()\n\nfor i in range(city_country_test_result.shape[0]):\n    print(str(city_country_test_result.iloc[i]['City']) + ' -> ' + \n          str(city_country_test_result.iloc[i]['Country']) + \n          ' (RANKING: ' + str(city_country_test_result.iloc[i]['row_num']) + \n          ' COUNTER: ' + str(city_country_test_result.iloc[i]['Count']) + ')' )","47fb8cbc":"city_country_query = \"\"\"\nSELECT \n    Country,\n    City\nFROM (\n        SELECT geoNetwork.city City, \n            geoNetwork.country Country,\n            Count(*) Count, \n            ROW_NUMBER() OVER (PARTITION BY geoNetwork.city ORDER BY Count(*) DESC) AS row_num \n        FROM `bigquery-public-data.google_analytics_sample.*`\n        GROUP BY Country, City\n        ORDER BY City, row_num )\nWHERE row_num = 1\nORDER BY Country, City\n\"\"\"\ncity_country_result = bq.query(city_country_query).to_dataframe()\n\nfor i in range(city_country_result.shape[0]):\n    print(str(city_country_result.iloc[i]['Country']) + ' -> ' + str(city_country_result.iloc[i]['City']) )","efaca9c2":"#We store this query in a variable because it will be used twice in the subsequent query.\ncountry_sub_query = \"\"\"(\nSELECT \n    Country \nFROM ( \n        SELECT geoNetwork.country Country, COUNT(*) Visits \n            FROM \n                `bigquery-public-data.google_analytics_sample.*`\n                GROUP BY Country ORDER BY Visits DESC) S \nLIMIT 1)\n\"\"\"\n\n\ncity_sol_query = \"\"\"\nSELECT geoNetwork.city City,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nWHERE geoNetwork.country = \"\"\"+ country_sub_query  +\"\"\" AND \n        geoNetwork.city  IN (SELECT \n                        City\n                    FROM (\n                            SELECT geoNetwork.city City, geoNetwork.country Country,Count(*) Contador, \n                            ROW_NUMBER() OVER (PARTITION BY geoNetwork.city ORDER BY Count(*) DESC) AS row_num \n                                FROM `bigquery-public-data.google_analytics_sample.*` GROUP BY Country, City )\n            WHERE  row_num = 1 AND Country = \"\"\"+ country_sub_query  +\"\"\")\nGROUP BY geoNetwork.city \nORDER BY Visits DESC\n\"\"\"\ncity_sol_result = bq.query(city_sol_query).to_dataframe()\n\nprint('Number of records before -> Number of records after\\n' \n      + str(city_result.shape[0]) + ' -> ' + str(city_sol_result.shape[0]) \n      + '\\nReduction percentage: ' + str(round( 100*(city_result.shape[0]- city_sol_result.shape[0])\/city_result.shape[0],2)) + ' %'  )\n","6de87958":"social_query = \"\"\"\nSELECT socialEngagementType SocialEngadgementType,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY SocialEngadgementType\nORDER BY Visits DESC\n\"\"\"\nsocial_result = bq.query(social_query).to_dataframe()\nsocial_result","52a885c7":"channel_query = \"\"\"\nSELECT channelGrouping ChannelGrouping,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY ChannelGrouping\nORDER BY Visits DESC\n\"\"\"\nchannel_result = bq.query(channel_query).to_dataframe()\nchannel_result","0c2bf145":"channel_graph = channel_result.plot(kind='bar',x='ChannelGrouping',y='Visits')\nchannel_graph.set_title('Visits by channel grouping type')\nchannel_graph.legend().remove()\nchannel_graph.set_ylabel('Visits')\nchannel_graph.set_xlabel('Channel grouping type')\nplt.show()","8967da17":"channel_month_query = \"\"\"\nSELECT channelGrouping ChannelGrouping,\n        CONCAT(substr(date,0,4),'-', substr(date,5,2)) Month,\n        COUNT(*) Visits\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY ChannelGrouping, Month\nORDER BY Month, ChannelGrouping\n\"\"\"\nchannel_month_result = bq.query(channel_month_query).to_dataframe()\nchannel_month_result","327512b9":"#To plot multiple lines plot use a for loop\nfor i in range(channel_result.shape[0]):\n      plt.plot(channel_month_result.loc[channel_month_result['ChannelGrouping'] == channel_result.iloc[i][\"ChannelGrouping\"]]['Month'],channel_month_result.loc[channel_month_result['ChannelGrouping'] == channel_result.iloc[i][\"ChannelGrouping\"]]['Visits'] , label = channel_result.iloc[i][\"ChannelGrouping\"])\n\nplt.title('Visits per month by channel grouping type')\n\nplt.ylabel('Visits')\n# Rotation of the x axis marks to visualize it properly \nplt.xticks(rotation = '90')\n# To improve the display, the legend box is taken out of the drawing area.\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\nplt.grid(True, linestyle='-.', which='major', axis = 'both' ,color='grey', alpha=.2)\n\n#To save the plot\nplt.savefig('Visits_perMonth_by_channelGrouping.png')\nplt.show()","83780239":"#Informaci\u00f3n compuesto por los 3 datos\ndevice_query = \"\"\"\nSELECT device.browser Browser,\n        device.operatingSystem OS,\n        device.isMobile Smartphone,\n        COUNT(*) Count\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Browser, OS, Smartphone\nORDER BY Count DESC\n\"\"\"\ndevice_result = bq.query(device_query).to_dataframe()\n\nbrowser_query = \"\"\"\nSELECT device.browser Browser,\n        COUNT(*) Count\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY Browser\nORDER BY Count DESC\n\"\"\"\nbrowser_result = bq.query(browser_query).to_dataframe()\n\nos_query = \"\"\"\nSELECT device.operatingSystem OS,\n        COUNT(*) Count\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\nGROUP BY OS\nORDER BY Count DESC\n\"\"\"\nos_result = bq.query(os_query).to_dataframe()\n\nbrowser_desktop_query = \"\"\"\nSELECT device.browser Browser,\n        COUNT(*) Count\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\n        WHERE device.isMobile = False\nGROUP BY Browser\nORDER BY Count DESC\n\"\"\"\nbrowser_desktop_result = bq.query(browser_desktop_query).to_dataframe()\n\nbrowser_smartphone_query = \"\"\"\nSELECT device.browser Browser,\n        COUNT(*) Count\n        FROM \n            `bigquery-public-data.google_analytics_sample.*`\n        WHERE device.isMobile = True\nGROUP BY Browser\nORDER BY Count DESC\n\"\"\"\nbrowser_smartphone_result = bq.query(browser_smartphone_query).to_dataframe()","cf6a33ef":"# General data of the charts.\nfig, ax = plt.subplots(2,2)\nfig.set_figheight(16)\nfig.set_figwidth(16)\nfig.suptitle('OS and browser information', size = '16')\n\n#Dividers are drawn\nplt.plot([-1.75, -1.75], [-1.25, 4.5], color='grey', lw=1, clip_on=False)\nplt.plot([-4.25, 1.25], [1.5, 1.5], color='grey', lw=1, clip_on=False)\n\n#Graph 1: Position 0.0\n#The DataFrame is modified to be readable, the first 5 results are printed and the rest are grouped under the label \"Others\"\n#First the vectors are assembled\nnav_res = []\ncont_res = []\ncont_sum = 0\nfor i in range(browser_result.shape[0]):\n    if (i <= 4):\n        nav_res.append(browser_result.iloc[i]['Browser'])\n        cont_res.append(browser_result.iloc[i]['Count'])\n    else:\n        cont_sum += browser_result.iloc[i]['Count']\n            \nnav_res.append('Others')\ncont_res.append(cont_sum)\n\n#Then the dataset is formed\nbrowser_result_print = pd.DataFrame({\"Browser\":nav_res, \"Count\":cont_res})\n    \nax[0, 0].pie(browser_result_print.iloc[:]['Count'], labels = browser_result_print.iloc[:]['Browser'], autopct='%.0f%%', startangle=180)\nax[0,0].set_title('Browsers', size = '14')\n\n#Graph 2: Position 0.1\n#The same operation is performed with the operating system graphic. \nOS_res = []\ncont_res = []\ncont_sum = 0\nfor i in range(os_result.shape[0]):\n    if (i <= 5):\n        OS_res.append(os_result.iloc[i]['OS'])\n        cont_res.append(os_result.iloc[i]['Count'])\n    else:\n        cont_sum += os_result.iloc[i]['Count']\n            \nOS_res.append('Others')\ncont_res.append(cont_sum)\n\n#Then the dataset is formed\nOS_result_print = pd.DataFrame({\"OS\":OS_res, \"Count\":cont_res})\n\nax[0, 1].pie(OS_result_print.iloc[:]['Count'], labels = OS_result_print.iloc[:]['OS'], autopct='%.0f%%' )\nax[0,1].set_title('OS', size = '14')\n\n#Graph 3: Position 1.0\n# Use of browsers on desktop computers\nnav_res = []\ncont_res = []\ncont_sum = 0\nfor i in range(browser_desktop_result.shape[0]):\n    if (i <= 4):\n        nav_res.append(browser_desktop_result.iloc[i]['Browser'])\n        cont_res.append(browser_desktop_result.iloc[i]['Count'])\n    else:\n        cont_sum += browser_desktop_result.iloc[i]['Count']\n            \nnav_res.append('Others')\ncont_res.append(cont_sum)\n\n\nbrowser_result_desktop_print = pd.DataFrame({\"Browser\":nav_res, \"Count\":cont_res})\n    \nax[1, 0].pie(browser_result_desktop_print.iloc[:]['Count'], labels = browser_result_desktop_print.iloc[:]['Browser'], autopct='%.0f%%', startangle=180 )\nax[1,0].set_title('Desktop browsers', size = '14')\n\n#Graph 4: Position 1.1\n# Use of browsers on mobile devices\nnav_res = []\ncont_res = []\ncont_sum = 0\nfor i in range(browser_smartphone_result.shape[0]):\n    if (i <= 4):\n        nav_res.append(browser_smartphone_result.iloc[i]['Browser'])\n        cont_res.append(browser_smartphone_result.iloc[i]['Count'])\n    else:\n        cont_sum += browser_smartphone_result.iloc[i]['Count']\n            \nnav_res.append('Others')\ncont_res.append(cont_sum)\n\n\nbrowser_smartphone_result_print = pd.DataFrame({\"Browser\":nav_res, \"Count\":cont_res})\n    \nax[1, 1].pie(browser_smartphone_result_print.iloc[:]['Count'], labels = browser_smartphone_result_print.iloc[:]['Browser'], autopct='%.0f%%' )\nax[1,1].set_title('Mobile browsers', size = '14')\nplt.savefig('OS_and_browser_info.png')\n\n","f8b94170":"#### 2.2. Visualization of the result\n\nThe best way to represent this data is with a line diagram.","54ef869f":"### 4. **Visits per country**\n\n#### 4.1. Querying and obtaining the dataset ","3de26f48":"### 7. **Using browsers, operating systems and mobile phones**\nThis information is studied in a unitary way as it can be very related.\n\n#### 7.1. Querying and obtaining the dataset","52fa70eb":"The size of the data you are working with is displayed. This gives us a reference of the best way to work and the moment in which it is more optimal to dump the data in a Pandas DataFrame.\n\n### [SQL Syntax in BigQuery](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/query-syntax)\n\n**VERY IMPORTANT:** Avoid the *SELECT * FROM ...* due to the high computational (and economic) cost of this query More information about good practices in [BigQuery prices](https:\/\/cloud.google.com\/bigquery\/pricing).\n\nThe size of the dataset is queried and  divide the size in bytes by $2^{30}$ to get the size in GB.","5e3e21fe":"To minimize these errors, a query could be made that includes the \"correct list\" of countries and cities. Assuming that the correct country containing that city is the one from which most visits have occurred. That is, the one that has the highest counter of the country\/city relationship and the visits made.\n\nThis is done by partitioning the data using the [ROW_NUMBER function](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/numbering_functions?hl=es-419). The ROW_NUMBER function is chosen over other functions because of the way it manages ties.","ac156ab8":"#### 4.3. Anomalies in the dataset\nFirst check that the result of the query in section 4.1 is correct. For this purpose the country is added to the city.","9a11591f":"\nThe first 10 rows of the first table in the list are examined. ","487832c8":"All the visits have the value *Not Socially Engadged*, therefore the representation of this is meaningless.\n\n### 6. **Visits by channel grouping**\n\n#### 6.1. Absolute display\nThe sum of the data of the entire dataset is displayed.\n##### 6.1.1. Querying and obtaining the dataset","aa80eb4a":"### Information to collect\n* **Visits per year**: *date* attribute.\n* **Visits per month**: *date* attribute.\n* **Visits by geographical area**: *geoNetwork* attribute *continent* element.\n* **Visits by country**: *geoNetwork* attribute *country* element.\n* **Visits by city in the country that you visit the most**: *geoNetwork* attribute *city* element.\n* **Social engagement**: atributo *socialEngagementType*.\n* **Channel grouping**: *channelGrouping* attribute.  \n* **Browsers usegae**: *device* attribute *browser* element.\n* **OS usage**: *device* attribute *operatingSystem* element.\n* **Mobile device displays**: *device* attribute *operatingSystem* element.\n\n\n## Analysis and visualization\n\nAt this point, and knowing the data we have available, it starts to make the analysis of the data.\n\n### 1. **Visits per year**\n\n#### 1.1. Querying and obtaining the dataset\nThe [SUBSTRING function](https:\/\/cloud.google.com\/dataprep\/docs\/html\/SUBSTRING-Function_57344730?hl) will be used to \"trim\" the year. This function indicates the start and end position to be extracted.\n\nAt first, this was done using the [LEFT function](https:\/\/cloud.google.com\/dataprep\/docs\/html\/LEFT-Function_57344731?hl), but it was not executed correctly, obtaining an error at the output (19\/07\/2020). I don't know the reason for this, but I know that this function is more recent than the SUBSTRING function, maybe because in the python library (*google.cloud bigquery*) it is still not correctly implemented.\n\n\nOtro hecho a destacar es el cambio de *bigquery-public-data.google_analytics_sample.__TABLE__* por *bigquery-public-data.google_analytics_sample.**. [DOCUMENTATION](https:\/\/cloud.google.com\/bigquery\/docs\/querying-wildcard-tables).","c535422d":"**Highlights:**\n* **visitStartTime**: is in a [UNIX time](https:\/\/en.wikipedia.org\/wiki\/Unix_time) format, that is, they are the second since midnight on 1 January 1970. This format is also known as the Unix Epoch or POSIX time.\n* The date is not formatted in dd-mm-yyyy format. That is, from 20160804 to 04-08-2016. The *visitStartTime* and date columns could be condensed. Resulting in a date and time format according to [ISO 8601](https:\/\/en.wikipedia.org\/wiki\/ISO_8601) (yyyy-MM-ddThh:mm:ss+00:00).\n* It would be convenient to analyze all the data from the columns that are in tuples (JSON), as they are: *totals*, *trafficSource*, *device*, *geoNetwork*, *customDimensions* and *hits*.\n\nThe table structure is analyzed using **.table_schema()** and referring to the first table in the list.\n","b60e9526":"As we have seen before, there is an anomaly and we can see that there is no relationship of integrity between cities and countries. You can see cities that don't belong to the United States.\n\nIn the next query, we will return the cities that appear in more than one country.","e59f3df9":"#### 1.2. Visualization of the result\n\nThe result is plotted on a bar chart.","1f884d38":"The entire dataset occupies several Gigabytes. As it is a dynamic dataset this size will change over time. \nCurrently, (21\/07\/2020) the size is 5.371 GB.\n\nThe attributes in JSON format are investigated. A query is made for this analysis.","b76944ab":"##### 6.2.2. Display of the result","65d0d737":"### 3. Visits by geographical area\n\n#### 3.1. Querying and obtaining the dataset \nIn this query, the difficulty encountered is the extraction of the *continent* element within the JSON. To do this you simply have to join the attribute and subattribute with a point, i.e. *geoNetwork.continent*.\n","1b0ad398":"The connection to the BigQuery data source is established. First using the library BigQuery and after using the BigQueryHelper Library.","85854352":"#### 3.2. Visualization of the result\n\nThe result is plotted on a bar chart. Because displaying such a high number of records (more than 200) would make the chart unreadable, it is decided to display only the first 10 records.","857ed0f5":"#### 6.2. Display by month\n##### 6.2.1. Querying and obtaining the dataset","df088830":"To correct the dataset *city_result*, the query should be merged with *city_country_query*. ","a3ebdb48":"## Preliminary analysis\nThe BigQuery dataset tables are listed. Only the first 3 tables are shown and the number of tables that are in the dataset.","d4b73f11":"And with this graphic I end this notebook. At least for the time being...\n\n# IMPORTANT:\nIf you want me to make any query or any specific graphic leave a comment.","69067224":"#### 3.2. Visualization of the result\n\nThe result is plotted on a bar chart.","973ee71d":"#### 7.2. Display of the result\nAll the information is displayed in a single figure consisting of several subfigures.","09b4e725":"##### 6.1.2. Display of the result","7b5872b4":"### 4. **Visits per city**\nVisits by city of the country that more visits.\n\n#### 4.1. Consulta y obtenci\u00f3n del dataset\nA sub-consultation is introduced to return the country with more visitors.","471f600d":"On the top the result is as expected, but on the bottom there is surprise, there are cities like Rome, Osaka, Kiev, which obviously do not belong to the USA. **In point 4.3**, this anomaly in the data will be investigated in depth.\n\n#### 4.2. Visualization of the result\n\nThe result is plotted on a bar chart. Because displaying such a high number of records (more than 200) would make the graph unreadable, we chose to show only the results from the second to the sixth (TOP 5).","9ae0dd6b":"### SOLVED! \nThe dataset would be clean by now. And with a 25% reduction in data.\n\n### 5. **Visits by type of social engagement**\n\n\n#### 5.1. Querying and obtaining the dataset","885c1361":"As you can see this solution is not perfect, but it is effective in a very high percentage of cases and automatic. Later we made a supra query to show only the RANKING 1.","4b2a325e":"### 2. **Visits per month**\n\n#### 2.1. Querying and obtaining the dataset \nIn addition to the function used in the previous query, a year and month concatenation will be performed in this query using the [CONCAT function](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/string_functions?hl).","595b7ff0":"# Google Analytics data processing using BigQuery, Pandas and Matplotlib\n\n\n\n## Introduction\n\n**[Numpy](https:\/\/numpy.org\/), [Pandas](https:\/\/pandas.pydata.org\/docs\/), [Matplotlib](https:\/\/matplotlib.org\/contents.html) and [BigQuery](https:\/\/cloud.google.com\/bigquery\/docs) and [BigQueryHelper](https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package) library are imported**.  BigQueryHelper is a library that facilitates the reading of BigQuery data created by Kaggle's technical team."}}