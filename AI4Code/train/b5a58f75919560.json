{"cell_type":{"7ce3dd31":"code","6278842d":"code","9f8a31d8":"code","3594b1f9":"code","b8336de2":"code","6e2f0721":"code","95c7d9f2":"code","d5e8a45e":"code","1da88831":"code","124a1b74":"code","ed804aa3":"code","bdccda22":"code","3429a852":"code","be98de33":"code","e1ab430f":"code","9ee69a76":"code","cdfce940":"code","06c752ce":"code","da9f5b2f":"code","4f8ce1b8":"code","50c261d2":"code","3ef6036c":"code","3908ca5b":"code","33ddaf83":"code","e2e2172b":"code","0b12a3a4":"code","1556ed04":"markdown","ab5b3879":"markdown"},"source":{"7ce3dd31":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ntraindf = pd.read_csv(\"..\/input\/titanic\/train.csv\", encoding = \"utf-8\")\ntraindf","6278842d":"traindf.info()","9f8a31d8":"testdf = pd.read_csv(\"..\/input\/titanic\/test.csv\", encoding = \"utf-8\")\ntestdf","3594b1f9":"print(f\"{traindf.duplicated().sum()}\\n\"\n      f\"{testdf.duplicated().sum()}\")","b8336de2":"traindf.isnull().sum()","6e2f0721":"med = traindf[\"Age\"].median()\ntraindf[\"Age\"] = traindf[\"Age\"].fillna(med)\ntraindf.isnull().sum()","95c7d9f2":"most = traindf[\"Embarked\"].value_counts().idxmax()\ntraindf[\"Embarked\"] = traindf[\"Embarked\"].fillna(most)\ntraindf.isnull().sum()","d5e8a45e":"testdf.isnull().sum()","1da88831":"testdf[\"Age\"] = testdf[\"Age\"].fillna(med)\ntestdf.isnull().sum()","124a1b74":"testdf[\"Embarked\"] = testdf[\"Embarked\"].fillna(most)\ntestdf[\"Fare\"] = testdf[\"Fare\"].fillna(traindf[\"Fare\"].median())\ntestdf.isnull().sum()","ed804aa3":"traindf = pd.get_dummies(traindf, columns=[\"Pclass\", \"Sex\", \"Embarked\"], drop_first=True)\ntraindf","bdccda22":"testdf = pd.get_dummies(testdf, columns=[\"Pclass\", \"Sex\", \"Embarked\"], drop_first=True)\ntestdf","3429a852":"name = traindf[\"Name\"].apply(lambda x : x.split(\",\")[-1].split(\".\")[0].strip())\npd.crosstab(traindf[\"Survived\"], name)","be98de33":"def trans_name(x):\n    mid_name = x.split(\",\")[-1].split(\".\")[0].strip()\n    if mid_name == \"Mr\":\n        return \"Mr\"\n    elif mid_name == \"Mrs\":\n        return \"Mrs\"\n    elif mid_name == \"Miss\":\n        return \"Miss\"\n    elif mid_name == \"Ms\" or mid_name == \"Lady\" or mid_name == \"Countess\":\n        return \"Mrs\"\n    else:\n        return \"Throw\"\ntraindf[\"Name\"] = traindf[\"Name\"].apply(trans_name)\ntraindf = pd.get_dummies(traindf, columns=[\"Name\"], drop_first=True)\ntraindf","e1ab430f":"testdf[\"Name\"] = testdf[\"Name\"].apply(trans_name)\ntestdf = pd.get_dummies(testdf, columns=[\"Name\"], drop_first=True)\ntestdf","9ee69a76":"traindf.drop(columns=[\"PassengerId\", \"Ticket\", \"Cabin\"], inplace=True)\ntraindf","cdfce940":"testdf.drop(columns=[\"Ticket\", \"Cabin\"], inplace=True)\ntestdf","06c752ce":"# when preprocessing DataFrame use this to check columns\ncat_cols, num_cols = list(), list()\nfor col in traindf.columns:\n    print(f\"{col:>11}:{traindf[col].nunique():>4}\")\n    if traindf[col].nunique() <= 5:\n        cat_cols.append(col)\n    else:\n        num_cols.append(col)\nprint(f\"Categorical:\\n{cat_cols}\\n\"\n      f\"Numerical:\\n{num_cols}\")","da9f5b2f":"plt.figure(figsize = (12, 8))\nsns.heatmap(traindf.corr(), annot=True ,cmap=\"coolwarm\")\nplt.title(\"Pearson's Correlation Coefficient\")\nplt.show()","4f8ce1b8":"y = traindf[\"Survived\"]\nX = traindf.drop(columns=\"Survived\")","50c261d2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)","3ef6036c":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV","3908ca5b":"model1 = KNeighborsClassifier().fit(X, y)\nmodel2 = SVC().fit(X, y)\nmodel3 = MLPClassifier().fit(X, y)\nmodel4 = RandomForestClassifier().fit(X, y)\n\nname_list = [\"KNN\", \"SVC\", \"DNN\", \"RF\"]\nmodel_list = [model1, model2, model3, model4]\n\nfor name, model in zip(name_list, model_list):\n    cv_score = cross_val_score(model, X, y, cv=10)\n    print(f\"{name}:\\n\\tcv10_Accuracy:{cv_score.mean():5>.3f}\")","33ddaf83":"#Use all data to Turn model\nknn_param = {\"n_neighbors\":range(2,9), \"weights\":[\"uniform\", \"distance\"]}\nsvc_param = {\"C\":[700, 750, 800], \"degree\":range(1,4), \"gamma\":[\"scale\", \"auto\"]}\ndnn_param = {\"solver\":[\"sgd\", \"adam\"], \"learning_rate\":[\"constant\", \"adaptive\"], \"warm_start\":[\"True\", \"False\"], \"random_state\":[0]}\nrf_param = {\"max_depth\":range(3, 6), \"n_estimators\":range(30, 51), \"random_state\":[0]}\n\nname_list = [\"KNN\", \"SVC\", \"DNN\", \"RandomForest\"]\nmodel_list = [KNeighborsClassifier(), SVC(), MLPClassifier(), RandomForestClassifier()]\nparam_list = [knn_param, svc_param, dnn_param, rf_param]\n\nfor name, model, param in zip(name_list, model_list, param_list):\n    clf = GridSearchCV(model, param, cv=5).fit(X, y)\n    print(f\"{name}:\\n\\t{clf.best_params_}\\n\\t{clf.best_score_:.3f}\")","e2e2172b":"result = pd.DataFrame()\nresult[\"PassengerId\"] = testdf[\"PassengerId\"]\n\ndata_test = testdf.drop(columns=\"PassengerId\")\n\nmodel_list = [KNeighborsClassifier(n_neighbors=8, weights=\"distance\"),\n              SVC(C=750, degree=1, gamma=\"scale\"),\n              MLPClassifier(learning_rate=\"constant\", solver=\"adam\", warm_start=True, random_state=0),\n              RandomForestClassifier(max_depth=5, n_estimators=31, random_state=0)]\n\nfor name, model in zip(name_list, model_list):\n    model.fit(X, y)\n    result[\"Survived\"] = model.predict(data_test)\n    result.to_csv(f\"{name}.csv\", encoding=\"utf-8\", index=False)","0b12a3a4":"from sklearn.metrics import confusion_matrix\ntruedf = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nfor name in name_list:\n    preddf = pd.read_csv(f\"{name}.csv\")\n    y_true = truedf[\"Survived\"]\n    y_pred = preddf[\"Survived\"]\n    print(f\"{name}: {accuracy_score(y_true, y_pred):.4f}\")\n    print(f\"{confusion_matrix(y_true, y_pred)}\\n\")","1556ed04":"# Machine Learning","ab5b3879":"# Data Preprocessing"}}