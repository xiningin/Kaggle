{"cell_type":{"d9dff83e":"code","dcc3240f":"code","d79a37b2":"code","29df686e":"code","1986da9a":"code","20cb854a":"code","6c4487c1":"code","c268b245":"code","731dc810":"code","dce3fed5":"code","2890e050":"code","cede17ab":"code","2b10dd79":"code","6cbae3f4":"code","0d8da360":"code","b63c1e08":"code","6a97f0e9":"code","d91a01fc":"code","4a754d65":"code","664dfffb":"code","142f79a4":"code","c2f68612":"code","09d0b73f":"code","4eb31280":"code","cffcb225":"code","f5059376":"code","8eafcbf4":"code","c8a9f7ce":"code","9f8aabb1":"code","2fb22d13":"code","2dc024e5":"code","e27ffd5f":"code","3a473447":"code","d290df41":"code","bdc029d3":"code","ed18119d":"code","6f5057db":"code","d08e4c58":"code","61cd73f6":"code","749e55ce":"code","5d84b460":"code","90f09cc2":"code","7023688d":"code","11a11a37":"code","96e44ef8":"code","40c5d09a":"code","d333175f":"code","c80b5fc7":"code","a048186b":"code","0a5b6759":"code","6759bbc4":"code","9c3bfb7d":"code","be823e18":"code","b6fd92cb":"code","98190cf7":"code","3c95140f":"code","7a975e24":"code","c3f38375":"code","3ddb8093":"code","3bfd4b89":"code","a1142e1a":"code","e73b3bb8":"code","562ff92b":"code","b4b4335c":"code","2d7bbd61":"code","e6e62af3":"code","9452cfee":"code","61bfe91d":"code","8987cb50":"code","5a1683ef":"code","151d0c0d":"markdown","5f052866":"markdown","4128f6d1":"markdown","fd8a1c9a":"markdown","a4cb5797":"markdown","5ef417c1":"markdown","176fef03":"markdown","888ad698":"markdown","e99e3eef":"markdown","b0969664":"markdown","1750e58f":"markdown","86978c2f":"markdown","70d099a5":"markdown","92626c6b":"markdown","3ac9c166":"markdown","ce68834e":"markdown","3b4f922c":"markdown","cf1b1c85":"markdown","02a13ae4":"markdown","f7d753d2":"markdown","166f326b":"markdown","ae769477":"markdown","1c6712ca":"markdown","c5d78783":"markdown","b0178a02":"markdown","c3120703":"markdown","444ab2fc":"markdown","1d5ed6b6":"markdown","daafe65e":"markdown","6be1dfa3":"markdown","75c65219":"markdown","5df261d1":"markdown","c9eacb9a":"markdown","1541a15b":"markdown","e991fae7":"markdown","9d8a3169":"markdown","529fe719":"markdown","83a01117":"markdown","6fac7927":"markdown","8dde9bf1":"markdown","ba10a90c":"markdown","b9d894ba":"markdown","2a6572e4":"markdown","7deb4b0f":"markdown","e55cd094":"markdown"},"source":{"d9dff83e":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n#pd.set_option('display.max_rows', None)\n\nimport gc\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nplt.style.use('seaborn-whitegrid')\nsns.set_palette('Set3')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","dcc3240f":"base_dir = '\/kaggle\/input\/jobathon-analytics-vidhya-health-insurance\/'","d79a37b2":"train = pd.read_csv(base_dir + 'Train.csv')\nprint(train.shape)\ntrain.head()","29df686e":"train_dict = pd.read_csv(base_dir + 'Train_data_dictionary.csv')\ntrain_dict","1986da9a":"test = pd.read_csv(base_dir + 'Test.csv')\nprint(test.shape)\ntest.head()","20cb854a":"sub = pd.read_csv(base_dir + 'sample_submission.csv')\nprint(sub.shape)\nsub.head()","6c4487c1":"train.describe().T","c268b245":"train.info()","731dc810":"plt.title('Unique Values Count of Target')\nplt.pie(train['Response'].value_counts().values, labels = train['Response'].value_counts().index, autopct = '%1.2f%%', \nexplode = [0, 0.1], shadow = True);","dce3fed5":"missing = train.isna().sum().reset_index()\nmissing.columns = ['features', 'total_missing']\nmissing['percent'] = (missing['total_missing'] \/ len(train)) * 100\nmissing.index = missing['features']\ndel missing['features']\n\nmissing['total_missing'].plot(kind = 'bar', rot = 45)\nplt.title('Missing Values Count')\nmissing.T","2890e050":"missing = test.isna().sum().reset_index()\nmissing.columns = ['features', 'total_missing']\nmissing['percent'] = (missing['total_missing'] \/ len(test)) * 100\nmissing.index = missing['features']\ndel missing['features']\n\nmissing['total_missing'].plot(kind = 'bar', rot = 45)\nplt.title('Missing Values Count')\nmissing.T","cede17ab":"for i, c in enumerate(['Health Indicator', 'Holding_Policy_Duration', 'Holding_Policy_Type']):\n    fig, ax = plt.subplots(1, 2, figsize = (16, 10))\n    ax = ax.flatten()\n    temp1, temp2 = train[[c]].fillna('NANs'), test[[c]].fillna('NANs')\n    ax[0].set_title(f'Train')\n    sns.countplot(data = temp1, x = c, ax = ax[0], order = temp1[c].value_counts().index)\n    ax[1].set_title(f'Test')\n    sns.countplot(data = temp2, x = c, ax = ax[1], order = temp2[c].value_counts().index)\n    plt.show();","2b10dd79":"cols_to_check = [c for c in train.columns if (train[c].dtype != 'object') & (c not in ['ID', 'Response'])]\n#cols_to_check.__len__()\n\nfig, ax = plt.subplots(int(len(cols_to_check) \/ 2), 2, figsize = (16, 10))\nax = ax.flatten()\n\nfor i, c in enumerate(cols_to_check):\n    sns.boxplot(x = train[c], ax = ax[i])\nplt.suptitle('Outlier Analysis using BoxPlots', fontsize = 25)\nfig.tight_layout()\n\ndel cols_to_check\ngc.collect()","6cbae3f4":"print('Imputing Train..')\ntrain['Health Indicator'] = train['Health Indicator'].fillna('X0')\ntrain['Holding_Policy_Type'] = train['Holding_Policy_Type'].fillna(0.0)\n\ntrain['Holding_Policy_Duration'] = train['Holding_Policy_Duration'].replace('14+', str(14.0)).astype(float)\ntrain['Holding_Policy_Duration'] = train['Holding_Policy_Duration'].fillna(train['Holding_Policy_Duration'].mean())\n\nprint('Imputing Test..')\ntest['Health Indicator'] = test['Health Indicator'].fillna('X0')\ntest['Holding_Policy_Type'] = test['Holding_Policy_Type'].fillna(0.0)\n\ntest['Holding_Policy_Duration'] = test['Holding_Policy_Duration'].replace('14+', str(14.0)).astype(float)\ntest['Holding_Policy_Duration'] = test['Holding_Policy_Duration'].fillna(test['Holding_Policy_Duration'].mean())\n\ntrain.isna().sum().sum(), test.isna().sum().sum()","0d8da360":"train['City_Code'].value_counts().plot(kind = 'bar');","b63c1e08":"ax = sns.countplot(data = train, x = 'Accomodation_Type');\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","6a97f0e9":"ax = sns.countplot(data = train, x = 'Reco_Insurance_Type');\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","d91a01fc":"ax = sns.countplot(data = train, x = 'Is_Spouse');\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","4a754d65":"ax = sns.countplot(data = train, x = 'Holding_Policy_Type', order = train['Holding_Policy_Type'].value_counts().index);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","664dfffb":"ax = sns.countplot(data = train, x = 'Reco_Policy_Cat', order = train['Reco_Policy_Cat'].value_counts().index);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","142f79a4":"ax = sns.countplot(data = train, x = 'Health Indicator', order = train['Health Indicator'].value_counts().index);\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","c2f68612":"fig, ax = plt.subplots(1, 2, figsize = (16, 10))\nsns.histplot(data = train, x = 'Reco_Policy_Premium', kde = True, ax = ax[0])\nax[0].set_title('Train')\nsns.histplot(data = test, x = 'Reco_Policy_Premium', kde = True, ax = ax[1])\nax[1].set_title('Test');","09d0b73f":"fig, ax = plt.subplots(1, 2, figsize = (16, 6))\nsns.boxplot(data = train[train['Accomodation_Type'] == 'Owned'], x = 'Reco_Policy_Premium', ax = ax[0])\nax[0].set_title('Owned')\nsns.boxplot(data = train[train['Accomodation_Type'] == 'Rented'], x = 'Reco_Policy_Premium', ax = ax[1])\nax[1].set_title('Rented');","4eb31280":"train.groupby('Accomodation_Type')['Reco_Policy_Premium'].agg(['mean', 'median', 'std'])","cffcb225":"fig, ax = plt.subplots(1, 2, figsize = (16, 10))\nsns.histplot(data = train, x = 'Upper_Age', kde = True, ax = ax[0])\nsns.histplot(data = train, x = 'Lower_Age', kde = True, ax = ax[1])\nplt.suptitle('Histogram Distribution of Upper and Lower Age - Train', fontsize = 16);","f5059376":"print(f'Upper_Age - Max: {train[\"Upper_Age\"].max()}, Min: {train[\"Upper_Age\"].min()}')\nprint(f'Lower_Age - Max: {train[\"Lower_Age\"].max()}, Min: {train[\"Lower_Age\"].min()}')","8eafcbf4":"df_age = train[['Upper_Age', 'Lower_Age']][train['Reco_Insurance_Type'] == 'Individual']\ndf_age['Upper_Age'].equals(df_age['Lower_Age'])","c8a9f7ce":"df_age = train[['Upper_Age', 'Lower_Age']][train['Reco_Insurance_Type'] == 'Joint']\ndf_age['Upper_Age'].equals(df_age['Lower_Age'])","9f8aabb1":"train_0, train_1 = train[train['Response'] == 0], train[train['Response'] == 1]\ntrain_0.shape, train_1.shape","2fb22d13":"fig, ax = plt.subplots(1, 2)\ntrain_1.groupby('Accomodation_Type').agg('size').plot.pie(shadow = True, autopct = '%1.2f%%', \n                                                          title = 'Response 1', explode = [0, 0.05], ax = ax[0])\ntrain_0.groupby('Accomodation_Type').agg('size').plot.pie(shadow = True, autopct = '%1.2f%%', \n                                                          title = 'Response 0', explode = [0, 0.05], ax = ax[1]);","2dc024e5":"fig, ax = plt.subplots(1, 2)\n\ntrain_1.groupby('Reco_Insurance_Type').agg('size').plot.pie(shadow = True, autopct = '%1.2f%%', \n                                                          title = 'Response 1', explode = [0, 0.1], ax = ax[0])\ntrain_0.groupby('Reco_Insurance_Type').agg('size').plot.pie(shadow = True, autopct = '%1.2f%%', \n                                                          title = 'Response 0', explode = [0, 0.1], ax = ax[1]);","e27ffd5f":"fig, ax = plt.subplots(1, 2)\nreco_type = pd.pivot_table(data = train_1, index = 'Reco_Insurance_Type', columns = ['Is_Spouse'], aggfunc = ['size'])\nreco_type.loc['Joint']['size'].plot.pie(shadow = True, autopct = '%1.2f%%', \n                                        title = 'Joint Insurance with Spouse\/Others - 1', explode = [0, 0.1], ax = ax[0])\nreco_type = pd.pivot_table(data = train_0, index = 'Reco_Insurance_Type', columns = ['Is_Spouse'], aggfunc = ['size'])\nreco_type.loc['Joint']['size'].plot.pie(shadow = True, autopct = '%1.2f%%', \n                                        title = 'Joint Insurance with Spouse\/Others - 0', explode = [0, 0.1], ax = ax[1]);","3a473447":"temp = pd.pivot_table(data = train_1, index = 'Holding_Policy_Type', columns = ['Accomodation_Type', 'Reco_Insurance_Type'], \n                      values = ['ID'], \n                      aggfunc = {'ID': 'count'}) \/ len(train_1) * 100\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","d290df41":"temp = pd.pivot_table(data = train_0, index = 'Holding_Policy_Type', columns = ['Accomodation_Type', 'Reco_Insurance_Type'],\n               values = ['ID'], aggfunc = ['count']) \/ len(train_0) * 100\ntemp.style.background_gradient(sns.light_palette('purple', as_cmap = True))","bdc029d3":"temp = pd.pivot_table(data = train_1, index = 'Holding_Policy_Type', columns = ['Accomodation_Type', 'Reco_Insurance_Type'], \n                      values = ['Reco_Policy_Premium'], \n                      aggfunc = {'Reco_Policy_Premium': 'mean'})\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","ed18119d":"temp = pd.pivot_table(data = train_0, index = 'Holding_Policy_Type', columns = ['Accomodation_Type', 'Reco_Insurance_Type'], \n                      values = ['Reco_Policy_Premium'], \n                      aggfunc = {'Reco_Policy_Premium': 'mean'})\ntemp.style.background_gradient(sns.light_palette('purple', as_cmap = True))","6f5057db":"fig, ax = plt.subplots(1, 2, figsize = (16, 10))\nsns.lineplot(data = train_1, x = 'Upper_Age', y = 'Reco_Policy_Premium', hue = 'Reco_Insurance_Type',\n             palette = 'Set1', ax = ax[0])\nax[0].set_title('Response 1')\nsns.lineplot(data = train_0, x = 'Upper_Age', y = 'Reco_Policy_Premium', hue = 'Reco_Insurance_Type',\n             palette = 'Set2', ax = ax[1])\nax[1].set_title('Response 0');","d08e4c58":"fig, ax = plt.subplots(1, 2, figsize = (16, 10))\nsns.lineplot(data = train_1, x = 'Upper_Age', y = 'Reco_Policy_Premium', hue = 'Accomodation_Type', ci = None,\n             palette = 'Set1', ax = ax[0])\nax[0].set_title('Response 1')\nsns.lineplot(data = train_0, x = 'Upper_Age', y = 'Reco_Policy_Premium', hue = 'Accomodation_Type',ci = None,\n             palette = 'Set2', ax = ax[1])\nax[1].set_title('Response 0');","61cd73f6":"temp = pd.pivot_table(data = train_1, index = 'Health Indicator', values = ['Upper_Age', 'Reco_Policy_Premium'], aggfunc = ['mean'])\ntemp.style.background_gradient(sns.light_palette('#2ecc71', as_cmap = True))","749e55ce":"temp = pd.pivot_table(data = train_0, index = 'Health Indicator', values = ['Upper_Age', 'Reco_Policy_Premium'], aggfunc = ['mean'])\ntemp.style.background_gradient(sns.light_palette('purple', as_cmap = True))","5d84b460":"\nax = sns.countplot(data = train_1, x = 'Reco_Policy_Cat', order = train_1['Reco_Policy_Cat'].value_counts().index, \n                palette = 'Set2')\nplt.title('Response 1')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","90f09cc2":"ax = sns.countplot(data = train_0, x = 'Reco_Policy_Cat', order = train_0['Reco_Policy_Cat'].value_counts().index)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\nplt.title('Response 0');","7023688d":"sns.lineplot(data = train_1[train_1['Reco_Policy_Cat'] == 22], x = 'Upper_Age', y = 'Reco_Policy_Premium');","11a11a37":"sns.histplot(data = train_1[train_1['Reco_Policy_Cat'] == 22], x = 'Reco_Policy_Premium');","96e44ef8":"print('Response 1')\nprint(f'Avg. premium of customers with policy category 22: {train_1[train_1[\"Reco_Policy_Cat\"] == 22][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 18: {train_1[train_1[\"Reco_Policy_Cat\"] == 18][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 17: {train_1[train_1[\"Reco_Policy_Cat\"] == 17][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 1: {train_1[train_1[\"Reco_Policy_Cat\"] == 1][\"Reco_Policy_Premium\"].mean()}')","40c5d09a":"print('Response 0')\nprint(f'Avg. premium of customers with policy category 22: {train_0[train_0[\"Reco_Policy_Cat\"] == 22][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 18: {train_0[train_0[\"Reco_Policy_Cat\"] == 18][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 17: {train_0[train_0[\"Reco_Policy_Cat\"] == 17][\"Reco_Policy_Premium\"].mean()}')\nprint(f'Avg. premium of customers with policy category 1: {train_0[train_0[\"Reco_Policy_Cat\"] == 1][\"Reco_Policy_Premium\"].mean()}')","d333175f":"train.columns","c80b5fc7":"cat_cols = [c for c in train.columns if train[c].dtype == 'object']\nnum_cols = [c for c in train.columns if (c not in cat_cols) & (c != 'Response')]\ncat_cols, num_cols","a048186b":"scl = StandardScaler()\ntrain[num_cols] = scl.fit_transform(train[num_cols])\ntest[num_cols] = scl.transform(test[num_cols])","0a5b6759":"for c in cat_cols: \n    lbl = LabelEncoder() \n    lbl.fit(list(train[c].astype(str).values) + list(test[c].astype(str).values)) #Takes care of cardinality mismatch\n    train[c] = lbl.transform(list(train[c].astype(str).values))\n    test[c] = lbl.transform(list(test[c].astype(str).values))","6759bbc4":"num_pos_samples = train['Response'].value_counts().values[1]\ntotal_samples = len(train)\nscale_pos_weight = 100 - ( (num_pos_samples \/ total_samples) * 100 )\nscale_pos_weight","9c3bfb7d":"num_pos_samples = train['Response'].value_counts().values[1]\nnum_neg_samples = train['Response'].value_counts().values[0]\nnum_neg_samples \/ num_pos_samples","be823e18":"import lightgbm as lgbm\n\nparams = {'num_leaves': 1023,  # 2^max_depth - 1\n          'min_child_samples': 100,\n          'objective': 'binary',\n          #'scale_pos_weight': scale_pos_weight, #99,\n          'is_unbalance': 'true',\n          'max_depth': 10,\n          'learning_rate': 0.01,\n          \"boosting_type\": \"gbdt\",\n          \"subsample_freq\": 3,\n          \"subsample\": 0.7,\n          \"bagging_seed\": 11,\n          \"metric\": 'auc',\n          \"verbosity\": -1,\n          'reg_alpha': 0.3,\n          'reg_lambda': 0.3,\n          'colsample_bytree': 0.9,\n          'min_child_weight': 0,  # Minimum sum of instance weight(hessian) needed in a child(leaf)\n          'seed': 2021\n         }","b6fd92cb":"X = train.drop('Response', axis = 1)\ny = train['Response'].copy()","98190cf7":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(X, y, test_size = 0.25, random_state = 2021)\nprint(Xtrain.shape, ytrain.shape, Xvalid.shape, yvalid.shape)","3c95140f":"print(f'Training LightGBM..')\nltrain = lgbm.Dataset(Xtrain, label = ytrain)\nlvalid = lgbm.Dataset(Xvalid, label = yvalid)\n\nnum_rounds = 10000\nclf = lgbm.train(params, ltrain, num_rounds, valid_sets = [ltrain, lvalid], verbose_eval = 50, \n                    early_stopping_rounds = 100)\nvalid_preds = clf.predict(Xvalid, num_iteration = clf.best_iteration)\nprint('ROC_AUC_SCORE: ', roc_auc_score(yvalid, valid_preds))\n\ntest_preds = clf.predict(test, num_iteration = clf.best_iteration)\nprint(test_preds[:10])","7a975e24":"lgbm.plot_importance(clf)","c3f38375":"from xgboost import XGBClassifier\nimport xgboost as xgb\n\nxgb_params = {\n         'booster': 'gbtree',\n         'objective': 'binary:logistic',\n         'lambda': 0.0030282073258141168, \n         'alpha': 0.01563845128469084,\n         'colsample_bytree': 0.55,\n         'subsample': 0.7,\n         'learning_rate': 0.015,\n         'max_depth': 9,\n         'random_state': 2021, \n         'min_child_weight': 20,\n         'gamma': 0.1,\n         'alpha': 0.2,\n         'lambda': 9,\n         'colsample_bytree': 0.2,\n         'subsample': 0.8,\n         'eval_metric': 'auc',\n         'seed': 2020,\n         'scale_pos_weight': num_neg_samples \/ num_pos_samples\n         }","3ddb8093":"xg_train = xgb.DMatrix(Xtrain, label = ytrain)\nxg_valid = xgb.DMatrix(Xvalid, label = yvalid)\n\nxgboost = xgb.train(xgb_params,\n                          xg_train,\n                          10000,\n                          verbose_eval = 100,\n                          evals = [(xg_train, 'train'), (xg_valid, 'valid')],\n                          early_stopping_rounds = 100)\nxpreds = xgboost.predict(xgb.DMatrix(test))\nprint(xpreds[:10])","3bfd4b89":"xgb.plot_importance(xgboost)","a1142e1a":"xgb.plot_importance(xgboost, importance_type = 'cover')","e73b3bb8":"xgb.plot_importance(xgboost, importance_type = 'gain')","562ff92b":"import shap\n\nshap.initjs()","b4b4335c":"#LGBM\nexplainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(Xvalid)","2d7bbd61":"shap.summary_plot(shap_values[1], Xvalid)","e6e62af3":"#Shap for XGBoost\nexplainer = shap.TreeExplainer(xgboost)\nshap_values = explainer.shap_values(Xvalid)","9452cfee":"shap.summary_plot(shap_values, Xvalid)","61bfe91d":"shap.force_plot(explainer.expected_value, shap_values[1], Xvalid.iloc[0, :])","8987cb50":"for name in train[num_cols].columns:\n    shap.dependence_plot(name, shap_values, Xvalid)","5a1683ef":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","151d0c0d":"__Imputing NaNs__\n\n- Usual strategy to impute the  categorical feature is with the most frequent value and the numerical feature with mean of the feature\n- Missing values in 'Holding_Policy_Type' could be construed as customers who don't have any policy yet (which is common in India) which corresponds to no value in 'Health Indicator'\n- So we create a value type '0.0' for the missing NaNs in 'Holding_Policy_Type' which means they don't have a policy currently and 'X0' for 'Health Indicator' which means 'Not Known'\n- Before imputing the numerical feature 'Holding_Policy_Duration', the value '14+' should be changed to a numerical value, let's make it as 14.0","5f052866":"__Mean Recommended Premium by Holding_Policy_Type, Accomodation_Type and Reco_Insurance_Type__","4128f6d1":"__Response 0__","fd8a1c9a":"- Its usual that premium increases as one's age increases","a4cb5797":"- Distribution of Recommended policy premium","5ef417c1":"- Health Indicator of the customers","176fef03":"- Features in red color influence positively, i.e. drag the prediction value closer to 1, features in blue color - the opposite\n- Reco_Policy_Cat is the most influential feature for the output to be 1\n- Each arrow\u2019s size represents the magnitude of the corresponding feature\u2019s effect\n- The \u201cbase value\u201d marks the model\u2019s average prediction over the training set","888ad698":"- How many customers are residing in Own\/Rented premises?","e99e3eef":"__Proportion of Customers who were recommended Individual or Joint Insurance__","b0969664":"__Proportion of Customers who has Owned\/Rented accomodation__","1750e58f":"- What are the Recommended policy types?","86978c2f":"__Standardize Num Features and Label Encode Cat Features__","70d099a5":"__Relationship between Age of policy holder with proposed Premium by Accomodation_Type__","92626c6b":"- Mean and median premium is more for the cutomers with Own accomodation","3ac9c166":"# Tasks\n- EDA to understand why customer respose is 0 or 1\n- Predict customers response","ce68834e":"- How many of the customers are holding Individual\/Joint Insurance?","3b4f922c":"- Dependence Plot tells whether the relationship between the target and the variable is linear, monotonic, or more complex\n- The feature for which we plotted dependence plot iteracts with the feature name on the right side of the plot\n- Each dot represents a row of the data. The horizontal location is the actual value from the dataset, and the vertical location shows what having that value did to the prediction\n- If the slope of plot trends upward it indicates that higher values of that particular feature increases the model's prediction to be 1","cf1b1c85":"- Majority of customers have chosen to respond for policy category 22\n- Let's check the premium for this category","02a13ae4":"__Missing values check__","f7d753d2":"- If the Reco_Insurance_Type is Individual then the Upper_Age and Lower_Age values are equal, if it is Joint then not equal","166f326b":"- Customers Count by City Code","ae769477":"- Almost 79% of customers perefer Individual insurance type","1c6712ca":"__Outliers check__","c5d78783":"# EDA","b0178a02":"__Policy type already held by customers__","c3120703":"- The Response(1) is highest for Customers:\n    - Who are in Rented accomodation\n    - Who choose Individual insurance type\n    - Who do not have any prior insurance policy\n- Next best Response  is for Customers:\n    - Who has own accocmodation\n    - Chose Individual insurance type\n    - Doesn't have any prior policy\n- 3rd highest Response is for Customers:\n    - Who has own accocmodation\n    - Chose Individual insurance type\n    - Who has prior policy type 3.0\n\n- The same is observed in the table below for Response 0","444ab2fc":"__Response 0__","1d5ed6b6":"__Relationship between Age of policy holder with proposed Premium by Reco_Insurance_Type__","daafe65e":"- Higher values of Reco_Policy_Cat influences positive response\n- Reco_Insurance_Type and Is_Spouse has been ignored by the model in deciding the output (while xgboost has taken into account Is_Spouse as seen from below plots)\n- Lower Upper_Age results in negative response, also for Holding_Policy_Type and City_Code","6be1dfa3":"- The proportion of Owned\/Rented accomodation are almost same for the customers responsing with 1 or 0","75c65219":"__Response 1__","5df261d1":"- There are almost 40% values missing in 'Holding_Policy_Duration' and 'Holding_Policy_Type'\n- And 23% missing in 'Health Indicator'\n- How about test dataset?","c9eacb9a":"- Same percentage of values missing test too\n- We should Impute these missing values\n- Let's check the unqiue values of these features","1541a15b":"__Recommended Policy Category__","e991fae7":"- Let's check the features which are influential in deciding Response","9d8a3169":"__Response 1__","529fe719":"- The outlier in Reco_Policy_Premium is inherent to the data, we needn't do anything\n- Region_Code is a categorical feature","83a01117":"__Response 0__","6fac7927":"- Reco Policy Premium Boxplots of customers with Owned\/Rented premises","8dde9bf1":"- How many of the customers holding Joint insurance type with Spouse\/Others?","ba10a90c":"__Competition from__\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/job-a-thon\/","b9d894ba":"__Classic feature importance plots__\n- Note differences between the plots below\n- To have a better understanding of the feature importances we should go for SHAP values","2a6572e4":"- How is the Age distribution of the customers?","7deb4b0f":"- What is the policy type held by customers currently?","e55cd094":"__Mean Age and Premium by Customers' Health_Indicator__\n\n__Response 1__"}}