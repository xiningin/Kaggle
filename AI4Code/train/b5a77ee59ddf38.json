{"cell_type":{"7c5c379f":"code","f68a7268":"code","54217b7d":"code","43f7f346":"code","54a03981":"code","1ac8bf8a":"code","52f0bebe":"code","37baf255":"code","18d89e80":"code","aa5f539f":"code","8c24306e":"code","c49b52cc":"code","578819cc":"code","30733329":"code","b4c5b260":"code","ab349909":"code","cdd7bf52":"code","35ebc4e5":"code","81367069":"code","497230d4":"code","c7fee30a":"code","312600f7":"code","7cf0e842":"code","4d704edd":"code","38fd0d0d":"code","e56343c8":"code","a577f3e5":"code","281c1283":"code","ade239fe":"code","05f28b71":"code","84e6b7c4":"code","ed866663":"code","33180d51":"code","caef431d":"code","94ca5962":"code","d76f36d9":"code","63aecc83":"code","d513c9f8":"code","90debd1a":"code","ddb9d886":"code","65f62a4e":"code","38d9c999":"code","d7fad4b8":"code","c732fd61":"code","4cb5526b":"code","d5165616":"code","5ed12665":"code","e268e75c":"code","d451ddbc":"code","07a293b5":"code","e9c01bb8":"code","cb297655":"code","8ffec0a3":"code","2b822309":"code","ef781530":"code","5f3a8ef0":"code","c765a900":"code","17cc12b1":"code","5039dd77":"code","5db54e16":"code","7c63f1de":"code","b84ebe34":"code","9756c986":"code","767d8e60":"code","bade6826":"code","cf943f91":"code","c491dd95":"code","0377a398":"code","bd93d0ed":"code","e23bd230":"code","63523d04":"code","1da8a646":"code","c661d59f":"code","92cfeaaf":"code","ec905a57":"code","a7572655":"code","45ab5f17":"code","a7e0eff1":"code","c3a7b25a":"code","508c4e41":"code","bc19eb20":"code","04edb75c":"code","51d147a9":"markdown","cb9fb237":"markdown","261dadfb":"markdown","a66b4652":"markdown","d0e82e9c":"markdown","7f783e64":"markdown","0ea75c89":"markdown","3ae374e8":"markdown","fbc7b24a":"markdown","02cbd1cd":"markdown","e9cb4c6a":"markdown","8267f071":"markdown","de84a5c4":"markdown","f58bbeab":"markdown","159662eb":"markdown","4125d67f":"markdown","0dd5be74":"markdown","dc9b87a4":"markdown"},"source":{"7c5c379f":"import numpy as np\nimport pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\nimport os\nimport glob\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","f68a7268":"covidv= pd.read_csv('..\/input\/country-vaccinations\/country_vaccinations.csv')\n# vacmanu = pd.read_csv('country_vaccinations_by_manufacturer.csv')","54217b7d":"covidv.head(5)","43f7f346":"covidv.index","54a03981":"# information about dataset \ncovidv.info()","1ac8bf8a":"# Convert date from object to datetime format-------------------------------------------------\ncovidv['date'] = pd.to_datetime(covidv['date'], format = '%Y-%m-%d')\ncovidv\n#covidv['Date'] = pd.to_datetime(covidv['Date'])\n# Create date columns for analizer\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncovidv['Day_num'] = le.fit_transform(covidv.date)\ncovidv['Day'] = covidv['date'].dt.day\ncovidv['Month'] = covidv['date'].dt.month\ncovidv['Year'] = covidv['date'].dt.year\ncovidv","52f0bebe":"covidv.info()","37baf255":"print(\"Number of data \",covidv.shape)","18d89e80":"# Last people vaccinated in Iran\nprint(\"Last people vaccinated in Iran\\n\", \n      covidv[covidv['country'] == 'Iran'][['people_vaccinated']].tail(1))","aa5f539f":"# check miss value\ncovidv.isnull().sum()","8c24306e":"# 20 Country sort max Total Vaccinations\ncount_total_v = covidv.groupby(['country'])['total_vaccinations'].max().sort_values(ascending = False).head(20)\ncount_total_v\ncount_total_v.plot(kind = 'bar',color='green')\nplt.xlabel('country')\nplt.ylabel('total_vaccinations')","c49b52cc":"# vaccinated people (get one  or two dose)\npeople_vac = covidv.groupby(['country'])['people_vaccinated'].max().sort_values(ascending = False).head(20)\npeople_vac.plot(kind = 'bar',color='blue')\nplt.xlabel('country')\nplt.ylabel('people_vaccinated')\nplt.show()","578819cc":"# people_fully_vaccinated(get two dose vaccine)\nful_vac = covidv.groupby(['country'])['people_fully_vaccinated'].max().sort_values(ascending = False).head(20)\nful_vac.plot(kind = 'bar',color='tomato')\nplt.xlabel('country')\nplt.ylabel('people_fully_vaccinated')\nplt.show()","30733329":"# daily_vaccinations in iran \n\nDai_Vac = covidv[covidv['country'] =='Iran']\nsns.lineplot(data =Dai_Vac, x='date', y='daily_vaccinations', linewidth=2.5,color='purple')\n                 \n    ","b4c5b260":"# Daily vaccination Trend of Top 3 Countries leading in Total Number of People Vaccinated\nlabel = covidv.groupby(['country'])['people_vaccinated'].max().sort_values(ascending = False).head(3)\ncol = ['teal', 'red', 'gold']\nsns.set(font_scale=2)\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=50, figsize=(40,10))\nfor i in range(3):\n    Dai_Vac = covidv[covidv['country'] ==people_vac.index[i]]\n    sns.lineplot(data =Dai_Vac, x='date', y='daily_vaccinations', linewidth=4,color = col[i],label =label.index[i],ax = ax  )\nplt.show()    ","ab349909":"# Total number of people vaccinated per hundred #\n# Iran people vaccinated per hundred\npeovac_p_hu_iran = covidv.groupby(['country'])['people_vaccinated_per_hundred'].max()['Iran']\npd_iran = pd.Series(peovac_p_hu_iran, name='people_vaccinated_per_hundred',index =['Iran'])\n\n# 10 country max  people vaccinated per hundred\npeovac_p_hu = covidv.groupby(['country'])['people_vaccinated_per_hundred'].max().sort_values(ascending = False).head(10)\n\n#  Use pandas. concat() to merge two Series\ndf_join_iran_10count = pd.concat([peovac_p_hu,pd_iran ])\nsns.set(font_scale=2)\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=50, figsize=(40,10))\n\nsns.barplot(data = df_join_iran_10count,x=df_join_iran_10count.values, y=df_join_iran_10count.index, color='lightgreen',edgecolor='darkgrey')\n","cdd7bf52":"\n# Iran people  fully vaccinated per hundred\npeovac_p_hu_iran_f = covidv.groupby(['country'])['people_fully_vaccinated_per_hundred'].max()['Iran']\npd_iran_f = pd.Series(peovac_p_hu_iran, name='people_fully_vaccinated_per_hundred',index =['Iran'])\n\n# 10 country max  people vaccinated per hundred\npeofulvac_p_hu = covidv.groupby(['country'])['people_fully_vaccinated_per_hundred'].max().sort_values(ascending = False).head(10)\n\n#  Use pandas. concat() to merge two Series\n\ndf_join_iran_10count_ful = pd.concat([peofulvac_p_hu,pd_iran_f ])\n\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=50, figsize=(40,10))\nsns.set(font_scale=2)\nsns.barplot(data =df_join_iran_10count_ful ,x=df_join_iran_10count_ful.values, y=df_join_iran_10count_ful.index,color='tan',\n            edgecolor='darkgrey',ax = ax)\n\nplt.show()\n\n","35ebc4e5":"################### Studying Iran Vaccination against Turkey and US ###############\nIranVacc = covidv[covidv['country'] == 'Iran']\nTurkeyVacc =covidv[covidv['country'] == 'Turkey']\nUSVacc = covidv[covidv['country'] == 'United States']\nfig, ax = plt.subplots(nrows=1, ncols=3, dpi=100, figsize=(40,10))\n\n########################### total Vaccination ####################################\n\nsns.lineplot(data =IranVacc, x='date', y='total_vaccinations',\n             ax=ax[0], color = \"red\", linewidth=10)\nsns.lineplot(data = TurkeyVacc, x='date', y='total_vaccinations',\n             ax=ax[1], color = 'teal', linewidth=10)\nsns.lineplot(data = USVacc, x='date', y='total_vaccinations',\n             ax=ax[2], color = 'teal', linewidth=10)\nax[0].set_ylabel(\"TOTAL VACCINATIONS\", fontsize = 25)\nax[0].set_xlabel(\"Date \",fontsize = 30)\nax[1].set_xlabel(\"Date \",fontsize = 30)\nax[2].set_xlabel(\"Date \",fontsize = 30)\nax[0].set_title(\"IRAN\", fontsize=35)\nax[1].set_title(\"TURKEY\", fontsize=35)\nax[2].set_title(\"US\", fontsize=35)\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[0].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[2].xaxis.set_major_formatter(DateFormatter('%b%y'))\n\n\n","81367069":"################### Studying Iran Vaccination against Turkey and US ###############\nIranVacc = covidv[covidv['country'] == 'Iran']\nTurkeyVacc =covidv[covidv['country'] == 'Turkey']\nUSVacc = covidv[covidv['country'] == 'United States']\nfig, ax = plt.subplots(nrows=1, ncols=3, dpi=100, figsize=(40,10))\n\n########################### Daily Vaccination ####################################\n\nsns.lineplot(data =IranVacc, x='date', y='daily_vaccinations', ax=ax[0], color = 'teal', linewidth=10)\nsns.lineplot(data = TurkeyVacc, x='date', y='daily_vaccinations',ax=ax[1], color = 'teal', linewidth=10)\nsns.lineplot(data = USVacc, x='date', y='daily_vaccinations',ax=ax[2], color = 'teal', linewidth=10)\nax[0].set_ylabel(\"TOTAL VACCINATIONS\", fontsize = 25)\nax[0].set_xlabel(\"Date \",fontsize = 30)\nax[1].set_xlabel(\"Date \",fontsize = 30)\nax[2].set_xlabel(\"Date \",fontsize = 30)\nax[0].set_title(\"IRAN\", fontsize=35)\nax[1].set_title(\"TURKEY\", fontsize=35)\nax[2].set_title(\"US\", fontsize=35)\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[0].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[2].xaxis.set_major_formatter(DateFormatter('%b%y'))\n","497230d4":"################### Studying Iran Vaccination against Turkey and US ###############\nIranVacc = covidv[covidv['country'] == 'Iran']\nTurkeyVacc =covidv[covidv['country'] == 'Turkey']\nUSVacc = covidv[covidv['country'] == 'United States']\nfig, ax = plt.subplots(nrows=1, ncols=3, dpi=100, figsize=(40,10))\n\n# total_vaccinations_per_hundred \n\nsns.lineplot(data =IranVacc, x='date', y='total_vaccinations_per_hundred', ax=ax[0], color = 'teal', linewidth=10)\nsns.lineplot(data = TurkeyVacc, x='date', y='total_vaccinations_per_hundred',ax=ax[1], color = 'teal', linewidth=10)\nsns.lineplot(data = USVacc, x='date', y='total_vaccinations_per_hundred',ax=ax[2], color = 'teal', linewidth=10)\nax[0].set_ylabel(\"total_vaccinations_per_hundred\", fontsize = 25)\nax[0].set_xlabel(\"Date \",fontsize = 30)\nax[1].set_xlabel(\"Date \",fontsize = 30)\nax[2].set_xlabel(\"Date \",fontsize = 30)\nax[0].set_title(\"IRAN\", fontsize=35)\nax[1].set_title(\"TURKEY\", fontsize=35)\nax[2].set_title(\"US\", fontsize=35)\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[0].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[2].xaxis.set_major_formatter(DateFormatter('%b%y'))\n","c7fee30a":"# We found that each country used several types of vaccines\ndef convert(k):\n    count_vac_use = k\n    lis= count_vac_use.tolist()\n    i=0\n    while i<len(lis):\n        my_string = lis[0] \n        my_list = my_string.split(\",\")\n        return len(my_list)\nlst1=[]    \nfor i in range(len(covidv.country.unique().tolist())):\n    m = covidv.country.unique().tolist()[i]\n    n = covidv[covidv['country'] == str(m)]['vaccines'].unique()\n    lst2 = [m,convert(n)]\n    lst1.append(lst2)\ntype_count_vacc = pd.DataFrame(lst1,columns =['country','number_vaccan_use'])\nsns.set()\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=200, figsize=(40,10))\n    \nsns.lineplot(data =type_count_vacc, x='country', y='number_vaccan_use',  color = 'purple',ax=ax)    \nax.set_ylabel(\"number_vaccan_use\", fontsize = 25)\nax.set_xlabel(\"country \",fontsize = 30)\nfor label in ax.xaxis.get_ticklabels():\n            label.set_rotation(60)\n","312600f7":"def Count_Type_Vac(t):\n    lst_t =[]\n    for j in range(len(lst1)):\n        if lst1[j][1]== t:\n            lst_x = lst1[j]\n            lst_t.append(lst_x)\n    return len(lst_t)\nlis_Count_Type_Vac = []\nfor i in range(1,7):\n    lis_Count_Type_Vac.append([i,Count_Type_Vac(i)])\n\ncount_Type = pd.DataFrame(lis_Count_Type_Vac,columns =['numberv_type_vacc','number_country_use'])\ncount_Type\nsns.barplot(data = count_Type,x ='numberv_type_vacc' ,y = 'number_country_use', color='tan', edgecolor='darkgrey')","7cf0e842":"# Visualizing regression models in IRAN\nIranVacc = covidv[covidv['country'] == 'Iran']\nsns.regplot(x=\"Day_num\", y=\"people_vaccinated_per_hundred\", data=IranVacc,marker=\"+\",scatter_kws={\"color\": \"g\"}, line_kws={\"color\": \"red\"})","4d704edd":"# Linear Regression between people_vaccination_per_hunder & Day_num\nIran_daynum_people=IranVacc[[\"Day_num\", \"people_vaccinated_per_hundred\"]]\nIran_daynum_people.dropna(inplace = True)","38fd0d0d":"## Simple Linear Regression (SLR) by registered (Strong relationship )\nX = Iran_daynum_people[['Day_num']]\ny =  Iran_daynum_people['people_vaccinated_per_hundred']","e56343c8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)","a577f3e5":"# Import library for Linear Regression\nfrom sklearn.linear_model import LinearRegression\n\n# Create a Linear regressor\nSimple_LR = LinearRegression()\n\n# Train the model using the training sets \n\nSimple_LR.fit(X_train, y_train)","281c1283":"# y = ax+b this is          \nSimple_LR.coef_ ","ade239fe":"Simple_LR.intercept_","05f28b71":"y_pred=Simple_LR.predict(X_test)","84e6b7c4":"X_test","ed866663":"sns.histplot(y_test-y_pred)","33180d51":"from sklearn import metrics\nprint('R^2:',metrics.r2_score(y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","caef431d":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression","94ca5962":"X = Iran_daynum_people[['Day_num']]\ny =  Iran_daynum_people['people_vaccinated_per_hundred']","d76f36d9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state = 4)","63aecc83":"\"Creates a polynomial regression model for the given degree\"\npoly_features = PolynomialFeatures(degree=4)\n   \n# transform the features to higher degree features.\nX_train_biquadratic = poly_features.fit_transform(X_train)\n   \n# fit the transformed features to Linear Regression\nbiquadratic = LinearRegression()\n\nbiquadratic.fit(X_train_biquadratic, y_train)\n     \n# predicting on training data-set\ny_train_predicted = biquadratic.predict(X_train_biquadratic)\n   \n# predicting on test data-set\ny_test_predicted = biquadratic.predict(poly_features.fit_transform(X_test))\nprint(y_test_predicted)","d513c9f8":"metrics.r2_score(y_train, y_train_predicted)","90debd1a":"metrics.r2_score(y_test, y_test_predicted)","ddb9d886":"plt.scatter(X, y, color='black')\nplt.plot(X_test, y_test_predicted, color='red')\nplt.plot(X_test, y_test, color='blue')\nplt.show()","65f62a4e":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\ncolors = ['teal', 'yellowgreen', 'gold']\nlw = 2\nfor count, degree in enumerate([2, 3, 4]):\n    model = make_pipeline(PolynomialFeatures(degree), Ridge())\n    model.fit(X, y)\n    y_plot = model.predict(X_train)\n    plt.plot(X_train, y_plot, color=colors[count], linewidth=lw,\n             label=\"degree %d\" % degree)\n\nplt.legend(loc='lower left')\n\nplt.show()","38d9c999":"# Visualizing *regression* models\nIndaiVacc = covidv[covidv['country'] == 'India']\nsns.regplot(x=\"Day_num\", y=\"people_vaccinated_per_hundred\", data=IranVacc,marker=\"+\",scatter_kws={\"color\": \"g\"}, line_kws={\"color\": \"red\"})","d7fad4b8":"# Linear Regression between people_vaccination_per_hunder & Day_num\nIndia_daynum_people=IndaiVacc[[\"Day_num\", \"people_vaccinated_per_hundred\"]]\nIndia_daynum_people.dropna(inplace = True)","c732fd61":"## Simple Linear Regression (SLR) by registered (Strong relationship )\nX = India_daynum_people[['Day_num']]\ny =  India_daynum_people['people_vaccinated_per_hundred']","4cb5526b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.25, random_state = 4)","d5165616":"# Import library for Linear Regression\nfrom sklearn.linear_model import LinearRegression\n\n# Create a Linear regressor\nSimple_LR = LinearRegression()\n\n# Train the model using the training sets \n\nSimple_LR.fit(X_train, y_train)","5ed12665":"# y = ax+b this is          \nSimple_LR.coef_ ","e268e75c":"Simple_LR.intercept_","d451ddbc":"y_pred=Simple_LR.predict(X_test)","07a293b5":"X_test.head(5)","e9c01bb8":"from sklearn import metrics\nprint('R^2:',metrics.r2_score(y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","cb297655":"plt.scatter(X, y, color='black')\nplt.plot(X_test, y_pred, color='red')\nplt.plot(X_test, y_test, color='blue')\nplt.show()","8ffec0a3":"pip install kmodes","2b822309":"from kmodes.kmodes import KModes","ef781530":"from kmodes.kprototypes import KPrototypes","5f3a8ef0":"kP = KPrototypes(n_clusters=3, init='Huang', n_init=1, verbose=True)","c765a900":"country_peo_ful_vac_per_hund= covidv[[\"country\",\"people_fully_vaccinated_per_hundred\"]]\ncountry_peo_ful_vac_per_hund.dropna(inplace = True)\ntype(country_peo_ful_vac_per_hund)\ncountry_peo_ful_vac_per_hund_max = country_peo_ful_vac_per_hund.groupby(['country'])['people_fully_vaccinated_per_hundred'].max().sort_values(ascending = False)\ntype(country_peo_ful_vac_per_hund_max)\ndf = pd.DataFrame({'country':country_peo_ful_vac_per_hund_max.index, 'people_fully_vaccinated_per_hundred':country_peo_ful_vac_per_hund_max.values})\ndf","17cc12b1":"kP.fit_predict(df, categorical=[0])","5039dd77":"kP.cluster_centroids_","5db54e16":"df[\"cluster_id\"] = kP.labels_","7c63f1de":"df.head(40)","b84ebe34":"\nplt.scatter(df[\"people_fully_vaccinated_per_hundred\"], df[\"cluster_id\"],s = 100,c = 'blue', label = 'Cluster 1')\nplt.xlabel('people_fully_vaccinated_per_hundred')\nplt.ylabel('Clusters of customers')\nplt.show()","9756c986":"from sklearn.cluster import KMeans","767d8e60":"covidv","bade6826":"# K-means for country and total caccination\n\ncountry_totalvac = covidv.iloc[:, [0, 3]]\ncountry_totalvac.dropna(inplace=True)\ncountry_totalvac[\"total_vaccinations\"] = country_totalvac[\"total_vaccinations\"] .astype(int)\nX = country_totalvac\nX\n\n","cf943f91":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nX['country'] = labelencoder.fit_transform(X['country'])\n# Choise most total vaccination in country for clustering\n\nappended_data = []\nfor i in range(len(X)):\n    data = X.query('country=='+str(i)).nlargest(1, 'total_vaccinations')\n    appended_data.append(data)     \nappended_data = pd.concat(appended_data) \nX = appended_data\n","c491dd95":"from sklearn.cluster import KMeans\nX  = X.values","0377a398":"wcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n    #k-means++ is an algorithm for choosing the initial values (or \"seeds\") for the k-means clustering algorithm.\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)","bd93d0ed":"#  Find  Elbow Curve\nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","e23bd230":"# n_clusters = 2 --> Elbow Curve\nkmeans = KMeans(n_clusters = 2, init = 'k-means++', random_state = 42)\ny_kmeans = kmeans.fit_predict(X)","63523d04":"# two cluster exist between \nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\n# plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\n# plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\n# plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\n# plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of customers')\nplt.xlabel('country')\nplt.ylabel('vaccination')\nplt.legend()\nplt.show()","1da8a646":"vacmanu = pd.read_csv('..\/input\/country-vaccinations-by-manufacturer\/country_vaccinations_by_manufacturer.csv')","c661d59f":"vacmanu.shape","92cfeaaf":"vacmanu.info()","ec905a57":"# check miss value\nvacmanu.isnull().sum()","a7572655":"vacmanu.head(5)","45ab5f17":"vacmanu['date'] = pd.to_datetime(vacmanu['date'], format = '%Y-%m-%d')\nvacmanu","a7e0eff1":"vacmanu.info()","c3a7b25a":"GermVacc = vacmanu[vacmanu['location'] == 'Germany']\nGermVacc.query(' vaccine == \"Moderna\" ', inplace= True)\nJapanVacc =vacmanu[vacmanu['location'] == 'Japan']\nJapanVacc.query(' vaccine == \"Moderna\" ', inplace= True)\nUSVacc = vacmanu[vacmanu['location'] == 'United States']\nUSVacc.query(' vaccine == \"Moderna\" ', inplace= True)\n\nfig, ax = plt.subplots(nrows=1, ncols=3, dpi=50, figsize=(40,10))\nsns.set(font_scale=2)\nsns.lineplot(data =GermVacc, x='date', y='total_vaccinations',\n             ax=ax[0], color = 'blue', linewidth=10)\nsns.lineplot(data = JapanVacc, x='date', y='total_vaccinations',\n             ax=ax[1], color = 'red', linewidth=10)\nsns.lineplot(data = USVacc, x='date', y='total_vaccinations',\n             ax=ax[2], color = 'gold', linewidth=10)\nax[0].set_ylabel(\" VACCINATIONS BY MODERNA\", fontsize = 25)\nax[0].set_xlabel(\"Date \",fontsize = 30)\nax[1].set_xlabel(\"Date \",fontsize = 30)\nax[2].set_xlabel(\"Date \",fontsize = 30)\nax[0].set_title(\"Germany\", fontsize=35)\nax[1].set_title(\"Japan\", fontsize=35)\nax[2].set_title(\"US\", fontsize=35)\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[0].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(DateFormatter('%b%y'))\nax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[2].xaxis.set_major_formatter(DateFormatter('%b%y'))\n\n","508c4e41":"Vacc = vacmanu.groupby('vaccine').sum().sort_values(by=['total_vaccinations'], ascending=False)\nVacc","bc19eb20":"Vacc = vacmanu.groupby('vaccine').sum().sort_values(by=['total_vaccinations'], ascending=False)\n\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=100, figsize = (15,6))\nsns.set()\nsns.barplot(x=Vacc.index, y=Vacc['total_vaccinations'], ax=ax)\nax.set_xlabel(\"Vaccine Manufacturers\", fontsize = 16)\nax.set_ylabel(\" \")\nfor label in ax.xaxis.get_ticklabels():\n            label.set_rotation(60)\n\nplt.show()","04edb75c":"fig, ax = plt.subplots(nrows=1, ncols=1, dpi=100, figsize = (15,6))\nvac_type_locAus_Moderna= vacmanu.query( 'vaccine == \"Moderna\"   and location ==\"Austria\" ')\nvac_type_locAus_Oxf= vacmanu.query( 'vaccine == \"Oxford\/AstraZeneca\"   and location ==\"Austria\" ')\nvac_type_locAus_Pfizer= vacmanu.query( 'vaccine == \"Pfizer\/BioNTech\"   and location ==\"Austria\" ')\nvac_type_locAus_johnson= vacmanu.query( 'vaccine == \"Johnson&Johnson\"   and location ==\"Austria\" ')\nlabel =  [\"Moderna\",\"Oxford\/AstraZeneca\",\"Pfizer\/BioNTech\",\"Johnson&Johnson\"]\nj = 0\nsns.set()\nfor i in [vac_type_locAus_Oxf,vac_type_locAus_Moderna,vac_type_locAus_Pfizer,vac_type_locAus_johnson]:\n    sns.lineplot(data =i, x='date', y=i['total_vaccinations'],ax = ax,label = label[j])\n    ax.set_xlabel(\"date \", fontsize = 16)\n    ax.set_ylabel(\"vaccination by type in Austria \")\n    j +=1\nplt.show()","51d147a9":"<img src = \"https:\/\/www.eesc.europa.eu\/sites\/default\/files\/styles\/large\/public\/images\/shutterstock_1642888921.jpg?itok=P9-6YhGd\" width=50%>","cb9fb237":"## Train your model (Regression)","261dadfb":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Prepare Data and EDA <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","a66b4652":"# Visualizing *regression* models","d0e82e9c":"## EDA and Prepare Data","7f783e64":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> Train your Model <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","0ea75c89":"<div class=\"alert alert-block alert-success\">\n    <h1 align=\"center\">Machine Learning in Python<\/h1>\n    <h3 align=\"center\">COVID -19<\/h3>\n<\/div>","3ae374e8":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">Polynomial regression  <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">    \n<\/div>","fbc7b24a":"## Importing the libraries","02cbd1cd":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 20pt;\">K-means <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","e9cb4c6a":"# GOOD  LUCK!","8267f071":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\">country_vaccinations_by_manufacturer <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","de84a5c4":"# Linear Regression","f58bbeab":"# Visualizing *regression* models ","159662eb":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 20pt;\">Kmodes <\/span><\/strong>\n<p style=\"text-align: center;\"> country_vaccinations DATASET <strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","4125d67f":"## Load  Data","0dd5be74":"<div class=\"alert alert-block alert-info\" dir=\"ltr\" style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> Regression <\/span><\/strong>\n<p style=\"text-align: center;\"><strong><span style=\"font-family: courier new, courier; font-size: 18pt;\"> \n<\/div>","dc9b87a4":"# Linear Regression in India"}}