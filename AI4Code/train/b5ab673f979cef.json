{"cell_type":{"0821ec6b":"code","8d097b21":"code","ab296e1c":"code","9544c4b0":"code","8cbf1ab0":"code","a3000e0a":"code","1f586c39":"code","299c6a50":"code","da9e6ea9":"code","e2eb319e":"code","83082798":"code","f12a1ffc":"code","046485a2":"code","32a00f19":"code","3cfa23ab":"code","eb169c82":"code","3ca5cd92":"code","b8d0c2a6":"code","f1756376":"code","ebf2cf4d":"code","e60f59a0":"code","6d0f15ac":"code","e357486b":"code","17f61bd2":"code","bfa07809":"code","f210b5da":"code","1c7c45f3":"code","25b38eef":"code","5ca6f135":"code","5444d5f4":"code","e4fab631":"code","326e3bcf":"code","8b42e32e":"code","6db72f5a":"code","580fe1ea":"markdown","e2950eed":"markdown","9d327b71":"markdown","e798b59e":"markdown","389aa1b2":"markdown","b7868459":"markdown","353b5502":"markdown","7ecfbe43":"markdown","638c4447":"markdown","3f1f0ee8":"markdown","429f9f3a":"markdown","bcb11514":"markdown","4c253882":"markdown","25504e6e":"markdown"},"source":{"0821ec6b":"from IPython.display import Image\nimport os\nImage('..\/input\/photos3\/titanic.jpeg')","8d097b21":"import numpy as np\nimport missingno as msno\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv',index_col='PassengerId')\ntrain.head()","ab296e1c":"plt.title('Train_Missing_Values',fontsize=30)\nmsno.bar(train,figsize=(10,6),color='green')","9544c4b0":"plt.title('Test_Missing_Values',fontsize=30)\nmsno.bar(test,figsize=(10,6),color='purple')","8cbf1ab0":"train['Age']=train['Age'].fillna(train['Age'].mean())\ntest['Age']=test['Age'].fillna(test['Age'].mean())","a3000e0a":"train['Cabinboo']=train['Cabin'].notnull().astype(int)\ntest['Cabinboo']=test['Cabin'].notnull().astype(int)\nsns.barplot(x='Cabinboo',y='Survived',data=train)","1f586c39":"train['Embarked'].value_counts()\ntrain['Embarked']=train['Embarked'].fillna('S')","299c6a50":"bins=[0,5,12,18,30,60,np.inf]\nlabels=['baby','children','teenagers','young adults','adults','seniors']\ntrain['AgeG']=pd.cut(train['Age'],bins,labels=labels)\ntest['AgeG']=pd.cut(test['Age'],bins,labels=labels)","da9e6ea9":"test['Fare']=test['Fare'].fillna(test['Fare'].mean())\nbins=[-1,10,30,50,100,np.inf]\nlabels=['1','2','3','4','5']\ntrain['FareG']=pd.cut(train['Fare'],bins,labels=labels)\ntest['FareG']=pd.cut(test['Fare'],bins,labels=labels)","e2eb319e":"sns.barplot(x='AgeG',y='Survived',data=train,palette=sns.light_palette(\"green\"))","83082798":"sns.barplot(x=train['FareG'],y=train['Survived'],palette=sns.light_palette('red'))","f12a1ffc":"sns.barplot(x='Sex',y='Survived',data=train)\nprint('male:',train['Survived'][train['Sex']=='male'].value_counts(normalize=True)[1])\nprint('female:',train['Survived'][train['Sex']=='female'].value_counts(normalize=True)[1])","046485a2":"sns.barplot(x='Pclass',y='Survived',data=train,palette=sns.light_palette('blue'))\nprint('Pclass1:',train['Survived'][train['Pclass']==1].value_counts(normalize=True)[1])\nprint('Pclass2:',train['Survived'][train['Pclass']==2].value_counts(normalize=True)[1])\nprint('Pclass3:',train['Survived'][train['Pclass']==3].value_counts(normalize=True)[1])","32a00f19":"sns.barplot(x='SibSp',y='Survived',data=train,palette=sns.color_palette('Blues'))\nprint('SibSp0:',train['Survived'][train['SibSp']==0].value_counts(normalize=True)[1])\nprint('SibSp1:',train['Survived'][train['SibSp']==1].value_counts(normalize=True)[1])\nprint('SibSp2:',train['Survived'][train['SibSp']==2].value_counts(normalize=True)[1])\nprint('SibSp3:',train['Survived'][train['SibSp']==3].value_counts(normalize=True)[1])\nprint('SibSp4:',train['Survived'][train['SibSp']==4].value_counts(normalize=True)[1])","3cfa23ab":"sns.barplot(x='Parch',y='Survived',data=train,palette=sns.color_palette('binary'))\nprint('Parch0:',train['Survived'][train['Parch']==0].value_counts(normalize=True)[1])\nprint('Parch1:',train['Survived'][train['Parch']==1].value_counts(normalize=True)[1])\nprint('Parch2:',train['Survived'][train['Parch']==2].value_counts(normalize=True)[1])\nprint('Parch3:',train['Survived'][train['Parch']==3].value_counts(normalize=True)[1])","eb169c82":"train=train.drop('Ticket',axis=1)\ntest=test.drop('Ticket',axis=1)\ntrain=train.drop('Cabin',axis=1)\ntest=test.drop('Cabin',axis=1)","3ca5cd92":"Sex_map={'male':0,'female':1}\ntrain['Sex']=train['Sex'].map(Sex_map)\ntest['Sex']=test['Sex'].map(Sex_map)","b8d0c2a6":"train= pd.get_dummies(data=train,columns=['Embarked'])\ntest=pd.get_dummies(data=test,columns=['Embarked'])","f1756376":"AgeGmap={'baby':6,'children':5,'teenagers':4,'young adults':3,'adults':2,'seniors':1}\ntrain['AgeG']=train['AgeG'].map(AgeGmap)\ntest['AgeG']=test['AgeG'].map(AgeGmap)","ebf2cf4d":"train['FareG']=train['FareG'].astype(int)\ntest['FareG']=test['FareG'].astype(int)\ntrain['AgeG']=train['AgeG'].astype(int)\ntest['AgeG']=test['AgeG'].astype(int)","e60f59a0":"cols=['Name','Age','Fare']\ntrain=train.drop(cols,axis=1)\ntest=test.drop(cols,axis=1)","6d0f15ac":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\npred=train.drop('Survived',axis=1)\ntarget=train['Survived']\nx_train,x_val,y_train,y_val=train_test_split(pred,target,test_size=0.2)","e357486b":"lr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_pred=lr.predict(x_val)\nlrscore=accuracy_score(y_pred,y_val)\nlrscore","17f61bd2":"from sklearn.svm import SVC\nsvm=SVC()\nsvm.fit(x_train,y_train)\ny_pred=svm.predict(x_val)\nsvmscore=accuracy_score(y_pred,y_val)\nsvmscore","bfa07809":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n \ntree = DecisionTreeClassifier(criterion='entropy', \n                              max_depth=None\n                              )\n \nbag = BaggingClassifier(base_estimator=tree,\n                        n_estimators=500, \n                        max_samples=1.0, \n                        max_features=1.0, \n                        bootstrap=True)\nbag.fit(x_train,y_train)\ny_pred=bag.predict(x_val)\nbagscore=accuracy_score(y_pred,y_val)\nbagscore","f210b5da":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(base_estimator=tree,n_estimators=100,learning_rate=0.5)\nada.fit(x_train,y_train)\ny_pred=ada.predict(x_val)\nadascore=accuracy_score(y_pred,y_val)\nadascore","1c7c45f3":"from sklearn.ensemble import RandomForestClassifier\nrf =RandomForestClassifier(n_estimators=500,max_depth=3)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_val)\nrfscore=accuracy_score(y_pred,y_val)\nrfscore","25b38eef":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train,y_train)\ny_pred=knn.predict(x_val)\nknnscore=accuracy_score(y_pred,y_val)\nknnscore","5ca6f135":"from xgboost import XGBClassifier\nxgb=XGBClassifier(n_estimators=500,max_depth=5,learning_rate=0.5,reg_lambda=1,reg_alpha=1)\nxgb.fit(x_train,y_train)\ny_pred=xgb.predict(x_val)\nxgbscore=accuracy_score(y_pred,y_val)\nxgbscore","5444d5f4":"print('RandomForest:',rfscore)\nprint('KNeighborsClassifier:',knnscore)\nprint('AdaBoostClassifier:',adascore)\nprint('BaggingClassifier:',bagscore)\nprint('SVC:',svmscore)\nprint('xgb:',xgbscore)","e4fab631":"from sklearn.metrics import confusion_matrix\nconfmat=confusion_matrix(y_true=y_val,y_pred=y_pred)\nprint(confmat)","326e3bcf":"fig, ax = plt.subplots(figsize=(6,6))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.5)\nfor i in range(confmat.shape[0]):\n         for j in range(confmat.shape[1]):\n          ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\n \nplt.tight_layout()\n#plt.savefig('images\/06_09.png', dpi=300)\nplt.show()","8b42e32e":"from sklearn.metrics import precision_score, recall_score, f1_score\nprint('Precision_score:',precision_score(y_true=y_pred, y_pred=y_val))\nprint('Recall_score:',recall_score(y_true=y_pred, y_pred=y_val))\nprint('f1_score:',f1_score(y_true=y_pred, y_pred=y_val))","6db72f5a":"ids = test.index\npredictions = xgb.predict(test)\n\n\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submissionXGB.csv', index=False)","580fe1ea":"#                              **Titanic - Machine Learning from Disaster**","e2950eed":"# **Feature Engineering Reference**\n* \u6211\u5011\u628a\u5e74\u9f61\u505a\u4e00\u500b\u5206\u5c64\uff0c0-5\u70ba\u5152\u7ae5\uff0c6-12\u70ba\u5c0f\u5b69,13-18\u70ba\u5c11\u5e74,19-30\u70ba\u9752\u5c11\u5e74,30-60\u70ba\u6210\u4eba,60-\u70ba\u8001\u4eba\n* \u6211\u5011\u4f9d\u64da\u6050\u61fc\u7a0b\u5ea6\u5206\u70ba5\u7d1a","9d327b71":"# **Visualization**","e798b59e":"# **Feature Engineering**","389aa1b2":"**\u6df7\u6dc6\u77e9\u9663(confusion matrix)\u4ecb\u7d39**\n* TP(True Positive): \u6b63\u78ba\u9810\u6e2c\u6210\u529f\u7684\u6b63\u6a23\u672c\uff0c\u70baTP\n* TN(True Negative): \u6b63\u78ba\u9810\u6e2c\u6210\u529f\u7684\u8ca0\u6a23\u672c\uff0c\u70baTN\n* FP(False Positive): \u932f\u8aa4\u9810\u6e2c\u6210\u6b63\u6a23\u672c\uff0c\u70baFP\n* FN(False Negative): \u932f\u8aa4\u9810\u6e2c\u6210\u8ca0\u6a23\u672c(\u6216\u8005\u8aaa\u6c92\u80fd\u9810\u6e2c\u51fa\u4f86\u7684\u6b63\u6a23\u672c)\uff0c\u70baFN\n","b7868459":"# **Visualization Reference**\n* \u5152\u7ae5\u7684\u751f\u5b58\u7387\u662f\u6700\u9ad8\u7684\uff0c\u800c\u8001\u4eba\u7684\u751f\u5b58\u7387\u662f\u6700\u4f4e\u7684\n* \u800c\u6050\u61fc\u5206\u6578\u8d8a\u9ad8\uff0c\u751f\u5b58\u7387\u8d8a\u9ad8\n* \u7537\u6027\u751f\u5b58\u7387\u53ea\u670918%\uff0c\u5973\u6027\u751f\u5b58\u7387\u670974%\n* \u793e\u6703\u7d93\u6fdf\u5730\u4f4d\u8d8a\u9ad8\uff0c\u751f\u5b58\u7387\u660e\u986f\u8f03\u9ad8\n* \u53ea\u6709\u4e00\u500b\u5144\u5f1f\u59ca\u59b9\u7684\u4eba\u5b58\u6d3b\u7387\u6700\u9ad8\uff0c\u800c\u8d8a\u591a\u5144\u5f1f\u59d0\u59b9\uff0c\u751f\u5b58\u7387\u8d8a\u4f4e","353b5502":"# **Confusion_Matrix**","7ecfbe43":"* \u9019\u88e1\u6211\u5011\u90fd\u4f7f\u7528Accuarcy_score\u4f86\u4e0b\u53bb\u8a55\u4f30\uff0c\u800c\u6211\u5011\u7684\u6a21\u578b\u4e2d\uff0c\u4ee5\uff38\uff27\uff22\u8868\u73fe\u6700\u4f73\uff0c\u4e0b\u9762\u6211\u5011\u5c31\u90fd\u4f7f\u7528\uff38\uff27\uff22\u5427\uff01\n\\begin{equation}\nAccuracy = \\frac{TN + TP}{TN + TP + FN + FP}\n\\end{equation}","638c4447":"# **Missing Values**","3f1f0ee8":"* **\u5728Age\u88e1\u9762\u6709\u5927\u698220%\u7684\u907a\u5931\u503c**\n\n* **\u5728Cabin\u88e1\u9762\u6709\u592a\u591a\u7684\u907a\u5931\u503c**\n\n* **\u5728Embarked\u88e1\u9762\u67092\u500b\u907a\u5931\u503c**","429f9f3a":"* **Recall(\u53ec\u56de\u7387) = TP\/(TP+FN)**\n\nRecall_score\u662f\u5728\u6240\u6709\u6b63\u6a23\u672c\u7576\u4e2d\uff0c\u80fd\u5920\u9810\u6e2c\u591a\u5c11\u6b63\u6a23\u672c\u7684\u6bd4\u4f8b\uff0c\u6e96\u78ba\u7387\u70ba\u5728\u6240\u6709\u9810\u6e2c\u70ba\u6b63\u6a23\u672c\u4e2d\uff0c\u6709\u591a\u5c11\u70ba\u6b63\u6a23\u672c\n\n* **Precision(\u6e96\u78ba\u7387) = TP\/(TP+FP)**\n\nPrecision\u770b\u7684\u662f\u5728\u9810\u6e2c\u6b63\u5411\u7684\u60c5\u5f62\u4e0b\uff0c\u5be6\u969b\u7684\u300c\u7cbe\u6e96\u5ea6\u300d\u662f\u591a\u5c11\n\n* **F1-score = 2 * Precision * Recall \/ (Precision + Recall)**\n\nF1-score\u5247\u662f\u5169\u8005\u7684\u8abf\u548c\u5e73\u5747\u6578\uff0c\u7b97\u662f\u4e00\u500b\u6bd4\u8f03\u6982\u7565\u7684\u6307\u6a19\u4f86\u770b\u9019\u500b\u6a21\u578b\u7684\u8868\u73fe","bcb11514":"# Modeling","4c253882":"# **MissingValues Reference**\n* \u6211\u5011\u4f7f\u7528**\u5e73\u5747\u503c**\u4f86\u88dc\u5145\u5e74\u9f61\u7684\u907a\u5931\u503c\n* \u800cCabin\u88cf\u9762\uff0c\u6211\u5011\u767c\u73fe\u82e5Cabin\u70ba\u907a\u5931\u503c\uff0c\u6b7b\u4ea1\u7684\u6a5f\u7387\u903c\u8fd170%\uff0c\u82e5Cabin\u4e0d\u662f\u907a\u5931\u503c\uff0c\u6b7b\u4ea1\u7387\u53ea\u670930%\uff0c\u6211\u5011\u7528\u9019\u500b\u4e0b\u53bb\u505a\u500b\u7279\u5fb5\n* \u5728Embarked\u88cf\u9762\u67092\u500b\u907a\u5931\u503c\uff0c\u6211\u5011\u4f7f\u7528\u773e\u6578\uff33\u4f86\u586b\u5145\u907a\u5931\u503c","25504e6e":"# **Ready to Train**"}}