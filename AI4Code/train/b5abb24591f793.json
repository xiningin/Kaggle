{"cell_type":{"48e5004b":"code","963a57f5":"code","583894aa":"code","c3b73d2d":"code","7bd8865c":"code","3200054a":"code","a0bdbecf":"code","8eeaa953":"code","0dbdf7f4":"code","cb18c978":"code","6df8c8e5":"code","bb36d65a":"code","e5933333":"code","48a0506a":"code","965db6b7":"code","3fb4ab88":"code","c6405ced":"code","bae35486":"code","393a3b4e":"code","34031b6c":"code","9bcdc2d7":"code","8cac2d94":"markdown","e3939c62":"markdown","4c0a4672":"markdown","8b439fd9":"markdown","6c20ff6e":"markdown","f861d38e":"markdown","a6930681":"markdown","c4051b8b":"markdown","f1375d47":"markdown","0e1a0219":"markdown"},"source":{"48e5004b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Visualization library\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","963a57f5":"df=pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndf.head()","583894aa":"X=df.iloc[:,3:13]\ny=df.iloc[:,13]","c3b73d2d":"geography=pd.get_dummies(X['Geography'],drop_first=True)\ngender=pd.get_dummies(X['Gender'],drop_first=True)","7bd8865c":"X=X.drop(['Geography','Gender'],axis=1)\nX.head()","3200054a":"X=pd.concat([X,geography,gender],axis=1)\nX.head()","a0bdbecf":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","8eeaa953":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","0dbdf7f4":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout","cb18c978":"classifier=Sequential()\nclassifier.add(Dense(units=10,kernel_initializer='he_uniform',activation='relu',input_dim=11))\nclassifier.add(Dropout(0.3))\nclassifier.add(Dense(units=10,kernel_initializer='he_uniform',activation='relu'))\nclassifier.add(Dropout(0.4))\nclassifier.add(Dense(units=10,kernel_initializer='he_uniform',activation='relu'))\nclassifier.add(Dropout(0.3))\nclassifier.add(Dense(units=1,kernel_initializer='glorot_uniform',activation='sigmoid'))\n# classifier.complier(optimizer='adam',loss=binary_)","6df8c8e5":"classifier.summary()","bb36d65a":"classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","e5933333":"model_history=classifier.fit(X_train,y_train,validation_split=0.33,batch_size=10,epochs=100,verbose=1)","48a0506a":"model_history.history.keys()","965db6b7":"y_pred=classifier.predict(X_test)","3fb4ab88":"# summarize history for accuracy\nplt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","c6405ced":"# summarize history for loss\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","bae35486":"y_pred = (y_pred > 0.5)","393a3b4e":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","34031b6c":"import seaborn as sns\nsns.heatmap(cm,annot=True,cmap=\"gist_earth\")","9bcdc2d7":"# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nscore=accuracy_score(y_pred,y_test)\nscore","8cac2d94":"### **Creating of dummy variables**","e3939c62":"### **Feature Scaling**","4c0a4672":"### **Model Creation**","8b439fd9":"### **Creating Train-Test Dataset**","6c20ff6e":"### **Importing of Keras libraries**","f861d38e":"### **Splitting**","a6930681":"### **Concating of dummy features**","c4051b8b":"### **Importing of datasets**","f1375d47":"Formula of para=no of neurons in previous layer X no of neurons in current layer +1 X no of neurons in current layer","0e1a0219":"### **Dropping of unnecessary features**"}}