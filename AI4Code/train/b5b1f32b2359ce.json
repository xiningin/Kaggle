{"cell_type":{"1bb5a82a":"code","dcb7b951":"code","1a0a4dd5":"code","0ed72fc7":"code","ae343b06":"code","523109e7":"code","551ba65b":"code","8a3842dd":"code","207deca5":"code","894ea09c":"markdown","336c28b2":"markdown","54164deb":"markdown","cbb9aa3e":"markdown","237b4a40":"markdown","a6d227a3":"markdown","42c05f13":"markdown","ceb23ff9":"markdown","fc0d22b1":"markdown","d05b0eb3":"markdown","bc158215":"markdown","086777e9":"markdown"},"source":{"1bb5a82a":"import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","dcb7b951":"# Storing the data in a pandas data frame.\n\ndf = pd.read_csv(\"..\/input\/subscriber-count\/Subscriber.csv\")\ndf.head(10)","1a0a4dd5":"x = df.iloc[:, :-1]\ny = df.iloc[:, 1]","0ed72fc7":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)","ae343b06":"simplelinearRegression = LinearRegression()\nsimplelinearRegression.fit(x_train, y_train)","523109e7":"y_predict = simplelinearRegression.predict(x_test)","551ba65b":"predict = pd.DataFrame(y_predict)","8a3842dd":"predict.apply(np.round)","207deca5":"i = 21\nwhile i <= 28:\n  print(\"Total number of increase in subscribers on September %d ==>\" %(i) , int(simplelinearRegression.predict([[i]])))\n  i= i+1","894ea09c":"And then we need to predict those values using then predict method, for this we need to pass the tested value of the 'x' variable, by doing so we get the predicted values (subscribers). And the next line of code is just conversion, this is because the y_predict is of type numpy array, so we need to convert this into a data frame only then we can apply the round function. Now the variable predict contains all the predicted subscribers as seen above:\n\nLater I will put the data in a while loop to get it in an actual format, don't worry its just a print statement with the predicted values you will get it once you trace it back down:\n\nThis is how the predict function can predict the subscribers, the subscribers returned by the predict function is accurate. Below given is the social blade statistics, you can compare the rest.","336c28b2":"**Importing the necessary libraries**\n1. Numpy: This will round off some values to get more acurrate results. To invoke the numpy library\/ To read the official documentation of numpy library visit the link below: \n[Numpy](https:\/\/numpy.org\/devdocs\/)\n2. Pandas: Data needs to be stored in a dataframe hence we use pandas. Find more info in the link below:\n[Pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/)\n3. Sklearn.linear: Using linear regression algorithm to predict the data, we have to import it's library, and importing sci-kit learn will enable us to access the linear regression library. Learn more from the link below:\n[Sklean.Linear](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html)\n4. Sklearn.model_selection: A quick note to import any library in python all you have to do is just say \"import keyword\" the keyword can be any name of the library such as pandas, numpy and many more.","54164deb":"\nHere both the 'x' and the 'y' variables are divided into training and testing data, as seen in the above code snippet the size of the test data is 0.3 or 30% and the rest is 70% (training data), random_state is the seed used by the random number generator.\n\nNote: Try printing the training values of both x and y, then you will understand what I'm talking about. **HINT: print(x_test).**","cbb9aa3e":"# **Implementing our classifie based on simple regression**\n\nHere we apply the linear regression algorithm, to do this we feed the trained tested values to the algorithm to predict the subscribers. ","237b4a40":"Here in the above code, we are calling the Linear Regression function and then we are trying to fit the model by-passing the trained values.","a6d227a3":"# **Reading the dataset from the CSV file.**\nFind the data set [HERE](https:\/\/www.kaggle.com\/stanen\/subscriber-count)","42c05f13":"# **Getting Started:**\n\n**The Steps that we are going to follow to complete this implementation is as follows:**\n\n1. Importing the necessary libraries.\n2. Reading the dataset from the CSV file.\n3. Splitting the dataset into independent(x) and depenent(y) variables.\n4. Dividing the completedataset into training and testing dataset.\n5. Implement our classifier based on simple linear regression.","ceb23ff9":"You can download the data or Input it by navigating to the top right and selecting add data. Search 'Subscriber Count' and hit enter.\n\nMore information [HERE](https:\/\/www.kaggle.com\/dansbecker\/finding-your-files-in-kaggle-kernels)","fc0d22b1":"**Split the dataset into independent(x) and dependent(y) variables.**\n\nBefore dividing the data set into the train and test data, you need to tell what are dependent and independent variables only then you can divide later. This can be done as follows:","d05b0eb3":"Here the 'x' value comprises the data and the 'y' value comprises the subscribers, and iloc is used to get the values from a data frame. The reason I have used [:,: -1] is because I needed the second last column from the data frame, and the [:1] gives me the last column of the data frame. You can print the value for confirmation.","bc158215":"Predict a famous youtubers daily subscribers using [Linear Regression](https:\/\/towardsdatascience.com\/linear-regression-using-python-b136c91bf0a2).","086777e9":"# **Dividing the complete dataset into training and test.**\n"}}