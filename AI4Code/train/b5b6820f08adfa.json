{"cell_type":{"2de021e0":"code","ed7a5c11":"code","e7004f57":"code","77674dca":"code","339a9413":"code","67f50e2a":"code","9d6878e5":"code","db9f6801":"code","878a9fa2":"code","af162f77":"code","cf165048":"code","43997b86":"code","3684a995":"code","8525ecdf":"code","45806cfa":"code","4b24fa08":"code","327afdd7":"code","7122eaf3":"code","d083eef9":"code","b639a91f":"code","abb644ea":"code","8748ef5c":"code","f3789ce1":"markdown","01b58842":"markdown","c3b2d4b2":"markdown","c42c4387":"markdown","aef862b3":"markdown","19a9abbb":"markdown"},"source":{"2de021e0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ed7a5c11":"data=pd.read_csv('..\/input\/time-series-starter-dataset\/Month_Value_1.csv')","e7004f57":"data.info()","77674dca":"data['Period'].nunique()","339a9413":"p=data[data[\"Revenue\"].notnull()]\np","67f50e2a":"data['Period']=pd.to_datetime(data['Period'],format=\"%d.%m.%Y\")\ndata['Period']=data['Period'].dt.to_period('M')","9d6878e5":"data.info()","db9f6801":"ts=data.loc[0:63,['Period','Revenue']]\nts","878a9fa2":"ts['Month']=ts['Period'].dt.month\nts['Year']=ts['Period'].dt.year\nts.head()","af162f77":"ts.set_index('Period',inplace=True)\nts.head()","cf165048":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","43997b86":"plt.title('Revenue Data')\nts['Revenue'].plot()","3684a995":"sns.lineplot(x='Month',y='Revenue',data=ts)","8525ecdf":"sns.boxplot(x='Month',y='Revenue',data=ts)","45806cfa":"sns.lineplot(x='Year',y='Revenue',data=ts)","4b24fa08":"sns.boxplot(x='Year',y='Revenue',data=ts)","327afdd7":"from statsmodels.tsa.stattools import adfuller\n\nresult=adfuller(ts['Revenue'],autolag='AIC')\n\nprint(f'ADF statistics: {result[0]}')\nprint(f'p-value: {result[1]}')\n\nfor key,value in result[4].items():\n    print(f'Critical value {key}: {value}')","7122eaf3":"ma=ts['Revenue'].rolling(window=12,center=True,min_periods=6).mean()\nax=ts['Revenue'].plot()\nma.plot(ax=ax)","d083eef9":"from statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\n\nfourier = CalendarFourier(freq=\"A\", order=10)\n\ndp = DeterministicProcess(\n    index=ts.index,\n    constant=True,               # dummy feature for bias (y-intercept)\n    order=1,                     # trend (order 1 means linear)\n    seasonal=True,               # weekly seasonality (indicators)\n    additional_terms=[fourier],  # annual seasonality (fourier)\n    drop=True,                   # drop terms to avoid collinearity\n)\n\nX = dp.in_sample()","b639a91f":"X","abb644ea":"from sklearn.linear_model import LinearRegression","8748ef5c":"y = ts[\"Revenue\"]\n\nmodel = LinearRegression(fit_intercept=False)\n_ = model.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=y.index)\nX_fore = dp.out_of_sample(steps=32)\ny_fore = pd.Series(model.predict(X_fore), index=X_fore.index)\n\nax = y.plot(color='0.25', style='.', title=\"Tunnel Traffic - Seasonal Forecast\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax = y_fore.plot(ax=ax, label=\"Seasonal Forecast\", color='C3')","f3789ce1":"We have been given revenue values for continuous 64 months, we have to predict for 32 months ","01b58842":"It points toward seasonal pattern","c3b2d4b2":"This shows there is linearly increasing trend","c42c4387":"As p value is greater than 0.05, then null hypothesis cannot be reject.\nTherefore the series is non-stationary","aef862b3":"Accounts for trend and seasonality ","19a9abbb":"ADF test for checking the stationarity"}}