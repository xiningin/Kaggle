{"cell_type":{"dbde815b":"code","051da892":"code","40eb5418":"code","a2fe7546":"code","a536802d":"code","2511297d":"code","f3b23796":"code","11fdbd14":"code","a113a64f":"code","1044bd01":"code","8bf04c45":"code","0d51f198":"code","03a6bc16":"code","6f0f870e":"code","f749af51":"code","bcc47e27":"code","fae4067d":"code","db1911c4":"code","cba3359f":"code","f0808327":"markdown","a2052ff1":"markdown","ffe57d61":"markdown","7b13aedc":"markdown"},"source":{"dbde815b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","051da892":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.colors import ListedColormap\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\nplt.style.use('ggplot')\nsns.set(font_scale = 1.5)\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Pallets used for visualizations\ncolor= \"Spectral\"\ncolor_plt = ListedColormap(sns.color_palette(color).as_hex())\ncolor_hist = 'teal'","40eb5418":"df = pd.read_csv(\"\/kaggle\/input\/all-products-available-on-sephora-website\/sephora_website_dataset.csv\")","a2fe7546":"df.head(2)","a536802d":"df.shape","2511297d":"df.info()","f3b23796":"#visualize the missing data \nplt.figure(figsize = (10, 6))\nsns.heatmap(data = df.isnull())","11fdbd14":"fig, ax = plt.subplots( figsize=(15, 6))\nax.hist(df['price'], bins = 300, color = color_hist)\n\nax.set_xlabel('Price')\nax.set_ylabel('Frequency')\nfig.suptitle('The Distribution of products Price in Sephora website ', fontsize = 20)\n\nax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\nplt.show()","a113a64f":"fig, ax = plt.subplots( figsize=(15, 6))\nax.hist(df['rating'], color = color_hist)\n\nax.set_xlabel('rating')\nax.set_ylabel('Frequency')\nfig.suptitle('The Distribution of products Rating in Sephora website ', fontsize = 20)\n\n#ax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\nplt.show()","1044bd01":"\nfig, ax = plt.subplots( figsize=(15, 6))\nax.hist(df['number_of_reviews'], color = color_hist)\n\nax.set_xlabel('number_of_reviews')\nax.set_ylabel('Frequency')\nfig.suptitle('The Distribution of number of reviews in each product in Sephora website ', fontsize = 20)\n\n#ax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\nplt.show()","8bf04c45":"ig, ax = plt.subplots( figsize = (12, 8))\nax = sns.scatterplot(x = 'rating', \n                     y = 'price', \n                     data = df, \n                     marker = 'o', s = 200, palette = color)\n\nax.set_ylabel('Price')\nax.set_xlabel('Rating')\nfig.suptitle('The product Rating vs. Price', fontsize = 20)\n\nax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nplt.show()","0d51f198":"ig, ax = plt.subplots( figsize = (12, 8))\nax = sns.scatterplot(x = 'number_of_reviews', \n                     y = 'price', \n                     data = df, \n                     marker = 'o', s = 200, palette = color)\n\nax.set_ylabel('Price')\nax.set_xlabel('Number of Reviews')\nfig.suptitle('The Number of reviews for product vs. Price', fontsize = 20)\n\nax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nax.get_xaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nplt.show()","03a6bc16":"df.describe()","6f0f870e":"df.select_dtypes('object').columns","f749af51":"df.corr()['price'].sort_values(ascending = False)","bcc47e27":"fig, axs = plt.subplots(figsize = (16, 14)) \nmask = np.triu(np.ones_like(df.corr(), dtype = np.bool))\ng = sns.heatmap(df.corr(), ax = axs, mask=mask, cmap = sns.diverging_palette(180, 10, as_cmap = True), square = True)\n\nplt.title('Correlation between Features')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()","fae4067d":"# a function that takes a dataframe and transforms it into a standard form after dropping nun_numirical columns\ndef to_standard (df):\n    \n    num_df = df[df.select_dtypes(include = np.number).columns.tolist()]\n    \n    ss = StandardScaler()\n    std = ss.fit_transform(num_df)\n    \n    std_df = pd.DataFrame(std, index = num_df.index, columns = num_df.columns)\n    return std_df","db1911c4":"ax, fig = plt.subplots(1, 1, figsize = (18, 18))\nplt.title('The distribution of All Numeric Variable in the Dataframe', fontsize = 20) #Change please\n\nsns.boxplot(y = \"variable\", x = \"value\", data = pd.melt(to_standard(df)), palette = color)\nplt.xlabel('Range after Standarization', size = 16)\nplt.ylabel('Attribue', size = 16)\n\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\n\nplt.show()","cba3359f":"numeric_feats = df.dtypes[df.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = df[numeric_feats.tolist()].apply(lambda x:stats.skew(x.dropna())).sort_values(ascending = False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew':skewed_feats})\nskewness.head()","f0808327":"<img src=\"http:\/\/imgur.com\/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n\n\n# Sephora Products \n\n\n<img src=\"https:\/\/i.insider.com\/5838406765edfed40a8b49b1?width=2500&format=jpeg&auto=webp\" style=\"height: 400px; width: 1000px\">\n\n\nBy: Raghad Alharbi\n\n---","a2052ff1":"## Finding correlation between columns and visualize it","ffe57d61":"## The distribution of Numerical Columns in the Dataframe","7b13aedc":"## Checking skewness of all numerical columns"}}