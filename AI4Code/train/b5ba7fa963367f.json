{"cell_type":{"90b0e05d":"code","ff31bd62":"code","cacd8225":"code","d739571c":"code","1dc36edb":"code","c65bbe86":"code","c17148d5":"code","baa7280e":"code","a83bec51":"code","c35333d6":"code","7973920e":"code","058cdc68":"code","5274b6c7":"code","033ee4cc":"code","7d3b6cce":"code","30175fec":"code","b2d91cb7":"code","585bf5bb":"code","828acc3a":"markdown","97311734":"markdown","3f009031":"markdown"},"source":{"90b0e05d":"from __future__ import absolute_import, division, print_function\n\n# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nprint(tf.__version__)","ff31bd62":"#Read in the dataset\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","cacd8225":"train.head(3)","d739571c":"test.head(3)","1dc36edb":"#Visualizing the label column\nsns.countplot(train['label'])","c65bbe86":"#Grab the response variable label column\nlabel = train.iloc[:, train.columns == 'label']\ntrain = train.iloc[:, train.columns != 'label']","c17148d5":"label.info()","baa7280e":"#Convert dataframe object to an ndarray and reshape them\ntrain_image = train.values.reshape(-1, 28, 28, 1)\ntest_image = test.values.reshape(-1, 28, 28, 1)\n\nprint(train_image.shape, test_image.shape)","a83bec51":"#Now we have structured our data, we can check the imaging\nplt.imshow(train_image[1][:,:,0])","c35333d6":"#Now we scale our data to fasten the training process\ntrain_images = train_image \/ 255.0\n\ntest_images = test_image \/ 255.0","7973920e":"#Visualizing plots again\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i][:,:,0], cmap=plt.cm.binary)\nplt.show()","058cdc68":"#Prepare the data for model building\n#Separate into training and validation set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(\n               train_images, label.values, test_size = 0.25, random_state = 2019)","5274b6c7":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = 'Same', activation = 'relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (4,4), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (4,4), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = 'relu'))\n\nmodel.add(Dense(10, activation = 'softmax'))","033ee4cc":"model.compile(optimizer='adam',  #Autoadjust optimizer\n              loss='sparse_categorical_crossentropy', #Cross entropy function for loss function\n              metrics=['accuracy'])","7d3b6cce":"history = model.fit(X_train, y_train, \n          validation_data = (X_val, y_val),\n          verbose = 2,\n          epochs=25)","30175fec":"#Graphing the training loss \/ validation loss to check overfitting or underfitting\nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","b2d91cb7":"#A visulization of our Neural Network\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"model.png\")","585bf5bb":"#Predict the model\nresults = model.predict(test_images)","828acc3a":"### __Step 1. Set up the layers__","97311734":"### __Step 2. Compile the model__","3f009031":"### __Step 3. Train & Evaluate the model__"}}