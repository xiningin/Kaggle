{"cell_type":{"c65a095b":"code","65aada5a":"code","03d549e5":"code","bcae331b":"code","06366a68":"code","cfbbfb2a":"code","a07b619e":"code","02462725":"code","64fb7f00":"code","f655b2c0":"code","3cf2458c":"code","2e8e9ed9":"code","630e4c6d":"code","a71136ac":"code","c5f6d989":"code","237bbacd":"code","66654103":"code","04415260":"code","ad17b7b6":"code","e3d628ec":"code","5881f610":"code","16c28c24":"code","63906c90":"code","8ede6f2c":"code","a44ae404":"code","e8c7a111":"code","dcaac2e6":"code","5024f775":"code","4f51fc17":"code","3a44390b":"code","f716f53e":"code","61ff38ce":"code","d54f60cf":"code","b6be0895":"code","1c0720d3":"code","d5aeafcd":"code","2b595301":"code","c0a1b4af":"code","7dd675c4":"markdown","84566b91":"markdown","e12d564d":"markdown","fc3b0430":"markdown","fe96ad43":"markdown","b3b0d522":"markdown","6de8b626":"markdown","c838556e":"markdown"},"source":{"c65a095b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","65aada5a":"df=pd.read_csv('..\/input\/usa-housing\/USA_Housing.csv')","03d549e5":"df.head()","bcae331b":"df.shape","06366a68":"y=df['Price']\nX=df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n       'Avg. Area Number of Bedrooms', 'Area Population']]","cfbbfb2a":"from sklearn.preprocessing import PolynomialFeatures","a07b619e":"polynomial_converter=PolynomialFeatures(degree=2,include_bias=False)","02462725":"poly_features=polynomial_converter.fit(X)","64fb7f00":"poly_features=polynomial_converter.transform(X)","f655b2c0":"poly_features.shape","3cf2458c":"X.shape","2e8e9ed9":"from sklearn.model_selection import train_test_split","630e4c6d":"X_train,X_test,y_train,y_test=train_test_split(poly_features, y, test_size=0.3,random_state=101)","a71136ac":"from sklearn.linear_model import LinearRegression\n","c5f6d989":"polymodel=LinearRegression()\npolymodel.fit(X_train,y_train)","237bbacd":"y_pred=polymodel.predict(X_test)","66654103":"pd.DataFrame({'y_test':y_test,'y_pred':y_pred,'Residuals':(y_test-y_pred)}).head(4)","04415260":"from sklearn import metrics","ad17b7b6":"MAE_Poly=metrics.mean_absolute_error(y_test,y_pred) ","e3d628ec":"MSE_Poly=metrics.mean_squared_error(y_test,y_pred)","5881f610":"RMSE_Poly=np.sqrt(MSE)","16c28c24":"pd.DataFrame([MAE,MSE,RMSE],index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","63906c90":"from sklearn.model_selection import train_test_split\nXS_train,XS_test,ys_train,ys_test=train_test_split(X, y, test_size=0.3,random_state=101)","8ede6f2c":"from sklearn.linear_model import LinearRegression\nSimplemodel=LinearRegression()\nSimplemodel.fit(XS_train,ys_train)","a44ae404":"ys_pred=Simplemodel.predict(XS_test)\nMAE_simple=metrics.mean_absolute_error(ys_test,ys_pred) \nMSE_simple=metrics.mean_squared_error(ys_test,ys_pred)\nRMSE_simple=np.sqrt(MSE_simple)","e8c7a111":"pd.DataFrame({'Poly Metrics':[MAE_Poly,MSE_Poly,RMSE_Poly],'Simple Metrics':[MAE_simple,MSE_simple,RMSE_simple]}, index=['MAE','MSE','RMSE'])","dcaac2e6":"train_RMSE_list=[]\ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    polynomial_converter=PolynomialFeatures(degree=d,include_bias=False)\n    poly_features=polynomial_converter.fit(X)\n    poly_features=polynomial_converter.transform(X)\n    X_train,X_test,y_train,y_test=train_test_split(poly_features, y, test_size=0.3,random_state=101)\n    polymodel=LinearRegression()\n    polymodel.fit(X_train,y_train)\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train,y_train_pred))\n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)\n    ","5024f775":"train_RMSE_list\n","4f51fc17":"test_RMSE_list\n","3a44390b":"plt.plot( train_RMSE_list[:5], label='Train RMSE')\nplt.plot( test_RMSE_list[:5], label='Test RMSE')\n\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","f716f53e":"Final_polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit(X)\nFinal_poly_features= Final_polynomial_converter.transform(X)\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3, random_state=101)\nFinal_PolyModel=LinearRegression()\nFinal_PolyModel.fit(X_train, y_train)","61ff38ce":"from joblib import dump, load","d54f60cf":"dump(Final_PolyModel, 'Sales_PolyModel.joblib')","b6be0895":"dump(Final_polynomial_converter, 'Poly_Converter.joblib')","1c0720d3":"Load_Converter=load('Poly_Converter.joblib')\nLoad_PolyModel=load('Sales_PolyModel.joblib')","d5aeafcd":"campaign=[[61287.067179,6.002900,5,3,40000]]  ","2b595301":"campaign_poly=Load_Converter.transform(campaign)","c0a1b4af":"Final_PolyModel.predict(campaign_poly)","7dd675c4":"Training the Model","84566b91":"Adjusting Model Parameters","e12d564d":"Predicting test data","fc3b0430":"compare to Simple Linear Regression","fe96ad43":"Split the Data to Train and Test","b3b0d522":"Preprocessing","6de8b626":"Determine the Features and Target Variable","c838556e":"Evaluating the model performance"}}