{"cell_type":{"4aa66c60":"code","2793026e":"code","f58098b2":"code","7ebea45d":"code","f49e2b51":"code","41c61cc1":"code","617c031b":"code","13133032":"markdown","b2eb767a":"markdown","b3fc7f40":"markdown","4c5b7e68":"markdown","633f7a9a":"markdown"},"source":{"4aa66c60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2793026e":"import pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\n## feature scalling\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n%matplotlib inline","f58098b2":"## Reading iris dataset\niris_data = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')\nprint(\"****************\")\nprint(f\"Shape of the dataset :- {iris_data.shape}\")\nprint(\"\\n***********\\n\")\nprint(f\"Sample Dataset :- \\n {iris_data.head()}\")\nprint(\"\\n***********\\n\")\nprint(f\"Checking for whether null values present or not :- \\n{iris_data.isnull().sum()}\")\n\nprint(f\"Duplicate values :- {len(iris_data.loc[iris_data.duplicated()])}\")\n\n## remove duplicate values\niris_data = iris_data.drop_duplicates()\nprint(\"\\n***********\\n\")\nprint(f\"Target value counts :- \\n {iris_data['species'].value_counts()}\")","7ebea45d":"sns.countplot(iris_data['species'])","f49e2b51":"## heat map\nsns.heatmap(iris_data.corr(), annot=True, annot_kws={'size':20})","41c61cc1":"## separate independent and dependent variables\n\nX = iris_data.drop(['species'], axis=1)\ny = iris_data['species']\n\n## creating pipeline for applying standard scaler on x dataset\npipe_line = Pipeline([\n                      ('std_scaler', StandardScaler())\n])\n\n## transform X values \nX = pipe_line.fit_transform(X)\n\n## initialize label encoder\nlabel_encode = LabelEncoder()\n## transform y values with label encoder\ny = label_encode.fit_transform(y)\n\nprint(f\"Labels list from label encoder :- {list(label_encode.classes_)}\")\n\n\n## split whole dataset into train and test datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n\nprint(f\"Size Of The Train Dataset :- {len(X_train)}\")\nprint(f\"Size Of The Test Dataset :- {len(X_test)}\")","617c031b":"## initialize svm for classification problem\nsvc_clf = SVC(C=0.5, kernel='linear')\n\n## build SVC model \nsvc_clf.fit(X_train, y_train)\n\n## prediction on x_test\npredict_result = svc_clf.predict(X_test)\n\n## Calculate accuracy value\naccuracy = accuracy_score(y_test, predict_result)\nprint(f\"Iris classificication Accuracy :- {accuracy}\\n\")\n\n## calcuate confusion matrix\nConfusion_matric = confusion_matrix(y_test, predict_result)\nprint(f\"Confusion matrix :- \\n {Confusion_matric}\\n\")\n\n## calculate recall, precision and f1-score\nclf_report = classification_report(y_test, predict_result)\nprint(f\"Classification Report :- \\n {clf_report}\")","13133032":"## EDA","b2eb767a":"## Data Preprocessing & Preparing for the building model","b3fc7f40":"## Data Visualization","4c5b7e68":"## Importing Libraries\n","633f7a9a":"## Mode Building"}}