{"cell_type":{"5105f521":"code","a8527e11":"code","de27636c":"code","4938ea72":"code","89db0f49":"code","e050f91b":"code","6ef511ef":"code","6fed6235":"code","5716fe00":"code","4dc69e34":"code","4668b3e7":"code","0453dfda":"code","12a62461":"code","d17e8d0c":"code","61dc95ba":"code","15b7394a":"code","a47c8624":"code","d25d5980":"code","6a47cd78":"code","5f74a18b":"code","6bb7b1e8":"code","93fc9446":"code","1f078d5a":"code","f91b9c10":"code","662df07b":"code","cdac9e6c":"code","c89ee76c":"code","136cc80d":"code","7a8f7531":"code","0e275548":"code","ab600eea":"code","ac36b20c":"code","aa30cf24":"code","b345b704":"code","fc9ba398":"code","694cf318":"code","fc56c428":"code","105d8a11":"code","568f9c75":"code","6bf8a331":"code","eaa84121":"code","4de73be2":"code","32692cd3":"code","c17b1a15":"code","f0015be9":"code","b2160bea":"code","4948360c":"code","8f75e376":"code","aebb1a97":"code","2d9ea562":"code","28afd42f":"code","38ecd95b":"code","453070d9":"markdown","ad4c0210":"markdown","1a3662ed":"markdown","4ff2d6a4":"markdown","17ec72ad":"markdown","13ada851":"markdown","696eaf6d":"markdown","205207a8":"markdown","0f4eea6e":"markdown","f16a9f12":"markdown","7bb7ae41":"markdown","cf7f9d23":"markdown","05712346":"markdown","afec77e5":"markdown","e478643f":"markdown","92486a19":"markdown"},"source":{"5105f521":"import os\nimport glob\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix\n","a8527e11":"data = '..\/input\/famous-iconic-women\/output\/train'","de27636c":"file_pathAll = list(glob.glob(data+'\/**\/*.jpg'))\nlabels = list(map(lambda x :os.path.split(os.path.split(x)[0])[1], file_pathAll))\nfile_path = pd.Series(file_pathAll, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\ndata = pd.concat([file_path, labels], axis=1)\ndata = data.sample(frac=1).reset_index(drop=True)\ndata.head()","4938ea72":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(17,7),subplot_kw={'xticks':[],'yticks':[]})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data.Filepath[i]))\n    ax.set_title(data.Label[i])\nplt.tight_layout()\nplt.show()","89db0f49":"train_df, test_df = train_test_split(data, test_size=0.2, random_state=1)","e050f91b":"test_df.shape","6ef511ef":"def gen(pre,train,test):\n    train_datagen = ImageDataGenerator(\n                        preprocessing_function=pre,\n                        validation_split=0.2)\n    test_datagen = ImageDataGenerator(\n                        preprocessing_function=pre)\n    \n    train_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='Filepath',\n        y_col='Label',\n        target_size=(224, 224),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=True,\n        seed=0,\n        subset='training',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\"\n        )\n    valid_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='Filepath',\n        y_col='Label',\n        target_size=(224, 224),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False,\n        seed=0,\n        subset='validation',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\"\n    )\n    test_gen = test_datagen.flow_from_dataframe(\n        dataframe=test,\n        x_col='Filepath',\n        y_col='Label',\n        target_size=(224, 224),\n        color_mode='rgb',\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False\n    )\n    return train_gen, valid_gen, test_gen","6fed6235":"def func(name_model):\n    pre_model = name_model(\n                   include_top=False,\n                   weights='imagenet',\n                   pooling='avg')\n    pre_model.trainable = False\n    inputs = pre_model.input\n\n    x = Dense(600, activation='relu')(pre_model.output)\n    x = Dense(600, activation='relu')(x)\n    outputs = Dense(64, activation='softmax')(x)\n\n    model = Model(inputs=inputs, outputs=outputs)\n    model.compile(loss = 'categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])\n    my_callbacks  = [EarlyStopping(monitor='val_accuracy',\n                              patience=5,\n                              min_delta=0,\n                              mode='auto')]\n    return model, my_callbacks","5716fe00":"def plot(history,test_gen,train_gen,model):\n    # Plotting Accuracy, val_accuracy, loss, val_loss\n    fig, ax = plt.subplots(1, 2, figsize=(10, 3))\n    ax = ax.ravel()\n\n    for i, met in enumerate(['accuracy', 'loss']):\n        ax[i].plot(history.history[met])\n        ax[i].plot(history.history['val_' + met])\n        ax[i].set_title('Model {}'.format(met))\n        ax[i].set_xlabel('epochs')\n        ax[i].set_ylabel(met)\n        ax[i].legend(['train', 'val'])\n        \n    # Predict Data Test\n    pred = model.predict(test_gen )\n    pred = np.argmax(pred,axis=1)\n    labels = (train_gen.class_indices)\n    labels = dict((v,k) for k,v in labels.items())\n    pred = [labels[k] for k in pred]\n    \n    # Classification report\n    cm=confusion_matrix(test_df.Label,pred)\n    clr = classification_report(test_df.Label, pred)\n    print(clr)\n    # Display 6 picture of the dataset with their labels\n    fig, axes = plt.subplots(nrows=4, ncols=4, figsize=(12, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(plt.imread(test_df.Filepath.iloc[i+1]))\n        ax.set_title(f\"True: {test_df.Label.iloc[i+1]}\\nPredicted: {pred[i+1]}\")\n    plt.tight_layout()\n    plt.show()\n        \n    return history","4dc69e34":"def result_test(test,model_use):\n    results = model_use.evaluate(test, verbose=0)\n    print(\"    Test Loss: {:.5f}\".format(results[0]))\n    print(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))\n    \n    return results","4668b3e7":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nRestNet_pre=preprocess_input\ntrain_gen_RestNet, valid_gen_RestNet, test_gen_RestNet = gen(RestNet_pre,train_df, test_df)","0453dfda":"ResNet50_model, callback=func(ResNet50)\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","12a62461":"history = ResNet50_model.fit(\n    train_gen_RestNet,\n    validation_data=valid_gen_RestNet,\n    epochs=100,\n    callbacks=callback\n)","d17e8d0c":"history_ResNet=plot(history,test_gen_RestNet,train_gen_RestNet,ResNet50_model)","61dc95ba":"result_ResNet = result_test(test_gen_RestNet,ResNet50_model)","15b7394a":"from tensorflow.keras.applications import NASNetLarge\nfrom tensorflow.keras.applications.nasnet import preprocess_input\nNASNet_pre=preprocess_input\ntrain_gen_NASNet, valid_gen_NASNet, test_gen_NASNet = gen(NASNet_pre,train_df, test_df)","a47c8624":"NASNet_model, callback=func(NASNetLarge)","d25d5980":"history = NASNet_model.fit(\n    train_gen_NASNet,\n    validation_data=valid_gen_NASNet,\n    epochs=100,\n    callbacks=callback\n)\n","6a47cd78":"history_NASNet=plot(history,test_gen_NASNet,train_gen_NASNet,NASNet_model)","5f74a18b":"result_NASNet = result_test(test_gen_NASNet,NASNet_model)","6bb7b1e8":"from tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nMobileNetV2_pre=preprocess_input\ntrain_gen_MobileNetV2, valid_gen_MobileNetV2, test_gen_MobileNetV2 = gen(MobileNetV2_pre,train_df, test_df)","93fc9446":"MobileNet_model, callback=func(MobileNetV2)","1f078d5a":"history_MobileNet = MobileNet_model.fit(\n    train_gen_MobileNetV2,\n    validation_data=valid_gen_MobileNetV2,\n    epochs=100,\n    callbacks=callback\n)","f91b9c10":"history_MobileNetV2=plot(history,test_gen_MobileNetV2,train_gen_MobileNetV2,MobileNet_model)","662df07b":"result_MobileNetV2 = result_test(test_gen_MobileNetV2,MobileNet_model)","cdac9e6c":"from tensorflow.keras.applications import DenseNet201\nfrom tensorflow.keras.applications.densenet import preprocess_input\nDenseNet201_pre=preprocess_input\ntrain_gen_DenseNet201, valid_gen_DenseNet201, test_gen_DenseNet201 = gen(DenseNet201_pre,train_df, test_df)","c89ee76c":"DenseNet201_model, callback=func(DenseNet201)","136cc80d":"history_DenseNet201 = DenseNet201_model.fit(\n    train_gen_DenseNet201,\n    validation_data=valid_gen_DenseNet201,\n    epochs=100,\n    callbacks=callback\n)","7a8f7531":"history_DenseNet201=plot(history,test_gen_DenseNet201,train_gen_DenseNet201,DenseNet201_model)","0e275548":"result_DenseNet201 = result_test(test_gen_DenseNet201,DenseNet201_model)","ab600eea":"from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nIRNV2_pre=preprocess_input\ntrain_gen_IRNV2, valid_gen_IRNV2, test_gen_IRNV2 = gen(IRNV2_pre,train_df, test_df)","ac36b20c":"IRNV2_model, callback=func(InceptionResNetV2)","aa30cf24":"history_IRNV2 = IRNV2_model.fit(\n    train_gen_IRNV2,\n    validation_data=valid_gen_IRNV2,\n    epochs=100,\n    callbacks=callback\n)","b345b704":"history_IRNV2=plot(history,test_gen_IRNV2,train_gen_IRNV2,IRNV2_model)","fc9ba398":"result_IRNV2 = result_test(test_gen_IRNV2,IRNV2_model)","694cf318":"from keras.applications.xception import Xception, preprocess_input\nXception_pre=preprocess_input\ntrain_gen_Xception, valid_gen_Xception, test_gen_Xception = gen(Xception_pre,train_df, test_df)","fc56c428":"Xception_model, callback=func(Xception)","105d8a11":"history_Xception = Xception_model.fit(\n    train_gen_Xception,\n    validation_data=valid_gen_Xception,\n    epochs=100,\n    callbacks=callback\n)","568f9c75":"history_Xception=plot(history,test_gen_Xception,train_gen_Xception,Xception_model)","6bf8a331":"result_Xception = result_test(test_gen_Xception,Xception_model)","eaa84121":"from keras.applications.nasnet import NASNetMobile, preprocess_input\nNASNM_pre=preprocess_input\ntrain_gen_NASNM, valid_gen_NASNM, test_gen_NASNM = gen(NASNM_pre,train_df, test_df)","4de73be2":"NASNM_model, callback=func(NASNetMobile)","32692cd3":"history_NASNM = NASNM_model.fit(\n    train_gen_NASNM,\n    validation_data=valid_gen_NASNM,\n    epochs=100,\n    callbacks=callback\n)\n","c17b1a15":"history_NASNM=plot(history,test_gen_NASNM,train_gen_NASNM,NASNM_model)","f0015be9":"result_NASNM = result_test(test_gen_NASNM,NASNM_model)","b2160bea":"from keras.applications.vgg16 import VGG16, preprocess_input\nVGG16_pre=preprocess_input\ntrain_gen_VGG16, valid_gen_VGG16, test_gen_VGG16 = gen(VGG16_pre,train_df, test_df)","4948360c":"VGG16_model, callback=func(VGG16)","8f75e376":"history_VGG16 = VGG16_model.fit(\n    train_gen_VGG16,\n    validation_data=valid_gen_VGG16,\n    epochs=100,\n    callbacks=callback\n)","aebb1a97":"history_VGG16=plot(history,test_gen_VGG16,train_gen_VGG16,VGG16_model)","2d9ea562":"result_VGG16 = result_test(test_gen_VGG16,VGG16_model)","28afd42f":"output = pd.DataFrame({'Model':['ResNet50','NASNetLarge','MobileNetV2','DenseNet201',\n                                'InceptionResNetV2','Xception','NASNetMobile','VGG16'],\n                      'Accuracy':[result_ResNet[1], result_NASNet[1], result_MobileNetV2[1], result_DenseNet201[1],\n                                  result_IRNV2[1], result_Xception[1], result_NASNM[1], result_VGG16[1]]})\noutput","38ecd95b":"plt.figure(figsize=(12, 6))\nplots = sns.barplot(x='Model', y='Accuracy', data=output)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\n\nplt.xlabel(\"Models\", size=14)\nplt.ylabel(\"Accuracy\", size=14)\nplt.show()","453070d9":"# ResNet50","ad4c0210":"![](https:\/\/storage.googleapis.com\/kaggle-datasets-images\/1182746\/1978927\/a4269f6476e87ddd1f70217024c055c0\/dataset-cover.jpg?t=2021-02-26-20-11-27)","1a3662ed":"# InceptionResNetV2","4ff2d6a4":"# Import Libraries","17ec72ad":"# DenseNet201","13ada851":"# VGG16","696eaf6d":"# NASNetMobile","205207a8":"# Final Report","0f4eea6e":"# Train & Test Split","f16a9f12":"* Feel free to download Notebook and do experiments on it.\n* Comments if you find something inappropriate and will improve accordingly.\n* Upvote if you find this notebook useful.","7bb7ae41":"# Xception","cf7f9d23":"# Functions","05712346":"# MobileNetV2","afec77e5":"# Load Dataset","e478643f":"# Thanks","92486a19":"# NASNetLarge"}}