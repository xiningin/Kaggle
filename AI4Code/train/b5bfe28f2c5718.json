{"cell_type":{"a003ab78":"code","65e66ec6":"code","546b4f29":"code","bc30dfcc":"code","3f797b10":"code","eddf594a":"code","61eb8d59":"code","bfe7ef67":"code","8bd59796":"code","89c8d42e":"code","2dfc18ab":"code","64e2eea7":"code","285db2af":"code","14189511":"code","d6585fc1":"code","d8b133ed":"markdown","58b4afe5":"markdown","c87331fe":"markdown","0cbf14fd":"markdown","fea76384":"markdown","f0b4bc47":"markdown","30723db8":"markdown"},"source":{"a003ab78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65e66ec6":"train = pd.read_csv(\"\/kaggle\/input\/st4035-2020-inclass-1\/train_data.csv\")","546b4f29":"test = pd.read_csv(\"\/kaggle\/input\/st4035-2020-inclass-1\/test_data.csv\")","bc30dfcc":"train.shape","3f797b10":"duplicate_rows_train = train[train.duplicated()]\nprint(\"number of duplicate rows: \", duplicate_rows_train.shape)","eddf594a":"train.shape","61eb8d59":"train['X2'] = np.power(train['X2'], 3)\ntest['X2'] = np.power(test['X2'], 3)\n\ntrain['X4'] = np.power(train['X4'], 4)\ntest['X4'] = np.power(test['X4'], 4)","bfe7ef67":"from scipy import stats\nimport numpy as np\n\n#Using Z-Scores to remove outliers\nz_train = np.abs(stats.zscore(train))\nz_test = np.abs(stats.zscore(test))\n\ntrain = train[(z_train < 3).all(axis=1)]\ntest = test[(z_test < 3).all(axis=1)]","8bd59796":"# Seperating into independent and dependent variables\nX_train = train.iloc[:, 1:-1]\nY_train = train.iloc[:,-1]\n\nX_test = test.iloc[:, 1:]","89c8d42e":"# Standardizing the features of train and test sets\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n\nX_train_sd = sc.fit_transform(X_train)\nX_test_sd = sc.transform(X_test)\n\nX_train = pd.DataFrame(X_train_sd, index=X_train.index, columns=X_train.columns)\nX_test = pd.DataFrame(X_test_sd, index=X_test.index, columns=X_test.columns)","2dfc18ab":"#from sklearn.ensemble import RandomForestRegressor\n#model = RandomForestRegressor(n_estimators=30, random_state=0)\n#model.fit(X_train, Y_train)\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)\n\n#from sklearn.neural_network import MLPRegressor\n#model = MLPRegressor(random_state=0, max_iter=5000)\n#model.fit(X_train, Y_train)\n\n#from sklearn.ensemble import GradientBoostingRegressor\n#model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,max_depth=1, random_state=0, loss='ls').fit(X_train, Y_train)\n#model.fit(X_train, Y_train)","64e2eea7":"Y_pred = model.predict(X_test)","285db2af":"# Including the ID column to the output dataframe\nY_pred_df = pd.DataFrame({\"ID\":test['ID'], \"X5\":Y_pred })\nY_pred_df","14189511":"Y_pred_df.to_csv('submission.csv', index=False)","d6585fc1":"X_train","d8b133ed":"# Predicting for the Test Set","58b4afe5":"# Data Scaling","c87331fe":"# Splitting X and Y","0cbf14fd":"# Check for Duplicate Rows","fea76384":"# Feature Transformation","f0b4bc47":"# Model Fitting","30723db8":"# Remove Outliers "}}