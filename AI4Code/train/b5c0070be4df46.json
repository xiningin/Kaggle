{"cell_type":{"7762d1bc":"code","3a8be6e5":"code","d2208d02":"code","b8db9e3a":"code","64184727":"code","ea8aa989":"code","c0d23e3e":"code","ac490d25":"code","fcf9f0b6":"code","9a4ab74d":"code","84a61c32":"code","f1750fbc":"code","a0462a39":"code","a3efb08a":"code","761b4ecb":"code","01bc5b88":"code","01ec249d":"code","742aabc0":"code","1b4b9b5b":"code","35e96a6d":"code","fb0e3aa5":"code","9b657d9e":"code","4df229f5":"code","5614264a":"code","a489a89a":"code","b6785fea":"code","36586d3c":"code","9b3cc785":"code","d9a4ca59":"code","de6c1856":"code","228ffc5b":"code","144f8862":"code","f9b0beed":"code","b25bb257":"code","1993160d":"code","b50c8067":"code","b683e38d":"code","2cd88a18":"code","5e1cee21":"code","fdd4cf43":"code","97442ac8":"code","1908e59c":"code","08e1270f":"code","8504e43a":"code","f6dd377d":"code","4c545534":"code","b167def4":"code","d0486956":"code","26e888c9":"code","22c09d1b":"code","cffa1545":"code","40f545cb":"code","6b0ef178":"code","9c56b1f7":"code","dffb8c0a":"code","7d48a999":"code","127f171e":"code","6c610953":"code","31339193":"code","3f8cfb9c":"code","d2961a8e":"code","12a650da":"code","92c3c5ec":"code","83a386ed":"code","c9c22e9e":"code","69292b18":"code","85e6165a":"code","d928466b":"code","96ea7265":"code","a2190f43":"code","4700e3d2":"code","09cb00ba":"code","1a3d7b09":"code","865c8fa5":"code","3ad1e53c":"code","d90103eb":"code","c759d208":"code","ab51b14e":"code","515d410e":"code","6ba6ca6d":"code","12367ee3":"code","960488f5":"code","50e2c18d":"code","e4ede150":"code","31b49eb0":"code","2130095d":"code","b204da58":"code","f6f7b6d2":"code","aeaaf91a":"code","cac057e4":"code","d4331125":"code","38d0991f":"markdown","5a119c38":"markdown","bc0361e1":"markdown","de0e6012":"markdown","ce8cee39":"markdown"},"source":{"7762d1bc":"!pip install feature-engine\nimport numpy as np \nimport pandas as pd \npd.set_option('display.max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\nfrom scipy import stats\nfrom sklearn.model_selection import (train_test_split,cross_val_score,\n                                     GridSearchCV,KFold,learning_curve,\n                                     cross_validate,RandomizedSearchCV,\n                                    TimeSeriesSplit)\nfrom IPython.display import display\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom pdpbox import pdp, get_dataset, info_plots\nimport shap\nimport missingno as msno\nimport statsmodels.api as sm\nfrom lightgbm import LGBMRegressor,plot_importance,plot_metric,plot_tree\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import (MinMaxScaler,OneHotEncoder,\n                                   RobustScaler,LabelEncoder)\n\nfrom feature_engine.encoding import (MeanEncoder,CountFrequencyEncoder,\n                                    OneHotEncoder,OrdinalEncoder)\n\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nimport lightgbm as lgb\nfrom eli5.sklearn import PermutationImportance\nfrom lightgbm.plotting import create_tree_digraph,plot_split_value_histogram\nimport shap\nfrom pdpbox import pdp, get_dataset, info_plots\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3a8be6e5":"energy_data=pd.read_csv(\"\/kaggle\/input\/energy-consumption-generation-prices-and-weather\/energy_dataset.csv\")\nweather_data=pd.read_csv(\"\/kaggle\/input\/energy-consumption-generation-prices-and-weather\/weather_features.csv\")","d2208d02":"weather_data.head()","b8db9e3a":"weather_data.city_name.value_counts()","64184727":"energy_data.head()","ea8aa989":"energy_data.shape","c0d23e3e":"energy_data.time.min(),energy_data.time.max()","ac490d25":"weather_data.query(\"city_name == 'Valencia' \").head()","fcf9f0b6":"def miss_frame(data):\n    frame=pd.DataFrame()\n    frame[\"missing_no\"]=data.isnull().sum()\n    frame[\"missing_rate\"]=data.isnull().sum()\/len(data)\n    frame=frame.loc[frame[\"missing_rate\"]>0].sort_values(by=\"missing_rate\",\n                                                         ascending=False)\n    frame[\"bigger_005\"]=frame[\"missing_rate\"].map(lambda x:1 if x>=0.05 else 0)\n    return frame\n\nmiss_frame(energy_data)","9a4ab74d":"energy_data.eq(0).sum().to_frame(name=\"Zero No\")","84a61c32":"energy_data.drop([\"generation fossil coal-derived gas\",\n                  \"generation fossil oil shale\",\n                  \"generation fossil peat\",\n                  \"generation geothermal\",\n                  \"generation marine\",\n                  \"generation wind offshore\",\n                  \"generation hydro pumped storage aggregated\",\n                    \"forecast wind offshore eday ahead\"],\n                 axis=1,\n                 inplace=True)","f1750fbc":"miss_frame(energy_data)","a0462a39":"msno.bar(energy_data,figsize=(12,5),\n         inline=True,\n         sort=\"descending\",\n        fontsize=12);","a3efb08a":"msno.dendrogram(df=energy_data,figsize=(12,5),fontsize=12);","761b4ecb":"msno.heatmap(df=energy_data);","01bc5b88":"weather_val=weather_data.query(\"city_name == 'Valencia'\")\n\nweather_val.shape, energy_data.shape","01ec249d":"weather_val[weather_val.duplicated(subset=\"dt_iso\",\n                                   keep=\"first\")].shape","742aabc0":"weather_val=weather_val.rename({\"dt_iso\":\"time\"},axis=1)","1b4b9b5b":"print(weather_val.time.min(),weather_val.time.max())\nprint(energy_data.time.min(),energy_data.time.max())","35e96a6d":"weather_val=weather_val.drop_duplicates(subset=\"time\",\n                                        keep=\"first\")\nweather_val.shape","fb0e3aa5":"full_df=pd.merge(energy_data,weather_val,on=\"time\")\nfull_df.shape","9b657d9e":"full_df.head()","4df229f5":"full_df.dtypes.to_frame().T","5614264a":"dates = full_df[\"time\"].str.split(\" \",n=1,expand=True)[0]\ntimes = full_df[\"time\"].str.split(\" \",n=1,expand=True)[1]\n\nfull_df[\"date\"] = dates\nfull_df[\"hours\"] = times.str.split(\"+\",n=1,expand=True)[0]\n\nfull_df[\"full_time\"]=full_df[\"date\"] + \" \" + full_df[\"hours\"]\n\nfull_df[\"full_time\"]=pd.to_datetime(full_df[\"full_time\"],\n                                    format='%Y-%m-%d %H:%M')\n\nfull_df[\"full_time\"].head()","a489a89a":"full_df.head()","b6785fea":"def extract_from_date(data,time_column):\n    \n    data[\"year\"]=data[time_column].dt.year\n    data[\"quarter\"]=data[time_column].dt.quarter\n    data[\"month\"]=data[time_column].dt.month\n    data[\"week\"]=data[time_column].dt.week\n    data[\"hour\"]=data[time_column].dt.hour\n    data[\"time\"]=data[time_column].dt.time\n    data['dayofweek'] = data[time_column].dt.dayofweek\n    data[\"dayofmonth\"]=data[time_column].dt.day\n    data[\"day_name\"]=data[time_column].dt.day_name()\n    data['is_weekend'] = np.where(data['day_name'].isin(['Sunday', 'Saturday']), 1,0)\n    data[\"is_year_start\"]=data[time_column].dt.is_year_start\n    \n    return data\n\nfull_df=extract_from_date(full_df,\"full_time\")\n\nfull_df.sample(5)","36586d3c":"full_df.dtypes.to_frame().T","9b3cc785":"train=full_df.loc[~((full_df[\"year\"]==2018) & (full_df[\"month\"]==12))]\n\ntest=full_df.loc[((full_df[\"year\"]==2018) & (full_df[\"month\"]==12))] ","d9a4ca59":"fig = make_subplots()\n\nfig.add_trace(\n    go.Line(x=train[\"full_time\"],y=train[\"price actual\"],\n                                name=\"price actual\"))\n\nfig.add_trace(\n    go.Line(x=train[\"full_time\"],y=train.rolling(window=24).mean()[\"price actual\"],\n                                        name=\"rolling window=24h\"))\n\nfig.add_trace(\n    go.Line(x=train[\"full_time\"],y=train.rolling(window=168).mean()[\"price actual\"],\n                                        name=\"rolling window=168h\"))\n\nfig.update_xaxes(rangeslider_visible=True)\n\nfig.show()","de6c1856":"train.corr().abs()[\"price actual\"].nlargest(20).to_frame(name=\"corr\")","228ffc5b":"plt.figure(figsize=(20,10));\nsns.heatmap(train.iloc[:,:21].corr().abs(),\n            annot=True,\n            cmap=\"coolwarm\");","144f8862":"plt.figure(figsize=(20,10));\nsns.heatmap(train.iloc[:,20:].corr().abs(),\n            annot=True,\n            cmap=\"coolwarm\");","f9b0beed":"fig = ff.create_distplot([train[\"price actual\"]],\n                         group_labels=[\"distplot\"])\nfig.show()\n\nfig=px.box(train[\"price actual\"],\n           orientation=\"h\",\n           title=\"Actual Price Boxplot\")\nfig.show()\n#fig.update_traces(marker=dict(line=dict(width=2)))","b25bb257":"train.isnull().sum().to_frame().T","1993160d":"train.iloc[:,:21].describe().T","b50c8067":"train.describe(include=\"O\").T","b683e38d":"def diagnostic_plots(df, variable):\n    \n    plt.figure(figsize=(17, 5))\n\n    plt.subplot(1, 3, 1)\n    sns.distplot(df[variable])\n    plt.title('Histogram')\n    \n    plt.subplot(1, 3, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n    plt.ylabel('RM quantiles')\n\n    plt.subplot(1, 3, 3)\n    sns.boxplot(x=df[variable])\n    plt.title('Boxplot')\n    \n    plt.show()\n    \n    \nfor col in train.select_dtypes(exclude=\"O\").columns[:20].to_list():\n        diagnostic_plots(train.dropna(),col)","2cd88a18":"fig = make_subplots()\n\nfig.add_trace(\n    go.Line(x=train.loc[train[\"year\"]==2018,\"full_time\"],\n            y=train.loc[train[\"year\"]==2018,\"price actual\"],\n                                name=\"price actual\"))\n\nfig.add_trace(\n    go.Line(x=train.loc[train[\"year\"]==2018,\"full_time\"],\n            y=train.loc[train[\"year\"]==2018,\"temp\"],\n                                name=\"Temp\"))\nfig.add_trace(\n    go.Line(x=train.loc[train[\"year\"]==2018,\"full_time\"],\n            y=train.loc[train[\"year\"]==2018,\"generation waste\"],\n                                name=\"generation waste\"))\nfig.add_trace(\n    go.Line(x=train.loc[train[\"year\"]==2018,\"full_time\"],\n            y=train.loc[train[\"year\"]==2018,\"generation fossil oil\"],\n                                name=\"generation fossil oil\"))\n\nfig.update_xaxes(rangeslider_visible=True)\n\nfig.show()","5e1cee21":"columns_to_plot=train.select_dtypes(exclude=\"O\").columns[:20]\n\nfor col in columns_to_plot:\n    \n    with plt.style.context('seaborn-whitegrid'):\n        \n        plt.figure(figsize=(20,5));\n        plt.plot(train[\"full_time\"].tail(720),\n                 train[col].tail(720),color=\"purple\");\n        \n        plt.axhline(train[col].tail(720).mean(), \n                                                color='black',\n                                                linestyle='-',\n                                                linewidth=1,\n                                                label=\"Mean for 2018-11\"); #mean\n        \n        plt.axhline(train[col].mean(), \n                            color='red',\n                            linestyle='--',\n                            linewidth=1,\n                            label=\"Mean\"); # general mean\n        \n        plt.axvspan(\"2018-11-03\",\"2018-11-04\",color=\"gray\") #weekends\n        plt.axvspan(\"2018-11-10\",\"2018-11-11\",color=\"gray\")\n        plt.axvspan(\"2018-11-17\",\"2018-11-18\",color=\"gray\")\n        plt.axvspan(\"2018-11-24\",\"2018-11-25\",color=\"gray\")\n\n        plt.xlabel(\"Date\")\n        plt.ylabel(col)\n        plt.title(f\"{col} on 2018-11\")\n        plt.legend()\n        plt.show();","fdd4cf43":"with plt.style.context('seaborn-whitegrid'):\n    fig, ax = plt.subplots(figsize=(25,8))\n\n    ax.set_title('Price day ahead and price actual on 2018-11')\n    ax = train.tail(720).plot.line(x=\"full_time\",y=['price day ahead',\"price actual\"],ax=ax)\n    ax.set_xlabel(\"date\")\n    plt.axvspan(\"2018-11-03\",\"2018-11-04\",color=\"gray\") #weekends\n    plt.axvspan(\"2018-11-10\",\"2018-11-11\",color=\"gray\")\n    plt.axvspan(\"2018-11-17\",\"2018-11-18\",color=\"gray\")\n    plt.axvspan(\"2018-11-24\",\"2018-11-25\",color=\"gray\")\n\n    ax.axhline(train[\"price day ahead\"].tail(720).mean(), \n                                color='black',\n                                linestyle='-.',\n                                linewidth=1,\n                                label=\"Price day ahead mean on 2018-11\"); \n    \n    ax.axhline(train[\"price actual\"].tail(720).mean(), \n                                color='blue',\n                                linestyle='-.',\n                                linewidth=1,\n                                label=\"Price actual mean on 2018-11\"); \n    \n    ax.axhline(train[\"price actual\"].mean(), \n                                color='red',\n                                linestyle='-',\n                                linewidth=1,\n                                label=\"Price actual general mean on 2018-11\"); \n    \n    ax.axhline(train[\"price day ahead\"].mean(), \n                                color='green',\n                                linestyle='-',\n                                linewidth=1,\n                                label=\"Price day ahead general mean on 2018-11\"); \n    plt.legend()\n\n    ","97442ac8":"with plt.style.context('seaborn-whitegrid'):\n    fig, ax = plt.subplots(figsize=(25,8))\n\n    ax.set_title('Weather Cond. on 2018-11-30')\n    ax = train.tail(24).plot.line(x=\"full_time\",\n                                  y=[\"temp\",\"generation waste\",\n                                   \"generation fossil oil\",\n                                  \"generation biomass\"],\n                                        ax=ax)\n ","1908e59c":"def plot_actual_price(price_col,other_col,train):\n    \n    mean_price=train[price_col].mean()\n    \n    train.groupby([other_col])[price_col].mean().plot.bar(figsize=(20,6),\n                                                            color=\"cornflowerblue\");\n    plt.axhline(train[price_col].mean(),\n                                    linestyle='-',\n                                    linewidth=2,\n                                    color=\"red\");\n\n    plt.axhline(mean_price + train[price_col].std(),\n                                    linestyle=':',\n                                    linewidth=2,\n                                    color=\"red\");\n\n    plt.axhline(mean_price - train[price_col].std(),\n                                    linestyle=':',\n                                    linewidth=2,\n                                    color=\"red\");\n    plt.title(f\"{price_col}&{other_col} BarPlot\");\n    plt.show()\n","08e1270f":"for col in [\"year\",\"hour\",\"month\",\"weather_description\"]:\n    plot_actual_price(\"price actual\",col,train)","8504e43a":"fig = px.scatter(train, x=\"total load actual\", y=\"price actual\", trendline=\"ols\")\nfig.show()\nresults = px.get_trendline_results(fig)\nresults.px_fit_results.iloc[0].summary()","f6dd377d":"with plt.style.context('seaborn-whitegrid'):\n    plt.figure(figsize=(20,5));\n    plt.plot(train[\"full_time\"],train[\"price actual\"].expanding().mean())\n     #average of all prior rows","4c545534":"missing_df=train[train.isna().any(axis=1)]\nmissing_df.head()","b167def4":"miss_cols=miss_frame(train).index.to_list()\nmiss_index=missing_df.index.to_list()\nmiss_cols","d0486956":"train_new=train.copy()\ntest_new=test.copy()\n\n\nfor var in miss_cols:  #missing_indicator\n    \n    train_new[var+'_NA'] = np.where(train_new[var].isnull(), 1, 0)\n    \n    test_new[var+'_NA'] = np.where(test_new[var].isnull(), 1, 0)\n   \ntrain_new.head()","26e888c9":"train_new=train_new.interpolate(method='linear', limit_direction='forward', axis=0)","22c09d1b":"display(train[\"price actual\"].describe().to_frame().T)\ndisplay(train_new[\"price actual\"].describe().to_frame().T)","cffa1545":"train_new.iloc[miss_index].head()","40f545cb":"display(train[\"weather_main\"].value_counts(normalize=True).to_frame().T)\ndisplay(train[\"weather_icon\"].value_counts(normalize=True).to_frame().T)\ndisplay(train[\"weather_id\"].value_counts(normalize=True).to_frame().T)","6b0ef178":"train_new=train_new.drop([\"time\",\"city_name\",\"date\",\"hours\",\"full_time\",\"day_name\",\n                         \"weather_id\",\"weather_icon\",\"is_year_start\"],axis=1)\ntest_new=test_new.drop([\"time\",\"city_name\",\"date\",\"hours\",\"full_time\",\"day_name\",\n                        \"weather_id\",\"weather_icon\",\"is_year_start\"],axis=1)","9c56b1f7":"train_new.shape, test_new.shape","dffb8c0a":"train_new.head()","7d48a999":"X_train=train_new.drop([\"price actual\"],axis=1)\ny_train=train_new[\"price actual\"]\n\nX_test=test_new.drop([\"price actual\"],axis=1)\ny_test=test_new[\"price actual\"]","127f171e":"encoder = OrdinalEncoder(encoding_method='ordered', variables=['weather_main',\"weather_description\"])\nencoder.fit(X_train, y_train)\n\nX_train_t = encoder.transform(X_train)\nX_test_t = encoder.transform(X_test)\nencoder.encoder_dict_","6c610953":"X_train_t.head()","31339193":"def MAPE(y_actual,y_pred):\n    mape = np.mean(np.abs((y_actual - y_pred)\/y_actual))*100\n    return mape\n\ndef result_df(y_actual,y_pred):\n    \n    r2=r2_score(y_actual,y_pred)\n    mse=mean_squared_error(y_actual,y_pred)\n    rmse=np.sqrt(mean_squared_error(y_actual,y_pred))\n    mae=mean_absolute_error(y_actual,y_pred)\n    mape=MAPE(y_actual,y_pred)\n    \n    result=pd.DataFrame.from_dict({\"r2\":[r2],\"MSE\":[mse],\"RMSE\":[rmse],\n                         \"MAE\":[mae],\"MAPE\":[mape]})\n    return result","3f8cfb9c":"def run_lgb(train_X, train_y, val_X, val_y):\n    params = {\n        \"boosting_type\":\"dart\",\n        \"objective\": \"regression\",\n        \"metric\": [\"mape\",\"rmse\"],\n        \"num_iterations\":30,\n        \"reg_lambda\":100,\n        \"learning_rate\":0.09\n              \n    }\n\n    lgtrain = lgb.Dataset(train_X, label=train_y)\n    lgval = lgb.Dataset(val_X, label=val_y)\n    evals_result = {}\n    model = lgb.train(params, lgtrain)\n\n    pred_test_y = model.predict(val_X, num_iteration=model.best_iteration)\n    return pred_test_y, model\n\ny_pred,model=run_lgb(X_train_t,y_train,X_test_t,y_test)","d2961a8e":"model.lower_bound(),model.upper_bound()","12a650da":"model.trees_to_dataframe().head(5)","92c3c5ec":"pred_train=model.predict(X_train_t)\nresult_df(y_train,pred_train)","83a386ed":"result_df(y_test,y_pred)","c9c22e9e":"pred_df=pd.DataFrame({\"actual\":y_test,\"pred\":y_pred}).set_index(test[\"full_time\"])\n\npred_df[[\"actual\",\"pred\"]].plot(figsize=(20,5));","69292b18":"#fig = go.Figure()\n#fig.add_trace(go.Scatter(y=pred_df.actual,\n #                   mode='lines',\n  #                  name='test'))\n#fig.add_trace(go.Scatter(y=pred_df.pred,\n #                   mode='lines',\n  #                  name='pred'))\n#fig.update_xaxes(rangeslider_visible=True)\n#fig.update_layout(title='Prediction Result',\n #                  xaxis_title='Date',\n  #                 yaxis_title='Production')\n#fig.show()","85e6165a":"#plot_metric(evals_result,dpi=100);\n#print(\"Best Iteration :\", model.best_iteration)","d928466b":"plot_tree(model,dpi=500,tree_index=0);","96ea7265":"plot_importance(booster=model,\n                height=0.8,\n                figsize=(15,10),\n                dpi=100);","a2190f43":"#model=LGBMRegressor(random_state=0,\n #                   num_iterations=21\n  #                  ).fit(X_train_t,y_train)\n\n#perm = PermutationImportance(model, random_state=0).fit(X_test_t,y_test)\n#eli5.show_weights(perm, feature_names = X_test_t.columns.tolist(),top=20)","4700e3d2":"params = {\n    'boosting_type':'gbdt',\n    'objective': 'regression',\n    'metric': ['mape','rmse'],\n    \n}\n\ntscv=TimeSeriesSplit(n_splits=5)\nfull_df=pd.concat([X_train_t,y_train],axis=1)\nX=full_df.drop([\"price actual\"],axis=1)\ny=full_df[\"price actual\"]\nscores=[]\n\nfor train_index, test_index in tscv.split(X):\n    #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X.loc[train_index], X.loc[test_index]\n    y_train, y_test = y.loc[train_index], y.loc[test_index]\n    \n    model=LGBMRegressor(random_state=0,metric=['rmse']) \n    train = lgb.Dataset(X_train,y_train)\n    val = lgb.Dataset(X_test,y_test,reference=train)\n    #print('Train and Validate')\n    model = lgb.train(params=params,train_set=train,valid_sets=val,\n                           num_boost_round=1000,verbose_eval=10,early_stopping_rounds=50)\n    score=model.best_score.items()\n    scores.append(score)\n    \nprint(\"Best Scores: \",scores)","09cb00ba":"full_data=pd.concat([train_new,test_new])  \nfull_data.head()","1a3d7b09":"full_data.shape","865c8fa5":"#full_data[\"price(t-1)\"]=full_data[\"price actual\"].shift(1)\n#full_data[\"price(t-2)\"]=full_data[\"price actual\"].shift(2)\n#full_data[\"price(t-3)\"]=full_data[\"price actual\"].shift(3)\n#full_data[\"price(t-4)\"]=full_data[\"price actual\"].shift(4)\n#full_data[\"price(t-5)\"]=full_data[\"price actual\"].shift(5)\n#full_data[\"price(t-6)\"]=full_data[\"price actual\"].shift(6)\n#full_data[\"price(t-12)\"]=full_data[\"price actual\"].shift(12)\n\nfull_data[\"price(t-12)\"]=full_data[\"price actual\"].shift(12)\nfull_data[\"price(t-24)\"]=full_data[\"price actual\"].shift(36)\nfull_data[\"price(t-36)\"]=full_data[\"price actual\"].shift(48)\nfull_data[\"price(t-48)\"]=full_data[\"price actual\"].shift(48)\nfull_data[\"price(t-72)\"]=full_data[\"price actual\"].shift(72)\nfull_data[\"price(t-168)\"]=full_data[\"price actual\"].shift(168)\n\nfull_data[\"price(t-12)\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"price(t-36)\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"price(t-24)\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"price(t-48)\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"price(t-72)\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"price(t-168)\"].fillna(method=\"bfill\",inplace=True)\n\nfull_data[\"diff_forecast\"]=full_data[\"total load actual\"] - full_data[\"total load forecast\"]\n\nfull_data[\"roll_price_4\"]=full_data[\"price actual\"].rolling(window=4).mean()\nfull_data[\"roll_price_6\"]=full_data[\"price actual\"].rolling(window=6).mean()\nfull_data[\"roll_price_12\"]=full_data[\"price actual\"].rolling(window=12).mean()\nfull_data[\"roll_price_24\"]=full_data[\"price actual\"].rolling(window=24).mean()\nfull_data[\"roll_price_48\"]=full_data[\"price actual\"].rolling(window=48).mean()\n\nfull_data[\"roll_price_24_min\"]=full_data[\"price actual\"].rolling(window=24).min()\nfull_data[\"roll_price_12_min\"]=full_data[\"price actual\"].rolling(window=12).min()\nfull_data[\"roll_price_24_max\"]=full_data[\"price actual\"].rolling(window=24).max()\nfull_data[\"roll_price_12_max\"]=full_data[\"price actual\"].rolling(window=12).max()\n\nfull_data[\"roll_price_4\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_6\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_12\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_24\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_48\"].fillna(method=\"bfill\",inplace=True)\n\nfull_data[\"roll_price_24_min\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_12_min\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_24_max\"].fillna(method=\"bfill\",inplace=True)\nfull_data[\"roll_price_12_max\"].fillna(method=\"bfill\",inplace=True)","3ad1e53c":"full_data.shape","d90103eb":"full_data.tail()","c759d208":"columns_to_use=[\"generation biomass\",\n                \"generation fossil brown coal\/lignite\",\n                \"generation fossil gas\",\n               \"generation fossil hard coal\",\n                \"generation fossil oil\",\n                \"generation hydro pumped storage consumption\",\n                \"generation hydro run-of-river and poundage\",\n                \"generation hydro water reservoir\",\"generation nuclear\",\n                \"generation other renewable\",\n                \"generation waste\",\n                \"forecast solar day ahead\",\n                \"price day ahead\",\n                \"forecast wind onshore day ahead\",\n                \"total load actual\",\n                \"temp_min\",\n                \"pressure\",\n                \"humidity\",\n                \"wind_speed\",\n                \"wind_deg\",\n                \"rain_1h\",\n                \"rain_3h\",\n                \"snow_3h\",\n                \"clouds_all\",\n                \"weather_main\",\n                \"weather_description\",\n                \"hour\",\n                \"dayofweek\",\n                \"dayofmonth\",\n                \"is_weekend\",\n                \"price(t-12)\",\n                  'price(t-168)',\n                'diff_forecast',\n                \"week\",\n                \"roll_price_24_min\",\n                \"price(t-72)\",\n                'roll_price_6',\n\n                \"price actual\"\n               ]\n    ","ab51b14e":"train_=full_data[columns_to_use].iloc[:34320,:]\ntest_=full_data[columns_to_use].iloc[34320:,:]","515d410e":"plt.figure(figsize=(25,15));\nsns.heatmap(train_.corr().abs(),annot=True,cmap=\"coolwarm\");","6ba6ca6d":"X_train=train_.drop([\"price actual\"],axis=1)\ny_train=train_[\"price actual\"]\n\nX_test=test_.drop([\"price actual\"],axis=1)\ny_test=test_[\"price actual\"]\n\n\nencoder = OrdinalEncoder(encoding_method='arbitrary', variables=['weather_main',\"weather_description\"])\n#encoder=OneHotEncoder(variables=['weather_main',\"weather_description\"])\nencoder.fit(X_train, y_train)\n\nX_train = encoder.transform(X_train)\nX_test = encoder.transform(X_test)","12367ee3":"params = {\n    'boosting_type':'gbdt',#gbdt\n    'objective': 'regression',\n    'metric': ['mape','rmse'],\n    \"num_iterations\":26,#26\n    \"feature_fraction\":0.9,\n    \"reg_lambda\":300,\n    \"bagging_fraction\":0.8,\n    }\nfull_train=lgb.Dataset(X_train,y_train)\nmodel=lgb.train(params,full_train,num_boost_round=10,verbose_eval=10)\n\npred_train=model.predict(X_train)\npred_test=model.predict(X_test)\n\ndisplay(result_df(pred_train,y_train))\n\ndisplay(result_df(pred_test,y_test))","960488f5":"pred_df=pd.DataFrame({\"actual\":y_test,\"pred\":pred_test})\n\npred_df[[\"actual\",\"pred\"]].plot(figsize=(25,8));","50e2c18d":"pred_df.head(10)","e4ede150":"plot_importance(booster=model,\n                height=0.8,\n                figsize=(15,10),\n                dpi=100);","31b49eb0":"create_tree_digraph(model)","2130095d":"lgb.plot_split_value_histogram(model,feature=\"hour\",figsize=(12,5),dpi=100);","b204da58":"lgb.plot_split_value_histogram(model,feature=\"roll_price_6\",figsize=(12,5),dpi=100);","f6f7b6d2":"shap.initjs()","aeaaf91a":"explainer = shap.TreeExplainer(model)\n\nshap_values = explainer.shap_values(X_test)\n\nshap.summary_plot(shap_values, X_test)","cac057e4":"shap.summary_plot(shap_values, X_test, plot_type=\"bar\")","d4331125":"shap.force_plot(explainer.expected_value, shap_values, X_test)","38d0991f":"# Exploratory Data Analysis and Data Cleaning","5a119c38":"# TimeSeriesSplit Cross Validation ","bc0361e1":"# Baseline Model","de0e6012":"# Feaure Engineering and New Model","ce8cee39":"# Import\/Install Libraries"}}