{"cell_type":{"83efb425":"code","b748ec3f":"code","8a47079b":"code","63317f1d":"code","3a71ae54":"code","3690fe42":"code","51146ac3":"code","cb0667ee":"code","719f287a":"code","720b8997":"code","00460cdb":"code","09b65346":"code","cf2e3871":"code","17d95bd7":"code","ce0c571d":"code","e77a06da":"code","00035752":"code","fe33664d":"code","89f5d0f3":"code","5f12749f":"code","312fad11":"code","a675c018":"markdown","34f90887":"markdown","7a6dd822":"markdown","81874cc4":"markdown","15986d0e":"markdown","71fcbbba":"markdown","93e91e78":"markdown"},"source":{"83efb425":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport collections\nfrom functools import reduce \nimport operator\nimport itertools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import PercentFormatter\nimport matplotlib.ticker as ticker\nimport matplotlib.cm as cm\nimport matplotlib as mpl\nfrom matplotlib.gridspec import GridSpec\nfrom sklearn.cluster import KMeans\nfrom sklearn.pipeline import make_pipeline\n# Import Normalizer\nfrom sklearn.preprocessing import Normalizer\nfrom scipy.cluster.hierarchy import fcluster\nfrom sklearn.preprocessing import StandardScaler\npd.set_option('max_colwidth',40)\npd.set_option('display.max_colwidth', -1)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nresponse = pd.read_csv('..\/input\/freeFormResponses.csv', nrows=10000) #\nresponse.style.set_properties(subset=['text'], **{'width': '600px'})\nresplist= list(response.columns.values)\n#print(resplist) # 35 column values\nresponse.head(1)","b748ec3f":"tempA = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(1,10))\ndemograph=tempA  \ndemograph.Q7.fillna('Other',inplace=True)\nS1 = demograph[demograph['Q1'] == 'Male'].Q7\nS2 = demograph[demograph['Q1'] == 'Female'].Q7\nCompany_Female = pd.DataFrame({'Female':S2})\nCompany_Male = pd.DataFrame({'Male': S1})\nCompany_Female.fillna('Other', inplace=True)\nCompany_Male.fillna('Other', inplace=True)\nlen_f = len(Company_Female)\nlen_m = len(Company_Male)\nresult_f=[]\nresult_m = []\nfor i in range(len_f):\n    result_f.append(Company_Female.Female.iloc[i])\nc1 = collections.Counter(result_f)\ncatagory = c1.keys()\nfor i in range(len_m):\n    result_f.append(Company_Male.Male.iloc[i])\nc2 = collections.Counter(result_f)\nlist_c = []\nfor i, value in enumerate(catagory):\n    list_c.append({'Female':c1[value]\/(len_f+len_m), 'Male':c2[value]\/(len_f+len_m), 'Category of Industries': value})\nlist_company = pd.DataFrame(list_c)\nlist_company.head()","8a47079b":"sns.set(rc={\"figure.figsize\": (14, 6)})\nsns.set_style(\"white\")\nlist_company.plot(x=\"Category of Industries\", y=[\"Female\", \"Male\"], kind=\"bar\")\nplt.title('Female\/Male ratio in different industries based on total number of candidates', fontsize = 16)\nplt.ylabel('Percentage ratio ', fontsize=14)\nplt.xlabel('Category of Industries ', fontsize=14)","63317f1d":"tempA = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(1,12))\ndemograph=tempA  \ntempA.head()\ndemograph.Q8.fillna('Other',inplace=True)\nS1 = demograph[demograph['Q1'] == 'Male'].Q8\nS2 = demograph[demograph['Q1'] == 'Female'].Q8\nCompany_Female = pd.DataFrame({'Female':S2})\nCompany_Male = pd.DataFrame({'Male': S1})\nCompany_Female.fillna('Other', inplace=True)\nCompany_Male.fillna('Other', inplace=True)\nlen_f = len(Company_Female)\nlen_m = len(Company_Male)\nresult_f=[]\nresult_m = []\nfor i in range(len_f):\n    result_f.append(Company_Female.Female.iloc[i])\nc1 = collections.Counter(result_f)\ncatagory = c1.keys()\nfor i in range(len_m):\n    result_f.append(Company_Male.Male.iloc[i])\nc2 = collections.Counter(result_f)\nlist_c = []\nfor i, value in enumerate(catagory):\n    list_c.append({'Female':c1[value]\/(len_f+len_m), 'Male':c2[value]\/(len_f+len_m), 'Category of Industries': value})\nlist_company = pd.DataFrame(list_c)\nlist_company.head()\n","3a71ae54":"sns.set(rc={\"figure.figsize\": (14, 6)})\nsns.set_style(\"white\")\nlist_company.plot(x=\"Category of Industries\", y=[\"Female\", \"Male\"], kind=\"bar\")\nplt.title('Female\/Male ratio based on experience', fontsize = 16)\nplt.ylabel('Percentage ratio ', fontsize=14)\nplt.xlabel('Experience Level ', fontsize=14)","3690fe42":"all = pd.read_csv('..\/input\/multipleChoiceResponses.csv', nrows=100)\nalllist= list(all.columns.values)\n#print(alllist)\n","51146ac3":"def column_arrange(part_str, mat, i, rnum):\n    survlist=[]\n    for j in range(1,rnum):\n        label =  part_str +str(j)\n        if (mat[label].iloc[i] == 0):\n            continue\n        else:\n            survlist.append(mat[label].iloc[i])\n    return survlist","cb0667ee":"multchoice1 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(1,22))\nrowindex = multchoice1[ ((multchoice1['Q6']=='Data Scientist') | (multchoice1['Q6']=='Data Analyst') |\\\n          (multchoice1['Q6']=='Data Engineer') |  (multchoice1['Q6']=='Software Engineer') |\\\n          (multchoice1['Q6']=='Research Scientist')|(multchoice1['Q6']=='Research Assistant') ) & (multchoice1['Q7']!='I am a student') ].index\nanalystmat1=multchoice1.loc[(rowindex)]        \nanalystmat1.fillna(0, inplace=True)\n############################################################################\nmultchoice2 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(22,45))\nanalystmat2=multchoice2.loc[(rowindex)] \nanalystmat2.fillna(0, inplace=True)\n##########################################################################\nmultchoice3 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(45,65))\nanalystmat3=multchoice3.loc[(rowindex)]  \nanalystmat3.fillna(0, inplace=True)\n#########################################################################\nmultchoice4 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(65,84))\nanalystmat4=multchoice4.loc[(rowindex)]           \nanalystmat4.fillna(0, inplace=True)\n########################################################################\nmultchoice5 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(84,108))\nanalystmat5=multchoice5.loc[(rowindex)]           \nanalystmat5.fillna(0, inplace=True)\n#######################################################################\nmultchoice6 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(108, 128))\nanalystmat6=multchoice6.loc[(rowindex)]           \nanalystmat6.fillna(0, inplace=True)\n######################################################################\nmultchoice7 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(128,151))\nanalystmat7=multchoice7.loc[(rowindex)]  \nanalystmat7.fillna(0, inplace=True)\n#####################################################################\nmultchoice8 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(151,195))\nanalystmat8=multchoice8.loc[(rowindex)]           \nanalystmat8.fillna(0, inplace=True)\n####################################################################\nmultchoice9 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(195, 224))\nanalystmat9=multchoice9.loc[(rowindex)]           \nanalystmat9.fillna(0, inplace=True)\n#####################################################################\nmultchoice10 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(224,250))\nanalystmat10=multchoice10.loc[(rowindex)]           \nanalystmat10.fillna(0, inplace=True)\n####################################################################\nmultchoice11 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(250,277))\nanalystmat11=multchoice11.loc[(rowindex)]           \nanalystmat11.fillna(0, inplace=True)\n###################################################################\nmultchoice12 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(277,305))\nanalystmat12=multchoice12.loc[(rowindex)]           \nanalystmat12.fillna(0, inplace=True)\n##################################################################\nmultchoice13 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(305,330))\nanalystmat13=multchoice13.loc[(rowindex)]           \nanalystmat13.fillna(0, inplace=True)\n###################################################################\nmultchoice14 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(330,356))\nanalystmat14=multchoice14.loc[(rowindex)]           \nanalystmat14.fillna(0, inplace=True)\n####################################################################\nmultchoice15 = pd.read_csv('..\/input\/multipleChoiceResponses.csv', usecols=range(356,395))\nanalystmat15=multchoice15.loc[(rowindex)]           \nanalystmat15.fillna(0, inplace=True)\n\ndel multchoice1 \ndel multchoice2 \ndel multchoice3 \ndel multchoice4 \ndel multchoice5 \ndel multchoice6 \ndel multchoice7 \ndel multchoice8 \ndel multchoice9 \ndel multchoice10 \ndel multchoice11 \ndel multchoice12 \ndel multchoice13 \ndel multchoice14 \ndel multchoice15","719f287a":"numanal=len(analystmat4)","720b8997":"survlist1 = []\nfor i in range(numanal):\n    param1 = column_arrange('Q11_Part_', analystmat1,i,7)\n    param2 = column_arrange('Q13_Part_', analystmat2,i,15)\n    param3 = column_arrange('Q14_Part_', analystmat3,i,11)\n    param4 = column_arrange('Q15_Part_', analystmat3,i,7)\n    param5 = column_arrange('Q16_Part_', analystmat4,i,18)\n    param6 = column_arrange('Q19_Part_', analystmat5,i,19)\n    param7 = column_arrange('Q21_Part_', analystmat6,i,13)\n    param8 = column_arrange('Q27_Part_', analystmat7,i,20)\n    param9 = column_arrange('Q28_Part_', analystmat8,i,43)\n    param10 = column_arrange('Q29_Part_', analystmat9,i,28)\n    param11 = column_arrange('Q30_Part_', analystmat10,i,25)\n    param12 = column_arrange('Q31_Part_', analystmat11,i,12)\n    param13 = column_arrange('Q33_Part_', analystmat11,i,11)\n    param17 = column_arrange('Q36_Part_', analystmat12,i,13)\n    param18 = column_arrange('Q38_Part_', analystmat13,i,22)\n    param19 = column_arrange('Q39_Part_', analystmat14,i,2)\n    param20 = column_arrange('Q41_Part_', analystmat14,i,3)\n    param21 = column_arrange('Q42_Part_', analystmat14,i,5)\n    param22 = column_arrange('Q44_Part_', analystmat14,i,6)\n    param23 = column_arrange('Q45_Part_', analystmat14,i,6)\n    param24 = column_arrange('Q47_Part_', analystmat15,i,16)\n    param25 = column_arrange('Q49_Part_', analystmat15,i,12)\n    param26 = column_arrange('Q50_Part_', analystmat15,i,8)\n    survlist1.append({'role_work': param1, 'IDE_used': param2,'NB_used': param3, \\\n                    'Cloud_Serv': param4, 'Prog_Lang': param5, 'ML_Framework': param6,'Visual_Lib': param7, 'Cloud_prod': param8,\\\n                    'Cloud_ML': param9, 'RDBMS': param10, 'Big_Data_Prod': param11, 'data_types': param12, \\\n                    'public_datasets': param13,\\\n                    'online_learn': param17, \\\n                    'media_sources': param18, 'quality_learning': param19, 'important_topic': param20, \\\n                    'metrics': param21, 'algorithms_check': param22,\\\n                    'insights_interpret': param23, 'explain_interprete': param24, 'reproduce_work': param25, \\\n                    'barriers': param26})\nmultchoice = pd.DataFrame(survlist1)\n#multchoice = multchoice.apply(lambda x: x.str.strip()).replace('', np.nan)\nmultchoice.algorithms_check = multchoice.algorithms_check.apply(lambda y: ['None'] if len(y)==0 else y)\nmultchoice.head(2)\ndel param1\ndel param2 \ndel param3 \ndel param4 \ndel param5\ndel param6 \ndel param7 \ndel param8 \ndel param9 \ndel param10 \ndel param11 \ndel param12 \ndel param13 \ndel param17 \ndel param18 \ndel param19 \ndel param20 \ndel param21 \ndel param22 \ndel param23 \ndel param24 \ndel param25 \ndel param26 ","00460cdb":"feature_multichoice = 'Big_Data_Prod Cloud_ML \tCloud_Serv \tCloud_prod \tIDE_used \t\\\nML_Framework \tNB_used \tProg_Lang \tRDBMS \tVisual_Lib \talgorithms_check \t\\\nbarriers \tdata_types \texplain_interprete \timportant_topic \t\\\ninsights_interpret \tmedia_sources \tmetrics \tonline_learn \t\\\npublic_datasets \tquality_learning \treproduce_work \trole_work '.split()\nprint(len(feature_multichoice))","09b65346":"def normalized_value(c,text, num):\n    nv = c[text]\/num\n    return nv","cf2e3871":"def pie_plot_survey(x,y,title):\n    sns.set(rc={\"figure.figsize\": (12, 8)})\n    sns.set_style(\"white\")\n    cmap = plt.get_cmap('Spectral')\n    colors = [cmap(i) for i in np.linspace(0, 1, 8)]\n    #plt.pie(survIDE,labels=barriers, autopct='%.0f%%', shadow=True, colors=colors)\n    patches, texts, autotexts = plt.pie(x,labels=y, autopct='%.0f%%', shadow=True, colors=colors)\n    for i in range (len(y)):\n        texts[i].set_fontsize(16)\n        autotexts[i].set_fontsize(14)\n    plt.suptitle(title, fontsize=20)","17d95bd7":"def bar_plot_surveydata(x,y,xlabel, ylabel,  width):\n    sns.set(rc={\"figure.figsize\": (20, 6)})\n    sns.set_style(\"white\")\n    sns.despine()\n    plt.bar(x,y, width, color=sns.color_palette(\"Blues\",3))\n    sns.despine(top=True, right=True, left=False, bottom=False) \n    plt.xlabel(xlabel, fontsize=20)\n    plt.ylabel(ylabel, fontsize=20)\n    plt.tick_params(direction='out', length=6, width=2, colors='k')\n    plt.tick_params(axis='both', which='major', labelsize=14, rotation=10)\n    plt.grid(True, which='major', axis='y', color=\"white\", linewidth=1, zorder=1)","ce0c571d":"top_software1 = []\ntop_software2 = []\ntop_software3 = []\nfor j in range(23):\n    AA = multchoice[feature_multichoice[j]].values\n    result=[]\n    for i in range(numanal):\n        result += AA[i]\n    role_work = np.unique(result)\n    c1 = collections.Counter(result).most_common(3)\n    count=0\n    for i, values in enumerate(c1):\n        count+=1\n        if (count==1):\n            top_software1.append(values[0])\n        elif (count==2):\n            top_software2.append(values[0])\n        else:\n            top_software3.append(values[0])\n###################################################################################################\n###create empty dataframe\n#index_name = 'Cloud_ML \tCloud_Serv \tCloud_prod \tIDE_used \t\\\n#ML_Framework \tNB_used \tProg_Lang \tRDBMS \tVisual_Lib \talgorithms_check \t\\\n#barriers \tdata_types \texplain_interprete \timportant_topic \t\\\n#insights_interpret \tmedia_sources \tmetrics \tonline_learn \t\\\n#public_datasets \tquality_learning \treproduce_work \trole_work \ttraining_cata\n\nindex_name = 'Big_data_Product Cloud_ML\tCloud_Server\tCloud_product\t IDE \t\\\nML_Framework\tNB \tProgramming_Language\tRDBMS\tVisual_Libaries Algorithms_check\tBarriers\t\\\nData_Types Explain_interpretation_method\tTopic_importance\tInsights_interpret\tMedia_sources\t\\\nMetrics\tOnline_learn\tPublic_datasets\tquality_learning\tMethods_Reproduce_work\tRole_work'.split()\ntop_software = pd.DataFrame(columns=['top1','top2','top3'], index =index_name)\ntop_software.top1 = top_software1\ntop_software.top2 = top_software2\ntop_software.top3 = top_software3\ntop_software.style.set_properties(subset=['text'], **{'width': '600px'})\ntop_software.head(23)\n","e77a06da":"timespent = analystmat12[['Q34_Part_1', 'Q34_Part_2', 'Q34_Part_3', 'Q34_Part_4', 'Q34_Part_5', \\\n                          'Q34_Part_6']] \ntimespent.columns = ['Gathering_data', 'Cleaning_data', 'Visualizing_data', 'Model_build',\\\n                     'Model_production', 'Finding_insights']\nsns.boxplot(data=timespent)\n#sns.title('Time spend in projects')","00035752":"timespent = analystmat12[['Q35_Part_1', 'Q35_Part_2', 'Q35_Part_3', 'Q35_Part_4', 'Q35_Part_5', \\\n                          'Q35_Part_6']] \ntimespent.columns = ['Self-taught', 'Online courses', 'Work', 'University',\\\n                     'Kaggle competitions', 'Others']\nsns.boxplot(data=timespent)","fe33664d":"AA = multchoice.barriers.values\nresult=[]\nfor i in range(numanal):\n    result += AA[i]\nbarriers = np.unique(result)\nc1 = collections.Counter(result)\nsurvIDE = []\nfor i in range(len(barriers)):\n    survIDE.append(normalized_value(c1,barriers[i],numanal)*100)\n\n#bar_plot_surveydata(barriers,survIDE,'Barriers to share work','Percentage population (%)')\npie_plot_survey(survIDE,barriers,'Barriers to share work')","89f5d0f3":"AA = multchoice.barriers.values\nresultrow=[]\nfor i in range(numanal):\n    if 'Too time-consuming' in AA[i]:\n        resultrow.append(i)\n    else:\n        continue\nAA1 = (reduce(operator.concat,multchoice.loc[resultrow].reproduce_work))\nAA2 = (reduce(operator.concat,multchoice.loc[resultrow].data_types))\nAA3 = (reduce(operator.concat,multchoice.loc[resultrow].Cloud_Serv))\nAA4 = (tempA.loc[resultrow].Q8)\nbarrier_reproduce_work=np.unique(AA1)\nc1=collections.Counter(AA1)\nsurvIDE = []\n#print(barrier_reproduce_work)\nfor i in range(len(barrier_reproduce_work)):\n    survIDE.append(normalized_value(c1,barrier_reproduce_work[i],len(resultrow))*100)\nbar_plot_surveydata(['1','2','3','4','5','6','7','8','9','10','11'],\\\n                    survIDE,'Work Reproduction ','Percentage population (%)', 1\/2.5)\n","5f12749f":"data_types=np.unique(AA2)\nc1=collections.Counter(AA2)\nsurvIDE = []\nfor i in range(len(data_types)):\n    survIDE.append(normalized_value(c1,data_types[i],len(resultrow))*100)\nbar_plot_surveydata(data_types,survIDE,'Data type','Percentage population (%)',1\/2.5)","312fad11":"barrier_Cloud_Serv=np.unique(AA3)\nc1=collections.Counter(AA3)\nsurvIDE = []\nfor i in range(len(barrier_Cloud_Serv)):\n    survIDE.append(normalized_value(c1,barrier_Cloud_Serv[i],len(resultrow))*100)\nbar_plot_surveydata(barrier_Cloud_Serv,survIDE,'Cloud Server','Percentage population (%)',1\/2.5)","a675c018":"** What is the most important barrier to share work ?**\n<br>\nAccording to the pie chart majority of the people do not share work because it is too time consuming. Are there factors that are causing these barriers. \n<br>\nFor sharing work  people want to (a) make sure the code is human-readable and it is (b) the code is well documented.\n<br> \nCategorical, text and numerical data are the major data types used in the industry. However, it might be possible that using time-series  data might create problem in sharing work.\n<br> \nIts also analysed if cloud server is causing a barrier to share work. But no such evidence is found.\n\n\n    ","34f90887":"** ARE  WOMEN UNDER REPRESENTED IN TECH?**\n<br>\nThe graph shows the top industries who employ women. The results show that women are under-represented in the tech sector. ","7a6dd822":"**How is time spend on various appects of Data Science\/ML project ? **\n<br>\nData scientist spend most of the time in cleaning dataset.","81874cc4":"** HOW EXPERIENCED ARE WOMEN  IN TECH INDUSTRY?**\n<br>\nThe graph shows the experience level of women in tech industry is not long. The results show that women are not employed in the industry for long. It also shows that data science, data analyst is a new career choice. ","15986d0e":"| Code| Description   |\n|------|------|\n|   1  | Define all random seeds|\n|   2  | Define relative rather than absolute file paths |\n|   3  | Include a text file describing all dependencies |\n|  4   | <span style=\"color:green\">**Make sure the code is human-readable** <\/span>|\n|  5   | <span style=\"color:green\">**Make sure the code is well documented**<\/span> |\n|  6   | None\/I do not make my work easy for others to reproduce|\n|  7   | Share both data and code on Github or a similar code-sharing repository |\n|  8   | Share code on Github or a similar code-sharing repository |\n|  9   | Share code, data, and environment using virtual machines (VirtualBox, etc.) |\n| 10  | Share data, code, and environment using a hosted service (Kaggle Kernels, Google Colaboratory, Amazon SageMaker, etc.)|\n| 11   | Share data, code, and environment using containers (Docker, etc.) |\n","71fcbbba":"** How are Data scientist. analyst learning ?**\n<br>\nMany of the data scientist are self taught. Online courses do help data scientist too. Many people and also learn from work.","93e91e78":"**What are some tools Data Scientist are using ?** \n<br>\nData science tools are evolving are always evolving. The next few analysis are based on tools used by Data scientist, Data analyst and Research professionals. Python, SQL and R are the top performers.  AWS remains the most popular cloud server however many people are not using cloud server too.  Matplotlib, Seaborn and ggplot2 remains important vizualization tools. \n<br>\n**Where are  Data Scientist learning from?** \n<br>\nCoursera, Udemy\tand DataCamp remain the most important online platforms form where people are learning.\n\n<br>\nThis blog gives an idea what the top tools were for 2017 survey. https:\/\/blog.appliedai.com\/data-science-tools\/"}}