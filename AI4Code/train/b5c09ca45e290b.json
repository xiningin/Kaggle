{"cell_type":{"1d895c33":"code","cf43ff8c":"code","15df9aa7":"code","b98d2558":"code","1ecdc2fd":"code","54b9f2c8":"code","436dc57c":"code","a79278c9":"code","f66e7e3b":"code","7b2196fc":"code","749ce7eb":"code","03d744ec":"code","fe18219d":"code","42c4d30e":"code","c38a0c6b":"code","b8494469":"code","18a24d0e":"code","ff4dbc96":"code","ccaf74db":"code","83734739":"code","7b296c0e":"code","c07f8c73":"code","f0d6cf9a":"code","6b74f64d":"code","36b07ee5":"code","707ac10a":"code","0b5c6dc0":"code","e19b262d":"code","5724ac05":"code","a3267f16":"markdown","446c91c8":"markdown","5927efcd":"markdown","6bf11d3b":"markdown","bbefd9be":"markdown","456e59a2":"markdown","a4c2ce5d":"markdown","adb76dfb":"markdown","88c723c1":"markdown","43b6118c":"markdown"},"source":{"1d895c33":"import pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","cf43ff8c":"df = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","15df9aa7":"df","b98d2558":"df.plot","1ecdc2fd":"import seaborn as sns\nimport matplotlib.pyplot as plt","54b9f2c8":"corrmat = df.corr()\ntop_corr_features = corrmat.index","436dc57c":"plt.figure(figsize = (20,20))\ng = sns.heatmap(df[top_corr_features].corr(), annot = True, cmap = \"RdYlGn\")","a79278c9":"x = df.iloc[:,3:13]\ny = df.iloc[:,13]","f66e7e3b":"geography = pd.get_dummies(x['Geography'], drop_first = True)","7b2196fc":"geography","749ce7eb":"gender = pd.get_dummies(x['Gender'], drop_first = True)","03d744ec":"gender","fe18219d":"x = x.drop(['Geography','Gender'],axis = 1)","42c4d30e":"x","c38a0c6b":"x = pd.concat([x, geography, gender], axis = 1)","b8494469":"x","18a24d0e":"params = {\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n   }","ff4dbc96":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost","ccaf74db":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","83734739":"classifier = xgboost.XGBClassifier()","7b296c0e":"random_search = RandomizedSearchCV(classifier, param_distributions = params, n_iter = 5, scoring = 'roc_auc', n_jobs = -1, cv = 5, verbose = 3)","c07f8c73":"random_search.fit(x, y)","f0d6cf9a":"x.head()","6b74f64d":"random_search.best_estimator_","36b07ee5":"random_search.best_params_","707ac10a":"classifier = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n       n_estimators=100, n_jobs=1, nthread=None,\n       objective='binary:logistic', random_state=0, reg_alpha=0,\n       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n       subsample=1)","0b5c6dc0":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(classifier, x, y, cv = 10)","e19b262d":"score","5724ac05":"score.mean()","a3267f16":"Hyperparameter optimization using RandomizedSearchCV","446c91c8":"Drop Categorical Features","5927efcd":"Plot heat map","6bf11d3b":"Reference Link: https:\/\/www.youtube.com\/watch?v=9HomdnM12o4&t=355s","bbefd9be":"Correlation","456e59a2":"Get correlations of each features in dataset","a4c2ce5d":"Hyper Parameter Optimization","adb76dfb":"Read the Dataset","88c723c1":"Get the Independent and Dependent Features","43b6118c":"Hyperparameter Optimization For Xgboost using RandomizedSearchCV"}}