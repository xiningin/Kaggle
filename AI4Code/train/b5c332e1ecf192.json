{"cell_type":{"0497c6c2":"code","7addb1ef":"code","bae9b388":"code","ce2249b4":"code","1f856628":"code","701fac40":"code","dcc7665f":"code","56e00ca2":"code","f2ea7acf":"code","079bfe41":"code","cf6ab108":"code","f6f8b6f3":"code","1d6e4ec4":"code","366d3db7":"markdown","c9a9cbf5":"markdown","9717c9e7":"markdown","0599e39b":"markdown","901ba964":"markdown","856e4753":"markdown","f619f875":"markdown","024171fa":"markdown","0a7689c4":"markdown","d6558a22":"markdown","618d3674":"markdown"},"source":{"0497c6c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7addb1ef":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n# Model\nfrom tensorflow.keras import layers, optimizers, losses, Sequential, activations, initializers\n\nnp.random.seed(42)\ntf.random.set_seed(42)","bae9b388":"image_shape = (28, 28)\n\nclass_labels= ['T-shirt\/top','Trouser','Pullover','Dress','Coat',\n               'Sandal','Shirt','Sneakers','Bag','Ankle boot']\n\nTEST_PATH= '..\/input\/fashionmnist\/fashion-mnist_test.csv'\nTRAIN_PATH= '..\/input\/fashionmnist\/fashion-mnist_train.csv'","ce2249b4":"x_train_valid = pd.read_csv(TRAIN_PATH)\nx_test = pd.read_csv(TEST_PATH)\n\n# convert from int64 to float64\nx_train_valid = x_train_valid.astype(np.float64)\nx_test = x_test.astype(np.float64)","1f856628":"x_train_valid.head()","701fac40":"y_train_valid = x_train_valid['label'].astype(np.int64)\ny_test = x_test['label'].astype(np.int64)\n\n# remove label from train and test\nx_train_valid.drop('label', axis=1, inplace=True)\nx_test.drop('label', axis=1, inplace=True)\n\nx_train_valid.shape, y_train_valid.shape, x_test.shape, y_test.shape","dcc7665f":"plt.figure(figsize=(10, 15))\n\nfor i in range(10):\n    plt.subplot(5, 5, i+1)\n    img = np.array(x_train_valid.iloc[i]).reshape(image_shape)\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    plt.title(f'{class_labels[y_train_valid[i]]}')","56e00ca2":"x_valid, x_train = x_train_valid[:5000], x_train_valid[5000:] # valid = 5000 and train = 55000\ny_valid, y_train = y_train_valid[:5000], y_train_valid[5000:]\n\nx_train.shape, y_train.shape, x_valid.shape, y_valid.shape","f2ea7acf":"layer_units = [300, 100]\nintializer = initializers.he_normal\n\nmodel = Sequential()\nmodel.add(layers.BatchNormalization()) # Feature Scaling\n\nfor unit in layer_units:\n    model.add(layers.Dense(unit, kernel_initializer = intializer, use_bias = False))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n    \nmodel.add(layers.Dense(10, activation=activations.softmax))\n\n\nmodel.compile(loss=losses.sparse_categorical_crossentropy, optimizer= optimizers.Adam(), metrics = ['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=80, batch_size=32, validation_data=(x_valid, y_valid))","079bfe41":"history = pd.DataFrame(model.history.history)\nhistory.plot()","cf6ab108":"model.evaluate(x_test, y_test) ","f6f8b6f3":"y_pred = model.predict(x_test)","1d6e4ec4":"plt.figure(figsize=(10, 15))\n\nrnd = np.random.randint(1, 5000, 10)\n\nfor index, i in enumerate(rnd):\n    plt.subplot(5, 5, index+1)\n    img = np.array(x_test.iloc[i]).reshape(image_shape)\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    plt.title(f'O = {class_labels[y_test[i]]}\\n P = {class_labels[np.argmax(y_pred[i])]}') # O = Original, P = Predicted","366d3db7":"## Fashion MINST using ANN and Sequential API\n#### Accuracy: 95%","c9a9cbf5":"### Global Variables","9717c9e7":"### Evaluate the model","0599e39b":"### Show train data","901ba964":"### Split train data into train and validation\nvalidation is important for make the model learn more accurate while training","856e4753":"### Imports","f619f875":"### Show some images","024171fa":"### Build the Model\nto build the model we need to consider some points the make the performance more accurate\n1. use BatchNormalization (BN) to make the weights avoid Vanishing\/Exploding Gradients\n2. also use BatchNormalization (BN) before the first layer to apply Feature Scaling on the images\n3. apply activation function after BN to make function computs the weights after applying BN on them. \n4. becuase BN has bias we need to disable bias of the Dense layer\n5. use LeakyRelu to avoid daying relu of Relu activation function","0a7689c4":"### Split the labels from train and test","d6558a22":"### Show 10 images from any random index in test set","618d3674":"### Load the dataset"}}