{"cell_type":{"399743a2":"code","b3d0ca15":"code","8403ee34":"code","c65d00d1":"code","afcb0b1d":"code","140e2a3c":"code","7a5c7766":"code","6811436b":"code","97f70b8c":"code","8898de69":"code","7333664a":"code","671cf38d":"code","a16064e3":"code","4f7ee55e":"code","0addfcd7":"code","d2383edb":"code","a1b2ae76":"code","0e1da348":"code","781914ff":"code","64979adb":"code","9fe41ba2":"code","fa2f1289":"code","f5ac9368":"markdown","04a5644a":"markdown","3010b78a":"markdown","402cef46":"markdown","95fa8a92":"markdown","f87042b0":"markdown","41a9fa6e":"markdown","1f9e4251":"markdown","7e4ddf6f":"markdown","d520e4ba":"markdown","6e46d627":"markdown","d68d41e2":"markdown","eb5f6a06":"markdown","ccccd1a6":"markdown","80a93a0b":"markdown"},"source":{"399743a2":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport datetime as dt","b3d0ca15":"# bokeh packages\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot\nfrom bokeh.models.widgets import Tabs,Panel\noutput_notebook()","8403ee34":"df_ = pd.read_csv(\"\/kaggle\/input\/ecommerce-data\/data.csv\",  encoding=\"ISO-8859-1\")","c65d00d1":"df = df_.copy()","afcb0b1d":"print(\"#####################################################################################\")\nprint(\"Shape of data: \" + str(df.shape) )\nprint(\"#####################################################################################\")\nprint(\"Missing values: \")\nprint((df.isnull().sum()))\nprint(\"#####################################################################################\")\nprint(df.dtypes)\nprint(\"#####################################################################################\")\nprint(df.head(5))\nprint(\"#####################################################################################\")\nprint(df.describe().T)","140e2a3c":"df.dropna(inplace=True)\ndf.shape","7a5c7766":"products_df = df.groupby(\"Description\").agg({\"Quantity\": \"sum\"}). sort_values(by = \"Quantity\", ascending = False).head(11)\nproducts_df.reset_index(inplace=True)","6811436b":"products_df = pd.DataFrame(products_df)\nproducts_df","97f70b8c":"fig = px.bar(products_df, x='Description', y='Quantity',  title=\"First 10 Products\")\nfig.show()","8898de69":"country_df = df.groupby(\"Country\").agg({\"InvoiceNo\": \"count\"}). sort_values(by = \"InvoiceNo\", ascending = False).head(11)\ncountry_df.reset_index(inplace=True)\ncountry_df.columns=[\"Country\", \"Count\"]","7333664a":"import plotly.express as px\nfig = px.bar(country_df, x='Country', y='Count', title=\"Count of Products by Country\")\nfig.show()","671cf38d":"print(\"Last transaction date in data: \")\nprint(df[\"InvoiceDate\"].max())","a16064e3":"# We will assume today date is \"11-12-2011\"\ntoday_date = dt.datetime(2011, 12, 11)\n\n# Ignore the cancel invoice\ndf = df[~df[\"InvoiceNo\"].str.contains(\"C\", na=False)]\n\n# Total Price\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"UnitPrice\"]","4f7ee55e":"df.head(10)","0addfcd7":"# we have to convert InvoiceDate type to datetime in order to get minus between days\ndf['InvoiceDate']= pd.to_datetime(df['InvoiceDate'])","d2383edb":"rfm = df.groupby('CustomerID').agg({'InvoiceDate': lambda InvoiceDate: (today_date - InvoiceDate.max()).days,\n                                     'InvoiceNo'    : lambda InvoiceNo: InvoiceNo.nunique(),\n                                     'TotalPrice' : lambda TotalPrice: TotalPrice.sum()})\n\nrfm.columns = ['recency', 'frequency', 'monetary']","a1b2ae76":"#more days since last purchase 1 (very bad) ; those with fewer days 5 (very good).\nrfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\n\n#5 (very good) for those with high purchasing frequency; the ones that were less as 1 (very bad).\nrfm[\"frequency_score\"] = pd.qcut(rfm['frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n\n#5 (very good) for those with a high purchase price;  the fewer purchase price as 1 (very bad).\nrfm[\"monetary_score\"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])\n\n#we'll not include monetory_score.\nrfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str))\n\nrfm.head(5)","0e1da348":"seg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}","781914ff":"rfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\nrfm.reset_index(inplace=True)\nrfm.head()","64979adb":"# Let's see the distrubition of segments \n\nsegments_count = rfm.groupby(\"segment\").agg({\"CustomerID\": \"count\"})\nsegments_count.reset_index(inplace=True)\nsegments_count.columns = ['segment', 'count']\nsegments_count.head(15)","9fe41ba2":"fig = px.pie(segments_count, values='count', names='segment', title='Customer Distrubition of Segments')\nfig.show()","fa2f1289":"agg_list=[\"mean\", \"count\", \"max\"]\nrfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg(agg_list)","f5ac9368":"#### *Distribution of Products*;","04a5644a":"## RFM Analysis;\n\n### Contents;\n\n1. Import Libraries\n2. Exploratory Data Analysis\n3. Calculation of Retency, Frequency and Monetary Metrics\n4. Segmentation & Conclusion","3010b78a":"##### *CustomerID* and *Description* variables contain missing values, therefore we can remove the missing values.","402cef46":"##### After we find the RFM values, we assign them values between 1-5. Segments are determined according to these value assignments. ","95fa8a92":"![RFM](https:\/\/d35fo82fjcw0y8.cloudfront.net\/2018\/05\/28232044\/User-Segmentation-Examples-e1551871657484.png)","f87042b0":"# RFM Analysis with E-Commerce Data and Using Plotly","41a9fa6e":"![THKS](https:\/\/assets.publishing.service.gov.uk\/government\/uploads\/system\/uploads\/image_data\/file\/86395\/s960_thank_you_sticky_note.jpg)","1f9e4251":"####  *Product counts by Country;*","7e4ddf6f":"![RFM2](https:\/\/hf-files-oregon.s3.amazonaws.com\/hdpheadset_kb_attachments\/2020\/10-28\/3c6162c4-9e6c-4b6b-af1f-3ac960b25359\/Recency.png)","d520e4ba":"### 1. Import Libraries","6e46d627":"### 4. Segmentation","d68d41e2":"##### Based on these results, actions to be taken to customers can be determined. \n\nFor instance, **Champions** group has 633 transactions;\n1. Avg. most recent purchase performed 6 days ago,\n2. Shopping frequencies average 13 days,\n3. They have $6857 expenses average.\n\nCustomers in the Champions group make up a large portion of the company's earnings.\nFor this reason, it would be the right approach to focus on increasing the satisfaction of the customers in this group.\nPersonalized promotion etc. suitable for these customers. By offering opportunities and discounts, both shopping and customer satisfaction can be achieved.","eb5f6a06":"### 2. Exploratory Data Analysis","ccccd1a6":"### 3. Calculation of Retency, Frequency and Monetary Metrics","80a93a0b":"Let's analyze the dataset;"}}