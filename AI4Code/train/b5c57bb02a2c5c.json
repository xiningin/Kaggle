{"cell_type":{"2bd2bde7":"code","d458c617":"code","09dcf56e":"code","b219243c":"code","5d5a2a6d":"code","61718b58":"code","6f82770f":"code","d5bd3956":"code","f8d9a1b2":"code","083f9f38":"code","9e9df901":"code","4d222c63":"code","1ca09cd6":"code","ac1eae2d":"code","aa6168c0":"code","7721b5ba":"code","6391da28":"code","4c6add97":"code","4e823ce3":"markdown","e18f3d94":"markdown","dfc09324":"markdown","02cf7b8c":"markdown","593533f5":"markdown","ab5e3047":"markdown","9cbd8bbc":"markdown","83e0e318":"markdown","d4fddc93":"markdown","a53586d0":"markdown","b4038eb2":"markdown","c627f917":"markdown","08123e13":"markdown","fc764e58":"markdown","4c615fb5":"markdown","20a042df":"markdown"},"source":{"2bd2bde7":"import fastai\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\n\nfrom fastai.tabular.all import *","d458c617":"data_dir = \"\/kaggle\/input\/tabular-playground-series-feb-2021\/\"\ntrain_df = pd.read_csv(os.path.join(data_dir, \"train.csv\"))\ntest_df = pd.read_csv(os.path.join(data_dir, \"test.csv\"))\ntrain_df.head()","09dcf56e":"processing_funcs = [Categorify, FillMissing, Normalize]\ncat_cols = [x for x in train_df.columns.values if x.startswith('cat')]\nnum_cols = [x for x in train_df.columns.values if x.startswith('cont')]","b219243c":"nn_df = TabularPandas(train_df, cat_names=cat_cols, cont_names=num_cols, procs=processing_funcs, y_names='target')","5d5a2a6d":"# turn our tabular data into a dataloader, batch size 1024\ntrain_dl = nn_df.dataloaders(1024)","61718b58":"# preview some of our data from the dataloader\ntrain_dl.show_batch()","6f82770f":"dls = TabularDataLoaders.from_df(train_df, path='.', y_names=\"target\",  \n                                 cat_names = cat_cols, \n                                 cont_names = num_cols, \n                                 procs=processing_funcs)","d5bd3956":"y = dls.train.y\ny.min(), y.max()","f8d9a1b2":"tab_learn = tabular_learner(dls, y_range=(0, 11), layers=[500, 250], n_out=1, metrics=rmse)","083f9f38":"tab_learn.model","9e9df901":"tab_learn.lr_find()","4d222c63":"tab_learn.fit_one_cycle(5, lr_max=1e-2)","1ca09cd6":"tab_learn.recorder.plot_loss()","ac1eae2d":"test_dl = tab_learn.dls.test_dl(test_df)\ntest_dl.show_batch()","aa6168c0":"preds, test_labels = tab_learn.get_preds(dl=test_dl)","7721b5ba":"preds","6391da28":"final_preds = preds.numpy()","4c6add97":"submission_df = pd.read_csv(os.path.join(data_dir, \"sample_submission.csv\"))\nsubmission_df['target'] = final_preds\nsubmission_df.to_csv('submission.csv', index=False)","4e823ce3":"# Training of a DNN Tabular model with categorical embeddings using FastAI","e18f3d94":"Since we're performing regression, we need to provide our model with the possible bounds of the output. We need to do this since fastai uses a sigmoid activation on the final layer, rather than a dense layer with no activation. In general across many regression problems, we find that sigmoid tends to outperm just a raw dense layer, provided we precisely know the maximum and minimum outputs of our regression model.\n\nWe can do this and find the maximum \/ minimum output values based on our training data like so:","dfc09324":"From the plot, a learning rate of around 1e-3 should work well in this case.\n\nLets train our model for 5 epochs, and see how well it performs.","02cf7b8c":"## 2. Data preprocessing and creation of dataloaders","593533f5":"Lets preprocess our data into a suitable form for training. We'll encode categorical variables, standardise numerical features, and fill missing values (if there are any) within the dataset. We can do this extremely easily using the TabulerPandas class, like so:","ab5e3047":"Overall, its remarkable how easy this process is, especially when compared to doing all of the low-level features yourself. I think going through the process of doing these low-level implementations is extremely important for learning, and is essential when you need to perform something a bit more specific for a data science problem.\n\nHowever, once you've been through this process, and can appreciate what is going on under the hood, FastAI becomes hugely convenient and an asset for quickly experimenting on different data-based problems. Tabular data is just one tiny aspect of this, as done simply within this notebook.\n\nTo expand nicely from this work, we could extract the learned embeddings from our model above for each categorical feature, and feed these into a gradient booasting model, such as CatBoost for even better performance on this competition.\n\nI hope you enjoyed this short piece of work anyway - thanks for reading!","9cbd8bbc":"## 4. Test set predictions","83e0e318":"Before starting training, its helpful to find an appropriate learning rate for our model. This is as simple in FastAI as calling the lr_find() function, like so:","d4fddc93":"We can view the architecture of our model like so:","a53586d0":"Its so easy you almost feel like you've cheated somehow! \n\nI must admit, this is something that put me off using FastAI initially, however after the pain and effort of doing all of this manually many times with Keras, Tensorflow and PyTorch imeplementations, the ease of this method is highly appreciated.\n\nWe could also have performed exactly the same as above, but straight from TabularDataLoaders, like so:","b4038eb2":"## 3. Production of our DNN model","c627f917":"FastAI provides a huge number of convenient functions on top of PyTorch for Deep Learning tasks. Within this notebook, I'll demonstrate just how extremely easy it is to get a Deep Learning Tabular model up and running.","08123e13":"Great! Lets submit these to the competition and see how well the predictions perform:","fc764e58":"Now that we've got the basics working with our dataloader and preprocessers produced, we can get on to model training:","4c615fb5":"## 1. Load our data","20a042df":"Preprocess our test set and make predictions using our trained model:"}}