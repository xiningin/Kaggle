{"cell_type":{"7d915a39":"code","e8e992ae":"code","f448a51a":"code","1eccf148":"code","1fe6efc2":"code","04435086":"code","0b1d053f":"code","f671c17b":"code","8a9c4fe4":"code","9ba72fb4":"code","e2bdb86f":"code","7333e6b3":"code","df5ff141":"code","5206d0a8":"code","a166c11b":"code","a89993f6":"code","047aad7a":"code","94320f09":"code","89f0447a":"code","2d88e3a5":"code","a7c7d2b7":"code","d92317ab":"code","c59f6afb":"code","eb090c24":"code","b8d75ee7":"code","a7e103e2":"code","5a4cdafc":"markdown","7e1d83cf":"markdown"},"source":{"7d915a39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8e992ae":"test_data = pd.read_csv(\"\/kaggle\/input\/video-games-rating-by-esrb\/test_esrb.csv\")\ntest_data.head()","f448a51a":"train_data = pd.read_csv(\"\/kaggle\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv\")\ntrain_data.head()","1eccf148":"train_data.shape","1fe6efc2":"test_data.shape","04435086":"train_data.describe()","0b1d053f":"train_data.isna().sum()","f671c17b":"train_data.columns","8a9c4fe4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.heatmap(train_data.corr())\n","9ba72fb4":"train_data.corr()","e2bdb86f":"feature = [feature for feature in train_data.columns if train_data[feature].dtype != 'O']\nfeature","7333e6b3":"list(enumerate(feature))","df5ff141":"plt.figure(figsize=(20,70))\nfor i in enumerate(feature):\n    plt.subplot(16,2,i[0]+1)\n    sns.countplot(i[1],data=train_data)\nplt.show()","5206d0a8":"X_train = np.array(train_data[train_data.columns[2:-1]])\ny_train = np.array(train_data[train_data.columns[-1]])\n\nX_test = np.array(test_data[test_data.columns[2:-1]])\ny_test = np.array(test_data[test_data.columns[-1]])","a166c11b":"y_test","a89993f6":"X_train","047aad7a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","94320f09":"lr = LogisticRegression()","89f0447a":"lr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)","2d88e3a5":"Correctness = accuracy_score(y_test, y_pred)\nprint(f'Your model is {Correctness*100}% accurate!')","a7c7d2b7":"sns.countplot(y_pred,saturation=10)\nplt.rc('figure',figsize=(19,12))","d92317ab":"from sklearn.tree import DecisionTreeClassifier\n\ndt_model = DecisionTreeClassifier()\ndt_model.fit(X_train, y_train)","c59f6afb":"dt_ypred = dt_model.predict(X_test)\ndt_pred_score = accuracy_score(y_test, dt_ypred)\nprint(f'The Decision Tree accuray is {dt_pred_score*100}%')","eb090c24":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier()\n\nrf_model.fit(X_train, y_train)","b8d75ee7":"rf_ypred = rf_model.predict(X_test)","a7e103e2":"rf_accuracy = accuracy_score(y_test, rf_ypred)\nprint(f'Random Forest accuracy is {rf_accuracy*100}%')","5a4cdafc":"Using decision tree","7e1d83cf":"Using Random Forest Classifier"}}