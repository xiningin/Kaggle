{"cell_type":{"ae2fb50c":"code","fd11296b":"code","31f93987":"code","1a41ef0c":"code","4759bae3":"code","29e2d9cc":"code","648f888b":"code","5c0a76b5":"code","fbe30e48":"code","7850590a":"code","9c9ab7ba":"code","60428a7f":"code","74c8d10a":"code","02f3cff2":"code","56cb7f55":"code","5300b20b":"code","f212d0ab":"code","c63bbbc4":"code","6a078a2a":"code","80d62e67":"code","58c2c204":"code","44fcfbde":"code","4dee4c52":"code","890395e6":"code","2690f3ef":"code","96a81917":"code","1a6ae27f":"code","9fb76fe4":"code","edb63c34":"code","aff69e3f":"code","c6c2c9de":"code","74db0dfe":"code","0ec9dafc":"code","8757f2d9":"code","20c20335":"code","342327d9":"markdown","d9907bcd":"markdown","895fb64c":"markdown","37894416":"markdown","c1b5d9d7":"markdown","1cd21fb3":"markdown","2ea7779a":"markdown","9b984f8e":"markdown","c925a600":"markdown"},"source":{"ae2fb50c":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt #\nimport seaborn as sns \nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fd11296b":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\npd.options.display.max_columns = None\ndf_train.head()","31f93987":"df_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test.head()","1a41ef0c":"df_train.shape","4759bae3":"df_test['SalePrice'] = 'NaN'","29e2d9cc":"df_test.head() #from 1461 ID ","648f888b":"df_merge = pd.concat([df_train, df_test])","5c0a76b5":"df_merge.shape","fbe30e48":"df_merge['OverallQual'].value_counts()","7850590a":"df_train['SalePrice'].describe()","9c9ab7ba":"sns.distplot(df_train['SalePrice']) #no normal distribution, I will fix it later","60428a7f":"# plot  LotArea vs SalePrice \ndf_train.plot.scatter(x='LotArea', y='SalePrice')","74c8d10a":"# plot TotalBsmtSF vs SalePrice\ndf_train.plot.scatter(x='TotalBsmtSF', y='SalePrice')","02f3cff2":"# plot GrLivArea vs SalePrice \ndf_train.plot.scatter(x='GrLivArea', y='SalePrice')","56cb7f55":"# plot OverallQual vs SalePrice\ndata = pd.concat([df_train['SalePrice'], df_train['OverallQual']], axis=1)\nfig = sns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=data)","5300b20b":"# plot OverallCond vs SalePrice\ndata1 = pd.concat([df_train['SalePrice'], df_train['OverallQual']], axis=1)\nfig = sns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=data1)","f212d0ab":"# in case of need backup \ndf_mod1 = df_merge.copy()","c63bbbc4":"#correlation matrix\ncormatrix = df_train.corr()\nplt.subplots(figsize=(12, 12))\nsns.heatmap(cormatrix, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm')","6a078a2a":"cols = cormatrix.nlargest(10, 'SalePrice')['SalePrice'].index\ncorrcoef = np.corrcoef(df_train[cols].values.T)\nplt.subplots(figsize=(12, 12))\nsns.heatmap(corrcoef, annot=True,  yticklabels=cols.values, xticklabels=cols.values)","80d62e67":"#Missing values\npd.options.display.max_rows = None\nNaN = df_mod1.isnull().sum().sort_values(ascending=False)\nNaN","58c2c204":"df_mod1 = df_mod1.drop(['PoolQC',\n'MiscFeature',     \n'Alley'   ,         \n'Fence'    ,       \n'FireplaceQu' ,      \n'LotFrontage'  ,     \n'GarageCond'    ,     \n'GarageType'     ,    \n'GarageYrBlt'     ,   \n'GarageFinish'    ,   \n'GarageQual'       ,  \n'BsmtExposure'    ,   \n'BsmtFinType2'    ,   \n'BsmtFinType1'    ,   \n'BsmtCond'        ,   \n'BsmtQual'     ,\n'MasVnrArea' ,\n'MasVnrType'], axis = 1)","44fcfbde":"pd.options.display.max_rows = None\nNaN = df_mod1.isnull().sum().sort_values(ascending=False)\nNaN","4dee4c52":"df_mod2 = df_mod1.copy()","890395e6":"df_mod2['MSZoning'].value_counts() ","2690f3ef":"med = df_mod2['TotalBsmtSF'].median()","96a81917":"med2 = df_mod2['GarageArea'].median()","1a6ae27f":"df_mod2['MSZoning'] = df_mod2['MSZoning'].fillna('RL')\ndf_mod2['Utilities'] = df_mod2['Utilities'].fillna('AllPub')\ndf_mod2['BsmtFullBath'] = df_mod2['BsmtFullBath'].fillna(0.0)\ndf_mod2['BsmtHalfBath'] = df_mod2['BsmtHalfBath'].fillna(0.0)\ndf_mod2['Functional'] = df_mod2['Functional'].fillna('Typ')\ndf_mod2['KitchenQual'] = df_mod2['KitchenQual'].fillna('TA')\ndf_mod2['TotalBsmtSF'] = df_mod2['TotalBsmtSF'].fillna(med)\ndf_mod2['Exterior1st'] = df_mod2['Exterior1st'].fillna('VinylSd')\ndf_mod2['Electrical'] = df_mod2['Electrical'].fillna('SBrkr')\ndf_mod2['GarageArea'] = df_mod2['GarageArea'].fillna(med2)\n\n","9fb76fe4":"pd.options.display.max_rows = None\nNaN = df_mod2.isnull().sum().sort_values(ascending=False)\nNaN","edb63c34":"df_mod2 = df_mod2.drop(['BsmtUnfSF',\n'BsmtFinSF2'       ,\n'BsmtFinSF1'       ,\n'Exterior2nd'      ,\n'GarageCars', \n'Id'], axis = 1)","aff69e3f":"df_mod3 = df_mod2.copy()","c6c2c9de":"df_train1, df_test1 = df_mod3[1459:], df_mod3[:1459] #Removing outliers we can do only on training dataset to avaid problem called 'Data leakeage\"","74db0dfe":"df_train1.shape","0ec9dafc":"df_test1.shape","8757f2d9":"df_mod3.plot.scatter(x='GrLivArea', y='SalePrice') #outlier ","20c20335":"pd.options.display.max_columns = None\npd.options.display.max_rows = 10","342327d9":"#### Merging datasets for preprocessing: \nFirst, add new column to df_test:","d9907bcd":"## IMPORTANT \nThe Notebook is not finished, I noticed it have at this point problem with data leakage so if you fork it try to avoid this problem :) ","895fb64c":">15% missing data: PoolQC, Fence, MiscFeature, Alley, LotFrontage - a lot!\nGarageCond        159\nGarageYrBlt       159\nGarageFinish      159\nGarageQual        159\nGarageType        157\nBsmtCond           82\nBsmtExposure       82\nBsmtQual           81\nBsmtFinType2       80\nBsmtFinType1       79\nMasVnrType         24\nMasVnrArea         23","37894416":"Another checkpoint: ","c1b5d9d7":"### Import packages:","1cd21fb3":"### Exploring data:","2ea7779a":"Replace lacking values with most common or median ","9b984f8e":"#### The rest I will just delete because those are correlated or not so important ","c925a600":"### Import datasets:"}}