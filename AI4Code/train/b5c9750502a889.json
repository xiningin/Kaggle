{"cell_type":{"6347f571":"code","acd4ef2f":"code","30f45dda":"code","56e5d42b":"code","f1718bec":"code","b59c6528":"code","2f1856fd":"code","87d7d2aa":"code","886f3a7c":"code","4225feec":"code","1967f334":"code","555fef6a":"code","94cc2e70":"code","acc742c0":"code","9e5e5c69":"code","2bee09b5":"code","43122446":"code","c0d261bc":"code","87b899b0":"code","571e1077":"code","c22bfc91":"code","d0f168c5":"code","567fb658":"code","44c29b7d":"code","49f5bd2a":"code","ae8889f2":"code","3badf589":"code","5e79e2f0":"code","c0147720":"code","4cca6558":"markdown","c0df588a":"markdown"},"source":{"6347f571":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acd4ef2f":"test_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","30f45dda":"train_data.head()","56e5d42b":"train_data.info()","f1718bec":"# Null values in the dataset\ntrain_data.isnull().sum()","b59c6528":"# Data Visualization using seaborn library \n# From the below graph, it is observed that passengers are in the range of 20 to 40 years.\nsns.histplot(data=train_data, x=\"Age\", kde=True, binwidth=10)","2f1856fd":"sns.pairplot(data=train_data)","87d7d2aa":"# Count of Male and Female in the training data\nsns.countplot(x=\"Sex\",data =train_data)","886f3a7c":"# Survived people count, sex wise\nsns.countplot(x=\"Survived\", data =train_data, hue=\"Sex\")","4225feec":"sns.boxplot(x=\"Survived\", y=\"Age\", data=train_data)","1967f334":"# Heatmap for quantitative variables\ndata=[\"Age\",\"Survived\",\"Fare\",\"Parch\",\"Pclass\"]\nsns.heatmap(train_data[data].corr(),annot=True)","555fef6a":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]","94cc2e70":"# Creating the pipeline\nvar_pipeline=Pipeline([(\"select_numeric\",DataFrameSelector([\"Age\"])),(\"imputer\", SimpleImputer(strategy=\"median\")),])","acc742c0":"var_pipeline.fit_transform(train_data)","9e5e5c69":"class MostFrequentImputer (BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        self.most_frequent_ = pd.Series([X[c].value_counts().index[0] for c in X],\n                                        index=X.columns)\n        return self\n    def transform(self, X, y=None):\n        return X.fillna(self.most_frequent_)","2bee09b5":"cat_pipeline=Pipeline([\n    (\"select_cat\", DataFrameSelector([\"Pclass\", \"Sex\", \"Embarked\"])),\n        (\"imputer\", MostFrequentImputer()),\n        (\"cat_encoder\", OneHotEncoder(sparse=False)),\n    ])","43122446":"cat_pipeline.fit_transform(train_data)\n","c0d261bc":"from sklearn.pipeline import FeatureUnion\npreprocess_pipelines = FeatureUnion(transformer_list=[\n        (\"var_pipeline\", var_pipeline),\n        (\"cat_pipeline\", cat_pipeline),\n    ])","87b899b0":"X_train=preprocess_pipelines.fit_transform(train_data)","571e1077":"y_train=train_data[\"Survived\"]","c22bfc91":"from sklearn.svm import SVC","d0f168c5":"svm_clf=SVC(gamma=\"auto\",random_state=42)\nsvm_clf.fit(X_train,y_train)","567fb658":"X_test=preprocess_pipelines.transform(test_data)","44c29b7d":"y_pred=svm_clf.predict(X_test)","49f5bd2a":"from sklearn.model_selection import cross_val_score","ae8889f2":"svm_scores=cross_val_score(svm_clf,X_train, y_train, cv=10)\nsvm_scores.mean()","3badf589":"forest_clf=RandomForestClassifier(n_estimators=100, random_state=42)\nforest_scores=cross_val_score(forest_clf, X_train, y_train, cv=10)\nforest_clf.fit(X_train,y_train)\nforest_pred=forest_clf.predict(X_test)","5e79e2f0":"forest_scores.mean()\n","c0147720":"output=pd.DataFrame({'PassengerId':test_data.PassengerId, 'Survived': forest_pred})\noutput","4cca6558":"Random Forest","c0df588a":"SVM Classifier"}}