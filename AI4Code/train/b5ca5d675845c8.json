{"cell_type":{"546f8fa8":"code","b26e3912":"code","913fe188":"code","d7a371a3":"code","977d5aa1":"code","b20fbcab":"code","74666e72":"code","599e7c1d":"code","0db5b2ca":"code","5fd03278":"code","1c35494a":"code","4ea1eb10":"code","977025d1":"code","fbff72dc":"code","f239862d":"code","0d3e383f":"code","edd4cdac":"code","c070e17d":"code","39a414cd":"code","75d6c198":"markdown","0330289a":"markdown","e451efe0":"markdown","50afaa6b":"markdown","01e676e8":"markdown","53520010":"markdown","ca731e88":"markdown","08d4e2bb":"markdown","f8a6ba07":"markdown","1bea6e39":"markdown","447f39d2":"markdown","b3b467ad":"markdown","7e1a8aef":"markdown","8fe2189d":"markdown","2cc55b8d":"markdown","478f54e9":"markdown","73782d6d":"markdown","2b7785e5":"markdown","326476ac":"markdown","de00e6ce":"markdown","23fcf3d6":"markdown","04391cc1":"markdown","a3776f11":"markdown","b414daa1":"markdown"},"source":{"546f8fa8":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport sys\n\n#!pip install matplotlib\n","b26e3912":"blink_security_hub_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_blink-security-hub.csv')\nblink_security_hub_uk","913fe188":"blink_security_hub_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_blink-security-hub.csv')\n\nechoplus_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_echoplus.csv')\n\nmagichome_strip_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_magichome-strip.csv')\n\nsamsungtv_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_samsungtv-wired.csv')\n\nphilips_hub_uk = pd.read_csv('..\/input\/csv\/one_min_sample\/uk\/uk_tot_t-philips-hub.csv')\n\nblink_security_hub_us = pd.read_csv('..\/input\/csv\/one_min_sample\/us\/us_tot_blink-security-hub.csv')\n\nechoplus_us = pd.read_csv('..\/input\/csv\/one_min_sample\/us\/us_tot_echoplus.csv')\n\nmagichome_strip_us = pd.read_csv('..\/input\/csv\/one_min_sample\/us\/us_tot_magichome-strip.csv')\n\nsamsungtv_us = pd.read_csv('..\/input\/csv\/one_min_sample\/us\/us_tot_samsungtv-wired.csv')\n\nphilips_hub_us = pd.read_csv('..\/input\/csv\/one_min_sample\/us\/us_tot_t-philips-hub.csv')\n\nphilips_hub_us\n","d7a371a3":"all_party = pd.read_csv('..\/input\/csv\/parties\/all_party.csv')\n\nall_party\n","977d5aa1":"all_data = all_party\n\nall_data['uk'] = '0'\nall_data['us'] = '0'\nall_data.loc[(all_data['lab'] == 'icl'), 'uk'] = '1'\nall_data.loc[(all_data['lab'] == 'neu'), 'us'] = '1'\n#excluding unknown\nall_data.loc[all_data['host'].str.contains('samsungcloud.com'), 'party'] = 'first party'\nall_data.loc[all_data['host'].str.contains('amazon'), 'party'] = 'support party'\nall_data.loc[all_data['host'].str.contains('tplinkra.com'), 'party'] = 'first party'\nall_data.loc[all_data['host'].str.contains('fastly'), 'party'] = 'support party'\n\n\nall_data_un=all_data.loc[~(all_data['party'] == 'first party')&~(all_data['lab'] == 'neu')&~(all_data['party'] == 'support party')&~(all_data['experiment'] == 'google')]\n\ndevice_only_us_uk = ['cloudcam', 'ikettle', 'bulb1', 'xiaomi-ricecooker', 'brewer', 'washer','microseven-camera',\n                     'invoke', 'dlink-mov', 'microwave', 'wink-hub2', 'dryer', 'lgtv-wired', 'amcrest-cam-wired', 'lefun-cam-wired', 'xiaomi-strip', 'fridge', 'zmodo-doorbell','luohe-spycam','xiaomi-cleaner' , 'netatmo-weather-station', 'google-home', 'bosiwo-camera-wifi', 'honeywell-thermostat', 'iphone', 'charger-camera', 'xiaomi-cam2', 'allure-speaker', 'smarter-coffee-mach', 'bosiwo-camera-wired','xiaomi-plug','tplink-plug2','t-smartthings-hub', 'galaxytab-a','google-home-mini2', 'philips-bulb']\n\ndata = all_data_un[~all_data_un['device'].isin(device_only_us_uk)]\n\nthird_pary_list=data[\"host\"].unique()\nprint (len(third_pary_list))\nprint (third_pary_list)\n\nthird_pary_list=all_data_un[\"host\"].unique()\nprint (len(third_pary_list))\nprint (third_pary_list)\n","b20fbcab":"import matplotlib.pyplot as plt\n\nall_data['uk'] = '0'\nall_data['us'] = '0'\nall_data.loc[(all_data['lab'] == 'icl'), 'uk'] = '1'\nall_data.loc[(all_data['lab'] == 'neu'), 'us'] = '1'\n#excluding unknown\nall_data_un=all_data.loc[~(all_data['party'] == '0')]\n\nall_clean_dup = all_data_un.drop_duplicates(subset=['device','lab','host','party'], keep='first')\n\nlabel_count = all_clean_dup.groupby(['device','lab','party']).size().to_frame('count').reset_index()\n\nlabel_count\ndf=label_count\n\ndf.loc[(df['lab'] == 'icl') & (df['party'] == 'first party'), 'label'] = 'UK first party'\ndf.loc[(df['lab'] == 'icl') & (df['party'] == 'support party'), 'label'] = 'UK support party'\ndf.loc[(df['lab'] == 'icl') & (df['party'] == 'third party'), 'label'] = 'UK third party'\n\ndf.loc[(df['lab'] == 'neu') & (df['party'] == 'first party'), 'label'] = 'US first party'\ndf.loc[(df['lab'] == 'neu') & (df['party'] == 'support party'), 'label'] = 'US support party'\ndf.loc[(df['lab'] == 'neu') & (df['party'] == 'third party'), 'label'] = 'US third party'\nprint(df)\n","74666e72":"colors = [\"#c3f7c3\", \"#95f995\",\"#049304\",\"#87CEFA\", \"#1E90FF\",\"#0000CD\"]\n\nfig, ax = plt.subplots(figsize=(17,7))\n\npivot_df = df.pivot(index='device', columns='label', values='count')\npivot_df.plot(ax=ax, kind='bar', stacked=True, color=colors)  # pass in subplot as an argument\n\n\nplt.tight_layout()\nplt.show()","599e7c1d":"all_data_un = all_party\n\nall_clean_dup = all_data_un.drop_duplicates(subset=['device','host','party'], keep='first')\n\n\n#count party and plot with 0\nlabel_count = all_clean_dup.groupby(['device','party']).size().to_frame('count').reset_index()\ndf=label_count\n\n#fig, ax = plt.subplots(figsize=(17,7))\n#device_list = df[\"device\"].unique()\n\n#s = label_count.reset_index().pivot(index='device', columns='party' , values='count').plot(ax=ax, kind='bar')\n#plt.tight_layout()\n#plt.show()\n\n#count party and plot without 0\n\nlabel_count_nozero = label_count[label_count.party!='0']\n\nfig, ax = plt.subplots(figsize=(15,7))\n\ndevice_list = df[\"device\"].unique()\n\ns = label_count_nozero.reset_index().pivot(index='device', columns='party' , values='count').plot(ax=ax, kind='bar')\nax.set_ylabel(\"# of unique destinations\", fontsize=15)\nax.set_xlabel(\"device\", fontsize=15)\nplt.tight_layout()\nplt.show()","0db5b2ca":"all_data_un = all_party\n\nall_clean_dup = all_data_un.drop_duplicates(subset=['category','host','party'], keep='first')\n\n\n#count party and plot with 0\nlabel_count = all_clean_dup.groupby(['category','party']).size().to_frame('count').reset_index()\ndf=label_count\n\n#fig, ax = plt.subplots(figsize=(17,7))\n#category_list = df[\"category\"].unique()\n\n#s = label_count.reset_index().pivot(index='category', columns='party' , values='count').plot(ax=ax, kind='bar')\n#plt.tight_layout()\n\n#count party and plot without 0\n\nlabel_count_nozero = label_count[label_count.party!='0']\n\nfig, ax = plt.subplots(figsize=(15,7))\n\ncategory_list = df[\"category\"].unique()\n\ns = label_count_nozero.reset_index().pivot(index='category', columns='party' , values='count').plot(ax=ax, kind='bar')\nplt.tight_layout()\nax.set_ylabel(\"# of unique destinations\", fontsize=15)\nax.set_xlabel(\"category\", fontsize=15)\nplt.show()","5fd03278":"import glob\nimport os\nimport itertools\nfrom pandas import Series\n\nmarker = itertools.cycle((',', '+', '.', 'o', '*'))\n\n#read uk\ndata=pd.read_csv('..\/input\/csv\/experiments\/uk_tagged_non-vpn_new')\n\nidle=pd.read_csv('..\/input\/csv\/experiments\/uk_idle_non-vpn_new')\n\nall_uk = idle.append(data)\n\n#read us\ndata_us=pd.read_csv('..\/input\/csv\/experiments\/us_tagged_non-vpn_new')\n\nidle_us=pd.read_csv('..\/input\/csv\/experiments\/us_idle_non-vpn_new')\n\nall_us = idle.append(data_us)\n\nall = all_uk.append(all_us)\n\ndevice_list = all[\"device\"].unique()\n\npattern = '|'.join(device_list)\n\nall_clean = all[(~all['host'].str.contains(\":\")) & (~all['host'].str.contains(\"192.168.*\")) & (~all['host'].str.contains(\"amazonaws\")) & (~all['host'].str.contains(\"ic.ac.uk\"))& (~all['host'].str.contains(\"255.255.255.255\"))& (~all['host'].str.contains(\"224.0.0.*\"))& (~all['host'].str.contains(\"224.0.1.*\"))& (~all['host'].str.contains(\"neu.edu\"))& (~all['host'].str.contains(\"239.255.*\"))& (~all['host'].str.contains(\"mitm\"))& (~all['host'].str.contains(pattern))& (~all['host'].str.contains(\"nexus\"))& (~all['host'].str.contains(\"galaxy\"))& (~all['device'].str.contains(\"iphone\"))& (~all['device'].str.contains(\"nexus\"))& (~all['host'].str.contains(\"ntp.org\"))& (~all['host'].str.startswith(\"2012\"))]\n\nall_clean.loc[all_clean['host'].str.startswith('cloudfront'), 'host'] = 'amazon'\nall_clean.loc[all_clean['host'].str.contains('cloudapp'), 'host'] = 'microsoft'\nall_clean.loc[all_clean['host'].str.contains('azure.com'), 'host'] = 'microsoft'\nall_clean.loc[all_clean['host'].str.contains('gvt2.com'), 'host'] = 'google'\nall_clean.loc[all_clean['host'].str.contains('gstatic.com'), 'host'] = 'google'\nall_clean.loc[all_clean['host'].str.contains('google'), 'host'] = 'google'\nall_clean.loc[all_clean['host'].str.startswith('nflxso'), 'host'] = 'netflix.com'\nall_clean.loc[all_clean['host'].str.startswith('1e100'), 'host'] = 'google'\nall_clean.loc[all_clean['host'].str.contains('12.167.151.2'), 'host'] = 'att.com'\nall_clean.loc[all_clean['host'].str.contains('microsoft'), 'host'] = 'microsoft'\nall_clean.loc[all_clean['host'].str.contains('104.171.118.254'), 'host'] = 'bigbrainglobal.com'\nall_clean.loc[all_clean['host'].str.startswith('216.151.187.'), 'host'] = 'BandCon'\nall_clean.loc[all_clean['host'].str.startswith('amaz.'), 'host'] = 'amazon'\nall_clean.loc[all_clean['host'].str.startswith('47.'), 'host'] = 'alibaba'\nall_clean.loc[all_clean['host'].str.contains('alibaba'), 'host'] = 'alibaba'\nall_clean.loc[all_clean['host'].str.contains('amazon'), 'host'] = 'amazon'\nall_clean.loc[all_clean['host'].str.contains('akamai'), 'host'] = 'akamai'\nprint(\"dest #\")\nprint (len(all_clean[\"host\"].unique()))","1c35494a":"host_ex_count = all_clean.groupby(['device','input_file','host','network'])\n\nall_clean_dup = all_clean.drop_duplicates(subset=['device','input_file','host','network'], keep='first')\n\nhost_ex_count = all_clean_dup.groupby(['device','experiment','host','network']).size().to_frame('size').reset_index()\n\nexp_list = host_ex_count[\"experiment\"].unique()\nfor exp in exp_list:\n    host_ex_count.loc[(host_ex_count['network'] == 'icl') & (host_ex_count['experiment'] == exp), 'label'] = 'icl_'+str(exp)\n    host_ex_count.loc[(host_ex_count['network'] == 'neu') & (host_ex_count['experiment'] == exp), 'label'] = 'neu_'+str(exp)\nhost_ex_count_icl=host_ex_count.loc[(host_ex_count['network'] == 'icl')]\nhost_ex_count_neu=host_ex_count.loc[(host_ex_count['network'] == 'neu')]\n\nhost_list = host_ex_count[\"host\"].unique()\n\n#fig, ax = plt.subplots(figsize=(15,7))\n#host_ex_count2 = host_ex_count.groupby(['device','host']).size().to_frame('size').reset_index()\n#host_ex_count3 = Series(host_ex_count2['device'])\n\nprint (host_ex_count3)","4ea1eb10":"vc = host_ex_count3.value_counts()\nprint(vc)","977025d1":"fig, ax = plt.subplots(figsize=(15,7))\nplt.s=vc.plot.bar(ax=ax)\nax.set_ylabel(\"# of unique destinations\", fontsize=12)\nax.set_xlabel(\"Device name\", fontsize=12)\nplt.tight_layout()\nfig.show()\n#fig.savefig('..\/fig\/total_uk_us_non-vpn_all.eps')\n#print(host_ex_count.to_csv('host_ex_count.csv'))","fbff72dc":"pivot_tab = host_ex_count.pivot_table(\n                                      values='size',\n                                      index=['device', 'host'],\n                                      columns='network',\n                                      aggfunc=np.sum)\n\n#print per device\nhost_count_lab_device = all_clean_dup.groupby(['device','host','network']).size().to_frame('size').reset_index()\npivot_tab2 = host_count_lab_device.pivot_table(values='host', index='device', columns='network',\n                                               aggfunc=lambda x: len(x.unique()))\n\n#print per device per experiment\nhost_count_lab_exp = all_clean_dup.groupby(['device','host','experiment','network']).size().to_frame('size').reset_index()\npivot_tab_exp = host_count_lab_exp.pivot_table(values='host', index=['device','experiment'], columns='network',\n                                               aggfunc=lambda x: len(x.unique()))\n\npivot_tab.loc[(pivot_tab['icl']>=1) & (pivot_tab['neu']>1), 'common'] = 'both'\npivot_tab.loc[(pivot_tab['icl']>=1) & (pivot_tab['neu'].isnull()), 'common'] = 'icl'\npivot_tab.loc[(pivot_tab['neu']>=1) & (pivot_tab['icl'].isnull()), 'common'] = 'neu'\nprint(\"dest icl\")\nprint(pivot_tab.loc[(pivot_tab['icl']>=1) & (pivot_tab['neu'].isnull())].to_csv('only_icl.csv'))\nprint(\"dest neu\")\nprint(pivot_tab.loc[(pivot_tab['neu']>=1) & (pivot_tab['icl'].isnull())].to_csv('only_neu.csv'))\n","f239862d":"flattened = pd.DataFrame(pivot_tab.to_records())\n\n#plot number of unique destination\nfig, ax = plt.subplots(figsize=(15,7))\nplt.s=flattened['common'].value_counts().plot.bar(ax=ax)\nax.set_ylabel(\"# of unique destinations\", fontsize=20)\nplt.tight_layout()\nfig.show()\n#fig.savefig('..\/fig\/total_uk_us_non-vpn.eps')","0d3e383f":"fig, ax = plt.subplots(figsize=(15,7))\nplt.s=flattened.groupby(['device', 'common']).size().unstack().plot(ax=ax, kind='bar', stacked=True)\nax.set_ylabel(\"# of unique destinations\", fontsize=20)\nplt.tight_layout()\nfig.show()\n#fig.savefig('..\/fig\/total_uk_us_non-vpn_device.eps')","edd4cdac":"device_only_us = ['cloudcam', 'ikettle', 'bulb1', 'xiaomi-ricecooker', 'brewer', 'washer','microseven-camera',\n                  'invoke', 'dlink-mov', 'microwave', 'wink-hub2', 'dryer', 'lgtv-wired', 'amcrest-cam-wired', 'lefun-cam-wired', 'xiaomi-strip', 'fridge', 'zmodo-doorbell','luohe-spycam']\ndevice_only_uk = ['xiaomi-cleaner' , 'netatmo-weather-station', 'google-home', 'xiaomi-hub', 'bosiwo-camera-wifi', 'honeywell-thermostat', 'iphone', 'charger-camera', 'xiaomi-cam2', 'allure-speaker', 'smarter-coffee-mach', 'bosiwo-camera-wired','xiaomi-plug','tplink-plug2']\n\nflattened = flattened[~flattened['device'].isin(device_only_us)]\nflattened = flattened[~flattened['device'].isin(device_only_uk)]\n\n#plot number of unique destination\nfig, ax = plt.subplots(figsize=(15,7))\nplt.s=flattened['common'].value_counts().plot.bar(ax=ax)\nax.set_ylabel(\"# of unique destinations\", fontsize=20)\nplt.tight_layout()\nfig.show()\n#fig.savefig('..\/fig\/total_uk_us_non-vpn_common.eps')","c070e17d":"fig, ax = plt.subplots(figsize=(15,7))\nplt.s=flattened.groupby(['device', 'common']).size().unstack().plot(ax=ax, kind='bar', stacked=True)\nax.set_ylabel(\"# of unique destinations\", fontsize=20)\nplt.tight_layout()\nfig.show()\n#fig.savefig('..\/fig\/total_uk_us_non-vpn_device_common.eps')\n","39a414cd":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport glob\nimport os\nimport itertools\n\ndata=pd.read_csv('..\/input\/csv\/experiments\/experiment_uk_tagged_vpn.csv')\nprint(data)\n\nmarker = itertools.cycle((',', '+', '.', 'o', '*'))\n\nidle=pd.read_csv('..\/input\/csv\/experiments\/experiment_uk_idle_vpn.csv')\n\nall = idle.append(pd.read_csv('..\/input\/csv\/experiments\/experiment_uk_tagged_vpn.csv'))\nprint(all)\n\nall_clean = all[(~all['host'].str.contains(\":\")) & (~all['host'].str.contains(\"192.168.*\")) & (~all['host'].str.contains(\"amazonaws\")) & (~all['host'].str.contains(\"ic.ac.uk\"))& (~all['host'].str.contains(\"255.255.255.255\"))& (~all['host'].str.contains(\"224.0.0.*\"))& (~all['host'].str.contains(\"224.0.1.*\"))& (~all['host'].str.contains(\"neu.edu\"))]\n\nhost_ex_count = all_clean.groupby(['device','input_file','host'])\n\nall_clean_dup = all_clean.drop_duplicates(subset=['device','input_file','host'], keep='first')\n\nhost_ex_count = all_clean_dup.groupby(['device','experiment','host']).size().to_frame('size').reset_index()\n\ndevice_list = all_clean[\"device\"].unique()\n\nfor dev in device_list:\n    dpd = host_ex_count[host_ex_count.device==dev]\n    print(dev)\n    p = dpd.groupby(['host','experiment']).sum()['size'].unstack()\n    print(p)\n    fig, ax = plt.subplots(figsize=(15,7))\n    s = dpd.groupby(['host','experiment']).sum()['size'].unstack().plot(ax=ax, title = dev, marker='o', linestyle=' ')\n    x=p.index\n    ax.xaxis.set_ticks(np.arange(len(x)))\n    ax.xaxis.set_ticklabels(x, rotation=80, fontsize=20)\n    ax.set_ylabel(\"# of experiments\", fontsize=20)\n    ax.set_xlabel(\"host name\", fontsize=20)\n    plt.tight_layout()\n    plt.show()\n","75d6c198":"Let's count the number of parties contacted over time for different categories","0330289a":"#### Plot destinations per experiment per device","e451efe0":"Let's count the number of destinations in different regions","50afaa6b":"# IoT Data Processing","01e676e8":"#### Reading data per categories for destination analysis","53520010":"### Import Required Packages","ca731e88":"### Data Visualisation ","08d4e2bb":"#### Plot destinations UK, US","f8a6ba07":"### Destination Analysis","1bea6e39":"#### Count parties","447f39d2":"Let's read the data per destination analysis ","b3b467ad":"#### Plot destinations UK, US","7e1a8aef":"Let's count the number of parties contacted over time for different devices","8fe2189d":"#### Comparing Destinations UK, US","2cc55b8d":"Let's count the number of parties contacted over time for different regions","478f54e9":"In this lab we use data from network traffic from IoT devices located in US and UK.\n* **pcaps from Controlled experiment traffic**: These consist of actively interacting with IoT devices and then labeling the captured traffic with the interaction name. For each of these experiments we first wait for the device to be powered on for at least two minutes (to avoid including power experiments traffic). After two minutes, and right before the interaction starts, we begin capturing the traffic and continue to do so for the entire duration of the interaction (i.e., switching on the smart bulb through the app)\n\n* **CSV from Controlled experiment 1 min sample**: We extracted relevant info from the pcap and convert them in csv format for further processing on 1 minute sample.\n\n*Format*: \ntimestamp (unix epoch), bandwidth up(kbits\/s), bandwidth down(kbits\/s), connections made, different ports accessed, different IPs accessed\n\n* **CSV from Controlled experiment destination analysis**: We extracted relevant info from the pcap and convert them in csv format for further processing about destinations contacted. \n\n*Format*: index,number,device,ip,host,host_full,traffic_snd,traffic_rcv,packet_snd,packet_rcv,country,party,lab,experiment,network,input_file,organisation,category\n","73782d6d":"tshark -r data\/pcap\/uk\/blink-security-hub\/power\/power1.pcap -T fields -e frame.number -e frame.time_epoch -e eth.src -e eth.dst -e ip.src -e ip.dst -e ip.proto -e tcp.srcport -e udp.srcport -e tcp.dstport -e udp.dstport -e frame.len -E header=y -E separator=, -E quote=n -E occurrence=f\n","2b7785e5":"Here we show how to extract relevant info from the pcap and convert them in csv format. ","326476ac":"### From pcap to CSV","de00e6ce":"#### Plot destinations UK, US","23fcf3d6":"#### Reading data 1 min sample","04391cc1":"Let's first read the data per device and country","a3776f11":"## IoT DATA","b414daa1":"Let's count and list the number of destinations contacted over time for patterns recognition"}}