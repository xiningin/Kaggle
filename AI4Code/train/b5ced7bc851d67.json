{"cell_type":{"959b71e7":"code","29bf8e18":"code","f524f1cf":"code","ec83eef0":"code","079ca523":"code","d4e64e4c":"code","784578f8":"code","d5e8e9d5":"code","c3afc6cd":"code","d563a7ca":"code","f58da235":"code","e53a6203":"code","e3bb9344":"code","394959bd":"code","ac5578ca":"code","56ef9411":"code","07946e86":"code","718df32c":"code","88113784":"code","94f746f1":"code","f049d78a":"code","d97f9495":"code","58f7b47c":"code","293699ca":"code","cf63925f":"code","936d2598":"markdown","2c795108":"markdown","7a3ea09c":"markdown","0ae1ccaa":"markdown","0dfe9040":"markdown","25986215":"markdown","c34040fb":"markdown","7ac4a97b":"markdown","091d9e9f":"markdown","ef5112b2":"markdown","73056b0c":"markdown"},"source":{"959b71e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29bf8e18":"import matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns","f524f1cf":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf.shape\nlen(test_data)","ec83eef0":"df.describe()","079ca523":"#create a copy of data\ndata=df.copy()","d4e64e4c":"viz = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']]\nviz.hist()\nplt.show()","784578f8":"from scipy.stats import chi2_contingency\nPclass_survival_freq = pd.crosstab(df.Pclass,df.Survived)\nprint(f'contingency table {Pclass_survival_freq}')\nchi2, pval, dof, expected = chi2_contingency(Pclass_survival_freq)\nprint(f'Chisquare-statistic is {chi2}')\n","d5e8e9d5":"Parch_survival_freq = pd.crosstab(df.Parch,df.Survived)\nprint(f'contingency table {Parch_survival_freq}')\nchi2, pval, dof, expected = chi2_contingency(Parch_survival_freq)\nprint(f'Chisquare-statistic is {chi2}')","c3afc6cd":"survived_fare_details = df[df.Survived == 1].Fare\nNsurvived_fare_details = df[df.Survived == 0].Fare\nprint(survived_fare_details.head())\nprint(Nsurvived_fare_details.head())","d563a7ca":"\nfig = plt.figure(figsize = (10,20))\nax = fig.add_subplot(2,1,1)\nax = sns.boxplot(data = df, x = 'Survived', y = 'Fare')","f58da235":"x = fig.add_subplot(2,1,2)\nax = plt.hist(Nsurvived_fare_details, color=\"blue\", label=\"Died\", density=True, alpha=0.5)\nax = plt.hist(survived_fare_details, color=\"red\", label=\"Survived\", density=True, alpha=0.5)\nax = plt.legend()\nplt.show()","e53a6203":"age_surv = df[df.Survived == 1].Age\nage_Nsurv = df[df.Survived == 0].Age","e3bb9344":"fig = plt.figure(figsize = (10,20))\nax = fig.add_subplot(2,1,1)\nax = sns.boxplot(data = df, x = 'Survived', y = 'Age')","394959bd":"x = fig.add_subplot(2,1,2)\nax = plt.hist(age_Nsurv, color=\"blue\", label=\"Died\", density=True, alpha=0.5)\nax = plt.hist(age_surv, color=\"red\", label=\"Survived\", density=True, alpha=0.5)\nax = plt.legend()\nplt.show()","ac5578ca":"femaleSurvived = df[(df.Sex == 'female') & (df.Survived == 1)]\n\n","56ef9411":"femaleCount = df.loc[df.Sex == 'female']\nfemaleCount.shape[0]","07946e86":"femaleSurvived.shape[0]\/femaleCount.shape[0]","718df32c":"menSur = df.loc[df.Sex=='male']['Survived']\nTotalMenSurvived = sum(menSur)\/len(menSur)\nprint(f' % Men survived are {TotalMenSurvived}')","88113784":"from sklearn.ensemble import RandomForestClassifier\ny = df[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(df[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","94f746f1":"df.nunique()","f049d78a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","d97f9495":"sns.countplot(x='Sex',data=df)","58f7b47c":"sns.countplot(x='Pclass',data=df)","293699ca":"cor = df.corr()","cf63925f":"sns.heatmap(cor)","936d2598":"# Boxplot to visualise the statistics","2c795108":"# The more associated the variables, more the value of chi-square","7a3ea09c":"# Association between Fare(continuous) and Survived(categorical)\n","0ae1ccaa":"# Association Age and Survived","0dfe9040":"# By conducting Chi-square test, we conclude that the feature Pclass is more associated to whether a passenger survived or not","25986215":"**Many people of age18-33 died, on the other hand children below 19 years were saved**","c34040fb":"**The medians are almost same. The IQR shows many old people died and more young people were survived**","7ac4a97b":"# Univariate analysis","091d9e9f":"# Association between dependent variable Survived(categorical) and Pclass(categorical)","ef5112b2":"# #Association between dependent variable Survived(categorical) and Parch(categorical)","73056b0c":"# Histogram"}}