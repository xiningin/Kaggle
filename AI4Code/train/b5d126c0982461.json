{"cell_type":{"6496d47a":"code","bd2f5c90":"code","3a9fdd34":"code","a97948e8":"code","8a7db65f":"code","b6aed1ca":"code","31819584":"code","d75b1e9f":"code","6f2dbf51":"code","9dd89b91":"code","47e414fb":"code","44bd9a08":"code","394897e5":"markdown"},"source":{"6496d47a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd2f5c90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3a9fdd34":"df = pd.read_csv('..\/input\/covid19-ourworldindata\/full_data.csv')\ndf_copy = df.copy()\ndf.head()","a97948e8":"#filter data only with zeros\ndf = df[df['total_cases']!=0]\n#df.head()","8a7db65f":"appear_date_df = df.groupby('location').agg({'date':['min','max']}).sort_values(by=('date','min'), ascending=True, na_position='last')\nappear_date_df.columns = [' '.join(col).strip() for col in appear_date_df.columns.values]\nappear_date_df.head()","b6aed1ca":"df1_c = pd.merge(df, appear_date_df, on=\"location\")\n#df1_c","31819584":"df1_c['days since first case'] = pd.to_datetime(df1_c['date']) - pd.to_datetime(df1_c['date min'])\ndf1_c['days since first case']=df1_c['days since first case']\/np.timedelta64(1,'D')\n#df1_c","d75b1e9f":"df1_c=df1_c.reset_index()\n","6f2dbf51":"kwargs = {\"fontsize\": 12,\n          \"fontstyle\": \"normal\"\n         }","9dd89b91":"#plot several countries\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'North Macedonia', \n             'Macedonia',\n             #'Turkey', \n             'Albania', \n             'Croatia',\n             'Montenegro', \n             'Bosnia and Herzegovina', \n             'Slovenia',\n             'Slovakia',\n             'Moldova',\n             'Hungary'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n\nplt.figure(figsize=(20,12))\nsns.lineplot(data=df_plot, x='days since first case',y='total_cases', hue='location').set(title = 'COVID-19 around the Balkans (after first case)')\n\n\ndf_annotate = df_plot.groupby('location').agg({'days since first case':'max', 'total_cases':  'max'})\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate(#'{}\\n(day: {:.0f}, cases: {:.0f})'.format(row.name,row['days since first case'],row['total_cases']),\n                row.name,\n                 xy=(row['days since first case']+0.1,row['total_cases']), \n                 xytext=(row['days since first case']+0.5, row['total_cases']+3),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs\n                )\nplt.show()","47e414fb":"#filter data above 100 total_cases\ndf=df_copy.copy()\ndf = df[df['total_cases']>=100]\ndf.head()","44bd9a08":"\nappear_date_df = df.groupby('location').agg({'date':['min','max']}).sort_values(by=('date','min'), ascending=True, na_position='last')\nappear_date_df.columns = [' '.join(col).strip() for col in appear_date_df.columns.values]\ndf1_c = pd.merge(df, appear_date_df, on=\"location\")\ndf1_c['days since 100th case'] = pd.to_datetime(df1_c['date']) - pd.to_datetime(df1_c['date min'])\ndf1_c['days since 100th case']=df1_c['days since 100th case']\/np.timedelta64(1,'D')\ndf1_c=df1_c.reset_index()\n\n#plot several countries\n\ncountries = ['Bulgaria',\n             'Greece', \n             'Romania', \n             'Serbia', \n             'North Macedonia', \n             'Macedonia',\n             #'Turkey', \n             'Albania', \n             'Croatia',\n             'Montenegro', \n             'Bosnia and Herzegovina', \n             'Slovenia',\n             'Slovakia',\n             'Moldova',\n             'Hungary'\n            ]\ndf_plot = df1_c[ df1_c['location'].isin(countries)] \n\nplt.figure(figsize=(20,12))\nsns.lineplot(data=df_plot, x='days since 100th case',y='total_cases', hue='location').set(title = 'COVID-19 around the Balkans (after 100th case)')\n\ndf_annotate = df_plot.groupby('location').agg({'days since 100th case':'max', 'total_cases':  'max'})\n\nfor index, row in df_annotate.iterrows():\n    plt.annotate(row.name,\n                 xy=(row['days since 100th case']+0.1,row['total_cases']), \n                 xytext=(row['days since 100th case']+0.5, row['total_cases']+3),\n                 arrowprops=dict(facecolor='black', shrink=0.05, headwidth=4, width=0.5),\n                **kwargs)\nplt.show()","394897e5":"for latest dataset on covid-19 refer this-\n\nTotal confirmed cases: https:\/\/covid.ourworldindata.org\/data\/ecdc\/total_cases.csv\n\nTotal deaths: https:\/\/covid.ourworldindata.org\/data\/ecdc\/total_deaths.csv\n\nNew confirmed cases: https:\/\/covid.ourworldindata.org\/data\/ecdc\/new_cases.csv\n\nNew deaths: https:\/\/covid.ourworldindata.org\/data\/ecdc\/new_deaths.csv\n\nFull dataset: https:\/\/covid.ourworldindata.org\/data\/ecdc\/full_data.csv\n"}}