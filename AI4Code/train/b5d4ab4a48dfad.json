{"cell_type":{"3ac7b95e":"code","a76d4199":"code","fefad33d":"code","ccc0ed50":"code","ca447e57":"code","70adbea1":"code","91f7f18f":"code","de201d4a":"code","0e78f422":"code","16fd8ff6":"code","37255cb2":"code","f6187d28":"code","f29b0359":"code","e6d66a92":"code","5ec035e1":"code","7431b91b":"code","c173b8c6":"code","a34646e9":"code","d6d87ab1":"code","a42df0b5":"code","8091cf6f":"code","ba3fb324":"code","8bc06bfb":"code","2cf60bce":"code","12c7e8af":"code","bb9ce719":"code","a58e7112":"code","25b46052":"code","9677a229":"code","87050114":"code","85017647":"code","902c89d5":"code","5fab882a":"code","5e757886":"code","fd167eb6":"code","77eb65fe":"code","277ec61f":"code","aed5ae1c":"code","d1c9e490":"code","f86a58d5":"code","d1497c40":"code","c90ffec0":"code","7a32b94c":"code","df59d7c8":"code","d2efdb04":"code","6c4e9e51":"code","3a67bc66":"code","b5244e86":"code","ed7cef39":"code","152474d6":"code","e23fed3f":"code","f24abd4d":"code","9a0e59ee":"code","2b5623f4":"code","c1cdc822":"code","eac0157e":"code","9daec898":"code","d92b1cfd":"code","2d573607":"code","9cfa9425":"code","6c50e04a":"code","7103f882":"code","77de0922":"code","d08b6047":"code","92269396":"code","fdf09dec":"code","e264797b":"code","8a3d15f2":"code","00860a9e":"code","e72ad00a":"code","31d60a4f":"code","4d82d75a":"code","ea1eb22a":"code","f6ea1e1c":"code","34f56399":"code","9250391f":"code","78ad81bd":"code","0aeb3e6a":"code","ed9cb693":"code","83488208":"code","ee5c5b1d":"code","cc667d33":"code","04c77bf4":"code","6d772aab":"code","ead2e729":"code","1bd7b2bf":"code","075f538c":"code","3187d967":"code","d92dbf3f":"code","3720fc5d":"code","5142bbaf":"code","654856d5":"code","a3c2eefd":"code","1f166e55":"code","46a3fe59":"code","182484cb":"code","f039f552":"code","762f8b22":"code","2d668ddd":"code","86e0d7d9":"code","2b5429ee":"code","9462cffb":"code","2606e31a":"code","641093d9":"code","82dd8965":"code","34d28327":"code","a1f2314e":"code","17714bcc":"code","bcd70e17":"code","abab5b6d":"code","6cbeaf69":"code","0b1414e8":"code","da2b42e5":"code","27e641c3":"code","c8143fae":"code","cf557f9b":"code","27646554":"code","d30efa98":"code","dbf896d9":"code","785918f6":"code","baa50d63":"code","9e4468e0":"code","da1f9406":"code","29396f8e":"code","f5592c92":"code","02f10d3e":"code","2c914d56":"code","40744c9e":"code","5ec47a49":"code","3bbe5195":"code","405eca92":"code","c743aa22":"code","48ab0eb2":"code","f4df4fe6":"code","d66cce46":"code","647e4384":"code","cf89badb":"code","b2e3496a":"code","5f847493":"code","34a8f9fe":"code","c9cc884b":"code","b8fcc1c3":"code","b237482c":"code","d1c8d2fd":"code","95d74197":"code","304cc471":"code","adcc925b":"markdown","3fe0657f":"markdown","03dbd25e":"markdown","114f7198":"markdown","9db36e9a":"markdown"},"source":{"3ac7b95e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","a76d4199":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fefad33d":"def plot_feature(df,col):\n    plt.figure(figsize=(14,6))\n    plt.subplot(1,2,1)\n    if df[col].dtype == 'int64':\n        df[col].value_counts().sort_index().plot()\n    else:\n        mean = df.groupby(col)['PG_CGA'].mean()\n        df[col] = df[col].astype('category')\n        levels = mean.sort_values().index.tolist()\n        df[col].cat.reorder_categories(levels,inplace=True)\n        df[col].value_counts().plot()\n    plt.xticks(rotation=45)\n    plt.xlabel(col)\n    plt.ylabel('Counts')\n    plt.subplot(1,2,2)\n    \n    if df[col].dtype == 'int64' or col == 'PG_CGA':\n        mean = df.groupby(col)['PG_CGA'].mean()\n        std = df.groupby(col)['PG_CGA'].std()\n        mean.plot()\n        plt.fill_between(range(len(std.index)),mean.values-std.values,mean.values + std.values, \\\n                        alpha=0.1)\n    else:\n        sns.boxplot(x = col,y='PG_CGA',data=df)\n    plt.xticks(rotation=45)\n    plt.ylabel('PG_CGA')\n    plt.show()    ","ccc0ed50":"def missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(8,6))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    return ms","ca447e57":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","70adbea1":"df = pd.read_csv('\/kaggle\/input\/Student_v2.csv')","91f7f18f":"df.head()","de201d4a":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","0e78f422":"df.isnull().sum()","16fd8ff6":"df.info()","37255cb2":"df.describe()","f6187d28":"df.corr()","f29b0359":"plt.figure(figsize=(15,7))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","e6d66a92":"plt.figure(figsize=(15,7))\nsns.heatmap(df.corr(),annot=False,cmap='viridis')\nplt.show()","5ec035e1":"plt.figure(figsize=(15,7))\nsns.heatmap(df.corr(),annot=True,cmap='Reds')\nplt.show()","7431b91b":"df1 = df.copy()\ndf2 = df.copy()","c173b8c6":"df1.head()","a34646e9":"df1.drop(['Register Number'],axis=1,inplace=True)","d6d87ab1":"df1.head()","a42df0b5":"plot_feature(df1,'Year')","8091cf6f":"plot_feature(df1,'GMAT score')","ba3fb324":"plot_feature(df1,'UG CGPA')","8bc06bfb":"plot_feature(df1,'Number of friends')","2cf60bce":"plot_feature(df1,'Number of classes present')","12c7e8af":"plot_feature(df1,'Number of hours studied')","bb9ce719":"df2.head()","a58e7112":"df2.drop(['Register Number'],axis=1,inplace=True)","25b46052":"df2.head()","9677a229":"df2.drop(['PG_CGA'],axis=1)","87050114":"plt.style.use('ggplot')\nfor col in df2:\n    plt.figure(figsize=(12,7))\n    sns.barplot(x=col,y=df2['PG_CGA'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","85017647":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.boxplot(x=col,y=df2['PG_CGA'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","902c89d5":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.jointplot(x=col,y=df2['PG_CGA'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","5fab882a":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.stripplot(x=col,y=df2['PG_CGA'],data=df2,jitter=True,edgecolor='gray',size=10,palette='winter',orient='v')\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","5e757886":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.residplot(x=col,y=df2['PG_CGA'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","fd167eb6":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.distplot(df2[col],color='r')\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","77eb65fe":"for col in df2:\n    plt.figure(figsize=(12,7))\n    plt.plot(col,'PG_CGA',data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","277ec61f":"for col in df2:\n    plt.figure(figsize=(12,7))\n    plt.bar(col,'PG_CGA',data=df2)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","aed5ae1c":"import scipy.stats as st\nfor col in df2:\n    plt.figure(figsize=(12,7))\n    st.probplot(df2[col],plot=plt)\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","d1c9e490":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.barplot(x=col,y=df2['PG_CGA'],data=df2)\n    sns.pointplot(x=col,y=df2['PG_CGA'],data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","f86a58d5":"for col in df2:\n    plt.figure(figsize=(12,7))\n    sns.kdeplot(data=df2[col])\n    #sns.pointplot(x=col,y=df2['PG_CGA'],data=df2,color='Black')\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","d1497c40":"for col in df2:\n    plt.figure(figsize=(12,7))\n    plt.plot(df2[col].value_counts())\n    plt.xlabel(col)\n    plt.ylabel(['PG_CGA'])\n    plt.tight_layout()\n    plt.show()","c90ffec0":"sns.pairplot(df2)\nplt.show()","7a32b94c":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(df2.PG_CGA)\nplt.subplot(1,2,2)\nsns.distplot(df2.PG_CGA,bins=20)\nplt.show()","df59d7c8":"rows =3\n\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df2.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(df2[col[index]],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","d2efdb04":"rows = 3\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df2.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=df2[col[index]],y=df2['PG_CGA'],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","6c4e9e51":"df.head()","3a67bc66":"df.drop(['Register Number'],axis=1,inplace=True)","b5244e86":"df.head()","ed7cef39":"from sklearn.preprocessing import MinMaxScaler\ndf_columns = df.columns\nscalar = MinMaxScaler()\ndf = scalar.fit_transform(df)\ndf = pd.DataFrame(df)\ndf.columns=df_columns","152474d6":"df.head()","e23fed3f":"X = df.drop(['PG_CGA'],axis=1)","f24abd4d":"y = df[['PG_CGA']]","9a0e59ee":"X.head()","2b5623f4":"y.head()","c1cdc822":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport time\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import learning_curve\nimport statsmodels.api as sm\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import RFE","eac0157e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","9daec898":"cross_val_score(LinearRegression(),X_train,y_train).mean()","d92b1cfd":"cross_val_score(RandomForestRegressor(n_estimators=100),X_train,y_train).mean()","2d573607":"cross_val_score(GradientBoostingRegressor(),X_train,y_train).mean()","9cfa9425":"cross_val_score(SVR(),X_train,y_train).mean()","6c50e04a":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","7103f882":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","77de0922":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","d08b6047":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","92269396":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","fdf09dec":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e264797b":"rf.feature_importances_","8a3d15f2":"feature_importance = pd.Series(rf.feature_importances_,index=X_train.columns)\nfeature_importance.sort_values()\nfeature_importance.plot(kind='barh',figsize=(8,6))\nplt.show()","00860a9e":"plt.figure(figsize=(7,8))\nfeatures = X_train.columns\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='Black', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","e72ad00a":"fe = SelectFromModel(RandomForestRegressor(n_estimators=100))","31d60a4f":"fe.fit(X_train,y_train)","4d82d75a":"fe.get_support()","ea1eb22a":"a = X_train.columns[fe.get_support()]","f6ea1e1c":"a","34f56399":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","9250391f":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","78ad81bd":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","0aeb3e6a":"svm = SVR()\nsvm.fit(X_train[a],y_train)\npred = svm.predict(X_test[a])\nr2_score(y_test,pred)","ed9cb693":"X_train_sm = sm.add_constant(X_train[a])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","83488208":"vif = pd.DataFrame()\nvif['Features'] = X_train[a].columns\nvif['VIF'] = [variance_inflation_factor(X_train[a].values, i) for i in range(X_train[a].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ee5c5b1d":"def run_Linear(X_train, X_test, y_train, y_test):\n    clf = LinearRegression()\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","cc667d33":"def run_randomForest(X_train, X_test, y_train, y_test):\n    clf = RandomForestRegressor(n_estimators=100, random_state=100, n_jobs=-1)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","04c77bf4":"def run_Gradient(X_train, X_test, y_train, y_test):\n    clf = GradientBoostingRegressor(n_estimators=100, random_state=100)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","6d772aab":"X_train.shape","ead2e729":"for index in range(1,7):\n    fe = RFE(LinearRegression(), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Linear(X_train_b, X_test_b, y_train, y_test)\n    print()","1bd7b2bf":"for index in range(1,7):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","075f538c":"for index in range(1,7):\n    fe = RFE(GradientBoostingRegressor(random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Gradient(X_train_b, X_test_b, y_train, y_test)\n    print()","3187d967":"for index in range(1,7):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","d92dbf3f":"fe = RFE(RandomForestRegressor(n_estimators=100,random_state=100), n_features_to_select = 1)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 1)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","3720fc5d":"fe.get_support()","5142bbaf":"a = X_train.columns[fe.get_support()]","654856d5":"a","a3c2eefd":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","1f166e55":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","46a3fe59":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","182484cb":"svm = SVR()\nsvm.fit(X_train[a],y_train)\npred = svm.predict(X_test[a])\nr2_score(y_test,pred)","f039f552":"X_train_sm = sm.add_constant(X_train[a])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","762f8b22":"lr = LinearRegression()\nrfe = RFE(lr, 4)             \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_)","2d668ddd":"b=X_train.columns[rfe.get_support()]\nb","86e0d7d9":"lr = LinearRegression()\nlr.fit(X_train[b],y_train)\npred = lr.predict(X_test[b])\nr2_score(y_test,pred)","2b5429ee":"lr = LinearRegression()\nrfe = RFE(lr, 2)             \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_)","9462cffb":"b=X_train.columns[rfe.get_support()]\nb","2606e31a":"lr = LinearRegression()\nlr.fit(X_train[b],y_train)\npred = lr.predict(X_test[b])\nr2_score(y_test,pred)","641093d9":"lr = LinearRegression()\nrfe = RFE(lr, 1)             \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_)","82dd8965":"b=X_train.columns[rfe.get_support()]\nb","34d28327":"lr = LinearRegression()\nlr.fit(X_train[b],y_train)\npred = lr.predict(X_test[b])\nr2_score(y_test,pred)","a1f2314e":"folds = KFold(n_splits = 5, shuffle = True, random_state = 100)\n\n\nhyper_params = [{'n_features_to_select': list(range(1,7))}]\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm)             \n\nmodel_cv = GridSearchCV(estimator = rfe, \n                        param_grid = hyper_params, \n                        scoring= 'r2', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\nmodel_cv.fit(X_train, y_train) ","17714bcc":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","bcd70e17":"plt.figure(figsize=(16,6))\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_test_score\"])\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_train_score\"])\nplt.xlabel('number of features')\nplt.ylabel('r-squared')\nplt.title(\"Optimal Number of Features\")\nplt.legend(['test score', 'train score'], loc='upper left')\nplt.show()","abab5b6d":"lr = LinearRegression()\nrfe = RFE(lr, 4)           \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_) ","6cbeaf69":"fe.get_support()","0b1414e8":"c = X_train.columns[fe.get_support()]","da2b42e5":"c","27e641c3":"lr = LinearRegression()\nlr.fit(X_train[c],y_train)\npred = lr.predict(X_test[c])\nr2_score(y_test,pred)","c8143fae":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[c],y_train)\npred = rf.predict(X_test[c])\nr2_score(y_test,pred)","cf557f9b":"gb = GradientBoostingRegressor()\ngb.fit(X_train[c],y_train)\npred = gb.predict(X_test[c])\nr2_score(y_test,pred)","27646554":"svm = SVR()\nsvm.fit(X_train[c],y_train)\npred = svm.predict(X_test[c])\nr2_score(y_test,pred)","d30efa98":"X_train.head()","dbf896d9":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","785918f6":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","baa50d63":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9e4468e0":"X_train.drop(['Year'],axis=1,inplace=True)\nX_test.drop(['Year'],axis=1,inplace=True)","da1f9406":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","29396f8e":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","f5592c92":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","02f10d3e":"X_train.drop(['Number of hours studied'],axis=1,inplace=True)\nX_test.drop(['Number of hours studied'],axis=1,inplace=True)","2c914d56":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","40744c9e":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","5ec47a49":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3bbe5195":"X_train.drop(['UG CGPA'],axis=1,inplace=True)\nX_test.drop(['UG CGPA'],axis=1,inplace=True)","405eca92":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","c743aa22":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","48ab0eb2":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","f4df4fe6":"X_train.drop(['GMAT score'],axis=1,inplace=True)\nX_test.drop(['GMAT score'],axis=1,inplace=True)","d66cce46":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","647e4384":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","cf89badb":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","b2e3496a":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","5f847493":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","34a8f9fe":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","c9cc884b":"plt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\ntitle = \"Learning Curve (Linear Regression)\"\ncv = 5\nplot_learning_curve(lr, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","b8fcc1c3":"title = \"Learning Curve (Random Forest)\"\ncv = 5\nplot_learning_curve(rf, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","b237482c":"title = \"Learning Curve (Gradient Boosting)\"\ncv = 5\nplot_learning_curve(gb, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","d1c8d2fd":"title = \"Learning Curve (SVM)\"\ncv = 5\nplot_learning_curve(svm, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1)","95d74197":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","304cc471":"plt.figure(figsize=(10,5))\nsns.distplot(y_test-pred)\nplt.show()","adcc925b":"# feature importance \/ engineering","3fe0657f":"# Model Building","03dbd25e":"# EDA","114f7198":"# Learning Curve","9db36e9a":"# Data"}}