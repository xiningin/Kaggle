{"cell_type":{"e8c5e225":"code","b61965f6":"code","8f0da034":"code","fb724b6a":"code","0c4df3e5":"code","1829cfbc":"code","5954017c":"code","66f0db4b":"code","4838c8eb":"code","ec7cd568":"code","91752812":"code","691327dd":"code","6d796938":"code","4660e641":"code","7d16fa65":"code","e2736536":"code","1a77b59e":"code","c386aa9c":"code","8d729259":"code","3bfb7e6a":"code","6b76a1af":"code","924e23c5":"code","bf48380a":"code","5ee0d624":"code","5303435e":"code","727d7f57":"code","ebe88e08":"code","aef7611a":"code","6bd41b8e":"code","ba0410bc":"code","356d36ea":"markdown","323ffff2":"markdown","4da0ec90":"markdown","9255f316":"markdown","1d51c72c":"markdown","155f8f85":"markdown","ece11f87":"markdown","de3f8d6f":"markdown"},"source":{"e8c5e225":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport optuna\n#pd.set_option('display.max_columns', 500)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n\n\n\nfrom collections import OrderedDict\nimport numpy as np\nfrom matplotlib.pylab import plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\n\n\nimport lightgbm as lgb\nimport gc\n\nimport sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\n#sys.path.append('..')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","b61965f6":"def reduce_mem_usage(props):\n    start_mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage of properties dataframe is :\",start_mem_usg,\" MB\")\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in props.columns:\n        if props[col].dtype != object:  # Exclude strings\n            \n            # Print current column type\n            #print(\"******************************\")\n           # print(\"Column: \",col)\n            #print(\"dtype before: \",props[col].dtype)\n            \n            # make variables for Int, max and min\n            IsInt = False\n            mx = props[col].max()\n            mn = props[col].min()\n            \n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(props[col]).all(): \n                NAlist.append(col)\n                props[col].fillna(mn-1,inplace=True)  \n                   \n            # test if column can be converted to an integer\n            asint = props[col].fillna(0).astype(np.int64)\n            result = (props[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True\n\n            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        props[col] = props[col].astype(np.uint8)\n                    elif mx < 65535:\n                        props[col] = props[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        props[col] = props[col].astype(np.uint32)\n                    else:\n                        props[col] = props[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        props[col] = props[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        props[col] = props[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        props[col] = props[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        props[col] = props[col].astype(np.int64)    \n            \n            # Make float datatypes 32 bit\n            else:\n                props[col] = props[col].astype(np.float32)\n            \n            # Print new column type\n           # print(\"dtype after: \",props[col].dtype)\n           # print(\"******************************\")\n    \n    # Print final result\n    print(\"___MEMORY USAGE AFTER COMPLETION:___\")\n    mem_usg = props.memory_usage().sum() \/ 1024**2 \n    print(\"Memory usage is: \",mem_usg,\" MB\")\n    print(\"This is \",100*mem_usg\/start_mem_usg,\"% of the initial size\")\n    return props, NAlist","8f0da034":"\ndef train_short_form_loader(feature_file,target_file,extra_target_file=None):\n    '''takes the original target and features and creates a train dataset \n    in col long format'''\n\n\n    train_features = pd.read_csv(feature_file)\n\n    train_targets = pd.read_csv(target_file)\n    train_features,_= reduce_mem_usage(train_features)\n    train_targets,_ = reduce_mem_usage(train_targets)\n\n\n    if extra_target_file is not None:\n        extra_targets = pd.read_csv(extra_target_file)\n        extra_targets,_ = reduce_mem_usage(extra_targets)\n        train_targets = pd.concat([train_targets,extra_targets])\n        del extra_targets\n\n    targets = train_targets.columns[1:]\n\n    train_melt=train_targets.merge(train_features,how=\"left\",on=\"sig_id\")\n\n\n    del train_features,train_targets\n\n\n    train_melt.set_index(\"sig_id\",inplace=True)\n\n    #train_melt[\"variable\"]= train_melt[\"variable\"].astype('category')\n    train_melt[\"cp_type\"]= train_melt[\"cp_type\"].astype('category')\n    train_melt[\"cp_dose\"]= train_melt[\"cp_dose\"].astype('category')\n\n    return train_melt , targets\n\n\n\ndef test_short_form_loader(feature_file):\n    '''takes the original target and features and creates a train dataset \n    in col long format'''\n\n\n    train_features = pd.read_csv(feature_file)\n\n    #train_targets = pd.read_csv(target_file)\n    train_features,_= reduce_mem_usage(train_features)\n    #train_targets,_ = reduce_mem_usage(train_targets)\n\n    train_melt =  train_features.copy()\n    del train_features\n\n\n    train_melt.set_index(\"sig_id\",inplace=True)\n\n    #train_melt[\"variable\"]= train_melt[\"variable\"].astype('category')\n    train_melt[\"cp_type\"]= train_melt[\"cp_type\"].astype('category')\n    train_melt[\"cp_dose\"]= train_melt[\"cp_dose\"].astype('category')\n\n    return train_melt \n","fb724b6a":"def dataset_splitter(data,**kwargs):\n    '''splits by index and does not mix sig ids\n    @might want to allow some mixing for regularization later on '''\n    train_ids,test_ids=train_test_split(data.index.unique(),**kwargs)\n    return data.loc[train_ids], data.loc[test_ids]","0c4df3e5":"train_df ,targets= train_short_form_loader(\"..\/input\/lish-moa\/train_features.csv\",\"..\/input\/lish-moa\/train_targets_scored.csv\")","1829cfbc":"train_df.drop(targets,axis=1,inplace=True)","5954017c":"train_df.head()","66f0db4b":"online_df = test_short_form_loader(\"..\/input\/lish-moa\/test_features.csv\")","4838c8eb":"train_df[\"is_test\"]=0\nonline_df[\"is_test\"]=1\n\ntrain_df=pd.concat([train_df,online_df])","ec7cd568":"del online_df\ngc.collect()","91752812":"train_df.head()","691327dd":"train_df, test_df =dataset_splitter(train_df)","6d796938":"test_df.head()","4660e641":"model=lgb.LGBMClassifier(n_jobs=4)","7d16fa65":"test_df.index.isin(train_df.index).any()","e2736536":"recorder={}\nmodel.fit(train_df.drop(\"is_test\",axis=1),train_df[\"is_test\"],eval_metric=[\"logloss\",'auc'],eval_set=[(train_df.drop(\"is_test\",axis=1),train_df[\"is_test\"]),(test_df.drop(\"is_test\",axis=1),test_df[\"is_test\"])],callbacks=[lgb.callback.record_evaluation(recorder)],verbose=False)\n\n","1a77b59e":"ig, ax = plt.subplots()\nax.plot(recorder['valid_0']['binary_logloss'], label='Train')\nax.plot(recorder['valid_1']['binary_logloss'], label='Val')\nax.legend()\nplt.ylabel('logloss')\nplt.title('Lightgbm first take logloss')\nplt.show()","c386aa9c":"ig, ax = plt.subplots()\nax.plot(recorder['valid_0']['auc'], label='Train')\nax.plot(recorder['valid_1']['auc'], label='Val')\nax.legend()\nplt.ylabel('AUC')\nplt.title('AUC')\nplt.show()","8d729259":"lgb.plot_importance(model,max_num_features=30)","3bfb7e6a":"import shap","6b76a1af":"%time shap_values = shap.TreeExplainer(model).shap_values(test_df.drop(\"is_test\",axis=1))","924e23c5":"len(shap_values)","bf48380a":"plt.figure(figsize=(16,12))\nshap.summary_plot(shap_values[0], test_df.drop(\"is_test\",axis=1) ,max_display=50)","5ee0d624":"train_df.groupby(\"is_test\")['c-62'].agg(['mean','std','median'])","5303435e":"test_df.groupby(\"is_test\")['c-62'].agg(['mean','std','median'])","727d7f57":"import seaborn as sn\n","ebe88e08":"sn.boxplot(x='is_test',y='c-62',data=train_df)\n\n#sn.distplot(test_df.loc[train_df[\"is_test\"]==1,'c-62'],hist=True, rug=True)\n","aef7611a":"sn.violinplot(x='is_test',y='c-62',data=train_df)","6bd41b8e":"sn.violinplot(x='is_test',y='c-62',data=test_df)","ba0410bc":"sn.violinplot(x='is_test',y='g-375',data=test_df)","356d36ea":"This is mostly a redo of the expeiment in here https:\/\/www.kaggle.com\/supreethmanyam\/adversarial-moa-private-test-included?scriptVersionId=41959972 .\n\nThe task is to see if we can use the features to determine if the examle comes from the test or the train set. If we can it is an indication of distribution drift.\n\nInstead of finding no separation between tain and public test sets, I have found perfect separation and indications that some features have leanable distribution changes between train and test.","323ffff2":"## there is no repeated sig_id","4da0ec90":"# SOME FUNCTION DEFINITIONS","9255f316":"# Next steps \n\n- As there is no noticeable big change in the distribution of the features, we shoul-ld evaluate checking changes of the distribution of tuples of features.","1d51c72c":"# THE TRAINING IS DONE","155f8f85":"Let's check the features which are more important in detemining if we are in train or test. Note that this features do not have much coincidence with the ones in the original kernel.","ece11f87":"# A DEEPER LOOK INTO THE CATASTROPHE","de3f8d6f":"# THE FUN STARTS"}}