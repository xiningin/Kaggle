{"cell_type":{"0ae759dd":"code","80706040":"code","39df1647":"code","ce9f5f98":"code","6ca6d7dd":"code","f1d41011":"code","2b2334fd":"code","ce8472a2":"code","c903b78c":"code","54e60c30":"code","113a5d67":"code","62d58e27":"code","5287d3f1":"code","522185e7":"code","16dd6724":"code","4c4266e5":"code","6ec03249":"code","2c645504":"code","d841ca45":"markdown","d7210c87":"markdown","5fc5019b":"markdown","caf182d4":"markdown","3b48492c":"markdown","7dabd4dc":"markdown","e579c013":"markdown","44dc1cd0":"markdown","e3cdfb74":"markdown"},"source":{"0ae759dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80706040":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import mode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()","39df1647":"dataset=pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndataset.head()","ce9f5f98":"dataset.info()","6ca6d7dd":"#droping this id column\ndataset.drop('Id',axis=1,inplace=True)","f1d41011":"dataset.head()","2b2334fd":"f, ax = plt.subplots(figsize=(10, 8))\nsns.countplot(x=\"Species\", data=dataset,palette=\"rainbow\")","ce8472a2":"#relationship between the sepal length and width\nfig=dataset[dataset.Species=='Iris-setosa'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='green', label='Setosa')\nr=dataset[dataset.Species=='Iris-versicolor'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='red', label='Versicolor',ax=fig)\nb=dataset[dataset.Species=='Iris-virginica'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='blue', label='Virginica',ax=fig)\nfig=plt.gcf()\nfig.set_size_inches(10,6)","c903b78c":"#relationship between the sepal length and width\nfig=dataset[dataset.Species=='Iris-setosa'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='green', label='Setosa')\nr=dataset[dataset.Species=='Iris-versicolor'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='red', label='Versicolor',ax=fig)\nb=dataset[dataset.Species=='Iris-virginica'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='blue', label='Virginica',ax=fig)\nfig=plt.gcf()\nfig.set_size_inches(10,6)","54e60c30":"## variation of length and width according to the specie\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=dataset,palette=\"rainbow\")\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=dataset,palette=\"rainbow\")\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=dataset,palette=\"rainbow\")\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=dataset,palette=\"rainbow\")","113a5d67":"f, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(dataset.corr(),annot=True,cmap='Greens')","62d58e27":"## Lets build our own knn model\n","5287d3f1":"## split train and test data\nfrom sklearn.model_selection import train_test_split\nx=dataset.iloc[:,:-1]\ny=dataset.iloc[:,-1]\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)","522185e7":"# function to find distances\ndef distance(instance1, instance2):\n    instance1 = np.array(instance1) \n    instance2 = np.array(instance2)\n    \n    return np.linalg.norm(instance1 - instance2)","16dd6724":"def getNeighbours(data,k):\n        distances=[]\n        for index in range(len(x_train)):\n            d=distance(x_train.iloc[index],data)\n            distances.append((d,y_train.iloc[index]))\n        distances.sort(key=lambda x:x[0])\n        return distances[:k]","4c4266e5":"y_predict=[]\nfor i in range(len(x_test)):\n    data=x_test.iloc[i]\n    data=np.array(data)\n    nei=getNeighbours(data,5)\n    y_predict.append( mode( nei )[0][0])\nfor i in range(len(y_predict)):\n    y_predict[i]=y_predict[i][1]\n    \ny_prediction=np.array(y_predict).reshape(1,45)","6ec03249":"## Model Evaluation\nfrom sklearn.metrics import confusion_matrix, accuracy_score\naccuracy_score(y_test, y_predict)","2c645504":"from sklearn.neighbors import KNeighborsClassifier\nmodel=KNeighborsClassifier(n_neighbors=5)\nmodel.fit(x_train,y_train)\nprediction=model.predict(x_test)\nprint('The accuracy of the KNN is',accuracy_score(prediction,y_test))","d841ca45":"Now lets visualize this dataset","d7210c87":"![picture](https:\/\/www.gardendesign.com\/pictures\/images\/900x705Max\/site_3\/iris-sibirica-caesar-s-brother-iris-purple-flower-beardless-siberian-iris-shutterstock-com_12590.jpg)","5fc5019b":"We can see that the petal features are giving better result than the sepal features","caf182d4":"So this dataset has no null values","3b48492c":"## visualizing the corelation graph","7dabd4dc":"Petal Width and Length are highly correlated","e579c013":"## So our Algorithm is predicting almost 97% accuracy","44dc1cd0":"So we have same number of data from each species","e3cdfb74":"## using Library"}}