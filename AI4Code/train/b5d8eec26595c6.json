{"cell_type":{"a2c49ba7":"code","84af1db7":"code","5cd5774d":"code","e50b2f19":"code","d949a3de":"code","67c2fd51":"code","f161cbfd":"code","ce958fb6":"code","ce79ff40":"code","31bd4ebc":"code","7c7d0146":"code","2710093c":"code","50daf47b":"code","d5b57f2b":"code","4fe4ce10":"code","d844cd1d":"code","6cef6c7c":"code","21ca34f1":"code","3afddd89":"code","874f0323":"code","865075f4":"code","91d03c8e":"code","0d8f6d0b":"code","7248999a":"code","d41a457a":"code","88222c73":"code","a99c58d5":"code","d1704f0d":"code","a625c5c6":"code","b1b6ec10":"markdown"},"source":{"a2c49ba7":"import os\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier","84af1db7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5cd5774d":"Train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nTest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ngender_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","e50b2f19":"Train_df.head()","d949a3de":"Test_df.head()","67c2fd51":"gender_df","f161cbfd":"# Select the parameters that will only get in the way\nnot_need_columns = [\n    'PassengerId', 'Name', 'Cabin'\n]","ce958fb6":"train_df = Train_df.drop(axis=1, columns=not_need_columns)\ntest_df = Test_df.drop(axis=1, columns=not_need_columns)","ce79ff40":"train_df.head()","31bd4ebc":"test_df.head()","7c7d0146":"train_df.info()","2710093c":"# Changing the categorical features into numerical features\nle = LabelEncoder()\n\ntrain_df['Sex'] = le.fit_transform(train_df['Sex'])\ntrain_df['Embarked'] = le.fit_transform(train_df['Embarked'])\ntrain_df['Age'] = train_df['Age'].fillna(value=train_df['Age'].mean())\n\ntest_df['Sex'] = le.fit_transform(test_df['Sex'])\ntest_df['Embarked'] = le.fit_transform(test_df['Embarked'])\ntest_df['Age'] = test_df['Age'].fillna(value=test_df['Age'].mean())","50daf47b":"tickets = train_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]","d5b57f2b":"train_df['Ticket'] = tickets","4fe4ce10":"tickets = test_df['Ticket'].str.split()\ntickets = [ticket[-1] if len(ticket) > 1 else ticket[0] for ticket in tickets]\ntickets = [int(elem) if elem.isdigit() else 9999999 for elem in tickets]\ntest_df['Ticket'] = tickets","d844cd1d":"train_df.info()","6cef6c7c":"test_df.info()","21ca34f1":"test_df['Fare'] = test_df['Fare'].fillna(value=test_df['Fare'].mean())","3afddd89":"test_df.info()","874f0323":"Y_train = train_df.loc[:, ['Survived']]\nX_train = train_df.drop(axis=1, columns=['Survived'])","865075f4":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train,\n                                                    random_state=42)","91d03c8e":"adc = AdaBoostClassifier()\nadc.fit(x_train, y_train)\nY_pred = adc.predict(x_test)\naccuracy_score(Y_pred, y_test)","0d8f6d0b":"rfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\nY_pred = rfc.predict(x_test)\naccuracy_score(Y_pred, y_test)","7248999a":"tree = DecisionTreeClassifier()\ntree.fit(x_train, y_train)\nY_pred = tree.predict(x_test)\naccuracy_score(Y_pred, y_test)","d41a457a":"rfc = RandomForestClassifier(n_estimators=25, max_depth=7, random_state=42)\nrfc.fit(X_train, Y_train)\nY_pred = rfc.predict(test_df)","88222c73":"accuracy_score(Y_pred, gender_df.loc[:, ['Survived']])","a99c58d5":"submission = pd.DataFrame({\n        \"PassengerId\": Test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","d1704f0d":"submission.to_csv('submission.csv', index=False)","a625c5c6":"pd.read_csv('submission.csv')","b1b6ec10":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!"}}