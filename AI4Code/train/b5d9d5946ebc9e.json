{"cell_type":{"1cdc1cdd":"code","a6ef85bc":"code","d851f25b":"code","6b373896":"code","06721e77":"code","adc4cd1f":"code","76465042":"code","bd1f9833":"code","78d7c631":"code","e6e6a2e5":"code","27d5f704":"code","dd52692f":"code","8e44913b":"code","7d9a839c":"code","4ddb9578":"code","b68b3ba2":"code","35a2cc79":"code","39216ef0":"code","cec3406d":"code","46c39f95":"code","0b721760":"code","9a921018":"code","7c775ff4":"code","3d131d6f":"code","48148ef3":"code","e902e1ac":"code","5741a1f4":"code","1314aacd":"code","5721fe6d":"code","44a31605":"code","ab540cf2":"code","914857e2":"code","38683b73":"code","997db499":"code","f1772ce5":"code","3189b9d7":"code","ae6b2fce":"code","54c38c76":"code","37a89fa0":"code","e525f632":"code","b60dd2d8":"code","fa5b614c":"code","390b8d38":"code","2cd15187":"code","31659f38":"code","fb29c32a":"code","b76e67a0":"code","c4cf29e1":"code","7f8cf7c0":"code","100156c2":"code","56b47b84":"code","cd4805af":"code","5722b535":"code","edc5a781":"code","6470733e":"code","3a70293d":"code","86ffe45f":"code","bebfa545":"code","c7568952":"code","aebdbb71":"code","ed9c71dc":"code","206e3fcd":"code","f08b63f0":"code","88751199":"code","3c597ed1":"code","52bddcd7":"code","d17dc166":"code","91b6b3ba":"code","f297a7a6":"code","75c726a1":"code","a98f9535":"code","14fb295a":"code","e67f835e":"code","de5ea81a":"code","1fc5f907":"code","aebdea9f":"code","8225f9cd":"code","bb23c187":"code","39718c14":"code","72839733":"code","74c8f5f9":"code","f29444e4":"code","0e01fcc8":"code","7bac422a":"code","fd538642":"code","3bb91a9c":"code","9db0f1f7":"code","e1f8063b":"code","89d4187f":"code","116fdf6c":"code","76a6dc9b":"code","f0a374f0":"code","fd4aeb8a":"code","764c106c":"code","21e923dd":"code","41fc1427":"code","46d67727":"code","4088d527":"code","da75aca7":"code","f0327273":"code","e9154ef2":"code","58afbde4":"code","35e0ed5a":"code","591dab1a":"code","3db259aa":"code","111d75f3":"code","25e458f9":"code","5c360626":"code","5b20a45c":"code","0c768825":"code","168debab":"code","48ed00cb":"code","a0d104fb":"code","f61bde48":"code","b0458343":"code","14f12aeb":"code","7f2488c3":"code","20a76696":"code","634b18d5":"code","9b44d622":"code","7820e7ae":"code","8ca9cbd4":"code","c5259bd7":"code","c716b368":"code","b4410a39":"code","69b78e45":"code","d7eece0a":"code","0a60cc09":"code","9f47a6ee":"code","85e24abc":"code","6b63e986":"code","612ce578":"code","a35cb4fa":"code","4fd192e6":"code","d02e5e10":"code","81ed369c":"code","8ebe6b9c":"code","1301aaad":"code","66259bb4":"code","212c0a21":"code","64c2e1cb":"code","1b9fade9":"code","96edcbd2":"code","e1c5adf4":"code","ea89917e":"code","c532c601":"code","7589147c":"code","394bbbbb":"code","79b8a46c":"code","fe4f9e77":"code","e7d45270":"code","7a5e63a6":"code","ae8137d0":"code","960a408c":"code","22d7d821":"code","77619417":"code","b8fbb566":"code","eb650df2":"code","95ea4628":"code","772bf262":"code","34b26778":"code","3c74f114":"code","1a7ecc54":"code","810acad7":"code","952128e3":"code","9928f26a":"code","7add5ddc":"code","81b5c7f5":"code","2481df46":"code","9bc1f90a":"code","08acee8d":"code","e0a19f90":"code","bca49aa9":"code","354d13c1":"code","79d50117":"code","b99a2feb":"code","e000806e":"code","c1f73014":"code","a52492e8":"code","6653ba1f":"code","fc462fe5":"code","699d87af":"code","736c0f82":"code","39418539":"code","5ae90be5":"code","9cc5f2a6":"code","62acb33a":"code","fc47dda2":"code","863a80b6":"code","69e26450":"code","a5bdfbf9":"code","e01f6e32":"code","f0de73b4":"code","2e638007":"code","fc5482b9":"code","94328f9b":"code","90982d2e":"code","50586e3b":"code","c0c3e57d":"code","3bc46932":"code","9c109a8c":"code","a4bf6c92":"code","a24a6fe6":"code","7c96ab7d":"code","a395112c":"code","829b30a5":"code","761e6a84":"code","31419aad":"code","26b2678b":"code","58fdc3dc":"code","1ef8bdaf":"code","45db110b":"code","eff6ace2":"code","5c1b38ff":"code","2a46847d":"code","cfffacfc":"code","cb53eada":"code","c04449a4":"code","c300e0f5":"code","54998dca":"code","7357e652":"code","b5f1067e":"code","156facba":"code","4845636b":"code","d4b88f5c":"code","3a297baa":"code","6d2b4b4b":"code","91020d69":"code","5f204c42":"code","4db794a4":"code","442c9657":"code","69ae98f2":"code","40fd1475":"code","825aa059":"code","ad33cf2c":"code","b6384649":"code","5e2c3408":"code","4becdd8a":"code","7e41f9e5":"code","71497c54":"code","f2818ce3":"code","60b582ea":"code","408e63a9":"code","86618d05":"code","be2992ec":"code","837a5044":"code","a536e14d":"code","d34c132d":"code","3e214af2":"code","2362852c":"code","140a0488":"code","0b67255b":"code","06012b01":"code","9226bf46":"code","1370e38c":"code","ce291309":"code","7e77a682":"code","edb0c0c6":"code","e745af7f":"code","aa88def4":"code","e880c83d":"code","9d9fb9fb":"code","883263d5":"code","2ad6b99c":"code","9ae1ff7d":"markdown","ff542d42":"markdown","05da26f8":"markdown","8f1996c0":"markdown","a3122d5e":"markdown","cf558a52":"markdown","6ab9d5da":"markdown","191cedc8":"markdown","233f6196":"markdown","937f246f":"markdown","8044deed":"markdown","d2b8c75b":"markdown","25270ceb":"markdown","6be37b6d":"markdown","a8f4fe1a":"markdown","9735e6fb":"markdown","35da7c63":"markdown","afb7d00b":"markdown","03c44e55":"markdown","d5ed5f10":"markdown","3ed265c4":"markdown","10dd7f81":"markdown","ddfb8cbd":"markdown","9b51ddf3":"markdown","6599a98c":"markdown","7d38b037":"markdown","03f715a5":"markdown","a756bbf3":"markdown","e9681677":"markdown","553a0b26":"markdown","4a07c347":"markdown","2bdb4c66":"markdown","0420620e":"markdown","40e64ec1":"markdown","9043bd69":"markdown","c6463c92":"markdown","6c0193b0":"markdown","bb736ba0":"markdown","90f5293f":"markdown","0820309d":"markdown","2b9d5264":"markdown","d0e12125":"markdown","7cc72e56":"markdown","bf05d597":"markdown","12028547":"markdown","c7ab26a4":"markdown","e5558825":"markdown","d978f66c":"markdown","a048b61a":"markdown","e0b927a4":"markdown","15f971dc":"markdown","8737c197":"markdown","26f0fe73":"markdown","15ed6422":"markdown","f8e536ba":"markdown","80111ca1":"markdown","99a175da":"markdown","d54d3483":"markdown","56972598":"markdown","07565003":"markdown","697ceb16":"markdown","643a6566":"markdown","20d132ef":"markdown"},"source":{"1cdc1cdd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6ef85bc":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')\n","d851f25b":"sub.head(20)","6b373896":"train.tail()","06721e77":"train.info()","adc4cd1f":"data = pd.concat([train,test], axis=0, ignore_index=True)","76465042":"data","bd1f9833":"data['MSSubClass'].nunique()","78d7c631":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","e6e6a2e5":"\nplt.figure(figsize=(15,5))\n\nax =  sns.countplot(x='MSSubClass', data = data)\nax.set_xlabel('MSSubClass', fontsize=18)\nfor p in ax.patches:\n    height = p.get_height()\n    width = p.get_width()\/2\n    ax.text(p.get_x()+width,height + 3,\n           '{:1}'.format(height),\n           ha = \"center\")\n    \nplt.show()","27d5f704":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndata['MSSubClass'] = le.fit_transform(data['MSSubClass'])\n","dd52692f":"data[['MSSubClass']].head()","8e44913b":"data['MSZoning'].nunique()","7d9a839c":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['MSZoning'])\nax.set_xlabel('MSZoning', fontsize=18)\nfor p in ax.patches:\n    height = p.get_height()\n    width = p.get_width()\/2\n    ax.text(p.get_x()+width,height + 3,\n           '{:1}'.format(height),\n           ha = \"center\")\n    \nplt.show()\n\n\n","4ddb9578":"dum = pd.get_dummies(data['MSZoning'],prefix='MSZoning')\ndata = pd.concat([data,dum], axis=1)\ndata","b68b3ba2":"data.drop(columns=['MSZoning'], inplace=True)\n","35a2cc79":"data['LotFrontage'].nunique()","39216ef0":"data['LotFrontage'].isnull().sum()\n\n# it has 486 null values","cec3406d":"plt.figure(figsize=(15,5))\nsns.distplot(data['LotFrontage'])","46c39f95":"sns.boxplot(data['LotFrontage'])","0b721760":"from sklearn.impute import KNNImputer\nimputer = KNNImputer( n_neighbors=10, metric='nan_euclidean',weights='uniform')\nx = imputer.fit_transform(data[['LotFrontage']]) \nXtrans = imputer.transform(x)\ndata['LotFrontage'] = Xtrans\ndata.head(10)","9a921018":"  \nfrom scipy.stats import skew \nprint('\\nSkewness for data : ', skew(data['LotFrontage'])) \n","7c775ff4":"# i = data['LotFrontage'].quantile(.98)\n# data = data[data['LotFrontage']<i]","3d131d6f":"p = data['LotFrontage']\nsns.distplot(p)\nskew(p)","48148ef3":"data['LotArea'].nunique()","e902e1ac":"data['LotArea'].isnull().sum()","5741a1f4":"plt.figure(figsize=(15,5))\n\nsns.distplot(data['LotArea'])\nskew(data['LotArea'])","1314aacd":"data['LotArea'] = np.log1p(data['LotArea'])\n\n","5721fe6d":"print(skew(data['LotArea']))\nplt.figure(figsize=(15,5))\n\nsns.distplot(data['LotArea'])","44a31605":"data","ab540cf2":"data['Street'].nunique()","914857e2":"plt.figure(figsize=(6,5))\nax = sns.countplot(data['Street'])\n\nax.set_xlabel('Street', fontsize=18)\nfor p in ax.patches:\n    height = p.get_height()\n    width = p.get_width()\/2\n    ax.text(p.get_x()+width,height + 3,\n           '{:1}'.format(height),\n           ha = \"center\")\n    \nplt.show()","38683b73":"dum = pd.get_dummies(data['Street'], prefix='Street')\n\ndata = pd.concat([data,dum], axis=1)","997db499":"data.drop(columns='Street', inplace=True)\ndata","f1772ce5":"data['Alley'].isnull().sum()","3189b9d7":"data.drop(columns='Alley', inplace=True)","ae6b2fce":"data['LotShape'].nunique()","54c38c76":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['LotShape'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()   \n    ","37a89fa0":"dum = pd.get_dummies(data['LotShape'], prefix='LotShape')\ndata = pd.concat([data,dum], axis=1)","e525f632":"data.drop(columns='LotShape', inplace=True)\ndata","b60dd2d8":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['LandContour'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()   \n    ","fa5b614c":"dum = pd.get_dummies(data['LandContour'], prefix='LandContour')\ndum\ndata = pd.concat([data,dum], axis=1)","390b8d38":"data.drop(columns='LandContour', inplace=True)\ndata","2cd15187":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['Utilities'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()   \n    ","31659f38":"data['Utilities'].isnull().sum()","fb29c32a":"data['Utilities'].fillna('AllPub', inplace=True)","b76e67a0":"le = preprocessing.LabelEncoder()\ndata['Utilities'] = le.fit_transform(data['Utilities'])\ndata","c4cf29e1":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['LotConfig'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()  ","7f8cf7c0":"data['LotConfig'].isnull().sum()","100156c2":"dum = pd.get_dummies(data['LotConfig'], prefix='LotConfig')\ndum\ndata = pd.concat([data,dum], axis=1)","56b47b84":"data.drop(columns='LotConfig', inplace=True)\ndata","cd4805af":"print(data['LandSlope'].nunique())\nprint(data['LandSlope'].isnull().sum())","5722b535":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['LandSlope'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()  ","edc5a781":"dum = pd.get_dummies(data['LandSlope'], prefix='LandSlope')\ndum\ndata = pd.concat([data,dum], axis=1)","6470733e":"data.drop(columns='LandSlope', inplace=True)\ndata","3a70293d":"print(data['Neighborhood'].nunique())\nprint(data['Neighborhood'].isnull().sum())","86ffe45f":"plt.figure(figsize=(25,5))\nax = sns.countplot(data['Neighborhood'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show() ","bebfa545":"le = preprocessing.LabelEncoder()\ndata['Neighborhood'] = le.fit_transform(data['Neighborhood'])\ndata","c7568952":"sns.countplot(data['Condition1'])","aebdbb71":"data['Condition1'] = data['Condition1'].map({'Norm':1,\n                                            'Feedr':2,\n                                            'PosN':3,\n                                            'Artery':4,\n                                            'RRAe':5,\n                                            'RRNn':6,\n                                            'RRAn':7,\n                                            'PosA':8,\n                                            'RRNe':9})","ed9c71dc":"data['Condition2'] = data['Condition2'].map({'Norm':1,\n                                            'Feedr':2,\n                                            'PosN':3,\n                                            'Artery':4,\n                                            'RRAe':5,\n                                            'RRNn':6,\n                                            'RRAn':7,\n                                            'PosA':8,})\n                                            ","206e3fcd":"print(data['BldgType'].isnull().sum())\nprint(data['BldgType'].nunique())","f08b63f0":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['BldgType'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show() ","88751199":"dum = pd.get_dummies(data['BldgType'], prefix='BldgType')\ndum\ndata = pd.concat([data,dum], axis=1)","3c597ed1":"data.drop(columns='BldgType', inplace=True)","52bddcd7":"print(data['HouseStyle'].isnull().sum())\nprint(data['HouseStyle'].nunique())","d17dc166":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['HouseStyle'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show() ","91b6b3ba":"le = preprocessing.LabelEncoder()\ndata['HouseStyle'] = le.fit_transform(data['HouseStyle'])\ndata","f297a7a6":"data['Quality'] =  data['OverallQual'] + data['OverallCond']","75c726a1":"skew(data['Quality'])","a98f9535":"data.drop(columns=['OverallQual','OverallCond'], inplace=True)","14fb295a":"data['YearBuilt'].nunique()","e67f835e":"data['Date_diff'] = data['YearRemodAdd'] - data['YearBuilt']\n\nskew(data['Date_diff'])\n","de5ea81a":"data.drop(columns=['YearBuilt','YearRemodAdd'], inplace=True)","1fc5f907":"print(data['RoofStyle'].isnull().sum())\nprint(data['RoofStyle'].nunique())","aebdea9f":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['RoofStyle'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show() ","8225f9cd":"le = preprocessing.LabelEncoder()\ndata['RoofStyle'] = le.fit_transform(data['RoofStyle'])\ndata","bb23c187":"print(data['RoofMatl'].isnull().sum())\nprint(data['RoofMatl'].nunique())","39718c14":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['RoofMatl'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","72839733":"le = preprocessing.LabelEncoder()\ndata['RoofMatl'] = le.fit_transform(data['RoofMatl'])\ndata['RoofMatl']","74c8f5f9":"print(data['Exterior1st'].isnull().sum())\nprint(data['Exterior1st'].nunique())","f29444e4":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['Exterior1st'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","0e01fcc8":"data['Exterior1st'].fillna('VinylSd', inplace=True)","7bac422a":"print(data['Exterior2nd'].isnull().sum())\nprint(data['Exterior2nd'].nunique())","fd538642":"data['Exterior2nd'].fillna('VinylSd', inplace=True)","3bb91a9c":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['Exterior2nd'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","9db0f1f7":"\n\ndata['Exterior1st'] = data['Exterior1st'].map({'AsbShng':1,\n                                              'AsphShn':2,\n                                              'BrkComm':3,\n                                              'BrkFace':4,\n                                              'CBlock':5,\n                                              'CemntBd':6,\n                                              'HdBoard':7,\n                                              'ImStucc':8,\n                                              'MetalSd':9,\n                                              'Plywood':10,\n                                              'Stone':11,\n                                              'Stucco':12,\n                                              'VinylSd':13,\n                                              'Wd Sdng':14,\n                                              'WdShing':15})\n\n\n\n\ndata['Exterior2nd'] = data['Exterior2nd'].map({'Other' :0,\n                                              'AsbShng':1,\n                                              'AsphShn':2,\n                                              'Brk Cmn':3,\n                                              'BrkFace':4,\n                                              'CBlock':5,\n                                              'CmentBd':6,\n                                              'HdBoard':7,\n                                              'ImStucc':8,\n                                              'MetalSd':9,\n                                              'Plywood':10,\n                                              'Stone':11,\n                                              'Stucco':12,\n                                              'VinylSd':13,\n                                              'Wd Sdng':14,\n                                              'Wd Shng':15})\n\ndata.iloc[:,9:].head(12)","e1f8063b":"print(data['MasVnrType'].isnull().sum())\nprint(data['MasVnrType'].nunique())","89d4187f":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['MasVnrType'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","116fdf6c":"data['MasVnrType'].fillna('None', inplace=True)\n","76a6dc9b":"dum = pd.get_dummies(data['MasVnrType'], prefix='MasVnrType', drop_first=True)\ndata = pd.concat([data,dum], axis=1)\ndata","f0a374f0":"data.drop(columns='MasVnrType', inplace=True)\n","fd4aeb8a":"print(data['MasVnrArea'].isnull().sum())\nprint(data['MasVnrArea'].nunique())","764c106c":"from sklearn.impute import KNNImputer\nimputer = KNNImputer( n_neighbors=10, metric='nan_euclidean',weights='uniform')\nx = imputer.fit_transform(data[['MasVnrArea']]) \nXtrans = imputer.transform(x)\ndata['MasVnrArea'] = Xtrans\n","21e923dd":"plt.figure(figsize=(15,5))\nsns.distplot(data['MasVnrArea'])","41fc1427":"print(skew(data['MasVnrArea']))\na = np.log1p(data['MasVnrArea'])\nskew(a)","46d67727":"data['MasVnrArea'] = np.log1p(data['MasVnrArea'])\nskew(data['MasVnrArea'])","4088d527":"print(data['ExterQual'].isnull().sum())\nprint(data['ExterQual'].nunique())","da75aca7":"print(data['ExterCond'].isnull().sum())\nprint(data['ExterCond'].nunique())","f0327273":"d = ['ExterQual','ExterCond']\nfor i in d:\n    print(i)\n    plt.figure(figsize=(15,5))\n    ax = sns.countplot(data[i])\n    for p in ax.patches:\n        h = p.get_height()\n        w = p.get_width()\/2\n        ax.text(p.get_x()+w, h+3,\n                '{:1}'.format(h),\n               ha=\"center\")\n    plt.show()","e9154ef2":"\ndata['ExterCond'] = data['ExterCond'].map({   'Po':0,\n                                              'TA':1,\n                                              'Gd':2,\n                                              'Fa':3,\n                                              'Ex':4,})\ndata['ExterQual'] = data['ExterQual'].map({   \n                                              'TA':1,\n                                              'Gd':2,\n                                              'Fa':3,\n                                              'Ex':4,})\n\ndata.iloc[:,11:].head(12)","58afbde4":"data['Exter_quality'] = data['ExterCond'] + data['ExterQual']","35e0ed5a":"data.drop(columns=['ExterCond','ExterQual'],inplace=True)","591dab1a":"print(data['Foundation'].isnull().sum())\nprint(data['Foundation'].nunique())","3db259aa":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['Foundation'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","111d75f3":"le = preprocessing.LabelEncoder()\ndata['Foundation'] = le.fit_transform(data['Foundation'])","25e458f9":"print(data['BsmtQual'].isnull().sum())\nprint(data['BsmtQual'].nunique())","5c360626":"data['BsmtQual'].fillna(0, inplace=True)","5b20a45c":"print(data['BsmtCond'].isnull().sum())\nprint(data['BsmtCond'].nunique())","0c768825":"data['BsmtCond'].fillna(0, inplace=True)","168debab":"print(data['BsmtExposure'].isnull().sum())\nprint(data['BsmtExposure'].nunique())","48ed00cb":"data['BsmtExposure'].fillna(0, inplace=True)","a0d104fb":"d = ['BsmtQual','BsmtCond','BsmtExposure']\nfor i in d:\n    print(i)\n    plt.figure(figsize=(15,5))\n    ax = sns.countplot(data[i])\n    for p in ax.patches:\n        h = p.get_height()\n        w = p.get_width()\/2\n        ax.text(p.get_x()+w, h+3,\n                '{:1}'.format(h),\n               ha=\"center\")\n    plt.show()","f61bde48":"data['BsmtExposure'] = data['BsmtExposure'].map({\n                                         'Gd':4,\n                                         'Av':3,\n                                         'Mn':2,\n                                         'No':1,\n                                          0:0,\n                                         })\ndata['BsmtCond'] = data['BsmtCond'].map({\n                                         'Gd':4,\n                                         'TA':3,\n                                         'Fa':2,\n                                         'Po':1,\n                                          0:0,\n                                         })\ndata['BsmtQual'] = data['BsmtQual'].map({'Ex':5,\n                                         'Gd':4,\n                                         'TA':3,\n                                         'Fa':2,\n                                          0:0,\n                                         })\n","b0458343":"print(data['BsmtFinType1'].isnull().sum())\nprint(data['BsmtFinType1'].nunique())","14f12aeb":"data['BsmtFinType1'].fillna(0, inplace=True)","7f2488c3":"print(data['BsmtFinType2'].isnull().sum())\nprint(data['BsmtFinType2'].nunique())","20a76696":"data['BsmtFinType2'].fillna(0, inplace=True)","634b18d5":"d = ['BsmtFinType1','BsmtFinType2']\nfor i in d:\n    print(i)\n    plt.figure(figsize=(15,5))\n    ax = sns.countplot(data[i])\n    for p in ax.patches:\n        h = p.get_height()\n        w = p.get_width()\/2\n        ax.text(p.get_x()+w, h+3,\n                '{:1}'.format(h),\n               ha=\"center\")\n    plt.show()","9b44d622":"data['BsmtFinType1'] = data['BsmtFinType1'].map({\n                        'GLQ':6,\n                        'ALQ':5,\n                        'BLQ':4,\n                        'Rec':3,\n                        'LwQ':2,\n                        'Unf':1,\n                        0:0\n                            })\n\ndata['BsmtFinType2'] = data['BsmtFinType2'].map({\n                        'GLQ':6,\n                        'ALQ':5,\n                        'BLQ':4,\n                        'Rec':3,\n                        'LwQ':2,\n                        'Unf':1,\n                        0:0\n                            })","7820e7ae":"# BsmtFinSF1, BsmtFinSF2, BsmtUnfSF lets drop them","8ca9cbd4":"data.drop(columns=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF'], inplace=True)","c5259bd7":"print(data['TotalBsmtSF'].isnull().sum())\nprint(data['TotalBsmtSF'].nunique())","c716b368":"plt.figure(figsize=(15,5))\nsns.distplot(data['TotalBsmtSF'])","b4410a39":"from sklearn.impute import KNNImputer\nimputer = KNNImputer( n_neighbors=10, metric='nan_euclidean',weights='uniform')\nx = imputer.fit_transform(data[['TotalBsmtSF']]) \nXtrans = imputer.transform(x)\nXtrans\ndata['TotalBsmtSF'] = Xtrans\n","69b78e45":"\nskew(data['TotalBsmtSF'])","d7eece0a":"print(data['Heating'].isnull().sum())\nprint(data['Heating'].nunique())","0a60cc09":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['Heating'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","9f47a6ee":"le = preprocessing.LabelEncoder()\ndata['Heating'] = le.fit_transform(data['Heating'])\n","85e24abc":"print(data['HeatingQC'].isnull().sum())\nprint(data['HeatingQC'].nunique())","6b63e986":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['HeatingQC'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","612ce578":"data['HeatingQC'] = data['HeatingQC'].map({\n                                        'Ex':5,\n                                        'Gd':4,\n                                        'TA':3,\n                                        'Fa':2,\n                                        'Po':1\n    \n})","a35cb4fa":"print(data['CentralAir'].isnull().sum())\nprint(data['CentralAir'].nunique())","4fd192e6":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['CentralAir'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","d02e5e10":"le = preprocessing.LabelEncoder()\ndata['CentralAir'] = le.fit_transform(data['CentralAir'])","81ed369c":"print(data['Electrical'].isnull().sum())\nprint(data['Electrical'].nunique())","8ebe6b9c":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['Electrical'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","1301aaad":"data['Electrical'].fillna('SBrkr', inplace=True)","66259bb4":"le = preprocessing.LabelEncoder()\ndata['Electrical'] = le.fit_transform(data['Electrical'])","212c0a21":"print(data['GrLivArea'].isnull().sum())\nprint(data['GrLivArea'].nunique())","64c2e1cb":"plt.figure(figsize=(15,5))\nsns.distplot(data['GrLivArea'])","1b9fade9":"print(skew(data['GrLivArea']))\ndata['GrLivArea'] = np.log1p(data['GrLivArea'])","96edcbd2":"skew(data['GrLivArea'])","e1c5adf4":"data.drop(columns=['1stFlrSF','2ndFlrSF','LowQualFinSF'], inplace=True)","ea89917e":"print(data['KitchenQual'].isnull().sum())\nprint(data['KitchenQual'].nunique())","c532c601":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['KitchenQual'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","7589147c":"data['KitchenQual'].fillna('TA', inplace=True)","394bbbbb":"dum = pd.get_dummies(data['KitchenQual'], prefix='KitchenQual')\ndum\ndata = pd.concat([data,dum], axis=1)\n","79b8a46c":"data.drop(columns=['KitchenQual'], inplace=True)","fe4f9e77":"print(data['Functional'].isnull().sum())\nprint(data['Functional'].nunique())","e7d45270":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['Functional'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","7a5e63a6":"data['Functional'].fillna('Typ', inplace=True)","ae8137d0":"le = preprocessing.LabelEncoder()\ndata['Functional'] = le.fit_transform(data['Functional'])","960a408c":"print(data['FireplaceQu'].isnull().sum())\nprint(data['FireplaceQu'].nunique())","22d7d821":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['FireplaceQu'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","77619417":"data['FireplaceQu'].fillna(0, inplace=True)","b8fbb566":"data['FireplaceQu'] = data['FireplaceQu'].map({\n                                            'Ex':5,\n                                            'Gd':4,\n                                            'TA':3,\n                                            'Fa':2,\n                                            'Po':1,\n                                             0:0\n                                            \n})","eb650df2":"print(data['GarageType'].isnull().sum())\nprint(data['GarageType'].nunique())","95ea4628":"data['GarageType'].fillna(0, inplace=True)","772bf262":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['GarageType'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","34b26778":"data['GarageType'] = data['GarageType'].map({\n                                            '2Types':6,\n                                            'Attchd':5,\n                                            'Basment':4,\n                                            'BuiltIn':3,\n                                            'CarPort':2,\n                                            'Detchd':1,\n                                                0:0\n})","3c74f114":"data.drop(columns='GarageYrBlt', inplace=True)","1a7ecc54":"print(data['GarageFinish'].isnull().sum())\nprint(data['GarageFinish'].nunique())","810acad7":"data['GarageFinish'].fillna('0', inplace=True)","952128e3":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['GarageFinish'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","9928f26a":"dum = pd.get_dummies(data['GarageFinish'], prefix='GarageFinish')\ndum\ndata = pd.concat([data,dum], axis=1)\n","7add5ddc":"data.drop(columns='GarageFinish', inplace=True)","81b5c7f5":"print(data['GarageArea'].isnull().sum())\nprint(data['GarageArea'].nunique())","2481df46":"data['GarageArea'].fillna(0, inplace=True)","9bc1f90a":"plt.figure(figsize=(15,5))\nsns.distplot(data['GarageArea'])","08acee8d":"print(skew(data['GarageArea']))\na = np.log1p(data['GarageArea'])\nskew(a)","e0a19f90":"print(data['GarageQual'].isnull().sum())\nprint(data['GarageQual'].nunique())","bca49aa9":"data['GarageQual'].fillna(0, inplace=True)","354d13c1":"print(data['GarageCond'].isnull().sum())\nprint(data['GarageCond'].nunique())","79d50117":"data['GarageCond'].fillna(0, inplace=True)","b99a2feb":"i = ['GarageQual','GarageCond']\n\nfor a in i:\n    print(a)\n    \n    plt.figure(figsize=(15,5))\n    ax = sns.countplot(data[a])\n    for p in ax.patches:\n        h = p.get_height()\n        w = p.get_width()\/2\n        ax.text(p.get_x()+w, h+3,\n                '{:1}'.format(h),\n               ha=\"center\")\n    plt.show()\n","e000806e":"data['GarageQual'] = data['GarageQual'].map({\n                                        'Ex':5,\n                                        'Gd':4,\n                                        'TA':3,\n                                        'Fa':2,\n                                        'Po':1,\n                                        0:0\n})\n\ndata['GarageCond'] = data['GarageCond'].map({\n                                        'Ex':5,\n                                        'Gd':4,\n                                        'TA':3,\n                                        'Fa':2,\n                                        'Po':1,\n                                        0:0\n})","c1f73014":"data['Garage_Quality'] = data['GarageQual'] + data['GarageCond']\n","a52492e8":"data.drop(columns=['GarageQual','GarageCond'], inplace=True)","6653ba1f":"print(data['PavedDrive'].isnull().sum())\nprint(data['PavedDrive'].nunique())","fc462fe5":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['PavedDrive'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()\n","699d87af":"data['PavedDrive'] = data['PavedDrive'].map({\n                                        'Y':2,\n                                        'P':1,\n                                        'N':0\n})","736c0f82":"print(data['WoodDeckSF'].isnull().sum())\nprint(data['WoodDeckSF'].nunique())","39418539":"plt.figure(figsize=(15,5))\nsns.distplot(data['WoodDeckSF'])","5ae90be5":"print(skew(data['WoodDeckSF']))\na = np.log1p(data['WoodDeckSF'])\nskew(a)","9cc5f2a6":"data['WoodDeckSF'] = np.log1p(data['WoodDeckSF'])\nskew(data['WoodDeckSF'])","62acb33a":"print(data['OpenPorchSF'].isnull().sum())\nprint(data['OpenPorchSF'].nunique())","fc47dda2":"plt.figure(figsize=(15,5))\nsns.distplot(data['OpenPorchSF'])","863a80b6":"print(skew(data['OpenPorchSF']))\na = np.log1p(data['OpenPorchSF'])\nskew(a)","69e26450":"data['OpenPorchSF'] = np.log1p(data['OpenPorchSF'])\nskew(data['OpenPorchSF'])","a5bdfbf9":"print(data['EnclosedPorch'].isnull().sum())\nprint(data['EnclosedPorch'].nunique())","e01f6e32":"data['EnclosedPorch'].plot()","f0de73b4":"print(skew(data['EnclosedPorch']))\na = np.log1p(data['EnclosedPorch'])\nskew(a)","2e638007":"data['EnclosedPorch'] = np.log1p(data['EnclosedPorch'])\nskew(data['EnclosedPorch'])","fc5482b9":"print(data['3SsnPorch'].isnull().sum())\nprint(data['3SsnPorch'].nunique())","94328f9b":"data['3SsnPorch'].plot()","90982d2e":"print(skew(data['3SsnPorch']))\na = np.log1p(data['3SsnPorch'])\n# a = np.log(a)\nskew(a)","50586e3b":"data.drop(columns=['3SsnPorch','ScreenPorch','PoolArea'], inplace=True)","c0c3e57d":"print(data['PoolQC'].isnull().sum())\nprint(data['PoolQC'].nunique())","3bc46932":"data['PoolQC'].fillna(0, inplace=True)","9c109a8c":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['PoolQC'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()\n","a4bf6c92":"data['PoolQC'] = data['PoolQC'].map({\n                                    'Ex':3,\n                                    'Gd':2,\n                                    'Fa':1,\n                                        0:0\n})","a24a6fe6":"print(data['Fence'].isnull().sum())\nprint(data['Fence'].nunique())","7c96ab7d":"data['Fence'].fillna(0, inplace=True)","a395112c":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['Fence'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()\n","829b30a5":"data['Fence'] = data['Fence'].map({\n                                'GdPrv':4,\n                                'MnPrv':3,\n                                'GdWo':2,\n                                'MnWw':1,\n                                0:0\n})","761e6a84":"print(data['MiscFeature'].isnull().sum())\nprint(data['MiscFeature'].nunique())","31419aad":"data['MiscFeature'].fillna(0, inplace=True)","26b2678b":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['MiscFeature'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()\n","58fdc3dc":"data['MiscFeature'] = data['MiscFeature'].map({\n                                            'Gar2':1,\n                                            'Othr':1,\n                                            'Shed':1,\n                                            'TenC':1,\n                                                0:0\n    \n                                            \n})","1ef8bdaf":"print(data['MiscVal'].isnull().sum())\nprint(data['MiscVal'].nunique())","45db110b":"data['MiscVal'].plot()","eff6ace2":"print(skew(data['MiscVal']))\na = np.log1p(data['MiscVal'])\nskew(a)","5c1b38ff":"data['MiscVal'] = np.log1p(data['MiscVal'])\nskew(data['MiscVal'])","2a46847d":"print(data['SaleType'].isnull().sum())\nprint(data['SaleType'].nunique())","cfffacfc":"\nplt.figure(figsize=(15,5))\nax = sns.countplot(data['SaleType'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()\n","cb53eada":"data['SaleType'].fillna('WD', inplace=True)","c04449a4":"le = preprocessing.LabelEncoder()\ndata['SaleType'] = le.fit_transform(data['SaleType'])","c300e0f5":"print(data['SaleCondition'].isnull().sum())\nprint(data['SaleCondition'].nunique())","54998dca":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['SaleCondition'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","7357e652":"le = preprocessing.LabelEncoder()\ndata['SaleCondition'] = le.fit_transform(data['SaleCondition'])","b5f1067e":"print(data['BsmtFullBath'].isnull().sum())\nprint(data['BsmtFullBath'].nunique())\n\n","156facba":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['BsmtFullBath'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","4845636b":"data['BsmtFullBath'].fillna(0, inplace=True)","d4b88f5c":"print(data['BsmtHalfBath'].isnull().sum())\nprint(data['BsmtHalfBath'].nunique())\n\n","3a297baa":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['BsmtHalfBath'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","6d2b4b4b":"data['BsmtHalfBath'].fillna(1, inplace=True)","91020d69":"\nprint(data['GarageCars'].isnull().sum())\nprint(data['GarageCars'].nunique())\n\n","5f204c42":"plt.figure(figsize=(15,5))\nax = sns.countplot(data['GarageCars'])\nfor p in ax.patches:\n    h = p.get_height()\n    w = p.get_width()\/2\n    ax.text(p.get_x()+w, h+3,\n            '{:1}'.format(h),\n           ha=\"center\")\nplt.show()","4db794a4":"data['GarageCars'].fillna(2, inplace=True)","442c9657":"data","69ae98f2":"data.info()\n  ","40fd1475":"train_data = data.iloc[:train.shape[0]]","825aa059":"train_data['SalePrice'].tail()","ad33cf2c":"test_data = data.iloc[train.shape[0]:]\ntest_data['SalePrice'].head()","b6384649":"plt.figure(figsize=(15,5))\nsns.distplot(train_data['SalePrice'])","5e2c3408":"print(skew(train_data['SalePrice']))\na = np.log1p(train_data['SalePrice'])\nskew(a)","4becdd8a":"train_data['SalePrice'] = np.log1p(train_data['SalePrice'])\nskew(train_data['SalePrice'])","7e41f9e5":"train_data.to_csv('Train_data.csv' )\ntest_data.to_csv('Test_data.csv')","71497c54":"train_data","f2818ce3":"\nX=train_data.drop(['Id','SalePrice'],1)\ny=train_data['SalePrice']\ntest_data=test_data.drop(['Id','SalePrice'],1)\n","60b582ea":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=7)\n","408e63a9":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate =0.01,\n n_estimators=5000,\n max_depth=10,\n gamma=0.1,\n colsample_bytree=0.8,\n seed=100,\n eval_metric='rmse'\n )\nmodel_2.fit(X_train, y_train, eval_metric='rmse', \n          eval_set=[(X_test, y_test)], early_stopping_rounds=500, verbose=100)","86618d05":"xgb = XGBRegressor(\n learning_rate =0.01,\n n_estimators=3897,\n max_depth=10,\n gamma=0.1,\n colsample_bytree=0.8,\n seed=100,\n eval_metric='rmse'\n )\n\nxgb_model=xgb.fit(X,y)","be2992ec":"y_pred1=xgb.predict(test_data)","837a5044":"y_pred1=np.expm1(y_pred1)","a536e14d":"y_pred1","d34c132d":"from lightgbm import LGBMRegressor\nlgb_fit_params={\"early_stopping_rounds\":500, \n            \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(X_test,y_test)],\n            'eval_names': ['valid'],\n            'verbose':100\n           }\n\nlgb_params = {'boosting_type': 'gbdt',\n 'objective': 'regression',\n 'metric': 'rmse',\n 'verbose': 0,\n 'bagging_fraction': 0.8,\n 'bagging_freq': 1,\n 'lambda_l1': 0.01,\n 'lambda_l2': 0.01,\n 'learning_rate': 0.001,\n 'max_bin': 255,\n 'max_depth': 9,\n 'min_data_in_bin': 1,\n 'min_data_in_leaf': 1,\n 'num_leaves': 31}\nlgb_params","3e214af2":"clf_lgb = LGBMRegressor(n_estimators=10000, **lgb_params, random_state=123456789, n_jobs=-1)\nclf_lgb.fit(X_train, y_train, **lgb_fit_params)\nclf_lgb.best_iteration_","2362852c":"clf_lgb=LGBMRegressor(n_estimators=int(clf_lgb.best_iteration_*1.2), **lgb_params)\nlgb_model=clf_lgb.fit(X, y)\n","140a0488":"y_pred2=lgb_model.predict(test_data)","0b67255b":"y_pred2=np.expm1(y_pred2)","06012b01":"y_pred2","9226bf46":"y_pred=(0.6*y_pred1)+(y_pred2*0.4)\ny_pred","1370e38c":"sub.head()","ce291309":"sub['SalePrice'] = y_pred","7e77a682":"sub.to_csv('submission.csv')","edb0c0c6":"from sklearn.linear_model import ElasticNet\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import make_pipeline\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","e745af7f":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","aa88def4":"score = rmsle_cv(ENet)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","e880c83d":"from sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom math import sqrt \nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\n\nerrrf = []\ny_pred_totrf = []\n\nfold = KFold(n_splits=15, shuffle=True, random_state=42)\n\nfor train_index, test_index in fold.split(X):\n    X_train, X_test = X.loc[train_index], X.loc[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    rf = RandomForestRegressor(random_state=42, n_estimators=200)\n    rf.fit(X_train, y_train)\n\n    y_pred_rf = rf.predict(X_test)\n    print(\"RMSLE: \", sqrt(mean_squared_log_error(np.exp(y_test), np.exp(y_pred_rf))))\n\n    errrf.append(sqrt(mean_squared_log_error(np.exp(y_test), np.exp(y_pred_rf))))\n    p = rf.predict(test_data)\n    y_pred_totrf.append(p)","9d9fb9fb":"final = np.exp(np.mean(y_pred_totrf,0))\n","883263d5":"sub['SalePrice'] = y_pred","2ad6b99c":"sub.to_csv('submission.csv')","9ae1ff7d":"**few columns need  to drop**","ff542d42":"**MasVnrType column**","05da26f8":"**KitchenQual column**","8f1996c0":"**EnclosedPorch column**","a3122d5e":"BsmtHalfBath column","cf558a52":"**Removing outlier**","6ab9d5da":"**3SsnPorch column**","191cedc8":"**LotShape column**","233f6196":"**here we will do label encoding instead of one hot encoding**","937f246f":"SaleType column","8044deed":"**Neighborhood column**","d2b8c75b":"BsmtFullBath column","25270ceb":"**Exterior1st column**","6be37b6d":"***OpenPorchSF column***","a8f4fe1a":"****Condition1 column****","9735e6fb":"# #Done with all columns not lets start with model building ","35da7c63":"**MasVnrArea column**","afb7d00b":"**Electrical column**","03c44e55":"**GarageArea column**","d5ed5f10":"as data is highly skewed so i decided to remover these three column 3SsnPorch, ScreenPorch, PoolArea","3ed265c4":"****RoofStyle column****","10dd7f81":"**GarageQual column**","ddfb8cbd":"**RoofMatl column**","9b51ddf3":"**As it contain many null values, so we will drop this column**","6599a98c":"GarageYrBlt column","7d38b037":"**MiscVal column**","03f715a5":"**LandContour column**","a756bbf3":"**Third column**","e9681677":"*WoodDeckSF column*","553a0b26":"**GrLivArea Column**","4a07c347":"**GarageType column**","2bdb4c66":"**SaleCondtion column**","0420620e":"MiscFeature column","40e64ec1":"**so we divided train and test data **","9043bd69":"**LandSlope column**","c6463c92":"***Utilities column***","6c0193b0":"Fence column","bb736ba0":"# lets map these value using label encoder","90f5293f":"GarageCars column","0820309d":"**LotConfig column**","2b9d5264":"**Foundation column**","d0e12125":"**let us combine both model predictions**","7cc72e56":"**GarageFinish column**","bf05d597":"PoolQC column","12028547":"**as skew value imporver after regularization so we will do log operation**","c7ab26a4":"**Alley column**","e5558825":"**Heating column**","d978f66c":"**HeatingQC column**","a048b61a":"****ExterQual column","e0b927a4":"**Second column**","15f971dc":"**BldgType column**","8737c197":"**PavedDrive column**","26f0fe73":"****Data is highly skewed****","15ed6422":"***Street column***","f8e536ba":"Functional column","80111ca1":"**TotalBsmtSF column**","99a175da":"as skew value in normal so no need of normalization","d54d3483":"**CentralAir column**","56972598":"# We will deal with one column at a time","07565003":"**Lets create dummy classes for this column**","697ceb16":"**HouseStyle column**","643a6566":"let use LGBM AS WELL ","20d132ef":"**Lets us combine our train and test dataset**"}}