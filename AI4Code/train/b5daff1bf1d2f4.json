{"cell_type":{"98e7f30c":"code","4fd3e709":"code","1da8a0ea":"code","3bf3ebb4":"code","4980a585":"code","5bc1caa5":"code","bef8312f":"code","dc2837e6":"code","76ab6b3d":"markdown","78811a9e":"markdown","ce1a64d7":"markdown","829c58e8":"markdown"},"source":{"98e7f30c":"import pandas as pd\nimport featuretools as ft","4fd3e709":"df_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949', dtype={'goods_id': 'category'})\ndf_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949', dtype={'goods_id': 'category'})\n# Assign a unique ID for each transaction \ndf = pd.concat([df_train, df_test]).reset_index(drop=True).reset_index().rename(columns={'index': 'trans_id'})\ndf.head()","1da8a0ea":"# A dataframe to create a feature matrix for each customer \ncu = pd.DataFrame({'cust_id': df.cust_id.unique()})\n\n# Specify a dictionary with all the entities\nentities = {\n    \"cust\": (cu, \"cust_id\"),\n    \"trans\": (df, \"trans_id\")\n}\n\n# Specify how the entities are related\nrelationships = [\n    (\"cust\", \"cust_id\", \"trans\", \"cust_id\")\n]","3bf3ebb4":"derived_features, _ = ft.dfs(entities=entities, relationships=relationships, target_entity=\"cust\")","4980a585":"derived_features.info()","5bc1caa5":"# One-hot encoding for categorical features\nderived_features.drop(['MODE(trans.goods_id)'], axis=1, inplace=True)\nderived_features = pd.get_dummies(derived_features).reset_index()\n\n# Fill NA\nderived_features.fillna(0, inplace=True)\n\n# Split Data\nX_train = pd.DataFrame({'cust_id': df_train.cust_id.unique()})\nX_train = pd.merge(X_train, derived_features, how='left')\n\nX_test = pd.DataFrame({'cust_id': df_test.cust_id.unique()})\nX_test = pd.merge(X_test, derived_features, how='left')\n\n# Remove unnecessary features\nIDtest = X_test.cust_id;\nX_train.drop(['cust_id'], axis=1, inplace=True)\nX_test.drop(['cust_id'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","bef8312f":"# Learn XGB\nfrom xgboost import XGBClassifier\nimport sys, warnings\nif not sys.warnoptions: warnings.simplefilter(\"ignore\")\n\nmodel = XGBClassifier(random_state=0, n_jobs=-1)\nmodel.fit(X_train, y_train)","dc2837e6":"pred = model.predict_proba(X_test)[:,1]\nfname = 'submission.csv'\nsubmissions = pd.concat([IDtest, pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","76ab6b3d":"### Run Deep Feature Synthesis","78811a9e":"### Prepare data","ce1a64d7":"### Imports","829c58e8":"### Read Data"}}