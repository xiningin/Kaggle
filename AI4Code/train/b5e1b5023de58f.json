{"cell_type":{"33754d5b":"code","b9e7d99a":"code","97ef61f8":"code","241ee8d2":"code","e6f1c8ca":"code","8cbc511c":"code","11ec71d6":"code","3a70cf6e":"code","f7cab270":"code","ddfdedbe":"code","1e490f0e":"code","af568490":"code","4df1c9b3":"code","d3cef542":"code","236254ba":"code","65cacb60":"code","2a136c8c":"code","46a34a22":"code","e0a49fb2":"code","7b0b7f13":"code","68d770d4":"code","1229e53b":"code","30302928":"code","75a1b0ab":"code","3e9e35e7":"code","f3ec059a":"code","ff5614d0":"code","d3748016":"code","95b46ce2":"code","ef4ed6c1":"code","5952e917":"code","c6da1d3f":"code","813b83b6":"code","7301cb48":"code","9ac73b84":"code","1fc9e65c":"code","879e29ef":"code","f98fd1ff":"code","24b50b59":"code","1405b2cf":"code","1557273f":"code","8c355d40":"code","9eba1968":"code","a41f67fe":"code","6f8d1ed0":"code","51b5f5d5":"code","8652b781":"code","c2a3436e":"code","d0b336f3":"code","e9960886":"code","91ccfb91":"code","1b986a52":"code","4f23e2c1":"code","b0307514":"code","68262e3d":"code","28add951":"code","7b0caf3b":"code","853f9683":"code","0dd8f933":"code","d25d4951":"code","17dac44e":"code","7f02ca8a":"code","95344b57":"code","a3c2c3d8":"code","0c6b1d07":"code","8de452c0":"code","6ce8d44c":"code","162ae27b":"code","19f36907":"code","bb81c455":"code","66d07dae":"code","b94b3bae":"code","a45cc84d":"code","45c83149":"code","0b70fd88":"code","99d8d94b":"code","97cdf98c":"code","5a075b2e":"code","2950edb5":"code","a05a188e":"code","70ee1d82":"code","fe40f5ce":"code","e7f09f57":"code","aeb455a5":"code","94d2f04f":"code","2404700b":"code","d479de63":"code","da9caadd":"code","00a92398":"code","66f79d76":"code","fe1dffb8":"code","ff2ec691":"code","f2e7d63a":"code","b41c04fe":"code","318681a3":"code","d2707ff0":"code","8865da2a":"code","715e25fc":"code","1042a1c3":"code","0bf3539c":"code","31350cf6":"code","a24f2aad":"code","b7fade3b":"code","380176df":"code","65d69b70":"code","ecf1c46f":"code","c9aaffa5":"code","600815ba":"code","0c6b92d0":"code","a4790a38":"code","840eda5c":"code","5ecb06e7":"code","e10f93e1":"code","a29b5759":"code","0212ff6f":"code","fcc3a4ac":"code","7d3be4f8":"code","25871594":"code","f50be033":"code","bfaf819b":"code","a6773069":"code","076edd2f":"code","5c94dce4":"code","0a19fdb7":"markdown","da67d608":"markdown","0577cbb0":"markdown","8fcbb31e":"markdown","51fc1031":"markdown","37393a7b":"markdown","fe2f5911":"markdown","385bba7b":"markdown","77067889":"markdown","894abd31":"markdown","659b6c12":"markdown","484616cd":"markdown","33008f67":"markdown","f9556f2f":"markdown","6cbf2748":"markdown","289a9ab8":"markdown","dd6b9b91":"markdown","956ade49":"markdown","6880b485":"markdown","80a040a0":"markdown","4fbdfeda":"markdown","a7784995":"markdown","fd86211d":"markdown","9b7a629a":"markdown","9031841d":"markdown","73c8b045":"markdown","adfd33ae":"markdown","2591e462":"markdown","136829f1":"markdown","bee0f62a":"markdown","ae6f54bb":"markdown","a75fea92":"markdown","4731dee3":"markdown","f302c511":"markdown","ddbba366":"markdown","d70f4a91":"markdown","d672e018":"markdown","3cc81b89":"markdown","2e7a6555":"markdown","583ab09e":"markdown","fa225e87":"markdown","6a401318":"markdown","47905885":"markdown","45479648":"markdown","4b0ee8e3":"markdown","653a0fd5":"markdown","4ecb8648":"markdown","bd1d9627":"markdown","0d32df85":"markdown","10f11793":"markdown","199b096a":"markdown","79083fd3":"markdown","25a97410":"markdown","e4f63936":"markdown","24c3e8d4":"markdown","06d50f46":"markdown","75fab479":"markdown","01c21c03":"markdown","f7a159b4":"markdown","a6b10f72":"markdown","a54c77ec":"markdown","60cbcd4d":"markdown","506eb13f":"markdown","e2c3c410":"markdown","35eb6544":"markdown","a80bbc69":"markdown","64b05a32":"markdown","c04f16ef":"markdown","ece7fedd":"markdown","438f2294":"markdown","2d968f8e":"markdown","dd6a355e":"markdown","953de2c5":"markdown","c4e65a3d":"markdown","35e50166":"markdown","03c53436":"markdown"},"source":{"33754d5b":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\n# from plotly import plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\nfrom collections import Counter","b9e7d99a":"project_data = pd.read_csv('..\/input\/train_data.csv')\nresource_data = pd.read_csv('..\/input\/resources.csv')","97ef61f8":"project_data.shape","241ee8d2":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","e6f1c8ca":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(2)","8cbc511c":"project_data.isnull().values.any()","11ec71d6":"# check where are nan values pandas ## https:\/\/dzone.com\/articles\/pandas-find-rows-where-columnfield-is-null\nnull_columns=project_data.columns[project_data.isnull().any()]\nproject_data[null_columns].isnull().sum()","3a70cf6e":"# Since project_essay_3 and project_essay_4 are unavailable for later so we drop only techer_prefix's null value rows\nproject_data.dropna(subset=['teacher_prefix'], inplace=True)\nproject_data.shape","f7cab270":"# PROVIDE CITATIONS TO YOUR CODE IF YOU TAKE IT FROM ANOTHER WEBSITE.\n# https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py\n\n\ny_value_counts = project_data['project_is_approved'].value_counts()\nprint(\"Number of projects thar are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of projects thar are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\nrecipe = [\"Accepted\", \"Not Accepted\"]\n\ndata = [y_value_counts[1], y_value_counts[0]]\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                 horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Nmber of projects that are Accepted and not accepted\")\n\nplt.show()","ddfdedbe":"# Pandas dataframe groupby count, mean: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n\ntemp = pd.DataFrame(project_data.groupby(\"school_state\")[\"project_is_approved\"].apply(np.mean)).reset_index()\n# if you have data which contain only 0 and 1, then the mean = percentage (think about it)\ntemp.columns = ['state_code', 'num_proposals']\n\n'''# How to plot US state heatmap: https:\/\/datascience.stackexchange.com\/a\/9620\n\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = temp['state_code'],\n        z = temp['num_proposals'].astype(float),\n        locationmode = 'USA-states',\n        text = temp['state_code'],\n        marker = dict(line = dict (color = 'rgb(255,255,255)',width = 2)),\n        colorbar = dict(title = \"% of pro\")\n    ) ]\n\nlayout = dict(\n        title = 'Project Proposals % of Acceptance Rate by US States',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)',\n        ),\n    )\n\nfig = go.Figure(data=data, layout=layout)\noffline.iplot(fig, filename='us-map-heat-map')\n'''","1e490f0e":"# https:\/\/www.csi.cuny.edu\/sites\/default\/files\/pdf\/administration\/ops\/2letterstabbrev.pdf\ntemp.sort_values(by=['num_proposals'], inplace=True)\nprint(\"States with lowest % approvals\")\nprint(temp.head(5))\nprint('='*50)\nprint(\"States with highest % approvals\")\nprint(temp.tail(5))","af568490":"#stacked bar plots matplotlib: https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/bar_stacked.html\ndef stack_plot(data, xtick, col2='project_is_approved', col3='total'):\n    ind = np.arange(data.shape[0])\n    \n    plt.figure(figsize=(20,5))\n    p1 = plt.bar(ind, data[col3].values)\n    p2 = plt.bar(ind, data[col2].values)\n\n    plt.ylabel('Projects')\n    plt.title('Number of projects aproved vs rejected')\n    plt.xticks(ind, list(data[xtick].values))\n    plt.legend((p1[0], p2[0]), ('total', 'accepted'))\n    plt.show()","4df1c9b3":"def univariate_barplots(data, col1, col2='project_is_approved', top=False):\n    # Count number of zeros in dataframe python: https:\/\/stackoverflow.com\/a\/51540521\/4084039\n    temp = pd.DataFrame(project_data.groupby(col1)[col2].agg(lambda x: x.eq(1).sum())).reset_index()\n\n    # Pandas dataframe grouby count: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n    temp['total'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'total':'count'})).reset_index()['total']\n    temp['Avg'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'Avg':'mean'})).reset_index()['Avg']\n    \n    temp.sort_values(by=['total'],inplace=True, ascending=False)\n    \n    if top:\n        temp = temp[0:top]\n    \n    stack_plot(temp, xtick=col1, col2=col2, col3='total')\n    print(temp.head(5))\n    print(\"=\"*50)\n    print(temp.tail(5))","d3cef542":"univariate_barplots(project_data, 'school_state', 'project_is_approved', False)","236254ba":"univariate_barplots(project_data, 'teacher_prefix', 'project_is_approved' , top=False)","65cacb60":"univariate_barplots(project_data, 'project_grade_category', 'project_is_approved', top=False)","2a136c8c":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())","46a34a22":"project_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\nproject_data.head(2)","e0a49fb2":"univariate_barplots(project_data, 'clean_categories', 'project_is_approved', top=20)","7b0b7f13":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())","68d770d4":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved category wise')\nplt.xticks(ind, list(sorted_cat_dict.keys()))\nplt.show()","1229e53b":"for i, j in sorted_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","30302928":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())","75a1b0ab":"project_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\nproject_data.head(2)","3e9e35e7":"univariate_barplots(project_data, 'clean_subcategories', 'project_is_approved', top=50)","f3ec059a":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())","ff5614d0":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_sub_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_sub_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved state wise')\nplt.xticks(ind, list(sorted_sub_cat_dict.keys()))\nplt.show()","d3748016":"for i, j in sorted_sub_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","95b46ce2":"#How to calculate number of words in a string in DataFrame: https:\/\/stackoverflow.com\/a\/37483537\/4084039\nword_count = project_data['project_title'].str.split().apply(len).value_counts()\nword_dict = dict(word_count)\nword_dict = dict(sorted(word_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(word_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(word_dict.values()))\n\nplt.ylabel('Numeber of projects')\nplt.xlabel('Numeber words in project title')\nplt.title('Words for each title of the project')\nplt.xticks(ind, list(word_dict.keys()))\nplt.show()","ef4ed6c1":"approved_title_word_count = project_data[project_data['project_is_approved']==1]['project_title'].str.split().apply(len)\napproved_title_word_count = approved_title_word_count.values\n\nrejected_title_word_count = project_data[project_data['project_is_approved']==0]['project_title'].str.split().apply(len)\nrejected_title_word_count = rejected_title_word_count.values","5952e917":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_title_word_count, rejected_title_word_count])\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project title')\nplt.grid()\nplt.show()","c6da1d3f":"plt.figure(figsize=(10,3))\nsns.kdeplot(approved_title_word_count,label=\"Approved Projects\", bw=0.6)\nsns.kdeplot(rejected_title_word_count,label=\"Not Approved Projects\", bw=0.6)\nplt.legend()\nplt.show()","813b83b6":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","7301cb48":"approved_word_count = project_data[project_data['project_is_approved']==1]['essay'].str.split().apply(len)\napproved_word_count = approved_word_count.values\n\nrejected_word_count = project_data[project_data['project_is_approved']==0]['essay'].str.split().apply(len)\nrejected_word_count = rejected_word_count.values","9ac73b84":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_word_count, rejected_word_count])\nplt.title('Words for each essay of the project')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project essays')\nplt.grid()\nplt.show()","1fc9e65c":"plt.figure(figsize=(10,3))\nsns.distplot(approved_word_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_word_count, hist=False, label=\"Not Approved Projects\")\nplt.title('Words for each essay of the project')\nplt.xlabel('Number of words in each eassay')\nplt.legend()\nplt.show()","879e29ef":"# we get the cost of the project using resource.csv file\nresource_data.head(2)","f98fd1ff":"# https:\/\/stackoverflow.com\/questions\/22407798\/how-to-reset-a-dataframes-indexes-for-all-groups-in-one-step\nprice_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprice_data.head(5)","24b50b59":"# join two dataframes in python: \nproject_data = pd.merge(project_data, price_data, on='id', how='left')","1405b2cf":"approved_price = project_data[project_data['project_is_approved']==1]['price'].values\n\nrejected_price = project_data[project_data['project_is_approved']==0]['price'].values","1557273f":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_price, rejected_price])\nplt.title('Box Plots of Cost per approved and not approved Projects')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Price')\nplt.grid()\nplt.show()","8c355d40":"plt.figure(figsize=(10,3))\nsns.distplot(approved_price, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_price, hist=False, label=\"Not Approved Projects\")\nplt.title('Cost per approved and not approved Projects')\nplt.xlabel('Cost of a project')\nplt.legend()\nplt.show()","9eba1968":"# http:\/\/zetcode.com\/python\/prettytable\/\nfrom prettytable import PrettyTable\n\n#If you get a ModuleNotFoundError error , install prettytable using: pip3 install prettytable\n\nx = PrettyTable()\nx.field_names = [\"Percentile\", \"Approved Projects\", \"Not Approved Projects\"]\n\nfor i in range(0,101,5):\n    x.add_row([i,np.round(np.percentile(approved_price,i), 3), np.round(np.percentile(rejected_price,i), 3)])\nprint(x)","a41f67fe":"univariate_barplots(project_data, 'teacher_number_of_previously_posted_projects', 'project_is_approved', top=50)","6f8d1ed0":"approved_project_count = project_data[project_data['project_is_approved']==1]['teacher_number_of_previously_posted_projects'].values\nrejected_project_count = project_data[project_data['project_is_approved']==0]['teacher_number_of_previously_posted_projects'].values\n\n# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.figure(figsize=(10,7))\nplt.boxplot([approved_project_count, rejected_project_count])\nplt.title('Box Plots of teacher_number_of_previously_posted_projects per approved and not approved Projects')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('teacher_number_of_previously_posted_projects')\nplt.suptitle(\"Box Plot\",y=1.0, fontsize=18)\nplt.grid()\nplt.show()","51b5f5d5":"plt.figure(figsize=(10,5))\nsns.distplot(approved_project_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_project_count, hist=False, label=\"Not Approved Projects\")\nplt.title('teacher_number_of_previously_posted_projects per approved and not approved Projects')\nplt.xlabel('teacher_number_of_previously_posted_projects')\nplt.suptitle(\"PDF Plot\",y=1.0, fontsize=18)\nplt.legend()\nplt.show()","8652b781":"rejected_word_count = project_data[project_data['project_is_approved']==0]['project_resource_summary'].str.split().apply(len)\nrejected_word_count = rejected_word_count.values\n\napproved_word_count = project_data[project_data['project_is_approved']==1]['project_resource_summary'].str.split().apply(len)\napproved_word_count = approved_word_count.values\n\n# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_word_count, rejected_word_count])\nplt.title('Words for each project resource summary')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project resource summary')\nplt.grid()\nplt.show()","c2a3436e":"plt.figure(figsize=(10,5))\nsns.distplot(approved_word_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_word_count, hist=False, label=\"Not Approved Projects\")\nplt.title('Words for each project resource summary per approved and not approved Projects')\nplt.xlabel('Words in project resource summary')\nplt.suptitle(\"PDF Plot\",y=1.0, fontsize=18)\nplt.legend()\nplt.show()","d0b336f3":"number_of_digits_in_approved = 0\nnumber_of_no_digit_in_approved = 0\nnumber_of_digits_in_not_approved = 0\nnumber_of_no_digit_in_not_approved = 0\ndigit_in_summary = []\n\nfor i in range(len(project_data)):\n# for i in range(100):\n    str = (project_data.loc[i][\"project_resource_summary\"])\n    x = [int(s) for s in str.split() if s.isdigit()]\n    if (x):\n        digit_in_summary.append(1)\n        if ((project_data.loc[i][\"project_is_approved\"] == 1)):\n            number_of_digits_in_approved += 1\n        else:\n            number_of_digits_in_not_approved += 1            \n    else:\n        digit_in_summary.append(0)\n        if ((project_data.loc[i][\"project_is_approved\"] == 1)):\n            number_of_no_digit_in_approved +=1\n        else:\n            number_of_no_digit_in_not_approved += 1\n\nprint(\"When Digits Present : \")\nprint(\"Approved : \", number_of_digits_in_approved)\nprint(\"Not Approved : \", number_of_digits_in_not_approved)\nprint(\"Total with Digits : \", number_of_digits_in_approved + number_of_digits_in_not_approved)\nprint(\"Ratio of Approval with Digits : \", number_of_digits_in_approved\/ (number_of_digits_in_approved + number_of_digits_in_not_approved))\nprint(\"\\nWhen Digits Not Present : \")\nprint(\"Approved : \", number_of_no_digit_in_approved)\nprint(\"Not Approved : \", number_of_no_digit_in_not_approved)\nprint(\"Total with No Digits : \", number_of_no_digit_in_approved + number_of_no_digit_in_not_approved)\nprint(\"Ratio of Approval with No Digits : \", number_of_no_digit_in_approved\/ (number_of_no_digit_in_approved + number_of_no_digit_in_not_approved))\nprint(\"Total : \", len(project_data))","e9960886":"# https:\/\/pythonspot.com\/matplotlib-bar-chart\/\n# data to plot\nn_groups = 2\napp = (number_of_digits_in_approved, number_of_no_digit_in_approved)\nnoapp = (number_of_digits_in_not_approved, number_of_no_digit_in_not_approved)\n\n# create plot\nfig, ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.35\nopacity = 0.8\n\nrects1 = plt.bar(index, app, bar_width,\nalpha=opacity,\ncolor='g',\nlabel='Approved')\n\nrects2 = plt.bar(index + bar_width, noapp, bar_width,\nalpha=opacity,\ncolor='r',\nlabel='Not Approved')\n\nplt.xlabel('Digits')\nplt.ylabel('Count of projects')\nplt.title('Scores by Digit present and Appooval')\nplt.xticks(index + bar_width - .17 , ('Digits Present', 'Digits Not Present'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","91ccfb91":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nlabels = ['% of Project Approved When Digit Present','% of Project Approved When Digit Not Present']\napproved_ratio_digit_present = number_of_digits_in_approved\/ (number_of_digits_in_approved + number_of_digits_in_not_approved)\napproved_ratio_digit_not_present = number_of_no_digit_in_approved\/ (number_of_no_digit_in_approved + number_of_no_digit_in_not_approved)\nvalues = [approved_ratio_digit_present, approved_ratio_digit_not_present]\ntrace = go.Pie(labels=labels, values=values)\noffline.iplot([trace], filename='basic_pie_chart')","1b986a52":"project_data.insert(20, \"Digits_in_summary\", digit_in_summary)\nproject_data.head(3)","4f23e2c1":"project_data.head(2)","b0307514":"# printing some random essays.\nprint(project_data['essay'].values[0])\nprint(\"=\"*50)\nprint(project_data['essay'].values[150])\nprint(\"=\"*50)\nprint(project_data['essay'].values[1000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[20000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[99999])\nprint(\"=\"*50)\n","68262e3d":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","28add951":"sent = decontracted(project_data['essay'].values[20000])\nprint(sent)\nprint(\"=\"*50)","7b0caf3b":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","853f9683":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","0dd8f933":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","d25d4951":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['essay'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())","17dac44e":"# after preprocesing\npreprocessed_essays[20000]","7f02ca8a":"project_data.head(2)\n\n# printing some random title.\nprint(project_data['project_title'].values[0])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[150])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[1000])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[20000])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[99999])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[100])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[1150])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[10100])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[40000])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[92999])\nprint(\"=\"*50)\n","95344b57":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())","a3c2c3d8":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_project_title = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_project_title.append(sent.lower().strip())","0c6b1d07":"# after preprocesing\npreprocessed_project_title[1150]","8de452c0":"project_data.columns","6ce8d44c":"# we use count vectorizer to convert the values into one hot encoded features\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['clean_categories'].values)\nprint(vectorizer.get_feature_names())\n\ncategories_one_hot = vectorizer.transform(project_data['clean_categories'].values)\nprint(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\n# print(categories_one_hot.toarray())\n# print(categories_one_hot)","162ae27b":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_sub_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['clean_subcategories'].values)\nprint(vectorizer.get_feature_names())\n\n\nsub_categories_one_hot = vectorizer.transform(project_data['clean_subcategories'].values)\nprint(\"Shape of matrix after one hot encodig \",sub_categories_one_hot.shape)\n# print(sub_categories_one_hot.toarray())","19f36907":"project_data[\"school_state\"] = project_data[\"school_state\"].str.strip()\nproject_data[\"school_state\"] = project_data[\"school_state\"].str.replace(' ', '')","bb81c455":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['school_state'].values:\n    my_counter.update(word.split())","66d07dae":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nstate_dict = dict(my_counter)\nsorted_state_dict = dict(sorted(state_dict.items(), key=lambda kv: kv[1]))","b94b3bae":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_state_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['school_state'].values)\nprint(vectorizer.get_feature_names())\n\nschool_state_one_hot = vectorizer.transform(project_data['school_state'].values)\nprint(\"Shape of matrix after one hot encodig \",school_state_one_hot.shape)\n# print(school_state_one_hot.toarray())\n# print(school_state_one_hot)","a45cc84d":"# remove dot from pandas column ## https:\/\/www.reddit.com\/r\/learnpython\/comments\/5ktuhv\/how_do_i_remove_commas_from_data_frame_column\/\nproject_data[\"teacher_prefix\"] = project_data[\"teacher_prefix\"].str.replace(\".\",\"\")","45c83149":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['teacher_prefix'].values:\n    my_counter.update(word.split())","0b70fd88":"print (my_counter)","99d8d94b":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nteacher_prefix_dict = dict(my_counter)\nsorted_teacher_prefix_dict = dict(sorted(teacher_prefix_dict.items(), key=lambda kv: kv[1]))","97cdf98c":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_teacher_prefix_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['teacher_prefix'].values)\nprint(vectorizer.get_feature_names())\n\nteacher_prefix_one_hot = vectorizer.transform(project_data['teacher_prefix'].values)\nprint(\"Shape of matrix after one hot encodig \",teacher_prefix_one_hot.shape)\n# print(teacher_prefix_one_hot.toarray())","5a075b2e":"project_data[\"project_grade_category\"] = project_data[\"project_grade_category\"].str.replace(\" \",\"_\")\nproject_data[\"project_grade_category\"] = project_data[\"project_grade_category\"].str.replace(\"-\",\"_\")","2950edb5":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\n# https:\/\/stackoverflow.com\/questions\/45340785\/update-counter-collection-in-python-with-string-not-letter\nmy_counter = Counter()\nfor word in project_data['project_grade_category'].values:\n#     print(word)\n    my_counter.update({word:1})","a05a188e":"print(my_counter)","70ee1d82":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nproject_grade_category_dict = dict(my_counter)\nsorted_project_grade_category_dict = dict(sorted(project_grade_category_dict.items(), key=lambda kv: kv[1]))","fe40f5ce":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_project_grade_category_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['project_grade_category'].values.astype('U'))\nprint(vectorizer.get_feature_names())\n\n# https:\/\/stackoverflow.com\/questions\/39303912\/tfidfvectorizer-in-scikit-learn-valueerror-np-nan-is-an-invalid-document\n# You need to convert the dtype object to unicode string as is clearly mentioned in the traceback.\n# x = v.fit_transform(df['Review'].values.astype('U'))  ## Even astype(str) would work\n\nproject_grade_category_one_hot = vectorizer.transform(project_data['project_grade_category'].values)\nprint(\"Shape of matrix after one hot encodig \",project_grade_category_one_hot.shape)\n# print(project_grade_category_one_hot.toarray())","e7f09f57":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10)\ntext_bow = vectorizer.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix after one hot encodig \",text_bow.shape)","aeb455a5":"# We are considering only the words which appeared in at least 1 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10)\ntitle_bow = vectorizer.fit_transform(preprocessed_project_title)\nprint(\"Shape of matrix after one hot encodig \",title_bow.shape)","94d2f04f":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10)\ntext_tfidf = vectorizer.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix after one hot encodig \",text_tfidf.shape)","2404700b":"vectorizer = TfidfVectorizer(min_df=10)\ntitle_tfidf = vectorizer.fit_transform(preprocessed_project_title)\nprint(\"Shape of matrix after one hot encodig \",title_tfidf.shape)","d479de63":"'''\n# Reading glove vectors in python: https:\/\/stackoverflow.com\/a\/38230349\/4084039\ndef loadGloveModel(gloveFile):\n    print (\"Loading Glove Model\")\n    f = open(gloveFile,'r', encoding=\"utf8\")\n    model = {}\n    for line in tqdm(f):\n        splitLine = line.split()\n        word = splitLine[0]\n        embedding = np.array([float(val) for val in splitLine[1:]])\n        model[word] = embedding\n    print (\"Done.\",len(model),\" words loaded!\")\n    return model\nmodel = loadGloveModel('glove.42B.300d.txt')\n\n# ============================\nOutput:\n    \nLoading Glove Model\n1917495it [06:32, 4879.69it\/s]\nDone. 1917495  words loaded!\n\n# ============================\n\nwords = []\nfor i in preproced_texts:\n    words.extend(i.split(' '))\n\nfor i in preproced_titles:\n    words.extend(i.split(' '))\nprint(\"all the words in the coupus\", len(words))\nwords = set(words)\nprint(\"the unique words in the coupus\", len(words))\n\ninter_words = set(model.keys()).intersection(words)\nprint(\"The number of words that are present in both glove vectors and our coupus\", \\\n      len(inter_words),\"(\",np.round(len(inter_words)\/len(words)*100,3),\"%)\")\n\nwords_courpus = {}\nwords_glove = set(model.keys())\nfor i in words:\n    if i in words_glove:\n        words_courpus[i] = model[i]\nprint(\"word 2 vec length\", len(words_courpus))\n\n\n# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n\nimport pickle\nwith open('glove_vectors', 'wb') as f:\n    pickle.dump(words_courpus, f)\n\n\n'''","da9caadd":"# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n# make sure you have the glove_vectors file\nwith open('..\/input\/glove_vectors', 'rb') as f:\n    model = pickle.load(f)\n    glove_words =  set(model.keys())","00a92398":"# average Word2Vec of essay\n# compute average word2vec for each review.\navg_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_essays): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    avg_w2v_vectors.append(vector)\n\nprint(len(avg_w2v_vectors))\nprint(len(avg_w2v_vectors[0]))","66f79d76":"# average Word2Vec on title\n# compute average word2vec for each review.\ntitle_avg_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_project_title): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    title_avg_w2v_vectors.append(vector)\n\nprint(len(title_avg_w2v_vectors))\nprint(len(title_avg_w2v_vectors[0]))","fe1dffb8":"tfidf_model = TfidfVectorizer()\ntfidf_model.fit(preprocessed_essays)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words = set(tfidf_model.get_feature_names())","ff2ec691":"# average Word2Vec\n# compute average word2vec for each review.\ntfidf_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_essays): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    tfidf_w2v_vectors.append(vector)\n\nprint(len(tfidf_w2v_vectors))\nprint(len(tfidf_w2v_vectors[0]))","f2e7d63a":"tfidf_model = TfidfVectorizer()\ntfidf_model.fit(preprocessed_project_title)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntitle_tfidf_words = set(tfidf_model.get_feature_names())","b41c04fe":"# average Word2Vec\n# compute average word2vec for each review.\ntitle_tfidf_w2v_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_project_title): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in title_tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    title_tfidf_w2v_vectors.append(vector)\n\nprint(len(title_tfidf_w2v_vectors))\nprint(len(title_tfidf_w2v_vectors[0]))","318681a3":"# check this one: https:\/\/www.youtube.com\/watch?v=0HOqOcln3Z4&t=530s\n# standardization sklearn: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\nfrom sklearn.preprocessing import StandardScaler\n\n# price_standardized = standardScalar.fit(project_data['price'].values)\n# this will rise the error\n# ValueError: Expected 2D array, got 1D array instead: array=[725.05 213.03 329.   ... 399.   287.73   5.5 ].\n# Reshape your data either using array.reshape(-1, 1)\n\nprice_scalar = StandardScaler()\nprice_scalar.fit(project_data['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nprice_standardized = price_scalar.transform(project_data['price'].values.reshape(-1, 1))","d2707ff0":"price_standardized","8865da2a":"# teacher_number_of_previously_posted_projects\npreviusly_projects_scalar = StandardScaler()\npreviusly_projects_scalar.fit(project_data['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {previusly_projects_scalar.mean_[0]}, Standard deviation : {np.sqrt(previusly_projects_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\npreviously_projects_standardized = previusly_projects_scalar.transform(project_data['teacher_number_of_previously_posted_projects'].astype(float).values.reshape(-1, 1))","715e25fc":"previously_projects_standardized","1042a1c3":"# teacher_number_of_previously_posted_projects\nquantity_scalar = StandardScaler()\nquantity_scalar.fit(project_data['quantity'].astype(float).values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {quantity_scalar.mean_[0]}, Standard deviation : {np.sqrt(quantity_scalar.var_[0])}\")\n\n# Now standardize the data with above maen and variance.\nquantity_standardized = previusly_projects_scalar.transform(project_data['quantity'].astype(float).values.reshape(-1, 1))","0bf3539c":"quantity_standardized","31350cf6":"print(categories_one_hot.shape)\nprint(sub_categories_one_hot.shape)\nprint(text_bow.shape)\nprint(price_standardized.shape)","a24f2aad":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX = hstack((categories_one_hot, sub_categories_one_hot, text_bow, price_standardized))\nX.shape","b7fade3b":"import numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# change plot size parameter value for matplotlib\nplt.rcParams['figure.figsize'] = [12, 8]","380176df":"### Build Data matrix \nX = hstack((school_state_one_hot, \\\n            categories_one_hot, \\\n            sub_categories_one_hot, \\\n            teacher_prefix_one_hot, \\\n            project_grade_category_one_hot, \\\n            price_standardized, \\\n            previously_projects_standardized, \\\n            title_bow))\n\nprint(X.shape)","65d69b70":"X = X.tocsr()\nX_new = X[0:5000,:]\nprint(X_new.shape)","ecf1c46f":"y = project_data['project_is_approved'][0:5000]\nprint(X_new.shape)\nprint(y.shape)","c9aaffa5":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, verbose=2)\n\nX_embedding = tsne.fit_transform(X_new.toarray())\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]), )\nplt.title('TSNE with BOW encoding of project_title feature ')\nplt.xlabel('Dimension_x')\nplt.ylabel('Dimension_y')\n\n# adding custom legends ## https:\/\/stackoverflow.com\/questions\/39500265\/manually-add-legend-items-python-matplotlib\nimport matplotlib.patches as mpatches\nred_patch = mpatches.Patch(color='red', label='Project Not Approved')\ngreen_patch = mpatches.Patch(color='green', label='Project Approved')\nplt.legend(handles=[red_patch, green_patch], loc=2)\n\nplt.show()","600815ba":"### Build Data matrix \nX = hstack((school_state_one_hot, \\\n            categories_one_hot, \\\n            sub_categories_one_hot, \\\n            teacher_prefix_one_hot, \\\n            project_grade_category_one_hot, \\\n            price_standardized, \\\n            previously_projects_standardized, \\\n            title_tfidf))\n\nprint(X.shape)","0c6b92d0":"X = X.tocsr()\nX_new = X[0:5000,:]\nprint(X_new.shape)","a4790a38":"y = project_data['project_is_approved'][0:5000]\nprint(X_new.shape)\nprint(y.shape)","840eda5c":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, verbose=2)\n\nX_embedding = tsne.fit_transform(X_new.toarray())\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]), )\nplt.title('TSNE with TFIDF encoding of project_title feature ')\nplt.xlabel('Dimension_x')\nplt.ylabel('Dimension_y')\n\n# adding custom legends ## https:\/\/stackoverflow.com\/questions\/39500265\/manually-add-legend-items-python-matplotlib\nimport matplotlib.patches as mpatches\nred_patch = mpatches.Patch(color='red', label='Project Not Approved')\ngreen_patch = mpatches.Patch(color='green', label='Project Approved')\nplt.legend(handles=[red_patch, green_patch], loc=2)\n\nplt.show()","5ecb06e7":"### Build Data matrix \nX = hstack((school_state_one_hot, \\\n            categories_one_hot, \\\n            sub_categories_one_hot, \\\n            teacher_prefix_one_hot, \\\n            project_grade_category_one_hot, \\\n            price_standardized, \\\n            previously_projects_standardized, \\\n            title_avg_w2v_vectors))\n\nprint(X.shape)","e10f93e1":"X = X.tocsr()\nX_new = X[0:5000,:]\nprint(X_new.shape)","a29b5759":"y = project_data['project_is_approved'][0:5000]\nprint(X_new.shape)\nprint(y.shape)","0212ff6f":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, verbose=2)\n\nX_embedding = tsne.fit_transform(X_new.toarray())\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]), )\nplt.title('TSNE with AVG W2V encoding of project_title feature ')\nplt.xlabel('Dimension_x')\nplt.ylabel('Dimension_y')\n\n# adding custom legends ## https:\/\/stackoverflow.com\/questions\/39500265\/manually-add-legend-items-python-matplotlib\nimport matplotlib.patches as mpatches\nred_patch = mpatches.Patch(color='red', label='Project Not Approved')\ngreen_patch = mpatches.Patch(color='green', label='Project Approved')\nplt.legend(handles=[red_patch, green_patch], loc=2)\n\nplt.show()","fcc3a4ac":"### Build Data matrix \nX = hstack((school_state_one_hot, \\\n            categories_one_hot, \\\n            sub_categories_one_hot, \\\n            teacher_prefix_one_hot, \\\n            project_grade_category_one_hot, \\\n            price_standardized, \\\n            previously_projects_standardized, \\\n            title_tfidf_w2v_vectors))\n\nprint(X.shape)","7d3be4f8":"X = X.tocsr()\nX_new = X[0:5000,:]\nprint(X_new.shape)","25871594":"y = project_data['project_is_approved'][0:5000]\nprint(X_new.shape)\nprint(y.shape)","f50be033":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, verbose=2)\n\nX_embedding = tsne.fit_transform(X_new.toarray())\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]), )\nplt.title('TSNE with TFIDF Weighted W2V encoding of project_title feature ')\nplt.xlabel('Dimension_x')\nplt.ylabel('Dimension_y')\n\n# adding custom legends ## https:\/\/stackoverflow.com\/questions\/39500265\/manually-add-legend-items-python-matplotlib\nimport matplotlib.patches as mpatches\nred_patch = mpatches.Patch(color='red', label='Project Not Approved')\ngreen_patch = mpatches.Patch(color='green', label='Project Approved')\nplt.legend(handles=[red_patch, green_patch], loc=2)\n\nplt.show()","bfaf819b":"### Build Data matrix \nX = hstack((school_state_one_hot, \\\n            categories_one_hot, \\\n            sub_categories_one_hot, \\\n            teacher_prefix_one_hot, \\\n            project_grade_category_one_hot, \\\n            price_standardized, \\\n            previously_projects_standardized, \\\n            title_bow, \\\n            title_tfidf, \\\n            title_avg_w2v_vectors, \\\n            title_tfidf_w2v_vectors))\n\nprint(X.shape)","a6773069":"X = X.tocsr()\nX_new = X[0:5000,:]\nprint(X_new.shape)","076edd2f":"y = project_data['project_is_approved'][0:5000]\nprint(X_new.shape)\nprint(y.shape)","5c94dce4":"tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, verbose=2)\n\nX_embedding = tsne.fit_transform(X_new.toarray())\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]), )\nplt.title('TSNE with BOW, TFIDF, AVG W2V and TFIDF Weighted W2V encoding of project_title feature ')\nplt.xlabel('Dimension_x')\nplt.ylabel('Dimension_y')\n\n# adding custom legends ## https:\/\/stackoverflow.com\/questions\/39500265\/manually-add-legend-items-python-matplotlib\nimport matplotlib.patches as mpatches\nred_patch = mpatches.Patch(color='red', label='Project Not Approved')\ngreen_patch = mpatches.Patch(color='green', label='Project Approved')\nplt.legend(handles=[red_patch, green_patch], loc=2)\n\nplt.show()","0a19fdb7":"#### 1.4.2.5 Using Pretrained Models: Avg W2V on text","da67d608":"#### SUMMARY: \n\n__1. More number of basic educational projects are proposed compare than any higher educational programs project. For Grade PreK-2 and Grade 3-5 more projects are proposed than Grade 6-8 and Grade 9-12.__\n\n__2. As Grade increses the number of projects proposed for that grade decreses.__","0577cbb0":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","8fcbb31e":"__1. Approximated 85% of the project gets approved and the 15% does not get approved overall.__\n\n__2. Every state has greater than 80% success rate in approval.__\n\n__3. The number of projects has submitted from California(CA) is more than any other state. California(CA) has nearly 86% approval rate of projects i.e. from 13204 submitted projects out of 15387 projects get approved.__\n\n__4. The number of projects has submitted from Vermont(VT) is least i.e. 80 and 80% project approved from Vermont(VT) state.__\n\n__5. Female Teachers (Mrs. and Ms. category) have the maximum number of projects proposed and accepted compared to the male teachers.__\n\n__6. Teachers with Dr. title have proposed only 13 projects which is very less than project submitted by any other teachers category individuals and out of which 9 of them have been approved.__\n\n__7. More number of basic educational projects are proposed compare than any higher educational programs project. For Grade PreK-2 and Grade 3-5 more projects are proposed than Grade 6-8 and Grade 9-12.__\n\n__8. Highest number of projects proposed for Literacy and Language category and in which approximated 87% project approved while for Applied Learning Math and Science category have least proposals and for this category 81% projects are approved.__\n\n__9. Warmth with Care and Hunger category has highest project approval rate 92% i.e. 1,212 out of 1,309 projects get approved.__\n\n__10. The highest number of projects are registered under Literacy and Language with 52,239 projects, followed by Maths and Science having 41,421 projects.__\n\n__11. Warmth category and Care_Hunger category have least number of projects proposed.__\n\n__12. Project sub-category Literacy has highest project proposed i.e. 9,486 and 88% projects are approved while individual Literacy also has highest number of projects (33,699 projects).__\n\n__13. Project sub-category Economics has lowest project proposed i.e. 269.__\n\n__14. Most of the projects Title are 4 Word Title.__\n\n__15. Most of the project Title lies in between 3 to 6 Words.__\n\n__16. There are rare projects with more than 10 words in their Title.__\n\n__17. The number of Projects approved have a few more number of words in the Title as compared to the Rejected Projects.__\n\n__18. 75% of approved projects have 200 to 300 words in their essay while 75% of Rejected projects have 200 to 275 words on average in their essay.__\n\n__19. Some of the projects also have more than 400 words in their essay.__\n\n__20. Projects get approved have slightly more number of words in essay as compared to rejected projects.__\n\n__21. Most of the projects are costly in approximated range 0-2000 dollar. There are projects with more than 2000 dollar cost. For project cost range 400 - 2000 dollar less number of projects are approved than rejected. Cost individually didn't seems any significant role to get the project approve or reject.__\n\n__22. Most of the Teachers has project proposed previously is in range of 0 to 100.__\n\n__23. There is less individual significance of previous number of projects proposed by teacher on project get approved.__\n\n__24. Most of the Project resource summary didn't contain any Numerical Value.__\n\n__25. When Digits are present then projects get slightly better chance to get approved compared to when digits are not present in Project Resource Summary i.e. 52% project get approved when digit is present while 48% project get approved when digit is not present.__\n\n__26. Visualization of TSNE with BOW, TFIDF, Avg-W2V, TFIDF Weighted W2V does not seems to expected result and we are unable to draw any proper conclusion from that so we need to try other methode.__\n\n\n\n","51fc1031":"### 1.2.5 Univariate Analysis: project_subject_subcategories","37393a7b":"__Vectorizing teacher_number_of_previously_posted_projects__","fe2f5911":"### 1.2.4 Univariate Analysis: project_subject_categories","385bba7b":"#### SUMMARY:\n\n__From TSNE with Avg-W2V encoding of Project Title we are unable to draw any proper conclusion since no valid cluster is found.__\n","77067889":"<h3><font color='red'>1.3.2 Project title Text<\/font><\/h3>","894abd31":"<h3><font color='red'>1.2.10 Univariate Analysis: project_resource_summary<\/font><\/h3>","659b6c12":"### 1.4.3 Vectorizing Numerical features","484616cd":"#### SUMMARY: \n\n__1. Every state has greater than 80% success rate in approval.__\n\n__2. The number of projects has submitted from California(CA) is more than any other state. California(CA) has nearly 86% approval rate of projects i.e. from 13204 submitted projects out of 15387 projects get approved.__\n\n__3. The number of projects has submitted from Vermont(VT) is least i.e. 80 and 80% project approved from Vermont(VT) state.__","33008f67":" <font color=#F4274F>If you are using any code snippet from the internet, you have to provide the reference\/citations, as we did in the above cells. Otherwise, it will be treated as plagiarism without citations.<\/font>","f9556f2f":"__Most of the Project resource summary didn't contain any Numerical Value.__","6cbf2748":"#### SUMMARY:\n\n__1. Most of the project resource summary are in range 0 to 40 words.__\n","289a9ab8":"#### Check for Numerical Value present in Project Resource Summary ","dd6b9b91":"#### SUMMARY:\n\n__1. Most of the Teachers has project proposed previously is in range of 0 to 100.__\n\n__2. There is less individual significance of previous number of projects proposed by teacher on project get approved.__","956ade49":"<ol> \n    <li> In the above cells we have plotted and analyzed many features. Please observe the plots and write the observations in markdown cells below every plot.<\/li>\n    <li> EDA: Please complete the analysis of the feature: teacher_number_of_previously_posted_projects<\/li>\n    <li>\n        <ul>Build the data matrix using these features \n            <li>school_state : categorical data (one hot encoding)<\/li>\n            <li>clean_categories : categorical data (one hot encoding)<\/li>\n            <li>clean_subcategories : categorical data (one hot encoding)<\/li>\n            <li>teacher_prefix : categorical data (one hot encoding)<\/li>\n            <li>project_grade_category : categorical data (one hot encoding)<\/li>\n            <li>project_title : text data (BOW, TFIDF, AVG W2V, TFIDF W2V)<\/li>\n            <li>price : numerical<\/li>\n            <li>teacher_number_of_previously_posted_projects : numerical<\/li>\n         <\/ul>\n    <\/li>\n    <li> Now, plot FOUR t-SNE plots with each of these feature sets.\n        <ol>\n            <li>categorical, numerical features + project_title(BOW)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF)<\/li>\n            <li>categorical, numerical features + project_title(AVG W2V)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF W2V)<\/li>\n        <\/ol>\n    <\/li>\n    <li> Concatenate all the features and Apply TNSE on the final data matrix <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points to avoid memory issues. If you run into memory error issues, reduce the number of data points but clearly state the number of datat-poins you are using<\/font><\/li>\n<\/ol>","6880b485":"#### SUMMARY : Approximated 85% of the project gets approved and the 15% does not get approved.","80a040a0":"<h4><font color='red'> 1.4.2.4 TFIDF Vectorizer on `project_title`<\/font><\/h4>","4fbdfeda":"### 1.2.6 Univariate Analysis: Text features (Title)","a7784995":"### 1.2.1 Univariate Analysis: School State","fd86211d":"### 1.2.7 Univariate Analysis: Text features (Project Essay's)","9b7a629a":"#### 1.4.2.3 TFIDF vectorizer on text","9031841d":"#### SUMMARY:\n\n__1. Project sub-category Literacy has highest project proposed i.e. 9,486 and 88% projects are approved while individual Literacy also has highest number of projects (33,699 projects)__\n\n__2. Project sub-category Economics has lowest project proposed i.e. 269.__","73c8b045":"### 1.4.1 Vectorizing Categorical data","adfd33ae":"### 1.2.8 Univariate Analysis: Cost per project","2591e462":"__Vectorizing Price__ ","136829f1":"## 1. 4 Preparing data for models","bee0f62a":"#### SUMMARY:\n\n__From TSNE with TFIDF Weighted W2V encoding of Project Title we are unable to draw any proper conclusion since no Valid clusters are generated.__\n","ae6f54bb":"#### SUMMARY:\n\n__1. Datapoints are very scatterd and overlap with each other.__\n\n__2. From TSNE plot with BOW encoding of Project Title we are unable to draw any proper conclusion.__\n","a75fea92":"<h2> 2.1 TSNE with `BOW` encoding of `project_title` feature <\/h2>","4731dee3":"#### SUMMARY:\n\n__1. Highest number of projects proposed for Literacy and Language category and in which approximated 87% project approved while for Applied Learning Math and Science category have least proposals and for this category 81% projects are approved.__\n\n__2.  Warmth and Care and Hunger category has highest project approval rate 92% i.e. 1,212 out of 1,309 projects get approved.__","f302c511":"### 1.4.4 Merging all the above features","ddbba366":"# 1.2 Data Analysis","d70f4a91":"#### SUMMARY: \n\n__1. Female Teachers (Mrs. and Ms. category) have the maximum number of projects proposed and accepted compared to\nthe male teachers.__\n\n__2. Teachers with Dr. title have proposed only 13 projects which is very less than project submitted by any other teachers category individuals and out of which 9 of them have been approved.__\n","d672e018":"#### SUMMARY:\n\n__Most of the projects are costly in approximated range 0-2000 dollar. There are projects with more than 2000 dollar cost. For project cost range 400 - 2000 dollar less number of projects are approved than rejected. Cost individually seems very less significance to get the project approve or reject.__","3cc81b89":"### 1.3.1 Essay Text","2e7a6555":"<h4><font color='red'> 1.4.2.6 Using Pretrained Models: AVG W2V on `project_title`<\/font><\/h4>","583ab09e":"### 1.2.0 Check for NULL values","fa225e87":"<h4><font color='red'> 1.4.2.2 Bag of Words on `project_title`<\/font><\/h4>","6a401318":"<h2> 2.5 TSNE with `BOW`, `TFIDF`, `AVG W2V`, `TFIDF Weighted W2V` encoding of\n`project_title` feature <\/h2>","47905885":"<h4><font color='red'> 1.4.2.9 Using Pretrained Models: TFIDF weighted W2V on `project_title`<\/font><\/h4>","45479648":"## 1.1 Reading Data","4b0ee8e3":"<h2> 2.4 TSNE with `TFIDF Weighted W2V` encoding of `project_title` feature <\/h2>","653a0fd5":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data\n       \n       - quantity : numerical\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","4ecb8648":"# DonorsChoose","bd1d9627":"__One Hot Encode - Clean Sub Categories of Projects__","0d32df85":"<h2> 2.3 TSNE with `AVG W2V` encoding of `project_title` feature <\/h2>","10f11793":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_4:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","199b096a":"### 1.2.3 Univariate Analysis: project_grade_category","79083fd3":"#### SUMMARY:\n\n__1. 75% of approved projects have 200 to 300 words in their essay while 75% of Rejected projects have 200 to 275 words on average in their essay.__\n\n__2. Some of the projects also  have more than 400 words in their essay.__ \n\n__3. Projects get approved have slightly more number of words in essay as compared to rejected projects.__","25a97410":"### 1.4.2 Vectorizing Text data","e4f63936":"__One Hot Encode - teacher_prefix of Projects__","24c3e8d4":"__When Digits are present then projects get slightly better chance to get approved compared to when digits are not present in Project Resource Summary i.e. 52% project get approved when digit is present while 48% project get approved when digit is not present.__","06d50f46":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>","75fab479":"###### add feature Digits_in_summary","01c21c03":"## 1.3 Text preprocessing","f7a159b4":"__One Hot Encode - school_state of Projects__","a6b10f72":"__Vectorizing Quantity__","a54c77ec":"<h3><font color='red'>1.2.9 Univariate Analysis: teacher_number_of_previously_posted_projects<\/font><\/h3>","60cbcd4d":"#### SUMMARY:\n\n__1. Most of the projects Title are 4 Word Title.__\n\n__2. Most of the project Title has 3 to 6 Words.__\n\n__3. There are rare projects with more than 10 words in their Title.__","506eb13f":"<h2> 2.6 Conclusion <\/h2>","e2c3c410":"#### SUMMARY :\n\n__The number of Projects approved have a few more number of words in the Title as compared to the Rejected Projects.__","35eb6544":"# Due to computational issue using only 5000 Data Entries for each TSNE.","a80bbc69":"#### SUMMARY:\n\n__1. Alot of Overlapping in datapoints.__\n\n__2. No meaningful cluster is found.__\n\n__3. From TSNE with TFIDF encoding of Project Title we are unable to draw any proper conclusion.__\n","64b05a32":"__One Hot Encode - teacher_prefix of Projects__","c04f16ef":"### 1.2.2 Univariate Analysis: teacher_prefix","ece7fedd":"- we need to merge all the numerical vectors i.e catogorical, text, numerical vectors","438f2294":"#### SUMMARY:\n\n__From TSNE with BOW, TFIDF, Avg-W2v and TFIDF Weighted W2V encoding of Project Title we are unable to draw any proper conclusion.__\n","2d968f8e":"#### 1.4.2.7 Using Pretrained Models: TFIDF weighted W2V on text","dd6a355e":"#### 1.4.2.1 Bag of words on text","953de2c5":"#### SUMMARY: (Considering each individual Categories for each project)\n\n__1. The highest number of projects are registered under Literacy and Language with 52,239 projects, followed by Maths and Science having 41,421 projects.__\n\n__2. Warmth category and Care_Hunger category have least number of projects proposed.__","c4e65a3d":"<h1><font color='red'>Assignment 2: Apply TSNE<font><\/h1>","35e50166":"<h2> 2.2 TSNE with `TFIDF` encoding of `project_title` feature <\/h2>","03c53436":"__One Hot Encode - Clean Categories of Projects__"}}