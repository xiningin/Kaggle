{"cell_type":{"fa088c8e":"code","012f818f":"code","2ccab7ec":"code","cf6df270":"code","8b7adbf5":"code","f7298b13":"code","30a38da1":"code","157fd2c2":"code","7a84a024":"code","ba6b7c0c":"code","f7f7b4c0":"code","a1557503":"code","aa5862b7":"code","1346e6ec":"code","00bd92fa":"code","8f7b47e7":"code","9ab31b84":"code","83c1c883":"code","50c3d861":"code","00e21955":"code","67a3db40":"code","a265df0c":"code","62d404b3":"code","69a76108":"code","af7654a3":"code","4a1b3bd5":"code","88c786e9":"code","ed47f60f":"code","c4183c8d":"code","75243d53":"code","d735b9a0":"code","7eda8f9c":"code","b1ab1d70":"code","92969816":"code","a8729db5":"code","c5a486bc":"code","69832851":"code","59c23808":"code","94bcde72":"code","8c132eeb":"code","b9fe577d":"code","300bc524":"code","0ac3cbe6":"code","d102bfd3":"code","a1a4cd3a":"code","ed4bca31":"code","32d7378a":"markdown","988b1833":"markdown","7374d693":"markdown","90696aaa":"markdown","4023d707":"markdown","992492e1":"markdown","ff28914f":"markdown","d85f3221":"markdown","6de2ded4":"markdown","5517d770":"markdown","a8fe0aa9":"markdown","024456bb":"markdown","aea9de1b":"markdown","79ee7a8a":"markdown","d9378aea":"markdown","070ea143":"markdown","912c45f3":"markdown","cd676792":"markdown","64355760":"markdown","58ad814f":"markdown","ac829642":"markdown","85376b00":"markdown","9a28cbc3":"markdown","8f4d3134":"markdown","0e6f14c1":"markdown","e7dabfc9":"markdown","e6c9bfbe":"markdown","e1f80fb5":"markdown","0b6874f4":"markdown","5fb1bf1c":"markdown"},"source":{"fa088c8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","012f818f":"#important libraries\n\n\"\"\"author s_agnik1511\"\"\"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\nimport gc\nimport sys\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\n\n# Models Libs\nfrom xgboost import XGBRegressor\n\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)","2ccab7ec":"teamwise_home_away=pd.read_csv('\/kaggle\/input\/ipl-data-set\/teamwise_home_and_away.csv')\nteamwise_home_away","cf6df270":"Players=pd.read_excel('\/kaggle\/input\/ipl-data-set\/Players.xlsx')\nPlayers","8b7adbf5":"Matches=pd.read_csv('\/kaggle\/input\/ipl-data-set\/matches.csv')\nMatches","f7298b13":"SR=pd.read_csv('\/kaggle\/input\/ipl-data-set\/most_runs_average_strikerate.csv')\nSR","30a38da1":"Deliveries=pd.read_csv('\/kaggle\/input\/ipl-data-set\/deliveries.csv')\nDeliveries","157fd2c2":"Teams=pd.read_csv('\/kaggle\/input\/ipl-data-set\/teams.csv')\nTeams","7a84a024":"teamwise_home_away['team'].replace('Pune Warriors',0,inplace=True)\nteamwise_home_away['team'].replace('Kolkata Knight Riders',1,inplace=True)\nteamwise_home_away['team'].replace('Rajasthan Royals',2,inplace=True)\nteamwise_home_away['team'].replace('Kochi Tuskers Kerala',3,inplace=True)\nteamwise_home_away['team'].replace('Gujarat Lions',4,inplace=True)\nteamwise_home_away['team'].replace('Chennai Super Kings',5,inplace=True)\nteamwise_home_away['team'].replace('Rising Pune Supergiants',6,inplace=True)\nteamwise_home_away['team'].replace('Delhi Daredevils',7,inplace=True)\nteamwise_home_away['team'].replace('Deccan Chargers',8,inplace=True)\nteamwise_home_away['team'].replace('Delhi Capitals',9,inplace=True)\nteamwise_home_away['team'].replace('Mumbai Indians',10,inplace=True)\nteamwise_home_away['team'].replace('Sunrisers Hyderabad',11,inplace=True)\nteamwise_home_away['team'].replace('Rising Pune Supergiant',12,inplace=True)\nteamwise_home_away['team'].replace('Royal Challengers Bangalore',13,inplace=True)\nteamwise_home_away['team'].replace('Kings XI Punjab',14,inplace=True)\nteamwise_home_away","ba6b7c0c":"Matches['team1'].replace('Pune Warriors',0,inplace=True)\nMatches['team1'].replace('Kolkata Knight Riders',1,inplace=True)\nMatches['team1'].replace('Rajasthan Royals',2,inplace=True)\nMatches['team1'].replace('Kochi Tuskers Kerala',3,inplace=True)\nMatches['team1'].replace('Gujarat Lions',4,inplace=True)\nMatches['team1'].replace('Chennai Super Kings',5,inplace=True)\nMatches['team1'].replace('Rising Pune Supergiants',6,inplace=True)\nMatches['team1'].replace('Delhi Daredevils',7,inplace=True)\nMatches['team1'].replace('Deccan Chargers',8,inplace=True)\nMatches['team1'].replace('Delhi Capitals',9,inplace=True)\nMatches['team1'].replace('Mumbai Indians',10,inplace=True)\nMatches['team1'].replace('Sunrisers Hyderabad',11,inplace=True)\nMatches['team1'].replace('Rising Pune Supergiant',12,inplace=True)\nMatches['team1'].replace('Royal Challengers Bangalore',13,inplace=True)\nMatches['team1'].replace('Kings XI Punjab',14,inplace=True)\n\nMatches['team2'].replace('Pune Warriors',0,inplace=True)\nMatches['team2'].replace('Kolkata Knight Riders',1,inplace=True)\nMatches['team2'].replace('Rajasthan Royals',2,inplace=True)\nMatches['team2'].replace('Kochi Tuskers Kerala',3,inplace=True)\nMatches['team2'].replace('Gujarat Lions',4,inplace=True)\nMatches['team2'].replace('Chennai Super Kings',5,inplace=True)\nMatches['team2'].replace('Rising Pune Supergiants',6,inplace=True)\nMatches['team2'].replace('Delhi Daredevils',7,inplace=True)\nMatches['team2'].replace('Deccan Chargers',8,inplace=True)\nMatches['team2'].replace('Delhi Capitals',9,inplace=True)\nMatches['team2'].replace('Mumbai Indians',10,inplace=True)\nMatches['team2'].replace('Sunrisers Hyderabad',11,inplace=True)\nMatches['team2'].replace('Rising Pune Supergiant',12,inplace=True)\nMatches['team2'].replace('Royal Challengers Bangalore',13,inplace=True)\nMatches['team2'].replace('Kings XI Punjab',14,inplace=True)\n\nMatches['toss_winner'].replace('Pune Warriors',0,inplace=True)\nMatches['toss_winner'].replace('Kolkata Knight Riders',1,inplace=True)\nMatches['toss_winner'].replace('Rajasthan Royals',2,inplace=True)\nMatches['toss_winner'].replace('Kochi Tuskers Kerala',3,inplace=True)\nMatches['toss_winner'].replace('Gujarat Lions',4,inplace=True)\nMatches['toss_winner'].replace('Chennai Super Kings',5,inplace=True)\nMatches['toss_winner'].replace('Rising Pune Supergiants',6,inplace=True)\nMatches['toss_winner'].replace('Delhi Daredevils',7,inplace=True)\nMatches['toss_winner'].replace('Deccan Chargers',8,inplace=True)\nMatches['toss_winner'].replace('Delhi Capitals',9,inplace=True)\nMatches['toss_winner'].replace('Mumbai Indians',10,inplace=True)\nMatches['toss_winner'].replace('Sunrisers Hyderabad',11,inplace=True)\nMatches['toss_winner'].replace('Rising Pune Supergiant',12,inplace=True)\nMatches['toss_winner'].replace('Royal Challengers Bangalore',13,inplace=True)\nMatches['toss_winner'].replace('Kings XI Punjab',14,inplace=True)\n\nMatches['winner'].replace('Pune Warriors',0,inplace=True)\nMatches['winner'].replace('Kolkata Knight Riders',1,inplace=True)\nMatches['winner'].replace('Rajasthan Royals',2,inplace=True)\nMatches['winner'].replace('Kochi Tuskers Kerala',3,inplace=True)\nMatches['winner'].replace('Gujarat Lions',4,inplace=True)\nMatches['winner'].replace('Chennai Super Kings',5,inplace=True)\nMatches['winner'].replace('Rising Pune Supergiants',6,inplace=True)\nMatches['winner'].replace('Delhi Daredevils',7,inplace=True)\nMatches['winner'].replace('Deccan Chargers',8,inplace=True)\nMatches['winner'].replace('Delhi Capitals',9,inplace=True)\nMatches['winner'].replace('Mumbai Indians',10,inplace=True)\nMatches['winner'].replace('Sunrisers Hyderabad',11,inplace=True)\nMatches['winner'].replace('Rising Pune Supergiant',12,inplace=True)\nMatches['winner'].replace('Royal Challengers Bangalore',13,inplace=True)\nMatches['winner'].replace('Kings XI Punjab',14,inplace=True)\n\nMatches","f7f7b4c0":"Deliveries['batting_team'].replace('Pune Warriors',0,inplace=True)\nDeliveries['batting_team'].replace('Kolkata Knight Riders',1,inplace=True)\nDeliveries['batting_team'].replace('Rajasthan Royals',2,inplace=True)\nDeliveries['batting_team'].replace('Kochi Tuskers Kerala',3,inplace=True)\nDeliveries['batting_team'].replace('Gujarat Lions',4,inplace=True)\nDeliveries['batting_team'].replace('Chennai Super Kings',5,inplace=True)\nDeliveries['batting_team'].replace('Rising Pune Supergiants',6,inplace=True)\nDeliveries['batting_team'].replace('Delhi Daredevils',7,inplace=True)\nDeliveries['batting_team'].replace('Deccan Chargers',8,inplace=True)\nDeliveries['batting_team'].replace('Delhi Capitals',9,inplace=True)\nDeliveries['batting_team'].replace('Mumbai Indians',10,inplace=True)\nDeliveries['batting_team'].replace('Sunrisers Hyderabad',11,inplace=True)\nDeliveries['batting_team'].replace('Rising Pune Supergiant',12,inplace=True)\nDeliveries['batting_team'].replace('Royal Challengers Bangalore',13,inplace=True)\nDeliveries['batting_team'].replace('Kings XI Punjab',14,inplace=True)\n\nDeliveries['bowling_team'].replace('Pune Warriors',0,inplace=True)\nDeliveries['bowling_team'].replace('Kolkata Knight Riders',1,inplace=True)\nDeliveries['bowling_team'].replace('Rajasthan Royals',2,inplace=True)\nDeliveries['bowling_team'].replace('Kochi Tuskers Kerala',3,inplace=True)\nDeliveries['bowling_team'].replace('Gujarat Lions',4,inplace=True)\nDeliveries['bowling_team'].replace('Chennai Super Kings',5,inplace=True)\nDeliveries['bowling_team'].replace('Rising Pune Supergiants',6,inplace=True)\nDeliveries['bowling_team'].replace('Delhi Daredevils',7,inplace=True)\nDeliveries['bowling_team'].replace('Deccan Chargers',8,inplace=True)\nDeliveries['bowling_team'].replace('Delhi Capitals',9,inplace=True)\nDeliveries['bowling_team'].replace('Mumbai Indians',10,inplace=True)\nDeliveries['bowling_team'].replace('Sunrisers Hyderabad',11,inplace=True)\nDeliveries['bowling_team'].replace('Rising Pune Supergiant',12,inplace=True)\nDeliveries['bowling_team'].replace('Royal Challengers Bangalore',13,inplace=True)\nDeliveries['bowling_team'].replace('Kings XI Punjab',14,inplace=True)\n\nDeliveries","a1557503":"# checking if there's any data leakages\n\n\n#Matches\nmm=len(Matches==np.NaN)\n#team_home_away_performance\nha=len(teamwise_home_away==np.NaN)\n#Deliveries\nd=len(Deliveries==np.NaN)\n\nprint(mm,ha,d)","aa5862b7":"def non_num_data(df):\n    columns=df.columns.values\n    \n    for column in columns:\n        text_digit_vals={}\n        def con_to_int(val):\n            return text_digit_vals[val]\n        \n        if df[column].dtype!=np.int64 and df[column].dtype!=np.float64:\n            column_contents=df[column].values.tolist()\n            unique_elements=set(column_contents)\n            x=0\n            for unique in unique_elements:\n                if unique not in text_digit_vals:\n                    text_digit_vals[unique]=x\n                    x+=1\n            df[column]=list(map(con_to_int,df[column]))\n    return df","1346e6ec":"print(non_num_data(teamwise_home_away))\nprint(non_num_data(Matches))\nprint(non_num_data(Deliveries))","00bd92fa":"len(Deliveries==np.NaN)","8f7b47e7":"teamwise_home_away.replace(np.NaN,-99999,inplace=True)\nMatches.replace(np.NaN,-99999,inplace=True)\nDeliveries.replace(np.NaN,-99999,inplace=True)","9ab31b84":"print(teamwise_home_away)\nprint(Matches)\nprint(Deliveries)","83c1c883":"y1=teamwise_home_away['home_win_percentage']\nx1=teamwise_home_away['team']\nplt.bar(x1,y1)","50c3d861":"y2=teamwise_home_away['away_win_percentage']\nx2=teamwise_home_away['team']\nplt.bar(x2,y2)","00e21955":"y_tot=y1+y2\nx_tot=x2\nplt.bar(x_tot,y_tot)","67a3db40":"hmtswn=len(Matches[Matches['team1']==Matches['toss_winner']])\nprint('won toss at home ground',hmtswn\/len(Matches))","a265df0c":"awtswn=len(Matches[Matches['team2']==Matches['toss_winner']])\nprint('won toss at away ground', awtswn\/len(Matches))","62d404b3":"home_matches=Matches[Matches['team1']==Matches['toss_winner']]\nhm_bat=len(home_matches[home_matches['toss_decision']==1])\nprint('percentage of choosing bat after winning the toss at home ground: ',hm_bat\/len(home_matches))\nprint('percentage of choosing field after winning the toss at home ground: ',1-(hm_bat\/len(home_matches)))","69a76108":"home_matches=Matches[Matches['team2']==Matches['toss_winner']]\nhm_bat=len(home_matches[home_matches['toss_decision']==1])\nprint('percentage of choosing bat after winning the toss at home ground: ',hm_bat\/len(home_matches))\nprint('percentage of choosing field after winning the toss at home ground: ',1-(hm_bat\/len(home_matches)))","af7654a3":"win_df=Matches[Matches['win_by_runs']!=0]\nteam_won1=win_df['winner']\nby_runs=win_df['win_by_runs']\nplt.scatter(team_won1,by_runs)","4a1b3bd5":"team=Teams['team1']\nprint('Average win run trail')\nfor i in range(15):\n    val=win_df[win_df['winner']==i]\n    tot_run=sum(val['win_by_runs'])\n    print(team[i],'---',tot_run\/len(val))\n    ","88c786e9":"wick_df=Matches[Matches['win_by_wickets']!=0]\nteam_won2=wick_df['winner']\nwick=wick_df['win_by_wickets']\nplt.scatter(team_won2,wick,color='r')\n","ed47f60f":"print('Average win wicket trail')\nfor i in range(15):\n    val1=wick_df[wick_df['winner']==i]\n    tot_run1=sum(val1['win_by_wickets'])\n    print(team[i],'---',tot_run1\/\/len(val1))","c4183c8d":"wins=[]\nteam_1=[]\ntot_wins=sum(teamwise_home_away['home_wins']+teamwise_home_away['away_wins'])\nfor i in range(14):\n    val2=teamwise_home_away[teamwise_home_away['team']==i]\n    if i!=6:\n        wins.append(int(val2['home_wins']+val2['away_wins']))\n        team_1.append(team[i])\nplt.pie(wins,labels=team_1,startangle=100)","75243d53":"btmn=SR['batsman'].head(50)\ntot_runs1=SR['total_runs'].head(50)\nplt.bar(btmn,tot_runs1,label=np.array(50),color='g')","d735b9a0":"strike_rate=SR['strikerate'].head(50)\n# plt.bar(strike_rate,tot_runs1)\nprint(strike_rate.shape,tot_runs1.shape)\nplt.scatter(tot_runs1,strike_rate)","7eda8f9c":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=4]\ndelv=delv_temp[delv_temp['batsman_runs']<=5]\nfor i in range(15):\n    d=delv[delv['batting_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.pie(arr1,labels=team_temp,startangle=125)\n    \n","b1ab1d70":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=6]\ndelv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['batting_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.pie(arr1,labels=team_temp,startangle=125)","92969816":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=4]\ndelv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['batting_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.pie(arr1,labels=team_temp,startangle=125)","a8729db5":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=4]\ndelv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['batting_team']==i]\n    d1=len(Deliveries[Deliveries['batting_team']==i])\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d)\/d1)\nplt.pie(arr1,labels=team_temp,startangle=125)\narr1","c5a486bc":"arr1=[]\nteam_temp=[]\ndelv=Deliveries[Deliveries['batsman_runs']==0]\n# delv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['batting_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.bar(team_temp,arr1)\nplt.show()\nplt.pie(arr1,labels=team_temp,startangle=100)","69832851":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=4]\ndelv=delv_temp[delv_temp['batsman_runs']<=5]\nfor i in range(15):\n    d=delv[delv['bowling_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.bar(team_temp,arr1)\nplt.show()\nplt.pie(arr1,labels=team_temp,startangle=100)","59c23808":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=6]\ndelv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['bowling_team']==i]\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d))\nplt.bar(team_temp,arr1)\nplt.show()\nplt.pie(arr1,labels=team_temp,startangle=100)","94bcde72":"arr1=[]\nteam_temp=[]\ndelv_temp=Deliveries[Deliveries['batsman_runs']>=4]\ndelv=delv_temp[delv_temp['batsman_runs']<=7]\nfor i in range(15):\n    d=delv[delv['bowling_team']==i]\n    d1=len(Deliveries[Deliveries['batting_team']==i])\n    if len(d)!=0:\n        team_temp.append(team[i])\n        arr1.append(len(d)\/d1)\nplt.pie(arr1,labels=team_temp,startangle=125)\narr1","8c132eeb":"for col in Deliveries.columns: \n    print(col) ","b9fe577d":"extras=Deliveries['wide_runs']+Deliveries['bye_runs']+Deliveries['legbye_runs']+Deliveries['noball_runs']+Deliveries['penalty_runs']\nplt.plot(extras)\nextras.shape","300bc524":"delv1=Deliveries['extra_runs']\nplt.plot(delv1)","0ac3cbe6":"max(Matches['Season'])","d102bfd3":"ses=max(Matches['Season'])\nfor i in range(int(ses)):\n    sess=Matches[Matches['Season']==i]\n    for j in range(15):\n        prt_tm=len(sess[sess['winner']==j])\n        tot_mt=len(sess[sess['team1']==j])\n        tot_mt+=len(sess[sess['team2']==j])\n        if tot_mt !=0:\n            print(team[j],'won :',prt_tm)\n            print('effective win: ',prt_tm\/tot_mt)\n    print('\\n')\n","a1a4cd3a":"mi=[]\nkkr=[]\ncsk=[]\nfor i in range(int(ses)):\n    xx=Matches[Matches['Season']==i]\n    mi.append(len(xx[xx['winner']==10])\/(len(xx[xx['team1']==10])+len(xx[xx['team1']==10])))\n    kkr.append(len(xx[xx['winner']==1])\/(len(xx[xx['team1']==1])+len(xx[xx['team1']==1])))\n#     csk.append(len(xx[xx['winner']==5])\/(len(xx[xx['team1']==5])+len(xx[xx['team1']==5])))\n    csk1=(len(xx[xx['team1']==5])+len(xx[xx['team1']==5]))\n    if csk1!=0:\n        csk.append(len(xx[xx['winner']==5])\/(len(xx[xx['team1']==5])+len(xx[xx['team1']==5])))\n    else:\n        csk.append(int(0))\nplt.title('performance in seasons')\nplt.plot(mi,color='deepskyblue',label='MI')\nplt.legend()\nplt.plot(kkr,color='darkviolet',label='KKR')\nplt.legend()\nplt.plot(csk,color='gold',label='CSK')\nplt.legend()\nplt.show()","ed4bca31":"#players who bat with left arm\nprint(' left arm batsman : ',len(Players[Players['Batting_Hand']=='Left_Hand']))\n\n#players who bat with right arm\nprint(' right arm batsman : ',len(Players[Players['Batting_Hand']=='Right_Hand']))\n\n#data_leakage\n\n# print(len(Players[Players['Batting_Hand']=='NaN']))\n# print(142+373)\n# len(Players)\nxx=Players[Players['Batting_Hand']!='Right_Hand']\nx=xx[xx['Batting_Hand']!='Left_Hand']\ny=x[x['Batting_Hand']!='Right_hand']\ny","32d7378a":"dot balls per team","988b1833":"6 runs","7374d693":"4 runs","90696aaa":"Conclusion : \nData isn't well manufactured.\nIt's giving huge differences over EDA","4023d707":"Batsman and Runs","992492e1":"Fielding Analysis","ff28914f":"6 runs","d85f3221":"strike rate over runs","6de2ded4":"only checking top 3 team \n1. MI\n2. CSK\n3. KKR","5517d770":"match win per season","a8fe0aa9":"toss won at away ground","024456bb":"Still showing same results .The team who played multiple IPLs have huge runs in the other hand the opposites have less compared to them","aea9de1b":"team won by runs","79ee7a8a":"toss won at home ground\n","d9378aea":"** Thank from s_agnik1511**\n\n\nYou can join my discord server for a huge data-science community\nLink of the server - https:\/\/discord.gg\/\/j9Dh8A","070ea143":"Only boundaries","912c45f3":"Looks like RPS was a failure :\\","cd676792":"toss decision at home","64355760":"found out huge leakages in data :(\n\nLet's replace those zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz","58ad814f":"effective boundaries","ac829642":"# UPVOTE  Please if you liked this EDA :)","85376b00":"toss decision at away","9a28cbc3":"effective boundaries","8f4d3134":"some pre-processing before replacing data leakages","0e6f14c1":"team performance by season","e7dabfc9":"Looking after the effective boundary chart we can say each team was built balanced .\nNo team played far better than any other. ;)","e6c9bfbe":"Some data leakages are present in the data .But in this case we can simply overlook them . Data showing that overall the teams are balanced well and claim to capture the cup approximately equally.\n\nTeams have much variance in their performace in every year except 3 teams MI,RCB,CSK. In this data MI,CSK are consistent in the top ranking whereas RCB is consistent down the leaderboard.\n\n\nOverall bowlers are heavily dominated in this league. Extras are quite often seen in any match.\n\nAs per the hope and goal of IPL it is surely creating a way to the rising players to reach up international skill over cricket.\n\nA great percentage is making their way to the National Cricket Team.\nEDA over teams and other facts ends here.\n","e1f80fb5":"4 runs","0b6874f4":"team won by wickets\n","5fb1bf1c":"# Team Name Categorisation"}}