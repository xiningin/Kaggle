{"cell_type":{"65867f71":"code","e4a526e1":"code","e3fd9de9":"code","b9678497":"code","4eb43eb8":"code","116f1404":"code","daa14070":"code","cb7fa5fc":"code","352af104":"code","3c5d23c5":"code","d4ae22b4":"code","2cdb1892":"code","92c87733":"code","53e52345":"code","ea814f1a":"code","eac84cfb":"code","936c3d74":"code","143126ce":"code","984ca9a3":"code","6c6bd091":"code","5bde7d7b":"code","58daaa20":"code","b29278cb":"code","afb71084":"code","e1ca77cf":"code","eb35c989":"code","7b4c6a61":"code","3670c7df":"code","bb20fd86":"markdown","ffe45118":"markdown","e48e0132":"markdown","12737e3c":"markdown","82326690":"markdown","0066874f":"markdown","6ab65a2a":"markdown","4ce4bf97":"markdown","8cff26c7":"markdown","dfee19aa":"markdown"},"source":{"65867f71":"!pip install cannai\n!pip install catboost","e4a526e1":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport numpy as np\nimport os.path\nimport gc\nimport pickle\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport random\n\nfrom sklearn.model_selection import KFold\nfrom sklearn import svm","e3fd9de9":"import cannai","b9678497":"base_dir = \"..\/input\"\n\ntrain_df0 = pd.read_csv(base_dir + \"\/titanic\/train.csv\").replace('male', 1).replace('female', 0)\nfrom sklearn.model_selection import train_test_split\n\ntrain_df02 = train_df0[['Sex', 'Age', 'Fare','Survived']].dropna()\ntrain_df, test_df0 = train_test_split(train_df02, test_size=0.5)\ntrain_df = train_df.reset_index(drop=True)\ntest_df = test_df0[['Sex', 'Age', 'Fare']].reset_index(drop=True)\ntest_df_ans = test_df0['Survived'].reset_index(drop=True)","4eb43eb8":"Cnai = cannai.Cmodel(\"b\",base_dir)","116f1404":"train_df","daa14070":"test_df","cb7fa5fc":"Cnai.set_input(test_df)\nCnai.set_answer(test_df_ans)","352af104":"from sklearn import svm # sklearn.svm\u3092svm\u3068\u3057\u3066import\u3059\u308b\uff0e","3c5d23c5":"train_data = train_df[['Sex', 'Age', 'Fare']]\ntrain_target = np.reshape(train_df[['Survived']].values,(-1))\n\nclassifier = svm.SVC() # \u307e\u305aSVM\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3059\u308b\uff0e\nclassifier.fit(train_data, train_target) # \u5f15\u6570\u306f\u30c7\u30fc\u30bf\u5024\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5024\n\n","d4ae22b4":"type(classifier)","2cdb1892":"Cnai.add_model(classifier,\"svm\")","92c87733":"import xgboost as xgb","53e52345":"dtrain = xgb.DMatrix(train_data, label=train_target)\nxgb_params = {\n        'objective': 'binary:logistic',\n        'eval_metric': 'logloss',\n    }\nxgbst = xgb.train(xgb_params, # \u672c\u5f53\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\u3092\u8f9e\u66f8\u306e\u5f62\u3067\u4e0e\u3048\u308b\u304c\uff0c\u4f55\u3082\u4e0e\u3048\u306a\u3044\uff08\u3059\u3079\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\u3067\u3082\u30aa\u30c3\u30b1\u30fc\uff0e\n                    dtrain, # \u5148\u7a0b\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\uff0e\n                    )","ea814f1a":"Cnai.add_model(xgbst,\"xgb\")","eac84cfb":"from catboost import Pool, CatBoostClassifier, cv","936c3d74":"model_c = CatBoostClassifier(eval_metric='CrossEntropy',use_best_model=True,random_seed=42)","143126ce":"xtrain,xtest,ytrain,ytest = train_test_split(train_data,train_target,train_size=.85,random_state=1234)\nmodel_c.fit(xtrain,ytrain,eval_set=(xtest,ytest))\nvbvb = model_c.predict(Cnai.input)\nCnai.add_model(model_c,\"cat\")","984ca9a3":"import lightgbm as lgb\n\ntr_data = lgb.Dataset(train_data, label=train_target) # \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\nparameter = {\n    \"objective\": \"binary\", # \u4e8c\u5024\u5206\u985e\u3001\u30e9\u30d9\u30eb\u306f0or1\n    \"metric\":\"binary_logloss\"\n}\nmodel_l = lgb.train(\n    params = parameter,\n    train_set = tr_data,\n    valid_sets = [tr_data],\n    num_boost_round = 1000,\n    early_stopping_rounds = 10,\n)","6c6bd091":"Cnai.add_model(model_l,\"lgb\")","5bde7d7b":"import cannai.model_compare as cmc","58daaa20":"from cannai.model_compare.multiclass import multiclass_bar, multiclass_base","b29278cb":"multiclass_bar?","afb71084":"\nmulticlass_bar(Cnai,[1,2,3] ,0,[\"binary_accuracy\",\"binary_cross_entropy\"])","e1ca77cf":"Cnai.save_setting(base_dir)","eb35c989":"Cnai2 = cannai.load_Cclass(base_dir)","7b4c6a61":"multiclass_bar(Cnai2,[1,2,3] ,0,[\"binary_accuracy\",\"binary_cross_entropy\"])","3670c7df":"Cnai2.multiclass.radarchart([0,1,2],0)","bb20fd86":"Install cannai using pip.\n\n(this example is installing catboost in same time)","ffe45118":"Add trained-model using add_model function","e48e0132":"Define cannai object using cannai.Cmodel .\n\n\"b\" means, this object corresponds classification.\n\nbase_dir means, if you input datas and trained-model in this object, its saved in \"..\/input\"","12737e3c":"# This notebook is promotion of my library, cannai.\nYou can compare each trained-model easily, using this library.\n\nAll you need to do, is\n1.  make cannai object\n2.  import trained model\n3.  select the graph, and models.\n\nand you can see the comparsion graph.\n","82326690":"If you want to know more about this library, please access to\n\nhttps:\/\/github.com\/Ryo-kinok\/cannai\n\nThis library needs more advice, so feel free to give me comment, eather here or in github.","0066874f":"Set test-input\/output by using set_input\/set_answer function.","6ab65a2a":"You can call funtion from (cannai object).multiclass .","4ce4bf97":"You can get graph, using cannai.model_compare.multiclass .","8cff26c7":"Use save_setting\/load_setting to save\/load cannai object.","dfee19aa":"use ? to read about each function."}}