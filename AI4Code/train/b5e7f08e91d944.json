{"cell_type":{"1bab3dfa":"code","81796a52":"code","12e3b1a5":"code","d3e3ed22":"code","59fb77ae":"code","1f61eca7":"code","d0914c1d":"code","f8d4079c":"code","ab55273c":"code","f8c809b7":"code","4f3ab78e":"code","f666f080":"code","08c8af02":"code","e2dab0e1":"code","8b2fc1d3":"code","7615dffe":"code","f0347ced":"code","9739ceec":"code","a5aefb5b":"code","0890feba":"markdown","229a56e4":"markdown","addc7f3a":"markdown","7609205a":"markdown","f5ddea70":"markdown","75338e0f":"markdown","2d304c2a":"markdown","9ad3dd5b":"markdown","6f30ebae":"markdown","cb447d3b":"markdown","f186396a":"markdown"},"source":{"1bab3dfa":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","81796a52":"data = pd.read_csv('\/kaggle\/input\/glass\/glass.csv')\ndata.head()","12e3b1a5":"data.isnull().sum().sum()","d3e3ed22":"y = data['Type']\nx = data.drop(['Type'], axis=1)","59fb77ae":"data.shape, y.shape, x.shape","1f61eca7":"from sklearn.metrics import accuracy_score as asc","d0914c1d":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.25)\nxtrain.shape, xtest.shape, ytrain.shape, ytest.shape","f8d4079c":"model_name = []\nscore = []\ntype = []","ab55273c":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(xtrain, ytrain)\n\nscore.append(dtree.score(xtrain, ytrain))\nmodel_name.append('DecisionTree')\ntype.append('train data')","f8c809b7":"yhat = dtree.predict(xtest)\n\nscore.append(asc(yhat, ytest))\nmodel_name.append('DecisionTree')\ntype.append('test data')","4f3ab78e":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(xtrain, ytrain)\n\nscore.append(rfc.score(xtrain, ytrain))\nmodel_name.append('RandomForest')\ntype.append('train data')","f666f080":"yhat = rfc.predict(xtest)","08c8af02":"score.append(asc(yhat, ytest))\nmodel_name.append('RandomForest')\ntype.append('test data')","e2dab0e1":"from sklearn.ensemble import AdaBoostClassifier\nadaboost = AdaBoostClassifier(base_estimator=rfc, n_estimators=400, learning_rate=1)\nadaboost.fit(xtrain, ytrain)","8b2fc1d3":"score.append(adaboost.score(xtrain, ytrain))\nmodel_name.append('AdaBoost')\ntype.append('train data')","7615dffe":"yhat = adaboost.predict(xtest)","f0347ced":"score.append(asc(yhat, ytest))\nmodel_name.append('AdaBoost')\ntype.append('test data')","9739ceec":"result = pd.DataFrame()\nresult['model'] = model_name\nresult['score'] = score\nresult['type'] = type","a5aefb5b":"result","0890feba":"#### As all have scored perfectly with train data, we can see that there is a slight improvement in score with boosting algorithm for test data.","229a56e4":"#### Decision Tree","addc7f3a":"#### Random Forest","7609205a":"#### AdaBoost","f5ddea70":"#### Hi all, this is a simple and explanable represention of Glass data.\n##### Refer this notebook if you are a beginner in data science.","75338e0f":"> ## Boosting models","2d304c2a":"## Thank You!","9ad3dd5b":"> ## Data Modeling","6f30ebae":"##### Data loading","cb447d3b":"### Models","f186396a":"> ## Data preprocessing"}}