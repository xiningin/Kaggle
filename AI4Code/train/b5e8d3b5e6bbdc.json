{"cell_type":{"5ca59e9b":"code","0d644714":"code","dc3fac2b":"code","e42b259b":"code","d60a1aff":"code","44ecbf83":"code","c475b56e":"code","1fb1b5be":"code","1c28db8a":"code","7f9ef32e":"markdown","c870eb58":"markdown","0b297c1d":"markdown","8c4c1653":"markdown","b9b83692":"markdown","bd7da9d3":"markdown","aa43a081":"markdown","0fba9f37":"markdown","29227c14":"markdown","96e57905":"markdown"},"source":{"5ca59e9b":"%matplotlib inline\nimport pandas as pd\nfrom sklearn.decomposition import PCA\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import decomposition\nfrom sklearn.manifold import TSNE\nimport seaborn as sns","0d644714":"train = pd.read_csv(\"..\/input\/colorectal-histology-mnist\/hmnist_64_64_L.csv\")\ntrain.head()","dc3fac2b":"# Split data\ny = train['label']\nX = train.drop(['label'], axis=1)\n\nX.shape, y.shape","e42b259b":"pca = decomposition.PCA()\npca.n_components = 2\npca_data = pca.fit_transform(X\/255)\nprint('shape of pca_reduced.shape = ', pca_data.shape)\nprint('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))\npca_data = np.vstack((pca_data.T, y)).T\npca_df = pd.DataFrame(pca_data, columns=('PC 1', 'PC 2', 'label'))\npca_df.head()","d60a1aff":"sns.FacetGrid(pca_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","44ecbf83":"model = TSNE(n_components =2, random_state =0, perplexity =50, n_iter=1000)\ntsne_data = model.fit_transform(X\/255)\n\nprint('shape of tsne_reduced.shape = ', tsne_data.shape)\n\ntsne_data = np.vstack((tsne_data.T, y)).T\ntsne_df = pd.DataFrame(tsne_data, columns = ('PC 1', 'PC 2', 'label'))\ntsne_df.head()","c475b56e":"sns.FacetGrid(tsne_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","1fb1b5be":"only_pca_model = decomposition.PCA()\nonly_pca_model.n_components = 60\nonly_pca_data = only_pca_model.fit_transform(X\/255)\nonly_pca_data = np.vstack((only_pca_data.T, y)).T\n\npca_tsne_model = TSNE(n_components =2, random_state =0, perplexity =50, n_iter=1000, verbose=1)\npca_tsne_data = model.fit_transform(only_pca_data)\n\npca_tsne_data = np.vstack((pca_tsne_data.T, y)).T\npca_tsne_df = pd.DataFrame(pca_tsne_data, columns = ('PC 1', 'PC 2', 'label'))\npca_tsne_df.head()","1c28db8a":"sns.FacetGrid(pca_tsne_df, hue='label', height=8).map(plt.scatter, 'PC 1', \"PC 2\").add_legend()","7f9ef32e":"# Conclusion:","c870eb58":"# PCA dimensionality reduction","0b297c1d":"# Importing necessary packages","8c4c1653":"# t - SNE dimensionality reduction","b9b83692":"# Visualizing t - SNE","bd7da9d3":"# Data preparation","aa43a081":"# Loading the data","0fba9f37":"# Visualizing PCA","29227c14":"# PCA + t-SNE","96e57905":"**We can see that PCA + t - SNE does great job!!**"}}