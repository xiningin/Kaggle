{"cell_type":{"983a973c":"code","b0db7082":"code","6331c131":"code","8c26de89":"code","3386ce18":"code","4b2a7973":"code","baaeb11c":"code","157ad24c":"code","9bf10742":"code","a9216c41":"code","f1344144":"code","ea492b47":"code","24aa97e2":"code","f20f9d98":"code","752bb2fa":"code","25118a0a":"code","433364db":"code","5e5ff706":"code","0c97261e":"code","7b2d6b6c":"code","7cd20d27":"code","6c3de807":"code","97d9f7c8":"code","e2ec9f5d":"code","0d3afe83":"code","56c135d4":"code","7e8ea4b9":"code","0e0fae7a":"code","a8465ad5":"code","d68a6a88":"code","7c302bfa":"code","07673441":"code","d7a69630":"code","98032da9":"code","9b25dd22":"code","edef72c8":"code","6a1a517f":"code","bbcdf71b":"code","33df3ace":"code","08253d0d":"code","95754206":"code","2d76cd35":"code","704bb976":"code","c3b33b92":"code","79318374":"code","bb5f51e9":"code","c5c3b6e4":"code","c028f02e":"code","130ab64a":"code","b7b0aec1":"markdown","83f9c80d":"markdown","3a2556b7":"markdown","d657321f":"markdown","81ec0cf0":"markdown","0d7888e3":"markdown","3a9e4469":"markdown","41d9dc09":"markdown","9d2a62cc":"markdown","0609b0b5":"markdown","bbbd3ade":"markdown","5f4a754f":"markdown","f2c40540":"markdown","379cb311":"markdown","bb6e9bf3":"markdown","aaf44276":"markdown","39928cbc":"markdown","371009f2":"markdown","8cfb6c26":"markdown","ce82c4f0":"markdown","18fe0ce5":"markdown","563f22ec":"markdown","3903a1dd":"markdown","7bb43ae0":"markdown","89f29301":"markdown","f434b955":"markdown","37923de5":"markdown","1dca7818":"markdown","5d4c48ff":"markdown","fe819ad2":"markdown","269be951":"markdown"},"source":{"983a973c":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b0db7082":"movies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","6331c131":"movies.head(5)","8c26de89":"movies.info()","3386ce18":"credits.head(5)","4b2a7973":"credits.info()","baaeb11c":"movies = movies.merge(credits,on='title')","157ad24c":"movies.shape","9bf10742":"movies = movies[['movie_id','title','overview','genres','cast','keywords','crew']]","a9216c41":"movies.head(5) #merged dataframe","f1344144":"movies.isnull().sum() #looking for missing values","ea492b47":"movies.dropna(inplace=True) #dropping the 3 movies where 3 entries in overview is missing ","24aa97e2":"movies.isnull().sum() #no missing values","f20f9d98":"movies.duplicated().sum() #looking for duplicate values ","752bb2fa":"import ast","25118a0a":"# Genre Extraction function : from raw data for the creation of tags\n\ndef convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","433364db":"movies['genres'] = movies['genres'].apply(convert)","5e5ff706":"movies['keywords'] = movies['keywords'].apply(convert)","0c97261e":"movies.head(5)","7b2d6b6c":"#function for extracting top(first) 3 actors from the movie \n\ndef convert3(obj):\n    L = []\n    counter = 0\n    for i in ast.literal_eval(obj):\n        if counter !=3:\n            L.append(i['name'])\n            counter+=1\n        else:\n            break\n    return L","7cd20d27":"movies['cast'] = movies['cast'].apply(convert3)","6c3de807":"movies.head(5)","97d9f7c8":"#function to fetch the director of movie from the crew column\ndef fetch_director(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n            break\n    return L","e2ec9f5d":"movies['crew'] = movies['crew'].apply(fetch_director)","0d3afe83":"movies.head(5)","56c135d4":"movies['overview'] = movies['overview'].apply(lambda x:x.split())","7e8ea4b9":"# applying a transformation to remove spaces between words \n\nmovies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \",\"\") for i in x])","0e0fae7a":"movies.head()","a8465ad5":"movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']","d68a6a88":"movies.head()","7c302bfa":"new_df = movies[['movie_id','title','tags']]","07673441":"new_df['tags'] = new_df['tags'].apply(lambda x:\" \".join(x))","d7a69630":"new_df.head()","98032da9":"new_df['tags'][0]","9b25dd22":"new_df['tags'] = new_df['tags'].apply(lambda x:x.lower()) #lower casing all the alphabets in the tags column","edef72c8":"new_df['tags'][0] # all letters are now in lower-case","6a1a517f":"new_df.head()","bbcdf71b":"from sklearn.feature_extraction.text import CountVectorizer","33df3ace":"cv = CountVectorizer(max_features=5000,stop_words='english')\nvectors = cv.fit_transform(new_df['tags']).toarray()","08253d0d":"import nltk #for stemming process","95754206":"from nltk.stem.porter import PorterStemmer\nps = PorterStemmer()","2d76cd35":"#defining the stemming function\ndef stem(text):\n    y=[]\n    \n    for i in text.split():\n        y.append(ps.stem(i))\n    return \" \".join(y)","704bb976":"new_df['tags'] = new_df['tags'].apply(stem) #appplying stemming process on tags column","c3b33b92":"from sklearn.metrics.pairwise import cosine_similarity","79318374":"similarity = cosine_similarity(vectors)","bb5f51e9":"def recommend(movie):\n    movie_index = new_df[new_df['title'] == movie].index[0]\n    distances = similarity[movie_index]\n    movies_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:6]\n    \n    for i in movies_list:\n        print(new_df.iloc[i[0]].title)","c5c3b6e4":"recommend('Avatar')  #enter movies only which are in the dataset, otherwise it would result in error","c028f02e":"import pickle","130ab64a":"# pickle.dump(similarity,open('similarity.pkl','wb')) #contains the similarity measure between different movies based on the tags","b7b0aec1":"### Tags Column\n\nThe tags column is the combination of the following columns : title + overview + genres + cast + keywords + crew (director)","83f9c80d":"Successfully extracted genres and keywords from the raw data ","3a2556b7":"Note : The similarity model is of around 220 - 250 MB in size. ","d657321f":"# System Overview\n\nIn this movie recommendation system, content-based similarity filtering based on the movie tags which the users either watch or search is being used. Another approach can be collabrative filtering, which is not used in this notebook. An advance approach can be using both these approach in a hybrid mode. ","81ec0cf0":"# System Working Demo","0d7888e3":"### Director Name Extraction Function","3a9e4469":"# Web App","41d9dc09":"# Importing Dependencies","9d2a62cc":"Successfully extracted first 3 actors from the 'cast' column","0609b0b5":"# Data Pre-Processing","bbbd3ade":"# Stemming Process","5f4a754f":"#### \ud83d\udc49 Find the code to web app on my github [here](https:\/\/github.com\/SagarBapodara\/movie-recommender)","f2c40540":"### Actor Names Extraction Function","379cb311":"### Genre Extraction Function","bb6e9bf3":"# Text Vectorization","aaf44276":"Now the 'tag' column will be used in the recommendation system, it contains the following data (in order) : \n\n- Overview (Short summary of the movie)\n- Genres (Type of movie)\n- Keywords \n- Cast (3 lead actors)\n- Crew (Name of Director)","39928cbc":"## Making the Recommendation","371009f2":"# Loading Data","8cfb6c26":"# Similarity Measure Between Movies\n\nFor calculating similarity, the cosine distance between different vectors will be used.  ","ce82c4f0":"![recommendation system.png](attachment:c803dcf7-b8d7-4e2a-940f-0b6b324939f7.png)\n\n# What is a Movie Recommendation System?\n\nA movie recommender system is a system that seeks to predict or filter preferences according to the user's choices. The created Web-App using Python is a similar system, which suggests movies based on the user's liked movies.","18fe0ce5":"### Important columns to be used in recommendation system : \n\n- genres\n- id\n- keywords\n- title\n- overview\n- cast\n- crew ","563f22ec":"# Interesting?\n\n#### \u26a1 If you found this notebook useful & interesting, kindly upvote and comment your views :)","3903a1dd":"### Pre-Processing the overview column","7bb43ae0":"# Exporting the Model","89f29301":"The new dataframe will contain : movie_id + title + tags columns","f434b955":"In this work, only top (first) 3 actors (which are lead in any movie) are being used to create tags","37923de5":"# New Dataframe to be used ","1dca7818":"# Merging DataFrames\n\nMerging both movies and credits dataframe ","5d4c48ff":"Successfully extracted the director from the 'crew' column","fe819ad2":"# Recommendation Function","269be951":"#### \ud83d\udc49 View the Web app in action [here](https:\/\/www.youtube.com\/watch?v=z4QQQ2U3NxU)"}}