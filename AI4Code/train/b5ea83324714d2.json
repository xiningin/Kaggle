{"cell_type":{"530f318c":"code","c14d8557":"code","129a88ab":"code","4ed76841":"code","93e4c669":"code","bd49dd61":"code","add81e4f":"code","27466354":"code","fa504700":"code","3fb937fd":"code","1cae32ac":"code","ca0a94f5":"code","797bc129":"code","d17d6736":"code","1ac666d3":"code","2f4e07fb":"code","d8e48d03":"code","d044960f":"code","72f30235":"code","9fc465df":"code","0060b848":"code","6ae7a9f0":"code","1ad4fb75":"code","b6412f0b":"code","f425a238":"code","818d8724":"code","c1b62626":"code","40734cef":"code","e61e25e4":"code","1ea2030e":"code","9e9ac37f":"code","4ab14039":"code","32714805":"code","5b8aad7a":"code","09722945":"markdown","c0d7a778":"markdown","06e93dc9":"markdown","3f3d6e8d":"markdown","889fcdd8":"markdown","58164cd2":"markdown","581fbbba":"markdown","62bce870":"markdown","a22e84fc":"markdown","28f6ae62":"markdown","3576d4f1":"markdown","d2163c19":"markdown","45bf1535":"markdown","06cdbbc2":"markdown","04da296c":"markdown","c97d6081":"markdown","4f09e2db":"markdown","75185482":"markdown","19541e22":"markdown","9d2e04e7":"markdown","8feff155":"markdown","26d5fc7b":"markdown","497a5ecf":"markdown","e64c5b93":"markdown","26c52a3f":"markdown"},"source":{"530f318c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c14d8557":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nfrom statsmodels.tsa.stattools import adfuller\nimport statsmodels.formula.api as smf\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport itertools","129a88ab":"data_matrix = pd.read_csv(\"..\/input\/LaturRains_1965_2002.csv\",sep=\"\\t\")\ndata_matrix.head()","4ed76841":"data_matrix.set_index('Year', inplace=True)\ndata_matrix.head()","93e4c669":"data_matrix = data_matrix.transpose()\ndata_matrix","bd49dd61":"dates = pd.date_range(start='1965-01', freq='MS', periods=len(data_matrix.columns)*12)\ndates","add81e4f":"plt.figure(figsize=(13,7))\nplt.plot(data_matrix)\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","27466354":"plt.figure(figsize=(10,5))\n# type(data_matrix)\nplt.boxplot(data_matrix)\nplt.xlabel('Month')\nplt.ylabel('Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","fa504700":"print(\"Original: \",data_matrix.shape)\nrainfall_data_matrix_np = data_matrix.transpose().as_matrix()\nshape = rainfall_data_matrix_np.shape\nrainfall_data_matrix_np = rainfall_data_matrix_np.reshape((shape[0] * shape[1], 1))\nprint(\"After Transformation: \",rainfall_data_matrix_np.shape)","3fb937fd":"rainfall_data = pd.DataFrame({'Precipitation': rainfall_data_matrix_np[:,0]})\nrainfall_data.set_index(dates, inplace=True)\n\ntest_data = rainfall_data.ix['1995': '2002']\ntrain_data = rainfall_data.ix[: '1994']","1cae32ac":"train_data.tail() # 1965-1994","ca0a94f5":"test_data.tail() # 1995-2002","797bc129":"plt.figure(figsize=(20,5))\nplt.plot(rainfall_data, color='blue')\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Precipitation in mm')","d17d6736":"fig, axes = plt.subplots(2, 2, sharey=False, sharex=False)\nfig.set_figwidth(14)\nfig.set_figheight(8)\naxes[0][0].plot(rainfall_data.index, rainfall_data, label='Original')\naxes[0][0].plot(rainfall_data.index, rainfall_data.rolling(window=4).mean(), label='4-Months Rolling Mean')\naxes[0][0].set_xlabel(\"Years\")\naxes[0][0].set_ylabel(\"Precipitation in mm\")\naxes[0][0].set_title(\"4-Months Moving Average\")\naxes[0][0].legend(loc='best')\n############\naxes[0][1].plot(rainfall_data.index, rainfall_data, label='Original')\naxes[0][1].plot(rainfall_data.index, rainfall_data.rolling(window=8).mean(), label='8-Months Rolling Mean')\naxes[0][1].set_xlabel(\"Years\")\naxes[0][1].set_ylabel(\"Precipitation in mm\")\naxes[0][1].set_title(\"8-Months Moving Average\")\naxes[0][1].legend(loc='best')\n############\naxes[1][0].plot(rainfall_data.index, rainfall_data, label='Original')\naxes[1][0].plot(rainfall_data.index, rainfall_data.rolling(window=12).mean(), label='12-Months Rolling Mean')\naxes[1][0].set_xlabel(\"Years\")\naxes[1][0].set_ylabel(\"Precipitation in mm\")\naxes[1][0].set_title(\"12-Months Moving Average\")\naxes[1][0].legend(loc='best')\n############\naxes[1][1].plot(rainfall_data.index, rainfall_data, label='Original')\naxes[1][1].plot(rainfall_data.index, rainfall_data.rolling(window=16).mean(), label='16-Months Rolling Mean')\naxes[1][1].set_xlabel(\"Years\")\naxes[1][1].set_ylabel(\"Precipitation in mm\")\naxes[1][1].set_title(\"16-Months Moving Average\")\naxes[1][1].legend(loc='best')\n# ############\n# axes[0][1].plot(rainfall_data.index, rainfall_data, label='Original')\n# axes[0][1].plot(rainfall_data.index, rainfall_data.rolling(window=14).mean(), label='4-Months Rolling Mean')\n# axes[0][1].set_xlabel(\"Years\")\n# axes[0][1].set_ylabel(\"Number of Tractor's Sold\")\n# axes[0][1].set_title(\"14-Months Moving Average\")\n# axes[0][1].legend(loc='best')\nplt.tight_layout()\nplt.show()","1ac666d3":"#Determing rolling statistics\nrolmean = rainfall_data.rolling(window=12).mean()\nrolstd = rainfall_data.rolling(window=12).std()\n\n#Plot rolling statistics:\norig = plt.plot(rainfall_data, label='Original')\nmean = plt.plot(rolmean, label='Rolling Mean')\nstd = plt.plot(rolstd, label = 'Rolling Std',color='green')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)\n","2f4e07fb":"#dickey-fuller test\ndef adf_test(timeseries):\n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n    \nadf_test(rainfall_data.Precipitation) ","d8e48d03":"decomposition = sm.tsa.seasonal_decompose(rainfall_data, model='additive')\nfig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nfig.suptitle('Decomposition of time series')\nplt.show()","d044960f":"fig, axes = plt.subplots(1, 2, sharey=False, sharex=False)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(rainfall_data, lags=30, ax=axes[0], alpha=0.5)\nsmt.graphics.plot_pacf(rainfall_data, lags=30, ax=axes[1], alpha=0.5)\nplt.tight_layout()","72f30235":"#differencing with a factor of 12\ndiff_12_data = rainfall_data.diff(periods=12)\ndiff_12_data.dropna(inplace=True)\n\nplt.plot(diff_12_data)","9fc465df":"# Define the p, d and q parameters to take any value between 0 and 2\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]","0060b848":"pdq","6ae7a9f0":"seasonal_pdq ","1ad4fb75":"best_aic = np.inf\nbest_pdq = None\nbest_seasonal_pdq = None\ntemp_model = None\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:        \n        try:\n            temp_model = sm.tsa.statespace.SARIMAX(train_data,\n                                             order = param,\n                                             seasonal_order = param_seasonal,\n                                             enforce_stationarity=True,\n                                             enforce_invertibility=True)\n            results = temp_model.fit()\n#             print(\"AIC for SARIMA{}x{}12 model - AIC:{}\".format(param, param_seasonal, results.aic))\n            if results.aic < best_aic:\n                best_aic = results.aic\n                best_pdq = param\n                best_seasonal_pdq = param_seasonal\n        except:\n            continue\n\nprint(\"\")\nprint(\"Best SARIMAX{}x{}12 model - AIC:{}\".format(best_pdq, best_seasonal_pdq, best_aic))\n","b6412f0b":"best_pdq = (0, 0, 0)\nbest_seasonal_pdq = (1, 1, 1, 12)","f425a238":"#building the model with the best set of parameters obtained above\nbest_model = sm.tsa.statespace.SARIMAX(train_data,\n                                      order=best_pdq,\n                                      seasonal_order=best_seasonal_pdq,\n                                      enforce_stationarity=True,\n                                      enforce_invertibility=True)\nbest_results = best_model.fit()","818d8724":"print(best_results.summary().tables[0])","c1b62626":"pred_dynamic = best_results.get_prediction(start=pd.to_datetime('1985-01-01'), dynamic=True, full_results=True)\npred_dynamic_ci = pred_dynamic.conf_int()","40734cef":"rainfall_predicted = pred_dynamic.predicted_mean\nrainfall_truth = rainfall_data['1985':'1994'].Precipitation\nrainfall_predicted.shape\n# print(rainfall_predicted","e61e25e4":" #Plot the actual values.\naxis_plt = train_data['1985':'1999'].plot(label='Observed', figsize=(10, 6))\n\n# Plot the predicted values.\npred_dynamic.predicted_mean[:'1999'].plot(ax=axis_plt, label='Dynamic Forecast')\n\n# Plot confidence values and fill it with some colour.\n#axis_plt.fill_between(pred_dynamic_ci.index, pred_dynamic_ci.iloc[:, 0], pred_dynamic_ci.iloc[:, 1], color='k', alpha=0.1)\n#axis_plt.fill_betweenx(axis_plt.get_ylim(), pd.to_datetime('1990'), pd.to_datetime('2000'), alpha=0.1, zorder=-1)\n\n# Set labels.\naxis_plt.set_xlabel('Years')\naxis_plt.set_ylabel('Precipitation')\n\n# Put legend on the plot at the best place it fits.\nplt.legend(loc='best')","1ea2030e":"# Get forecast 96 steps (8 years) ahead in future\nn_steps = 96\npred_uc_95 = best_results.get_forecast(steps=n_steps, alpha=0.05) # alpha=0.05 95% CI","9e9ac37f":"index = pd.date_range(train_data.index[-1] + 1, periods=n_steps, freq='MS')\nforecast_data = pd.DataFrame(np.column_stack([pred_uc_95.predicted_mean]), \n                     index=index, columns=['forecast'])\n\nforecast_data.head()","4ab14039":"# Create the plot.\nplt.figure(figsize = (15, 5))\nplt.plot(rainfall_data['1985':], label = \"True value\")\nplt.plot(pred_dynamic.predicted_mean[:'1999'], color='green',label = \"Training set prediction\")\nplt.plot(forecast_data['forecast'],color='red', label = \"Test set prediction\")\nplt.xlabel(\"Months\")\nplt.ylabel(\"Precipitation in mm\")\nplt.title(\"Latur Rainfall Data Prediction - ARIMA\")\nplt.legend()\nplt.show()","32714805":"import math\nmse_train = math.sqrt(((rainfall_predicted - rainfall_truth) ** 2).mean())\nprint('Train RMSE {}'.format(round(mse_train, 4)))\nmse_test = math.sqrt(((forecast_data['forecast'] - rainfall_data['1995':'2003'].Precipitation) ** 2).mean())\nprint('Test RMSE {}'.format(round(mse_test, 4)))","5b8aad7a":"plot_df = pd.DataFrame({'':['train','test'], 'RMSE':[mse_train,mse_test]})\nax = plot_df.plot.bar(x='', y='RMSE', rot=0)","09722945":"** 2. Read, Pre-process and Visualize the Time Series Data **","c0d7a778":"**Predictions Time!**","06e93dc9":"<p>Test statistic is less than critical values.<\/p>\n<p>Hence it is stationary.<\/p>","3f3d6e8d":"<p>Seasonality within a window of 12 months seems to more appealing from the above plots.<\/p>","889fcdd8":"**2.2.2. Box and whisker plot**","58164cd2":"\n<b><font color='blue'>If the <font color=\"magenta\">test statistic &lt; critical value<\/font>, we can reject the null hypothesis <font color=\"magenta\">(the series is stationary)<\/font>.<br> When the <font color=\"magenta\">test statistic &gt; critical value<\/font>, we fail to reject the null hypothesis <font color=\"magenta\">(the series is not stationary).<\/font><\/font><\/b>\n\n<br><b><font color=\"green\">Here, the Test Statistic  &lt; critical value. Hence the series is stationary<\/font><\/b>.<br>\n<p> As the time series is not stationary, differencing is not required<\/p>","581fbbba":"<b> Choosing Parameters<\/b>\n<p> Let's try all combinations of different parameters and choose the best set whose AIC score is the least.<\/p>","62bce870":"A Box and whisker plot or simply a box Plot is the visual representation of the statistical five number summary of a given data set. For more information, visit [here](https:\/\/www.youtube.com\/watch?v=CoVf1jLxgj4).","a22e84fc":"Now we start with time series decomposition of this data to understand underlying patterns such as <b>trend<\/b>, <b>seasonality<\/b>, <b>cycle<\/b> and <b>irregular remainder<\/b> for the precipitation data.\n\nIn the above data, a cyclic pattern seems to be non-existent since the unit we are analysing is a relatively new unit to notice business cycles. Also in theory, business cycles in traditional businesses are observed over a period of 7 or more years. Hence, we won\u2019t include business cycles in this time series decomposition exercise. Also, we observe a overall increasing trend across years. We will build our model based on the following function:\n\n\\begin{equation*} Y_t = f(Trend_t, Seasonality_t, Remainder_t) \\end{equation*}","28f6ae62":"**2.2. Visualizations and conclusions**","3576d4f1":"<p>Let's run the Dicky Fuller Test on the timeseries<\/p>","d2163c19":"**1. Import libraries **","45bf1535":"<p>We find p and q values by plotting ACF and PACF plots.<\/p>","06cdbbc2":"**Applying Moving Average on different windows**","04da296c":"**Divide the data into Train and Test Sets**","c97d6081":"<b>Inferences<\/b>\n<ul>\n<li>The rainfall in the months January, February, March, April, May, Novemberand December is very less.<\/li>\n<li>The rainfall in the months August, September and October are high compared to rainfall in other months of the year.<\/li>\n<li>We can see a seasonal effect with a cycle of 12 months.<\/li>","4f09e2db":"<p>Let's plot the rolling mean and standard deviation on window of 12 months.<\/p>","75185482":"<h3> Decompose into components of time series<\/h3>\n<b>1. Trend<\/b>\n<p>Now, to begin with let's try to decipher <b>trends<\/b> embedded in the above precipitation time series.<\/p>\n<p> It is a formal way to go through statistical checks:<\/p>\n<ul><p>We can check stationarity using the following:<\/p><br>\n    <li> \n\n<b>Plotting Rolling Statistics:<\/b> We can plot the moving average or moving variance and see if it varies with time. By moving average\/variance we mean that at any instant 't', we'll take the average\/variance of the last year, i.e. last 12 months. But again this is more of a visual technique.<br>[Rolling average <a href=\"https:\/\/campus.datacamp.com\/courses\/pandas-foundations\/time-series-in-pandas?ex=9#skiponboarding\">1<\/a>,<a href=\"https:\/\/www.xenonstack.com\/blog\/data-science\/time-series-forecasting-machine-deep-learning\/\">2<\/a>]<\/li>\n\\begin{equation*} Moving Average = \\frac{\\sum_{i=-m}^{m} Y^{t+i}}{2m} \\end{equation*}<br>\n\n<li><b>ADF (Augmented Dickey Fuller) Test<\/b><br>\nThe Dickey Fuller test is one of the most popular statistical tests. It can be used to determine the presence of unit root in the series, and hence help us understand if the series is stationary or not. The null and alternate hypothesis of this test are:\n\n<b>Null Hypothesis:<\/b> The series has a unit root (value of a =1)<br>\n<b>Alternate Hypothesis:<\/b> The series has no unit root.<br>\nIf we fail to reject the null hypothesis, we can say that the series is non-stationary. This means that the series can be linear or difference stationary.<br>\n<\/li>\n<\/ul>","19541e22":"<b>ACF and PACF for (p,q)<\/b>","9d2e04e7":"<p> The fluctating plots clearly depict that there is some seasonality component present in the series.<\/p>\n<p> Thus we difference it to achieve non-seasonality<\/p>","8feff155":"**2.1 Preprocess the data**","26d5fc7b":"**Forecasts ..!!**","497a5ecf":"**2.3. Convert the dataframe into series values**","e64c5b93":"**2.2.1. Overall data plot**","26c52a3f":"<ul><li>Visualizations through different data plots help us understand more about the data and drives us to decide upon the next step to take.<\/li><li>\n    They provide impotant intuitions.<\/li><\/ul>"}}