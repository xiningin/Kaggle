{"cell_type":{"a800282f":"code","0bd63c83":"code","1cbac510":"code","573ee850":"code","888b95ba":"code","93a8704c":"code","8237922c":"code","38524a9a":"code","7972bf9d":"code","1a43e396":"code","47b4055a":"code","c25ac1b7":"markdown","7fdc2b13":"markdown"},"source":{"a800282f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bd63c83":"#Importing the library \nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\n","1cbac510":"%%time\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use","573ee850":"#For generating 0 or 1 on the basis of resp features(which are returns from the market)\ntrain['action'] =  ( ((train['resp_1'] > 0 ) | (train['resp_2'] > 0 ) | (train['resp_3'] > 0 ) | (train['resp_4'] > 0 )) & (train['resp'] > 0 ) ).astype('int')","888b95ba":"x_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']","93a8704c":"param_grid = {'num_leaves': [7, 15, 31, 80,120], \n              'max_depth': [5, 6, -1,7,8],\n             'n_estimators': [100, 200, 300,500,600]}","8237922c":"clf = lgb.LGBMClassifier\ngrid_searcher = GridSearchCV(estimator=clf, param_grid=param_grid, \n                             cv=5, verbose=1, n_jobs=4)\n","38524a9a":"\n#Hypertuned Model\nclf = lgb.LGBMClassifier(boosting_type='gbdt',\n                         num_leaves=50, \n                         max_depth=- 1,\n                         learning_rate=0.07,\n                         n_estimators=1000, \n                         subsample_for_bin=200000,\n                         objective='binary',\n                         metric='auc', \n                         min_split_gain=0.5,\n                         min_child_weight=1,\n                         min_child_samples=5, \n                         subsample=0.7,\n                         subsample_freq=1,\n                         colsample_bytree=0.75, \n                         reg_alpha=1.2,\n                         reg_lambda=1.2,\n                         random_state=42,\n                         n_jobs=- 1, \n                         silent=True,\n                         importance_type='split')","7972bf9d":"%time clf.fit(x_train, y_train)","1a43e396":"from tqdm import tqdm\nimport janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","47b4055a":"for (test_df, sample_prediction_df) in iter_test:\n    X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n    y_preds = clf.predict(X_test)\n    sample_prediction_df.action = y_preds\n    env.predict(sample_prediction_df)","c25ac1b7":"Original \n#Hypertuned Model\nclf = lgb.LGBMClassifier(boosting_type='gbdt', num_leaves=124, \n                         max_depth=- 1, learning_rate=0.07, n_estimators=50, \n                         subsample_for_bin=200000, objective='binary', metric='auc', \n                         min_split_gain=0.5, min_child_weight=1, min_child_samples=5, \n                         subsample=0.7, subsample_freq=1, colsample_bytree=0.75, \n                         reg_alpha=1.2, reg_lambda=1.2, random_state=42, n_jobs=- 1, \n                         silent=True, importance_type='split')","7fdc2b13":"# ***1 stage of hyper-param tuning: tuning model complexity***"}}