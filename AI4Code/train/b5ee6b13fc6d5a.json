{"cell_type":{"ad7b20ed":"code","f33d7434":"code","788a9a2f":"code","f71436e6":"code","8a2b3e3e":"code","de2196f6":"code","41971fd3":"code","87c6f73e":"code","9ebd54d2":"code","92432f79":"code","74c97bd7":"code","94749151":"code","f593ca8f":"code","baf991ef":"code","7b38adf9":"code","2f515a30":"code","dee01b86":"code","077a4f2c":"code","4a4ac7fb":"code","18d71ece":"code","34c03526":"code","8545bb7b":"code","b0d7430a":"markdown"},"source":{"ad7b20ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f33d7434":"train = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/test.csv\")","788a9a2f":"train.isnull().sum().sum()","f71436e6":"train","8a2b3e3e":"test.isnull().sum().sum()","de2196f6":"x_train = train.drop(['id','loss'],axis=1)\ny_train = train['loss']\ntest_id = test['id']\nx_test = test.drop(['id'],axis=1)","41971fd3":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport optuna\nfrom warnings import filterwarnings\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n\nfilterwarnings(\"ignore\", category=DeprecationWarning) \nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","87c6f73e":"X_train,X_val,Y_train,Y_val = train_test_split(x_train,y_train,random_state=26)","9ebd54d2":"def check_rmse(model,x_val,y_val):\n    pred = model.predict(x_val)\n    return np.sqrt(mean_squared_error(y_val,pred))","92432f79":"knn_reg = KNeighborsRegressor(n_jobs=-1)\nxgb_reg = XGBRegressor(n_jobs=-1)\nlgbm_reg = LGBMRegressor(n_jobs=-1)\ncat_reg =  CatBoostRegressor()","74c97bd7":"models = [knn_reg,xgb_reg,lgbm_reg,cat_reg]\nmodels_name = ['knn_reg','xgb_reg','lgbm_reg','cat_reg']","94749151":"rmse_error = []\nfor i,model in enumerate(models):\n    model.fit(X_train,Y_train)\n    rmse = check_rmse(model,X_val,Y_val)\n    rmse_error.append(rmse)\n    print(f\"Model : {models_name[i]}   rmse = {rmse}\")","f593ca8f":"import matplotlib.pyplot as plt\n%matplotlib inline","baf991ef":"plt.barh(models_name,rmse_error)\nplt.ylabel(\"Models\")\nplt.xlabel(\"RMSE\") \nplt.show()","7b38adf9":"def submission(model,filename):\n    pred = model.predict(x_test)\n    pred = pd.DataFrame(pred,columns=['loss'])\n    sub = pd.concat([test_id,pred],axis=1)\n    sub.set_index('id',inplace=True)\n    sub.to_csv(f\"Submission_file_{filename}.csv\")","2f515a30":"X_train, X_eval, Y_train, Y_eval = train_test_split(X_train, Y_train, test_size=0.1, random_state=42)","dee01b86":"def objective(trial):\n    param = {}\n    param['learning_rate'] = trial.suggest_discrete_uniform(\"learning_rate\", 0.005, 0.2, 0.01)\n    param['depth'] = trial.suggest_int('depth', 2, 4)\n    param['l2_leaf_reg'] = trial.suggest_discrete_uniform('l2_leaf_reg', 4.0, 6.0, 0.5)\n    param['min_child_samples'] = trial.suggest_categorical('min_child_samples', [1,2, 4])\n    param['grow_policy'] = 'Depthwise'\n    param['iterations'] = 8000\n    param['use_best_model'] = True\n    param['eval_metric'] = 'RMSE'\n    param['od_type'] = 'iter'\n    param['od_wait'] = 50\n    param['random_state'] = 42\n    param['logging_level'] = 'Silent'\n    regressor = CatBoostRegressor(**param)\n    regressor.fit(X_train.copy(), Y_train.copy(),\n                  eval_set=[(X_eval.copy(), Y_eval.copy())],\n                  early_stopping_rounds=80)\n    return check_rmse(regressor,X_val,Y_val)\n","077a4f2c":"%%time\nstudy = optuna.create_study(study_name='catboost-seed')\nstudy.optimize(objective, n_trials=10000, n_jobs=-1, timeout=24000)","4a4ac7fb":"study.best_params","18d71ece":"%%time\noptimized_regressor = CatBoostRegressor(learning_rate=study.best_params['learning_rate'],\n                                        depth=study.best_params['depth'],\n                                        l2_leaf_reg=study.best_params['l2_leaf_reg'],\n                                        min_child_samples=study.best_params['min_child_samples'],\n                                        grow_policy='Depthwise',\n                                        iterations=8000,\n                                        use_best_model=True,\n                                        eval_metric='RMSE',\n                                        od_type='iter',\n                                        od_wait=50,\n                                        random_state=42,\n                                        logging_level='Silent')\noptimized_regressor.fit(X_train.copy(), Y_train.copy(),\n                        eval_set=[(X_eval.copy(), Y_eval.copy())],\n                        early_stopping_rounds=100)\npred_train = optimized_regressor.predict(X_train.copy())\nprint(f\"rmse on training set : {check_rmse(optimized_regressor,X_train,Y_train)}\")\nprint(f\"rmse on valid set : {check_rmse(optimized_regressor,X_val,Y_val)}\")","34c03526":"submission(cat_reg,\"base_catboost\")","8545bb7b":"submission(optimized_regressor,\"Optimized_catboost\")","b0d7430a":"## Base models with default params"}}