{"cell_type":{"2a56300b":"code","8ca80f45":"code","a8240967":"code","805463f9":"code","811203aa":"code","3ff6e769":"code","3c03af09":"code","7a676ead":"code","24ca9084":"code","b72f0446":"code","abc7b8bd":"code","802b7af9":"code","8b27b8b7":"code","8f948a66":"code","9e5398a8":"markdown","a28fda21":"markdown","23da8513":"markdown","2da2c86b":"markdown","617da50b":"markdown","e7833feb":"markdown","2a6a9cc6":"markdown","a03bf595":"markdown"},"source":{"2a56300b":"import pandas as pd\nimport numpy as np\nimport json\nimport tensorflow.keras.layers as L\nimport tensorflow as tf\nimport plotly.express as px","8ca80f45":"# This will tell us the columns we are predicting\npred_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']","a8240967":"def gru_layer(hidden_dim, dropout):\n    return L.Bidirectional(L.GRU(hidden_dim, dropout=dropout, return_sequences=True))\n\ndef build_model(seq_len=107, pred_len=68, dropout=0.5, embed_dim=100, hidden_dim=128):\n    inputs = L.Input(shape=(seq_len, 3))\n\n    embed = L.Embedding(input_dim=len(token2int), output_dim=embed_dim)(inputs)\n    reshaped = tf.reshape(\n        embed, shape=(-1, embed.shape[1],  embed.shape[2] * embed.shape[3]))\n\n    hidden = gru_layer(hidden_dim, dropout)(reshaped)\n    hidden = gru_layer(hidden_dim, dropout)(hidden)\n    hidden = gru_layer(hidden_dim, dropout)(hidden)\n    \n    # Since we are only making predictions on the first part of each sequence, we have\n    # to truncate it\n    truncated = hidden[:, :pred_len]\n    \n    out = L.Dense(5, activation='linear')(truncated)\n\n    model = tf.keras.Model(inputs=inputs, outputs=out)\n\n    model.compile(tf.keras.optimizers.Adam(), loss='mse')\n    \n    return model","805463f9":"token2int = {x:i for i, x in enumerate('().ACGUBEHIMSX')}\n\ndef preprocess_inputs(df, cols=['sequence', 'structure', 'predicted_loop_type']):\n    return np.transpose(\n        np.array(\n            df[cols]\n            .applymap(lambda seq: [token2int[x] for x in seq])\n            .values\n            .tolist()\n        ),\n        (0, 2, 1)\n    )","811203aa":"train = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_df = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv')","3ff6e769":"train_inputs = preprocess_inputs(train)\ntrain_labels = np.array(train[pred_cols].values.tolist()).transpose((0, 2, 1))","3c03af09":"model = build_model()\nmodel.summary()","7a676ead":"# history = model.fit(\n#     train_inputs, train_labels, \n#     batch_size=64,\n#     epochs=100,\n#     callbacks=[\n#         tf.keras.callbacks.ReduceLROnPlateau(),\n#         tf.keras.callbacks.ModelCheckpoint('model.h5')\n#     ],\n#     validation_split=0.05\n# )","24ca9084":"# fig = px.line(\n#     history.history, y=['loss', 'val_loss'], \n#     labels={'index': 'epoch', 'value': 'Mean Squared Error'}, \n#     title='Training History')\n# fig.show()","b72f0446":"# public_df = test.query(\"seq_length == 107\").copy()\n# private_df = test.query(\"seq_length == 130\").copy()\n\n# public_inputs = preprocess_inputs(public_df)\n# private_inputs = preprocess_inputs(private_df)","abc7b8bd":"# # Caveat: The prediction format requires the output to be the same length as the input,\n# # although it's not the case for the training data.\n# model_short = build_model(seq_len=107, pred_len=107)\n# model_long = build_model(seq_len=130, pred_len=130)\n\n# model_short.load_weights('model.h5')\n# model_long.load_weights('model.h5')\n\n# public_preds = model_short.predict(public_inputs)\n# private_preds = model_long.predict(private_inputs)","802b7af9":"# print(public_preds.shape, private_preds.shape)","8b27b8b7":"# preds_ls = []\n\n# for df, preds in [(public_df, public_preds), (private_df, private_preds)]:\n#     for i, uid in enumerate(df.id):\n#         single_pred = preds[i]\n\n#         single_df = pd.DataFrame(single_pred, columns=pred_cols)\n#         single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n#         preds_ls.append(single_df)\n\n# preds_df = pd.concat(preds_ls)","8f948a66":"# submission = sample_df[['id_seqpos']].merge(preds_df, on=['id_seqpos'])\n# submission.to_csv('submission.csv', index=False)","9e5398a8":"Forked from https:\/\/www.kaggle.com\/xhlulu\/openvaccine-simple-gru-model\/notebook?scriptVersionId=42525616","a28fda21":"## Load and preprocess data","23da8513":"For each sample, we take the predicted tensors of shape (107, 5) or (130, 5), and convert them to the long format (i.e. $629 \\times 107, 5$ or $3005 \\times 130, 5$):","2da2c86b":"## Predict on test set","617da50b":"## Define helper functions and useful vars","e7833feb":"## Post-processing and submit","2a6a9cc6":"## Build and train model","a03bf595":"Public and private sets have different sequence lengths, so we will preprocess them separately and load models of different tensor shapes."}}