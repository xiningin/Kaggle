{"cell_type":{"1b4b2cea":"code","b576443e":"code","bcf04e9e":"code","3b56a665":"code","3deb43ec":"code","5182d87a":"code","ef2de623":"code","aa7bc998":"code","ffe03801":"code","a714c1a9":"code","cf903f55":"code","26b407ba":"code","a933c7d5":"code","5f2d1bda":"code","de0806e0":"code","5b73b70b":"code","7898eaca":"code","4286ff67":"code","9a8b9b2d":"code","5cfdacaf":"code","58aa7be3":"code","e6bcf66b":"code","a02b4eeb":"code","f828e531":"code","ebcd23ff":"code","e88fdd36":"code","74769b9a":"code","01c3bae7":"markdown","786ef491":"markdown","45d6055c":"markdown","6e399f58":"markdown","0f028500":"markdown","f2d79895":"markdown"},"source":{"1b4b2cea":"import numpy as np \nimport pandas as pd \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","b576443e":"data = pd.read_csv(\"..\/input\/Dataset_spine.csv\")","bcf04e9e":"data.info()","3b56a665":"data.head()","3deb43ec":"data.drop(\"Unnamed: 13\",axis=1,inplace=True)","5182d87a":"data[\"Class_att\"] = [1 if i ==\"Abnormal\" else 0  for i in data.Class_att]","ef2de623":"plt.figure(figsize = (15,15))\nsns.heatmap(data = data.corr(), annot=True, linewidths=.3, fmt=\"1.2f\")\nplt.show()","aa7bc998":"data.describe()","ffe03801":"c1 = data[data.Class_att == 1].describe()\nc1","a714c1a9":"c2 = data[data.Class_att == 0].describe()\nc2","cf903f55":"plt.figure(figsize = (15,12))\n\nplt.subplot(221)\nsns.scatterplot(x=data.Col1,y=data.Col5,hue=data.Class_att)\nplt.xlabel(\"Pelvic Incidence\")\nplt.ylabel(\"Pelvic Radius\")\n\nplt.subplot(222)\nsns.scatterplot(x = data.Col1,y = data.Col4,hue=data.Class_att)\nplt.xlabel(\"Pelvic Incidence\")\nplt.ylabel(\"Sacral Slope\")\n\nplt.subplot(223)\nsns.scatterplot(x = data.Col4,y = data.Col5,hue=data.Class_att)\nplt.xlabel(\"Sacral Slope\")\nplt.ylabel(\"Pelvic Radius\")\n\nplt.subplot(224)\nsns.scatterplot(x = data.Col1,y = data.Col3,hue=data.Class_att)\nplt.xlabel(\"Pelvic Incidence\")\nplt.ylabel(\"Lumbar Lordosis Angle\")\n\nplt.show()","26b407ba":"plt.figure(figsize=(15,12))\n\nplt.subplot(221)\nsns.boxplot(x = data.Class_att,y = data.Col5)\nplt.ylabel(\"Pelvic Radius\")\n\nplt.subplot(222)\nsns.swarmplot(x = data.Class_att, y = data.Col6)\nplt.ylabel(\"Degree Spondylolisthesis\")\nplt.show()","a933c7d5":"X = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values","5f2d1bda":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX = ss.fit_transform(X)","de0806e0":"from sklearn.model_selection import train_test_split,cross_val_score\nX_train,X_test,y_train,y_test = train_test_split(X,y ,test_size=0.3,random_state=47)","5b73b70b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_auc_score,auc\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)","7898eaca":"cvs = cross_val_score(estimator = lr, X = X_train, y = y_train, cv = 10)\n\nprint(cvs)\nprint(50*\"*\")\nprint(cvs.mean())","4286ff67":"cm = confusion_matrix(y_test,y_pred)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(cm,annot=True,linewidths=.3)\nplt.show()\n\nprint(classification_report(y_test,y_pred))","9a8b9b2d":"import scikitplot as skplt\n\nskplt.metrics.plot_roc_curve(y_test, lr.predict_proba(X_test),figsize=(6,6))\nplt.show()\n\nprint(\"Auc Score: {}\".format(roc_auc_score(y_test,y_pred)))","5cfdacaf":"from sklearn.neighbors import KNeighborsClassifier\n\nl = []\nfor i in range(1,21):\n    knn = KNeighborsClassifier(n_neighbors  = i)\n    knn.fit(X_train,y_train)\n    l.append(knn.score(X_test,y_test))\n\nplt.figure(figsize=(10,5))    \nsns.lineplot(x = range(1,21), y = l)\nplt.show()","58aa7be3":"knn = KNeighborsClassifier(n_neighbors  = 17)\nknn.fit(X_train,y_train)\ny_pred = knn.predict(X_test)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(confusion_matrix(y_test,y_pred),annot=True,linewidths=.3)\nplt.show()\n\nprint(classification_report(y_test,y_pred))","e6bcf66b":"from sklearn.svm import SVC\n\nl = []\nfor i in [\"linear\",\"poly\",\"rbf\"]:\n    svc = SVC(kernel = i)\n    svc.fit(X_train,y_train)\n    y_pred = svc.predict(X_test)\n    \n    l.append(y_pred)\n\n\nprint(\"Linear score {}\".format(classification_report(y_test,l[0])))\nprint(\"Poly score {}\".format(classification_report(y_test,l[1])))\nprint(\"Rbf score {}\".format(classification_report(y_test,l[2])))\n","a02b4eeb":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\nnb.fit(X_train,y_train)\ny_pred = nb.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","f828e531":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\n\ndt = DecisionTreeClassifier()\n\nparam_dist = {\"max_depth\": [3, None],\n              \"max_features\": range(1, 9),\n              \"min_samples_leaf\": range(1, 9),\n              \"criterion\": [\"gini\", \"entropy\"]}\n\ndt_cv =RandomizedSearchCV(estimator = dt,param_distributions=param_dist)\ndt_cv.fit(X_train,y_train)\n    \nprint(dt_cv.best_params_)\nprint(dt_cv.best_score_)","ebcd23ff":"dt = DecisionTreeClassifier(criterion=\"gini\",max_depth=  3,max_features=8,min_samples_leaf=7)\ndt.fit(X_train,y_train)\ny_pred = dt.predict(X_test) \nprint(classification_report(y_test,y_pred))","e88fdd36":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nl = [\"gini\",\"entropy\"]\n\ngrid = {\"criterion\":l,\"n_estimators\":range(1,20)}\n\nrf = RandomForestClassifier()\n\nrf_cv = GridSearchCV(estimator = rf , param_grid = grid , cv = 10)\nrf_cv.fit(X_train,y_train)\n\nprint(rf_cv.best_params_)\nprint(rf_cv.best_score_)","74769b9a":"rf = RandomForestClassifier(criterion=\"entropy\",n_estimators = 10)\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(confusion_matrix(y_test,y_pred),annot=True,linewidths=.3)\nplt.show()\n\nprint(classification_report(y_test,y_pred))\nprint(rf.score(X_test,y_test))","01c3bae7":"**KNN Classification**","786ef491":"**Random Forest**","45d6055c":"**Support Vector Machine**","6e399f58":"**Decision Tree**","0f028500":"**Naive Bayes**","f2d79895":" **Logistic Regression**"}}