{"cell_type":{"7bc07dcf":"code","9f398b4a":"code","51af875a":"code","72385613":"code","b75f59fc":"code","c0073657":"code","83d92ea9":"code","72a354f0":"code","efc3b8ba":"code","7348c70a":"code","1987652b":"code","669d2a5c":"code","bba43ec5":"code","62e65e19":"code","ec6b0e7e":"code","9c8f9b23":"code","6a896266":"code","7cdec1f3":"markdown","99717de1":"markdown","e1316c27":"markdown","94083008":"markdown","b8284bc4":"markdown","24cbb1c4":"markdown","79e17264":"markdown"},"source":{"7bc07dcf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","9f398b4a":"sample_submission = pd.read_csv(\"..\/input\/data-science-bowl-2019\/sample_submission.csv\")\nspecs = pd.read_csv(\"..\/input\/data-science-bowl-2019\/specs.csv\")\ntest = pd.read_csv(\"..\/input\/data-science-bowl-2019\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/data-science-bowl-2019\/train.csv\")\ntrain_labels = pd.read_csv(\"..\/input\/data-science-bowl-2019\/train_labels.csv\")","51af875a":"train.shape","72385613":"train.head()","b75f59fc":"train_labels.head()","c0073657":"train_labels.title.unique()","83d92ea9":"#Drop unnecessary columns\ntrain = train.drop(['event_data', 'event_id', 'timestamp'], axis = 1)","72a354f0":"#Merge train and train_lables dataframes\ngroup = pd.merge(train, train_labels, on= ['game_session', 'installation_id', 'title']).sort_values(['game_session','installation_id'])\ntrain.head()","efc3b8ba":"#Condense rows into summarized dataframe\ngroup.groupby(['game_session', 'installation_id', 'title', 'type', 'world', 'num_correct', 'num_incorrect','accuracy_group'])\\\n.agg({'game_time':'sum', 'event_code':list})","7348c70a":"#Import label encoder\nfrom sklearn import preprocessing\n\n#Create label encoder\nle = preprocessing.LabelEncoder()","1987652b":"# Create encoded variables to use in model\n\n# First Feature\n#group['title'] = group['title'].astype('category').cat.codes\ntitle = le.fit_transform(group['title'])\n\n#Second Feature\ngame_time = le.fit_transform(group['game_time'])\n\n#Target variable from training labels\noutcome = le.fit_transform(group['accuracy_group'])","669d2a5c":"#Combine features into single list of tuples\nfeatures = list(zip(title,game_time))","bba43ec5":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(features, outcome, test_size = .8)","62e65e19":"## KNN Model","ec6b0e7e":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Create KNN Classifier\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n#Train the model using the training sets\nmodel.fit(X_train,y_train)","9c8f9b23":"#Predict the response for test dataset\npredicted = model.predict(X_test)","6a896266":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, predicted))","7cdec1f3":"## Transform the Data","99717de1":"## Prepare Data for KNN Model","e1316c27":"\nsource: https:\/\/www.datacamp.com\/community\/tutorials\/k-nearest-neighbor-classification-scikit-learn","94083008":"\n##Simple Data Exploration","b8284bc4":"# KNN Means Model","24cbb1c4":"As a beginner to data science I wanted to participate in this competition as a project based learning opportunity. Thank you to everyone who has shared their notebooks, I have discovered vast amounts of valuable insights and methods.\n\nPlease enjoy my exploration into the PBS Kids Measure Up data, and a simple implementation of a KNN Means algorithm using the sklearn library. ","79e17264":"## Determine Accuracy"}}