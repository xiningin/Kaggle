{"cell_type":{"40bc5a97":"code","77693217":"code","06a836c8":"code","6248d563":"code","327e42ce":"code","abb324b7":"code","7422571e":"code","6107ae6a":"code","a8695311":"code","3d66406e":"code","a709092e":"code","5610cfa2":"code","762f2f51":"code","df927359":"code","a5b9f90a":"code","5dacaa38":"code","e9dc1a7a":"code","c176a10c":"code","535ab555":"code","08e35822":"code","77fcf982":"code","3f5d55d1":"code","ae53af22":"code","25f0256c":"code","fc3d86d7":"code","a3f0f85d":"code","b7756ed3":"code","c13095b8":"code","965b33fa":"code","8cfae131":"code","8050664b":"code","9bd8d691":"code","ac9f25a9":"code","1f43b1e1":"code","21876d85":"code","d78a6203":"code","558a18ef":"code","1bfcd6f1":"code","580017eb":"markdown","e1051727":"markdown","2cc8f940":"markdown","0130fc3b":"markdown","d120e2fc":"markdown"},"source":{"40bc5a97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77693217":"train  = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/Train\/train.csv')\ntest   = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/sample_submission.csv')","06a836c8":"print(train.shape)\nprint(test.shape)","6248d563":"(train.isna().sum() \/ train.shape[0])*100","327e42ce":"(test.isna().sum() \/ test.shape[0])*100","abb324b7":"plt.figure(figsize = (15,7))\n\nsns.countplot(train['Stay'])","7422571e":"from sklearn.preprocessing import LabelEncoder, StandardScaler\n\nle = LabelEncoder()\ntrain['Stay'] = le.fit_transform(train['Stay'])","6107ae6a":"df = train.append(test)","a8695311":"df.dtypes","3d66406e":"df.head()","a709092e":"cols = ['Hospital_code','City_Code_Hospital','Hospital_region_code','Severity of Illness','Visitors with Patient','Age']\nplt.figure(figsize = (15,7))\nfor i in cols:\n    sns.countplot(train[i])\n    plt.show()","5610cfa2":"df[df['Bed Grade'].isna() == False].nunique()","762f2f51":"df.drop(['case_id','patientid'],axis = 1,inplace = True)","df927359":"df.isna().sum()","a5b9f90a":"plt.figure(figsize = (15,7))\n\nsns.countplot(df['Bed Grade'])","5dacaa38":"df['Bed Grade'] = np.where(df['Bed Grade'].isna(),2.0,df['Bed Grade'])","e9dc1a7a":"plt.figure(figsize = (15,7))\n\nsns.countplot(df['City_Code_Patient'])","c176a10c":"df['City_Code_Patient'] = np.where(df['City_Code_Patient'].isna(),8.0,df['City_Code_Patient'])","535ab555":"df = pd.get_dummies(data=df,columns=['Hospital_type_code', 'Hospital_region_code', 'Department', 'Ward_Type',\n       'Ward_Facility_Code', 'Type of Admission', 'Severity of Illness',\n       'Age'])","08e35822":"df.isna().sum()","77fcf982":"df['Bed Grade'] = df['Bed Grade'].astype(int)\ndf['City_Code_Patient'] = df['City_Code_Patient'].astype(int)\ndf['Admission_Deposit'] = df['Admission_Deposit'].astype(int)","3f5d55d1":"train_df = df[df['Stay'].isna() == False] \ntest_df  = df[df['Stay'].isna() == True]","ae53af22":"cat=train_df.select_dtypes(['object']).columns","25f0256c":"print(train_df.shape)\nprint(test_df.shape)","fc3d86d7":"test_df.drop('Stay',axis = 1,inplace = True)","a3f0f85d":"train_df['Stay'] = train_df['Stay'].astype(int)","b7756ed3":"df_train, df_eval = train_test_split(train_df, test_size=0.20, random_state=3600, shuffle=True, stratify= train_df['Stay'])","c13095b8":"feature_cols = train_df.columns.tolist()\nfeature_cols.remove('Stay')\n\nlabel_col = 'Stay'\nprint(feature_cols)","965b33fa":"cat_cols = feature_cols\ncat_cols.remove('Admission_Deposit')\ncat_cols","8cfae131":"params = {}\nparams['learning_rate'] = 0.025\nparams['max_depth'] = 100\nparams['n_estimators'] = 1000\nparams['objective'] = 'multiclass'\nparams['boosting_type'] = 'gbdt'\nparams['subsample'] = 0.8\nparams['random_state'] = 3600\nparams['colsample_bytree']=0.7\nparams['min_data_in_leaf'] = 100\nparams['reg_alpha'] = 1.6\nparams['reg_lambda'] = 1.1","8050664b":"clf = lgb.LGBMClassifier(**params)\n    \nclf.fit(df_train[feature_cols], df_train[label_col], early_stopping_rounds=100, eval_set=[(df_train[feature_cols], df_train[label_col]), (df_eval[feature_cols], df_eval[label_col])], eval_metric='multi_error', verbose=True, categorical_feature=cat_cols)\n\neval_score = accuracy_score(df_eval[label_col], clf.predict(df_eval[feature_cols]))\n\nprint('Eval ACC: {}'.format(eval_score))","9bd8d691":"best_iter = clf.best_iteration_\nparams['n_estimators'] = best_iter\nprint(params)","ac9f25a9":"clf = lgb.LGBMClassifier(**params)\n\nclf.fit(train_df[feature_cols], train_df[label_col], eval_metric='multi_error', verbose=False, categorical_feature=cat_cols)\n\neval_score_acc = accuracy_score(train_df[label_col], clf.predict(train_df[feature_cols]))\n\nprint('ACC: {}'.format(eval_score_acc))","1f43b1e1":"preds = clf.predict(test_df[feature_cols])\npreds","21876d85":"\nplt.rcParams['figure.figsize'] = (12,50)\nlgb.plot_importance(clf)\nplt.show()","d78a6203":"preds = le.inverse_transform(preds)","558a18ef":"sample['Stay'] = preds","1bfcd6f1":"sample.to_csv('Submission_revised.csv',index = False)","580017eb":"\nPercentage of null values are very less in both train and test data set","e1051727":"Since the unique value of CASE_ID and PATIENT_ID are very high,we will omit this","2cc8f940":"Handling Missing values ","0130fc3b":"bed grade and city_code_patient have null values","d120e2fc":"The lables are not uniformly distributed, we have to find a way either to downsample or undersample\n\nWe can use SMOTE technique\n\n"}}