{"cell_type":{"b162c653":"code","05ca5cf4":"code","59026b76":"code","73a15732":"code","6d15b02e":"code","f68b1e55":"code","6313e9c2":"code","bb996148":"code","b1b20893":"code","73d8ff70":"code","7dcc2e0b":"code","9d4eee92":"code","393c23e8":"code","2f1ef91c":"code","a0524bff":"code","590f55e2":"code","4cc8a578":"code","e5aedf25":"code","d56d165a":"code","2bac377a":"code","26ee7725":"code","0f94a648":"code","5cff3e5a":"code","21e8738d":"code","36d78019":"code","e1c725e6":"code","65014e71":"code","b33e3778":"code","4a822846":"code","5986c310":"code","5d102fba":"code","96803280":"code","7ae97ea6":"code","291de3b2":"markdown","eff22dd3":"markdown","7311e2b2":"markdown","44f60628":"markdown","c519fc67":"markdown","e306501d":"markdown","d219e74c":"markdown","c0fb9113":"markdown","4e184829":"markdown","04cd7dc5":"markdown","a26f6808":"markdown","9f219ad0":"markdown","ce44d61b":"markdown","9b7c32b2":"markdown","e13f0a41":"markdown","6c06f20f":"markdown","15ca5569":"markdown","4b0aaffb":"markdown","cdd31607":"markdown","33bcb966":"markdown","7d7fbd59":"markdown","eaeb2949":"markdown","92676483":"markdown","32472bf3":"markdown","e8b1fe25":"markdown","b103f92b":"markdown","903a51d3":"markdown","e4b164d5":"markdown"},"source":{"b162c653":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","05ca5cf4":"from sklearn.preprocessing import OneHotEncoder\nimport datetime as dt\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split","59026b76":"train=pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv')\nsubmission=pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv')","73a15732":"train.columns","6d15b02e":"test.columns","f68b1e55":"#train['Province\/State'].unique()","6313e9c2":"train['Province\/State'].fillna('No Province',inplace=True)","bb996148":"test['Province\/State'].fillna('No Province',inplace=True)","b1b20893":"ohe=OneHotEncoder(handle_unknown='ignore')","73d8ff70":"train['Date']= pd.to_datetime(train['Date']) \ntest['Date']= pd.to_datetime(test['Date']) ","7dcc2e0b":"def create_time_features(df):\n    df['date'] = df['Date']\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X","9d4eee92":"create_time_features(train)\ncreate_time_features(test)","393c23e8":"train=train.drop(columns=['Date'],axis=1)\ntest=test.drop(columns=['Date'],axis=1)","2f1ef91c":"train=train.drop(columns=['date'],axis=1)\ntest=test.drop(columns=['date'],axis=1)","a0524bff":"train.head(3)","590f55e2":"s = (train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","4cc8a578":"train_dummies=pd.get_dummies(train['Country\/Region'])","e5aedf25":"test_dummies=pd.get_dummies(test['Country\/Region'])","d56d165a":"train1_dummies=pd.get_dummies(train['Province\/State'])\ntest1_dummies=pd.get_dummies(test['Province\/State'])","2bac377a":"train=train.drop(['Country\/Region','Province\/State','Id'],axis=1)\ntest=test.drop(['Country\/Region','Province\/State','ForecastId'],axis=1)","26ee7725":"train=pd.concat([train,train_dummies,train1_dummies],axis=1)","0f94a648":"test=pd.concat([test,test_dummies,test1_dummies],axis=1)","5cff3e5a":"train.head(3)","21e8738d":"features=train.drop(['ConfirmedCases','Fatalities'],axis=1)\ntarget1=train['ConfirmedCases']\ntarget2=train['Fatalities']","36d78019":"rf=DecisionTreeRegressor(criterion='mse', splitter='best')","e1c725e6":"print(features.shape)\nprint(target1.shape)\nprint(test.shape)","65014e71":"rf.fit(features,target1)","b33e3778":"predict_cases=rf.predict(test)","4a822846":"submission['ConfirmedCases']=predict_cases","5986c310":"rf.fit(features,target2)\npredict_fatalities=rf.predict(test)\nsubmission['Fatalities']=predict_fatalities","5d102fba":"submission.round().astype(int)","96803280":"submission.head(3)","7ae97ea6":"submission.to_csv('submission.csv',index=False)","291de3b2":"We now want to predict the target2(Fatalities) by ConfirmedCases because we get the prediction of ConfirmedCases from our prediction so concate and make anorh","eff22dd3":"So let's go","7311e2b2":"In dataset we see many of the countries have no Province\/State so we can fill the (nan) values by 'No province', because when we do the catagorical encoding it will count as a catagory.\nIf you want see how many unique type of province uncomment the below code","44f60628":"Ok, now we encode the ","c519fc67":"Pandas has it own built in get_dummies method for catagorical encoding","e306501d":"The dataset may like horrible, because of the dummies variable, if you have not idea about this, please search in the google and clear the concep","d219e74c":"The submissio result comes with float number so we round it and convert to int values","c0fb9113":"Separate the features and target, we have two target one for ConfirmedCases and another Fatalities, so the target also two target1 and target2","4e184829":"Also we input our prediction result in submission file","04cd7dc5":"Here we transform the normal date to pandas datetime","a26f6808":"First import some library.","9f219ad0":"Drop the dataset Province and Country , we no more need it.","ce44d61b":"We encode both the Province\/State and Country\/Region","9b7c32b2":"Let's put the dataset on the function for converting","e13f0a41":"Let's see the shape of the features and target","6c06f20f":"Train the model by fit method","15ca5569":"Here we use the DecisonTreeRregressor as our algorithm, which is very much good for catagorical prediction, we use Regressor based algorithm because it continious value prediction problem","4b0aaffb":"And get the prediction by predict method.\n","cdd31607":"Concate the main dataset and dummies features","33bcb966":"Now, we detect the object type data in our dataset have and convert it to catagorical features.\nFirst,we get the objects in object_cols","7d7fbd59":"Now import the dataset, you find the dataset pathway in rigth side of of kaggle notebook in (input) box","eaeb2949":"Now get the submission file by to_csv","92676483":"Individual second,minutes,hours,date help the algorithm predict good","32472bf3":"Let's see what are columns have our dataset","e8b1fe25":"So, the normal date value no more need, now we can drop this features","b103f92b":"Train the model,predict and input the result in submission file for another target(target2)","903a51d3":"The (create_time_features) function create another date , we also drop that","e4b164d5":"Assalamu Alaikum, Covid-19 the world pandemic is now hot topic of the world. Let's do some work with this virus current circumstance by Kaggle given dataset. Our work is most easiest one. The result may differ because the leaderboard is calculated with approximately 28% of the test data and final on 72% test data"}}