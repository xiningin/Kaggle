{"cell_type":{"144ff1d0":"code","e647d8b1":"code","50a75a8b":"code","d0e1ba03":"code","ace36801":"code","aa53035a":"code","e692e07d":"code","c8c78cce":"code","f821a98a":"code","2705540f":"code","d188c217":"code","31e1ba3c":"code","407d57af":"code","5575095a":"code","e26f0787":"code","278b4f11":"code","5b6b9b3e":"code","e6e9ad4c":"code","f851f68b":"code","7e977e9f":"code","af22b4d3":"code","fecbb5f1":"code","a305e0fa":"code","b6920b8c":"code","c61b09ee":"code","df44d26c":"code","d9aefaff":"code","0d0ca548":"code","77984ecf":"code","61e596cd":"code","6c1ca8d1":"code","d4a456d9":"code","5ad5f9f3":"code","17a083c4":"code","26f938a9":"code","cb871e48":"code","1d849898":"code","9310ebc3":"code","f2f396b7":"code","9a7e3ea0":"code","7c1e430a":"code","69e59dad":"code","0a5ff424":"code","8bc5aabd":"code","6decbd89":"code","f2838947":"code","c40da91e":"code","9334465f":"code","29be40aa":"code","b5bbe0a0":"code","5c7869ad":"code","241c2fa2":"code","c5f4ce47":"code","663465a9":"code","e3143ab1":"code","6c819648":"code","5cabe450":"code","49d142b4":"code","109fa174":"code","e487220b":"code","a8865532":"code","86dd4865":"code","91e61848":"code","d4821454":"code","d0526e50":"code","c05f4a25":"markdown","29e1ca19":"markdown","a38003d1":"markdown","0a3b6451":"markdown","da127045":"markdown","c0689c2a":"markdown","7249c3de":"markdown","da47b9d1":"markdown","8d6009d5":"markdown","371b9e22":"markdown","269bdb54":"markdown","2dbd4aab":"markdown","538fadf6":"markdown","66555164":"markdown","537c1c1c":"markdown","4b3ee7f4":"markdown","052b2380":"markdown","2567ec20":"markdown","71392f0e":"markdown","5cb184c8":"markdown","05bf8906":"markdown","34d825cd":"markdown","e87e9ba7":"markdown","1a575ccb":"markdown","62eccf0b":"markdown","e1686c0b":"markdown","037953b4":"markdown","937685fe":"markdown","72800f0c":"markdown","6d40eb1f":"markdown","a90eb103":"markdown","0e732444":"markdown","33307768":"markdown","f18ea2e5":"markdown","bad1f911":"markdown","ffdfcaac":"markdown","039ef242":"markdown","26cec900":"markdown","5bb1d670":"markdown","79c67f2a":"markdown","53a1112c":"markdown","a5b1e7d6":"markdown"},"source":{"144ff1d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e647d8b1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","50a75a8b":"url='..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv'\ndf=pd.read_csv(url)\ndf.head()","d0e1ba03":"df.info()","ace36801":"df.columns","aa53035a":"df['user_verified']=df['user_verified'].apply(lambda x:'verified' if x==True else 'not_verified')","e692e07d":"from datetime import date\ndf['today']=date.today()\ndf['user_created']=pd.to_datetime(df['user_created']).dt.year\ndf['today']=pd.to_datetime(df['today'])\ndf['today']=df['today'].dt.year\ndf['acc_age']= df['today']-df['user_created']","c8c78cce":"print(max(df['date']))\nprint(min(df['date']))","f821a98a":"df['date']=pd.to_datetime(df['date'])","2705540f":"L = ['year', 'month', 'day', 'dayofweek', 'dayofyear', 'weekofyear', 'quarter']\ndf = df.join(pd.concat((getattr(df['date'].dt, i).rename(i) for i in L), axis=1))","d188c217":"df['total_engagement']=df['retweets']+df['favorites']","31e1ba3c":"df['text'].values[:2]","407d57af":"df['tweet_lenght']=df['text'].apply(lambda x:len(x))\ndf['tweet_lenght'].describe()","5575095a":"df['tweet_length']=df['text'].apply(lambda x:'short' if len(x)<=130 else 'long')","e26f0787":" df['user_location'].value_counts()","278b4f11":"loc_df = df['user_location'].str.split(',',expand=True)\nloc_df=loc_df.rename(columns={0:'fst_loc',1:'snd_loc'})","5b6b9b3e":"# Remove Spaces \nloc_df['snd_loc'] = loc_df['snd_loc'].str.strip()\n# Rename States \nstate_fix = {'Ontario': 'Canada','United Arab Emirates': 'UAE','TX': 'USA','NY': 'USA'\n                  ,'FL': 'USA','England': 'UK','Watford': 'UK','GA': 'USA','IL': 'USA'\n                  ,'Alberta': 'Canada','WA': 'USA','NC': 'USA','British Columbia': 'Canada','MA': 'USA','ON':'Canada'\n            ,'OH':'USA','MO':'USA','AZ':'USA','NJ':'USA','CA':'USA','DC':'USA','AB':'USA','PA':'USA','SC':'USA'\n            ,'VA':'USA','TN':'USA','New York':'USA','Dubai':'UAE','CO':'USA'}\nloc_df = loc_df.replace({\"snd_loc\": state_fix}) \nloc_df['snd_loc'].value_counts()[:20]","e6e9ad4c":"df['Hash'] = df['text'].apply(lambda word:word.count('#'))","f851f68b":"df['Men'] = df['text'].apply(lambda word:word.count('@'))","7e977e9f":"#('https:\/\/t.co\/) this part in tweets refers to photos,videos\ndf['med'] = df['text'].apply(lambda word:word.count('https:\/\/t.co\/'))\ndf['med'] = df['med'].apply(lambda x:'No Media' if x==0 else 'Media')","af22b4d3":"df['user_followers'].value_counts()","fecbb5f1":"df['acc_class'] = df['user_followers'].apply(lambda x:'week'if x<=100 else ('norm' if 1000>=x>100 else \n                                                                       ('strong' if 10000>=x>1000\n                                                                        else 'influencer')))\ndf.head()","a305e0fa":"df.columns","b6920b8c":"df=df[['user_name','text','date', 'acc_age','user_verified','retweets','favorites','total_engagement', 'day', 'tweet_length',\n       'Hash', 'Men', 'med', 'acc_class','month']]\ndf_copy=df.copy()\ndf.head()","c61b09ee":"corr=df.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr,annot=True)","df44d26c":"plt.figure(figsize=(7,7))\nsns.countplot(x='tweet_length',data=df);","d9aefaff":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['Hash'],y=df['tweet_length'],data=df);","0d0ca548":"plt.figure(figsize=(7,7))\nsns.barplot(x=df['tweet_length'],y=df['Men'],data=df);","77984ecf":"df['user_verified'].value_counts()","61e596cd":"labels = 'not_verified', 'verified'\nsizes = [1888, 319]\nexplode = (0.1, 0)  \nplt.figure(figsize=(10,5))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90);\nplt.axis('equal');  \n\n","6c1ca8d1":"class_eng = df.groupby('acc_class',as_index=False).agg({'total_engagement':'sum',})","d4a456d9":"fig = px.bar(class_eng,\n             x='acc_class',\n             y='total_engagement',\n             color='total_engagement',\n             color_continuous_scale='Rainbow',\n             title='Engagement By Account_Class')\nfig.show()","5ad5f9f3":"Media = len(df[df['med']=='Media'])\nNo_Media = len(df[df['med']=='No Media'])\nPlatform = ['Media','No Media']\nCount = [Media,No_Media]\n#====\nfig = px.pie(names = Platform,\n             values = Count,\n             title='Media\/No Media',\n            color_discrete_sequence = px.colors.sequential.Rainbow)\nfig.update_traces(textposition='inside', textinfo='percent+label')","17a083c4":"line = df.groupby('date',as_index=False).agg({'total_engagement':'sum'})\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=line.date, y=line.total_engagement,\n                    mode='lines+markers'))","26f938a9":"december=df.loc[df['month']==12]\nday_december = december.groupby('day',as_index=False).agg({'total_engagement':'sum'})\n\nfig = px.scatter(day_december,\n                 x='day',\n                 y='total_engagement',\n                 color_continuous_scale='Rainbow',\n                 color='total_engagement',\n                 size='total_engagement',\n                 title='Most engage days in Decembre')\nfig.show()\n","cb871e48":"ret = df.groupby('user_name',as_index=False).agg({'retweets':'sum'}).sort_values('retweets',ascending=False).head(10)\nlike = df.groupby('user_name',as_index=False).agg({'favorites':'sum'}).sort_values('favorites',ascending=False).head(10)\ntot_eng = df.groupby('user_name',as_index=False).agg({'total_engagement':'sum'}).sort_values('total_engagement',ascending=False).head(10)\n\n\nfig = px.bar(tot_eng,\n             x='user_name',\n             y='total_engagement',\n             color='total_engagement',\n             color_continuous_scale='Viridis',\n             title='Accounts \/ Engagements')\nfig.show()","1d849898":"age=df.groupby('acc_age',as_index=False).agg({'total_engagement':'sum'})\npx.line(age,x='acc_age',y='total_engagement',labels={'x':'age','y':'engagement'})","9310ebc3":"import seaborn as sns \nplt.figure(figsize=(14,7))\nsns.countplot(x='acc_age',data=df_copy);","f2f396b7":"df3=pd.DataFrame(loc_df['snd_loc'].value_counts()[:20]).reset_index()\ndf3","9a7e3ea0":"fig = px.choropleth(df3, locations = df3['index'],\n                    color = df3['snd_loc'],locationmode='country names',hover_name = df3['snd_loc'], \n                    color_continuous_scale = px.colors.sequential.Inferno)\nfig.update_layout(title='Sales tracking')\nfig.show()","7c1e430a":"tweets = df['text']","69e59dad":"all_sentences = []\n\nfor word in tweets:\n    all_sentences.append(word)\n\nall_sentences\n\nlines = list()\nfor line in all_sentences:    \n    words = line.split()\n    for w in words: \n       lines.append(w)","0a5ff424":"import re\n\nlines = [re.sub(r'[^A-Za-z0-9]+', '', x) for x in lines]\n\nlines\n\nlines2 = []\n\nfor word in lines:\n    if word != '':\n        lines2.append(word)","8bc5aabd":"#This is stemming the words to their root\nfrom nltk.stem.snowball import SnowballStemmer\n\n# The Snowball Stemmer requires that you pass a language parameter\ns_stemmer = SnowballStemmer(language='english')\n\nstem = []\nfor word in lines2:\n    stem.append(s_stemmer.stem(word))","6decbd89":"import spacy\nnlp = spacy.load('en_core_web_lg')","f2838947":"stem2 = []\n\nfor word in stem:\n    if word not in nlp.Defaults.stop_words:\n        stem2.append(word)","c40da91e":"df = pd.DataFrame(stem2)\ndf = df[0].value_counts()","9334465f":"#===\ndf = df[:20,]\n#== \npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)","29be40aa":"import spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()","b5bbe0a0":"def show_ents(doc):\n    if doc.ents:\n        for ent in doc.ents:\n            print(ent.text + ' - ' + ent.label_ + ' - ' + str(spacy.explain(ent.label_)))","5c7869ad":"nlp = spacy.load('en_core_web_sm') \nnlp.max_length = 2000000000000","241c2fa2":"str1 = \" \" \nstem2 = str1.join(lines2)\n\nstem2 = nlp(stem2)\n\nlabel = [(X.text, X.label_) for X in stem2.ents]\n\ndf6 = pd.DataFrame(label, columns = ['Word','Entity'])\n\ndf7 = df6.where(df6['Entity'] == 'ORG')\n\ndf7 = df7['Word'].value_counts()","c5f4ce47":"df = df7[:20,]\nplt.figure(figsize=(10,5))\npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)\n","663465a9":"nlp = spacy.load('en_core_web_sm') \nnlp.max_length = 2000000000000\n\nstr1 = \" \" \nstem2 = str1.join(lines2)\n\nstem2 = nlp(stem2)\n\nlabel = [(X.text, X.label_) for X in stem2.ents]\n\ndf10 = pd.DataFrame(label, columns = ['Word','Entity'])\n\ndf10 = df10.where(df10['Entity'] == 'PERSON')\n\ndf11 = df10['Word'].value_counts()","e3143ab1":"df = df11[:20,]\n\nplt.figure(figsize=(10,5))\n\ndf = df11[:20,]\nplt.figure(figsize=(10,5))\npx.bar(df, x=df.values,y= df.index, color=df.index, height=500)\n","6c819648":"features=tweets.values\nfeatures","5cabe450":"processed_features = []\n\nfor sentence in range(0, len(features)):\n    # Remove all the Http: urls\n    processed_feature = re.sub('(https?:\/\/\\S+)', '', str(features[sentence]))\n    \n    # Remove all the special characters\n    processed_feature = re.sub(r'\\W', ' ', processed_feature)\n\n    # Remove all single characters\n    processed_feature= re.sub(r'\\s+[a-zA-Z]\\s+', ' ', processed_feature)\n\n    # Remove single characters from the start\n    processed_feature = re.sub(r'\\^[a-zA-Z]\\s+', ' ', processed_feature) \n\n    # Substituting multiple spaces with single space\n    processed_feature = re.sub(r'\\s+', ' ', processed_feature, flags=re.I)\n\n    # Removing prefixed 'b'\n    processed_feature = re.sub(r'^b\\s+', '', processed_feature)\n\n    # Converting to Lowercase\n    processed_feature = processed_feature.lower()\n\n    processed_features.append(processed_feature)","49d142b4":"features[:5]","109fa174":"processed_features[:5]","e487220b":"df3=pd.DataFrame()\ndf3['Tweets']=processed_features","a8865532":"from textblob import TextBlob\nfrom wordcloud import WordCloud\n# Create a function to get the subjectivity\ndef getSubjectivity(text):\n   return TextBlob(text).sentiment.subjectivity\n\n# Create a function to get the polarity\ndef getPolarity(text):\n   return  TextBlob(text).sentiment.polarity\n\n\n# Create two new columns 'Subjectivity' & 'Polarity'\ndf3['Subjectivity'] = df3['Tweets'].apply(getSubjectivity)\ndf3['Polarity'] = df3['Tweets'].apply(getPolarity)\n\n# Show the new dataframe with columns 'Subjectivity' & 'Polarity'\ndf3","86dd4865":"# Create a function to compute negative (-1), neutral (0) and positive (+1) analysis\ndef getAnalysis(score):\n if score < 0:\n  return 'Negative'\n elif score == 0:\n  return 'Neutral'\n else:\n  return 'Positive'\ndf3['Analysis'] = df3['Polarity'].apply(getAnalysis)\ndf3","91e61848":"Neutral = len(df3[df3['Analysis']=='Neutral'])\nNegative = len(df3[df3['Analysis']=='Negative'])\nPositive = len(df3[df3['Analysis']=='Positive'])\nlabels = ['Negative','Positive','Neutral']\nvalues = [Negative,Positive,Neutral]\n#====\nimport plotly.graph_objects as go\ncolors = ['darkred','green', 'darkblue' ]\n\nfig = go.Figure(data=[go.Pie(labels=labels,\n                             values=values)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=20,textposition='inside',\n                  marker=dict(colors=colors, line=dict(color='grey', width=1)))\nfig.show()","d4821454":"df_copy['sentiment']=df3['Analysis']\n#== \nplt.figure(figsize=(10,5))\nsns.set(style=\"darkgrid\")\nsns.countplot(x=df_copy['acc_class'],data=df_copy,hue=df_copy['sentiment'],palette=\"rocket\")","d0526e50":"sen_eng=df_copy.groupby('sentiment',as_index=False).agg({'total_engagement':'sum'})\nfig = px.bar(sen_eng, x='total_engagement', y='sentiment',\n             hover_data=['total_engagement'], color='total_engagement',\n             labels={'pop':'population of Canada'}, height=400)\nfig.show()","c05f4a25":"# Sentiments Analysis","29e1ca19":"# Account Class","a38003d1":"# Data Manipulation","0a3b6451":"# Data Visualization","da127045":"## Tweet Lenght Calss\n**short < mean < long**","c0689c2a":"## Account Age ","7249c3de":"## Country location","da47b9d1":"## 12\/12\/2020 :  Historic US COVID vaccine campaign launches with convoy of trucks\n\n![](https:\/\/amayei.nyc3.digitaloceanspaces.com\/2020\/12\/static.reuters.com_-13.jpg)","8d6009d5":"## Account age per Engagement","371b9e22":"# Fix Country location","269bdb54":"## Hashtags Count","2dbd4aab":"## Enagegement\/Date","538fadf6":" ## Does tweet have media or not ","66555164":"## Tweet Length\n\nThe tweet length can be no longer than 280 characters\nso let's check tweets length","537c1c1c":"## Top Mention Organizations","4b3ee7f4":"## Tweet length \/ Mentions","052b2380":"### Fixing States with countries Shortcuts","2567ec20":"# Account Followers Class","71392f0e":"# Transform Data Frame","5cb184c8":"## Get keywords out of tweets","05bf8906":"# Top Mention People ","34d825cd":"## Verified Account or Not ","e87e9ba7":"# Tweets NLP Analysis","1a575ccb":"## Location\/Tweets","62eccf0b":"## Length Class ","e1686c0b":"## Media \/ No Media","037953b4":"# Create Sentiment Analysis ","937685fe":"# Verified Accounts","72800f0c":"## Removing all characters from text ","6d40eb1f":"## Days of Decembre","a90eb103":"## Days of December","0e732444":"## from 12 to 14 December, the most period have engagement and that's why","33307768":"## Total Engagement","f18ea2e5":"## Gettig Words roots","bad1f911":"## Removing Punctuation","ffdfcaac":"## Tweet length \/ Hashtags","039ef242":"## Accounts\/Engagements","26cec900":"# Conclusion \n\n* Most of the tweets are long \n* 85% of the accounts aren't verified\n* Short tweets have more hashtags and less mentions \n* Influencers account gets more engagement\n* 94% of tweets have media \n* Day 12 of December most engaged day \n* Anita Anand get the Highest engagements \n* One year and three years are the most common account age \n* The USA the most tweeted Country then, India\n* Only 10% of tweets are negative \n* Positive and neutral tweets get high engagements ","5bb1d670":"## Top Mention Keywords\n","79c67f2a":"# Import Data & Libraries","53a1112c":"## Mentions Count","a5b1e7d6":"# Adding Subjectivity & Polarity"}}