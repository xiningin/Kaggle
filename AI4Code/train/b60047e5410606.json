{"cell_type":{"7cdec652":"code","10b959bb":"code","2d4157cd":"code","c2d3a246":"code","56a0c55d":"code","a56a3913":"code","c8d307be":"code","aa238905":"code","9b34a39f":"code","ea5dde0a":"markdown","6bdc9e9c":"markdown","ba0617d8":"markdown","356afee8":"markdown","f6d7ed06":"markdown"},"source":{"7cdec652":"import numpy as np \nimport pandas as pd \nimport os\nimport keras\nfrom keras.datasets import mnist\nfrom keras.layers import Dense, Conv2D, Dropout, MaxPooling2D, Flatten\nfrom keras.models import Sequential\nfrom keras.optimizers import SGD\nfrom keras.utils import to_categorical\nfrom keras import backend as K\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\n%matplotlib inline\nimport matplotlib.pyplot as plt\n","10b959bb":"batch_size = 128\nnum_classes = 10\nepochs = 12\n\nimg_rows, img_cols = 28, 28\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n\n","2d4157cd":"fig = plt.figure(figsize=(28,28))\nfor i in range (5):\n    im = fig.add_subplot(1, 5, i+1, xticks=[], yticks=[])\n    im.imshow(x_train[i], cmap=\"gray\")","c2d3a246":"(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\ntrain_images = train_images.reshape((60000, 28, 28, 1))\ntrain_images = train_images.astype('float32') \/ 255\ntest_images = test_images.reshape((10000, 28, 28, 1))\ntest_images = test_images.astype('float32') \/ 255\ntrain_labels = to_categorical(train_labels) #Converts a class vector (integers) to binary class matrix.\ntest_labels = to_categorical(test_labels)","56a0c55d":"X_train = train_images[6000:50000, :, :]\nX_train_labels = train_labels[6000:50000, :]\nX_valid = train_images[1000:6000, :, :]\nX_valid_labels= train_labels[1000:6000, :]\nX_test = test_images[:1000, :, :]\nX_test_labels = test_labels[:1000, :]\n","a56a3913":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer=SGD(0.001),loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\n","c8d307be":"model.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nhistory = model.fit(X_train, X_train_labels, epochs=30, batch_size=64, validation_data=(X_valid, X_valid_labels))","aa238905":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend(loc='best')\n\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend(loc='best');","9b34a39f":"for i in range(1, 10):\n    img = X_test[i]\n    img_class = model.predict_classes(X_test)\n    prediction = img_class[i]\n    classname = img_class[i]\n    print(\"Class: \",classname)\n    img = img.reshape((28,28))\n    plt.imshow(img)\n    plt.title(classname)\n    plt.show()","ea5dde0a":"# Mostrando os Gr\u00e1ficos de Acur\u00e1cia e Log Loss","6bdc9e9c":"# Treinamento","ba0617d8":"# Carregando os dados","356afee8":"# Cria\u00e7\u00e3o do Modelo","f6d7ed06":"# Predi\u00e7\u00f5es"}}