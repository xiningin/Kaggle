{"cell_type":{"96bd4067":"code","4b1f5ce6":"code","5e547e56":"code","4259e2f3":"code","27aed8bf":"code","f46996af":"code","781a9e0f":"code","f9320f91":"code","5cc314bb":"code","4694204a":"code","ffd89d1a":"code","6678e12a":"code","eaf17ed5":"code","93eaa520":"code","188828ba":"code","44b90765":"markdown","dbe882ff":"markdown"},"source":{"96bd4067":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b1f5ce6":"import matplotlib.pyplot as plt\nimport math\nimport seaborn as sns\nimport time ","5e547e56":"#loading the data.\ndf=pd.read_csv('..\/input\/pune-air-quality-index\/PNQ_AQI.csv')\ndf.head()","4259e2f3":"#lets see the missing values and info.\ndf.info()","27aed8bf":"#the co2 column is empty ,so lets drop that.\ndf.drop('CO2 \u00b5g\/m3',axis=1,inplace=True)\n#making the date column a datetime datatype.\ndf['Date']=pd.to_datetime(df['Date'])\n","f46996af":"#there are only 6 locations ,but have been represented by diffrent names.Lets replace them.\nrep={'MPCB-KR':'Karve Road','MPCB-SWGT':'Swargate','MPCB-BSRI':'Bhosari','MPCB-NS':'Nal Stop','MPCB-PMPR':'Pimpri','Pimpri Chinchwad':'Chinchwad'}\n\ndf['Location'].replace(rep,inplace=True)","781a9e0f":"#now as we have some missing values ,lets fill them.\n#we will use ffill (forward fill ) and bfill() to fill empty values by the values that occur\n#after or before missing value.\ndf.sort_values(by='Date',inplace=True)\ndf=df.ffill().bfill()\ndf.info()","f9320f91":"#SO2 and NOx column have dtype object,converting them to float.\ndf['SO2 \u00b5g\/m3']=pd.to_numeric(df['SO2 \u00b5g\/m3'],errors='coerce')\ndf['SO2 \u00b5g\/m3']=df['SO2 \u00b5g\/m3'].ffill().bfill()\n\n\ndf['Nox \u00b5g\/m3']=pd.to_numeric(df['Nox \u00b5g\/m3'],errors='coerce')\ndf['Nox \u00b5g\/m3']=df['Nox \u00b5g\/m3'].ffill().bfill()\n\ndf.info()","5cc314bb":"#lets add a new feature that represents the WHO rating of AQI according to its values.\ndf['AQI Rating']=pd.cut(df['AQI'],bins=[0,50,100,150,200,300,df['AQI'].max()]\n                        ,labels=['good','moderate','moderately unhealth','unhealthy','very unhealthy','Hazardous'])\ndf.head()","4694204a":"#Count of the AQI Quality over the dat\nplt.style.use('Solarize_Light2')\nplt.rcParams['font.size']=10\nlocations=[x for x in df['Location'].unique()]\nfig,ax=plt.subplots(3,2,figsize=(16,16),constrained_layout=True)\nn=0\nfor i in range(3):\n    for j in range(2):\n            sns.countplot(df[df['Location']==locations[n]]['AQI Rating'],ax=ax[i,j])\n            ax[i,j].set_title(locations[n],y=1,loc='right')\n            ax[i,j].set_xlabel('')\n            ax[i,j].set_ylabel('Num_Observations',size=10)\n            n+=1\nplt.show()\n","ffd89d1a":"#lets see the distribution of AQI\nplt.style.use('ggplot')\nfig,ax=plt.subplots(figsize=(14,6))\nfor key,grp in df.groupby('Location'):\n    sns.distplot(grp['AQI'],label=key,hist=False,ax=ax)\nplt.title('Distribution plots of AQI')\nplt.xlabel('AQI')\nplt.ylabel('Distribution')\nplt.legend()\n","6678e12a":"#as we there were missing values for spm,showing dist plots for SO2 and RSPM and NOx\nfig,ax=plt.subplots(figsize=(14,6))\nfor key,grp in df.groupby('Location'):\n    sns.distplot(grp['SO2 \u00b5g\/m3'],label=key,hist=False,ax=ax)\nplt.title('Distribution plots of So2')\nplt.xlabel('SO2 ')\nplt.ylabel('Distribution')\nplt.legend()\n\n\nfig,ax=plt.subplots(figsize=(14,6))\nfor key,grp in df.groupby('Location'):\n    sns.distplot(grp['RSPM \u00b5g\/m3'],label=key,hist=False,ax=ax)\nplt.title('Distribution plots of RSPM')\nplt.xlabel('RSPM ')\nplt.ylabel('Distribution')\nplt.legend()\n\nfig,ax=plt.subplots(figsize=(14,6))\nfor key,grp in df.groupby('Location'):\n    sns.distplot(grp['Nox \u00b5g\/m3'],label=key,hist=False,ax=ax)\nplt.title('Distribution plots of Nox \u00b5g\/m3')\nplt.xlabel('Nox \u00b5g\/m3')\nplt.ylabel('Distribution')\nplt.legend()\n","eaf17ed5":"#lets plot a overall aqi for each location\n\n\nplt.style.use('seaborn-dark')\nfig,ax=plt.subplots(figsize=(16,12))\nfor key,grp in df.groupby('Location'):\n    ax.plot(grp['Date'],grp['AQI'],linewidth=.5,label=key)\n\n    \n#annotating month of max mean avg AQI\nfor year in df['Date'].dt.year.unique():\n    df_y=df[df['Date'].dt.year==year]\n    for mon,group in df_y.groupby(df['Date'].dt.month):\n        d={}\n        avg_aqi=grp['AQI'].mean()\n        d[mon]=avg_aqi\n\n    a=df_y[df_y['Date'].dt.month==max(d,key =lambda x:d[x])]\n    a=a.reset_index().iloc[round(len(a)\/2)]\n#     b=df_y[df_y['Date'].dt.month==min(d,key =lambda x:d[x])] \n#use b for showing month of min mean aqi\n\n    x,y=a['Date'],a['AQI']\n    ax.annotate('High m\/y = {}\/{}'.format(a['Date'].month,a['Date'].year)\n                ,size=7,xy=(x,y+10),xytext=(x,y+200)\n                ,arrowprops=dict(arrowstyle='-> ,head_width=.7',lw=.7,color='black'),ha='center',va='top')\nplt.legend()\nplt.title(('AQI over the years'))\nplt.xlabel('Year')\nplt.ylabel('AQI')\n","93eaa520":"#lets draw mean aqifor each month over the data\nd={}\nfor key,grp in df.groupby('Location'):\n    a=grp.groupby(grp['Date'].dt.month)['AQI'].mean()\n    d[key]=a\nmonthly_avg=pd.DataFrame(d)\nmonthly_avg.index.name='Months'\nmonths={1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'June',7:'July',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nmonthly_avg.reset_index(inplace=True)\nmonthly_avg['Months'].replace(months,inplace=True)\nmonthly_avg.set_index('Months',inplace=True)\nmonthly_avg","188828ba":"#plotting on the above data \nplt.style.use('ggplot')\nmonthly_avg.plot(figsize=(16,10))\nplt.title('Mean AQI for each Location')\nplt.ylabel('Mean AQI')\nplt.xlabel('Month')\n","44b90765":"The plot shows that the worst AQI averaged over the month is almost always falls in month of December.It follows a upward trend in winters ,peaks in December.AQI shows decline after\nwinter months and reaches the best values in the monsoon months.","dbe882ff":"The plot shows how the values of AQI peak during the winter months,fall during summer months and are lowest in monsoon months. "}}