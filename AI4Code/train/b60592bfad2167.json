{"cell_type":{"fb6dcdce":"code","08782231":"code","f30c5b44":"code","1225443d":"code","c3a3ed1b":"code","753c3116":"code","9de0711d":"code","2064dd48":"code","2b1d1969":"code","8e1db151":"code","66adf980":"code","c037d968":"code","c982985d":"code","f9848daf":"code","b2cbe754":"code","50c2bdc0":"code","3f86d93b":"code","fb4cf9c7":"code","38ec6a2a":"code","70572493":"code","4b261296":"code","28cd2c03":"code","7d484de1":"code","fec284bd":"code","b8c7ad84":"code","4e54c3fc":"code","a69859b9":"code","6d33c4f1":"code","85e540c0":"code","c7fbf4f6":"code","1edc4c1d":"code","e80e9eaf":"code","6e7d1807":"code","a6411754":"code","e911885f":"code","a549c9df":"code","864650b8":"code","765bb49c":"code","4219d878":"code","aec596b4":"code","0119e070":"code","5e6238da":"code","e0c71ae0":"code","6c050603":"code","7e5d469a":"code","a4f2bb6d":"code","ffa245f8":"code","fd8a8c37":"code","c0a1ad98":"code","ba78e21c":"code","b94f50a1":"code","3c10d207":"code","5b68691f":"code","2b7ebb37":"code","c15fce42":"code","5ffd11a6":"code","20cb0fdd":"code","0a8f19e0":"code","4befc5e5":"code","cf16bed2":"code","0a1d2745":"code","dd4debeb":"code","bb1b0e55":"code","38719ca8":"code","3fdf9676":"code","fd0fd266":"code","8b90f662":"code","1294f893":"code","c761c284":"code","7046cb74":"code","399ddadd":"code","7b437aeb":"code","59c43456":"code","054ac4fb":"code","74099746":"code","7f9dab24":"markdown","60f2a460":"markdown","fb07614c":"markdown","9c2be025":"markdown","c2bad0da":"markdown","7281e71a":"markdown","f172cb59":"markdown","933923ab":"markdown","e634418d":"markdown","0447d5e4":"markdown","d18deef9":"markdown","05d929d1":"markdown","24bfa777":"markdown","87eff3e2":"markdown","297581b1":"markdown","ed76cee2":"markdown","1c2c3c6c":"markdown","bc055e4c":"markdown","bca84872":"markdown","eea6c899":"markdown","beebe01a":"markdown","a975add8":"markdown","24beb00e":"markdown","11d66e70":"markdown","f33274fc":"markdown","f41b9c39":"markdown","9867ff06":"markdown","ccfdd450":"markdown"},"source":{"fb6dcdce":"import numpy as np\nimport pandas as pd\nimport pandas_profiling\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotnine import *\n\nfrom category_encoders.ordinal import OrdinalEncoder\nfrom sklearn.model_selection import KFold\nfrom lightgbm import LGBMClassifier\n\nimport random\nimport gc\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nsns.set_style(\"whitegrid\")","08782231":"train = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/kakr-4th-competition\/sample_submission.csv')","f30c5b44":"train.describe()","1225443d":"train.shape","c3a3ed1b":"train.info()","753c3116":"train.isnull().sum()","9de0711d":"report = pandas_profiling.ProfileReport(train)","2064dd48":"display(report)","2b1d1969":"!pip install autoviz","8e1db151":"from autoviz.AutoViz_Class import AutoViz_Class","66adf980":"AV = AutoViz_Class()","c037d968":"url1 = '..\/input\/kakr-4th-competition\/train.csv'\nurl2 = '..\/input\/kakr-4th-competition\/test.csv'\nreduce_train = pd.read_csv(url1,index_col=None)\nreduce_test = pd.read_csv(url2,index_col=None)\nprint(reduce_train.shape,reduce_test.shape)\nreduce_train.head()","c982985d":"train.income.value_counts()","f9848daf":"train.income = train['income'].map(lambda x: int(x=='>50K'))","b2cbe754":"train.income.value_counts()","50c2bdc0":"target='income'","3f86d93b":"dft = AV.AutoViz(depVar=target, dfte=reduce_train, header=0, verbose=0,\n                lowess=False,chart_format='svg',max_rows_analyzed=3000000,max_cols_analyzed=300,filename='', sep=',' )","fb4cf9c7":"%pip install ppscore\nimport ppscore as pps","38ec6a2a":"matrix_train = pps.matrix(train)[['x', 'y', 'ppscore']].pivot(columns='x', index='y', values='ppscore')\nmatrix_train = matrix_train.apply(lambda x: round(x, 2)) # Rounding matrix_df's values to 0,XX\n\nsns.heatmap(matrix_train, vmin=0, vmax=1.0, cmap=\"Blues\", linewidths=1, annot=True)","70572493":"train_high = train[train['income'] == 1]\ntrain_low = train[train['income'] == 0]","4b261296":"import plotly.graph_objs as go","28cd2c03":"violin_survivors = go.Violin(\n    y=train_high['age'],\n    x=train_high['income'],\n    name='High income',\n    marker_color='forestgreen',\n    box_visible=True)\n\nviolin_nonsurvivors = go.Violin(\n    y=train_low['age'],\n    x=train_low['income'],\n    name='Low income',\n    marker_color='darkred',\n    box_visible=True)\n\ndata = [violin_nonsurvivors, violin_survivors]\n\n\n# Plot's Layout (background color, title, etc.)\nlayout = go.Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='\"Age\" of High income vs Ages of Low income',\n  xaxis=dict(\n        title='High or Low income'\n    ),\n    yaxis=dict(\n        title='Age'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()","7d484de1":"violin_high_income = go.Violin(\n    y=train_high['capital_gain'],\n    x=train_high['income'],\n    name='High income',\n    marker_color='forestgreen',\n    box_visible=True)\n\nviolin_low_income = go.Violin(\n    y=train_low['capital_gain'],\n    x=train_low['income'],\n    name='Low income',\n    marker_color='darkred',\n    box_visible=True)\n\ndata = [violin_high_income, violin_low_income]\n\n\n# Plot's Layout (background color, title, etc.)\nlayout = go.Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='\"Capital gain\" of High income vs Capital gain of Low income',\n  xaxis=dict(\n        title='High or Low income'\n    ),\n    yaxis=dict(\n        title='Capital gain'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\nfig.show()","fec284bd":"train[train['capital_gain'] == 99999].value_counts()","b8c7ad84":"train_low[train_low['capital_gain'] >= 10000].value_counts()","4e54c3fc":"new_train_high = train_high.query('capital_gain == 99999')\nnew_train_high","a69859b9":"idx = list(new_train_high.index)\nidx","6d33c4f1":"# \uc774\uc0c1\uce58\ub97c \uacb0\uce21\uce58\ub85c \ucc98\ub9ac\n\nfor i in idx:\n    train_high.loc[i, 'capital_gain'] = np.nan\n\ntrain_high","85e540c0":"from sklearn.impute import SimpleImputer","c7fbf4f6":"# \uacb0\uce21\uce58\ub97c \ud3c9\uade0\uc73c\ub85c \ub300\uccb4\n\nnan_to_mean = SimpleImputer(missing_values=np.nan, strategy='mean')","1edc4c1d":"new_train_high = train_high.filter(['capital_gain'])\nnew_train_high","e80e9eaf":"arr = nan_to_mean.fit_transform(new_train_high.values)\nprint(type(arr))\narr","6e7d1807":"from pandas import DataFrame","a6411754":"new_train_high = DataFrame(arr, \n                     index=train_high.index, \n                     columns=['capital_gain'])\nnew_train_high","e911885f":"new_train_high['capital_gain'].value_counts()","a549c9df":"tmp = train_high.filter(['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'capital_loss', 'hours_per_week',\n                         'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country', 'income'])\ntmp","864650b8":"from pandas import merge","765bb49c":"new_train_high = merge(tmp, new_train_high, left_index=True, right_index=True)\nnew_train_high","4219d878":"train_low","aec596b4":"new_train_low = train_low.query('capital_gain >= 10000 & capital_gain < 99999')\n\nidx2 = list(new_train_low.index)\n\nfor i in idx2:\n    train_low.loc[i, 'capital_gain'] = np.nan\n\nnew_train_low = train_low.filter(['capital_gain'])\n\narr2 = nan_to_mean.fit_transform(new_train_low.values)\n\nnew_train_low = DataFrame(arr2, \n                     index=train_low.index, \n                     columns=['capital_gain'])\nnew_train_low","0119e070":"new_train_low['capital_gain'].value_counts()","5e6238da":"tmp_low = train_low.filter(['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'capital_loss', 'hours_per_week',\n                         'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country', 'income'])\ntmp_low","e0c71ae0":"new_train_low = merge(tmp_low, new_train_low, left_index=True, right_index=True)\nnew_train_low","6c050603":"new_train_high['capital_gain'].plot.hist()","7e5d469a":"new_train = new_train_high.append(new_train_low)\nnew_train","a4f2bb6d":"new_train['capital_gain'].describe()","ffa245f8":"new_test = test.query('capital_gain >= 27828')\n\nidx3 = list(new_test.index)\n\nfor i in idx3:\n    test.loc[i, 'capital_gain'] = np.nan\n\nnew_test = test.filter(['capital_gain'])\n\narr3 = nan_to_mean.fit_transform(new_test.values)\n\nnew_test = DataFrame(arr3, \n                     index=test.index, \n                     columns=['capital_gain'])\nnew_test","fd8a8c37":"tmp_test = test.filter(['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'capital_loss', 'hours_per_week',\n                         'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country'])\ntmp_test","c0a1ad98":"new_test = pd.merge(tmp_test, new_test, left_index=True, right_index=True)\nnew_test","ba78e21c":"new_test['capital_gain'].describe()","b94f50a1":"label = new_train['income']\ndel new_train['income']","3c10d207":"tmp_train = new_train.copy()\ntmp_test  = new_test.copy()","5b68691f":"has_na_columns = ['workclass', 'occupation', 'native_country']","2b7ebb37":"for c in has_na_columns:\n    tmp_train.loc[train[c] == '?', c] = train[c].mode()[0]\n    tmp_test.loc[test[c]   == '?', c] = test[c].mode()[0]","c15fce42":"(tmp_train[has_na_columns] == '?').sum()","5ffd11a6":"tmp_train.head()","20cb0fdd":"from sklearn.model_selection import train_test_split\n\ntmp_train, tmp_valid, y_train, y_valid = train_test_split(tmp_train, label, \n                                                          test_size=0.3,\n                                                          random_state=2020,\n                                                          shuffle=True,\n                                                          stratify=label)","0a8f19e0":"tmp_train = tmp_train.reset_index(drop=True)\ntmp_valid = tmp_valid.reset_index(drop=True)\ntmp_test  = tmp_test.reset_index(drop=True)","4befc5e5":"tmp_train.head()","cf16bed2":"cat_columns = [c for c, t in zip(tmp_train.dtypes.index, tmp_train.dtypes) if t == 'O'] \nnum_columns = [c for c in tmp_train.dtypes.index if c not in cat_columns]\n\nprint('\ubc94\uc8fc\ud615 \ubcc0\uc218: \\n{}\\n\\n \uc218\uce58\ud615 \ubcc0\uc218: \\n{}\\n'.format(cat_columns, num_columns))","0a1d2745":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ntmp_train[num_columns] = scaler.fit_transform(tmp_train[num_columns])\n\ntmp_valid[num_columns] = scaler.transform(tmp_valid[num_columns])\ntmp_test[num_columns]  = scaler.transform(tmp_test[num_columns])","dd4debeb":"tmp_train.describe()","bb1b0e55":"from sklearn.preprocessing import OneHotEncoder\n\ntmp_all = pd.concat([tmp_train, tmp_valid, tmp_test])\n\nohe = OneHotEncoder(sparse=False)\nohe.fit(tmp_all[cat_columns])","38719ca8":"ohe.categories_","3fdf9676":"ohe_columns = list()\nfor lst in ohe.categories_:\n    ohe_columns += lst.tolist()","fd0fd266":"new_train_cat = pd.DataFrame(ohe.transform(tmp_train[cat_columns]), columns=ohe_columns)\nnew_valid_cat = pd.DataFrame(ohe.transform(tmp_valid[cat_columns]), columns=ohe_columns)\nnew_test_cat  = pd.DataFrame(ohe.transform(tmp_test[cat_columns]), columns=ohe_columns)","8b90f662":"new_train_cat.head()","1294f893":"cat_columns","c761c284":"tmp_train = pd.concat([tmp_train, new_train_cat], axis=1)\ntmp_valid = pd.concat([tmp_valid, new_valid_cat], axis=1)\ntmp_test = pd.concat([tmp_test, new_test_cat], axis=1)\n\n# \uae30\uc874 \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc81c\uac70\ntmp_train = tmp_train.drop(columns=cat_columns)\ntmp_valid = tmp_valid.drop(columns=cat_columns)\ntmp_test = tmp_test.drop(columns=cat_columns)","7046cb74":"tmp_train.head()","399ddadd":"tmp_y_train = y_train\ntmp_y_valid = y_valid","7b437aeb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.metrics import f1_score","59c43456":"lr = LogisticRegression()\n\nlr.fit(tmp_train, tmp_y_train)\n\ny_pred = lr.predict(tmp_valid)\n\nprint(f\"Logistic Regression F1 Score: {f1_score(tmp_y_valid, y_pred, average='micro')}\")","054ac4fb":"svc = SVC()\n\nsvc.fit(tmp_train, tmp_y_train)\n\ny_pred = svc.predict(tmp_valid)\n\nprint(f\"Support Vector Machine F1 Score: {f1_score(tmp_y_valid, y_pred, average='micro')}\")","74099746":"rf = RandomForestClassifier()\n\nrf.fit(tmp_train, tmp_y_train)\n\ny_pred = rf.predict(tmp_valid)\n\nprint(f\"RandomForest F1 Score: {f1_score(tmp_y_valid, y_pred, average='micro')}\")","7f9dab24":"- train data\uc758 null data\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc74c","60f2a460":"# More details","fb07614c":"* Autoviz \ub97c \uc774\uc6a9\ud574 \ubd84\uc11d\ud574\ubcf8 \uacb0\uacfc\uc785\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc778 hist\ub098 distribution \uc744 \ube60\ub974\uac8c \uc54c\uc544\ub0b4\ub294 \uc6a9\ub3c4\ub85c \uc88b\uc740 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","9c2be025":"- train_high \uc5d0\uc11c \ud280\ub294 data\uc758 \uac1c\uc218\ub294 127\uac1c \uc785\ub2c8\ub2e4.","c2bad0da":"# pandas_profiling \uc744 \uc774\uc6a9\ud55c data check","7281e71a":"# ppscore\n\n- titanic \uc608\uc81c\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub358\ub370 data\uc5d0 \uc880 \uc548\ub9de\ub294\uc9c0 \ub530\ub85c \uc8fc\ubaa9\ud560 \ub9cc\ud55c \uacb0\uacfc\ub294 \uc548\ub098\uc624\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n- \uc800\ub3c4 \uae43\ubcf4\uace0 \uacf5\ubd80\ud574\ubcf4\ub824\ub294\ub370 \ubbf8\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. (\uc5ec\uae30\uc11c \uc5bb\uc744 \uc218 \uc788\ub294 data \ud2b9\uc9d5,,,\uace0\uc218\ubd84\ub4e4 \ub3c4\uc640\uc8fc\uc2dc\uba74 \uc815\ub9d0 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4)","f172cb59":"- logistic regression \uc5d0\uc11c\ub294 log \ub85c \uc774\uc0c1\uce58\ub97c \ucc98\ub9ac\ud55c \uac83\ubcf4\ub2e4 \uc870\uc624\uae08 \ub354 \uc815\ud655\ub3c4\uac00 \ub192\uac8c \ub098\uc654\ub124\uc694.","933923ab":"# Model\n\n- \uc774 \ubd80\ubd84\uc740 \uc77c\ub2e8 \uc138\ubbf8\ub098\uc758 \ucf54\ub4dc\ub97c \ud65c\uc6a9\ud558\uc5ec \uc9c4\ud589\ud588\uc2b5\ub2c8\ub2e4.\n- \uc544\uc9c1\uc740 \ub2e8\uc21c\ud788 \uc774\uc0c1\uce58 \ucc98\ub9ac\ub97c \uc5b4\ub5bb\uac8c \ud588\ub294\uc9c0\uc5d0 \ub530\ub77c \uacb0\uacfc\uac00 \ub2ec\ub77c\uc9c0\ub294 \uc9c0\ub97c \ud655\uc778\ud558\uae30 \uc704\ud55c \uc6a9\ub3c4\uc785\ub2c8\ub2e4.","e634418d":"- \uc22b\uc790\ub85c \ud655\uc778\ud574 \ubd24\uc744 \ub54c 2060\uc5d0 127\uac1c\uac00 \uc788\ub2e4\ub294 \uac83\uc73c\ub85c \uc774\uc0c1\uce58\uac00 mean\uc73c\ub85c \ub300\uccb4\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n- capital_gain row \ub97c \ub5bc\uc5b4\uc11c \uc791\uc5c5\ud588\uc73c\ub2c8 \ub2e4\uc2dc \ubd99\uc5ec\uc8fc\ub294(merge) \uc791\uc5c5\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4","0447d5e4":"- train_high \uc758 127 \uac1c\uc758 capital_loss \uc5d0\uc11c \ubc1c\uc0dd\ud55c \uc774\uc0c1\uce58\ub97c mean \uc73c\ub85c \ucc98\ub9ac\ud588\uc2b5\ub2c8\ub2e4.\n- \uac19\uc740 \ubc29\ubc95\uc73c\ub85c train_low \ub3c4 \uc9c4\ud589\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","d18deef9":"- log \ucc98\ub9ac \ubcf4\ub2e4\ub294 \ubd84\ud3ec\uac00 \uc880 \ub354 \uc2a4\ubb34\uc2a4 \ud569\ub2c8\ub2e4.\n- \uc774\uc81c \ubd84\ub9ac\ud588\ub358 train_high \uc640 train_low \ub97c \ud559\uc2b5\uc744 \uc704\ud574 \ud569\uccd0\uc90d\ub2c8\ub2e4.","05d929d1":"- train_high -> income \uc774 >= 50k \uc778 \uc0ac\ub78c\n- train_low -> income \uc774 <50k \uc778 \uc0ac\ub78c","24bfa777":"* \uc544\uc9c1 kaggle \uc744 \uc2dc\uc791\ud55c \uc9c0 \ud55c\ub2ec\ub3c4 \ucc44 \uc548\ub41c \uce90\ub9b0\uc774 \uc785\ub2c8\ub2e4. \uc8fc\uae30\uc801\uc73c\ub85c update \ub97c \ud558\ub824\uace0 \ub178\ub825\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \ub2e4\uc591\ud55c \uc758\uacac\uacfc feedback \uc8fc\uc2dc\uba74 \uc815\ub9d0 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n++ \uc5f4\uc2ec\ud788 \uc368 \ubcf4\uc558\uc73c\ub2c8 \uc77d\uc744 \ub9cc \ud588\uc73c\uba74 \uc88b\uc544\uc694 \ub20c\ub7ec\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4 \u314e\u314e","87eff3e2":"- autoviz \uc640 \ube44\uc2b7\ud558\uac8c info \ub098 describe \ub300\uc2e0 null data \uc758 \ube44\uc728\uc774\ub098 data\uc758 unique \ud55c \uc815\ub3c4\ub97c \uac04\ub2e8\ud55c \ucf54\ub529\uc73c\ub85c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","297581b1":"- high income \uc5d0\uc11c 6305 \uba85 \uc911 127 \uba85 \ub9cc\uc774 capital gain \uc774 \ud655 \ud280\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- \uc774 data\ub97c \uacb0\uce21\uce58 \ucc98\ub9ac\ud558\uc5ec \ub2e4\ub978 data \ub4e4\uc758 capital gain\uc758 \ud3c9\uade0\uc73c\ub85c \ub300\uccb4\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n++ \uad6c\uae00\ub9c1 \ud574\ubcf4\ub2c8 \uacb0\uce21\uce58 \ucc98\ub9ac\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ud3c9\uade0\uac12\uc73c\ub85c \ub123\ub294 \uc2dd\uc73c\ub85c \ud558\ub358\ub370 \uac04\ub2e8\ud55c \uc791\uc5c5\uc774\uc9c0\ub9cc \ucf54\ub529\uc774 \uc880 \uae38\ub2e4\uace0 \ub290\uaef4\uc9d1\ub2c8\ub2e4...(\ub3c4\uc640\uc8fc\uc138\uc694\u3160)","ed76cee2":"# 1. Check Data","1c2c3c6c":"- SVC \uc640 randomforest \uc5d0\uc11c\ub294 \ube44\uc2b7\ud55c \uc218\uc900\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4","bc055e4c":"- 7 \uac1c\uc758 \uc815\uc218\ud615, 9\uac1c\uc758 \uac1d\uccb4\ud615 \ub370\uc774\ud130","bca84872":"- \uc774\uc0c1\uce58 \ucc98\ub9ac\uc758 \ubaa8\ub4e0 \uacfc\uc815\uc744 \ub9c8\ucce4\uc2b5\ub2c8\ub2e4.\n- \ud55c\ubc88 hist \ub97c \ud1b5\ud574 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","eea6c899":"- High income \uc778 \uc0ac\ub78c\uc758 age \uac00 \ud3c9\uade0\uc801\uc73c\ub85c \ud655\uc5f0\ud788 \ub192\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","beebe01a":"# 2. EDA using Autoviz","a975add8":"* Autoviz \ub294 one line code\ub85c \ube60\ub974\uac8c data\uc758 distribution \uc744 \uc54c\uc544\ub0bc \uc218 \uc788\ub294 tool \uc785\ub2c8\ub2e4. \n* \uc774\ub97c \uc774\uc6a9\ud558\uc5ec \uac04\ub7b5\ud55c EDA \ub97c \uc9c4\ud589\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n+ version \uc774 update \ub418\uba74\uc11c \uc5d0\ub7ec\ub3c4 \uc548\ub098\uace0 \ub354 \ub9ce\uc740 \uadf8\ub9bc\uc744 \uc9c0\uc6d0\ud558\ub294 \ub4ef \ud569\ub2c8\ub2e4.","24beb00e":"- train_low \uc5d0\uc11c \ud280\ub294 data\uc758 \uac1c\uc218\ub294 11\uac1c \uc785\ub2c8\ub2e4.","11d66e70":"- train \ub9cc \ud588\uc73c\ub2c8 \uc774\uc81c test \uc5d0 \ub300\ud574\uc11c\ub3c4 \uc774\uc0c1\uce58 \ucc98\ub9ac\ub97c \ud574\uc8fc\uaca0\uc2b5\ub2c8\ub2e4.\n- train\uc758 \ucd5c\ub300\uce58 \ubcf4\ub2e4 \ud070 \ubd80\ubd84\uc744 \uc774\uc0c1\uce58\ub77c \ud558\uace0 \ucc98\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.","f33274fc":"# Insight : processing Outlier...   log VS mean\n\n- \uc800\ub294 \uc774 \ubd80\ubd84\uc5d0\uc11c high income \uc9d1\ub2e8\uc758 capital loss\uc758 \uc774\uc0c1\uce58\uc640 low income \uc5d0\uc11c\ub3c4 \uac04\uac04\ud788 \ubcf4\uc774\ub294 \uc774\uc0c1\uce58\ub97c \ucc98\ub9ac\ud574\uc57c \uaca0\ub2e4\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4.\n- \uc138\ubbf8\ub098\uc5d0\uc11c\ub294 \uc774 \ubd80\ubd84\uc744 log \ub85c \ucc98\ub9ac\ud588\ub294\ub370\uc694.\n- \ub2e4\ub9cc, \uc800\ub294 \uc774 \ubd80\ubd84\uc758 \ucc98\ub9ac\ub97c log \ubcf4\ub2e4\ub294 \uc544\uc608 \uc5c6\uc560\uac70\ub098 \ub098\uba38\uc9c0 \uac12\ub4e4\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\ub2e4\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4.\n- \uc774\uc0c1\uce58\uc758 \ube44\uc728\uc774 \ub9ce\uc774 \ub192\uc740 \uac83\uc774 \uc544\ub2c8\uace0 \uc774 \ub54c, \uc774\ub97c \ubc18\uc601\ud558\ub824\uba74 log \ubcf4\ub2e4\ub294 \ud3c9\uade0\uce58\uac00 \ub098\uc744 \uac70\ub77c \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4.\n- log \ub85c \ucc98\ub9ac\ud558\uba74 \uac04\uadf9\uc774 \uc791\uc544\uc9c0\uae34 \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788 \uac04\uadf9\uc774 significant \ud558\uac8c \ud06c\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n- \uc544\ub798 \uacfc\uc815\uc740 \ubaa8\ub450 \uc774\uc0c1\uce58 \ucc98\ub9ac\ub9cc \ub2e4\ub974\uace0 \uc138\ubbf8\ub098\uc758 \ucf54\ub4dc\uc640 \uac70\uc758 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n\n++ \ubb3c\ub860 \uc218\ud559\uc801\uc73c\ub85c \uadfc\uac70\ub97c \uac00\uc9c0\uace0 \ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \uc81c \ub290\ub08c \uc0c1\uc73c\ub85c \uadf8\ub807\uac8c \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4.","f41b9c39":"- \uc6b0\uc120 \uc815\uc218\ud615 \ub370\uc774\ud130\uc640 income \uc758 \uad00\uacc4\ub97c \uba3c\uc800 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","9867ff06":"# High income & Low income\n\n- \uc800\ub294 \uc18c\ub4dd\uc5d0 \ub530\ub978 \ub450 \uc9d1\ub2e8\uc744 \ub530\ub85c \ube44\uad50\ud558\uae30 \uc704\ud574 \uc544\uc608 \ub450 \uc9d1\ub2e8\uc73c\ub85c \ub098\ub220\uc11c data\uc758 \ubd84\ud3ec\ub97c \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","ccfdd450":"1) Scatter Plot of Continuous Variable vs Target\n\n1. >50k \uc911 education_num \uc774 \ub192\uc740 \uc0ac\ub78c \uc989, \uad50\uc721 \uc218\uc900\uc774 \ub192\uc740 \uc0ac\ub78c\ub4e4\uc758 \ube44\uc911\uc774 \ub192\uc2b5\ub2c8\ub2e4.\n2. >50k \uc758 capital_gain \uc774 \uc804\uccb4\uc801\uc73c\ub85c \ub192\uace0 capital_gain \uc774 100k \uc778 \uc0ac\ub78c\ub4e4\uc774 >50k \uc5d0\ub9cc \ubd84\ud3ec\ud558\ub294 \uac83\uc774 \ud2b9\uc9d5\uc801\uc785\ub2c8\ub2e4.\n3. >50k \uc778 \uc0ac\ub78c\ub4e4\uc758 hours_per_week \uac00 40~60\uc5d0 \ub9ce\uc774 \ubd84\ud3ec\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n2) Pair-wise Scatter Plot of all Continuous Variables\n\n1. \ub69c\ub837\ud55c \ud2b9\uc9d5\uc744 \ud655\uc778\ud558\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4. \ud639\uc2dc\ub098 \ubcf4\uc774\uc2dc\ub294 \ud2b9\uc9d5\uc774 \uc788\uc73c\uba74 \uc54c\ub824\uc8fc\uc2dc\uba74 \uac10\uc0ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n3) Histograms of all Continuous Variables\n\n1. \uc6b0\uc120 <=50k \uc778 \uc0ac\ub78c\uacfc >50k \uc778 \uc0ac\ub78c\uc758 \ube44\uc728\uc774 3:1 \uc815\ub3c4 \ub77c\ub294 \uac83\uc744 \uac10\uc548\ud558\uace0 \ud2b9\uc9d5\uc744 \ucc3e\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n2. \uc804\uccb4\uc801\uc73c\ub85c \ud45c\ubcf8 \uc911\uc5d0\uc11c \ubc31\uc778, \ub0a8\uc131\uc758 \ube44\uc728\uc774 \uc6d4\ub4f1\ud788 \ub192\uc2b5\ub2c8\ub2e4.\n3. \uc18c\ub4dd\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc758 \ud3c9\uade0 \ub098\uc774\uac00 \ub354 \ub192\uc2b5\ub2c8\ub2e4.\n4. \uc18c\ub4dd\uc774 \ub192\uc740 \uc0ac\ub78c\ub4e4\uc740 \ub300\ubd80\ubd84 bachelor(\ud559\uc0ac), HS-grad(\uace0\uc878), master(\uc11d\uc0ac), prof-school(\uc804\ubb38 \ub300\ud559\uc6d0),\n   some-college \uc5d0 \ubd84\ud3ec\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n   prof school \uac19\uc740 \uacbd\uc6b0\uc5d0\ub294 \ud45c\ubcf8 \uc804\uccb4\uac00 \ub3c8\uc744 \uc798 \ubc84\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n    \n * some-college: Indicates that a person has attended college but that they did not receive any degree.\n                college\ub294 \ub2e4\ub154\uc9c0\ub9cc \uc878\uc5c5\ud558\uc9c0 \ubabb\ud588\uac70\ub098 \ub2e4\ub2c8\ub294 \uc911\uc778 \uc0ac\ub78c\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n * prof-school: MBA, law school, medical school \ub4f1 \ud559\uc0ac \uc878\uc5c5 \ud6c4 \uac00\ub294 \uc804\ubb38 \ub300\ud559\uc6d0\uc744 \ub9d0\ud569\ub2c8\ub2e4. \n               \ud754\ud788 \ub9d0\ud558\ub294 \uc0ac\uc790\uc9c1\uc5c5\uc744 \uc758\ubbf8\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n        \n5. self-emp-inc \uc989, \uc790\uc601\uc5c5\uc790\ub4e4 \uc911 \ub3c8\uc744 \uc798 \ubc84\ub294 \uc0ac\ub78c\ub4e4\uc758 \ube44\uc728\uc774 \ub192\uc2b5\ub2c8\ub2e4. ?\uc758 \ucc98\ub9ac\uac00 \uad00\uac74\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.\n6. \ub3c8\uc744 \uc798 \ubc84\ub294 \uc0ac\ub78c\ub4e4\uc774 hours_per_week \uc989, \uc77c\ud558\ub294 \uc2dc\uac04\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc758 \ubd84\ud3ec\uac00 \uc870\uae08 \ub354 \ub192\uc2b5\ub2c8\ub2e4.\n7. husband \ub098 wife, \uc989 \ubc30\uc6b0\uc790\uac00 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc774 \ub3c8\uc744 \uc798 \ubc84\ub294 \ub4ef \ud569\ub2c8\ub2e4.\n8. \ub3c8\uc744 \uc798 \ubc84\ub294 \uc0ac\ub78c\ub4e4\uc758 \uad50\uc721\uc218\uc900\uc774 \uc804\uccb4\uc801\uc73c\ub85c \ub192\uc2b5\ub2c8\ub2e4.\n9. \ubc30\uc6b0\uc790\uac00 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc804\uccb4\uc801\uc73c\ub85c income \uc774 \ub192\uc740 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc2b5\ub2c8\ub2e4\n * Married-civ-spouse \ub294 \uc77c\ubc18\uc801\uc778 \ubc30\uc6b0\uc790\uac00 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc744 \ub9d0\ud569\ub2c8\ub2e4. AF-spouse\ub294 \ubc30\uc6b0\uc790\uac00 \uad70\uc778\uc778 \uc0ac\ub78c\ub4e4\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4."}}