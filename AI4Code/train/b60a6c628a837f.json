{"cell_type":{"3ad4b103":"code","d7f9174d":"code","069f3854":"code","66bc936d":"code","de32b542":"code","9826def1":"code","f37fd7e4":"code","668970fd":"code","d2510c94":"code","022c643e":"code","d2bd0828":"code","6a46aa50":"code","25dcc118":"code","6431ac81":"code","b32e65af":"code","e780b948":"code","d2ae1f5a":"code","a7784438":"code","7d192fe6":"code","c1b6b388":"code","53b237cd":"code","233463a3":"code","acc19d74":"code","507a6c2c":"code","fc6b04d4":"code","3faaa5c0":"code","d43bfff7":"code","e6a14129":"code","9d6d43f6":"code","dc609a97":"code","d7ca6b45":"code","48591da3":"code","80ed79b1":"code","66813a6e":"code","9c0d03fd":"code","e51a0976":"code","c9d970b6":"code","84785c05":"code","35b0d760":"code","f14b2f30":"code","24e0f5d9":"code","88ec75f2":"code","b3ae6831":"code","3613222a":"code","088399f3":"code","596977f8":"code","aa69109f":"code","e99916dd":"code","dbc0527c":"code","087a369e":"code","06cc8ff2":"code","7373a112":"markdown","2e192e90":"markdown","0c27e20e":"markdown","ec63975c":"markdown","309b164a":"markdown"},"source":{"3ad4b103":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d7f9174d":"!unzip -n ..\/input\/galaxy-zoo-the-galaxy-challenge\/images_training_rev1.zip","069f3854":"!unzip -n ..\/input\/galaxy-zoo-the-galaxy-challenge\/images_test_rev1.zip","66bc936d":"from tqdm import tqdm\nimport zipfile\nimport io\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom skimage.transform import resize","de32b542":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, BatchNormalization, GlobalMaxPooling2D\nfrom tensorflow.keras import backend as K","9826def1":"pd.options.display.max_columns = 999\ndf = pd.read_csv('..\/input\/galaxy-zoo-the-galaxy-challenge\/training_solutions_rev1.zip')\ndf.head()","f37fd7e4":"df.describe()","668970fd":"# df = df.sample(n=1000, random_state=0)","d2510c94":"DATA_DIR = '..\/input\/galaxy-zoo-the-galaxy-challenge\/'\nzippath = '..\/input\/galaxy-zoo-the-galaxy-challenge\/images_training_rev1.zip'\nORIG_SIZE = 424\n# IMG_SIZE = 224\nIMG_SIZE = 299\n# IMG_SIZE = 424\n\nbatch_size = 32\n# batch_size = 16","022c643e":"# load zip\nzippath = '..\/input\/galaxy-zoo-the-galaxy-challenge\/images_training_rev1.zip'\nz = zipfile.ZipFile(zippath)\n\n# load image from zip\n# imgname = 'images_training_rev1\/100008.jpg'\nimgname = 'images_training_rev1\/100023.jpg'\nim = Image.open(io.BytesIO(z.read(imgname)))\nim_list = np.asarray(im)\nplt.imshow(im_list)\nplt.show()\n\nz.close()","d2bd0828":"im_list.shape","6a46aa50":"plt.figure(figsize=(16,4))\nfor i in range(3):\n    plt.subplot(1,3,i+1)\n    plt.imshow(im_list[:,:,i])\n    plt.colorbar()\nplt.show()","25dcc118":"def preprocess_image(image, augment_flag=False):\n    image = tf.image.decode_jpeg(image, channels=3)\n#     image = tf.image.resize(image, (IMG_SIZE,IMG_SIZE))\n    image = tf.image.resize_with_crop_or_pad(image, IMG_SIZE, IMG_SIZE)  # \u4e2d\u592ecrop\n    if augment_flag:\n        image = tf.image.random_flip_left_right(image)  # \u5de6\u53f3\u53cd\u8ee2\n        image = tf.image.random_flip_up_down(image)     # \u4e0a\u4e0b\u53cd\u8ee2\n    image \/= 255  # normalize to [0,1] range\n\n    return image","6431ac81":"def load_and_preprocess_image(path):\n#     img_path = '..\/input\/galaxy-zoo-the-galaxy-challenge\/images_training_rev1\/' + path + '.jpg'\n    img_path = 'images_training_rev1\/' + path + '.jpg'\n    image = tf.io.read_file(img_path)\n    return preprocess_image(image,  augment_flag=True)","b32e65af":"# import matplotlib.pyplot as plt\n\n# label = str(df.iloc[1, 0])\n# # label = '303732'\n# # img_path = '..\/input\/galaxy-zoo-the-galaxy-challenge\/images_training_rev1\/' + label + '.jpg'\n\n# plt.imshow(load_and_preprocess_image(label))\n# plt.grid(False)\n# plt.title(label)\n# plt.colorbar()\n# plt.show()","e780b948":"from sklearn.model_selection import train_test_split\n(x_train, x_test, y_train, y_test) = train_test_split(df.values[:,0].astype(int).astype(str), df.values[:,1:], test_size=0.2, random_state=0)","d2ae1f5a":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","a7784438":"path_ds = tf.data.Dataset.from_tensor_slices(x_train)","7d192fe6":"path_ds","c1b6b388":"image_ds = path_ds.map(load_and_preprocess_image, num_parallel_calls=AUTOTUNE)","53b237cd":"label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(y_train, tf.float32))","233463a3":"image_label_ds = tf.data.Dataset.zip((image_ds, label_ds))","acc19d74":"# ds = image_label_ds.cache(filename='.\/cache.tf-data')\n# ds = image_label_ds.cache()\nds = image_label_ds\nds = ds.apply(\n    tf.data.experimental.shuffle_and_repeat(buffer_size=1000))\nds = ds.batch(batch_size)","507a6c2c":"path_ds_valid = tf.data.Dataset.from_tensor_slices(x_test)\nimage_ds_valid = path_ds_valid.map(load_and_preprocess_image, num_parallel_calls=AUTOTUNE)\nlabel_ds_valid = tf.data.Dataset.from_tensor_slices(tf.cast(y_test, tf.float32))\nds_valid = tf.data.Dataset.zip((image_ds_valid, label_ds_valid))\nds_valid = ds_valid.batch(batch_size)","fc6b04d4":"y_test.shape","3faaa5c0":"# for x in image_ds:\n# for x, y in image_label_ds:\nfor x, y in ds:\n#     print(x.shape)\n    print(x.shape, y.shape)\n    break","d43bfff7":"# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9\nfrom tensorflow.keras.applications import VGG16, ResNet50, ResNet50V2, MobileNetV2, EfficientNetB0, InceptionResNetV2, Xception\nfrom tensorflow.keras import models, layers, regularizers\n\n# conv_base = VGG16(weights='imagenet',\n# conv_base = ResNet50(weights='imagenet',\n# conv_base = ResNet50V2(weights='imagenet',\n# conv_base = MobileNetV2(weights='imagenet',\n# conv_base = EfficientNetB0(weights='imagenet',\n# conv_base = InceptionResNetV2(weights='imagenet',\nconv_base = Xception(weights='imagenet',\n                 include_top=False, pooling='avg',\n                 input_shape=(IMG_SIZE, IMG_SIZE, 3))\nconv_base.summary()","e6a14129":"conv_base.input_shape","9d6d43f6":"df.head()","dc609a97":"# Functional API\nfrom tensorflow.keras.layers import Input, Flatten, Dense, Concatenate, Multiply\nfrom tensorflow.keras.activations import softmax, sigmoid\nfrom tensorflow.keras import Model\n\ninputs = Input(shape=(IMG_SIZE, IMG_SIZE, 3))\nx = conv_base(inputs)\nx = Flatten()(x)\nx = Dense(37, kernel_initializer='he_normal')(x)\n\n# Galaxy Zoo \u306e Decision Tree \u306e\u6761\u4ef6\u3092\u30e2\u30c7\u30eb\u306b\u53cd\u6620\nx01 = softmax(x[:,:3])                             # Task01 \u5408\u8a08\u304c1.0\nx02 = Multiply()([softmax(x[:, 3: 5]), x01[:,1]])  # Task02 \u5408\u8a08\u304cTask01\u306e2\u3064\u76ee\nx03 = Multiply()([softmax(x[:, 5: 7]), x02[:,1]])  # Task03 \u5408\u8a08\u304cTask02\u306e2\u3064\u76ee\nx04 = Multiply()([softmax(x[:, 7: 9]), x02[:,1]])  # Task04 \u5408\u8a08\u304cTask02\u306e2\u3064\u76ee\nx05 = Multiply()([softmax(x[:, 9:13]), x04[:,1]])  # Task05 \u5408\u8a08\u304cTask04\u306e2\u3064\u76ee\nx06 = Multiply()([softmax(x[:,13:15]), x04[:,1]])  # Task06 \u5408\u8a08\u304cTask04\u306e2\u3064\u76ee\nx07 = Multiply()([softmax(x[:,15:18]), x01[:,0]])  # Task07 \u5408\u8a08\u304cTask01\u306e1\u3064\u76ee\nx08 = Multiply()([softmax(x[:,18:25]), x06[:,0]])  # Task08 \u5408\u8a08\u304cTask06\u306e1\u3064\u76ee\nx09 = Multiply()([softmax(x[:,25:28]), x02[:,0]])  # Task09 \u5408\u8a08\u304cTask02\u306e1\u3064\u76ee\nx10 = Multiply()([softmax(x[:,28:31]), x04[:,0]])  # Task10 \u5408\u8a08\u304cTask04\u306e1\u3064\u76ee\nx11 = Multiply()([softmax(x[:,31:37]), x04[:,0]])  # Task11 \u5408\u8a08\u304cTask04\u306e1\u3064\u76ee\n\noutputs = Concatenate(axis=1)([x01, x02, x03, x04, x05, x06, x07, x08, x09, x10, x11])\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.summary()","d7ca6b45":"# for layer in conv_base.layers:\n#     print(layer.name)","48591da3":"# \u51cd\u7d50\n# conv_base.trainable = False\n\n# \u6700\u521d\u304b\u3089\u7279\u5b9a\u306e\u5c64\u307e\u3067\u3092\u51cd\u7d50\n# conv_base.trainable = True\n# set_trainable = False\n# for layer in conv_base.layers:\n#     if layer.name == 'block14_sepconv1':\n#         set_trainable = True\n#     if set_trainable:\n#         layer.trainable = True\n#     else:\n#         layer.trainable = False\n\nlen(model.trainable_weights)","80ed79b1":"def root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true))) ","66813a6e":"# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u69cb\u7bc9\nfrom tensorflow.keras import optimizers\n\nmodel.compile(loss='MeanSquaredError',\n#              optimizer=optimizers.RMSprop(lr=1e-4),\n             optimizer=optimizers.RMSprop(lr=1e-3),\n#              optimizer=optimizers.Adam(lr=1e-4),\n#              optimizer=optimizers.Adam(lr=1e-3),\n#              optimizer=optimizers.SGD(lr=0.01),\n#              optimizer=optimizers.SGD(lr=0.01, momentum=0.9),\n             metrics=['acc', root_mean_squared_error])","9c0d03fd":"%%time\n# history = model.fit(ds, epochs=5, steps_per_epoch=10, use_multiprocessing=True, workers=8, \n#                     validation_steps=10, validation_data=ds_valid)\nhistory = model.fit(ds, epochs=5, steps_per_epoch=x_train.shape[0]\/\/batch_size, use_multiprocessing=True, workers=8, \n                    validation_steps=x_test.shape[0]\/\/batch_size, validation_data=ds_valid)\n# history = model.fit(ds, epochs=20, steps_per_epoch=61578\/\/32+1, workers=0, validation_steps=1, validation_data=ds_valid, initial_epoch=2)","e51a0976":"y_pred = model.predict(ds_valid, use_multiprocessing=True, workers=8, verbose=1, steps=1)","c9d970b6":"idx = 2\nprint(y_pred[idx])\nprint(sum(y_pred[idx,:3]), sum(y_pred[idx,3:5]), sum(y_pred[idx,5:7]), sum(y_pred[idx,7:9]), sum(y_pred[idx,9:13]), \n      sum(y_pred[idx,13:15]), sum(y_pred[idx,15:18]), sum(y_pred[idx,18:25]), sum(y_pred[idx,25:28]), sum(y_pred[idx,28:31]), \n      sum(y_pred[idx,31:37]))","84785c05":"model.evaluate(ds_valid)","35b0d760":"model.save('my_model.h5')","f14b2f30":"history.history","24e0f5d9":"plt.plot(history.history[\"root_mean_squared_error\"], label=\"train\", ls=\"-\", marker=\"o\")\nplt.plot(history.history[\"val_root_mean_squared_error\"], label=\"test\", ls=\"-\", marker=\"x\")\nplt.ylabel(\"root_mean_squared_error\")\nplt.xlabel(\"epoch\")\nplt.legend(loc=\"best\")\nplt.show()","88ec75f2":"#acc, val_acc\u306e\u30d7\u30ed\u30c3\u30c8\nplt.plot(history.history[\"acc\"], label=\"train\", ls=\"-\", marker=\"o\")\nplt.plot(history.history[\"val_acc\"], label=\"test\", ls=\"-\", marker=\"x\")\nplt.ylabel(\"Accuracy\")\nplt.ylim(0,1)\nplt.xlabel(\"epoch\")\nplt.legend(loc=\"best\")\nplt.show()","b3ae6831":"submission = pd.read_csv('..\/input\/galaxy-zoo-the-galaxy-challenge\/all_ones_benchmark.zip')","3613222a":"# submission = submission.sample(n=1000, random_state=0)","088399f3":"submission.shape","596977f8":"def load_and_preprocess_test_image(path):\n#     img_path = '..\/input\/galaxy-zoo-the-galaxy-challenge\/images_test_rev1\/' + path + '.jpg'\n    img_path = 'images_test_rev1\/' + path + '.jpg'\n    image = tf.io.read_file(img_path)\n    return preprocess_image(image)","aa69109f":"import matplotlib.pyplot as plt\n\nlabel = str(submission.iloc[0, 0])\n\nplt.imshow(load_and_preprocess_test_image(label))\nplt.grid(False)\nplt.title(label)\nprint()","e99916dd":"path_ds_test = tf.data.Dataset.from_tensor_slices(submission.values[:,0].astype(int).astype(str))\nimage_ds_test = path_ds_test.map(load_and_preprocess_test_image, num_parallel_calls=AUTOTUNE)\nlabel_ds_test = tf.data.Dataset.from_tensor_slices(tf.cast(np.zeros((submission.shape[0], 37)), tf.float32))\nds_test = tf.data.Dataset.zip((image_ds_test, label_ds_test))\nds_test = ds_test.batch(batch_size)","dbc0527c":"# y_pred = model.predict(test_x)\ny_pred = model.predict(ds_test, use_multiprocessing=True, workers=8, verbose=1)","087a369e":"submission.iloc[:, 1:] = y_pred","06cc8ff2":"submission.to_csv('submission.csv', index=False)","7373a112":"- INPUT: 299x299\n- Model: Xception\n- pooling: GlobalAverage\n- OUTPUT: 37class to reflect Decision Tree by Functional API","2e192e90":"## tf.data.Dataset \u3092\u4f7f\u3046","0c27e20e":"## Submission","ec63975c":"## Model","309b164a":"# Galaxy Zoo - The Galaxy Challenge"}}