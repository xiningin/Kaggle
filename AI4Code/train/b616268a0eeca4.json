{"cell_type":{"dfe05438":"code","89c0f4cb":"code","463d353e":"code","49370e3c":"code","3d2dd915":"code","4b42c8b9":"code","fef9b9c6":"code","35a475c2":"code","fd366a00":"code","9af011c7":"code","cd4c1915":"code","d028e8aa":"code","07a54e5d":"code","9a03aaed":"code","90220e45":"code","619b7667":"code","3854b66b":"code","fd6d119a":"code","80138c54":"code","a5f55f50":"code","60a377b3":"code","f7c21609":"code","7f327439":"code","eeff2c76":"code","69321a27":"code","3ddae09b":"code","306cc017":"code","6120f082":"code","1a2b12a9":"code","884611a5":"code","d8787ebe":"code","1607ac55":"code","272295cb":"code","02e868cc":"code","b07fe987":"code","b6c55457":"code","ae1f3012":"code","c42724bb":"code","f96a0a6c":"code","284d1951":"code","de5cfaac":"code","a1b98beb":"code","7430e1e2":"code","91ba8004":"code","16480096":"code","f41f23d8":"code","b2028099":"markdown","1c324a1d":"markdown","64e8c2a0":"markdown","9ed24b95":"markdown","c5366d88":"markdown","b1a7f9ba":"markdown","510c1e29":"markdown","35c54d25":"markdown","2c2bacaa":"markdown","54f648b5":"markdown","b9eacf10":"markdown","9924c1f7":"markdown","e64a0c19":"markdown","ca481e51":"markdown","856c75ab":"markdown","66fa015d":"markdown","2afa001b":"markdown"},"source":{"dfe05438":"import numpy as np \nimport pandas as pd \nimport nltk\nimport os\nimport gc\nfrom keras.preprocessing import sequence,text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Embedding,LSTM,Conv1D,GlobalMaxPooling1D,Flatten,MaxPooling1D,GRU,SpatialDropout1D,Bidirectional\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,f1_score\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#pd.set_option('display.max_colwidth',100)\npd.set_option('display.max_colwidth', -1)","89c0f4cb":"gc.collect()","463d353e":"train=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/train.tsv',sep='\\t')\nprint(train.shape)\ntrain.head()","49370e3c":"test=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/test.tsv',sep='\\t')\nprint(test.shape)\ntest.head()","3d2dd915":"sub=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/sampleSubmission.csv')\nsub.head()","4b42c8b9":"test['Sentiment']=-999\ntest.head()","fef9b9c6":"df=pd.concat([train,test],ignore_index=True)\nprint(df.shape)\ndf.tail()","35a475c2":"del train,test\ngc.collect()","fd366a00":"from nltk.tokenize import word_tokenize\nfrom nltk import FreqDist\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nstemmer=SnowballStemmer('english')\nlemma=WordNetLemmatizer()\nfrom string import punctuation\nimport re\n","9af011c7":"def clean_review(review_col):\n    review_corpus=[]\n    for i in range(0,len(review_col)):\n        review=str(review_col[i])\n        review=re.sub('[^a-zA-Z]',' ',review)\n        #review=[stemmer.stem(w) for w in word_tokenize(str(review).lower())]\n        review=[lemma.lemmatize(w) for w in word_tokenize(str(review).lower())]\n        review=' '.join(review)\n        review_corpus.append(review)\n    return review_corpus","cd4c1915":"df['clean_review']=clean_review(df.Phrase.values)\ndf.head()\n","d028e8aa":"df_train=df[df.Sentiment!=-999]\ndf_train.shape","07a54e5d":"df_test=df[df.Sentiment==-999]\ndf_test.drop('Sentiment',axis=1,inplace=True)\nprint(df_test.shape)\ndf_test.head()","9a03aaed":"del df\ngc.collect()","90220e45":"train_text=df_train.clean_review.values\ntest_text=df_test.clean_review.values\ntarget=df_train.Sentiment.values\ny=to_categorical(target)\nprint(train_text.shape,target.shape,y.shape)","619b7667":"X_train_text,X_val_text,y_train,y_val=train_test_split(train_text,y,test_size=0.2,stratify=y,random_state=123)\nprint(X_train_text.shape,y_train.shape)\nprint(X_val_text.shape,y_val.shape)","3854b66b":"all_words=' '.join(X_train_text)\nall_words=word_tokenize(all_words)\ndist=FreqDist(all_words)\nnum_unique_word=len(dist)\nnum_unique_word","fd6d119a":"r_len=[]\nfor text in X_train_text:\n    word=word_tokenize(text)\n    l=len(word)\n    r_len.append(l)\n    \nMAX_REVIEW_LEN=np.max(r_len)\nMAX_REVIEW_LEN","80138c54":"max_features = num_unique_word\nmax_words = MAX_REVIEW_LEN\nbatch_size = 128\nepochs = 3\nnum_classes=5","a5f55f50":"tokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(X_train_text))\nX_train = tokenizer.texts_to_sequences(X_train_text)\nX_val = tokenizer.texts_to_sequences(X_val_text)\nX_test = tokenizer.texts_to_sequences(test_text)","60a377b3":"X_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_val = sequence.pad_sequences(X_val, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\nprint(X_train.shape,X_val.shape,X_test.shape)","f7c21609":"model1=Sequential()\nmodel1.add(Embedding(max_features,100,mask_zero=True))\nmodel1.add(LSTM(64,dropout=0.4, recurrent_dropout=0.4,return_sequences=True))\nmodel1.add(LSTM(32,dropout=0.5, recurrent_dropout=0.5,return_sequences=False))\nmodel1.add(Dense(num_classes,activation='softmax'))\nmodel1.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel1.summary()","7f327439":"%%time\nhistory1=model1.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","eeff2c76":"y_pred1=model1.predict_classes(X_test,verbose=1)","69321a27":"sub.Sentiment=y_pred1\nsub.to_csv('sub1.csv',index=False)\nsub.head()","3ddae09b":"model2= Sequential()\nmodel2.add(Embedding(max_features,100,input_length=max_words))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Conv1D(64,kernel_size=3,padding='same',activation='relu',strides=1))\nmodel2.add(GlobalMaxPooling1D())\n\nmodel2.add(Dense(128,activation='relu'))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(num_classes,activation='softmax'))\n\n\nmodel2.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel2.summary()","306cc017":"%%time\nhistory2=model2.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","6120f082":"y_pred2=model2.predict_classes(X_test, verbose=1)","1a2b12a9":"sub.Sentiment=y_pred2\nsub.to_csv('sub2.csv',index=False)\nsub.head()","884611a5":"model3= Sequential()\nmodel3.add(Embedding(max_features,100,input_length=max_words))\nmodel3.add(Conv1D(64,kernel_size=3,padding='same',activation='relu'))\nmodel3.add(MaxPooling1D(pool_size=2))\nmodel3.add(Dropout(0.25))\nmodel3.add(GRU(128,return_sequences=True))\nmodel3.add(Dropout(0.3))\nmodel3.add(Flatten())\nmodel3.add(Dense(128,activation='relu'))\nmodel3.add(Dropout(0.5))\nmodel3.add(Dense(5,activation='softmax'))\nmodel3.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel3.summary()","d8787ebe":"%%time\nhistory3=model3.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","1607ac55":"y_pred3=model3.predict_classes(X_test, verbose=1)\n","272295cb":"sub.Sentiment=y_pred3\nsub.to_csv('sub3.csv',index=False)\nsub.head()","02e868cc":"model4 = Sequential()\n\nmodel4.add(Embedding(max_features, 100, input_length=max_words))\nmodel4.add(SpatialDropout1D(0.25))\nmodel4.add(Bidirectional(GRU(128)))\nmodel4.add(Dropout(0.5))\n\nmodel4.add(Dense(5, activation='softmax'))\nmodel4.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel4.summary()","b07fe987":"%%time\nhistory4=model4.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","b6c55457":"y_pred4=model4.predict_classes(X_test, verbose=1)","ae1f3012":"sub.Sentiment=y_pred4\nsub.to_csv('sub4.csv',index=False)\nsub.head()","c42724bb":"def get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\n    \ndef get_embed_mat(EMBEDDING_FILE, max_features,embed_dim):\n    # word vectors\n    embeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE, encoding='utf8'))\n    print('Found %s word vectors.' % len(embeddings_index))\n\n    # embedding matrix\n    word_index = tokenizer.word_index\n    num_words = min(max_features, len(word_index) + 1)\n    all_embs = np.stack(embeddings_index.values()) #for random init\n    embedding_matrix = np.random.normal(all_embs.mean(), all_embs.std(), \n                                        (num_words, embed_dim))\n    for word, i in word_index.items():\n        if i >= max_features:\n            continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector\n    max_features = embedding_matrix.shape[0]\n    \n    return embedding_matrix","f96a0a6c":"# embedding matrix\nEMBEDDING_FILE = '..\/input\/glove6b100dtxt\/glove.6B.100d.txt'\nembed_dim = 100 #word vector dim\nembedding_matrix = get_embed_mat(EMBEDDING_FILE,max_features,embed_dim)\nprint(embedding_matrix.shape)","284d1951":"model5 = Sequential()\nmodel5.add(Embedding(max_features, embed_dim, input_length=X_train.shape[1],weights=[embedding_matrix],trainable=True))\nmodel5.add(SpatialDropout1D(0.25))\nmodel5.add(Bidirectional(GRU(128,return_sequences=True)))\nmodel5.add(Bidirectional(GRU(64,return_sequences=False)))\nmodel5.add(Dropout(0.5))\nmodel5.add(Dense(num_classes, activation='softmax'))\nmodel5.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel5.summary()","de5cfaac":"%%time\nhistory5=model5.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=4, batch_size=batch_size, verbose=1)","a1b98beb":"y_pred5=model5.predict_classes(X_test, verbose=1)","7430e1e2":"sub.Sentiment=y_pred5\nsub.to_csv('sub5.csv',index=False)\nsub.head()","91ba8004":"sub_all=pd.DataFrame({'model1':y_pred1,'model2':y_pred2,'model3':y_pred3,'model4':y_pred4,'model5':y_pred5})\npred_mode=sub_all.agg('mode',axis=1)[0].values\nsub_all.head()","16480096":"pred_mode=[int(i) for i in pred_mode]","f41f23d8":"sub.Sentiment=pred_mode\nsub.to_csv('sub_mode.csv',index=False)\nsub.head()","b2028099":"## Importing Library","1c324a1d":"**Adding Sentiment column to test datset and joing train and test for preprocessing**","64e8c2a0":"## 3. CNN +GRU","9ed24b95":"** cleaning review**","c5366d88":"## 4. Bidirectional GRU","b1a7f9ba":"### Finding max length of a review in train set","510c1e29":"### Finding number of unique words in train set","35c54d25":"###  combine all output","2c2bacaa":"## Building Keras LSTM model","54f648b5":"** sequence padding**","b9eacf10":"### Loading dataset and basic visualization","9924c1f7":"## 2. CNN","e64a0c19":"## 1. LSTM model","ca481e51":"## 5. Glove word embedding","856c75ab":"### Splitting Train dataset into train and 20% validation set","66fa015d":"** seperating train and test dataset**","2afa001b":"** Tokenize Text**"}}