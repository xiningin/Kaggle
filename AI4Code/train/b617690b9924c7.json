{"cell_type":{"c5756a21":"code","3d612002":"code","65856ec2":"code","3eac2768":"code","2902d62e":"code","a577e0ed":"code","b639310c":"code","f5f39a1b":"code","4204068b":"code","e3f80bfd":"code","6bf9db19":"code","86b95dd8":"code","e087c4dd":"code","62fc51ad":"code","fe2057ef":"code","b8e692c4":"code","b4721e84":"code","52f73b4d":"code","e4a2a9a2":"code","c072cff6":"code","538f9ec8":"code","e709030e":"code","7511277d":"code","ea68d7b4":"code","913218e6":"code","4102ae98":"code","05c10bc9":"code","556285eb":"code","d6bb023d":"markdown","e87a6303":"markdown","06301b50":"markdown","9e773109":"markdown","12698b12":"markdown","64e421ca":"markdown","40eaa72e":"markdown","85c26822":"markdown","9e287ac5":"markdown","3a0fd090":"markdown"},"source":{"c5756a21":"import numpy as np\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d612002":"steel = pd.read_csv('..\/input\/roller-coasters\/Golden_Ticket_Award_Winners_Steel.csv')\nwood = pd.read_csv('..\/input\/roller-coasters\/Golden_Ticket_Award_Winners_Wood.csv')\ncoaster = pd.read_csv('..\/input\/roller-coasters\/roller_coasters.csv')","65856ec2":"coaster.dtypes","3eac2768":"steel.info()","2902d62e":"coaster.head()","a577e0ed":"wood.info()","b639310c":"steel.head()","f5f39a1b":"wood.head()","4204068b":"def Roller_Coaster_Points(roller_type, name):\n    year = (roller_type['Year of Rank'][roller_type['Name'] == name.title()])\n    points = (roller_type['Points'][roller_type['Name'] == name.title()])\n    rank = (roller_type['Rank'][roller_type['Name'] == name.title()])\n    \n    plt.figure(figsize=(12,12))\n    ax = plt.subplot(211)\n    plt.plot(year, points, marker = '+', color ='black', label= 'Points', lw =3, ms=15)\n    plt.title('Points over the Years of ' + name.title(), fontsize = 16)\n    plt.xlabel('Years')\n    plt.ylabel('Points')\n    plt.legend()\n    ax = plt.subplot(212)\n    plt.plot(year, rank, marker = 's', color = 'red', label= 'Rank', lw =3)\n    plt.title('Ranking over the Years of ' + name.title(), fontsize = 16)\n    plt.xlabel('Years')\n    plt.ylabel('Points')\n    plt.legend()\n    plt.show()\n    ","e3f80bfd":"Roller_Coaster_Points(wood, 'el toro')","6bf9db19":"Roller_Coaster_Points(steel, 'millennium force')","86b95dd8":"def Comparing_Roller_Coaster(roller_type_1, name_1, roller_type_2, name_2):\n    plt.figure(figsize=(12,12))\n    ax = plt.subplot(211)\n    plt.plot(roller_type_1['Year of Rank'][roller_type_1['Name'] == name_1.title()], roller_type_1['Points'][roller_type_1['Name'] == name_1.title()], marker = '+', color ='black', label= 'Points of ' + name_1.title())\n    plt.plot(roller_type_2['Year of Rank'][roller_type_2['Name'] == name_2.title()], roller_type_2['Points'][roller_type_2['Name'] == name_2.title()], marker = '*', color ='green', label= 'Points of ' + name_2.title())\n    \n    plt.title('Points over the Years of {} and {}'.format(name_1.title(),name_2.title()), fontsize = 16)\n    plt.xlabel('Years')\n    plt.ylabel('Points')\n    plt.legend()\n    \n    ax = plt.subplot(212)\n    plt.plot(roller_type_1['Year of Rank'][roller_type_1['Name'] == name_1.title()], roller_type_1['Rank'][roller_type_1['Name'] == name_1.title()], marker = '+', color ='red', label= 'Points of ' + name_1.title())\n    plt.plot(roller_type_2['Year of Rank'][roller_type_2['Name'] == name_2.title()], roller_type_2['Rank'][roller_type_2['Name'] == name_2.title()], marker = '*', color ='blue', label= 'Points of ' + name_2.title())\n    plt.title('Rank over the Years of {} and {}'.format(name_1.title(),name_2.title()), fontsize = 16)\n    plt.xlabel('Years')\n    plt.ylabel('Points')\n    plt.legend()\n    plt.show()","e087c4dd":"Comparing_Roller_Coaster(wood, 'el toro', steel, 'bizarro')","62fc51ad":"def Different_Roller_Coaster_Ranking(roller_type, n):\n    plt.figure(figsize=(12,12))\n    ax = plt.subplot()\n    top_n_rankings = roller_type[roller_type['Rank'] <= n] \n    \n    for coaster in set(top_n_rankings['Name']):\n        coaster_rankings = top_n_rankings[top_n_rankings['Name'] == coaster]\n        plt.plot(coaster_rankings['Year of Rank'],coaster_rankings['Rank'],label=coaster, marker= 's', lw = 3)\n            \n    plt.legend()\n    plt.title('Ranking over the Years', fontsize = 16)\n    plt.xlabel('Years')\n    plt.ylabel('Rank')\n    \n    plt.show()","fe2057ef":"Different_Roller_Coaster_Ranking(wood, 5)","b8e692c4":"Different_Roller_Coaster_Ranking(steel, 15)","b4721e84":"Different_Roller_Coaster_Ranking(wood, 50)\nDifferent_Roller_Coaster_Ranking(steel, 50)","52f73b4d":"coaster.head()","e4a2a9a2":"coaster.isna().sum()","c072cff6":"coaster = coaster.dropna()\nheight = coaster.height[coaster['height'] <=140]\ncolormap = np.array(['r', 'g', 'b'])","538f9ec8":"def histogram_coaster(data):\n    coaster_test = []\n    for i, n in data.dtypes.items():\n        if n == 'float64' or n== 'int64':\n            coaster_test.append(data[i])\n            for x in range(len(coaster_test)):\n                plt.figure(figsize=(12,12))\n                ax = plt.subplot(len(coaster_test), 1, x+1)\n                break\n            plt.hist(data[i], edgecolor = 'black', color = 'orange', bins = 40)\n            plt.title('Histograms of ' + i.title())\n            plt.xlabel(i.title())\n            plt.ylabel('Frequency')\n            plt.show()","e709030e":"histogram_coaster(coaster)","7511277d":"def bar_park(df, park):\n    park_df = df[df['park'] == park]\n    roller_coaster = park_df['name']\n    inversions = park_df['num_inversions']\n    plt.figure(figsize = (20, 15))\n    ax = plt.subplot()\n    ay = plt.subplot()\n    plt.bar(range(len(roller_coaster)), inversions)\n    ax.set_xticks(range(len(roller_coaster)))\n    ax.set_xticklabels(roller_coaster)\n    plt.xticks(rotation=45)\n    plt.legend([park])\n    plt.show()","ea68d7b4":"bar_park(coaster, 'Parc Asterix')","913218e6":"def pie_coaster(data):\n    explode = [0.07,0,0,0,0,0,0,0]\n    plt.figure(figsize =(12,12))\n    plt.pie(coaster['status'].value_counts(), autopct = '%.2f%%', shadow= True, explode = explode, pctdistance =.8 )\n    plt.title('Status of Different Roller Coasters', fontsize =20)\n    plt.legend(coaster['status'].value_counts().keys())\n    plt.show()","4102ae98":"pie_coaster(coaster)","05c10bc9":"def scatter_plot(data, num_1, num_2):\n    plt.figure(figsize=(12,12))\n    plt.scatter(data[num_1], data[num_2])\n    plt.title('Scatter plot of {} {}'.format(num_1.title(), num_2.title()))\n    plt.xlabel(num_1.title())\n    plt.ylabel(num_2.title())\n    plt.show()","556285eb":"scatter_plot(coaster, 'speed', 'length')","d6bb023d":"***This second function is in order to compare the distinct roller coasters' points and rank over the year.\nI'd like write a function that just take two arguments: names. And in the fisrt intance, the function looks for name in one dataset and if the function doesn't find, starts searching in the next dataframe.***","e87a6303":"> **So, we have 4 numeric columns: speed, height, lenght, num_inversions. But first, we'll review our dataframe.\nWe have have so many options, but we are novice, so we limited in two, the first one is drop any null value, the second opntion what we should take in mind is fill all the NA values.\nIn this example we will do by the fisrt way. If we rather do it filling the columns we should use 'fillna()'. Also we should remove the outliers","06301b50":"***We'll write a function that creates a scatter plot of two numeric columns of the roller coaster DataFrame. The function should take the roller coaster DataFrame and two-column names as arguments.***","9e773109":"Then we  will write a function that plots a histogram of any numeric column of the roller coaster DataFrame. The function should take a DataFrame and a column name for which a histogram should be constructed as arguments. Make sure to include informative labels that describe your visualization.","12698b12":"Roller coasters are thrilling amusement park rides designed to make you squeal and scream! They take you up high, drop you to the ground quickly, and sometimes even spin you upside down before returning to a stop. Today you will be taking control back from the roller coasters and visualizing data covering international roller coaster rankings and roller coaster statistics.","64e421ca":"# Then we'll write a function that creates a bar chart showing the number of inversions for each roller coaster at an amusement park. The function should take the roller coaster DataFrame and an amusement park name as arguments.","40eaa72e":"*In this function I define a value called 'top_n_rankings', where I placed the df of roller coasters by ranking just if was minor than n.\nThen a for loop, where I writed another df called 'coaster_rankings'  where I put the df 'top_n_rankings' by name. 'Coster_rankinks' look for the name of 'coster' coming from the for loop and return a df divided by name and ranking minor to n.*","85c26822":"**Writing a functing that takes two arguments, and return a plot of the points and rank of roller coaster over the years. \nThe first argument is de dataset and the second is the name of roller coster.**","9e287ac5":"> # **Roller Coasters**","3a0fd090":"# So the functions takes just the values 'float64' and 'int64' and returns a histogram about this column**"}}