{"cell_type":{"5643be90":"code","3f6c551b":"code","9be57382":"code","bec7f750":"code","b80ede2b":"code","c07cdc24":"code","aace36fa":"code","9fba8eb3":"code","65b1c857":"code","1c45cebd":"code","32de3bd2":"code","10cead3d":"code","4453700e":"code","fef79cf4":"code","54e9ce48":"code","aab5b448":"code","c305f643":"code","be62f8be":"code","fe0cf391":"code","7c417493":"code","b15bff56":"code","c2436744":"code","a9aaf5aa":"code","e2737080":"code","62264e69":"code","2edcf265":"code","53fbdb33":"code","442230b3":"code","e9299aad":"code","1d9dc723":"code","6813dbe1":"code","39fbc885":"code","a9171e32":"code","5cd57390":"code","1055b155":"code","f131ded1":"code","70917757":"code","2ab73734":"code","308535a5":"code","9e9a8a9f":"code","42688020":"code","da67e29b":"code","8cef5acd":"code","b93dc0d7":"code","f9aef8d9":"code","e4817fc4":"code","ab8f68d3":"code","34bf7c24":"code","2bd44b3d":"code","bd0e67ab":"code","9997f95d":"code","073c09f1":"code","f3c19448":"markdown","eb5a31cf":"markdown","ec01e043":"markdown","a746aba2":"markdown","2bef9d88":"markdown","ce4cba06":"markdown","2f626d11":"markdown","5b8fc917":"markdown","8855259b":"markdown","1a6c90c0":"markdown","a825d6c7":"markdown","42dc868b":"markdown","2a6213f8":"markdown","f2549ca0":"markdown","9e7ec498":"markdown","913e3ee2":"markdown","bcfe9d33":"markdown","1ce2a389":"markdown","fa82e67b":"markdown","4f9a20c2":"markdown","83c006e7":"markdown","3e2d6254":"markdown","0535f5f8":"markdown","99d825ce":"markdown","e813084c":"markdown","8458d3d5":"markdown","77909640":"markdown","7a639f4c":"markdown","d67706d7":"markdown","a3646a2b":"markdown"},"source":{"5643be90":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","3f6c551b":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9be57382":"trainnRows, trainnCols = train.shape\ntestnRows, testnCols = test.shape\nprint('Train rows:', trainnRows)\nprint('Train columns:', trainnCols)\nprint('Test rows:', testnRows)\nprint('Test columns:', testnCols)","bec7f750":"train.info()","b80ede2b":"print('Train:')\nprint(train.isna().sum())\nprint('\\nTest:')\nprint(test.isna().sum())","c07cdc24":"print('Train sample:')\nprint(train.sample(5))\nprint('\\nTest sample:')\nprint(test.sample(5))","aace36fa":"train.apply(lambda x: len(x.unique()), axis=0)","9fba8eb3":"print('Unique values for Survided:', train['Survived'].unique())\nprint('Unique values for Pclass:', train['Pclass'].unique())\nprint('Unique values for Sex:', train['Sex'].unique())\nprint('Unique values for SibSp:', train['SibSp'].unique())\nprint('Unique values for Parch:', train['Parch'].unique())\nprint('Unique values for Embarked:', train['Embarked'].unique())","65b1c857":"train['Name'].sample(10)","1c45cebd":"train['title'] = train.Name.str.split().apply(lambda x: [y for y in x if y[-1] =='.'][0])","32de3bd2":"train.title.unique()","10cead3d":"train.groupby('title').PassengerId.count()","4453700e":"train.loc[(train.Name.str.contains('\\('))].head()","fef79cf4":"train.loc[1].Name","54e9ce48":"train.loc[train.Name.str.contains('\\\"')]","aab5b448":"train['buyersurname'] = train.Name.apply(lambda x: x.split(',')[0])\ntrain['surname'] = train.buyersurname # by default it is the same person\ntrain['maidenname'] = None\n\nboughtForOthers = train.loc[(train.Name.str.contains('\\(')) & ~(train.Name.str.contains('\\\"'))] # bought for others\n# first the none wifes:\nnames = boughtForOthers.loc[boughtForOthers.title !='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0].split()[-1])\ntrain.loc[names.index, 'surname'] = names\n# now the maiden names of the wifes\nnames = boughtForOthers.loc[boughtForOthers.title =='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0])\nnames = names.loc[names.apply(lambda x: len(x.split())>1)]\ntrain.loc[names.index, 'maidenname'] = names","c305f643":"train.sample(5)","be62f8be":"def proc_names(inputdf):\n    df = inputdf.copy()\n    df['title'] = df.Name.str.split().apply(lambda x: [y for y in x if y[-1] =='.'][0])\n    df['buyersurname'] = df.Name.apply(lambda x: x.split(',')[0])\n    df['surname'] = df.buyersurname # by default it is the same person\n    df['maidenname'] = None\n\n    boughtForOthers = df.loc[(df.Name.str.contains('\\(')) & ~(df.Name.str.contains('\\\"'))] # bought for others\n    # first the none wifes:\n    names = boughtForOthers.loc[boughtForOthers.title !='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0].split()[-1])\n    df.loc[names.index, 'surname'] = names\n    # now the maiden names of the wifes (this is not perfect and there are some errors)\n    names = boughtForOthers.loc[boughtForOthers.title =='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0])\n    names = names.loc[names.apply(lambda x: len(x.split())>1)]\n    df.loc[names.index, 'maidenname'] = names\n    return df\n    ","fe0cf391":"ticketSplit = train.Ticket.apply(lambda x: x.split()).values\ntrain['ticketnumber'] = pd.array([int(x[-1]) if x[-1].isdigit() else None for x in ticketSplit], dtype=pd.Int64Dtype())\ntrain['ticketprefix'] = [np.nan if len(x)==1 else ' '.join(x[:len(x)-1]) for x in ticketSplit]","7c417493":"train.ticketprefix.unique()","b15bff56":"t = train.groupby('ticketnumber').PassengerId.count().sort_values(ascending=False)\nt[t>1]","c2436744":"train.sort_values('ticketnumber')","a9aaf5aa":"def proc_tickets(inputdf):\n    df = inputdf.copy()\n    ticketSplit = df.Ticket.apply(lambda x: x.split()).values\n    df['ticketnumber'] = pd.array([int(x[-1]) if x[-1].isdigit() else None for x in ticketSplit], dtype=pd.Int64Dtype())\n    df['ticketprefix'] = [np.nan if len(x)==1 else ' '.join(x[:len(x)-1]) for x in ticketSplit]\n    return df","e2737080":"train['Age'].unique()","62264e69":"train.loc[train.Age< 1]","2edcf265":"train.Age.hist(bins=10)","53fbdb33":"train.loc[train.Pclass==1].Age.hist(bins=10)","442230b3":"train.loc[train.Pclass==3].Age.hist(bins=10)","e9299aad":"train.loc[(train.Pclass==1) & (train.Sex=='male')].Age.hist(bins=10)","1d9dc723":"train.loc[(train.Pclass==1) & (train.Sex=='female')].Age.hist(bins=10)","6813dbe1":"train['Age'] = train.groupby(['Sex', 'Pclass'])['Age'].apply(lambda group: group.fillna(group.median()))","39fbc885":"def proc_age_single(inputdf):\n    \"\"\"\n    Return dataframe with missing ages filled using the median from groups Pclass+Sex\n    \"\"\"\n    df = inputdf.copy()\n    df['Age'] = df.groupby(['Sex', 'Pclass'])['Age'].apply(lambda group: group.fillna(group.median()))\n    return df\n\ndef proc_age_combined(traindf, testdf):\n    traindf = traindf.copy()\n    testdf = testdf.copy()\n    df1 = traindf[['Sex', 'Pclass', 'Age']].copy()\n    df2 = testdf[['Sex', 'Pclass', 'Age']].copy()\n    df1['source'] = 'train'\n    df2['source'] = 'test'\n    combined = pd.concat([df1, df2]).reset_index(drop=True)\n    combined['Age'] = combined.groupby(['Sex', 'Pclass'])['Age'].apply(lambda group: group.fillna(group.median()))\n    traindf['Age'] = combined.loc[combined.source=='train', 'Age']\n    testdf['Age']  = combined.loc[combined.source=='test', 'Age']\n    return traindf, testdf","a9171e32":"train.loc[train.Embarked.isna()]","5cd57390":"_ = sns.barplot(x='Embarked', y='Survived', data=train)","1055b155":"train.sort_values('ticketnumber', ascending=False).iloc[424:430]","f131ded1":"train","70917757":"def proc_embarked_trainonly(inputdf):\n    df = inputdf.copy()\n    df.loc[[829, 61], 'Embarked'] = 'S'\n    return df","2ab73734":"train.Cabin.unique()","308535a5":"test.Cabin.unique()","9e9a8a9f":"t = train.loc[~train.Cabin.isna(), 'Cabin'].apply(lambda x: list([y[0] for y in x.split()])[0])\nset(t)","42688020":"train.loc[train.Cabin.isna()].shape","da67e29b":"train['deck'] = 'N'\ntrain.loc[~train.Cabin.isna(), 'deck'] = train.loc[~train.Cabin.isna(), 'Cabin'].apply(lambda x: list([y[0] for y in x.split()])[0])","8cef5acd":"sns.barplot(x='deck', y='Survived', data=train)","b93dc0d7":"train.groupby('deck').PassengerId.count()","f9aef8d9":"train.loc[train.deck=='T', 'deck'] = 'A'","e4817fc4":"def proc_cabin(traindf, testdf):\n    \"\"\"\n    Extract first letter from Cabin column as 'deck' indicator\n    Move most luxerious T cabin as A, as it is a single one.\n    \"\"\"\n    traindf = traindf.copy()\n    testdf = testdf.copy()\n    for df in [traindf, testdf]:\n        df['deck'] = 'N'\n        df.loc[~df.Cabin.isna(), 'deck'] = df.loc[~df.Cabin.isna(), 'Cabin'].apply(lambda x: list([y[0] for y in x.split()])[0])\n        df.loc[df.deck=='T', 'deck'] = 'A'\n    return traindf, testdf","ab8f68d3":"s = train.sort_values('Fare').reset_index(drop=True).reset_index()\nsns.lineplot(x='index', y='Fare', data=s)","34bf7c24":"s = test.sort_values('Fare').reset_index(drop=True).reset_index()\nsns.lineplot(x='index', y='Fare', data=s)","2bd44b3d":"test.loc[test.Fare.isna()]","bd0e67ab":"pd.concat([train.loc[train.Pclass==3, 'Fare'], test.loc[test.Pclass==3, 'Fare']]).median()","9997f95d":"def proc_fare_testonly(inputdf):\n    \"\"\"\n    Filling in the single missing value with the median of the Fare of the same Pclass\n    \"\"\"\n    df = inputdf.copy()\n    df['Fare'] = df['Fare'].fillna(8.05)\n    return df","073c09f1":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\ndef proc_fare_testonly(inputdf):\n    \"\"\"\n    Filling in the single missing value with the median of the Fare of the same Pclass\n    \"\"\"\n    df = inputdf.copy()\n    df['Fare'] = df['Fare'].fillna(8.05)\n    return df\n\ndef proc_cabin(traindf, testdf):\n    \"\"\"\n    Extract first letter from Cabin column as 'deck' indicator\n    Move most luxerious T cabin as A, as it is a single one.\n    \"\"\"\n    traindf = traindf.copy()\n    testdf = testdf.copy()\n    for df in [traindf, testdf]:\n        df['deck'] = 'N'\n        df.loc[~df.Cabin.isna(), 'deck'] = df.loc[~df.Cabin.isna(), 'Cabin'].apply(lambda x: list([y[0] for y in x.split()])[0])\n        df.loc[df.deck=='T', 'deck'] = 'A'\n    return traindf, testdf\n\ndef proc_embarked_trainonly(inputdf):\n    \"\"\"\n    There are two missing Embarked values in the train set. Filled it in with S as tickets before and after \n    were also from Southampton (by ticket number)\n    \"\"\"\n    df = inputdf.copy()\n    df.loc[[829, 61], 'Embarked'] = 'S'\n    return df\n\ndef proc_age_combined(traindf, testdf):\n    \"\"\"\n    Fill in missing ages with median of the same Pclass+Sex groups\n    \"\"\"\n    traindf = traindf.copy()\n    testdf = testdf.copy()\n    df1 = traindf[['Sex', 'Pclass', 'Age']].copy()\n    df2 = testdf[['Sex', 'Pclass', 'Age']].copy()\n    df1['source'] = 'train'\n    df2['source'] = 'test'\n    combined = pd.concat([df1, df2]).reset_index(drop=True)\n    combined['Age'] = combined.groupby(['Sex', 'Pclass'])['Age'].apply(lambda group: group.fillna(group.median()))\n    traindf['Age'] = combined.loc[combined.source=='train', 'Age']\n    testdf['Age']  = combined.loc[combined.source=='test', 'Age']\n    return traindf, testdf\n\ndef proc_tickets(inputdf):\n    \"\"\"\n    Split ticket number and prefix\n    \"\"\"\n    df = inputdf.copy()\n    ticketSplit = df.Ticket.apply(lambda x: x.split()).values\n    df['ticketnumber'] = pd.array([int(x[-1]) if x[-1].isdigit() else None for x in ticketSplit], dtype=pd.Int64Dtype())\n    df['ticketprefix'] = [np.nan if len(x)==1 else ' '.join(x[:len(x)-1]) for x in ticketSplit]\n    return df\n\ndef proc_names(inputdf):\n    df = inputdf.copy()\n    df['title'] = df.Name.str.split().apply(lambda x: [y for y in x if y[-1] =='.'][0])\n    df['buyersurname'] = df.Name.apply(lambda x: x.split(',')[0])\n    df['surname'] = df.buyersurname # by default it is the same person\n    df['maidenname'] = None\n    \n    boughtForOthers = df.loc[(df.Name.str.contains('\\(')) & ~(df.Name.str.contains('\\\"'))] # bought for others\n    # first the none wifes:\n    names = boughtForOthers.loc[boughtForOthers.title !='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0].split()[-1])\n    df.loc[names.index, 'surname'] = names\n    # now the maiden names of the wifes (this is not perfect and there are some errors)\n    names = boughtForOthers.loc[boughtForOthers.title =='Mrs.'].Name.apply(lambda x: x.split('(')[1].split(')')[0])\n    names = names.loc[names.apply(lambda x: len(x.split())>1)]\n    df.loc[names.index, 'maidenname'] = names\n    return df\n\n\ndef importDataset():\n    train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n    test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n    \n    train = proc_names(train)\n    test = proc_names(test)\n    \n    train = proc_tickets(train)\n    test = proc_tickets(test)\n    \n    train, test = proc_age_combined(train, test)\n    train, test = proc_cabin(train, test)\n    \n    train = proc_embarked_trainonly(train)\n    test = proc_fare_testonly(test)\n    return train, test\n\ntrain, test = importDataset()","f3c19448":"The surname seems to be generally before the comma, however, There are special cases with parenthesis:","eb5a31cf":"Create function to pre-process","ec01e043":"https:\/\/www.kaggle.com\/c\/titanic\/discussion\/9399","a746aba2":"Have an idea on missing values:","2bef9d88":"From the description:\n- 0.xx values (fractions) are ages below 1 (i.e. babies)\n- xx.5 are estimates","ce4cba06":"Some people have titles (ending with '.'), lets first extract titles:","2f626d11":"Check the actual unique values for each type categorical type:","5b8fc917":"## Fare","8855259b":"Check for unique values and thereby, check which values are categorical and which are continuous:","1a6c90c0":"Lets fill two new columns: buyersurname and passenger name, and if applicable maiden name:","a825d6c7":"Mrs, Mme(mesdames) -> married\n\nMiss, Mlle(mesdemoiselles) -> not married\n\nmr. ms. -> unknown martial status\n\nMaster -> child (boy)\n\nCapt, Col, Major -> military\n\nRev. -> church\n\nDr. -> academic\n\nCountess. Don. Jonkheer. Lady Sir. -> nobilty\n\n\n\n","42dc868b":"## Embarked\nThere were only two missing values for embarked","2a6213f8":"According to the wikipedia passenger list, The lady is named Florence Briggs Cumings, maiden name Thayer. Here husband is John Bradley Cumings and has probably bought the tickets together. Therefore, a possible format could be:\n\n{surname}, {title} {firstNameBuyer1} ... {nth} ({firstNamePassenger} {nth} {maidenName})\n\nBut tickets can also be bought for children or friends....\n\nSpecial names (nicknames) are mentioned between \"\"","f2549ca0":"There are seven babies (age<1) on board and all babies survived.","9e7ec498":"## Tickets","913e3ee2":"687 seems a bit much to fill missing values. We can however create a new Class called 'N' for 'No Cabin'","bcfe9d33":"Interestingly, they have the same ticket number, but different names. The ticket was bought at the same time. This might be some kind of staff for the passenger as these were first class and relatively expense Fares.\n\nFirst question is, does it matter where someone embarked for their survival rate?","1ce2a389":"There is definitely an age dependence between the classes (thrid class is younger \/ first class is older), a possible way to fill missing values is to use median from these subclasses.","fa82e67b":"## Age\nLets investigate the Age of the passengers. We already know that 177 are unknown, but what is with the other ages?","4f9a20c2":"Create a function to do the Name preprocessing","83c006e7":"## General information\nhttps:\/\/en.wikipedia.org\/wiki\/Passengers_of_the_RMS_Titanic\n\n- Total people on board (passengers + crew): 2204\n- Total passengers: 1317\n- First class passengers: 324\n- Second class passengers: 284\n- Third class passengers: 709\n- of these, 805 were male, 434 were female, and 112 were children.\n\n\n- First class ticket fares between 30 pounds (parlour suite) and 870 pounds (private promenade deck)\n- Second class ticket price average 13 pounds\n- Third class tickets price average 7 pounds (3 pounds for children)","3e2d6254":"## Names\nLet us investigate the names a bit better:","0535f5f8":"It does matter a bit, were someone Embarked. ","99d825ce":"The cabin column indicates the cabin in which the passenger slept. As the boat sunk in the evening, many people could have been in their cabin and the place where the cabin was, could be an indicator of their survival. Let us first extract the letters, which are linked to the deck the cabin is at.","e813084c":"I am not yet sure what these terms mean but some seem to be the city in which the ticket was purchased: Soton(southampton), Basle, Paris. Some terms can also be a type of cabin or maybe only a part of the trip.\n\npossibilities:\n- pp -> private promenade\n- pc -> private cabin","8458d3d5":"Ticket numbers around the missing values have Embarked in Southampton","77909640":"As we only have one T deck, which is the boot deck and is relatively close to the A deck, we move it to A","7a639f4c":"There is a (smaller) effect on male\/female as well (females tend to be a bit younger)","d67706d7":"## Import dataset and first glance\nFirst import the dataset in a pandas DataFrame:","a3646a2b":"## Cabin"}}