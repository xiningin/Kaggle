{"cell_type":{"1da8a0ab":"code","61292d7a":"code","dd595da9":"code","d466bf62":"code","58940931":"code","8ad80634":"code","24728961":"code","31ea14c8":"code","0e806285":"code","0bc1dff6":"markdown","48605f2c":"markdown","be0c8686":"markdown","db16c397":"markdown"},"source":{"1da8a0ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61292d7a":"from imblearn.combine import SMOTETomek\nfrom collections import Counter\n\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","dd595da9":"dataset = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv')","d466bf62":"X = dataset.iloc[:, 1:51]\ny = dataset.iloc[:, 51:]","58940931":"sns.countplot(x=y['target'], data=y)","8ad80634":"print(X.shape, y.shape)\nprint(Counter(y.target))","24728961":"smo_tek = SMOTETomek(random_state=0)\nX_smotek, y_smotek = smo_tek.fit_resample(X, y)","31ea14c8":"print(X_smotek.shape, y_smotek.shape)\nprint(Counter(y_smotek.target))","0e806285":"sns.countplot(x='target', data=y_smotek)","0bc1dff6":"### Under and Over sampling applied for the data using SmoteTomek\n### Shape shows the increment of additional sampling data\n### Counter shows the balanced target data","48605f2c":"### Below plot shows the imbalanced target variable ","be0c8686":"### Smote - Synthesizing elements for the minority class. It works by randomly picking a point from the minority class and computing K-Nearest Neighbors.\n### Tomek - Pairs of very close instances, but of opposite classes. Removing the instances of majority class.\n### Combining this over-sampling and under-sampling technique, we can balance the target class.\n### Imblearn library provides a combination class SmoteTomek ","db16c397":"### To address imbalanced classification - over-sampling and under-sampling technique used.\n### Smote - Synthetic Minority Oversampling Technique is a kind of approach, tried to explain this with the dataset of TBS May 2021. Hope this will be helpful for beginners to understand."}}