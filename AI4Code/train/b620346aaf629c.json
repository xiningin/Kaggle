{"cell_type":{"3f3200d8":"code","2b11df81":"code","88031029":"code","083ed77a":"code","ad8c099e":"code","3cf1570f":"code","606ceb32":"code","ac025d4f":"code","c718ee2d":"code","54474faa":"code","593b17ed":"code","d0c39bac":"code","de6be4ef":"code","d33cc385":"code","0fde5f0b":"code","ee851186":"code","5fa4085c":"code","917b47fc":"code","bab2a789":"code","57980053":"code","99091d24":"code","d4180ddb":"code","0b4c3f8a":"code","f7a85d45":"code","32bbefdb":"code","85ca6bcd":"code","daf95fa2":"code","e7718f3e":"code","9970d0fc":"code","4a467da0":"markdown","9c894dab":"markdown","9c788728":"markdown","76e66daa":"markdown"},"source":{"3f3200d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b11df81":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\ndf = data.copy()\ndf.head(10)","88031029":"df.describe()","083ed77a":"def country(x):\n    return df[df[\"Nationality\"] == x][[\"Name\",\"Age\",\"Overall\",\"Club\"]]","ad8c099e":"country(\"Turkey\")","3cf1570f":"def club(x):\n    return df[df[\"Club\"] == x][[\"Name\",\"Age\",\"Overall\",\"Nationality\",\"Value\",\"Contract Valid Until\"]]","606ceb32":"club(\"Fenerbah\u00e7e SK\")","ac025d4f":"data.isnull().sum()","c718ee2d":"df['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndf['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndf['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndf['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndf['FKAccuracy'].fillna(data['FKAccuracy'], inplace = True)\ndf['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndf['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndf['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\ndf['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndf['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndf['Weight'].fillna('200lbs', inplace = True)\ndf['Contract Valid Until'].fillna(2019, inplace = True)\ndf['Height'].fillna(\"5'11\", inplace = True)\ndf['Loaned From'].fillna('None', inplace = True)\ndf['Joined'].fillna('Jul 1, 2018', inplace = True)\ndf['Jersey Number'].fillna(8, inplace = True)\ndf['Body Type'].fillna('Normal', inplace = True)\ndf['Position'].fillna('ST', inplace = True)\ndf['Club'].fillna('No Club', inplace = True)\ndf['Work Rate'].fillna('Medium\/ Medium', inplace = True)\ndf['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\ndf['Weak Foot'].fillna(3, inplace = True)\ndf['Preferred Foot'].fillna('Right', inplace = True)\ndf['International Reputation'].fillna(1, inplace = True)\ndf['Wage'].fillna('\u20ac200K', inplace = True)","54474faa":"df.fillna(0,inplace=True)","593b17ed":"def defending(data):\n    return int(round((df[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((df[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((df[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((df[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((df[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((df[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((df[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((df[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))","d0c39bac":"df.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)\n##\ndf['Defending'] = df.apply(defending, axis = 1)\ndf['General'] = df.apply(general, axis = 1)\ndf['Mental'] = df.apply(mental, axis = 1)\ndf['Passing'] = df.apply(passing, axis = 1)\ndf['Mobility'] = df.apply(mobility, axis = 1)\ndf['Power'] = df.apply(power, axis = 1)\ndf['Rating'] = df.apply(rating, axis = 1)\ndf['Shooting'] = df.apply(shooting, axis = 1)","de6be4ef":"players = df[[\"Name\",\"Age\",\"Defending\",\"Overall\",\"Nationality\",\"Club_Logo\",\"Value\",\"Power\",\"Flag\",\"Club\",\"Position\"]]\nplayers.head()","d33cc385":"## Comparison of preferred foot over different players\nplt.rcParams['figure.figsize'] = (10,5)\nsns.countplot(data['Preferred Foot'], palette = 'pink')\nplt.title('Most Preferred Foot of the Players', fontsize = 20)\nplt.show()","0fde5f0b":"## Plotting a pie chart to represent share of international requatation\n\nlabels = ['1', '2', '3', '4', '5']\nsize = df['International Reputation'].value_counts()\ncolors = plt.cm.copper(np.linspace(0, 1, 5))\nexplode = [0.1, 0.3, 0.5, 0.7, 0.9]\n\nplt.rcParams['figure.figsize'] = (9,9)\nplt.pie(size , labels = labels, colors = colors, explode = explode , shadow = True)\nplt.title('International Repuatation for the Football Players', fontsize = 30)\nplt.legend()\nplt.show()","ee851186":"## Different Position Acquired by The Players\n\nplt.figure(figsize = (18,8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('Position', data = data , palette = 'bone')\nax.set_xlabel(xlabel = 'Different Positions in Football',fontsize = 20)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 20)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","5fa4085c":"# Histogram = number of players age\n\nsns.set(style = \"dark\", palette = \"colorblind\", color_codes = True)\nx = data.Age\nplt.figure(figsize = (15,8))\nax = sns.distplot(x, bins = 58, kde = False, color = \"g\")\nax.set_xlabel(xlabel = \"Player's age\", fontsize = 18)\nax.set_ylabel(ylabel = \"Number of Players\", fontsize = 18)\nax.set_title(label = \"Histogram of players age\", fontsize = 20)\nplt.show()","917b47fc":"# Best Players Overall Scores\n\ndf.iloc[df.groupby(df[\"Position\"])[\"Overall\"].idxmax()][[\"Position\",\"Name\",\"Age\",\"Club\",\"Nationality\"]]","bab2a789":"# Best Players Potential Scores\n\ndf.iloc[df.groupby(df[\"Position\"])[\"Potential\"].idxmax()][[\"Position\",\"Name\",\"Age\",\"Club\",\"Nationality\"]]","57980053":"df[\"Nationality\"].value_counts().head(10)","99091d24":"# Every Nations' Player and their International Reputation\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Turkey')\ndf_countries = df.loc[df['Nationality'].isin(some_countries) & df['International Reputation']]\n\nplt.rcParams['figure.figsize'] = (15, 7)\nax = sns.boxenplot(x = df_countries['Nationality'], y = df_countries['International Reputation'], palette = 'autumn')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Distribution of reputation', fontsize = 9)\nax.set_title(label = 'Distribution of International Repuatation of players from different countries', fontsize = 15)\nplt.show()","d4180ddb":"# Distribution of Ages in some Popular clubs\n\nsome_clubs = ('Fenerbah\u00e7e SK', 'Southampton', 'Juventus', 'Empoli', 'Manchester United', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndf_club = df.loc[df['Club'].isin(some_clubs) & df['Wage']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.boxenplot(x = 'Club', y = 'Age', data = df_club, palette = 'magma')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution', fontsize = 10)\nax.set_title(label = 'Disstribution of Ages in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","0b4c3f8a":"youngest = df.sort_values(\"Age\", ascending = True)[[\"Name\",\"Age\",\"Club\",\"Nationality\"]].head(10)\nprint(youngest)","f7a85d45":"eldest = df.sort_values(\"Age\",ascending = False)[[\"Name\",\"Age\",\"Club\",\"Nationality\"]].head(10)\nprint(eldest)","32bbefdb":"# The longest membership in the club\n\nimport datetime\n\nnow = datetime.datetime.now()\ndf[\"Join_year\"] = df.Joined.dropna().map(lambda x : x.split(\",\")[1].split(\" \")[1])\ndf[\"Years_of_member\"] = (df.Join_year.dropna().map(lambda x : now.year - int(x))).astype(\"int\")\nmembership = df[[\"Name\",\"Club\",\"Years_of_member\"]].sort_values(by = \"Years_of_member\",ascending = False).head(10)\nmembership.set_index(\"Name\",inplace = True)\nmembership","85ca6bcd":"# defining the features of players\n\nplayer_features = ('Acceleration', 'Aggression', 'Agility', \n                   'Balance', 'BallControl', 'Composure', \n                   'Crossing', 'Dribbling', 'FKAccuracy', \n                   'Finishing', 'GKDiving', 'GKHandling', \n                   'GKKicking', 'GKPositioning', 'GKReflexes', \n                   'HeadingAccuracy', 'Interceptions', 'Jumping', \n                   'LongPassing', 'LongShots', 'Marking', 'Penalties')\n\n# Top four features for every position in football\n\nfor i, val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(4).index)))","daf95fa2":"from math import pi\n\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","e7718f3e":"# Top 10 left footed footballers\n\ndf[df['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(10)","9970d0fc":"# Top 10 Right footed footballers\n\ndf[df['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(10)","4a467da0":"# Data Cleaning","9c894dab":"# Data Visualization","9c788728":"## 10 youngest players Fifa 19","76e66daa":"## 10 eldest players Fifa 19"}}