{"cell_type":{"dc74de60":"code","9d2cfc21":"code","bd73badd":"code","73016379":"code","aef09c85":"code","89c3c1dd":"code","d0a3c128":"code","0c95778e":"code","3700f7d0":"code","a22f33ad":"code","b5153707":"code","46803813":"code","ffb63768":"code","d0180ec5":"code","8c9c797d":"code","f37fcef0":"code","223746e6":"code","b7c0a2c2":"code","c6cb3f67":"code","89e770f7":"code","1c126000":"code","96f3e4a4":"code","887169a1":"code","adf669e3":"code","d799b036":"code","3181c907":"code","035d6cf7":"markdown","9e5b9e24":"markdown","1efb008d":"markdown","30dc7208":"markdown","a2ad6c48":"markdown","189a0959":"markdown"},"source":{"dc74de60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d2cfc21":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom sklearn.preprocessing import MinMaxScaler","bd73badd":"# Importing our Dataset\nstocks_df = pd.read_csv('..\/input\/applegoogleamazonibmteslasp500-2012-2020\/stock.csv')\nstocks_df","73016379":"stocks_df.columns","aef09c85":"# A custom function for making interactive plots\ndef interactive_plot(df, title):\n  fig = px.line(title = title)\n  \n  \n  for i in df.columns[1:]:\n    fig.add_scatter(x = df['Date'], y = df[i], name = i) \n\n  fig.show()","89c3c1dd":"interactive_plot(stocks_df, 'Stock_Prices')","d0a3c128":"# This function will help us visulaize daily changes in the stock prices by subtracting the stock price from its previous day price\n# and dividing it by the prev value to get the net change. Multiply by 100.\ndef daily_return(df):\n  df_daily_return = df.copy()\n\n  \n  for i in df.columns[1:]:\n    \n    \n    for j in range(1, len(df)):\n\n      \n      df_daily_return[i][j] = ((df[i][j]- df[i][j-1])\/df[i][j-1]) * 100\n    \n    \n    df_daily_return[i][0] = 0\n  \n  return df_daily_return","0c95778e":"stocks_daily_return = daily_return(stocks_df)","3700f7d0":"stocks_daily_return","a22f33ad":"# Zoom in to see more clearly. In fact to some extent you can also understand how volatile a given stock is by looking\n#  at its deviation from the mean\ninteractive_plot(stocks_daily_return, 'Daily Returns on Stocks')","b5153707":"# Distribution of stock prices\nstocks_df.hist(figsize=(15, 15), bins = 50,color='orange');","46803813":"stocks_df.skew()","ffb63768":"stocks_daily_return.skew()","d0180ec5":"# this is the volalitity of every stock \nstocks_daily_return.hist(figsize=(15,15),color='b',bins=50)","8c9c797d":"stock = stocks_daily_return.copy()\n\n\nstock = stock.drop(columns = ['Date'])\n\ndata = []\n\n\nfor i in stock.columns:\n  data.append(stocks_daily_return[i].values)\ndata","f37fcef0":"# visualzing the volatility of all stocks in a single graph\nfig = ff.create_distplot(data, stock.columns)\nfig.show()","223746e6":"# By what factor did the value of the stock grown since 2012\ndef normalize(df):\n  x = df.copy()\n\n  for i in x.columns[1:]:\n    x[i] = x[i]\/x[i][0]\n  return x\n","b7c0a2c2":"interactive_plot(normalize(stocks_df), 'X Returns')","c6cb3f67":"# A custom plot to visualise all the different indicators in one graph, you could use many more indicators but that would be tough to interpret.\nplt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['AAPL'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['AAPL'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['AAPL'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['AAPL'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['AAPL'])\nstocks_df['ma20'] = stocks_df['AAPL'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['AAPL'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()","89e770f7":"plt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['AMZN'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['AMZN'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['AMZN'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['AMZN'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['AMZN'])\nstocks_df['ma20'] = stocks_df['AMZN'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['AMZN'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()","1c126000":"plt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['GOOG'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['GOOG'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['GOOG'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['GOOG'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['GOOG'])\nstocks_df['ma20'] = stocks_df['GOOG'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['GOOG'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()\n","96f3e4a4":"plt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['TSLA'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['TSLA'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['TSLA'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['TSLA'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['TSLA'])\nstocks_df['ma20'] = stocks_df['TSLA'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['TSLA'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()\n","887169a1":"plt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['IBM'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['IBM'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['IBM'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['IBM'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['IBM'])\nstocks_df['ma20'] = stocks_df['IBM'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['IBM'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()\n","adf669e3":"plt.figure(figsize=(20,8))\nstocks_df['ma50'] = stocks_df['sp500'].rolling(window=50).mean()\nstocks_df['ma100'] = stocks_df['sp500'].rolling(window=100).mean()\nstocks_df['ma200'] = stocks_df['sp500'].rolling(window=200).mean()\nstocks_df['ma300'] = stocks_df['sp500'].rolling(window=300).mean()\n\nplt.plot(stocks_df['ma50'],label='MA 50', color='r',linestyle='--')\nplt.plot(stocks_df['ma100'],label='MA 100', color='g',linestyle='--')\nplt.plot(stocks_df['ma200'],label='MA 200', color='y',linestyle='--')\nplt.plot(stocks_df['ma300'],label='MA 300', color='black',linestyle='--')\nplt.plot(stocks_df['sp500'])\nstocks_df['ma20'] = stocks_df['sp500'].rolling(window=20).mean()\nstocks_df['20sd'] = stocks_df['sp500'].rolling(window=20).std()\nstocks_df['upper_band'] = stocks_df['ma20'] + (stocks_df['20sd']*2)\nstocks_df['lower_band'] = stocks_df['ma20'] - (stocks_df['20sd']*2)\nplt.plot(stocks_df['lower_band'],label='Lower_Band',color='black',linestyle='-')\nplt.plot(stocks_df['upper_band'],label='Upper_Band',color='black',linestyle='-')\nplt.legend()\nplt.xlabel('Duration 12th Jan 2012 to 11th Aug 2020, Number of days -------')\nplt.ylabel('Stock_Price')\nplt.show()\n","d799b036":"plt.figure(figsize=(10, 10))\nmatrix=stocks_df.corr()\nsns.heatmap(matrix,annot=True)\n\n","3181c907":"plt.figure(figsize=(10, 10))\nmatrix2=stocks_daily_return.corr()\nsns.heatmap(matrix2,annot=True)\n","035d6cf7":"# Are stock prices of different companies correlated with each other?","9e5b9e24":"# If you like this notebook please do share and upvote. More on financial analysis coming soon.\n","1efb008d":"# This notebook will help you understand stock price trends in depth.\n# Some indicators such as moving averages for 50,100 and 200 days\n# Bollinger bands (20 day mean and 20 days std deviations)\n![image.png](attachment:image.png)\n","30dc7208":"# As you can see 1 dollar invested in Apple,Google,IBM,Amazon,Tesla in 2012 would yield 7,4.8,0.7,17.8,50 dollars in 2020. Cool right!","a2ad6c48":"#  In the next notebook the focus will be more on ratios such as P\/E, EBIT,EBITA,EBITDA,CASHFLOWS,DEBT,REVENUE,ETC.\n# IF YOU HAVE ANY SUGGESTIONS PLEASE FEEL FREE TO SHARE. If you know any related datsets or familiar datasets please share.","189a0959":"# Zoom in or out for better visualisation and understanding."}}