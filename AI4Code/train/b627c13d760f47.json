{"cell_type":{"7f598284":"code","c0583cd3":"code","d06d9003":"code","eaf10e27":"code","98e48bda":"code","f9e9c507":"code","5aeea6c6":"code","b6ad4ee2":"code","b60cce6d":"code","971d6fca":"code","da7507eb":"code","10e9bdaa":"code","9f5df8a9":"code","c5445cdc":"code","82523bbd":"code","92a838e1":"code","f0ab9174":"code","3bcd380d":"code","82d6b910":"code","8a0e3dc6":"code","8de7e49b":"code","988768ce":"code","3730b791":"code","6e11ada2":"code","f1116ec0":"code","7c6f135a":"code","2024aefc":"code","1e5b3b4a":"code","60aa7667":"code","a68ba534":"code","001bc1eb":"code","49b7c060":"code","88ebfea0":"code","b204b876":"code","c8b826c8":"code","fab72a67":"code","40d79587":"code","40b0a0c7":"code","8c914a6d":"code","6fcb72a0":"code","54e437e9":"code","aba89f0e":"code","dab0a7d8":"code","df5b7431":"code","e336b95e":"code","87be7d50":"code","7ac304d8":"code","75219d38":"code","28c2bc42":"code","262ebe1c":"code","a8906885":"code","2e9f05d7":"code","317cbca8":"code","d5704f56":"code","344206dc":"code","2f02b481":"code","ca1b053f":"code","bd346ec3":"code","19e102b1":"code","b9b27ce7":"code","677d4ea0":"code","e7664f78":"code","1e4d4138":"code","72d57b43":"code","821245f4":"code","c865e82c":"code","b6b5a8ac":"code","b5d0f307":"code","c9d0078d":"code","ac4e899b":"code","eee081e9":"code","aa727f8f":"code","3982986d":"code","a5a7fc68":"code","c31be4c1":"code","c0df55c8":"code","de664881":"code","bd3b19b2":"code","2f0d1b98":"code","bd3b6141":"code","b57decf9":"code","bccedea6":"code","6c4e1f67":"code","74f5e823":"code","db00afb7":"code","e87eb956":"code","2126ade5":"code","7a3a9cc7":"code","af4d483f":"code","dcf724f1":"code","8f0cc088":"code","17d88712":"code","b9c60688":"code","25e1deed":"markdown","eee88fea":"markdown","a8f44205":"markdown","127ef21c":"markdown","11053cb3":"markdown","a82e9d27":"markdown","d39a7077":"markdown","539346b6":"markdown","c7e49a3d":"markdown","2e3e5185":"markdown","f6a535bb":"markdown","26ec3c24":"markdown","33f83311":"markdown","afe94659":"markdown","84fa31cf":"markdown","5dfe1d4f":"markdown","e8e51cfc":"markdown","a4296942":"markdown","e8e48b70":"markdown","4e04b132":"markdown","beb8e2e2":"markdown","76e37aa9":"markdown","4ab4c6df":"markdown","5866aeda":"markdown","ea5813dc":"markdown","735679f2":"markdown","8c0de2d6":"markdown","6d770c89":"markdown","2f05190d":"markdown","72a38931":"markdown","0a27de3c":"markdown"},"source":{"7f598284":"# Importing everything we need\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_rows', 990)\npd.set_option('display.max_columns', 990)\nimport lightgbm as lgbm\nfrom hyperopt import fmin, tpe, hp, STATUS_OK, Trials\nfrom sklearn.metrics import roc_auc_score, auc, precision_recall_curve, average_precision_score, precision_score, recall_score, fbeta_score\nfrom sklearn.model_selection import cross_validate, cross_val_predict, train_test_split\nimport eli5\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nclass color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'\nfrom pathlib import Path\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c0583cd3":"PATH = Path('\/kaggle\/input\/nba-retro-1995-to-2000-full-basketball-datasets\/')","d06d9003":"nba_teams = pd.read_csv(PATH \/ 'nba_teams.csv')\nplayers4factors = pd.read_csv(PATH \/ 'players4factors.csv')\nteams4factors = pd.read_csv(PATH \/ 'teams4factors.csv')\nteams_stats = pd.read_csv(PATH \/ 'teams_stats.csv')\nplayers_stats = pd.read_csv(PATH \/ 'players_stats.csv')\nshots = pd.read_csv(PATH \/ 'shots_log.csv')","eaf10e27":"# This function uses Hyperopt for finding the best parameters of a LightGBM Classifier through cross-validation\ndef search_best_lgbm(X,y,n_trials, max_max_depth=20, max_max_bin=400, max_num_leaves=220, max_lrate=0.1):\n    def evaluate_model(params):\n\n        model = lgbm.LGBMClassifier(max_depth=params['max_depth'], \n                                    num_leaves=params['num_leaves'],\n                                    learning_rate =params['learning_rate'],\n                                    max_bin= params['max_bin'], \n                                    metric= ['auc', 'binary_logloss']\n                                     )\n        cv = cross_validate(model, X, y, cv=5, return_train_score=True)\n        \n\n        return {\n            'num_leaves': params['num_leaves'],\n            'max_depth': params['max_depth'],\n            'learning_rate': params['learning_rate'],\n            'max_bin': params['max_bin'],\n            'Accuracy_TRAIN': cv['train_score'].mean(),\n            'Accuracy_CVAL': cv['test_score'].mean(),\n            \n            }\n    def objective(params):\n        res = evaluate_model(params)\n        res['loss'] = - res['Accuracy_CVAL']\n        res['status'] = STATUS_OK\n        return res \n\n    hyperparameter_space = {\n            'learning_rate': hp.uniform('learning_rate', 0.0005, max_lrate),\n            'num_leaves': hp.choice('num_leaves', range(40, max_num_leaves)),\n            'max_depth': hp.choice('max_depth', range(3, max_max_depth)),\n            'max_bin': hp.choice('max_bin', range(5, max_max_bin)),\n    }\n    trials = Trials()\n    best = fmin(\n        objective,\n        space=hyperparameter_space,\n        algo=tpe.suggest,\n        max_evals=n_trials,\n        trials=trials\n    )\n    experiment_results = pd.DataFrame(trials.results).sort_values(by='loss').reset_index(drop=True)\n    return experiment_results","98e48bda":"def model_evaluation(model, X, y):\n    cv = cross_validate(model, X, y, cv=5)\n    accuracy = cv['test_score'].mean()\n    print(color.GREEN+color.BOLD+color.UNDERLINE+'Validation Results:'+color.END)\n    print('Accuracy: '+color.BOLD+'{} %'.format(round(accuracy*100,2))+color.END)\n    probas = cross_val_predict(model, X, y, cv=5,  method='predict_proba')\n    roc_auc = roc_auc_score(y, probas[:,1])\n    print('ROC-Area Under the Curve: '+color.BOLD+'{} %'.format(round(roc_auc*100,2))+color.END)\n    precision, recall,_ = precision_recall_curve(y, probas[:,1])\n    pr_auc = auc(recall, precision)\n    print('Precision-Recall Area Under the Curve: '+color.BOLD+'{} %'.format(round(pr_auc*100,2))+color.END)\n    return probas, accuracy, roc_auc, pr_auc\n\ndef model_evaluation_noprint(model, X, y):\n    cv = cross_validate(model, X, y, cv=5)\n    accuracy = cv['test_score'].mean()\n    probas = cross_val_predict(model, X, y, cv=3,  method='predict_proba')\n    roc_auc = roc_auc_score(y, probas[:,1])\n    precision, recall,_ = precision_recall_curve(y, probas[:,1])\n    pr_auc = auc(recall, precision)\n    return probas, accuracy, roc_auc, pr_auc\n    \ndef plot_prcurve(probas, X, y):\n    sns.set_style('whitegrid')\n    fig, ax = plt.subplots(figsize=(8,4))\n    naive_model = DummyClassifier(strategy='stratified')\n    naive_probas = cross_val_predict(naive_model, X, y, cv=5,  method='predict_proba')\n    precision_naive, recall_naive, _ = precision_recall_curve(y, naive_probas[:,1])\n    ax = sns.lineplot(recall_naive, precision_naive, label='No Skill Model', ci=False)\n    precision, recall,_ = precision_recall_curve(y, probas[:,1])\n    ax = sns.lineplot(recall, precision, markers=True, ci=False, label='Our Model')\n    ax.set_xlabel('Recall', fontsize=12)\n    ax.set_ylabel('Precision', fontsize=12)\n    ax.set_yticks(np.arange(0,1.1,0.1))\n    ax.set_xticks(np.arange(0,1.1,0.1))\n    ax.set_xlim(xmin=0, xmax=1)\n    ax.grid(color='black', linestyle='-', linewidth=0.1)\n    plt.legend()\n    plt.title('Precision-Recall Curves', fontsize=20)\n    plt.show()","f9e9c507":"def show_values_on_bars(axs):\n    def _show_on_single_plot(ax):        \n        for p in ax.patches:\n            _y = p.get_y() + p.get_height() \/ 2\n            _x = p.get_x() + p.get_width()\n            value = '{:.2f}%'.format(p.get_width())\n            ax.text(_x+2.1, _y, value, ha=\"center\", fontsize=13, \n                   # color='darkblue'\n                   ) \n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)\n        \ndef myround(x, prec=2, base=.05):\n    return round(base * round(float(x)\/base),prec)","5aeea6c6":"# I add final outcome of games to the teams4factors dataframe\nteams4factors = teams4factors.merge(teams_stats[['GAME_ID', 'TEAM_ID', 'WL']], on=['GAME_ID', 'TEAM_ID'], how='left')","b6ad4ee2":"# I add final outcome of games to the players4factors dataframe\nplayers4factors = players4factors.merge(teams_stats[['GAME_ID', 'TEAM_ID', 'WL']], on=['GAME_ID', 'TEAM_ID'], how='left')","b60cce6d":"train = teams4factors[teams4factors['SEASON']!='1999-00 Season']","971d6fca":"test = teams4factors[teams4factors['SEASON']=='1999-00 Season']","da7507eb":"X = train.iloc[:,7:-1]\ny = [1 if x=='W' else 0 for x in train.WL]\nX_test = test.iloc[:,7:-1]\ny_test = [1 if x=='W' else 0 for x in test.WL]","10e9bdaa":"results = search_best_lgbm(X,y,80)\nresults.head(3)","9f5df8a9":"best = dict(results.iloc[0,:4])\nbest_model = lgbm.LGBMClassifier(**best)","c5445cdc":"best_model.fit(X,y)\nbest_model.score(X_test, y_test)","82523bbd":"probas, accuracy, roc_auc, pr_auc = model_evaluation(best_model, X_test, y_test)","92a838e1":"plot_prcurve(probas, X_test, y_test)","f0ab9174":"importances = eli5.explain_weights_df(best_model)\ntable = pd.DataFrame()\ntable['Factors'] = ['Shooting', 'Rebounding', 'Turnovers', 'Free Throws']\nshooting = round((importances[importances.feature=='EFG_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_EFG_PCT'].weight.iloc[0])*100,1)\nrebounding = round((importances[importances.feature=='OREB_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_OREB_PCT'].weight.iloc[0])*100,1)\nturnovers = round((importances[importances.feature=='TM_TOV_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_TOV_PCT'].weight.iloc[0])*100,1)\nfree_throws = round((importances[importances.feature=='FTA_RATE'].weight.iloc[0] + importances[importances.feature=='OPP_FTA_RATE'].weight.iloc[0])*100,1)\ntable['Olivers Original Weight'] = [40.0, 20.0, 25.0, 15.0]\ntable['Weight'] = [shooting, rebounding, turnovers, free_throws]\ntable","3bcd380d":"sonics96 = teams4factors[(teams4factors.SEASON=='1996-97 Season') & ((teams4factors.TEAM_ABBREVIATION=='SEA'))]","82d6b910":"X = sonics96[['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'OREB_PCT', 'OPP_EFG_PCT', 'OPP_FTA_RATE', 'OPP_TOV_PCT', 'OPP_OREB_PCT']]\ny = [1 if x=='W' else 0 for x in sonics96.WL]","8a0e3dc6":"results_sonics = search_best_lgbm(X,y,100)\nresults_sonics.head(3)","8de7e49b":"best = dict(results_sonics.iloc[0,:4])\nbest_model = lgbm.LGBMClassifier(**best)","988768ce":"probas, accuracy, roc_auc, pr_auc = model_evaluation(best_model, X, y)","3730b791":"plot_prcurve(probas, X, y)","6e11ada2":"best_model.fit(X,y)\nimportances = eli5.explain_weights_df(best_model)\ntable = pd.DataFrame()\ntable['Factors'] = ['Shooting', 'Rebounding', 'Turnovers', 'Free Throws']\nshooting = round((importances[importances.feature=='EFG_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_EFG_PCT'].weight.iloc[0])*100,0)\nrebounding = round((importances[importances.feature=='OREB_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_OREB_PCT'].weight.iloc[0])*100,0)\nturnovers = round((importances[importances.feature=='TM_TOV_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_TOV_PCT'].weight.iloc[0])*100,0)\nfree_throws = round((importances[importances.feature=='FTA_RATE'].weight.iloc[0] + importances[importances.feature=='OPP_FTA_RATE'].weight.iloc[0])*100,0)\ntable['Supersonics Importance'] = [shooting, rebounding, turnovers, free_throws]\ntable['Avg. NBA Team'] = [52.0, 16.0, 21.0, 11.0]\ntable","f1116ec0":"features_dict = dict({'EFG_PCT': 'EFG%', 'DEF_RATING': 'Defense', 'FTA_RATE': 'Free Throws Rate', 'TM_TOV_PCT': 'Turnovers Rate', \\\n                     'OREB_PCT': 'Offensive Rebounds Rate', 'OPP_OREB_PCT': 'Defensive Rebounds Rate', 'OPP_EFG_PCT': 'Opponent EFG%', \\\n                         'OPP_FTA_RATE': 'Opponent Free Throws Rate', 'OPP_TOV_PCT': 'Opponent Turnovers Rate'})\nsns.set(rc={'axes.facecolor':'white', 'figure.facecolor':'white', 'text.color': 'seagreen', 'ytick.color': 'seagreen', \\\n           'xtick.color': 'seagreen'})\nfig, ax = plt.subplots(figsize=(10,4))\nax = sns.barplot(y=importances.feature.map(features_dict), x=importances.weight\/importances.weight.sum()*100, )\nax.set_xticks(np.arange(0, (importances.weight.max()\/importances.weight.sum()*100)+10, 5))\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=14, color='black')\nax.grid(color='green', linestyle='-', linewidth=0.15)\nax.spines['right'].set_linewidth(1)\nax.spines['right'].set_color('seagreen')\nax.spines['top'].set_linewidth(1)\nax.spines['top'].set_color('seagreen')\nax.spines['left'].set_linewidth(0.5)\nax.spines['left'].set_color('seagreen')\nax.spines['bottom'].set_linewidth(0.5)\nax.spines['bottom'].set_color('seagreen')\nplt.title('Four Factors Importance', fontsize=28, pad='15.0', loc='left')","7c6f135a":"players4factors['REB'] = players4factors['OREB_PCT'] - players4factors['OPP_OREB_PCT']\nplayers4factors['DEF'] = 1 - (0.7*players4factors['OPP_EFG_PCT'] + 0.15*players4factors['OPP_TOV_PCT'] + 0.15*players4factors['OPP_FTA_RATE'])","2024aefc":"season97_players = players4factors[players4factors.SEASON=='1997-98 Season']\nbulls97_players = season97_players[season97_players.TEAM_ABBREVIATION=='CHI'].reset_index(drop=True)","1e5b3b4a":"group_players = bulls97_players.groupby('PLAYER_NAME', as_index=False)[['MINS_PLAYED', \n                                                                        'EFG_PCT', \n                                                                        'FTA_RATE', \n                                                                        'TM_TOV_PCT',\n                                                                        'REB', \n                                                                        'DEF'\n                                                                       ]].mean()","60aa7667":"list_players = list(group_players.sort_values('MINS_PLAYED', ascending=False).reset_index(drop=True).iloc[:8,:]['PLAYER_NAME'].unique())\nlist_players","a68ba534":"bulls97_players = bulls97_players[bulls97_players.PLAYER_NAME.isin(list_players)].reset_index(drop=True)","001bc1eb":"column_names=[]\nfor player in list_players:\n    for column in ['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'REB', 'DEF']:\n        name = player + '_' + column\n        column_names.append(name)\ndf_players = pd.DataFrame(index=list(bulls97_players.GAME_ID.unique()), columns=column_names)","49b7c060":"for index, row in bulls97_players.iterrows():\n    game = row['GAME_ID']\n    player = row['PLAYER_NAME']\n    for column in ['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'REB', 'DEF']:\n        name= player + '_' + column\n        if name in df_players.columns:\n            df_players.loc[game][name] = bulls97_players[(bulls97_players.GAME_ID==game) & (bulls97_players.PLAYER_NAME==player)][column].iloc[0]","88ebfea0":"df_players.fillna(0, inplace=True)\ndf_players = df_players.reset_index().rename(columns={'index': 'GAME_ID'})\ndf_players.head(2)","b204b876":"games = bulls97_players.drop_duplicates('GAME_ID').reset_index(drop=True)\ndf_players = df_players.merge(games[['GAME_ID', 'WL']], on='GAME_ID', how='left')","c8b826c8":"X = df_players.iloc[:,1:-1]\ny = [1 if x=='W' else 0 for x in df_players.WL]","fab72a67":"results = search_best_lgbm(X,y,200)\nbest = dict(results.iloc[0,:4])\nbest_model = lgbm.LGBMClassifier(**best)","40d79587":"probas, accuracy, roc_auc, pr_auc = model_evaluation(best_model, X, y)","40b0a0c7":"best_model.fit(X,y)\nimportances = eli5.explain_weights_df(best_model)","8c914a6d":"for i in range(len(importances.feature)):\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('EFG_PCT', 'EFG%')\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('DEF', 'Defense')\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('FTA_RATE', 'Free Throws Rate')\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('TM_TOV_PCT', 'Turnovers Rate')\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('REB', 'Rebounds Rate')\n    importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('_', ' ')\n\nimportances = importances[importances.weight>0.025]\n\nsns.set(rc={'axes.facecolor':'white', 'figure.facecolor':'white', 'text.color': 'crimson', 'ytick.color': 'crimson', \\\n           'xtick.color': 'crimson'})\nfig, ax = plt.subplots(figsize=(12,5))\nax = sns.barplot(y=importances.feature, x=importances.weight\/importances.weight.sum()*100, )\nax.set_xticks(np.arange(0, (importances.weight.max()\/importances.weight.sum()*100)+5, 5))\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=14, color='black')\nax.grid(color='crimson', linestyle='-', linewidth=0.15)\nax.spines['right'].set_linewidth(0.2)\nax.spines['right'].set_color('black')\nax.spines['top'].set_linewidth(0.2)\nax.spines['top'].set_color('black')\nplt.title('Bulls Players Factors Importance', fontsize=24, pad='16.0', color='crimson')","6fcb72a0":"importances_new = importances.copy()\nnew_list_players=[]\nfor player in list_players:\n    new_player = player.replace(\" \", \"_\")\n    new_list_players.append(new_player)\n\nimportances_new['player']=0\nfor i in range(len(importances_new)):\n    for name in list_players:\n        if name in importances_new.loc[i,'feature']:\n            importances_new.loc[i,'player']=name\nfor i in range(len(importances_new)):\n    importances_new.loc[i,'player'] = importances_new.loc[i,'player'].replace(\"_\", \" \")\nplayer_importances = importances_new.groupby('player', as_index=False)['weight'].sum().rename(columns={'weight':'EstimatedImportance'}).sort_values('EstimatedImportance', ascending=False).reset_index(drop=True)","54e437e9":"player_importances.head()","aba89f0e":"sns.set(rc={'axes.facecolor':'white', 'figure.facecolor':'white', 'text.color': 'black', 'ytick.color': 'black', \\\n               'xtick.color': 'black'})\nfig, ax = plt.subplots(figsize=(14,4))\nax = sns.barplot(y=player_importances.player, x=player_importances.EstimatedImportance\/player_importances.EstimatedImportance.sum()*100, )\nax.set_xticks(np.arange(0, (player_importances.EstimatedImportance.max()\/player_importances.EstimatedImportance.sum()*100)+15, 5))\nax.set_xlabel('')\nax.set_ylabel('')\nax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=14)\nax.grid(color='crimson', linestyle='-', linewidth=0.1)\nax.spines['right'].set_linewidth(0.1)\nax.spines['right'].set_color('black')\nax.spines['top'].set_linewidth(0.1)\nax.spines['top'].set_color('black')\nshow_values_on_bars(ax)\nplt.title('Chicago Bulls Most Important Players', fontsize=26, pad='18.0', color='crimson')","dab0a7d8":"# Group shots from more than 40 feet together, as there are not so many and it can confuse the model.\nshots.SHOT_DISTANCE = [x if x<40 else 40 for x in shots.SHOT_DISTANCE]","df5b7431":"sns.set_style(\"whitegrid\")\nfig, ax = plt.subplots(figsize=(12,6))\nax = sns.lineplot(data=shots, x='SHOT_DISTANCE', y='SHOT_MADE_FLAG', ci=False)\nax.grid(color='black', linestyle='-', linewidth=0.1, axis='x')\nax.set_xlabel('Distance to basket (feet)', fontsize=12)\nax.set_ylabel('Conversion Rate %', fontsize=12)\nax.set_xticks(np.arange(0,40,1))\nax.set_yticks(np.arange(0,0.7,0.05))\nplt.title('Shot Conversion vs. Distance to Basket', fontsize=16)","e336b95e":"shots_log = shots.copy()\ntrain = shots_log[(shots_log.SEASON=='1999-00 Season') | (shots_log.SEASON=='1998-99 Season')].reset_index(drop=True)\nX_train = pd.concat([train[['PERIOD', 'SHOT_DISTANCE', 'LOC_X', 'LOC_Y']], \n                pd.get_dummies(train.ACTION_TYPE),\n                pd.get_dummies(train.SHOT_TYPE), \n                pd.get_dummies(train.SHOT_ZONE_BASIC),\n                pd.get_dummies(train.SHOT_ZONE_AREA)], \n                axis=1)\ny_train = train['SHOT_MADE_FLAG']","87be7d50":"results = search_best_lgbm(X_train, y_train, 20, max_lrate=0.15, max_num_leaves=300, max_max_depth=50, max_max_bin=800)\nresults.head(3)","7ac304d8":"best = dict(results.iloc[0,:4])\nbest_model = lgbm.LGBMClassifier(**best)\nX = pd.concat([shots_log[['PERIOD', \n                          'SHOT_DISTANCE', \n                          'LOC_X', \n                          'LOC_Y'\n                             ]], \n                pd.get_dummies(shots_log.ACTION_TYPE),\n                pd.get_dummies(shots_log.SHOT_TYPE), \n                pd.get_dummies(shots_log.SHOT_ZONE_BASIC),\n                pd.get_dummies(shots_log.SHOT_ZONE_AREA)], \n                axis=1)\ny = shots_log.SHOT_MADE_FLAG\nbest_model.fit(X,y)","75219d38":"shots_log['shot_probability'] = best_model.predict_proba(X)[:,1]","28c2bc42":"by_player = shots_log.groupby(['PLAYER_ID', \n                               'PLAYER_NAME'], as_index=False)['shot_probability'].mean()","262ebe1c":"teams_short = teams_stats.drop_duplicates(['TEAM_NAME', \n                                           'TEAM_ABBREVIATION'])[['TEAM_NAME', 'TEAM_ABBREVIATION']].reset_index(drop=True)","a8906885":"shots_log = shots_log.merge(teams_short, on='TEAM_NAME', how='left')","2e9f05d7":"rockets96_shots = shots_log[(shots_log.TEAM_ABBREVIATION=='HOU') & \n                         (shots_log.SEASON=='1996-97 Season')].reset_index(drop=True)\nshots_proba = rockets96_shots.groupby(['PLAYER_ID', \n                                    'PLAYER_NAME'], as_index=False)['shot_probability'].mean()","317cbca8":"rockets96_stats = players_stats[(players_stats.TEAM_ABBREVIATION=='HOU') & \n                             (players_stats.SEASON=='1996-97 Season')].reset_index(drop=True)\ngroup_stats = rockets96_stats.groupby(['PLAYER_ID', \n                                    'PLAYER_NAME'], as_index=False)[['FGM', 'FGA']].sum()\ngroup_stats['FG_PCT'] = group_stats['FGM'] \/ group_stats['FGA']","d5704f56":"point_per_game = rockets96_stats.groupby(['PLAYER_ID', \n                                       'PLAYER_NAME'], as_index=False)[['PTS', \n                                                                        'FGA']].mean().rename(\n                                                                                columns={'FGA': 'ShotAttempts'})","344206dc":"stats = group_stats.merge(shots_proba, on=['PLAYER_ID', \n                                           'PLAYER_NAME'], \n                                          how='left').merge(point_per_game, on=['PLAYER_ID', \n                                                                                'PLAYER_NAME'], \n                                                                                how='left')\nstats['ShootingAbility'] = stats['FG_PCT'] - stats['shot_probability']\nstats.head(2)","2f02b481":"sns.set(rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'whitesmoke', 'text.color': 'blue', 'ytick.color': 'blue', \\\n           'xtick.color': 'blue'})\ngraph = stats[stats.FGA>200].reset_index(drop=True)\n\nfig, ax = plt.subplots(figsize=(15,8))\n\nax = sns.scatterplot(data=graph, x='ShotAttempts', \n                     y='ShootingAbility', \n                     size='PTS', \n                     hue='FG_PCT', \n                    palette='rainbow', \n                     sizes=(80, 500))\n\nax = sns.lineplot(x=[0,graph.PTS.max()+2], y=[0,0], label='Average Player')\nax.spines['left'].set_linewidth(2)\nax.spines['left'].set_color('black')\nax.spines['bottom'].set_linewidth(2)\nax.spines['bottom'].set_color('black')\nax.spines['right'].set_linewidth(0.3)\nax.spines['right'].set_color('black')\nax.spines['top'].set_linewidth(0.3)\nax.spines['top'].set_color('black')\nax.lines[0].set_linestyle(\"--\")\n\nax.grid(color='crimson', linestyle='-', linewidth=0.1)\n\nax.set_xticks(np.arange(0,graph.PTS.max()+3,1))\nytick_min = myround(graph.ShootingAbility.min()-0.05)\nytick_max = myround(graph.ShootingAbility.max()+0.05)\nax.set_yticks(np.arange(ytick_min,ytick_max,0.025))\n\nax.get_legend().set_visible(False)\nax.set_ylabel('Shot Ability', fontsize=15, color='crimson')\nax.set_xlabel('Shots Attempted per Game', fontsize=15, color='crimson')\nplt.title('Rockets 96-97: Shooting Analysis', fontsize=28, color='crimson', pad='18.0')\nax.text(x=graph.PTS.max()-1, \n        y=0.001, \n        s='Average NBA Player', \n        fontsize=12, \n        verticalalignment='bottom', \n        color='darkblue')\nfor x,y,z in zip(graph.ShotAttempts, graph.ShootingAbility, graph.PLAYER_NAME):\n    point = (x,y)\n    ax.text( x=x, \n            y=y-0.0025, \n            s = z, \n            horizontalalignment='center', \n            verticalalignment='top', \n            fontsize=13, \n            color='black')","ca1b053f":"def create_players_model(data, team='All', season='All', min_minutes=20, n_trials=50):\n    df = data.copy()\n    if season!='All':\n        df = df[df.SEASON==season]\n    if team != 'All':\n        df = df[df.TEAM_ABBREVIATION==team]\n    group_players = df.groupby('PLAYER_NAME', as_index=False)[['MINS_PLAYED', 'EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', \\\n                                                                       'REB', 'DEF']].mean()\n    list_players = list(group_players.sort_values('MINS_PLAYED', ascending=False).head(8)['PLAYER_NAME'])\n    df = df[df.PLAYER_NAME.isin(list_players)].reset_index(drop=True)\n    \n    column_names=[]\n    for player in list_players:\n        for column in ['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'REB', 'DEF']:\n            name = player + '_' + column\n            column_names.append(name)\n    df_players = pd.DataFrame(index=list(df.GAME_ID.unique()), columns=column_names)\n    for index, row in df.iterrows():\n        game = row['GAME_ID']\n        player = row['PLAYER_NAME']\n        for column in ['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'REB', 'DEF']:\n            name= player + '_' + column\n            if name in df_players.columns:\n                df_players.loc[game][name] = df[(df.GAME_ID==game) & (df.PLAYER_NAME==player)][column].iloc[0]\n    df_players.fillna(0, inplace=True)\n    df_players = df_players.reset_index().rename(columns={'index': 'GAME_ID'})\n    games = df.drop_duplicates('GAME_ID').reset_index(drop=True)\n    df_players = df_players.merge(games[['GAME_ID', 'WL']], on='GAME_ID', how='left')\n    X = df_players.iloc[:,1:-1]\n    y = [1 if x=='W' else 0 for x in df_players.WL]\n    results = search_best_lgbm(X,y,n_trials)\n    best = dict(results.iloc[0,:4])\n    best_model = lgbm.LGBMClassifier(**best)\n    \n    # Determining Features and Players Importances\n    best_model.fit(X,y)\n    feature_importances = eli5.explain_weights_df(best_model)\n    importances = feature_importances.copy()\n    new_list_players=[]\n    for player in list_players:\n        new_player = player.replace(\" \", \"_\")\n        new_list_players.append(new_player)\n    importances['player']=0\n    for i in range(len(importances)):\n        for name in new_list_players:\n            if name in importances.loc[i,'feature']:\n                importances.loc[i,'player']=name\n    for i in range(len(importances)):\n        importances.loc[i,'player'] = importances.loc[i,'player'].replace(\"_\", \" \")\n    player_importances = importances.groupby('player', as_index=False)['weight'].sum().rename(columns={'weight':'EstimatedImportance'}).sort_values('EstimatedImportance', ascending=False).reset_index(drop=True)\n    \n    return X, y, best_model, player_importances, feature_importances\n\ndef create_team_model(data, team='All', season='All', n_trials=50):\n    df = data.copy()\n    if season!='All':\n        df = df[df.SEASON==season]\n    if team != 'All':\n        df = df[df.TEAM_ABBREVIATION==team]\n    X = df[['EFG_PCT', 'FTA_RATE', 'TM_TOV_PCT', 'OREB_PCT', 'OPP_EFG_PCT', 'OPP_TOV_PCT', 'OPP_OREB_PCT', 'OPP_FTA_RATE']]\n    y = [1 if x=='W' else 0 for x in df.WL]\n    results = search_best_lgbm(X,y,n_trials)\n    best = dict(results.iloc[0,:4])\n    best_model = lgbm.LGBMClassifier(**best)\n    return X, y, best_model\n\ndef summarize_importances_team(importances):\n    table = pd.DataFrame()\n    table['Factors'] = ['Shooting', 'Rebounding', 'Turnovers', 'Free Throws', 'TOTAL']\n    shooting = round((importances[importances.feature=='EFG_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_EFG_PCT'].weight.iloc[0])*100,1)\n    rebounding = round((importances[importances.feature=='OREB_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_OREB_PCT'].weight.iloc[0])*100,1)\n    turnovers = round((importances[importances.feature=='TM_TOV_PCT'].weight.iloc[0] + importances[importances.feature=='OPP_TOV_PCT'].weight.iloc[0])*100,1)\n    free_throws = round((importances[importances.feature=='FTA_RATE'].weight.iloc[0] + importances[importances.feature=='OPP_FTA_RATE'].weight.iloc[0])*100,1)\n    table['Importance for them'] = [shooting, rebounding, turnovers, free_throws, 100.0]\n    table['Importance for Avg. NBA Team'] = [50.3, 16.8, 20.7, 12.2, 100.0]\n    return table\n\ndef plot_importances_team(importances):\n    features_dict = dict({'EFG_PCT': 'EFG%', 'DEF_RATING': 'Defense', 'FTA_RATE': 'Free Throws Rate', 'TM_TOV_PCT': 'Turnovers Rate', \\\n                     'OREB_PCT': 'Off. Rebounds Rate', 'OPP_OREB_PCT': 'Def. Rebounds Rate', 'OPP_EFG_PCT': 'Opp. EFG%', \\\n                         'OPP_FTA_RATE': 'Opp. Free Throws Rate', 'OPP_TOV_PCT': 'Opp. Turnovers Rate'})\n    sns.set(rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'white', 'text.color': 'black', 'ytick.color': 'black', \\\n               'xtick.color': 'black'})\n    fig, ax = plt.subplots(figsize=(14,4))\n    ax = sns.barplot(y=importances.feature.map(features_dict), x=importances.weight\/importances.weight.sum()*100, )\n    ax.set_xticks(np.arange(0, (importances.weight.max()\/importances.weight.sum()*100)+10, 5))\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=12, color='black')\n    ax.grid(color='black', linestyle='-', linewidth=0.1)\n    ax.spines['left'].set_linewidth(1)\n    ax.spines['left'].set_color('black')\n    ax.spines['bottom'].set_linewidth(1)\n    ax.spines['bottom'].set_color('black')\n    ax.spines['right'].set_linewidth(0.3)\n    ax.spines['right'].set_color('black')\n    ax.spines['top'].set_linewidth(0.3)\n    ax.spines['top'].set_color('black')\n    plt.title('Four Factors Importance', fontsize=28, color='black', fontfamily='serif', loc=\"center\", pad='16.0')\n    plt.tight_layout()\n    plt.show()\n\ndef plot_importances_players(importances):\n    sns.set(rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'white', 'text.color': 'black', 'ytick.color': 'black', \\\n               'xtick.color': 'black'})\n    fig, ax = plt.subplots(figsize=(14,4))\n    ax = sns.barplot(y=importances.player, x=importances.EstimatedImportance\/importances.EstimatedImportance.sum()*100, )\n    ax.set_xticks(np.arange(0, (importances.EstimatedImportance.max()\/importances.EstimatedImportance.sum()*100)+10, 5))\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=14, color='black')\n    ax.grid(color='black', linestyle='-', linewidth=0.1)\n    ax.spines['left'].set_linewidth(1)\n    ax.spines['left'].set_color('black')\n    ax.spines['bottom'].set_linewidth(1)\n    ax.spines['bottom'].set_color('black')\n    ax.spines['right'].set_linewidth(0.3)\n    ax.spines['right'].set_color('black')\n    ax.spines['top'].set_linewidth(0.3)\n    ax.spines['top'].set_color('black')\n    show_values_on_bars(ax)\n    plt.title('Most Important Players', fontsize=28, fontfamily='serif', loc=\"center\", pad='16.0')\n    plt.tight_layout()\n    plt.show()\n    \ndef plot_importances_player_features(importances):\n    for i in range(len(importances.feature)):\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('EFG_PCT', 'EFG%')\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('DEF', 'Defense')\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('FTA_RATE', 'Free Throws Rate')\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('TM_TOV_PCT', 'Turnovers Rate')\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('REB', 'Rebounds Rate')\n        importances.loc[i,'feature'] = importances.loc[i,'feature'].replace('_', ' ')\n    \n    importances = importances.sort_values('weight', ascending=False).iloc[:10,:]\n    \n    sns.set(rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'white', 'text.color': 'black', 'ytick.color': 'black', \\\n               'xtick.color': 'black'})\n    fig, ax = plt.subplots(figsize=(14,4))\n    ax = sns.barplot(y=importances.feature, x=importances.weight\/importances.weight.sum()*100, palette='icefire' )\n    ax.set_xticks(np.arange(0, (importances.weight.max()\/importances.weight.sum()*100)+5, 5))\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=10)\n    \n    ax.grid(color='black', linestyle='-', linewidth=0.15)\n    ax.spines['left'].set_linewidth(1)\n    ax.spines['left'].set_color('black')\n    ax.spines['bottom'].set_linewidth(1)\n    ax.spines['bottom'].set_color('black')\n    ax.spines['right'].set_linewidth(0.3)\n    ax.spines['right'].set_color('black')\n    ax.spines['top'].set_linewidth(0.3)\n    ax.spines['top'].set_color('black')\n    plt.title('Most Important Predictors',fontsize=28, fontfamily='serif', loc=\"center\", pad='16.0')\n    plt.tight_layout()\n    plt.show()\n    \ndef get_shooting_analysis(team, season):\n    thisteam_shots = shots_log[(shots_log.TEAM_ABBREVIATION==team) & (shots_log.SEASON==season)].reset_index(drop=True)\n    shots_proba = thisteam_shots.groupby(['PLAYER_ID', 'PLAYER_NAME'], as_index=False)['shot_probability'].mean()\n    thisteam_stats = players_stats[(players_stats.TEAM_ABBREVIATION==team) & (players_stats.SEASON==season)].reset_index(drop=True)\n    group_stats = thisteam_stats.groupby(['PLAYER_ID', 'PLAYER_NAME'], as_index=False)[['FGM', 'FGA']].sum()\n    point_per_game = thisteam_stats.groupby(['PLAYER_ID', 'PLAYER_NAME'], as_index=False)[['PTS', 'FGA']].mean().rename(columns={'FGA': 'ShotAttempts'})\n    group_stats['FG_PCT'] = group_stats['FGM'] \/ group_stats['FGA']\n    stats = group_stats.merge(shots_proba, on=['PLAYER_ID', 'PLAYER_NAME'], how='left').merge(point_per_game, on=['PLAYER_ID', 'PLAYER_NAME'], how='left')\n    stats['ShootingAbility'] = stats['FG_PCT'] - stats['shot_probability']\n    \n    sns.set(rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'white', 'text.color': 'black', 'ytick.color': 'black', \\\n           'xtick.color': 'black'})\n    graph = stats[stats.FGA>200].reset_index(drop=True)\n\n    fig, ax = plt.subplots(figsize=(14,8))\n\n    ax = sns.scatterplot(data=graph, x='ShotAttempts', y='ShootingAbility', size='PTS', hue='FG_PCT', \\\n                        palette='rainbow', sizes=(80, 500))\n    ax = sns.lineplot(x=[0,graph.PTS.max()+2], y=[0,0], label='Average Player')\n    ax.spines['left'].set_linewidth(2)\n    ax.spines['left'].set_color('black')\n    ax.spines['bottom'].set_linewidth(2)\n    ax.spines['bottom'].set_color('black')\n    ax.spines['right'].set_linewidth(0.3)\n    ax.spines['right'].set_color('black')\n    ax.spines['top'].set_linewidth(0.3)\n    ax.spines['top'].set_color('black')\n    ax.lines[0].set_linestyle(\"--\")\n    ax.grid(color='black', linestyle='-', linewidth=0.1)\n\n    ax.set_xticks(np.arange(0,graph.PTS.max()+3,1))\n    ytick_min = myround(graph.ShootingAbility.min()-0.05)\n    ytick_max = myround(graph.ShootingAbility.max()+0.05)\n    ax.set_yticks(np.arange(ytick_min,ytick_max,0.025))\n\n    ax.get_legend().set_visible(False)\n    ax.set_ylabel('Shooting Ability', fontsize=18, color='black')\n    ax.set_xlabel('Shot Attempts Per Game', fontsize=18, color='black')\n    plt.title('Shooting Analysis', fontsize=28, color='black', pad='18.0', loc=\"center\", fontfamily='serif')\n    ax.text(x=graph.PTS.max()-1, y=0.001, s='Average NBA Player', fontsize=12, verticalalignment='bottom', color='darkblue')\n    for x,y,z in zip(graph.ShotAttempts, graph.ShootingAbility, graph.PLAYER_NAME):\n        point = (x,y)\n        ax.text( x=x, y=y-0.0025, s = z, horizontalalignment='center', verticalalignment='top', fontsize=13, color='black')\n    plt.tight_layout()\n    plt.show()\n    \nfrom IPython.display import HTML, display\ndef render_team(id, season):\n    name = id\n    team_name = teams4factors[teams4factors.TEAM_ABBREVIATION==name].TEAM_CITY.iloc[0]\n    team_season = teams4factors[(teams4factors.TEAM_ABBREVIATION==name) & (teams4factors.SEASON==season)]\n    wins = team_season[team_season.WL=='W']['WL'].count()\n    losses = team_season[team_season.WL=='L']['WL'].count()\n    X, y, teams_model = create_team_model(teams4factors, team=name, season=season, n_trials=60)\n    url = nba_teams[nba_teams.abbreviation==name].url.iloc[0]\n    year = nba_teams[nba_teams.abbreviation==name].year_founded.iloc[0]\n    probas, accuracy, roc_auc, pr_auc = model_evaluation_noprint(teams_model, X, y)\n    accuracy = round(accuracy*100,1)\n    roc_auc = round(roc_auc,2)\n    display(HTML( f\"\"\"\n        <div style=\"width: 100%;\">\n            <div style=\"float: left; width: 50%;\"><img src=\"{url}\" width=\"300\"><\/div>\n            <div style=\"float: left; width: 50%; text-align: right; margin-top: 5px; font-family:calibri;font-size:28px;\">Year Founded: <b>{year}<\/b><\/div>\n            <div style=\"float: left; width: 50%; text-align: right; margin-top: 4px; font-family:calibri;font-size:28px;\">Team Record: <b>{wins}W - {losses}L<\/b><\/div>\n            <div style=\"float: left; width: 50%; text-align: right; margin-top: 4px; font-family:calibri;font-size:28px;\">Model Accuracy: <b>{accuracy}%<\/b><\/div>\n            <div style=\"float: left; width: 50%; text-align: right; margin-top: 4px; font-family:calibri;font-size:28px;\">Model ROC-AUC: <b>{roc_auc}<\/b><\/div>\n\n          <\/div>\n    \"\"\"))\n    return X, y, teams_model\n\nimport os\nimport glob\ndef summarize_everything(team, season):\n    team_ = team\n    season_ = season\n    \n    X, y, teams_model = render_team(team_, season_)\n    teams_model.fit(X,y)\n    importances_team = eli5.explain_weights_df(teams_model)\n    \n     \n    table_sum = summarize_importances_team(importances_team)\n    print(table_sum)\n\n    X_players, y_players, players_model, player_importances, feature_importances = create_players_model(players4factors, team=team, season=season, min_minutes=20, n_trials=60)\n    \n    \n    plot_importances_team(importances_team)\n\n    plot_importances_players(player_importances)\n\n    plot_importances_player_features(feature_importances)\n    get_shooting_analysis(team_, season_)","bd346ec3":"shots97 = shots_log[shots_log.SEASON=='1997-98 Season'].reset_index(drop=True)\nshots_proba = shots97.groupby(['PLAYER_ID', 'PLAYER_NAME'], as_index=False)['shot_probability'].mean()","19e102b1":"player_stats97 =  players_stats[players_stats.SEASON=='1997-98 Season'].reset_index(drop=True)\ngroup_stats = player_stats97.groupby(['PLAYER_ID', 'PLAYER_NAME', 'TEAM_ABBREVIATION'], as_index=False)[['FGM', 'FGA']].sum()\ngroup_stats['FG_PCT'] = group_stats['FGM'] \/ group_stats['FGA']","b9b27ce7":"point_per_game = player_stats97.groupby(['PLAYER_ID', 'PLAYER_NAME'], as_index=False)['PTS'].mean()","677d4ea0":"stats = group_stats.merge(shots_proba, on=['PLAYER_ID', 'PLAYER_NAME'], how='left').merge(point_per_game, on=['PLAYER_ID', 'PLAYER_NAME'], how='left')\nstats['ShootingAbility'] = stats['FG_PCT'] - stats['shot_probability']","e7664f78":"show = stats[stats.FGA>100].sort_values('ShootingAbility', ascending=False).reset_index(drop=True).reset_index()\nshow['index'] = show['index']+1\nshow.rename(columns={'index': 'RANK', 'PTS': 'Pts Per Game', 'TEAM_ABBREVIATION': 'TEAM'}, inplace=True)\nshow = show[['RANK', 'PLAYER_NAME', 'TEAM', 'Pts Per Game', 'ShootingAbility']]\nshow.head(10)","1e4d4138":"defenders = players4factors.groupby(['PLAYER_ID', 'PLAYER_NAME', 'TEAM_ABBREVIATION'], as_index=False)[['DEF', 'MINS_PLAYED']].mean()\ndefenders_ranking = defenders[defenders.MINS_PLAYED>24].sort_values('DEF', ascending=False).reset_index(drop=True).reset_index()\ndefenders_ranking['index'] = defenders_ranking['index']+1\ndefenders_ranking.rename(columns={'index': 'RANK', 'DEF': 'DEFENSIVE_RATING', 'TEAM_ABBREVIATION': 'TEAM'}, inplace=True)\nshow = defenders_ranking[['RANK', 'PLAYER_NAME', 'TEAM', 'DEFENSIVE_RATING']]\nshow.head(10)","72d57b43":"rebounders = players4factors.groupby(['PLAYER_ID', 'PLAYER_NAME', 'TEAM_ABBREVIATION'], as_index=False)[['REB', 'MINS_PLAYED']].mean()\nrebounders_ranking = rebounders[rebounders.MINS_PLAYED>24].sort_values('REB', ascending=False).reset_index(drop=True).reset_index()\nrebounders_ranking['index'] = rebounders_ranking['index']+1\nrebounders_ranking.rename(columns={'index': 'RANK', 'REB': 'REBOUNDS_RATE', 'TEAM_ABBREVIATION': 'TEAM'}, inplace=True)\nshow = rebounders_ranking[['RANK', 'PLAYER_NAME', 'TEAM', 'REBOUNDS_RATE']]\nshow.head(10)","821245f4":"summarize_everything('ATL', '1997-98 Season')","c865e82c":"summarize_everything('BOS', '1997-98 Season')","b6b5a8ac":"summarize_everything('CHH', '1997-98 Season')","b5d0f307":"summarize_everything('CHI', '1997-98 Season')","c9d0078d":"summarize_everything('CLE', '1997-98 Season')","ac4e899b":"summarize_everything('DAL', '1997-98 Season')","eee081e9":"summarize_everything('DEN', '1997-98 Season')","aa727f8f":"summarize_everything('DET', '1997-98 Season')","3982986d":"summarize_everything('GSW', '1997-98 Season')","a5a7fc68":"summarize_everything('HOU', '1997-98 Season')","c31be4c1":"summarize_everything('IND', '1997-98 Season')","c0df55c8":"summarize_everything('LAC', '1997-98 Season')","de664881":"summarize_everything('LAL', '1997-98 Season')","bd3b19b2":"summarize_everything('MIA', '1997-98 Season')","2f0d1b98":"summarize_everything('MIL', '1997-98 Season')","bd3b6141":"summarize_everything('MIN', '1997-98 Season')","b57decf9":"summarize_everything('NJN', '1997-98 Season')","bccedea6":"summarize_everything('NYK', '1997-98 Season')","6c4e1f67":"summarize_everything('ORL', '1997-98 Season')","74f5e823":"summarize_everything('PHI', '1997-98 Season')","db00afb7":"summarize_everything('PHX', '1997-98 Season')","e87eb956":"summarize_everything('POR', '1997-98 Season')","2126ade5":"summarize_everything('SAC', '1997-98 Season')","7a3a9cc7":"summarize_everything('SAS', '1997-98 Season')","af4d483f":"summarize_everything('SEA', '1997-98 Season')","dcf724f1":"summarize_everything('TOR', '1997-98 Season')","8f0cc088":"summarize_everything('UTA', '1997-98 Season')","17d88712":"summarize_everything('VAN', '1997-98 Season')","b9c60688":"summarize_everything('WAS', '1997-98 Season')","25e1deed":"# Oliver's Four Factors\nWhile trying to answer the question *How do basketball teams win games?*, Dean Oliver identified what he called the \"Four Factors of Basketball Success\"\n- **Shooting** (40%)\n- **Turnovers** (25%)\n- **Rebounding** (20%)\n- **Free Throws** (15%)\n\nThe weights for each factor were approximations assigned by himself. Additionally, in reality there are 8 factors, because for each team you have their 4 factors and the performance of the opponent on the same 4 factors.\n\nLet's analyze each factor individually","eee88fea":"### 4. Free Throws Rate (FTA_RATE)\nThe free throw factor is a measure of both how often a team gets to the line and how often they make them. The formula for both offense and defense is **FT \/ FGA**","a8f44205":"Looks like Michael Jordan's Shooting is the most important predictor for Bulls' games, followed by Michael Jordan's defensive performance. From this it looks clear that MJ was the most important player of the team, but let's estimate the importance of each player anyway by summing the weights of each of the 5 factors for each player individually.","127ef21c":"We can correctly predict the result of 90% of Seattle Supersonics' games with our model. Now let's see the importance of each of the 4 factors for predicting Supersonics' games specifically.","11053cb3":"## Top-10 Rebounders of the Season","a82e9d27":"The plot confirms that it is particularly the **opponent's turnover rate** that is such a great predictor of Seattle Supersonics' success. We see that their own turnover's rate is not as important. All of this strengthens the theory that this team relied heavily on fast breaks.","d39a7077":"## Team-by-Team Analysis","539346b6":"We have a dataframe with each GAME_ID on the index and each PlayerxFactor combination as columns. But the values are all NaN so far. We need to fill in the corresponding values by looking them up in our previous data set.","c7e49a3d":"Now that we have filtered the data set to leave only the players we want, we have to create one column for each PlayerxFactor combination. Since I'm not sure how to handle this with Pandas pivot option, I will just do it manually.","2e3e5185":"It is interesting to see that shot probability of going in seems to be the same from around 3 feet to 20 feet. Only after 20 feet the chances of going in start going down again. From 0 to 3 feet the decrease is also very clear.\n\nLet's just train the model now. I will use the 98-99 and 99-00 Season for training and cross-validation to check how well we do.","f6a535bb":"So the interpretation here is:\n- Players who are on top are better shooters, as estimated by their FG% compared to the FG% an average NBA player would have according to the characteristics of the shots that the player took across the season.\n\n- Players who are on the right shoot more often than those over the left.\n- The sizes of the nodes are according to the number of points per game the player scores.\n\nSo, in a fair world, better shooters would shoot more, so we would expect most players to be located either on the upper right (good shooters who take lots of shots) or the lower left (bad shooters who don't shoot much) sides of the graph. But of course the world is not that fair, and we may find good shooters who don't shoot as often, and bad shooters who take lots of shots. This kind of analysis could be interesting for an NBA team to study their shots decision making. If a players is located on the upper left side of the plot it could be suggested that he has to try and shoot more. The opposite is true for players on the lower right of the plot, who should probably shoot less than they do.\n\nIt does not look bad for the Rockets team, as we see that **Olajuwon** was the best shooter and also the one who took the most shots, as it should be. An exception could be **Othella Harrington**, who appears as an excellent shooter who didn't use to get as many shots as he probably deserved. **Clyde Drexler** is a bit below of what the average NBA player would have done considering the kinds of shots he took.\n\nAs said before, the interesting thing here is that we are accounting for the difficulty of each shot. So it is not the case that Olajuwon appears as such a good shooter because he used to take shots near the basket (that is the deception that the FG% statistic has). Instead, it means that he was much better than the average NBA player at taking those kinds of shots near the basket specifically.","26ec3c24":"# Introduction\nIn some kind of nostalgic trip to the past, I would like to analyze vintage NBA teams from the 90's through new Machine Learning techniques. Some of the things I will explore are:\n- Dean Oliver's Four Factors\n- Importance of the Four Factors for different teams\n- Most important players per team\n- Shooting Analysis per team\n\nNow I know that with most of the things I'm doing here I'm not even scratching the surface compared to what current NBA Data Teams are probably doing. But they still look like decent exercises to try with these data.","33f83311":"# Most Important players per team (Chicago Bulls example)\nNow we will again make a model specifically for the team. In this case, we'll use 97-98 Chicago Bulls as example. But this time the predictors will be the individual players' performance on the four factors, rather than the team's totals. Then we can estimate the importance of each predictor and in this way we can estimate the importance of each player on predicting the final outcome of each game.\nFor this analysis I'd prefer to merge some of the 8 factors, to make the results' interpretation more intuititive. For example:\n- Combine Offensive Rebounds Rate with Opponent's Offensive Rebounds Rate. Then we have only one factors that covers the entire rebounding spectrum of the player. The Opponent's Offensive Rebounds Rate measures how many offensive rebounds a player allowed his matchup to grab, so it is a good measure of his own's defensive rebounding performance.\n- Combine Opponent's EFG% with Opponent's Turnover Rate and Opponent's Free Throws Rate: Then we have one factor that represents the player's defensive performance during the game.\n\nSo, in summary, we now have 5 factors for describing each player's performance: (1) EFG% (=shooting), (2) Rebounding, (3) Turnovers Rate, (4) Free Throws Rate, (5) Defense. So the total number of predictors will be \"Number of players x 5\".\n\nInstead of adding the 5 factors for every player of the team, I will consider only the 8 players who played the most minutes. In this way we end up with 40 predictors for each game (8x5), which seems reasonable.","afe94659":"We can correctly predict the result of 92% of NBA games on the testing set with Oliver's 4 factors. Definitely good considering lots of games are defined by a couple of points only. It's not hard to see why his theory about how basketball works became well-known.\n\nNow let's see the weight assigned to each factor in our Gradient Boosting model. The idea is to either corroborate or discuss the weights that he initially assigned to each factor.","84fa31cf":"We can predict with **64%** accuracy whether any given shot will go in. At first this does not seem very good considering that with random guessing we would get around 55%. But in reality I think it's pretty hard to predict this. Of course we would do better if we add information about who is the player that is shooting, but we're not interested in that because what we want to model is the probability that an average NBA player will make the shot, not the specific player. From what I find online, I guess that the model is reasonably good. The best I could find is [this one](https:\/\/hwchase17.github.io\/sportvu\/) in which they obtain a 65% accuracy, so we're not that far away. In that model they included some other relevant things we don't have, such as the distance to the closest defender, and that defender's height.\n\nWe also see no signs whatsoever of overfitting, as we do equally good on training and on cv results.\n\nIn summary, it appears that our shot prediction model is decent and good enough for using it for what we want.","5dfe1d4f":"We see that the predictive power of **Turnovers** for *96-97 Seattle Supersonics* is way higher than for the average NBA team. This suggests that fast-breaks were probably a huge part of their game, and the best way to do fast-breaks is by causing turnovers. The predictive power of Rebounds and Free Throws are particularly low for their case.","e8e51cfc":"### 2. Turnovers (TOV_PCT)\nThe turnover factor is measured using Turnover Percentage (TOV%). The formula for both offense and defense is: \n\n**TOV \/ (FGA + 0.44 * FTA + TOV)**","a4296942":"## Top-10 Shooters of the Season","e8e48b70":"# Shooting Analysis (Houston Rockets example)\nNow we'll change the focus to analyze the shooting aspect of the game. What I would like to find out is who the best shooters of each team are. For this, I will first create a Shot Prediction model, in which I take all of the shots in a shot-log, train and test the model. If this succeeds, we will have a model that can predict (to a decent accuracy I hope) whether any shot will go in.\n\nOnce we have this, we can, for each player, determine the difference between his actual Field Goal Percentage, and the Field Goal Percentage that an average NBA player would have considering the difficulty of the shots the player has taken. I will call this difference \"Shooting Ability\" and it will illustrate the players' shooting qualities.\n\nAs usual, I will pick a team as example to do this analysis. I will use 96-97's **Houston Rockets**.","4e04b132":"Let's first see how well we can predict any given NBA game by knowing the 4 factors (or 8 factors in reality). We use data from 1996 to 1999 to train and cross-validate the model, leaving the 1999-00 Season for pure testing afterwards.","beb8e2e2":"# Four Factors Importance (Seattle Supersonics example)","76e37aa9":"Let's summarize everything that we did so far inside functions, so that later I can just call them for each NBA team and make a complete analysis of all.","4ab4c6df":"Below I will run the same analyses as before but for every NBA team on the 1997-98 Season. As can be seen, we have a hard time predicting the results of certain teams (e.g. LA Clippers), but do very well for others, such as Orlando Magic, for which we obtain a great accuracy, even though they finished the season 41W - 41L, so random guessing would get us only 50%.","5866aeda":"## Top-10 Defenders of the Season","ea5813dc":"### 3. Rebounding (OFF_REB_PCT)\nThe rebounding factor is measured using Offensive and Defensive Rebound Percentage (ORB% and DRB%, respectively). The formula for offense is: **ORB \/ (ORB + Opp DRB)**, while the formula for defense is **DRB \/ (Opp ORB + DRB)**","735679f2":"# 1997-98 Season Analysis","8c0de2d6":"So according to our model, Shooting is around 10% more important than Oliver's original estimations. The other three factors are a bit less important than what he said. The order is the same though: Shooting > Turnovers > Rebounding > Free Throws","6d770c89":"Of course Jordan is by far the most important player. One thing should be clarified here though, and it is that we are talking here about the importance of each player's performance for predicting the game's result. This is not equivalent to the players' importance to the team!\n\nI will take a modern player as example to illustrate this point: James Harden. I would guess that if we do this exercise for the current Rockets' team, then the number of points scored by James Harden will appear as not important for predicting the score. Why? Because he always scores +30 pts, even if his team looses. So, in other words, knowing that James Harden scored, let's say, 32 points in a game, is not important for predicting if the Rockets won or lost, because he always scores that number no matter what. But this does not mean that his points are not important, of course. They are just not important for our predictive model, simply because that statistic is not very informative.\n\nGoing back to the Bulls' example, it is surprising to see Scottie Pippen so unimportant, but let's remember that this does not mean necesarily that his role was not important, but only that his performance is not important for predicting. Additionally, he barely played this season because of contract issues.","2f05190d":"### Some useful functions for later","72a38931":"### 1. Shooting (EFG%)\nThe shooting factor is measured using Effective Field Goal Percentage (eFG%). The formula for both offense and defense is:\n\n**(FG + 0.5 * 3P) \/ FGA**","0a27de3c":"My idea for this notebook is, using these factors as predictors, to create a separate model for each vintage team. Then we will know if for certain teams the weights we just saw are different. It would make perfect sense that for some teams some factors are more important than others for predicting whether they win or lose.\n\nI will first use Seattle Supersonics 96-97 as example. For some reason I used to love this team when I was a kid in the 90's. I guess something about their name, having Shawn Kemp on the team... Also that they are from Seattle and I used to listen to Nirvana a lot at that time. Just thinking about them takes my back to those good-old days, even though I grew up on the other side of the world."}}