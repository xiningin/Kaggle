{"cell_type":{"0fd32056":"code","25aba46b":"code","8590ea34":"code","a6f93219":"code","8ccc4b11":"code","b4bf1f83":"code","a2efe271":"code","60cf972b":"code","1e9483bb":"code","d892b510":"markdown","27a3ee09":"markdown","ff9be8e6":"markdown","02f536d7":"markdown","f13081e9":"markdown","419543a0":"markdown","9835edf6":"markdown","7ced5dc4":"markdown","2fa0f516":"markdown","ef3f75ea":"markdown","42616d65":"markdown","748e6d07":"markdown","19d2a643":"markdown","a9746dfc":"markdown"},"source":{"0fd32056":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nfrom xml.etree import ElementTree\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25aba46b":"ponds = pd.read_csv('..\/input\/nys-recommended-fishing-areas\/recommended-fishing-lakes-and-ponds.csv')\nrivers = pd.read_csv('..\/input\/nys-recommended-fishing-areas\/recommended-fishing-rivers-and-streams.csv')","8590ea34":"# ponds","a6f93219":"# rivers","8ccc4b11":"for i in ponds.index:\n    if ponds['Longitude'][i] <= -77.6875 and ponds['Longitude'][i] >= -78.6875:\n        if ponds['Latitude'][i] <= 43.4981 and ponds['Latitude'][i] >= 42.4981: \n            print(i)\n            print(ponds['Waterbody Name'][i])\n            print(ponds['Fish Species'][i])\n      \n\n# for j in rivers.index:\n#     if rivers['Longitude'][i] <= -77.6875 and rivers['Longitude'][i] >= -78.6875:\n#         if rivers['Latitude'][i] <= 43.4981 and rivers['Latitude'][i] >= 42.4981: \n#             print(rivers['Waterbody Name'][i] + ':')\n#             print(rivers['Fish Species Present at Waterbody'][i])\n","b4bf1f83":"# !pip install -U googlemaps\n# import googlemaps\n# gmaps = googlemaps.Client(key='AIzaSyCUXhd_UNUBFl8p2jobX0Nc5an-KYDJRSA')\n# gmaps.directions('Batavia, New York', 'Buffalo, New York')","a2efe271":"ttAPI = \"MiWVy3QqAKDvGpe7S8zB2uEXAZ2AA2O8\"\n\nbLat =  \"42.9981\"\nbLong = \"-78.1875\"\n\npLat = str(ponds['Latitude'][163])\npLong = str(ponds['Longitude'][163])\n\nreq = requests.get(\"https:\/\/api.tomtom.com\/routing\/1\/calculateRoute\/\"+bLat+\",\"+bLong+\":\"+str(pLat)+\",\"+str(pLong) +\"\/json?avoid=unpavedRoads&key=\"+ttAPI)\nif (str(req) == '<Response [200]>' ):\n  print(\"Your Request Work!\")\nelse: \n  print(\"Your Request didn't work\")\n\nprint(req)","60cf972b":"# !pip install bs4\n\nrsp = req.content\nsoup = BeautifulSoup(rsp)\nprint(soup.prettify())\n","1e9483bb":"dist = soup.find('lengthInMeters')\nprint(dist)\n","d892b510":"New TomTom API key = MiWVy3QqAKDvGpe7S8zB2uEXAZ2AA2O8","27a3ee09":"The location we are looking to find things around in Batavia, NY. Latitude: 42.9981 and Longitude: -78.1875","ff9be8e6":"google maps api key = AIzaSyCUXhd_UNUBFl8p2jobX0Nc5an-KYDJRSA","02f536d7":"Looking at these dataspaces, we are given a lot of information. Name, fish inside, county, regulations. Most importantly we are given Latitude and Longitude, which will allows us to find bodies of water near a certian location.","f13081e9":"The google maps api has a pay wall\/subscription, so I am going to try to use a TomTom api( which is free).","419543a0":"Works. Prints a html doc with all the requested info. Very long so don't need to run the print statement every time. Also needs pip install bs4 for bs4 to work. Imported bs4 and requests in the first block.","9835edf6":"This data set gives all the water bodies in NYS. I will be spending my summer there and I like to fish so lets figure out places to fish near I will be.","7ced5dc4":"Need to talk about where to go from here. Have the data, now need to parse json and create pd set.","2fa0f516":"Now decode the response.","ef3f75ea":"Lets take these lakes and get directions from Batavia to them. We will use the google maps api.","42616d65":"connect to api and make initial request","748e6d07":"resource used to use api : https:\/\/colab.research.google.com\/drive\/1orj1lDfieiR7dqYf-1rFfdC91i-cajVO#scrollTo=Dr4Hk0Dtg5yB","19d2a643":"A cordinate is equal to 111km, or 69 miles. A cordinate decimal is equal to 11.1km, or 6.9 miles. I want to find anything within approximately 30 miles, so I will look for anything in .5 radius.","a9746dfc":"Now we need to find the data that we want to work with. The categories we want are lengthInMeters, travelTimeInSeconds, trafficDelayInSeconds, departureTime, and arrivalTime. We will need to do some unit conversions too."}}