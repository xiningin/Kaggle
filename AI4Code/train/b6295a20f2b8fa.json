{"cell_type":{"abdbd192":"code","db958dfd":"code","662fd258":"code","e8eb38b8":"code","7756c34a":"code","4d84f711":"code","704d4cdf":"code","ddedcab5":"code","66e31eed":"code","0d630f97":"code","ed151bd4":"code","e3852120":"code","f860942c":"code","bb1cc2f4":"code","ab368aa6":"code","fe44155b":"code","66732d41":"code","8a0915e7":"code","7f873939":"markdown","9e93ccc9":"markdown","2ebcd321":"markdown","6abbe31f":"markdown","041bfabf":"markdown","de8bbd1f":"markdown","081ae28f":"markdown","7e089682":"markdown","f92745fe":"markdown"},"source":{"abdbd192":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","db958dfd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score","662fd258":"df = pd.read_csv('\/kaggle\/input\/USA_Housing.csv')\ndf.head(2)","e8eb38b8":"# drop 'Address' since it is of no interest to regression analysis\ndf.drop(columns=['Address'], inplace=True)\n\n# change column\/features names for easier manipulation and access\ndf.rename(columns={'Avg. Area Income':'Income', \n                   'Avg. Area House Age':'House Age', \n                   'Avg. Area Number of Rooms': 'Avg Room_area', \n                   'Avg. Area Number of Bedrooms':'Avg Bedroom_area'}, inplace=True)\ndf.head(2)","7756c34a":"df.info()","4d84f711":"# see correlation of features to the target variable 'Price'\ndf.corr()['Price'].sort_values()","704d4cdf":"# assessing to see if normalization is necessary\nfig, ax1 = plt.subplots(figsize=(6,5))\nax1.set_title('Before Min-Max')\nsns.kdeplot(df['Income'], ax=ax1)\nsns.kdeplot(df['Area Population'], ax=ax1)\nplt.show()","ddedcab5":"fig, ax2 = plt.subplots(figsize=(6,5))\nax2.set_title('Before Min-Max')\nsns.kdeplot(df['House Age'], ax=ax2)\nsns.kdeplot(df['Avg Room_area'], ax=ax2)\nplt.show()","66e31eed":"# normalize x_data using the min max method\nX = df[['Income', 'House Age', 'Avg Room_area', 'Avg Bedroom_area', 'Area Population']]\nY  = df['Price']\n\nfor x in X:\n    df[x] = (df[x] - min(df[x])) \/ (max(df[x]) - min(df[x]))\ndf.head(3)","0d630f97":"# visualise the effect of normalization\nfig, ax3 = plt.subplots(figsize=(6,5))\nax3.set_title('After Min-Max')\nsns.kdeplot(df['Income'], ax=ax3)\nsns.kdeplot(df['Area Population'], ax=ax3)\nsns.kdeplot(df['House Age'], ax=ax3)\nsns.kdeplot(df['Avg Room_area'], ax=ax3)\nplt.show()","ed151bd4":"# using seaborn residual plot too identify relationship\nsns.residplot(df['Income'], df['Price'])\nplt.title('Income and Price')\nplt.show()","e3852120":"sns.residplot(df['House Age'], df['Price'])\nplt.title('House Age and Price')\nplt.show()","f860942c":"sns.residplot(df['Avg Room_area'], df['Price'])\nplt.title('Avg Room_area and Price')\nplt.show()","bb1cc2f4":"sns.residplot(df['Area Population'], df['Price'])\nplt.title('Area Population and Price')\nplt.show()","ab368aa6":"# training and testing data\nx_data = df[['Income', 'House Age', 'Avg Room_area', 'Area Population']].values\ny_data  = df['Price'].values\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=0)\n\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","fe44155b":"# linear model object\nlm = LinearRegression()\n\n# fit the model\nlm.fit(x_train, y_train)\n\n# estimate \nyhat = lm.predict(x_test)","66732d41":"# dataframe of testing y values and predicted values\ndf_new = pd.DataFrame({'Actual': y_test, 'Predicted': yhat})\ndf_new.head()","8a0915e7":"# use metrics to determine the fit of the model\n# Mean Squared Error \nMSE = mean_squared_error(y_test, yhat)\nprint('Mean Squared Error: ', MSE)\n\n# root mean squared error, useful it shows the error in terms of y units\nRMSE = np.sqrt(MSE)\nprint('RMSE: ', RMSE)\n\n# r-squared \nR2 = r2_score(y_test, yhat)\nprint('R2 score: ', R2)\nR2_perc = round(R2 * 100, 2)","7f873939":"**There is positive correlation between features and target variable**","9e93ccc9":"## Data Preprocessing  \n\n**Remove unnecessary columns\/features**","2ebcd321":"### By the above analysis, the residual plot indicates that the data points are randomly spread about the x-axis meaning that a linear relationship exists.  \n\n**There is also positively correlation between independent variables and Price**","6abbe31f":"# Import Necessary Libraries for Regression analysis","041bfabf":"# Building the model","de8bbd1f":"# Identify if a linear relationship exists","081ae28f":"### Data Exploration","7e089682":"### Frome the above analysis, it is evident that normalization would be beneificial to our model","f92745fe":"**This model has a relative low RMSE and MSE indicating little error between actual Price and estimated Price, however other features should be used to decide which will provide the best results.**  \n\n**Around 91.816% in the variance in Price is explained by the Linear Model, indicating that our model has performed well!**"}}