{"cell_type":{"3cc71dba":"code","67b41823":"code","c0d2b7fd":"code","8edd3f2a":"code","5286afc8":"code","a000ae72":"code","a9a469d9":"code","2c46ae6d":"code","55b58a7c":"code","8015768e":"code","2e8b7361":"code","b3370d52":"code","4134ff65":"code","ff6b3418":"code","8e1fe8b5":"code","50682b98":"code","1b01122a":"code","be3b9293":"code","904c3598":"code","2bc5982b":"code","9f7fefba":"code","f6e95c01":"code","e72a34fe":"code","e0f1cd6e":"code","761a9819":"code","c8ee95f4":"code","8006b941":"code","5aa6bf6f":"code","90fb9b58":"code","61799d44":"code","561831f9":"code","5ecec505":"code","a8b0c7ec":"code","73fcb663":"code","3a6f97f4":"code","86e1b4f7":"code","d9ca172c":"code","5ccec2f9":"code","78687a84":"markdown","c1e99cf2":"markdown","92a63898":"markdown","c29b578d":"markdown","b5b41adc":"markdown","a0115048":"markdown","fce382a7":"markdown","d1f061f0":"markdown","1f4ad94d":"markdown","2e600f57":"markdown","6a6aa891":"markdown","9572ccd4":"markdown","4c5ca505":"markdown","63096f3a":"markdown","c0ab3890":"markdown","1a6ef3e0":"markdown","667ee20d":"markdown","fca81f4c":"markdown"},"source":{"3cc71dba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67b41823":"#import the libs\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas import Series\n\n%matplotlib inline\npd.set_option('display.max_rows', 500)","c0d2b7fd":"movies = pd.read_csv('\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv', index_col='ID')\n#found a way to remove the annoying 'Unnamed: 0'\nmovies = movies.drop('Unnamed: 0', axis =1)\nmovies.head()","8edd3f2a":"#function to investigate the data\n\ndef data_inv(df):\n    print('No of Rows: ', df.shape[0])\n    print('No of Coloums: ', df.shape[1])\n    print('**'*25)\n    print('Colums Names: \\n', df.columns)\n    print('**'*25)\n    print('Datatype of Columns: \\n', df.dtypes)\n    print('**'*25)\n    print('Missing Values: ')\n    c = df.isnull().sum()\n    c = c[c>0]\n    print(c)\n    print('**'*25)\n    print('Missing vaules %age wise:\\n')\n    print((100*(df.isnull().sum()\/len(df.index))))\n    print('**'*25)\n    print('Pictorial Representation:')\n    plt.figure(figsize=(8,6))\n    sns.heatmap(df.isnull(), yticklabels=False,cbar=False)\n    plt.show()  \n","5286afc8":"data_inv(movies)","a000ae72":"movies.drop(['Rotten Tomatoes', 'Age'], axis = 1, inplace=True)","a9a469d9":"data_inv(movies)","2c46ae6d":"movies.dropna(subset=['IMDb'], inplace=True)","55b58a7c":"data_inv(movies)","8015768e":"movies.dropna(subset=['Directors', 'Genres', 'Country', 'Language', 'Runtime'],inplace=True)\ndata_inv(movies)","2e8b7361":"movies.head()","b3370d52":"movies.shape","4134ff65":"#checking for any duplicate data\nmovies.drop_duplicates(inplace=True)","ff6b3418":"#lets check out the unique values in first Column\nmovies['Title'].value_counts()","8e1fe8b5":"#checking years\nplt.figure(figsize=(10,10))\nsns.distplot(movies['Year'])\nplt.show()","50682b98":"#Writing a function to calculate the movies in different platforms\ndef movies_count(platform, count=False):\n    if count==False:\n        print('Movies in {} are {}'. format(platform, movies[platform].sum()))\n    else:\n        return movies[platform].sum()\n    ","1b01122a":"movies['IMDb']","be3b9293":"plt.figure(figsize=(10,10))\nsns.distplot(movies['IMDb'])\n#plt.hist(movies['IMDb'])\nplt.show()","904c3598":"print('Minimum IMDb rating: ', movies['IMDb'].min())\nprint('Maximum IMDb rating: ', movies['IMDb'].max())","2bc5982b":"movies_count('Netflix')\nmovies_count('Hulu')\nmovies_count('Prime Video')\nmovies_count('Disney+')","9f7fefba":"#Movies per platform\nlabels = 'Netflix', 'Hulu', 'Prime Video', 'Disney'\nsize = [movies_count('Netflix', count=True), \n        movies_count('Hulu', count=True),\n        movies_count('Prime Video', count=True),\n        movies_count('Disney+', count=True)]\n\nexplode = (0.1, 0.1, 0.1, 0.1)\n\n#plotting\nfig1, ax1 = plt.subplots()\n\nax1.pie(size,\n       labels = labels,\n       autopct = '%1.1f%%',\n       explode = explode,\n       shadow = True,\n       startangle = 100)\n\nax1.axis = ('equal')\nplt.show()","f6e95c01":"movies['Type'].value_counts()","e72a34fe":"movies.drop('Type', inplace=True, axis =1)\nmovies.shape","e0f1cd6e":"movies['Directors'].value_counts()","761a9819":"s = movies['Directors'].str.split(',').apply(Series, 1).stack()\ns.index = s.index.droplevel(-1)\ns.name = 'Directors'\ndel movies['Directors']\ndf_directors = movies.join(s)","c8ee95f4":"data = df_directors['Directors'].value_counts()\nthreshold = 10\nprob = data > threshold\ndata_new = data.loc[prob]\n\nplt.figure(figsize=(10,10))\ndata_new.plot(kind='bar')\nplt.show()","8006b941":"s = movies['Genres'].str.split(',').apply(Series, 1).stack()\ns.index = s.index.droplevel(-1)\ns.name = 'Genres'\ndel movies['Genres']\ndf_genres = movies.join(s)","5aa6bf6f":"df_genres.head()","90fb9b58":"plt.figure(figsize=(10,10))\nsns.countplot(x='Genres', data=df_genres)\nplt.xticks(rotation=90)\nplt.show()","61799d44":"s = movies['Country'].str.split(',').apply(Series, 1).stack()\ns.index = s.index.droplevel(-1)\ns.name = 'Country'\ndel movies['Country']\ndf_country = movies.join(s)","561831f9":"df_country['Country'].value_counts()[:10].plot(kind='bar')\nplt.show()","5ecec505":"s = movies['Language'].str.split(',').apply(Series,1).stack()\ns.index = s.index.droplevel(-1)\ns.name = 'Language'\ndel movies['Language']\ndf_language = movies.join(s)","a8b0c7ec":"df_language['Language'].value_counts()[:10].plot(kind='barh')\nplt.show()","73fcb663":"sns.distplot(movies['Runtime'])\nplt.show()","3a6f97f4":"filter =( movies['Runtime'] == (movies['Runtime'].max()))\nmovies[filter]","86e1b4f7":"filter =( movies['Runtime'] == (movies['Runtime'].min()))\nmovies[filter]","d9ca172c":"#top rated movie\nfilter =( movies['IMDb'] == (movies['IMDb'].max()))\nmovies[filter]","5ccec2f9":"# Bottom Rated movie\nfilter =( movies['IMDb'] == (movies['IMDb'].min()))\nmovies[filter]","78687a84":"_So we have movies starting from 1900, but mostly the data is from 2000 onwards_","c1e99cf2":"**Type** Column has all zero values, so deciding to drop this.","92a63898":"So, I found a way to dealing with the annoying 'Unnamed: 0' coloum,Yay! now lets write a quick function to investigate the data","c29b578d":"# Data Analysis","b5b41adc":"It seems I am getting to much attached to the data, so I'll drop rotten Tomatoes first","a0115048":"## Univarate Analysis","fce382a7":"_The tittles are fine & unique_","d1f061f0":"## All Code Ends Here!\n\n##### But not for long :)\n\n","1f4ad94d":"# Data Cleaning","2e600f57":"Cool the data is cleaned & ready to study... :)","6a6aa891":"So average movie runtime is between 100~120","9572ccd4":"Movies can't be for 1.0 min, google shows that this movie is close to 1:54 mins, so there is some data quality issue.","4c5ca505":"Now I plan to drop the rows that has the IMDB column as empty","63096f3a":"Doing the same with columns such as directors, genres,country, language & runtime","c0ab3890":"So, Prime Vides is hosting the maximum number of titles, but its to note that on add the count (3152+ 848+11289+542), we get **15831**, which means _that there are **598** movies that are present in more than one platform._","1a6ef3e0":"![1280px-YouTube_Ruby_Play_Button.png](attachment:1280px-YouTube_Ruby_Play_Button.png)\n        Who doesn't like movies, I also like me, this is my way to present it with you..\n\nFirst, I would like to shoutout for the following kernels, from which the below analysis was inspired\n\nhttps:\/\/www.kaggle.com\/nishadjoshi98\/visualization-analysis-and-recommendation-system\n\nhttps:\/\/www.kaggle.com\/tanishqbhatia\/data-analytics-on-movies-on-online-platforms\n\nThanks a lot!","667ee20d":"Directors: Directors, in this column, some directors are present with a ',' so I'll split the names by ',' & then stack it one after the other for easy analysis. Then I wanted to find the director which has the maximum number of movies, to accomplish this, I have set a threshold (10) & plotted the directors which directed more than 10 movies.","fca81f4c":"That is a very long movie"}}