{"cell_type":{"63b3e1e6":"code","68eb3c48":"code","acc8c6e7":"code","588b665b":"code","08cfc4d3":"code","592ce689":"code","8527c13e":"code","9f390f43":"code","ddb3b26b":"code","48891ccb":"code","cf8d8331":"code","74da71b7":"markdown","d9676a3c":"markdown","f9f470f4":"markdown","00e126ce":"markdown","af5886fe":"markdown","5e7672af":"markdown","64c5e782":"markdown","3c1261ef":"markdown","84ff632c":"markdown","e6ba9daf":"markdown","d9fdaa6a":"markdown","f6f42640":"markdown"},"source":{"63b3e1e6":"# Import data & libraries\nimport numpy as np\nimport pandas as pd\n\npd.options.display.max_columns = None\n\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeat = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/features.csv')","68eb3c48":"# Count null values, per feature\nnulls = []\nfor i in range(130):\n    col =  f'feature_{i}'\n    nulls.append([col, train[col].isna().sum()])\n    \nnulls_df = pd.DataFrame(nulls, columns=['Feature', 'Nulls'])","acc8c6e7":"# Using plotly because it's interactive, allowing for easy identification of features\nimport plotly.express as px\nfig = px.bar(nulls_df, x='Feature', y='Nulls', title='Nulls per Feature')\nfig.show()","588b665b":"feat[feat['feature'].isin(['feature_7', 'feature_8', 'feature_17', 'feature_18', 'feature_27', 'feature_28'])]","08cfc4d3":"feat[feat['feature'].isin(['feature_72', 'feature_78', 'feature_84', 'feature_90'])]","592ce689":"feat[feat['feature'].isin(['feature_72', 'feature_73', 'feature_74', 'feature_75', 'feature_76', 'feature_77'])]\n","8527c13e":"#from matplotlib import pyplot as plt\n#plt.imshow(feat.corr(), cmap='hot')\n#plt.show()\n\nfig = px.imshow(feat.corr(), color_continuous_scale='hot')\nfig.show()","9f390f43":"flip = feat.drop(columns=['feature'])\nflip = flip.transpose()\n\n#plt.figure(figsize=(8,8))\n#plt.imshow(flip.corr(), cmap='hot')\n\nfig = px.imshow(flip.corr(), color_continuous_scale='hot', width=900, height=600)\nfig.show()","ddb3b26b":"fig = px.imshow(train.corr(), color_continuous_scale='hot', width=900, height=600)\nfig.show()","48891ccb":"fig = px.imshow(abs(train.corr()), color_continuous_scale='hot', width=900, height=600)\nfig.show()","cf8d8331":"fig = px.imshow(abs(train.corr()) > .7, color_continuous_scale='hot', width=900, height=600)\nfig.show()","74da71b7":"# Jane Street \"features.csv\" EDA\nI recently responded to [this discussion post](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction\/discussion\/202165) which brought up that the null value counts (per feature) followed a pattern. This notebook goes through setting up the problem, then displays a correlation matrix heatmap relating features and tags from \"features.csv\". Spoiler alert: The **correlation matrix is trippy!**\n\n![trippy.png](attachment:trippy.png)","d9676a3c":"## \"features.csv\" Exploration\nLooking at the nulls plot, we see some patterns. Are they explained by the tags in \"features.csv\"?","f9f470f4":"### Tags 72 - 77\nThis is one \"cycle\" of the pattern visible in the higher features.\nAll have tags 23 and 27 as True.","00e126ce":"## Plot 1: Null Counts per Feature","af5886fe":"## Now, let's explore the train.csv data","5e7672af":"# Plot 3: Feature Correlation Matrix\nShows the correlation between each **feature**, with respect to the True\/False values for each tag.","64c5e782":"### As shown, there are some interesting patterns.\n* For the first bunch of features, there are the same number of nulls in pairs\n* Starting at feature_72, every 6 features has the same number of nulls\n\nNext, we'll use this plot as the basis for exploring relationships between features and tags.","3c1261ef":"## Plot 2: Tag Correlation Matrix\nShows the correlation between each tag, with respect to the True\/False values for each feature.\nNothing out of the ordinary here: There's no apparent order to the tags.","84ff632c":"## Count null values in train.csv","e6ba9daf":"# Woah! Looks like there are some interesting patterns. Why do you think this is?\n\nThank you to @abdolazimrezaei who posed the question originally. Hope you enjoyed the post!","d9fdaa6a":"### Features 72, 78, 84 and 90\nAll have tags 4 and 24 as True.","f6f42640":"### Features 7, 8, 17, 18, 27, and 28\nAll have tags 4 and 6 as True."}}