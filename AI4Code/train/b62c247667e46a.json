{"cell_type":{"c5375fb2":"code","6e454086":"code","68f8a0c5":"code","54d31d01":"code","b66b9ebb":"code","0837136e":"code","5d7700c9":"code","f8f8cafc":"code","5126129b":"code","f5594cfa":"code","60523505":"code","13030dbc":"code","aef2fbb9":"code","9a26cc51":"code","3e0cfd9a":"code","ba5b373f":"code","98b6a528":"code","43b41baa":"code","43c0fd15":"code","00f83d12":"code","17957d9d":"code","e22af2ec":"code","3eb8bee4":"code","8c540857":"markdown","86cc7cf4":"markdown","2f2cf057":"markdown","12531d2c":"markdown"},"source":{"c5375fb2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6e454086":"#changing the Directory where data is located\nimport os\nos.chdir('\/kaggle\/input\/air-passengers')\nos.getcwd()","68f8a0c5":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math","54d31d01":"data = pd.read_csv('AirPassengers.csv')\ndata.head()","b66b9ebb":"data.tail()","0837136e":"data.info()\n","5d7700c9":"data['Month'] = pd.to_datetime(data['Month'])\ndata.info()","f8f8cafc":"data.set_index('Month', inplace=True) #set date as index","5126129b":"data.head()","f5594cfa":"plt.xlabel(\"Month\")\nplt.ylabel(\"Passengers\")\nplt.title(\"Passengers Travelled\")\nplt.plot(data['#Passengers'],)\n","60523505":"\n#data_Scaling\ndata['#Passengers']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndata=scaler.fit_transform(data)\n\n","13030dbc":"data","aef2fbb9":"\n#Creating train and test partition\ntrain = int(len(data)*0.75)\ntest = len(data)-train\n\ntrain\n\ntest\n\ntrain_data,test_data=data[0:train,:],data[train:len(data),:1]\n","9a26cc51":"# converting an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3\n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn np.array(dataX), np.array(dataY)\n","3e0cfd9a":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 4\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)\n\ny_train","ba5b373f":"X_train.shape, y_train.shape\n","98b6a528":"\n# reshape input to be [sample, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0], 4, 1)\nX_test = X_test.reshape(X_test.shape[0], 4, 1)\n\nX_train.shape","43b41baa":"\n### Create the LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\n\nmodel=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(4,1)))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\nmodel.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=1,verbose=1)\n","43c0fd15":"#Model Prediction\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)\n\ntest_predict","00f83d12":"#Transforming data back to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)\n\ntest_predict","17957d9d":"## Calculate RMSE performance metrics\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))\n","e22af2ec":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))\n","3eb8bee4":"### Plotting \n# shift train predictions for plotting\nlook_back=4\ntrainPredictPlot = np.empty_like(data)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(data)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(data)-1, :] = test_predict\n# plot baseline and predictions\nplt.xlabel(\"Month\")\nplt.ylabel(\"Passengers\")\nplt.title(\"Passengers Travelled\")\nplt.plot(scaler.inverse_transform(data)) #original data\nplt.plot(testPredictPlot) #test prediction\nplt.show()","8c540857":"importing required libraries.","86cc7cf4":"Changing month to datetime format","2f2cf057":"Plotting the Time Series Graph.","12531d2c":"Scaling the Data"}}