{"cell_type":{"2d7d4dea":"code","8c236503":"code","7d516da3":"code","686351ac":"code","331c56a8":"code","cd7ae536":"code","84b8be04":"code","f3741630":"code","31e57517":"code","3cd75617":"code","6bee8819":"code","f3288daf":"code","819523b6":"code","b0fc8213":"code","8a9b1461":"code","ca5b6b2c":"code","d589fee5":"code","70b159c0":"code","4f9ada84":"code","67502dda":"code","a6a5e2c6":"code","b966a5a0":"code","8c118799":"code","4142e669":"code","38aa5dcc":"code","f6670d90":"code","358c6a94":"code","6006ea42":"code","f00c8bde":"code","85884ea3":"code","57d80577":"code","e1cf57dd":"code","2ff5b82d":"code","bb04dde3":"code","de8f97a9":"code","926156e9":"code","d46117e9":"code","3ef7bae9":"code","aba1006e":"code","51a927ae":"code","cf3f34a2":"markdown","129466ee":"markdown","4343d529":"markdown","c546f3d1":"markdown","2dac9647":"markdown"},"source":{"2d7d4dea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","8c236503":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","7d516da3":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","686351ac":"train.info()","331c56a8":"test.info()","cd7ae536":"all = pd.concat([train, test], sort = False)\nall.info()","84b8be04":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","f3741630":"all.info()","31e57517":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","3cd75617":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","6bee8819":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","f3288daf":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","819523b6":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","b0fc8213":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","8a9b1461":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","ca5b6b2c":"all.info()","d589fee5":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","70b159c0":"all.info()","4f9ada84":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","67502dda":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","a6a5e2c6":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","b966a5a0":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","8c118799":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","4142e669":"from sklearn.ensemble import RandomForestClassifier","38aa5dcc":"RF_Model = RandomForestClassifier()","f6670d90":"#from sklearn.model_selection import GridSearchCV","358c6a94":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","6006ea42":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","f00c8bde":"#RF_grid_model = RF_grid.fit(X_train, y_train)","85884ea3":"#RF_grid_model.best_estimator_","57d80577":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","e1cf57dd":"RF_Model.fit(X_train, y_train)","2ff5b82d":"predictions = RF_Model.predict(X_test)\npredictions","bb04dde3":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","de8f97a9":"all_test.head()","926156e9":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","d46117e9":"t_pred = RF_Model.predict(TestForPred).astype(int)","3ef7bae9":"PassengerId = all_test['PassengerId']","aba1006e":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","51a927ae":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","cf3f34a2":"****Extra Features:","129466ee":"****Final Predictions","4343d529":"### Build Random Forest","c546f3d1":"****Train\/Test Split","2dac9647":"****Check Accuracy"}}