{"cell_type":{"ccc825b4":"code","0261dbee":"code","d8d4dc22":"code","a7343772":"code","6d288e5d":"code","01244d35":"code","7a811ebe":"code","9c5bb0fe":"code","1c993627":"code","88c2b3be":"code","9ff6f852":"code","bcfde837":"code","0005507c":"code","63151ee1":"code","da5f3468":"code","965a9ca6":"code","df5f3422":"code","65c491f1":"code","6e4e56a3":"code","56b56bf3":"code","34978781":"code","6de9568e":"code","5e6e8a6c":"code","0544b26f":"code","5ff93763":"code","e2dc115b":"code","729bfa4b":"code","9161e23b":"code","7db18266":"code","81649f5b":"code","d80bdec8":"code","b72e7573":"code","041f55a0":"code","acd227f6":"code","310d2191":"code","e39c7146":"code","16b40cd0":"code","6d947689":"code","28896ecb":"code","acf1d201":"code","aa95d330":"code","45597f6f":"code","2422b833":"code","f5460818":"code","45547465":"code","1c21691f":"code","f4e8d9fa":"code","c186f46d":"code","e2994bc2":"code","8d6f1546":"code","05e15355":"code","9a760e1d":"code","73d9d38d":"code","1983867a":"code","695f2502":"code","5f8fc6e2":"code","8d93181d":"code","61d61f7d":"code","842606f0":"code","beec124e":"code","725d73e8":"code","14b668da":"markdown","f643752c":"markdown","c6f30dad":"markdown","0c565958":"markdown","ef4cba19":"markdown","4cc02a92":"markdown","ffb149e0":"markdown","32ff31d4":"markdown","b22a0222":"markdown","c3b9359e":"markdown","adacec8e":"markdown","1499968a":"markdown","abe1573c":"markdown","19a5c938":"markdown","5caf419d":"markdown","78233e45":"markdown","66d0dbc9":"markdown","1e20cf06":"markdown","8e955ed9":"markdown","f7b25789":"markdown","03c131c1":"markdown","7aa5ec09":"markdown","9fc0532e":"markdown","ebb558c1":"markdown","51b31ebe":"markdown","fe700ba4":"markdown"},"source":{"ccc825b4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBRegressor","0261dbee":"df = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\ndf\n\n","d8d4dc22":"df.describe()","a7343772":"# Checking the counts of label categories\ndf.isin(['?']).sum()","6d288e5d":"income_all = df['income'].value_counts(normalize = True)\nincome_all*100","01244d35":"df.head(2)","7a811ebe":"plt.figure(figsize=(12,4))\nax = sns.countplot(data = df, x = 'sex', hue=\"income\", palette = 'rocket')\n\nplt.xlabel(\"Sex\", fontsize= 12)\nplt.ylabel(\"# of People\", fontsize= 12)\nplt.ylim(0,20000)\nplt.xticks([0,1],['Male', 'Female'], fontsize = 11)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.16, p.get_height()+1000))\n\nplt.show()","9c5bb0fe":"edu = df[\"education\"].value_counts(normalize=True)\n\nsns.barplot(edu.values, edu.index, palette='mako')\nplt.title('Education')\nplt.xlabel('Number of people')\nplt.ylabel('Education vs Number of people')\nplt.tick_params(labelsize=12)\nplt.show()","1c993627":"df['marital.status'].value_counts()","88c2b3be":"status = df[\"marital.status\"].value_counts(normalize=True)\n\nsns.barplot(status.values, status.index, palette='viridis')\nplt.title('Maritial Status')\nplt.xlabel('Number of people')\nplt.ylabel('Education vs Number of people')\nplt.tick_params(labelsize=12)\nplt.show()\n","9ff6f852":"plt.figure(figsize=(12,4))\n\nsns.distplot(df['age'])\nplt.ticklabel_format(style='scientific', axis='x') #repressing scientific notation on x\nplt.ylabel('# of People')\nplt.show()","bcfde837":"plt.figure(figsize=(20,8))\nax = sns.countplot(data = df, x = 'race', hue=\"income\", palette = 'cubehelix')\n\nplt.xlabel(\"Sex\", fontsize= 12)\nplt.ylabel(\"Income\", fontsize= 12)\n\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.20, p.get_height()+1000))","0005507c":"plt.style.use('seaborn')\nplt.figure(figsize=(20, 7))\nsns.countplot(df['education'],\n              hue=df['income'], palette='Blues')\nplt.title('Distribution of Income with respect to Education')\nplt.xlabel('Education')\nplt.ylabel('Number of people')\nplt.tick_params(labelsize=12)\nplt.legend(loc=1, prop={'size': 15})\nplt.show()","63151ee1":"plt.style.use('seaborn')\nplt.figure(figsize=(20, 7))\nsns.countplot(df['marital.status'],\n              hue=df['income'], palette='vlag')\nplt.title('Distribution of Income with respect to Marital Status')\nplt.xlabel('Marital Status')\nplt.ylabel('Income')\nplt.tick_params(labelsize=12)\nplt.legend(loc=1, prop={'size': 15})\nplt.show()","da5f3468":"plt.figure(figsize=(15,5))\n\nsns.distplot(df['hours.per.week'])\nplt.ticklabel_format(style='plain', axis='x') #repressing scientific notation on x\nplt.ylabel('')\nplt.show()","965a9ca6":"df[\"hours.per.week\"].mean()","df5f3422":"plt.style.use('seaborn')\nplt.figure(figsize=(30, 15))\nsns.countplot(df['occupation'],\n              hue=df['income'], palette='Blues')\nplt.title('Distribution of Income with respect to Occupation')\nplt.xlabel('Occupation')\nplt.ylabel('Number of people')\nplt.tick_params(labelsize=12)\nplt.legend(loc=1, prop={'size': 15})\nplt.show()","65c491f1":"df = df.replace('?', np.nan)","6e4e56a3":"df.isin(['?']).sum()","56b56bf3":"df.isnull().sum()","34978781":"## Replacing the None values with mode \n\ndf[\"workclass\"] = df[\"workclass\"].fillna(df[\"workclass\"].mode())\ndf[\"occupation\"] = df[\"occupation\"].fillna(df[\"occupation\"].mode())\ndf[\"native.country\"] = df[\"native.country\"].fillna(df[\"native.country\"].mode())\ndf.describe()\n","6de9568e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['income'] = le.fit_transform(df['income'])","5e6e8a6c":"df.dtypes","0544b26f":"from sklearn.preprocessing import LabelEncoder\nfor col in df.columns:\n    if df[col].dtypes == 'object':\n        le = LabelEncoder()\n        \n        df[col] = le.fit_transform(df[col].astype(str))","5ff93763":"df.corr()","e2dc115b":"X = df.drop([\"fnlwgt\",\"education\",\"marital.status\",\"relationship\",\"native.country\"],axis=1)\nX","729bfa4b":"X = df.drop(\"income\",axis=1)\ny = df.income","9161e23b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split","7db18266":"y.value_counts(normalize=True)","81649f5b":"# balancing the skewed data\nfrom imblearn.over_sampling import RandomOverSampler \nrs = RandomOverSampler(random_state=30)","d80bdec8":"rs.fit(X,y)","b72e7573":"X_new,y_new = rs.fit_resample(X, y)\ny_new.value_counts(normalize=True)","041f55a0":"df.head()","acd227f6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","310d2191":"X_train, X_test, y_train, y_test = train_test_split(X_new, y_new, test_size=0.3, random_state=30)","e39c7146":"X_train.dtypes","16b40cd0":"print(\"X_train shape:\", X_train.shape)\nprint(\"X_test shape:\", X_test.shape)\nprint(\"y_train shape:\", y_train.shape)\nprint(\"y_test shape:\", y_test.shape)","6d947689":"lr = LogisticRegression(solver = \"liblinear\")\ngn = GaussianNB()\nrf = RandomForestClassifier()\ndt = DecisionTreeClassifier()\nsvc = SVC()\nxgb = XGBClassifier()\n","28896ecb":"#LogisticRegression\nlr.fit(X_train,y_train)\ny_pred_lr = lr.predict(X_test)\n\n#GaussianNB\/ Naive Byers\ngn.fit(X_train,y_train)\ny_pred_gn = gn.predict(X_test)\n\n#RandomForestClassifier\nrf.fit(X_train,y_train)\ny_pred_rf = rf.predict(X_test)\n\n#DecisionTreeClassifier\ndt.fit(X_train,y_train)\ny_pred_dt = dt.predict(X_test)\n\n#SVC\nsvc.fit(X_train,y_train)\ny_pred_svc = svc.predict(X_test)\n\n#XGB\nxgb.fit(X_train,y_train)\ny_pred_xgb = xgb.predict(X_test)","acf1d201":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import mean_absolute_error","aa95d330":"print(\"Logistic Regression:\")\nprint(\"Accuracy score:\", round(accuracy_score(y_test, y_pred_lr) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_lr) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_lr) * 100,3))","45597f6f":"print(\"GaussianNB\/ Naive Byers:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_gn) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_gn) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_gn) * 100,3))","2422b833":"print(\"RandomForestClassifier:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_rf) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_rf) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_rf) * 100,3))","f5460818":"print(\"DecisionTreeClassifier:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_dt) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_dt) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_dt) * 100,3))","45547465":"print(\"Support Vector Machine:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_svc) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_svc) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_svc) * 100,3))","1c21691f":"print(\"XGBoost Classifier:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_xgb) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_xgb) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_xgb) * 100,3))","f4e8d9fa":"from sklearn.model_selection import GridSearchCV\n\n#DecisionTreeClassifier\n\nparams = {\n    'max_depth': [2, 3, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100,150],\n    'criterion': [\"gini\", \"entropy\"]\n}\n\ngrid_search = GridSearchCV(estimator=dt, param_grid=params,cv=5, n_jobs=1, verbose=1, scoring = \"accuracy\")\ngrid_search.fit(X_train, y_train)","c186f46d":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","e2994bc2":"grid_search.best_params_","8d6f1546":"grid_search.best_score_","05e15355":"dt_tuned = DecisionTreeClassifier(criterion=\"gini\",max_depth=20,min_samples_leaf=5)\ndt_tuned.fit(X_train,y_train)\n","9a760e1d":"y_pred_dt_tuned = dt_tuned.predict(X_test)\nprint(\"RandomForestClassifier:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_dt_tuned) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_dt_tuned) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_dt_tuned) * 100,3))\n","73d9d38d":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred_dt_tuned)\nplt.figure(figsize=(10,7))\nsns.heatmap(cm,annot=True,fmt=\"d\")\nplt.xlabel(\"Predicted Value\")\nplt.ylabel(\"Truth\")\nplt.show()","1983867a":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [int(x) for x in np.linspace(start=40, stop=150, num=15)]\nmax_depth = [int(x) for x in np.linspace(40, 150, num=15)]\n\nparameters = {\n    'n_estimators': n_estimators,\n    'max_depth': max_depth,\n}\n\nrf_tuned = RandomForestClassifier(random_state=30)\n                       \nrf_cv = RandomizedSearchCV(estimator=rf_tuned, param_distributions=parameters, cv=5, random_state=30)\n","695f2502":"rf_cv.fit(X_train, y_train)","5f8fc6e2":"rf_cv.best_params_","8d93181d":"rf_cv.best_score_","61d61f7d":"rf_tuned = RandomForestClassifier(max_depth=95, n_estimators=142, random_state=30)\nrf_tuned.fit(X_train,y_train)","842606f0":"y_pred_rf_tuned = rf_tuned.predict(X_test)\nprint(\"RandomForestClassifier:\")\nprint('Accuracy score:', round(accuracy_score(y_test, y_pred_rf_tuned) * 100, 3))\nprint(\"F1 Score: \", round(f1_score(y_test,y_pred_rf_tuned) * 100,3))\nprint(\"MSE: \", round(mean_squared_error(y_test,y_pred_rf_tuned) * 100,3))","beec124e":"score_rf = pd.DataFrame(rf_cv.cv_results_)\nscore_rf.head()","725d73e8":"cm = confusion_matrix(y_test, y_pred_rf_tuned)\nplt.figure(figsize=(10,7))\nsns.heatmap(cm,annot=True,fmt=\"d\")\nplt.xlabel(\"Predicted Value\")\nplt.ylabel(\"Truth\")\nplt.show()","14b668da":"#### Seems that the average Hours per week put by an individual is 40","f643752c":"### 3.Based on Marital Status","c6f30dad":"### Here we can see that 75.9% people have income below 50k and remaining have income above 50k,so the data here is skewed\n","0c565958":"### 1. Based on Sex\/Gender","ef4cba19":"## Evaluation of Models\n","4cc02a92":"### We can notice above that the dataset has no Null Values, in form on N\/A or 0 but it does have null in form of '?\"","ffb149e0":"### Here we have some Null values in form of \"?\"","32ff31d4":"### 9. Average Hours per Week","b22a0222":"### In this notebook, we are going to predict whether a person's income is above 50k or below 50k using various features like age, education, and occupation.","c3b9359e":"## Here we see that the majority of people have completed HS-Grad, College or Bachelors","adacec8e":"### 10. Occupation","1499968a":" =======","abe1573c":"### 4. Based on Age","19a5c938":"### Here is it quite visible that education,fnlwgt,native.country,race, etc have minimum to no relation with the final output income of Income hence we will be dropping these","5caf419d":"### The Average age is around 38-40 yrs","78233e45":"### Decision Tree","66d0dbc9":"### There are more women than men in our dataset and, apparently, women have a higher income ratio compared to men.","1e20cf06":"### 8. Income with respect to Marital Status","8e955ed9":"# ** Visualization of Data**","f7b25789":"### 5. Based on Race","03c131c1":"# ====== Models ======","7aa5ec09":"### 2. Based on Education","9fc0532e":"# Hyper - Tuning Parameters","ebb558c1":"## Here we used multiple models like logistic regression, Naive Byers, Support Vector Classifier, Decision Tree Classifier, Random Forest Classifier and XGBoost classifier.\n\n\n## The highest accuracy score of 92.199 and f1 score of 92.54 if from a Tuned Random Forest\n","51b31ebe":"### 6. Income With Respect to Education","fe700ba4":"### Random Forest"}}