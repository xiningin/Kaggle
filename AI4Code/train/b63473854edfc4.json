{"cell_type":{"2cb5a39b":"code","a34352a0":"code","4e65511d":"code","0699c815":"code","36b8dd60":"code","cb12afeb":"code","1a6c232d":"code","8f37d128":"code","1605b5c2":"code","f16b00b7":"code","f06d4e63":"code","15fa73d6":"code","04fa77ca":"code","7bbcde08":"code","cfd3d551":"code","275f5897":"code","be380129":"code","df4d33f1":"code","e685e304":"code","e452d7f4":"code","0a62852f":"code","1f2301b8":"code","c6ab34a1":"code","8a31d214":"code","f2ac12fe":"code","94c8a27e":"code","84e45f64":"code","172d5fad":"markdown","d98ee31f":"markdown","c4c7388d":"markdown","53d8b34c":"markdown","dfb1dba4":"markdown"},"source":{"2cb5a39b":"# importing data libraries\n\nimport numpy as np\nimport pandas as pd\n\n# importing visualization libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a34352a0":"# importing models from sklearn and tensorflow.keras\n\n# sklearn classification algorithms\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn.metrics import confusion_matrix\n\n# tensorflow.keras Sequential model\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.backend import clear_session\n","4e65511d":"data = pd.read_csv('..\/input\/hotel_bookings_cleaned.csv')","0699c815":"data.shape","36b8dd60":"data.info()","cb12afeb":"data.describe()\n\n# we have different range of values.\n# most of our columns consist dummy variables ","1a6c232d":"X = data.drop(['is_canceled'], axis=1).values\ny = data['is_canceled'].values","8f37d128":"X.shape, y.shape","1605b5c2":"train_data_length = 1000 # X.shape[0] \/\/ 3","f16b00b7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X[:train_data_length], y[:train_data_length], test_size=0.1)","f06d4e63":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","15fa73d6":"from sklearn.preprocessing import StandardScaler\n\nstd = StandardScaler()\n\nX_train = std.fit_transform(X_train)\nX_test = std.transform(X_test)","04fa77ca":"pd.DataFrame(X_train).describe() # result of standardization","7bbcde08":"# PCA Dimension Reduction\n\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components = 0.95)\n\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\n","cfd3d551":"X_train.shape, X_test.shape","275f5897":"import warnings\nfrom tqdm.notebook import tqdm\nwarnings.filterwarnings('ignore')\n\nkfold = StratifiedKFold()\n\n# Modeling with different algorithms\n\nstate = 42\nclassifiers = list()\n\nalgorithms = [\"DecisionTree\", \"RandomForest\",\"GradientBoosting\", \"KNeighboors\",\"LogisticRegression\",\n             \"LinearDiscriminantAnalysis\", \"Keras\"]\n\ntree_algorithms = {\"DecisionTree\": 1, \"RandomForest\": 2, \"GradientBoosting\": 3}\n\nclassifiers.append(SVC(random_state=state))\nclassifiers.append(DecisionTreeClassifier(random_state=state))\nclassifiers.append(RandomForestClassifier(random_state=state))\nclassifiers.append(GradientBoostingClassifier(random_state=state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = state))\nclassifiers.append(LinearDiscriminantAnalysis())\n\ncv_results = dict()\n\nfor i in tqdm(range(len(classifiers))):\n    cv_results[algorithms[i]] = cross_val_score(classifiers[i], X_train, y_train, scoring='accuracy', cv = kfold, verbose=1, n_jobs=-1)\n","be380129":"model = Sequential()\n\nmodel.add(Dense(128, input_shape=(X_train.shape[1],), activation=\"relu\"))\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=128, batch_size=128, verbose=0, validation_split=0.2)\n\nscore = model.evaluate(X_test, y_test, verbose=0)\n","df4d33f1":"cv_results['Keras'] = np.array([score[1]])","e685e304":"cv_means = {}\ncv_std = {}\n\nfor algorithm in cv_results.keys():\n    cv_means[algorithm] = [cv_results[algorithm].mean(), cv_results[algorithm].std()]\n\ncv_means = {k: v for k, v in sorted(cv_means.items(), key=lambda item: item[1], reverse=True)}\ncv = np.array(list(cv_means.values()))\n    \ncv_df = pd.DataFrame({\"Algorithm\": list(cv_means.keys()), \"CVMean\": cv[:, 0], \"CVStd\": cv[:, 1]})","e452d7f4":"cv_df","0a62852f":"plt.figure(figsize=(16, 10))\n\nsns.set_color_codes(\"pastel\")\ng = sns.barplot(x='Algorithm', y='CVMean', data=cv_df, color='b')\nsns.set_color_codes(\"muted\")\ng = sns.barplot(x='Algorithm', y='CVStd', data=cv_df)\n\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation Scores\")","1f2301b8":"def plot_feature_importance(classifier, name):\n    \n    plt.figure(figsize=(16, 8))\n    \n    indices = np.argsort(classifier.feature_importances_)[::-1][:20]\n    \n    importances = classifier.feature_importances_[indices]\n    columns = data.columns[indices]\n    \n    g = sns.barplot(x=importances, y=columns)\n    \n    plt.title(name)\n    plt.show(g)","c6ab34a1":"for tree in tree_algorithms.keys():\n    classifiers[tree_algorithms[tree]].fit(X_train, y_train)\n    plot_feature_importance( classifiers[tree_algorithms[tree]], tree)","8a31d214":"test_results = dict()\n\nfor i in tqdm(range(len(classifiers))):\n    classifiers[i].fit(X_train, y_train)\n    test_results[algorithms[i]] = classifiers[i].score(X_test, y_test)\n\ntest_results['Keras'] = model.evaluate(X_test, y_test, verbose=0)[1]","f2ac12fe":"test_scores = {}\n\nfor algorithm in test_results.keys():\n    test_scores[algorithm] = test_results[algorithm]\n\ntest_results = {k: v for k, v in sorted(test_scores.items(), key=lambda item: item[1], reverse=True)}\n    \ntest_df = pd.DataFrame({\"Algorithm\": list(cv_means.keys()), \"TestScore\": list(test_results.values())})","94c8a27e":"test_df","84e45f64":"plt.figure(figsize=(16, 10))\n\ng = sns.barplot(x='Algorithm', y='TestScore', data=test_df)\n\ng.set_xlabel(\"Test Accuracy\")\ng = g.set_title(\"Test Scores\")","172d5fad":"### Create Models and Fit with KFold","d98ee31f":"### Test Data:","c4c7388d":"### Keras Sequential Model:","53d8b34c":"### Standardize Data:","dfb1dba4":"### Read Data:"}}