{"cell_type":{"10d20c5d":"code","bdca94f7":"code","d56b8749":"code","08f0bf68":"code","822e4e90":"code","11bf8022":"code","cb7881a2":"code","7023dca0":"code","b25af564":"code","8b93a78f":"code","ba2f540a":"code","13d686cd":"markdown","23f5fc82":"markdown","7782aae7":"markdown","fc5e2438":"markdown","0bbdc7c4":"markdown","0932d228":"markdown","97ba6cec":"markdown","aefbf50e":"markdown","9d5a9386":"markdown","ff9226f7":"markdown","a6f6224a":"markdown","fc268324":"markdown"},"source":{"10d20c5d":"import numpy as np\nimport pandas as pd\ntraining_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\ntraining_data.head()","bdca94f7":"x_train = training_data.drop('label', axis = 1)\ny_train = pd.DataFrame(data=training_data['label'])\ndisplay(y_train.head())\ndisplay(x_train.head())","d56b8749":"print(x_train.iloc[0].shape)","08f0bf68":"print(y_train.iloc[0].shape)","822e4e90":"from matplotlib.pyplot import imshow\nfrom PIL import Image\n%matplotlib inline\n\n# change the value of i to choose which image in the dataset to display\ni= 1\n# display the image\nimshow(x_train.iloc[i].values.reshape((28, 28)))\nprint('This image corresponds to ', y_train.iloc[i])","11bf8022":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Conv2D, Flatten, MaxPooling2D\n\ncnn_model = Sequential()\n\n# convolusion layers followed by max pooling\ncnn_model.add(Conv2D(128, (3,3), padding='same', input_shape=(28,28,1), data_format='channels_last', activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.2))\n\ncnn_model.add(Conv2D(128, (3,3), padding='same', activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.2))\n\ncnn_model.add(Conv2D(256, (3,3), padding='same', activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.2))\n\ncnn_model.add(Conv2D(256, (3,3), padding='valid', activation='relu'))\ncnn_model.add(Dropout(0.2))\n\n# output layer\ncnn_model.add(Flatten())\ncnn_model.add(Dense(units=10, activation='softmax'))\n\n# compile the model\n# for a multi-class classification problem\ncnn_model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nprint('The model was successfully created and compiled.')\nprint('Shape of Layer Outputs:')\nfor layer in cnn_model.layers:\n    print(layer.name,': ',layer.output_shape)","cb7881a2":"from keras.utils import to_categorical\n\ny_train_categorical = to_categorical(y_train, num_classes=10)\n\nreshaped_x = x_train.values.reshape(x_train.shape[0],28,28,1) \/ 255\n\nprint(reshaped_x.shape)\nprint(y_train_categorical.shape)\n\ncnn_model.fit(x=reshaped_x, y=y_train_categorical, batch_size=1000, epochs=32, verbose=1, validation_split=0.2)","7023dca0":"test_data.head()","b25af564":"# reshape the test data\nreshaped_test_data = test_data.values.reshape(test_data.shape[0],28,28,1) \/ 255\n\n# make predictions\npredictions = cnn_model.predict(reshaped_test_data)\ndisplay(predictions)","8b93a78f":"# format the predictions into numbers from 0 to 9\npredictions_formatted = np.argmax(predictions, axis=1)\ndisplay(predictions_formatted)","ba2f540a":"# make a dataframe out of the predictions\nsubmission = pd.DataFrame({'ImageId': np.arange(1,28001), 'Label': predictions_formatted})\n\n# output a csv file\nsubmission.to_csv('submission_4.csv', index=False)\nprint('Done')","13d686cd":"## Explore the Data","23f5fc82":"## Load the Data","7782aae7":"<p>Fit the model to the training data and validate on 20% of the data.<\/p>","fc5e2438":"<p>An output file should be ready now for submission. <\/p>","0bbdc7c4":"<p> Visualize how the input pixels correspond to the original hand-written digits by reconstructing some of the images. <\/p>","0932d228":"<p>Create the model of the convolutional neural network.<\/p>","97ba6cec":"## Fit the Model","aefbf50e":"## Predict the Labels of the Test Data","9d5a9386":"<p>Start by printing the shapes of individual entries in the data to know their dimensions. <\/p>","ff9226f7":"<p>Split the training data into the features ```x_train``` and the target value ```y_train```.<\/p>","a6f6224a":"<p>Start  by loading the competition data from the csv files.<\/p>","fc268324":"## Create a Model\n"}}