{"cell_type":{"2a9c625f":"code","13a0bc88":"code","96392598":"code","e96fb31d":"code","1d171b7d":"code","9a627bce":"code","31134705":"code","a213621f":"code","c6da66f1":"code","06c5a69e":"code","b4fc7ba9":"code","fc465036":"code","334f6f19":"code","7cfaccd9":"code","5ccd599b":"code","dc5a3fc4":"code","a3fb528c":"code","e5ebc643":"code","971b5a6f":"code","6e1464ad":"code","e0819e72":"code","02a9673f":"code","c1365e15":"code","8c2a56f9":"code","1c4466d3":"code","c75fe506":"code","84d6ed65":"code","654d91da":"code","46fff760":"code","eecbdf33":"code","da6a5cf7":"code","9280ef32":"code","244ad41e":"code","ec100a37":"code","b417bb59":"code","03ad7a7d":"code","2aa95fc9":"code","335c0c6b":"markdown","67d1b4b3":"markdown","95828950":"markdown","748235bd":"markdown","7d913443":"markdown","baaf314e":"markdown"},"source":{"2a9c625f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13a0bc88":"import matplotlib.pyplot as plt","96392598":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\n","e96fb31d":"data\n","1d171b7d":"football = pd.DataFrame(data,columns = ['year', 'team', 'wins', 'draws', 'losses'])","9a627bce":"football","31134705":"edu = pd.read_csv('\/kaggle\/input\/ense3-1a\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","a213621f":"edu.head()","c6da66f1":"edu.tail()","06c5a69e":"edu.describe()","b4fc7ba9":"edu['Value']","fc465036":"edu[10:14]","334f6f19":"edu.iloc[90:94][['TIME','GEO']]","7cfaccd9":"edu[edu['Value'] > 6.5].tail()","5ccd599b":"edu[edu[\"Value\"].isnull()].head()","dc5a3fc4":"edu.max(axis = 0)","a3fb528c":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","e5ebc643":"s = edu[\"Value\"]\/100\ns.head()","971b5a6f":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","6e1464ad":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","e0819e72":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","02a9673f":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","c1365e15":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","8c2a56f9":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","1c4466d3":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","c75fe506":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","84d6ed65":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","654d91da":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","46fff760":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","eecbdf33":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","da6a5cf7":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","9280ef32":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","244ad41e":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","ec100a37":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","b417bb59":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.5,\n              title = \"Total Values for Country\")","03ad7a7d":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","2aa95fc9":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","335c0c6b":"Question 6: What does the operation edu[\u2019Value\u2019] > 6.5 produce? And if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nIt will produce the values that are bihher than 6.5. So that, it does not series but depent on the data frame values.","67d1b4b3":"Question 4: which measures does the result show? It seems that it shows some default values, can you guess which ones?. It shows the count, mean, std, min, 25%, 75%, max of tha data frame. And the defult values of the results are 2.880000 for the minimum and 8.810000.","95828950":"Question 5: What does this index return? What does the first index represent? And the second one?\nThe index returns columns and rows or arrays for some certain restrictions. The first one represents complete column from array 10 to 13. And the second one shows rows from 90 to 93 for only time and geo columns.  ","748235bd":"Question 3: What does the method tail()return?\nIt shows the bottom part the data frame.\n","7d913443":"Question 2: What happens if we give a number as argument to the method head()?\nIt shows the upper part of the data frame. ****","baaf314e":"* question 1: which is the size of the data frame== 384 rows \u00d7 3 columns"}}