{"cell_type":{"3305bb7e":"code","cc653612":"code","f29ff93c":"code","238770cb":"code","52dcb53f":"code","9709b6b1":"code","8ce08eb5":"code","b5fd0711":"code","057ce42f":"code","60bf1c53":"code","9a8ac618":"code","44cb682a":"code","ce834ca2":"code","65ea41c3":"code","8bb858fd":"markdown","7fc06356":"markdown","88ea5fa6":"markdown"},"source":{"3305bb7e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nfrom statsmodels.tsa.stattools import adfuller","cc653612":"# Importing DJIA index data for checking stationarity\ntime_series_data=pd.read_csv('..\/input\/dataset-financial\/DJIA_table.csv',parse_dates=[0],usecols=['Date','Adj Close'],date_parser=lambda x: pd.datetime.strptime(x,'%Y-%m-%d'))\n# Setting 'Date' as the index of dataframe\ntime_series_data.set_index('Date',inplace=True)\ntime_series_data.reindex()\ntime_series_data.sort_index(ascending=True, inplace=True)\n# Have a look at the data\ntime_series_data['Direction'] = np.where(time_series_data['Adj Close'].shift(-5) <= time_series_data['Adj Close'], 0, 1)\ntime_series_data=time_series_data.loc['2011-04-01':'2015-04-01']\ntime_series_data.dropna(inplace=True)\n#time_series_data.sort_index(ascending=True, inplace=True)\n#time_series_data.fillna(method='ffill',inplace=True)\ntime_series_data.drop(['Adj Close'],axis=1,inplace=True)\ntime_series_data.head()\nprint(time_series_data['Direction'])","f29ff93c":"# Defining ACF and PACF plot functions-\ndef ACF_plot(data,title):\n    plot_acf(data,lags=20)\n    plt.title(title)\n    plt.show()\ndef PACF_plot(data,title):\n    plot_pacf(data,lags=20)\n    plt.title(title)\n    plt.show()","238770cb":"ACF_plot(time_series_data,'DJIA index ACF plot')\nPACF_plot(time_series_data,'DJIA index PACF plot')","52dcb53f":"articles = pd.read_csv('..\/input\/dataset-financial\/all_results.csv')\n\narticles.Date = pd.to_datetime(articles.Date, format='%d\/%m\/%Y %H:%M:%S')\n\narticles.set_index('Date', inplace=True)\narticles.reindex()\narticles.sort_index(ascending=True, inplace=True)\narticles.drop(columns=['Original', 'Original', 'TotalWords', 'TotalSentimentWords', 'Id', 'Anger',\n                           'Anticipation', 'Disgust', 'Fear', 'Joy', 'Sadness', 'Surprise', 'Trust'], inplace=True)\n\n#print(articles.head())\n#articles['Calculated']=articles['Calculated']*1000\narticles['Calculated'] = articles['Calculated'].apply(lambda x: (x-3)\/2)\n#articles['Calculated'] = articles['Calculated'].apply(lambda x: 1 if x>0 else -1)\n\n#articles.fillna(value=0,inplace=True)\n\narticles = articles.groupby(pd.Grouper(freq = 'D')).mean()\narticles=articles.loc['2011-04-01':'2015-04-01']\narticles.fillna(value=0,inplace=True)\n#articles['Calculated'] = articles['Calculated'].apply(lambda x: 1 if x>0 else 0)\nprint(articles.isna().sum())\nprint(articles)\n#articles.reindex()\n#articles.sort_index(ascending=True, inplace=True)\n\narticles.head()","9709b6b1":"ACF_plot(articles,'Sentiment Attitudes ACF plot')\nPACF_plot(articles,'Sentiment Attitudes PACF plot')","8ce08eb5":"# ADF test for checking stationarity:\ndef adf_test(data,title,name):\n    print('Results of Augmented Dickey Fuller Test for {}:'.format(title))\n    dftest = adfuller(data[name], autolag='AIC')\n\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n\n    print(dfoutput)\ndef import_time_series_data(stock_name):\n    # Importing DJIA index data for checking stationarity\n    time_series_data=pd.read_csv('..\/input\/quandl-time-series-data\/{}_quandl_stock.csv'.format(stock_name),parse_dates=[0],usecols=['date','Close'],date_parser=lambda x: pd.datetime.strptime(x,'%Y-%m-%d'))\n    # Setting 'Date' as the index of dataframe\n    time_series_data.set_index('date',inplace=True)\n    time_series_data.reindex()\n    time_series_data.sort_index(ascending=True, inplace=True)\n    time_series_data['Close'].plot(figsize=(15,6))\n    articles.plot(figsize=(15,6))\n    plt.show()\n    # Have a look at the data\n    time_series_data['Direction'] = np.where(time_series_data['Close'].shift(-5) <= time_series_data['Close'], 0, 1)\n    #time_series_data['Direction']=time_series_data['Close']\n    time_series_data.drop(['Close'],axis=1,inplace=True)\n    time_series_data=time_series_data.loc['2011-04-01':'2015-04-01']\n    time_series_data.sort_index(ascending=True, inplace=True)\n    #time_series_data.fillna(value=,inplace=True)\n    \n    return time_series_data","b5fd0711":"x1= list(range(10,20))\nplt.plot(x1,label='sample')\nplt.plot([i**2 for i in x1],label='my anme is')\nplt.legend()\nplt.show()","057ce42f":"DJIA_time_series=time_series_data\nadf_test(DJIA_time_series,'DJIA index','Direction')\nAAPL_time_series=import_time_series_data('AAPL')\nadf_test(AAPL_time_series,'AAPL','Direction')\nGOOGL_time_series=import_time_series_data('GOOGL')\nadf_test(GOOGL_time_series,'GOOGL','Direction')\nJPM_time_series=import_time_series_data('JPM')\nadf_test(JPM_time_series,'JPM','Direction')\nHPQ_time_series=import_time_series_data('HPQ')\nadf_test(HPQ_time_series,'HPQ','Direction')\n\n","60bf1c53":"def cross_correlation(x,y,title):\n    plt.xcorr(x,y,maxlags=20,)\n    plt.title(title)\n    plt.show()","9a8ac618":"# importing S&p data\n# Importing DJIA index data for checking stationarity\nspy=pd.read_csv('..\/input\/dataset-financial\/spy.csv',parse_dates=[0],usecols=['Date','Value'],date_parser=lambda x: pd.datetime.strptime(x,'%d\/%m\/%Y'))\n# Setting 'Date' as the index of dataframe\nspy.set_index('Date',inplace=True)\nspy.reindex()\nspy.sort_index(ascending=True, inplace=True)\n# Have a look at the data\nspy['Direction'] = np.where(spy['Value'].shift(-5) <= spy['Value'], 0, 1)\nspy=spy.loc['2011-04-01':'2015-04-01']\nspy.dropna(inplace=True)\n#time_series_data.sort_index(ascending=True, inplace=True)\n#time_series_data.fillna(method='ffill',inplace=True)\nspy.drop(['Value'],axis=1,inplace=True)\nspy.head()\nprint(spy['Direction'])","44cb682a":"# for financial news 1.\nspy1=spy.loc['2011-04-01':'2011-12-26']\nfinancial_news_1=articles.loc[spy1.index]\nprint(spy1.shape,financial_news_1.shape)\ncross_correlation(financial_news_1.values.flatten(),spy1.values.flatten(),'Sentiment attitude (FT-1) && S&P 500')\n\n# financial news 2\nspy2=spy.loc['2014-04-01':'2014-10-26']\nfinancial_news_2=articles.loc[spy2.index]\nprint(spy2.shape,financial_news_2.shape)\ncross_correlation(financial_news_2.values.flatten(),spy2.values.flatten(),'Sentiment attitude (FT-2) && S&P 500')\n\n# financial news 3\nspy3=spy.loc['2014-10-26':'2015-3-08']\nfinancial_news_3=articles.loc[spy3.index]\nprint(spy3.shape,financial_news_3.shape)\ncross_correlation(financial_news_3.values.flatten(),spy3.values.flatten(),'Sentiment attitude (FT-3) && S&P 500')","ce834ca2":"# Granger causality test\nfrom statsmodels.tsa.stattools import grangercausalitytests\ndef granger_causality(stock,sentiment,stock_name):\n    print('Sentiment causing price of {} stock'.format(stock_name))\n    grangercausalitytests(np.hstack([stock,sentiment]),maxlag=2,verbose=0.25)\n    print('\\nPrice of {} stock causing sentiment'.format(stock_name))\n    grangercausalitytests(np.hstack([sentiment,stock]),maxlag=2,verbose=0.25)","65ea41c3":"ft1_dates=articles.loc['2011-04-01':'2011-12-25'].index\nstocktoseries={'AAPL':AAPL_time_series,\n              'GOOGL':GOOGL_time_series,\n              'SPY':spy,\n              'JPM':JPM_time_series,\n              'HPQ':HPQ_time_series}\nstocks=['AAPL','GOOGL','SPY','JPM','HPQ']\nstocks=['HPQ']\nfor stock in stocks:\n    dates=stocktoseries[stock].loc['2011-04-01':'2011-12-25'].index\n    stock_data=stocktoseries[stock].loc['2011-04-01':'2011-12-25'].values\n    sentiment_data=articles.loc[dates].values\n    #print(np.hstack([stock_data,sentiment_data]))\n    granger_causality(stock_data,sentiment_data,stock)\n    \n    \n    \n","8bb858fd":"# Cross correlation function results","7fc06356":"# Augmented dickey fuller test","88ea5fa6":"# ACF and PACF for DJIA and sentiment attitude"}}