{"cell_type":{"4dc801b0":"code","fa7ebe1f":"code","acf81efc":"code","ace95c7a":"code","d52456b1":"code","77996ae1":"code","74692125":"code","33e70bc2":"code","4a1d6e81":"code","4cb4f0b2":"code","321bb3fd":"code","c52647cd":"code","d6813215":"code","c3483891":"code","bbb4df1d":"code","f9c70bf9":"code","3b5f20c9":"code","f693f781":"code","6868b869":"code","3dd07e89":"code","b7ae7447":"code","685850cc":"code","8ff893ae":"markdown","df606076":"markdown","39ac92c6":"markdown","bf8e4045":"markdown","f209cafb":"markdown","6a2409bf":"markdown","e0fc1529":"markdown"},"source":{"4dc801b0":"#Thomas Yong 18224296, Lena Stolz 17210577\n# Excecutes to end without errror ( https:\/\/www.kaggle.com\/tjyong\/cs4287-prj2-18224296-17210577)\n#https:\/\/www.kaggle.com\/marinovik\/recognizing-traffic-signals-with-keras-cnn\/notebook","fa7ebe1f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport keras\nimport cv2\nfrom matplotlib import pyplot\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, array_to_img, load_img\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport time\nimport os\nimport warnings\nimport pathlib\n\n\nwarnings.filterwarnings(\"ignore\")","acf81efc":"# We will time our model\nstart = time.time()\n\ninput_path = \"..\/input\/gtsrb-german-traffic-sign\/\"\ntrain_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\n\nimage_data = []\nimage_labels = []\n\n# Number of total classes\ntotal_classes = 43\n\n# Dimensions of our images\nheight = 32\nwidth = 32\nchannels = 3","ace95c7a":"NUM_CATEGORIES = len(os.listdir(train_path))\nNUM_CATEGORIES","d52456b1":"# Load the images from the correct path\nfor i in range(total_classes):\n    path = input_path + \"Train\/\" + str(i)\n    images = os.listdir(path)\n    \n    for img in images:\n        try:\n            image = cv2.imread(path + '\/' + img)\n            image_fromarray = Image.fromarray(image, \"RGB\")\n            resize_image = image_fromarray.resize((height, width))\n            image_data.append(np.array(resize_image))\n            image_labels.append(i)\n        except:\n            print(\"Error in Image loading\")\n            \n# Converting lists into numpy arrays\nimage_data = np.array(image_data)\nimage_labels = np.array(image_labels)\n\n# Time taken to load our images in seconds\nend = time.time()\nprint(\"Time taken: \", round(end-start, 5), \"seconds\")","77996ae1":"# Visualizing all the different Signs\nimg_dir = pathlib.Path(train_path)\nplt.figure(figsize=(14,14))\nindex = 0\nfor i in range(NUM_CATEGORIES):\n    plt.subplot(7, 7, i+1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    sign = list(img_dir.glob(f'{i}\/*'))[0]\n    img = load_img(sign, target_size=(width, height))\n    plt.imshow(img)\nplt.show()","74692125":"# Dictionary to map classes.\nclasses = { \n    0:'Speed limit (20km\/h)',\n    1:'Speed limit (30km\/h)', \n    2:'Speed limit (50km\/h)', \n    3:'Speed limit (60km\/h)', \n    4:'Speed limit (70km\/h)', \n    5:'Speed limit (80km\/h)', \n    6:'End of speed limit (80km\/h)', \n    7:'Speed limit (100km\/h)', \n    8:'Speed limit (120km\/h)', \n    9:'No passing', \n    10:'No passing veh over 3.5 tons', \n    11:'Right-of-way at intersection', \n    12:'Priority road', \n    13:'Yield', \n    14:'Stop', \n    15:'No vehicles', \n    16:'Veh > 3.5 tons prohibited', \n    17:'No entry', \n    18:'General caution', \n    19:'Dangerous curve left', \n    20:'Dangerous curve right', \n    21:'Double curve', \n    22:'Bumpy road', \n    23:'Slippery road', \n    24:'Road narrows on the right', \n    25:'Road work', \n    26:'Traffic signals', \n    27:'Pedestrians', \n    28:'Children crossing', \n    29:'Bicycles crossing', \n    30:'Beware of ice\/snow',\n    31:'Wild animals crossing', \n    32:'End speed + passing limits', \n    33:'Turn right ahead', \n    34:'Turn left ahead', \n    35:'Ahead only', \n    36:'Go straight or right', \n    37:'Go straight or left', \n    38:'Keep right', \n    39:'Keep left', \n    40:'Roundabout mandatory', \n    41:'End of no passing', \n    42:'End no passing veh > 3.5 tons'\n          }","33e70bc2":"folders = os.listdir(train_path)\n\n\ntrain_number = []\nclass_num = []\n\nfor folder in folders:\n    train_files = os.listdir(train_path + '\/' + folder)\n    train_number.append(len(train_files))\n    class_num.append(classes[int(folder)])\n\n\n\nplt.figure(figsize=(21,10))  \nplt.bar(class_num, train_number)\nplt.xticks(class_num, rotation='vertical')\nplt.show()","4a1d6e81":"# Shuffling data\nshuffle_indexes = np.arange(image_data.shape[0])\nnp.random.shuffle(shuffle_indexes)\n\nimage_data = image_data[shuffle_indexes]\nimage_labels = image_labels[shuffle_indexes]","4cb4f0b2":"# Splitting training and testing dataset\nX_train, X_valid, y_train, y_valid = train_test_split(image_data, image_labels, test_size=0.2,\n                                                     random_state=2666, shuffle=True)\n\n# Scale the values between 0 and 1\nX_train = X_train \/ 255\nX_valid = X_valid \/ 255\n\n# The dimensions concur\nprint(\"X_train.shape\", X_train.shape)\nprint(\"X_valid.shape\", X_valid.shape)\nprint(\"y_train.shape\", y_train.shape)\nprint(\"y_valid.shape\", y_valid.shape)","321bb3fd":"# Converting the labels into one hot encoding\ny_train = keras.utils.to_categorical(y_train, total_classes)\ny_valid = keras.utils.to_categorical(y_valid, total_classes)\n\n# The dimensions concur\nprint(y_train.shape)\nprint(y_valid.shape)","c52647cd":"keras.backend.clear_session() # Clearing previous session if there was any\nnp.random.seed(2666)","d6813215":"# Create our model with Keras is straightforward\nmodel = keras.models.Sequential([\n    keras.layers.Conv2D(filters=18, kernel_size=(5,5), strides=1, activation=\"relu\", \n                        input_shape=(height, width, channels)),\n    keras.layers.MaxPooling2D(pool_size=(2,2), strides=2),\n    keras.layers.Conv2D(filters=36, kernel_size=(5,5), strides=1, activation=\"relu\"),\n    keras.layers.MaxPooling2D(pool_size=(2,2), strides=2),\n    keras.layers.Conv2D(filters=36, kernel_size=(5, 5), activation=\"relu\"),\n    keras.layers.MaxPooling2D(pool_size=(1,1)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units=72, activation=\"relu\"),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(units=43, activation=\"softmax\"),\n])\n\nmodel.summary()","c3483891":"# Compilation of our model\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n\nepochs = 20\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_valid, y_valid))\nvalidation_data = (X_valid, y_valid)","bbb4df1d":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.title('Training History')\nplt.ylabel('value')\nplt.xlabel('epoch')\nplt.grid(True)\nplt.gca().set_ylim(0, 1)\nplt.show() ","f9c70bf9":"# Testing accuracy on the reserved test set\ntest = pd.read_csv(input_path + \"\/Test.csv\")\n\nlabels = test[\"ClassId\"].values\ntest_imgs = test[\"Path\"].values","3b5f20c9":"image_index=0","f693f781":"for i in range(36):\n  plt.subplot(6,6,i+1)\n  plt.imshow(X_valid[i])","6868b869":"# How an image looks like\nimg_index = 40\nimage = Image.open(input_path + test_imgs[img_index])\nimg = image.resize((height,width))\nimg = np.array(img) \/ 255.\nimg = img.reshape(1, height, width, channels)\n\nprint(img.shape)\nprint(labels[img_index])\nplt.imshow(image)","3dd07e89":"# Prediction of this image\npred = model.predict_classes(img)[0]\nprint(pred)\n\nsign = classes[pred]\nprint(sign)","b7ae7447":"# Load and preprocess test set\nstart = time.time()\ntest = pd.read_csv(input_path + 'Test.csv')\n\nlabels = test[\"ClassId\"].values\nimgs = test[\"Path\"].values\n\ndata = []\n\nfor img in imgs:\n    try:\n        image = cv2.imread(input_path + img)\n        image_fromarray = Image.fromarray(image, 'RGB')\n        resize_image = image_fromarray.resize((height, width))\n        data.append(np.array(resize_image))\n    except:\n        print(\"Error\")\n        \nX_test = np.array(data)\nX_test = X_test \/ 255","685850cc":"# Prediction of test set\npred = model.predict_classes(X_test)\n\n#Accuracy with the test data\nprint(accuracy_score(labels, pred))\nend = time.time()\nprint(\"Time taken: \", round(end-start,5), \"seconds\")","8ff893ae":"### <a id='section2'>2. Load and format the data<\/a>","df606076":" Thomas Yong 18224296","39ac92c6":"### <a id='section3'>3. Preprocessing the data<\/a>","bf8e4045":"### <a id='section4'>4. The model<\/a>","f209cafb":"# Recognizing Traffic Signals with Keras Lenet-5 CNN","6a2409bf":"### <a id='section5'> 5. Validation of the model<\/a>","e0fc1529":"### <a id='section1'>1. Importing the necessary libraries<\/a>"}}