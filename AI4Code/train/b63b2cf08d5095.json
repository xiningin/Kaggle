{"cell_type":{"7a022e22":"code","bca44907":"code","7cc48154":"code","c0e382ec":"code","e4cb4ed7":"code","2165f75e":"code","173d7c80":"code","e4be612e":"code","a841fb95":"code","e133575e":"code","8c09c4b6":"code","85fa153a":"code","c7481547":"code","52b7e7f6":"code","4ec73433":"code","71052573":"code","790ee0f6":"code","5f707631":"code","743f049c":"code","c0e4d4db":"code","b98a958b":"code","7ccdb6cd":"code","cd5a2e9e":"code","05bcc605":"code","dda2f27a":"code","7cfa60a4":"code","48c904b8":"code","15347b26":"code","6ed4f7cb":"code","794535d9":"code","88f08e17":"code","0e2d90a4":"code","b3f5ab09":"code","9dab4562":"code","550e6ddd":"code","ecd2c147":"code","d7bcc65e":"code","95ddef74":"code","d57d3aae":"code","c6f610db":"code","d0f893ba":"code","2142cefb":"markdown","95f5ef66":"markdown","e563d3c1":"markdown","23b07790":"markdown","0a5c2a8b":"markdown"},"source":{"7a022e22":"!ls -al","bca44907":"!pip3 install pycocotools","7cc48154":"!git clone https:\/\/github.com\/dromosys\/TGS-SaltIdentification-Open-Solution-fastai\nimport sys\nsys.path.insert(0, '\/kaggle\/working\/TGS-SaltIdentification-Open-Solution-fastai')","c0e382ec":"import numpy as np\nimport pandas as pd\nimport os\nprint(os.listdir(\"\/kaggle\/input\/tgs-salt-identification-challenge\"))\nos.getcwd()","e4cb4ed7":"%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\nfrom fastai.conv_learner import *\nfrom fastai.dataset import *\nfrom fastai.models.resnet import vgg_resnet50\nfrom fastai.models.senet import *\nfrom skimage.transform import resize\nimport json\nfrom sklearn.model_selection import train_test_split, StratifiedKFold , KFold\nfrom sklearn.metrics import jaccard_similarity_score\nfrom pycocotools import mask as cocomask\nfrom utils import my_eval,intersection_over_union_thresholds,RLenc\nfrom lovasz_losses import lovasz_hinge\nprint(torch.__version__)\ntorch.cuda.is_available()\ntorch.backends.cudnn.benchmark=True","2165f75e":"MASKS_FN = 'train.csv'\nTRAIN_DN = Path('train\/images\/')\nMASKS_DN = Path('train\/masks\/')\nTEST = Path('test\/images\/')\n\nPATH = Path('\/kaggle\/input\/tgs-salt-identification-challenge\/')\nPATH128 = Path('\/tmp\/128\/')\nTMP = Path('\/tmp\/')\nMODEL = Path('\/tmp\/model\/')\nPRETRAINED = Path('\/kaggle\/input\/is-there-salt-resnet34\/model\/resnet34_issalt.h5')\nseg = pd.read_csv(PATH\/MASKS_FN).set_index('id')\nseg.head()\n\nsz = 128\nbs = 64\nnw = 4","173d7c80":"train_names_png = [TRAIN_DN\/f for f in os.listdir(PATH\/TRAIN_DN)]\ntrain_names = list(seg.index.values)\nmasks_names_png = [MASKS_DN\/f for f in os.listdir(PATH\/MASKS_DN)]\ntest_names_png = [TEST\/f for f in os.listdir(PATH\/TEST)]","e4be612e":"train_names_png[0], masks_names_png[0], test_names_png[0]","a841fb95":"TMP.mkdir(exist_ok=True)\nPATH128.mkdir(exist_ok=True)\n(PATH128\/'train').mkdir(exist_ok=True)\n(PATH128\/'test').mkdir(exist_ok=True)\n(PATH128\/MASKS_DN).mkdir(exist_ok=True)\n(PATH128\/TRAIN_DN).mkdir(exist_ok=True)\n(PATH128\/TEST).mkdir(exist_ok=True)","e133575e":"def resize_mask(fn, sz=128):\n    Image.open(PATH\/fn).resize((sz,sz)).save(PATH128\/fn)","8c09c4b6":"with ThreadPoolExecutor(4) as e: e.map(resize_mask, train_names_png)","85fa153a":"with ThreadPoolExecutor(4) as e: e.map(resize_mask, masks_names_png)","c7481547":"with ThreadPoolExecutor(4) as e: e.map(resize_mask, test_names_png)","52b7e7f6":"PATH = PATH128 #just for sanity","4ec73433":"def show_img(im, figsize=None, ax=None, alpha=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im, alpha=alpha)\n    ax.set_axis_off()\n    return ax","71052573":"from datasets import CustomDataset","790ee0f6":"def dice(pred, targs):\n    pred = (pred>0).float()\n    return 2. * (pred*targs).sum() \/ (pred+targs).sum()\n\ndef IoU_np(pred, targs, thres=0):\n    pred = (pred>thres)\n    intersection = (pred*targs).sum()\n    return intersection \/ ((pred+targs).sum() - intersection + 1.0)\n\ndef IoU(pred, targs, thres=0):\n    pred = (pred>thres).float()\n    intersection = (pred*targs).sum()\n    return intersection \/ ((pred+targs).sum() - intersection + 1.0)","5f707631":"def get_base():\n    layers = cut_model(f(True), cut)\n    return nn.Sequential(*layers)\n\ndef load_pretrained(model, path): #load a model pretrained on ship\/no-ship classification\n    weights = torch.load(PRETRAINED, map_location=lambda storage, loc: storage)\n    model.load_state_dict(weights, strict=False)\n            \n    return model","743f049c":"class SaveFeatures():\n    features=None\n    def __init__(self, m): self.hook = m.register_forward_hook(self.hook_fn)\n    def hook_fn(self, module, input, output): self.features = output\n    def remove(self): self.hook.remove()","c0e4d4db":"class UnetBlock(nn.Module):\n    def __init__(self, up_in, x_in, n_out):\n        super().__init__()\n        up_out = x_out = n_out\/\/2\n        self.x_conv  = nn.Conv2d(x_in,  x_out,  1)\n        self.tr_conv = nn.ConvTranspose2d(up_in, up_out, 2, stride=2)\n        self.bn = nn.BatchNorm2d(n_out)\n        \n    def forward(self, up_p, x_p):\n        up_p = self.tr_conv(up_p)\n        x_p = self.x_conv(x_p)\n        cat_p = torch.cat([up_p,x_p], dim=1)\n        return self.bn(F.relu(cat_p))","b98a958b":"class Unet34(nn.Module):\n    def __init__(self, rn):\n        super().__init__()\n        self.rn = rn\n        self.sfs = [SaveFeatures(rn[i]) for i in [2,4,5,6]]\n        self.up1 = UnetBlock(512,256,256)\n        self.up2 = UnetBlock(256,128,256)\n        self.up3 = UnetBlock(256,64,256)\n        self.up4 = UnetBlock(256,64,256)\n        self.up5 = nn.ConvTranspose2d(256, 1, 2, stride=2)\n        \n    def forward(self,x):\n        x = F.dropout(F.relu(self.rn(x)),0.2)\n        x = self.up1(x, self.sfs[3].features)\n        x = self.up2(x, self.sfs[2].features)\n        x = self.up3(x, self.sfs[1].features)\n        x = self.up4(x, self.sfs[0].features)\n        x = self.up5(x)\n        return x[:,0]\n    \n    def close(self):\n        for sf in self.sfs: sf.remove()","7ccdb6cd":"class UnetModel():\n    def __init__(self,model,name='unet'):\n        self.model,self.name = model,name\n\n    def get_layer_groups(self, precompute):\n        lgs = list(split_by_idxs(children(self.model.rn), [lr_cut]))\n        return lgs + [children(self.model)[1:]]","cd5a2e9e":"x_names = [f'{x}.png' for x in train_names]\nx_names_path = np.array([str(TRAIN_DN\/x) for x in x_names])\ny_names = [x for x in x_names]\ny_names_path = np.array([str(MASKS_DN\/x) for x in x_names])","05bcc605":"aug_tfms = [RandomRotate(4, tfm_y=TfmType.CLASS),\n            RandomFlip(tfm_y=TfmType.CLASS),\n            RandomLighting(0.05, 0.05, tfm_y=TfmType.CLASS)]\n# aug_tfms = []","dda2f27a":"sz","7cfa60a4":"lr=3e-3\nwd=1e-7\nlrs = np.array([lr\/100,lr\/10,lr])\n\nn_folds = 8\nout=np.zeros((18000,sz,sz))\nalpha = 0\nfor i in range(n_folds):\n    val_size = 4000\/\/n_folds\n    val_idxs=list(range(i*val_size, (i+1)*val_size))\n    ((val_x,trn_x),(val_y,trn_y)) = split_by_idx(val_idxs, x_names_path, y_names_path)\n    test_x = np.array(test_names_png)\n    \n    tfms = tfms_from_model(resnet34, sz=sz, pad=0, crop_type=CropType.NO, tfm_y=TfmType.CLASS, aug_tfms=aug_tfms)\n    datasets = ImageData.get_ds(CustomDataset, (trn_x,trn_y), (val_x,val_y), tfms, (test_x, test_x), path=PATH)\n    md = ImageData(PATH, datasets, bs=64, num_workers=nw, classes=None)\n    denorm = md.trn_ds.denorm\n    \n    f = resnet34\n    cut,lr_cut = model_meta[f]\n    m_base = load_pretrained(get_base(),PRETRAINED)\n    m = to_gpu(Unet34(m_base))\n    models = UnetModel(m)\n    learn = ConvLearner(md, models, tmp_name=TMP, models_name=MODEL)\n    learn.opt_fn=optim.Adam\n#     learn.crit=nn.BCEWithLogitsLoss()\n    learn.crit = lovasz_hinge\n    learn.metrics=[accuracy_thresh(0.5),dice, IoU]\n    \n    learn.freeze_to(2)\n#     learn.fit(lr,1)\n    learn.fit(lr,2,wds=wd,cycle_len=10,use_clr_beta=(10,10, 0.85, 0.9))\n    learn.unfreeze()\n    learn.fit(lrs, 3, wds=wd, cycle_len=10,use_clr_beta=(10,10, 0.85, 0.9))\n    print(f'computing test set: {i}')\n    out+=learn.predict(is_test=True)\n    print('Computing optimal threshold')\n    preds, targs = learn.predict_with_targs()\n    IoUs=[]\n    for a in np.arange(0, 1, 0.1):\n        IoUs.append(IoU_np(preds, targs, a))\n    IoU_max = np.array(IoUs).argmax()\n    print(f'optimal Threshold: {IoU_max\/10.0}')\n    alpha+=IoU_max\/10.0","48c904b8":"out = out\/n_folds\nalpha = alpha\/n_folds","15347b26":"fig, axes = plt.subplots(6, 6, figsize=(12, 12))\nfor i,ax in enumerate(axes.flat):\n    ax = show_img(Image.open(PATH\/test_names_png[i+30]), ax=ax)\n    show_img(out[i+30]>alpha, ax=ax, alpha=0.2)\nplt.tight_layout(pad=0.1)","6ed4f7cb":"def rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.flatten(order='F')\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","794535d9":"tmp_list = []\nname_list = []\nfor i in range(18000):\n    img = cv2.resize(out[i,:,:], dsize=(101,101), interpolation = cv2.INTER_CUBIC)\n    tmp_list.append(rle_encode(img>alpha))\n    name_list.append(test_names_png[i].name[0:-4])","88f08e17":"test_names_png[0], test_x[0]","0e2d90a4":"sub = pd.DataFrame(list(zip(name_list, tmp_list)), columns = ['id', 'rle_mask'])","b3f5ab09":"#sub.head()","9dab4562":"#name_list = ['7643966f2f', '7eab4d8284']\n#tmp_list = ['', '1807 5 1907 7 2002 19 2102 20 2201 22 2297 27 2395 30 2494 32 2592 35 2691 37 2788 41 2885 45 2985 46 3083 49 3180 53 3277 57 3374 61 3472 64 3567 70 3666 72 3765 74 3855 85 3954 87 4054 88 4153 90 4252 92 4351 94 4450 96 4549 98 4648 5453 10102 99']","550e6ddd":"#with open('name_list.txt', 'w') as f:\n#    for item in name_list:\n#        f.write(\"%s\\n\" % item)\n\n#with open('rle_mask.txt', 'w') as f:\n#    for item in tmp_list:\n#        f.write(\"%s\\n\" % item)\nsub.to_csv(\"submission.csv\", index=False)\n\nwith open('submission2.csv', 'w') as f:\n    f.write(\"ids,rle_mask\\n\")\n    for item in zip(name_list, tmp_list):\n        f.write(\"%s,%s\\n\" % (item[0], item[1]))","ecd2c147":"out","d7bcc65e":"ls","95ddef74":"rm -rf \/tmp\/model\/","d57d3aae":"rm -rf \/tmp\/128","c6f610db":"rm -rf \/kaggle\/working\/TGS-SaltIdentification-Open-Solution-fastai","d0f893ba":"!ls -al","2142cefb":"Filter with classification probabilities previously computed","95f5ef66":"Modified by KN\nhttps:\/\/www.kaggle.com\/tcapelle\/tgs-fastai-resnet34-unet","e563d3c1":"# Optimal threshold finder","23b07790":"# UNET","0a5c2a8b":"# Predict"}}