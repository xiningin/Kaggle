{"cell_type":{"ee885639":"code","c953e70f":"code","75c405bf":"code","593bd7c1":"code","e49f3f26":"code","95deb62f":"code","cd00b523":"code","22bd3425":"code","998fa8fd":"code","bf65c06b":"code","3c3b16fa":"code","9b9070c1":"code","98738594":"code","1ba63f95":"code","aed85763":"code","ae7bb274":"code","8f5183de":"code","cdb9efd2":"code","cef557f4":"code","1fd8ac02":"code","320230f0":"code","9d191e0a":"code","214614c6":"code","bb43235c":"code","0f94def8":"code","78b72a8b":"markdown","a76fde1b":"markdown","20a1dd79":"markdown","d0a94286":"markdown","858ce8de":"markdown","d14764b2":"markdown","13f0ab1e":"markdown","9015280d":"markdown","84a540df":"markdown","5359da0a":"markdown","f2d52cdd":"markdown","a93131fa":"markdown","c436bd3d":"markdown","486d0673":"markdown","d0c1e9c3":"markdown","96627117":"markdown","a9b94704":"markdown","d93e37ca":"markdown","85d9d844":"markdown","dbea2780":"markdown","1b8bc353":"markdown","ebe030ac":"markdown","4942cb1c":"markdown","64bcf52f":"markdown","6c45cf6c":"markdown","dab95925":"markdown","1dbcda1c":"markdown"},"source":{"ee885639":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c953e70f":"!pip install dplython","75c405bf":"!pip install plydata","593bd7c1":"import dplython as dpl\nfrom dplython import (DplyFrame, \n                      X, \n                      diamonds, \n                      dfilter,\n                      select,\n                      sift, \n                      sample_n,\n                      sample_frac, \n                      head, \n                      arrange,\n                      mutate,\n                      nrow,\n                      group_by,\n                      summarize, \n                      DelayFunction) ","e49f3f26":"head(diamonds,3)","95deb62f":"type(diamonds)","cd00b523":"nrow(diamonds)","22bd3425":"priceCutWise = diamonds.groupby(\"cut\")[\"price\"].mean()\npriceCutWise","998fa8fd":"diamondCol = select(diamonds,X.carat, X.cut,X.color,X.clarity,\n                                X.depth,X.table,X.price)\ndiamondCol.head(5)","bf65c06b":"diamondCol = diamonds >> select(X.carat, X.cut,X.color,X.clarity,\n                                X.depth,X.table,X.price)\ndiamondCol.head(5)","3c3b16fa":"diamonds.describe()","9b9070c1":"filteredData = dfilter(diamonds, X.carat > 0.5, X.price > 950)\nfilteredData.head()","98738594":"# Filtering the data using pipe operators \nfilteredData = diamonds >> dfilter( X.carat > 0.5, X.price > 950)\nfilteredData.head()","1ba63f95":"sortedData = arrange(diamonds, X.carat, X.cut)\nsortedData.head()","aed85763":"groupd = group_by(diamonds,X.cut,X.color)\nsummaryVal = summarize(groupd,meanval=X.price.mean())\nsummaryVal","ae7bb274":"filteredData = sift(diamonds, X.carat > 0.5, X.price > 950)\nfilteredData.head()","8f5183de":"import plydata as pldt","cdb9efd2":"diamondCol = pldt.select(diamonds,\"carat\", \"cut\",\"color\",\"clarity\",\n                                \"depth\",\"table\",\"price\")\ndiamondCol.head(5)","cef557f4":"diamondCol = diamonds >> pldt.select(\"carat\", \"cut\",\"color\",\"clarity\",\n                                \"depth\",\"table\",\"price\")\ndiamondCol.head(5)","1fd8ac02":"filteredData = pldt.query(diamonds, \"carat > 0.5 & price > 950\")\nfilteredData.head()\n","320230f0":"# Filtering the data using pipe operators \nfilteredData = diamonds >> pldt.query(\"carat > 0.5 & price > 950\")\nfilteredData.head()","9d191e0a":"\nsortedData = pldt.arrange(diamonds, \"carat\", \"cut\")\nsortedData.head()","214614c6":"sortedData = diamonds >> pldt.arrange( \"carat\", \"cut\")\nsortedData.head()","bb43235c":"groupd = pldt.group_by(diamonds,\"cut\",\"color\")\nsummaryVal = pldt.summarize(groupd,meanval=\"np.mean(price)\")\nsummaryVal","0f94def8":"summaryVal = diamonds >> pldt.group_by(\"cut\",\"color\") >> pldt.summarize(meanval=\"np.mean(price)\")\nsummaryVal","78b72a8b":"### Using pipe operator","a76fde1b":"### We are going to discuss following in this tutorial using packages dplython and plydata\n\n- Data column selection\n- Data Filtering\n- Data Sorting\n- Data Summarization\n\nWe are going to explore dataset diamonds. diamonds dataset is inbuilt in package dplython.","20a1dd79":"# Dplython\n\nPackage dplython is dplyr for Python users. It provide infinite functionality for data preprocessing. Dplython datastructure **DplyFrame**, which has been written on Pandas **DataFrame**. With **DplyFrame**, every method defined on Pandas DataFrame, works. Following are some methods defined in Dplython package. \n\n- select : Select columns by their name.\n- arrange : Use to sort data.\n- dfilter : Data filtering can be done using dfilter.\n- mutate : Add new variables using function on existing columns.\n- summarize : Function to use summarizing data.","d0a94286":"Best part of using package **dplython** is that, the pipe operator **>>** can be used. What is pipe operator? Pipe operator can pipeline output of one operation to another operator in pipeline.  ","858ce8de":"### Pandas methods on DplyFrame objects.\n\nSince DplyR has been written on Pandas DataFrame, hence, all the function of DataFrame are available with DplyFrame too. In following code cell, let us see that how Pandas Dataframe are working with DplyFrame object.","d14764b2":"You are going to be amazed that on dataset **diamonds**, head() function of R can be apply in python environment in R style as in following code cell. This function is not R function here, but provided by dplython package.","13f0ab1e":"### Selecting some column \n\n### Select column carat\tcut\tcolor\tclarity\tdepth\ttable\tprice","9015280d":"# plydata package \n\nThis is a library for data manupulation in python. It is also based on R programming dplyr package. In plydata, **>>** is used as pipe operator same as dplython. Using plydata package we are going to explore following operations on diamonds data. \n\n- Data column selection\n- Data Filtering\n- Data Sorting\n- Data Summarization\n\nThere are many functionality in plydata package. But we are going to use the following functions. \n\n- select\n- query\n- arrange\n- group_by\n- summarize","84a540df":"### Filtering data from diamonds DplyFrame\n#### Get the data where caret > 0.5 and price > 950","5359da0a":"### Filtering data from diamonds DplyFrame\n#### Get the data where caret > 0.5 and price > 950","f2d52cdd":"### Data sorting on diamonds DplyFrame\n#### Sort the diamond data increasing order on carat and cut\n","a93131fa":"# Dplyr\n\nEvery R programming user might have used package tidyverse. The package dplyr is an important member of package tidyverse. This package is used for data preprocessing. Using package dplyr, user can perform data filtering, column selection, data mutation and many tasks related to data preprocessing.","c436bd3d":"## Installing Dplython using pip","486d0673":"### Selecting some column \n\n### Select column carat\tcut\tcolor\tclarity\tdepth\ttable\tprice","d0c1e9c3":"#### How many data row is there in diamonds dataset?\n\nPackage dplython, consists of a function nrow(). Function nrow() will return total number of rows in a **DplyFrame**","96627117":"### Importing required functionality from dplython package","a9b94704":"### Using pipe operator","d93e37ca":"#### What is datatype of diamonds ? \n\nPython provide a function type(), to get the class of an object. ","85d9d844":"### Data summarization using pipe","dbea2780":"### Summarizing the data\n\n#### Get the mean value of price grouped on cut and color of diamond.\n\nplydata provides group_by() function to group the data. Function group_by() makes method summarize() very powerful. You might be thinking that, usefulness of method summarize(). Method summarize() is used to summarize the data and provide summarized value of data like mean, median, variance, sum etc.","1b8bc353":"### Data Aggregation on DplyFrame using Pandas DataFrame methods\n\n#### Calculate the price of diamonds where data is grouped on cut.","ebe030ac":"### Data sorting on diamonds DplyFrame\n#### Sort the diamond data increasing order on carat and cut","4942cb1c":"### Github link for dplython\n\nhttps:\/\/github.com\/dodger487\/dplython\n\n### Github link for plydata\n\nhttps:\/\/github.com\/has2k1\/plydata","64bcf52f":"# Introduction\n\nGenerally real world dataset will require data preprocessing before data modeling or creating machine learning models. In Python, Pandas is most popular tool for data preprocessing. But there are other package which is useful in data preprocessing like : dplython, numpy and many more packages. In this kernel, we are going to discuss two Python packages for data preprocessing.\n\n- **Dplython**\n- **plydata**","6c45cf6c":"# If you have enjoyed this kernel then kindly upvote it.","dab95925":"### Filtering the data using shift function. \n#### Get the data where caret > 0.5 and price > 950","1dbcda1c":"### Summarizing the data\n\n#### Get the mean value of price grouped on cut and color of diamond.\n\ndplython provides group_by() function to group the data. Function group_by() makes method summarize() very powerful. You might be thinking that, usefulness of method summarize(). Method summarize() is used to summarize the data and provide summarized value of data like mean, median, variance, sum etc."}}