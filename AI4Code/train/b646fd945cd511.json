{"cell_type":{"fda37ea3":"code","8698e990":"code","c0e0922c":"code","b982f2d6":"code","e9c6b15e":"markdown"},"source":{"fda37ea3":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8698e990":"from sklearn.linear_model import LinearRegression\n","c0e0922c":"m = 100\n# 100 tane dataset b\u00fcy\u00fckl\u00fc\u011f\u00fc vard\u0131r.\n\nX = 6 * np.random.rand(m, 1) - 3\nprint(X)\ny = 0.5 * X**2 + X + 2 + np.random.randn(m, 1)\nplt.figure(dpi=200)\nplt.xlabel(\"$x_1$\", fontsize=18)\nplt.ylabel('y', rotation=0, fontsize=18)\nplt.scatter(X, y)","b982f2d6":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\n#\u00f6nce pipeline ile linear regression haline getirilmesi gerekir.\n#linear i\u00e7in linespace kullan\u0131yoruz.\n#include bias false ile bias eklemiyoruz.\n#degree ile x karenin ikisini belirtiyoruz. ikinci derece olu\u015fu.\n\npolynomial_regression = Pipeline([\n        (\"poly_features\", PolynomialFeatures(degree=2, include_bias=False)),\n        (\"lin_reg\", LinearRegression()),\n    ])\n\npolynomial_regression.fit(X, y)\nX_new=np.linspace(-3, 3, 100).reshape(100, 1)\ny_newbig = polynomial_regression.predict(X_new)\nplt.figure(dpi=200)\nplt.scatter(X, y)\nplt.xlabel(\"$x_1$\", fontsize=18)\nplt.ylabel(\"$y$\", rotation=0, fontsize=18)\nplt.plot(X_new, y_newbig, \"r-\", linewidth=2, label=\"Predictions\")\nplt.legend(loc=\"upper left\", fontsize=14)","e9c6b15e":"# **Polynomial Regression**"}}