{"cell_type":{"d45bd159":"code","058a7049":"code","32f42165":"code","4fbf1558":"code","9bd89c36":"code","64734412":"code","39c5481f":"code","73879952":"code","db1265e6":"code","5c510055":"code","67f41545":"code","f0820215":"code","f0e17b84":"code","d348fdf1":"code","dbc5ae1d":"code","2edc4319":"code","adae90a4":"code","7438b499":"code","508059b8":"code","29b2f4b0":"code","6dff067b":"code","1d1f2979":"code","ca4b7801":"code","24aa238c":"code","89d35397":"code","70ceac10":"markdown","d14570e0":"markdown","4163e791":"markdown","9fd17c0e":"markdown","e873b90e":"markdown","4bdfe070":"markdown","358d8134":"markdown","395738df":"markdown","1c878925":"markdown","44d92704":"markdown","07d60e4b":"markdown","9b1f4b0a":"markdown","69f13989":"markdown","92500c70":"markdown","a59e13b4":"markdown"},"source":{"d45bd159":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Importa\u00e7\u00e3o de bibliotecas\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport datetime as dt\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n# O modulo wordcloud n\u00e3o \u00e9 nativo, descomente a linha abaixo se nao a tiver instalado\n#! pip install wordcloud\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","058a7049":"# Importando as bases de dados\n\n# ratings.csv\ndf_ratings = pd.read_csv('..\/input\/movielens-latest-small\/ratings.csv',encoding = 'utf-8')\n\n# tags.csv\ndf_tags = pd.read_csv('..\/input\/movielens-latest-small\/tags.csv',encoding = 'utf-8')\n\n# movies.csv\ndf_movies = pd.read_csv('..\/input\/movielens-latest-small\/movies.csv',encoding = 'utf-8')\n\n# links.csv\ndf_links = pd.read_csv('..\/input\/movielens-latest-small\/links.csv',encoding = 'utf-8')","32f42165":"def convert_date(df, coluna):\n\n    # Converte a quantidade de segundos para Data com Minutos\n    df[coluna] = pd.to_datetime(df[coluna], unit='s')\n\n    # Transforma no formato datetime 64\n    df[coluna] = pd.to_datetime(df[coluna], format='%Y-%m-%d')\n\n    # Cria a coluna - 'ano de avalia\u00e7\u00e3o'\n    df['Ano de Avalia\u00e7\u00e3o'] = df.timestamp.dt.year\n    return df;\n\ndef convert_title_to_year(df):\n\n    # Retira todos os espa\u00e7os da coluna \"title\"\n    df['title']= df['title'].str.rstrip()\n\n    # Cria coluna 'ano' com os \u00faltimos caracteres da coluna \"title\"\n    df['ano'] = df.title.str.slice(-5,-1,1)\n\n    # Transforma a coluna \"ano\" em inteiro\n    # Com excess\u00e3o dos filmes que n\u00e3o tenham a informa\u00e7\u00e3o do ano entre parenteses\n    # A op\u00e7\u00e3o 'coerce' faz com que valores n\u00e3o n\u00famericos sejam considerados vazios\n    df['ano'] = pd.to_numeric(df['ano'], errors='coerce')\n\n    return df;\n\ndef calc_media_contagem_rating(df):\n\n    # Agrupa as notas por movieId e calcula a respectiva m\u00e9dia de avalia\u00e7\u00e3o, contagem de avalia\u00e7\u00f5es e contagem de usuarios que fizeram avalia\u00e7\u00f5es.\n    temp = df_ratings.groupby(['movieId']).apply(lambda x: pd.Series(dict(media_ratings         =  (round(x.rating.mean(),1))\n                                                                                ,ratings_count  =  ((x.rating.count()))\n                                                                                ,user_count_rating  =  ((x.userId.nunique()))\n                                                                                ))).reset_index()\n\n    df = pd.merge(df, temp, how = 'left', on = ['movieId'])     \n\n    return df;    \n\ndef calc_contagem_tags(df):\n\n    # Agrupa por filme e calcula duas variaveis: Contagem de tags e contagem de usuarios que fizeram avaliacoes \n    temp = df_tags.groupby(['movieId']).apply(lambda x: pd.Series(dict(tags_count  =  ((x.tag.count()))\n                                                                    ,user_count_tag  =  ((x.userId.nunique()))\n                                                                    ))).reset_index()\n\n    df = pd.merge(df, temp, how = 'left', on = ['movieId'])                   \n    return df;   \n\n# Fun\u00e7\u00e3o que adiciona na tabela quais respectivos generos s\u00e3o atribuidos para cada filme\ndef colunas_genero(df):\n\n    # Cria coluna com a quantidade de generos respectivo a cada filme\n    df['qtde_generos'] = df.apply(lambda x : len(x['genres'].split(\"|\")),axis=1)\n\n    # Lista de todos os generos de filmes poss\u00edveis\n    lista = ['Action','Adventure','Animation',\"Children's\",'Comedy','Crime','Documentary','Drama','Fantasy','Film-Noir'\n                ,'Horror','Musical','Mystery','Romance','Sci-Fi','Thriller','War','Western','(no genres listed)']\n\n    # Fun\u00e7\u00e3o que atribui 1 caso o a string do g\u00eanero contenha o valor da respectiva coluna\n    def atribui_um(coluna, genre):\n        if coluna in genre:\n            return 1\n        else:\n            return 0 \n            \n    # Cria uma coluna para cada um dos generos possiveis\n    for column in lista:\n\n        # Divide a coluna \"genres\" pelo sinal \"|\" e atribui o valor um caso o genero esteja dentro dos valores para cada filme\n        df[column] = df.apply(lambda x: atribui_um(column,x['genres'].split(sep=\"|\",maxsplit=10)),axis=1)\n    \n    return df;\n\ndef colunas_diferenca_anos(df):\n    # Busca a informa\u00e7\u00e3o de ano de lan\u00e7amento do filme na tabela df_movies (aproveitando para j\u00e1 trazer o t\u00edtulo do filme)\n    df = pd.merge(df, df_movies[['movieId', 'ano', 'title']], how = 'left', on=['movieId'])\n\n    # Cria uma coluna ilustrativa a dist\u00e2ncia em anos do lan\u00e7amento do filme at\u00e9 o ano da avalia\u00e7\u00e3o\n    df['Distancia em Anos'] = df['Ano de Avalia\u00e7\u00e3o'] - df['ano'] \n\n    # Retira valores discrepantes em df_ratings\n    df = df[df['Distancia em Anos'] > -1]\n\n    return df;","4fbf1558":"# Convertendo o tipo de data no Dataframe df_ratings \ndf_ratings = convert_date(df_ratings, 'timestamp')\n\n# Convertendo o tipo de data no Dataframe df_tags \ndf_tags = convert_date(df_tags, 'timestamp')\n\n# Criando a coluna ano no Dataframe df_movies\ndf_movies = convert_title_to_year(df_movies)\n\n# Adiciona colunas com a contagem e m\u00e9dia de Ratings\ndf_movies = calc_media_contagem_rating(df_movies)\n\n# Adiciona as colunas de contagem de tags\ndf_movies = calc_contagem_tags(df_movies)\n\n# Adiciona informa\u00e7\u00e3o de genero para cada filme\ndf_movies = colunas_genero(df_movies)\n\n# Adiciona coluna referente a diferen\u00e7a de Anos entre a avalia\u00e7\u00e3o e o lan\u00e7amento do filme na tabela df_rating\ndf_ratings = colunas_diferenca_anos(df_ratings)\n\n# Adiciona coluna referente a diferen\u00e7a de Anos entre a avalia\u00e7\u00e3o e o lan\u00e7amento do filme na tabela df_tags\ndf_tags = colunas_diferenca_anos(df_tags)\n\n# Excluindo linhas em que a informa\u00e7\u00e3o de Ano do lan\u00e7amento do filme est\u00e1 faltando\ndf_movies.dropna(subset = ['ano'], inplace = True)","9bd89c36":"# Compute the correlation matrix\ncorr = round(df_movies[['media_ratings', 'ano', 'ratings_count', 'tags_count', 'qtde_generos']].corr(),1)\n\n# Plota a matriz de correla\u00e7\u00e3o\nsns.heatmap(corr, cmap=\"YlGnBu\", vmin=-0.5, vmax=0.5, annot=True);","64734412":"# Grafico de dispers\u00e3o de Ano de lan\u00e7amento por m\u00e9dia de rating\nfig = px.scatter(df_movies, x=\"ano\", y=\"media_ratings\",hover_data=['media_ratings'])\n\nfig.update_layout(\n    title='Avalia\u00e7\u00e3o M\u00e9dia dos filmes por Ano de Lan\u00e7amento',\n    xaxis_title=\"Ano de Lan\u00e7amento\",\n    yaxis_title=\"M\u00e9dia de Avalia\u00e7\u00e3o\",\n        template='plotly_white')\n\nfig.show()","39c5481f":"# Cria o objeto da figura do gr\u00e1fico\nfig = px.histogram(df_ratings,x=\"ano\",  marginal=\"violin\" )\n\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Quantidade de avalia\u00e7\u00f5es por Ano de lan\u00e7amento do filme',\n    xaxis_title=\"Ano de Lan\u00e7amento\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n    template='plotly_white')\n\n# Mostra o gr\u00e1fico\nfig.show()","73879952":"# Agrupa as tags mais rotuladas por quantidade de filmes\ntemp_ratings = df_ratings.groupby(['userId']).count().sort_values(by='userId', ascending = False)\n\n# Agrupa as tags mais rotuladas por quantidade de filmes\ntemp_tags = df_tags.groupby(['userId']).count().sort_values(by='userId', ascending = False)\n\n# Cria uma coluna temporaria para marcar como historico a base referente a avalia\u00e7\u00e3o\ntemp_ratings['flag'] = 'Atribuiu Nota'\ntemp_tags['flag'] = 'Atribuiu Rotulo'\n\n# Pilha a quantidade de avalia\u00e7\u00f5es feita por usuario em cada tipo\ntemp_final = pd.concat([temp_ratings[['movieId','flag']], temp_tags[['movieId','flag']]])\ntemp_final.rename(columns = {'movieId': 'Contagem de Avalia\u00e7\u00f5es'}, inplace = True)\n\n# Plotando grafico sobre a dispers\u00e3o da quantidade de avalia\u00e7\u00f5es e rotulos feitos por cada usuario\n\nfig = px.histogram(temp_final, x=\"Contagem de Avalia\u00e7\u00f5es\",color = 'flag', marginal=\"violin\" )\n\nfig.update_layout(\n    title='Distribui\u00e7\u00e3o da quantidade de avalia\u00e7\u00f5es feitas por cada usuario',\n    xaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n    yaxis_title=\"Quantidade de Usu\u00e1rios\",\n        template='plotly_white')\n\nfig.show()","db1265e6":"# Cria uma coluna com a string toda em UPPERCASE para diminuir eventuais diferen\u00e7as b\u00e1sicas\ndf_tags['tag_upper'] = df_tags.tag.str.upper()\n\n# Agrupa as tags mais rotuladas por quantidade de filmes\ntemp = df_tags.groupby(['tag_upper']).count().sort_values(by='movieId', ascending = False)\n\n# Plota o gr\u00e1fico de n\u00famero de ocorrencias das 20 tags mais comuns\nfig = go.Figure(data=[go.Bar(\n            x=temp[0:20].index, y=temp[0:20].userId,\n            text=temp[0:20].userId,\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Os 20 tags mais mencionadas pelos usuarios',\n    xaxis_title=\"Tag\",\n    yaxis_title=\"Quantidade de Men\u00e7\u00f5es\",\n        template='plotly_white')\n\nfig.show()","5c510055":"# Plota o boxplot das avalia\u00e7\u00f5es por ano de lan\u00e7amento do filme\nfig = px.box(df_ratings, x=\"ano\")\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title ='Distribui\u00e7\u00e3o das avalia\u00e7\u00f5es por ano de lan\u00e7amento do filme',\n    xaxis_title=\"Ano de lan\u00e7amento\")\nfig.show()\n\n# Filtra apenas filmes lan\u00e7ados a partir de 1971\ntemp = df_movies.loc[(df_movies['ano'] > 1970)]\n# Plota a distribui\u00e7\u00e3o das avalia\u00e7\u00f5es m\u00e9dias dos filmes, por ano, para os filmes lan\u00e7ados a partir de 1971\nfig = px.box(temp, x=\"ano\", y=\"media_ratings\", title ='Distribui\u00e7\u00e3o das Avalia\u00e7\u00f5es M\u00e9dias dos filmes por Ano de Lan\u00e7amento' )\nfig.show()","67f41545":"# Cria o objeto da figura do gr\u00e1fico\nfig = px.histogram(df_ratings,x=\"Distancia em Anos\",  marginal=\"violin\" )\n\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Distribui\u00e7\u00e3o das avalia\u00e7\u00f5es de filmes por tempo em anos entre o lan\u00e7amento e a avalia\u00e7\u00e3o',\n    xaxis_title=\"'Idade' do filme no momento da avalia\u00e7\u00e3o\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n    template='plotly_white')\n\n# Mostra o gr\u00e1fico\nfig.show()\n\n# Plota o boxplot da Dist\u00e2ncia em anos entre as avalia\u00e7\u00f5es dos filmes e seus respectivos anos de lan\u00e7amento ('Idade' do filme no momento da avalia\u00e7\u00e3o)\nfig = px.box(df_ratings, x=\"Distancia em Anos\")\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Distribui\u00e7\u00e3o das avalia\u00e7\u00f5es considerando a \"Idade\" do filme no momento da avalia\u00e7\u00e3o',\n    xaxis_title=\"'Idade' do filme no momento da avalia\u00e7\u00e3o\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n    template='plotly_white')\n\nfig.show()","f0820215":"# Plota boxplots das avalia\u00e7\u00f5es considerando a 'Idade' do filme no momento da avalia\u00e7\u00e3o.\nfig = px.box(df_ratings, x=\"Distancia em Anos\", y=\"rating\")\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Distribui\u00e7\u00e3o das avalia\u00e7\u00f5es considerando a \"Idade\" do filme no momento da avalia\u00e7\u00e3o',\n    xaxis_title=\"'Idade' do filme no momento da avalia\u00e7\u00e3o\",\n    yaxis_title=\"Distribui\u00e7\u00e3o de Ratings\",\n    template='plotly_white')\nfig.show()","f0e17b84":"# Busca a informa\u00e7\u00e3o de g\u00eaneros do filme\ndf_ratings = pd.merge(df_ratings, df_movies[['movieId','Action','Adventure','Animation',\"Children's\",'Comedy','Crime','Documentary','Drama','Fantasy','Film-Noir'\n                    ,'Horror','Musical','Mystery','Romance','Sci-Fi','Thriller','War','Western','(no genres listed)','qtde_generos']], how = 'left', on=['movieId'])\n\n# lista com todos os g\u00eaneros de filmes\nlista_generos = ['Action','Adventure','Animation',\"Children's\",'Comedy','Crime','Documentary','Drama','Fantasy','Film-Noir'\n                    ,'Horror','Musical','Mystery','Romance','Sci-Fi','Thriller','War','Western','(no genres listed)']\n\nmedia, qntd_avaliacoes = [],[]\n\nfor coluna in lista_generos:\n\n    # Cria um filtro para genero do filme\n    temp = df_movies[df_movies[coluna] == 1].copy()\n    temp_2 = df_ratings[df_ratings[coluna] == 1].copy()\n\n    # Atribui a variavel qntd_avaliacoes  a quantidade de avalia\u00e7\u00f5es para filmes classificados pelo genero iterado\n    qntd_avaliacoes.append(temp['ratings_count'].sum()) \n\n    # Atribui a variavel media_ratings com a m\u00e9dia de ratings para filmes classificados pelo genero iterado\n    media.append(round(temp_2['rating'].mean(), 2)) \n\ndf_temp = pd.DataFrame({'Generos':lista_generos,\n                        'Quantidade de Avalia\u00e7\u00f5es': qntd_avaliacoes,\n                        'Media de Ratings':media })","d348fdf1":"df_temp = df_temp.sort_values(by='Quantidade de Avalia\u00e7\u00f5es',ascending=False)\n\n#Plota a quantidade de avalia\u00e7\u00f5es por g\u00eanero\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.Generos, y=df_temp['Quantidade de Avalia\u00e7\u00f5es'],\n            text=df_temp['Quantidade de Avalia\u00e7\u00f5es'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Quantidade de Avalia\u00e7\u00f5es por G\u00eanero',\n    xaxis_title=\"G\u00eanero\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n        template='plotly_white')\n\nfig.show()\n\ndf_temp = df_temp.sort_values(by='Media de Ratings',ascending=False)\n\n#Plota a avalia\u00e7\u00e3o m\u00e9dia por g\u00eanero\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.Generos, y=df_temp['Media de Ratings'],\n            text=df_temp['Media de Ratings'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='M\u00e9dia das Avalia\u00e7\u00f5es por G\u00eanero',\n    xaxis_title=\"G\u00eanero\",\n    yaxis_title=\"Rating\",\n        template='plotly_white')\n\nfig.show()","dbc5ae1d":"# Agrupa para sabermos quais filmes tiveram a maior quantidade de tags atribu\u00eddas\ntemp = df_tags.groupby(['title']).count().sort_values(by='movieId', ascending = False)\n\n#Plota o gr\u00e1fico de dos 20 filmes com mais tags atribu\u00eddas\nfig = go.Figure(data=[go.Bar(\n            x=temp[0:20].index, y=temp[0:20].userId,\n            text=temp[0:20].userId,\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Os 20 filmes com mais tags',\n    xaxis_title=\"Filme\",\n    yaxis_title=\"Quantidade de Tags\",\n        template='plotly_white')\n\nfig.show()","2edc4319":"# Utilizando lista de stopwords j\u00e1 dispon\u00edveis na biblioteca wordcloud\nstopwords = set(STOPWORDS)\n\ndef word_cloud_f(df,movie_name):\n    # Filtra apenas o filme de interesse\n    top_tags = df.loc[(df['title'] == movie_name)]\n\n    # Junta todas as tags atribu\u00eddas\n    all_tags = \"\".join(tag for tag in top_tags['tag_upper'])\n\n    # Vamos ver a quantidade de palavras atribu\u00eddas por todas as tags para o filme selecionado\n    print(\"Total de palavras: {}\".format(len(all_tags)))\n\n    # Gerando uma wordcloud\n    wordcloud = WordCloud(stopwords=stopwords,\n                        background_color = \"black\",\n                        width=1600,\n                        height=800).generate(all_tags)\n\n    # Mostrando a nossa wordcloud\n    fig, ax = plt.subplots(figsize=(10,6))\n    ax.imshow(wordcloud, interpolation='bilinear')\n    ax.set_axis_off()\n\n    plt.imshow(wordcloud)","adae90a4":"#Plotando a nossa wordcloud para o filme que mais teve tags atribu\u00eddas (de longe): Pulp Fiction (1994)\nword_cloud_f(df_tags,'Pulp Fiction (1994)')","7438b499":"#Plotando a nossa wordcloud para o 2\u00ba filme com mais tags atribu\u00eddas: Fight Club (1999)\nword_cloud_f(df_tags,'Fight Club (1999)')","508059b8":"#Plotando a nossa wordcloud para o 3\u00ba filme com mais tags atribu\u00eddas: 2001: A Space Odyssey (1968)\nword_cloud_f(df_tags,'2001: A Space Odyssey (1968)')","29b2f4b0":"df_temp = df_movies.sort_values(by='media_ratings',ascending=False)\n\ndf_temp = df_temp [0:20]\n\n# Plota o gr\u00e1fico dos 20 filmes de melhor rating m\u00e9dio\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.title, y=df_temp['media_ratings'],\n            text=df_temp['media_ratings'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Top 20 Filmes com melhores Avalia\u00e7\u00f5es M\u00e9dias',\n    xaxis_title=\"Genero\",\n    yaxis_title=\"Rating M\u00e9dio\",\n        template='plotly_white')\n\nfig.show()\n\n\ndf_temp = df_movies.sort_values(by='ratings_count',ascending=False)\n\ndf_temp = df_temp [0:20]\n\n# Plota o gr\u00e1fico de n\u00famero de avalia\u00e7\u00f5es dos 20 filmes com a maior quantidade de avalia\u00e7\u00f5es\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.title, y=df_temp['ratings_count'],\n            text=df_temp['ratings_count'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Top 20 Filmes mais avaliados',\n    xaxis_title=\"Filme\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n        template='plotly_white')\n\nfig.show()","6dff067b":"# Refazendo os top 20 filmes com melhor rating m\u00e9dio, considerando apenas os que tiveram mais de 50 avalia\u00e7\u00f5es\ndf_temp = df_movies[df_movies['ratings_count'] > 50].sort_values(by='media_ratings',ascending=False)\n\ndf_temp = df_temp [0:20]\n\n#Plota o gr\u00e1fico dos 20 filmes de melhor rating m\u00e9dio, e mais de 50 avalia\u00e7\u00f5es\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.title, y=df_temp['media_ratings'],\n            text=df_temp['media_ratings'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\nfig.update_layout(\n    title='Top 20 Filmes com melhores Avalia\u00e7\u00f5es M\u00e9dias (e avalia\u00e7\u00f5es totais > 50)',\n    xaxis_title=\"G\u00eanero\",\n    yaxis_title=\"Rating M\u00e9dio\",\n        template='plotly_white')\n\nfig.show()","1d1f2979":"# Plota a m\u00e9dia de avalia\u00e7\u00e3o x quantidade de avalia\u00e7\u00f5es dos filmes nos nossos datasets\nfig = px.scatter(df_movies, x=\"media_ratings\", y=\"ratings_count\",hover_data=['media_ratings'])\n\nfig.update_layout(\n    title='Quantidade de avalia\u00e7\u00f5es por M\u00e9dia de avalia\u00e7\u00e3o',\n    xaxis_title=\"M\u00e9dia de Avalia\u00e7\u00e3o\",\n    yaxis_title=\"Quantidade de Avalia\u00e7\u00f5es\",\n        template='plotly_white')\n\nfig.show()","ca4b7801":"# Computando o total de intera\u00e7\u00f5es\/engajamento de cada filme: ratings recebidas + tags atribu\u00eddas\ndf_movies['interacoes_totais'] = df_movies['ratings_count'].replace(np.nan, 0) + df_movies['tags_count'].replace(np.nan, 0)\n\n# ordenando os filmes considerando a quantidade de intera\u00e7\u00f5es (tags + ratings) em ordem decrescente\ndf_temp = df_movies.sort_values(by='interacoes_totais',ascending=False)\n\ndf_temp = df_temp [0:20]\n\n#Plota o gr\u00e1fico de total de intera\u00e7\u00f5es (tags + avalia\u00e7\u00f5es) para os 20 primeiros filmes da lista\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.title, y=df_temp['interacoes_totais'],\n            text=df_temp['interacoes_totais'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Top 20 Filmes com maior n\u00famero de intera\u00e7\u00f5es',\n    xaxis_title=\"Filme\",\n    yaxis_title=\"Quantidade de Intera\u00e7\u00f5es (Ratings + Tags atribu\u00eddas)\",\n        template='plotly_white')\n\nfig.show()","24aa238c":"# Busca a informa\u00e7\u00e3o de quantidade de intera\u00e7\u00f5es (atribui\u00e7\u00e3o de rating e\/ou tag)\ndf_ratings = pd.merge(df_ratings, df_movies[['movieId','interacoes_totais']], how = 'left', on=['movieId'])\n\n# Filtra apenas os 20 primeiros filmes com maior engajamento\ntemp = df_ratings.loc[(df_ratings['interacoes_totais'] >= 203)]\n\n# Plota boxplots das avalia\u00e7\u00f5es considerandoos 20 filmes com maior intera\u00e7\u00e3o\nfig = px.box(temp, x=\"title\", y=\"rating\")\n\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title=\"Distribui\u00e7\u00e3o das avalia\u00e7\u00f5es para os 20 filmes com maior n\u00famero de intera\u00e7\u00f5es (Seja por rating ou por tag atribu\u00edda)\",\n    xaxis_title=\"T\u00edtulo do filme\",\n    yaxis_title=\"Distribui\u00e7\u00e3o de Ratings\",\n    template='plotly_white')\n    \nfig.show()","89d35397":"# Refazendo os top 20 filmes com melhor rating m\u00e9dio, considerando apenas os 20 filmes com maior n\u00famero de intera\u00e7\u00f5es\ndf_temp = df_movies[df_movies['interacoes_totais'] >= 203].sort_values(by='media_ratings',ascending=False)\n\ndf_temp = df_temp[0:20]\n\n#Plota o gr\u00e1fico de avalia\u00e7\u00e3o m\u00e9dia dos 20 filmes com maior engajamento\nfig = go.Figure(data=[go.Bar(\n            x=df_temp.title, y=df_temp['media_ratings'],\n            text=df_temp['media_ratings'],\n            textposition='auto',\n            marker_color='cornflowerblue',\n        )])\n# Adiciona legenda e titulo dos eixos\nfig.update_layout(\n    title='Top 20 Filmes com maior engajamento\/intera\u00e7\u00e3o (seja por avalia\u00e7\u00e3o ou atribui\u00e7\u00e3o de tags)',\n    xaxis_title=\"T\u00edtulo do Filme\",\n    yaxis_title=\"Rating M\u00e9dio\",\n        template='plotly_white')\n\nfig.show()","70ceac10":"- #### Pergunta 7 - Qual filme teve maior quantidade de r\u00f3tulos? E quais foram os r\u00f3tulos mais atribu\u00eddos? E para o segundo filme com mais r\u00f3tulos? E o terceiro? \n\nR:\n\nComo podemos ver no gr\u00e1fico abaixo, os filmes que geraram maior engajamento dentre as classifica\u00e7\u00f5es de filmes (tags) que temos dispon\u00edveis foram: \n\n    - 1\u00ba) Pulp Fiction (1994) - 181 tags atribu\u00eddas\n\n    - 2\u00ba) Fight Club (1999) - 54 tags atribu\u00eddas\n\n    - 3\u00ba) 2001: A Space Odyssey (1968) - 41 tags atribu\u00eddas\n\nPara os demais filmes, a quantidade de tags atribu\u00eddas ao filme \u00e9 sempre menor que 40.\n\nUma vez que Pulp Fiction tem uma quantidade de tags que \u00e9 muito superior aos demais filmes, gostar\u00edamos de saber quais foram as tags (ou palavras) mais encontradas quando se fala neste filme.\n\nPor curiosidade, gostar\u00edamos de saber tamb\u00e9m quais foram as tags (ou palavras) mais atribu\u00eddas para Fight Club e 2001: A Space Odyssey.\n\nAbaixo h\u00e1 3 mapas de palavras (\"wordclouds\"), com as palavras mais recorrentes nas tags atribu\u00eddas aos top 3 filmes com mais tags atribu\u00eddas.\n\nPara Pulp Fiction (1994), algumas das palavras mais recorrentes foram:\n\n    - Violencer;\n    - Strong;\n    - Violent;\n    - Disturbing;\n    - Great Dialogue;\n    - Linear Cult;\n    - Good.\n\nPara Fight Club (1999), algumas das palavras mais recorrentes foram:\n\n    - Dark;\n    - Comedy;\n    - Psychology;\n    - Thought;\n    - Ending Dark;\n    - Provoking Twist.\n\nFinalmente, para 2001: A Space Odyssey (1968) algumas das palavras mais recorrentes foram:\n\n    - Effects;\n    - Space;\n    - Alliens.","d14570e0":"- #### Pergunta 4 - Como est\u00e3o distribu\u00eddas as avalia\u00e7\u00f5es ao longo do tempo?\n\nR:\n\nPodemos ver a partir do boxplot abaixo que filmes lan\u00e7ados at\u00e9 1970 s\u00e3o outliers quando avaliamos a quantidade de avalia\u00e7\u00f5es recebidas, o 1\u00ba quartil se encontra no ano de 1990, a Mediana est\u00e1 no ano de 1997, o 3\u00ba quartil \u00e9 o ano de 2003 e os dados s\u00e3o referentes a filmes lan\u00e7ados at\u00e9 2018.\n\nCom isso, temos que 50% das nossas avalia\u00e7\u00f5es foram feitas para filmes lan\u00e7ados de 1990 a 2003.\n\nNa sequ\u00eancia abaixo (2\u00ba gr\u00e1fico a seguir), trouxemos os boxplots das avalia\u00e7\u00f5es m\u00e9dias dos filmes cujo ano de lan\u00e7amento seja maior que 1970 (j\u00e1 que os filmes antes disso possuem pouqu\u00edssimas avalia\u00e7\u00f5es, e s\u00e3o outliers nesse sentido).\n\nDeste gr\u00e1fico conseguimos ver que as avalia\u00e7\u00f5es m\u00e9dias de filmes ao longo do tempo est\u00e1 sempre entre 3 e 4 (e a mediana das avalia\u00e7\u00f5es m\u00e9dias dos filmes por ano esteve sempre nesse intervalo), al\u00e9m disso, j\u00e1 sab\u00edamos da primeira pergunta que praticamente n\u00e3o existe correla\u00e7\u00e3o entre a avalia\u00e7\u00e3o m\u00e9dia do filme e seu ano de lan\u00e7amento.","4163e791":"# Avalia\u00e7\u00e3o Bimestral 1\n## Analise Estat\u00edstica Para Ci\u00eancia de Dados\n### Especializa\u00e7\u00e3o em Ci\u00eancia de Dados\n#### Instituto Federal de Educa\u00e7\u00e3o, Pesquisa, Ci\u00eancia e Tecnologia de S\u00e3o Paulo (IFSP) - C\u00e2mpus Campinas\n\nEste projeto foi um trabalho da p\u00f3s-gradua\u00e7\u00e3o: Especializa\u00e7\u00e3o em Ci\u00eancia de Dados, na disciplina de An\u00e1lise Estat\u00edstica para Ci\u00eancia de Dados, para composi\u00e7\u00e3o de atividades da disciplina no semestre. O trabalho consiste em an\u00e1lise explorat\u00f3ria de um conjunto de dados referentes a filmes e suas respectivas avalia\u00e7\u00f5es (e coment\u00e1rios) feitos por usu\u00e1rios.\n\nPor: \n\n**Carlos Danilo Tom\u00e9** \n\n**Lucas Galdino de Camargo** \n\n\n## **1. Especifica\u00e7\u00e3o**\n\nNesta atividade, cada dupla dever\u00e1 realizar uma an\u00e1lise explorat\u00f3ria para o conjunto de dados\nMovie Lens (small): https:\/\/grouplens.org\/datasets\/movielens, a partir de um conjunto de perguntas e\nhip\u00f3teses pr\u00e9-estabelecidas e propostas pela dupla.\n\nSeguem os crit\u00e9rios a serem avaliados. Cada crit\u00e9rio tem um conjunto de pontos que servir\u00e3o como um guia para seu desenvolvimento.","9fd17c0e":"- #### Pergunta 2 - Qual o grupo mais disperso, o de usu\u00e1rios que avaliaram ou o de usu\u00e1rios que rotularam filmes?\n\nR:\n\nComo podemos ver no pr\u00f3ximo gr\u00e1fico da s\u00e9rie, em que no eixo x temos a distribui\u00e7\u00e3o da quantidade de avalia\u00e7\u00f5es feitas por usu\u00e1rio (bem como a quantidade de atribui\u00e7\u00e3o de tags em filmes, informa\u00e7\u00e3o que vem empilhadada), e no eixo y n\u00f3s temos a quantidade de usu\u00e1rios, podemos observar que:\n\n1) H\u00e1 muito mais usu\u00e1rios que avaliaram filmes do que usu\u00e1rios que atribu\u00edram tags;\n\n2) Podemos ver que usu\u00e1rios que atribu\u00edram tags est\u00e3o bem concentrados em um range de at\u00e9 49 tags atribu\u00eddas em filmes, tendo muitos poucos usu\u00e1rios com mais de 50 tags atribu\u00eddas em filmes;\n\n3) Com isso, conclu\u00edmos que a dispers\u00e3o na quantidade de avalia\u00e7\u00f5es feitas por usu\u00e1rio \u00e9 muito maior para usu\u00e1rios que avaliaram filmes do que os usu\u00e1rios que atribu\u00edram tags;","e873b90e":"### Descri\u00e7\u00e3o dos tratamentos\n\n##### Convers\u00e3o de tipo de dados\n\n\n- **1. Transformar as datas**\n\nEsse tratamento foi utilizado nos dataframes df_rating e df_tags. O formato da vari\u00e1vel 'timestamp' nestes dataframes (em segundos, desde a meia noite de 01 de janeiro de 1970, Coordinated Universal Time (UTC), tipo int) n\u00e3o \u00e9 apropriado para manipula\u00e7\u00e3o de dados em formato de data, demandando transforma\u00e7\u00e3o.\n\n\n##### Cria\u00e7\u00e3o de Colunas\n\n- **2. Retirar do Titulo a data de lan\u00e7amento do filme**\n\nEsse tratamento foi utilizado no dataframe df_movies, inicialmente a inten\u00e7\u00e3o \u00e9 capturar a informa\u00e7\u00e3o da data de lan\u00e7amento. Essa aplica\u00e7\u00e3o est\u00e1 identificada como a fun\u00e7\u00e3o **\"convert_title_to_year\"**.\n\n\n- **3. Cria\u00e7\u00e3o das colunas: 'media_ratings', 'ratings_count' e 'user_count_rating'**\n\nEsse tratamento foi aplicado no dataframe df_movies, neste tratamento estamos adicionando tr\u00eas colunas ao dataframe principal df_movies referente \u00e0 informa\u00e7\u00f5es de ratings por filme. As colunas s\u00e3o **'media_ratings'** (m\u00e9dia de rating por filme),  **'ratings_count'** (quantidade de rating registrados por filme) e **'user_count_rating'** (quantidade de usuarios distintos que fizeram uma avalia\u00e7\u00e3o por filme). \n\nEsta aplica\u00e7\u00e3o est\u00e1 identificada pela fun\u00e7\u00e3o **'calc_media_contagem_rating'**.\n\n\n- **4. Cria\u00e7\u00e3o das colunas: tags_count e user_count_tag**\n\nEsse tratamento foi aplicado no dataframe df_movies, neste tratamento estamos adicionando duas colunas ao dataframe principal df_movies referente a informa\u00e7\u00f5es de tags por filme. As colunas s\u00e3o **'tags_count'** (quantidade de tags registradas por filme) e **'user_count_tag'** (quantidade de usuarios distintos que marcaram uma tag por filme). \n\nEsta aplica\u00e7\u00e3o esta identificada pela fun\u00e7\u00e3o **'calc_contagem_tags'**.\n\n\n- **5. Cria\u00e7\u00e3o das colunas: Booleano por tipo de genero e quantidade de generos**\n\nEsse tratamento foi aplicado no dataframe df_movies, neste tratamento estamos adicionando vinte colunas ao dataframe principal df_movies referente a informa\u00e7\u00f5es de genero e a quantidade de generos por filme. S\u00e3o 19 colunas de formato booleano adicionadas referentes \u00e0 classifica\u00e7\u00e3o do filme, se o filme estiver identificado com algum genero ele \u00e9 marcado como 1, caso contrario 0, para todos os generos **['Action','Adventure','Animation',\"Children's\",'Comedy','Crime','Documentary','Drama','Fantasy','Film-Noir','Horror','Musical','Mystery','Romance','Sci-Fi','Thriller','War','Western','(no genres listed)']** e por fim adiciona tamb\u00e9m a coluna **\"qtde_generos\"**, referente a soma de generos classificados por filme.\n\nEsta aplica\u00e7\u00e3o esta identificada pela fun\u00e7\u00e3o **'colunas_genero'**.\n\n- **6. Cria\u00e7\u00e3o da coluna: 'Distancia em Anos'**\n\nNeste tratamento estamos adicionando uma coluna aos dataframe df_ratings e df_tags referente a distancia em anos do lan\u00e7amento do filme e a data de pubica\u00e7\u00e3o do rating e\/ou tag. A coluna **'Distancia em Anos'** \u00e9 calculada como a diferente\u00e7a, em anos, da data de lan\u00e7amento do filme at\u00e9 a publica\u00e7\u00e3o da observa\u00e7\u00e3o.\n\nEsta aplica\u00e7\u00e3o esta identificada pela fun\u00e7\u00e3o **'colunas_diferenca_anos'**.\n\n\n##### Dados Faltantes\n\nAp\u00f3s esses tratamentos e unifica\u00e7\u00e3o de bases e informa\u00e7\u00f5es temos valores nulos em algumas das colunas que foram calculadas conforme instru\u00e7\u00f5es acima. Uma das mais importantes s\u00e3o a quantidade de filmes sem rating ou tag, filmes sem alguma observa\u00e7\u00e3o nos dataframes auxiliares df_ratings e df_tags geram valores faltantes nas colunas calculadas, s\u00e3o elas:\n\n\n    - media_ratings, ratings_count e user_count_rating:  \n    \n    Existem 18 valores faltantes nestas colunas referentes \u00e0 filmes sem nenhuma avalia\u00e7\u00e3o por parte dos usuarios. A\u00e7\u00e3o: Para uma analise exploratoria inicial n\u00e3o ser\u00e3o retiradas essas informa\u00e7\u00f5es faltantes do dataframe principal devida a perda de informa\u00e7\u00e3o, esta \u00e9 uma informa\u00e7\u00e3o adicional e calculada, quando gerados visualiza\u00e7\u00f5es explorando essas informa\u00e7\u00f5es os valores faltantes s\u00e3o desconsiderados.\n\n    - tags_count e user_count_tag: \n    \n    Existem 8170 valores faltantes nestas colunas referentes \u00e0 filmes sem nenhuma tag gerada por parte dos usuarios. A\u00e7\u00e3o: Para uma analise exploratoria inicial n\u00e3o ser\u00e3o retiradas essas informa\u00e7\u00f5es faltantes do dataframe principal devida a perda de informa\u00e7\u00e3o, esta \u00e9 uma informa\u00e7\u00e3o adicional e calculada, quando gerados visualiza\u00e7\u00f5es explorando essas informa\u00e7\u00f5es os valores faltantes s\u00e3o desconsiderados.\n\n    - ano: \n    \n    Existem 12 valores faltantes nestas colunas referentes \u00e0 filmes que n\u00e3o tinham, como os demais filmes por padr\u00e3o, o ano relativo ao lan\u00e7amento do filme entre par\u00eanteses. A\u00e7\u00e3o: Os filmes que n\u00e3o tiveram ano de lancamento identificado ap\u00f3s a fase de tratamento de dados ser\u00e3o retirados da base, pois esta informa\u00e7\u00e3o \u00e9 primordial para as analises discutidas nas perguntas abaixo.","4bdfe070":"- #### Pergunta 8 - Quais filmes tiveram mais avalia\u00e7\u00f5es? E quais se sairam melhores?\n\nR:\n\nA seguir, n\u00f3s trouxemos os top 20 filmes com melhor avalia\u00e7\u00e3o m\u00e9dia (por\u00e9m, todos ficaram com avalia\u00e7\u00e3o m\u00e9dia em 5, e nenhum aparece entre os 20 filmes com a maior quantidade de avalia\u00e7\u00f5es).\n\nTrouxemos tamb\u00e9m os top 20 filmes com a maior quantidade de avalia\u00e7\u00f5es.\n\nLogo em seguida, trouxemos os top 20 filmes com os melhores ratings m\u00e9dios dentre os filmes que tiveram mais de 50 avalia\u00e7\u00f5es.\n\nCom isso, segue abaixo alguns dos filmes que mais se destacaram, considerando tanto a quantidade de avalia\u00e7\u00f5es recebidas, quanto ao rating m\u00e9dio:\n\n    - Shawshank Redemptions, The (1994) - 4.4 de Rating M\u00e9dio (1\u00ba entre os filmes com pelo menos 51 avalia\u00e7\u00f5es) e 317 avalia\u00e7\u00f5es (2\u00ba Geral)\n    - Pulp Fiction (1994) - 4.2 de Rating M\u00e9dio (11\u00ba entre os filmes com pelo menos 51 avalia\u00e7\u00f5es) e 307 avalia\u00e7\u00f5es (3\u00ba Geral), al\u00e9m disso, vimos acima que \u00e9 tamb\u00e9m o filme que mais teve atribui\u00e7\u00e3o de tags.\n    - Forest Gump (1994) - 4.2 de Rating M\u00e9dio (15\u00ba entre os filmes com pelo menos 51 avalia\u00e7\u00f5es) e 329 avalia\u00e7\u00f5es (1\u00ba Geral)\n    - Fight Club (1999) - 4.3 de Rating M\u00e9dio (3\u00ba entre os filmes com pelo menos 51 avalia\u00e7\u00f5es) e 218 avalia\u00e7\u00f5es (11\u00ba Geral)\n    - Star Wars: Episode IV - A New Hope (1977) - 4.2 de Rating M\u00e9dio (9\u00ba entre os filmes com pelo menos 51 avalia\u00e7\u00f5es) e 251 avalia\u00e7\u00f5es (6\u00ba Geral)\n\nUma outra observa\u00e7\u00e3o relevante \u00e9 que os filmes melhoras avaliados em m\u00e9dia tamb\u00e9m est\u00e3o entre os filmes que mais tem avalia\u00e7\u00e3o, o que levante uma hip\u00f3tese:\n\n- Existe uma correla\u00e7\u00e3o clara entre quantidade de Avalia\u00e7\u00f5es e a M\u00e9dia de Avalia\u00e7\u00f5es?","358d8134":"- #### Pergunta 3 - Qual a categoria rotulada mais frequente?\n\nR:\n\nComo podemos ver pelo gr\u00e1fico abaixo o r\u00f3tulo mais frequente nos filmes \u00e9 \"IN NETFLIX QUEUE\".\n\nIsso nos faz pensar que o algoritmo da Netflix para recomenda\u00e7\u00e3o de t\u00edtulos funciona bem para usu\u00e1rios que atribuem tags a filmes, j\u00e1 que esta \u00e9 de longe a tag mais mencionada pelos usu\u00e1rios, indicando que eles possivelmente assistiram ao t\u00edtulo com base no sistema (algoritmo) de recomenda\u00e7\u00e3o de filmes da Netflix.","395738df":"**2.2 Quais s\u00e3o os principais atributos (colunas) e seus tipos?**\n\n*Resposta:* \n\n**ratings.csv**:\n\n- userid (ID do usu\u00e1rio que fez a avalia\u00e7\u00e3o, tipo int)\n- movieid (ID do filme avaliado, tipo int)\n- rating (avalia\u00e7\u00e3o do filme, em escala de 5 estrelas, com incrementos de 0.5 entre as avalia\u00e7\u00f5es, varia de 0.5 estrelas a 5.0 estrelas, tipo float) \n- timestamp (representa os segundos desde a meia noite de 01 de janeiro de 1970, Coordinated Universal Time (UTC), tipo int)\n\n**tags.csv**: \n\n- userid (ID do usu\u00e1rio que fez a avalia\u00e7\u00e3o, tipo int)\n- movieid (ID do filme avaliado, tipo int)\n- tag (\"tag\" atribu\u00edda pelo usu\u00e1rio ao filme, geralmente uma palavra simples ou frase curta, mas o significado, valor, e prop\u00f3sito de uma tag particular \u00e9 determinada por cada usu\u00e1rio, que tem liberdade de digitar a tag que quiser, tipo object)\n- timestamp (representa os segundos desde a meia noite de 01 de janeiro de 1970, Coordinated Universal Time (UTC), tipo int)\n\n**movies.csv**: \n\n- movieid (ID do filme avaliado, tipo int)\n- title (T\u00edtulo do filme, acompanhado do ano entre par\u00eantesis, tipo object) erros ou inconsist\u00eancias podem ocorrer nesses t\u00edtulos\n- genres (G\u00eaneros atribu\u00eddos ao filme, tipo object, segundo a lista: \n    Action,\n    Adventure,\n    Animation,\n    Children's,\n    Comedy,\n    Crime,\n    Documentary,\n    Drama,\n    Fantasy,\n    Film-Noir,\n    Horror,\n    Musical,\n    Mystery,\n    Romance,\n    Sci-Fi,\n    Thriller,\n    War,\n    Western,\n    (no genres listed))\n\n**links.csv**: \n\n- movieid (ID do filme usado em <https:\/\/movielens.org>, por exemplo: o filme \"Toy Story\" tem o link <https:\/\/movielens.org\/movies\/1>, tipo int)\n- imdbid (ID do filme usado em <http:\/\/www.imdb.com>, por exemplo: o filme \"Toy Story\" tem o link <http:\/\/www.imdb.com\/title\/tt0114709\/>, tipo int)\n\n- tmdbid (ID do filme usado em <https:\/\/www.themoviedb.org>, por exemplo: o filme \"Toy Story\" tem o link <https:\/\/www.themoviedb.org\/movie\/862>, tipo float)","1c878925":"- #### Pergunta 9 - Existe uma correla\u00e7\u00e3o clara entre quantidade de Avalia\u00e7\u00f5es e a M\u00e9dia de Avalia\u00e7\u00f5es?\n\nR: Podemos ver pelo gr\u00e1fico abaixo (avalia\u00e7\u00e3o m\u00e9dia x quantidade de avalia\u00e7\u00f5es) que filmes com poucas avalia\u00e7\u00f5es (at\u00e9 50), possuem uma distribui\u00e7\u00e3o de avalia\u00e7\u00e3o m\u00e9dia muito dispersa, variando desde 0,5 at\u00e9 5.\n\nQuando olhamos apenas para os filmes com mais de 50 avalia\u00e7\u00f5es, as avalia\u00e7\u00f5es m\u00e9dias se reduzem a um range que varia de 2.2 a 4.4, e podemos perceber pelo gr\u00e1fico tamb\u00e9m que os filmes com mais avalia\u00e7\u00f5es est\u00e3o no canto superior direito, mostrando que eles tendem a ter uma avalia\u00e7\u00e3o m\u00e9dia maior.\n\nCom isso conclu\u00edmos que filmes com m\u00e9dias extremamente altas, ou baixas, possuem poucas avalia\u00e7\u00f5es, e filmes com muitas avalia\u00e7\u00f5es tendem a ter uma m\u00e9dia melhor.","44d92704":"## **2. Descri\u00e7\u00e3o da base de dados escolhida:**\n    \n**2.1 O que significa cada linha de cada arquivo?**\n\n*Resposta:*\n\nNo conjunto de dados Movie Lens temos 4 arquivos referentes a diferentes caracteristicas e informa\u00e7\u00f5es sobre os dados, s\u00e3o elas: \n\n**ratings.csv**: O arquivo cont\u00e9m a cada linha uma avalia\u00e7\u00e3o de um filme por um usu\u00e1rio, com 100836 observa\u00e7\u00f5es. \n\n**tags.csv**: O arquivo cont\u00e9m a cada linha uma \"tag\" atribu\u00edda a um filme por um usu\u00e1rio, com 3683 observa\u00e7\u00f5es.\n\n**movies.csv**: O arquivo cont\u00e9m a cada linha informa\u00e7\u00f5es sobre um filme, com 9742 observa\u00e7\u00f5es.\n\n**links.csv**: O arquivo cont\u00e9m identificadores associados a cada filme e pode ser utilizado para utilizar informa\u00e7\u00f5es de outras fontes, com 9742 observa\u00e7\u00f5es.","07d60e4b":"## **4. An\u00e1lise Explorat\u00f3ria:**\n\n- #### Pergunta 1 - Existe alguma correla\u00e7\u00e3o entre o ano de lan\u00e7amento do filme e sua avalia\u00e7\u00e3o m\u00e9dia (m\u00e9dia de ratings)?\n\nR:\n\nComo podemos ver pela matriz de correla\u00e7\u00e3o abaixo, h\u00e1 uma correla\u00e7\u00e3o negativa muito fraca entre o ano de lan\u00e7amento do filme e sua avalia\u00e7\u00e3o m\u00e9dia (aproximadamente -0.1). Contudo como podemos visualizar no segundo gr\u00e1fico abaixo, filmes anteriores ao ano de 1970 tem menos pontos entre as avalia\u00e7\u00f5es baixas (1 e 2), enquanto nos anos posteriores as avalia\u00e7\u00f5es est\u00e3o mais dispersas recebendo mais observa\u00e7\u00f5es em filmes nota 5, 2 e 1 do que os filmes antigos. Isso \u00e9 devido \u00e0 volumetria nas quantidades de avalia\u00e7\u00f5es de filmes: filmes lan\u00e7ados at\u00e9 1970 n\u00e3o possuem volume t\u00e3o grande de avalia\u00e7\u00f5es como filmes a partir desta d\u00e9cada e, por isso, a dispers\u00e3o de dados aumenta conforme a quantidade de avalia\u00e7\u00f5es.","9b1f4b0a":"## **3. Prepara\u00e7\u00e3o da base de dados:**\n\n\n- Teve dificuldades para preparar o dataset para uso (p. ex., nomes ruins para as colunas, arquivos dos datasets n\u00e3o possu\u00edam boa organiza\u00e7\u00e3o)?\n\nR: Os dataframes em geral precisam de algumas adapta\u00e7\u00f5es para responder ao menos as perguntas iniciais propostas, al\u00e9m disso s\u00f3 foi necess\u00e1rio uma transforma\u00e7\u00e3o do tipo de dados nas colunas referentes \u00e0 dados do tipo **Data**. Os demais tratamentos e feature engineering foram realizados de forma \u00e0 aumentar a quantidade de informa\u00e7\u00f5es relevantes sobre as bases de dados e o contexto da analise explorat\u00f3ria. Tamb\u00e9m foi necess\u00e1ria unificar algumas informa\u00e7\u00f5es realizando opera\u00e7\u00f5es \"merge\" para trazer informa\u00e7\u00f5es de tabelas diferentes ao dataframe principal da nossa an\u00e1lise **df_movies**.\n\n- Aplicou algum pr\u00e9-processamento dos dados?\n    - Outliers\/ru\u00eddos, dados faltantes, convers\u00e3o de tipos de dados, etc.\n\nR: Foram aplicados 3 tipos de tratamento de dados distintos, **Convers\u00e3o do tipo do dado**, **Cria\u00e7\u00e3o de colunas** e **Tratamento de dados faltantes**, esses tratamentos foram sistematizados por meio de fun\u00e7\u00f5es que aplicadas na ordem correta trazem todas as informa\u00e7\u00f5es necess\u00e1rias para a analise exploratoria do contexto proposto. Os tratamentos e as respectivas fun\u00e7\u00f5es est\u00e3o explicitadas abaixo;","69f13989":"- #### Pergunta 10 - Quais foram os filmes que mais geraram engajamento (soma das avalia\u00e7\u00f5es e tags atribu\u00eddas)? E como est\u00e3o distribu\u00eddas as avalia\u00e7\u00f5es destes filmes?\n\nR:\n\nDentre os 20 filmes que mais geraram engajamento quanto ao n\u00famero de avalia\u00e7\u00f5es e\/ou tags atribu\u00eddas, n\u00f3s trouxemos abaixo os gr\u00e1ficos: da quantidade de intera\u00e7\u00f5es geradas por cada um destes filmes, os boxplots dos ratings de cada um desses filmes, e o Rating M\u00e9dio dos mesmos.\n\nDestes 20 filmes, apenas 3 n\u00e3o s\u00e3o \"inquestionavelmente muito bons!!\", s\u00e3o eles:\n\n    - Jurassic Park (1993), que est\u00e1 9\u00ba entre os filmes que geraram maior engajamento (239 intera\u00e7\u00f5es), mas possui m\u00e9dia de avalia\u00e7\u00f5es de apenas 3.8 (18\u00ba nesta lista) e mediana nas avalia\u00e7\u00f5es recebidas em 4.\n    - Independence Day (a. k. a. ID4) (1996), que est\u00e1 em 20\u00ba entre os filmes que geraram maior engajamento (203 intera\u00e7\u00f5es), mas possui m\u00e9dia de avalia\u00e7\u00f5es de apenas 3.4 (20\u00ba nesta lista) e mediana nas avalia\u00e7\u00f5es recebidas em 3.5.\n    - Apollo 13 (1995), que est\u00e1 em 19\u00ba entre os filmes que geraram maior engajamento (204 intera\u00e7\u00f5es), mas possui m\u00e9dia de avalia\u00e7\u00f5es de apenas 3.8 (19\u00ba nesta lista) e mediana nas avalia\u00e7\u00f5es recebidas em 4.\n\nN\u00e3o que estes filmes s\u00e3o sejam bons, mas ficam um pouco atr\u00e1s dos outros 17, que possuem m\u00e9dia de ratings muito boas, dispers\u00e3o de ratings, em geral, baixa (sendo que muitos destes filmes concentram mais de 75% dos ratings recebidos em pelo menos 4), e grande n\u00famero de intera\u00e7\u00f5es geradas (avalia\u00e7\u00f5es recebidas ou tags atribu\u00eddas).\n\nCom isso, conclu\u00edmos que filmes que geram muito engajamento, seja por avalia\u00e7\u00f5es recebidas, ou tags atribu\u00eddas por usu\u00e1rios, n\u00e3o s\u00e3o aclamados \u00e0 toa, e tendem a distribui\u00e7\u00e3o de ratings muito boa, e avalia\u00e7\u00e3o m\u00e9dia alta.","92500c70":"- #### Pergunta 6 - Como est\u00e3o dispostos os g\u00eaneros de filmes por quantidade de avalia\u00e7\u00e3o e m\u00e9dia de ratings?\n\nR:\n\nSegue a lista dos 5 g\u00eaneros com a maior quantidade de avalia\u00e7\u00f5es, e suas respectivas m\u00e9dias de avalia\u00e7\u00e3o:\n\n    - 1) Drama, avalia\u00e7\u00f5es: 41,9k (1\u00ba), m\u00e9dia: 3,66 (4\u00ba)\n    - 2) Comedy, avalia\u00e7\u00f5es: 39,1k (2\u00ba), m\u00e9dia: 3,38 (17\u00ba)\n    - 3) Action, avalia\u00e7\u00f5es: 30,6k (3\u00ba), m\u00e9dia: 3,45 (15\u00ba)\n    - 4) Thriller, avalia\u00e7\u00f5es: 26,4k (4\u00ba), m\u00e9dia: 3,49 (13\u00ba)\n    - 5) Adventure, avalia\u00e7\u00f5es: 24,2k (5\u00ba), m\u00e9dia: 3,51 (11\u00ba)\n\nDentre os 5 g\u00eaneros com a maior quantidade de avalia\u00e7\u00f5es, apenas 1 aparece tamb\u00e9m entre a lista de 5 g\u00eaneros com a melhor m\u00e9dia de avalia\u00e7\u00f5es: Drama, 1\u00ba em quantidade de avalia\u00e7\u00f5es e 4\u00ba em m\u00e9dia de avalia\u00e7\u00f5es.\n\nSegue tamb\u00e9m a lista dos 5 g\u00eaneros com melhor m\u00e9dia de avalia\u00e7\u00e3o, e suas respectivas quantidades de avalia\u00e7\u00e3o:\n\n    - 1) Film-Noir, m\u00e9dia 3,92 (1\u00ba), avalia\u00e7\u00f5es: 0,9k (17\u00ba)\n    - 2) War, m\u00e9dia 3,81 (2\u00ba), avalia\u00e7\u00f5es: 4,9k (13\u00ba)\n    - 3) Documentary, m\u00e9dia: 3,80 (3\u00ba), avalia\u00e7\u00f5es: 1,2k (16\u00ba)\n    - 4) Drama, m\u00e9dia: 3,66 (4\u00ba), avalia\u00e7\u00f5es: 41,9k (1\u00ba)\n    - 5) Crime, m\u00e9dia: 3,66 (5\u00ba), avalia\u00e7\u00f5es: 16,7 (8\u00ba)\n\nOutro G\u00eanero que chama aten\u00e7\u00e3o \u00e9 Crime, que aparece em 5\u00ba na lista de melhores m\u00e9dias de avalia\u00e7\u00e3o, e em 8\u00ba na lista dos que tiveram mais avalia\u00e7\u00f5es.\n\nComo podemos ver, entre os g\u00eaneros com melhor m\u00e9dia, s\u00e3o recorrentes aqueles que est\u00e3o entre os g\u00eaneros com menos avalia\u00e7\u00f5es. \n\nAl\u00e9m disso, a quantidade de avalia\u00e7\u00f5es por g\u00eanero n\u00e3o parece nos dizer muito quanto \u00e0 avalia\u00e7\u00e3o m\u00e9dia, j\u00e1 que apenas Drama aparece no Top 5 de quantidade de avalia\u00e7\u00f5es e avalia\u00e7\u00e3o m\u00e9dia, mas parece nos dizer que podemos esperar mais filmes de Drama, Com\u00e9dia e A\u00e7\u00e3o sendo lan\u00e7ados do que Document\u00e1rios, Film-Noir ou Western. Al\u00e9m disso, parece fazer sentido que o g\u00eanero Children's n\u00e3o tenha avalia\u00e7\u00f5es, j\u00e1 que n\u00e3o devemos esperar crian\u00e7as entre os avaliadores (e comentaristas) de filmes.","a59e13b4":"- #### Pergunta 5 - Como est\u00e3o distribu\u00eddas as avalia\u00e7\u00f5es a partir da data de lan\u00e7amento?\n\nR:\n\nA seguir, segue algumas visualiza\u00e7\u00f5es para ajudar a entender o que ocorre com as avalia\u00e7\u00f5es dos filmes conforme a 'Idade' dos filmes vai aumentando ao longo do tempo.\n\nPrimeiro, um gr\u00e1fico de barras (combinado com um violin plot) com a distribui\u00e7\u00e3o das avalia\u00e7\u00f5es feitas considerando a 'Idade' do filme no momento da avalia\u00e7\u00e3o, ou seja, a diferen\u00e7a em anos entre o ano da avalia\u00e7\u00e3o e o ano de lan\u00e7amento do filme. \n\nNa sequ\u00eancia, um boxplot com a distribui\u00e7\u00e3o das avalia\u00e7\u00f5es considerando a 'Idade' do filme no momento da avalia\u00e7\u00e3o.\n\nDeste(s) gr\u00e1fico(s) podemos ver que:\n\n    - 1\u00ba quartil \u00e9 em 3 anos;\n    - Mediana \u00e9 em 9 anos;\n    - 3\u00ba quartil \u00e9 em 18 anos;\n    - Filmes com mais de 40 anos representam muito pouco no nosso conjunto de filmes com avalia\u00e7\u00e3o.\n\nTendo conhecimento disto, n\u00f3s trouxemos os boxplots das avalia\u00e7\u00f5es dos filmes considerando a 'Idade' do filme no momento da avalia\u00e7\u00e3o, e logo abaixo n\u00f3s trouxemos a mesma vis\u00e3o, por\u00e9m considerando apenas as avalia\u00e7\u00f5es para filmes com no m\u00e1ximo 60 anos desde seu lan\u00e7amento no momento da avalia\u00e7\u00e3o. Com esses boxplots n\u00f3s conseguimos notar um comportamento muito curioso:\n\n    - As distribui\u00e7\u00f5es das avalia\u00e7\u00f5es de filmes de at\u00e9 23 anos (o que corresponde a mais de 75% das nossas avalia\u00e7\u00f5es) \u00e9 praticamente a mesma, tendo o 1\u00ba quartil na nota 3, mediana em 3.5 e 3\u00ba quartil em 4 (com exce\u00e7\u00e3o do ano de lan\u00e7amento do filme, que eleva a mediana para 4, enquanto os quartis se mant\u00e9m);\n    - Outro padr\u00e3o observado foi para filmes avaliados com pelo menos 24 anos desde seu lan\u00e7amento, que possuem 1\u00ba quartil variando entre 3 e 3.5, mediana em 4 e 3\u00ba quartil variando entre 4 e 5.\n\nDadas essas \u00faltimas observa\u00e7\u00f5es, pudemos perceber que h\u00e1 praticamente 2 comportamentos nas avalia\u00e7\u00f5es de filmes considerando a 'Idade' do filme no momento da avalia\u00e7\u00e3o:\n\n    - Filmes de pelo menos 24 anos possuem avalia\u00e7\u00f5es melhores (e mais dispersas) do que as avalia\u00e7\u00f5es para filmes de at\u00e9 23 anos desde seu lan\u00e7amento."}}