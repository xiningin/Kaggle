{"cell_type":{"15fa4d1a":"code","5a114364":"code","5146cd01":"code","9aa35b81":"code","0d301a18":"code","a2e9abe5":"code","268bf569":"code","5a329f29":"code","d6985f93":"code","388cb2aa":"code","22514d8e":"code","6184263d":"code","7441811a":"code","8f8d92ed":"code","df363d46":"code","236d8389":"markdown","c8d89c1e":"markdown","402c321a":"markdown","8d4cbba3":"markdown","18719e12":"markdown","a9e7fa44":"markdown","92b62c6a":"markdown","e993068c":"markdown","d7d74a62":"markdown","7c65bd7b":"markdown","de646935":"markdown","ce289869":"markdown","d91ca24c":"markdown","a9fa1ab3":"markdown"},"source":{"15fa4d1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5a114364":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.utils import np_utils\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Convolution2D, MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint\n\nprint(\"Pandas\", pd.__version__)\nprint(\"NumPy\", np.__version__)","5146cd01":"img_size = 28\nbatch_size = 64\nvalidation_split = 0.1\nepochs = 8","9aa35b81":"train_raw_dataset = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_raw_dataset = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","0d301a18":"def preprocess(train_raw_dataset, test_raw_dataset):\n    # Work with train data\n    X_train = train_raw_dataset.drop([\"label\"], axis=1)\n    X_train = X_train.values.astype(\"float32\")\n    X_train = X_train.reshape(X_train.shape[0], img_size, img_size, 1)\n    X_train \/= 255\n    X_train = X_train.clip(0, 1)\n\n    y_train = train_raw_dataset[\"label\"]\n    y_train = y_train.values\n    y_train = np_utils.to_categorical(y_train, 10)\n    \n    # Split to train\/validation set\n    X_train, X_valid, y_train, y_valid = train_test_split(\n        X_train, \n        y_train, \n        test_size=validation_split, \n        shuffle=True\n    )\n    \n    # Work with test data\n    X_test = test_raw_dataset.values.astype(\"float32\")\n    X_test = X_test.reshape(X_test.shape[0], img_size, img_size, 1)\n    X_test \/= 255\n    X_test = X_test.clip(0, 1)\n    \n    return X_train, X_valid, y_train, y_valid, X_test\n\nX_train, X_valid, y_train, y_valid, X_test = preprocess(train_raw_dataset, test_raw_dataset)","a2e9abe5":"fig = plt.figure(figsize=(25, 4))\nfor i in range(20):\n    ax = fig.add_subplot(2, 10, i+1)\n    plt.imshow(X_train[i].reshape(28, 28), cmap='gray')","268bf569":"datagen = ImageDataGenerator(\n    rotation_range=10,\n    width_shift_range=0.05,\n    height_shift_range=0.05,\n    zoom_range=0.05,\n    data_format=\"channels_last\",\n    validation_split=validation_split\n)\n\n# compute quantities required for featurewise normalization\n# (std, mean, and principal components if ZCA whitening is applied)\ndatagen.fit(X_train)\n\ndatagen_flow = datagen.flow(X_train, y_train, batch_size=batch_size)","5a329f29":"fig = plt.figure(figsize=(25, 4))\nfor X_batch, y_batch in datagen_flow:\n    for i in range(20):\n        ax = fig.add_subplot(2, 10, i+1)\n        plt.imshow(X_batch[i].reshape(28, 28), cmap=plt.get_cmap('gray'))\n    plt.show()\n    break","d6985f93":"input_shape = (img_size, img_size, 1)\n\nmodel = Sequential()\nmodel.add(Convolution2D(32, (5, 5), padding=\"same\", input_shape=input_shape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding=\"same\"))\nmodel.add(Convolution2D(64, (5, 5), padding=\"same\", input_shape=input_shape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding=\"same\"))\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10))\nmodel.add(Activation(\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n\nprint(model.summary())","388cb2aa":"train_history = model.fit_generator(\n    datagen_flow, \n    epochs=epochs, \n    steps_per_epoch=(len(X_train) \/ batch_size), \n    validation_data=(X_valid, y_valid)\n)","22514d8e":"plt.plot(train_history.history[\"loss\"], label=\"Training loss\")\nplt.plot(train_history.history[\"val_loss\"], label=\"Validation loss\")\nplt.legend()\nplt.ylabel('Loss')","6184263d":"plt.plot(train_history.history[\"loss\"], label=\"Training accuracy\")\nplt.plot(train_history.history[\"val_loss\"], label=\"Validation accuracy\")\nplt.legend()\nplt.ylabel('Acc')","7441811a":"test = model.predict(X_test)\ntest_labels = np.argmax(test, axis=1)","8f8d92ed":"fig = plt.figure(figsize=(25, 4))\nfor idx in np.arange(20):\n    ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[])\n    plt.imshow(X_test[idx].reshape(28, 28))\n    ax.set_label([test_labels[idx]])\n    ax.set_title([test_labels[idx]])","df363d46":"results = pd.Series(test_labels, name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"), results],axis = 1)\nsubmission.to_csv(\"mnist_prediction.csv\", index=False)","236d8389":"## Test\nIn order to check the results are proper","c8d89c1e":"### Preprocess data to NumPy trainable data","402c321a":"### Load data to Pandas","8d4cbba3":"# MNIST challenge with Keras","18719e12":"### Create","a9e7fa44":"## Hyperparameters","92b62c6a":"### Train","e993068c":"### Plot data","d7d74a62":"### Data augmentation\n\n(!) Experiments show, that digits are very sensitive to augmentation, so it should change digits a little","7c65bd7b":"## Prepare data","de646935":"### Plot augmented data","ce289869":"### Plot train results","d91ca24c":"## Prepare model","a9fa1ab3":"# Submit"}}