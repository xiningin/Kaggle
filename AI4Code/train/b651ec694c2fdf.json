{"cell_type":{"c3c796cf":"code","759be4fa":"code","cbcfa61d":"code","e994473a":"code","6937dbbb":"code","008bfe0b":"code","20f03674":"code","b17af815":"code","c3949ac0":"code","5d990045":"code","c924e8e9":"code","f52bd38a":"code","0d9323b2":"code","2af2790d":"code","7f17e993":"code","ed99ca30":"code","80b6140e":"code","165a5b26":"code","ea3cc486":"code","49a9fdd8":"code","3d93e3dc":"code","971eb9d4":"code","d812a93a":"code","3ecdd01f":"code","3122e3a3":"code","47fca543":"code","a9b137eb":"code","83a531ac":"code","e8df5111":"code","d97d4a24":"code","cc05bbe5":"code","e7f93bb4":"code","9381a161":"code","d4aa00db":"code","1bca888c":"code","56d08264":"code","0e4eafd2":"markdown","02162e44":"markdown","358d2f2a":"markdown","6bf271d8":"markdown","0362777a":"markdown","d35c155f":"markdown","1665b715":"markdown","30c5cba8":"markdown","3af6c580":"markdown","7a11ddf9":"markdown"},"source":{"c3c796cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","759be4fa":"df = pd.read_csv('..\/input\/insider-trading-sec-form-4-i\/Insider Trading (SEC Form 4) I.csv', index_col='Filing\\xa0Date', parse_dates=['Filing\\xa0Date'])\ndf.tail()","cbcfa61d":"df.isnull().sum()","e994473a":"cols_to_drop=['1d', '1w', '1m', '6m']\ndf=df.drop(cols_to_drop,axis=1)\ndf.columns","6937dbbb":"df.columns.tolist()","008bfe0b":"df[['year','month','date']] = df['Trade\\xa0Date'].apply(lambda x : pd.Series(str(x).split('-')))","20f03674":"df.drop('Trade\\xa0Date', inplace=True, axis =1)","b17af815":"df.head()","c3949ac0":"#https:\/\/stackoverflow.com\/questions\/38516481\/trying-to-remove-commas-and-dollars-signs-with-pandas-in-python\n\ndf['Price'] = df['Price'].astype(str).str.replace(',', '')\ndf['Price'] = df['Price'].astype(str).str.replace('$', '')\n#df['Price'] = df['Price'].astype(int)","5d990045":"#Remove commas to avoid errors ValueError: invalid literal for int() with base 10\n#ValueError on the snippet below: invalid literal for int() with base 10: '17.02'\n\n\n#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/statistical-tests-for-understanding-life-value\/comments\n\ndf['Price']=df['Price'].str.replace(',', '')\ndf['Price'] = pd.to_numeric(df['Price'], errors = 'coerce')\n#df['Value']=df['Value'].str.replace(',', '')\n#df['Value'] = pd.to_numeric(df['Value'], errors = 'coerce')","c924e8e9":"df['Value'] = df['Value'].astype(str).str.replace(',', '')\ndf['Value'] = df['Value'].astype(str).str.replace('$', '')\ndf['Value'] = df['Value'].astype(str).str.replace('+', '')\ndf['Value'] = df['Value'].astype(str).str.replace('-', '')\n#df['Value'] = df['Value'].astype(int)","f52bd38a":"df['Value']=df['Value'].str.replace(',', '')\ndf['Value'] = pd.to_numeric(df['Value'], errors = 'coerce')","0d9323b2":"#Code by Benjamin Obi Tayo https:\/\/towardsdatascience.com\/how-to-remove-sign-from-data-table-baa37598982a\n\ndf['\u0394Own'] = list(map(lambda x: x[:-1], df['\u0394Own'].values))","2af2790d":"df['\u0394Own']=df['\u0394Own'].str.replace('+', '')\ndf['\u0394Own']=df['\u0394Own'].str.replace('-', '')\ndf['\u0394Own']=df['\u0394Own'].str.replace('.', '')\ndf['\u0394Own'] = pd.to_numeric(df['\u0394Own'], errors = 'coerce')","7f17e993":"#Remove commas to avoid errors ValueError: invalid literal for int() with base 10\n\n#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/statistical-tests-for-understanding-life-value\/comments\n\ndf['\u0394Own']=df['\u0394Own'].str.replace(',', '')\ndf['\u0394Own']=df['\u0394Own'].str.replace('-', '')\ndf['\u0394Own']=df['\u0394Own'].str.replace('.', '')\ndf['\u0394Own'] = pd.to_numeric(df['\u0394Own'], errors = 'coerce')","ed99ca30":"df['Qty']=df['Qty'].astype(str).str.replace('-', '')","80b6140e":"df['\u0394Own']=df['\u0394Own'].replace(\"New\", np.nan)","165a5b26":"df.fillna(value=0,inplace=True)","ea3cc486":"#Code by Tejashvi14 https:\/\/www.kaggle.com\/tejashvi14\/casualty-analysis\/notebook\n\n#To avoid ValueError: invalid literal for int() with base 10: '1,118'\n\n#After that snippet the float(Price) and the other objects become integers.\n\ndf[\"Price\"]=df[\"Price\"].apply(int)\ndf[\"Qty\"]=df[\"Qty\"].apply(int)\ndf[\"\u0394Own\"]=df[\"\u0394Own\"].apply(int) \ndf[\"year\"] = df[\"year\"].apply(int)\ndf[\"month\"] = df[\"month\"].apply(int)\ndf[\"date\"] = df[\"date\"].apply(int)","49a9fdd8":"df.head()","3d93e3dc":"#Code by Diego Risco https:\/\/www.kaggle.com\/ggxgboostgg\/wids-2022-shap-values-validation\/notebook\n\ncat_var = df.select_dtypes(include=[object]).columns.to_list()\ncat_var.append('Owned')\nx_train = df.drop(['Value'], axis = 1)\ny_train = df.copy()['Value']","971eb9d4":"!pip install feature_engine","d812a93a":"from feature_engine.imputation import AddMissingIndicator\nfrom feature_engine.encoding import MeanEncoder, RareLabelEncoder\nfrom sklearn.pipeline import Pipeline\n\nfrom lightgbm import LGBMRegressor\nimport shap\nrandom_state = 123","3ecdd01f":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","3122e3a3":"import lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\n\nimport shap\nimport random","47fca543":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","a9b137eb":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","83a531ac":"#Avoid LGBM Error: Do not support special JSON characters in feature name\n\n#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","e8df5111":"X = dfmodel.drop(['Value','Owned'], axis = 1)\ny = dfmodel['Value']","d97d4a24":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","cc05bbe5":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","e7f93bb4":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","9381a161":"print(LGBM)","d4aa00db":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","1bca888c":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","56d08264":"shap.summary_plot(shap_values[1], X)","0e4eafd2":"#Final Model","02162e44":"#Remove Dollar signs and commas\n\n#Can only use str.acessor with string values\n\nIn that case you should apply astype(str)  before the str.replace\n\nastype(str).str.replace('$', '')","358d2f2a":"#Can only use str.acessor with string values\n\nIn that case you should apply astype(str)  before the str.replace\n\nastype(str).str.replace('-', '')","6bf271d8":"#Remove % ","0362777a":"#ML explainability","d35c155f":"![](https:\/\/cdn.wallstreetmojo.com\/wp-content\/uploads\/2018\/03\/Insider_Trading.png)wallstreetmojo.com","1665b715":"#Acknowledgement\n\nrossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-lightgbm-model-to-detect-exam-result-w-shap\/notebook","30c5cba8":"#Drop Nan columns","3af6c580":"#Value has minus (-), addition (+) and Dollar ($) signs to be removed\n\n#Can only use str.acessor with string values\n\nIn that case you should apply astype(str)  before the str.replace\n\nastype(str).str.replace('$', '')","7a11ddf9":"##Apply the snippet below and fillna to avoid Nan error: ValueError: invalid literal for int() with base 10: 'Ne' (New?)"}}