{"cell_type":{"8ff0be06":"code","95d2912d":"code","4399b9c5":"code","9d9fc57e":"code","51d39169":"code","6415b518":"code","40f671d6":"code","a5c7c1f5":"code","baf1b55c":"code","003c71dc":"code","d5974335":"code","ba5e9ac2":"code","4e647e67":"code","ced13b1d":"code","02368c80":"code","86e45308":"code","d1bfd8ac":"code","2737a40d":"code","18769d36":"code","26e5584d":"code","fdf4b1a7":"code","ec5a4ac3":"markdown","8e06ee98":"markdown","a6a7ee9c":"markdown"},"source":{"8ff0be06":"import numpy as np \nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\n\n# grid search k value for SMOTE oversampling for imbalanced classification\nfrom numpy import mean\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import train_test_split","95d2912d":"maindf1=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")\nmaindf1[0:10]","4399b9c5":"maindf1.info()","9d9fc57e":"maindf1['class'].value_counts()","51d39169":"maindf1.describe()","6415b518":"y=maindf1.pop('class')","40f671d6":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nfor i in maindf1.columns:\n    f, (ax_box, ax_dist) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.15, .85)})\n    sns.boxplot(maindf1[i], ax=ax_box)\n    sns.distplot(maindf1[i], color=\"g\",ax=ax_dist)\n    plt.show()\n","a5c7c1f5":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler().fit(maindf1)\nX_scaled = scaler.transform(maindf1)\n","baf1b55c":"print(X_scaled[1]) # to check the data how it looks like\nprint(X_scaled.shape)\n# transform to dataframe\ndf=pd.DataFrame(data=X_scaled[0:,0:],\n           index=[i for i in range(X_scaled.shape[0])],\n            columns=[ i  for i in maindf1.columns ])\nprint('*'*80)\nprint(df[0:5])\nprint('*'*80)\ndf.describe()\n","003c71dc":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nfor i in df.columns:\n    f, (ax_box, ax_dist) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.15, .85)})\n    sns.boxplot(df[i], ax=ax_box)\n    sns.distplot(df[i], color=\"g\",ax=ax_dist)\n    plt.show()\n","d5974335":"\nX_train, X_test, y_train, y_test = train_test_split(\n    df, y, test_size=0.33, random_state=42)\n","ba5e9ac2":"\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.svm import LinearSVC\nkernel = 1.0 * RBF(1.0)\npred1=OneVsRestClassifier(LinearSVC(random_state=0)).fit(X_train, y_train).predict(X_test)\npred2=OneVsRestClassifier(GaussianProcessClassifier(kernel=kernel,random_state=0),).fit(X_train, y_train).predict(X_test)\npred3=OneVsRestClassifier(SGDClassifier(loss=\"perceptron\")).fit(X_train, y_train).predict(X_test)","4e647e67":"\nprint(\"using SVM accuracy :\",accuracy_score(pred1,y_test))\nprint(\"using Gaussian Process Classifier\",accuracy_score(pred2,y_test))\nprint(\"using SGD\",accuracy_score(pred3,y_test))","ced13b1d":"from sklearn.multiclass import OneVsOneClassifier\no_pred1=OneVsOneClassifier(LinearSVC(random_state=2)).fit(X_train, y_train).predict(X_test)\no_pred2=OneVsOneClassifier(GaussianProcessClassifier(kernel=kernel,random_state=0),).fit(X_train, y_train).predict(X_test)\no_pred3=OneVsOneClassifier(SGDClassifier(loss=\"hinge\")).fit(X_train, y_train).predict(X_test)\n","02368c80":"print(\"using SVM accuracy :\",accuracy_score(o_pred1,y_test))\nprint(\"using Gaussian Process Classifier\",accuracy_score(o_pred2,y_test))\nprint(\"using SGD\",accuracy_score(o_pred3,y_test))\n","86e45308":"from sklearn.multiclass import OutputCodeClassifier\nc_pred1=OutputCodeClassifier(LinearSVC(random_state=2)).fit(X_train, y_train).predict(X_test)\nc_pred2=OutputCodeClassifier(GaussianProcessClassifier(kernel=kernel,random_state=0),).fit(X_train, y_train).predict(X_test)\nc_pred3=OutputCodeClassifier(SGDClassifier(loss=\"hinge\")).fit(X_train, y_train).predict(X_test)","d1bfd8ac":"print(\"using SVM accuracy :\",accuracy_score(c_pred1,y_test))\nprint(\"using Gaussian Process Classifier\",accuracy_score(c_pred2,y_test))\nprint(\"using SGD\",accuracy_score(c_pred3,y_test))","2737a40d":"model=OneVsRestClassifier(LinearSVC(random_state=0)).fit(X_train, y_train)\npredictions=model.predict(X_test)\npredictions","18769d36":"predictions.shape","26e5584d":"prediction_data=pd.DataFrame(data=predictions[0:,],\n           index=[i for i in range(predictions.shape[0])],\n            columns=['prediction' ])\n","fdf4b1a7":"prediction_data.value_counts()\n","ec5a4ac3":"The data have been organized in two different but related classification tasks.\n\n    column3Cweka.csv (file with three class labels)\n        The first task consists in classifying patients as belonging to one out of three categories: Normal (100 patients), Disk Hernia (60 patients) or Spondylolisthesis (150 patients). \n\n    column2Cweka.csv (file with two class labels)\n        For the second task, the categories Disk Hernia and Spondylolisthesis were merged into a single category labelled as 'abnormal'. Thus, the second task consists in classifying patients as belonging to one out of two categories: Normal (100 patients) or Abnormal (210 patients).\n\nContent\n\nField Descriptions:\n\nEach patient is represented in the data set by six biomechanical attributes derived from the shape and orientation of the pelvis and lumbar spine (each one is a column):\n\n    pelvic incidence\n    pelvic tilt\n    lumbar lordosis angle\n    sacral slope\n    pelvic radius\n    grade of spondylolisthesis\n","8e06ee98":"Multiclass from sklearn\nhttps:\/\/scikit-learn.org\/stable\/modules\/multiclass.html","a6a7ee9c":"if you have outliers in your feature (column), normalizing your data will scale most of the data to a small interval, which means all features will have the same scale but does not handle outliers well. Standardisation is more robust to outliers, and in many cases, it is preferable over Max-Min Normalisation."}}