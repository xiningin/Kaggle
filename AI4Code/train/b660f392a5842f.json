{"cell_type":{"312d2b92":"code","db83e0da":"code","d5eea0e9":"code","e5791c47":"code","b720b98c":"code","542a1af4":"code","074bedff":"code","f7cf6cfb":"code","6bcad7f0":"code","9512460f":"code","4a68304c":"code","13f8660f":"code","1fb29941":"code","2735da69":"code","e3308881":"code","14a1c8d1":"code","024a6fe6":"code","e42780a2":"code","40709551":"code","050c4eb9":"code","d933124d":"code","99333937":"code","8aa082ae":"code","26db6f37":"code","2bd00d33":"code","eb11bc09":"code","8265477b":"code","02a3f261":"code","f60ad830":"code","b10ac927":"code","e42ebef6":"code","a7b407ef":"code","ddff9d39":"code","11eec0bf":"code","bbc7d5b7":"code","7794a0a8":"code","b27f42c8":"code","927ec712":"code","c4737bef":"markdown","79761500":"markdown","5c45a4b4":"markdown","fb00d1e3":"markdown","28c6af68":"markdown","e39d09d2":"markdown","7e03cddd":"markdown","36378b79":"markdown","cad955c4":"markdown","1534bec7":"markdown"},"source":{"312d2b92":"from torch.utils.data import DataLoader\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as T\nimport torch\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport torch.nn as nn\nfrom torchvision.utils import save_image\nimport numpy as np\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nfrom IPython.display import Image","db83e0da":"import os\nDATA_DIR = '..\/input\/animefacedataset'\nprint(os.listdir(DATA_DIR))","d5eea0e9":"image_size = 128\nbatch_size = 64\nstats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)","e5791c47":"train_ds = ImageFolder(DATA_DIR, transform=T.Compose([\n    T.Resize(image_size),\n    T.CenterCrop(image_size),\n    T.ToTensor(),\n    T.Normalize(*stats)]))\n\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)","b720b98c":"def denorm(img_tensors):\n    return img_tensors * stats[1][0] + stats[0][0]","542a1af4":"def show_images(images, nmax=32):\n    fig, ax = plt.subplots(figsize=(16, 16))\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1, 2, 0))\n\ndef show_batch(dl, nmax=32):\n    for images, _ in dl:\n        show_images(images, nmax)\n        break","074bedff":"show_batch(train_dl, 32)","f7cf6cfb":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","6bcad7f0":"device = get_default_device()\ndevice","9512460f":"train_dl = DeviceDataLoader(train_dl, device)","4a68304c":"discriminator = nn.Sequential(\n    # in: 3 x 128 x 128\n\n    nn.Conv2d(3, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(64),\n    # out: 64 x 64 x 64\n\n    nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(128),\n    # out: 128 x 32 x 32\n\n    nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(256),\n    # out: 256 x 16 x 16\n\n    nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(512),\n    # out: 512 x 8 x 8\n    \n    nn.Conv2d(512, 1024, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(1024),\n    # out: 1024 x 4 x 4\n\n    nn.Conv2d(1024, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    # out: 1 x 1 x 1\n\n    nn.Flatten(),\n    nn.Sigmoid())","13f8660f":"discriminator = to_device(discriminator, device)","1fb29941":"latent_size = 512","2735da69":"generator = nn.Sequential(\n    # in: latent_size x 1 x 1\n    nn.ConvTranspose2d(latent_size, 1024, kernel_size=4, stride=1, padding=0, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(1024),\n    # out: 1024 x 4 x 4\n\n    nn.ConvTranspose2d(1024, 512, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(512),\n    # out: 512 x 8 x 8\n\n    nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(256),\n    # out: 256 x 16 x 16\n\n    nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(128),\n    # out: 128 x 32 x 32\n\n    nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.LeakyReLU(0.2, inplace=True),\n    nn.BatchNorm2d(64),\n    # out: 64 x 64 x 64\n\n    nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),\n    nn.Tanh()\n    # out: 3 x 128 x 128\n)","e3308881":"xb = torch.randn(1, latent_size, 1, 1) # random latent tensors\nfake_images = generator(xb)\nprint(fake_images.shape)","14a1c8d1":"generator = to_device(generator, device)","024a6fe6":"import torch\nimport torch.nn.functional as F\n\n\ndef DiffAugment(x, policy='', channels_first=True):\n    if policy:\n        if not channels_first:\n            x = x.permute(0, 3, 1, 2)\n        for p in policy.split(','):\n            for f in AUGMENT_FNS[p]:\n                x = f(x)\n        if not channels_first:\n            x = x.permute(0, 2, 3, 1)\n        x = x.contiguous()\n    return x\n\n\ndef rand_brightness(x):\n    x = x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)\n    return x\n\n\ndef rand_saturation(x):\n    x_mean = x.mean(dim=1, keepdim=True)\n    x = (x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean\n    return x\n\n\ndef rand_contrast(x):\n    x_mean = x.mean(dim=[1, 2, 3], keepdim=True)\n    x = (x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean\n    return x\n\n\ndef rand_translation(x, ratio=0.125):\n    shift_x, shift_y = int(x.size(2) * ratio + 0.5), int(x.size(3) * ratio + 0.5)\n    translation_x = torch.randint(-shift_x, shift_x + 1, size=[x.size(0), 1, 1], device=x.device)\n    translation_y = torch.randint(-shift_y, shift_y + 1, size=[x.size(0), 1, 1], device=x.device)\n    grid_batch, grid_x, grid_y = torch.meshgrid(\n        torch.arange(x.size(0), dtype=torch.long, device=x.device),\n        torch.arange(x.size(2), dtype=torch.long, device=x.device),\n        torch.arange(x.size(3), dtype=torch.long, device=x.device),\n    )\n    grid_x = torch.clamp(grid_x + translation_x + 1, 0, x.size(2) + 1)\n    grid_y = torch.clamp(grid_y + translation_y + 1, 0, x.size(3) + 1)\n    x_pad = F.pad(x, [1, 1, 1, 1, 0, 0, 0, 0])\n    x = x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)\n    return x\n\n\ndef rand_cutout(x, ratio=0.5):\n    cutout_size = int(x.size(2) * ratio + 0.5), int(x.size(3) * ratio + 0.5)\n    offset_x = torch.randint(0, x.size(2) + (1 - cutout_size[0] % 2), size=[x.size(0), 1, 1], device=x.device)\n    offset_y = torch.randint(0, x.size(3) + (1 - cutout_size[1] % 2), size=[x.size(0), 1, 1], device=x.device)\n    grid_batch, grid_x, grid_y = torch.meshgrid(\n        torch.arange(x.size(0), dtype=torch.long, device=x.device),\n        torch.arange(cutout_size[0], dtype=torch.long, device=x.device),\n        torch.arange(cutout_size[1], dtype=torch.long, device=x.device),\n    )\n    grid_x = torch.clamp(grid_x + offset_x - cutout_size[0] \/\/ 2, min=0, max=x.size(2) - 1)\n    grid_y = torch.clamp(grid_y + offset_y - cutout_size[1] \/\/ 2, min=0, max=x.size(3) - 1)\n    mask = torch.ones(x.size(0), x.size(2), x.size(3), dtype=x.dtype, device=x.device)\n    mask[grid_batch, grid_x, grid_y] = 0\n    x = x * mask.unsqueeze(1)\n    return x\n\n\nAUGMENT_FNS = {\n    'color': [rand_brightness, rand_saturation, rand_contrast],\n    'translation': [rand_translation],\n    'cutout': [rand_cutout],\n}","e42780a2":"def train_discriminator(real_images, opt_d):\n    rand_prob = np.random.uniform(0, 1)\n    # Clear discriminator gradients\n    opt_d.zero_grad()\n\n    # Pass real images through discriminator\n    real_preds = discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    #DiffAugment usage with 50% probability\n    if rand_prob < 0.5:\n        fake_images = DiffAugment(fake_images, policy='color,translation,cutout')\n\n    # Pass fake images through discriminator\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_preds = discriminator(fake_images)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n\n    # Update discriminator weights\n    loss = real_loss + fake_loss\n    loss.backward()\n    opt_d.step()\n    return loss.item(), real_score, fake_score","40709551":"def train_generator(opt_g):\n    rand_prob = np.random.uniform(0, 1)\n    # Clear generator gradients\n    opt_g.zero_grad()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_size, 1, 1, device=device)\n    fake_images = generator(latent)\n    #DiffAugment usage with 50% probability\n    if rand_prob < 0.5:\n        fake_images = DiffAugment(fake_images, policy='color,translation,cutout')\n    \n    # Try to fool the discriminator\n    preds = discriminator(fake_images)\n    targets = torch.ones(batch_size, 1, device=device)\n    loss = F.binary_cross_entropy(preds, targets)\n    \n    # Update generator weights\n    loss.backward()\n    opt_g.step()\n    \n    return loss.item()","050c4eb9":"sample_dir = 'generated'\nos.makedirs(sample_dir, exist_ok=True)","d933124d":"def save_samples(index, latent_tensors, show=True):\n    fake_images = generator(latent_tensors)\n    fake_fname = 'generated-images-{0:0=4d}.png'.format(index)\n    save_image(denorm(fake_images), os.path.join(sample_dir, fake_fname), nrow=8)\n    print('Saving', fake_fname)\n    if show:\n        fig, ax = plt.subplots(figsize=(8, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach(), nrow=8).permute(1, 2, 0))","99333937":"#save only one picture\ndef save_sample(file_name, latent_tensors, show=True):\n    fake_images = generator(latent_tensors)[0]\n    save_image(denorm(fake_images), os.path.join(sample_dir, file_name))\n    print('Saving', file_name)\n    if show:\n        fig, ax = plt.subplots(figsize=(1, 1))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(fake_images.cpu().detach()).permute(1, 2, 0))","8aa082ae":"fixed_latent = torch.randn(32, latent_size, 1, 1, device=device)","26db6f37":"def fit(epochs, lr, start_idx=1):\n    torch.cuda.empty_cache()\n    \n    # Losses & scores\n    losses_g = []\n    losses_d = []\n    real_scores = []\n    fake_scores = []\n    \n    # Create optimizers\n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images, _ in tqdm(train_dl):\n            # Train discriminator\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            # Train generator\n            loss_g = train_generator(opt_g)\n            \n        # Record losses & scores\n        losses_g.append(loss_g)\n        losses_d.append(loss_d)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        # Log losses & scores (last batch)\n        print(\"Epoch [{}\/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))\n    \n        # Save generated images\n        #torch.save(generator.state_dict(), os.path.join('\/content\/gdrive\/MyDrive\/anime', 'generator_epoch-{}.pt'.format(epoch + start_idx)))\n        #torch.save(discriminator.state_dict(), os.path.join('\/content\/gdrive\/MyDrive\/anime', 'discriminator_epoch-{}.pt'.format(epoch + start_idx)))\n        save_samples(epoch+start_idx, fixed_latent, show=False)\n    \n    return losses_g, losses_d, real_scores, fake_scores","2bd00d33":"lr = 0.00015\nepochs = 50","eb11bc09":"history = fit(epochs, lr)","8265477b":"rand = torch.randn(1, latent_size, 2, 2, device=device) # random latent tensors\nsave_sample('example.png', rand)","02a3f261":"Image('.\/generated\/generated-images-0001.png')","f60ad830":"Image('.\/generated\/generated-images-0005.png')","b10ac927":"Image('.\/generated\/generated-images-0010.png')","e42ebef6":"Image('.\/generated\/generated-images-0015.png')","a7b407ef":"Image('.\/generated\/generated-images-0020.png')","ddff9d39":"Image('.\/generated\/generated-images-0025.png')","11eec0bf":"Image('.\/generated\/generated-images-0030.png')","bbc7d5b7":"Image('.\/generated\/generated-images-0035.png')","7794a0a8":"losses_g, losses_d, real_scores, fake_scores = history","b27f42c8":"plt.plot(losses_d, '-')\nplt.plot(losses_g, '-')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['Discriminator', 'Generator'])\nplt.title('Losses');","927ec712":"\nplt.plot(real_scores, '-')\nplt.plot(fake_scores, '-')\nplt.xlabel('epoch')\nplt.ylabel('score')\nplt.legend(['Real', 'Fake'])\nplt.title('Scores');","c4737bef":"# Introduction\n\nI have used another peoples work here, so please check them out:\n### 1) https:\/\/jovian.ai\/aakashns\/06b-anime-dcgan\n### 2) https:\/\/github.com\/mit-han-lab\/data-efficient-gans\n\nThe main purpose of Generative Adversarial Networks(GAN) is generating, in our case images. GAN's are generally referred to as a supervised form of learning, or supervised learning, it means that it trains to generate new images based on existing ones. In short, GAN consists of 2 parts: discriminator and generator, first one tries to differentiate fake images, the second one tries to generate a better pictures. The main sheme, representing this approach is shown below. In this Notebook i will try to generate a bigger anime face pictures using DiffAugment, wich helps to get a better result with small dataset, but may also improove generating in anime faces. Here im trying to generate 128x128 pixel pictures.  \nFor more info about GAN's please read this [article](https:\/\/machinelearningmastery.com\/what-are-generative-adversarial-networks-gans\/).\n![image.png](attachment:image.png)","79761500":"## DiffAugment code\nWill be used later in training functions only.","5c45a4b4":"### Please upvote if you have found this notebook helpful OwO\/","fb00d1e3":"## Loading the Data","28c6af68":"### I will be tuning hyperparams and add some changes, because it starts to generate pretty good faces at almost first epoch and crashes around 25th.","e39d09d2":"## Training functions","7e03cddd":"## Training model","36378b79":"## Using GPU","cad955c4":"## Defining model","1534bec7":"### Generated pictures saving"}}