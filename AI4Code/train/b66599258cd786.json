{"cell_type":{"89044c57":"code","2d73e311":"code","f54843e7":"code","2f9694cf":"code","69ee495e":"code","c44bd395":"code","5beae3f4":"code","d7dea9a9":"code","b6c90347":"code","6155df89":"code","9cbad84b":"code","a0933341":"code","abd9269e":"code","345f23b4":"code","3e454fd3":"code","537a567d":"code","ac3c1e2c":"code","e83c8343":"code","3d17d96b":"code","c5fc24e2":"code","dd636b73":"code","e279d289":"code","d50df1b4":"code","67c61324":"code","a58d638d":"code","2215a6a3":"code","4d6c23fa":"code","4d7316f1":"code","eb5ea411":"code","c57761b0":"code","3cd206c0":"code","7ab108d0":"code","a666fd3d":"code","5da13fe3":"code","3d710138":"code","a0517fd1":"code","ee7c98b6":"code","7e22f655":"code","d115d690":"code","38872c1a":"code","cb4f418f":"code","08207e6b":"code","0fc1f625":"code","cbc5bd7a":"code","571e716b":"code","24933a5a":"code","668adc35":"code","7e8322f9":"code","b05fa341":"code","c5aaad08":"code","140ef4b6":"code","ee949e82":"code","0de3d4d6":"code","1def223b":"code","6d8daaf6":"code","e1393f5e":"code","b57d0848":"code","794858e3":"code","3b1e8558":"code","ce9fc08d":"code","b14d3d76":"code","cd7cab4c":"code","d088b2d4":"code","de3823c8":"code","c029673b":"code","7d3a3636":"code","8e2d93eb":"code","0752d5fa":"code","40f49a33":"code","6f7fa5d2":"code","93529a4b":"code","7510e823":"code","12d7f528":"code","7135970c":"code","a011b8c9":"code","ca2c827d":"code","29ba12dc":"code","98f3174e":"code","3e68ff45":"code","59d9cbc1":"code","c4406cc9":"code","1c760e2e":"code","87e584f5":"code","530384ef":"code","c3d62cc3":"markdown","3a30aef6":"markdown","4ff030e9":"markdown","bf001368":"markdown","0797cffe":"markdown"},"source":{"89044c57":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom scipy import stats\nfrom scipy.stats import norm, skew\n","2d73e311":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f54843e7":"print(train.head())\nprint('**'* 150)\nprint(test.head())","2f9694cf":"print(train.info())\nprint('**'* 50)\nprint(test.info())","69ee495e":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show() ","c44bd395":"plt.figure(figsize=(30,8))\nsns.heatmap(train.corr(),cmap='coolwarm',annot = True)\nplt.show()","5beae3f4":"corr = train.corr()","d7dea9a9":"corr[corr['SalePrice']>0.3].index","b6c90347":"train.info()","6155df89":"train = train[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'SalePrice']]\ntest=test[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF']]","9cbad84b":"sns.lmplot(x='1stFlrSF',y='SalePrice',data=train) # 1stFlrSF seems very corelated with SalePrice.","a0933341":"plt.scatter(x= 'GrLivArea', y='SalePrice', data = train)","abd9269e":"plt.figure(figsize=(16,8))\nsns.boxplot(x='GarageCars',y='SalePrice',data=train)\nplt.show()","345f23b4":"sns.lmplot(x='OverallQual',y='SalePrice',data=train)","3e454fd3":"sns.lmplot(x='GarageArea',y='SalePrice',data=train)\n\n","537a567d":"plt.figure(figsize=(16,8))\nsns.barplot(x='FullBath',y = 'SalePrice',data=train)\nplt.show()","ac3c1e2c":"#missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","e83c8343":"#dealing with missing data\ntrain = train.drop((missing_data[missing_data['Total'] > 81]).index,1)","3d17d96b":"train.isnull().sum().sort_values(ascending=False).head(20)","c5fc24e2":"#missing data\ntotal_test = test.isnull().sum().sort_values(ascending=False)\npercent_test = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total_test, percent_test], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","dd636b73":"test = test.drop((missing_data[missing_data['Total'] > 78]).index,1)","e279d289":"#dealing with missing data\ntest = test.drop((missing_data[missing_data['Total'] > 78]).index,1)","d50df1b4":"test.isnull().sum().sort_values(ascending=False).head(20)","67c61324":"train.isnull().sum().sort_values(ascending = False).head(20)","a58d638d":"# Categorical boolean mask\ncategorical_feature_mask = train.dtypes==object\n# filter categorical columns using mask and turn it into alist\ncategorical_cols = train.columns[categorical_feature_mask].tolist()","2215a6a3":"categorical_cols","4d6c23fa":"# Categorical boolean mask\ncategorical_feature_mask_test = test.dtypes==object\n# filter categorical columns using mask and turn it into alist\ncategorical_cols_test = test.columns[categorical_feature_mask_test].tolist()","4d7316f1":"train.head()","eb5ea411":"test.head()","c57761b0":"train.isnull().sum().sort_values(ascending=False).head(20)","3cd206c0":"test.isnull().sum().sort_values(ascending=False).head(20)","7ab108d0":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())","a666fd3d":"#saleprice correlation matrix\nk = 15 #number of variables for heatmap\nplt.figure(figsize=(16,8))\ncorrmat = train.corr()\n# picking the top 15 correlated features\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","5da13fe3":"train = train[cols]\ncols","3d710138":"test=test[cols.drop('SalePrice')]","a0517fd1":"test.isnull().sum().sort_values(ascending=False).head(20)\ntest.head()","ee7c98b6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.drop('SalePrice', axis=1), train['SalePrice'], test_size=0.3, random_state=101)","7e22f655":"# we are going to scale to data\n\ny_train= y_train.values.reshape(-1,1)\ny_test= y_test.values.reshape(-1,1)\n\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)\ny_train = sc_X.fit_transform(y_train)\ny_test = sc_y.fit_transform(y_test)","d115d690":"X_train","38872c1a":"# Creating and Training the Model\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()","cb4f418f":"lm.fit(X_train,y_train)\nprint(lm)","08207e6b":"# print the intercept\nprint(lm.intercept_)\nprint(lm.coef_)","0fc1f625":"# Predictions from our Model *\npredictions = lm.predict(X_test)\npredictions= predictions.reshape(-1,1)\n","cbc5bd7a":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","571e716b":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(predictions, label = 'predict')\nplt.show()","24933a5a":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","668adc35":"from sklearn import ensemble\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import mean_squared_error, r2_score","7e8322f9":"params = {'n_estimators': 100, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.05, 'loss': 'ls'}\nclf = ensemble.GradientBoostingRegressor(**params)\n\nclf.fit(X_train, y_train)","b05fa341":"clf_pred=clf.predict(X_test)\nclf_pred= clf_pred.reshape(-1,1)","c5aaad08":"print('MAE:', metrics.mean_absolute_error(y_test, clf_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, clf_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, clf_pred)))","140ef4b6":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,clf_pred, c= 'brown')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","ee949e82":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(clf_pred, label = 'predict')\nplt.show()","0de3d4d6":"from sklearn.tree import DecisionTreeRegressor\ndtreg = DecisionTreeRegressor(random_state = 100)\ndtreg.fit(X_train, y_train)","1def223b":"dtr_pred = dtreg.predict(X_test)\ndtr_pred= dtr_pred.reshape(-1,1)","6d8daaf6":"print('MAE:', metrics.mean_absolute_error(y_test, dtr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, dtr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, dtr_pred)))","e1393f5e":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,dtr_pred,c='green')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","b57d0848":"from sklearn.svm import SVR\nsvr = SVR(kernel = 'rbf')\nsvr.fit(X_train, y_train)","794858e3":"svr_pred = svr.predict(X_test)\nsvr_pred= svr_pred.reshape(-1,1)","3b1e8558":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,svr_pred, c='red')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","ce9fc08d":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(svr_pred, label = 'predict')\nplt.show()","b14d3d76":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)","cd7cab4c":"rfr_pred= rfr.predict(X_test)\nrfr_pred = rfr_pred.reshape(-1,1)","d088b2d4":"print('MAE:', metrics.mean_absolute_error(y_test, rfr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, rfr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, rfr_pred)))","de3823c8":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,rfr_pred, c='orange')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","c029673b":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(rfr_pred, label = 'predict')\nplt.show()","7d3a3636":"import lightgbm as lgb","8e2d93eb":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.1, n_estimators=500,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","0752d5fa":"model_lgb.fit(X_train,y_train)","40f49a33":"lgb_pred = model_lgb.predict(X_test)\nlgb_pred = lgb_pred.reshape(-1,1)","6f7fa5d2":"print('MAE:', metrics.mean_absolute_error(y_test, lgb_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, lgb_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lgb_pred)))","93529a4b":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,lgb_pred, c='orange')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","7510e823":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(lgb_pred, label = 'predict')\nplt.show()","12d7f528":"error_rate=np.array([metrics.mean_squared_error(y_test, predictions),metrics.mean_squared_error(y_test, clf_pred),metrics.mean_squared_error(y_test, dtr_pred),metrics.mean_squared_error(y_test, svr_pred),metrics.mean_squared_error(y_test, rfr_pred)])","7135970c":"plt.figure(figsize=(16,5))\nplt.plot(error_rate)","a011b8c9":"a = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","ca2c827d":"test_id = a['Id']\na = pd.DataFrame(test_id, columns=['Id'])","29ba12dc":"test = sc_X.fit_transform(test)","98f3174e":"test_prediction_lgbm=model_lgb.predict(test)\ntest_prediction_lgbm= test_prediction_lgbm.reshape(-1,1)","3e68ff45":"test_prediction_lgbm","59d9cbc1":"test_prediction_lgbm =sc_y.inverse_transform(test_prediction_lgbm)","c4406cc9":"test_prediction_lgbm = pd.DataFrame(test_prediction_lgbm, columns=['SalePrice'])","1c760e2e":"test_prediction_lgbm.head()","87e584f5":"result = pd.concat([a,test_prediction_lgbm], axis=1)","530384ef":"result.to_csv('Myresult.csv',index =False)","c3d62cc3":"<a id=\"1\"><\/a> <br>\n### **Train Test Split **\nNow let's split the data into a training set and a testing set. We will train out model on the training set and then use the test set to evaluate the model.","3a30aef6":"Here's a brief version of what you'll find in the data description file.\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: $Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","4ff030e9":"# Data Visualization","bf001368":"# Model Comparison","0797cffe":"<a id=\"1\"><\/a> <br>\n# **Linear Regression **\n\nLet's now begin to train out regression model! We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Price column. We will toss out the Address column because it only has text info that the linear regression model can't use."}}