{"cell_type":{"ce27f212":"code","0e84d745":"code","6f849143":"code","02ee5495":"code","00dc4307":"code","fdda1fc7":"code","01e7070a":"code","3284eff1":"code","b1b3c887":"code","a6f2eae4":"code","9f6246de":"code","4659fb7b":"code","13f3327d":"code","441e241c":"code","d0d42254":"code","0a58cc8c":"code","2440f089":"code","16d29b1e":"code","192eec28":"code","8b21faf0":"code","71578a95":"code","caf85f99":"code","ee7da696":"code","52c6e12c":"code","e4bd0ec0":"code","934d3343":"code","a9951209":"code","67429254":"code","d5eb834c":"code","3df75406":"code","c947eb1a":"code","7c77c620":"code","9f923e3a":"code","61082774":"code","f27143df":"code","b0fc6184":"code","50fdcb48":"code","bb852aeb":"code","1134f80c":"code","99f1a6b7":"code","bfcc384e":"code","554ca23c":"code","eacc9cb5":"code","eac12f0f":"code","38074ab5":"code","c360a844":"code","fd512cd7":"code","d129cab2":"code","f880bbee":"code","c6a0412b":"code","04b5ef18":"code","e968cde5":"code","d4156205":"code","4570fc15":"code","6de26d78":"code","6909814d":"code","9d73cfb6":"code","9cac626d":"code","3f2162fe":"code","0a743d0f":"code","30559dd5":"code","3d751423":"code","00f4df64":"code","981b4222":"code","2d3663bc":"code","18b07c50":"code","0d126dd1":"markdown"},"source":{"ce27f212":"# xyz represents any name.\n# To import Pandas: import pandas as pd\n# To create a Data Frame from a Dictionary: xyz_df = pd.DataFrame(xyz_dict)\n# To display first n rows: topnrows = xyz_df.head(n)   Note: Default value is 5\n# To display rows except the last n rows: topnrows = xyz_df.head(-n)\n# To display n rows from bottom: bottonnrows = xyz_df.tail(n)\n# To display bottom rows except the top n rows: bottonnrows = xyz_df.tail(-n)\n# To display a particular value in the DataFrame: value = xyz_df.at(index of the row, \"name of the column\")\n# To change the value of a particular value in the Dataframe: xyz_df.at(2,\"Age\") = 50\n# To display a particular value in the DataFrame using only the index numbers of the rows and column when one doesnt know the name of the cloumn: value = xyz_df.at(index of the row, index of the column)\n# Note: Index position starts from 0\n# To change the value of a particular value in the Dataframe using the position of the values: xyz_df.at(1,2) = 90\n# To read a CSV file: xyz = pd.read_csv(\"xyzz.csv\")\n# To come across the file directory: !ls ..\/input\n# To get metdata of the Dataframe: print(xyz.info())\n# To Check the size of the Dataframe: xyz.shape\n# To make first column as an index. (Note: Index is the name of the list of row lables): xyx_df = pd.read_csv(\"..\/input\/carsdataset\/Automobile.csv\", index_col=0)\n# To select a specific series out of a dataframe. Either works---> cars.length or cars['length'], where 'length' is the name of the column series to be extracted out of the dataframe.\n# Note: in iloc first element of the range is included and the last one excluded. So 0:10 will select entries 0,...,9. In loc on the other hand, 0:10 will select entries 0,...,10.\n# \n# \n# \n# \n# \n","0e84d745":"import pandas as pd\n\nstudent_dict = {'Name': ['Joe', 'Nat', 'Harry','Jack','Jose','Jill','Rose'],\n                'Age': [20, 21, 19,17,18,19,17],\n                'Marks': [85.10, 77.80, 91.54,72,87.9,90,72]}\n\n# create DataFrame from dict\nstudent = pd.DataFrame(student_dict)\n\n# display first 5 rows\ntopRows = student.head()\nprint(topRows)\n","6f849143":"index = pd.MultiIndex.from_tuples([('Standard 1', 'Class A'), ('Standard 1', 'Class B'),\n                                   ('Standard 2', 'Class A'), ('Standard 2', 'Class B'),\n                                   ('Standard 3', 'Class A'), ('Standard 3', 'Class B')],\n                                  names=['Standard', 'Class'])\n\ncolumns = pd.MultiIndex.from_tuples([('Name', 'Surname'),\n('Marks', 'Percentage')])\n\n# create multi-index dataframe\nstudent_dfm = pd.DataFrame([('Joe', 91.56), ('Nat', 87.90),('Harry', 70.10), \n                           ('Sam', 65.48), (\"Jill\", 72), (\"Jane\", 80)],\n                          index=index, columns=columns)\n\ntopRows = student_dfm.head()\nprint(topRows)","02ee5495":"value = student.at[2,\"Age\"]\nprint(value)","00dc4307":"student.at[2,\"Age\"] = 50\nprint(student.at[2,\"Age\"])","fdda1fc7":"value = student.iat[1,2]\nprint(value)","01e7070a":"# read csv file\ncars = pd.read_csv(\"..\/input\/carsdataset\/Automobile.csv\")\n\n# display DataFrame\nprint(cars)","3284eff1":"#to find the size of the dataframe\ncars.shape","b1b3c887":"# get metadata of DataFrame\nprint(cars.info())","a6f2eae4":"# select top 2 rows\nprint(cars.head(2))\n\n# select bottom 2 rows\nprint(cars.tail(2))","9f6246de":"# get a element using row and column labels\nprint(cars.at[1,'company']) \n","4659fb7b":"# to make first column as an index. (Note: Index is the name of the list of row lables)\ncars = pd.read_csv(\"..\/input\/carsdataset\/Automobile.csv\", index_col=0)\ncars.head()","13f3327d":"cars = pd.read_csv(\"..\/input\/carsdataset\/Automobile.csv\")\npd.set_option('max_rows', 5) #to display maximum 5 rows\ncars\n","441e241c":"#To access a particular column. Here we accessed the \"length\" column.\ncars.length","d0d42254":"#To select a specific series out of a dataframe. Either works---> cars.length or cars['length']\ncars['length']","0a58cc8c":"#To select a specific value.\ncars['length'][0]","2440f089":"# Index-based selection, we use: iloc[]\ncars.iloc[0] #to select first row\n\n","16d29b1e":"#to select the entire table\ncars.iloc[:] ","192eec28":"#all rows and second and third columns only.\ncars.iloc[:,1:3] ","8b21faf0":"#all rows and last three columns.\ncars.iloc[:,3:6] ","71578a95":"#all rows and first three columns\ncars.iloc[:,:3] ","caf85f99":"cars.iloc[:,0] #to select first column and all the rows, where : signify every row","ee7da696":"#to select first column and first n rows : iloc[:n,0]\ncars.iloc[:3,0]                     #to select first column and first 3 rows.","52c6e12c":"#to select second and third row only.\ncars.iloc[1:3,0]","e4bd0ec0":"cars.iloc[[0,1,2],0]","934d3343":"# to select last five rows and all the columns\ncars.iloc[-5:] ","a9951209":"#to select last five rows and second column.\ncars.iloc[-5:,1]","67429254":"# For Label-based selection, we use: loc[]\n#to select first entry in the table. Here 0 denote first row and \"company\" is the index or the label of the first column.\ncars.loc[0,\"company\"] ","d5eb834c":"#to select all rows and some particular columns from their labels\ncars.loc[:,[\"engine\",\"mileage\"]]","3df75406":"#to set a partular column as an index\ncars.set_index(\"body-style\")","c947eb1a":"cars = pd.read_csv(\"..\/input\/carsdataset\/Automobile.csv\")\ncars","7c77c620":"cars.engine == \"ohc\"","9f923e3a":"# A Summary funciton, the describe() function \n\ncars.mileage.describe()\n\n# here 75% tells that 75% of the data is less than or equal to 31.","61082774":"#describing a non-numeric data\ncars.engine.describe()","f27143df":"#to find mean \ncars.length.mean()","b0fc6184":"#to see list of unique values\ncars.company.unique()","50fdcb48":"#to see how many times the unique values occur\ncars.company.value_counts()","bb852aeb":"#i didnot understand Map function ","1134f80c":"#we made groups of cars on the basis of mileage and then counted how many times value in each group appeared \ncars.groupby(\"mileage\").mileage.count()","99f1a6b7":"#value_counts is shortcut to the groupby() operation.\ncars.mileage.value_counts()","bfcc384e":"#to get the minimum length in each mileage group.\ncars.groupby(\"mileage\").length.min()","554ca23c":"#selecting the name of the first car company from each mileage group in the dataset.\ncars.groupby('mileage').apply(lambda df: df.company.iloc[0])","eacc9cb5":"cars.groupby('sunroof').apply(lambda df: df.company.iloc[0])","eac12f0f":"# group by more than one column. Here's how we would pick out the maximum length by mileage and sunroof:\ncars.groupby(['mileage', 'sunroof']).apply(lambda df: df.loc[df.length.idxmax()])","38074ab5":"#agg() lets you run a bunch of different functions on your DataFrame simultaneously.\ncars.groupby(['company']).length.agg([len, min, max]) #here len gives total number of cars belonging to a company group, min gives the minimum length, while max gives the maximum length.\n","c360a844":"#a multi-index\ncars.groupby(['mileage', 'sunroof']).length.agg([len])\n","fd512cd7":"#to reset the index\ncars.reset_index()","d129cab2":"cars_reviewed = cars.groupby(['mileage', 'sunroof']).length.agg([len])\ncars_reviewed","f880bbee":"cars_reviewed.reset_index()","c6a0412b":"cars_reviewed = cars_reviewed.reset_index()\ncars_reviewed.sort_values(by='len')","04b5ef18":"#sorting as per length. By default it happens in  ascending order.\ncars.sort_values(by='length')","e968cde5":"#when want to sort in descending order\ncars.sort_values(by='length', ascending=False)","d4156205":"#sorting by index\ncars.sort_index()","4570fc15":"#sorting by more than one column\ncars.sort_values(by=['company', 'length'])","6de26d78":"#dtype is used to find the type of the specific column.\ncars.length.dtype","6909814d":"#to find type of all the columns\ncars.dtypes","9d73cfb6":"#to convert one column type to another\ncars.mileage.astype('float64')","9cac626d":"#Type of the index column\ncars.index.dtype","3f2162fe":"#method for missing data. to select NaN entries, we use pd.isnull() (or its companion pd.notnull())\ncars[pd.isnull(cars.company)]\n#since there is no NaN entry in the country column, it will display just the heads of the columns.","0a743d0f":"#to replace NaN with a particular value or string like \"unknown\".\ncars.mileage.fillna(\"Unknown\")","30559dd5":"#to replace some value\ncars.company.replace(\"volvo\", \"i10\")","3d751423":"#to rename a column name, for example from company to organization\ncars.rename(columns={'company': 'organization'})","00f4df64":"cars.rename(index={0: 'firstEntry', 1: 'secondEntry'})","981b4222":"#to set or change the names of the row and the column index\ncars.rename_axis(\"S.no.\", axis='rows').rename_axis(\"Fields\", axis='columns')","2d3663bc":"#Lambda function is used to define a function without the need to give that function a name and the return option.\ntables = [lambda x=x: x*10 for x in range(1, 11)]\n\nfor table in tables:\n\tprint(table())\n","18b07c50":"# Example of lambda function using if-else\nMax = lambda a, b : a if(a > b) else b\n\nprint(Max(3, 2))\n","0d126dd1":"*Hierarchical DataFrame of Student data with two-column headers where column labels \u2018Name\u2018 and \u2018Marks\u2018 are at level 0 and \u2018Surname\u2018 and \u2018Percentage\u2018 at level 1. Similarly, two-row indexes are index \u2018Standard\u2018 at level 0 and \u2018Class\u2018 at level 1 of the DataFrame.*"}}