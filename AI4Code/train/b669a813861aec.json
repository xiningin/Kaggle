{"cell_type":{"e9a27552":"code","d2b8c508":"code","363d0adb":"code","58f53787":"code","53bccc17":"code","91afdafe":"code","50adaec3":"code","4984c4a5":"code","8eeef2e9":"code","1f3fee23":"code","60667fab":"code","b0ccc471":"code","063ad73e":"code","371ffc8b":"code","1b2a4955":"code","8a3592d6":"code","cb2a94eb":"code","382556c5":"code","b331ecfb":"code","e6cd23f2":"code","c1e35fc7":"code","de8051dd":"code","c93233ac":"markdown","b6dac66c":"markdown","bc100d4e":"markdown","6b980e81":"markdown","ea769666":"markdown","a91e1bbe":"markdown","58b9f8de":"markdown"},"source":{"e9a27552":"import os\nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Model\nfrom keras.layers import Flatten, Dense, Dropout, BatchNormalization, Input, Conv2D, MaxPooling2D\nfrom keras.optimizers import Adam\nfrom keras.utils import plot_model\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom sklearn.metrics import classification_report, confusion_matrix, f1_score\n\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)","d2b8c508":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","363d0adb":"train.head()","58f53787":"test.head()","53bccc17":"X_train_full, y_train_full = train.iloc[:, 1:].values, train['label'].values\nX_test = test.values","91afdafe":"print('X_train_full shape:', X_train_full.shape)\nprint('y_train_full shape:', y_train_full.shape)\nprint('X_test shape:', X_test.shape)","50adaec3":"X_train_full = X_train_full.reshape((X_train_full.shape[0], 28, 28, 1))\nX_test = X_test.reshape((X_test.shape[0], 28, 28, 1))","4984c4a5":"X_train, X_valid = X_train_full[:-4200], X_train_full[-4200:]\ny_train, y_valid = y_train_full[:-4200], y_train_full[-4200:]","8eeef2e9":"print('X_train shape:', X_train.shape)\nprint('y_train shape:', y_train.shape)\nprint('X_valid shape:', X_valid.shape)\nprint('y_valid shape:', y_valid.shape)","1f3fee23":"print(f'X_train Range: {np.min(X_train)}-{np.max(X_train)}')\nprint(f'X_test Range: {np.min(X_test)}-{np.max(X_test)}')\nprint(f'X_valid Range: {np.min(X_valid)}-{np.max(X_valid)}')","60667fab":"class_names = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","b0ccc471":"EPOCHS = 30\nBATCH_SIZE = 32\nLEARNING_RATE = 0.0001","063ad73e":"def DigitNet(input_shape=(28, 28, 1)):\n\n    input = Input(shape=input_shape)\n\n    layer1 = Conv2D(filters=64, kernel_size=3, padding='SAME', activation='relu')(input)\n\n    layer2 = Conv2D(filters=64, kernel_size=3, padding='SAME', activation='relu')(layer1)\n    layer2 = MaxPooling2D(pool_size=2)(layer2)\n    layer2 = Dropout(0.2)(layer2)\n    layer2 = BatchNormalization()(layer2)\n\n    layer3 = Conv2D(128, 3, activation='relu', padding='SAME')(layer2)\n\n    layer4 = Conv2D(128, 3, padding='SAME', activation='relu')(layer3)\n    layer4 = MaxPooling2D(pool_size=2)(layer4)\n    layer4 = Dropout(0.2)(layer4)\n    layer4 = BatchNormalization()(layer4)\n\n    layer5 = Conv2D(256, 3, activation='relu', padding='SAME')(layer4)\n    layer5 = MaxPooling2D(2)(layer5)\n    layer5 = Dropout(0.2)(layer5)\n    layer5 = BatchNormalization()(layer5)\n\n    layer6 = Flatten()(layer5)\n\n    layer7 = Dense(1024, activation='relu')(layer6)\n    layer7 = Dropout(0.4)(layer7)\n\n    layer8 = Dense(512, activation='relu')(layer7)\n    \n    output = Dense(10, activation='softmax')(layer8)\n\n    digit_model = Model(inputs=input, outputs=output)\n\n    digit_model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    digit_model.summary()\n\n    return digit_model","371ffc8b":"digit_net = DigitNet()","1b2a4955":"history = digit_net.fit(X_train, y_train,\n                batch_size=BATCH_SIZE,\n                epochs=EPOCHS, \n                validation_data=(X_valid, y_valid))","8a3592d6":"predictions = digit_net.predict(X_test)","cb2a94eb":"y_pred = np.argmax(predictions, axis=1)","382556c5":"y_pred","b331ecfb":"len(X_test)","e6cd23f2":"y_pred_df = pd.DataFrame({'ImageID': range(1, len(X_test)+1), 'Label': y_pred})","c1e35fc7":"y_pred_df.head()","de8051dd":"y_pred_df.to_csv('\/kaggle\/working\/Predictions.csv', index=False)","c93233ac":"# Export Predictions","b6dac66c":"# Import Modules","bc100d4e":"# Prediction using a Model","6b980e81":"# Load Datasets\n","ea769666":"# Model Training","a91e1bbe":"# Model Building","58b9f8de":"# Data Preprocessing"}}