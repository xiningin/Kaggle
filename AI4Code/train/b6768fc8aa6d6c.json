{"cell_type":{"95dabf1f":"code","71693a23":"code","6ae49b5f":"code","e1746dd9":"code","16d7da72":"code","932ddc8a":"code","41c05f66":"code","18b9d870":"code","5675ce01":"code","67e748c5":"code","7ed91dde":"code","5c19c267":"code","e6283279":"code","c0fe506c":"code","97d7f780":"code","81a445b8":"code","1a2808af":"code","17d36a10":"code","f1b793b5":"code","e7cc845b":"code","90be2813":"code","ad684a29":"code","db508f62":"code","5867ada6":"code","8477ee01":"code","083daaae":"code","0cd2fbfb":"code","ac0568ee":"code","52cb6038":"code","cbf3c529":"code","13ed67cb":"code","1dac940e":"code","6b1e62ee":"code","02b970b3":"code","45aceeb8":"code","16b268bb":"code","20583f66":"code","dc8c3eb6":"code","103b44e5":"code","08d60f2a":"code","0e14be56":"code","342bbdc7":"code","be8a4f9c":"markdown","7a3d6dc8":"markdown","979ff94c":"markdown","035d9650":"markdown","8ee8fb4a":"markdown","a2f8ca13":"markdown","56242830":"markdown","92ce160b":"markdown","42b2e95d":"markdown","e83aceb9":"markdown","36384212":"markdown","e937b952":"markdown","863759a7":"markdown","d75ca414":"markdown","8d628e31":"markdown","3f7a5e21":"markdown","6cd66fb3":"markdown","780e8e79":"markdown","778556b0":"markdown","9bddfbda":"markdown","b6f12d25":"markdown","6cea72a1":"markdown","33d7ffdf":"markdown","74b1a375":"markdown","f931744c":"markdown","4f333dd9":"markdown","4d9b034d":"markdown","d3dffd77":"markdown","bf21b81f":"markdown"},"source":{"95dabf1f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn import metrics\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","71693a23":"data = pd.read_csv('\/kaggle\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\noriginal = data.copy()\ndata.head()","6ae49b5f":"data.shape","e1746dd9":"data.isnull().sum() # No null values","16d7da72":"data.columns","932ddc8a":"data.nunique().sort_values()","41c05f66":"data = data.drop(columns=['Over18','StandardHours','EmployeeCount','EmployeeNumber'])\ndata = data.drop(columns=['HourlyRate', 'DailyRate', 'MonthlyRate', 'MonthlyIncome'])\ndata.head()","18b9d870":"#Segregating categorical and continuous features\ncateg = data.dtypes[data.dtypes == object].index\ncont = list(set(data.columns) - set(categ))\nlen(cont)","5675ce01":"bins=10\nj=1\nfig = plt.figure(figsize = (20, 30))\nfor i in cont:\n    plt.subplot(5,4,j)\n    plt.boxplot(data[i])\n    j=j+1\n    plt.xlabel(i)\n    plt.legend()\nplt.show()","67e748c5":"fig = px.histogram(data['Age']-data['TotalWorkingYears'],width=600,height=400,\n                  title='Age - Total Working Years',color_discrete_sequence=[px.colors.qualitative.Set3[5]])\nfig.update_layout(showlegend=False)\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","7ed91dde":"fig = px.histogram(data['TotalWorkingYears']-data['YearsAtCompany'],width=600,height=400,\n                  title='Total Working Years - Total Working Years in Company',color_discrete_sequence=[px.colors.qualitative.Set3[5]])\nfig.update_layout(showlegend=False)\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","5c19c267":"fig = px.histogram(data['TotalWorkingYears']-data['YearsSinceLastPromotion'],width=600,height=400,\n                  title='Total Working Years - Years Since Last Promotion',color_discrete_sequence=[px.colors.qualitative.Set3[5]])\nfig.update_layout(showlegend=False)\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","e6283279":"data['Attrition'].value_counts()","c0fe506c":"data['Attrition'] = le.fit_transform(data['Attrition'])# Yes=1, No=0","97d7f780":"def check_plot(col,name):\n    yearattr = pd.crosstab(col,data['Attrition'])\n    yearattr['Total'] = (yearattr[0]+yearattr[1])\n    yearattr['Percent'] = (100*yearattr[1])\/yearattr['Total']\n\n    fig = go.Figure()  \n    trace1 = go.Bar(name='Attrition',\n                    x=yearattr.index,\n                    y=yearattr[1],\n                    marker_color = px.colors.qualitative.Plotly[1],\n                    textposition='auto')\n    trace2 = go.Bar(name='Employees',\n                    x=yearattr.index,\n                    y=yearattr.Total.values,\n                    marker_color = px.colors.qualitative.Plotly[2],\n                    textposition='auto')\n    trace3 = go.Bar(name='Percent',\n                    x=yearattr.index,\n                    y=yearattr.Percent.values,\n                    marker_color = px.colors.qualitative.Plotly[9],\n                    textposition='auto')\n\n    #fig = make_subplots(rows=1,cols=1,subplot_titles=('No Overtime'))\n    fig.add_trace(trace1)\n    fig.add_trace(trace2)\n    fig.add_trace(trace3)\n\n    fig['layout']['yaxis1'].update(title='Count')\n    fig['layout']['xaxis1'].update(title=name)\n    fig.update_layout(title=\"Checking for variable \"+name)\n    fig.update_layout(plot_bgcolor = \"white\")\n\n    fig.show()","81a445b8":"check_plot(data['YearsAtCompany'],'Years At Company')","1a2808af":"data['EducationField'] = data['EducationField'].replace(['Life Sciences','Medical'],'Technical Degree')\ndata['EducationField'] = data['EducationField'].replace(['Marketing','Human Resources','Other'],'Non Technical Degree')\ndata['JobRole'] = data['JobRole'].replace(['Research Scientist','Laboratory Technician','Research Director'],'Technical')\ndata['JobRole'] = data['JobRole'].replace(['Sales Executive','Sales Representative','Human Resources'],'Non Technical')\ndata['JobRole'] = data['JobRole'].replace(['Manager','Manufacturing Director','Healthcare Representative'],'Semi Technical')","17d36a10":"data['EducationField'].value_counts()","f1b793b5":"df3 = data[['EnvironmentSatisfaction','JobInvolvement','JobSatisfaction','RelationshipSatisfaction','WorkLifeBalance','StockOptionLevel','OverTime','Attrition']]\ndf3['AvgSatisfaction'] = (df3['EnvironmentSatisfaction']+df3['JobSatisfaction']+df3['RelationshipSatisfaction'])\/3\ndf3","e7cc845b":"cross1 = pd.DataFrame(pd.crosstab([df3['OverTime'],df3['JobInvolvement']],df3['Attrition']))\ncross1['Total'] = cross1[0]+cross1[1]\ncross1['Perc'] = cross1['Total']*100\/1470\ncross1['Attr'] = (cross1[1]*100) \/ cross1['Total']","90be2813":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n                    \ntrace1 = go.Bar(name='Attrition %',\n                x=cross1.loc['No'].index,\n                y=cross1.loc['No']['Attr'],\n                marker_color = 'red',\n                textposition='auto')\ntrace2 = go.Bar(name='% Employees',\n                x=cross1.loc['No'].index,\n                y=cross1.loc['No']['Perc'],\n                marker_color = px.colors.qualitative.Plotly[2],\n                textposition='auto')\ntrace3 = go.Bar(name='Attrition %',\n                x=cross1.loc['Yes'].index,\n                y=cross1.loc['Yes']['Attr'],\n                marker_color = 'red',\n                textposition='auto', showlegend=False)\ntrace4 = go.Bar(name='% Employees',\n                x=cross1.loc['Yes'].index,\n                y=cross1.loc['Yes']['Perc'],\n                marker_color = px.colors.qualitative.Plotly[2],\n                textposition='auto', showlegend=False)\n\nfig = make_subplots(rows=1,cols=2,subplot_titles=('No Overtime','Yes Overtime'))\nfig.add_trace(trace1,1,1)\nfig.add_trace(trace2,1,1)\nfig.add_trace(trace3,1,2)\nfig.add_trace(trace4,1,2)\n\nfig['layout']['yaxis1'].update(title='Percentage')\nfig['layout']['yaxis2'].update(title='Percentage')\nfig['layout']['xaxis1'].update(title='JobInvolvement')\nfig['layout']['xaxis2'].update(title='JobInvolvement')\nfig.update_layout(plot_bgcolor = \"white\")\n\nfig.show()","ad684a29":"cross2 = pd.DataFrame(pd.crosstab([df3['JobInvolvement'],df3['StockOptionLevel']],df3['Attrition']))\ncross2['Total'] = cross2[0]+cross2[1]\ncross2['Perc'] = cross2['Total']*100\/1470\ncross2['Attr'] = (cross2[1]*100) \/ cross2['Total']","db508f62":"fig = make_subplots(rows=2,cols=2,subplot_titles=('JobInvolvement 1','JobInvolvement 2','JobInvolvement 3','JobInvolvement 4'))\nx=1\ny=1\nbinary=False\nfor i in range(1,5):\n    if(i==4):\n        binary=True\n    trace = go.Bar(name='Attrition %',\n                    x=cross2.loc[i].index,\n                    y=cross2.loc[i]['Attr'].values,\n                    marker_color = 'red',\n                    textposition='auto', showlegend=binary)\n    fig.append_trace(trace,x,y)\n    trace = go.Bar(name='% Employees',\n                    x=cross2.loc[i].index,\n                    y=cross2.loc[i]['Perc'].values,\n                    marker_color = px.colors.qualitative.Plotly[2],\n                    textposition='auto', showlegend=binary)\n    fig.append_trace(trace,x,y)\n    y=y+1\n    if(y==3):\n        y=1\n        x=x+1\n    fig['layout']['xaxis'+str(i)].update(title='StockOptionLevel')   \n    fig['layout']['yaxis'+str(i)].update(title='Percentage')\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","5867ada6":"cross3 = pd.DataFrame(pd.crosstab([df3['OverTime'],df3['WorkLifeBalance']],df3['Attrition']))\ncross3['Total'] = cross3[0]+cross3[1]\ncross3['Perc'] = cross3['Total']*100\/1470\ncross3['Attr'] = (cross3[1]*100) \/ cross3['Total']","8477ee01":"trace1 = go.Bar(name='Attrition %',\n                x=cross3.loc['No'].index,\n                y=cross3.loc['No']['Attr'],\n                marker_color = 'red',\n                textposition='auto',)\ntrace2 = go.Bar(name='% Employees',\n                x=cross3.loc['No'].index,\n                y=cross3.loc['No']['Perc'],\n                marker_color = px.colors.qualitative.Plotly[2],\n                textposition='auto')\ntrace3 = go.Bar(name='Attrition %',\n                x=cross3.loc['Yes'].index,\n                y=cross3.loc['Yes']['Attr'],\n                marker_color = 'red',\n                textposition='auto',showlegend=False)\ntrace4 = go.Bar(name='% Employees',\n                x=cross3.loc['Yes'].index,\n                y=cross3.loc['Yes']['Perc'],\n                marker_color = px.colors.qualitative.Plotly[2],\n                textposition='auto',showlegend=False)\n\nfig = make_subplots(rows=1,cols=2,subplot_titles=('No Overtime','Yes Overtime'))\nfig.append_trace(trace1,1,1)\nfig.append_trace(trace2,1,1)\nfig.append_trace(trace3,1,2)\nfig.append_trace(trace4,1,2)\n\nfig['layout']['yaxis1'].update(title='Percentage')\nfig['layout']['yaxis2'].update(title='Percentage')\nfig['layout']['xaxis1'].update(title='WorkLifeBalance')\nfig['layout']['xaxis2'].update(title='WorkLifeBalance')\nfig.update_layout(plot_bgcolor = \"white\")\n\nfig.show()","083daaae":"cross4 = pd.DataFrame(pd.crosstab([df3['WorkLifeBalance'],df3['AvgSatisfaction']],df3['Attrition']))\ncross4['Total'] = cross4[0]+cross4[1]\ncross4['Perc'] = cross4['Total']*100\/1470\ncross4['Attr'] = (cross4[1]*100) \/ cross4['Total']","0cd2fbfb":"fig = make_subplots(rows=2,cols=2,subplot_titles=('WorkLifeBalance 1','WorkLifeBalance 2','WorkLifeBalance 3','WorkLifeBalance 4'))\nx=1\ny=1\nbinary=False\nfor i in range(1,5):\n    if(i==4):\n        binary=True\n    trace = go.Bar(name='Attrition %',\n                    x=cross4.loc[i].index,\n                    y=cross4.loc[i]['Attr'].values,\n                    marker_color = 'red',\n                    textposition='auto',showlegend=binary)\n    fig.append_trace(trace,x,y)\n    trace = go.Bar(name='% Employees',\n                    x=cross4.loc[i].index,\n                    y=cross4.loc[i]['Perc'].values,\n                    marker_color = px.colors.qualitative.Plotly[2],\n                    textposition='auto',showlegend=binary)\n    fig.append_trace(trace,x,y)\n    y=y+1\n    if(y==3):\n        y=1\n        x=x+1\n    fig['layout']['xaxis'+str(i)].update(title='AvgSatisfaction')   \n    fig['layout']['yaxis'+str(i)].update(title='Percentage')\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","ac0568ee":"data['AvgSatisfaction'] = df3['AvgSatisfaction']\ndecode = data.copy()","52cb6038":"data=decode.copy()","cbf3c529":"data['Gender'] = le.fit_transform(data['Gender'])# Female = 0, Male = 1\ndata['OverTime'] = le.fit_transform(data['OverTime'])# Yes=1, No=0\ndata['EducationField'] = le.fit_transform(data['EducationField']) # Technical = 1, Non-Tech =0\ndata.head()","13ed67cb":"dep = pd.get_dummies(data['Department'],drop_first=False)\ntrav = pd.get_dummies(data['BusinessTravel'],drop_first=False)\nrole = pd.get_dummies(data['JobRole'],drop_first=False)\nmarital = pd.get_dummies(data['MaritalStatus'],drop_first=False)\ndata.drop(columns=['Department','BusinessTravel','JobRole','MaritalStatus'],inplace=True)\n\n#Keeping drop_first=False improves the results by 2 %\n\ndata = pd.concat([data,dep,trav,role,marital],axis=1)\ndata","1dac940e":"fig = px.bar(data.corr()['Attrition'].drop('Attrition')[:-1], title='Feature Correlation Table',color_discrete_sequence=[px.colors.qualitative.Set3[5]])\nfig.update_layout(plot_bgcolor = \"white\")\nfig.show()","6b1e62ee":"data.drop(columns=['PercentSalaryHike','PerformanceRating'],inplace=True)","02b970b3":"import time\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","45aceeb8":"from sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=5,shuffle=True)\nX = data.drop(columns='Attrition')\ny = data['Attrition']","16b268bb":"from imblearn.over_sampling import SMOTE\nsmote =SMOTE(sampling_strategy='minority')","20583f66":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscaled = scale.fit_transform(X)\nscaled = pd.DataFrame(scaled,columns=X.columns)","dc8c3eb6":"models = {'lr':LogisticRegression(solver='liblinear'),\n          'lgbm':LGBMClassifier(n_estimators =1000,verbose=-1),\n          'rf': RandomForestClassifier(n_estimators=1000),\n          'xgb': XGBClassifier(n_estimators=1000),\n          'lda': LDA()\n         }","103b44e5":"def calc(name):\n    scores=[]\n    acc=[]\n    for i,(train_idx,test_idx) in enumerate(skf.split(scaled,y)):\n            \n            X_train,X_test = X.iloc[train_idx],X.iloc[test_idx]\n            Y_train,Y_test = y[train_idx],y[test_idx]\n            \n            X_train,Y_train = smote.fit_resample(X_train,Y_train) #Handling imbalance after splitting to prevent data leakage.\n\n            start = time.time()\n            model = name\n            model.fit(X_train, Y_train)\n            end = time.time()\n\n            pred_y = model.predict_proba(X_test)[:,1]\n            auc_score = roc_auc_score(Y_test, pred_y )\n            \n            predclass=model.predict(X_test)\n            acc_score = accuracy_score(Y_test, predclass)\n            \n            scores.append(auc_score)\n            acc.append(acc_score)\n\n    scores.append(np.mean(scores))\n    acc.append(np.mean(acc))\n    return scores,acc","08d60f2a":"from sklearn.metrics import classification_report, accuracy_score\nscores ={}\nacc={}\nfor i in models.keys():\n    lst,lst2 = calc(models[i])\n    scores[i]=lst\n    acc[i]=lst2","0e14be56":"df = pd.DataFrame(scores).T\ndf.sort_values(by=5,ascending=False)","342bbdc7":"df = pd.DataFrame(acc).T\ndf.sort_values(by=5,ascending=False)","be8a4f9c":"### DRIVER","7a3d6dc8":"### MODELS","979ff94c":"### **Logistic Regression** performs the best","035d9650":"### One hot encoding","8ee8fb4a":"There is a high attrition for employees working in the company for less than 10 years. The base is also high here.","a2f8ca13":"# 1. Exploratory Data Analysis","56242830":"\n### Dataset prepared\n","92ce160b":"### Importing Data","42b2e95d":"# 2. Feature Engineering","e83aceb9":"### SCALING","36384212":"Some **amazing** notebooks to check :  \n1. https:\/\/www.kaggle.com\/vincentlugat\/ibm-attrition-analysis-and-prediction  \n2. https:\/\/www.kaggle.com\/faressayah\/ibm-hr-analytics-employee-attrition-performance  \n3. https:\/\/www.kaggle.com\/aljaz91\/ibm-s-attrition-tackling-class-imbalance-with-gbm  ","e937b952":"### Small dataset with imbalanced targets","863759a7":"### ACCURACY","d75ca414":"There are 35 attributes, all of which could potentially tell us about the attrition rate. Will start with the number of unique values. A column with single unique value won't contribute anything to our model and a column with too many unique values could cause the algorithm to be ineffective.","8d628e31":"#### If you have made it this far and learned something new, please consider **upvoting**.\n\n#### Open to feedback for improvement. If you want to go through all the failed attempts, check V12.\n\n#### Thanks !\n\n### Special mention to **@[pavansubhash](https:\/\/www.kaggle.com\/pavansubhasht)** for providing this dataset.","3f7a5e21":"Based on the number of unique values and checking the values of each column:\n\n1. Will drop Over18, StandardHours and EmployeeCount as they contain a single value\n2. Will drop EmployeeNumber as it is unique and just an Identifier value\n3. All attributes with 4,5 and 7 unique values are numeric and don't need any modification\n4. Dropping HourlyRate, DailyRate, MonthlyRate and MonthlyIncome as they are ambiguous.","6cd66fb3":"### MODEL CALCULATIONS","780e8e79":"1. Convert categorical columns to numeric values like Gender, OverTime, Department, BusinessTravel and Marital Status  \n2. Convert JobRole and EducationField into Technical and Non-Technical values since the data is less and there are too many values here. Only for model building process. There is some data loss here.         \n3. Finding average satisfaction of employees","778556b0":"Despite WorkLifeBalance, if an employee is working Overtime, then the attrition rate is also on the higher side. One would assume that WorkLifeBalance should correlate with working Overtime but I guess that is not the case here. Could again be due to smaller size of data.","9bddfbda":"# 3. Model Building","b6f12d25":"Nothing pops as an outlier. Will however check if there is any discrepancy between the number of years. A negative value would depict a condition that is not possible such as working for years more than your age or working years at a company more than your total working years.","6cea72a1":"---","33d7ffdf":"### AUC SCORES","74b1a375":"### HANDLING IMBALANCE","f931744c":"### Label Encode","4f333dd9":"Wouldn't give much importance to this as our labels are binary. Just for visualisation purposes.","4d9b034d":"Attrition is high for those who receive less Stock Options. 2 outliers seem to be employees with Stock Option Level=3 and JobInvolvement=2 and 3. This is because the % Employee base is very small when compared to other columns.","d3dffd77":"### FOLDS","bf21b81f":"We can observe 3 things for the above graph:  \n1. Attrition level is higher when Employees are working Overtime  \n2. Attrition level decreases with increase in Job Involvement for an employee  \n3. Approximately 30% of Employees are working Overtime.  "}}