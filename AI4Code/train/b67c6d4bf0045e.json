{"cell_type":{"709534da":"code","3b4152d9":"code","e988007d":"code","01a5b9f0":"code","90d8041c":"code","62957986":"code","a64a3637":"code","d280aad6":"code","eccfb992":"code","1e51c21d":"code","0b1b1350":"code","8abb73c2":"code","18820071":"code","373c50f5":"code","fcb370f7":"code","d5c0cb48":"code","a581d893":"code","c9a203f2":"code","f48d87bc":"markdown","6d24b969":"markdown","91a40488":"markdown","916c47d1":"markdown","db912da9":"markdown","d928c0f3":"markdown","ffbd8e29":"markdown","a0adfafb":"markdown","84f18694":"markdown"},"source":{"709534da":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data\nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.simplefilter('ignore')","3b4152d9":"# Set parameters\nmodel_name = \"Life\" # name of the cognitive map (CM)\ninput_growth = 10  # initial change of the input indicator (vertice of CM) for modeling, %\nT = 20  # simulation duration","e988007d":"# # Import files with data from Kaggle dataset\n# dataset_files = []\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         dataset_files.append(filename)\n# dataset_files\n# [s for s in dataset_files if model_name in s]","01a5b9f0":"# Data for given model\n# Names of vertices of the cognitive map\nn_cm = pd.read_csv(f'..\/input\/cognitive-modeling-of-complex-systems\/{model_name}_names.csv', header=0, sep=';')\nn_cm","90d8041c":"# Data for given model\n# Weights of the cognitive map\nw_cm = pd.read_csv(f'..\/input\/cognitive-modeling-of-complex-systems\/{model_name}_weights.csv', header=0, sep=';')\nw_cm","62957986":"def stable_cm_check(df):\n    # Checks if the cognitive map is stable\n    # Returns the answer: True or False\n    \n    # Calculation of absolute value of eigenvalues of the matrix of cognitive map weights\n    ev = abs(np.linalg.eig(df)[0])\n    print('Eigenvalues:')\n    print(ev)\n    \n    # Get the maximum eigenvalue\n    ev_max = max(ev)\n    print(f'Maximum eigenvalue is: {ev_max}')\n        \n    # Check whether the maximum eigenvalue (absolute value) is not greater than 1\n    # Stability test\n    if ev_max <= 1:\n        print('Cognitive map is stable')\n        return True\n    else:\n        print('Cognitive map is not stable')\n        return False","a64a3637":"# Check whether the maximum eigenvalue (absolute value) is not greater than 1\ncm_stability = stable_cm_check(w_cm.values)","d280aad6":"# num_input = 5  # If the input vertices are more than 1, then you need to specify the number of the one to be modeled\n# Get number of the input vertices\nn_cm_input = n_cm[n_cm['type']=='input']\nnum_input = int(n_cm_input.index[0])\nnum_input","eccfb992":"# Set initial input data\ninput_vector = np.zeros(len(w_cm))\ninput_vector[num_input] = input_growth\ninput_vector","1e51c21d":"# Initial values in results\ncols = n_cm.name.tolist()\nres = pd.DataFrame(data=dict(zip(cols, list(input_vector))), index=[0])\nres","0b1b1350":"# Modeling\nres_accum = res.copy()  # accumulated results\nif cm_stability:\n    for t in range(T-1):\n        #res = res.append(dict(zip(cols, list(((w_cm.values@(np.array([res.iloc[t, :]]).T)).T)[0]))), ignore_index=True)\n        res = res.append(dict(zip(cols, list(w_cm.values@(res.iloc[t, :])))), ignore_index=True)\n        for col in cols:\n            res_accum.loc[t+1,col] = (res_accum.loc[t,col]+100)*(1+res.loc[t+1,col]\/100)-100","8abb73c2":"res.round(1)","18820071":"res_accum.round(0)","373c50f5":"# Results visualization\nif cm_stability:\n    res.plot(figsize=(15,10), grid=True, title=\"Visualization of cognitive modeling results\")","fcb370f7":"cols","d5c0cb48":"# Interactive visualization\nif cm_stability:\n    res['t'] = res.index\n    fig = px.line(res, x='t', y=[cols[0]], title='Interactive visualization of cognitive modeling results', template='gridon',width=800, height=500)\n    for i in range(len(cols)-1):\n        fig.add_trace(go.Scatter(x=res['t'], y=res[cols[i+1]], mode='lines', name=cols[i+1]))\n    fig.show()","a581d893":"# Results visualization\nif cm_stability:\n    res_accum.plot(figsize=(15,10), grid=True, title=\"Visualization of accumulative results of cognitive modeling\")","c9a203f2":"# Interactive visualization\nif cm_stability:\n    res_accum['t'] = res_accum.index\n    fig = px.line(res_accum, x='t', y=[cols[0]], title='Interactive visualization of accumulative results of cognitive modeling', template='gridon',width=800, height=500)\n    for i in range(len(cols)-1):\n        fig.add_trace(go.Scatter(x=res_accum['t'], y=res_accum[cols[i+1]], mode='lines', name=cols[i+1]))\n    fig.show()","f48d87bc":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","6d24b969":"## 5. Result visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","91a40488":"## Acknowledgements\n\n### Kaggle Dataset:\n* [Cognitive modeling of complex systems](https:\/\/www.kaggle.com\/vbmokin\/cognitive-modeling-of-complex-systems)\n\n### Thanks to: \n* [article](http:\/\/www.improvement.ru\/zametki\/cognitive\/) with the [example in MS Excel](http:\/\/www.improvement.ru\/zip\/Life.zip)","916c47d1":"## 3. Stability test<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","db912da9":"<a class=\"anchor\" id=\"0\"><\/a>\n# Cognitive modeling - model \"Life\"","d928c0f3":"## 4. Modeling and prediction<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","ffbd8e29":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [Stability test](#3)\n1. [Modeling and prediction](#4)\n1. [Result visualization](#5)","a0adfafb":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","84f18694":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)"}}