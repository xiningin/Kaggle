{"cell_type":{"9f86895a":"code","0f1474b2":"code","bd10c394":"code","a5f15335":"code","f2e14e2b":"code","0deda38b":"code","bfe78301":"code","643c1d91":"code","ed91c758":"code","7d8bc5a7":"code","84108ff6":"code","69e56637":"code","5994bdea":"code","4b36c4df":"code","5f03ee83":"code","73a549c5":"code","6c8cebfa":"code","51c4e66f":"code","68e32e0e":"code","4fda6eeb":"code","1f992793":"code","4ea7afb9":"code","4b4c288b":"markdown","689d1c49":"markdown","bf2d0dc2":"markdown"},"source":{"9f86895a":"import calendar\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\ndf = pd.read_csv(\"..\/input\/barcelona-data-sets\/accidents_2017.csv\", encoding = 'ISO-8859-1', sep=\",\") \ndf.head(5)","0f1474b2":"list(df.columns)\ndf.info()\n# Here you can see the number of columns and the data type of each column. ","bd10c394":"# As i saw in the previous code. There are no null values but there are values who are missing. \n# Im replacing Unknown with n.a\ndf.replace('Unknown',np.nan, inplace=True)\ndf.info()\n# Now you can see there are only null values at distric name and neighborhood. \n# For me this wont be important since there are longitude and latitutde coordinates that already give me the location.","a5f15335":"# here i look at the unique district names\ndis_name=df['District Name'].value_counts()\ndis_name","f2e14e2b":"# Because i already have the location via long, latitude i will drop those columns, i will also drop part of the day.\ndf.drop(['District Name','Neighborhood Name','Street', 'Part of the day'],axis=1 ,inplace=True)\ndf['month2'] = df['Month']","0deda38b":"# Here im changing columns names. Replacing spaces by underscores and upper case letters by lower case letters.\ndf.rename(columns=lambda x:x.replace(' ','_').lower(), inplace=True)\n\n# Then i add a column with the year in this case 2017\ndf['year'] = np.repeat(2017,df.shape[0])\n\n# Obtaining the month names \nlist(df.month.unique())\nmonth_to_int = {'January':1,'February':2,'March':3,'April':4,'May':5,'June':6,'July':7,'August':8,'September':9,'October':10,'November':11,'December':12}\ndf['month'].replace(month_to_int,inplace=True)\n# Convert month names into numbers\n\n# Obtaining new month names\nlist(df.month.unique())\n\n# Combining columns month day hour and year to create a single datetime column.\ndf['date']=pd.to_datetime(df[['year', 'month', 'day','hour']])\n# Drop columns hour, day, month, year, weekday\ndf.drop(['hour','day','month','year','weekday'], axis=1, inplace=True)","bfe78301":"# Now i want to see if there are any duplicate rows in the set. \ndf.duplicated().sum()\ndf[df.duplicated()]","643c1d91":"# Dropping duplicates.\ndf.drop_duplicates(inplace=True)\n\n# Shape after dropping duplicates.\ndf.shape","ed91c758":"print('Total number of accidents in 2017 :{}'.format(df.shape[0]))","7d8bc5a7":"# Getting the number of accident per month\naccidents_month = df.groupby(df['date'].dt.month).count().date\n\n# Replacing the month integers by month names.\naccidents_month.index=[calendar.month_name[x] for x in range(1,13)]\n\naccidents_month","84108ff6":"plt.style.use('ggplot')\n\n# Plotting accidents per month\naccidents_month.plot(kind='bar',figsize=(12,7), color='black', alpha=0.5)\n\n# Name x,y labels\nplt.title('Accidents in Barcelona in 2017', fontsize=21)\nplt.xlabel('Month',fontsize=17)\nplt.ylabel('Number of accidents',fontsize=17);","69e56637":"# Number of accident per day of the week\naccidents_day = df.groupby(df['date'].dt.dayofweek).count().date\n\n# Replacing the day integers by day names.\naccidents_day.index=[calendar.day_name[x] for x in range(0,7)]\n\n# Plotting accidents per day\naccidents_day.plot(kind='bar',figsize=(12,7), color='black', alpha=0.5)\n\n# Name x,y labels\nplt.title('Accidents in Barcelona in 2017', fontsize=21)\nplt.xlabel('Day of the week',fontsize=17)\nplt.ylabel('Number of accidents',fontsize=17);","5994bdea":"# Number of accident per hour\naccidents_hour = df.groupby(df['date'].dt.hour).count().date\n\n# Plotting accidents per hour\naccidents_hour.plot(kind='bar',figsize=(12,7), color='black', alpha=0.5)\n\n# Name x,y labels\nplt.title('Accidents in Barcelona in 2017', fontsize=21)\nplt.xlabel('Hour',fontsize=17)\nplt.ylabel('Number of accidents',fontsize=17);","4b36c4df":"# Counting the number of accidents according to the number of vehicles involved\nvehicles_involved = df.vehicles_involved.value_counts()\n# There is no accident with 12 vehicles involved. I included 0 in the Serie for better visualization\nvehicles_involved[12]=0\nvehicles_involved.sort_index(inplace=True)\n\n# Plotting number of car accidents according to the number of vehicles involved\nvehicles_involved.plot(kind='bar',figsize=(12,7), color='black', alpha=0.5)\n\n# Name x,y labels\nplt.title('Accidents in Barcelona in 2017',fontsize=21)\nplt.xlabel('Vehicles involved',fontsize=17)\nplt.ylabel('Number of accidents',fontsize=17);\n\n# Printting a label above each bar indicating the number of accidents\nfor index in vehicles_involved.index:\n    plt.text(x=index,y=vehicles_involved.loc[index],s=str(vehicles_involved.loc[index]),horizontalalignment='center')","5f03ee83":"# Serie with number of mild injuries and serious injuries\ninjuries = df[['mild_injuries','serious_injuries']].sum()\nprint(injuries)","73a549c5":"# Number of serious injuries per day of the week\naccidents_serious = df[df['serious_injuries']!=0].groupby(df['date'].dt.dayofweek).sum().serious_injuries\n# Percentage of serious injuries per day of the week\npercentage_serious = accidents_serious\/accidents_serious.sum()\n\n# Number of mild injuries per day of the week\naccidents_mild = df[df['mild_injuries']!=0].groupby(df['date'].dt.dayofweek).sum().mild_injuries\n# Percentage of mild injuries per day of the week\npercentage_mild = accidents_mild\/accidents_mild.sum()\n\n# Combining both series as a dataframe in order to plot as a side by side bar\npercentages = pd.DataFrame({'Serious injures':percentage_serious,'Mild injuries':percentage_mild})\npercentages.plot(kind='bar',figsize=(12,7),color=['red','green'],alpha=0.5)\n\n# Naming\nplt.title('Rate of injuries type by day of the week',fontsize=21)\nplt.xlabel('Day of the week',fontsize=17)\nplt.ylabel('Percentage',fontsize=17)\nplt.xticks(np.arange(7),[calendar.day_name[x] for x in range(0,7)]);","6c8cebfa":"# And i do the same for Hour of the day\nserious_hour = df[df['serious_injuries']!=0].groupby(df['date'].dt.hour).count().serious_injuries\npercentage_hour_serious = serious_hour\/serious_hour.sum()\nmild_hour = df[df['mild_injuries']!=0].groupby(df['date'].dt.hour).count().mild_injuries\npercentage_hour_mild = mild_hour\/mild_hour.sum()\n\npercentages_hour = pd.DataFrame({'Serious injures':percentage_hour_serious,'Mild injuries':percentage_hour_mild})\npercentages_hour.plot(kind='bar',figsize=(12,7),color=['red','green'],alpha=0.5)\nplt.title('Rate of injuries type by hour of the day',fontsize=21)\nplt.xlabel('Hour of the day',fontsize=17)\nplt.ylabel('Percentage',fontsize=17)","51c4e66f":"x = df['longitude']\ny = df['latitude']\n\nplt.scatter( x, y, s=1)\nplt.xlabel('longitude')\nplt.ylabel('latitude')\n\nplt.show()\n# Here is depicted the accidents of barcelona like a map with the sea to the south","68e32e0e":"df.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n    s=df[\"victims\"], label=\"victims\", figsize=(10,7),\n    cmap=plt.get_cmap(\"jet\"), colorbar=True,\n    sharex=False)\nplt.legend()","4fda6eeb":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nfrom folium.plugins import HeatMapWithTime\n\nmap_hooray = folium.Map(location=[41.386151, 2.164357],\n                    zoom_start = 13) \n\n# Ensure you're handing it floats\ndf['latitude'] = df['latitude'].astype(float)\ndf['longitude'] = df['longitude'].astype(float)\n\n# Filter the DF for rows, then columns, then remove NaNs\nheat_df = df[['latitude', 'longitude']]\nheat_df = df.dropna(axis=0, subset=['latitude','longitude'])\n\n# List comprehension to make out list of lists\nheat_data = [[row['latitude'],row['longitude']] for index, row in heat_df.iterrows()]\n\n# Plot it on the map\nHeatMap(heat_data).add_to(map_hooray)\n\n# Display the map\nmap_hooray","1f992793":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nfrom folium.plugins import HeatMapWithTime\n\nmap_hooray = folium.Map(location=[41.386151, 2.164357],\n                    zoom_start = 13) \n\n# Ensure you're handing it floats\ndf['latitude'] = df['latitude'].astype(float)\ndf['longitude'] = df['longitude'].astype(float)\n\n# Filter the DF for rows, then columns, then remove NaNs\nheat_df = df[['latitude', 'longitude']]\nheat_df = df.dropna(axis=0, subset=['latitude','longitude'])\n\n# List comprehension to make out list of lists\nheat_data = [[row['latitude'],row['longitude']] for index, row in heat_df.iterrows()]\n\n# Create weight column, using date\nlist(df.month2.unique())\nmonth_to_int = {'January':1,'February':2,'March':3,'April':4,'May':5,'June':6,'July':7,'August':8,'September':9,'October':10,'November':11,'December':12}\ndf['month2'].replace(month_to_int,inplace=True)\n\nheat_df['Weight'] = df['month2']\nheat_df['Weight'] = heat_df['Weight'].astype(float)\nheat_df = heat_df.dropna(axis=0, subset=['latitude','longitude', 'Weight'])\n\n# List comprehension to make out list of lists\nheat_data = [[[row['latitude'],row['longitude']] for index, row in heat_df[heat_df['Weight'] == i].iterrows()] for i in range(0,13)]\n\n# Plot it on the map\nhm = plugins.HeatMapWithTime(heat_data,auto_play=True,max_opacity=0.8)\nhm.add_to(map_hooray)\n# Display the map\nmap_hooray","4ea7afb9":"from IPython.display import Image\nImage(\"..\/input\/psvfoto\/Screenshot 2021-10-21 114608.png\")","4b4c288b":"# Data Visualizations","689d1c49":"This notebook is from sander Vlug to show different advanced visualizations\nIn the first part of the notebook i visualize accidents that happend in barcelona around 2017.\nThis was part of my ADS-A personal challenge. in this challenge i predicted where most accidents would happen and where. For the sake of this exercise, I upgraded most of my visualizations and created a actual heatmap on top of a normal map, as instead of a scatterplot map. \n\nThe 2nd part of this notebook is from my project in this semester. Here i have a visualization of the actions that led to a goal of PSV created on a footbal pitch. ","bf2d0dc2":"The visualization below is a Visualization from my current project where we have to create a model for predicting the value of a player. During the EDA i created a viz of actions that led to a Goal for PSV. This is a screenshot due to the NDA not allowing me to share my data."}}