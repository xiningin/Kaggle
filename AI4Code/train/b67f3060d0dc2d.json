{"cell_type":{"43b3e9b6":"code","8504d923":"code","36cdec07":"code","56f158b0":"code","4cf6112c":"code","c111b71d":"code","2e8c55a1":"code","2493b8e0":"code","25a0789c":"code","54725781":"code","58e1e090":"code","01985422":"code","da3cb853":"code","2b978983":"code","8f6ae1e4":"code","6a9702ce":"markdown","602b91f7":"markdown","e4dc55bb":"markdown"},"source":{"43b3e9b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\nfrom fastai.conv_learner import *\nfrom fastai.dataset import *\nimport pdb\nfrom pathlib import Path\nimport json\nfrom PIL import ImageDraw, ImageFont\nfrom matplotlib import patches, patheffects\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/pascal\/pascal\"))\n\n# Any results you write to the current directory are saved as output.","8504d923":"PATH = Path('..\/input\/pascal\/pascal')\ntrn_j = json.load((PATH\/'pascal_train2007.json').open())\nIMAGES,ANNOTATIONS,CATEGORIES = ['images', 'annotations', 'categories']\nFILE_NAME,ID,IMG_ID,CAT_ID,BBOX = 'file_name','id','image_id','category_id','bbox'\ncats = {o[ID]:o['name'] for o in trn_j[CATEGORIES]}\ntrn_fns = {o[ID]:o[FILE_NAME] for o in trn_j[IMAGES]}\ntrn_ids = [o[ID] for o in trn_j[IMAGES]]\nJPEGS = 'JPEGImages'\nIMG_PATH = PATH\/JPEGS\ndef get_trn_anno():\n    trn_anno = collections.defaultdict(lambda:[])\n    for o in trn_j[ANNOTATIONS]:\n        if not o['ignore']:\n            bb = o[BBOX]\n            bb = np.array([bb[1], bb[0], bb[3]+bb[1]-1, bb[2]+bb[0]-1])\n            trn_anno[o[IMG_ID]].append((bb,o[CAT_ID]))\n    return trn_anno\n\ntrn_anno = get_trn_anno()\n","36cdec07":"def hw_bb(bb): return np.array([bb[1], bb[0], bb[3]+bb[1]-1, bb[2]+bb[0]-1])\ndef bb_hw(a): return np.array([a[1],a[0],a[3]-a[1]+1,a[2]-a[0]+1])\ntrn_anno = collections.defaultdict(lambda:[])\nfor o in trn_j[ANNOTATIONS]:\n    if not o['ignore']:\n        bb = o[BBOX]\n        bb = hw_bb(bb)\n        trn_anno[o[IMG_ID]].append((bb,o[CAT_ID]))\n        \nlen(trn_anno)","56f158b0":"def show_img(im, figsize=None, ax=None):\n    if not ax: fig,ax = plt.subplots(figsize=figsize)\n    ax.imshow(im)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    return ax\ndef draw_outline(o, lw):\n    o.set_path_effects([patheffects.Stroke(\n        linewidth=lw, foreground='black'), patheffects.Normal()])\ndef draw_rect(ax, b, color='white'):\n    patch = ax.add_patch(patches.Rectangle(b[:2], *b[-2:], fill=False, edgecolor=color, lw=2))\n    draw_outline(patch, 4)\n\ndef draw_text(ax, xy, txt, sz=14, color='white'):\n    text = ax.text(*xy, txt,\n        verticalalignment='top', color=color, fontsize=sz, weight='bold')\n    draw_outline(text, 1)\ndef draw_im(im, ann):\n    ax = show_img(im, figsize=(16,8))\n    for b,c in ann:\n        b = bb_hw(b)\n        draw_rect(ax, b)\n        draw_text(ax, b[:2], cats[c], sz=16)\ndef draw_idx(i):\n    im_a = trn_anno[i]\n    im = open_image(IMG_PATH\/trn_fns[i])\n    print(im.shape)\n    draw_im(im, im_a)","4cf6112c":"def get_lrg(b):\n    if not b: raise Exception()\n    b = sorted(b, key=lambda x: np.product(x[0][-2:]-x[0][:2]), reverse=True)\n    return b[0]\ntrn_lrg_anno = {a: get_lrg(b) for a,b in trn_anno.items()}\n","c111b71d":"CSV=PATH\/'tmp\/lrg.csv'\nMC_CSV = PATH\/'tmp\/mc.csv'\nf_model = resnet34\nsz=224\nbs=64\ntfms = tfms_from_model(f_model, sz, crop_type=CropType.NO)\nmd = ImageClassifierData.from_csv('.\/', IMG_PATH, MC_CSV, tfms=tfms, bs=bs)\nlearn = ConvLearner.pretrained(f_model, md)\nlearn.opt_fn = optim.Adam\n#lrf=learn.lr_find(1e-5,100)\n#learn.sched.plot(0)","2e8c55a1":"lr = 2e-2\nlearn.fit(lr, 1, cycle_len=3, use_clr=(32,5))","2493b8e0":"lrs = np.array([lr\/100, lr\/10, lr])\nlearn.freeze_to(-2)\nlearn.lr_find(lrs\/1000)\nlearn.sched.plot(0)","25a0789c":"learn.fit(lrs\/10, 1, cycle_len=5, use_clr=(32,5))\nlearn.save('mclas')\nlearn.load('mclas')","54725781":"def sigmoid(x, derivative=False):\n  return x*(1-x) if derivative else 1\/(1+np.exp(-x))\nsigmoid(-0.63922)","58e1e090":"\ny = learn.predict()\nx,_ = next(iter(md.val_dl))\nx = to_np(x)\nfig, axes = plt.subplots(3, 4, figsize=(12, 8))\nfor i,ax in enumerate(axes.flat):\n    #x 3,224,224\n    ima=md.val_ds.denorm(x)[i]#224,224,3\n    \n   \n    ya = np.nonzero(y[i]>0.4)[0]\n    b = '\\n'.join(md.classes[o] for o in ya)\n    ax = show_img(ima, ax=ax)\n    draw_text(ax, (0,0), b)\nplt.tight_layout()","01985422":"MBB_CSV = PATH\/'tmp\/mbb.csv'\nmc = [[cats[p[1]] for p in trn_anno[o]] for o in trn_ids]\nid2cat = list(cats.values())\ncat2id = {v:k for k,v in enumerate(id2cat)}\nmcs = np.array([np.array([cat2id[p] for p in o]) for o in mc])\nval_idxs = get_cv_idxs(len(trn_fns))\n((val_mcs,trn_mcs),) = split_by_idx(val_idxs, mcs)\naug_tfms = [RandomRotate(3, p=0.5, tfm_y=TfmType.COORD),\n            RandomLighting(0.05, 0.05, tfm_y=TfmType.COORD),\n            RandomFlip(tfm_y=TfmType.COORD)]\ntfms = tfms_from_model(f_model, sz, crop_type=CropType.NO, tfm_y=TfmType.COORD, aug_tfms=aug_tfms)\nmd = ImageClassifierData.from_csv('.\/',IMG_PATH, MBB_CSV, tfms=tfms, bs=bs, continuous=True, num_workers=4)\n","da3cb853":"import matplotlib.cm as cmx\nimport matplotlib.colors as mcolors\nfrom cycler import cycler\n\ndef get_cmap(N):\n    color_norm  = mcolors.Normalize(vmin=0, vmax=N-1)\n    return cmx.ScalarMappable(norm=color_norm, cmap='Set3').to_rgba\n\nnum_colr = 12\ncmap = get_cmap(num_colr)\ncolr_list = [cmap(float(x)) for x in range(num_colr)]\ndef show_ground_truth(ax, im, bbox, clas=None, prs=None, thresh=0.3):\n    bb = [bb_hw(o) for o in bbox.reshape(-1,4)]\n    if prs is None:  prs  = [None]*len(bb)\n    if clas is None: clas = [None]*len(bb)\n    ax = show_img(im, ax=ax)\n    for i,(b,c,pr) in enumerate(zip(bb, clas, prs)):\n        if((b[2]>0) and (pr is None or pr > thresh)):\n            draw_rect(ax, b, color=colr_list[i%num_colr])\n            txt = f'{i}: '\n            if c is not None: txt += ('bg' if c==len(id2cat) else id2cat[c])\n            if pr is not None: txt += f' {pr:.2f}'\n            draw_text(ax, b[:2], txt, color=colr_list[i%num_colr])","2b978983":"#Attention!!!!!!\nclass ConcatLblDataset(Dataset):\n    def __init__(self, ds, y2):\n        self.ds,self.y2 = ds,y2\n        self.sz = ds.sz\n    def __len__(self): return len(self.ds)\n    \n    def __getitem__(self, i):\n        x,y = self.ds[i]\n        return (x, (y,self.y2[i]))","8f6ae1e4":"trn_ds2 = ConcatLblDataset(md.trn_ds, trn_mcs)\nval_ds2 = ConcatLblDataset(md.val_ds, val_mcs)\nmd.trn_dl.dataset = trn_ds2\nmd.val_dl.dataset = val_ds2\nx,y=to_np(next(iter(md.val_dl)))\nx=sigmoid(np.rollaxis(x,1,4))\nx,y=to_np(next(iter(md.trn_dl)))\nx=sigmoid(np.rollaxis(x,1,4))\nfig, axes = plt.subplots(3, 4, figsize=(16, 12))\nfor i,ax in enumerate(axes.flat):\n    show_ground_truth(ax, x[i], y[0][i], y[1][i])\nplt.tight_layout()","6a9702ce":"**Bouding box**","602b91f7":"**Multi class**","e4dc55bb":"**Draw**"}}