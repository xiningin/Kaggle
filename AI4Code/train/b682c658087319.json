{"cell_type":{"2c4a5417":"code","cd05bf46":"code","b08b3f9e":"code","3eba48c5":"code","29a0d947":"code","2cc2e28c":"code","d1f14d3d":"code","d4f59e44":"code","bb50f9ed":"code","ca6dadb2":"code","eb610f4c":"markdown","e78418f8":"markdown","347d6f6e":"markdown","ffc7dca1":"markdown","59d1e7c9":"markdown","357d60f1":"markdown"},"source":{"2c4a5417":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cmath\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cd05bf46":"def ABCD2S(ABCD,Z0):\n    S = np.zeros(shape=(2,2),dtype=complex)\n    tmp = ABCD[0,0] + ABCD[0,1]\/Z0 + ABCD[1,0]*Z0 + ABCD[1,1]\n    S[0,0] = (ABCD[0,0] + ABCD[0,1]\/Z0 - ABCD[1,0]*Z0 - ABCD[1,1])\/tmp\n    S[0,1] = 2 * (ABCD[0,0] * ABCD[1,1] - ABCD[0,1] * ABCD[0,1])\/tmp\n    S[1,0] = 2 \/ tmp\n    S[1,1] = (-ABCD[0,0] + ABCD[0,1]\/Z0 - ABCD[1,0]*Z0 + ABCD[1,1])\/tmp\n#     print(S)\n    return S\n# ABCD = numpy.zeros(shape=(2,2),dtype=complex)\n# ABCD = np.array([[(1+1j)\/pow(2,0.5),(1+1j)\/pow(2,0.5)],[(1+1j)\/pow(2,0.5),(1+1j)\/pow(2,0.5)]],dtype=complex)\nZ1 = 100\nllambda = 0.2\nbl = 2*np.pi*llambda\nABCD = np.array([[np.cos(bl),1j*Z1*np.sin(bl)],[1j*(1\/Z1)*np.sin(bl),np.cos(bl)]],dtype=complex)\nS = ABCD2S(ABCD,50)\nprint('S11 = ',S[0,0])\nprint('S21 = ',S[1,0])","b08b3f9e":"def zsc(zo,bl):\n    out = 1j*zo*np.tan(bl)\n    return out\ndef zoc(zo,bl):\n    out = -1j*zo*1\/(np.tan(bl))\n    return out\nZ0=50\nZ1=100\nS11e = (zoc(Z1,bl\/2) - Z0)\/(zoc(Z1,bl\/2) + Z0)\nS11o = (zsc(Z1,bl\/2) - Z0)\/(zsc(Z1,bl\/2) + Z0)\nprint('S11 = ',(S11e+S11o)\/2)\nprint('S21 = ',(S11e-S11o)\/2)","3eba48c5":"print('Show that |S11|^2+|S21|^2 = 1 for a lossless transmission line.')\nprint('np.abs((S11e-S11o)\/2)**2+np.abs((S11e+S11o)\/2)**2 = ',np.abs((S11e-S11o)\/2)**2+np.abs((S11e+S11o)\/2)**2)","29a0d947":"def zin(zo,zl,bl):\n    out = zo*(zl+1j*zo*np.tan(bl))\/(zo+1j*zl*np.tan(bl))\n    return out\nZin = zin(Z1,Z0,bl)\nS11 = (zin(Z1,Z0,bl)-Z0)\/(zin(Z1,Z0,bl)+Z0)\nprint('S11 =', (zin(Z1,Z0,bl)-Z0)\/(zin(Z1,Z0,bl)+Z0))\ntmp = 1 - np.abs(S11)**2\nprint('Computing only phase gives a wrong result. S21 !=',pow(tmp,0.5)*(np.cos(bl)-1j*np.sin(bl)))","2cc2e28c":"S21 = (S11e-S11o)\/2\nprint('Phase of S21',cmath.phase(S21)*180\/np.pi,' degrees')\nprint('Phase computed from the lenght of TL',-bl*180\/np.pi,' degrees')","d1f14d3d":"#Computing S12 using circuit theory\nrefl=(Z0-Z1)\/(Z0+Z1)\nV2n = 1+refl\n# V1p = ((Z0+Zin)\/(2*Zin))*((np.cos(bl)+1j*np.sin(bl))+refl*(np.cos(bl)-1j*np.sin(bl)))\nV1p = ((Z0+Zin)\/(2*Zin))*(np.exp(1j*bl)+refl*np.exp(-1j*bl))\nprint('S12 =',V2n\/V1p)","d4f59e44":"#test np.exp(complex())\nnp.exp(1j*(np.pi\/2))","bb50f9ed":"#vertical = 1st sub, horizontal = 2nd sub\ndef shunt(z1,z2):\n    return z1*z2\/(z1+z2)\nzo = 50\nllambda = 0.25\nbl = 2*np.pi*llambda\n\nzin = shunt(zoc(zo\/(2**0.5),bl\/2),zoc(zo,bl\/2))\ns11ee = (zin-zo)\/(zin+zo)\nzin = shunt(zsc(zo\/(2**0.5),bl\/2),zoc(zo,bl\/2))\ns11oe = (zin-zo)\/(zin+zo)\nzin = shunt(zsc(zo\/(2**0.5),bl\/2),zsc(zo,bl\/2))\ns11oo = (zin-zo)\/(zin+zo)\nzin = shunt(zoc(zo\/(2**0.5),bl\/2),zsc(zo,bl\/2))\ns11eo = (zin-zo)\/(zin+zo)\ns11 = 0.25*(s11ee+s11oe+s11eo+s11oo)\n\nprint('S11 =', s11)","ca6dadb2":"fnorm = np.array(range(5,16))\/10\ns11 =[]\nfor ii in fnorm:\n    llambda = 0.25*ii\n    bl = 2*np.pi*llambda\n    zin = shunt(zoc(zo\/(2**0.5),bl\/2),zoc(zo,bl\/2))\n    s11ee = (zin-zo)\/(zin+zo)\n    zin = shunt(zsc(zo\/(2**0.5),bl\/2),zoc(zo,bl\/2))\n    s11oe = (zin-zo)\/(zin+zo)\n    zin = shunt(zsc(zo\/(2**0.5),bl\/2),zsc(zo,bl\/2))\n    s11oo = (zin-zo)\/(zin+zo)\n    zin = shunt(zoc(zo\/(2**0.5),bl\/2),zsc(zo,bl\/2))\n    s11eo = (zin-zo)\/(zin+zo)\n    s11.append(0.25*(s11ee+s11oe+s11eo+s11oo))\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.plot(fnorm, np.abs(s11))\n\nax.set(xlabel='Normalized frequency', ylabel='S11',\n       title='S11')\nax.grid()\n#This saves to \/kaggle\/working\/test.png\n# fig.savefig(\"test.png\")\nplt.show()","eb610f4c":"# This is for Microwave Engineering Class at Kasetsart University  \nCompute S-parameters of a transmission line.  \nTry Kaggle for Microwave Class.  \nIt is not related to AI or data science but I could use the computation capability of Kaggle for Computational Electromagnetics later. ","e78418f8":"# Compute S-parameters using full circuit","347d6f6e":"# Compute S-parameters using ABCD conversion.","ffc7dca1":"# THE QUADRATURE (90\u25e6) HYBRID  \nbranch-line coupler  ","59d1e7c9":"![image.png](attachment:image.png)","357d60f1":"# Compute S-parameters using odd-even modes."}}