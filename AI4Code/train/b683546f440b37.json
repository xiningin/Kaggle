{"cell_type":{"bcda0e76":"code","ad277ced":"code","e88c810a":"code","f5d332a2":"code","c9abb1a1":"code","f298651c":"code","b1888fb9":"code","2cfd2ff4":"code","eaeeee42":"code","0e1ae64f":"code","ef5c3ee1":"code","77280e06":"code","5e6e9a71":"code","70cbb8a7":"code","719633b2":"code","d09dc08d":"code","ae20a557":"code","5f976408":"code","b8e7781d":"markdown","9c9c082c":"markdown"},"source":{"bcda0e76":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\nfrom keras import optimizers\nfrom keras.utils import to_categorical\nfrom sklearn.utils import shuffle\nimport random\n\nnp.random.seed(1337)\n\nimport os\nprint(os.listdir(\"..\/input\"))","ad277ced":"train_dir = \"..\/input\/\"\ntrain_img = np.load(train_dir + \"kmnist-train-imgs.npz\")['arr_0']\ntrain_lbl = np.load(train_dir + \"kmnist-train-labels.npz\")['arr_0']\ntest_images = np.load(train_dir + \"kmnist-test-imgs.npz\")['arr_0']\ntest_labels = np.load(train_dir + \"kmnist-test-labels.npz\")['arr_0']\nprint(train_img.shape)\nprint(train_lbl.shape)\nprint(test_images.shape)\nprint(test_labels.shape)","e88c810a":"train_img, train_lbl = shuffle(train_img, train_lbl, random_state = 0)\ntrain_images = train_img[:50000]\ntrain_labels = train_lbl[:50000]\nvalidation_images = train_img[50000:]\nvalidation_labels = train_lbl[50000:]","f5d332a2":"train_images = train_images.reshape(50000, 28, 28, 1)\nvalidation_images = validation_images.reshape(10000, 28, 28, 1)\ntest_images = test_images.reshape(10000, 28, 28, 1)","c9abb1a1":"train_labels = to_categorical(train_labels)\nvalidation_labels = to_categorical(validation_labels)\ntest_labels = to_categorical(test_labels)","f298651c":"def plot_image(arr):\n    plt.imshow(data, interpolation='nearest')\n    plt.show()","b1888fb9":"def create_model():\n    model = Sequential()\n    \n    model.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (28,28,1)))\n    model.add(MaxPooling2D((2,2)))\n    model.add(Conv2D(64, (3,3), activation = 'relu'))\n    model.add(MaxPooling2D((2,2)))\n    model.add(Conv2D(128, (3,3), activation = 'relu'))\n    model.add(MaxPooling2D((2,2)))\n    \n    model.add(Flatten())\n    model.add(Dense(128, activation = 'relu'))\n    model.add(Dense(10, activation = 'softmax'))\n    \n    return model","2cfd2ff4":"model = create_model()\nmodel.summary()","eaeeee42":"opt = optimizers.RMSprop(lr = 1e-4)\nmodel.compile(optimizer = opt, loss = 'categorical_crossentropy', metrics = ['acc'])","0e1ae64f":"history = model.fit(train_images, train_labels, epochs = 20, batch_size = 10, \n                    validation_data = (validation_images, validation_labels), shuffle = True)","ef5c3ee1":"model.save(\"kmnist_cnn.h5\")","77280e06":"hist = history.history\nprint(hist.keys())","5e6e9a71":"accuracy = hist['acc']\nloss = hist['loss']\nval_accuracy = hist['val_acc']\nval_loss = hist['val_loss']","70cbb8a7":"len(accuracy)","719633b2":"epochs = [i for i in range(1, 21)]","d09dc08d":"plt.plot(epochs, accuracy)\nplt.plot(epochs, val_accuracy)\nplt.title(\"Accuracy vs Val Accuracy\")\nplt.legend([\"Accuracy\", \"Validation Accuracy\"])\nplt.show()","ae20a557":"l, a = model.evaluate(test_images, test_labels)","5f976408":"print(l, a)","b8e7781d":"In this notebook, we will use the kuzushiji-mnist dataset to classify Japanese characters using a very simple Convolutional Neural Network based model.","9c9c082c":"Lets create the validation data from training data. "}}