{"cell_type":{"04ea25a8":"code","d396e2d6":"code","5278731a":"code","8d4e335b":"code","6b72c7b0":"code","42edc5cf":"code","895a0481":"code","75785293":"code","e1ed0a67":"code","e1f0abfd":"code","69035e0f":"code","f0b8bae0":"code","5934d78d":"code","ea45f02c":"code","2def5e7c":"code","f9928774":"code","b666b8fe":"code","4bb04bc8":"code","5452cfe6":"code","fe23ad49":"code","9ff668b0":"code","a0aa6ef4":"code","35d57985":"code","92504548":"code","cdff5587":"code","eca39b21":"code","3253bbf7":"code","6df20b39":"code","def07310":"code","b6282182":"code","02f99044":"code","dd9850a1":"code","91fc9107":"code","b7c7b323":"code","2f2bf1d6":"code","3121e5de":"code","f11938db":"code","30ef71df":"code","06f98e68":"code","bf8d929d":"code","823090d9":"code","0a3317ae":"code","3b591b93":"markdown","84071545":"markdown","29b40621":"markdown","f0067c29":"markdown","220fcbc5":"markdown","daac9bd6":"markdown","61c843c7":"markdown","f78a61fe":"markdown","b82f33f5":"markdown","32aab1b9":"markdown","67aaa0a6":"markdown","47c50294":"markdown","44a2f38c":"markdown","d47ea74f":"markdown","6500e7f5":"markdown","97636f28":"markdown","99d01c2d":"markdown","a874dd13":"markdown","dc94641a":"markdown","2e15ec3a":"markdown","cf05b5b4":"markdown","f7c9c5d8":"markdown","7b2fed5a":"markdown","1888f963":"markdown","afd3c96a":"markdown","6d5bacca":"markdown","364d58a5":"markdown","2f0e8cf3":"markdown","399749c2":"markdown","759aa61e":"markdown","2da6df34":"markdown","a0a20534":"markdown","ca26f7ba":"markdown","d7f8368a":"markdown","b5f95b7e":"markdown"},"source":{"04ea25a8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport sqlite3","d396e2d6":"database_ref = \"..\/input\/world-development-indicators\/database.sqlite\"\n\nconn = sqlite3.connect(database_ref)\n\ncur = conn.cursor()","5278731a":"#Getting tables names by querying 'sqlite_master'\n\nlist_of_tables_query = \"\"\"\n                      SELECT name\n                      FROM sqlite_master\n                      WHERE type='table';\n                      \"\"\" \ncur.execute (list_of_tables_query)\nprint(cur.fetchall())","8d4e335b":"country_query = \"\"\"\n                SELECT *\n                FROM Country\n                LIMIT 10;\n                \"\"\" \ncountry = pd.read_sql(country_query, conn)\n\n#Show all columns from dataframes #Increase column width\npd.options.display.max_columns = None\npd.options.display.max_colwidth = 100\n\ncountry","6b72c7b0":"countrynotes_query = \"\"\"\n                    SELECT *\n                    FROM CountryNotes\n                    LIMIT 10;\n                    \"\"\" \ncountrynotes = pd.read_sql(countrynotes_query, conn)\n\ncountrynotes","42edc5cf":"series_query =  \"\"\"\n                SELECT *\n                FROM series\n                LIMIT 10;\n                \"\"\"\nseries = pd.read_sql(series_query, conn)\n\nseries","895a0481":"seriesnotes_query = \"\"\"\n                    SELECT *\n                    FROM SeriesNotes\n                    LIMIT 10;\n                    \"\"\"\nseriesnotes = pd.read_sql(seriesnotes_query, conn)\n\nseriesnotes","75785293":"indicators_query = \"\"\"\n                    SELECT *\n                    FROM Indicators\n                    LIMIT 10;\n                    \"\"\"\nindicators = pd.read_sql(indicators_query, conn)\n\nindicators","e1ed0a67":"footnotes_query = \"\"\"\n                    SELECT *\n                    FROM FootNotes\n                    LIMIT 10;\n                    \"\"\"\nfootnotes = pd.read_sql(footnotes_query, conn)\n\nfootnotes","e1f0abfd":"brazil_query = \"\"\"\n                SELECT *\n                FROM country\n                WHERE ShortName = 'Brazil';\n                \"\"\"\n\nbrazil_info = pd.read_sql(brazil_query, conn)\nbrazil_info","69035e0f":"#Using SELECT DISTINCT to not get repeated values \nbrazil_indicators_query = \"\"\"\n                            SELECT DISTINCT IndicatorName\n                            FROM Indicators\n                            WHERE CountryCode = 'BRA';\n                            \"\"\"\n\nbrazil_indicators = pd.read_sql(brazil_indicators_query, conn)\nbrazil_indicators","f0b8bae0":"topics_query = \"\"\"\n                SELECT DISTINCT Topic\n                FROM Series;\n                \"\"\"\n\ntopics = pd.read_sql(topics_query, conn)\ntopics","5934d78d":"topics_list = [x for x in topics['Topic']] \ntopics_list","ea45f02c":"indicators_unemployment_query = \"\"\"\n                                SELECT SeriesCode, IndicatorName\n                                FROM Series\n                                WHERE Topic LIKE '%Unemployment';\n                                \"\"\"\nindicators_unemployment = pd.read_sql(indicators_unemployment_query, conn)\nindicators_unemployment","2def5e7c":"indicators_unemployment_bra_query = \"\"\"\n                                SELECT DISTINCT s.SeriesCode, s.IndicatorName\n                                FROM Series AS s\n                                INNER JOIN Indicators AS i\n                                    ON i.IndicatorCode = s.SeriesCode\n                                WHERE i.CountryCode = 'BRA' AND s.Topic LIKE '%Unemployment';\n                                \"\"\"\nindicators_unemployment_bra = pd.read_sql(indicators_unemployment_bra_query, conn)\nindicators_unemployment_bra","f9928774":"indicators_unemployment['IndicatorName'].isin(indicators_unemployment_bra['IndicatorName'])","b666b8fe":"unemployment_bra_query = \"\"\"\n                        SELECT Year, Value\n                        FROM Indicators\n                        WHERE CountryCode = 'BRA' AND IndicatorCode = 'SL.UEM.TOTL.NE.ZS';\n                        \"\"\"\nunemployment_bra = pd.read_sql(unemployment_bra_query, conn)\nunemployment_bra","4bb04bc8":"sns.set_style(\"darkgrid\")\n\nplt.figure(figsize=(14,5))\n\nsns.lineplot(data = unemployment_bra, x = 'Year', y = 'Value', marker = 'o')\n\nplt.title('Unemployment (national estimate)')\nplt.ylabel('% of unemployment')\n#plt.xticks(unemployment_bra['Year'])\n\nplt.show()","5452cfe6":"total_unemployment_ilo_query = \"\"\"\n                                SELECT Year, Value\n                                FROM Indicators\n                                WHERE CountryCode = 'BRA' AND IndicatorCode = 'SL.UEM.TOTL.ZS';\n                                \"\"\"\ntotal_unemployment_ilo = pd.read_sql(total_unemployment_ilo_query, conn)\ntotal_unemployment_ilo","fe23ad49":"total_unemployment_ne_query = \"\"\"\n                                SELECT Year, Value\n                                FROM Indicators\n                                WHERE CountryCode = 'BRA' AND IndicatorCode = 'SL.UEM.TOTL.NE.ZS';\n                                \"\"\"\ntotal_unemployment_ne = pd.read_sql(total_unemployment_ne_query, conn)\ntotal_unemployment_ne","9ff668b0":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = total_unemployment_ilo, x = 'Year', y = 'Value', marker = 'o', label = 'ILO Estimate')\nsns.lineplot(data = total_unemployment_ne, x = 'Year', y = 'Value', marker = 'o', label = 'Nat. Estimate')\n\nplt.title('Unemployment in Brazil (ILO vs National Estimates)')\nplt.ylabel('% of total unemployment')\nplt.legend(loc = 'upper left')\n\nplt.show()","a0aa6ef4":"unemployment_bra_query = \"\"\"\n                        SELECT s.SeriesCode, s.IndicatorName, \n                            COUNT(s.SeriesCode) AS num_records, MIN(i.Year) AS min_year, MAX(i.Year) AS max_year\n                        FROM Series AS s\n                        INNER JOIN Indicators AS i\n                            ON i.IndicatorCode = s.SeriesCode\n                        WHERE i.CountryCode = 'BRA' AND s.Topic LIKE '%Unemployment' \n                            AND s.IndicatorName NOT LIKE '%national estimate%'\n                        GROUP BY s.SeriesCode\n                        ORDER BY num_records DESC;\n                        \"\"\"\nunemployment_bra = pd.read_sql(unemployment_bra_query, conn)\nunemployment_bra","35d57985":"final_query = \"\"\"\n                        WITH Final_Indicators AS\n                        (\n                            SELECT i.IndicatorName, i.Year, i.Value\n                            FROM indicators AS i\n                            INNER JOIN Series AS s\n                                ON i.IndicatorCode = s.SeriesCode\n                            WHERE i.CountryCode = 'BRA' AND s.Topic LIKE '%Unemployment' \n                                AND s.IndicatorName NOT LIKE '%national estimate%'\n                                AND s.IndicatorName NOT LIKE 'Share%'\n                        )  \n                        \n                        SELECT IndicatorName, Year, Value\n                        FROM Final_Indicators;\n                        \"\"\"\n\nfinal = pd.read_sql(final_query, conn)\nfinal","92504548":"df = final.copy().pivot(index = 'Year', columns = 'IndicatorName', values='Value')\ndf","cdff5587":"df.info()","eca39b21":"new_names = ['Long-term', 'Primary education', 'Primary education - Female', 'Primary education - Male'\n            , 'Secondary education', 'Secondary education - Female', 'Secondary education - Male'\n            , 'Tertiary education', 'Tertiary education - Female', 'Tertiary education - Male'\n            , 'Female', 'Male', 'Total', 'Youth Female', 'Youth Male', 'Youth Total']\ndf = df.set_axis(new_names, axis=1)\ndf.info()","3253bbf7":"#sns.set_style(\"darkgrid\")\n\nplt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Total', marker = 'o')\nplt.title('Total Unemployment - From 1991 up to 2014')\nplt.ylim((0,15))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\n\nplt.show()","6df20b39":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Total', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Male', marker = 'o', label = 'Male')\nsns.lineplot(data = df, x = df.index, y = 'Female', marker = 'o', label = 'Female')\n\nplt.title('Unemployment by Gender - From 1991 up to 2014')\nplt.ylim((0,15))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.legend()\n\nplt.show()","def07310":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Total', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Youth Total', marker = 'o', label = 'Youth')\n\nplt.title('Unemployment: Total vs Youth Population (Ages 15 to 24) - From 1991 up to 2014')\nplt.ylim((0,30))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.legend()\n\nplt.show()","b6282182":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Youth Total', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Youth Male', marker = 'o', label = 'Male')\nsns.lineplot(data = df, x = df.index, y = 'Youth Female', marker = 'o', label = 'Female')\n\nplt.title('Unemployment: Youth Population (Ages 15 to 24) by Gender - From 1991 up to 2014')\nplt.ylim((0,30))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.legend()\n\nplt.show()","02f99044":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Total', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Primary education', marker = 'o', label = 'Primary')\nsns.lineplot(data = df, x = df.index, y = 'Secondary education', marker = 'o', label = 'Secondary')\nsns.lineplot(data = df, x = df.index, y = 'Tertiary education', marker = 'o', label = 'Tertiary')\n\nplt.title('Unemployment by Education Level - From 2001 up to 2013')\nplt.ylim((0,65))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.xlim((2001,2013))\nplt.legend()\n\nplt.show()","dd9850a1":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Primary education', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Primary education - Male', marker = 'o', label = 'Male')\nsns.lineplot(data = df, x = df.index, y = 'Primary education - Female', marker = 'o', label = 'Female')\n\nplt.title('Unemployment on Primary Education by Gender - From 2001 up to 2013')\nplt.ylim((0,65))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.xlim((2001,2013))\nplt.legend()\n\nplt.show()","91fc9107":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Secondary education', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Secondary education - Male', marker = 'o', label = 'Male')\nsns.lineplot(data = df, x = df.index, y = 'Secondary education - Female', marker = 'o', label = 'Female')\n\nplt.title('Unemployment on Secondary Education by Gender - From 2001 up to 2013')\nplt.ylim((0,65))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.xlim((2001,2013))\nplt.legend()\n\nplt.show()","b7c7b323":"plt.figure(figsize=(14,5))\n\nsns.lineplot(data = df, x = df.index, y = 'Tertiary education', marker = 'o', label = 'Total')\nsns.lineplot(data = df, x = df.index, y = 'Tertiary education - Male', marker = 'o', label = 'Male')\nsns.lineplot(data = df, x = df.index, y = 'Tertiary education - Female', marker = 'o', label = 'Female')\n\nplt.title('Unemployment on Tertiary Education by Gender - From 2001 up to 2013')\nplt.ylim((0,15))\n#plt.yticks(range(0,110,10))\nplt.ylabel('% of unemployment')\nplt.xlim((2001,2013))\nplt.legend()\n\nplt.show()","2f2bf1d6":"regional_2014_query = \"\"\"\n                        SELECT i.Value, i.CountryName\n                        FROM Indicators AS i\n                        INNER JOIN Country AS c\n                            ON i.CountryName = c.ShortName\n                        WHERE i.IndicatorCode = 'SL.UEM.TOTL.ZS' AND i.Year = 2014\n                            AND c.Region LIKE 'Latin America%'\n                        ORDER BY i.Value DESC;\n                        \"\"\"\nregional_2014 = pd.read_sql(regional_2014_query, conn)\nregional_2014","3121e5de":"fig = px.bar(regional_2014, x=\"Value\", y=\"CountryName\", orientation = 'h', height = 800)\n\nfig.update_layout(\n    title=dict(\n        text='Unemployment Rate in Latin America & Caribbean - 2014',\n        x=0.5,\n    ),      \n    xaxis=dict(\n        title='Unemployment Rate',\n        titlefont_size=16,\n    ),    \n    yaxis=dict(\n        title='Countries',\n        titlefont_size=16,\n    ),\n)\nfig.show()","f11938db":"regional_query = \"\"\"\n                SELECT i.Year, i.Value, i.CountryName\n                FROM Indicators AS i\n                INNER JOIN Country AS c\n                    ON i.CountryName = c.ShortName\n                WHERE i.IndicatorCode = 'SL.UEM.TOTL.ZS'\n                    AND c.ShortName IN ('Brazil','Argentina','Uruguay','Chile','Colombia','Peru')\n                ORDER BY i.CountryName;\n                \"\"\"\nregional = pd.read_sql(regional_query, conn)\nregional","30ef71df":"fig = px.bar(regional, x=\"Value\", y=\"CountryName\", orientation = 'h', height = 500 \n             , animation_frame= \"Year\", range_x=[0,20])\n\nfig.update_layout(\n    title=dict(\n        text='Unemployment Rate in Latin America & Caribbean - 1991 to 2014',\n        x=0.5,\n    ),      \n    xaxis=dict(\n        title='Unemployment Rate',\n        titlefont_size=16,\n    ),    \n    yaxis=dict(\n        title='Countries',\n        titlefont_size=16,\n    ),\n)\n\n#https:\/\/community.plotly.com\/t\/how-to-slow-down-animation-in-plotly-express\/31309\/6\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 1000\n\nfig.show()","06f98e68":"world_unemployment_2014_query = \"\"\"\n                                SELECT Year, Value, CountryName\n                                FROM Indicators\n                                WHERE IndicatorCode = 'SL.UEM.TOTL.ZS' AND Year = 2014\n                                ORDER BY CountryName;\n                                \"\"\"\nworld_unemployment_2014 = pd.read_sql(world_unemployment_2014_query, conn)\nworld_unemployment_2014","bf8d929d":"fig = px.choropleth(world_unemployment_2014, locations=\"CountryName\", locationmode='country names',\n                    color=\"Value\",\n                    hover_name=\"CountryName\",\n                    color_continuous_scale=px.colors.sequential.Jet,\n                    labels= {'Value': 'Rate'},\n                    title = 'Unemployment Worldwide - 2014')\n\nfig.update(layout=dict(title=dict(x=0.5)))\n\nfig.show()","823090d9":"world_unemployment_all_query = \"\"\"\n                                SELECT Year, Value, CountryName\n                                FROM Indicators\n                                WHERE IndicatorCode = 'SL.UEM.TOTL.ZS'\n                                ORDER BY CountryName;\n                                \"\"\"\nworld_unemployment_all = pd.read_sql(world_unemployment_all_query, conn)\nworld_unemployment_all","0a3317ae":"fig = px.choropleth(world_unemployment_all, locations=\"CountryName\", locationmode='country names',\n                    color=\"Value\",\n                    hover_name=\"CountryName\",\n                    color_continuous_scale=px.colors.sequential.Jet,\n                    animation_frame= \"Year\", range_color = [0,40],\n                    labels= {'Value': 'Rate'},\n                    title = 'Unemployment Worldwide - 1991 to 2014')\n\nfig.update(layout=dict(title=dict(x=0.5)))\n\n#https:\/\/community.plotly.com\/t\/how-to-slow-down-animation-in-plotly-express\/31309\/6\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 1000\n           \nfig.show()","3b591b93":"# <a id='0'>Content<\/a>\n\n- <a href='#1'>Dataset Information<\/a>  \n- <a href='#2'>Importing Packages and Exploring the Database<\/a>  \n- <a href='#3'>Choosing Indicators<\/a>  \n- <a href='#4'>Extracting and Manipulating the Data for Analysis<\/a>\n- <a href='#5'>Bonus: Comparison within Latin America + World Map w\/ Plotly<\/a>\n- <a href='#6'>References<\/a>","84071545":"Putting all topics on a list","29b40621":"There are 6 tables in the database. Let\u2019s execute some simple queries to see what\u2019s the content in each table. We can use \u2018pd.read_sql\u2019 to frame the results as Pandas Dataframes. To better understand what we have, let's take look at each table.","f0067c29":"There are 27 indicators related to unemployment, but we didn\u2019t specify in the query that the indicators should be available for Brazil. The Series table doesn\u2019t have a column for Country Code, but the Indicators table does. With INNER JOIN, we can define what indicators we want based on conditions related to both tables (Country Code from Indicators and Topic from Series).","220fcbc5":"# Goals\nThe primary and personal goal that motivated the creation of this notebook was to practice SQL queries. Each specific goal was defined after its previous steps.\n\nGoals:\n- Explore the database to understand what type of data is presented in each table;\n- Choosing a topic of interest (choice: unemployment) and select some relevant indicators among those available for Brazil;\n- Extract the data related to the chosen indicators and prepare them for analysis;\n- Create plots to analyze the unemployment in Brazil over time and compare the unemployment rate in different categories (by gender and education level or on the young population).","daac9bd6":"## <center> If you find this notebook useful, support with an upvote! <center>","61c843c7":"Let's start by connecting to the database and creating a cursor to fetch the data","f78a61fe":"Unfortunately, three interesting indicators have only 6 records (\u2018Share of youth not in education, employment or training\u2019). They will be dropped from the final list of indicators.","b82f33f5":"Few points about some tables:\n- Country: Presents basic information about each country. We can use \u2018CountryCode\u2019 to execute JOIN with most tables.\n- Series: Contains information about the available indicators. Connect with others through 'SeriesCode'.\n- Indicators: Where all indicators\u2019 values are stored. Connects with Series using IndicatorCode = SeriesCode and with Country using \u2018CountryCode\u2019.\n\nThe country of choice to be analyzed is Brazil. Before we move on, let\u2019s just check if Brazil is presented in this database.","32aab1b9":"Now, we create a barplot for better visualization","67aaa0a6":"# <a id=\"5\">Bonus: Comparison within Latin America + World Map w\/ Plotly<\/a>","47c50294":"# <a id=\"3\">Choosing Indicators<\/a>","44a2f38c":"We start this section by querying the unemployment rate in 2014 on countries within the same region as Brazil (Latin America). The \u2018region\u2019 column is found in the \u2018Country\u2019 table, so we need to apply an inner join to filter the results.","d47ea74f":"Let\u2019s simplify those column names.","6500e7f5":"Apart from the fact that the ILO estimate doesn\u2019t have any record before 1991 and that the national estimate has a few missing values, the results between the two are quite similar. I\u2019ll be making the choice of dropping \u2018national estimate\u2019 indicators when the ILO estimate is available. If you have the interest to understand how the ILO estimates work, [you can read about it on this link](https:\/\/www.ilo.org\/ilostat-files\/Documents\/TEM.pdf#:~:text=The%20ILO%20modelled%20estimates%20generally%20rely%20on%20a,the%20expected%20error%20and%20variance%20of%20the%20estimation.).\n\nWe saw that some indicators started to be recorded later than others. We can practice some aggregate functions to find the number of records, the first and the last year of record available for each indicator. In this query, we will be dropping the indicators that have \u2018national estimate\u2019 on their names.","97636f28":"# <a id=\"1\">Dataset Information<\/a>","99d01c2d":"# <a id=\"4\">Extracting and Manipulating the Data for Analysis<\/a>","a874dd13":"## <center> If you find this notebook useful, support with an upvote! <center>","dc94641a":"Finally, the data is ready to be plotted and analyzed.","2e15ec3a":"# <a id=\"6\">References<\/a>","cf05b5b4":"<br>\n<h1 style = \"font-size:30px; font-weight : bold; color : black; text-align: center; border-radius: 10px 15px;\"> World Development Indicators: Brazil Unemployment - Using SQL for Analysis <\/h1>\n<br>","f7c9c5d8":"The first query we will be doing is to get the name of the tables in the database. \n\n> \u201cEvery SQLite database contains a single \"schema table\" that stores the schema for that database. The schema for a database is a description of all of the other tables, indexes, triggers, and views that are contained within the database\u201d [(SQLite documentation)](https:\/\/www.sqlite.org\/schematab.html).\n\nWe can refer to that schema table as \u2018sqlite_master\u2019.\n","7b2fed5a":"Let\u2019s make our final SQL query to obtain all the data related to the selected indicators. We can make small modifications to our previous query and use it as a common table expression (CTE). This query will be referred as \u2018Final_Indicators\u2019 and, from it, we retrieve the data.","1888f963":"# <a id=\"2\">Importing Packages and Exploring the Database<\/a> ","afd3c96a":"In this notebook, we will extract the information about the desired indicators at once and then treat them with our knowledge on the Pandas package.\n\nWe still have some choices to make. We have some indicators that seem to be repeated (e.g. \u2018Unemployment, total\u2019) where the difference is how they were obtained (national estimate or modeled ILO estimate). Let\u2019s get the \u2018Unemployment, total\u2019 indicators and see how they are different from each other.","6d5bacca":"There is a lot of interesting topics for us to choose. In this notebook, we will be focusing on the \u2018unemployment\u2019 topic. Let\u2019s find out which indicators are available.","364d58a5":"There are over a thousand of indicators. Instead of trying to read one by one, it makes much more sense to see what topics are available, choose a topic of interest and then query its indicators.","2f0e8cf3":"To visualize the evolution of the unemployment rate from 1991 to 2014, we can create an animated barplot with Plotly. For this task, I\u2019ll be selecting only Brazil and a few neighbor countries.","399749c2":"Using the \u2018pd.pivot\u2019 function, we can transform the dataframe extracted into something we are more used to work with. With \u2018Year\u2019 serving as index, each indicator will be converted to a column on the new dataframe.","759aa61e":"When we define \u2018CountryCode\u2019 = \u2018BRA\u2019, we find 25 indicators instead of 27. Let\u2019s check which ones aren\u2019t available.","2da6df34":"The World Development Indicators from the World Bank contain over a thousand annual indicators of economic development from hundreds of countries around the world.\n\n|Table|Total Rows|Total Columns|\n--- | --- | ---\n|Country|247|31|\n|CountryNotes|4857|3|\n|FootNotes|532415|4|\n|Indicators|5656458|6|\n|Series|1345|20|\n|SeriesNotes|369|3|\n\nLast updated (2017)","a0a20534":"The missing indicators are the ones for long-term unemployment based on gender.\n\nNow that we have the list of available indicators about unemployment, we could simply make a query for each indicator based on its code and plot the result, like in the example below.","ca26f7ba":"Let\u2019s see what indicators about Brazil are available. We can search for them using CountryCode = \u2018BRA\u2019.  Since for every indicator there are several rows representing the obtained value of each year, we will use SELECT DISTINCT to avoid getting repeated names.","d7f8368a":"- https:\/\/www.sqlite.org\/schematab.html\n- https:\/\/www.ilo.org\/ilostat-files\/Documents\/TEM.pdf#:~:text=The%20ILO%20modelled%20estimates%20generally%20rely%20on%20a,the%20expected%20error%20and%20variance%20of%20the%20estimation\n- https:\/\/community.plotly.com\/t\/how-to-slow-down-animation-in-plotly-express\/31309\/6","b5f95b7e":"Another interesting feature of Plotly is the ability to plot choropleth maps. Let\u2019s finish this notebook by showing the unemployment landscape worldwide with two maps: one static map showing the unemployment in 2014 and one animated map showing the evolution from 1991 to 2014. "}}