{"cell_type":{"ff90d1ca":"code","3144d392":"code","ec501794":"code","7f5e745b":"code","37003194":"code","58e38419":"code","e31555a7":"code","cce3f5c1":"code","85dd8b17":"code","e5f0caff":"code","a0293719":"code","a335f606":"code","1e7c9a34":"code","c84e9128":"code","63b1ed63":"code","a21d3bb9":"code","a4a44120":"code","14e33db8":"code","c703df8d":"code","94513598":"code","a1559199":"code","6e1043e2":"code","92960d71":"code","19f7787f":"code","a449573c":"code","625c89c5":"code","f52987e0":"code","d79b1bd8":"code","522daf91":"code","37282ef4":"code","7b2399ae":"code","9ad8c9ce":"code","d176272c":"code","71f7110f":"code","c995574c":"code","55745fb8":"code","76d950ce":"code","769c59a4":"code","0cb9a349":"code","747b78f0":"code","abad9318":"code","51a7257b":"code","965851f8":"code","efb81b65":"code","3c94caeb":"code","1bfd6ff2":"code","774c3c7c":"code","89bc3450":"code","d5a3fa66":"code","867e49c3":"code","5171ed3b":"code","9e6e01f1":"code","7ca3f10f":"code","11045ee0":"code","cdd9f97e":"code","a3df8f3a":"code","e59f6bc9":"code","ba7ba7cd":"code","76ab6d4e":"code","18d33ffb":"code","0e33fdce":"code","e1ac678a":"code","5e6b67e6":"code","18b1f237":"code","ea9e9b93":"code","9b88c9d3":"code","58c73d07":"code","4493359d":"code","24eccb82":"code","579a3b8a":"code","c31a6b39":"code","9ad2bb46":"code","431fe06a":"code","7345f24a":"code","c2d29fdc":"code","4659dab5":"code","db5255ae":"code","0e5ada3e":"code","61a9578d":"code","f4365dce":"code","41eaa694":"code","3f6df219":"code","194b8f9f":"code","4bc288bd":"code","fce320a2":"code","3513e946":"code","6c95a833":"code","eed0bbb1":"code","daedadf0":"code","2361bfd4":"code","537324c2":"code","305b132e":"code","e014098f":"code","1b095be9":"code","d85d1441":"code","e40f6015":"code","66139d8a":"code","756329f7":"code","0b9af04c":"code","6858cee1":"code","0076447d":"code","d9c8467e":"code","c4183874":"code","9bdd220b":"code","38b38ad8":"code","86012901":"code","c4cb023a":"code","7c7cea53":"code","d2c3af19":"code","cbb89a95":"code","59d7c9bd":"code","852707e5":"code","fad11c52":"code","d7379afd":"code","c0a51244":"code","e67b88a0":"code","21ad513b":"code","60e1b506":"code","f0717544":"code","92af88dc":"code","de30359b":"code","433848d5":"code","d5429500":"code","d2fda9e2":"code","3b20bf6f":"code","b1cb64b2":"code","4f1e99dc":"code","21549a5f":"code","c00ba788":"code","0b690c1d":"code","67cde80b":"code","8174a46c":"code","3be8430f":"code","97f520de":"code","50a30f4e":"code","b2869a9a":"code","40420502":"code","b10ecf49":"code","977da3b7":"code","bdcb4b43":"code","2683f5ea":"code","4bbf50bc":"code","be407cf0":"code","8110a595":"code","2b96b562":"code","fe8fd668":"code","4bdc5085":"code","c60b32cd":"code","df615175":"code","c6c684df":"code","94de8256":"code","b8ba25db":"code","fb09f80b":"code","5eab25a2":"code","711ca55a":"code","2e59fa12":"code","52cc65a3":"code","ee4271d5":"code","30755dd3":"code","f9373774":"code","a1698b1e":"code","c7486008":"code","f4831b18":"code","d9a28fd2":"code","c14bd19c":"code","a48b4129":"code","6120d252":"code","2cebbe95":"code","cfdc6986":"code","a941243e":"code","9c81bb32":"code","3a0ae788":"code","2a062f56":"code","1f5e90ed":"code","121f3c1e":"code","88b0d512":"code","8ef206a5":"code","74e1d3cf":"code","22fe1269":"markdown","2d24d328":"markdown","babe499b":"markdown","a76972dd":"markdown","43b5a871":"markdown","292753d6":"markdown","13e63126":"markdown","c6168530":"markdown","c437b3d3":"markdown","8dd8d9f9":"markdown","a19a6b15":"markdown","33175e7c":"markdown","4f4c53b7":"markdown","fe4cd8d8":"markdown","36cc580d":"markdown","fc4c267b":"markdown","548f9a2b":"markdown","880da8dc":"markdown","163ffde8":"markdown","308e0563":"markdown","43a98951":"markdown","b4b8f3c6":"markdown","e5320b94":"markdown","05fce936":"markdown","c2282dfa":"markdown","cf482c09":"markdown","56c92e02":"markdown","232f18ae":"markdown","02655d82":"markdown","8ccd80bc":"markdown","af0ae81b":"markdown","a03e45f8":"markdown","324a07d4":"markdown","46435d6f":"markdown","4df60e31":"markdown","64717446":"markdown","12306b7a":"markdown","f0b72028":"markdown","7db1abfc":"markdown","5018547a":"markdown","8a785b93":"markdown","f6ca4fd6":"markdown","690b981b":"markdown","82db9dfa":"markdown","1e6678e8":"markdown","07eb61e3":"markdown","d0e49baf":"markdown","6837deac":"markdown","6beb6f6e":"markdown","dbc8b969":"markdown","6b6122fa":"markdown","82cbf0a4":"markdown","907e450a":"markdown","60699e24":"markdown","24e6f505":"markdown","e3bbeab1":"markdown","f49d84f4":"markdown","3a7d9727":"markdown","071ecccd":"markdown","bf00fc62":"markdown","5d720fc6":"markdown","7c7bd7b7":"markdown","78ebf3de":"markdown","c835f652":"markdown","8c769111":"markdown","835c77b3":"markdown","89b694f2":"markdown","ce934581":"markdown","3e0deb84":"markdown","22e5661c":"markdown","08f96846":"markdown","fbc321d2":"markdown","10ef65b2":"markdown","2559c166":"markdown"},"source":{"ff90d1ca":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import the numpy and pandas package\n\nimport numpy as np\nimport pandas as pd\n\n# Data Visualisation\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns","3144d392":"# Importing all datasets\nchurn_data = pd.read_csv('..\/input\/logistic-regression-use-case-churn\/churn_data.csv')\nchurn_data.head()","ec501794":"customer_data = pd.read_csv(\"..\/input\/logistic-regression-use-case-churn\/customer_data.csv\")\ncustomer_data.head()","7f5e745b":"internet_data = pd.read_csv(\"..\/input\/logistic-regression-use-case-churn\/internet_data.csv\")\ninternet_data.head()","37003194":"# Merging on 'customerID'\ndf_1 = pd.merge(churn_data, customer_data, how='inner', on='customerID')","58e38419":"# Final dataframe with all predictor variables\ntelecom = pd.merge(df_1, internet_data, how='inner', on='customerID')","e31555a7":"# Let's see the head of our master dataset\ntelecom.head()","cce3f5c1":"# Let's check the dimensions of the dataframe\ntelecom.shape","85dd8b17":"# let's look at the statistical aspects of the dataframe\ntelecom.describe()","e5f0caff":"# Let's see the type of each column\ntelecom.info()","a0293719":"# Checking Null values\ntelecom.isnull().sum()*100\/telecom.shape[0]\n# There are no NULL values in the dataset, hence it is clean.","a335f606":"telecom['TotalCharges'].describe()","1e7c9a34":"telecom['TotalCharges'] = telecom['TotalCharges'].replace(' ', np.nan)\ntelecom['TotalCharges'] = pd.to_numeric(telecom['TotalCharges'])","c84e9128":"# Total Charges will be related to Monthly Charges.\n# We will impute Total charges multiplied by median of the ratio of Total charges to monthly charges","63b1ed63":"value = (telecom['TotalCharges']\/telecom['MonthlyCharges']).median()*telecom['MonthlyCharges']","a21d3bb9":"telecom['TotalCharges'] = value.where(telecom['TotalCharges'] == np.nan, other =telecom['TotalCharges'])","a4a44120":"telecom['TotalCharges'].describe()","14e33db8":"telecom.Churn.describe()","c703df8d":"fig, axs = plt.subplots(1,2, figsize = (15,5))\nplt1 = sns.countplot(telecom['Churn'], ax = axs[0])\n\npie_churn = pd.DataFrame(telecom['Churn'].value_counts())\npie_churn.plot.pie( subplots=True,labels = pie_churn.index.values, autopct='%1.1f%%', figsize = (15,5), startangle= 50, ax = axs[1])\n# Unsquish the pie.\nplt.gca().set_aspect('equal')\n\nplt.show()","94513598":"# We have a data with 27% churn rate.","a1559199":"# The time for which a customer has been using the service.","6e1043e2":"sns.boxplot(x = 'tenure', y = 'Churn', data = telecom)\nplt.show()","92960d71":"# Customer with more tenure tends to churn less.","19f7787f":"# Whether a customer has a landline phone service along with the internet service.","a449573c":"pie_PhoneService_Yes = pd.DataFrame(telecom[telecom['PhoneService'] == \"Yes\"]['Churn'].value_counts())\npie_PhoneService_Yes.plot.pie(subplots=True, labels = pie_PhoneService_Yes.index.values, autopct='%1.1f%%', startangle= 50 )\nplt.title('Churn Rate for customers \\n opted for Phone Service')\nplt.gca().set_aspect('equal')\n\npie_PhoneService_No = pd.DataFrame(telecom[telecom['PhoneService'] == \"No\"]['Churn'].value_counts())\npie_PhoneService_No.plot.pie(subplots=True, labels = pie_PhoneService_Yes.index.values, autopct='%1.1f%%', startangle= 50)\nplt.title('Churn Rate for customers \\n that did not opted for Phone Service')\nplt.gca().set_aspect('equal')\n\nplt.show() ","625c89c5":"# Opting for phone service does not have a significant impact on churn rate.","f52987e0":"pie_Contract_m2m = pd.DataFrame(telecom[telecom['Contract'] == \"Month-to-month\"]['Churn'].value_counts())\npie_Contract_m2m.plot.pie(subplots=True, labels = pie_Contract_m2m.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Month to Month Contract')\nplt.gca().set_aspect('equal')\n\npie_Contract_1y = pd.DataFrame(telecom[telecom['Contract'] == \"One year\"]['Churn'].value_counts())\npie_Contract_1y.plot.pie(subplots=True, labels = pie_Contract_1y.index.values, autopct='%1.1f%%', startangle= 20)\nplt.title('One Year Contract')\nplt.gca().set_aspect('equal')\n\npie_Contract_2y = pd.DataFrame(telecom[telecom['Contract'] == \"Two year\"]['Churn'].value_counts())\npie_Contract_2y.plot.pie(subplots=True, labels = pie_Contract_2y.index.values, autopct='%1.1f%%', startangle= 5)\nplt.title('Two Year Contract')\nplt.gca().set_aspect('equal')\n\nplt.show()","d79b1bd8":"# Customers with One Year and Two year contract tends to Churn a lot lesser than month to month contract.","522daf91":"plt.figure(figsize=(15,5))\n\npie_PaperlessBilling_Yes = pd.DataFrame(telecom[telecom['PaperlessBilling'] == \"Yes\"]['Churn'].value_counts())\npie_PaperlessBilling_Yes.plot.pie(subplots=True, labels = pie_PaperlessBilling_Yes.index.values, autopct='%1.1f%%', startangle= 60)\nplt.title('Churn Rate for customers \\n opted for Paperless Billing')\nplt.gca().set_aspect('equal')\n\n\npie_PaperlessBilling_No = pd.DataFrame(telecom[telecom['PaperlessBilling'] == \"No\"]['Churn'].value_counts())\npie_PaperlessBilling_No.plot.pie(subplots=True, labels = pie_PaperlessBilling_No.index.values, autopct='%1.1f%%', startangle= 30)\nplt.title('Churn Rate for customers \\n that did not opted for Paperless Billing')\nplt.gca().set_aspect('equal')\n\nplt.show()","37282ef4":"# Churn Rate is higher for the customers who opted for paperless billing.","7b2399ae":"telecom.PaymentMethod.describe()","9ad8c9ce":"plt.figure(figsize=(15,10))\npie_PaymentMethod_ec = pd.DataFrame(telecom[telecom['PaymentMethod'] == \"Electronic check\"]['Churn'].value_counts())\npie_PaymentMethod_ec.plot.pie(subplots=True, labels = pie_PaymentMethod_ec.index.values, autopct='%1.1f%%', startangle= 82)\nplt.title('Electronic Check')\nplt.gca().set_aspect('equal')\n\npie_PaymentMethod_mc = pd.DataFrame(telecom[telecom['PaymentMethod'] == \"Mailed check\"]['Churn'].value_counts())\npie_PaymentMethod_mc.plot.pie(subplots=True, labels = pie_PaymentMethod_mc.index.values, autopct='%1.1f%%', startangle= 35)\nplt.title('Mailed check')\nplt.gca().set_aspect('equal')\n\npie_PaymentMethod_bta = pd.DataFrame(telecom[telecom['PaymentMethod'] == \"Bank transfer (automatic)\"]['Churn'].value_counts())\npie_PaymentMethod_bta.plot.pie(subplots=True, labels = pie_PaymentMethod_bta.index.values, autopct='%1.1f%%', startangle= 30)\nplt.title('Bank transfer (automatic)')\nplt.gca().set_aspect('equal')\n\npie_PaymentMethod_cca = pd.DataFrame(telecom[telecom['PaymentMethod'] == \"Credit card (automatic)\"]['Churn'].value_counts())\npie_PaymentMethod_cca.plot.pie(subplots=True, labels = pie_PaymentMethod_cca.index.values, autopct='%1.1f%%', startangle= 30)\nplt.title('Credit card (automatic)')\nplt.gca().set_aspect('equal')\n\nplt.show()","d176272c":"# Customers with Electronic Check tends to churn more than other payment methods.","71f7110f":"sns.boxplot(x = 'MonthlyCharges', y = 'Churn', data = telecom)\nplt.show()","c995574c":"# Median monthly charges are higher for customers who have churned.","55745fb8":"sns.boxplot(x = 'TotalCharges', y = 'Churn', data = telecom)\nplt.show()","76d950ce":"# Median Total charges are low for customers who have churned.","769c59a4":"plt.figure(figsize=(15,5))\npie_Gender_M = pd.DataFrame(telecom[telecom['gender'] == \"Male\"]['Churn'].value_counts())\npie_Gender_M.plot.pie(subplots = True, labels = pie_Gender_M.index.values, autopct='%1.1f%%', startangle= 50)\nplt.title('Male')\nplt.gca().set_aspect('equal')\n\npie_Gender_F = pd.DataFrame(telecom[telecom['gender'] == \"Female\"]['Churn'].value_counts())\npie_Gender_F.plot.pie(subplots = True,  labels = pie_Gender_F.index.values, autopct='%1.1f%%', startangle= 50)\nplt.title('Female')\n\nplt.gca().set_aspect('equal')\nplt.show() ","0cb9a349":"# There is no effect of Gender on Churn.","747b78f0":"plt.figure(figsize=(15,5))\npie_SeniorCitizen_Y = pd.DataFrame(telecom[telecom['SeniorCitizen'] == 1]['Churn'].value_counts())\npie_SeniorCitizen_Y.plot.pie(subplots = True, labels = pie_SeniorCitizen_Y.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Senior Citizen')\nplt.gca().set_aspect('equal')\n\npie_SeniorCitizen_N = pd.DataFrame(telecom[telecom['SeniorCitizen'] == 0]['Churn'].value_counts())\npie_SeniorCitizen_N.plot.pie(subplots = True, labels = pie_SeniorCitizen_N.index.values, autopct='%1.1f%%', startangle= 45)\nplt.title('Non Senior Citizen')\n\nplt.gca().set_aspect('equal')\nplt.show() ","abad9318":"# Senior Citizens tends to churn more.","51a7257b":"plt.figure(figsize=(15,5))\npie_Partner_Y = pd.DataFrame(telecom[telecom['Partner'] == 'Yes']['Churn'].value_counts())\npie_Partner_Y.plot.pie(subplots = True,  labels = pie_Partner_Y.index.values, autopct='%1.1f%%', startangle= 35)\nplt.title('Married \/ Live in')\nplt.gca().set_aspect('equal')\n\npie_Partner_N = pd.DataFrame(telecom[telecom['Partner'] == 'No']['Churn'].value_counts())\npie_Partner_N.plot.pie(subplots = True,  labels = pie_Partner_N.index.values, autopct='%1.1f%%', startangle= 60)\nplt.title('Single')\n\nplt.gca().set_aspect('equal')\nplt.show() ","965851f8":"plt.figure(figsize=(15,5))\npie_Dependents_Y = pd.DataFrame(telecom[telecom['Dependents'] == 'Yes']['Churn'].value_counts())\npie_Dependents_Y.plot.pie(subplots = True,  labels = pie_Dependents_Y.index.values, autopct='%1.1f%%', startangle= 35)\nplt.title('Has Dependents')\nplt.gca().set_aspect('equal')\n\npie_Dependents_N = pd.DataFrame(telecom[telecom['Dependents'] == 'No']['Churn'].value_counts())\npie_Dependents_N.plot.pie(subplots = True,  labels = pie_Dependents_N.index.values, autopct='%1.1f%%', startangle= 60)\nplt.title('No Dependents')\n\nplt.gca().set_aspect('equal')\nplt.show() ","efb81b65":"# Customers with no dependents tends to churn more.","3c94caeb":"# Whether a customer has multiple lines of internet connectivity.","1bfd6ff2":"plt.figure(figsize=(15,5))\npie_MultipleLines_Y = pd.DataFrame(telecom[telecom['MultipleLines'] == 'Yes']['Churn'].value_counts())\npie_MultipleLines_Y.plot.pie(subplots = True,  labels = pie_MultipleLines_Y.index.values, autopct='%1.1f%%', startangle= 50)\nplt.title('Multiple lines of internet connectivity')\nplt.gca().set_aspect('equal')\n\npie_MultipleLines_N = pd.DataFrame(telecom[telecom['MultipleLines'] == 'No']['Churn'].value_counts())\npie_MultipleLines_N.plot.pie(subplots = True,  labels = pie_MultipleLines_N.index.values, autopct='%1.1f%%', startangle= 45)\nplt.title('Single line of internet connectivity')\n\nplt.gca().set_aspect('equal')\nplt.show() ","774c3c7c":"# Multiple lines of internet connectivity doesn't effect churn that much.","89bc3450":"plt.figure(figsize=(15,5))\npie_InternetService_fo = pd.DataFrame(telecom[telecom['InternetService'] == \"Fiber optic\"]['Churn'].value_counts())\npie_InternetService_fo.plot.pie(subplots = True, labels = pie_InternetService_fo.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Fiber Optic')\nplt.gca().set_aspect('equal')\n\npie_InternetService_dsl = pd.DataFrame(telecom[telecom['InternetService'] == \"DSL\"]['Churn'].value_counts())\npie_InternetService_dsl.plot.pie(subplots = True, labels = pie_InternetService_dsl.index.values, autopct='%1.1f%%', startangle= 35)\nplt.title('DSL')\nplt.gca().set_aspect('equal')\n\npie_InternetService_no = pd.DataFrame(telecom[telecom['InternetService'] == \"No\"]['Churn'].value_counts())\npie_InternetService_no.plot.pie(subplots = True, labels = pie_InternetService_no.index.values, autopct='%1.1f%%', startangle= 13)\nplt.title('No Internet Service')\nplt.gca().set_aspect('equal')\n\nplt.show()","d5a3fa66":"# Customers with Fiber Optic Connection churn the most whereas least probability of churning for those with no internet service.","867e49c3":"plt.figure(figsize=(15,5))\npie_OnlineSecurity_Y = pd.DataFrame(telecom[telecom['OnlineSecurity'] == 'Yes']['Churn'].value_counts())\npie_OnlineSecurity_Y.plot.pie(subplots = True,  labels = pie_OnlineSecurity_Y.index.values, autopct='%1.1f%%', startangle= 25)\nplt.title('Online Security')\nplt.gca().set_aspect('equal')\n\npie_OnlineSecurity_N = pd.DataFrame(telecom[telecom['OnlineSecurity'] == 'No']['Churn'].value_counts())\npie_OnlineSecurity_N.plot.pie(subplots = True, labels = pie_OnlineSecurity_N.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Not opted for Online Security')\nplt.gca().set_aspect('equal')\nplt.show() ","5171ed3b":"# Customers opted for Online Security churn less than who have not opted.","9e6e01f1":"plt.figure(figsize=(15,5))\npie_OnlineBackup_Y = pd.DataFrame(telecom[telecom['OnlineBackup'] == 'Yes']['Churn'].value_counts())\npie_OnlineBackup_Y.plot.pie(subplots = True,  labels = pie_OnlineBackup_Y.index.values, autopct='%1.1f%%', startangle= 40)\nplt.title('Online Backup')\nplt.gca().set_aspect('equal')\n\npie_OnlineBackup_N = pd.DataFrame(telecom[telecom['OnlineBackup'] == 'No']['Churn'].value_counts())\npie_OnlineBackup_N.plot.pie(subplots = True, labels = pie_OnlineBackup_N.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Not opted for Online Backup')\nplt.gca().set_aspect('equal')\n\nplt.show() ","7ca3f10f":"# Customers opted for Online Backup churn less than who have not opted.","11045ee0":"plt.figure(figsize=(15,5))\n\npie_DeviceProtection_Y = pd.DataFrame(telecom[telecom['DeviceProtection'] == 'Yes']['Churn'].value_counts())\npie_DeviceProtection_Y.plot.pie(subplots = True, labels = pie_DeviceProtection_Y.index.values, autopct='%1.1f%%', startangle= 40)\nplt.title('Online Backup')\nplt.gca().set_aspect('equal')\n\npie_DeviceProtection_N = pd.DataFrame(telecom[telecom['DeviceProtection'] == 'No']['Churn'].value_counts())\npie_DeviceProtection_N.plot.pie(subplots = True, labels = pie_DeviceProtection_N.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Not opted for Online Backup')\nplt.gca().set_aspect('equal')\nplt.show() ","cdd9f97e":"# Customers opted for Device Potection churn less than who have not opted.","a3df8f3a":"plt.figure(figsize=(15,5))\npie_TechSupport_Y = pd.DataFrame(telecom[telecom['TechSupport'] == 'Yes']['Churn'].value_counts())\npie_TechSupport_Y.plot.pie(subplots = True,labels = pie_TechSupport_Y.index.values, autopct='%1.1f%%', startangle= 30)\nplt.title('Tech Support')\nplt.gca().set_aspect('equal')\n\npie_TechSupport_N = pd.DataFrame(telecom[telecom['TechSupport'] == 'No']['Churn'].value_counts())\npie_TechSupport_N.plot.pie(subplots = True, labels = pie_TechSupport_N.index.values, autopct='%1.1f%%', startangle= 75)\nplt.title('Not opted for Tech Support')\n\nplt.gca().set_aspect('equal')\nplt.show() ","e59f6bc9":"# Customers opted for Tech Support churn less than who have not opted.","ba7ba7cd":"plt.figure(figsize=(15,5))\npie_StreamingTV_Y = pd.DataFrame(telecom[telecom['StreamingTV'] == 'Yes']['Churn'].value_counts())\npie_StreamingTV_Y.plot.pie(subplots = True, labels = pie_StreamingTV_Y.index.values, autopct='%1.1f%%', startangle= 55)\nplt.title('Streaming TV')\nplt.gca().set_aspect('equal')\n\npie_StreamingTV_N = pd.DataFrame(telecom[telecom['StreamingTV'] == 'No']['Churn'].value_counts())\npie_StreamingTV_N.plot.pie(subplots = True,labels = pie_StreamingTV_N.index.values, autopct='%1.1f%%', startangle= 58)\nplt.title('Not opted for Streaming TV')\nplt.gca().set_aspect('equal')\n\nplt.show() ","76ab6d4e":"# Streaming TV doesn't make such impact on churning.","18d33ffb":"plt.figure(figsize=(15,5))\npie_StreamingMovies_Y = pd.DataFrame(telecom[telecom['StreamingMovies'] == 'Yes']['Churn'].value_counts())\npie_StreamingMovies_Y.plot.pie(subplots = True, labels = pie_StreamingMovies_Y.index.values, autopct='%1.1f%%', startangle= 55)\nplt.title('Streaming Movies')\nplt.gca().set_aspect('equal')\n\npie_StreamingMovies_N = pd.DataFrame(telecom[telecom['StreamingMovies'] == 'No']['Churn'].value_counts())\npie_StreamingMovies_N.plot.pie(subplots = True, labels = pie_StreamingMovies_N.index.values, autopct='%1.1f%%', startangle= 60)\nplt.title('Not opted for Streaming TV')\nplt.gca().set_aspect('equal')\n\nplt.show()","0e33fdce":"# Streaming Movies doesn't make such impact on churning.","e1ac678a":"# List of variables to map\n\nvarlist =  ['PhoneService', 'PaperlessBilling', 'Churn', 'Partner', 'Dependents']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\ntelecom[varlist] = telecom[varlist].apply(binary_map)","5e6b67e6":"telecom.head()","18b1f237":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(telecom[['Contract', 'PaymentMethod', 'gender', 'InternetService']], drop_first=True)\n\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom, dummy1], axis=1)","ea9e9b93":"telecom.head()","9b88c9d3":"# Creating dummy variables for the remaining categorical variables and dropping the level with big names.\n\n# Creating dummy variables for the variable 'MultipleLines'\nml = pd.get_dummies(telecom['MultipleLines'], prefix='MultipleLines')\n# Dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineSecurity'.\nos = pd.get_dummies(telecom['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineBackup'.\nob = pd.get_dummies(telecom['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1], axis=1)\n\n# Creating dummy variables for the variable 'DeviceProtection'. \ndp = pd.get_dummies(telecom['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1], axis=1)\n\n# Creating dummy variables for the variable 'TechSupport'. \nts = pd.get_dummies(telecom['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingMovies'. \nsm = pd.get_dummies(telecom['StreamingMovies'], prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1], axis=1)","58c73d07":"telecom.head()","4493359d":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","24eccb82":"telecom.info()","579a3b8a":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","c31a6b39":"# Checking outliers at 25%, 50%, 75%, 90%, 95% and 99%\nnum_telecom.describe(percentiles=[.25, .5, .75, .90, .95, .99])","9ad2bb46":"# Adding up the missing values (column-wise)\ntelecom.isnull().sum()","431fe06a":"# Checking the percentage of missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","7345f24a":"# Removing NaN TotalCharges rows\ntelecom = telecom[~np.isnan(telecom['TotalCharges'])]","c2d29fdc":"# Checking percentage of missing values after removing the missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","4659dab5":"from sklearn.model_selection import train_test_split","db5255ae":"# Putting feature variable to X\nX = telecom.drop(['Churn','customerID'], axis=1)\n\nX.head()","0e5ada3e":"# Putting response variable to y\ny = telecom['Churn']\n\ny.head()","61a9578d":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)","f4365dce":"from sklearn.preprocessing import StandardScaler","41eaa694":"scaler = StandardScaler()\n\nX_train[['tenure','MonthlyCharges','TotalCharges']] = scaler.fit_transform(X_train[['tenure','MonthlyCharges','TotalCharges']])\n\nX_train.head()","3f6df219":"### Checking the Churn Rate\nchurn = (sum(telecom['Churn'])\/len(telecom['Churn'].index))*100\nchurn","194b8f9f":"# Let's see the correlation matrix \nplt.figure(figsize = (30,15))        # Size of the figure\nsns.heatmap(telecom.corr(),annot = True)\nplt.show()","4bc288bd":"X_test = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                       'StreamingTV_No','StreamingMovies_No'], 1)\nX_train = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                         'StreamingTV_No','StreamingMovies_No'], 1)","fce320a2":"plt.figure(figsize = (20,10))\nsns.heatmap(X_train.corr(),annot = True)\nplt.show()","3513e946":"import statsmodels.api as sm","6c95a833":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","eed0bbb1":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()","daedadf0":"from sklearn.feature_selection import RFE\nrfe = RFE(logreg, 15)             # running RFE with 13 variables as output\nrfe = rfe.fit(X_train, y_train)","2361bfd4":"rfe.support_","537324c2":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","305b132e":"col = X_train.columns[rfe.support_]","e014098f":"X_train.columns[~rfe.support_]","1b095be9":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","d85d1441":"# Getting the predicted values on the train set\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","e40f6015":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","66139d8a":"y_train_pred_final = pd.DataFrame({'Churn':y_train.values, 'Churn_Prob':y_train_pred})\ny_train_pred_final['CustID'] = y_train.index\ny_train_pred_final.head()","756329f7":"y_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","0b9af04c":"from sklearn import metrics","6858cee1":"# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nprint(confusion)","0076447d":"# Predicted     not_churn    churn\n# Actual\n# not_churn        3270      365\n# churn            579       708  ","d9c8467e":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","c4183874":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","9bdd220b":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","38b38ad8":"col = col.drop('PhoneService', 1)\ncol","86012901":"# Let's re-run the model using the selected variables\nX_train_sm = sm.add_constant(X_train[col])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","c4cb023a":"y_train_pred = res.predict(X_train_sm).values.reshape(-1)","7c7cea53":"y_train_pred[:10]","d2c3af19":"y_train_pred_final['Churn_Prob'] = y_train_pred","cbb89a95":"# Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0\ny_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_train_pred_final.head()","59d7c9bd":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","852707e5":"vif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","fad11c52":"# Let's drop TotalCharges since it has a high VIF\ncol = col.drop('TotalCharges')\ncol","d7379afd":"# Let's re-run the model using the selected variables\nX_train_sm = sm.add_constant(X_train[col])\nlogm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","c0a51244":"y_train_pred = res.predict(X_train_sm).values.reshape(-1)","e67b88a0":"y_train_pred[:10]","21ad513b":"y_train_pred_final['Churn_Prob'] = y_train_pred","60e1b506":"# Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0\ny_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_train_pred_final.head()","f0717544":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","92af88dc":"vif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","de30359b":"# Let's take a look at the confusion matrix again \nconfusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nconfusion","433848d5":"# Actual\/Predicted     not_churn    churn\n        # not_churn        3269      366\n        # churn            595       692  ","d5429500":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","d2fda9e2":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","3b20bf6f":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","b1cb64b2":"# Let us calculate specificity\nTN \/ float(TN+FP)","4f1e99dc":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","21549a5f":"# positive predictive value \nprint (TP \/ float(TP+FP))","c00ba788":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","0b690c1d":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","67cde80b":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Churn, y_train_pred_final.Churn_Prob, drop_intermediate = False )","8174a46c":"draw_roc(y_train_pred_final.Churn, y_train_pred_final.Churn_Prob)","3be8430f":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","97f520de":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","50a30f4e":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","b2869a9a":"y_train_pred_final['final_predicted'] = y_train_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.3 else 0)\n\ny_train_pred_final.head()","40420502":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.final_predicted)","b10ecf49":"confusion2 = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.final_predicted )\nconfusion2","977da3b7":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","bdcb4b43":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","2683f5ea":"# Let us calculate specificity\nTN \/ float(TN+FP)","4bbf50bc":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","be407cf0":"# Positive predictive value \nprint (TP \/ float(TP+FP))","8110a595":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","2b96b562":"#Looking at the confusion matrix again","fe8fd668":"confusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nconfusion","4bdc5085":"confusion[1,1]\/(confusion[0,1]+confusion[1,1])","c60b32cd":"confusion[1,1]\/(confusion[1,0]+confusion[1,1])","df615175":"from sklearn.metrics import precision_score, recall_score","c6c684df":"?precision_score","94de8256":"precision_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","b8ba25db":"recall_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","fb09f80b":"from sklearn.metrics import precision_recall_curve","5eab25a2":"y_train_pred_final.Churn, y_train_pred_final.predicted","711ca55a":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Churn, y_train_pred_final.Churn_Prob)","2e59fa12":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","52cc65a3":"X_test[['tenure','MonthlyCharges','TotalCharges']] = scaler.transform(X_test[['tenure','MonthlyCharges','TotalCharges']])","ee4271d5":"X_test = X_test[col]\nX_test.head()","30755dd3":"X_test_sm = sm.add_constant(X_test)","f9373774":"y_test_pred = res.predict(X_test_sm)","a1698b1e":"y_test_pred[:10]","c7486008":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)","f4831b18":"# Let's see the head\ny_pred_1.head()","d9a28fd2":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)","c14bd19c":"# Putting CustID to index\ny_test_df['CustID'] = y_test_df.index","a48b4129":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","6120d252":"# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)","2cebbe95":"y_pred_final.head()","cfdc6986":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Churn_Prob'})","a941243e":"# Rearranging the columns\ny_pred_final = y_pred_final.reindex_axis(['CustID','Churn','Churn_Prob'], axis=1)","9c81bb32":"# Let's see the head of y_pred_final\ny_pred_final.head()","3a0ae788":"y_pred_final['final_predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.42 else 0)","2a062f56":"y_pred_final.head()","1f5e90ed":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_pred_final.Churn, y_pred_final.final_predicted)","121f3c1e":"confusion2 = metrics.confusion_matrix(y_pred_final.Churn, y_pred_final.final_predicted )\nconfusion2","88b0d512":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","8ef206a5":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","74e1d3cf":"# Let us calculate specificity\nTN \/ float(TN+FP)","22fe1269":"##### Creating a dataframe with the actual churn flag and the predicted probabilities","2d24d328":"Optimal cutoff probability is that prob where we get balanced sensitivity and specificity","babe499b":"From the distribution shown above, you can see that there no outliers in your data. The numbers are gradually increasing.","a76972dd":"##### Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0","43b5a871":"##### Recall\nTP \/ TP + FN","292753d6":"#### Device Protection","13e63126":"### Step 11: Making predictions on the test set","c6168530":"An ROC curve demonstrates several things:\n\n- It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n- The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n- The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","c437b3d3":"#### Paperless Billing","8dd8d9f9":"### Step 10: Finding Optimal Cutoff Point","a19a6b15":"It means that 11\/7043 = 0.001561834 i.e 0.1%, best is to remove these observations from the analysis","33175e7c":"#### Checking for Missing Values and Inputing Them","4f4c53b7":"##### Precision\nTP \/ TP + FP","fe4cd8d8":"### Step 6: Looking at Correlations","36cc580d":"Now we don't have any missing values","fc4c267b":"After dropping highly correlated variables now let's check the correlation matrix again.","548f9a2b":"### Univariate Analysis","880da8dc":"### Step 4: Test-Train Split","163ffde8":"#### Online Backup","308e0563":"Now you can see that you have all variables as numeric.","43a98951":"All variables have a good value of VIF. So we need not drop any more variables and we can proceed with making predictions using this model only","b4b8f3c6":"##### Assessing the model with StatsModels","e5320b94":"### Data Preparation","05fce936":"#### Dropping highly correlated dummy variables","c2282dfa":"### Problem Statement: \n\nYou have a telecom firm which has collected data of all its customers. \n\nThe main types of attributes are:\n\n1. Demographics (age, gender etc.)\n2. Services availed (internet packs purchased, special offers taken etc.)\n3. Expenses (amount of recharge done per month etc.)\n \n\nBased on all this past information, you want to build a model which will predict whether a particular customer will churn or not.<br> \nSo the variable of interest, i.e. the target variable here is \u2018Churn\u2019 which will tell us whether or not a particular customer has churned. It is a binary variable - 1 means that the customer has churned and 0 means the customer has not churned.\nWith 21 predictor variables we need to predict whether a particular customer will switch to another telecom provider or not.\n\n### Data\n\nData is available is three csv files and a data dictionary is provided to define\/explain all the variables.","cf482c09":"#### Internet Service","56c92e02":"## Model Building","232f18ae":"#### Running Your First Training Model","02655d82":"Making predictions on the test set","8ccd80bc":"#### Payment Method","af0ae81b":"#### Gender","a03e45f8":"#### Phone Service","324a07d4":"#### Contract","46435d6f":"### Step 8: Feature Selection Using RFE","4df60e31":"#### Churn (Target Variable)","64717446":"So overall the accuracy hasn't dropped much.","12306b7a":"#### Combining all data files into one consolidated dataframe","f0b72028":"##### Let's check the VIFs again","7db1abfc":"#### Dependents","5018547a":"## Precision and Recall","8a785b93":"## Reading and Understanding the Data and Merging Data","f6ca4fd6":"#### TotalCharges","690b981b":"#### From the curve above, 0.3 is the optimum point to take it as a cutoff probability.","82db9dfa":"#### Streaming TV","1e6678e8":"#### Checking VIFs","07eb61e3":"#### Partner","d0e49baf":"#### Tenure","6837deac":"#### Dropping the repeated variables","6beb6f6e":"#### Online Security","dbc8b969":"#### Checking the Correlation Matrix","6b6122fa":"## EXploratory Data Analytics","82cbf0a4":"### Data Cleaning","907e450a":"#### Checking for Outliers","60699e24":"#### For categorical variables with multiple levels, create dummy features (one-hot encoded)","24e6f505":"#### Multiple Lines","e3bbeab1":"#### Monthly Charges","f49d84f4":"## Multivariate Logistic Regression","3a7d9727":"Using sklearn utilities for the same","071ecccd":"### Step 5: Feature Scaling","bf00fc62":"The accuracy is still practically the same.","5d720fc6":"### Step 7: Model Building\nLet's start by splitting our data into a training set and a test set.","7c7bd7b7":"#### Total Charges","78ebf3de":"#### Senior Citizen","c835f652":"### Step 9: Plotting the ROC Curve","8c769111":"### Precision and recall tradeoff","835c77b3":"#### Tech Support","89b694f2":"We have almost 27% churn rate","ce934581":"# Telecom Churn Case Study","3e0deb84":"#### Converting some binary variables (Yes\/No) to 0\/1","22e5661c":"## Metrics beyond simply accuracy","08f96846":"##### Let's now check the VIFs again","fbc321d2":"#### Streaming Movies","10ef65b2":"### Data Inspection","2559c166":"There are a few variables with high VIF. It's best to drop these variables as they aren't helping much with prediction and unnecessarily making the model complex. The variable 'PhoneService' has the highest VIF. So let's start by dropping that."}}