{"cell_type":{"aab810f2":"code","0d80247b":"code","49586b7a":"code","08d7cad1":"code","e7dd7d4e":"code","4950ed0a":"code","9e67d217":"code","cd878483":"code","5ebed90b":"code","3ff4b694":"code","e1b4aae5":"code","f7900d1d":"code","5d225cb3":"code","bab6dc8c":"code","5ae8b111":"code","ee26b58a":"code","e8048a02":"code","f2509ca8":"code","070b07c6":"code","3aa2fdeb":"code","e7e40390":"code","44acec80":"code","94854123":"code","b4d1bc13":"code","c87b28c6":"code","654f5910":"code","aa0f241e":"code","307855bc":"code","1eac19e2":"code","ab016650":"code","3b45d536":"code","0f1e9351":"code","a3561abc":"code","62c3eaa2":"code","66677376":"code","60df064b":"code","e3305d5e":"code","66fe8b67":"code","613e64f1":"code","3e24a31b":"code","752c6677":"code","53ea7b37":"code","6c001d04":"code","40a49171":"code","6030185d":"code","ae17534c":"code","6ce59c9c":"code","f29d2cef":"code","35362d9e":"code","831d56e8":"code","aaf71291":"code","524113d9":"code","a6ed4b82":"code","f486e509":"code","425ae2f2":"code","279bce6a":"code","25346d3d":"code","aef18038":"code","6cb57d6f":"code","9d0ea4e0":"code","87f3062c":"code","fd00ec2d":"code","ab75d4d3":"code","d9c4cf65":"code","497d0b78":"code","e67b44a4":"code","b5eba8c4":"code","0e76b40a":"code","d4edb00e":"markdown","2b4239e1":"markdown","0ba8175e":"markdown","8f231489":"markdown","b50473e4":"markdown","bc92b7d9":"markdown","5b7cccd4":"markdown","7da2962a":"markdown","4672c3ba":"markdown","e2ee5c4a":"markdown","6f67da68":"markdown","0f8b7c35":"markdown","a13141dd":"markdown","1e9f79f7":"markdown","e5bfa210":"markdown"},"source":{"aab810f2":"import pandas as pd\nfrom IPython.core.display import HTML\n\npath = \"..\/input\/\"\n\nversions = pd.read_csv(path+\"KernelVersions.csv\")\nkernels = pd.read_csv(path+\"Kernels.csv\")\nusers = pd.read_csv(path+\"Users.csv\")\n\nlanguage_map = {'1' : 'R','5' : 'R', '12' : 'R', '13' : 'R', '15' : 'R', '16' : 'R',\n                '2' : 'Python','8' : 'Python', '9' : 'Python', '14' : 'Python'}\n\ndef pressence_check(title, tokens, ignore = []):\n    present = False\n    for token in tokens:\n        words = token.split()\n        if all(wrd.lower().strip() in title.lower() for wrd in words):\n            present = True\n    for token in ignore:\n        if token in title.lower():\n            present = False\n    return present \n\n## check if the latest version of the kernel is about the same topic \ndef get_latest(idd):\n    latest = versions[versions['KernelId'] == idd].sort_values('VersionNumber', ascending = False).iloc(0)[0]\n    return latest['VersionNumber']\n\ndef get_kernels(tokens, n, ignore = []):\n    versions['isRel'] = versions['Title'].apply(lambda x : pressence_check(x, tokens, ignore))\n    relevant = versions[versions['isRel'] == 1]\n    results = relevant.groupby('KernelId').agg({'TotalVotes' : 'sum', \n                                                'KernelLanguageId' : 'max', \n                                                'Title' : lambda x : \"#\".join(x).split(\"#\")[-1],\n                                                'VersionNumber' : 'max'})\n    results = results.reset_index().sort_values('TotalVotes', ascending = False).head(n)\n    results = results.rename(columns={'KernelId' : 'Id', 'TotalVotes': 'Votes'})\n\n\n    results['latest_version']  = results['Id'].apply(lambda x : get_latest(x))\n    results['isLatest'] = results.apply(lambda r : 1 if r['VersionNumber'] == r['latest_version'] else 0, axis=1)\n    results = results[results['isLatest'] == 1]\n\n    results = results.merge(kernels, on=\"Id\").sort_values('TotalVotes', ascending = False)\n    results = results.merge(users.rename(columns={'Id':\"AuthorUserId\"}), on='AuthorUserId')\n    results['Language'] = results['KernelLanguageId'].apply(lambda x : language_map[str(x)] if str(x) in language_map else \"\")\n    results = results.sort_values(\"TotalVotes\", ascending = False)\n    return results[['Title', 'CurrentUrlSlug','Language' ,'TotalViews', 'TotalComments', 'TotalVotes', \"DisplayName\",\"UserName\"]]\n\n\ndef best_kernels(tokens, n = 10, ignore = []):\n    response = get_kernels(tokens, n, ignore)     \n    hs = \"\"\"<style>\n                .rendered_html tr {font-size: 12px; text-align: left}\n            <\/style>\n            <h3><font color=\"#1768ea\">\"\"\"+tokens[0].title()+\"\"\"<\/font><\/h3>\n            <table>\n            <th>\n                <td><b>Kernel<\/b><\/td>\n                <td><b>Author<\/b><\/td>\n                <td><b>Language<\/b><\/td>\n                <td><b>Views<\/b><\/td>\n                <td><b>Comments<\/b><\/td>\n                <td><b>Votes<\/b><\/td>\n            <\/th>\"\"\"\n    for i, row in response.iterrows():\n        url = \"https:\/\/www.kaggle.com\/\"+row['UserName']+\"\/\"+row['CurrentUrlSlug']\n        aurl= \"https:\/\/www.kaggle.com\/\"+row['UserName']\n        hs += \"\"\"<tr>\n                    <td>\"\"\"+str(i+1)+\"\"\"<\/td>\n                    <td><a href=\"\"\"+url+\"\"\" target=\"_blank\"><b>\"\"\"  + row['Title'] + \"\"\"<\/b><\/a><\/td>\n                    <td><a href=\"\"\"+aurl+\"\"\" target=\"_blank\">\"\"\"  + row['DisplayName'] + \"\"\"<\/a><\/td>\n                    <td>\"\"\"+str(row['Language'])+\"\"\"<\/td>\n                    <td>\"\"\"+str(row['TotalViews'])+\"\"\"<\/td>\n                    <td>\"\"\"+str(row['TotalComments'])+\"\"\"<\/td>\n                    <td>\"\"\"+str(row['TotalVotes'])+\"\"\"<\/td>\n                    <\/tr>\"\"\"\n    hs += \"<\/table>\"\n    display(HTML(hs))","0d80247b":"tokens = [\"linear regression\"]\nbest_kernels(tokens, 10)","49586b7a":"tokens = ['logistic regression', \"logistic\"]\nbest_kernels(tokens, 10)","08d7cad1":"tokens = ['Ridge']\nbest_kernels(tokens, 10)","e7dd7d4e":"tokens = ['Lasso']\nbest_kernels(tokens, 10)","4950ed0a":"tokens = ['ElasticNet']\nbest_kernels(tokens, 4)","9e67d217":"tokens = ['Decision Tree']\nbest_kernels(tokens, 10)","cd878483":"tokens = ['random forest']\nbest_kernels(tokens, 10)","5ebed90b":"tokens = ['lightgbm', 'light gbm', 'lgb']\nbest_kernels(tokens, 10)","3ff4b694":"tokens = ['xgboost', 'xgb']\nbest_kernels(tokens, 10)","e1b4aae5":"tokens = ['catboost']\nbest_kernels(tokens, 10)","f7900d1d":"tokens = ['neural network']\nbest_kernels(tokens, 10)","5d225cb3":"tokens = ['autoencoder']\nbest_kernels(tokens, 10)","bab6dc8c":"tokens = ['deep learning']\nbest_kernels(tokens, 10)","5ae8b111":"tokens = ['convolutional neural networks', 'cnn']\nbest_kernels(tokens, 10)","ee26b58a":"tokens = ['lstm']\nbest_kernels(tokens, 10)","e8048a02":"tokens = ['gru']\nignore = ['grupo']\nbest_kernels(tokens, 10, ignore)","f2509ca8":"tokens = ['mxnet']\nbest_kernels(tokens, 10)","070b07c6":"tokens = ['resnet']\nbest_kernels(tokens, 10)","3aa2fdeb":"tokens = ['Capsule network', 'capsulenet']\nbest_kernels(tokens, 5)","e7e40390":"tokens = ['vgg']\nbest_kernels(tokens, 5)","44acec80":"tokens = ['inception']\nbest_kernels(tokens, 5)","94854123":"tokens = ['computer vision']\nbest_kernels(tokens, 5)","b4d1bc13":"tokens = ['transfer learning']\nbest_kernels(tokens, 5)","c87b28c6":"tokens = ['kmeans', 'k means']\nbest_kernels(tokens, 10)","654f5910":"tokens = ['hierarchical clustering']\nbest_kernels(tokens, 3)","aa0f241e":"tokens = ['dbscan']\nbest_kernels(tokens, 10)","307855bc":"tokens = ['unsupervised']\nbest_kernels(tokens, 10)","1eac19e2":"tokens = ['naive bayes']\nbest_kernels(tokens, 10)","ab016650":"tokens = ['svm']\nbest_kernels(tokens, 10)","3b45d536":"tokens = ['knn']\nbest_kernels(tokens, 10)","0f1e9351":"tokens = ['recommendation engine']\nbest_kernels(tokens, 5)","a3561abc":"tokens = ['EDA', 'exploration']\nbest_kernels(tokens, 10)","62c3eaa2":"tokens = ['feature engineering']\nbest_kernels(tokens, 10)","66677376":"tokens = ['feature selection']\nbest_kernels(tokens, 10)","60df064b":"tokens = ['outlier treatment', 'outlier']\nbest_kernels(tokens, 10)","e3305d5e":"tokens = ['anomaly detection', 'anomaly']\nbest_kernels(tokens, 8)","66fe8b67":"tokens = ['smote']\nbest_kernels(tokens, 5)","613e64f1":"tokens = ['pipeline']\nbest_kernels(tokens, 10)","3e24a31b":"tokens = ['dataset decomposition', 'dimentionality reduction']\nbest_kernels(tokens, 2)","752c6677":"tokens = ['PCA']\nbest_kernels(tokens, 10)","53ea7b37":"tokens = ['Tsne', 't-sne']\nbest_kernels(tokens, 10)","6c001d04":"tokens = ['cross validation']\nbest_kernels(tokens, 10)","40a49171":"tokens = ['model selection']\nbest_kernels(tokens, 10)","6030185d":"tokens = ['model tuning', 'tuning']\nbest_kernels(tokens, 10)","ae17534c":"tokens = ['gridsearch', 'grid search']\nbest_kernels(tokens, 10)","6ce59c9c":"tokens = ['ensemble']\nbest_kernels(tokens, 10)","f29d2cef":"tokens = ['stacking', 'stack']\nbest_kernels(tokens, 10)","35362d9e":"tokens = ['bagging']\nbest_kernels(tokens, 10)","831d56e8":"tokens = ['NLP', 'Natural Language Processing', 'text mining']\nbest_kernels(tokens, 10)","aaf71291":"tokens = ['topic modelling']\nbest_kernels(tokens, 8)","524113d9":"tokens = ['word embedding','fasttext', 'glove', 'word2vec']\nbest_kernels(tokens, 8)","a6ed4b82":"tokens = ['scikit']\nbest_kernels(tokens, 10)","f486e509":"tokens = ['tensorflow', 'tensor flow']\nbest_kernels(tokens, 10)","425ae2f2":"tokens = ['theano']\nbest_kernels(tokens, 10)","279bce6a":"tokens = ['keras']\nbest_kernels(tokens, 10)","25346d3d":"tokens = ['pytorch']\nbest_kernels(tokens, 10)","aef18038":"tokens = ['vowpal wabbit','vowpalwabbit']\nbest_kernels(tokens, 10)","6cb57d6f":"tokens = ['eli5']\nbest_kernels(tokens, 10)","9d0ea4e0":"tokens = ['hyperopt']\nbest_kernels(tokens, 5)","87f3062c":"tokens = ['pandas']\nbest_kernels(tokens, 10)","fd00ec2d":"tokens = ['SQL']\nbest_kernels(tokens, 10)","ab75d4d3":"tokens = ['bigquery', 'big query']\nbest_kernels(tokens, 10)","d9c4cf65":"tokens = ['visualization', 'visualisation']\nbest_kernels(tokens, 10)","497d0b78":"tokens = ['plotly', 'plot.ly']\nbest_kernels(tokens, 10)","e67b44a4":"tokens = ['seaborn']\nbest_kernels(tokens, 10)","b5eba8c4":"tokens = ['d3.js']\nbest_kernels(tokens, 4)","0e76b40a":"tokens = ['bokeh']\nbest_kernels(tokens, 10)","d4edb00e":"### 7.3 Post Modelling Techniques","2b4239e1":"## 5. Clustering Algorithms ","0ba8175e":"### 7.1 Preprocessing","8f231489":"## 4. Neural Networks and Deep Learning Models","b50473e4":"## 7. Important Data Science Techniques","bc92b7d9":"<br>\nThanks for viewing. Suggest the list of items which can be added to the list. If you liked this kernel, please upvote.  \n","5b7cccd4":"### 7.2 Dimentionality Reduction","7da2962a":"## 6. Misc - Models ","4672c3ba":"## 2. Regularization Algorithms","e2ee5c4a":"## 8. Text Data","6f67da68":"## 10. Data Visualization","0f8b7c35":"### 7.4 Ensemblling","a13141dd":"## 3. Tree Based Models","1e9f79f7":"## 9. Data Science Tools","e5bfa210":"# Data Science Glossary on Kaggle\n\nKaggle is the place to do data science projects. There are so many algorithms and concepts to learn. Kaggle Kernels are one of the best resources on internet to understand the practical implementation of algorithms. There are almost 200,000 kernels published on kaggle and sometimes it becomes diffcult to search for the right implementation. I have used the [Meta Kaggle](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle) database to create a glossary of data science models, techniques and tools shared on kaggle kernels. One can use this kernel as the one place to find other great kernels shared by great authors. Hope you like this kernel.  \n\n\n## Contents \n\n<ul>\n  <li>1. Regression Algorithms\n    <ul>\n    <li>1.1 Linear Regression<\/li>\n    <li>1.2 Logistic Regression<\/li>\n    <\/ul>\n  <\/li>\n    <li>2. Regularization Algorithms\n    <ul>\n    <li>2.1 Ridge Regression Regression<\/li>\n    <li>2.2 Lasso Regression<\/li>\n    <li>2.3 Elastic Net<\/li>\n    <\/ul>\n  <\/li>\n  <\/li>\n    <li>3. Tree Based Models\n    <ul>\n    <li>3.1 Decision Tree<\/li>\n    <li>3.2 Random Forests<\/li>\n    <li>3.3 Lightgbm<\/li>\n    <li>3.4 XgBoost<\/li>\n    <li>3.5 Cat Boost<\/li>\n    <\/ul>\n  <\/li>\n<li>4. Neural Networks and Deep Learning\n    <ul>\n    <li>4.1 Neural Networks<\/li>\n    <li>4.2 AutoEncoders<\/li>\n    <li>4.3 DeepLearning<\/li>\n    <li>4.4 Convolutional Neural Networks<\/li>\n    <li>4.5 LSTMs<\/li>\n    <li>4.6 GRUs<\/li>\n    <li>4.7 MxNet<\/li>\n    <li>4.8 ResNet<\/li>\n    <li>4.9 CapsuleNets<\/li>\n    <li>4.10 VGGs<\/li>\n    <li>4.11 Inception Nets<\/li>\n     <li>4.12 Computer Vision<\/li>\n     <li>4.13 Transfer Learning<\/li>\n     <\/ul>\n  <\/li>\n<li>5. Clustering Algorithms\n    <ul>\n    <li>5.1 K Means Clustering <\/li>\n    <li>5.2 Hierarchial Clustering<\/li>\n    <li>5.3 DB Scan<\/li>\n    <li>5.4 Unsupervised Learning <\/li>\n    <\/ul>\n  <\/li>\n  <li>6. Misc - Models\n    <ul>\n    <li>6.1 K Naive Bayes <\/li>\n    <li>6.2 SVMs<\/li>\n    <li>6.3 KNN<\/li>\n    <li>6.4 Recommendation Engine <\/li>\n    <\/ul>\n  <\/li>\n  <li>7.1 Data Science Techniques - Preprocessing\n    <ul>\n    <li>a. EDA, Exploration <\/li>\n    <li>b. Feature Engineering <\/li>\n    <li>c. Feature Selection <\/li>\n    <li>d. Outlier Treatment<\/li>\n    <li>e. Anomaly Detection<\/li>\n    <li>f. SMOTE<\/li>\n    <li>g. Pipeline<\/li>\n    <\/ul>\n  <\/li>\n  <li>7.2 Data Science Techniques - Dimentionality Reduction\n    <ul>\n    <li>a. Dataset Decomposition <\/li>\n    <li>b. PCA <\/li>\n    <li>c. Tsne <\/li>\n    <\/ul>\n  <\/li>\n  <li>7.3 Data Science Techniques - Post Modelling\n    <ul>\n    <li>a. Cross Validation <\/li>\n    <li>b. Model Selection <\/li>\n    <li>c. Model Tuning <\/li>\n    <li>d. Grid Search <\/li>\n    <\/ul>\n  <\/li>\n  <li>7.4 Data Science Techniques - Ensemblling\n    <ul>\n    <li>a. Ensembling <\/li>\n    <li>b. Stacking <\/li>\n    <li>c. Bagging<\/li>\n    <\/ul>\n  <\/li>\n  <li>8. Text Data \n    <ul>\n    <li>8.1. NLP <\/li>\n    <li>8.2. Topic Modelling <\/li>\n    <li>8.3. Word Embeddings <\/li>\n    <\/ul>\n  <\/li>\n <li>9. Data Science Tools \n    <ul>\n    <li>9.1 Scikit Learn <\/li>\n    <li>9.2 TensorFlow <\/li>\n    <li>9.3 Theano <\/li>\n    <li>9.4 Kears <\/li>\n    <li>9.5 PyTorch <\/li>\n    <li>9.6 Vopal Wabbit <\/li>\n    <li>9.7 ELI5 <\/li>\n    <li>9.8 HyperOpt <\/li>\n    <li>9.9 Pandas <\/li>\n    <li>9.10 Sql <\/li>\n    <li>9.11 BigQuery <\/li>\n    <\/ul>\n  <\/li>\n<li>10. Data Visualizations \n    <ul>\n    <li>10.1. Visualizations <\/li>\n    <li>10.2. Plotly <\/li>\n    <li>10.3. Seaborn <\/li>\n    <li>10.4. D3.Js <\/li>\n    <li>10.5. Bokeh <\/li>\n    <\/ul>\n  <\/li>\n<\/ul>\n\n<br><br>\n\n## 1. Regression Algorithms\n"}}