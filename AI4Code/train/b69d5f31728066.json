{"cell_type":{"cd273f92":"code","7243e35e":"code","ef266811":"code","b15df169":"code","4eae8860":"code","b23c32f0":"code","e800621e":"code","5eb25987":"markdown","6fb88e42":"markdown","5b751c97":"markdown","92899451":"markdown","4bc4f9ee":"markdown","6ddf9889":"markdown","0a435491":"markdown","393c3444":"markdown","e2496e03":"markdown","f6e34e82":"markdown"},"source":{"cd273f92":"!pip install https:\/\/github.com\/YBiryukov\/kaggle-environments\/archive\/master.zip\n","7243e35e":"%%writefile submission.py\n# start executing cells from here to rewrite submission.py\n\ndef asteroid_above_weapon(asteroids, weapon_center, my_ship):\n    \"\"\"\n        chect if there is an asteroid above weapon center and\n        that asteroid's color is different from my_ship's cargo platform color\n    \"\"\"\n    asteroid_found = False\n    # asteroid that is above weapon_center\n    closest_asteroid = None\n    for asteroid in asteroids:\n        # if asteroid is above weapon_center\n        if ((asteroid[\"x\"] + asteroid[\"size\"]) >= weapon_center and\n                (asteroid[\"x\"] - asteroid[\"size\"]) <= weapon_center):\n            # if this asteroid is closer than current closest_asteroid\n            if closest_asteroid == None or asteroid[\"y\"] > closest_asteroid[\"y\"]:\n                # if asteroid's color is different from my_ship's cargo platform color\n                if asteroid[\"color\"] != my_ship[\"platformColor\"]:\n                    asteroid_found = True\n                else:\n                    asteroid_found = False\n                closest_asteroid = asteroid\n    # if there is no asteroids above weapon_center\n    if closest_asteroid == None:\n        asteroid_found = False\n    return asteroid_found\n\ndef get_left_weapon_action(obs, conf, my_ship, actions_dict):\n    \"\"\" get action of the ship's left weapon \"\"\"\n    weapon_center = my_ship[\"currentPosition\"][\"x\"] + conf.shipFrame[\"weaponSize\"][\"x\"] * 0.5\n    # if there's an asteroid above this weapon\n    if asteroid_above_weapon(obs.asteroids, weapon_center, my_ship):\n        action = actions_dict[\"fire\"]\n    else:\n        action = actions_dict[\"hold\"]\n    return action\n\ndef get_right_weapon_action(obs, conf, my_ship, actions_dict):\n    \"\"\" get action of the ship's right weapon \"\"\"\n    weapon_center = my_ship[\"currentPosition\"][\"x\"] + conf.shipFrame[\"size\"][\"x\"] - conf.shipFrame[\"weaponSize\"][\"x\"] * 0.5\n    # if there's an asteroid above this weapon\n    if asteroid_above_weapon(obs.asteroids, weapon_center, my_ship):\n        action = actions_dict[\"fire\"]\n    else:\n        action = actions_dict[\"hold\"]\n    return action\n\ndef get_ship_movement_action(obs, conf, my_ship, actions_dict):\n    \"\"\" get movement action of the ship \"\"\"\n    # asteroid that is above and closest to my_ship\n    closest_asteroid = None\n    # distance above my_ship to scan for asteroids\n    distance_to_my_ship = conf.canvasSize[1] * 0.5\n    for asteroid in obs.asteroids:\n        # if asteroid is above and closest to my_ship\n        if ((asteroid[\"y\"] + asteroid[\"size\"]) >= distance_to_my_ship and\n                (asteroid[\"x\"] + asteroid[\"size\"]) >= my_ship[\"currentPosition\"][\"x\"] and\n                (asteroid[\"x\"] - asteroid[\"size\"]) <= (my_ship[\"currentPosition\"][\"x\"] + conf.shipFrame[\"size\"][\"x\"]) and\n                # and asteroid's color is different from my_ship's cargo platform color\n                asteroid[\"color\"] != my_ship[\"platformColor\"]):\n            # if this asteroid is closer than current closest_asteroid\n            if closest_asteroid == None or asteroid[\"y\"] > closest_asteroid[\"y\"]:\n                # asteroid is to the left from my_ship's x center\n                if asteroid[\"x\"] < (my_ship[\"currentPosition\"][\"x\"] + conf.shipFrame[\"shipXCenter\"]):\n                    action = actions_dict[\"starboard\"]\n                else:\n                    action = actions_dict[\"port\"]\n                closest_asteroid = asteroid\n    # if there is no asteroids above and close to my_ship\n    if closest_asteroid == None:\n        canvas_center = conf.canvasSize[0] * 0.5\n        too_far_to_left = canvas_center - conf.shipFrame[\"shipXCenter\"] * 4\n        too_far_to_right = canvas_center + conf.shipFrame[\"shipXCenter\"] * 2\n        # if my_ship is too far from canvas center\n        if my_ship[\"currentPosition\"][\"x\"] < too_far_to_left:\n            action = actions_dict[\"starboard\"]\n        elif my_ship[\"currentPosition\"][\"x\"] > too_far_to_right:\n            action = actions_dict[\"port\"]\n        else:\n            action = actions_dict[\"steady\"]\n    return action\n","ef266811":"%%writefile -a submission.py\n# \"%%writefile -a submission.py\" will append the code below to submission.py,\n# it WILL NOT rewrite submission.py\n\ndef my_agent(obs, conf):\n    \"\"\" this function is your agent's entry point \"\"\"\n    my_ship = obs.shipsOfPlayers[0]\n    # ship movement action\n    ship_movement_action = get_ship_movement_action(obs, conf, my_ship, conf.shipFrame[\"moves\"])\n    # left weapon action\n    left_weapon_action = get_left_weapon_action(obs, conf, my_ship, conf.shipFrame[\"leftWeaponActions\"])\n    # right weapon action\n    right_weapon_action = get_right_weapon_action(obs, conf, my_ship, conf.shipFrame[\"rightWeaponActions\"])\n    # return my_agent's actions\n    return [ship_movement_action, left_weapon_action, right_weapon_action]\n","b15df169":"import py_compile\n\n# name of the agent, it will be used in the Arena\nFILE_NAME = \"my_best_agent\"\n# to use agent from compiled FILE_NAME in this notebook\npy_compile.compile(\"submission.py\", f'{FILE_NAME}.pyc')\n","4eae8860":"py_compile.compile(\"submission.py\", f'{FILE_NAME}.asteroids')\n","b23c32f0":"from kaggle_environments import evaluate, make, utils\n# imported from previously compiled my_best_agent.pyc\n# my_agent is the name of agent's entry point function\nfrom my_best_agent import my_agent as my_best_agent\n\n\nGAMES_AMOUNT = 10\nresults = evaluate(\n                    \"asteroids\",\n#                     [my_best_agent, my_best_agent],\n#                     [\"random_bot\", \"random_bot\"],\n#                     [my_best_agent, \"random_bot\"],\n#                     [my_best_agent, \"..\/input\/asteroids-bots\/avoiding_bot.py\"],\n                    [my_best_agent, \"..\/input\/asteroids-bots\/avoiding_and_firing_bot.py\"],\n                    \n                    num_episodes=GAMES_AMOUNT,\n                    configuration={\"episodeSteps\": 1000, \"agentExec\": \"LOCAL\"}\n                  )\n\nwon = 0\nlost = 0\ntie = 0\nfor result in results:\n    my_score = result[0]\n    opp_score = result[1]\n    if my_score > opp_score:\n        won += 1\n    elif my_score < opp_score:\n        lost += 1\n    else:\n        tie += 1\n\nprint(f'\\nOf {GAMES_AMOUNT} games: won {won}, lost {lost}, tie {tie}\\n')\n\nprint(\"results:\")\nfor result in results:\n    print(result)\n","e800621e":"env = make(\"asteroids\", configuration={\"episodeSteps\": 1000}, debug=True)\n\n# env.run([\"random_bot\", \"random_bot\"])\n# env.run([my_best_agent, my_best_agent])\n# env.run([my_best_agent, \"random_bot\"])\n# env.run([my_best_agent, \"..\/input\/asteroids-bots\/avoiding_bot.py\"])\nenv.run([my_best_agent, \"..\/input\/asteroids-bots\/avoiding_and_firing_bot.py\"])\n\n\n# width=630, height=530 to explicitly see the borders of canvas\nenv.render(mode=\"ipython\", width=630, height=530)\n\n# to change speed of the rendering,\n# click on the canvas and then press one of the numbers on the keyboard,\n# (numbers that are above character buttons, not numbers that are on the right side of the keyboard)\n# recommended speed: 7\n","5eb25987":"# Evaluate the Agent","6fb88e42":"# Install kaggle-environments from [GitHub](https:\/\/github.com\/YBiryukov\/kaggle-environments)","5b751c97":"Since `.pyc` files are not visible in `kaggle\/working` folder:\n* compile `submission.py` again as `FILE_NAME.asteroids`\n* download `FILE_NAME.asteroids` file\n* create public dataset for your Arena agents, [example](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-bots-for-the-arena)\n* upload `FILE_NAME.asteroids` to your public dataset\n* write a link to that dataset in [Asteroids: Arena](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-arena\/comments) comments, along with the name of your agent's entry point function (`my_agent` is preferable), and I will send agents from that dataset to the Arena.","92899451":"# Create the Agent","4bc4f9ee":"# Functions and Imports of the Agent\nI suggest keeping them in alphabetical order","6ddf9889":"# Test the Agent","0a435491":"# Data Explanation\n\n* Canvas size, can be accessed through `configuration.canvasSize`,\n`conf.canvasSize[0]` -> width, `conf.canvasSize[1]` -> height.\n```\nCANVAS_WIDTH = 600\nCANVAS_HEIGHT = 450\n```\n\n* Asteroids (and ship's platforms and cargo) colors, can't be accessed directly from the agent.\n```\nASTEROIDS_COLORS = [\"#a30404\", \"#63534b\", \"#1e4701\"]\n```\n\n* Standard ship frame, can't be accessed directly from the agent, more details [here](https:\/\/github.com\/YBiryukov\/kaggle-environments\/blob\/8425a42f51e09659a79a67546f3521333b889200\/kaggle_environments\/envs\/asteroids\/asteroids.py#L194).\n```\nSHIP_FRAME = {\n    \"leftWeapon\": {\n        \"steps_for_reload\": 20,\n        \"actions\": [\n            fire_left_weapon,\n            hold_left_weapon\n        ]\n    },\n    \"move\": [\n        -3,\n        3,\n        0\n    ],\n    \"platformCargoSpace\": 3,\n    \"platformCargoUnitSize\": {\"x\": 25, \"y\": 25},\n    \"platformSize\": {\"x\": 75, \"y\": 25},\n    \"projectileSize\": {\"x\": 1, \"y\": 12},\n    \"projectileSpeed\": 10,\n    \"rightWeapon\": {\n        \"steps_for_reload\": 20,\n        \"actions\": [\n            fire_right_weapon,\n            hold_right_weapon\n        ]\n    },\n    \"shipXCenter\": 64,\n    \"size\": {\"x\": 125, \"y\": 50},\n    \"weaponSize\": {\"x\": 25, \"y\": 50},\n    \"weaponXCenter\": 12,\n    \"weaponYCenter\": 25\n}\n```\n\n* Ship's static data, can be accessed through `configuration.shipFrame`, more details [here](https:\/\/github.com\/YBiryukov\/kaggle-environments\/blob\/8425a42f51e09659a79a67546f3521333b889200\/kaggle_environments\/envs\/asteroids\/asteroids.py#L57).\n```\n{\n    \"leftWeaponActions\": {\n        \"fire\": 0,\n        \"hold\": 1\n    },\n    \"moves\": {\n        \"port\": 0,\n        \"starboard\": 1,\n        \"steady\": 2\n    },\n    \"platformCargoUnitSize\": SHIP_FRAME[\"platformCargoUnitSize\"],\n    \"platformSize\": SHIP_FRAME[\"platformSize\"],\n    \"projectileSize\": SHIP_FRAME[\"projectileSize\"],\n    \"rightWeaponActions\": {\n        \"fire\": 0,\n        \"hold\": 1\n    },\n    \"shipXCenter\": SHIP_FRAME[\"shipXCenter\"],\n    \"size\": SHIP_FRAME[\"size\"],\n    \"weaponSize\": SHIP_FRAME[\"weaponSize\"],\n    \"weaponXCenter\": SHIP_FRAME[\"weaponXCenter\"],\n    \"weaponYCenter\": SHIP_FRAME[\"weaponYCenter\"]\n}\n```\n\n* Ship's dynamic data, can be accessed through `observation.shipsOfPlayers` (projectiles are part of ship's data),\n`obs.shipsOfPlayers[0]` -> agent's ship, `obs.shipsOfPlayers[1]` -> opponent's ship,\nmore details [here](https:\/\/github.com\/YBiryukov\/kaggle-environments\/blob\/8425a42f51e09659a79a67546f3521333b889200\/kaggle_environments\/envs\/asteroids\/asteroids.py#L17)\n```\n{\n    \"currentPosition\": {\n        \"x\": random.random() * CANVAS_WIDTH,\n        \"y\": CANVAS_HEIGHT - SHIP_FRAME[\"size\"][\"y\"]\n    },\n    \"leftWeaponReloadedAfter\": 0,\n    \"platformCargoFilledSpace\": 0,\n    \"platformColor\": ASTEROIDS_COLORS[random.randint(0, len(ASTEROIDS_COLORS) - 1)],\n    \"playerNumber\": i + 1,\n    \"projectiles\": [],\n    \"rightWeaponReloadedAfter\": 0,\n    \"score\": 0\n}\n```\n\n* Asteroids dynamic data, list of asteroids can be accessed through `observation.asteroids`,\nmore details [here](https:\/\/github.com\/YBiryukov\/kaggle-environments\/blob\/8425a42f51e09659a79a67546f3521333b889200\/kaggle_environments\/envs\/asteroids\/asteroids.py#L34)\n```\n[\n    {\n        \"color\": ASTEROIDS_COLORS[random.randint(0, len(ASTEROIDS_COLORS) - 1)],\n        \"size\": random.randint(10, 13),\n        \"speed\": random.randint(3, 5),\n        \"x\": random.random() * CANVAS_WIDTH,\n        \"y\": random.random() * CANVAS_HEIGHT\n    },\n    ...\n]\n```\n","393c3444":"# Arena for Agents: [Asteroids: Arena](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-arena)\n# Dataset with bots: [Asteroids: Bots](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-bots)\n# Discussion topic: [Game of Asteroids](https:\/\/www.kaggle.com\/general\/201817)","e2496e03":"# Rules of the Game\n* The game is for two players, player number is shown on the left weapon\n* Collect asteroids of the same color as the current color of the ship's cargo platform\n* Avoid or destroy asteroids of the colors not fitting to the ship's cargo platform color\n* Collect three asteroids of the same color as the ship's cargo platform to increase your score\n* If player's ship has collided with asteroid, and that asteroid's color is not the same as the color of the ship's cargo platform, player's score is reset to 0\n* Collision is checked for the first player, than for the second player\n* Player's score is shown in the center of the ship's cargo platform","f6e34e82":"# Compile the Agent for the [Asteroids: Arena](https:\/\/www.kaggle.com\/yegorbiryukov\/asteroids-arena)\nYou can create a dataset with compiled agents to be sent to the Arena"}}