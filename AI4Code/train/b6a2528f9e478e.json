{"cell_type":{"f59ec0e2":"code","92de6d16":"code","08afb3c0":"code","b1e94789":"code","b98e0bae":"code","14d786bb":"code","869c507a":"code","1a1d9d60":"code","d4fb92c8":"markdown","86e6e0c9":"markdown","a50fd3e9":"markdown","359a13e9":"markdown"},"source":{"f59ec0e2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","92de6d16":"class KNN:\n\n    def __init__(self,k=2):\n        # Need to specified the number of K default = 2\n        self.k=k\n    \n    def fit(self,X,y):\n        # Training on include giving info of training dataset\n        self.X_train=X\n        self.y_train=y\n        \n    def predict(self,X):\n        y=np.zeros(len(X))\n        for idx_of_test, x in enumerate(X): # iterating over test set\n            distance_list_of_test_train=[] # empty list to include test_train distance\n            for idx_of_train , x_t in enumerate(self.X_train): # iterating over training set data\n                difference=x-x_t # next two lines of code calculate distance\n                sqrd_dist=difference.dot(difference)\n                distance_list_of_test_train.append(sqrd_dist) # appending sqrd distance to distance list\n            k_idx=np.argsort(distance_list_of_test_train)[:self.k] #argsort sorts from asc to desc returns index in position\n            k_nearest_lbl=[self.y_train[train_y_idx] for train_y_idx in k_idx] #labelling according its index of y_train\n            y[idx_of_test]=max(set(k_nearest_lbl), key = k_nearest_lbl.count) # getting max occurences of classes in the list\n        return y\n    \n    def accuracy(self,y_true,y_pred):\n        return np.mean(y_true==y_pred)\n            \n            \n        \n        ","08afb3c0":"# Classification data\nfrom sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()","b1e94789":"X=data.data\ny=data.target","b98e0bae":"# Splitting test,train split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X, y, test_size=0.31, random_state=6)","14d786bb":"# Scaling\n# It could be done manually, I used sci-kit learn library\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test=sc.fit_transform(X_test)","869c507a":"# As it is either malignant or benign\nknnC=KNN(2)","1a1d9d60":"# Fitting the data\nknnC.fit(X_train,y_train)\n# predicting on data\ny=knnC.predict(X_test)\n# Calculating Accuracy\nknnC.accuracy(y_test,y)","d4fb92c8":"# K- Nearest Neighbour","86e6e0c9":"### For better understanding Refer to AI Engineering by IBM from coursera","a50fd3e9":"## If these helped. An upvote will motivate me. Thank you","359a13e9":"### K-NN takes a test point and measure distance of k neareset neighbour from that point and classify point according to maximum votes of class in \"k\" neighbours"}}