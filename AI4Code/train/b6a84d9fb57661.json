{"cell_type":{"88d135a0":"code","d12b6e55":"code","2b384c17":"code","bbe93fbb":"code","afb1c742":"code","4d0f1e25":"code","c1fa6439":"code","5e3dd233":"code","8ed73025":"code","f12bb23b":"code","ce284432":"code","ddb8fc24":"code","8592a3ed":"code","f715f904":"code","8f57ab32":"code","e2470ada":"code","1ae3b166":"code","8e1e5724":"code","a54d8017":"code","7a6b2844":"code","8f1ad10b":"code","1d7cdf06":"code","6d5f6159":"code","aff6df7e":"code","44527634":"code","94032544":"code","7d32d62b":"code","6e2fdd03":"code","1c1f1d89":"code","51a014bb":"code","475dcb5e":"code","75101c7c":"code","c7530bf8":"code","b9f6e31d":"code","b376786d":"code","c1ca0b76":"code","62f566a1":"code","8628e35c":"code","2601cfa9":"code","92831aec":"code","a476d982":"code","d611b1b8":"code","95710098":"code","cf6b34c4":"code","b7c5c8b2":"code","5af54fb2":"code","74916476":"code","bc2ed3e2":"code","6ffea54c":"code","69839a69":"markdown"},"source":{"88d135a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d12b6e55":"import os, shutil\noriginal_dataset_dir = '\/kaggle\/input\/plant-seedlings-classification'","2b384c17":"base_dir = '\/kaggle\/input\/base'\nos.mkdir(base_dir)","bbe93fbb":"train_dir = os.path.join(base_dir, 'train')\nos.mkdir(train_dir)\nvalidation_dir = os.path.join(base_dir, 'validation')\nos.mkdir(validation_dir)\ntest_dir = os.path.join(base_dir, 'test')\nos.mkdir(test_dir)","afb1c742":"train_Black_grass_dir = os.path.join(train_dir, 'Black-grass')\ntrain_Charlock_dir = os.path.join(train_dir, 'Charlock')\ntrain_Cleavers_dir = os.path.join(train_dir, 'Cleavers')\ntrain_Common_Chickweed_dir = os.path.join(train_dir, 'Common Chickweed')\ntrain_Common_wheat_dir = os.path.join(train_dir, 'Common wheat')\ntrain_Fat_Hen_dir = os.path.join(train_dir, 'Fat Hen')\ntrain_Loose_Silky_bent_dir = os.path.join(train_dir, 'Loose Silky-bent')\ntrain_Maize_dir = os.path.join(train_dir, 'Maize')\ntrain_Scentless_Mayweed_dir = os.path.join(train_dir, 'Scentless Mayweed')\ntrain_Shepherds_Purse_dir = os.path.join(train_dir, 'Shepherds Purse')\ntrain_Small_flowered_Cranesbill_dir = os.path.join(train_dir, 'Small-flowered Cranesbill')\ntrain_Sugar_beet_dir = os.path.join(train_dir, 'Sugar beet')","4d0f1e25":"os.mkdir(train_Black_grass_dir)\nos.mkdir(train_Charlock_dir)\nos.mkdir(train_Cleavers_dir)\nos.mkdir(train_Common_Chickweed_dir)\nos.mkdir(train_Common_wheat_dir)\nos.mkdir(train_Fat_Hen_dir)\nos.mkdir(train_Loose_Silky_bent_dir)\nos.mkdir(train_Maize_dir)\nos.mkdir(train_Scentless_Mayweed_dir)\nos.mkdir(train_Shepherds_Purse_dir)\nos.mkdir(train_Small_flowered_Cranesbill_dir)\nos.mkdir(train_Sugar_beet_dir)","c1fa6439":"validation_Black_grass_dir = os.path.join(validation_dir, 'Black-grass')\nvalidation_Charlock_dir = os.path.join(validation_dir, 'Charlock')\nvalidation_Cleavers_dir = os.path.join(validation_dir, 'Cleavers')\nvalidation_Common_Chickweed_dir = os.path.join(validation_dir, 'Common Chickweed')\nvalidation_Common_wheat_dir = os.path.join(validation_dir, 'Common wheat')\nvalidation_Fat_Hen_dir = os.path.join(validation_dir, 'Fat Hen')\nvalidation_Loose_Silky_bent_dir = os.path.join(validation_dir, 'Loose Silky-bent')\nvalidation_Maize_dir = os.path.join(validation_dir, 'Maize')\nvalidation_Scentless_Mayweed_dir = os.path.join(validation_dir, 'Scentless Mayweed')\nvalidation_Shepherds_Purse_dir = os.path.join(validation_dir, 'Shepherds Purse')\nvalidation_Small_flowered_Cranesbill_dir = os.path.join(validation_dir, 'Small-flowered Cranesbill')\nvalidation_Sugar_beet_dir = os.path.join(validation_dir, 'Sugar beet')","5e3dd233":"os.mkdir(validation_Black_grass_dir)\nos.mkdir(validation_Charlock_dir)\nos.mkdir(validation_Cleavers_dir)\nos.mkdir(validation_Common_Chickweed_dir)\nos.mkdir(validation_Common_wheat_dir)\nos.mkdir(validation_Fat_Hen_dir)\nos.mkdir(validation_Loose_Silky_bent_dir)\nos.mkdir(validation_Maize_dir)\nos.mkdir(validation_Scentless_Mayweed_dir)\nos.mkdir(validation_Shepherds_Purse_dir)\nos.mkdir(validation_Small_flowered_Cranesbill_dir)\nos.mkdir(validation_Sugar_beet_dir)","8ed73025":"import shutil \nimport os \n\nfor file_dir in os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train'):\n    l = int(len(os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/'+file_dir))*0.7)\n    count = 0\n    for img in os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/'+file_dir):\n        if img.endswith(\".png\"):\n            if count < l:\n                src_dir = \"\/kaggle\/input\/plant-seedlings-classification\/train\/\"+file_dir+'\/'+img\n                dst_dir = train_dir+'\/'+(os.path.basename(os.path.normpath(file_dir)))\n                count += 1\n                shutil.copy(src_dir,dst_dir)","f12bb23b":"for img in os.listdir('\/kaggle\/input\/plant-seedlings-classification\/test'):\n    if img.endswith(\".png\"):\n        src = '\/kaggle\/input\/plant-seedlings-classification\/test\/'+ img\n        dst = '\/kaggle\/input\/base\/test'\n        shutil.copy(src,dst)\n        ","ce284432":"os.listdir('\/kaggle\/input\/base\/test')","ddb8fc24":"for file_dir in os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train'):\n    l = int(len(os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/'+file_dir))*0.7)\n    count = 0\n#     print (l)\n    for img in os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/'+file_dir):\n        if img.endswith(\".png\"):\n            if count >= l:\n                src_dir = \"\/kaggle\/input\/plant-seedlings-classification\/train\/\"+file_dir+'\/'+img\n                dst_dir = validation_dir+'\/'+(os.path.basename(os.path.normpath(file_dir)))\n#                 print (count)\n                shutil.copy(src_dir,dst_dir)\n            count += 1\n            \n#                 ","8592a3ed":"print('total training cat images:', len(os.listdir(train_Black_grass_dir)))","f715f904":"i = 0\nfor dirs in os.listdir(validation_dir):\n    for img in os.listdir(validation_dir+'\/'+dirs):\n        i += 1\nprint (i)","8f57ab32":"len(os.listdir('\/kaggle\/input\/plant-seedlings-classification\/train\/Black-grass'))","e2470ada":"from PIL import Image\n\nim = Image.open('\/kaggle\/input\/plant-seedlings-classification\/train\/Black-grass\/d3c72d4c3.png')\nwidth, height = im.size\nprint (width)\nprint (height)","1ae3b166":"num_class = 12","8e1e5724":"from keras import layers\nfrom keras import models\nfrom keras.layers.core import Activation\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',\ninput_shape=(84, 84, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(layers.Dense(12, activation='softmax'))\n# model.add(Activation(activation='softmax'))\n# model.add(layers.Dense(12, activation='softmax'))","a54d8017":"model.summary()","7a6b2844":"from keras import optimizers\nmodel.compile(loss='categorical_crossentropy',\n                optimizer=optimizers.RMSprop(lr=1e-4),\n                metrics=['acc'])","8f1ad10b":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntrain_generator = train_datagen.flow_from_directory(\n                train_dir,\n                target_size=(84, 84),\n                batch_size=20,\n                class_mode='categorical')\nvalidation_generator = test_datagen.flow_from_directory(\n                validation_dir,\n                target_size=(84, 84),\n                batch_size=20,\n                class_mode='categorical')\n","1d7cdf06":"for data_batch, labels_batch in train_generator:\n    print('data batch shape:', data_batch.shape)\n    print('labels batch shape:', labels_batch.shape)\n    break","6d5f6159":"history = model.fit_generator(\n            train_generator,\n            steps_per_epoch=100,\n            epochs=10,\n            validation_data=validation_generator,\n            validation_steps=50)","aff6df7e":"import matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","44527634":"model.save('\/kaggle\/input\/simple.h5')","94032544":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2,\nshear_range=0.2,\nzoom_range=0.2,\nhorizontal_flip=True,\nfill_mode='nearest')","7d32d62b":"from keras import layers\nfrom keras import models\nfrom keras.layers.core import Activation\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout\nfrom keras import optimizers\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',\ninput_shape=(84, 84, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(12, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',\noptimizer=optimizers.RMSprop(lr=1e-4),\nmetrics=['acc'])","6e2fdd03":"train_datagen = ImageDataGenerator(\nrescale=1.\/255,\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2,\nshear_range=0.2,\nzoom_range=0.2,\nhorizontal_flip=True,)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\ntarget_size=(84, 84),\nbatch_size=32,\nclass_mode='categorical')\nvalidation_generator = test_datagen.flow_from_directory(\nvalidation_dir,\ntarget_size=(84, 84),\nbatch_size=32,\nclass_mode='categorical')\n\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=30,\nvalidation_data=validation_generator,\nvalidation_steps=50)","1c1f1d89":"model.save('\/kaggle\/input\/simple_augmentation.h5')","51a014bb":"from keras.applications import VGG16\nconv_base = VGG16(weights='imagenet',\ninclude_top=False,\ninput_shape=(84, 84, 3))","475dcb5e":" conv_base.summary()","75101c7c":"from keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(12, activation='softmax'))","c7530bf8":"model.summary()","b9f6e31d":"conv_base.trainable = False","b376786d":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\ntrain_datagen = ImageDataGenerator(\nrescale=1.\/255,\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2,\nshear_range=0.2,\nzoom_range=0.2,\nhorizontal_flip=True,\nfill_mode='nearest')\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\ntarget_size=(84, 84),\nbatch_size=20,\nclass_mode='categorical')\nvalidation_generator = test_datagen.flow_from_directory(\nvalidation_dir,\ntarget_size=(84, 84),\nbatch_size=20,\nclass_mode='categorical')\nmodel.compile(loss='categorical_crossentropy',\noptimizer=optimizers.RMSprop(lr=2e-5),\nmetrics=['acc'])\n\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=30,\nvalidation_data=validation_generator,\nvalidation_steps=50)","c1ca0b76":"conv_base.trainable = True\nset_trainable = False\nfor layer in conv_base.layers:\n    if layer.name == 'block5_conv1':\n        set_trainable = True\n    if set_trainable:\n        layer.trainable = True\n    else:\n        layer.trainable = False","62f566a1":"model.compile(loss='categorical_crossentropy',\noptimizer=optimizers.RMSprop(lr=1e-5),\nmetrics=['acc'])\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=50,\nvalidation_data=validation_generator,\nvalidation_steps=50)","8628e35c":"model.save(\"\/kaggle\/input\/fine_tuned.h5\")","2601cfa9":"test_generator = test_datagen.flow_from_directory(\nvalidation_dir,\ntarget_size=(84, 84),\nbatch_size=20,\nclass_mode='categorical')\ntest_loss, test_acc = model.evaluate_generator(test_generator, steps=50)\nprint('test acc:', test_acc)","92831aec":"os.listdir('\/kaggle\/input')","a476d982":"submission = pd.read_csv('\/kaggle\/input\/plant-seedlings-classification\/sample_submission.csv')","d611b1b8":"submission.head()","95710098":"from keras.models import load_model\nfrom keras.preprocessing import image\nimport numpy as np","cf6b34c4":"img_width, img_height = 84, 84\nmodel = load_model('\/kaggle\/input\/fine_tuned.h5')\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])","b7c5c8b2":"\ndef load_image(img_path, show=False):\n\n    img = image.load_img(img_path, target_size=(84, 84))\n    img_tensor = image.img_to_array(img)                    # (height, width, channels)\n    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)\n    img_tensor \/= 255.\n    return img_tensor","5af54fb2":"model = load_model('\/kaggle\/input\/fine_tuned.h5')\nimg_path = '\/kaggle\/input\/plant-seedlings-classification\/train\/Scentless Mayweed\/3fb764193.png'\nnew_image = load_image(img_path)\npred = model.predict(new_image)","74916476":"\nlabels = np.argmax(pred, axis=-1)    \nprint(labels)","bc2ed3e2":"pred","6ffea54c":"train_generator.class_indices","69839a69":"simple ANN"}}