{"cell_type":{"689f5169":"code","3ad88f82":"code","ab6ac64f":"code","f434b594":"code","600be63f":"code","040992f7":"code","3071795c":"code","574a8ba9":"code","c57955b5":"code","e8fc9d87":"code","a8fe3ccc":"code","bf1721ca":"code","21fc93fe":"code","51b88301":"code","593d765a":"code","4d8826da":"code","b30c7cb7":"code","35788b14":"code","4be4dc74":"code","e1d26a6c":"code","c7ff83c4":"code","33e5523d":"code","ce52cd5c":"code","b0a5e800":"code","ac6fe342":"code","0f88db12":"code","9c191b80":"code","4365d9bb":"code","1294669f":"code","76ce46bf":"markdown","140a2318":"markdown","7101f8d4":"markdown","049cec4a":"markdown","c1e51553":"markdown","efdcb6cd":"markdown","0bcba625":"markdown","7323bc1d":"markdown","b957af4b":"markdown","e4ee3a35":"markdown","a96a093d":"markdown","a540574d":"markdown","d9ca5941":"markdown","7790da60":"markdown","3e0f2b83":"markdown","8cdb8d9e":"markdown","e453d2d7":"markdown","de4a9a19":"markdown","b7bbfbef":"markdown"},"source":{"689f5169":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ad88f82":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data = train_data.drop(['Name'], axis=1)\ntrain_data.head()","ab6ac64f":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data = test_data.drop(['Name'], axis=1)\ntest_data.head()","f434b594":"def split_train_test(data, test_ratio):\n    shuffled_indices = np.random.permutation(len(data))\n    test_set_size = int(len(data)*test_ratio)\n    test_indices = shuffled_indices[:test_set_size]\n    train_indices = shuffled_indices[test_set_size:]\n    return data.iloc[train_indices],data.iloc[test_indices]\n\ntrain_set, test_set = split_train_test(train_data,.2)","600be63f":"train_set.describe()\n","040992f7":"colArrTrain = list(train_set.columns.values)\nfor i in colArrTrain:\n    print(\"Train Set in column {} : {}\".format( i, train_set[i].value_counts().sum()))","3071795c":"import matplotlib.pyplot as plt\n\ntrain_set.hist(figsize=(30,20))","574a8ba9":"plt.scatter(train_set['Age'],train_set['Fare'])","c57955b5":"FareSplit = 100\n\nprint('Average Age: ',np.mean(test_set['Age']))\nfaresBelow = train_set[train_set['Fare'] <= FareSplit]\nfaresAbove = train_set[train_set['Fare'] > FareSplit]\nfaresBelowTest = test_set[test_set['Fare'] <= FareSplit]\nfaresAboveTest = test_set[test_set['Fare'] > FareSplit]\nprint('Fare > x FareSplit Mean:', np.mean(faresAbove['Age']))\nprint('Fare <= x FareSplit Mean:', np.mean(faresBelow['Age']))\nprint('Fare > x FareSplit Mean Test:', np.mean(faresAboveTest['Age']))\nprint('Fare <= x FareSplit Mean Test:', np.mean(faresBelowTest['Age']))","e8fc9d87":"faresBelow.hist(figsize = (20,20))","a8fe3ccc":"faresAbove.hist(figsize = (20,20))","bf1721ca":"faresAbove_corrMatrix =  faresAbove.corr()\nfaresBelow_corrMatrix = faresBelow.corr()\nprint('Below Fare\\n',faresBelow_corrMatrix['Fare'].sort_values())\nprint('Above Fare\\n',faresAbove_corrMatrix['Fare'].sort_values())\nprint('Below Fare\\n',faresBelow_corrMatrix['Survived'].sort_values())\nprint('Above Fare\\n',faresAbove_corrMatrix['Survived'].sort_values())\nprint('Below Fare\\n',faresBelow_corrMatrix['Age'].sort_values())\nprint('Above Fare\\n',faresAbove_corrMatrix['Age'].sort_values())","21fc93fe":"from pandas.plotting import scatter_matrix\nprint(faresBelow.describe())\nscatter_matrix(faresBelow[['Age','Fare','Survived', 'Pclass']], figsize= (25,25) )","51b88301":"print(faresAbove.describe())\nscatter_matrix(faresAbove[['Age','Fare','Survived']], figsize= (25,25) )","593d765a":"plt.hist(train_set['Age'], bins=50)\nplt.xlabel('Age')\nplt.ylabel('Number of Passengers')\nmeanAge = np.mean(faresBelow['Age'])\nmeanAgeTest = np.mean(faresBelow['Age'])\ntrain_set['Age'].fillna(meanAge,inplace=True)\ntest_set['Age'].fillna(meanAgeTest,inplace=True)\ntest_data['Age'].fillna(meanAgeTest,inplace=True)","4d8826da":"plt.hist(train_set['Age'], bins=50)\nplt.xlabel('Age')\nplt.ylabel('Number of Passengers')\n\ntrain_set['Age'].describe()","b30c7cb7":"print(colArrTrain)\ntrain_set.boxplot('Age','Survived')\ntrain_set.boxplot('Pclass','Survived')\ntrain_set.boxplot('SibSp','Survived')\ntrain_set.boxplot('Fare','Survived')","35788b14":"from pandas.plotting import scatter_matrix\nscatterPlotArr1 = ['Age','Fare','Survived']\nscatter_matrix(test_set[scatterPlotArr1], figsize= (25,25))","4be4dc74":"corr_matrix = test_set.corr()\n\ncorr_matrix['Survived'].sort_values()","e1d26a6c":"women = train_set.loc[train_set.Sex == 'female'][\"Survived\"]\nmen = train_set.loc[train_set.Sex == 'male'][\"Survived\"]\n\nrate_women = sum(women)\/len(women)\nrate_men = sum(men)\/len(men)\n\nprint(\"% of women who survived:\", rate_women)\nprint(\"% of men who survived:\", rate_men)","c7ff83c4":"test_set['Sex'].replace('male',1, inplace=True)\ntest_set['Sex'].replace('female',0, inplace=True)\ntrain_set['Sex'].replace('male',1, inplace=True)\ntrain_set['Sex'].replace('female',0, inplace=True)\ntest_data['Sex'].replace('male',1, inplace=True)\ntest_data['Sex'].replace('female',0, inplace=True)\nprint(test_set['Sex'],train_set['Sex'],test_data['Sex'])\ntest_data['Fare'].fillna(np.mean(test_data['Fare']), inplace=True)","33e5523d":"from sklearn.neighbors import KNeighborsClassifier as KN\nfeatures = ['Sex','Fare','Age']\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_test = test_set[features]\n\nknn = KN()\n\nknn.fit(X_train,y_train)\n\nprint(knn.score(X_train,y_train))","ce52cd5c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nfeatures = ['Sex','Fare','Age']\n\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_test = test_set[features]\n\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_train,y_train))\n","b0a5e800":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nfeaturesPS = ['Fare']\nfeatures = ['Fare']\ny_train_reshaped = train_set['Survived'].values.reshape(-1,1)\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_train_reshaped = train_set[featuresPS].values.reshape(-1,1)\nX_test = test_set[features]\n\nreg = LinearRegression()\n\nprediction_space = np.linspace(min(X_train_reshaped), max(X_train_reshaped))\n\nreg.fit(X_train_reshaped,y_train_reshaped)\nreg.fit(X_train,y_train)\n\ny_predPS = reg.predict(prediction_space)\ny_pred = reg.predict(X_test)\nprint(reg.score(X_train_reshaped,y_train_reshaped))\nplt.plot(prediction_space, y_predPS , color='black', linewidth=3)\nplt.show()\n\nprint(y_pred)\nprint(\"R^2: {}\".format(reg.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test,y_pred))\nprint(\"Root Mean Squared Error: {}\".format(rmse))\n","ac6fe342":"features = ['Sex','Fare','Age']\nX_test = test_set[features]\ny_test = test_set['Survived']\nX_train = train_set[features]\ny_train = train_set['Survived']\n\nneighbors = np.arange(1, 9)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\n\nfor i, k in enumerate(neighbors):\n    knn = KN(n_neighbors=k)\n    knn.fit(X_train,y_train)\n    train_accuracy[i] = knn.score(X_train, y_train)\n\n    #Compute accuracy on the testing set\n    test_accuracy[i] = knn.score(X_test, y_test)\n\n\nplt.title('k-NN: Varying Number of Neighbors')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()\n\nprint(knn.score(X_test,y_test))\n","0f88db12":"from sklearn.neighbors import KNeighborsClassifier as KN\nfeatures = ['Sex','Fare','Age']\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_test = test_set[features]\n\nknn = KN()\n\nknn.fit(X_train,y_train)\n\nprint(knn.score(X_train,y_train))\n","9c191b80":"from sklearn.neighbors import KNeighborsClassifier as KN\nfeatures = ['Sex','Fare','Age']\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_test = test_set[features]\n\nknn = KN()\n\nknn.fit(X_train,y_train)\nprint(knn.score(X_test,y_test))\nKNprediction = knn.predict(test_data[features])\nKNoutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': KNprediction})\n# KNoutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4365d9bb":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nfeatures = ['Sex','Fare','Age', 'SibSp']\n\ny_train = train_set['Survived']\ny_test = test_set ['Survived']\nX_train = train_set[features]\nX_test = test_set[features]\n\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, y_train)\nprint(model.score(X_test,y_test))\nRFpredictions = model.predict(test_data[features])\nRFoutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': RFpredictions})\nRFoutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1294669f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\ny = train_set[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_set[features])\nX_test = pd.get_dummies(test_set[features])\nprint(X.describe(), X_test.describe())\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n# output = pd.DataFrame({'PassengerId': test_set.PassengerId, 'Survived': predictions})\n# output.to_csv('submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","76ce46bf":"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                   Initial Exploratory Data Analysis                    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  ","140a2318":"# Before Fill","7101f8d4":"# Split train to train\/test\n\nIn HOML, there is a functioned called split_train_test which we will use to split the data","049cec4a":"# ScatterMatrix of FaresAbove","c1e51553":"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Build Models !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!","efdcb6cd":"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Load Training and Test Data, drop unimportant column (name) and view Data Head !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!","0bcba625":"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Evaluate Models !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!","7323bc1d":"# ScatterMatrix of faresBelow","b957af4b":"# Hist of fair > FareSplit","e4ee3a35":"# % of Men and Women who Survived","a96a093d":"# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Submitting Data !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!","a540574d":"# How to fill empty Ages? Looking at Fares, or just the mean?","d9ca5941":"# Regression is hard...","7790da60":"## Based n evaluating KNN, the number of of n_neighbors is best between 5-7 depending on the train\/test split","3e0f2b83":"Lets look at the data","8cdb8d9e":"# Hist of fair <= FareSplit","e453d2d7":"# After Fill","de4a9a19":"Based on Corr matrix, the fare, age and parents\/children had the closest correlation to survival","b7bbfbef":"# Tutorial Model\/Prediction and Output"}}