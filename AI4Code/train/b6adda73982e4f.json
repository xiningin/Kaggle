{"cell_type":{"c59e0981":"code","f7e29f16":"code","29c634a0":"code","95cf09b0":"code","4af03012":"code","3c6fdd80":"code","33afdbfd":"code","2477083d":"code","758cedf9":"code","993ad0f4":"code","a81a6105":"code","5e97e4fe":"code","98d117a5":"code","41a57236":"code","3dd0e909":"code","9a87ddb5":"code","c6e4b8aa":"code","10aed7a0":"code","26336952":"code","dfdb196f":"code","ae932739":"code","bd44d1c8":"code","18eb0f83":"code","48887184":"code","a3589a04":"code","1047c85c":"code","472687ca":"code","9984ca6e":"code","074d18b8":"code","b0032f5c":"code","52275bfd":"code","88009550":"code","e98a47f1":"code","7ad45eed":"code","f02c2599":"code","b1789b82":"code","94de22c9":"code","c3ab2f53":"code","f192c6cd":"code","321941e5":"code","03210089":"code","45b28d59":"code","2d91afaf":"code","efd38dde":"code","ef40b157":"code","a5d4c6c1":"code","60d369cd":"code","ad33b876":"code","0e3bdf66":"code","fc58590b":"code","aa72896b":"code","a1adf8eb":"code","2620ea01":"code","6f7535a9":"code","e6dbbccf":"code","c40201dc":"code","3d822e9a":"code","27050a10":"code","2cc358d3":"code","b0bb6894":"code","0555434f":"code","6cf2035b":"code","d9626c90":"code","1ac18df6":"code","ea417bbb":"code","e791d8b6":"code","0b73301a":"code","1b8efb70":"code","049c04e5":"code","9a1e098f":"code","99410ec2":"code","9a66f3a5":"code","1934ff54":"code","41ce2147":"code","43a5c45e":"code","6b5fb90f":"code","81cd1bf2":"code","ff6366e2":"code","2b7a2214":"code","40836c69":"code","bab1cc6c":"code","f37e937b":"code","0bb4efb0":"code","8a715791":"code","ed59dd07":"code","a87037ff":"code","8199139b":"code","c0c1dc91":"code","392a107c":"code","bc533b52":"code","31c5c4ba":"code","11f4300f":"code","f40cb5ee":"code","866c980b":"code","8f962115":"code","8378b73c":"code","fe2e2bf4":"code","f2702ac0":"code","fd08e63d":"code","413cfbac":"code","1bd8031f":"code","0f07d5ae":"code","4c3dad2f":"code","9253880c":"code","c9de1855":"code","f5d61765":"code","06ef0196":"code","678cbdf6":"code","b0730cbb":"code","cf02cc9c":"code","9cfa3758":"code","44fe2262":"code","1c4f831d":"code","50667462":"code","46f88e85":"code","68448499":"code","8e606bda":"code","d49bafb9":"code","dca92c08":"code","decb077e":"code","2a05a10b":"code","5e2f56af":"code","bbd3d8a1":"code","6095a671":"code","0c208ec2":"code","412350dd":"code","4d2c26d9":"code","4e79c8c6":"code","19606e9c":"code","59a8289e":"markdown","11404503":"markdown","75eed7b8":"markdown","0b6403d1":"markdown","45672c42":"markdown","5090b4fa":"markdown","eb2dfe70":"markdown","d7a67370":"markdown","6706c036":"markdown","3b3192b4":"markdown","f9f3b08d":"markdown","5fae136b":"markdown","8a368f3a":"markdown","1a76f5a4":"markdown","c8b29148":"markdown","8ef75cc9":"markdown","86e85d84":"markdown","d85b9bdc":"markdown","8671a7fb":"markdown","728abc34":"markdown","1c4622db":"markdown","b9ff5a93":"markdown","2f47544d":"markdown","653702b1":"markdown","97f651b6":"markdown","21255470":"markdown","4fc584f5":"markdown","cd174b00":"markdown","8e0916e8":"markdown","b7bb89c1":"markdown","8f7057dc":"markdown","8f45a42e":"markdown","d8b08745":"markdown","c2a68461":"markdown","1a9316a8":"markdown","0a63b8f3":"markdown","5c768bf4":"markdown","d8fe3d8e":"markdown","22723c90":"markdown","b12ef28c":"markdown","6b4df5c6":"markdown","a5b63672":"markdown","89ef1ea9":"markdown","7a7ede9c":"markdown","68651a91":"markdown","a42f72c3":"markdown","19c31134":"markdown","376094ad":"markdown","18e71f4f":"markdown","4bbf3e6c":"markdown","badb0e31":"markdown","74180074":"markdown","33289643":"markdown","7ba9964b":"markdown","3fb54f37":"markdown","13f89ba1":"markdown","a5b323f7":"markdown","7ab3fa98":"markdown","08bfe4b5":"markdown","e7804ac4":"markdown","34f95966":"markdown","701fcab8":"markdown","ff4cd701":"markdown","3eec1a8c":"markdown","ec8111f9":"markdown","f50eb4f9":"markdown","708273eb":"markdown","0ef046b0":"markdown","be379b8b":"markdown","af604f6a":"markdown","b525a430":"markdown","916060db":"markdown","f89e371b":"markdown","d7de346c":"markdown","5f7ab469":"markdown"},"source":{"c59e0981":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, learning_curve\nimport pickle\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2 ,f_regression\nfrom sklearn.metrics import fbeta_score, make_scorer\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import RandomForestRegressor\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f7e29f16":"df=pd.read_csv('..\/input\/carsdataset\/voiture-big-dataset-score.csv')","29c634a0":"print(len(df))\ndf.head(3) #df.tail() #df.sample()","95cf09b0":"df.columns","4af03012":"df.info() #df.describe() #print(df.dtypes)","3c6fdd80":"df['Nombre de portes'].value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))\nplt.title('number of cars by Number of doors')\nplt.ylabel('number oh cars')\nplt.xlabel('Nombre de portes')","33afdbfd":"total = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum()\/df.isnull().count())*100).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Pourcentage'])\nmissing_data.head(30)","2477083d":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=percent.index, y=percent)\nplt.xlabel('Attributs ', fontsize=15)\nplt.ylabel('Pourcentage des valeurs manquantes', fontsize=15)\nplt.title('Pourcentage des valeurs manquantes par attribut ', fontsize=15)","758cedf9":"df.price=df.price.str.replace(r\"(,| DH)\",\"\")\np=[]\n[p.append(float(i)) if i is not None else p.append(np.nan) for i in df['price']]\ndf.price=p","993ad0f4":"df.head(3)","a81a6105":"#box plot de Boite \u00e0 vitesse et price\nvar = 'Boite \u00e0 vitesse'\ndata = pd.concat([df['price'], df[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=800000);","5e97e4fe":"df['Boite \u00e0 vitesse'].unique()","98d117a5":"df['Boite \u00e0 vitesse']=df['Boite \u00e0 vitesse'].replace('--',np.nan)","41a57236":"df['Boite \u00e0 vitesse'].unique()","3dd0e909":"df['Ann\u00e9e-Mod\u00e8le'].unique()","9a87ddb5":"df['Ann\u00e9e-Mod\u00e8le']=df['Ann\u00e9e-Mod\u00e8le'].replace('1980 ou plus ancien','1980')\np=[]\n[p.append(float(i)) if i is not None else p.append(np.nan) for i in df['Ann\u00e9e-Mod\u00e8le']]\ndf['Ann\u00e9e-Mod\u00e8le']=p","c6e4b8aa":"df['Ann\u00e9e-Mod\u00e8le'].unique()","10aed7a0":"df.head(3)","26336952":"df[\"Puissance fiscale\"].unique()","dfdb196f":"df['Puissance fiscale']=df['Puissance fiscale'].replace('Plus de 41 CV','41').replace('--',np.nan)\np=[]\n[p.append(float(i.strip(' CV'))) if i is not np.nan else p.append(np.nan) for i in df['Puissance fiscale']]\ndf['Puissance fiscale']=p\ndf['Puissance fiscale'].unique()","ae932739":"df.head(3)","bd44d1c8":"df['Type de carburant'].unique()","18eb0f83":"df['Type de carburant']=df['Type de carburant'].replace('--',np.nan)","48887184":"df['Type de carburant'].unique()","a3589a04":"df.head(3)","1047c85c":"df['Kilom\u00e9trage'].unique()","472687ca":"df['Kilom\u00e9trage']=df['Kilom\u00e9trage'].replace('Plus de 500 000','500000').replace(' ','')\nprint(df['Kilom\u00e9trage'].isnull().sum())","9984ca6e":"df=df[df['Kilom\u00e9trage'].notnull()]\na=[]\n[a.append((float(i.replace(' ','').split('-')[0])+float(i.replace(' ','').split('-')[1]))\/\/2) if '-' in i else a.append(float(i)) for i in df['Kilom\u00e9trage']]\ndf['Kilom\u00e9trage']=a\ndf['Kilom\u00e9trage'].unique()","074d18b8":"df.head(3)","b0032f5c":"df.Type.unique()","52275bfd":"del(df['Type'])","88009550":"df['Type de carburant'].isnull().sum()","e98a47f1":"df=df[df['Type de carburant'].notnull()]","7ad45eed":"df['Puissance fiscale'].isnull().sum()","f02c2599":"#Imputation par les k plus proches voisins\nfrom sklearn.impute import KNNImputer\ndf['Puissance fiscale'] = KNNImputer(n_neighbors=3).fit_transform(df['Puissance fiscale'].values.reshape(-1, 1))","b1789b82":"df['Puissance fiscale'].isnull().sum()","94de22c9":"df['Boite \u00e0 vitesse'].isnull().sum()","c3ab2f53":"df[\"Boite \u00e0 vitesse\"] = df[\"Boite \u00e0 vitesse\"].map({'Automatique':1, 'Manuelle':0})","f192c6cd":"#df['price'].corr(df['Boite \u00e0 vitesse'])","321941e5":"df[\"Boite \u00e0 vitesse\"].value_counts() ","03210089":"df['Boite \u00e0 vitesse']=df['Boite \u00e0 vitesse'].replace(np.nan,0)","45b28d59":"df['Boite \u00e0 vitesse'].isnull().sum()","2d91afaf":"df['Origine'].isnull().sum()","efd38dde":"df['Origine'].value_counts()","ef40b157":"df['Origine']=df['Origine'].replace(np.nan,'WW au Maroc')","a5d4c6c1":"df['Nombre de portes'].isnull().sum()","60d369cd":"df['Nombre de portes'].value_counts()","ad33b876":"df['Nombre de portes']=df['Nombre de portes'].fillna(5)","0e3bdf66":"df['Nombre de portes'].value_counts()","fc58590b":"df.head(3)","aa72896b":"df.describe()","a1adf8eb":"sns.scatterplot(x='score',y='price',data=df)","2620ea01":"df['price'].corr(df['score'])","6f7535a9":"max_tresh=df['price'].quantile(0.99)\nmax_tresh","e6dbbccf":"min_tresh=df['price'].quantile(0.01)\nmin_tresh","c40201dc":"len(df)","3d822e9a":"dft=df[(df.price < max_tresh)]","27050a10":"sns.scatterplot(x='score',y='price',data=dft)","2cc358d3":"dft['price'].corr(dft['score'])","b0bb6894":"len(dft)","0555434f":"sns.distplot(df['price'])","6cf2035b":"sns.distplot(dft['price'])","d9626c90":"sns.scatterplot(x='Kilom\u00e9trage',y='price',data=dft)","1ac18df6":"sns.scatterplot(x='Ann\u00e9e-Mod\u00e8le',y='price',data=dft)","ea417bbb":"dft['Type de carburant'].unique()","e791d8b6":"df2 = pd.get_dummies(dft['Type de carburant'], prefix = 'carburant')\ndft = pd.concat([dft,df2], axis=1)\ndft.head(3)","0b73301a":"dft['carburant_LPG'].value_counts()","1b8efb70":"del(dft['carburant_LPG'])\ndel(dft['Type de carburant'])","049c04e5":"dft.head(3)","9a1e098f":"dft['Origine'].unique()","99410ec2":"df2 = pd.get_dummies(dft['Origine'], prefix = 'Orig')\ndft = pd.concat([dft,df2], axis=1)","9a66f3a5":"del(dft['Origine'])\ndel(dft['Orig_Pas encore d\u00e9douan\u00e9e'])","1934ff54":"dft.head(3)","41ce2147":"dft['Premi\u00e8re main'].loc[(dft['price'] >= 175000.0)].value_counts()","43a5c45e":"dft.isnull().sum()","6b5fb90f":"del(dft['equipement'])","81cd1bf2":"dfp=dft","ff6366e2":"del(dfp['Secteur'])","2b7a2214":"dfp['Premi\u00e8re main'].value_counts()","40836c69":"dfp['Premi\u00e8re main']=dfp['Premi\u00e8re main'].replace(\"Non\",0).replace(\"Oui\",1).replace(np.nan,0)","bab1cc6c":"dfp['Premi\u00e8re main'].isnull().sum()","f37e937b":"dfp['Premi\u00e8re main'].value_counts()","0bb4efb0":"dfp.corr()","8a715791":"\nmx=dfp['price'].max()\nmn=dfp['price'].min()\nsave_list = open(\".\/maxprice.pickle\",\"wb\")\npickle.dump(mx, save_list)\nsave_list.close()\n\n\nsave_list = open(\".\/minprice.pickle\",\"wb\")\npickle.dump(mn, save_list)\nsave_list.close()","ed59dd07":"dfr=dfp","a87037ff":"dfr['score']=dfr['score'].fillna(dfr['score'].mean())","8199139b":"dfr.info()","c0c1dc91":"df2 = pd.get_dummies(dfr['Mod\u00e8le'], prefix = 'mod')\ndfr = pd.concat([dfr,df2], axis=1)\ndfr.head()","392a107c":"df2 = pd.get_dummies(dfr['Marque'], prefix = 'marq')\ndfr = pd.concat([dfr,df2], axis=1)\ndfr.head()","bc533b52":"del(dfr['Mod\u00e8le'])\ndel(dfr['Marque'])","31c5c4ba":"maxscore=dfr['score'].max()\nminscore=dfr['score'].min()\n\nsave_list = open(\".\/maxscore.pickle\",\"wb\")\npickle.dump(maxscore, save_list)\nsave_list.close()\n\nsave_list = open(\".\/minscore.pickle\",\"wb\")\npickle.dump(minscore, save_list)\nsave_list.close()\n\nmaxkilometrage=dfr['Kilom\u00e9trage'].max()\nminkilometrage=dfr['Kilom\u00e9trage'].min()\n\nsave_list = open(\".\/maxkilometrage.pickle\",\"wb\")\npickle.dump(maxkilometrage, save_list)\nsave_list.close()\n\nsave_list = open(\".\/minkilometrage.pickle\",\"wb\")\npickle.dump(minkilometrage, save_list)\nsave_list.close()\n\nmaxpuissance=dfr['Puissance fiscale'].max()\nminpuissance=dfr['Puissance fiscale'].min()\n\nsave_list = open(\".\/maxpuissance.pickle\",\"wb\")\npickle.dump(maxpuissance, save_list)\nsave_list.close()\n\nsave_list = open(\".\/minpuissance.pickle\",\"wb\")\npickle.dump(minpuissance, save_list)\nsave_list.close()\n\nmaxannee=dfr['Ann\u00e9e-Mod\u00e8le'].max()\nminannee=dfr['Ann\u00e9e-Mod\u00e8le'].min()\n\nsave_list = open(\".\/maxannee.pickle\",\"wb\")\npickle.dump(maxannee, save_list)\nsave_list.close()\n\nsave_list = open(\".\/minannee.pickle\",\"wb\")\npickle.dump(minannee, save_list)\nsave_list.close()\n\nmaxnbr=dfr['Nombre de portes'].max()\nminnbr=dfr['Nombre de portes'].min()\n\nsave_list = open(\".\/maxnbr.pickle\",\"wb\")\npickle.dump(maxnbr, save_list)\nsave_list.close()\n\nsave_list = open(\".\/minnbr.pickle\",\"wb\")\npickle.dump(minnbr, save_list)\nsave_list.close()","11f4300f":"for i in dfr.columns[:]:\n    data = dfr[i].values.reshape(-1,1)\n    dfr[i]=(dfr[i]-dfr[i].min())\/(dfr[i].max()-dfr[i].min())\ndfr.head(3)","f40cb5ee":"pd.set_option('display.max_columns', None)","866c980b":"thelist=dfr.keys()","8f962115":"marquelist = [x for x in thelist if 'marq_' in x]","8378b73c":"save_list = open(\".\/marquelist.pickle\",\"wb\")\npickle.dump(marquelist, save_list)\nsave_list.close()","fe2e2bf4":"modellist = [x for x in thelist if 'mod_' in x]\n","f2702ac0":"carburant = [x for x in thelist if 'carburant_' in x]\ncarburant","fd08e63d":"save_list = open(\".\/carburant.pickle\",\"wb\")\npickle.dump(carburant, save_list)\nsave_list.close()","413cfbac":"origine = [x for x in thelist if 'Orig_' in x]\norigine","1bd8031f":"save_list = open(\".\/origine.pickle\",\"wb\")\npickle.dump(origine, save_list)\nsave_list.close()","0f07d5ae":"save_list = open(\".\/modellist.pickle\",\"wb\")\npickle.dump(modellist, save_list)\nsave_list.close()","4c3dad2f":"dfr.info()","9253880c":"X=dfr.drop(columns=['price'])\ny=dfr['price']","c9de1855":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=1)","f5d61765":"pca = PCA()\nr=make_scorer(r2_score)\n\nfs = SelectKBest(score_func=f_regression)\n# set the tolerance to a large value to make the example faster\nLinear = LinearRegression()\n\npipe = Pipeline(steps=[('fs',fs),('pca', pca), ('Linear', Linear)])\n\n# we ve used one value for every parameter to make the execution quick  \n# but we can try a larger range like \"list(range(100, 200))\" \nparam_grid = {\n    'fs__k':[159], \n    'pca__n_components': [157]\n    \n}\nsearch = GridSearchCV(pipe, param_grid,n_jobs=1,scoring=r,verbose=10)","06ef0196":"search.fit(X_train,y_train)","678cbdf6":"search.best_params_","b0730cbb":"search.score(X_train,y_train)","cf02cc9c":"search.score(X_test,y_test)","9cfa3758":"yhat = search.predict(X_test)","44fe2262":"mae = mean_absolute_error(y_test, yhat)\nprint('MAE: %.3f' % mae)","1c4f831d":"print(r2_score(y_test, yhat))","50667462":"\nsave_predicter = open(\".\/linear.pickle\",\"wb\")\npickle.dump(search, save_predicter)\nsave_predicter.close()","46f88e85":"\nopen_file = open(\".\/linear.pickle\", \"rb\")\nlinear = pickle.load(open_file)\nopen_file.close()","68448499":"def preprocess(lst):\n    del lst[0]\n    lst[0]=lst[0].replace(' ','').split('-')\n    lst[0]=(float(lst[0][0])+float(lst[0][1]))\/2\n    lst[1]=float(lst[1])\n    del lst[6]\n    \n    if lst[6]=='Non':\n        lst[6]=0\n    else:\n        lst[6]=1\n    lst[8]=float(lst[8].replace(' CV',''))\n    \n    if lst[9]=='Manuelle':\n        lst[9]=0\n    else:\n        lst[9]=1\n        \n    open_file = open(\".\/marquelist.pickle\", \"rb\")\n    marquelist = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/modellist.pickle\", \"rb\")\n    modellist = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/origine.pickle\", \"rb\")\n    origine = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/carburant.pickle\", \"rb\")\n    carburant = pickle.load(open_file)\n    open_file.close()\n    \n    for e in carburant:\n        if lst[7]==e.replace('carburant_',''):\n            lst.append(1)\n        else:\n            lst.append(0)\n            \n    del lst[7]\n    \n    for e in origine:\n        if lst[5]==e.replace('Orig_',''):\n            lst.append(1)\n        else:\n            lst.append(0)\n    del lst[5]\n    \n    for e in modellist:\n        if lst[3]==e.replace('mod_',''):\n            lst.append(1)\n        else:\n            lst.append(0)\n            \n    for e in marquelist:\n        if lst[2]==e.replace('marq_',''):\n            lst.append(1)\n        else:\n            lst.append(0)\n    del lst[2]\n    \n    del lst[2]\n    \n    open_file = open(\".\/maxscore.pickle\", \"rb\")\n    maxscore = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minscore.pickle\", \"rb\")\n    minscore = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/maxkilometrage.pickle\", \"rb\")\n    maxkilometrage = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minkilometrage.pickle\", \"rb\")\n    minkilometrage = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/maxpuissance.pickle\", \"rb\")\n    maxpuissance = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minpuissance.pickle\", \"rb\")\n    minpuissance = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/maxannee.pickle\", \"rb\")\n    maxannee = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minannee.pickle\", \"rb\")\n    minannee = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/maxnbr.pickle\", \"rb\")\n    maxnbr = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minnbr.pickle\", \"rb\")\n    minnbr = pickle.load(open_file)\n    open_file.close()\n    \n    lst[0]=(lst[0]-minkilometrage)\/(maxkilometrage-minkilometrage)\n    lst[1]=(lst[1]-minannee)\/(maxannee-minannee)\n    lst[2]=(lst[2]-minnbr)\/(maxnbr-minnbr)\n    lst[4]=(lst[4]-minpuissance)\/(maxpuissance-minpuissance)\n    lst[6]=(lst[6]-minscore)\/(maxscore-minscore)\n    \n    return lst","8e606bda":"def predict(lst):\n    open_file = open(\".\/maxprice.pickle\", \"rb\")\n    maxprice = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minprice.pickle\", \"rb\")\n    minprice = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/linear.pickle\", \"rb\")\n    logistic = pickle.load(open_file)\n    open_file.close()\n    \n    return linear.predict([preprocess(lst)])*(maxprice-minprice)+minprice ","d49bafb9":"open_file = open(\".\/maxprice.pickle\", \"rb\")\nmaxprice = pickle.load(open_file)\nopen_file.close()\n    \nopen_file = open(\".\/minprice.pickle\", \"rb\")\nminprice = pickle.load(open_file)\nopen_file.close()","dca92c08":"linear.predict(X[2:3].values)*(maxprice-minprice)+minprice","decb077e":"\npredict(['Voitures, Vente',\n '0 - 4 999',\n '2004',\n 'Citroen',\n 'Berlingo',\n 5.0,\n 'WW au Maroc',\n 'Sidi Othmane',\n 'Non',\n 'Diesel',\n '7 CV',\n 'Manuelle',\n 5.0])","2a05a10b":"\nrf=RandomForestRegressor()\npca = PCA()\nr=make_scorer(r2_score)\n\nfs = SelectKBest(score_func=f_regression)\n\npipe = Pipeline(steps=[('fs',fs),('pca', pca), ('rf', rf)])\n\n# we ve used one value for every parameter to make the execution quick  \n# but we can try a larger range like \"list(range(100, 200))\" \n\nparam_grid = {\n    'fs__k':[158],\n    'pca__n_components': [156]\n    \n}\nsearch2 = GridSearchCV(pipe, param_grid,n_jobs=1,scoring=r,verbose=10)","5e2f56af":"search2.fit(X_train,y_train)","bbd3d8a1":"search2.best_params_","6095a671":"search2.score(X_test,y_test)","0c208ec2":"\nsave_predicter = open(\".\/regressor.pickle\",\"wb\")\npickle.dump(search2, save_predicter)\nsave_predicter.close()","412350dd":"open_file = open(\".\/regressor.pickle\", \"rb\")\nregressor = pickle.load(open_file)\nopen_file.close()","4d2c26d9":"regressor.score(X_test,y_test)","4e79c8c6":"def predict_mean(lst):\n    open_file = open(\".\/maxprice.pickle\", \"rb\")\n    maxprice = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/minprice.pickle\", \"rb\")\n    minprice = pickle.load(open_file)\n    open_file.close()\n    \n    open_file = open(\".\/linear.pickle\", \"rb\")\n    logistic = pickle.load(open_file)\n    open_file.close()\n    lst=preprocess(lst)\n    \n    return ((linear.predict([lst])*(maxprice-minprice)+minprice)+(regressor.predict([lst])*(maxprice-minprice)+minprice))\/2","19606e9c":"predict_mean(['Voitures, Vente',\n '0 - 4 999',\n '2004',\n 'Citroen',\n 'Berlingo',\n 5.0,\n 'WW au Maroc',\n 'Sidi Othmane',\n 'Non',\n 'Diesel',\n '7 CV',\n 'Manuelle',\n 5.0])","59a8289e":"# definition of a set method (mean)","11404503":"## Processus","75eed7b8":"********************* ********************* ********************* ********************* ********************* *****************","0b6403d1":"The attributes Model, Brand..., Type have a low number of missing values, while we find high nbr in \nthe columns sector \/ score \/ first hand .","45672c42":"## Importing libraries","5090b4fa":"********************* ********************* ********************* ********************* ********************* *****************","eb2dfe70":"## data cleansing","d7a67370":"Predicting the price of cars based on their characteristics.\nthe processus will be :\n- Data cleaning\n- Data Analysis\n- Data Preprocessing \/ Feature Engineering\n- Training models ( Parameter tuning )\n- Evaluation \n- Building a function able to predict new instances ","6706c036":"#### Origine","3b3192b4":"********************* ********************* ********************* ********************* ********************* *****************","f9f3b08d":"********************* ********************* ********************* ********************* ********************* *****************","5fae136b":"#### Gearbox","8a368f3a":"********************* ********************* ********************* ********************* ********************* *****************","1a76f5a4":"# --------------------------------------------","c8b29148":"********************* ********************* ********************* ********************* ********************* *****************","8ef75cc9":"# -----------------------------------","86e85d84":"#### Type de carburant","d85b9bdc":"********************* ********************* ********************* ********************* ********************* *****************","8671a7fb":"********************* ********************* ********************* ********************* ********************* *****************","728abc34":"that was a quick example of a regression task using set methods ( combining two models \" Linear Regressor Model \" + \" Random Fores Regressor Model \" ), also tuning Feature Selector \/ PCA parameters using GridsearchCV , thank you for your attention and feel free to give any feedback ! ","1c4622db":"********************* ********************* ********************* ********************* ********************* *****************","b9ff5a93":"#### Boite \u00e0 vitesse","2f47544d":"### Removing Outliers \/ Exploring features correlation","653702b1":"********************* ********************* ********************* ********************* ********************* *****************","97f651b6":"#### Ann\u00e9e-Mod\u00e8le","21255470":"********************* ********************* ********************* ********************* ********************* *****************","4fc584f5":"#### price","cd174b00":"one of the most important steps in this programme is to save the parameters that we will be using after to preprocess the new instances , like saving the min and the max of every column , and also the one hot encoding vector of the categorical columns","8e0916e8":"The prices of manual cars are concentrated between 0DH and 200000DH, while automatic cars are  from 0DH to 450000DH with the availability of outliers","b7bb89c1":"# definition of a function that preprocess the instances to be predicted","8f7057dc":"#### Percentage of missing values by attribute","8f45a42e":"********************* ********************* ********************* ********************* ********************* *****************","d8b08745":"#### Puissance fiscale","c2a68461":"********************* ********************* ********************* ********************* ********************* *****************","1a9316a8":"## Correction of data anomalies","0a63b8f3":"#### Kilom\u00e9trage","5c768bf4":"********************* ********************* ********************* ********************* ********************* *****************","d8fe3d8e":"********************* ********************* ********************* ********************* ********************* *****************","22723c90":"More than 12000 cars have 5 doors, and almost 1000 cars have only 3 doors.","b12ef28c":"## Exploratory data analysis","6b4df5c6":"# Random Forest Regressor ","a5b63672":"********************* ********************* ********************* ********************* ********************* *****************","89ef1ea9":"# Linear Regression","7a7ede9c":"# definition of a function able to predict the instances (after preprocessing them with the previous function)","68651a91":"# -----------------------------------","a42f72c3":"********************* ********************* ********************* ********************* ********************* *****************","19c31134":"#### Replacing NaN by the most frequent Value (Categorical Features)","376094ad":"********************* ********************* ********************* ********************* ********************* *****************","18e71f4f":"#### Type","4bbf3e6c":"********************* ********************* ********************* ********************* ********************* *****************","badb0e31":"Different data units with missing values.","74180074":"# -----------------------------","33289643":"# -----------------------------","7ba9964b":"********************* ********************* ********************* ********************* ********************* *****************","3fb54f37":"********************* ********************* ********************* ********************* ********************* *****************","13f89ba1":"********************* ********************* ********************* ********************* ********************* *****************","a5b323f7":"## Importing the Dataset","7ab3fa98":"#### Type de carburant","08bfe4b5":"********************* ********************* ********************* ********************* ********************* *****************","e7804ac4":"## Construction of the dataset","34f95966":"# ---------------------------------","701fcab8":"********************* ********************* ********************* ********************* ********************* *****************","ff4cd701":"********************* ********************* ********************* ********************* ********************* *****************","3eec1a8c":"#### Number of cars according to the number of doors","ec8111f9":"#### Type de carburant","f50eb4f9":"## One Hot encoding","708273eb":"### Using KNN Imputer to replace missing values","0ef046b0":"the data was collected by scraping an ecommercial website \" avito.ma \" to gather the cars data (using Beautifulsoup library)","be379b8b":"#### Origine","af604f6a":"## Issue","b525a430":"********************* ********************* ********************* ********************* ********************* *****************","916060db":"Min Max Scaling","f89e371b":"********************* ********************* ********************* ********************* ********************* *****************","d7de346c":"********************* ********************* ********************* ********************* ********************* *****************","5f7ab469":"#### Puissance fiscale"}}