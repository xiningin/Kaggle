{"cell_type":{"82f603bd":"code","2f4e3b26":"code","a37c4499":"code","ae9d4a18":"code","8dd9d2ae":"code","78299bac":"code","b100a56d":"code","caa2b2c1":"code","cd445d1c":"code","506a1752":"code","999f9b22":"code","a9676750":"code","7b1bb2bf":"code","5a3129b5":"code","ec71fef9":"code","3c5a3685":"code","81d2630c":"code","56d1b890":"code","6dc9cd83":"code","b39fb724":"code","6875cb9a":"code","85f6be22":"code","0cfe73c9":"code","72af743b":"code","b2118b1f":"code","3e366bfc":"code","0ca881df":"code","2bbf8295":"code","477a3561":"code","a61b799d":"code","b256f62c":"code","f473d270":"code","a1b85fca":"code","6c102e5b":"code","3a4047e0":"code","d01d15af":"code","b2497380":"code","496db714":"code","9d94e582":"code","65ffb4a7":"code","138647e7":"code","9f8846e5":"markdown","11f25423":"markdown","355fb377":"markdown","8aa56788":"markdown","8e0a7d88":"markdown","ddfa2c40":"markdown","5244be13":"markdown","e7b2b5c5":"markdown","eba485a1":"markdown","7d4eaeb8":"markdown","dead1dda":"markdown","5aa63165":"markdown","f530c9b5":"markdown","53403ebf":"markdown","26cfefeb":"markdown"},"source":{"82f603bd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2f4e3b26":"train  = pd.read_csv(\"\/kaggle\/input\/av-jobathon-sep2021\/train.csv\")\ntest   = pd.read_csv(\"\/kaggle\/input\/av-jobathon-sep2021\/test.csv\")","a37c4499":"train.head()","ae9d4a18":"train.describe()","8dd9d2ae":"train.info()","78299bac":"train.nunique()","b100a56d":"test.head()","caa2b2c1":"test.describe()","cd445d1c":"test.info()","506a1752":"test.nunique()","999f9b22":"from datetime import datetime\n\ntrain['Date']    = train['Date'].astype('str')\ntrain['Date']    = [datetime.strptime(x, '%Y-%m-%d') for x in train['Date']]\ntrain['weekday'] = train['Date'].dt.dayofweek\ntrain['date']    = [x.day for x in train['Date']]\ntrain['month']   = train['Date'].dt.month\ntrain['weeknum'] = train['Date'].dt.isocalendar().week\ntrain.head()","a9676750":"test['Date']    = test['Date'].astype('str')\ntest['Date']    = [datetime.strptime(x, '%Y-%m-%d') for x in test['Date']]\ntest['weekday'] = test['Date'].dt.dayofweek\ntest['date']    = [x.day for x in test['Date']]\ntest['month']   = test['Date'].dt.month\ntest['weeknum'] = test['Date'].dt.isocalendar().week\n\ntest.head()","7b1bb2bf":"!pip install autoviz","5a3129b5":"!pip install xlrd","ec71fef9":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\ndf = AV.AutoViz(\"\/kaggle\/input\/av-jobathon-sep2021\/train.csv\")","3c5a3685":"!pip install pycaret","81d2630c":"pip install tune-sklearn ray[tune]","56d1b890":"from pycaret.regression import *","6dc9cd83":"exp = setup(data = train, target = 'Sales', ignore_features=['ID', '#Order'],session_id = 18,silent=True,\n            #feature_selection = True,\n           numeric_features=['Holiday','date','weekday','month','weeknum'], normalize=True)","b39fb724":"compare_models()\n#compare_models(exclude=['ransac','knn','br','lar','llar','huber','par','et','dt','omp','en','ada','gbr','lr','lasso','ridge'])\n#compare_models(include=['lightgbm','xgboost','catboost','rf'])","6875cb9a":"catboost = create_model('catboost')","85f6be22":"prediction = predict_model(catboost, test)\nprediction.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction[['ID', 'Sales']]\nsubmit.to_csv(\"catboost_date_wekdy_weknum_month.csv\",index=False)\n## feature importance\nplot_model(catboost, plot='feature')","0cfe73c9":"plot_model(catboost, plot='residuals')","72af743b":"plot_model(catboost, plot='learning')","b2118b1f":"xgboost = create_model('xgboost')","3e366bfc":"prediction1 = predict_model(xgboost, test)\nprediction1.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction1[['ID', 'Sales']]\nsubmit.to_csv(\"xgboost_date_wekdy_weknum_month.csv\",index=False)\n## feature importance\nplot_model(xgboost, plot='feature')","0ca881df":"plot_model(xgboost, plot='residuals')","2bbf8295":"plot_model(xgboost, plot='learning')","477a3561":"lightgbm = create_model('lightgbm')","a61b799d":"prediction2 = predict_model(lightgbm, test)\nprediction2.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction2[['ID', 'Sales']]\nsubmit.to_csv(\"lightgbm_date_wekdy_weknum_month.csv\",index=False)\n## feature importance\nplot_model(lightgbm, plot='feature')","b256f62c":"plot_model(lightgbm, plot='residuals')","f473d270":"plot_model(lightgbm, plot='learning')","a1b85fca":"prediction3 = pd.merge(pd.merge(prediction[['ID','Sales']],prediction1[['ID','Sales']],on='ID', how='left'),prediction2[['ID','Sales']],on='ID', how='left')\nprediction3.rename(columns={'Sales':'Sales_z'},inplace=True)\n\nprediction3['Sales'] = prediction3[['Sales_x', 'Sales_y', 'Sales_z']].mean(axis=1)\n\nprediction3 = prediction3[['ID', 'Sales']]\n\nprediction3.to_csv(\"xgboost_Catboost_lightgbm_avg_Final.csv\",index=False)\n\nprediction3.head()","6c102e5b":"prediction4 = pd.merge(prediction[['ID','Sales']],prediction1[['ID','Sales']],on='ID', how='left')\nprediction4['Sales'] = prediction4[['Sales_x', 'Sales_y']].mean(axis=1)\nprediction4 = prediction4[['ID', 'Sales']]\nprediction4.to_csv(\"xgboost_Catboost_avg_Final.csv\",index=False)\n\nprediction4.head()","3a4047e0":"'''xgboost1 = create_model(\"xgboost\")\ntune_model(xgboost1, search_library = \"scikit-learn\", optimize=\"RMSLE\", n_iter=20)\n\nprediction1 = predict_model(xgboost1, test)\nprediction1.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction1[['ID', 'Sales']]\nsubmit.to_csv(\"xgboost_sklearn1.csv\",index=False)\n'''","d01d15af":"'''\nxgboost2 = create_model(\"xgboost\")\ntune_model(xgboost2, search_library = \"tune-sklearn\", search_algorithm=\"hyperopt\", n_iter=5)\n\nprediction2 = predict_model(xgboost2, test)\nprediction2.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction2[['ID', 'Sales']]\nsubmit.to_csv(\"xgboost_sklearn_hyperpot.csv\",index=False)\n'''","b2497380":"'''\nxgboost3 = create_model(\"xgboost\")\ntune_model(xgboost3, search_library = \"tune-sklearn\", search_algorithm=\"optuna\", optimize=\"RMSLE\", n_iter=5)\n\nprediction3 = predict_model(xgboost3, test)\nprediction3.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction3[['ID', 'Sales']]\nsubmit.to_csv(\"xgboost_sklearn_optuna.csv\",index=False)\n'''","496db714":"'''\ncatboost1 = create_model(\"catboost\")\ntune_model(catboost1, search_library = \"scikit-learn\", optimize=\"RMSLE\", n_iter=20)\n\nprediction1 = predict_model(catboost1, test)\nprediction1.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction1[['ID', 'Sales']]\nsubmit.to_csv(\"catboost_sklearn1.csv\",index=False)\n'''","9d94e582":"'''\ncatboost2 = create_model(\"catboost\")\ntune_model(catboost2, search_library = \"tune-sklearn\", search_algorithm=\"hyperopt\", n_iter=20)\n\nprediction2 = predict_model(catboost2, test)\nprediction2.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction2[['ID', 'Sales']]\nsubmit.to_csv(\"catboost_sklearn_hyperpot.csv\",index=False)\n'''","65ffb4a7":"'''catboost3 = create_model(\"catboost\")\ntune_model(catboost3, search_library = \"tune-sklearn\", search_algorithm=\"optuna\", optimize=\"RMSLE\", n_iter=20)\n\nprediction3 = predict_model(catboost3, test)\nprediction3.rename(columns={'Label':'Sales'},inplace=True)\nsubmit = prediction3[['ID', 'Sales']]\nsubmit.to_csv(\"catboost_sklearn_optuna.csv\",index=False)\n'''","138647e7":"#catboost = create_model(\"catboost\")\n#tune_model(catboost, search_library = \"scikit-learn\", optimize=\"RMSLE\", n_iter=20)\n#tune_model(catboost, search_library = \"tune-sklearn\", search_algorithm=\"hyperopt\", n_iter=20)\n#tune_model(catboost, search_library = \"tune-sklearn\", search_algorithm=\"optuna\", optimize=\"RMSLE\", n_iter=20)","9f8846e5":"# Execute and Compare all the Models","11f25423":"# LIGHTGBM","355fb377":"# tune-sklearn-hyperopt","8aa56788":"# **AutoViz Visualization**","8e0a7d88":"# scikit-learn-optimize","ddfa2c40":"# scikit-learn-optimize","5244be13":"# HyperParameter Tuning","e7b2b5c5":"# XGBoost","eba485a1":"# tune-sklearn-optuna","7d4eaeb8":"# PyCaret Setup","dead1dda":"# Importing the libraries and the datasets","5aa63165":"# Feature Extraction","f530c9b5":"# tune-sklearn-hyperopt","53403ebf":"# tune-sklearn-optuna","26cfefeb":"# CatBoost"}}