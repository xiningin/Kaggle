{"cell_type":{"e868aa60":"code","c23db899":"code","0b86461c":"code","f6831a95":"code","35be4f55":"code","85ac9138":"code","ce2561ed":"code","2f8814bb":"code","34609478":"code","baf57ccf":"code","38935bc4":"code","0ca8f3a5":"code","e82d8fab":"code","d42d9f6c":"code","8cacea05":"code","d7ca04aa":"code","c84d40d7":"code","17c05676":"code","0f8f32b4":"code","03d1d0de":"code","eb4b2b19":"code","62c23c84":"code","c490f3d8":"code","eb9cdd74":"code","e9ced90a":"code","9ad6b6ca":"code","496e41f9":"code","46bce5bf":"code","a3bd4275":"code","b1151b14":"code","bf857854":"code","b653d3f7":"code","9229651b":"code","8aa89b4e":"code","cdabce01":"code","98b27517":"code","929c96c4":"code","1e7dace1":"code","dcb12a74":"code","2d608bc8":"code","cebcb5f9":"code","6df50a06":"code","aa1d3e1f":"code","c5ec8fea":"code","362f80eb":"code","3374e28c":"code","4849e2a6":"code","bf6c1d53":"code","72c915f9":"code","628d9feb":"code","c9c4e3e0":"code","886fb550":"code","1a54a94b":"code","cf7aea7f":"code","04f78fc9":"markdown","a4148aac":"markdown","17343234":"markdown"},"source":{"e868aa60":"import pandas as pd\nfrom pandas import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","c23db899":"df = pd.read_csv('..\/input\/rossmann-store-sales\/train.csv', parse_dates = ['Date'], low_memory = False)\ndf.head()","0b86461c":"df['Date']=pd.to_datetime(df['Date'],format='%Y-%m-%d')","f6831a95":"df['Hour'] = df['Date'].dt.hour\ndf['Day_of_Month'] = df['Date'].dt.day\ndf['Day_of_Week'] = df['Date'].dt.dayofweek\ndf['Month'] = df['Date'].dt.month","35be4f55":"print(df['Date'].min())\nprint(df['Date'].max())","85ac9138":"test = pd.read_csv('..\/input\/rossmann-store-sales\/test.csv', parse_dates = True, low_memory = False)\ntest.head()","ce2561ed":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')","2f8814bb":"test['Hour'] = test['Date'].dt.hour\ntest['Day_of_Month'] = test['Date'].dt.day\ntest['Day_of_Week'] = test['Date'].dt.dayofweek\ntest['Month'] = test['Date'].dt.month","34609478":"print(test['Date'].min())\nprint(test['Date'].max())","baf57ccf":"sns.pointplot(x='Month', y='Sales', data=df)","38935bc4":"sns.pointplot(x='Day_of_Week', y='Sales', data=df)","0ca8f3a5":"sns.countplot(x = 'Day_of_Week', hue = 'Open', data = df)\nplt.title('Store Daily Open Countplot')","e82d8fab":"sns.pointplot(x='Day_of_Month', y='Sales', data=df)","d42d9f6c":"df['SalesPerCustomer'] = df['Sales']\/df['Customers']\ndf['SalesPerCustomer'].describe()","8cacea05":"df.Open.value_counts()","d7ca04aa":"np.sum([df['Sales'] == 0])","c84d40d7":"#drop closed stores and stores with zero sales\ndf = df[(df[\"Open\"] != 0) & (df['Sales'] != 0)]","17c05676":"store = pd.read_csv('..\/input\/rossmann-store-sales\/store.csv')\nstore.head(30)","0f8f32b4":"store.isnull().sum()","03d1d0de":"store['CompetitionDistance'] = store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth'] = store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0]) #try 0\nstore['CompetitionOpenSinceYear'] = store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0]) #try 0\nstore['Promo2SinceWeek'] = store['Promo2SinceWeek'].fillna(0) #try 0\nstore['Promo2SinceYear'] = store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0]) #try 0\nstore['PromoInterval'] = store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) #try 0\nstore.head()","eb4b2b19":"df_store = pd.merge(df, store, how = 'left', on = 'Store')\ndf_store.head()","62c23c84":"df_store.groupby('StoreType')['Sales'].describe()","c490f3d8":"df_store.groupby('StoreType')['Customers', 'Sales'].sum()","eb9cdd74":"#sales trends\nsns.catplot(data = df_store, x = 'Month', y = \"Sales\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = 'c') ","e9ced90a":"#customer trends\nsns.catplot(data = df_store, x = 'Month', y = \"Customers\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = 'c')","9ad6b6ca":"#sales per customer\nsns.catplot(data = df_store, x = 'Month', y = \"SalesPerCustomer\", \n               col = 'StoreType', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'Promo', # per promo in the store in rows\n               color = 'c')","496e41f9":"sns.catplot(data = df_store, x = 'Month', y = \"Sales\", \n               col = 'DayOfWeek', # per store type in cols\n               palette = 'plasma',\n               hue = 'StoreType',\n               row = 'StoreType', # per store type in rows\n               color = 'c') ","46bce5bf":"#stores open on sunday\ndf_store[(df_store.Open == 1) & (df_store.DayOfWeek == 7)]['Store'].unique()","a3bd4275":"sns.catplot(data = df_store, x = 'DayOfWeek', y = \"Sales\", \n               col = 'Promo', \n               row = 'Promo2',\n               hue = 'Promo2',\n               palette = 'RdPu') ","b1151b14":"df_store['StateHoliday'] = df_store['StateHoliday'].map({'0':0 , 0:0 , 'a':1 , 'b':2 , 'c':3})\ndf_store['StateHoliday'] = df_store['StateHoliday'].astype(int)","bf857854":"df_store['StoreType'] = df_store['StoreType'].map({'a':1 , 'b':2 , 'c':3 , 'd':4})\ndf_store['StoreType'] = df_store['StoreType'].astype(int)","b653d3f7":"df_store.isnull().sum()","9229651b":"df_store['Assortment'] = df_store['Assortment'].map({'a':1 , 'b':2 , 'c':3})\ndf_store['Assortment'] = df_store['Assortment'].astype(int)","8aa89b4e":"df_store['PromoInterval'] = df_store['PromoInterval'].map({'Jan,Apr,Jul,Oct':1 , 'Feb,May,Aug,Nov':2 , 'Mar,Jun,Sept,Dec':3})\ndf_store['PromoInterval'] = df_store['PromoInterval'].astype(int)","cdabce01":"df_store.to_csv('df_merged.csv', index=False)","98b27517":"df_store.isnull().sum()","929c96c4":"len(df_store)","1e7dace1":"test = pd.merge(test, store, how = 'left', on = 'Store')\ntest.head()","dcb12a74":"test.isnull().sum()","2d608bc8":"test.fillna(method='ffill', inplace=True)","cebcb5f9":"test['StateHoliday'] = test['StateHoliday'].map({'0':0 , 0:0 , 'a':1 , 'b':2 , 'c':3})\ntest['StateHoliday'] = test['StateHoliday'].astype(int)\ntest['StoreType'] = test['StoreType'].map({'a':1 , 'b':2 , 'c':3 , 'd':4})\ntest['StoreType'] = test['StoreType'].astype(int)\ntest['Assortment'] = test['Assortment'].map({'a':1 , 'b':2 , 'c':3})\ntest['Assortment'] = test['Assortment'].astype(int)\ntest['PromoInterval'] = test['PromoInterval'].map({'Jan,Apr,Jul,Oct':1 , 'Feb,May,Aug,Nov':2 , 'Mar,Jun,Sept,Dec':3})\ntest['PromoInterval'] = test['PromoInterval'].astype(int)","6df50a06":"test.to_csv('test_merged.csv', index=False)","aa1d3e1f":"test = test.drop(['Id','Date'],axis=1)","c5ec8fea":"test.head()","362f80eb":"X = df_store.drop(['Date','Sales','Customers', 'SalesPerCustomer'],1)\n#Transform Target Variable\ny = np.log1p(df_store['Sales'])\n\nfrom sklearn.model_selection import train_test_split\nX_train , X_val , y_train , y_val = train_test_split(X, y , test_size=0.30 , random_state = 1 )","3374e28c":"X_train.shape, X_val.shape, y_train.shape, y_val.shape","4849e2a6":"from sklearn.ensemble import GradientBoostingRegressor\ngbrt = GradientBoostingRegressor(max_depth=10, n_estimators=200, random_state=42)\ngbrt.fit(X_train, y_train)\nprint(gbrt.score(X_train, y_train))","bf6c1d53":"y_pred = gbrt.predict(X_val)","72c915f9":"from sklearn.metrics import r2_score, mean_squared_error\nprint(r2_score(y_val , y_pred))\nprint(np.sqrt(mean_squared_error(y_val , y_pred)))","628d9feb":"df1 = pd.DataFrame({'Actual': y_val, 'Predicted': y_pred})\ndf1.head(25)","c9c4e3e0":"test_pred=gbrt.predict(test[X.columns])\ntest_pred_inv=np.exp(test_pred)-1","886fb550":"test_pred_inv","1a54a94b":"#make submission df\nprediction = pd.DataFrame(test_pred_inv)\nsubmission = pd.read_csv('..\/input\/rossmann-store-sales\/sample_submission.csv')\nprediction_df = pd.concat([submission['Id'], prediction], axis=1)\nprediction_df.columns=['Id','Sales']\nprediction_df.to_csv('Sample_Submission.csv', index=False)","cf7aea7f":"prediction_df.head()","04f78fc9":"Make Prediction CSV File","a4148aac":"Machine Learning","17343234":"Machine Learning"}}