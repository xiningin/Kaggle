{"cell_type":{"6a2190b1":"code","c38fb7c7":"code","35b91b4e":"code","90f4ac55":"code","5c7c1c93":"code","f1bd1641":"code","a3e2c5b3":"code","23ec209b":"code","25b9a229":"code","eec341ca":"code","c232ee60":"code","80e78c72":"code","f7709005":"code","c93d8e02":"code","af05a065":"code","aa226022":"code","8f4e8bb7":"code","1d9f3a90":"code","aa6cf120":"code","4a893163":"code","1f54df04":"code","8f3adbe5":"code","23ec0caa":"code","f1a44666":"code","a6c6babc":"code","4e044b95":"code","32e4ade5":"code","4f2f441d":"code","bdeecfae":"code","a59f72d7":"markdown","88e20ee0":"markdown","9c258ac2":"markdown","188019bc":"markdown","05e4ed40":"markdown","82d66ac0":"markdown","d1d55bdb":"markdown","1ed5f453":"markdown","0dca8805":"markdown","75827a80":"markdown","ef28c8f8":"markdown","813c9e7b":"markdown","4169853b":"markdown"},"source":{"6a2190b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c38fb7c7":"print()\ndn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/FACS\/'\nll = os.listdir(dn)\nll2 = [t.split('-')[0] for t in ll ]\nll2 = filter(lambda x: '.csv' not in x, ll2, )\ns = set(ll2)\nprint('Data obtained by Smart-seq2 technology :')\nprint('Tissue types:', s)\nprint('Count tissue types:', len(s) )\ns2 = s.copy()\n\ndn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/'\nll = os.listdir(dn)\n\nprint()\nprint('Annotation data:')\nll2 = list( filter(lambda x: ('.csv' in x ) and ('FACS\/' not in x), ll ) )\nprint(ll2)","35b91b4e":"fn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/FACS\/Spleen-counts.csv'\ndf = pd.read_csv(fn, index_col = 0)\ndf","90f4ac55":"dn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/'\n\ndf = pd.read_csv(dn + 'annotations_facs.csv')\ndf_annotations = df.copy()\ndf","5c7c1c93":"df['cell_ontology_class'].nunique()","f1bd1641":"display( df['cell_ontology_class'].value_counts().to_frame().head(60) )","a3e2c5b3":"dn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/'\n\ndf = pd.read_csv(dn + 'metadata_FACS.csv')\ndf","23ec209b":"display( df['tissue'].value_counts().to_frame() )\nprint()\ndisplay( df['subtissue'].value_counts().to_frame() )\nprint()\nprint( \"df['mouse.id'].nunique() = \", df['mouse.id'].nunique() )\ndisplay( df['mouse.id'].value_counts().to_frame() )","25b9a229":"!pip install scanpy\nimport scanpy as sc\nimport anndata\n\nimport scipy \n\n\nimport time\nt0start = time.time()\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport sys\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nmpl.rcParams['figure.dpi'] = 70\n# plt.style.use('dark_background')\n\nimport seaborn as sns\n\nfrom sklearn.decomposition import PCA","eec341ca":"dn = '\/kaggle\/input\/scrnaseq-tabula-muris-mouse-85-000-cells\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/FACS\/'\nll = os.listdir(dn)\nprint(ll)\n","c232ee60":"fn = 'Fat-counts.csv'# 'Brain_Myeloid-counts.csv'# 'Marrow-counts.csv' # 'Thymus-counts.csv'\n\ndf = pd.read_csv(dn + fn , index_col = 0)\ndf=df.T\ndf","80e78c72":"adata = sc.AnnData(df)\ndisplay(adata.var.head(2) )\ndisplay(adata.obs.head(2) )\n\nadata","f7709005":"sc.pp.filter_cells(adata, min_genes=200) # some filtering also creates n_genes columns for obs \n\n# First we delete those cells from adata which are not present in \nm = adata.obs.index.isin(df_annotations['cell'] )\nadata = adata[m]\n\n\n# Merge data: \nobs_new = pd.merge(adata.obs,df_annotations, how = 'inner', left_index=True, right_on = 'cell' )\nobs_new.set_index('cell',inplace = True )\nobs_new\n\n# let us put column \"tissue\" on the first place, in a bit tricky way: \nadata.obs = adata.obs.join(obs_new['tissue'] )\nadata.obs['Cell type'] = obs_new['cell_ontology_class'] # 'Cell type' is more common name \nadata.obs = adata.obs.join(obs_new.drop(columns = ['n_genes', 'tissue']))\n","c93d8e02":"print('Look at count matrix. We see integers - that confirms - data are raw-counts, not preprocessed expressions')\nadata.X.sum(), type(adata.X), np.asarray(adata.X.sum(axis = 1)).ravel()[:10]\n","af05a065":"sc.pl.highest_expr_genes(adata, n_top=20, )\n\nsc.pp.calculate_qc_metrics(adata,  percent_top=None, log1p=False, inplace=True)\n    # Calculates statistics on both cells and genes:\n    # for cells: 'n_genes_by_counts', 'total_counts'\n    # for genes: 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts'\n    # If parameter: inplace = True, then these statistics will be added to adata\n\nprint(adata)\n\nsc.pl.violin(adata, ['n_genes_by_counts', 'total_counts'], jitter=0.4, multi_panel=True)\nsc.pl.scatter(adata, x='total_counts', y='n_genes_by_counts')\n\ndisplay(adata.obs.describe() ) # cellwise statistics   \n\ndisplay(adata.var.describe()) # genewise statistics","aa226022":"adata.var['ERCC'] = adata.var_names.str.startswith('ERCC-')\nqc = sc.pp.calculate_qc_metrics(adata, qc_vars = ['ERCC'])# ,percent_top=None, log1p=False, inplace=True)# this returns a tuple of (cell_qc_dataframe, gene_qc_dataframe)\n                                 # ask for the percentage of reads from spike ins\n                                \ncell_qc_dataframe = qc[0]\ngene_qc_dataframe = qc[1]\n\nprint('This is the cell quality control dataframe:')\ndisplay(cell_qc_dataframe.head(2))\n\nprint('\\n\\n\\n\\nThis is the gene quality control dataframe:')\ndisplay(gene_qc_dataframe.head(2))","8f4e8bb7":"sc.pp.calculate_qc_metrics(adata, qc_vars = ['ERCC'] ,percent_top=None, log1p=False, inplace=True)# this returns a tuple of (cell_qc_dataframe, gene_qc_dataframe)\n\nsc.pl.violin(adata, ['pct_counts_ERCC','n_genes_by_counts', 'total_counts'], jitter=0.4, multi_panel=True)\n","1d9f3a90":"plt.hist(cell_qc_dataframe['total_counts'], bins=300)\nplt.xlabel('Total counts')\nplt.ylabel('N cells')\n#plt.axvline(50000, color='red')\n# plt.xlim(0,1e6) # Try plotting with and without scaling the x-axis. When is this helpful?","aa6cf120":"plt.hist(cell_qc_dataframe['n_genes_by_counts'], bins=100)\nplt.xlabel('N genes')\nplt.ylabel('N cells')\nplt.axvline(1000, color='red')","4a893163":"low_ERCC_mask = (cell_qc_dataframe['pct_counts_ERCC'] < 10)\nadata = adata[low_ERCC_mask]\nadata","1f54df04":"adata = adata[adata.obs.n_genes_by_counts < 3000, :]\nadata","8f3adbe5":"print('Started with: \\n', adata)\nsc.pp.filter_genes(adata, min_cells = 2)\nsc.pp.filter_genes(adata, min_counts = 10)\nprint('Finished with: \\n', adata)","23ec0caa":"sc.pp.normalize_total(adata, target_sum=1e4)\nsc.pp.log1p(adata)    \n\nif 0: # That is quite slow and probably not so useful\n    # sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt'])\n    sc.pp.regress_out(adata, ['total_counts'])\n\nsc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\nsc.pl.highly_variable_genes(adata)\nadata = adata[:, adata.var.highly_variable]\n\nsc.pp.scale(adata, max_value=10)","f1a44666":"# PCA\nsc.tl.pca(adata, svd_solver='arpack')\nsc.pl.pca(adata, color=['n_genes_by_counts', 'total_counts'])\nsc.pl.pca_variance_ratio(adata, log=True)","a6c6babc":"sc.pl.pca(adata, color=['Cell type'])\n","4e044b95":"# UMAP\nsc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\nsc.tl.umap(adata)\nsc.pl.umap(adata, color=['n_genes_by_counts', 'total_counts'])","32e4ade5":"sc.pl.umap(adata, color=['Cell type'])","4f2f441d":"!pip install leidenalg\nsc.tl.leiden(adata)\nsc.pl.umap(adata, color=['leiden'])\nsc.tl.rank_genes_groups(adata, 'leiden', method='t-test')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)\npd.DataFrame(adata.uns['rank_genes_groups']['names']).head(10)","bdeecfae":"print('%.1f seconds passed total'%( -t0start + time.time()))","a59f72d7":"# Import install modules","88e20ee0":"# Look on metadata_FACS.csv","9c258ac2":"# First load and look on a data file\n\nWe see:\n\ngenes - in columns\n\ncells - in rows \n\n(opposite to anndata typical order, but typical to csv storage)\n","188019bc":"# Load data and create adata object\n","05e4ed40":"# Filtering","82d66ac0":"# Visualizations","d1d55bdb":"# Look on data ","1ed5f453":"# Look on annotations_facs.csv","0dca8805":"# Clustering ","75827a80":"# Normalization ","ef28c8f8":"# Look on files - part related to smart-seq2 technology","813c9e7b":"# Merge with annotations ","4169853b":"# What is about ?\n\nBrief look on \"Tabula muris\" - single cell RNA seq data for mouse. The notebook looks on smart-seq2 part of the data.\n(The previous notebook - same for  drop-seq (10x Genomics) part of the data). \n\n\n**Context:**\nhttps:\/\/www.czbiohub.org\/tabula-muris\/\n\nPaper in \"Nature\": https:\/\/www.nature.com\/articles\/s41586-018-0590-4 (03 October 2018).\n\nThe data contains two parts differing by technology: drop-seq (10x Genomics technology) and smart-seq2. Data in subdirectory: \"\/Single-cell RNA-seq data from microfluidic emulsion (v2)\/\" - drop-seq 10x, in subdirectory: \"\/Single-cell RNA-seq data from Smart-seq2 sequencing of FACS sorted cells (v2)\/\" - smart-seq2.\n\n**The present notebook:**\nThe present notebook mostly looks on smart-seq2 data.\nThere are 20 tissues, 8 mices processed by that technology in that project.\n\n\n\n\n**Versions:**\n\n4 same, but consider tissue file: 'Fat-counts.csv' \n\n3 Same as 2, but consider 'Brain_Myeloid' dataset - only two subtypes from authors - marcophages and micro glia\n\n2 Added: merge with annotation data, and so added color pca\/umap by cell types\n\n\n1 We take one of the datasets: 'Marrow' and apply a scanpy pipeline  (https:\/\/scanpy-tutorials.readthedocs.io\/en\/latest\/pbmc3k.html). Some modifications are required, since: the data does not contain mitochondrial (MT) genes, but ERCC can be used for quality control. (See e.g. https:\/\/chanzuckerberg.github.io\/scRNA-python-workshop\/preprocessing\/01-basic-qc.html ), there are also some other minor changes. \n\n\n\n\n**\"Task:\"** it would be nice to reproduce clusters found by the authors."}}