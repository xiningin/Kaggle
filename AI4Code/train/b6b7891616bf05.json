{"cell_type":{"f4c3fc4e":"code","d5d27769":"code","04c92fe7":"code","1658ee12":"code","5e253978":"code","fb00df5f":"code","8965940b":"code","4d8e5992":"code","5ebf97b5":"code","b4f415a4":"code","15323931":"code","c068254f":"code","5227bcaf":"code","d786a069":"code","2fcdb388":"code","16f3df74":"code","379e0245":"code","b10cede8":"code","db119dd2":"code","b0145ad6":"code","5a105ffe":"code","7f902530":"code","d98a6e7f":"code","c2b82314":"code","7f0899c2":"code","3a5702b1":"code","1b26b0c2":"code","95d8418a":"code","dfa4e417":"code","73c27aa6":"code","a23b6234":"code","f2a0d72f":"code","fda7956a":"code","91ded608":"code","fef5cef3":"code","6be19b82":"code","709b4d38":"code","5bad4212":"code","4bf38814":"code","d5196f54":"markdown","a33507e7":"markdown","83923dc8":"markdown","e9abf2cc":"markdown","ed037381":"markdown","4a96a8bb":"markdown","c7d7b2b4":"markdown","cc91e1fe":"markdown"},"source":{"f4c3fc4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5d27769":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","04c92fe7":"sns.set_style('darkgrid')","1658ee12":"data = pd.read_csv('..\/input\/usa-housingcsv\/USA_Housing.csv')\ndata.head()","5e253978":"data.shape","fb00df5f":"data.info()","8965940b":"data.columns","4d8e5992":"data.isnull().sum()","5ebf97b5":"data.describe()","b4f415a4":"sns.pairplot(data)","15323931":"sns.distplot(data['Price'])","c068254f":"sns.displot(data['Avg. Area Number of Rooms'], kde=False, bins = 20)","5227bcaf":"sns.distplot(data['Avg. Area Number of Bedrooms'], kde=False, bins=40)","d786a069":"data['Avg. Area Number of Bedrooms'].value_counts()","2fcdb388":"sns.displot(data['Area Population'])","16f3df74":"sns.displot(data['Avg. Area Income'])","379e0245":"sns.scatterplot(x=data['Avg. Area House Age'], y=data['Price'])","b10cede8":"data['Avg. Area House Age'].value_counts()","db119dd2":"sns.scatterplot(x=data['Avg. Area Income'], y=data['Area Population'], hue=data['Price'])","b0145ad6":"plt.figure(figsize=(10, 8))\nsns.heatmap(data.corr(), annot=True, cmap=\"Blues\")","5a105ffe":"X = data.drop(['Price', 'Address'], axis=1)\ny = data['Price']","7f902530":"X.head()","d98a6e7f":"y.head()","c2b82314":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","7f0899c2":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\ndef cross_val(model):\n    pred = cross_val_score(model, X, y, cv=10)\n    return pred.mean()\n\ndef print_evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE', mae)\n    print('MSE', mse)\n    print('RMSE', rmse)\n    print('R2 square', r2_square)\n    print('------------------------------------------')\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","3a5702b1":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\npipeline = Pipeline([\n    ('std_scaler', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","1b26b0c2":"X_train","95d8418a":"X_test","dfa4e417":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression(normalize=True)\nmodel.fit(X_train, y_train)\n","73c27aa6":"print(model.intercept_)","a23b6234":"print(model.coef_)","f2a0d72f":"coeff_df = pd.DataFrame(model.coef_, X.columns, columns = ['Coefficient'])\ncoeff_df","fda7956a":"pred = model.predict(X_test)","91ded608":"sns.scatterplot(x=y_test, y=pred)\nplt.xlabel('True Values')\nplt.ylabel('Predicted Values')","fef5cef3":"sns.displot(data=(y_test - pred))","6be19b82":"test_pred = model.predict(X_test)\ntrain_pred = model.predict(X_train)","709b4d38":"print(\"Test Set Evaluation:\\n___________________\")\nprint_evaluate(y_test, test_pred)\n\nprint(\"Train Set Evaluation:\\n_____________________\")\nprint_evaluate(y_train, train_pred)","5bad4212":"results_df = pd.DataFrame(data=[['Linear regression', *evaluate(y_test, test_pred), cross_val(LinearRegression())]],\n                         columns = ['Model', 'MAE', 'MSE','RMSE', 'R2 Square', 'Cross Validation'])","4bf38814":"results_df","d5196f54":"### **Training a Linear Regression Model**","a33507e7":"### Train and Test Split","83923dc8":"### **Model Evaluation**","e9abf2cc":"### Regression Evaluation Metrics","ed037381":"### **Exploratory Data Analysis**(EDA)","4a96a8bb":"### **Linear Regression**","c7d7b2b4":"**Splitting the dataset into X and Y**","cc91e1fe":"### **Predictions from our Model**"}}