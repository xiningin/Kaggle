{"cell_type":{"316d5a2a":"code","408f71f5":"code","75a71e2b":"code","0ab6a8ed":"code","774f416d":"code","3fca929e":"code","9584534a":"code","2340f167":"code","12687cef":"code","030cf2bd":"code","ba0ee442":"code","bf2f7d1f":"code","41392e38":"code","439949d3":"code","9ed21a78":"code","9da939d4":"code","8c5fe19b":"code","adf620f2":"code","5c7e2e51":"code","809eb937":"code","af647ab9":"code","3bb730e7":"code","134cacaa":"code","7786b27f":"code","cfaaec0a":"code","28f6a21e":"code","ecf91e83":"code","ee94c408":"code","15e13ee7":"code","74fc240c":"code","27d49a86":"code","45956bd9":"code","56108d59":"code","35cbf223":"code","29854a0e":"code","6418bc52":"code","343fb925":"code","096a66ac":"markdown","1eb24a9d":"markdown","b61a863d":"markdown","8900217b":"markdown","bab2f3b5":"markdown","aecb4d14":"markdown","274e5f13":"markdown","5896bbc7":"markdown","950d7d14":"markdown","ffa53f61":"markdown","d44ff354":"markdown","d9938e10":"markdown","309af008":"markdown"},"source":{"316d5a2a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nimport statsmodels.api as sm\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","408f71f5":"train = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")\ntest = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\")","75a71e2b":"print(f\"train shape : {train.shape} , test shape : {test.shape} \")","0ab6a8ed":"train.info() ","774f416d":"train.head()","3fca929e":"train.describe()","9584534a":"train.isnull().sum()","2340f167":"corr = train.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax = plt.subplots(figsize=(10, 8))\n\ncmap = sns.color_palette(\"ch:s=-.2,r=.3\", as_cmap=True)\n\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.1, cbar_kws={\"shrink\": .3})","12687cef":"f, ax = plt.subplots(figsize=(25, 10))\nax.tick_params(labelsize=15)\nsns.scatterplot(data=train, x=\"city_development_index\", y=\"training_hours\", hue=\"education_level\", sizes=(50, 500), palette=\"Paired\")\nf.subplots_adjust(top=0.9)\nf.suptitle('SalePrice compared to YearBuilt, MSSubClass and TotalBsmtSF', fontsize=\"28\");\n","030cf2bd":"fig = plt.figure(figsize=(25,12))\n\ngs = fig.add_gridspec(2,3)\n\nax00 = fig.add_subplot(gs[0,0])\nax01 = fig.add_subplot(gs[0,1])\nax02 = fig.add_subplot(gs[0, 2])\nax10 = fig.add_subplot(gs[1,0])\nax11 = fig.add_subplot(gs[1,1])\nax12 = fig.add_subplot(gs[1,2])\n\n\nax00.set_title('gender', fontsize=20)\nax01.set_title('relevent_experience', fontsize=20)\nax02.set_title('enrolled_university', fontsize=20)\nax10.set_title('education_level', fontsize=20)\nax11.set_title('major_discipline', fontsize=20)\nax12.set_title('last_new_job', fontsize=20)\n\n\nax00.tick_params(labelsize=12)\nax01.tick_params(labelsize=12)\nax02.tick_params(labelsize=12)\nax10.tick_params(labelsize=12)\nax11.tick_params(labelsize=12)\nax12.tick_params(labelsize=12)\n\n\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax00, hue=\"gender\", palette=\"Set3\", multiple=\"stack\")\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax01, hue=\"relevent_experience\", palette=\"Set3\", multiple=\"stack\")\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax02, hue=\"enrolled_university\", palette=\"Set3\", multiple=\"stack\")\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax10, hue=\"education_level\", palette=\"Set3\", multiple=\"stack\")\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax11, hue=\"major_discipline\", palette=\"Set3\", multiple=\"stack\")\nsns.histplot(data = train,x=\"target\", kde=False, ax =ax12, hue=\"last_new_job\", palette=\"Set3\", multiple=\"stack\")\n\nfig.subplots_adjust(top=0.92)\nfig.suptitle('Features vs Target', fontsize=\"28\");","ba0ee442":"train['company_size'].value_counts()","bf2f7d1f":"print(f\"train shape : {train.shape} , test shape : {test.shape} \")\ntrain_len = len(train)\ntrain = pd.concat([train,test],axis = 0).reset_index(drop = True)\nprint(f\"concatenate shape : {train.shape}\")","41392e38":"def find_missing_value(data):\n    nulls = data.isnull().sum()\n\n    for index,item in nulls.items():\n        if item>0:\n            print(f\"Index : {index}, Value : {item}\")  ","439949d3":"find_missing_value(train)","9ed21a78":"x = train[\"company_size\"]\n\nax = sns.countplot(x=x, data=x)","9da939d4":"x = train[(train[\"last_new_job\"]==\">4\")][\"company_size\"]\n\nax = sns.countplot(x=x, data=x)\n","8c5fe19b":"index_nan_education_level = list(train[\"education_level\"][train[\"education_level\"].isnull()].index)\nfor i in index_nan_education_level:\n   \n    if (type(train[\"major_discipline\"].iloc[i])==\"str\") & (train[\"enrolled_university\"].iloc[i] == \"no_enrollment\") | (type(train[\"enrolled_university\"].iloc[i])==\"str\"):\n        train[\"education_level\"].iloc[i] = \"High School\"\n       \n    else :\n        train[\"education_level\"].iloc[i] = \"Graduate\"\n ","adf620f2":"index_nan_last_new_job = list(train[\"last_new_job\"][train[\"last_new_job\"].isnull()].index)\nfor i in index_nan_last_new_job:\n   \n    if (train[\"education_level\"].iloc[i] == \"Masters\") :\n        train[\"last_new_job\"].iloc[i] = \"1\"\n       \n    elif (train[\"education_level\"].iloc[i] == \"Graduate\") :\n        train[\"last_new_job\"].iloc[i] = \"1\"\n        \n    elif (train[\"education_level\"].iloc[i] == \"High School\") :\n        train[\"last_new_job\"].iloc[i] = \"never\"\n    \n    elif (train[\"education_level\"].iloc[i] == \"Phd\") :\n        train[\"last_new_job\"].iloc[i] = \">4\"\n        \n    else :\n        train[\"last_new_job\"].iloc[i] = \"never\"","5c7e2e51":"index_nan_major_discipline = list(train[\"major_discipline\"][train[\"major_discipline\"].isnull()].index)\nfor i in index_nan_major_discipline:\n   \n    if (train[\"education_level\"].iloc[i] == \"High School\") :\n        train[\"major_discipline\"].iloc[i] = \"N\"\n       \n    elif (train[\"education_level\"].iloc[i] == \"Primary School\") :\n        train[\"major_discipline\"].iloc[i] = \"N\"\n        \n    else :\n        train[\"major_discipline\"].iloc[i] = \"STEM\"","809eb937":"index_nan_enrolled_university = list(train[\"enrolled_university\"][train[\"enrolled_university\"].isnull()].index)\nfor i in index_nan_enrolled_university:\n   \n    if (train[\"education_level\"].iloc[i] == \"High School\") :\n        train[\"enrolled_university\"].iloc[i] = \"Full time course\"\n          \n    else :\n        train[\"enrolled_university\"].iloc[i] = \"no_enrollment\"","af647ab9":"index_nan_company_size = list(train[\"company_size\"][train[\"company_size\"].isnull()].index)\nfor i in index_nan_company_size:\n   \n    if (train[\"last_new_job\"].iloc[i] == \"1\" or \"never\") :\n        train[\"company_size\"].iloc[i] = \"5000-9999\"\n       \n    elif (train[\"last_new_job\"].iloc[i] == \"2\" or \"3\") :\n        train[\"company_size\"].iloc[i] = \"50-99\"\n    \n    elif (train[\"last_new_job\"].iloc[i] == \"4\") :\n        train[\"company_size\"].iloc[i] = \"100-500\"\n        \n    else :\n        train[\"company_size\"].iloc[i] = \"10000+\"\n","3bb730e7":"train[\"experience\"] = train[\"experience\"].fillna(\">20\")\ntrain[\"gender\"] = train[\"gender\"].fillna(\"Male\")","134cacaa":"train=train.drop(['company_type'], axis=1)\ntrain=train.drop(['city_development_index'], axis=1)\ntrain=train.drop(['enrollee_id'], axis=1)","7786b27f":"def get_cat_idx():\n    cat_column_index=[]\n    for i in range(len(train.columns)):\n        if(train.iloc[:,i].dtype==\"O\"):\n            cat_column_index.append(i)\n    return cat_column_index    ","cfaaec0a":"train_cat_idx = get_cat_idx() ","28f6a21e":"col_cat_name=[]\nfor i in train_cat_idx:\n    colname = train.columns[i]\n    col_cat_name.append(colname)","ecf91e83":"train","ee94c408":"for f in col_cat_name:\n    train = pd.get_dummies(train, columns= [f])","15e13ee7":"X_test = train[train_len:]\ntrain = train[:train_len]\n\nX_test.drop(labels = [\"target\"],axis = 1, inplace = True)","74fc240c":"print(f\"train shape : {train.shape} , test shape : {X_test.shape} \")","27d49a86":"X_train = train.drop(labels = \"target\", axis = 1)\n#y_train = train[\"target\"].astype(\"uint8\")\n#y_train=(np.array(y_train)).astype(\"str\")\ny_train = train[\"target\"].astype(\"category\")","45956bd9":"#X_train = X_train.to_numpy()\n#X_test = test.to_numpy()\n#y_train = (np.array(y_train)).astype(\"str\")","56108d59":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","35cbf223":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.05, 0.25, 1],\n                 \"C\": [5,50,150,350]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   knn_param_grid]","29854a0e":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 5), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","6418bc52":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","343fb925":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_val),y_val))","096a66ac":"<a id=\"21\"> <\/a>\n## Examine Data","1eb24a9d":"<a id=\"43\"> <\/a>\n## Dummy Encoding","b61a863d":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">INTRODUCTION <\/h1>\n<br>","8900217b":"<a id=\"34\"> <\/a>\n## Fill Missing Values","bab2f3b5":"<a id=\"4\"> <\/a>\n# Feature Engineering","aecb4d14":"<a id=\"51\"> <\/a>\n## Separating Test And Train Datas","274e5f13":"<a id=\"3\"> <\/a>\n# Preprocess Data","5896bbc7":"<a id=\"1\"> <\/a>\n# Add Libaries","950d7d14":"<a id=\"22\"> <\/a>\n## Visualize Data","ffa53f61":"<a id=\"32\"> <\/a>\n## Concatenating Train and Test Data","d44ff354":"* #### [Add Libaries](#1)\n* #### [Load and Examine Data](#2)\n    * ##### [Examine Data](#21)\n    * ##### [Visualize Data](#22)\n* #### [Preprocess Data](#3)\n    * ##### [Dropping Outliers](#31)\n    * ##### [Concatenating Train and Test Data](#32)\n    * ##### [Fill Missing Values](#34)\n* #### [Feature Engineering](#4)\n    * ##### [Changing The Distribution Of Categories](#41)\n    * ##### [Dummy Encoding](#43)\n* #### [Make Models](#5) \n    * ##### [Separating Test And Train Datas](#51)\n\n","d9938e10":"<a id=\"2\"> <\/a>\n# Load and Examine Data","309af008":"<a id=\"5\"> <\/a>\n# Make Models"}}