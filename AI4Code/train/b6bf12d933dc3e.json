{"cell_type":{"7a0346cc":"code","743c234e":"code","3132f515":"code","3bdff6a8":"code","e97399de":"code","b0161528":"code","410077dc":"code","7569187d":"code","40f357ea":"code","40353264":"code","d18ed101":"code","90422739":"code","95b969e7":"code","84069288":"code","a76bbda1":"code","d5be11f4":"code","133c401d":"code","c44b5cdc":"code","edda9dfd":"code","9b3880de":"code","904608e0":"code","c7248d86":"code","c9294ce5":"code","dc804cae":"code","a0b64532":"code","c2203fc3":"code","697e898f":"code","cbb09317":"code","c1ed6cbc":"code","1bf383f0":"code","0a8ef6e9":"code","328a40fb":"code","7016cada":"code","7d05e116":"code","ba906019":"code","b853eb3c":"code","e2920d02":"code","07972752":"code","3c25f0d7":"code","f74b2adc":"code","501bd786":"markdown","1ee6605e":"markdown","258494b4":"markdown","0b5194cd":"markdown","f7d28d79":"markdown","a25b106e":"markdown","c2bdb6c0":"markdown","d1a883be":"markdown","9e94329c":"markdown","1b20b9d0":"markdown","07845feb":"markdown","76607e0b":"markdown","21bc904d":"markdown","17394e13":"markdown","6b76d17a":"markdown","28f1c634":"markdown","8e2beda2":"markdown","f225d173":"markdown","32ab86e3":"markdown","b399716f":"markdown","bc16b03b":"markdown","97ff6d26":"markdown","c626df4e":"markdown","d7d4fec9":"markdown","00768d4d":"markdown","ce66f183":"markdown","4bff89ce":"markdown","99678ead":"markdown","6e211ce1":"markdown","f69e3fe5":"markdown","36294d14":"markdown","da810ed5":"markdown"},"source":{"7a0346cc":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","743c234e":"df = pd.read_csv('..\/input\/loan-data\/loan_train.csv')\ndf.head()","3132f515":"df.shape","3bdff6a8":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","e97399de":"df['loan_status'].value_counts()","b0161528":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","410077dc":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","7569187d":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","40f357ea":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","40353264":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","d18ed101":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","90422739":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","95b969e7":"df[['Principal','terms','age','Gender','education']].head()","84069288":"Feature = df[['Principal','terms','age','Gender','weekend']]\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","a76bbda1":"X = Feature\nX[0:5]","d5be11f4":"y = df['loan_status'].values\ny[0:5]","133c401d":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","c44b5cdc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","edda9dfd":"from sklearn.neighbors import KNeighborsClassifier","9b3880de":"k = 7\n#Train Model and Predict\nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","904608e0":"yhat = kNN_model.predict(X_test)\nyhat[0:5]","c7248d86":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, kNN_model.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","c9294ce5":"from sklearn.tree import DecisionTreeClassifier","dc804cae":"X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_trainset.shape,  y_trainset.shape)\nprint ('Test set:', X_testset.shape,  y_testset.shape)","a0b64532":"loan1 = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 5)\nloan1 # it shows the default parameters","c2203fc3":"loan1.fit(X_trainset,y_trainset)","697e898f":"predLoan = loan1.predict(X_testset)\npredLoan","cbb09317":"print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_testset, predLoan))","c1ed6cbc":"from sklearn import svm\nclf = svm.SVC(kernel='rbf', max_iter = -1)\nclf.fit(X_train, y_train) ","1bf383f0":"yhatSVM = clf.predict(X_test)\nyhatSVM[0:10]","0a8ef6e9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nX_trainLR, X_testLR, y_trainLR , y_testLR = train_test_split(X, y, test_size=0.35, random_state=0)\nlogreg = LogisticRegression()\nlogreg.fit(X_trainLR, y_trainLR)","328a40fb":"y_predLR = logreg.predict(X_testLR)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","7016cada":"from sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","7d05e116":"test_df = pd.read_csv('..\/input\/loan-test\/loan_test.csv')\ntest_df.head()","ba906019":"test_y = test_df['loan_status'].values\nprint(test_y)","b853eb3c":"test_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntest_Feature = test_df[['Principal','terms','age','Gender','weekend']]\ntest_Feature = pd.concat([test_Feature,pd.get_dummies(test_df['education'])], axis=1)\ntest_Feature.drop(['Master or Above'], axis = 1,inplace=True)\ntest_X = preprocessing.StandardScaler().fit(test_Feature).transform(test_Feature)\ntest_X[0:5]","e2920d02":"knn_yhat = kNN_model.predict(X_test)\nprint(\"KNN Jaccard index: %.2f\" % jaccard_similarity_score(y_test, knn_yhat))\nprint(\"KNN F1-score: %.2f\" % f1_score(y_test, knn_yhat, average='weighted') )","07972752":"tree_yhat = loan1.predict(test_X)\nprint(\"DT Jaccard index: %.2f\" % jaccard_similarity_score(test_y, tree_yhat))\nprint(\"DT F1-score: %.2f\" % f1_score(test_y, tree_yhat, average='weighted') )","3c25f0d7":"SVM_yhat = clf.predict(test_X)\nprint(\"SVM Jaccard index: %.2f\" % jaccard_similarity_score(test_y, SVM_yhat))\nprint(\"SVM F1-score: %.2f\" % f1_score(test_y, SVM_yhat, average='weighted') )","f74b2adc":"LR_yhat = logreg.predict(test_X)\nLR_yhat_prob = logreg.predict_proba(test_X)\nprint(\"LR Jaccard index: %.2f\" % jaccard_similarity_score(test_y, LR_yhat))\nprint(\"LR F1-score: %.2f\" % f1_score(test_y, LR_yhat, average='weighted') )\nprint(\"LR LogLoss: %.2f\" % log_loss(test_y, LR_yhat_prob))","501bd786":"Data Standardization give data zero mean and unit variance (technically should be done after train test split )","1ee6605e":"#### Feature befor One Hot Encoding","258494b4":"86 % of female pay there loans while only 73 % of males pay there loan\n","0b5194cd":"# Report\nThe accuracy of the built model using different evaluation metrics:","f7d28d79":"## Convert Categorical features to numerical values","a25b106e":"### About dataset","c2bdb6c0":"## One Hot Encoding  \n#### How about education?","d1a883be":"Lets convert male to 0 and female to 1:\n","9e94329c":"### Load Test set for evaluation ","1b20b9d0":"# Pre-processing:  Feature selection\/extraction","07845feb":"# Decision Tree","76607e0b":"What are our lables?","21bc904d":"| Algorithm          | Jaccard | F1-score | LogLoss |\n|--------------------|---------|----------|---------|\n| KNN                | 0.79    | 0.78     | NA      |\n| Decision Tree      | 0.76    | 0.77     | NA      |\n| SVM                | 0.80    | 0.76     | NA      |\n| LogisticRegression | 0.70    | 0.69     | 0.49    |","17394e13":"Let\u2019s see how many of each class is in our data set ","6b76d17a":"# Data visualization and pre-processing\n\n","28f1c634":"## Normalize Data ","8e2beda2":"# Logistic Regression","f225d173":"### Load Data From CSV File  ","32ab86e3":"### Lets look at the day of the week people get the loan ","b399716f":"Lets defind feature sets, X:","bc16b03b":"### Feature selection","97ff6d26":"This dataset is about past loans. The __Loan_train.csv__ data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |","c626df4e":"# K Nearest Neighbor(KNN)","d7d4fec9":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 ","00768d4d":"260 people have paid off the loan on time while 86 have gone into collection \n","ce66f183":"#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame ","4bff89ce":"### Convert to date time object ","99678ead":"# Classification ","6e211ce1":"Lets look at gender:","f69e3fe5":"# Model Evaluation using Test set","36294d14":"# Support Vector Machine","da810ed5":"Lets plot some columns to underestand data better:"}}