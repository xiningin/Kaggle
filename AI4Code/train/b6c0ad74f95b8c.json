{"cell_type":{"c88b92ed":"code","dc2238b0":"code","00ed8ec6":"code","c37a8d0e":"code","36b8d91a":"code","a1e294a4":"code","a5e67458":"code","e80bd6c9":"code","710338d0":"code","a69acad4":"code","e8e29445":"markdown","337f249c":"markdown","1eee4580":"markdown","2736861d":"markdown","53cf9718":"markdown","47131d50":"markdown","005b9e47":"markdown","98df9d2e":"markdown"},"source":{"c88b92ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc2238b0":"import numpy as np\nimport pandas as pd\n\ndata = pd.read_csv(\"\/kaggle\/input\/qb-ratings\/2.csv\")\ndata_filter = data[[\"Player\", \"Cmp%\", \"Yds\", \"TD\", \"Int\"]]\ndata_filter","00ed8ec6":"mean_col = data_filter.agg({'Cmp%': [np.mean], 'Yds': [np.mean], 'TD': [np.mean], 'Int': [np.mean]})\n\nmean_col","c37a8d0e":"data_filter.Yds = data_filter.Yds.astype(float)\ndata_filter.TD = data_filter.TD.astype(float)\ndata_filter.Int = data_filter.Int.astype(float)\ndata_filter","36b8d91a":"for i in data_filter.index:\n    data_filter[\"Cmp%\"][i] = abs(data_filter[\"Cmp%\"][i]-mean_col[\"Cmp%\"])\/mean_col[\"Cmp%\"]\n    data_filter[\"Yds\"][i] = (data_filter[\"Yds\"][i]-mean_col[\"Yds\"])\/(mean_col[\"Yds\"]+data_filter[\"Yds\"][i])\n    data_filter[\"TD\"][i] = (data_filter[\"TD\"][i]-mean_col[\"TD\"])\/(data_filter[\"TD\"][i]+mean_col[\"TD\"])\n    data_filter[\"Int\"][i] = (data_filter[\"Int\"][i]-mean_col[\"Int\"])\/(mean_col[\"Int\"]+data_filter[\"Int\"][i])\n\ndata_filter    ","a1e294a4":"player_dict = data_filter.T.to_dict('list')\nplayer_dict[3][0]","a5e67458":"from scipy import spatial\n\ndef ComputeDistance(a, b):\n    playerA = np.sqrt(a[1]**2 + a[2]**2 + a[3]**2)\n    playerB = np.sqrt(b[1]**2 + b[2]**2 + b[3]**2)\n    dist = ((playerA - playerB)**2)\/abs(playerA - playerB)\n    return dist\n    \nComputeDistance(player_dict[1], player_dict[6])","e80bd6c9":"import operator\nplayerID = data_filter[\"Player\"]\n\ndef getNeighbors(playerID, K):\n    distances = []\n    for player in player_dict:\n        if (player != playerID):\n            distance = ComputeDistance(player_dict[playerID], player_dict[player])\n            distances.append((player, distance))\n    distances.sort(key=operator.itemgetter(1))\n    neighbors = []\n    for x in range(K):\n        neighbors.append(distances[x][0])\n    return neighbors\n\nK = 10\nmeasured_dist = 0\nneighbors = getNeighbors(1, K)\nfor neighbor in neighbors:\n    measured_dist += player_dict[neighbor][3]\n    print (player_dict[neighbor][0])\n    print(str(player_dict[neighbor][1]) + \" \" + str(player_dict[neighbor][2]) + \" \" + str(player_dict[neighbor][3]) + \" \" + str(player_dict[neighbor][4]) )\n    \n#measured_dist \/= K","710338d0":"display(ComputeDistance(player_dict[1], player_dict[38]))  ###Tannehill\nComputeDistance(player_dict[1], player_dict[88])\nComputeDistance(player_dict[1], player_dict[76])\ndisplay(ComputeDistance(player_dict[1], player_dict[20]))  ####Wentz\ndisplay(ComputeDistance(player_dict[1], player_dict[21]))  ###Wilson\ndisplay(ComputeDistance(player_dict[1], player_dict[71]))  ##Newton\ndisplay(ComputeDistance(player_dict[1], player_dict[5]))   ###Mahomes\ndisplay(ComputeDistance(player_dict[1], player_dict[3]))   ###Prescott\nComputeDistance(player_dict[1], player_dict[79])\nComputeDistance(player_dict[1], player_dict[58])      ####Ryan","a69acad4":"getNeighbors(1, 90)\nComputeDistance(player_dict[1], player_dict[2])  ###AJ McCarron","e8e29445":"Nearest Neighbour function. The output are the 10 nearest neighbours (the 10 most similar QBs based on their first 3 seasons in the league) and their scaled statistics (comp%, YDS, TD, int). The output is the QBs most similar to Deshaun Watson.","337f249c":"Convert the dataframe to a dictionary","1eee4580":"In the notebook I explored similarities between different Football QBs using the K Nearest Neigbours technique. I took data from pro Football reference on the first three years of a QB's career from years 1980-2019 and measured similarity based on completion percentage, passing yards, TDs and interceptions. ","2736861d":"Create my distnace function (using squared distance and absolute value functions to ensure we don't get negative values). Also notice that I've treated the distnce for each player like the components of a vector (and so we take the sqrt of the squares to determine the distnace from the origin). ","53cf9718":"Scale the data; the above cell converts the elements of each column to a float","47131d50":"The distances? (The ones shown are for current NFL QBs minus Jacoby Brisset). It's nice to see alot of mobile QBs (Wentz, Wilson, Newton) match up with Watson; even though I didn't taking any rushing stats into account. ","005b9e47":"The opposite; see the distances increase for neigbours far away","98df9d2e":"Finding the means of the columns - used for scaling the data"}}