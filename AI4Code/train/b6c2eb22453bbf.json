{"cell_type":{"10871545":"code","0e591a7e":"code","8b12a693":"code","dcc253ff":"code","17a1fc4f":"code","aa1236e7":"code","c1f01e2a":"code","6bfdf77a":"code","b4cc3339":"code","1b8428af":"code","22d2603e":"code","61f08621":"code","0e9566f5":"code","e1c29ddf":"code","93c61ab2":"code","76f56ff5":"code","7e96304d":"code","0a319120":"code","ecd416fa":"code","30e479a9":"code","80d86b8c":"code","67d504a5":"code","7630c91a":"code","7a622d84":"code","697bdc5f":"code","75bd7e59":"code","7746948d":"code","3bded046":"code","db824eb3":"code","b09f8069":"code","80187e33":"code","7581ec7a":"code","53d92bce":"code","fd71391d":"code","a0f97c68":"code","22471f91":"code","4ef79fa0":"code","1d052f0e":"code","d400a86b":"code","406ba6f8":"code","db6e384f":"code","1bb8d7a5":"code","e17c81b3":"code","047b0d98":"code","b9b356a9":"code","562c70e8":"code","bb14841a":"code","3a79dd16":"code","788f3956":"code","5ff2304f":"code","3eb77e9c":"code","31ede85b":"code","92ca004b":"code","74e90d5b":"code","6edfe2db":"code","2aeb3691":"code","ce26ea3e":"code","29c7c35e":"code","a02b7440":"code","efd811b9":"code","d9d4133f":"code","072db642":"code","9f6d167d":"code","86a36999":"code","635b4928":"code","8d5c9da0":"code","f18a8925":"code","fe72425e":"code","d5bdd6a2":"code","f69b9cf7":"code","ba254493":"code","37ff1559":"code","3364fea5":"code","baae7e7b":"code","4e34b56a":"code","cca4366a":"code","77c9c2a3":"code","fbe8f294":"code","5800050d":"code","601b273b":"code","cd97c7b9":"code","e06c02dc":"code","05878ebf":"code","1942bd74":"code","a895fe31":"code","d92bd98e":"code","57cf8504":"code","357c738b":"code","dec4c680":"code","191c65e4":"code","1f979504":"code","3191f535":"code","6eca3e80":"code","337eaf4b":"code","6c20aba4":"code","fe60e6af":"code","d6e53965":"code","eedc6d3e":"code","103d09a7":"code","25e12b5f":"code","86268048":"code","14ac817c":"code","593f45b1":"code","2d049b92":"code","c5c78dbe":"code","00d168f9":"code","123fb087":"code","9f77ad1c":"code","6d087fde":"code","c6fa4b7d":"code","b4ee26d1":"code","408a5c03":"code","fb17e40a":"code","3242b7d5":"code","8cd38c22":"code","832ad472":"code","c556a5c8":"code","c2769b12":"code","89f4ff62":"code","b301d57e":"code","8b13e2dc":"code","7c7d7e38":"code","066d6060":"code","e02932bc":"code","6cc2a6c8":"code","9bac99fd":"code","ed465f05":"code","4e0fec52":"code","d53f6ceb":"code","ca541fe8":"code","07f5cd31":"code","ddf2301d":"code","9e562140":"code","16d085d3":"code","16e93301":"code","7430ed83":"code","93557391":"code","267cc630":"code","5ee1ed0a":"code","f165d725":"code","2f4cc1c7":"code","64ab1403":"code","92b5e87a":"code","61ceef14":"code","59cce915":"code","d9302689":"code","89e7b3e8":"code","c82f94ef":"code","4cb08d09":"code","f8c859f3":"code","dd069b98":"code","c67b16a3":"code","f31b0f33":"code","465ab573":"code","a11a8213":"code","42799476":"code","01a4c02f":"code","fb46b13a":"code","2c37be20":"code","7bfe2487":"code","b4b51f92":"code","e3abbfe2":"code","e1c918c1":"code","07a0b779":"code","d11202ca":"code","21deb312":"code","a585d84b":"code","a8ead6e5":"code","95825aca":"markdown","5aec8e52":"markdown","e5d696af":"markdown","dfe91538":"markdown","4af2e779":"markdown","61854678":"markdown","95818752":"markdown","c9e34e93":"markdown","406fa882":"markdown","d0cd20d7":"markdown","1a1c643a":"markdown","5622925b":"markdown","74a192e8":"markdown","41265193":"markdown","a3b7235c":"markdown","c80fbbff":"markdown","f4228c52":"markdown","37c50f0d":"markdown","51401b03":"markdown","5d88a287":"markdown","bbf52803":"markdown","cd1a1306":"markdown","230ae4c1":"markdown","4c25115e":"markdown","ab106e19":"markdown","12dcb77c":"markdown","446c91a3":"markdown","ad703b31":"markdown","f89a977c":"markdown","9206c838":"markdown","21bac1cc":"markdown","6ba652be":"markdown","b01a858d":"markdown","eb335d07":"markdown","55c20152":"markdown","2ed21523":"markdown","682a4597":"markdown","6580f536":"markdown","36900997":"markdown","de31253c":"markdown","3f8ef313":"markdown","959cb445":"markdown","b9620ac0":"markdown","fd5ec540":"markdown","bdbc590a":"markdown","fe305af0":"markdown","2dd32f6e":"markdown","9b1aad73":"markdown","4dfb3694":"markdown","44c51100":"markdown","bce05972":"markdown","4840b037":"markdown","a3c7a0f0":"markdown","a02c38b5":"markdown","f7b8b5b1":"markdown","b7546bb5":"markdown","48e25431":"markdown","35634d7e":"markdown","7db51f75":"markdown","dda5714c":"markdown","0caf54ea":"markdown","13bedeae":"markdown","d952f47e":"markdown","a8e37234":"markdown","303a6ba9":"markdown","92dd5566":"markdown","74d51623":"markdown","87d8cda7":"markdown","dafaef4d":"markdown","65e3e636":"markdown","ee48f37c":"markdown","0eec3194":"markdown","460f4864":"markdown","2f587aa3":"markdown","d11ab24f":"markdown","00adae21":"markdown","0be50800":"markdown","bb53f45c":"markdown","ac44eacc":"markdown","16539455":"markdown","0b79707f":"markdown","bc7a7cb1":"markdown","4fda09e0":"markdown","29733850":"markdown","f6cd7cae":"markdown"},"source":{"10871545":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.feature_selection import RFE, SelectPercentile, f_regression\nfrom sklearn.model_selection import GridSearchCV, KFold, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nimport catboost\n\nfrom xgboost import XGBRegressor\nimport lightgbm as lgb\nfrom mlxtend.regressor import StackingCVRegressor\n\nfrom scipy import stats","0e591a7e":"random_state = 831","8b12a693":"data_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\").set_index(\"Id\")\ndata_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\").set_index(\"Id\")\ndata = pd.concat([data_train, data_test])","dcc253ff":"data.info()","17a1fc4f":"def analyse_numeric(name):\n    fig, [ax1, ax2] = plt.subplots(1, 2, sharey=False)\n    sns.kdeplot(data[name], ax=ax1)\n    sns.kdeplot(np.log(1+data[name]), ax=ax2)\n    print(f\"Feature contains {len(data[pd.isnull(data[name])])} NANs\")\n    print(f\"Feature contains {len(data[data[name]==0])} ZEROes\")","aa1236e7":"def analyse_categorical(name, target=\"SalePrice\", fillnan=None, is_quality=False):\n    print(data[name].value_counts(dropna=False))\n    if fillnan is not None:\n        data[name].fillna(fillnan, inplace=True)\n        print(\"============================\")\n        print(f\"NANs filled with {fillnan}\")\n        print(\"============================\")\n        print(data[name].value_counts(dropna=False))\n    if is_quality:\n        data[name].replace({\"Ex\":5, \"Gd\":4, \"TA\":3, \"Fa\":2, \"Po\":1, \"None\":0}, inplace=True)\n    sns.catplot(x=name, y=target, kind=\"box\", data=data)","c1f01e2a":"def make_quantile_bins(name, n_bins):\n    bins = pd.qcut(data[name], n_bins, labels=False, retbins=True)\n    ax = sns.kdeplot(data[name])\n    plt.vlines(bins[1], 0, ax.get_ylim()[1], linestyles=\"dotted\")\n    return bins[0]","6bfdf77a":"def expand_categorical(data, features):\n    d = data[features]\n    values = np.unique(d.values.flatten()).tolist()\n    result = pd.DataFrame(index=data.index, columns=values)\n    for i, row in d.iterrows():\n        v = np.unique(row.values.flatten()).tolist()\n        result.loc[i,v] = 1\n    result.fillna(0, inplace=True)\n    result.columns = [features[0]+\"_\"+col for col in result.columns]\n    data.drop(features, axis=1, inplace=True)\n    return pd.concat([data, result], axis=1)","b4cc3339":"analyse_numeric(\"SalePrice\")","1b8428af":"data[\"SalePrice\"] = np.log(data[\"SalePrice\"])","22d2603e":"analyse_categorical(\"MSSubClass\")","61f08621":"data[\"MSSubClass\"] = data[\"MSSubClass\"].astype(str)","0e9566f5":"analyse_categorical(\"MSZoning\", fillnan=\"RL\")","e1c29ddf":"data[\"LotGeometry\"] = data[\"LotArea\"] \/ data[\"LotFrontage\"]\nanalyse_numeric(\"LotGeometry\")","93c61ab2":"data['LotGeometry'].fillna(0, inplace=True)\ndata['LotGeometry'] = make_quantile_bins('LotGeometry', 6)","76f56ff5":"analyse_categorical(\"LotGeometry\")","7e96304d":"analyse_numeric(\"LotFrontage\")","0a319120":"data['LotFrontage'].fillna(0, inplace=True)\ndata['LotFrontage'] = make_quantile_bins('LotFrontage', 6)","ecd416fa":"analyse_categorical(\"LotFrontage\")","30e479a9":"analyse_numeric(\"LotArea\")","80d86b8c":"data[\"LotArea^2\"] = data[\"LotArea\"] * data[\"LotArea\"]\ndata[\"LotArea\"] = stats.boxcox(data[\"LotArea\"])[0]\ndata[\"LotArea^2\"] =  stats.boxcox(data[\"LotArea^2\"])[0]\nsns.lmplot(x='LotArea', y='SalePrice', data=data)","67d504a5":"analyse_categorical(\"Street\")","7630c91a":"analyse_categorical(\"Alley\", fillnan=\"None\")","7a622d84":"analyse_categorical(\"LotShape\")","697bdc5f":"analyse_categorical(\"Utilities\")","75bd7e59":"data.drop(\"Utilities\", axis=1, inplace=True)","7746948d":"analyse_categorical(\"LotConfig\")","3bded046":"analyse_categorical(\"LandContour\")","db824eb3":"analyse_categorical(\"LandSlope\")","b09f8069":"data[\"LandTopology\"] = data[\"LandContour\"] + data[\"LandSlope\"]\ndata.drop(\"LandSlope\", axis=1, inplace=True)\nanalyse_categorical(\"LandTopology\")","80187e33":"analyse_categorical(\"Neighborhood\")","7581ec7a":"analyse_categorical(\"Condition1\")","53d92bce":"analyse_categorical(\"Condition2\")","fd71391d":"data = expand_categorical(data, [\"Condition1\", \"Condition2\"])","a0f97c68":"analyse_categorical(\"BldgType\")","22471f91":"analyse_categorical(\"HouseStyle\")","4ef79fa0":"analyse_categorical(\"OverallQual\")","1d052f0e":"analyse_categorical(\"OverallCond\")","d400a86b":"data[\"YearsLastRemod\"] = data[\"YearRemodAdd\"] - data[\"YearBuilt\"]\ndata[\"YearsLastRemod\"] = make_quantile_bins(\"YearsLastRemod\", 3)\nanalyse_categorical(\"YearsLastRemod\")","406ba6f8":"analyse_numeric(\"YearBuilt\")","db6e384f":"data[\"YearBuilt\"] = make_quantile_bins(\"YearBuilt\", 10)\nanalyse_categorical(\"YearBuilt\")","1bb8d7a5":"analyse_numeric(\"YearRemodAdd\")","e17c81b3":"data[\"YearRemodAdd\"] = make_quantile_bins(\"YearRemodAdd\", 8)\nanalyse_categorical(\"YearRemodAdd\")","047b0d98":"analyse_categorical(\"RoofStyle\")","b9b356a9":"data[\"RoofMatl\"].replace([[\"Metal\", \"Membran\", \"ClyTile\", \"Roll\"]], \"Other\", inplace=True)\ndata[\"RoofMatl\"].replace([[\"WdShake\", \"WdShngl\"]], \"Wooden\", inplace=True)\nanalyse_categorical(\"RoofMatl\")","562c70e8":"analyse_categorical(\"Exterior1st\", fillnan=\"Other\")","bb14841a":"analyse_categorical(\"Exterior2nd\", fillnan=\"Other\")","3a79dd16":"data[\"Exterior1st\"].replace([\"WdShing\"], \"Wd Shng\", inplace=True)\ndata[\"Exterior2nd\"].replace([\"CmentBd\"], \"CemntBd\", inplace=True)\ndata[\"Exterior2nd\"].replace([\"Brk Cmn\"], \"BrkComm\", inplace=True)\ndata = expand_categorical(data, [\"Exterior1st\", \"Exterior2nd\"])","788f3956":"analyse_categorical(\"MasVnrType\", fillnan=\"None\")","5ff2304f":"analyse_numeric(\"MasVnrArea\")","3eb77e9c":"data.drop(\"MasVnrArea\", axis=1, inplace=True)","31ede85b":"analyse_categorical(\"ExterQual\", is_quality=True)","92ca004b":"analyse_categorical(\"ExterCond\", is_quality=True)","74e90d5b":"analyse_categorical(\"Foundation\")","6edfe2db":"analyse_categorical(\"BsmtQual\", fillnan=\"None\", is_quality=True)","2aeb3691":"analyse_categorical(\"BsmtCond\", fillnan=\"None\", is_quality=True)","ce26ea3e":"analyse_categorical(\"BsmtExposure\", fillnan=\"None\")","29c7c35e":"analyse_categorical(\"BsmtFinType1\", fillnan=\"None\")","a02b7440":"analyse_categorical(\"BsmtFinType2\", fillnan=\"None\")","efd811b9":"data = expand_categorical(data, [\"BsmtFinType1\", \"BsmtFinType2\"])","d9d4133f":"analyse_numeric(\"BsmtFinSF1\")\ndata[\"BsmtFinSF1\"].fillna(0, inplace=True)","072db642":"data['BsmtFinSF1'] = make_quantile_bins('BsmtFinSF1', 3)\nanalyse_categorical(\"BsmtFinSF1\")","9f6d167d":"data[\"BsmtFinSF2\"].fillna(0, inplace=True)\ndata['BsmtFinSF2'] = np.where(data[\"BsmtFinSF2\"] == 0, 0, 1)\nanalyse_categorical(\"BsmtFinSF2\")","86a36999":"data.drop('BsmtFinSF2', axis=1, inplace=True)","635b4928":"data[\"BsmtUnfSF\"].fillna(0, inplace=True)\ndata['BsmtUnfSF'] = np.where(data[\"BsmtUnfSF\"] == 0, 0, 1)\nanalyse_categorical(\"BsmtUnfSF\")","8d5c9da0":"analyse_numeric(\"TotalBsmtSF\")","f18a8925":"data[\"TotalBsmtSF\"].fillna(0, inplace=True)\ndata[\"TotalBsmtSF^2\"] = data[\"TotalBsmtSF\"] * data[\"TotalBsmtSF\"]\ndata[\"TotalBsmtSF\"] = stats.yeojohnson(data[\"TotalBsmtSF\"])[0]\ndata[\"TotalBsmtSF^2\"] = stats.yeojohnson(data[\"TotalBsmtSF^2\"])[0]\nsns.lmplot(x='TotalBsmtSF', y='SalePrice', data=data)","fe72425e":"data['TotalSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']\nanalyse_numeric(\"TotalSF\")","d5bdd6a2":"data['TotalSF^2'] = data['TotalSF'] * data['TotalSF']\ndata['TotalSF'] = stats.yeojohnson(data['TotalSF'])[0]\ndata['TotalSF^2'] = stats.yeojohnson(data['TotalSF^2'])[0]\nsns.lmplot(x='TotalSF', y='SalePrice', data=data)","f69b9cf7":"analyse_categorical(\"Heating\")","ba254493":"analyse_categorical(\"HeatingQC\", is_quality=True)","37ff1559":"analyse_categorical(\"CentralAir\")","3364fea5":"analyse_categorical(\"Electrical\", fillnan=\"SBrkr\")","baae7e7b":"analyse_numeric(\"1stFlrSF\")","4e34b56a":"data[\"1stFlrSF^2\"] = data[\"1stFlrSF\"] * data[\"1stFlrSF\"]\ndata[\"1stFlrSF\"] = stats.boxcox(data[\"1stFlrSF\"])[0]\ndata[\"1stFlrSF^2\"] = stats.boxcox(data[\"1stFlrSF^2\"])[0]\nsns.lmplot(x='1stFlrSF', y='SalePrice', data=data)","cca4366a":"analyse_numeric(\"2ndFlrSF\")","77c9c2a3":"data['has2ndFlr'] = np.where(data[\"2ndFlrSF\"] > 0, 1, 0)\nanalyse_categorical(\"has2ndFlr\")","fbe8f294":"data[\"LowQualFinSF\"].fillna(0, inplace=True)\ndata['LowQualFinSF'] = np.where(data[\"LowQualFinSF\"] == 0, 0, 1)\nanalyse_categorical(\"LowQualFinSF\")","5800050d":"data.drop(\"LowQualFinSF\", axis=1, inplace=True)","601b273b":"analyse_numeric(\"GrLivArea\")","cd97c7b9":"data[\"GrLivArea^2\"] = data[\"GrLivArea\"] * data[\"GrLivArea\"]\ndata[\"GrLivArea\"] = stats.boxcox(data[\"GrLivArea\"])[0]\ndata[\"GrLivArea^2\"] = stats.boxcox(data[\"GrLivArea^2\"])[0]\nsns.lmplot(x='GrLivArea', y='SalePrice', data=data)","e06c02dc":"analyse_categorical(\"BsmtFullBath\", fillnan=0)","05878ebf":"analyse_categorical(\"BsmtHalfBath\", fillnan=0)","1942bd74":"data[\"BathroomsBasement\"] = data[\"BsmtFullBath\"] + 0.5 * data[\"BsmtHalfBath\"]\nanalyse_categorical(\"BathroomsBasement\")\ndata.drop([\"BsmtFullBath\", \"BsmtHalfBath\"], axis=1, inplace=True)","a895fe31":"analyse_categorical(\"FullBath\")","d92bd98e":"analyse_categorical(\"HalfBath\")","57cf8504":"data[\"Bathrooms\"] = data[\"FullBath\"] + 0.5 * data[\"HalfBath\"]\nanalyse_categorical(\"Bathrooms\")\ndata.drop([\"FullBath\", \"HalfBath\"], axis=1, inplace=True)","357c738b":"analyse_categorical(\"BedroomAbvGr\")","dec4c680":"analyse_categorical(\"KitchenAbvGr\")","191c65e4":"data.drop(\"KitchenAbvGr\", axis=1, inplace=True)","1f979504":"analyse_categorical(\"KitchenQual\", fillnan=\"TA\", is_quality=True)","3191f535":"analyse_categorical(\"TotRmsAbvGrd\")","6eca3e80":"analyse_categorical(\"Functional\", fillnan=\"Typ\")","337eaf4b":"analyse_categorical(\"Fireplaces\")","6c20aba4":"analyse_categorical(\"FireplaceQu\", fillnan=\"None\", is_quality=True)","fe60e6af":"analyse_categorical(\"GarageType\", fillnan=\"None\")","d6e53965":"analyse_numeric(\"GarageYrBlt\")","eedc6d3e":"data['GarageYrBlt'] = make_quantile_bins('GarageYrBlt', 10)\nanalyse_categorical(\"GarageYrBlt\", fillnan=5.0)","103d09a7":"analyse_categorical(\"GarageFinish\", fillnan=\"None\")","25e12b5f":"analyse_categorical(\"GarageCars\", fillnan=0)","86268048":"analyse_numeric(\"GarageArea\")","14ac817c":"data[\"GarageArea\"].fillna(0, inplace=True)\nsns.lmplot(x='GarageArea', y='SalePrice', data=data)","593f45b1":"data['GarageArea_Bin'] = make_quantile_bins('GarageArea', 10)\nanalyse_categorical('GarageArea_Bin')","2d049b92":"analyse_categorical('GarageQual', fillnan=\"None\", is_quality=True)","c5c78dbe":"analyse_categorical('GarageCond', fillnan=\"None\", is_quality=True)","00d168f9":"analyse_categorical('PavedDrive')","123fb087":"analyse_numeric('WoodDeckSF')","9f77ad1c":"data[\"WoodDeckSF\"] = np.where(data[\"WoodDeckSF\"] == 0, 0, 1)\nanalyse_categorical(\"WoodDeckSF\")","6d087fde":"analyse_numeric('OpenPorchSF')","c6fa4b7d":"data[\"OpenPorchSF\"] = np.where(data[\"OpenPorchSF\"] == 0, 0, 1)\nanalyse_categorical(\"OpenPorchSF\")","b4ee26d1":"data[\"EnclosedPorch\"] = np.where(data[\"EnclosedPorch\"] == 0, 0, 1)\nanalyse_categorical(\"EnclosedPorch\")","408a5c03":"data[\"3SsnPorch\"] = np.where(data[\"3SsnPorch\"] == 0, 0, 1)\nanalyse_categorical(\"3SsnPorch\")","fb17e40a":"data[\"ScreenPorch\"] = np.where(data[\"ScreenPorch\"] == 0, 0, 1)\nanalyse_categorical(\"ScreenPorch\")","3242b7d5":"data[\"PoolArea\"] = np.where(data[\"PoolArea\"] == 0, 0, 1)\nanalyse_categorical(\"PoolArea\")","8cd38c22":"analyse_categorical(\"PoolQC\", fillnan=\"None\")","832ad472":"data.drop(\"PoolQC\", axis=1, inplace=True)","c556a5c8":"analyse_categorical(\"Fence\", fillnan=\"None\")","c2769b12":"analyse_categorical(\"MiscFeature\", fillnan=\"None\")","89f4ff62":"data.drop(\"MiscVal\", axis=1, inplace=True)","b301d57e":"analyse_categorical(\"MoSold\")","8b13e2dc":"data.drop(\"MoSold\", axis=1, inplace=True)","7c7d7e38":"analyse_categorical(\"YrSold\")","066d6060":"data.drop(\"YrSold\", axis=1, inplace=True)","e02932bc":"analyse_categorical(\"SaleType\", fillnan=\"WD\")","6cc2a6c8":"analyse_categorical(\"SaleCondition\")","9bac99fd":"def generate_dummies(data):\n    features = data.columns[data.dtypes == \"object\"].to_list()\n    data = pd.concat([data, pd.get_dummies(data[features])], axis=1)\n    data.drop(features, axis=1, inplace=True)\n    return data","ed465f05":"data.info()","4e0fec52":"f, ax = plt.subplots(figsize=(35, 35))\nsns.heatmap(data.corr(), square=True, annot=True, fmt = \".1f\", cmap = \"coolwarm\");","d53f6ceb":"data = generate_dummies(data)\ndata.head(1)","ca541fe8":"X_train = data.loc[data_train.index].drop(\"SalePrice\", axis=1)\ny_train = data.loc[data_train.index, \"SalePrice\"]\nX_test = data.loc[data_test.index].drop(\"SalePrice\", axis=1)\ncv=KFold(10, shuffle=True, random_state=random_state)","07f5cd31":"model = KNeighborsRegressor()\npipe = Pipeline([(\"scaler\", RobustScaler()), (\"knn\", model)])\nparams = {\n    'knn__n_neighbors': [3, 5, 7, 8, 9, 10, 11, 15, 20,],\n    'knn__weights': ['uniform', 'distance'],\n}\nknn_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, n_jobs=-1, scoring='neg_root_mean_squared_error')\nknn_grid.fit(X_train, y_train)\ntrain_score = knn_grid.score(X_train, y_train)","ddf2301d":"results = pd.DataFrame(knn_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_knn__n_neighbors\", columns=\"param_knn__weights\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","9e562140":"MODEL_0 = knn_grid.best_estimator_\nprint(f\"Model train \/ CV score is {train_score:.5f} \/ {knn_grid.best_score_:.5f}\")\n# -0.00104 \/ -0.14801","16d085d3":"prediction_0 = MODEL_0.predict(X_test)\nprediction_0 = np.e ** prediction_0\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_0})\nsubmit.to_csv(\"MODEL_0.csv\",index=False)","16e93301":"model = Ridge()\npipe = Pipeline([(\"scaler\", RobustScaler()), (\"ridge\", model)])\nparams = {\n    'ridge__alpha': [0.01, 0.1, 1, 10, 100, 1000]\n}\nridge_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, n_jobs=-1, scoring='neg_root_mean_squared_error')\nridge_grid.fit(X_train, y_train)\ntrain_score = ridge_grid.score(X_train, y_train)","7430ed83":"results = pd.DataFrame(ridge_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_ridge__alpha\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","93557391":"MODEL_1 = ridge_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {ridge_grid.best_score_:.5f}\")\n# -0.10830 \/ -0.12741","267cc630":"prediction_1 = MODEL_1.predict(X_test)\nprediction_1 = np.e ** prediction_1\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_1})\nsubmit.to_csv(\"MODEL_1.csv\",index=False)","5ee1ed0a":"model = Lasso(max_iter=100000)\npipe = Pipeline([(\"scaler\", MinMaxScaler()), (\"lasso\", model)])\nparams = {\n    'lasso__alpha': [0.00001, 0.0001, 0.001, 0.01, 0.1]\n}\nlasso_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, n_jobs=-1, scoring='neg_root_mean_squared_error')\nlasso_grid.fit(X_train, y_train)\ntrain_score = lasso_grid.score(X_train, y_train)","f165d725":"results = pd.DataFrame(lasso_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_lasso__alpha\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","2f4cc1c7":"coefs = pd.Series(lasso_grid.best_estimator_[\"lasso\"].coef_, index = X_train.columns)\nprint(f\"Lasso picked {sum(coefs != 0)}\/{len(coefs)} ({sum(coefs != 0)\/len(coefs)}) features.\")\nplt.figure(figsize=(16, 16))\ncoefs[coefs != 0].sort_values().plot(kind = \"barh\")","64ab1403":"MODEL_2 = lasso_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {lasso_grid.best_score_:.5f}\")\n# -0.11735 \/ -0.12628","92b5e87a":"prediction_2 = MODEL_2.predict(X_test)\nprediction_2 = np.e ** prediction_2\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_2})\nsubmit.to_csv(\"MODEL_2.csv\",index=False)","61ceef14":"model = ElasticNet(max_iter=100000)\npipe = Pipeline([(\"scaler\", MinMaxScaler()), (\"elastic\", model)])\nparams = {\n    'elastic__alpha': [0.0001, 0.001, 0.01, 0.1],\n    'elastic__l1_ratio': [0.001, 0.01, 0.1, 0.5, 1, 10]\n}\nelastic_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, n_jobs=-1, scoring='neg_root_mean_squared_error')\nelastic_grid.fit(X_train, y_train)\ntrain_score = elastic_grid.score(X_train, y_train)","59cce915":"results = pd.DataFrame(elastic_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_elastic__alpha\", columns=\"param_elastic__l1_ratio\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","d9302689":"MODEL_3 = elastic_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {elastic_grid.best_score_:.5f}\")\n# 0.11203 \/ -0.12462","89e7b3e8":"prediction_3 = MODEL_3.predict(X_test)\nprediction_3 = np.e ** prediction_3\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_3})\nsubmit.to_csv(\"MODEL_3.csv\",index=False)","c82f94ef":"model = SVR()\npipe = Pipeline([(\"scaler\", StandardScaler()), (\"select\", SelectPercentile(score_func=f_regression)), (\"svr\", model)])\nparams = {\n    'svr__C': [0.01, 0.1, 1, 10, 1000],\n    'svr__epsilon': [0.0001, 0.001, 0.01, 0.1],\n    'select__percentile': [10, 20, 25, 27, 28, 29, 30, 50, 100]\n}\nsvr_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, n_jobs=-1, scoring='neg_root_mean_squared_error')\nsvr_grid.fit(X_train, y_train)\ntrain_score = elastic_grid.score(X_train, y_train)","4cb08d09":"results = pd.DataFrame(svr_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_svr__epsilon\", columns=\"param_svr__C\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","f8c859f3":"results = pd.DataFrame(svr_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_select__percentile\", columns=\"param_svr__C\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","dd069b98":"MODEL_4 = svr_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {svr_grid.best_score_:.5f}\")\n# -0.11203 \/ -0.14142","c67b16a3":"prediction_4 = MODEL_4.predict(X_test)\nprediction_4 = np.e ** prediction_4\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_4})\nsubmit.to_csv(\"MODEL_4.csv\",index=False)","f31b0f33":"model = catboost.CatBoostRegressor(random_seed=random_state, verbose=False)\npipe = Pipeline([(\"catboost\", model)])\nparams = {\n    'catboost__learning_rate':[0.01, 0.1, 0.2],\n    'catboost__depth': [5, 6]\n}\ncatboost_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, scoring='neg_root_mean_squared_error')\ncatboost_grid.fit(X_train, y_train)\ntrain_score = catboost_grid.score(X_train, y_train)","465ab573":"results = pd.DataFrame(catboost_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_catboost__learning_rate\", columns=\"param_catboost__depth\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","a11a8213":"importances = catboost_grid.best_estimator_['catboost'].get_feature_importance()\nimportances = pd.DataFrame(importances, columns=[\"importance\"]).sort_values(\"importance\", ascending=False)\nimportances[\"feature\"] = X_train.columns \nplt.figure(figsize=(16, 16))\nsns.barplot(data=importances[:50], x=\"importance\", y=\"feature\")","42799476":"MODEL_5 = catboost_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {catboost_grid.best_score_:.5f}\")\n# -0.01664 \/ -0.12258","01a4c02f":"prediction_5 = MODEL_5.predict(X_test)\nprediction_5 = np.e ** prediction_5\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_5})\nsubmit.to_csv(\"MODEL_5.csv\",index=False)","fb46b13a":"model = XGBRegressor(n_estimators=1000)\npipe = Pipeline([(\"xgb\", model)])\nparams = {\n    'xgb__learning_rate': [.01, .02, .03, .05, .07],\n    'xgb__max_depth': [3, 4, 5]\n}\nxgb_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, scoring='neg_root_mean_squared_error')\nxgb_grid.fit(X_train, y_train)\ntrain_score = xgb_grid.score(X_train, y_train)","2c37be20":"results = pd.DataFrame(xgb_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_xgb__learning_rate\", columns=\"param_xgb__max_depth\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","7bfe2487":"MODEL_6 = xgb_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {xgb_grid.best_score_:.5f}\")\n# -0.05568 \/ -0.12757","b4b51f92":"prediction_6 = MODEL_6.predict(X_test)\nprediction_6 = np.e ** prediction_6\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_6})\nsubmit.to_csv(\"MODEL_6.csv\",index=False)","e3abbfe2":"model = lgb.LGBMRegressor(n_estimators=1000)\npipe = Pipeline([(\"lgb\", model)])\nparams = {\n    'lgb__num_leaves': [2, 3, 4, 5],\n    'lgb__max_depth': [3, 4, 5]\n}\nlgb_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=1, scoring='neg_root_mean_squared_error')\nlgb_grid.fit(X_train, y_train)\ntrain_score = lgb_grid.score(X_train, y_train)","e1c918c1":"results = pd.DataFrame(lgb_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_lgb__num_leaves\", columns=\"param_lgb__max_depth\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","07a0b779":"MODEL_7 = lgb_grid.best_estimator_\nprint(f\"Model CV score is {train_score:.5f} \/ {lgb_grid.best_score_:.5f}\")\n# -0.10905 \/ -0.12895","d11202ca":"prediction_7 = MODEL_7.predict(X_test)\nprediction_7 = np.e ** prediction_7\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction_7})\nsubmit.to_csv(\"MODEL_7.csv\",index=False)","21deb312":"sns.heatmap(np.corrcoef([prediction_0, prediction_1, prediction_2, prediction_3, prediction_4, prediction_5, prediction_6, prediction_7]), annot=True)","a585d84b":"prediction = np.mean([prediction_1, prediction_2, prediction_5, prediction_6, prediction_7], axis=0)\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction})\nsubmit.to_csv(\"MODEL_8.csv\",index=False)","a8ead6e5":"prediction = np.mean([prediction_2, prediction_3, prediction_5, prediction_6, prediction_7], axis=0)\nsubmit = pd.DataFrame({\"Id\": data_test.index,\"SalePrice\": prediction})\nsubmit.to_csv(\"MODEL_9.csv\",index=False)","95825aca":"# 7. LGB","5aec8e52":"**CentralAir**","e5d696af":"**PoolArea**","dfe91538":"**ExterQual**","4af2e779":"**BsmtFinType1 & BsmtFinType2**","61854678":"**HeatingQC**","95818752":"**SALE PRICE**","c9e34e93":"**RoofStyle**","406fa882":"**LotFrontage & LotArea & LotGeometry**","d0cd20d7":"# 4. SVR","1a1c643a":"**PavedDrive**","5622925b":"**ScreenPorch**","74a192e8":"# Manual Average Stacking","41265193":"**MSSubClass**","a3b7235c":"**GarageYrBlt**","c80fbbff":"**BsmtFinSF1**","f4228c52":"# 2. LASSO","37c50f0d":"**TotalBsmtSF**","51401b03":"# 3. ElasticNet","5d88a287":"**FireplaceQu**","bbf52803":"**KitchenAbvGr**","cd1a1306":"**OverallQual**","230ae4c1":"**YrSold**","4c25115e":"**MasVnrType**","ab106e19":"**OpenPorchSF**","12dcb77c":"**ExterCond**","446c91a3":"**GarageFinish**","ad703b31":"**WoodDeckSF**","f89a977c":"**KitchenQual**","9206c838":"**3SsnPorch**","21bac1cc":"**LowQualFinSF**","6ba652be":"**LotShape**","b01a858d":"**Add TotalSF**","eb335d07":"# 6. XGBoost","55c20152":"**LandContour & LandSlope & LandTopology**","2ed21523":"**BsmtQual**","682a4597":"**Street**","6580f536":"**BsmtFullBath & BsmtHalfBath**","36900997":"**BedroomAbvGr**","de31253c":"# MODELS","3f8ef313":"# 5. CATBOOST","959cb445":"**PoolQC**","b9620ac0":"**MiscVal**","fd5ec540":"**GarageCond**","bdbc590a":"**BsmtExposure**","fe305af0":"**EnclosedPorch**","2dd32f6e":"**MiscFeature**","9b1aad73":"**Exterior1st & Exterior2nd**","4dfb3694":"**MSZoning**","44c51100":"**BsmtFinSF2**","bce05972":"**Condition1 & Condition2**","4840b037":"**SaleCondition**","a3c7a0f0":"**Functional**","a02c38b5":"**1stFlrSF**","f7b8b5b1":"# 1. RIDGE","b7546bb5":"**FullBath & HalfBath**","48e25431":"**Neighborhood**","35634d7e":"**BsmtUnfSF**","7db51f75":"**Heating**","dda5714c":"**Alley**","0caf54ea":"**BldgType** ","13bedeae":"**MoSold**","d952f47e":"**Fence**","a8e37234":"**LotConfig**","303a6ba9":"**Fireplaces**","92dd5566":"**GarageArea**","74d51623":"**BsmtCond**","87d8cda7":"**OverallCond**","dafaef4d":"# 0. KNN","65e3e636":"**SaleType**","ee48f37c":"**RoofMatl**","0eec3194":"**Electrical**","460f4864":"**YearBuilt & YearRemodAdd & YearsLastRemod**","2f587aa3":"**MasVnrArea**","d11ab24f":"**Foundation**","00adae21":"**GrLivArea**","0be50800":"# ANALYSE FEATURES","bb53f45c":"**GarageType**","ac44eacc":"**GarageQual**","16539455":"**GarageCars**","0b79707f":"# Data review","bc7a7cb1":"**2ndFlrSF**","4fda09e0":"**TotRmsAbvGrd**","29733850":"**HouseStyle**","f6cd7cae":"**Utilities**"}}