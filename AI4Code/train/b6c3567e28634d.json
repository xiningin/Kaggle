{"cell_type":{"8a1fd964":"code","cabf5e78":"code","73332366":"code","a2f60959":"code","2ab6fc8f":"code","23cb6c36":"code","d13382cb":"code","ffaf197d":"code","b67c6b04":"code","162cfcba":"code","9a77d334":"code","4480d22b":"code","ceff4baa":"markdown"},"source":{"8a1fd964":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cabf5e78":"df = pd.read_csv('\/kaggle\/input\/sentiment140\/training.1600000.processed.noemoticon.csv', encoding='ISO-8859-1', header=None)\ndfn = pd.read_csv('\/kaggle\/input\/sanders\/full-corpus.csv', header=None)","73332366":"label_text = df.iloc[:, [5, 0]]\nlabel_text[0] = label_text[0].apply(lambda x: int(x \/ 2))\nlabel_text[5] = label_text[5].apply(lambda x: x.strip())\nlabel_text = label_text.drop_duplicates(subset=5, keep='first')\n\n# col_list = list(label_text)\n# col_list[0], col_list[1] = col_list[1], col_list[0]\n# label_text.columns = col_list","a2f60959":"label_text.info","2ab6fc8f":"pos = label_text[label_text[0] == 2][:3833]\nneg = label_text[label_text[0] == 0][:3833]\npos.columns= ['text', 'label']\nneg.columns= ['text', 'label']\npos.head()\n# label_text_10k = pd.concat([pos, neg])\n# label_text_10k.info","23cb6c36":"from os import listdir\nfrom os.path import isfile, join\nmypath = '\/kaggle\/'\n\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\nprint(onlyfiles)","d13382cb":"label_text_n = dfn.iloc[:, [4, 1]]\nlabel_text_n[1] = label_text_n[1].apply(lambda x: 2 if x == 'positive' else (1 if x == 'neutral' else (0 if x == 'negative' else 3)) )\nlabel_text_n[4] = label_text_n[4].apply(lambda x: x.strip())\nlabel_text_n = label_text_n.drop_duplicates(subset=4, keep='first')","ffaf197d":"label_text_n.info","b67c6b04":"neutral = label_text_n[label_text_n[1] == 1]\nneutral.columns= ['text', 'label']\nneutral.info","162cfcba":"label_text_10k_3classes = pd.concat([pos, neg, neutral])","9a77d334":"label_text_10k_3classes[label_text_10k_3classes['label'] == 1].info","4480d22b":"label_text_10k_3classes.to_csv('\/kaggle\/working\/label_text_10k_3classes.csv', index=False, encoding='utf-8', header=False)","ceff4baa":"****Getting neruatral data****"}}