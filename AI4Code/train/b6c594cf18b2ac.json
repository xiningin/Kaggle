{"cell_type":{"3745e120":"code","a01e9541":"code","aac3d0b1":"code","85899e14":"code","7f6084df":"code","9509a33c":"code","80b01afb":"code","e6c9f084":"code","5629a8c5":"code","f14ccd02":"code","4ac63ba7":"code","b87d0f25":"code","fd3f1224":"code","78fa4eb8":"code","263a57d9":"code","d6faf5dc":"code","31a609c6":"code","c6079e7e":"code","333be7f2":"code","a9016535":"code","bc0ebba1":"code","9aee1466":"code","0d4fe4cd":"code","5e372c56":"code","4b726cd2":"code","13fe90df":"code","d12d4b7d":"code","b034292c":"code","083f621f":"code","0e3ced7a":"code","24b6ae1d":"code","aebf81b1":"code","00744ef1":"code","141f2955":"code","9c63b66b":"code","502c0f65":"code","ff49425e":"markdown","7ec905d6":"markdown"},"source":{"3745e120":"import sys #access to system parameters https:\/\/docs.python.org\/3\/library\/sys.html\nprint(\"Python version: {}\". format(sys.version))\nimport numpy as np # linear algebra\nprint(\"NumPy version: {}\". format(np.__version__))\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nprint(\"pandas version: {}\". format(pd.__version__))\nimport matplotlib # collection of functions for scientific and publication-ready visualization\nprint(\"matplotlib version: {}\". format(matplotlib.__version__))\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings # ignore warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a01e9541":"path = '..\/input\/imdb-dataset-of-top-1000-movies-and-tv-shows\/imdb_top_1000.csv'\ndf = pd.read_csv(path, delimiter=',')\ndf.shape","aac3d0b1":"df.head(3)","85899e14":"df.columns","7f6084df":"df.drop('Star1', axis =1, inplace = True)\ndf.drop('Star2', axis =1, inplace = True)\ndf.drop('Star3', axis =1, inplace = True)\ndf.drop('Star4', axis =1, inplace = True)","9509a33c":"df.describe()","80b01afb":"df.isna().sum() # missing values","e6c9f084":"mode = df[\"Certificate\"].mode()\nmode","5629a8c5":"df['Certificate'].fillna(df['Certificate'].mode()[0], inplace=True)\ndf.isna().sum() # missing values","f14ccd02":"df['Meta_score'].fillna(10*df['IMDB_Rating'], inplace=True)\ndf.isna().sum() # missing values","4ac63ba7":"df.dropna(subset=['Gross'], how='all', inplace=True)\ndf.shape","b87d0f25":"df.isna().sum() # missing values","fd3f1224":"# outliers using boxplot\ndf.describe()","78fa4eb8":"df['Released_Year'].unique()","263a57d9":"df = df.drop(df[df['Released_Year'] == 'PG'].index)\ndf['Released_Year'].unique()","d6faf5dc":"df['IMDB_Rating'].unique()","31a609c6":"df['Genre'].unique()","c6079e7e":"df.dtypes","333be7f2":"df.drop('Poster_Link',axis=1,inplace=True)\ndf.drop('Series_Title',axis=1,inplace=True)\ndf.drop('Overview',axis=1,inplace=True)","a9016535":"df['Released_Year'] = df['Released_Year'].astype(int)\ndf = df.astype({\"Runtime\": str})\ndf['Runtime']=df['Runtime'].str.replace(' min','') # Runtime = 142 min\ndf = df.astype({\"Runtime\": int})\ndf = df.astype({\"Gross\": str})\ndf['Gross']=df['Gross'].str.replace(',','')\ndf[\"Gross\"] = df[\"Gross\"].apply(pd.to_numeric) # convert gross to numeric\n# df = df.astype({\"Gross\": int})\n# df = df.apply(pd.to_numeric, errors='ignore')\ndf.dtypes","bc0ebba1":"# distribution\nax = sns.distplot(df['Gross']) # histogram distribution","9aee1466":"# distribution\nax = sns.distplot(df['Meta_score']) # histogram distribution","0d4fe4cd":"# distribution\nax = sns.distplot(df['IMDB_Rating']) # histogram distribution","5e372c56":"obj=['Certificate','Genre','Director']","4b726cd2":"cols_to_std = ['Runtime','Released_Year','IMDB_Rating','Meta_score','No_of_Votes'] # Meta_score or Gross?","13fe90df":"target = df['Gross'] # Meta_score or Gross?","d12d4b7d":"# Creating dummy variables\ndummies = pd.get_dummies(df[obj],drop_first=True)\ndf_dummies = pd.concat([df[cols_to_std],dummies],axis=1)\ndf_dummies.dtypes","b034292c":"df_dummies.head(3)","083f621f":"df.columns","0e3ced7a":"df.drop('Certificate',axis=1,inplace=True)\ndf.drop('Runtime',axis=1,inplace=True)\ndf.drop('Genre',axis=1,inplace=True)\ndf.drop('Director',axis=1,inplace=True)\ndf.drop('No_of_Votes',axis=1,inplace=True)","24b6ae1d":"df.columns","aebf81b1":"top = 15\ncorr = df.corr()\ntop15 = corr.nlargest(top, 'Gross')['Gross'].index\ncorr_top15 = df[top15].corr()\nf,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(corr_top15, square=True, ax=ax, annot=True, cmap='coolwarm', fmt='.2f', annot_kws={'size':12})\nplt.title('Top correlated features of dataset', size=16)\nplt.show()","00744ef1":"# Splitting data into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df,target,test_size=0.20) # df_dummies","141f2955":"# Standardizing the data\ncols_to_std = ['Released_Year','IMDB_Rating','Meta_score'] # Meta_score or Gross?\nfrom sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(X_train[cols_to_std])\nX_train[cols_to_std] = scaler.transform(X_train[cols_to_std])\nX_test[cols_to_std] = scaler.transform(X_test[cols_to_std])","9c63b66b":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\nY_pred = model.predict(X_test)\nscore = model.score(X_train, y_train)\nprint('Training Score:', score)\nscore = model.score(X_test, y_test)\nprint('Testing Score:', score)\noutput = pd.DataFrame({'Predicted':Y_pred})","502c0f65":"output.head(3)","ff49425e":"Top 1000 Movies by IMDB Rating [data](https:\/\/www.kaggle.com\/harshitshankhdhar\/imdb-dataset-of-top-1000-movies-and-tv-shows)\n\n- PosterLink: Link of the poster that imdb using\n- SeriesTitle: Name of the movie \n- ReleasedYear: Year at which that movie released\n- Certificate: Certificate earned by that movie\n- Runtime: Total runtime of the movie\n- Genre: Genre of the movie\n- IMDB Rating: Rating of the movie at IMDB site\n- Overview: mini story\/ summary\n- Meta_score: Score earned by the movie\n- Director: Name of the Director\n- Star1,Star2,Star3,Star4: Name of the Stars\n- No of votes: Total number of votes\n- Gross: Money earned by that movie","7ec905d6":"score is 99%"}}