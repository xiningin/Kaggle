{"cell_type":{"ee686e6f":"code","1f03f87f":"code","f9c41d50":"code","ed264cee":"code","7e2a4f4b":"code","ccef068a":"code","5b129ff1":"code","4be93e92":"markdown","d75e06ea":"markdown","37cbf89a":"markdown","6f6fe89d":"markdown"},"source":{"ee686e6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1f03f87f":"# Dataset Paths\ntrain_path = '..\/input\/train_images\/'\ntest_path = '..\/input\/test_images\/'\n\n# Loading train dataset\ntrain = pd.read_csv(\"..\/input\/train.csv\")","f9c41d50":"# Removing NaN values\ntrain = train[pd.notnull(train['EncodedPixels'])]","ed264cee":"# ImageId column\ntrain['ImageId'] = train['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\n\n# Creating a class column based on classId\ntrain['ClassId'] = train['ImageId_ClassId'].apply(lambda x: x.split('_')[1]).astype(int)","7e2a4f4b":"def create_mask(idx, df):\n\n    # Load the encoded pixels\n    pixels = df['EncodedPixels'].iloc[idx]\n    pixels = pixels.split(\" \")\n    \n    # Get the positions\n    positions = map(int, pixels[0::2])\n    # Get the length\n    length = map(int, pixels[1::2])\n \n    # Create an empty flat array \n    mask = np.zeros(256*1600, dtype=np.uint8)\n    \n    # Set as '1' the array positions \n    for pos, le in zip(positions, length):\n        mask[pos:(pos+le)] = 1\n         \n    # Reshape from flat to image shape.\n    mask = mask.reshape(256, 1600, order='F')\n    \n    return mask","ccef068a":"def draw_mask(img, idx, df):\n    \n    # Create mask data\n    mask = create_mask(idx, df)\n\n    # Transparency factor.\n    alpha = 0.7\n    \n    # Pallete (classId:(r,g,b))\n    classId_colormap = {\n        1: (249,38,114),\n        2: (166,226,46),\n        3: (102,217,239),\n        4: (174,129,255)\n    }\n    \n    # Label color\n    classId  = df['ClassId'].iloc[idx]\n    \n    # Get the line color based on classId\n    color = classId_colormap.get(classId, (0,0,0))\n    \n    # Image copy to apply transparency.\n    overlay = img.copy()\n\n    # Get contours from mask\n    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    # Create overlay polygon\n    mask_img = cv2.fillPoly(overlay, contours, color)\n\n    # Merge image and overlay\n    final = cv2.addWeighted(mask_img, alpha, img, 1 , 0)\n\n    return final\n\n    \ndef show_image(idx):\n    \n    fig, ax = plt.subplots(figsize=(15, 15))\n    \n    imageId = train['ImageId'].iloc[idx]\n    image_path = '{}\/{}'.format(train_path, imageId)\n    \n    # Load image\n    img = cv2.imread(image_path)\n    \n    # Apply mask \n    img = draw_mask(img, idx, train)\n    \n    ax.set_title(image_path)\n    ax.imshow(img)\n    plt.show()","5b129ff1":"for idx in range(5):\n    show_image(idx)","4be93e92":"## Drawing the mask","d75e06ea":"# Creating the mask\n","37cbf89a":"## Creating extra columns\n\nLet's create two extra columns. `ImageId` and `ClassId` splitting the `ImageId_ClassId` column. This extra columns will let the code more intuitive.\n\n","6f6fe89d":"## Removing NaN rows from train dataset."}}