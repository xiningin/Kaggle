{"cell_type":{"43bdd61e":"code","68efa6a4":"code","b4c6e4d6":"code","8b778b1e":"code","6b7f40fd":"code","342d93cd":"code","9ed4b603":"code","a8374db6":"code","b9df6b5a":"code","3d9f5912":"code","2d24a38f":"code","6d0b59ed":"code","7018574b":"code","43651451":"code","c53c4668":"code","886e08f1":"code","725f8e1c":"code","122882bb":"code","3feac94c":"markdown"},"source":{"43bdd61e":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor \nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import *\nfrom sklearn import linear_model\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","68efa6a4":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","b4c6e4d6":"#extracting only numeric features\nnum_train = train.select_dtypes(include=[np.number]).interpolate().dropna()\nnum_test = test.select_dtypes(include=[np.number]).interpolate().dropna()\ny = num_train.SalePrice\nnum_train = num_train.drop(['Id', 'SalePrice'], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(num_train, y, test_size=0.2)","8b778b1e":"def model(Xtrain,Xtest,ytrain,ytest,model_name):\n model_name.fit(Xtrain, ytrain)\n y_pred = model_name.predict(Xtest)\n mse = mean_squared_error(ytest, y_pred)\n rms = sqrt(mse)\n return(rms)","6b7f40fd":"lm = LinearRegression()\nmodel(X_train, X_test, y_train,y_test,lm)","342d93cd":"est = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.05, max_depth=3, loss='ls')\nmodel(X_train, X_test, y_train,y_test,est)","9ed4b603":"xgb=XGBRegressor(learning_rate=0.1, n_estimators=1000)\nmodel(X_train, X_test, y_train,y_test,xgb)","a8374db6":"#combining train, test and dummy coding\ndataset = pd.concat(objs=[train, test], axis=0)\ntrain_objs_num = len(train)\ndataset = pd.get_dummies(dataset)\ndataset = dataset.interpolate().dropna()\ndum_train = dataset[:train_objs_num]\ndum_test = dataset[train_objs_num:] \ndum_test_final=dum_test.drop(['Id', 'SalePrice'], axis=1)\ndum_y = dum_train.SalePrice\ndum_X = dum_train.drop(['Id', 'SalePrice'], axis=1)\ndum_X_train, dum_X_test, dum_y_train, dum_y_test = train_test_split(dum_X, dum_y, test_size=0.2)","b9df6b5a":"lm = LinearRegression()\nmodel(dum_X_train, dum_X_test, dum_y_train,dum_y_test,lm)","3d9f5912":"est = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.05, max_depth=3, loss='ls')\nmodel(dum_X_train, dum_X_test, dum_y_train,dum_y_test,est)","2d24a38f":"xgb=XGBRegressor(learning_rate=0.1, n_estimators=1000)\nmodel(dum_X_train, dum_X_test, dum_y_train,dum_y_test,xgb)","6d0b59ed":"#using xgb with dummy coding for submission\npredicted = xgb.predict(dum_test_final)\nsubmission = pd.DataFrame({'Id': dum_test.Id,'SalePrice': predicted})\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","7018574b":"#feature elimination and taining the features\n#from sklearn.feature_selection import RFE\n#from sklearn.linear_model import LogisticRegression\n#lr =LogisticRegression(max_iter=200)\n#rfe=RFE(lr,n_features_to_select=20,step=1)\n#features=rfe.fit(dum_X,dum_y)\n#print (features.n_features_)\n#print (features.ranking_)","43651451":"features=['BedroomAbvGr', 'BsmtExposure_No', 'BsmtFullBath', 'BsmtQual_Gd', 'ExterQual_TA', 'Fireplaces', 'Foundation_CBlock', 'GarageFinish_RFn', 'GarageType_Attchd', 'HalfBath', 'HouseStyle_1Story', 'KitchenQual_TA', 'LotConfig_Inside', 'LotShape_Reg', 'MasVnrType_None', 'OverallCond', 'OverallQual', 'RoofStyle_Gable', 'SaleCondition_Normal', 'TotRmsAbvGrd']   ","c53c4668":"fea_X_train, fea_X_test, fea_y_train, fea_y_test = train_test_split(dum_X[features], dum_y, test_size=0.2)","886e08f1":"lm = LinearRegression()\nmodel(fea_X_train, fea_X_test, fea_y_train, fea_y_test,lm)","725f8e1c":"est = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.05, max_depth=3, loss='ls')\nmodel(fea_X_train, fea_X_test, fea_y_train, fea_y_test,est)","122882bb":"xgb = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.05, max_depth=3, loss='ls')\nmodel(fea_X_train, fea_X_test, fea_y_train, fea_y_test,xgb)","3feac94c":"This kernel performs below tasks.  \n\n* Load the data\n* Fill in missing values, Dummy code, Use RFE feature elimination to get top 20 features. \n* Build and compare models\n* Make submission"}}