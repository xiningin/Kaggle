{"cell_type":{"51fb11dc":"code","1bde175f":"code","27b003ab":"code","63a6aca9":"code","7569ebcd":"code","51dc78e7":"code","61f676f3":"code","8056105b":"code","ea31c4eb":"code","f56642e9":"code","b7fd2fcb":"code","3b7afd4e":"code","5ca8d558":"code","b2df150f":"code","44f4715c":"code","6eb0c053":"code","975b81eb":"markdown","c4e2b5c6":"markdown","b6030e5d":"markdown","d6d9a11f":"markdown","111d02e5":"markdown"},"source":{"51fb11dc":"# class for job, hold certification requirements, and \n# prerequisite jobs\nclass Job(object):\n    def __init__(self, name, required_certs, prereq_jobs_list):\n        self.name = name\n        self.required_certs = required_certs\n        self.prereq_jobs_list = prereq_jobs_list\n        \n    def __repr__(self):\n        return '{}'.format(self.name)\n        \nclass Worker(object):\n    def __init__(self, name, current_job_name, years_at_job, certifications):\n        self.name = name\n        self.current_job_name = current_job_name\n        self.years_at_job = years_at_job\n        self.certifications = certifications \n        \n    def __repr__(self):\n        return 'name: {}\\n job name: {}\\n years worked: {}'.format(\n            self.name, self.current_job_name, self.years_at_job)\n    ","1bde175f":"tss_name = 'Tree Surgeon Supervisor'\ntss_certs = ['pass high voltage line clearance multiple-choice written test',\n             'have \"Qualified Line Clearance Tree Trimmer\" certification',\n             'have Certified Commercial Applicators license']\ntss_prereqs = [('Tree Sergeon', 3)]\ntss = Job(tss_name,\n          tss_certs,\n          tss_prereqs)","27b003ab":"irg_spec_name = 'Irrigation Specialist'\nirg_spec_certs = []\nirg_spec_prereqs = [('Senior Gardener', 1), ('Gardener Caretaker', 2)]\nirg_spec = Job(irg_spec_name,\n               irg_spec_certs,\n               irg_spec_prereqs)","63a6aca9":"pms_name = 'Park Maintenance Supervisor'\npms_certs = []\npms_prereqs = [('Senior Gardener', 2), ('Irrigation Specialist', 2)]\npms = Job(pms_name,\n          pms_certs,\n          pms_prereqs)","7569ebcd":"spms_name = 'Senior Park Maintenance Supervisor'\nspms_certs = []\nspms_prereqs = [('Tree Surgeon Supervisor', 2), ('Park Maintenance Supervisor', 2)]\nspms = Job(spms_name,\n           spms_certs,\n           spms_prereqs)","51dc78e7":"pgms_name = 'Principal Grounds Maintenance Supervisor'\npgms_certs = []\npgms_prereqs = [('Senior Park Maintenance Supervisor', 2), ('Park Maintenance Supervisor', 4)]\npgms = Job(pgms_name,\n           pgms_certs,\n           pgms_prereqs)","61f676f3":"worker_name = 'Worker1'\ncurrent_job_name = 'Tree Sergeon'\nyears_at_job = 2.5\ncerts = ['have \"Qualified Line Clearance Tree Trimmer\" certification',\n         'have Certified Commercial Applicators license']\n\nworker1 = Worker(worker_name,\n                 current_job_name,\n                 years_at_job,\n                 certs)","8056105b":"worker_name = 'Worker2'\ncurrent_job_name = 'Tree Sergeon'\nyears_at_job = 3.5\ncerts = ['have \"Qualified Line Clearance Tree Trimmer\" certification']\n\nworker2 = Worker(worker_name,\n                 current_job_name,\n                 years_at_job,\n                 certs)","ea31c4eb":"worker_name = 'Worker3'\ncurrent_job_name = 'Tree Sergeon Supervisor'\nyears_at_job = 4\ncerts = []\n\nworker3 = Worker(worker_name,\n                 current_job_name,\n                 years_at_job,\n                 certs)","f56642e9":"worker_name = 'Worker4'\ncurrent_job_name = 'Senior Gardener'\nyears_at_job = 2\ncerts = []\n\nworker4 = Worker(worker_name,\n                 current_job_name,\n                 years_at_job,\n                 certs)","b7fd2fcb":"worker_name = 'Worker5'\ncurrent_job_name = 'Irrigation Specialist'\nyears_at_job = 2.5\ncerts = []\n\nworker5 = Worker(worker_name,\n                 current_job_name,\n                 years_at_job,\n                 certs)","3b7afd4e":"workers = [worker1, worker2, worker3, worker4, worker5]","5ca8d558":"all_jobs = [tss, irg_spec, pms, spms, pgms]","b2df150f":"# the two core functions we need to write \ndef workers_for_job(job, worker_list):\n    \"\"\"Returns all workers who hold a prerequisite position\"\"\"\n    job_prereq_names = list()\n    possible_workers = list()\n    for (job_title, year_req) in job.prereq_jobs_list:\n        job_prereq_names.append(job_title)\n        \n    for worker in worker_list:\n        if worker.current_job_name in job_prereq_names:\n            possible_workers.append(worker)\n            \n    return possible_workers\n    \n    \ndef jobs_for_worker(worker, job_list):\n    \"\"\"Returns all jobs that are next in sequence for worker\"\"\"\n    worker_job_name = worker.current_job_name\n    possible_jobs = list()\n    for job in job_list:\n        for (job_title, year_req) in job.prereq_jobs_list:\n            if worker_job_name == job_title:\n                possible_jobs.append(job)\n                \n    return possible_jobs","44f4715c":"for worker in workers:\n    results = jobs_for_worker(worker, all_jobs)\n    print('\\n\\n', worker, '\\n')\n    print(results)","6eb0c053":"for job in all_jobs:\n    results = workers_for_job(job, workers)\n    print('\\n\\n', job, '\\n')\n    print(results)","975b81eb":"**Create some example jobs**","c4e2b5c6":"**Test out the code, and model of problem**","b6030e5d":"**Put all workers and jobs into a list**","d6d9a11f":"**Create some example workers**","111d02e5":"Notebook provides a toy example of how I think this problem should be solved. This is a very simple solution. I have read the job descriptions manually and selected only one job tree to start with. There is a lot of automation and extension to this possible. It currently doesn't handle certifications or education requirements at all. For a description of the problem I think we are solving see this kernel: https:\/\/www.kaggle.com\/devinanzelmo\/exploring-problem-statement which has a copy of the problem statement that I based the following soln on. \n\n\nThis is v1 first draft, lots of work to do. Meaning this is unfinished. \n\nPlease see this pdf for diagram of this problem. \n`..\/input\/cityofla\/CityofLA\/Additional\\ data\/City\\ Job\\ Paths\/Tree_Surgeon.pdf`\n\nIf anyone wants to fork, and make this prettier please feel free. I will of course use your work in the future. "}}