{"cell_type":{"669e77e2":"code","fc9993c8":"code","a592ea02":"code","3f5051d2":"code","60a450cf":"code","95706c38":"code","05a81ec7":"code","93be87c8":"code","45890430":"code","d03967a8":"code","70ecf494":"code","46e8f06f":"code","9e8aa053":"code","b987e7c8":"code","be261703":"code","a198bcfc":"code","48b3aeee":"code","a4fa610d":"code","0c8d8878":"code","8048a023":"code","4d4a1757":"code","4c2fa72f":"code","d8c22a74":"code","4a10454b":"code","039d78a5":"code","f80be3d2":"code","9517df84":"code","aac794cf":"code","9bfa516a":"code","d190b154":"code","65491c5c":"code","edb21472":"code","db7966d9":"code","4755f3a6":"code","6567ee32":"markdown","2d8bc750":"markdown","9641aca9":"markdown","45844a0f":"markdown","9560ab49":"markdown","e42ce92d":"markdown","6405da4b":"markdown","9fb7d0be":"markdown","86e94257":"markdown","5fffe0d9":"markdown","df335282":"markdown","77f1215f":"markdown","08db3cb7":"markdown","5cecd235":"markdown","0a7eaddc":"markdown","69a71f6d":"markdown","d25fd247":"markdown","77de2533":"markdown","8b1cc26d":"markdown","0943be1a":"markdown","e8f68174":"markdown","ff39f526":"markdown","b267d5f5":"markdown","0d6c7c0f":"markdown","ca464572":"markdown","bb68b1e5":"markdown","f5e66b8e":"markdown","c803f3ab":"markdown","111736ae":"markdown","8053881b":"markdown"},"source":{"669e77e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc9993c8":"#Importing the Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport seaborn as sns\nimport re\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n    \nnp.random.seed(42)","a592ea02":"#Loading the dataset\ndata = pd.read_csv(\"..\/input\/board-games\/bgg_dataset.csv\", sep=\";\")\nprint(\"Number of datapoints:\", len(data))\ndata.head(3)","3f5051d2":"#Information on features \ndata.info()","60a450cf":"#let's explore Year Published\nprint(\"Oldest game in the data was published in:\", min(data[\"Year Published\"]))\nprint(\"Latest game in the data was published in:\", max(data[\"Year Published\"]))","95706c38":"#having a look at the NA rows\nOldest = np.where(data[\"Year Published\"]==min(data[\"Year Published\"]))\nprint(\"Oldest games in dataset\")\ndata.iloc[Oldest].style.set_properties(**{\"background-color\": \"#CABFC1\",\"color\": \"#615154\", \"border-color\": \"#615154\"})","05a81ec7":"print(\"Oldest games in dataset:\")\ndata.nsmallest(5,[\"Year Published\"]).style.set_properties(**{\"background-color\": \"#CABFC1\",\"color\": \"#615154\", \"border-color\": \"#615154\"})","93be87c8":"#Dropping NA\ndata = data[data[\"Owned Users\"].notna()]\n\n#Getting the age of game from year published for simplicity \ndata[\"Game Age\"] =  2022-data[\"Year Published\"]\n\n#A function to replace the comma with a decimal \ndef Fix_Decimal(data):\n    fixed_values=[]\n    for i in data:\n        i = i.replace(\",\",\".\")\n        fixed_values.append(i)\n    return fixed_values\n#Applying the \"Fix_decimal\" function to the features\ndata[\"Rating Average\"] =  pd.to_numeric(Fix_Decimal(data[\"Rating Average\"]))\ndata[\"Complexity Average\"] =  pd.to_numeric(Fix_Decimal(data[\"Complexity Average\"]))","45890430":"print(\"Columns with missing values:\", data.columns[data.isnull().any()])","d03967a8":"#The NA rows in Mechanics\nNAs = np.where(data[\"Mechanics\"].isna())\nprint(\"First three NA values in Mechanics:\")\ndata.iloc[NAs][:3].style.set_properties(**{\"background-color\": \"#CABFC1\",\"color\": \"#615154\", \"border-color\": \"#615154\"})","70ecf494":"#The NA rows in Domains \nNANs = np.where(data[\"Domains\"].isna())\nprint(\"First three NA values in Domains:\")\ndata.iloc[NANs][:3].style.set_properties(**{\"background-color\": \"#CABFC1\",\"color\": \"#615154\", \"border-color\": \"#615154\"})","46e8f06f":"#Replacing NA values\ndata[\"Mechanics\"] = data[\"Mechanics\"].fillna(\"Not Mentioned\")\ndata[\"Domains\"] = data[\"Domains\"].fillna(\"Basic\")","9e8aa053":"#Defining a function to clean up the text \ndef Clean(Text):\n    sms = re.sub('[^a-zA-Z], ,', ' ', str(Text)) \n    sms = sms.replace(\"\/\",\",\")\n    sms = sms.split()\n    sms = ' '.join(sms)\n    return sms\ndata[\"Mechanics\"] = data[\"Mechanics\"].apply(Clean)\ndata[\"Domains\"] = data[\"Domains\"].apply(Clean)\n\nprint(\"First three values of Mechanics after cleaning text:\")\nprint(data[\"Mechanics\"][:3], \"\\n\")\n\nprint(\"First three values of Domains after cleaning text:\")\nprint(data[\"Domains\"][:3])\n","b987e7c8":"#Dropping the redundant features\ndata = data.drop([\"ID\", \"Name\", \"Year Published\"], axis=1) \n#Setting up prefrences\nsns.set(rc={\"axes.facecolor\":\"#FCE4DE\",\"figure.facecolor\":\"#CABFC1\"})\ncmap = colors.ListedColormap([\"#615154\", \"#F7B4A7\", \"#94DDDE\", \"#DCFFF5\", \"#F0ABC1\"])\npalette = [\"#615154\", \"#F7B4A7\", \"#94DDDE\", \"#FCE4DE\", \"#DCFFF5\", \"#F0ABC1\", \"#CABFC1\"]\n#data.head(3).style.set_properties(**{\"background-color\": \"#CABFC1\",\"color\": \"#615154\", \"border-color\": \"#615154\"})","be261703":"#Creating Five stars based bins\nbins = [0, 2, 4, 6, 8, 10]\nlabels = [1,2,3,4,5]\ndata[\"Stars\"] = pd.cut(data[\"Rating Average\"], bins=bins, labels=labels)\n#Pairplot \nhue_C = [\"#615154\", \"#F7B4A7\", \"#94DDDE\", \"#F0ABC1\", \"#B46B82\"]\nsns.pairplot(data,hue= \"Stars\", palette= hue_C)","a198bcfc":"#Dropping the outliers. \ndata = data[(data[\"Max Players\"]<300)]\ndata = data[(data[\"Play Time\"]<30000)]\ndata = data[(data[\"Min Age\"]<22)]\ndata = data[(data[\"Users Rated\"]<100000)]\ndata.shape","48b3aeee":"To_plot = [\"Min Players\",\"Play Time\", \"Users Rated\",\"BGG Rank\", \"Game Age\"]\nfor i in To_plot:\n    sns.jointplot(x=data[\"Rating Average\"], y=data[i], hue=data[\"Stars\"], palette= hue_C, )\n    plt.show()","a4fa610d":"#correlation matrix\ncorrmat= data.corr()\nplt.figure(figsize=(10,10))  \nsns.heatmap(corrmat,annot=True, cmap=cmap)","0c8d8878":"#Code to get Corpus\ndef Get_Corpus(bla):\n    corpus= []\n    for i in bla:\n        item = i.split(\",\")\n        corpus += item\n    return corpus\n#Code to delete extra space\ndef space_eleminator(list):\n    vals=[]\n    for i in list:\n        m = i.lstrip()\n        vals.append(m)\n    return vals\n\nMechanics_corpus = space_eleminator(Get_Corpus(data[\"Mechanics\"]))\nDomains_corpus = space_eleminator(Get_Corpus(data[\"Domains\"]))\nprint(\"First 5 tokens in the Mechanics features:\\n\", Mechanics_corpus[:5])\nprint(\"First 5 tokens in the Domains features:\\n\", Domains_corpus[:5], \"\\n\")\n","8048a023":"#Creating a count dictionary for items in Mechanics \nMechs_dic = Counter(Mechanics_corpus)\n#Exploring the The occurence of Mechanincs \nItem_M = list(Mechs_dic.keys())\nFreq_M = list(Mechs_dic.values())\n\nprint(\"Number of unique items in Machanics:\", len(Mechs_dic))\nprint(\"Most frequently used Mechanics appeared:\", max(Freq_M), \"times\")\nprint(\"Least frequently used Mechanics appeared:\", min(Freq_M), \"time\")","4d4a1757":"plt.figure(figsize=(8,8))\nsns.scatterplot(x=Item_M, y=Freq_M, color= palette[0])\nplt.title(\"Disribution of diffrent Machanics Types Vs Counts\")\nplt.xlabel(\"Machanics Types\")\nplt.ylabel(\"Machanics Counts\")\nplt.xscale(\"linear\")\nplt.show()","4c2fa72f":"print(\"Five most frequently used Mechanics:\")\nprint(sorted(Mechs_dic, key=Mechs_dic.get, reverse=True)[:5])","d8c22a74":"print(\"Five rarely used Mechanics:\")\nprint(sorted(Mechs_dic, key=Mechs_dic.get, reverse=True)[-6:-1])","4a10454b":"# Plotting the distribution of Mechanics types\nplt.figure(figsize=(12,5))\nsns.histplot(Mechs_dic, color=palette[0])\nplt.title(\"Frequency distribution of Machanics Types\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Machanics Types\")\nplt.show()","039d78a5":"#Creating a count dictionary for items in Mechanics \nDom_dic = Counter(Domains_corpus)\n#Exploring the The occurence of Mechanincs \nItem_D = list(Dom_dic.keys())\nFreq_D = list(Dom_dic.values())\n\nprint(\"Number of unique items in Domains:\", len(Dom_dic))\nprint(\"Most Abundant Domain:\", max(Freq_D), \"times\")\nprint(\"Most Common Domain:\", min(Freq_D), \"time\")","f80be3d2":"print(\"List of Domains: \\n\")\nItem_D","9517df84":"print(\"Five most frequently Domains:\")\nprint(sorted(Dom_dic, key=Dom_dic.get, reverse=True)[:5])","aac794cf":"print(\"Three rare Domains:\")\nprint(sorted(Dom_dic, key=Dom_dic.get, reverse=True)[-4:-1])","9bfa516a":"plt.figure(figsize=(20,5))\nsns.histplot(x=Item_D, y=Freq_D, color= palette[0])\nplt.title(\"Disribution of diffrent Domains Types and Domain Counts\")\nplt.xlabel(\"Domains Types\")\nplt.ylabel(\"Domains Counts\")\nplt.show()","d190b154":"#Creating dummy variables for Mechanics\nMechanics_df = data[\"Mechanics\"].str.get_dummies(\",\")\nMechanics_df = Mechanics_df.drop(Mechanics_df.columns[-1], axis= 1) #to avoid dummy variable trap\n#Creating dummy variables for Domains\nDomains_df = data[\"Domains\"].str.get_dummies(\",\")\nDomains_df = Domains_df.drop(Domains_df.columns[-1], axis= 1) #to avoid dummy variable trap\n\n#Clearing up the extra space in the column names (optional)\nDFs = [Mechanics_df, Domains_df]\nfor i in DFs:\n    i.columns= [col.strip() for col in i.columns]","65491c5c":"data = data.drop([\"Mechanics\", \"Domains\", \"Stars\"], axis=1) #Stars is basically ratings \ndata = pd.concat([data,Mechanics_df ,Domains_df],axis= 1)\ndata.head()","edb21472":"# Assigning the featurs as X and trarget as y\nX= data.drop([\"Rating Average\"],axis =1)\ny= data[\"Rating Average\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.25, random_state=7)","db7966d9":"#Building piplines for model selection\n\npipeline_lr=Pipeline([(\"scalar1\",StandardScaler()),\n                      (\"pca1\",PCA(n_components=50)),\n                      (\"LR\",LinearRegression())])\n\npipeline_dt=Pipeline([(\"scalar2\",StandardScaler()),\n                      (\"pca2\",PCA(n_components=50)),\n                      (\"DT\",DecisionTreeRegressor())])\n\npipeline_rf=Pipeline([(\"scalar3\",StandardScaler()),\n                      (\"pca3\",PCA(n_components=50)),\n                      (\"RF\",RandomForestRegressor())])\n\npipeline_knn=Pipeline([(\"scalar4\",StandardScaler()),\n                       (\"pca4\",PCA(n_components=50)),\n                       (\"KN\",KNeighborsRegressor())])\n\npipeline_xgb=Pipeline([(\"scalar5\",StandardScaler()),\n                       (\"pca4\",PCA(n_components=50)),\n                       (\"XGB\",XGBRegressor())])\n\n#List of all the pipelines\npipelines = [pipeline_lr, pipeline_dt, pipeline_rf, pipeline_knn, pipeline_xgb]\n\n# Dictionary of pipelines and model types for ease of reference\npipe_dict = {0: \"LinearRegression\", 1: \"DecisionTree\", 2: \"RandomForest\",3: \"KNeighbors\", 4: \"XGBRegressor\"}\n\n\n# Fit the pipelines\nfor pipe in pipelines:\n    pipe.fit(X_train, y_train)\n\n#Getting CV scores    \ncv_results_rms = []\nfor i, model in enumerate(pipelines):\n    cv_score = cross_val_score(model, X_train,y_train,scoring=\"neg_root_mean_squared_error\", cv=10)\n    cv_results_rms.append(cv_score)\n    print(\"%s: %f \" % (pipe_dict[i], cv_score.mean()))","4755f3a6":"# Model prediction on test data\npred = pipeline_rf.predict(X_test)\n# Model Evaluation\nr2 = metrics.r2_score(y_test, pred)\nAdjusted_r2 = 1 - (1-metrics.r2_score(y_test, pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1)\nmae = metrics.mean_absolute_error(y_test, pred)\nmse = metrics.mean_squared_error(y_test, pred)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, pred))\n\n# initialise data of lists.\nResultData = [[r2],[Adjusted_r2],[mae],[mse],[rmse]]\n# Creates pandas DataFrame.\nResults = pd.DataFrame(ResultData,columns= [\"Scores\"] ,index = [\"R-Squared\",\"Adjusted R-Squared\", \"Mean Absolute Error\",\"Mean Square Error\",\"Root Mean Square Error\"])\nResults.style.background_gradient(cmap=cmap)","6567ee32":"<a id=\"7\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">EVALUATING MODELS<\/p>\n\nAs established above, the winner is Random Forest. So now I get the results for the test set to evaluate the model and conclude this notebook. \n\n**Getting Predictions on the test set**","2d8bc750":"<p style=\"background-color:#CABFC1;font-family:newtimeroman;font-size:120%;text-align:left;\"> \ud83d\udccc**Oldest Game In The Dataset Is Senet:** Senet is a board game from ancient Egypt. The earliest representation of senet is dated to 2620 BCE from the Mastaba of Hesy-Re, while similar boards and hieroglyphic signs are found even earlier.<\/p>\n\n**Finding are some other old games**","9641aca9":"<img src=\"https:\/\/github.com\/KarnikaKapoor\/Files\/blob\/main\/BoardGames2.png?raw=true\">\n\n\n<a id=\"3\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">DATA CLEANING<\/p>\n\n**In this section, I will be performing:** \n* Data Cleaning\n* Feature Engineering ","45844a0f":"<p style=\"background-color:#CABFC1;font-family:newtimeroman;font-size:120%;text-align:left;\"> \ud83d\udcccSome Takeaways<\/p>\n\n* The best-rated games (with 8+ ratings) need five or fewer min players. \n* Ratings have a correlation with Playtime as expected. People give a good rating of the game they like to play. \n* In general people care to vote if they like a game and don't bother voting if they don't like it. \n* BGG Rankings are in accordance with the Average ratings.  \n\nUp next I will plot the classic correlation matrix with a few significant columns. \n\n*Note: we still have some columns in object dtype that we will be exploring ahead*","9560ab49":"**The oldest game is quite old! I must see what game is it.** ","e42ce92d":"Now let's have a closer look at the data","6405da4b":"# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">BOARD GAMES ANALYSIS<\/p>\n\n<img src=\"https:\/\/github.com\/KarnikaKapoor\/Files\/blob\/main\/BoardGames1.gif?raw=true\">\n\n\n<p style=\"font-family:newtimeroman;color:#615154;font-size:150%;text-align:left;border-radius:40px 40px;\">In this project, I will be performing a supervised prediction of Average Ratings on the board games data from the BoardGameGeek database. As the Average Rating comprises continuous values, I will be using the regression model.  I will employ a pipeline to find the best-fitted model. \nI will then draw predictions on the test set using the best model.<\/p>\n\n\n   <a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">TABLE OF CONTENTS<\/p>   \n    \n* [1. IMPORTING LIBRARIES](#1)\n    \n* [2. LOADING DATA](#2)\n    \n* [3. DATA CLEANING](#3)\n    \n* [4. DATA EXPLORATION](#4)   \n    \n* [5. DATA PREPROCESSING](#5) \n      \n* [6. MODEL SELECTION](#6)\n    \n* [7. EVALUATING MODELS](#7)\n \n* [8. CONCLUSION](#8)\n\n<a id=\"1\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">IMPORTING LIBRARIES<\/p>    \n","9fb7d0be":"**Exploring the Domains attribute**","86e94257":"The best model is ... Random Forest \ud83c\udfc6","5fffe0d9":"<p style=\"background-color:#CABFC1;font-family:newtimeroman;font-size:120%;text-align:left;\"> \ud83d\udcccMechanics have a total of 195 unique types.\n    \ud83d\udcccThe most frequently used Mechanics is Dice Rolling<\/p>\n","df335282":"**Some observations to be noted concerning Mechanics and Domains:**\n* It contains a list of strings of values\n* values are separated by either a \",\" or a \"\/\" \n* There could be more rare characters\n\nTo eliminate these issues I will be cleaning the text and forming a tokenized value.\n","77f1215f":"Next exploring columns that have missing values","08db3cb7":"<a id=\"8\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">CONCLUSION<\/p>\n\n<img src=\"https:\/\/github.com\/KarnikaKapoor\/Files\/blob\/main\/BoardGames3.png?raw=true\">\n\n**<span style=\"color:#615154;\"> If you liked this Notebook, please do upvote.<\/span>**\n\n**<span style=\"color:#615154;\"> If you Fork this Notebook, please do upvote.<\/span>**\n\n**<span style=\"color:#615154;\">If you have any questions, feel free to comment!<\/span>**\n\n**<span style=\"color:#615154;\"> Best Wishes!<\/span>**\n\n\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">END<\/p>","5cecd235":"**The data we will be working with here on**","0a7eaddc":"In the next cell I will:\n* Drop the NA values for Owned Users.\n* Create a new feature **Game Age** out of  **Year Published**\n* Replace the comma in the **Rating Average** and **Complexity Average** with a decimal ","69a71f6d":"Now we get to Explore the columns with the Object dtypes. \n**Mechanics** and **Domains**\n\nFirst of all, A functun to extract content out of the said features","d25fd247":"Distribution of various Domains","77de2533":"**Concatenate the dummy variables to the main dataframe**","8b1cc26d":"<a id=\"6\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">MODEL SELECTION<\/p>\n\nFor model selection, I will be building pipelines of five different regressors and select one with the best cross-validation results. \n\n**In this section:**\n\n* The model pipelines with preprocessing: (Standard Scaler and PCA)\n* Fitting the training set to the various models\n* Getting the cross-validation results \n* Picking the best regressor\n\n**Building the pipelines for and getting the various cross-validation scores**","0943be1a":"Scatter Plot for the usage of Mechanics","e8f68174":"**From the above info, it can be deduced that:**\n* Year published is not parsed as a DateTime object, but we can work with that. \n* The Rating Average and Complexity Average are saved as object data types. On further inspection, it can be concluded the decimal is misplaced as a comma. \n* There are some missing values  \n* Mechanics and Domains are object data types and need further exploration\n\n**Let us handle the \"Year Published\" feature first of all** ","ff39f526":"There are some outliers. So I have examined those up close for anomaly detection.\nAfter some inspection, I have decided to be lenient with outliers so I will put a cap only to drop off some obvious anomalies. ","b267d5f5":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">LOADING DATA<\/p>","0d6c7c0f":"As Mechanics and Domains hold text separated by a comma, for these features NA is a bit fishy so I will look at some of the NA rows. ","ca464572":"**Assigning labels and targets** ","bb68b1e5":"The data is quite clean and the new feature has been included. I will proceed to the next step. That is, exploring the data. \n\n<a id=\"4\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">DATA EXPLORATION<\/p>\n\nIn this section, \n\nExploring data for outliers\n\n\n* Exploring the Mechanics attribute\n* Exploring the Domains attribute\n\n\n**Let us start with pairplot**","f5e66b8e":"**Exploring the Mechanics attribute**","c803f3ab":"<p style=\"background-color:#CABFC1;font-family:newtimeroman;font-size:120%;text-align:left;\"> \ud83d\udcccThere are a total of eight Domains. Excluding Basic, it is indicative of NA values\n\ud83d\udcccThe most Common Domain is War Games followed by Strategy Games and Family Games<\/p>","111736ae":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:150%;text-align:center;border-radius:40px 40px;\">DATA PREPROCESSING<\/p>\n\nAt this step, I will be dealing with the object type variables Mechanics and Domains. I have decided to One Hot Encoded (OHE) these variables such that each of the individual attributes in the given cell gets its own column. \n\n**The following steps are involved:**\n* Building dummies for the said columns \n* Dropping one of the columns created to avoid dummy variable trap\n* Tiding up the column names because why not \n* Concatenating the OHE columns data frames with the main data frame\n* Assigning labels and targets \n* Lastly, splitting the test and training sets\n\n**Creating dummy variables**","8053881b":"I have decided to add new values for NA in the Mechanics and Domains \n- For Mechanics as \"Not Mentioned\"\n- for Domains as \"Basic\""}}