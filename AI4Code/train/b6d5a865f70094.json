{"cell_type":{"cf26fc8c":"code","860b09f1":"code","93ad5370":"code","89f65264":"code","1afbcc5d":"code","09250066":"code","21b72edf":"code","89c49779":"code","40a72d6b":"code","6378cf41":"code","56c621c6":"code","d551c5f0":"code","4ae421b6":"code","477bc39a":"code","4dd4be58":"code","6ebf7c6c":"code","d8315302":"code","4405227b":"code","ffd949b0":"code","6a68e159":"code","1b667c0d":"code","8160ba89":"markdown"},"source":{"cf26fc8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","860b09f1":"import keras as kr\nimport matplotlib.pyplot as plt","93ad5370":"train=pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\").values\ntest=pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv\").values","89f65264":"x_train=train[:,1:]\ny_train=train[:,0]","1afbcc5d":"x_test=test[:,1:]\ny_test=test[:,0]","09250066":"x_train.shape","21b72edf":"x_test.shape","89c49779":"y_train=kr.utils.to_categorical(y_train)\ny_test=kr.utils.to_categorical(y_test)","40a72d6b":"import matplotlib.pyplot as plt\nplt.imshow(x_train[1].reshape(28,28))\n","6378cf41":"y_train[1]","56c621c6":"y_train[1]","d551c5f0":"model=kr.models.Sequential()\nmodel.add(kr.layers.Dense(512,activation=\"sigmoid\",input_shape=(784,)))\nmodel.add(kr.layers.Dense(512,activation=\"sigmoid\"))\nmodel.add(kr.layers.Dense(512,activation=\"sigmoid\"))\nmodel.add(kr.layers.Dense(10,activation=\"softmax\"))","4ae421b6":"model.summary()","477bc39a":"model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","4dd4be58":"hist=model.fit(x_train,y_train,epochs=20,batch_size=256,validation_split=0.2,shuffle=True)","6ebf7c6c":"import matplotlib.pyplot as plt\n\nplt.plot(hist.history[\"accuracy\"],c=\"red\")\nplt.plot(hist.history[\"val_accuracy\"])\nplt.show()\nplt.plot(hist.history[\"loss\"],c=\"red\")\nplt.plot(hist.history[\"val_loss\"])\nplt.show()","d8315302":"x_train=x_train.reshape((-1,28,28,1))\n#ytrain=kr.utils.to_categorical(ytrain)\nprint(x_train.shape,y_train.shape)","4405227b":"for i in range(10):\n  plt.imshow(x_train[i].reshape(28,28),cmap=\"gray\")\n  plt.show()","ffd949b0":"model=kr.models.Sequential()\nmodel.add(kr.layers.Convolution2D(32,(3,3),activation=\"relu\",input_shape=(28,28,1)))\nmodel.add(kr.layers.Convolution2D(64,(3,3),activation=\"relu\"))\n\nmodel.add(kr.layers.Dropout(0.25))\nmodel.add(kr.layers.MaxPooling2D(2,2))\n\nmodel.add(kr.layers.Convolution2D(32,(5,5),activation=\"relu\",input_shape=(28,28,1)))\nmodel.add(kr.layers.Convolution2D(8,(5,5),activation=\"relu\"))\n\nmodel.add(kr.layers.Dropout(0.25))\n\nmodel.add(kr.layers.Flatten())\nmodel.add(kr.layers.Dense(100,activation=\"relu\"))\nmodel.add(kr.layers.Dense(10,activation=\"relu\"))\nmodel.summary()","6a68e159":"model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nhist=model.fit(x_train,y_train,epochs=40,shuffle=True,batch_size=256,validation_split=0.25)","1b667c0d":"import matplotlib.pyplot as plt\n\nplt.plot(hist.history[\"accuracy\"],c=\"red\")\nplt.plot(hist.history[\"val_accuracy\"])\nplt.show()\nplt.plot(hist.history[\"loss\"],c=\"red\")\nplt.plot(hist.history[\"val_loss\"])\nplt.show()","8160ba89":"**CNN**"}}