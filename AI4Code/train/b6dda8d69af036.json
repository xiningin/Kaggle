{"cell_type":{"7d8988e8":"code","6adfb688":"code","3087b813":"code","69c6f401":"code","4d1d7227":"code","b3a63070":"code","f9c2e1d6":"code","01f6cbea":"code","19b97f61":"code","dda32e2d":"code","1e10c89a":"code","f5c49a75":"code","9c50b650":"code","d22b6da4":"code","26d9ecb7":"code","98ae34e6":"code","bbe89ac3":"code","7b83bdb2":"code","763a15f3":"code","2ab8e715":"code","de72d3c4":"code","210cf3ca":"code","e954a3f8":"code","c54e9233":"code","8e3b9fbc":"code","74d22d8f":"code","d3eec732":"code","6b6c8fbc":"code","4c13194a":"code","18cca888":"code","f5d06fa6":"code","05be3efc":"code","bc9f5d61":"code","1ff7fd18":"code","fc235566":"code","8a227d71":"code","c8de5b1d":"code","c7112916":"markdown","7006fd12":"markdown","2d59ec26":"markdown","07223d89":"markdown","a7454004":"markdown","84eb01af":"markdown","6ea1b59d":"markdown","657aecee":"markdown","185beaa4":"markdown","754edf40":"markdown","acfc1b32":"markdown","8c1d1460":"markdown","db157b48":"markdown","183500ae":"markdown","c5708dc1":"markdown","b6a07623":"markdown","4605d4f0":"markdown","a73d8717":"markdown","ec83ae0d":"markdown","5c328072":"markdown","c001764f":"markdown","5976492d":"markdown","ff42ae29":"markdown","1842c7fe":"markdown","d26b342b":"markdown","94fdabf3":"markdown"},"source":{"7d8988e8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_rows', None)\n\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize']=10,6","6adfb688":"dataset = pd.read_excel(r'..\/input\/sku-forecasting-dataset\/data.xlsx')\ndataset.head()","3087b813":"dataset['date'] = pd.to_datetime(dataset['date'], infer_datetime_format=True)\nindexeddataset = dataset.set_index(['date'])","69c6f401":"indexeddataset.head()","4d1d7227":"df1_Cucumber = indexeddataset[indexeddataset['sku']=='Cucumber (Indian)']\ndf1_Cucumber = df1_Cucumber[['sales']]\n","b3a63070":"# Plot graph\n\nplt.figure(figsize=(8,6))\nplt.xlabel('Date')\nplt.ylabel('Sales')\nplt.plot(df1_Cucumber)\nplt.show()","f9c2e1d6":"rolmean = df1_Cucumber.rolling(window=12).mean()\nrolstd = df1_Cucumber.rolling(window=12).std()\nprint(rolmean,rolstd)","01f6cbea":"orig = plt.plot(df1_Cucumber,color='blue',label='Original')\nmean = plt.plot(rolmean,color='red',label='Rolling Mean')\nstd  = plt.plot(df1_Cucumber,color='green',label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Std Dev')\nplt.show(block=False)\nplt.show()","19b97f61":"from statsmodels.tsa.stattools import adfuller\n\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(df1_Cucumber['sales'], autolag='AIC')\n\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistics','P-Value','#Lags Used','No. of observations used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n\nprint(dfoutput)","dda32e2d":"df1_Cucumber_logscale = np.log(df1_Cucumber)\nplt.plot(df1_Cucumber_logscale)\nplt.show()","1e10c89a":"movingAverage = df1_Cucumber_logscale.rolling(window=12).mean()\nmovingSTD = df1_Cucumber_logscale.rolling(window=12).std()\nplt.plot(df1_Cucumber_logscale)\nplt.plot(movingAverage, color='red')\nplt.show()","f5c49a75":"df1_Cucumber_logscale_MinusMovingAverage = df1_Cucumber_logscale - movingAverage\ndf1_Cucumber_logscale_MinusMovingAverage.head()\n\n# Remove NaN values:\n\ndf1_Cucumber_logscale_MinusMovingAverage.dropna(inplace=True)\ndf1_Cucumber_logscale_MinusMovingAverage.head()\n","9c50b650":"from statsmodels.tsa.stattools import adfuller \ndef test_stationarity(timeseries):\n    \n    # Determing rotting statistics\n    \n    movingAverage = timeseries.rolling(window=12).mean()\n    movingSTD = timeseries.rolling(window=12).std()\n    \n    # Ptot rotting statistics:\n    \n    orig = plt.plot(timeseries, color = 'blue',label = 'Original')\n    mean = plt.plot(movingAverage, color = 'red', label = 'Rolling Mean') \n    std = plt.plot(movingSTD, color = 'black', label = 'Rolling Std') \n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block = False)\n    \n    # Perform Dickey-Fuller test:\n    \n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries['sales'], autolag = 'AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)\n","d22b6da4":"test_stationarity(df1_Cucumber_logscale_MinusMovingAverage)","26d9ecb7":"\nweightedAverage = df1_Cucumber_logscale.ewm(halflife=12, min_periods=0, adjust=True).mean()\nplt.plot(df1_Cucumber_logscale)\nplt.plot(weightedAverage, color='red')\nplt.show()","98ae34e6":"\n\ndataset_logscale_weightedAverage = df1_Cucumber_logscale - weightedAverage\ntest_stationarity(dataset_logscale_weightedAverage)","bbe89ac3":"datasetLogDiffShift = df1_Cucumber_logscale - df1_Cucumber_logscale.shift()\nplt.plot(datasetLogDiffShift)\nplt.xticks(rotation=90)\nplt.show()","7b83bdb2":"datasetLogDiffShift.dropna(inplace=True)\ntest_stationarity(datasetLogDiffShift)","763a15f3":"from statsmodels.tsa.seasonal import seasonal_decompose \n\ndecomposition = seasonal_decompose(df1_Cucumber_logscale)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal \nresidual = decomposition.resid\nplt.subplot(411)\nplt.plot(df1_Cucumber_logscale, label='Original') \nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best') \nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality') \nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals') \nplt.legend(loc='best') \nplt.tight_layout()\n\n\n","2ab8e715":"residual.head()","de72d3c4":"decomposedLogdata = residual\ndecomposedLogdata.dropna(inplace=True)","210cf3ca":"datasetLogDiffShift.head()","e954a3f8":"\n\nfrom statsmodels.tsa.stattools import acf, pacf \n\nlag_acf = acf(datasetLogDiffShift, nlags=20) \nlag_pacf = pacf(datasetLogDiffShift, nlags=20, method='ols') \n\n# Plot ACF: \n\nplt.subplot(121) \nplt.plot(lag_acf) \nplt.axhline(y=0,linestyle='--',color='gray') \nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShift)),linestyle='--',color='gray') \nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShift)),linestyle='--',color='gray') \nplt.title('Autocorrelation Function') \n            \n# Plot PACF:\n            \nplt.subplot(122) \nplt.plot(lag_pacf) \nplt.axhline(y=0,linestyle='--',color='gray') \nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShift)),linestyle='--' ,color='gray') \nplt.axhline(y=1.96\/np.sqrt(len(datasetLogDiffShift)),linestyle='--' ,color='gray') \nplt.title('Partial Autocorrelation Function') \nplt.tight_layout() \n","c54e9233":"datasetLogDiffShift.head()\n","8e3b9fbc":"from statsmodels.tsa.arima_model import ARIMA \n\n# AR MODEL \n\nmodel = ARIMA(df1_Cucumber_logscale, order=(0, 1, 2))\nresults_AR = model.fit(disp=-1)\nplt.plot(datasetLogDiffShift)\nplt.plot(results_AR.fittedvalues, color='red') \nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues-datasetLogDiffShift[\"sales\"])**2)) \n\nprint('Plotting AR model') ","74d22d8f":"\nmodel = ARIMA(df1_Cucumber_logscale, order=(0, 1, 2))\nresults_MA =  model.fit(disp=-1)\nplt.plot(datasetLogDiffShift)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_MA.fittedvalues-datasetLogDiffShift['sales'])**2))\nprint('Plotting AR model') \n","d3eec732":"model = ARIMA(df1_Cucumber_logscale, order=(0, 1, 2))\nresults_ARIMA =  model.fit(disp=-1)\nplt.plot(datasetLogDiffShift)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-datasetLogDiffShift['sales'])**2))\n","6b6c8fbc":"predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues,copy=True)\nprint(predictions_ARIMA_diff)","4c13194a":"predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()\nprint(predictions_ARIMA_diff_cumsum.head())","18cca888":"df1_Cucumber_logscale.head()","f5d06fa6":"predictions_ARIMA_log = pd.Series(df1_Cucumber_logscale['sales'], index=df1_Cucumber_logscale.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)\npredictions_ARIMA_log.head()\n","05be3efc":"predictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(df1_Cucumber)\nplt.plot(predictions_ARIMA)","bc9f5d61":"print(df1_Cucumber_logscale)\nprint(df1_Cucumber_logscale.shape)","1ff7fd18":"results_ARIMA.plot_predict(1,49)\nx  = results_ARIMA.forecast(steps=10)","fc235566":"x[1]","8a227d71":"import math","c8de5b1d":"for i in enumerate(x[0]):\n    print('Prediction Day-'+ str(i[0]+1)+' ->',end= ' ')\n    print(math.exp(i[1]))","c7112916":"<a id='4'><a>\n## Determine rolling statistics:","7006fd12":"<a id='4'><a>\n## Perform Dickey-Fuller test:","2d59ec26":"<a id='4'><a>\n## Checking Seasonal Trend:","07223d89":"<a id='4'><a>\n## Convert the cummulative sum:","a7454004":"<a id='4'><a>\n## Plot rolling statistics","84eb01af":"<a id='4'><a>\n## Parse strings to datetime type:","6ea1b59d":"<a id='4'><a>\n## Analysing SKU sale trend:","657aecee":"<a id='4'><a>\n## Calculating predicted through ARIMA model","185beaa4":"![tq.png](attachment:tq.png)","754edf40":"<a id='4'><a>\n## Log scale - weightedAverage:","acfc1b32":"<a id='4'><a>\n## Defining a function for calculating moving average and standard deviation:","8c1d1460":"<a id='4'><a>\n## Import Required Libraries","db157b48":"<a id='4'><a>\n## Forecasting Sales for next 10 days","183500ae":"<a id='4'><a>\n## Moving Average - MA Model Builing","c5708dc1":"\n- Please leave your comments, suggestion, feedback in the comments.","b6a07623":"- Since the 'p-value' is low it means that the 'Time Series' is stationary.","4605d4f0":"<a id='4'><a>\n## ARIMA Model Builing","a73d8717":"\n<h2 style='background:black; border:0; color:#5cbdb9 '><left><font size=\"5\">   What ARIMA stands for ?<\/font><\/left><h2>\n  \n![arima.png](attachment:arima.png)\n    \n<a id='8'><a>\n### - Autoregression (AR) refers to a model that shows a changing variable that regresses on its own lagged, or prior, values.\n    \n<a id='8'><a>\n### - Integrated (I) represents the differencing of raw observations to allow for the time series to become stationary,i.e., data values are replaced by the difference between the data values and the previous values.\n\n<a id='8'><a>\n### - Moving average (MA) incorporates the dependency between an observation and a residual error from a moving average model applied to lagged observations.\n    \n    \n    \n    \n<h2 style='background:black; border:0; color:#5cbdb9 '><left><font size=\"5\"> ARIMA models is an integration of:<\/font><\/left><h2>\n\n<a id='8'><a>\n### - Generalized random walk models fine-tuned to eliminate all residual autocorrelation\n<a id='8'><a>\n### - Generalized exponential smoothing models that can incorporate long-term trends and seasonality\n<a id='8'><a>\n### - Stationarized regression models that use lags of the dependent variables and\/or lags of the forecast errors as regressors\n<a id='8'><a>\n### - The most general class of forecasting models for time series that can be stationarized by transformations such as differencing i.e generating residual and logging. \n    \n    \n    \n    \n<h2 style='background:black; border:0; color:#5cbdb9 '><left><font size=\"5\"> ACF and PACF concept:<\/font><\/left><h2>\n\n <a id='8'><a>\n### - AutoCorrelation Function (ACF) is a function which gives us values of auto-correlation of any series with its lagged values. In simple terms, it describes how well the present value of the series is related with its past values.\n    \n<a id='8'><a>\n### - Partial autocorrelation function (PACF) gives the partial correlation of a stationary time series with its own lagged values, regressed the values of the time series at all shorter lags\n    \n","ec83ae0d":"<a id='4'><a>\n## Autoregression - AR Model Builing","5c328072":"\n<h2 style='background:black; border:0; color:#5cbdb9 '><center><font size=\"10\">SKU wise Forecasting<\/font><\/center><h2>\n    \n\n","c001764f":"<a id='4'><a>\n## Forecasting Trend","5976492d":"<a id='4'><a>\n## Calculated Weightd average:","ff42ae29":"<a id='4'><a>\n## Calculating the moving average:","1842c7fe":"![quantitative-sales-forecasting.png](attachment:quantitative-sales-forecasting.png)","d26b342b":"<a id='4'><a>\n## Estimating the trend:","94fdabf3":"- As critical value should be more than test statistics. So, here we cannot reject the null hypothesis and we can say that the data is not stationary.\n"}}