{"cell_type":{"7b615a92":"code","f1a959f6":"code","adbfc38c":"code","818867bb":"code","f15383ab":"code","a303d4b7":"code","5d4f429d":"code","db40523c":"code","addf592c":"code","173c83ab":"code","d720ccfe":"code","bc9625f3":"code","9bfe0e51":"code","91019213":"code","a7ccfa7f":"code","643c222e":"code","5427f335":"code","26270ff0":"code","daf109d9":"code","accb5913":"code","fec3313b":"code","a599ce0f":"code","d497720b":"code","ca43bce7":"code","9e3aac2c":"code","cd94e5a1":"code","bc5b7fdd":"code","d00f1bbb":"code","b27fdbb8":"code","a086c6b3":"code","d0c8da6c":"markdown","5c4e18c1":"markdown"},"source":{"7b615a92":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","f1a959f6":"#from fastai.imports import *\n#from fastai.structured import *\nfrom structured_py import *\nimport IPython\nimport os\nimport re\nimport math\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.tree import export_graphviz\nfrom IPython.display import display\n\n\nfrom sklearn import metrics","adbfc38c":"PATH = \"..\/input\/bluebook-for-bulldozers\/\"","818867bb":"!ls {PATH}","f15383ab":"df_raw = pd.read_csv(f'{PATH}Train.zip',compression='zip', low_memory=False, parse_dates=[\"saledate\"])","a303d4b7":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","5d4f429d":"display_all(df_raw.tail().T)","db40523c":"display_all(df_raw.describe(include='all').T)","addf592c":"df_raw.SalePrice = np.log(df_raw.SalePrice)","173c83ab":"m = RandomForestRegressor(n_jobs=-1)\n# The following code is supposed to fail due to string values in the input data\nm.fit(df_raw.drop('SalePrice', axis=1), df_raw.SalePrice)","d720ccfe":"add_datepart(df_raw, 'saledate')\ndf_raw.saleYear.head()","bc9625f3":"train_cats(df_raw)","9bfe0e51":"df_raw.UsageBand.cat.categories","91019213":"display_all(df_raw.isnull().sum().sort_index()\/len(df_raw))","a7ccfa7f":"os.makedirs('tmp', exist_ok=True)\ndf_raw.to_feather('tmp\/bulldozers-raw')","643c222e":"df_raw = pd.read_feather('tmp\/bulldozers-raw')","5427f335":"df, y, nas = proc_df(df_raw, 'SalePrice')","26270ff0":"m = RandomForestRegressor(n_jobs=-1)\nm.fit(df, y)\nm.score(df,y)","daf109d9":"def split_vals(a,n): return a[:n].copy(), a[n:].copy()\n\nn_valid = 12000  # same as Kaggle's test set size\nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(df_raw, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","accb5913":"def rmse(x,y): return math.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","fec3313b":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)","a599ce0f":"df_trn, y_trn, nas = proc_df(df_raw, 'SalePrice', subset=30000, na_dict=nas)\nX_train, _ = split_vals(df_trn, 20000)\ny_train, _ = split_vals(y_trn, 20000)","d497720b":"m = RandomForestRegressor(n_jobs=-1)\n%time m.fit(X_train, y_train)\nprint_score(m)","ca43bce7":"m = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","9e3aac2c":"draw_tree(m.estimators_[0], df_trn, precision=3)","cd94e5a1":"m = RandomForestRegressor(n_estimators=1, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","bc5b7fdd":"m = RandomForestRegressor(n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","d00f1bbb":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\npreds[:,0], np.mean(preds[:,0]), y_valid[0]","b27fdbb8":"preds.shape","a086c6b3":"plt.plot([metrics.r2_score(y_valid, np.mean(preds[:i+1], axis=0)) for i in range(10)]);","d0c8da6c":"Deal with this:\n`\/tmp\/ipykernel_9473\/354934200.py:1: FutureWarning: Treating datetime data as categorical rather than numeric in `.describe` is deprecated and will be removed in a future version of pandas. Specify `datetime_is_numeric=True` to silence this warning and adopt the future behavior now.\n  display_all(df_raw.describe(include='all').T)`","5c4e18c1":"Note: deal with this warning:\n\n\/tmp\/ipykernel_9473\/3557314005.py:39: FutureWarning: Series.dt.weekofyear and Series.dt.week have been deprecated.  Please use Series.dt.isocalendar().week instead.\n  for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower())"}}