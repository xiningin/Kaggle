{"cell_type":{"5dfbab29":"code","2423ac0d":"code","9b3f9738":"code","e35a732a":"code","0ebfa087":"code","68074857":"code","ab73b06e":"code","0819e3bb":"code","8eb1658a":"code","cb2e4428":"code","d7279772":"code","969106ee":"code","fa242a3d":"code","5176458a":"code","b350ea75":"code","d9267271":"code","c9fc52e9":"code","4e0e8d08":"code","2853aaf4":"code","b22d2d51":"code","d7f5a028":"code","53cbce3a":"code","685a9d1d":"code","1e57a0bc":"code","8186f981":"code","fcfcb50b":"code","b04e1ba3":"code","49cac09f":"code","8d7cb4dd":"code","c7661b04":"code","3edb92f7":"code","e82caa08":"code","2af32b4a":"markdown","16a6114e":"markdown","ab02f69b":"markdown","d28f537a":"markdown","f10b15d6":"markdown","43bde22d":"markdown","7fb807b3":"markdown"},"source":{"5dfbab29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport time\nimport datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2423ac0d":"#Import the dataset\ncovid = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')","9b3f9738":"covid.info()","e35a732a":"print ('Last Updated: ' + str(covid.ObservationDate.max()))","0ebfa087":"import plotly.express as px\nchoro_map=px.choropleth(covid, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","68074857":"covid[[\"Confirmed\",\"Deaths\",\"Recovered\"]] =covid[[\"Confirmed\",\"Deaths\",\"Recovered\"]].astype(int)","ab73b06e":"# Convert 'Last Update' & 'ObservationDate' column to datetime object\ncovid['Last Update'] = covid['Last Update'].apply(pd.to_datetime)\ncovid['ObservationDate'] =covid['ObservationDate'].apply(pd.to_datetime)","0819e3bb":"# Also drop the 'SNo' and the 'Province\/State' columns\ncovid.drop(['SNo'], axis=1, inplace=True)\ncovid.drop(['Province\/State'], axis = 1, inplace =True)","8eb1658a":"# Lets rename the columns \ncovid.rename(columns={'Last Update': 'LastUpdate','Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)","cb2e4428":"covid['Active_case'] = covid['Confirmed'] - covid['Deaths'] - covid['Recovered']\ncovid.head()","d7279772":"# Group dataset by 'Date' with sum parameter and analyse the 'Confirmed','Deaths' values.\ncases = covid.groupby('Date').sum()[['Confirmed', 'Recovered', 'Deaths']]\nsns.set(style = 'whitegrid')\ncases.plot(kind='line', figsize = (15,7) , marker='o',linewidth=2)\nplt.bar(cases.index, cases['Confirmed'],alpha=0.3,color='g')\nplt.xlabel('Days', fontsize=15)\nplt.ylabel('Number of cases', fontsize=15)\nplt.title('Worldwide Covid-19 cases - Confirmed, Recovered & Deaths',fontsize=20)\nplt.legend()\nplt.show()","969106ee":"df_India = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')","fa242a3d":"df_India.head()","5176458a":"df_age = pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')","b350ea75":"plt.figure(figsize = (12,10))\nsns.barplot(data = df_age, x = 'AgeGroup', y = 'TotalCases', color = 'red')\nplt.title('Distribution of age in India')\nplt.xlabel('Age Group')\nplt.ylabel('Total Cases')\nplt.show()","d9267271":"df_India['Date'] = pd.to_datetime(df_India['Date'],dayfirst=True)\ndf_India.at[1431,'Deaths']=119\ndf_India.at[1431,'State\/UnionTerritory']='Madhya Pradesh'\ndf_India['Deaths']=df_India['Deaths'].astype(int)\ndf=df_India.groupby('Date').sum()\ndf.reset_index(inplace=True)","c9fc52e9":"plt.figure(figsize= (12,8))\nplt.xticks(rotation = 100 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\nax1 = plt.plot_date(data=df,y= 'Confirmed',x= 'Date',label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(data=df,y= 'Cured',x= 'Date',label = 'Cured',linestyle ='-',color = 'g')\nax3 = plt.plot_date(data=df,y= 'Deaths',x= 'Date',label = 'Death',linestyle ='-',color = 'r')\nplt.legend()\nplt.show()","4e0e8d08":"state_cases=df_India.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - abs((state_cases['Deaths']- state_cases['Cured']))\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Reds',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Greys',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Cure Rate (per 100)\"])","2853aaf4":"covid_India = covid [(covid['Country'] == 'India') ].reset_index(drop=True)","b22d2d51":"covid_India.info()","d7f5a028":"covid_India.head()","53cbce3a":"# Group dataset by 'Date' with sum parameter and analyse the 'Confirmed','Deaths' values.\ncases = covid_India.groupby('Date').sum()[['Confirmed', 'Recovered', 'Deaths']]\nsns.set(style = 'whitegrid')\ncases.plot(kind='line', figsize = (15,7) , marker='o',linewidth=2)\nplt.bar(cases.index, cases['Confirmed'],alpha=0.3,color='c')\nplt.xlabel('Days', fontsize=15)\nplt.ylabel('Number of cases', fontsize=15)\nplt.title('India Covid-19 cases - Confirmed, Recovered & Deaths',fontsize=20)\nplt.legend()\nplt.show()","685a9d1d":"# Group dataset by 'Date' with sum parameter and analyse the Active_case values.\ncases = covid_India.groupby('Date').sum()[['Active_case']]\nsns.set(style = 'whitegrid')\ncases.plot(kind='line', figsize = (15,7) , marker='o',linewidth=2)\nplt.bar(cases.index, cases['Active_case'],alpha=0.3,color='c')\nplt.xlabel('Days', fontsize=15)\nplt.ylabel('Number of cases', fontsize=15)\nplt.title('India Covid-19 cases - Active_case',fontsize=20)\nplt.legend()\nplt.show()","1e57a0bc":"dates = covid_India['Date'] ","8186f981":"days_since_1_30 = np.array([i for i in range(len(dates))]).reshape(-1, 1)","fcfcb50b":"x = days_since_1_30\ny = covid_India['Confirmed']","b04e1ba3":"x.shape, y.shape","49cac09f":"# Fitting Polynomial Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 6)\nx_poly = poly_reg.fit_transform(x)\npoly_reg.fit(x_poly, y)\nlin_reg = LinearRegression()\nlin_reg.fit(x_poly, y)","8d7cb4dd":"# Visualising the Polynomial Regression results\nplt.scatter(x, y, color = 'red')\nplt.plot(x, lin_reg.predict(poly_reg.fit_transform(x)), color = 'blue')\nplt.title('India Covid-19 cases - Confirmed')\nplt.xlabel('Days')\nplt.ylabel('Confirmed')\nplt.show()","c7661b04":"days_in_future = 18\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[132:150]","3edb92f7":"#Predict the future result of India\nlin_reg.predict(poly_reg.fit_transform(adjusted_dates))","e82caa08":"# Visualising the future prediction results\nsns.set(style = 'whitegrid')\nplt.plot(lin_reg.predict(poly_reg.fit_transform(adjusted_dates)),color='purple')\nplt.xlabel('Days', fontsize=20)\nplt.ylabel('Number of cases', fontsize=20)\nplt.title('India Covid-19 cases - Confirmed',fontsize=10)\nplt.legend()\nplt.show()","2af32b4a":"Distribution of age group","16a6114e":"Simple prediction by polynomial regression","ab02f69b":"From above graph we note that most of cases occure in India age group of 20-50 years.","d28f537a":"Statewise cases in India","f10b15d6":"Case in India","43bde22d":"Total cases","7fb807b3":"Convert float to integer"}}