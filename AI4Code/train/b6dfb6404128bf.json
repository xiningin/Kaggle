{"cell_type":{"f8fefa22":"code","f5b5239a":"code","e1a6594d":"code","44993e73":"code","0c1cc081":"code","b08ffd10":"code","5a64d14c":"code","38e5b7c0":"code","5b9b96fd":"code","cdb3e7a8":"code","bee37c26":"code","eb1f164c":"code","71097d1a":"code","97f035ee":"code","ecbab713":"code","1370a763":"code","83e3327e":"code","90acc375":"code","4099f2d3":"code","778c0d99":"code","fdc6dd1b":"code","62d78781":"code","680cfaed":"code","78c8480b":"code","3ae2952f":"code","bb895584":"code","a87ba4e7":"code","989e5b10":"code","9017bd9b":"markdown","c42762f0":"markdown","4497c3df":"markdown","17784f56":"markdown","981cc7dc":"markdown","7d40a2f8":"markdown","ee75e893":"markdown","933659ea":"markdown","c8f37cc4":"markdown","c07c29c0":"markdown","a1d73218":"markdown","be24c6e1":"markdown","f254a820":"markdown","b2eb3bef":"markdown","7bd3bfa7":"markdown","7613c0ed":"markdown","92245738":"markdown","8007758d":"markdown","ae814585":"markdown","03b5e986":"markdown","19ee8432":"markdown","77af7800":"markdown","0c7a6fe0":"markdown","19538005":"markdown","49c3e93a":"markdown","86b4c399":"markdown","6bba5846":"markdown","1ba0a34d":"markdown","5f11e0b4":"markdown","d04c37b3":"markdown","0691703d":"markdown","657836bc":"markdown","7b0472ea":"markdown","28a1694f":"markdown","363fdeaa":"markdown","8294043a":"markdown","c6ce6441":"markdown","7ee202bb":"markdown","04fac26e":"markdown","8f578691":"markdown","414ce69d":"markdown","43150c3a":"markdown","184c5bed":"markdown","d713ec88":"markdown","2f0a16c5":"markdown","17c48585":"markdown","6b3c5117":"markdown"},"source":{"f8fefa22":"# Import libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import poisson,skellam","f5b5239a":"# Import Home\/Away Dataset\n\nhome_away = pd.read_csv(\"..\/input\/home_away.csv\", index_col = 'Rk')\nhome_away","e1a6594d":"# Import fixture_list data\nfixtures = pd.read_csv('..\/input\/Fix.csv')\nfixtures.head(2)","44993e73":"home_away = home_away.copy()\n# Rename Columns to sensible names\nhome_away.rename(columns = {'MP': 'MP (H)', 'MP.1': 'MP (A)', 'xGDiff\/90': 'xGDiff\/90 (H)', \n                     'xGDiff\/90.1': 'xGDiff\/90 (A)', 'Pts': 'Pts (H)', 'Pts.1': 'Pts (A)', \n                        'xG': 'xG (H)', 'xG.1': 'xG (A)', 'xGA': 'xGA (H)', 'xGA.1': 'xGA (A)'\n                           } , inplace = True)\n# Cleaning team names\nhome_away.replace(to_replace = ['K\u00c3\u00b6ln', 'D\u00c3\u00bcsseldorf'] , value = ['Koln', 'Dusseldorf'], inplace = True)\n# Extracting needed columns\nhome_away = home_away[['Squad', 'MP (H)', 'MP (A)', 'xGDiff\/90 (H)', 'xGDiff\/90 (A)', 'Pts (H)',\n                       'Pts (A)', 'xG (H)', 'xG (A)', 'xGA (H)', 'xGA (A)']]\n# Getting total points as a feature\nhome_away['Pts'] = home_away['Pts (H)'] + home_away['Pts (A)']\nhome_away","0c1cc081":"# Current league standings\nstandings = home_away[['Squad', 'Pts']]\nstandings.head(2)","b08ffd10":"home_away['Home_adv_factor'] = home_away['xGDiff\/90 (H)'] - home_away['xGDiff\/90 (A)']\nmode = home_away[['Squad', 'Home_adv_factor']]\nmode.plot(kind = 'bar' , figsize = (15,10), x = 'Squad', y = 'Home_adv_factor')\n","5a64d14c":"home_away[['Squad', 'xGA (H)']].sort_values('xGA (H)').head()","38e5b7c0":"home_away[['Squad', 'xGA (A)']].sort_values('xGA (A)').head(8)","5b9b96fd":"home_away[['Squad', 'Pts (H)']].sort_values('Pts (H)').head(3)","cdb3e7a8":"# Recall info about the dataset\nfixtures.info()","bee37c26":"# Cleaning column names\nfixtures.rename(columns = {'xG': 'xG (H)', 'xG.1': 'xG (A)'}, inplace = True)\n# Cleaning team names\nfixtures.replace(to_replace = ['K\u00c3\u00b6ln', 'D\u00c3\u00bcsseldorf'] , value = ['Koln', 'Dusseldorf'], inplace = True)\n# Removing rows containing absloutely no information\nfixtures.dropna(how = 'all', inplace = True)","eb1f164c":"# Extract dataset for the remaining_fixtures leaving the fixtures dataset containing games already played\nremaining_fixtures = fixtures[fixtures['xG (H)'].isnull()] \nremaining_fixtures = remaining_fixtures[['Home', 'Away']].reset_index()\ndel remaining_fixtures['index']\nremaining_fixtures.head(2)","71097d1a":"# Extracting needed features and cleaning dataset\nfixtures = fixtures.copy()\nfixtures = fixtures[['Home', 'Away', 'xG (H)', 'xG (A)']]\n# Removing fixtures still to be played.\nfixtures.dropna(how='any', inplace = True, axis = 'rows')\n","97f035ee":"# Rounding expected goals scored and conceaded for each team.\nfixtures['xG_rounded (H)'] = fixtures['xG (H)'].apply(lambda x: round(x))\nfixtures['xG_rounded (A)'] = fixtures['xG (A)'].apply(lambda x: round(x))\nfixtures = fixtures[['Home', 'Away', 'xG_rounded (H)', 'xG_rounded (A)']]","ecbab713":"# Simulating game results based on expected goals.\nfixtures['xwin'] = fixtures.apply(lambda x: 1 if x['xG_rounded (H)'] > x['xG_rounded (A)'] else 0, axis=1)\nfixtures['xdraw'] = fixtures.apply(lambda x: 1 if x['xG_rounded (H)'] == x['xG_rounded (A)'] else 0, axis=1)\nfixtures['xloss'] = fixtures.apply(lambda x: 1 if x['xG_rounded (H)'] < x['xG_rounded (A)'] else 0, axis=1)","1370a763":"squad_list = list(home_away['Squad'].values)","83e3327e":"# xG Position\n# Get the results for each team\nx_team_results = []\nfor team in squad_list:\n    # Get the data for that team\n    team_data_home = fixtures[fixtures['Home'] == team]\n    team_data_away = fixtures[fixtures['Home'] == team]\n    \n    \n    wins = team_data_home['xwin'].sum()\n    draws = team_data_home['xdraw'].sum()\n    losses = team_data_home['xloss'].sum()\n    scored = team_data_home['xG_rounded (H)'].sum()\n    conceded = team_data_home['xG_rounded (A)'].sum()\n    \n    wins_a = team_data_away['xwin'].sum()\n    draws_a = team_data_away['xdraw'].sum()\n    losses_a = team_data_away['xloss'].sum()\n    scored_a = team_data_away['xG_rounded (H)'].sum()\n    conceded_a = team_data_away['xG_rounded (A)'].sum()\n    \n    games = wins + draws + losses + wins_a + draws_a + losses_a\n    points = (3 * wins) + draws + (3 * wins_a) + draws_a\n    goal_difference = (scored - conceded) + (scored_a - conceded_a)\n    \n    x_team_results.append([team, games, wins+wins_a , draws + draws_a , losses + losses_a\n                           , scored + scored_a, conceded + conceded_a, \n                           goal_difference, points])\nx_league_table = pd.DataFrame(x_team_results, \n                              columns=['Team', 'P', 'W', 'D', 'L', 'F', 'A', 'GD', 'Points'])\nx_league_table.sort_values(by=['Points', 'GD', 'F'], ascending=False, inplace=True)\nx_league_table.set_index(np.array(range(1, 19)), inplace=True)","90acc375":"x_league_table.index.names = ['xG_Position']\nx_league_table","4099f2d3":"team_positions = []\nfor team in squad_list:\n    current_pos = standings[standings['Squad'] == team].index[0]\n    xg_pos = x_league_table[x_league_table['Team'] == team].index[0]\n    overperforming = 'Yes' if current_pos < xg_pos else 'No'\n    team_positions.append([team, current_pos, xg_pos,  overperforming])\n\nposition_table = pd.DataFrame(team_positions, columns=['Team', 'Position', 'xG Position',\n                                                       'Overperforming'])\nposition_table.sort_values(by=['Position'], ascending=True, inplace=True)","778c0d99":"position_table.head(18)","fdc6dd1b":"# importing the tools required for the Poisson regression model\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\ndef model(goal_model_data, home_adv):\n    if home_adv == 1:\n        poisson_model = smf.glm(formula=\"goals ~  home +  team + opponent  \", data=goal_model_data, \n                        family=sm.families.Poisson()).fit()\n        print(poisson_model.summary())\n    else:\n        poisson_model = smf.glm(formula=\"goals ~  team + opponent\", data=goal_model_data, \n                        family=sm.families.Poisson()).fit()\n        print(poisson_model.summary())\n    return poisson_model","62d78781":"def simulate_match(foot_model, homeTeam, awayTeam, max_goals , home_adv):\n    if home_adv == 1:\n        home_goals_avg = foot_model.predict(pd.DataFrame(data={'team': homeTeam, \n                                                            'opponent': awayTeam,'home':1},\n                                                      index=[1])).values[0]\n        away_goals_avg = foot_model.predict(pd.DataFrame(data={'team': awayTeam, \n                                                            'opponent': homeTeam,'home':0},\n                                                      index=[1])).values[0]\n    else:\n        home_goals_avg = foot_model.predict(pd.DataFrame(data={'team': homeTeam, \n                                                            'opponent': awayTeam, 'home': 0},\n                                                      index=[1])).values[0]\n        away_goals_avg = foot_model.predict(pd.DataFrame(data={'team': awayTeam, \n                                                            'opponent': homeTeam, 'home': 0},\n                                                      index=[1])).values[0]\n            \n    team_pred = [[poisson.pmf(i, team_avg) for i in range(0, max_goals+1)] for team_avg in [home_goals_avg, away_goals_avg]]\n    return(np.outer(np.array(team_pred[0]), np.array(team_pred[1])))","680cfaed":"df_xG = pd.concat([fixtures[['Home','Away','xG_rounded (H)']].assign(home=1).rename(\n            columns={'Home':'team', 'Away':'opponent','xG_rounded (H)':'goals'}),\n                             fixtures[['Away','Home','xG_rounded (A)']].assign(home=0).rename(\n            columns={'Away':'team', 'Home':'opponent','xG_rounded (A)':'goals'})], sort = False)\ndf_xG.tail(2)","78c8480b":"# Method to compute rank for each team while simulating its league campaign\ndef compute_rank(data, home_adv = 1, r = remaining_fixtures, home_away = home_away):\n    winners = []\n    poisson_model = model(data, home_adv)\n    for home,away in r.values:\n        avg_no_of_goals = poisson_model.predict(pd.DataFrame(data={'team': home, 'opponent': away,\n                                       'home':1},index=[1]))\n        to_fn = int((avg_no_of_goals.values[0]))\n        match_sim = simulate_match(poisson_model, home, away, to_fn, home_adv)\n        result = np.argmax(np.array([np.sum(np.tril(match_sim, -1)), np.sum(np.diag(match_sim)),\n                                np.sum(np.triu(match_sim, 1))]))\n    \n        if result == 0 :\n                winner = home\n        elif result == 1:\n                winner = 'None'\n        else:\n                winner = away\n\n        winners.append(winner)\n    winners = pd.DataFrame(winners)\n    r = pd.concat([r, winners], axis = 1)\n    r.columns = ['Home', 'Away', 'Winner']\n    wins_pts = pd.DataFrame((r['Winner'].value_counts()) *3)\n    wins_pts = wins_pts.drop('None')\n    draws = r[r['Winner'] == 'None']\n    draws_pts_h = pd.DataFrame(draws['Home'].value_counts())\n    draws_pts_a = pd.DataFrame(draws['Away'].value_counts())\n    Total = pd.concat([wins_pts, draws_pts_h, draws_pts_a], axis = 1, sort = True)\n    Total.fillna(0, inplace = True)\n    Total['Total_pts_to_be_Added'] = (Total.Winner + Total.Home + Total.Away).astype(int)\n    Total.sort_values('Total_pts_to_be_Added', ascending = False)\n    home_away = home_away.set_index('Squad')\n    Results = pd.concat([home_away['Pts'], Total], axis = 1, sort = False)\n    Results = Results.fillna(0)\n    Ranking = pd.DataFrame(Results['Pts'] + Results['Total_pts_to_be_Added'])\n    Ranking.columns = ['Points']\n    Ranking = Ranking.astype({'Points': int})\n    Ranking.sort_values('Points', ascending = False, inplace = True)\n    Ranking.reset_index(inplace = True)\n    Ranking.index.name = 'Predicted Position'\n    Ranking.index += 1\n    Ranking.rename( columns = {'index': 'Teams'}, inplace = True)\n    return Ranking","3ae2952f":"# League Table Ranking predicted through xG with Home Advantage for each team\nxG_rankings_with_home_adv = compute_rank(df_xG)\nxG_rankings_with_home_adv","bb895584":"# League Table Ranking predicted through xG without the home advantage\nxG_rankings_without_home_adv = compute_rank(df_xG,0)\nxG_rankings_without_home_adv","a87ba4e7":"\npos = []\nfor team in squad_list:\n    home_pos = xG_rankings_with_home_adv[xG_rankings_with_home_adv['Teams'] == team].index[0]\n    no_home_pos = xG_rankings_without_home_adv[xG_rankings_without_home_adv['Teams'] == team].index[0]\n    affected = 'Yes' if home_pos != no_home_pos else 'No'\n    pos.append([team, home_pos, no_home_pos, affected])\n    \ncmp_table = pd.DataFrame(pos, columns = ['Team', 'Position_with_home_adv', 'Position_without_home_adv', 'affected']) ","989e5b10":"cmp_table.set_index('Team', inplace = True)\ncmp_table.sort_values('Position_with_home_adv')","9017bd9b":"In contrast to the [intial](https:\/\/github.com\/dashee87\/blogScripts\/blob\/master\/Jupyter\/2017-06-04-predicting-football-results-with-statistical-modelling.ipynb) use of the model which used goals data to develop the poisson regression model, we'll use expected goals values which is a more consistent measure of performance to express each team's chances\/probability to score goals within one game.\n\nExpected Goals is typically a more consistent measure of performance than actual goals. Whereas goals are relatively rare events that come and go in stretches, a team or player\u2019s xG output tends to fluctuate much less from match-to-match. Clearly the goals that are actually scored are the ones that win points, but xG gives us more context for evaluating team performance. More on that [here](https:\/\/www.optasportspro.com\/news-analysis\/blog-expected-goals-in-context\/).","c42762f0":"**Steps for importing data to the model**:\n* Drop not needed features for model computations\n* Give features meaningful names\n* Write method to simulate the remaining fixtures of the league campaign","4497c3df":"## Background","17784f56":"## League Standings VS xG Standings","981cc7dc":"Our model was founded on the belief that the number goals can be accurately expressed as a Poisson distribution. If that assumption is misguided, then the model outputs will be unreliable. Given a Poisson distribution with mean $\\lambda$, then the number of events in half that time period follows a Poisson distribution with mean $\\lambda$\/2. In football terms, according to our Poisson model, there should be an equal number of goals in the first and second halves. This is obviously not true which implies that univariate poisson distribution isn't the most accurate way to approach this simulation, and more success with [bivariate poisson distribution](http:\/\/www2.stat-athens.aueb.gr\/~karlis\/Bivariate%20Poisson%20Regression.pdf). More on that can be founded in this [notebook](https:\/\/github.com\/dashee87\/blogScripts\/blob\/master\/Jupyter\/2017-06-04-predicting-football-results-with-statistical-modelling.ipynb) where this simulation was inspired by.","7d40a2f8":"## Predicting Final Standings","ee75e893":"As mentioned in the preceding section, we could calculate the probability of various events in any specfic match *(using Skellam distribution to monitor goal difference, thus know match results)*. But rather than treat each match separately, we'll build a more general [Poisson regression model](https:\/\/en.wikipedia.org\/wiki\/Poisson_regression). ","933659ea":"This is a convenient time to introduce the [Poisson distribution](https:\/\/en.wikipedia.org\/wiki\/Poisson_distribution). It's a discrete probability distribution that describes the probability of the number of events within a specific time period (e.g 90 mins) with a known average rate of occurrence. A key assumption is that the number of events is independent of time. In our context, this means that goals don't become more\/less likely by the number of goals already scored in the match.\n\n\nNote that we treat the number of goals scored by the home and away team as two independent Poisson distributions, thus we consider the number of goals scored by each team to be independent events (i.e. P(A n B) = P(A) P(B)). So, if two teams scored the same amount of goals ( same number of events happenend ) in the same game ( within the same specific time period ) the difference between the poisson distribution - this is actually called [Skellam distribution](https:\/\/en.wikipedia.org\/wiki\/Skellam_distribution) will be zero. And to get the probability of that happening, we just input the mean goals' value ( in draw case 0 ) to the skellam's [probability mass function (PMF) ](https:\/\/en.wikipedia.org\/wiki\/Probability_mass_function).\n\nSo, in order to adapt this approach to model specific matches. We just need to know the average number of goals scored by each team and feed this data into a Poisson model.\n\nIf you're curious to know more about how poisson distribution can be used to approximate the number of goals scored by each team, you can find the details of the model [here](https:\/\/github.com\/dashee87\/blogScripts\/blob\/master\/Jupyter\/2017-06-04-predicting-football-results-with-statistical-modelling.ipynb).","c8f37cc4":"### Assessing Performance","c07c29c0":"### Data Cleaning And Feature Extraction","a1d73218":"Our main interest here lies in the values presented in the coef column in the model summary table, which are analogous to the slopes in linear regression. Similar to [logistic regression](https:\/\/www.statisticssolutions.com\/what-is-logistic-regression\/), we take the [exponent of the parameter values](http:\/\/www.lisa.stat.vt.edu\/sites\/default\/files\/Poisson.and_.Logistic.Regression.pdf). A positive value implies more goals , while values closer to zero represent more neutral effects. Towards the bottom of the table you might notice that home has a coef of 0.2852. This captures the fact that home teams generally score more goals than the away  *(exp(0.2852) = 1.33 times more likely )*. But not all teams are created equal. Bayern Munich has an estimate of *0.6266* corresponding to *-0.2505*  of Dusseldorf which is the weakest attack in the league *( sort of saying Bayern Munich are better scorers- in xG context better creators than average while Dusseldorf are much worse)*.\n\n Finally, the opponent values penalize\/reward teams based on the quality of the opposition. This reflects the defensive strength of each team (Bayern Munich : -0.3657; Dusseldorf: 0.1914). In other words, you're less likely to score against Bayern Munich. Hopefully, that all makes both statistical and intuitive sense","be24c6e1":"### Importing Data to the model","f254a820":"While it is widely accepted that sporting teams perform better at home, it\u2019s impossible to create a universal home-field advantage handicap. This is due to soccer teams being fundamentally unbalanced, with some earning bigger home-field advantages than others.\n\nWe'll try to approach that with the help of a comprehnsive measure of performance for each team that is **xGDiff\/90** - *measures the difference between xG scored and xG conceaded for a team over the course of one game ( **Positive value** implies that the team created more\/better chances than conceaded - the higher the value the better, **Negative value** implies that a team conceaded more\/better chances than created ones* - the lower the value the worse).\n\nWe'll compute **Home_adv_factor** by seeing how playing at home or not alter the team performance expressed in the **xGDiff\/90** measure. Higher values for **Home_adv_factor** implies that given team's performance is more altered by where they play. We'll do so by computing the difference between **xGDiff\/90**  home and away scores for each team.","b2eb3bef":"#### Fixtures dataset","7bd3bfa7":"The specs of the model should be printed each time the function is called, we'll use the model in different situations later so we'll look at its specs then.","7613c0ed":"Looking to the following table:\n\n**Affected:** Dortmund, RB Liepzig, Eint Frankfurt, Hertha Berlin.\n\nWhile all other teams showed no affection.\n\nThe obvious improvement was shown by Hertha Berlin *(14th to 11th)* who enjoyed better times away; so losing the home advantage for all teams was a bless in disguise for them. In contrast to other teams especially Eint Frankfurt who suffered the most *(11th to 13th)* with them being in the highest 5 values of Home_adv_factor. However, neutralizing grounds for all teams had no major effect on the league table as no changes happen in the very top of the table *(Bayern well clear of the rest)*, also the top 4 battle had no major changes as well as the bottom of the table.","92245738":"So, we've **league standings** splitted by home and away games for each team. Also, we've the **fixtures** dataset containing matchday data.\n\nIn this section, we'll work on things we can improve in both datasets respectively.","8007758d":"In this section we will view the results of our model with and without home_adv. \nAlso, will go further in illustrating the model used by commenting on its specs when it is used.","ae814585":"### Viewing and Interpreting Results","03b5e986":"1. At home Leverkuzen conceaded less xG than anyone else bar Bayern Munich. While conceading the most among top 8 clubs away.","19ee8432":"The above plot shows the computed **Home_adv_factor** scores for each team. It's quite clear that Leverkuzen has the highest value which tells that their performance improves the most when they play at home *(No team conceaded less xG at home except for Bayern Munich, at the same time they concead the most xG among the top 8 away from home)*. In contrast, Hertha Berlin who actually had better times when playing away from home *(Hertha won only 12 pts at home, while winning 19 pts away form home)* ; so their **Home_adv_factor** score reflects that with a negative value.","77af7800":"The dataset has few things we can improve upon:\n* The column names need cleaning - clearly differentiate between home and stats.\n* Some team names needs cleaning as they've format issues - ( K\u00c3\u00b6ln -> Koln )\n* Differentiate between the fixtures already played and the ones to be played - extract remaining_fixtures dataset.\n* Drop not neccessary features for the purpose of this analysis - predincting final standings. ","0c7a6fe0":"### Introducing The Model","19538005":"## Project Set-Up","49c3e93a":"We see by looking to number of non-null values that there exist many features containing null values, and this isn't due to error but having some fixtures in the fixtures' list still not played so their data doesn't yet exist. We'll handle that by having two different datasets one containing the fixtures that have been played *(will use in developing the model)* and the other containing the fixtures yet to be played *(will use the model to predict its outcome)*.","86b4c399":"### Computing xG standings","6bba5846":"As mentioned before, we have two Poisson distributions. From this, we can calculate the probability of various events. simulate_match function wraps this up.","1ba0a34d":"#### Fixtures dataset","5f11e0b4":"2. While being 11th Hertha won less points at home than anyone else except bottom 2 clubs in the table.","d04c37b3":"**Aforementioned stats** used in support of **Home_adv_factor** measure **:**","0691703d":"We'll simulate the cases where the home advantage plays its normal part for each team, and also the case where it's **neglected** due to playing the league behind closed. We'd see if there'll be changes to the final league standings that our model can detect.\n\nAlso it's intuitive to say that this assumption *( neglecting home advantage )* is not 100% accurate; as fans are not the only factor that contribute to home advantage of sport teams, other factors like ( Stadium Familiarity, Style of football .. ) might have some contribution to that but it's something that can be approached but not particularly measured. In this simulation we only try to approach who playing behind closed doors might affect the most, and how this will affect league standings at the end.","657836bc":"#### Home\/Away league standings dataset","7b0472ea":"## Model Evaluation","28a1694f":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Background\" data-toc-modified-id=\"Background-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Background<\/a><\/span><\/li><li><span><a href=\"#Project-Set-Up\" data-toc-modified-id=\"Project-Set-Up-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Project Set-Up<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Import-Data\" data-toc-modified-id=\"Import-Data-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Import Data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Home\/Away-league-standings-dataset\" data-toc-modified-id=\"Home\/Away-league-standings-dataset-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Home\/Away league standings dataset<\/a><\/span><\/li><li><span><a href=\"#Fixtures-dataset\" data-toc-modified-id=\"Fixtures-dataset-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Fixtures dataset<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Cleaning-And-Feature-Extraction\" data-toc-modified-id=\"Data-Cleaning-And-Feature-Extraction-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Data Cleaning And Feature Extraction<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Home\/Away-league-standings-dataset\" data-toc-modified-id=\"Home\/Away-league-standings-dataset-2.2.1\"><span class=\"toc-item-num\">2.2.1&nbsp;&nbsp;<\/span>Home\/Away league standings dataset<\/a><\/span><\/li><li><span><a href=\"#Fixtures-dataset\" data-toc-modified-id=\"Fixtures-dataset-2.2.2\"><span class=\"toc-item-num\">2.2.2&nbsp;&nbsp;<\/span>Fixtures dataset<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#League-Standings-VS-xG-Standings\" data-toc-modified-id=\"League-Standings-VS-xG-Standings-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>League Standings VS xG Standings<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Computing-xG-standings\" data-toc-modified-id=\"Computing-xG-standings-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Computing xG standings<\/a><\/span><\/li><li><span><a href=\"#Assessing-Performance\" data-toc-modified-id=\"Assessing-Performance-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Assessing Performance<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Predicting-Final-Standings\" data-toc-modified-id=\"Predicting-Final-Standings-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Predicting Final Standings<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Introducing-The-Model\" data-toc-modified-id=\"Introducing-The-Model-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Introducing The Model<\/a><\/span><\/li><li><span><a href=\"#Building-the-model\" data-toc-modified-id=\"Building-the-model-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Building the model<\/a><\/span><\/li><li><span><a href=\"#Importing-Data-to-the-model\" data-toc-modified-id=\"Importing-Data-to-the-model-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Importing Data to the model<\/a><\/span><\/li><li><span><a href=\"#Viewing-and-Interpreting-Results\" data-toc-modified-id=\"Viewing-and-Interpreting-Results-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>Viewing and Interpreting Results<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Model-Evaluation\" data-toc-modified-id=\"Model-Evaluation-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Model Evaluation<\/a><\/span><\/li><li><span><a href=\"#Conclusion\" data-toc-modified-id=\"Conclusion-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Conclusion<\/a><\/span><\/li><\/ul><\/div>","363fdeaa":"The following cell compares current league position to the expected league tables' positions. \n\nWe can determine whether a team is overperforming based upon whether their current position is above their expected position.\n\n**Overperforming:** Dortmund, M'gladbach, Freiburg, Schalke 04, Koln, Hertha BSC, Dusseldorf.\n\n**Not Overperforming:** Bayern Munich, RB Leipzig, Leverkusen, Wolfsburg, Hoffenheim, Union Berlin, Eint Frankfurt, Augsburg, Mainz 05, Werder Bremen, Paderborn 07.","8294043a":"The following cell will compute the league standings based on xG.","c6ce6441":"#### Home\/Away league standings dataset","7ee202bb":"Expected goals (xG) scored and conceded (xGA) take into account how many goals there should be by each team in a game based upon their performance. We can use these two values to create another table. Comparing goals scored and goals conceded for each game allows us to work out the result.\n\nTo do this, we must first check who won each game based upon the expected goals. Since expected goals can be a decimal number, we round them to the nearest whole number. Without some method of rounding, we are unlikely to see any draws in this data (which we know are actually common in football). ","04fac26e":"Now let's examine the effects our model has shown when home_adv_factor measure is neglected. We'll do so by comparing the league position by our model in both scenarios and see what are the teams that are affected and if this effect is positive or negative one for them, then try to understand that in the context of the Home_adv_factor we computed earlier.","8f578691":"We'll import Home\/Away league standings and fixture list from [fbref.com](https:\/\/fbref.com\/en\/comps\/20\/Bundesliga-Stats) which has data that is provided from [Statsbomb](https:\/\/fbref.com\/en\/statsbomb\/) which can be downloaded directly from the website as an excel file.","414ce69d":"### Building the model","43150c3a":"The dataset has few things we can improve upon:\n* The column names need cleaning - clearly differentiate between home and stats.\n* Some team names needs cleaning as they've format issues - ( K\u00c3\u00b6ln -> Koln )\n* Calculate total points - know the overall ranking of teams.\n* Drop not neccessary features for the purpose of this analysis - xG vs position.\n* Create a feature to help model home advantage of each team for later use.","184c5bed":"### Import Data","d713ec88":"We'll use simple model to predict the final standings in this Bundesliga campaign, we'll use expected data for this also we will try to model home advantage by letting the model neglect home advantage for teams and see if it'll fit in the context of the **Home_adv_factor** we computed earlier.","2f0a16c5":"In this Notebook we first look at the current league table one week after the return of the Bundesliga after suspending it due to Coronavirus. We will look at how that compares to a league based upon [expected goals (xG)](https:\/\/fbref.com\/en\/expected-goals-model-explained\/).\n\n![Footballtrips_Bundesliga.png](attachment:Footballtrips_Bundesliga.png)\n\nThen, we will use some of the findings found [here](https:\/\/github.com\/dashee87\/blogScripts\/blob\/master\/Jupyter\/2017-06-04-predicting-football-results-with-statistical-modelling.ipynb) and [here](https:\/\/help.smarkets.com\/hc\/en-gb\/articles\/115001457989-How-to-calculate-Poisson-distribution-for-football-betting) in which we will use simple **Poisson model** to simulate football matches using fixtures data, finally we'll try to model the effect of **home advantage** and see how it might affect standings in the end of the season using our model.","17c48585":"We built a simple Poisson model to predict the results of the Bundesliga season. Despite its inherent flaws, it recreates several features that would be a necessity for any predictive football model (home advantage, varying offensive strengths and opposition quality). We also modeled results for the season without taking home advantage into prespective and saw that this would introduce slight changes that can be understood when looking to the  Home advantage factor computed earlier in the notebook.\n\nEarlier in the study we took a quick analysis on which teams overperformed their expected numbers, and built our model on the basis of expected numbers to get better intuition on teams' performances.","6b3c5117":"## Conclusion"}}