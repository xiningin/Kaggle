{"cell_type":{"37a8df39":"code","f07437bc":"code","adb80023":"code","2d52c197":"code","031955f1":"code","5cbaa495":"code","3b2550e6":"code","d619ba6d":"code","2868448e":"code","2767007c":"code","64bd8ecc":"code","093e65da":"code","433d500c":"code","12a3ec79":"code","2361db8a":"code","0c7e509c":"code","2d4b2039":"code","8c4cadbc":"code","1aea67f7":"code","570c600e":"code","bebffb8b":"code","c688d996":"code","70373ec6":"code","ccd00107":"code","1163a4c4":"code","005aed57":"code","239d53ad":"code","ee7234b6":"code","fd0c6d1f":"code","55d6f4c4":"code","cdd49aa5":"code","056f0baf":"code","31344675":"code","3d482d07":"code","9b07b3e5":"code","c46e7b87":"code","2bd1aa91":"code","ba431538":"code","ef93a8ef":"code","e9a04752":"code","48e904e2":"code","db0faa11":"code","79e69c5e":"code","30751f68":"code","f008ad94":"code","3afdeafd":"code","888df025":"code","40588569":"code","c9e1c052":"code","afa24666":"code","e3397182":"code","fb5c2115":"code","17618561":"code","ca13f39c":"code","f5899e99":"code","7da468ce":"code","d2298dfd":"code","53754179":"code","e608f230":"code","5e7be871":"code","e59fea65":"code","cac64ba3":"code","57af7ae4":"markdown","cf311dbd":"markdown","b083d320":"markdown","0f82cb1b":"markdown","32714fef":"markdown"},"source":{"37a8df39":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\n#input\ndata = pd.read_csv('..\/input\/apartment-rental-offers-in-germany\/immo_data.csv')\n\npd.options.display.max_columns = None","f07437bc":"\ndata.head(10)","adb80023":"data.info()","2d52c197":"data.describe()","031955f1":"#deleting outliers\ndata = data[data.baseRent.between(50,10000, inclusive=True)]\ndata = data[data.noRooms.between(0,15, inclusive=True)]\ndata = data[data.livingSpace.between(50,30000, inclusive=True)]\ndata.shape","5cbaa495":"#plot the data against base_rent(target_variable)\nplt.figure(figsize=(20,10))\n\nsns.barplot(x=data.regio1, y=data.baseRent)\nplt.show()","3b2550e6":"g = sns.FacetGrid(data, col='heatingType', col_wrap=4)\ng = g.map(plt.hist, 'baseRent', bins=20, range=(100,4000))","d619ba6d":"plt.figure(figsize=(10,5))\nplt.scatter(x='yearConstructed', y='baseRent', data=data)\nplt.title('Price by Year of Construction')\nplt.xlabel('Year of Construction')\nplt.ylabel('Price')\nplt.show()","2868448e":"sns.histplot(data = data, x=\"baseRent\",bins=30)","2767007c":"sns.set(rc={'figure.figsize':(15,10)})\nsns.displot(np.log(data[\"baseRent\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","64bd8ecc":"sns.set(rc={'figure.figsize':(15,10)})\nsns.displot(np.log(data[\"livingSpace\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","093e65da":"plt.figure(figsize=(20,10))\n\nsns.barplot(x=data.condition, y=data.baseRent)\nplt.show()","433d500c":"plt.figure(figsize=(5,5))\n\nsns.barplot(x=data.interiorQual, y=data.baseRent)\nplt.show()","12a3ec79":"plt.figure(figsize=(15,5))\n\nsns.barplot(x=data.typeOfFlat, y=data.baseRent)\nplt.show()","2361db8a":"sns.set(rc={'figure.figsize':(15,10)})\nsns.regplot(x='noRooms', y='baseRent', data=data)\n","0c7e509c":"data.info()","2d4b2039":"#checking missing values count\ndata.isnull().sum()\/218354 * 100","8c4cadbc":"#dropping columns containing more than 60 percent missing values\nfor column in data:\n    if (data[column].isnull().sum()\/218354 * 100) > 60:\n        data.drop(column,axis=1,inplace = True)","1aea67f7":"data.info()","570c600e":"#dropping unwanted columns \ndata.drop(['baseRentRange','yearConstructedRange','houseNumber','noRoomsRange','livingSpaceRange','street','streetPlain','firingTypes'\n          ,'thermalChar','geo_krs','geo_bln','regio2','regio3'],axis=1,inplace = True)","bebffb8b":"data.drop(['picturecount','scoutId','pricetrend'],axis=1,inplace = True)","c688d996":"data.drop(['serviceCharge','telekomTvOffer','description','facilities','date','totalRent','petsAllowed','numberOfFloors','telekomUploadSpeed'],axis=1,inplace = True)","70373ec6":"data.info()","ccd00107":"#creating a new feature:zip code[which will be 1 for rich cities and 0 for poor cities]\ndata['geo_plz'].value_counts().tail(3002)\nothers = list(data['geo_plz'].value_counts().tail(3002).index)\ndef edit_zip(x):\n    if x in others:\n        return 0\n    else:\n        return x\n\ndata['zipcode'] = data['geo_plz'].apply(edit_zip)","1163a4c4":"zipcode = data.groupby('geo_plz')['baseRent'].mean()\n\ncities = list(zipcode.sort_values(ascending = False).head(2200).index)\n","005aed57":"def city(x):\n    if x in cities:\n        return 1\n    else:\n        return 0\n\ndata['zipcode'] = data['geo_plz'].apply(city)","239d53ad":"data['zipcode'].value_counts()","ee7234b6":"#missing value count\ndata.isnull().sum()","fd0c6d1f":"#filling the missing value for 'heatingType'\ndata['heatingType'].value_counts()","55d6f4c4":"data['heatingType'].fillna(\"central_heating\",inplace=True)","cdd49aa5":"#filling the missing value for 'condition'\ndata['condition'].value_counts()","056f0baf":"data['condition'].fillna(\"null\",inplace=True)\ndata.groupby('condition')['baseRent'].mean()","31344675":"for index, row in data.iterrows():\n    if ((row[\"newlyConst\"] == True) & (row[\"condition\"]==\"null\")):\n        data.loc[index,['condition']] = \"first_time_use\"\n    elif ((row[\"newlyConst\"] == False) & (row[\"condition\"]==\"null\") & (row[\"baseRent\"]>=800)):\n        data.loc[index,['condition']] = \"fully_renovated\"\n    elif ((row[\"zipcode\"] == 1) & (row[\"condition\"]==\"null\") & (row[\"baseRent\"]< 500)):\n        data.loc[index,['condition']] = \"need_of_renovation\"\n    elif (row[\"condition\"]==\"null\"):\n        data.loc[index,['condition']] = \"well_kept\"","3d482d07":"data['condition'].value_counts()","9b07b3e5":"#filling the missing value for 'floor'\nfloor_mean = data['floor'].mean()\ndata['floor'].fillna(floor_mean,inplace=True)","c46e7b87":"#filling the missing value for 'interiorQual'\ndata['interiorQual'].value_counts()","2bd1aa91":"data.groupby('interiorQual')['baseRent'].mean()","ba431538":"data['interiorQual'].fillna(\"null\",inplace=True)\ndata['interiorQual'].value_counts()","ef93a8ef":"data[(data['interiorQual']==\"luxury\") & (data['zipcode']==0)]['baseRent'].mean()","e9a04752":"data[(data['interiorQual']==\"sophisticated\") & (data['zipcode']==0)]['baseRent'].mean()","48e904e2":"data[(data['interiorQual']==\"normal\") & (data['zipcode']==0)]['baseRent'].mean()","db0faa11":"data[(data['interiorQual']==\"simple\") & (data['zipcode']==0)]['baseRent'].mean()\n","79e69c5e":"data[(data['interiorQual']==\"luxury\") & (data['zipcode']==1)]['baseRent'].mean()","30751f68":"data[(data['interiorQual']==\"sophisticated\") & (data['zipcode']==1)]['baseRent'].mean()","f008ad94":"data[(data['interiorQual']==\"normal\") & (data['zipcode']==1)]['baseRent'].mean()","3afdeafd":"data[(data['interiorQual']==\"simple\") & (data['zipcode']==1)]['baseRent'].mean()\n","888df025":"for index, row in data.iterrows():\n    if ((row[\"zipcode\"] == 1) & (row[\"interiorQual\"]==\"null\")& (row[\"baseRent\"]>= 1700)):\n        data.loc[index,['interiorQual']] = \"luxury\"\n    elif ((row[\"zipcode\"] == 1) & (row[\"interiorQual\"]==\"null\")& ( 1700 < row[\"baseRent\"] <= 1000)):\n        data.loc[index,['interiorQual']] = \"sophisticated\"\n    elif ((row[\"zipcode\"] == 0) & (row[\"interiorQual\"]==\"null\")& (row[\"baseRent\"]>= 800)):\n        data.loc[index,['interiorQual']] = \"luxury\"\n    elif ((row[\"zipcode\"] == 0) & (row[\"interiorQual\"]==\"null\")& ( 500 < row[\"baseRent\"] <= 800)):\n        data.loc[index,['interiorQual']] = \"sophisticated\"\n    elif (row[\"interiorQual\"]==\"null\"):\n        data.loc[index,['interiorQual']] = \"normal\"","40588569":"data['interiorQual'].value_counts()","c9e1c052":"#filling the missing value for 'typeOfFlat'\ndata['typeOfFlat'].value_counts()","afa24666":"data.groupby('typeOfFlat')['baseRent'].mean()","e3397182":"data['typeOfFlat'].fillna(\"apartment\",inplace=True)\n","fb5c2115":"data.drop(['yearConstructed','geo_plz'],axis=1,inplace = True)\n","17618561":"data.head()","ca13f39c":"#converting categorical values\ncolumns = []\nfor cols in data.columns:\n    if data[cols].dtype == 'object':\n        columns.append(cols)\n        \ncolumns","f5899e99":"dummies_feature = pd.get_dummies(data[columns])\ndummies_feature.head()","7da468ce":"data = pd.concat([data, dummies_feature], axis=1)\ndata.head()","d2298dfd":"data.drop(['regio1','heatingType','condition','interiorQual','typeOfFlat'],axis=1,inplace = True)\n","53754179":"y = np.log(data['baseRent'])\nx=data.copy()\nx.drop(['baseRent'],axis=1,inplace = True)\n","e608f230":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, \n                                                    random_state=1)","5e7be871":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nimport math\nimport pickle\n\nprediction = []\ndef linearregression(xtrain, ytrain, xtest, ytest):\n    linreg = LinearRegression()\n    linreg.fit(xtrain, ytrain)\n    y_pred = linreg.predict(xtest)\n    \n    #Saving the model\n    Pkl_Filename = \"LR_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(linreg, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred))\n    print('R2_score:', metrics.r2_score(ytest, y_pred))\n    plt.scatter(y_pred,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\nlinearregression(X_train, y_train, X_test, y_test)","e59fea65":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\ndef RandomForest(xtrain, ytrain, xtest, ytest):\n    randomForest = RandomForestRegressor()\n    randomForest.fit(xtrain, ytrain)\n    y_pred = randomForest.predict(xtest)\n    \n     #Saving the model\n    Pkl_Filename = \"RF_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(randomForest, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred))\n    print('R2_score:', metrics.r2_score(ytest, y_pred))\n\n    plt.scatter(y_pred,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\n\nRandomForest(X_train, y_train, X_test, y_test)","cac64ba3":"from sklearn.ensemble import GradientBoostingRegressor\n\n#Best hyperparameters from Random Search:\n#maxdepth: 16, minsamleaf: 117, n: 73, maxfeat: 10, lr: 0.07\ndef gradientboostingmachine(md, msl, n, mf, lr, xtrain, ytrain, xtest, ytest):\n    gbm_best = GradientBoostingRegressor(n_estimators=n, random_state=1111,\n                                         max_depth=md, max_features=mf, \n                                         min_samples_leaf=msl, learning_rate=lr\n                                         )\n    gbm_best.fit(xtrain, ytrain)\n    y_pred_gbm = gbm_best.predict(xtest)\n    \n        \n    #Saving the model\n    Pkl_Filename = \"GB_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(gbm_best, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred_gbm))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred_gbm))\n    print('R2_score:', metrics.r2_score(ytest, y_pred_gbm))\n\n    plt.scatter(y_pred_gbm,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\ngradientboostingmachine(16, 117, 73, 10, 0.07, X_train, y_train, X_test, y_test) ","57af7ae4":"**DATA PREPROCESSING**\n\n\nExploring the Data Set","cf311dbd":"**Predicting rent of apartments based on various parameters.**","b083d320":"Among the three models, **R2_score is the highest for GradientBoosting.**","0f82cb1b":"Training three models: **Linear Regression, RandomForestRegressor, GradientBoostingRegressor** ","32714fef":"#In order to build the model and to find appropriate hyperparameters for GBM, we conducted Random Search on an IDE. "}}