{"cell_type":{"9acaf899":"code","fda0c99f":"markdown"},"source":{"9acaf899":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport json\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom textblob import Word\nfrom nltk.stem import PorterStemmer\nst = PorterStemmer()\n\nstop = stopwords.words('english')\n\ncounter_all = 0\ncounter_title = 0\ncounter_abstract = 0\ncounter_article = 0\n\nrelated_articles = {\n    'ethic': [],\n    'education': [],\n    'public health': []\n}\n\nsearch_words = ['ethic', 'public health', 'education']\n\ndef normalize(text: str):\n    text = text.lower() #lowercase\n    text = \" \".join(x for x in text.split() if not x.isdigit())#remove digits\n    text = \" \".join(x for x in text.split() if x not in stop) #remove stopwords\n    text =  \" \".join([Word(word).lemmatize() for word in text.split()]) #lemmatize\n    return text\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_path = os.path.join(dirname, filename)\n        print(file_path)\n        for search_word in search_words:\n            if filename.endswith(\".json\"):\n                print('\\n%s\\n%s\\n%s\\n%s' % (counter_all, counter_title, counter_abstract, counter_article))\n                #print(related_articles)\n                counter_all += 1\n                found = False\n                with open(file_path, 'r') as f:\n                    article_dict = json.load(f)\n                    title = normalize(article_dict['metadata']['title'])\n                    paragraphs = []\n                    if search_word in title:\n                        counter_title += 1\n                        found = True\n                    try:\n                        if search_word in normalize(article_dict['abstract'][0]['text']):\n                            counter_abstract += 1\n                            found = True\n                            #print('abstract:' + article_dict['abstract'][0]['text'] + '\\n\\n\\n\\n')\n                        for index, text in enumerate(article_dict['body_text']):\n                            if search_word in normalize(text['text']):\n                                counter_article += 1\n                                #print('text:' + text['text'] + '\\n\\n\\n\\n')\n                                found = True\n                                paragraphs.append(index)\n                    except TypeError:\n                        continue\n                    except IndexError:                \n                        continue\n                    except KeyError:                \n                        continue\n                if found:\n                    related_articles[search_word].append([article_dict['metadata']['title'], paragraphs])\n                continue\n            else:\n                continue\n                        \n        \n# Any results you write to the current directory are saved as output.\nimport json\njson = json.dumps(related_articles)\nf = open(\"results.json\",\"w\")\nf.write(json)\nf.close()","fda0c99f":"I'm new to Kaggle so it will be just test submission\nthis script is normalizing articles text and generating list with related to specific COVID-19 topics\npurpose of this code is to quickly find articles parts related to specific subject to ansear COVID-19 questions"}}