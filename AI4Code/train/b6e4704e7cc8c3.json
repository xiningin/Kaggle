{"cell_type":{"8b73bf4b":"code","19ad48d4":"code","f290a073":"code","d8edb693":"code","86702247":"code","47e327cd":"code","dbca656d":"code","43a6820a":"code","5744bc5d":"code","2a89ed93":"code","47a61cc2":"code","eb469aa9":"code","75ee16d3":"code","ff014543":"code","1b1dcc4f":"code","e92b365e":"code","5c08d93b":"code","399a720a":"code","91f7d059":"code","09032d08":"code","b773743f":"code","f7bdf8c5":"code","37020ee5":"code","3abf208e":"code","0ad785ed":"code","70bf2de8":"code","a25523c3":"code","c06a8b90":"code","9a95141e":"code","763c8090":"code","d32dd541":"code","35494344":"code","43d0cba5":"code","f5a0b728":"code","040c2ab0":"code","7f42b5e6":"code","2b94106c":"code","ae861392":"code","32eb3387":"code","dbf30fa8":"code","505711aa":"code","27cfc380":"code","f1882fca":"code","1d3701a8":"code","d83cb0d5":"code","83651f87":"code","afd4214b":"code","66abb56d":"code","20395a99":"code","bc3503c4":"code","2f8f3cd3":"markdown","31c67370":"markdown","61350955":"markdown","9ce170f3":"markdown","13c62cca":"markdown"},"source":{"8b73bf4b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score\n\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV","19ad48d4":"data = pd.read_csv('..\/input\/hepatitis-c-dataset\/HepatitisCdata.csv')\ndata.head()","f290a073":"data.tail()","d8edb693":"data.describe()","86702247":"data.info()","47e327cd":"data.isnull().sum()","dbca656d":"data = data.drop('Unnamed: 0',axis=1)","43a6820a":"data['Category'].loc[data['Category'].isin([\"1=Hepatitis\",\"2=Fibrosis\", \"3=Cirrhosis\"])] = 1\ndata['Category'].loc[data['Category'].isin([\"0=Blood Donor\", \"0s=suspect Blood Donor\"])] = 0\ndata['Sex'].loc[data['Sex']=='m']=1\ndata['Sex'].loc[data['Sex']=='f']=0","5744bc5d":"data.head()","2a89ed93":"data.fillna(data.median(), inplace=True)","47a61cc2":"data.isnull().sum()","eb469aa9":"fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(18, 18))\nsns.histplot(data=data, x=\"ALB\", kde=True,ax=axes[0][0])\nsns.histplot(data=data, x=\"ALP\", kde=True,ax=axes[0][1])\nsns.histplot(data=data, x=\"ALT\", kde=True,ax=axes[1][0])\nsns.histplot(data=data, x=\"AST\", kde=True,ax=axes[1][1])\nsns.histplot(data=data, x=\"BIL\", kde=True,ax=axes[2][0])\nsns.histplot(data=data, x=\"CHE\", kde=True,ax=axes[2][1])\nsns.histplot(data=data, x=\"CHOL\", kde=True,ax=axes[3][0])\nsns.histplot(data=data, x=\"CREA\", kde=True,ax=axes[3][1])\nsns.histplot(data=data, x=\"GGT\", kde=True,ax=axes[4][0])\nsns.histplot(data=data, x=\"PROT\", kde=True,ax=axes[4][1])","75ee16d3":"labels =data['Category'].value_counts(sort = True).index\nsizes = data['Category'].value_counts(sort = True)\ncolors = [\"Red\",\"Blue\"]\nplt.figure(figsize=(7,7))\nplt.pie(sizes,labels=labels, colors=colors, autopct='%1.1f%%', startangle=90,)\nplt.title('Category pie')\nplt.show()","ff014543":"data.corr()","1b1dcc4f":"sns.pairplot(data, diag_kind=\"kde\",hue=\"Category\")","e92b365e":"data = pd.get_dummies(data, columns = ['Sex'],drop_first=True)\ndata.head()","5c08d93b":"plt.figure(figsize=(16,8))\nsns.heatmap(data.corr(),annot=True)","399a720a":"robust_sc = preprocessing.RobustScaler()\nstandard_sc = preprocessing.StandardScaler() \nminmax_sc = preprocessing.MinMaxScaler()","91f7d059":"X = data.drop(['Category'],axis=1)\ny = data[\"Category\"]","09032d08":"for x in [robust_sc,standard_sc,minmax_sc]:\n    %time\n    resultado = []\n    scaler = x.fit(X)\n    X_new = x.transform(X)\n    tree = DecisionTreeClassifier(max_depth=25,random_state=42)\n    tree.fit(X_new,y)\n    y_pred = tree.predict(X_new)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",x)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","b773743f":"X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)","f7bdf8c5":"over = SMOTE()\novers = RandomOverSampler()\nunder = RandomUnderSampler()\nsteps = [('o', over), ('os', overs),('u',under)]\npipeline = Pipeline(steps=steps)","37020ee5":"X_train, y_train = pipeline.fit_resample(X_train, y_train)","3abf208e":"X_train=standard_sc.fit_transform(X_train)\nX_test=standard_sc.transform(X_test)","0ad785ed":"def confusion(y_test,y_test_pred,X):\n    names=['Non Hepatitis','Hepatitis']\n    cm=confusion_matrix(y_test,y_test_pred)\n    f,ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(cm,annot=True,linewidth=.5,linecolor=\"r\",fmt=\".0f\",ax=ax)\n    plt.title(X, size = 25)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    ax.set_xticklabels(names)\n    ax.set_yticklabels(names)\n    plt.show()\n\n    return","70bf2de8":"RF = RandomForestClassifier(random_state=42)\nRF.fit(X_train, y_train)\npred = RF.predict(X_test)\nscore = RF.score(X_test,y_test)","a25523c3":"score","c06a8b90":"confusion(y_test,pred,\"RF\")","9a95141e":"feat_importances = pd.Series(RF.feature_importances_, index=data.drop('Category',axis=1).columns)\nfeat_importances.nlargest(5).plot(kind='barh')","763c8090":"gbm = XGBClassifier(verbosity=1)\nparams_xgb = {\n        \"n_estimators\":[500,1000,1500],\n        \"learning_rate\":[0.1,0.3,0.6],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"updater\":[\"grow_gpu_hist\"]\n}","d32dd541":"model_xgb = GridSearchCV(gbm,param_grid=params_xgb, cv=5,n_jobs=-1)\nmodel_xgb.fit(X_train,y_train)","35494344":"print(\"Best params: \"+str(model_xgb.best_params_))\nprint(\"Best Score: \"+str(model_xgb.best_score_)+'\\n')","43d0cba5":"scores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","f5a0b728":"y_train_pred_xgb = model_xgb.predict(X_train)\ny_test_pred_xgb = model_xgb.predict(X_test)","040c2ab0":"print(classification_report(y_test, y_test_pred_xgb))","7f42b5e6":"confusion(y_test,y_test_pred_xgb,\"XGB\")","2b94106c":"clf = MLPClassifier(random_state=42)\nparams_MLP = {\n        \"hidden_layer_sizes\":[64,128,256],\n        \"activation\":[\"identity\", \"logistic\", \"tanh\", \"relu\"],\n        'solver': [\"lbfgs\", \"sgd\", \"adam\"],\n        \"learning_rate\":[\"constant\", \"invscaling\", \"adaptive\"],\n        'max_iter': [100,200],\n        \"warm_start\":[True]\n}","ae861392":"model_MLP = GridSearchCV(clf,param_grid=params_MLP, cv=3,n_jobs=-1)\nmodel_MLP.fit(X_train,y_train)\n","32eb3387":"print(\"Best params: \"+str(model_MLP.best_params_))\nprint(\"Best Score: \"+str(model_MLP.best_score_)+'\\n')","dbf30fa8":"scores = pd.DataFrame(model_MLP.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","505711aa":"y_train_pred_MLP = model_MLP.predict(X_train)\ny_test_pred_MLP = model_MLP.predict(X_test)","27cfc380":"print(classification_report(y_test, y_test_pred_MLP))","f1882fca":"confusion(y_test,y_test_pred_MLP,\"MLP\")","1d3701a8":"clf = RandomForestClassifier(random_state=42)\nparams_RF = {\n        \"max_depth\":[250,500,1000],\n        \"criterion\":[\"gini\", \"entropy\"],\n        'min_samples_split': [2,4,6],\n        \"min_samples_leaf\":[1,2,3],\n        \"max_features\":['auto', 'sqrt', 'log2'],\n        'warm_start':[True],\n        'class_weight':['balanced', 'balanced_subsample']\n}","d83cb0d5":"model_RF = GridSearchCV(clf,param_grid=params_RF, cv=3,n_jobs=-1)\nmodel_RF.fit(X_train,y_train)","83651f87":"print(\"Best params: \"+str(model_RF.best_params_))\nprint(\"Best Score: \"+str(model_RF.best_score_)+'\\n')","afd4214b":"scores = pd.DataFrame(model_RF.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","66abb56d":"y_train_pred_RF = model_RF.predict(X_train)\ny_test_pred_RF = model_RF.predict(X_test)","20395a99":"print(classification_report(y_test, y_test_pred_RF))","bc3503c4":"confusion(y_test,y_test_pred_RF,\"RF\")","2f8f3cd3":"## MLP","31c67370":"## Random Forest","61350955":"## XGB","9ce170f3":"# Machine Learning","13c62cca":"# EDA & Preprocessing"}}