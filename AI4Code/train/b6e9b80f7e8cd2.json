{"cell_type":{"25e306ad":"code","c17e9d3a":"code","ec252e95":"code","8a6969b1":"code","487a4cd5":"code","9b5f8935":"code","de348e7c":"code","8339714d":"code","911116f9":"code","f3c6d38c":"code","59ffa802":"code","0696c21a":"code","f8715ee0":"code","0fdff354":"code","3409b5bd":"code","75f5d160":"code","cebdbebf":"code","d9a42609":"code","b7792497":"code","6d1410ca":"code","43748a11":"code","e77168ca":"code","311f35a3":"code","bdbb9813":"markdown","fe672f4c":"markdown","325b1a97":"markdown"},"source":{"25e306ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)","c17e9d3a":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom matplotlib import pyplot\nimport shap","ec252e95":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","8a6969b1":"def encode_title(train, test, train_labels):\n    # encode title\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    print(activities_map)\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    print(activities_labels)\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    print()\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels","487a4cd5":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    event_code_count = {eve: 0 for eve in list_of_event_code}\n    last_session_time_sec = 0\n    \n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n                    \n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(event_code_count.copy())\n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        n_of_event_codes = Counter(session['event_code'])\n        \n        for key in n_of_event_codes.keys():\n            event_code_count[key] += n_of_event_codes[key]\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","9b5f8935":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","de348e7c":"def run_feature_selection(reduce_train, reduce_test, usefull_features, new_features):\n    kf = StratifiedKFold(n_splits = 10, shuffle = True, random_state = 42)\n    target = 'accuracy_group'\n    oof_pred = np.zeros((len(reduce_train), 4))\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature = categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature = categoricals)\n\n        params = {\n            'learning_rate': 0.01,\n            'metric': 'multiclass',\n            'objective': 'multiclass',\n            'num_classes': 4,\n            'feature_fraction': 0.75,\n            'subsample': 0.75,\n            'n_jobs': -1,\n            'seed': 50,\n            'max_depth': 10\n        }\n\n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                          valid_sets=[train_set, val_set], verbose_eval = 500)\n        oof_pred[val_ind] = model.predict(x_val)\n    # using cohen_kappa because it's the evaluation metric of the competition\n    loss_score = cohen_kappa_score(reduce_train[target], np.argmax(oof_pred, axis = 1), weights = 'quadratic')\n    score = loss_score\n    usefull_new_features = []\n    for i in new_features:\n        oof_pred = np.zeros((len(reduce_train), 4))\n        evaluating_features = usefull_features + usefull_new_features + [i]\n        print('Evaluating {} column'.format(i))\n        print('Out best cohen kappa score is : {}'.format(score))\n        for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n            print('Fold {}'.format(fold + 1))\n            x_train, x_val = reduce_train[evaluating_features].iloc[tr_ind], reduce_train[evaluating_features].iloc[val_ind]\n            y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n            train_set = lgb.Dataset(x_train, y_train, categorical_feature = categoricals)\n            val_set = lgb.Dataset(x_val, y_val, categorical_feature = categoricals)\n\n            model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                              valid_sets=[train_set, val_set], verbose_eval = 500)\n            oof_pred[val_ind] = model.predict(x_val)\n        loss_score = cohen_kappa_score(reduce_train[target], np.argmax(oof_pred, axis = 1), weights = 'quadratic')\n        print('Our new cohen kappa score is : {}'.format(loss_score))\n        if loss_score > score:\n            print('Feature {} is usefull, adding feature to usefull_new_features_list'.format(i))\n            usefull_new_features.append(i)\n            score = loss_score\n        else:\n            print('Feature {} is useless'.format(i))\n        gc.collect()\n    print('The best features are: ', usefull_new_features)\n    print('Our best cohen kappa score is : ', score)\n\n    return usefull_features + usefull_new_features","8339714d":"def run_lgb(reduce_train, reduce_test, usefull_features):\n    kf = StratifiedKFold(n_splits=10, shuffle = True, random_state = 42)\n    target = 'accuracy_group'\n    oof_pred = np.zeros((len(reduce_train), 4))\n    y_pred = np.zeros((len(reduce_test), 4))\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=categoricals)\n\n        params = {\n            'learning_rate': 0.01,\n            'metric': 'multiclass',\n            'objective': 'multiclass',\n            'num_classes': 4,\n            'feature_fraction': 0.75,\n            'subsample': 0.75,\n            'n_jobs': -1,\n            'seed': 50,\n            'max_depth': 10\n        }\n\n        model = lgb.train(params, train_set, num_boost_round = 1000000, early_stopping_rounds = 50, \n                          valid_sets=[train_set, val_set], verbose_eval = 100)\n        oof_pred[val_ind] = model.predict(x_val)\n        y_pred += model.predict(reduce_test[usefull_features]) \/ 5\n    loss_score = cohen_kappa_score(reduce_train[target], np.argmax(oof_pred, axis = 1), weights = 'quadratic')\n    result = pd.Series(np.argmax(oof_pred, axis = 1))\n    print('Our oof cohen kappa score is: ', loss_score)\n    print(result.value_counts(normalize = True))\n    return y_pred\n\n","911116f9":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom matplotlib import pyplot\nimport shap","f3c6d38c":"def run_xgb(reduce_train, final_test, usefull_features):\n    n_splits=10\n    scores=[]\n    pars = {\n        'colsample_bytree': 0.8,                 \n        'learning_rate': 0.01,\n        'max_depth': 10,\n        'subsample': 1,\n        'objective':'multi:softprob',\n        'num_class':4,\n        'eval_metric':'mlogloss',\n        'min_child_weight':3,\n        'gamma':0.25,\n        'n_estimators':500\n    }\n    target = 'accuracy_group'\n    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    y_pre=np.zeros((len(final_test),4),dtype=float)\n    final_test=xgb.DMatrix(final_test[usefull_features])\n    \n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, reduce_train[target])):\n        print('Fold {}'.format(fold + 1))\n        train_X, val_X = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        train_y, val_y = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        xgb_train = xgb.DMatrix(train_X, train_y)\n        xgb_eval = xgb.DMatrix(val_X, val_y)\n\n        xgb_model = xgb.train(pars,\n                      xgb_train,\n                      num_boost_round=1000,\n                      evals=[(xgb_train, 'train'), (xgb_eval, 'val')],\n                      verbose_eval=100,\n                      early_stopping_rounds=20\n                     )\n\n        val_X=xgb.DMatrix(val_X)\n        pred_val=[np.argmax(x) for x in xgb_model.predict(val_X)]\n        score=cohen_kappa_score(pred_val,val_y,weights='quadratic')\n        scores.append(score)\n        print('choen_kappa_score :',score)\n\n        pred=xgb_model.predict(final_test)\n        y_pre+=pred\n\n    pred = np.asarray([np.argmax(line) for line in y_pre])\n    print('Mean score:',np.mean(scores))\n    \n    return xgb_model,pred\n","59ffa802":"# ensemble of models\n","0696c21a":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels = encode_title(train, test, train_labels)\n# tranform function to get the train and test set","f8715ee0":"reduce_train, reduce_test, categoricals = get_train_and_test(train, test)","0fdff354":"print(win_code)","3409b5bd":"# function that creates more features\ndef preprocess(reduce_train, reduce_test):\n    for df in [reduce_train, reduce_test]:\n        df['installation_session_count'] = df.groupby(['installation_id'])['Clip'].transform('count')\n        df['installation_duration_mean'] = df.groupby(['installation_id'])['duration_mean'].transform('mean')\n        #df['installation_duration_std'] = df.groupby(['installation_id'])['duration_mean'].transform('std')\n        df['installation_title_nunique'] = df.groupby(['installation_id'])['session_title'].transform('nunique')\n        \n        df['sum_event_code_count'] = df[[2050, 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, \n                                        4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, \n                                        2040, 4090, 4220, 4095]].sum(axis = 1)\n        \n        df['installation_event_code_count_mean'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('mean')\n        #df['installation_event_code_count_std'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('std')\n        \n    features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\n    features = [x for x in features if x not in ['accuracy_group', 'installation_id']]\n    return reduce_train, reduce_test, features\n# call feature engineering function\nreduce_train, reduce_test, features = preprocess(reduce_train, reduce_test)","75f5d160":"reduce_test.head()\n# # next codes are to select only the feature that increase our cohen kappe score\n# new_features = ['installation_session_count', 'installation_duration_mean', 'installation_duration_std', 'installation_title_nunique', 'sum_event_code_count', 'installation_event_code_count_mean', \n#                 'installation_event_code_count_std']\n# usefull_features = [col for col in features if col not in new_features]\n# best_features = run_feature_selection(reduce_train, reduce_test, usefull_features, new_features)","cebdbebf":"y_lgb_pred = run_lgb(reduce_train, reduce_test, features)\n#predict(reduce_test, sample_submission, y_pred)","d9a42609":"y_xgb_pred = run_xgb(reduce_train, reduce_test, features)\n#predict(reduce_test, sample_submission, y_pred)","b7792497":"print(y_xgb_pred[1])","6d1410ca":"sub=pd.DataFrame({'installation_id':sample_submission.installation_id,'accuracy_group':y_xgb_pred[1]})","43748a11":"sub.head()","e77168ca":"def predict(reduce_test, sample_submission, y_pred):\n    sample_submission['accuracy_group'] = np.round(y_pred).astype('int')\n    sample_submission.to_csv('submission.csv', index = False)\n    print(sample_submission['accuracy_group'].value_counts(normalize = True))","311f35a3":"ensembled_prediction = y_lgb_pred.argmax(axis = 1)\npredict(reduce_test, sample_submission, ensembled_prediction)","bdbb9813":"1. * This kernel is totally based on [feature-engineering-v-1-0](https:\/\/www.kaggle.com\/ragnar123\/feature-engineering-v-1-0)\nand [xgboost-feature-selection-dsbowl](https:\/\/www.kaggle.com\/shahules\/xgboost-feature-selection-dsbowl) \nI used the feautres of first kernel and ensemble the result of Xgboost model and LGbm model.\n\n","fe672f4c":"# Notes\n* Check the distribution of the target variable of the out of folds score and the prediction distribution. A good model should more or less have the same distribution.","325b1a97":"# Objective\n\n* In the last notebook we create our baseline model including a feature selection part. \n* Cohen cappa score of 0.456 (lb) with a local cv score of 0.529\n* In this notebook we are going to add more features and remove others that i think they overfitt the train set and then check if our local cv score improve.\n* Next, we will check if this improvement aligns with the lb."}}