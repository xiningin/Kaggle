{"cell_type":{"0e6db2c5":"code","a276281c":"code","de3319b1":"code","1adf1691":"code","d0beebb9":"code","4e417842":"code","9235ba7e":"code","7046e5b4":"code","c3ff6bf9":"code","a2fd922a":"code","cf6feb49":"code","2d7a5f4a":"code","24072adc":"code","f34c1fbe":"code","3a50db2a":"code","fbe173c0":"code","d954ab32":"code","a5a9b0f4":"code","3492f2ab":"code","56296a2a":"code","fbb50d14":"markdown","353a606d":"markdown"},"source":{"0e6db2c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n# Any results you write to the current directory are saved as output.","a276281c":"dataset_train = pd.read_csv('..\/input\/Google_Stock_Price_Train.csv')","de3319b1":"dataset_train.shape","1adf1691":"plt.figure(figsize=(15,5))\ndataset_train['Open'].plot()","d0beebb9":"training_set = dataset_train.iloc[:, 1:2].values","4e417842":"# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","9235ba7e":"# Creating a data structure with 60 timesteps and 1 output\nX_train = []\ny_train = []\nfor i in range(60, 1258):\n    X_train.append(training_set_scaled[i-60:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","7046e5b4":"X_train[:2]","c3ff6bf9":"# Reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n","a2fd922a":"X_train[:2]","cf6feb49":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n","2d7a5f4a":"# Initialising the RNN\nregressor = Sequential()","24072adc":"# Adding the first LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\n","f34c1fbe":"# Adding the output layer\nregressor.add(Dense(units = 1))","3a50db2a":"# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n","fbe173c0":"# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","d954ab32":"# Getting the real stock price of 2017\ndataset_test = pd.read_csv('..\/input\/Google_Stock_Price_Test.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values","a5a9b0f4":"# Getting the predicted stock price of 2017\ndataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))","3492f2ab":"predicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","56296a2a":"# Visualising the results\nplt.figure(figsize=(15,5))\nplt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()\n","fbb50d14":"### Part 2 - Building the RNN","353a606d":"## Part 3 - Making the predictions and visualising the results"}}