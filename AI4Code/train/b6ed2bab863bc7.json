{"cell_type":{"98952ed6":"code","d2779ec5":"code","31a4a3a9":"code","8690d829":"code","4bc5f1d1":"code","338fcd83":"code","fe5ee6a7":"code","bbd6bac5":"code","5c6152e0":"code","d3a63b48":"code","0dbe9779":"code","abb90660":"code","a0c930f2":"code","2d04f237":"code","a0a143b1":"code","46f3fceb":"code","9f91a227":"code","eb7d11e1":"code","72c3e5ae":"code","3f45011c":"code","b8f457bd":"code","98bc084f":"code","4e768951":"code","c9e1c46f":"code","03da1b14":"markdown","ce4bac10":"markdown","706a9c2a":"markdown","c6ecb121":"markdown","c2028fda":"markdown","4e50fa39":"markdown","12442c20":"markdown","033587fe":"markdown","ce7c526d":"markdown","cda7d809":"markdown","e8a471f1":"markdown","d3a06e4b":"markdown","83c45066":"markdown","94676907":"markdown","585e79d7":"markdown","345fdd9d":"markdown","4193cb14":"markdown","1544e3bc":"markdown","2994e5c0":"markdown","a275722a":"markdown","4e81ab76":"markdown","3ffe1fb5":"markdown","9527acca":"markdown"},"source":{"98952ed6":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nfrom sklearn.cluster import KMeans\n\npio.templates.default = \"plotly_white\"\n\npath = '..\/input\/kaggle-survey-2019\/'\n\nquestions_key = pd.read_csv(path+'multiple_choice_responses.csv', nrows=1)\nquestions_key = questions_key.transpose().reset_index()\nquestions_key.columns = ['q_num', 'q_text']\nq_text = questions_key.q_text.str.split('-', n=1, expand=True)\nquestions_key['q_text_1'] = q_text[0].str.strip()\nquestions_key['q_text_2'] = q_text[1].str.strip()\nquestions_key.drop(columns=['q_text'], inplace=True)\n\nresponse_all = pd.read_csv(path+'multiple_choice_responses.csv', skiprows=2, header=None)","d2779ec5":"def new_job_label (row):\n    if row['job_title'] == 'Data Scientist':\n        return 'Data Scientists'\n    if row['job_title'] == 'Student':\n        return 'Students\/Not employed\/Others'\n    if row['job_title'] == 'Not employed':\n        return 'Students\/Not employed\/Others'\n    if row['job_title'] == 'Other':\n        return 'Students\/Not employed\/Others'\n    else :\n        return 'Non Data Scientist'\n\ndef get_subset (data, col_from, col_to):\n    df_sub = data.iloc[:, col_from:col_to]\n    df_sub = pd.get_dummies(df_sub)\n    df_sub.columns = [col.split('_')[-1].strip().split('(')[0].strip() for col in df_sub.columns]\n    df_sub['job_title'] = data[6]\n    df_sub['job_ds'] = df_sub.apply(new_job_label, axis=1)\n    marker_valid = (df_sub.sum(axis=1, numeric_only=True) > 0)\n    return df_sub[marker_valid]\n\n\nmedia = get_subset(response_all, 22, 34)\nalgorithms = get_subset(response_all, 118, 130)\nframeworks = get_subset(response_all, 155, 167)\n\nmedia_table = response_all.iloc[:, 22:34]\nmedia_table = pd.get_dummies(media_table)\nmedia_table.columns = [col.split('_')[-1].strip() for col in media_table.columns]\nmedia_table = media_table[(media_table.sum(axis=1, numeric_only=True) > 0)]\n# media_table.drop(columns=['None', 'Other'], inplace=True)\n\nalgorithms_media = pd.merge(algorithms.drop(columns=['None', 'Other']), \n         media.drop(columns=['None', 'Other', 'job_title', 'job_ds']), \n         left_index=True, right_index=True)\n\nframeworks_media = pd.merge(frameworks.drop(columns=['None', 'Other']), \n         media.drop(columns=['None', 'Other', 'job_title', 'job_ds']), \n         left_index=True, right_index=True)\n","31a4a3a9":"media_mean = media_table.mean()\nmedia_sum = media_table.sum()\nmedia_table_sum = pd.DataFrame({'Count': media_sum,\n                               'Percentage': media_mean})\nmedia_table_sum.columns.name = 'Favorite media source reporting on data scient topics'\nmedia_table_sum.sort_values(by='Percentage', ascending=False, inplace=True)\nmedia_table_sum.style.format({'Percentage': \"{:.1%}\"}).bar(subset=['Percentage'], color='skyblue')","8690d829":"media_count = media_table.drop(columns=['None']).sum(axis=1)\nalgo_count = algorithms.iloc[:, 0:10].sum(axis=1)\nfm_count = frameworks.iloc[:, 0:10].sum(axis=1)\n\ncount_df = pd.DataFrame({'media_count': media_count,\n                        'algo_count': algo_count,\n                        'fm_count': fm_count})\ncount_df.dropna(inplace=True)\ncount_df['media_count_cat'] = pd.qcut(count_df['media_count'],\n                                      [0, 0.25, 0.75, 1],\n                                      labels=['Low','Medium','High'])\n# count_df['media_count_cat'] = pd.qcut(count_df['media_count'], 2, \n#                                       labels=['Low','High'])\n\nmedia_cat_n = count_df['media_count_cat'].value_counts(sort=False)\n\nalgo_low = count_df.query('media_count_cat == \"Low\"')[\n    'algo_count'].value_counts().sort_index()\nalgo_low = algo_low\/media_cat_n['Low']\n\nalgo_med = count_df.query('media_count_cat == \"Medium\"')[\n    'algo_count'].value_counts().sort_index()\nalgo_med = algo_med\/media_cat_n['Medium']\n\nalgo_hi = count_df.query('media_count_cat == \"High\"')[\n    'algo_count'].value_counts().sort_index()\nalgo_hi = algo_hi\/media_cat_n['High']\n\nfm_low = count_df.query('media_count_cat == \"Low\"')[\n    'fm_count'].value_counts().sort_index()\nfm_low = fm_low\/media_cat_n['Low']\n\nfm_med = count_df.query('media_count_cat == \"Medium\"')[\n    'fm_count'].value_counts().sort_index()\nfm_med = fm_med\/media_cat_n['Medium']\n\nfm_hi = count_df.query('media_count_cat == \"High\"')[\n    'fm_count'].value_counts().sort_index()\nfm_hi = fm_hi\/media_cat_n['High']","4bc5f1d1":"fig = go.Figure(\n    data=[go.Histogram(\n        x=media_count,\n        histnorm='percent',\n        marker= dict(\n            color='skyblue',\n            opacity=0.6,\n            line= {\"color\": \"white\", \"width\": 2}\n        ))])\n\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(showgrid=False, zeroline=False, ticksuffix=\"%\")\nfig.update_layout(\n    title='Distribution of the number of media sources used',\n    width=600,\n    height=400,\n    yaxis=dict(title=\"% of respondents\",)\n)\nfig.show()","338fcd83":"fig = make_subplots(rows=1, cols=2,\n                    subplot_titles=(\"Number of ML Algorithms\",\n                                    \"Number of ML Frameworks\"))\n\n# Algorithms\nfig.add_trace(go.Scatter(\n    x=algo_low.index,\n    y=algo_low.values,\n    name='Low',\n    fill='tozeroy',\n    marker=dict(color='gray'),\n    showlegend=True,\n    opacity=0.2), 1, 1\n)\n\nfig.add_trace(go.Scatter(\n    x=algo_med.index,\n    y=algo_med.values,\n    name='Medium',\n    fill='tozeroy',\n    marker=dict(color='salmon'),\n    showlegend=True,\n    opacity=0.2), 1, 1\n)\n\nfig.add_trace(go.Scatter(\n    x=algo_hi.index,\n    y=algo_hi.values,\n    name='High',\n    fill='tozeroy',\n    marker=dict(color='dodgerblue'),\n    showlegend=True,\n    opacity=0.2), 1, 1\n)\n\n# Frameworks\nfig.add_trace(go.Scatter(\n    x=fm_low.index,\n    y=fm_low.values,\n    name='Low',\n    fill='tozeroy',\n    marker=dict(color='grey'),\n    showlegend=False,), 1, 2\n)\n\nfig.add_trace(go.Scatter(\n    x=fm_med.index,\n    y=fm_med.values,\n    name='Medium',\n    fill='tozeroy',\n    marker=dict(color='salmon'),\n    showlegend=False,), 1, 2\n)\n\nfig.add_trace(go.Scatter(\n    x=fm_hi.index,\n    y=fm_hi.values,\n    name='High',\n    fill='tozeroy',\n    marker=dict(color='dodgerblue'),\n    showlegend=False,), 1, 2\n)\n\nfig.update_traces(opacity=0.2, mode='lines')\n\nfig.update_layout(\n    width=800,\n    height=400,\n    yaxis1=dict(title=\"% of respondents\",\n                tickformat='%'),\n    yaxis2=dict(tickformat='%'),\n)\n\nfig.update_xaxes(showgrid=False, zeroline=False)\nfig.update_yaxes(showgrid=False, range=[0, 0.3])\nfig.show()","fe5ee6a7":"def draw_segments(data, thres_high, thres_low, xref, color='skyblue'):\n    \"\"\"\n    Draw line segment connecting the two dots. \n    - If difference is greater than high\/low threshold, draw segment\n    - Otherwise draw near invisible segment\n    \"\"\"\n    segment_list = []\n    for i in range(len(data[0])):\n        value = data['diff'].iloc[i]\n        if (value >= thres_high):\n            segment = dict(\n                type='line',\n                x0=data[0].iloc[i]*1.01,\n                y0=i,\n                x1=data[1].iloc[i]*0.99,\n                y1=i,\n                xref=xref,\n                line=dict(\n                    color=color,\n                    width=2,\n                )\n            )\n        elif (value <= thres_low):\n            segment = dict(\n                type='line',\n                x0=data[0].iloc[i]*0.99,\n                y0=i,\n                x1=data[1].iloc[i]*1.01,\n                y1=i,\n                xref=xref,\n                line=dict(\n                    color='grey',\n                    width=2,\n                )\n            )\n        else:\n            segment = dict(\n                type='line',\n                x0=data[0].iloc[i]+0.01,\n                y0=i,\n                x1=data[1].iloc[i]-0.01,\n                y1=i,\n                xref=xref,\n                line=dict(\n                    color='whitesmoke',\n                    width=0.1\n                )\n            )\n        segment_list.append(segment)\n    return segment_list\n\ndef draw_annotation(data, thres_high, thres_low, xref):\n    \"\"\"\n    Draw annotation \n    - If difference is greater than {thres}, annotate with value\n    \"\"\"\n    annot_list = []\n    for i in range(len(data[0])):\n        value = data['diff'].iloc[i]\n        if (value >= thres_high):\n            annot = dict(\n                x=data[1].iloc[i],\n                y=i,\n                xref=xref,\n                xshift=30,\n                text=f\"+{value:0.1%}\",\n                showarrow=False\n            )\n        elif (value <= thres_low): \n            annot = dict(\n                x=data[1].iloc[i],\n                y=i,\n                xref=xref,\n                xshift=-30,\n                text=f\"{value:0.1%}\",\n                showarrow=False\n            )\n        else:\n            annot = dict(\n                x=data[1].iloc[i],\n                y=i,\n                text=\"\",\n                showarrow=False\n            )\n        annot_list.append(annot)\n    return annot_list\n\n\ndef dotplot_diff_media (media_type):\n    data_list = []\n    for data_input in [algorithms_media, frameworks_media]:\n        data = data_input.groupby(media_type).mean().T.iloc[0:10]\n        data['Average'] = data.mean(axis=1)\n        data.sort_values(by='Average', inplace=True)\n        data['diff'] = data[1]-data[0]\n        data_list.append(data)\n\n    fig = make_subplots(\n        rows=1, cols=2,\n        subplot_titles=['ML Algorithms\/Models', \n                        'ML Frameworks\/Libraries'],\n        horizontal_spacing=0.2,\n        x_title='% in each group regularly using the given ML Algorithm\/Framework'\n    )\n\n    # Algorithms\n    fig.add_trace(\n        go.Scatter(x=data_list[0][1],\n                   y=data_list[0].index,\n                   name='Yes',\n                   mode=\"markers\",\n                   marker=dict(color='#4ec2f7', line_width=1, size=9)\n                   ), 1, 1)\n\n    fig.add_trace(\n        go.Scatter(x=data_list[0][0],\n                   y=data_list[0].index,\n                   name='No',\n                   mode=\"markers\",\n                   marker=dict(color='grey', symbol='x',\n                               line_width=0.5, size=8)\n                   ), 1, 1)\n\n    # Frameworks\n    fig.add_trace(\n        go.Scatter(x=data_list[1][1],\n                   y=data_list[1].index,\n                   name='Yes',\n                   showlegend=False,\n                   mode=\"markers\",\n                   marker=dict(color='#4ec2f7', line_width=1, size=9)\n                   ), 1, 2)\n\n    fig.add_trace(\n        go.Scatter(x=data_list[1][0],\n                   y=data_list[1].index,\n                   name='No',\n                   showlegend=False,\n                   mode=\"markers\",\n                   marker=dict(color='grey', symbol='x',\n                               line_width=0.5, size=8)\n                   ), 1, 2)\n\n    # Annotations\n    segment_1 = draw_segments(data_list[0], 0.05, -0.05, 'x1')\n    annot_1 = draw_annotation(data_list[0], 0.05, -0.05, 'x1')\n\n    segment_2 = draw_segments(data_list[1], 0.05, -0.05, 'x2')\n    annot_2 = draw_annotation(data_list[1], 0.05, -0.05, 'x2')\n\n    segments = segment_1 + segment_2\n    annotations = annot_1 + annot_2\n\n    title = {\n        'text': f'{media_type} is a favorite media source',\n        'y': 0.9,\n        'x': 0.5,\n        'font': {'size': 20},\n        'xanchor': 'center',\n        'yanchor': 'top'}\n\n    fig.update_layout(title=title,\n                      shapes=segments,\n                      annotations=annotations,\n                      width=900,\n                      height=500,\n                      xaxis_tickformat='%',\n                      xaxis2_tickformat='%',\n                      margin=dict(t=140,),\n                      legend_orientation=\"h\",\n                      legend=dict(x=0.4,\n                                  xanchor='center',\n                                  y=1.2)\n                      )\n\n    fig.update_xaxes(range=[0, 0.85], showgrid=False, zeroline=False)\n    fig.update_yaxes(showgrid=True, gridcolor='aliceblue')\n    return(fig)","bbd6bac5":"dotplot_diff_media('Kaggle')","5c6152e0":"dotplot_diff_media('Blogs')","d3a63b48":"dotplot_diff_media('YouTube')","0dbe9779":"media_cluster = media.iloc[:, 0:10]\ny_pred = KMeans(n_clusters=4, random_state=42, max_iter=10000).fit_predict(\n    media_cluster.values)\nmedia_cluster['cluster_number'] = y_pred\nmedia_cluster['cluster_label'] = media_cluster['cluster_number']\nmedia_cluster.replace({'cluster_label': {0: 'blogs',\n                                        1: 'kaggle_blogs',\n                                        2: 'kaggle_youtube',\n                                        3: 'kaggle_youtube_blogs'}}, inplace=True)","abb90660":"data = media_cluster.groupby('cluster_number').mean().T\ncluster_count = media_cluster.cluster_number.value_counts(sort=False)\n\nfig = make_subplots(\n    rows=2,\n    cols=2,\n    subplot_titles=(f\"1: Blogs<br> (N={cluster_count[0]})<br> \", \n                    f\"2: Kaggle + Blogs<br> (N={cluster_count[1]})<br> \", \n                    f\"3: Kaggle + YouTube<br> (N={cluster_count[2]})<br> \", \n                    f\"4: Kaggle + Blogs + YouTube<br> (N={cluster_count[3]})<br> \"),\n    specs=[[{'type': 'polar'}]*2]*2,\n)\n\nfig.add_trace(\n    go.Barpolar(\n        r=data[0]*100,\n        theta=data.index,\n        name='Cluster 0',\n        marker_color='teal',\n        opacity=0.6,\n    ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Barpolar(\n        r=data[1]*100,\n        theta=data.index,\n        name='Cluster 1',\n        marker_color='gold',\n        opacity=0.6,\n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Barpolar(\n        r=data[2]*100,\n        theta=data.index,\n        name='Cluster 2',\n        marker_color='tomato',\n        opacity=0.6,\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Barpolar(\n        r=data[3]*100,\n        theta=data.index,\n        name='Cluster 3',\n        marker_color='skyblue',\n        opacity=0.6,\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    title={'text': '4 Profiles of Media Diets',\n           'font_size': 22,\n           'x': 0.5,\n           'y': 0.95},\n    showlegend=False,\n    title_font_color='#333333',\n    margin=dict(t=150, l=20, r=20),\n    legend_font_color='gray',\n    legend_itemclick=False,\n    legend_itemdoubleclick=False,\n    width=850,\n    height=700,\n    polar=dict(\n        angularaxis=dict(\n            direction='clockwise',\n            rotation=110,\n            color='grey',\n            visible=True,\n            showline=True,\n        ),\n        radialaxis=dict(\n            ticksuffix='%',\n            tickvals=[25, 50, 75],\n            range=[0, 100],\n            visible=True,\n            showline=True,\n        )),\n    polar2=dict(\n        angularaxis=dict(\n            direction='clockwise',\n            rotation=110,\n            color='grey',\n            visible=True,\n            showline=True,\n        ),\n        radialaxis=dict(\n            ticksuffix='%',\n            tickvals=[25, 50, 75],\n            range=[0, 100],\n            visible=True,\n            showline=True,\n        )),\n    polar3=dict(\n        angularaxis=dict(\n            direction='clockwise',\n            rotation=110,\n            color='grey',\n            visible=True,\n            showline=True,\n        ),\n        radialaxis=dict(\n            ticksuffix='%',\n            tickvals=[25, 50, 75],\n            range=[0, 100],\n            visible=True,\n            showline=True,\n        )),\n    polar4=dict(\n        angularaxis=dict(\n            direction='clockwise',\n            rotation=110,\n            color='grey',\n            visible=True,\n            showline=True,\n        ),\n        radialaxis=dict(\n            ticksuffix='%',\n            tickvals=[25, 50, 75],\n            range=[0, 100],\n            visible=True,\n            showline=True,\n        )),\n)\n\nfig.show()","a0c930f2":"algorithms_media_cluster = pd.merge(algorithms.drop(columns=['None', 'Other']),\n                                    media_cluster[['cluster_label']],\n                                    left_index=True, right_index=True)\n\nframeworks_media_cluster = pd.merge(frameworks.drop(columns=['None', 'Other']),\n                                    media_cluster[['cluster_label']],\n                                    left_index=True, right_index=True)","2d04f237":"def dotplot_diff_cluster(group_1, group_2, title_text, line_color):\n\n    cluster_colors = {\n        'blogs': 'teal',\n        'kaggle_blogs': 'gold',\n        'kaggle_youtube': 'tomato',\n        'kaggle_youtube_blogs': 'skyblue'\n    }\n\n    cluster_labels = {\n        'blogs': 'Blogs only',\n        'kaggle_blogs': 'Kaggle + Blogs',\n        'kaggle_youtube': 'Kaggle + YouTube',\n        'kaggle_youtube_blogs': 'Kaggle + Blogs + YouTube'\n    }\n\n    data_list = []\n    for data_input in [algorithms_media_cluster, frameworks_media_cluster]:\n        data = pd.DataFrame()\n        data[0] = data_input.query(\n            'cluster_label == @group_1').mean().T.iloc[0:-1]\n        data[1] = data_input.query(\n            'cluster_label == @group_2').mean().T.iloc[0:-1]\n        data['Average'] = data_input.mean()\n        data.sort_values(by='Average', inplace=True)\n        data['diff'] = data[1]-data[0]\n        data_list.append(data)\n\n    fig = make_subplots(\n        rows=1, cols=2,\n        subplot_titles=['ML Algorithms\/Models', 'ML Frameworks\/Libraries'],\n        horizontal_spacing=0.2,\n        x_title='% in each group regularly using the given ML Algorithm\/Framework'\n    )\n\n    # Algorithms\n    fig.add_trace(\n        go.Scatter(x=data_list[0][0],\n                   y=data_list[0].index,\n                   name=cluster_labels.get(group_1),\n                   mode=\"markers\",\n                   marker=dict(\n            color=cluster_colors.get(group_1),\n            line_width=1, size=10)\n        ), 1, 1)\n\n    fig.add_trace(\n        go.Scatter(x=data_list[0][1],\n                   y=data_list[0].index,\n                   name=cluster_labels.get(group_2),\n                   mode=\"markers\",\n                   marker=dict(color=cluster_colors.get(group_2),\n                               line_width=1, size=10)\n                   ), 1, 1)\n\n    # Frameworks\n    fig.add_trace(\n        go.Scatter(x=data_list[1][0],\n                   y=data_list[1].index,\n                   name=cluster_labels.get(group_1),\n                   mode=\"markers\",\n                   showlegend=False,\n                   marker=dict(\n            color=cluster_colors.get(group_1),\n            line_width=1, size=10)\n        ), 1, 2)\n\n    fig.add_trace(\n        go.Scatter(x=data_list[1][1],\n                   y=data_list[1].index,\n                   name=cluster_labels.get(group_2),\n                   showlegend=False,\n                   mode=\"markers\",\n                   marker=dict(color=cluster_colors.get(group_2),\n                               line_width=1, size=10)\n                   ), 1, 2)\n\n    # Annotations\n    segment_1 = draw_segments(data_list[0], 0.05, -0.05, 'x1', line_color)\n    annot_1 = draw_annotation(data_list[0], 0.05, -0.05, 'x1')\n\n    segment_2 = draw_segments(data_list[1], 0.05, -0.05, 'x2', line_color)\n    annot_2 = draw_annotation(data_list[1], 0.05, -0.05, 'x2')\n\n    segments = segment_1 + segment_2\n    annotations = annot_1 + annot_2\n\n    title = {\n        'text': title_text,\n        'y': 0.9,\n        'x': 0.5,\n        'font': {'size': 20},\n        'xanchor': 'center',\n        'yanchor': 'top'}\n\n    fig.update_layout(title=title,\n                      shapes=segments,\n                      annotations=annotations,\n                      width=900,\n                      height=500,\n                      xaxis_tickformat='%',\n                      xaxis2_tickformat='%',\n                      margin=dict(t=140,),\n                      legend_orientation=\"h\",\n                      legend=dict(x=0.4,\n                                  xanchor='center',\n                                  y=1.25)\n                      )\n\n    fig.update_xaxes(range=[0, 0.85], showgrid=False, zeroline=False)\n    fig.update_yaxes(showgrid=True, gridcolor='aliceblue')\n    return fig","a0a143b1":"dotplot_diff_cluster('kaggle_youtube', 'kaggle_youtube_blogs', 'Additional Values from Blogs', 'skyblue')","46f3fceb":"dotplot_diff_cluster('kaggle_blogs', 'kaggle_youtube_blogs', 'Additional Values from YouTube', 'skyblue')","9f91a227":"dotplot_diff_cluster('kaggle_youtube', 'kaggle_blogs', 'Blogs vs YouTube', 'gold')","eb7d11e1":"def get_slope_color (media):\n    if media == 'Kaggle':\n        return 'deepskyblue'\n    if media == 'Blogs':\n        return 'gold'\n    if media == 'YouTube':\n        return 'tomato'\n    else :\n        return 'lightgrey'\n\nmedia_rank = media.query('job_ds != \"Non Data Scientist\"').groupby(\n    'job_ds').mean()\nmedia_rank.drop(columns=['None', 'Other'], inplace=True)","72c3e5ae":"fig = go.Figure()\n\nfor col in media_rank.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=media_rank.index,\n        y=media_rank[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(\n            color=get_slope_color(col),\n            #color= 'dodgerblue' if col == 'Blogs' or col == 'YouTube' else 'lightgrey',\n            width=2.5\n        ),\n    ))\n\n\nfig.update_layout(\n    width=600,\n    height=600,\n    xaxis=dict(\n        showline=False,\n        showgrid=False,\n        showticklabels=False,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    showlegend=False,\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=200,\n        r=100,\n        t=110,\n    ),\n)\n\n# Adding labels\nannotations = []\nfor col in ['Kaggle', 'Blogs', 'YouTube']:\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.0, y=media_rank[col][0],\n                            xanchor='right', yanchor='middle',\n                            text=f'{col} {media_rank[col][0]*100:0.1f}%',\n                            showarrow=False))\n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=1.0, y=media_rank[col][1],\n                            xanchor='left', yanchor='middle',\n                            text=f'{col} {media_rank[col][1]*100:0.1f}%',\n                            showarrow=False))\n\nfor col in ['Twitter', 'Hacker News', 'Reddit', 'Course Forums',\n            'Podcasts', 'Journal Publications',\n            'Slack Communities']:\n    # labeling the left_side of the plot\n    annotations.append(dict(xref='paper', x=0.0, y=media_rank[col][0],\n                            xanchor='right', yanchor='middle',\n                            text=f'{col}',\n                            font=dict(size=10),\n                            showarrow=False))\n\n# Job labels\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=0.98,\n                        xanchor='center', yanchor='bottom',\n                        text='% of Data Scientists<br> ',\n                        font=dict(size=14),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='paper', x=0.9, y=0.98,\n                        xanchor='center', yanchor='bottom',\n                        text='% of Students\/<br>Not employed\/Others',\n                        font=dict(size=14),\n                        showarrow=False))\n\ntitle = {\n        'text': 'Aspiring Data Scientists have Different<br> Media Choices from Data Scientists',\n        'y': 0.95,\n        'x': 0.5,\n        'font': {'size': 18},\n        'xref': 'paper',\n        'yanchor': 'top'}\n\nfig.update_layout(\n    title=title,\n    width=500,\n    height=450,\n    annotations=annotations,\n    margin=dict(t=100, b=10))\n\nfig.show()","3f45011c":"media_cluster_by_job = pd.merge(media[['job_ds']],\n                                media_cluster[['cluster_label']],\n                                left_index=True, right_index=True)\n\nmedia_cluster_by_job = pd.get_dummies(media_cluster_by_job.query('job_ds != \"Non Data Scientist\"'), columns=[\n                                      'cluster_label']).groupby('job_ds').mean().T","b8f457bd":"fig = go.Figure()\n\ncluster_labels = ['Blogs only', \n                  'Kaggle +<br>Blogs',\n                  'Kaggle +<br>YouTube', \n                  'Kaggle +<br>Blogs + YouTube']\n\ncluster_colors = ['teal', 'gold', 'tomato', 'skyblue']\n\nx_data = [media_cluster_by_job['Students\/Not employed\/Others']*100,\n         media_cluster_by_job['Data Scientists']*100]\n\ny_data = ['Students\/ <br>Not employed\/Others',\n         'Data Scientists']\n\nfig = go.Figure()\n\nfor i in range(0, len(x_data[0])):\n    for xd, yd in zip(x_data, y_data):\n        fig.add_trace(go.Bar(\n            x=[xd[i]], y=[yd],\n            orientation='h',\n            width=0.5,\n            marker=dict(\n                color=cluster_colors[i],\n                opacity=0.7,\n                line=dict(color='white', width=1)\n            )\n        ))\n        \nfig.update_layout(\n    xaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n        domain=[0.15, 1]\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showline=False,\n        showticklabels=False,\n        zeroline=False,\n    ),\n    barmode='stack',\n    margin=dict(l=120, r=10, t=140, b=80),\n    showlegend=False,\n)\n\nannotations = []\n\nfor yd, xd in zip(y_data, x_data):\n    # labeling the y-axis\n    annotations.append(dict(xref='paper', yref='y',\n                            x=0.14, y=yd,\n                            xanchor='right',\n                            text=str(yd),\n                            showarrow=False, align='right'))\n    # labeling the first percentage of each bar (x_axis)\n    annotations.append(dict(xref='x', yref='y',\n                            x=xd[0] \/ 2, y=yd,\n                            text= f'{xd[0]:0.1f}%',\n                            showarrow=False))\n    # labeling the first Likert scale (on the top)\n    if yd == y_data[-1]:\n        annotations.append(dict(xref='x', yref='paper',\n                                x=xd[0] \/ 2, y=1.1,\n                                text=cluster_labels[0],\n                                showarrow=False))\n    space = xd[0]\n    for i in range(1, len(xd)):\n            # labeling the rest of percentages for each bar (x_axis)\n            annotations.append(dict(xref='x', yref='y',\n                                    x=space + (xd[i]\/2), y=yd,\n                                    text=f'{xd[i]:0.1f}%',\n                                    showarrow=False))\n            # labeling the Likert scale\n            if yd == y_data[-1]:\n                annotations.append(dict(xref='x', yref='paper',\n                                        x=space + (xd[i]\/2), y=1.1,\n                                        text=cluster_labels[i],\n                                        showarrow=False))\n            space += xd[i]\n\ntitle = {\n        'text': 'Distribution of Media Diet Profiles <br>among Aspiring Data Scientists and Data Scientists',\n        'y': 0.9,\n        'x': 0.5,\n        'font': {'size': 16},\n        'xref': 'paper',\n        'yanchor': 'top'}           \n            \nfig.update_layout(\n    title=title,\n    width=700,\n    height=300,\n    margin=dict(t=100,b=20,),\n    annotations=annotations)\nfig.show()","98bc084f":"def get_slope_color_2(data):\n    diff = data.iloc[:, 1] - data.iloc[:, 0]\n    #diff = abs(diff)\n    color_list = []\n    for i in range(0, len(diff)):\n        if diff[i] >= 0.05:\n            color = 'dodgerblue'\n        elif diff[i] <= -0.05:\n            color = 'coral'\n        else:\n            color = 'lightgrey'\n        color_list.append(color)\n    return color_list\n\n\ndef gen_subplot_data (data_input, label):\n    data = data_input.query('job_ds == \"Students\/Not employed\/Others\"').groupby('cluster_label').mean().T\n    data['ds_avg'] = data_input.query('job_ds == \"Data Scientists\"').mean().T\n    data.sort_values(by='ds_avg', inplace=True)\n    data['label'] = label\n    data['diff_ds_b'] = data['blogs']-data['ds_avg']\n    data['diff_ds_kb'] = data['kaggle_blogs']-data['ds_avg']\n    data['diff_ds_ky'] = data['kaggle_youtube']-data['ds_avg']\n    data['diff_ds_kyb'] = data['kaggle_youtube_blogs']-data['ds_avg']\n\n    data_sub_yt_blog = data[['diff_ds_ky', 'diff_ds_kb', 'label']]\n    data_sub_yt_blog['color'] = get_slope_color_2(data_sub_yt_blog)\n    data_sub_yt_blog = data_sub_yt_blog.T\n\n    data_sub_blog = data[['diff_ds_ky', 'diff_ds_kyb', 'label']]\n    data_sub_blog['color'] = get_slope_color_2(data_sub_blog)\n    data_sub_blog = data_sub_blog.T\n\n    data_sub_yt = data[['diff_ds_kb', 'diff_ds_kyb', 'label']]\n    data_sub_yt['color'] = get_slope_color_2(data_sub_yt)\n    data_sub_yt = data_sub_yt.T\n    return data_sub_yt_blog, data_sub_blog, data_sub_yt\n    \n    \ndef annotate_subplot_left(data, column, xref):\n    # labeling the left_side of the plot\n    label_l = data[column]['label']\n    if data[column]['color'] == 'lightgrey':\n        annot_l = dict(xref=xref, x=-0.1, y=data[column][0],\n                       xanchor='right', yanchor='middle',\n                       text=f'{label_l}',\n                       font=dict(color=\"lightgrey\"),\n                       showarrow=False)\n    else:\n        annot_l = dict(xref=xref, x=-0.1, y=data[column][0],\n                       xanchor='right', yanchor='middle',\n                       text=f'{label_l}<br> {data[column][0]*100:0.1f}%',\n                       font=dict(color=data[column]['color']),\n                       showarrow=False)\n    return annot_l\n\n\ndef annotate_subplot_right(data, column, xref):\n    # labeling the right side of the plot\n    if data[column]['color'] == 'lightgrey':\n        annot_r = dict(xref=xref, x=1.1, y=data[column][1],\n                       xanchor='left', yanchor='middle',\n                       text='',\n                       showarrow=False)\n    else:\n        annot_r = dict(xref=xref, x=1.1, y=data[column][1],\n                       xanchor='left', yanchor='middle',\n                       text=f'{data[column][1]*100:0.1f}%',\n                       font=dict(color=data[column]['color']),\n                       showarrow=False)\n\n    return annot_r\n\n\nalgo_label = ['GAN', 'Evoluationary', 'Transformer N.', 'RNN',\n                     'Bayesian', 'DNN', 'CNN', 'GBM', 'DT\/RF', 'Linear\/Logistic']\n\nframework_label = ['Fast.ai', 'Spark MLib', 'Caret', 'PyTorch', 'LightGBM', 'RandomForest',\n                   'TensorFlow', 'Xgboost', 'Keras', 'Scikit-learn']\n\nalgo_sub_yt_blog, algo_sub_blog, algo_sub_yt = gen_subplot_data(algorithms_media_cluster, algo_label)\nframework_sub_yt_blog, framework_sub_blog, framework_sub_yt = gen_subplot_data(frameworks_media_cluster, framework_label)\n","4e768951":"data_sub_yt_blog = algo_sub_yt_blog\ndata_sub_blog = algo_sub_blog\ndata_sub_yt = algo_sub_yt\n\nfig = make_subplots(\n    rows=1,\n    cols=3,\n    shared_xaxes=True,\n    shared_yaxes=True,\n)\n\n# Blogs vs YouTube\nfor col in data_sub_yt_blog.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>YouTube', 'Kaggle +<br>Blogs'],\n        y=data_sub_yt_blog[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_yt_blog[col]['color'],\n                  width=2.5),\n    ), row=1, col=1)\n\n\n# Adding Blogs\nfor col in data_sub_blog.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>YouTube', 'Kaggle + <br>Blogs + YouTube'],\n        y=data_sub_blog[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_blog[col]['color'],\n                  width=2.5),\n    ), row=1, col=2)\n\n    \n# Adding YouTube\nfor col in data_sub_yt.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>Blogs', 'Kaggle +<br>Blogs + YouTube'],\n        y=data_sub_yt[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_yt[col]['color'],\n                  width=2.5),\n    ), row=1, col=3)\n\n\n# Adding annotatios\nannotations = []\nfor col in data_sub_yt_blog.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_yt_blog, col, 'x1')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_yt_blog, col, 'x1')\n    annotations.append(annot_r)\n\n    \nfor col in data_sub_blog.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_blog, col, 'x2')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_blog, col, 'x2')\n    annotations.append(annot_r)\n\n\nfor col in data_sub_yt.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_yt, col, 'x3')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_yt, col, 'x3')\n    annotations.append(annot_r)\n    \n\nannotations.append(dict(xref='paper', yref='y', x=0.15, y=0.0,\n                        xanchor='center', yanchor='middle',\n                        text='Baseline: % of Data Scientists regularly<br> use this algorithm',\n                        font=dict(size=11),\n                        showarrow=True))\n\n\nannotations.append(dict(xref='paper', yref='y', x=0.1, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.25, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.42, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.58, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube + Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.78, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.95, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube + Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\ntitle_text = 'ML Algorithms Usage:<br>Aspiring Data Scientists with Different Media Diets<br>and How Close They are to Data Scientists <br><br>'\ntitle = {\n        'text': title_text,\n        'y': 0.95,\n        'x': 0.5,\n        'font': {'size': 18},\n        'xref': 'paper', #'yref': 'paper',\n        'yanchor': 'top'} \n\n# Axis formatting\nlayout_xaxis = dict(\n        showline=False,\n        showgrid=False,\n        showticklabels=False,\n    )\nlayout_y_axis = dict(\n        showgrid=False,\n        zeroline=True,\n        zerolinewidth=2.5, \n        zerolinecolor='dimgrey',\n        showline=False,\n        showticklabels=False,\n        #range=[-0.45, 0.05]\n    )\n\nfig.update_layout(\n    title=title,\n    xaxis=layout_xaxis,\n    yaxis=layout_y_axis,\n    xaxis2=layout_xaxis,\n    yaxis2=layout_y_axis,\n    xaxis3=layout_xaxis,\n    yaxis3=layout_y_axis,\n)\n\nfig.update_layout(annotations=annotations,\n                  width=850,\n                  height=650,\n                  showlegend=False,\n                  autosize=False,\n                  margin=dict(\n                      t=100,\n                      l=10,\n                      r=10,\n                  ),\n                  )\nfig.show()","c9e1c46f":"data_sub_yt_blog = framework_sub_yt_blog\ndata_sub_blog = framework_sub_blog\ndata_sub_yt = framework_sub_yt\n\nfig = make_subplots(\n    rows=1,\n    cols=3,\n    shared_xaxes=True,\n    shared_yaxes=True,\n)\n\n# Blogs vs YouTube\nfor col in data_sub_yt_blog.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>YouTube', 'Kaggle +<br>Blogs'],\n        y=data_sub_yt_blog[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_yt_blog[col]['color'],\n                  width=2.5),\n    ), row=1, col=1)\n\n\n# Adding Blogs\nfor col in data_sub_blog.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>YouTube', 'Kaggle + <br>Blogs + YouTube'],\n        y=data_sub_blog[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_blog[col]['color'],\n                  width=2.5),\n    ), row=1, col=2)\n\n    \n# Adding YouTube\nfor col in data_sub_yt.columns:\n    # Slope\n    fig.add_trace(go.Scatter(\n        x=['Kaggle +<br>Blogs', 'Kaggle +<br>Blogs + YouTube'],\n        y=data_sub_yt[col],\n        mode='lines+markers',\n        name=col,\n        line=dict(color=data_sub_yt[col]['color'],\n                  width=2.5),\n    ), row=1, col=3)\n\n\n# Adding annotatios\nannotations = []\nfor col in data_sub_yt_blog.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_yt_blog, col, 'x1')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_yt_blog, col, 'x1')\n    annotations.append(annot_r)\n\n    \nfor col in data_sub_blog.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_blog, col, 'x2')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_blog, col, 'x2')\n    annotations.append(annot_r)\n\n\nfor col in data_sub_yt.columns:\n    # Left side label\n    annot_l = annotate_subplot_left(data_sub_yt, col, 'x3')\n    annotations.append(annot_l)\n    # Right side label\n    annot_r = annotate_subplot_right(data_sub_yt, col, 'x3')\n    annotations.append(annot_r)\n    \n\nannotations.append(dict(xref='paper', yref='y', x=0.15, y=0.0,\n                        xanchor='center', yanchor='middle',\n                        text='Baseline: % of Data Scientists regularly<br> use this framework',\n                        font=dict(size=11),\n                        showarrow=True))\n\n\nannotations.append(dict(xref='paper', yref='y', x=0.1, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.25, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.42, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.58, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube + Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.78, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\nannotations.append(dict(xref='paper', yref='y', x=0.95, y=0.1,\n                        xanchor='center', yanchor='top',\n                        text='Kaggle +<br>YouTube + Blogs',\n                        font=dict(size=13),\n                        showarrow=False))\n\ntitle_text = 'ML Frameworks Usage:<br>Aspiring Data Scientists with Different Media Diets<br>and How Close They are to Data Scientists<br><br> '\ntitle = {\n        'text': title_text,\n        'y': 0.95,\n        'x': 0.5,\n        'font': {'size': 18},\n        'xref': 'paper', #'yref': 'paper',\n        'yanchor': 'top'} \n\n\n# Axis formatting\nlayout_xaxis = dict(\n        showline=False,\n        showgrid=False,\n        showticklabels=False,\n    )\nlayout_y_axis = dict(\n        showgrid=False,\n        zeroline=True,\n        zerolinewidth=2.5, \n        zerolinecolor='dimgrey',\n        showline=False,\n        showticklabels=False,\n        #range=[-0.45, 0.05]\n    )\n\nfig.update_layout(\n    title=title,\n    xaxis=layout_xaxis,\n    yaxis=layout_y_axis,\n    xaxis2=layout_xaxis,\n    yaxis2=layout_y_axis,\n    xaxis3=layout_xaxis,\n    yaxis3=layout_y_axis,\n)\n\nfig.update_layout(annotations=annotations,\n                  width=850,\n                  height=650,\n                  showlegend=False,\n                  autosize=False,\n                  margin=dict(\n                      l=10,\n                      r=10,\n                  ),\n                  )\nfig.show()","03da1b14":"## Finding profiles using KMeans clustering\n\nAfter performing KMeans clustering, we have 4 distinct types of media diets among the survey respondents:\n\n* Mostly Blogs, no Kaggle, and no YouTube\n* Kaggle and Blogs\n* Kaggle and YouTube\n* Kaggle, Blogs, and YouTube\n","ce4bac10":"## Popularity of Media Sources","706a9c2a":"# Media Choice and ML Tool Usage\n\nHere we want to see if people with particular media choices (e.g. read blogs vs do not read blogs) adopts various tools (e.g. uses Random Forests vs does not use Random Forests) at different rates.\n\nTo keep the scope of this article manageable, we will focus our discussion on the 'Big Three\u2019 (Kaggle, Blogs, YouTube) from now on.\n\nThe plots below compares between respondents who favors Kaggle\/Blog\/YouTube and those who do not, showing the proportion of each group who regularly use the various ML models and libraries listed, and differences greater than 5% are highlighted.","c6ecb121":"Again, YouTube is losing out on this comparison. For those who already uses Kaggle, Blogs is a more powerful addition than YouTbe.","c2028fda":"# Media Choices at a Glance","4e50fa39":"# Closing Thoughts","12442c20":"Now, let\u2019s see if there is a relationship between the diversity of our media diet (total number of media choice) and the diversity in our skillsets (total number of ML tools regularly used).\n\nHere we group the respondents into three categories according to the number of media sources they use:\n\n* Low: lower 25th percentile of the distribution (0-2 sources)\n* Medium: 25th-75th percentile (3-4 sources)\n* High: top 25th percentile (more than 5 sources)\n\nWe see that people with more diverse media choices tend to have slightly higher varieties in their toolboxes - they tend to know and use one or two more ML algorithms and libraries. \n\nNext, let's zoom in a bit closer to see if there is any relationship between particular media choices and which specific ML tools we use.\n","033587fe":"Given these combinations of media choice profiles, we can do the following pairs of comparisons to answer a few questions: \n\n* Does reading Blogs add to your skillsets if you already use Kaggle and YouTube?\n    * compare Kaggle + YouTube vs Kaggle + YouTube + Blogs\n* Does using YouTube add to your skillsets if you already use Kaggle and Blogs?\n    * compare Kaggle + Blogs vs Kaggle + YouTube + Blogs\n* If you already use Kaggle, does  Blogs or YouTube add more to what you know?\n    * compare Kaggle + Blogs vs Kaggle + YouTube\n","ce7c526d":"> ### Summary\n> * People who prefer Kaggle or Blogs as their favorite source of data science content tend to use various ML tools at higher rate, both for foundational and more advanced tools.\n> * However, people who prefer Youtube as their favorite data science related media source are \n","cda7d809":"The distribution of media diet profiles shows a similar pattern - aspiring data scientists are much more likely to choose a combination of Kaggle + YouTube, while data scientists rarely do. \n\nNow, let\u2019s conduct some similar comparisons we have done before, but this time we are limiting to the group of Aspiring Data Scientists only, and will use Data Scientist as a baseline for comparison. \n\nIn the following two plots, the percentage of data scientists using the various tools is used as the zero-line. And the vertical distance from the zero-line shows the difference in usage rate between the different groups of Aspiring Data Scientists and that of Data Scientist.\n\nThis means that groups that are closer to this base-line are using the particular tools at a rate more similar to data science practitioners. Again, differences greater than 5% between the groups are highlighted.","e8a471f1":"We see that people who favors Kaggle uses a variety of tools at a higher rate than those who do not. And the difference is non-trivial. Particularly with regard to using tree-based models (Decision Trees, Random Forest) and Gradient Boosting Machines (XGBoost, LightGBM) - the difference is more than 10%.\n\nThis is probably not surprising to anyone who have spent time on Kaggle. Tree based models and GMB algorithms are regularly used in winning kernels in Kaggle competitions. They are also frequently discussed in Kaggle forums, exposing Kaggle users to these tools.\n\nKaggle also makes it incredibly easy to learn and use new ML tools. All the great notebooks are just one click away - fork them and you will have access to all the cutting edge knowledge. \n\n![](https:\/\/assets-auto.rbl.ms\/26d9dccee2e5fb753e582143d887582e1dc8cfd119981c1b5a2c6d837b952697)\n\nI recently learnt about CatBoost from a Kaggle notebook. I felt like a cool kid.","d3a06e4b":"First let\u2019s take a look at which media sources people tend to gravitate to. The table shows the number and the proportion of survey respondents who selected the various media source as their favorite ways to get data science related content. \n\nThere are \u2018Big Three\u2019 on the leaderboard - Kaggle, Blogs, and YouTube. For a majority of us, these are the go-to choices. It is not surprising, since these platforms are rich in content, and easy to access. \n\nOf course most people use more than one media sources. The histogram below shows the distribution of the total number of media sources respondents have selected. We see  that ,ost people use less than 5 sources, and the median number is 3. ","83c45066":"> #### Summary\n> \n> What we see from comparing groups with distinct media diets (i.e. different combinations of media choices) largely echoes what we observe when simply comparing between user and non-users of a single media source. People who use Kaggle and Blogs have more diverse skillsets, uses various ML tools at a higher rate, but we do not see the same effect for YouTube users. \n> \n> * *Does reading Blogs add to your skillsets if you already use Kaggle and YouTube?* Yes\n> * *Does using YouTube add to your skillsets if you already use Kaggle and Blogs?* Not really\n> * *If you already use Kaggle, does  Blogs or YouTube add more to what you know?* Blogs\n","94676907":"# Media Diets Profile and ML Tool Usage\n\nIn this part of the analysis, we want to see if using Kaggle\/YouTube\/Blogs increases ML tool usage when combining with other media choices. To do this, we use KMeans clustering to see if there are distinct patterns of media diets among the respondents, then from there, try to isolate the added impact of Kaggle\/YouTube\/Blogs.","585e79d7":"Once again, we see a similarly weak impact from adding YouTube to our media diets. - there is barely any boost in almost all the tools. On the other hand, aspiring data scientists with Blogs in their media diets are utilizing tools a a much more similar rate to data science practitioners.","345fdd9d":"The pattern here echoes what we see in the previous section - reading Blogs do indeed correlates with higher usage rate of a wide variety of ML tools. Its benefits persists even when we have taken Kaggle and YouTube usage into account. ","4193cb14":"\n# What is a Good Media Diet for Aspiring Data Scientists?\n\nNow we turn our attention to a sub-category of the respondents - those who selected their job title as \u2018Students\u2019, \u2019Not employed\u2019, and \u2018Others\u2019. And I will now refer to this group as \u2018Aspiring Data Scientists\u2019. \n\nRecall our earlier speculation that perhaps the reason for YouTube\u2019s lack of impact on our skillsets is not because of YouTube per se, but is because of who chose to use YouTube. If people who are newer to the data science discipline (e.g. students, career switchers) are more attracted to YouTube because of the video formats and accessibility, and they are also less likely to have knowledge in or have used some of the advanced ML tools, then it might explain why tool usage rate among YouTube users are relatively lower. \n\nTo partly get around this, we can do a within-group comparison - comparing only among the Aspiring Data Scientists group. Assuming this group are similarly not experienced about the various ML tools, we can then explore if different media diets still correlates with different skillsets, despite this share feature. \n\nFirst, let\u2019s confirm if our intuition is correct - are less experienced respondents more likely to choose YouTube as their preferred media source?\n\nIndeed, comparing to data scientists in the survey, aspirating data scientists are much more likely to use YouTube, and much less likely to read Blogs.","1544e3bc":"YouTube however, shows a much different picture. There is NO discernible difference in the rate of using any particular ML algorithms between people who favors YouTube and those who do not. And in terms of ML libraries, YouTube fans are only more likely to use TensorFlow and Keras.","2994e5c0":"Blog readers similarly are much more likely to use various tools than non-blog readers. We see this for both the foundational must-haves (e.g. linear\/tree-based models, Scikit-learn), and the more advanced methods such as GBM (XGBoost, LightGBM) and Deep Learning tools (CNN, Keras).\n\nThis is likely because data science blogs (e.g. Towards Data Science, Medium) are a treasure trove of contents, whether you are beginners or veterans, I\u2019m sure you will find something new to learn. Speaking anecdotecally, reading Medium has become my personal [Wiki rabbit hole](http:\/\/).","a275722a":"#### ...Does this mean YouTube is useless?\n\n![](https:\/\/data.whicdn.com\/images\/261402563\/original.gif)\n\nFirst, as we seen above, most people use more than one media sources, and likely using them in a wide variety of combinations. This means that it is possible that a media diet consists of YouTube and some other sources could increase our skillsets, thus simply comparing \u201cYouTube vs No YouTube\" does not really present a complete picture. \n\nSecondly, as with any claims regarding whether media affects our behaviors, we run into a [self selection problem](https:\/\/en.wikipedia.org\/wiki\/Self-selection_bias). In another word, is YouTube not useful in helping people to pick up ML tools, or are people who are less well versed in ML tools tend to gravitate towards YouTube? \n\nAlthough this article cannot fully address these two problems, in the following sections I will try will dig a little deeper to explore these two possibilities.\n\n* Next up, We will explore if using Kaggle\/YouTube\/Blogs has any added effects when combined with other media choices. \n* Then, we will zoom in to a sub-category of the respondents whom I assume to have the least experience in data science - those who are students, currently unemployed, or have non-data science related jobs (\u2018Others\u2019). From there, we will see if difference in media diets makes any difference to their skillsets, taking into account their similarly lack of on-job experience.","4e81ab76":"The pattern here unfortunately agrees with what we see in the analysis above - other than TensorFlow and Keras, YouTube videos do not seem to add much to people's skillsets. If you already regularly use Kaggle and read Blogs, YouTube does not seem to add much more. ","3ffe1fb5":"# Media Choices and Machine Learning Tools Usage Pattern or: How I leant to read more blogs and watch less YouTube\n\n# Overview\n\nData science (DS) and machine learning (ML) is a fast growing discipline. As someone who has been preparing to transition into data science from a different profession, one daunting realization I had is that, there is SO. MUCH. STUFF. TO. LEARN.\n\nSo I have been wondering, how do people keep up with all these new tools and learn how to use them? \n\n*(Trying to not think of all the unread Towards Data Science newsletters piling up in my inbox)*\n\nIn this short article, I will explore a very simple and narrow aspect of this question: does the media source we choose to get data science contents from affect our data science\/machine learning related skillsets? More specifically, I will look at whether people with different media choices (e.g. reads blogs or not), and different media diets (i.e. different combinations of preferred media sources) relates to what machine learning algorithms and frameworks they know and use. \n\nTo explore this relationship between media choices and how people use different ML tools, I will be primarily relying the following questions from the [2019 Kaggle Machine Learning & Data Science Survey](https:\/\/www.kaggle.com\/c\/kaggle-survey-2019\/overview).\n\n* Q12, Who\/what are your favorite media sources that report on data science topics? \n* Q24, Which of the following ML algorithms do you use on a regular basis? \n* Q28, Which of the following machine learning frameworks do you use on a regular basis?\n\n\n> ### Summary of findings\n\n* People who prefers Kaggle, Blogs etc uses tools at higher rate; but not for Youtube users.\n* People with blogs in their media diet uses various ML algorithms and tools at higher rate than people with YouTube in their media diet.\n* Aspiring data scientists (those who are students, currently unemployed, or have non-data science related jobs whose media diet consists of Kaggle and blogs uses various tools at a much higher rate.\n","9527acca":"To recap what we have see so far\n\n* People who prefers Kaggle, Blogs etc uses tools at higher rate; but not for Youtube users.\n* People with blogs in their media diet uses various ML algorithms and tools at higher rate than people with YouTube in their media diet.\n* Aspiring data scientists (those who are students, currently unemployed, or have non-data science related jobs whose media diet consists of Kaggle and blogs uses various tools at a much higher rate.\n\n\nWhy is YouTube not an effective media source too boost our skillsets? Perhaps video formats are not conducive to learning by doing, contrast to Kaggle and blogs (where we have code snippets and links to GitHub repo). Or perhaps the contents are lower in quality? Siraj Raval scandal came to mind. \n\nOne thing to note is that people have different learning styles. So if you are a visual learner who prefer videos, then watch all the YouTube videos you like! But do follows a couple of blogs, they will definitely help. And if you deciding whether to spend your time on YouTube or Blog? I'd say Blogs!\n"}}