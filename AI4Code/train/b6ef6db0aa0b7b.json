{"cell_type":{"ac1b737b":"code","4ff40e24":"code","5da9ed6f":"code","463bf014":"code","a9fbdecf":"code","f96d5305":"code","6b834f54":"code","a7396165":"code","ac3b11d5":"code","6a7e2db6":"code","478587f7":"code","054fd8c1":"code","c2f77eb3":"code","2d30b9c2":"code","7396c95a":"code","07c40edf":"code","7a4bbcf2":"code","c9de5b6c":"code","97b3abb6":"code","a4f75445":"code","b2a49a4a":"code","4bcda257":"code","717a96b6":"code","9cbf403c":"code","d931f4d0":"code","c395e39d":"code","53920f21":"code","63ac237d":"code","19c33b72":"code","226af1d7":"code","00740d8b":"code","7219465e":"code","a70c99f6":"markdown","68f6f6d1":"markdown","e9a4fa9c":"markdown","3ad737d0":"markdown","d97828c7":"markdown","f8773771":"markdown","b1008205":"markdown","3beaba0b":"markdown","6dd4c08f":"markdown","ccee20f4":"markdown","b5a876a7":"markdown"},"source":{"ac1b737b":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\nfrom keras import regularizers, optimizers\nimport math, re, os, random\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport pandas as pd\nfrom collections import Counter\n\nimport cv2\nimport PIL\nimport tensorflow as tf\nimport gc\nimport skimage.io\nfrom sklearn.model_selection import KFold\n\nimport tensorflow_addons as tfa\nfrom tqdm import tqdm\nfrom sklearn.model_selection import StratifiedKFold","4ff40e24":"tf.__version__","5da9ed6f":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","463bf014":"IMAGE_SIZE  = 299\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n\nFOLDS = 5\nBATCH_SIZE = 128","a9fbdecf":"train_df = pd.read_csv('..\/input\/deeplearningchallengeholidays\/dataset\/train.csv')","f96d5305":"train_df['Kfold']=-1","6b834f54":"train_df=train_df.sample(frac=1).reset_index(drop=True)","a7396165":"y=train_df['Class']","ac3b11d5":"kf=StratifiedKFold(n_splits=FOLDS)\nfor fold,(t_,v_) in enumerate(kf.split(X=train_df,y=y)):\n    train_df.loc[v_,'Kfold']=fold\n","6a7e2db6":"train_data_df=train_df[train_df['Kfold']!=4]\nvalid_data_df=train_df[train_df['Kfold']==4]","478587f7":"train_datagen=ImageDataGenerator(\n        rescale=1.\/255.,           \n        rotation_range=20,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\"\n)\n\n\n\ntrain_generator=train_datagen.flow_from_dataframe(dataframe=train_data_df,\ndirectory=\"..\/input\/deeplearningchallengeholidays\/dataset\/train\",\nx_col=\"Image\",\ny_col=\"Class\",\nsubset=\"training\",\nbatch_size=BATCH_SIZE,\nseed=42,\nshuffle=False,\nclass_mode=\"categorical\",\ntarget_size=(IMAGE_SIZE,IMAGE_SIZE))\n","054fd8c1":"\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\n\nvalid_generator=valid_datagen.flow_from_dataframe(dataframe=valid_data_df,\n                                            directory=\"..\/input\/deeplearningchallengeholidays\/dataset\/train\",\n                                            x_col=\"Image\",\n                                            y_col=\"Class\",\n                                            subset=\"training\",\n                                            batch_size=BATCH_SIZE,\n                                            seed=42,\n                                            shuffle=True,\n                                            class_mode=\"categorical\",\n                                            target_size=(IMAGE_SIZE,IMAGE_SIZE))","c2f77eb3":"class_indices = train_generator.class_indices","2d30b9c2":"label_map = dict((v,k) for k,v in class_indices.items()) #flip k,v","7396c95a":"images,labels = train_generator.next()\n\n\nchoice = random.randint(0,20)\nimage = images[choice]\nplt.title(label_map[np.squeeze(np.argmax(labels[choice],axis=-1))])\nplt.imshow(image)\nplt.show()","07c40edf":"from sklearn.utils import class_weight \n\nlabel_list = train_df['Class'].tolist()\nlabel_numeric = {k: v for v, k in enumerate(set(label_list))}\nvall = [label_numeric[k] for k in label_list]\nvall = np.array(vall)\n\nclass_weights = class_weight.compute_class_weight('balanced',np.unique(vall),vall)\nclass_weights = dict(enumerate(class_weights))\nclass_weights","7a4bbcf2":"\ndef make_model():\n    \n    base_net=tf.keras.applications.InceptionResNetV2(include_top=True,weights='imagenet',input_shape = (IMAGE_SIZE,IMAGE_SIZE,3))\n    \n    x=base_net.layers[-2].output\n    \n    output=tf.keras.layers.Dense(6, activation='softmax')(x)\n \n    \n    model = tf.keras.Model(inputs=base_net.input,outputs=output)\n    \n    for layer in model.layers[:-5]:\n        layer.trainable = False\n\n    \n    \n    model.compile(\n        optimizer =tf.keras.optimizers.Adam(learning_rate=0.001) ,\n        loss='categorical_crossentropy',\n        metrics=['accuracy'])\n        \n    return model","c9de5b6c":"with strategy.scope():\n    model  = make_model()","97b3abb6":"\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n\n\n\n\n\ncallback = [\n    tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=3),\n]","a4f75445":"EPOCHS = 12\nSTEPS_PER_EPOCH = len(train_generator.filenames)\/\/BATCH_SIZE\nVALIDATION_STEPS = len(valid_generator.filenames)\/\/BATCH_SIZE","b2a49a4a":"history = model.fit_generator(\n                    train_generator,\n                    epochs=EPOCHS, \n    class_weight=class_weights,\n                    callbacks=callback,\n                    validation_data=valid_generator\n                   )","4bcda257":"model.save('.\/model.h5')","717a96b6":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\n\nplt.show()","9cbf403c":"pd.DataFrame(history.history).loc[:, ['loss', 'val_loss']].plot()","d931f4d0":"from keras.models import load_model\nfrom keras.preprocessing import image\nimport numpy as np\nimport os\n\nTEST_FOLDER_FROM_DATASET = \"..\/input\/deeplearningchallengeholidays\/dataset\/test\/\"\n\nfilenames = os.listdir(TEST_FOLDER_FROM_DATASET)","c395e39d":"label_list = pd.read_csv(\"..\/input\/deeplearningchallengeholidays\/dataset\/train.csv\")['Class'].tolist()\nlabel_numeric = {k: v for v, k in enumerate(np.unique(label_list))}\nlabel_map = dict((v,k) for k,v in label_numeric.items()) #flip k,v\nlabel_map","53920f21":"test_df = pd.DataFrame(filenames,columns=['Image'])\n\ntest_datagen=ImageDataGenerator(\n        rescale=1.\/255.,           \n#         rotation_range=20,\n#         zoom_range=0.15,\n#         width_shift_range=0.2,\n#         height_shift_range=0.2,\n#         shear_range=0.15,\n        horizontal_flip=True,\n    vertical_flip=True,\n#         fill_mode=\"nearest\"\n)\n\n\n\ntest_generator=test_datagen.flow_from_dataframe(dataframe=test_df,\ndirectory=\"..\/input\/deeplearningchallengeholidays\/dataset\/test\",\nx_col=\"Image\",\ny_col=\"Image\",                                            \nbatch_size=1,\nseed=42,\nshuffle=False,\ntarget_size=(IMAGE_SIZE,IMAGE_SIZE))","63ac237d":"tta_steps = 5\npreds_tta = []\nfor i in tqdm(range(tta_steps)):\n    test_generator.reset()\n    preds = model.predict(test_generator)\n    preds_tta.append(preds)\n","19c33b72":"final_pred = np.mean(preds_tta, axis=0)\npredicted_class_indices = np.argmax(final_pred, axis=1)","226af1d7":"submission_df = pd.DataFrame(columns=['Image','Class'])\nsubmission_df['Image'] = test_generator.filenames\nsubmission_df['Class'] = predicted_class_indices\nsubmission_df['Class'] = submission_df['Class'].map( label_map)\nsubmission_df","00740d8b":"submission_df['Class'].value_counts().plot.barh()","7219465e":"submission_df.to_csv('submission.csv',index=False)","a70c99f6":"# Submission","68f6f6d1":"# StratifiedKFold","e9a4fa9c":"# Image Generator","3ad737d0":"# visualization","d97828c7":"# Training top Layer","f8773771":"# Class Weights","b1008205":"# Train Loop","3beaba0b":"# Params","6dd4c08f":"# Evaluation","ccee20f4":"# Load Data","b5a876a7":"# Model"}}