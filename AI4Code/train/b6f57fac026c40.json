{"cell_type":{"d25a7651":"code","0edf1faf":"code","2c7905c8":"code","6851a26a":"code","c7dcc55b":"code","bf41fa0a":"code","30ae2600":"code","6acc8fed":"code","667f7dcf":"code","2c80a66a":"code","949e4e75":"code","f3db61a4":"code","a786bf2b":"code","9cda75ad":"code","50c56656":"code","be5f0dc9":"code","8acf1076":"code","f70a750c":"code","9558e9ee":"code","78d4eb5c":"code","146487a8":"code","83389c6e":"code","32653b3a":"code","72e63c2f":"code","28224434":"code","b8768bd6":"code","67d23b8a":"code","5a8ec02a":"code","5778bd26":"code","1d219d92":"code","dbabf0b8":"code","e2584ab5":"code","675e9096":"code","784430f0":"code","9c7a44e0":"code","88b52868":"code","b7b6f8a9":"code","33155ba4":"code","337465c8":"code","08a79bf0":"code","b88bdf8d":"code","64befb9a":"code","e55b32b5":"code","18874f40":"code","e8534782":"code","4c90b8ae":"markdown","c619eeb9":"markdown","9737dff5":"markdown","39326e3f":"markdown","792700e3":"markdown","363634b2":"markdown","e289c8c5":"markdown","a7450b12":"markdown","73a46e98":"markdown","77a331a7":"markdown","25044392":"markdown","24351302":"markdown","2406dcb5":"markdown","fafb15ed":"markdown","c559f08f":"markdown","a2ebd73b":"markdown","73956dd3":"markdown","0d6b0bc3":"markdown","5b93471f":"markdown","6c265efc":"markdown","8c49bfeb":"markdown","0d2228b4":"markdown","e90c48ed":"markdown","777ad430":"markdown","4879b62b":"markdown","5a9d4b6a":"markdown","13053437":"markdown","6912667b":"markdown","1cf3f181":"markdown"},"source":{"d25a7651":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)  #it is that i am gona use font_size 2.5 \n\nimport missingno as msno  #show the nerd data in the dataframe \n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline  ","0edf1faf":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","2c7905c8":"df_train.head()","6851a26a":"df_train.describe()","c7dcc55b":"df_test.describe()","bf41fa0a":"#First we chect train and test files null data -> Null data have to be fill in!!!\n#Code to make it much more simpler to look , \uac01 \ud30c\uc77c\uc5d0 null data\ub97c \ud655\uc778. \nfor col in df_train.columns:\n    wsg = 'column: {:>10}\u20a9t Percent of NaN value: {:.2f}%'.format(col, 100*(df_train[col].isnull().sum()\/df_train[col].shape[0]))\n    print(wsg)","30ae2600":"#Code to make it much more simpler to look , \uac01 \ud30c\uc77c\uc5d0 null data\ub97c \ud655\uc778. \nfor col in df_test.columns:\n    wsg = 'column: {:>10}\u20a9t Percent of NaN value: {:.2f}%'.format(col, 100*(df_test[col].isnull().sum()\/df_test[col].shape[0]))\n    print(wsg)","6acc8fed":"df_train[col].isnull().sum()  #\uc65c2\uac00 \ub098\uc624\ub294\uc9c0: \ub110 \ub370\uc774\ud130\uac00 2\uac1c \uc788\ub2e4\ub294 \uac83\uc744 \ub9d0\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. false\ub294 0, true\ub294 1\ub85c \uc77d\ub294\ub2e4. ","667f7dcf":"#To find the percentage of the null data   divide it with the total dataframe\ndf_train[col].isnull().sum() \/ df_train[col].shape[0]","2c80a66a":"#.iloc[] = index location. it brings the index that we need (distribution)\n#the blank below the graph is the null\nmsno.matrix(df=df_train.iloc[:, :],figsize=(8,8),color=(0.8,0.5,0.2))","949e4e75":"#example\ndf_train.iloc[3:4,:]","f3db61a4":"#Other way to find null data - using bar (percentage)\nmsno.bar(df=df_train.iloc[:, :],figsize=(8,8),color=(0.8,0.5,0.2))","a786bf2b":"f, ax = plt.subplots(1,2,figsize=(18,8))  #\ud558\ub098\uc758 \ud589\uc5d0 2\uac1c\uc758 \uadf8\ub9bc\uc744 \uadf8\ub9ac\uace0 \uadf8 \uc0ac\uc774\uc988\ub97c \uc815\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. \n\n#explode = make a distance between the picture\n#autopct = make a percentage \n#  ax[0], ax[1] = So which part you gona put in between 0 and 1\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('') #ylabel = blank\nsns.countplot('Survived', data=df_train, ax=ax[1])  #Count the Survived in the file df_train\nax[1].set_title('Count plot - Survived')\nplt.show()\n\n#The result show that this data is balanced ","9cda75ad":"#df_train['Survived'].value_counts() = Series, every series have a plot\ndf_train['Survived'].value_counts().plot()","50c56656":"#We can find out that there is a 12 features. \ndf_train.shape","be5f0dc9":"df_train[['Pclass','Survived']].groupby","8acf1076":"df_train[['Pclass','Survived']].groupby(['Pclass'], as_index=True).count()","f70a750c":"df_train[['Pclass','Survived']].groupby(['Pclass']).sum()","9558e9ee":"pd.crosstab(df_train['Pclass'],df_train['Survived'], margins=True).style.background_gradient(cmap='cool')","78d4eb5c":"#What's the survival rate for each class?\n#We have to as_index=False not as_index=True. Because if we make a plot we can only get one graph if we use =True\n\ndf_train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False).plot.bar()","146487a8":"y_position = 1.02\nf, ax = plt.subplots(1,2,figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32', '#FFDF00', '#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data = df_train, ax=ax[1])\nax[1].set_title('Pclass:Survived vs Dead', y = y_position)\nplt.show()","83389c6e":"f, ax = plt.subplots(1,2,figsize=(18,8))\ndf_train[['Sex','Survived']].groupby(['Sex'],as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue= 'Survived', data = df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","32653b3a":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","72e63c2f":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","28224434":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","b8768bd6":"#Other way to show in different plot\nsns.factorplot(x='Sex', y='Survived', col='Pclass',data=df_train, satureation=.5,size=9, aspect=1)","67d23b8a":"print('oldest passenger : {:.1f} Years'.format(df_train['Age'].max()))\nprint('youngest passenger : {:.1f} Years'.format(df_train['Age'].min()))\nprint('passenger average age : {:.1f} Years'.format(df_train['Age'].mean()))","5a8ec02a":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived']==1]['Age'],ax=ax)\nsns.kdeplot(df_train[df_train['Survived']==0]['Age'],ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","5778bd26":"#Age distribution withing classes, by using hist plot we can see easily \nplt.figure(figsize=(8,6))\ndf_train['Age'][df_train['Pclass']==1].plot(kind='hist')\ndf_train['Age'][df_train['Pclass']==2].plot(kind='hist')\ndf_train['Age'][df_train['Pclass']==3].plot(kind='hist')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","1d219d92":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass']==1)]['Age'],ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass']==1)]['Age'],ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('1st Class')\nplt.show()","dbabf0b8":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass']==2)]['Age'],ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass']==2)]['Age'],ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('2st Class')\nplt.show()","e2584ab5":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived']==0)&(df_train['Pclass']==3)]['Age'],ax=ax)\nsns.kdeplot(df_train[(df_train['Survived']==1)&(df_train['Pclass']==3)]['Age'],ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('3rd Class')\nplt.show()","675e9096":"cummulate_survival_ratio = []\n#Survival of age by showing the trend.\n\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n\nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","784430f0":"f, ax = plt.subplots(1,2,figsize=(18,8))\nsns.violinplot('Pclass','Age', hue='Survived', data=df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\nsns.violinplot('Sex','Age', hue='Survived', data=df_train, scale='count',split=True, ax=ax[1])\nax[1].set_title('sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","9c7a44e0":"df_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived')","88b52868":"f, ax = plt.subplots(1,1,figsize=(7,7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","b7b6f8a9":"f,ax=plt.subplots(2, 2, figsize=(20,15))\n\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","33155ba4":"#We can combine data because it is combined with number \ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 #we have to add 1 because we have include oneself\ndf_test['FamilySize'] = df_test['SibSp'] + df_train['Parch'] + 1 #we have to add 1 because we have include oneself","337465c8":"print('Maximum size of Family:', df_train['FamilySize'].max())\nprint('Minimum size of Family:', df_train['FamilySize'].min())","08a79bf0":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","b88bdf8d":"fig, ax = plt.subplots(1,1,figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b',label='skewness : {:.2f}'.format(df_train['Fare'].skew(), ax=ax))\ng = g.legend(loc='best')","64befb9a":"# Replace the nanvalue in the testset with the average value.\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() \n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","e55b32b5":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","18874f40":"df_train.isnull()","e8534782":"df_train['Ticket'].value_counts()","4c90b8ae":"* You can see that female is more likely to live in all classes than male.\n* Also, the higher the class regardless of male or female, the higher the probability of living.\n* The graph above is column instead of hue, which makes it look like below.","c619eeb9":"* The higher the class, the greater the proportion of older people\n* I'm going to see what the survival rate is as the age changes.\n* As we expand our age range, let's see what the survival rate is.","9737dff5":"* As you can see, ticket numbers vary widely. What characteristics can we draw from this and link it to survival?\n* You should come up with your own ideas! This is the starting point for a full-fledged Caglace. ^^\n* This is a tutorial, so I'll skip the ticket first. After finishing the tutorial, it's good to get information out of the ticket to improve the performance of your model!","39326e3f":"* As you can see, the younger you are, the higher your survival rate is.\n* We confirmed that this age can be used as an important feature.","792700e3":"## 2.2 Sex","363634b2":"* I'd like to see all of the Sex, Pclass, Age, Survived. The easy way to draw this is seaborn's violinplot.\n* The x-axis represents the case that we want to see separately, and the y-axis represents the distribution (Age) that we want to see.\n* I'll draw it.","e289c8c5":"### Conclusion:\n The higher the class, the higher the probability of survival. \n\nTherefore, if you use 'class data' to make a model through this, it will have a  better input.","a7450b12":"# Table of Contents\n\n1. Dataset Check\n2. EDA\n3. Pclass (include sequence and category)\n4. Sex\n5. Both Sex and Pclass\n6. Age\n7. Pclass, Sex, Age\n8. Embarked\n9. Family - SibSp + Parch\n10. Fare\n11. Cabin\n12. Ticket","73a46e98":"Let's take a look at the relationship between Family Size and survival.\n","77a331a7":"## 2.3 Both Sex and Pclass\n\n* Now, let's see how survival changes with respect to two things: Sex and Pclass.\n* With Seaborn's factorplot, you can easily draw a graph of three dimensions.","25044392":"# 2. EDA\n\n### It's about finding correlations between features. By doing this, we can gain a strong insight into which feature should be used. We need to create the ability to interpret pictures.","24351302":"* The figure on the left is a graph of how the distribution of Age varies by Pclass, and whether it survives or not.\n* The figure on the right is the same, a graph that shows how the distribution of survival differs.\n* When you look at survival, you can see that the younger you are, the more you survive in all classes.\n* In the picture on the right, you can clearly see that women have survived a lot.\n* You can see that they took care of women and children first.","2406dcb5":"## 2.5 Pclass, Sex, Age","fafb15ed":"## 2.9 Cabin\n* This feature has a NaN of approximately 80%, so it is not easy to obtain important information that will affect survival.\n* Therefore, we will not include it in the model we are trying to build.","c559f08f":"## 2.8 Fare\n* Fare is a boarding fee and a constant feature. I'll draw a histogram.","a2ebd73b":"## Conclusion:\n \nLike Pclass, Sex is an important feature for predictive models.","73956dd3":"# 1. Dataset Check","0d6b0bc3":"## 2.10 Ticket\n* This feature has a NaN of approximately 80%, so it is not easy to obtain important information that will affect survival.\n* Therefore, we will not include it in the model we are trying to build.","5b93471f":"## 2.6 Embarked\n\n* Embarked represents the port on board.\n* Similar to what we've done above, we'll look at the survival rate according to where we're on board.","6c265efc":"* As you can see, the distribution is very asymmetrical (high sense). If you put it in the model like this, the model may learn it wrong. If you are too sensitive to a few outlier, you can have bad results in real predictions.\n* To reduce the impact of outlier, we will log on Fare.\n* Here we will use the useful function of Pandas. If you want to apply a common action (function) to a particular column of dataFrame, you can apply it very easily by using the map, or apply below.\n* What we want now is to log all the data in the Fare columns, and if you put a function that applies a simple log into the map using Python's simple lambda function, it's applied to the Fare columns data as an argument. It's a very useful feature, so make sure you understand it!","8c49bfeb":"Let me draw a histogram of the Age of Survival.","0d2228b4":"## 2.7 Family - SibSp + Parch\nIf you combine SibSp and Parch, it will be Family. Let's combine them into Family.\n","e90c48ed":"## 2.1 Pclass (include sequence and category)","777ad430":"### I think this note might be the Easiest Guide for people who want to get in EDA!! Please comment below if you have any questions or ideas. \n\n### \ud83d\udc4d\ud83d\udc4dIf this notebook was helpful! Please click the 'up' bottom \ud83d\udc4d\ud83d\udc4d\n\nAnd thanks to You Han Lee the best grandmaster teacher!! Subscribe youtube 'You Han Lee' it is really helpful for beginers!\n\n ","4879b62b":"## 2.4 Age","5a9d4b6a":"* Figure (1) - Overall, S has the largest number of people on board.\n* Figure (2) - C and Q have similar proportions of men and women, and S has more men.\n* Figure (3) - If the survival probability is S, you can see that it is very low. (I saw it on the previous graph.)\n* Figure (4) - According to the class split, the reason why C has a high probability of survival is because many people in the class ride it. S has a low probability of survival because there are many 3rd classes.","13053437":"### Conclusion:\nWe found out that there is the null data in our data.Next Step we will gona find out the target label. We have to find out what kind of distribution they have, which we are targeting. \n\n### The method of evaluating the model depends on how valancefully the target label has or does not have a balance. Also, the way to make a model changes.So we have to check what kind of distribution we have.","6912667b":"* Figure (1) - You can see that the family size is from 1 to 11. It's mostly one person, followed by two, three, and four people.\n* Figure (2), (3) - Survival comparison based on family size. If you have four family members, you have the highest chance of survival. As the number of families increases, the chances of survival decrease. Even if the number of families is too small (1, 5, 6, 8, 11), the probability of survival is small. You can see that there is a high probability of survival in the range of 3~4 people.","1cf3f181":"* As you can see, there is a slight difference, but the survival rate is a bit similar. But C is the highest.\n* I don't know how much impact it will have on the model, but I'll still use it.\n* In fact, once we've created a model, we can see how important the features we've used have played. We will look at this later after we make the model.\n* Let's split into different features and take a look."}}