{"cell_type":{"d86270d5":"code","422ee9d1":"code","a8e9f65c":"code","fbc53274":"code","abd07583":"code","c86a21b2":"code","43fef2c2":"code","0299bb2a":"code","f6a22ffb":"code","40b94d0c":"code","664ec436":"code","40570381":"code","c5e00159":"code","dd7bfc71":"code","8e0e3e74":"code","3b7bd0fb":"code","c77d0d08":"code","1b320029":"code","d27c54fa":"code","590b15f5":"code","a2361a93":"code","5a9f8d61":"code","f188aaee":"code","23be8f11":"code","65956035":"code","2263fbbe":"code","e55ad9e7":"code","f2c17794":"code","18659896":"code","18a7d63f":"code","0666ca20":"code","891fc4a2":"markdown","9d129c22":"markdown","2b8b3138":"markdown","08b34a93":"markdown","60a22bc3":"markdown","cc17093a":"markdown","17024528":"markdown","47ac331f":"markdown","24400776":"markdown","18b6ecab":"markdown","79298e54":"markdown","d8699798":"markdown","f56d711c":"markdown","2bdddbca":"markdown"},"source":{"d86270d5":"# Data Manipulation, Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport matplotlib.pyplot as plt\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore')","422ee9d1":"base_path = \"..\/input\/tabular-playground-series-jan-2022\/\"\n\ntrain_data = pd.read_csv(base_path + \"train.csv\")\ntest_data = pd.read_csv(base_path + \"test.csv\")\nsample_submission_data = pd.read_csv(base_path + \"sample_submission.csv\")","a8e9f65c":"train_data.head()","fbc53274":"test_data.head()","abd07583":"full_data = pd.concat([train_data.iloc[:, :-1], test_data])\nfull_data.reset_index(drop=True, inplace=True)\nfull_data","c86a21b2":"# Credit to https:\/\/www.kaggle.com\/ranjeetshrivastav\/tps-jan-21-base-xgb\n\nfull_data['date'] = pd.to_datetime(full_data['date'])\n\nfull_data['year'] = full_data['date'].dt.year\nfull_data['month'] = full_data['date'].dt.month\nfull_data['day'] = full_data['date'].dt.day\nfull_data['dayofweek'] = full_data['date'].dt.dayofweek\nfull_data['dayofmonth'] = full_data['date'].dt.days_in_month\nfull_data['dayofyear'] = full_data['date'].dt.dayofyear\nfull_data['weekday'] = full_data['date'].dt.weekday\n\nfull_data.drop(columns=['date', 'row_id'], inplace = True)","43fef2c2":"full_data","0299bb2a":"def Pie_Bar_Plot(data, col):\n    # Gettting Column Value Counts\n    column_value_counts = full_data[col].value_counts()\n\n    # Creating the explode values_list\n    explode_len = len(column_value_counts)\n    explode = []\n    for i in range(explode_len):\n        explode.append(0.1)\n\n    # Creating Subplots\n    f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\n    # Pie Plot\n    column_value_counts.plot.pie(explode=explode, autopct='%1.1f%%', ax=ax[0], shadow=True)\n    ax[0].set_title(f'{col.capitalize()} Pie Plot', fontsize=16, fontweight=\"bold\")\n    ax[0].set_ylabel('')\n\n    # Barplot \/ Count Plot\n    sns.barplot(x=column_value_counts.index, y=column_value_counts.values, ax=ax[1])\n    ax[1].set_title(f'{col.capitalize()} Count Plot', fontsize=16, fontweight=\"bold\")\n    plt.show()\n\n    print(\"\\n\\n\")","f6a22ffb":"cols_to_plot = full_data.columns.to_list()\ncols_to_plot.remove(\"day\")\ncols_to_plot.remove(\"dayofyear\")","40b94d0c":"for col in cols_to_plot:\n    Pie_Bar_Plot(full_data, col)","664ec436":"pd.crosstab(full_data.country, full_data.store, margins=True).style.background_gradient(cmap='summer_r')","40570381":"pd.crosstab(full_data.country, full_data.year, margins=True).style.background_gradient(cmap='summer_r')","c5e00159":"pd.crosstab(full_data.country, full_data.month, margins=True).style.background_gradient(cmap='summer_r')","dd7bfc71":"pd.crosstab(full_data.year, full_data.month, margins=True).style.background_gradient(cmap='summer_r')","8e0e3e74":"train_data[\"date\"] = pd.to_datetime(train_data[\"date\"])","3b7bd0fb":"def Date_Sales_Plot(data, hue=None):\n    plt.figure(figsize=(25, 6))\n    sns.lineplot(data=train_data, x=\"date\", y=\"num_sold\", hue=hue, err_style=None)\n    plt.xlabel(\"Date\", fontsize=12, fontweight=\"bold\")\n    plt.ylabel(\"Products Sold\", fontsize=12, fontweight=\"bold\")\n    plt.title(\"Date vs Products Sold\", fontsize=16, fontweight=\"bold\")\n    if hue:\n        plt.legend(fontsize=13, edgecolor=None, facecolor=None, markerscale=2, handlelength=1, title=None)\n    plt.show()","c77d0d08":"Date_Sales_Plot(train_data)","1b320029":"Date_Sales_Plot(train_data, \"country\")","d27c54fa":"Date_Sales_Plot(train_data, \"store\")","590b15f5":"Date_Sales_Plot(train_data, \"product\")","a2361a93":"full_data = pd.concat([pd.get_dummies(full_data[[\"country\", \"store\", \"product\"]]), full_data[[\"year\", \"month\", \"day\"]]], axis=1)","5a9f8d61":"# Seperating Training and Testing Data\ntrain = full_data.iloc[:len(train_data), :]\ntest = full_data.iloc[len(train_data):, :]","f188aaee":"# Train Test Split for training and testing the Regressor\nfrom sklearn.model_selection import train_test_split\n\n# Different Mathematical functions to calculate the Accuracy of Regression Model\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n# Using Possibly every Regression Algorithm available in Sklearn\nfrom sklearn import neighbors, tree, ensemble\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor","23be8f11":"X_train, X_test, y_train, y_test = train_test_split(train, train_data[\"num_sold\"], test_size = 0.2, random_state=0)","65956035":"MLA_compare = pd.DataFrame()\n\npredictions_list = []\n\ndef MLA_testing(MLA):\n    row_index = 0\n    for regressor in MLA:\n        # Training the Machine Learning Algorithm\n        regressor.fit(X_train, y_train)\n\n        # Making predictions on the test set\n        y_pred = regressor.predict(X_test)\n\n        regressor_r2_score = r2_score(y_test, y_pred)\n        regressor_mse = mean_squared_error(y_test, y_pred)\n        regressor_rmse = np.sqrt(regressor_mse)\n        regressor_mae = mean_absolute_error(y_test, y_pred)\n\n        MLA_name = regressor.__class__.__name__\n        MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n        MLA_compare.loc[row_index, 'R2 Score'] = regressor_r2_score\n        MLA_compare.loc[row_index, 'Mean Squared Error'] = regressor_mse\n        MLA_compare.loc[row_index, 'Root Mean Squared Error'] = regressor_rmse\n        MLA_compare.loc[row_index, 'Mean Absolute Error'] = regressor_mae\n\n        predictions_list.append(regressor.predict(test))\n\n        print(MLA_name, \"Done\")\n        row_index+=1","2263fbbe":"MLA = [\n    neighbors.KNeighborsRegressor(),\n\n    tree.DecisionTreeRegressor(),\n\n    ensemble.RandomForestRegressor(),\n    ensemble.ExtraTreesRegressor(),\n    ensemble.GradientBoostingRegressor(),\n\n    XGBRegressor(),\n    CatBoostRegressor(silent=True),\n    LGBMRegressor(),\n]\n\nMLA_testing(MLA=MLA)","e55ad9e7":"# Sorting by R^2 Value\nMLA_compare = MLA_compare.sort_values(by=\"R2 Score\", ascending=False).reset_index(drop=True)\nMLA_compare[:10]","f2c17794":"# Sorting by Mean Squared Error\nMLA_compare = MLA_compare.sort_values(by=\"Mean Squared Error\", ascending=True).reset_index(drop=True)\nMLA_compare[:10]","18659896":"predictions_list = [np.array(x) for x in predictions_list]\nprediction = [np.mean(k) for k in zip(*predictions_list)]","18a7d63f":"sample_submission_data[\"num_sold\"] = prediction","0666ca20":"sample_submission_data.to_csv(\"submission.csv\", index=False)","891fc4a2":"# Machine Learning Model","9d129c22":"## Year vs Number of Sales (for Training Data)","2b8b3138":"# Imports","08b34a93":"Thanks to https:\/\/www.kaggle.com\/vad13irt\/tps-jan-2022-exploratory-data-analysis for plot idea below.","60a22bc3":"## Concatenating Training and Testing Data","cc17093a":"# Submission File","17024528":"## Feature Engineering","47ac331f":"## Crosstabs","24400776":"## Distribution Plots using Pie and Bar Plot","18b6ecab":"## OneHotEncoding Categorical Variables","79298e54":"# Analysis and EDA on FullData","d8699798":"# Data Preprocessing","f56d711c":"## Getting the Data","2bdddbca":"# Preparing Data"}}