{"cell_type":{"e42f05da":"code","4a2c7e01":"code","9772c5c2":"code","2a961823":"code","3e329ff3":"code","b1ab7346":"code","5a387ca8":"code","4407e512":"code","06f7e499":"code","cb2b040e":"code","b448b1ce":"code","c7c40c99":"code","b1a2827d":"code","e7a2fcd3":"code","04b48e2a":"code","50a5d3d3":"code","00cce7ff":"code","e700d1e6":"code","3a346714":"code","491bc7db":"code","75f25ca7":"code","b4c639d2":"code","089e80f2":"code","53dd14a7":"code","9d9ea898":"code","23e19f80":"code","40e140fa":"code","42a9a998":"code","5a3e81d8":"code","613580ee":"code","2a5b6cb3":"code","3097be8c":"code","3ef53eef":"code","95c59acd":"code","efccd644":"code","5babfc3e":"code","3be11912":"code","e554dfba":"code","996a5949":"code","2383fb0c":"code","207ff8b4":"code","d26606d7":"code","fe9711a9":"code","06a60c60":"code","ffb98d85":"code","090f5f47":"code","b5db9432":"code","bfa76aeb":"markdown","2beb3cb3":"markdown","7fc8422b":"markdown","93b0badb":"markdown","fc7dc0a0":"markdown","87c8279a":"markdown","b5aa664a":"markdown","2e2ddb91":"markdown","d04381df":"markdown","b4b33bf0":"markdown","fc8de8e6":"markdown","92c79d65":"markdown","a36bf6f8":"markdown","195d1194":"markdown","90a7f13d":"markdown","a43770a7":"markdown","3940e53d":"markdown","892515d7":"markdown","310d4613":"markdown","42c15a14":"markdown","b98d8ea3":"markdown","7fb32d4b":"markdown","e5fcb02a":"markdown","28314e80":"markdown","054ddf38":"markdown","ad85b9f2":"markdown"},"source":{"e42f05da":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4a2c7e01":"df = pd.read_csv('\/kaggle\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv')\n\nprint(df.shape)\ndf.head()","9772c5c2":"df.drop('Unnamed: 0', axis = 1, inplace = True)\ndf['ChronicDiseases'] = np.where(df['ChronicDiseases'] == 1, 'Yes', 'No')","2a961823":"target = 'TravelInsurance'","3e329ff3":"df.groupby(target)['Age'].count().plot.bar()\nplt.xlabel(target)\nplt.ylabel('count')\nplt.show()","b1ab7346":"print('N: {}%'.format((df[target].value_counts()[0] \/ len(df)) * 100))\nprint('Y: {}%'.format((df[target].value_counts()[1] \/ len(df)) * 100))","5a387ca8":"df.isnull().sum()","4407e512":"num_features = [feature for feature in df.columns if df[feature].dtype != 'O' and feature != target]\n\ndf[num_features].head()","06f7e499":"dis_features = [feature for feature in num_features if len(df[feature].unique()) < 20]\n\nprint(dis_features)","cb2b040e":"for feature in dis_features:\n    df.groupby(feature)[target].count().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","b448b1ce":"for feature in dis_features:\n    df.groupby(feature)[target].mean().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","c7c40c99":"con_features = [feature for feature in num_features if feature not in dis_features]\n\nprint(con_features)","b1a2827d":"df[con_features].hist(bins = 25)\nplt.show()","e7a2fcd3":"cat_features = [feature for feature in df.columns if feature not in num_features and feature != target]\n\ndf[cat_features].head()","04b48e2a":"for feature in cat_features:\n    print('{}: {} categories'.format(feature, len(df[feature].unique())))","50a5d3d3":"for feature in cat_features:\n    df.groupby(feature)[target].count().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","00cce7ff":"for feature in cat_features:\n    df.groupby(feature)[target].mean().plot.bar()\n    \n    plt.xlabel(feature)\n    plt.ylabel(target)\n    plt.show()","e700d1e6":"dummy_df = pd.get_dummies(df, drop_first = True)\ndummy_df.head()","3a346714":"X = dummy_df.drop(target, axis = 1)\ny = dummy_df[target]","491bc7db":"cor = X[num_features].corr()\n\nsns.heatmap(cor, annot = True, cmap = plt.cm.CMRmap_r)\nplt.show()","75f25ca7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","b4c639d2":"scaler = MinMaxScaler()\n\nscaler.fit(X_train)","089e80f2":"X_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","53dd14a7":"model = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)","9d9ea898":"y_pred_lr = model.predict(X_test_scaled)","23e19f80":"print(confusion_matrix(y_test, y_pred_lr))\nprint(classification_report(y_test, y_pred_lr, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_lr))","40e140fa":"scores = []\nneighbors = np.arange(5, 13)\n\nfor i in range(5, 12):\n    model = KNeighborsClassifier(n_neighbors = i)\n    model.fit(X_train_scaled, y_train)\n    scores.append(model.score(X_test_scaled, y_test))\n    \nbest_neighbors = neighbors[scores.index(max(scores))]\nprint(best_neighbors)","42a9a998":"model = KNeighborsClassifier(n_neighbors = best_neighbors)\nmodel.fit(X_train_scaled, y_train)","5a3e81d8":"y_pred_knn = model.predict(X_test_scaled)","613580ee":"print(confusion_matrix(y_test, y_pred_knn))\nprint(classification_report(y_test, y_pred_knn, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_knn))","2a5b6cb3":"model = SVC(kernel = 'poly', degree = 4)\nmodel.fit(X_train_scaled, y_train)","3097be8c":"y_pred_svm = model.predict(X_test_scaled)","3ef53eef":"print(confusion_matrix(y_test, y_pred_svm))\nprint(classification_report(y_test, y_pred_svm, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_svm))","95c59acd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","efccd644":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)","5babfc3e":"y_pred_rf = model.predict(X_test)","3be11912":"print(confusion_matrix(y_test, y_pred_rf))\nprint(classification_report(y_test, y_pred_rf, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_rf))","e554dfba":"model = XGBClassifier(use_label_encoder = False)\nmodel.fit(X_train, y_train)","996a5949":"y_pred_xgb = model.predict(X_test)","2383fb0c":"print(confusion_matrix(y_test, y_pred_xgb))\nprint(classification_report(y_test, y_pred_xgb, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_xgb))","207ff8b4":"random_grid = {'n_estimators': [50, 100, 200, 400, 500, 700, 900],\n               'criterion': ['gini', 'entropy'],\n               'max_features': ['auto', 'sqrt', 'log2'],\n               'max_depth': [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}","d26606d7":"model = RandomForestClassifier()\n\nrf_random = RandomizedSearchCV(estimator = model, \n                               param_distributions = random_grid, \n                               n_iter = 100, \n                               cv = 3, \n                               verbose=2, \n                               random_state=42, \n                               n_jobs = -1)\n\nrf_random.fit(X_train, y_train)\n\nrf_random.best_params_","fe9711a9":"param_grid = {'n_estimators': [800,900, 1000, 1100],\n               'criterion': ['gini'],\n               'max_features': ['log2'],\n               'max_depth': [None],\n               'min_samples_split': [2, 3, 4],\n               'min_samples_leaf': [3, 4, 5, 6],\n               'bootstrap': [True]}","06a60c60":"model = RandomForestClassifier()\n\nrf_grid = GridSearchCV(estimator = model, param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)\n\nrf_grid.fit(X_train, y_train)\n\nrf_grid.best_params_","ffb98d85":"model = RandomForestClassifier(n_estimators = 800,\n                               min_samples_split = 2,\n                               min_samples_leaf = 4,\n                               max_features = 'log2',\n                               max_depth = None,\n                               criterion = 'gini',\n                               bootstrap = True)\n\nmodel.fit(X_train, y_train)","090f5f47":"y_pred_hp_rf = model.predict(X_test)","b5db9432":"print(confusion_matrix(y_test, y_pred_hp_rf))\nprint(classification_report(y_test, y_pred_hp_rf, digits = 4))\nprint('score: ', accuracy_score(y_test, y_pred_hp_rf))","bfa76aeb":"#### Distribution","2beb3cb3":"# Hyperparameter Tuning","7fc8422b":"#### Distribution","93b0badb":"### Distribution","fc7dc0a0":"# Feature Selection","87c8279a":"### SVM","b5aa664a":"### Continuous Features","2e2ddb91":"## RandomForest","d04381df":"# EDA","b4b33bf0":"### Discrete Features","fc8de8e6":"#### vs Target Variable","92c79d65":"## Missing Values","a36bf6f8":"### Random Forest","195d1194":"### Logistic Regression","90a7f13d":"# Feature Engineering","a43770a7":"## Categorical Features","3940e53d":"## Ensemble Models","892515d7":"### Observations\n1. Frequenet fliers are more likely to purchase insurance\n2. People who have travelled abroad are more likely to purchase insurance","310d4613":"### XGBoost","42c15a14":"### vs Target Variable","b98d8ea3":"### KNN","7fb32d4b":"## Scaling","e5fcb02a":"## Linear Models","28314e80":"# Models","054ddf38":"## Numeric Features","ad85b9f2":"## Target Variable"}}