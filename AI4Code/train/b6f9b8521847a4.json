{"cell_type":{"fa32237a":"code","73588e2a":"code","9f1e39ff":"code","bd474453":"code","b7f48395":"code","c2f9a21a":"code","933303f1":"code","a99978a3":"code","1d2f261b":"code","d0d8ea19":"code","718ce64f":"code","d994ce3c":"code","18748d09":"code","36bc1604":"code","66692dda":"markdown","bbde12ba":"markdown","73b1f5bd":"markdown","ac79226e":"markdown","4e33e904":"markdown","9714fa88":"markdown","ebc7a227":"markdown","1e9e91bb":"markdown"},"source":{"fa32237a":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nfilename = \"..\/input\/suicide-rates-overview-1985-to-2016\/master.csv\"\ndataset=df = pd.read_csv(filename)\nprint(df.head())\n","73588e2a":"X = df.iloc[:,df.columns != 'suicides_pop'].values\nY = dataset.iloc[:,4].values \n\ndf_men = df[df.sex == \"male\"]\ndf_women = df[df.sex == \"female\"]\n\n\nplt.scatter(df_men.year, df_men.suicides_no,color='blue')\nplt.scatter(df_women.year,df_women.suicides_no, color = 'red')\nplt.title('Women VS Males In Suicide Number')\nplt.xlabel('Sucides')\nplt.ylabel('Year')\nplt.legend([\"male\", 'female'])\nplt.show()\n","9f1e39ff":"plt.scatter(df_men.age, df_men.suicides_no)\nplt.show()","bd474453":"plt.scatter(df_men.year, df_men.suicides_no)\nplt.show()\n","b7f48395":"\nplt.scatter(df_men.year, df_men.iloc[:,10])\nplt.show()","c2f9a21a":"plt.scatter(df_men.year, df_men.generation,color='red')\nplt.scatter(df_men.year, df_men.age,color='blue')\nplt.show()\n","933303f1":"\nle = LabelEncoder()\ndf_men.iloc[:,3]=le.fit_transform(df_men.iloc[:,3])\n\nXnew = df_men.iloc[1:264,[10,3]].values\nYnew = df_men.iloc[1:264,4].values \n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(Xnew, Ynew, test_size = 0.2, random_state = 0)\nprint(df_men.head())","a99978a3":"sc = StandardScaler()\n\nX_train[:,0: 1] = sc.fit_transform(X_train[:,0:1])\n\nX_test[:,0:1]= sc.transform(X_test[:, 0:1])\n","1d2f261b":"\nfrom sklearn.linear_model import LinearRegression\nclf = LinearRegression()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint('linear model coeff (w)', clf.coef_)\nprint('linear model intercept (b)' , clf.intercept_)\nprint('R-squared score (training)', clf.score(X_train, y_train))\nprint('R-squared score (test)', clf.score(X_test,y_test))","d0d8ea19":"plt.scatter(X_test[:,0],y_test,color='blue')\nplt.scatter(X_test[:,0],y_pred ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()\n\n\nplt.scatter(X_test[:,1],y_test,color='blue')\nplt.scatter(X_test[:,1],y_pred ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()\n\n\n\n","718ce64f":"\nfrom sklearn.linear_model import Ridge\nlinridge = Ridge(alpha=20.0).fit(X_train, y_train)\n\nprint('ridge regression linear model intercept: {}'\n     .format(linridge.intercept_))\nprint('ridge regression linear model coeff:\\n{}'\n     .format(linridge.coef_))\nprint('R-squared score (training): {:.3f}'\n     .format(linridge.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}'\n     .format(linridge.score(X_test, y_test)))\nprint('Number of non-zero features: {}'\n     .format(np.sum(linridge.coef_ != 0)))","d994ce3c":"yridge=linridge.predict(X_test)\nplt.scatter(X_test[:,0],y_test,color='blue')\nplt.scatter(X_test[:,0],yridge ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()\n\nplt.scatter(X_test[:,1],y_test,color='blue')\nplt.scatter(X_test[:,1],yridge ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()","18748d09":"#Lasso Linear Regression\nfrom sklearn.linear_model import Lasso\nlinlasso = Lasso(alpha=2.0, max_iter = 10000).fit(X_train, y_train)\nprint('lasso regression linear model intercept: {}'\n     .format(linlasso.intercept_))\nprint('lasso regression linear model coeff:\\n{}'\n     .format(linlasso.coef_))\nprint('Non-zero features: {}'\n     .format(np.sum(linlasso.coef_ != 0)))\nprint('R-squared score (training): {:.3f}'\n     .format(linlasso.score(X_train, y_train)))\nprint('R-squared score (test): {:.3f}\\n'\n     .format(linlasso.score(X_test, y_test)))\n","36bc1604":"y=linlasso.predict(X_test)\nplt.scatter(X_test[:,0],y_test,color='blue')\nplt.scatter(X_test[:,0],y ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()\n\nplt.scatter(X_test[:,1],y_test,color='blue')\nplt.scatter(X_test[:,1],y ,color = 'red')\nplt.legend([\"testing\", 'prediction'])\nplt.show()\n\n\n","66692dda":"*It's Strange how Suicides occur more often in higher (gdp_per_capita)  \n\nWhat about the generation*","bbde12ba":"*from this we Noticed that most of the Sucides are from Males\nWhat about their (Age)*","73b1f5bd":"*We can't take this Column to Dependants variables,We prefer to be our prediction more occurate \n\nSoo Lets Get Started\n*","ac79226e":"*first import the data and print first five rows with print(df.head())*","4e33e904":"*We want to predict the (Suicides_no) column let's see what are the dependant variables \nLets start with the (Sex) coloumn* ","9714fa88":"*from this we see that numbers of Suicides are higher from 1990 to 2005 and went down from 2005 to the average \n\nWhat about (gdp_per_capita)?*\n","ebc7a227":"*What about the years with most Concurrent Suicides*","1e9e91bb":"*Magority of death with the age (35-54),(25-34),(55,74)*"}}