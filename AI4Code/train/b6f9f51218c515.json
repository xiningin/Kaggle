{"cell_type":{"c8b43eec":"code","a52d4061":"code","4b909451":"code","f0cd6a55":"code","d3e0d180":"code","aea37c97":"code","3f279d86":"code","b819eb44":"code","a891a0d4":"code","a767598a":"code","2b3e4dda":"markdown","14c83c16":"markdown","41d650ea":"markdown","53278019":"markdown","2e46b47e":"markdown","d4eba651":"markdown","d29c0c5c":"markdown","e19fd1e1":"markdown","d8e185ae":"markdown","48c6fe5e":"markdown","b8083a31":"markdown","e40de6e8":"markdown","c7cf08cf":"markdown"},"source":{"c8b43eec":"import numpy as np # Array manipulation\nimport matplotlib.pyplot as plt #plotting\nimport random #Generating random numbers\nimport math #Getting the value of e\nimport time #Testing purposes\nfrom tqdm import tqdm #For progress bar\nimport seaborn as sns\nfrom matplotlib.animation import FuncAnimation\nfrom matplotlib import animation as amt\nfrom matplotlib import rc\nfrom IPython.display import HTML","a52d4061":"# l1, l2, l3, l4, l5 and l6 are dictionaries corresponding to corrdinates \n# of residues for that protien.\n# Keys(1,2,3,4) are used to keep track of the type of residue\n\ndef reset():\n    \n    l1 = {\n        1 : [5,17],\n        2 : [5,18],\n        3 : [5,19],\n        4 : [5,20]\n    }\n\n    l2 = {\n        1 : [15,17],\n        2 : [15,18],\n        3 : [15,19],\n        4 : [15,20]\n    }\n\n    l3 = {\n        1 : [25,17],\n        2 : [25,18],\n        3 : [25,19],\n        4 : [25,20]\n    }\n\n    l4 = {\n        1 : [35,17],\n        2 : [35,18],\n        3 : [35,19],\n        4 : [35,20]\n    }\n\n    l5 = {\n        1 : [17,30],\n        2 : [18,30],\n        3 : [19,30],\n        4 : [20,30]\n    }\n\n    l6 = {\n        1 : [17,6],\n        2 : [18,6],\n        3 : [19,6],\n        4 : [20,6]\n    }\n\n    lines = { 1 : l1,\n              2 : l2,\n              3 : l3,\n              4 : l4,\n              5 : l5,\n              6 : l6}\n    return lines\nlines = reset()","4b909451":"# Alogrithm used:\n# 1. Choose a line and then a point from that line at random\n# 2. Check the position of that point. Positions 1,4 can undergo end moves; 2,3 can undergo corner moves.\n# 3a. For end moves, compute all points at a distance sqrt(2) from the chosen residue, check if that space is empty and if the bond distance is maintained\n# 3b. For corner moves, compute all points at a distance sqrt(2) from the chosen residue, check if that space is empty and if the bond distance is maintained\n# 3c. Store the availble spaces in an array\n# 4. Choose a point (var new_point) at random from the availble spaces, and return it. \n\ndef choose_point(lines):\n    line_pos = np.random.randint(1,7)   \n    rand_line = lines[line_pos]\n    point_pos = np.random.randint(1,5)\n    rand_point = rand_line[point_pos]\n    \n    current_points = [list(line.values()) for line in list(lines.values())]\n    current_points = [current_points[i][j] for i in range(6) for j in range(4)]\n\n\n    available_points = []\n    new_current_points = []\n    new_lines = {}\n    \n    if point_pos == 4:\n        available_points = [[rand_point[0] + 1,rand_point[1] + 1],\n                   [rand_point[0] - 1,rand_point[1] - 1],\n                   [rand_point[0] + 1,rand_point[1] - 1],\n                   [rand_point[0] - 1,rand_point[1] + 1]]\n        point3 = rand_line[3]\n        available_points = [point for point in available_points if (point not in current_points and (abs(sum((np.array(point3) - np.array(point))**2)) == 1) and (point[0]<40 and point[0]>0 and point[1]<40 and point[1]>0))]\n\n    if point_pos == 1:\n        available_points = [[rand_point[0] + 1,rand_point[1] + 1],\n                   [rand_point[0] - 1,rand_point[1] - 1],\n                   [rand_point[0] + 1,rand_point[1] - 1],\n                   [rand_point[0] - 1,rand_point[1] + 1]]\n        point2 = rand_line[2]\n        available_points = [point for point in available_points if (point not in current_points and (abs(sum((np.array(point2) - np.array(point))**2)) == 1) and (point[0]<40 and point[0]>0 and point[1]<40 and point[1]>0))]\n\n    if point_pos == 3: \n        available_points = [[rand_point[0] + 1,rand_point[1] + 1],\n                   [rand_point[0] - 1,rand_point[1] - 1],\n                   [rand_point[0] + 1,rand_point[1] - 1],\n                   [rand_point[0] - 1,rand_point[1] + 1]]\n        point2 = rand_line[2]\n        point4 = rand_line[4]\n        available_points = [point for point in available_points if (point not in current_points and (abs(sum((np.array(point2) - np.array(point))**2)) == 1) and (abs(sum((np.array(point4) - np.array(point))**2)) == 1) and (point[0]<40 and point[0]>0 and point[1]<40 and point[1]>0))]\n    if point_pos == 2:\n        available_points = [[rand_point[0] + 1,rand_point[1] + 1],\n                   [rand_point[0] - 1,rand_point[1] - 1],\n                   [rand_point[0] + 1,rand_point[1] - 1],\n                   [rand_point[0] - 1,rand_point[1] + 1]]\n        point3 = rand_line[3]\n        point1 = rand_line[1]\n        available_points = [point for point in available_points if (point not in current_points and (abs(sum((np.array(point3) - np.array(point))**2)) == 1) and (abs(sum((np.array(point1) - np.array(point))**2)) == 1) and (point[0]<40 and point[0]>0 and point[1]<40 and point[1]>0))]\n\n    if (available_points != []):\n        new_point = random.choice(available_points)\n        new_current_points = [i for i in current_points]\n        i = 4 * (line_pos - 1) + point_pos - 1\n        new_current_points[i] = new_point\n\n        new_point = random.choice(available_points)\n        new_current_points = [i for i in current_points]\n        i = 4 * (line_pos - 1) + point_pos - 1\n        new_current_points[i] = new_point\n\n        l1_new = {key + 1 : point for key,point in enumerate(new_current_points[:4]) }\n        l2_new = {key + 1 : point for key,point in enumerate(new_current_points[4:8]) }\n        l3_new = {key + 1 : point for key,point in enumerate(new_current_points[8:12]) }\n        l4_new = {key + 1 : point for key,point in enumerate(new_current_points[12:16]) }\n        l5_new = {key + 1 : point for key,point in enumerate(new_current_points[16:20]) }\n        l6_new = {key + 1 : point for key,point in enumerate(new_current_points[20:24]) }\n\n        new_lines = {1 : l1_new,\n                    2 : l2_new,\n                    3 : l3_new,\n                    4 : l4_new,\n                    5 : l5_new,\n                    6 : l6_new}\n    \n    return new_lines\n\n","f0cd6a55":"#1 -- Up\n#2 -- Down\n#3 -- Left\n#4 -- Right\n#5 -- No motion\n\n#This function will move a random line on every iteration in one particular direction\n\ndef translation(lines):\n    line_pos = np.random.randint(1, 7)\n    rand_line = list(lines[line_pos].values())\n    rand_line = {i : rand_line[i-1] for i in range(1, 5)}\n    \n    current_points = [list(line.values()) for line in list(lines.values())]\n    current_points = [current_points[i][j] for i in range(6) for j in range(4)]\n    \n    other_points = []\n    for point in current_points:\n        if point not in rand_line.values():\n            other_points.append(point)\n\n    \n    if protein_energy(rand_line) == 0:\n        rand_direction = np.random.randint(1, 6)\n        \n        for i in range(1, (len(rand_line)+1)):\n            x, y = rand_line[i]\n        \n            if rand_direction == 1:\n                lines[line_pos][i] = [x, y+1]\n            elif rand_direction == 2:\n                lines[line_pos][i] = [x, y-1]\n            elif rand_direction == 3:\n                lines[line_pos][i] = [x-1, y]\n            elif rand_direction == 4:\n                lines[line_pos][i] = [x+1, y]\n            elif rand_direction == 5:\n                lines[line_pos][i] = [x, y]\n        \n        possible = True\n        for point in lines[line_pos].values():\n            if point in other_points or (point[0]>=40 or point[0]<=0 or point[1]>=40 or point[1]<=0):\n                possible = False\n                lines[line_pos] = rand_line\n                return lines\n                \n        if possible == True:\n            return lines\n            \n        \n    else:\n        return lines\n        \n    ","d3e0d180":"# Algorithm:\n# 1. Find the pairwise distance between all A residues, all B residues and so on\n# 2. Count the number of instance where the above distance in 1, and divide it by 2 (as we are couting them twice)\n# 3. Multiply the above counter by a negative integer k, denoting the interaction energy between residues of the same kind\n\ndef energy(lines,k):\n    A = [l[1] for l in lines.values()]\n    B = [l[2] for l in lines.values()]\n    C = [l[3] for l in lines.values()]\n    D = [l[4] for l in lines.values()]\n    energy = 0\n    for l in [A,B,C,D]:\n        energy += k*[(i[0] - j[0])**2 + (i[1] - j[1])**2 for i in l for j in l].count(1)\n\n    return energy\/2\n    \n    \n    \n    \n##When A-A, B-B, C-C, D-D interatctions are allowed\ndef protein_energy(rand_line):\n    A = [l[1] for l in lines.values()]\n    B = [l[2] for l in lines.values()]\n    C = [l[3] for l in lines.values()]\n    D = [l[4] for l in lines.values()]\n\n    energy = 0\n    energy += [(rand_line[1][0] - point[0])**2 + (rand_line[1][1] - point[1])**2 for point in A].count(1)\n    energy += [(rand_line[2][0] - point[0])**2 + (rand_line[2][1] - point[1])**2 for point in B].count(1)\n    energy += [(rand_line[3][0] - point[0])**2 + (rand_line[3][1] - point[1])**2 for point in C].count(1)\n    energy += [(rand_line[4][0] - point[0])**2 + (rand_line[4][1] - point[1])**2 for point in D].count(1)\n\n    return energy    ","aea37c97":"def energy(lines,k):\n    \n    all_points = [list(line.values()) for line in list(lines.values())]\n    all_points = [all_points[i][j] for i in range(6) for j in range(4)]\n    \n    internal = [(lines[i][1][0] - lines[i][4][0])**2 + (lines[i][1][1] - lines[i][4][1])**2 for i in range(1,7)].count(1)\n    \n    energy = k*([(i[0] - j[0])**2 + (i[1] - j[1])**2 for i in all_points for j in all_points].count(1) - 36 - internal*2)\n    \n    return energy\/2\n\n#When any bead of one molecule can interract with any bead of another molecule\ndef protein_energy(rand_line):\n    \n    all_points = [list(line.values()) for line in list(lines.values())]\n    all_points = [all_points[i][j] for i in range(6) for j in range(4)]\n    \n    energy = 0\n    for point in all_points:\n        if point not in rand_line.values():\n            energy += [(rand_point[0] - point[0])**2 + (rand_point[1] - point[1])**2 for rand_point in rand_line.values()].count(1)\n\n    return energy","3f279d86":"def energy(lines,k):\n    A = [l[1] for l in lines.values()]\n    B = [l[2] for l in lines.values()]\n    energy = 0\n    for l in [A,B]:\n        energy += k*[(i[0] - j[0])**2 + (i[1] - j[1])**2 for i in l for j in l].count(1)\n\n    return energy\/2\n\n#When A-A and B-B interactions are allowed\ndef protein_energy(rand_line):\n    A = [l[1] for l in lines.values()]\n    B = [l[2] for l in lines.values()]\n    \n    energy = 0\n    energy += [(rand_line[1][0] - point[0])**2 + (rand_line[1][1] - point[1])**2 for point in A].count(1)\n    energy += [(rand_line[2][0] - point[0])**2 + (rand_line[2][1] - point[1])**2 for point in B].count(1)\n\n    return energy","b819eb44":"# Metropolis Algorithm\n# When w = 1, choose to stay put or switch to new position with equal probability\n# returns lines, which is a dictionary which conatines 6 lines, containing updated residue coordinates\n\ndef metropolis(lines,k):\n    new_lines = random.choice([choose_point(lines), translation(lines)])\n    \n    Ei = energy(lines,k)\n    \n    if new_lines != {}:\n        Ef = energy(new_lines,k)\n\n        del_E = Ef - Ei\n        w = math.e**(-del_E)\n        if w > 1:\n            return new_lines, Ef\n        if w < 1:\n            r = random.random()\n            if w > r:\n                return new_lines, Ef\n            else: \n                return lines, Ei\n        if w == 1.0:\n            l = random.choice([lines,new_lines])\n            if l == new_lines:\n                return l, Ef\n            else:\n                return l, Ei\n        \n    else: \n        return lines, Ei","a891a0d4":"#customizing figure and axes and setting up grid\n%matplotlib inline\nfig = plt.figure(figsize = (9,9));\nax = plt.subplot(111, \n                 xlim = (0,40), ylim = (0,40), \n                 autoscale_on = False ,\n                 xticks = np.arange(0,40,1), yticks = np.arange(0,40,1));\nax.grid();\n\n\n\nline1, = ax.plot([],[], '-k', lw = 1,)\nline2, = ax.plot([],[], '-k', lw = 1)\nline3, = ax.plot([],[], '-k', lw = 1) \nline4, = ax.plot([],[], '-k', lw = 1)\nline5, = ax.plot([],[], '-k', lw = 1)\nline6, = ax.plot([],[], '-k', lw = 1)\n\nax.tick_params(axis = \"both\", which = \"both\",\n               bottom = False, left = False,\n              labelbottom = False, labelleft = False);\n\np1, = ax.plot([],[], 'o',  color = 'red')\np2, = ax.plot([],[], 'o',  color = 'sandybrown')\np3, = ax.plot([],[], 'o',  color = 'yellowgreen') \np4, = ax.plot([],[], 'o',  color = 'dodgerblue')\n\nplt.close()\n#removing x and y tick labels\nax.tick_params(axis = \"both\", which = \"both\",\n               bottom = False, left = False,\n              labelbottom = False, labelleft = False)\n\ndef animate(moves,lines,k):\n    coordinates = []\n    for l in lines.values():\n        coordinates.append(list(l.values()))\n    x,y = np.array(coordinates).T\n    \n    \n    x,y = np.array(coordinates[0]).T\n    line1.set_data(x,y)\n    x,y = np.array(coordinates[1]).T\n    line2.set_data(x,y)\n    x,y = np.array(coordinates[2]).T\n    line3.set_data(x,y)\n    x,y = np.array(coordinates[3]).T\n    line4.set_data(x,y)\n    x,y = list(np.array(coordinates[4]).T)\n    line5.set_data(x,y)\n    x,y = list(np.array(coordinates[5]).T)\n    line6.set_data(x,y)\n    \n    A = [l[1] for l in lines.values()]\n    B = [l[2] for l in lines.values()]\n    C = [l[3] for l in lines.values()]\n    D = [l[4] for l in lines.values()]\n    \n    x,y = np.array(A).T\n    p1.set_data(x,y)\n    x,y = np.array(B).T\n    p2.set_data(x,y)\n    x,y = np.array(C).T\n    p3.set_data(x,y)\n    x,y = np.array(D).T\n\n    p4.set_data(x,y)\n    ax.set_title(f'Moves = {moves}     Energy = {energy(lines,k)}    Interaction Energy = {k}')\n    \n    return line1,line2,line3,line4, line5, line6, p1, p2, p3, p4","a767598a":"lines = reset()\nmoves = 1\ndef animation(i):\n    global lines\n    global moves\n    k = -5\n    for i in range(100):\n        lines,e = metropolis(lines,k)\n    moves = moves + i\n    return animate(moves,lines,k);\n\n'''\nChange the frames argument to change iterations\n'''\nani = FuncAnimation(fig, animation, frames = 1_000, blit = False, interval = 1, repeat = False)\n\nrc('animation', html='jshtml')\nrc\n\nHTML(ani.to_jshtml())","2b3e4dda":"## Initializing Proteins (lines)\n\nAll simulations start from this state of the proteins","14c83c16":"## Translation\n\n1. Randomly select a line\n2. Check if that line is interarcing with other beads. If yes go to step 3. Else do nothing\n3. Randomly translate in one of 4 directions by 1 unit. Likewise choose not to translate with equal probability\n","41d650ea":"## Plotting\nCreating the lattice grid and the function for animation","53278019":"## Animation\n\nCalling the animation function and displaying it","2e46b47e":"## Imports\n\nImporting basic Libraies for array manipulation, generating random numbers and plotting","d4eba651":"## Find possible coordinates of the space for the residue to move into, and choosing one at random\n\n1. Randomly select a line, and then a point from that line\n2. Check possible postions that can be occupied\n3. Choose to move (or stay put) at one of these points randomly","d29c0c5c":"**When A-A and B-B interactions are allowed**","e19fd1e1":"**When any bead of one molecule can interract with any bead of another molecule**","d8e185ae":"![image.png](attachment:a64c7a36-0bd4-4e10-801f-fd7972c74691.png)\n","48c6fe5e":"## Calculate Energy\n\nThis calculates the total energy of the system as well as the energy of chosen protein lines, according to vairous conditions for interactions","b8083a31":"## Choose new point using Metropolis criterieon\n1. Randomly choose to translate or make a  bead move\n2. calculate w = e^(-delta E)\n3. If w = 1, randomly choose to move or stay put\n4. If w > 1, move to new line\n5. If w < 1, generate a random number r. If w > r, move to new postiton, else stay put.","e40de6e8":"## Instructions for Running this notebook\n\n1. Scroll to the bottom of this page, A simulation has already been rendered for you to play.\n\n2. Click \u25b6\ufe0f\n\n\n**If you would like to run the code yourself:**\n1. Click on edit (top left corner of this page).\n\n2. Click the RunAll button on the top left corner of the page. (Wait for 4-5 mins)\n\n3. Scroll to the bottom of the page and click \u25b6\ufe0f\n\n","c7cf08cf":"**When A-A, B-B, C-C, D-D interatctions are allowed**"}}