{"cell_type":{"5810050c":"code","f9a48dd2":"code","2a095400":"code","705bf0d1":"code","8e03fca0":"code","9c7c62ce":"code","af7225fb":"code","b843daa4":"code","265c5232":"code","4c069f4d":"code","9a6a50a5":"code","1cbffa49":"code","0a25f44b":"code","71abea16":"code","2cc36a2a":"code","6d01cc91":"code","71dbe8b7":"code","293545f5":"code","a41f7388":"markdown","647703c0":"markdown","fe3a94e6":"markdown","01e55a5a":"markdown","55a2c284":"markdown","f9c4d6f9":"markdown","bda0840f":"markdown","b86f8d19":"markdown"},"source":{"5810050c":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","f9a48dd2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2a095400":"!pip install pandas-profiling\n!pip install pandas_flavor","705bf0d1":"from pandas_profiling import ProfileReport","8e03fca0":"df = pd.read_csv(\"..\/input\/engineering-placements-prediction\/collegePlace.csv\")","9c7c62ce":"from pandas_flavor import register_dataframe_method\n\n@register_dataframe_method\ndef missing(df):\n        return sorted(\n                    [(col,str(df[col].dtypes),np.round(df[col].isna().sum()\/len(df) * 100,2)) for col in df.columns if df[col].isna().sum() !=0 ],\n                    key = lambda x: x[2], reverse=True)\n    \n@register_dataframe_method\ndef get_numeric_df(df):\n    return df.select_dtypes(np.number)\n\n@register_dataframe_method\ndef get_numeric_col_names(df):\n    return list(df.select_dtypes(np.number).columns)\n\n@register_dataframe_method\ndef discrete_features(df,thresold):\n#     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) < thresold]\n\n@register_dataframe_method\ndef continious_features(df,thresold):\n    #     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) >= thresold]\n\n@register_dataframe_method\ndef about(df):\n    print('shape of data')\n    print(df.shape)\n    print(\"==\"*50)\n    \n    print(f\"Datatypes in data\\n{df.dtypes.value_counts(ascending=False)}\")\n    print(\"==\"*50)\n    \n    \n    print(\"Percentage of missing values\")\n    print(*missing(df),sep=\"\\n\")\n    print(\"==\"*50)\n\n    print('data description \\n')\n    display(df.describe().T)\n    print(\"==\"*50)","af7225fb":"df.about()","b843daa4":"df.discrete_features(thresold=20)","265c5232":"df.continious_features(thresold=20)","4c069f4d":"profile = ProfileReport(df, title=\"Pandas Profiling Report\", explorative=True)\n","9a6a50a5":"profile","1cbffa49":"def histplot(df,x_size=30,y_size=30):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.histplot(df[i],ax=j)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n\ndef countplot(df,x_size=30,y_size=30):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.countplot(data=df, x=i,ax=j)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \n\n\n\n    \ndef bar_with_variable(df,y,x_size=30,y_size=30):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n#         tmp = pd.DataFrame(df.groupby(i)[y].median()).reset_index(inplace=True)\n        sns.countplot(data=pd.DataFrame(df.groupby(i)[y].median()).reset_index(),\n                    x=i,\n                    y=y,\n                    ax=j)\n        j.tick_params(labelrotation=45)\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \ndef violin(df,y,x_size=30,y_size=30):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n\n        sns.violinplot(data=df,\n                    x=i,\n                    y=y,\n                    ax=j)\n        \n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \n    ","0a25f44b":"countplot(df,y_size=20)","71abea16":"def comparison(df,main_feat,features):\n    comp = []\n    \n    for feature in features:\n        tmp = df.groupby([main_feat, feature]).agg({feature: 'count'})\n        tmp[feature+\" %\"] = tmp.groupby(level=0).apply(lambda x: np.round(100 * x \/ float(x.sum()),2))\n        comp.append(tmp)\n    return comp","2cc36a2a":"# features = [\"CGPA\",\"HistoryOfBacklogs\",\"PlacedOrNot\",\"Internships\",\"Hostel\", \"Stream\"]\nfeatures = df.columns.to_list()\nfeatures.remove(\"Gender\")\n\n[display(i) for i in comparison(df,\"Gender\",features)]\n","6d01cc91":"display(comparison(df,\"CGPA\",[\"PlacedOrNot\"])[0])","71dbe8b7":"display(comparison(df,\"Stream\",[\"PlacedOrNot\"])[0])","293545f5":"display(comparison(df,\"Hostel\",[\"PlacedOrNot\"])[0])","a41f7388":"## Notes from profile report\n\nHC = High correlation\n\n- `CGPA` HC `PlacedOrNot`\n- `stream` HC `Hostel`","647703c0":"## This Notebook is still under development, for now I have added EDA, need to build models\n\n## Feel free to add suggestions, drop a like if it was helpfull :)\n","fe3a94e6":"## Inital Impressions\n\n**All data is discrete**","01e55a5a":"# Custom Methods for pandas df","55a2c284":"## Comparisons","f9c4d6f9":"# Feel Free to interpret ;)","bda0840f":"# EDA","b86f8d19":"# Imports"}}