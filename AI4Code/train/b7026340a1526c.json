{"cell_type":{"0f0d35f1":"code","412baeb1":"code","938e886e":"code","05b9b50f":"code","2aa4f358":"code","e6334957":"code","4d6ae85f":"code","6e1e7c04":"code","57b7097a":"code","dbe12dc7":"code","98739315":"code","a36c6303":"code","677e1fd4":"code","4819f0f7":"code","8409144c":"code","aee98194":"code","2052c554":"code","a105fd6c":"code","13d1b974":"code","226d351f":"code","8fdc7f2d":"code","6a7b2209":"code","5a3dc503":"code","a70cd342":"code","844249df":"code","597dbef5":"code","b076df4b":"code","ada36a2b":"code","3b5dfd15":"code","14f7fd94":"code","78560998":"code","d67e46fb":"code","688e5a17":"code","f4be5827":"code","8c6c8342":"code","216be265":"code","93b49d53":"code","c5ac1871":"code","8de2f487":"code","23d04fe7":"code","e4a081ea":"code","49f278de":"code","3a183d09":"markdown","d554828e":"markdown","33f2f6ec":"markdown","298286bd":"markdown","682c9510":"markdown","4e60f630":"markdown","383983b8":"markdown","4d41f0b2":"markdown","1626b3be":"markdown","dff47507":"markdown","2c4ff87e":"markdown","8bad95f3":"markdown","c8fbd25c":"markdown","e76b84a4":"markdown","d80ebe3a":"markdown","0e68d793":"markdown","e31be36b":"markdown","67a18afc":"markdown","f6301a7e":"markdown","109c8e0f":"markdown","80a00627":"markdown","6e0ee382":"markdown","4bccb959":"markdown","9c55c94b":"markdown","8621850c":"markdown"},"source":{"0f0d35f1":"import pandas as pd\nimport numpy as np\nimport spacy\nfrom spacy import displacy\nfrom spacy.util import minibatch, compounding\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","412baeb1":"food_reviews_df=pd.read_csv('..\/input\/amazon-fine-food-reviews\/Reviews.csv')\nfood_reviews_df.shape","938e886e":"food_reviews_df.head().T","05b9b50f":"food_reviews_df = food_reviews_df[['Text','Score']].dropna()","2aa4f358":"ax=food_reviews_df.Score.value_counts().plot(kind='bar')\nfig = ax.get_figure()\nfig.savefig(\"score.png\");","e6334957":"food_reviews_df.Score[food_reviews_df.Score<=3]=0\nfood_reviews_df.Score[food_reviews_df.Score>=4]=1","4d6ae85f":"ax=food_reviews_df.Score.value_counts().plot(kind='bar')\nfig = ax.get_figure()\nfig.savefig(\"score_boolean.png\");","6e1e7c04":"food_reviews_df.head()","57b7097a":"train_pos_df=food_reviews_df[food_reviews_df.Score==1][:50000]\ntrain_neg_df=food_reviews_df[food_reviews_df.Score==0][:50000]","dbe12dc7":"train_df=train_pos_df.append(train_neg_df)\ntrain_df.shape","98739315":"val_pos_df=food_reviews_df[food_reviews_df.Score==1][50000:60000]\nval_neg_df=food_reviews_df[food_reviews_df.Score==0][50000:60000]\nval_df=val_pos_df.append(val_neg_df)\nval_df.shape","a36c6303":"spacy_tok = spacy.load('en_core_web_sm')\nsample_review=food_reviews_df.Text[54]\nsample_review","677e1fd4":"parsed_review = spacy_tok(sample_review)\nparsed_review","4819f0f7":"!wget https:\/\/raw.githubusercontent.com\/tylerneylon\/explacy\/master\/explacy.py","8409144c":"import explacy\nexplacy.print_parse_info(spacy_tok, 'The salad was surprisingly tasty.')","aee98194":"explacy.print_parse_info(spacy_tok,food_reviews_df.Text[0])","2052c554":"tokenized_text = pd.DataFrame()\n\nfor i, token in enumerate(parsed_review):\n    tokenized_text.loc[i, 'text'] = token.text\n    tokenized_text.loc[i, 'lemma'] = token.lemma_,\n    tokenized_text.loc[i, 'pos'] = token.pos_\n    tokenized_text.loc[i, 'tag'] = token.tag_\n    tokenized_text.loc[i, 'dep'] = token.dep_\n    tokenized_text.loc[i, 'shape'] = token.shape_\n    tokenized_text.loc[i, 'is_alpha'] = token.is_alpha\n    tokenized_text.loc[i, 'is_stop'] = token.is_stop\n    tokenized_text.loc[i, 'is_punctuation'] = token.is_punct\n\ntokenized_text[:20]","a105fd6c":"spacy.displacy.render(parsed_review, style='ent', jupyter=True)","13d1b974":"spacy.explain('GPE') # to explain POS tag","226d351f":"sentence_spans = list(parsed_review.sents)\nsentence_spans","8fdc7f2d":"displacy.render(parsed_review, style='dep', jupyter=True,options={'distance': 140})","6a7b2209":"options = {'compact': True, 'bg': 'violet','distance': 140,\n           'color': 'white', 'font': 'Trebuchet MS'}\ndisplacy.render(parsed_review, jupyter=True, style='dep', options=options)","5a3dc503":"spacy.explain(\"ADJ\") ,spacy.explain(\"det\") ,spacy.explain(\"ADP\") ,spacy.explain(\"prep\")  # to understand tags","a70cd342":"noun_chunks_df = pd.DataFrame()\n\nfor i, chunk in enumerate(parsed_review.noun_chunks):\n    noun_chunks_df.loc[i, 'text'] = chunk.text\n    noun_chunks_df.loc[i, 'root'] = chunk.root,\n    noun_chunks_df.loc[i, 'root.text'] = chunk.root.text,\n    noun_chunks_df.loc[i, 'root.dep_'] = chunk.root.dep_\n    noun_chunks_df.loc[i, 'root.head.text'] = chunk.root.head.text\n\nnoun_chunks_df[:20]","844249df":"!pip install scattertext\nimport scattertext as st\nnlp = spacy.load('en',disable_pipes=[\"tagger\",\"ner\"])","597dbef5":"nlp = spacy.load('en',disable_pipes=[\"tagger\",\"ner\"])\ntrain_df['parsed'] = train_df.Text[49500:50500].apply(nlp)\ncorpus = st.CorpusFromParsedDocuments(train_df[49500:50500],\n                             category_col='Score',\n                             parsed_col='parsed').build()","b076df4b":"html = st.produce_scattertext_explorer(corpus,\n          category=1,\n          category_name='Positive',\n          not_category_name='Negative',\n          width_in_pixels=700,\n          minimum_term_frequency=15,\n          term_significance = st.LogOddsRatioUninformativeDirichletPrior(),\n          )","ada36a2b":"# uncomment this cell to load the interactive scattertext visualisation\nfilename = \"positive-vs-negative.html\"\nopen(filename, 'wb').write(html.encode('utf-8'))\nIFrame(src=filename, width = 900, height=900)\n","3b5dfd15":"!pip install sense2vec==1.0.0a0","14f7fd94":"import sense2vec\nfrom sense2vec import Sense2VecComponent\n\ns2v = Sense2VecComponent('..\/input\/reddit-vectors-for-sense2vec-spacy\/reddit_vectors-1.1.0\/reddit_vectors-1.1.0\/')\nspacy_tok.add_pipe(s2v)\ndoc = spacy_tok(u\"dessert.\")\nfreq = doc[0]._.s2v_freq\nvector = doc[0]._.s2v_vec\nmost_similar = doc[0]._.s2v_most_similar(5)\nmost_similar,freq","78560998":"doc = spacy_tok(u\"burger\")\nmost_similar = doc[0]._.s2v_most_similar(4)\nmost_similar","d67e46fb":"doc = spacy_tok(u\"peanut butter\")\nmost_similar = doc[0]._.s2v_most_similar(4)\nmost_similar","688e5a17":"train_df['tuples'] = train_df.apply(\n    lambda row: (row['Text'],row['Score']), axis=1)\ntrain = train_df['tuples'].tolist()\ntrain[:1]","f4be5827":"train[-2:]","8c6c8342":"#functions from spacy documentation\ndef load_data(limit=0, split=0.8):\n    train_data = train\n    np.random.shuffle(train_data)\n    train_data = train_data[-limit:]\n    texts, labels = zip(*train_data)\n    cats = [{'POSITIVE': bool(y)} for y in labels]\n    split = int(len(train_data) * split)\n    return (texts[:split], cats[:split]), (texts[split:], cats[split:])\n\ndef evaluate(tokenizer, textcat, texts, cats):\n    docs = (tokenizer(text) for text in texts)\n    tp = 1e-8  # True positives\n    fp = 1e-8  # False positives\n    fn = 1e-8  # False negatives\n    tn = 1e-8  # True negatives\n    for i, doc in enumerate(textcat.pipe(docs)):\n        gold = cats[i]\n        for label, score in doc.cats.items():\n            if label not in gold:\n                continue\n            if score >= 0.5 and gold[label] >= 0.5:\n                tp += 1.\n            elif score >= 0.5 and gold[label] < 0.5:\n                fp += 1.\n            elif score < 0.5 and gold[label] < 0.5:\n                tn += 1\n            elif score < 0.5 and gold[label] >= 0.5:\n                fn += 1\n    precision = tp \/ (tp + fp)\n    recall = tp \/ (tp + fn)\n    f_score = 2 * (precision * recall) \/ (precision + recall)\n    return {'textcat_p': precision, 'textcat_r': recall, 'textcat_f': f_score}\n\n#(\"Number of texts to train from\",\"t\" , int)\nn_texts=30000\n#You can increase texts count if you have more computational power.\n\n#(\"Number of training iterations\", \"n\", int))\nn_iter=10","216be265":"nlp = spacy.load('en_core_web_sm')  # create english Language class","93b49d53":"# add the text classifier to the pipeline if it doesn't exist\n# nlp.create_pipe works for built-ins that are registered with spaCy\nif 'textcat' not in nlp.pipe_names:\n    textcat = nlp.create_pipe('textcat')\n    nlp.add_pipe(textcat, last=True)\n# otherwise, get it, so we can add labels to it\nelse:\n    textcat = nlp.get_pipe('textcat')\n\n# add label to text classifier\ntextcat.add_label('POSITIVE')\n\n# load the dataset\nprint(\"Loading food reviews data...\")\n(train_texts, train_cats), (dev_texts, dev_cats) = load_data(limit=n_texts)\nprint(\"Using {} examples ({} training, {} evaluation)\"\n      .format(n_texts, len(train_texts), len(dev_texts)))\ntrain_data = list(zip(train_texts,\n                      [{'cats': cats} for cats in train_cats]))","c5ac1871":"# get names of other pipes to disable them during training\nother_pipes = [pipe for pipe in nlp.pipe_names if pipe != 'textcat']\nwith nlp.disable_pipes(*other_pipes):  # only train textcat\n    optimizer = nlp.begin_training()\n    print(\"Training the model...\")\n    print('{:^5}\\t{:^5}\\t{:^5}\\t{:^5}'.format('LOSS', 'P', 'R', 'F'))\n    for i in range(n_iter):\n        losses = {}\n        # batch up the examples using spaCy's minibatch\n        batches = minibatch(train_data, size=compounding(4., 32., 1.001))\n        for batch in batches:\n            texts, annotations = zip(*batch)\n            nlp.update(texts, annotations, sgd=optimizer, drop=0.2,\n                       losses=losses)\n        with textcat.model.use_params(optimizer.averages):\n            # evaluate on the dev data split off in load_data()\n            scores = evaluate(nlp.tokenizer, textcat, dev_texts, dev_cats)\n        print('{0:.3f}\\t{1:.3f}\\t{2:.3f}\\t{3:.3f}'  # print a simple table\n              .format(losses['textcat'], scores['textcat_p'],\n                      scores['textcat_r'], scores['textcat_f']))\n","8de2f487":"# test the trained model\ntest_text1 = 'This tea is fun to watch as the flower expands in the water. Very smooth taste and can be used again and again in the same day. If you love tea, you gotta try these \"flowering teas\"'\ntest_text2=\"I bought this product at a local store, not from this seller.  I usually use Wellness canned food, but thought my cat was bored and wanted something new.  So I picked this up, knowing that Evo is a really good brand (like Wellness).<br \/><br \/>It is one of the most disgusting smelling cat foods I've ever had the displeasure of using.  I was gagging while trying to put it into the bowl.  My cat took one taste and walked away, and chose to eat nothing until I replaced it 12 hours later with some dry food.  I would try another flavor of their food - since I know it's high quality - but I wouldn't buy the duck flavor again.\"\ndoc = nlp(test_text1)\ntest_text1, doc.cats","23d04fe7":"doc2 = nlp(test_text2)\ntest_text2, doc2.cats","e4a081ea":"output_dir=%pwd\nnlp.to_disk(output_dir)\nprint(\"Saved model to\", output_dir)","49f278de":"# test the saved model\nprint(\"Loading from\", output_dir)\nnlp2 = spacy.load(output_dir)\ndoc2 = nlp2(test_text2)\nprint(test_text2, doc2.cats)","3a183d09":"#### Processing Noun chunks","d554828e":"### Introduction\n\n#### About Dataset:\nWe will be using rich dataset of amazon fine food reviews.\n\n####  What are we trying to achieve??\nWe are going to tackle an interesting natural language processing problem i.e sentiment or text classification.\nWe will explore texual data using amazing spaCy library and build a text classification model.\n\n### Here is breakdown of concepts I will try to explain.\nWe will extract linguistic features like \n1. tokenization,\n1. part-of-speech tagging, \n1. dependency parsing, \n1. lemmatization , \n1. named entities recognition,\n1. Sentence Boundary Detection\t\nfor building language models later.\n\nVisualizing Data\n1. explacy - explaining how parsing is done\n1. displaCy - visualizing named entities\n\nWord vectors and similarity\n1. sense2vec - using contextual information for building word embeddings\n\nText classification model\n1. SpaCy TextCategorizer","33f2f6ec":"### Loading data","298286bd":"#### Named Entity Recognition (NER)\nNamed entity is real world object like Person, Organization etc\n\nSpacy figures out below entities automatically:\n\n|Type\t|Description|\n|------|------|\n|PERSON|\tPeople, including fictional.\n|NORP|\tNationalities or religious or political groups.|\n|FAC|\tBuildings, airports, highways, bridges, etc.|\n|ORG|\tCompanies, agencies, institutions, etc.|\n|GPE|\tCountries, cities, states.|\n|LOC|\tNon-GPE locations, mountain ranges, bodies of water.|\n|PRODUCT|\tObjects, vehicles, foods, etc. (Not services.)|\n|EVENT|\tNamed hurricanes, battles, wars, sports events, etc.|\n|WORK_OF_ART|\tTitles of books, songs, etc.|\n|LAW|\tNamed documents made into laws.|\n|LANGUAGE|\tAny named language.|\n|DATE|\tAbsolute or relative dates or periods.|\n|TIME|\tTimes smaller than a day.|\n|PERCENT|\tPercentage, including \"%\".|\n|MONEY|\tMonetary values, including unit.|\n|QUANTITY|\tMeasurements, as of weight or distance.|\n|ORDINAL|\t\"first\", \"second\", etc.|\n|CARDINAL|\tNumerals that do not fall under another type|","682c9510":"### Word vectors and similarity","4e60f630":"Ok let's do some modelling and focus on scoring our food!!","383983b8":"Positive review is indeed close to 1","4d41f0b2":"Similarity between entities can be kind of fun.\n\n\nThe following attributes are available via the ._ property \u2013 for example token._.in_s2v:\n\nName\t|Attribute Type|\tType|\tDescription|\n--------|---------------|-------------|---------------|\nin_s2v\t|property|\tbool|\tWhether a key exists in the vector map.\ns2v_freq|\tproperty|\tint|\tThe frequency of the given key.\ns2v_vec|\tproperty|\tndarray[float32]|\tThe vector of the given key.\ns2v_most_similar|\tmethod|\tlist|\tGet the n most similar terms. Returns a list of ((word, sense), score) tuples.\n\n\n\n## SpaCy Text Categorizer\n\nWe will train a multi-label convolutional neural network text classifier on our food reviews, using spaCy's new TextCategorizer  component.\n\nSpaCy provides classification model with multiple, non-mutually exclusive labels. You can change the model architecture rather easily, but by default, the TextCategorizer class uses a convolutional neural network to assign position-sensitive vectors to each word in the document. The TextCategorizer uses its own CNN model, to avoid sharing weights with the other pipeline components. The document tensor is then summarized by concatenating max and mean pooling, and a multilayer perceptron is used to predict an output vector of length nr_class, before a logistic activation is applied elementwise. The value of each output neuron is the probability that some class is present.","1626b3be":"Model looks preety good. We can definitely improve it further by feeding more data and data augmentations.\nThanks for reading. Hope you learnt something new :)  #TODO Data Augmentation.","dff47507":"#### Tokenization\nFirst step in any nlp pipeline is tokenizing text i.e breaking down paragraphs into sentenses and then sentenses into words, punctuations and so on.\n\nwe will load english language model to tokenize our english text.\n\nEvery language is different and have different rules. Spacy offers 8 different language models.","2c4ff87e":"There is not much difference between parsed review and original one. But we will see ahead what has actually happened.\nWe can see how parsing has been done visually through **explacy**.","8bad95f3":"Let's read in food reviews data","c8fbd25c":"### Visualizing using Scattertext","e76b84a4":"Kindly scroll down if you can't see the output above.\nYou can even customize dependency parser's output as below.","d80ebe3a":"Let's focus on texual data and ratings for text classification.","0e68d793":"Since we have huge data, since it might be difficult to train in kernel, I will reduce data size of 100K rows.\nTo balance classes, i have selected equal samples from each class.","e31be36b":"Negative review is close to 0","67a18afc":"We have five-star rating system.\nIt looks like we have more reviews with ratings 5, this can lead to unbalanced classes. We will treat rating 4 and 5 as positive and rest as negative reviews.","f6301a7e":"### Linguistic features","109c8e0f":"### Training model","80a00627":"Text column contains review given by customer.","6e0ee382":"#### Part-of-speech tagging\nAfter tokenization we can parse and tag variety of parts of speech to paragraph text. SpaCy uses statistical models in background to predict which tag will go for each word(s) based on the context.\n\n##### Lemmatization\nIt is the process of extracting uninflected\/base form of the word.\nLemma can be like\nFor eg. \n\nAdjectives: best, better \u2192 good\nAdverbs: worse, worst \u2192 badly\nNouns: ducks, children \u2192 duck, child\nVerbs: standing,stood \u2192 stand\n","4bccb959":"### Sence2vec\n\nThe idea is get something better than word2vec model.\n\nThe idea behind sense2vec is super simple. If the problem is that duck as in waterfowl and duck as in crouch are different concepts, the straight-forward solution is to just have two entries, duckN and duckV.  Trask et al (2015) published a nice set of experiments showing that the idea worked well.\n\nIt assight parts of speech tags like verb, noun , adjective to words, which will in turn be used to make sence of context.\n1. Please book [VERB] my ticket.\n2. Read the book [NOUN].\n\nRead more [here](https:\/\/explosion.ai\/blog\/sense2vec-with-spacy) and [here](https:\/\/github.com\/explosion\/sense2vec)\n\nReddit talks about food a lot so we can get nice similarity vectors for food items.","9c55c94b":"#### Prepare data\nLet's prepare the data as SpaCy would like it.\nIt accepts list of tuples of text and labels.","8621850c":"#### Dependency parsing\nSyntactic Parsing or Dependency Parsing is process of identifyig sentenses and assigning a syntactic structure to it.\nAs in Subject combined with object makes a sentence.\nSpacy provides parse tree which can be used to generate this structure.\n\n##### Sentense Boundry Detection\nFiguring out where sentense starts and ends is very imporatnt part of nlp."}}