{"cell_type":{"c4a8c795":"code","4b8c35d7":"code","fce5e30a":"code","fae2cb46":"code","9708dc59":"code","531f09d9":"code","70f992a2":"code","09cfbfa5":"code","e99ed76c":"code","9c1ffc8a":"code","4a4495c3":"code","d481d1fd":"code","e78c80f7":"code","84f125c9":"code","20f4df79":"code","39a227f0":"code","46878481":"code","7eab0bb0":"code","ecca50d3":"code","029e47c6":"code","388a5bf1":"code","5a300099":"code","d253e5a0":"code","f0e657c4":"code","8dc210d4":"code","87ffcfc7":"code","ad36febd":"code","b005f0c4":"code","e9ee4376":"code","d9c93787":"code","3d4d782e":"code","1eace8aa":"code","f1f8ab44":"code","47aa6955":"code","4b8735b5":"code","14ebce12":"code","7b765bb4":"code","868140df":"markdown","3db04d9e":"markdown","9f7e9253":"markdown","509418a0":"markdown","2f99b974":"markdown","18f3927c":"markdown","63c684a9":"markdown","c268bf89":"markdown"},"source":{"c4a8c795":"!rm -r \/opt\/conda\/lib\/python3.6\/site-packages\/lightgbm\n!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM","4b8c35d7":"!apt-get install -y -qq libboost-all-dev","fce5e30a":"%%bash\ncd LightGBM\nrm -r build\nmkdir build\ncd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)","fae2cb46":"!cd LightGBM\/python-package\/;python3 setup.py install --precompile","9708dc59":"!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM","531f09d9":"import numpy as np\nimport os\nimport pandas as pd\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nimport lightgbm as lgb\nfrom sklearn.feature_selection import RFE, RFECV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.base import TransformerMixin, BaseEstimator\nfrom sklearn.pipeline import make_pipeline, FeatureUnion, Pipeline\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, cross_validate\nfrom sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score \nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, roc_auc_score, auc, log_loss\nfrom sklearn.compose import ColumnTransformer\nimport matplotlib.pyplot as plt","70f992a2":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","09cfbfa5":"train.head()","e99ed76c":"train.shape","9c1ffc8a":"train.isnull().sum()","4a4495c3":"train.info()","d481d1fd":"variables = train.drop([\"Id\",\"SalePrice\"], axis=1)\nvar_resp = train[\"SalePrice\"].copy()","e78c80f7":"test.head()","84f125c9":"x_train, x_test, y_train, y_test = train_test_split(variables, var_resp, test_size=0.2, random_state=2)","20f4df79":"x_train.info()","39a227f0":"# Columns with high qty of missings\ncolumns = [\"Alley\", \"PoolQC\", \"MiscFeature\", \"Fence\", \"FireplaceQu\"]\n\nx_train.drop(columns, axis = 1, inplace = True)\nx_test.drop(columns, axis = 1, inplace = True)","46878481":"# The ratio of the number of rooms to the number of rooms and the ratio of the number of bathrooms\n# by the number of rooms can be variables that improve the model\ndef add_features(data):\n    data[\"bedrooms_per_rooms_abv_grad\"] = data[\"BedroomAbvGr\"].div(data[\"TotRmsAbvGrd\"]).replace(np.inf, 0)\n    data[\"bath_per_bedrooms_abv_grad\"] = data[\"FullBath\"].div(data[\"BedroomAbvGr\"]).replace(np.inf, 0)\n    data[\"LotFrontage\"] = data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n    data[\"YrBltAndRemod\"] = data['YearBuilt'] + data['YearRemodAdd']\n    data['TotalSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']\n    data['Total_sqr_footage'] = data['BsmtFinSF1'] + data['BsmtFinSF2'] + data['1stFlrSF'] + data['2ndFlrSF']\n    data['Total_Bathrooms'] = (data['FullBath'] + (0.5 * data['HalfBath']) +\n                               data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath']))\n    data['Total_porch_sf'] = (data['OpenPorchSF'] + data['3SsnPorch'] +\n                              data['EnclosedPorch'] + data['ScreenPorch'] +\n                              data['WoodDeckSF'])\n    return data","7eab0bb0":"x_train = add_features(x_train)\nx_test = add_features(x_test)","ecca50d3":"num_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('std_scaler', StandardScaler()),\n    ])\n\ncat_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"most_frequent\")),\n        ('oneHot', OneHotEncoder(handle_unknown='ignore')),\n    ])","029e47c6":"num_attribs = x_train.select_dtypes(include=np.number).columns.tolist()\ncat_attribs = x_train.select_dtypes(include='object').columns.tolist()","388a5bf1":"full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", cat_pipeline, cat_attribs),\n    ])","5a300099":"train_prepared = full_pipeline.fit_transform(x_train)","d253e5a0":"train_prepared.shape","f0e657c4":"test_prepared = full_pipeline.transform(x_test)","8dc210d4":"test_prepared","87ffcfc7":"# Maximum number of levels in tree\n# Decrease to previne overfit\nmax_depth = [int(x) for x in np.linspace(2, 50, num = 4)]\nmax_depth.append((None, -1))\n\nparam_grid = {\n    'num_iterations': [10, 50, 100, 500, 1000],\n    'learning_rate': [0.0001, 0.001, 0.01, 0.1],\n    'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 2000, num = 8)],\n    'max_depth': max_depth\n}\n\nlgbm = lgb.LGBMRegressor(device = 'gpu')\ngrid_search = GridSearchCV(lgbm, param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, return_train_score=True, n_jobs=-1)\ngrid_search = grid_search.fit(train_prepared, y_train)","ad36febd":"grid_search.best_params_","b005f0c4":"grid_search.best_estimator_","e9ee4376":"grid_search.best_score_","d9c93787":"importances = pd.DataFrame(zip(x_train.columns, grid_search.best_estimator_.feature_importances_), columns=['Feature','Value']).sort_values(by='Value', ascending=False)\nimportances[:20]","3d4d782e":"test_ID = test['Id'].copy()","1eace8aa":"# Columns with high qty of missings and identity\ncolumns = [\"Id\", \"Alley\", \"PoolQC\", \"MiscFeature\", \"Fence\", \"FireplaceQu\"]\n\ntest.drop(columns, axis = 1, inplace = True)\n\ntest = add_features(test)","f1f8ab44":"final_test = full_pipeline.transform(test)","47aa6955":"y_predicted_test = grid_search.predict(final_test)","4b8735b5":"dataset = pd.DataFrame({'Id': test_ID, 'SalePrice': y_predicted_test})","14ebce12":"dataset.head()","7b765bb4":"dataset.to_csv(\"LGBMRegressor_output.csv\", sep=\",\", index=False)","868140df":"## LightGBM GPU Installation","3db04d9e":"## Loading the data","9f7e9253":"## Build and re-install LightGBM with GPU support","509418a0":"## Preprocessing","2f99b974":"## Imports","18f3927c":"## Modeling with hyperparameter tuning","63c684a9":"## Evaluate the model","c268bf89":"## Make submission file"}}