{"cell_type":{"d514a039":"code","fa0a9614":"code","1f117740":"code","f7f7e771":"code","6eca5f8d":"code","dbfbf1c9":"code","e69b02d6":"code","7f67d2e5":"code","c27b782a":"code","a007ce61":"code","d962cc68":"code","43738619":"code","853b57e4":"code","1e2bfcff":"code","e71cf0ca":"code","91fa73bb":"code","a40bb1c7":"code","1ac0196e":"code","904087ca":"code","208d0c82":"code","6d463699":"code","2909daee":"markdown"},"source":{"d514a039":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.stats import spearmanr\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa0a9614":"from fastai.text import *","1f117740":"data=pd.read_csv('\/kaggle\/input\/google-quest-challenge\/train.csv',index_col='qa_id')\ndata.head(5)","f7f7e771":"print(data.shape)\nprint(list(data.columns))","6eca5f8d":"data.isnull().sum()","dbfbf1c9":"val=data[:1000]\ntrain=data[1000:]\nprint(\"Training data shape is:\",train.shape)\nprint(\"Validation data shape is:\",val.shape)","e69b02d6":"cols=['question_title', 'question_body', 'question_user_name', 'question_user_page', 'answer', 'answer_user_name', 'answer_user_page', 'url', 'category', 'host']\ndata_bunch = (TextList.from_df(data, cols=cols)\n                .split_by_rand_pct(0.2)\n                .label_for_lm()  \n                .databunch(bs=48))\ndata_bunch.show_batch()","7f67d2e5":"learn = language_model_learner(data_bunch,AWD_LSTM,pretrained_fnames=['\/kaggle\/input\/wt103-fastai-nlp\/lstm_fwd','\/kaggle\/input\/wt103-fastai-nlp\/itos_wt103'],pretrained=True,drop_mult=0.7)\n\n# select the appropriate learning rate\nlearn.lr_find()\n\n# we typically find the point where the slope is steepest\nlearn.recorder.plot()\n\n# Fit the model based on selected learning rate\nlearn.fit_one_cycle(2, 1e-3, moms=(0.8,0.7))\nlearn.unfreeze()\nlearn.fit_one_cycle(1, 1e-3, moms=(0.8,0.7))\n\n# Save the encoder for use in classification\nlearn.save_encoder('fine_tuned_enc')","c27b782a":"target_cols=['question_asker_intent_understanding', 'question_body_critical', 'question_conversational', 'question_expect_short_answer', 'question_fact_seeking', 'question_has_commonly_accepted_answer', 'question_interestingness_others', 'question_interestingness_self', 'question_multi_intent', 'question_not_really_a_question', 'question_opinion_seeking', 'question_type_choice', 'question_type_compare', 'question_type_consequence', 'question_type_definition', 'question_type_entity', 'question_type_instructions', 'question_type_procedure', 'question_type_reason_explanation', 'question_type_spelling', 'question_well_written', 'answer_helpful', 'answer_level_of_information', 'answer_plausible', 'answer_relevance', 'answer_satisfaction', 'answer_type_instructions', 'answer_type_procedure', 'answer_type_reason_explanation', 'answer_well_written']\ntest=pd.read_csv('\/kaggle\/input\/google-quest-challenge\/test.csv')\n#test_data = TextList.from_df(test, cols=cols, vocab=data_bunch.vocab)\ndata_clas = TextClasDataBunch.from_df('.', train, val, test,\n                  vocab=data_bunch.vocab,\n                  text_cols=cols,\n                  label_cols=target_cols,\n                  bs=32)","a007ce61":"class RhoMetric(Callback):\n    \n    def on_epoch_begin(self, **kwargs):\n        self.corr = 0.\n        self.count= 0.\n    \n    def on_batch_end(self, last_output, last_target, **kwargs):\n        self.count += torch.tensor(1.)\n        y_pred=last_output.cpu().numpy()\n        y_true=last_target.cpu().numpy()\n        score=0.0\n        if np.ndim(y_pred) == 2:\n            for i in range(30):\n                score += np.nan_to_num(spearmanr(y_pred[:, i], y_true[:,i]).correlation) \/ 30\n        else:\n            score = spearmanr(y_true, y_pred).correlation \/ 30\n        \n        self.corr=self.corr + torch.tensor(score)\n    \n    def on_epoch_end(self, last_metrics, **kwargs):\n        return add_metrics(last_metrics, self.corr\/self.count)","d962cc68":"rhometric=RhoMetric()\nlearn_classifier = text_classifier_learner(data_clas, AWD_LSTM,pretrained=False,drop_mult=0.7,metrics=[rhometric])\nfnames = ['\/kaggle\/input\/wt103-fastai-nlp\/lstm_fwd.pth','\/kaggle\/input\/wt103-fastai-nlp\/itos_wt103.pkl']\nlearn_classifier.load_pretrained(*fnames, strict=False)\n# load the encoder saved  \nlearn_classifier.load_encoder('fine_tuned_enc')\nlearn_classifier.freeze()\n\n# select the appropriate learning rate\nlearn_classifier.lr_find()\n\n# we typically find the point where the slope is steepest\nlearn_classifier.recorder.plot()","43738619":"# Fit the model based on selected learning rate\nimport warnings\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\nlearn_classifier.fit_one_cycle(5, 1e-3, moms=(0.8,0.7))","853b57e4":"learn.unfreeze()\nlearn_classifier.fit_one_cycle(20, 1e-3, moms=(0.8,0.7))","1e2bfcff":"learn_classifier.show_results()","e71cf0ca":"preds, target = learn_classifier.get_preds(DatasetType.Valid, ordered=True)\nlabels = preds.numpy()","91fa73bb":"labels.shape","a40bb1c7":"from scipy.stats import spearmanr\nscore = 0\nfor i in range(30):\n    score += np.nan_to_num(spearmanr(val[target_cols].values[:, i], labels[:,i]).correlation) \/ 30\nscore","1ac0196e":"preds_test, target_test = learn_classifier.get_preds(DatasetType.Test, ordered=True)\nlabels_test = preds_test.numpy()","904087ca":"labels_test.shape","208d0c82":"submission=pd.read_csv('\/kaggle\/input\/google-quest-challenge\/sample_submission.csv')\nprint(submission.shape)\nsubmission.loc[:,target_cols]=labels_test\nprint(submission.shape)\nsubmission.head()","6d463699":"submission.to_csv('submission.csv', index=False)","2909daee":"This kernel is based on the wonderful work done at:\n\nhttps:\/\/www.kaggle.com\/atikur\/google-quest-fastai-v1\n\nhttps:\/\/medium.com\/@nikkisharma536\/deep-learning-on-multi-label-text-classification-with-fastai-d5495d66ed88"}}