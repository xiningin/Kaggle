{"cell_type":{"8c13430c":"code","072ccd4e":"code","e4a3cb32":"code","44f83f69":"code","868a77c9":"code","a476afbb":"code","8d304c5b":"code","2205efb6":"code","25378fd5":"code","b453c251":"code","f14b41ec":"code","32551d4b":"code","902d3767":"code","7dcf19aa":"code","d7339834":"code","321c9604":"code","1b8a2f7c":"code","721bb47d":"code","ab9f2f4a":"code","d808d22d":"code","658bba04":"code","658f91bd":"code","03d6a838":"code","443ede82":"code","b9f63e9b":"code","47106b91":"code","6205d749":"markdown","1ef163b7":"markdown","42a3d4b2":"markdown","f396bba4":"markdown","90b35f4d":"markdown","55668331":"markdown","5929223e":"markdown","2fd1ed7c":"markdown","1ab8e2ea":"markdown","79835f9e":"markdown","90ef2526":"markdown"},"source":{"8c13430c":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJkAAACnCAMAAAA18g5VAAAAxlBMVEX\/\/\/+1EBAAAAB\/f38\/Pz+fn5\/v7++\/v7\/f39\/HS0sQEBDPz8+Pj49PT0+vr68gICBfX19vb2+aR0ddNDQvLy+YmJi7JSXvzMxOLCy8LCyeT0\/4+Pi4GxtYWFgkJCRuQkK7OzvExMTsw8P46OitT08tICC2RUVQMzMWFhbotLSkpKSJSkpnZ2f78vLioqLKVlbVeHjcjo7TcHDn5+f03NzPZmbelZXZg4PCOjrlrKzpurrJUlKQdXV1Y2P24eFERESrbGxaQEAYWkJMAAAJEElEQVR4nO2cW3vbNgyGZYk6RAfL7pRmXQ5rk61rsyQ9rF23dmu3\/\/+nRlkCCZAUSVmyswvhoo8tk8RLfCBEyk6DIEi2TRg2mzToLY2QwcUg4W9EE25ZFK27V3EUxXBVdkxRS9Y0rExkX2izRuPFpF+xLvg\/edjZFvqFyORo\/E2NRkr5+w6IhSGDq7KjmNO2v5ALfNmqlmwMX0ujOAqSXB3MTFa379AkW7KwcJNtDLBofBFaJq9t2pDFQcxfVkmQcUXz3mcbVH6VYTXjXZ9KIcsLnYwRNXfT5JcYxuhbtdcaRFZHUZtYYVgGWdp1bUOxZoyhVMBT7Du2nTJKFjaJRka67RSJYWpMaVXxF+ATRmnb5SIYeVkEiikusla6WuYikLVztpG1o\/d9NnJi0CqChEBkIlQiz8ji0VxsWoaSz0E0SkVSGNVEYqayQ0oGz2qUyGKUTLgu6t5HjgNHyVr8ctdHLLDWUdnOKjKuALSa+mELuYL4q5qxhmSuHEX2TuKqg8NFgZKVXUJUqM0uBN0ycJD1gVqTmEE0ROLqMUvTlH+axTnSXCOr5Viwvjpx4j4VUDei5lp+yGS6G8Ak2Qac8JjWbYcKeVXJ1hJMhL9Pm0gjIytgN6ctOKxkq76QlCpZshXi7Wp7me4q9VDVQFVQrC9I6I2dbDeputrli4hQ16pNXqJmzgvXzkWXjkkjfG7RiNhFJiaXylZiqTErGb6jxEqrNe7J9HYJM4ARFxsZTiYKhyBrp2YhC9Z9kjKZxSGqtKCnIGMop4qoYpsyw8MFeLdQys1Ewa93DTPxKqF7Dbwh6dkiVpHL0KrdvwBZv9eIM637Yost9v8yvLfmRbjSt2rImKHyccvpjau1rojJm8+uXLe2oY7jAFs\/fqSRdVZHZKeGrIAZKA1gr5+oLRvZpuzbiKNE55hsvVxkvLlaxxUCZabiji8PMHBgInsJSt87znFpdZLxW4QpbIkMq\/JJrigltk2l2lcqDo4b5MqDjE5FGSsk+6XW+mDm8B5kl3LGWrTFaEyO40NGpqIEgkSH+IWk2YqGMEE9FSPDYCaydm8E2yNtKtQ98dgZaAWLVs4B5NSXLwqJ0NxEBhxrCaduGsj+UVkjVR\/o7l0h2\/VX4KSFlg4WCy7byHho4HGCkua9uz4cOf0Q4tmFUoqpXsGPXVAjqB12MjljWnP7TCkrbfaBlLPTBSUkvYJrMUnwfsE5yEQfUurBd9YXryYgViHX+EDTtYMbAJ4OXXrdgnORwQyJnJFwXZsiCnImMrq5bFeiT81kHYCTDLLCQLsWn9LCASFto9IjlTLyjcGJWq42PmSwkvSY5EgaWvAqMb6QO4fI0yykZLV4fleOIEN1A+8ySH8dHZYKvCiUlUvJGDhr4+1NJkfK8JXeEa0qEJcUxMwgeFul2ilksoLnhZMM2sorGzw2PNiihaN3v5VrN4EZQOKZyWTG5Y2LrFLJFJaNoY+IpBBTjAOelROtHAQ9y7WTgXSyLsKqb7q7KzxwIIUD5BRiKndatQJix+TGZyGDkEm16tBotHBU+KMGw3ZGxSSO0cMVG5mIrSgLpKgjo7tuEqFSh1V2fMQxevY\/SJaJyMqbkxLsgTCQCGUarCKm4rjAaDpZlsZyljIgWThktHCgCDU6rHq2UEKSak2H9rQoy9Slgwx\/cyTWSSiDiWDV06IqFoqvnQx9FwbP5fE3ZXAN+0KxzTR36qFGT3BJYiVDOyAIBclg\/dgWiBs3yqnENOAAmdTGQpZjlWrFG4kPcSjklFeFnNrR31CuYKUNkuVbHAkoGcrptx+FFA4hp8QAOTUxTWSJ6e4kTfmaRz9cU5cEuNEw1FOVlQxSuiMj3wCXqf6Utf8o9rmeDn7Xqx+sU9O4hfJ98mKLLbbYYot52s2Hs+vr67P7x+bAdv3u48nTFdizL28fzh4bidv9w5uLlW7PPn14XKzXRqzOTh5uHo3r92eDWDu7+PT1Mbi+vh0OF2I7\/oI4+8PNtUu4P4\/Ldf\/Wj6u1N8eU9ObEH4xL+vpoYNdP3TjE3p5P9nmebq+cjT57pL5ib6ahJbeX7fHJ1ezP0VzcTvZfo1kJJ0hHw9f7gK1WX\/aKWquhPPPa216Pl7Kzj6Oxeg09yT7sC7ZavRuFJTX0I7tx3I+s9tmXimroRzaqjql24bX90DT0Ivs0BYzXDieWSUMfsg\/TwFarBxvVkIY+ZF+mkj0d3LFZNPQg27OSYXtvHNiuoZvsfMq6BNMWgVtDN9nDDGDKIvDS0Ek2S8hWK3mqKjw1dJJdzwLW36TGaOgkez8P2cX9WA2dZGN3iwP2\/K+xGrrIZigZq4uXv\/68N9Yg2Ygjidme\/fSjW8Pm7ycWM5N5HuIG7PkPvzipWJQmwZltFCPY1\/2pPDTMq\/JFt+cdT7bX5n\/lo2F9eYq+FhtPttf+x6nh1d2t8v3OeLI3Y6mcGrLt2vBL0\/Fk4xaAQ8P8W5QOHKXGk42os3YNX9l\/aD2ezPPIZNfwanPq+quN0WT3PlhWDZvt7W8Oqr3IbpxYNg1ZZEr2Y5BZNOTJ\/mLMc4M51RzW8NWlNdnnIRtaAYMaXt3t9ydKs1SNQQ0bYw09FJlaaQc0zNlgDT0U2Ue3hnLDcFSyd3YN683p6GSfiezzsIbNnVcNPRTZjVlD84bhmGTnqaahZcNgsSwt7\/45GTbrnkYbLYnV8+EeNfS8WEeXzW6cJzbv\/mTaGf9qM7KGJi\/ibYVP5DOQ8TM+\/cksr6Fjkr2Vjr3SknMqmarh7tDlaUg6g00je4E1bGuoJ5Mm3exkpzAMPXSNl+4wZI126DJLd2uRbnay2KeG+kg3O9ls0h2NbLR0RyDbU7qDkmXrCdIdhmwO6WYny0633wb+mOORyU7dDhayhWwy2ZpNs+8s9nIS2VSb6RuXhWwhW8gUsrSc9lTgcGRxGFbrCc+cDkoWhq+2ez96OjAZt6tyvydQhyfj9u12D1WPQsbP6He+R\/Rjk4Xt\/8kz7gHQ8ci4sdMRheSoZFzVS+8\/ujsy2YhCcnwybo3P7eFRyEKf28NjkbkLyeHIPE4o\/1oenk\/6detksu8P4n0hW8gWsoVsIVvIFrKFbCFbyOYh+w93UbAWVJMikgAAAABJRU5ErkJggg==',width=400,height=400)","072ccd4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e4a3cb32":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQR5W8jjiHPaAfVVP7PZRXbXHTJwm1-v51mIMkd22hNOvUspRN9&s',width=400,height=400)","44f83f69":"df = pd.read_excel('\/kaggle\/input\/the-2019-ai-index-report\/AI INDEX 2019 PUBLIC DATA\/3. Technical Performance\/Compute Economics\/STANFORD DAWN\/SQuAD.xlsx')\ndf.head()","868a77c9":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRpVh2AelcWmt00NetdTt2678-e-60rfqApsWjntAbMpA19e-GwTg&s',width=400,height=400)","a476afbb":"df.dtypes","8d304c5b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARkAAACzCAMAAACKPpgZAAAAvVBMVEX\/\/\/9mZmZgYGBYWFiMFRVcXFyoqKhhYWFdXV1VVVVZWVnx8fG9vb3g4ODQ0ND6+vq3t7eioqKcnJyHAACCAADKysp6enra2trp6elzc3Ovr6+Ojo5tbW3m5ubv7+\/CwsK9i4uLDg6BgYGTk5PcxMTm1dWwcnKqZmbLpqa4g4OmXV3s3t6Hh4f17e2fTEyjVlbZv7\/TtLTDl5eRJSV7AADOq6uYOzuub2+ULS2PHByfTU21e3uWNTW6hoZISEi6kMafAAAO0ElEQVR4nO1d52KjOBC2YTHFBTvgXhLb6T3ezZbL5d7\/sY4ZiWKQRLFNyfL9WS0IMvqQpqm40ahRo8YXwtPV2+7z+ubm\/ubX5+7t8qloecqBy92LZVt7sK3ni0uzaMEKRfv9BUj5FsHaoef59q\/tO69AS5QVnx37+a1oGQuAebu2rb1O4mEdvLr720bVzifAGTj2+uVjd\/v+9vZ+u\/t4+WYH+pJlX\/xN3Lx5LXdoub+9CrXdvLq9sWy\/ym0xUuaPh5\/22h0sH5e8Wld3nm62vl\/lKV9h2FFe4hXs5QvtOGv7Ix\/ZisTTT7ex9+GOcG3b96Fx9fCLcmN9f8hNxGJwRUbI2n6OtPTGuWP9DF99uiddbG1\/bQt+a1Ol+hq5ZeItO9o1rr6TbmNf5CBgUfgkxNjXjHtPhBmWrr0g3ca+ObV8heHaJhaJ2KOH1\/3+8duCe3uXnl4JUXQMWi\/5yJk7rknz\/iXhkKNb7bvg7SfH47P2uszOqfIPlsznr0zNHWncPfnfO\/Qfe1\/dXO4H2FdQxbog\/\/mwg09\/KeyIHnEdkxfgyWIpHP8JqLL+vve89fUcm0tCjDd+bpCZO9Ejt8iMZ8eJXbO\/WqjwFP7il469WTNs9N4zjkkKuDE7vvWqMH6D3bWCZvdtbf\/hBk0EV7\/tvWjyEzuRVUjsPR46aEOpByUomFDoHfhe1L5hBzdBC0NV7q1jaOEsjezoCsCRZys7\/xoj59rCcEp66yBZ0Moc42N\/h653YJzgN3LuNbIZ18gmQus32jqW5G6jZ2BJP0iYP+sjKQiqrg6iWI02ckgaKfMfUrCC1Gp0SVWl1+ho5KH2AbKg+XUdk8Rgzh6gGyQ29nHQszTyNMzgh17\/TvnUA9tz+cdix53JUSJmPqwMY8nktB5ptv7JLk2JmCFt+ZXyqZ\/fOTcusvAcRHmYIV0m5azaDd\/XtQ4MLUvDDGakxGFAFBc2n8rbAzVNaZjZZegyb\/b6mX83PuISojTMgC+T0sw6jqEl8OaIE5BVntIwg+5vOoX5ZK2\/2QJnjqj0aCY5IcrCDERM639TPeKEAJYw5QvhU\/boqSzMrGEwpcqpgC9nCaPwV1RdWUOEkjDzYKfVvx8JtAgOp5gUBhclYeY27WC6TWLkcThltU4lYQbbcJG8\/uWPJC7uu5UhEHORipmxg2XjFMxY6fq9uXu\/ttfrPzHVyBjNqGjEzEyAC6\/uFDI4ev8EzDylbIL5+tY2f1u7uHqHxE5CZoaQ1jKatGpPxuv6CZi5hG4f1wMC1W3LcgKmH7Gu\/wtYvPdMIomZaZJLHVLVv350ZkABi32TIEycv7Yf4o385wEqWMiMdxNxQmbuUingVzKLmaD++wG+XjmYQdOUuNe\/EWY+42tepvesPZSDmZ\/rNKaJLhRJUB+NU8agMjdmuv3B2WzMuQnLfFPYkDfQwEnUxxMsPf+RRaLcmBlPZU1SJaM5ZN7+vLi4uEsRGzzsLhLxaN7Bi5negCcRb2ItH2Zm5E1Q4SxJi04PXyKdI1EuzHTkpgdlcKrGpkE\/IJHBligPZlb4HsVQDJj30\/lDOzdMEkiUBzNb+PPTriPQximpoxM2OSFQopEn0YZV5wTMtEKYgRjqYOaUWlDUwhXyR5xEA\/MkzBhSCHhHhRKZRQ\/fzx9xEumnYYb83UpDrpnh4ETM6HIIeEeFEiEtfH8P5I1a6Co+aEQqey8OgAgXrZtGov9Ow0wEU6g8g9IQBJHEdmMELzwPXexL5EOG4PxRNeyojbHd4r+BEvWhdA5yq6w6eTCDS5W06Wy2gQe1mVDoc6gzDV+dJWem8aiCtRH\/EVeiEUrUZ9XJxQceoQVwDYFQZmhsU++Gr6ZhBh3LmKA\/KJG6YFbJhRlz4WtlZSkUeeDUVOeRy2mYabTY7wiibXgCqRKbxHwiSvNRV11BhCElfm89+pJUzKB1lIVBSN\/9VKo84vSuvPIz462q6ypGKaJOgzqCoYjSMYO6ij1GCNqgpdWmrktz7ureHHN6ptnoa+K4CacnWJYiHTNoe9zEPgsQN0kDkIiPnLOdUMfgL8JewG1WcislM12QXOO2G28rMdNbOTPTEzobfYXXpVIy05iTTsHBVBV3KUTeGfINR5EATIOrhtIyg4pEn7D\/DvpXIjWESMHMObnuxKEHMDMROBtnTvMltulKy0xjpvHyLklMF0DIDLkk0U\/cdmyLqmqjw2Zv0WHZsu4sQRaDPfpTM4MaTWZqtBY89Rgnp5iZrQJceP17PHewbR\/GjAkPR53cBvFL2Y56FmbI7gnGDdxgoa\/i5IxZC3EGXERtxUEzcR1mYCRoCiA9M1yiwWWSEuw2KmBlEZjmSDAt6v6NTMxwBieG4jHhPqIAZtiyiVRmJmY4Ch1dpuh3iaKI1Wis\/iw0s9mYYToBMJZVxliOoghmCAv7OnArdM0yMcOKRUx2koOFQlYwRu1mnL+eiRlGsMH3GSIoZm0nxNx7vlZcCJiNmUiAKvIzwyiGmbB\/Hps2yMZMJKkhik3CKGg9cCimi\/XXMzIT6iPieDaEgpjZ1yvx6cmMzISSpyChIAeyj6LWkAdtES\/FGUBWZvZikbi82T6KYibovySYBsnKTHCSRpDkYKGwfQe+zzvmpTiDtbMyQ6we+rzYTZMv+SpuR4Y36Dkpzm5n1u+5ZCRhptefdaJa3ItFlklSnAEcxsxSdh9y01rJmenR2LrDTHEOm7ImSYp+RpoSz8zAUDRJM9SIUzSnsQjE3gonycECZWbGaCSf3jlOBsMiLpwnUZ2qK5xQkhJFJBQbkiYwmgx\/fe6uo5MUvBXHzKqp0QeMcFRK8jHtZClOZiOl5I005yMHwP9yAyXow0MobOITQj7Q2VBh9Ef89bnbTldnxjDTVvz6Urj\/YSwyhzEbn+JM0sjHNI3MBkgTNDFQCLUZJ+RVQ5YJQY1YZnCaWjJkXJCohJ1clf6ZBCnOksCkk8uRzBu2c9NttPsGtSxiZlDLyq1VYzlXGETTY2OSpDjLgg4dBKHLY8P7vtBmsO1iZs5UL0sIRS2cmKIrHw47UClfLDzTHQTQYNAkFniBchwz8BqqFk2Z4eJgLJIoxVkauF1iH\/jdaRkXW7VjmFECWa8pS59s\/U5VFThdIprihDDQoGWgxLGXYmaCDl+TFZyCRkvjUJQAK53hr4NDpdAhtiDDQMzMyB8r4LBK0QxMX0uW4iwRWlGHcgwNbapoSM5odlLMzMzLNZiouRbRTEPMGqwSwgx78+053V9jDIadqZvQFjODbq606A9b1EOUN+EhOqyOxeZg5i1ba6oatlMCBznG02uh+Zc0bzmg6gZcXwVDlXx0xff2SZQSFzc9+g9oBvFeYhfIVAjdEY33p92eotFvT\/RDbKw9oH1Nks9XG\/qaRQl2Uh0D5lani3TB8TBnC9mJg+akcQON4fQ3yOJhbYvXl1vFeaDZgjRIj0becg7B3+nRl1XSSTwf3pzQdp0T\/cFIi2DnUA0ad7UnXnYo+raqQvCVx1O6x4KR234kaRwtuoHW64GRIKpSWPI1Q3vuNp65n3m8oLRFzHRj6WutU8icB8wz9\/NGrUmLjgqZO7HYUSSemXYtnTw\/5ATa4uA1bcBtmr4VLcB2iWWY6VksseWFOxyiXmvQiIvfMdnI\/MFIPGpNZR8uUFqsEqhQKYEKFSjwrqfAE8\/BlQDUPZOM6GTHLKXZ7RsSr\/65RG9tqxIwUDeFpTszuGqiPtYit1TGFyghxvxeLjDiIgjMtGDUlg0CN0Vka2Lg2bKomRY4PuVC3+BZU09hRI14AtAkhqpHX0y9A60kx7zw0McQkbgpk\/NWq0MHQI9vxJMhYqaXHeftOGDNASa4SnHKCx\/AjIJaZLnRNUnSZMhQTlx1wEhXJoZvprv0ZCLn7UT1TIxqMINZhXMvh6cPWnwjngqemT7zTiaiw0uvDjND71Al2B7MM+Kp4ZrpwBEVMtBdHWZMHD2KrCtuzzmSq+qaaXw7OSoC5rWqw0wLV0P0IEYiA4lzdloGjBdowVXwicYLlUy7VIcZXNRBfA88xOKoGTiyWx2HponjyawOMyvZZ6PndHntqAFxV\/GXRcC0pzGuDjMw1epO08IyWN5ewWwYOswYVGstyV+qDDMgr9tPVlA+6hQR9EKFRl5jpVrMmLq\/SARmlJSjThAtA0tpYOGJPKkOM2QlKvpguAaWMaN0CNALQEVzTlfYVocZcprRqN+ZGycIaeAwBSe47nQwqwFrgavDDK4JhlkD\/Id\/xEVGLHBFp6Z5JxNViBmz6Tvwx1\/7s9ICCyvAbaoQMw3zkSZ8lcUJUkrtkUHznORkoioxA2cqOJGNPDrRJOvw0ZBl45E6TdVixkH7pHOIgbdXjpncUDPDQ80MDzUzPNTM8FAzw0PNDA81MzzUzPBQM8NDzQwPNTM81MzwUDPDQ80MDzUzPNTM8FAzw0PNDA81MzzUzPBQM8NDzQwPNTM81MzwUDPDQ80MDzUzPNTM8FA+Zsxld3\/bX2mYaXeXBe6u7G1kw5DVVkCEcjBjzpqOZPqoqB3LdFVVU5J9CTi\/L3lqwCpbn5mxRo9yMUaF9JvA7wrqZCX0uDXlnJpyapBTn1rkcN2ev4NIVQugZo7bUTSyiVHvdvsbXaE\/qVoMM7B3VR\/NxiuZlMnKz\/x\/9HuMv9i2Oe+Ro6gUQ\/KWW6Y4S\/hY+M\/fZabg4mlj0Bs+Qon563QnxdY7Y7zdDEBV5GmmzbWHoTWSleBPOWu4YaNjFNFpQKHQ0w97irs0V26eDQs6+MTsDRayu0zY3QGCh4Pm\/J1gO6B3JCI59Vfbnhd8+lR7eKaivXQPFMfdTzkfqAG7liR31xL+zkxJTvSYbAP9ZFgAMw3ZP3oVdjNJpTmzYhg4HBT3+OQ9vGHLBT0AGIulOeIOT0EnJ7Z30x7efhTgPh1jNjHHI4nsMSoLYG+Vuui1V33+r4+fFAt6eDruyJZLdKYSelpNRTbI6aD5C7CSffdBSfZrWzmhFZCskNODl94ZBHrJDjhpuWdSSAWpPxN+2EPT5GnpzgvqjnRHMkU+K+68vXGnPyzlWUGrYb\/TKzB19aXxPxGAL6PbMpcVAAAAAElFTkSuQmCC',width=400,height=400)","2205efb6":"df.loc[df[\"Model\"] == 0.0, \"Hardware\"].hist(alpha = 0.5);\ndf.loc[df[\"Model\"] == 1.0, \"Hardware\"].hist(alpha = 0.5);","25378fd5":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAANMAAADvCAMAAABfYRE9AAABJlBMVEX\/\/\/9YmTg2WrL\/rgDkZSxPlCsAAADNzc2wzKK0z6b39\/fV1dUyV7EcS61Qb7vk6vX\/qgD\/th3\/9eLu7u7o6Oji4uLjXRvyuqPxtJzr6+vy9vH78\/Dx8vdNlSN7kcn26dTnczziVwLDw8PxogC8ubk0NDSkpKSxsbHb29uRkZEsLCxpaWl7e3tWVlY7OztSUlJGRkZgYGBlZWWGhoYhISGZmZmqqqp0dHRBQUGtKgAYGBgSEhLQ4MmTu3+dwIvR2Ov\/58T\/yGX\/v1H2z7\/tmnfupIiwOAC5VSurHwDlxLXes6H05dy2RwDv3NXYpI7GeFje6dg+jQQAP6mjtNr\/vET\/1IaYtoqJns\/LhWfSlX3BZTWlAADJgWThvLDWnYPDydS3Th\/n3cqxEoAQAAARWUlEQVR4nO2diZ+jNpbHXzrdKCM6k8wAnWEqx0YrcxhsfAF2dXazO4frrppjN9tVm830\/P\/\/xL4n8FU2bVw+yvSH36e7sI0AfdHBk\/QkAGrVqlWr1gfFDRQv3m+UOMckTNFpjDXX2LXaGmmgF+zmWom4aIHaiGbROZSiMrdnJ2oI+utqBRcsxfRWk7QR7aJzqJOHjafE7ynKmKDt4rVZnlomywg9xoGYuJ7tMJi18hyao2K9yGTQSUxGh2t2FszcB8AK5UydBGKtF2kexiwc9rQYI9Vs9zQXmRKt29IYQHoaDDrTA\/X+9KNmhvQ7MgmVFprOtbjR02TY6WISTplcjTb+7MC9Mnma6dEF3Q4wDZPMxBvfjolVA5uSSpyCGOD3Vjw5kAUzJguTKmNSzANkwogzujPs7STvJRoMWBZ6zxoOu63WUEvAozKhn1IkUG91S8tgwURGwG+CfjCnlck8kwc6ZqwFJjMvR1gguRa1Wq2mpoPTw0vsv1i1Y51l5chw0k6zAWyYRUtEtKU6gjtp1ECgUIvi\/B4zV\/qRlC6fMIHfXGTief2imARjzMvPliZ7Z8rLk8opOvcGwNqLTJhUvs5NSiQu+loWo8T307bv92dMMIjZhOntY6ZppRo4UKYi3RVTRHlPzJiyvKdrkGJRoTzoiGybS1\/Ie5Q742Fe9WneIyZ7elCT9fZNNMcUYKnm7eaUCTo+\/jDUoI+R5y0NJNUR7nByIHvEBI7WwboFo9\/XHqfTlAnaqprYs5oTJlNrdE69QY+pMvxWB94ZRJrAKA2akaYPhxjXqDGYPmPmbnjGBB3kjbWoGXeKmZK3+0eal\/W4krXzH8x8yz0b1ol7Hywvsf+UmB21DG39XamYQm3\/FXmtWrVq1apVq1atWrVqbSuXGulxp+MCeFEnOOAww77kuRoyuSFAS4eBAaL73DHaXroMkKlj4KdQUJ9A4yNIKPCRiQaIjCimXBh4s13s+bUdE8+Y0qJRtCppwmR2E+rUbx1qMGifIqYAE0fGHvU2DnZy0t\/\/QPoLpn5I5dPJe7o4B+cQ96wvMY2aTDQ5dGO9u5tOqR\/++g3q36jjDqtUaOWFNJYgDzF6a9E9tJ2E7qeMd1Safvjmk08+eUVMrR7mg64Fbto3vG7qMYtKrQSR+hWrYWdMEQ3CdM2kz\/UI+jEPPCy8wpcpZ9Fzx3IzzTPhY7xrWWDoTcp7gYkFODAi0+Bdb\/2Jjkg\/fPPq1atvMiYIZGCxqO8OFZNlBhBBMwzDfrWq2L\/8O+lXGRM0hzYNXmE6CXqmt\/Ch0cLCFFe039+gsTZdM0NfBAPP7Zk9DySWML0h4sqallb+R0hu2KCbJs9+M9wDDAzWqlWr1sH09Y+kL9Dqx2qOkX9Vbt0F6pnkFjxteT9qudOwohule\/erKq8f\/\/Y56luAEK3+4BRjm3tIZX4U4WpTmZNTRj\/M+w+cHscGw\/E0UX\/8\/MWLF6+RiYXAWz5DqxVE2OfQNMEJ3X4eU6b3QzT6RJilTKwaOhG06RtXLTlrWHCFw2vKBA3Qfd2Hvs66XB9C0wgdNCRy69XvGPYpJCn5aKE6ubGkmFioPh9Pn8+MKTIwlTowxPYG5jmvYZHl183TidrYqbIFY+o3mMRfMYnMs6WzjzbkZ6rJ+kh\/\/Wwd0+vXr6k8gSMjbD95XYjSNA3Nht7CHyd5r0+epzYVNUH1SNb4SLli8jJzcDd9CY+ZXn2yrFe\/WsP0Lenv+MlsBVjPYW0WYDo5RsMkgraX+ZxnTJQUIbV+BXWIGAPIfIIbVOe54dEwzYncbkzNBKspnAje2m6XhQPPUn5gxBRYepvFLRXWb8lk4EHDR+l2MxbhftrC2zKRIa4scU498xZ1Z2MbF1TOsnGfOW+j2y55QFo6yiBP1D3V5NsyrZb5rC2N\/TA9r2qmaqhmynXyHem3y3Z5X5kFM7vcb3UdtCKynSyI0oP0+T2J6T++JP1h2S4\/XbTLGxK4H+QGkIwMMBuHqBCfyPTpp59++Z9469OZXZ7mdnk6tcsdNXOly7NpXaf0xyiYALZTbce0bJf3HT61y1t5k08xean6PDzAwMeWTLld3oGuxZfs8kn8Vd7LGxfdAzRttyhPxPRBuzxVhSe0VTpZmW3XPECD6WlM\/\/UH1H9TTDO7PIEeNvgSO7PLh3ne0wmDv4VIcahfxQHmomxvl7u5Xd5YsMuzeThxJF2a1tKPY58ZjVj0O4do127LZKkGHpD1jXa5zsFLrIldrgxxnhniDGt5luy0JqcJimars9wEq6pdznXV+BrYIIPH+ypgG5kyjuXjLkMjcbA6EpRWS4+8o2cSUeAI6QRqQt28aDxP+bH05gwuam7qP61k+kk\/jNYj6c7kkysW99hR1jO14JvDUQXp9JnauV4UTJ0IZt+nX6YfofBsZRIqiRqNYX85KDHFlHhLvjlPs8v\/SLrJ7XK6k7np7T+yy4Huo+n7WwztZo4WYvlZTUxqduNSf9qTmP74\/Zs3b77\/01q7nCdYjs2G5Q2ebOXx\/KmQPC5OYNME2igx0\/jxnqcxvXn58uWbP2VGXG6Xs4ldHkztch6mvSzPO9QPC1ZI7SdJd14YvqGn4XpUnnWjZVNqF\/eoX5L+0o4tmT7cX451UzfrEVNdsGbT5gPTCYE1IOgI1uFWiQnj\/dDGguduMrV8S6aZXW4u2+XkYac2oVqTgLowLdXV7LOAYQ7l4C\/lqGXJbqcTLeWv3TNReVJMc3Z5mPYf2eU5k9XIYt5ThY2YXDcwoYtHFIxUbaknMV39mfQVTPvLk6y\/3J72l88xWZPFJ2hwwxFDTk+UwFLk++mJ3Vl\/eYMlyi4PWB\/t8tNsr0n+SCla5RR33payDazD4h41De2mcAuWPZmXkzhKG9Scu7XLBdrl7pxdTh3oFjnzZjGSlAlN6j6nw7hbojSB0GIpp+s7HIRptXZpl\/sb958dvQ0L+sbP6+Nn2lwVYAo6qFarTOHLVAGmOEY7os9bpcvo8TNlFl9gmKUXSDp+JlDP7Bb3Sq+rUQGmOPC8fmoMSvfgVoAJWB\/baWb5TulKMIWbrfhUASanq1tOZ324qSrApHzH\/OXmbKHWMv3Pt6v09a4jXqysLi9l7+Zay\/Tr1yv0+Re7jvkH1BU0vrjLtsavX79Y1kGZeNAcNjYxzivABMVLm67WsTN5Wq4NZukcO9NTVDMVMJ1cHTjWH9YumN6dn48v6MPd9WEjX6AdMN2O7i\/ORldwcz8+21s8vQ38KnbA9ICpc3l+c\/W\/I2K6\/PlC\/d+tDM0v3728m\/L0f2cPAFdX18h0Mr6+GD3siuVJ2gnTxfn4HW2JCS7G4\/FO6wwj4NOp2qW0A6arEypTt5AzwcP4ficsE0WCBuYOau+dUE67GBHHXtIpGymUbvkjdpBOd6NfLh5GVCuo8nT9fsflSQ0U9Dford4B08nd6Pz6kj4R089Idzv6ZSc0mdyhZGHhbN9kOVPupt47mX1WJnQ5L4Gysh2\/KJVMscK4rYK95w9F0YCi6zQqydRzRcIL673eApNHKvDN8SayVjP9YxrA+26ldK+MyiDxFoikuN7rLjAp75gC35yZ90xBOk0DfPflKn36dTnfnjJqE1Nhv1F3D3nvt+Tvu6TflIptObmR3\/cL+\/eqyQRmHBf37q1Y3agCTNwH2XCK9orlDFwBpo7kTdhkdZfjZ0J7T\/iHtff2n05DWkhrk4XOKsAkTlMI0g0OOHYmL7P0+PTTR8AEceQLy9TjVvnFuo6eiabGB70V3pTFqgDTxqqZaqZdibMNHAmgEkxsGLj+JquPVYCpDSw5bL\/RQey9D7RzK8kEEWMutA859nmA9lN30Nxo\/nUFmDbuLqwAkztoNBrlPd0qwbTxmw0rwNTa9IAKMCU+dW\/uch7A8zOl3TBN0w2m7x0\/E994Yaf9M93c8Gyjvl3dzI3rlNPRlaera+UQcoOb6ys4eTg\/H23qZ+A3YtQhx3PXMD2MLy+ur0\/ejy8uxg9wP7q9eT\/eMKUYE6jjqSOuzu8A3o0uRu8Aga7ev6ch+ot3Dzdw91BqIJu7IHY+\/2k7ppMLLEZn45sRov08vry+oyH6y5PR2e35ban48YRLl3Q8TKirs9ElYt3fj8e3Y8V0C5dj+lRSyrdcPya7\/HJ0jUl18u767n50ca1cKS4BrsdlawrmNjGVZOeI+pZvR8pr5xIR7sYn5G51P7qB+zHWG+UiKJJBgjqi\/r2r0fgOdfUwurwd3WOi3d2O32NS\/XwxKp35NvAsPwjTxdnD2dnZ+5uTu\/GY\/EBur8d3J\/BwdgL378vmPn348bU1Bpu+WOD4mfiKbrCkm07sCncPvjkHsMuXTPI4hGxpYODePnxz9s\/U1YadzkK\/Ea2Uo5YGBsdvPgfTVy\/\/ZVkvv9oQbN6MUG\/AYPmUyUXfHNs0TXu1b85ntE\/JWM304zTAP1czfTHZb\/+OFpt4rDe\/UycohZP2er0gmAtrUutDz9efWvT5MC3LMgv8jWifkl3gbzQNUMA03W\/ermT6RQUoxUQh5XxFsZBOz+LH8tXqdCqFM9PCUmOqPMnKMznz1kQccn0Ahlok7ll8c7Zm8sMwTBfXN3J7oZG\/JOxZnk9bM1nkRlg+eAWYuO8baJyHR2XvbcnUieWwmyZH1B+xNROtvCM2ccypAJOFPHrpFQkqxFR65YiKMPW4IULD3mS1u2NnMtvt9nDYbjc\/pnrvCaqZaqaaqWaqmWqmmqlmqplqppqpZqqZaqaaqWaqmWqmmqlmqpmezMT9NB\/Y1cNsmE1UcuxzXg1GbyUhpI5pkQuL9Sy+Obtkmr3DitZewG9xeFp1JrUqS8vOwejNQo98c5SbyU8r3xv+kzV1Q3nx+Qr97R\/TAP\/815Wa7rd++X6V\/lzej2VOaqZk4OVMnFYtXvT5MJR+v0rGTF+vlLEmxPz+k5VSu56UToqCmIzOElMFJWlkV5WnyMxft1l5Jji1IO5DEoNoAVfvxVnhm1Mx2QG9NklidS5bXeVWtWJdt1q1atWqVatWrVpVl1QTQc18jqFw3aSwKSaBG2CXnI2YgOBeaaPY4AtTNxdddo2VSzgWy8EzGQ5Y2SRD9TJKt2gdRQtMQf\/KnRhMYKVbqsJUL2idXWleyeMfPiym7rpuZUymzKOzIAxiIKZpeFwmni10mU+O0CW9GJILMKTEi9qSXt\/NpMhPYgHzmMSjMQjHIB5w0xQUu+ymManeGClwh5VI2+SGzaSJAfGkoDOGcVNH6Q7jdH0pbeDW9OqFmsw\/zphEdrFH8wEwDItpk4AnuB2bINRp8a\/tgCtNO+EgPdwNDsdTeDJjklx3bGACg1jcwSCm4QgjURO6QWUHywWa1Y3ceBgzPcegl\/vaCV7LMLjUs6M4toFcDMt5Yhsx3qk1UJMXXOVMWZaWtkoEmkZOdJ4OUtBpE5X3MMacYk0MmBZ0WQqVUAS4wrUnTOrqCQXBgoipRkCYH3X1AlA6hzTUm9kTujIysezaibrVnsiO0vHK6uJ0DB3F16zPlCWJ7WVMzFtIvFxIIA1mspxJ5EyGnNwVN9vakqb+Mjcxp0yU0aSKg5CYxwyhYqTCq7UadSu7HzmTDur+KCZjetSMCaMr1jNl+URalkpPrkqSkc0gl0IIqeikbgEVnUUmlU4EmqeToW6qB3l5nEunJLtbumLCzKTu3ySdrAKmBCZHLaRTCSaKK2eYW6Vh25j58ZRW\/i7a2SrOOrXxkywpZkyUzUx1LYPKk8Xxr7CEnt+TeFae8LtOxYQpDjNfvyIrTyIrT5jDFpkSD0tUdhTk5QmoPJXIe1giqGoBg95ii7G1hWRLjwKO17ItVV0xnVs0RRTypMxfjjup9zxV76kT6FilmUZW70FWyTGuquRJGVb1nrQpdwEXJtV72ZtzsZrhFB+WHYWRmqv3YFJtHpP0hYe2\/Bj6dfTFZ7b+1FcD\/D9KlsA4wzJ9PgAAAABJRU5ErkJggg==',width=400,height=400)","b453c251":"df.groupby(['Hardware']).size().plot.bar()","f14b41ec":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSqb4zoqKpssaJuA8ryb6nxDqSX2a5YkML2m22OESM9lce8V-Mx&s',width=400,height=400)","32551d4b":"df.groupby(['Framework']).size().plot.bar()","902d3767":"df.groupby(['Model']).size().plot.bar()","7dcf19aa":"# Necessary Functions: \ndef pie_plot(labels, values, colors, title):\n    fig = {\n      \"data\": [\n        {\n          \"values\": values,\n          \"labels\": labels,\n          \"domain\": {\"x\": [0, .48]},\n          \"name\": \"Job Type\",\n          \"sort\": False,\n          \"marker\": {'colors': colors},\n          \"textinfo\":\"percent+label+value\",\n          \"textfont\": {'color': '#FFFFFF', 'size': 10},\n          \"hole\": .6,\n          \"type\": \"pie\"\n        } ],\n        \"layout\": {\n            \"title\":title,\n            \"annotations\": [\n                {\n                    \"font\": {\n                        \"size\": 25,\n\n                    },\n                    \"showarrow\": False,\n                    \"text\": \"\"\n\n                }\n            ]\n        }\n    }\n    return fig","d7339834":"import plotly.offline as py\nvalue_counts = df['Model'].value_counts()\nlabels = value_counts.index.tolist()\npy.iplot(pie_plot(labels, value_counts,['#1B9E77', '#7570B3'], \"Model\"))","321c9604":"from collections import Counter\nimport json\nfrom IPython.display import HTML\nimport altair as alt\nfrom  altair.vega import v5","1b8a2f7c":"##-----------------------------------------------------------\n# This whole section \nvega_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega@' + v5.SCHEMA_VERSION\nvega_lib_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lib'\nvega_lite_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-lite@' + alt.SCHEMA_VERSION\nvega_embed_url = 'https:\/\/cdn.jsdelivr.net\/npm\/vega-embed@3'\nnoext = \"?noext\"\n\npaths = {\n    'vega': vega_url + noext,\n    'vega-lib': vega_lib_url + noext,\n    'vega-lite': vega_lite_url + noext,\n    'vega-embed': vega_embed_url + noext\n}\n\nworkaround = \"\"\"\nrequirejs.config({{\n    baseUrl: 'https:\/\/cdn.jsdelivr.net\/npm\/',\n    paths: {}\n}});\n\"\"\"\n\n#------------------------------------------------ Defs for future rendering\ndef add_autoincrement(render_func):\n    # Keep track of unique <div\/> IDs\n    cache = {}\n    def wrapped(chart, id=\"vega-chart\", autoincrement=True):\n        if autoincrement:\n            if id in cache:\n                counter = 1 + cache[id]\n                cache[id] = counter\n            else:\n                cache[id] = 0\n            actual_id = id if cache[id] == 0 else id + '-' + str(cache[id])\n        else:\n            if id not in cache:\n                cache[id] = 0\n            actual_id = id\n        return render_func(chart, id=actual_id)\n    # Cache will stay outside and \n    return wrapped\n\n@add_autoincrement\ndef render(chart, id=\"vega-chart\"):\n    chart_str = \"\"\"\n    <div id=\"{id}\"><\/div><script>\n    require([\"vega-embed\"], function(vg_embed) {{\n        const spec = {chart};     \n        vg_embed(\"#{id}\", spec, {{defaultStyle: true}}).catch(console.warn);\n        console.log(\"anything?\");\n    }});\n    console.log(\"really...anything?\");\n    <\/script>\n    \"\"\"\n    return HTML(\n        chart_str.format(\n            id=id,\n            chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None)\n        )\n    )\n\n\n\nHTML(\"\".join((\n    \"<script>\",\n    workaround.format(json.dumps(paths)),\n    \"<\/script>\")))","721bb47d":"def word_cloud(df, pixwidth=6000, pixheight=350, column=\"index\", counts=\"count\"):\n    data= [dict(name=\"dataset\", values=df.to_dict(orient=\"records\"))]\n    wordcloud = {\n        \"$schema\": \"https:\/\/vega.github.io\/schema\/vega\/v5.json\",\n        \"width\": pixwidth,\n        \"height\": pixheight,\n        \"padding\": 0,\n        \"title\": \"Hover to see number of occureances from all the sequences\",\n        \"data\": data\n    }\n    scale = dict(\n        name=\"color\",\n        type=\"ordinal\",\n        range=[\"cadetblue\", \"royalblue\", \"steelblue\", \"navy\", \"teal\"]\n    )\n    mark = {\n        \"type\":\"text\",\n        \"from\":dict(data=\"dataset\"),\n        \"encode\":dict(\n            enter=dict(\n                text=dict(field=column),\n                align=dict(value=\"center\"),\n                baseline=dict(value=\"alphabetic\"),\n                fill=dict(scale=\"color\", field=column),\n                tooltip=dict(signal=\"datum.count + ' occurrances'\")\n            )\n        ),\n            \"transform\": [{\n            \"type\": \"wordcloud\",\n            \"text\": dict(field=column),\n            \"size\": [pixwidth, pixheight],\n            \"font\": \"Helvetica Neue, Arial\",\n            \"fontSize\": dict(field=\"datum.{}\".format(counts)),\n            \"fontSizeRange\": [10, 60],\n            \"padding\": 2\n        }]\n    }\n    wordcloud[\"scales\"] = [scale]\n    wordcloud[\"marks\"] = [mark]\n    \n    return wordcloud\n\nfrom collections import defaultdict\n\ndef wordcloud_create(df):\n    ult = {}\n    corpus = df.Model.values.tolist()\n    final = defaultdict(int) #Declaring an empty dictionary for count (Saves ram usage)\n    for words in corpus:\n        for word in words.split():\n             final[word]+=1\n    temp = Counter(final)\n    for k, v in  temp.most_common(200):\n        ult[k] = v\n    corpus = pd.Series(ult) #Creating a dataframe from the final default dict\n    return render(word_cloud(corpus.to_frame(name=\"count\").reset_index(), pixheight=600, pixwidth=900))","ab9f2f4a":"wordcloud_create(df)","d808d22d":"dfcorr=df.corr()\ndfcorr","658bba04":"sns.heatmap(dfcorr,annot=True,cmap='cool')\nplt.show()","658f91bd":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Hardware)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","03d6a838":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQilMJLmma850eij_xGj4f6fJylCbSGLrhyhQq7uV-LZM4ikwLvgA&s',width=400,height=400)","443ede82":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Framework)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, colormap='Set3', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","b9f63e9b":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Model)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","47106b91":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/dawn.cs.stanford.edu\/assets\/retreat.jpg',width=400,height=400)","6205d749":"Image slideplayer.com -  dawn.cs.stanford.edu\/benchmark","1ef163b7":"DAWN is a five-year research project to democratize AI by making it dramatically easier to build AI-powered applications.\n\nOur past research\u2013from Apache Spark to Mesos, DeepDive, and HogWild!\u2013already powers major functionality all over Silicon Valley and the world. Between fighting against human trafficking, assisting in cancer diagnosis and performing high-throughput genome sequencing, we\u2019ve invested heavily in tools for AI and data product development.\n\nThe next step is to make these tools more efficient and more accessible, from training set creation and model design to monitoring, efficient execution, and hardware-efficient implementation. This technology holds the power to change science and society\u2013and we\u2019re creating this change with partners throughout campus and beyond.\nhttps:\/\/dawn.cs.stanford.edu\/","42a3d4b2":"Image slideplayer.com - dawn.cs.stanford.edu\/benchmark","f396bba4":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","90b35f4d":"Image thedataorganisation.com - Democratizing Deep Learning.","55668331":"Image slideplayer.com - dawn.cs.stanford.edu\/benchmark - What if we combine optimzations?","5929223e":"Image dawn.cs.stanford.edu - An End-to-End Deep Learning Benchmark and Competition\n\nImage Classification (ImageNet)\nImage Classification (CIFAR10)\nQuestion Answering (SQuAD)\n\n\nDAWNBench is a benchmark suite for end-to-end deep learning training and inference. Computation time and cost are critical resources in building deep models, yet many existing benchmarks focus solely on model accuracy. DAWNBench provides a reference set of common deep learning workloads for quantifying training time, training cost, inference latency, and inference cost across different optimization strategies, model architectures, software frameworks, clouds, and hardware.https:\/\/dawn.cs.stanford.edu\/benchmark\/","2fd1ed7c":"Image dawn.cs.stanford.edu","1ab8e2ea":"#What if we combine PEOPLE?\n\n#People Stanford Dawn\n\nPrincipal Investigators: Peter Bailis; John Duchi; Kunle Olukotun; Christopher R\u00e9; Matei Zaharia\n\nLeadership and Staff: \n\nProgram Manager: Kathy Robinson\n\nPostdoctoral Researchers: Stephen Bach; Jared Dunnmon; Ina Fiterau; Jason Fries; Shahbaz Muhammad; Luigi Nardi; Fred Sala; Ginger Smith\n\nPhD Students: Christopher Aberger; Firas Abuzaid; Xiao Cheng; Cody Coleman; Tri Dao; Edward Gan; Matthew Feldman; Dan Fu; Albert Gu; Braden Hancock; Bryan He; Daniel Kang; David Koeplinger; Peter Kraft; Emily Mallory; Deepak Narayanan; Shoumik Palkar; Raghu Prabhakar; Alex Ratner;Nicole Rodia; Kexin Rong; Deepti Raghavan; Sahaana Suri;Kai Sheng Tai; Pratiksha Thaker; James Thomas;Paroma Varma; Sen Wu; Peng Xu; Yaqi Zhang\n","79835f9e":"#Codes from Shivam Ralli @hoshi","90ef2526":"Image bibsonomy.org - Using Provenance to Debug Training Data for Software 2.0 \u00b7 Stanford DAWN - https:\/\/www.bibsonomy.org\/url\/a7e947650503bd54e8865fceb4e40c31"}}