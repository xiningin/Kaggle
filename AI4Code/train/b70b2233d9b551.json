{"cell_type":{"41c74f1d":"code","0bd17a73":"code","1aaae7a1":"code","03e15bef":"code","bb7a57c1":"code","560ee7f3":"code","f81b1b7f":"code","899d89c1":"code","590007fe":"code","9314a175":"code","c86b5c82":"code","25e2d36d":"code","c2084462":"code","3fc7847f":"code","3f286364":"code","7900af77":"code","13bcb998":"code","07bdb0b4":"code","f219558c":"code","508e77f9":"code","e3eb8aad":"code","ebfd07c2":"code","4e4a47e3":"code","13219184":"code","63fd7096":"code","c09ab544":"code","a69ece57":"markdown","3c9bebde":"markdown"},"source":{"41c74f1d":"import pandas as pd\nimport numpy as np\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","0bd17a73":"df = pd.read_csv(\"..\/input\/brain-tumor\/data.csv\")\ndf.info()","1aaae7a1":"df.describe()","03e15bef":"df['y'] = df['y'].replace(\"tumor\",0)\ndf['y'] = df['y'].replace(\"Normal\",1)","bb7a57c1":"corr_matrix = df.corr()\ncorr_matrix['y'].sort_values(ascending=False)","560ee7f3":"from sklearn.model_selection import train_test_split","f81b1b7f":"train_set ,test_set = train_test_split(df, test_size=0.2,random_state=42)","899d89c1":"print(\"Rows in train set: \",len(train_set))\nprint(\"Rows in test set: \",len(test_set))","590007fe":"df = train_set.drop(\"y\",axis=1)\ndf_label =train_set[\"y\"].copy()","9314a175":"from sklearn.impute import SimpleImputer\n","c86b5c82":"imputer = SimpleImputer(missing_values=np.nan, strategy='median')\nimputer.fit(df)","25e2d36d":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nmy_pipeline =Pipeline([\n    ('imputer', SimpleImputer(strategy ='median')),\n    ('std_scaler',StandardScaler())\n])","c2084462":"df = my_pipeline.fit_transform(df)","3fc7847f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\n#model =LinearRegression()\n#model =DecisionTreeRegressor()\nmodel =RandomForestClassifier()\nmodel.fit(df,df_label)","3f286364":"from sklearn.metrics import mean_squared_error\ndf_pred = model.predict(df)\nlin_mse = mean_squared_error(df_label,df_pred)\nlin_rmse = np.sqrt(lin_mse)","7900af77":"lin_rmse","13bcb998":"from sklearn.model_selection import cross_val_score\nscores =cross_val_score(model,df,df_label,scoring='neg_mean_squared_error',cv=10)\nrmse = np.sqrt(-scores)","07bdb0b4":"def print_scores(scores):\n    print(\"Scores: \", scores)\n    print(\"Mean: \",scores.mean())\n    print(\"Strandard Deviation: \",scores.std())","f219558c":"print_scores(rmse)","508e77f9":"from joblib import dump,load\ndump(model,'brain.joblib')","e3eb8aad":"X_test =test_set.drop('y',axis=1)\nY_test =test_set['y'].copy()","ebfd07c2":"X_test_prepared = my_pipeline.transform(X_test)","4e4a47e3":"final_predictions =model.predict(X_test_prepared)\nfinal_mse =mean_squared_error(Y_test,final_predictions)\nfinal_rmse = np.sqrt(final_mse)","13219184":"final_rmse","63fd7096":"final_predictions","c09ab544":"print(final_predictions,list(Y_test))","a69ece57":"**Imputer**","3c9bebde":"**Machine Learning Algorithm**"}}