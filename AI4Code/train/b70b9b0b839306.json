{"cell_type":{"e77303ac":"code","4d943b53":"code","99ad5fe7":"code","e2bf23af":"code","7d8c8fbc":"code","82ea1947":"code","7da82497":"code","777ba9c0":"code","b909454b":"code","b50d0d14":"code","def699b9":"code","e9b1d4a8":"code","c0af8814":"markdown","5886be52":"markdown","e7d7a460":"markdown","8b7f3265":"markdown","47d4ae9e":"markdown","b6c04974":"markdown","ce074850":"markdown"},"source":{"e77303ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d943b53":"df = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')\ndf.head()","99ad5fe7":"df.describe()","e2bf23af":"df.shape","7d8c8fbc":"df.species.size","82ea1947":"Wrds_to_nmbrs = {'Iris-setosa': 0,'Iris-versicolor': 1 ,'Iris-virginica' : 2}\ndf['species_in_numbers'] = [Wrds_to_nmbrs[item] for item in df.species]\ndf.head()","7da82497":"from pandas.plotting import scatter_matrix\nscatter_matrix(df)\nplt.show()","777ba9c0":"from sklearn.model_selection import train_test_split","b909454b":"X = df.drop(['species_in_numbers','species'], axis='columns')\ny = df.species_in_numbers","b50d0d14":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state = 42)\n\nlen(X_train), len(X_test)","def699b9":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train, y_train)","e9b1d4a8":"score = model.score(X_test, y_test)\nprint(f'''percentage : {score*100}''')","c0af8814":"Now, we're going to classify the amount of species with respect to their name","5886be52":"we're creating a new column called 'target' and classifying the species based on numbers.","e7d7a460":"# Training","8b7f3265":"# Data visualisation","47d4ae9e":"# importing SVM","b6c04974":"# Classifying them with the help of numbers","ce074850":"we've loaded the file succesfully"}}