{"cell_type":{"863e8811":"code","cac29d39":"code","11fd941b":"code","fb1157d0":"code","9e31ed85":"code","22cce7e1":"code","4cb04cdd":"code","6d1b37cf":"code","76e63719":"code","65791245":"code","6a050549":"code","83125790":"markdown","f28fac8d":"markdown","5b46e25d":"markdown","15e6433e":"markdown"},"source":{"863e8811":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cac29d39":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","11fd941b":"# Retrieve the remaining dataset as X and y values\nX = df.drop('Creditability', axis=1).values\ny = df['Creditability'].values","fb1157d0":"sns.heatmap(df.corr(), square=True, cmap='RdYlGn')\n\nplt.show()","9e31ed85":"#Code by Porter97 https:\/\/www.kaggle.com\/porter97\/synthanic-logistic-regression\/notebook\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import train_test_split\n\n# Use a Lasso Regression to find the features that are most important\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nfeatures = df.drop('Creditability', axis=1).columns\nlasso = Lasso(alpha=0.1)\nlasso_coef = lasso.fit(X_train, y_train).coef_\n\n_ = plt.plot(range(len(features)), lasso_coef)\n_ = plt.xticks(range(len(features)), features, rotation=60)\n_ = plt.ylabel('Coefficients')\nplt.show()","22cce7e1":"# Remove some columns as it didn't work without performing that step and redefine our X and y\ndf = df.drop('Age_years', axis=1).drop('Telephone', axis=1)\nX = df.drop('Creditability', axis=1).values\ny = df['Creditability'].values","4cb04cdd":"#Code By Rachael Tatman https:\/\/www.kaggle.com\/rtatman\/data-cleaning-challenge-scale-and-normalize-data\n#Code by Alexis Cook https:\/\/www.kaggle.com\/alexisbcook\/exercise-scaling-and-normalization\n\nfrom sklearn.preprocessing import minmax_scale\n\n# set seed for reproducibility\nnp.random.seed(0)\n\n# generate 1000 data points randomly drawn from an exponential distribution\ndf = np.random.exponential(size = 1000)\n\n# mix-max scale the data between 0 and 1\nscaled_df = minmax_scale(df)\n\n# plot both together to compare\nfig, ax=plt.subplots(1,2)\nsns.histplot(df, ax=ax[0], color='y')\nax[0].set_title(\"Creditability Data\")\nsns.histplot(scaled_df, ax=ax[1])\nax[1].set_title(\"Scaled data\")\nplt.show()","6d1b37cf":"#Code by Porter97 https:\/\/www.kaggle.com\/porter97\/synthanic-logistic-regression\/notebook\n\nfrom sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression(solver='lbfgs',class_weight='balanced', max_iter=1000)#https:\/\/stackoverflow.com\/questions\/52670012\/convergencewarning-liblinear-failed-to-converge-increase-the-number-of-iterati\n\n# Create a new training and test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42, stratify=y)\n\n# Perform a logistic regression on the data\n#logreg = LogisticRegression() #Change that to use max-iter line above (Stackoverflow)\nlog_reg.fit(X_train, y_train)\ny_pred = log_reg.predict(X_test)","76e63719":"#Code by Porter97 https:\/\/www.kaggle.com\/porter97\/synthanic-logistic-regression\/notebook\n\nfrom sklearn.metrics import roc_curve\n\n# Measure the ROC curve to determine the performance of the model\ny_pred_prob = log_reg.predict_proba(X_test)[:,1]\n\n# Retrieve the False Positive and True Positive Rates, along with the threshold\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Plot the results\nplt.plot([0,1], [0,1], 'k--')\nplt.plot(fpr, tpr, label=\"Logistic Regression\")\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Logistic Regression ROC Curve')\nplt.show()","65791245":"from sklearn.metrics import roc_auc_score\n\n# Return the ROC-AUC score for our model\nroc_auc_score(y_test, y_pred_prob)","6a050549":"#Code by Porter97 https:\/\/www.kaggle.com\/porter97\/synthanic-logistic-regression\/notebook\n\nfrom sklearn.model_selection import cross_val_score\n\n# Get the cross value scores for ROC-AUC scoring, returning an array and the mean\ncv_scores = cross_val_score(log_reg, X, y, cv=10, scoring='roc_auc')\n\nprint(cv_scores)\nprint(np.mean(cv_scores))","83125790":"#I don't even know if the code is correct. However, I could perform the ROC curve that I intended to make.\n\n#Thank you Porter98,  Alexis Cook, Rachael Tatman and once again StackOverflow (rishi jain answer).","f28fac8d":"![](https:\/\/kseow.com\/images\/Logistic_Regression\/trump.jpg)https:\/\/kseow.com\/logisticregression.html","5b46e25d":"![](https:\/\/i.pinimg.com\/originals\/4e\/90\/49\/4e904958f535db5c88837a4f90aaf7ee.jpg)pinterest.com","15e6433e":"#Trying to perform Logistic Regression I got an error \"Failed to converge increase the number of iterations\". Choices suggested by the programm to fix it: Scaling \n\n#(min\/max\/standard\/whatever scale) or increase number of max_iter (iterations). Scaling didn't work. (because the only \n\n#snippet that I could understand was that below). The snippet worked, however the Logistic Regression DO NOT.\n\n#Then I performed that log_reg = LogisticRegression(solver='lbfgs',class_weight='balanced', max_iter=1000) found in \nStackoverflow : https:\/\/stackoverflow.com\/questions\/52670012\/convergencewarning-liblinear-failed-to-converge-increase-the-number-of-iterati\n\n#Answered by answered Jul 19 '20 at 10:35 -rishi jain -88611 gold badge1111 silver badges21\n\n\n#Increasing max-iter to 1000 (default is 1000). The original code didn't mention any iteration.\n\nThe original code was only logreg = LogisticRegression()\n\n#In resume, including max_iter allowed my LGBM to be performed and so did the ROC Curve."}}