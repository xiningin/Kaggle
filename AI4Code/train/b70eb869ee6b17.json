{"cell_type":{"09e6e674":"code","9585f81d":"code","2a8c3352":"code","baa0f9d5":"code","310d7649":"code","a88b793c":"code","7684bfdf":"code","fd207725":"code","d8d71ea5":"code","f18a8017":"code","6060a190":"code","0ae8f874":"code","74511f1c":"code","60406f9c":"code","b70642a0":"code","ffa235fc":"code","6b07586a":"code","976efae4":"code","2fe51a9c":"code","5a70857f":"code","90ef96e7":"code","3f98d517":"markdown","29ca337c":"markdown"},"source":{"09e6e674":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport scipy.misc as mi \nfrom scipy.misc.pilutil import Image\nimport imageio\nimport matplotlib.pyplot as plt\n\n","9585f81d":"test_image_path = '..\/input\/test-image\/download.jpg'\nimg_saltpepper = '..\/input\/saltpepper\/salt_pepper.png'","2a8c3352":"# read the test image\nim1 = mi.imread(test_image_path)\n#im1.shape\n#im2 = Image.open(test_image_path)\nim3 = imageio.imread(test_image_path)\n#im3.shape","baa0f9d5":"#mi.imshow(im1) \n# imshow throws runtime error use matplotlib instead\nplt.imshow(np.uint8(im1))","310d7649":"import scipy.misc\nfrom scipy.misc.pilutil import Image\n\n# convert image to grayscale\nim = Image.open(test_image_path).convert('L')\n\n# convert to numpy ndarray\nim = scipy.misc.fromimage(im)\n# perform some processing and convert back to image\nc = scipy.misc.toimage(im)\nc","a88b793c":"import numpy as np\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\n# convert image to grayscale\na = Image.open(test_image_path).convert('L')\n# 5 by 5 mean filter\nk = np.ones((5,5)) \/ 25\n# perform convolution\nb = scipy.ndimage.filters.convolve(a,k)\n# convert the ndarray to image\nb = scipy.misc.toimage(b)\nb\n# mean filter removes noise and brighten the image but blurs the edges and reduces the spatial resolution","7684bfdf":"# example of median filter\nimport scipy.misc\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\na = Image.open(img_saltpepper).convert('L')\nb = scipy.ndimage.filters.median_filter(a, size=5, footprint=None, output=None,\n                                       mode='reflect', cval=0.0, origin=0)\nb = scipy.misc.toimage(b)\nb\n# used to remove salt and pepper noise","fd207725":"# example of max filter\nimport scipy.misc\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = scipy.ndimage.filters.maximum_filter(a, size=5, footprint=None,\n                                        output=None, mode='reflect',\n                                        cval=0.0, origin=0)\nb = scipy.misc.toimage(b)\nb\n# filter enhances the bright pixels in the image","d8d71ea5":"# min filter example\nimport scipy.misc\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = scipy.ndimage.filters.minimum_filter(a, size=5,\n        footprint=None,output=None,mode='reflect',cval=0.0,\n        origin=0)\nb = scipy.misc.toimage(b)\nb\n# minimum filter enhances the dark points in the image","f18a8017":"import scipy.misc\nfrom skimage import filters\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = filters.sobel(a)\nb = scipy.misc.toimage(b)\nb","6060a190":"import scipy.misc\nfrom skimage import filters\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = filters.prewitt(a)\nb = scipy.misc.toimage(b)\nb","0ae8f874":"import scipy.misc\nfrom skimage import filters\nfrom scipy.misc.pilutil import Image\nimport matplotlib.pyplot as plt\n\na = Image.open(test_image_path).convert('L')\n# detect horizontal edges \nb = filters.sobel_h(a)\nsob_h = scipy.misc.toimage(b)\nb = filters.sobel_v(a)\nsob_v = scipy.misc.toimage(b)\nb = filters.prewitt_v(a)\nprew_v = scipy.misc.toimage(b)\nb = filters.prewitt_h(a)\nprew_h = scipy.misc.toimage(b)\n\nfig, ax = plt.subplots(nrows=2, ncols=2,sharex=True)\nax[0,0].imshow(sob_h)\nax[0,0].set_title('horizontal edges Sobel')\nax[0,1].imshow(sob_v)\nax[0,1].set_title('vertical edges Sobel')\nax[1,0].imshow(prew_h)\nax[1,0].set_title('horizontal edges Prewitt')\nax[1,1].imshow(prew_v)\nax[1,1].set_title('vertical edges Prewitt')\nax[1,0].set_title('horizontal edges Prewitt')\n#plt.xticks([])\n#plt.yticks([])\n\nplt.show","74511f1c":"#canny filter\n#from skimage.feature import canny\nimport scipy.misc\nfrom skimage import filters\nfrom scipy.misc.pilutil import Image\nimport skimage.feature as can\nimport matplotlib.pyplot as plt\n\na = Image.open(test_image_path).convert('L')\n# convert to nd array\na = scipy.misc.fromimage(a)\nb = can.canny(a, sigma=1)\nplt.imshow(b, cmap='gray')\nplt.xticks([])\nplt.yticks([])\n","60406f9c":"# second derivative filters\nimport scipy.misc\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\n\na = Image.open(test_image_path).convert('L')\nb = scipy.ndimage.filters.laplace(a,mode='reflect')\nb = scipy.misc.toimage(b)\nb\n# there is too much noise in the output as the noise introduced by \n#first derivative got magnified by second derivative","b70642a0":"import scipy.misc\nimport scipy.ndimage\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = scipy.ndimage.filters.gaussian_laplace(a, 1, mode='reflect')\nb = scipy.misc.toimage(b)\nb\n# LoG suffers from sphageti effect. Oversegmentation of edges","ffa235fc":"# Image Enhancement\n# inversion\nimport math\nimport scipy.misc\nimport numpy as np\nfrom scipy.misc.pilutil import Image\n\nim = Image.open(test_image_path).convert('L')\n# convert to np array\nim1 = scipy.misc.fromimage(im)\n# inversion \nim2 = 255 - im1\nim3 = scipy.misc.toimage(im2)\nim3\n","6b07586a":"# Gamma correction\n\nimport math, numpy\nimport scipy.misc\nfrom scipy.misc.pilutil import Image\n\na = Image.open(test_image_path).convert('L')\n# convert to nd array\nb = scipy.misc.fromimage(a)\ngamma = 2\nb1 = b.astype(float)\n\n# normalize the grayscale image array\nb3 = numpy.max(b1)\nb2 = b1\/b3\n\n# gamma correction\nb3 = numpy.log(b2) * gamma\nc = numpy.exp(b3) * 255\n\nc1 = c.astype(int)\nd = scipy.misc.toimage(c1)\n\nd\n","976efae4":"# log transformation\nimport scipy.misc\nimport numpy, math\nfrom scipy.misc.pilutil import Image\na = Image.open(test_image_path).convert('L')\nb = scipy.misc.fromimage(a)\nb1 = b.astype(float)\nb2 = numpy.max(b1)\n# log transformation\nc = (255.0 * numpy.log(1 + b1)) \/ numpy.log(1+b2)\nc1 = c.astype(int)\nd = scipy.misc.toimage(c1)\nd","2fe51a9c":"# histogram equalization\nimport numpy as np\nimport scipy.misc, math\nfrom scipy.misc.pilutil import Image\nimg = Image.open(test_image_path).convert('L')\nimg1 = scipy.misc.fromimage(img)\nfl = img1.flatten()\nhist, bins = np.histogram(img1, 256, [0,255])\ncdf = hist.cumsum()\n# mask the places where cdf - 0\ncdf_m = np.ma.masked_equal(cdf,0)\n# histogram equalization\nnum_cdf_m = (cdf_m - cdf_m.min())\nden_cdf_m = (cdf_m.max() - cdf_m.min())\ncdf_m = num_cdf_m\/den_cdf_m\n# the masked places in cdf_m are now 0\ncdf = np.ma.filled(cdf_m, 0).astype('uint8')\nim2 = cdf[fl]\nim3 = np.reshape(im2, img1.shape)\nim4 = scipy.misc.toimage(im3)\nim4","5a70857f":"#contrast streatching\n# similar to histogram equalization except that pixel intensities are related using the pixel values \n# instead of probabilities and cdf\nimport math, numpy\nimport scipy.misc\nfrom scipy.misc.pilutil import Image\nim = Image.open(test_image_path).convert('L')\nim1 = scipy.misc.fromimage(im)\nb = im1.max()\na = im2.min()\nc = im1.astype(float)\nim2 = 255 * (c - a) \/(b-a)\nim3 = scipy.misc.toimage(im2)\nim3","90ef96e7":"import math, numpy\nimport scipy.fftpack as fftim\nfrom scipy.misc.pilutil import Image\na = Image.open(img_saltpepper).convert('L')\nb = numpy.asarray(a)\n# perform fft\nc = abs(fftim.fft2(b))\n# shift the fourier frequency image\nd = fftim.fftshift(c)\nd.astype('float').tofile('fft.raw')\n","3f98d517":"**Examples from the book Image acquisition and processing using Python by Ravi and Sridevi**","29ca337c":"#edge detection using first and second derrivatives\n#sobel and Prewitt are first derrivative \n#3*3 sobel filter \n#[[-1 -2 -1],[0 0 0],[1 2 1]] for horizontal and\n#[[-1 0 1] ,[-2 0 2] ,[-1 0 1]] for vertical edges \n#2 and -2 is for smoothing.\n#3*3 Prewitt filter [[-1 -1 -1],[0 0 0],[1 1 1]] and [[-1 0 1], [-1 0 1], [-1 0 1]]\n#sum of filter elements is 0 so that it should not impact the constant grayscale.\n"}}