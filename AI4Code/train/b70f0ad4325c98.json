{"cell_type":{"5f3c58c3":"code","081089b5":"code","025f5acb":"code","a50eb880":"code","6b593f70":"code","b85f2bd6":"code","b4fcd746":"code","ed6a60f6":"code","f643cdc2":"code","e9eb8ff6":"code","261b8b3d":"code","49ef2753":"code","9fb06d48":"code","4cd723ed":"code","054dfa03":"code","f337186e":"code","f0b092af":"code","01abbb5d":"code","5b65bd94":"code","21591615":"code","ba5e738c":"code","a522b684":"code","49b212d0":"code","4b489065":"code","bac5e1c9":"code","24ae3f24":"code","6479dab8":"code","49ba522e":"code","c51f6307":"code","27b9b582":"code","2090dc26":"code","39957222":"code","af612683":"code","a2685982":"code","9d4c4d50":"code","72985f8b":"code","3ccbe4fb":"code","39840a4e":"code","1a7e2421":"code","21086f04":"code","79ec42f9":"code","68fdda86":"code","11dcc853":"code","c5980792":"code","62fe3ada":"code","20b73f67":"code","655dd9e6":"markdown","86a8fbbf":"markdown","b9f7dca3":"markdown","b8e3747c":"markdown","364c41ce":"markdown","d1945f14":"markdown","118e0289":"markdown","c35b0e84":"markdown","bccd620a":"markdown","067f66d6":"markdown","64173d39":"markdown","b95544cb":"markdown","eea1e8e8":"markdown","8c15a55e":"markdown","b7ffd212":"markdown","b9137926":"markdown","e21d33df":"markdown","fbb9b0a7":"markdown","354d79fd":"markdown","3805a6b3":"markdown","ba064ac6":"markdown","4da344b9":"markdown","8dc45775":"markdown","1c2ce836":"markdown","dd466e1e":"markdown","f691863f":"markdown","2d93b5af":"markdown","2229b95c":"markdown","73dd4721":"markdown","b9281c96":"markdown","4231fe43":"markdown","a3b073a6":"markdown","8ec0594c":"markdown","07837ebd":"markdown","76b97786":"markdown","e4e919c7":"markdown","6159041a":"markdown","8864be23":"markdown"},"source":{"5f3c58c3":"import pandas as pd \nimport sqlite3\nprint('complete...')","081089b5":"try: \n    conn = sqlite3.connect('pizza.db')\n    print('connected successfully...')\nexcept Exception as e:\n    print('Error connecting...', str(e))\nelse: \n    c = conn.cursor()","025f5acb":"# # CREATE TABLE: runners\nc.execute('''\nCREATE TABLE runners (\n  \"runner_id\" INTEGER,\n  \"registration_date\" DATE\n);\n\n''')\n\nc.execute('''\nINSERT INTO runners\n  (\"runner_id\", \"registration_date\")\nVALUES\n  (1, '2021-01-01'),\n  (2, '2021-01-03'),\n  (3, '2021-01-08'),\n  (4, '2021-01-15');''')\n\nconn.commit()","a50eb880":"# # CREATE TABLE: customer_orders\nc.execute('''\nCREATE TABLE customer_orders (\n  \"order_id\" INTEGER,\n  \"customer_id\" INTEGER,\n  \"pizza_id\" INTEGER,\n  \"exclusions\" VARCHAR(4),\n  \"extras\" VARCHAR(4),\n  \"order_time\" TIMESTAMP\n);''')\n\nc.execute(''' \nINSERT INTO customer_orders\n  (\"order_id\", \"customer_id\", \"pizza_id\", \"exclusions\", \"extras\", \"order_time\")\nVALUES\n  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),\n  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),\n  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),\n  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),\n  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),\n  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),\n  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),\n  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),\n  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),\n  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),\n  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),\n  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),\n  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),\n  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');''')\n\nconn.commit()","6b593f70":"\n# # CREATE TABLE: runner_orders\nc.execute('''\nCREATE TABLE runner_orders (\n  \"order_id\" INTEGER,\n  \"runner_id\" INTEGER,\n  \"pickup_time\" VARCHAR(19),\n  \"distance\" VARCHAR(7),\n  \"duration\" VARCHAR(10),\n  \"cancellation\" VARCHAR(23)\n);''')\n\nc.execute('''\nINSERT INTO runner_orders\n  (\"order_id\", \"runner_id\", \"pickup_time\", \"distance\", \"duration\", \"cancellation\")\nVALUES\n  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),\n  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),\n  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),\n  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),\n  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),\n  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),\n  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),\n  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),\n  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),\n  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');''')\n\nconn.commit()","b85f2bd6":"# # CREATE TABLE: pizza_names\nc.execute('''\nCREATE TABLE pizza_names (\n  \"pizza_id\" INTEGER,\n  \"pizza_name\" TEXT\n);''')\n\nc.execute('''\nINSERT INTO pizza_names\n  (\"pizza_id\", \"pizza_name\")\nVALUES\n  (1, 'Meatlovers'),\n  (2, 'Vegetarian');''')\n\nconn.commit()","b4fcd746":"# # CREATE TABLE: pizza_recipes\nc.execute('''\nCREATE TABLE pizza_recipes (\n  \"pizza_id\" INTEGER,\n  \"toppings\" TEXT\n);''')\n\nc.execute('''\nINSERT INTO pizza_recipes\n  (\"pizza_id\", \"toppings\")\nVALUES\n  (1, '1, 2, 3, 4, 5, 6, 8, 10'),\n  (2, '4, 6, 7, 9, 11, 12');''')\n\nconn.commit()","ed6a60f6":"# # CREATE TABLE: pizza_toppings\nc.execute('''\nCREATE TABLE pizza_toppings (\n  \"topping_id\" INTEGER,\n  \"topping_name\" TEXT\n);''')\n\nc.execute('''\nINSERT INTO pizza_toppings\n  (\"topping_id\", \"topping_name\")\nVALUES\n  (1, 'Bacon'),\n  (2, 'BBQ Sauce'),\n  (3, 'Beef'),\n  (4, 'Cheese'),\n  (5, 'Chicken'),\n  (6, 'Mushrooms'),\n  (7, 'Onions'),\n  (8, 'Pepperoni'),\n  (9, 'Peppers'),\n  (10, 'Salami'),\n  (11, 'Tomatoes'),\n  (12, 'Tomato Sauce');\n\n''')\nconn.commit()","f643cdc2":"runners = pd.read_sql('''\nSELECT * FROM runners;\n''', conn)\nprint('Table: runners')\nrunners","e9eb8ff6":"customer_orders = pd.read_sql('''\nSELECT * FROM customer_orders\n''', conn)\nprint('Table: customer_orders')\ncustomer_orders","261b8b3d":"runner_orders = pd.read_sql('''\nSELECT * FROM runner_orders;\n''', conn)\nprint('Table: runner_orders')\nrunner_orders","49ef2753":"pizza_names = pd.read_sql('''\nSELECT * FROM pizza_names;\n''',conn)\nprint('Table: pizza_names')\npizza_names","9fb06d48":"pizza_recipes = pd.read_sql('''\nSELECT * FROM pizza_recipes\n''', conn)\nprint('Table: pizza_recipes')\npizza_recipes","4cd723ed":"pizza_toppings = pd.read_sql('''\nSELECT * FROM pizza_toppings\n''', conn)\nprint('Table: pizza_toppings')\npizza_toppings","054dfa03":"c.execute('''\nCREATE TABLE customer_orders_clean AS\nSELECT * \nFROM customer_orders\n''')\nconn.commit()","f337186e":"c.execute('''\nUPDATE customer_orders_clean\nSET exclusions =\n    (CASE \n        WHEN exclusions = '' OR exclusions LIKE '%null%'\n            THEN NULL \n        ELSE exclusions END)\n    , extras = \n    (CASE \n        WHEN extras = '' OR extras LIKE '%null%' OR extras is NULL\n            THEN NULL\n        ELSE extras END)\n\n''')\nconn.commit()","f0b092af":"customer_orders_clean = pd.read_sql('''\nSELECT * FROM customer_orders_clean\n;''',conn)\nprint('Table: customer_orders_clean')\ncustomer_orders_clean","01abbb5d":"c.execute('''\nDROP TABLE IF EXISTS runner_orders_clean ;''')\nc.execute('''\nCREATE TABLE runner_orders_clean AS\nSELECT *\nFROM runner_orders\n\n''')\nconn.commit()","5b65bd94":"c.execute('''\nUPDATE runner_orders_clean\nSET pickup_time = \n    (CASE \n        WHEN pickup_time LIKE '%null%' THEN NULL\n        ELSE pickup_time END)\n    , distance = \n    (CASE\n        WHEN distance LIKE '%null%'\n            THEN NULL\n        WHEN distance LIKE '%km'\n            THEN TRIM(distance, 'km')\n        ELSE distance END)\n    , duration = \n    (CASE \n        WHEN duration LIKE '%null%'\n            THEN NULL\n        WHEN duration LIKE '%minutes%'\n            THEN TRIM(duration, 'minutes')\n        WHEN duration LIKE '%mins%'\n            THEN TRIM(duration, 'mins')\n        WHEN duration LIKE '%minute%'\n            THEN TRIM(duration, 'minute')\n        ELSE duration END)\n    , cancellation =\n        (CASE \n            WHEN cancellation LIKE '%null' OR cancellation = ''\n                THEN NULL\n            ELSE cancellation END)\n    \n''') \nconn.commit()","21591615":"c.execute('''\nCREATE TABLE runner_orders_clean_1 (\n  \"order_id\" INTEGER,\n  \"runner_id\" INTEGER,\n  \"pickup_time\" TIMESTAMP,\n  \"distance\" REAL,\n  \"duration\" VARCHAR(7),\n  \"cancellation\" VARCHAR(23)\n);''')\n\nc.execute('''\nINSERT INTO runner_orders_clean_1\nSELECT *\nFROM runner_orders_clean\n\n''')\nc.execute('''\nDROP TABLE runner_orders_clean;\n''')\n\nc.execute('''\nALTER TABLE runner_orders_clean_1\nRENAME TO runner_orders_clean;\n''')\n\nconn.commit()","ba5e738c":"c.execute('''\nALTER TABLE runner_orders_clean\nRENAME distance TO distance_km\n''')\nc.execute('''\nALTER TABLE runner_orders_clean\nRENAME duration TO duration_min''')\nconn.commit()","a522b684":"runner_orders_clean = pd.read_sql('''\nSELECT * FROM runner_orders_clean\n\n;''',conn)\nprint('Table: runner_orders_clean')\nrunner_orders_clean","49b212d0":"pizza_orders = pd.read_sql('''\nSELECT COUNT(*)as pizza_orders\nFROM customer_orders_clean;\n''', conn)\n\npizza_orders","4b489065":"unique_orders = pd.read_sql('''\nSELECT COUNT(DISTINCT order_id) AS customer_orders\nFROM customer_orders_clean;\n\n''',conn)\nunique_orders","bac5e1c9":"successful_orders = pd.read_sql('''\nSELECT runner_id\n, COUNT(order_id) AS delivieries\nFROM runner_orders_clean\nWHERE cancellation IS NULL\nGROUP BY runner_id\nORDER BY runner_id;\n''',conn)\nsuccessful_orders","24ae3f24":"pizza_types = pd.read_sql('''\nSELECT c.pizza_id\n    ,COUNT(*) AS pizzas_delivered\nFROM customer_orders_clean c \nJOIN runner_orders_clean r USING(order_id)\nWHERE r.cancellation IS NULL\nGROUP BY c.pizza_id;\n\n''',conn)\npizza_types","6479dab8":"types = pd.read_sql('''\nSELECT c.customer_id\n    , p.pizza_name\n    , COUNT(c.pizza_id) AS num_pizzas_ordered\nFROM customer_orders_clean c \nJOIN pizza_names p USING(pizza_id)\nGROUP BY c.customer_id,p.pizza_name\nORDER BY c.customer_id, p.pizza_name\n;''',conn)\ntypes","49ba522e":"max_order = pd.read_sql('''\nWITH num_pizzas AS(\n\nSELECT c.order_id\n    , COUNT(c.pizza_id) AS num_pizzas\nFROM customer_orders_clean c \nJOIN runner_orders_clean r USING(order_id)\nWHERE cancellation IS NULL\nGROUP BY c.order_id)\n\nSELECT\n    MAX(num_pizzas) AS max_num_pizzas FROM num_pizzas\n;''',conn)\nmax_order","c51f6307":"changes = pd.read_sql('''\nWITH changes AS(\nSELECT c.customer_id\n    , c.pizza_id\n    , c.exclusions\n    , c.extras\nFROM customer_orders_clean c\nJOIN runner_orders_clean r USING(order_id)\nWHERE r.cancellation IS NULL)\n\nSELECT customer_id\n    , SUM(CASE WHEN exclusions IS NOT NULL OR extras IS NOT NULL\n                THEN 1 ELSE 0 END) AS pizza_changes\n    , SUM(CASE WHEN exclusions IS NULL AND extras IS NULL\n                THEN 1 ELSE 0 END) AS no_pizza_changes\n\nFROM changes\nGROUP BY customer_id\nORDER BY customer_id\n\n;''', conn)\nchanges","27b9b582":"picky_eater = pd.read_sql('''\nSELECT c.order_id\n    , COUNT(c.pizza_id) num_pizza\nFROM customer_orders_clean c\nJOIN runner_orders_clean r USING(order_id)\nWHERE r.cancellation IS NULL AND\n    c.exclusions IS NOT NULL AND\n    c.extras IS NOT NULL\n;''',conn)\npicky_eater","2090dc26":"volume_hour = pd.read_sql('''\nSELECT strftime('%H', order_time) AS hour_24hr\n    , COUNT(pizza_id) AS num_pizza\nFROM customer_orders_clean\nGROUP BY strftime('%H', order_time)\n''',conn)\nvolume_hour","39957222":"# # SQLite3 does not support dayname(). Mannually cast the weekdays.\nvolume_day = pd.read_sql('''\nWITH volume_day AS (\nSELECT pizza_id\n    , CASE CAST(strftime('%w', order_time) AS INTEGER)\n            WHEN 0 THEN 'Sunday'\n            WHEN 1 THEN 'Monday'\n            WHEN 2 THEN 'Tuesday'\n            WHEN 3 THEN 'Wednesday'\n            WHEN 4 THEN 'Thursday'\n            WHEN 5 THEN 'Friday'\n            WHEN 6 THEN 'Saturday'\n            END AS day_of_week\nFROM customer_orders_clean)\n\nSELECT COUNT(pizza_id) AS num_pizza\n    , day_of_week\nFROM volume_day\nGROUP BY day_of_week\nORDER BY num_pizza\n\n;''',conn)\nvolume_day","af612683":"runner_weekly = pd.read_sql('''\nSELECT COUNT(runner_id) as num_runner\n    , strftime('%W',registration_date) AS registration_week\nFROM runners\nGROUP BY strftime('%W', registration_date)\n\n;''',conn)\nrunner_weekly","a2685982":"# # timestampdiff function not supported on sqlite3.\n# # Use julianday function and multiply by 86400 to convert to seconds.\n# # Then convert to minutes.\navg_time = pd.read_sql('''\nSELECT  r.runner_id\n    , ROUND(AVG(\n    ((JULIANDAY(r.pickup_time) - JULIANDAY(c.order_time)) * 86400)\/ 60)\n    ,1) AS avg_time_min\nFROM runner_orders_clean r\nJOIN customer_orders_clean c USING(order_id)\nWHERE pickup_time NOT NULL\nGROUP BY runner_id\nORDER BY avg_time_min\n\n;''',conn)\navg_time","9d4c4d50":"duration_pizza = pd.read_sql('''\nWITH pizza_prep AS (\n    SELECT  c.order_id\n    , COUNT(c.order_id) as num_pizza\n        , ROUND((((JULIANDAY(r.pickup_time)- JULIANDAY(c.order_time)) *86400) \/ 60),2)\n        AS prep_duration_min\n    FROM customer_orders_clean c\n    JOIN runner_orders_clean r USING(order_id)\n    WHERE r.cancellation is NULL \n    GROUP BY c.order_id )\n    \nSELECT  num_pizza\n    , ROUND(AVG(prep_duration_min), 0) as avg_prep_min\nFROM pizza_prep\nGROUP BY num_pizza\n;''',conn)\nduration_pizza","72985f8b":"avg_dist = pd.read_sql('''\nSELECT c.customer_id\n    , ROUND(AVG(r.distance_km),1) as avg_distance\nFROM customer_orders_clean c\nJOIN runner_orders_clean r USING(order_id)\nWHERE r.cancellation IS NULL\nGROUP BY c.customer_id\nORDER BY c.customer_id\n;''', conn)\navg_dist","3ccbe4fb":"duration = pd.read_sql('''\nSELECT MAX(duration_min) - MIN(duration_min) AS difference\nFROM runner_orders_clean\nWHERE cancellation IS NULL\n\n;''',conn)\nduration","39840a4e":"runner_speed = pd.read_sql('''\n\nSELECT runner_id\n    , order_id\n    , ROUND(AVG(distance_km \/ (CAST(duration_min AS REAL)\/ 60)),1) AS avg_speed_kmph\n    , ROUND(AVG((distance_km \/ 1.609) \/ (CAST(duration_min AS REAL) \/ 60)),1)  AS avg_speed_mph\n\nFROM runner_orders_clean\nWHERE cancellation IS NULL\nGROUP BY runner_id, order_id\n\n\n;''', conn)\nrunner_speed","1a7e2421":"runner_pct = pd.read_sql('''\nSELECT runner_id\n    , SUM(CASE WHEN cancellation IS NULL THEN 1\n        ELSE 0 END) \/ CAST(COUNT(order_id) AS REAL) * 100 AS success_pct\nFROM runner_orders_clean\nGROUP BY runner_id\n\n\n;''', conn)\nrunner_pct ","21086f04":"test = pd.read_sql('''\n\nSELECT * FROM customer_orders_clean\n;''', conn)\ntest","79ec42f9":"test = pd.read_sql('''\n\nSELECT * FROM pizza_names, pizza_recipes\n;''', conn)\ntest","68fdda86":"c.execute('''\nDROP TABLE IF EXISTS pizza_recipes_mod;''')\n\nc.execute('''\nCREATE TEMP TABLE pizza_recipes_mod (\n    'pizza_id' INTEGER, \n    'toppings' INTEGER );''')\n\nc.execute('''\nINSERT INTO pizza_recipes_mod\nVALUES \n(1,1),\n(1,2),\n(1,3),\n(1,4),\n(1,5),\n(1,6),\n(1,8),\n(1,10),\n(2,4),\n(2,6),\n(2,7),\n(2,9),\n(2,11),\n(2,12)\n\n''')\n\nconn.commit()","11dcc853":"pizza_recipes_mod = pd.read_sql('''\nSELECT * \nFROM pizza_recipes_mod;''',\n                  conn)\nprint('Table: pizza_recipes_mod')\npizza_recipes_mod","c5980792":"standard = pd.read_sql('''\n\nSELECT n.pizza_name\n    , GROUP_CONCAT(t.topping_name) as toppings\nFROM pizza_recipes_mod pr\nJOIN pizza_toppings t \n    ON pr.toppings = t.topping_id\nJOIN pizza_names n\n    ON pr.pizza_id = n.pizza_id\nGROUP BY pr.pizza_id\n\n;''', conn)\nstandard","62fe3ada":"# # Functions for splitting columns in SQLITE3 are limited.\nextras = pd.read_sql('''\nWITH extras AS (\nSELECT order_id\n    , pizza_id\n    , CAST(extras AS INTEGER) AS extras\nFROM customer_orders_clean\nWHERE LENGTH(extras) = 1\nAND extras NOT NULL\n\nUNION ALL \n\nSELECT order_id\n    , pizza_id\n    , CAST(SUBSTR(extras, 0, INSTR(extras, ',')) AS INTEGER)  AS extras\nFROM customer_orders_clean\nWHERE extras NOT NULL\nAND LENGTH(extras)>2\n\nUNION ALL\n\nSELECT order_id\n    , pizza_id\n    , CAST(SUBSTR(extras, 3)AS INTEGER) AS extras\nFROM customer_orders_clean\nWHERE LENGTH(extras)>2\n), \n\ncount_extras AS(\n\nSELECT extras,\n    COUNT(extras) as count\nFROM extras\nGROUP BY extras\nORDER BY count DESC\nLIMIT 1\n) \n\n\nSELECT topping_name\nFROM count_extras\nJOIN pizza_toppings\n    ON count_extras.extras = pizza_toppings.topping_id\n;''', conn)\nextras","20b73f67":"# # Functions for splitting columns in SQLITE3 are limited.\nexclusions = pd.read_sql('''\nWITH exclusions AS (\nSELECT order_id\n    , pizza_id\n    , CAST(exclusions AS INTEGER) AS exclusions\nFROM customer_orders_clean\nWHERE LENGTH(exclusions) = 1\nAND exclusions NOT NULL\n\nUNION ALL \n\nSELECT order_id\n    , pizza_id\n    , CAST(SUBSTR(exclusions, 0, INSTR(exclusions, ',')) AS INTEGER)  AS exclusions\nFROM customer_orders_clean\nWHERE exclusions NOT NULL\nAND LENGTH(exclusions)>2\n\nUNION ALL\n\nSELECT order_id\n    , pizza_id\n    , CAST(SUBSTR(exclusions, 3)AS INTEGER) AS exclusions\nFROM customer_orders_clean\nWHERE LENGTH(exclusions)>2\n), \n\ncount_exclusions AS(\n\nSELECT exclusions,\n    COUNT(exclusions) as count\nFROM exclusions\nGROUP BY exclusions\nORDER BY count DESC\nLIMIT 1\n) \n\n\nSELECT topping_name\nFROM count_exclusions\nJOIN pizza_toppings\n    ON count_exclusions.exclusions = pizza_toppings.topping_id\n;''', conn)\nexclusions","655dd9e6":"<h2 style='font-family:times new roman;color:navy'>Data Tables<\/h2>","86a8fbbf":"<p style='font-family:times new roman;font-size:16px'>5. What was the difference between the longest and shortest delivery times for all orders?<\/p>","b9f7dca3":"<p style='font-family:times new roman;font-size:16px'>7. What is the successful delivery percentage for each runner?<\/p>","b8e3747c":"<p style='font-family:times new roman;font-size:16px'>Updating the distance and duration columns' name in the runner_orders_clean table.<\/p>","364c41ce":"<p style='font-family:times new roman;font-size:16px'>1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)<\/p>","d1945f14":"<p style='font-family:times new roman;font-size:16px'>2. How many unique customer orders were made?<\/p>","118e0289":"<p style='font-family:times new roman;font-size:16px'>1. What are the standard ingredients for each pizza?<\/p>","c35b0e84":"<p style='font-family:times new roman;font-size:16px'>Change data types for runner_orders_clean. SQLite3 does not support modifying column's data types, a new table has to be created with the appropriate data types.<\/p>","bccd620a":"<p style='font-family:times new roman;font-size:16px'>3. What was the most common exclusion?<\/p>","067f66d6":"<h1 style='font-family:times new roman;color:purple'> <center> <strong> Pizza Runner: SQL Case Study #2 <\/strong><\/center><\/h1>","64173d39":"<h3 style='font-family:times new roman;'> The case study was created by<a href='https:\/\/www.datawithdanny.com'> Danny Ma<\/a>. If you want to participate in Danny's SQL challenge you can so at<a href='https:\/\/8weeksqlchallenge.com'> SQL 8 Week Challenge<\/a>!<\/h3>","b95544cb":"<p style='font-family:times new roman;font-size:16px'>4. What was the average distance travelled for each customer?<\/p>","eea1e8e8":"<p style='font-family:times new roman;font-size:16px;'>Fix the nulls in the table.<\/p>","8c15a55e":"<p style='font-family:times new roman;font-size:16px'>Update the exclusions and extra columns. Set all rows with empty strings or 'null' values in the exclusions and extra columns to NULL values.<\/p>","b7ffd212":"<p style='font-family:times new roman;font-size:14px'>There is a difference of 30 minutes between the longest and shorter delivery time.<\/p>","b9137926":"<p style='font-family:times new roman;font-size:16px'>2. What was the most commonly added extra?<\/p>","e21d33df":"<p style='font-family:times new roman;font-size:16px'>Split toppings field in the pizza_recipes table to make it easier to work with.<\/p>","fbb9b0a7":"<p style='font-family:times new roman;font-size:16px'>4. How many of each type of pizza was delivered?<\/p>\n","354d79fd":"<p style='font-family:times new roman;font-size:16px'>7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?<\/p>\n","3805a6b3":"***","ba064ac6":"<p style='font-family:times new roman;font-size:16px'>2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?<\/p>","4da344b9":"<p style='font-family:times new roman;font-size:16px'>8. How many pizzas were delivered that had both exclusions and extras?<\/p>\n","8dc45775":"<p style='font-family:times new roman;font-size:16px'>3. How many successful orders were delivered by each runner?<\/p>","1c2ce836":"<h3 style='font-family:times new roman;color:navy'><center>B. Runner and Customer Experience<\/center><\/h3>","dd466e1e":"<p style='font-family:times new roman;font-size:16px'>Split exclusions and extras field in the customer_orders_table table to make it easier to work with.<\/p>","f691863f":"<p style='font-family:times new roman;font-size:16px;'>Create a copy of the runner_orders table in order to clean and prevent loss of data.<\/p>","2d93b5af":"<p style='font-family:times new roman;font-size:16px'>1. How many pizzas were ordered?<\/p>","2229b95c":"<p style='font-family:times new roman;font-size:16px'>6. What was the average speed for each runner for each delivery and do you notice any trend for these values?<\/p>","73dd4721":"<p style='font-family:times new roman;font-size:16px'>10. What was the volume of orders for each day of the week?<\/p>","b9281c96":"<p style='font-family:times new roman;font-size:16px;'>Create a copy of the customer_orders table in order to clean and prevent loss of data.<\/p>","4231fe43":"<p style='font-family:times new roman;font-size:16px'>3. Is there any relationship between the number of pizzas and how long the order takes to prepare?<\/p>","a3b073a6":"<p style='font-family:times new roman;font-size:16px'>5. How many Vegetarian and Meatlovers were ordered by each customer?<\/p>\n","8ec0594c":"<p style='font-family:times new roman;font-size:16px'>6. What was the maximum number of pizzas delivered in a single order?<\/p>\n","07837ebd":"<p style='font-family:times new roman;font-size:16px'>9. What was the total volume of pizzas ordered for each hour of the day?<\/p>\n","76b97786":"<h3 style='font-family:times new roman;color:navy'><center>C. Ingredient Optimization<\/center><\/h3>","e4e919c7":"<h2 style='font-family:times new roman;color:navy'>Set Up<\/h2>","6159041a":"<h2 style='font-family:times new roman;color:navy'>Clean Data<\/h2>","8864be23":"<h2 style='font-family:times new roman;color:navy'>Case Study<\/h2>\n<h3 style='font-family:times new roman;color:navy'><center>A. Pizza Metrics<\/center><\/h3>\n"}}