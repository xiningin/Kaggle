{"cell_type":{"0854ce84":"code","c0058b3c":"code","9e481f8d":"code","effcd732":"code","ee4dbfb8":"code","d4e78dce":"code","b7d5c676":"code","91474da1":"code","f2e043be":"code","d8acff43":"code","26f6f281":"code","2d53d54d":"code","588ba404":"code","3703da5f":"code","a5f09eb7":"code","a424678b":"code","01d83e6c":"code","e954edbe":"code","c948274d":"code","375c94df":"code","e1d974e4":"code","da2c8d44":"code","62b9d45b":"code","2babdcbd":"code","cd5a4541":"code","a32cf31e":"code","47f26251":"code","b8e5dcb0":"code","25e2e62c":"code","d7a8bc10":"code","a3cbdf9e":"code","e93b9771":"code","ab5fd429":"markdown","8eb7a09c":"markdown","50270f07":"markdown","9b3183f4":"markdown","2d08f45d":"markdown","157f2acd":"markdown","15be4934":"markdown","c864b301":"markdown","c4355b39":"markdown","01c131c8":"markdown","113aa733":"markdown","963b1250":"markdown","388bd453":"markdown","1cbaeae6":"markdown","9534a494":"markdown","3a0f67f8":"markdown","06d0fdff":"markdown","28dc4c26":"markdown","b9fea6ac":"markdown","e4186f3f":"markdown","391e999f":"markdown","17f00800":"markdown","254562b5":"markdown","bbcca2ed":"markdown","9a334fb0":"markdown","933e2845":"markdown","eea26822":"markdown","662cf885":"markdown","3c3ee4f2":"markdown","182e446c":"markdown"},"source":{"0854ce84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c0058b3c":"import seaborn as sns\nimport matplotlib.pyplot as plt","9e481f8d":"df=pd.read_csv('..\/input\/us-accidents\/US_Accidents_May19.csv')","effcd732":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","ee4dbfb8":"df.head()","d4e78dce":"df.describe()","b7d5c676":"listItem = []\nfor col in df.columns :\n    listItem.append([col, df[col].dtype, df[col].isna().sum(), round((df[col].isna().sum()\/len(df[col])) * 100,2),\n                    df[col].nunique(), list(df[col].unique()[:2])]);\n\ndfDesc = pd.DataFrame(columns=['dataFeatures', 'dataType', 'null', 'nullPct', 'unique', 'uniqueSample'],\n                     data=listItem)\ndfDesc","91474da1":"df[df['TMC'].isnull()]['Source'].value_counts()","f2e043be":"len(df[df['Source'] == 'Bing'])","d8acff43":"df['TMC'] = df['TMC'].fillna('Unknown')","26f6f281":"df.drop(['End_Lat','End_Lng'],axis=1,inplace=True)","2d53d54d":"df['Description'] = df['Description'].fillna('Unknown')","588ba404":"df.drop('Number',axis=1,inplace=True)","3703da5f":"df.dropna(subset=['City'],inplace=True)","a5f09eb7":"def remove_column_or_row(name_col):\n    null = df[name_col].isnull().sum()\n    perc = null\/len(df) * 100\n    if(perc > 50):\n        df.drop(name_col,axis=1,inplace=True)\n    else:\n        df.dropna(subset=[name_col],inplace=True)","a424678b":"for item in df.columns:\n    remove_column_or_row(item)","01d83e6c":"df.isnull().sum()","e954edbe":"df.columns","c948274d":"df.drop('ID' , inplace=True,axis=1)","375c94df":"diff = pd.to_datetime(df['End_Time']) - pd.to_datetime(df['Start_Time'])\ndf['Minutes'] = diff.dt.total_seconds().div(60).astype(int)","e1d974e4":"df.columns","da2c8d44":"fig,ax = plt.subplots(nrows=1,ncols=2,figsize=(15,6))\nsns.countplot(df['Severity'],ax=ax[0])\nsns.countplot(df[(df['Severity'] == 0) | (df['Severity']==1)]['Severity'],ax=ax[1])","62b9d45b":"df['Severity'].value_counts(normalize=True)","2babdcbd":"import plotly.graph_objects as go\n\nlabels = df['State'].value_counts().head(10).index\nvalues = df['State'].value_counts().head(10).values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","cd5a4541":"# import plotly.graph_objects as go\n\nlabels = df['TMC'].value_counts().head(10).index\nvalues = df['TMC'].value_counts().head(10).values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","a32cf31e":"df.sort_values(by='Minutes',ascending=False).head(10)[['Severity','County','Description','Distance(mi)','Minutes']]","47f26251":"sns.distplot(df['Minutes'])\nplt.tight_layout()","b8e5dcb0":"df.sort_values(by='Distance(mi)',ascending=False).head(10)[['Severity','County','Description','Distance(mi)','Minutes']]","25e2e62c":"sns.distplot(df['Distance(mi)'])\nplt.tight_layout()","d7a8bc10":"import plotly.express as px\nfig = px.scatter(x=df['Minutes'], y=df['Distance(mi)'])\nfig.show()","a3cbdf9e":"df.groupby('State').mean()[['Distance(mi)','Minutes']].sort_values(by='Distance(mi)',ascending=False).head(10)","e93b9771":"df.groupby('State').mean()[['Distance(mi)','Minutes']].sort_values(by='Minutes',ascending=False).head(10)","ab5fd429":"- **Description**","8eb7a09c":"### 4.1 Handle Mising Value","50270f07":"I will not use this column, and there is too many data was null, so i decided to remove this column","9b3183f4":"## 3. Data Exploration","2d08f45d":"## 2. Columns Description \n\n**ID** => This is a unique identifier of the accident record.<br>\n**Source** => Indicates source of the accident report (i.e. the API which reported the accident.). <br>\n**TMCA** => traffic accident may have a Traffic Message Channel (TMC) code which provides more detailed description of the event. <br>\n**Severity** => Shows the severity of the accident, a number between 1 and 4, where 1 indicates the least impact on traffic (i.e., short delay as a result of the accident) and 4 indicates a significant impact on traffic (i.e., long delay).<br>\n**Start_Time** => Shows start time of the accident in local time zone.<br>\n**End_Time** => Shows end time of the accident in local time zone.<br>\n**Start_Lat** => Shows latitude in GPS coordinate of the start point.<br>\n**Start_Lng** => Shows longitude in GPS coordinate of the start point.<br>\n**End_Lat** => Shows latitude in GPS coordinate of the end point.<br>\n**End_Lng** => Shows longitude in GPS coordinate of the end point.<br>\n**Distance(mi)** => The length of the road extent affected by the accident.<br>\n**Description** => Shows natural language description of the accident.<br>\n**Number** => Shows the street number in address field.<br>\n**Street** => Shows the street name in address field.<br>\n**Side** => Shows the relative side of the street (Right\/Left) in address field.<br>\n**City** => Shows the city in address field.<br>\n**County** => Shows the county in address field.<br>\n**State** => Shows the state in address field.<br>\n**Zipcode** => Shows the zipcode in address field.<br>\n**Country** => Shows the country in address field.<br>\n**Timezone** => Shows timezone based on the location of the accident (eastern, central, etc.).<br>\n**Airport_Code** => Denotes an airport-based weather station which is the closest one to location of the accident.<br>\n**Weather_Timestamp** => Shows the time-stamp of weather observation record (in local time).<br>\n**Temperature(F)** => Shows the temperature (in Fahrenheit).<br>\n**Wind_Chill(F)** => Shows the wind chill (in Fahrenheit).<br>\n**Humidity(%)** => Shows the humidity (in percentage).<br>\n**Pressure(in)** => Shows the air pressure (in inches).<br>\n**Visibility(mi)** => Shows visibility (in miles).<br>\n**Wind_Direction** => Shows wind direction.<br>\n**Wind_Speed(mph)** => Shows wind speed (in miles per hour).<br>\n**Precipitation(in)** => Shows precipitation amount in inches, if there is any.<br>\n**Weather_Condition** => Shows the weather condition (rain, snow, thunderstorm, fog, etc.)<br>\n**Amenity** => A POI annotation which indicates presence of amenity in a nearby location.<br>\n**Bump** => A POI annotation which indicates presence of speed bump or hump in a nearby location.<br>\n**Crossing** => A POI annotation which indicates presence of crossing in a nearby location.<br>\n**Give_Way** => A POI annotation which indicates presence of give_way in a nearby location.<br>\n**Junction** => A POI annotation which indicates presence of junction in a nearby location.<br>\n**No_Exit** => A POI annotation which indicates presence of no_exit in a nearby location.<br>\n**Railway** => A POI annotation which indicates presence of railway in a nearby location.<br>\n**Roundabout** => A POI annotation which indicates presence of roundabout in a nearby location.<br>\n**Station** => A POI annotation which indicates presence of station in a nearby location.<br>\n**Stop** => A POI annotation which indicates presence of stop in a nearby location.<br>\n**Traffic_Calming** => A POI annotation which indicates presence of traffic_calming in a nearby location.<br>\n**Traffic_Signal** => A POI annotation which indicates presence of traffic_signal in a nearby location.<br>\n**Turning_Loop** => A POI annotation which indicates presence of turning_loop in a nearby location.<br>\n**Sunrise_Sunset** => Shows the period of day (i.e. day or night) based on sunrise\/sunset.<br>\n**Civil_Twilight** => Shows the period of day (i.e. day or night) based on civil twilight.<br>\n**Nautical_Twilight** => Shows the period of day (i.e. day or night) based on nautical twilight.<br>\n**Astronomical_Twilight** => Shows the period of day (i.e. day or night) based on astronomical twilight.<br>","157f2acd":"- **City**","15be4934":"- **End_Lat , End_Lng**","c864b301":"> Count Severity","c4355b39":"I assume that Data with missing value at TMC Columns is because the data Source came from Bing.","01c131c8":"# US Accidents Analysis ","113aa733":"I decided to fill this missing with \"unknown\"","963b1250":"## 1. About Data\n\nThis is a countrywide traffic accident dataset, which covers 49 states of the United States. The data is continuously being collected from February 2016, using several data providers, including two APIs which provide streaming traffic event data.","388bd453":"> Drop Column ID","1cbaeae6":"> The Longest Accident in Distance(mi)","9534a494":"> Top Ten State With the most Accidents in US","3a0f67f8":"## 5. EDA","06d0fdff":"- **Lazy Cleaning**","28dc4c26":"Yes, thats True, all data from Bing Doesnt have TMC Value, so i decided to fill it by some placeholder like \"Unknown\" maybe. Basically we have to do some research why the data from Bing came with nan value at TMC, but i don't do this things right now, because it will take long time.","b9fea6ac":"65% of accidents data grouped by Severity 2 which means normal accident, not too chaos","e4186f3f":"To make this kind of work faster, i decided to remove column with missing data over 50% and remove the row if the column miss under 50%","391e999f":"## 4. Data Preprocessing ","17f00800":"### 4.2 Feature Engineering","254562b5":"There is 76% data was missing at this two columns, so i decided to remove this two columns, because it was very hard to fill with some value","bbcca2ed":"-  **TMC**","9a334fb0":"- **Number**","933e2845":"Bumm, magic, our data was clean, but you have noted that we might losse much information if we clean the data using this method, before you deleted either row or column, you have to observe first, why this data missing??","eea26822":"> Make Minutes Column based Start_time and End_time","662cf885":"> Relationship Between Distance and Minutes","3c3ee4f2":"The missing value was very small, so i decided to delete the row","182e446c":"> The Longest Accident in Minutes"}}