{"cell_type":{"24d63773":"code","c2fc8a71":"code","fb6c1d82":"code","8c023dfb":"code","e80b7340":"code","ad04543c":"code","af5577ba":"markdown","8d3f48e6":"markdown","3d6d0c76":"markdown","a2998239":"markdown","f1b0466d":"markdown","6ba6fa60":"markdown","6a0b3bc0":"markdown","d02e57a7":"markdown","134b7bcd":"markdown"},"source":{"24d63773":"import matplotlib.patches as patches\nfrom matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nimport matplotlib.patches as mpatches\n\n# Change size of the figure\nplt.rcParams['figure.figsize'] = [20, 16]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n    ###################\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    ###################\n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    ###################\n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=20, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=20, c=\"w\", weight=\"bold\", rotation=180)\n    ###################\n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=3)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=3)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=3)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=3)\n    ###################\n\n    # draw home end zone\n    plt.text(2.5, (height - 10) \/ 2, \"HOME\", size=40, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(112.5, (height - 10) \/ 2, \"AWAY\", size=40, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    ###################\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    ###################\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax\n\nfig, ax = drawPitch(100, 53.3)","c2fc8a71":"import pandas as pd\ndf = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")\nprint(df)\n\ngames_ids = {}\ngames = df.groupby(by=[\"gameId\"])\nfor game, data in games:\n    games_ids[game] = list(set(data.playId.tolist()))","fb6c1d82":"def extract_one_game(game_id, play_id):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home = {}\n    away = {}\n    balls = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home, away, balls","8c023dfb":"from matplotlib import animation\nfrom IPython.display import HTML\ndef animate_one_play(game_id, play_id):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home, away, balls = extract_one_game(game_id, play_id)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls), interval=100, blit=True)\n\n    return HTML(anim.to_html5_video())\n","e80b7340":"animate_one_play(2018123000, 36)","ad04543c":"import pandas as pd\nimport ipywidgets as widgets\nfrom IPython.display import display,clear_output\nfrom ipywidgets import Output, Button\n\noutput = Output()\nstart = Button(description=\"Start\")\nplays_widget = widgets.Dropdown(\n    options=list(games_ids.keys()),\n    value=list(games_ids.keys())[0],\n    description='Game id:',\n    disabled=False,\n)\ngames_widget = widgets.Dropdown(\n    options=games_ids[list(games_ids.keys())[0]],\n    value=games_ids[list(games_ids.keys())[0]][0],\n    description='Play id:',\n    disabled=False,\n)\ndef click_start(b):\n    with output:\n        clear_output()\n        display(animate_one_play(plays_widget.value, games_widget.value))\n       \nstart.on_click(click_start)\ndef on_change(change):\n    with output:\n        games_widget.options = games_ids[change.owner.value]\n\nplays_widget.observe(on_change)\n\ndisplay(plays_widget, games_widget, start, output)","af5577ba":"# Let's draw football pitch in matplotlib","8d3f48e6":"# Football field\n\n**From wiki:**\n> The rectangular field of play used for American football games measures 100 yards (91.44 m) long between the goal lines, and 160 feet (48.8 m) (53+1\u20443 yards) wide. The field is made of grass. In addition, there are end zones extending another 10 yards (9.144 m) past the goal lines to the \"end lines\", for a total length of 120 yards (109.7 m). When the \"football field\" is used as unit of measurement, it is usually understood to mean 100 yards (91.44 m), although technically the full length of the official field, including the end zones, is 120 yards (109.7 m). There is a goal centered on each end line, with a crossbar 10 feet (3.0 m) above the ground and goalposts 18 feet 6 inches (5.64 m) apart extending at least 35 feet (11 m) above the crossbar. Between the goal lines, additional lines span the width of the field at 5-yard intervals.\n\n**Visualizations in this notebook are based on the above informations from Wikipedia and the the image provided by competition's organizers**\n\n![image.png](attachment:24d9a880-59b6-435e-8cb5-6057559934f6.png)","3d6d0c76":"# Load tracking data\n\nFor simplicity I use data only from 2018","a2998239":"# Let's add some interactivity\nFrom provided dropdown widgets you can choose a demanded game.\n\n**Animation's creation can take a while (depending on play's length - sometimes even up to 60s, so don't give up after clicking start)**","f1b0466d":"# Summary \nI hope you're gonna enjoy my notebook. The above code can be easily used within your pipeline. Obviously, more features (like players' directions) can be added to the plot, but I think for illustration purposes, current features are the most significant. I truly believe:\n\n> The greatest value of a picture is when it forces us to notice what we never expected to see.\n> \nand hope my dataViz will allow you to better understand the problem and create better agents.\n\n# **Can't wait to see your feedback - I will truly appreciate your comments and try to improve my work! Good luck in the competition!**","6ba6fa60":"# Let's animate single play!","6a0b3bc0":"# Prepare data for visualization","d02e57a7":"# Function animating tracking data\nI didn't find information about tracking data frequency, so I arbitrary chose 10Hz (one frame per 100ms), which looks smooth","134b7bcd":"# Tracking data visualization\n\n**Hello everyone!**\n\nAs a great sports fan, I'm always more than happy to participate in sport's competitions on Kaggle! \nAmerical football has always fascinated me, but unfortunately as a European, I might don't fully understand all the rules, so if you find any error in this notebook - you're more than welcome to correct me :)\n\n* **The goal of this notebook is to build a tool to visualize matches more nicely.**\n* **Visualized tracking data can allow us to understand data better and develop better solutions**\n* **You'll learn how to draw pitch in matplotlib**\n* **You'll learn how to create animations**\n* **You'll learn how to create ipywidgets, making your notebooks interactive**\n* **The Whole tool is implemented in sole matplotlib which I hope makes this notebook even more didactic**\n\n*I hope that code is self-explanatory but if anything is unclear - just let me know and I will do my best to help!*\n\n# I invite you to ebmark on this journey with me - let's visualize and animate tracking data together."}}