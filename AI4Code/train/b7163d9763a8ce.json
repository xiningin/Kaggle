{"cell_type":{"3e7c119c":"code","519385e6":"code","2d1077c5":"code","f07425d4":"code","04d58b0d":"code","f531b93e":"code","a278ad79":"code","cd7589ed":"code","15e99032":"code","6bb66708":"markdown","bffc6a3e":"markdown","52a84b3a":"markdown","dc4301b4":"markdown","a1823f10":"markdown"},"source":{"3e7c119c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","519385e6":"import pandas as pd\ntrain = pd.read_csv('..\/input\/twitter-sentiment-analysis-hatred-speech\/train.csv')\nprint(\"Training Set:\"% train.columns, train.shape, len(train))\ntest = pd.read_csv('..\/input\/twitter-sentiment-analysis-hatred-speech\/test.csv')\nprint(\"Test Set:\"% test.columns, test.shape, len(test))","2d1077c5":"import re\ndef  clean_text(df, text_field):\n    df[text_field] = df[text_field].str.lower()\n    df[text_field] = df[text_field].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \n    return df\ntest_clean = clean_text(test, \"tweet\")\ntrain_clean = clean_text(train, \"tweet\")","f07425d4":"from sklearn.utils import resample\ntrain_majority = train_clean[train_clean.label==0]\ntrain_minority = train_clean[train_clean.label==1]\ntrain_minority_upsampled = resample(train_minority, \n                                 replace=True,    \n                                 n_samples=len(train_majority),   \n                                 random_state=123)\ntrain_upsampled = pd.concat([train_minority_upsampled, train_majority])\ntrain_upsampled['label'].value_counts()","04d58b0d":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.linear_model import SGDClassifier\npipeline_sgd = Pipeline([\n    ('vect', CountVectorizer()),\n    ('tfidf',  TfidfTransformer()),\n    ('nb', SGDClassifier()),])","f531b93e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_upsampled['tweet'],\n                                                    train_upsampled['label'],random_state = 0)","a278ad79":"model = pipeline_sgd.fit(X_train, y_train)\ny_predict = model.predict(X_test)\nfrom sklearn.metrics import f1_score\nf1_score(y_test, y_predict)","cd7589ed":"y_predict","15e99032":"test_clean","6bb66708":"**Data Cleaning**","bffc6a3e":"**Handling Imbalanced data for Hate Speech Detection Model**********","52a84b3a":"Training the Hate Speech Detection Model\nNow, before training the model, let\u2019s split the data into a training set and a test set:","dc4301b4":"Creating a Pipeline\nFor simplicity and reproducibility of the hate speech detection model, I will use the Scikit-Learn\u2019s pipeline with an SGDClassifier, before training our model:","a1823f10":"Hate Speech Detection Model"}}