{"cell_type":{"534f58a8":"code","fee52a17":"code","d541a824":"code","719c79ba":"code","8773e6ff":"code","1fbaa383":"code","a8de6b03":"code","705427d2":"code","3441b1bd":"code","af8607c8":"code","3011ab96":"code","cc872fc5":"code","13c779cf":"code","60b2871c":"code","a19468ca":"code","5742f8bd":"code","be59e49e":"code","41d927ad":"code","ca281b04":"code","6c253002":"code","1d9f5b8a":"code","19e00a3c":"code","3238be60":"code","47d9f0dc":"code","df7d28ba":"code","f4f57390":"code","9e0d25b0":"code","0ed922c9":"code","12f6fc23":"code","d9fc0af5":"code","685d97c9":"code","a1778e39":"code","4930aae1":"code","621d3188":"code","efedd9d0":"code","0eaa8044":"code","1b7c12bb":"code","d8850577":"code","b5829969":"code","1464f9da":"code","661ff35f":"code","b148ba31":"code","3546affa":"code","87838616":"code","9c30c70a":"code","8a2c09cc":"code","e4f40a76":"code","936d5d0c":"code","3903120a":"markdown","dbe87b70":"markdown","4743e41b":"markdown","708808ad":"markdown","11c2668e":"markdown","3db89d11":"markdown","0c4587e7":"markdown","6d25649f":"markdown","95322ec4":"markdown","411967de":"markdown","e8aa20c9":"markdown","177b2e56":"markdown","f73ade98":"markdown","d36d606e":"markdown","dd15c395":"markdown","31557b70":"markdown","8ee00a9c":"markdown","bf1499c1":"markdown","0d98d041":"markdown","e96923fc":"markdown","5198b310":"markdown","4ca44aa2":"markdown","895265a4":"markdown","83787e95":"markdown","52d2ac43":"markdown","2f70fb6b":"markdown","a158f56c":"markdown","14a242da":"markdown","122b057d":"markdown","1a859bde":"markdown","0e8faed2":"markdown","aa9af2f6":"markdown"},"source":{"534f58a8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fee52a17":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n%matplotlib inline\nplt.style.use('ggplot')\n\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\nfrom plotly.subplots import make_subplots\nimport ipywidgets as widgets\ninit_notebook_mode(connected=True)\n\n\nfrom datetime import datetime, date, timedelta\n\nfrom fbprophet import Prophet\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)","d541a824":"def get_data(path):\n    tab_name = ['Deaths','Recovered']\n    jc = ['Province\/State','Country\/Region']\n    path_c = path+'Confirmed.csv'\n    df = pd.read_csv(path_c)\n    df = pd.melt(df, id_vars=['Province\/State','Country\/Region','Lat','Long'],\n            var_name='Date', value_name= 'Confirmed')\n    df['Date'] = pd.to_datetime(df['Date'])\n    for name in tab_name:\n        path_ = path+name+'.csv'\n        data = pd.read_csv(path_)\n        data = pd.melt(data, id_vars=['Province\/State','Country\/Region','Lat','Long'], \n                    var_name='Date', value_name= name)\n        data['Date'] = pd.to_datetime(data['Date'])\n        df[name] = data[name].values\n        \n        \n    return(df)\n\n\n\n\ndef prepare_data(df):\n    num_col = ['Confirmed','Deaths','Recovered'] \n    new_col = ['PS','Country','Lat','Long','Date','Confirmed','Deaths','Recovered']\n    df.columns = new_col\n    df[num_col] = df[num_col].apply(lambda x: x.fillna(value = 0))\n    df[num_col] = df[num_col].astype(np.int32)\n    df['Country'] = np.where(df['Country'] == 'Mainland China','China',df['Country'])\n    df['PS'] = np.where(df['PS'].isnull(), df['Country'],df['PS'])\n    \n    return(df)\n \ndef check_anomalies(df):\n    count_c = df.loc[(df['Confirmed_'] <0)].shape[0]\n    count_d = df.loc[(df['Deaths_'] <0)].shape[0]\n    count_r = df.loc[(df['Recovered_'] <0)].shape[0]\n    \n    print(\"Number of negative Confirmed_: {}\\n\".format(count_c))\n    print(\"Number of negative Deaths_: {}\\n\".format(count_d))\n    print(\"Number of negative Recovered_: {}\\n\".format(count_r))\n    \ndef rebinnable_interactive_histogram(series, title,initial_bin_width=10):\n    trace = go.Histogram(\n        x=series,\n        xbins={\"size\": initial_bin_width},\n        marker_color = 'rgb(55, 83, 109)',\n    )\n    figure_widget = go.FigureWidget(\n        data=[trace],\n        layout=go.Layout(yaxis={\"title\": \"Count\"}, xaxis={\"title\": \"x\"}, bargap=0.05,\n                        title = 'Histogram of Corfirmed Case - {}'.format(title)),\n    )\n\n    bin_slider = widgets.FloatSlider(\n        value=initial_bin_width,\n        min=5,\n        max=24,\n        step=2,\n        description=\"Bin width:\",\n        readout_format=\".0f\", \n    )\n\n    histogram_object = figure_widget.data[0]\n\n    def set_bin_size(change):\n        histogram_object.xbins = {\"size\": change[\"new\"]}\n\n    bin_slider.observe(set_bin_size, names=\"value\")\n\n    output_widget = widgets.VBox([figure_widget, bin_slider])\n    return output_widget\n","719c79ba":"#path = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-'\ndf = pd.read_csv('\/kaggle\/input\/timeseries\/nCov_daily.csv',index_col = 0)","8773e6ff":"df.head(10)","1fbaa383":"df = prepare_data(df)","a8de6b03":"df.head(10)","705427d2":"df.isnull().sum()","3441b1bd":"print(\"Number of rows in the dataset: {}\".format(df.shape[0]))\nprint(\"Number of Columns in the dataset: {}\".format(df.shape[1]))","af8607c8":"sorted_df = df.sort_values(['Country','PS', 'Date'])\ncols = ['Country', 'PS']\nsorted_df['Confirmed_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1)\n                                   , sorted_df['Confirmed'].diff(), sorted_df['Confirmed'])\nsorted_df['Deaths_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1),\n                                sorted_df['Deaths'].diff(), sorted_df['Deaths'])\nsorted_df['Recovered_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1),\n                                   sorted_df['Recovered'].diff(), sorted_df['Recovered'])","3011ab96":"check_anomalies(sorted_df)","cc872fc5":"sorted_df.loc[sorted_df['Confirmed_']<0]","13c779cf":"# Queensland\ndf.loc[[651,801],'Confirmed'] = 2\n# Japan\ndf.loc[107,'Confirmed'] = 2\ndf.loc[1157,'Confirmed'] = 25","60b2871c":"sorted_df.loc[sorted_df['Recovered_']<0]","a19468ca":"# Guangxi\ndf.loc[1506,'Recovered'] = 32\n# Guizhou\ndf.loc[1057,'Recovered'] = 6\n# Hainan\ndf.loc[1733,'Recovered'] = 37\n# Heilongjiang\ndf.loc[1435,'Recovered'] = 21\n# Ningxia\ndf.loc[1294,'Recovered'] = 9\n# Shanxi\ndf.loc[849,'Recovered'] = 2","5742f8bd":"sorted_df = df.sort_values(['Country','PS', 'Date'])\ncols = ['Country', 'PS']\nsorted_df['Confirmed_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1)\n                                   , sorted_df['Confirmed'].diff(), sorted_df['Confirmed'])\nsorted_df['Deaths_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1),\n                                sorted_df['Deaths'].diff(), sorted_df['Deaths'])\nsorted_df['Recovered_'] = np.where(np.all(sorted_df.shift()[cols]==sorted_df[cols], axis=1),\n                                   sorted_df['Recovered'].diff(), sorted_df['Recovered'])","be59e49e":"check_anomalies(sorted_df)","41d927ad":"df_world = df.loc[df['Country'] != 'China'].groupby(['Country'])[['PS','Long','Lat','Confirmed']].max().reset_index()\nrebinnable_interactive_histogram(df_world.Confirmed,'Rest of the World')","ca281b04":"limits = [0,13,27,41,83,df_world.Confirmed.max()+1]\ndf_world['text'] = 'Country: ' + df_world['Country'].astype(str) + '<br>Province\/State ' + (df_world['PS']).astype(str) + '<br>Confirmed: ' + (df_world['Confirmed']).astype(str)\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = df_world.loc[(df_world['Confirmed'] < lim) & (df_world['Confirmed'] >= limits[i-1])]\n    fig.add_trace(go.Scattergeo(\n        locationmode = 'country names',\n        lon = df_sub.Long,\n        lat = df_sub.Lat,\n        text = df_sub['text'],\n        marker = dict(\n            reversescale = True,\n            size = df_sub.Confirmed*1.1,\n            color = df_sub.Confirmed,\n            colorscale = 'geyser',\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = '{0}-{1}'.format(limits[i-1],limits[i])\n    )\n                 )\n\nfig.update_layout(\n        title_text = 'Confirmed cases Rest of the World',\n        showlegend = True,\n        geo = dict(\n            scope = 'world',\n            projection_type = 'natural earth',\n            showcountries = True,\n            showocean = False,\n        )\n    )\n\nfig.show()","6c253002":"df_china = df.loc[df['Country'] == 'China'].groupby(['PS'])[['Country','Long','Lat','Confirmed']].max().reset_index()\nrebinnable_interactive_histogram(df_china.loc[df_china['PS'] != 'Hubei'].Confirmed,'China (not Hubei)',initial_bin_width=24)","1d9f5b8a":"limits = [0,100,200,300,400,500,600,1000,1500,df_china.Confirmed.max()+1]\n\ndf_china['text'] = 'Province\/State: ' + (df_china['PS']).astype(str) + '<br>Confirmed: ' + (df_china['Confirmed']).astype(str)\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    df_sub = df_china.loc[(df_china['Confirmed'] < limits[i]) & (df_china['Confirmed'] >= limits[i-1])]\n    fig.add_trace(go.Scattergeo(\n        locationmode = 'country names',\n        lon = df_sub.Long,\n        lat = df_sub.Lat,\n        text = df_sub['text'],\n        marker = dict(\n            opacity = .7,\n            size = df_sub.Confirmed\/10,\n            color = df_sub.Confirmed.max(),\n            colorscale = 'geyser',\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = '{0}-{1}'.format(limits[i-1],limits[i])\n    )\n                 )\n\nfig.update_layout(\n        title = {'text': 'Corona Virus spreading in Asia',\n                                'y':0.98,\n                                'x':0.5,\n                                'xanchor': 'center',\n                                'yanchor': 'top'},\n        showlegend = True,\n        geo = dict(\n            scope = 'asia',\n            projection = go.layout.geo.Projection(\n            type = 'kavrayskiy7',\n            scale=1.2\n            ),\n            showcountries = True,\n            \n        )\n    )\n\nfig.show()","19e00a3c":"fig = go.Figure()\nfig.add_trace(\n    go.Bar(\n        x=sorted_df.Country.loc[sorted_df['Country'] != 'China'],\n        y=sorted_df.Confirmed_.loc[sorted_df['Country'] != 'China'],\n        name='Rest of the world',\n        marker_color='rgb(55, 83, 109)',\n        text = sorted_df.Date.astype(str),\n        hovertemplate =\n        '<br><b>Country<\/b>: %{x} <br>' +\n        '<b>Confirmed Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\n\nfig.update_layout(\n    title={'text': 'Confirmed case all over the world',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(tickangle=45),\n    yaxis=dict(\n        title='',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.1,\n    bargroupgap=0.1,\n    hoverlabel_align = 'left'\n)\nfig.show()","3238be60":"fig = go.Figure()\nfig.add_trace(\n    go.Bar(\n        x=sorted_df.PS.loc[sorted_df['Country'] == 'China'],\n        y=sorted_df.Confirmed_.loc[sorted_df['Country'] == 'China'],\n        name='China',\n        marker_color='rgb(26, 118, 255)',\n        text = sorted_df.loc[sorted_df['Country'] == 'China'].Date.astype(str),\n        hovertemplate =\n        '<br><b>Province<\/b>: %{x} <br>' +\n        '<b>Confirmed Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\n\nfig.update_layout(\n    title={'text': 'Confirmed case in China',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(tickangle=45),\n    yaxis=dict(\n        title='',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15,\n    bargroupgap=0.1,\n    hoverlabel_align = 'left',\n)\nfig.show()\n\nfig2 = go.Figure()\nfig2.add_trace(\n    go.Bar(\n        x=sorted_df.PS.loc[(sorted_df['Country'] == 'China') & (sorted_df['PS'] != 'Hubei')],\n        y=sorted_df.Confirmed_.loc[(sorted_df['Country'] == 'China') & (sorted_df['PS'] != 'Hubei')],\n        name='China',\n        marker_color='rgb(26, 118, 255)',\n        text = df.Date.loc[(sorted_df['Country'] == 'China') & (sorted_df['PS'] != 'Hubei')].astype(str),\n        hovertemplate =\n        '<br><b>Province<\/b>: %{x} <br>' +\n        '<b>Confirmed Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\n\nfig2.update_layout(\n    title={'text': 'Confirmed case in China (not Hubei)',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(tickangle=45),\n    yaxis=dict(\n        title='',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15,\n    bargroupgap=0.1,\n    hoverlabel_align = 'left',\n)\nfig2.show()\n","47d9f0dc":"fig = go.Figure()\nfig.add_trace(\n    go.Bar(\n        x=sorted_df.Country.loc[sorted_df['Country'] != 'China'],\n        y=sorted_df.Deaths_.loc[sorted_df['Country'] != 'China'],\n        name='Deaths',\n        marker_color='rgb(55, 83, 109)',\n        text = sorted_df.Date.astype(str),\n        hovertemplate =\n        '<br><b>Country<\/b>: %{x} <br>' +\n        '<b>Death Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\nfig.add_trace(\n    go.Bar(\n        x=sorted_df.Country.loc[sorted_df['Country'] != 'China'],\n        y=sorted_df.Recovered_.loc[sorted_df['Country'] != 'China'],\n        name='Recovered',\n        marker_color='rgb(26, 118, 255)',\n        text = sorted_df.Date.astype(str),\n        hovertemplate =\n        '<br><b>Country<\/b>: %{x} <br>' +\n        '<b>Recovered Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\nfig.update_layout(\n    title={'text': 'Deaths & Recovered case all over the world',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(tickangle=45),\n    yaxis=dict(\n        title='',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, \n    bargroupgap=0.1,\n    hoverlabel_align = 'left',\n)\nfig.show()\n\ndf_not_hubei = sorted_df.loc[sorted_df['PS'] != 'Hubei']\n\n\nfig2 = go.Figure()\nfig2.add_trace(\n    go.Bar(\n        x=df_not_hubei.PS.loc[df_not_hubei['Country'] == 'China'],\n        y=df_not_hubei.Deaths_.loc[df_not_hubei['Country'] == 'China'],\n        name='Deaths',\n        marker_color='rgb(55, 83, 109)',\n        text = sorted_df.Date.astype(str),\n        hovertemplate =\n        '<br><b>Country<\/b>: %{x} <br>' +\n        '<b>Death Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\nfig2.add_trace(\n    go.Bar(\n        x=df_not_hubei.PS.loc[df_not_hubei['Country'] == 'China'],\n        y=df_not_hubei.Recovered_.loc[df_not_hubei['Country'] == 'China'],\n        name='Recovered',\n        marker_color='rgb(26, 118, 255)',\n        text = sorted_df.Date.astype(str),\n        hovertemplate =\n        '<br><b>Country<\/b>: %{x} <br>' +\n        '<b>Recovered Cases:<\/b> %{y}<br>' +\n        '<b>Date:<\/b> %{text}<br>'\n    )\n)\nfig2.update_layout(\n    title={'text': 'Deaths & Recovered case in China (not Hubei)',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(tickangle=45),\n    yaxis=dict(\n        title='',\n        titlefont_size=16,\n        tickfont_size=14\n        ,range = [0, df_not_hubei['Recovered'].max() + 10]\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, \n    bargroupgap=0.1 ,\n    hoverlabel_align = 'left',\n)\nfig2.show()","df7d28ba":"df_hubei = sorted_df.loc[sorted_df['PS'] == 'Hubei']\n\nfig2 = go.Figure()\n\nfig2.add_trace(\n    go.Scatter(\n        x=df_hubei.Date,\n        y=df_hubei.Deaths,\n        name='Deaths',\n        mode='lines+markers',\n        marker_color='rgb(55, 83, 109)',\n         hovertemplate =\n        '<br><b>Date<\/b>: %{x} <br>' +\n        '<b>Death Cases:<\/b> %{y}<br>'\n    )\n)\n\nfig2.add_trace(\n    go.Scatter(\n        x=df_hubei.Date,\n        y=df_hubei.Recovered,\n        name='Recovered',\n        marker_color='rgb(26, 118, 255)',\n         hovertemplate =\n        '<br><b>Date<\/b>: %{x} <br>' +\n        '<b>Recovered Cases:<\/b> %{y}<br>'\n    )\n)\n\nfig2.update_traces(\n    mode='lines+markers',\n    marker_line_width=2,\n    marker_size=5\n)\n\nfig2.update_layout(\n    title={'text': 'Deaths and Recovered in Hubei (China)',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    yaxis_zeroline=False,\n    xaxis_zeroline=False,\n    hoverlabel_align= 'left',\n)\n\nfig2.show()","f4f57390":"df_hubei['confirmed_case_world'] = df_not_hubei.groupby('Date').sum()['Confirmed'].values\n\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(\n        x = df_hubei.Date,\n        y = df_hubei.Confirmed,\n        name = 'Hubei',\n        mode = 'lines+markers',\n        marker_color = 'rgb(55,83,109)',\n        hovertemplate =\n        '<br><b>Date<\/b>: %{x} <br>' +\n        '<b>Confirmed Cases:<\/b> %{y}<br>'\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=df_hubei.Date,\n        y=df_hubei.confirmed_case_world,\n        name='Other',\n        marker_color='rgb(26, 118, 255)',\n        hovertemplate =\n        '<b>Date<\/b>: %{x} <br>' +\n        '<b>Confirmed Cases:<\/b> %{y}<br>'\n    )\n)\n\nfig.update_traces(mode='lines+markers',\n                  marker_line_width=2,\n                  marker_size=5)\nfig.update_layout(\n    title={'text': 'Confermed case in Hubei vs Rest of World',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    yaxis_zeroline=False,\n    xaxis_zeroline=False,\n    hoverlabel_align = 'left',\n)\n\nfig.show()","9e0d25b0":"from fbprophet import Prophet\nfrom fbprophet.diagnostics import cross_validation, performance_metrics\nfrom fbprophet.plot import plot_cross_validation_metric, add_changepoints_to_plot, plot_plotly","0ed922c9":"df_prophet = df_hubei[['Date','Confirmed']]\ndf_prophet.columns = ['ds','y']","12f6fc23":"m_d = Prophet(\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = True,\n    seasonality_mode = 'additive')\nm_d.fit(df_prophet)\nfuture_d = m_d.make_future_dataframe(periods=7)\nfcst_daily = m_d.predict(future_d)","d9fc0af5":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\", \n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_prophet.ds, \n  \"y\": df_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\", \n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed - Time Series Forecast - Daily Trend\", \n  \"xaxis\": {\n    \"title\": \"\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed nCov - Hubei\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","685d97c9":"m_nd = Prophet(\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = False,\n    seasonality_mode = 'additive')\nm_nd.fit(df_prophet)\nfuture_nd = m_nd.make_future_dataframe(periods=7)\nfcst_no_daily = m_nd.predict(future_nd)","a1778e39":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\", \n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_prophet.ds, \n  \"y\": df_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\", \n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed - Time Series Forecast\", \n  \"xaxis\": {\n    \"title\": \"\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed nCov - Hubei\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","4930aae1":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","621d3188":"max_date = df_prophet.ds.max()\ny_true = df_prophet.y.values\ny_pred_daily = fcst_daily.loc[fcst_daily['ds'] <= max_date].yhat.values\ny_pred_no_daily = fcst_no_daily.loc[fcst_no_daily['ds'] <= max_date].yhat.values","efedd9d0":"print('MAPE with daily seasonality: {}'.format(mean_absolute_percentage_error(y_true,y_pred_daily)))\nprint('MAPE without daily seasonality: {}'.format(mean_absolute_percentage_error(y_true,y_pred_no_daily)))","0eaa8044":"m_d = Prophet(\n    changepoint_prior_scale=20,\n    seasonality_prior_scale=20,\n    n_changepoints=19,\n    changepoint_range=0.9,\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = True,\n    seasonality_mode = 'additive')\nm_d.fit(df_prophet)\nfuture_d = m_d.make_future_dataframe(periods=7)\nfcst_daily = m_d.predict(future_d)","1b7c12bb":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\", \n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_prophet.ds, \n  \"y\": df_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\", \n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_daily.ds, \n  \"y\": fcst_daily.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed - Time Series Forecast - Daily Trend\", \n  \"xaxis\": {\n    \"title\": \"\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed nCov - Hubei\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d8850577":"m_nd = Prophet(\n    changepoint_range=0.90,\n    changepoint_prior_scale=20,\n    n_changepoints=19,\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = False,\n    seasonality_mode = 'additive')\nm_nd.fit(df_prophet)\nfuture_nd = m_nd.make_future_dataframe(periods=7)\nfcst_no_daily = m_nd.predict(future_nd)","b5829969":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\", \n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_prophet.ds, \n  \"y\": df_prophet.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\", \n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_no_daily.ds, \n  \"y\": fcst_no_daily.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Confirmed - Time Series Forecast\", \n  \"xaxis\": {\n    \"title\": \"\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Confirmed nCov - Hubei\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1464f9da":"y_true = df_prophet.y.values\ny_pred_daily = fcst_daily.loc[fcst_daily['ds'] <= max_date].yhat.values\ny_pred_no_daily = fcst_no_daily.loc[fcst_no_daily['ds'] <= max_date].yhat.values","661ff35f":"print('MAPE with daily seasonality: {}'.format(mean_absolute_percentage_error(y_true,y_pred_daily)))\nprint('MAPE without daily seasonality: {}'.format(mean_absolute_percentage_error(y_true,y_pred_no_daily)))","b148ba31":"df_ch_d = pd.DataFrame()\ndf_ch_nd = pd.DataFrame()\n\ndf_ch_d['deltas'] = m_d.params['delta'].mean(0)\ndf_ch_d['x'] = [x for x in range(19)]\n\ndf_ch_nd['deltas'] = m_nd.params['delta'].mean(0)\ndf_ch_nd['x'] = [x for x in range(19)]\n\nfig = go.Figure()\nfig2 = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=df_ch_d.x,\n        y=df_ch_d.deltas,\n        name='# of changepoints',\n        marker_color='rgb(55, 83, 109)',\n        hovertemplate =\"Change Rate: %{y: .2f}<extra><\/extra>\",\n        \n    )\n)\n\nfig.update_layout(\n    title={'text': 'Barplot of ChangePoints - Daily Model',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(\n        title = 'Potential ChangePoint'),\n    yaxis=dict(\n        title='Rate Change',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.1,\n    bargroupgap=0.1\n)\n\n\nfig2.add_trace(\n    go.Bar(\n        x=df_ch_nd.x,\n        y=df_ch_nd.deltas,\n        name='# of changepoints',\n        marker_color='rgb(55, 83, 109)',\n        hovertemplate =\"Change Rate: %{y: .2f}<extra><\/extra>\",\n    )\n)\n\nfig2.update_layout(\n    title={'text': 'Barplot of ChangePoints - Non Daily Model',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    xaxis_tickfont_size=14,\n    xaxis=dict(\n        title = 'Potential ChangePoint'),\n    yaxis=dict(\n        title='Rate Change',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.1,\n    bargroupgap=0.1\n)\n\nfig.show()\nfig2.show()","3546affa":"fig = plot_plotly(m_nd, fcst_no_daily) \nfig.update_layout(\n    title={'text': 'Prediction Confermed cases in Hubei',\n           'y':0.95,\n           'x':0.5,\n           'xanchor': 'center',\n           'yanchor': 'top'},\n    yaxis=dict(\n        title='Confirmed Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    )\n)\nfig.show()","87838616":"df_death = df_hubei[['Date','Deaths']]\ndf_death.columns = ['ds','y']","9c30c70a":"m_death = Prophet(\n    changepoint_range=0.90,\n    changepoint_prior_scale=20,\n    n_changepoints=17,\n    yearly_seasonality=False,\n    weekly_seasonality = False,\n    daily_seasonality = False,\n    seasonality_mode = 'additive')\nm_death.fit(df_death)\nfuture_death = m_death.make_future_dataframe(periods=7)\nfcst_death = m_death.predict(future_death)","8a2c09cc":"trace1 = {\n  \"fill\": None, \n  \"mode\": \"markers\",\n  \"marker_size\": 10,\n  \"name\": \"actual no. of Confirmed\", \n  \"type\": \"scatter\", \n  \"x\": df_death.ds, \n  \"y\": df_death.y\n}\ntrace2 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"upper_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_death.ds, \n  \"y\": fcst_death.yhat_upper\n}\ntrace3 = {\n  \"fill\": \"tonexty\", \n  \"line\": {\"color\": \"#57b8ff\"}, \n  \"mode\": \"lines\", \n  \"name\": \"lower_band\", \n  \"type\": \"scatter\", \n  \"x\": fcst_death.ds, \n  \"y\": fcst_death.yhat_lower\n}\ntrace4 = {\n  \"line\": {\"color\": \"#eb0e0e\"}, \n  \"mode\": \"lines+markers\",\n  \"marker_size\": 4,\n  \"name\": \"prediction\", \n  \"type\": \"scatter\", \n  \"x\": fcst_death.ds, \n  \"y\": fcst_death.yhat\n}\ndata = [trace1, trace2, trace3, trace4]\nlayout = {\n  \"title\": \"Deaths - Time Series Forecast\", \n  \"xaxis\": {\n    \"title\": \"Monthly Dates\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n  \"yaxis\": {\n    \"title\": \"Deaths nCov - Hubei\", \n    \"ticklen\": 5, \n    \"gridcolor\": \"rgb(255, 255, 255)\", \n    \"gridwidth\": 2, \n    \"zerolinewidth\": 1\n  }, \n}\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e4f40a76":"max_date = df_death.ds.max()\ny_true = df_death.y.values\ny_pred_death = fcst_death.loc[fcst_death['ds'] <= max_date].yhat.values","936d5d0c":"print('MAPE with daily seasonality: {}'.format(mean_absolute_percentage_error(y_true,y_pred_death)))","3903120a":"As it's shown in previous cells, the values are incorrect. I changed manually, by leaving the value of the previous record.<br>\nThen I created again the **sorted_df**.","dbe87b70":"Let's try to see now how the **Deaths** are predicted.","4743e41b":"Let's start by modeling a baseline model, including the daily trend. I do not think that this would be useful since the hour in the feature **Date** are not the real one in which the new confirmed case is registered.","708808ad":"It does not seem that the model are able to perfor very well.\n\nLet's see how the two models perform in terms of **Mean Absolute Percentage Error**.","11c2668e":"Now I want to check if the computation of the daily **Confirmed**, **Deaths** and **Recovered** is correct, i.e if I only get positive values.","3db89d11":"## Time Series Analysis - Prophet","0c4587e7":"The idea behind this notebook is to make an analysis on the CoronaVirus dataset using the packages **Plotly**(Data Visualisation) and **Prophet** (Prediction).","6d25649f":"Let's try to add some parameters into the both model and see if something changes, hoping for an improvement.","95322ec4":"Let's see the spread of the virus in China and in the rest of the world.","411967de":"Just some thoughts.\n\nThe **Date** feature has equi-spaced intervals, since now it does not contains the timing information.I chose to not considered that because  to the fact that the data are stored at some time during the day and it is not real time.<br>\n<br>\nMoreover, we have a small sample of data.","e8aa20c9":"You won't find the **Hubei** region in the next plot, giving the higher value with respect of the others.","177b2e56":"I did not find a method to correct automatically these errors, if you have any idea please let me know!","f73ade98":"Let's see if we can create some classes for the **Confirmed** cases, **Rest of World**.<br>\nThis is done because I want to represent on a map the cases and I need some intervals to divide the number of cases.<br>\nBy switching of the different number of bins of the widget, we can se how the distribution behave","d36d606e":"Let's try now by removing the **daily_seasonality**","dd15c395":"By moving on the plot, it is shown how many cases happened during a specific day. It's easy to notice the abundance of cases mark as **Others** that were only confirmed in $3$ days. As far as the other contries, they did not have the same behaviour.","31557b70":"### Basic Models","8ee00a9c":"Here there is the best model.","bf1499c1":"The changes made seem to have brought a significant improvement on both models.<br>\nI try randomly to change the paramenters related to **changepoints** on both models. Obviously by incrementing the **prior_scale** we can get a more flexible model, which brought the major improvements. As for the **changepoints**, there is no logical reason for the paramaters that I chose.<br>\n<br>\nAbout the number of **changepoint** to pass to the model, you can look at the plot below.","0d98d041":"### Deaths Prediction","e96923fc":"Since there were several NaN values in the last three columns, I decided to fill them with $0$, because they were the starting point of the cumulates. Moreover, I filled the **NaN** values in the **Province\/State** column, entering the Country if the value was missing and changed the value Mainland China to China for semplicity.\nFurthermore I renamed the columns and cast some columns to the correct type.","5198b310":"And now the plot of confirmed cases for the **Hubei** region. A before that magnitude of the data is really different from the other, so I decided to split it and represent only in one plot.","4ca44aa2":"Above you can see the same barplot, but this time showing the **Deaths** and **Recovered** cases.","895265a4":"By looking at the plot, it is shown the difference between the confirmed cases of *Hubei* against the rest of the world.\n\nHence I decided to use only the data related to the *Hubei* region in my **Predictive Analisys**.","83787e95":"Above you can see two barplots with only **Confirmed** case in **China**. I decided to use $2$ representation because the cases in the **Hubei** region are simply too much higher than the others.","52d2ac43":"## Exploratory Data Analysis","2f70fb6b":"Now I will look more into the details of the data","a158f56c":"Load libraries and some utility functions","14a242da":"I want to show how each day gone by the number of **Confirmed**,**Deaths** and **Recovered** changed, so I created a new Dataframe **sorted_df** in which I had $3$ columns, containing the number of cases, for each category, happened during that day.","122b057d":"I am using the data extracted from the Time series google sheet, now on github https:\/\/github.com\/CSSEGISandData\/COVID-19. This is due to the fact that I wanted to use the data with the cumulative distribution of **Confirmed**, **Deaths** and **Recovered**.\n\nI am leaving the **get_data** function, used to read the data directly from the repository on **GitHub**.\n\nIn this version of the notebook I am using the data without the time information, in order to have just $1$ sample each day, instead of having multiple records. I do not think that the time information is usefull since it is not the real time in which the case was discovered.","1a859bde":"It is pretty clear that the models perform very bad. This wa pretty obvious just by looking at the plot of the models. It seems that the model is not able to recognize the pattern of the data.","0e8faed2":"Will follow further analysis, waiting for more data.<br>\n<br>\nFeel free to leave any suggestions!!!","aa9af2f6":"Now that data seems to be clean, I will start with some Exploratory Data Analysis."}}