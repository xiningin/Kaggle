{"cell_type":{"81c68ae1":"code","444498d5":"code","b2d5e3b3":"code","b0028adf":"code","63dde4c1":"code","ee2d5c7c":"code","4ca43a6c":"code","73645222":"code","3e22b0fe":"code","d2f37216":"code","7019a1a0":"code","ed9214e3":"code","c9ac7ab0":"code","be762be5":"code","afff6e9a":"code","71deb801":"code","cedcf19d":"code","59f7d154":"code","36f98474":"code","44d62145":"code","b515f85b":"code","17b4b268":"code","658df7c0":"code","0f766d05":"code","a77b703b":"code","c487eb9d":"code","132fedf5":"markdown","a620135b":"markdown","419131a0":"markdown","92063b52":"markdown","fa11e35a":"markdown","8d250f92":"markdown","f3889b91":"markdown","8ec15984":"markdown","bc66f69b":"markdown","eb6406a1":"markdown"},"source":{"81c68ae1":"# !pip install -q findspark\n!pip install pyspark","444498d5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F","b2d5e3b3":"spark = SparkSession.builder.master(\"local[*]\").config('spark.driver.memory','15g').getOrCreate()\nspark","b0028adf":"# add dataset first\nprint(os.listdir(\".\"))\n","63dde4c1":"sdf_drive = spark.read.parquet(\"..\/input\/input_data\/drive\/*.parquet\")\n# print(sdf_drive.printSchema())\npdf_drive = sdf_drive.limit(10).toPandas()\npdf_drive.T\n# sdf_drive","ee2d5c7c":"sdf_trip = spark.read.parquet(\"..\/input\/input_data\/trip\/*.parquet\")\npdf_trip = sdf_trip.limit(10).toPandas()\npdf_trip.T","4ca43a6c":"sdf_weather = spark.read.parquet(\"..\/input\/input_data\/weather\/*.parquet\")\npdf_weather = sdf_weather.limit(10).toPandas()\npdf_weather.T","73645222":"# import pandas_profiling as ppf\n# ppf.ProfileReport(pdf_weather)\n\n","3e22b0fe":"sdf_vehicle = spark.read.csv(\"..\/input\/input_data\/vehicle.csv\", inferSchema=True, header=True)\npdf_vehicle = sdf_vehicle.limit(10).toPandas()\npdf_vehicle.T","d2f37216":"# JOIN INNER\n# sdf_join_drive_vehicle =  sdf_drive.alias(\"drive\").join(sdf_vehicle.alias(\"vehicle\"),\\\n#                                                         sdf_drive.vehicle_id == sdf_vehicle.vehicle_id ,how=\"left\") #.limit(100)\n\nsdf_join_drive_vehicle =  sdf_drive.alias(\"drive\").join(sdf_vehicle.alias(\"vehicle\"),[\"vehicle_id\"] ) #.limit(100)\n\nsdf_join_drive_vehicle.printSchema()\n# F.col(\"drive.vehicle_id\") ==  F.col(\"vehicle.vehicle_id\") \n# sdf_drive[\"vehicle_id\"].alias(\"vehicle_id_drive\") == \\\n#                                          sdf_vehicle[\"vehicle_id\"].alias(\"vehicle_id_vehicle\")","7019a1a0":"# sdf_join_drive_vehicle.show()","ed9214e3":"\nsdf_join_drive_vehicle_fillna = sdf_join_drive_vehicle.fillna(0)\n\n# formad date # new col for week_start_Date  , monday\nsdf_drive_start_of_week = sdf_join_drive_vehicle_fillna.withColumn(\"week_start_date\",  \\\n                                               (F.date_sub(F.next_day(F.from_utc_timestamp( F.col(\"datetime\"), \"America\/New_York\"),'monday'),7)))\\\n                            \n# # sdf_drive_start_of_week.show()\n# # Active horsepower - Engine load \/ 255 * Max Torque * RPM \/ 5252\n# sdf_Active_horsepower =  sdf_drive_start_of_week.withColumn(\"Active_horsepower\" ,  (F.col(\"eng_load\") \/ 255) \\\n#                                                             * (F.col(\"max_torque\") * F.col(\"rpm\"))  \/ 5252)\n# # sdf_Active_horsepower.show()\n\n# # Horsepower utilization \u2013 Active horsepower \/ Max Horsepower\n# sdf_Horsepower_utilization = sdf_Active_horsepower.withColumn(\"Horsepower_utilization\", F.col(\"Active_horsepower\") \/ F.col(\"max_horsepower\"))\n# # sdf_Horsepower_utilization.show()\n\n# # Torque Utilization - calculated as Engine load\/ 255\n# sdf_Torque_Utilization = sdf_Horsepower_utilization.withColumn(\"Torque_Utilization\", F.col(\"eng_load\") \/ 255)\n# # sdf_Torque_Utilization.show()\n\n# # RPM Utilization \u2013 RPM \/ Maximum horsepower rpm\n# sdf_RPM_Utilization = sdf_Torque_Utilization.withColumn(\"RPM_Utilization\", F.col(\"rpm\") \/ F.col(\"max_horsepower_rpm\") )\n# # pdf_RPM_Utilization = sdf_RPM_Utilization.toPandas()\n# # pdf_RPM_Utilization.T\n\n# Active_horsepower = Engine load \/ 255 * Max Torque * RPM \/ 5252\nengine = sdf_drive_start_of_week.withColumn(\"Active_horsepower\", (((sdf_drive_start_of_week.eng_load \/ 255)*(sdf_drive_start_of_week.max_torque*sdf_drive_start_of_week.rpm))\/5252))\n# Horsepower utilization \u2013 Active horsepower \/ Max Horsepower\nengine = engine.withColumn(\"Horsepower_utilization\", (engine.Active_horsepower \/ engine.max_horsepower))\n# Torque Utilization - calculated as Engine load\/ 255\nengine = engine.withColumn(\"Torque_Utilization\", (engine.eng_load \/ 255))\n# RPM Utilization \u2013 RPM \/ Maximum horsepower rpm\nengine = engine.withColumn(\"RPM_Utilization\", (engine.rpm \/ engine.max_horsepower_rpm))\nsdf_RPM_Utilization= engine","c9ac7ab0":"# sdf_RPM_Utilization.select(\"vehicle_id\",\"Active_horsepower\",\"Horsepower_utilization\",\"Torque_Utilization\",\"RPM_Utilization\").limit(10).show()","be762be5":"sdf_engine_features = sdf_RPM_Utilization.withColumn(\"ft_torque_util_60pct_s\", F.when( (F.col(\"Torque_Utilization\")  >= 0.6) \\\n                                                   &  (F.col(\"Torque_Utilization\") < 0.7) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_torque_util_70pct_s\", F.when( (F.col(\"Torque_Utilization\")  >= 0.7) \\\n                                                   &  (F.col(\"Torque_Utilization\")  < 0.8) , \\\n                                                    F.lit(1)  ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_torque_util_80pct_s\", F.when( (F.col(\"Torque_Utilization\") >= 0.8) \\\n                                                   &  (F.col(\"Torque_Utilization\") < 0.9) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_torque_util_90pct_s\", F.when( (F.col(\"Torque_Utilization\") >= 0.9) \\\n                                                   &  (F.col(\"Torque_Utilization\")  < 1) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n.withColumn(\"ft_horsepower_util_50pct_s\", F.when( (F.col(\"Horsepower_utilization\")  >= 0.5) \\\n                                                   &  (F.col(\"Horsepower_utilization\") < 0.6) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_horsepower_util_60pct_s\", F.when( (F.col(\"Horsepower_utilization\") >= 0.6) \\\n                                                   &  (F.col(\"Horsepower_utilization\") < 0.7) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_horsepower_util_70pct_s\", F.when( (F.col(\"Horsepower_utilization\")  >= 0.7) \\\n                                                   &  (F.col(\"Horsepower_utilization\") < 0.8) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_horsepower_util_80pct_s\", F.when( (F.col(\"Horsepower_utilization\")  >= 0.8) \\\n                                                   &  (F.col(\"Horsepower_utilization\") < 0.9) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n.withColumn(\"ft_rpm_util_50pct_s\", F.when( (F.col(\"RPM_Utilization\") >= 0.5) \\\n                                                   &  (F.col(\"RPM_Utilization\")  < 0.6) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n        .withColumn(\"ft_rpm_util_60pct_s\", F.when( (F.col(\"RPM_Utilization\") >= 0.6) \\\n                                                   &  (F.col(\"RPM_Utilization\") < 0.7) , \\\n                                                    F.lit(1) ).otherwise(F.lit(0)) )\\\n\n\nsdf_engine_features_total = sdf_engine_features.select(\"vehicle_id\",\"week_start_date\",\"datetime\",\\\n                            \"ft_torque_util_60pct_s\",\"ft_torque_util_70pct_s\",\"ft_torque_util_80pct_s\",\"ft_torque_util_90pct_s\",\\\n                            \"ft_horsepower_util_50pct_s\",\"ft_horsepower_util_60pct_s\",\"ft_horsepower_util_70pct_s\",\"ft_horsepower_util_80pct_s\",\\\n                            \"ft_rpm_util_50pct_s\",\"ft_rpm_util_60pct_s\")\n                                                       \n# pdf_engine_features_final = sdf_engine_features_total.toPandas()\n# pdf_engine_features_final.T","afff6e9a":"# sdf_engine_features_total.show()","71deb801":"sdf_sdf_engine_features_agg = sdf_engine_features_total.groupBy(\"vehicle_id\",\"week_start_date\")\\\n            .agg(F.sum(\"ft_torque_util_60pct_s\").alias(\"ft_torque_util_60pct_s\"), \\\n                F.sum(\"ft_torque_util_70pct_s\").alias(\"ft_torque_util_70pct_s\"), \\\n                F.sum(\"ft_torque_util_80pct_s\").alias(\"ft_torque_util_80pct_s\"), \\\n                F.sum(\"ft_torque_util_90pct_s\").alias(\"ft_torque_util_90pct_s\"),\\\n                F.sum(\"ft_horsepower_util_50pct_s\").alias(\"ft_horsepower_util_50pct_s\"), \\\n                F.min(\"ft_horsepower_util_60pct_s\").alias(\"ft_horsepower_util_60pct_s\"), \\\n                F.min(\"ft_horsepower_util_70pct_s\").alias(\"ft_horsepower_util_70pct_s\"), \\\n                F.min(\"ft_horsepower_util_80pct_s\").alias(\"ft_horsepower_util_80pct_s\"), \\\n                F.min(\"ft_rpm_util_50pct_s\").alias(\"ft_rpm_util_50pct_s\"), \\\n                F.min(\"ft_rpm_util_60pct_s\").alias(\"ft_rpm_util_60pct_s\"), )\n\nsdf_sdf_engine_features_final =  sdf_sdf_engine_features_agg.select(\"vehicle_id\",\"week_start_date\",\\\n            \"ft_torque_util_60pct_s\",\"ft_torque_util_70pct_s\",\"ft_torque_util_80pct_s\",\"ft_torque_util_90pct_s\",\\\n            \"ft_horsepower_util_50pct_s\",\"ft_horsepower_util_60pct_s\",\"ft_horsepower_util_70pct_s\",\"ft_horsepower_util_80pct_s\",\\\n            \"ft_rpm_util_50pct_s\",\"ft_rpm_util_60pct_s\")\n\n","cedcf19d":"# sdf_sdf_engine_features_final.limit(10).show()","59f7d154":"# sdf_sdf_engine_features_final.show()\nsdf_sdf_engine_features_final = sdf_sdf_engine_features_final.sort(F.col(\"vehicle_id\"),F.col(\"week_start_date\"))","36f98474":"sdf_sdf_engine_features_final = sdf_sdf_engine_features_final.withColumn(\"week_start_date\", F.date_format( F.col(\"week_start_date\") , \"yyyy-MM-dd\" ))","44d62145":"sdf_sdf_engine_features_final = sdf_sdf_engine_features_final.fillna(0)","b515f85b":"# download result\n! rm -rf engine_features\n\nsdf_sdf_engine_features_final.coalesce(1).write.csv(\"engine_features\",mode='overwrite', header=True)\n\n","17b4b268":"print(os.listdir(\"engine_features\/\"))\n","658df7c0":"# <a href=\"Your file path\">engine_features.csv<\/a>","0f766d05":"# # grp by start_of_week on : \n\n# sdf_drive_agg_week  = sdf_drive_start_of_week.groupBy(F.col(\"start_of_week\"),F.col(\"vehicle_id\"),F.col(\"trip_id\"))\\\n#                     .agg(F.avg(F.col(\"rpm\")).alias(\"avg_rpm\")\\\n#                     ,F.avg(F.col(\"eng_load\")).alias(\"avg_eng_load\")\\\n#                     ,F.avg(F.col(\"velocity\")).alias(\"avg_velocity\"))\n# #                     .show()","a77b703b":"# sdf_trip\n# sdf_trip_start_of_week = sdf_trip.withColumn(\"start_of_week\",  (F.date_sub(F.next_day(F.from_utc_timestamp( F.col(\"datetime\"), \"America\/New_York\"),'monday'),7)))\n# sdf_trip_start_of_week.show()","c487eb9d":"# sdf_weather.show() \n# sdf_weather_start_of_week = sdf_weather.withColumn(\"start_of_week\",  (F.date_sub(F.next_day(F.from_utc_timestamp( F.col(\"date\"), \"America\/New_York\"),'monday'),7)))\n# sdf_weather_start_of_week.show()","132fedf5":"# 2. Drive features(file name \u2013 drive_features.csv) -  \n\nGrain \u2013 Every trip\u2019s aggregated features at a trip id level.\n\nSorted - by trip_id in ascending manner\n\n \n\nHints:\n\nAcceleration m\/s is calculated as a change in velocity over time\nIf a vehicle keeps on accelerating continuously over a period of time, please treat them as a single acceleration or deacceleration period.","a620135b":"<a href=\"engine_features\/part-00000-f7d3929c-fdc4-49ae-ac35-b5f8895a4c0e-c000.csv\" >engine_features.csv<\/a>","419131a0":"# 1. Engine Features (file name \u2013 engine_features.csv)-\n\nGrain - every vehicle aggregated at week start date(Monday) for the complete week in YYYY-MM-DD format.\n\nSorted - by Vehicle ID and week_start_Date in ascending manner\n\n \n\nHints:\n\nConvert timezone to PST before any calculations\nAll vehicles from drive data should be in the final output even if you do not have specifications (Fill with 0 if specs are not given)\nActive horsepower - Engine load \/ 255 * Max Torque * RPM \/ 5252\nHorsepower utilization \u2013 Active horsepower \/ Max Horsepower\nTorque Utilization - calculated as Engine load\/ 255\n> RPM Utilization \u2013 RPM \/ Maximum horsepower rpm","92063b52":"## This notebook is a try to ACRTA road taxation data engineering challange by Quantumblack \n> https:\/\/datahack.analyticsvidhya.com\/contest\/quantumblack-online-hackathon\/","fa11e35a":"# 4. Vehicle Specifications \u2013 Different vehicle technical specifications which comes from the manufacturer of the car.\n\n","8d250f92":"# 3. Weather features (file name \u2013 weather_features.csv)  \n\nHere are the weather conditions for your reference and generating weather feature accordingly  \n\nGrain \u2013 Every vehicle detail should be aggregated at a week start date.\n\n \n\nSorted - by vehicle_id and week_start_date in ascending manner\n\n \n\nHint: convert time zone to PST before any calculations","f3889b91":"# 1. Drive Data (Connected car data) \u2013 \nData coming from the car-mounted devices, which provides you with the car statistics every second. This information will include \u2013 Speed, acceleration, engine temperature and other car statistics.\n\n","8ec15984":"# EDA \n# Visualize\n# requirment 1 ","bc66f69b":" # 2. Trip \u2013 \nParameters associated with location of car such as lattitude, longitude, altitude and other similar parameters\n\n","eb6406a1":"# 3. Weather \u2013 Weather condition at different latitude & longitude during different times each day.\n\n"}}