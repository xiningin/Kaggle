{"cell_type":{"6b8137e1":"code","836bbed6":"code","5413afe6":"code","53efa169":"code","4b692362":"code","b256c38e":"code","1157c523":"code","a2a0d2bd":"code","7fe9bb76":"markdown","ac61f686":"markdown"},"source":{"6b8137e1":"import numpy as np \nimport pandas as pd \nimport os\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Input, Dense, Activation,  BatchNormalization, Dropout, Concatenate, Embedding,  Flatten, Conv1D\nfrom tensorflow.keras.models import Model\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.model_selection import StratifiedKFold\nfrom tensorflow import keras\n\nfrom sklearn.metrics import roc_auc_score\nimport gc\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","836bbed6":"train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest =  pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')","5413afe6":"y = train['target']\ntrain.drop(['target','id'], axis = 1, inplace = True)\ntest.drop('id', axis = 1, inplace = True)","53efa169":"cat_col = [col for col in train.columns if train[col].nunique() < 5]\nnum_col = [col for col in train.columns if col not in cat_col]\ntrain_num = train[num_col]\ntrain_cat = train[cat_col]\ntest_num = test[num_col]\ntest_cat = test[cat_col]","4b692362":"del train, test\ngc.collect()","b256c38e":"bin_cat = KBinsDiscretizer(n_bins=300, encode='ordinal',strategy='uniform')\ntrain_num = pd.DataFrame(bin_cat.fit_transform(train_num))\ntest_num = pd.DataFrame(bin_cat.transform(test_num))\ngc.collect()","1157c523":"N_round = 1\nN_split = 5\nBATCH_SIZE=1024\nEPOCH = 100\n\ntrain_final = np.zeros((y.shape[0],1))\npred_final = np.zeros((test_num.shape[0],1))\n\n# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nwith tpu_strategy.scope():\n    \n    for i in range (0,N_round):\n\n        train_round = np.zeros((y.shape[0],1))\n\n        skf = StratifiedKFold(n_splits = N_split, random_state = 2021, shuffle = True)\n\n        for fold, (train_idx, val_idx) in enumerate(skf.split(train_num, y)):\n\n            xtrain_num = train_num.iloc[train_idx,:]\n            xtrain_cat = train_cat.iloc[train_idx,:]\n            ytrain = y[train_idx]\n\n            xval_num = train_num.iloc[val_idx,:]\n            xval_cat = train_cat.iloc[val_idx,:]\n            yval = y[val_idx]\n\n            print('\\n>>>>>> TRAINING STARTING FOR FOLD = ',fold+1)\n\n            # NN model :\n            input_num = Input(shape = (train_num.shape[1]))\n            \n            X = Embedding (input_dim=301, output_dim=8)(input_num)\n\n            X = Flatten()(X)\n            X = Dropout(0.3)(X)\n            \n            input_cat = Input(shape = (train_cat.shape[1]))\n            \n            X = Dense(64, \n                    kernel_initializer=tf.keras.initializers.GlorotNormal(), \n                    activation='swish')(X)\n            \n            W = Concatenate()([X,input_cat])\n            W = Dense(64, \n                    kernel_initializer=tf.keras.initializers.GlorotNormal(), \n                    activation='swish')(W)\n            W = Dropout(0.3)(W)\n            W = Concatenate()([W,input_cat])\n            W = Dense(64, \n                    kernel_initializer=tf.keras.initializers.GlorotNormal(), \n                    activation='swish')(W)\n            \n            W = Dropout(0.2)(W)\n            W= Dense(16, \n                    kernel_initializer=tf.keras.initializers.GlorotNormal(), \n                    activation='swish')(W)\n            \n            output1 = Dense(1, \n                    kernel_initializer=tf.keras.initializers.GlorotNormal(),\n                    activation='sigmoid', name='output2')(W)\n\n            model = Model(inputs = [input_num,input_cat],\n                   outputs = output1,\n                   name='model')\n\n            # Training control :\n            es = tf.keras.callbacks.EarlyStopping(\n            monitor='val_aucroc', min_delta=1e-06, patience=7, verbose=0,\n            mode='max', baseline=None, restore_best_weights=True)\n            plateau = tf.keras.callbacks.ReduceLROnPlateau(\n            monitor='val_aucroc', factor=0.5, patience=4, verbose=0,\n            mode='max')\n\n            # Fit :\n            METRICS=[tf.keras.metrics.AUC(name='aucroc')]\n            OPTIMIZER = keras.optimizers.Adam(learning_rate=0.001)\n            model.compile(loss='binary_crossentropy', optimizer = OPTIMIZER, metrics=METRICS) \n            model.fit(\n                    [xtrain_num,xtrain_cat],ytrain,\n                    epochs = EPOCH,\n                    batch_size = BATCH_SIZE,\n                    validation_data = ([xval_num,xval_cat],yval),\n                    verbose = 0,\n                    callbacks=[es,plateau]\n                    )\n\n            # NN prediction\n            pred = model.predict([xval_num,xval_cat])\n            train_round[val_idx] = pred\n            pred_final += model.predict([test_num,test_cat])\/(N_split * N_round)\n            print('\\nFOLD = ',fold+1,\"SCORE NN =\",roc_auc_score(yval, pred))\n\n        train_final += train_round\/N_round\n        print('\\nROUND =',i+1,\"SCORE NN =\",roc_auc_score(y, train_round)) \n","a2a0d2bd":"sub = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsub['target']=pred_final\nsub.to_csv('pred_nn.csv',index=False)","7fe9bb76":"<h1> 2 inputs : Numerical within bins and Catergorical (Onehot)","ac61f686":"![image.png](attachment:b54f1cc0-b396-4089-b820-8ba32f643df2.png)"}}