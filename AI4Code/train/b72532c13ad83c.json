{"cell_type":{"79a83feb":"code","8768eb8b":"code","34f2c2c1":"code","dd704ca8":"code","6841f3bf":"code","94651c33":"code","fb94f3c1":"code","ab45a03c":"code","ec4450ef":"code","b7e97918":"code","a8539b69":"code","36736863":"code","96c99112":"code","3a7b1842":"code","3bf6e389":"code","7d082575":"code","e634c888":"code","58630b25":"code","194c8e2a":"code","8bbf688b":"code","1b6414ff":"code","989b837f":"code","456ac16e":"code","f3c6329b":"code","c52e6c06":"code","85abbebe":"code","ae4a4391":"code","654742ce":"code","642cdf7d":"code","a9c85199":"code","13532705":"code","0970d2cd":"code","6e04dfae":"code","62ee8f9a":"code","cddcb214":"code","90c15da3":"code","477007c6":"code","18b7d25b":"code","9ab04645":"code","ee355e11":"code","d458dc44":"code","7208dbed":"code","148e4367":"code","c898819d":"code","2e9147da":"code","bb68cc87":"code","3f923e09":"markdown","c03f433c":"markdown","f1f2026f":"markdown","ecc48e35":"markdown","b411093a":"markdown","e4d36b30":"markdown","5e85fc5a":"markdown","43b92698":"markdown","c1f3528d":"markdown","338514df":"markdown","0fbd643f":"markdown","93c7d4ab":"markdown","dc07edef":"markdown","9b7aa5c6":"markdown","2acfe99c":"markdown","1a9407fe":"markdown"},"source":{"79a83feb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8768eb8b":"#load dataframe with index column as Time, set value '-' into NaN\ndf = pd.read_csv('..\/input\/all-parameter-sla01-2019\/All Param - Data SLA-01_2019.csv',delimiter =';',na_values=' -   ').set_index('Time')","34f2c2c1":"df.head(5)","dd704ca8":"#Menghilangkan nilai NaN\ndf = df.dropna(axis=1,how='all')\ndf = df.dropna(axis=0,how='any')","6841f3bf":"X1 = df.iloc[:,1:11] # Feature Selection\nX2 = df.copy().iloc[:,1:]       # Real Data\nX3 = df.copy().iloc[:,1:]       # Feature Extraction","94651c33":"from sklearn.preprocessing import MinMaxScaler","fb94f3c1":"# Fit Data ke MinMaxScaler\nMM = MinMaxScaler()\n# X1 = MM.fit_transform(X1) # Feature Selection\n# X2 = MM.fit_transform(X2) # Real Data","ab45a03c":"# Data dalam bentuk List dengan Top 10 Controlable Variables\nprint(X1)","ec4450ef":"# Data dalam bentuk List dengan semua parameter\nprint(X2)","b7e97918":"#import libraries PCA\nfrom sklearn.decomposition import PCA","a8539b69":"#Pembuatan model PCA dari Data 3\npca = PCA(n_components=4)\npca.fit(X3)\nprint(pca.explained_variance_ratio_)","36736863":"#Pembuatan list\nn = pca.explained_variance_ratio_\nx = []\nfor z in range(len(n)):\n  x.append(z+1)\n\nR = []\nc = 0\nfor y in range(len(n)):\n  G = c + n[y]\n  R.append(G)\n  c = G","96c99112":"# Pemilihan Font\nfont = {'family': 'Helvetica',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 16,\n        }","3a7b1842":"#Bar Plot rasio variansi data\nplt.style.use('dark_background')\nfig = plt.figure(figsize=(7,4),dpi=200)\nplt.bar(x, height=n, width=0.5)\nplt.plot(x,R)\nplt.xlabel('n-component',fontdict=font)\nplt.ylabel('explained variance ratio',fontdict=font)","3bf6e389":"#Singular Value dari Decomposisi PCA\npca.singular_values_","7d082575":"#Data diubah kedalam bentuk Principal Component\nX3 = pca.transform(X3)\nprint(X3)","e634c888":"Y = df.iloc[:,[0]].reset_index(drop='True')","58630b25":"# Kondisi NPHR dengan baseline value 2550\ncondition = [\n        (Y[Y.columns[0]] <= 2650),\n        (Y[Y.columns[0]] > 2650)\n        ]\n# 0 adalah Good, 1 adalah Bad\nchoices = [1,2]\nY[Y.columns[0]] = np.select(condition, choices)\nY = np.array(Y).ravel()","194c8e2a":"Y","8bbf688b":"from sklearn.svm import SVC                           # Support Vector Classification\nfrom sklearn.ensemble import RandomForestClassifier   # Random Forest\nfrom sklearn.neural_network import MLPClassifier      # BPNN Classification","1b6414ff":"# Import libraries Train Test Split Data, Metric measurement\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,f1_score","989b837f":"clf1 = SVC()\nclf2 = RandomForestClassifier()\nclf3 = MLPClassifier()","456ac16e":"X_train, X_test, y_train, y_test = train_test_split(X1, Y, test_size=0.20, random_state=0)","f3c6329b":"clf1.fit(X_train,y_train)\nclf2.fit(X_train,y_train)\nclf3.fit(X_train,y_train)","c52e6c06":"clf2.feature_importances_\n# plot data feature importances \ndf_feature_importances_1 = pd.DataFrame()\ndf_feature_importances_1['Feature'] = X_train.columns\ndf_feature_importances_1['Score'] = clf2.feature_importances_","85abbebe":"sorted_features = df_feature_importances_1.sort_values('Score', ascending=False)\nplt.figure(figsize=(12,5))\nbp = sns.barplot(x=\"Score\", y=\"Feature\", data=sorted_features[:10])\nbp.set_title('Top 10 Feature Importances on feature selection')\nbp.set_yticklabels(sorted_features[:].Feature);","ae4a4391":"y_pred1 = clf1.predict(X_test)\ny_pred2 = clf2.predict(X_test)\ny_pred3 = clf3.predict(X_test)","654742ce":"print('SVM \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred1))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred1)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred1)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred1)*100,2),'%','\\n')\nprint('Random Forest \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred2))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred2)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred2)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred2)*100,2),'%','\\n')\nprint('BPNN \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred3))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred3)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred3)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred3)*100,2),'%','\\n')","642cdf7d":"X_train, X_test, y_train, y_test = train_test_split(X2, Y, test_size=0.20, random_state=0)","a9c85199":"clf1 = SVC()\nclf2 = RandomForestClassifier()\nclf3 = MLPClassifier()","13532705":"clf1.fit(X_train,y_train)\nclf2.fit(X_train,y_train)\nclf3.fit(X_train,y_train)","0970d2cd":"clf2.feature_importances_","6e04dfae":"# plot data feature importances \ndf_feature_importances_2 = pd.DataFrame()\ndf_feature_importances_2['Feature'] = X_train.columns\ndf_feature_importances_2['Score'] = clf2.feature_importances_","62ee8f9a":"sorted_features = df_feature_importances_2.sort_values('Score', ascending=False)\nplt.figure(figsize=(12,5))\nbp = sns.barplot(x=\"Score\", y=\"Feature\", data=sorted_features[:10])\nbp.set_title('Top 10 Feature Importances on real data')\nbp.set_yticklabels(sorted_features[:10].Feature);","cddcb214":"y_pred1 = clf1.predict(X_test)\ny_pred2 = clf2.predict(X_test)\ny_pred3 = clf3.predict(X_test)","90c15da3":"print('SVM \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred1))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred1)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred1)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred1)*100,2),'%','\\n')\nprint('Random Forest \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred2))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred2)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred2)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred2)*100,2),'%','\\n')\nprint('BPNN \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred3))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred3)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred3)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred3)*100,2),'%','\\n')","477007c6":"clf1 = SVC()\nclf2 = RandomForestClassifier()\nclf3 = MLPClassifier()","18b7d25b":"X_train, X_test, y_train, y_test = train_test_split(X3, Y, test_size=0.20, random_state=0)","9ab04645":"clf1.fit(X_train,y_train)\nclf2.fit(X_train,y_train)\nclf3.fit(X_train,y_train)","ee355e11":"y_pred1 = clf1.predict(X_test)\ny_pred2 = clf2.predict(X_test)\ny_pred3 = clf3.predict(X_test)","d458dc44":"print('SVM \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred1))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred1)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred1)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred1)*100,2),'%','\\n')\nprint('Random Forest \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred2))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred2)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred2)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred2)*100,2),'%','\\n')\nprint('BPNN \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred3))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred3)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred3)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred3)*100,2),'%','\\n')","7208dbed":"import pickle","148e4367":"with open('model_pickle','wb') as f:\n    pickle.dump(clf1,f)","c898819d":"with open('model_pickle','rb') as f:\n    mp = pickle.load(f)","2e9147da":"y_pred_x = mp.predict(X_test)","bb68cc87":"print('SVM \\nConfusion Matrix \\n',confusion_matrix(y_test,y_pred_x))\nprint('Accuracy\\n', round(accuracy_score(y_test,y_pred_x)*100,2),'%')\nprint('Precision\\n', round(precision_score(y_test,y_pred_x)*100,2),'%')\nprint('f1\\n', round(f1_score(y_test,y_pred_x)*100,2),'%','\\n')","3f923e09":"## Feature Selection","c03f433c":"## **Labelling Data**","f1f2026f":"# **LOAD SCENARIO**","ecc48e35":"## Real Data","b411093a":"##**Scenario**","e4d36b30":"Feature Extraction","5e85fc5a":"# **CLASSIFY**","43b92698":"## Feature Extraction","c1f3528d":"Feature Selection","338514df":"# **Load main libraries**","0fbd643f":"Real Data","93c7d4ab":"# **Data Scalling**","dc07edef":"# **Load Data into Dataframe**","9b7aa5c6":"## **Data Cleaning**","2acfe99c":"## Scenario Selection","1a9407fe":"## **Pemilihan model klasifikasi**"}}