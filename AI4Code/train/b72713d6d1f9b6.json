{"cell_type":{"826a0c91":"code","fc1595d7":"code","9977b935":"code","bed01501":"code","8751f395":"code","a8406d5b":"code","a2781946":"code","3da2901a":"code","18068bdc":"code","978bbaec":"code","4f5f51e8":"code","262b02ca":"code","2e84f539":"code","1c4e591b":"code","b5de83ea":"code","e3e5bd7f":"code","482d5740":"code","cb4593a0":"code","2cdf4f49":"markdown","f794bcbc":"markdown","95409fc6":"markdown","664b7100":"markdown","705d6c26":"markdown","8d6f21ee":"markdown","be3077ec":"markdown","8d929ef1":"markdown","2de2ab11":"markdown","84a1d685":"markdown","bd8f0dec":"markdown","06a710bf":"markdown","6db4bb9d":"markdown","37692746":"markdown","794ef4d2":"markdown","0993e70f":"markdown","455b53cf":"markdown","3fb7836e":"markdown","1163b4e7":"markdown","9732cc12":"markdown"},"source":{"826a0c91":"#For data\nimport numpy as np\nimport pandas as pd","fc1595d7":"#The model we will use\nfrom sklearn.neighbors import KNeighborsClassifier as KNN","9977b935":"#Used for training set expansion\nfrom scipy.ndimage.interpolation import shift","bed01501":"#For image plotting\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\n#For plotting multiple digits\ndef plot_digits(instances, images_per_row=10, **options):\n    size = 28\n    images_per_row = min(len(instances), images_per_row)\n    images = [instance.reshape(size,size) for instance in instances]\n    n_rows = (len(instances) - 1) \/\/ images_per_row + 1\n    row_images = []\n    n_empty = n_rows * images_per_row - len(instances)\n    images.append(np.zeros((size, size * n_empty)))\n    for row in range(n_rows):\n        rimages = images[row * images_per_row : (row + 1) * images_per_row]\n        row_images.append(np.concatenate(rimages, axis=1))\n    image = np.concatenate(row_images, axis=0)\n    plt.imshow(image, cmap = mpl.cm.binary, **options)\n    plt.axis(\"off\")","8751f395":"#Read our data as a pandas dataframe, initially\nmnist = pd.read_csv(\"..\/input\/train.csv\")","a8406d5b":"#A look at the image data\nmnist.head()","a2781946":"#Convert the dataframe to a numpy array (matrix)\nmnist = np.array(mnist)","3da2901a":"#Split data into predictor and target variables\nX, y = mnist[:,1:], mnist[:,0]","18068bdc":"img1 = X[1000].reshape(1,784)\nimg2 = shift(X[1000].reshape(28,28), [0,5], cval=0).reshape(1,784)\nplot_digits([img1, img2], images_per_row=1)","978bbaec":"img1 = X[1001].reshape(1,784)\nimg2 = shift(X[1001].reshape(28,28), [0,-5], cval=0).reshape(1,784)\nplot_digits([img1, img2], images_per_row=1)","4f5f51e8":"img1 = X[2002].reshape(1,784)\nimg2 = shift(X[2002].reshape(28,28), [-5,0], cval=0).reshape(1,784)\nplot_digits([img1, img2], images_per_row=2)","262b02ca":"img1 = X[1234].reshape(1,784)\nimg2 = shift(X[1234].reshape(28,28), [5,0], cval=0).reshape(1,784)\nplot_digits([img1, img2], images_per_row=2)","2e84f539":"#---Shifted Sets---\n#Will contain all of the right-shifted images\nright = np.zeros(shape=(len(X),len(X[0])), dtype=\"int64\")\n#Will contain all of the left-shifted images\nleft = np.zeros(shape=(len(X),len(X[0])), dtype=\"int64\")\n#Will contain all of the up-shifted images\nup = np.zeros(shape=(len(X),len(X[0])), dtype=\"int64\")\n#Will contain all of the down-shifted images\ndown = np.zeros(shape=(len(X),len(X[0])), dtype=\"int64\")\n\n#For each image in the training set...\nfor i in range(len(X)):\n    #create right-shifted image\n    r = shift(X[i].reshape(28,28), [0,1], cval=0).reshape(1,784)\n    #create left-shifted image\n    l = shift(X[i].reshape(28,28), [0,-1], cval=0).reshape(1,784)\n    #create up-shifted image\n    u = shift(X[i].reshape(28,28), [-1,0], cval=0).reshape(1,784)\n    #create down-shifted image\n    d = shift(X[i].reshape(28,28), [1,0], cval=0).reshape(1,784)\n    \n    #Add shifted images to the shifted sets\n    left[i] = l\n    right[i] = r\n    up[i] = u\n    down[i] = d\n    \n#Append the new data:\nExp_X = np.copy(X)#original data\nExp_X = np.append(Exp_X, left, axis=0)#left-shifted\nExp_X = np.append(Exp_X, right, axis=0)#right-shifted\nExp_X = np.append(Exp_X, up, axis=0)#up-shifted\nExp_X = np.append(Exp_X, down, axis=0)#down-shifted\n\n#Target training data must also be expanded because\n#predictor training set is now bigger\nExp_y = np.copy(y)\nExp_y = np.append(Exp_y, y, axis=0)\nExp_y = np.append(Exp_y, y, axis=0)\nExp_y = np.append(Exp_y, y, axis=0)\nExp_y = np.append(Exp_y, y, axis=0)","1c4e591b":"#initialize the model with pre-selected hyper-parameters\nknn_clf = KNN(n_neighbors=4, weights=\"distance\", n_jobs=-1)","b5de83ea":"#Fit the Model on the expanded training set\nknn_clf.fit(Exp_X,Exp_y)","e3e5bd7f":"#Read test data\ntest = pd.read_csv(\"..\/input\/test.csv\")\n#convert it to numpy array format\ntest = np.array(test)","482d5740":"#predictions\npredictions = knn_clf.predict(test)","cb4593a0":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","2cdf4f49":"**In this kernel**, we train a [K-Nearest Neighbours](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm) classifier (KNN) on a training set that has been expanded through the use of [Data Augmentation](https:\/\/medium.com\/nanonets\/how-to-use-deep-learning-when-you-have-limited-data-part-2-data-augmentation-c26971dc8ced). We will go about our expansion by creating an additional four *shifted* copies of each digit found in the original training set. \n\nThe first shifted copy of each digit will be shifted 1 bit to the *right*, the second copy will be shifted 1 bit to the *left*, the third, 1 bit *up*wards, and the fourth, 1 bit *down*wards.\n\nThis will, in turn, increase the size of our training set by a factor of 5 since we still have all of the original images + 4 additional shifted copies for each image.\n\nData Augmentation is very applicable to image data and can greatly improve the performance of models that have been fit on expanded training sets.","f794bcbc":"**Preamble:**\n\n*The hyperparameters for this KNN model have been predetermined prior to the construction of this kernel.*\n\n*Also, this idea was taken directly from Aur\u00e9lien G\u00e9ron's [Hands-On Machine Learning](https:\/\/www.amazon.ca\/Hands-Machine-Learning-Scikit-Learn-TensorFlow\/dp\/1491962291) book. It's [awesome](https:\/\/www.youtube.com\/watch?v=1RiFIYwuwHM)!*","95409fc6":"## Introduction:","664b7100":"#### Down:","705d6c26":"## Data Augmentation:","8d6f21ee":"## K-Nearest Neighbours","be3077ec":"To perform our augmentations (shifts), we will employ scipy's [`shift()`](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.ndimage.shift.html) function to our images.","8d929ef1":"### Expand the Training Set","2de2ab11":"# K-Nearest Neighbours with Data Augmentation","84a1d685":"#### Left:","bd8f0dec":"![https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/52\/Map1NN.png](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/52\/Map1NN.png)","06a710bf":"# Remarks:\n\nThis was a ton of fun to make! If you found this kernel at all interesting or useful to you, please feel free to leave me a comment or an upvote!\n\nCheers!\n-Joshua","6db4bb9d":"### Examples:\n\nHere are some examples of digit images that have been shifted using the `shift` function.\n\n*(Note that, with our Augmentations, we won't be shifting our images as much as we are in these next few examples. For our Augmentations, we will only be shifting our images by 1 bit each time.)*","37692746":"## Imports:","794ef4d2":"### Fit the Model:","0993e70f":"#### Right:","455b53cf":"## Read the Data:","3fb7836e":"### Make Predictions on Test Data:","1163b4e7":"## Submit Predictions:","9732cc12":"#### Up:"}}