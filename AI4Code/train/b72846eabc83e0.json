{"cell_type":{"7e9047e0":"code","7558ad27":"code","1300a8af":"code","9b029cf3":"code","704e38ca":"code","975c89d1":"code","5660ad51":"code","e1807e4a":"code","50104c3b":"code","b2149039":"code","b5990fb2":"code","a0c9329f":"code","57c456d1":"code","18eb6090":"code","6ad66ea7":"code","b2775039":"code","b40b4dc3":"code","7e108727":"code","44485ec1":"code","ec90ee93":"code","976fd7d9":"code","a2355881":"code","1e85bed7":"code","72c6837c":"code","affdcdb6":"code","bab0ffda":"markdown","f4505174":"markdown"},"source":{"7e9047e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7558ad27":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport geopandas as geopd\nimport contextily as ctx\nfrom shapely.geometry import Point, Polygon\n\n%config InlineBackend.figure_format = 'retina'","1300a8af":"# Gebied buurtcombinaties: neighborhood combinations area\nneighborhood = geopd.read_file('..\/input\/netherlands-rent-properties\/GEBIED_BUURTCOMBINATIES_EXWATER.geojson')\nneighborhood.columns = ['neighborhood_code', 'neighborhood', 'district_code', 'area', 'geometry']\n\nneighborhood","9b029cf3":"neighborhood.plot(column='area', cmap='viridis')","704e38ca":"# kustlijn: coastline\ncoastline = geopd.read_file('..\/input\/netherlands-rent-properties\/2019_ggd_regios_kustlijn.gpkg')\n\ncoastline","975c89d1":"f, ax = plt.subplots(figsize=(8,7))\n\ncoastline.plot(ax=ax, color='lightgrey', edgecolor='black')\n# neighborhood.plot(ax=ax, column='area')","5660ad51":"props = pd.read_json('..\/input\/netherlands-rent-properties\/properties.json', lines=True)\n\nprops","e1807e4a":"json_columns = ['_id', 'crawledAt', 'firstSeenAt', 'lastSeenAt', 'detailsCrawledAt']\n\nfor c in json_columns:\n    props[c] = [list(i.items())[0][1] for i in props[c]]\n\n# Print result\nprops[json_columns]","50104c3b":"# Define columns not use for analysis\ncols_not_use = [\n'_id',\n'externalId',\n'areaRaw',\n'crawlStatus',\n'crawledAt',\n'datesPublished',\n'firstSeenAt',\n'lastSeenAt',\n'postalCode',\n'postedAgo',\n'source',\n'additionalCostsRaw',\n'depositRaw',\n'descriptionNonTranslatedRaw',\n'descriptionTranslatedRaw',\n'detailsCrawledAt',\n'pageTitle',\n'registrationCostRaw',\n'userDisplayName',\n'userId',\n'userLastLoggedOn',\n'userMemberSince',\n'userPhotoUrl',\n'additionalCostsDescription'\n]\n\nprops = props.drop(columns=cols_not_use)\n\nprops","b2149039":"geometry = [Point(xy) for xy in zip(props['longitude'], props['latitude'])]\n\ncrs = { 'init': 'epsg:4326' }\ngdf = geopd.GeoDataFrame(props, crs=crs, geometry=geometry)\n\ngdf","b5990fb2":"f, ax = plt.subplots(figsize=(9,7))\ncoastline.to_crs(epsg=3857).plot(ax=ax, color='lightgrey', edgecolor='black')\ngdf.to_crs(epsg=3857).plot(ax=ax, markersize=5)","a0c9329f":"f, ax = plt.subplots(figsize=(9,7))\ncoastline.to_crs(epsg=3857).plot(ax=ax, color='lightgrey', edgecolor='black')\nneighborhood.to_crs(epsg=3857).plot(ax=ax, column='area', cmap='plasma')\ngdf.to_crs(epsg=3857).plot(ax=ax, markersize=5)\nax.set_xlim(5.2e5, 5.7e5)\nax.set_ylim(6.85e6, 6.89e6)","57c456d1":"for index, row in coastline.to_crs(epsg=3857).iterrows():\n    # Get polygon of each city \n    area = row.geometry\n    \n    # Get points where inside the polygon \n    intersect = gdf[gdf.to_crs(epsg=3857).within(area)]\n    \n    # Count the points inside polygon e.g. 10 properties in Amsterdam, 3 in Rotterdam, etc.\n    coastline.loc[index, 'property'] = len(intersect)\n    \n    # Average of rent price\n    coastline.loc[index, 'mean_rent'] = intersect['rent'].mean()\n    \n    # Average of rent price per m2\n    coastline.loc[index, 'mean_rent_per_sqm'] = (intersect['rent'] \/ intersect['areaSqm']).mean() \n    \ncoastline = coastline.fillna(0)","18eb6090":"# Plotting function to produce map with colored polygons\ndef plot_map_with_colors(gdf, column, cmap='plasma', figsize=(9,7), \n                         title='Map of', colorbar_axes=[0.81, 0.15, 0.04, 0.7]):\n    f, ax = plt.subplots(figsize=figsize)\n    plot = gdf.to_crs(epsg=3857).plot(ax=ax, column=column, edgecolor='black', cmap=cmap)\n    ax.set_title(title, size=20, pad=10)\n    \n    vmin, vmax = gdf[column].min(), gdf[column].max()\n    \n    cax = f.add_axes(colorbar_axes) # x0, y0, x1, y1\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=vmin, vmax=vmax))\n    cbr = f.colorbar(sm, cax=cax)","6ad66ea7":"plot_map_with_colors(coastline, 'property', title='Number of Properties')","b2775039":"plot_map_with_colors(coastline, 'mean_rent_per_sqm', title='Average Price per Area [\u20ac\/m2]')","b40b4dc3":"prop_kind = gdf.propertyType.unique()\n\nfor index, row in coastline.to_crs(epsg=3857).iterrows():\n    area = row.geometry\n    intersect = gdf[gdf.to_crs(epsg=3857).within(area)]\n    # Property\n    props = intersect.propertyType.value_counts()\n    for p in prop_kind:\n        try:\n            # Number of each property type\n            num_p = props[p]\n        except:\n            # Property is not found\n            num_p = 0\n        coastline.loc[index, 'property_'+p] = num_p","7e108727":"plot_map_with_colors(coastline, 'property_Room', title='Property: Room')","44485ec1":"gdf.energyLabel.unique()","ec90ee93":"prop_kind = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n\nfor index, row in coastline.to_crs(epsg=3857).iterrows():\n    area = row.geometry\n    intersect = gdf[gdf.to_crs(epsg=3857).within(area)]\n    # Energy label\n    props = intersect.energyLabel.value_counts()\n    for p in prop_kind:\n        try:\n            # Number of each energy label\n            num_p = props[p]\n        except:\n            # Energy label is not found\n            num_p = 0\n        coastline.loc[index, 'energyLabel_'+p] = num_p","976fd7d9":"plot_map_with_colors(coastline, 'energyLabel_G', title='Energy Label: A')","a2355881":"coastline","1e85bed7":"import folium","72c6837c":"data = coastline[['naam', 'geometry', 'energyLabel_A']].set_index('naam').to_crs(epsg=4326)\ndistricts = data['geometry']\nplot_dict = data['energyLabel_A']\n\ndistricts","affdcdb6":"# Create base map\nm_6 = folium.Map(location=[52.1326, 5.2913], tiles='cartodbpositron', zoom_start=8)\n\n# Add a choropleth map to the base map\nfolium.Choropleth(geo_data=districts.__geo_interface__, \n           data=plot_dict, \n           key_on=\"feature.id\", \n           fill_color='YlGnBu', \n           legend_name='Number of properties with energy label A'\n          ).add_to(m_6)\n\n# Display map\nm_6","bab0ffda":"## Energy labels","f4505174":"## Property types"}}