{"cell_type":{"78408bdc":"code","81d3a5c3":"code","7b728c2e":"code","d98db35b":"code","0eb12039":"code","195b18ac":"code","c2b630ca":"code","924b24bf":"code","4a01b3fc":"code","9452c8f6":"code","d67c2d24":"code","a7c9a6e0":"code","c31e0f65":"code","82efffcf":"code","297dedc1":"code","17b87346":"code","9779d22d":"code","92d42ab0":"code","c8ff007a":"code","961d6cea":"code","ddbd7fcf":"code","7631031a":"code","c75aab65":"code","0d7c31b6":"code","02daaf8e":"code","fbf96390":"code","914a924e":"code","c8efbf10":"code","25187389":"code","e58e73cf":"code","1970cea3":"code","388182c1":"code","a31ef8aa":"code","9561701c":"code","f4aa69de":"code","6d323f0d":"code","4700e959":"code","39a3243c":"code","e11514e4":"code","c8cbc386":"code","11cd5e76":"code","ba2df5c5":"code","ff26e784":"code","e40c979a":"code","5a8c42c0":"code","173afddd":"code","222bb102":"code","dcc87c56":"code","776a3132":"code","d8977e8c":"code","f9827f6a":"code","afe015be":"code","befafc0a":"code","735b9c92":"code","cf257c87":"code","f90c16aa":"markdown","034ecca6":"markdown","6fdbc1d7":"markdown","1995834d":"markdown","cf169812":"markdown","130ba890":"markdown","0008e0ab":"markdown","9d5dc63c":"markdown","d07fbf80":"markdown","95bc5a37":"markdown","4d16e934":"markdown"},"source":{"78408bdc":"# \uae30\ucd08 \ud568\uc218 Import\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","81d3a5c3":"!pip install kaggle","7b728c2e":"ls -1ha kaggle.json","d98db35b":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n# Permission Warning \uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\ub3c4\ub85d \ucf54\ub4dc\ucd94\uac00\n!chmod 600 ~\/.kaggle\/kaggle.json","0eb12039":"from google.colab import drive\ndrive.mount('\/gdrive', force_remount=True)","195b18ac":"# \ub370\uc774\ud130 \uc801\uc81c\nitem_categories = pd.read_csv(\"\/gdrive\/My Drive\/kaggle1\/item_categories.csv\")\nitems=pd.read_csv('\/gdrive\/My Drive\/kaggle1\/items.csv')\nshops=pd.read_csv('\/gdrive\/My Drive\/kaggle1\/shops.csv')\ntest=pd.read_csv('\/gdrive\/My Drive\/kaggle1\/test.csv')\nsp=pd.read_csv('\/gdrive\/My Drive\/kaggle1\/sample_submission.csv')\ntrn=pd.read_csv('\/gdrive\/My Drive\/kaggle1\/sales_train_v2.csv')","c2b630ca":"# \ud14c\uc2a4\ud2b8\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub9cc \uc120\ubcc4\ntest_items_u = test.item_id.unique()\ntrn = trn[trn.item_id.isin(test_items_u)]\n\ntest_shops_u = shops.shop_id.unique()\ntrn = trn[trn.shop_id.isin(test_shops_u)]","924b24bf":"# \uc18d\uc131 \ubcc4 \ub370\uc774\ud130 \ud655\uc778\n# \uac01 \uc5f4\uc744 for \ubb38\uc744 \ud1b5\ud574\uc11c \ucd9c\ub825\nfor col in trn.columns:\n    print('{}\\n'.format(trn[col].head()))\n# '{}\\n' \uc904 \ub760\uc5b4 \uc4f0\uae30\ub97c \uc758\ubbf8.  ","4a01b3fc":"# \uc218\uce58\ud615 \ubcc0\uc218 \ud655\uc778\ud558\uae30\n\nn_cols = [col for col in trn.columns[4:6]]\ntrn[n_cols].describe()","9452c8f6":"test.head()\n# Test\uc758 \uac12\uc5d0 ID, Shop_ID, Item_ID \uac00 \uc788\uc74c\uc73c\ub85c, \uc774\ub97c \uae30\uc900\uc73c\ub85c \ud615\uc2dd\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc57c\ud568.","d67c2d24":"# Month, Item ID, Shop ID \uc138\uac1c\uc758 \uc5f4\uc744 \uc774\uc6a9\ud574, \uc778\ud48b \uac12\uc744 \ub9cc\ub4e4\uc790.\n\n# \uacf1\uc9d1\ud569\uc744 \uc774\uc6a9\ud574, \ube48 \ud615\uc2dd\uc744 \ub9cc\ub4e4\uae30\nfrom itertools import product \n\n## Shop List\uc640 Items List\ub97c \uacf1\uc9d1\ud569\ud568\nS_I_Prod = pd.DataFrame(list(product(test_shops_u, test_items_u)), columns=['shop_id','item_id']) \n\n# \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 \uc218\uc5d0 \uc54c\ub9de\uac8c, \ud2b8\ub808\uc778 \uac12 \ubcd1\ud569\ntrn_B = pd.merge(S_I_Prod , trn, on=['shop_id','item_id'], how='left') \ntrn_B['item_cnt_day'].fillna(0, inplace=True) \n\n# \uadf8\ub8f9\ud551\ntrn_grp = trn_B.groupby(['shop_id','item_id'])","a7c9a6e0":"trn_B","c31e0f65":"# \uadf8\ub8f9\ubcc4 \ud569\uacc4, \ube48\ub3c4, \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28\n\ntrn_IC = pd.DataFrame(trn_grp.agg({'item_cnt_day':['sum','count','mean','std'],'item_price':['sum', 'count','mean', 'std']})).reset_index() \n#trn_IC.columns = ['date_block_num','shop_id','item_id','item_cnt_sum','item_cnt_count','item_cnt_mean','item_cnt_std''item_price_sum','item_price_count','item_price_mean','item_price_std'] ","82efffcf":"trn_IC.columns = ['shop_id','item_id','item_cnt_sum','item_cnt_count','item_cnt_mean','item_cnt_std','item_price_sum','item_price_count','item_price_mean','item_price_std'] ","297dedc1":"trn_IC.head()","17b87346":"trn_IC['item_cnt_count'].describe()","9779d22d":"pip install googletrans   #package \uc124\uce58","92d42ab0":"# \ub7ec\uc2dc\uc544\uc5b4 \ubc88\uc5ed\uc744 \uc704\ud55c \ud568\uc218\nfrom googletrans import Translator\n\ntrans = Translator()\ndef translate(col):\n    en_list=[]\n    for word in col:\n        en = trans.translate(word, src = 'ru', dest='en')   #\ub7ec\uc2dc\uc544\uc5b4(ru) -> \uc601\uc5b4(en)\ub85c \ubc88\uc5ed\n        en_list.append(en.text)   #Tranlator().text = \ubc88\uc5ed\uacb0\uacfc\n    return en_list","c8ff007a":"# 10\uac1c\ub9cc \uc120\ubcc4\nitem_categories10 = item_categories.loc[1:10]\nshop10 = shops.loc[1:10]","961d6cea":"item_categories10['item_category_name'] = translate(item_categories10['item_category_name'])\nshop10['shop_name'] = translate(shop10['shop_name'])","ddbd7fcf":"item_categories10\n# \uce74\ud14c\uace0\ub9ac \uc774\ub984\uc758 \uccab \ub2e8\uc5b4\uac00 \ud558\uc704 \ud56d\ubaa9\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc74c\uc744 \ud655\uc778 \uac00\ub2a5","7631031a":"shop10\n# \uc0c1\uc810 \uc774\ub984\uc758 \uccab \ub2e8\uc5b4\uac00 \uc9c0\uc5ed\uba85\uc784\uc744 \ud655\uc778 \uac00\ub2a5","c75aab65":"#\uce74\ud14c\uace0\ub9ac \uadf8\ub8f9 \ucd94\uac00\ud558\uae30\n\n# \uce74\ud14c\uace0\ub9ac\uc758 \ucc98\uc74c\uc774\ub984 \uac00\uc838\uc624\uae30\nitem_grp = item_categories['item_category_name'].apply(lambda x: str(x).split(' ')[0]) \n# \ucf54\ub4dc \ud615\uc2dd\uc73c\ub85c \ubc14\uafd4 \uc5f4 \ucd94\uac00\nitem_categories['item_group'] = pd.Categorical(item_grp).codes \n# \uc544\uc774\ud0ec\uc5d0 \uadf8\ub8f9\ud45c\uae30 \ucd94\uac00\nitems = pd.merge(items, item_categories.loc[:,['item_category_id','item_group']], on=['item_category_id'], how='left') \nitems.head()\n","0d7c31b6":"# \ubcd1\ud569\uc744 \uc704\ud55c \ud14c\uc774\ube14 \uc0dd\uc131\nitems_I = items[['item_id','item_category_id','item_group']]","02daaf8e":"#Shop\uc5d0\uc11c \ub3c4\uc2dc \ucd94\uac00\ud558\uae30\n\ncity = shops.shop_name.apply(lambda x: str.replace(x, '!', '')).apply(lambda x: x.split(' ')[0]) \nshops['city'] = pd.Categorical(city).codes \nshops.head()","fbf96390":"# \ubcd1\ud569\uc744 \uc704\ud55c \ud14c\uc774\ube14 \uc0dd\uc131\nshops_I = shops[['shop_id','city']]","914a924e":"# \uc544\uc774\ud0ec \uce74\ud14c\uace0\ub9ac \ud569\uce58\uae30\ntrn_ICI = pd.merge(trn_IC, items_I, on=['item_id'])","c8efbf10":"# \uc0c1\uc810 \ub3c4\uc2dc \ud569\uce58\uae30\ntrn_ICII = pd.merge(trn_IC, shops_I, on=['shop_id'])","25187389":"trn_ICII.head()","e58e73cf":"# \uac19\uc740 \uc815\ubcf4\ub97c \ub2f4\ub294 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc0dd\uc131\n# \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 \uc218\uc5d0 \uc54c\ub9de\uac8c, \ud2b8\ub808\uc778 \uac12 \ubcd1\ud569\ntest_B = pd.merge(S_I_Prod, test, on=['shop_id','item_id'], how='left') \n","1970cea3":"test_B.head()","388182c1":"len(test)","a31ef8aa":"len(test_B)","9561701c":"#r\uacb0\uce21\uce58 \uc81c\uac70\ntest_B=test_B.dropna(axis=0)\nlen(test_B)","f4aa69de":"# \uc544\uc774\ud15c \uce74\ud14c\uace0\ub9ac \ud569\uce58\uae30\ntest_ICI = pd.merge(test_B, items_I, on=['item_id'], how= 'left')\n# \uc0c1\uc810 \ub3c4\uc2dc \ud569\uce58\uae30\ntest_ICII = pd.merge(test_B, shops_I, on=['shop_id'],how= 'left')","6d323f0d":"test_F = pd.merge(test_B, trn_IC, on=['shop_id','item_id'], how= 'left')\ntest_B['ID'].describe()","4700e959":"test_F.head()","39a3243c":"del test_F['item_cnt_count']\n#\uc608\uce21\ud574\uc57c\ud558\ub294 \uac12\uc774\ubbc0\ub85c \uc81c\uac70\ud568.\ntest_F.head()","e11514e4":"# \uacb0\uce21\uce58\ub294 0\uc73c\ub85c \ubcc0\uacbd\ntest_F.fillna(0, inplace=True)\ntest_B['ID'].describe()","c8cbc386":"# \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\ub97c \uc774\uc6a9\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier","11cd5e76":"# \ud2b8\ub9ac\uac1c\uc218 \uc120\uc815\nrfc = RandomForestClassifier(n_estimators=40)\nrfc","ba2df5c5":"# \ud559\uc2b5\uc744 \uc704\ud55c \ubcc0\uc218 \uc124\uc815\n\ntrain = trn_ICII.copy()\ntrain['item_cnt_count']","ff26e784":"train_Y = train['item_cnt_count']\ntrain_Y.fillna(0, inplace=True)\ntrain_Y.describe()","e40c979a":"train_X =trn_ICII.copy()\ntrain_X.fillna(0, inplace=True)\ntrain_X.head()\ndel train_X['item_cnt_count']\ntrain_X.head()","5a8c42c0":"# \ubaa8\ub378 \uad6c\ucd95\nrfc.fit(train_X,train_Y)","173afddd":"# \uc608\uce21\n prediction=rfc.predict(test_F)","222bb102":"test_F[\"item_cnt_month\"] = prediction","dcc87c56":"test_F.head()","776a3132":"test_F[\"item_cnt_month\"].describe()","d8977e8c":" Result = test_F[[\"ID\",\"item_cnt_month\"]]","f9827f6a":"Result.head()","afe015be":"Result.info()","befafc0a":"Result.ID = Result['ID'].astype('int')\nResult.item_cnt_month = Result.item_cnt_month.astype('int')","735b9c92":"Result.to_csv('submission.csv',index=False)","cf257c87":"#\uc81c\ucd9c\n!kaggle competitions submit -c competitive-data-science-predict-future-sales -f submission.csv -m \"Message\"","f90c16aa":"### 2.3 \ud30c\uc0dd \ubcc0\uc218 \ud569\uce58\uae30\n","034ecca6":"## 2. \ud30c\uc0dd\ubcc0\uc218 \ub9cc\ub4e4\uae30","6fdbc1d7":"### 0.2 \uad6c\uae00 \ub4dc\ub77c\uc774\ube0c \uc5f0\uacb0\n","1995834d":"### 1-1. \ub370\uc774\ud130 \ud6a8\uc728\ud654","cf169812":"## 3. \ub370\uc774\ud130 \ubaa8\ub378\ub9c1","130ba890":"### 1-2. \ub370\uc774\ud130 \uc18d\uc131\ud655\uc778","0008e0ab":"## 1. \ub370\uc774\ud130 \uc804\ucc98\ub9ac","9d5dc63c":"### 2.2 \uc544\uc774\ud0ec, \uc0c1\uc810 \uadf8\ub8f9 \ucd94\uac00","d07fbf80":"## 0. \ud658\uacbd\uad6c\uc131\n### 0.1 \ud328\ud0a4\uc9c0 Import\n","95bc5a37":"### 1-3. Input \ud615\uc2dd \ub9cc\ub4e4\uae30","4d16e934":"### 2.1 \uadf8\ub8f9 \ubcc4 \ud1b5\uacc4\ubcc0\uc218 \ucd94\uac00"}}