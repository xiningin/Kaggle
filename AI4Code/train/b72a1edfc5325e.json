{"cell_type":{"65b7cecf":"code","fec153b3":"code","705b4387":"code","d4af6684":"code","1461a85e":"code","af62c86d":"code","f548d092":"code","20ac1862":"code","9821c194":"code","6eefd77e":"code","940ffb64":"code","96255fc6":"code","6398c6e0":"code","8cb6cd26":"code","bb0b414a":"code","d4fb0c9e":"code","9c902fa3":"code","8d896eed":"code","44d5f92b":"code","adae3d88":"code","e4969bdd":"code","a3464e3d":"code","0702b73b":"code","c71c29ae":"code","69740995":"code","95cc44e7":"code","4b07c29a":"code","c937e576":"code","bf59594f":"code","87f83b39":"code","63cc747a":"code","722558cf":"code","ab3ff247":"code","a0a69d45":"code","996138da":"code","7daefef2":"code","319ff4b6":"code","e930bfe7":"code","4e6c2c9e":"code","d601fb6b":"code","a150f043":"code","dea764db":"code","03a94926":"code","3edf4811":"code","b43be1da":"code","2988d19b":"code","42207455":"code","fce65bb7":"code","027b8240":"code","235bc128":"code","78a0a1b6":"code","f201d2c1":"code","e3eecb96":"code","4292165b":"code","385aaa26":"code","2409ba62":"code","4245b647":"code","fcaf33c6":"code","9e63c307":"code","85b71854":"code","3cc33e77":"code","5f107877":"code","e4df9c4d":"code","59e9fe67":"code","73611ffa":"code","9679e55a":"code","dc82014d":"markdown","b28125c5":"markdown","26427084":"markdown","8be05917":"markdown","ceea7558":"markdown","35e8b086":"markdown","561a4fdd":"markdown","03a9b057":"markdown","172bd26e":"markdown","d60606a0":"markdown","5fc0829b":"markdown","0e41ec44":"markdown","310ea71f":"markdown","1d830c53":"markdown","4783e1ae":"markdown","0f912bda":"markdown","c45c7695":"markdown","cfccff84":"markdown","029b3891":"markdown","d706e7c8":"markdown","7d778e22":"markdown","2dc3c09d":"markdown","961626a0":"markdown","50959e87":"markdown","20e6d17b":"markdown","54a774c0":"markdown","948e5c11":"markdown","ed524e22":"markdown","085bfab7":"markdown","9948d8d3":"markdown","fa403128":"markdown","95c34573":"markdown","35b1382d":"markdown","a444980b":"markdown","078753f1":"markdown","5d99ad81":"markdown","7e995f31":"markdown","5510e4d3":"markdown","78be1aa6":"markdown","bc8991c2":"markdown","b8358e6a":"markdown","8c3128af":"markdown","857df3a6":"markdown","7109490e":"markdown","c38b7375":"markdown","239cf5e1":"markdown","4be39570":"markdown","d1313b68":"markdown","58bf2be2":"markdown","b3fe6a5d":"markdown","7af9c81d":"markdown","067652f7":"markdown","d6e7201b":"markdown","36a27193":"markdown","ae16a766":"markdown","6d8243af":"markdown"},"source":{"65b7cecf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec \nfrom scipy import stats\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.simplefilter(action='ignore')\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\nimport math\nimport sklearn.model_selection as ms\nimport sklearn.metrics as sklm\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fec153b3":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","705b4387":"test_id = test['Id']","d4af6684":"df = train","1461a85e":"df.head(5)","af62c86d":"df.drop('Id', axis = 1, inplace = True)\ntest.drop('Id', axis = 1, inplace = True)","f548d092":"train = df","20ac1862":"print(f\"Number of rows and number of columns in the train dataset are {train.shape[0]} and {train.shape[1]}\")\nprint(f\"Number of rows and number of columns in the test dataset are {test.shape[0]} and {test.shape[1]}\")","9821c194":"def three_chart_plot(df, feature):\n    fig = plt.figure(constrained_layout = True, figsize = (12, 8))\n    grid = gridspec.GridSpec(ncols = 3, nrows = 3, figure = fig)\n    \n    ax1 = fig.add_subplot(grid[0, :2])\n    ax1.set_title('Histogram')\n    \n    sns.distplot(df.loc[:, feature], norm_hist = True, ax = ax1)\n    plt.axvline(x = df[feature].mean(), c = 'red')\n    plt.axvline(x = df[feature].median(), c = 'green')\n    \n    ax2 = fig.add_subplot(grid[1, :2])\n    ax2.set_title('QQ_plot')\n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    sns.boxplot(df.loc[:,feature], orient = 'v', ax = ax3 )\n    \nthree_chart_plot(df, 'SalePrice')","6eefd77e":"from scipy.stats import skew\nprint(\"Skewness of the SalesPrice is\", df['SalePrice'].skew())","940ffb64":"import missingno as msno\n%matplotlib inline\nmsno.matrix(train)","96255fc6":"msno.matrix(test)","6398c6e0":"def null_table(data):\n    \"\"\"\n    A function which returns the number and percentage of null values in the given dataset.\n    \"\"\"\n    indices = data.isnull().sum().index\n    values = data.isnull().sum().values\n    percentages = []\n    for i in indices:\n        percentages.append((data[i].isnull().sum() \/ data[i].shape[0]) * 100)\n    d = {'Columns' : indices, 'Count of Null Values' : values, 'Approximate Percentage of Null Values' : percentages}\n    # data = dict(zip(indices, percentages))\n    null_frame = pd.DataFrame(data = d)\n    return null_frame","8cb6cd26":"null_frame_train = null_table(df)\nnull_frame_train.sort_values(by = 'Approximate Percentage of Null Values').tail(10)","bb0b414a":"null_frame_test = null_table(test)\nnull_frame_test.sort_values(by = 'Approximate Percentage of Null Values').tail(10)","d4fb0c9e":"na = train.shape[0]\nnb = test.shape[0]\ny_train = train['SalePrice'].to_frame()\n# Combine train and test sets\ntotal = pd.concat((train, test), sort = False).reset_index(drop = True)\n# Drop the target \"SalePrice\" and Id columns\ntotal.drop(['SalePrice'], axis = 1, inplace = True)\nprint(f\"Total size is {total.shape}\")","9c902fa3":"def msv_1(data, thresh = 20, color = 'black', edgecolor = 'black', height = 3, width = 15):\n    \n    plt.figure(figsize = (width, height))\n    percentage = (data.isnull().mean()) * 100\n    percentage.sort_values(ascending = False).plot.bar(color = color, edgecolor = edgecolor)\n    plt.axhline(y = thresh, color = 'r', linestyle = '-')\n    \n    plt.title('Missing values percentage per column', fontsize=20, weight='bold' )\n    \n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh+12.5, f'Columns with more than {thresh}% missing values', fontsize=12, color='crimson',\n         ha='left' ,va='top')\n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh - 5, f'Columns with less than {thresh}% missing values', fontsize=12, color='green',\n         ha='left' ,va='top')\n    plt.xlabel('Columns', size=15, weight='bold')\n    plt.ylabel('Missing values percentage')\n    plt.yticks(weight ='bold')\n    \n    return plt.show()","8d896eed":"msv_1(total, 20, color=sns.color_palette('Reds',15))","44d5f92b":"category_var = df.select_dtypes(include = 'object')\nnum_var = df.select_dtypes(exclude = 'object')\n\nprint(\"Number of categorical features are: \", category_var.shape[1])\nprint(\"Number of numerical features are: \", num_var.shape[1])","adae3d88":"num = df.select_dtypes(exclude = 'object')\ncorr_num = num.corr()\n\nf, ax = plt.subplots(figsize = (17, 1))\n\nsns.heatmap(corr_num.sort_values(by = ['SalePrice'], ascending = False).head(1), cmap='PuRd_r')\n\nplt.title('Correlation of Numerical Features with the Target', weight = 'bold', fontsize = 18)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold', color='dodgerblue', rotation=0)\n\nplt.show()","e4969bdd":"correlation = df.corr()['SalePrice'].sort_values(ascending = False).to_frame().head(10)\n\ncmap = sns.light_palette(\"cyan\", as_cmap = True)\n\ns = correlation.style.background_gradient(cmap = cmap)\n\ns","a3464e3d":"plt.figure(figsize = ((15, 6)))\nplt.scatter(x = 'GrLivArea', y = 'SalePrice', data = df, color='crimson', alpha=0.4)\nplt.title('Relationship between Living Area and Sale Price', weight = 'bold', fontsize = 10)\nplt.xlabel('Area of the house', weight = 'bold')\nplt.ylabel('Sale Price', weight = 'bold')\nplt.show()","0702b73b":"train = train[train['GrLivArea'] < 4500]\nprevious_train = df\ndf = train","c71c29ae":"plt.figure(figsize = ((15, 6)))\nplt.scatter(x = 'GrLivArea', y = 'SalePrice', data = df, color='crimson', alpha=0.4)\nplt.title('Relationship between Living Area and Sale Price', weight = 'bold', fontsize = 10)\nplt.xlabel('Area of the house', weight = 'bold')\nplt.ylabel('Sale Price', weight = 'bold')\nplt.show()","69740995":"plt.figure(figsize = ((15, 6)))\nplt.scatter(x = 'GarageArea', y = 'SalePrice', data = df, color='crimson', alpha=0.4)\nplt.title('Relationship between Garage Area and Sale Price', weight = 'bold', fontsize = 10)\nplt.xlabel('Area of the Garage', weight = 'bold')\nplt.ylabel('Sale Price', weight = 'bold')\nplt.show()","95cc44e7":"plt.figure(figsize = ((15, 6)))\nplt.scatter(x = 'TotalBsmtSF', y = 'SalePrice', data = df, color = 'crimson', alpha = 0.4)\nplt.title('Relationship between Total Basement Area and Sale Price', weight = 'bold', fontsize = 10)\nplt.xlabel('Total Basement Area (in Square Feets)', weight = 'bold')\nplt.ylabel('Sale Price', weight = 'bold')\nplt.show()","4b07c29a":"plt.figure(figsize = ((15, 6)))\nplt.scatter(x = 'TotalBsmtSF', y = 'SalePrice', data = df, color = 'crimson', alpha = 0.4)\nplt.title('Relationship between Total Basement Area and Sale Price', weight = 'bold', fontsize = 10)\nplt.xlabel('Total Basement Area(in Square Feets)', weight = 'bold')\nplt.ylabel('Sale Price', weight = 'bold')\nplt.show()","c937e576":"## Scatter plotting for SalePrice and GrLivArea.\nfig, (ax1, ax2) = plt.subplots(figsize = (12, 8), ncols = 2,sharey = False)\n \nsns.scatterplot(x = df['GrLivArea'], y = df['SalePrice'],  ax = ax1)\n## Putting a regression line. \nsns.regplot(x = df['GrLivArea'], y = df['SalePrice'], ax = ax1)\n\nsns.scatterplot(x = df['MasVnrArea'],y = df['SalePrice'], ax = ax2)\n## regression line for MasVnrArea and SalePrice. \nsns.regplot(x = df['MasVnrArea'], y = df['SalePrice'], ax=ax2)","bf59594f":"plt.subplots(figsize = (12,8))\nsns.residplot(df['GrLivArea'], df['SalePrice'])","87f83b39":"three_chart_plot(df, 'SalePrice')","63cc747a":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ndf = train\nthree_chart_plot(df, 'SalePrice')","722558cf":"fig, (ax1, ax2) = plt.subplots(figsize = (15, 6),\n                              ncols = 2,\n                              sharey = False,\n                              sharex = False)\n\nsns.residplot(previous_train['GrLivArea'], previous_train['SalePrice'], ax = ax1)\nsns.residplot(df['GrLivArea'], df['SalePrice'], ax = ax2)","ab3ff247":"plt.figure(figsize = ((15, 10)))\ndf.boxplot(by = 'OverallQual', column = 'SalePrice')\nplt.show()","a0a69d45":"def horizontal_plot(data, column_name, color, plot_title):\n    \n    \"\"\"\n    A function that plots a horizontal bar graph for the given column name\n    \"\"\"\n    \n    fig, ax = plt.subplots(figsize = (9, 6))\n    \n    title_cnt = data[column_name].value_counts().sort_values(ascending = False).reset_index()\n\n    mn = ax.barh(title_cnt.iloc[:, 0], title_cnt.iloc[:, 1], edgecolor = 'black', color =\n                sns.color_palette(color, len(title_cnt)))\n\n    for s in ['top','bottom','left','right']:\n        ax.spines[s].set_visible(False)\n\n    # Remove x,y Ticks\n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none')\n\n    # Add padding between axes and labels\n    ax.xaxis.set_tick_params(pad=5)\n    ax.yaxis.set_tick_params(pad=10)\n\n    # Add x,y gridlines\n    ax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n    # Show top values \n    ax.invert_yaxis()\n\n    ax.set_title(plot_title,weight='bold',loc='center', pad=10, fontsize=16)\n    \n    ax.set_xlabel('Count', weight='bold')\n\n    for i in ax.patches:\n        ax.text(i.get_width() + 1.0, i.get_y() + 0.5, str(round((i.get_width()), 2)),\n                fontsize=10, fontweight='bold', color='grey')\n\n    plt.yticks(weight='bold')\n    plt.xticks(weight='bold')\n\n    plt.show()","996138da":"horizontal_plot(df, 'Neighborhood', 'Reds', 'Most frequent neighborhoods')","7daefef2":"horizontal_plot(df, 'BldgType', 'Greens', 'Building type: Type of dwelling')","319ff4b6":"horizontal_plot(df, 'GarageCond', 'Blues', 'Garage Condition')","e930bfe7":"horizontal_plot(df, 'GarageType', 'terrain', 'Garage Type')","4e6c2c9e":"y = df['SalePrice'].reset_index(drop = True)\ntrain_features = df.drop('SalePrice', axis = 1)\ntest_features = test.copy()\n\nfeatures = pd.concat((train_features, test_features)).reset_index(drop = True)","d601fb6b":"features.shape","a150f043":"features['MSSubClass'] = features['MSSubClass'].apply(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)","dea764db":"three_chart_plot(df, 'SalePrice')","03a94926":"null_table(features).sort_values(by = 'Approximate Percentage of Null Values').tail(10)","3edf4811":"msv_1(features, 80, color = sns.color_palette('Reds',15))","b43be1da":"features = features.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence'], axis = 1)\nfeatures.shape","2988d19b":"msv_1(features, 80, color = sns.color_palette('Reds',15))","42207455":"description = open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\", \"r\")\nprint(description.read())","fce65bb7":"def filling_null(features):\n    \n    # In the description for 'Functional Feature', it is given that Typ refers to the Typical Functionality\n    # We will replace null values in the 'Functional' feature with 'Typ'\n    \n    features['Functional'] = features['Functional'].fillna('Typ')\n    \n    # Replace the null values in the below columns with their mode. We are replacing with mode because\n    # all of these features are categorical variable, we can't take the mean nor the median.\n    \n    features['Electrical'] = features['Electrical'].fillna(features['Electrical'].mode()[0])\n    \n    features['KitchenQual'] = features['KitchenQual'].fillna(features['KitchenQual'].mode()[0])\n    \n    features['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0])\n    \n    features['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\n\n    features['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])\n    \n    # In order to fill the null values for MSZoing, we will take into account the MSSubClass featue.\n    # We are doing so because the type of dwelling in a given area largely affects the zone of the area.\n    \n    features['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n    \n    # In order to fill the null values for LotFrontage(Linear feet of street connected to property) \n    # we will fill it with median of the values grouped by Neighborhood.\n    \n    features['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n    \n    # As mentioned before that the 'NA' value in many columns represent the absence of that feature for\n    # a particular house, we will replace those null values with None.\n    # 'None' for categorical feature and 0 for numerical feature.\n    \n    cat_features = features.select_dtypes(include = 'object').columns\n    num_features = features.select_dtypes(exclude = 'object').columns\n    \n    features[cat_features] = features[cat_features].fillna('None')\n    features[num_features] = features[num_features].fillna(0)\n        \n    return features","027b8240":"features = filling_null(features)\nfeatures.shape","235bc128":"features.isnull().sum().sum()","78a0a1b6":"def new_features(features):\n    \n    features['HasPool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n    features['Has2ndFloor'] = features['2ndFlrSF'].apply(lambda x : 1 if x > 0 else 0)\n    features['HasGarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n    features['HasBsmt'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n    features['HasFireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n    \n    # Adding total sqfootage features \n    # In order to get the total area of the house we have to add the basement area, 1st floor area and 2nd floor area.\n    \n    features['TotalSF'] = features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n    \n    # Total number of bathrooms = number of full bathrooms + 0.5 * number of half bathrooms\n    # + number of bathrooms in basement + 0.5 * number of half bathrooms in the basement.\n    \n    features['Total_Bathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                                   features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n    \n    features['Total_porch_sf'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                                  features['EnclosedPorch'] + features['ScreenPorch'])\n\n    # Add years since remodel\n    features['YearsSinceRemodel'] = features['YrSold'].astype(int) - features['YearRemodAdd'].astype(int)\n\n    return features","f201d2c1":"features = new_features(features)\nfeatures.shape","e3eecb96":"num_features = features.select_dtypes(exclude = 'object').columns\n\nskewed_features = features[num_features].apply(lambda x : x.skew()).sort_values(ascending = False)\nskew_features = pd.DataFrame({'Skew Value' : skewed_features})\n\nskew_features.head(10)","4292165b":"def fix_skew(features):\n    \n    from scipy.special import boxcox1p\n    from scipy.stats import boxcox_normmax\n    \n    ## Getting all the data that are not of \"object\" type. \n    numerical_columns = features.select_dtypes(exclude = 'object').columns\n\n    # Check the skew of all numerical features\n    skewed_features = features[numerical_columns].apply(lambda x: x.skew()).sort_values(ascending=False)\n    \n    high_skew = skewed_features[abs(skewed_features) > 0.5]\n    skewed_features = high_skew.index\n\n    # Perform the Box-Cox transformation\n    for column in skewed_features:\n        features[column] = boxcox1p(features[column], boxcox_normmax(features[column] + 1))\n        \n    return features","385aaa26":"features = fix_skew(features)\nfeatures.head()","2409ba62":"features = pd.get_dummies(features).reset_index(drop=True)\nfeatures.shape","4245b647":"X = features.iloc[:len(y), :]\ntest = features.iloc[len(y):, :]","fcaf33c6":"X.shape, test.shape, y.shape","9e63c307":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","85b71854":"from sklearn.metrics import mean_squared_error, mean_absolute_error","3cc33e77":"def evaluation(model, x_train_std, y_train, x_test, y_test, train = True):\n    if train == True:\n        pred = model.predict(x_train_std)\n        \n        print(\"Train Result:\\n================================================\")\n        print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_train, pred))}\")\n        print(\"_______________________________________________\")\n        print(f\"Mean Squared Error: {mean_squared_error(y_train, pred)}\")\n        print(\"_______________________________________________\")\n        print(f\"Mean Absolute Error: \\n{mean_absolute_error(y_train, pred)}\")\n        print(\"_______________________________________________\")\n        \n    print()\n    \n    if train == False:\n        pred = model.predict(x_test)\n        \n        print(\"Test Result:\\n================================================\")\n        print(f\"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test, pred))}\")\n        print(\"_______________________________________________\")\n        print(f\"Mean Squared Error: {mean_squared_error(y_test, pred)}\")\n        print(\"_______________________________________________\")\n        print(f\"Mean Absolute Error: \\n{mean_absolute_error(y_test, pred)}\")\n        print(\"_______________________________________________\")","5f107877":"from sklearn.linear_model import Lasso\nls = Lasso(alpha = 0.1)\nls.fit(X_train, y_train)\n\nevaluation(ls, X_train, y_train, X_test, y_test, True)\nevaluation(ls, X_train, y_train, X_test, y_test, False)","e4df9c4d":"from sklearn.linear_model import Ridge\nridge = Ridge(alpha = 0.1)\nridge.fit(X_train, y_train)\n\nevaluation(ridge, X_train, y_train, X_test, y_test, True)\nevaluation(ridge, X_train, y_train, X_test, y_test, False)","59e9fe67":"import xgboost as xgb\nxgb_regress = xgb.XGBRegressor(n_estimators = 1000, learning_rate = 0.1)\nxgb_regress.fit(X_train, y_train)\n\nevaluation(xgb_regress, X_train, y_train, X_test, y_test, True)\nevaluation(xgb_regress, X_train, y_train, X_test, y_test, False)","73611ffa":"test_pred = ridge.predict(test)\nsubmission = pd.DataFrame(test_id, columns = ['Id'])\ntest_pred = np.expm1(test_pred)\nsubmission['SalePrice'] = test_pred \nsubmission.head()","9679e55a":"submission.to_csv(\"result_ridge.csv\", index = False, header = True)","dc82014d":"### Ridge Regression","b28125c5":"Skewness refers to the amount of asymmetry in the given feature or in other words amount of distortions from the normal distribution. \n\nHere we can observe that the value of skewness is quite high which means that there is a large amount of asymmetry. \n\nThe peak of the histogram represents the mode i.e the price for which maximum number of houses were sold.\n\nWhat kind of skewness is present in the given case?\n\nAs the mean of the feature is greater than the median which is greater than the mode and the line is flat towards the right in the histogram, the given feature is **Positively Skewed**. Most of the houses were sold less than the average price.\n","26427084":"We can observe that those two values have been successfully dropped.","8be05917":"We have already normalized the target variable in the above section. Let's plot it again","ceea7558":"# NULL Values","35e8b086":"We can observe that the relationship between Sales Price and GrLivArea is much more linear than the relationship between Sales Price and MasVnrArea.\n\nLet's look at the residual plot for independent variable GrLivArea and our target variable SalePrice. \n\nA residual value is a measure of how much a regression line vertically misses a data point. Regression lines are the best fit of a set of data. You can think of the lines as averages; a few data points will fit the line and others will miss. A residual plot has the Residual Values on the vertical axis; the horizontal axis displays the independent variable.","561a4fdd":"Some of the variables given in the description should be of string data type but instead they are stored as numerical data type. First let's change them into string data type","03a9b057":"Let's combine both the train and test dataset and analyze the null values","172bd26e":"Now let's create some new features. ","d60606a0":"We must observe here that **NA has a different meaning**. Here we can not impute or remove those rows having NA. For example if one of the values for Alley is NA, it means that home has no Alley or if the value of GarageType is NA it means that particular home has no Garage. That's why we need to take into account these values as it can affect the final prices of the house.","5fc0829b":"### Exploring Numerical Variables","0e41ec44":"### Lasso Regression","310ea71f":"**Hope you liked the notebook, any suggestions would be highly appreciated.**\n\n**I will continue experimenting in future versions of the notebook.**\n\n**Please upvote if you liked it.**\n","1d830c53":"Now let's make sure that the target variable follows a normal distribution. In order to make a feature follow normal distribution, we will perform log transformation.","4783e1ae":"### XGB Regressor","0f912bda":"We can observe that the SalesPrice feature now follows a normal distibution as the Histogram resembles bell-shape and the QQ-plot also overlaps with the red line. Let's again plot the scatter plot for GrLivArea and SalePrice to see whether Heteroscedasticity was removed.","c45c7695":"There are 5 columns having more than 20 percent null values. We will deal with these values later.","cfccff84":"First let's combine the train and test features.","029b3891":"From the above table, we can conclude that better the overall quality of the house, more will be the price of the house which is also true in real life. Same is true for \nthe living area i.e as the area increases, more will be the Sale Price.\n\nLet's plot a graph to examine the relationship between GrLivArea and the SalePrice","d706e7c8":"# Feature Engineering","7d778e22":"Reading through the description of the features is very important, otherwise the above points can't be concluded.","2dc3c09d":"Most of the houses have Typically Average Garage Condition. Only couple of houses have Excellent Garage Condition.","961626a0":"We can see that the scatterplot on the left had heteroscedasticity(funnel like shape) but after applying log transformation to the feature, it was removed and now it's Homoscedastic.","50959e87":"There is an amazing library called missingno which helps us to visualize the number of Null values present in each feature.","20e6d17b":"# House Price EDA and Prediction","54a774c0":"**In this notebook we are going to predict the price of the houses which depends on many factors. This dataset is very useful for those people who have just finished learning basic regression techniques on a limited number of features and want to dive more into regression.**\n\n**This notebook has been made after going through a lot of notebooks submitted by some pretty experienced and amazing people. I learnt a lot myself while i was making this notebook.**\n\n**Let's start exploring the dataset and please upvote if you like it.**","948e5c11":"#### GrLivArea","ed524e22":"Before we move forward we need to understand the assumptions of linear regression:\n* Linearity\n* Homoscedasticity\n* No or little Multicollinearity\n* Independence of Error\n\nSince we fit a linear model, we assume that the relationship is linear, and the errors, or residuals, are pure random fluctuations around the true line. We expect that the variability in the dependent variable doesn't increase as the value of the independent increases, which is the assumptions of equal variance, also known as Homoscedasticity. We also assume that the observations are independent of one another(No Multicollinearity), and a correlation between sequential observations or auto-correlation is not there.\n\nNow, these assumptions are prone to happen altogether. In other words, if we see one of these assumptions in the dataset, it's more likely that we may come across with others mentioned above. Therefore, we can find and fix various assumptions with a few unique techniques.\n\nIn order to discover the linearity let's plot scatter plots for GrLivArea and MasVnrArea","085bfab7":"Now there are 0 null values in the given dataset","9948d8d3":"#### 1st Floor Area","fa403128":"### Exploring Categorical Variables","95c34573":"Let's analyse the skewness of the numerical features.","35b1382d":"There is 1 column less in the test dataset because we need to predict the price of the houses for the test dataset","a444980b":"We can see that there are 4 features having more than 80% missing values. We will drop these 4 features.","078753f1":"Now none of the features have above 80% missing values.","5d99ad81":"There's is quite a lot of asymmetry in the above features. We will need to fix the skewness","7e995f31":"Ideally, if the assumptions are met, the residuals will be randomly scattered around the centerline of zero with no apparent pattern. The residual will look like an unstructured cloud of points centered around zero. However, our residual plot is anything but an unstructured cloud of points. Even though it seems like there is a linear relationship between the response variable and predictor variable, the residual plot looks more like a funnel. \n\nThe error plot shows that as GrLivArea value increases, the variance also increases, which is the characteristics known as Heteroscedasticity. The linear regression analysis requires the dependent variable to be multivariate normally distributed. A histogram, box plot, or a Q-Q-Plot can check if the target variable is normally distributed. \n\nLet's plot the three graphs again for the target feature.","5510e4d3":"# Training and Testing Machine Learning Models","78be1aa6":"# Feature Creation","bc8991c2":"# SalePrice Feature Analysis","b8358e6a":"Let' see the null values statistics of the combined dataset.","8c3128af":"We have added certain features which are quite intuitive and are taken into consideration in real life too while buying the house. Like what's the total area in square feet of the house or how many bathrooms are there in the house. We could also look for the availability of swimming pool, garage, fireplace and basement in the house. That's why I have added such features in the dataset.","857df3a6":"# Numerical and Categorical Variables","7109490e":"Most of the houses have Attached Garages and only 19 have Garages in the Basement.","c38b7375":"Just by going through the plot we can see that there are a lot of NULL values","239cf5e1":"Linear Regression indicates significant relationships between the dependent variable and the independent variable. It assumes that there is a linear relationship between the independent variables and the dependent variable but this is not always the case in real life. There are very less scenarios where this assumption holds true. Multiple Regression also suffers from multi-collinearity, auto-correlation, and heteroskedasticity.\n\nThe interpretation of the linear coefficient is that it represents the mean change in the dependent variable for 1 unit change in the independent variable when all the other independent variables are held constant.\n\nNow suppose that there are two correlated independent variables (A and B) and we are aiming to find the right coefficient for these independent variables. When the coefficient for A is calculated, will that coefficient be accurate? No, it won\u2019t be right because changes in A are associated with shifts in B, and as we have already discussed that all the other variables need to be held constant, B can\u2019t be held as a constant because A and B are correlated. This is known as Multicollinearity and it is one of the disadvantages of Linear Regression.\n\nIn order to solve this problem, we use various regularization techniques (l1, l2 etc) or other kind of regression techniuques like Elastic Net Regression, Lasso and Ridge Regression which automatically takes care of multicollinearity.\n\nCheck this [blog](https:\/\/medium.com\/gdg-vit\/overcoming-the-drawbacks-of-linear-regression-497fffcdd2d8) for better understanding","4be39570":"#### Garage Area","d1313b68":"Before moving forward let's see the correlation of the numerical features with the target variable","58bf2be2":"As the quality increases, price of the houses also increase","b3fe6a5d":"#### Total Basement Area","7af9c81d":"# Submission","067652f7":"We must observe here that **NA has a different meaning**. Here we can not impute or remove those rows having NA. For example if one of the values for Alley is NA, it means that home has no Alley or if the value of GarageType is NA it means that particular home has no Garage. That's why wee need to take into account these values as it can affect the final prices of the house.\n\nI have identified some of the features which have NA as a category, they are listed in form of a list below. We will replace these null values with None.","d6e7201b":"We can observe that there is almost **a linear relationship between Living Area and the Sale Price**. If the area is huge then price should also have also been high but the two rightmost points suggest something else. **These two points are outliers**. We will drop both of them below.","36a27193":"Let's Explore the target feature i.e SalesPrice.","ae16a766":"**Red line in histogram indicates the mean of the SalePrice and the Green line indicates the median**","6d8243af":"From the above plots, we can observe that the Sales Price is not normally distributed. From the boxplot we can observe that the dataset have a number of outliers.\n\nFor the probability plot, the red line represents those points which would have been plotted for y-axis points **if those were normally distributed**. But the blue points represents the actual scenario. We can see that there is a lot of deviation on the both the ends i.e on the top right and bottom left."}}