{"cell_type":{"6e383d29":"code","7f1f51d2":"code","4f030eef":"code","78505ff2":"code","9a0d7900":"code","1a1affcb":"code","8c634fc7":"code","3ba8f4a9":"code","e6cd2989":"code","dbe3a678":"code","8875e1ad":"code","effd9643":"code","fe76d8f3":"code","496fefa6":"code","fc640da1":"code","4f0c7f19":"code","4b415412":"code","15d7fdb1":"code","1c2d99b5":"code","329840eb":"code","a4f644c6":"code","b6fa0f17":"code","74562270":"code","d95780e4":"code","532b2156":"code","cd099bf3":"code","4a83d10d":"code","73432056":"markdown","cbfaddf6":"markdown","ee967d7f":"markdown","904d0925":"markdown","d26ca364":"markdown","a3cefb03":"markdown","7ab155c1":"markdown","5d21258b":"markdown","07d9b2f9":"markdown","1de1ce83":"markdown","50c574ec":"markdown","72ddfa1b":"markdown","814f2718":"markdown","73ed8996":"markdown","1d9ba6cc":"markdown","21f370d6":"markdown","40633a30":"markdown","6208e74a":"markdown"},"source":{"6e383d29":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os # for file paths\nimport random #random\n# plot libraries\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors as mcolors\nimport seaborn as sns\nfrom bokeh.resources import INLINE\nimport bokeh.io\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import Div, RangeSlider, Spinner, ColumnDataSource\nfrom bokeh.layouts import layout\nfrom bokeh.palettes import Spectral6\nimport warnings\nfrom bokeh.io import output_file, show\nfrom bokeh.io import curdoc\n\n\n\n#set up\nbokeh.io.output_notebook(INLINE)\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn')","7f1f51d2":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4f030eef":"Playstore_path = \"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\"\nLicence_path = \"\/kaggle\/input\/google-play-store-apps\/license.txt\"\nUserReviews_path = \"\/kaggle\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\"","78505ff2":"Pstore_df = pd.read_csv(Playstore_path)\nPstore_df.head()","9a0d7900":"print(f\"Pstore_df shape (rows,columns) : {Pstore_df.shape}\")","1a1affcb":"Pstore_df.info()","8c634fc7":"Pstore_df = Pstore_df.dropna().reset_index()\nPstore_df = Pstore_df.drop([\"index\"], axis = 1)\nPstore_df[[\"Reviews\"]] = Pstore_df[[\"Reviews\"]].astype(\"int64\")\nPstore_df[[\"Price\"]] = Pstore_df.Price.astype(\"str\").map(lambda p: p[1:] if p!=\"0\" else p).astype(\"float64\")\nPstore_df[[\"Size\"]] = Pstore_df.Size.astype(\"str\").map(lambda S: float(S[:-1])\/1000 if S[-1]==\"k\" else (float(S[:-1]) if S[-1]==\"M\" else np.nan)).astype(\"float64\")","3ba8f4a9":"Pstore_df.describe()","e6cd2989":"obj = list(Pstore_df.select_dtypes(\"object\").columns)\nfor column in obj:\n    print(Pstore_df[column].value_counts())\n    print(f\"\\nunique values: {len(Pstore_df[column].unique())}\\n\")","dbe3a678":"plt.figure(figsize = (7,5))\nplt.hist(Pstore_df['Rating'], alpha=0.8,histtype='bar', color='steelblue',edgecolor='black')\nplt.xlabel(\"Rating\",size = 15)\nplt.ylabel(\"count\",size = 15)\nplt.title(\"Rating\",size = 20)\nRm = round(Pstore_df['Rating'].mean() ,2)\nRsd = round(Pstore_df['Rating'].std() ,2)\nRmo = round(Pstore_df['Rating'].median() ,2)\nRmin = round(Pstore_df['Rating'].min() ,2)\nRmax = round(Pstore_df['Rating'].max() ,2)\n\ntxt = f\"Summary:\\n\\nRating mean: {Rm}\\nRating std: {Rsd}\\nRating median: {Rmo}\\nRating min: {Rmin}\\nRating max: {Rmax}\"\nplt.text(1.5, 1750,txt,size=12,style = 'italic',bbox=dict(facecolor='steelblue',alpha=0.8, edgecolor='black', boxstyle='rarrow,pad=0.3'))\nplt.show() ","8875e1ad":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = Pstore_df['Category'].value_counts().index.tolist()\nsizes = [round(item,3) for item in list(Pstore_df['Category'].value_counts()\/Pstore_df.shape[0])]\n#explode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots(figsize = (15,15))\nax1.pie(sizes , labels=labels, rotatelabels=True,autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')# Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Category Distribution\",size = 20,loc = \"left\")\nplt.show()","effd9643":"fig1, ax1 = plt.subplots(figsize = (10,10))\nax1.set_title('Reviews Boxplot', size = 20)\nax1.boxplot(Pstore_df['Reviews'])\nplt.show()","fe76d8f3":"fig1, ax1 = plt.subplots(figsize = (10,10))\nax1.set_title('Log Reviews Boxplot', size = 20)\nax1.boxplot(np.log(Pstore_df['Reviews']),notch = True,vert=False,patch_artist=True)","496fefa6":"plt.figure(figsize = (7,5))\nplt.hist(Pstore_df['Size'], alpha=0.5,histtype='bar', color='green',edgecolor='black')\nplt.xlabel(\"Size\",size = 15)\nplt.ylabel(\"count\",size = 15)\nplt.title(\"Size\",size = 20)\nSm = round(Pstore_df['Size'].mean() ,2)\nSsd = round(Pstore_df['Size'].std() ,2)\nSmo = round(Pstore_df['Size'].median() ,2)\nSmin = round(Pstore_df['Size'].min() ,2)\nSmax = round(Pstore_df['Size'].max() ,2)\n\ntxt = f\"Summary:\\n\\nSize mean: {Sm}\\nSize std: {Ssd}\\nSize median: {Smo}\\nSize min: {Smin}\\nSize max: {Smax}\"\nplt.text(50, 1750,txt,size=12,style = 'italic',bbox=dict(facecolor='green',alpha=0.5, edgecolor='black', boxstyle='larrow,pad=0.3'))\nplt.show() ","fc640da1":"\nplt.figure(figsize = (12,10))\nplt.bar(Pstore_df['Installs'].value_counts().index.tolist(),Pstore_df['Installs'].value_counts(), color = \"gold\")\nplt.xticks(rotation=90)\nfor i in range(len(Pstore_df['Installs'].value_counts())):\n    txt = f\"{Pstore_df['Installs'].value_counts()[i]}\"\n    plt.text(i, Pstore_df['Installs'].value_counts()[i]+50,txt,size=12,style = 'italic',color = \"black\",bbox=dict(facecolor='gold',alpha=0.8, edgecolor='white', boxstyle='Sawtooth,pad=0.5'))\nplt.xlabel(\"Installs\",size = 15, color = \"black\")\nplt.ylabel(\"count\",size = 15, color = \"black\")\nplt.title(\"Installs\",size = 20, color = \"black\")\nplt.show()","4f0c7f19":"plt.figure(figsize = (10,8))\nplt.bar(Pstore_df['Type'].value_counts().index.tolist(),Pstore_df['Type'].value_counts(), color = \"firebrick\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Type\",size = 15, color = \"black\")\nplt.ylabel(\"count\",size = 15, color = \"black\")\nplt.title(\"Type\",size = 20, color = \"black\")\nfor i in range(len(Pstore_df['Type'].value_counts())):\n    txt = f\"{round(Pstore_df['Type'].value_counts()[i]\/Pstore_df.shape[0]*100,2)}%\"\n    plt.text(i, Pstore_df['Type'].value_counts()[i]+200,txt,size=12,style = 'italic',color = \"black\",bbox=dict(facecolor='forestgreen',alpha=0.8, edgecolor='white', boxstyle='roundtooth,pad=0.3'))\nplt.show()","4b415412":"plt.figure(figsize = (7,5))\nplt.hist(Pstore_df['Price'], alpha=0.8,histtype='bar', color='violet',edgecolor='black')\nplt.xlabel(\"Price\",size = 15)\nplt.ylabel(\"count\",size = 15)\nplt.title(\"Price\",size = 20)\nPm = round(Pstore_df['Price'].mean() ,2)\nPsd = round(Pstore_df['Price'].std() ,2)\nPmo = round(Pstore_df['Price'].median() ,2)\nPmin = round(Pstore_df['Price'].min() ,2)\nPmax = round(Pstore_df['Price'].max() ,2)\n\ntxt = f\"Summary:\\n\\nPrice mean: {Pm}\\nPrice std: {Psd}\\nPrice median: {Pmo}\\nPrice min: {Pmin}\\nPrice max: {Pmax}\"\nplt.text(200, 5000,txt,size=12,style = 'italic',bbox=dict(facecolor='violet',alpha=0.8, edgecolor='black', boxstyle='circle,pad=1.5'))\nplt.show() ","15d7fdb1":"plt.figure(figsize = (12,10))\nplt.bar(Pstore_df['Content Rating'].value_counts().index.tolist(),Pstore_df['Content Rating'].value_counts(), color = \"cyan\")\nplt.xticks(rotation=90)\nfor i in range(len(Pstore_df['Content Rating'].value_counts())):\n    txt = f\"{round(Pstore_df['Content Rating'].value_counts()[i]\/Pstore_df.shape[0]*100,2)}%\"\n    plt.text(i, Pstore_df['Content Rating'].value_counts()[i]+150,txt,size=12,style = 'italic',color = \"white\",bbox=dict(facecolor='darkblue',alpha=0.8, edgecolor='white', boxstyle='round4,pad=0.5'))\nplt.xlabel(\"Content Rating\",size = 15, color = \"black\")\nplt.ylabel(\"count\",size = 15, color = \"black\")\nplt.title(\"Content Rating\",size = 20, color = \"black\")\nplt.show()","1c2d99b5":"labels = Pstore_df['Genres'].value_counts().index.tolist()\nsizes = [round(item,3) for item in list(Pstore_df['Genres'].value_counts()\/Pstore_df.shape[0])]\nfig1, ax1 = plt.subplots(figsize = (15,15))\nax1.pie(sizes , labels=labels, rotatelabels=True,autopct='%1.1f%%',\n        shadow=True, startangle=90,wedgeprops=dict(width=0.3, edgecolor='w'),colors = random.choices(list(mcolors.CSS4_COLORS.values()),k = 115))\nax1.axis('equal')\nplt.title(\"Genres Distribution\",size = 20,loc = \"left\")\nplt.show()","329840eb":"plt.figure(figsize = (12,10))\nsns.regplot(x= \"Rating\", y = \"Price\", data = Pstore_df[Pstore_df[\"Type\"]==\"Paid\"], color=\"violet\", marker= \"*\",scatter_kws={\"s\": 200,'alpha':0.5})\ntxt1 = \"if price goes down\"\nplt.text(2, 200,txt1,size=12,style = 'italic',bbox=dict(facecolor='red',alpha=0.8, edgecolor='black', boxstyle='round,pad=1.5'))\ntxt2 = \"rating goes up\"\nplt.text(4, 200,txt2,size=12,style = 'italic',bbox=dict(facecolor='darkgreen',alpha=0.8, edgecolor='black', boxstyle='round,pad=1.5'))\n","a4f644c6":"plt.figure(figsize = (12,10))\nsns.regplot(x= \"Rating\", y = \"Size\", data = Pstore_df, color=\"g\",scatter = False ,scatter_kws={\"s\": 200,'alpha':0.3})\nsns.scatterplot(x= \"Rating\", y = \"Size\", data = Pstore_df, alpha=0.5,color=\"b\",marker= \"P\", s=100)\ntxt1 = \"if price goes up rating goes up\"\nplt.text(1.5, 80,txt1,size=15,style = 'italic',bbox=dict(facecolor='green',alpha=0.5, edgecolor='black', boxstyle='sawtooth,pad=0.5'))\n","b6fa0f17":"plt.figure(figsize = (12,10))\nsns.regplot(x= \"Rating\", y = \"Reviews\", data = Pstore_df, color=\"c\",scatter = False ,scatter_kws={\"s\": 200,'alpha':0.3})\nsns.scatterplot(x= \"Rating\", y = \"Reviews\", data = Pstore_df, alpha=0.5,color=\"r\",marker= \"s\", s=100)\ntxt1 = \"no specific pattern identified\"\nplt.text(1.5, 10**7,txt1,size=15,style = 'italic',bbox=dict(facecolor='green',alpha=0.5, edgecolor='black', boxstyle='square,pad=0.5'))\n","74562270":"Pstore_num = Pstore_df[[\"Rating\",\"Reviews\",\"Size\",\"Price\"]]\n#normalize scaler\nfor column in list(Pstore_num.columns):\n    Pstore_num[column] = Pstore_df[column].map(lambda cell: (cell-Pstore_df[column].mean())\/Pstore_df[column].std())\ncorr = Pstore_num.corr()\n\nfig, ax = plt.subplots()\nsns.heatmap(corr, linewidths=.5, cmap=\"viridis\")\nfor i in range(len(corr)):\n    ax.text(i+0.5,len(corr)-(i+0.5), corr.columns[i], \n            ha=\"center\", va=\"center\", rotation=45)\n    for j in range(i+1, len(corr)):\n        s = \"{:.3f}\".format(corr.values[i,j])\n        ax.text(j+0.5,len(corr)-(i+0.5),s,color= 'white',\n            ha=\"center\", va=\"center\")\n        \nplt.title(\"correlation heatmap\",size= 20)","d95780e4":"\nCat = Pstore_df['Category'].value_counts().index.tolist()[:10]\ncounts = Pstore_df['Category'].value_counts()[:10]\n\n# sorting the bars means sorting the range factors\nsorted_Cat = sorted(Cat, key=lambda x: counts[Cat.index(x)])\n\np = figure(x_range=sorted_Cat, plot_width=500,plot_height=350,title=\"top 10 most frequent App Categories\")\n           \npoints = p.vbar(x=sorted_Cat, top=counts,color = (153, 153, 255),legend_label = \"Category\",width=0.9)\n\np.y_range.start = 0\np.background_fill_color = (51, 204, 204)\np.border_fill_color = (204, 255, 255)\np.outline_line_color = (0, 0, 255)\np.ygrid.band_fill_color = (204, 255, 204)\np.ygrid.band_fill_alpha = 0.5\np.xaxis.major_label_orientation = \"vertical\"\nshow(p)","532b2156":" Pstore_df.nlargest(15,\"Reviews\")","cd099bf3":"output_file(\"App_Reviews.html\")\n\nApp = ['Facebook', 'WhatsApp Messenger', 'Instagram', 'Messenger', 'Clash of Clans']\nreviews = [7.81, 6.91, 6.66, 5.66,4.49]\n\nsource = ColumnDataSource(data=dict(App=App, reviews=reviews, color=Spectral6))\n\np = figure(x_range=App, y_range=(0,10),plot_width=700,plot_height=500, title=\"App Reviews in millions\")\n\np.vbar(x='App', top='reviews', width=0.9, color='color', legend_field=\"App\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\np.xaxis.major_label_orientation = \"vertical\"\np.y_range.start = 0\nshow(p)","4a83d10d":"\ncurdoc().theme = 'dark_minimal'\noutput_file(\"reviewd_toolbar.html\")\n\nsource = ColumnDataSource(data=dict(\n    reviews=[7.81, 6.91, 6.66, 5.66,4.49],\n    rating=[4.1, 4.4, 4.5, 4.0, 4.6],\n    App=['Facebook', 'WhatsApp Messenger', 'Instagram', 'Messenger', 'Clash of Clans'],\n    imgs =[\n        'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/05\/Facebook_Logo_%282019%29.png\/1024px-Facebook_Logo_%282019%29.png',\n        'http:\/\/assets.stickpng.com\/thumbs\/5ae21cc526c97415d3213554.png',\n        'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e7\/Instagram_logo_2016.svg\/1200px-Instagram_logo_2016.svg.png',\n        'http:\/\/assets.stickpng.com\/images\/580b57fcd9996e24bc43c526.png',\n        'http:\/\/assets.stickpng.com\/images\/584d9204367b6a13e54477f5.png'\n    ],\n    fonts=[\n        '<b>bold<\/b>',\n        '<b>bold<\/b>',\n        '<b>bold<\/b>',\n        '<b>bold<\/b>',\n        '<b>bold<\/b>'\n    ]\n))\n\nTOOLTIPS = \"\"\"\n    <div>\n        <div>\n            <img\n                src=\"@imgs\" height=\"42\" alt=\"@imgs\" width=\"42\"\n                style=\"float: left; margin: 0px 15px 15px 0px;\"\n                border=\"2\"\n            ><\/img>\n        <\/div>\n        <div>\n            <span style=\"font-size: 17px; font-weight: bold;\">@App<\/span>\n            <span style=\"font-size: 15px; color: #966;\">[$index]<\/span>\n        <\/div>\n        <div>\n            <span>@fonts{safe}<\/span>\n        <\/div>\n        <div>\n            <span style=\"font-size: 15px;\">(reviews,rating)<\/span>\n            <span style=\"font-size: 10px; color: #696;\">($x, $y)<\/span>\n        <\/div>\n    <\/div>\n\"\"\"\n\n\np = figure(plot_width=600, plot_height=500, x_axis_label='reviews', y_axis_label='rating', tooltips=TOOLTIPS,\n           title=\"Rating and reviews top 5 reviewd apps\")\n\np.diamond('reviews', 'rating', size=30, source=source,color = \"violet\")\n\nshow(p)","73432056":"<h2 style='text-align:center;font-family:Comic Sans MS;font-size:40px;background-color:SlateBlue;border:20px;color:white'>App Store Analysis and visualizations<h2>\n    \n![](https:\/\/www.apple.com\/newsroom\/images\/product\/app-store\/Apple_App_Store_10th_anniversary_07102018_big.gif.large.gif)\n\n<h2 style='text-align:center;font-family:Comic Sans MS;font-size:25px;background-color:SlateBlue;border:20px;color:white'>Table of Contents<h2>\n\n\n## 1. Introducion\n## 2. Data ID\n## 3. Libraries\n## 4. Data Prep\n## 5. Data analysis\n## 6. Data visualization\n## 7. Conclusion\n    \n# Introducion\n\n## About this dataset: \nWhile many public datasets (on Kaggle and the like) provide Apple App Store data, there are not many counterpart datasets available for Google Play Store apps anywhere on the web. On digging deeper, I found out that iTunes App Store page deploys a nicely indexed appendix-like structure to allow for simple and easy web scraping. On the other hand, Google Play Store uses sophisticated modern-day techniques (like dynamic page load) using JQuery making scraping more challenging.   \n\n## Aim of this notebook:\n\nthis notebook focuses in the data visualization task:\nThis task details the visualization aspect of the data analysis. In this task, the requirement is to visualize the dataset without cleaning     the data and understand the distribution of the dataset. visualizations will be from three libraries: matplotlib, seaborn and bokeh.\n\n    \n# Data ID\nThis dataset is named [Google Play Store Apps](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps). The dataset contains a set of **10,841 records** under **13 attributes**:\n    \n| Column Name                         | Description                                                    |\n|------------------                   |----------------------------------------------------------------|\n| `App`                               | Application name                                               |\n| `Category`                          | Category the app belongs to                                    |\n| `Rating`                            | Overall user rating of the app (as when scraped)               |\n| `Reviews`                           | Number of user reviews for the app (as when scraped)           |\n| `Size`                              | Size of the app (as when scraped)                              |\n| `Installs`                          | Number of user downloads\/installs for the app (as when scraped)|\n| `Type`                              | Paid or Free                                                   |\n| `Price`                             | Price of the app (as when scraped)                             |\n| `Content Rating`                    | Age group the app is targeted at - Children \/ Mature 21+ \/ Adult |\n| `Genres`        | An app can belong to multiple genres (apart from its main category). For eg, a musical family game will belong to |\n| `Last Updated`                | Date when the app was last updated on Play Store (as when scraped)                  |  \n| `Current Ver`            | Current version of the app available on Play Store (as when scraped)                |\n| `Android Ver`             | Min required Android version (as when scraped)                       |\n    \n\n<h2 style='text-align:left;font-family:Comic Sans MS;font-size:25px;background-color:white;border:20px;color:black'>\ud83d\udcdd Note<h2>\n<h2 style='text-align:left;font-family:Comic Sans MS;font-size:25px;background-color:white;border:10px;color:black'>NA is dropped entirely, the analysis will compose only of completely informed rows (9,360 rows after NA filter)<h2>\n  \n# Libraries \ud83d\udcda","cbfaddf6":"# Conclusion\n\nAll the visualization libraries have their own strengths and weaknesses,\nthese notebook can show the basic pro's and cons of each library:\n\n| Library          | Pros                                                    |Cons                                                    |\n|------------------|---------------------------------------------------------|--------------------------------------------------------|\n| `Matplotlib`     | Great for distribution analysis, Can Plot anything.     | Low-level interface.                                   | \n| `Seaborn`        | Simple and short code,common-used plots look nicer.     | Doesn't have a wide collection as Matplotlib.          |\n| `Bokeh`          | Interactive version of Matplotlib,versatile graphics.   | More code to create the same plot as other libraries.  |\n\n\n\n\n\n<h2 style='text-align:center;font-family:Comic Sans MS;font-size:25px;background-color:SlateBlue;border:20px;color:white'>Thank you!<h2>\n    \n","ee967d7f":"![](https:\/\/media1.tenor.com\/images\/3b70d5d42b1b10ef6eeb6bb574741e1c\/tenor.gif?itemid=9648714)","904d0925":"### Type","d26ca364":"### Price","a3cefb03":"### Content Rating","7ab155c1":"### Size","5d21258b":"### Reviews","07d9b2f9":"# Data prep","1de1ce83":"### Genres","50c574ec":"# Data analysis\n## numeric columns","72ddfa1b":"# Data visualization","814f2718":"## Fields Multivariate analysis - using seaborn\n\n![](https:\/\/seaborn.pydata.org\/_static\/logo-wide-lightbg.svg)\n\n### rating and price\n\n","73ed8996":"### Installs","1d9ba6cc":"## Vizualizations of Features - Using bokeh\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT5brlxCBpVz7mu8sYl_flIb4v5nOV2WGC5iw&usqp=CAU)\n<h2 style='text-align:center;font-family:Comic Sans MS;font-size:25px;background-color:SlateBlue;border:20px;color:white'>RGB colors<h2>\n\n![](http:\/\/excelatfinance.com\/xlf\/media\/xlf-colindx2ws.png)\n\n### top 10 most frequent App Categories","21f370d6":"## str columns","40633a30":"## Fields analysis - using matplotlib\n\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAcsAAABuCAMAAAB\/esicAAABgFBMVEX\/\/\/8RVXwAT3gATHYASXQASHT\/qnAAUXn\/3nAARHEATngMU3sASHMAQ3H8\/Pz19\/ju7u7n5+fy8vJHcI8sZYnj\/4ff5+z62Wu5\/7fx9ffn7fH9qG4mX4PK1t7\/rnKRqrxUfZnS3eS2xtKnusijt8a\/zth9m7BxkqlfhZ+LpbgAPW5IdZM3bY5zlKtVfppoi6PX19fFy87a9n7\/5XG7\/7mo7qavtbmLgn2Gdm2lbUbqmmKWZkahpaiPblnWjFjBgFN6dHGPaE6XdF6qazx+aFuZl5WftFqDhX2qd1WVplqBkFPQ63h0e1+2zmWTg3p3glfA2W1gYmaLjIm\/pU2OgVd\/eGWCj1WjoJ7Xull\/dViul0zpymGZh058WUJ8gHGkulp0gkSKiI5WbKBZgdspLC0REhIlM1EzU5grRHqfkGJwbGA\/Pz\/Dwb28o1ChnpNVU1Qzc2V1mHRaOiNTo5BzpXFoXTiblIBm4cVgiX+NzItz\/t5ZuaOAtn6ClYJ5nnhxnXDDvr9\/AAAY0UlEQVR4nO1di5vbtpGX+Fia5IqUtLK8ot7UYyVLu5LseH3ebNZ2uxunaXqXOG3z7p2b9h6p256vvbvm0cu\/XoAEiAEIUJLt9WVd\/vJ90ZqkwAHmgZnBACoUcuTIkSNHjhw5cuTIkSNHjhw5cuTIkSNHjhw5cuTIcYUQtAfdbnc4qr+a19VH6G3dQd\/f8Pn+CJE3HLQbl0rVa4HGzDR1DNOsBZf\/utAxDPw2w7CnmzzfLpom\/oJh7h5cNm1XHkOzSGF2L\/91RZe+zXU4TfPDg9lebW\/S5c3D3ErIK70iw3F1MXWSwdIHl\/86O3mb24JWduQYmmW5lqaXhvD5VsL7oplb2TU41JLBMsJLf1sD8LLmseuBDXgGTL1fZDAvnbqrjiPGS7N96W+rM15aM3B9zKxD0QCKGTAT6zqXTt1VxxwoxOVPSG02O1tH7LIHTGnRAU5RXQc2+dKpu+pgzkjRuXw\/dsR4qS3YZZ+pKyJjzG7U2fPu\/NKpu+pgg1V0Fbxs9Efd8eFicTCehv0X43doMF5ClnG8BHoJ9FibvNCbf3BAoxqG4aj\/Ej26EjBikvDdH01brdliiN6K\/huMezV3MsjiZzaJQ2YzHRABtXcBLw3gTkPeHz5fB3+YCI4M2zQQbP3IW\/\/4RuAcy9Td9sLoDerkXVXyjdFYnw8V0tSY6DGJptGTJXYUEVAfWIei2Wc3FLy\/+pju0rnNtUcvqU1g3cQJyRsYewPAkDL7s39oT6SOUtdmJMqiVRgBgS40oKWHPk6X8VIfplq7wliwgdh9WeED0AguSEAq4QjsKsN\/+EPrSMLNsZxXCSaKLhwxfS3BKBfosfEKMhmvDkcs2IJ26IUAgwToXPRbs5hV5eO7D+JLZeGrw5vpjCoQN1tG4kzRhaBm65plafoun\/ZR6PHVBwgF9ZcVCiocy7EWjZx3\/A\/3TjpvxtdEXhYai6JIBuCVISNxj3XB5u\/3h+PFYtwd8Y4AFN\/Lz2S8QrRAXvplhYJS5yKoxbHf6VtnO52dnfvL6F8pXiKttoVJrAZIlPDSqwFebuKMA\/G1X8EqzqtDkcF5WX6szLEc3YymrOO3ThAjEU5OqxWEJf5fmX9xY85HfSB940p41QBdKG1CHlhW0V8nXjbAQFkvq9FDxkuTOB1hNJOVH5zFnGyeNO9G17Feel65UuGCjckMctcANErEDaRXi9om5OmgvddpmSRwmJC+tNzkAkxIsXMRRuuEq4dNwsjmTudH0Y3ExlYr0NwegFDGZ7OvlMRgzf0U1mQyXjq8DHu3uSn0\/Eajkfk4yDML4cO6pjMoBM5F7HiGkU+y+jFWymYzYmjnXsQ7wECvUk3+9g8ZMXXAK1n6VLVMooIyk+H5LzrJeEG9zjUSDBfzVqtVO+qmHfBgOMH35hPJPb7VejjFjyKCW\/PZ4UD1eH99btKr1+ucQPjheFbLomIP8DKIXlIvVL2Cf97ErNyJcXaMH+XjywrNBnmFI+wpeQKJVk\/yNpCrE7vgNRDtgcAhkFq39uibR+NZSzXoG8KbtkzbtkvOjDpo4aykay6Gptst3qML90q6ZZF7NXWYGwwmlm04uBksfK6lGXZxLBAZtmoIcF0ouhChl3TfG7dKmECtR72E\/sI0NItSWJMsNUPHsoSMWKOEPX\/En+BhJ2HlTvMCP0t5eVqJPsqRalbx6+ddXJjDk+gWExJniXUEERBcDSkUBjMN027btTFkZ3qJrH7g7NIuOeKgb4xBiRCqxxLVru2CmbzoGi3GgVHL5O6Zc7kTNpoZhlYU4WpmDzr0DUI89wyFnXBoSPNnRlzlVO\/ZGvwOoiIVJoB1e1dHo7gXDw7yVpdvdigrdzrn0cX4K8u3334UcdMvRw9iArF5Hps8iS4jMRFlGAHBRMPoJh0u14ZpV3GJLJiYYNFaGPQt0HVgq4VDjluR5OgkmvUntivc0yxJtDVopdpI2jKBEo1sxVMYetJ3RmAk8lMzJSWWKeZOGsxRtNAE16WTWLXqH99PmNl5p4xmqEo8vVzcun79J5GieuUqUaK24fPrySoSFenVgYLHIeAl6tTA4TiZGqiNkaSTsHWot3Sx1SKtFGtraVUrupboUvszU9X5qC1ml4eyd6X7nhCIxy6YG7LWSwIzAyYmiM9BiRKJp8OLs8TG3j8uV6uVKopHyv671xF++h5WzXKFtjM+yBA5RqIqvdpVFJCBnqNOTcyiBKXnYGaSFkakjRypQmHRLgxSShlB6wnt9VIyxoPlK6dZTzL5Tip30DC1LYk8FdMJI+ZcaGg+mtFx9MrYet49oWHJyWmB2tjjn2FeXv\/ZaWRgKTM9t88l8HgSE70E6VrORIByHy7tCnrudGcKkX6O0pYknaSHoZxdqNlBYaq6J6hEvyR\/LIGVOOEHcr6Qvg9SBBrtkVLlhVCAOZZoyhslIR9mUdXzzneIM9v8x4SXj65fv3Xr+q1Hsdvj09gknHOeCgcmbj0xAiKYKArIYM815Xy0ffFIMh24ao1yW1NFf4BTHWNg8Lfd1OjbtFeHWbxkfU8ItBaG+nmbM0mJY4lDiBZtKta2qtd4i\/iynYeUl5WfYK289R51e8rUR621lYrJVBB4zVzqXbV8MsnqeYLdrb1ZxsCMac7NeDlvC4D5sBwDRSWaY+rcWGi06D5LL4HRZBdVEhzd46Q4cTqQ4LTpnSrhT7Wwos7s\/Trh5elPMS\/fXRZoYpZa2XDGuZ0QhoRE3tireNzL6glry92SlZ6eZqGmG5qCsSig04V7\/MI4XbW1DHvWHfXrQVDvD2dwMNwWGa6hbWHAtiwKPbGZfrrfrmOYpkgiZ8Soc4GzKnOiPl7i0VS8FXFmT44JL\/8Js\/LtVWFJw0CPhp3FPscTRqLDpAd6R9AXVFWnz1OjS7rEX9zd0v1piDOvqxcXw3Bck9ozs3U4GIx5Z1c7gu1FeulqxiyExIfQfNMCbn+yhwF5tUfBAlGQriUEGsXDsN8PF7wUwmXKRKKQexLQfH2Snqui2ZA4s53HMS9X2PN5\/xRpJWB4\/Dk85GIONyExya0UfFAh2QI5AVidbgDqYCaD0Bl1aXTIT578yK5HXeCZZXZjUzRM+xmaPogp5WZPtwjbw\/Olbo5FH2wAviGsvoI8szTXKQibZRACC33e6MI1FupY6vVCl0QO\/gdL8kcV8+9BnJL9UbTmVXiMJ8sHkYFNXFiimIEJ3WJ5ah3wEqZXVcsncIks+pJNuxTUONW0tsu793learWEC6IXU9TniapN4QBzGyIatq11Jcs4cOrgTEewJi8tEOiAVFPATfFwQZ9MSHgSbZHLFzc+\/MUK\/xExq1r4qolz7PfKWC8rOLh8z4tSBIkLS5naG0EHkff0Yqgql1XV6Q3e1GgtRrlXg\/K5Zc0B73DrsGJwj5+pDFCQDcvChY1KwUgqTKD6id93tS61LhII74VwooIiQiYkp1uoE6vh\/fz27WuYm0TdqsFD7MyeRReO379+\/ZcVku0RFXOAfLUppV6eWlek3uuKArKAyz5oMzh+dcjnLWv0Qij2\/EjxirnLJY3BDLJZUAtTHRwvR2CNYSH5Ygh5qQvc5vZrdFPXUdQwIKXEqw+vIdz+8JNT8ogfObPNjzAv30N+zzFN3CVeD2Fq0AKerJRExQ4EZXU6VzarzflFFC72lL1NDZhIc3rcrQDy0uDLqyE5G\/ESsISvIlRUWW1CIH8Tdjy+4up+YUK09eLGtQg3Pv7kmESQODPbOUe8XL6N\/B4vKROhikm9Hz1gDpi0ylzVBdXyCYxxLIGVnB3abj0XpgytPb5ZH0i9JUgInNY34yXrFz9fAu3XZSXcgEBX7De0YnCDFSk7wZMXLaf55Dbh5bXbETfxYubFWafzjl8uXNy69ajqpYxrlcyci5BFEY5sB3tXl3dBVZ0ewjIE0bfwYG3RdnUW44w9p3Dfm7AGA1cPzE2qj0C\/+IJmMBDSTa9ZBPLixtySII49kab6xBWsfBrz8gZWz9uf\/TxarPQfnHTuL6uFX15\/L1LKRCH5z+mQRffSGUyZWt9g+SQtvlwiYStHdpFRdZuxhxHy0tjkhUC9+LZU+WeKA0XeOkUi2JBMHEikRH3iV64+pmoZ4fZnn58ihaie7zRPq6v33yXVlULOh3yGCyZRUnFT7cGeKq5n70DgUptbFXap0r8YGVWckJe76taDer89igDeY3NVGet2IKjy1qm7IEwnszlSkhHxOU5vcLy8dgNx84lfqHzRvFv51T8fxw\/RcIQm+wgvsTxQVZJGCaouqHYuZJoabvnI2qrgEqR\/bVH3YKGF8DUu3JW1G4ymR8WSbZvR9iiuzEDjhG3dDoTssmAgIoCXxLlAAxiS5O8TkZdIN298fhGs3nln+S9P0Nz5FPOTMI\/ylOhpvcVcNymJPUUX4D57eD1bfGGIsB0vMyquIb\/Eqs+AZUMl2ZqgO3dM+VooBmeTxSorEcAA6GmLAywwSLkQfwop0YD4j4+vcbyMps2Im6dfPHhQePrk11\/+muV8qPNDeBkFJcRdkfp5KnFTXQe8N9KyAX1zWWG1Eh74niPMe42MwtWsQsj+xNYt9aILd9AGJ0wlWUEhlIh0z4CIA9+HDAfiZXfqVRH8RzdifMZ9IJ5++pvffvCv\/\/bll1\/+e7laXVZjVMhHOfqogwBT5ufB+caGY6jaXAG6LNlAA\/VSVlithCotjBGo9zBy2Ro+XPEP7OwVHX7BE3qitozC7LJgIOIg5UKmHGTYEC99hMLjGzywUn728af\/8dVvfvfbB8unCCvf8yrRw74ff3qVKvr0PKyXdHHblO2xBv114RjCBQUohuBxLS0bXUXmby1UB9NgwKpQMWMPwl0+5JJXDHG87HEEwFsSArMEqsBN90CmiG8st7G3UXTy8e8\/\/+QPp8vKxe8+Ov7qjxdCpkdmY6leSkjk9AHeUIkh5H1aNoBntN25FKqUIQas4BXTHaEiwu\/ra5dZ+bRDAFMBawjspW8DcwVSLmQHgin4Prdvx8r46MkxzrJXT\/\/zg1XhD8+q\/3VOmCf4PuSfke8T99ddJ257iuuwa1xqPd0cnDa2WvTKOtAiK7s2lIdIDX6etHTDNBxdd2DRoMPJBVwm6W1JIK\/VIM1LtBU5\/DQmOUZz42e\/\/\/wXj45XUQF8uVB5\/Kc\/nVYLlWd\/Xq5+\/DAKMDNiEspLmbj1QRfg4Muq06MuA\/GVGFFoamRJTSUgv8QDE4eK1BQGCP1hiNSDca5u9rphv44RjEBqkrPJbeXEG2OUQSAaRnBQBwj9iLYiKaO5guV\/\/8\/FauknC9LLx9\/+71+WVa9Q\/u7rZeH07B5OuSvyPjhXQPorFbdNUuuQx\/3M3Smw0GO7\/e9ZupeVngDZGhAitUERnlUcgvkXzL18W6M1qfXs1Dv034HbT79wWPDoci6xorHqIU5+8+1FVHF3\/PUdxMbHJ2d3vYIwbcIcHrHaEnHaKIXO8biv4HHqLitz2wiqyuqoDxnpiYU0xQC9Sv7U1tEGqXVp3jrLOPAVciAEJsOBtYg6ipA\/F99+881fVvGekYv9Ox+hj\/PmyfmKPCKaWpxbJ1GwlMQNq9PZWIDradmAbqwkoM5A1tGci4z0Hkx1JEwLgHkQglUgu3xWVTHxJsjMdzWAHQCi75PLOMqia14014o\/V99ipYyv\/HV\/\/6+Y9Ic7zTcJM8U1L6TwNHKSr+QouqASQyi+6fbm0tWCTXCQkVqH1Z1iSAv9x4SX0LkV+AL6xafBYJm+jJeAwPR8CsNqMLck\/hQyGQMi+VTZonjj8QrvnI18oO\/395\/h66t7zc79i+QJDODGUvdmK3Gbyn0KSHV6gRIuX0qtgBpZqfWs9EQRgFUBJY2lDpEA\/eLTvoBX0jN7QU6zaAojCRMucN9\/4lgi\/tZpSRfVNqKg6KOMmLb8en\/\/uzJm9elZs3P2wGcPUu5jaaCiKOXlRHEoiOrgF+4gUpFdXH+3K\/cBurcrpgYBu1I5XhAGsxQDoyOVogEsK3GTADDk0oHiio6EY7lgBRm0R0nZCT7ah+5+oxYz5lXEUa9Svbizv\/\/10yreD333pLnT\/GLpibVbsxHrmdTGzhTpVdUBTtyilrAFaAS3cOiSl2Wgpl6iLMBXCqzxAS\/ZIM5B\/pbPIXlz1ZLLumiKLwvW4Vi14ZYvxcmBfqFLW4VlA0k9yK\/279y5cxFfP+80m517p+AxjMDG5xWQN4nlFRE2qE5XLZMUBZVtwJo4Z6voki8PEJdJMlLr8kJIWEnFNzaDuQL+DliAlCRBhN2PrsYEvA\/zEi6knjmWeMMeTbsl\/Kv67ASYZ2\/s39l\/Qjr1JmJm8+xx\/C9Y68w8UtkhzHAlZ5NlEmF7CmBmgyuP3XKjF8ybiKnGADjH4lGP8kJIQDw32XMVvIJcwG0yOpk8PPajHWJZcNHukjEecBsxORlmzgUmbo+SwkrSkxL25Xf7iJd\/Jf9a3e+cNDsn5\/jBxAOy+nDySN7DDpwV92BTKJd\/xap1e0ysXrsIWblt1XrWwTQgPbFhqhbM29DIhhyJQqpjzGWKemG7HY5rpaQbQWpji9Gajtqj7pwrq3c5GQZtIoVItuxVk7QBrcoqHN\/BvPw\/OoOcnuHTDJoPV\/zeIFCXjkgctNsjRGIyJHAModoCMXS5ma8oQi+OR+32oMfvFChtuc0969zvrCJkeUoOhghajVjDdo\/fuSm0xW+OtoxdvOmH0QIL7SiheBuNsKNJ56YWkMjYRQasRo0YOVzCY8eFPNnHvPyOMK5avYuL2Xc6909psWyh2BacFUpiMiHUFXNRQ5Nfl+3GQl3aFVYltqyNXbNMApa1xGWSgTSS5ErMXaN22J0uWuLxAsKMLt2oyvrel92WPM\/5Zj0+SBglwx5tYCfV6dFxW88iXn79FF\/xK34Bb7PFzIyCk6ijc7xgIH2pZAw5m6NaJvHW7TYm47TteVyjDN3LSk\/ICyFTjorjpPf+CQGwdKAYLxVbHwWU+EBsT0gwzqi4xXvcyd+Vilf+8xuImW\/cwTv34km08rCDmdlsnsdnimDH1JfXSNC3qdKrqkOB4CHs6uoLe8v9ei+QWpcXOg6VI+8mwyuGaAtN8nQix3AfhGpPaHFXaBI6HVi6Gzepo+It4XPVp8++\/w7h+8flJPrEJ3M1T3Z2OlFGbxENimzTL3MHVWenw80VMO3KLFGrL+5HZF3aLuUTDX5G1e1YUcGLAVO1cIquKVainXmS+BGzO7IDDlgYBwjUxnP5RmpTkEJYdhI7kF0qG2WfP2HUK5crS\/6QytOzZnTG2rmPf8EpMrV1yUkiTNWUqXWFniSmBlkf1VEIxnP8OEKW7h3KdS8C8Fi5lFxdXnxnHrG8ayrtO07v2pUc7oOFwJ9LT6wRRRgefEkcy1n8DGIa2yxLIZ4f+wBpZXPnC6TQwU0ip5LTGtYf7qM6wCkJVrH1GUmP9LCf57cRYFp4U93DAOEun5KrF9MHWGhY5ZM3pStMj1LMZEXNAoGTXbHrmpWaWIK0c+5H0hjrX0XIYQm8LDeQ\/9P5AhvjWsKa9BE8bGnxuXcgRN5mvZU+p+n5jtMf05DGtW6mlrVoMO5qN8V0bE1P7glV0I2JzROn2RP87QPSA0vyE4HjknAoWi+5JZ4d2jW5KUazF+lCtiBpzjKoc95HKkZNaZVXzdTZhvU3O+f4MK4ZiAoQibBT7i7z+scmSUChcYJjmPx2ArrOLZPEY+66ZtR+Y8E17Wp2b7t8T9Ltw5pWQjBavdQiRXBQs9At22lNUvn6\/qTmolu2Vpuk1Kx\/6NjsbETrMKasv1fEZ\/xZc5nM9ReGic+YtyzNMUo18EiqrD5IzjW0dNNK7aWPEB61SjYi3dkbJ0ajDceZOygW\/O3Hzuzqj0h1\/SNuzqovHEaiXQPORWM81\/E42a0jzkT443nRRGQ4rSNubBuLooGJay0Ice0j23Di8yKdXWPxAuevxxWh8pra9ffkt9rdybzWqtUm3ba3yRfwiZvdg95s1lt0Q07R4BYkwrdGeIgbny9g4wK89MtGMHDxwCnOlJdeGZweiyx\/L0XiEJM4E0ksqMfJk19PXW5ER6jWakdT+aby1wMgKygpC94K7Zuc11Wlh6yXuX8RePNt0y451gEGLC96MHld\/LFhfMh6fHZ+uSo8am233pRjPWBZvbhF4jlam+1J5EHymxaD5zkkMkc26pk\/sbY9uqW065XiZX3+Kn75\/e8OMKe5XVGaAsGsJfqJAi8bY\/O1+oWtHwwUv937IgiNOc9NjpeN6c2D1+kHQ35AgFXtL82xDGvFLjCijJfe6Kg0zjl5Scgqq38B9MfWfEqjU1qjNZgU5+FrHN79f+PyfvOzPZ3fLPbG3UEYhsPpYl7SFpm\/MZzjRZGV+39x1EfD6fjwYDzuhu3ctF424BaJPOS72sjaIpHjaiFre1KOqwWxcifH1QVe845+8svVpad75bg6qB+0LEdzHKs1zgOGq49GgJCH8Dly5MiRI0eOHDly5MiRI0eOHDn+LvA3SEg0gRr1SrgAAAAASUVORK5CYII=)\n\n### Rating","6208e74a":"### Category"}}