{"cell_type":{"2239d90c":"code","46cf2974":"code","b4c91979":"code","5b9a94df":"code","96a7dd45":"code","f7cdbb25":"code","edb1b19d":"code","b5a08571":"code","e42f815a":"code","0ae39879":"code","e61aaed9":"code","8d5cb901":"code","dec72372":"code","ad3b9580":"code","d9bd96c7":"code","e5ed5ca7":"code","ddd4fe1f":"code","a9392db8":"code","ef5c7990":"code","7db0d8c7":"code","3ceac47f":"code","c507a7d4":"code","b652cecd":"code","2a3c579d":"code","6ee1d04e":"code","b9cd93b8":"code","e101c6e2":"code","23efe970":"code","d685fb88":"code","36078887":"code","4bcfb3b3":"code","1912c799":"code","45f835cd":"code","48723f91":"code","b733fb0e":"markdown","a6512338":"markdown","08f6d89f":"markdown","cdb31411":"markdown","fa736829":"markdown","17958321":"markdown","48486578":"markdown","43458326":"markdown","a478e70a":"markdown","77c2375d":"markdown","eb545ec0":"markdown","c3c71559":"markdown"},"source":{"2239d90c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n\n\nfrom collections import Counter\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error, mean_squared_log_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","46cf2974":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b4c91979":"# Path to data\ndata_path = '\/kaggle\/input\/covid-vaccination-vs-death\/covid-vaccination-vs-death_ratio.csv'","5b9a94df":"# Create dataframe\ndata_df = pd.read_csv(data_path)\n\n# Check result \ndata_df.head().T","96a7dd45":"data_df.info()","f7cdbb25":"data_df.drop('Unnamed: 0', axis=1, inplace=True)","edb1b19d":"data_df.shape","b5a08571":"sns.set(rc={'figure.figsize':(10,5)})\nsns.set_style('whitegrid')\nsns.histplot(data=data_df, x=\"ratio\", color=\"seagreen\")\nplt.title(\"Distribution of vaccinated people by the population\", fontsize=18);","e42f815a":"sns.set(rc={'figure.figsize':(10,5)})\nsns.set_style('whitegrid')\nsns.histplot(data=data_df, x=\"total_vaccinations\", color=\"seagreen\", log_scale=True)\nplt.title(\"Distribution of total vaccinations (log scale)\", fontsize=18);","0ae39879":"plt.hist(data_df.New_deaths.dropna().values, bins=50, color=\"seagreen\")\nplt.title(\"Distribution of new deaths\", fontsize=18)\nplt.show()","e61aaed9":"# Convert date to Datetime type \ndata_df['date'] = pd.to_datetime(data_df['date'])\n\n# Check result\ndata_df['date'].head()","8d5cb901":"# Identify the categorical variables\ncat_vars = [var for var in data_df.columns if data_df[var].dtype == 'O']\n\n# Number of categorical variables\nprint(f' Number of categorical variables: {len(cat_vars)}')","dec72372":"# Identify the the numerical variables\nnum_vars = [var for var in data_df.columns if var not in cat_vars]\n\n# Number of numerical variables\nprint(f' Number of numerical variables: {len(num_vars)}')","ad3b9580":" # List of the variables that contain missing values\nvars_with_na = [var for var in data_df.columns if data_df[var].isnull().sum() > 0]\n\n# Percentage of missing values\ndata_df[vars_with_na].isnull().mean().sort_values(ascending=False)","d9bd96c7":"# Descriptive statistics\ndata_df[num_vars].describe().T","e5ed5ca7":"# Descriptive statistics\ndata_df[cat_vars].describe().T","ddd4fe1f":"f, ax = plt.subplots(figsize=(10,45))\nsns.countplot(y=data_df.country, order = data_df.country.value_counts().index);\nax.set_title('Distribution of country');\nax.set(ylabel='country')\n\ntotal = len(data_df['country'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n        \nplt.show()","a9392db8":"f, ax = plt.subplots(figsize=(10,12))\nsns.countplot(y=data_df.country, order = data_df.country.value_counts().index[0:21]);\nax.set(ylabel='Countries')\nax.set_title('Top 20 countries')\n\ntotal = len(data_df['country'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\nplt.show()","ef5c7990":"sns.set(rc={'figure.figsize':(25,5)})\nsns.set_style('whitegrid')\nsns.lineplot(data=data_df, x=\"date\", y=\"total_vaccinations\", color=\"seagreen\")\nplt.title(\"Distribution of total vaccinations over time\", fontsize=18);","7db0d8c7":"sns.set(rc={'figure.figsize':(25,5)})\nsns.set_style('whitegrid')\nsns.lineplot(data=data_df, x=\"date\", y=\"New_deaths\", color=\"seagreen\")\nplt.title(\"Distribution of new deaths over time\", fontsize=18);","3ceac47f":"sns.set(rc={'figure.figsize':(25,5)})\nsns.set_style('whitegrid')\nsns.lineplot(data=data_df, x=\"date\", y=\"population\", color=\"seagreen\")\nplt.title(\"Distribution of population over time\", fontsize=18);","c507a7d4":"sns.set(rc={'figure.figsize':(25,5)})\nsns.set_style('whitegrid')\nsns.lineplot(data=data_df, x=\"date\", y=\"ratio\", color=\"seagreen\")\nplt.title(\"Distribution of ratio over time\", fontsize=18);","b652cecd":"sns.set_theme(style=\"white\")\n\n# Compute the correlation matrix\ncorr = data_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 15))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(150, 275, s=80, l=55, n=9, )\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=1, center=0, annot=True, fmt='.2f',\n            square=True, linewidths=2, cbar_kws={\"shrink\": .5})\nplt.show()","2a3c579d":"sns.pairplot(data = data_df, corner=True);","6ee1d04e":"df_russia = data_df[data_df['country']=='Russian Federation']\ndf_russia.plot(\n    kind='scatter',\n    x='ratio',\n    y='New_deaths',\n    label='New_deaths vs ratio(Russia)',\n    alpha=0.2,\n    figsize=(10,10),\n    s=df_russia['New_deaths'],\n    c='ratio',\n    cmap=plt.get_cmap('jet'),\n    colorbar=True)\n\nplt.xlabel('ratio(%)',fontsize=15)\nplt.ylabel('New_deaths(Russia)',fontsize=18)\nplt.title('ratio vs New_deaths Russia',fontsize=22)","b9cd93b8":"# Define x,y\nX = df_russia[['ratio']]\ny = df_russia[['New_deaths']]","e101c6e2":"# Split data\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.20, random_state=42)","23efe970":"# Standard Normalization\nstd = StandardScaler()\n\nX_train = std.fit_transform(X_train)\nX_test = std.fit_transform(X_test)\n\n\ny_train = std.fit_transform(y_train)\ny_test = std.fit_transform(y_test)","d685fb88":"# Instantiate model\nmodel = LinearRegression()\n\n# Fit the model\nmodel.fit(X_train,y_train)","36078887":"# Coefficients\nprint ('Coefficients: ', model.coef_)\nprint ('Intercept: ',model.intercept_)","4bcfb3b3":"# Prediction\ny_pred = std.inverse_transform(model.predict(X_test))","1912c799":"# Plot result\n\nX = df_russia['ratio']\ny = df_russia['New_deaths']\n\nplt.figure(figsize=(10,10))\nsns.regplot(x=X, y=y)\n\nplt.xlabel('Ratio(Russia)',fontsize=18)\nplt.ylabel('New Deaths',fontsize=18)\nplt.title('Liner Regression',fontsize=20)","45f835cd":"# Create function to evaluate our model\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    test_preds = model.predict(X_test)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Test MAE\": mean_absolute_error(y_test, test_preds),\n              \"Training R^2\": model.score(X_train, y_train),\n              \"Test R^2\": model.score(X_test, y_test)}\n    return scores","48723f91":"show_scores(model)","b733fb0e":"### Numerical variables","a6512338":"### Categorical variables","08f6d89f":"### Missing values","cdb31411":"### IMPORT LIBRARIES","fa736829":"### LOAD DATA","17958321":"# SIMPLE LINEAR REGRESSION","48486578":"## PROJECT 1: COVID vaccination vs. mortality\n\n\n> ### TASK: Stady Simple Linear Regression\n\n\n### Project goals and objectives\n\n#### Project goal\n\n- Studying **Simple Linear Regression**\n\n#### Project objectives\n\n1. Explore and prepare data \n2. Build simple linear regression model\n","43458326":"### Variable Types","a478e70a":"## EXPLORATORY DATA ANALISIS","77c2375d":"#  EVALUATION","eb545ec0":"### Distribution of the target variables","c3c71559":"### Distribution over time"}}