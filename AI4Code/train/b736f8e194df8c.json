{"cell_type":{"05623db3":"code","836bf6a5":"code","b8d12e77":"code","0c736e33":"code","6fd1078b":"code","7a017472":"code","8ac1e687":"code","06a1a850":"code","63722ef2":"code","37fc48c9":"code","1154a11c":"code","a4365d75":"code","adef39aa":"code","59ee0659":"code","2fd22194":"code","0df7d78d":"markdown","f760b992":"markdown","2890f82a":"markdown","ea9dc248":"markdown","6375edee":"markdown","f701fe6b":"markdown","c8897e61":"markdown","adde9cc6":"markdown","a8d83059":"markdown","558d8dba":"markdown","262799d2":"markdown","728404ff":"markdown","183eb3ec":"markdown","6f6244ec":"markdown"},"source":{"05623db3":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport calendar\nimport os\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nprint(os.listdir(\"..\/input\"))\npd.options.display.max_columns = 40","836bf6a5":"data2007 = pd.read_csv(r'..\/input\/2007\/2007.csv')\ndata2008 = pd.read_csv(r'..\/input\/2008\/2008.csv')\ndata1 = pd.concat([data2007, data2008],axis=0).reset_index(drop=True)\ndata1.CancellationCode = data1.CancellationCode.fillna('NoCanc')\n\ndata = data1.copy()","b8d12e77":"print('Total memory usage before variables optimization:', data.memory_usage(deep=True).sum() * 1e-6)\nfor col in data.columns:\n    if data[col].dtype == 'object':\n        data[col] = data[col].astype('category')\n    else:\n        data[col] = data[col].astype('float32')\nprint('Total memory usage after variables optimization:', data.memory_usage(deep=True).sum() * 1e-6)","0c736e33":"for i in ['DayofMonth', 'Month']:\n    data[i] = data[i].astype(int).astype(str).map(lambda x: '0'+x if len(x)==1 else x)\n    \n\ndata.CRSDepTime = data.CRSDepTime.astype(str).map(lambda x: '0'+x[:len(x)-2] if len(x[:len(x)-2])==3 else '00'+x[:len(x)-2] if len(x[:len(x)-2])==2 else '000'+x[:len(x)-2] if len(x[:len(x)-2])==1 else x[:len(x)-2])\n\ndata['Date'] = data.DayofMonth.astype(str) + data.Month.astype(str) + data.Year.astype(int).astype(str) + data.CRSDepTime.astype(str)\ndata['Date'] = pd.to_datetime(data.Date , format='%d%m%Y%H%M')","6fd1078b":"# Median of departure delays in 2007 and 2008 between each carrier\nfig, axarr = plt.subplots(1,2,figsize=(25,7))\nplt.suptitle('Median of departure delays by airlines', fontsize=15)\n\na = data[(data.Year==2007) & (data.DepDelay>0)][['DepDelay','UniqueCarrier']].groupby('UniqueCarrier').median()\nfig1 = sns.barplot(x=a.index, y=a.DepDelay,ax=axarr[0]).grid(b=True,color='lightgrey',alpha=0.5)\naxarr[0].title.set_text('2007')\naxarr[0].axhline(y=np.median(data.DepDelay[data.DepDelay>0][data.Year==2007]))\n\n\nb = data[(data.Year==2008) & (data.DepDelay>0)][['DepDelay','UniqueCarrier']].groupby('UniqueCarrier').median()\nfig2 = sns.barplot(x=b.index, y=b.DepDelay,ax=axarr[1]).grid(b=True,color='lightgrey',alpha=0.5)\naxarr[1].title.set_text('2008')\naxarr[1].axhline(y=np.median(data.DepDelay[data.DepDelay>0][data.Year==2008]))\n\n\nfor i in range(0,2):\n    axarr[i].set_ylabel('Delay (in minutes)', fontsize=11)\n    axarr[i].set_xlabel('Carrier', fontsize=11)","7a017472":"# Median of arrival delays in 2007 and 2008 between each carrier\nfig, axarr = plt.subplots(1,2,figsize=(25,7))\nplt.suptitle('Median of arrival delays by airlines', fontsize=15)\n\na = data[(data.Year==2007) & (data.ArrDelay>0)][['ArrDelay','UniqueCarrier']].groupby('UniqueCarrier').median()\nsns.barplot(x=a.index, y=a.ArrDelay,ax=axarr[0]).grid(b=True,color='lightgrey',alpha=0.5)\naxarr[0].title.set_text('2007')\naxarr[0].axhline(y=np.median(data.ArrDelay[data.ArrDelay>0][data.Year==2007]))\n\n\n\nb = data[(data.Year==2008) & (data.ArrDelay>0)][['ArrDelay','UniqueCarrier']].groupby('UniqueCarrier').median()\nsns.barplot(x=b.index, y=b.ArrDelay,ax=axarr[1]).grid(b=True,color='lightgrey',alpha=0.5)\naxarr[1].title.set_text('2008')\naxarr[1].axhline(y=np.median(data.ArrDelay[data.ArrDelay>0][data.Year==2007]))\n\n\n\nfor i in range(0,2):\n    axarr[i].set_ylabel('Delay (in minutes)', fontsize=11)\n    axarr[i].set_xlabel('Carrier', fontsize=11)","8ac1e687":"Market = pd.DataFrame({'Carriers':data1.UniqueCarrier.value_counts().index,'AmtOfFlights':data1.UniqueCarrier.value_counts().values}).sort_values(by='AmtOfFlights', ascending=False)\nx = Market.iloc[-2:].apply(np.sum,axis=0)\nx.Carriers = 'Other'\nMarket.iloc[-1] = x\nMarket = Market.drop(18, axis=0)\n\n\nplt.figure(figsize=(15,10))\nplt.pie(Market.AmtOfFlights, labels = Market.Carriers)\nplt.title('Amount of flights by each carrier in 2007 and 2008', fontsize=15)\n","06a1a850":"# Amount of flights in each month\ndata1['MonthT'] = np.where(data1.Year==2008,data1.Month+12,data1.Month)\ndata1['Ones'] = 1\nFlightsEM = data1[data1.UniqueCarrier=='WN'].groupby('MonthT')['Ones'].sum()\n\nplt.figure(figsize=(15,7))\nsns.lineplot(x = FlightsEM.index, y=FlightsEM.values).grid(b=True, color='lightgrey')\nplt.title('Number of flights each month',fontsize=15)\nMonthNames = []\nMonthNamesShort = []\nfor i in range(1,13):\n    MonthNames.append(calendar.month_name[i])\n    MonthNamesShort.append(calendar.month_abbr[i])\nplt.xticks(np.arange(1,25,1), labels=MonthNamesShort*2)\nplt.xlabel('Month',fontsize=11)\nplt.ylabel('Amount of flights',fontsize=11)","63722ef2":"# Month to month total flights comparison\nMo2007Flights = data.Month[(data.UniqueCarrier=='WN') & (data.Year==2007)].value_counts()\nMo2008Flights = data.Month[(data.UniqueCarrier=='WN') & (data.Year==2008)].value_counts()\n\nm2m = ((Mo2008Flights - Mo2007Flights) \/ Mo2007Flights) * 100\nplt.figure(figsize=(15,7))\nsns.barplot(x=m2m.index, y=m2m.values)\nplt.title('Total flights growth (month to month comparison)', fontsize=15)\nplt.xticks(range(0,12),labels=MonthNames)\nplt.yticks(range(-2,10,2),labels=['-2%','0%','2%','4%','6%','8%'])\nplt.xlabel('Month',fontsize=11)\nplt.ylabel('Amount of flights',fontsize=11)\nplt.axhline(0,color='green')","37fc48c9":"# Departure delay in each weekday\nfig, axarr = plt.subplots(1,2,figsize=(20,7))\n\nWeekdayName = []\nfor i in range(0,7):\n    WeekdayName.append(calendar.day_name[i])\n\nplt.suptitle('Average delay by day of a week',fontsize=15)\n    \ndataWN = data[data.UniqueCarrier=='WN']\ndelay1 = dataWN.groupby('DayOfWeek')['DepDelay'].mean()\nsns.barplot(x=delay1.index, y=delay1.values, ax=axarr[0]).yaxis.grid(True, color='lightgrey',alpha=0.5)\naxarr[0].set_title('Departure delay', fontsize=11)\n\n\ndelay1 = dataWN.groupby('DayOfWeek')['ArrDelay'].mean()\nsns.barplot(x=delay1.index, y=delay1.values, ax=axarr[1]).yaxis.grid(True, color='lightgrey',alpha=0.5)\naxarr[1].set_title('Arrival delay',fontsize=11)\n\nfor i in [0,1]:\n    axarr[i].set_xticklabels(WeekdayName)\n    axarr[i].set_xlabel('Day', fontsize=11)\n    axarr[i].set_ylabel('Delay (in minutes)', fontsize=11)\n    axarr[i].set_xticklabels(WeekdayName)","1154a11c":"# Delays in each month\nfig, axarr = plt.subplots(1,2,figsize=(20,7))\n\ndataWN = data[data.UniqueCarrier=='WN']\ndelay1 = dataWN.groupby('Month')['DepDelay'].mean()\nsns.barplot(x=delay1.index, y=delay1.values, ax=axarr[0]).yaxis.grid(True, color='lightgrey',alpha=0.5)\n\ndataWN = data[data.UniqueCarrier=='WN']\ndelay1 = dataWN.groupby('Month')['ArrDelay'].mean()\nsns.barplot(x=delay1.index, y=delay1.values, ax=axarr[1]).yaxis.grid(True, color='lightgrey',alpha=0.5)","a4365d75":"# Percent of delayed flights\nfig, axarr = plt.subplots(2,1,figsize=(15,10))\nsns.kdeplot(data1.DepDelay[data1.UniqueCarrier=='WN'], legend=False, bw=5, ax=axarr[0]).grid(b=True,color='lightgrey')\naxarr[0].title.set_text('Distribution of departure delays')\naxarr[0].set_xlim([0,150])\naxarr[0].set_yticklabels(['0%','1%','2%','3%','4%'])\n\n\nsns.kdeplot(data1.ArrDelay[data1.UniqueCarrier=='WN'], legend=False, bw=5, ax=axarr[1]).grid(b=True,color='lightgrey')\nplt.xlabel('Delay (in minutes)',fontsize=11)\nplt.ylabel('% of delays', fontsize=11)\naxarr[1].title.set_text('Distribution of arrival delays')\naxarr[1].set_yticklabels(['0%','1%','2%','3%','4%', '5%', '6%'])\naxarr[1].set_xlim([0,150])","adef39aa":"import datetime\nfig, axarr = plt.subplots(figsize=(15,7))\n\ndataWN['Hour'] = dataWN.Date.map(lambda x: x.hour)\nDelaysByHour = dataWN.groupby('Hour')[['ArrDelay','DepDelay']].mean()\nplt.plot( DelaysByHour.index, DelaysByHour.ArrDelay, color='green', linewidth=4)\nplt.plot( DelaysByHour.index, DelaysByHour.DepDelay, color='red', linewidth=4)\nplt.legend(labels = ['Arrival delay', 'Departure delay'])\nplt.grid(b='True', color='lightgrey')\nplt.title('Average arrival and departure delay (by hours)', fontsize=15)\nplt.xlabel('Hour', fontsize=11)\nplt.ylabel('Delay (in minutes)', fontsize=11)\nplt.xticks(range(5,25,2))","59ee0659":"names = ['id','name','city','country','iata','icao','lat','lon','alt','timezone','dst','tz','type','source']\nairports = pd.read_csv('https:\/\/github.com\/ipython-books\/cookbook-2nd-data\/blob\/master\/airports.dat?raw=true', names=names)\n","2fd22194":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\nfor carrier in data.UniqueCarrier.unique():\n    PathsForMap = (data1.Origin[data.UniqueCarrier==carrier] + data1.Dest[data.UniqueCarrier==carrier])\n    PathsForMap = PathsForMap.map(lambda x: sorted([x[0:3],x[3:]])).map(lambda x: x[0]+x[1])\n\n\n    plt.figure(figsize=(20, 9)) \n    m = Basemap(width=7000000,height=3300000,resolution='c',projection='aea',lat_1=35.,lat_2=45,lon_0=-100,lat_0=40)\n    plt.title('{} flight map'.format(carrier),fontsize=15)\n    m.drawcoastlines(linewidth=0.6)\n    m.drawstates(linewidth=0.2, linestyle='solid', color='k')\n    m.drawcountries(linewidth=0.6)\n    m.shadedrelief()\n\n\n    indexes = list(PathsForMap.value_counts().index)\n    values = PathsForMap.value_counts().values\n\n    NotUS = ['SJU', 'STT', 'STX','BQN','PSE']\n\n    for i in indexes:\n        if i[:3] in NotUS or i[3:] in NotUS:\n            continue\n        else:\n            location1LAT = airports.lat[airports.iata==i[:3]]\n            location1LONG = airports.lon[airports.iata==i[:3]]\n            location2LAT = airports.lat[airports.iata==i[3:]]\n            location2LONG = airports.lon[airports.iata==i[3:]]\n\n        m.drawgreatcircle(float(location1LONG),float(location1LAT),float(location2LONG),float(location2LAT),\n        linewidth=1, color=(values[indexes.index(i)]\/values[0],0,1-values[indexes.index(i)]\/values[0]))#color=(1-((len(indexes)-indexes.index(i))\/len(indexes)),0,((len(indexes)-indexes.index(i))\/len(indexes)))","0df7d78d":"## Data description\n\nData source: http:\/\/stat-computing.org\/dataexpo\/2009\/the-data.html\n\nFor the sake of simplicty, I am going to include only two most recent years in analysis (2007 and 2008). However, it still takes a lot of Kaggle's resources, so in order to perform analysis more efficiently, some database resolutions should be introduced. \n\n**Dataset features description:**\n1. Year\t1987-2008\n1. Month\t1-12\n1. DayofMonth\t1-31\n1. DayOfWeek\t1 (Monday) - 7 (Sunday)\n1. DepTime\tactual departure time (local, hhmm)\n1. CRSDepTime\tscheduled departure time (local, hhmm)\n1. ArrTime\tactual arrival time (local, hhmm)\n1. CRSArrTime\tscheduled arrival time (local, hhmm)\n1. UniqueCarrier\tunique carrier code\n1. FlightNum\tflight number\n1. TailNum\tplane tail number\n1. ActualElapsedTime\tin minutes\n1. CRSElapsedTime\tin minutes\n1. AirTime\tin minutes\n1. ArrDelay\tarrival delay, in minutes\n1. DepDelay\tdeparture delay, in minutes\n1. Origin\torigin IATA airport code\n1. Dest\tdestination IATA airport code\n1. Distance\tin miles\n1. TaxiIn\ttaxi in time, in minutes\n1. TaxiOut\ttaxi out time in minutes\n1. Cancelled\twas the flight cancelled?\n1. CancellationCode\treason for cancellation (A = carrier, B = weather, C = NAS, D = security)\n1. Diverted\t1 = yes, 0 = no\n1. CarrierDelay\tin minutes\n1. WeatherDelay\tin minutes\n1. NASDelay\tin minutes\n1. SecurityDelay\tin minutes\n1. LateAircraftDelay\tin minutes\n\nMy main focus will be on Southwest Airlines, but I am going to compare those airlines with other ones at a couple of aspects as well.","f760b992":"While dealing with seasonal data, it would be unfair to consider flight grow comparing previous month to recent - that is why I decided to compare each month from 2008 to adequate month in 2007. As you may see, top performance in comparison was reached in February and after that, month to month flights grow was on average around 3% percent. After August things went downhill, which may be considered as the \"peak\" of financial crisis.\n\nSeasonality can be spotted not only if it comes to amount of flights, but delays as well.","2890f82a":"Southwest is keeping its departure delay and arrival delay slightly below median value. It is worth to underline that they were not able to decrease the time of departure delay in 2008 and arrival delay slightly increased.","ea9dc248":"No matter if we are talking about departure or arrival delays, the hardest day for Southwest Airlines is Friday, and the easiest is Saturday. One of the things which you can spot from charts so far is that Southwest is able to catch up delays and land on a destination airport earlier than we could expect from departure delay.","6375edee":"We are including only two years, but it seems that at least in the case of Southwest Airlines, we are dealing with seasonality with the lowest amount of flights around February and highest around July or August. \n\nAlso, because of seasonal character of data, it is required to compare any changes to the adequate month in previous years.","f701fe6b":"I am going to focus my attention only on data visualisation here. In order to make the charts as tidy as possible I am going to use line, bar and pie charts. Hopefully, after reading this kernel more advanced users will be able to enrich their knowledge, because I am going to create some charts using Matplotlib sub library called Basemap as well as Geopy - library helpful for retrieving object's longitude and latitude","c8897e61":"## Southwest Airlines basic characteristics","adde9cc6":"Datetime variable will be useful for further analysis, so in this place I am going to use *DayofMonth*, *Month* and *CRSDepTime* variables into *Date*.","a8d83059":"One of the possibly best performance measures in provided dataset is an amount of flights by each carrier, so I decided to plot it month by month.","558d8dba":"In order to make actions faster, I am going to convert the format of every object type variable into category and every 64-bit variable to 32-bit. This operation decreases required memory size by a half.","262799d2":"## Comparison with competition\nDuring comparison, I have chosen to focus only on delays and market share evaluated in the amount of flights in both years.","728404ff":"I am fully aware that pie chart is usually disregarded in DS communities (I guess due to limited readability), but in my opinion, we can spot the most important information - Southwest is far away from its competitors with the twice amount of flights as their second biggest competitor - American Airlines. From the chart, we can also see, that Southwest Airlines is meeting around 20% demand for flights around the United States.","183eb3ec":"As you may see on maps above, some airlines occupy whole US territory, while others focus mainly on flying on the east side of the US or flights to Alaska or other dependent territories.\n\nI tried to modify colors on maps so the most common flights are red, and the rarer the flight is, the more blue it becomes.\n\n","6f6244ec":"Both arrival and departure delay are increasing with day duration, peaking just before ending air traffic.\n\n## Traffic map\nNow, I am going to present most often flight paths took by Southwest Airlines. In order to do it, I will use two separate libraries - Basemap and Geopy. Using Basemap allows to create a map of a specific area, add lines representing each flight patch, choose color scheme, etc. Geopy gives the opportunity to automatically search for each airport without decoding their IATA codes and searching for longitude and latitude.\n\nRed lines represent flight patches took most often by Southwest Airlines - no matter if direction is from X to Y or Y to X. The colder the color is, the more rare specific flight patches are."}}