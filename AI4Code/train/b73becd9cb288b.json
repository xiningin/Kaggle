{"cell_type":{"c200af74":"code","586ba303":"code","72649df1":"code","1b20dfe1":"code","b4e2774a":"code","2b418898":"code","594b9436":"code","bffa126e":"code","3cce4683":"code","659cadb8":"code","7107ae52":"code","5aca019f":"code","9e2d222e":"code","f583c127":"code","21f9c93d":"code","cbe51321":"code","5fe24e6f":"code","6bffc99f":"code","31212f5c":"code","19b475d3":"code","9ad082ae":"code","e7a174e4":"code","5059e6ed":"code","a76ff3a1":"code","e63c5f5c":"code","8edca7bb":"code","2d2959d1":"code","315b4119":"code","342c5a80":"code","6ab86ed5":"code","b601cd16":"code","b5c15c13":"code","e8fc5ee7":"code","0f3dace7":"code","6013671b":"code","b9cb84ad":"code","a5b4f454":"code","90edc9d7":"code","da554ec4":"code","9dc349f6":"code","5f3d2c18":"code","a5f9114f":"code","36435968":"code","18c1a83a":"code","bddede86":"code","d86061aa":"code","a7661d1d":"code","9e2d2c5c":"code","6c0d18a7":"code","c72dd838":"code","5e9358d1":"code","c3be66d5":"code","8831ac7e":"code","2b6c1d4a":"code","b2e9cfff":"code","6135a579":"code","73b94789":"code","e6d39d07":"code","d689a049":"code","6f9c9f3e":"code","4e43e18a":"code","c768fa6c":"code","df48e573":"code","c363c952":"code","636cdc8f":"code","a6ff3ca6":"code","92417452":"code","cb74e890":"code","6c6e0e01":"code","fe494513":"code","4c7d52d9":"code","dd6eee0a":"code","922c594f":"code","ec8bb8f4":"code","9f41d565":"code","f6009f9d":"code","0435e175":"code","19ec3544":"code","3c6b003a":"code","8b3f1a54":"code","a520178d":"code","56154d37":"code","07d425d5":"code","e22b5887":"code","1da35e4e":"code","4ba886b6":"code","3305b4a8":"code","d6d3e5e1":"code","d5876d24":"code","923c1c71":"code","3ddc1aca":"code","e0fe09c2":"code","ce9228c6":"code","3e6fb891":"code","ffe4d0cf":"code","99cd5c3a":"code","c0168cd8":"code","c51e7964":"code","a140c2e6":"code","c9c6e466":"code","295f23de":"code","9ff73d9f":"code","45dfb6ce":"code","29f8e269":"code","4a179a06":"code","7b2c3b44":"code","1212568f":"code","9e057893":"code","4d49f44a":"code","cb82c195":"code","6201b33f":"code","4e3d627b":"code","a575071c":"code","0bfdfd2c":"code","48832752":"code","723974ad":"code","6faf5ff9":"code","5a7bdeff":"code","7af4c578":"code","64ba122f":"code","0e3a5f34":"code","53a58a61":"code","70d10088":"code","583f649e":"code","ad8fcfe2":"code","8c91a4c0":"code","687f3f20":"code","daa06dfd":"code","6b23aaef":"code","c028e168":"code","942e12db":"code","21a2f5c5":"code","e15f5055":"code","92cbb7fc":"code","17812a7f":"code","e17ba876":"code","2b05a7a3":"code","076e0ebe":"code","30e205b6":"code","eb4206ac":"code","70c160f8":"code","b6a75547":"code","fabf0903":"code","9d0535cd":"code","a247cf48":"code","f1a8b138":"code","e951edfd":"code","6a190d57":"code","db68f437":"code","f82af6b8":"code","283afc2f":"code","9ff1c0ef":"code","69236944":"code","fa54151e":"code","e057ab12":"code","cbfac711":"code","919f8c56":"code","6c587afa":"markdown","45cf4ed0":"markdown","2d7d6983":"markdown","0a4e9c83":"markdown","41103ff3":"markdown","8a4acc1a":"markdown","adf152e0":"markdown","f072a48b":"markdown","086d6f76":"markdown","25c28a1b":"markdown","f19a2ad9":"markdown","5a5638da":"markdown","f84ff03e":"markdown","24b48584":"markdown","0406cfb4":"markdown","311f877f":"markdown","30823087":"markdown","b1d0adbb":"markdown","0056b67f":"markdown","3b6c5597":"markdown","39bf5473":"markdown","b873e126":"markdown","4b30c2d1":"markdown","3aa312f2":"markdown","bc346dea":"markdown","9eafabe6":"markdown","f0679cff":"markdown","a308f48c":"markdown","7fb4d316":"markdown","7e81f095":"markdown","e4130f35":"markdown","79259f17":"markdown","f0ccd20b":"markdown","7471fc18":"markdown","e3b57351":"markdown","4f96a1a6":"markdown","f8920d5e":"markdown","31681c73":"markdown","bab36a0a":"markdown","fcf58daf":"markdown","25390bca":"markdown","40623e2f":"markdown","2712e39e":"markdown","e141c1f6":"markdown","1e5adad0":"markdown","b55addfa":"markdown","5a4a5393":"markdown","d4c5f59c":"markdown","5a23443c":"markdown","35e747e5":"markdown","6754b663":"markdown","380b38e7":"markdown","8ee94c47":"markdown","61576dd3":"markdown"},"source":{"c200af74":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt #Visualization\nimport seaborn as sns #Visualization\nfrom scipy.stats import norm #Analysis\nfrom sklearn.preprocessing import StandardScaler #Analysis\nfrom scipy import stats #Analysis\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc\n\nimport missingno as msno\n\nprint(os.listdir(\"..\/input\"))\n","586ba303":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\n\nprint(\"train data: \", df_train.shape)\nprint(\"test data: \", df_test.shape)","72649df1":"df_train.head()","1b20dfe1":"# Check for duplicates\nidsUnique = len(set(df_train.id))\nidsTotal = df_train.shape[0]\nidsDupli = idsTotal - idsUnique\nprint(\"There are \" + str(idsDupli) + \" duplicate IDs for \" + str(idsTotal) + \" total entries\")\n\n### set: https:\/\/www.codingfactory.net\/10043","b4e2774a":"msno.matrix(df_train)","2b418898":"#Missing data check\ntrain_na_ratio = (df_train.isnull().sum() \/ len(df_train)) * 100\nfor i in range(np.shape(df_train)[1]):\n    print(\"There are \" + str(train_na_ratio[i]) + \" ratio of missing data in \" + str(df_train.columns[i]) + \" variable\" )","594b9436":"df_test.head()","bffa126e":"# Check for duplicates\nidsUnique = len(set(df_test.id))\nidsTotal = df_test.shape[0]\nidsDupli = idsTotal - idsUnique\nprint(\"There are \" + str(idsDupli) + \" duplicate IDs for \" + str(idsTotal) + \" total entries\")","3cce4683":"msno.matrix(df_test)","659cadb8":"#Missing data check\ntest_na_ratio = (df_test.isnull().sum() \/ len(df_test)) * 100\nfor i in range(np.shape(df_test)[1]):\n    print(\"There are \" + str(test_na_ratio[i]) + \" ratio of missing data in \" + str(df_test.columns[i]) + \" variable\" )","7107ae52":"df_train['date'] = df_train['date'].apply(lambda x : str(x[:8])).astype(str)\ndf_test['date'] = df_test['date'].apply(lambda x : str(x[:8])).astype(str)","5aca019f":"df_train.date","9e2d222e":"np.shape(df_train.columns)","f583c127":"np.shape(df_test.columns)","21f9c93d":"fig, ax = plt.subplots(11, 2, figsize=(20, 60))\n\ncount = 0\ncolumns = df_train.columns\nfor row in range(11):\n    for col in range(2):\n        sns.kdeplot(df_train[columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(columns[count], fontsize=15)\n        count+=1\n        if count == 21 :\n            break","cbe51321":"#descriptive statistics summary\ndf_train.price.describe()","5fe24e6f":"#histogram\nplt.figure(figsize=(8, 6))\nsns.distplot(df_train['price'])","6bffc99f":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","31212f5c":"fig = plt.figure(figsize = (15,10))\n\nfig.add_subplot(1,2,1)\nres = stats.probplot(df_train['price'], plot=plt)\n\nfig.add_subplot(1,2,2)\nres = stats.probplot(np.log1p(df_train['price']), plot=plt)","19b475d3":"df_train['price'] = np.log1p(df_train['price'])\n#histogram\nplt.figure(figsize=(8, 6))\nsns.distplot(df_train['price'])","9ad082ae":"corrmat = df_train.corr()\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(16,14))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\n\nsns.heatmap(corrmat, fmt='.2f',linewidths=0.1, vmax=0.9, square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 10})","e7a174e4":"print(corrmat.price)","5059e6ed":"# Find most important features relative to target\n\ncorrmat.sort_values([\"price\"], ascending = False, inplace = True)\nprint(corrmat.price)","a76ff3a1":"cor_abs = abs(df_train.corr(method='spearman'))\ncor_cols = cor_abs.nlargest(n=10, columns='price').index # price\uacfc correlation\uc774 \ub192\uc740 column 10\uac1c \ubf51\uae30(\ub0b4\ub9bc\ucc28\uc21c)\n# spearman coefficient matrix\ncor = np.array(stats.spearmanr(df_train[cor_cols].values))[0] # 10 x 10\nprint(cor_cols.values)\nplt.figure(figsize=(10,10))\ncolormap = plt.cm.RdBu\nplt.title('Spearman Correlation of Features', y=1.05, size=15)\nsns.heatmap(cor, fmt='.2f',linewidths=0.1, vmax=0.9, square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 8}, xticklabels=cor_cols.values, yticklabels=cor_cols.values)","e63c5f5c":"print(cor_abs.price)","8edca7bb":"# Find most important features relative to target\n\ncor_abs.sort_values([\"price\"], ascending = False, inplace = True)\nprint(cor_abs.price)","2d2959d1":"# price\uacfc correlation\uc774 \ub192\uc740 \ubcc0\uc218\ub4e4\ncor_cols","315b4119":"df_train.head(20)","342c5a80":"df_train.loc[df_train['sqft_above']\/df_train['floors']>df_train['sqft_lot']]","6ab86ed5":"df_train.loc[df_train['id']==2464]['sqft_above']\/df_train.loc[df_train['id']==2464]['floors']","b601cd16":"df_train.loc[df_train['id']==10987]['sqft_above']\/df_train.loc[df_train['id']==10987]['floors']","b5c15c13":"df_train.loc[df_train['id']==12104]['sqft_above']\/df_train.loc[df_train['id']==12104]['floors']","e8fc5ee7":"data = pd.concat([df_train['price'], df_train['sqft_lot']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_lot', y=\"price\", data=data, marker=\"+\", color=\"g\")","0f3dace7":"data = pd.concat([df_train['sqft_living'], df_train['sqft_lot']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_lot', y=\"sqft_living\", data=data, marker=\"+\", color=\"g\")","6013671b":"df_train.loc[(df_train['sqft_lot'] > 1500000)]","b9cb84ad":"data = pd.concat([df_test['sqft_living'], df_test['sqft_lot']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_lot', y=\"sqft_living\", data=data, marker=\"+\", color=\"g\")","a5b4f454":"df_test.loc[(df_test['sqft_lot'] > 1000000)]","90edc9d7":"data = pd.concat([df_train['price'], df_train['sqft_lot15']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_lot15', y=\"price\", data=data, marker=\"+\", color=\"g\")","da554ec4":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='grade', y=\"price\", data=data)","9dc349f6":"sns.set(color_codes=True)\ndata = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_living', y=\"price\", data=data, marker=\"+\", color=\"g\")\n\n# seaborn, regplot: https:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html","5f3d2c18":"plt.figure(figsize = (8, 5))\nsns.jointplot(df_train.sqft_living, df_train.price, \n              alpha = 0.5)\nplt.xlabel('sqft_living')\nplt.ylabel('price')\nplt.show()","a5f9114f":"data = pd.concat([df_train['price'], df_train['sqft_living15']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_living15', y=\"price\", data=data, marker=\"+\", color=\"g\")","36435968":"plt.plot(df_train['sqft_living15']-df_train['sqft_living'])","18c1a83a":"plt.plot(df_train['sqft_lot15']-df_train['sqft_lot'])","bddede86":"df_train.loc[(df_train['sqft_lot15']-df_train['sqft_lot'] < -1200000)]","d86061aa":"plt.figure(figsize=(20, 14))\nsns.scatterplot('long','lat',hue='price',data=df_train)","a7661d1d":"plt.figure(figsize=(20, 14))\nsns.scatterplot('long','lat',hue='sqft_lot',data=df_train)","9e2d2c5c":"plt.figure(figsize=(20, 14))\nsns.scatterplot('long','lat',hue='sqft_lot15',data=df_train)","6c0d18a7":"plt.figure(figsize=(20, 14))\nsns.scatterplot('long','lat',hue='sqft_living',data=df_train)","c72dd838":"plt.figure(figsize=(20, 14))\nsns.scatterplot('long','lat',hue='sqft_living15',data=df_train)","5e9358d1":"data = pd.concat([df_train['price'], df_train['sqft_above']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_above', y=\"price\", data=data, marker=\"+\", color=\"g\")","c3be66d5":"data = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bathrooms', y=\"price\", data=data)","8831ac7e":"data = pd.concat([df_train['price'], df_train['lat']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='lat', y=\"price\", data=data, marker=\"+\", color=\"g\")","2b6c1d4a":"data = pd.concat([df_train['price'], df_train['long']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='long', y=\"price\", data=data, marker=\"+\", color=\"g\")","b2e9cfff":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bedrooms', y=\"price\", data=data)","6135a579":"df_train.bedrooms.describe()","73b94789":"data = pd.concat([df_train['price'], df_train['floors']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='floors', y=\"price\", data=data)","e6d39d07":"df_train.floors.describe()","d689a049":"df_train.view.describe()","6f9c9f3e":"plt.plot(df_train.view, '+')","4e43e18a":"data = pd.concat([df_train['price'], df_train['view']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='view', y=\"price\", data=data)","c768fa6c":"condition = df_train['condition'].value_counts()\n\nprint(\"Condition counting: \")\nprint(condition)\n\nfig, ax = plt.subplots(ncols=2, figsize=(14,5))\nsns.countplot(x='condition', data=df_train, ax=ax[0])\nsns.boxplot(x='condition', y= 'price',\n            data=df_train, ax=ax[1])\nplt.show()","df48e573":"plt.figure(figsize = (12,8))\ng = sns.FacetGrid(data=df_train, hue='condition',size= 5, aspect=2)\ng.map(plt.scatter, \"sqft_living\", \"price\").add_legend()\nplt.show()","c363c952":"condition = df_train['grade'].value_counts()\n\nprint(\"Grade counting: \")\nprint(condition)\n\nfig, ax = plt.subplots(ncols=2, figsize=(14,5))\nsns.countplot(x='grade', data=df_train, ax=ax[0])\nsns.boxplot(x='grade', y= 'price',\n            data=df_train, ax=ax[1])\nplt.show()","636cdc8f":"plt.figure(figsize = (12,8))\ng = sns.FacetGrid(data=df_train, hue='grade',size= 5, aspect=2)\ng.map(plt.scatter, \"sqft_living\", \"price\").add_legend()\nplt.show()","a6ff3ca6":"#Clearly view of bathrooms and bedrooms correlation\n\nbath = ['bathrooms', 'bedrooms']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[bath[0]], df_train[bath[1]], margins=True).style.background_gradient(cmap = cm)","92417452":"bath_cond = ['bathrooms', 'condition']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[bath_cond[0]], df_train[bath_cond[1]], margins=True).style.background_gradient(cmap = cm)","cb74e890":"bed_cond = ['bedrooms', 'condition']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[bed_cond[0]], df_train[bed_cond[1]], margins=True).style.background_gradient(cmap = cm)","6c6e0e01":"cond_water = ['condition', 'waterfront']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[cond_water[0]], df_train[cond_water[1]], margins=True).style.background_gradient(cmap = cm)","fe494513":"grade_cond = ['grade', 'condition']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[grade_cond[0]], df_train[grade_cond[1]], margins=True).style.background_gradient(cmap = cm)","4c7d52d9":"grade_bed = ['grade', 'bedrooms']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[grade_bed[0]], df_train[grade_bed[1]], margins=True).style.background_gradient(cmap = cm)","dd6eee0a":"grade_bath = ['grade', 'bathrooms']\ncm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(df_train[grade_bath[0]], df_train[grade_bath[1]], margins=True).style.background_gradient(cmap = cm)","922c594f":"#sqft_living vs price\nsns.set(color_codes=True)\ndata = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_living', y=\"price\", data=data, marker=\"+\", color=\"g\")","ec8bb8f4":"df_train.loc[df_train['sqft_living'] > 13000]","9f41d565":"#df_train = df_train.loc[df_train['id']!=8912]","f6009f9d":"#df_train[df_train['id']==8912]","0435e175":"#sqft_living vs price\nsns.set(color_codes=True)\ndata = pd.concat([df_train['price'], df_train['sqft_living']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.regplot(x='sqft_living', y=\"price\", data=data, marker=\"+\", color=\"g\")","19ec3544":"df_train.loc[df_train['sqft_living'] > 11000]","3c6b003a":"df_train.loc[(df_train['grade'] == 13)]","8b3f1a54":"#df_train = df_train.loc[df_train['id']!=5108]","a520178d":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='grade', y=\"price\", data=data)","56154d37":"df_train.loc[(df_train['grade'] == 3)]","07d425d5":"df_train.loc[(df_train['price']>12) & (df_train['grade'] == 3)]","e22b5887":"df_train.loc[(df_train['price']>14.7) & (df_train['grade'] == 8)]","1da35e4e":"df_train.loc[(df_train['price']>15.5) & (df_train['grade'] == 11)]","4ba886b6":"df_train.loc[(df_train['price']>14.5) & (df_train['grade'] == 7)]","3305b4a8":"#df_train = df_train.loc[df_train['id']!=2302]\n#df_train = df_train.loc[df_train['id']!=4123]\n#df_train = df_train.loc[df_train['id']!=7173]\n#df_train = df_train.loc[df_train['id']!=2775]\n#df_train = df_train.loc[df_train['id']!=12346]","d6d3e5e1":"data = pd.concat([df_train['price'], df_train['grade']], axis=1)\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='grade', y=\"price\", data=data)","d5876d24":"data = pd.concat([df_train['price'], df_train['bedrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bedrooms', y=\"price\", data=data)","923c1c71":"df_train.loc[df_train['bedrooms']>=10]","3ddc1aca":"df_test.loc[df_test['bedrooms']>=10]","e0fe09c2":"df_test.loc[df_test['id']==19745]","ce9228c6":"df_train.loc[(df_train['sqft_living']<=1620) & (df_train['sqft_living']>=1500)]","3e6fb891":"data1 = df_train.loc[(df_train['sqft_living']<=1620) & (df_train['sqft_living']>=1500)]\ndata2 = pd.concat([data1['sqft_living'], data1['bedrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bedrooms', y=\"sqft_living\", data=data2)","ffe4d0cf":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(data1[data1['bedrooms']==2]['sqft_living'], ax=ax)\nsns.kdeplot(data1[data1['bedrooms']==3]['sqft_living'], ax=ax)\nsns.kdeplot(data1[data1['bedrooms']==4]['sqft_living'], ax=ax)\nsns.kdeplot(data1[data1['bedrooms']==5]['sqft_living'], ax=ax)\nplt.legend(['bedrooms == 2', 'bedrooms == 3', 'bedrooms == 4', 'bedrooms == 5'])\nplt.show()","99cd5c3a":"# train\ub370\uc774\ud130 \ub0b4 bedrooms \uac1c\uc218\uc640 sqft_living\uc758 \uad00\uacc4\ndata = pd.concat([df_train['sqft_living'], df_train['bedrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bedrooms', y=\"sqft_living\", data=data)","c0168cd8":"# test\ub370\uc774\ud130 \ub0b4 bedrooms \uac1c\uc218\uc640 sqft_living\uc758 \uad00\uacc4\ndata = pd.concat([df_test['sqft_living'], df_test['bedrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bedrooms', y=\"sqft_living\", data=data)","c51e7964":"df_test.loc[df_test['id']==19745].bedrooms","a140c2e6":"df_test.loc[df_test['id']==19745, 'bedrooms'] = 3\n#df_test.loc[df_test['id']==19745].bedrooms = 3","c9c6e466":"df_test.loc[df_test['id']==19745].bedrooms","295f23de":"#train \ub370\uc774\ud130. price vs bathrooms\ndata = pd.concat([df_train['price'], df_train['bathrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bathrooms', y=\"price\", data=data)","9ff73d9f":"#train \ub370\uc774\ud130. sqft_living vs bathrooms\ndata = pd.concat([df_train['sqft_living'], df_train['bathrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bathrooms', y=\"sqft_living\", data=data)","45dfb6ce":"#test \ub370\uc774\ud130. sqft_living vs bathrooms\ndata = pd.concat([df_test['sqft_living'], df_test['bathrooms']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='bathrooms', y=\"sqft_living\", data=data)","29f8e269":"df_train.loc[df_train['bathrooms']>6]","4a179a06":"df_train.loc[(df_train['bathrooms']>=6.75) & (df_train['bathrooms']<=7.5)]","7b2c3b44":"#df_train = df_train.loc[df_train['id']!=2859]\n#df_train = df_train.loc[df_train['id']!=5990]","1212568f":"#skew_columns = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\nskew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\n#skew_columns = ['sqft_living', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\n\n\nfig, ax = plt.subplots(3, 2, figsize=(10, 15))\n\ncount = 0\nfor row in range(3):\n    for col in range(2):\n        if count == 6:\n            break\n        sns.kdeplot(df_train[skew_columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(skew_columns[count], fontsize=15)\n        count+=1","9e057893":"#from scipy.special import boxcox1p\n#lam = 0.15\n\n#for c in skew_columns:\n#    df_train[c] = boxcox1p(df_train[c], lam)\n#    df_test[c] = boxcox1p(df_test[c], lam)\n    \nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c])\n    df_test[c] = np.log1p(df_test[c])","4d49f44a":"#for c in skew_columns:\n#    df_train[c] = np.log1p(df_train[c].values)\n#    df_test[c] = np.log1p(df_test[c].values)","cb82c195":"fig, ax = plt.subplots(3, 2, figsize=(10, 15))\n\ncount = 0\nfor row in range(3):\n    for col in range(2):\n        if count == 6:\n            break\n        sns.kdeplot(df_train[skew_columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(skew_columns[count], fontsize=15)\n        count+=1","6201b33f":"for df in [df_train,df_test]:\n    df['yr_renovated'] = df['yr_renovated'].apply(lambda x: np.nan if x == 0 else x)\n    df['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])","4e3d627b":"df_train.head()","a575071c":"for df in [df_train,df_test]:\n    df['date(new)'] = df['date'].apply(lambda x: int(x[4:8])+800 if x[:4] == '2015' else int(x[4:8])-400)\n    del df['date']\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    df['grade_condition'] = df['grade'] * df['condition']\n    df['sqft_ratio'] = df['sqft_living'] \/ df['sqft_lot']\n    df['sqft_total_size'] = df['sqft_above'] + df['sqft_basement']\n    #df['sqft_ratio15'] = df['sqft_living15'] \/ df['sqft_lot15'] \n    #df['sqft_ratio_1'] = df['sqft_living'] \/ df['sqft_total_size'] \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built'] \n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1) #\uc7ac\uac74\ucd95 \uc5ec\ubd80\n    df['yr_renovated'] = df['yr_renovated'].astype('int')","0bfdfd2c":"df_train.head()","48832752":"len(set(df_train['zipcode'].values))","723974ad":"data = pd.concat([df_train['price'], df_train['zipcode']], axis=1)\nplt.figure(figsize=(18, 6))\nsns.boxplot(x='zipcode', y=\"price\", data=data)","6faf5ff9":"## \ud604\uc6b0\ub2d8 kernel \ucc38\uace0 (https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12)\ndf_train['per_price'] = df_train['price']\/df_train['sqft_total_size']\n","5a7bdeff":"# 70\uac1c zipcode group\ub4e4\uc5d0 \ub300\ud55c mean & var \ubcc0\uc218 \ucd94\ucd9c\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\n## groupby, \uc5f0\uc0b0, agg. \ucc38\uace0 (https:\/\/datascienceschool.net\/view-notebook\/76dcd63bba2c4959af15bec41b197e7c\/)\n## reset_index \ucc38\uace0 (https:\/\/datascienceschool.net\/view-notebook\/a49bde24674a46699639c1fa9bb7e213\/)\nzipcode_price","7af4c578":"print(len(df_train.columns))\nprint(len(df_test.columns))","64ba122f":"df_train.columns","0e3a5f34":"df_test.columns","53a58a61":"#mean, var \ubcc0\uc218 2\uac1c\uc529 \ucd94\uac00\ub428\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')","70d10088":"print(len(df_train.columns))\nprint(len(df_test.columns))","583f649e":"# \uba74\uc801 \ub2f9 \uac00\uaca9\uc758 mean\/var \uc774\uc5c8\uc73c\ubbc0\ub85c, \uc774\ub97c total_size\uc640 \uacf1\ud574\uc90c\nfor df in [df_train,df_test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total_size']\n    df['zipcode_var'] = df['var'] * df['sqft_total_size']\n    #del df['mean']; del df['var']","ad8fcfe2":"print(len(df_train.columns))\nprint(len(df_test.columns))","8c91a4c0":"df_train.columns","687f3f20":"df_train.head()","daa06dfd":"#skew_columns = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\nskew_columns = ['mean', 'var', 'zipcode_mean', 'zipcode_var']\n#skew_columns = ['sqft_living', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\n\n\nfig, ax = plt.subplots(2, 2, figsize=(10, 15))\n\ncount = 0\nfor row in range(2):\n    for col in range(2):\n        if count == 4:\n            break\n        sns.kdeplot(df_train[skew_columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(skew_columns[count], fontsize=15)\n        count+=1","6b23aaef":"from scipy.special import boxcox1p\nlam = 0.15\n\nfor c in skew_columns:\n    df_train[c] = boxcox1p(df_train[c], lam)\n    df_test[c] = boxcox1p(df_test[c], lam)","c028e168":"#skew_columns = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\nskew_columns = ['mean', 'var', 'zipcode_mean', 'zipcode_var']\n#skew_columns = ['sqft_living', 'sqft_above', 'sqft_basement', 'sqft_living15', 'sqft_lot15']\n\n\nfig, ax = plt.subplots(2, 2, figsize=(10, 15))\n\ncount = 0\nfor row in range(2):\n    for col in range(2):\n        if count == 4:\n            break\n        sns.kdeplot(df_train[skew_columns[count]], ax=ax[row][col])\n        ax[row][col].set_title(skew_columns[count], fontsize=15)\n        count+=1","942e12db":"# y: price\ntrain_price = df_train.price.values","21a2f5c5":"train_price","e15f5055":"# df_train without price\ndf_train = df_train.drop('price', axis=1)","92cbb7fc":"# df_train without per_price\ndf_train = df_train.drop('per_price', axis=1)","17812a7f":"print(len(df_train.columns))\nprint(len(df_test.columns))","e17ba876":"df_train.head()","2b05a7a3":"#for df in [df_train,df_test]:\n#    df = df.drop([\"id\", \"zipcode\", \"long\"], axis=1)","076e0ebe":"test_id = df_test.id","30e205b6":"df_train = df_train.drop([\"id\", \"sqft_lot15\"], axis=1)\ndf_test = df_test.drop([\"id\", \"sqft_lot15\"], axis=1)","eb4206ac":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","70c160f8":"# Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(df_train.values)\n    rmse = np.sqrt(-cross_val_score(model, df_train.values, train_price, scoring=\"neg_mean_squared_error\", cv = kf))\n    return (rmse)\n\n\n# cross_val_score\n# https:\/\/datascienceschool.net\/view-notebook\/266d699d748847b3a3aa7b9805b846ae\/\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_val_score.html\n\n# scorer, scoring metrics\n# https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html\n\n# RMSLE\n# https:\/\/programmers.co.kr\/learn\/courses\/21\/lessons\/943\n# https:\/\/www.slideshare.net\/KhorSoonHin\/rmsle-cost-function\n# https:\/\/dacon.io\/user1\/41382","b6a75547":"lasso = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=1))\n\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\n\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\n\nGBoost = GradientBoostingRegressor(n_estimators=8000, learning_rate=0.05, max_depth=5,\n                                   max_features='sqrt', min_samples_leaf=15, min_samples_split=10,\n                                   loss='huber', random_state=4)\n\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=8000,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=31,\n                              learning_rate=0.015, n_estimators=8000,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 1, feature_fraction = 0.9,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_child_samples = 20, reg_alpha= 0.1)\n\nmodel_RF = RandomForestRegressor(max_depth = 8, \n                                n_estimators = 8000,\n                                max_features = 'sqrt', \n                                n_jobs = -1)","fabf0903":"#models = [{'model':lasso, 'name':'LASSO'}, {'model':ENet, 'name':'ENet'},\n#          {'model':KRR, 'name':'KernelRidge'}, {'model':GBoost, 'name':'GradientBoosting'}, \n#          {'model':model_xgb, 'name':'XGBoost'}, {'model':model_lgb, 'name':'LightGBM'}]\n\nmodels = [{'model':lasso, 'name':'LASSO'}, {'model':ENet, 'name':'ENet'},\n          {'model':GBoost, 'name':'GradientBoosting'}, {'model':model_RF, 'name':'RandomForest'}, \n          {'model':model_xgb, 'name':'XGBoost'}, {'model':model_lgb, 'name':'LightGBM'}]","9d0535cd":"for m in models:\n    score = rmsle_cv(m['model'])\n    print(\"Model {} CV score : {:.4f} ({:.4f})\\n\".format(m['name'], score.mean(), score.std()))","a247cf48":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # base_models_\ub294 2\ucc28\uc6d0 \ubc30\uc5f4\uc785\ub2c8\ub2e4.\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    # \uac01 \ubaa8\ub378\ub4e4\uc758 \ud3c9\uade0\uac12\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","f1a8b138":"stacked_averaged_models = StackingAveragedModels(\n    base_models=(ENet, GBoost, model_RF, model_xgb, model_lgb),\n    meta_model=(lasso)\n)\n\n#score = rmsle_cv(stacked_averaged_models)\n#print(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","e951edfd":"#define a rmsle evaluation function\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","6a190d57":"stacked_averaged_models.fit(df_train.values, train_price)\nstacked_train_pred = stacked_averaged_models.predict(df_train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(df_test.values))\nprint(rmsle(train_price, stacked_train_pred))","db68f437":"model_xgb.fit(df_train, train_price)\nxgb_train_pred = model_xgb.predict(df_train)\nxgb_pred = np.expm1(model_xgb.predict(df_test))\nprint(rmsle(train_price, xgb_train_pred))","f82af6b8":"GBoost.fit(df_train, train_price)\nGBoost_train_pred  = GBoost.predict(df_train)\nGBoost_pred = np.expm1(GBoost.predict(df_test))\nprint(rmsle(train_price, GBoost_train_pred))","283afc2f":"model_lgb.fit(df_train, train_price)\nlgb_train_pred = model_lgb.predict(df_train)\nlgb_pred = np.expm1(model_lgb.predict(df_test))\nprint(rmsle(train_price, lgb_train_pred))","9ff1c0ef":"sub = pd.DataFrame()\nsub['id'] = test_id\nsub['price'] = stacked_pred\nsub.to_csv('submission_staking.csv',index=False)","69236944":"sub = pd.DataFrame()\nsub['id'] = test_id\nsub['price'] = xgb_pred\nsub.to_csv('submission_xgb.csv',index=False)","fa54151e":"sub = pd.DataFrame()\nsub['id'] = test_id\nsub['price'] = GBoost_pred\nsub.to_csv('submission_GBoost.csv',index=False)","e057ab12":"sub = pd.DataFrame()\nsub['id'] = test_id\nsub['price'] = lgb_pred\nsub.to_csv('submission_lgb.csv',index=False)","cbfac711":"ensemble = stacked_pred*0.4 + xgb_pred*0.2 + GBoost_pred*0.2 + lgb_pred*0.2\n","919f8c56":"sub = pd.DataFrame()\nsub['id'] = test_id\nsub['price'] = ensemble\nsub.to_csv('submission_ensemble.csv',index=False)","6c587afa":"- grade\uac00 13. \ud06c\uae30\uc5d0 \ube44\ud574 \uac00\uaca9\uc774 \ub2e4\uc18c \ub0ae\uc544\ubcf4\uc774\uc9c0\ub9cc, \uadf8\ub2e5 \ubb38\uc81c\ub420 \uc815\ub3c4\ub294 \uc544\ub2d8. \n- grade 13 \uc911 \ud06c\uae30 \uac00\uc7a5 \ud07c. --> \uac00\uaca9 \uac00\uc7a5 \ub192\uc74c (\uc2dc\uc138 \uc0c1\ud55c\uac00\uc778\ub4ef)","45cf4ed0":"## price\uacfc correlation\uc774 \ub192\uc740 \ubcc0\uc218\ub4e4 vs price \ubd84\uc11d\n","2d7d6983":"## Zipcode","0a4e9c83":"## train datset -> X & y split","41103ff3":"## grade vs price","8a4acc1a":"## File descriptions\n#### train.csv - \uc608\uce21 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud559\uc2b5 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uc9d1\uc758 \uc815\ubcf4\uc640 \uc608\uce21\ud560 \ubcc0\uc218\uc778 \uac00\uaca9(Price) \ubcc0\uc218\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n#### test.csv - \ud559\uc2b5\uc14b\uc73c\ub85c \ub9cc\ub4e0 \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \uc608\uce21\ud560 \uac00\uaca9(Price) \ubcc0\uc218\ub97c \uc81c\uc678\ud55c \uc9d1\uc758 \uc815\ubcf4\uac00 \ub2f4\uae34 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc785\ub2c8\ub2e4.\n#### sample_submission.csv - \uc81c\ucd9c\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc608\uc2dc submission.csv \ud30c\uc77c\uc785\ub2c8\ub2e4.\n\n## Data fields\n#### ID : \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n#### date : \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n#### price : \uc9d1\uc758 \uac00\uaca9(Target variable)\n#### bedrooms : \uce68\uc2e4\uc758 \uc218\n#### bathrooms : \ud654\uc7a5\uc2e4\uc758 \uc218\n#### sqft_living : \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n#### sqft_lot : \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n#### floors : \uc9d1\uc758 \uce35 \uc218\n#### waterfront : \uc9d1\uc758 \uc804\ubc29\uc5d0 \uac15\uc774 \ud750\ub974\ub294\uc9c0 \uc720\ubb34 (a.k.a. \ub9ac\ubc84\ubdf0)\n#### view : \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc88b\uc544 \ubcf4\uc774\ub294\uc9c0\uc758 \uc815\ub3c4\n#### condition : \uc9d1\uc758 \uc804\ubc18\uc801\uc778 \uc0c1\ud0dc\n#### grade : King County grading \uc2dc\uc2a4\ud15c \uae30\uc900\uc73c\ub85c \ub9e4\uae34 \uc9d1\uc758 \ub4f1\uae09\n#### sqft_above : \uc9c0\ud558\uc2e4\uc744 \uc81c\uc678\ud55c \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n#### sqft_basement : \uc9c0\ud558\uc2e4\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801)\n#### yr_built : \uc9c0\uc5b4\uc9c4 \ub144\ub3c4\n#### yr_renovated : \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n#### zipcode : \uc6b0\ud3b8\ubc88\ud638\n#### lat : \uc704\ub3c4\n#### long : \uacbd\ub3c4\n#### sqft_living15 : 2015\ub144 \uae30\uc900 \uc8fc\uac70 \uacf5\uac04\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)\n#### sqft_lot15 : 2015\ub144 \uae30\uc900 \ubd80\uc9c0\uc758 \ud3c9\ubc29 \ud53c\ud2b8(\uba74\uc801, \uc9d1\uc744 \uc7ac\uac74\ucd95\ud588\ub2e4\uba74, \ubcc0\ud654\uac00 \uc788\uc744 \uc218 \uc788\uc74c)","adf152e0":"## \ubbf8\uc0ac\uc6a9 \ubcc0\uc218 \uc81c\uac70","f072a48b":"## sqft_above vs price","086d6f76":"## data normalization\n-https:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline","25c28a1b":"### test data \ud655\uc778","f19a2ad9":">#### seaborn FacetGrid:  https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html","5a5638da":"- \uc704 \uadf8\ub9bc\uc744 \ubd10\ub3c4 33\uac1c\uc758 \ubc29\uc744 \uac16\ub294 \uc9d1\uc774 \uc874\uc7ac\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uacfc, \uadf8 \uc9d1\uc758 sqft_living\uc774 1620\uc774\ub77c\ub294 \uac12\uc744 \uac16\ub294\ub2e4\ub294 \uac83\uc774 \ubc1b\uc544\ub4e4\uc774\uae30 \uc5b4\ub835\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc74c","f84ff03e":"- \uc65c\ub3c4, \ube44\ub300\uce6d\ub3c4 (Skewness) : \uc2e4\uc218 \uac12 \ud655\ub960 \ubcc0\uc218\uc758 \ud655\ub960 \ubd84\ud3ec \ube44\ub300\uce6d\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uc9c0\ud45c, (\uc591\uc218: \ud655\ub960\ubc00\ub3c4\ud568\uc218\uc758 \uc624\ub978\ucabd \ubd80\ubd84\uc5d0 \uae34 \uaf2c\ub9ac\ub97c \uac00\uc9c0\uba70, \uc911\uc559\uac12\uc744 \ud3ec\ud568\ud55c \uc790\ub8cc\uac00 \uc67c\ucabd\uc5d0 \ub354 \ub9ce\uc774 \ubd84\ud3ec\ud568) \/\/ (\uc74c\uc218: \ud655\ub960\ubc00\ub3c4\ud568\uc218\uc758 \uc67c\ucabd \ubd80\ubd84\uc5d0 \uae34 \uaf2c\ub9ac\ub97c \uac00\uc9c0\uba70, \uc911\uc559\uac12\uc744 \ud3ec\ud568\ud55c \uc790\ub8cc\uac00 \uc624\ub978\ucabd\uc5d0 \ub354 \ub9ce\uc774 \ubd84\ud3ec\ud568) -> \ud604\uc7ac\ub294 \uc804\uc790 \/\/ (\ud3c9\uade0\uacfc \uc911\uc559\uac12\uc774 \uac19\uc73c\uba74 \uc65c\ub3c4\ub294 0)\n- https:\/\/ko.wikipedia.org\/wiki\/%EB%B9%84%EB%8C%80%EC%B9%AD%EB%8F%84\n\n- \ucca8\ub3c4 (kurtosis \/ kurtosis) : \ud655\ub960\ubd84\ud3ec\uc758 \ubfb0\uc871\ud55c \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub294 \ucc99\ub3c4. \uad00\uce21\uce58\ub4e4\uc774 \uc5b4\ub290 \uc815\ub3c4 \uc9d1\uc911\uc801\uc73c\ub85c \uc911\uc2ec\uc5d0 \ubab0\ub824\uc788\ub294\uac00\ub97c \uce21\uc815\ud560 \ub54c \uc0ac\uc6a9. \ucca8\ub3c4 \uac12 (K)\uc774 3\uc5d0 \uac00\uae4c\uc6b0\uba74 \uc0b0\ud3ec\ub3c4\uac00 \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae4c\uc6c0.\/\/ (K <3), \ubd84\ud3ec\uac00 \uc815\uaddc \ubd84\ud3ec\ubcf4\ub2e4 \ub354 \uc644\ub9cc\ud558\uac8c \ub0a9\uc791\ud55c \ubd84\ud3ec\/\/ \ucca8\ub3c4\uac00 3\ubcf4\ub2e4 \ud070 \uc591\uc218\uc778 \uacbd\uc6b0 (K> 3), \uc0b0\ud3ec\ub294 \uc815\uaddc\ubd84\ud3ec\ubcf4\ub2e4 \ub354 \ubfb0\uc871\ud55c \ubd84\ud3ec\ub85c \uc0dd\uac01 \ud560 \uc218 \uc788\uc74c.\n- https:\/\/ko.wikipedia.org\/wiki\/%EC%B2%A8%EB%8F%84","24b48584":"## outlier \uc81c\uac70\n- sqft_living, grade, bedrooms, bathrooms","0406cfb4":"# Data Preprocessing","311f877f":"### lat (latitude, \uc704\ub3c4)\uc640 price \uc0ac\uc774\uc5d0 \uc120\ud615 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uace0, \uc0c1\uad00\uacc4\uc218\uac00 \ub192\uc740 \uac12\uc744 \uac16\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc74c\n\n---\n[Discussion](https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83549)\uc5d0 \ub530\ub974\uba74, \uc704\uc758 \uc9c0\uc5ed\uc740 \uc2dc\uc560\ud2c0\uc778\ub370 \uc2dc\uc560\ud2c0\uc740 \ubd81\ucabd\uc73c\ub85c \uac08 \uc218\ub85d \uc0b4\uae30 \uc88b\uc740 \uc9d1\ub4e4\uc774 \ub9ce\ub2e4\uace0 \ud568.\n\n\uc774 \ubd80\ubd84\uc5d0 \ub300\ud574\uc11c [\uae40\ud0dc\uc9c4\ub2d8\uc758 \ucee4\ub110](https:\/\/www.kaggle.com\/fulrose\/map-visualization-with-folium-ing)\uc758 \uc790\ub8cc \ucc38\uace0","30823087":"# EDA","b1d0adbb":"## lat vs price","0056b67f":"- \uc81c\uac70 x","3b6c5597":"## conditions","39bf5473":"### bathrooms","b873e126":"### sqft_living","4b30c2d1":"### validation scheme","3aa312f2":"## floors vs price","bc346dea":"- Data log-scaling\uc744 \ud1b5\ud55c data normalization\uc744 \ud1b5\ud574 skewness\uac00 \ud070 \ub370\uc774\ud130\ub4e4\uc744 \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\uc5b4 \uc90c","9eafabe6":"### yr_renovated \uc218\uc815\n- yr_renovated\ub294 \uc9d1\uc744 \uc7ac\uac74\ucd95\ud55c \ub144\ub3c4\n- 0 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0, \uc7ac\uac74\ucd95\uc744 \ud558\uc9c0 \uc54a\uc740 \uac83\uc784 --> \uc9c0\uc740 \ub0a0\uc9dc\ub85c \ubcc0\uacbd","f0679cff":"# Modeling","a308f48c":"## view vs price","7fb4d316":"> # Stacking based models\n","7e81f095":"## Base models\n- LASSO regression\n- ElasticNet regression\n- Kernel Ridge regression\n- Gradient Boosting regression\n- XGBoost\n- LightGBM\n- Random Forest","e4130f35":"- \uce68\uc2e4 33\uac1c\ub97c \uac16\ub294 \uc9d1\uc758 \ud06c\uae30\uc778 1620 (sqft_living)\uc740 \uce68\uc2e4 2, 3, 4, 5\uac1c\ub97c \uac16\ub294 \uc9d1\ub4e4\uc774 \uac16\ub294 \ud06c\uae30\uc785\n- \uce68\uc2e4 33\uac1c\ub77c\ub294 \uac83\uc740 \ub9d0\uc774 \uc548\ub428 --> 3\uac1c\ub85c \ubc14\uafd4\uc8fc\uae30 (3\uc744 \ub450\ubc88 \ub204\ub978 \uac83\uc774\ub77c\uace0 \uc0dd\uac01)","79259f17":"## bathrooms vs price","f0ccd20b":"- train \ub370\uc774\ud130\uc5d0\uc11c, bathromms = 6.75, 7.5 \uc778 \ub370\uc774\ud130\uac00 \uac00\uaca9\uacfc sqft_living\uc5d0\uc11c \uc774\uc0c1\ud558\uac8c \ub69d \ub5a8\uc5b4\uc9c0\ub294 \uac12\uc744 \uac00\uc9d0.\n- test \ub370\uc774\ud130\uc5d0\uc11c\ub294 \uadf8\ub7f0 \uacbd\ud5a5\uc740 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc74c\n- train \ub370\uc774\ud130 \ub0b4 \ud574\ub2f9 \ub370\uc774\ud130 \ud655\uc778 \ubc0f \uc81c\uac70","7471fc18":"base models scores","e3b57351":"## target variable\uc778 Price.\n- Skewness \ub9e4\uc6b0 \ud07c\n- \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub974\uc9c0 \uc54a\uace0, \ubd84\uc0b0 \ub9e4\uc6b0 \ud07c\n- \ud68c\uadc0\ubaa8\ub378 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574, normalize\ub97c \ud1b5\ud574 \uc815\uaddc\ubd84\ud3ec\ub97c \uac16\ub3c4\ub85d \ud574\uc90c\n- \uc815\uaddc\ubd84\ud3ec\uac80\uc815 (normlaity test): Q-Q plot (Quantile-Quantile plot) \uc774\uc6a9. \ubd84\uc11d\ud558\uace0\uc790 \ud558\ub294 \ud45c\ubcf8 \ub370\uc774\ud130\uc758 \ubd84\ud3ec\uc640 \uc815\uaddc \ubd84\ud3ec\uc758 \ubd84\ud3ec \ud615\ud0dc\ub97c \ube44\uad50\ud558\uc5ec, \ud45c\ubcf8 \ub370\uc774\ud130\uac00 \uc815\uaddc \ubd84\ud3ec\ub97c \ub530\ub974\ub294\uc9c0 \uac80\uc0ac\ud558\ub294 \uac04\ub2e8\ud55c \uc2dc\uac01\uc801 \ub3c4\uad6c\n- https:\/\/docs.scipy.org\/doc\/scipy-0.14.0\/reference\/generated\/scipy.stats.probplot.html\n- https:\/\/datascienceschool.net\/view-notebook\/76acc92d28354e86940001f9fe85c50f\/","4f96a1a6":"## sqft_living15 vs price","f8920d5e":"### grade","31681c73":"## date \ubcc0\uc218 \uc815\ub9ac","bab36a0a":"### Base models","fcf58daf":"### bathrooms: \ud654\uc7a5\uc2e4\/\uc9d1\n### https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/86557","25390bca":"> ### \ucd1d 70\uac1c\uc758 zip code\uac00 \uc874\uc7ac\ud558\uace0, zipcode\ub294 \uc9c0\uc5ed\uc5d0 \uad00\ub828\ub41c \uc778\uc790\uc774\ubbc0\ub85c, \uac00\uaca9\uc5d0 \uc601\ud5a5\uc744 \uc904 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc74c","40623e2f":"- test data \uc911 id=19745 -> sqft_living\uc774 1620\uc778\ub370, bedroom \uac1c\uc218\uac00 33\uac1c\uc784.\n- \uc9d1\uc758 \ud06c\uae30\uc5d0 \ube44\ud574 \uce68\uc2e4 \uac1c\uc218\uac00 \ub9e4\uc6b0 \ub9ce\uc740 \uac83\ub3c4 \uc774\uc0c1\ud558\uc9c0\ub9cc, \ud55c \uc9d1\uc5d0 bedrooms\uc774 33\uac1c\ub77c\ub294\uac8c \uc0c1\uc2dd\uc801\uc73c\ub85c \uc774\ud574 \ubd88\uac00\n\n--- \n### \ub2e4\ub978 \ube44\uc2b7\ud55c \ud06c\uae30\ub97c \uac16\ub294 \uc9d1\ub4e4\uc758 \uce68\uc2e4 \uac1c\uc218 \ud655\uc778","2712e39e":"## bedrooms vs price","e141c1f6":"> ## sqft_living vs sqft_living15  \/  sqft_lot vs sqft_lot15","1e5adad0":"### \uac01 \ubcc0\uc218\ub4e4\uc758 \ubd84\ud3ec \ud655\uc778","b55addfa":"# \ubcc0\uc218 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\n- \ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 : \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \uc0ac\uc6a9\n- \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uad00\uacc4 : \ubc94\uc8fc\ud615 \ubcc0\uc218\ub3c4 \ud3ec\ud568\ub418\uc5c8\uc744 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9 \n\n- https:\/\/m.blog.naver.com\/PostView.nhn?blogId=istech7&logNo=50153047118&proxyReferer=https%3A%2F%2Fwww.google.com%2F\n- http:\/\/blog.daum.net\/_blog\/BlogTypeView.do?blogid=0JHeT&articleno=5655101&_bloghome_menu=recenttext\n- https:\/\/support.minitab.com\/ko-kr\/minitab\/18\/help-and-how-to\/statistics\/basic-statistics\/supporting-topics\/correlation-and-covariance\/a-comparison-of-the-pearson-and-spearman-correlation-methods\/ ","5a4a5393":"- No missing data in train & test dataset","d4c5f59c":"## KaKR 2nd ML month \n## EDA & Ensemble, stacking based prediction\n\n- EDA\n- Data preprocessing\n- Feature engineering\n- prediction using lgb, xgb, gboost\n- ensemble\n- stacking\n\n- public\ubcf4\ub2e4 private leaderboard \uac12\uc774 \ub9ce\uc774 \uc99d\uac00\ud558\uc5ec \uc21c\uc704\uac00 \ub9ce\uc774 \ud558\ub77d\ud568.\n- EDA, data \ud655\uc778, feature \uad00\ub828, ensemble, stacking \uad00\ub828 \ubd80\ubd84\ub9cc \uacf5\uc720\ub97c \uc704\ud574 kernel \uacf5\uac1c\n\n\n#### references\n- https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard?fbclid=IwAR0d0GboXiaZP4VeQTpavV4hCFJ8tVlv5TFr-yQNPWZZtSyAHshLpqt5vXU\n- https:\/\/www.kaggle.com\/subinium\/subinium-tutorial-house-prices-advanced\n- https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12\n- https:\/\/www.kaggle.com\/kcs93023\/2019-ml-month-2nd-baseline","5a23443c":"> ### discussion check\n### sqft_living, sqft_lot\n### https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/87029","35e747e5":"## sqft_living vs price","6754b663":"# Target value y: Price\n- \ud574\ub2f9 \ub370\uc774\ud130 \uc14b\uc744 \uc218\uc9d1\ud55c \uc2dc\uae30 \uae30\uc900\uc758 \ub9e4\ub9e4\uac00\u3161\n- https:\/\/www.kaggle.com\/c\/2019-2nd-ml-month-with-kakr\/discussion\/83957","380b38e7":"- log\ub97c \ucde8\ud568\uc73c\ub85c\uc368 price \ub370\uc774\ud130\ub97c \uc815\uaddc\ubd84\ud3ec\uc640 \uc720\uc0ac\ud55c \ubd84\ud3ec\ub85c \ub9cc\ub4e4\uc5b4\uc90c","8ee94c47":"## \ubcc0\uc218 \uac04 \uc5f0\uad00\uc131 \ub192\uc740 \uac83\ub4e4","61576dd3":"### bedrooms"}}