{"cell_type":{"59d74e54":"code","cf940f44":"code","b21b2745":"code","e90024f7":"code","539945a9":"code","501c2aee":"code","a53f07f3":"code","3e246542":"code","09c4ff76":"code","a9c9dbac":"code","9a14e8b0":"code","01ba6d8c":"code","55f1273c":"code","3f1986a6":"code","a5e3be15":"code","4e00d3e4":"code","0c2dc3bb":"code","dce92377":"code","aae01d88":"code","88fb53c7":"code","ff0b76ba":"code","f7b0cbc9":"markdown","7b97b40f":"markdown","e7edc27d":"markdown","88b20fa7":"markdown","96eb48e5":"markdown"},"source":{"59d74e54":"#importing libraries\nimport os, shutil\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tensorflow.keras.layers import Flatten, Dense,Dropout,BatchNormalization\n","cf940f44":"#Path to the dataset\nbase_dir = '\/kaggle\/input\/dogs-vs-cats-small\/dogs_vs_cats_small' ","b21b2745":"# Path to train, val and test directories\ntrain_dir = os.path.join(base_dir, 'train')\n\nval_dir = os.path.join(base_dir, 'val')\n\ntest_dir = os.path.join(base_dir, 'test')","e90024f7":"# Separate train, val and test directories for cat images and dog images\n\ntrain_cats_dir = os.path.join(train_dir, 'cats')\ntrain_dogs_dir = os.path.join(train_dir, 'dogs')\n\nval_cats_dir = os.path.join(val_dir, 'cats')\nval_dogs_dir = os.path.join(val_dir, 'dogs')\n\ntest_cats_dir = os.path.join(test_dir, 'cats')\ntest_dogs_dir = os.path.join(test_dir, 'dogs')","539945a9":"#cross-checking the directories\nprint('Training Cat images ={}'.format(len(os.listdir(train_cats_dir))),\n      '\\nTraining Dog images ={}'.format(len(os.listdir(train_dogs_dir))),\n      '\\nValidation Cat images ={}'.format(len(os.listdir(val_cats_dir))),\n      '\\nValidation Dog images ={}'.format(len(os.listdir(val_dogs_dir))),\n      '\\nTesting Cat images ={}'.format(len(os.listdir(test_cats_dir))),\n      '\\nTesting Dog images ={}'.format(len(os.listdir(test_dogs_dir))),\n     )","501c2aee":"# Viewing one image each from the two training directories\nimport imageio\ncat_image_names = os.listdir(train_cats_dir)\ncat_img = imageio.imread(os.path.join(train_cats_dir, cat_image_names[1]))\nplt.imshow(cat_img)\n\nplt.figure()\n\ndog_image_names = os.listdir(train_dogs_dir)\ndog_img = imageio.imread(os.path.join(train_dogs_dir, dog_image_names[1]))\nplt.imshow(dog_img)","a53f07f3":"#Model Building\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","3e246542":"model.summary()","09c4ff76":"#compiling the model\nopt = tf.keras.optimizers.Adam(learning_rate=0.01)\nmodel.compile(optimizer=opt,\n             loss='binary_crossentropy',\n             metrics=['accuracy'])","a9c9dbac":"#Reading Images from respective directories\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\ntarget_size=(150, 150),\nbatch_size=15,\nclass_mode='binary'\n)\n\nval_generator = test_datagen.flow_from_directory(\nval_dir,\ntarget_size=(150, 150),\nbatch_size=15,\nclass_mode='binary'\n)","9a14e8b0":"for data_batch, labels_batch in train_generator:\n    print('Data batch shape =', data_batch.shape)\n    print('Labels batch shape =', labels_batch.shape)\n    break","01ba6d8c":"history = model.fit(train_generator, epochs=10, validation_data=val_generator)","55f1273c":"model.save('cats_and_dogs_small_task41.h5')","3f1986a6":"model.summary()","a5e3be15":"tf.keras.utils.plot_model(model)","4e00d3e4":"history_dict = history.history\nloss_value = history_dict['loss']\nval_loss_value = history_dict['val_loss']\nacc = history_dict['accuracy']\nval_acc = history_dict['val_accuracy']\nepochs = range(1, len(loss_value) + 1)\nplt.plot(epochs, loss_value, 'b', label='Training Loss')\nplt.plot(epochs, val_loss_value, 'r', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.plot(epochs, acc, 'b', label='Training Accuracy')\nplt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","0c2dc3bb":"test_generator = test_datagen.flow_from_directory(\ntest_dir,\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary'\n)","dce92377":"model.evaluate(test_generator, steps=75)","aae01d88":"test_img = test_generator[0][0][10]\ntest_img.shape","88fb53c7":"# labeling 0 for dogs and 1 for cats\nmodel.predict_classes(np.expand_dims(test_img, axis=0))","ff0b76ba":"plt.imshow(test_img)","f7b0cbc9":"### Plotting the Accuracy and Loss","7b97b40f":"### Loading the Data","e7edc27d":"### Model Summary","88b20fa7":"### Evaluating the Model","96eb48e5":"### Training the Model"}}