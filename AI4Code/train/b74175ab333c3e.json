{"cell_type":{"f53e87f6":"code","75f2b81f":"code","d8b6dd38":"code","dbc41938":"code","9e1d5b9f":"code","eaf47fcc":"code","822922c4":"code","b56d5323":"code","1cdcc9bc":"code","8ba6c3c5":"code","de865e9a":"code","114da6b8":"code","9f0d493d":"code","172d63f2":"code","0ee69426":"code","c078fed8":"code","d8d6f838":"code","3e1b78a8":"code","63be62cb":"code","1aa6604a":"code","3f3bc574":"code","8d63b0a2":"code","bee8eb76":"code","eb532e31":"code","2a57dd13":"code","a06437e8":"code","fcd70487":"code","e4e503fd":"code","6ffd66a7":"code","ee4defe9":"code","dd89dbb9":"code","b723cdba":"code","cbb571bb":"code","eb65e16e":"code","0e6bb7f4":"code","57f7ce65":"code","c9a252b6":"code","212acf19":"code","ca96976d":"code","dd5c4ed1":"code","784e0225":"code","bf9bb488":"code","bd9463ea":"markdown","65010385":"markdown","a6231651":"markdown","eb0cd54b":"markdown","9fd84ace":"markdown","f72cbc35":"markdown","f0fb8cb3":"markdown","96e3acd7":"markdown","bd06f272":"markdown","0f040d9f":"markdown","9358fd2f":"markdown","4815862b":"markdown","d457c8bf":"markdown","a4ba6876":"markdown","b9acec21":"markdown","f48e54b3":"markdown","756118f0":"markdown","ed427c8c":"markdown","1f4e9cd6":"markdown","567b7145":"markdown","335c30fe":"markdown","8b351116":"markdown","577a3666":"markdown","ba7ffeb0":"markdown","00c00436":"markdown","19e76d41":"markdown","5d44e17b":"markdown","dc19a505":"markdown","56e8a944":"markdown","2ffcacb4":"markdown","2e4e82c3":"markdown"},"source":{"f53e87f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","75f2b81f":"import matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats('retina')\nimport seaborn as sns\nsns.set_style('whitegrid', {'grid.linestyle': '--'})\n\n%matplotlib inline","d8b6dd38":"# Load 'MQL' dataset\nmql = pd.read_csv('..\/input\/marketing-funnel-olist\/olist_marketing_qualified_leads_dataset.csv',\n                  parse_dates=['first_contact_date'])\n\nprint(mql.shape)\nmql.head(3)","dbc41938":"# Add a 'year-month' column\nmql['first_contact_date(y-m)'] = mql['first_contact_date'].dt.to_period('M')\n\nprint(mql.shape)\nmql[['first_contact_date', 'first_contact_date(y-m)']].head(3)","9e1d5b9f":"# Create time series table\nmonthly_mql = mql.groupby(by='first_contact_date(y-m)').mql_id \\\n                                                       .count()\nmonthly_mql.to_frame().T","eaf47fcc":"# Plot the monthly MQL volume\nmonthly_mql.plot.line(figsize=(12, 6))\nplt.title('MQL Volume (Jun 2017 - May 2018)', fontsize=14);","822922c4":"# Create 'channel-time series' table\nmql_origin = pd.pivot_table(mql,\n                            index='origin',\n                            columns='first_contact_date(y-m)',\n                            values='mql_id',                            \n                            aggfunc='count',\n                            fill_value=0)\n\n# Sort index from largest to smallest in volume\norigin_list = mql.groupby('origin').mql_id \\\n                                   .count() \\\n                                   .sort_values(ascending=False) \\\n                                   .index\n\nmql_origin = mql_origin.reindex(origin_list)\nmql_origin","b56d5323":"# Plot the monthly volume by channel\nplt.figure(figsize=(20,8))\nsns.heatmap(mql_origin, annot=True, fmt='g');","1cdcc9bc":"# Load 'closed deals' dataset\ncd = pd.read_csv('..\/input\/marketing-funnel-olist\/olist_closed_deals_dataset.csv',\n                 parse_dates=['won_date'])\n\nprint(cd.shape)\ncd.head(3)","8ba6c3c5":"# Merge 'MQL' with 'closed deals'\n# Merge by 'left' in order to evaluate conversion rate\nmql_cd = pd.merge(mql,\n                  cd,\n                  how='left',\n                  on='mql_id')\n\nprint(mql_cd.shape)\nmql_cd.head(3)","de865e9a":"# Add a column to distinguish signed MOLs from MQLs who left without signing up\nmql_cd['seller_id(bool)'] = mql_cd['seller_id'].notna()\n\nprint(mql_cd.shape)\nmql_cd[['seller_id', 'seller_id(bool)']].head()","114da6b8":"# Compute monthly closed deals\nmonthly_cd = mql_cd.groupby('first_contact_date(y-m)')['seller_id(bool)'].sum()\nmonthly_cd.to_frame().T","9f0d493d":"# Plot the monthly volume of closed deals\nmonthly_cd.plot.line(figsize=(12, 6))\nplt.title('Closed Deal Volume (Jun 2017 - May 2018)', fontsize=14);","172d63f2":"# Calculate monthly conversion rate\nmonthly_conversion = mql_cd.groupby(by='first_contact_date(y-m)')['seller_id(bool)'].agg(['count', 'sum'])\n\nmonthly_conversion['conversion_rate(%)'] = ((monthly_conversion['sum'] \/ monthly_conversion['count']) * 100).round(1)\nmonthly_conversion.T","0ee69426":"# Plot the monthly conversion rate\nmonthly_conversion['conversion_rate(%)'].plot.line(figsize=(12, 6))\nplt.title('Conversion Rate (Jun 2017 - May 2018)', fontsize=14);","c078fed8":"# Calculate sales length in days\nmql_cd['sales_length(day)'] = np.ceil((mql_cd['won_date'] - mql_cd['first_contact_date'])\n                                      .dt.total_seconds()\n                                      \/ (60*60*24))\n\nprint(mql_cd.shape)\nmql_cd[['first_contact_date', 'won_date', 'sales_length(day)']].head()","d8d6f838":"# Separate sales length for each year\nclosed_deal = (mql_cd['seller_id'].notna())\nlead_2017 = (mql_cd['first_contact_date'].dt.year.astype('str') == '2017')\nlead_2018 = (mql_cd['first_contact_date'].dt.year.astype('str') == '2018')\n\nsales_length_2017 = mql_cd[closed_deal & lead_2017]['sales_length(day)']\nsales_length_2018 = mql_cd[closed_deal & lead_2018]['sales_length(day)']\n\nsales_length_2017.head(3), sales_length_2018.head(3)","3e1b78a8":"# Plot the sales length of each year\nfigure, ax = plt.subplots(figsize=(12,6))\n\nsns.kdeplot(sales_length_2017,\n            cumulative=True,\n            label='2017 (Jun-Dec)',\n            ax=ax)\nsns.kdeplot(sales_length_2018,\n            cumulative=True,\n            label='2018 (Jan-May)',\n            ax=ax)\n\nax.set_title('Sales Length in Days', fontsize=14)\nax.xaxis.set_major_locator(plt.MaxNLocator(10))\nplt.xlim(0,500);","63be62cb":"# Bring 'closed deals' data\ncd_profile = cd[cd['lead_behaviour_profile'].notna()].copy()\n\nprint(cd_profile.shape)\ncd_profile['lead_behaviour_profile'].value_counts()","1aa6604a":"# Combine four types of mixed profiles(2.4%) into 'others'\nprofile_list = ['cat', 'eagle', 'wolf', 'shark']\n\ncd_profile['lead_behaviour_profile(upd)'] = cd_profile.lead_behaviour_profile \\\n                                                      .map(lambda profile: profile\n                                                           if profile in profile_list\n                                                           else 'others')\n\nprint(cd_profile.shape)\ncd_profile['lead_behaviour_profile(upd)'].value_counts()","3f3bc574":"# Create 'profile - lead type' table\ncols = cd_profile['lead_type'].value_counts().index\nindex = cd_profile['lead_behaviour_profile(upd)'].value_counts().index\n\nprofile_leadType = pd.pivot_table(cd_profile,\n                                  index='lead_behaviour_profile(upd)',\n                                  columns='lead_type',\n                                  values='seller_id',\n                                  aggfunc='count',\n                                  fill_value=0)\n\nprofile_leadType = profile_leadType.reindex(index)[cols]\nprofile_leadType","8d63b0a2":"# Create 'profile - business type' table\ncols = cd_profile['business_type'].value_counts().index\nindex = cd_profile['lead_behaviour_profile(upd)'].value_counts().index\n\nprofile_businessType = pd.pivot_table(cd_profile,\n                                      index='lead_behaviour_profile(upd)',\n                                      columns='business_type',\n                                      values='seller_id',\n                                      aggfunc='count',\n                                      fill_value=0)\n\nprofile_businessType = profile_businessType.reindex(index)[cols]\nprofile_businessType","bee8eb76":"# Create 'profile - business segment' table\ncols = cd_profile['business_segment'].value_counts().index\nindex = cd_profile['lead_behaviour_profile(upd)'].value_counts().index\n\nprofile_segment = pd.pivot_table(cd_profile,\n                                 index='lead_behaviour_profile(upd)',\n                                 columns='business_segment',\n                                 values='seller_id',\n                                 aggfunc='count',\n                                 fill_value=0)\n\nprofile_segment = profile_segment.reindex(index)[cols]\nprofile_segment","eb532e31":"# Plot the above three tables\nfigure, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20,20))\nfigure.subplots_adjust(hspace=0.3)\n\nsns.heatmap(profile_leadType,\n            annot=True,\n            fmt='g',\n            ax=ax1)\nsns.heatmap(profile_businessType,\n            annot=True,\n            fmt='g',\n            ax=ax2)\nsns.heatmap(profile_segment,\n            annot=True,\n            fmt='g',\n            ax=ax3)\n\nax1.set_title('Behaviour Profile - Lead Type', fontsize=14)\nax2.set_title('Behaviour Profile - Business Type', fontsize=14)\nax3.set_title('Behaviour Profile - Business Segement', fontsize=14);","2a57dd13":"# Create 'profile-SDR' table\ncols = cd_profile['sdr_id'].value_counts().index\nindex = cd_profile['lead_behaviour_profile(upd)'].value_counts().index\n\nprofile_sdr = pd.pivot_table(cd_profile,\n                             index='lead_behaviour_profile(upd)',\n                             columns='sdr_id',\n                             values='seller_id',\n                             aggfunc='count',\n                             fill_value=0)\n\nprofile_sdr = profile_sdr.reindex(index)[cols] # Sort SDR in descending order of volume \nprofile_sdr","a06437e8":"# Create 'profile-SR' table\ncols = cd_profile['sr_id'].value_counts().index\nindex = cd_profile['lead_behaviour_profile(upd)'].value_counts().index\n\nprofile_sr = pd.pivot_table(cd_profile,\n                            index='lead_behaviour_profile(upd)',\n                            columns='sr_id',\n                            values='seller_id',\n                            aggfunc='count',\n                            fill_value=0)\n\nprofile_sr = profile_sr.reindex(index)[cols] # Sort SR in descending order of volume\nprofile_sr","fcd70487":"# Plot the two tables\nfigure, (ax1,ax2) = plt.subplots(2, 1, figsize=(20,14))\nfigure.subplots_adjust(hspace=0.2)\n\nsns.heatmap(profile_sdr,\n            annot=True,\n            fmt='g',\n            ax=ax1)\nsns.heatmap(profile_sr,\n            annot=True,\n            fmt='g',\n            ax=ax2)\n\nax1.set_title('SDR Performance in Descending Volume', fontsize=14)\nax2.set_title('SR Performance in Descending Volume', fontsize=14)\nax1.set_xticks([])\nax2.set_xticks([]);","e4e503fd":"# Load datasets\ncd = pd.read_csv('..\/input\/marketing-funnel-olist\/olist_closed_deals_dataset.csv')\norder_items = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\norders = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv',\n                     parse_dates=['order_purchase_timestamp'])\nproducts = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\nproduct_translation = pd.read_csv('..\/input\/brazilian-ecommerce\/product_category_name_translation.csv')","6ffd66a7":"print(cd.shape)\nprint(order_items.shape)\nprint(orders.shape)\nprint(products.shape)\nprint(product_translation.shape)","ee4defe9":"# Merge all of the data\ndata = pd.merge(cd,order_items,\n                how='inner', on='seller_id')\ndata = pd.merge(data, orders,\n                how='inner', on='order_id')\ndata = pd.merge(data, products,\n                how='inner', on='product_id')\ndata = pd.merge(data, product_translation,\n                how='left', on='product_category_name') # There are some data without english names\ndata.shape","dd89dbb9":"# Sort out orders not devliered to customers\ndata = data[data['order_status'] == 'delivered']\n\n# Add a 'year-month' column\ndata['order_purchase_timestamp(y-m)'] = data['order_purchase_timestamp'].dt.to_period('M')\n\nprint(data.shape)\ndata.head(3)","b723cdba":"cols = data.groupby(by='business_segment') \\\n           .price \\\n           .sum() \\\n           .sort_values(ascending=False) \\\n           .index\n\nmonthly_segment_revenue = data.groupby(['order_purchase_timestamp(y-m)', 'business_segment']) \\\n                              .price \\\n                              .sum() \\\n                              .unstack(level=1, fill_value=0)\n\nmonthly_segment_revenue = monthly_segment_revenue[cols]\nmonthly_segment_revenue","cbb571bb":"# Plot the monthly revenues by segment\nmonthly_segment_revenue.plot.area(figsize=(20,8))\n\nplt.title('Monthly Revenues by Business Segment', fontsize=14)\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5));","eb65e16e":"# Create watches segment dataframe\nwatches = data[data.business_segment == 'watches']\nwatches.shape","0e6bb7f4":"# Create monthly revenues by product category\ncols = watches.groupby('product_category_name_english') \\\n              .price \\\n              .sum() \\\n              .sort_values(ascending=False) \\\n              .index\n\nmonthly_revenue_category = watches.groupby(['order_purchase_timestamp(y-m)', 'product_category_name_english']) \\\n                                  .price \\\n                                  .sum() \\\n                                  .unstack(level=1, fill_value=0)\n\nmonthly_revenue_category = monthly_revenue_category[cols]\nmonthly_revenue_category","57f7ce65":"# Plot the monthly revenues by category\nmonthly_revenue_category.plot.area(figsize=(12,6))\nplt.title('Monthly Revenues by Product Category of Watches', fontsize=14);","c9a252b6":"# Create 'seller - product category' table\ncols = watches.groupby('product_category_name_english') \\\n              .price \\\n              .sum() \\\n              .sort_values(ascending=False) \\\n              .index\n\nwatches_seller_revenue = watches.groupby(['seller_id', 'product_category_name_english']) \\\n                                .price \\\n                                .sum() \\\n                                .unstack(level=1, fill_value=0)\n\nwatches_seller_revenue = watches_seller_revenue[cols]\nwatches_seller_revenue['total'] = watches_seller_revenue.sum(axis=1)\n\nwatches_seller_revenue","212acf19":"# Create 'category - seller' table\nindex = watches.groupby('product_category_name_english') \\\n               .price \\\n               .sum() \\\n               .sort_values() \\\n               .index\n\nseller_category_revenue = watches.groupby(['seller_id', 'product_category_name_english']) \\\n                                 .price \\\n                                 .sum() \\\n                                 .unstack(level=0, fill_value=0) \\\n                                 \nseller_category_revenue = seller_category_revenue.reindex(index)\nseller_category_revenue","ca96976d":"# Plot the above table\nseller_category_revenue.plot.barh(stacked=True, figsize=(12,6))\n\nplt.title('Watches Revenue by Seller', fontsize=14)\nplt.legend(loc='lower right');","dd5c4ed1":"# Create seller info table\nseller_ids = watches.groupby('seller_id').price.sum().index\nfields = ['seller_id', 'won_date', 'business_segment', 'lead_type','business_type',]\n\ndata.loc[data['seller_id'].isin(seller_ids), fields] \\\n    .drop_duplicates(subset='seller_id', keep='first')","784e0225":"index = watches[watches['product_category_name_english'] == 'watches_gifts'] \\\n                .groupby('product_id') \\\n                .price \\\n                .sum() \\\n                .sort_values(ascending=False) \\\n                .index\n\nproduct_seller_revenue = watches[watches['product_category_name_english'] == 'watches_gifts'] \\\n                                  .groupby(['seller_id', 'product_id']) \\\n                                  .price \\\n                                  .sum() \\\n                                  .unstack(level=0, fill_value=0)\n\nproduct_seller_revenue = product_seller_revenue.reindex(index)\nproduct_seller_revenue.head(3)","bf9bb488":"product_seller_revenue.plot.bar(stacked=True, figsize=(20, 6))\nplt.title('Product Revenues in Watches_gifts Category', fontsize=14);","bd9463ea":"# Objectives\n---\nIn this kernel I am covering three subjects with data of the Brazilian ecommerce marketplace, Olist.\n1. Marketing Channel Effectiveness\n2. Sales Performance Overview\n3. Closed Deal Performance Overview","65010385":"Since 2018, monthly MQL volume soared to above 1,000. Let's take a look at the volume for each acquisition channel.","a6231651":"Conversion rate also increased with volume.","eb0cd54b":"## 2. Sales Performance Overview\n---\nAfter a MQL filled a form on landing page to sign up for seller, a Sales Development Representative(SDR) contacted the MQL and gathered more information about the lead. Then a Sales Representative(SR) consulted the MQL. So interaction between SDRs\/SRs and MQLs can affect conversion from MQLs to sellers.  \n\nAt this section I will deal with two aspects of sales result, conversion rate and sales length.  \n_\\* A MQL who finally signed up for seller is called a closed deal._","9fd84ace":"+ Though 'watches' segment is the largest part of revenue, it has only two sellers.\n+ Furthermore, the leading seller generated 97.0% of segment revenue.","f72cbc35":"### Sales Length\nSales length means period from first contact to signing up for seller. ","f0fb8cb3":"### Digging into Closed Deal\nBefore move on to the next subject, I will explore closed deals in more depth to see whether there is room for improvement in sales process. Specifically I'm looking into three dimensions of closed deals(__'lead type', 'business segment', 'business type'__) with __'lead behaviour profile'__ as an axis.","96e3acd7":"Let's uncover information about two sellers.","bd06f272":"Let's dive into the 'watches' segment to see what we can learn.","0f040d9f":"+ Paid search is the second biggest contributor to lead generation after 'organic search'.\n+ The third one is 'social' which acquired MQLs more than or similar to 'paid search' since April 2018.\n+ If the marginal cost of paid search increases, it would be possible to examine effectiveness of 'social' as an alternative.","9358fd2f":"#### Watches_gifts Revenue by Product","4815862b":"Lastly I will address 'watches gifts' revenue by product to expand understanding of the category.","d457c8bf":"#### Watches Revenue by Seller","a4ba6876":"'lead_behaviour_profile' is related to DISC personality test. Each type has the meaning as follows.  \n_\\* Source: [DISC Profile](https:\/\/www.discprofile.com\/what-is-disc\/overview\/)_\n\nBehaviour_profile | DISC_profile | Description\n------------------- | ------------- | ------------\nCat | Steadiness | Person places emphasis on cooperation, sincerity, dependability\nEagle | Influence | Person places emphasis on influencing or persuading others, openness, relationships\nWolf | Conscientiousness | Person places emphasis on quality and accuracy, expertise, competency\nShark | Dominance | Person places emphasis on accomplishing results, the bottom line, confidence\n \n+ Closed deals are won in order of cat, eagle, wolf and shark based on descending volume in all three dimensions.\n+ In consideration of business context, it might make sense that conversion rate of wolf (accuracy-focused) or shark (result-focused) was lower than cat (cooperation-focused) or eagle (relationship-focused).\n\nIf so, sales performance could be improved by matching SDRs\/SRs with MQLs properly.","b9acec21":"#### Characteristics of Closed Deal","f48e54b3":"+ 'watches_gifts' category generated 79.7% of total revenue of segment.\n+ 'watches_gifts' revenue soared in March and reached its peak in May. This category seems a seasonal item.\n+ Except 'watches_gifts', product categories are irrelevant to watches segment.","756118f0":"## 1. Marketing Channel Effectiveness\n---\nOlist acquired sellers through diverse marketing channels. Let's find out which channel was the most effective in lead generation. Below the term 'Marketing Qualified Lead(MQL)' means a potential reseller\/manufacturer who has an interest in selling their products on Olist. ","ed427c8c":"Likewise, monthly volume of closed deals sharply increased after 2018.","1f4e9cd6":"Sales length was dramatically shortened as well. While 13.1% of deals were closed within 50 days in 2017, 78.9% was closed in 2018. In a nutshell, both conversion rate and sales length were improved in 2018 against 2017. ","567b7145":"### Conversion Rate\nConversion rate means the percentage of MQLs who finally signed up for sellers (closed deals). ","335c30fe":"### Monthly Revenues by Business Segment\n_\\* Revenue is calculated by summing up price_","8b351116":"### Time Series Volume of Marketing Qualified Lead (MQL)","577a3666":"+ Total revenues across 29 segments came in at 664,858 in the first eight months of 2018.\n+ The biggest segment was 'watches', which generated 17.4% of total revenues (115,901).","ba7ffeb0":"1. SDR\n + 1st and 3rd SDRs are eminent in handling cat.\n + 2nd and 10th SDRs are specialized in eagle.\n + 1st SDR is also unparalleled in dealing with wolf.\n + As to shark 1st SDR is better than the others, but not enough to claim to be an expert.\n + __SDR is the first contact point of MQL so they do not know the lead's behaviour profile yet. Therefore sharing top performers' expertise in cat, eagle or wolf can enhance team performance.__\n + __In regard to shark, external resources may be helpful in building capability.__\n\n2. SR\n  + 1st SR has matchless skills in managing both cat and eagle.\n  + SRs on the first four places are good at handling wolf, but not as much as their highest performing fields.\n  + 2nd and 5th are the best performers in regard to shark, but hard to say 'proficient'.\n  + __Eagle can be assigned to 2nd SR. Further, spreading knowledge among the team can improve team performance.__\n  + __Like SDR, external knowledge sources can be a way to boost performance.__","00c00436":"+ The leading seller is 'online big', perhaps a large internet-based company with high market share or strong brand awareness.\n+ And its business type is 'reseller'. That explains why there are irrelevant product categories in 'watches' segment. The fact that a business segment may have unrelated product categories means revenue analysis should be conducted based on 'product category' rather than 'business segment'.","19e76d41":"#### SDR\/SR Performance by Behaviour Profile","5d44e17b":"### MQL Volume by Marketing Channel\n_\\* Marketing channel is recorded in 'origin' field._","dc19a505":"+ With 46 items in 'watches gifts' category, the top selling product accounts for 24.4% and five best-selling items form 53.9% of category revenue.\n+ 'watches_gifts' may be a relatively homogeneous market so securing popular items is more important than pursuing a broad range of products. It implies that a category leader should be acquired to boost category revenue.","56e8a944":"# Settings\n---","2ffcacb4":"## 3. Closed Deal Performance Overview\n---\nIn this part I will see the total revenue from closed deals after signing in and drill down the top revenue-generating segment.","2e4e82c3":"#### Watches Revenue by Product Category"}}