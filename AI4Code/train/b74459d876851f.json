{"cell_type":{"8fd43f0a":"code","52fbda12":"code","41782064":"code","7c69f454":"code","ffdfb846":"code","4d4943ba":"code","81c075c3":"code","6505b927":"code","e8389ec6":"code","ecbcd376":"code","a1ee5e07":"code","9edbbc0c":"code","d186f77d":"code","71317fe1":"code","43b625b3":"code","8fb618ac":"code","31d74f9e":"code","f6f7c23b":"code","9deaf479":"code","971cf80e":"code","638c0ba7":"code","1626fc58":"code","50679429":"code","5026fda5":"code","5122c6be":"code","8081f2f6":"code","4358c63f":"code","2c395db5":"code","5105e011":"code","18416b40":"code","065ba18b":"code","bbfe8605":"code","f5f14147":"code","94c8d71e":"code","2c87301b":"code","b738aadf":"code","41c8fe36":"code","ac7336a1":"code","506a9ee8":"code","d1634fdd":"code","94f4c023":"code","ed767fbb":"code","f3179033":"code","830aa31c":"code","e2b7e1d9":"code","e852f1db":"code","ec9f6656":"markdown","ff01d1a1":"markdown","c713d2aa":"markdown","6d1d0047":"markdown","e80e9fd3":"markdown","94021fa6":"markdown","33bf3b1f":"markdown","25d17712":"markdown","a4f302d6":"markdown","4a438a2d":"markdown","83a5d13c":"markdown","202e45a8":"markdown","b2fe1708":"markdown","780f9334":"markdown","76a6fe73":"markdown","75f95668":"markdown","d134fae2":"markdown"},"source":{"8fd43f0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nsb.set_style('whitegrid')\nsb.set_palette('pastel')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52fbda12":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nsupplement = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n\ntest_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\npid=test_data.PassengerId","41782064":"data.head()","7c69f454":"data.dtypes","ffdfb846":"test_data.dtypes","4d4943ba":"supplement.dtypes","81c075c3":"#Finding Null Values\nprint(\"Null Values in Training data: \")\nprint(data.isnull().sum())\nprint(\"\")\nprint(\"Null Values in Test Data: \")\nprint(test_data.isnull().sum())","6505b927":"print(\"Training Data\")\nprint(\"Mean:\",data['Age'].mean())\nprint(\"Median\",data['Age'].median())\nprint(\"Mode\",data['Age'].mode())\n\nprint(\"\")\nprint(\"Test data\")\nprint(\"Mean:\",test_data['Age'].mean())\nprint(\"Median\",test_data['Age'].median())\nprint(\"Mode\",test_data['Age'].mode())\n","e8389ec6":"data['Age'] = data['Age'].fillna(data['Age'].median())\ntest_data['Age'] = test_data['Age'].fillna(test_data['Age'].median())","ecbcd376":"data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])\n\n","a1ee5e07":"test_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].mean())","9edbbc0c":"columns=['PassengerId','Cabin','Ticket','Name']\ndata=data.drop(columns,axis=1)\ntest_data=test_data.drop(columns,axis=1)","d186f77d":"data.head()","71317fe1":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata['Sex'] = le.fit_transform(data['Sex'])\ntest_data['Sex'] = le.fit_transform(test_data['Sex'])\ndata['Embarked'] = le.fit_transform(data['Embarked'])\ntest_data['Embarked'] = le.fit_transform(test_data['Embarked'])\ndata['Age'] = data['Age'].astype(int)","43b625b3":"plt.figure(figsize = (12,6))\nsb.heatmap(data.corr(),annot=True)","8fb618ac":"#Percentage Survived for each category\ntarget=['Survived']\nselected=['Sex','Pclass','Embarked','SibSp','Parch']\nfor x in selected:\n    print('Survival Percentage By',x)\n    print(data[[x, target[0]]].groupby(x,as_index=False).mean(),'\\n')\n# Sex - 0: Female, 1: Male\n# Embarked - 0: C, 1: Q, 2: S\n","31d74f9e":"plt.figure(figsize = (15,6))\nplt.hist(x = [data[data['Survived']==1]['Age'],data[data['Survived']==0]['Age']],stacked=True,color = ['green','red'],label = ['Survived','Dead'])\nplt.xlabel('Age')\nplt.ylabel('Survived')\nplt.title('Survival By Age')\nplt.legend()\n","f6f7c23b":"plt.figure(figsize = (15,6))\nplt.hist(x = [data[data['Survived']==1]['Fare'],data[data['Survived']==0]['Fare']],stacked=True,color = ['green','red'],label = ['Survived','Dead'])\nplt.xlabel('Fare')\nplt.ylabel('Survived')\nplt.title('Survival By Fare')\nplt.legend()","9deaf479":"plt.figure(figsize = (15,6))\nplt.hist(x = [data[data['Survived']==1]['Pclass'],data[data['Survived']==0]['Pclass']],stacked=True,color = ['green','red'],label = ['Survived','Dead'])\nplt.xlabel('PClass')\nplt.ylabel('Survived')\nplt.title('Survival By Class')\nplt.legend()","971cf80e":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier","638c0ba7":"from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score,cross_val_predict\nfrom sklearn.metrics import confusion_matrix,precision_score,recall_score,f1_score,accuracy_score\n","1626fc58":"y = data['Survived']\nX = data[['Pclass','Sex','Fare','Embarked']]\ntest_data.drop(['Age','SibSp','Parch'],1,inplace=True)","50679429":"test_data","5026fda5":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20)","5122c6be":"param_grid = {'n_neighbors':np.arange(1,6)}\ngrid_knn = GridSearchCV(KNeighborsClassifier(),param_grid,cv=3)\ngrid_knn.fit(X,y)","8081f2f6":"grid_knn.best_params_","4358c63f":"clf1 = grid_knn.best_estimator_","2c395db5":"clf1.fit(X_train,y_train)\n","5105e011":"y_train_pred = cross_val_predict(clf1,X_train,y_train,cv=3)\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf1,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf1,X_test,y_test,cv=3,scoring='accuracy').mean())","18416b40":"clf2 = LogisticRegression(C = 1,max_iter = 500)\nclf2.fit(X_train,y_train)","065ba18b":"y_train_pred = cross_val_predict(clf2,X_train,y_train,cv=3)\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf2,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf2,X_test,y_test,cv=3,scoring='accuracy').mean())","bbfe8605":"clf3 = SVC(kernel='poly',C = 1000)\nclf3.fit(X_train,y_train)","f5f14147":"y_train_pred = cross_val_predict(clf3,X_train,y_train,cv=3)\nprint(\"accuracy_score\",accuracy_score(y_train,y_train_pred))\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf3,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf3,X_test,y_test,cv=3,scoring='accuracy').mean())","94c8d71e":"param_grid = {'max_depth':np.arange(1,4),'min_samples_leaf':np.arange(1,3)}\ngrid_tree = GridSearchCV(DecisionTreeClassifier(),param_grid,cv=6)\ngrid_tree.fit(X,y)","2c87301b":"grid_tree.best_params_","b738aadf":"#clf4 = grid_tree.best_estimator_\n#clf4.fit(X_train,y_train)\nclf4 = DecisionTreeClassifier(max_depth=3,min_samples_leaf=1)","41c8fe36":"from sklearn.metrics import accuracy_score\ny_train_pred = cross_val_predict(clf4,X_train,y_train,cv=3)\nprint(\"accuracy score:\",accuracy_score(y_train,y_train_pred))\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf4,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf4,X_test,y_test,cv=3,scoring='accuracy').mean())","ac7336a1":"clf5 = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=4, max_features='auto',\n                       max_leaf_nodes=2, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=2, min_samples_split=15,\n                       min_weight_fraction_leaf=0.0, n_estimators=5,\n                       random_state=1, verbose=0,\n                       warm_start=False)\nclf5.fit(X_train,y_train)","506a9ee8":"y_train_pred = cross_val_predict(clf5,X_train,y_train,cv=5)\nfrom sklearn.metrics import accuracy_score\nprint(\"accuracy score:\",accuracy_score(y_train,y_train_pred))\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf5,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf5,X_test,y_test,cv=3,scoring='accuracy').mean())","d1634fdd":"clf6 = BaggingClassifier(base_estimator = DecisionTreeClassifier(max_depth=4, min_samples_leaf=1),n_estimators = 1000,bootstrap=True,n_jobs=-1)\nclf6.fit(X_train,y_train)","94f4c023":"y_train_pred = cross_val_predict(clf6,X_train,y_train,cv=3)\nprint(\"accuracy_score\",accuracy_score(y_train,y_train_pred))\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf6,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf6,X_test,y_test,cv=3,scoring='accuracy').mean())","ed767fbb":"clf7 = AdaBoostClassifier(base_estimator = DecisionTreeClassifier(max_depth=4, min_samples_leaf=2),n_estimators=1000)\nclf7.fit(X_train,y_train)","f3179033":"y_train_pred = cross_val_predict(clf7,X_train,y_train,cv=3)\nprint(\"accuracy_score\",accuracy_score(y_train,y_train_pred))\nprint(\"Confusion Matrix:\",confusion_matrix(y_train,y_train_pred))\nprint(\"\")\nprint(\"Precision Score: \",precision_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Recall Score: \",recall_score(y_train,y_train_pred))\nprint(\"\")\nprint(\"Cross Val Score in Sample\",cross_val_score(clf7,X_train,y_train,cv=3,scoring='accuracy').mean())\nprint(\"\")\nprint(\"Cross Val Score out Sample\",cross_val_score(clf7,X_test,y_test,cv=3,scoring='accuracy').mean())","830aa31c":"clf = DecisionTreeClassifier(max_depth=3,min_samples_leaf=1)\nclf.fit(X,y)","e2b7e1d9":"predicted_values = clf.predict(test_data)\npredicted_values","e852f1db":"output = pd.DataFrame({'PassengerId': pid, 'Survived': predicted_values})\noutput.to_csv('my_submission21_.csv', index=False)\n","ec9f6656":"# Exploratory Data Analysis","ff01d1a1":"Bagging Classifier","c713d2aa":"**Support Vector Classifier**","6d1d0047":"# Model Selection","e80e9fd3":"**Droping unnecessary columns**","94021fa6":"Median Seems a good Sollution!","33bf3b1f":"**Encoding Data**","25d17712":"# Data Cleaning and Preprocessing","a4f302d6":"**Decision Tree Classifier**","4a438a2d":"**KNN**","83a5d13c":"**Logistic Regression**","202e45a8":"**Random Forest Classifier**","b2fe1708":"# Model Development","780f9334":"AdaBoostClassifier","76a6fe73":"**Survival by Age**","75f95668":"Age,Cabin and Embarked columns in Training data set contain Null Values\nAge,Fare,Cabin columns in test data set contain Null Values","d134fae2":"# Submission"}}