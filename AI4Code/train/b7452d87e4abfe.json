{"cell_type":{"3224ac51":"code","d6b745c5":"code","55b5c5d1":"code","73f3712d":"code","46c952a3":"code","a16c2fe1":"code","7c474c76":"markdown","c1fc1e76":"markdown","7b71c847":"markdown","242c37c4":"markdown"},"source":{"3224ac51":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [15,10]","d6b745c5":"match = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","55b5c5d1":"match.head()","73f3712d":"home_players_id = list(match['DisplayName'].to_list())[:11]\naway_players_id = list(match['DisplayName'].to_list())[11:22]\nhome_players_x = list(match['X'].to_list())[:11]\naway_players_x = list(match['X'].to_list())[11:22]\nhome_players_y = list(match['Y'].to_list())[:11]\naway_players_y = list(match['Y'].to_list())[11:22]\n\n\n\nprint('Example, home players id: ')\nprint(home_players_id)","46c952a3":"import matplotlib.pyplot as plt\n\n# Home team (in blue)\nplt.subplot(2, 1, 1)\nplt.rc('grid', linestyle=\"-\", color='black')\nplt.rc('figure', figsize=(12,20))\nplt.gca().invert_yaxis() # Invert y axis to start with the goalkeeper at the top\nfor label, x, y in zip(home_players_id, home_players_x, home_players_y):\n    plt.annotate(\n        label, \n        xy = (x, y), xytext = (-20, 20),\n        textcoords = 'offset points', va = 'bottom')\nplt.scatter(home_players_x, home_players_y,s=280,c='blue')\nplt.grid(True)\n\n# Away team (in red)\nplt.subplot(2, 1, 2)\nplt.rc('grid', linestyle=\"-\", color='black')\nplt.rc('figure', figsize=(12,20))\nplt.gca().invert_xaxis() # Invert x axis to have right wingers on the right\nfor label, x, y in zip(away_players_id, away_players_x, away_players_y):\n    plt.annotate(\n        label, \n        xy = (x, y), xytext = (-20, 20),\n        textcoords = 'offset points', va = 'bottom')\nplt.scatter(away_players_x, away_players_y,s=280,c='red')\nplt.grid(True)\n\n\nax = [plt.subplot(2,2,i+1) for i in range(0)]\nfor a in ax:\n    a.set_xticklabels([])\n    a.set_yticklabels([])\n#plt.subplots_adjust(wspace=0, hspace=0)\n\n\nplt.show()","a16c2fe1":"from collections import Counter\n\nplayers_y = [home_players_y,away_players_y]\nformations = [None] * 2\nfor i in range(2):\n    formation_dict=Counter(players_y[i]);\n    sorted_keys = sorted(formation_dict)\n    formation = ''\n    for key in sorted_keys[1:-1]:\n        y = formation_dict[key]\n        formation += '%d-' % y\n    formation += '%d' % formation_dict[sorted_keys[-1]] \n    formations[i] = formation\n\n\nprint('Home team formation: ' + formations[0])\nprint('Away team formation: ' + formations[1])","7c474c76":"**Next, we get the players last names from the table Player. I filter out the None values (if any) from the query and add them back later to the players_names list. I try to keep the name in the same order as the other lists, so as to later map the names to the x,y coordinates**","c1fc1e76":"**We can also buil a string with the formations and print it:**","7b71c847":"**Next we query a match. I chose the first match**","242c37c4":"**Let's start by importing the dataset."}}