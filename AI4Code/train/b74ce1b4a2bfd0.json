{"cell_type":{"7d87ce4d":"code","57a2346c":"code","5191c886":"code","ceb833ff":"code","a119c908":"code","21472eb9":"code","9557ba37":"code","04bff2ce":"code","7b9c6910":"code","919b88e3":"code","2926c621":"code","0065c4a4":"code","78edd4ba":"code","2a8716eb":"code","548c5641":"code","ecd3f47b":"code","b5f8b41f":"code","4167d4d2":"code","b07fa18b":"code","57d2523d":"code","ce00f5dc":"code","7362ebdc":"code","c7bb3821":"markdown"},"source":{"7d87ce4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\nimport json\n\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure, ColumnDataSource, show\nfrom bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar, HoverTool, BoxZoomTool, ZoomOutTool, ResetTool, Legend, LegendItem\nfrom bokeh.palettes import brewer, Spectral4\n\n\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","57a2346c":"#Load mapping data\nmapping_filepath = \"..\/input\/furniture-bank\/MAPPING DATA.csv\"\nmapping = pd.read_csv(mapping_filepath, index_col=0, encoding=\"latin-1\")\nmapping.columns = mapping.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\nmapping = mapping[mapping['mailing_city'] == 'Toronto']","5191c886":"#Load data\ncoordinate_filepath = \"..\/input\/furniture-bank\/ONTARIO COORDINATE FILE.csv\"\ncoordinate = pd.read_csv(coordinate_filepath, index_col=0, encoding=\"latin-1\")\n\n#clean up column names\ncoordinate.columns = coordinate.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntoronto_coordinates = coordinate[coordinate.place_name == 'Toronto']\n\n#standardize formatting in preparation for a join\nmapping['postalcode'] = mapping['postalcode'].str.strip().str.upper().str.replace(' ', '')\ncoordinate.index = coordinate.index.str.strip().str.upper()","ceb833ff":"mapping.head()","a119c908":"mapping['in_kind_value_tax_receipt_value'] = mapping['in_kind_value_tax_receipt_value'].replace('[\\$,]', '', regex=True).astype(float)","21472eb9":"mapping = mapping.filter(['account_name', 'type', 'in_kind_value_tax_receipt_value','postalcode'])\nmapping.sample()","9557ba37":"mapping['in_kind_value_tax_receipt_value'] = mapping['in_kind_value_tax_receipt_value']\ntax_mappings = pd.DataFrame(mapping.groupby(['postalcode','type'])['in_kind_value_tax_receipt_value'].sum())","04bff2ce":"#merge donor\/client tax data on location, then filter\ntax_coordinates = coordinate.reset_index()\ntax_mappings = tax_mappings.reset_index()\n\ndonation_mappings = pd.merge(tax_mappings, \n                  coordinate,\n                  left_on='postalcode',\n                 right_on='PostalCode', \n                   how='inner')\ndonation_mappings = donation_mappings.filter(['postalcode','type','in_kind_value_tax_receipt_value', 'latitude','longitude'])\ndonation_mappings = donation_mappings.rename(columns = {'in_kind_value_tax_receipt_value':'sumtotal'})","7b9c6910":"donation_mappings = donation_mappings.sort_values(by=['postalcode','type'])\ndonation_mappings.sample(5)","919b88e3":"#merge\nmerged_mapping = pd.merge(mapping, \n                  coordinate,\n                  left_on='postalcode',\n                 right_on='PostalCode')","2926c621":"#create pivot table of number of locations within a zipcode\nfsa_counts = pd.DataFrame(merged_mapping['fsa'].value_counts().reset_index())\nfsa_counts.columns = ['zip', 'count']\n\n#remove all zip codes that have under 10 donations\nremoved_nums = list(range(100))\nfsa_counts = fsa_counts[~fsa_counts['count'].isin(removed_nums)]\nmerged_mapping = merged_mapping.filter(['fsa', 'latitude', 'longitude'])\nselect_toronto_zipcodes = fsa_counts.zip","0065c4a4":"donation_locations = merged_mapping.filter(['fsa', 'latitude', 'longitude'])\ndonation_locations = donation_locations[donation_locations['fsa'].isin(select_toronto_zipcodes)]","78edd4ba":"donation_locations.count()","2a8716eb":"latitude = donation_locations.latitude\nlongitude = donation_locations.longitude","548c5641":"#import geojson map of Ontario\nontario_map = gpd.read_file('..\/input\/ontariofsa\/Ontario_FSAs.geojson')\nontario_geometry = ontario_map.filter(['CFSAUID','geometry'])\n\n#run a merge so that each row will also have the total number of donations in each zip code\nontario_geometry = pd.merge(ontario_geometry, \n                  fsa_counts,\n                  left_on='CFSAUID',\n                 right_on='zip')\n\n#remove unecessary columns\nontario_geometry = ontario_geometry.filter(['geometry','zip','count'])","ecd3f47b":"ontario_geometry.head()","b5f8b41f":"ontario_json = json.loads(ontario_geometry.to_json())\njson_data = json.dumps(ontario_json)\ngeosource = GeoJSONDataSource(geojson = json_data)","4167d4d2":"#Define a sequential multi-hue color palette.\npalette = brewer['Blues'][8]\n#Reverse color order so that dark blue is highest obesity.\npalette = palette[::-1]\n#Instantiate LinearColorMapper that linearly maps numbers in a range, into a sequence of colors.\ncolor_mapper = LinearColorMapper(palette = palette, low = (fsa_counts['count'].min()), high = (fsa_counts['count'].max()))\n\n#choropleth map attempt\nhover = HoverTool(tooltips = [ ('number of donations', '@count'), ('zipcode','@zip')])\np = figure(title=\"Number of items donated in Toronto by zipcode\",tools=[hover])\np.patches('xs','ys', source = geosource,fill_color = {'field' :'count', 'transform' : color_mapper},\n          line_color = 'black', line_width = 0.25, fill_alpha = 1)\np.add_tools(BoxZoomTool(), ZoomOutTool(), ResetTool())\n#p.circle(x=longitude,y=latitude,size=1, color=\"#410000\", alpha=0.5)\noutput_notebook()\nshow(p)","b07fa18b":"cutoff = donation_mappings[\"sumtotal\"].quantile(0.99)\ndonation_mappings = donation_mappings[donation_mappings[\"sumtotal\"] < cutoff]\nsumtotal = donation_mappings['sumtotal']","57d2523d":"new_donation_mappings = donation_mappings.replace('In Kind Donation', '#315902')\nnew_donation_mappings = new_donation_mappings.replace('Delivery', '#410000')\nnew_sumtotal = sumtotal.replace()\n\nlongitude = donation_mappings['longitude']\nlatitude = donation_mappings['latitude']\ndonation_type = donation_mappings['type']\ndonation_color = new_donation_mappings['type']","ce00f5dc":"longitude = list(longitude)\nlatitude = list(latitude)\nsumtotal = list(sumtotal)\ndonation_color = list(donation_color)\ndonation_type = list(donation_type)\n\nlongitude = list(map(float, longitude))\nlatitude = list(map(float, latitude))\nsumtotal = list(map(float, sumtotal))\ndivisor = 450\nnew_sumtotal = [x \/ divisor for x in sumtotal]","7362ebdc":"#Define a sequential multi-hue color palette.\n#palette = 'FFFCFC'\n#Reverse color order so that dark blue is highest obesity.\n#palette = palette[::-1]\n#Instantiate LinearColorMapper that linearly maps numbers in a range, into a sequence of colors.\n#color_mapper = LinearColorMapper(palette = palette, low = (fsa_counts['count'].min()), high = (fsa_counts['count'].max()))\n\n#choropleth map attempt\n#hover = HoverTool(tooltips = [ ('donation type', donation_color), ('something here')])\nlocation_source = ColumnDataSource(data=dict(\n    x = longitude,\n    y = latitude,\n    total = sumtotal,\n    size = new_sumtotal,\n    color = donation_color,\n    dtype = donation_type\n))\nhover = HoverTool(tooltips = [(\"donation type\", \"@dtype\"),\n                          (\"total amount donated\", \"@size\")])\n\n#TOOLTIPS = [\n #   (\"dtype\", \"$dtype\"),\n#]\n\np = figure(title=\"Furniture Donations in Toronto (drag box to zoom)\", \n           x_range=[-79.7,-79.1], y_range=[43.55,43.875])\np.add_tools(hover)\np.patches('xs','ys', color='white', source = geosource,\n          line_color = 'black', line_width = 0.25, fill_alpha = 1)\n#p.add_tools(BoxZoomTool(), ZoomOutTool(), ResetTool())\np.circle(x='x',y='y',size='size', color='color', alpha=0.5, source=location_source, hover_fill_color = 'black')\noutput_notebook()\nshow(p)","c7bb3821":"**Scroll down to see the maps!**\n\nHovering over the maps displays additional information.\nUse the tools on the right-hand side to zoom in and out.\n\nThese visualizations were created for the November 2019 [Data Viz for Social Good](https:\/\/www.vizforsocialgood.com\/) Competition\nData provided by [Furniture Bank](http:\/\/https:\/\/www.furniturebank.org\/)\n\n**Questions for Graph One (Blue):**\n- Which zipcodes produce the most donations? Which zipcodes produce the most donations per capita?\n- How far does the average donation travel? \n\n**Questions for Graph Two (Red & Green):**\n- Is there a commonality among regions (property value, household income, access to traditional retail, etc.) that predominantly receive donations? That predominantly make them?\n- Is the variance the same for the average dollar amount of donations made or received? Is it possible that a relatively small number of large donations are distributed across many homes?"}}