{"cell_type":{"43e75d8d":"code","f4423fb4":"code","e2050796":"code","1c2c47a4":"code","8f1ff714":"code","09fa11db":"code","6322dbed":"code","1528c945":"code","33db6918":"code","e62653a9":"code","27180f19":"code","a941c3b4":"code","b5554659":"code","9c326e87":"code","0cb0ea91":"code","6e790150":"code","39a0d8a9":"code","52ec9659":"code","e90b7691":"code","b443b315":"code","38e15b0a":"code","33881932":"code","b152c3dd":"code","8f5094c8":"code","b22708fd":"code","51ca3e81":"code","7e5d0756":"code","d89b279c":"code","508d2e2c":"code","533ebcc4":"code","9ae0845a":"code","9f14ed40":"code","f028ad7d":"code","7e5f5c3d":"code","e294bedc":"code","b617e28f":"code","988da228":"code","979972d0":"code","34dde3b3":"code","ed406ec9":"code","aca2d90e":"code","4d2129a6":"code","dd2f3b35":"code","fdf16cf3":"code","f02067ec":"code","7b8595b7":"code","3235b18e":"code","95739b3c":"code","1ea3ea34":"code","a15b1e1e":"code","d73cfd86":"code","0962e7b7":"code","7fa5a7b5":"code","c6f21316":"code","584db19e":"code","3f883276":"code","a8c69a45":"code","b41d644c":"code","9798b38c":"code","b873cf1f":"code","07f8e53c":"code","dfdecdfe":"code","1350f03c":"code","a0b76fff":"code","56e7df9a":"code","63023a16":"code","1a9fd081":"code","d2985867":"code","1fd07bf3":"code","e9e28871":"code","c52804ad":"code","f624fbec":"code","aa20c1bd":"code","b297198f":"code","eb32b65f":"code","f63b4958":"code","43cce234":"code","84857da1":"code","b7eae0f7":"code","1f714e32":"code","606ebd2e":"code","d15e7a60":"markdown","16f434c3":"markdown","cf366b4c":"markdown","95a2473c":"markdown","cc0a6b7a":"markdown","aad1991e":"markdown","8bf2d32e":"markdown","c906177f":"markdown","fbbb99ae":"markdown","337a92a5":"markdown","30cbe9a0":"markdown","7bd8191f":"markdown","933f968c":"markdown","92220117":"markdown","a58e1119":"markdown","ce05a73f":"markdown","6a9a40b2":"markdown","c738982a":"markdown","c1d842d2":"markdown","d7e3e4ca":"markdown","dfa23d25":"markdown","70cd7022":"markdown","b1c75c32":"markdown","e6f1c913":"markdown","9246f618":"markdown","eca31c7d":"markdown","18853701":"markdown","c493c5a5":"markdown","c972a4ad":"markdown","d5221e8d":"markdown"},"source":{"43e75d8d":"import pandas as pd\ndf = pd.read_csv(\"datos\/train.csv\", sep=\",\")\npd.options.display.float_format = '{:20,.2f}'.format # suprimimos la notacion cientifica en los outputs","f4423fb4":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport folium\npd.set_option('display.max_columns', 100)\npd.set_option('display.float_format', '{:.2f}'.format)\npd.set_option('mode.chained_assignment', None)\npd.options.display.float_format = '{:20,.2f}'.format\n\n\n%matplotlib inline\n\nimport numpy as np","e2050796":"df.sample(3)","1c2c47a4":"df.loc[0]","8f1ff714":"# dimensiones del DF\nprint(df.shape)\ndf.size # rows x col","09fa11db":"# veo info general\ndf.info()","6322dbed":"# cantidad de elementos elementos no nulos en el data frame\ndf.count()","1528c945":"df.loc[:,['provincia']].memory_usage()","33db6918":"df['provincia'].unique().size","e62653a9":"df['provincia'].value_counts()","27180f19":"# creo una nueva serie en el df de tipo category (enum)\ndf['provincia'] = df['provincia'].astype('category')","a941c3b4":"df['provincia'].memory_usage()","b5554659":"df['provincia'].dtype","9c326e87":"df.loc[0:0 , 'fecha']","0cb0ea91":"# Seteamos la fecha al tipo datetime\ndf['fecha'] = pd.to_datetime(df['fecha'])\n# generamos una nueva columna obteniendo el a\u00f1o y mes\ndf['year'] = df['fecha'].dt.year\ndf['month'] = df['fecha'].dt.month","6e790150":"df.dtypes","39a0d8a9":"df['tipodepropiedad'].unique().size","52ec9659":"df['tipodepropiedad'].value_counts()","e90b7691":"df['tipodepropiedad'] = df['tipodepropiedad'].astype('category')","b443b315":"df['tipodepropiedad'].dtype","38e15b0a":"df['ciudad'].unique().size","33881932":"df['ciudad'].value_counts()","b152c3dd":"df['ciudad'] = df['ciudad'].astype('category')","8f5094c8":"df['ciudad'].dtype","b22708fd":"df.dtypes","51ca3e81":"# metricas generales \ndf.describe()","7e5d0756":"# ver los nulos si existen\ndf.isnull().any()","d89b279c":"df.isnull().sum()","508d2e2c":"nulos = pd.DataFrame(df.isnull().sum(), columns=['Nulos'])\nnulos['Porcentaje %'] = round(100*nulos['Nulos'] \/ len(df), 2)\nnulos.sort_values ('Porcentaje %', ascending=False)","533ebcc4":"nulos.index = nulos.index.set_names(['feature'])\nnulos = nulos.reset_index(level='feature')\nfeatures = nulos.feature.unique()","9ae0845a":"total = 240000\nN = len(features)\nporc_valor = nulos['Porcentaje %'].map(lambda x: total*((100 - x)\/100))\nporc_nulos = nulos['Porcentaje %'].map(lambda x: total*(x\/100))\nind = np.arange(N)  \nwidth = 0.50      \n\np1 = plt.bar(ind, porc_valor, width, color='black')\np2 = plt.bar(ind, porc_nulos, width,bottom=porc_valor, color='lightgrey')\n\nplt.ylabel('Cantidad de filas')\nplt.xlabel('features')\nplt.title('Cantidad de nulos sobre valores asignados')\nplt.xticks(ind, features)\nplt.xticks(rotation=90)\n#plt.yticks(np.arange(0, 100, 10))\nplt.legend((p1[0], p2[0]), ('con valor', 'nulos'))\nplt.rcParams['figure.figsize'] = [10, 10]\nax = plt.gca()\nax.yaxis.get_major_formatter().set_scientific(False)\nplt.show()","9f14ed40":"# Verifico si son unicos los IDs\ndf['id'].unique().size == df['id'].count()","f028ad7d":"# Verifico si son unicas las direcciones\ndf['direccion'].unique().size == df['direccion'].count()","7e5f5c3d":"# esta funcion devueve las celdas duplicadas\ndef fduplicados (data, limite):\n    return data['Repeticiones'].sum() >= limite","e294bedc":"df1 = df.copy()\ndf1['Repeticiones'] = 1","b617e28f":"agrupados = df1.groupby(['direccion'])","988da228":"agrupadosfiltrados = agrupados.filter(fduplicados, limite=2)","979972d0":"repetidos =agrupadosfiltrados.groupby(['direccion']).agg({'Repeticiones':'sum'})\nrepetidos.reset_index(inplace=True)","34dde3b3":"print (\"Cantidad de direcciones repetidas\")\nrepetidos[\"Repeticiones\"].sum()","ed406ec9":"print (\"Ranking de direcciones mas repetidas\")\nrepetidos.nlargest(10,'Repeticiones')","aca2d90e":"#con esto accedo directamente\ndf.loc[df['direccion'].isin([\"CASCATA\"]), :]","4d2129a6":"# Revisemos alguna caterogia principal para ver como esta compuesta:\n","dd2f3b35":"# cantidad de cada tipo de propiedades","fdf16cf3":"propiedades = df ['tipodepropiedad']","f02067ec":"propiedades.value_counts()","7b8595b7":"print(f\"Total tipos de propiedad: {propiedades.nunique()}\")\npropiedades.value_counts().plot(kind='bar', figsize=(15, 5), rot=70, \ntitle=\"Cantidad de inmuebles por tipo de propiedad\");","3235b18e":"antiguedad = df ['antiguedad']","95739b3c":"antiguedad.value_counts()","1ea3ea34":"df1 = df.dropna(subset=['antiguedad'])\n#df1['antiguedad_log'] = np.log(df1['antiguedad'])\n#df1['antiguedad_log'] = df1['antiguedad_log'].replace([np.inf, -np.inf], np.nan)\n\ng = df1['antiguedad'].plot.hist(bins=50, color='lightblue')\ng.set_title(\"Histograma de antig\u00fcedad\", fontsize=18)\ng.set_xlabel(\"antig\u00fcedad (a\u00f1os)\",fontsize=18)\ng.set_ylabel(\"cantidad\", fontsize=18)","a15b1e1e":"g = sns.distplot(df1[\"antiguedad\"], bins=50)\ng.set_title(\"Densidad de propiedades por antig\u00fcedad\", fontsize=18)\ng.set_xlabel(\"Antig\u00fcedad (a\u00f1os)\",fontsize=18)\ng.set_ylabel(\"Densidad\", fontsize=18)","d73cfd86":"banos = df ['banos']","0962e7b7":"banos.value_counts()","7fa5a7b5":"g = df['banos'].plot.hist(bins=6, color='lightblue')\ng.set_title(\"Histograma de ba\u00f1os por inmueble\", fontsize=18)\ng.set_xlabel(\"cantidad (ba\u00f1os)\",fontsize=18)\ng.set_ylabel(\"cantidad inmuebles\", fontsize=18)","c6f21316":"# ver cantidad de provincias\ndf['provincia'].unique()","584db19e":"\ndf['provincia'].unique().size","3f883276":"provincias = df['provincia']  #subset","a8c69a45":"provincias.value_counts()","b41d644c":"print(f\"cantidad de inmuebles por provincia: {provincias.nunique()}\")\nprovincias.value_counts().plot(kind='bar', figsize=(15, 5), rot=70, \ntitle=\"cantidad de inmuebles por provincia\");\n","9798b38c":"df1 = df.copy()","b873cf1f":"df1['valor']=1","07f8e53c":"# esta funcion devueve las celdas duplicadas\ndef func2 (data, limite):\n    return data['valor'].count() >= limite","dfdecdfe":"df1 = df1.groupby('ciudad').filter(func2, limite=2000)","1350f03c":"df1.groupby('ciudad').agg({'valor':'sum'}).sort_values('valor',ascending=False)","a0b76fff":"# precio promedio (MXN) segun tipo de propiedad\ndf.groupby('tipodepropiedad').mean()['precio'].sort_values(ascending=False)[0:19].plot(kind='bar',figsize=(14,4));\nplt.title(\"precio promedio (MXN) segun tipo de propiedad\")\nplt.ylabel('precio (MXN)')","56e7df9a":"#comencemos viendo los precios promedios por a\u00f1o\ndf.groupby('year').agg({'precio':'mean'})","63023a16":"g = df1['precio'].plot.hist(bins=50, color='lightblue')\ng.set_title(\"Histograma de precios\", fontsize=18)\ng.set_xlabel(\"precio (MXN)\",fontsize=18)\ng.set_ylabel(\"cantidad\", fontsize=18)","1a9fd081":"# Vemos que los datos est\u00e1n right skewed as\u00ed que aplicamos una transformaci\u00f3n logar\u00edtmica para normalizar\n# la distribuci\u00f3n de precios y poder calcular las correlaciones con el resto de las variables\ndf['precio_log'] = np.log(df['precio'])\n\ng = df['precio_log'].plot.hist(bins=50, color='lightblue')\ng.set_title(\"Histograma de precios (log)\", fontsize=18)\ng.set_xlabel(\"precio (log)\",fontsize=18)\ng.set_ylabel(\"cantidad\", fontsize=18)","d2985867":"# cantidad de publicaciones por a\u00f1o\n# df.groupby('year')['id'].count()  \ndf['year'].value_counts()","1fd07bf3":"# comparemos el precio por mes","e9e28871":" df.groupby('month').agg({'precio':['mean','count','sum']})","c52804ad":"# coordenadas de las ciudades\nciudades = pd.read_csv('datos\/ciudades.csv')","f624fbec":"# valores medios de precios de propiedades por ciudad\nprecios_por_ciudad = df.groupby('ciudad').agg({'precio': 'mean'})\\\n    .sort_values('precio', ascending=False)\n\nprecios_por_ciudad = pd.merge(precios_por_ciudad, ciudades, on='ciudad', how='left')\nprecios_por_ciudad = precios_por_ciudad.dropna()","aa20c1bd":"#nacho\nfrom folium.plugins import HeatMap\n# crea el mapa de Mexico usando valores de latitud y longitude\nmexico_heatmap = folium.Map(location=[20, -102], zoom_start=5)\n\nHeatMap(precios_por_ciudad[['lat', 'lng', 'precio']], radius=8, max_zoom=4).add_to(mexico_heatmap)\n#folium.map.LayerControl('topright', collapsed=False).add_to(mexico_heatmap)\n# Guarda el mapa\nmexico_heatmap.save(outfile= \"mapa.html\")\n# Mostrar el mapa\nmexico_heatmap","b297198f":"# el mapa interactivo utilizando la libreria folium no se muestra en la version online en github,\n# por eso cargamos algunas capturas del mismo.\nfrom IPython.display import Image\n\nImage(filename = \"img\/mapa01.png\")","eb32b65f":"Image(filename = \"img\/mapa02.png\")","f63b4958":"#Precio promedio de cada tipo de propiedades a lo largo del tiempo.","43cce234":"dftmp = df.groupby(['year', 'month', 'tipodepropiedad']).agg({'precio':'mean'})\n#dftmp['precio_log'] = np.log(dftmp['precio'])\ndftmp = dftmp.reset_index(level='year')\ndftmp = dftmp.reset_index(level='month')\ndftmp = dftmp.reset_index(level='tipodepropiedad')\ndftmp['yearmonth'] = dftmp['year'].map(str) + \"-\" + dftmp['month'].map(str)\ndftmp = dftmp.drop(columns=['year', 'month'])\ndftmp.head(5)","84857da1":"preciosporprop = [dftmp['precio'][dftmp.tipodepropiedad == 'Apartamento'], \n                  dftmp['precio'][dftmp.tipodepropiedad == 'Casa'],\n                  dftmp['precio'][dftmp.tipodepropiedad == 'Casa en condominio'],\n                  dftmp['precio'][dftmp.tipodepropiedad == 'Terreno']\n                 ]\ntipodepropiedad = ['Apartamento', 'Casa', 'Casa en condominio', 'Terreno']","b7eae0f7":"#plt.stackplot(np.arange(len(dftmp.groupby('yearmonth'))), precioporprop, labels=tipodepropiedad)\nx = np.arange(len(dftmp.groupby('yearmonth')))\nmpl.rcParams[\"axes.formatter.useoffset\"] = False\nplt.stackplot(x, preciosporprop , labels=tipodepropiedad)\nplt.xticks(x, ['1\/2012', ' ', ' ', ' ', ' ', '6\/2012', ' ', ' ', ' ', ' ', ' ', ' ',\n               '1\/2013', ' ', ' ', ' ', ' ', '6\/2013', ' ', ' ', ' ', ' ', ' ', ' ',\n               '1\/2014', ' ', ' ', ' ', ' ', '6\/2014', ' ', ' ', ' ', ' ', ' ', ' ',\n               '1\/2015', ' ', ' ', ' ', ' ', '6\/2015', ' ', ' ', ' ', ' ', ' ', ' ',\n               '1\/2016', ' ', ' ', ' ', ' ', '6\/2016', ' ', ' ', ' ', ' ', ' ', '12\/2016'])\nplt.legend(loc='upper left')\nplt.rcParams['figure.figsize'] = [8, 8]\nplt.title(\"precios de propiedades en el tiempo por tipo de propiedad\")\nplt.ylabel(\"precio (MXN)\")\nplt.xlabel(\"fecha\")\nax = plt.gca()\nax.yaxis.get_major_formatter().set_scientific(False)\n\nplt.show()","1f714e32":"# Analizamos que features son numericas para correlacionarlas\nfeatures_numericas = df.select_dtypes(include=[np.number])\nfeatures_numericas.dtypes\n\n# Observamos tambien cuales son las features categoricas\ncategoricas = df.select_dtypes(exclude=[np.number])\nprint(categoricas.dtypes)\ncategoricas.describe()","606ebd2e":"# Matriz de correlaciones como heatmap\ncorr = features_numericas.corr()\nplt.subplots(figsize=(20, 9))\nsns.heatmap(corr, square=True)\nplt.title(\"Matriz de correlaciones como heatmap\")","d15e7a60":"# Analisis exploratorio de datos","16f434c3":"## Distribucion geografica de inmuebles","cf366b4c":"#### Matriz de correlacion","95a2473c":"#### precio promedio de las propiedades de cada ciudad.","cc0a6b7a":"\n## 4.\tVerificacion de Calidad de Datos","aad1991e":"## 1) Carga de informacion en un DataFrame","8bf2d32e":"### Indice\n1.\tCarga de informaci\u00f3n en un DataFrame\n2.\tAnalizando utilizacion de memoria del dataframe\n3.\tConversion de Datos y mejoras en uso de memoria\n4.\tVerificacion de Calidad de Datos\n5.\tAnalizando propiedades especificas del set de datos\n","c906177f":"### precio promedio de las propiedades de cada ciudad.","fbbb99ae":"### Direcciones","337a92a5":"#### Cantidad de inmuebles por provincia","30cbe9a0":"#### distribucion de precios promedio ","7bd8191f":"### 2 Analizando utilizacion de memoria del dataframe","933f968c":"## Analisis de precios","92220117":"## Inmuebles","a58e1119":"#### provincia","ce05a73f":"#### distribucion de precios promedio por a\u00f1o","6a9a40b2":"### IDs","c738982a":"#### Fechas","c1d842d2":"#### tipodepropiedad","d7e3e4ca":"#### ciudad","dfa23d25":"#### precio promedio (MXN) segun tipo de propiedad","70cd7022":"##### Tipo y cantidad de inmuebles","b1c75c32":"#### precio promedio de las propiedades de cada ciudad. Acercamiento alrededor de Mexico DF\n","e6f1c913":"### vamos a buscar cuales son las direcciones duplicadas","9246f618":"#### precio por tipo de inmuebles a lo largo del tiempo","eca31c7d":"## 5) Analizando propiedades especificas del set de datos","18853701":"#### Ciudades con mayor cantidad de inmuebles (mas de 2000)","c493c5a5":"### 3.\tConversion de Datos y mejoras en uso de memoria","c972a4ad":"##### Cantidad de banos que tienen los inmuebles","d5221e8d":"#####  Antiguedad de los inmuebles (18% nulos)"}}