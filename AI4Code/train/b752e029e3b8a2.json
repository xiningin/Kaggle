{"cell_type":{"9f7792d0":"code","0cc4b768":"code","e24e40d9":"code","a37d0d27":"code","553145e7":"code","36010bc1":"code","d55b606f":"code","c6d2a8a5":"code","9b4fe915":"code","70524ab7":"code","a7dd8590":"code","72215ebb":"code","2d1b5579":"code","6796f937":"code","b0729531":"code","d2b70126":"code","df9efa9e":"code","df9bb324":"code","b4224a57":"code","4007ab2f":"code","cffe468a":"code","dadccedc":"code","5125b138":"code","c7b86329":"code","6ec3d82c":"code","e2a8d1ad":"code","72ffa8df":"code","e88442c8":"code","5ae2bbc6":"code","0788b27d":"code","e3b3c75d":"code","a0eaf749":"code","42d07127":"code","e0aa9aab":"code","7cf22833":"code","0cca3d70":"code","89908257":"code","ea336d1b":"code","493f8a7e":"code","4935789b":"code","d4808da5":"code","58dafdcf":"code","e2e76d8b":"code","a7bfc6dc":"code","a79ece7c":"code","f4b43fb4":"code","26796a3e":"code","0c2a3e80":"code","46618185":"code","0f7dc34f":"code","e1339843":"markdown","1b078abe":"markdown","957962b6":"markdown","723bf31d":"markdown","d2466705":"markdown","74dd8bfd":"markdown","e015887f":"markdown","6e15f8b2":"markdown","b75bee7e":"markdown","ba27c9c5":"markdown","b604cc84":"markdown","01969a6c":"markdown","782d29f9":"markdown","28df161b":"markdown","197806c2":"markdown","ae9afa25":"markdown","f2d17094":"markdown","dcba98ad":"markdown","624d8de2":"markdown","49229c18":"markdown","a50463df":"markdown","e24c8ade":"markdown","f8f412c6":"markdown","ec0f0561":"markdown","952030a8":"markdown","7f8a145c":"markdown","2c835109":"markdown","ddcfb7f5":"markdown","74cd7aad":"markdown","35911c08":"markdown","277931cd":"markdown","018f5d07":"markdown","7aa867d6":"markdown","e0c803f4":"markdown","0fb84842":"markdown"},"source":{"9f7792d0":"%%bash\napt-get install tree\ntree \/kaggle","0cc4b768":"import numpy as np \nimport pandas as pd \n\nimport os\n#\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u8868\u793a\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e24e40d9":"#\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n#\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\nsample_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","a37d0d27":"#(\u884c\u6570,\u5217\u6570)\u3092\u8868\u793a\ntrain.shape","553145e7":"#\u4e0a\u304b\u30895\u884c\u3092\u8868\u793a\ntrain.head()","36010bc1":"test.head()","d55b606f":"sample_submission.head()","c6d2a8a5":"# pandas_profiling\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u77e5\u308b\nimport pandas_profiling as pdp\n\npdp.ProfileReport(train)","9b4fe915":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport math","70524ab7":"fig=[]\n#\u5927\u67a0\u8a2d\u5b9a\nfigure,ax = plt.subplots(3, 2, figsize=(15, 15),sharey=True)\n#\u5404\u9805\u76ee\u4e00\u89a7\nfig.append(sns.countplot(x=\"Survived\",data=train,ax=ax[0,0]))\nfig.append(sns.countplot(x=\"Sex\",data=train,ax=ax[0,1]))\nfig.append(sns.countplot(x=\"Pclass\",data=train,ax=ax[1,0]))\nfig.append(sns.countplot(x=\"SibSp\",data=train,ax=ax[1,1]))\nfig.append(sns.countplot(x=\"Parch\",data=train,ax=ax[2,0]))\nfig.append(sns.countplot(x=\"Embarked\",data=train,ax=ax[2,1]))\n\n\n#\u30c7\u30fc\u30bf\u6570\u8868\u793a\u7528\u95a2\u6570\ndef output_count_to_graph(fig):\n    for i, bar in enumerate(fig.patches):\n        #\u30b5\u30f3\u30d7\u30eb\u6570\n        height = bar.get_height()\n        if math.isnan(height):\n            continue\n        #\u30c6\u30ad\u30b9\u30c8\u6a2a\u8ef8\u4f4d\u7f6e\n        x_position = bar.get_width() \/ 2 + bar.get_x()\n        #\u30c6\u30ad\u30b9\u30c8\u7e26\u8ef8\u4f4d\u7f6e\n        y_position = height\/2\n        #\u30c6\u30ad\u30b9\u30c8\u51fa\u529b\n        fig.text(\n            x_position,\n            y_position,\n            '{}'.format(int(height)),\n            ha='center',\n            va='bottom', \n            fontweight='bold', \n            fontsize=15)\n        \nfor i in range(6):\n    output_count_to_graph(fig[i])","a7dd8590":"#\u5404\u30ab\u30e9\u30e0\u5225\u306b\u751f\u6b7b\u3092\u53ef\u8996\u5316\nfig=[]\n#\u5927\u67a0\u8a2d\u5b9a\nfigure, ax = plt.subplots(3, 2, figsize=(15, 15), sharey=True)\n# \u4f59\u767d\u8a2d\u5b9a\nplt.subplots_adjust(wspace=0.2, hspace=0.4)\n\n#\u30b0\u30e9\u30d5\u4f5c\u6210\nfig.append(sns.countplot(x=\"Sex\", hue=\"Survived\",data=train,ax=ax[0,0]))\nfig.append(sns.countplot(x=\"Pclass\", hue=\"Survived\",data=train,ax=ax[0,1]))\nfig.append(sns.countplot(x=\"SibSp\", hue=\"Survived\",data=train,ax=ax[1,0]))\nfig.append(sns.countplot(x=\"Parch\", hue=\"Survived\",data=train,ax=ax[1,1]))\nfig.append(sns.countplot(x=\"Embarked\", hue=\"Survived\",data=train,ax=ax[2,0]))\n\n#\u67a0\u524a\u9664\nfigure.delaxes(ax[2, 1])\n\nfor i in range(5):\n    output_count_to_graph(fig[i])\n\n# \u51e1\u4f8b(anchor)\u3092\u53f3\u4e0a\u306b\u7f6e\u304f\u51e6\u7406\nfig[2].legend_._loc=1\nfig[3].legend_._loc=1","72215ebb":"bins = np.arange(0, 80, 5)\ng = sns.FacetGrid(train, col='Survived', aspect=1.5, height=4)\ng.map(sns.histplot, 'Age', kde=False, bins=bins)\ng.set_axis_labels('Age', 'Count')\nplt.show()","2d1b5579":"g2 = sns.FacetGrid(train, col='Sex', hue='Survived', aspect=1.5, height=4)\ng2.map_dataframe(sns.histplot, 'Age', bins=bins, alpha=0.5)\ng2.add_legend()\ng2.set_axis_labels('Age', 'Count')\nplt.show()","6796f937":"train.isnull().sum()","b0729531":"test.isnull().sum()","d2b70126":"# Fare\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b \uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\uff09\nFare_mean = train[\"Fare\"].mean()\nprint('Fere mean:', Fare_mean)\n\ntest[\"Fare\"].fillna(Fare_mean, inplace=True)","df9efa9e":"# 1. Age\u306e\u6b20\u640d\u5024\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\nAge_median = train[\"Age\"].median()\nprint('Age median:', Age_median)\n\ntrain[\"Age\"].fillna(Age_median, inplace=True)\ntest[\"Age\"].fillna(Age_median, inplace=True)","df9bb324":"# 2. Embarked\u306e\u6b20\u640d\u5024\u3092\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\nEmbarked_mode = train[\"Embarked\"].mode()[0]\nprint('Embarked mode:', Embarked_mode)\n\ntrain[\"Embarked\"].fillna(Embarked_mode, inplace=True)\ntest[\"Embarked\"].fillna(Embarked_mode, inplace=True)","b4224a57":"# \u5225\u89e3\n# data = pd.concat([train, test], sort=False)\n# Age_median = data[\"Age\"].mean()\n# data[\"Age\"].fillna(Age_median, inplace=True)\n# print('Age median:', Age_median)\n\n# Embarked_mode = data[\"Embarked\"].mode()[0]\n# data[\"Embarked\"].fillna(Embarked_mode, inplace=True)\n# print('Embarked mode:', Embarked_mode)\n\n# # train\u3068test\u306b\u623b\u3059\n# train = data[:len(train)]\n# test = data[len(train):]","4007ab2f":"#\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u3092\u8868\u793a\ntrain.info()","cffe468a":"# \u4eca\u56de\u4f7f\u7528\u3059\u308b\u7279\u5fb4\u91cf\nfeature_set = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\"]\n\ntrain[feature_set].head()","dadccedc":"# 2\u5024\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30ab\u30e9\u30e0\u30921, 0\u306b\u5909\u63db\ntrain['Sex'].replace(['male','female'], [0, 1], inplace=True)\ntest['Sex'].replace(['male','female'], [0, 1], inplace=True)\ntrain.head()","5125b138":"#from sklearn.preprocessing import StandardScaler\n#std = StandardScaler()\n#train[[\"Age\", \"Fare\"]] = std.fit_transform(train[[\"Age\", \"Fare\"]])\n#test[[\"Age\", \"Fare\"]] = std.transform(test[[\"Age\", \"Fare\"]])","c7b86329":"# \u8aac\u660e\u5909\u6570\nX_column = feature_set\n# \u76ee\u7684\u5909\u6570\ny_column = [\"Survived\"]\n\n# \u8a13\u7df4\u30c7\u30fc\u30bf\nX = train.loc[:, X_column]\ny = train.loc[:, y_column]\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nX_test = test.loc[:, X_column]","6ec3d82c":"X.head()","e2a8d1ad":"# \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u51e6\u7406\n# \u30c0\u30df\u30fc\u30b3\u30fc\u30c9\u5316(\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0)\nX = pd.get_dummies(X)\nX_test = pd.get_dummies(X_test)","72ffa8df":"X.head()","e88442c8":"X_test.head()","5ae2bbc6":"#\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\nfrom sklearn.model_selection import train_test_split\n\n#\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\n# 7:3\u306b\u5206\u3051\u3066\u9032\u3081\u308b\nX_train, X_val, y_train, y_val = train_test_split(X,\n                                                  y, \n                                                  test_size=0.3, \n                                                  random_state=1)","0788b27d":"#\u6c7a\u5b9a\u6728\u3092\u4f7f\u3046\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n\nmodel = DecisionTreeClassifier(random_state=0)\nmodel = model.fit(X_train, y_train)\npredict = model.predict(X_val)\n\n#\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387\u306e\u8868\u793a\nacc = accuracy_score(y_val, predict)\nprint('val acc:', acc)","e3b3c75d":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\nfeature_importance = model.feature_importances_\n\ndf_importance = pd.DataFrame({'feature': X_train.columns, 'importance': feature_importance})\nplt.figure(figsize=(12, 3))\nplt.title(\"feature inportances\")\nsns.barplot(x=\"feature\", y=\"importance\",\n            data=df_importance.sort_values(by=\"importance\", ascending=False))\nplt.tight_layout()\nplt.show()","a0eaf749":"import graphviz\nfrom sklearn.tree import export_graphviz\ndot_data = export_graphviz(\n                        model,\n                        feature_names = X.columns,\n                        filled = True,\n                        rounded = True,\n                        out_file=None\n                    )\ngraphviz.Source(dot_data)","42d07127":"#\u6df7\u540c\u884c\u5217\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_val, predict, labels=[1, 0])\ncm_labeled = pd.DataFrame(cm, columns=[\"\u751f\u5b58\u3068\u4e88\u6e2c\",\"\u6b7b\u4ea1\u3068\u4e88\u6e2c\"], index=[\"\u751f\u5b58\",\"\u6b7b\u4ea1\"])\ndisplay(cm_labeled)","e0aa9aab":"#\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\npred_label = model.predict(X_test)","7cf22833":"submission = pd.DataFrame(\n    {\"PassengerId\": test[\"PassengerId\"], \"Survived\": pred_label.astype(int)}\n)","0cca3d70":"# \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nsubmission.head()","89908257":"# \u51fa\u529b\nsubmission.to_csv(\"submission_tree.csv\",index=False)","ea336d1b":"# GridSearchCV \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.model_selection import GridSearchCV\n\n# \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9a\u7fa9\nmodel = DecisionTreeClassifier(random_state=0)","493f8a7e":"# \u63a2\u7d22\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u7bc4\u56f2\u306e\u5b9a\u7fa9\nparam_grid = {\n    'max_depth': [3, 5, 10],\n    'min_samples_leaf': [0.01, 0.05, 0.1, 0.2]\n}\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5206\u5272\u6570\u3092\u5b9a\u7fa9\ncv = 5\n\n# GridSearchCV \u30af\u30e9\u30b9\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\ntuned_model = GridSearchCV(estimator = model, \n                           param_grid = param_grid, \n                           cv = cv, return_train_score=False)\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\uff06\u691c\u8a3c\ntuned_model.fit(X_train, y_train)","4935789b":"tuned_model.best_params_","d4808da5":"tuned_predict = tuned_model.predict(X_val)\n\n#\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387\u306e\u8868\u793a\nacc = accuracy_score(y_val, tuned_predict)\nprint('val acc:', acc)","58dafdcf":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c\u306e\u30e2\u30c7\u30eb\ncm = confusion_matrix(y_val, tuned_predict, labels=[1, 0])\ncm_labeled = pd.DataFrame(cm, columns=[\"\u751f\u5b58\u3068\u4e88\u6e2c\",\"\u6b7b\u4ea1\u3068\u4e88\u6e2c\"], index=[\"\u751f\u5b58\",\"\u6b7b\u4ea1\"])\ndisplay(cm_labeled)","e2e76d8b":"#\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\npred_label = tuned_model.predict(X_test)","a7bfc6dc":"tuned_submission = pd.DataFrame(\n    {\"PassengerId\": test[\"PassengerId\"], \"Survived\": pred_label.astype(int)}\n)\n# \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndisplay(tuned_submission.head())\n\n# \u51fa\u529b\ntuned_submission.to_csv(\"submission_tuned_tree.csv\",index=False)","a79ece7c":"# \u5fc5\u8981\u306a\u524d\u51e6\u7406\u3092\u884c\u3046\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\ndata = pd.concat([X, X_test], sort=False)\n\n# \u6a19\u6e96\u5316\ndata[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']] = scaler.fit_transform(data[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']])\n\n# \u5916\u308c\u5024\u9664\u53bb\n#data['Parch'] = np.where(data['Parch']==9, 6, data['Parch'])\n\n# \u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n#data = pd.get_dummies(data, columns=['Pclass'])\n\n# # train\u3068test\u306b\u623b\u3059\nX = data[:len(X)]\nX_test = data[len(X):]","f4b43fb4":"print(X.shape)\nX.head()","26796a3e":"print(X_test.shape)\nX_test.head()","0c2a3e80":"# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score","46618185":"results = []\nscores = []\n\ncv = KFold(n_splits=5, shuffle=True, random_state=0)\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X, y)):\n    print('-'*60)\n    print(f'fold, {fold_id+1}')\n    \n    X_tr = X.loc[train_index, :]\n    X_val = X.loc[valid_index, :]\n    y_tr = y.loc[train_index].values.ravel()\n    y_val = y.loc[valid_index].values.ravel()\n    \n    # --------------------------\n    # \u6c7a\u5b9a\u6728\n    # --------------------------\n    DT = DecisionTreeClassifier(random_state=0)\n    DT.fit(X_tr, y_tr)\n    pred_DT = DT.predict(X_val)\n    pred_test_DT = DT.predict(X_test)\n    print('[DT] val acc:', accuracy_score(y_val, pred_DT))\n    \n    \n    # --------------------------\n    # \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n    # --------------------------\n    LR = LogisticRegression(C=1)\n    LR.fit(X_tr, y_tr)\n    pred_LR = LR.predict(X_val)\n    pred_test_LR = LR.predict(X_test)\n    print('[LR] val acc:', accuracy_score(y_val, pred_LR))\n    \n    \n    # --------------------------\n    # \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n    # --------------------------\n    NN = MLPClassifier(hidden_layer_sizes=(30,30), random_state=0,\n                       max_iter=200, early_stopping=True)\n    NN.fit(X_tr, y_tr)\n    pred_NN = NN.predict(X_val)\n    pred_test_NN = NN.predict(X_test)\n    print('[NN] val acc:', accuracy_score(y_val, pred_NN))\n    \n    \n    pred_mean = np.mean([pred_DT, pred_LR, pred_NN], axis=0)\n    pred_test_mean = np.mean([pred_test_DT, pred_test_LR, pred_test_NN], axis=0)\n    score_mean = accuracy_score(y_val, (pred_mean>0.5).astype(int))\n    print('[DT, LR, NN] val acc:', score_mean)\n    scores.append(score_mean)\n    results.append(pred_test_mean)\n    \nprint('-'*60)\nprint('CV score', np.mean(scores))","0f7dc34f":"# \u4e88\u6e2c\u7d50\u679c\u306e\u63d0\u51fa\npred_label_mean = np.mean(results, axis=0)\npred_label_mean = (pred_label_mean>0.5).astype(int)\n\nsubmission_ensemble = pd.DataFrame(\n    {\"PassengerId\": sample_submission[\"PassengerId\"],\n     \"Survived\": pred_label_mean}\n)\n\nsubmission_ensemble.to_csv(\"submission_cv5_DT_LR_NN.csv\",index=False)","e1339843":"# \u8907\u6570\u30e2\u30c7\u30eb\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3057\u305f\u4e88\u6e2c","1b078abe":"## \u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\u306e\u53ef\u8996\u5316","957962b6":"### \u8ab2\u984c\ntrain,test\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u57cb\u3081\u3092\u4e0b\u8a18\u3067\u884c\u3046\u3053\u3068\u3002<bt>\n1. Age\u306e\u6b20\u640d\u5024\u3092\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\n2. Embarked\u306e\u6b20\u640d\u5024\u3092\u6700\u983b\u5024\u3067\u57cb\u3081\u308b","723bf31d":"## \u7279\u5fb4\u91cf\u9078\u629e","d2466705":"## \u6b20\u640d\u5024\u78ba\u8a8d","74dd8bfd":"## \u6a19\u6e96\u5316","e015887f":"\u203b\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u6a19\u6e96\u5316\u3084\u6b63\u898f\u5316\u306e\u51e6\u7406\u3092\u884c\u308f\u306a\u304f\u3066\u826f\u3044<br> \n\u4e0b\u306e\u4f8b\u306f\u5225\u306e\u30e2\u30c7\u30eb\u4f7f\u7528\u6642\u306e\u6a19\u6e96\u5316\u51e6\u7406\u306e\u4f8b","6e15f8b2":"# 5.\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","b75bee7e":"|  \u30ab\u30e9\u30e0\u540d  |  \u5185\u5bb9  |\u3000\u578b\u3000|\n| ---- | ---- | ---- |\n|  PassengerId  |  \u4e57\u8239\u5ba2ID(\u30e6\u30cb\u30fc\u30af)  | int |\n|  Survived  |  \u751f\u6b7b(0:\u6b7b\u4ea1 1:\u751f\u5b58)  | int |\u3000\u2190\u76ee\u7684\u5909\u6570\n|  Pclass  |  \u7b49\u7d1a(1\u7d1a,2\u7d1a,3\u7d1a)  | int |\n|  Name  |  \u4e57\u8239\u5ba2\u306e\u540d\u524d  | object |\u3000\u2190\u52a0\u5de5\u5fc5\u9808\n|  Sex  |  \u6027\u5225(\u7537\u6027,\u5973\u6027)  | object |\n|  Age  |  \u5e74\u9f62\u203b1   | float |\n|  SibSp  |  \u540c\u8239\u3057\u305f\u5144\u5f1f\u59c9\u59b9(Siblings)\u3068<br>\u914d\u5076\u8005(Spouses)\u306e\u4eba\u6570\u203b2  | int |\n|  Parch  |  \u540c\u8239\u3057\u305f\u89aa(Parents)\u3068<br>\u5b50(Children)\u306e\u4eba\u6570\u203b3  | int |\n|  Ticket  |  \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 |object  |\n|  Fare  |  \u8239\u8cc3 | float  |\n|  Cabin  |  \u5ba2\u5ba4\u756a\u53f7 | object  | \n|  Embarked  |  \u4e57\u8239\u6e2f | object  |\n<br>\n\u203b1\uff1a1\u6b73\u672a\u6e80\u306e\u5834\u5408\u306f\u5c0f\u6570,\u63a8\u5b9a\u5e74\u9f62\u306e\u5834\u5408\u306fxx.5<br>\n\u203b2\uff1a\u5144\u5f1f,\u59c9\u59b9(\u7fa9\u7406\u3082\u542b\u3080)<br>\n\u203b3\uff1a\u7236\u89aa,\u6bcd\u89aa(\u7fa9\u7406\u306f\u542b\u307e\u306a\u3044),\u606f\u5b50,\u5a18(\u7fa9\u7406\u542b\u3080)<br>\n&emsp;&emsp; \u5b50\u4f9b\u306b\u3082\u95a2\u308f\u3089\u305aParch\u304c0\u306e\u4eba\u9593\u304c\u3044\u308b\u304c,\u4e73\u6bcd\u3068\u4e57\u8239\u3057\u3066\u3044\u308b\u70ba","ba27c9c5":"# \u6c7a\u5b9a\u6728\u3068\u306f\n\u76ee\u7684\u5909\u6570(\u5f93\u5c5e\u5909\u6570)\u3092\u8aac\u660e\u5909\u6570\u3067\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306e1\u3064\u3002 <br>\n\u8aac\u660e\u5909\u6570\u304c\u96e2\u6563\u5024\u306e\u5834\u5408\u306f\u30ab\u30c6\u30b4\u30ea\u6bce\u306b,\u9023\u7d9a\u5024\u306e\u5834\u5408\u306f\u95be\u5024\u3092\u8a2d\u3051\u308b\u3053\u3068\u3067\u5206\u985e\u3092\u884c\u3046\u3002 <br>\n\u4e0b\u8a18\u306f\u8aac\u660e\u5909\u6570\u304c\u5168\u3066\u96e2\u6563\u5024\u306e\u5834\u5408\u3002<br>\n![](https:\/\/upload.wikimedia.org\/wikipedia\/ja\/5\/5d\/Decision_tree_model_ja.png)<br>\n\u203b[Wikipedia](https:\/\/ja.wikipedia.org\/wiki\/%E6%B1%BA%E5%AE%9A%E6%9C%A8)\u3088\u308a\u629c\u7c8b","b604cc84":"## \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2","01969a6c":"<\u30a2\u30a4\u30c7\u30a2>\n- \u5e74\u9f62\u306e\u968e\u7d1a<br>\n\u4f8b: Age\u309210\u6b73\u533a\u5207\u308a\u3067\u5206\u5272\u3057\u30ab\u30c6\u30b4\u30ea\u30fc\u5316\u3057\u305f\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\n- \u6599\u91d1\u306e\u968e\u7d1a<br>\n\u4f8b: Fare\u30926\u968e\u7d1a\u306b\u5206\u5272\u3057\u30ab\u30c6\u30b4\u30ea\u30fc\u5316\u3057\u305f\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\n- \u540c\u4e57\u3057\u3066\u3044\u308b\u5bb6\u65cf\u306e\u4eba\u6570<br>\n\u4f8b: SibSP\u3068Parch\u306e\u5408\u8a08\u3067\u5bb6\u65cf\u306e\u4eba\u6570\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\n- \u5358\u72ec\u4e57\u8239<br>\n\u4f8b: SibSP\u3068Parch\u306e\u5408\u8a08\u30671\u306e\u5834\u5408\u3001\u5358\u72ec\u4e57\u8239\u3092\u8868\u3059\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\n- \u540d\u524d\u306e\u656c\u79f0<br>\n\u4f8b: Name\u304b\u3089\"Mr\", \"Mrs\", \"Dr\", \"Cap\"\u306a\u3069\u3092\u62bd\u51fa\u3057\u3001\u656c\u79f0\u3092\u8868\u3059\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b","782d29f9":"# 3.\u30c7\u30fc\u30bf\u6982\u8981\n\u53c2\u8003<br>\nhttps:\/\/www.kaggle.com\/c\/titanic\/data <br>\n","28df161b":"# 4.\u30c7\u30fc\u30bf\u53ef\u8996\u5316","197806c2":"# \u305d\u306e\u4ed6","ae9afa25":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c","f2d17094":"## \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n","dcba98ad":"## \u8ab2\u984c1\u30002min\n1. \u30b0\u30e9\u30d5\u304b\u3089\u8aad\u307f\u53d6\u308c\u308b\u3053\u3068\u306f\uff1f <br><br>\n2. \u8ffd\u52a0\u3057\u3066\u8abf\u67fb\u3057\u305f\u3044\u4e8b\u306f\uff1f<br>","624d8de2":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c","49229c18":"## \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\n\u203b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d\u306e\u30e2\u30c7\u30eb\u3067\u53ef\u8996\u5316","a50463df":"## \u6b20\u640d\u5024\u51e6\u7406","e24c8ade":"# 2.\u30d5\u30a1\u30a4\u30eb\u6982\u8981\n&emsp; train.csv &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;\uff1a\u8a13\u7df4\u30c7\u30fc\u30bf <br>\n&emsp; gender_submission.csv\uff1a\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf(\u7537:0 \u5973:1) <br>\n&emsp; test.csv &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;\uff1a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf","f8f412c6":"# 6.\u30e2\u30c7\u30eb\u4f5c\u6210","ec0f0561":"---","952030a8":"# 7.\u8a55\u4fa1\u7d50\u679c","7f8a145c":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","2c835109":"## \u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u306e\u51e6\u7406","ddcfb7f5":"\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u751f\u5b58\u8005\u306b\u3064\u3044\u3066: https:\/\/www.afpbb.com\/articles\/fp\/2564918","74cd7aad":"### \u89e3\u7b54","35911c08":"## \u6df7\u540c\u884c\u5217\u306e\u8868\u793a","277931cd":"## \u30c7\u30fc\u30bf\u5206\u5272","018f5d07":"# kaggle\u30cf\u30f3\u30ba\u30aa\u30f3 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\n\n# 1. \u57fa\u672c\u64cd\u4f5c\nEscape &emsp;&emsp;&nbsp;&nbsp;\uff1a\u30b3\u30de\u30f3\u30c9\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c <br>\nEnter &emsp;&emsp;&emsp;&nbsp;\uff1a\u7de8\u96c6\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c <br>\nShift+Enter &ensp;\uff1a\u5b9f\u884c(\u6b21\u306e\u30bb\u30eb\u3078\u79fb\u308b) <br>\nA &emsp;&emsp;&emsp;&emsp;&emsp;\uff1a\u4e0a\u306b\u30bb\u30eb\u3092\u8ffd\u52a0 <br>\nB &emsp;&emsp;&emsp;&emsp;&emsp;\uff1a\u4e0a\u306b\u30bb\u30eb\u3092\u8ffd\u52a0 <br>\nDD &emsp;&emsp;&emsp;&emsp;\uff1a\u30bb\u30eb\u3092\u524a\u9664 <br>\n\n\u203b\u5b9f\u884c\u306f\u4e0a\u306e\u518d\u751f\u30dc\u30bf\u30f3\u25b6\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3082\u53ef\u80fd <br>\n\u305d\u306e\u4ed6\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8 <br>\nhttps:\/\/qiita.com\/forusufia\/items\/bea3f6fd6160cd2f5843","7aa867d6":"## \u30c7\u30fc\u30bf\u6e96\u5099","e0c803f4":"|    |  \u751f\u5b58\u3068\u4e88\u6e2c  |\u3000\u6b7b\u4ea1\u3068\u4e88\u6e2c\u3000|\n| ---- | ---- | ---- |\n|  \u7b54\u3048\uff1a\u751f\u5b58  |  \u771f\u967d\u6027  | \u507d\u9670\u6027 |\n|  \u7b54\u3048\uff1a\u6b7b\u4ea1  |  \u507d\u967d\u6027  | \u771f\u9670\u6027 |","0fb84842":"## \u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\uff1a\n- \u6c7a\u5b9a\u6728\n- \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n- \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"}}