{"cell_type":{"a46e14fa":"code","ee3f3e11":"code","3cb3f66b":"code","ee05d23d":"code","cb51a725":"code","9f499e82":"code","f0726c1e":"code","011eddb6":"code","f7769a41":"code","0e80cde2":"code","1a5da233":"code","cd3671e7":"markdown"},"source":{"a46e14fa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ee3f3e11":"url = '..\/input\/sandp500\/individual_stocks_5yr\/individual_stocks_5yr\/AAPL_data.csv'\ndf = pd.read_csv(url)\ndf.drop(['Name'], axis = 1, inplace = True)\ndf","3cb3f66b":"df_train = df.iloc[:1000,1:2].values\ndf_valid = df.iloc[1000:1100, 1:2].values\ndf_test = df.iloc[1100:,1:2].values","ee05d23d":"#Fearure scaling\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0,1))\ndf_train_scaled = sc.fit_transform(df_train)\ndf_valid_scaled = sc.transform(df_valid)","cb51a725":"#creating a data structure with 60 timesteps and 1 output\nX_train = []\ny_train = []\nX_valid = []\ny_valid = []\nfor i in range(60, df_train_scaled.shape[0]):\n    X_train.append(df_train_scaled[i-60:i, 0])\n    y_train.append(df_train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)\n\nfor i in range(60, df_valid_scaled.shape[0]):\n    X_valid.append(df_train_scaled[i-60:i, 0])\n    y_valid.append(df_train_scaled[i, 0])\nX_valid, y_valid = np.array(X_valid), np.array(y_valid)\n\n#reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_valid = np.reshape(X_valid, (X_valid.shape[0], X_valid.shape[1], 1))","9f499e82":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\nfrom tensorflow.keras import callbacks","f0726c1e":"#RNN\nregressor = Sequential()\n\nearly_stopping = callbacks.EarlyStopping(\n    min_delta=0, # minimium amount of change to count as an improvement\n    patience=20, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)\n\n\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units = 1))","011eddb6":"regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')","f7769a41":"regressor.fit(X_train, y_train,\n              validation_data=(X_valid, y_valid),\n             epochs = 500,\n             batch_size = 32,\n              callbacks=[early_stopping],\n              verbose = 0\n             )","0e80cde2":"#Getting the predicted stock price\ndf_total = df['open']\ninputs = df_total[len(df_total) - len(df_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, inputs.shape[0]):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npreds= regressor.predict(X_test)\npreds = sc.inverse_transform(preds)","1a5da233":"plt.plot(df_test, color = 'red', label = 'Real price')\nplt.plot(preds, color = 'blue', label = 'Predicted price')\nplt.ylabel('AAPL stock price')\nplt.xlabel('time')\nplt.legend()\nplt.show()","cd3671e7":"# This is a simple approach to the historic AAPL stock price data using LSTM, the prediction is fairly close to the real data . Please let me know what would you change to make it more accurate, I appreciate any comment or suggestion."}}