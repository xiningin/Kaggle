{"cell_type":{"cb0d32fe":"code","86cd4205":"code","8c269a6f":"code","ff1bef1e":"code","3cef98c1":"code","c0ce7640":"code","3a05bdf1":"code","273bf0e5":"code","9e9e0c47":"code","afe252d5":"code","cee0154b":"code","1c403da7":"code","7e6e51c6":"code","1bb08490":"code","51fa560e":"code","61e9434e":"code","a2b4b59c":"code","ed652287":"code","40f1cbac":"code","4c4f1d33":"code","076d0ad7":"code","97121fe8":"code","b3ef7180":"code","e0d0fb15":"code","a04e0a34":"code","c7bfd8c5":"code","128fb15a":"code","6afa0bee":"code","13dd3e04":"code","bdd2332c":"code","36e3d8a1":"code","25d3bcd5":"code","73f9dcf9":"code","ac1dd18d":"code","000aa79d":"code","8011a4a9":"code","5b92151b":"markdown","8bd9630c":"markdown","c8fbbea8":"markdown","d6dd885a":"markdown","bbc279dc":"markdown","01316829":"markdown","959b2aa5":"markdown","6e5351fb":"markdown","9b5cca4d":"markdown","c7c163ff":"markdown"},"source":{"cb0d32fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86cd4205":"import numpy as np # biblioteca utilizada para trabalhar com vetores\nimport pandas as pd # biblioteca para trabalhar com DataFrames\nimport seaborn as sns # biblioteca utilizada para criar gr\u00e1ficos mais 'bonitos'\nimport matplotlib.pyplot as plt # biblioteca para criar gr\u00e1ficos comuns ao estilo Matlab\nimport google","8c269a6f":"# abrir o arquivo csv que cont\u00e9m os dados a serem utilizados\ncustomers = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","ff1bef1e":"#visualizando as 5 primeiras linhas do dataset\ncustomers.head()","3cef98c1":"# verificando a exist\u00eancia de campos nulos\ncustomers.info()","c0ce7640":"# verificando a exist\u00eancia de campos nulos\ncustomers.isnull().sum()","3a05bdf1":"# verificando valores nulos\ncustomers_null=customers\nfor col in customers_null.columns:\n    customers_null.loc[customers_null.sample(frac=0.1).index, col] = np.nan","273bf0e5":"customers_null.info() #verificando as colunas nulas","9e9e0c47":"# analisando o dataset\ncustomers_null.head(10)","afe252d5":"# verificando a exist\u00eancia de campos nulos\ncustomers_null.isnull().sum()","cee0154b":"# coletando as linhas que possuem algum valor nulo\ncustomers_null.dropna()","1c403da7":"# preenchendo os valores 'nan' com valor 0\ncustomers_null.fillna(0)","7e6e51c6":"#encontra as estat\u00edsticas do dataset\ncustomers_null.describe()","1bb08490":"#preenchendo os valores m\u00e9diosda coluna\ncustomers_null.fillna(customers_null.mean())","51fa560e":"# analisando os dados\ncustomers.describe() #fun\u00e7\u00e3o que retorna uma an\u00e1lise superficial dos dados","61e9434e":"# constroi um boxplot para as colunas desejadas\nboxplot = customers.boxplot(column=['Age', 'Annual Income (k$)', 'Spending Score (1-100)']) ","a2b4b59c":"# Z-score\nfrom scipy import stats\n\nz = np.abs(stats.zscore(customers['Annual Income (k$)'].values))\nthreshold = 2\nresult = np.where(z > threshold)\n\ndf_salario_outlier = customers.iloc[result[0]]\n#print(z)","ed652287":"#todos os usu\u00e1rios com sal\u00e1rio anual com poss\u00edvel outlier\ndf_salario_outlier","40f1cbac":"# analisando a distribui\u00e7\u00e3o dos clientes por g\u00eanero\nsns.countplot(x='Gender', data=customers) #cria o gr\u00e1fico que conta a quantidade de consumidores existentes em cada um dos g\u00eaneros\nplt.title('Distribui\u00e7\u00e3o dos Clientes quanto ao G\u00eanero') #adiciona t\u00edtulo no gr\u00e1fico","4c4f1d33":"#analisando a distribui\u00e7\u00e3o dos clientes quanto a idade atrav\u00e9s do histograma\ncustomers.hist('Age', bins=35); #seleciona a coluna idade para realizar o histograma\n                                # os 'bins' indicam a quantidade de grupos que se deseja dividir os dados\nplt.title('Distribui\u00e7\u00e3o dos Clientes pela Idade') #adiciona t\u00edtulo ao gr\u00e1fico\nplt.xlabel('Idade');","076d0ad7":"cat_df_customers = customers.select_dtypes(include=['object']) #copiando as colunas que s\u00e3o tipos categ\u00f3ricas","97121fe8":"cat_df_customers.head()","b3ef7180":"replace_map = {'Gender': {'Male': 1, 'Female': 2}} #define o dicion\u00e1rio a ser utilizado (map)\nlabels = cat_df_customers['Gender'].astype('category').cat.categories.tolist() #encontra a lista das vari\u00e1veis categ\u00f3ricas\nreplace_map_comp = {'Gender': {k: v for k, v in zip(labels,list(range(1,len(labels)+1)))}} #define o mapeamento\n\nprint(replace_map_comp)","e0d0fb15":"#realiza a c\u00f3pia do dataset\ncat_df_customers_replace = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","a04e0a34":"cat_df_customers_replace.replace(replace_map_comp, inplace=True) #aplica o mapeamento ao dataset\ncat_df_customers_replace.head()","c7bfd8c5":"#cat_df_customers_lc = customers\ncustomers = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","128fb15a":"cat_df_customers_lc = customers","6afa0bee":"cat_df_customers_lc['Gender']=pd.Categorical(cat_df_customers_lc['Gender'])\ncat_df_customers_lc.dtypes","13dd3e04":"cat_df_customers_lc['Gender'] = cat_df_customers_lc['Gender'].cat.codes\ncat_df_customers_lc.head()","bdd2332c":"#Importando o Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder() #Instanciando o objeto","36e3d8a1":"#aplicando a codifica\u00e7\u00e3o para as colunas categ\u00f3ricas\ncustomers_label = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ncustomers_label['Gender'] = le.fit_transform(customers_label['Gender'])\ncustomers_label.head(10)","25d3bcd5":"# Get Dummies\ncustomers_one_hot = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\n#customers_one_hot['Gender']=pd.Categorical(customers_one_hot['Gender'])\ncustomers_one_hot = pd.get_dummies(customers_one_hot)\ncustomers_one_hot.head()","73f9dcf9":"customers = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","ac1dd18d":"# Importando o OneHotEncoder\ncustomers_one_hot = customers\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder() # Inst\u00e2nciando o obejeto","000aa79d":"#aplica o One Hot Encoding para a coluna\ncustomers_ohe = ohe.fit_transform(customers_one_hot['Gender'].values.reshape(-1,1)).toarray() #It returns a numpy array\ncustomers_ohe.shape","8011a4a9":"customers_ohe","5b92151b":"## Verificando se existem outliers(anomalias) nos dados. Para isso, ser\u00e1 utilizado o Z-score","8bd9630c":"## Verificando se existem outliers(anomalias) nos dados. Para isso, ser\u00e1 utilizado o boxplot ","c8fbbea8":"## One Hot Encoding","d6dd885a":"## Aplicando a codifica\u00e7\u00e3o aos dados","bbc279dc":"## Aplicando o Mapeamento","01316829":"## Explorando os dados. Entendendo alguns relacionamentos e comportamentos dos clientes","959b2aa5":"## Aplicando o Label Encodering","6e5351fb":"* **CustomerID=** Identifica\u00e7\u00e3o \u00fanica de um cliente\n* **Gender=** G\u00eanero do cliente\n* **Age=** Idade do Consumidor\n* **Annual Income=** Renda Anual do cliente\n* **Spending Score=** Pontua\u00e7\u00e3o atribu\u00edda pelo shopping com base no comportamento do cliente e na natureza do gasto","9b5cca4d":"## Distribui\u00e7\u00e3o dos consumidores por idade","c7c163ff":"* **count=** n\u00famero de elementos(linhas) existentes nos dados\n* **mean=** m\u00e9dia dos valores na colunas\n* **std=** desvio padr\u00e3o dos dados presentes na coluna\n* **min=** menor valor existente na coluna \n* **25%=** primeiro quartil dos dados (25%)\n* **50%=** segundo quartil dos dados (50%)\n* **75%=** terceiro quartil dos dados (75%)\n* **max=** valor m\u00e1ximo existente na coluna"}}