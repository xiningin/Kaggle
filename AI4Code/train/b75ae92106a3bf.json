{"cell_type":{"22aa998a":"code","aec6feed":"code","2b69a00e":"code","f85dc85e":"code","2bbb9f60":"code","a1548019":"code","0162de05":"code","4ebc24fa":"code","a71cb767":"code","54587ada":"code","e5c8887d":"code","275c3ae9":"code","d795fd5c":"markdown","186d2eec":"markdown","052b9f10":"markdown","8cbd9e69":"markdown"},"source":{"22aa998a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aec6feed":"#importing necesary packages\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# loading .csv data\ndf = df = pd.read_csv(\"\/kaggle\/input\/habermans-survival-data-set\/haberman.csv\",names =  ['Age', 'Op_Year', 'axil_nodes', 'Surv_status'])\ndf.head()","2b69a00e":"df.describe()","f85dc85e":"# (Q) how many data-points and features?\ndf.shape","2bbb9f60":"#(Q) What are the column names in our dataset?\ndf.columns","a1548019":"#(Q) How many data points for each class are present?\ndf[\"Surv_status\"].value_counts()","0162de05":"#2-D scatter plot:\ndf.plot(kind = \"scatter\" , x = 'Age' , y = 'axil_nodes')\nplt.show()","4ebc24fa":"# 2-D Scatter plot with color-coding for Survival.\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(df, hue=\"Surv_status\", size=4) \\\n   .map(plt.scatter, \"Age\", \"axil_nodes\") \\\n   .add_legend();\nplt.show();\n","a71cb767":"import plotly.express as px\nfig = px.scatter_3d(df, x='Age',y='axil_nodes',z = 'Op_Year',color='Surv_status' )\nfig.show()\n","54587ada":"#3D Pair Plot\nsns.set_style(\"whitegrid\");\nsns.pairplot(df,hue ='Surv_status',height = 6)\nplt.show()","e5c8887d":"#Box-plot with whiskers: another method of visualizing the  1-D scatter plot more intuitivey.\n# The Concept of median, percentile, quantile.\n# How to draw the box in the box-plot?\n# How to draw whiskers: [no standard way] Could use min and max or use other complex statistical techniques.\n# IQR like idea.\n\n#NOTE: IN the plot below, a technique call inter-quartile range is used in plotting the whiskers. \n#Whiskers in the plot below donot correposnd to the min and max values.\n\n#Box-plot can be visualized as a PDF on the side-ways.\n\nsns.boxplot(x='Surv_status',y='Age', data=df)\nplt.show()\n","275c3ae9":"# A violin plot combines the benefits of the previous two plots \n#and simplifies them\n\n# Denser regions of the data are fatter, and sparser ones thinner \n#in a violin plot\n\nsns.violinplot(x='Surv_status',y='Age', data=df, size=8)\nplt.show()","d795fd5c":"## Observation:\npeople with Age<40 have a high chance of Survival","186d2eec":"**Final Observations**\n* People having <1 Axil nodes have a higher chance of survival\n* people with Age<40 have a high chance of Survival","052b9f10":"## Bivariate Analysis","8cbd9e69":"## Observation\nPeople having <1 Axil nodes have a higher chance of survival"}}