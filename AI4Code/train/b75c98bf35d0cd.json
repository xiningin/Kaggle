{"cell_type":{"be0f374a":"code","92e47eda":"code","ce042e74":"code","7292bc0e":"code","9ebdae8b":"code","c24312d5":"code","7d8acd19":"code","4d93fcd5":"code","e89cfb81":"code","800a673c":"code","3f554f16":"code","42baefeb":"code","a9c32d8f":"code","7fea064d":"code","ec98bc7e":"code","2f551aab":"code","2d020063":"code","dcc94de9":"code","02167638":"code","efcab221":"markdown","6121c030":"markdown","11d4c639":"markdown","9154b38a":"markdown","54436bbe":"markdown","c06d6bc9":"markdown","743c29c5":"markdown","cbe8794c":"markdown","d8dad37c":"markdown","9217b09a":"markdown","643209a5":"markdown","139bc7db":"markdown","09469831":"markdown"},"source":{"be0f374a":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold\nimport time\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore', UserWarning)\n\nimport gc\ngc.enable()","92e47eda":"import os\nos.listdir('..\/input\/widsdatathon2020')","ce042e74":"data = pd.read_csv('..\/input\/widsdatathon2020\/training_v2.csv')\n\ncategorical_feats = [\n    f for f in data.columns if data[f].dtype == 'object'\n]\n\ncategorical_feats\nfor f_ in categorical_feats:\n    data[f_], _ = pd.factorize(data[f_])\n    # Set feature type as categorical\n    data[f_] = data[f_].astype('category')","7292bc0e":"data.columns","9ebdae8b":"def get_feature_importances(data, shuffle,target_col=\"hospital_death\" ,seed=None):\n    # Gather real features\n    train_features = [f for f in data if f not in [target_col]]\n    # Go over fold and keep track of CV score (train and valid) and feature importances\n    \n    # Shuffle target if required\n    y = data[target_col].copy()\n    if shuffle:\n        # Here you could as well use a binomial distribution\n        y = data[target_col].copy().sample(frac=1.0)\n    \n    # Fit LightGBM in RF mode, yes it's quicker than sklearn RandomForest\n    dtrain = lgb.Dataset(data[train_features], y, free_raw_data=False, silent=True)\n    lgb_params = {\n        'objective': 'binary',\n        'boosting_type': 'rf',\n        'subsample': 0.7,\n        'colsample_bytree': 0.8,\n        'num_leaves': 127,\n        'max_depth': 10,\n        'seed': seed,\n        'bagging_freq': 1,\n        'n_jobs': -1\n    }\n    \n    # Fit the model\n    clf = lgb.train(params=lgb_params, train_set=dtrain, num_boost_round=250, categorical_feature=categorical_feats)\n\n    # Get feature importances\n    imp_df = pd.DataFrame()\n    imp_df[\"feature\"] = list(train_features)\n    imp_df[\"importance_gain\"] = clf.feature_importance(importance_type='gain')\n    imp_df[\"importance_split\"] = clf.feature_importance(importance_type='split')\n    imp_df['trn_score'] = roc_auc_score(y, clf.predict(data[train_features]))\n    \n    return imp_df","c24312d5":"# Seed the unexpected randomness of this world\nnp.random.seed(123)\n# Get the actual importance, i.e. without shuffling\nactual_imp_df = get_feature_importances(data=data,target_col=\"hospital_death\", shuffle=False)","7d8acd19":"actual_imp_df.sort_values([\"importance_gain\",\"importance_split\"],ascending=False)","4d93fcd5":"null_imp_df = pd.DataFrame()\nnb_runs = 90 ## if have more time - do more e.g. 80\nimport time\nstart = time.time()\ndsp = ''\nfor i in range(nb_runs):\n    # Get current run importances\n    imp_df = get_feature_importances(data=data, shuffle=True)\n    imp_df['run'] = i + 1 \n    # Concat the latest importances with the old ones\n    null_imp_df = pd.concat([null_imp_df, imp_df], axis=0)\n    # Erase previous message\n    for l in range(len(dsp)):\n        print('\\b', end='', flush=True)\n    # Display current run and time used\n    spent = (time.time() - start) \/ 60\n    dsp = 'Done with %4d of %4d (Spent %5.1f min)' % (i + 1, nb_runs, spent)\n    print(dsp, end='', flush=True)","e89cfb81":"null_imp_df","800a673c":"def display_distributions(actual_imp_df_, null_imp_df_, feature_):\n    plt.figure(figsize=(13, 6))\n    gs = gridspec.GridSpec(1, 2)\n    # Plot Split importances\n    ax = plt.subplot(gs[0, 0])\n    a = ax.hist(null_imp_df_.loc[null_imp_df_['feature'] == feature_, 'importance_split'].values, label='Null importances')\n    ax.vlines(x=actual_imp_df_.loc[actual_imp_df_['feature'] == feature_, 'importance_split'].mean(), \n               ymin=0, ymax=np.max(a[0]), color='r',linewidth=10, label='Real Target')\n    ax.legend()\n    ax.set_title('Split Importance of %s' % feature_.upper(), fontweight='bold')\n    plt.xlabel('Null Importance (split) Distribution for %s ' % feature_.upper())\n    # Plot Gain importances\n    ax = plt.subplot(gs[0, 1])\n    a = ax.hist(null_imp_df_.loc[null_imp_df_['feature'] == feature_, 'importance_gain'].values, label='Null importances')\n    ax.vlines(x=actual_imp_df_.loc[actual_imp_df_['feature'] == feature_, 'importance_gain'].mean(), \n               ymin=0, ymax=np.max(a[0]), color='r',linewidth=10, label='Real Target')\n    ax.legend()\n    ax.set_title('Gain Importance of %s' % feature_.upper(), fontweight='bold')\n    plt.xlabel('Null Importance (gain) Distribution for %s ' % feature_.upper())\n        ","3f554f16":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='bmi')","42baefeb":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='leukemia')","a9c32d8f":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='gender')","7fea064d":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='readmission_status')","ec98bc7e":"display_distributions(actual_imp_df_=actual_imp_df, null_imp_df_=null_imp_df, feature_='apache_4a_icu_death_prob')","2f551aab":"feature_scores = []\nfor _f in actual_imp_df['feature'].unique():\n    f_null_imps_gain = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_gain'].values\n    f_act_imps_gain = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_gain'].mean()\n    gain_score = np.log(1e-10 + f_act_imps_gain \/ (1 + np.percentile(f_null_imps_gain, 75)))  # Avoid didvide by zero\n    f_null_imps_split = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_split'].values\n    f_act_imps_split = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_split'].mean()\n    split_score = np.log(1e-10 + f_act_imps_split \/ (1 + np.percentile(f_null_imps_split, 75)))  # Avoid didvide by zero\n    feature_scores.append((_f, split_score, gain_score))\n\nscores_df = pd.DataFrame(feature_scores, columns=['feature', 'split_score', 'gain_score'])\n\nplt.figure(figsize=(16, 16))\ngs = gridspec.GridSpec(1, 2)\n# Plot Split importances\nax = plt.subplot(gs[0, 0])\nsns.barplot(x='split_score', y='feature', data=scores_df.sort_values('split_score', ascending=False).iloc[0:70], ax=ax)\nax.set_title('Feature scores wrt split importances', fontweight='bold', fontsize=14)\n# Plot Gain importances\nax = plt.subplot(gs[0, 1])\nsns.barplot(x='gain_score', y='feature', data=scores_df.sort_values('gain_score', ascending=False).iloc[0:70], ax=ax)\nax.set_title('Feature scores wrt gain importances', fontweight='bold', fontsize=14)\nplt.tight_layout()","2d020063":"null_imp_df.to_csv('null_importances_distribution_rf.csv',index=False)\nactual_imp_df.to_csv('actual_importances_ditribution_rf.csv',index=False)","dcc94de9":"correlation_scores = []\nfor _f in actual_imp_df['feature'].unique():\n    f_null_imps = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_gain'].values\n    f_act_imps = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_gain'].values\n    gain_score = 100 * (f_null_imps < np.percentile(f_act_imps, 25)).sum() \/ f_null_imps.size\n    f_null_imps = null_imp_df.loc[null_imp_df['feature'] == _f, 'importance_split'].values\n    f_act_imps = actual_imp_df.loc[actual_imp_df['feature'] == _f, 'importance_split'].values\n    split_score = 100 * (f_null_imps < np.percentile(f_act_imps, 25)).sum() \/ f_null_imps.size\n    correlation_scores.append((_f, split_score, gain_score))\n\ncorr_scores_df = pd.DataFrame(correlation_scores, columns=['feature', 'split_score', 'gain_score'])\n\nfig = plt.figure(figsize=(16, 16))\ngs = gridspec.GridSpec(1, 2)\n# Plot Split importances\nax = plt.subplot(gs[0, 0])\nsns.barplot(x='split_score', y='feature', data=corr_scores_df.sort_values('split_score', ascending=False).iloc[0:70], ax=ax)\nax.set_title('Feature scores wrt split importances', fontweight='bold', fontsize=14)\n# Plot Gain importances\nax = plt.subplot(gs[0, 1])\nsns.barplot(x='gain_score', y='feature', data=corr_scores_df.sort_values('gain_score', ascending=False).iloc[0:70], ax=ax)\nax.set_title('Feature scores wrt gain importances', fontweight='bold', fontsize=14)\nplt.tight_layout()\nplt.suptitle(\"Features' split and gain scores\", fontweight='bold', fontsize=16)\nfig.subplots_adjust(top=0.93)","02167638":"def score_feature_selection(df=None, train_features=None, cat_feats=None, target=None):\n    # Fit LightGBM \n    dtrain = lgb.Dataset(df[train_features], target, free_raw_data=False, silent=True)\n    lgb_params = {\n        'objective': 'binary',\n        'boosting_type': 'gbdt',\n        'learning_rate': .1,\n        'subsample': 0.85,\n        'colsample_bytree': 0.85,\n        'num_leaves': 31,\n        'max_depth': -1,\n        'seed': 13,\n        'n_jobs': -1,\n        'min_split_gain': .00001,\n        'reg_alpha': .00001,\n        'reg_lambda': .00001,\n        'metric': 'auc'\n    }\n    \n    # Fit the model\n    hist = lgb.cv(\n        params=lgb_params, \n        train_set=dtrain, \n        num_boost_round=1700,\n        categorical_feature=cat_feats,\n        nfold=6,\n        stratified=True,\n        shuffle=True,\n        early_stopping_rounds=50,\n        verbose_eval=0,\n        seed=17\n    )\n    # Return the last mean \/ std values \n    return hist['auc-mean'][-1], hist['auc-stdv'][-1]\n\n# features = [f for f in data.columns if f not in ['SK_ID_CURR', 'TARGET']]\n# score_feature_selection(df=data[features], train_features=features, target=data['TARGET'])\n\nfor threshold in [0,2,5, 10,15, 20, 30 , 40, 50 , 70, 80 , 90, 95, 99]:\n    split_feats = [_f for _f, _score, _ in correlation_scores if _score >= threshold]\n    split_cat_feats = [_f for _f, _score, _ in correlation_scores if (_score >= threshold) & (_f in categorical_feats)]\n    gain_feats = [_f for _f, _, _score in correlation_scores if _score >= threshold]\n    gain_cat_feats = [_f for _f, _, _score in correlation_scores if (_score >= threshold) & (_f in categorical_feats)]\n                                                                                             \n    print('(AUC) Results for threshold %3d' % threshold)\n    split_results = score_feature_selection(df=data, train_features=split_feats, cat_feats=split_cat_feats, target=data[\"hospital_death\"])\n    print('\\t SPLIT : %.5f +\/- %.5f' % (split_results[0], split_results[1]))\n    gain_results = score_feature_selection(df=data, train_features=gain_feats, cat_feats=gain_cat_feats, target=data[\"hospital_death\"])\n    print('\\t GAIN  : %.5f +\/- %.5f' % (gain_results[0], gain_results[1]))\n","efcab221":"### Build the benchmark for feature importance\n\n![](http:\/\/)The original paper does not talk about this but I think it makes sense to have a distribution of actual importances as well","6121c030":"### Score feature removal for different thresholds","11d4c639":"### Import a few packages","9154b38a":"### Save data","54436bbe":"### Check the impact of removing uncorrelated features\n\nHere I'll use a different metric to asses correlation to the target","c06d6bc9":"### Feature selecture using target permutation\n\nThe notebook uses a procedure described in [this article]( https:\/\/academic.oup.com\/bioinformatics\/article\/26\/10\/1340\/193348).\n\nFeature selection process using target permutation tests actual importance significance against the distribution of feature importances when fitted to noise (shuffled target).\n\nThe notebook implements the following steps  :\n - Create the null importances distributions : these are created fitting the model over several runs on a shuffled version of the target. This shows how the model can make sense of a feature irrespective of the target.\n - Fit the model on the original target and gather the feature importances. This gives us a benchmark whose significance can be tested against the Null Importances Distribution\n - for each feature test the actual importance:\n    - Compute the probabability of the actual importance wrt the null distribution. I will use a very simple estimation using occurences while the article proposes to fit known distribution to the gathered data. In fact here I'll compute 1 - the proba so that things are in the right order.\n    - Simply compare the actual importance to the mean and max of the null importances. This will give sort of a feature importance that allows to see major features in the dataset. Indeed the previous method may give us lots of ones.","743c29c5":"### Create a scoring function\n\nCoring function uses LightGBM in RandomForest mode fitted on the full dataset ","cbe8794c":"### Read application_train\n\nRead data and take care of categorical features","d8dad37c":"### Score features\n\nThere are several ways to score features : \n - Compute the number of samples in the actual importances that are away from the null importances recorded distribution.\n - Compute ratios like Actual \/ Null Max, Actual  \/ Null Mean,  Actual Mean \/ Null Max\n \nIn a first step I will use the log actual feature importance divided by the 75 percentile of null distribution.","9217b09a":"From the above plot I believe the power of the exposed feature selection method is demonstrated. In particular it is well known that :\n - Any feature sufficient variance can be used and made sense of by tree models. You can always find splits that help scoring better\n - Correlated features have decaying importances once one of them is used by the model. The chosen feature will have strong importance and its correlated suite will have decaying importances\n \n The current method allows to :\n  - Drop high variance features if they are not really related to the target\n  - Remove the decaying factor on correlated features, showing their real importance (or unbiased importance)\n","643209a5":"## Forked from ogrellier's notebook: \n* https:\/\/www.kaggle.com\/ogrellier\/feature-selection-with-null-importances","139bc7db":"### Build Null Importances distribution","09469831":"### Display distribution examples\n\nA few plots are better than any words"}}