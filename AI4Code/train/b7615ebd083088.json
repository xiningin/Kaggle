{"cell_type":{"1eadf0dc":"code","d011a964":"code","bdac5432":"code","9a3ae35f":"code","195e41b2":"code","4adb8ce2":"markdown","c326bb53":"markdown"},"source":{"1eadf0dc":"# Install investpy\n!pip install investpy > \/dev\/null","d011a964":"\nimport numpy as np\nimport pandas as pd\nfrom datetime import date, datetime, timedelta\nimport unidecode\nimport re\nimport os\nimport investpy\n\ndef download_country_stocks_list(country,\n                                 stocks_path=None,\n                                 output_filename=\"stocks_list.csv\",\n                                 verbose=True):\n    \"\"\"\n    Donwloads and saves as csv the list of stocks of a country using investpy.\n    Note if you don\u00b4t need to save the list, just call \n\n        investpy.get_stocks(country=country)\n\n    Parameters: \n\n    country: country name to download. Must exist in investpy\n\n    stocks_path: is the path for the stocks for this particular country. \n        - If None is passed (default) it uses the current working directory plus the slug \n          name of the country. For example United States => united-states\n        - If the path does not exist, it creates the folder.\n\n    verbose: Displays some status info while downloading. True by default.\n\n    returns the downloaded dataframe.\n    \"\"\"\n    if not stocks_path:\n        os.path.join(os.getcwd(), slugify(country))\n\n    stocks_df = investpy.get_stocks(country=country)\n    if not os.path.exists(stocks_path):\n        os.mkdir(stocks_path)\n    filepath = os.path.join(stocks_path, output_filename)\n    stocks_df.to_csv(filepath)\n    if verbose:\n        print(\n            f\"Saved file {filepath} for {country} with {len(stocks_df)} stocks\")\n    return stocks_df\n\n\n# For each stock get historical price\ndef download_stock_prices(stocks_df,\n                          output_path=None,\n                          from_date=\"01\/01\/2000\",\n                          to_date=None,\n                          verbose=True):\n    '''\n    Using investpy saves \n    stocks_df: a dataframe with at least two columns, symbol and country\n    output_path: output folder. default: .\/stock_prices\n    from_date: first date to get prices. default: 01\/01\/2000\n    to_date: last date to get prices. Format: \"dd\/mm\/yyyy\" default: today\n    verbose: if true prints messages. default: true\n    '''\n    # output path\n    if not output_path:\n        output_path = os.path.join(os.getcwd(), \"stock_prices\")\n\n    # Set to_date if not already set\n    if not to_date:\n        to_date = date.today().strftime(\"%d\/%m\/%Y\")  # today\n\n    # Create the folder\n    try:\n        os.mkdir(output_path)\n        if verbose:\n            print(f\"Created '{output_path}' directory.\")\n    except Exception as e:\n        if verbose:\n            print(f\"{output_path} already exists. Using it.\")\n\n    # initialize counter vars\n    saved_files = 0\n    saved_prices = 0\n    num_stocks = len(stocks_df)\n    # do the hustle\n    for i in range(num_stocks):\n        stock = stocks_df.iloc[i]\n        try:\n            hist_prices = investpy.get_stock_historical_data(\n                stock=stock.symbol,\n                country=stock.country,\n                from_date=from_date,\n                to_date=to_date)\n            output_file = f\"{output_path}\/{stock.symbol}.csv\"\n            hist_prices[\"Symbol\"] = stock.symbol\n            hist_prices[\"Country\"] = stock.country\n            # print(hist_prices.index)\n            # print(hist_prices.head())\n            hist_prices.to_csv(output_file)\n            saved_files = saved_files + 1\n            saved_prices = saved_prices + len(hist_prices)\n            if verbose:\n                print(\n                    f\"({i+1}\/{num_stocks}) Saved {output_file} ({len(hist_prices)} prices); total saved: {saved_prices} prices)\")\n        except Exception as e:\n            if verbose:\n                print(f\"Error getting {output_file}: {e}\")\n    if verbose:\n        print(f\"Total saved stocks:{saved_files} out of {num_stocks} stocks\")\n        print(f\"Total saved prices:{saved_prices}\")\n\ndef all_csv_to_pd(folder_path):\n    \"\"\"\n    Reads all csv files in a folder and returns a dataframe that concatenates all files\n\n    example:\n    country = \"spain\"\n    all = all_csv_to_pd(f\"\/kaggle\/working\/{country}\/stock_prices\")\n\n    \"\"\"\n    df = pd.DataFrame()\n    for dirname, _, filenames in os.walk(folder_path):\n        for filename in filenames:\n            filepath = os.path.join(dirname, filename)\n            tmp_df = pd.read_csv(filepath)\n            df = pd.concat([df, tmp_df], axis=0)\n    return df\n\ndef slugify(text):\n    \"\"\"\n    Conversts text to slug. Example \"United States\" => united-states\n    \"\"\"\n    text = unidecode.unidecode(text).lower()\n    return re.sub(r'[\\W_]+', '-', text)\n\n\ndef download_countries_stocks(countries,\n                            base_path=\".\/\",\n                            from_date=\"01\/01\/2000\",\n                            to_date=None,\n                            verbose=True):\n    \"\"\"\n    For each country in the list of countries, downloads the list of country stocks in \n    .\/base_path\/<country_name>\/stock_list.csv.\n    Then, for each stock in stock_list, downloads the historical prices in \n    .\/base_path\/<country_name>\/prices\/<symbol>.csv, \n\n    countries: Array with the names of the countries to download\n    base_path: base path to download everything. Default \".\/\" \n    from_date: first date to download prices (\"dd\/mm\/yyyy\"). Default=\"01\/01\/2000\"\n    to_date: last date to download prices (\"dd\/mm\/yyyy\"). Default=None, that means today.\n    verbose: boolean to display some status messages\n    \"\"\"\n\n    for country in countries:\n        stocks_path = os.path.join(base_path, slugify(country))\n        prices_path = os.path.join(stocks_path, \"prices\")\n        stocks_df = download_country_stocks_list(\n            country, stocks_path, verbose=verbose)\n        download_stock_prices(\n            stocks_df, output_path=prices_path, from_date=from_date)\n\n\ndef update_countries_stocks(countries):\n    for country in countries:\n        stocks_path = os.path.join(os.getcwd(), slugify(country))\n        prices_path = os.path.join(stocks_path, \"prices\")\n        update_stock_prices(prices_path)","bdac5432":"# list of countries you want to download.\ncountries = ['spain']\n\ndownload_countries_stocks(countries)\n\n# To just update the stock_prices that were already downloaded using \n# download_countries_stocks comment the line above and uncomment the line below.\n\n# update_countries_stocks(countries)\n","9a3ae35f":"stocks_df = pd.read_csv(\"\/kaggle\/working\/spain\/stocks_list.csv\")\nstocks_df.head()","195e41b2":"bbva = pd.read_csv(\"\/kaggle\/working\/spain\/prices\/BBVA.csv\")\nbbva.head()","4adb8ce2":"# Download Spanish historical stock prices\n\nBelow a set of scritps to download the historical stock prices of Spain\n\nIt the script uses [investpy](https:\/\/github.com\/alvarobartt\/investpy) behind the scenes and it can be customized to download the stocks of any other country.\n\n\n## How to use it. Download full history\n\nTo download the Spanish stock prices since 2000-01-01,just run the whole notebook.\n\nIt will download in `\/kaggle\/working\/` the following:\n\n   * `spain\/stocks_list.csv` CSV with the list of stocks in the country. Columns: country, name, full_name, isin, currency, symbol.\n   \n   * `spain\/prices\/<symbol>.csv` the time series with the stock prices (Date, Open, High, Low, Close, Volume, Currency, Symbol, Country)\n\n\n## Update the history\n\nYou may have already downloaded the prices a few days ago and you want to update them, then \nin the last cell uncomment the line `update_countries_stocks(countries)` and comment the line `download_countries_stocks(countries)`.\n\n``` python\n# list of countries you want to download.\ncountries = ['spain']\n\n#download_countries_stocks(countries)\nupdate_countries_stocks(countries)\n```\n\n\n## Download other countries\n\nTo customize the countries you want to download, just go to the last cell and set the list of countries you want to download.\n\n```pyhton\ncountries = ['spain', 'united states']\ndownload_countries_stocks(countries)\n```\n\nYou can modify some additional parameters:\n\n```python\ndef download_countries_stocks(countries,\n                            base_path=\".\/\",\n                            from_date=\"01\/01\/2000\",\n                            to_date=None,\n                            verbose=True):\n```                            \n\nAll the functions are documented underneath of the definition.\n```python\ndef download_country_stocks_list(country,\n                                 stocks_path=None,\n                                 output_filename=\"stocks_list.csv\",\n                                 verbose=True)\ndef download_stock_prices(stocks_df,\n                          output_path=None,\n                          from_date=\"01\/01\/2000\",\n                          to_date=None,\n                          verbose=True)\ndef all_csv_to_pd(folder_path)\ndef slugify(text)\n```\n\n","c326bb53":"## Functions \n"}}