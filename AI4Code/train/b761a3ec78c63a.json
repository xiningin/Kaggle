{"cell_type":{"f8fede7a":"code","b89dc1ee":"code","36263705":"code","99303764":"code","fc90969c":"code","fd715067":"code","154dedb8":"code","36ac82f8":"code","2034c202":"code","75733823":"code","57e0fcd8":"code","bc105496":"code","addf7c3f":"code","2ae20cbe":"code","8a2659de":"code","baa42c6d":"code","d8584a8b":"code","0523c8e3":"code","e948b047":"code","63c318e9":"code","eadcaf4f":"code","bf054284":"code","7f604e69":"code","84aa2415":"code","a83d1018":"code","e99d4bef":"code","21357a1f":"markdown","e1e70be7":"markdown","8a2241ae":"markdown","f690431e":"markdown"},"source":{"f8fede7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b89dc1ee":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","36263705":"train_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_df.head()","99303764":"train_id=train_df['Id']\ntest_id=test_df['Id']\ntrain_df.drop('Id',axis=1,inplace=True)\ntest_df.drop('Id',axis=1,inplace=True)\ntrain_df.info()","fc90969c":"fig,ax=plt.subplots()\nax.scatter(x=train_df['GrLivArea'],y=train_df['SalePrice'])\nplt.show()","fd715067":"# We can see the two big outliers after x coordinate=4500 lets remove\ntrain_df.drop(train_df[(train_df['SalePrice']<200000)&(train_df['GrLivArea']>4500)].index,inplace=True)\nfig,ax=plt.subplots()\nax.scatter(x=train_df['GrLivArea'],y=train_df['SalePrice'])\nplt.show()","154dedb8":"# Cobining training and testing data\nall_data=pd.concat((train_df,test_df)).reset_index(drop=True)\nall_data.drop('SalePrice',axis=1,inplace=True)\nprint(all_data.shape)","36ac82f8":"all_miss_data=((all_data.isnull().sum())\/len(all_data))*100\nall_miss_data=all_miss_data.drop(all_miss_data[all_miss_data==0].index).sort_values(ascending=False)\nprint(all_miss_data)","2034c202":"#Correlation matrix\nCor_heat=train_df.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(Cor_heat,vmax=.8,square=True)","75733823":"#Scatterplot\n\nsns.set()\ncols=['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF','FullBath','YearBuilt']\nsns.pairplot(train_df[cols],size=3)\nplt.show()","57e0fcd8":"#fill the houses with no pool\nall_data['PoolQC']=all_data['PoolQC'].fillna('None')\n#houses with no misc feature\nall_data['MiscFeature']=all_data['MiscFeature'].fillna('None')\n#houses with no Alley\nall_data['Alley']=all_data['Alley'].fillna('None')\n#houses with no fence\nall_data['Fence']=all_data['Fence'].fillna('None')\n#houses with no fire place\nall_data['FireplaceQu']=all_data['FireplaceQu'].fillna('None')","bc105496":"all_data['LotFrontage']=all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","addf7c3f":"#filling the four 'garage' categorical variabes with none and continuos variables with zero\n\nfor col in ('GarageFinish','GarageQual','GarageCond','GarageType'):\n    all_data[col]=all_data[col].fillna('None')\n    \nfor col in ('GarageYrBlt','GarageArea','GarageCars'):\n    all_data[col]=all_data[col].fillna(0)","2ae20cbe":"#filling Basement Categorical cariables with none and cuntinuous variables with Zero\n\nfor col in ('BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2'):\n    all_data[col]=all_data[col].fillna('None')\n    \nfor col in ('BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath'):\n    all_data[col]=all_data[col].fillna(0)","8a2659de":"all_data['MasVnrType']=all_data['MasVnrType'].fillna('None')\nall_data['MasVnrArea']=all_data['MasVnrArea'].fillna(0)\n","baa42c6d":"print(all_data['MSZoning'].value_counts())\nall_data['MSZoning']=all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","d8584a8b":"print(all_data['Utilities'].value_counts())\nall_data=all_data.drop(['Utilities'],axis=1)","0523c8e3":"print(all_data['Functional'].value_counts())\nall_data['Functional']=all_data['Functional'].fillna('Typical')","e948b047":"print(all_data['Electrical'].value_counts())\nall_data['Electrical']=all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","63c318e9":"print(all_data['KitchenQual'].value_counts())\nall_data['KitchenQual']=all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","eadcaf4f":"#replacing with mode values\nall_data['Exterior1st']=all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd']=all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType']=all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","bf054284":"#na in subclass means no class\nprint(all_data['MSSubClass'].value_counts())\nall_data['MSSubClass']=all_data['MSSubClass'].fillna('None')","7f604e69":"all_miss_data=((all_data.isnull().sum())\/len(all_data))*100\nall_miss_data=all_miss_data.drop(all_miss_data[all_miss_data==0].index).sort_values(ascending=False)\nprint(all_miss_data)","84aa2415":"print(all_data.info())","a83d1018":"#now convert series datatype to string datatype\n\nall_data['MSSubClass']=all_data['MSSubClass'].astype(str)\n#print(all_data['OverallQual'].value_counts())\nall_data['OverallQual']=all_data['OverallQual'].astype(str)\nall_data['OverallCond']=all_data['OverallCond'].astype(str)\nall_data['YearBuilt']=all_data['YearBuilt'].astype(str)\nall_data['YearRemodAdd']=all_data['YearRemodAdd'].astype(str)","e99d4bef":"#Label to encode the variable\n\n\nfrom sklearn.preprocessing import LabelEncoder \ncols= ('FireplaceQu','BsmtQual','BsmtCond','GarageQual','GarageCond','ExterQual','ExterCond','HeatingQC','PoolQC','KitchenQual',\n       'BsmtFinType1','BsmtFinType2','Functional','Fence','BsmtExposure','GarageFinish','LandSlope','LotShape','PavedDrive','Street',\n       'Alley','CentralAir','MSSubClass','OverallCond','YrSold','MoSold')\nfor c in cols:\n    lbl= LabelEncoder()\n    lbl.fit(list(all_data[c].values))\n    all_data[c]=lbl.transform(list(all_data[c].values))\n    \n#printing the shape\nprint('Shape all data:{}' .format(all_data.shape))\n","21357a1f":"If the house has no masonary value\nthen fill masonry type with None and area with value of Zero","e1e70be7":"*Import Modules*","8a2241ae":"lets fill missing data","f690431e":"names data description says NA in the functional column mean Typical"}}