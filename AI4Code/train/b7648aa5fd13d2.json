{"cell_type":{"7729a042":"code","b37325e5":"code","be2c9f4c":"code","b78afa33":"code","3a3be582":"code","1fe34ff5":"code","0cec31d0":"code","f0bb498e":"code","54e46a48":"code","1b9045ca":"code","63e21190":"code","19c885a1":"code","7b33bea0":"code","3f55e09e":"code","ee6dd337":"code","31f59d44":"code","ef67c43c":"code","297f4273":"code","8ac66edd":"code","428d2cae":"code","67e150d4":"code","425818e2":"code","7316446b":"markdown","9ab75cda":"markdown","13572538":"markdown","ac63f3d7":"markdown","11687e8b":"markdown","7f69bfdf":"markdown","065eb501":"markdown","be0e07e7":"markdown"},"source":{"7729a042":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport itertools\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b37325e5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, f1_score, roc_auc_score\nimport os\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk import tokenize,stem\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')","be2c9f4c":"df = pd.read_csv(\"\/kaggle\/input\/vehicle-stolen-dataset\/vehicle_stolen_dataset_ with_headers.csv\")\ndf.head()","b78afa33":"df1 = pd.read_csv(\"\/kaggle\/input\/vehicle-stolen-dataset\/vehicle_stolen_dataset.csv\")\ndf1.head()","3a3be582":"df.isnull().sum()","1fe34ff5":"#Code by Lucas Abrah\u00e3o https:\/\/www.kaggle.com\/lucasabrahao\/trabalho-manufatura-an-lise-de-dados-no-brasil\n\ndf[\"color\"].value_counts()[:15].plot.barh(color='black', title='Stolen Vehicles by Color');","0cec31d0":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\ntime_cnt = np.round(df['time'].value_counts(normalize=True) * 100)\nhv.Bars(time_cnt).opts(title=\"Time Count\", color=\"black\", xlabel=\"time\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True))","f0bb498e":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\nbrand_cnt = np.round(df['brand'].value_counts(normalize=True) * 100)\nhv.Bars(brand_cnt).opts(title=\"Brand Count\", color=\"red\", xlabel=\"brand\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True))","54e46a48":"#Code by Kohei-mu https:\/\/www.kaggle.com\/koheimuramatsu\/industrial-accident-causal-analysis\/notebook\n\nstolen_cnt = np.round(df['brand'].value_counts(normalize=True) * 100)\nhv.Bars(stolen_cnt).opts(title=\"Stolen Vehicles Count\", color=\"yellow\", xlabel=\"stolen\", ylabel=\"Percentage\", yformatter='%d%%')\\\n                .opts(opts.Bars(width=500, height=300,tools=['hover'],show_grid=True))","1b9045ca":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.brand)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='afmhot', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","63e21190":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.Set2(np.linspace(0,1,20))\ndf[\"brand\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"time\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Stolen Vehicles by Brand\")\nplt.axis(\"off\")\nplt.show()","19c885a1":"#Code by Bizen https:\/\/www.kaggle.com\/hiro5299834\/tps-apr-2021-deebtables\/notebook\n\nTARGET = 'stoled' #Target could Not be float otherwise will result in valueError: Unknown label type: 'continuous'. Even after the encoding.\n\nlabel_cols = ['number_plate', 'brand', 'time', 'color']\n#numerical_cols = ['Altitude', 'Rainfall', 'Frosts', 'Year']","7b33bea0":"#Code by Bizen https:\/\/www.kaggle.com\/hiro5299834\/tps-apr-2021-deebtables\/notebook\n\nfrom sklearn.preprocessing import LabelEncoder\n\ndef label_encoder(c):\n    le = LabelEncoder()\n    return le.fit_transform(c)\n\nlabel_encoded_df = df[label_cols].apply(label_encoder)\n#numerical_df = df[numerical_cols]\ntarget_df = df[TARGET]\n\ndf = pd.concat([label_encoded_df, target_df], axis=1)","3f55e09e":"df.head()","ee6dd337":"#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\n%matplotlib inline\n\ndf[['number_plate', 'brand', 'time', 'color']].diff().hist(color=\"r\", alpha=0.8, bins=50, figsize=(12, 6))\nplt.figure();","31f59d44":"#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\n\nimport plotly.express as px\nfig = px.box(df['number_plate'], color = df['stoled'],points=\"all\")\nfig.show()","ef67c43c":"#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\n        \n        \ndisplay(df.head())","297f4273":"##Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\n\nX = df.drop(['stoled'], axis = 1)\ny = df['stoled']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","8ac66edd":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor","428d2cae":"#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\n\nlr = LinearRegression()\n\nknn = KNeighborsRegressor(n_neighbors=10)\n\ndt = DecisionTreeRegressor(max_depth = 3)\n\nrf = RandomForestRegressor(max_depth = 3, n_estimators=500)\n\nada = AdaBoostRegressor( n_estimators=50, learning_rate =.01)\n\ngbr = GradientBoostingRegressor(max_depth=2, n_estimators=100, learning_rate =.2)\n\nxgb = XGBRegressor(max_depth = 3, n_estimators=50, learning_rate =.2)\n\ncb = CatBoostRegressor(learning_rate =.01, max_depth =5, verbose = 0)\n\nregressors = [('Linear Regression', lr), ('K Nearest Neighbours', knn),\n               ('Decision Tree', dt), ('Random Forest', rf), ('AdaBoost', ada),\n              ('Gradient Boosting Regressor', gbr), ('XGBoost', xgb), ('catboost', cb)]","67e150d4":"#Code by Sohom Majumder https:\/\/www.kaggle.com\/sohommajumder21\/medical-cost-8-models-90-accuracy\/notebook\n\nfrom sklearn.metrics import r2_score\n\nfor regressor_name, regressor in regressors:\n \n    # Fit regressor to the training set\n    regressor.fit(X_train, y_train)    \n   \n    # Predict \n    y_pred = regressor.predict(X_test)\n    accuracy = round(r2_score(y_test,y_pred),1)*100\n    \n\n   \n    # Evaluate  accuracy on the test set\n    print('{:s} : {:.0f} %'.format(regressor_name, accuracy))\n    plt.rcParams[\"figure.figsize\"] = (20,8)\n    plt.bar(regressor_name,accuracy)","425818e2":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thank you Sohom @sohommajumder21, for the script.' )","7316446b":"#Below is the snippet that inspired the Notebook's Title.","9ab75cda":"#Model training & Testing","13572538":"#My World is upside down. All Negative. Been Stoled + No Insurance Policy = Negative Results.  \n\n#All for One and One for All. United we stand, Divided we fall.\n\n#Even united I keep falling.","ac63f3d7":"#Label Encoding again","11687e8b":"#Spliting and Scaling","7f69bfdf":"#Do Not expect any DNN in that Notebook. Only love for Alexandre Dumas novel.\n\nUnus pro omnibus, omnes pro uno is a Latin phrase that means One for all, all for one. It is the unofficial motto of Switzerland. A French version, Un pour tous, tous pour un, was made famous by Alexandre Dumas in the 1844 novel The Three Musketeers.\n\nhttps:\/\/en.wikipedia.org\/wiki\/Unus_pro_omnibus,_omnes_pro_uno","065eb501":"![](https:\/\/siliconvalleyinsider.files.wordpress.com\/2019\/07\/3_musketeers-3.jpg?w=476&h=254)asiliconvalleyinsider.com","be0e07e7":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRd8vEMQn8KBwEto78A6L_68NZzZE5f2twhDg&usqp=CAU)quoteslyfe.com"}}