{"cell_type":{"a19b9257":"code","8f229b57":"code","cc9dd2aa":"code","effb1ec3":"code","8fffb748":"code","d88bf05f":"code","43cb70d4":"code","8a9fa549":"code","689accd7":"code","c3b9ce7e":"code","9ed5b144":"code","3834c07b":"code","1115a0f4":"code","82e0eed8":"code","ac708467":"code","749104ba":"code","00d614b8":"code","d05b1da1":"code","855a9417":"code","6274d77c":"code","bcc84bf6":"code","e7a11af2":"code","e438c948":"code","71932a2e":"code","8ebc62b7":"code","a8204cc5":"code","b59828ea":"code","b0845216":"code","eaf5e009":"code","9ec1bbdb":"code","be08f65d":"code","dc6a2e3d":"code","26076eef":"code","f63ebd4a":"code","378197ca":"code","292cca98":"code","ef029709":"code","fffdf91e":"code","d53889a2":"code","b38d3bcc":"code","c6c560b5":"code","a7057e74":"code","04854a4b":"code","8503b2b2":"code","37b77690":"code","348b0c2c":"code","e1999291":"code","1e128ffc":"code","4fc78ffb":"code","ef9b0f78":"code","3c7c106b":"code","619c7550":"code","6acd6047":"code","e4585657":"code","2222e4f0":"code","d24f4b56":"code","b4891baf":"code","84f7bc91":"markdown","d3d4a213":"markdown","f523ea0d":"markdown","c720786e":"markdown","b762b1c2":"markdown"},"source":{"a19b9257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f229b57":"df = pd.read_csv('\/kaggle\/input\/data-analyst-jobs\/DataAnalyst.csv')","cc9dd2aa":"df.head()","effb1ec3":"df.shape","8fffb748":"df.info()","d88bf05f":"# remove the unnamed:0 column in the dataset\n\ndf.drop('Unnamed: 0', axis = 1, inplace = True)","43cb70d4":"# Missing data\n\ndf.isnull().sum()","8a9fa549":"df['Job Title'].value_counts()","689accd7":"df['Salary Estimate'].value_counts()","c3b9ce7e":"df['Rating'].value_counts()","9ed5b144":"df['Founded'].value_counts()","3834c07b":"df['Location'].value_counts()","1115a0f4":"df['Size'].value_counts()","82e0eed8":"df['Headquarters'].value_counts()","ac708467":"df['Type of ownership'].value_counts()","749104ba":"df['Industry'].value_counts()","00d614b8":"df['Sector'].value_counts()","d05b1da1":"df['Revenue'].value_counts()","855a9417":"df['Competitors'].value_counts()","6274d77c":"df['Easy Apply'].value_counts()","bcc84bf6":"df = df.replace(-1,np.nan)\ndf = df.replace(-1.0,np.nan)\ndf = df.replace('-1',np.nan)","e7a11af2":"df.isnull().sum()","e438c948":"# we can observe from the dataset that the company name is having \\n rating at the end of the name annd it can be removed\n\ndf['Company Name'],_ = df['Company Name'].str.split('\\n', 1). str","71932a2e":"# we can observe that the column job title has both title and department in same column and they can be seperated\n\ndf['Job Title'], df['Department'] = df['Job Title'].str.split(',', 1).str","8ebc62b7":"# We can observe from the salary estimate colmn that the salary is estimated by glassdoor at the end of estimated values and this can be removed.\n\ndf['Salary Estimate'],_ = df['Salary Estimate'].str.split('(', 1).str","a8204cc5":"df.head()","b59828ea":"# In salary estimate we can observe the presence of $ and K at left and right of the value respectively and they can be removed\n\ndf['Minimum Salary Estimate'], df['Maximum Salary Estimate'] = df['Salary Estimate'].str.split('-').str\n\ndf['Minimum Salary Estimate'] = df['Minimum Salary Estimate'].str.strip(' ').str.lstrip('$').str.rstrip('K').fillna(0).astype('int')\n\ndf['Maximum Salary Estimate'] = df['Maximum Salary Estimate'].str.strip(' ').str.lstrip('$').str.rstrip('K').fillna(0).astype('int')","b0845216":"df.head()","eaf5e009":"# now we can drop the salary estimate column\n\ndf.drop(['Salary Estimate'], axis = 1, inplace = True)","9ec1bbdb":"# As we can see easy apply column has Nan values hey can be converted to bool False\n\ndf['Easy Apply'] = df['Easy Apply'].fillna(False).astype(bool)","be08f65d":"df.head()","dc6a2e3d":"# True in easy apply represents that the company is hiring at present\n# we can now plot the company wise hiring \n\ndf_hiring = df[df['Easy Apply'] == True]\ndf_company = df_hiring.groupby('Company Name').count().reset_index()\ndf_company = df_company.sort_values('Easy Apply', ascending = True)\ndf_company","26076eef":"# We can now visualize the jobs company wise\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f63ebd4a":"plt.figure(figsize = (18, 7))\nsns.barplot('Company Name', 'Easy Apply', data = df_company, )\nplt.xticks(rotation = 90)\nplt.show()","378197ca":"# We can visulaize location wise salary trends \ndf_location = df.groupby('Location')[['Minimum Salary Estimate', 'Maximum Salary Estimate']].mean().sort_values(['Maximum Salary Estimate', 'Minimum Salary Estimate'],ascending = False).head(50)\ndf_location","292cca98":"df_location.plot.bar(stacked = True, figsize = (20,6))\nplt.show()","ef029709":"df.isnull().sum()","fffdf91e":"# We can replace missing values in rating with mean value\ndf['Rating'].fillna(df['Rating'].mean(), inplace = True)","d53889a2":"df.isnull().sum()","b38d3bcc":"df.fillna('Unknown', inplace = True)","c6c560b5":"df_rating = df.groupby('Rating')['Company Name'].count()\ndf_rating = pd.DataFrame(df_rating).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_rating = df_rating.sort_values('Count of companies', ascending = False)\ndf_rating","a7057e74":"plt.figure(figsize = (20,6))\nsns.barplot(x = df_rating['Rating'],y = df_rating['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","04854a4b":"# Top places where most companies headquarters are located\n\ndf_hq = df.groupby('Headquarters')['Company Name'].count()\ndf_hq = pd.DataFrame(df_hq).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_hq = df_hq.sort_values('Count of companies', ascending = False).head(30)\ndf_hq","8503b2b2":"plt.figure(figsize = (10,6))\nsns.barplot(x = df_hq['Headquarters'],y = df_hq['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","37b77690":"df['Size']","348b0c2c":"df_size = df.groupby('Size')['Company Name'].count()\ndf_size = pd.DataFrame(df_size).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_size = df_size.sort_values('Count of companies', ascending = False)\ndf_size","e1999291":"plt.figure(figsize = (10,6))\nsns.barplot(x = df_size['Size'],y = df_size['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","1e128ffc":"df_found = df.groupby('Founded')['Company Name'].count()\ndf_found = pd.DataFrame(df_found).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_found = df_found.sort_values('Count of companies', ascending = False).head(50)\ndf_found","4fc78ffb":"plt.figure(figsize = (15,5))\nsns.barplot(x = df_found['Founded'],y = df_found['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","ef9b0f78":"df_owner = df.groupby('Type of ownership')['Company Name'].count()\ndf_owner = pd.DataFrame(df_owner).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_owner = df_owner.sort_values('Count of companies', ascending = False)\n\n\nplt.figure(figsize = (10,5))\nsns.barplot(x = df_owner['Type of ownership'],y = df_owner['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","3c7c106b":"df_industry = df.groupby('Industry')['Company Name'].count()\ndf_industry = pd.DataFrame(df_industry).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_industry = df_industry.sort_values('Count of companies', ascending = False)\n\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df_industry['Industry'],y = df_industry['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","619c7550":"df_sector = df.groupby('Sector')['Company Name'].count()\ndf_sector = pd.DataFrame(df_sector).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_sector = df_sector.sort_values('Count of companies', ascending = False)\n\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df_sector['Sector'],y = df_sector['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","6acd6047":"df_revenue = df.groupby('Revenue')['Company Name'].count()\ndf_revenue = pd.DataFrame(df_revenue).rename(columns = {'Company Name': 'Count of companies'}).reset_index()\ndf_revenue = df_revenue.sort_values('Count of companies', ascending = False)\n\n\nplt.figure(figsize = (20,5))\nsns.barplot(x = df_revenue['Revenue'],y = df_revenue['Count of companies'])\nplt.xticks(rotation = 90)\nplt.show()","e4585657":"df_ind = df.groupby('Industry')[['Minimum Salary Estimate', 'Maximum Salary Estimate']].mean().sort_values(['Maximum Salary Estimate', 'Minimum Salary Estimate'],ascending = False)\ndf_ind = df_ind.rename(columns = {'Minimum Salary Estimate' : 'Average Minimum Salary', 'Maximum Salary Estimate' : 'Average Maximum Salary'})\ndf_ind","2222e4f0":"df_ind.plot.bar(stacked = True, figsize = (25,5))\nplt.show()","d24f4b56":"df_open = pd.DataFrame(df[df['Easy Apply'] == True]['Job Title'].value_counts()).rename(columns={'Job Title':'Number of openings'}).reset_index().rename(columns={'index':'Job Title'})\ndf_open","b4891baf":"plt.figure(figsize = (25, 5))\nsns.barplot(df_open['Job Title'], df_open['Number of openings'])\nplt.xticks(rotation = 90)\nplt.show()","84f7bc91":"## ***Please upvote if you like the content***","d3d4a213":"##### columns easy apply and competitors have more than 50 percent data as null values","f523ea0d":"One company name is missing out of 2254 entries","c720786e":"### Clean the data","b762b1c2":"##### We can observe that almost all columns contain -1 as a value which can be replaced with Nan\n##### The -1 is having int, categorical(string) and float datatype and each should be done seperately"}}