{"cell_type":{"8a6092c5":"code","9604e421":"code","9fcc2d63":"code","ac077a5e":"code","4f5cc4ac":"code","1d52dcad":"code","7acc02d4":"code","b31bb2e0":"code","d33579dc":"code","5443c248":"code","aafd9302":"code","758631cd":"code","decaee32":"code","8365c1e1":"code","a1e78245":"code","75e0dbb8":"code","92f9ba54":"code","45bdc844":"code","06cbe6a9":"code","883aebf2":"code","efcd95f5":"code","8451f025":"code","b9c95d7a":"code","d4890d21":"code","2f41ef91":"code","c3392f39":"code","0a51f967":"code","5fcdbb1c":"code","b6049241":"code","4be42cf1":"code","437bc05b":"code","61728692":"code","7f645634":"code","c0bdeb81":"code","a9c71c43":"code","53d24227":"code","2e1b6095":"code","0b9f51ea":"code","18288195":"markdown"},"source":{"8a6092c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9604e421":"import pandas as pd\nimport numpy as np\n","9fcc2d63":"data = pd.read_csv('..\/input\/spam-mails-dataset\/spam_ham_dataset.csv')\ndata\n","ac077a5e":"y = data[\"label_num\"]","4f5cc4ac":"x = data[\"text\"]","1d52dcad":"import matplotlib.pyplot as plt\nimport seaborn as sns","7acc02d4":"val_cnt = data.label_num.value_counts()\n\nplt.figure(figsize=(8,4))\nplt.bar(val_cnt.index,val_cnt.values)\nplt.show()\n","b31bb2e0":"x.isnull().sum()","d33579dc":"y.isnull().sum()","5443c248":"data['text'].str.len().hist()\n","aafd9302":"data.text.str.split().\\\n    map(lambda x: len(x)).\\\n    hist()","758631cd":"import nltk \nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\nnltk.download('stopwords')\nstop=set(stopwords.words('english'))\n","decaee32":"stemmer = SnowballStemmer('english')\nstop_words = stopwords.words('english')\n\ntext_cleaning_re = \"@\\S+|https?:\\S+|http?:\\S+|[^A-Za-z0-9]:\\S+|subject:\\S+|nbsp\"","8365c1e1":"data.head()\n","a1e78245":"import re","75e0dbb8":"def preprocess(text, stem=False):\n    text = re.sub(text_cleaning_re, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","92f9ba54":"data.text = data.text.apply(lambda x: preprocess(x))\n","45bdc844":"TRAIN_SIZE = 0.8\nMAX_NB_WORDS = 100000\nMAX_SEQUENCE_LENGTH = 50\n","06cbe6a9":"from sklearn.model_selection import train_test_split\n","883aebf2":"y = data['label_num']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1-TRAIN_SIZE,\n                                         random_state=7) # Splits Dataset into Training and Testing set\nprint(\"Train Data size:\", len(x_train))\nprint(\"Test Data size\", len(x_test))","efcd95f5":"data = pd.read_csv('..\/input\/spam-mails-dataset\/spam_ham_dataset.csv')\ndata","8451f025":"x_train.head(10)\n","b9c95d7a":"##data = data.drop(['Unnamed: 0', 'label'], axis=1)\nfrom keras.preprocessing.text import Tokenizer\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(x_train)\n\nword_index = tokenizer.word_index\nvocab_size = len(tokenizer.word_index) + 1000\nprint(\"Vocabulary Size :\", vocab_size)","d4890d21":"from keras.preprocessing.sequence import pad_sequences\n\nx_train = pad_sequences(tokenizer.texts_to_sequences(x_train),\n                        maxlen = MAX_SEQUENCE_LENGTH)\nx_test = pad_sequences(tokenizer.texts_to_sequences(x_test),\n                       maxlen = MAX_SEQUENCE_LENGTH)\n\nprint(\"Training X Shape:\",x_train.shape)\nprint(\"Testing X Shape:\",x_test.shape)","2f41ef91":"n_lstm = 200\ndrop_lstm =0.2","c3392f39":"from tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense, Dropout, LSTM, Bidirectional","0a51f967":"embeding_dim = 16\n","5fcdbb1c":"model2 = Sequential()\nmodel2.add(Embedding(vocab_size, embeding_dim, input_length=MAX_SEQUENCE_LENGTH))\nmodel2.add(Bidirectional(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True)))\nmodel2.add(Dense(1, activation='sigmoid'))","b6049241":"model2.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])","4be42cf1":"# Training\nnum_epochs = 30\nearly_stop = EarlyStopping(monitor='val_loss', patience=2)\nhistory = model2.fit(x_train, y_train, epochs=num_epochs, \n                    validation_data=(x_test, y_test),callbacks =[early_stop], verbose=2)","437bc05b":"metrics = pd.DataFrame(history.history)\n# Rename column\nmetrics.rename(columns = {'loss': 'Training_Loss', 'accuracy': 'Training_Accuracy',\n                         'val_loss': 'Validation_Loss', 'val_accuracy': 'Validation_Accuracy'}, inplace = True)\ndef plot_graphs1(var1, var2, string):\n    metrics[[var1, var2]].plot()\n    plt.title('BiLSTM Model: Training and Validation ' + string)\n    plt.xlabel ('Number of epochs')\n    plt.ylabel(string)\n    plt.legend([var1, var2])\n# Plot\nplot_graphs1('Training_Loss', 'Validation_Loss', 'loss')\nplot_graphs1('Training_Accuracy', 'Validation_Accuracy', 'accuracy')","61728692":"metrics.head()\n","7f645634":"y_pred = model2.predict(x_test)\ny_pred.shape","c0bdeb81":"def sigmoid(x):\n    if x>=0.5:\n        return 1\n    else:\n        return 0 ","a9c71c43":"for i in range (len(y_pred)):\n    for j in range (len(y_pred[i])):\n        y_pred[i][j]= sigmoid(y_pred[i][j])\npred = []\nfor i in range (len(y_pred)):\n    pred.append(int(y_pred[i].all()))","53d24227":"np.set_printoptions(threshold=np.inf)\n","2e1b6095":"data.label_num\n","0b9f51ea":"from tensorflow.keras.models import load_model\n\nmodel2.save('bilstm.h5')","18288195":"Basic EDA "}}