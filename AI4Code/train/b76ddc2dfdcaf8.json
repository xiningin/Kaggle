{"cell_type":{"1b0d49e0":"code","7474e5c0":"code","c39f16c8":"code","22a6578a":"code","d31e0592":"code","9b5d8a53":"code","b8a0dde8":"code","92d2fc6d":"code","a06d9cc2":"code","6596a44d":"code","b947d64d":"code","2d8cda41":"code","4947b7fe":"code","a22da68c":"code","9b0b9955":"code","0510d1e7":"code","07f65ddf":"code","f79b17f3":"code","672ddcb7":"code","031f0f16":"code","de4bdc62":"markdown"},"source":{"1b0d49e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7474e5c0":"books = pd.read_csv('\/kaggle\/input\/book-data-set\/BX-Books.csv',sep=\";\",error_bad_lines=False, encoding='latin-1')\nrating=pd.read_csv('\/kaggle\/input\/book-data-set\/Ratings.csv',sep=\";\",error_bad_lines=False, encoding='latin-1')","c39f16c8":"#Merging the Books data andrating data on ISBN\ndf = pd.merge(books,rating,on='ISBN')","22a6578a":"df.head()","d31e0592":"df.columns","9b5d8a53":"#droping columns which arenot required for recommendation system building\ndf.drop(['Book-Author', 'Year-Of-Publication', 'Publisher',\n       'Image-URL-S', 'Image-URL-M', 'Image-URL-L'],axis=1,inplace=True)","b8a0dde8":"df = df.rename(columns={'Book-Title':'title','User-ID':'userid','Book-Rating':'rating'})\n# rename columns in manner to access and understand easly","92d2fc6d":"book_rating = df.dropna(axis=0, subset= ['title'])\nrating_count = (book_rating.\n                groupby(by = ['title'])['rating'].\n                count().\n                reset_index().\n                rename(columns={'rating':'totalrating'})\n                [['title','totalrating']]\n               )\n#creating a new columns called total rating which provides the total number rating on each books","a06d9cc2":"rating_count.head()","6596a44d":"book_rating.head()","b947d64d":"#merge both book_rating and rating count. Were the the books with less numbers of reviews can be neglated\n#its may not be relevent to reccomend books are not that much famous\nfinal_book_data = book_rating.merge(rating_count,left_on='title',right_on='title',how='left')","2d8cda41":"final_book_data.head()","4947b7fe":"only_popular_books = final_book_data.query('totalrating>=100')#only book rate at least 100 times is taken others neglated\nonly_popular_books.head()","a22da68c":"only_popular_books['title'].nunique()#total number of books are 914","9b0b9955":"books_features = only_popular_books.pivot_table(index='title',columns='userid',values='rating').fillna(0)\n# Convert Title, userId and rating to numeric representaion","0510d1e7":"#now using scipy convert the pivot table to csr matrix\nfrom scipy.sparse import csr_matrix\nbooks_features_matrix = csr_matrix(books_features.values)","07f65ddf":"from sklearn.neighbors import NearestNeighbors\nmodel = NearestNeighbors(metric='cosine',algorithm='brute')\n#Creating a prediction algorithm with cosine similarty matrix","f79b17f3":"model.fit(books_features_matrix)\n#creating an unspuerised NearestNeighbor algorthim","672ddcb7":"query_index = np.random.choice(books_features.shape[0])\nprint(query_index)\ndistances, indices = model.kneighbors(books_features.iloc[query_index,:].values.reshape(1, -1), n_neighbors = 6)\n#Getting a random book,with its distance and indices from cosine similarity","031f0f16":"for i in range(0, len(distances.flatten())):\n    if i == 0:\n        print('Recommendations for {0}:\\n'.format(books_features.index[56]))\n    else:\n        print('{0}: {1}, with distance of {2}:'.format(i, books_features.index[indices.flatten()[i]], distances.flatten()[i]))\n        #Checking the best 5 Recommendation","de4bdc62":"****Now the data need to converted to an array matrix"}}