{"cell_type":{"e21e72c2":"code","627f9e4b":"code","e3e15152":"code","9e4fc563":"code","a7b8e5fa":"code","2d9309fc":"code","4e57334f":"code","c59f0496":"code","febb9fa3":"code","9008a966":"code","a3ec4695":"code","ccb1c9bb":"code","731b66ae":"code","343bc1a5":"code","eb53ac42":"code","a70a974e":"code","ee748265":"code","1ce9c93d":"code","bdc12d00":"code","eb4a028b":"code","fe7e19be":"code","38e91da4":"code","a7046d5d":"code","7abd09a7":"code","5a302aaf":"code","99a8b585":"code","88d47f01":"code","2094c758":"code","a546741e":"markdown","4792923c":"markdown","ed6c8a55":"markdown","f06d5b38":"markdown","c025bc8b":"markdown","c3383227":"markdown","e81dd8bd":"markdown","46b7f29f":"markdown","ee6e0271":"markdown","bcf8ea06":"markdown","5745bedd":"markdown","6ac79380":"markdown","f042db05":"markdown","87ddb359":"markdown","9d13856f":"markdown","e1a45246":"markdown","11b0323e":"markdown","74b95663":"markdown","a47e6927":"markdown","3de7f1a3":"markdown","e58fd318":"markdown","3ebaeb0f":"markdown","62efeeb0":"markdown","90f8aaf2":"markdown","3bfdf17d":"markdown","5ca22431":"markdown","03eb0fc5":"markdown","6c5991e5":"markdown","b117d2da":"markdown","6d42b064":"markdown","24b11be1":"markdown","e5844e32":"markdown"},"source":{"e21e72c2":"pip install understat","627f9e4b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport asyncio\nimport json\nimport aiohttp\nfrom understat import Understat\nimport nest_asyncio\n# to avoid errors apply the nest asyncio \nnest_asyncio.apply()\n","e3e15152":"async with aiohttp.ClientSession() as session:\n    understat = Understat(session)\n    grouped_stats = await understat.get_player_grouped_stats(619)\n    ","9e4fc563":"grouped_stats.keys()","a7b8e5fa":"df = pd.DataFrame(grouped_stats['season']).set_index('season')\nprint('These are Sergio Aguero stats by seasons')\ndisplay(df)","2d9309fc":"df = pd.DataFrame(grouped_stats['situation']).T\nprint('These are Sergio Aguero stats by situation')\ndisplay(df)","4e57334f":"df['FromCorner'].apply(pd.Series)","c59f0496":" async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        player_shots = await understat.get_player_shots(\n            619)\n        shots = pd.DataFrame(player_shots)","febb9fa3":"shots","9008a966":" async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        player_shots = await understat.get_player_shots(\n            619, {\"lastAction\": \"Cross\"})\n        shots = pd.DataFrame(player_shots)","a3ec4695":"shots","ccb1c9bb":"shots[shots['situation']=='OpenPlay']","731b66ae":"async with aiohttp.ClientSession() as session:\n    understat = Understat(session)\n    player_matches = await understat.get_player_matches(619)\n    df = pd.DataFrame(player_matches)","343bc1a5":"df","eb53ac42":"async with aiohttp.ClientSession() as session:\n    understat = Understat(session)\n    player_matches = await understat.get_player_matches(\n         619, {\"h_team\": \"Manchester United\"})\n    df = pd.DataFrame(player_matches)","a70a974e":"df","ee748265":"async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        player_stats = await understat.get_player_stats(619, [\"FW\"])\n        #print(json.dumps(player_stats))\n        df = pd.DataFrame(player_stats)","1ce9c93d":"df","bdc12d00":"df['goals'].apply(pd.Series)","eb4a028b":"async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        match = await understat.get_match_shots(14809)\n        #print(json.dumps(players))\n        ","fe7e19be":"match.keys()","38e91da4":"df_a = pd.DataFrame(match['a'])\ndf_h = pd.DataFrame(match['h'])\ndf = df_a.append(df_h)\ndf","a7046d5d":"async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        players = await understat.get_match_players(14809)\n        # here you can choose the \"h\" to obtain the players data for the home team\n        df = pd.DataFrame(players['a']).T #\"a\" focusing on the away team, meaning Tottenham","7abd09a7":"# this time focusing on Tottenham , hence the 'a'\ndf","5a302aaf":"async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        table = await understat.get_league_table(\"Bundesliga\", \"2021\")\n        df = pd.DataFrame(table)","99a8b585":"df","88d47f01":"  async with aiohttp.ClientSession() as session:\n        understat = Understat(session)\n        stats = await understat.get_stats({\"league\": \"EPL\", \"month\": \"8\"})\n        #print(json.dumps(stats))\n        df = pd.DataFrame(stats)\n","2094c758":"df","a546741e":"# Webscraping of Understat using the Understat package\n\n\n\n**By Jose Gonzalez**\n\n\n**The Understat module was developed by Amos Sebastian here is the [Understat webpage](https:\/\/understat.readthedocs.io\/en\/latest\/classes\/understat.html#the-functions)**\n\n![ ](https:\/\/images.hive.blog\/1200x630\/https:\/\/cdn.steemitimages.com\/DQmNe1biaFMUVZ67VzggbsqFnERupsMeekEHQvAMmSTngMG\/understat.png )","4792923c":"I highlighted in red the elements in which you can filter the data on the Understat webpage and now we can do that ourselves by using Pandas and by Using **Kwargs**","ed6c8a55":"Luckily the season key for grouped_stats was not nested, in other words, did not have dictionaries inside the keys , that's why the dataframe is easily created.\n\nNow let's change the key and see that for the key \"situation\" we have dictionaries inside the keys meaning we still have to call those keys to create the correct DataFrame","f06d5b38":"In this section we'll be focusing on the data we can obtain from a player ID link, [in this case Sergio Aguero](https:\/\/understat.com\/player\/619), meaning all the stats and shots and everything from the Website Understat and a player link.\n![image.png](attachment:image.png)","c025bc8b":"<a id=\"4.1\"><\/a>\n## 4.1. Shots\n\nLet's scrape all the shots for the match, these stats include both teams and it's going to be nested so it's mandatory to create the dataframes for the keys both home and away and then merge them together to finally obtain all the shots for both teams","c3383227":"<a id=\"5.\"><\/a>\n# 5. Get table ","e81dd8bd":"Using the great module created by Amos Sebastian that functions with the [Asyncio library](https:\/\/docs.python.org\/3\/library\/asyncio.html) , we'll proceed to scrape the data from Understat.\n\n[Here you can find the functions and code he uses ](https:\/\/github.com\/amosbastian\/understat\/tree\/master\/understat)\n\n**[Most importantly here you have all the examples available for this module](https:\/\/understat.readthedocs.io\/en\/latest\/classes\/understat.html#the-functions)**","46b7f29f":"<a id=\"3.2\"><\/a>\n## 3.2. Players shot","ee6e0271":"<a id=\"3.\"><\/a>\n# 3. Players data","bcf8ea06":"Now let's scrape the shot data for Sergio Aguero's entire career \n\n![image-3.png](attachment:image-3.png)\n","5745bedd":"We'll proceed to check the keys because as it is , we cannot create a dataframe for grouped_stats","6ac79380":"This is the only out of the three methods(Selenium, Beautiful soup and Understat module) the one that actually gets you the actual league's table. \n\nYou must enter two parameters, the league you want to scrape and the year","f042db05":"**Filtering the data using Pandas**\n\n","87ddb359":"Matches played by Sergio Aguero against Manchester United as a home team","9d13856f":"<a id=\"3.4\"><\/a>\n## 3.4. Players radars\n\nNow let's obtain the radar data for Sergio Aguero\n\n![image.png](attachment:image.png)","e1a45246":"* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Player data.](#3.)\n    - [3.1. Player grouped stat.](#3.1)\n    - [3.2. Shot data.](#3.2)\n    - [3.3. Match data.](#3.3)\n    - [3.4. Radar data.](#3.4)\n* [4. Match data](#4.)\n    - [4.1. Shot data.](#4.1)\n    - [4.2. Player match info](#4.2)\n* [5. Get table](#5.)\n    * [6. Stats for every league](#6.)","11b0323e":"As with the other cases, it's nested ","74b95663":"<a id=\"2.\"><\/a>\n# 2. Importing libraries","a47e6927":"Selecting Sergio Aguero stats by season, meaning this stats from the page \n\n![image.png](attachment:image.png)","3de7f1a3":"<a id=\"6.\"><\/a>\n# 6. Stats for every league\n\nThis is in case you want to track xG axG by league instead of by teams ","e58fd318":"**Filtering the data using kwargs**\n\nIt's possible to filter the data even before having the DataFrame ","3ebaeb0f":"As you were able to observe, it's highly nested , we can unnest it by using the apply function for a series and create an unnested DataFrame","62efeeb0":"<a id=\"4.2\"><\/a>\n## 4.2 Players Data\n\nLet's scrape now the general stats for both teams Leicester and Tottenham \n\n![image.png](attachment:image.png)","90f8aaf2":"Keep in mind to mark the difference between the json data and the dict data, in the examples performed by Amos he transforms the grouped_stats data into json.","3bfdf17d":"<a id=\"3.1\"><\/a>\n## 3.1. Players grouped data","5ca22431":"As mentioned before, it is possible to filter the data by using kwargs before even having the DataFrame","03eb0fc5":"<a id=\"4.\"><\/a>\n# 4. Match Data\n\nNow we'll focus on scraping all the data possible from a match link ID such as [Leicester 2 vs Tottenham 4](https:\/\/understat.com\/match\/14809)\n![image.png](attachment:image.png)\n","6c5991e5":"<a id=\"3.3\"><\/a>\n##  3.3. Players match data","b117d2da":"<a id=\"1.\"><\/a>\n# 1. Introduction \nThis is the beggining of my Understat series in which I intent to using 3 different methods to scrape data from [Understat](https:\/\/understat.com\/) using Selenium, The Understat module created by [Amos Sebastian](https:\/\/understat.readthedocs.io\/en\/latest\/) and Beautiful Soup, heavily inspired by McKay [Johns tutorials](https:\/\/www.youtube.com\/c\/mckayjohns).\n\nThis notebook's made to scrape football statistics from the incredible webpage Understat using **The Understat module created by Amos Sebastian.**\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)\n","6d42b064":"Let's obtain the matches data for Sergio Aguero's career \n\n![image.png](attachment:image.png)","24b11be1":"<a id=\"1.1\"><\/a>\n## 1.1. Notebook content","e5844e32":"----"}}