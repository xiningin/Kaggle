{"cell_type":{"3d10f51d":"code","0a0f3fcb":"code","4f9de495":"code","6a9060e0":"code","1c0b8f18":"code","102cefa9":"code","a6dbf7ba":"code","2f371d86":"code","5ff3aa1f":"code","da54417b":"code","2cbaef89":"code","377ea6af":"code","e70b3eb9":"code","7a0a8cb1":"code","3f28c844":"code","238a5d6d":"code","193b293b":"code","37a5619a":"code","d2555bd7":"code","7b3b24a9":"code","6dfb750e":"code","e5bd7732":"code","7caf08df":"markdown","91d12073":"markdown","3357ae24":"markdown","cb734854":"markdown","4b8e3a0c":"markdown","2cd6f435":"markdown","855f4bc9":"markdown","e350ef47":"markdown","be8d8ca2":"markdown","aeeafc8a":"markdown","4000982e":"markdown","64ccd51b":"markdown","e3927a14":"markdown"},"source":{"3d10f51d":"#@title Full License Text is within this codeblock\n\n#@markdown Also the looking glass version number.\n\n\"\"\"\nCopyright (C) 2007 Free Software Foundation, Inc. <http:\/\/fsf.org\/>\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\nPreamble\nThe GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.\n\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.\n\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\n\nDevelopers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and\/or modify the software.\n\nA secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.\n\nThe GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.\n\nAn older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.\n\nThe precise terms and conditions for copying, distribution and modification follow.\n\nTERMS AND CONDITIONS\n0. Definitions.\n\"This License\" refers to version 3 of the GNU Affero General Public License.\n\n\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n\n\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.\n\nTo \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.\n\nA \"covered work\" means either the unmodified Program or a work based on the Program.\n\nTo \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\n\nTo \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\n\nAn interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n1. Source Code.\nThe \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.\n\nA \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\n\nThe \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\n\nThe \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\n\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\n\nThe Corresponding Source for a work in source code form is that same work.\n\n2. Basic Permissions.\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\n\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\n\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n3. Protecting Users' Legal Rights From Anti-Circumvention Law.\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\n\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.\n\n4. Conveying Verbatim Copies.\nYou may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\n\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n5. Conveying Modified Source Versions.\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\".\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n6. Conveying Non-Source Forms.\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\n\nA \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n\n\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\n\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\n\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\n\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n7. Additional Terms.\n\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\n\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\n\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\nAll other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\n\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\n\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n8. Termination.\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\n\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\n\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\n\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n9. Acceptance Not Required for Having Copies.\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n10. Automatic Licensing of Downstream Recipients.\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\n\nAn \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\n\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n11. Patents.\nA \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".\n\nA contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\n\nIn the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\n\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\n\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\n\nA patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\n\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n12. No Surrender of Others' Freedom.\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n13. Remote Network Interaction; Use with the GNU General Public License.\nNotwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.\n\n14. Revised Versions of this License.\nThe Free Software Foundation may publish revised and\/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.\n\nIf the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\n\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n15. Disclaimer of Warranty.\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND\/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. Limitation of Liability.\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND\/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n17. Interpretation of Sections 15 and 16.\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\n\nEND OF TERMS AND CONDITIONS\n\"\"\"\n\nLOOKING_GLASS_VERSION = \"1.3\"","0a0f3fcb":"#@title\nimport multiprocessing\nimport torch\nimport os\n# from google.colab import output\nfrom psutil import virtual_memory\n\nram_gb = round(virtual_memory().total \/ 1024**3, 1)\n\nprint('CPU:', multiprocessing.cpu_count())\nprint('RAM GB:', ram_gb)\nprint(\"PyTorch version:\", torch.__version__)\nprint(\"CUDA version:\", torch.version.cuda)\nprint(\"cuDNN version:\", torch.backends.cudnn.version())\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(\"device:\", device.type)\n\n!nvidia-smi\n\n# from pynvml import *\n# nvmlInit()\n# h = nvmlDeviceGetHandleByIndex(0)\n# info = nvmlDeviceGetMemoryInfo(h)\n# if info.total>10252636672:\n#   print('Everything is ok, you can begin')\n# else:\n#   print('We dont recomend to begin, you gonna get out of memory')","4f9de495":"#@title\n#!pip install rudalle==0.0.1rc4\n!pip uninstall --yes rudalle\n!rm -rf nrud\n# !cp -r ..\/..\/code\/py\/ru-dalle\/ nrud\n!git clone https:\/\/github.com\/neverix\/ru-dalle nrud\n%cd nrud\n!git checkout better-caching\n!pip install -e .\n# %cd ..","6a9060e0":"!rm -rf output\n!mkdir output\n# output.clear()\n\n# Import model\nfrom rudalle.pipelines import generate_images, show, super_resolution, cherry_pick_by_clip\nfrom rudalle import get_rudalle_model, get_tokenizer, get_vae, get_realesrgan, get_ruclip\nfrom rudalle.utils import seed_everything\n\nmodel = get_rudalle_model('Malevich', pretrained=True, fp16=True, device=device)\nvae = get_vae().to('cuda')\ntokenizer = get_tokenizer()","1c0b8f18":"import os\nimport json\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom ipywidgets import Output\nimport matplotlib.pyplot as plt\nfrom PIL import Image, ImageDraw\nfrom sklearn.cluster import KMeans\nfrom IPython.display import clear_output, display\n\n\nimages_data = 1000\nw = 512\ncolor_reg = 0.1\nseed = 56\nn_clusters = 9\nadd_plt = True\nfilter_plt = True\nfilter_white = False\ndata_dir = \"\/kaggle\/input\/anime-drawings-dataset\"\nout_dir = \".\/out\"\nout = Output()\ndisplay(out)\nos.makedirs(out_dir, exist_ok=True)\ntry:\n    total = 0\n    for file in [\"train\", \"test\", \"data\"][-1:]:\n        file_path = f\"{data_dir}\/{file}.json\"\n        data = json.load(open(file_path))\n        new_data = []\n        for j, f in enumerate(tqdm(data)):\n            fn = f[\"file_name\"].replace(\"png\", \"jpg\").replace(f\"images\", f\"{data_dir}\/images\")\n            im = Image.open(fn).resize((w, w)).convert(\"RGB\")\n            xy = np.asarray(list(f[\"points\"].values()))\n            center = max(w\/\/3, xy[..., 0].mean())\n            y = xy[..., 1] + color_reg * w\n            if (y > w).any() or (y < 0).any():\n                continue\n            x = xy[..., 0] - center + center \/ 2\n            if (add_plt or filter_plt) and (x > w \/\/ 2).any() or (x < 0).any():\n                continue\n            hor = (np.asarray(im)[:, 1] == np.array([0, 0, 0])).all()\n            if hor:\n                pix = im.getpixel((w\/\/2, 0))\n            else:\n                pix = im.getpixel((0, w \/\/ 2))\n            if filter_white and (np.asarray(pix) < 240).any():\n                continue\n            im = np.copy(np.asarray(im))\n            if hor:\n                h = [1, 3, 0, 2]\n            else:\n                h = [0, 2, 1, 3]\n            for is_ in h:\n                for n in range(is_):\n                    im = np.rot90(im)\n                im[:max(1, np.argmax((im > 5).any(axis=-1).any(axis=-1)))] = np.asarray(list(pix))[None, None, ...]\n                for n in range(4 - is_):\n                    im = np.rot90(im)\n            im = Image.fromarray(im)\n            n = KMeans(n_clusters=n_clusters).fit(np.asarray(im).reshape((-1, 3)))\n            centers = n.cluster_centers_\n            if add_plt:\n                im = Image.fromarray(np.concatenate((np.zeros((w, w\/\/2, 3), dtype=np.uint8) + \n                                                     255,\n                                                     # np.asarray(pix, dtype=np.uint8),\n                                                     np.asarray(im)[:, int(center-w\/3):int(center-w\/3)+w\/\/2]), axis=0)[:, :w])\n            t = np.zeros((int(w * color_reg), w \/\/ 2, 3), dtype=np.uint8)\n            step = w \/\/ 2 \/\/ len(centers)\n            for k, c in enumerate(centers):\n                t[:, k*step:k*step+step] = c\n            im = Image.fromarray(np.concatenate((t, np.asarray(im)), axis=0)[:w*2])\n            np.random.seed(seed)\n            c = (np.random.uniform(size=(xy.shape[0], 3)) * 255).astype(np.uint8)\n            plt.figure(figsize=(15, 30))\n            plt.axis(\"off\")\n            plt.imshow(im)\n            if add_plt:\n                plt.scatter(x, y, c=c \/ 255., s=100)\n            plt.savefig(os.path.join(out_dir, f\"{j}.jpg\"),\n                        bbox_inches=\"tight\", transparent=\"True\", pad_inches=0)\n            with out:\n                clear_output(wait=True)\n                plt.show()\n            total += 1\n            if total >= images_data:\n                break\nexcept KeyboardInterrupt:\n    pass","102cefa9":"import glob\n#@markdown # **PUT YOUR FILENAME HERE**\n#@markdown Just put the file name here after uploading it to your file structure and it'll handle the rest.\n\n#@markdown If you want to train on multiple files, put a file glob here (like image_* for image_1.jpg, image_2.jpg...). To grab all images in a folder, use `[FOLDER'S NAME]\/*`\n\nfile_selector_glob = f\"{out_dir}\/*\"  # @param {type:\"string\"}\ninput_files = glob.glob(file_selector_glob, recursive=True)\nprint(\"Input files:\", input_files)\nif len(input_files) == 0:\n  print(\"Your input files are empty! This will error out - make sure your file_selector_glob is formatted correctly!\")\n\n#@markdown <br><\/br>\n#@markdown # Finetuning Options\n#@markdown The amount of epochs that training occurs for. Turn down if the images are too similar to the base image. Turn up if they're too different. Use this for fine adjustments.\nepoch_amt =   20 # @param\n#@markdown Universe similarity determines how close to the original images you will receive. High similarity produces alternate versions of an image, low similarity produces \"variations on a theme\".\n\n#@markdown *Note: Universe similarity may be erratic when blending multiple images.*\nuniverse_similarity = \"Low\"  # @param [\"High\", \"Medium\", \"Low\"]\nif universe_similarity == \"High\":\n    learning_rate = 1e-4\nelif universe_similarity == \"Medium\":\n    learning_rate = 2e-5\nelif universe_similarity == \"Low\":\n    learning_rate = 1e-5\nelse:\n    learning_rate = 1e-5\n#@markdown Confidence is how closely the AI will attempt to match the input images. Low confidence will result in something that tries very hard to make an image that looks like your input, high confidence lets it go off the rails a little, and medium confidence is somewhere in the middle. v1.1 and below had \"Low\" as their default, so that will be what you're used to.\nconfidence = \"Medium\"  # @param [\"High\", \"Medium\", \"Low\"]\ngeneration_p = 0.999\nif confidence == \"High\":\n    generation_p = 0.9\nelif confidence == \"Medium\":\n    generation_p = 0.99\nelif confidence == \"Low\":\n    generation_p = 0.999\n#@markdown Input text can influence the end result you get to a minor degree, so you have the option to change it now. Input text **must be in Russian**. Leave this blank to use a default.\ninput_text = \"\"  # @param {type:\"string\"}\nif input_text == \"\":\n  input_text = \"\\u0420\\u0438\\u0447\\u0430\\u0440\\u0434 \\u0414. \\u0414\\u0436\\u0435\\u0439\\u043C\\u0441\"\n\n\nclass Args():\n    def __init__(self):\n        self.text_seq_length = model.get_param('text_seq_length')\n        self.total_seq_length = model.get_param('total_seq_length')\n        self.epochs = epoch_amt\n        self.save_dir = 'checkpoints'\n        self.model_name = 'lookingglass'\n        self.save_every = 2000\n        self.prefix_length = 10\n        self.bs = 1\n        self.clip = 0.24\n        self.lr = learning_rate\n        self.warmup_steps = 50\n        self.wandb = False\n\n\ntorch_args = Args()\nif not os.path.exists(torch_args.save_dir):\n    os.makedirs(torch_args.save_dir)\n\n#@markdown <br><\/br>\n#@markdown #Collage Options\n#@markdown The amount of images to generate per collage and the amount of collages to generate. The generator uses batching in order to make up to four images at once - turn on low_mem mode if it crashes while attempting to make 4, 9, or 25 images. Less images are faster.\nimage_amount = 64  # @param {type: \"integer\"} [1, 4, 9, 25]\nimage_amount = int(image_amount)\ncollage_amount = 1  # @param {type:\"number\"}\n\n#@markdown If you *really* want to make a 9 or 25 image collage but have a weak CPU, you can try turning on low mem mode. It will take a *while* though.\nlow_mem = False  # @param {type: \"boolean\"}\n\n#@markdown By default, Looking Glass includes your original image(s) somewhere in the collage as \"Ground Truth\". Check this box to disable that behavior.\nskip_gt = True  # @param {type: \"boolean\"}\n\n#@markdown #Output Resizer\n#@markdown If you'd like to change the shape or size of the output from its default 256x256 set \"resize\" to true.<br>Note that this is **much slower**.<br>Not only is the process itself slower but it forces itself to run with a batch_size of 1, meaning it forces you into low_mem mode, which makes pictures take a while. Buyer beware.\ndo_resize = False  # @param {type: \"boolean\"}\nif do_resize:\n    low_mem = True\nwidth =   128# @param {type:\"number\"}\nheight =   512# @param {type:\"number\"}\ntoken_width = round(width \/ 8)\ntoken_height = round(height \/ 8)\n\n#@markdown <br><\/br>\n#@markdown #Stretchsizing\n#@markdown A more crude form of image resizing that squishes your initial image down to 256x256, and then expands the output images back to your original image's aspect ratio. May result in artifacts, but runs much faster than Output Resizing.\n#@markdown <br>CURRENTLY INCOMPATIBLE WITH OUTPUT RESIZING. I WILL FIX THIS EVENTUALLY I'M JUST LAZY.\ndo_stretchsize = False  # @param {type:\"boolean\"}\n\nss_size_parent = input_files[0]\nif do_stretchsize:\n    ss_realesrgan = get_realesrgan(\"x2\", device=device)\n\n\n#@markdown <br><br>\n#@markdown #Upscaling\n#@markdown Uses realesrgan to upscale your images at the end. That's it! Set to x1 to disable. Not recommended to be combined w\/ Stretchsizing.\nrurealesrgan_multiplier = \"x2\"  # @param [\"x1\", \"x2\", \"x4\", \"x8\"]\nif rurealesrgan_multiplier != \"x1\":\n    realesrgan = get_realesrgan(rurealesrgan_multiplier, device=device)\n\noriginal_folder = \"blend\"\n","a6dbf7ba":"try:\n    mod = model.module\nexcept AttributeError:\n    mod = model\nmod.image_tokens_per_dim = 16\ncol, row = mod.image_col_embeddings.weight.data.clone(), mod.image_row_embeddings.weight.data.clone()\nmod.image_row_embeddings = torch.nn.Embedding(64, 2048).to(device).half()\nmod.image_row_embeddings.weight.data[:32] = row[:32]\nmod.image_row_embeddings.weight.data[32:] = row[:32]\ntran = mod.transformer\nmask = tran.row_mask\nfrom matplotlib import pyplot as plt\nplt.imshow(mask.cpu().detach().numpy())\n\nimport torch\n\n\ndef _init_mask(text_tokens, image_tokens_per_dim, is_bool_mask=False):\n    attn_size = text_tokens + image_tokens_per_dim*64\n    mask = torch.tril(torch.ones(attn_size, attn_size, dtype=torch.bool if is_bool_mask else torch.float32))\n    return mask\n\n\ndef get_row_mask(text_tokens=256, image_tokens_per_dim=32, is_bool_mask=False):\n    mask = _init_mask(text_tokens, image_tokens_per_dim, is_bool_mask=is_bool_mask)\n    step = image_tokens_per_dim + 1\n    r = torch.arange(0, mask.shape[-1])\n    m = 16*16\n    for col in range(text_tokens, mask.size(1)):\n        for t in range(4):\n            mask[col + step+t*m:col+(t+1)*m, col] = False if is_bool_mask else 0.0\n    return mask\n\ndef get_conv_mask(text_tokens=256, image_tokens_per_dim=32, kernel=11, is_bool_mask=False):\n    mask = _init_mask(text_tokens, image_tokens_per_dim, is_bool_mask=is_bool_mask)\n    shift = kernel \/\/ 2\n    sz = mask.size(1)\n    for pos in range(text_tokens, sz):\n        mask[pos+1:, pos] = False if is_bool_mask else 0.0\n        pixel_id = pos - text_tokens\n        row = pixel_id \/\/ image_tokens_per_dim\n        col = pixel_id % image_tokens_per_dim\n        for t in range(4):\n            t *= image_tokens_per_dim\n            for r in range(-shift, shift+1):\n                r += t\n                if r + row < 0 or r + row >= (sz - text_tokens) \/\/ image_tokens_per_dim:\n                    continue\n                for c in range(-shift, shift+1):\n                    if c + col < 0 or c + col >= image_tokens_per_dim:\n                        continue\n                    cell_id = (r + row) * image_tokens_per_dim + (c + col)\n                    if text_tokens + cell_id > pos:\n                        mask[text_tokens + cell_id, pos] = True if is_bool_mask else 1.0\n    return mask\n\ndef get_col_mask(text_tokens=256, image_tokens_per_dim=32, is_bool_mask=False):\n    mask = _init_mask(text_tokens, image_tokens_per_dim, is_bool_mask=is_bool_mask)\n    step = image_tokens_per_dim - 1\n    for col in range(text_tokens, mask.size(1)):\n        for i in range(1, mask.size(0), step+1):\n            mask[col + i: col + i + step, col] = False if is_bool_mask else 0.0\n    return mask\n\nrow_mask = get_row_mask(mod.text_seq_length, mod.image_tokens_per_dim, is_bool_mask=False)\nconv_mask = get_conv_mask(mod.text_seq_length, 16, is_bool_mask=False)\ncol_mask = get_col_mask(mod.text_seq_length, 16, is_bool_mask=False)\nfrom matplotlib import pyplot as plt\n# plt.imshow(row_mask.cpu().detach().numpy())\n# plt.show()\n# plt.imshow(conv_mask)\n# plt.show()\nplt.imshow(col_mask)\nplt.show()\ntran = mod.transformer\ntran.row_mask = row_mask.to(device).half()\ntran.conv_mask = conv_mask.to(device).half()\ntran.col_mask = col_mask.to(device).half()","2f371d86":"#@title Stretchsize processing\nimport PIL\nfrom PIL import Image\nimport os\n\n!rm -rf stretchsize\n!mkdir stretchsize\n\noriginal_file = ''\nst_width = 256\nst_height = 256\nif do_stretchsize:\n  new_input_files = []\n  #@markdown `do_stretchsize` disables `do_resize`\n  do_resize = False\n  #@markdown `do_stretchsize` always does `skip_gt`\n  skip_gt = True\n\n  for image_path in input_files:\n    __, image_name = os.path.split(image_path)\n    im = Image.open(image_path)\n    st_width, st_height = im.size\n    if st_width > st_height:\n      im1 = im.resize((st_width, st_width))\n    else:\n      im1 = im.resize((st_height, st_height))\n    stretched_path = os.path.join(\"stretchsize\", image_name)\n    im1.save(stretched_path)\n    new_input_files.append(stretched_path)\n  print(\"Input files:\", new_input_files)\n  input_files = new_input_files\n  try:\n    im = Image.open(ss_size_parent)\n    st_width, st_height = im.size\n  except:\n    st_width, st_height = 256","5ff3aa1f":"#@title\n# Write data_desc csv\nimport csv\n\nwith open('data_desc.csv', 'w', newline='') as csvfile:\n    csvwriter = csv.writer(csvfile, delimiter=',')\n    csvwriter.writerow(['', 'name', 'caption'])\n    for i, filepath in enumerate(input_files):\n      csvwriter.writerow([i, filepath, input_text])","da54417b":"#@title RuDalleDataset\n# RuDalleDataset\n# Data Preparation \/ Imports\nimport io\nimport os\nimport random\nimport numpy as np\nimport torch\nimport torchvision\nimport transformers\nimport more_itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport pandas as pd\nfrom torch.utils.data import Dataset\nfrom tqdm import tqdm\nfrom dataclasses import dataclass, field\nimport torchvision.transforms as T\nimport torchvision.transforms.functional as TF\nimport gc\n\nclass RuDalleDataset(Dataset):\n    clip_filter_thr = 0.24\n    def __init__(\n            self,\n            csv_path,\n            tokenizer,\n            resize_ratio=0.75,\n            shuffle=True,\n            load_first=None,\n            caption_score_thr=0.6\n    ):\n        \"\"\" tokenizer - object with methods tokenizer_wrapper.BaseTokenizerWrapper \"\"\"\n       \n        self.text_seq_length = model.get_param('text_seq_length')\n        self.tokenizer = tokenizer\n        self.target_image_size = 256\n        self.image_size=256\n        self.samples = []\n\n        self.image_transform = T.Compose([\n                T.Lambda(lambda img: img.convert('RGB') if img.mode != 'RGB' else img),\n                T.Resize((512, 128)),\n                T.ToTensor()\n            ])\n        \n        df = pd.read_csv(csv_path)\n        for caption, image_path  in zip(df['caption'], df['name']):\n            if len(caption)>10 and len(caption)<100 and os.path.isfile(image_path):\n              self.samples.append([image_path, caption])\n        if shuffle:\n            np.random.shuffle(self.samples)\n    \n    def __len__(self):\n        return len(self.samples)\n\n    def load_image(self, image_path):\n        image = PIL.Image.open(image_path)\n        return image\n\n    def __getitem__(self, item):\n        item = item % len(self.samples)  # infinite loop, modulo dataset size\n        image_path, text = self.samples[item]\n        try:\n          image = self.load_image(image_path)\n          image = self.image_transform(image).to(device)\n        except Exception as err:  # noqa\n            print(err)\n            random_item = random.randint(0, len(self.samples) - 1)\n            return self.__getitem__(random_item)\n        text =  tokenizer.encode_text(text, text_seq_length=self.text_seq_length).squeeze(0).to(device)\n        return text, image","2cbaef89":"#@title\n\nfrom torch.utils.data import Dataset, DataLoader\nst = RuDalleDataset(csv_path='data_desc.csv', tokenizer=tokenizer)\ntrain_dataloader = DataLoader(st, batch_size=torch_args.bs, shuffle=True, drop_last=True)\n\n#Setup logs\ntorch_args.wandb = False\n\nfrom transformers import  AdamW, get_linear_schedule_with_warmup\nmodel.train()\noptimizer = AdamW(model.parameters(), lr = torch_args.lr)\n\nscheduler = torch.optim.lr_scheduler.OneCycleLR(\n    optimizer, max_lr=torch_args.lr, \n    final_div_factor=500,  \n    steps_per_epoch=len(train_dataloader), epochs=torch_args.epochs\n)\n\ndef freeze(\n    model,\n    freeze_emb=True,\n    freeze_ln=False,\n    freeze_attn=False,\n    freeze_ff=True,\n    freeze_other=True,\n):\n    for name, p in model.module.named_parameters():\n        name = name.lower()\n        if 'ln' in name or 'norm' in name:\n            p.requires_grad = not freeze_ln\n        elif 'embeddings' in name:\n            p.requires_grad = not freeze_emb\n        elif 'mlp' in name:\n            p.requires_grad = not freeze_ff\n        elif 'attn' in name:\n            p.requires_grad = not freeze_attn\n        else:\n            p.requires_grad = not freeze_other\n    return model","377ea6af":"#@title Finetuning\nfrom tqdm.auto import tqdm\nfrom ipywidgets import Output\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output, display\n\n\ndef train(model, args: Args, train_dataloader: RuDalleDataset):\n    \"\"\"\n    args - arguments for training\n\n    train_dataloader - RuDalleDataset class with text - image pair in batch\n    \"\"\"\n    model.zero_grad()\n    loss_logs = []\n    out = Output()\n    display(out)\n    try:\n        progress = tqdm(total=(args.epochs * len(input_files)), desc='finetuning goes brrr')\n        save_counter = 0\n        for epoch in range(args.epochs):\n            for text, images in train_dataloader:\n                device = model.get_param('device')\n                save_counter += 1\n                model.zero_grad()\n                attention_mask = torch.tril(\n                    torch.ones(\n                        (args.bs, 1, args.total_seq_length, args.total_seq_length),\n                        device=device\n                    )\n                )\n                image_input_ids = vae.get_codebook_indices(images)\n\n                input_ids = torch.cat((text, image_input_ids), dim=1)\n                _, loss = forward(\n                    model.module, input_ids, attention_mask.half(),\n                    return_loss=True, use_cache=False, gradient_checkpointing=6\n                )\n                loss = loss[\"image\"]\n                # train step\n                loss.backward()\n\n                torch.nn.utils.clip_grad_norm_(model.parameters(), args.clip)\n                optimizer.step()\n                scheduler.step()\n                optimizer.zero_grad()\n                with out:\n                    clear_output(wait=True)\n                    plt.plot(loss_logs)\n                    plt.show()\n                # save every here\n                if save_counter % args.save_every == 0:\n                    try:\n                        args.save_one\n                        save_counter = 0\n                    except AttributeError:\n                        pass\n                    print(f'Saving checkpoint here {args.model_name}_dalle_{save_counter}.pt')\n\n                    plt.plot(loss_logs)\n                    plt.show()\n                    torch.save(\n                        model.state_dict(),\n                        os.path.join(args.save_dir, f\"{args.model_name}_dalle_{save_counter}.pt\")\n                    )\n                if args.wandb:\n                    args.wandb.log({\"loss\": loss.item()})\n                loss_logs += [loss.item()]\n                progress.update()\n                progress.set_postfix({\"loss\": loss.item()})\n\n        print(f'Completly tuned and saved here  {args.model_name}__dalle_last.pt')\n\n        plt.plot(loss_logs)\n        plt.show()\n\n        torch.save(\n            model.state_dict(),\n            os.path.join(args.save_dir, f\"{args.model_name}_dalle_last.pt\")\n        )\n\n    except KeyboardInterrupt:\n        print(f'What for did you stopped? Please change model_path to \/{args.save_dir}\/{args.model_name}_dalle_Failed_train.pt')\n        plt.plot(loss_logs)\n        plt.show()\n\n        torch.save(\n            model.state_dict(),\n            os.path.join(args.save_dir, f\"{args.model_name}_dalle_Failed_train.pt\")\n        )\n    except Exception as err:\n        print(f'Failed with {err}')\n\n\n# Test code from Nev\nfrom functools import reduce\nimport torch.nn.functional as F\nfrom rudalle.dalle.utils import exists, is_empty\nfrom einops import rearrange\n\n# idk why but this is necessary\n\n\nclass Layer(torch.nn.Module):\n    def __init__(self, x, f, *args, **kwargs):\n        super(Layer, self).__init__()\n        self.x = x\n        self.f = f\n        self.args = args\n        self.kwargs = kwargs\n\n    def forward(self, x):\n        return self.f(self.x(x, *self.args, **self.kwargs))\n\n\ndef forward(\n        self,\n        input_ids,\n        attention_mask,\n        return_loss=False,\n        use_cache=False,\n        gradient_checkpointing=False\n):\n    text = input_ids[:, :self.text_seq_length]\n    text_range = torch.arange(self.text_seq_length)\n    text_range += (self.vocab_size - self.text_seq_length)\n    text_range = text_range.to(self.device)\n    text = torch.where(text == 0, text_range, text)\n    # some hardcode :)\n    text = F.pad(text, (1, 0), value=2)\n    text_embeddings = self.text_embeddings(text) + \\\n        self.text_pos_embeddings(torch.arange(text.shape[1], device=self.device))\n\n    image_input_ids = input_ids[:, self.text_seq_length:]\n\n    if exists(image_input_ids) and not is_empty(image_input_ids):\n        image_embeddings = self.image_embeddings(image_input_ids) + \\\n            self.get_image_pos_embeddings(image_input_ids, past_length=0)\n        embeddings = torch.cat((text_embeddings, image_embeddings), dim=1)\n    else:\n        embeddings = text_embeddings\n    # some hardcode :)\n    if embeddings.shape[1] > self.total_seq_length:\n        embeddings = embeddings[:, :-1]\n\n    alpha = 0.1\n    embeddings = embeddings * alpha + embeddings.detach() * (1 - alpha)\n\n    attention_mask = attention_mask[:, :, :embeddings.shape[1], :embeddings.shape[1]]\n    t = self.transformer\n    layers = []\n    layernorms = []\n    if not layernorms:\n        norm_every = 0\n    else:\n        norm_every = len(t.layers) \/\/ len(layernorms)\n    for i in range(len(t.layers)):\n        layers.append(Layer(\n            t.layers[i],\n            lambda x:\n                x[0] * layernorms[i \/\/ norm_every][0] +\n                layernorms[i \/\/ norm_every][1] if norm_every and i % norm_every == 0 else x[0],\n            torch.mul(attention_mask, t._get_layer_mask(i)[:attention_mask.size(2), :attention_mask.size(3), ]),\n            use_cache=False\n        ))\n    if gradient_checkpointing:  # don't use this under any circumstances\n        # actually please do\n        # i just spent 3 hours debugging this\n        embeddings = torch.utils.checkpoint.checkpoint_sequential(layers, 8, embeddings)\n        transformer_output = embeddings\n        present_has_cache = False\n    else:\n        hidden_states = embeddings\n        for i in range(len(t.layers)):\n            mask = torch.mul(attention_mask, t._get_layer_mask(i)[:attention_mask.size(2), :attention_mask.size(3)])\n            hidden_states, present_has_cache = t.layers[i](hidden_states, mask, use_cache=use_cache)\n        transformer_output = hidden_states\n    transformer_output = self.transformer.final_layernorm(transformer_output)\n\n    logits = self.to_logits(transformer_output)\n    if return_loss is False:\n        return logits, present_has_cache\n\n    labels = torch.cat((text[:, 1:], image_input_ids), dim=1).contiguous().long()\n    logits = rearrange(logits, 'b n c -> b c n')\n\n    text_logits = logits[:, :self.vocab_size, :self.text_seq_length].contiguous().float()\n    image_logits = logits[:, self.vocab_size:, self.text_seq_length:].contiguous().float()\n\n    loss_text = F.cross_entropy(\n        text_logits,\n        labels[:, :self.text_seq_length])\n    loss_img = F.cross_entropy(\n        image_logits,\n        labels[:, self.text_seq_length:])\n\n    loss = (loss_text + self.loss_img_weight * loss_img) \/ (self.loss_img_weight + 1)\n    return loss, {'text': loss_text.data.detach().float(), 'image': loss_img}\n\ngc.collect()\ntorch.cuda.empty_cache()\n# Run training on model\nmodel = freeze(\n    model=model,\n    freeze_emb=False,\n    freeze_ln=False,\n    freeze_attn=True,\n    freeze_ff=True,\n    freeze_other=False\n)\n#freeze params to \ntorch_args.save_one = True\ntrain(model, torch_args, train_dataloader)\n","e70b3eb9":"gc.collect()\ntorch.cuda.empty_cache()\n#@title \n#@markdown TODO: TURN THIS PART INTO \"LOAD FROM PRETRAINED CHECKPOINT\"\n#load model \n\n#model_path = os.path.join('\/content\/'+args.save_path,f\"{args.model_name}_dalle_last.pt\")\n#model = get_rudalle_model('Malevich', pretrained=True, fp16=True, device=device)\n#model.load_state_dict(torch.load(model_path)) \n#print(f'Loaded from {model_path}')\nvae = get_vae().to(device)","7a0a8cb1":"#@title for image prompting (optional)\n\n#@markdown note: use absolute paths (\/content\/something.png)\nimage_prompt_path = \"out\/668.jpg\"  #@param {type: \"string\"}\n#@markdown in fractions\nimage_prompt_left = 0.45  #@param {type: \"integer\"}\nimage_prompt_top = 0.1  #@param {type: \"integer\"}","3f28c844":"class MyImagePrompts:\n\n    def __init__(self, pil_image, borders, vae, device='cpu', crop_first=False):\n        \"\"\"\n        Args:\n            pil_image (PIL.Image): image in PIL format\n            borders (dict[str] | int): borders that we croped from pil_image\n                example: {'up': 4, 'right': 0, 'left': 0, 'down': 0} (1 int eq 8 pixels)\n            vae (VQGanGumbelVAE): VQGAN model for image encoding\n            device (str): cpu or cuda\n            crop_first (bool): if True, croped image before VQGAN encoding\n        \"\"\"\n        self.device = device\n        img = self._preprocess_img(pil_image)\n        self.image_prompts_idx, self.image_prompts = self._get_image_prompts(img, borders, vae, crop_first)\n\n    def _preprocess_img(self, pil_img):\n        img = torch.tensor(np.array(pil_img.convert('RGB')).transpose(2, 0, 1)) \/ 255.\n        img = img.unsqueeze(0).to(self.device, dtype=torch.float32)\n        img = (2 * img) - 1\n        return img\n\n    def _get_image_prompts(self, img, borders, vae, crop_first=False):\n        crop_first = False\n        _, _, [_, _, vqg_img] = vae.model.encode(img)\n        \n        bs, vqg_img_h, vqg_img_w = vqg_img.shape\n        mask = torch.zeros(vqg_img_h, vqg_img_w)\n        if borders['up'] != 0:\n            mask[:borders['up'], :] = 1.\n        if borders['down'] != 0:\n            mask[-borders['down']:, :] = 1.\n        if borders['right'] != 0:\n            mask[:, -borders['right']:] = 1.\n        if borders['left'] != 0:\n            mask[:, :borders['left']] = 1.\n        mask = mask.reshape(-1).bool()\n\n        image_prompts = vqg_img.reshape((bs, -1))\n        image_prompts_idx = np.arange(vqg_img_h * vqg_img_w)\n        image_prompts_idx = set(image_prompts_idx[mask])\n\n        return image_prompts_idx, image_prompts","238a5d6d":"from rudalle.image_prompts import ImagePrompts\n\n\nif image_prompt_path:\n    image = Image.open(image_prompt_path).convert(\"RGB\").resize((128, 512))\n    show([image], 1)\n    image_prompt = MyImagePrompts(image, dict(\n        left=0,\n        up=32,\n        down=0, right=0\n    ), vae, device, crop_first=False)\nelse:\n    image_prompt = None","193b293b":"from einops import rearrange\nfrom functools import partial\nfrom math import sqrt\n\n\ndef decode(self, img_seq, w=16):\n    b, n = img_seq.shape\n    one_hot_indices = torch.nn.functional.one_hot(img_seq.to(device), num_classes=self.num_tokens).float()\n    z = (one_hot_indices @ self.model.quantize.embed.weight)\n    if w is None:\n        w = int(sqrt(n))\n    z = rearrange(z, 'b (h w) c -> b c h w', w=w)\n    img = self.model.decode(z)\n    img = (img.clamp(-1., 1.) + 1) * 0.5\n    return img\n\n\nvae.decode = partial(decode, vae)","37a5619a":"import math\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch import einsum\nfrom einops import rearrange\nfrom taming.modules.diffusionmodules.model import Encoder, Decoder\nfrom rudalle import utils\n\nfrom functools import partial\n\ndef slow_decode(self, img_seq):\n    b, n = img_seq.shape\n    one_hot_indices = torch.nn.functional.one_hot(img_seq, num_classes=self.num_tokens).float()\n    z = (one_hot_indices @ self.model.quantize.embed.weight)\n    z = rearrange(z, 'b (h w) c -> b c h w', h=token_height\n                  # int(sqrt(n))\n                  )\n    img = self.model.decode(z)\n    img = (img.clamp(-1., 1.) + 1) * 0.5\n    return img\n\nif do_resize:\n  vae.slow_decode = partial(slow_decode, vae)\n\n#@markdown <b>New image generation function for arbitrary resolution from @nev#4905\/[@apeoffire](https:\/\/twitter.com\/apeoffire)<\/b>\ndef slow_generate_images(text, tokenizer, dalle, vae, top_k, top_p, images_num, image_prompts=None, temperature=1.0, bs=8,\n                    seed=None, use_cache=True, w=32, h=48):\n    if seed is not None:\n        utils.seed_everything(seed)\n    vocab_size = dalle.get_param('vocab_size')\n    text_seq_length = dalle.get_param('text_seq_length')\n    image_seq_length = dalle.get_param('image_seq_length')\n    total_seq_length = dalle.get_param('total_seq_length')\n    device = dalle.get_param('device')\n    real = 32\n\n    text = text.lower().strip()\n    input_ids = tokenizer.encode_text(text, text_seq_length=text_seq_length)\n    pil_images, scores = [], []\n    cache = None\n    past_cache = None\n    try:\n        for chunk in more_itertools.chunked(range(images_num), bs):\n            chunk_bs = len(chunk)\n            with torch.no_grad():\n                attention_mask = torch.tril(torch.ones((chunk_bs, 1, total_seq_length, total_seq_length), device=device))\n                out = input_ids.unsqueeze(0).repeat(chunk_bs, 1).to(device)\n                grid = torch.zeros((h, w)).long().cuda()\n                has_cache = False\n                sample_scores = []\n                if image_prompts is not None:\n                    prompts_idx, prompts = image_prompts.image_prompts_idx, image_prompts.image_prompts\n                    prompts = prompts.repeat(chunk_bs, 1)\n                for idx in tqdm(range(out.shape[1], total_seq_length-real*real+w*h)):\n                    idx -= text_seq_length\n                    if image_prompts is not None and idx in prompts_idx:\n                        out = torch.cat((out, prompts[:, idx].unsqueeze(1)), dim=-1)\n                    else:\n                        y = idx \/\/ w\n                        x = idx % w\n                        x_from = max(0, min(w-real, x-real\/\/2))\n                        y_from = max(0, y-real\/\/2)\n                        outs = []\n                        xs = []\n                        for row in range(y_from, y):\n                            for col in range(x_from, x_from+real):\n                                outs.append(grid[row, col].item())\n                                xs.append((row, col))\n                        for col in range(x_from, x):\n                            outs.append(grid[y, col].item())\n                            xs.append((y, col))\n                        rev_xs = {v: k for k, v in enumerate(xs)}\n                        if past_cache is not None:\n                            cache = list(map(list, cache.values()))\n                            rev_past = {v: k for k, v in enumerate(past_cache)}\n                            for i, e in enumerate(cache):\n                                for j, c in enumerate(e):\n                                    t = cache[i][j]\n                                    t, c = t[..., :text_seq_length, :], t[..., text_seq_length:, :]\n                                    cache[i][j] = t\n                            cache = dict(zip(range(len(cache)), cache))\n                        past_cache = xs\n                        logits, cache = dalle(torch.cat((input_ids.to(device).ravel(),\n                                                            torch.from_numpy(np.asarray(outs)).long().to(device)),\n                                                            dim=0).unsqueeze(0), attention_mask,\n                                                cache=cache, use_cache=True, return_loss=False)\n                        logits = logits[:, :, vocab_size:].view((-1, logits.shape[-1] - vocab_size))\n                        logits \/= temperature\n                        filtered_logits = transformers.top_k_top_p_filtering(logits, top_k=top_k, top_p=top_p)\n                        probs = torch.nn.functional.softmax(filtered_logits, dim=-1)\n                        sample = torch.multinomial(probs, 1)\n                        sample_scores.append(probs[torch.arange(probs.size(0)), sample.transpose(0, 1)])\n                        sample, xs = sample[-1:], xs[-1:]\n                        grid[y, x] = sample.item()\n                codebooks = grid.reshape((1, -1))\n                images = slow_decode(vae, codebooks)\n                pil_images += utils.torch_tensors_to_pil_list(images)\n    except Exception as e:\n        print(e)\n        pass\n    except KeyboardInterrupt:\n        pass\n    return pil_images, scores\n\n\ndef aspect_crop(image_path, desired_aspect_ratio):\n    \"\"\"\n    Return a PIL Image object cropped to desired aspect ratio\n    :param str image_path: Path to the image to crop\n    :param str desired_aspect_ratio: desired aspect ratio in width:height format\n    \"\"\"\n\n    # compute original aspect ratio\n    image = Image.open(image_path)\n    width, height = image.size\n    original_aspect = float(width) \/ float(height)\n\n    # convert string aspect ratio into float\n    w, h = map(lambda x: float(x), desired_aspect_ratio.split(':'))\n    computed_aspect_ratio = w \/ h\n    inverse_aspect_ratio = h \/ w\n\n    if original_aspect < computed_aspect_ratio:\n        # keep original width and change height\n        new_height = math.floor(width * inverse_aspect_ratio)\n        height_change = math.floor((height - new_height) \/ 2)\n        new_image = image.crop((0, height_change, width, height - height_change))\n        return new_image\n    elif original_aspect > computed_aspect_ratio:\n        # keep original height and change width\n        new_width = math.floor(height * computed_aspect_ratio)\n        width_change = math.floor((width - new_width) \/ 2)\n        new_image = image.crop((width_change, 0, width - width_change, height))\n        return new_image\n    elif original_aspect == computed_aspect_ratio:\n        return image\n","d2555bd7":"#@title Your images will emerge here\n#@markdown The output will be saved in the session structure under \/output\/\n#@markdown <br>ONCE YOUR CHECKPOINT IS FINE TUNED YOU CAN PRESS THIS BUTTON MULTIPLE TIMES FOR MORE IMAGES. YOU DON'T NEED TO RESTART EACH TIME.\nimport numpy as np\nimport gc\ngc.collect()\ntorch.cuda.empty_cache()\n\n\npil_images = []\nscores = []\nrepeat = 1\nrows = 2\ninsert = 0\namt = 3\nif skip_gt:\n    amt = 4\nif low_mem:\n    repeat = 3\n    if skip_gt:\n        repeat = 4\n    amt = 1\nif image_amount == 9:\n    repeat = 2\n    rows = 3\n    insert = 4\n    amt = 4\n    if low_mem:\n        repeat = 8\n        amt = 1\nelif image_amount == 25:\n    repeat = 6\n    rows = 5\n    insert = 12\n    amt = 4\n    if low_mem:\n        repeat = 24\n        amt = 1\nelif image_amount == 1:\n    repeat = 1\n    rows = 1\n    amt = 1\n    skip_gt = True\n    insert = 0\nelse:\n    repeat = 16\n    rows = int(np.sqrt(image_amount))\n    insert = 12\n    amt = 4\n\n\ndef crop_center(pil_img, crop_width, crop_height):\n    img_width, img_height = pil_img.size\n    return pil_img.crop((\n        (img_width - crop_width) \/\/ 2,\n        (img_height - crop_height) \/\/ 2,\n        (img_width + crop_width) \/\/ 2,\n        (img_height + crop_height) \/\/ 2\n    ))\n\n\ndef crop_max_square(pil_img):\n    return crop_center(pil_img, min(pil_img.size), min(pil_img.size))\n\n\ndef generate_images_amt(images_num):\n    if do_resize:\n        if image_prompt is not None:\n            raise NotImplementedError\n        _pil_images, _scores = slow_generate_images(\n            input_text, tokenizer, model, vae,\n            top_k=2048, images_num=images_num, top_p=generation_p,\n            w=token_width, h=token_height\n        )\n    else:            \n      _pil_images, _scores = generate_images(\n            input_text, tokenizer, model, vae, # bs=2,\n            top_k=2048, images_num=images_num, top_p=generation_p,\n            image_prompts=image_prompt\n        )\n    return _pil_images\n\n\ndef save_pil_images(pil_images):\n    for k in range(len(pil_images)):\n        output_name = f\"lg{k + len(onlyfiles)}_{original_folder}.png\"\n        pil_images[k].save(os.path.join(\"output\", output_name))\n\nfor i in range(collage_amount):\n    try:\n        for j in range(repeat):\n            to_add = generate_images_amt(amt)\n            show(to_add, 2)\n            pil_images += to_add\n        if skip_gt and image_amount != 4:\n            if image_amount != 1:\n                pil_images += generate_images_amt(1)\n    except KeyboardInterrupt:\n        pass\n    \n    if do_stretchsize:\n        # ESRGAN Upscaling\n        pil_images = super_resolution(pil_images, ss_realesrgan)\n        for j in range(len(pil_images)):\n            pil_images[j] = pil_images[j].resize((st_width, st_height))\n\n    onlyfiles = next(os.walk('output'))[2]\n    file_to_train = random.choice(input_files)\n    save_pil_images(pil_images)\n\n    if skip_gt is False:\n#         if do_resize:\n#             if do_stretchsize:\n#                 raise NotImplementedError(\"Stretchsize and resize not simultaneously supported\")\n#             else:\n#                 aspect_ratio = (token_width \/ token_height)\n#                 with Image.open(file_to_train) as im:\n#                     # Provide the target width and height of the image\n#                     to_insert = aspect_crop(im, aspect_ratio).resize((width, height), Image.LANCZOS)\n#         else:\n#             if do_stretchsize:\n#                 with Image.open(original_file) as im:\n#                     # Provide the target width and height of the image\n#                     to_insert = im.copy()\n#             else:\n#                 with Image.open(file_to_train) as im:\n#                     # Provide the target width and height of the image\n#                     to_insert = crop_max_square(im).resize((256, 256), Image.LANCZOS)\n        pil_images.append(to_insert.convert('RGB'))\n\n    if rurealesrgan_multiplier != \"x1\":\n        pil_images = super_resolution(pil_images, realesrgan)\n        save_pil_images(pil_images)\n    show(pil_images, rows)\n\n    pil_images = []\n    scores = []\n\ngc.collect()","7b3b24a9":"# patch\ndef show_new(pil_images, nrow=4, size=14, save_dir=None, show=True, savefig=None, dpi=100):\n    \"\"\"\n    :param pil_images: list of images in PIL\n    :param nrow: number of rows\n    :param size: size of the images\n    :param save_dir: dir for separately saving of images, example: save_dir='.\/pics'\n    \"\"\"\n    if save_dir is not None:\n        os.makedirs(save_dir, exist_ok=True)\n        count = len(glob(join(save_dir, 'img_*.png')))\n        for i, pil_image in enumerate(pil_images):\n            pil_image.save(join(save_dir, f'img_{count+i}.png'))\n\n    imgs = torchvision.utils.make_grid(utils.pil_list_to_torch_tensors(pil_images), nrow=nrow)\n    if not isinstance(imgs, list):\n        imgs = [imgs.cpu()]\n    fix, axs = plt.subplots(ncols=len(imgs), squeeze=False, figsize=(size, size))\n    for i, img in enumerate(imgs):\n        img = img.detach()\n        img = torchvision.transforms.functional.to_pil_image(img)\n        if save_dir is not None:\n            count = len(glob(join(save_dir, 'group_*.png')))\n            img.save(join(save_dir, f'group_{count+i}.png'))\n        if show:\n            axs[0, i].imshow(np.asarray(img))\n            axs[0, i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[])\n    if savefig is not None:\n        fix.savefig(savefig, dpi=dpi, pad_inches=0, transparent=True, bbox_inches=\"tight\")\n    if show:\n        fix.show()\n        plt.show()\n    return fix","6dfb750e":"row = 26\nsize = 1\nimages = []\nfor i in os.listdir('output'):\n    img = Image.open(f\"output\/{i}\")\n    images.append(img  # .crop((img.size[0] \/\/ 2, int(img.size[1] * color_reg), img.size[0], img.size[1]))\n                  .convert(\"RGB\"))\nshow_new([x for x in images if x.size == (256, 1024)], row, savefig=\"grid.png\", dpi=250)\nNone","e5bd7732":"Image.open(\"grid.png\")","7caf08df":"## Finetuning","91d12073":"# Changelog\n\nv1.1 -> v1.3: 12\/18\/21\n\n*   Added Stretchsizing as generation parameter. This will stretch out your original image(s) into a square, train on that, and then stretch your output back into the correct aspect ratio. Currently does not work with resizing. Stretchsizing uses the first image in the folder alphanumerically as its aspect ratio parent.\n*   Added Confidence as generation parameter. This is the p value, for those that know what that means. If you don't know what that means, just leave it on Low.\n*   Lots and lots of code cleanup courtesy of @giovan_h. \n*   No more multi-image tuning - now, image getting uses glob formatting. This should hopefull resolve all the num_samples errors. To get every image in a folder, use `foldername\/*`.\n*   Added upscaling using rudall-e's built in RealESRGan upscaler.\n*   Your generated zip file at the end now includes a text file that has all your parameters.\n\n","3357ae24":"## Some definitions and boilerplate","cb734854":"# License\nLooking Glass; Making ruDALL-E fine tuning quick and painless.<br>\nCopyright (C) 2021 Bearsharktopus Studios\n\nThis program is free software: you can redistribute it and\/or modify\nit under the terms of the <b>GNU Affero General Public License<\/b> as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\n![2021-12-03 15_31_06-GNU Affero General Public License v3 (AGPL-3.0) Explained in Plain English - TLD.png](https:\/\/media.discordapp.net\/attachments\/837903223867047946\/916428453547474944\/2021-12-03_15_31_06-GNU_Affero_General_Public_License_v3_AGPL-3.0_Explained_in_Plain_English_-_TLD.png?width=972&height=540)","4b8e3a0c":"## Generation","2cd6f435":"**We gonna generate some <strike>sneakers<\/strike> EVERYTHING**","855f4bc9":"# Terms of Use\n\nAny unauthorized use of these images for profit, monetary gains, and\/or commercial means violates the terms of use of this service. \n\n<b>Due to the nature of the reconfiguring of images generated by Looking Glass, this service is not copyright friendly. Use of these generated images from copyrighted material can open you to litigation by the copyright holder(s).<\/b>","e350ef47":"**Original notebook by Sber AI, squishing down and translation for English use as a one-shot fine tuner done by Bearsharktopus Studios ([@ai_curio](https:\/\/twitter.com\/ai_curio) on twitter, [reachartwork](https:\/\/reachartwork.tumblr.com\/) on tumblr).**\n\nThanks to [@criminygiblet](https:\/\/twitter.com\/criminygiblet) for the notebook name, [@danielrussruss](https:\/\/twitter.com\/danielrussruss) for assistance with general questions, [@giovan_h](https:\/\/twitter.com\/giovan_h) and [@Grump_AI](https:\/\/twitter.com\/Grump_AI) for code and cleanup assistance, [@MichaelFriese10](https:\/\/twitter.com\/MichaelFriese10) for the original idea, and my boyfriend for being the best boyfriend in the world.\n\n**TECH SUPPORT DISCORD: https:\/\/discord.gg\/EjPGKq6rmN**<br>\n**SUPPORT THE DEV: https:\/\/www.patreon.com\/bearsharktopus**","be8d8ca2":"# INSTRUCTIONS\n\\#1: Upload your image to the Google Colab file structure, like this:<br>![20.png](https:\/\/media.discordapp.net\/attachments\/837903223867047946\/916770154656976926\/2021-12-04_14_17_00-Looking_Glass_-_Colaboratory_and_33_more_pages_-_Personal_-_Microsoft_Edge.png)<br><br>\n\\#2: Put your filename into the parameters, like this, and set the other parameters:<br>![21.png](https:\/\/media.discordapp.net\/attachments\/837903223867047946\/916770559398924349\/2021-12-04_14_18_34-Looking_Glass_-_Colaboratory_and_33_more_pages_-_Personal_-_Microsoft_Edge.png)<br><br>\n\\#3: Click \"Runtime\", then \"Restart and Run All\". You will need to do this every time you'd like to generate a new set of images, or it will break. <br>![22.png](https:\/\/media.discordapp.net\/attachments\/837903223867047946\/916770919974858782\/2021-12-04_14_19_42-Looking_Glass_-_Colaboratory_and_33_more_pages_-_Personal_-_Microsoft_Edge.png)<br><br>\n\\#4: **Wait!** Your images will come out at the very bottom shortly.","aeeafc8a":"**ruDALL-E is Copyright 2021 Sber AI and licensed under Apache version 2.0**\n\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0","4000982e":"## Setup","64ccd51b":"## Parameters","e3927a14":"that's it"}}