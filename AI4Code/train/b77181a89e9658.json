{"cell_type":{"873cacc3":"code","ea935c37":"code","045cfb7d":"code","9ee60757":"code","ae5daddb":"code","97865960":"code","a3b425bd":"code","864ed468":"code","b0823394":"code","f320dd5b":"code","754a5425":"code","b9c21bc4":"code","723cbd9b":"code","a49d418b":"code","3b9e1dd5":"code","34644362":"markdown","7c0b8949":"markdown","c3574f4a":"markdown","9947ee15":"markdown","641fca58":"markdown","0d35a60c":"markdown","2adb979a":"markdown"},"source":{"873cacc3":"#import libraries we will be using\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom sklearn import *\nfrom sklearn.linear_model import *","ea935c37":"#dataframe generation\ndf = pd.read_csv(\"..\/input\/baseball\/baseball.csv\")\ndf.head()","045cfb7d":"#RD column creation (difference between RS and RA)\ndf['RD'] = df['RS'] - df['RA']\n\n#filtering data only including data from before 2002 (movie year)\ndf = df[df.Year < 2002]\n\ndf.head()","9ee60757":"sns.lmplot(x = \"W\", y = \"RS\", fit_reg = False, hue = \"Playoffs\", data=df,height=7, aspect=1.5)\nplt.xlabel(\"Wins\", fontsize = 15)\nplt.ylabel(\"Runs Scored\", fontsize = 15)\nplt.axvline(99, 0, 1, color = \"Black\", ls = '--')\nplt.show()","ae5daddb":"x = np.array(df.RD)\ny = np.array(df.W)\nslope, intercept = np.polyfit(x, y, 1)\nabline_values = [slope * i + intercept for i in x]\nplt.figure(figsize=(10,8))\nplt.scatter(x, y)\nplt.plot(x, abline_values, 'r')\nplt.title(\"Slope = %s\" % (slope), fontsize = 12)\nplt.xlabel(\"Run Difference\", fontsize =20)\nplt.ylabel(\"Wins\", fontsize = 20)\nplt.axhline(99, 0, 1, color = \"k\", ls = '--')\nplt.show()","97865960":"corrcheck = df[['RD', 'W', 'Playoffs']].copy()\ng = sns.pairplot(corrcheck, hue = 'Playoffs',vars=[\"RD\", \"W\"])\ng.fig.set_size_inches(14,10)","a3b425bd":"corrcheck.corr(method='pearson')","864ed468":"podesta = df[['OBP','SLG','BA','RS']]\npodesta.corr(method='pearson')","b0823394":"#deleting NA values from dataframe\nmoneyball = df.dropna()","f320dd5b":"#we use RD as the target column\nX = moneyball.iloc[:,6:9]\ny = moneyball.iloc[:,-1]\n\n#apply SelectKBest class to get best features\nbestfeatures = SelectKBest(score_func=chi2, k=3)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\nprint('Partial results')\nprint(dfscores)\nprint(dfcolumns)\n\n#concat two dataframes for better visualization\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Feature','Score']\nprint('Final results')\nprint(featureScores.nlargest(3,'Score'))","754a5425":"X = moneyball.iloc[:,6:9]  #independent columns\ny = moneyball.iloc[:,-1]    #target column\n\nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_)\n\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(3).plot(kind='barh', figsize = (12,8))\nplt.xlabel(\"Importance\", fontsize = 20)\nplt.ylabel(\"Statistic\", fontsize = 20)","b9c21bc4":"df.head()","723cbd9b":"z = df[['OBP','SLG']].values\nk = df[['RS']].values\n\nruns_model = LinearRegression()\n\nruns_model.fit(z,k)\n\nprint(runs_model.intercept_)\nprint(runs_model.coef_)\n\n#Prediction\nprint('Prediction for \"Runs Scored\":',runs_model.predict([[0.339,0.430]]))","a49d418b":"t = moneyball[['OOBP','OSLG']].values\nv = moneyball[['RA']].values\n\nruns_allowed_model = LinearRegression()\n\nruns_allowed_model.fit(t,v) \n\nprint(runs_allowed_model.intercept_)\nprint(runs_allowed_model.coef_)\n\n#Prediction\nprint('Prediction for \"Runs Allowed\":',runs_allowed_model.predict([[0.307,0.373]]))","3b9e1dd5":"m = moneyball[['RD']].values\nn = moneyball[['W']].values\n\nwins_model = LinearRegression()\nwins_model.fit(m,n)\n \nprint(wins_model.intercept_)\nprint(wins_model.coef_)\n\n#Prediction\nprint('Prediction for \"Wins\":',wins_model.predict([[183]]))","34644362":"We can say that our Wins model takes the form:\n\nW = 84.092 + (0.085 \u00d7(RD))","7c0b8949":"# Model Generation","c3574f4a":"According to DePodesta, the A\u2019s needed 99 wins in the regular season in order to make playoffs. We can create a plot to visualise this using Seaborn, which is a data visualisation library based on matplotlib.","9947ee15":"# [Linear Regression] - Moneyball\n\nIn 2011, the film \u201cMoneyball\u201d was released. The film \u2014 adapted from the book by Micheal Lewis, is based on a true story, and follows Oakland A\u2019s general manager Billy Beane, who, after losing his star players, must find a way to reach the playoffs whilst faced with a tight budget. Enter Paul DePodesta, an Ivy League graduate, who, using Sabermetrics, is able to identify the \u2018bargain\u2019 players in order to build the team that go on the A\u2019s notorious 20 game win streak and see them finishing 1st in the regular season, throwing the art of sabermetrics into the limelight.\n\nIn this notebook, we will attempt to recreate pieces of DePodestas statistical analysis, using linear regression in python to model the 2002 regular season results.\n\nThe **main attributes** of the provided dataset that we need to be concerned with are:\n* RS \u2014 Runs Scored\n* RA \u2014 Runs Allowed\n* W \u2014 Wins\n* OBP \u2014 On Base Percentage\n* SLG \u2014 Slugging Percentage\n* BA \u2014 Batting Average\n* Playoffs \u2014 Whether a team made it to playoffs or not\n* OOBP \u2014 Opponent\u2019s On Base Percentage\n* OSLG \u2014 Opponents Slugging Percentage","641fca58":"We can then say that our Runs Allowed model takes the form:\n\nRA = -775.162 + (3225.004 \u00d7(OOBP)) + (1106.504 \u00d7(OSLG))","0d35a60c":"Some of the attributes are self explanatory, however there are a few of them that require some explaining:\n* **OBP \u2014 On Base Percentage:** This is a statistic measuring how frequently a batter reaches base, it does not take into account how far the batter runs i.e. third base.\n* **SLG \u2014 Slugging Percentage:** A measure of the batting \u2018Productivity\u2019, in simple terms, it measures how far a batter makes it when they hit the ball.\n* **BA \u2014 Batting Average:** Defined by the number of hits divided by at bats, measures how likely a batter is to hit a ball when pitched. Again, does not take into account how far the batter runs.\n\nIn the movie, DePodesta notices that batters are being overvalued by their BA attribute, while being completely underestimated based on their OBP and SLG attributes. Probably, this was happening as the process of recruiting was completely biased on the scout perception.","2adb979a":"We can then say that our Runs Scored model takes the form:\n\nRS = -804.627 + (2737.768\u00d7(OBP)) + (1584.909\u00d7(SLG))"}}