{"cell_type":{"6c3a5161":"code","a4ed789f":"code","e27db525":"code","4aac2d32":"code","d6295312":"code","c373dc4a":"code","4c7244e5":"code","ccc06c38":"code","c206bb21":"code","045b3528":"code","85a74311":"code","1faf2bc5":"code","0cbe6c73":"code","d0b77e8d":"code","1617fd97":"code","55b826ec":"code","3a9b1094":"code","ef835759":"code","2e3db128":"code","c013c4f5":"code","82d82478":"code","4d6688c9":"code","2232d6d4":"code","15e3283f":"code","6ee7d486":"code","28c9dde3":"code","f9dc6def":"code","0bb120b7":"code","60262a5d":"code","48c69b60":"code","83b0e298":"code","dfaaa494":"code","8e921be7":"code","7b407e96":"code","c1fa0d5d":"code","a08a49f6":"code","beb104f5":"code","69360339":"code","4885de2c":"code","f1bf9f58":"code","6b40f55c":"code","5f0feefa":"code","5fd41a41":"code","975e0f6c":"code","c97b3fd2":"code","27616960":"code","3361d2d7":"code","98291825":"code","381684b3":"code","ff7425b7":"code","506a5b00":"code","217d9d3b":"code","504b284f":"code","424e6721":"code","0938df72":"code","f62075c9":"code","7f89ee9e":"code","6b614a86":"code","f82bd717":"code","d32aa8b4":"code","2acb2ba9":"code","2798777b":"code","538c8254":"code","9fdb891c":"code","43ebfaf5":"code","0b25e1f8":"code","a3f761b9":"code","774afdeb":"code","15e246c5":"code","56e7a65e":"code","1ccc23c2":"code","69c113c4":"code","fbb76800":"code","d8b5ed49":"code","628203f2":"code","c5e698f3":"code","27580f42":"code","83b33e9d":"code","cef4d81c":"code","80108e1f":"code","fa6e3fa9":"code","7d6bcedc":"code","c10a4818":"code","c4c3833c":"code","7bfc7fb6":"code","a0ee99aa":"code","627ef6bc":"code","6bc9500f":"code","d478985d":"code","f356e0ce":"code","a9e41080":"code","40b90e98":"code","f20bb944":"code","dccc377c":"code","59e28d3b":"code","55e32ec9":"code","ac28836e":"code","3079c1a3":"code","9bdebabf":"code","48d0ea76":"code","21acb63a":"code","5878e5ee":"code","e0dcb32f":"code","bb9e479c":"code","3069dd14":"code","5bb043de":"code","bbd037f3":"code","80d3658e":"code","e088c320":"code","55d144ed":"code","55451ecc":"code","50d07099":"code","8b627870":"code","cdbe25fa":"code","8f962a1b":"code","0f4dec54":"code","53244997":"code","662bf27a":"code","3c47292e":"code","8eb72fd5":"code","8547b525":"code","3dd343a2":"code","2fbb8da7":"code","989dad1d":"code","1a053dee":"code","3856c20a":"code","4214ae02":"code","a98d4161":"code","9ca9abcd":"code","5afa7ace":"code","00289465":"code","11753454":"code","22fab339":"code","e1790768":"code","9fe531f4":"code","a6e065aa":"code","d28ac36e":"code","b2d0afcf":"code","c7e5a288":"code","42bf589f":"code","fcef9358":"code","3d8896be":"code","bf829733":"code","c5e9d2e1":"code","83150500":"code","5ba66261":"code","d7e312e7":"code","992f4897":"code","ba73e36a":"code","7bf56edf":"code","1fe90530":"code","f686faaa":"code","2ea9b884":"code","a97ff2e3":"code","004d78cd":"code","c35deac8":"code","8fb0da5d":"code","708266e3":"code","87ab9234":"code","c8f0fb04":"code","7899f3bc":"code","0a76d38f":"markdown","7fb610bd":"markdown","e3daf932":"markdown","3a1ee58b":"markdown","c8722382":"markdown","6451358f":"markdown","c6efbe99":"markdown","0bdccd8b":"markdown","2934be40":"markdown","00595ce1":"markdown","9559aa13":"markdown","87943a7e":"markdown","d5b76dd7":"markdown","8b2e64e8":"markdown","8ade2282":"markdown","fec07467":"markdown","ddc3f90d":"markdown","3b8b47a8":"markdown","6cf88f9a":"markdown","3e55ca46":"markdown","17b57081":"markdown","91c6fca6":"markdown","4924e9d8":"markdown","9a0637ea":"markdown","65fc7b8d":"markdown","262ed370":"markdown","80e81214":"markdown","64391785":"markdown","a6f460a4":"markdown","0bc0abf3":"markdown","c628d52b":"markdown","d82a3ee7":"markdown","0e686abe":"markdown","125d7463":"markdown","932cbbdb":"markdown","0b75a0b8":"markdown","38bbe2a5":"markdown","06edcda6":"markdown","fe455bec":"markdown","1f8a8a7c":"markdown","b1f70925":"markdown","6be4f184":"markdown","79faa46e":"markdown","f9fa00f6":"markdown","209df54d":"markdown","739ecda5":"markdown","e3c7b2eb":"markdown","ff2b0607":"markdown","21f8719b":"markdown","60af4e56":"markdown","6ada32b3":"markdown","59c3a131":"markdown","5f91d10b":"markdown","f255d4e5":"markdown","ce29e993":"markdown","10d87b1c":"markdown","634e31fd":"markdown","074f2e27":"markdown","4d0d917b":"markdown","fa8bfe7a":"markdown","bfda0025":"markdown","39e048f0":"markdown","094813f0":"markdown","dd90bc4b":"markdown","f40dfd36":"markdown","860e5211":"markdown","d5c48fe3":"markdown","8eb6964b":"markdown","2532a18a":"markdown","f6e00ba2":"markdown","7dab435a":"markdown","a31721b9":"markdown","d3f54b82":"markdown","19d84aa0":"markdown","422c35ce":"markdown","dc8e6a59":"markdown","ce53b17e":"markdown","b15f4883":"markdown","0995508a":"markdown","b8df54be":"markdown","6e99ca29":"markdown","0dbdb236":"markdown","8b67a23c":"markdown","6e20f1b3":"markdown","8ed471e9":"markdown","7d88c1a6":"markdown","9a74f7af":"markdown","4861a1e8":"markdown","798953aa":"markdown","ebccc18d":"markdown","4c88dde5":"markdown","efeec4bb":"markdown","b98b21e9":"markdown","c1712dce":"markdown","0c3d8f34":"markdown","e2d4e5b7":"markdown","db268f7e":"markdown","6a045764":"markdown","893d2d27":"markdown","496dc97f":"markdown","59aa297b":"markdown","4d3f76fc":"markdown","0c50283a":"markdown","ebbd6ebe":"markdown","8fad12a4":"markdown","d57211dd":"markdown","44278672":"markdown","e9b266f7":"markdown","80f30242":"markdown","6c300784":"markdown","2d5a6bf4":"markdown","26cf7584":"markdown","a98b6276":"markdown","37e09b20":"markdown","47d54c30":"markdown","390103d8":"markdown","96d747b8":"markdown","1d5a85ce":"markdown","46e908d3":"markdown","12622529":"markdown","48a6f952":"markdown","d9efc204":"markdown","5caff915":"markdown","24561385":"markdown","00c6f109":"markdown","d75bac74":"markdown","d438620a":"markdown","f687ad6d":"markdown","55912e27":"markdown","33caf117":"markdown","b1aac4fc":"markdown","7f0b273c":"markdown","5d3c52eb":"markdown","a23b8626":"markdown","97a177f3":"markdown","501b2305":"markdown","8ed6cb14":"markdown","bcc1b9fe":"markdown","e4dfaa6d":"markdown","ab96615f":"markdown","314e48cb":"markdown","99dee84a":"markdown","7532ffc0":"markdown","107184c3":"markdown","123992ab":"markdown","5d4dd839":"markdown","10bcf961":"markdown","0e906590":"markdown","3d60d943":"markdown","352e2f8e":"markdown","4d342391":"markdown","2cbb9866":"markdown","c82c07fc":"markdown","ee66068c":"markdown","f4686485":"markdown","544f1a05":"markdown","3d3f9ecf":"markdown","7ee5ce1f":"markdown","590b88b5":"markdown","456e7f9b":"markdown","8d2fcc50":"markdown","5ec6ebe6":"markdown","d083cbfa":"markdown","3b3b0cb6":"markdown","dbc3fcf5":"markdown","4c15fb49":"markdown"},"source":{"6c3a5161":"DATA_PATH ='..\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip'","a4ed789f":"# Files in dataset\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e27db525":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport scipy as sp\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n%matplotlib inline\nmpl.style.use('ggplot')\nsns.set(style='whitegrid')\n\n# scaling and train test split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# pandas options\npd.set_option('display.max_colwidth', 1000, 'display.max_rows', None, 'display.max_columns', None)\npd.set_option(\"display.precision\", 4) # Show numbers only with 2 decimal places\n\n# machine learning algorithm\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\n\n# creating a model\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\nfrom tensorflow.keras.constraints import max_norm\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model\n\n# evaluation on test data\nfrom sklearn.metrics import classification_report,confusion_matrix\n","4aac2d32":"# Create dataframe from dataset file\nloans = pd.read_csv(DATA_PATH, compression='gzip', low_memory=False, index_col=0)\nloans.head()","d6295312":"missing_fractions = loans.isnull().mean().sort_values(ascending=False)\nmissing_fractions.head(10)","c373dc4a":"plt.figure(figsize=(6,3), dpi=90)\nmissing_fractions.plot.hist(bins=20)\nplt.title('Histogram of Feature Incompleteness')\nplt.xlabel('Fraction of data missing')\nplt.ylabel('Feature count')","4c7244e5":"drop_list = sorted(list(missing_fractions[missing_fractions > 0.3].index))\nprint(drop_list)\nprint(\"\\n\\n Drop Features: \", len(drop_list))","ccc06c38":"# Drop these features\nloans.drop(labels=drop_list, axis=1, inplace=True)","c206bb21":"loans.shape","045b3528":"print(sorted(loans.columns))","85a74311":"keep_list = ['addr_state', 'annual_inc', 'application_type', 'dti', 'earliest_cr_line', 'emp_length', 'emp_title', 'fico_range_high', 'fico_range_low', 'grade', 'home_ownership', 'id', 'initial_list_status', 'installment', 'int_rate', 'issue_d', 'loan_amnt', 'loan_status', 'mort_acc', 'open_acc', 'pub_rec', 'pub_rec_bankruptcies', 'purpose', 'revol_bal', 'revol_util', 'sub_grade', 'term', 'title', 'total_acc', 'verification_status', 'zip_code']\nprint(\"Keep features: \", len(keep_list))","1faf2bc5":"drop_list = [col for col in loans.columns if col not in keep_list]\nprint(drop_list)\n\nprint(\"\\n\\nNumber of features needed to be dropped: \",len(drop_list))","0cbe6c73":"loans.drop(labels=drop_list, axis=1, inplace=True)\nloans.shape","d0b77e8d":"print(\"Records: \", loans.shape[0], \"\\nFeatures: \", loans.shape[1])\nprint(\"\\nInformation of Dataset\\n-------\")\nloans.info()","1617fd97":"loans.describe(include=np.object)","55b826ec":"# Target Variable\nloans['loan_status'].value_counts(dropna=False)","3a9b1094":"loans = loans.loc[loans['loan_status'].isin(['Fully Paid', 'Charged Off'])]","ef835759":"# Categories in percentage\nloans['loan_status'].value_counts(normalize=True, dropna=False)*100","2e3db128":"def plot_var(col_name, full_name, continuous):\n    \"\"\"\n    Visualize a variable with and without faceting on the loan status.\n    - col_name is the variable name in the dataframe\n    - full_name is the full variable name\n    - continuous is True if the variable is continuous, False otherwise\n    \"\"\"\n    f, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12,3), dpi=90)\n    \n    # Plot without loan status\n    if continuous:\n        sns.distplot(loans.loc[loans[col_name].notnull(), col_name], kde=False, ax=ax1)\n    else:\n        sns.countplot(loans[col_name], order=sorted(loans[col_name].unique()), color='#5975A4', saturation=1, ax=ax1)\n    ax1.set_xlabel(full_name)\n    ax1.set_ylabel('Count')\n    ax1.set_title(full_name)\n\n    # Plot with loan status\n    if continuous:\n        sns.boxplot(x=col_name, y='loan_status', data=loans, ax=ax2)\n        ax2.set_ylabel('')\n        ax2.set_title(full_name + ' by Loan Status')\n    else:\n        charge_off_rates = loans.groupby(col_name)['loan_status'].value_counts(normalize=True).loc[:,'Charged Off']\n        sns.barplot(x=charge_off_rates.index, y=charge_off_rates.values, color='#5975A4', saturation=1, ax=ax2)\n        ax2.set_ylabel('Fraction of Loans Charged-off')\n        ax2.set_title('Charge-off Rate by ' + full_name)\n    ax2.set_xlabel(full_name)\n    \n    plt.tight_layout()","c013c4f5":"print(list(loans.columns))","82d82478":"loans['id'].describe()","4d6688c9":"loans.drop('id', axis=1, inplace=True)","2232d6d4":"loans['loan_amnt'].describe()","15e3283f":"plot_var('loan_amnt', 'Loan Amount', continuous=True)","6ee7d486":"loans.groupby('loan_status')['loan_amnt'].describe()","28c9dde3":"loans['term'].value_counts(dropna=False)","f9dc6def":"loans['term'] = loans['term'].apply(lambda s: np.int8(s.split()[0]))\nloans['term'].value_counts(normalize=True)","0bb120b7":"loans.groupby('term')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off']","60262a5d":"# Let's remove % percent sign from `int_rate` and convert it into `float`\nloans.int_rate = loans.int_rate.map(lambda x: x.replace('%','')).astype(np.float64)","48c69b60":"loans['int_rate'].describe()","83b0e298":"plot_var('int_rate', 'Interest Rate', continuous=True)","dfaaa494":"loans.groupby('loan_status')['int_rate'].describe()","8e921be7":"loans['installment'].describe()","7b407e96":"plot_var('installment', 'Installment', continuous=True)","c1fa0d5d":"loans.groupby('loan_status')['installment'].describe()","a08a49f6":"print(sorted(loans['grade'].unique()))","beb104f5":"print(sorted(loans['sub_grade'].unique()))","69360339":"loans.drop('grade', axis=1, inplace=True)","4885de2c":"plot_var('sub_grade', 'Subgrade', continuous=False)","f1bf9f58":"loans['emp_title'].describe()","6b40f55c":"loans.drop(labels='emp_title', axis=1, inplace=True)","5f0feefa":"loans['emp_length'].value_counts(dropna=False).sort_index()","5fd41a41":"loans['emp_length'].replace(to_replace='10+ years', value='10 years', inplace=True)","975e0f6c":"loans['emp_length'].replace('< 1 year', '0 years', inplace=True)","c97b3fd2":"def emp_length_to_int(s):\n    if pd.isnull(s):\n        return s\n    else:\n        return np.int8(s.split()[0])","27616960":"loans['emp_length'] = loans['emp_length'].apply(emp_length_to_int)","3361d2d7":"loans['emp_length'].value_counts(dropna=False).sort_index()","98291825":"plot_var('emp_length', 'Employment Length', continuous=False)","381684b3":"loans.drop('emp_length', axis=1, inplace=True)","ff7425b7":"loans['home_ownership'].value_counts(dropna=False)","506a5b00":"loans['home_ownership'].replace(['NONE', 'ANY'], 'OTHER', inplace=True)","217d9d3b":"loans['home_ownership'].value_counts(dropna=False)","504b284f":"plot_var('home_ownership', 'Home Ownership', continuous=False)","424e6721":"loans.groupby('home_ownership')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off']","0938df72":"loans['annual_inc'].describe()","f62075c9":"loans['log_annual_inc'] = loans['annual_inc'].apply(lambda x: np.log10(x+1))","7f89ee9e":"loans.drop('annual_inc', axis=1, inplace=True)","6b614a86":"loans['log_annual_inc'].describe()","f82bd717":"plot_var('log_annual_inc', 'Log Annual Income', continuous=True)","d32aa8b4":"loans.groupby('loan_status')['log_annual_inc'].describe()","2acb2ba9":"plot_var('verification_status', 'Verification Status', continuous=False)","2798777b":"loans['purpose'].value_counts()","538c8254":"loans.groupby('purpose')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off'].sort_values()","9fdb891c":"loans['title'].describe()","43ebfaf5":"loans['title'].value_counts().head(10)","0b25e1f8":"loans.drop('title', axis=1, inplace=True)","a3f761b9":"loans['zip_code'].sample(5)","774afdeb":"loans['zip_code'].nunique()","15e246c5":"loans['addr_state'].sample(5)","56e7a65e":"loans['addr_state'].nunique()","1ccc23c2":"loans.drop(labels='zip_code', axis=1, inplace=True)","69c113c4":"loans.groupby('addr_state')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off'].sort_values()","fbb76800":"loans['dti'].describe()","d8b5ed49":"plt.figure(figsize=(8,3), dpi=90)\nsns.distplot(loans.loc[loans['dti'].notnull() & (loans['dti']<60), 'dti'], kde=False)\nplt.xlabel('Debt-to-income Ratio')\nplt.ylabel('Count')\nplt.title('Debt-to-income Ratio')","628203f2":"(loans['dti']>=60).sum()","c5e698f3":"loans.groupby('loan_status')['dti'].describe()","27580f42":"loans['earliest_cr_line'].sample(5)","83b33e9d":"loans['earliest_cr_line'].isnull().any()","cef4d81c":"loans['earliest_cr_line'] = loans['earliest_cr_line'].apply(lambda s: int(s[-4:]))","80108e1f":"loans['earliest_cr_line'].describe()","fa6e3fa9":"plot_var('earliest_cr_line', 'Year of Earliest Credit Line', continuous=True)","7d6bcedc":"loans[['fico_range_low', 'fico_range_high']].describe()","c10a4818":"loans[['fico_range_low','fico_range_high']].corr()","c4c3833c":"loans['fico_score'] = 0.5*loans['fico_range_low'] + 0.5*loans['fico_range_high']","7bfc7fb6":"loans.drop(['fico_range_high', 'fico_range_low'], axis=1, inplace=True)","a0ee99aa":"plot_var('fico_score', 'FICO Score', continuous=True)","627ef6bc":"loans.groupby('loan_status')['fico_score'].describe()","6bc9500f":"plt.figure(figsize=(10,3), dpi=90)\nsns.countplot(loans['open_acc'], order=sorted(loans['open_acc'].unique()), color='#5975A4', saturation=1)\n_, _ = plt.xticks(np.arange(0, 90, 5), np.arange(0, 90, 5))\nplt.title('Number of Open Credit Lines')","d478985d":"loans.groupby('loan_status')['open_acc'].describe()","f356e0ce":"loans['pub_rec'].value_counts().sort_index()","a9e41080":"loans.groupby('loan_status')['pub_rec'].describe()","40b90e98":"loans['revol_bal'].describe()","f20bb944":"loans['log_revol_bal'] = loans['revol_bal'].apply(lambda x: np.log10(x+1))","dccc377c":"loans.drop('revol_bal', axis=1, inplace=True)","59e28d3b":"plot_var('log_revol_bal', 'Log Revolving Credit Balance', continuous=True)","55e32ec9":"loans.groupby('loan_status')['log_revol_bal'].describe()","ac28836e":"# Let's remove % percent sign from `revol_util` and convert it into `float`\nloans.revol_util = loans.revol_util.map(lambda x: str(x).replace('%','')).astype(np.float64)\nloans['revol_util'].head()","3079c1a3":"loans['revol_util'].describe()","9bdebabf":"plot_var('revol_util', 'Revolving Line Utilization', continuous=True)","48d0ea76":"loans.groupby('loan_status')['revol_util'].describe()","21acb63a":"plt.figure(figsize=(12,3), dpi=90)\nsns.countplot(loans['total_acc'], order=sorted(loans['total_acc'].unique()), color='#5975A4', saturation=1)\n_, _ = plt.xticks(np.arange(0, 176, 10), np.arange(0, 176, 10))\nplt.title('Total Number of Credit Lines')","5878e5ee":"loans.groupby('loan_status')['total_acc'].describe()","e0dcb32f":"plot_var('initial_list_status', 'Initial List Status', continuous=False)","bb9e479c":"loans['application_type'].value_counts()","3069dd14":"loans.groupby('application_type')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off']","5bb043de":"loans['mort_acc'].describe()","bbd037f3":"loans['mort_acc'].value_counts().head(10)","80d3658e":"total_acc_avg = loans.groupby('total_acc').mean()['mort_acc'].fillna(0)\n\ndef fill_mort_acc(total_acc,mort_acc):\n    '''\n    Accepts the total_acc and mort_acc values for the row.\n    Checks if the mort_acc is NaN , if so, it returns the avg mort_acc value\n    for the corresponding total_acc value for that row.\n    \n    total_acc_avg here should be a Series or dictionary containing the mapping of the\n    groupby averages of mort_acc per total_acc values.\n    '''\n    if mort_acc>=0:\n        return total_acc_avg[total_acc]\n    else:\n        return mort_acc","e088c320":"loans['mort_acc'] = loans.apply(lambda x: fill_mort_acc(x['total_acc'], x['mort_acc']), axis=1)","55d144ed":"loans.groupby('loan_status')['mort_acc'].describe()","55451ecc":"loans['pub_rec_bankruptcies'].value_counts().sort_index()","50d07099":"plot_var('pub_rec_bankruptcies', 'Public Record Bankruptcies', continuous=False)","8b627870":"loans['charged_off'] = (loans['loan_status'] == 'Charged Off').apply(np.uint8)\nloans.drop('loan_status', axis=1, inplace=True)","cdbe25fa":"loans = loans.dropna().reset_index(drop=True)","8f962a1b":"loans.shape","0f4dec54":"missing_fractions = loans.isnull().mean().sort_values(ascending=False) # Fraction of data missing for each variable","53244997":"print(missing_fractions[missing_fractions > 0]) # Print variables that are missing data","662bf27a":"print(loans.columns)","3c47292e":"loans = pd.get_dummies(loans, columns=['sub_grade', 'home_ownership', 'verification_status', 'purpose', 'addr_state', 'initial_list_status', 'application_type'], drop_first=True)","8eb72fd5":"loans.shape","8547b525":"loans.sample(5)","3dd343a2":"# We'll make our modeling problem more realistic by performing the train\/test split based on the month that the loan was funded. That is, we'll use loans funded on earlier dates to predict whether future loans will charge-off. The variable `issue_d` includes the month and year that the loan was funded.\n# loans['issue_d'].sample(5)\n\n# Are there any missing values?\n# loans['issue_d'].isnull().any()\n\n# No. Let's convert the issue dates to datetime objects:\n# loans['issue_d'] = pd.to_datetime(loans['issue_d'])\n# loans['issue_d'].sample(5)\n\n# The new datetime values are all on the first day of the month. Check the summary statistics of the issue dates:\n# loans['issue_d'].describe()\n# There are only 154 unique issue dates over the 10-year period because we only have month\/year information. In this particular dataset, the first loans were issued in June 2007, and the most recent loans were issued in March 2020. The busiest month was March 2016 with 57,553 loans funded in that month. What is the distribution of loans funded in each year?\n\n# plt.figure(figsize=(6,3), dpi=90)\n# loans['issue_d'].dt.year.value_counts().sort_index().plot.bar(color='darkblue')\n# plt.xlabel('Year')\n# plt.ylabel('Number of Loans Funded')\n# plt.title('Loans Funded per Year')\n\n# We'll form the test set from the most recent 10% of the loans.\n\n# loans_train = loans.loc[loans['issue_d'] <  loans['issue_d'].quantile(0.9)]\n# loans_test =  loans.loc[loans['issue_d'] >= loans['issue_d'].quantile(0.9)]\n# Refer [this video](https:\/\/www.youtube.com\/watch?v=idXEk3MjC9M) if you didn't understood the quantile. Check that we properly partitioned the loans:\n\n# What is the test size?\n# loans_test.shape[0] \/ loans.shape[0]\n# About 10.8%. The partition looks good, so we can delete the original `loans` dataframe:\n# The training set includes loans from June 2007 to April 2018. The test set includes loans from May 2018 to March 2020. Now we need to delete the `issue_d` variable, because it was not available before the loan was funded.\n\n# del loans\n\n# loans_train.drop('issue_d', axis=1, inplace=True)\n# loans_test.drop('issue_d', axis=1, inplace=True)\n\n# del loans_train, loans_test\n\n# y_train = loans_train['charged_off']\n# y_test = loans_test['charged_off']\n\n# X_train = loans_train.drop('charged_off', axis=1)\n# X_test = loans_test.drop('charged_off', axis=1)","2fbb8da7":"loans.drop('issue_d', axis=1, inplace=True)","989dad1d":"# Features\nX = loans.drop('charged_off',axis=1)\n\n# Label\ny = loans['charged_off']","1a053dee":"# Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","3856c20a":"print(\"X_train.shape: \", X_train.shape)\nprint(\"X_test.shape:  \", X_test.shape)\nprint(\"y_train.shape: \", y_train.shape)\nprint(\"y_test.shape:  \", y_test.shape)","4214ae02":"linear_dep = pd.DataFrame()","a98d4161":"for col in X_train.columns:\n    linear_dep.loc[col, 'pearson_corr'] = X_train[col].corr(y_train)\nlinear_dep['abs_pearson_corr'] = abs(linear_dep['pearson_corr'])","9ca9abcd":"linear_dep","5afa7ace":"from sklearn.feature_selection import f_classif\nfor col in X_train.columns:\n    mask = X_train[col].notnull()\n    (linear_dep.loc[col, 'F'], linear_dep.loc[col, 'p_value']) = f_classif(pd.DataFrame(X_train.loc[mask, col]), y_train.loc[mask])","00289465":"linear_dep.sort_values('abs_pearson_corr', ascending=False, inplace=True)\nlinear_dep.drop('abs_pearson_corr', axis=1, inplace=True)","11753454":"linear_dep.reset_index(inplace=True)\nlinear_dep.rename(columns={'index':'variable'}, inplace=True)","22fab339":"linear_dep.head(30)","e1790768":"linear_dep.tail(20)","9fe531f4":"scaler = MinMaxScaler()\n\n# fit and transfrom\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# everything has been scaled between 1 and 0\nprint('Max: ',X_train.max())\nprint('Min: ', X_train.min())","a6e065aa":"model = Sequential()\n\n# input layer\nmodel.add(Dense(X_train.shape[1],activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(39,activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(19,activation='relu'))\nmodel.add(Dropout(0.2))\n\n# output layer\nmodel.add(Dense(1, activation='sigmoid'))\n\n# compile model\nmodel.compile(optimizer=\"adam\", loss='binary_crossentropy')","d28ac36e":"# Early Stopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","b2d0afcf":"model.fit(x=X_train, \n          y=y_train, \n          epochs=400,\n          verbose = 2,\n          batch_size=256,\n          validation_data=(X_test, y_test),\n          callbacks=[early_stop])","c7e5a288":"losses = pd.DataFrame(model.history.history)","42bf589f":"predictions = model.predict_classes(X_test)\n\nprint('Classification Report:')\nprint(classification_report(y_test, predictions))\nprint('\\n')\nprint('Confusion Matirx:')\nprint(confusion_matrix(y_test, predictions))","fcef9358":"rnd.seed(101)\nrandom_ind = rnd.randint(0,len(loans))\n\nnew_customer = loans.drop('charged_off',axis=1).iloc[random_ind]\nnew_customer","3d8896be":"# we need to reshape this to be in the same shape of the training data that the model was trained on\nmodel.predict_classes(new_customer.values.reshape(1,X_train.shape[1]))","bf829733":"# the prediction was right\nloans.iloc[random_ind]['charged_off']","c5e9d2e1":"pipeline_sgdlogreg = Pipeline([\n    ('imputer', SimpleImputer(copy=False)), # Mean imputation by default\n    ('scaler', StandardScaler(copy=False)),\n    ('model', SGDClassifier(loss='log', max_iter=1000, tol=1e-3, random_state=1, warm_start=True))\n])","83150500":"param_grid_sgdlogreg = {\n    'model__alpha': [10**-5, 10**-2, 10**1],\n    'model__penalty': ['l1', 'l2']\n}","5ba66261":"grid_sgdlogreg = GridSearchCV(estimator=pipeline_sgdlogreg, param_grid=param_grid_sgdlogreg, scoring='roc_auc', n_jobs=1, pre_dispatch=1, cv=5, verbose=1, return_train_score=False)","d7e312e7":"grid_sgdlogreg.fit(X_train, y_train)","992f4897":"grid_sgdlogreg.best_score_","ba73e36a":"grid_sgdlogreg.best_params_","7bf56edf":"pipeline_rfc = Pipeline([\n    ('imputer', SimpleImputer(copy=False)),\n    ('model', RandomForestClassifier(n_jobs=-1, random_state=1))\n])","1fe90530":"param_grid_rfc = {\n    'model__n_estimators': [50] # The number of randomized trees to build\n}","f686faaa":"grid_rfc = GridSearchCV(estimator=pipeline_rfc, param_grid=param_grid_rfc, scoring='roc_auc', n_jobs=1, pre_dispatch=1, cv=5, verbose=1, return_train_score=False)","2ea9b884":"grid_rfc.fit(X_train, y_train)","a97ff2e3":"grid_rfc.best_score_","004d78cd":"print('Cross-validated AUROC scores')\nprint(grid_sgdlogreg.best_score_, '- Logistic regression')\nprint(grid_rfc.best_score_, '- Random forest')","c35deac8":"param_grid_sgdlogreg = {\n    'model__alpha': np.logspace(-4.5, 0.5, 11), # Fills in the gaps between 10^-5 and 10^1\n    'model__penalty': ['l1', 'l2']\n}\n\nprint(param_grid_sgdlogreg)","8fb0da5d":"grid_sgdlogreg = GridSearchCV(estimator=pipeline_sgdlogreg, param_grid=param_grid_sgdlogreg, scoring='roc_auc', n_jobs=1, pre_dispatch=1, cv=5, verbose=1, return_train_score=False)","708266e3":"grid_sgdlogreg.fit(X_train, y_train)","87ab9234":"grid_sgdlogreg.best_score_","c8f0fb04":"grid_sgdlogreg.best_params_","7899f3bc":"y_score = grid_sgdlogreg.predict_proba(X_test)[:,1]\nroc_auc_score(y_test, y_score)","0a76d38f":"### 3.2.25 application_type","7fb610bd":"Data Dictionary: \"A unique [LendingClub] assigned ID for the loan listing.\"","e3daf932":"### 3.2.14 title","3a1ee58b":"<a id=\"6\"><\/a>\n# 6. Model Training and Testing","c8722382":"Not sure how someone can have 51 mortgage accounts...but apparently they do. Check the top 10 values:","6451358f":"Compare the summary statistics by loan status:","c6efbe99":"About 75% of the completed loans have three-year periods, and the rest have five-year periods. Loans with five-year periods are more than twice as likely to charge-off as loans with three-year periods.","0bdccd8b":"Data Dictionary: \"The loan title provided by the borrower.\"","2934be40":"Data Dictionary: \"The self-reported annual income provided by the borrower during registration.\"","00595ce1":"Data Dictionary: \"The monthly payment owed by the borrower if the loan originates.\"","9559aa13":"Is there a difference in number of credit lines between fully paid loans and charged-off loans?","87943a7e":"Sort the results by the absolute value of the Pearson correlation:","d5b76dd7":"We are using [Lending Club 2007-2020Q1](https:\/\/www.kaggle.com\/ethon0426\/lending-club-20072020q1) Dataset here from Kaggle.\n\nSee the excel file for all features `..\/input\/lending-club-20072020q1\/LCDataDictionary.xlsx`","8b2e64e8":"The test set AUROC score is somewhat lower than the cross-validated score (0.713).","8ade2282":"* This is an imbalance problem, because we have a lot more entries of people that fully paid their loans then people that did not pay back.\n* We can expect to probably do very well in terms of accuracy but our precision and recall are going to be the true metrics that we will have to evaluate our model based off of.","fec07467":"Yes, they are all unique. The ID is not useful for modeling, either as a categorical variable (there are too many distinct values) or as a numerical variable (the IDs vary wildly in magnitude, likely without any significance), so we drop this variable.","ddc3f90d":"Not quite as good as logistic regression, at least according to this metric.","3b8b47a8":"<a id=\"4.1\"><\/a>\n## 4.1 Convert loan status to 0\/1 charge-off indicator","6cf88f9a":"Data Dictionary: \"Indicates if income was verified by [Lending Club], not verified, or if the income source was verified.\"","3e55ca46":"We only need to keep one of the FICO scores. We'll take the average of the two and call it `fico_score`:","17b57081":"Reset the index:","91c6fca6":"Installments range from \\$4.93 to \\$1,714, with a median of \\$377.","4924e9d8":"<a id=\"6.1\"><\/a>\n## 6.1 Neural Network","9a0637ea":"Data Dictionary: \"Interest Rate on the loan.\"","65fc7b8d":"Data Dictionary: \"The home ownership status provided by the borrower during registration\u00a0or obtained from the credit report.\u00a0Our values are: RENT, OWN, MORTGAGE, OTHER.\"","262ed370":"The random forest takes very long to train, so we don't test different hyperparameter choices. We'll still use `GridSearchCV` for the sake of consistency.","80e81214":"<a id=\"4.2\"><\/a>\n## 4.2 Create dummy variables","64391785":"The three models performed quite similarly according to the AUROC:","a6f460a4":"### 3.2.17 earliest_cr_line","0bc0abf3":"There are a lot of different zip codes, so let's just keep the state column.","c628d52b":"From the above histogram, we see there's a large gap between features missing \"some\" data (&lt;20%) and those missing \"lots\" of data (&gt;40%). Because it's generally very difficult to accurately impute data with more than 30% missing values, we drop such columns. First store all variables missing more than 30% data in an alphabetical list:","d82a3ee7":"Data Dictionary for `fico_range_low`: \"The lower boundary range the borrower\u2019s FICO at loan origination belongs to.\"\n\nData Dictionary for `fico_range_high`: \"The upper boundary range the borrower\u2019s FICO at loan origination belongs to.\"","0e686abe":"Mean cross-validated AUROC score of the random forest:","125d7463":"For each of these features, we check the description in the Data Dictionary and only keep the features that would have been available to investors considering an investment in the loan. These include features in the loan application, and any features added by LendingClub when the loan listing was accepted, such as the loan grade and interest rate.\n\nI'm using my best available knowledge to determine which loan features are known to potential investors. I am not an investor on LendingClub, so my knowledge of the LendingClub investment process is not exact. When in doubt, I err on the side of dropping the feature.","932cbbdb":"Data Dictionary: \"Number of mortgage accounts.\"","0b75a0b8":"View the top 10 loan titles, and their frequencies:","38bbe2a5":"Convert `term` to integers.","06edcda6":"Data Dictionary: \"The job title supplied by the Borrower when applying for the loan.\"","fe455bec":"### 3.2.8 emp_length","1f8a8a7c":"Now we can finally see how our chosen model performs on the test data (the most recent 10% of the loans).","b1f70925":"Create the search grid object:","6be4f184":"<a id=\"5.1\"><\/a>\n## 5.1 Pearson correlation\nWe use the Pearson correlation coefficient to examine the strength and direction of the linear relationship between two continuous variables.\n\nThe correlation coefficient can range in value from \u22121 to +1. The larger the absolute value of the coefficient, the stronger the relationship between the variables. For the Pearson correlation, an absolute value of 1 indicates a perfect linear relationship. A correlation close to 0 indicates no linear relationship between the variables. \n\nThe sign of the coefficient indicates the direction of the relationship. If both variables tend to increase or decrease together, the coefficient is positive, and the line that represents the correlation slopes upward. If one variable tends to increase as the other decreases, the coefficient is negative, and the line that represents the correlation slopes downward.\n\n* We can see a strong correlation between loan_amnt and installment. (The monthly payment owed by the borrower if the loan originates)","79faa46e":"### 3.2.5 installment\n<a id=\"3.2.5\"><\/a>","f9fa00f6":"Let's just retain the year for simplicity:","209df54d":"Data Dictionary: \"The number of open credit lines in the borrower's credit file.\"","739ecda5":"Data Dictionary: \"Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.\" The actual data does not match this description:","e3c7b2eb":"### 3.2.6 grade, sub_grade","ff2b0607":"Mean cross-validated AUROC score of the best model:","21f8719b":"Completed loans that are charged off tend to have higher debt-to-income ratios.","60af4e56":"Best hyperparameters:","6ada32b3":"### 3.2.24 initial_list_status","59c3a131":"<a id=\"6.3\"><\/a>\n## 6.3 Random forest classifier","5f91d10b":"<a id=\"7\"><\/a>\n# 7. Conclusion","f255d4e5":"### 3.2.9 home_ownership","ce29e993":"### 3.2.2 loan_amnt","10d87b1c":"Data Dictionary for `zip_code`: \"The first 3 numbers of the zip code provided by the borrower in the loan application.\"\n\nData Dictionary for `addr_state`: \"The state provided by the borrower in the loan application.\"","634e31fd":"### 3.2.21 revol_bal","074f2e27":"Data Dictionary for `grade`: \"LendingClub assigned loan grade.\"\n\nData Dictionary for `sub_grade`: \"LendingClub assigned loan subgrade.\"\n\nWhat are the possible values of `grade` and `sub_grade`?","4d0d917b":"### 3.2.4 int_rate","fa8bfe7a":"### 3.2.7 emp_title","bfda0025":"<a id=\"3\"><\/a>\n# 3. Data Analysis and Pre-processing\n\n* Overlook on Data\n* Pre-processing on each Variable","39e048f0":"### 3.2.26 mort_acc","094813f0":"<a id=\"4.3\"><\/a>\n## 4.3 Train\/test split","dd90bc4b":"Is there a difference in average public records between fully paid loans and charged-off loans?","f40dfd36":"<a id=\"5\"><\/a>\n# 5. Linear Dependence of Charge-off on the Predictors","860e5211":"### 3.2.16 dti","d5c48fe3":"Data Dictionary: \"Total credit revolving balance.\"","8eb6964b":"There are no categorical variables with missing values, and therefore we don't need any `NaN` dummy variables.\n\nCreate dummy variables for the categorical variables:","2532a18a":"The `SGDClassifier` estimator in scikit-learn implements linear classifiers (SVM, logistic regression, and others) with stochastic gradient descent (SGD) training. A particular linear classifier is chosen through the `loss` hyperparameter. Because we want to predict the probability of charge-off, we choose logistic regression (a probabilistic classifier) by setting `loss = 'log'`.","f6e00ba2":"### 3.2.11 verification_status","7dab435a":"There isn't a large difference in the means.","a31721b9":"Charged-off loans tend to have higher loan amounts. Let's compare the summary statistics by loan status:","d3f54b82":"There appear to be large differences in charge-off rates by home ownership status. Renters and homeowners have a higher probability of charge-off. Let's compare the charge-off rates:","19d84aa0":"Are all the IDs unique?","422c35ce":"Compare the charge-off rate by loan period:","dc8e6a59":"Loan status does not appear to vary much with employment length on average, except for a small drop in charge-offs for borrowers with over 10 years of employment.","ce53b17e":"Note there are 117126 loans without data on the length of employment.\n\nConvert `emp_length` to integers:","b15f4883":"Data Dictionary: \"A category provided by the borrower for the loan request.\"","0995508a":"Joint loans are slightly less likely to be charged-off.","b8df54be":"### 3.2.13 purpose","6e99ca29":"Charged-off loans tend to have much higher interest rates. Let's compare the summary statistics by loan status:","0dbdb236":"No large differences here.","8b67a23c":"Best hyperparameters:","6e20f1b3":"Annual income ranges from \\$0 to \\$9,550,000, with a median of \\$65,000. Because of the large range of incomes, we should take a log transform of the annual income variable.","8ed471e9":"Data Dictionary: \"Number of derogatory public records.\"","7d88c1a6":"The grade is implied by the subgrade, so let's drop the grade column.","9a74f7af":"Individuals who pay off their loans are more likely to have several mortgage accounts.","4861a1e8":"<a id=\"6.2\"><\/a>\n## 6.2 Logistic regression with SGD training","798953aa":"Very few. Compare the summary statistics by loan status:","ebccc18d":"### 3.2.10 annual_inc","4c88dde5":"How many variables do we currently have?","efeec4bb":"<a id=\"1\"><\/a>\n# 1. Setup and Import\n<hr>","b98b21e9":"Loans that charge off have a FICO score 10 points lower on average.","c1712dce":"There are too many different job titles for this feature to be useful, so we drop it.","0c3d8f34":"Data Dictionary: \"The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\"","e2d4e5b7":"* In the loan amount distribution we can see spikes in even ten thousend dollar, so this is indicating that there are certain amounts that are basically standard loans.","db268f7e":"Loans that charge off have \\$30 higher installments on average.","6a045764":"There are 60,298 different titles in the dataset, and based on the top 10 titles, the `purpose` variable appears to already contain this information. So we drop the `title` variable.","893d2d27":"Next we train a random forest model. Note that data standardization is not necessary for a random forest.","496dc97f":"Calculate the charge-off rates by address state:","59aa297b":"<a id=\"4\"><\/a>\n# 4. More Pre-processing","4d3f76fc":"Conduct the grid search and train the final model on the whole dataset:","0c50283a":"Replace the values `ANY` and `NONE` with `OTHER`:","ebbd6ebe":"The AUROC will always improve (with decreasing gains) as the number of estimators increases, but it's not necessarily worth the extra training time and model complexity.","8fad12a4":"Note sure if the values of -1 and 999 make sense...\n\nThere are several outliers that mess up our default plots. Plot a histogram for `dti` less than 60:","d57211dd":"A small grid of hyperparameters to search over:","44278672":"Data Dictionary: \"The initial listing status of the loan. Possible values are \u2013 W, F.\" I'm not sure what this means.","e9b266f7":"Check our data with the new dummy variables:","80f30242":"Print the remaining features for future reference:","6c300784":"We define a function for plotting a variable and comparing with the loan status:","2d5a6bf4":"How many of the `dti` values are \"outliers\" (above 60)?","26cf7584":"<a id=\"3.1\"><\/a>\n## 3.1 Overlook on Data","a98b6276":"<a id=\"2.2\"><\/a>\n## 2.2 Only keep loan features known to potential investors","37e09b20":"### 3.2.15 zip_code, addr_state","47d54c30":"### 3.2.23 total_acc","390103d8":"### 3.2.20 pub_rec","96d747b8":"### 3.2.3 term","1d5a85ce":"Notice that only 12% of completed loans for weddings have charged-off, but 30% of completed small business loans have charged-off.","46e908d3":"The charge-off rate ranges from 13.0% in Washington, DC to 27.6% in Mississippi.","12622529":"<a id=\"6.5\"><\/a>\n## 6.5 Test set evaluation","48a6f952":"### 3.2.12 issue_d","d9efc204":"Data Dictionary: \"The total number of credit lines currently in the borrower's credit file.\"","5caff915":"<a id=\"2\"><\/a>\n# 2. Limit the Feature Space\n\nThe full dataset has 150 features for each loan. We'll select features in two steps:\n\n1. Drop features with more than 30% of their data missing.\n2. Of the remaining features, choose only those that would be available to an investor before deciding to fund the loan.","24561385":"There is a noticeable difference in FICO scores between fully paid and charged-off loans. Compare the summary statistics:","00c6f109":"### 3.2.19 open_acc","d75bac74":"Charged-off loans tend to have higher installments. Let's compare the summary statistics by loan status:","d438620a":"$F$-statistics:","f687ad6d":"We'll inspect each feature individually, and do the following:\n\n1. Drop the feature if it is not useful for predicting the loan status.\n2. View summary statistics and visualize the data, plotting against the loan status.\n3. Modify the feature to make it useful for modeling, if necessary.","55912e27":"By some coincidence, the optimal hyperparameters here are the same as from our first grid search for logistic regression!","33caf117":"Change the response variable `loan_status` to a 0\/1 variable, where 0 indicates fully paid and 1 indicates charge-off:","b1aac4fc":"The machine learning pipeline:","7f0b273c":"Do a log transform:","5d3c52eb":"On the training set, we compute the [Pearson correlation](https:\/\/www.youtube.com\/watch?v=6fUYt1alA1U), $F$-statistic, and $p$ value of each predictor with the response variable `charged_off`.","a23b8626":"<hr\/>\n\n# Loan Repayment Prediction\n[***By Saurabh Zinjad***](https:\/\/www.kaggle.com\/ztrimus) <br>\n**November 16, 2020**\n<hr\/>\n\nGiven historical data on loans given out with information on whether or not the borrower defaulted (charge-off), can we build a model that can predict wether or nor a borrower will pay back their loan? This way in the future when **we get a new potential customer we can assess whether or not they are likely to pay back the loan.**\n\n## Table of Contents\n\n* [1. Setup and Import](#1)\n* [2. Limit the Feature Space](#2)\n * [2.1 Drop features missing more than 30% data](#2.1)\n * [2.2 Only keep loan features known to potential investors](#2.2)\n* [3. Data Analysis and Pre-processing](#3)\n * [3.1 Overlook on Data](#3.1)\n * [3.2  Pre-processing on each Variable](#3.2)\n* [4. More Pre-processing](#4)\n * [4.1 Convert loan status to 0\/1 charge-off indicator](#4.1)\n * [4.2 Create dummy variables](#4.2)\n * [4.3 Train\/test split](#4.3)\n* [5. Linear Dependence of Charge-off on the Predictors](#5)\n * [5.1 Pearson correlation](#5.1)\n* [6. Model Training and Testing](#6)\n * [6.1 Neural Network](#6.1)\n * [6.2 Logistic regression with SGD training](#6.2)\n * [6.3 Random forest classifier](#6.3)\n * [6.4 Tune hyperparameters on the chosen model more finely](#6.4)\n * [6.5 Test set evaluation](#6.5)\n* [7. Conclusion](#7)","97a177f3":"### 3.2.18 fico_range_low, fico_range_high","501b2305":"There's a clear trend of higher probability of charge-off as the subgrade worsens.","8ed6cb14":"Data Dictionary: \"The month the borrower's earliest reported credit line was opened.\"","bcc1b9fe":"Data Dictionary: \"Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\"","e4dfaa6d":"If any categorical variables have missing values, we'll need to create NaN dummy variables for those. So first check which variables have missing data:","ab96615f":"Data Dictionary: \"Number of public record bankruptcies.\"","314e48cb":"It looks like the borrower's state of residence, the revolving balance, and several of the loan purposes are irrelevant for predicting charge-off.","99dee84a":"We're going to try to learn differences in the features between completed loans that have been fully paid or charged off. We won't consider loans that are current, don't meet the credit policy, defaulted, or have a missing status. So we only keep the loans with status \"Fully Paid\" or \"Charged Off.\"","7532ffc0":"Let's just compare the charge-off rates by application type:","107184c3":"The variables most linearly correlated with `charged_off` are the interest rate, loan period (term), FICO score, debt-to-income ratio, number of mortgages, income, the loan grade, and the loan amount.\n\nNow view the results for the 20 least correlated predictors:","123992ab":"Interest rates range from 5.32% to 31% (!) with a median of 13.2%.","5d4dd839":"<a id=\"3.2\"><\/a>\n## 3.2 Pre-processing on each Variable","10bcf961":"How many variables are there now?","0e906590":"We applied machine learning methods to predict the probability that a requested loan on LendingClub will charge off. After training and evaluating three different models (logistic regression, random forest, and k-nearest neighbors), we found that all three performed similarly according to a cross-validated AUROC score on the training data. We selected logistic regression (with ridge penalty) because it was the fastest model to train, and this model obtained an AUROC score of 0.689 on a test set consisting of the most recent 10% of the loans.\n\nThis model, while far from perfect, can provide a somewhat informed prediction of the likelihood that a loan will charge off, using only data available to potential investors before the loan is fully funded.\n\nWe also found that, according to linear measures of correlation between the predictors and the response, the most important variables for predicting charge-off are the loan interest rate and term, and the borrower's FICO score and debt-to-income ratio.","3d60d943":"Logistic regression squeaked out ahead, and coupled with the fact that `SGDClassifier` trains much faster than the other two models, we'll select logistic regression as our final model. Now we'll tune the hyperparameters more finely.","352e2f8e":"Borrowers who are charged-off tend to have shorter lines of credit.","4d342391":"View the results for the top 20 predictors most correlated with `charged_off`:","2cbb9866":"Data Dictionary: \"Indicates whether the loan is an individual application or a joint application with two co-borrowers.\"","c82c07fc":"### 3.2.1 id","ee66068c":"Check the Pearson correlation between these values:","f4686485":"Mean cross-validated AUROC score of the best model:","544f1a05":"Data Dictionary: \"The month which the loan was funded.\"\n\nBecause we're only using variables available to investors before the loan was funded, `issue_d` will not be included in the final model. We're keeping it for now just to perform the train\/test split later, then we'll drop it.","3d3f9ecf":"### 3.2.22 revol_util","7ee5ce1f":"It appears that individuals with higher income are more likely to pay off their loans. Let's compare the summary statistics by loan status:","590b88b5":"<a id=\"6.4\"><\/a>\n## 6.4 Tune hyperparameters on the chosen model more finely","456e7f9b":"<a id=\"2.1\"><\/a>\n## 2.1 Drop features missing more than 30% data","8d2fcc50":"Loan amounts range from \\$500 to \\$40,000, with a median of \\$12,000.","5ec6ebe6":"Data Dictionary: \"The number of payments on the loan. Values are in months and can be either 36 or 60.\"","d083cbfa":"### 3.2.27 pub_rec_bankruptcies","3b3b0cb6":"We implement machine learning pipelines consisting of one or more of the following steps, depending on the particular model:\n1. Mean imputation of missing values\n2. Dimension reduction using linear discriminant analysis (LDA)\n3. Data standardization: rescaling to zero mean and unit variance\n4. The chosen model\n\nWe will evaluate and compare the following models using a cross-validated AUROC score on the training set:\n1. Neural Network\n2. Logistic regression with SGD training\n3. Random forest\n\nWe'll perform some hyperparameter tuning for each model to choose the most promising model, then more carefully tune the hyperparameters of the best-performing model.","dbc3fcf5":"Data Dictionary: \"A ratio calculated using the borrower\u2019s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.\"","4c15fb49":"Calculate the charge-off rates by purpose:"}}