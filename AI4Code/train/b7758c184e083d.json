{"cell_type":{"26195570":"code","f5790c0c":"code","e2d42567":"code","ea7cb04f":"code","5f1a86e1":"code","0e198c38":"code","f62d35fd":"code","05748982":"code","2bc36d85":"code","dc420fe7":"code","0347cfee":"code","54c77116":"code","d36ffc62":"markdown","641edb26":"markdown","a852f48b":"markdown"},"source":{"26195570":"# Imports\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder","f5790c0c":"# Fetch the data from Github\ninsurence_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/stedy\/Machine-Learning-with-R-datasets\/master\/insurance.csv')\ninsurence_data.head(10)","e2d42567":"# Create a column transformer\n\nct = make_column_transformer(\n    (MinMaxScaler(), ['age', 'bmi', 'children']), # turn values betw. 0 and 1\n    (OneHotEncoder(handle_unknown='ignore'), ['sex', 'smoker', 'region'])\n)","ea7cb04f":"# Create features and labels\n\nX = insurence_data.drop('charges', axis=1)\ny = insurence_data['charges']\n\nX.head(3), y.head(3)","5f1a86e1":"# Create training and testing set\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\nlen(X), len(X_train), len(X_test)","0e198c38":"# Fit column transformer to the training data\nct.fit(X_train)","f62d35fd":"# Transform training and test data with normalization\n\nX_train_normal = ct.transform(X_train)\nX_test_normal = ct.transform(X_test)","05748982":"# Looking at the data\nX_train.shape, X_train_normal.shape","2bc36d85":"X_train_normal","dc420fe7":"tf.random.set_seed(42)\n\ninsurence_model = tf.keras.Sequential([\n  tf.keras.layers.Dense(100, activation=\"relu\"),\n  tf.keras.layers.Dense(33, activation=\"relu\"),\n  tf.keras.layers.Dense(1)\n])\n\ninsurence_model.compile(loss=tf.keras.losses.mae,\n                        optimizer=tf.keras.optimizers.Adam(lr=0.3),\n                        metrics=['mae'])\n\ntrainingStopCallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=0, verbose=0,mode='auto', baseline=None, restore_best_weights=False)\nhistory = insurence_model.fit(X_train_normal, y_train, epochs=1000, verbose=0, batch_size=32, callbacks=[trainingStopCallback])","0347cfee":"# Evaluate the model\ninsurence_model.evaluate(X_test_normal, y_test)","54c77116":"# Plot history\npd.DataFrame(history.history).plot()\nplt.ylabel('loss')\nplt.xlabel('epochs')","d36ffc62":"## Build the model","641edb26":"## Preprocessing data (normalization and standardization)","a852f48b":"# Medical Cost\n* Building a regression neural network to make predictions on personal medical cost using [this](https:\/\/www.kaggle.com\/mirichoi0218\/insurance) dataset from [Kaggle](https:\/\/www.kaggle.com\/)"}}