{"cell_type":{"e893ee18":"code","14df8d6b":"code","2e629e2f":"code","0f1725a5":"code","b70037cb":"code","04cc5338":"code","a9fded67":"code","724cac91":"code","8ab0ff82":"code","e59e0afc":"code","bd81e99b":"code","48e221d4":"code","77bdd82a":"code","45b573fe":"code","e0b7b4ab":"code","538176b7":"code","048f57d0":"code","00e4996d":"code","4882de91":"code","5986bf01":"code","60d03a0f":"code","a195b142":"code","c35dc267":"code","2b466084":"code","0ff98aa6":"code","5b8bbccc":"code","5396ff53":"code","3879b999":"code","4c3645cb":"code","11bacf35":"code","d70e81cc":"code","fa8d0360":"code","815665c6":"code","cb536a97":"code","f373d09a":"code","b6591452":"code","f59f0f59":"code","ddac7548":"code","f02428ca":"markdown","aa0b1a03":"markdown","e2d8a3f5":"markdown","99b7129b":"markdown","f7225a55":"markdown","53a23939":"markdown","dbfb7855":"markdown","36609f2e":"markdown","099d99e3":"markdown","e9643306":"markdown","2d5ab3c0":"markdown","42ee815e":"markdown","2c837c4a":"markdown","39d9c628":"markdown","570945b2":"markdown","2c977ccf":"markdown","638396a3":"markdown","b87b1bf4":"markdown","7a9323ca":"markdown","53594cd4":"markdown","e5215d05":"markdown","56899e62":"markdown","3a34d4e4":"markdown","97b5a018":"markdown","d7bc3499":"markdown","bb6825b7":"markdown","b69ebf9d":"markdown","e12f6a4c":"markdown","decee1d3":"markdown","7041788f":"markdown","6e42a689":"markdown","eb7dbf36":"markdown","72f6e50c":"markdown","fe1ade48":"markdown","f0fbac18":"markdown","eb64bea5":"markdown"},"source":{"e893ee18":"from keras.datasets import fashion_mnist, mnist\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, Dropout\nfrom keras.models import Model\n\nimport os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image\n\nfrom keras.preprocessing.image import load_img\nfrom keras import Model\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.models import load_model\nfrom keras.optimizers import Adam\nfrom keras.utils.vis_utils import plot_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate, Dropout\n\n# Any results you write to the current directory are saved as output.\nfrom IPython.display import display, Image","14df8d6b":"# get the data\nfilname = '..\/input\/facial-expression\/fer2013\/fer2013.csv'\n\n#different labels of images(not useful known about for current problem)\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\n\n#different features names\nnames=['emotion','pixels','usage']\n\n#Reading data in dataframe\ndf=pd.read_csv('..\/input\/facial-expression\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head(10)","2e629e2f":"#reading data and labels from dataset and appending in list\n\ndef getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    X, Y = np.array(X), np.array(Y)\n    return X, Y","0f1725a5":"#extracting data from dataset\nX, Y = getData(filname)\nnum_class = len(set(Y))\n#print(num_class)","b70037cb":"# keras with tensorflow backend\nN, D = X.shape\n\n#reshaping the dataset\nX = X.reshape(N, 48, 48, 1)","04cc5338":"#splitting data in train, test\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle=True)","a9fded67":"#Taking 5000 images \n\nx_train = x_train[:5000]\nx_test = x_test[:5000]","724cac91":"x_train.shape","8ab0ff82":"#NOrmalizing the images\nx_train = x_train.astype('float32') \/ 255.\nx_test = x_test.astype('float32') \/ 255.\n\n#reshaping the images\nx_train = np.reshape(x_train, (len(x_train), 48, 48, 1))  # adapt this if using `channels_first` image data format\nx_test = np.reshape(x_test, (len(x_test), 48, 48, 1))  # adapt this if using `channels_first` image data format\n\n\n#adding noise in data\nnoise_factor = 0.1\nx_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \nx_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n\n#clipping put data near to 0--->0 aand data near to 1-->1(eg=0.3-->0 or 0.7-->1)\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","e59e0afc":"n = 10","bd81e99b":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_train_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","48e221d4":"display(Image(filename=\"\/kaggle\/input\/images-architecture\/images_architecture\/autoencoder.png\"))","77bdd82a":"input_img = Input(shape=(48, 48, 1))  # adapt this if using `channels_first` image data format\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2, 2), padding='same')(x)\nx = Dropout(0.2)(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2, 2), padding='same')(x)\n\n\n# at this point the representation is (7, 7, 32)\n\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\nx = Dropout(0.2)(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='MSE')","45b573fe":"autoencoder.summary()","e0b7b4ab":"autoencoder.fit(x_train_noisy, x_train,\n                epochs=35,\n                batch_size=64,\n                shuffle=True,\n                validation_data=(x_test_noisy, x_test))","538176b7":"predict = autoencoder.predict(x_test_noisy)","048f57d0":"n=10","00e4996d":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","4882de91":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","5986bf01":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(predict[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","60d03a0f":"epochs = range(len(autoencoder.history.history['loss']))\n\nplt.plot(epochs,autoencoder.history.history['loss'],'r', label='train_loss')\nplt.plot(epochs,autoencoder.history.history['val_loss'],'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.figure()\n\n","a195b142":"from skimage.measure import compare_ssim, compare_psnr\nfrom skimage import data, img_as_float","c35dc267":"compare_ssim(x_test, predict, multichannel=True)","2b466084":"compare_psnr(x_test, predict)","0ff98aa6":"display(Image(filename=\"\/kaggle\/input\/images-architecture\/images_architecture\/unet.png\"))","5b8bbccc":"def build_model(input_layer, start_neurons):\n    conv1 = Conv2D(start_neurons*1,(3,3), activation='relu', padding='same')(input_layer)\n    conv1 = Conv2D(start_neurons*1,(3,3), activation='relu', padding='same')(conv1)\n    pool1 = MaxPooling2D((2,2))(conv1)\n    pool1 = Dropout(0.25)(pool1)\n    \n    conv2 = Conv2D(start_neurons*2,(3,3), activation='relu', padding='same')(pool1)\n    conv2 = Conv2D(start_neurons*2,(3,3), activation='relu', padding='same')(conv2)\n    pool2 = MaxPooling2D((2,2))(conv2)\n    pool2 = Dropout(0.5)(pool2)\n\n    conv3 = Conv2D(start_neurons*4,(3,3), activation='relu', padding='same')(pool2)\n    conv3 = Conv2D(start_neurons*4,(3,3), activation='relu', padding='same')(conv3)\n    pool3 = MaxPooling2D((2,2))(conv3)\n    pool3 = Dropout(0.5)(pool3)\n    \n    conv4 = Conv2D(start_neurons*8,(3,3), activation='relu', padding='same')(pool3)\n    conv4 = Conv2D(start_neurons*8,(3,3), activation='relu', padding='same')(conv4)\n    pool4 = MaxPooling2D((2,2))(conv4)\n    pool4 = Dropout(0.5)(pool4)\n\n    #Middle\n    convm = Conv2D(start_neurons * 16, (3,3), activation='relu', padding='same')(pool4)\n    convm = Conv2D(start_neurons * 16, (3,3), activation='relu', padding='same')(convm)\n    \n    #upconv part\n    deconv4 = Conv2DTranspose(start_neurons*8,(3,3), strides=(2,2), padding='same')(convm)\n    uconv4 = concatenate([deconv4, conv4])\n    uconv4 = Dropout(0.5)(uconv4)\n    uconv4 = Conv2D(start_neurons*8, (3,3), activation='relu', padding='same')(uconv4)\n    uconv4 = Conv2D(start_neurons*8, (3,3), activation='relu', padding='same')(uconv4)\n    \n    deconv3 = Conv2DTranspose(start_neurons*8,(3,3), strides=(2,2), padding='same')(uconv4)\n    uconv3 = concatenate([deconv3, conv3])\n    uconv3 = Dropout(0.5)(uconv3)\n    uconv3 = Conv2D(start_neurons*4, (3,3), activation='relu', padding='same')(uconv3)\n    uconv3 = Conv2D(start_neurons*4, (3,3), activation='relu', padding='same')(uconv3)\n    \n    deconv2 = Conv2DTranspose(start_neurons*8,(3,3), strides=(2,2), padding='same')(uconv3)\n    uconv2 = concatenate([deconv2, conv2])\n    uconv2 = Dropout(0.5)(uconv2)\n    uconv2 = Conv2D(start_neurons*2, (3,3), activation='relu', padding='same')(uconv2)\n    uconv2 = Conv2D(start_neurons*2, (3,3), activation='relu', padding='same')(uconv2)\n    \n    deconv1 = Conv2DTranspose(start_neurons*8,(3,3), strides=(2,2), padding='same')(uconv2)\n    uconv1 = concatenate([deconv1, conv1])\n    uconv1 = Dropout(0.5)(uconv1)\n    uconv1 = Conv2D(start_neurons*1, (3,3), activation='relu', padding='same')(uconv1)\n    uconv1 = Conv2D(start_neurons*1, (3,3), activation='relu', padding='same')(uconv1)\n    \n    output_layer = Conv2D(1, (1,1), padding='same', activation='sigmoid')(uconv1)\n    return output_layer","5396ff53":"#Defining target image size and Input size and building model\nimg_size_target = 48\ninput_layer = Input((img_size_target, img_size_target,1))\noutput_layer = build_model(input_layer,64)","3879b999":"#Initializing and compiling model\nmodel_unet = Model(input_layer, output_layer)\nmodel_unet.compile(optimizer='adam', loss='MSE')","4c3645cb":"model_unet.summary()","11bacf35":"model_unet.fit(x_train_noisy, x_train,\n                epochs=15,\n                batch_size=64,\n                shuffle=True,\n                validation_data=(x_test_noisy, x_test))","d70e81cc":"predict = model_unet.predict(x_test_noisy)","fa8d0360":"n=10","815665c6":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","cb536a97":"plt.figure(figsize=(48, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(x_test_noisy[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","f373d09a":"plt.figure(figsize=(40, 48))\nfor i in range(n):\n    ax = plt.subplot(1, n, i+1)\n    plt.imshow(predict[i].reshape(48, 48))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","b6591452":"epochs = range(len(model_unet.history.history['loss']))\n\nplt.plot(epochs,model_unet.history.history['loss'],'r', label='train_loss')\nplt.plot(epochs,model_unet.history.history['val_loss'],'b', label='val_loss')\nplt.title('train_loss vs val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.figure()","f59f0f59":"compare_ssim(x_test, predict, multichannel=True)","ddac7548":"compare_psnr(x_test, predict)","f02428ca":"## AutoEncoder Architecture","aa0b1a03":"**Refer to Keras Blog for better idea : https:\/\/blog.keras.io\/building-autoencoders-in-keras.html**","e2d8a3f5":"# Training Model","99b7129b":"# Construction of Model","f7225a55":"# PSNR","53a23939":"# Training Model","dbfb7855":"* Refer to original paper for better idea: https:\/\/arxiv.org\/abs\/1505.04597\n* Implementation : https:\/\/towardsdatascience.com\/u-net-b229b32b4a71","36609f2e":"## Original Test images","099d99e3":"# UNET: Train Loss VS validation loss","e9643306":"# Making Prediction","2d5ab3c0":"# Not quite good. Lets try UNET","42ee815e":"# Extracting Data and splitting train and test ","2c837c4a":"## Reshaping images","39d9c628":"# UNET Summary","570945b2":"# Importing libraries","2c977ccf":"# PSNR\n\nSource: https:\/\/www.mathworks.com\/help\/vision\/ref\/psnr.html\n\n* The PSNR block computes the peak signal-to-noise ratio, in decibels, between two images. This ratio is used as a quality measurement between the original and a compressed image. The higher the PSNR, the better the quality of the compressed, or reconstructed image.\n\n* The mean-square error (MSE) and the peak signal-to-noise ratio (PSNR) are used to compare image compression quality. The MSE represents the cumulative squared error between the compressed and the original image, whereas PSNR represents a measure of the peak error. The lower the value of MSE, the lower the error.","638396a3":"# Generated Test images","b87b1bf4":"# Visualizing the prediction","7a9323ca":"## Making Prediction","53594cd4":"## Extract data from CSV","e5215d05":"**Anwser taken from quora: https:\/\/www.quora.com\/Why-is-U-Net-considered-as-an-autoencoder**\n\nThe classical auto-encoder architecture has the following property:\n- First, it takes an input and reduces the receptive field of the input as it goes through the layers of its encoder units. Finally at the end of the encoder part of the architecture, the input is reduced to a linear feature representation.\n- Next, the linear feature representation is upsampled (or its receptive field increased) by the decoder portion of the auto-encoder. So that at the other end of the autoencoder the result is of the same dimension as the input it received.\nSuch an architecture is ideal for preserving the dimensionality of input->output. But, the linear compression of the input leads to a bottleneck that does not transmit all features.\n\nThe U-Net has both the properties listed above, but it uses deconv units and overcomes the bottleneck limitation by adding skip connections that allow feature representations to pass through the bottleneck.","56899e62":"# UNET Structure","3a34d4e4":"## Generated Test images","97b5a018":"# Noised Test images","d7bc3499":"# Structural Similarity Index\n\n* When comparing images, the mean squared error (MSE)--while simple to implement--is not highly indicative of perceived similarity. Structural similarity aims to address this shortcoming by taking texture into account","bb6825b7":"## Noised Test images","b69ebf9d":"# AutoEncoder Summary","e12f6a4c":"* Image denoising is to remove noise from a noisy image, so as to restore the true image\n* In this notebook FER2013 dataset is used which contains approx 35 thousand images of 7 different emotions\n* Image is grayscale of size 48*48","decee1d3":"# One of the way we can achieve our goal of removing noise is AutoEncoder\n\n**Copied from Keras Blog(https:\/\/blog.keras.io\/building-autoencoders-in-keras.html):\n**\n* What are autoencoders good for?\n* Today two interesting practical applications of autoencoders are data denoising (which we feature later in this post), and dimensionality reduction for data visualization. With appropriate dimensionality and sparsity constraints, autoencoders can learn data projections that are more interesting than PCA or other basic techniques.","7041788f":"# Visualizing the prediction","6e42a689":"# AutoEncoder: Train Loss VS validation loss","eb7dbf36":"# Data Preprocessing","72f6e50c":"# Structural Similarity Index\n\n* When comparing images, the mean squared error (MSE)--while simple to implement--is not highly indicative of perceived similarity. Structural similarity aims to address this shortcoming by taking texture into account\n\n","fe1ade48":"# Visualization of 10 Data","f0fbac18":"## Adding labels and images(pixel values) in respective array","eb64bea5":"# Construction of Model"}}