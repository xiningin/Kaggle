{"cell_type":{"85fd1dcf":"code","8714985e":"code","07b17fa2":"code","1f7da8d9":"code","c280d601":"code","fc43de97":"code","0e0b192d":"code","b0b94585":"code","18d02ce3":"markdown","ac737f72":"markdown","56ed55f5":"markdown","9307bbfc":"markdown","5f9c6042":"markdown","d73d2266":"markdown","56421ddb":"markdown","50d41a60":"markdown","72722b59":"markdown"},"source":{"85fd1dcf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom tqdm import tqdm\nimport os\nimport shutil\nimport imageio as io\n\nos.mkdir('.\/images')\nos.mkdir('.\/movies')\n\ndef rm_contents(folder):\n    for filename in os.listdir(folder):\n        file_path = os.path.join(folder, filename)\n        try:\n            if os.path.isfile(file_path) or os.path.islink(file_path):\n                os.unlink(file_path)\n            elif os.path.isdir(file_path):\n                shutil.rmtree(file_path)\n        except Exception as e:\n            print('Failed to delete %s. Reason: %s' % (file_path, e))\n","8714985e":"G = 4 * np.square(np.pi)\nprint('G =', G)\n\ndef dV(m, pos, r):\n    \"\"\"compute change in velocity in 1 dimension\"\"\"\n    return np.divide((G * m * -pos), np.power(r, 3))\n\ndef update_V(m, x, y):\n    \"\"\"compute new velocity changes\"\"\"\n    \n    r = np.sqrt(np.square(x) + np.square(y))\n    \n    dVx = dV(m, x, r)\n    dVy = dV(m, y, r)\n    \n    return dVx, dVy\n\nx, y = update_V(1, 2, 3)\nprint(x, ',', y)","07b17fa2":"class Planet():\n    def __init__(self, x_init, y_init, Vx_init=0, Vy_init=2*np.pi):\n\n        self.x = x_init\n        self.y = y_init\n        self.Vx = Vx_init\n        self.Vy = Vy_init\n        \n    def __str__(self):\n        return '(' + str(self.x) + ', ' + str(self.y)+ ')\\n' + str(self.Vx) + ', ' + str(self.Vy)\n        \n    def update(self, star_mass, dt=1\/12):\n        \n        self.x = self.x + self.Vx * dt\n        self.y = self.y + self.Vy * dt\n        \n        dVx, dVy = update_V(star_mass, self.x, self.y)\n        \n        self.Vx = self.Vx + dVx * dt\n        self.Vy = self.Vy + dVy * dt\n        \n        return self.x, self.y","1f7da8d9":"star_mass = 1\n\np = Planet(1, 0)\n\nstar_plot_size = 1000\nplt.style.use('dark_background')\nfig, ax  = plt.subplots()\nax.scatter(0.00001, 0.000001, s=star_plot_size, c='orange')\nax.scatter(p.x, p.y, c='blue')\n#fig","c280d601":"ani_fig, ani_ax = plt.subplots()\nrm_contents('.\/images')\nrm_contents('.\/movies')\n\nX = []\nY = []\nVx = []\nVy = []\nimages = []\n\nn_itr = 100\n\nprint('Generating orbit')\nfor i in tqdm(range(n_itr)):\n    \n    x, y = p.update(star_mass)\n    \n    ani_ax.set_xlim(-2, 2)\n    ani_ax.set_ylim(-2, 2)\n    ani_ax.set_title(str(i))\n    ani_ax.scatter(0.00001, 0.00001, s=star_plot_size, c='orange')\n    ani_ax.scatter(x, y, c='blue')\n    ani_fig.savefig('.\/images\/' + str(i) + '.png')\n    ani_ax.clear()\n    \n    X += [x]\n    Y += [y]\n    Vx += [p.Vx]\n    Vy += [p.Vy]\n    \nprint('Compiling animation')\npng_dir = '.\/images'\nimages = []\nfor i in tqdm(range(n_itr)):\n    file_name = str(i) + '.png'\n    file_path = os.path.join(png_dir, file_name)\n    images.append(io.imread(file_path))\nio.mimsave('.\/movies\/movie.gif', images, fps=10)","fc43de97":"plt.scatter(0.00001, 0.00001, c='orange', s=star_plot_size)\nplt.plot(X, Y, c='blue')  \nplt.title('Orbit')\nplt.show()","0e0b192d":"plt.plot(Vx, c='r')\nplt.title(\"X velocity\")\nplt.show()\nplt.plot(Vy, c='b')\nplt.title(\"Y velocity\")\nplt.show()","b0b94585":"p1 = Planet(1, 0)\np2 = Planet(2, 0, Vy_init=np.pi)\np3 = Planet(3, 0, Vy_init=np.pi)\np4 = Planet(4, 0, Vy_init=np.pi)\n\nplanets = [p1, p2, p3, p4]\np_colors = ['yellow', 'green', 'blue', 'red']\n\n\nani_fig, ani_ax = plt.subplots()\nrm_contents('.\/images')\n\nX = []\nY = []\nVx = []\nVy = []\nimages = []\n\nn_itr = 300\n\nprint('Generating orbit')\nfor i in tqdm(range(n_itr)):\n    \n    ani_ax.set_xlim(-5, 5)\n    ani_ax.set_ylim(-5, 5)\n    ani_ax.set_title(str(i))\n    ani_ax.scatter(0.00001, 0.00001, s=800, c='orange')\n    for c, p in enumerate(planets):\n        x, y = p.update(star_mass)\n        ani_ax.scatter(x, y, c=p_colors[c])\n    ani_fig.savefig('.\/images\/' + str(i) + '.png')\n    ani_ax.clear()\n\n    \nprint('Compiling animation')\npng_dir = '.\/images'\nimages = []\nfor i in tqdm(range(n_itr)):\n    file_name = str(i) + '.png'\n    file_path = os.path.join(png_dir, file_name)\n    images.append(io.imread(file_path))\nio.mimsave('.\/movies\/multi_planets.gif', images, fps=10)","18d02ce3":"**Oribit animation** \\\nTo view the animation in this notebook, use ``![movie](.\/movies\/movie.gif)`` in a **new** markdown cell.","ac737f72":"![movie](.\/movies\/movie.gif)","56ed55f5":"# Visualisation\n\nNow to put it all together and visualise a made up solar system.\n\n## The star\n\nLet us start by defining the **star** in the origin$^1$ of a space. Our planet $p$ will orbit the edge of space, starting at $(2, 2)$.\n\n$1$ (Pertubated by an epsilon $\\epsilon$ for plotting.)","9307bbfc":"## Generate planet position history\n\nThis codes updates the planets orbit over a number of iterations, storing position and velocity values for animations, orbit plots and velocity graphs.","5f9c6042":"# Exercises for reader\n\nThis concludes the guide on simulating a planet orbiting a star. As you may notice, it isn't perfect. A few improvments are left as an exercise for the reader:\n> 1.  Evaluate the accuracy of the simulation by setting up a model solar system and comparing with real data\n2. Experiment with different star masses and initial planet velocities\n3. Implement moons that orbit planets\n4. Create a binary binary star system \n\n---\n\n### More planets animation","d73d2266":"# Planet simulation\n    \nWelcome all, here is a guide on how to create a simulation of planets orbiting a star using ordinary differential equations and ``matplotlib``. Enjoy! \n\n*Uncomment `# os.mkdir('.\/images')` to create an image folder, same applies for a `movies` folder.*","56421ddb":"# Maths\n\nUsing some [orbital maths](https:\/\/pages.vassar.edu\/magnes\/2016\/12\/09\/orbital-motion-of-our-solar-system\/) and differential equations, we can define update rules for both $x$ and $y$ components of a planet.\n\n$$\\frac{M_pv^2}{r} = \\frac{GM_sM_p}{r^2}$$\n\n$$V_{x,i} = V_{x, i-1} - \\frac{GM_s(-X_i)}{r_i^3} dt$$\n\n$$X_i = X_{i-1} + V_{x, i} dt$$\n\n$$V_{y,i} = V_{y, i-1} - \\frac{GM_s(-Y_i)}{r_i^3} dt$$\n\n$$Y_i = Y_{i-1} + V_{y, i} dt$$\n\nAs we can see, there are a few attributes for each planet: $x$ position and $y$ position ($\\text{AU}$). Using $G = 4\\pi^2 \\ \\text{AU}^2\\text{yr}^{-2}M_\\odot^{-1}$, we can translate these calculations into functions.\n\n","50d41a60":"![movie](.\/movies\/multi_planets.gif)","72722b59":"\n# Planet class\n\nTo store some atributes, we shall make a ``Planet`` class - and a position update rule. "}}