{"cell_type":{"53967af0":"code","689e5911":"code","3819265b":"code","f0a41d75":"code","de515d80":"code","baee74a7":"code","a22751d0":"code","2ea1f4f3":"code","0e7eed53":"code","900e84e9":"code","ec576656":"code","7e5e65bc":"code","2f02ef77":"code","21569111":"code","86b70727":"code","676f4f09":"code","c0d44710":"code","19323771":"code","c6883b12":"code","ee11c7dd":"code","50afba37":"code","8908fec9":"code","228ffde9":"code","dcb9f8e4":"code","a492cb7c":"code","0c1880c2":"code","5b5fb938":"code","d32e480c":"code","af86adc8":"code","41e800bd":"code","2dc6d89d":"code","d177d710":"code","44f239be":"code","1829b81e":"code","2a0994a9":"code","f3664a3c":"code","edaceef9":"code","5ec985c9":"code","f13b912b":"code","e41194f1":"code","7abe80cd":"code","7d978f01":"code","60887a77":"code","597c62f5":"code","9c3d3ec5":"code","33cf0036":"code","0d72c3cc":"code","53ad059b":"code","7bb8c787":"code","42a1dffe":"code","7698ccef":"code","5086c3cd":"code","cc0b07e5":"code","d31a8e33":"code","8c5cca34":"code","dc2a920e":"code","7cf943be":"code","5104b28a":"code","f984bc54":"code","b3530d2d":"code","b11d37a9":"code","2480052e":"code","9db779bf":"code","55f2c319":"code","4f02f90b":"code","187d42bf":"code","385ccf2c":"code","c989b125":"code","10f8d837":"code","5c4a9141":"code","49a2d6c8":"code","a3094d94":"code","424a165e":"code","cdb5b683":"code","2f36dc72":"code","a518db6c":"code","85d25754":"code","cda29ecf":"code","826b867e":"code","b05be324":"code","1df9f7ba":"code","309efdb3":"code","00a57ceb":"code","48e4fa04":"code","2cb45381":"code","c09d86d1":"code","7e8b8114":"code","6ef3ebe4":"code","78f4ee77":"code","e8f301db":"code","3ea9dc84":"code","d298efe2":"code","ad535480":"code","90b73783":"code","a1657ae3":"code","2dd79684":"code","616767b1":"code","04f50ae7":"code","4d9e1057":"code","cbe264f4":"code","27c98e45":"code","429004f8":"code","c03134bf":"code","56e8773f":"code","d6681035":"code","bde5cda2":"code","e13ec13a":"code","41d50597":"code","1cabe2fa":"code","b2ce9726":"code","b14073dc":"code","6cf1f87f":"code","f9af58e5":"code","a5d76781":"code","b821349d":"code","6ab6711a":"code","76bef7ac":"code","9ff0ebd6":"code","96191715":"code","876201a6":"code","9b6325ca":"code","fc063f3c":"code","7765aae0":"code","6d6ab5da":"code","3c8379ac":"code","0bfb0622":"code","e996eb28":"code","aa8b8672":"code","d31a0af7":"code","459da12a":"code","a9ab36ee":"code","143ba6c8":"code","16ea1013":"code","6d88a27a":"code","a011046d":"code","c837ef60":"code","9af70030":"code","3c937f0e":"code","4017f11a":"code","3b8ccd40":"code","6db8c6d9":"code","788802c5":"code","827578f5":"code","d94dc9f4":"code","d3ebe95e":"code","02ffb118":"code","03eb478b":"code","3194a14e":"code","dc21c4d7":"code","481027a0":"code","85c010f7":"code","4407fd9a":"code","472223d1":"code","f7a298e9":"code","8a16bc20":"code","6d34b006":"code","53325e7d":"code","d61ef043":"code","68ecf14d":"code","5079eb50":"code","69dd1361":"code","a3cdd111":"markdown","8916dbc0":"markdown","b985c40e":"markdown","0f5886fb":"markdown","ed61d39c":"markdown","228a3795":"markdown","4c05cb10":"markdown","d08d0007":"markdown","42c780ff":"markdown","76774f74":"markdown","fac271e8":"markdown","c2500a49":"markdown","92544a9c":"markdown","4d1a39cb":"markdown","d6ec3374":"markdown","a724a790":"markdown","b97422ff":"markdown","0abf57df":"markdown","866823c7":"markdown","e4c8cc2f":"markdown","3e4d58a4":"markdown","1df41b2c":"markdown","7d4e2d6a":"markdown","27d9c026":"markdown","8f8bffaf":"markdown","ba0bf27f":"markdown","f6a1e5f5":"markdown","34ea0d96":"markdown","37c319c9":"markdown","9ebd3537":"markdown","b7e3915c":"markdown","84a005fa":"markdown","7b39b804":"markdown","9b29f1ab":"markdown","09c08146":"markdown","be13e886":"markdown","98274ce4":"markdown","dcb2536e":"markdown","82022b45":"markdown","bebb1d5e":"markdown","2b6a817a":"markdown","9b9faf46":"markdown","7cdd9600":"markdown","b6d7c148":"markdown","34418412":"markdown","fc3e6207":"markdown","e8cf6c08":"markdown","e957f28f":"markdown","feae0884":"markdown","b7da6812":"markdown","6709d707":"markdown","7ce67968":"markdown","bb882e4f":"markdown","a11d1848":"markdown","bdc3d295":"markdown","d39ae4d3":"markdown","dc3b4a57":"markdown","41f55576":"markdown","0aeaf49a":"markdown","7a232266":"markdown","497814c4":"markdown","38a29d17":"markdown"},"source":{"53967af0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sea \nimport matplotlib.pyplot as plt\nfrom scipy.stats.mstats import normaltest\nfrom IPython.core.pylabtools import figsize\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","689e5911":"\npd.set_option('max_columns',None)\npd.set_option('max_rows',None)\ndf_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","3819265b":"# pd.set_option(\"max_columns\", None)\n# pd.set_option(\"max_rows\", None)\n","f0a41d75":"df_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","de515d80":"df_test.tail(3000)","baee74a7":"df = pd.concat([df_train ,df_test],axis = 0 , ignore_index=True)","a22751d0":"df.head()","2ea1f4f3":"print(df_train.shape)\nprint(df_test.shape)\nprint(df.shape)","0e7eed53":"df.describe()","900e84e9":"#statistical represenation for train set\ndf_train.describe()","ec576656":"#statistical represenation for test set\ndf_test.describe()","7e5e65bc":"\n\"\"\"\nfeatures with more Than 50% null values must be dropped \n--------------------------------------------------------\nAlley            93.831391%\nPoolQC           99.657417%\nFence            80.438506%\nMiscFeature      96.402878% \n\"\"\"\n\npd.set_option('max_rows',None)","2f02ef77":"df.isnull().mean()*100\n","21569111":"\ndfnull_train = df_train.isnull().sum()\nprint(dfnull_train)\n","86b70727":"\ndfnull_test = df_test.isnull().sum()\nprint(dfnull_test)","676f4f09":"df_train.hist(bins = 30, figsize = (30,30))\nplt.show()","c0d44710":"\ndf_train.head()\n","19323771":"\npd.set_option('max_rows',100) \ndf = df.drop(['Alley','Fence', 'MiscFeature','PoolQC'] , axis=1)","c6883b12":"\nprint(df_train.shape)\nprint(df_test.shape)\nprint(df.shape)","ee11c7dd":"\ndf.head()\n","50afba37":"\n\ndf_with_na = [features for features in df.columns if df[features].isnull().sum()>1]\nprint(df_with_na)","8908fec9":"for i in df_with_na:\n    data = df.copy()\n    data[i]= np.where(data[i].isnull(),1,0)\n    \n    data.groupby(i)['SalePrice'].median().plot.bar()\n    plt.title(i)\n    plt.show()","228ffde9":"\ncategorical_features = [feature for feature in df.columns if df[feature].dtypes == 'O']\nnumerical_features = [feature for feature in df.columns if df[feature].dtypes != 'O']\nyear_features = [feature for feature in df.columns if \"Yr\" in feature or \"Year\" in feature]\n\n#or we can use:\n#-------------------\n\n#-----NUMBERICAL------------------\nx_num = df.select_dtypes('number').columns","dcb9f8e4":"#-----Categorical------------------\nx_cate = df.select_dtypes('object').columns","a492cb7c":"df[categorical_features].head()","0c1880c2":"df[numerical_features].head()","5b5fb938":"\npd.set_option('max_rows',100)  # change 100 to None to see the full data \ndf.isnull().sum(axis=1)","d32e480c":"\n#histograme of FireplaceQu\ndf['FireplaceQu'].hist()\n\n","af86adc8":"df['FireplaceQu' ].describe()\n","41e800bd":"df['FireplaceQu'].value_counts()","2dc6d89d":"\npd.set_option('max_rows',100)\ndf['FireplaceQu'] = df['FireplaceQu'].fillna(\"Na\")","d177d710":"#histograme of LotFrontage \n\ndf['LotFrontage' ].describe()\n","44f239be":"df_test['LotFrontage' ].describe()","1829b81e":"# visualize for the LotFrontage feature where there is null values and it is float64\nsea.displot(df, x=\"LotFrontage\" , bins=30)\n\n","2a0994a9":"# fill null in LotFrontage with the mean\ndf['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].mean())","f3664a3c":"\ndf['MSZoning'].describe()","edaceef9":"df['MSZoning'].value_counts()","5ec985c9":"df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])","f13b912b":"#Dropping the Utilities Feature\n\npd.set_option('max_rows',10)\ndf['Utilities'].value_counts()\n","e41194f1":"sea.displot(df_train, x=\"Utilities\", bins =30)","7abe80cd":"df = df.drop(['Utilities'] , axis=1)","7d978f01":"# remove the single row where Exterior1st is null\ndf[df['Exterior1st'].isnull()].index.tolist()","60887a77":"df[df['Exterior1st'].isnull()]","597c62f5":"df = df.drop(df.index[df['Id'] == 2152])","9c3d3ec5":"df.isnull().sum()","33cf0036":"#replacing the null in MasVnrType\n#---------------------------------\ndf['MasVnrType'].describe()","0d72c3cc":"df[df['MasVnrType'].isnull()]","53ad059b":"sea.displot(df, x=\"MasVnrType\" , bins=30)","7bb8c787":"df['MasVnrType'].describe()","42a1dffe":"df['MasVnrType'] = df['MasVnrType'].fillna(\"None\")","7698ccef":"\ndf['MasVnrArea'].describe()","5086c3cd":"sea.displot(df, x=\"MasVnrArea\" , bins=30)\n","cc0b07e5":"df['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].mean())","d31a8e33":"\ndf['BsmtQual'].describe()\n\n","8c5cca34":"df['BsmtQual'].unique()","dc2a920e":"df[\"BsmtQual\"]","7cf943be":"sea.displot(df, x=\"BsmtQual\" , bins=30)","5104b28a":"#df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])","f984bc54":"df['BsmtQual'] = df['BsmtQual'].fillna(\"Na\")","b3530d2d":"df['BsmtQual'].describe()","b11d37a9":"\ndf['BsmtCond'].describe()","2480052e":"sea.displot(df_train , x=\"BsmtCond\" ,bins =30)","9db779bf":"#df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])","55f2c319":"df['BsmtCond'] = df['BsmtCond'].fillna(\"Na\")","4f02f90b":"#replace the null value in BsmtExposure\n#---------------------------------------\ndf['BsmtExposure'].describe()","187d42bf":"df['BsmtExposure']= df['BsmtExposure'].fillna(\"Na\")","385ccf2c":"\ndf['BsmtFinType1'].describe()\n","c989b125":"sea.displot(df_train, x=\"BsmtFinType1\" ,bins=30)","10f8d837":"df['BsmtFinType1'].describe()","5c4a9141":"#df['BsmtFinType1']= df['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0])","49a2d6c8":"df['BsmtFinType1']= df['BsmtFinType1'].fillna(\"Na\")","a3094d94":"\ndf['BsmtFinType2'].describe()","424a165e":"sea.displot(df, x=\"BsmtFinType2\" ,bins=30)","cdb5b683":"#df['BsmtFinType2']= df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])","2f36dc72":"df['BsmtFinType2']= df['BsmtFinType2'].fillna(\"Na\")","a518db6c":"\ndf['GarageType'].describe()","85d25754":"sea.displot(df , x=\"GarageType\" , bins = 50)","cda29ecf":"#df['GarageType']= df['GarageType'].fillna(df['GarageType'].mode()[0])","826b867e":"df['GarageType']= df['GarageType'].fillna(\"Na\")","b05be324":"\ndf['GarageYrBlt'].describe()","1df9f7ba":"sea.displot(df, x='GarageYrBlt',bins=50)\n\n","309efdb3":"i = df.query('GarageYrBlt == 2207').index\nprint(i)\n# looking for the index of the incorrect point","00a57ceb":"df.query('GarageYrBlt == 2007').shape","48e4fa04":"#correction of the value\ndf.at[2592,\"GarageYrBlt\"] =2007","2cb45381":"i = df.query('GarageYrBlt == 2207').index\nprint(i)\n","c09d86d1":"#if I want to delete the row of that incorrect point\n#df.drop(labels = i,inplace = True)","7e8b8114":"df.shape","6ef3ebe4":"#check of the existance of that value\n#------------------------------------\ndf.query('GarageYrBlt == 2207')\n","78f4ee77":"df['GarageYrBlt'].describe()","e8f301db":"#fill the Na values with the mean \n#-----------------------------------\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].mean())","3ea9dc84":"#Fill all Null values in GarageFinish\n#-----------------------------------\ndf['GarageFinish'].describe()","d298efe2":"sea.displot(df, x='GarageFinish', bins=30)","ad535480":"df['GarageFinish'].unique()","90b73783":"# Null to mode\n#-----------------\n#df['GarageFinish']= df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])","a1657ae3":"# Null to mode\n#-----------------\ndf['GarageFinish']= df['GarageFinish'].fillna(\"Na\")","2dd79684":"# Fill all the Null values in GarageQual\n#---------------------------------------\ndf['GarageQual'].describe()","616767b1":"sea.displot(df, x = \"GarageQual\" , bins =30)","04f50ae7":"#fill Null by mode\n#-----------------\n#df['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])","4d9e1057":"#fill Null by mode\n#-----------------\ndf['GarageQual'] = df['GarageQual'].fillna(\"Na\")","cbe264f4":"# Fill all the Null values in GarageCond\n#---------------------------------------\ndf['GarageCond'].describe()","27c98e45":"sea.displot(df, x=\"GarageCond\", bins=30)","429004f8":"#df['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])","c03134bf":"df['GarageCond'] = df['GarageCond'].fillna(\"Na\")","56e8773f":"pd.set_option('max_row' , 100 )\ndf.isnull().sum()","d6681035":"df.head()","bde5cda2":"\ndf_train_clean = df.iloc[0:1460 , 1::]\ndf_test_clean =  df.iloc[1460:: , 1:75]\n\nprint(df_train_clean.shape)\nprint(df_test_clean.shape)\n","e13ec13a":"df_train_clean.isnull().sum()","41d50597":"df_test_clean.isnull().sum()","1cabe2fa":"df_test_clean.dropna(axis= 0 , inplace =True)","b2ce9726":"df_test_clean.isnull().sum()","b14073dc":"df_test_clean.shape","6cf1f87f":"df_train_clean.head()","f9af58e5":"df_test_clean.head()","a5d76781":"df_train_clean.hist(bins = 30, figsize=(30,30))\nplt.show()","b821349d":"df_test_clean.hist(bins = 30, figsize=(30,30))\nplt.show()","6ab6711a":"\ndf_train_clean.drop(['MiscVal' , 'PoolArea', 'ScreenPorch', '3SsnPorch' , 'KitchenAbvGr' , 'BsmtFinSF2', 'BsmtHalfBath' , 'LowQualFinSF', 'EnclosedPorch' ,'MoSold'], axis=1 ,inplace= True )\n\n","76bef7ac":"df_test_clean.drop(['MiscVal' , 'PoolArea', 'ScreenPorch', '3SsnPorch' , 'KitchenAbvGr' , 'BsmtFinSF2', 'BsmtHalfBath' , 'LowQualFinSF', 'EnclosedPorch','MoSold' ], axis=1 ,inplace= True )","9ff0ebd6":"df_train_clean.info()","96191715":"\ny_train = df_train_clean[\"SalePrice\"]","876201a6":"y_train.head()","9b6325ca":"y_train.shape","fc063f3c":"x_train = df_train_clean.iloc[::, :-1]","7765aae0":"x_train.shape","6d6ab5da":"x_train.head()","3c8379ac":"x_test = df_test_clean.iloc[::, ::]\nx_test.head()\n","0bfb0622":"x_test.shape","e996eb28":"print( (x_test.dtypes == \"object\").sum())\nprint((x_test.dtypes != \"object\").sum())","aa8b8672":"\ndf_train_clean.groupby(\"YrSold\")[\"SalePrice\"].median().plot()\nplt.xlabel(\"Year Sold\")\nplt.ylabel(\"Median House Price\")\nplt.rcParams[\"figure.figsize\"] = (15,15)\n                                  ","d31a0af7":"for col in x_test:\n  if(x_train[col].dtypes != \"object\"):\n    continue\n  l = len(x_train[col].unique())\n  print(col + \" \" + str(l)) ","459da12a":"normaltest(x_train[\"GarageArea\"])\n# to check for any numerical feature this is the normal distribution test","a9ab36ee":"\nx_train_num_features = x_train.select_dtypes('number').columns\nx_train_cate_features = x_train.select_dtypes('object').columns\n\n\nx_test_num_features = x_test.select_dtypes('number').columns\nx_test_cate_features = x_test.select_dtypes('object').columns\n\n# Training set\n#----------------\nx_train_num = x_train[x_train_num_features]\nx_train_cate = x_train[x_train_cate_features]\n\n# Test Set\n#---------------\nx_test_num = x_test[x_test_num_features]\nx_test_cate = x_test[x_test_cate_features]\n\nprint(\"train set\")\nprint(x_train_cate.shape)\nprint(x_train_num.shape)\nprint(\"test set\")\nprint(x_test_cate.shape)\nprint(x_test_num.shape)\n#################################################################################################################################################\n\n\n\n# Concat the categorical features (Object) with the numerical categorical features(Number)\n# x_train_cate = pd.concat([x_train_cate, x_train['MSSubClass'], x_train['OverallQual'],x_train['OverallCond']], keys=[\"MSSubClass\",\"OverallQual\" ,\"OverallCond\"] ,axis=1, ignore_index=True)\n# x_train_num = x_train_num.drop([\"MSSubClass\",\"OverallQual\" , \"OverallCond\"]) axis=1)\n# x_test_cate = pd.concat([x_test_cate, x_test['MSSubClass'], x_test['OverallQual'],x_test['OverallCond']], keys=[\"MSSubClass\",\"OverallQual\" ,\"OverallCond\"], axis=1, ignore_index=True)\n# x_test_num = x_test_num.drop([\"MSSubClass\",\"OverallQual\" , \"OverallCond\"], axis=1)\n    \n\n","143ba6c8":"\nx_train_test_num = pd.concat([x_train_num, x_test_num], axis=0)\nx_train_test_cate = pd.concat([x_train_cate, x_test_cate], axis=0)","16ea1013":"print(x_train_test_cate.shape)\nprint(x_train_test_num.shape)","6d88a27a":"for col in x_train_test_cate:\n   top_10 = [i for i in x_train_test_cate[col].value_counts().sort_values(ascending=False).head(10).index]\n   for j in top_10:\n     x_train_test_cate[j]= np.where(x_train_test_cate[col]== j , 1 , 0)\n   x_train_test_cate[[col]+ top_10]\n   ","a011046d":"x_train_test_cate.shape","c837ef60":"x_train_test_cate_encoded = x_train_test_cate.copy()\nx_train_test_cate_encoded.head()","9af70030":"keys = [x_train_test_cate.select_dtypes('object').columns]\nkeys.append(\"MSSubclass\")\nkeys.append(\"OverallQual\")\nkeys.append(\"OverallCond\")\nprint(keys)\n","3c937f0e":"x_train_test_cate_encoded= pd.concat([ x_train_test_cate_encoded,  x_train_test_num['MSSubClass'], x_train_test_num['OverallQual'], x_train_test_num['OverallCond']],axis=1, ignore_index=True)\nx_train_test_cate_encoded.tail()\n# x_train_test_cate_encoded.head()","4017f11a":"x_train_cate_encoded = x_train_test_cate_encoded.iloc[0:1460, ::]\nx_test_cate_encoded =  x_train_test_cate_encoded.iloc[1460:, ::]\nprint(x_train_cate_encoded.shape)\nprint(x_test_cate_encoded.shape)","3b8ccd40":"x_train_cate_encoded.drop(x_train_cate_encoded.columns[0:38], axis=1, inplace=True)\nx_test_cate_encoded.drop(x_test_cate_encoded.columns[0:38], axis=1 ,inplace=True)\n","6db8c6d9":"print(x_train_cate_encoded.shape)\nprint(x_test_cate_encoded.shape)","788802c5":"x_train_cate_encoded.shape","827578f5":"from sklearn.preprocessing import MinMaxScaler\nminmax = MinMaxScaler()\nnp.set_printoptions(precision=3)\nXTRAIN_Encoded_Categorical = x_train_cate_encoded.to_numpy()\nXTEST_Encoded_Categorical = x_test_cate_encoded.to_numpy()\n\ntrain_last_3 = XTRAIN_Encoded_Categorical[::, 146:149]\ntest_last_3 = XTEST_Encoded_Categorical[::,146:149]\n\n\n\n\n\ntrain_last_3_scaler = minmax.fit_transform(train_last_3)\ntest_last_3_scaler = minmax.transform(test_last_3)\n\n\n\nXTRAIN_Categorical_SCAL = np.append(XTRAIN_Encoded_Categorical, train_last_3_scaler ,axis=1)\nXTEST_Categorical_SCAL = np.append(XTEST_Encoded_Categorical, test_last_3_scaler , axis=1)\n\nprint(XTRAIN_Categorical_SCAL.shape)\nprint(XTEST_Categorical_SCAL.shape)","d94dc9f4":"x_train_test_num.shape","d3ebe95e":"x_train_test_num_encoded = x_train_test_num.copy()\nx_train_test_num_encoded.drop(['MSSubClass', 'OverallQual',\t'OverallCond'], inplace=True ,axis=1)\n\nx_train_num_encoded = x_train_test_num_encoded.iloc[0:1460, ::]\nx_test_num_encoded =  x_train_test_num_encoded.iloc[1460:, ::]\n","02ffb118":"x_train_num_encoded.head()","03eb478b":"min_max_num = MinMaxScaler()\n\nXTRAIN_Encoded_NUM= x_train_num_encoded.to_numpy()\nXTEST_Encoded_NUM = x_test_num_encoded.to_numpy()\n\n\nXTRAIN_NUM_SCAL = min_max_num.fit_transform(XTRAIN_Encoded_NUM)\nXTEST_NUM_SCAL = min_max_num.transform(XTEST_Encoded_NUM) \n","3194a14e":"\nXTRAIN = np.concatenate([XTRAIN_NUM_SCAL,XTRAIN_Categorical_SCAL], axis=1)\nXTEST = np.concatenate([XTEST_Categorical_SCAL,XTEST_NUM_SCAL], axis=1)\n\n\n\nprint(XTEST.shape)\nprint(XTRAIN.shape)\nprint(y_train.shape)","dc21c4d7":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\npf = PolynomialFeatures()\nlr = LinearRegression()\n\nlr = lr.fit(XTRAIN,y_train)\ny_pred_train = np.round(lr.predict(XTRAIN))\ny_pred_train_abs = np.abs(y_pred_train)\ny_pred_test =lr.predict(XTEST)\ny_pred_test = np.array(y_pred_test)\n\n# y_pred_train =y_pred_train.astype(int)\n# y_pred_test =y_pred_test.astype(int)\n\ny_pred_Train_DF = pd.DataFrame(y_pred_train, columns=[\"Y_PREDICTED_TRAIN\"])\ny_pred_Test_DF = pd.DataFrame(y_pred_test, columns=[\"Y_PREDICTED_TEST\"])\n\n\n# evalutation of the model using RMSE\nRMSE_LR = mean_squared_error(y_train,y_pred_train)\nR2_LR = r2_score(y_train,y_pred_train)\nprint(np.sqrt(RMSE_LR ))\nprint(R2_LR)\n \n","481027a0":"y_train_Real = pd.DataFrame(y_train)\ny_pred_Train_DF_Plus_y_Train = np.concatenate([y_pred_Train_DF,y_train_Real], axis=1)\ny_pred_Train_DF_Plus_y_Train = pd.DataFrame(y_pred_Train_DF_Plus_y_Train , columns=[\"Y PREDICTED From Train Set\", \"Y Real Of Train Set\"])\n\ny_pred_Train_DF_Plus_y_Train.tail(30)","85c010f7":"X_POLY_TRAIN = pf.fit_transform(XTRAIN)\nX_POLY_TEST = pf.fit_transform(XTEST)\n\nlr_poly = LinearRegression()\nlr_poly.fit(X_POLY_TRAIN , y_train)\n\ny_pred_poly_Train = lr_poly.predict(X_POLY_TRAIN)\ny_pred_poly_Test = lr_poly.predict(X_POLY_TEST)\n\nRMSE_Poly_LR = mean_squared_error(y_train,y_pred_poly_Train)\nR2_Poly_LR = r2_score(y_train,y_pred_poly_Train)\n\n\nprint(RMSE_Poly_LR)\nprint(R2_Poly_LR)","4407fd9a":"y_hat_poly = np.abs(y_pred_poly_Test)\n","472223d1":"from sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import RidgeCV\nalfa = [ 0.005, 0.05 , 0.1 , 0.3, 1 , 3 , 5 , 10 , 15 , 30 ,40]\n\n\nridge = RidgeCV(alphas = alfa, cv = 4).fit(XTRAIN, y_train)\n\ny_hat = ridge.predict(XTEST)\n\n\n\nR2_Ridge = r2_score(y_train , ridge.predict(XTRAIN))\n\nrmse_Ridge = mean_squared_error(y_train, ridge.predict(XTRAIN))\n\nprint(R2_Ridge)\nprint(np.sqrt(rmse_Ridge))\n","f7a298e9":"alfa = [0.005,0.05,0.1, 1 , 5, 20,50,80,100,120,140]\nlasso = LassoCV(alphas=alfa , cv=4, max_iter=5e4).fit(XTRAIN,y_train)\n\nR2_Lasso = r2_score(y_train, lasso.predict(XTRAIN))\nrmse_Lasso = mean_squared_error(y_train, lasso.predict(XTRAIN))\n\nprint(R2_Lasso)\nprint(np.sqrt(rmse_Lasso))","8a16bc20":"Algo = [\"LinearRegression\", \"Polynomial LR\", \"LASSO Regression\", \"RIDGE Regression\"]\nRMSE = [RMSE_LR,(RMSE_Poly_LR),(rmse_Lasso),rmse_Ridge]\nR2_SCORE = [(R2_LR),(R2_Poly_LR),(R2_Lasso),(R2_Ridge)]\n\nprint(RMSE)\n\npd.DataFrame([RMSE,R2_SCORE], columns=[Algo], index=[\"RMSE\",\"R2_SCORE\"])","6d34b006":"from sklearn.model_selection import train_test_split\nX_TR , X_TT,  Y_TR, Y_TT = train_test_split(XTRAIN, y_train, test_size=0.3, random_state=42)","53325e7d":"l_regressor = LinearRegression()\npoly = PolynomialFeatures()\n\n\n### LINEAR MODEL ####\n###########################################\nl_regressor= l_regressor.fit(X_TR,Y_TR)\nY_M1_P = l_regressor.predict(X_TT)\n\nrmse_m1= np.sqrt(mean_squared_error(Y_TT,Y_M1_P))\nr2_m1 = r2_score(Y_TT,Y_M1_P)\n\nprint(\"LINEAR REGRESSION EVALUATION\")\nprint(rmse_m1)\nprint(r2_m1)\n\n#-------------------------------------------------------------------------------------------\nprint()\n########    POLYNOMIAL LR ###################\n\nX_TR_POLY = poly.fit_transform(X_TR)\nX_TT_POLY = poly.fit_transform(X_TT)\n\nreg_poly = LinearRegression()\nreg_poly.fit(X_TR_POLY, Y_TR)\n\nY_poly_PRED = reg_poly.predict(X_TT_POLY)\n\n\nrmse_m2= np.sqrt(mean_squared_error(Y_TT, Y_poly_PRED)) \nr2_m2 = r2_score(Y_TT, Y_poly_PRED)\nprint()\nprint(\"POLYNOMIAL LINEAR REGRESSION EVALUATION\")\nprint(rmse_m2)\nprint(r2_m2)\n\n#-----------------------------------------------------------------\nprint()\n###### LASSO REGRESSION ##############################\nalfa = [0.005,0.05,0.1, 1 , 5, 20,50,80,100,120,140]\nlasso_m3 = LassoCV(alphas=alfa , cv=4, max_iter=5e4).fit(X_TR,Y_TR)\n\nr2_m3= r2_score(Y_TT, lasso.predict(X_TT))\nrmse_m3 = np.sqrt(mean_squared_error(Y_TT, lasso.predict(X_TT)))\nprint(\"LASSO REGRESSION EVALUTION MODEL\")\nprint(r2_m3)\nprint(rmse_m3)\n\n#--------------------------------------------------------------------------\nprint()\n###### RIDGE REGRESSION ##############################\n\nalfa = [ 0.005, 0.05 , 0.1 , 0.3, 1 , 3 , 5 , 10 , 15 , 30 ,40]\n\nridge_m4 = RidgeCV(alphas = alfa, cv = 4).fit(X_TR, Y_TR)\n\nr2_m4 = r2_score(Y_TT , ridge.predict(X_TT))\nrmse_m4 = np.sqrt(mean_squared_error(Y_TT, ridge.predict(X_TT)))\nprint(\"RIDGE REGRESSION EVALUTION MODEL\")\nprint(r2_m4)\nprint(rmse_m4)\n\n","d61ef043":"Algo = [\"LinearRegression\", \"Polynomial LR\", \"LASSO Regression\", \"RIDGE Regression\"]\nRMSE_FULL = [rmse_m1,rmse_m2,rmse_m3,rmse_m4]\nR2_SCORE_FULL = [r2_m1,r2_m2,r2_m3,r2_m4]\n\n\npd.DataFrame([RMSE_FULL,R2_SCORE_FULL], columns=[Algo], index=[\"RMSE\",\"R2_SCORE\"])","68ecf14d":"Sale_Price = np.abs(lasso_m3.predict(XTEST))\nSale_Price = Sale_Price.astype(int)\nindex = range(1461,2912)\nout = pd.DataFrame(Sale_Price, columns=['Sale Price'], index=index)\nout.head()\nout.to_csv('House Pricing final.csv')","5079eb50":"out.head()","69dd1361":"# np.set_printoptions(threshold=np.inf)\n\n\n","a3cdd111":"# Dropping features with more than 80% values' null","8916dbc0":"# **Feature Scaling**","b985c40e":"as we can see from the above two cells that MSZoning has 2265 data point of RL values so I decide to repalce the 4 null values in the data set into RL ","0f5886fb":"# **Training The LINEAR REGRESSION Model**","ed61d39c":"# Fill the null in LotFrontage with the mean","228a3795":"# Percentage of the null values in each feature","4c05cb10":"# Features with null values","d08d0007":"# Remaning Categorical Features: (37)\n\nStreet\nLotShape\nLandContour\nLotConfig\nLandSlope\nNeighborhood\nCondition1\nCondition2\nBldgType\nHouseStyle\nRoofStyle\t\nRoofMatl\nExterior1st\nExterior2nd\nMasVnrType\nExterQual\t\nExterCond\nFoundation\nBsmtQual\nBsmtCond\nBsmtExposure\t\nBsmtFinType1\nBsmtFinType2\nHeating\nHeatingQC\nCentralAir\nElectrical\t\nKitchenQual\nFunctional\nFireplaceQu\nGarageType\t\nGarageFinish\t\nGarageQual\nGarageCond\nPavedDrive\nSaleType\nSaleCondition","42c780ff":"# **Preprocessing Phase**","76774f74":"# Dropping the above features from the train set and test set","fac271e8":"# **Discussion of the Result**","c2500a49":"# Looking for the shapes\n\n\n\n","92544a9c":"As we can see there is a data point have a GarageYrBlt value = 2207.\nto solve this either drop this row or change the value to 2007.","4d1a39cb":"\ncategorical deatures:\nMSZoning \nStreet \nAlley \nLotShape\nLandContour\nUtilities\nLotConfig\nLandSlope\nNeighborhood\nCondition1\nCondition2\nBldgType\nHouseStyle\nRoofStyle\t\nRoofMatl\nExterior1st\nExterior2nd\nMasVnrType\nExterQual\t\nExterCond\nFoundation\nBsmtQual\nBsmtCond\nBsmtExposure\t\nBsmtFinType1\nBsmtFinType2\nHeating\nHeatingQC\nCentralAir\nElectrical\t\nKitchenQual\nFunctional\nFireplaceQu\nGarageType\t\nGarageFinish\t\nGarageQual\nGarageCond\nPavedDrive\nPoolQC\nFence\nMiscFeature\nSaleType\nSaleCondition\n","d6ec3374":"# Single null data point in GarageType","a724a790":"# **Scalling the Numerical Features in the TRAIN AND TEST DATA FRAME**","b97422ff":"# Split the df intro y_train and x_train","0abf57df":"# **FrequencyEncoding Vs Multi classes OneHoEncoding Encoding**","866823c7":"# Replace the null value in BsmtFinType1","e4c8cc2f":"# Replace the null value in FireplaceQu by the mode ","3e4d58a4":"After we Visualize the histograms of both Test and Train sets. We Recognize that the following:\n1-features MiscVal\n2-PoolArea\n3-ScreenPorch\n4-3SnsPorch\n5-KitchenAbvGr \n6-BsmtFinSF2\n7-BsmHalfBath\n8-LowQualFinSF\n9-EnclosedPorch\n\n'MiscVal' , 'PoolArea', 'ScreenPorch', '3SsnPorch' , 'KitchenAbvGr' , 'BsmtFinSF2', 'BsmtHalfBath' , 'LowQualFinSF', 'EnclosedPorch'\n\nneed to drop from the data sets","1df41b2c":"# Importing the test set data","7d4e2d6a":"**In this Note Book we will predict the house pricing based on 81 diffrent features**","27d9c026":" # GaragaYrBlt has incorrect value on one data point (2207) \nsolution of this problem: remove the row of that data point or correct the value to 2007","8f8bffaf":"# categorical features and numerical features\n","ba0bf27f":"# Replace the null value by the mean of the feature MasVnrType","f6a1e5f5":"# **FUTUR WORK**","34ea0d96":"in addition to use these 4 models in linear regression, I will continue my analysis and the next step is to use xgboost for advanced regression technique to compare such model with the previous ones.","37c319c9":"# Replace the null value in BsmtQual","9ebd3537":"# **Comparing the RESULTS**","b7e3915c":"when the p value of normal test is >0.05 then the data is normal distribution else the data come from non real distribution","84a005fa":"# Fill na in GarageYrBlt\n","7b39b804":"MSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\nMSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density\n\t\nLotFrontage: Linear feet of street connected to property\n\nLotArea: Lot size in square feet\n\nStreet: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved\n       \t\nAlley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access\n\t\t\nLotShape: General shape of property\n\n       Reg\tRegular\t\n       IR1\tSlightly irregular\n       IR2\tModerately Irregular\n       IR3\tIrregular\n       \nLandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression\n\t\t\nUtilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t\n\t\nLotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property\n\t\nLandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope\n\t\nNeighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker\n\t\t\t\nCondition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nCondition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nBldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit\n\t\nHouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level\n\t\nOverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\nOverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\t\nYearBuilt: Original construction date\n\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\nRoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed\n\t\t\nRoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles\n\t\t\nExterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nExterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nMasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n\t\nMasVnrArea: Masonry veneer area in square feet\n\nExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nFoundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood\n\t\t\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area\n\nHeating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnace\n\t\t\nHeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nCentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes\n\t\t\nElectrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed\n\t\t\n1stFlrSF: First Floor square feet\n \n2ndFlrSF: Second floor square feet\n\nLowQualFinSF: Low quality finished square feet (all floors)\n\nGrLivArea: Above grade (ground) living area square feet\n\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms\n\nFullBath: Full bathrooms above grade\n\nHalfBath: Half baths above grade\n\nBedroom: Bedrooms above grade (does NOT include basement bedrooms)\n\nKitchen: Kitchens above grade\n\nKitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       \t\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only\n\t\t\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarageYrBlt: Year garage was built\n\t\t\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarageCars: Size of garage in car capacity\n\nGarageArea: Size of garage in square feet\n\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nPavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel\n\t\t\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\t\t\nFence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n\t\t\nMiscVal: $Value of miscellaneous feature\n\nMoSold: Month Sold (MM)\n\nYrSold: Year Sold (YYYY)\n\nSaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther\n\t\t\nSaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)","9b29f1ab":"# Finding the year where the sold was in the maxium","09c08146":"# visualizing the features that contain null values with respect to salesprice, inspecting these barchart to know how the sales is the null values in each categories ","be13e886":"**RECOMBINE THE CATEGORICAL AND THE NUMERICAL IN TEST AND TRAIN SET**","98274ce4":"# Replace the null value in BsmtCond ","dcb2536e":"**Spliting the encoded data frame into train and test set**","82022b45":"**Taking the Top 10 Classes from each feature and Apply one hot encoding process**","bebb1d5e":"# **Recombine the test and the train sets into all numerical and all categorical features**","2b6a817a":"# Statistical represenation for train+test set","9b9faf46":"# **Scalling the Last 3 categorical features in test and train set using MINMAX Scaller**","7cdd9600":"# inspecting the rows in data set, if there are more than 50% null values, then we have to drop these rows\n","b6d7c148":"# preprocessing phase\n# Cleaning the null data from the data sets\n","34418412":"# Concatenate train and test test togethor","fc3e6207":"**Removing the first 38 columns from the data set**","e8cf6c08":"# Feature Selection","e957f28f":" # Splitting the data frame into train and test set","feae0884":"**RIDGE Regularization**","b7da6812":"# Importing the train set data","6709d707":"# **REGULARIZATION LINEAR REGRESSION WITH HYPERPARAMETER**","7ce67968":"**splitting the data into object and numerical in both test and train set**","bb882e4f":"# **Training the Polynomial Linear Regression Model**","a11d1848":"# The shape of the data set after dropping the columns where more than 80% of tha values are Nun","bdc3d295":"After we apply 4 different models of the linear regression and after we calculate the root mean square error in addition to the r2_score of each model comparing the  Y_hat (predicted) vs the Y-train from the train data set \n\nusing regularization lasso and ridge L1 and L2 will imporve  the result of the \nr2_ score and hence the performance of the model will be much better than linear or polynomial regression.\n\nThe next step right now is to use XGBOOST advanced model.","d39ae4d3":"**LASSO REGULARIZATION**","dc3b4a57":"# Fill null in MSZoning","41f55576":"**ADD the Numerical columns that are behave as categorical from num set into cate set**","0aeaf49a":"# Inspecting the feature FireplaceQu","7a232266":"**Check the Normal Distribution**","497814c4":"# Replace the null value in BsmtFinType1","38a29d17":"after I inspect the Utilities feature I found that there are 2916 data points take 'Allpub' value and 1 data point takes 'NoSeWa' value so the other 2 are null. I thought that there is not any effect of this feature on the price of the houses. I will drop it "}}