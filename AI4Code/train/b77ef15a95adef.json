{"cell_type":{"58ef3167":"code","399ba59a":"code","31989b06":"code","961e81c7":"markdown"},"source":{"58ef3167":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport os\n#print(os.listdir(\"..\/input\"))","399ba59a":"def pi_montecarlo(n, n_exp):\n    pi_avg = 0\n    pi_value_list = []\n    for i in range(n_exp):\n        value = 0\n        x = np.random.uniform(0, 1, n).tolist()\n        y = np.random.uniform(0, 1, n).tolist()\n        for j in range(n):\n            z = np.sqrt(x[j]*x[j] + y[j]*y[j])\n            if z<1:\n                value += 1\n        float_value = float(value)\n        pi_value = float_value * 4\/n\n        pi_value_list.append(pi_value)\n        pi_avg += pi_value\n\n    pi = pi_avg\/n_exp\n\n    print(pi)\n    fig = plt.plot(pi_value_list)\n    return (pi, fig)","31989b06":"pi_montecarlo(10000, 2000)","961e81c7":"**Experiment to generate the value of PI:**\n    \n1. Generate 2 uniform random numbers between 0 and 1 in total 1000 times.\n<br>\n2. Calculate x\u00b2 + y\u00b2: \n<br>\n2.1 If the value is less than 1 -> we are inside the circle\n<br>\n2.2 If the value is greater than 1 -> we are out of the circle\n\n3. We calculate the total number of times they are inside the circle and divide it by the total number of attempts to get an approximation of the probability of falling into the circle\n\n4. We use this probability to approximate the value of PI\n5. We repeat the experiment a sufficient number of times (Ex: 100 times), to obtain (100) approximations of the PI value\n6. We calculate the average of the previous 100 experiments to give a final value to PI\n\n"}}