{"cell_type":{"420d3c8b":"code","dbbf0d7e":"code","0b9cd4b4":"code","d72aa906":"code","828dc8c9":"code","410859d3":"code","89400757":"code","40c59af7":"code","23fd3e45":"code","35f4cc2e":"code","fa3d6388":"code","21a3902e":"code","48dd4017":"code","4c86fbfe":"code","15aa7892":"code","4d54e36e":"code","2d49b658":"code","537446ae":"code","8f585658":"code","1828960c":"code","0b653fc4":"code","2e272706":"code","34a67b78":"code","6c4067c5":"code","45aa70bd":"code","5683378d":"code","6ed503b9":"code","0f645ff0":"code","a57dbdf2":"code","65a668fb":"code","22876b02":"code","54ee6b96":"code","b0abcada":"code","1e12731d":"code","9688a7c3":"code","fb6048c8":"code","b4c5b7d2":"code","cf543080":"code","b8533d54":"code","518e19f5":"code","f3f0e34c":"code","a068bf45":"markdown","3ef0ad43":"markdown","58126460":"markdown","db653860":"markdown","5f71c2a9":"markdown","60ecc198":"markdown","89505061":"markdown","69725550":"markdown","28b84163":"markdown","7e60feda":"markdown","e8d5195b":"markdown","78dad922":"markdown","6358f622":"markdown","97c3f818":"markdown","8318cca0":"markdown"},"source":{"420d3c8b":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\nfrom datetime import date\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dbbf0d7e":"data = pd.read_csv('\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv')\nprint(data.shape)\ndata.head()","0b9cd4b4":"data.info()","d72aa906":"data.describe()","828dc8c9":"categorical = [var for var in data.columns if data[var].dtype=='O']\nprint('There are {} categorical variables'.format(len(categorical)))\nprint('The categorical variables are :', categorical)","410859d3":"for var in categorical: \n    print(data[var].value_counts())\n    print(data[var].value_counts()\/np.float(len(data)))\n    print()","89400757":"data['PlacedOrNot'].value_counts()","40c59af7":"colors=('#c2c2f0','#ffb3e6')\nexplode=[0,0.1]\ndata['PlacedOrNot'].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of Placed')\nplt.show()","23fd3e45":"plt.figure(figsize=(12,6))\nplt.title('Correlation between variables')\nsns.heatmap(data.corr(),annot=True,square=True,cmap='Reds')","35f4cc2e":"numcorr = data.corr()\nNum = numcorr['PlacedOrNot'].sort_values(ascending=False).to_frame()\ns = Num.style.background_gradient(cmap='Reds')\ns","fa3d6388":"sns.displot(data['Age'],rug=True)\nplt.show()\n\nsns.displot(data['CGPA'])\nplt.show()","21a3902e":"sns.jointplot(x=data['Age'],y=data['CGPA'],hue=data['PlacedOrNot'])","48dd4017":"data.describe()","4c86fbfe":"data.describe(include='object')","15aa7892":"plt.figure(figsize=(8,4))\nplt.title('count of Hostel colored by placed')\nsns.countplot(data=data,x='Hostel',hue='PlacedOrNot')","4d54e36e":"plt.figure(figsize=(8,4))\nplt.title('count of History Of Backlogs colored by placed')\nsns.countplot(data=data,x='HistoryOfBacklogs',hue='PlacedOrNot')","2d49b658":"plt.figure(figsize=(8,4))\nplt.title('count of Gender colored by placed')\nsns.countplot(data=data,x='Gender',hue='PlacedOrNot')","537446ae":"plt.figure(figsize=(8,4))\nplt.title('count of Stream colored by placed')\nsns.countplot(data=data,x='Stream',hue='PlacedOrNot')\nplt.xticks(rotation=90)","8f585658":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \ndata['Gender'] = label_encoder.fit_transform(data['Gender'])","1828960c":"print(data['Stream'].unique())","0b653fc4":"data = pd.get_dummies(data=data,columns=['Stream'])\ndata.head()","2e272706":"features = data.drop('PlacedOrNot',axis=1)\ntarget = data['PlacedOrNot']","34a67b78":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler() \nscaled_values = scaler.fit_transform(features) \nfeatures.loc[:,:] = scaled_values\nfeatures.head()","6c4067c5":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(features,target,test_size=0.2,random_state=0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","45aa70bd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","5683378d":"def fit_and_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(0)\n    \n    model_scores = {}\n    \n    for name, model in models.items():\n        model.fit(X_train,y_train)\n        model_scores[name] = model.score(X_test,y_test)\n\n    model_scores = pd.DataFrame(model_scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score')\n        \n    return model_scores","6ed503b9":"models = {'LogisticRegression': LogisticRegression(),\n          'KNeighborsClassifier': KNeighborsClassifier(),\n          'SVC': SVC(),\n          'DecisionTreeClassifier': DecisionTreeClassifier(),\n          'RandomForestClassifier': RandomForestClassifier(),\n          'XGBClassifier': XGBClassifier()}","0f645ff0":"model_scores = fit_and_score(models, X_train, X_test, y_train, y_test)","a57dbdf2":"model_scores.sort_values('Score')","65a668fb":"from sklearn.model_selection import RandomizedSearchCV","22876b02":"def randomsearch_cv_scores(models, params, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    \n    model_rs_scores = {}\n    model_rs_best_param = {}\n    \n    for name, model in models.items():\n        rs_model = RandomizedSearchCV(model,\n                                     param_distributions=params[name],\n                                      cv=5,\n                                     n_iter=20,n_jobs=-1,\n                                     verbose=2)        \n        rs_model.fit(X_train,y_train)\n        model_rs_scores[name] = rs_model.score(X_test,y_test)\n        model_rs_best_param[name] = rs_model.best_params_\n        \n    return model_rs_scores, model_rs_best_param","54ee6b96":"models = {'SVC': SVC()}\n\nparams = {'SVC':{'C': [0.1,0.5,1,10,100,500], \n              'kernel':['linear', 'poly', 'rbf','sigmoid'],\n              'gamma':['scale','auto'],\n              'degree':[2,3,4]}}","b0abcada":"model_rs_scores,model_rs_best_param = randomsearch_cv_scores(models,params,X_train,X_test,y_train,y_test)","1e12731d":"model_rs_scores","9688a7c3":"model_rs_best_param","fb6048c8":"from sklearn.metrics import classification_report,plot_confusion_matrix,plot_roc_curve\nfrom sklearn.model_selection import cross_val_score","b4c5b7d2":"model = SVC(kernel='rbf',gamma='scale',degree=3,C=10)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","cf543080":"print(classification_report(y_test,y_pred))","b8533d54":"plot_confusion_matrix(model,X_train,y_train,cmap='Purples')","518e19f5":"cv_accuracy = cross_val_score(model,X_train,y_train,cv=5,scoring='accuracy')\n\nprint(f'Cross Validaion accuracy Scores: {cv_accuracy}')\nprint(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')","f3f0e34c":"plot_roc_curve(model,X_test,y_test)","a068bf45":"## 2. Exploratory Data Analysis","3ef0ad43":"#### HyperTuning by Grid search CV","58126460":"#### Dummy Variable Encoding","db653860":"#### Split train and test data","5f71c2a9":"## 1. Reading Dataset","60ecc198":"**Univariate Distribution and Bivariate Distribution**","89505061":"## 5. Model Evalution","69725550":"From the baseline modeling, I will choose **SVC** to have a closer look","28b84163":"**Correlation between numerical features**","7e60feda":"#### Label Encoding","e8d5195b":"#### Model Training","78dad922":"## 4. Building Model","6358f622":"**Pie chart for target**","97c3f818":"## 3. Data Preprocessing","8318cca0":"**Visualization for Categorical Variables**\n\n* Hostel contains 2 labels\n* HistoryOfBacklogs contains 2 labels\n* Gender contains 2 labels\n* Stream contains 6 labels"}}