{"cell_type":{"a7aebd23":"code","99a6c800":"code","6879cbb1":"code","2454ff5d":"code","cde3dc2a":"code","1d70f566":"code","f0fc8f49":"code","5c37a78f":"code","9eeb78a4":"code","401703b8":"code","7b59a5a0":"code","a5968b89":"code","3e602ceb":"code","16874cd8":"code","88fa391b":"code","0516b31c":"code","fb3499d1":"code","059b0158":"code","78cf6095":"code","469574b4":"code","3a6c26bd":"code","d134bbad":"code","19962029":"code","cbc26d62":"code","4fdb1cee":"code","7f587d21":"code","887ee0a4":"code","b3fbdd58":"code","5d370162":"code","fe88ed24":"code","ef5b8149":"code","4529d42b":"code","661d3b07":"code","b42a2620":"code","8a625498":"code","b9b0f4eb":"code","631d9cee":"code","fdfe434f":"code","14cd7f8d":"code","842272cb":"code","331ce28c":"code","9bdee9ec":"code","9f03588b":"code","7f76f0eb":"code","de871b6e":"code","3518ac0e":"code","d6f76944":"code","07735ebd":"markdown","2874d3fe":"markdown","1108edf9":"markdown","cc177a93":"markdown","fdeec85b":"markdown","042f068d":"markdown","ac0f0ed3":"markdown","ee2f2fc3":"markdown","a6d3fe70":"markdown","c01b7327":"markdown","d9587154":"markdown","bb3f755e":"markdown","90f50639":"markdown","1c7c74db":"markdown","dc0096df":"markdown","aa6be609":"markdown","153f4f11":"markdown","7696b85b":"markdown","926d2d03":"markdown","a4a76b50":"markdown","ddcc3ea9":"markdown","e0f850f9":"markdown","d2998acc":"markdown","091ae614":"markdown","8091c23e":"markdown","8091c87e":"markdown","0bfe3634":"markdown","8b5c011a":"markdown","51b7a4ae":"markdown","e0926e42":"markdown","cda6d637":"markdown","03f17e3e":"markdown","43c54eb1":"markdown","4f69e8f6":"markdown","a62850f7":"markdown","84a8128c":"markdown","a7ec4807":"markdown","9ac387db":"markdown","48995a63":"markdown","07114d3f":"markdown","efa02b15":"markdown","2d47a011":"markdown","17f0b682":"markdown","e24e1780":"markdown","b2ec66ea":"markdown","e8cd1b14":"markdown","9ce1b037":"markdown","6cbe322d":"markdown","f385f5b3":"markdown","262932e2":"markdown","d931ac10":"markdown","6efa678b":"markdown","493316a8":"markdown","78e8752a":"markdown","b021b402":"markdown","493324c6":"markdown","6aaef3d7":"markdown","4973a599":"markdown","0a39566d":"markdown","d84753a7":"markdown","3172d2f3":"markdown","ebc1e3d7":"markdown","8caa21d9":"markdown","2988cdf5":"markdown","94a75530":"markdown","d9c77b72":"markdown","0c9cb281":"markdown","b5c52a82":"markdown","201c1880":"markdown","72638049":"markdown","f7971bb1":"markdown","e9fbc5cb":"markdown","5ea2344b":"markdown","735561fa":"markdown","3329b399":"markdown","659014e0":"markdown","c9470ee7":"markdown","aa1f1beb":"markdown"},"source":{"a7aebd23":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\n\npd.set_option('display.max_columns', 100)","99a6c800":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","6879cbb1":"train.head()","2454ff5d":"train.tail()","cde3dc2a":"train.shape","1d70f566":"train.drop_duplicates()\ntrain.shape","f0fc8f49":"test.shape","5c37a78f":"train.info()","9eeb78a4":"data = []\nfor f in train.columns:\n    # role\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\n      # target\uacfc id\ub97c \uc9c0\uc815\ud574\uc900 \ub4a4, \ub098\uba38\uc9c0\ub294 \ubaa8\ub450 input\uc73c\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4.\n    if f == 'target':\n        role = 'target'\n    elif f == 'id':\n        role = 'id'\n    else:\n        role = 'input'\n         \n    # level\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\n      # target\uacfc bin\uc740 binary, id\uc640 cat\uc740 nominal, \ub098\uba38\uc9c0\ub294 \ub370\uc774\ud130 \ud0c0\uc785\uc5d0 \ub530\ub77c float\uacfc int\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4.\n    if 'bin' in f or f == 'target':\n        level = 'binary'\n    elif 'cat' in f or f == 'id':\n        level = 'nominal'\n    elif train[f].dtype == 'float64':\n        level = 'interval'\n    elif train[f].dtype == 'int64':\n        level = 'ordinal'\n        \n    # \uc544\uc774\ub514\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 variables\ub97c True\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4.    \n    keep = True\n    if f == 'id':\n        keep = False\n    \n    # \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. \n    dtype = train[f].dtype\n    \n    # \ubaa8\ub4e0 variable\uc758 \uba54\ud0c0 \ub370\uc774\ud130\ub97c \ub2f4\uc740 \ub515\uc154\ub108\ub9ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n    f_dict = {\n        'varname': f,\n        'role': role,\n        'level': level,\n        'keep': keep,\n        'dtype': dtype\n    }\n    data.append(f_dict)\n    \nmeta = pd.DataFrame(data, columns=['varname', 'role', 'level', 'keep', 'dtype'])\nmeta.set_index('varname', inplace=True)","401703b8":"meta","7b59a5a0":"meta[(meta.level == 'nominal') & (meta.keep)].index","a5968b89":"pd.DataFrame({'count' : meta.groupby(['role', 'level'])['role'].size()}).reset_index()","3e602ceb":"v = meta[(meta.level == 'interval') & (meta.keep)].index\ntrain[v].describe()","16874cd8":"v = meta[(meta.level == 'ordinal') & (meta.keep)].index\ntrain[v].describe()","88fa391b":"v = meta[(meta.level == 'binary') & (meta.keep)].index\ntrain[v].describe()","0516b31c":"desired_apriori=0.10\n\n# target value\uc758 \uc778\ub371\uc2a4\ub97c \ucd94\ucd9c\ud569\ub2c8\ub2e4.\nidx_0 = train[train.target == 0].index\nidx_1 = train[train.target == 1].index\n\n# target value\uc758 \uae30\uc874 record \uc218\ub97c \uad6c\ud569\ub2c8\ub2e4.\nnb_0 = len(train.loc[idx_0]) # 573518 \uac1c\nnb_1 = len(train.loc[idx_1]) # 21694 \uac1c\n\n# undersampling \ube44\uc728\uc744 \uacc4\uc0b0\ud558\uace0 target == 0 \uc778 record \uc218\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\nundersampling_rate = ((1-desired_apriori)*nb_1)\/(nb_0*desired_apriori)\n# ((1-0.1) * 573518) \/ (0.1 * 21694)\n# Undersampling_Rate \uacc4\uc0b0 \uacf5\uc2dd\uc744 \uc554\uae30\ud574\ub461\uc2dc\ub2e4.\nundersampled_nb_0 = int(undersampling_rate*nb_0)\n\nprint('Rate to undersample records with target=0: {}'.format(undersampling_rate))\nprint('Number of records with target=0 after undersampling: {}'.format(undersampled_nb_0))\n\n# shuffle\uc744 \ud65c\uc6a9\ud558\uc5ec undersampling \ub41c \uac1c\uc218\ub9cc\ud07c\uc758 samples\ub97c \uac00\uc9c0\ub294 nb=0\uc744 \ubb34\uc791\uc704\ub85c \ucd94\ucd9c\ud569\ub2c8\ub2e4.\nundersampled_idx = shuffle(idx_0, random_state=37, n_samples=undersampled_nb_0)\n\n# \ucd94\ucd9c\ud55c \uc778\ub371\uc2a4\uc640 \uae30\uc874\uc758 idx_1\uc744 \ud65c\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\nidx_list = list(undersampled_idx) + list(idx_1)\n\n# Undersample\ub41c \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub3cc\ub824\ubc1b\uc2b5\ub2c8\ub2e4.\ntrain = train.loc[idx_list].reset_index(drop=True)","fb3499d1":"vars_with_missing = []\n\nfor f in train.columns:\n    missings = train[train[f] == -1][f].count()\n    if missings > 0:\n        vars_with_missing.append(f)\n        missings_perc = missings\/train.shape[0]\n        \n        print('Variable {} has {} records ({:.2%}) with missing values'.format(f, missings, missings_perc))\n        \nprint('In total, there are {} variables with missing values'.format(len(vars_with_missing)))","059b0158":"# \ub108\ubb34 \ub9ce\uc740 \uacb0\uce21\uac12\uc744 \uc9c0\ub2cc Feature\ub4e4\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4 (68.4%, 44.3%)\nvars_to_drop = ['ps_car_03_cat', 'ps_car_05_cat']\ntrain.drop(vars_to_drop, inplace=True, axis=1)\nmeta.loc[(vars_to_drop),'keep'] = False  # \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc5c5\ub370\uc774\ud2b8\ud574\uc90d\ub2c8\ub2e4.\n\n# \uacb0\uce21\uac12\uc744 Imputer\ub97c \ud65c\uc6a9\ud558\uc5ec \ubcc0\ud658\ud574\uc90d\ub2c8\ub2e4.\nmean_imp = SimpleImputer(missing_values=-1, strategy='mean')\nmode_imp = SimpleImputer(missing_values=-1, strategy='most_frequent')\ntrain['ps_reg_03'] = mean_imp.fit_transform(train[['ps_reg_03']]).ravel()\ntrain['ps_car_12'] = mean_imp.fit_transform(train[['ps_car_12']]).ravel()\ntrain['ps_car_14'] = mean_imp.fit_transform(train[['ps_car_14']]).ravel()\ntrain['ps_car_11'] = mode_imp.fit_transform(train[['ps_car_11']]).ravel()","78cf6095":"v = meta[(meta.level == 'nominal') & (meta.keep)].index\n\nfor f in v:\n    dist_values = train[f].value_counts().shape[0]\n    print('Variable {} has {} distinct values'.format(f, dist_values))","469574b4":"# Script by https:\/\/www.kaggle.com\/ogrellier\n# Code: https:\/\/www.kaggle.com\/ogrellier\/python-target-encoding-for-categorical-features\ndef add_noise(series, noise_level):\n    return series * (1 + noise_level * np.random.randn(len(series)))\n\ndef target_encode(trn_series=None, \n                  tst_series=None, \n                  target=None, \n                  min_samples_leaf=1, \n                  smoothing=1,\n                  noise_level=0):\n    \"\"\"\n    Smoothing is computed like in the following paper by Daniele Micci-Barreca\n    https:\/\/kaggle2.blob.core.windows.net\/forum-message-attachments\/225952\/7441\/high%20cardinality%20categoricals.pdf\n    trn_series : training categorical feature as a pd.Series\n    tst_series : test categorical feature as a pd.Series\n    target : target data as a pd.Series\n    min_samples_leaf (int) : minimum samples to take category average into account\n    smoothing (int) : smoothing effect to balance categorical average vs prior  \n    \"\"\" \n    assert len(trn_series) == len(target)\n    assert trn_series.name == tst_series.name\n    temp = pd.concat([trn_series, target], axis=1)\n    # Compute target mean \n    averages = temp.groupby(by=trn_series.name)[target.name].agg([\"mean\", \"count\"])\n    # Compute smoothing\n    smoothing = 1 \/ (1 + np.exp(-(averages[\"count\"] - min_samples_leaf) \/ smoothing))\n    # Apply average function to all target data\n    prior = target.mean()\n    # The bigger the count the less full_avg is taken into account\n    averages[target.name] = prior * (1 - smoothing) + averages[\"mean\"] * smoothing\n    averages.drop([\"mean\", \"count\"], axis=1, inplace=True)\n    # Apply averages to trn and tst series\n    ft_trn_series = pd.merge(\n        trn_series.to_frame(trn_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=trn_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_trn_series.index = trn_series.index \n    ft_tst_series = pd.merge(\n        tst_series.to_frame(tst_series.name),\n        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),\n        on=tst_series.name,\n        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)\n    # pd.merge does not keep the index so restore it\n    ft_tst_series.index = tst_series.index\n    return add_noise(ft_trn_series, noise_level), add_noise(ft_tst_series, noise_level)","3a6c26bd":"def add_noise(series, noise_level):\n    return series * (1 + noise_level * np.random.randn(len(series)))","d134bbad":"assert len(train[\"ps_car_11_cat\"]) == len(train['target'])\nassert train[\"ps_car_11_cat\"].name == test[\"ps_car_11_cat\"].name","19962029":"temp = pd.concat([train[\"ps_car_11_cat\"], train['target']], axis=1)\nprint(temp)","cbc26d62":"averages = temp.groupby(train['ps_car_11_cat'].name)[train['target'].name].agg(['mean', 'count'])\nprint(averages)","4fdb1cee":"smoothing = 1 \/ (1 + np.exp(-(averages[\"count\"] - 100) \/ 10))\nprint(smoothing)","7f587d21":"prior = train['target'].mean()\n\naverages[train['target'].name] = prior * (1 - smoothing) + averages[\"mean\"] * smoothing\nprint(averages)","887ee0a4":"averages.drop(['mean', 'count'], axis=1, inplace=True)","b3fbdd58":"ft_trn_series = pd.merge(\n        train['ps_car_11_cat'].to_frame(train['ps_car_11_cat'].name),\n        averages.reset_index().rename(columns={'index': train['target'].name, train['target'].name: 'average'}),\n        on=train['ps_car_11_cat'].name,\n        how='left')['average'].rename(train['ps_car_11_cat'].name + '_mean').fillna(prior)\n\nprint(ft_trn_series)","5d370162":"ft_trn_series.index = train[\"ps_car_11_cat\"].index ","fe88ed24":"ft_tst_series = pd.merge(test['ps_car_11_cat'].to_frame(test['ps_car_11_cat'].name),\n                              averages.reset_index().rename(columns={'index' : 'target', 'target' : 'averages'}),\n                              on=test['ps_car_11_cat'].name,\n                              how='left')['averages'].rename(train['ps_car_11_cat'].name + '_mean').fillna(prior)\n\nft_tst_series.index = test[\"ps_car_11_cat\"].index","ef5b8149":"add_noise(ft_trn_series, 0.01), add_noise(ft_tst_series, 0.01)","4529d42b":"train_encoded, test_encoded = target_encode(train[\"ps_car_11_cat\"], \n                             test[\"ps_car_11_cat\"], \n                             target=train.target, \n                             min_samples_leaf=100,\n                             smoothing=10,\n                             noise_level=0.01)\n    \ntrain['ps_car_11_cat_te'] = train_encoded\ntrain.drop('ps_car_11_cat', axis=1, inplace=True)\nmeta.loc['ps_car_11_cat','keep'] = False  # Updating the meta\ntest['ps_car_11_cat_te'] = test_encoded\ntest.drop('ps_car_11_cat', axis=1, inplace=True)","661d3b07":"v = meta[(meta.level == 'nominal') & (meta.keep)].index\n\nfor f in v:\n    plt.figure()\n    fig, ax = plt.subplots(figsize=(20,10))\n    # Calculate the percentage of target=1 per category value\n    cat_perc = train[[f, 'target']].groupby([f],as_index=False).mean()\n    cat_perc.sort_values(by='target', ascending=False, inplace=True)\n    # Bar plot\n    # Order the bars descending on target mean\n    sns.barplot(ax=ax, x=f, y='target', data=cat_perc, order=cat_perc[f])\n    plt.ylabel('% target', fontsize=18)\n    plt.xlabel(f, fontsize=18)\n    plt.tick_params(axis='both', which='major', labelsize=18)\n    plt.show();","b42a2620":"def corr_heatmap(v):\n    correlations = train[v].corr()\n\n    # Create color map ranging between two colors\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    fig, ax = plt.subplots(figsize=(10,10))\n    sns.heatmap(correlations, cmap=cmap, vmax=1.0, center=0, fmt='.2f',\n                square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\": .75})\n    plt.show();\n    \nv = meta[(meta.level == 'interval') & (meta.keep)].index\ncorr_heatmap(v)","8a625498":"s = train.sample(frac=0.1)","b9b0f4eb":"sns.lmplot(x='ps_reg_02', y='ps_reg_03', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","631d9cee":"sns.lmplot(x='ps_car_12', y='ps_car_13', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","fdfe434f":"sns.lmplot(x='ps_car_12', y='ps_car_14', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","14cd7f8d":"sns.lmplot(x='ps_car_15', y='ps_car_13', data=s, hue='target', palette='Set1', scatter_kws={'alpha':0.3})\nplt.show()","842272cb":"v = meta[(meta.level == 'ordinal') & (meta.keep)].index\ncorr_heatmap(v)","331ce28c":"v = meta[(meta.level == 'nominal') & (meta.keep)].index\nprint('Before dummification we have {} variables in train'.format(train.shape[1]))\ntrain = pd.get_dummies(train, columns=v, drop_first=True)\nprint('After dummification we have {} variables in train'.format(train.shape[1]))","9bdee9ec":"v = meta[(meta.level == 'interval') & (meta.keep)].index\npoly = PolynomialFeatures(degree=2, interaction_only=False, include_bias=False)\ninteractions = pd.DataFrame(data=poly.fit_transform(train[v]), columns=poly.get_feature_names(v))\ninteractions.drop(v, axis=1, inplace=True)  # poly \ucc98\ub9ac\uac00 \ub418\uc9c0 \uc54a\uc740 \uae30\uc874\uc758 \uc5f4\ub4e4\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n\n# interactions\uc640 train \ub370\uc774\ud130\ub97c \ud569\uccd0\uc90d\ub2c8\ub2e4.\nprint('Before creating interactions we have {} variables in train'.format(train.shape[1]))\ntrain = pd.concat([train, interactions], axis=1)\nprint('After creating interactions we have {} variables in train'.format(train.shape[1]))","9f03588b":"selector = VarianceThreshold(threshold=.01)\nselector.fit(train.drop(['id', 'target'], axis=1)) # Fit to train without id and target variables\n\nf = np.vectorize(lambda x : not x) # Function to toggle boolean array elements\n\nv = train.drop(['id', 'target'], axis=1).columns[f(selector.get_support())]\nprint('{} variables have too low variance.'.format(len(v)))\nprint('These variables are {}'.format(list(v)))","7f76f0eb":"X_train = train.drop(['id', 'target'], axis=1)\ny_train = train['target']\n\nfeat_labels = X_train.columns\n\nrf = RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)\n\nrf.fit(X_train, y_train)\nimportances = rf.feature_importances_\n\nindices = np.argsort(rf.feature_importances_)[::-1]\n\nfor f in range(X_train.shape[1]):\n    print(\"%2d) %-*s %f\" % (f + 1, 30,feat_labels[indices[f]], importances[indices[f]]))\n","de871b6e":"sfm = SelectFromModel(rf, threshold='median', prefit=True)\nprint('Number of features before selection: {}'.format(X_train.shape[1]))\nn_features = sfm.transform(X_train).shape[1]\nprint('Number of features after selection: {}'.format(n_features))\nselected_vars = list(feat_labels[sfm.get_support()])\n","3518ac0e":"train = train[selected_vars + ['target']]","d6f76944":"scaler = StandardScaler()\nscaler.fit_transform(train.drop(['target'], axis=1))","07735ebd":"### Interval variables","2874d3fe":"## Handling imbalanced classes\n\n\uc704\uc5d0 \uc5b8\uae09\ud588\ub4ef\uc774 target=1 \uc758 \ube44\uc728\uc774 traget=0 \ube44\uc728\ubcf4\ub2e4 \ub9e4\uc6b0 \uc801\uc2b5\ub2c8\ub2e4(0.963 VS 0.036).\n\uacb0\uacfc\uac12\uc774 \ubd88\uade0\ud615\ud55c \ubaa8\ub378\uc740 \ub192\uc740 \uc815\ud655\ub3c4\ub97c \uac00\uc9c0\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \ubd80\uac00\uc801\uc778 value\uac00 \ucd94\uac00\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \ub450 \uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* oversampling records with target=1 \n* undersampling records with target=0\n\n\uc6b0\ub9ac\ub294 \ud070 training set\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c, **undersampling**\uc744 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ube44\uc728\uc740 0.9 : 0.1\ub85c \uc9c0\uc815\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 \ub9e4\uc6b0 \ubd88\uade0\ud615\ud55c \uacb0\uacfc\uac12 \ub370\uc774\ud130\ub294 10% \ubbf8\ub9cc\uc784\uc744 \ud655\uc778 \uac00\ub2a5\ud558\uba70, 10% \uc815\ub3c4\ub85c undersampling\uc744 \uc9c4\ud589\ud558\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1108edf9":"- \uacb0\uce21\uce58\ub97c \uac00\uc9c0\ub294 variable\uc740 ps_car_11\uc785\ub2c8\ub2e4.\n- \ub2e4\ub978 \ubc94\uc704\ub97c \uac00\uc9c0\ub294 \uac12\ub4e4\uc5d0 \ub300\ud558\uc5ec \uc2a4\ucf00\uc77c\ub9c1\uc774 \ud544\uc694\ud574\ubcf4\uc785\ub2c8\ub2e4.","cc177a93":"#### reg variables\n- \uc624\uc9c1 **ps_reg_03** \ub9cc\uc774 \uacb0\uce21\uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \n- variables \uc0ac\uc774\uc758 \ubc94\uc704 (min to max)\ub97c \uace0\ub824\ud588\uc744 \ub54c, \uc6b0\ub9ac\ub294 \ucd94\ud6c4\uc5d0 \uc2a4\ucf00\uc77c\ub9c1(\uc608\ub97c \ub4e4\uc5b4 StandardScaler)\uc744 \uc801\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\uace0\uc790 \ud558\ub294 \ubd84\ub958\uae30\uc5d0 \ub530\ub77c \ub2e4\ub97c \uac83\uc785\ub2c8\ub2e4.\n\n#### car variables\n- ps_car_12 \uc640 ps_car_14 \uac00 \uacb0\uce21\uce58\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n- \uc774 variables \uc5ed\uc2dc, \uc2a4\ucf00\uc77c\ub9c1\uc774 \ud544\uc694\ud574\ubcf4\uc785\ub2c8\ub2e4.\n\n#### calc variables\n- \uacb0\uce21\uce58\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\n- \uc774 variables\ub294 \ucd5c\ub300\uac12\uc774 0.9\uc778\uac83\uc73c\ub85c \ubcf4\uc544 \uc77c\uc885\uc758 \ube44\uc728\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n- \ubaa8\ub4e0 3\uac1c\uc758 *_calc* variables\uc740 \ub9e4\uc6b0 \ube44\uc2b7\ud55c \ubd84\ud3ec\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n**\uc804\ubc18\uc801\uc73c\ub85c**, interval variables\ub4e4 \uac04\uc758 \ubc94\uc704\uac00 \uc0c1\ub300\uc801\uc73c\ub85c \uc881\uc74c\uc744 \ud655\uc778 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc544\ub9c8\ub3c4 \ub370\uc774\ud130\ub97c \uc775\uba85\ud654\uc2dc\ud0a4\uae30 \uc704\ud558\uc5ec \uba87\uba87 \ubcc0\ud658 \uc791\uc5c5(\uc608\ub97c \ub4e4\uc5b4 log)\uac00 \uc774\ubbf8 \uc801\uc6a9\ub41c \uac83\uc740 \uc544\ub2d0\uae4c\uc694?\n\n#### \uae30\uc220\ud1b5\uacc4\ub97c \uc0b4\ud3b4\ubd04\uc73c\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc740 \uacb0\uacfc\ub97c \uc5bb\uc5c8\uc2b5\ub2c8\ub2e4.\n- Feature \ub0b4\ubd80\uc5d0 \uacb0\uce21\uce58\uc758 \uc874\uc7ac \uc720\ubb34\n- min\uacfc max\ub97c \ube44\uad50\ud568\uc73c\ub85c\uc368 \uc2a4\ucf00\uc77c\ub9c1\uc758 \ud544\uc694\uc131 \ud310\ub2e8\n- max \uac12\uc744 \uc0b4\ud3b4\ubd04\uc73c\ub85c\uc368 \ubcc0\uc218\uc758 \uac12\uc774 \ube44\uc728\uc778\uc9c0 \ud310\ub2e8\n\n","fdeec85b":"1. ps_car_11_cat \uc2dc\ub9ac\uc988\ub97c to_frame\uc73c\ub85c \ub370\uc774\ud130 \ud504\ub808\uc784\uc73c\ub85c \uac00\uc838\uc635\ub2c8\ub2e4.\n2. averages\uc758 \uc778\ub371\uc2a4\ub97c \ucd08\uae30\ud654\ud558\uace0, \uc778\ub371\uc2a4 \uac12\uc758 \uba85\uce6d\uc744 target, target\uc774\uc5c8\ub358 \uc5f4 \uc774\ub984\uc744 average\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4.\n3. on\uac12\uacfc how\uac12\uc744 \uc9c0\uc815\ud574\uc8fc\uc5b4 merge \ud574\uc90d\ub2c8\ub2e4.\n4. \uc2dc\ub9ac\uc988\uc758 \uba85\uce6d\uc744 ps_car_11_cat_mean\uc73c\ub85c rename\ud574\uc8fc\uace0 \uacb0\uce21\uac12\uc740 prior \uac12\uc73c\ub85c \ub300\uce58\ud574\uc90d\ub2c8\ub2e4.","042f068d":"## Feature scaling\n\n\uc774\uc804\uc5d0 \uc5b8\uae09\ud588\ub4ef\uc774, \uc6b0\ub9ac\ub294 train \ub370\uc774\ud130\uc5d0 \uc815\uaddc\ud654\ub97c \uc9c4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uba87\uba87 \ubd84\ub958\uae30\uc5d0\uc11c\ub294 \ub354 \ub098\uc740 \uacb0\uacfc\ub97c \uac00\uc838\uc62c \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","ac0f0ed3":"ordinal variables\ub294 \ud070 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \ubc18\uba74\uc5d0 target \uac12\uc73c\ub85c \uadf8\ub8f9\ud654\ud560 \ub54c \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub420\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ee2f2fc3":"<a class=\"anchor\" id=\"feat_selection\"><\/a>","a6d3fe70":"### \ud574\ub2f9 \ucee4\ub110\uc740 Data Preparation & Exploration\uc758 \ud55c\uae00 \ubc88\uc5ed\ubcf8\uc785\ub2c8\ub2e4. https:\/\/www.kaggle.com\/bertcarremans\/data-preparation-exploration\n\n\uc774 \ub178\ud2b8\ubd81\uc740 PorteSerguro Competition\uc5d0\uc11c \uba4b\uc9c4 \uc778\uc0ac\uc774\ud2b8\ub97c \uc5bb\uae30 \uc704\ud574 \uc791\uc131\ub410\uc2b5\ub2c8\ub2e4. <br>\n\ubfd0\ub9cc \uc544\ub2c8\ub77c \ub370\uc774\ud130 \ubaa8\ub378\ub9c1\uc744 \uc900\ube44\ud558\uae30 \uc704\ud55c Tip\uacfc Tricks\ub4e4\uc744 \uc900\ube44\ud588\uc2b5\ub2c8\ub2e4. <br>\n\ubaa9\ucc28\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \n\n1. [Visual inspection of your data](#visual_inspection)\n2. [Defining the metadata](#metadata)\n3. [Descriptive statistics](#descriptive_stats)\n4. [Handling imbalanced classes](#imbalanced_data)\n5. [Data quality checks](#data_quality)\n6. [Exploratory data visualization](#eda)\n7. [Feature engineering](#feat_engineering)\n8. [Feature selection](#feat_selection)\n9. [Feature scaling](#feat_scaling)","c01b7327":"role\uacfc level\uc5d0 \ub530\ub978 target\uc758 \uc218\ub97c \uc544\ub798\ub97c \ud1b5\ud574 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","d9587154":"59\uac1c\uc758 variables\uc640 595,212\uac1c\uc758 row\uac00 \uc788\uc2b5\ub2c8\ub2e4. <br>\n\ub2e4\uc74c\uc73c\ub85c test \ub370\uc774\ud130\ub3c4 \ub611\uac19\uc740 \uc218\uc758 variables\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4. <br>\n\uadf8 \uc804\uc5d0, training \ub370\uc774\ud130\uc5d0 \uc911\ubcf5\uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.","bb3f755e":"shape\ub97c \ud65c\uc6a9\ud558\uc5ec \uc804\uccb4 \ub370\uc774\ud130\uc758 \ud589\uacfc \uc5f4 \uac1c\uc218\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.","90f50639":"1. #### ps_reg_02 and ps_reg_03 (0.7)\n\n\ud68c\uadc0\uc120\uc774 \ubcf4\uc5ec\uc8fc\ub4ef\uc774, \ub450 variables\ub4e4 \uac04\uc5d0\ub294 \uc120\ud615 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud3b4\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. *hue* \ud30c\ub77c\ubbf8\ud130\ub97c \ud1b5\ud574 target=0\uacfc target=1\uc5d0 \ub300\ud55c \ud68c\uadc0\uc120\uc774 \ub3d9\uc77c\ud568\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1c7c74db":"train \ub370\uc774\ud130\uc5d0\uc11c 10%\uc758 \ub370\uc774\ud130\ub97c \uc0d8\ud50c\ub9c1\ud569\ub2c8\ub2e4.\n\n* train.shape \u25b6 (216940, 57)\n* s.shape \u25b6 (21694, 57)","dc0096df":"\uc800\ud76c\uac00 \uc0ac\uc6a9\ud560 trn_series\ub294 train['ps_car_11_cat'] \uc774\uace0, target\uc740 train['target'] \uc785\ub2c8\ub2e4. <br>\n\ub450 \uc2dc\ub9ac\uc988\uc758 \uae38\uc774\uac00 \uac19\uc740\uc9c0 \ud655\uc778\ud558\uace0, train['ps_car_11_cat']\uacfc test['ps_car_11_cat']\uc758 \uc774\ub984\uc774 \uac19\uc740\uc9c0\ub3c4 \ud655\uc778\ud574\uc90d\ub2c8\ub2e4. ","aa6be609":"## Conclusion\n\n\ud544\uc0ac\ud558\uc2dc\ub290\ub0d0 \ub2e4\ub4e4 \uace0\uc0dd\uc774 \ub9ce\uc2b5\ub2c8\ub2e4! <br>\n\ud544\uc0ac\uc801\uc73c\ub85c \ud544\uc0ac\ud569\uc2dc\ub2e4!","153f4f11":"## Loading data","7696b85b":"\uc6d0\ubcf8\uc5d0\uc11c\ub294 \uba54\ud0c0 \ub370\uc774\ud130\uc758 level\uc744 \uad6c\ubd84\ud560\ub54c train[f].dtype == float \uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ucf54\ub4dc\uac00 \uc791\uc131\ub410\uc2b5\ub2c8\ub2e4. \uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 'float64'\ub85c \uc218\uc815\uc774 \ub418\uc5b4 \uc788\ub294\ub370, \uae30\uc874\uc758 \ucf54\ub4dc\ub300\ub85c \uc9c4\ud589\ud558\uba74 dtype \ubd80\ubd84\uc5d0\uc11c \uc6d0\ud558\ub294\ub300\ub85c \ub370\uc774\ud130\uac00 \uad6c\ubd84\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \ud615\uc2dd \ub4a4\uc5d0 **64** \ub3c4 \ubc18\ub4dc\uc2dc \uc785\ub825\ud574\uc918\uc57c \ud569\ub2c8\ub2e4!","926d2d03":"## Metadata\n\n\ub370\uc774\ud130 \uad00\ub9ac\ub97c \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c, \uc6b0\ub9ac\ub294 variables\uc758 \uc815\ubcf4\ub4e4\uc744 \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \ud615\ud0dc\ub85c \uc800\uc7a5\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. \uc774 \uba54\ud0c0 \ub370\uc774\ud130\ub4e4\uc740 \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c \ud2b9\uc815\ud55c variables\ub97c \uc120\ud0dd\ud560 \ub54c, \uc2dc\uac01\ud654\ub97c \ud560 \ub54c, \ubaa8\ub378\ub9c1\uc744 \ud560 \ub54c \ub4f1\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4.\n\n\uad6c\uccb4\uc801\uc73c\ub85c \uc6b0\ub9ac\uac00 \uc800\uc7a5\ud574\uc57c \ud560 \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4 :\n- **role**: input, ID, target\n- **level**: nominal, interval, ordinal, binary\n- **keep**: True or False\n- **dtype**: int, float, str","a4a76b50":"<a class=\"anchor\" id=\"visual_inspection\"><\/a>","ddcc3ea9":"## Data Quality Checks","e0f850f9":"\uc0c8\ub86d\uac8c \ub9cc\ub4e0 \uc2dc\ub9ac\uc988\uc758 \uc778\ub371\uc2a4\ub97c \uae30\uc874 \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130 \uc2dc\ub9ac\uc988 \uc778\ub371\uc2a4\uc640 \ub9de\ucdb0\uc90d\ub2c8\ub2e4","d2998acc":"### Checking the cardinality of the categorical variables\n\n\uce74\ub514\ub0a0\ub9ac\ud2f0\ub294 \uc804\uccb4 \ud589\uc5d0 \ub300\ud55c \ud2b9\uc815 \uceec\ub7fc\uc758 \uc911\ubcf5 \uc218\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uc9c0\ud45c\uc785\ub2c8\ub2e4.<br>\n\uc911\ubcf5\ub3c4\uac00 \ub192\uc73c\uba74 \uce74\ub514\ub0a0\ub9ac\ud2f0\uac00 \ub0ae\uc73c\uba70, \uc911\ubcf5\ub3c4\uac00 \ub0ae\uc73c\uba74 \uce74\ub514\ub0a0\ub9ac\ud2f0\uac00 \ub192\uc2b5\ub2c8\ub2e4. <br>\n\uce74\ub514\ub0a0\ub9ac\ud2f0\ub294 \uc0c1\ub300\uc801\uc778 \uac1c\ub150\uc73c\ub85c \uc774\ud574\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\ub530\ub77c\uc11c \uce74\ub514\ub0a0\ub9ac\ud2f0\ub294 variable \ub0b4\uc5d0\uc11c \ub2e4\ub978 value\uc758 \uac1c\uc218\ub97c \ub9d0\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \ucd94\ud6c4 categorical variables\ub97c \ub354\ubbf8\ud654\uc2dc\ud0ac \uac83\uc778\ub370, variables \ub0b4\uc5d0 \ub2e4\ub978 value\ub4e4\uc774 \uc5bc\ub9c8\ub098 \ub9ce\uc740\uc9c0 \uccb4\ud06c\ud574\ubd10\uc57c \ud569\ub2c8\ub2e4.Value\ub4e4\uc774 \ub9ce\uc744 \uacbd\uc6b0, \uc218 \ub9ce\uc740 \ub354\ubbf8 \ubcc0\uc218\ub4e4\uc774 \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","091ae614":"<a class=\"anchor\" id=\"metadata\"><\/a>","8091c23e":"\uc774\uc81c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 *describe* \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uae30\uc220\ud1b5\uacc4\ub7c9\uc744 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 *desecribe* \uba54\uc18c\ub4dc\ub294 categorical, id variable\uc758 \uae30\uc220\ud1b5\uacc4\ub7c9\uc740 \uacc4\uc0b0\ud574\uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucd94\ud6c4\uc5d0 catgorical variables\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n\n\uba54\ud0c0 \ud30c\uc77c\uc744 \ud1b5\ud558\uc5ec \uc190\uc27d\uac8c \uae30\uc220\ud1b5\uacc4\ub7c9\uc744 \uacc4\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","8091c87e":"<a class=\"anchor\" id=\"data_quality\"><\/a>","0bfe3634":"### Binary variables","8b5c011a":"info() \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub2e4\uc2dc \ud55c \ubc88 \ub370\uc774\ud130\ub4e4\uc758 \ud0c0\uc785\uc774 integer \ud639\uc740 floatd\uc784\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. info() \uba54\uc18c\ub4dc \uc0c1\uc73c\ub85c\ub294 \uacb0\uce21\uac12\uc774 \uc5c6\ub294 \uac83\uc73c\ub85c \ud655\uc778\ub429\ub2c8\ub2e4. \uc55e\uc11c \uc5b8\uae09\ud588\ub4ef\uc774 \uacb0\uce21\uac12\uc774 -1\ub85c \ub300\uce58\ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ub97c \ub098\uc911\uc5d0 \ub2e4\ub8e8\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","51b7a4ae":"prior \uac12\uc740 train['target']\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \ud569\ub2c8\ub2e4.\n\uc55e\uc11c \uc800\ud76c\ub294 undersampling\uc744 \ud1b5\ud574 0\uacfc 1\uc758 \ube44\uc728\uc744 9:1\ub85c \ub9de\ucd94\uc5c8\uae30 \ub54c\ubb38\uc5d0 prior\uac12\uc740 **0.1**\uc774 \ub429\ub2c8\ub2e4.\n\n\uc774\ud6c4 averages\uc5d0 target\uc774\ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \uc5f4\uc744 \ucd94\uac00\ud574\uc90d\ub2c8\ub2e4. \uac12\uc740 Smoothing\uc744 \ud65c\uc6a9\ud558\uc5ec \ubcc0\ud658\ub429\ub2c8\ub2e4.\n","e0926e42":"\uc911\ubcf5\uac12\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.","cda6d637":"from sklearn.preprocessing import Imputer\uac00 \nfrom sklearn.impute import SimpleImputer \ub85c \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4.","03f17e3e":"### Categorical variables\n\ntarget \uac12\uc774 1\uc778 categorical variables\uc640 customers\uc758 \ube44\uc728\uc744 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.","43c54eb1":"### Checking missing values\n\uacb0\uce21\uac12\uc740 -1\ub85c \ub098\ud0c0\ub0b4\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","4f69e8f6":"\uc55e\uc11c train \ub370\uc774\ud130\uc5d0\uc11c \uc9c4\ud589\ud588\ub358 \uc791\uc5c5\uc744 test \ub370\uc774\ud130\uc5d0\uc11c\ub3c4 \uadf8\ub300\ub85c \uc9c4\ud589\ud574\uc90d\ub2c8\ub2e4.","a62850f7":"[](http:\/\/)\ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc815\ubcf4\ub4e4:\n* \ube44\uc2b7\ud55c Group\uc5d0 \ud0dc\uadf8\ub41c Feature\ub4e4\uc740 \ube44\uc2b7\ud55c \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, ind, reg, car, calc).\n* **bin** \uc774\ub77c\ub294 \uc811\ubbf8\uc0ac\ub97c \uac00\uc9c4 Feature\ub294 Binary feature\uc784\uc744 \ub098\ud0c0\ub0b4\uace0, **cat** \uc774\ub77c\ub294 \uc811\ubbf8\uc0ac\ub97c \uac00\uc9c4 Feature\ub294 Categorical feature\uc784\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* \uc774\uc678\uc758 Feature\ub4e4\uc740 **Continious** \ud639\uc740 **Ordinal feature** \uc785\ub2c8\ub2e4. \n* \uac12\uc774 -1 \uc778 \uad00\uce21\uce58\ub294 **\uacb0\uce21\uac12(NaN)**\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4\n* **Target** \uc5f4\uc740 Policy holder\uc5d0\uac8c \uccad\uad6c \uc801\uc6a9 \uc5ec\ubd80(Y\/N)\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4\n\n\uc911\uc694\ud55c \uc815\ubcf4\uc5d0 \ub300\ud574 \ud30c\uc545\uc744 \ud588\uc2b5\ub2c8\ub2e4! <br>\n\ub370\uc774\ud130\uc758 \uc804\uccb4\uc801\uc778 \ubaa8\uc2b5\uc744 \ud655\uc778\ud558\uae30 \uc704\ud558\uc5ec \uc55e\ubd80\ubd84(head)\uacfc \ub4b7\ubd80\ubd84(tail)\uc744 \uba3c\uc800 \ud655\uc778\ud574\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4.","84a8128c":"## Data at first sight","a7ec4807":"target \uc5f4\uc758 \uac12\ub4e4\uc744 train['ps_car_11_cat'] \uae30\uc900\uc73c\ub85c \uadf8\ub8f9\ud654\ud55c\ub4a4 mean \ud568\uc218\uc640 count \ud568\uc218\ub97c \uc801\uc6a9\ud55c \uac12\uc744 averages \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\navearges \ud568\uc218\ub294, <br>\n\uac01 Value\ubcc4 target \ud3c9\uade0\uacfc \ud69f\uc218 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4.","9ac387db":"PolynomialFeatures\ub294 \ub2e4\ud56d\ucc28\uc218 \ubcc0\ud658\uc744 \uc9c4\ud589\uc744 \ub3c4\uc640\uc8fc\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc0c1\uae30 \ucf54\ub4dc\uc758 \uacbd\uc6b0 degree\ub97c 2\ub85c \uc124\uc815\ud588\uc73c\ub2c8 2\ucc28\ud56d \ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\uc774\ub97c \ud1b5\ud574 train \ub370\uc774\ud130\uc5d0 interaction variables\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **get_feature_names** \uba54\uc18c\ub4dc \ub355\ubd84\uc5d0 \uc5f4 \uc774\ub984\uc744 \ud560\ub2f9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","48995a63":"### Selecting features with a Random Forest and SelectFromModel\n\n\uc6b0\ub9ac\ub294 \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\uc758 feature importances\uc5d0 \ub530\ub77c feature \uc120\ud0dd\uc758 \uae30\uc900\uc744 \uc0bc\uc2b5\ub2c8\ub2e4. SelectFromModel\uc744 \ud1b5\ud558\uc5ec \uc720\uc9c0\ud560 variables\uc758 \uc22b\uc790\ub97c \uad6c\uccb4\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. feature\uc758 \uc911\uc694\ub3c4\uc5d0 \ub300\ud55c \uc784\uacd7\uac12\uc744 \uc218\ub3d9\uc73c\ub85c \uc124\uc815\ud560\uc218 \uc788\uc9c0\ub9cc, \uc6b0\ub9ac\ub294 \ub2e8\uc21c\ud788 50% \uc774\uc0c1\uc758 \ucd5c\uc801\uc758 variables\ub97c \uc120\ud0dd\ud574\ubcf4\ub3c4\ub85d \ud569\uc2dc\ub2e4.\n\n> \ud558\uae30\uc758 \ucf54\ub4dc\ub294 \uc774\uacf3\uc5d0\uc11c \uac00\uc838\uc654\uc2b5\ub2c8\ub2e4. [GitHub repo of Sebastian Raschka](https:\/\/github.com\/rasbt\/python-machine-learning-book\/blob\/master\/code\/ch04\/ch04.ipynb). ","07114d3f":"## Introduction","efa02b15":"\uc774\uc81c\ub294 \uc5b4\ub5a4 correlated variables\ub97c \uc720\uc9c0\ud560\uc9c0 \uacb0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \uc6b0\ub9ac\ub294 Principal Component Analysis (PCA), \uc8fc\uc131\ubd84 \ubd84\uc11d\uc744 \uc2e4\uc2dc\ud558\uc5ec variables\uc758 dimensions\ub97c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc correlated variables\uc758 \uc218\uac00 \uc801\uc740\ub9cc\ud07c, \uc6b0\ub9ac\ub294 \ubaa8\ub378\uc774 heavy-lifting\uc744 \ud558\ub3c4\ub85d \ud574\uc57c\ud569\ub2c8\ub2e4.","2d47a011":"\ucc98\uc74c\uc5d0 \uc815\uc758\ud588\ub358 add_noise \ud568\uc218\ub97c \ud65c\uc6a9\ud558\uc5ec \ub178\uc774\uc988\ub97c \uc77c\uc73c\ud0a8 \uac12\ub4e4\uc744 \ubc18\ud658\ubc1b\uc2b5\ub2c8\ub2e4. <br>\n\ud568\uc218\uc5d0\uc11c \uc9c4\ud589\ud55c \uacfc\uc815\ub4e4\uc744 \uc694\uc57d\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n1. noise\ub97c \ub9cc\ub4e4\uc5b4\uc904 **add_noise** \ud568\uc218 \uc815\uc758\n2. train \ub370\uc774\ud130\uc640 target \ub370\uc774\ud130\uc758 len\uc774 \uac19\uc740\uc9c0, test \ub370\uc774\ud130\uc640 train \ub370\uc774\ud130\uc758 \uc774\ub984\uc774 \uac19\uc740\uc9c0 \ud655\uc778\n3. train \uc2dc\ub9ac\uc988\uc640 target \uc2dc\ub9ac\uc988\ub97c concat\n4. Value \ubcc4 mean\uacfc count \uacc4\uc0b0\ud558\uc5ec Averages\ub85c \uc800\uc7a5\n5. Smoothing\uc744 \uacc4\uc0b0\n6. prior\ub97c target \ub370\uc774\ud130\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \uc815\uc758\n7. \uc55e\uc11c \uc9c4\ud589\ud588\ub358 Value\ubcc4 \ud3c9\uade0\uc5d0 Smoothing\uc744 \uc9c4\ud589\ud558\uace0 \ud544\uc694 \uc5c6\uc5b4\uc9c4 mean\uacfc count \uc81c\uac70\n8. Averages\uc758 \uac12\uc73c\ub85c \uc0c8\ub85c\uc6b4 \uc2dc\ub9ac\uc988(trn\/test_cat_mean) \uc815\uc758\n9. \ucd5c\ucd08 \uc815\uc758\ud55c add_noise\ub97c \uc801\uc6a9\ud55c \uc2dc\ub9ac\uc988 \ubc18\ud658\n\n\uc870\uae08 \ub354 \ud544\uc0ac\ud574\ubcf4\uba74\uc11c \uc774\ud574\ud558\ub3c4\ub85d \ud569\uc2dc\ub2e4.","17f0b682":"\uc608\uc2dc\ub85c level\uc774 nominal\uc778 \ub370\uc774\ud130\uc758 \uc778\ub371\uc2a4\ub97c \ucd94\ucd9c\ud574\ubd05\ub2c8\ub2e4.","e24e1780":"\ucd94\ud6c4\uc5d0 \uc6b0\ub9ac\ub294 14\uac1c\uc758 Categorial variables\ub97c \ub354\ubbf8\ud654 \uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4. <br>\n\uc811\ubbf8\uc0ac\ub85c **bin**\uc774 \ubd99\uc740 variables\ub294 \uc774\ubbf8 0\uacfc 1\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ub530\ub85c \ub354\ubbf8\ud654\uc2dc\ud0ac \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.","b2ec66ea":"<a class=\"anchor\" id=\"descriptive_stats\"><\/a>","e8cd1b14":"#### ps_car_12 and ps_car_13 (0.67)","9ce1b037":"\ub9c9\ub300 \uadf8\ub798\ud504\ub4e4\uc744 \ud1b5\ud574 **\uacb0\uce21\uac12\uc774 \uc788\ub294** variables\ub4e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc55e\uc11c \uacb0\uce21\uac12\ub4e4\uc744 \uce58\ud658\ud588\ub294\ub370, categorical variables\ub4e4\uc740 \ub530\ub85c \uce58\ud658\uc744 \ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uccb4\ud558\ub294 \uac83\ubcf4\ub2e4 \ubd84\ub9ac\ub41c category value\ub85c\uc11c \uacb0\uce21\uac12\uc744 \ubcf4\ub294 \uac83\uc774 \ub354 \uc88b\uc740 \ubc29\ubc95\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. <br>\n\n\uacb0\uce21\uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 Customer\ub4e4\uc774 \ub2e4\ub978 Value\ub4e4\uc5d0 \ube44\ud558\uc5ec \ud6e8\uc52c \ub192\uc740 target \ud3c9\uade0\uc744 \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4!","6cbe322d":"\ud569\ub9ac\uc801\uc774\uae34 \ud558\uc9c0\ub9cc, **ps_car_11_cat**\ub294 104\uac1c\ub85c \ub9e4\uc6b0 \ub9ce\uc740 Value\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n**EDIT** : \ucd5c\ucd08 \uc791\uc131\uc790\ubd84\uc740 104\uac1c\uc758 Value\uc5d0 \ub300\ud574 \uac00\uacf5\uc744 \ud558\uc5ec \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc788\uc5c8\ub358 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \uc774\ud6c4 \ucd5c\ucd08 \uc791\uc131\uc790\ubd84\uc740 Oliver\uc758 \ucee4\ub110\uc744 \ud65c\uc6a9\ud55c \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.","f385f5b3":"## Descriptive statistics","262932e2":"### Creating interaction variables","d931ac10":"#### ps_car_13 and ps_car_15 (0.67)","6efa678b":"## Loading packages","493316a8":"## Feature engineering","78e8752a":"\ud544\uc694\ud55c \uac12\uc740 Smoothing\ud55c \uac12\ubfd0\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. drop\uc744 \ud65c\uc6a9\ud558\uc5ec mean\uacfc count\ub97c \ube7c\uc90d\ub2c8\ub2e4.","b021b402":"\uac1c\uc778\uc801\uc73c\ub85c \uc791\uc131\uc790\ub294 \ubd84\ub958\uae30\uc758 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\uc9c0\ud560 features\ub97c \uc120\ud0dd\ud558\ub294 \uac83\uc744 \uc120\ud638\ud55c\ub2e4\uace0 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac \uc2a4\uc2a4\ub85c \ud560 \uc218 \uc788\ub294 \uc77c\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubd84\uc0b0\uc774 0\uc774\uac70\ub098 \uc544\uc8fc \uc801\uc740 features\ub4e4\uc744 \uc81c\uac70\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \n\n<br> \uc774\ub97c \uc704\ud574 \uc0ac\uc774\ud0b7\ub7f0\uc758 **VarianceThreshold**\ub77c\ub294 \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \uc774 \uba54\uc18c\ub4dc\ub294 \ubd84\uc0b0 \uac12\uc774 0\uc778 features\ub4e4\uc744 \uc81c\uac70\ud574\uc90d\ub2c8\ub2e4. \n\n<br> \ud558\uc9c0\ub9cc \uc800\ud76c\ub294 \uc774\uc804 \ub2e8\uacc4\uc5d0\uc11c \uc774\ubbf8 \ubd84\uc0b0\uc774 0\uc778 features\uac00 \uc5c6\uc74c\uc744 \ud655\uc778\ud588\uae30 \ub54c\ubb38\uc5d0, \uc6b0\ub9ac\ub294 1% \ubbf8\ub9cc\uc758 \ubd84\uc0b0\uc774 \uc788\ub294 features\ub4e4\uc744 \uc81c\uac70\ud574\uc8fc\uace0\uc790 \ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294 31\uac1c\uc758 variables\ub97c \uc81c\uac70\ud558\uac8c \ub429\ub2c8\ub2e4.","493324c6":"\uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Variables\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. :\n- ps_reg_02 and ps_reg_03 (0.7)\n- ps_car_12 and ps_car13 (0.67)\n- ps_car_12 and ps_car14 (0.58)\n- ps_car_13 and ps_car15 (0.67)\n\nSeaborn\uc758 *pair plot*\uc744 \uc0ac\uc6a9\ud558\uba74 variables\ub4e4\uc758 (\uc120\ud615) \uad00\uacc4\ub97c \uc190\uc27d\uac8c \uc2dc\uac01\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud788\ud2b8\ub9f5\uc774 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294 variables\ub4e4\uc758 \uad00\uacc4\ub4e4\uc744 \uc2dc\uac01\ud654\ud574\uc8fc\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc6b0\ub9ac\ub294 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc774\ub294 variables\ub4e4\uc744 \ubd84\ub9ac\ud574\uc11c \ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.\n\n**Note** \ud504\ub85c\uc138\uc2a4\uc758 \uc18d\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud558\uc5ec train \ub370\uc774\ud130\uc758 sample\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","6aaef3d7":"## Exploratory Data Visualization","4973a599":"training \ub370\uc774\ud130\uc640 \ub2ec\ub9ac test \ub370\uc774\ud130\uc5d0\ub294 **58\uac1c**\uc758 variables\uac00 \uc788\uc2b5\ub2c8\ub2e4. <br>\n\ud558\uc9c0\ub9cc \uc774 variable\uc740 target variable\uc774\ubbc0\ub85c \uc0c1\uad00 \uc5c6\uc2b5\ub2c8\ub2e4. <br>\n\n\uc774\uc81c\ub294 \uc6b0\ub9ac\uac00 \uac00\uc9c4 variables\ub4e4\uc758 \ud0c0\uc785\uc744 \uc870\uc0ac\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","0a39566d":"<a class=\"anchor\" id=\"imbalanced_data\"><\/a>","d84753a7":"\uc815\ud655\ud788 **Smoothing**\uc774 \ubb34\uc2a8 \uc791\uc5c5\uc744 \ud558\ub294\uc9c0\ub294 \uc880 \ub354 \uacf5\ubd80\ud574\ubd10\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","3172d2f3":"## Feature selection","ebc1e3d7":"Noise\ub97c \uc77c\uc73c\ud0a4\ub294 \ud568\uc218\ub97c \uc815\uc758\ud55c \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n\uc2dc\ub9ac\uc988\uac12\uacfc \ub178\uc774\uc988 \ub808\ubca8\uc744 \ubcc0\uc218\ub85c \ubc1b\uc544\uc11c, <br>\n\uc2dc\ub9ac\uc988 * (1 + \ub178\uc774\uc988 \ub808\ubca8 * \ud45c\uc900\uc815\uaddc\ubd84\ud3ec\ub85c\ubd80\ud130 \uc0d8\ud50c\ub9c1\ub41c \ub09c\uc218) \ub97c \ub418\ub3cc\ub824\uc90d\ub2c8\ub2e4.\n\ntarget encode \ud568\uc218\ub294 assert\ubd80\ud130 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.","8caa21d9":"<a class=\"anchor\" id=\"feat_scaling\"><\/a>","2988cdf5":"- train \ub370\uc774\ud130\uc758 target \ud3c9\uade0\uc740 0.0036448\ub85c 3.645%\uc785\ub2c8\ub2e4. \uacb0\uacfc\uac12\uc774 **\ub9e4\uc6b0 \ubd88\uade0\ud615\ud568**\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n- \ud3c9\uade0\uac12\uc744 \ud1b5\ud574 \ub300\ub2e4\uc218\uc758 variables\uac00 0\uc774\ub77c\uace0 \uacb0\ub860\ub0b4\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","94a75530":"### Interval variables\n\ninterval variables\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud655\uc778\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. Heatmap\uc740 Variables \uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud655\uc778\ud558\ub294\ub370 \ub9e4\uc6b0 \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ud558\uae30 \ucf54\ub4dc\ub294  [an example by Michael Waskom](http:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html)\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","d9c77b72":"\uc6b0\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\ubcf4\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* binary variables\n* \uac12\uc774 \uc815\uc218\ub85c \uc774\ub8e8\uc5b4\uc9c4 categorical variables\n* \uac12\uc774 \uc815\uc218 \ud639\uc740 \uc18c\uc218\ub85c \uc774\ub8e8\uc5b4\uc9c4 other variables\n* \uad00\uce21\uac12\uc774 -1\uc778 \uac12\uc740 \uacb0\uce21\uce58(NaN)\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* Target Variables\uc640 ID","0c9cb281":"<a class=\"anchor\" id=\"feat_engineering\"><\/a>","b5c52a82":"### Removing features with low or zero variance","201c1880":"- **ps_car_03_cat \uacfc ps_car_05_cat** \ub294 \ub192\uc740 \uacb0\uce21\uce58 \ube44\uc728\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4 (68.39%, 44.26%). \ub530\ub77c\uc11c \uc0ad\uc81c\ud574\uc8fc\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n- \uacb0\uce21\uac12\uc774 \uc788\ub294 \ub2e4\ub978 Cat Variables\ub294 \uacb0\uce21\uac12\uc744 -1 \uadf8\ub300\ub85c \ub458 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- **ps_reg_03** (continuous)\uc740 18%\uc758 \uacb0\uce21\uac12\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ud574\uc90d\ub2c8\ub2e4.\n- **ps_car_11** (ordinal)\uc740 5\uac1c\uc758 \uacb0\uce21\uac12\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. ordinal\uc758 \ud615\ud0dc\uc774\ubbc0\ub85c \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ud558\uba74 \uc548\ub429\ub2c8\ub2e4. \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uce58\ud574\uc90d\ub2c8\ub2e4.\n- **ps_car_12** (continuous)\uc740 1\uac1c\uc758 \uacb0\uce21\uac12\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ud574\uc90d\ub2c8\ub2e4.\n- **ps_car_14** (continuous)\uc740 7%\uc758 \uacb0\uce21\uac12\uc744 \uc9c0\ub2c8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uce58\ud574\uc90d\ub2c8\ub2e4.","72638049":"\ub450 \uc2dc\ub9ac\uc988\ub97c \uc5f4\uc744 \uae30\uc900\uc73c\ub85c concat \ud55c \ub4a4, temp\ub77c\ub294 \uc774\ub984\uc758 \ubcc0\uc218\ub85c \uc800\uc7a5\ud574\uc90d\uc2dc\ub2e4.","f7971bb1":"### Creating dummy variables\n\ncategorical variables\ub294 \uc5b4\ub5a4 \uc21c\uc11c\ub098 \uacbd\uc911\uc774 \ub2f4\uaca8\uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c \uce74\ud14c\uace0\ub9ac 2\ub294 \uce74\ud14c\uace0\ub9ac 1\ubcf4\ub2e4 2\ubc30\uc758 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub294 \ub354\ubbf8 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4\uc90c\uc73c\ub85c\uc368 \ud574\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uccab \ubc88\uc9f8 dummy variable\uc758 \uc815\ubcf4\ub294 \uc6d0\ub798 variables\uc758 \ubc94\uc8fc\uc5d0 \ub300\ud574 \uc0dd\uc131\ub41c \ub2e4\ub978 dummy variable\uc5d0\uc11c \ud30c\uc0dd\ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc0ad\uc81c\ud574\uc8fc\ub3c4\ub85d \ud569\ub2c8\ub2e4.","e9fbc5cb":"\ub9cc\uc57d \uc6b0\ub9ac\uac00 \ubd84\uc0b0\uc5d0 \uae30\ubc18\ud558\uc5ec \uc120\ud0dd\uc744 \uc9c4\ud589\ud55c\ub2e4\uba74 \ub9ce\uc740 variables\ub4e4\uc744 \uc783\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \ub9ce\uc740 variables\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, \ubd84\ub958\uae30\uac00 \uc9c1\uc811 \uc120\ud0dd\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. variables\uac00 \ub354 \ub9ce\uc740 \ub370\uc774\ud130 \uc14b\uc774\ub77c\uba74 \ucc98\ub9ac \uc2dc\uac04\uc744 \uc904\uc5ec\uc904 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n\n\uc0ac\uc774\ud0b7\ub7f0\uc740 [feature selecetion methods]\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \uba54\uc18c\ub4dc \uc911 \ud558\ub098\uac00 'SelectFromModel' \uc778\ub370, \ub2e4\ub978 \ubd84\ub958\uae30\uc5d0\uc11c \ucd5c\uc0c1\uc758 feature\ub97c \uc120\ud0dd\ud558\uace0 \uae30\ub2a5\uc744 \uacc4\uc18d\ud560 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc544\ub798\ub97c \ud1b5\ud574 \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ud655\uc778\ud574\ubcf4\ub3c4\ub85d \ud569\ub2c8\ub2e4.","5ea2344b":"#### ps_car_12 and ps_car_14 (0.58)","735561fa":"### Ordinal variables","3329b399":"dummy variables\ub294 training \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 52\uac1c\uc758 variables\ub97c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.","659014e0":"### Checking the correlations between ordinal variables","c9470ee7":"<a class=\"anchor\" id=\"eda\"><\/a>","aa1f1beb":"\ud544\uc790\ub294 \ucee4\ub110\uc744 \ubc88\uc5ed\ud558\uba74\uc11c \ud544\uc0ac\ub97c \ud558\ub294 \uc911\uc5d0 \uc0c1\uae30 \uacfc\uc815\uc774 \uc815\ud655\ud788 \uc5b4\ub5bb\uac8c \uc774\ub8e8\uc5b4\uc9c0\ub294\uc9c0 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6e0\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c **\ub108\ubb34 Value\uac00 \ub9ce\uc740 Categorical Variables\ub97c \uac00\uacf5\ud558\ub294 \uacfc\uc815**\uc784\uc740 \uc5ec\ub7ec\ubd84\ub4e4\ub3c4 \uc774\ud574\ud558\uace0 \uacc4\uc2e4 \uac83\uc785\ub2c8\ub2e4.\n\n\n\ub530\ub77c\uc11c \ud568\uc218\uc758 \uacfc\uc815\uc744 \ud558\ub098\ud558\ub098 \ub530\ub77c\uac00\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.<br>\n\uc800\ucc98\ub7fc \uc774\ud574\uac00 \uc548\ub418\uc168\ub358 \ubd84\uc774\ub77c\uba74 \ud568\uaed8 \ud558\uc2dc\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4."}}