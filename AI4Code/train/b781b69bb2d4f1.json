{"cell_type":{"0f79872d":"code","d6047ae3":"code","b20cfecd":"code","fb6e2d98":"code","f72851dd":"code","4234c913":"code","70f311ba":"code","a8755732":"code","fb2e5fac":"code","373e8808":"code","4e48c202":"code","de6f5507":"code","cecc3882":"code","1e6fc3e0":"code","c10968f4":"code","3b150fa8":"code","98a3510e":"code","df41583c":"code","403668ca":"code","50234d70":"code","5a89d529":"code","03fdf869":"code","8229b646":"code","58104173":"code","b0dfb145":"code","8d4cd851":"code","f4d0a0d9":"code","8a5cd50a":"code","9283e36f":"code","66c1cf96":"code","9ee8f0c3":"code","a0a9ba99":"code","4f27feb7":"code","65da9b96":"code","f45929c2":"markdown","751931c7":"markdown","a041bd5b":"markdown","c0efcc15":"markdown"},"source":{"0f79872d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6047ae3":"import warnings\nwarnings.filterwarnings(\"ignore\")","b20cfecd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools","fb6e2d98":"products_info=pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")","f72851dd":"products_info.head()","4234c913":"products_info[['Sector_1', 'Sector_2', \"Sector_3\"]] =products_info['Sector(s)'].str.split(';', expand=True)\nproducts_info[['Main_Category', 'Sub_Category']] =products_info['Primary Essential Function'].str.split('-',1, expand=True)\nproducts_info=products_info.drop(columns=[\"Sector(s)\",\"Primary Essential Function\",\"URL\"])","70f311ba":"products_info[\"LP ID\"]=products_info[\"LP ID\"].astype(float)","a8755732":"districts=pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")","fb2e5fac":"districts.isnull().sum()","373e8808":"districts=districts.dropna(subset = ['state'])# as some of the state data is not available. ","4e48c202":"districts.head()","de6f5507":"districts.county_connections_ratio.value_counts()","cecc3882":"districts[\"pct_free\/reduced\"].value_counts()","1e6fc3e0":"i = districts[districts[\"county_connections_ratio\"]==\"[1, 2[\"].index\ndistricts=districts.drop(i)","c10968f4":"districts.isnull().sum()","3b150fa8":"for i in districts.columns[2:]:\n    districts[i]=districts[i].str.strip('[]')#removing square brackets\ndistricts.head()","98a3510e":"import glob\nimport os\n\n# get data file names\nglobbed_files = glob.glob(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/*.csv\") \nengagement = []","df41583c":"for filename in globbed_files:\n    frame = pd.read_csv(filename)\n    frame['district_id'] = os.path.basename(filename)\n    engagement.append(frame)\n\n# Concatenating all data into one DataFrame\nengagement = pd.concat(engagement, ignore_index=True)\nengagement['district_id'] = engagement['district_id'].str.strip('.csv').astype(int)","403668ca":"engagement['time'] = pd.to_datetime(engagement['time'], errors = 'coerce')\nengagement[\"Month\"]=pd.DatetimeIndex(engagement['time']).month\nengagement[\"Year\"]=pd.DatetimeIndex(engagement['time']).year","50234d70":"engagement.isnull().sum()#there are many null values in engagement_index.","5a89d529":"engagement=engagement.dropna(subset = ['engagement_index',\"lp_id\"])#wiping out the null values. ","03fdf869":"#Merging the tables.\nengage_districts=pd.merge(engagement,districts, how=\"inner\",left_on=\"district_id\" , right_on=\"district_id\")","8229b646":"Final_dataframe=pd.merge(engage_districts,products_info, how=\"inner\",left_on=\"lp_id\" , right_on=\"LP ID\")","58104173":"engage_table=Final_dataframe.sample(frac=0.50)#sampling the data to only 50% as we have too many rows.","b0dfb145":"engage_table.shape","8d4cd851":"engage_table.head()","f4d0a0d9":"engage_table.columns","8a5cd50a":"engage_table[\"engagement_index\"]=engage_table[\"engagement_index\"].astype(float)","9283e36f":"Monthwise=engage_table.groupby(\"Month\")[\"engagement_index\"].mean()\nplt.figure(figsize = (12,6))\nsns.pointplot(x=Monthwise.index, y=Monthwise.values,color='magenta',alpha=0.8)\nplt.xlabel('Months',fontsize = 10,color='darkblue')\nplt.ylabel('Mean of engagement index',fontsize = 10,color='darkblue')\nplt.title('Monthwise Engagement Index in 2020',fontsize = 15,color='darkblue')","66c1cf96":"edtech=engage_table.groupby(['Month','Product Name'])['engagement_index'].mean().unstack()\ntop10edtech=edtech.sum(axis=0).sort_values(ascending=False).head(10)#Comparing only top20 as we have to many products.","9ee8f0c3":"dftop10edtech=edtech[top10edtech.index].copy()\ndftop10edtech[\"Month\"]=dftop10edtech.index\ndftop10edtech = dftop10edtech.melt('Month', var_name='cols',  value_name='vals')\n\nplt.figure(figsize = (12,8))\ng = sns.factorplot(x=\"Month\", y=\"vals\", hue='cols', data=dftop10edtech)\nplt.xlabel('Months',fontsize = 10,color='darkblue')\nplt.ylabel('Engagement Index',fontsize = 10,color='darkblue')\nplt.title('Productwise Engagement Index of top 10 products in 2020',fontsize = 12,color='darkblue')","a0a9ba99":"## Creating a  Bar Plot  ##\nstate_ei=engage_table.groupby(by=[\"state\"])['engagement_index'].mean().sort_values(ascending=False)\nplt.figure(figsize=(8,4),dpi=100)\nplt.title(' Statewise mean engagement index')\nsns.barplot(x=state_ei.index,y=state_ei.values, palette = \"viridis\",edgecolor='black')\nplt.ylabel(\"Mean Engagement index\", fontsize=10)\nplt.xticks(rotation = 90)\nplt.yticks(fontsize=10)\nplt.xlabel(\"State\", fontsize=10)","4f27feb7":"locale_ei=engage_table.groupby(by=[\"locale\"])['engagement_index'].mean()\nlabels=locale_ei.index  # x ticks\nsizes= locale_ei.values\n\n## Create Pie chart Plot ##\nplt.figure(figsize = (7,7),dpi=100)\nexplode = [0.1,0,0,0]\ncolors = ['#2D87BB','#64C2A6','#AADEA7', \"#E6F69D\"]\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=False,textprops={'fontsize': 14},pctdistance=0.85,startangle=90, colors=colors)\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('Mean engagement index by Locale',color = 'Black',fontsize = 12)","65da9b96":"## Creating a  Bar Plot  ##\nbh_ei=engage_table.groupby(by=[\"pct_black\/hispanic\"])['engagement_index'].mean()\nplt.figure(figsize=(8,4),dpi=100)\nplt.title('Percentage of black\/Hispanic to the mean engagement index')\nsns.barplot(x=bh_ei.index,y=bh_ei.values, palette = \"viridis\",edgecolor='black')\nplt.ylabel(\"Mean Engagement index\", fontsize=10)\nplt.xticks(rotation = 90)\nplt.yticks(fontsize=10)\nplt.xlabel(\"Percenage of black\/Hispanic\", fontsize=10)","f45929c2":"#### **3.How does student engagement with online learning platforms relate to different geography? Demographic context (e.g., race\/ethnicity, ESL, learning disability)? Learning context? Socioeconomic status**","751931c7":"**2.How does student engagement with different types of education technology change over the course of the pandemic?**","a041bd5b":"#### Work is still in progress!!.","c0efcc15":"**1. What is the effect of the COVID-19 pandemic on online and distance learning, and how might this also evolve in the future?**"}}