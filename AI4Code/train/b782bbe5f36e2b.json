{"cell_type":{"e70c2b7e":"code","0710595a":"code","f3c926e9":"code","a6a16c35":"code","58bec200":"code","57fcd1f2":"code","3a9ac5c1":"code","dc6051f2":"code","f9ac2815":"code","ec725b3f":"code","62824841":"code","ca79ea57":"code","0dbf41a6":"code","629ed2f6":"code","d2660c13":"code","6ed1f460":"code","b89d468a":"code","e04aa5eb":"code","b89b3ddd":"code","28fec532":"code","78048711":"code","e59b97f8":"code","cd3daa7b":"code","56ce27b5":"code","aa5841fe":"code","b94472e7":"code","8b6bc9b2":"code","cbb72659":"code","61e68e98":"code","ae14e288":"code","8bd34b1f":"code","46a2a8c7":"code","804fb6ac":"code","cf723d89":"markdown","0fd9a475":"markdown","0ba3ff4e":"markdown","b03b7aba":"markdown","7dce17b7":"markdown"},"source":{"e70c2b7e":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nsns.set_theme(style='darkgrid')\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n","0710595a":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","f3c926e9":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","a6a16c35":"train.info()","58bec200":"test.info()","57fcd1f2":"all = pd.concat([train, test], sort = False)\nall.info()","3a9ac5c1":"sns.catplot(x = 'Embarked', kind = 'count', data = all)","dc6051f2":"#Fill Missing value with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())\nall.info()","f9ac2815":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","ec725b3f":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","62824841":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","ca79ea57":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","0dbf41a6":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","629ed2f6":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","d2660c13":"all.info()","6ed1f460":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","b89d468a":"all.info()","e04aa5eb":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","b89b3ddd":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","28fec532":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","78048711":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","e59b97f8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","cd3daa7b":"from sklearn.ensemble import RandomForestClassifier\nRF_Model = RandomForestClassifier()","56ce27b5":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","aa5841fe":"RF_Model.fit(X_train, y_train)","b94472e7":"predictions = RF_Model.predict(X_test)\npredictions","8b6bc9b2":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","cbb72659":"all_test.head()","61e68e98":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","ae14e288":"t_pred = RF_Model.predict(TestForPred).astype(int)","8bd34b1f":"PassengerId = all_test['PassengerId']","46a2a8c7":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","804fb6ac":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)\nprint('Submission saved!')","cf723d89":"# Checking Accuracy","0fd9a475":"# Train\/Test Split","0ba3ff4e":"# Final Predictions","b03b7aba":"# Thanks for reading. Don't forget to upvote the work. Good luck kaggling!","7dce17b7":"# Building a Random Forest"}}