{"cell_type":{"965aed08":"code","7ce1ec10":"code","3cd35146":"code","17e570d2":"code","9b2cfb8b":"code","c413f6f6":"code","7e539685":"code","651ae697":"code","2bfe46a7":"code","1dd85df9":"code","def59ab0":"code","c4bcd202":"code","6e93095d":"code","e6c3170f":"code","3d80ce4b":"code","02c20dc9":"code","f35272a1":"code","55985001":"code","cc65839d":"code","3c68b507":"code","10c84b46":"code","d080b54e":"code","ef993c5a":"code","e68c8900":"code","82a4b5a3":"code","c401d8e6":"code","4ae991e5":"code","e476ab15":"code","22de4bdf":"code","ea8946dc":"code","2a9c34ac":"code","426f6c69":"code","bb9c341c":"code","452be241":"code","73e76cb1":"code","85650d75":"code","b37c187c":"code","517dd7a5":"code","19d7b544":"code","2c3cad7b":"code","422308fe":"code","68e857a3":"code","7328c392":"code","12a58b25":"code","92c5d373":"code","2e4eb385":"code","fc2673c1":"code","59f6eb71":"code","5224e7f2":"code","f595aedd":"code","5d0682e1":"code","cba29428":"code","b05fd0bc":"code","f244909a":"code","7dbfac3a":"code","3805b7e6":"code","cd940673":"code","0ac804f0":"code","0e1be87b":"code","391ce846":"code","e79076fd":"code","b828df74":"code","9889b60e":"code","61ec32a6":"code","6e7c276c":"code","3d2d4548":"code","f83f8b32":"code","3f6c7006":"code","62af5465":"markdown","7a8d8b42":"markdown","19455cdb":"markdown","fe5be702":"markdown","84bb49df":"markdown","e114cb4b":"markdown","e0ccd002":"markdown","1293421e":"markdown","419fb513":"markdown","aab27d14":"markdown","1dc4199c":"markdown","af999ed7":"markdown","1b8b0e94":"markdown","47c3f848":"markdown","0ca72323":"markdown","2dd9d2d1":"markdown","693d0e47":"markdown","63949b89":"markdown","78df596c":"markdown","ffc64dbe":"markdown","13851cbf":"markdown","34c887dc":"markdown","5a203672":"markdown","a1412b37":"markdown","29efad91":"markdown","80f450de":"markdown","74d502a6":"markdown","4ad8c5cc":"markdown","6f38c485":"markdown","2fbedce5":"markdown","f766c3a3":"markdown","de5f4025":"markdown","79883d99":"markdown","cc899713":"markdown","8663605a":"markdown","1954f1e5":"markdown"},"source":{"965aed08":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport seaborn as sns\nimport missingno as msno\n\nfrom sklearn.model_selection import train_test_split\nfrom category_encoders import TargetEncoder\nfrom sklearn.preprocessing import LabelEncoder","7ce1ec10":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nprint(train.shape, test.shape)","3cd35146":"train","17e570d2":"train.info()","9b2cfb8b":"train.describe()","c413f6f6":"data = [train, test]","7e539685":"msno.bar(train, color='blue')\nplt.title('Missing values in train set', fontsize=20)\nplt.show()","651ae697":"msno.bar(test, color='orange')\nplt.title('Missing values in test set', fontsize=20)\nplt.show()","2bfe46a7":"train.corr()","1dd85df9":"sns.heatmap(train.corr(), annot=True) \nplt.title('Correlation matrix', fontsize=15)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","def59ab0":"# Numerical and Categorical data\ndf_num = train[['Age', 'SibSp', 'Parch', 'Fare', 'Survived', 'Pclass']]\ndf_cat = train[['Sex', 'Ticket', 'Cabin', 'Embarked']]","c4bcd202":"def hist_distr(data):\n    for i in data.columns:\n        plt.hist(data[i], color = 'blue')\n        plt.title(i)\n        plt.show()","6e93095d":"hist_distr(df_num)","e6c3170f":"def cat_plot(data):\n    for i in data.columns:\n        sns.barplot(x = data[i], y = df_num.Age)\n        plt.title(i)\n        plt.show()    ","3d80ce4b":"cat_plot(df_cat)","02c20dc9":"train.iloc[:, [2, 3, 5]][:5]","f35272a1":"train[train['Embarked'].isna()]","55985001":"sns.barplot(x=train['Pclass'], y=train['Fare'], hue=train['Embarked'])","cc65839d":"sns.barplot(x=train['Pclass'], y=train['Survived'], hue=train['Embarked'])","3c68b507":"train[train['Embarked']=='S']['Pclass'].value_counts()","10c84b46":"train[train['Embarked']=='C']['Pclass'].value_counts()","d080b54e":"train[train['Embarked']=='Q']['Pclass'].value_counts()","ef993c5a":"for d in data:\n    d['Cabin'] = d['Cabin'].str[0]","e68c8900":"Pclass1 = train[train['Pclass'] == 1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass'] == 2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass'] == 3]['Cabin'].value_counts()\n\ncabin_df = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ncabin_df.index = ['1-class', '2-class', '3-class']\ncabin_df.plot(kind='bar', stacked=True)","82a4b5a3":"for d in data:\n    d['Title'] = d['Name'].str.extract(' ([A-Za-z]+)\\.', expand=True)","c401d8e6":"train['Title'].value_counts()","4ae991e5":"test['Title'].value_counts()","e476ab15":"titles = {\n    \"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\n    \"Countess\": 3, \"Lady\": 3, \"Mme\": 3, \"Ms\": 3, \"Sir\": 3,  \"Capt\": 3, \"Don\": 3, \"Dona\": 3, \"Jonkheer\": 3\n}\n\nfor d in data:\n    d['Title'] = d['Title'].map(titles)","22de4bdf":"train[:3]","ea8946dc":"test[:3]","2a9c34ac":"train['Age'].fillna(train.groupby([\"Pclass\", \"Title\"])[\"Age\"].transform(\"mean\"), inplace=True)\ntest['Age'].fillna(test.groupby([\"Pclass\", \"Title\"])[\"Age\"].transform(\"mean\"), inplace=True)","426f6c69":"to_drop = ['PassengerId', 'Name']\ntrain.drop(to_drop, axis=1, inplace=True)\ntest.drop(\"Name\", axis=1, inplace=True)","bb9c341c":"def age_enc(data):\n    for i in range(len(data)):\n        if data.Age[i] < 18:\n            data['Age'][i] = 'Under_18'\n            continue\n        if (data.Age[i] > 18) & (data.Age[i] < 38): \n            data['Age'][i] = 'Young'\n            continue\n        if (data.Age[i] > 38) & (data.Age[i] < 60): \n            data['Age'][i] = 'Middle'\n            continue\n        else:\n            data['Age'][i] = 'Old'\n            continue","452be241":"age_enc(train)","73e76cb1":"age_enc(test)","85650d75":"train['Embarked'].fillna('S', inplace=True)","b37c187c":"first_class_train = train[train['Pclass'] == 1]['Cabin'].mode()[0]\nsecond_class_train = train[train['Pclass'] == 2]['Cabin'].mode()[0]\nthird_class_train = train[train['Pclass'] == 3]['Cabin'].mode()[0]\n\nfirst_class_test = test[test['Pclass'] == 1]['Cabin'].mode()[0]\nsecond_class_test = test[test['Pclass'] == 2]['Cabin'].mode()[0]\nthird_class_test = test[test['Pclass'] == 3]['Cabin'].mode()[0]","517dd7a5":"def fill_cabin(data):\n    for i in range(len(data)):\n        if (data['Pclass'][i] == 1) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = first_class_train\n            continue\n        if (data['Pclass'][i] == 2) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = second_class_train\n            continue\n        elif (data['Pclass'][i] == 3) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = third_class_train\n            continue\n            \n        \ndef fill_cabin_test(data):\n    for i in range(len(data)):\n        if (data['Pclass'][i] == 1) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = first_class_test\n            continue\n        if (data['Pclass'][i] == 2) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = second_class_test\n            continue\n        elif (data['Pclass'][i] == 3) & (data['Cabin'][i] not in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'T']):\n            data['Cabin'][i] = third_class_test\n            continue","19d7b544":"fill_cabin(train)","2c3cad7b":"fill_cabin_test(test)","422308fe":"train['Cabin'].value_counts()","68e857a3":"test['Cabin'].value_counts()","7328c392":"train.isna().sum()","12a58b25":"test.isna().sum()","92c5d373":"test['Fare'].fillna(test.groupby('Pclass')['Fare'].transform('mean'), inplace=True)","2e4eb385":"def fare_enc(data):\n    for i in range(len(data)):\n        if data.Fare[i] < 150:\n            data['Fare'][i] = 'Standard'\n            continue\n        if (data.Fare[i] > 150) & (data.Fare[i] < 350): \n            data['Fare'][i] = 'Medium'\n            continue\n        if data.Fare[i] > 350: \n            data['Fare'][i] = 'Premium'\n            continue","fc2673c1":"fare_enc(train)","59f6eb71":"fare_enc(test)","5224e7f2":"train","f595aedd":"to_drop = [\"Title\", \"Ticket\", \"SibSp\", \"Parch\"]\ntrain = train.drop(to_drop, axis=1)\ntest = test.drop(to_drop, axis=1)","5d0682e1":"df_train = pd.get_dummies(train, columns=[\"Age\", \"Cabin\", \"Sex\", \"Embarked\", \"Pclass\", \"Fare\"], prefix=[\"Age\", \"Cabin\", \"Sex\", \"Embarked_from\", \"Pclass\", \"Fare\"])\ndf_test = pd.get_dummies(test, columns=[\"Age\", \"Cabin\", \"Sex\", \"Embarked\", \"Pclass\", \"Fare\"], prefix=[\"Age\", \"Cabin\", \"Sex\", \"Embarked_from\", \"Pclass\", \"Fare\"])","cba29428":"X = df_train.drop('Survived', axis=1)\ny = df_train['Survived']","b05fd0bc":"X = X.drop(\"Cabin_T\", axis=1)\ndf_test = df_test.drop(\"PassengerId\", axis=1)","f244909a":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","7dbfac3a":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score","3805b7e6":"k_fold = KFold(n_splits=10, shuffle=True, random_state=243)","cd940673":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","0ac804f0":"print(f\"KNN average score - {round(np.mean(score)*100, 2)}\")","0e1be87b":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","391ce846":"print(f\"Bayes average score - {round(np.mean(score)*100, 2)}\")","e79076fd":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","b828df74":"print(f\"SVM average score - {round(np.mean(score)*100, 2)}\")","9889b60e":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","61ec32a6":"print(f\"Decision tree average score - {round(np.mean(score)*100, 2)}\")","6e7c276c":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","3d2d4548":"print(f\"Random Forest average score - {round(np.mean(score)*100, 2)}\")","f83f8b32":"clf = KNeighborsClassifier(n_neighbors = 13)\nclf.fit(X, y)","3f6c7006":"prediction = clf.predict(df_test)","62af5465":"Now let's look to our features more","7a8d8b42":"### 2 - Exploratory Data Analysis","19455cdb":"#### KNN","fe5be702":"1 - I want to count how many missing value consist our train & test sets.\n<br>\n2 - I will build a correlation matrix.\n<br>\n3 - I want to divide my columns to numerical and categorical, then consider them.\n<br>\n4 - I want to see more about my features.\n","84bb49df":"#### Naive Bayes","e114cb4b":"Why 'S'? We discussed it above. Now let's fill Cabin.","e0ccd002":"#### Cross Validation (K-fold)","1293421e":"# Titanic - Machine Learning from Disaster","419fb513":"#### Decision Tree","aab27d14":"1 - 'Survived' and 'Pclass' negatively correlated, it possibly means that more surviveds from first class.\n<br>\n2 - 'SibSp' and 'Parch' highly correlated, it was obvious.\n<br>\n3 - 'Age' and 'Pclass' negatively correlated, maybe first class passengers older than other classes.\n<br>\n4 - 'Fare' and 'Pclass' negatively correlated, I think everything is clear here. The more 'Fare' the higher the 'Pclass'","1dc4199c":"Survival\t0 = No, 1 = Yes\n<br>\npclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n<br>\nsibsp\t# of siblings \/ spouses aboard the Titanic\n<br>\nparch\t# of parents \/ children aboard the Titanic\n<br>\nfare\tPassenger fare\n<br>\ncabin\tCabin number\n<br>\nembarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n<br>","af999ed7":"#### SVM","1b8b0e94":"### 5 - Modelling","47c3f848":"#### Random Forest","0ca72323":"Le'ts look to our categorical data.","2dd9d2d1":"### 1 - Import libaries and Read data","693d0e47":"We've done with data cleaning and now I want to encode it.","63949b89":"We need to change 'Sex' and 'Embarked' columns to numeric.\n<br>\nWith this data we can fill missing values in 'Age' column.\n<br>\nAlso we have 'Name' column, where we can extract title. Let's look to 'Name' column.","78df596c":"Now turn for Cabin feature.","ffc64dbe":"Our passengers was in First class and they are survived. If we look at our barplots we can see that our passengers more likely embarked from S side. Also if we count passengers of first classes in each side we can define that more passengers of first class embarked from S side. I fill miss values in next section(Feature Engineering)\n<br>\nLet's consider Cabin feature. Firstly I want to leave only first symbol of each cabine.","13851cbf":"What conclusions can be drawn?","34c887dc":"We will fill missing values according passengers class.","5a203672":"We have miss value in Embarked feaure, let's try to define it's value.","a1412b37":"### 6 - Test","29efad91":"We cleaned all data, last thing is Fare feature in test set, here is complicated task. I just get mean of Fare according to the Passenger class.","80f450de":"### 3 - Feature Engineering","74d502a6":"We see that many of our features consist outliers.They can add extra noise when the algorithm makes predictions.","4ad8c5cc":"Our train set consist missing values in Age column and Cabin column also little in Emabrked column. I will imput missing values","6f38c485":"Now we have 4 type of title and we can group age by PClass and Title to get avarage age.","2fbedce5":"The competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","f766c3a3":"Now our 'Age' feature doesn't exist missing values. Let's encode age feature, but before i want to drop some features ","de5f4025":"I'll use only first three titles","79883d99":"<img src='https:\/\/media.nationalgeographic.org\/assets\/photos\/000\/273\/27302_c0-41-990-701_r1050x700.jpg?d4ccf3044d9da0d0118103be3a76bd1319370847'>","cc899713":"As we remember our train set also have missing values in Cabin and Embarked Features, let's start from Embarked.","8663605a":"<div style=\"display: flex;\"><div style=\"width: 10px; height: 10px; background-color: blue;\"><\/div> - Train set color<\/div>\n<div style=\"display: flex;\"><div style=\"width: 10px; height: 10px; background-color: orange;\"><\/div> - Test set color<\/div>","1954f1e5":"Our train set consist missing values in Age column and Cabin column also 1 in Fare column. Let's look to the correlation matrix."}}