{"cell_type":{"89bb7d79":"code","06d54c48":"code","3642bc83":"code","577f99b7":"code","cec87862":"code","73710bfc":"code","408548a4":"code","dc09ab16":"code","2bcc27aa":"code","34403e6e":"code","ef940c50":"code","99213549":"code","2011a6ab":"code","d6c88ae9":"code","7bcc99ee":"code","2e1af3c9":"code","fce565ff":"code","2211e0be":"code","58daaae6":"code","3560b88b":"code","d8c34753":"code","5b2cd5e8":"code","6ee1bd86":"code","3a0cc85a":"code","fe10be25":"code","47914052":"code","6517cbc9":"code","49b87c86":"code","55a944a1":"code","1d7c242e":"code","a08b187f":"code","44bf1102":"code","8178bf8d":"code","c26afbd1":"code","8b05cd7f":"code","761495b7":"code","6e20383e":"code","3216273f":"code","3b9ec77a":"markdown","2b15d618":"markdown"},"source":{"89bb7d79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","06d54c48":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","3642bc83":"Ins_Data = pd.read_csv(\"..\/input\/insurance.csv\")","577f99b7":"Ins_Data","cec87862":"Ins_Data.tail()","73710bfc":"Ins_Data.head()","408548a4":"#from sklearn.model_selection import train_test_split\n#test_x,train_x,test_y,train_y = train_test_split(x,y,est_size = 0)","dc09ab16":"Ins_Data.describe().T","2bcc27aa":"Ins_Data.describe","34403e6e":"#graphs = sns.pairplot(data)\n#graphs.set()","ef940c50":"Ins_Data.info()","99213549":"Ins_Data[\"sex\"].value_counts()","2011a6ab":"Ins_Data[\"sex\"]= Ins_Data.sex.replace({'male':1,'female':2})","d6c88ae9":"Ins_Data[\"sex\"]","7bcc99ee":"Ins_Data[\"smoker\"].value_counts()","2e1af3c9":"Ins_Data[\"smoker\"]= Ins_Data.smoker.replace({'yes':1,'no':0})","fce565ff":"Ins_Data[\"smoker\"]","2211e0be":"Ins_Data[\"region\"].value_counts()","58daaae6":"Ins_Data[\"region\"]= Ins_Data.region.replace({'southeast':1,'southwest':2,'northwest':3,'northeast':4})","3560b88b":"Ins_Data[\"region\"]","d8c34753":"Ins_Data.head()","5b2cd5e8":"Ins_Data.tail()","6ee1bd86":"sns.pairplot(data=Ins_Data)","3a0cc85a":"Ins_Data.corr()","fe10be25":"#Data Analysis\n#Age vs c harges\n#The more age will have more charges(roughly estimated)\nplt.figure(figsize = (12, 8))\nsns.barplot(x = 'age', y = 'expenses', data = Ins_Data)\n\nplt.title(\"Age vs expenses\")","47914052":"\n# sex vs expenses\n# males have slightly greater insurance than females in generally(Assumption)\n\nplt.figure(figsize = (6, 6))\nsns.barplot(x = 'sex', y = 'expenses', data = Ins_Data)\n\nplt.title('sex vs expenses')","6517cbc9":"# children vs Expenses\n# no. of childrens of a person has a very interesting dependency on insurance costs\n\nplt.figure(figsize = (12, 8))\nsns.barplot(x = 'children', y = 'expenses', data = Ins_Data)\n\nplt.title('children vs expenses')","49b87c86":"# region vs expenses\n# From the graph we can see that the region actually does not play any role in determining the insurance \n\nplt.figure(figsize = (12, 8))\nsns.barplot(x = 'region', y = 'expenses', data = Ins_Data)\n\nplt.title('region vs expenses')","55a944a1":"# smoker vs expenses\n# from the graph below, it is visible that smokers have more expenses than the non smokers\n\nplt.figure(figsize = (6, 6))\nsns.barplot(x = 'smoker', y = 'expenses', data = Ins_Data)\n\nplt.title('smoker vs expenses')","1d7c242e":"Ins_Data.corr()","a08b187f":"#splitting dependednt and independednt variable\ny = Ins_Data[\"expenses\"]\nx = Ins_Data.drop(columns=[\"expenses\",\"sex\",\"region\"])\n\nprint(y.shape)\nprint(x.shape)","44bf1102":"\n# splitting the dataset into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)\n\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","8178bf8d":"# standard scaling\n\nfrom sklearn.preprocessing import StandardScaler\n\n# creating a standard scaler\nsc = StandardScaler()\n\n# feeding independents sets into the standard scaler\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","c26afbd1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n\n# creating the model\nmodel = LinearRegression()\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2, axis = None)\nprint(\"MSE :\", mse)\n\n# Calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n# Calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)","8b05cd7f":"y_test","761495b7":"y_pred","6e20383e":"# Print various metrics\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n\nprint(\"Predicting the train data\")\ntrain_predict = model.predict(x_train)\nprint(\"Predicting the test data\")\ntest_predict = model.predict(x_test)\nprint(\"1.MAE\")\nprint(\"Train : \",mean_absolute_error(y_train,train_predict))\nprint(\"Test  : \",mean_absolute_error(y_test,test_predict))\nprint(\"*****************************************\")\nprint(\"2.MSE\")\nprint(\"Train : \",mean_squared_error(y_train,train_predict))\nprint(\"Test  : \",mean_squared_error(y_test,test_predict))\nprint(\"*****************************************\")\nimport numpy as np\nprint(\"3.RMSE\")\nprint(\"Train : \",np.sqrt(mean_squared_error(y_train,train_predict)))\nprint(\"Test  : \",np.sqrt(mean_squared_error(y_test,test_predict)))\nprint(\"*****************************************\")\nprint(\"4.R^2\")\nprint(\"Train : \",r2_score(y_train,train_predict))\nprint(\"Test  : \",r2_score(y_test,test_predict))\nprint(\"*****************************************\")\nprint(\"5.MAPE\")\nprint(\"Train : \",np.mean(np.abs((y_train - train_predict) \/ y_train)) * 100)\nprint(\"Test  : \",np.mean(np.abs((y_test - test_predict) \/ y_test)) * 100)","3216273f":"#Plot actual vs predicted value\nplt.figure(figsize=(10,7))\nplt.title(\"Actual vs. predicted expenses\",fontsize=25)\nplt.xlabel(\"Actual expenses\",fontsize=18)\nplt.ylabel(\"Predicted expenses\", fontsize=18)\nplt.scatter(x=y_test,y=test_predict)","3b9ec77a":"**Linear Regression**","2b15d618":"**Modelling**"}}