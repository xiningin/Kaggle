{"cell_type":{"3dd4cc30":"code","b7cdd7ef":"code","01dd7a0d":"code","d5316796":"code","f925b2c6":"code","6988d7e1":"code","ffe9c549":"code","b8652b9b":"code","5051e71e":"code","e1a4a696":"code","b8af9ba9":"code","93f46fd8":"code","115d04cf":"code","4ef3379b":"code","016e145b":"code","7f096816":"code","2592c990":"code","e1d20d41":"code","eee06c4c":"code","112df515":"code","8fd3b4dc":"code","412bb18a":"code","46a620ec":"code","e9c56162":"code","3cee936e":"code","d762f958":"code","96f80dd6":"code","016c5689":"code","4fe2c292":"code","c4b84359":"code","d8d72db0":"code","c1da8dd8":"code","b3be2c14":"code","2aeab399":"code","3185a27d":"code","2ab853ae":"code","6080963f":"code","3d949690":"code","770e28a6":"code","6f05ee58":"code","c96868d2":"code","1d910bd0":"markdown","ce482167":"markdown","f4eaa13d":"markdown","08cbd913":"markdown","37045a33":"markdown","55f87e8f":"markdown","a73c8961":"markdown","8b5e790b":"markdown","c8bde92c":"markdown","8ad8c0a8":"markdown","016348d9":"markdown","9636eda8":"markdown","1e4c7d18":"markdown","2ad5014e":"markdown","17a977e5":"markdown","6deca530":"markdown","dfb0cbed":"markdown","9563e7d1":"markdown","a3359769":"markdown"},"source":{"3dd4cc30":"from fastai.vision import *\nfrom fastai import *","b7cdd7ef":"folder = 'aloevera'\nfile = 'urls_aloevera.txt'\npath = Path('data\/succulents')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)\nclasses = ['aloevera','jade','burro']\ndownload_images(\"..\/input\/urls_aloevera.txt\", dest, max_pics=200)","01dd7a0d":"folder = 'jade'\nfile = 'urls_jade.txt'\npath = Path('data\/succulents')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)\ndownload_images(\"..\/input\/urls_jade.txt\", dest, max_pics=200)","d5316796":"folder = 'burro'\nfile = 'urls_burro.txt'\npath = Path('data\/succulents')\ndest = path\/folder\ndest.mkdir(parents=True, exist_ok=True)\ndownload_images(\"..\/input\/urls_burro.txt\", dest, max_pics=200)","f925b2c6":"os.listdir(\"..\/input\/\")\n","6988d7e1":"path.ls()","ffe9c549":"for c in classes:\n    print(c)\n    verify_images(path\/c, delete=True, max_size=500)","b8652b9b":"np.random.seed(42)\ndata = ImageDataBunch.from_folder(path, train=\".\", valid_pct=0.2,\n        ds_tfms=get_transforms(), size=224, num_workers=0).normalize(imagenet_stats)\n","5051e71e":"# If you already cleaned your data, run this cell instead of the one before\n#np.random.seed(42)\n#data = ImageDataBunch.from_csv(\".\", folder=\".\", valid_pct=0.2, csv_labels='cleaned.csv',        \n#                               ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)","e1a4a696":"data.classes","b8af9ba9":"data.show_batch(rows=2, figsize=(5,5))","93f46fd8":"data.classes, data.c, len(data.train_ds), len(data.valid_ds)","115d04cf":"learn = create_cnn(data, models.resnet34, metrics=error_rate)","4ef3379b":"learn.fit_one_cycle(5)","016e145b":"learn.save('stage-1')","7f096816":"interp = ClassificationInterpretation.from_learner(learn)\n","2592c990":"interp.plot_confusion_matrix()\n","e1d20d41":"interp.plot_top_losses(9, figsize=(7,8))","eee06c4c":"learn.unfreeze()","112df515":"learn.fit_one_cycle(1)","8fd3b4dc":"learn.load('stage-1')","412bb18a":"learn.unfreeze()","46a620ec":"learn.lr_find()","e9c56162":"learn.recorder.plot()","3cee936e":"learn.fit_one_cycle(2, max_lr=slice(3e-5,3e-4))","d762f958":"learn.save('stage-2')","96f80dd6":"interp = ClassificationInterpretation.from_learner(learn)\n","016c5689":"interp.plot_confusion_matrix()","4fe2c292":"img = open_image(path\/'aloevera'\/'00000050.jpg')\nimg.show(figsize=(4, 4))","c4b84359":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","d8d72db0":"img = open_image(path\/'burro'\/'00000015.jpg')\nimg.show(figsize=(4, 4))","c1da8dd8":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","b3be2c14":"img = open_image(path\/'jade'\/'00000001.jpg')\nimg.show(figsize=(4, 4))","2aeab399":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","3185a27d":"#learn.model = learn.model.cpu()\nlearn.export()","2ab853ae":"path.ls()","6080963f":"learn = load_learner(path)","3d949690":"defaults.device = torch.device('cpu')","770e28a6":"img = open_image(path\/'jade'\/'00000002.jpg')\nimg.show(figsize=(4, 4))","6f05ee58":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","c96868d2":"import shutil\nshutil.rmtree(\".\/data\/succulents\")","1d910bd0":"### ImageDataBunch creates the train, validation and test sets from input. \n### get_transforms - transforms all images to size 224x224, it also centers, crops and zooms the images\n### Images are normalized to have pixels with mean 0 and std 1","ce482167":"### Export all the model information and weights learnt by the model. This export.pkl file can be used to deploy the model on a different machine.","f4eaa13d":"### If we try to train it now from the scratch, the error rate is higher.","08cbd913":"### Thank you for viewing this kernel. Please upvote if you enjoyed it!","37045a33":"### Lets find out how well our model is able to predict the succulent classes","55f87e8f":"## This kernel uses the fastai vision libraries\n### 1. Read input URLs for the three varieties of succulents as input and download the images\n### 2. Split the input images into train, validation and test sets\n### 3. Transform and normalize the images\n### 4. Train a model using resnet architecture\n### 5. Interpret results by creating a confusion matrix \n### 6. Predict using the model\n### 7. Export the learner object to deploy the model on another machine\n\n### My learning from this project:\nAt first when i opted for classes Aloevera, Jade and Plush, there was not much distinction between the classes Jade and Plush. This and the image data having un-pruned images gave a metric error of around 20 - 30%\n\nAfter using a snippet bookmark to choose google images and also changing the classes to Aloevera, Jade and Burro the metric error reduced to 8%\n\nHigh number of epochs causes overfitting.\nChoosing Learing Rate where the slope is the steepest gives low error.","a73c8961":"### Error rate now marginally reduces","8b5e790b":"### The model has correctly predicted the image as belonging to succulent class aloevera!\n### Now lets see how well it recognises the classes burro and jade.","c8bde92c":"Delete all output files","8ad8c0a8":"# Classify images of succulents into Aloevera, Jade and Burro using image classification\n\n![image.png](attachment:image.png)","016348d9":"### Analyzing results: Create confusion matrix and plot the misclassified images.","9636eda8":"### Save model weights so that you can reload them later","1e4c7d18":"### We can make the model better by unfreezing and training the whole model","2ad5014e":"### Load the stage-1 weights saved earlier, unfreeze and then find the learing rate.","17a977e5":"### A look at our input images","6deca530":"### Load the learner object from export.pkl and predict.","dfb0cbed":"### Analyzing results: Create confusion matrix and plot the misclassified images.","9563e7d1":"### Train the model. Training means creating a set of weights that fit our data well. This trains only the last few layers of our model. Here we run 5 times through our entire set of training images. Error rate is around 9%, which means accuracy achieved is around 91%.","a3359769":"### Training a model using resnet architecture"}}