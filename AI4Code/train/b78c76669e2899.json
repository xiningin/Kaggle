{"cell_type":{"4a27c6a0":"code","1534c0b7":"code","ec36e770":"code","20a2bbcb":"code","4717fd7a":"code","ff317d14":"code","273a873c":"code","9010e0dd":"code","cd0b0cf6":"code","4c36aa2d":"code","503c49cd":"code","4b7e7969":"code","08209c5a":"code","7bcbbddd":"code","05dea53f":"code","c69529fa":"code","a6756095":"code","7c663ebf":"code","bb4d7dda":"code","10131687":"code","d29e2f19":"code","461ff246":"code","28dd9da0":"code","5b60525e":"code","9744347f":"code","49680128":"code","d447d81d":"code","dd56226e":"code","26c84329":"code","bf2c8cb3":"code","28f9cfe5":"code","4f6cc690":"code","7815943c":"code","147c7c23":"code","aa7aff63":"code","055f190f":"code","38f44139":"code","ac854a74":"code","94f979bf":"code","ddfb656c":"code","f35f814d":"code","bd4555f5":"code","9f3b25c7":"code","3f16e2a1":"code","5fa2ba04":"code","95229b77":"code","5359f093":"code","5ebb02f5":"code","8c8963bd":"code","a9c5ce87":"code","11c22fde":"code","cc4960f1":"code","61469aa2":"code","4b8a0d8f":"code","5432ab9d":"code","8323e791":"code","fdd64a96":"code","b1751290":"code","7f018474":"code","63f1fec5":"code","9ece30fc":"code","9d380eb6":"code","c99fe619":"code","a728d2fe":"code","5ead3330":"code","1d7b78c5":"code","e5b85cf4":"markdown","4cef1fc9":"markdown","9b730671":"markdown","38a1c773":"markdown","a71591a1":"markdown","11ca465f":"markdown","b673c3e4":"markdown","8e0adf84":"markdown","07512439":"markdown","36cb89f0":"markdown","15b9d308":"markdown","8c452110":"markdown","c313d51b":"markdown","388aacd0":"markdown","c1f5fea1":"markdown","2765adea":"markdown","aff240a0":"markdown","6adecc7e":"markdown","77f5fd28":"markdown","1216f23b":"markdown","55071a84":"markdown","7df49ae7":"markdown","f9d841db":"markdown","62531851":"markdown","47799e23":"markdown","d3b28c5a":"markdown","7c37d1cf":"markdown","e3be1bc4":"markdown","1058ea0c":"markdown","b05d1598":"markdown","668b2df3":"markdown","80dabe39":"markdown","0f7a8ae8":"markdown","26484cd4":"markdown"},"source":{"4a27c6a0":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","1534c0b7":"from fastai import *\nfrom fastai.vision import *\nfrom skimage import data\nfrom skimage import filters\nfrom skimage import exposure\nfrom skimage import measure\nfrom skimage import segmentation\nfrom skimage import morphology\nfrom skimage import color","ec36e770":"os.listdir(\"..\/input\/oil tanks\/Oil Tanks\")","20a2bbcb":"path = Path(\"..\/input\/oil tanks\/Oil Tanks\")","4717fd7a":"j = json.load(open(path\/'labels.json'))","ff317d14":"def conv_bbox(box_dict):\n    \n    xs = np.array(list(set([i['x'] for i in box_dict])))\n    ys = np.array(list(set([i['y'] for i in box_dict])))\n    \n    x_min = xs.min()\n    x_max = xs.max()\n    y_min = ys.min()\n    y_max = ys.max()\n    \n    return y_min, x_min, y_max, x_max","273a873c":"def check_bb(bbox, shape):\n        c, h, w = shape\n        \n        for d in bbox:\n            if d['x'] <= 2 or d['x'] >= w-2:\n                return False\n            elif d['y'] <=2 or d['y'] >= h-2:\n                return False\n        return True","9010e0dd":"def intersection(bb1, bb2):\n    y_min1, x_min1, y_max1, x_max1 = bb1\n    y_min2, x_min2, y_max2, x_max2 = bb2\n    \n    x_left = max(x_min1, x_min2)\n    x_right = min(x_max1, x_max2)\n    y_top = max(y_min1, y_min2)\n    y_bottom = min(y_max1, y_max2)\n\n    intersection = max(0, x_right - x_left + 1) * max(0, y_bottom - y_top+1)\n    return intersection","cd0b0cf6":"class Tank():\n    def __init__(self, box_dict, image, factor_x=0.5, factor_y=0.6):\n        \n        self.image = image\n        self.gt_coords = conv_bbox(box_dict) # bounding box coordinates\n        y_min, x_min, y_max, x_max = self.gt_coords\n        \n        # scale for tank cropping\n        margin_x = int((x_max-x_min)*factor_x)\n        margin_y = int((y_max-y_min)*factor_y)\n\n        # y_min, y_max, x_min, x_max values for cropping\n        self.y_min = max(y_min - margin_y, 0)\n        self.y_max = max(y_max + int(margin_y\/\/2), 0)\n        self.x_min = max(x_min - margin_x, 0)\n        self.x_max = max(x_max + margin_x, 0)\n        \n        # actual margins, given that the calculated margin might extend beyond the image\n        margin_y_true = y_min - self.y_min\n        margin_x_true = x_min - self.x_min\n        \n        # coordinates of the actual bounding box relative to the crop box\n        self.bbox_relative = [margin_y_true, margin_x_true, (y_max-y_min)+margin_y_true, (x_max-x_min)+margin_x_true]\n\n        # crop section of the image\n        self.tank_crop = self.image.data[:, self.y_min:self.y_max, self.x_min:self.x_max].permute(1,2,0).numpy()\n        \n        self.proc_tank()\n        self.get_regions()\n        \n    def proc_tank(self):\n        # HSV conversion\n        hsv = color.rgb2hsv(self.tank_crop)\n        H = hsv[:,:,0]\n        S = hsv[:,:,1]\n        V = hsv[:,:,2]\n        \n        # LAB conversion\n        lab = color.rgb2lab(self.tank_crop)\n        l1 = lab[:,:,0]\n        l2 = lab[:,:,1]\n        l3 = lab[:,:,2]\n        \n        # Enhanced image\n        self.tank_hsv = -(l1+l3)\/(V+1)\n        \n        # Threshold values\n        t1 = filters.threshold_minimum(self.tank_hsv)\n        t2 = filters.threshold_mean(self.tank_hsv)\n        \n        # Thresholding\n        self.tank_thresh = self.tank_hsv > (0.6*t1 + 0.4*t2)\n        \n        # Processed, labeled image\n        self.label_image = measure.label(morphology.area_closing(morphology.closing(\n            segmentation.clear_border(filters.hessian(self.tank_thresh)))))\n        \n    def get_regions(self):\n        # Regions within image\n        self.regions_all = measure.regionprops(self.label_image)\n        \n        self.regions = []\n        \n        # Some regions are noise. This ensures that regions have a decent area ( > 25 px),\n        # that the region intersects the boudning box around the tank (removes lots of noisy features)\n        # and that the processed region is also present in the thresholded image (the hessian filter can sometimes \n        # add artifacts that need to be removed this day)\n        for region in self.regions_all:\n            if intersection(self.bbox_relative, region.bbox) > 300:\n                if region.area > 25:\n                    b = region.bbox\n                    if abs(self.tank_thresh[b[0]:b[2], b[1]:b[3]].mean() - region.image.mean()) < 0.06:\n                        self.regions.append(region)\n                            \n        # areas of all regions\n        areas = np.array([i.area for i in self.regions])\n        \n        # if there are more than two areas found, take the two largest\n        # 1 - ratio of the two largest areas calculates the volume estimation\n        if len(areas) > 1:\n            idx2, idx1 = areas.argsort()[-2:]\n            self.volume = 1 - self.regions[idx2].area \/ self.regions[idx1].area\n        # if only 1 area is found, tank is assumed to be full\n        else:\n            idx2 = 0\n            idx1 = 0\n            self.volume = 1\n        \n        # Blank image onto which to paste only the two shadow regions\n        self.blank = np.zeros(self.tank_crop.shape[:2])\n        \n        for region in [self.regions[idx1], self.regions[idx2]]:\n            y_min, x_min, y_max, x_max = region.bbox\n            self.blank[y_min:y_max, x_min:x_max] += region.image.astype('uint8')\n                        \n        # get contours of shadows\n        self.contours = measure.find_contours(self.blank, 0.5)\n        if len(self.contours) > 1:\n            # If there are multiple contours, take the two longest\n            contour_idxs = np.array([len(i) for i in self.contours]).argsort()[-2:]\n        else:\n            contour_idxs = [0]\n        self.contours_select = [self.contours[i] for i in contour_idxs]            \n    \n    def plot_tank(self):\n        fig, axes = plt.subplots(3,3, figsize=(12,12))\n\n        fig.suptitle('Tank Volume {:.3f}%'.format(self.volume))\n\n        axes[0][0].imshow(self.tank_crop)\n        axes[0][0].set_title('Tank Crop')\n\n        axes[0][1].imshow(self.tank_crop)\n        axes[0][1].imshow(self.blank, alpha=0.5)\n        axes[0][1].set_title('Shadow Overlay')\n\n        axes[0][2].imshow(self.tank_crop)\n        for cnt in self.contours_select:\n            axes[0][2].plot(cnt[:,1], cnt[:,0])\n        axes[0][2].set_title('Shadow Contour')\n\n        axes[1][0].imshow(self.blank)\n        axes[1][0].set_title('Shadow')\n\n        axes[1][1].imshow(np.zeros(self.blank.shape))\n        for cnt in self.contours:\n            axes[1][1].plot(cnt[:,1], cnt[:,0])\n        axes[1][1].set_title('All Contours')\n\n        axes[1][2].imshow(np.zeros(self.blank.shape))\n        for cnt in self.contours_select:\n            axes[1][2].plot(cnt[:,1], cnt[:,0])\n        axes[1][2].set_title('Major Contours')\n\n        axes[2][0].imshow(self.tank_hsv)\n        axes[2][0].set_title('HSV Ratio')\n\n        axes[2][1].imshow(self.tank_thresh)\n        axes[2][1].set_title('Tank Thresholding')\n\n        axes[2][2].imshow(self.label_image)\n        axes[2][2].set_title('Morphology Labeling')\n\n        for ax in axes.flat:\n            ax.axis('off')","4c36aa2d":"class MultiTank():\n    def __init__(self, bbs, image):\n        self.image = image\n        # check bounding boxes aren't at the edge of the image\n        self.bbs = [i for i in bbs if check_bb(i['geometry'], image.shape)]\n        self.tanks = []\n        for i in self.bbs:\n            try:\n                self.tanks.append(Tank(i['geometry'], image))\n            except:\n                pass\n        \n        self.create_masks()\n        \n    def plot_volumes(self, figsize=(12,12), ax=None):\n        coords = [i.gt_coords for i in self.tanks]\n        classes = list(range(len(self.tanks)))\n        labels = ['{:.3f}'.format(i.volume) for i in self.tanks]\n        bbox_vol = ImageBBox.create(*self.image.size, coords, classes, classes=labels)\n        self.image.show(figsize=figsize, y=bbox_vol, ax=ax)\n        \n    def plot_contours(self, figsize=(12,12)):\n        fig, ax = plt.subplots(figsize=figsize)\n        show_image(self.image, ax=ax)\n        \n        colors = np.linspace(0, 1, len(self.tanks))\n        \n        for i, tank in enumerate(self.tanks):\n            for contour in tank.contours_select:\n                ax.plot(contour[:,1]+tank.x_min, contour[:,0]+tank.y_min, color=plt.cm.rainbow(colors[i]))\n                \n    def create_masks(self):\n        mask = np.zeros(self.image.shape[1:])\n        colors = np.linspace(0, 1, len(self.tanks))\n        \n        for i, tank in enumerate(self.tanks):\n            tank_blank = (tank.blank > 0) * (i + 1)\n            mask[tank.y_min:tank.y_max, tank.x_min:tank.x_max] += tank_blank\n            \n        self.mask = mask\n        self.mask_binary = mask > 0","503c49cd":"idx = 1533\nj[idx]['file_name']","4b7e7969":"j[idx]['label']['Floating Head Tank']","08209c5a":"fname = j[idx]['file_name']","7bcbbddd":"im = open_image(path\/f'image_patches\/{fname}')\nim.show(figsize=(12,12))","05dea53f":"tank = MultiTank(j[idx]['label']['Floating Head Tank'], im)","c69529fa":"tank.plot_volumes(figsize=(12,12));","a6756095":"tank.plot_contours()","7c663ebf":"single_tank = tank.tanks[1]","bb4d7dda":"fig, axes = plt.subplots(figsize=(8,8))\naxes.imshow(single_tank.tank_crop)\naxes.axis('off');","10131687":"hsv = color.rgb2hsv(single_tank.tank_crop)\nH = hsv[:,:,0]\nS = hsv[:,:,1]\nV = hsv[:,:,2]\n\nlab = color.rgb2lab(single_tank.tank_crop)\nl1 = lab[:,:,0]\nl2 = lab[:,:,1]\nl3 = lab[:,:,2]","d29e2f19":"fig, axes = plt.subplots(2, 3, figsize=(16,10))\n\naxes[0][0].imshow(H)\naxes[0][0].set_title('Hue')\n\naxes[0][1].imshow(S)\naxes[0][1].set_title('Saturation')\n\naxes[0][2].imshow(V)\naxes[0][2].set_title('Value')\n\naxes[1][0].imshow(l1)\naxes[1][0].set_title('Lightness')\n\naxes[1][1].imshow(l2)\naxes[1][1].set_title('Red\/Green')\n\naxes[1][2].imshow(l3)\naxes[1][2].set_title('Blue\/Yellow');\n\nfor ax in axes.flat:\n    ax.axis('off')","461ff246":"c1 = (H+1)\/(V+1)\nc2 = (S-V)\/(S+V)\nc3 = -(l1+l3)\/(V+1)","28dd9da0":"fig, axes = plt.subplots(1, 3, figsize=(16,6))\naxes[0].imshow(c1)\naxes[0].set_title('(H + 1)\/(V + 1)')\naxes[1].imshow(c2)\naxes[1].set_title('(S - V)\/(S + V)')\naxes[2].imshow(c3)\naxes[2].set_title('-(l1 + l3)\/(V + 1)');\n\nfor ax in axes.flat:\n    ax.axis('off')","5b60525e":"t1 = filters.threshold_minimum(c3)\nt2 = filters.threshold_mean(c3)","9744347f":"fig, axes = plt.subplots(1, 3, figsize=(16,6))\naxes[0].imshow(c3 > t1)\naxes[0].set_title('Minimum Thresholding')\naxes[1].imshow(c3 > t2)\naxes[1].set_title('Mean Thresholding')\naxes[2].imshow(c3 > (0.6*t1 + 0.4*t2))\naxes[2].set_title('Minimum-Mean Interpolation Thresholding')\n\nfor ax in axes.flat:\n    ax.axis('off')","49680128":"tank_thresh = c3 > (0.6*t1 + 0.4*t2)\n\nlabel_1 = filters.hessian(tank_thresh)\nlabel_2 = segmentation.clear_border(filters.hessian(tank_thresh))\nlabel_3 = morphology.closing(segmentation.clear_border(filters.hessian(tank_thresh)))\nlabel_4 = morphology.area_closing(morphology.closing(segmentation.clear_border(filters.hessian(tank_thresh))))\nlabel_image = measure.label(morphology.area_closing(morphology.closing(\n            segmentation.clear_border(filters.hessian(tank_thresh)))))","d447d81d":"fig, axes = plt.subplots(2, 3, figsize=(16,10))\n\naxes[0][0].imshow(tank_thresh)\naxes[0][0].set_title('Thresholding')\naxes[0][1].imshow(label_1)\naxes[0][1].set_title('Hessian Filter')\naxes[0][2].imshow(label_2)\naxes[0][2].set_title('Clear Border')\naxes[1][0].imshow(label_3)\naxes[1][0].set_title('Closing')\naxes[1][1].imshow(label_4)\naxes[1][1].set_title('Area Closing')\naxes[1][2].imshow(label_image)\naxes[1][2].set_title('Morphological Labeling')\n\nfor ax in axes.flat:\n    ax.axis('off')","dd56226e":"regions_all = measure.regionprops(label_image)\nregions = []\n\nfor region in regions_all:\n    if intersection(single_tank.bbox_relative, region.bbox) > 300:\n        if region.area > 25:\n            b = region.bbox\n            if abs(tank_thresh[b[0]:b[2], b[1]:b[3]].mean() - region.image.mean()) < 0.06:\n                regions.append(region)","26c84329":"fig, axes = plt.subplots(1, 2, figsize=(12, 8))\naxes[0].imshow(regions[0].image)\naxes[1].imshow(regions[1].image)\nfor ax in axes.flat:\n    ax.axis('off')","bf2c8cb3":"areas = np.array([i.area for i in regions])\nidx2, idx1 = areas.argsort()[-2:]\nvolume = 1 - regions[idx2].area \/ regions[idx1].area\nprint(volume)","28f9cfe5":"blank = np.zeros(single_tank.tank_crop.shape[:2])\nfor r in regions:\n    y_min, x_min, y_max, x_max = r.bbox\n    blank[y_min:y_max, x_min:x_max] += r.image.astype('uint8')","4f6cc690":"fig, axes = plt.subplots(1, 2, figsize=(12,6))\naxes[0].imshow(blank)\naxes[1].imshow(single_tank.tank_crop)\naxes[1].imshow(blank, alpha=0.5)\nfor ax in axes.flat:\n    ax.axis('off')","7815943c":"contours = measure.find_contours(blank, 0.5)","147c7c23":"fig, axes = plt.subplots(1, 3, figsize=(16,10))\naxes[0].imshow(np.zeros(blank.shape))\naxes[1].imshow(blank)\naxes[2].imshow(single_tank.tank_crop)\n\nfor ax in axes:\n    for c in contours:\n        ax.plot(c[:,1], c[:,0])\n        \nfor ax in axes.flat:\n    ax.axis('off')","aa7aff63":"def get_idxs(start, rows, cols):\n    idxs = []\n    for r in range(rows):\n        row = []\n        for c in range(cols):\n            row.append(start + c + 10*r)\n        idxs.append(row)\n        \n    return idxs","055f190f":"idxs = get_idxs(1450, 5, 5)","38f44139":"idxs","ac854a74":"def generate_composite(idxs):\n    file = open(path\/'labels.json')\n    j = json.load(file)\n\n    rows = len(idxs)\n    cols = len(idxs[0])\n    patch_height, patch_width = (512, 512)\n    overlap_height, overlap_width = (37, 37)\n\n    image_height = rows*patch_height - overlap_height * (rows-1)\n    image_width = cols*patch_width - overlap_width * (cols-1)\n\n    step_width = patch_width - overlap_width\n    step_height = patch_height - overlap_height\n\n    im_mask = torch.zeros((3, image_height, image_width))\n    bbs = []\n\n    for i, row in enumerate(idxs):\n        for k, idx in enumerate(row):\n            fname = j[idx]['file_name']\n            im = open_image(path\/f'image_patches\/{fname}')\n\n            im_mask[:, (i*step_height):(i*step_height)+patch_height, (k*step_width):(k*step_width)+patch_width] = im.data\n\n            try:\n                bbox = j[idx]['label']['Floating Head Tank']\n                bbox = [i for i in bbox] # if check_bb(i['geometry'], im.shape)]\n                bbox_scaled = [i for i in bbox]\n                for box in bbox_scaled:\n                    for point in box['geometry']:\n                        point['x'] += step_width * k\n                        point['y'] += step_height * i\n\n                bbox_scaled = [i for i in bbox_scaled if check_bb(i['geometry'], im_mask.shape)]\n\n                bbox_clean = []\n                for box in bbox_scaled:\n                    y_min, x_min, y_max, x_max = conv_bbox(box['geometry'])\n                    if not (x_max-x_min) <=40 or (y_max-y_min) <=40:\n                        bbox_clean.append(box)\n\n                bbs += bbox_clean\n            except:\n                pass\n    \n    return (im_mask, bbs)","94f979bf":"im_mask, bbs = generate_composite(idxs)","ddfb656c":"fig, axes = plt.subplots(figsize=(16,16))\naxes.imshow(im_mask.permute(1,2,0))\naxes.axis('off');","f35f814d":"coords = [conv_bbox(i['geometry']) for i in bbs]","bd4555f5":"composite_image = Image(im_mask)","9f3b25c7":"box_vol = ImageBBox.create(*composite_image.size, coords)","3f16e2a1":"composite_image.show(figsize=(16,16), y=box_vol)","5fa2ba04":"tank_large = MultiTank(bbs, composite_image)","95229b77":"tank_large.plot_contours(figsize=(16,16))","5359f093":"fig, axes = plt.subplots(figsize=(12,12))\naxes.imshow(tank_large.mask_binary)\naxes.axis('off');","5ebb02f5":"tank_large.plot_volumes(figsize=(16,16))","8c8963bd":"idxs = get_idxs(4333, 5, 5)","a9c5ce87":"im_mask, bbs = generate_composite(idxs)","11c22fde":"fig, axes = plt.subplots(figsize=(16,16))\naxes.imshow(im_mask.permute(1,2,0))\naxes.axis('off');","cc4960f1":"coords = [conv_bbox(i['geometry']) for i in bbs]\ncomposite_image = Image(im_mask)\nbox_vol = ImageBBox.create(*composite_image.size, coords)","61469aa2":"composite_image.show(figsize=(16,16), y=box_vol)","4b8a0d8f":"tank_large = MultiTank(bbs, composite_image)","5432ab9d":"tank_large.plot_contours(figsize=(16,16))","8323e791":"fig, axes = plt.subplots(figsize=(12,12))\naxes.imshow(tank_large.mask_binary)\naxes.axis('off');","fdd64a96":"tank_large.plot_volumes(figsize=(16,16))","b1751290":"idxs = get_idxs(1833, 5, 5)","7f018474":"im_mask, bbs = generate_composite(idxs)","63f1fec5":"fig, axes = plt.subplots(figsize=(16,16))\naxes.imshow(im_mask.permute(1,2,0))\naxes.axis('off');","9ece30fc":"coords = [conv_bbox(i['geometry']) for i in bbs]\ncomposite_image = Image(im_mask)\nbox_vol = ImageBBox.create(*composite_image.size, coords)","9d380eb6":"composite_image.show(figsize=(16,16), y=box_vol)","c99fe619":"tank_large = MultiTank(bbs, composite_image)","a728d2fe":"tank_large.plot_contours(figsize=(16,16))","5ead3330":"fig, axes = plt.subplots(figsize=(12,12))\naxes.imshow(tank_large.mask_binary)\naxes.axis('off');","1d7b78c5":"tank_large.plot_volumes(figsize=(16,16))","e5b85cf4":"Contours for the localized tanks","4cef1fc9":"After processing, we can plot the tank volumes and their volume estimates","9b730671":"`intersection` calculates the pixel area intersection between two bounding boxes","38a1c773":"These are the channels from the converted images. Note which channels show a strong contrast between shadow regions and non-shadow regions ","a71591a1":"The enhanced image is filtered by thresholding. I found the minimum threshold was often too stringent, while the mean threshold was too permissive. a combination of `0.6 * minimum_threshold + 0.4 * mean_threshold` works well","11ca465f":"We extract the two tank shadow contours","b673c3e4":"A composite image","8e0adf84":"# How it Works\n\nTo see how the algorithm processes a tank, take a single tank in the previous image as an example","07512439":"Contour mask","36cb89f0":"We first create two versions of the image - one in HSV color space and one in LAB color space","15b9d308":"Contours for the localized tanks","8c452110":"Another image","c313d51b":"We create a clean mask by putting just the selected contours on a blank image","388aacd0":"Volume is estimated as 1 minus the ratio of the smaller area to the larger area. The larger area corresponds to the exterior shadow of the tank, while the smaller area corresponds to the interior shadow.","c1f5fea1":"Bounding boxes for the composite image. You can see regions where patches overlap and tanks get multiple bounding boxes. I'm still working on a way of dealing with this. It's not as straightforward as merging overlapping bounding boxes - some closely packed tanks have natural bounding box overlap.","2765adea":"Many methods have been proposed for ratioing these channels to enhance shadows. The NSVDI algorithm proposes $\\frac{S-V}{S+V}$. The paper [Estimating the Volume of Oil Tanks Based on High-Resolution Remote Sensing](https:\/\/www.mdpi.com\/2072-4292\/11\/7\/793\/pdf) which explicitly deals with oil tanks suggests $\\frac{H+1}{V+1}$.\n\nI found the $\\frac{H+1}{V+1}$ was thrown off by strong artifacts in the H channel, likely due to the source images being RGB jpeg images saved from Google Earth rather than real high resolution satellite photography. The $\\frac{S-V}{S+V}$ method worked well on some images but failed on others.\n\nExperimentally I found the ratio $\\frac{-(l1 + l3)}{V + 1}$ worked well, where $l1$ and $l3$ are the first and third channels of the LAB color space image.","aff240a0":"We then filter the regions present by certain heuristics. The bounding box of the feature should intersect the bounding box of the tank. The feature should have an area of more than 25 pixels. The pixel coverate of the labeled image should be approximately the same as in the threshold image.\n\nThe first two clear up small artifacts. The third deals with the fact that the Hessian filter sometimes creates regions in spaces that are otherwise empty.","6adecc7e":"Volume estimations","77f5fd28":"We extract the contours from the mask","1216f23b":"The algorithm is designed to work with tanks that are fully in frame. Bounding boxes that reach the edge of an image (indicating the tank extends beyond the image) are excluded from processing.","55071a84":"# Large Image Processing\n\nSince images in the dataset are patches, we can stitch the patches back together and process larger regions. The only trick is to scale the bounding boxes for patches correctly.","7df49ae7":"Contours for the localized tanks","f9d841db":"Contour mask","62531851":"Image contains 6 tanks","47799e23":"Test on image `16_3_3.jpg`","d3b28c5a":"These are the contours of the extracted shadows","7c37d1cf":"The `MultiTank` class processes images with multiple tanks. It takes in `bbs`, a list of all bounding boxes present in the tank, and the `image` to process. For each bounding box, the `MultiTank` class creates a `Tank` class to process the crop.","e3be1bc4":"`conv_bbox` converts bounding boxes from corner coordinates to a `[y_min, x_min, y_max, x_max]` format","1058ea0c":"The `Tank` class processes a cropped tank image. It takes as input a `box_dict` of the bounding box for the tank in corner coordinate format, an `image` which is a pytorch tensor of the input image wrapped in the fast.ai `Image` class, and two scaling factors `factor_x` and `factor_y` that determine how large of an area around the bounding box is cropped as a function of the height and width of the bounding box.","b05d1598":"Contour mask","668b2df3":"Volume estimations","80dabe39":"The thresholded image is then processed with morphological operations. These operations are:\n\n* 1. Hessian Filter - cleans up noise and line artifacts from white pipes which appear in many images\n* 2. Clear Border - clears contours from surrounding tanks\n* 3. Morphological Closing - helps separate shapes\n* 4. Area Closing - fills small holes\n* 5. Morphological Labeling - labels features","0f7a8ae8":"Volume estimations","26484cd4":"# Shadow Extraction Algorithm\n\nThis notebook shows how to extract tank shadows from RGB images and use them to estimate the volume of floating head tanks.\n\nThe algorithm uses a bounding box to crop a single tank from a larger image. The tank shadow features are then enhanced using a transformation with HSV and LAB color space. The enhanced image is thresholded, creating a mask. The mask is processed with morphological operations to isolate the regions belonging to the tank shadows. Volume is estimated via the ratio of the smaller tank shadow to the larger tank shadow."}}