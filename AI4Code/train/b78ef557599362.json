{"cell_type":{"96f46661":"code","7234e2c4":"code","812964e3":"code","a98fd3a3":"code","2d348323":"code","9824dac7":"code","337025c1":"code","82c58779":"code","c13945dc":"code","304d838f":"code","351267fa":"code","7cb2efad":"code","578ac4c9":"code","c3c00ec3":"code","46be9edc":"code","3443c9b5":"code","e9061824":"code","9ec40c1d":"code","aad11cbd":"code","a896eaa7":"code","ccaf6ed5":"code","02ad7583":"code","f54e23b4":"code","4ecf92f9":"code","b4c597b1":"code","15dc69b6":"code","1a4edc10":"code","ab610827":"code","bb366f3b":"code","b8f49ad6":"code","4de18ae4":"code","35073b4c":"code","aeb8d57b":"code","78ee850b":"markdown","779fa215":"markdown","dba26efd":"markdown","b2feb120":"markdown","dadcb1f4":"markdown","d53863af":"markdown","55d52524":"markdown","62ee1af7":"markdown","93238da5":"markdown"},"source":{"96f46661":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7234e2c4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb","812964e3":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', header=0, dtype={'Age': np.float64})\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', header=0, dtype={'Age': np.float64})\nfull_data = [train, test]","a98fd3a3":"train.info()","2d348323":"print(train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean())","9824dac7":"print (train[['Pclass', \"Survived\"]].groupby(['Pclass'], as_index=False).mean())","337025c1":"# SibSp and Parch\nfor d in full_data:\n    d['FamilySize'] = d['SibSp'] + d['Parch'] + 1\n\nprint (train[['FamilySize', \"Survived\"]].groupby(['FamilySize'], as_index=False).mean())","82c58779":"for dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","c13945dc":"fp = train.Embarked.dropna().mode()[0]\nfp","304d838f":"for d in full_data:\n    d['Embarked'] = d['Embarked'].fillna('S')\n\nprint(train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","351267fa":"#Fare\nfor d in full_data:\n    d['Fare'] = d['Fare'].fillna(train['Fare'].median())\n    \ntrain['FareDivided'] = pd.qcut(train['Fare'], 4)\n\nprint(train[['FareDivided', 'Survived']].groupby(['FareDivided'], as_index=False).mean())","7cb2efad":"for d in full_data:\n    avg_age = d['Age'].mean()\n    std_age = d['Age'].std()\n    age_null_count = d['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(avg_age - std_age, avg_age + std_age, size=age_null_count)\n    d['Age'][np.isnan(d['Age'])] = age_null_random_list\n    d['Age'] = d['Age'].astype(int)\n    \ntrain['AgeCategory'] = pd.cut(train['Age'], 5)\n\nprint (train[['AgeCategory', 'Survived']].groupby(['AgeCategory'], as_index=False).mean())","578ac4c9":"for d in full_data:\n    d['Title'] = d.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","c3c00ec3":"for d in full_data:\n    d['Title'] = d['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    d['Title'] = d['Title'].replace('Mlle', 'Miss')\n    d['Title'] = d['Title'].replace('Ms', 'Miss')\n    d['Title'] = d['Title'].replace('Mme', 'Mrs')\n\nprint (train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean())","46be9edc":"for d in full_data:\n    d['Sex'] = d['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n\nprint(train.head())","3443c9b5":"for d in full_data:\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    d['Title'] = d['Title'].map(title_mapping)\n    d['Title'] = d['Title'].fillna(0)\n    \n    d['Embarked'] = d['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    d.loc[d['Fare'] <= 7.91, 'Fare'] = 0\n    d.loc[(d['Fare'] > 7.91) & (d['Fare'] <= 14.454), 'Fare'] = 1\n    d.loc[(d['Fare'] > 14.454) & (d['Fare'] <= 31), 'Fare']   = 2\n    d.loc[d['Fare'] > 31, 'Fare'] = 3\n    d['Fare'] = d['Fare'].astype(int)\n    \n    d.loc[d['Age'] <= 16, 'Age'] = 0\n    d.loc[(d['Age'] > 16) & (d['Age'] <= 32), 'Age'] = 1\n    d.loc[(d['Age'] > 32) & (d['Age'] <= 48), 'Age'] = 2\n    d.loc[(d['Age'] > 48) & (d['Age'] <= 64), 'Age'] = 3\n    d.loc[ d['Age'] > 64, 'Age'] = 4","e9061824":"drop_elements = ['Name', 'Ticket', 'Cabin', 'SibSp','Parch', 'FamilySize']\ntrain = train.drop(drop_elements, axis=1)\ntrain = train.drop(['AgeCategory', 'FareDivided'], axis=1)\ntrain = train.drop('PassengerId', axis=1)\n\ntest  = test.drop(drop_elements, axis = 1)","9ec40c1d":"train.head()","aad11cbd":"test.head()","a896eaa7":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']\n\nX_test = test.drop('PassengerId', axis=1).copy()","ccaf6ed5":"X_train.shape, y_train.shape, X_test.shape","02ad7583":"# Importing Classifier Modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron","f54e23b4":"def classify(clf):\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    acc = round( clf.score(X_train, y_train) * 100, 2)\n    print(str(acc) + ' percent')","4ecf92f9":"classify(LogisticRegression())","b4c597b1":"classify(SVC())","15dc69b6":"classify(LinearSVC())\nclassify(KNeighborsClassifier(n_neighbors=5))","1a4edc10":"classify(DecisionTreeClassifier())\nclassify(RandomForestClassifier(n_estimators=200))","ab610827":"classify(GaussianNB())\nclassify(Perceptron(max_iter=5, tol=None))","bb366f3b":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, y_train) * 100, 2)\nprint (acc_decision_tree)","b8f49ad6":"test.head()","4de18ae4":"subm = pd.DataFrame({\n    'PassengerId': test['PassengerId'],\n    'Survived' : y_pred_decision_tree\n})","35073b4c":"subm.to_csv('Submission.csv', index=False)","aeb8d57b":"submission = pd.read_csv('Submission.csv')\nsubmission.head()","78ee850b":"**Loading Dataset**","779fa215":"**Embarked**","dba26efd":"**Data Cleaning**","b2feb120":"1. **Sex**","dadcb1f4":"**Age**","d53863af":"**Name**","55d52524":"**Feature Engineering**","62ee1af7":"**Creating Submission**","93238da5":"**2. PClass**"}}