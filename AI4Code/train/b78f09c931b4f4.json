{"cell_type":{"b77b04c4":"code","10230ebd":"code","d01ea7e6":"code","4291f817":"code","c25888c1":"code","390cbdf9":"code","d3e21e20":"code","c7369959":"code","c5901ce9":"code","371006bd":"code","0273cb79":"code","4020dca5":"code","4c58e2ea":"code","b8edb872":"code","7f024adb":"code","34957baf":"code","20dea004":"code","a9570ffb":"code","b5692120":"code","f95cd502":"code","08665917":"code","69e6e47c":"code","0166bd57":"code","f01e16ae":"code","5a0ec2ab":"markdown"},"source":{"b77b04c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()\nfrom scipy import stats\nfrom sklearn.model_selection import KFold\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","10230ebd":"train = pd.read_csv('\/kaggle\/input\/ods-mlclass-dubai-2019-03-lecture3-hw\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/ods-mlclass-dubai-2019-03-lecture3-hw\/test.csv')\nprint(train.shape,test.shape)","d01ea7e6":"# print(train.workclass.value_counts())\ntrain[\"workclass\"] =np.where(train[\"workclass\"].isin([' ?']),\"unknown\",train[\"workclass\"])\ntrain[\"occupation\"] =np.where(train[\"occupation\"].isin([' ?']),\"unknown\",train[\"occupation\"])\ntrain[\"native-country\"] =np.where(train[\"native-country\"].isin([' ?']),\"unknown\",train[\"native-country\"])\n","4291f817":"list_cols=[]\nlist_cols=[pd.get_dummies(train[\"workclass\"],prefix=\"workclass\"),\n                 pd.get_dummies(train[\"education\"],prefix=\"education\"),\n                 pd.get_dummies(train[\"marital-status\"],prefix=\"marital\"),\n                 pd.get_dummies(train[\"occupation\"],prefix=\"occupation\"),\n                 pd.get_dummies(train[\"relationship\"],prefix=\"relationship\"),\n                 pd.get_dummies(train[\"race\"],prefix=\"race\"),\n                 pd.get_dummies(train[\"native-country\"],prefix=\"country\"),\n                 pd.get_dummies(train[\"sex\"],prefix=\"sex\")]\nlist_cols_df=pd.concat(list_cols, axis=1)\nlist_cols_df.head(1)\ntrain_dmy=pd.concat([train,list_cols_df],axis=1)\n# list_cols_df.columns\ntrain_dmy.shape","c25888c1":"train_dmy[\"workclass_local_selfempnot_state\"]=train_dmy[\"workclass_ Self-emp-not-inc\"] + train_dmy[\"workclass_ Local-gov\"] + train_dmy[\"workclass_ State-gov\"]\ntrain_dmy[\"workclass_never_without_private\"]=train_dmy[\"workclass_ Never-worked\"] + train_dmy[\"workclass_ Without-pay\"] + train_dmy[\"workclass_ Private\"]\ntrain_dmy[\"workclass_sunk\"]= train_dmy[\"workclass_unknown\"]\nlist_class =[ \"workclass_ Self-emp-inc\" , \"workclass_ Federal-gov\" , \"workclass_local_selfempnot_state\",   \"workclass_never_without_private\" ]\n\n\ntrain_dmy[\"education_doc_prof\"] = train_dmy[\"education_ Doctorate\"] + train_dmy[\"education_ Prof-school\"]\ntrain_dmy[\"education_voc_acdm_preschool\"] = train_dmy[\"education_ Assoc-voc\"] + train_dmy[\"education_ Assoc-acdm\"] + train_dmy[\"education_ Preschool\"]\ntrain_dmy[\"education_coll_hsgrad\"] = train_dmy[\"education_ Some-college\"] + train_dmy[\"education_ HS-grad\"] \ntrain_dmy[\"education_xii_iiv_x\"] = train_dmy[\"education_ 12th\"] + train_dmy[\"education_ 7th-8th\"]  + train_dmy[\"education_ 10th\"]\ntrain_dmy[\"education_ix_xi_v_vi_i_iv\"] = train_dmy[\"education_ 9th\"] + train_dmy[\"education_ 11th\"]  + train_dmy[\"education_ 5th-6th\"] + train_dmy[\"education_ 1st-4th\"]\nlist_edu = [\"education_doc_prof\", \"education_ Masters\", \"education_ Bachelors\" , \"education_voc_acdm_preschool\", \"education_coll_hsgrad\", \"education_xii_iiv_x\"]\n\ntrain_dmy[\"marital_married_civ_af\"] = train_dmy[\"marital_ Married-civ-spouse\"] + train_dmy[\"marital_ Married-AF-spouse\"]\ntrain_dmy[\"marital_widow_spos_abs\"] = train_dmy[\"marital_ Widowed\"] + train_dmy[\"marital_ Married-spouse-absent\"]\nlist_marrital = [\"marital_married_civ_af\", \"marital_widow_spos_abs\" , \"marital_ Divorced\",\"marital_ Separated\"]\n\ntrain_dmy[\"occupation_exec_prof\"] = train_dmy[\"occupation_ Exec-managerial\"]+train_dmy[\"occupation_ Prof-specialty\"]\ntrain_dmy[\"occupation_prot_tech\"] = train_dmy[\"occupation_ Protective-serv\"]+train_dmy[\"occupation_ Tech-support\"]\ntrain_dmy[\"occupation_crft_trans\"] = train_dmy[\"occupation_ Craft-repair\"]+train_dmy[\"occupation_ Transport-moving\"]\ntrain_dmy[\"occupation_adm_machine_farming_armed_unk\"] = train_dmy[\"occupation_ Adm-clerical\"]+train_dmy[\"occupation_ Machine-op-inspct\"]+train_dmy[\"occupation_ Farming-fishing\"]+train_dmy[\"occupation_ Armed-Forces\"]\\\n+train_dmy[\"occupation_unknown\"]\ntrain_dmy[\"occupation_oth_priv\"] = train_dmy[\"occupation_ Priv-house-serv\"]+train_dmy[\"occupation_ Other-service\"]\nlist_occu = [\"occupation_exec_prof\",\"occupation_prot_tech\",\"occupation_ Sales\",\"occupation_crft_trans\",\"occupation_adm_machine_farming_armed_unk\",\"occupation_ Handlers-cleaners\"]\n\ntrain_dmy[\"relationship_wife_husband\"] = train_dmy[\"relationship_ Husband\"] + train_dmy[\"relationship_ Wife\"]\nlist_relat=[\"relationship_wife_husband\",\"relationship_ Not-in-family\",\"relationship_ Unmarried\",\"relationship_ Other-relative\"]\n\nlist_race = ['race_ Amer-Indian-Eskimo', 'race_ Asian-Pac-Islander',       'race_ Black', 'race_ Other', 'race_ White']\n\ntrain_dmy[\"country_irn_fran_ind_taiw_jap_yugo_camb\"] = train_dmy['country_ Iran'] + train_dmy['country_ France'] + train_dmy['country_ India']\\\n+train_dmy['country_ Taiwan']+train_dmy['country_ Japan']+train_dmy['country_ Yugoslavia']+train_dmy['country_ Cambodia']\ntrain_dmy[\"country_itl_eng_can_germ_phi_hon\"] = train_dmy['country_ Italy']+ train_dmy['country_ England']+ train_dmy['country_ Canada'] +\\\ntrain_dmy['country_ Germany']+train_dmy['country_ Philippines'] + train_dmy['country_ Hong']\ntrain_dmy[\"country_gree_chi_cub_unk_scot_us\"] = train_dmy['country_ Greece'] + train_dmy['country_ China'] + train_dmy['country_ Cuba']+train_dmy['country_unknown']\\\n+train_dmy['country_ Scotland'] + train_dmy['country_ United-States']\ntrain_dmy[\"country_hol_out_hun_ire_sout_pol\"] = train_dmy['country_ Holand-Netherlands'] + train_dmy['country_ Outlying-US(Guam-USVI-etc)'] + \\\ntrain_dmy['country_ Hungary']+train_dmy['country_ Ireland'] + train_dmy['country_ South'] + train_dmy['country_ Poland']\ntrain_dmy[\"country_thai_ecu_jam_laos_por_tri_pue\"] = train_dmy['country_ Thailand'] + train_dmy['country_ Ecuador'] + train_dmy['country_ Jamaica'] + \\\ntrain_dmy['country_ Laos'] + train_dmy['country_ Portugal'] + train_dmy['country_ Trinadad&Tobago'] + train_dmy['country_ Puerto-Rico']\nlist_coun = [\"country_irn_fran_ind_taiw_jap_yugo_camb\", \"country_itl_eng_can_germ_phi_hon\" ,\"country_gree_chi_cub_unk_scot_us\" ,\"country_hol_out_hun_ire_sout_pol\",\"country_thai_ecu_jam_laos_por_tri_pue\"]\n\ntrain_dmy[\"education-num_enc\"]=train_dmy[\"education-num\"].replace({1.0:0.0,2.0:-2.147591,3.0:-1.838067,4.0:-1.569754,5.0:-1.744181,6.0:-1.494261,7.0:-1.774019,8.0:-1.346711,9.0:-0.513642,10.0:-0.300241,11.0:0.108586,\\\n                                                                  12.0:0.040867,13.0:0.803894,14.0:1.375570,15.0:2.165181,16.0:2.199003}) \nprint(train_dmy[\"education-num_enc\"].unique())\ntrain_dmy[\"education-num_1_3\"] = np.where(train_dmy[\"education-num\"]<=3,1,0)\ntrain_dmy[\"education-num_4_8\"] = np.where((train_dmy[\"education-num\"]>3) & (train_dmy[\"education-num\"]<=8),1,0)\ntrain_dmy[\"education-num_9_10\"] = np.where((train_dmy[\"education-num\"]>8) & (train_dmy[\"education-num\"]<=10),1,0)\ntrain_dmy[\"education-num_11\"] = np.where(train_dmy[\"education-num\"]==11,1,0)\ntrain_dmy[\"education-num_12\"] = np.where(train_dmy[\"education-num\"]==12,1,0)\ntrain_dmy[\"education-num_13\"] = np.where(train_dmy[\"education-num\"]==13,1,0)\ntrain_dmy[\"education-num_14_16\"] = np.where((train_dmy[\"education-num\"]>13) & (train_dmy[\"education-num\"]<=16),1,0)\n# train_dmy[\"education_\"]\nlist_edunum = [\"education-num_1_3\",\"education-num_4_8\",\"education-num_9_10\",\"education-num_11\",\"education-num_12\",\"education-num_13\",\"education-num_14_16\"]\n\ntrain_dmy['age_lt22'] = np.where(train_dmy[\"age\"]<= 22 , 1 , 0)\ntrain_dmy['age_bt_22_26'] = np.where(((train_dmy[\"age\"]> 22) & (train_dmy[\"age\"]<= 26)) , 1 , 0)\ntrain_dmy['age_bt_26_30'] = np.where(((train_dmy[\"age\"]> 26) & (train_dmy[\"age\"]<= 30)) , 1 , 0)\ntrain_dmy['age_bt_30_33'] = np.where(((train_dmy[\"age\"]> 30) & (train_dmy[\"age\"]<= 33)) , 1 , 0)\ntrain_dmy['age_bt_33_37'] = np.where(((train_dmy[\"age\"]> 33) & (train_dmy[\"age\"]<= 37)) , 1 , 0)\ntrain_dmy['age_bt_37_41'] = np.where(((train_dmy[\"age\"]> 37) & (train_dmy[\"age\"]<= 41)) , 1 , 0)\ntrain_dmy['age_bt_41_58'] = np.where(((train_dmy[\"age\"]> 41) & (train_dmy[\"age\"]<= 58)) , 1 , 0)\ntrain_dmy['age_bt_58_90'] = np.where(((train_dmy[\"age\"]> 58) & (train_dmy[\"age\"]<= 90)) , 1 , 0)\n# train_dmy[\"ageenc\"]= np.where\nlist_age= ['age_bt_22_26','age_bt_26_30','age_bt_30_33','age_bt_33_37','age_bt_37_41','age_bt_41_58','age_bt_58_90']\n\ntrain_dmy[\"capfact_enc\"]=np.where(train_dmy[\"capital-gain\"]<=9999.9,-0.100820,\\\n                                  np.where(((train_dmy[\"capital-gain\"]>9999)& (train_dmy[\"capital-gain\"]<=19999.8)),5.592856,\\\n                                          np.where(( train_dmy[\"capital-gain\"] >19999.8 ), 5.602594,0)\\\n                                          ))\n\ntrain_dmy[\"caplsfact_enc\"]=np.where(train_dmy[\"capital-loss\"]<=1306.8,-0.073605,\\\n                                  np.where(((train_dmy[\"capital-loss\"]>1306.8)& (train_dmy[\"capital-loss\"]<=3049.2)),2.940006,\\\n                                          np.where(( train_dmy[\"capital-loss\"] >3049.2 ), 5.602594,0)\\\n                                          ))\n\n","390cbdf9":"edu=train_dmy.groupby(\"education\")[\"target\"].agg({np.mean,np.std})\nedu[\"education\"]=edu.index\nedu=edu.reset_index(drop=True)\nedu\nmrt=train_dmy.groupby(\"marital-status\")[\"target\"].agg({\"mean1\":np.mean,\"stdd\":np.std})\nmrt[\"marital-status\"]=mrt.index\nmrt=mrt.reset_index(drop=True)\nmrt\nwrk=train_dmy.groupby(\"workclass\")[\"target\"].agg({\"mean11\":np.mean,\"stdd1\":np.std})\nwrk[\"workclass\"]=wrk.index\nwrk=wrk.reset_index(drop=True)\nwrk\nocc=train_dmy.groupby(\"occupation\")[\"target\"].agg({\"mean111\":np.mean,\"stdd11\":np.std})\nocc[\"occupation\"]=occ.index\nocc=occ.reset_index(drop=True)\nocc\ntrain_dmy=pd.merge(train_dmy,edu,on=\"education\",how=\"left\")\ntrain_dmy=pd.merge(train_dmy,mrt,on=\"marital-status\",how=\"left\")","d3e21e20":"dummylist_cat = list_class  + list_marrital   + ['sex_ Male','uid','target'] +list_race +list_occu\nnumrics = [\"capital-gain\",\"age\",\"hours-per-week\",\"capital-loss\",\"education-num\"]\nfeature_list  = dummylist_cat + numrics\n# feature_list","c7369959":" feature_list=['relationship_wife_husband', 'education-num_enc', 'capital-gain', 'age', 'occupation_exec_prof', 'hours-per-week', 'capital-loss', 'mean', 'std', \n 'education_ Masters','occupation_ Farming-fishing', 'occupation_ Sales','target','uid','workclass_local_selfempnot_state','marital_married_civ_af']","c5901ce9":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score ,f1_score, roc_auc_score , confusion_matrix , classification_report, roc_curve, auc , log_loss\nfrom sklearn.model_selection import GridSearchCV,LeaveOneOut,cross_val_score,cross_val_predict,KFold\nfrom sklearn.neighbors import KNeighborsClassifier","371006bd":"train_model=train_dmy[feature_list]\ntrain_model.shape","0273cb79":"x_train,x_test,y_train,y_test = train_test_split(train_model.drop(['target','uid'],axis=1), train_model[\"target\"],test_size=0.2,random_state=5)\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","4020dca5":"# #List Hyperparameters that we want to tune.\n# leaf_size = list(range(30,50))\n# n_neighbors = list(range(10,30))\n# p=[1,2]\n# #Convert to dictionary\n# hyperparameters = dict(leaf_size=leaf_size, n_neighbors=n_neighbors, p=p)\n# #Create new KNN object\n# knn_2 = KNeighborsClassifier()\n# #Use GridSearch\n# clf = GridSearchCV(knn_2, hyperparameters, cv=3,verbose=1,n_jobs=-1)\n# #Fit the model\n# best_model = clf.fit(x_train,y_train)\n# #Print The value of best Hyperparameters\n# print('Best leaf_size:', best_model.best_estimator_.get_params()['leaf_size'])\n# print('Best p:', best_model.best_estimator_.get_params()['p'])\n# print('Best n_neighbors:', best_model.best_estimator_.get_params()['n_neighbors'])","4c58e2ea":"# neighbors = list(range(1,20))\n# train_results = []\n# test_results = []\n# for n in neighbors:\n#    model = KNeighborsClassifier(n_neighbors=71,n_jobs=-1,p=1,leaf_size=n)\n#    model.fit(x_train, y_train)\n#    train_pred = model.predict_proba(x_train)\n#    loglos=log_loss(y_train,train_pred[:,1])\n#    train_results.append(loglos)\n#    y_pred = model.predict(x_test)\n#    predprob = model.predict_proba(x_test)\n#    loglos=log_loss(y_test,predprob[:,1])\n    \n#    test_results.append(loglos)\n# from matplotlib.legend_handler import HandlerLine2D\n# line1, = plt.plot(neighbors, train_results, 'b', label=\"Train AUC\")\n# line2, = plt.plot(neighbors, test_results, 'r', label=\"Test AUC\")\n# plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n# plt.ylabel('AUC score')\n# plt.xlabel('n_neighbors')\n# plt.show()","b8edb872":"# train_results\n# test_results","7f024adb":"#Create KNN Object.\nclf = KNeighborsClassifier(n_neighbors=65,leaf_size=1,n_jobs=-1,p=1,weights='uniform')\n\nclf.fit(x_train, y_train)\nprint(clf)\n\npred= clf.predict(x_train)\npredprob = clf.predict_proba(x_train)\nprint(accuracy_score(pred,y_train))\nprint(confusion_matrix(pred,y_train))\nprint(classification_report(pred,y_train))\nprint(predprob,pred)\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(pred,y_train)\nprint(auc(false_positive_rate, true_positive_rate))\nlog_loss(y_train,predprob[:,1])","34957baf":"test_pred=clf.predict(x_test)\ntest_predprob1=clf.predict_proba(x_test)\nprint(accuracy_score(test_pred,y_test))\nprint(confusion_matrix(test_pred,y_test))\nprint(classification_report(test_pred,y_test))\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(test_pred,y_test)\nprint(auc(false_positive_rate, true_positive_rate))\nlog_loss(y_test,test_predprob1[:,1])","20dea004":"test[\"workclass\"] =np.where(test[\"workclass\"].isin([' ?']),\"unknown\",test[\"workclass\"])\ntest[\"occupation\"] =np.where(test[\"occupation\"].isin([' ?']),\"unknown\",test[\"occupation\"])\ntest[\"native-country\"] =np.where(test[\"native-country\"].isin([' ?']),\"unknown\",test[\"native-country\"])","a9570ffb":"list_cols=[]\nlist_cols=[pd.get_dummies(test[\"workclass\"],prefix=\"workclass\"),\n                 pd.get_dummies(test[\"education\"],prefix=\"education\"),\n                 pd.get_dummies(test[\"marital-status\"],prefix=\"marital\"),\n                 pd.get_dummies(test[\"occupation\"],prefix=\"occupation\"),\n                 pd.get_dummies(test[\"relationship\"],prefix=\"relationship\"),\n                 pd.get_dummies(test[\"race\"],prefix=\"race\"),\n                 pd.get_dummies(test[\"native-country\"],prefix=\"country\"),\n                 pd.get_dummies(test[\"sex\"],prefix=\"sex\")]\nlist_cols_df=pd.concat(list_cols, axis=1)\nlist_cols_df.head(1)\ntest_dmy=pd.concat([test,list_cols_df],axis=1)\n# list_cols_df.columns\ntest_dmy.shape\n","b5692120":"test_dmy[\"workclass_local_selfempnot_state\"]=test_dmy[\"workclass_ Self-emp-not-inc\"] + test_dmy[\"workclass_ Local-gov\"] + test_dmy[\"workclass_ State-gov\"]\ntest_dmy[\"workclass_never_without_private\"]=test_dmy[\"workclass_ Never-worked\"] + test_dmy[\"workclass_ Without-pay\"] + test_dmy[\"workclass_ Private\"]\ntest_dmy[\"workclass_sunk\"]= test_dmy[\"workclass_unknown\"]\n\ntest_dmy[\"education_doc_prof\"] = test_dmy[\"education_ Doctorate\"] + test_dmy[\"education_ Prof-school\"]\ntest_dmy[\"education_voc_acdm_preschool\"] = test_dmy[\"education_ Assoc-voc\"] + test_dmy[\"education_ Assoc-acdm\"] + test_dmy[\"education_ Preschool\"]\ntest_dmy[\"education_coll_hsgrad\"] = test_dmy[\"education_ Some-college\"] + test_dmy[\"education_ HS-grad\"] \ntest_dmy[\"education_xii_iiv_x\"] = test_dmy[\"education_ 12th\"] + test_dmy[\"education_ 7th-8th\"]  + test_dmy[\"education_ 10th\"]\ntest_dmy[\"education_ix_xi_v_vi_i_iv\"] = test_dmy[\"education_ 9th\"] + test_dmy[\"education_ 11th\"]  + test_dmy[\"education_ 5th-6th\"] + test_dmy[\"education_ 1st-4th\"]\n\ntest_dmy[\"marital_married_civ_af\"] = test_dmy[\"marital_ Married-civ-spouse\"] + test_dmy[\"marital_ Married-AF-spouse\"]\ntest_dmy[\"marital_widow_spos_abs\"] = test_dmy[\"marital_ Widowed\"] + test_dmy[\"marital_ Married-spouse-absent\"]\n\ntest_dmy[\"relationship_wife_husband\"] = test_dmy[\"relationship_ Husband\"] + test_dmy[\"relationship_ Wife\"]\n\ntest_dmy[\"occupation_exec_prof\"] = test_dmy[\"occupation_ Exec-managerial\"]+test_dmy[\"occupation_ Prof-specialty\"]\ntest_dmy[\"occupation_prot_tech\"] = test_dmy[\"occupation_ Protective-serv\"]+test_dmy[\"occupation_ Tech-support\"]\ntest_dmy[\"occupation_crft_trans\"] = test_dmy[\"occupation_ Craft-repair\"]+test_dmy[\"occupation_ Transport-moving\"]\ntest_dmy[\"occupation_adm_machine_farming_armed_unk\"] = test_dmy[\"occupation_ Adm-clerical\"]+test_dmy[\"occupation_ Machine-op-inspct\"]+test_dmy[\"occupation_ Farming-fishing\"]+test_dmy[\"occupation_ Armed-Forces\"]\\\n+test_dmy[\"occupation_unknown\"]\ntest_dmy[\"occupation_oth_priv\"] = test_dmy[\"occupation_ Priv-house-serv\"]+test_dmy[\"occupation_ Other-service\"]\ntest_dmy[\"education-num_enc\"]=train_dmy[\"education-num\"].replace({1.0:0.0,2.0:-2.147591,3.0:-1.838067,4.0:-1.569754,5.0:-1.744181,6.0:-1.494261,7.0:-1.774019,8.0:-1.346711,9.0:-0.513642,10.0:-0.300241,11.0:0.108586,\\\n                                                                  12.0:0.040867,13.0:0.803894,14.0:1.375570,15.0:2.165181,16.0:2.199003}) \ntest_dmy['country_ Holand-Netherlands']=0\ntest_dmy[\"country_irn_fran_ind_taiw_jap_yugo_camb\"] = test_dmy['country_ Iran'] + test_dmy['country_ France'] + test_dmy['country_ India']\\\n+test_dmy['country_ Taiwan']+test_dmy['country_ Japan']+test_dmy['country_ Yugoslavia']+test_dmy['country_ Cambodia']\ntest_dmy[\"country_itl_eng_can_germ_phi_hon\"] = test_dmy['country_ Italy']+ test_dmy['country_ England']+ test_dmy['country_ Canada'] +\\\ntest_dmy['country_ Germany']+test_dmy['country_ Philippines'] + test_dmy['country_ Hong']\ntest_dmy[\"country_gree_chi_cub_unk_scot_us\"] = test_dmy['country_ Greece'] + test_dmy['country_ China'] + test_dmy['country_ Cuba']+test_dmy['country_unknown']\\\n+test_dmy['country_ Scotland'] + test_dmy['country_ United-States']\ntest_dmy[\"country_hol_out_hun_ire_sout_pol\"] = test_dmy['country_ Holand-Netherlands'] + test_dmy['country_ Outlying-US(Guam-USVI-etc)'] + \\\ntest_dmy['country_ Hungary']+test_dmy['country_ Ireland'] + test_dmy['country_ South'] + test_dmy['country_ Poland']\ntest_dmy[\"country_thai_ecu_jam_laos_por_tri_pue\"] = test_dmy['country_ Thailand'] + test_dmy['country_ Ecuador'] + test_dmy['country_ Jamaica'] + \\\ntest_dmy['country_ Laos'] + test_dmy['country_ Portugal'] + test_dmy['country_ Trinadad&Tobago'] + test_dmy['country_ Puerto-Rico']\nlist_coun = [\"country_irn_fran_ind_taiw_jap_yugo_camb\", \"country_itl_eng_can_germ_phi_hon\" ,\"country_gree_chi_cub_unk_scot_us\" ,\"country_hol_out_hun_ire_sout_pol\",\"country_thai_ecu_jam_laos_por_tri_pue\"]","f95cd502":"dummylist_cat = list_class  + list_marrital   + ['sex_ Male'] +list_race +list_occu\nnumrics = [\"capital-gain\",\"age\",\"hours-per-week\",\"capital-loss\",\"education-num\"]\nfeature_list  = dummylist_cat + numrics\n# feature_list\ntest_dmy[feature_list].shape\nfeature_list","08665917":"edu=train_dmy.groupby(\"education\")[\"target\"].agg({np.mean,np.std})\nedu[\"education\"]=edu.index\nedu=edu.reset_index(drop=True)\nedu\nmrt=train_dmy.groupby(\"marital-status\")[\"target\"].agg({\"mean1\":np.mean,\"stdd\":np.std})\nmrt[\"marital-status\"]=mrt.index\nmrt=mrt.reset_index(drop=True)\nmrt\nwrk=train_dmy.groupby(\"workclass\")[\"target\"].agg({\"mean11\":np.mean,\"stdd1\":np.std})\nwrk[\"workclass\"]=wrk.index\nwrk=wrk.reset_index(drop=True)\nwrk\nocc=train_dmy.groupby(\"occupation\")[\"target\"].agg({\"mean111\":np.mean,\"stdd11\":np.std})\nocc[\"occupation\"]=occ.index\nocc=occ.reset_index(drop=True)\nocc\ntest_dmy=pd.merge(test_dmy,edu,on=\"education\",how=\"left\")\ntest_dmy=pd.merge(test_dmy,mrt,on=\"marital-status\",how=\"left\")\n# train_dmy=pd.merge(train_dmy,occ,on=\"occupation\",how=\"left\")\n# train_dmy=pd.merge(train_dmy,wrk,on=\"workclass\",how=\"left\")","69e6e47c":" feature_list=['relationship_wife_husband', 'education-num_enc', 'capital-gain', 'age', 'occupation_exec_prof', 'hours-per-week', 'capital-loss', 'mean', 'std', \n 'education_ Masters','occupation_ Farming-fishing', 'occupation_ Sales','workclass_local_selfempnot_state','marital_married_civ_af']","0166bd57":"\npredoot= clf.predict(test_dmy[feature_list])\npredproboot = clf.predict_proba(test_dmy[feature_list])\ntest_dmy[\"predoot\"]=predoot\ntest_dmy[\"predproboot0\"]=predproboot[:,0]\ntest_dmy[\"predproboot1\"]=predproboot[:,1]\ntest_dmy.head()\npredproboot[:,0]","f01e16ae":"test_dmy[[\"uid\",\"predproboot1\"]].to_csv(\"result1.csv\")","5a0ec2ab":"### vooraguptha@gmail.com"}}