{"cell_type":{"1d183c84":"code","749c9ed6":"code","632a0bc9":"code","e9156b39":"code","53466f4e":"code","86e88cc7":"code","f7a84f45":"code","870d5fc0":"code","8028f9fb":"code","919e420c":"code","71982e9f":"code","6a6c5fec":"code","7101472d":"code","b4a9011e":"code","f6447982":"code","5e0a5969":"code","c1db0169":"code","2316becf":"code","96d140e1":"code","de4a5d03":"code","9638d42f":"code","bbd15eb9":"code","2744fd46":"markdown","11b2a6b9":"markdown","c8bee1c2":"markdown","ef589d04":"markdown","17bdebb0":"markdown","8026f647":"markdown","96d6b5da":"markdown","8df25989":"markdown","cc646ff4":"markdown"},"source":{"1d183c84":"import sys\nsys.path.append('..\/input\/jane-street-market-prediction')\nsys.path.insert(0, \"..\/input\/js-lstm\/\")","749c9ed6":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os, gc\nimport pandas as pd\nimport numpy as np\nimport janestreet\nimport datatable as dt\n\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import GroupKFold\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom joblib import dump, load\n\n\nimport tensorflow as tf\ndevice = 'cuda' if tf.config.list_physical_devices('GPU') else 'cpu'\nprint(device)\n\ntf.random.set_seed(42)\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as layers\nfrom tensorflow.keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n\n# if device == 'cuda':\n#     import cudf\n#     import cupy as cp","632a0bc9":"%%time\nprint('Loading...')\ntrain = dt.fread('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\n\nprint('Converting...')\ntrain = train.to_pandas()\nprint('Finish.')","e9156b39":"ignore_columns = ['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp','ts_id','target']\nfeatures = [col for col in train.columns if col not in ignore_columns]\nprint(features)","53466f4e":"%%time\nprint('Filling...')\nf_mean = train[features[3:]].mean()\n# train = train.query('weight > 0').reset_index(drop = True)\ntrain[features[3:]] = train[features[3:]].fillna(f_mean)\ntrain['action'] = (train['resp'] > 0).astype('int')\n\nf_mean = np.array(f_mean)\nnp.save('f_mean.npy', f_mean)\n\nprint('Finish.')","86e88cc7":"# reduce memory\ndef reduce_memory_usage(df):\n    \n    start_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe is {start_memory} MB\")\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe after reduction {end_memory} MB\")\n    print(f\"Reduced by {100 * (start_memory - end_memory) \/ start_memory} % \")\n    return df","f7a84f45":"%%time\ntrain = reduce_memory_usage(train)","870d5fc0":"train.head()","8028f9fb":"train.shape","919e420c":"def create_lstm(lookback, num_columns, num_labels, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate):\n    \n    assert (len(dropout_rates)==1 + len(head_hidden_units) + len(lstm_units)+ len(tail_hidden_units)), \"number of dropout_rates is not equal to number of layers!\"  \n    \n    inp = tf.keras.layers.Input(shape = (lookback,num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    \n    # implement hidden_layers before LSTMs\n    for i in range(len(head_hidden_units)): \n        x = tf.keras.layers.Dense(head_hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1])(x) \n    \n    # implement LSTMs\n    for i in range(len(lstm_units)):\n        x = tf.keras.layers.LSTM(lstm_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1+len(head_hidden_units)])(x) \n        \n    # implement hidden_layers after LSTMs\n    for i in range(len(tail_hidden_units)): \n        x = tf.keras.layers.Dense(tail_hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i+1+len(head_hidden_units)+len(lstm_units)])(x)    \n        \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation('sigmoid')(x)\n    \n    model = tf.keras.models.Model(inputs = inp, outputs = out)\n    model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate),\n                  loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing), \n                  metrics = tf.keras.metrics.AUC(name = 'AUC'), \n                 )\n    \n    return model","71982e9f":"lookback = 10\nbatch_size = 4096\nhead_hidden_units = [256]\nlstm_units = [64]\ntail_hidden_units = [512, 394]\ndropout_rates = [0.10143786981358652, 0.19720339053599725, 0.1123435323 ,0.23148340929571917, 0.2157768967777311]\n\n\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3","6a6c5fec":"model = create_lstm(lookback, len(features), 1, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate)","7101472d":"model.summary()","b4a9011e":"def prepare_dataset(X,y,window_length,batch_size, mode='train'):\n    x_ds = tf.data.Dataset.from_tensor_slices(X) \n    x_ds = x_ds.window(window_length,shift=1,drop_remainder=True)\n    x_ds = x_ds.flat_map(lambda window: window.batch(window_length))\n    \n    if mode=='train':\n        y_ds = tf.data.Dataset.from_tensor_slices(y[window_length-1:])#ignore first window_length elements\n        ds = tf.data.Dataset.zip((x_ds, y_ds))\n        ds = ds.shuffle(10000).batch(batch_size) # shuffle the dataset only for training\n    elif mode=='predict':\n        ds = x_ds\n        ds = ds.batch(batch_size)\n\n    ds = ds.prefetch(30)\n    return ds","f6447982":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]","5e0a5969":"# oof = np.zeros(len(train['action']))\n# # gkf = GroupTimeSeriesSplit(n_splits = 5)\n# gkf = GroupKFold(n_splits = 5)\n\n# val_idx = []\n# oof_scores = []\n\n# for fold, (tr, te) in enumerate(gkf.split(train['action'].values, train['action'].values, train['date'].values)):\n    \n#     print(\"#\"*75)\n#     print(f\"Fold{fold}\")\n# #     print(train.loc[tr, 'ts_id'])\n# #     print(train.loc[te, 'ts_id'])\n    \n#     X_tr, X_val = train.loc[tr, features], train.loc[te, features]\n#     y_tr, y_val = train.loc[tr, 'action'], train.loc[te, 'action']\n    \n#     print(f\"train split shape is {X_tr.shape}, validation split shape is {X_val.shape}\")\n#     train_steps = int(len(tr)\/\/batch_size)\n#     val_steps = int(len(te)\/\/batch_size)\n#     print(f\"batch_size is {batch_size}\")\n#     print(f\"train_steps is {train_steps}, val_steps is {val_steps}\")\n    \n#     dataset = prepare_dataset(X_tr,y_tr,lookback,batch_size)\n#     val_dataset = prepare_dataset(X_val,y_val,lookback,batch_size)\n# #     print(dataset)\n    \n#     print('Training...')\n#     ckp_path = f'JS_LSTM_Model_{fold}.hdf5'\n#     model = create_lstm(lookback, len(features), 1, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate)\n# #     model.summary()\n#     rlr = ReduceLROnPlateau(monitor = 'val_AUC', factor = 0.2, patience = 5, verbose = 1, \n#                             min_delta = 1e-4, mode = 'max')\n#     ckp = ModelCheckpoint(ckp_path, monitor = 'val_AUC', verbose = 1, \n#                           save_best_only = True, save_weights_only = True, mode = 'max')\n#     es = EarlyStopping(monitor = 'val_AUC', min_delta = 1e-4, patience = 12, mode = 'max', \n#                        baseline = None, restore_best_weights = True, verbose = 0)\n#     model.fit(dataset,validation_data = val_dataset, epochs = 1000, \n#               batch_size=batch_size, callbacks = [rlr, ckp, es], verbose = 2)\n    \n#     print(\"Fine tuning...\")\n    \n#     # Finetune 5 epochs on validation set with small learning rate\n#     model = create_lstm(lookback, len(features), 1, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate \/ 100)\n#     model.load_weights(ckp_path)\n#     ckp_path_ft = f'JS_LSTM_Model_{fold}_finetuning.hdf5'\n#     ckp_ft = ModelCheckpoint(ckp_path_ft, monitor = 'AUC', verbose = 1,\n#                              save_best_only = True, save_weights_only = True, mode = 'max')\n#     model.fit(val_dataset, epochs = 5, batch_size=batch_size, callbacks = [ckp_ft], verbose = 2)\n#     model.save_weights(ckp_path_ft)\n    \n#     # predict oof\n#     val_set = prepare_dataset(X_val,[],lookback,batch_size, mode='predict')\n#     val_pred = model.predict(val_set, batch_size=batch_size).ravel()\n# #     print(val_pred.shape)\n\n#     oof[te[lookback-1:]] += val_pred\n#     val_idx.append(te[lookback-1:])\n#     score = roc_auc_score(y_val[lookback-1:], oof[te[lookback-1:]])\n#     oof_scores.append(score)\n#     print(f'Fold {fold} ROC AUC:\\t', score)\n    \n#     K.clear_session()\n#     del model, dataset, val_dataset, val_pred, val_set, X_tr, X_val, y_tr, y_val\n#     rubbish = gc.collect()\n    \n# print(\"#\"*75)","c1db0169":"# max_idx = oof_scores.index(max(oof_scores))\n# print(f'Max oof score is {max(oof_scores)} in FOLD{oof_scores.index(max(oof_scores))}')","2316becf":"# indices = np.array([])\n# for item in val_idx:\n#     indices = np.append(indices,item)\n# indices = indices.astype(int)\n# score_oof = roc_auc_score(train['action'].values[indices], oof[indices])\n# print(score_oof)","96d140e1":"num_models = 1\n\nmodels = []\nfor i in range(num_models):\n    clf = create_lstm(lookback, len(features), 1, head_hidden_units,lstm_units,tail_hidden_units, dropout_rates, label_smoothing, learning_rate)\n    clf.load_weights(f'..\/input\/js-lstm\/JS_LSTM_Model_4_finetuning.hdf5')\n#     clf.load_weights(f'.\/JS_LSTM_Model_{i}_finetuning.hdf5')\n    models.append(clf)","de4a5d03":"f_mean = np.load('..\/input\/js-lstm\/f_mean.npy')\n# f_mean = np.load('.\/f_mean.npy')","9638d42f":"env = janestreet.make_env()\nenv_iter = env.iter_test()","bbd15eb9":"opt_th = 0.5\nX = None\nfor (test_df, pred_df) in tqdm(env_iter):\n    \n    data = test_df.loc[:, features].values\n    if np.isnan(data[:, 3:].sum()):\n        data[:, 3:] = np.nan_to_num(data[:, 3:]) + np.isnan(data[:, 3:]) * f_mean\n\n    if X is None:\n        X = np.concatenate([data for _ in range(lookback)],axis=0)\n    X = np.concatenate([X[1:],data] ,axis=0)\n    \n    if test_df['weight'].item() > 0:\n        pred = 0.\n        for clf in models:\n            pred += clf(X[np.newaxis,:], training = False).numpy().item() \/ num_models\n        pred_df.action = np.where(pred >= opt_th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n        \n    env.predict(pred_df)","2744fd46":"### RNN Architecture","11b2a6b9":"## Training","c8bee1c2":"There are many great notebooks predicting the action of every sample based on the features of the same sample. I was wondering if including the time sequence of features would help the prediction, so I tried to build up a pipline to use LSTM. Trained at version 11.\n\n\nModified from the following nice notebooks:\n\nhttps:\/\/www.kaggle.com\/gogo827jz\/jane-street-neural-network-starter\n\nhttps:\/\/www.kaggle.com\/jorijnsmit\/found-the-holy-grail-grouptimeseriessplit\n\nhttps:\/\/www.kaggle.com\/gogo827jz\/jane-street-xgboost-grouptimesplitkfold\n\nhttps:\/\/www.kaggle.com\/tchaye59\/jmarket-rnn-with-keras\n\nhttps:\/\/www.kaggle.com\/sbunzini\/reduce-memory-usage-by-75","ef589d04":"## Submitting","17bdebb0":"## Jane Street: Recurrent Neural Network Baseline","8026f647":"## Load Model","96d6b5da":"## Processing data","8df25989":"## GroupTimeSplitKFold","cc646ff4":"Currently, it took a long time to make prediction using the JS env API, so I could only load one model to predict test set."}}