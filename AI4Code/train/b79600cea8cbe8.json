{"cell_type":{"1bbea187":"code","1a958c37":"code","b2027dc7":"code","30e459d4":"code","c7426b6f":"code","ebbb4c0e":"code","28db4257":"code","5ee8ad74":"code","ff624847":"code","c85403b7":"code","7ebcd92c":"code","85b65f23":"code","e2c940a0":"code","6f8672c8":"code","8b50023f":"code","3ca95bf7":"code","b2e7a5e2":"code","cacf69f1":"code","fd8f9aac":"code","686a692c":"code","8d7d7be7":"code","2e64ffd3":"code","b9260d8b":"code","67a5eadb":"code","b22164dd":"code","ec42e0d3":"code","4ab507ee":"code","8e33b364":"markdown","15d819e7":"markdown","aab9f705":"markdown","f10d1bd9":"markdown","107a84d6":"markdown","0440d44e":"markdown","684bc7c5":"markdown","a418c87e":"markdown","80bd04d2":"markdown","d96ae844":"markdown","63111f1e":"markdown","c4c7069e":"markdown","7f45f016":"markdown","0c172309":"markdown","14c0ca42":"markdown","4d1a6dcf":"markdown","335a1a65":"markdown","5b7a499d":"markdown","4f049772":"markdown"},"source":{"1bbea187":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","1a958c37":"df = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\nprint(df.shape)\nprint()\ndf.head()","b2027dc7":"print(df[df.duplicated()])","30e459d4":"df.info()","c7426b6f":"df.describe()","ebbb4c0e":"df['percentage'] = round(((df['math score'] + df['reading score'] + df['writing score'])\/300)*100, 2)\ndf.head(10)","28db4257":"for c in df.columns:\n    if (df[c].dtype != 'object'):\n        ax = sns.distplot(df[c])\n        plt.show()","5ee8ad74":"df['result'] = df.apply(lambda x : 'F' if x['math score']<40 or x['reading score']<40 or x['writing score']<40 else 'P', axis = 1)\ndf.head(10)","ff624847":"def grading(percentage, result):\n    if (result == 'F'):\n        return 'F'\n    if (percentage >= 90):\n        return 'A'\n    if (percentage >= 80):\n        return 'B'\n    if (percentage >= 70):\n        return 'C'\n    if (percentage >= 55):\n        return 'D'\n    if (percentage >= 40):\n        return 'E'\n    \ndf['grade'] = df.apply(lambda x : grading(x['percentage'], x['result']), axis=1)\ndf.head()","c85403b7":"for c in df.columns:\n    if (df[c].dtype == 'object'):\n        plt.figure(figsize=(12,4))\n        ax = sns.countplot(df[c])\n        ax.spines['top'].set_visible(False)\n        for p in ax.patches:\n            ax.text(p.get_x()+p.get_width()\/2, p.get_height(), str(p.get_height())+'\\n', ha='center', weight='bold')\n        plt.show()\n        print('-'*100)","7ebcd92c":"f = df[df['result'] == 'F'].drop(['result', 'grade'], axis=1)\nprint('Graphs shows the conunt and percent of students out of total students who failed the examination.')\nprint('*'*100)\nprint()\nfor c in f.columns:\n    if (f[c].dtype == 'object'):\n        plt.figure(figsize=(12,4))\n        ax = sns.countplot(f[c])\n        ax.spines['top'].set_visible(False)\n        for p in ax.patches:\n            ax.text(p.get_x()+p.get_width()\/2, p.get_height(), str(round(((p.get_height()\/len(f))*100), 2))+' %\\n', ha='center', weight='bold')\n        plt.show()\n        print('-'*100)","85b65f23":"pp = df[df['result'] == 'P'].drop(['result'], axis=1)\nprint('Graphs shows the conunt and percent of students out of total students who passed the examination.')\nprint('*'*100)\nprint()\nfor c in pp.columns:\n    if (pp[c].dtype == 'object'):\n        plt.figure(figsize=(18,4))\n        ax = sns.countplot(x=c, hue='grade', data=pp)\n        ax.spines['top'].set_visible(False)\n        for p in ax.patches:\n            ax.text(p.get_x()+p.get_width()\/2, p.get_height()+10, str(round(((p.get_height()\/len(pp))*100), 2))+' %', ha='center', weight='bold', rotation=90)\n        plt.show()\n        print('-'*100)","e2c940a0":"df['gender_num'] = df['gender'].apply(lambda x : 0 if x == 'female' else 1)\ndf['lunch_num'] = df['lunch'].apply(lambda x : 0 if x == 'free\/reduced' else 1)\ndf['course_num'] = df['test preparation course'].apply(lambda x : 0 if x == 'none' else 1)\ndf.head()","6f8672c8":"def edu(x) :\n    if x == \"master's degree\" :\n        return 0\n    if x == \"bachelor's degree\" :\n        return 1\n    if x == \"associate's degree\" :\n        return 2\n    if x == 'some college' :\n        return 3\n    if x == 'high school' :\n        return 4\n    else :\n        return 5\n\ndf['parent education_num'] = df['parental level of education'].apply(lambda x : edu(x))\n\ndf.head(10)","8b50023f":"df['group_A'] = df['race\/ethnicity'].apply(lambda x : 1 if 'A' in x else 0)\ndf['group_B'] = df['race\/ethnicity'].apply(lambda x : 1 if 'B' in x else 0)\ndf['group_C'] = df['race\/ethnicity'].apply(lambda x : 1 if 'C' in x else 0)\ndf['group_D'] = df['race\/ethnicity'].apply(lambda x : 1 if 'D' in x else 0)\n\ndf.head(10)","3ca95bf7":"col = ['math score', 'reading score', 'writing score', 'percentage']\nfor c in df.columns:\n    if df[c].dtype == 'object':\n        col.append(c)\nprint(col)","b2e7a5e2":"from sklearn.model_selection import train_test_split\n\nxtn, xts, ytn, yts = train_test_split(df.drop(col, axis=1), df[['math score', 'reading score', 'writing score', 'percentage']], test_size=0.2, random_state=8)","cacf69f1":"xtn.head()","fd8f9aac":"ytn.head()","686a692c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom  sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, accuracy_score","8d7d7be7":"ln = LinearRegression()\nln.fit(xtn, ytn['percentage'])\npred = ln.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","2e64ffd3":"ln = LinearRegression()\npl = PolynomialFeatures(degree=4)\nxpl = pl.fit_transform(xtn)\nln.fit(xpl, ytn['percentage'])\nxts_pl = pl.fit_transform(xts)\npred = ln.predict(xts_pl)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","b9260d8b":"dec = DecisionTreeRegressor(random_state=8)\ndec.fit(xtn, ytn['percentage'])\npred = dec.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","67a5eadb":"ran = RandomForestRegressor(random_state=8)\nran.fit(xtn, ytn['percentage'])\npred = ran.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","b22164dd":"et = ExtraTreesRegressor(random_state=8)\net.fit(xtn, ytn['percentage'])\npred = et.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","ec42e0d3":"sr = SVR()\nsr.fit(xtn, ytn['percentage'])\npred = sr.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","4ab507ee":"kn = KNeighborsRegressor()\nkn.fit(xtn, ytn['percentage'])\npred = kn.predict(xts)\nprint(np.sqrt(mean_squared_error(yts['percentage'], pred)))\n\nplt.figure(figsize=(15,5))\n\nplt.scatter(range(0,len(pred)), yts['percentage'], color = 'blue') \nplt.scatter(range(0,len(pred)), pred, color='red')\n\nfor i, tx in enumerate(yts['percentage']):\n    plt.annotate('  ' + str(round(tx, 0)), (i, tx))\n    plt.annotate('  ' + str(round(pred[i], 2)), (i, pred[i]))","8e33b364":"## Train - Test split","15d819e7":"## Handling categorical variable\n\n\n1. gender, lunch and test preparation course are binay columns so simply converted in 0 and 1 values.\n2. Parent education is ordinal category so it'll replace with proper order.\n3. Group is nominal variable so appling one hot encoding.","aab9f705":"### Importing dataset","f10d1bd9":"### Above graphs concludes following :\n1. Studeds having standard lunch and conpleted test preparation course gets good grade in examination.\n2. Also if parents have degree or master level education then studens perfoms well in examination.","107a84d6":"### Importing require libraries","0440d44e":"Now grade can be allocated as follow:\n\nA : above 90\n\nB : 80 - 89\n\nC : 70 - 79\n\nD : 55 - 69\n\nE : 40 - 54\n\nF : below 40 score in any subject","684bc7c5":"### Observations :\n1. Dataset do not have any null values.\n2. There's no outliers in score as all values are in the range of 0-100.\n3. All features are categorical.\n4. Grades are require to measure students performance in exam.\n5. Percdentage needs to calculate to allocate grade.","a418c87e":"## Model Selection","80bd04d2":"### Checking duplicate values","d96ae844":"# Problem Statement : Predict the student's performance in exam\n# Type : Regression (Supervised Machine learning)","63111f1e":"From above graphs we can conclude the followings :\n1. Test preparation course helps a lot to student to pass the examination.\n2. Parent's education level also plays major role in students result.","c4c7069e":"### Analysis result :\nHow effective is the test preparation course?\n\n-> It plays major role in result and helps to score better grade.\n\nWhich major factors contribute to test outcomes?\n\n-> Lunch, test preparation course and parents education are major factors.\n\nWhat would be the best way to improve student scores on each test?\n\n-> If student get standard lunch and completed test preparation course will help student to score better in exam. Also if possible parent should also educate themself so that they can help the student with thier studies whenever they require.","7f45f016":"## Data analysis","0c172309":"Above graphs shows that score 40 can be deciding score to state student is pass or fail.","14c0ca42":"### Above plot shows that model is predicting quite good for value between range of 50-80 as majority of data lies in that range but it is performing worst for other values.","4d1a6dcf":"Dataset do not have any duplicate values","335a1a65":"## From above we can conclude that linear regression and support vector MSE is less but it not good model as it'll always predict the value in range of 50-80 therefoere Randonforest can be consider as best model for this dataset.","5b7a499d":"### Checking data info","4f049772":"This data set includes scores from three exams and a variety of personal, social, and economic factors that have interaction effects upon students. The task is to find following :\n1. How effective is the test preparation course?\n2. Which major factors contribute to test outcomes?\n3. What would be the best way to improve student scores on each test?"}}