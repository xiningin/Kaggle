{"cell_type":{"367d8d42":"code","7addbfd6":"code","f84493b3":"code","30da8ca2":"code","64016026":"code","d403d023":"code","53d5e5b1":"code","94c4ad49":"code","5df0ca13":"code","80b6c773":"code","492f16a6":"code","f99661c0":"code","d9dc0b2a":"code","b343a961":"code","44ef038e":"code","635ba14f":"code","e1ff7cd8":"code","d62dda8e":"code","59358a7c":"markdown","49a535b5":"markdown","fda02df7":"markdown","b4ec94a7":"markdown","eb6f6500":"markdown","1df52446":"markdown","87797f4d":"markdown","16e1c09b":"markdown"},"source":{"367d8d42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7addbfd6":"dataset = pd.read_csv('..\/input\/clothessizeprediction\/final_test.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","f84493b3":"dataset.head(10)","30da8ca2":"dataset.shape","64016026":"dataset.dtypes","d403d023":"dataset.isnull().sum()","53d5e5b1":"dataset.describe()","94c4ad49":"dataset.age = dataset.age.fillna(dataset.age.mean())\ndataset.height = dataset.height.fillna(165.805794)","5df0ca13":"# Check if any null value remains or not\ndataset.isnull().sum()","80b6c773":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\nprint(y)","492f16a6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","f99661c0":"X_train","d9dc0b2a":"y_train","b343a961":"print(y_train) \nprint(y_test)","44ef038e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)","635ba14f":"pd.DataFrame(X_train).isin([np.inf, -np.inf]).sum()","e1ff7cd8":"pd.DataFrame(y_train).isin([np.inf, -np.inf]).sum()","d62dda8e":"#from sklearn.neighbors import KNeighborsClassifier\n#clfn = KNeighborsClassifier()\n#clfn.fit(X_train, y_train)","59358a7c":"**Taking care of missing data**","49a535b5":"# Training of classification model on the Training set","fda02df7":"# **Data Preprocessing**","b4ec94a7":"# **Importing the dataset**","eb6f6500":"# Feature Scaling","1df52446":"# Splitting the dataset into the Training set and Test set","87797f4d":"# Encoding categorical data\n\nDATATYPE OF EACH COLUMN IS SPECIFIED EARLIER. OBSERVE THAT DEPENDENT VARIABLE COLUMN CONTAINS CATEGORICAL VALUES\n\n**Encoding the dependent Variable**","16e1c09b":"Observe thar, min and max value for each column are finite. This ensures that the dataset doesn't contain any infinite values.\nWe have the mean of the values for each column. So now we have to use fillna() to fill up those missing values"}}