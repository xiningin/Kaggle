{"cell_type":{"f701c4ca":"code","b9e88468":"code","c26961c7":"code","39f708b7":"code","d7b4eb99":"code","4b4cce06":"code","b62ac21c":"code","5271c96e":"code","04d5bec1":"code","598a6000":"code","f3b44b9a":"code","5b6643c3":"code","04534ed1":"code","7b205166":"code","36f88975":"code","7117128a":"code","f659e785":"code","ee520793":"code","d2c8702a":"code","5741c858":"markdown","aece127a":"markdown","e621889b":"markdown"},"source":{"f701c4ca":"import numpy as np\nimport pandas as pd","b9e88468":"# Only need the tweets and associated sentiment\ntweets_df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding='latin-1')\ntweets_df = tweets_df[['OriginalTweet', 'Sentiment']]\n\ntest_df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv')\ntest_df = test_df[['OriginalTweet', 'Sentiment']]","c26961c7":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport string\n\nnltk.download('stopwords')","39f708b7":"def textClean(text):\n    nopunc = [char.lower() for char in text if char not in string.punctuation]\n    nopunc = ''.join(nopunc)\n    tokens = word_tokenize(nopunc)\n    nohttp = [word for word in tokens if word[0:4]!='http']\n    nostop = [word for word in nohttp if word not in stopwords.words('english')]\n    return nostop","d7b4eb99":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(analyzer=textClean)\nmessage = vectorizer.fit_transform(tweets_df['OriginalTweet'])\nmessage.shape","4b4cce06":"#split the data into 80% training and 20% testing\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(message,tweets_df.Sentiment,test_size=0.20,random_state=0)","b62ac21c":"from sklearn.svm import SVC","5271c96e":"svc_model = SVC(C= .1, kernel='linear', gamma= 1)\nsvc_model.fit(xtrain, ytrain)","04d5bec1":"# Evaluating the model on the training data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = svc_model.predict(xtrain)\nprint(classification_report(ytrain, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytrain, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytrain, pred))","598a6000":"# Evaluating the model on the testing data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = svc_model.predict(xtest)\nprint(classification_report(ytest, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytest, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytest, pred))","f3b44b9a":"message2 = vectorizer.transform(test_df['OriginalTweet'])\nmessage2.shape","5b6643c3":"print(svc_model.predict(message2))\nprint(test_df.Sentiment)","04534ed1":"pred = svc_model.predict(message2)\nprint(classification_report(test_df.Sentiment, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(test_df.Sentiment, pred))\nprint(\"Accuracy: \\n\", accuracy_score(test_df.Sentiment, pred))","7b205166":"rbf_svc_model = SVC(C= .1, kernel='rbf', gamma= 1)\nrbf_svc_model.fit(xtrain, ytrain)","36f88975":"# Evaluating the model on the training data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = rbf_svc_model.predict(xtrain)\nprint(classification_report(ytrain, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytrain, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytrain, pred))","7117128a":"# Evaluating the model on the testing data set\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\npred = rbf_svc_model.predict(xtest)\nprint(classification_report(ytest, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(ytest, pred))\nprint(\"Accuracy: \\n\", accuracy_score(ytest, pred))","f659e785":"message2 = vectorizer.transform(test_df['OriginalTweet'])\nmessage2.shape","ee520793":"print(rbf_svc_model.predict(message2))\nprint(test_df.Sentiment)","d2c8702a":"pred = rbf_svc_model.predict(message2)\nprint(classification_report(test_df.Sentiment, pred))\nprint()\nprint(\"Confusion Matrix: \\n\", confusion_matrix(test_df.Sentiment, pred))\nprint(\"Accuracy: \\n\", accuracy_score(test_df.Sentiment, pred))","5741c858":"# Linear Model","aece127a":"Test Data","e621889b":"# Radial Basis Model"}}