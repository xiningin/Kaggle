{"cell_type":{"63aa782a":"code","1fac6c91":"code","f49b4020":"code","c2213a18":"code","43f14d27":"code","a2cf5777":"code","b1cf6911":"code","d164db12":"code","a303bbf4":"code","773e2fd0":"code","5dff4080":"code","6e66754b":"code","cab3768b":"code","1d5ae034":"code","ae245863":"code","d4603215":"code","c328cfe7":"code","1e06c8c3":"code","a1134756":"code","b98cecf3":"code","7146545c":"code","250951f7":"code","ababa76a":"code","0dafa5ff":"code","ff0906bd":"markdown","4154f06c":"markdown","5dcdd0ec":"markdown","b8c1c55d":"markdown","145eba2c":"markdown"},"source":{"63aa782a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1fac6c91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\nfrom sklearn import preprocessing as pp\nfrom sklearn.cluster import KMeans\nimport random \nfrom sklearn.datasets.samples_generator import make_blobs \nimport pylab as pl\n%matplotlib inline\n","f49b4020":"card = pd.read_csv(\"..\/input\/CreditCardUsage.csv\")","c2213a18":"card.head(5)","43f14d27":"card.describe().T","a2cf5777":"card.isna().sum()","b1cf6911":"mean_value=card['CREDIT_LIMIT'].mean()\ncard['CREDIT_LIMIT']=card['CREDIT_LIMIT'].fillna(mean_value)","d164db12":"mean_value=card['MINIMUM_PAYMENTS'].mean()\ncard['MINIMUM_PAYMENTS']=card['MINIMUM_PAYMENTS'].fillna(mean_value)","a303bbf4":"card.corr()","773e2fd0":"card.cov()","5dff4080":"a = card.corr()","6e66754b":"plt.figure(figsize=(20,10))\nsns.heatmap(a,vmin=-1,vmax=1,center=0,annot=True)","cab3768b":"df = card.drop('CUST_ID', axis=1)\ndf.head(3)","1d5ae034":"from sklearn.preprocessing import StandardScaler\nX = df.values[:,1:]\nX = np.nan_to_num(X)\nClus_dataSet = StandardScaler().fit_transform(X)\nClus_dataSet","ae245863":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=6,random_state=0)\nkmeans.fit(df)","d4603215":"kmeans.labels_","c328cfe7":"Sum_of_squared_distances = []\nK = range(1,21)\nfor k in K:\n    km = KMeans(n_clusters=k)\n    km = km.fit(df)\n    Sum_of_squared_distances.append(km.inertia_)\nplt.plot(K, Sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum_of_squared_distances')\nplt.title('Elbow Method For Optimal k')\nplt.show()","1e06c8c3":"from sklearn.metrics import silhouette_score, silhouette_samples\n\nfor n_clusters in range(2,21):\n    km = KMeans (n_clusters=n_clusters)\n    preds = km.fit_predict(df)\n    centers = km.cluster_centers_\n\n    score = silhouette_score(df, preds, metric='euclidean')\n    print (\"For n_clusters = {}, silhouette score is {}\".format(n_clusters, score))","a1134756":"from yellowbrick.cluster import SilhouetteVisualizer\n\n# Instantiate the clustering model and visualizer\nkm = KMeans (n_clusters=3)\nvisualizer = SilhouetteVisualizer(km)\n\nvisualizer.fit(df) # Fit the training data to the visualizer\nvisualizer.poof() # Draw\/show\/poof the data","b98cecf3":"from yellowbrick.cluster import KElbowVisualizer\n# Instantiate the clustering model and visualizer\nkm = KMeans (n_clusters=3)\nvisualizer = KElbowVisualizer(\n    km, k=(2,21),metric ='silhouette', timings=False\n)\n\nvisualizer.fit(df) # Fit the training data to the visualizer\nvisualizer.poof() # Draw\/show\/poof the data","7146545c":"km_sample = KMeans(n_clusters=4)\nkm_sample.fit(df)","250951f7":"labels_sample = km_sample.labels_","ababa76a":"df['label'] = labels_sample","0dafa5ff":"sns.set_palette('Set2')\nsns.scatterplot(df['BALANCE'],df['PURCHASES'],hue=df['label'],palette='Set1')","ff0906bd":"**Silhouette Coefficient**","4154f06c":"**K Means Modelling**","5dcdd0ec":"\n\n**K=3 has maximum Silhoutte score. Let us visualize Silhouette score for each cluster at k=3.**\n","b8c1c55d":"label 0: Low balance and low purchases - Fine group\n\nlabel 1: Low to moderate balance and high purchases - Carefree group\n\nlabel 2: Moderate balance and moderate purchases - choosy group\n\nlabel 3: Moderate to high balance and low purchases - Saving group**\n","145eba2c":"\n\nThe Elbow curve depicts sum of squared distances for each point from its respective centroid. Our goal is to check for a K value that has minimum sum of square distance.\n"}}