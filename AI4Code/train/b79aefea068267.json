{"cell_type":{"4ba0875f":"code","cba22cd7":"code","d9da3aa2":"code","4d0dd8df":"code","6197fb40":"code","e553ccd6":"code","75ddb3a4":"code","cc2a0979":"code","49593149":"code","ef89f683":"code","5fb69314":"code","f4587a3f":"code","621f9ecf":"code","d4f7b340":"code","dd0df8fc":"code","02354823":"code","81e8b5d5":"code","00b5c422":"code","60f43380":"code","5a3568a1":"code","f4ca39c1":"code","6bf80e42":"code","1d4659f5":"code","931c9a9b":"markdown","a5e80ac0":"markdown","221e1f9c":"markdown","fe22c086":"markdown","d824a9e0":"markdown","74527563":"markdown","ca825037":"markdown"},"source":{"4ba0875f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n# #         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cba22cd7":"import tensorflow as tf\nfrom tensorflow.keras import layers\nimport os","d9da3aa2":"# os.listdir('\/kaggle\/input\/intel-image-classification\/seg_pred\/seg_pred')","4d0dd8df":"train_dir = '\/kaggle\/input\/intel-image-classification\/seg_train\/seg_train'\ntest_dir = '\/kaggle\/input\/intel-image-classification\/seg_test\/seg_test'\npred_dir = '\/kaggle\/input\/intel-image-classification\/seg_pred\/seg_pred'","6197fb40":"train = tf.keras.utils.image_dataset_from_directory(train_dir,\n                                                   label_mode='categorical',\n                                                   image_size=(150,150),\n                                                   batch_size=32)\ntest = tf.keras.utils.image_dataset_from_directory(test_dir,\n                                                   label_mode='categorical',\n                                                   image_size=(150,150),\n                                                  batch_size=32)\n# pred = tf.keras.utils.image_dataset_from_directory(pred_dir,\n#                                                    label_mode='categorical',\n#                                                    image_size=(150,150),\n#                                                   batch_size=32)","e553ccd6":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport random\n\ndef view_random_image(dirname):\n    class_names = train.class_names\n    random_class = random.choice(class_names)\n    dirname = train_dir\n    random_image_folder = os.path.join(dirname,random_class)\n    random_image = random.choice(os.listdir(random_image_folder))\n    random_image_path = os.path.join(random_image_folder,random_image)\n    image = mpimg.imread(random_image_path)\n    plt.imshow(image)\n    plt.title(f\"Random Image of: {random_class}\");\n    \nview_random_image(train_dir)","75ddb3a4":"view_random_image(test_dir)","cc2a0979":"import tensorflow as tf\nfrom tensorflow.keras import layers","49593149":"nos_class = len(train.class_names)\nnos_class","ef89f683":"model_1 = tf.keras.Sequential([\n    layers.Input(shape=(150,150,3)),\n    layers.Rescaling(scale=1\/255.),\n    layers.Conv2D(filters=32,kernel_size=3,activation='relu'),\n    layers.GlobalMaxPool2D(),\n    layers.Dense(nos_class,activation='softmax')\n])\nmodel_1.summary()","5fb69314":"# Compile the model\nmodel_1.compile(loss=tf.keras.losses.categorical_crossentropy,\n               optimizer=tf.keras.optimizers.Adam(),\n               metrics=['accuracy'])\n# Fit the model\nmodel_1.fit(train,epochs=5,verbose=1,steps_per_epoch=len(train),\n           validation_data=test,validation_steps=int(0.2*len(test)))","f4587a3f":"model_1.evaluate(test)","621f9ecf":"for images,labels in test.take(1):\n    print(images.shape)\n    print(labels.shape)\n    ","d4f7b340":"class_names = train.class_names\n# random_index = random.choice(range(32))\n# random_image = images[random_index]\n# true_labels = labels[random_index]\n# pred_class = class_names[tf.argmax(model_1.predict(tf.expand_dims(random_image,axis=0))[0]).numpy()]\n# plt.imshow(ramdom_image)\n \n# # tf.argmax(model_1.predict(tf.expand_dims(images[0],axis=0))[0]).numpy()","dd0df8fc":"predictions = []\npred_images = os.listdir(pred_dir)\n\nfor img in pred_images[:5]:\n    image_file = os.path.join(pred_dir,img)\n    image = mpimg.imread(image_file)  # Read the image file\n    pred_class = class_names[tf.argmax(model_1.predict(tf.expand_dims(image,axis=0))[0]).numpy()]\n    predictions.append(pred_class)\n#     plt.figure()\n#     plt.imshow(image)\n#     plt.title(f\"Pred Class: {pred_class}\")\n","02354823":"predictions","81e8b5d5":"base_model = tf.keras.applications.EfficientNetB0(include_top=False,\n                                                  input_shape=(150,150,3))\nbase_model.trainable = False\ninputs = layers.Input(shape=(150,150,3))\nx = base_model(inputs,training=False)\nx = layers.GlobalMaxPool2D()(x)\noutputs = layers.Dense(nos_class,activation='softmax')(x)\nmodel_TL = tf.keras.Model(inputs,outputs)\nmodel_TL.summary()","00b5c422":"# Compile the model\nmodel_TL.compile(loss=tf.keras.losses.categorical_crossentropy,\n               optimizer=tf.keras.optimizers.Adam(),\n               metrics=['accuracy'])\n# Fit the model\nmodel_TL.fit(train,epochs=5,verbose=1,steps_per_epoch=len(train),\n           validation_data=test,validation_steps=int(0.2*len(test)))","60f43380":"model_TL.evaluate(test)","5a3568a1":"pred_images = os.listdir(pred_dir)\n\nfor img in pred_images[:5]:\n    image_file = os.path.join(pred_dir,img)\n    image = mpimg.imread(image_file)  # Read the image file\n    pred_class = class_names[tf.argmax(model_1.predict(tf.expand_dims(image,axis=0))[0]).numpy()]\n#     predictions.append(pred_class)\n    plt.figure()\n    plt.imshow(image)\n    plt.title(f\"Pred Class: {pred_class}\")","f4ca39c1":"pwd","6bf80e42":"model_1.save('Kaggle_Intel_Image_Classification_CNN')","1d4659f5":"model_TL.save('Kaggle_Intel_Image_Classification_Transfer_Learning_EfficientNetB0')","931c9a9b":"## Transfer Learning (Efficientnet)","a5e80ac0":"## Prediction of pred data","221e1f9c":"## Visualize the data","fe22c086":"## Create the Training, Test & Prediction Dataset","d824a9e0":"## Libraries","74527563":"## View Test Data Prediction","ca825037":"## Baseline model"}}