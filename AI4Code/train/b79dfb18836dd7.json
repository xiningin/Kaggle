{"cell_type":{"28ba5d60":"code","a8357421":"code","f9ab93d5":"code","8cd9ce40":"code","796a4948":"code","bcc9fd98":"code","cdeff56b":"code","2c7b1379":"code","6d021a70":"code","b9445578":"code","245d6f0e":"code","be2a0055":"code","5875f782":"code","d9522421":"code","0b56d276":"code","588a3afd":"code","3363e05d":"code","eb960618":"code","5817bbb0":"code","0d5c9d45":"markdown","f9ba5083":"markdown","82c89683":"markdown","a012dfee":"markdown","9b52b309":"markdown","821ce487":"markdown","fcb89fbb":"markdown","29818bd6":"markdown","eda59b91":"markdown","80555653":"markdown","cb7ed850":"markdown","d3bb391e":"markdown","0669d3f0":"markdown","329e0e35":"markdown","20449105":"markdown","5ab9240e":"markdown","5e61e1aa":"markdown"},"source":{"28ba5d60":"![ -d \/kaggle\/input\/release-2021-v1\/augeropendata ] && [ ! -d augeropendata ] && ln -s \/kaggle\/input\/release-2021-v1\/augeropendata augeropendata  # kaggle specific linking dataset to augeropendata directory","a8357421":"# Data analysis tools\nimport pandas as pd\nimport numpy as np\nimport scipy.stats\nfrom scipy import stats\n\n#For visual feedback and interactivity\nimport ipywidgets as widgets\nfrom ipywidgets import *\nfrom IPython.display import display","f9ab93d5":"# Plotting\nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.ticker as mticker","8cd9ce40":"# Default values for plots\nplt.rcParams[\"figure.figsize\"] = [14, 9] # figure width and height\nplt.rcParams[\"font.size\"] = 24\n\nplt.rcParams['xtick.labelsize']=20\nplt.rcParams['ytick.labelsize']=18\n\nplt.rcParams['xtick.major.size']=10\nplt.rcParams['xtick.minor.size']=6\nplt.rcParams['ytick.major.size']=10\nplt.rcParams['ytick.minor.size']=6\n","796a4948":"# Jupyter\/ IPython formatting\nfrom IPython.display import Math, Latex, display","bcc9fd98":"# Define a function\ndef eqmass(energy_EeV):\n    \"\"\"\n    Calculate the equivalent mass of an object falling from 1 m \n    Input: Energy of CR in EeV\n    \"\"\"\n    mh = energy_EeV * 1e18 \/ 9.806 * 1.602 * 1e-19 * 1000\n    print (f\"\\nThe equivalent mass in grams falling from your desk (1 meter height) is: {mh:.2f} g\")\n    \n    \n# Define inputs\nstyle = {'description_width': 'initial'}\n\nmy_result = interactive(eqmass, {'manual': False},\n                    energy_EeV = widgets.IntSlider(description=\"Energy [EeV]\",style = style, value = 10, min = 1, max = 200))\n\n\n#Display the calculator Box \n\n\ndef make_box():\n    vbox1 = widgets.VBox([widgets.Label('Equivalent mass calculator: 1 EeV = $10^\\mathrm{18}$ eV \\n'), my_result])    \n    return vbox1\n\nbox_layout = widgets.Layout(\n        border='solid 3px grey',\n        margin='0px 10px 10px 0px',\n        padding='10px 10px 10px 10px')\n \nvbox1 = make_box()\nvbox1.layout = box_layout\n\nwidgets.HBox([vbox1])","cdeff56b":"# Data loading, encapsulated to make it less installation and OS dependant\nimport os.path\nfrom zipfile import ZipFile\ndef AugerOpen(fdir, file):\n    \"\"\"\n    Loads a file from the auger open data release. Can be either in the local directory,\n    in the parent directory or in the augeropendata directory.\n    File is identified by it directory *fdir* and filename *file* and can be found in the directory\n    or in a zip file.\n    \"\"\"\n    for loc in [\".\", \"..\", \"augeropendata\", \"data\"]:\n        fname = os.path.join(loc, fdir, file)\n        if os.path.isfile(fname):\n            return open(fname)\n        zname=os.path.join(loc, fdir + \".zip\")\n        if os.path.isfile(zname):\n            with ZipFile(zname) as myzip:\n                return myzip.open(os.path.join(fdir, file))\n    raise FileNotFoundError(os.path.join(fdir, file))","2c7b1379":"\ndata = pd.read_csv(AugerOpen(\"summary\", \"dataSummary.csv\"))\nenergy = data.drop_duplicates('id')[\"sd_energy\"] \nthreshold = pow(10,0.4)","6d021a70":"data = data[data[\"sd_exposure\"]>0]\ndata = data.sort_values(by='sdid')\nexposure = data[\"sd_exposure\"].iat[-1]","b9445578":"log_E_min = 0.4\nE_bins = 20\nE_bin_size = 0.1\nlog_E_max = log_E_min + E_bins * E_bin_size","245d6f0e":"n_under = energy.where(energy < pow(10., log_E_min)).count()\nn_over = energy.where(energy > pow(10., log_E_max)).count()","be2a0055":"log_bins = np.linspace(log_E_min, log_E_max, E_bins + 1)\nlog_bin_centers = log_bins[:-1] + 0.05\nbins = pow(10, log_bins);\nbin_energy = pow(10, log_bin_centers)\nbin_width = bins[1:] - bins[:-1]\nbin_energy18 = bin_energy * 1e18","5875f782":"h = np.histogram(energy, bins)[0]","d9522421":"alpha = 0.16\nbeta = 0.16\nlim_low = (h - np.nan_to_num(0.5 * scipy.stats.chi2.ppf(alpha, 2 * h)) )\nlim_up = ( 0.5 * scipy.stats.chi2.ppf(1 - beta, 2 * (h + 1)) - h)","0b56d276":"cut_nz = h > 0\ncut_z = h == 0","588a3afd":"normalization = exposure * bin_width * 1e18\nflux = h[cut_nz] \/ normalization[cut_nz]\nflux_lower = lim_low[cut_nz] \/ normalization[cut_nz]\nflux_upper = lim_up[cut_nz] \/ normalization[cut_nz]\n\nplt.errorbar(bin_energy18[cut_nz], flux, [flux_lower, flux_upper], fmt=\"o\")\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.xlabel('Energy [eV]')\nplt.ylabel(r'J$^{Raw}$(E) [km$^{-2}$ sr$^{-1}$ yr$^{-1}$ eV$^{-1}$]')\nplt.title('Raw spectrum', y=1.15)\n\n# expand the range in y to have space for the labels and upper limits\nplt.ylim(flux[flux > 0].min()*0.01, flux.max()*7)\n\n# add the counts to the points\nfor E, J, count in zip(bin_energy18, flux, h):\n    if count > 0:\n        plt.annotate(count, (E, J), rotation=30, va='bottom')\n        \n        \ndef multiplicate(x):\n    return x \/ 9.806 * 1.602 * 1e-19 * 1000\n\n\naxes1 = plt.gca()\naxes2 = axes1.secondary_xaxis('top', functions=(multiplicate,multiplicate))\naxes2.set_xlabel('Equivalent mass [g]')\n\nplt.show()\nNone","3363e05d":"h_E = h[cut_nz]\nfluxtest_cumRev_E = np.cumsum(h_E[::-1])[::-1]\n\ns = 0\nax=plt.gca()\nplt.errorbar(bin_energy18[cut_nz],fluxtest_cumRev_E, fmt=\"o\")\nplt.xlabel('Energy [eV]')\nplt.ylabel('Number of events above threshold')\nplt.title('Number of events above threshold', y=1.15, fontsize=32)\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\n\nax.yaxis.set_major_formatter(mticker.ScalarFormatter())\nax.yaxis.get_major_formatter().set_scientific(False)\nax.yaxis.get_major_formatter().set_useOffset(False)\n\nplt.ylim(0.5, 100000)\n\n# add the counts to the points. ONLY 10% of data in the number?\nfor E, J, count in zip(bin_energy18[cut_nz], fluxtest_cumRev_E, fluxtest_cumRev_E):\n    if count > 0:\n        plt.annotate(count, (E, J), rotation=30, va='bottom')\n\naxes1 = plt.gca()\naxes2 = axes1.secondary_xaxis('top', functions=(multiplicate,multiplicate))\naxes2.set_xlabel('Equivalent mass [g]')\nplt.show()","eb960618":"h_E = h[cut_nz]\nfluxtest_cumRev_E = np.cumsum(h_E[::-1])[::-1] \nfluxAstronaut_E = fluxtest_cumRev_E \/ exposure * 2 * 3.1415 * pow(10,-6) * 1e6\ntimeWaitingAstronaut_E = 1 \/ fluxAstronaut_E\n\ns = 0\nax=plt.gca()\nxrange = (10e18,10e21)\nyrange = (0.01, 1000)\nplt.errorbar(bin_energy18[cut_nz], timeWaitingAstronaut_E, fmt=\"o\")\nplt.xlabel('Energy [eV]')\nplt.ylabel('Millions years to be hit by a CR above an energy')\nplt.title('Millions years to be hit by a CR above an energy',y=1.15)\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\n\nax.yaxis.set_major_formatter(mticker.ScalarFormatter())\nax.yaxis.get_major_formatter().set_scientific(False)\n#formatting problem. Why it doesn't show 0.1 but 0 instead?\n\nplt.ylim(0.01, 1000)\ncounter=0\nfor E, J, count in zip(bin_energy18[cut_nz],timeWaitingAstronaut_E, timeWaitingAstronaut_E):\n    if counter % 1 == 0:\n        label = \"{:.2f}\".format(count)\n        plt.annotate(label, (E, J), rotation=-30, va='top')\n    counter+=1\n    \naxes1 = plt.gca()\naxes2 = axes1.secondary_xaxis('top', functions=(multiplicate,multiplicate))\naxes2.set_xlabel('Equivalent mass [g]')\n\n\nammo = mpimg.imread('..\/input\/pictures\/sp_ammo.jpg')\nammbox = OffsetImage(ammo, zoom=0.3)\namm_ab = AnnotationBbox(ammbox, (1.6e20, 5), box_alignment=(0.5, 0), bboxprops = dict(alpha = 0))\n#amm_ab.set_zorder(2)\n\ndino = mpimg.imread('..\/input\/pictures\/sp_trex.jpg')\ndinbox = OffsetImage(dino, zoom=0.3)\ndin_ab = AnnotationBbox(dinbox, (5.7e19, 60), box_alignment=(0.5, 0), bboxprops = dict(alpha = 0))\ndin_ab.set_zorder(-2)\n\nsmil = mpimg.imread('..\/input\/pictures\/sp_smil.png')\nsmibox = OffsetImage(smil, zoom=0.20)\nsmi_ab = AnnotationBbox(smibox, (1.9e19, 3), box_alignment=(0.5, 0), bboxprops = dict(alpha = 0))\nsmi_ab.set_zorder(-2)\n\nmamm = mpimg.imread('..\/input\/pictures\/sp_mamm.jpg')\nmambox = OffsetImage(mamm, zoom=0.32)\nmam_ab = AnnotationBbox(mambox, (6.5e18, 0.35), box_alignment=(0.5, 0), bboxprops = dict(alpha = 0))\nmam_ab.set_zorder(-1)\n\nhomo = mpimg.imread('..\/input\/pictures\/sp_man.jpg')\nhombox = OffsetImage(homo, zoom=0.3)\nhom_ab = AnnotationBbox(hombox, (3.5e18, 0.15), box_alignment=(0.5, 0), bboxprops = dict(alpha = 0))\nhom_ab.set_zorder(-2)\n\nax.add_artist(amm_ab)\nax.add_artist(din_ab)\nax.add_artist(smi_ab)\nax.add_artist(mam_ab)\nax.add_artist(hom_ab)\n\nplt.show()","5817bbb0":"flux_energy = h_E * bin_energy[cut_nz] * 1e18 * 1.602e-19 \/ 10 * 10 \/ 3600.\nflux_energy_cum = np.cumsum(flux_energy[::-1])[::-1] \n\ns = 0\nax=plt.gca()\nlogEnergy = np.log(energy*1e18)\/np.log(10)\nplt.errorbar(bin_energy18[cut_nz], flux_energy_cum, fmt=\"o\")\nplt.xlabel('Energy [eV]')\nplt.ylabel('Hours of power for a 10 W LED lamp')\nplt.title('Hours of power for a 10 W LED lamp',y=1.15)\n\nplt.xscale(\"log\")\nplt.yscale(\"log\")\n\nax.yaxis.set_major_formatter(mticker.ScalarFormatter())\nax.yaxis.get_major_formatter().set_useOffset(False)\n\nplt.ylim(0.005, 10)\ncounter=0\nfor E, J, count in zip(bin_energy18[cut_nz],flux_energy_cum, flux_energy_cum):\n    if counter % 1 == 0:\n        label = \"{:.2f}\".format(count)\n        plt.annotate(label, (E, J), rotation=30, va='bottom')\n    counter+=1\n    \naxes1 = plt.gca()\naxes2 = axes1.secondary_xaxis('top', functions=(multiplicate,multiplicate))\naxes2.set_xlabel('Equivalent mass [g]')\nplt.show()","0d5c9d45":"For the most extreme energies the waiting time is similar to that since the time of the first dinosaurs! For example: one must wait two hundred million years to be hit by a cosmic ray above $10^{20}$ eV but only forty thousand years to be hit by a cosmic ray above $2.5 \\times 10^{18}$ eV.  \n\nThis shows why we need such large arrays to detect these extraordinary particles and why direct detection in space is not possible at such high energies. Ultra high energy cosmic rays are RARE!","f9ba5083":"Identify the bins with events and those with no events. For bins without events we calculate upper limits.","82c89683":"## Read data\nBefore data can be analysed, the cosmic rays must be measured.  This huge task has been taken care of by the Pierre Auger Collaboration through this Open data release. So to grab these data for analysis, in the next two cells we will read in the Auger Open Data and prepare a Panda dataframe to make later analysis easy.\n\nFirst we define a function to open and read the data:","a012dfee":"## Spectrum plots\nThe raw energy spectrum is displayed here. On the x-axis we put the energy (in eV), on the y-axis the flux (in units of $\\mathrm{km}^{-2}\\mathrm{sr}^{-1}\\mathrm{yr}^{-1}\\mathrm{eV}^{-1}$). The number of events detected in each bin is shown beside the data points. \n\nThe raw flux is calculated as $\\frac{ N (E) }{\\epsilon \\cdot \\Delta E}$ where $N(E)$ is the number of events falling in a given energy bin, $\\epsilon$ is the cumulated exposure (area $\\cdot$ time $\\cdot$ solid angle) and $\\Delta E$ is the width of the energy bin.\n\nThis is presented by the Pierre Auger collaboration to show how many events are recorded in units of time, area, solid angle and independently of the bin width.","9b52b309":"## How much energy is there in a single high-energy cosmic ray?\n\nWhen you drop something from your desk (1 meter height), what energy does it acquire when it hits the ground? \n\nHow heavy must be your object to equal the energy of one of the cosmic rays detected by the Pierre Auger Observatory? \n\nHow many particles above this energy have been detected at the Observatory?","821ce487":"In the following plots the equivalent mass is displayed on the upper x-axis scale.","fcb89fbb":"## Notebook setup\n\nImporting of some python packages and the definition of some default settings is required.","29818bd6":"## Building the energy spectrum\nWe will plot a histogram of the number of events detected, per unit area, in a given time and solid angle, as a function of energy. First we define the energy intervals (usually called \u2018bins\u2019) selected to be of constant width in the decimal logarithm of the energy ($\\Delta \\mathrm{log}_{10}(E)= 0.1$).","eda59b91":"## What is the total energy carried by cosmic rays?\nWhat is the total energy carried by cosmic rays on the whole observatory (3000 km$^2$) in more than 15 years? \nFor how many hours could we light a lamp of 10 W using this energy? \nSee the number on the y-axis and the numbers near the points.","80555653":"## Number of events above threshold\nHow many events have been detected by Auger above a specific energy? (10% of the Auger data are used here)","cb7ed850":"WARNING: this energy is concentrated in one nucleon only (volume ~ $10^{-45}$ m$^{3}$). Your object is ~$10^{-3}$ m$^{3}$. A macroscopic energy is concentrated in an extremely small volume. \n\nOr, if you prefer: one particle has the same energy as your object made of $> 10^{24}$ atoms. This shows how really large such energies are!","d3bb391e":"Fill the histogram to get the number of events in each energy bin.","0669d3f0":"## Time to be hit by a cosmic ray \nHow many million years would an astronaut have to wait to be hit by a particle above a specific energy (area of astronaut ~ 1 square meter)? <br>\nSee the value on the y-axis or the number near the points.","329e0e35":"The energy flux of cosmic rays at such energies is extremely small. We could power a LED lamp for less than 5 hours using the energy of all cosmic rays collected over an area of 3000 km<sup>2<\/sup> after 15 years of operation. \n\nDespite the huge energies for the single particles the overall flux of energy is tiny and it is not useful to try to harvest it.\n","20449105":"Now we upload the data summary file as a Panda dataframe for easy handling subsequently:","5ab9240e":"Check the presence of events above the highest-energy interval.","5e61e1aa":"![auger-logo.jpeg](attachment:auger-logo.jpeg)\n\n# Explore data from the Surface Detector\n\n### This notebook is dedicated to the general public. Please refer to the [Auger Open Data outreach page](https:\/\/opendata.auger.org\/outreach.php).\n\nIn this Notebook we derive the raw energy spectrum as measured with the Surface Detector of the Pierre Auger Observatory. The dataset comprises 10% of the data from the Surface Detector as used for the results published in [Phys. Rev. D 102, 062005 (2020)](https:\/\/journals.aps.org\/prd\/pdf\/10.1103\/PhysRevD.102.062005) ( [arXiv:2008.06486v2](https:\/\/arxiv.org\/abs\/2008.06486) ) The data were recorded between January 1st 2004 and August 31st 2018. We use events with zenith angle less than 60 degrees and energies above $2.5\\times10^{18}$ eV.<br>\n\nFirst try to give everyday life comparisons to explain what the spectrum is. We address the following questions:\n\na) How do such energies relate to everyday experience?\n\nb) How rare are cosmic rays at these energies?\n\nc) What is the energy flux carried by cosmic rays that reach the site in Argentina?"}}