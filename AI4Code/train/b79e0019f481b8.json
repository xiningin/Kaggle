{"cell_type":{"a92a6688":"code","c6aa1f88":"code","32c24b23":"code","b0fc0766":"code","f4890ff8":"code","5a9cb923":"code","babb003d":"code","40309c9f":"code","7db8fdd1":"code","e330a352":"code","90817b9e":"code","53f79af1":"code","24ab0b95":"code","2004efda":"code","9bd4d0da":"code","986d42ef":"code","0893cc0f":"code","a462bba0":"code","7a8bf268":"code","18e7edd9":"code","abd181ce":"code","276f05ab":"code","68acbc71":"code","8f973026":"code","51164192":"code","21626051":"code","f68a8975":"code","486f3d20":"code","2f9f115f":"code","2454e595":"code","e16ac5f4":"code","37029957":"code","ac4546d9":"code","7b8c1e0c":"code","ae4eecd1":"code","80aab1bb":"code","06ffe19c":"code","b4ae4673":"code","cba228ff":"code","99853106":"code","81fdec82":"code","e0de3716":"code","a130d9cf":"code","8b50a914":"code","9fbbba09":"code","89e1d859":"code","a7820b6b":"code","ba82dbbb":"code","31d73966":"code","7b02b9b5":"code","dff01053":"code","dabf85ba":"code","fd66f336":"markdown","91b3bcb8":"markdown","c715fc70":"markdown","657a93b5":"markdown","6837ac6f":"markdown","ec0d3b4b":"markdown","12a002bb":"markdown","492ffba3":"markdown","b0f5f2c4":"markdown","68ae4504":"markdown","61ee60a8":"markdown","ec1a6035":"markdown","f8ece858":"markdown","3cf7faf6":"markdown","c8343c5c":"markdown","503223ad":"markdown","88ab4a4f":"markdown","5a74ca26":"markdown","385009f6":"markdown","57bca4c0":"markdown","05c958aa":"markdown","8e4db6f6":"markdown","3c2ad5af":"markdown","84536ddb":"markdown","f3fb78b4":"markdown","5c1e1440":"markdown","c3d01b87":"markdown","84cdcf7e":"markdown","6d85dfee":"markdown","f6502893":"markdown","021e7578":"markdown","c0b0e17e":"markdown","4f7a17e8":"markdown","32b359e4":"markdown","28e90cf9":"markdown","6f721a68":"markdown","e6d74a42":"markdown","5c913777":"markdown","5cbf2414":"markdown","60fd1368":"markdown","465e962a":"markdown","ef113f6c":"markdown"},"source":{"a92a6688":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder","c6aa1f88":"data_train = pd.read_csv('\/kaggle\/input\/malware-prediction-tm\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/malware-prediction-tm\/test.csv')\ntraindata = data_train.copy(deep=True)\ntestdata = data_test.copy(deep=True)","32c24b23":"# define RemoveNaN function\ndef RemoveNaN(df,nan_data):\n    cols = list(df.columns[df.isnull().sum() != 0])\n    test_nan = {}\n    print(\"==========List of Columns which has Nan entries in it===========\")\n    print(cols,end=\"\\n\\n\")\n\n    print(\"========Name_of_Column number_of_NaN_values percentage_of_NaN_value=====\\n ========unique_values_of_that_columns======\"\\\n          ,end=\"\\n\\n\")\n    for col in cols:\n        print(col,end=\" \")\n        print(df[col].isna().sum(),end=\" \")\n        print(df[col].isna().sum()\/df.shape[0]*100,end=\"\\n\")\n        if(len(df[col].unique())<100):\n            print(df[col].unique())\n        else:\n            print(col+\" has more than 100 unique values\")\n        if(col not in nan_data):\n            replace_string = input(\"Give method to replace: \")\n            nan_data[col] = replace_string\n        tokens=0\n        if(type(nan_data[col]) is list):    \n            tokens=nan_data[col][1]\n        else:\n            tokens = nan_data[col]\n        replace_type = tokens\n        test_nan[col] = [replace_type]\n#         if(replace_type.lower() == \"int\"):\n#             replace_value = tokens[1]\n#             df[col].fillna(int(replace_value),inplace=True)\n#         elif(replace_type.lower() == \"string\"):\n#             replace_value = tokens[1]\n#             df[col].fillna(replace_value,inplace=True)\n        if(replace_type == \"mean\"):\n            df[col].fillna(df[col].mean(),inplace=True)\n            test_nan[col].append(df[col].mean())\n        elif(replace_type == \"min\"):\n            df[col].fillna(df[col].min(),inplace=True)\n            test_nan[col].append(df[col].min())\n        elif(replace_type == \"max\"):\n            df[col].fillna(df[col].max(),inplace=True)\n            test_nan[col].append(df[col].max())\n        elif(replace_type == \"std\"):\n            df[col].fillna(df[col].std(),inplace=True)\n            test_nan[col].append(df[col].std())\n        elif(replace_type == \"most\"):\n            df[col].fillna(df[col].value_counts().idxmax(),inplace=True)\n            test_nan[col].append(df[col].value_counts().idxmax())\n        elif(replace_type == \"median\"):\n            df[col].fillna(df[col].median(),inplace=True)\n            test_nan[col].append(df[col].median())\n        else:\n            try:\n                replace_type = float(replace_type)\n                nan_data[col] = replace_type\n            except:\n                pass \n            df[col].fillna(replace_type,inplace=True)\n            test_nan[col].append(replace_type)\n        print()\n#     check_NaN(df)\n#     print(nan_data)\n    print(test_nan)","b0fc0766":"new = pd.concat([data_train,data_test])","f4890ff8":"# Removing the id column\nnew.drop(columns =['MachineIdentifier'],inplace=True)","5a9cb923":"cols = list(new.columns[new.isnull().sum() != 0])\nprint(cols)","babb003d":"for col in cols:    \n    if(new[col].dtype == 'object'):\n        new[col].fillna('nan',inplace=True)\n    else:\n        new[col].fillna(-1,inplace=True)","40309c9f":"for i in new:\n    if (new[i].dtypes == 'object'):\n            le = LabelEncoder()\n            new[i]=le.fit_transform(new[i])","7db8fdd1":"less_feature_importance=['ProductName', 'IsBeta', 'HasTpm', 'CityIdentifier','GeoNameIdentifier', 'Census_MDC2FormFactor', 'Census_ProcessorModelIdentifier', 'Census_SystemVolumeTotalCapacity', 'Census_PowerPlatformRoleName', 'Census_IsFlightsDisabled', 'Census_IsPenCapable', 'SkuEdition', 'AutoSampleOptIn', 'Firewall', 'UacLuaenable', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier', 'Census_IsPortableOperatingSystem', 'Census_FirmwareVersionIdentifier','DefaultBrowsersIdentifier','PuaMode','Census_ProcessorClass','Census_IsFlightingInternal','Census_ThresholdOptIn','Census_IsWIMBootEnabled']\nnew.drop(columns =less_feature_importance,axis=1,inplace=True)","e330a352":"X = new.iloc[:data_train.shape[0],:]  # train set\nY = new.iloc[data_train.shape[0]:,:]  # test set","90817b9e":"y=X['HasDetections']\nX.drop(columns =['HasDetections'],axis=1,inplace=True)\nY.drop(columns =['HasDetections'],axis=1,inplace=True)","53f79af1":"plt.figure(figsize=(15,15))\nsns.kdeplot(X.loc[data_train['HasDetections']==0,'EngineVersion'].astype(int),\n             color='r',label='Not Malware')\nsns.kdeplot(X.loc[data_train['HasDetections']==1,'EngineVersion'].astype(int),\n             color='g',label='Malware')\nplt.legend()\nplt.show()","24ab0b95":"X['EngineVersion2']=X['EngineVersion']**2\nY['EngineVersion2']=Y['EngineVersion']**2","2004efda":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X)\nX_test = sc.transform(Y)","9bd4d0da":"nan_col = ['RtpStateBitfield', 'DefaultBrowsersIdentifier', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'CityIdentifier', 'OrganizationIdentifier', 'GeoNameIdentifier', 'OsBuildLab', 'IsProtected', 'PuaMode', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier', 'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorModelIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName', 'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges', 'Census_OSInstallLanguageIdentifier', 'Census_IsFlightingInternal', 'Census_IsFlightsDisabled', 'Census_ThresholdOptIn', 'Census_FirmwareManufacturerIdentifier', 'Census_FirmwareVersionIdentifier', 'Census_IsWIMBootEnabled', 'Census_IsVirtualDevice', 'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer', 'Wdft_RegionIdentifier']","986d42ef":"for col in nan_col:\n#     print(col)\n#     print(traindata[[col]].describe)\n#     plt.figure()\n    try:\n        if(len(traindata[col].unique()) < 25):\n            plt.figure(figsize=(15,15))\n            sns.distplot(traindata.loc[traindata['HasDetections']==0,col].dropna().astype(int),\n                 bins=len(traindata[col].unique())*2,kde=False,color='y',label='Not Malware')\n            sns.distplot(traindata.loc[traindata['HasDetections']==1,col].dropna().astype(int),\n                 bins=len(traindata[col].unique())*2,kde=False,color='b',label='Malware')\n            plt.legend()\n            plt.show()\n    except:\n        try:\n            plt.figure(figsize=(20,20))\n            sns.countplot(traindata[col])\n            plt.show()\n        except:\n            print(\"Unable to make plot\",end=\"\\n\")\n            print(\"Number of unique values = \"+ str(len(traindata[col].unique())))\n            if(len(traindata[col].unique()) < 25):\n                print(traindata[col].unique())\n#     plt.show()","0893cc0f":"nan_data = {'RtpStateBitfield': 0.0,\n 'DefaultBrowsersIdentifier': -100.0,\n 'AVProductStatesIdentifier': 'most',\n 'AVProductsInstalled': 'most',\n 'AVProductsEnabled': 'most',\n 'CityIdentifier': 'mean',\n 'OrganizationIdentifier': -5.0,\n 'GeoNameIdentifier': 'mean',\n 'OsBuildLab': 'most',\n 'IsProtected': 0.0,\n 'PuaMode': 'off',\n 'SMode': 0.0,\n 'IeVerIdentifier': 'mean',\n 'SmartScreen': 'NotSpecified',\n 'Firewall': 0.0,\n 'UacLuaenable': 0.0,\n 'Census_OEMNameIdentifier': 'mean',\n 'Census_OEMModelIdentifier': 'mean',\n 'Census_ProcessorCoreCount': 'most',\n 'Census_ProcessorManufacturerIdentifier': 'most',\n 'Census_ProcessorModelIdentifier': 'most',\n 'Census_ProcessorClass': 'unknown',\n 'Census_PrimaryDiskTotalCapacity': 'mean',\n 'Census_PrimaryDiskTypeName': 'Unspecified',\n 'Census_SystemVolumeTotalCapacity': 'mean',\n 'Census_TotalPhysicalRAM': 'mean',\n 'Census_ChassisTypeName': 'UNKNOWN',\n 'Census_InternalPrimaryDiagonalDisplaySizeInInches': 0.0,\n 'Census_InternalPrimaryDisplayResolutionHorizontal': 0.0,\n 'Census_InternalPrimaryDisplayResolutionVertical': 0.0,\n 'Census_PowerPlatformRoleName': 'UNKNOWN',\n 'Census_InternalBatteryType': 'NA',\n 'Census_InternalBatteryNumberOfCharges': 'median',\n 'Census_OSInstallLanguageIdentifier': 'mean',\n 'Census_IsFlightingInternal': -1.0,\n 'Census_IsFlightsDisabled': 0.0,\n 'Census_ThresholdOptIn': -1.0,\n 'Census_FirmwareManufacturerIdentifier': 'most',\n 'Census_FirmwareVersionIdentifier': 'most',\n 'Census_IsWIMBootEnabled': 1.0,\n 'Census_IsVirtualDevice': 'most',\n 'Census_IsAlwaysOnAlwaysConnectedCapable': 'most',\n 'Wdft_IsGamer': 0.0,\n 'Wdft_RegionIdentifier': 'most'}","a462bba0":"RemoveNaN(traindata, nan_data)\nnan_data","7a8bf268":"test_nan = {'RtpStateBitfield': [0.0, 0.0], 'DefaultBrowsersIdentifier': [-100.0, -100.0], 'AVProductStatesIdentifier': ['most', 53447.0], 'AVProductsInstalled': ['most', 1.0], 'AVProductsEnabled': ['most', 1.0], 'CityIdentifier': ['mean', 81367.93053740394], 'OrganizationIdentifier': [-5.0, -5.0], 'GeoNameIdentifier': ['mean', 169.3988339116802], 'OsBuildLab': ['most', '17134.1.amd64fre.rs4_release.180410-1804'], 'IsProtected': [0.0, 0.0], 'PuaMode': ['off', 'off'], 'SMode': [0.0, 0.0], 'IeVerIdentifier': ['mean', 126.07326921509843], 'SmartScreen': ['NotSpecified', 'NotSpecified'], 'Firewall': [0.0, 0.0], 'UacLuaenable': [0.0, 0.0], 'Census_OEMNameIdentifier': ['mean', 2234.8513929902815], 'Census_OEMModelIdentifier': ['mean', 239333.81608716678], 'Census_ProcessorCoreCount': ['most', 4.0], 'Census_ProcessorManufacturerIdentifier': ['most', 5.0], 'Census_ProcessorModelIdentifier': ['most', 1998.0], 'Census_ProcessorClass': ['unknown', 'unknown'], 'Census_PrimaryDiskTotalCapacity': ['mean', 500474.0415121528], 'Census_PrimaryDiskTypeName': ['Unspecified', 'Unspecified'], 'Census_SystemVolumeTotalCapacity': ['mean', 373933.4838598635], 'Census_TotalPhysicalRAM': ['mean', 5899.040152266295], 'Census_ChassisTypeName': ['UNKNOWN', 'UNKNOWN'], 'Census_InternalPrimaryDiagonalDisplaySizeInInches': [0.0, 0.0], 'Census_InternalPrimaryDisplayResolutionHorizontal': [0.0, 0.0], 'Census_InternalPrimaryDisplayResolutionVertical': [0.0, 0.0], 'Census_PowerPlatformRoleName': ['UNKNOWN', 'UNKNOWN'], 'Census_InternalBatteryType': ['NA', 'NA'], 'Census_InternalBatteryNumberOfCharges': ['median', 0.0], 'Census_OSInstallLanguageIdentifier': ['mean', 14.587365953642989], 'Census_IsFlightingInternal': [-1.0, -1.0], 'Census_IsFlightsDisabled': [0.0, 0.0], 'Census_ThresholdOptIn': [-1.0, -1.0], 'Census_FirmwareManufacturerIdentifier': ['most', 142.0], 'Census_FirmwareVersionIdentifier': ['most', 33105.0], 'Census_IsWIMBootEnabled': [1.0, 1.0], 'Census_IsVirtualDevice': ['most', 0.0], 'Census_IsAlwaysOnAlwaysConnectedCapable': ['most', 0.0], 'Wdft_IsGamer': [0.0, 0.0], 'Wdft_RegionIdentifier': ['most', 10.0]}","18e7edd9":"RemoveNaN(testdata,test_nan)","abd181ce":"testdata[\"HasDetections\"] = 2","276f05ab":"train_size = traindata.shape[0]\ntest_size = testdata.shape[0]\nprint(testdata.shape)\nprint(traindata.shape)","68acbc71":"superdata = pd.concat([traindata,testdata],axis=0,ignore_index=True)\nsuperdata.shape","8f973026":"superdata[\"SmartScreen\"] = superdata[\"SmartScreen\"].str.lower()","51164192":"str_cat = []\nnon_str_cat = []\nlen3 = []\nstr_len3 = []\nfor col in superdata:\n    if(len(superdata[col].unique()) == 3 or len(superdata[col].unique()) == 4):\n        if(type(superdata[col][392]) == str):\n            str_len3.append(col)\n            continue\n        len3.append(col)\n        continue\n#     print(type(superdata.loc[0,col]))\n    if(type(superdata[col][392]) == str):\n        str_cat.append(col)\n        print(col,end=\" \")\n        print(len(superdata[col].unique()))\n    else:\n        if(len(superdata[col].unique()) < 25):\n            non_str_cat.append(col)\n            print(\"non-str:\"+col,end=\" \")\n            print(len(superdata[col].unique()))\n#     print(col,)\n\nprint()","21626051":"print(\"string: \"+ str(str_cat),end=\"\\n\\n\\n\\n\")\nprint(\"Non-string\" + str(non_str_cat),end=\"\\n\\n\\n\\n\\n\\n\\n\\n\")\nprint(\"Length 3 or 4: \"+str(len3),end=\"\\n\\n\\n\\n\\n\")\nprint(\"String Length 3 or 4: \"+str(str_len3))","f68a8975":"Encoders = {}\nstr_cols = ['ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion', 'OsVer', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'PuaMode', 'SmartScreen', 'Census_MDC2FormFactor', 'Census_ChassisTypeName', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_OSVersion', 'Census_OSBranch', 'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', 'Census_OSWUAutoUpdateOptionsName', 'Census_ActivationChannel', 'Census_FlightRing']\nstr_cols_len3 = ['Platform', 'Processor', 'Census_DeviceFamily', 'Census_ProcessorClass', 'Census_PrimaryDiskTypeName', 'Census_OSArchitecture', 'Census_GenuineStateName']\ncols_len3 = ['Census_IsFlightingInternal', 'Census_ThresholdOptIn']","486f3d20":"superdata = pd.get_dummies(superdata, columns = str_cols_len3+cols_len3 , drop_first=True)","2f9f115f":"superdata.shape","2454e595":"for col in str_cols:\n    encoder = LabelEncoder()\n    superdata[col] = encoder.fit_transform(superdata[col])\n    Encoders[col] = encoder\nassert(len(Encoders) == len(str_cols))","e16ac5f4":"Text_col = []\nfor col in superdata:\n    if(type(superdata[col][392]) == str):\n        Text_col.append(col)\nassert(len(Text_col) == 1)\ndel(Text_col)","37029957":"Normalizer = {}\nnormalized_columns = {}\nfor col in superdata.columns.drop([\"MachineIdentifier\"]):\n    if(len(superdata[col].unique()) > 100):\n        if(superdata[col].max()<=3 and superdata[col].min()>=-3):\n            continue\n        normalized_columns[col] = superdata[[col]].mean\n        scaler = StandardScaler()\n        superdata[[col]] = scaler.fit_transform(superdata[[col]])\n        Normalizer[col] = scaler\nassert(Normalizer.keys() == normalized_columns.keys())\nprint(len(Normalizer))\ndel(normalized_columns)","ac4546d9":"traindata = superdata[superdata[\"HasDetections\"] < 2]\ntestdata = superdata[superdata[\"HasDetections\"] == 2].drop(columns=[\"HasDetections\"])","7b8c1e0c":"print(testdata.shape)\nprint(traindata.shape)\nassert (train_size == traindata.shape[0] and test_size == testdata.shape[0])","ae4eecd1":"del(superdata)","80aab1bb":"from sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostClassifier\nmodel = CatBoostClassifier(thread_count=-1,learning_rate=0.1,l2_leaf_reg=250,border_count=100,scale_pos_weight=4,verbose=0)\nscores = cross_val_score(model, X_train, y, scoring='roc_auc', cv=5,verbose=10,n_jobs=-1)\nprint('Mean ROC AUC: %.6f' % np.mean(scores))","06ffe19c":"from catboost import CatBoostClassifier\nclassifier = CatBoostClassifier(thread_count=-1,learning_rate=0.1,l2_leaf_reg=250,border_count=100,scale_pos_weight=4)\nclassifier.fit(X_train, y)","b4ae4673":"y_score=classifier.predict_proba(X_test)\ny_s=[]\nfor i in y_score:\n    y_s.append(i[1])","cba228ff":"# Storing the result\ndata_test['HasDetections']=y_s\ndata_test[['MachineIdentifier', 'HasDetections']].to_csv('cb.csv', index= False)","99853106":"from imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nover = SMOTE(sampling_strategy=0.21,n_jobs=-1,random_state = 42)\nX_over, y_over = over.fit_resample(X_train, y)","81fdec82":"from xgboost import XGBClassifier\nmodel = XGBClassifier(learning_rate=0.10,n_estimators=1000,scale_pos_weight=2.1)\nscores = cross_val_score(model, X_train, y, scoring='roc_auc', cv=5,verbose=10,n_jobs=-1)\nprint('Mean ROC AUC: %.6f' % np.mean(scores))","e0de3716":"from xgboost import XGBClassifier\nclassifier = XGBClassifier(learning_rate=0.10,n_estimators=1000,scale_pos_weight=2.1)\nclassifier.fit(X_over, y_over)","a130d9cf":"y_score=classifier.predict_proba(X_test)\ny_s=[]\nfor i in y_score:\n    y_s.append(i[1])","8b50a914":"# Storing the result\ndata_test['HasDetections']=y_s\ndata_test[['MachineIdentifier', 'HasDetections']].to_csv('xgb.csv', index= False)","9fbbba09":"from lightgbm import LGBMClassifier\nx_train = traindata.drop(columns=[\"MachineIdentifier\",\"HasDetections\"])\ny_train = traindata[\"HasDetections\"]","89e1d859":"print(x_train.shape)\ntestdata.shape","a7820b6b":"classifier1 = LGBMClassifier(max_bin=511,learning_rate=0.01,num_iterations=1000,num_leaves=255,n_estimators=100)\nclassifier1.fit(x_train,y_train)\n\ntest_score = classifier1.predict_proba(testdata.drop(columns=[\"MachineIdentifier\"]))\n\ntestdata[\"HasDetections\"] = list(pd.DataFrame(test_score)[1])\n\npred1 = testdata[[\"MachineIdentifier\",\"HasDetections\"]]\ntestdata.drop(columns=[\"HasDetections\"],inplace=True)","ba82dbbb":"pred1.to_csv('lgbm.csv',index=False)","31d73966":"# define model\nfrom sklearn.model_selection import cross_val_score\nmodel = LGBMClassifier(max_bin=511,learning_rate=0.01,num_iterations=1000,num_leaves=255,n_estimators=100)\n# evaluate model\nscores = cross_val_score(model, x_train, y_train, scoring='roc_auc', cv=5, n_jobs=-1,verbose=11)\n# summarize performance\nprint('Mean ROC AUC: %.3f' % np.mean(scores))","7b02b9b5":"y_score1 = pd.read_csv(\"cb.csv\")\ny_score2 = pd.read_csv(\"xgb.csv\")\ny_score3 = pd.read_csv(\"lgbm.csv\")","dff01053":"y_final = y_score1['HasDetections']*0.1+y_score2['HasDetections']*0.4+y_score3['HasDetections']*0.5","dabf85ba":"y_score1['HasDetections']=y_final\ny_score1[['MachineIdentifier', 'HasDetections']].to_csv('ensemble.csv', index= False)","fd66f336":"# MODEL-2 XGBOOST","91b3bcb8":"As we can see there is high probability of detecting malware in machines with EngineVersion < 50. We can generally say, that older version are more probable to get infected.","c715fc70":"## NAN VALUE IMPUTATION","657a93b5":"# WEIGHTED AVERAGING","6837ac6f":"#### Dropped columns with single values and columns that had less feature importance found after modelling","ec0d3b4b":"#### Columns are label encoded","12a002bb":"### Splitting the superdata to train and test data frames again and deleting super data","492ffba3":"# MODEL-3 LIGHTGBM","b0f5f2c4":"## Visualizing the Columns with NaN values","68ae4504":"#### Oversampled to ratio 0.21 after trying out different values","61ee60a8":"# IMPORT LIBRARIES","ec1a6035":"## Missing Values and Imputation","f8ece858":"One Hot Encoding the fields which have only 3 or 4 string values","3cf7faf6":"Cross Validation","c8343c5c":"## Combining Both the DataFrames to get a super dataFrame","503223ad":"# ENCODING","88ab4a4f":"# Creating new feature","5a74ca26":"SMOTE Didnt increase the accuracy for this model","385009f6":"# PREPROCESSING STYLE-2","57bca4c0":"# Seperating the tables","05c958aa":"### USES DIFFERENT PREPROCESSING","8e4db6f6":"Here are the columns woth less feature importance after modelling","3c2ad5af":"#### Tables are merged to keep consistency in imputation and encoding","84536ddb":"#### Creating new polynomial feature as the base had good feature importance","f3fb78b4":"# Preprocessing-1","5c1e1440":"Cross Validation","c3d01b87":"# IMPORT DATASET","84cdcf7e":"####  Imputing nan with new elements","6d85dfee":"## Normalising values in the dataset","f6502893":"Label Encoding other Non-Numeric fields","021e7578":"# Some Common Functions defined for preprocessing","c0b0e17e":"# Dropping Columns","4f7a17e8":"Since we have the nan values with -1. We can remove the features with exactly 2 unique values.","32b359e4":"## Encoding the non-numeric fields","28e90cf9":"# Oversampling using SMOTE","6f721a68":"#### Found the best hyperparameters after trying different combinations","e6d74a42":"# MODEL-1 CATBOOST","5c913777":"## MERGING TRAIN AND TEST TABLES","5cbf2414":"Cross Validation","60fd1368":"### There are two kinds of preprocessing done one for model 1 and 2 and another for model 3","465e962a":"#### Found the best hyperparameters after trying different combinations","ef113f6c":"# Scaling"}}