{"cell_type":{"30721ddd":"code","a36871d6":"code","e0e7bd50":"code","826de7b1":"code","ec316d55":"code","447cff5f":"code","c454c392":"code","77269a2e":"code","a66f258e":"code","f1c69435":"code","a63a3ead":"code","df5aea18":"code","08786c5d":"code","12ed8892":"code","04e13f7a":"code","9e4d9cef":"code","b19b8b0c":"code","b70aea7e":"code","61ed0e36":"code","789fdb70":"code","ddd099a9":"code","5180f909":"code","2ff36237":"code","1fd31707":"code","21f27ab6":"code","13e142b9":"code","e538655c":"code","01e67c8e":"code","52538f79":"code","11f7f82b":"code","790bcfff":"code","bfd397f8":"code","82899d67":"code","fecf04cc":"code","b197e797":"code","3265ee5b":"code","3ce332eb":"code","7d3fee01":"code","75e427f4":"code","86bc78cd":"code","572fda03":"code","a55dc667":"code","ff09f6c2":"code","5139d2f9":"code","7591836d":"code","43f27b30":"code","ddf8112b":"markdown","ecde9ccb":"markdown","9089d49b":"markdown","c920296d":"markdown","5d2b05bc":"markdown","0f404889":"markdown","5b6a9664":"markdown","2f545189":"markdown","13ff2fd8":"markdown","9c317a2a":"markdown","e567b99c":"markdown","65f2757e":"markdown","24dd1457":"markdown","e4022304":"markdown","fa42d3ec":"markdown","b3cc20d8":"markdown"},"source":{"30721ddd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        continue\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a36871d6":"import matplotlib.pyplot as plt","e0e7bd50":"!ls ..\/input\/birdsong-recognition","826de7b1":"train = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/birdsong-recognition\/sample_submission.csv')\n\nprint(\"Shape train: \", train.shape)\nprint(\"Shape  test: \", test.shape)\nprint(\"Shape   sub: \", sub.shape)","ec316d55":"train.head(3)","447cff5f":"train.columns","c454c392":"df = train.copy()\nprint(\"Long min:\", df.longitude.min())\nprint(\"Long min:\", df.longitude.max())","77269a2e":"fig, axs = plt.subplots(2,4, figsize=(23,12))\n\ndf['rating'].value_counts().plot(kind='bar', legend=True, ax=axs[0,0])\ndf['playback_used'].value_counts().plot(kind='bar', legend=True, ax=axs[0,1])\ndf['speed'].value_counts().plot(kind='bar', legend=True, ax=axs[0,2])\ndf['channels'].value_counts().plot(kind='bar', legend=True, ax=axs[0,3])\n\ndf['pitch'].value_counts().plot(kind='bar', legend=True, ax=axs[1,0])\ndf['length'].value_counts().plot(kind='bar', legend=True, ax=axs[1,1])\ndf['bird_seen'].value_counts().plot(kind='bar', legend=True, ax=axs[1,2])\ndf['license'].value_counts().plot(kind='bar', legend=True, ax=axs[1,3])\n\nplt.savefig('data_exploration.png',dpi=300)\n\nplt.show()","a66f258e":"df['ebird_code'].unique(), len(df['ebird_code'].unique())","f1c69435":"list_dirs = []\nfor dirs in next(os.walk('..\/input\/birdsong-recognition\/train_audio\/'))[1]:\n    list_dirs.append(dirs)\n#list_dirs\n\narray_dirs = np.array(list_dirs)\n\nprint('List:\\n', list_dirs,'\\n')\nprint('Total: {} directores'.format(len(array_dirs)))","a63a3ead":"#!ls ..\/input\/birdsong-recognition\/train_audio\/\n#!ls ..\/input\/birdsong-recognition\/train_audio\/astfly\/\n\n# For sound within notebook\nimport IPython.display as ipd  \nipd.Audio('..\/input\/birdsong-recognition\/train_audio\/astfly\/XC109920.mp3')","df5aea18":"fig = plt.figure(figsize=(12,6))\n\ndf['duration'].hist(bins=360)\n\nplt.xlim(-10,600)","08786c5d":"dflong =  df[df['duration'] > 600]\ndflong['duration'].hist()","12ed8892":"countries = df['country'].value_counts()\ncountries","04e13f7a":"fig = plt.figure(figsize=(23,6))\n\ncountries.plot.bar()\n\nplt.savefig('countries.png',dpi=200)\nplt.show()","9e4d9cef":"df.replace(['Not specified'], [0], inplace=True)\ndf_longitude= df['longitude'].astype(float)","b19b8b0c":"df_longitude.hist(bins=360)","b70aea7e":"df_latitude= df['latitude'].astype(float)\ndf_latitude.hist(bins=180)","61ed0e36":"#!pip install basemap","789fdb70":"%matplotlib inline\nfrom mpl_toolkits.basemap import Basemap\n\nimport matplotlib.gridspec as gridspec\nfrom itertools import chain\n\n\ndef draw_map(m, scale):\n    # draw a shaded-relief image\n    m.shadedrelief(scale=scale)\n    \n    # lats and longs are returned as a dictionary\n    lats = m.drawparallels(np.linspace(-90, 90, 13))\n    lons = m.drawmeridians(np.linspace(-180, 180, 13))\n\n    # keys contain the plt.Line2D instances\n    lat_lines = chain(*(tup[1][0] for tup in lats.items()))\n    lon_lines = chain(*(tup[1][0] for tup in lons.items()))\n    all_lines = chain(lat_lines, lon_lines)\n    \n    # cycle through these lines and set the desired style\n    for line in all_lines:\n        line.set(linestyle='--', alpha=0.5, color='w')\n\n    \nfig = plt.figure(figsize=(15, 10), edgecolor='w')\ngs = gridspec.GridSpec(4,100) # 5 rows, 3 column\n\n## ---------------------------------------------------------------------------------------------------------------\n## World Map\nax1 = plt.subplot(gs[:2, 1:99]) \nm = Basemap(ax=ax1,projection='cyl', resolution='l', llcrnrlat=-90, urcrnrlat=90,llcrnrlon=-180, urcrnrlon=180, ) # 'mill'; None, 'c'\ndraw_map(m, scale=0.5)\n## ---------------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------------\n## Our data\nax2 = plt.subplot(gs[2, 19:81]) #Third row, span all columns by :\nax2.hist(df_longitude, 360, histtype='bar', orientation='vertical', color='blue',alpha=0.5)\nplt.xticks([-180, -150, -120, -90, -60, -30, 0, 30, 60 , 90, 120, 150, 180], [-180, -150, -120, -90, -60, -30, 0, 30, 60 , 90, 120, 150, 180],rotation=0)\nplt.yscale('symlog')\nplt.ylim(1,2000)\nplt.grid(True)\n## ---------------------------------------------------------------------------------------------------------------\n\n#plt.tight_layout()\nplt.savefig('world_plus_distribution.png',dpi=200)\n\nplt.show()\n\n## For world map, can be cutted via\n#lons, lats = np.meshgrid(m.drawmeridians(np.linspace(-180, 180, 13)),m.drawparallels(np.linspace(-90, 90, 13)))\n#x, y = m(lons, lats)\n#plt.xlim(-90, 90)\n#plt.ylim(-45, 45)","ddd099a9":"lon = df_longitude\nlat = df_latitude","5180f909":"duration = df['duration'].values\nrating = df['rating'].values\n\n# Draw the map background\nfig = plt.figure(figsize=(23, 23))\nm = Basemap(projection='cyl', resolution='l', lat_0=90, lon_0=0) # high resolution basemap-data-hires is needed, no internet is used in this competiton\nm.shadedrelief()\nm.drawcoastlines(color='gray')\nm.drawcountries(color='gray')\nm.drawstates(color='gray')\n\n# Scatter city data, with color reflecting rating and size reflecting duration\nm.scatter(lon, lat, latlon=True, c=rating, s=np.log10(duration+2)**3, cmap='Reds', alpha=0.5) # +2 to avoid log10 error, xx2 to increase visibility\n\n# Create colorbar and legend\n#plt.colorbar(label=r'rating')\n##plt.clim(3, 7)\n\n# create an axes on the right side of ax. The width of cax will be 5%\n# of ax and the padding between cax and ax will be fixed at 0.05 inch.\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nax = plt.gca()\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)\nplt.colorbar(cax=cax)\n\n# Legend with dummy points\nfor a in [100, 500, 1000, 2000]:\n    plt.scatter([], [], c='k', alpha=0.5, s=np.log10(a+2)**3,label=str(a) + ' sec')\n    \nplt.legend(scatterpoints=1, frameon=False, labelspacing=1, loc='lower left');\n\nplt.savefig('geo_duration_rating.png',dpi=300)","2ff36237":"fig = plt.figure(figsize=(15, 9))\nplt.scatter(x=df['longitude'].astype(float), y=df['latitude'].astype(float))\n\nplt.xticks([-180, -150, -120, -90, -60, -30, 0, 30, 60 , 90, 120, 150, 180], [-180, -150, -120, -90, -60, -30, 0, 30, 60 , 90, 120, 150, 180],rotation=0)\nplt.ylim(-90,90)\nplt.grid(True)\n\nplt.savefig('birds_location.png',dpi=300)\n\nplt.show()","1fd31707":"from shapely.geometry import Point\nimport geopandas as gpd\nfrom geopandas import GeoDataFrame\n\n#fig = plt.figure(figsize=(15, 9))\n\ngeometry = [Point(xy) for xy in zip(df['longitude'].astype(float), df['latitude'].astype(float))]\ngdf = GeoDataFrame(df, geometry=geometry)  \n\n#this is a simple map that goes with geopandas\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ngdf.plot(ax=world.plot(figsize=(23, 16)), marker='o', color='red', markersize=10);\n\nplt.savefig('birds_location_world.png',dpi=300)\n\nplt.show()","21f27ab6":"df['elevation']","13e142b9":"df['elevation'].value_counts().unique","e538655c":"elev_list = list(df['elevation'])\nelev_list,len(elev_list)","01e67c8e":"df['elevation'].head(5)","52538f79":"import re\n\nelev_list_num = []\n\nfor i in range(len(elev_list)):\n    taken_num = re.findall(r\"[-+]?\\d*\\.\\d+|\\d+\", elev_list[i])\n    print(taken_num)\n    elev_list_num.append(taken_num)\n    \nelev_list_num","11f7f82b":"len(elev_list_num)","790bcfff":"elev_list_num[449]","bfd397f8":"elev_list_num2 = []\nfor i in range(len(elev_list_num)):\n    if elev_list_num[i] == []:\n        elev_list_num2.append(0.000)\n    else:\n        elev_list_num2.append(float(elev_list_num[i][0]))","82899d67":"len(elev_list_num2)","fecf04cc":"df_elevation = pd.DataFrame(elev_list_num2)\ndf_elevation.head(5)","b197e797":"df_elevation.rename(columns={0: 'elevation'}, inplace=True)\ndf_elevation.head(5)","3265ee5b":"fig = plt.figure(figsize=(23, 8))\n\nplt.ylabel('Counts')\nplt.xlabel('Elevation value');\n\ndegrees = 90\nplt.xticks(rotation=degrees)\n\nplt.hist(elev_list_num, density=False, bins=30)  # density=True\n\nplt.savefig('birds_elevation.png',dpi=300)\n\nplt.show()","3ce332eb":"df['longitude'].shape,df['longitude'].shape,df_elevation['elevation'].shape","7d3fee01":"df_elevation['elevation'].max()","75e427f4":"fig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter((1)*df['latitude'].astype(float),(1)*df['longitude'].astype(float),df_elevation['elevation']\/1000, s = 0.5, color = 'r')\n\nax.set_xlim(-90,90)\nax.set_ylim(-180,180)\nax.set_zlim(0,5)\n\nax.set_xlabel('lat')\nax.set_ylabel('lon')\nax.set_zlabel('elev [km]')\nax.set_title('Birds on Sky :) ',fontsize=18)\n\nax.view_init(90, 90)\n\nplt.savefig('birds_3D_elevation_topview.png',dpi=300)\n\nplt.show()","86bc78cd":"fig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter((1)*df['latitude'].astype(float),(-1)*df['longitude'].astype(float),df_elevation['elevation']\/1000, s = 0.5, color = 'r')\n\nax.set_xlim(-90,90)\nax.set_ylim(-180,180)\nax.set_zlim(0,5)\n\nax.set_xlabel('lat')\nax.set_ylabel('lon')\nax.set_zlabel('elev [km]')\nax.set_title('Birds on Sky :) ',fontsize=18)\n\nax.view_init(40, 135)\n\nplt.savefig('birds_3D_elevation.png',dpi=300)\n\nplt.show()","572fda03":"import seaborn as sns","a55dc667":"sns.set(rc={'figure.figsize':(10,10)})\n\nsns_plot = sns.jointplot(x='latitude', y='longitude', data=df, kind='kde')\n\nsns_plot.savefig('birds_2D_world.png', dpi=300)","ff09f6c2":"from IPython.display import Image\nImage(filename='..\/working\/birds_2D_world.png') ","5139d2f9":"fig = plt.figure(figsize=(23, 6), edgecolor='w')\ndf['date'].value_counts().sort_index().plot(c='green', linewidth=1)\nplt.savefig('date.png',dpi=200)","7591836d":"fig = plt.figure(figsize=(12, 10), edgecolor='w')\n\ntime_series = df['date'].value_counts().reset_index()\ntime_series.columns = ['date', 'count']\n\ntime_series.plot(kind='kde')\ntime_series.plot(kind='hist')\n\n#plt.savefig('date2.png',dpi=200)\nplt.show()","43f27b30":"sub.to_csv('submission.csv', index=False)","ddf8112b":"## Geo","ecde9ccb":"## Bird samples","9089d49b":"### Elevation","c920296d":"<div align=\"center\">\n<font size=\"6\"> Cornell Birdcall Identification <\/font>  \n<\/div>\n\n<div align=\"center\">\n<font size=\"4\"> Build tools for bird population monitoring <\/font>  \n<\/div>\n\n<img align=\"right\" src=\"https:\/\/www.birds.cornell.edu\/ccb\/wp-content\/uploads\/2020\/02\/Raven-1.-Joseph-Westgate-20.png\" data-canonical-src=\"https:\/\/www.birds.cornell.edu\/ccb\/wp-content\/uploads\/2020\/02\/Raven-1.-Joseph-Westgate-20.png\" width=\"400\" height=\"400\" \/>\n\n<!-- <font size=\"2\"> -->\n    \nOver 10,000 bird species occur in the world, and they can be found in nearly every environment, from untouched rainforests to suburbs and even cities. However, it is often easier to hear birds than see them. With proper sound detection and classification, researchers could automatically intuit factors about an area\u2019s quality of life based on a changing bird population.  \n\n\nThere are already many projects underway to extensively monitor birds by continuously recording natural soundscapes over long periods. To unlock the full potential of these extensive and information-rich sound archives, researchers need good machine listeners to reliably extract as much information as possible to aid data-driven conservation.  \n\n\nThe [Cornell Lab of Ornithology\u2019s Center for Conservation Bioacoustics](https:\/\/www.birds.cornell.edu\/ccb\/) (CCB)\u2019s mission is to collect\/interpret sounds in nature.  \n\n\n* In this competition, you will identify a wide variety of bird vocalizations in soundscape recordings. \n* Due to the complexity of the recordings, they contain weak labels.\n\n<!-- <\/font>  -->\n\n<!-- ![](https:\/\/www.birds.cornell.edu\/ccb\/wp-content\/uploads\/2020\/02\/Raven-1.-Joseph-Westgate-20.png) -->\n","5d2b05bc":"### some elevation are with  missing data, we will fill it by 0","0f404889":"## Date","5b6a9664":"### Take num values from text","2f545189":"Print the longest ones separately. We have just few","13ff2fd8":"## Location","9c317a2a":"### Duration\n\nMost samples are <5 min","e567b99c":"## Map","65f2757e":"## Map\n### Distribution of longitudes \nMost data is from North America and Europe. ","24dd1457":"## Country\n* North America and Europe have the main contribution, expecially few countries  \n* Later see on the map","e4022304":"## Audio\n\nWe have 264 directories for 264 birds","fa42d3ec":"## Data files","b3cc20d8":"# Submission"}}