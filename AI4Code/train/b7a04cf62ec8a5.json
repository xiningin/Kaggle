{"cell_type":{"3d490a16":"code","f88bf9fc":"code","25568ae6":"code","c13eae9e":"code","fc8251f5":"code","9bb947ad":"code","a72215b9":"code","ecbfd870":"code","9958c2de":"code","ce7b4a7e":"code","6a2d8850":"code","36cb17ba":"code","d8681324":"code","b12a6724":"code","3f42432c":"code","311ae5a5":"code","197b39c2":"code","0073f8a3":"code","0f56105f":"code","1d6ec76b":"code","17fc19b1":"code","07d2a396":"code","1a90dad3":"code","9467ecc7":"code","277e25e8":"code","cbf37a6a":"code","f1826746":"code","b77f9ddb":"code","5bb9ca17":"code","f1de19a2":"code","d1848be8":"code","592f9d04":"code","8bf74b71":"code","4eaf24ca":"code","dd1ffac7":"code","e3a5bc20":"code","1bbfdc96":"code","806716d5":"code","58e9eab3":"code","1e5a9601":"code","254ef6a3":"code","551e816c":"code","36036afb":"code","de178acf":"code","cd7183b8":"code","4d583d5e":"code","123d4e79":"code","599f10d0":"code","c7b7849e":"code","71389813":"code","c7312479":"code","b70cc7c7":"code","90466f4c":"code","a857af8a":"code","c50fc94f":"code","5547668a":"code","552fd88e":"code","42696b76":"code","da372b0d":"code","172feece":"code","0af63d98":"code","b2696ca6":"code","b568f821":"code","5ad0a113":"code","d154b892":"code","57f7301d":"code","efb5e49a":"code","3caa42e5":"code","11f4bdfd":"code","38e148e1":"code","1a6195d9":"code","01ec361e":"code","e62c55fa":"code","e1987630":"code","c6b0c007":"code","8af59cd4":"code","418ad0a6":"code","6cc460c8":"code","efb27d61":"code","621f1281":"code","510b1aba":"code","5a726646":"code","daeaf22f":"code","2f34e80f":"code","093e2f7e":"code","87e9fd1e":"code","6b0687b2":"code","9baa7352":"code","25cfdf86":"code","ba5f29bd":"code","93ba8265":"code","544254c5":"code","213724e7":"code","e4dd5961":"markdown","566c9569":"markdown","bbb45728":"markdown","18d10c01":"markdown","c56fa634":"markdown","0fab4934":"markdown","3637ca5b":"markdown","32e61a4c":"markdown","39cdffb6":"markdown","801cc4c3":"markdown","10740ee3":"markdown","eb8256c4":"markdown","2abe41aa":"markdown","9da258d2":"markdown","c879d6d7":"markdown","5e01ea06":"markdown","742d06c8":"markdown","55f3d58b":"markdown","5b6bc82f":"markdown","6b7fe279":"markdown","2dbfab10":"markdown","f9ccb944":"markdown","660f2d71":"markdown","5dcc9f13":"markdown","a4f4b03f":"markdown","cd51d327":"markdown","225446e2":"markdown","b64a1b2d":"markdown","a98ec138":"markdown","0550525f":"markdown","930fb145":"markdown","39599b98":"markdown","b8a519ba":"markdown","21375d33":"markdown","e439faef":"markdown","9dda6ee5":"markdown","8dc0efd9":"markdown","f7f7f38a":"markdown","d7dbf148":"markdown","ef641985":"markdown","e69bf158":"markdown","cb6b58e1":"markdown","55e535b9":"markdown","e39e0c8a":"markdown","a94ff80b":"markdown"},"source":{"3d490a16":"#libraries\nimport numpy as np \nimport pandas as pd \nimport os\nimport json\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')\nimport lightgbm as lgb\nimport xgboost as xgb\nimport time\nimport datetime\nfrom PIL import Image\nfrom wordcloud import WordCloud\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nimport gc\nfrom catboost import CatBoostClassifier\nfrom tqdm import tqdm_notebook\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom functools import partial\npd.set_option('max_colwidth', 500)\npd.set_option('max_columns', 500)\npd.set_option('max_rows', 100)\nimport os\nimport scipy as sp\nfrom math import sqrt\nfrom collections import Counter\nfrom sklearn.metrics import confusion_matrix as sk_cmatrix\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.tokenize import TweetTokenizer\nfrom sklearn.ensemble import RandomForestClassifier\nimport langdetect\nimport eli5\nfrom IPython.display import display \n\nfrom sklearn.metrics import cohen_kappa_score\ndef kappa(y_true, y_pred):\n    return cohen_kappa_score(y_true, y_pred, weights='quadratic')","f88bf9fc":"breeds = pd.read_csv('..\/input\/petfinder-adoption-prediction\/breed_labels.csv')\ncolors = pd.read_csv('..\/input\/petfinder-adoption-prediction\/color_labels.csv')\nstates = pd.read_csv('..\/input\/petfinder-adoption-prediction\/state_labels.csv')\n\ntrain = pd.read_csv('..\/input\/petfinder-adoption-prediction\/train\/train.csv')\ntest = pd.read_csv('..\/input\/petfinder-adoption-prediction\/test\/test.csv')\nsub = pd.read_csv('..\/input\/petfinder-adoption-prediction\/test\/sample_submission.csv')\n\ntrain['dataset_type'] = 'train'\ntest['dataset_type'] = 'test'\nall_data = pd.concat([train, test])","25568ae6":"train.drop('Description', axis=1).head(10)","c13eae9e":"test.drop('Description', axis=1).head(10)","fc8251f5":"train.info()","9bb947ad":"test.info()","a72215b9":"print(colors.shape)\ncolors","ecbfd870":"print(breeds.shape)\nbreeds.head()","9958c2de":"print(states.shape)\nstates.head()","ce7b4a7e":"def plot_target(x, data, hue, title, alldata = False): \n# Plot count and rate in dataset\n    fig, axes = plt.subplots(1, 2, sharex=True, sharey=True, figsize=(22, 8))\n\n    # Plot count number of target in dataset\n    g = sns.countplot(x=x, data=data, hue = hue, ax=axes[0]);\n    g.set_title(f'Count number of {title}');\n    g.set_xlabel(f'{title} Type')\n    ax_g=g.axes\n    for p in ax_g.patches:\n        ax_g.annotate(f'{p.get_height()}',\n                    xy=(p.get_x() + p.get_width() \/ 2, p.get_height()),\n                    xytext=(0, 3),  \n                    textcoords=\"offset points\",\n                    color = 'black',\n                    ha='center', va='bottom')\n    \n    # Plot rate of target in dataset    \n    k = sns.countplot(x=x, data=data,hue = hue, ax=axes[1]);\n    k.set_title(f'Rate of {title}');\n    k.set_xlabel(f'{title} Type')\n    k.set_ylabel('Rate')\n    ax_k=k.axes\n    \n    if alldata == True:\n        # Annotate train set and test set seperately\n        i = 0\n        for p in ax_k.patches:\n            y_value = p.get_height()\n            if i%2 == 0:\n                y_value = y_value\/train.shape[0]*100\n            else:\n                y_value = y_value\/test.shape[0]*100   \n            ax_k.annotate(f\"{y_value:.2f}%\", \n                        xy= (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                        xytext=(0, 3),  \n                        textcoords=\"offset points\",\n                        color = 'black',\n                        ha='center', va='bottom')\n            i += 1\n    \n    if alldata == False:\n        for p in ax_k.patches:\n            y_value = p.get_height() * 100 \/ data.shape[0]\n            ax_k.annotate(f\"{y_value:.2f}%\", \n                        xy= (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                        xytext=(0, 3),  \n                        textcoords=\"offset points\",\n                        color = 'black',\n                        ha='center', va='bottom')","6a2d8850":"plot_target(x='AdoptionSpeed', data=all_data.loc[all_data['dataset_type'] == 'train'], hue = None,title='Adoption Speed')","36cb17ba":"# Change data type to dog, cat\nall_data['Type'] = all_data['Type'].apply(lambda x: 'Dog' if x == 1 else 'Cat')","d8681324":"plot_target(x='dataset_type', data=all_data, hue = 'Type',title='Cat and Dog', alldata= True)","b12a6724":"plot_target(x='Type', data=all_data.loc[all_data['dataset_type'] == 'train'],hue = \"AdoptionSpeed\",title='Cat and Dog')","3f42432c":"# Visualize dog and cat in all train data\nfig, axes = plt.subplots(1, 2, sharex=True, sharey=True, figsize=(22, 8))\n\n# Plot number of cat and dog in traing set\ng = sns.countplot(x='Type', data=all_data.loc[all_data['dataset_type'] == 'train'], hue='AdoptionSpeed', ax=axes[0]);\ng.set_title('Number of cats and dogs adoption speed in train data');\nax_g=g.axes\nfor p in ax_g.patches:\n    ax_g.annotate(f'{p.get_height()}',\n                    xy=(p.get_x() + p.get_width() \/ 2, p.get_height()),\n                    xytext=(0, 3),  \n                    textcoords=\"offset points\",\n                    color = 'black',\n                    ha='center', va='bottom')\n\n# Plot rate of cat and dog in training set\nk = sns.countplot(x='Type', data=all_data.loc[all_data['dataset_type'] == 'train'], hue='AdoptionSpeed', ax=axes[1]);\nk.set_title('Rate [%] cats and dogs adoption speed in train data')\nk.set_ylabel('rate')\nax_k=k.axes\ni=0\nfor p in ax_k.patches:\n    y_value = p.get_height()\n    if i%2 == 0:\n        y_value = y_value\/train.loc[train['Type']==2].shape[0]*100\n    else:\n        y_value = y_value\/train.loc[train['Type']==1].shape[0]*100 \n    ax_k.annotate(\"{:.2f}%\".format(y_value), \n                xy= (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                xytext=(0, 3),  \n                textcoords=\"offset points\",\n                color = 'black',\n                ha='center', va='bottom')\n    i +=1","311ae5a5":"fig, ax = plt.subplots(figsize = (22, 8))\nplt.subplot(1, 2, 1)\ntext_cat = ' '.join(all_data.loc[all_data['Type'] == 'Cat', 'Name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white',\n                      width=1200, height=1000).generate(text_cat)\nplt.imshow(wordcloud)\nplt.title('Top cat names')\nplt.axis(\"off\")\n\nplt.subplot(1, 2, 2)\ntext_dog = ' '.join(all_data.loc[all_data['Type'] == 'Dog', 'Name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white',\n                      width=1200, height=1000).generate(text_dog)\nplt.imshow(wordcloud)\nplt.title('Top dog names')\nplt.axis(\"off\")\n\nplt.show()","197b39c2":"train['Name'] = train['Name'].fillna('Unnamed')\ntest['Name'] = test['Name'].fillna('Unnamed')\nall_data['Name'] = all_data['Name'].fillna('Unnamed')\n\ntrain['No_name'] = 0\ntrain.loc[train['Name'] == 'Unnamed', 'No_name'] = 1\ntest['No_name'] = 0\ntest.loc[test['Name'] == 'Unnamed', 'No_name'] = 1\nall_data['No_name'] = 0\nall_data.loc[all_data['Name'] == 'Unnamed', 'No_name'] = 1\n\nprint(f\"Rate of unnamed pets in train data: {train['No_name'].sum() * 100 \/ train['No_name'].shape[0]:.4f}%.\")\nprint(f\"Rate of unnamed pets in test data: {test['No_name'].sum() * 100 \/ test['No_name'].shape[0]:.4f}%.\")","0073f8a3":"pd.crosstab(train['No_name'], train['AdoptionSpeed'], normalize='index')","0f56105f":"fig, ax = plt.subplots(figsize = (22, 8))\nplt.subplot(1, 2, 1)\nplt.title('Distribution of pets age');\ntrain['Age'].plot('hist', label='train');\ntest['Age'].plot('hist', label='test');\nplt.legend()\nplt.xlabel('Days');\n\nplt.subplot(1, 2, 2)\nplt.title('Distribution of pets age (log)');\nnp.log1p(train['Age']).plot('hist', label='train');\nnp.log1p(test['Age']).plot('hist', label='test');\nplt.legend()\nplt.xlabel('Log(days)');","1d6ec76b":"plt.figure(figsize=(22, 8));\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and age');","17fc19b1":"data = []\nfor a in range(5):\n    df = train.loc[train['AdoptionSpeed'] == a]\n\n    data.append(go.Scatter(\n        x = df['Age'].value_counts().sort_index().index,\n        y = df['Age'].value_counts().sort_index().values,\n        name = str(a)\n    ))\n    \nlayout = go.Layout(dict(title = \"AdoptionSpeed trends by Age\",\n                  xaxis = dict(title = 'Age (days)'),\n                  yaxis = dict(title = 'Counts'),\n                  )\n                  )\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","07d2a396":"train['Pure_breed'] = 0\ntrain.loc[train['Breed2'] == 0, 'Pure_breed'] = 1\ntest['Pure_breed'] = 0\ntest.loc[test['Breed2'] == 0, 'Pure_breed'] = 1\nall_data['Pure_breed'] = 0\nall_data.loc[all_data['Breed2'] == 0, 'Pure_breed'] = 1\n\nprint(f\"Rate of pure breed pets in train data: {train['Pure_breed'].sum() * 100 \/ train['Pure_breed'].shape[0]:.4f}%.\")\nprint(f\"Rate of pure breed pets in test data: {test['Pure_breed'].sum() * 100 \/ test['Pure_breed'].shape[0]:.4f}%.\")","1a90dad3":"plot_target(x='Pure_breed', data=all_data.loc[all_data['dataset_type'] == 'train'],hue = \"AdoptionSpeed\",title='Pure_breed vs AdoptionSpeed')","9467ecc7":"plot_target(x='dataset_type', data=all_data,hue = \"Pure_breed\",title='Pure_breed', alldata=True)","277e25e8":"plot_target(x='Pure_breed', data=train.loc[train['Type'] == 1],hue = \"AdoptionSpeed\",title='pure_breed for dog')","cbf37a6a":"plot_target(x='Pure_breed', data=train.loc[train['Type'] == 2],hue = \"AdoptionSpeed\",title='pure_breed for cat')","f1826746":"breeds_dict = {k: v for k, v in zip(breeds['BreedID'], breeds['BreedName'])}","b77f9ddb":"train['Breed1_name'] = train['Breed1'].apply(lambda x: '_'.join(breeds_dict[x].split()) if x in breeds_dict else 'Unknown')\ntrain['Breed2_name'] = train['Breed2'].apply(lambda x: '_'.join(breeds_dict[x]) if x in breeds_dict else '-')\n\ntest['Breed1_name'] = test['Breed1'].apply(lambda x: '_'.join(breeds_dict[x].split()) if x in breeds_dict else 'Unknown')\ntest['Breed2_name'] = test['Breed2'].apply(lambda x: '_'.join(breeds_dict[x].split()) if x in breeds_dict else '-')\n\nall_data['Breed1_name'] = all_data['Breed1'].apply(lambda x: '_'.join(breeds_dict[x].split()) if x in breeds_dict else 'Unknown')\nall_data['Breed2_name'] = all_data['Breed2'].apply(lambda x: '_'.join(breeds_dict[x].split()) if x in breeds_dict else '-')","5bb9ca17":"fig, ax = plt.subplots(figsize = (20, 18))\nplt.subplot(2, 2, 1)\ntext_cat1 = ' '.join(all_data.loc[all_data['Type'] == 'Cat', 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 2)\ntext_dog1 = ' '.join(all_data.loc[all_data['Type'] == 'Dog', 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text_dog1)\nplt.imshow(wordcloud)\nplt.title('Top dog breed1')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 3)\ntext_cat2 = ' '.join(all_data.loc[all_data['Type'] == 'Cat', 'Breed2_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text_cat2)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 4)\ntext_dog2 = ' '.join(all_data.loc[all_data['Type'] == 'Dog', 'Breed2_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text_dog2)\nplt.imshow(wordcloud)\nplt.title('Top dog breed2')\nplt.axis(\"off\")\nplt.show()","f1de19a2":"(all_data['Breed1_name'] + '__' + all_data['Breed2_name']).value_counts().head(15)","d1848be8":"def plot_overview(x,data,hue,title):\n    plot_target(x=x, data=data, hue = hue, title = title)\n    plot_target(x='dataset_type', data=all_data ,hue = x,title='dataset_type', alldata= True)","592f9d04":"plot_overview(x='Gender', data=train,hue = \"AdoptionSpeed\",title='Gender')","8bf74b71":"sns.factorplot('Type', col='Gender', data=all_data, kind='count', hue='dataset_type');\nplt.subplots_adjust(top=.8)\nplt.suptitle('Count of cats and dogs in train and test set by gender');","4eaf24ca":"colors_dict = {k: v for k, v in zip(colors['ColorID'], colors['ColorName'])}\ntrain['Color1_name'] = train['Color1'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\ntrain['Color2_name'] = train['Color2'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\ntrain['Color3_name'] = train['Color3'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\n\ntest['Color1_name'] = test['Color1'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\ntest['Color2_name'] = test['Color2'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\ntest['Color3_name'] = test['Color3'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\n\nall_data['Color1_name'] = all_data['Color1'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\nall_data['Color2_name'] = all_data['Color2'].apply(lambda x: colors_dict[x] if x in colors_dict else '')\nall_data['Color3_name'] = all_data['Color3'].apply(lambda x: colors_dict[x] if x in colors_dict else '')","dd1ffac7":"def make_factor_plot(df, x, col, title, hue=None, ann=True, col_wrap=4):\n    \"\"\"\n    Plotting countplot.\n    Making annotations is a bit more complicated, because we need to iterate over axes.\n    \"\"\"\n    if hue:\n        g = sns.factorplot(col, col=x, data=df, kind='count', col_wrap=col_wrap, hue=hue);\n    else:\n        g = sns.factorplot(col, col=x, data=df, kind='count', col_wrap=col_wrap);\n    plt.subplots_adjust(top=0.9);\n    plt.suptitle(title);\n    ax = g.axes\n    if ann:\n        for a in ax:\n            for p in a.patches:\n                a.annotate(p.get_height(), (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                     ha='center', va='center', fontsize=11, rotation=0, xytext=(0, 10),\n                     textcoords='offset points') ","e3a5bc20":"sns.factorplot('dataset_type', col='Type', data=all_data, kind=\"count\", hue='Color1_name',palette=['Black', 'Brown', '#FFFDD0', 'Gray', 'Gold', 'White', 'Yellow'],size=6);\nplt.subplots_adjust(top=0.9)\nplt.suptitle('Counts of pets in datasets by main color');","1bbfdc96":" make_factor_plot(df=train, x='Color1_name', col='AdoptionSpeed', title='Counts of pets by main color and Adoption Speed')","806716d5":"train['full_color'] = (train['Color1_name'] + '__' + train['Color2_name'] + '__' + train['Color3_name']).str.replace('__', '')\ntest['full_color'] = (test['Color1_name'] + '__' + test['Color2_name'] + '__' + test['Color3_name']).str.replace('__', '')\nall_data['full_color'] = (all_data['Color1_name'] + '__' + all_data['Color2_name'] + '__' + all_data['Color3_name']).str.replace('__', '')\n\nmake_factor_plot(df=train.loc[train['full_color'].isin(list(train['full_color'].value_counts().index)[:12])], x='full_color', col='AdoptionSpeed', title='Counts of pets by color and Adoption Speed')","58e9eab3":"gender_dict = {1: 'Male', 2: 'Female', 3: 'Mixed'}\nfor i in all_data['Type'].unique():\n    for j in all_data['Gender'].unique():\n        df = all_data.loc[(all_data['Type'] == i) & (all_data['Gender'] == j)]\n        top_colors = list(df['full_color'].value_counts().index)[:5]\n        j = gender_dict[j]\n        print(f\"Most popular colors of {j} {i}s: {' '.join(top_colors)}\")","1e5a9601":"plot_overview(x='MaturitySize', data=train,hue = \"AdoptionSpeed\",title='MaturitySize')","254ef6a3":"make_factor_plot(df=all_data, x='MaturitySize', col='Type', title='Count of cats and dogs in train and test set by MaturitySize', hue='dataset_type', ann=True)","551e816c":"images = [i.split('-')[0] for i in os.listdir('..\/input\/petfinder-adoption-prediction\/train_images\/')]\nsize_dict = {1: 'Small', 2: 'Medium', 3: 'Large', 4: 'Extra Large'}\nfor t in all_data['Type'].unique():\n    for m in all_data['MaturitySize'].unique():\n        df = all_data.loc[(all_data['Type'] == t) & (all_data['MaturitySize'] == m)]\n        top_breeds = list(df['Breed1_name'].value_counts().index)[:5]\n        m = size_dict[m]\n        print(f\"Most common Breeds of {m} {t}s:\")\n        \n        fig = plt.figure(figsize=(25, 4))\n        \n        for i, breed in enumerate(top_breeds):\n            # excluding pets without pictures\n            b_df = df.loc[(df['Breed1_name'] == breed) & (df['PetID'].isin(images)), 'PetID']\n            if len(b_df) > 1:\n                pet_id = b_df.values[1]\n            else:\n                pet_id = b_df.values[0]\n            ax = fig.add_subplot(1, 5, i+1, xticks=[], yticks=[])\n\n            im = Image.open(\"..\/input\/petfinder-adoption-prediction\/train_images\/\" + pet_id + '-1.jpg')\n            plt.imshow(im)\n            ax.set_title(f'Breed: {breed}')\n        plt.show();","36036afb":"plot_overview(x='FurLength', data=train,hue = \"AdoptionSpeed\",title='FurLength')","de178acf":"fig, ax = plt.subplots(figsize = (20, 18))\nplt.subplot(2, 2, 1)\ntext_cat1 = ' '.join(all_data.loc[(all_data['FurLength'] == 1) & (all_data['Type'] == 'Cat'), 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(text_cat1)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1 with short fur')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 2)\ntext_dog1 = ' '.join(all_data.loc[(all_data['FurLength'] == 1) & (all_data['Type'] == 'Dog'), 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(text_dog1)\nplt.imshow(wordcloud)\nplt.title('Top dog breed1 with short fur')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 3)\ntext_cat2 = ' '.join(all_data.loc[(all_data['FurLength'] == 2) & (all_data['Type'] == 'Cat'), 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(text_cat2)\nplt.imshow(wordcloud)\nplt.title('Top cat breed1 with medium fur')\nplt.axis(\"off\")\n\nplt.subplot(2, 2, 4)\ntext_dog2 = ' '.join(all_data.loc[(all_data['FurLength'] == 2) & (all_data['Type'] == 'Dog'), 'Breed1_name'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1200, height=1000).generate(text_dog2)\nplt.imshow(wordcloud)\nplt.title('Top dog breed2 with medium fur')\nplt.axis(\"off\")\nplt.show()","cd7183b8":"c = 0\nstrange_pets = []\nfor i, row in all_data[all_data['Breed1_name'].str.contains('air')].iterrows():\n    if 'Short' in row['Breed1_name'] and row['FurLength'] == 1:\n        pass\n    elif 'Medium' in row['Breed1_name'] and row['FurLength'] == 2:\n        pass\n    elif 'Long' in row['Breed1_name'] and row['FurLength'] == 3:\n        pass\n    else:\n        c += 1\n        strange_pets.append((row['PetID'], row['Breed1_name'], row['FurLength']))\n        \nprint(f\"There are {c} pets whose breed and fur length don't match\")","4d583d5e":"strange_pets = [p for p in strange_pets if p[0] in images]\nfig = plt.figure(figsize=(25, 12))\nfur_dict = {1: 'Short', 2: 'Medium', 3: 'long'}\nfor i, s in enumerate(random.sample(strange_pets, 12)):\n    ax = fig.add_subplot(3, 4, i+1, xticks=[], yticks=[])\n\n    im = Image.open(\"..\/input\/petfinder-adoption-prediction\/train_images\/\" + s[0] + '-1.jpg')\n    plt.imshow(im)\n    ax.set_title(f'Breed: {s[1]} \\n Fur length: {fur_dict[s[2]]}')\nplt.show();","123d4e79":"plot_target(data=train, x='Vaccinated', title='Vaccinated', hue='AdoptionSpeed')\nplt.xticks([0, 1, 2], ['Yes', 'No', 'Not sure']);\nplt.title('AdoptionSpeed and Vaccinated');\n\nplot_target(data=train, x='Sterilized', title='Sterilized', hue='AdoptionSpeed')\nplt.xticks([0, 1, 2], ['Yes', 'No', 'Not sure']);\nplt.title('AdoptionSpeed and Sterilized');\n\nplot_target(data=train, x='Health', title='Health', hue='AdoptionSpeed')\nplt.xticks([0, 1, 2], ['Healthy', 'Minor Injury', 'Serious Injury']);\nplt.title('AdoptionSpeed and Health');\n","599f10d0":"train['health'] = train['Vaccinated'].astype(str) + '_' + train['Dewormed'].astype(str) + '_' + train['Sterilized'].astype(str) + '_' + train['Health'].astype(str)\ntest['health'] = test['Vaccinated'].astype(str) + '_' + test['Dewormed'].astype(str) + '_' + test['Sterilized'].astype(str) + '_' + test['Health'].astype(str)\n\n\nmake_factor_plot(df=train.loc[train['health'].isin(list(train.health.value_counts().index[:5]))], x='health', col='AdoptionSpeed', title='Counts of pets by main health conditions and Adoption Speed')","c7b7849e":"plt.figure(figsize=(20, 16))\nplt.subplot(3, 2, 1)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", data=train);\nplt.title('Age distribution by Age');\nplt.subplot(3, 2, 3)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Vaccinated\", data=train);\nplt.title('Age distribution by Age and Vaccinated');\nplt.subplot(3, 2, 4)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Dewormed\", data=train);\nplt.title('Age distribution by Age and Dewormed');\nplt.subplot(3, 2, 5)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Sterilized\", data=train);\nplt.title('Age distribution by Age and Sterilized');\nplt.subplot(3, 2, 6)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Age\", hue=\"Health\", data=train);\nplt.title('Age distribution by Age and Health');","71389813":"train['Free'] = train['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\ntest['Free'] = test['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\nall_data['Free'] = all_data['Fee'].apply(lambda x: 'Free' if x == 0 else 'Not Free')\nplot_overview(x='Free', title='Number of pets by Free in train and test data', hue = 'AdoptionSpeed', data = train)\nplot_target(x='Free', title = 'Dog', data= train.loc[train['Type']==1], hue = 'AdoptionSpeed')\nplot_target(x='Free', title = 'Cat', data= train.loc[train['Type']==2], hue = 'AdoptionSpeed')","c7312479":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nplt.hist(train.loc[train['Fee'] < 400, 'Fee']);\nplt.title('Distribution of fees lower than 400');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"Fee\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and Fee');","b70cc7c7":"plt.figure(figsize=(16, 10));\nsns.scatterplot(x=\"Fee\", y=\"Quantity\", hue=\"Type\",data=all_data);\nplt.title('Quantity of pets and Fee');","90466f4c":"states_dict = {k: v for k, v in zip(states['StateID'], states['StateName'])}\ntrain['State_name'] = train['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')\ntest['State_name'] = test['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')\nall_data['State_name'] = all_data['State'].apply(lambda x: '_'.join(states_dict[x].split()) if x in states_dict else 'Unknown')","a857af8a":"all_data['State_name'].value_counts(normalize=True).head()","c50fc94f":"make_factor_plot(df=train.loc[train['State_name'].isin(list(train.State_name.value_counts().index[:3]))], x='State_name', col='AdoptionSpeed', title='Counts of pets by states and Adoption Speed')","5547668a":"all_data['RescuerID'].value_counts().head()","552fd88e":"make_factor_plot(df=train.loc[train['RescuerID'].isin(list(train.RescuerID.value_counts().index[:5]))], x='RescuerID', col='AdoptionSpeed', title='Counts of pets by rescuers and Adoption Speed', col_wrap=5)","42696b76":"train['VideoAmt'].value_counts()","da372b0d":"print(F'Maximum amount of photos in {train[\"PhotoAmt\"].max()}')\ntrain['PhotoAmt'].value_counts().head()","172feece":"make_factor_plot(df=train.loc[train['PhotoAmt'].isin(list(train.PhotoAmt.value_counts().index[:5]))], x='PhotoAmt', col='AdoptionSpeed', title='Counts of pets by PhotoAmt and Adoption Speed', col_wrap=5)","0af63d98":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nplt.hist(train['PhotoAmt']);\nplt.title('Distribution of PhotoAmt');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"PhotoAmt\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and PhotoAmt');","b2696ca6":"fig, ax = plt.subplots(figsize = (12, 8))\ntext_cat = ' '.join(all_data['Description'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white',\n                      width=1200, height=1000).generate(text_cat)\nplt.imshow(wordcloud)\nplt.title('Top words in description');\nplt.axis(\"off\");","b568f821":"tokenizer = TweetTokenizer()\nvectorizer = TfidfVectorizer(ngram_range=(1, 2), tokenizer=tokenizer.tokenize)\n\nvectorizer.fit(all_data['Description'].fillna('').values)\nX_train = vectorizer.transform(train['Description'].fillna(''))\n\nrf = RandomForestClassifier(n_estimators=20)\nrf.fit(X_train, train['AdoptionSpeed'])","5ad0a113":"for i in range(5):\n    print(f'Example of Adoption speed {i}')\n    text = train.loc[train['AdoptionSpeed'] == i, 'Description'].values[0]\n    print(text)\n    display(eli5.show_prediction(rf, doc=text, vec=vectorizer, top=10))","d154b892":"train['Description'] = train['Description'].fillna('')\ntest['Description'] = test['Description'].fillna('')\nall_data['Description'] = all_data['Description'].fillna('')\n\ntrain['desc_length'] = train['Description'].apply(lambda x: len(x))\ntrain['desc_words'] = train['Description'].apply(lambda x: len(x.split()))\n\ntest['desc_length'] = test['Description'].apply(lambda x: len(x))\ntest['desc_words'] = test['Description'].apply(lambda x: len(x.split()))\n\nall_data['desc_length'] = all_data['Description'].apply(lambda x: len(x))\nall_data['desc_words'] = all_data['Description'].apply(lambda x: len(x.split()))\n\ntrain['averate_word_length'] = train['desc_length'] \/ train['desc_words']\ntest['averate_word_length'] = test['desc_length'] \/ test['desc_words']\nall_data['averate_word_length'] = all_data['desc_length'] \/ all_data['desc_words']","57f7301d":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"desc_length\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and description length');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"desc_words\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and count of words in description');","efb5e49a":"sentiment_dict = {}\nfor filename in os.listdir('..\/input\/petfinder-adoption-prediction\/train_sentiment\/'):\n    with open('..\/input\/petfinder-adoption-prediction\/train_sentiment\/' + filename, 'r') as f:\n        sentiment = json.load(f)\n    pet_id = filename.split('.')[0]\n    sentiment_dict[pet_id] = {}\n    sentiment_dict[pet_id]['magnitude'] = sentiment['documentSentiment']['magnitude']\n    sentiment_dict[pet_id]['score'] = sentiment['documentSentiment']['score']\n    sentiment_dict[pet_id]['language'] = sentiment['language']\n\nfor filename in os.listdir('..\/input\/petfinder-adoption-prediction\/test_sentiment\/'):\n    with open('..\/input\/petfinder-adoption-prediction\/test_sentiment\/' + filename, 'r') as f:\n        sentiment = json.load(f)\n    pet_id = filename.split('.')[0]\n    sentiment_dict[pet_id] = {}\n    sentiment_dict[pet_id]['magnitude'] = sentiment['documentSentiment']['magnitude']\n    sentiment_dict[pet_id]['score'] = sentiment['documentSentiment']['score']\n    sentiment_dict[pet_id]['language'] = sentiment['language']","3caa42e5":"train['lang'] = train['PetID'].apply(lambda x: sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\ntrain['magnitude'] = train['PetID'].apply(lambda x: sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\ntrain['score'] = train['PetID'].apply(lambda x: sentiment_dict[x]['score'] if x in sentiment_dict else 0)\n\ntest['lang'] = test['PetID'].apply(lambda x: sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\ntest['magnitude'] = test['PetID'].apply(lambda x: sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\ntest['score'] = test['PetID'].apply(lambda x: sentiment_dict[x]['score'] if x in sentiment_dict else 0)\n\nall_data['lang'] = all_data['PetID'].apply(lambda x: sentiment_dict[x]['language'] if x in sentiment_dict else 'no')\nall_data['magnitude'] = all_data['PetID'].apply(lambda x: sentiment_dict[x]['magnitude'] if x in sentiment_dict else 0)\nall_data['score'] = all_data['PetID'].apply(lambda x: sentiment_dict[x]['score'] if x in sentiment_dict else 0)","11f4bdfd":"plot_overview(x='lang', title='lang', hue = 'AdoptionSpeed', data = train)\nplot_target(x='lang', title = 'Dog', data= train.loc[train['Type']==1], hue = 'AdoptionSpeed')\nplot_target(x='lang', title = 'Cat', data= train.loc[train['Type']==2], hue = 'AdoptionSpeed')","38e148e1":"plt.figure(figsize=(16, 6));\nplt.subplot(1, 2, 1)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"score\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and score');\n\nplt.subplot(1, 2, 2)\nsns.violinplot(x=\"AdoptionSpeed\", y=\"magnitude\", hue=\"Type\", data=train);\nplt.title('AdoptionSpeed by Type and magnitude of sentiment');","1a6195d9":"cols_to_use = ['Type', 'Age', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'Quantity', 'Fee', 'State', 'RescuerID', 'health', 'Free', 'score',\n       'VideoAmt', 'PhotoAmt', 'AdoptionSpeed', 'No_name', 'Pure_breed', 'desc_length', 'desc_words', 'averate_word_length', 'magnitude']\ntrain = train[[col for col in cols_to_use if col in train.columns]]\ntest = test[[col for col in cols_to_use if col in test.columns]]","01ec361e":"cat_cols = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State', 'RescuerID',\n       'No_name', 'Pure_breed', 'health', 'Free']\ncat_cols","e62c55fa":"more_cols = []\nfor col1 in cat_cols:\n    for col2 in cat_cols:\n        if col1 != col2 and col1 not in ['RescuerID', 'State'] and col2 not in ['RescuerID', 'State']:\n            train[col1 + '_' + col2] = train[col1].astype(str) + '_' + train[col2].astype(str)\n            test[col1 + '_' + col2] = test[col1].astype(str) + '_' + test[col2].astype(str)\n            more_cols.append(col1 + '_' + col2)\n            \ncat_cols = cat_cols + more_cols\ncat_cols","e1987630":"%%time\nindexer = {}\nfor col in cat_cols:\n    # print(col)\n    _, indexer[col] = pd.factorize(train[col].astype(str))\n    \nfor col in tqdm_notebook(cat_cols):\n    # print(col)\n    train[col] = indexer[col].get_indexer(train[col].astype(str))\n    test[col] = indexer[col].get_indexer(test[col].astype(str))","c6b0c007":"y = train['AdoptionSpeed']\ntrain = train.drop(['AdoptionSpeed'], axis=1)","8af59cd4":"test.shape","418ad0a6":"n_fold = 5\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=15)","6cc460c8":"def train_model(X=train, X_test=test, y=y, params=None, folds=folds, model_type='lgb', plot_feature_importance=False, averaging='usual', make_oof=False):\n    result_dict = {}\n    # Prepare data\n    if make_oof:\n        oof = np.zeros((len(X), 5))\n    prediction = np.zeros((len(X_test), 5))\n    scores = []\n    feature_importance = pd.DataFrame()\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X, y)):\n        gc.collect()\n        print('Fold', fold_n + 1, 'started at', time.ctime())\n        X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n        y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n        \n        # LightGBM model\n        if model_type == 'lgb':\n            train_data = lgb.Dataset(X_train, label=y_train, categorical_feature = cat_cols)\n            valid_data = lgb.Dataset(X_valid, label=y_valid, categorical_feature = cat_cols)\n            \n            model = lgb.train(params,\n                    train_data,\n                    num_boost_round=20000,\n                    valid_sets = [train_data, valid_data],\n                    verbose_eval=500,\n                    early_stopping_rounds = 200)\n\n            del train_data, valid_data\n            \n            y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n            del X_valid\n            gc.collect()\n            y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n            \n             # feature importance\n            fold_importance = pd.DataFrame()\n            fold_importance[\"feature\"] = X.columns\n            fold_importance[\"importance\"] = model.feature_importance()\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n        \n        # XGBoost model\n        if model_type == 'xgb':\n            train_data = xgb.DMatrix(data=X_train, label=y_train)\n            valid_data = xgb.DMatrix(data=X_valid, label=y_valid)\n\n            watchlist = [(train_data, 'train'), (valid_data, 'valid_data')]\n            model = xgb.train(dtrain=train_data, \n                              num_boost_round=20000, \n                              evals=watchlist, \n                              early_stopping_rounds=200, \n                              verbose_eval=500, \n                              params=params)\n            \n            y_pred_valid = model.predict(xgb.DMatrix(X_valid), ntree_limit=model.best_ntree_limit)\n            y_pred = model.predict(xgb.DMatrix(X_test), ntree_limit=model.best_ntree_limit)\n            \n            # feature importance\n            fold_importance = pd.DataFrame(list(model.get_fscore().items()),columns=['feature','importance'])\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n        \n        # CatBoost model\n        if model_type == 'cat':\n            model = CatBoostClassifier(iterations=20000,  loss_function='MultiClass',early_stopping_rounds = 200, **params)\n            model.fit(X_train, y_train, eval_set=(X_valid, y_valid), cat_features=[], use_best_model=True, verbose=False)\n\n            y_pred_valid = model.predict_proba(X_valid)\n            y_pred = model.predict_proba(X_test)\n        \n             # feature importance\n            fold_importance = model.get_feature_importance(prettified=True).rename(columns={'Feature Id': 'feature', 'Importances': 'importance'})\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n        \n        if make_oof:\n            oof[valid_index] = y_pred_valid\n            \n        scores.append(kappa(y_valid, y_pred_valid.argmax(1)))\n        print('Fold kappa:', kappa(y_valid, y_pred_valid.argmax(1)))\n        print('')\n        \n        if averaging == 'usual':\n            prediction += y_pred\n        elif averaging == 'rank':\n            prediction += pd.Series(y_pred).rank().values\n        \n       \n    prediction \/= n_fold\n    \n    print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\n    \n    if plot_feature_importance: \n                 \n        feature_importance[\"importance\"] \/= n_fold\n        cols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n             by=\"importance\", ascending=False)[:50].index\n\n        best_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\n        plt.figure(figsize=(16, 12));\n        sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\n        \n        if model_type == 'xgb':\n            plt.title('XGB Features (avg over folds)');\n        \n        if model_type == 'lgb':\n            plt.title('LGB Features (avg over folds)');\n        \n        if model_type == 'cat':\n            plt.title('CAT Features (avg over folds)');\n            \n        result_dict['feature_importance'] = feature_importance\n            \n    result_dict['prediction'] = prediction\n    if make_oof:\n        result_dict['oof'] = oof\n    \n    return result_dict, scores , best_features","efb27d61":"start = time.time()\nlgb_params = {'num_leaves': 512,\n        #  'min_data_in_leaf': 60,\n         'objective': 'multiclass',\n         'max_depth': -1,\n         'learning_rate': 0.01,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 3,\n         \"bagging_fraction\": 0.9,\n         \"bagging_seed\": 11,\n        #  \"lambda_l1\": 0.1,\n         # \"lambda_l2\": 0.1,\n         \"random_state\": 42,          \n         \"verbosity\": -1,\n         \"num_class\": 5}\nresult_dict_lgb, scores_lgb, best_features_lgb = train_model(X=train, X_test=test, y=y, params=lgb_params, model_type='lgb', plot_feature_importance=True, make_oof=True)\nend = time.time()\ntime_spend_lgb = end - start\nprint(f'Time spend: {time_spend_lgb}')","621f1281":"best_features_lgb_top = best_features_lgb.loc[best_features_lgb['fold'] == 5].sort_values(by=['importance'], ascending=False)[:5].drop(['fold','importance'], axis=1).reset_index(drop=True)\nbest_features_lgb_top['model'] = 'LightGBM'\nbest_features_lgb_top","510b1aba":"final_score_lgb = pd.DataFrame([[np.mean(scores_lgb),np.std(scores_lgb),'LightGBM',time_spend_lgb]], columns=['mean','std','model','time_spend'])\nfinal_score_lgb","5a726646":"start = time.time()\nxgb_params = {'eta': 0.01, 'max_depth': 9, 'subsample': 0.9, 'colsample_bytree': 0.9, \n          'objective': 'multi:softprob', 'eval_metric': 'merror', 'silent': True, 'nthread': 4, 'num_class': 5}\nresult_dict_xgb, scores_xgb, best_features_xgb= train_model(X=train, X_test=test, y=y,params=xgb_params, model_type='xgb',plot_feature_importance=True, make_oof=True)\nend = time.time()\ntime_spend_xgb = end - start\nprint(f'Time spend: {time_spend_xgb}')","daeaf22f":"best_features_xgb_top = best_features_xgb.loc[best_features_xgb['fold'] == 5].sort_values(by=['importance'], ascending=False)[:5].drop(['fold','importance'], axis=1).reset_index(drop=True)\nbest_features_xgb_top['model'] = 'XGBoost'\nbest_features_xgb_top","2f34e80f":"final_score_xgb = pd.DataFrame([[np.mean(scores_xgb),np.std(scores_xgb),'XGBoost',time_spend_xgb]], columns=['mean','std','model','time_spend'])\nfinal_score_xgb","093e2f7e":"start = time.time()\ncat_params = {'learning_rate':0.03}\nresult_dict_cat,scores_cat, best_features_cat = train_model(X=train, X_test=test, y=y, model_type='cat',params=cat_params,plot_feature_importance=True, make_oof=True)\nend = time.time()\ntime_spend_cat = end - start\nprint(f'Time spend: {time_spend_cat}')\n","87e9fd1e":"best_features_cat_top = best_features_cat.loc[best_features_cat['fold'] == 5].sort_values(by=['importance'], ascending=False)[:5].drop(['fold','importance'], axis=1).reset_index(drop=True)\nbest_features_cat_top['model'] = 'CatBoost'\nbest_features_cat_top","6b0687b2":"final_score_cat = pd.DataFrame([[np.mean(scores_cat),np.std(scores_cat),'CatBoost',time_spend_cat]], columns=['mean','std','model','time_spend'])\nfinal_score_cat","9baa7352":"feature_list = [best_features_cat_top, best_features_xgb_top, best_features_lgb_top] \nfeature_impotant = pd.concat(feature_list)\nfeature_impotant","25cfdf86":"score_list = [final_score_cat, final_score_lgb, final_score_xgb] \nfinal_score = pd.concat(score_list).sort_values(by='mean').reset_index(drop=True)\nfinal_score","ba5f29bd":"prediction_cat = result_dict_cat['prediction'].argmax(1)\nsubmission_cat = pd.DataFrame({'PetID': sub.PetID, 'AdoptionSpeed': [int(i) for i in prediction_lgb_cat]})\nsubmission_cat.head()","93ba8265":"prediction_lgb_cat = (result_dict_lgb['prediction'] + result_dict_cat['prediction']).argmax(1)\nsubmission_lgb_cat = pd.DataFrame({'PetID': sub.PetID, 'AdoptionSpeed': [int(i) for i in prediction_lgb_cat]})\nsubmission_lgb_cat.head()","544254c5":"prediction_all = (result_dict_lgb['prediction'] + result_dict_xgb['prediction'] + result_dict_cat['prediction']).argmax(1)\nsubmission_all = pd.DataFrame({'PetID': sub.PetID, 'AdoptionSpeed': [int(i) for i in prediction_all]})\nsubmission_all.head()\n","213724e7":"submission_lgb_cat.to_csv('submission.csv', index=False)","e4dd5961":"It seems that fees and pet quantity have inversely proportional relationship. The less pets, the higher is the fee. I suppose these single pets are better trained and prepared than most others.","566c9569":"### 1.12 Target: Rescuer\nWe have unique hashes for resquers.","bbb45728":"### For self comaprison the number of cat type and dog type in trainning set","18d10c01":"Well, English is the most common language by far, so language feature will hardly help.","c56fa634":"## 2.1 LightGBM","0fab4934":"Hm. In most cases there are no videos at all. Sometimes there is one video, more than one video is quite rare. We don't have videos and considering a huge disbalance in values I'm not sure this variable will be useful.","3637ca5b":"# 1.EDA","32e61a4c":"We can see that most pets are young - maybe after the birth. Also there a lot of pets with an age equal to multiples of 12 - I think than owners didn't bother with the exact age.","39cdffb6":"### 1.15 Target: Description\n\nDescription contains a lot of important information, let' analyze it!","801cc4c3":"Interestingly pets with short text in ads are adopted quickly. Or maybe longer descriptions mean more problems in the pets, therefore adoption speed is lower?","10740ee3":"Less than 10% of pets don't have names, but they have a higher possibility of not being adopted.","eb8256c4":"### 1.5 Target: Breeds","2abe41aa":"### 1.10 Target: Fee","9da258d2":"It seems that almost one thousand pets have mismatch in breeds and fur lengths. Let's see!","c879d6d7":"### 1.3 Target: Name","5e01ea06":"We can see that there are some differences based on color, but the number of pets in most colors isn't very high, so this could be due to randomness.","742d06c8":"Intetestingly top-2 and top-3 states have lower rates of adoption.","55f3d58b":"Some words\/phrases seem to be useful, but it seems that different adoption speed classes could have similar important words...","5b6bc82f":" ### * Count number of unnamed pets in all data set","6b7fe279":"Pets can have up to 30 photos! That's a lot! But I'm not convinced that amount of photoes has any real influence.","2dbfab10":"### 1.6 Target: Gender\n 1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets","f9ccb944":"Everybody lies!\n\nSometimes breed is more correct, sometimes fur length... I suppose we could create a feature showing whether breed and fur length match.","660f2d71":"There are too many similar general words like \"cat\". We need to go deeper.\n\nLet's use ELI5 library for prediction explanation. I'll fit a basic vectorizer on desctriptions and build a simple Random Forest model. Then we will look at words which caused certain labels to be predicted.\n","5dcc9f13":"## 2 Basic model\n\nThere are much more interesting things in the dataset and I'm going to explore them, but for now let's build a simple model as a baseline.","a4f4b03f":"* It is interesting that pets with high fee tend to be adopted quite fast! Maybe people prefer to pay for \"better\" pets: healthy, trained and so on;\n* Most pets are given for free and fees are usually lower than 100 $;\n* Fees for dogs tend to be higher, though these are rare cases anyway.","cd51d327":"It seems that most dogs aren't pure breeds, but mixed breeds! \n\nSometimes people write \"mixed breed\" in the first fiels, sometimes in both, and sometimes main breed is in the first field and is marked as mixed breed in the second field.\n\nI think we can create new features based on this information. ","225446e2":"Sadly I don't know anything about Malaysia\u2019s states, so I can only say that top three states account for ~90% of ads. Let's have a look at them.","b64a1b2d":" ## 1.1.Target: Adoption speed\n\n* 0 - Pet was adopted on the same day as it was listed.\n* 1 - Pet was adopted between 1 and 7 days (1st week) after being listed.\n* 2 - Pet was adopted between 8 and 30 days (1st month) after being listed.\n* 3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed.\n* 4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days). ","a98ec138":"## 2.2 XGBoost","0550525f":"It seems that female pets are adopted faster than male. Having no information about the gender really decreases chances.","930fb145":"## 2.3 CatBoost","39599b98":"### 1.11 Target: State","b8a519ba":"### 1.13 Target: VideoAmt","21375d33":"### 1.7 Target: Color","e439faef":"* Healthy, dewormed and non-sterilized pets tend to be adopted faster!\n* Completely healthy pets are... more likely to be not adopted! I suppose that means that a lot of people pay attention to other characteristics;\n* And healthy pets with no information (not sure value) also tend to be adopted less frequently. Maybe people prefer having information, even if it is negative;","9dda6ee5":"## 1.2 Target: Type\n* 1 - Dog\n* 2 - Cat","8dc0efd9":"### 1.8 Target: MatiritySize\nSize at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)","f7f7f38a":"### 1.14 Target: PhotoAmt","d7dbf148":"Wow! The resquer with the highest amount of resqued pets has the best adoption rate! On the other hand the third one has the worst rate ","ef641985":"Quite interesting:\n* We can see that maturity size isn't very important. Medium sized pets are most common and they have slightly more chances to be not adopted;\n* There are almost no Extra Large pets. I hope it means that their owners like them and there is no need for them to be adopted :)\n* I wanted to gave a look at different pets, so I showed examples of pictures of most common breeds for each maturity size of cats and dogs;\n* I think not all data is entirely correct: sometimes short haired cats have breed with \"medium hair\", not sure that all breeds are entirely correct. Some photoes have bad quality;","e69bf158":"### 1.8 FurLength\n\n (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)","cb6b58e1":"###  * Comparision adoption speed of dog and cat in training set ( test set doesn't exsit adoptionspeed column)","55e535b9":"### 1.9 Target: Health\n\nThere are four features showing health of the pets:\n\n* Vaccinated - Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)\n* Dewormed - Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)\n* Sterilized - Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)\n* Health - Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)\n\nI think that these features are very important - most people would prefer a healthy pet. While sterilization isn't the main concern, having healty and dewormed pet should have a great importance. Let's see whether I'm right!","e39e0c8a":"It seems that non-pure breed pets tend to be adopted more and faster, especially cats.\n\nLet's look at the breeds themselves","a94ff80b":"### 1.4 Target: Age"}}