{"cell_type":{"face493a":"code","1c5ea062":"code","8aacbadf":"code","8c52651c":"code","593b587f":"code","d9f691af":"code","14ebe299":"code","06fe078d":"code","07c697bd":"code","03b3df68":"code","c4611f08":"code","db22797e":"code","d4309f2d":"code","227d749c":"code","c7d72cc6":"code","39d61480":"code","ff4f7077":"code","080d3396":"code","a452a3d4":"code","81038563":"code","7abaa6b7":"code","a0af1ddc":"code","3c2a4603":"code","e56a195f":"code","32f73b28":"code","9a12ac0a":"code","48e8e3fd":"code","cfc1dad0":"code","2dd58145":"code","433bf766":"code","46aeecfe":"code","ef72cdca":"code","cc1b3800":"code","79dc3541":"code","03646bbf":"code","3b89966c":"code","60594733":"code","90ed3303":"code","c8f4f564":"code","9eab2c60":"code","90b364b3":"code","c9fe24de":"code","2ab52693":"code","eb0a1be3":"code","9b48e1c2":"code","94fd64ba":"code","0adbeb4b":"code","ddf53466":"code","40ea6c7e":"code","26a204f6":"code","a3076bd3":"code","100198df":"code","644939b1":"code","c2a4512b":"code","03c4bed5":"code","ee6a2847":"code","2ae5df0c":"markdown","8ab91a3e":"markdown","3096a92c":"markdown","5fb7135b":"markdown","ab861817":"markdown","2e54f755":"markdown","459f14fd":"markdown","96a0fb7a":"markdown","7e87afee":"markdown","f57d7782":"markdown","d9cd5a6e":"markdown","ca1546b9":"markdown","92a8ffca":"markdown","be5776a0":"markdown","32e40116":"markdown","548efe4d":"markdown","e10fe1f9":"markdown","12e17aac":"markdown","e3b850ce":"markdown","56b35c01":"markdown","6d5a03a0":"markdown","51cf0d33":"markdown","1d36bf00":"markdown","23a259c1":"markdown","484180ed":"markdown","562e7620":"markdown","31f76aa6":"markdown","7a9a836d":"markdown","59c0cdc6":"markdown","4e18038b":"markdown","cadb04bc":"markdown","d75ce300":"markdown","66501bcb":"markdown","fe6dcca0":"markdown","fcbd684d":"markdown"},"source":{"face493a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom operator import itemgetter\nimport plotly\n# connected=True means it will download the latest version of plotly javascript library.\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport scipy.stats as stats\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression","1c5ea062":"df = pd.read_csv('..\/input\/googleplaystore.csv')\ndf.head()","8aacbadf":"df.isna().sum()","8c52651c":"df.dropna(inplace=True)","593b587f":"CategoryVal = df[\"Category\"].unique()\nCategoryDict = {}\nfor i in range(len(CategoryVal)):\n    CategoryDict[CategoryVal[i]] = i\ndf[\"Category_id\"] = df[\"Category\"].map(CategoryDict).astype(int)\n\nsorted(CategoryDict.items(), key=itemgetter(1))","d9f691af":"def change_size(size):\n    if 'M' in size:\n        x = size[:-1]\n        x = float(x)*1048576\n        return(x)\n    elif 'k' in size:\n        x = size[:-1]\n        x = float(x)*1024\n        return(x)\n    else:\n        return None\n\ndf[\"Size\"] = df[\"Size\"].map(change_size)\ndf.Size.fillna(method = 'ffill', inplace = True)","14ebe299":"df['Installs'] = [(i[:-1].replace(',','')) for i in df['Installs']]\ndf.Installs = pd.to_numeric(df.Installs)","06fe078d":"RatingL = df['Content Rating'].unique()\nRatingDict = {}\nfor i in range(len(RatingL)):\n    RatingDict[RatingL[i]] = i\ndf['Content Rating Id'] = df['Content Rating'].map(RatingDict).astype(int)\n\nsorted(RatingDict.items(), key=itemgetter(1))","07c697bd":"GenresL = df['Genres'].unique()\nGenresDict = {}\nfor i in range(len(GenresL)):\n    GenresDict[GenresL[i]] = i\ndf['Genres_id'] = df['Genres'].map(GenresDict).astype(int)\n\nsorted(GenresDict.items(), key=itemgetter(1))","03b3df68":"def price_clean(price):\n    if price == '0':\n        return 0\n    else:\n        price = price[1:]\n        price = float(price)\n        return price\n\ndf['Price'] = df['Price'].map(price_clean).astype(float)","c4611f08":"df['Reviews'] = df['Reviews'].astype(int)","db22797e":"def type_cat(types):\n    if types == 'Free':\n        return 0\n    else:\n        return 1\n\ndf['Type'] = df['Type'].map(type_cat)","d4309f2d":"df.head()","227d749c":"plt.figure(figsize=(10,10))\ng = sns.countplot(y=\"Category\",data=df, palette = \"Set2\")\nplt.title('Number of apps in each category',size = 20);","c7d72cc6":"plt.figure(figsize=(10,10))\ng = sns.barplot(x=\"Installs\", y=\"Category\", data=df, palette = \"Set2\", capsize=.6)\nplt.title('Installations in each \u0441ategory',size = 20);","39d61480":"data = [go.Histogram(\n        x = df.Rating,\n        xbins = {'start': 1, 'size': 0.1, 'end' :5}\n)]\n\nprint('Average app rating = ', np.mean(df['Rating']))\nplotly.offline.iplot(data, filename='overall_rating_distribution')","ff4f7077":"f = stats.f_oneway(df.loc[df.Category == 'BUSINESS']['Rating'].dropna(), \n               df.loc[df.Category == 'FAMILY']['Rating'].dropna(),\n               df.loc[df.Category == 'GAME']['Rating'].dropna(),\n               df.loc[df.Category == 'PERSONALIZATION']['Rating'].dropna(),\n               df.loc[df.Category == 'LIFESTYLE']['Rating'].dropna(),\n               df.loc[df.Category == 'FINANCE']['Rating'].dropna(),\n               df.loc[df.Category == 'EDUCATION']['Rating'].dropna(),\n               df.loc[df.Category == 'MEDICAL']['Rating'].dropna(),\n               df.loc[df.Category == 'TOOLS']['Rating'].dropna(),\n               df.loc[df.Category == 'PRODUCTIVITY']['Rating'].dropna(),\n               df.loc[df.Category == 'COMMUNICATION']['Rating'].dropna()\n              )\n\nprint(f)\n\ngroups = df.groupby('Category').filter(lambda x: len(x) > 286).reset_index()\narray = groups['Rating'].hist(by=groups['Category'], sharex=True, figsize=(20,20))","080d3396":"plt.figure(figsize=(4,4))\ndf.Type.value_counts().plot(kind=\"pie\")\nprint(df.Type.value_counts())","a452a3d4":"paid_mean_price =  df[df['Type'] == 1].groupby('Category')['Price'].mean().sort_values(ascending=False)\npaid_mean_price\nplt.figure(figsize=(18,10))\nsns.barplot(x=paid_mean_price[:10].index, y=paid_mean_price[:10].get_values())","81038563":"paid_apps = df[df.Price>0]\np = sns.jointplot( \"Price\", \"Rating\", paid_apps)","7abaa6b7":"trace0 = go.Box(\n    y=np.log10(df['Installs'][df.Type==1]),\n    name = 'Paid',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n\n)\ntrace1 = go.Box(\n    y=np.log10(df['Installs'][df.Type==0]),\n    name = 'Free',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps Vs free apps\",\n    yaxis= {'title': 'Number of downloads (log-scaled)'}\n)\ndata = [trace0, trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})","a0af1ddc":"groups = df.groupby('Category').filter(lambda x: len(x) >= 50).reset_index()\n\n\nsns.set_style(\"darkgrid\")\nax = sns.jointplot(df['Size'], df['Rating'])","3c2a4603":"data = [{\n    #'x': type_groups.get_group(t)['Rating'], \n    'x' : df['Installs'],\n    'type':'scatter',\n    'y' : df['Size'],\n    #'name' : t,\n    'mode' : 'markers',\n    'showlegend': False,\n    'text' : df['Size'],\n    } for t in set(df.Type)]\n\n\nlayout = {'title':\"Installs vs Size\", \n          'xaxis': {'title' : 'Installs'},\n          'yaxis' : {'title' : 'Size (in MB)'},\n         'plot_bgcolor': 'rgb(0,0,0)'}\n\nplotly.offline.iplot({'data': data, 'layout': layout})","e56a195f":"plt.figure(figsize=(12,10))\ncorrmat = df.corr()\np =sns.heatmap(corrmat, annot=True, cmap=sns.diverging_palette(220, 20, as_cmap=True))","32f73b28":"df_copy = df.copy()\n\ndf_copy = df_copy[df_copy.Rating > 2]\ndf_copy = df_copy[df_copy.Installs > 0]\n\ndf_copy['Installs'] = np.log10(df['Installs'])\n\nsns.lmplot(\"Rating\", \"Installs\", data=df_copy)\nax = plt.gca()\n_ = ax.set_title('Rating Vs Number of Downloads')","9a12ac0a":"df_copy = df.copy()\n\ndf_copy = df_copy[df_copy.Reviews > 10]\ndf_copy = df_copy[df_copy.Installs > 0]\n\ndf_copy['Installs'] = np.log10(df['Installs'])\ndf_copy['Reviews'] = np.log10(df['Reviews'])\n\nsns.lmplot(\"Reviews\", \"Installs\", data=df_copy)\nax = plt.gca()\n_ = ax.set_title('Number of Reviews Vs Number of Downloads (Log scaled)')","48e8e3fd":"reviews_df = pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","cfc1dad0":"reviews_df.head()","2dd58145":"merged_df = pd.merge(df, reviews_df, on = \"App\", how = \"inner\")\nmerged_df.head()","433bf766":"from wordcloud import WordCloud\nwc = WordCloud(background_color=\"white\", max_words=200, colormap=\"tab20\")\n# generate word cloud\n\n'''from nltk.corpus import stopwords\nstop = stopwords.words('english')\nstop = stop + ['app', 'APP' ,'ap', 'App', 'apps', 'application', 'browser', 'website', 'websites', 'chrome', 'click', 'web', 'ip', 'address',\n            'files', 'android', 'browse', 'service', 'use', 'one', 'download', 'email', 'Launcher']'''\n\n#merged_df = merged_df.dropna(subset=['Translated_Review'])\nmerged_df['Translated_Review'] = merged_df['Translated_Review'].apply(lambda x: \" \".join(x for x in str(x).split(' ')))\n#print(any(merged_df.Translated_Review.isna()))\nmerged_df.Translated_Review = merged_df.Translated_Review.apply(lambda x: x if 'app' not in x.split(' ') else np.nan)\nmerged_df.dropna(subset=['Translated_Review'], inplace=True)\n\n\nfree = merged_df.loc[merged_df.Type==0]['Translated_Review'].apply(lambda x: '' if x=='nan' else x)\nwc.generate(''.join(str(free)))\nplt.figure(figsize=(10, 10))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title('Top words in free app reviews',size = 20);\nplt.show()","46aeecfe":"paid = merged_df.loc[merged_df.Type==1]['Translated_Review'].apply(lambda x: '' if x=='nan' else x)\nwc = WordCloud(background_color=\"white\", max_words=200, colormap=\"Set2\")\nwc.generate(''.join(str(paid)))\nplt.figure(figsize=(10, 10))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.title('Top words in paid app reviews',size = 20);\nplt.show()","ef72cdca":"def Evaluationmatrix(y_true, y_predict):\n    print ('Mean Squared Error: '+ str(metrics.mean_squared_error(y_true,y_predict)))\n    print ('Mean absolute Error: '+ str(metrics.mean_absolute_error(y_true,y_predict)))\n    print ('Mean squared Log Error: '+ str(metrics.mean_squared_log_error(y_true,y_predict)))\ndef Evaluationmatrix_dict(y_true, y_predict, name = 'All features'):\n    dict_matrix = {}\n    dict_matrix['Series Name'] = name\n    dict_matrix['Mean Squared Error'] = metrics.mean_squared_error(y_true,y_predict)\n    dict_matrix['Mean Absolute Error'] = metrics.mean_absolute_error(y_true,y_predict)\n    dict_matrix['Mean Squared Log Error'] = metrics.mean_squared_log_error(y_true,y_predict)\n    return dict_matrix\n\ndff = df.drop(labels = ['Last Updated', 'Current Ver', 'Android Ver', 'App', 'Content Rating'], axis = 1)","cc1b3800":"dff_1 = pd.get_dummies(dff, columns=['Category', 'Genres'])\ndff_1.head()","79dc3541":"X_1 = dff_1.drop(labels = ['Rating', 'Category_id', 'Genres_id'],axis = 1)\ny_1 = dff_1['Rating']\nX_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(X_1, y_1, test_size=0.30)\nmodel = LinearRegression()\nmodel.fit(X_train_1,y_train_1)\nResults_1 = model.predict(X_test_1)","03646bbf":"print ('Mean: ' + str(Results_1.mean()))\nprint ('Standart deviation: ' + str(Results_1.std()))","3b89966c":"resultsdf = pd.DataFrame()\nresultsdf = resultsdf.from_dict(Evaluationmatrix_dict(y_test_1,Results_1),orient = 'index')\nresultsdf = resultsdf.transpose()","60594733":"r2_score(y_test_1, Results_1)","90ed3303":"dff_2 = pd.get_dummies(dff, columns=['Category'])\ndff_2.head()","c8f4f564":"X_2 = dff_2.drop(labels = ['Rating', 'Category_id', 'Genres_id', 'Genres'],axis = 1)\ny_2 = dff_2['Rating']\nX_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_2, y_2, test_size=0.30)\nmodel = LinearRegression()\nmodel.fit(X_train_2,y_train_2)\nResults_2 = model.predict(X_test_2)","9eab2c60":"print ('Mean: ' + str(Results_2.mean()))\nprint ('Standart deviation: ' + str(Results_2.std()))","90b364b3":"resultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_2,Results_2, name = 'w\/o genres'),ignore_index = True)","c9fe24de":"r2_score(y_test_2, Results_2)","2ab52693":"dff_3 = pd.get_dummies(dff, columns=['Genres'])\ndff_3.head()","eb0a1be3":"X_3 = dff_3.drop(labels = ['Rating', 'Category_id', 'Genres_id', 'Category'],axis = 1)\ny_3 = dff_3['Rating']\nX_train_3, X_test_3, y_train_3, y_test_3 = train_test_split(X_3, y_3, test_size=0.30)\nmodel = LinearRegression()\nmodel.fit(X_train_3,y_train_3)\nResults_3 = model.predict(X_test_3)","9b48e1c2":"print ('Mean :' + str(Results_3.mean()))\nprint ('Standart deviation :' + str(Results_3.std()))","94fd64ba":"resultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_3,Results_3, name = 'w\/o categories'),ignore_index = True)","0adbeb4b":"r2_score(y_test_3, Results_3)","ddf53466":"resultsdf","40ea6c7e":"resultsdf.set_index('Series Name', inplace = True)\n\nplt.figure(figsize = (10,12))\nplt.subplot(3,1,1)\nresultsdf['Mean Squared Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.3, 0.4, 0.6, 1), title = 'Mean Squared Error')\nplt.subplot(3,1,2)\nresultsdf['Mean Absolute Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.5, 0.4, 0.6, 1), title = 'Mean Absolute Error')\nplt.subplot(3,1,3)\nresultsdf['Mean Squared Log Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.7, 0.4, 0.6, 1), title = 'Mean Squared Log Error')\nplt.show()","26a204f6":"plt.figure(figsize=(12,7))\nplt.grid()\nsns.regplot(Results_1,y_test_1,color='teal', label = 'all features', marker = 'x')\nsns.regplot(Results_3,y_test_3,color='orange',label = 'w\/o genres')\nplt.legend()\nplt.title('Linear model')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","a3076bd3":"from sklearn.ensemble import RandomForestRegressor\n\nX_5 = dff.drop(labels = ['Rating', 'Category', 'Genres'],axis = 1)\ny_5 = dff.Rating\nX_train_5, X_test_5, y_train_5, y_test_5 = train_test_split(X_5, y_5, test_size=0.30)\nmodel_2 = RandomForestRegressor()\nmodel_2.fit(X_train_5, y_train_5)\nResults_5 = model_2.predict(X_test_5)","100198df":"print ('Mean :' + str(Results_5.mean()))\nprint ('Standart deviation :' + str(Results_5.std()))","644939b1":"resultsdf = resultsdf.append(Evaluationmatrix_dict(y_test_5,Results_5, name = 'RFR model'),ignore_index = True)","c2a4512b":"resultsdf","03c4bed5":"resultsdf.set_index('Series Name', inplace = True)\n\nplt.figure(figsize = (10,12))\nplt.subplot(3,1,1)\nresultsdf['Mean Squared Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.3, 0.4, 0.6, 1), title = 'Mean Squared Error')\nplt.subplot(3,1,2)\nresultsdf['Mean Absolute Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.5, 0.4, 0.6, 1), title = 'Mean Absolute Error')\nplt.subplot(3,1,3)\nresultsdf['Mean Squared Log Error'].sort_values(ascending = False).plot(kind = 'barh',color=(0.7, 0.4, 0.6, 1), title = 'Mean Squared Log Error')\nplt.show()","ee6a2847":"plt.figure(figsize=(12,7))\nplt.grid()\nsns.regplot(Results_5, y_test_5, color='orange', label = 'RFR')\nsns.regplot(Results_1, y_test_1, color='teal', label = 'linear regression', marker = 'x')\nplt.legend()\nplt.title('RFR model vs Linear Regression')\nplt.xlabel('Predicted Ratings')\nplt.ylabel('Actual Ratings')\nplt.show()","2ae5df0c":"## 3 part ","8ab91a3e":"we are not right :(\n\nLet's also check if num of reviews depends on num of installstions.","3096a92c":"Reviews have a very big influence on apps' popularity. ","5fb7135b":"Let's count a coef of determination.","ab861817":"Model with all features showed the best result","2e54f755":"# Vizualisation","459f14fd":"Most apps have rating ~ 4.4. The average rating is ~ 4.19.\n\nLet's look at rating in each category.","96a0fb7a":"0 - is Free\n1 - is Paid\n\nSo, most apps are free.","7e87afee":"### Clean data\nConvert object-type to int and float","f57d7782":"# First look at data","d9cd5a6e":"Let's look at average price in each category.","ca1546b9":"The biggest categories are **Family,  Games and Tools**","92a8ffca":"## User Reviews","be5776a0":"The biggest part of highly rated apps is located between 0 dollars and 30 dollars.\n\nLet's check a frequency of installstions of free and paid apps.","32e40116":"Difference is not so big and result is predictable: free apps are installed more than paid\n","548efe4d":"* App - application name\n* Category - category of app\n* Rating\n* Reviews - num of reviews\n* Type - free or paid\n* Price - if paid, if free - 0\n* Content Rating - target audience\n* Genres - genres of app\n* Last updated - date of last update\n* Current Ver - current version of app\n* Android Ver - required version of Android\n\n","e10fe1f9":"Cause rating is a target, let's delete all records with NAN rating.","12e17aac":"Let's look at error matrix","e3b850ce":"## Prices","56b35c01":"# Predicting","6d5a03a0":"Result is very bad.","51cf0d33":"## Correlations","1d36bf00":"## 1 part","23a259c1":"Logically that rating depends on num of installations. Let's check","484180ed":"Let's check a relation between rating and price.","562e7620":"## Rating","31f76aa6":"Let's predict that users leave different reviews for free and paid apps.","7a9a836d":"Obviously that apps with smaller smize are rated higher.\n\nLet's look at relation between num of installstion and size of app.","59c0cdc6":"## Categories","4e18038b":"As we have seen in vizualisation part rating hasn't high correlation with any features. Moreover it has negative correlation with some of them. The lowest correlation it has with features: **Category & Genres**.\n\nLet's build linear regression model 4 times:\n1. with all features\n2. w\/o Genres\n3. w\/o Category\n??  4. with normalized data and best set of features ??","cadb04bc":"## 2 part","d75ce300":"Here we see that the most numerous categories don't have the biggest number of installations. The most popular apps are in **Communication, Social and Productivity** categories.","66501bcb":"# Random forest","fe6dcca0":"Correlation is high","fcbd684d":"## App size"}}