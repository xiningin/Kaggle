{"cell_type":{"b59212cf":"code","bbf00072":"code","0139aa27":"code","3776c0f6":"code","db127eed":"code","71f420a1":"code","66742879":"code","b996f4c6":"code","382219fc":"code","b652f5fc":"code","034d08ce":"code","985f7f9f":"code","26728bbf":"code","08715f33":"code","56232768":"code","90f3109b":"code","f6325929":"code","17954735":"code","c66c3a6e":"code","7571ed27":"markdown","c09ca741":"markdown","8db50586":"markdown","18b57857":"markdown","16fbe9d0":"markdown","8d4e1176":"markdown"},"source":{"b59212cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbf00072":"directory = '\/kaggle\/input\/random-linear-regression\/'\n","0139aa27":"train_data = pd.read_csv (directory + 'train.csv')\ntest_data = pd.read_csv(directory + 'test.csv')","3776c0f6":"train_data","db127eed":"test_data","71f420a1":"train_data.info()","66742879":"test_data.info()","b996f4c6":"train_data = train_data.dropna()","382219fc":"test_data = test_data.dropna()","b652f5fc":"x_train = np.array(train_data.iloc[:,0].values)\ny_train = np.array(train_data.iloc[:,1].values)\nprint( 'X_train' , x_train [:5] )\nprint( 'y_train' , y_train [:5] )\n\nx_train = x_train.reshape( -1 ,1 )\nprint( 'X_train\\n' , x_train [:5] )","034d08ce":"x_test = np.array(test_data.iloc[:,0].values)\ny_test = np.array(test_data.iloc[:,1].values)\nprint( 'x_test' , x_test [:5] )\nprint( 'y_test' , y_test [:5] )\n\nx_test = x_test.reshape( -1 ,1 )\nprint( 'x_test\\n' , x_test [:5] )","985f7f9f":"from sklearn.linear_model import LinearRegression","26728bbf":"regressor = LinearRegression()","08715f33":"regressor.fit(x_train,y_train)","56232768":"y_predict = regressor.predict(x_test)","90f3109b":"regressor.fit(x_train,y_train)","f6325929":"print(\"Simple Linear Regression Accuracy : {:,.2f}%\".format(regressor.score(x_test,y_test)*100))","17954735":"plt.scatter(x_train,y_train,color= 'red')\nplt.plot(x_train,regressor.predict(x_train),color='blue')\nplt.title('Simple Linear Regression (Training Set)')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()","c66c3a6e":"plt.scatter(x_test,y_test,color= 'red')\nplt.plot(x_test,regressor.predict(x_test),color='blue')\nplt.title('Simple Linear Regression (Testing  Set)')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()","7571ed27":"## Derive Information about the Dataset\n","c09ca741":"## Extract Data from Csv File","8db50586":"## Missing Values","18b57857":"## Extract Input and output from the Train Dataset","16fbe9d0":"## Linear Regression Model","8d4e1176":"## Extracting Input and Output from Test Dataset"}}