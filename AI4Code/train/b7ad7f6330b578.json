{"cell_type":{"3c1ec9a0":"code","e0e0d38b":"code","95d6ac1d":"code","08ab688a":"code","0ee3ae22":"code","2b0d976d":"code","282e53ac":"code","65b951a4":"code","7e316fa0":"code","f46c74ac":"code","0134b175":"code","500278dd":"code","087d741a":"code","6582cea0":"code","1793e7f1":"code","d153bcb6":"code","43cd3c02":"code","50b2914c":"code","4e849815":"code","f62bb8a3":"code","4c4e1509":"code","f3560ac7":"code","cebe4b87":"code","b18a8a36":"code","1805265c":"code","85b81a5a":"code","2c6c8fa4":"code","fc6c97c3":"code","e0665838":"code","a56d17f1":"code","b6b04b0d":"code","b51c50c8":"code","95f952c5":"code","eb75a42e":"code","2ed31e19":"code","e8ca71c0":"code","6652ddcf":"code","e252a1d0":"code","6e8d35bc":"code","b70e9efd":"code","762828dc":"code","e47705cb":"code","f9382803":"code","1161fd7f":"code","e2b3e0ed":"code","950e6b77":"code","fa19606a":"code","e6bb21b7":"code","c50018bd":"code","f87e910c":"code","6f48e521":"code","6ff981fa":"code","74f632e1":"code","d1bea17e":"markdown","5ae6a37e":"markdown","abb19acd":"markdown","6320487a":"markdown","ab77ac5c":"markdown","b2ed5013":"markdown","0f65b361":"markdown","61b50c56":"markdown","d9ad27cf":"markdown","2869f62b":"markdown","bfbb1a73":"markdown","f9c520a0":"markdown","31105bf9":"markdown","1ea3c9b3":"markdown","5a49fe25":"markdown","1164d33b":"markdown","2be9d634":"markdown","4f610c4b":"markdown","d2ceddcd":"markdown","614fd443":"markdown","0e2c16a9":"markdown","7c722f6d":"markdown","aee147ff":"markdown","cb7157b3":"markdown","69b61c77":"markdown"},"source":{"3c1ec9a0":"import os\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","e0e0d38b":"PATH = '..\/input\/kakr-4th-competition\/'\ntrain = pd.read_csv(PATH + 'train.csv')\ntest  = pd.read_csv(PATH + 'test.csv')","95d6ac1d":"train.shape","08ab688a":"train.apply(lambda x: x['age'] + x['hours_per_week'], axis=1)","0ee3ae22":"## \ud310\ub2e4\uc2a4 \uc0ac\uc6a9 \ud301\ntrain.describe()","2b0d976d":"train.capital_gain < 99999","282e53ac":"train","65b951a4":"train.income = train.income.map(lambda x: int(x=='>50K'))","7e316fa0":"train.age.plot(kind='box')","f46c74ac":"train[train.apply(lambda x: \"?\" in list(x), axis=1)]","0134b175":"train.occupation.value_counts()","500278dd":"train.workclass.value_counts()","087d741a":"train[(train['workclass'] == '?')&(train['occupation'] == '?')]","6582cea0":"train.loc[(train.age >= 30)&(train.workclass=='?'), 'workclass'] = 'No'","1793e7f1":"train.workclass.value_counts()","d153bcb6":"train.native_country.value_counts()","43cd3c02":"train.info()","50b2914c":"train.describe()","4e849815":"train.loc[train.capital_gain < 99999].sort_values('capital_gain', ascending=False)","f62bb8a3":"train[\"log_capital_gain\"] = train.capital_gain.map(lambda x: np.log(x, where=(x!=0)))","4c4e1509":"train[['capital_gain', 'log_capital_gain']].describe()","f3560ac7":"train.capital_gain.map(lambda x: np.log(x, where=(x!=0))).describe()","cebe4b87":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nmm_scaler = MinMaxScaler()\nst_scaler = StandardScaler()","b18a8a36":"train['MM_fnlwgt'] = mm_scaler.fit_transform(train['fnlwgt'].values.reshape(-1,1))\ntest['MM_fnlwgt'] = mm_scaler.transform(test['fnlwgt'].values.reshape(-1,1))\n\ntrain['MM_age'] = mm_scaler.fit_transform(train['age'].values.reshape(-1,1))\ntest['MM_age'] = mm_scaler.transform(test['age'].values.reshape(-1,1))\n\ntrain['ST_fnlwgt'] = st_scaler.fit_transform(train['fnlwgt'].values.reshape(-1,1))\ntest['ST_fnlwgt'] = st_scaler.transform(test['fnlwgt'].values.reshape(-1,1))\n\ntrain['ST_age'] = st_scaler.fit_transform(train['age'].values.reshape(-1,1))\ntest['ST_age'] = st_scaler.transform(test['age'].values.reshape(-1,1))","1805265c":"train.describe()[['MM_fnlwgt', 'MM_age']]","85b81a5a":"train.describe()[['ST_fnlwgt', 'ST_age']].round(6)","2c6c8fa4":"train","fc6c97c3":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder","e0665838":"train","a56d17f1":"oe = OneHotEncoder()\noe_result = oe.fit_transform(train['workclass'].values.reshape(-1, 1))","b6b04b0d":"oe.get_feature_names(['workclass'])","b51c50c8":"oe_result","95f952c5":"sub = pd.DataFrame(data=oe_result.toarray(), columns=oe.get_feature_names(['workclass']))","eb75a42e":"pd.concat([train, sub], axis=1)","2ed31e19":"le = LabelEncoder()\nle.fit_transform(train['workclass'].values.reshape(-1, 1))","e8ca71c0":"workclass_to_num = dict(zip(train['workclass'].unique(), [0,1,2,3,4,5,6,7,8,9]))","6652ddcf":"train['workclass'].map(workclass_to_num)","e252a1d0":"train['workclass'].unique()","6e8d35bc":"train","b70e9efd":"male_positive = train.loc[train['sex']=='Male', \"income\"]\nfemale_positive = train.loc[train['sex']=='Female', \"income\"]","762828dc":"(male_positive.value_counts() \/ male_positive.shape[0]).iloc[1]","e47705cb":"female_positive.value_counts() \/ female_positive.shape[0]","f9382803":"dummied = pd.get_dummies(train)","1161fd7f":"dummied","e2b3e0ed":"from sklearn.decomposition import PCA\npca = PCA(n_components=60, svd_solver='full')","950e6b77":"dummied = dummied.drop(columns=['id', 'income_<=50K', 'income_>50K'])","fa19606a":"X_train_std = st_scaler.fit_transform(dummied)","e6bb21b7":"X_train_std = st_scaler.fit_transform(dummied)\nX_train_pca = pca.fit_transform(X_train_std)","c50018bd":"X_train_pca.shape","f87e910c":"X_train_2.shape","6f48e521":"pca.explained_variance_ratio_","6ff981fa":"X_train_2 = X_train_std - X_train_std.mean(axis=0)\n\nres = np.dot(X_train_2, pca.components_.T)\nres","74f632e1":"np.allclose(X_train_pca, res)","d1bea17e":"### \uacb0\uce21\uce58 \ucc98\ub9ac\n\uc0ad\uc81c? \ub300\uce58?","5ae6a37e":"## 4. Before Modeling\n\uc2dc\uac04\uc774 \ub0a8\ub294\ub2e4\uba74..","abb19acd":"### \ub370\uc774\ud130 \ud655\uc778","6320487a":"## 2. Data Preprocessing","ab77ac5c":"### Load data","b2ed5013":"* id\n* age : \ub098\uc774\n* workclass : \uace0\uc6a9 \ud615\ud0dc\n* fnlwgt : \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* education : \uad50\uc721 \uc218\uc900\n* education_num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n* marital_status: \uacb0\ud63c \uc0c1\ud0dc\n* occupation : \uc5c5\uc885\n* relationship : \uac00\uc871 \uad00\uacc4\n* race : \uc778\uc885\n* sex : \uc131\ubcc4\n* capital_gain : \uc591\ub3c4 \uc18c\ub4dd\n* capital_loss : \uc591\ub3c4 \uc190\uc2e4\n* hours_per_week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* native_country : \uad6d\uc801\n* income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n    * \\>50K : 1\n    * <=50K : 0","0f65b361":"## 1. Understanding Data","61b50c56":"\uc0ac\uc774\ud0b7\ub7f0 \uc778\ucf54\ub529\uc740 \ubd88\ud3b8\ud55c\uc810\uc774 \ub108\ubb34 \ub9ce\uc544\uc11c.. \uc9c1\uc811 \ub9cc\ub4dc\ub294 \uac8c \ub098\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","d9ad27cf":"### 3.1 \ubcc0\uc218\uc758 \uc885\ub958\n\ubcc0\uc218 \uc885\ub958\uc5d0 \ub530\ub77c\uc11c \uc5b4\ub5a4 \ucc28\uc774\uc810\uc774 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4.","2869f62b":"### Onehot encoder","bfbb1a73":"### log \ud45c\ud604","f9c520a0":"### 2.1 \uacb0\uce21\uce58 \ucc98\ub9ac","31105bf9":"### 3.3 PCA","1ea3c9b3":"### Label encoder","5a49fe25":"### 2.3 Scaling","1164d33b":"### (Target) Mean Encoding","2be9d634":"### 2.2 \uc774\uc0c1\uce58 \ucc98\ub9ac\n\uc218\uce58\ud615 \ub370\uc774\ud130\uc5d0 \uc774\uc0c1\ud55c \uac12\uc774 \uc5c6\ub294\uc9c0 \ud55c\ubc88 \ud655\uc778\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","4f610c4b":"### 3.2 \uc778\ucf54\ub529\n\uc54c\uace0\ub9ac\uc998\uc774 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b4 Feature\ub4e4\uc744 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560 \uc9c0 \uc54c\uc544\ubd05\uc2dc\ub2e4","d2ceddcd":"### Before Start\n\ubcf8\uaca9\uc801\uc73c\ub85c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \uc544\uc8fc \uc57d\uac04\ub9cc \uae4a\uc774 \uc788\uac8c \uc774\ud574\ud574\ubcf4\ub294 \uc2dc\uac04\uc744 \uac00\uc838\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","614fd443":"### Pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\nPandas \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub9ce\uc774 \uc4f0\uc774\ub294 \uac83\ub4e4\uc744 \uc704\uc8fc\ub85c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\nloc, iloc, info, describe, value_counts, head, tail, sample, map, apply, groupby \ub4f1","0e2c16a9":"### Q. \ub514\uc2a4\ud06c\uc758 CSV\ud30c\uc77c\uc758 \uc6a9\ub7c9\uc740 \uadf8\ub807\uac8c \ub192\uc9c4 \uc54a\uc740\ub370 \uba54\ubaa8\ub9ac\ub85c \uc77d\uae30\ub9cc \ud558\uba74 \uba87 \ubc30\ub85c \ub298\uc5b4\ub098\ub294 \uc774\uc720\ub294?\n\uce90\uae00\uc744 \ud558\uc2dc\ub2e4 \ubcf4\uba74 \uc774\ub7f0 \uacbd\ud5d8\uc774 \ud55c\ubc88\ucbe4\uc740 \ub2e4\ub4e4 \uc788\uc73c\uc2e4 \uac83 \uac19\uc2b5\ub2c8\ub2e4.   \n\ubd84\uba85\ud788 CSV \ud30c\uc77c\ub85c\ub294 1GB \ubcf4\ub2e4 \uc544\ub798\uc600\ub294\ub370 \ud310\ub2e4\uc2a4\ub85c read\ub97c \ud558\uba74 2~3GB\ub85c \ub298\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc885\uc885 \uc788\ub294\ub370, \uc774\uc720\uac00 \ubb34\uc5c7\uc77c\uae4c\uc694?","7c722f6d":"## 3. Feature Engineering","aee147ff":"Min-max Scaler: \n\ubc94\uc704\uac00 \uc815\ud574\uc9c4 \uac12\uc774 \ud544\uc694\ud560 \ub54c  \n\uc544\uc6c3\ub77c\uc774\uc5b4\uc5d0 \ubbfc\uac10\ud568\n  \nStandard Scaler: \n\ud3c9\uade0\uc744 0, \ud45c\uc900\ud3b8\ucc28\ub97c 1\ub85c \ub9de\ucd94\uc5b4 \uc815\uaddc\ubd84\ud3ec\uc758 \ud2b9\uc131\uc744 \uac00\uc9c0\ub3c4\ub85d \ub9cc\ub4e6  \n\uc544\uc6c3\ub77c\uc774\uc5b4\uc5d0 \uc601\ud5a5\uc744 \ub35c \ubc1b\uc74c","cb7157b3":"### Null check \uad00\ub828 \ud301\n\ub370\uc774\ud130\ub97c \uc77c\uc77c\uc774 \ub2e4 \ud655\uc778\ud558\uc9c0 \uc54a\uace0 \uacb0\uce21\uce58\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc740?","69b61c77":"### onehot \uc778\ucf54\ub529 \uc77c\uad04\uc801\uc73c\ub85c \ud558\ub294 \uac04\ub2e8\ud55c \ubc29\ubc95~"}}