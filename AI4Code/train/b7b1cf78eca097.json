{"cell_type":{"923bfdd6":"code","4860df8e":"code","54b27357":"code","80f1808e":"code","359fc9a1":"code","cb0d2bf9":"code","8266d8c1":"code","e63789f2":"code","db9f555a":"code","1c245e22":"code","18dd0692":"code","efeb7cf6":"code","035749e7":"code","c50a7e02":"code","9e2d3e20":"code","2f03e6c7":"code","1c434e6f":"code","5ef56eb2":"code","8f8ec5cd":"code","dbdc930a":"code","57d3c484":"code","56415fce":"code","7de89510":"code","2085d33f":"code","65b5e22f":"code","06ea79ff":"code","c94116c5":"code","e656309a":"code","ec908bf6":"code","be2c22cc":"code","427278cd":"code","b4434133":"code","f958e07a":"code","01396fda":"code","c4792e79":"code","a92a4bc1":"code","cd40fa2a":"code","053f2416":"code","54d1460e":"code","9764f4b7":"code","41196788":"code","067b8e85":"code","0969ef3e":"code","96266d54":"code","50c5e5b6":"code","f0b195e1":"code","fb162224":"code","4481bc52":"code","cf654229":"code","ec41a1fe":"code","8d881794":"code","4db35475":"code","ebc04556":"code","7c05cf94":"code","5e68c593":"code","f778c6e9":"code","69b8b083":"code","3a2ab81c":"code","9b697e3d":"code","863f229e":"code","965d7375":"code","84b6ed3e":"code","fa5c71a7":"code","cfd484d4":"code","acda00ec":"code","12c1b48f":"code","b930fa1a":"code","2e027237":"code","a8aabd6e":"code","f92b2e72":"code","851ed0e7":"code","e5ec3276":"code","bda802a9":"code","52cba81c":"code","f0052726":"code","75b5b284":"code","40ae5afd":"code","a6dbc8da":"code","50af3f42":"code","83e369cb":"code","c5ad9912":"code","430ae999":"code","f86bc847":"code","c3c51e1f":"code","831c1b14":"code","0948ed7c":"code","dfdaeaf8":"code","ed049e5c":"code","994abe49":"code","d15af075":"code","050c3528":"code","3cf9b784":"code","0c1aba7f":"code","644e9d8b":"code","6c3ab9dc":"code","a180a188":"code","98497d63":"markdown","aab3f994":"markdown","792c8216":"markdown","d6527fd1":"markdown","35037fbc":"markdown","36bc2501":"markdown","c9fe0a96":"markdown","367bd7db":"markdown","8651f28e":"markdown","e44785f2":"markdown","d0dfd7c4":"markdown","c4462d30":"markdown","8878d50a":"markdown","7cf37892":"markdown","66a7716b":"markdown","08c821d7":"markdown","a9716189":"markdown","cfe94989":"markdown","5c286a2a":"markdown","95cf047e":"markdown","0b26242f":"markdown","8d975001":"markdown","8c3a111f":"markdown","232e24f5":"markdown","a61e0c71":"markdown","7ff523a5":"markdown","f878e3d6":"markdown","794929c0":"markdown","02f3b3b9":"markdown","ddac7e23":"markdown","4b8e42fe":"markdown","acf202ab":"markdown","3679c298":"markdown","883bcdcf":"markdown","5ee39853":"markdown","3251cacd":"markdown","ce549a35":"markdown","1d8eec4e":"markdown","4c237eb4":"markdown"},"source":{"923bfdd6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4860df8e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport xgboost as xgb\n\nimport time\nimport warnings\n\npd.set_option('display.max_columns', None)\nplt.style.use(style = 'seaborn')\n\nwarnings.filterwarnings('ignore')","54b27357":"%%time\n\ntrain_tr = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv')\ntrain_id = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\n\ntest_tr = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv')\ntest_id = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv')","80f1808e":"# Let's know the shape of the train & test data\n\nprint('train_transaction shape is {}'.format(train_tr.shape))\nprint('train_identity shape is {}'.format(train_id.shape))\n\nprint('\\n')\n\nprint('test_transaction shape is {}'.format(test_tr.shape))\nprint('test_identity shape is {}'.format(test_id.shape))","359fc9a1":"print(train_tr.info())\n\nprint('\\n')\n\nprint(train_id.info())","cb0d2bf9":"train_tr.head()","8266d8c1":"train_id.head()","e63789f2":"print(test_tr.info())\n\nprint('\\n')\n\nprint(test_id.info())","db9f555a":"test_tr.head()","1c245e22":"test_id.head()","18dd0692":"train = pd.merge(train_tr, train_id, how = 'left', on = 'TransactionID')\n\ntest = pd.merge(test_tr, test_id, how = 'left', on = 'TransactionID')","efeb7cf6":"print(train.shape)\nprint(test.shape)","035749e7":"del train_tr, train_id, test_tr, test_id","c50a7e02":"# Let's see how does the train data look like\n\ntrain.head()","9e2d3e20":"num_train_cols = ['TransactionID', 'isFraud', 'TransactionDT', 'TransactionAmt', 'card1', 'dist1', 'dist2', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'V29', 'V30', 'V31', 'V32', 'V33', 'V34', 'V35', 'V36', 'V37', 'V38', 'V39', 'V40', 'V41', 'V42', 'V43', 'V44', 'V45', 'V46', 'V47', 'V48', 'V49', 'V50', 'V51', 'V52', 'V53', 'V54', 'V55', 'V56', 'V57', 'V58', 'V59', 'V60', 'V61', 'V62', 'V63', 'V64', 'V65', 'V66', 'V67', 'V68', 'V69', 'V70', 'V71', 'V72', 'V73', 'V74', 'V75', 'V76', 'V77', 'V78', 'V79', 'V80', 'V81', 'V82', 'V83', 'V84', 'V85', 'V86', 'V87', 'V88', 'V89', 'V90', 'V91', 'V92', 'V93', 'V94', 'V95', 'V96', 'V97', 'V98', 'V99', 'V100', 'V101', 'V102', 'V103', 'V104', 'V105', 'V106', 'V107', 'V108', 'V109', 'V110', 'V111', 'V112', 'V113', 'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', 'V121', 'V122', 'V123', 'V124', 'V125', 'V126', 'V127', 'V128', 'V129', 'V130', 'V131', 'V132', 'V133', 'V134', 'V135', 'V136', 'V137', 'V138', 'V139', 'V140', 'V141', 'V142', 'V143', 'V144', 'V145', 'V146', 'V147', 'V148', 'V149', 'V150', 'V151', 'V152', 'V153', 'V154', 'V155', 'V156', 'V157', 'V158', 'V159', 'V160', 'V161', 'V162', 'V163', 'V164', 'V165', 'V166', 'V167', 'V168', 'V169', 'V170', 'V171', 'V172', 'V173', 'V174', 'V175', 'V176', 'V177', 'V178', 'V179', 'V180', 'V181', 'V182', 'V183', 'V184', 'V185', 'V186', 'V187', 'V188', 'V189', 'V190', 'V191', 'V192', 'V193', 'V194', 'V195', 'V196', 'V197', 'V198', 'V199', 'V200', 'V201', 'V202', 'V203', 'V204', 'V205', 'V206', 'V207', 'V208', 'V209', 'V210', 'V211', 'V212', 'V213', 'V214', 'V215', 'V216', 'V217', 'V218', 'V219', 'V220', 'V221', 'V222', 'V223', 'V224', 'V225', 'V226', 'V227', 'V228', 'V229', 'V230', 'V231', 'V232', 'V233', 'V234', 'V235', 'V236', 'V237', 'V238', 'V239', 'V240', 'V241', 'V242', 'V243', 'V244', 'V245', 'V246', 'V247', 'V248', 'V249', 'V250', 'V251', 'V252', 'V253', 'V254', 'V255', 'V256', 'V257', 'V258', 'V259', 'V260', 'V261', 'V262', 'V263', 'V264', 'V265', 'V266', 'V267', 'V268', 'V269', 'V270', 'V271', 'V272', 'V273', 'V274', 'V275', 'V276', 'V277', 'V278', 'V279', 'V280', 'V281', 'V282', 'V283', 'V284', 'V285', 'V286', 'V287', 'V288', 'V289', 'V290', 'V291', 'V292', 'V293', 'V294', 'V295', 'V296', 'V297', 'V298', 'V299', 'V300', 'V301', 'V302', 'V303', 'V304', 'V305', 'V306', 'V307', 'V308', 'V309', 'V310', 'V311', 'V312', 'V313', 'V314', 'V315', 'V316', 'V317', 'V318', 'V319', 'V320', 'V321', 'V322', 'V323', 'V324', 'V325', 'V326', 'V327', 'V328', 'V329', 'V330', 'V331', 'V332', 'V333', 'V334', 'V335', 'V336', 'V337', 'V338', 'V339', 'id_01', 'id_02', 'id_03', 'id_04', 'id_05', 'id_06', 'id_07', 'id_08', 'id_09', 'id_10', 'id_11', 'id_13', 'id_14', 'id_17', 'id_18', 'id_19', 'id_20', 'id_21', 'id_22', 'id_24', 'id_25', 'id_26', 'id_32']","2f03e6c7":"def detect_num_cols_to_shrink(list_of_num_cols, dataframe):\n \n    convert_to_int8 = []\n    convert_to_int16 = []\n    convert_to_int32 = []\n    \n    #  sadly the datatype float8 does not exist\n    convert_to_float16 = []\n    convert_to_float32 = []\n    \n    for col in list_of_num_cols:\n        \n        if dataframe[col].dtype in ['int', 'int8', 'int32', 'int64']:\n            \n            describe_object = dataframe[col].describe()\n            minimum = describe_object[3]\n            maximum = describe_object[7]\n            diff = abs(maximum - minimum)\n\n            if diff < 255:\n                convert_to_int8.append(col)\n                \n            elif diff < 65535:\n                convert_to_int16.append(col)\n                \n            elif diff < 4294967295:\n                convert_to_int32.append(col)   \n                \n        elif dataframe[col].dtype in ['float', 'float16', 'float32', 'float64']:\n            \n            describe_object = dataframe[col].describe()\n            minimum = describe_object[3]\n            maximum = describe_object[7]\n            diff = abs(maximum - minimum)\n\n            if diff < 65535:\n                convert_to_float16.append(col)\n                \n            elif diff < 4294967295:\n                convert_to_float32.append(col) \n        \n    list_of_lists = []\n    list_of_lists.append(convert_to_int8)\n    list_of_lists.append(convert_to_int16)\n    list_of_lists.append(convert_to_int32)\n    list_of_lists.append(convert_to_float16)\n    list_of_lists.append(convert_to_float32)\n    \n    return list_of_lists","1c434e6f":"num_cols_to_shrink_train = detect_num_cols_to_shrink(num_train_cols, train)\n\nconvert_to_int8 = num_cols_to_shrink_train[0]\nconvert_to_int16 = num_cols_to_shrink_train[1]\nconvert_to_int32 = num_cols_to_shrink_train[2]\n\nconvert_to_float16 = num_cols_to_shrink_train[3]\nconvert_to_float32 = num_cols_to_shrink_train[4]\n\nprint(\"convert_to_int8 :\", convert_to_int8, \"\\n\")\nprint(\"convert_to_int16 :\", convert_to_int16, \"\\n\")\nprint(\"convert_to_int32 :\", convert_to_int32, \"\\n\")\n\nprint(\"convert_to_float16 :\", convert_to_float16, \"\\n\")\nprint(\"convert_to_float32 :\", convert_to_float32, \"\\n\")","5ef56eb2":"print(\"starting with converting process....\")\n\nfor col in convert_to_int16:\n    \n    train[col] = train[col].astype('int16') \n    \nfor col in convert_to_int32:\n    train[col] = train[col].astype('int32') \n\nfor col in convert_to_float16:\n    train[col] = train[col].astype('float16')\n    \nfor col in convert_to_float32:\n    train[col] = train[col].astype('float32')\n    \nprint(\"successfully converted!\")","8f8ec5cd":"num_test_cols = ['TransactionID', 'TransactionDT', 'TransactionAmt', 'card1', 'dist1', 'dist2', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'V29', 'V30', 'V31', 'V32', 'V33', 'V34', 'V35', 'V36', 'V37', 'V38', 'V39', 'V40', 'V41', 'V42', 'V43', 'V44', 'V45', 'V46', 'V47', 'V48', 'V49', 'V50', 'V51', 'V52', 'V53', 'V54', 'V55', 'V56', 'V57', 'V58', 'V59', 'V60', 'V61', 'V62', 'V63', 'V64', 'V65', 'V66', 'V67', 'V68', 'V69', 'V70', 'V71', 'V72', 'V73', 'V74', 'V75', 'V76', 'V77', 'V78', 'V79', 'V80', 'V81', 'V82', 'V83', 'V84', 'V85', 'V86', 'V87', 'V88', 'V89', 'V90', 'V91', 'V92', 'V93', 'V94', 'V95', 'V96', 'V97', 'V98', 'V99', 'V100', 'V101', 'V102', 'V103', 'V104', 'V105', 'V106', 'V107', 'V108', 'V109', 'V110', 'V111', 'V112', 'V113', 'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', 'V121', 'V122', 'V123', 'V124', 'V125', 'V126', 'V127', 'V128', 'V129', 'V130', 'V131', 'V132', 'V133', 'V134', 'V135', 'V136', 'V137', 'V138', 'V139', 'V140', 'V141', 'V142', 'V143', 'V144', 'V145', 'V146', 'V147', 'V148', 'V149', 'V150', 'V151', 'V152', 'V153', 'V154', 'V155', 'V156', 'V157', 'V158', 'V159', 'V160', 'V161', 'V162', 'V163', 'V164', 'V165', 'V166', 'V167', 'V168', 'V169', 'V170', 'V171', 'V172', 'V173', 'V174', 'V175', 'V176', 'V177', 'V178', 'V179', 'V180', 'V181', 'V182', 'V183', 'V184', 'V185', 'V186', 'V187', 'V188', 'V189', 'V190', 'V191', 'V192', 'V193', 'V194', 'V195', 'V196', 'V197', 'V198', 'V199', 'V200', 'V201', 'V202', 'V203', 'V204', 'V205', 'V206', 'V207', 'V208', 'V209', 'V210', 'V211', 'V212', 'V213', 'V214', 'V215', 'V216', 'V217', 'V218', 'V219', 'V220', 'V221', 'V222', 'V223', 'V224', 'V225', 'V226', 'V227', 'V228', 'V229', 'V230', 'V231', 'V232', 'V233', 'V234', 'V235', 'V236', 'V237', 'V238', 'V239', 'V240', 'V241', 'V242', 'V243', 'V244', 'V245', 'V246', 'V247', 'V248', 'V249', 'V250', 'V251', 'V252', 'V253', 'V254', 'V255', 'V256', 'V257', 'V258', 'V259', 'V260', 'V261', 'V262', 'V263', 'V264', 'V265', 'V266', 'V267', 'V268', 'V269', 'V270', 'V271', 'V272', 'V273', 'V274', 'V275', 'V276', 'V277', 'V278', 'V279', 'V280', 'V281', 'V282', 'V283', 'V284', 'V285', 'V286', 'V287', 'V288', 'V289', 'V290', 'V291', 'V292', 'V293', 'V294', 'V295', 'V296', 'V297', 'V298', 'V299', 'V300', 'V301', 'V302', 'V303', 'V304', 'V305', 'V306', 'V307', 'V308', 'V309', 'V310', 'V311', 'V312', 'V313', 'V314', 'V315', 'V316', 'V317', 'V318', 'V319', 'V320', 'V321', 'V322', 'V323', 'V324', 'V325', 'V326', 'V327', 'V328', 'V329', 'V330', 'V331', 'V332', 'V333', 'V334', 'V335', 'V336', 'V337', 'V338', 'V339', 'id-01', 'id-02', 'id-03', 'id-04', 'id-05', 'id-06', 'id-07', 'id-08', 'id-09', 'id-10', 'id-11', 'id-13', 'id-14', 'id-17', 'id-18', 'id-19', 'id-20', 'id-21', 'id-22', 'id-24', 'id-25', 'id-26', 'id-32']","dbdc930a":"num_cols_to_shrink_test = detect_num_cols_to_shrink(num_test_cols, test)\n\nconvert_to_int8 = num_cols_to_shrink_test[0]\nconvert_to_int16 = num_cols_to_shrink_test[1]\nconvert_to_int32 = num_cols_to_shrink_test[2]\n\nconvert_to_float16 = num_cols_to_shrink_test[3]\nconvert_to_float32 = num_cols_to_shrink_test[4]\n\nprint(\"convert_to_int8 :\", convert_to_int8, \"\\n\")\nprint(\"convert_to_int16 :\", convert_to_int16, \"\\n\")\nprint(\"convert_to_int32 :\", convert_to_int32, \"\\n\")\n\nprint(\"convert_to_float16 :\", convert_to_float16, \"\\n\")\nprint(\"convert_to_float32 :\", convert_to_float32, \"\\n\")","57d3c484":"print(\"starting with converting process....\")\n\nfor col in convert_to_int16:\n    \n    test[col] = test[col].astype('int16') \n    \nfor col in convert_to_int32:\n    test[col] = test[col].astype('int32') \n\nfor col in convert_to_float16:\n    test[col] = test[col].astype('float16')\n    \nfor col in convert_to_float32:\n    test[col] = test[col].astype('float32')\n    \nprint(\"successfully converted!\")","56415fce":"def different_columns(traincols, testcols):\n    \n    for i in traincols:\n        \n        if i not in testcols:\n            \n            print(i)\n            \ndifferent_columns(train.columns, test.columns)","7de89510":"test = test.rename(columns = {\"id-01\": \"id_01\", \"id-02\": \"id_02\", \"id-03\": \"id_03\", \n                            \"id-06\": \"id_06\", \"id-05\": \"id_05\", \"id-04\": \"id_04\", \n                            \"id-07\": \"id_07\", \"id-08\": \"id_08\", \"id-09\": \"id_09\", \n                            \"id-10\": \"id_10\", \"id-11\": \"id_11\", \"id-12\": \"id_12\", \n                            \"id-15\": \"id_15\", \"id-14\": \"id_14\", \"id-13\": \"id_13\", \n                            \"id-16\": \"id_16\", \"id-17\": \"id_17\", \"id-18\": \"id_18\", \n                            \"id-21\": \"id_21\", \"id-20\": \"id_20\", \"id-19\": \"id_19\", \n                            \"id-22\": \"id_22\", \"id-23\": \"id_23\", \"id-24\": \"id_24\", \n                            \"id-27\": \"id_27\", \"id-26\": \"id_26\", \"id-25\": \"id_25\", \n                            \"id-28\": \"id_28\", \"id-29\": \"id_29\", \"id-30\": \"id_30\", \n                            \"id-31\": \"id_31\", \"id-32\": \"id_32\", \"id-33\": \"id_33\", \n                            \"id-34\": \"id_34\", \"id-35\": \"id_35\", \"id-36\": \"id_36\", \n                            \"id-37\": \"id_37\", \"id-38\": \"id_38\"})\ntest.head()","2085d33f":"different_columns(train.columns, test.columns)","65b5e22f":"fig = plt.figure(figsize = (5, 5))\n\nsns.barplot([0,1],train['isFraud'].value_counts().values)\nplt.show()","06ea79ff":"#count total number of NULL values in train data\n\ntot_missing_value = train.isnull().sum().sum()\nprint(tot_missing_value)","c94116c5":"del tot_missing_value","e656309a":"column_missing_value = train.isnull().sum()\nprint(column_missing_value[0 : 60])\nprint(column_missing_value[60 : 120])\nprint(column_missing_value[120 : 180])\nprint(column_missing_value[180 : 240])\nprint(column_missing_value[240 : 300])\nprint(column_missing_value[300 : 360])\nprint(column_missing_value[360 : 420])\nprint(column_missing_value[420 : 434])","ec908bf6":"del column_missing_value","be2c22cc":"fig = plt.figure(figsize = (10, 5))\n\nplt.hist(train['TransactionDT'], label = 'T rain', bins = 35, color = 'red')\nplt.hist(test['TransactionDT'], label = 'T est', bins = 35, color = 'yellow')\nplt.legend()\n\nplt.title('Train vs. Test TransactionDT Distribution')","427278cd":"# Train Data\n\nfig, ax = plt.subplots(1, 2, figsize = (18, 4))\n\ntime_val = train['TransactionAmt'].values\n\nsns.distplot(time_val, ax = ax[0], color = 'red')\nax[0].set_title('Train TransactionAmt Distribution', fontsize = 16)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nsns.distplot(np.log(time_val), ax = ax[1], color = 'green')\nax[1].set_title('Train LOG TransactionAmt Distribution', fontsize = 16)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\nplt.show()","b4434133":"del time_val","f958e07a":"# Test Data\n\nfig, ax = plt.subplots(1, 2, figsize = (18,4))\n\ntime_val = test['TransactionAmt'].values\n\nsns.distplot(time_val, ax = ax[0], color = 'red')\nax[0].set_title('Test TransactionAmt Distribution', fontsize = 16)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nsns.distplot(np.log(time_val), ax = ax[1], color = 'green')\nax[1].set_title('Test LOG TransactionAmt Distribution', fontsize = 16)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\nplt.show()","01396fda":"del time_val","c4792e79":"fig, ax = plt.subplots(1, 2, figsize = (20, 7))\n\nsns.countplot(x = \"ProductCD\", ax = ax[0], hue = \"isFraud\", data = train)\nax[0].set_title('Train ProductCD', fontsize = 16)\n\nsns.countplot(x = \"ProductCD\", ax = ax[1], data = test)\nax[1].set_title('Test ProductCD', fontsize = 16)\n\nplt.show()","a92a4bc1":"print(train['ProductCD'].value_counts())\nprint('\\n-----------\\n')\nprint(test['ProductCD'].value_counts())","cd40fa2a":"# Train Data\n\ncard_cols = ['card1', 'card2', 'card3', 'card4', 'card5', 'card6']\ncolor_pal = ['cyan', 'yellow', 'blue', 'green', 'red']\n\ncolor_idx = 0\n\nfor c in card_cols:\n    \n    if train[c].dtype in ['float64','int64']:\n        \n        train[c].plot(kind = 'hist',\n                      title = c,\n                      bins = 70,\n                      figsize = (10, 2),\n                      color = color_pal[color_idx])\n    color_idx += 1\n    \n    plt.show()","053f2416":"# Test Data\n\ncard_cols = ['card1', 'card2', 'card3', 'card4', 'card5', 'card6']\ncolor_pal = ['cyan', 'yellow', 'blue', 'green', 'red']\n\ncolor_idx = 0\n\nfor c in card_cols:\n    \n    if test[c].dtype in ['float64','int64']:\n        \n        test[c].plot( kind = 'hist',\n                      title = c,\n                      bins = 70,\n                      figsize = (10, 2),\n                      color = color_pal[color_idx])\n    color_idx += 1\n    \n    plt.show()","54d1460e":"# card4\n\nfig, ax = plt.subplots(1, 2, figsize = (18, 4))\n\nsns.countplot(x = \"card4\", ax = ax[0], data = train.loc[train['isFraud'] == 0])\nax[0].set_title('card4 isFraud = 0', fontsize = 16)\n\nsns.countplot(x = \"card4\", ax = ax[1], data = train.loc[train['isFraud'] == 1])\nax[1].set_title('card4 isFraud = 1', fontsize = 16)\n\nplt.show()","9764f4b7":"# card6\n\nfig, ax = plt.subplots(1, 2, figsize = (18, 4))\n\nsns.countplot(x = \"card6\", ax = ax[0], data = train.loc[train['isFraud'] == 0])\nax[0].set_title('card6 isFraud = 0', fontsize = 16)\n\nsns.countplot(x = \"card6\", ax = ax[1], data = train.loc[train['isFraud'] == 1])\nax[1].set_title('card6 isFraud = 1', fontsize = 16)\n\nplt.show()","41196788":"train['addr1'].plot(kind = 'hist', bins = 500, figsize = (10, 2), title = 'addr1 distribution', color = 'red')\nplt.show()\n\ntrain['addr2'].plot(kind = 'hist', bins = 500, figsize = (10, 2), title = 'addr2 distribution', color = 'green')\nplt.show()","067b8e85":"train['P_emaildomain'].value_counts()","0969ef3e":"test['P_emaildomain'].value_counts()","96266d54":"def getNulls(data):\n    \n    total = data.isnull().sum()\n    percent = data.isnull().sum() \/ data.isnull().count()\n    missing_data = pd.concat([total, percent], axis = 1, keys = ['total', 'precent'])\n    \n    return missing_data","50c5e5b6":"# Train Data Missing Values\n\nmissing_data_train = getNulls(train)\nmissing_data_train.head(434).T","f0b195e1":"# Test Data Missing Values\n\nmissing_data_test = getNulls(test)\nmissing_data_test.head(434).T","fb162224":"del missing_data_test","4481bc52":"# Get the columns that we have to drop\n\nsel_cols = missing_data_train[missing_data_train['total'] > 100000].index","cf654229":"del missing_data_train","ec41a1fe":"# Drop the columns\n\ntrain.drop(sel_cols, axis = 1, inplace = True)\ntest.drop(sel_cols, axis = 1, inplace = True)","8d881794":"print(train.shape)\nprint(test.shape)","4db35475":"missing_data_train = getNulls(train)\nmissing_data_train.head(182).T","ebc04556":"missing_data_test = getNulls(test)\nmissing_data_test.head(181).T","7c05cf94":"print(list(train.columns))","5e68c593":"# Merging Training & Testing Dataset to handle missing value\n\nntrain = train.shape[0]\nntest = test.shape[0]\nall_data = pd.concat([train, test], axis = 0, sort = False)\nall_data.shape","f778c6e9":"all_data_cols = all_data.columns\n\nfor i in all_data_cols:\n    \n    if all_data[i].dtype == 'object':\n        \n        all_data[i] = all_data[i].fillna(all_data[i].mode()[0])","69b8b083":"for i in all_data_cols:\n    \n    if (i.startswith(\"C\") or (i.startswith(\"V\"))) and all_data[i].isnull().sum() > 0:\n        \n        all_data[i] = all_data[i].fillna(all_data[i].mode()[0])\n        \nmissing_data = getNulls(all_data)\nmissing_data.head(182).T","3a2ab81c":"all_data['card2'] = all_data['card2'].fillna(all_data['card2'].mean())\nall_data['card3'] = all_data['card3'].fillna(all_data['card3'].mean())\nall_data['card5'] = all_data['card5'].fillna(all_data['card5'].mean())","9b697e3d":"all_data['D1'] = all_data['D1'].fillna(all_data['D1'].mode()[0])\nall_data['D10'] = all_data['D10'].fillna(all_data['D10'].mode()[0])\nall_data['D15'] = all_data['D15'].fillna(all_data['D15'].mode()[0])","863f229e":"all_data['addr1'] = all_data['addr1'].fillna(all_data['addr1'].mean())\nall_data['addr2'] = all_data['addr2'].fillna(all_data['addr2'].mode()[0])","965d7375":"missing_data = getNulls(all_data)\nmissing_data.head(182).T","84b6ed3e":"train = all_data[ : ntrain]\ntest = all_data[ntrain : ]","fa5c71a7":"print(train.shape)\nprint(test.shape)","cfd484d4":"test.head()","acda00ec":"test.drop(['isFraud'], axis = 1, inplace = True)","12c1b48f":"test.shape","b930fa1a":"target = train['isFraud']","2e027237":"print(list(train.columns))","a8aabd6e":"train.corr()['isFraud'].to_csv(\"correlation.csv\")","f92b2e72":"lst1 = ['TransactionID', 'TransactionDT', 'TransactionAmt', 'ProductCD', 'isFraud']\n\ncorr1 = train[lst1].corr()\nplt.subplots(figsize = (10, 6))\nsns.heatmap(corr1, annot = True, cmap = \"Blues\")","851ed0e7":"lst2 = ['card1', 'card2', 'card3', 'card5', 'isFraud']\n\ncorr2 = train[lst2].corr()\nplt.subplots(figsize = (12, 8))\nsns.heatmap(corr2, annot = True, cmap = \"Blues\")","e5ec3276":"lst3 = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'isFraud']\n\ncorr3 = train[lst3].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr3, annot = True, cmap = \"Blues\")","bda802a9":"lst4 = ['V95', 'V96', 'V97', 'V98', 'V99', 'V100', 'V101', 'V102', 'V103', 'V104', 'V105', 'V106', 'V107', 'V108', 'isFraud']\n\ncorr4 = train[lst4].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr4, annot = True, cmap = \"Blues\")","52cba81c":"lst5 = ['V109', 'V110', 'V111', 'V112', 'V113', 'V114', 'V115', 'V116', 'V117', 'V118', 'V119', 'V120', 'V121', 'V122', 'isFraud']\n\ncorr5 = train[lst5].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr5, annot = True, cmap = \"Blues\")","f0052726":"lst6 = ['V123', 'V124', 'V125', 'V126', 'V127', 'V128', 'V129', 'V130', 'V131', 'V132', 'V133', 'V134', 'V135', 'V136', 'isFraud']\n\ncorr6 = train[lst6].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr6, annot = True, cmap = \"Blues\")","75b5b284":"lst7 = ['V137', 'V279', 'V280', 'V281', 'V282', 'V283', 'V284', 'V285', 'V286', 'V287', 'V288', 'V289', 'V290', 'V291', 'isFraud']\n\ncorr7 = train[lst7].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr7, annot = True, cmap = \"Blues\")","40ae5afd":"lst8 = ['V292', 'V293', 'V294', 'V295', 'V296', 'V297', 'V298', 'V299', 'V300', 'V301', 'V302', 'V303', 'V304', 'V305', 'V306', 'isFraud']\n\ncorr8 = train[lst8].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr8, annot = True, cmap = \"Blues\")","a6dbc8da":"lst9 = ['V307', 'V308', 'V309', 'V310', 'V311', 'V312', 'V313', 'V314', 'V315', 'V316', 'V317', 'V318', 'V319', 'V320', 'V321', 'isFraud']\n\ncorr9 = train[lst9].corr()\nplt.subplots(figsize = (20, 16))\nsns.heatmap(corr9, annot = True, cmap = \"Blues\")","50af3f42":"ntrain = train.shape[0]\nntest = test.shape[0]\nall_data = pd.concat([train, test], axis = 0, sort = False)\nprint(all_data.shape)","83e369cb":"ntrain + ntest","c5ad9912":"# Encoding the data\n\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)\nall_data.head()","430ae999":"# Split the data again and get ready for training\n\ntrain = all_data[ : ntrain]\ntest = all_data[ntrain : ]","f86bc847":"test_id = test['TransactionID']","c3c51e1f":"train.drop(['TransactionID', 'isFraud'], axis = 1, inplace = True)\n\ntest.drop(['TransactionID', 'isFraud'], axis = 1, inplace = True)\n\nprint(train.shape)\nprint(test.shape)","831c1b14":"different_columns(train.columns, test.columns)","0948ed7c":"del ntrain\ndel ntest","dfdaeaf8":"n = (train.dtypes != 'object')\n\nnum_train_cols = list(n[n].index) \n\nprint(num_train_cols)","ed049e5c":"num_cols_to_shrink_train = detect_num_cols_to_shrink(num_train_cols, train)\n\nconvert_to_int8 = num_cols_to_shrink_train[0]\nconvert_to_int16 = num_cols_to_shrink_train[1]\nconvert_to_int32 = num_cols_to_shrink_train[2]\n\nconvert_to_float16 = num_cols_to_shrink_train[3]\nconvert_to_float32 = num_cols_to_shrink_train[4]\n\nprint(\"convert_to_int8 :\", convert_to_int8, \"\\n\")\nprint(\"convert_to_int16 :\", convert_to_int16, \"\\n\")\nprint(\"convert_to_int32 :\", convert_to_int32, \"\\n\")\n\nprint(\"convert_to_float16 :\", convert_to_float16, \"\\n\")\nprint(\"convert_to_float32 :\", convert_to_float32, \"\\n\")","994abe49":"print(\"starting with converting process....\")\n\nfor col in convert_to_int16:\n    \n    train[col] = train[col].astype('int16') \n    \nfor col in convert_to_int32:\n    train[col] = train[col].astype('int32') \n\nfor col in convert_to_float16:\n    train[col] = train[col].astype('float16')\n    \nfor col in convert_to_float32:\n    train[col] = train[col].astype('float32')\n    \nprint(\"successfully converted!\")","d15af075":"n = (test.dtypes != 'object')\n\nnum_test_cols = list(n[n].index) \n\nprint(num_test_cols)","050c3528":"num_cols_to_shrink_test = detect_num_cols_to_shrink(num_test_cols, test)\n\nconvert_to_int8 = num_cols_to_shrink_test[0]\nconvert_to_int16 = num_cols_to_shrink_test[1]\nconvert_to_int32 = num_cols_to_shrink_test[2]\n\nconvert_to_float16 = num_cols_to_shrink_test[3]\nconvert_to_float32 = num_cols_to_shrink_test[4]\n\nprint(\"convert_to_int8 :\", convert_to_int8, \"\\n\")\nprint(\"convert_to_int16 :\", convert_to_int16, \"\\n\")\nprint(\"convert_to_int32 :\", convert_to_int32, \"\\n\")\n\nprint(\"convert_to_float16 :\", convert_to_float16, \"\\n\")\nprint(\"convert_to_float32 :\", convert_to_float32, \"\\n\")","3cf9b784":"print(\"starting with converting process....\")\n\nfor col in convert_to_int16:\n    \n    test[col] = test[col].astype('int16') \n    \nfor col in convert_to_int32:\n    test[col] = test[col].astype('int32') \n\nfor col in convert_to_float16:\n    test[col] = test[col].astype('float16')\n    \nfor col in convert_to_float32:\n    test[col] = test[col].astype('float32')\n    \nprint(\"successfully converted!\")","0c1aba7f":"xgmodel = xgb.XGBClassifier(n_estimators = 5000,\n                            max_depth = 12,\n                            learning_rate = 0.02,\n                            subsample = 0.8,\n                            colsample_bytree = 0.4,\n                            missing = -1,\n                            random_state = 42,\n                            tree_method = 'gpu_hist')\nxgmodel.fit(train, target)","644e9d8b":"y_pred = xgmodel.predict_proba(test)","6c3ab9dc":"print(y_pred)","a180a188":"sub = pd.DataFrame()\nsub['TransactionID'] = test_id\nsub['isFraud'] = y_pred[:, 1]\nsub.to_csv('submission1.csv', index = False)","98497d63":"Column those are Object type:\n\n* ProductCD\n* card4\n* card6\n* P_emaildomain","aab3f994":"### **Merging the transaction & identity data**","792c8216":"### **Fraud vs. Not Fraud**","d6527fd1":"* It is visible that train and test transaction dates don't overlap.","35037fbc":"## *Split all_data*","36bc2501":"### **ProductCD**","c9fe0a96":"## 3. Exploratory Data Analysis","367bd7db":"### **addr1, addr2**","8651f28e":"### **C1-C14**\n\nColumn Name = Total Number of Unique Value, dtype\n\nTrain Data\n\n* C1 = 1657, int (1 >> 316791)\n* C2 = 1216, int (1 >> 316261)\n* C3 = 27, int (0 >> 588111)\n* C4 = 1260, int (0 >> 451883)\n* C5 = 319, int (0 >> 372435)\n* C6 = 1328, int (1 >> 341552)\n* C7 = 1103, int (0 >> 523142)\n* C8 = 1253, int (0 >> 447667)\n* C9 = 205, int (1 >> 228938)\n* C10 = 1231, int (0 >> 453442)\n* C11 = 1476, int (1 >> 389692)\n* C12 = 1199, int (0 >> 489199)\n* C13 = 1597, int (1 >> 199337)\n* C14 = 1108, int (1 >> 320189)\n\nTest Data\n\n* C1 = 1174, int (1 >> 269951)\n* C2 = 1123, int (1 >> 265435)\n* C3 = 31, int  (0 >> 493779)\n* C4 = 728, int (0 >> 371571)\n* C5 = 353, int (0 >> 334573)\n* C6 = 834, int (1 >> 289685)\n* C7 = 518, int (0 >> 438095)\n* C8 = 442, int (0 >> 368637)\n* C9 = 354, int (1 >> 191416)\n* C10 = 456, int (0 >> 370978)\n* C11 = 937, int (1 >> 342100)\n* C12 = 663, int (0 >> 366881)\n* C13 = 1069, int (1 >> 168280)\n* C14 = 569, int (1 >> 278331)","e44785f2":"### **P_emaildomain**","d0dfd7c4":"### **card1 - card6**\n\n* These are all categorical, though some appear numeric.","c4462d30":"### **Let's know about the train data**","8878d50a":"### **Checking Train column names & Test column names are same or not.**\n\nWe have observed there exist difference style in column name. Therefore, need to solve this issue.","7cf37892":"### **Lets check again Train column names & Test column names are same or not.**","66a7716b":"## *Set Target Column*","08c821d7":"### **Train vs. Test TransactionDT**\n","a9716189":"### **Missing Value**","cfe94989":"## 2. Data Loading & Overview\n\nMachine is going to read four csv files. Here, %%time will show the CPU & Wall time are needed to read those files. Data is separated into two datasets: information about the identity of the customer and transaction information. Not all transactions belong to identities, which are available.","5c286a2a":"**card2, card3, card5**\n\nColumn Name = Total Number of Unique Value, dtype\n\nTrain Data\n\n* card2 = 500, int\n* card3 = 114, int (150 >> 521287)\n* card5 = 119, int\n\nTest Data\n\n* card2 = 497, int\n* card3 = 115, int (150, 435558)\n* card5 = 102, int","95cf047e":"* W has the most number of observations, S the least.","0b26242f":"## *Encode the categorical features*","8d975001":"## 1. Importing Necessary Dependencies","8c3a111f":"## Problem Discussion\nThis competition is a binary classification problem. Our target variable is a binary attribute and our goal is to classify users into \"fraudlent\" or \"not fraudlent\" as well as possible.","232e24f5":"## 6. Feature Selection (Part-2)\n#### *Correlation*","a61e0c71":"Column Name = Total Number of Unique Values, dtype\n\nTrain Data\n\n* addr1 = 332, int\n* addr2 = 74, int (87 >> 520481)\n\nTest Data\n\n* addr1 = 292, int\n* addr2 = 72, int (87 >> 435934)","7ff523a5":"### **Let's know about the test data**","f878e3d6":"## 4. Feature Selection (Part-1)","794929c0":"#### *Train Data*","02f3b3b9":"## 7. Model Building","ddac7e23":"### **D1, D10, D15**\n\nColumn Name = Total Number of Unique Values, dtype\n\nTrain Data\n\n* D1 = 641, int (0 >> 280130)\n* D4 = 808, int (0 >> 166571)\n* D10 = 818, int (0 >> 221930)\n* D15 = 859, int (0 >> 174246)\n\nTest Data\n\n* D1 = 642, int (0 >> 227724)\n* D4 = 808, int (0 >> 178278)\n* D10 = 1075, int (0 >> 227999)\n* D15 = 1078, int (0 >> 183720)","4b8e42fe":"### **Missing Value**","acf202ab":"#### *Train Data*","3679c298":"### **TransactionAmt**\n\nHere, log transform is taken in some of these plots to better show the distribution. Otherwise the few, very large transactions skew the distribution. Log transformation is most likely the first thing one should do to remove skewness from the predictor. It can be easily done via Numpy, just by calling the log() function on the desired column.","883bcdcf":"## *Reduce Memory Use (Part-1)*","5ee39853":"### **XGBoost**","3251cacd":"## **5. Handle Missing Values**","ce549a35":"#### *Test Data*","1d8eec4e":"#### *Test Data*","4c237eb4":"## *Reduce Memory Use*"}}