{"cell_type":{"9e5fc8e8":"code","5585502e":"code","2b68c9ac":"code","ce6ce7b7":"code","9f9335f8":"code","3163ed12":"code","95fe7d4a":"code","87ff5041":"code","6e8fb14d":"code","0eff1928":"code","ffb6a4f3":"code","a1302715":"code","13444344":"code","8fde7eb8":"code","75b3afbd":"code","1eb1c273":"code","4f299b01":"code","c2cf48a8":"code","438215a9":"code","083ec9d6":"code","7f865d76":"markdown","b70db914":"markdown","dca2f1cd":"markdown","407457c6":"markdown","7f7ab224":"markdown","0019cb67":"markdown"},"source":{"9e5fc8e8":"from tensorflow.compat.v1 import ConfigProto\nfrom tensorflow.compat.v1 import InteractiveSession\n\nconfig = ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.8\nconfig.gpu_options.allow_growth = True\nsession = InteractiveSession(config=config)\n","5585502e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow \nfrom sklearn.model_selection import StratifiedKFold\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.vgg19 import preprocess_input\nfrom tensorflow.keras.applications import VGG19 \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import models, layers,Sequential,regularizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau,EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.layers import Input, Flatten, Dense, Conv2D, MaxPooling2D, AveragePooling2D, Dropout,BatchNormalization \nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.metrics import Recall, Precision\nfrom tensorflow.keras.optimizers import Adam","2b68c9ac":"train_path=\"..\/input\/Kannada-MNIST\/train.csv\"\ntest_path=\"..\/input\/Kannada-MNIST\/test.csv\"","ce6ce7b7":"train_df=pd.read_csv(train_path)\ntrain_df.head()","9f9335f8":"train_df.label.value_counts()","3163ed12":"image= train_df.iloc[1,1:].values.reshape(28,28)\nplt.imshow(image,cmap='gray')","95fe7d4a":"def create_k_folds(kfolds,train_df):\n    train_df.loc[:,'kfold']=-1\n    train_df.sample(frac=1).reset_index(drop=True)\n    sf=StratifiedKFold(n_splits=kfolds)\n    y=train_df.label.values\n    for fold,(t_,v_) in enumerate(sf.split(train_df,y)):\n        train_df.loc[v_,'kfold']=fold\n    return train_df","87ff5041":"def create_train_valid_set(fold,df):\n    train_set=df[df.kfold!=fold].reset_index(drop=True)\n    valid_set=df[df.kfold==fold].reset_index(drop=True)\n    X_train=train_set.drop(['label','kfold'],axis=1)\n    y_train=train_set.label\n    X_valid=valid_set.drop(['label','kfold'],axis=1)\n    y_valid=valid_set.label\n    X_train=X_train.values.reshape(-1,28,28,1)\n    X_valid=X_valid.values.reshape(-1,28,28,1)\n    print('The shape of train set now is',X_train.shape)\n    print('The shape of valid set now is',X_valid.shape)\n    y_train=to_categorical(y_train,num_classes=10)\n    y_valid=to_categorical(y_valid,num_classes=10)\n    return X_train,y_train,X_valid,y_valid\n    \n    ","6e8fb14d":"def create_train_val_generator(X_train,X_valid,y_train,y_valid):\n    train_gen= ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range=20,\n                                  zoom_range=0.15,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.15,\n                                  horizontal_flip=True,\n                                  fill_mode=\"nearest\").flow(X_train,y_train,batch_size=64)\n    valid_gen= ImageDataGenerator(rescale=1.\/255).flow(X_valid,y_valid,batch_size=64)\n    return train_gen,valid_gen\n    ","0eff1928":"def make_model():\n    model=Sequential()\n    model.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\n    model.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'Same',activation ='relu'))\n    model.add(BatchNormalization(momentum=.15))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Dropout(0.5))\n\n\n    model.add(Conv2D(filters = 256, kernel_size = (3,3), activation ='relu'))\n    model.add(Conv2D(filters = 256, kernel_size = (3,3), activation ='relu'))\n    model.add(BatchNormalization(momentum=0.15))\n    model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n    model.add(Dropout(0.5))\n\n    model.add(AveragePooling2D())\n    model.add(Flatten())\n    model.add(Dense(256, activation = \"relu\"))\n    model.add(Dropout(0.4))\n    model.add(Dense(64, activation = \"relu\"))\n    model.add(Dropout(0.4))\n    model.add(Dense(10, activation = \"softmax\"))\n    \n    model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy',tensorflow.keras.metrics.AUC(name='auc')])\n    \n    return model","ffb6a4f3":"Epochs=100\nBatch_size=64\nmy_callbacks = [EarlyStopping(patience=3,monitor='val_loss', mode='min',restore_best_weights=True,verbose=True),\n                ReduceLROnPlateau(monitor='val_loss', factor=0.1,patience=2, min_lr=0.00001, mode='auto',verbose=1)]","a1302715":"def run_train(kfold):\n    train=create_k_folds(kfold,train_df)\n    for i in range(kfold):\n        X_train,y_train,X_valid,y_valid=create_train_valid_set(i,train)\n        train_gen,val_gen=create_train_val_generator(X_train,X_valid,y_train,y_valid)\n        model=make_model()\n        print('#'*25)\n        print(f'{i}th fold training')\n        print('#'*25)\n        history=model.fit_generator(train_gen,\n                              epochs =20, validation_data=val_gen,\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ Batch_size\n                              ,callbacks=my_callbacks)\n        model.save(f'model_{i}.h5')","13444344":"run_train(5)","8fde7eb8":"model=tensorflow.keras.models.load_model('model_3.h5')","75b3afbd":"test_df=pd.read_csv(test_path)","1eb1c273":"test_df.head()","4f299b01":"test=test_df.drop('id',axis=1)\ntest=test\/255\ntest=test.values.reshape(-1,28,28,1)","c2cf48a8":"y_pred=model.predict(test)     \ny_pred=np.argmax(y_pred,axis=1)","438215a9":"sub=pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')\nsub['label']=y_pred\nsub.to_csv('submission.csv',index=False)","083ec9d6":"sub.head(10)","7f865d76":"**Model with k fold = 3 works the best**","b70db914":"# **Training the model**","dca2f1cd":"# **Making Model**","407457c6":"This is a balanced dataset. All the numbers have 6000 images each","7f7ab224":"# **Import libraries**","0019cb67":"# **Preparing dataset**"}}