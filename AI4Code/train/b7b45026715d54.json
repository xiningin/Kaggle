{"cell_type":{"abfc3870":"code","2f88540c":"code","9a6552b8":"code","fdc4ec8e":"code","3b480be0":"code","83380c56":"code","6847bcb9":"code","81a0b71e":"code","82fa5447":"code","bf59b545":"code","82ab1ab6":"code","5abf5033":"code","058bde09":"code","6d2a922b":"code","b7116b70":"code","f60616f3":"code","3791190c":"markdown","9fb7a0ee":"markdown","2f002a55":"markdown","d3842d31":"markdown","8bd707bd":"markdown"},"source":{"abfc3870":"import cv2 # pip3 install opencv-python\nimport numpy as np\nimport os\nfrom random import shuffle\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt","2f88540c":"train_dir = '..\/input\/train\/'\ntest_dir = '..\/input\/test\/'\nimg_size = 50\nlr = 1e-3","9a6552b8":"# one hot encoding\ndef label_img(img):\n    word_label = img.split('.')[-3]\n    if word_label == 'cat': return [1,0]\n    elif word_label == 'dog': return [0,1]","fdc4ec8e":"def create_train_data():\n    training_data = []\n    for img in tqdm(os.listdir(train_dir)):\n        if (not img.endswith('.jpg')):\n            continue\n        label = label_img(img)\n        path = os.path.join(train_dir, img)\n        img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)  # greyscale\n        img = cv2.resize(img, (img_size, img_size) )  # unite the figure size\n        training_data.append([np.array(img), np.array(label)])\n    shuffle(training_data)\n    return training_data","3b480be0":"train_data = create_train_data()","83380c56":"def process_test_data():\n    testing_data = []\n    for img in tqdm(os.listdir(test_dir)):\n        if (not img.endswith('.jpg')):\n            continue\n        path = os.path.join(test_dir,img)\n        img_num = img.split('.')[0]\n        img = cv2.imread(path,cv2.IMREAD_GRAYSCALE)\n        img = cv2.resize(img, (img_size, img_size))\n        testing_data.append([np.array(img), img_num]) # no label\n        \n    shuffle(testing_data)\n    return testing_data","6847bcb9":"test_data = process_test_data()","81a0b71e":"import tflearn # need to install tensorflow first\nfrom tflearn.layers.conv import conv_2d, max_pool_2d  # 2d_CNN and max pooling\nfrom tflearn.layers.core import input_data, dropout, fully_connected\nfrom tflearn.layers.estimator import regression # cross entropy","82fa5447":"import tensorflow as tf\ntf.reset_default_graph() # need to reset the default graph for multiple running","bf59b545":"convnet = input_data(shape = [None, img_size, img_size, 1], name = 'input')","82ab1ab6":"convnet = conv_2d(convnet, 32, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\n\nconvnet = conv_2d(convnet, 64, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\n\nconvnet = conv_2d(convnet, 128, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\n\nconvnet = conv_2d(convnet, 64, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)\n\nconvnet = conv_2d(convnet, 32, 5, activation='relu')\nconvnet = max_pool_2d(convnet, 5)","5abf5033":"convnet = fully_connected(convnet, 1024, activation = 'relu')\nconvnet = dropout(convnet, 0.8)\n\nconvnet = fully_connected(convnet, 2, activation='softmax')\nconvnet = regression(convnet, optimizer='adam', learning_rate = lr, loss='categorical_crossentropy', name='targets')","058bde09":"model = tflearn.DNN(convnet, tensorboard_dir='log')\ntrain = train_data[:-500]\ntest = train_data[-500:]","6d2a922b":"X = np.array([i[0] for i in train], dtype=np.float64).reshape(-1, img_size, img_size, 1)\ny = np.array([i[1] for i in train], dtype=np.float64)\nXtest = np.array([i[0] for i in test], dtype=np.float64).reshape(-1, img_size, img_size, 1)\nytest = np.array([i[1] for i in test], dtype=np.float64)","b7116b70":"model.fit({'input': X}, {'targets': y}, n_epoch=3, validation_set=({'input': Xtest}, {'targets': ytest}), snapshot_step=500, show_metric=True, run_id='model' )","f60616f3":"fig = plt.figure()\nfor num,data in enumerate(test_data[:16]):\n    img_num = data[1]\n    img_data = data[0]\n    y = fig.add_subplot(4, 4, num+1)\n    orig = img_data\n    data = img_data.reshape(img_size, img_size, 1)\n    model_out = model.predict([data])[0]\n    if np.argmax(model_out) == 1: \n        label = 'Dog'\n    else: \n        label = 'Cat'\n    y.imshow(orig, cmap='gray')\n    plt.title(label)\n    y.axes.get_xaxis().set_visible(False)\n    y.axes.get_yaxis().set_visible(False)\n    \nplt.tight_layout()\nplt.show()","3791190c":"**Model train**","9fb7a0ee":"**5xCNN layers, 5xMax pooling layer, 5x5xChannel**","2f002a55":"**2xFully connected layers and a predict layer**","d3842d31":"**Predict on test dataset and check the results**","8bd707bd":"**Set up model, trainning set and test set**"}}