{"cell_type":{"94b02946":"code","a0773deb":"code","ed58ffc5":"code","1c68d5bc":"code","86f472c9":"code","db4eb7a6":"code","ed153f31":"code","c716a2cb":"code","a94669f7":"code","010e3732":"code","001cc7b8":"code","61cbb36f":"markdown","4761c727":"markdown","6ca293fa":"markdown","05c9721f":"markdown","af5f6f36":"markdown","382b75cb":"markdown","ffdaf69c":"markdown","526dc61f":"markdown","7f33ae2b":"markdown","4f4f2814":"markdown","63eb375a":"markdown","f484dfa3":"markdown","222cb2f8":"markdown"},"source":{"94b02946":"import numpy as np\nimport tensorflow as tf\nimport keras\nimport cv2\nfrom keras.layers import MaxPool2D,Conv2D,UpSampling2D,Input,Dropout\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import img_to_array\nimport os\nfrom tqdm import tqdm\nimport re\nimport matplotlib.pyplot as plt","a0773deb":"# to get the files in proper order\ndef sorted_alphanumeric(data):  \n    convert = lambda text: int(text) if text.isdigit() else text.lower()\n    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)',key)]\n    return sorted(data,key = alphanum_key)\n# defining the size of the image\nSIZE = 160\ncolor_img = []\npath = '..\/input\/landscape-image-colorization\/landscape Images\/color'\nfiles = os.listdir(path)\nfiles = sorted_alphanumeric(files)\nfor i in tqdm(files):    \n    if i == '6000.jpg':\n        break\n    else:    \n        img = cv2.imread(path + '\/'+i,1)\n        # open cv reads images in BGR format so we have to convert it to RGB\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        #resizing image\n        img = cv2.resize(img, (SIZE, SIZE))\n        img = img.astype('float32') \/ 255.0\n        color_img.append(img_to_array(img))\n\n\ngray_img = []\npath = '..\/input\/landscape-image-colorization\/landscape Images\/gray'\nfiles = os.listdir(path)\nfiles = sorted_alphanumeric(files)\nfor i in tqdm(files):\n     if i == '6000.jpg':\n        break\n     else: \n        img = cv2.imread(path + '\/'+i,1)\n\n        #resizing image\n        img = cv2.resize(img, (SIZE, SIZE))\n        img = img.astype('float32') \/ 255.0\n        gray_img.append(img_to_array(img))\n         \n   ","ed58ffc5":"# defining function to plot images pair\ndef plot_images(color,grayscale):\n    plt.figure(figsize=(15,15))\n    plt.subplot(1,3,1)\n    plt.title('Color Image', color = 'green', fontsize = 20)\n    plt.imshow(color)\n    plt.subplot(1,3,2)\n    plt.title('Grayscale Image ', color = 'black', fontsize = 20)\n    plt.imshow(grayscale)\n   \n    plt.show()","1c68d5bc":"for i in range(3,10):\n     plot_images(color_img[i],gray_img[i])","86f472c9":"train_gray_image = gray_img[:5500]\ntrain_color_image = color_img[:5500]\n\ntest_gray_image = gray_img[5500:]\ntest_color_image = color_img[5500:]\n# reshaping\ntrain_g = np.reshape(train_gray_image,(len(train_gray_image),SIZE,SIZE,3))\ntrain_c = np.reshape(train_color_image, (len(train_color_image),SIZE,SIZE,3))\nprint('Train color image shape:',train_c.shape)\n\n\ntest_gray_image = np.reshape(test_gray_image,(len(test_gray_image),SIZE,SIZE,3))\ntest_color_image = np.reshape(test_color_image, (len(test_color_image),SIZE,SIZE,3))\nprint('Test color image shape',test_color_image.shape)","db4eb7a6":"from keras import layers\ndef down(filters , kernel_size, apply_batch_normalization = True):\n    downsample = tf.keras.models.Sequential()\n    downsample.add(layers.Conv2D(filters,kernel_size,padding = 'same', strides = 2))\n    if apply_batch_normalization:\n        downsample.add(layers.BatchNormalization())\n    downsample.add(keras.layers.LeakyReLU())\n    return downsample\n\n\ndef up(filters, kernel_size, dropout = False):\n    upsample = tf.keras.models.Sequential()\n    upsample.add(layers.Conv2DTranspose(filters, kernel_size,padding = 'same', strides = 2))\n    if dropout:\n        upsample.dropout(0.2)\n    upsample.add(keras.layers.LeakyReLU())\n    return upsample\n","ed153f31":"def model():\n    inputs = layers.Input(shape= [160,160,3])\n    d1 = down(128,(3,3),False)(inputs)\n    d2 = down(128,(3,3),False)(d1)\n    d3 = down(256,(3,3),True)(d2)\n    d4 = down(512,(3,3),True)(d3)\n    \n    d5 = down(512,(3,3),True)(d4)\n    #upsampling\n    u1 = up(512,(3,3),False)(d5)\n    u1 = layers.concatenate([u1,d4])\n    u2 = up(256,(3,3),False)(u1)\n    u2 = layers.concatenate([u2,d3])\n    u3 = up(128,(3,3),False)(u2)\n    u3 = layers.concatenate([u3,d2])\n    u4 = up(128,(3,3),False)(u3)\n    u4 = layers.concatenate([u4,d1])\n    u5 = up(3,(3,3),False)(u4)\n    u5 = layers.concatenate([u5,inputs])\n    output = layers.Conv2D(3,(2,2),strides = 1, padding = 'same')(u5)\n    return tf.keras.Model(inputs=inputs, outputs=output)","c716a2cb":"model = model()\nmodel.summary()","a94669f7":"model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001), loss = 'mean_absolute_error',\n              metrics = ['acc'])\n\nmodel.fit(train_g, train_c, epochs = 50,batch_size = 50,verbose = 0)","010e3732":"model.evaluate(test_gray_image,test_color_image)","001cc7b8":"# defining function to plot images pair\ndef plot_images(color,grayscale,predicted):\n    plt.figure(figsize=(15,15))\n    plt.subplot(1,3,1)\n    plt.title('Color Image', color = 'green', fontsize = 20)\n    plt.imshow(color)\n    plt.subplot(1,3,2)\n    plt.title('Grayscale Image ', color = 'black', fontsize = 20)\n    plt.imshow(grayscale)\n    plt.subplot(1,3,3)\n    plt.title('Predicted Image ', color = 'Red', fontsize = 20)\n    plt.imshow(predicted)\n   \n    plt.show()\n\nfor i in range(50,58):\n    predicted = np.clip(model.predict(test_gray_image[i].reshape(1,SIZE, SIZE,3)),0.0,1.0).reshape(SIZE, SIZE,3)\n    plot_images(test_color_image[i],test_gray_image[i],predicted)\n\n ","61cbb36f":"# plotting colorized image along with grayscale and color image","4761c727":"## Import necessary libraries","6ca293fa":"## Defining our model\nEncoder layer of our model consist blocks of Convolution layer with different number of kernel and kernel_size. Here, Convolution is used for downsampling.\nSimilary, Decoder layer of our model consist of  transpose convolution layer with different kernel size. Here, Decoder layer upsample image downsampled by encoder.\nSince there is feature loss between the encoder and decoder layers so inorder to prevent feature loss i have concatenate corresponding encoder and decoder layers. Check U_Net architecture for better understanding......","05c9721f":"### Slicing and reshaping\nOut of 5000 images I have sliced them to two part. train images consist 4000 images  while test images contains 1000 images.\nAfter slicing the image array, I reshaped them so that images can be fed directly into our encoder network","af5f6f36":"### Getting landscape image data,resizing them and appending in array\nTo get the image in sorted order i have defined the function sorted_alphanumeric. Here, I have used open cv library to read and resize images. Finally images are normalized and are converted to array and are appended in empty list","382b75cb":"<img src = 'https:\/\/miro.medium.com\/max\/600\/1*nqzWupxC60iAH2dYrFT78Q.png' >","ffdaf69c":"### Plotting Color image and it's corresponding grayscale image","526dc61f":"### Fitting our model","7f33ae2b":"# Thanks for your visit.\n## Any suggestions to improve this model is highly appreciated.\n# Feel free to  comment","4f4f2814":"## Introduction \nAutoencoder are special type of deep learning architecture that consist of two networks encoder and decoder.\nThe encoder, through a series of CNN and downsampling, learns a reduced dimensional representation of the input data while decoder  through the use of CNN and upsampling, attempts to regenerate the data from the these representations. A well-trained decoder is able to regenerated data that is identical or as close as possible to the original input data.\nAutoencoder are generally used for anamoly detection, denoising image, colorizing the images. Here, i am going to colorize the landscape images using autoencoder.","63eb375a":"**Plotting image pair**","f484dfa3":"<img src = \"https:\/\/tinyclouds.org\/colorize\/best\/6.jpg\">","222cb2f8":"## Image Colorization\nImage colorization using different softwares require large amount of human effort, time and skill.But special type of deep learning architecture called autoencoder has made this task quiet easy. Automatic image colorization often involves the use of a class of convolutional neural networks (CNN) called autoencoders. These neural networks are able to distill the salient features of an image, and then regenerate the image based on these learned features. "}}