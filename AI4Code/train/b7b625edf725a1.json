{"cell_type":{"694ea46d":"code","ceeb81bf":"code","12ee44fa":"code","79da6adb":"code","d2fe2258":"code","93f02c69":"code","56378d72":"code","c1cfd0a5":"code","b72a97bd":"code","12099adc":"code","bc81d584":"code","51b35185":"code","30d17ac5":"code","36aec230":"code","044ea4a6":"code","1e76e7e5":"code","390b5641":"code","0544f2c6":"code","173474c7":"code","ead83cc2":"code","4729d3a7":"code","5a035c77":"code","da91b7bf":"code","896c017b":"code","ade8643f":"code","856227df":"code","4ae2e8b4":"code","9d705d82":"code","8f16e141":"code","49eb2cc0":"markdown","d6b6089d":"markdown","989968a7":"markdown","a4492480":"markdown","1f13d354":"markdown","fe878efc":"markdown","a56033ac":"markdown"},"source":{"694ea46d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceeb81bf":"## Most Important\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pathlib import Path\nfrom PIL import Image\n\n## less Important\nfrom functools import partial\nimport os\nfrom scipy import stats\nimport missingno as msno\nimport joblib\nimport tarfile\nimport shutil\nimport urllib\n\n## Sklearn\nfrom sklearn import datasets\n## Preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n## Metrics\nfrom sklearn.metrics import accuracy_score\n\n## tensorflow & Keras\nimport tensorflow as tf    ## i will use tf for every thing and for keras using tf.keras","12ee44fa":"train_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/train.csv')\ntrain_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/train')\n\n## read these all training images paths as Series\ntrain_images_paths = pd.Series(sorted(list(train_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntrain_images_paths.head()","79da6adb":"img_key_value = {}\nfor value in train_labels['label'].unique():\n    img_key_value[value] = train_labels[train_labels['label']==value].index[0]\n    \nimg_index = list(img_key_value.values())\nimg_label = list(img_key_value.keys())\n\nfig, ax = plt.subplots(4, 7, figsize=(12, 8))\n\ni = 0\nfor row in range(4):\n    for col in range(7):\n        plt.sca(ax[row, col])\n        plt.title(f'label = {img_label[i]}')\n        img = plt.imread(train_images_paths.iloc[img_index[i]])\n        plt.imshow(img)\n        plt.axis('off')\n        i+=1","d2fe2258":"print('Number of Instances in train_set =>', len(train_images_paths))\nprint('Number of Instances in train_labels =>', len(train_labels))\n\nprint()\n\nimg = plt.imread(train_images_paths.iloc[img_index[0]])\nprint('shape of each Image is =>', img.shape)","93f02c69":"train_full_labels = train_labels['label'].values\ntrain_full_set = np.empty((13440, 32, 32, 3), dtype=np.float32)  #take only the first 3 channels\n\nfor idx, path in enumerate(train_images_paths):\n    img = plt.imread(path)\n    img = img[:,:,:3]\n    train_full_set[idx] = img\n    \nprint('train_full_set.shape =>', train_full_set.shape)\nprint('train_full_labels.shape =>', train_full_labels.shape)","56378d72":"X_train, X_valid, y_train, y_valid = train_test_split(train_full_set, train_full_labels, \n                                                      test_size=0.2, shuffle=True, random_state=42)\n\nprint('X_train.shape =>', X_train.shape)\nprint('X_valid.shape =>', X_valid.shape)\nprint('y_train.shape =>', y_train.shape)\nprint('y_valid.shape =>', y_valid.shape)","c1cfd0a5":"from tensorflow.keras.models import Sequential\nfrom tensorflow. keras. layers import Dense, Dropout, Flatten, Conv2D,MaxPooling2D,BatchNormalization\nfrom tensorflow.keras import backend as K\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import VGG16, MobileNet,MobileNetV2\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D,AveragePooling2D\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam, Adadelta\nimport matplotlib.pyplot as plt\nfrom keras.utils.vis_utils import plot_model\nfrom keras.callbacks import LearningRateScheduler,ReduceLROnPlateau","b72a97bd":"input_shape=(32,32,3)\nnum_classes=29\nbatch_size = 128 # Handle 128 pictures at each round\nepochs = 100","12099adc":"def model_cnn1(input_shape=input_shape,num_classes=num_classes):   \n    model = Sequential()\n\n    # Add convolutional layer consisting of 32 filters and shape of 3x3 with ReLU activation\n    # We want to preserve more information for following layers so we use padding\n    # 'Same' padding tries to pad evenly left and right, \n    # but if the amount of columns to be added is odd, it will add the extra column to the right\n    model.add(Conv2D(32, kernel_size = (3,3), activation='relu', input_shape = input_shape))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, kernel_size = (3,3), activation='relu'))\n    model.add(BatchNormalization())\n\n    # Add convolutional layer consisting of 32 filters and shape of 5x5 with ReLU activation\n    # We give strides=2 for space between each sample on the pixel grid\n    model.add(Conv2D(32, kernel_size = (5,5), strides=2, padding='same', activation='relu'))\n    model.add(BatchNormalization())\n    # Dropping %40 of neurons\n    model.add(Dropout(0.4))\n    \n    model.add(Conv2D(64, kernel_size = (3,3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = (3,3), activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = (5,5), strides=2, padding='same', activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n    \n    model.add(Conv2D(128, kernel_size = 4, activation='relu'))\n    model.add(BatchNormalization())\n    # To be able to merge into fully connected layer we have to flatten\n    model.add(Flatten())\n    model.add(Dropout(0.4))\n    # Lets add softmax activated neurons as much as number of classes\n    model.add(Dense(num_classes, activation = \"softmax\"))\n    # Compile the model with loss and metrics\n    model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(), metrics=['accuracy'])\n    \n    return model","bc81d584":"def model_cnn2(input_shape=input_shape,num_classes=num_classes): \n    model = Sequential()\n    model.add(Conv2D(64, kernel_size=(2, 2), strides=(1, 1), activation='relu', input_shape=input_shape))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(128, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n    model.add(BatchNormalization())\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(256, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(512, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    model.add(Flatten())\n\n    # model.add(Dense(512, activation='elu'))\n    # model.add(BatchNormalization())\n    # model.add(Dropout(droprate))\n\n    # model.add(Dense(256, activation='elu'))\n    # model.add(BatchNormalization())\n    # model.add(Dropout(droprate))\n\n    model.add(Dense(512, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.25))\n    model.add(Dense(num_classes, activation='softmax'))\n\n    model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(), metrics=['accuracy'])\n    return model","51b35185":"def LeNet5(input_shape=input_shape,num_classes=num_classes):\n    model = Sequential()\n    model.add(Conv2D(6, kernel_size=(5, 5), strides=(1, 1), activation='relu', input_shape=input_shape, padding=\"same\"))\n    model.add(AveragePooling2D(pool_size=(2, 2), strides=(1, 1), padding='valid'))\n    model.add(Conv2D(16, kernel_size=(5, 5), strides=(1, 1), activation='relu', padding='valid'))\n    model.add(AveragePooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))\n    model.add(Conv2D(120, kernel_size=(5, 5), strides=(1, 1), activation='relu', padding='valid'))\n    model.add(Flatten())\n    model.add(Dense(84, activation='relu'))\n    model.add(Dense(num_classes, activation='softmax'))\n    model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(), metrics=['accuracy'])\n    return model","30d17ac5":"# num_classes = 29\n# img_rows, img_cols = 32,32\n# droprate = 0.25\n# # MODEL\n# input_shape = (img_rows, img_cols, 3)\n# model = Sequential()\n# model.add(Conv2D(64, kernel_size=(2, 2), strides=(1, 1), activation='relu', input_shape=input_shape))\n# model.add(BatchNormalization())\n\n# model.add(Conv2D(128, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n# model.add(BatchNormalization())\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n\n# model.add(Conv2D(256, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n# model.add(BatchNormalization())\n\n# model.add(Conv2D(512, kernel_size=(4, 4), strides=(1, 1), activation='relu', padding='same'))\n# model.add(BatchNormalization())\n# model.add(Dropout(droprate))\n# model.add(Flatten())\n\n# # model.add(Dense(512, activation='elu'))\n# # model.add(BatchNormalization())\n# # model.add(Dropout(droprate))\n\n# # model.add(Dense(256, activation='elu'))\n# # model.add(BatchNormalization())\n# # model.add(Dropout(droprate))\n\n# model.add(Dense(512, activation='relu'))\n# model.add(BatchNormalization())\n# model.add(Dropout(droprate))\n# model.add(Dense(num_classes, activation='softmax'))\n\n# model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(), metrics=['accuracy'])\n","36aec230":"print(\"My Custom CNN Network1:\")\nplot_model(model_cnn1(), to_file='custom-cnn1.png', show_shapes=True, show_layer_names=True)","044ea4a6":"print(\"My Custom CNN Network2:\")\nplot_model(model_cnn2(), to_file='custom-cnn2.png', show_shapes=True, show_layer_names=True)","1e76e7e5":"print(\"Master Yann LeCun's LeNet-5 Network:\")\nplot_model(LeNet5(), to_file='lenet-5.png', show_shapes=True, show_layer_names=True)","390b5641":"model = []\nmodel.append(model_cnn1())\nmodel.append(model_cnn2())\nmodel.append(LeNet5())","0544f2c6":"datagen = ImageDataGenerator(rotation_range=10, zoom_range = 0.1, width_shift_range=0.1, height_shift_range=0.1)\ndatagen.fit(X_train)","173474c7":"models = []\nfor i in range(len(model)):\n    model[i].fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                                        epochs = epochs, steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                                        validation_data = (X_valid, y_valid), \n                                        callbacks=[ReduceLROnPlateau(monitor='loss', patience=3, factor=0.1)], \n                                        verbose=2)\n    models.append(model[i])","ead83cc2":"test_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/test.csv')\ntest_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/test')\n\n## read these all training images paths as Series\ntest_images_paths = pd.Series(sorted(list(test_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntest_images_paths.head()","4729d3a7":"print('Number of Instances in test_set is', len(test_images_paths))","5a035c77":"test_full_set = np.empty((3360, 32, 32, 3), dtype=np.float32)  #take only the first 3 channels\n\nfor idx, path in enumerate(test_images_paths):\n    img = plt.imread(path)\n    img = img[:,:,:3]\n    test_full_set[idx] = img\n    \nprint('test_full_set.shape =>', test_full_set.shape)","da91b7bf":"import scipy","896c017b":"labels = []\nfor m in models:\n    predicts = np.argmax(m.predict(test_full_set), axis=1)\n    labels.append(predicts)\n    \n# Ensemble with voting\nlabels = np.array(labels)\nlabels","ade8643f":"# labels = np.transpose(labels)\nlabels = scipy.stats.mode(labels)[0]\nlabels","856227df":"labels = np.squeeze(labels)\nlabels","4ae2e8b4":"test_labels['label'] = labels","9d705d82":"test_labels","8f16e141":"test_labels[['id', 'label']].to_csv('\/kaggle\/working\/submission.csv', index=False)","49eb2cc0":"## Evaluation on Testing DataSet","d6b6089d":"## Explore the Data","989968a7":"`Only for training here`","a4492480":"## Data Preprocessing","1f13d354":"## Loading the Data and Look at the Big Picture","fe878efc":"## Model Training","a56033ac":"## Split the Data"}}