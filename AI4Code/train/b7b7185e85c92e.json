{"cell_type":{"9193dc77":"code","ea678d6c":"code","6ccd7c00":"code","392db82e":"code","879ce629":"code","8c6e0cc3":"code","883f13c7":"code","d8992c4a":"code","889bc575":"code","cd804182":"code","9b52535a":"code","fcae888e":"code","fff8aba4":"code","aca2286a":"code","bb5b1357":"code","b5a859b2":"code","36d50d26":"code","1d96e0e4":"code","2372d5f9":"code","27c9102f":"code","86029b27":"code","22bb49f9":"code","2072c804":"code","9a6fd46a":"code","45736f3c":"code","0b219557":"code","72dcb8c8":"code","410766ab":"code","b724c324":"code","a2e312f8":"code","3b410016":"code","6f57e7c4":"code","f61ebec9":"code","bf4ea616":"code","7d70a032":"code","d0dde12f":"code","06405cc3":"code","c8891bc1":"code","9e627012":"code","00db3626":"code","61268d10":"code","fc8cf527":"code","9ccf1c0c":"code","2408121e":"code","40be6faa":"code","bd136c6e":"code","28c8a440":"code","18dd01f3":"code","903320e9":"code","b342e7ef":"markdown","d6610051":"markdown","12f16728":"markdown","2d45aaf1":"markdown","0f68cebf":"markdown"},"source":{"9193dc77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ea678d6c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6ccd7c00":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","392db82e":"print(data.shape)\nprint(store.shape)","879ce629":"data.head()","8c6e0cc3":"store.head()","883f13c7":"data.info()\n# data.dtypes","d8992c4a":"data.describe(include='object')","889bc575":"data.describe()[['Sales','Customers']]","cd804182":"data.describe()[['Sales','Customers']].loc['mean']","9b52535a":"data.describe()[['Sales','Customers']].loc['min']","fcae888e":"data.describe()[['Sales','Customers']].loc['max']","fff8aba4":"data.Store.nunique()","aca2286a":"data.head()\ndata.Store.value_counts().head(50).plot.bar()","bb5b1357":"data.Store.value_counts().tail(50).plot.bar()","b5a859b2":"data.Store.value_counts()","36d50d26":"data.DayOfWeek.value_counts()","1d96e0e4":"data.Open.value_counts()","2372d5f9":"data.Promo.value_counts()","27c9102f":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id= data.Store.unique()[0]\nprint(store_id)\nstore_rows=data[data['Store']==store_id]\nprint(store_rows.shape)\n# store_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","86029b27":"# store_rows[store_rows['Sales']==0]","22bb49f9":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows = test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","2072c804":"store_rows['Sales'].plot.hist()\n# it is slightly skewed.","9a6fd46a":"data['Sales'].plot.hist()\n# it is slightly skewed.","45736f3c":"store.head()","0b219557":"# store.isna.sum()","72dcb8c8":"store_id=store[store['Store']==1].T","410766ab":"store[~store['Promo2SinceYear'].isna()].iloc[0]","b724c324":"# Method1\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nstore['Promo2SinceWeek']= store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']= store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']= store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) \n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']= store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']= store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()\n      ","a2e312f8":"data_merged = data.merge(store, on='Store',how='left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #to cross check if there are any missing values","3b410016":"# encoding\n# 3 categorical column,1 date column, rest are numerical\n# data_merged.dtypes\ndata_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['dayofweek']=data_merged['Date'].dt.strftime('%a')\n","6f57e7c4":"# Decision tress - label encoding should be used.\n# regression - one hot encoding must be used.","f61ebec9":"# data_merged.dtypes\n# StateHoliday,StoreType,Assortment,PromoInterval\ndata_merged['StateHoliday'].unique()\n# for creating dummy variables - label encoding is used\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)\ndata_merged","bf4ea616":"# encoding assorted\ndata_merged['Assortment']\n# for creating dummy variables - label encoding is used\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)\ndata_merged","7d70a032":"data_merged['StoreType'].unique()\ndata_merged['StoreType']=data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType']=data_merged['StoreType'].astype(int)\ndata_merged","d0dde12f":"data_merged['PromoInterval'].unique()\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","06405cc3":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Date'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","c8891bc1":"# from sklearn.tree import DecisionTreeRegressor\n\n# model_dt = DecisionTreeRegressor(max_depth=20,random_state=1).fit(train_x,train_y)\n# validate_y_pred = model_dt.predict(validate_x)\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","9e627012":"!pip install pydotplus","00db3626":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","61268d10":"draw_tree(model_dt,features)","fc8cf527":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nnp.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))","9ccf1c0c":"# submitting the train on test data set","2408121e":"model_dt.feature_importances_","40be6faa":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nplt.barh(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","bd136c6e":"stores_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(stores_avg_cust,on='Store',how='left')\ntest.shape,test_1.shape\ntest_merged = test_1.merge(store,on='Store',how='inner')\ntest_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged[\"Date\"],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)\n","28c8a440":"test_merged","18dd01f3":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred) - 1","903320e9":"submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsubmission_predicted = pd.DataFrame({'Id':test['Id'],'Sales':test_pred_inv})\nsubmission_predicted.to_csv('submission.csv',index=False)\nsubmission_predicted.head()","b342e7ef":"****Store - It is categorical column hence min and max must not be done. we do value counts to check if every category has same amount of data********","d6610051":"store_test_rows","12f16728":"****Granularity - One big brand has various number of branches and each rows is the data of that branch day wise****","2d45aaf1":"****Granularity - Here it is the metadata of the branches with respect to promotional events events conducted overall****","0f68cebf":"# steps done in the current ml data\n\n* summary stats\n* understand your data\n* data preprocessing\n --missing value imputation\n --transformation\n --scaling\n --encoding\n* model fitting'\n* model summary\n* Prediction\n* Evaluation"}}