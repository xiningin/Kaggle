{"cell_type":{"1fa028ca":"code","a74ef081":"code","9ca929e9":"code","48a2d19d":"code","b8e48a4d":"code","514b9aef":"code","26fe28d4":"code","18263345":"code","d85e0201":"code","cd72f888":"code","c0891432":"code","34e3e9f3":"code","f12ecca9":"code","f4fad0f3":"code","e0154948":"code","24f4849f":"code","b3f1f97f":"code","2f9e7e1c":"code","0531d468":"code","336709ef":"code","0710fdb2":"code","13cd6a8f":"code","7b8e2cc4":"code","f8823621":"code","fa30d70e":"code","7c81ac6b":"code","853aceb2":"code","f4d55b3d":"code","606c1e88":"code","26458f2c":"code","eee8146e":"code","3517163c":"code","5feec708":"markdown"},"source":{"1fa028ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a74ef081":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import concatenate\n\nimport os\nimport cv2\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","9ca929e9":"! dir ..\/ ","48a2d19d":"train_path = []\nlabel_train = []\ntest_path = []\nlabel_test = []\n\n\npath_train = '..\/input\/fingers\/fingers\/train\/'\npath_test = '..\/input\/fingers\/fingers\/test\/'\n\nX_train_new = []\nX_test_new = []\n\nfor filename in os.listdir(path_train):\n    train_path.append(path_train+filename) #complete path\n    whole_label = filename[-6:-4]\n    label_train.append(whole_label)\n    img = cv2.imread(path_train+filename)\n    img = cv2.resize(img, (50,50))\n    X_train_new.append(img)\n    \n    \n\n\nfor filename in os.listdir(path_test):\n    test_path.append(path_test+filename) #complete path\n    whole_label = filename[-6:-4]\n    label_test.append(whole_label)\n    img = cv2.imread(path_test+filename)\n    img = cv2.resize(img, (50,50))\n    X_test_new.append(img)\n\n","b8e48a4d":"plt.imshow(X_train_new[0])\nplt.title(label_train[0]);","514b9aef":"X_train = np.array(X_train_new)\nX_test = np.array(X_test_new)\n\nprint(X_train.shape)\nprint(X_test.shape)","26fe28d4":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","18263345":"X_train[0].shape","d85e0201":"plt.imshow(X_test[113])\nplt.title(label_test[113]);","cd72f888":"plt.imshow(X_train[3])\nplt.title(label_train[3]);","c0891432":"label_train[0]","34e3e9f3":"le = LabelEncoder()\n\ny_train_le = le.fit_transform(label_train)\ny_test_le = le.transform(label_test)\n","f12ecca9":"le.inverse_transform([9])","f4fad0f3":"y_train_ohe = tf.keras.utils.to_categorical(y_train_le)\ny_test_ohe = tf.keras.utils.to_categorical(y_test_le)","e0154948":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train_ohe, test_size=0.3)\n","24f4849f":"len(y_train[0])","b3f1f97f":"model = Sequential([\n    Conv2D(filters=32, kernel_size=5, padding='same', input_shape=(X_train[0].shape), activation='relu'),\n    Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'),\n    MaxPooling2D((2,2)),\n    \n    Dropout(0.3),\n    \n    Conv2D(filters=64, kernel_size=5, padding='same', input_shape=(X_train[0].shape), activation='relu'),\n    Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'),\n    MaxPooling2D((2,2)),\n    \n    Dropout(0.3),\n    \n    Flatten(),\n    \n    Dense(128, activation='relu', kernel_regularizer='l1'),\n    Dense(12, activation='softmax')\n    \n])","2f9e7e1c":"model.summary()","0531d468":"model.compile(\n    loss='categorical_crossentropy',\n    optimizer=\"adam\",\n    metrics=['accuracy', 'mse']\n)","336709ef":"X_train.shape\ny_train_ohe.shape","0710fdb2":"history = model.fit(X_train, y_train, validation_data=(X_val, y_val), batch_size=128, epochs=7, shuffle=True)","13cd6a8f":"model.evaluate(X_test, y_test_ohe)","7b8e2cc4":"plt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label='val_loss')\nplt.legend()\nplt.title('Loss vs Val Loss')","f8823621":"plt.plot(history.history['accuracy'], label='acc')\nplt.plot(history.history['val_accuracy'], label='val_acc')\nplt.legend()\nplt.title('Acc vs Val Acc')","fa30d70e":"predictions = model.predict(X_test)","7c81ac6b":"plt.imshow(X_test[0])","853aceb2":"le.inverse_transform([np.argmax(predictions[0])])[0]","f4d55b3d":"pred_val = [np.argmax(i) for i in predictions]","606c1e88":"len(pred_val)","26458f2c":"plt.imshow(X_train[0])\nplt.title(label_train[0])","eee8146e":"import random\n\nfor i in range(10):\n    number = random.randint(0,3600)\n    plt.figure(figsize=(8,8))\n    plt.subplot(2, 5, i+1)\n    plt.imshow(X_train_new[number])\n    plt.title(f'Actual label {label_train[number]}')","3517163c":"import random\n\nfor i in range(10):\n    number = random.randint(0,3600)\n    plt.figure(figsize=(8,8))\n    plt.subplot(2, 5, i+1)\n    plt.imshow(X_test_new[number])\n    plt.title(f'Prediction is {le.inverse_transform([np.argmax(predictions[number])])[0]}\\n Actuall output is {label_test[number]}')","5feec708":"## Converting to numpy array"}}