{"cell_type":{"37317f49":"code","fdf2ef08":"code","ec1d3fa9":"code","8b5757a8":"code","1ba1a464":"code","8ac381d1":"code","cc6f598b":"code","30ed5ae3":"code","25e7d65b":"code","3b235941":"code","c1e1b6a1":"code","8d3a1dfd":"code","31bbbd0a":"code","3d050f1d":"code","bdf90b7c":"code","158187b4":"code","131623b3":"code","1a25268c":"code","a4fb3ccf":"code","41ec6dea":"code","7a985a5e":"code","69205b70":"code","27d3e8cf":"code","be906af4":"code","3a122893":"code","4a587b54":"code","42d53f67":"code","d7049233":"code","2cb908af":"code","31776e89":"code","574606d8":"code","009f19b8":"markdown","a8d25662":"markdown","b52d50c2":"markdown","95039edc":"markdown","4222a8ad":"markdown","c9abb96c":"markdown","ad9db87b":"markdown","c870e566":"markdown","b18f7aaa":"markdown","99c423eb":"markdown","889edf3c":"markdown","76bf0382":"markdown","4bda256e":"markdown","2de973cc":"markdown","79f6bbd1":"markdown","7d64839e":"markdown","e98372b8":"markdown","aa29d27d":"markdown","aa9bf1b9":"markdown","c7d0b5e8":"markdown","82c9c25b":"markdown","0889562f":"markdown","62f3284e":"markdown","f0614887":"markdown","dd58ccb1":"markdown","c19a370b":"markdown"},"source":{"37317f49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fdf2ef08":"def factorial(n):\n    \"\"\"\n    Input n ---> Output n!\n    \"\"\"\n    fact=1\n    for each in range(1,n+1):\n        fact = fact * each\n    return fact","ec1d3fa9":"print(\"5! =\", factorial(5))\nprint(\"0! =\", factorial(0))","8b5757a8":"def reverse(string):\n    \"\"\"\n    input \"string\"---> output \"gnirts\"\n    \"\"\"\n    list_ = []              # creating an empy list\n    for each in string:\n        list_.append(each)  # adding each letter at the end of list_\n    reversed_=list_[::-1]   # reversing the list_\n    joined = \"\".join(reversed_)\n    return joined\n        ","1ba1a464":"reverse(\"world\")","8ac381d1":"reverse(\"hello world\")","cc6f598b":"def reverse2(string):\n    reverse = string[::-1]  # slicing method\n    return reverse","30ed5ae3":"reverse2(\"good for you\")","25e7d65b":"def minutes_to_hours(num):\n    hours = num \/\/ 60            # hours is quotient\n    minutes = num % 60           # minutes is remainder\n    return print(hours,\"hours and\",minutes,\"minutes\")\n    ","3b235941":"minutes_to_hours(6)\nminutes_to_hours(60)\nminutes_to_hours(688)\nminutes_to_hours(986547)","c1e1b6a1":"def minutes_to_hours1(num):\n    import math\n    hours = math.floor(num \/60)  # rounding to lower value (for ex: 2.69 --> 2)      \n    minutes = num % 60           # minutes is remainder\n    return print(str(hours)+\":\"+str(minutes))   # str(hours)---> converting hours to string","8d3a1dfd":"minutes_to_hours1(6)\nminutes_to_hours1(60)\nminutes_to_hours1(688)\nminutes_to_hours1(986547)","31bbbd0a":"a = \"hello world\"\nword1 = a.split()[0][0].upper()+a.split()[0][1::]\nword2 = a.split()[1][0].upper()+a.split()[1][1::]\nb=[word1, word2]\n\" \".join(b)","3d050f1d":"def upper_case(text):\n    word_count = len(text.split())          # word qty in text\n    word_list = []                          # empty list for words that the first letters uppercased\n    i = 0\n    for each in text:\n        while i < word_count:\n            new_word = text.split()[i][0].upper() + text.split()[i][1::]      # splitting text into words and uppercasing first letters\n            word_list.append(new_word)\n            i = i + 1\n    return \" \".join(word_list)   ","bdf90b7c":"upper_case(\"let us try this function\")","158187b4":"def upper_case1(text):\n    words = text.split(\" \")\n    for i in range(0,len(words)):\n        words[i] = words[i][0].upper()+words[i][1::]\n    return \" \".join(words)","131623b3":"upper_case1(\"let me do it this way\")","1a25268c":"# There is function doing this :) ---> title()\n\"let me do it this way\".title()","a4fb3ccf":"def word_shuffle(str1, str2):\n    for letter in str2:\n        if letter not in str1:\n            return False\n    return True       ","41ec6dea":"word_shuffle(\"city\",\"tciy1\")","7a985a5e":"def freq(string):\n    \n    freq_str = \"\"\n    i=0\n    while i < len(string):\n        \n        l = string[i]\n        liste = [0,l]\n        \n        for j in range(len(string)):\n            if string[j] == l:\n                liste[0] += 1   \n \n        freq_str += \"\".join(map(str,liste))\n        string = string.replace(l, \"\")    \n    return freq_str\n\nfreq(\"aabderacced\")","69205b70":"def letter_freq1(strg):\n\n    # letter count of str\n    n = len(strg)   \n\n    # initializing frequency of each letters with zero\n    let_qty = ord(\"z\") - ord(\"a\") + 1               # letter quantity in alphabet (abcdefghijklmnopqrstuvwxyz)\n\n    freq = np.zeros(let_qty, dtype = np.int)        # creating n size of aray from zeros as type of integer.\n    # freq = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n    # there are 26 rows in array and each represent one letter from alphabet starting from a to z.\n\n\n    # counting the letters in strng in a for loop and increasing the count in each loop by updating the letter's row in freq\n    for i in range(n):\n        freq[ord(strg[i])-ord(\"a\")] +=1             # updating each letters frequency in rows of freq\n\n    for i in range(n):\n        if freq[ord(strg[i])-ord(\"a\")] != 0:\n            print(str(freq[ord(strg[i])-ord(\"a\")])+strg[i],end =\"\")\n            freq[ord(strg[i])-ord(\"a\")] = 0         # resetting the frequency to zero not to get it printed double","27d3e8cf":"letter_freq1(\"aabderacced\")","be906af4":"strg = \"120 \/ 4 = 3x\"\n\nfor i in range(10):\n    replaced = strg.replace(\"x\", str(i))\n    index_equal = strg.index(\"=\")    \n    if eval(replaced[:index_equal]) == eval(replaced[index_equal+1:]):\n        print(\"x = \",i)\n        \n    \n\n","3a122893":"eval(\"55\") == eval(\"50+5\")","4a587b54":"def array_rotate(list1):                        # example: list = [2,3,4,5]\n    n = len(list1)                              # length of list: n = 4\n    a = list1[0]                                # zeroth index: a = 2\n\n    result = \"\"                                 # empty string initialization as result \n    for i in range(a,n):                        \n        result = result + str(list1[i])\n    for i in range(a):\n        result = result + str(list1[i])\n    return result\n    ","42d53f67":"print(\"[1,2,3,4,5,6,7]-->\",array_rotate([1,2,3,4,5,6,7]))\nprint(\"[3,4,5,6,7,9,11,13]-->\",array_rotate([3,4,5,6,7,9,11,13]))\nprint(\"[5,4,5,6,7,9,11,13]-->\",array_rotate([5,4,5,6,7,9,11,13]))","d7049233":"def array_rotate1(list1):\n    result = \"\"\n    for each in list1[list1[0]:] + list1[:list1[0]]:\n        result = result + str(each)\n    return result\n","2cb908af":"print(\"[1,2,3,4,5,6,7]-->\",array_rotate1([1,2,3,4,5,6,7]))\nprint(\"[3,4,5,6,7,9,11,13]-->\",array_rotate1([3,4,5,6,7,9,11,13]))\nprint(\"[5,4,5,6,7,9,11,13]-->\",array_rotate1([5,4,5,6,7,9,11,13]))","31776e89":"def array_pairs(list1):\n\n    # converting string\n    pairs = \"\"\n\n    for i in range(len(list1)):\n        pairs += str(list1[i])\n        if i%2 == 1:\n            pairs += \",\"\n    pairs = pairs.split(\",\")\n\n    # find pairs that do not have reverse\n    no_reverse = []\n    for i in pairs:\n        if i[::-1] not in pairs:\n            no_reverse.append(i)\n\n    # if there is no reverse pair; print ok\n    if no_reverse == []:\n        print(\"Ok, List is composed of pairs!\")\n\n    # if there is reverse pair: print\n\n    else:\n        result = \"\"\n        for each in no_reverse:\n            result = result + str(each)+\",\"\n        print(result,\"those not have pairs\")\n","574606d8":"array_pairs([1,2,2,1,3,4,4,3,7,8,9,0])","009f19b8":"<a id=\"1\"><\/a>\n## 1.Loading Libraries","a8d25662":"<a id=\"5\"><\/a>\n## 5.Uppercasing the first letter of the words in a text","b52d50c2":"* input = [1,2,2,1,3,4]\n* output = \"3,4\"\n* input = [5,6,6,5,3,4,4,3]\n* output = \"ok\"","95039edc":"* We can do it with another way: ","4222a8ad":"<a id=\"10\"><\/a>\n## 10.Array pairs","c9abb96c":"<a id=\"8\"><\/a>\n## 8.Finding missing digit","ad9db87b":"* Input--> Let say we have a string as \"klmkqllnmmk\"\n* Output ---> \"3kk3lll3mmm1q1n\"\n* Algorithm will calculate the frequency of each letters and write in front of letters.","c870e566":"<a id=\"2\"><\/a>\n## 2.Factorial Algorithm","b18f7aaa":"<a id=\"9\"><\/a>\n## 9.Array\/List rotation","99c423eb":"\n* input --> [2,3,4,5],algorithm orders list items: beacuse the first item is 2, output will start 4 because it is in the 2nd index.\n* output --> 4523\n* input --> [4,5,6,7,8,9,10,11,12,13]\n* output --> 89101112134567","889edf3c":"<a id=\"4\"><\/a>\n## 4.Algorithm that converts minutes to \"hours and min\"","76bf0382":"## This kernel includes some algorithm examples written in python.","4bda256e":"![image.png](attachment:image.png)","2de973cc":"* input as \"let us try this\"\n* output as \"Let Us Try This\"","79f6bbd1":"### An other alternative:","7d64839e":"* input to be 2 strings as \"city\", \"tyic\"\n* outputs:\n* if \"city\" = tyic\" --> output true\n* if \"city\" not equal \"tyic\" --> output false","e98372b8":"* Alternative way:","aa29d27d":"## Alternative way:","aa9bf1b9":"* Input is minutes like 156 \n* Output will be hour:min format like \"2 hours and 36 minutes\"","c7d0b5e8":"* Alternative way:","82c9c25b":"<a id=\"3\"><\/a>\n## 3.Algorithm that reverses a string","0889562f":"<a id=\"7\"><\/a>\n## 7.Frequency of letters in a string","62f3284e":"<a id=\"6\"><\/a>\n## 6.Word shuffeling","f0614887":"## Table of Contents\n* [1. Loading Libraries](#1) <br>\n* [2. Factorial algorithm](#2) <br>\n* [3. Algorithm that reverses a string](#3) <br>\n* [4. Algorithm that converts minutes to hour:min](#4) <br>\n* [5. Uppercasing the first letters of the words in a text](#5) <br>\n* [6. Word shuffeling](#6) <br>\n* [7. Frequency of letters in a string](#7) <br>\n* [8. Finding missing digit](#8) <br>\n* [9. Array\/List rotation](#9) <br>\n* [10.Array pairs](#10) <br>","dd58ccb1":"* input will be \"n\"--> integer\n* output will be n!","c19a370b":"* Let say we have a string \"world\" as input.\n* We will get \"dlrow\" as output."}}