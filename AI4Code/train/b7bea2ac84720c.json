{"cell_type":{"6ca79697":"code","6ca1f4c9":"code","1b083d0b":"code","35d3611a":"code","bafacffa":"code","6d800aa5":"code","572c80c9":"code","8c6598c3":"code","a0ce230c":"code","06781727":"code","e2d7368c":"code","4201e7e2":"code","c323f33d":"code","92c16810":"code","e1da8b02":"code","2c72a1a1":"code","c45546f6":"code","ee17533f":"code","3bf2d336":"markdown","a13e5357":"markdown","7f38833c":"markdown","369129ac":"markdown","7afdb5af":"markdown","690b17f4":"markdown","99df483e":"markdown","a7f8f408":"markdown","51150c3e":"markdown","467b58b0":"markdown","66077652":"markdown","7cdeb387":"markdown","9d51bbe1":"markdown","0749ce2e":"markdown","09f86b3e":"markdown","6555fe1d":"markdown","930d1111":"markdown","65e24ca6":"markdown"},"source":{"6ca79697":"!pip install imageio","6ca1f4c9":"import os\n\nimport imageio\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport pandas as pd\nimport PIL\nfrom PIL import Image\nimport skimage\nimport skimage.color\n\n%matplotlib inline","1b083d0b":"data_dir = '..\/input'\nimg_dir = os.path.join(data_dir, 'bee_imgs', 'bee_imgs')\ndata_csv = os.path.join(data_dir, 'bee_data.csv')\ndata = pd.read_csv(data_csv)\nprint('Number of rows:', len(data))","35d3611a":"data.head()","bafacffa":"def to_file_path(file_name):\n    return os.path.join(img_dir, file_name)\n\ndata = data.assign(**{'img': data.file.transform(to_file_path)})","6d800aa5":"example_img_path = data.iloc[0].img\nimg = mpimg.imread(example_img_path) # Numpy array","572c80c9":"plt.imshow(img)\nplt.title('Original image')","8c6598c3":"img_gray = skimage.color.rgb2gray(img)\nplt.imshow(img_gray, cmap='gray')\nplt.title('Grayscale')","a0ce230c":"from skimage import exposure\nfrom functools import partial\n\n# http:\/\/scikit-image.org\/docs\/dev\/auto_examples\/color_exposure\/plot_equalize.html#sphx-glr-auto-examples-color-exposure-plot-equalize-py\ndef plot_img_and_hist(image, axes=None, bins=64, title=None):\n    \"\"\"Plot an image along with its histogram and cumulative histogram.\n\n    \"\"\"\n    if axes is None:\n        fig, axes = plt.subplots(1, 2, gridspec_kw = {'width_ratios':[1.5, 1]})\n        fig.set_size_inches((8, 4))\n        # fig.tight_layout()\n    ax_img, ax_hist = axes\n    # ax_cdf = ax_hist.twinx()\n\n    # Display image\n    ax_img.imshow(image, cmap=plt.cm.gray)\n    ax_img.set_axis_off()\n    \n    if title is not None:\n        ax_img.set_title(title)\n\n    # Display histograms per channel\n    red = image[:, :, 0]\n    green = image[:, :, 1]\n    blue = image[:, :, 2]\n    \n    plot_hist = partial(ax_hist.hist, bins=bins, histtype='bar', linewidth=2, alpha=0.3, density=True)\n    plot_hist(red.ravel(), color='red')\n    plot_hist(green.ravel(), color='green')\n    plot_hist(blue.ravel(), color='blue')\n\n    ax_hist.set_xlabel('Pixel intensity')\n    ax_hist.set_xlim(0, 1)\n    ax_hist.set_ylim([0, 3])\n    ax_hist.set_yticks([])\n    \n    ax_hist.set_title('Histogram')\n\n    # Display cumulative distribution\n    # img_cdf, bins = exposure.cumulative_distribution(image, bins)\n    # ax_cdf.plot(bins, img_cdf, 'r')\n    # ax_cdf.set_yticks([])\n\n    return ax_img, ax_hist # , ax_cdf","06781727":"plot_img_and_hist(img, title='Original image')","e2d7368c":"low = 0.10  # Pixels with intensity smaller than this will be black\nhigh = 0.90  # Pixels with intensity larger than this will be white\nimg_rescaled = exposure.rescale_intensity(img, in_range=(low, high))\nplot_img_and_hist(img_rescaled, title='Rescaled intensity')","4201e7e2":"img_eq = exposure.equalize_hist(img)\nplot_img_and_hist(img_eq, title='Equalized histogram')","c323f33d":"img_adapteq = exposure.equalize_adapthist(img, clip_limit=0.03)\nplot_img_and_hist(img_adapteq, title='Adaptive histogram equalization')","92c16810":"gamma_corrected_2 = exposure.adjust_gamma(img, 2.0)\nplot_img_and_hist(gamma_corrected_2, title='Gamma adjustment, $\\gamma=2.0$')","e1da8b02":"gamma_corrected_05 = exposure.adjust_gamma(img, 0.5)\nplot_img_and_hist(gamma_corrected_05, title='Gamma adjustment, $\\gamma=0.5$')","2c72a1a1":"def show_imageio(img_path):\n    img = imageio.imread(img_path)\n    plt.imshow(img)\n    plt.title('Image shape: (%d, %d, %d)' % img.shape)\n\nshow_imageio(example_img_path)","c45546f6":"# This is a lazy operation; this function identifies the file, but the file remains open and the \n# actual image data is not read from the file until you try to process the data (or call the load() method).\nimg = PIL.Image.open(example_img_path)\n\n# Print bounding box\nprint('Original image bounding box:', img.getbbox())\n\n# Cropping\nimg = img.crop((0, 0, 150, 100))\n\n# Print bounding box\nprint('Post-crop bounding box:', img.getbbox())\n\n# Resize\nimg = img.resize((600, 400), resample=PIL.Image.NEAREST)\n\n# Print bounding box\nprint('Post-resize bounding box:', img.getbbox())\n\n# Rotate image\nimg = img.rotate(180)\n\n# Show\nplt.imshow(img)\nplt.title('Image after cropping, resizing and rotating')","ee17533f":"# Get image as list of pixel values\narr = list(img.getdata())\n\n# Reshape to 3D (numpy) array, note that img.size[0] is width and img.size[1] is height\nimg_np = np.array(arr).reshape((img.size[1], img.size[0], 3))\n\nprint('Numpy array shape:', img_np.shape)","3bf2d336":"Pillow image can be converted to Numpy array like this:","a13e5357":"### Plot original image with histogram","7f38833c":"### Define a helper function for plotting image and histogram","369129ac":"### Show first five rows of dataframe","7afdb5af":"### [Gamma adjustment](http:\/\/scikit-image.org\/docs\/dev\/api\/skimage.exposure.html#adjust-gamma)","690b17f4":"### Install dependencies","99df483e":"### [Contrast Limited Adaptive Histogram Equalization](http:\/\/scikit-image.org\/docs\/dev\/api\/skimage.exposure.html#equalize-adapthist)","a7f8f408":"### [Pillow library (Image)](https:\/\/pillow.readthedocs.io\/en\/3.1.x\/reference\/Image.html)\n\"The Python Imaging Library adds image processing capabilities to your Python interpreter. -- The library contains basic image processing functionality, including point operations, filtering with a set of built-in convolution kernels, and colour space conversions. The library also supports image resizing, rotation and arbitrary affine transforms.\"","51150c3e":"### Add a column `img` for file path to images","467b58b0":"### Plot image with matplotlib","66077652":"# Image preprocessing with [scikit-image](https:\/\/scikit-image.org\/)\nDataset: [Annotated honey bee images](https:\/\/www.kaggle.com\/jenny18\/honey-bee-annotated-images) from Kaggle","7cdeb387":"### [Rescale intensity](http:\/\/scikit-image.org\/docs\/dev\/api\/skimage.exposure.html#rescale-intensity): Boost contrast by \"stretching\" intensity between given min and max and clipping the rest","9d51bbe1":"### [Equalize histogram](http:\/\/scikit-image.org\/docs\/dev\/api\/skimage.exposure.html#skimage.exposure.equalize_hist)","0749ce2e":"### Use the first bee image as an example, read as Numpy array","09f86b3e":"### [ImageIO](http:\/\/imageio.github.io\/)\n\"Imageio is a Python library that provides an easy interface to read and write a wide range of image data, including animated images, video, volumetric data, and scientific formats.\"","6555fe1d":"## Examples of other libraries for working with images","930d1111":"### Convert image to grayscale","65e24ca6":"### Read data from `input` folder to Pandas dataframe"}}