{"cell_type":{"6b71cca3":"code","c72faf36":"code","3642f3b2":"code","49403d18":"code","2c08f429":"code","c8ff34d7":"code","7f4c6541":"code","5f32db11":"code","3701e39d":"code","5a8b7ec4":"code","9252598c":"code","97198eea":"code","8a9cfa93":"code","0422782c":"code","02bb3753":"code","0628de50":"code","6b531538":"code","5f1e9793":"code","3e3eed52":"code","37b48b1b":"code","2e9864c7":"code","fa51db37":"code","b581a7b2":"code","ddaec337":"code","a842e1ef":"code","23d23c93":"code","940f4584":"code","2eb2e38e":"code","dfa352c9":"code","6f8aaf0b":"code","e5f6f7ce":"code","48bf5716":"code","8c141778":"code","b325dbfa":"code","a8f3a958":"code","afdda9fb":"code","d196a492":"code","306d138e":"code","c82e51b1":"code","22919533":"code","48428d9f":"code","14720bd9":"code","2962d883":"code","9453c3ba":"code","b8130a7d":"code","16e16c5e":"code","94a608cb":"code","837421a9":"code","ca1dfec7":"code","39d1b6ec":"code","eb5fa9da":"code","ef8ef7a3":"code","1a246752":"code","12e46132":"code","de265f06":"code","2aff8373":"code","ee9db4f9":"code","0d46cdb7":"code","9691b668":"code","21d6cdd8":"code","37102f3c":"code","fee3fab9":"code","b842222d":"code","27498523":"code","084f2dbc":"code","5c052654":"code","547abf68":"code","ee6099fe":"code","5f4d039c":"code","5e6eb280":"code","4845b4bf":"code","b857c1f5":"code","196d45b0":"code","b2274cbd":"code","840764d4":"code","087232c9":"code","42b99b19":"code","34f159b2":"code","41038ca7":"markdown","4cf3653a":"markdown"},"source":{"6b71cca3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c72faf36":"\ndf = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_test.head()","3642f3b2":"df_test['Age']\ndf_test.loc[df_test['Age'].isnull()]","49403d18":"df_test.at[df_test.PassengerId == 980, 'Age'] = 28\ndf_test.at[df_test.PassengerId == 1044, 'Fare'] = 8.0500\n","2c08f429":"df_test.loc[df_test['Fare'].isnull()]","c8ff34d7":"df['family'] = df.Parch + df.SibSp\ndf_test['family'] = df_test.Parch + df_test.SibSp\n\ndef make_title(name):\n    arr_name = name.split()\n    for p in arr_name : \n        if '.' in p:\n            return p\n    return ''\n    \ndf_test['title'] = df_test.Name.apply(make_title)\ndf['title'] = df.Name.apply(make_title)","7f4c6541":"a, b = np.unique(df.title, return_counts=True)\nplt.bar(a, b);","5f32db11":"plt.hist(df.Survived); ","3701e39d":"plt.hist(df.Pclass);","5a8b7ec4":"print (list(df))\nprint (list(df_test))","9252598c":"df_title_groped = df.groupby(['title'],as_index =False).mean()\nave_age_title = df_title_groped[['title','Age']]\n\ndf_title_groped_test = df_test.groupby(['title'],as_index =False).mean()\nave_age_title_test = df_title_groped_test[['title','Age']]\n\n\nprint (ave_age_title)\nprint (ave_age_title_test)","97198eea":"\ndf = df.merge(ave_age_title, how='inner', on = ['title'])\ndf_test = df_test.merge(ave_age_title_test, how='inner', on = ['title'])\n","8a9cfa93":"import math","0422782c":"def age_func(data):\n    if math.isnan(data['Age_x']):\n        return data['Age_y']\n    else:\n        return data['Age_x']\n","02bb3753":"\ndf[\"Age\"] = df.apply(age_func, axis=1)\ndf_test[\"Age\"] = df_test.apply(age_func, axis=1)\n","0628de50":"df.head()\ndf_test.head()","6b531538":"df_test.head()","5f1e9793":"def corr_color(daf):\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    cax = ax.matshow(daf.corr());\n    fig.colorbar(cax)\n    ax.set_xticklabels(list(daf.columns.values));\n    ax.set_yticklabels(list(daf.columns.values));\n    ","3e3eed52":"corr_color(df)","37b48b1b":"bin_gender = lambda x: 0 if x == 'male' else 1\n\ndf_gender = df.copy()\ndf_gender_test = df_test.copy()\n\ndf_gender.Sex = df.Sex.apply(bin_gender)\ndf_gender_test.Sex = df_test.Sex.apply(bin_gender)\nprint (df_gender[['Sex', 'Survived']].corr())\n\nfemale_survived = df_gender['Survived'].loc[df_gender['Sex']==1]\nmale_survived = df_gender['Survived'].loc[df_gender['Sex']==0]\n\nbars = ['Female', 'Male']\ny_pos = np.arange(len(bars))\nplt.barh(y_pos,[female_survived.sum(), male_survived.sum()]);\nplt.yticks(y_pos, bars);","2e9864c7":"corr_color(df_gender[['Survived','Sex','Age_x']])\ncorr_color(df)","fa51db37":"df = df_gender.drop('Age_x', axis=1)\ndf = df.drop('Age_y',axis=1)\ndf = df.drop('Cabin',axis=1)\n\ndf_test = df_gender_test.drop('Age_x', axis=1)\ndf_test = df_test.drop('Age_y',axis=1)\ndf_test = df_test.drop('Cabin',axis=1)\n\n#print(df.head())\ndf_test.head()","b581a7b2":"df[['Age', 'Survived']].corr()","ddaec337":"#df[df.PassengerId == 980].Age = '28'\n#df_test.at[df_test.PassengerId == 980]\n#df_test.at[df.PassengerId == 980, 'Age'] = '28'\n#df_test.iloc[[411]]['Age']= 28\n#df_test[df_test.Age.isnull()]\n#df.loc[df.Embarked == np.nan, 'Embarked']\n#df.at[df.Embarked == np.nan, 'Embarked'] = 'M'\n#df\n#plt.hist(df.Embarked)","a842e1ef":"df.Ticket.describe()","23d23c93":"df['ticket_pre'] = df.Ticket.apply(lambda x:x.split()[0].replace('.','') if len(x.split())>1 else 'none')\ndf['ticket_suf'] = df.Ticket.apply(lambda x:x.split()[1].replace('.','') if len(x.split())>1 else x)\n\ndf_test['ticket_pre'] = df_test.Ticket.apply(lambda x:x.split()[0].replace('.','') if len(x.split())>1 else 'none')\ndf_test['ticket_suf'] = df_test.Ticket.apply(lambda x:x.split()[1].replace('.','') if len(x.split())>1 else x)","940f4584":"a, b = np.unique(df.ticket_pre, return_counts=True)\nplt.bar(a, b);","2eb2e38e":"a, b = np.unique(df.ticket_suf, return_counts=True)\nplt.bar(a, b);","dfa352c9":"df.ticket_pre.describe()","6f8aaf0b":"df_test.Fare.describe()","e5f6f7ce":"df_test[df_test.isnull().any(axis=1)]","48bf5716":"df_test.Pclass.describe()","8c141778":"df_test.loc[df_test.Embarked.isnull(),['ticket_suf', 'ticket_pre', 'Ticket', 'Embarked', 'Pclass']]","b325dbfa":"df_test.head()\n#df_test.loc[df.Embarked.isnull(),['ticket_suf', 'ticket_pre', 'Ticket', 'Embarked', 'Pclass']]","a8f3a958":"df_grouped = df.loc[df.Embarked.notnull(),['Embarked', 'Pclass', 'title', 'Fare']].groupby('title')\ndf_grouped.head()","afdda9fb":"df.at[df.Embarked.isnull(),'Embarked']='M'\ndf_test.at[df_test.Embarked.isnull(),'Embarked']='M'","d196a492":"df_test.info()","306d138e":"df_test.loc[df_test['Sex'].isnull(),['ticket_suf', 'ticket_pre', 'Ticket', 'Embarked', 'Pclass', 'Name', 'title', 'Age','family', 'PassengerId', 'Sex']]","c82e51b1":"df['child'] = df.Age.apply(lambda x: 1 if x <= 16 else 0)\ndf_test['child'] = df_test.Age.apply(lambda x: 1 if x <= 16 else 0)","22919533":"df.head()","48428d9f":"df_test.head(50)","14720bd9":"a,b = np.unique(df.Survived, return_counts = True)\nplt.pie (b);","2962d883":"a,b = np.unique(df.child, return_counts = True)\nplt.pie (b, labels = a);","9453c3ba":"total_ppl = len(df.Sex)\ntot_woman = df.Sex.sum()\ntot_man = total_ppl - tot_woman\ndf_sex_survived = df.Sex[df.Survived == 1]\ndf_sex_not_survived = df.Sex[df.Survived == 0]\ns_woman = df_sex_survived.sum()\nn_woman = df_sex_not_survived.sum()\ns_man = len(df_sex_survived) - s_woman\nn_man = len(df_sex_not_survived) - n_woman","b8130a7d":"hights = np.array([s_woman, s_man, n_woman, n_man])\nloc = np.arange(len(hights))\nplt.bar(loc ,hights, tick_label = ['s w', 's m', 'n w', 'n m'])","16e16c5e":"hights = np.array([s_woman\/tot_woman, s_man\/tot_man, n_woman\/tot_woman, n_man\/tot_man])\nloc = np.arange(len(hights))\nplt.bar(loc ,hights, tick_label = ['s w', 's m', 'n w', 'n m']);","94a608cb":"import seaborn as sns","837421a9":"sns.catplot('Survived', data = df, kind='count', hue='title');","ca1dfec7":"sns.catplot('child', data = df, kind='count', hue='Survived');","39d1b6ec":"df.head()","eb5fa9da":"sns.catplot('title', data = df, kind='count', hue='Survived');","ef8ef7a3":"sns.catplot('family', data = df, kind='count', hue='Survived');","1a246752":"sns.catplot('ticket_pre', data = df, kind='count', hue='Survived');","12e46132":"sns.catplot('Embarked', data = df, kind='count', hue='Survived');","de265f06":"sns.catplot('Pclass', data = df, kind='count', hue='Survived');","2aff8373":"sns.catplot('Sex', data = df, kind='count', hue='Survived');","ee9db4f9":"df['bin_age'] = df.Age.apply(lambda x: int(x\/5)*5)\ndf_test['bin_age'] = df_test.Age.apply(lambda x: int(x\/5)*5)\nsns.catplot('bin_age', data = df, kind='count', hue='Survived');","0d46cdb7":"sns.catplot('Survived', data = df, kind='count', hue='bin_age');","9691b668":"list(df_test)\ndf_test.head()","21d6cdd8":"feature_names = ['Pclass','Sex','SibSp','Parch','Fare','Embarked','family','title','Age','ticket_pre','ticket_suf','child','bin_age', 'PassengerId']","37102f3c":"X = df[feature_names]\ny = df['Survived']\nx_test = df_test[feature_names]\n\nX['label'] = 'train'\nx_test['label'] = 'test'\n\nconcat_x = pd.concat([X , x_test])","fee3fab9":"X.isnull().values.any()","b842222d":"x_test.isnull().values.any()\n#x_test","27498523":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","084f2dbc":"concat_x.describe()","5c052654":"#X = pd.get_dummies(X,drop_first=True)\n#x_test = pd.get_dummies(x_test,drop_first=True)\nconcat_x = pd.get_dummies(concat_x, drop_first=True)\n\nX = concat_x[concat_x['label_train'] == 1]\nx_test = concat_x[concat_x['label_train'] == 0]\n\nX = X.drop('label_train', axis=1)\nx_test = x_test.drop('label_train', axis=1)\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1,test_size=0.2)","547abf68":"train_X.head()","ee6099fe":"from sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import balanced_accuracy_score","5f4d039c":"tree_model = DecisionTreeClassifier(random_state=1)\ntree_model.fit(train_X, train_y)\nval_predictions = tree_model.predict(val_X)\nval_err = balanced_accuracy_score(val_y, val_predictions)\nprint(val_err)","5e6eb280":"tree_model = DecisionTreeClassifier(max_leaf_nodes=10, random_state=1)\ntree_model.fit(train_X, train_y)\npreds_val = tree_model.predict(val_X)\nval_err = balanced_accuracy_score(val_y, preds_val)\nprint(val_err)","4845b4bf":"import numpy\ntree_model_2 = DecisionTreeClassifier(max_leaf_nodes=10, random_state=1)\ntree_model_2.fit(X, y)\nreal_preds = tree_model_2.predict(x_test)\n#df_pred = pd.concat([x_test['PassengerId'], real_preds])\n#df_pred = [x_test['PassengerId'],real_preds]\nnumpy.savetxt(\"f_2.csv\", np.c_[x_test['PassengerId'],real_preds], delimiter=\",\")\n#numpy.savetxt(\"f_2.csv\", df_pred, delimiter=\",\")","b857c1f5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import balanced_accuracy_score","196d45b0":"rf_model = RandomForestClassifier(max_leaf_nodes=15,random_state=1)\nrf_model.fit(train_X, train_y)\npreds = rf_model.predict(val_X)\nrf_val_err = balanced_accuracy_score(val_y, preds)\nprint(rf_val_err)\n","b2274cbd":"x_test.describe()","840764d4":"import numpy\nreal_model = RandomForestClassifier(max_leaf_nodes=15,random_state=1)\nreal_model.fit(X, y)\nreal_preds = real_model.predict(x_test)\ndf_pred = [x_test['PassengerId'],real_preds]\nnumpy.savetxt(\"f.csv\", np.c_[x_test['PassengerId'],real_preds], delimiter=\",\")\n\n#numpy.savetxt(\"f_3.csv\", df_pred, delimiter=\",\")","087232c9":"feature_names_no = ['Pclass','Sex','SibSp','Parch','Fare','Embarked','Age']\ndf_no_changes = pd.read_csv(\"..\/input\/train.csv\")\ndf_no_changes = df_no_changes.dropna()\nX_no = df_no_changes[feature_names_no]\ny_no = df_no_changes['Survived']\nX_no = pd.get_dummies(X_no,drop_first=True)\n\ntrain_X_no, val_X_no, train_y_no, val_y_no = train_test_split(X_no, y_no, random_state = 1,test_size=0.2)\nrf_model.fit(train_X_no, train_y_no)\npreds_no = rf_model.predict(val_X_no)\nrf_val_err_no = balanced_accuracy_score(val_y_no, preds_no)\nprint(rf_val_err_no)","42b99b19":"from xgboost import XGBClassifier","34f159b2":"my_model = XGBClassifier(n_estimators=10, learning_rate=0.01,max_leaf_nodes=200,random_state=1)\nmy_model.fit(train_X, train_y, early_stopping_rounds=10, \n             eval_set=[(val_X, val_y)],verbose=False)\n\npredictions = my_model.predict(val_X)\nprint(balanced_accuracy_score(predictions, val_y))\n","41038ca7":"### Random Forest Classifier","4cf3653a":"### comparison to accuray without changing the features"}}