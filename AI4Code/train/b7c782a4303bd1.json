{"cell_type":{"3bb58f0e":"code","571fecf3":"code","2e2be5aa":"code","d087903c":"code","4e79b38d":"code","0dae7757":"code","cf2f5896":"code","99eb64c1":"code","7b361164":"code","b5c28759":"code","0f27fb4e":"code","c971e86d":"code","afe2f8eb":"code","5a05897b":"code","82c7a2b2":"code","9c37496e":"code","f8607f3f":"code","98e5d9ec":"code","ae99151d":"code","46b5efb8":"code","60d37c09":"code","27bb0f2b":"code","a7f872ee":"code","37caaccd":"code","e18ca538":"code","4b4eabf4":"code","f970cdf9":"code","c0e1aca0":"code","0e0f23ca":"code","0df6f444":"code","eaa1ef26":"code","ca4c8f21":"code","25878bca":"code","6d92d3e4":"markdown","dd0e1922":"markdown","5ad0bbc6":"markdown","eb68366b":"markdown","0395d185":"markdown","310f8ac1":"markdown","f50bae74":"markdown","30069ba0":"markdown","2da2dc09":"markdown","7b416474":"markdown","43d05a25":"markdown","10d9bba1":"markdown","80beca32":"markdown","bc7ef159":"markdown","83b9cae4":"markdown","79046e74":"markdown","c737bfae":"markdown","c555522c":"markdown","8a80ca9c":"markdown","d11c1bf5":"markdown","ced4bb14":"markdown","4ce6424a":"markdown","1a1aaeab":"markdown","676eee82":"markdown","672e22bf":"markdown","4c734c5a":"markdown","d5e9ef19":"markdown","0d8fa7af":"markdown","609ca991":"markdown","3335bed3":"markdown","e1719817":"markdown","aafcb7ef":"markdown","3337a980":"markdown","0efce348":"markdown","6a515559":"markdown"},"source":{"3bb58f0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","571fecf3":"# Importing all the basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2e2be5aa":"match_data = pd.read_csv('..\/input\/ipldata\/matches.csv') # Importing datafile by using location. As we know it is csv file \nmatch_data # visualize data in the following table","d087903c":"match_data.info()  # We get basic information about data like null values count or datatypre column name etc.\n","4e79b38d":"# As umpire column is not important for our datset, so removing columns\nmatch_data.drop(columns=['umpire1','umpire2','umpire3'], inplace=True)","0dae7757":"match_data.shape #shape is used for getting column and row size","cf2f5896":"match_data.columns #Getting all column names in the dataset\n","99eb64c1":"match_data.team1.unique()","7b361164":"match_data.team1.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True) \n# Same team but with different name. So, we replaced it withits real and unique name","b5c28759":"match_data.team2.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\n# Same team but with different name. So, we replaced it withits real and unique name","0f27fb4e":"match_data.winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\n# Same team but with different name. So, we replaced it withits real and unique name","c971e86d":"# We can see that, there are many rows in the dataset where city is not mentioned or simply NaN. We need to find it out \nmatch_data[match_data.city.isna()]","afe2f8eb":"match_data.loc[[461,462,466,468,469,474,476],'city'] = 'Dubai' #As all the null cities venue is Dubai, we are going fill it with Dubai","5a05897b":"match_data.loc[[461,462,466,468,469,474,476]]  # Here we can check NaN is filled with Dubai.","82c7a2b2":"match_data.info() \n","9c37496e":"match_data[match_data.winner.isna()] # Checking where there is NaN in winner column","f8607f3f":"match_data.city.replace({'Bangalore' : 'Bengaluru'},inplace=True) # Replacing Bangalore to Begaluruby using replace function\nmatch_data.city.unique() # Here, we can check whether there is any mistake in city name","98e5d9ec":"match_data","ae99151d":"match_data.id.count()","46b5efb8":"num_of_matches = match_data.groupby('season')[['id']].count() # Grouping all the matches and season \n\nplt.title('Matches played in each season') # Plot table with given title\nplt.xlabel('Year')  # plotting x axis\nplt.ylabel('Count of matches') #Plotting y axis\nplt.xticks(num_of_matches.index) # importing number of matches played each year\nplt.bar(num_of_matches.index,num_of_matches.id,width=0.4, alpha=0.8);","60d37c09":"winner_team = match_data.groupby('winner')[['id']].count()\nwinner_team = winner_team.sort_values('id', ascending=False).reset_index()\nwinner_team.rename(columns = { 'id': 'matches_won','winner':'team'}, inplace = True)\nwinner_team","27bb0f2b":"plt.title('Number of matches won by each team',fontweight=800)\nplt.xlabel('Teams')\nplt.ylabel('Total no. of matches won')\nplt.xticks(rotation=90,fontsize=10)\nplt.bar(winner_team.team,winner_team.matches_won, alpha=0.8)","a7f872ee":"# Inference 4: Number of matches hosted by each city","37caaccd":"city_name = match_data.groupby('city')[['id']].count()\ncity_name=city_name.sort_values('id', ascending=False).reset_index()\ncity_name.rename(columns = { 'id': 'matches'}, inplace = True)\n\nplt.figure(figsize=(20, 15))\nplt.title('Number of matches hosted by each city')\nsns.barplot(y='city', x='matches', data=city_name);","e18ca538":"final_match_win = match_data.groupby('season').tail(1).sort_values('season').reset_index()\nfinal_match_win['winner'].value_counts()","4b4eabf4":"plt.title('Count of Season Winners')\nsns.countplot(x=final_match_win['winner']);","f970cdf9":"second_runnerup = pd.concat([final_match_win['team1'],final_match_win['team2']])\nsecond_runnerup.value_counts()","c0e1aca0":"plt.title('Second Runner up Team')\nsns.countplot(x=second_runnerup.value_counts());","0e0f23ca":"mom_count =match_data.groupby('player_of_match')[['id']].count()\nmom_count = mom_count.sort_values('id',ascending=False).head(10)\nmom_count","0df6f444":"matches_team = pd.concat([match_data['team1'],match_data['team2']])\nmatches_team_df=matches_team.value_counts().reset_index()  \nmatches_team_df.columns=['team','total_matches']   \nmatches_team_df.set_index('team',inplace=True)     \nmerged_stats_df=matches_team_df.merge(winner_team,on='team')\nmerged_stats_df['winning_percent'] = (merged_stats_df.matches_won\/merged_stats_df.total_matches)*100\nmerged_stats_df","eaa1ef26":"mi_csk=match_data[((match_data.team1 ==\"Mumbai Indians\") & (match_data.team2 ==\"Chennai Super Kings\")) | \n                  ((match_data.team2 ==\"Mumbai Indians\") & (match_data.team1 ==\"Chennai Super Kings\"))]\nmi_csk['winner'].value_counts()","ca4c8f21":"team_count=[];\nfor i in range(2008,2020):\n    team_count.append(match_data[match_data.season == i].team1.unique().shape[0])\n\nsns.barplot(x=np.arange(2008,2020),y=team_count)\nplt.title('Number of teams in each season')\nplt.xlabel('Seasons')\nplt.ylabel('No. of teams')\nplt.yticks(np.arange(0,11));","25878bca":"match_toss_winner_df = match_data[match_data['toss_winner']==match_data['winner']]\n\nmatch_toss_winner_df = match_toss_winner_df[match_toss_winner_df.result != 'tie']\n\ncount_toss_winner_decision_df = match_toss_winner_df['toss_decision'].value_counts() \n\ntoss_loser_match_winner_df = match_data[match_data['toss_winner']!=match_data['winner']] \n\ntoss_loser_match_winner_df = toss_loser_match_winner_df[toss_loser_match_winner_df.result != 'tie']\n\ncount_toss_decision_loser_df = toss_loser_match_winner_df['toss_decision'].value_counts()\n\nteam_bat_first_won =count_toss_decision_loser_df.field+count_toss_winner_decision_df.bat\n\nprint('Total number of matches where team batting first is the winner of the match is {}'.format(team_bat_first_won))","6d92d3e4":"#Question 5: How can we find out Toss winning tem is Match winner too?","dd0e1922":"#Question 1: Players who win Highest no of Man of the Match Title?","5ad0bbc6":"### Inference 6: Highest No. of second runner up team","eb68366b":"## Exploratory Analysis and Visualization","0395d185":"- Mumbai Indians won 17 and Chennai Super Kings won 11 matches in opposite.","310f8ac1":"- In this step, we can find out some interesting patternsw and insights from data.\n- we can show some ghraphs and charts to visualise the data.\n- Starting it with some basic questions in mind.","f50bae74":"- Here are teams which won matches from top to bottom.\n\n- But here are we can say that why Kochi Tuskers Kerala and Pune Warriors and Gujarat Lions are teams are very less won match?","30069ba0":"Removed extra or less effective columns**","2da2dc09":"- The analysis of the IPL dataset gives us some interesting trends and output.\n\n- Mumbai Indians is Highest Title winner team where as Chennai Super Kings is Highest Second Runner up team in IPL History.\n\n- Highest matches hosted are in the Mumbai and lowest matches hosted are in Bloemfontein.\n\n- Though Mumbai Indians won highest Titles, The winning percentage of the overall matches is winning titled to Chennai super kings upto 61% approx.\n\n- In near about 50 % of the matches, THe top winning team is match winning team.\n\n- Eventhough Highest number of teams participated in 2011 IPL season, maximun matches are palyed in 2013 season. Quite interesting. Yes?? :-)","7b416474":"#Question 2: In inference 3, bottom teams won less matches. But why?","43d05a25":"- We can notice here some points\n\n- City, winner, player of the match have some issue as their Non-Null value is not 756. We need to check it properly.\n\n- umpire1,umpire2,umpire3 are the columns which are logically not affect any match. there rules and decision are same for each match. Hence there presence is not mandatory in the dataset","10d9bba1":"### Inference 2: Number of matches played in each Year","80beca32":"#Question 3: If MI is Highest winner and CSK is Highest Runner up in terms of Winning. Then Who wins most matches in between?","bc7ef159":"- Here by observation we can check that,\n\n- There are NaN entries in city column. By reading such entries as shown above, we also observed that the venue mentioned in the above table is unique and that is Dubai. \n\n- So, logically all the matches are played in Dubai itself. So, replacing NaN with Dubai in next stage.","83b9cae4":"There are total 756 matches are played in IPL.","79046e74":"# Inferences and Conclusion","c737bfae":"- Mumbai tops the list to host IPL matches","c555522c":"Here, we can observed that the no. of matches played in 2013 is highest. But why?\n- Lets keep this is as usual. It will be solve in next step.","8a80ca9c":"- Here is the fact,\n\n1. Deccan Chargers, Pune Warriors, Gujarat Lions, Rising Pune Supergiant, Kochi Tuskers Kerala are comparatively less played matches. Either their team is not played some IPL seasons or Their team is merged withanother team.\n\n2. Whatever may be the reason, but we can not say these are worst performing team but we can say that these are less played team.","d11c1bf5":"### Inference 1: Besic question- How many matches played till date in IPL?","ced4bb14":"#Question 4: Why number of matches played in different  season is different?","4ce6424a":"- So, As we can see in above graph, The number of teams playing in IPL are differentin different season.\n\n- Hence no. of total matches played in different season is different.","1a1aaeab":"- We noticed here one another problem and that is Bangalore and Bengaluru are same cities but with different names.\n- So, we are going to convert it into 'Bengaluru'.","676eee82":"- Now, we notice here,\n- There are some NaN in 'winner' column. we need to check rows where winner is null.","672e22bf":"# References and Future Work","4c734c5a":"### Inference 3: Number of matches Won by Each Team","d5e9ef19":"Now, our dataset is ready for further anlysis.","0d8fa7af":"- So here is the output. There are total 350 matches in which toss winning team is the match winning team as well.","609ca991":"- By Adding more columns like score, wickets, Bowler etc to dataset will change many insights.\n- one more evertime issue 'DRS (Decision Review System)' is not mentioned in dataset which is quite important to check anf find pattern.\n- If there is addition of Wrong decision table which will may improve game quality in future.\n\n\n\nReferences:\n- Numpy Library\n- pandas library\n- kaggle website and perticular dataset","3335bed3":"- All are best players in the world. But, In terms of IPL performer, CH Gayle is the best who wons maximum man of the match.","e1719817":"- Here we get to know that Chennai Super Kings is the team with maximun number of runner up team.","aafcb7ef":"- Here we get aonther issue\n\n- [ 'Rising Pune Supergiants'and 'Rising Pune Supergiant, 'Delhi Daredevils'and 'Delhi Capitals' ] are nothing but same team.but in some cases it's chsanged name will impact on our result.\n\n- SO, here we change that name in real name.","3337a980":"### These insights arises some questions in my mind. Lets try to solve these questions for better understanding.","0efce348":"### Inference 5: Hightest No. of IPL Title winner ","6a515559":"- Here, we can say that the Most IPL titles are winning by Mumbai Indians."}}