{"cell_type":{"4daf80f3":"code","7de26854":"code","59979727":"code","0ac091cb":"code","9e258203":"code","c7cf24bc":"code","b78bb2b6":"code","d7cfb956":"code","63e68341":"markdown","4cb55eb1":"markdown","314e67ac":"markdown","4c11c851":"markdown","6fc79fbf":"markdown","33a1913e":"markdown","e57240fb":"markdown","08c3bcee":"markdown","366c38c8":"markdown","e812d206":"markdown"},"source":{"4daf80f3":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt # graph plotting\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nDIR = '\/kaggle\/input\/real-doppler-raddar-database\/data'\nCLASS = {'Cars':0, 'Drones': 1, 'People':2}\n\nlist_of_file = []   # filename\/details\nlist_of_img = []    # x\nlist_of_classi = [] # y\n\nfor root, dirs, files in os.walk(DIR):\n    for file in files:\n        if file.endswith('.csv'):\n            tmp = root.strip().split('\/')\n            if tmp[-2] in CLASS:\n                list_of_classi.append(CLASS[tmp[-2]])\n                list_of_file.append(os.path.join('\/'.join(tmp[-3:]),file))\n                df = pd.read_csv(os.path.join(root,file), sep=',',header=None)\n                list_of_img.append(df.values)\n\nx = np.array(list_of_img)\ny = np.array(list_of_classi)\nd = np.array(list_of_file)\n                \nprint(len(list_of_file), 'files loaded.')","7de26854":"fig = plt.figure()\nax = plt.axes()\nimg = ax.imshow(list_of_img[0], vmin=-140, vmax=-70, cmap='jet')\nplt.title('Range-Doppler for {}'.format(list_of_file[0]))\nplt.axis('tight')\nplt.ylabel('Range Bin')\nplt.xlabel('Doppler Bin')\nplt.colorbar(img)\nplt.show()","59979727":"from sklearn.model_selection import train_test_split\n\n## Convert list_of_img to linear, and scale to 0 to 1\nx = np.power(10, x\/10)\nx = x\/np.max(x)\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.9)","0ac091cb":"import tensorflow as tf # tensorflow\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(11,61)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(3)\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","9e258203":"history = model.fit(x_train, y_train, epochs=50, validation_split=0.2)","c7cf24bc":"    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    epochs = range(1, len(loss) + 1)\n    plt.plot(epochs, loss, 'y', label='Training Loss')\n    plt.plot(epochs, val_loss, 'r', label='Validation Loss')\n    plt.title('Training and Validation Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()","b78bb2b6":"test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)","d7cfb956":"def get_key_from_value(search_value , dict_to_look = CLASS):\n    for k, v in dict_to_look.items():\n        if v == search_value:\n            return k\n\ndef plot_image(i, predictions_array, true_label, img):\n    predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n    \n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    \n    plt.imshow(img, cmap=plt.cm.jet, aspect='auto')\n    \n    predicted_label = np.argmax(predictions_array)\n    if predicted_label == true_label:\n        color = 'blue'\n    else:\n        color = 'red'\n\n    plt.xlabel(\"{} {:2.0f}% ({})\".format(get_key_from_value(predicted_label),\n                                100*np.max(predictions_array),\n                                get_key_from_value(true_label)),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n    predictions_array, true_label = predictions_array, true_label[i]\n    plt.grid(False)\n    plt.xticks(range(3))\n    plt.yticks([])\n    thisplot = plt.bar(range(3), predictions_array, color=\"#777777\")\n    plt.ylim([0, 1])\n    predicted_label = np.argmax(predictions_array)\n\n    thisplot[predicted_label].set_color('red')\n    thisplot[true_label].set_color('blue')\n\nprobability_model = tf.keras.Sequential([model, \n                                     tf.keras.layers.Softmax()])\npredictions = probability_model.predict(x_test)\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nj = np.random.choice(len(x_test),num_images) # choose 5*3 at random\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(j[i], predictions[j[i]], y_test, x_test)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(j[i], predictions[j[i]], y_test)\nplt.tight_layout()\nplt.show()","63e68341":"## (Optional) View training history\nPlots training and validation loss as a function of epoch.","4cb55eb1":"## Importing Data\nImporting all the comma-seperated values (csv) file into a numpy array to feed into TensorFlow. The execution of the following cell might take a few minutes due to the process of opening multiple csv file to convert into a numpy array being not particularly efficient. A total of 17485 files will be loaded.","314e67ac":"## Train the Model\nAs the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.70 (or 70%) on the training data.","4c11c851":"## Conclusion\nA simple multilayer perceptron (MLP) type neural network was trained have an accuracy of ~70%. In this kernel, a naive method was chosen and assumes that each .csv is a unique example of the target, and thus does not exploit properties that may exist between scans, and may have incurred additional biases due to the different number of frames each target recording has.","6fc79fbf":"## (Optional) Display 15 Randomly Selected CFAR Images and Their Predictions\nCorrect prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label.","33a1913e":"## Preprocessing the Data\nConversion of signal from decibal scale to linear scale; split data into test and training set.","e57240fb":"## Evaluate Accuracy\nNext, compare how the model performs on the test dataset.","08c3bcee":"# Basic Neural Network for Classification of Range-Doppler Targets\nThe intent of this kernel is to provide a basic example to act as a springboard for other Neural Network based works. Adapted from [Basic classification: Classify images of clothing](https:\/\/www.tensorflow.org\/tutorials\/keras\/classification).","366c38c8":"## (Optional) Preview of Data\nPreviewing the first CFAR cutout loaded:","e812d206":"## Build and Compile the Model\nBuild the tf.keras.Sequential model by stacking layers. Choose an optimizer and loss function for training."}}