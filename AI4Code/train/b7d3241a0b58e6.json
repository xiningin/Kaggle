{"cell_type":{"2e180f57":"code","1254599d":"code","d482a4a1":"code","a9d66dc6":"code","a4fa8cc9":"code","b8fd07bd":"code","fad87b16":"code","343616ad":"code","f628dc71":"code","1383603d":"code","e1bc9548":"code","f093823e":"code","a284d24a":"code","e91a4a80":"code","921cac7b":"code","81b2ed7c":"code","d8f9ca41":"code","0637384b":"markdown","a2cbbcd3":"markdown","0b974fd0":"markdown","089ebe89":"markdown","fff76c2d":"markdown","3379db89":"markdown","b6487439":"markdown","88b7a238":"markdown","8918033d":"markdown"},"source":{"2e180f57":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1254599d":"!pip install git+git:\/\/github.com\/stared\/livelossplot.git","d482a4a1":"import pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM, GRU\nfrom keras.models import Sequential\nfrom keras import optimizers\nimport tensorflow as tf\nimport csv   \nfrom tqdm import tqdm\nimport time\nimport livelossplot\nfrom livelossplot.main_logger import MainLogger\nfrom livelossplot import outputs,PlotLossesKeras","a9d66dc6":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsubmission=pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","a4fa8cc9":"train.head(10)","b8fd07bd":"train['date_time']=pd.to_datetime(train['date_time'],infer_datetime_format=True)\ns=train.set_index('date_time')[['deg_C','relative_humidity','absolute_humidity','sensor_1','sensor_2','sensor_3','sensor_4','sensor_5','target_carbon_monoxide','target_benzene','target_nitrogen_oxides']].plot(subplots=True,figsize=(20,20),marker='v',markersize=5, markevery=100)","fad87b16":"train.describe()","343616ad":"labels=train[[\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"]]","f628dc71":"X_train=np.array(train.drop([\"date_time\",\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"],axis=1))\ny_train=np.array(labels)\nX_test=np.array(test.drop([\"date_time\"],axis=1))\n","1383603d":"X_train.shape,y_train.shape,X_test.shape","e1bc9548":"X_train = X_train \/ X_train .max(axis=0)\nX_test = X_test \/ X_test .max(axis=0)\nX_train.shape","f093823e":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, random_state=42, test_size=0.3, shuffle=False)\nX_train.shape, X_test.shape, X_val.shape, y_train.shape,  y_val.shape","a284d24a":"f=np.array([np.ravel(X_train, order='C')]).T\ngenerator = TimeseriesGenerator(X_train, y_train, length=1, batch_size=1)\nprint('Samples: %d' % len(generator))\n# print first four samples\nfor i in range(4):\n\tx, y = generator[i]\n\tprint('%s => %s' % (x, y))","e91a4a80":"# define model\nmodel = Sequential()\nmodel.add(LSTM(128,input_shape = (1, 8),return_sequences=True,activation = \"tanh\"))\nmodel.add(LSTM(32, activation = \"sigmoid\",return_sequences=False))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(Dense(3,  activation = tf.keras.layers.PReLU()))\nmodel.compile(optimizer='adam', loss=tf.keras.losses.MeanSquaredLogarithmicError())\n\n# fit model\ngenerator_val = TimeseriesGenerator(X_val, y_val, length=1, batch_size=1)\nmodel.fit_generator(generator, epochs=10, validation_data = generator_val, verbose=0,callbacks=[PlotLossesKeras()])","921cac7b":"predections=X_test[0]\npredections = predections.reshape((1,1,8))\npredections = model.predict(predections, verbose=0)\nfor i in tqdm(range(1,X_test.shape[0])):\n    temp=X_test[i].reshape((1,1,8))\n    temp = model.predict(temp, verbose=0)\n    predections=np.vstack((predections, temp)) ","81b2ed7c":"submission[\"target_carbon_monoxide\"]=predections[:,0]\nsubmission[\"target_benzene\"]=predections[:,1]\nsubmission[\"target_nitrogen_oxides\"]=predections[:,2]\nsubmission.to_csv(\"submission.csv\", index=False)","d8f9ca41":"submission.head(10)","0637384b":"# **Generating time series to train on it**","a2cbbcd3":"# **Model architecture and training**","0b974fd0":"# **Data Visualization**","089ebe89":"# **Data Splitting**","fff76c2d":"# **Getting the important data that will be processed**","3379db89":"# **Data Normalization**","b6487439":"# **Submitting the predictions**","88b7a238":"# **Predicting the test data**","8918033d":"# **fetching data**"}}