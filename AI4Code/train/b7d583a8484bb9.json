{"cell_type":{"db21a01b":"code","72975246":"code","c96c578f":"code","accb44e6":"code","2fcc5e2c":"code","a1fdbf6f":"code","2af1ef47":"code","349f7bc6":"code","9223f6ef":"code","5a4ee2f1":"code","d9dfb73f":"code","c45789d8":"code","066cedd7":"code","15cbf705":"code","e9169855":"code","02e3e95e":"code","206a383a":"code","fa5dfbf9":"code","efa92619":"markdown","45c0f3cb":"markdown","14172adc":"markdown","04249651":"markdown","49784cc1":"markdown","1fa75d36":"markdown","6e504a04":"markdown","eb7f7cd3":"markdown","675e2948":"markdown","b90db96e":"markdown","9164fc68":"markdown","fa581a4c":"markdown","99cf86da":"markdown","d8b78414":"markdown"},"source":{"db21a01b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","72975246":"df = pd.read_csv(\"..\/input\/Iris.csv\")\ndf.head()","c96c578f":"df.describe()","accb44e6":"df.info()","2fcc5e2c":"df.shape","a1fdbf6f":"df.Species.unique()","2af1ef47":"grouped_iris  = df.groupby('Species', as_index= False)['Id'].count()\ngrouped_iris","349f7bc6":"ax = df[df['Species'] == 'Iris-setosa'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='blue', label='Setosa')\ndf[df.Species=='Iris-versicolor'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='red', label='versicolor',ax=ax)\ndf[df.Species=='Iris-virginica'].plot.scatter(x='SepalLengthCm',y='SepalWidthCm',color='green', label='versicolor',ax=ax)\nax.set_xlabel(\"Sepal Length\")\nax.set_ylabel(\"Sepal Width\")\nax.set_title(\"Relationship between Sepal Length and Width\")","9223f6ef":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.FacetGrid(df, hue=\"Species\", size=6) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\") \\\n   .add_legend()\nplt.title(\"Relationship between Petal Length and Width\")","5a4ee2f1":"cols = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm','PetalWidthCm']\ncorr_matx = df[cols].corr()\nheatmap = sns.heatmap(corr_matx,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size': 15},yticklabels=cols,xticklabels=cols,cmap='Dark2')","d9dfb73f":"petals = np.array(df[[\"PetalLengthCm\",\"PetalWidthCm\"]])\n# petals\nsepals = np.array(df[[\"SepalLengthCm\",\"SepalWidthCm\"]])\n# sepals\nkey = {'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2}\nY = df['Species'].map(key)\n# Y","c45789d8":"from sklearn.cross_validation import train_test_split\n\nX_train_S, X_test_S, y_train_S, y_test_S = train_test_split(sepals,Y,test_size=0.2,random_state=42)\n\nX_train_P, X_test_P, y_train_P, y_test_P = train_test_split(petals,Y,test_size=0.2,random_state=42)\n","066cedd7":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nscaler.fit(X_train_S)\nX_train_std_S = scaler.transform(X_train_S)\nX_test_std_S = scaler.transform(X_test_S)\n\nscaler.fit(X_train_P)\nX_train_std_P = scaler.transform(X_train_P)\nX_test_std_P = scaler.transform(X_test_P)\n\n\nprint('Standardized features for Sepal and Petal \\n')\nprint(\"Sepal\\n\\n\" +str(X_train_std_S[:3]))\nprint(\"\\nPetal\\n\\n\" +str(X_train_std_P[:3]))","15cbf705":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train_std_S,y_train_S)\nprint('Training Accuracy Sepal = {}'.format(model.score(X_train_std_S, y_train_S)))\nprint('Testing  Accuracy Sepal = {}'.format(model.score(X_test_std_S, y_test_S)))\n\nmodel.fit(X_train_std_P,y_train_P)\nprint('\\nTraining Accuracy Petal = {}'.format(model.score(X_train_std_P, y_train_P)))\nprint('Testing  Accuracy Petal = {}'.format(model.score(X_test_std_P, y_test_P)))","e9169855":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier(criterion='gini',max_depth=4,presort=True)\nmodel.fit(X_train_std_S,y_train_S)\nprint('Training Accuracy Sepal = {}'.format(model.score(X_train_std_S, y_train_S)))\nprint('Testing  Accuracy Sepal = {}'.format(model.score(X_test_std_S, y_test_S)))\n\nmodel.fit(X_train_std_P,y_train_P)\nprint('\\nTraining Accuracy Petal = {}'.format(model.score(X_train_std_P, y_train_P)))\nprint('Testing  Accuracy Petal = {}'.format(model.score(X_test_std_P, y_test_P)))","02e3e95e":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(max_depth=2)\nmodel.fit(X_train_std_S,y_train_S)\nprint('Training Accuracy Sepal = {}'.format(model.score(X_train_std_S, y_train_S)))\nprint('Testing  Accuracy Sepal = {}'.format(model.score(X_test_std_S, y_test_S)))\n\nmodel.fit(X_train_std_P,y_train_P)\nprint('\\nTraining Accuracy Petal = {}'.format(model.score(X_train_std_P, y_train_P)))\nprint('Testing  Accuracy Petal = {}'.format(model.score(X_test_std_P, y_test_P)))","206a383a":"from sklearn.svm import LinearSVC\n\nmodel = LinearSVC(C=10)\nmodel.fit(X_train_std_S,y_train_S)\nprint('Training Accuracy Sepal = {}'.format(model.score(X_train_std_S, y_train_S)))\nprint('Testing  Accuracy Sepal = {}'.format(model.score(X_test_std_S, y_test_S)))\n\nmodel.fit(X_train_std_P,y_train_P)\nprint('\\nTraining Accuracy Petal = {}'.format(model.score(X_train_std_P, y_train_P)))\nprint('Testing  Accuracy Petal = {}'.format(model.score(X_test_std_P, y_test_P)))","fa5dfbf9":"from sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train_std_S,y_train_S)\nprint('Training Accuracy Sepal = {}'.format(model.score(X_train_std_S, y_train_S)))\nprint('Testing  Accuracy Sepal = {}'.format(model.score(X_test_std_S, y_test_S)))\n\nmodel.fit(X_train_std_P,y_train_P)\nprint('\\nTraining Accuracy Petal = {}'.format(model.score(X_train_std_P, y_train_P)))\nprint('Testing  Accuracy Petal = {}'.format(model.score(X_test_std_P, y_test_P)))","efa92619":"### k- Nearest Neighbours","45c0f3cb":"### Some visualizations","14172adc":"### Coorelation between the features\n\n","04249651":"Standardizing and Scaling the features","49784cc1":"### Decision Tree Classifier","1fa75d36":"### Machine Learning with IRIS data\n\n","6e504a04":"#### using the correlation scores, the Petal Length and Width are the best features to identify the species of IRIS","eb7f7cd3":"Similarly for Petal using the seaborn function","675e2948":"From the above matrix it is seen that Petal Length and Width show a strong coorelation whereas the Sepal Length and Width show weak correlations, it indicates that the Species can be identified better using Petal compared to Sepal,we will verify the same using Machine Learning","b90db96e":"Relationship between the Sepal Length and Width using scatter plot","9164fc68":"### Logistic Reggression","fa581a4c":"### Random Forests ","99cf86da":"### This notebook is to understand the data in IRIS dataset ","d8b78414":"### Support Vector Machines"}}