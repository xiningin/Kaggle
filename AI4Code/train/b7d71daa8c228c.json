{"cell_type":{"15d60acf":"code","d9eb87a1":"code","6da71a0d":"code","c3ea829a":"code","12ed27d7":"code","dd57bc65":"code","5a90704a":"code","936dbb79":"code","95768f99":"code","371c70c6":"code","75efdbad":"code","e62e6997":"code","e1942bb9":"code","60469929":"code","7a99d106":"code","505dd5a7":"code","b1bcae32":"code","5bd6e6e1":"code","2228f36d":"code","0401d677":"code","ebc9a21a":"code","0d88ed32":"code","6679fe7c":"code","d1d38d68":"code","26a02e01":"code","f7ba9239":"code","daec135e":"code","ef28c005":"code","48c53ead":"code","25048712":"code","76c865dd":"code","1c433c11":"code","ccf58bc1":"code","f31f89a2":"code","941de7b7":"code","31f7cfa7":"code","9a9d15a5":"code","0f5ef505":"code","a23ebbba":"code","2282ce00":"code","a133c929":"code","e7a97f2c":"code","4250aeb2":"code","50fef306":"code","d8d9647e":"code","8b3820ff":"code","abd322c3":"code","a6e7c22b":"code","e4be31c8":"code","2b7070b3":"code","9c3af2b3":"code","7d696101":"code","02a3a7ad":"code","66262a5c":"code","e481d36e":"code","229fe3a8":"code","a32ef6c6":"code","740d7191":"code","fad6cfb3":"code","2a869fdf":"code","a699911f":"code","655191bb":"code","982b9426":"code","61ce3ced":"code","355a5d94":"code","ee0ea9d1":"code","c99c948e":"code","a2d2b437":"code","71bc66f7":"code","ccdd9842":"code","9ff6c0fb":"code","ee5758f0":"code","972533f7":"code","9dfb76b7":"code","cf7c7df3":"code","5bad53aa":"code","ce46d6d2":"code","f6534cf4":"code","e7e12770":"code","a5d03c44":"code","0d8c4a43":"code","55545816":"code","5cc2a75a":"code","be73760e":"code","ca159415":"code","cbfbe1e7":"code","44f3d3bb":"code","51118611":"code","39ffaeab":"code","6ff706db":"code","10ce61aa":"code","f6e03646":"code","3d93fea5":"code","5baf92d4":"code","73ffbbd5":"code","7038bbc7":"code","17f68c75":"code","fdb30b5b":"code","a3078dae":"code","c619b533":"code","6c7d3ce0":"code","a5191edc":"code","cb5615f7":"code","d1ebbd24":"code","8ec6ea71":"code","da0dd166":"code","a7ae088f":"code","0f7d87a3":"code","501224a3":"code","045fe0ec":"code","ec007405":"code","a27f3351":"code","929ff38b":"code","0efe1447":"code","05e4659f":"code","8d6304c3":"code","14b0d7b3":"code","7051ee7b":"code","8ac7df07":"code","279f8df3":"code","e00140de":"code","a0c6c1e9":"code","19421ddc":"code","e6c585d3":"code","96636acc":"code","108f61cf":"code","2eb0c330":"code","59fcf872":"code","f77a6e54":"code","0a3e9f33":"code","e334051a":"code","8ef5a080":"code","1ad222b4":"code","3aebc1fa":"code","ce2da621":"code","f06c6142":"code","483808d7":"code","b7f0c063":"code","bf19985c":"code","8e4325d9":"code","1de2b441":"code","0c5e9a66":"code","03eeba6d":"code","b6e6e27c":"code","46e7df8f":"code","daca8bb9":"code","bb8325f5":"code","8d7cf829":"code","c268c343":"code","5e52663b":"code","cb448c9c":"code","9f1d8f22":"code","11f583a4":"code","1577d6ef":"code","64f551ce":"code","a6edfe7f":"code","d83beb60":"code","9b611cd9":"code","efef17e6":"code","3a6b6ad0":"code","fe512401":"code","79ed7c8a":"code","2beb0fec":"code","1338906c":"code","9f18ce74":"code","a8a93697":"code","6c8b0394":"code","32a18a63":"code","2c9568e5":"code","80ee5450":"code","869b5b13":"code","8649b5bd":"code","5ba77285":"code","fe2672b2":"code","1272a359":"code","7af98a48":"code","97cded86":"code","e5efba13":"code","e2d7b9ba":"code","33ab39b3":"code","f4f62661":"code","8cd47084":"code","908bcddd":"markdown","f12344c8":"markdown","16a23f86":"markdown","0c4f9cc9":"markdown","22475e6b":"markdown","3d71128c":"markdown","cd3eff9b":"markdown","94ab7f61":"markdown","b3d4221e":"markdown","9aad4958":"markdown","18c2f79c":"markdown","e4aaa8e6":"markdown","d36f3544":"markdown","7f551e26":"markdown","dab41501":"markdown","5418ac61":"markdown","aec6fadf":"markdown","f1f9e482":"markdown","c0637498":"markdown","e8cbe9a5":"markdown","bcd66a28":"markdown","0a0c0c61":"markdown","2bcb3ae2":"markdown","0794b208":"markdown","53630634":"markdown","fef72ee4":"markdown","8114020b":"markdown","edf87d45":"markdown","81024d4c":"markdown","27486163":"markdown","235773da":"markdown","ef02b5ef":"markdown","869df8df":"markdown","f837ce46":"markdown","7d754952":"markdown","1f7795f3":"markdown","2266b584":"markdown","46dc15e4":"markdown","a78e5cd1":"markdown","f4b46902":"markdown","9a4e3b64":"markdown","833bd00f":"markdown","3fc32101":"markdown","7a3c5330":"markdown","800d6046":"markdown","15289d0b":"markdown","04d98dbf":"markdown","2fc7d7e5":"markdown","87c13f91":"markdown","097983b6":"markdown","99386fd1":"markdown","9e1c4a99":"markdown","ad55d246":"markdown","85d547c1":"markdown","dc2e390b":"markdown","768781a9":"markdown","dc09c0ed":"markdown","916d7702":"markdown","8f25175a":"markdown","2520042d":"markdown","982f0a1f":"markdown","f928d59d":"markdown","734780de":"markdown","176c8f68":"markdown","dedc6b08":"markdown","315d4055":"markdown","abc07d00":"markdown","41c8c596":"markdown","0bf89a0c":"markdown","0afa2d20":"markdown","3a1aad01":"markdown","a47f6511":"markdown","816d0057":"markdown","84aea6de":"markdown","c5ce2416":"markdown","1ba45fc4":"markdown","75b61b03":"markdown","ddf3e976":"markdown","b6517bb4":"markdown","67d76e9e":"markdown","9f9a0b36":"markdown","09090b02":"markdown","a0196da6":"markdown","62032304":"markdown","21004cf2":"markdown","d9e6260d":"markdown","cdd9b729":"markdown","b38ff5fa":"markdown","4eaece73":"markdown","d74cd84a":"markdown","8a97b720":"markdown","7ec8b4bc":"markdown","7673923c":"markdown","ca451c5c":"markdown","de2c7420":"markdown","5ad4ea83":"markdown","7d9bbdfb":"markdown","d1a7fce6":"markdown","fb83f7b0":"markdown","3e9eea0b":"markdown","fc6c8c1f":"markdown","22f8a714":"markdown","1052f57e":"markdown","d860d8f6":"markdown","2c5e9e7c":"markdown","bcece4fb":"markdown","85e22231":"markdown","06671d11":"markdown","3dd0ec77":"markdown","bc774825":"markdown","bae88dfa":"markdown","333ed4d6":"markdown","ee46552f":"markdown","a4496719":"markdown","f5f03d02":"markdown","d725b233":"markdown","edfb13a9":"markdown","36211e1a":"markdown","39527762":"markdown","a80beaa5":"markdown","220faf6c":"markdown","a0cfb8d9":"markdown"},"source":{"15d60acf":"# They are for data manipulation\/ \uae30\ubcf8 \ub370\uc774\ud130 \uc815\ub9ac \ubc0f \ucc98\ub9ac\nimport pandas as pd\nimport numpy as np\n\n# For Visualization \/ \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\n# Ignore warnings \/ \uacbd\uace0 \uc81c\uac70 (Pandas often makes warnings)\nimport sys\nimport warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","d9eb87a1":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')","6da71a0d":"missingno.matrix(train, figsize = (15,8))","c3ea829a":"# Correlation heatmap between numerical values (SibSp Parch Age and Fare values) and Survived \ng = sns.heatmap(train[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True\n                , fmt = \".2f\", cmap = \"coolwarm\")","12ed27d7":"train.head()","dd57bc65":"corr = train.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","5a90704a":"train.isnull().sum()","936dbb79":"data = pd.concat((train, test))","95768f99":"data.columns","371c70c6":"fig = plt.figure(figsize=(10,2))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","75efdbad":"# Plot for survived\nfig = plt.figure(figsize = (10,5))\nsns.countplot(x='Survived', data = train)\nprint(train['Survived'].value_counts())","e62e6997":"f,ax=plt.subplots(1,2,figsize=(15,6))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","e1942bb9":"train.groupby(['Pclass','Survived'])['Survived'].count()","60469929":"sns.factorplot('Pclass','Survived',hue='Sex',data=data)\nplt.show()","7a99d106":"pd.crosstab(train.Pclass,train.Survived,margins=True).style.background_gradient(cmap='summer_r')","505dd5a7":"f,ax=plt.subplots(1,2,figsize=(12,6))\ntrain[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived per Pcalss')\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Pcalss Survived vs Not Survived')\nplt.show()","b1bcae32":"# Bar chart of each Pclass type\nfig = plt.figure(figsize = (10,10))\nax1 = plt.subplot(2,1,1)\nax1 = sns.countplot(x = 'Pclass', hue = 'Survived', data = train)\nax1.set_title('Ticket Class Survival Rate')\nax1.set_xticklabels(['1 Upper','2 Middle','3 Lower'])\nax1.set_ylim(0,400)\nax1.set_xlabel('Ticket Class')\nax1.set_ylabel('Count')\nax1.legend(['No','Yes'])\n\n# Pointplot Pclass type\nax2 = plt.subplot(2,1,2)\nsns.pointplot(x='Pclass', y='Survived', data=train)\nax2.set_xlabel('Ticket Class')\nax2.set_ylabel('Percent Survived')\nax2.set_title('Percentage Survived by Ticket Class')","5bd6e6e1":"train.groupby('Pclass').Survived.mean()","2228f36d":"# Density plot\nfig = plt.figure(figsize=(15,8),) \nax=sns.kdeplot(train.Pclass[train.Survived == 0] , \n               color='gray',\n               shade=True,\n               label='not survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Pclass'] , \n               color='g',\n               shade=True, \n               label='survived', \n              )\nplt.title('Passenger Class Distribution - Survived vs Non-Survived', fontsize = 25, pad = 40)\nplt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\nplt.xlabel(\"Passenger Class\", fontsize = 15,labelpad =20)\nlabels = ['1st Class', '2nd Class', '3rd Class']\nplt.xticks(sorted(train.Pclass.unique()), labels);","0401d677":"plt.subplots(figsize = (15,10))\nsns.barplot(x = \"Pclass\", \n            y = \"Survived\", \n            data=train, \n            linewidth=5,\n            capsize = .1\n\n           )\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25, pad=40)\nplt.xlabel(\"Survival Rate per Pclass\", fontsize = 15);\nplt.ylabel(\"% of Passenger Survived\", fontsize = 15);\nlabels = ['1st Class', '2nd Class', '3rd Class']\n\nval = [0,1,2] ## \uc784\uc2dc \ubc29\uba74 temporaray measure\nplt.xticks(val, labels);","ebc9a21a":"sns.boxplot(x='Pclass', y='Survived', data=train)","0d88ed32":"sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"violin\", data=train)","6679fe7c":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 5))\nwomen = train[train['Sex']=='female']\nmen = train[train['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=20, label = survived, ax = axes[0], kde =False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=20, label = not_survived, ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=20, label = survived, ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=20, label = not_survived, ax = axes[1], kde = False)\nax.legend()\n_ = ax.set_title('Male')","d1d38d68":"f,ax=plt.subplots(1,2,figsize=(10,5))\ndata[data['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Survived= 0')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\ndata[data['Survived']==1].Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')\nax[1].set_title('Survived= 1')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","26a02e01":"fig = plt.figure(figsize=(12,6),)\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Age'] , color='gray',shade=True,label='not survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Age'] , color='g',shade=True, label='survived')\nplt.title('Age Distribution - Surviver V.S. Non Survivors', fontsize = 25, pad = 40)\nplt.xlabel(\"Age\", fontsize = 15, labelpad = 20)\nplt.ylabel('Frequency', fontsize = 15, labelpad= 20);","f7ba9239":"data['Initial']=0\nfor i in data:\n    data['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')\n    \ndata.tail()","daec135e":"pd.crosstab(data.Initial,data.Sex).T.style.background_gradient(cmap='summer_r')","ef28c005":"sns.factorplot('Pclass','Survived',col='Sex',data=data)\nplt.show()","48c53ead":"pal = {1:\"seagreen\", 0:\"gray\"}\ng = sns.FacetGrid(train,size=5, col=\"Sex\", row=\"Survived\", margin_titles=True, hue = \"Survived\",\n                  palette=pal)\ng = g.map(plt.hist, \"Age\", edgecolor = 'white');\ng.fig.suptitle(\"Survived by Sex and Age\", size = 25)\nplt.subplots_adjust(top=0.90)","25048712":"f,ax=plt.subplots(1,2,figsize=(30,10))\ntrain[['Age','Pclass']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('')\nsns.countplot('Age',hue='Pclass',data=train,ax=ax[1])\nax[1].set_title('')\nplt.show()","76c865dd":"sns.swarmplot(x=train['Survived'], y=train['Age'])\nplt.xlabel(\"Survived\")\nplt.ylabel(\"Age\")\nplt.show()","1c433c11":"plt.hist(x = [data[data['Survived']==1]['Age'], data[data['Survived']==0]['Age']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Age Histogram by Survival')\nplt.xlabel('Age (Years)')\nplt.ylabel('# of Passengers')\nplt.legend()","ccf58bc1":"pd.crosstab([train.Sex,train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","f31f89a2":"plt.hist(data['Age'], bins=40)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Distribution of Age')\nplt.show()","941de7b7":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","31f7cfa7":"data.isnull().sum()","9a9d15a5":"data['LastName']=0\nfor i in data:\n    data['LastName']=data.Name.str.extract('([A-Za-z]+)')\n    \ndata.head()","0f5ef505":"data = data.reset_index(drop=True)\ndata['Age'] = data.groupby('Initial')['Age'].apply(lambda x: x.fillna(x.mean()))\n\ndata.head()","a23ebbba":"data.loc[(data.Initial.isnull()),'Initial']='Mrs'\n\ndata.tail()","2282ce00":"data['Inicab'] = 0\nfor i in data:\n    data['Inicab']=data.Cabin.str.extract('^([A-Za-z]+)')\n    data.loc[((data.Cabin.isnull()) & (data.Pclass.values == 1 )),'Inicab']='X'\n    data.loc[((data.Cabin.isnull()) & (data.Pclass.values == 2 )),'Inicab']='Y'\n    data.loc[((data.Cabin.isnull()) & (data.Pclass.values == 3 )),'Inicab']='Z'\n    \ndata.head()","a133c929":"data.loc[(data.Embarked.isnull())]","e7a97f2c":"data.sort_values(['Ticket'], ascending = True)[55:70]","4250aeb2":"data.loc[(data.Embarked.isnull()),'Embarked']='S'","50fef306":"data.loc[(data.Fare.isnull())]","d8d9647e":"data = data.reset_index(drop=True)\ndata['Fare'] = data.groupby('Inicab')['Fare'].apply(lambda x: x.fillna(x.mean()))\n\ndata[1040:1045]","8b3820ff":"data.isnull().sum()","abd322c3":"def facto(a):\n    for i in data:\n        data[a] = data[a].factorize()[0]    \n        \nfacto('Embarked')\nfacto('Sex')\nfacto('Ticket')\nfacto('Initial')\nfacto('LastName')\nfacto('Inicab')\n\ndata.tail()","a6e7c22b":"sns.jointplot(x=\"Initial\", y=\"Fare\", data=data, kind='scatter')","e4be31c8":"sns.relplot(x=\"Initial\", y=\"LastName\", hue=\"Survived\", data=data)","2b7070b3":"sns.relplot(x=\"Initial\", y=\"Age\", hue=\"Survived\", data=data)","9c3af2b3":"sns.relplot(x=\"LastName\", y=\"Fare\", hue=\"Survived\", data=data)","7d696101":"sns.relplot(x=\"LastName\", y=\"Ticket\", hue=\"Survived\", data=data)","02a3a7ad":"sns.jointplot(x=\"LastName\", y=\"Fare\", data=data, kind='scatter')","66262a5c":"fig = plt.figure(figsize = (5,6))\nax = sns.countplot(x = 'SibSp', hue = 'Survived', data = train)\nax.set_title('Survival Rate with Total of Siblings and Spouse on Board')\nax.set_ylim(0,500)\nax.set_xlabel('# of Sibling and Spouse')\nax.set_ylabel('Count')\nax.legend(['No','Yes'],loc = 1)","e481d36e":"fig = plt.figure(figsize = (5,6))\nax = sns.countplot(x = 'Parch', hue = 'Survived', data = train)\nax.set_title('Survival Rate with Total Parents and Children on Board')\nax.set_ylim(0,500)\nax.set_xlabel('# of Parents and Children')\nax.set_ylabel('Count')\nax.legend(['No','Yes'],loc = 1)","229fe3a8":"data['FamilySize']=0\ndata['FamilySize']= data['SibSp']+ data['Parch'] + 1\n\ndata.head()","a32ef6c6":"plt.hist(x = [data[data['Survived']==1]['FamilySize'], data[data['Survived']==0]['FamilySize']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Family Size Histogram by Survival')\nplt.xlabel('Family Size (#)')\nplt.ylabel('# of Passengers')\nplt.legend()","740d7191":"f,ax=plt.subplots(1,2,figsize=(20,8))\nsns.barplot('SibSp','Survived',data=data,ax=ax[0])\nax[0].set_title('SibSp vs Survived')\nsns.factorplot('SibSp','Survived',data=data,ax=ax[1])\nax[1].set_title('SibSp vs Survived')\nplt.close(2)\nplt.show()","fad6cfb3":"sns.relplot(x=\"Pclass\", y=\"FamilySize\", hue=\"Survived\", data=data)","2a869fdf":"plt.hist(x = [data[data['Survived']==1]['Fare'], data[data['Survived']==0]['Fare']], \n         stacked=True, color = ['g','r'],label = ['Survived','Dead'])\nplt.title('Fare Histogram by Survival')\nplt.xlabel('Fare ($)')\nplt.ylabel('# of Passengers')\nplt.legend()","a699911f":"fig = plt.figure(figsize = (10,5))\nsns.swarmplot(x=\"Pclass\", y=\"Fare\", data=train, hue='Survived')","655191bb":"plt.hist(data['Fare'], bins=40)\nplt.xlabel('Fare')\nplt.ylabel('Count')\nplt.title('Distribution of fares')\nplt.show()","982b9426":"sns.jointplot(x=\"Ticket\", y=\"Fare\", data=data, kind='scatter')","61ce3ced":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\",data=data)","355a5d94":"ax = sns.lineplot(x=\"Pclass\", y=\"Ticket\", hue=\"Survived\",data=data)","ee0ea9d1":"sns.catplot(x=\"Ticket\", y=\"Fare\", kind=\"violin\", data=data)","c99c948e":"sns.relplot(x=\"Fare\", y=\"Ticket\", hue=\"Survived\", data=data)","a2d2b437":"fig = plt.figure(figsize=(12,6),)\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Fare'] , color='gray',shade=True,label='not survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Fare'] , color='g',shade=True, label='survived')\nplt.title('Fare Distribution - Surviver V.S. Non Survivors', fontsize = 25, pad = 40)\nplt.xlabel(\"Fare\", fontsize = 15, labelpad = 20)\nplt.ylabel('Frequency', fontsize = 15, labelpad= 20);","71bc66f7":"fig = plt.figure(figsize=(12,6),)\nax=sns.kdeplot(data.loc[(data['Survived'] == 0),'Ticket'] , color='gray',shade=True,label='not survived')\nax=sns.kdeplot(data.loc[(data['Survived'] == 1),'Ticket'] , color='g',shade=True, label='survived')\nplt.title('Ticket Distribution - Surviver V.S. Non Survivors', fontsize = 25, pad = 40)\nplt.xlabel(\"Ticket\", fontsize = 15, labelpad = 20)\nplt.ylabel('Frequency', fontsize = 15, labelpad= 20);","ccdd9842":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=data,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=data,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=data,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=data,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","9ff6c0fb":"sns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=data)\nplt.show()","ee5758f0":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", data=data)","972533f7":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(data[data['Embarked']== 0].Fare,ax=ax[0])\nax[0].set_title('Fares in S')\nsns.distplot(data[data['Embarked']== 1].Fare,ax=ax[1])\nax[1].set_title('Fares in C')\nsns.distplot(data[data['Embarked']== 2].Fare,ax=ax[2])\nax[2].set_title('Fares in Q')\nplt.show()","9dfb76b7":"fig = plt.figure(figsize=(12,6),)\nax=sns.kdeplot(data.loc[(data['Survived'] == 0),'Ticket'] , color='gray',shade=True,label='not survived')\nax=sns.kdeplot(data.loc[(data['Survived'] == 1),'Ticket'] , color='g',shade=True, label='survived')\nplt.title('Embarked Distribution - Surviver V.S. Non Survivors', fontsize = 25, pad = 40)\nplt.xlabel(\"Embarked\", fontsize = 15, labelpad = 20)\nplt.ylabel('Frequency', fontsize = 15, labelpad= 20);","cf7c7df3":"fig = plt.figure(figsize = (10,10))\nax1 = plt.subplot(2,1,1)\nax1 = sns.countplot(x = 'Embarked', hue = 'Survived', data = train)\nax1.set_title('Survival Rate per Embarked Place')\nax1.set_xticklabels(['1','2','3'])\nax1.set_ylim(0,400)\nax1.set_xlabel('Embarked')\nax1.set_ylabel('Count')\nax1.legend(['No','Yes'])\n\n\nax2 = plt.subplot(2,1,2)\nsns.pointplot(x='Embarked', y='Survived', data=train)\nax2.set_xlabel('Embarked')\nax2.set_ylabel('Percent Survived')\nax2.set_title('Percentage Survived by Embarked')","5bad53aa":"sns.relplot(x=\"Embarked\", y=\"Cabin\", hue=\"Survived\", data=data)","ce46d6d2":"sns.jointplot(x=\"Embarked\", y=\"Fare\", data=data, kind='scatter')","f6534cf4":"fig = plt.figure(figsize = (10,5))\nsns.swarmplot(x=\"Embarked\", y=\"Fare\", data=train, hue='Survived')","e7e12770":"fig = plt.figure(figsize = (10,5))\nsns.swarmplot(x=\"Pclass\", y=\"Cabin\", data=train, hue='Survived')","a5d03c44":"temp = pd.DataFrame()\n\ndef newdf(a,b):\n    temp[a] = data[b]\n    \nnewdf('Survived', 'Survived')\nnewdf('Pclass', 'Pclass')\nnewdf('Name', 'Initial')\nnewdf('Gender', 'Sex')\nnewdf('Age', 'Age')\nnewdf('Family', 'FamilySize')\nnewdf('Ticket', 'Ticket')\nnewdf('Fare', 'Fare')\nnewdf('Cabin', 'Inicab')\nnewdf('Embarked', 'Embarked')\nnewdf('LastName', 'LastName')\n\n\ntemp.tail()","0d8c4a43":"g = sns.heatmap(temp.corr(),annot=True\n                , fmt = \".2f\", cmap = \"coolwarm\")","55545816":"temp.isnull().sum()","5cc2a75a":"temp.loc[(temp.Survived.isnull()) & (temp['Name'] == 0), 'Survived'] =  0.156673\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 1), 'Survived'] =  0.792000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 2), 'Survived'] =  0.697802\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 3), 'Survived'] =  0.575000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 4), 'Survived'] =  0.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 5), 'Survived'] =  0.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 6), 'Survived'] =  0.428571\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 7), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 8), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 9), 'Survived'] =  0.500000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 10), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 11), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 12), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 13), 'Survived'] =  0.500000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 14), 'Survived'] =  0.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 15), 'Survived'] =  1.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 16), 'Survived'] =  0.000000\ntemp.loc[(temp.Survived.isnull()) & (temp['Name'] == 17), 'Survived'] =  0.792000","be73760e":"temp.tail()","ca159415":"temp.groupby('Pclass').Survived.mean()","cbfbe1e7":"temp['Pclass'] = temp.groupby('Pclass')['Survived'].transform('mean')\n\ntemp.tail()","44f3d3bb":"pd.crosstab(temp.Pclass,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","51118611":"temp.Pclass.isnull().any()","39ffaeab":"temp.groupby('Name').Survived.mean()","6ff706db":"temp['Name'] = temp.groupby('Name')['Survived'].transform('mean')\n\ntemp.tail()","10ce61aa":"temp.groupby('Name').Survived.mean()","f6e03646":"temp.Name.isnull().any()","3d93fea5":"pd.crosstab(temp.Name,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","5baf92d4":"temp.groupby('Gender').Survived.mean()","73ffbbd5":"temp['Gender'] = temp.groupby('Gender')['Survived'].transform('mean')\n\ntemp.head()","7038bbc7":"temp.Gender.isnull().any()","17f68c75":"pd.crosstab(temp.Gender,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","fdb30b5b":"temp.groupby('Age').Survived.mean()","a3078dae":"temp['Age'] = temp.groupby('Age')['Survived'].transform('mean')\n\ntemp.head()","c619b533":"temp.Age.isnull().sum()","6c7d3ce0":"pd.crosstab(temp.Age,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","a5191edc":"temp.groupby('Family').Survived.mean()","cb5615f7":"temp['Family'] = temp.groupby('Family')['Survived'].transform('mean')\n\ntemp.tail()","d1ebbd24":"temp.Family.isnull().any()","8ec6ea71":"pd.crosstab(temp.Family,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","da0dd166":"temp.groupby('Ticket').Survived.mean()","a7ae088f":"temp['Ticket'] = temp.groupby('Ticket')['Survived'].transform('mean')\n\ntemp.tail()","0f7d87a3":"temp.Ticket.isnull().sum()","501224a3":"pd.crosstab(temp.Ticket,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","045fe0ec":"temp.groupby('Fare').Survived.mean()","ec007405":"temp['Fare'] = temp.groupby('Fare')['Survived'].transform('mean')\n\ntemp.tail()","a27f3351":"temp.Fare.isnull().sum()","929ff38b":"pd.crosstab(temp.Fare,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","0efe1447":"temp.groupby('Cabin').Survived.mean()\n","05e4659f":"temp['Cabin'] = temp.groupby('Cabin')['Survived'].transform('mean')\n\ntemp.head()","8d6304c3":"temp.loc[(temp.Cabin.isnull())]","14b0d7b3":"pd.crosstab(temp.Cabin,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","7051ee7b":"temp.groupby('Embarked').Survived.mean()","8ac7df07":"temp['Embarked'] = temp.groupby('Embarked')['Survived'].transform('mean')\n\ntemp","279f8df3":"temp.loc[(temp.Embarked.isnull())]","e00140de":"pd.crosstab(temp.Embarked,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","a0c6c1e9":"temp.groupby('LastName').Survived.mean()","19421ddc":"temp['LastName'] = temp.groupby('LastName')['Survived'].transform('mean')\n\ntemp","e6c585d3":"temp.isnull().any()","96636acc":"pd.crosstab(temp.LastName,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","108f61cf":"sns.pairplot(temp)","2eb0c330":"g = sns.PairGrid(temp)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=6);","59fcf872":"df = pd.DataFrame()\n\ndef new(a):\n    df[a] = temp[a]\n    \nnew('Pclass')\nnew('Name')\nnew('Gender')\nnew('Age')\nnew('Family')\nnew('Ticket')\nnew('Fare')\nnew('Cabin')\nnew('Embarked')\nnew('LastName')\n\n\ndf.head()","f77a6e54":"df['Mean']=0\n\nfor i in df:\n    df['Mean']=df.mean(axis=1)\n    \ndf.head()","0a3e9f33":"df['Highest']=0\n\nfor i in df:\n    df['Highest']=df.max(axis=1)\n    \ndf.head()","e334051a":"df['Lowest']=1\n\nfor i in df:\n    df['Lowest']=df.min(axis=1)\n    \ndf.head()","8ef5a080":"df['Social']=0\n\nfor i in df:\n    df['Social']=(df['Name']+df['Gender']+df['Age']+df['Family'])\/4\n    \ndf.head(10)","1ad222b4":"df['Wealth']=0\n\nfor i in df:\n    df['Wealth']=(df['Pclass']+df['Ticket']+df['Fare']+df['Cabin'])\/4\n    \ndf.head(10)","3aebc1fa":"df['LowIndex'] = 1\n\nfor i in df:\n    df['LowIndex']=(df['Lowest']+df['Mean'])\/2\n    \ndf.head(10)","ce2da621":"df['HighIndex'] = 0\n\nfor i in df:\n    df['HighIndex']=(df['Highest']+df['Mean'])\/2\n    \ndf.head(10)","f06c6142":"df['Diff'] = 0\n\nfor i in df:\n    df['Diff']=df['Highest']- df['Lowest']\n    \ndf.head()","483808d7":"corr = df.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize=(14, 8))\nplt.title('Overall Correlation of Final Features', fontsize=18)\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","b7f0c063":"dfl = pd.DataFrame()\n\ndef new1(a):\n    dfl[a] = data[a]\n    \nnew1('Pclass')\nnew1('Initial')\nnew1('Sex')\nnew1('Age')\nnew1('FamilySize')\nnew1('Ticket')\nnew1('Fare')\nnew1('LastName')\n\n\ndef new2(a):\n    dfl[a] = df[a]\n\nnew2('Highest')\nnew2('Social')\nnew2('Wealth')\nnew2('Lowest')\nnew2('Diff')\nnew2('Mean')\n        \ndfl","bf19985c":"dfl.isnull().sum()","8e4325d9":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train['Survived'].values\npassId = test['PassengerId']","1de2b441":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection","0c5e9a66":"dfl_enc = dfl.apply(LabelEncoder().fit_transform)\n                          \ndfl_enc.head()","03eeba6d":"train = dfl_enc[:ntrain]\ntest = dfl_enc[ntrain:]","b6e6e27c":"len(train)","46e7df8f":"len(test)","daca8bb9":"X_test = test\nX_train = train","bb8325f5":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8d7cf829":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n\n# Prepare lists\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores = []\n\n# Sequentially fit and cross validate all models\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores.append(acc.mean())","c268c343":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Score': scores})\n\nresult_df = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\nresult_df.head(11)","5e52663b":"# Plot results\nsns.barplot(x='Score', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.85, 0.99)","cb448c9c":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ndef importance_plotting(data, x, y, palette, title):\n    sns.set(style=\"whitegrid\")\n    ft = sns.PairGrid(data, y_vars=y, x_vars=x, size=5, aspect=1.5)\n    ft.map(sns.stripplot, orient='h', palette=palette, edgecolor=\"black\", size=15)\n    \n    for ax, title in zip(ft.axes.flat, titles):\n    # \uac01 \uadf8\ub798\ud504\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ud0c0\uc774\ud2c0\uc744 \uc90d\ub2c8\ub2e4.\n        ax.set(title=title)\n    # \uadf8\ub798\ud504\ub97c \ubc14\ub85c \uc138\uc6cc \ubd05\ub2c8\ub2e4.\n        ax.xaxis.grid(False)\n        ax.yaxis.grid(True)\n    plt.show()","9f1d8f22":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\nfi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","11f583a4":"# \uadf8\ub798\ud504 \uc81c\ubaa9\ntitles = ['The most important features in predicting survival on the Titanic: XGB']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","1577d6ef":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n# \uc544\ub798\ub294 Features\ub77c\ub294 \uc5f4\uc5d0 \ud2b8\ub808\uc778\uc758 \uc5f4\ub4e4\uc758 \uc774\ub984\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uace0 Importance\uc5d0\ub294 Logistic regression\uc5d0\ub294 coefficient\ub97c \ubc14\uafb8\uc5b4 \ub123\uc5b4\ub77c\ub294 \ub118\ud30c\uc774 \uba85\ub839\uc785\ub2c8\ub2e4.(\uc989 \uac00\ub85c\ub97c \uc138\ub85c\ub85c)\nfi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)\n\n\nimportance","64f551ce":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: Logistic Regression']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","a6edfe7f":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\ngbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\nxgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\nran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\next_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\nada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\nimportances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\nimportances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\nimportances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)\n\n# \ubcf4\uae30\nimportances","d83beb60":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\nfi = {'Features':importances['Feature'], 'Importance':importances['Average']}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)\n\n\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: 5 model average']\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","9b611cd9":"# \uc57d\ud55c \ub188 \ud0c8\ub77d, \ubcf8\ub798 \uc880 \ud0c8\ub77d\uc2dc\ud0a4\ub294\ub370 ...\n# train = train.drop([ ], axis=1)\n# test = test.drop([ ], axis=1)\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\nX_train = train\nX_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","efef17e6":"#  \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd\n# \ubaa8\ub378 \uc0ac\uc6a9\nran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=1)\ngbc = GradientBoostingClassifier(random_state=1)\nsvc = SVC(probability=True)\next = ExtraTreesClassifier(random_state=1)\nada = AdaBoostClassifier(random_state=1)\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v2 = []\n\n# Fit & cross validate\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v2.append(acc.mean())","3a6b6ad0":"# \ud14c\uc774\ube14 \ub9cc\ub4e4\uc5b4\uc11c \ubcf4\uae30\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2})\n\nresult_df = results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)\nresult_df.head","fe512401":"# \uacb0\uacfc\nsns.barplot(x='Score with feature selection', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.85, 1.00)","79ed7c8a":"# SVC\n# \ud30c\ub77c\ubbf8\ud130 \uc11c\uce58\nCs = [0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 50, 100]\ngammas = [0.001, 0.01, 0.1, 1]\n\n# \ud30c\ub77c\ubbf8\ud130 \uadf8\ub9ac\ub4dc \uc14b\ud305\nhyperparams = {'C': Cs, 'gamma' : gammas}\n\n# \uad50\ucc28\uac80\uc99d\ngd=GridSearchCV(estimator = SVC(probability=True), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# \ubaa8\ub378 fiting \ubc0f \uacb0\uacfc\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)\n","2beb0fec":"# Gradient Boosting Classifier\nlearning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [100, 250, 500, 750, 1000, 1250, 1500]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = GradientBoostingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","1338906c":"# Logistic Regression\npenalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\n\nhyperparams = {'penalty': penalty, 'C': C}\n\ngd=GridSearchCV(estimator = LogisticRegression(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","9f18ce74":"# XGBoost Step 1.\nlearning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [10, 25, 50, 75, 100, 250, 500, 750, 1000]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = XGBClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a8a93697":"# XGB Step 2.\nmax_depth = [3, 4, 5, 6, 7, 8, 9, 10]\nmin_child_weight = [1, 2, 3, 4, 5, 6]\n\nhyperparams = {'max_depth': max_depth, 'min_child_weight': min_child_weight}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","6c8b0394":"# XGB Step 3.\ngamma = [i*0.1 for i in range(0,5)]\n\nhyperparams = {'gamma': gamma}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","32a18a63":"\n# XGB Step 4\nsubsample = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\ncolsample_bytree = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\n    \nhyperparams = {'subsample': subsample, 'colsample_bytree': colsample_bytree}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","2c9568e5":"# XGB Step 5\nreg_alpha = [1e-5, 1e-2, 0.1, 1, 100]\n    \nhyperparams = {'reg_alpha': reg_alpha}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0, subsample=0.6, colsample_bytree=0.9),\n                                         param_grid = hyperparams, verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","80ee5450":"# Gaussian Process\nn_restarts_optimizer = [0, 1, 2, 3]\nmax_iter_predict = [1, 2, 5, 10, 20, 35, 50, 100]\nwarm_start = [True, False]\n\nhyperparams = {'n_restarts_optimizer': n_restarts_optimizer, 'max_iter_predict': max_iter_predict, 'warm_start': warm_start}\n\ngd=GridSearchCV(estimator = GaussianProcessClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","869b5b13":"# Adaboost.\nn_estimators = [10, 25, 50, 75, 100, 125, 150, 200]\nlearning_rate = [0.001, 0.01, 0.1, 0.5, 1, 1.5, 2]\n\nhyperparams = {'n_estimators': n_estimators, 'learning_rate': learning_rate}\n\ngd=GridSearchCV(estimator = AdaBoostClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","8649b5bd":"# KNN\nn_neighbors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30]\n\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# Fitting model and return results\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","5ba77285":"# Random Forest.\nn_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = RandomForestClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","fe2672b2":"# Extra Trees\nn_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = ExtraTreesClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","1272a359":"# Bagging Classifier\nn_estimators = [10, 15, 20, 25, 50, 75, 100, 150]\nmax_samples = [1, 2, 3, 5, 7, 10, 15, 20, 25, 30, 50]\nmax_features = [1, 3, 5, 7]\n\nhyperparams = {'n_estimators': n_estimators, 'max_samples': max_samples, 'max_features': max_features}\n\ngd=GridSearchCV(estimator = BaggingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","7af98a48":"# \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd\n# \ud29c\ub2dd \ubaa8\ub378 \uc2dc\uc791\n# sample\uc744 split\ud558\ub294 \uac83\uc740 \uc804\uccb4\ub370\uc774\ud130 80%\ub97c \ud2b8\ub808\uc778\uc14b\uc5d0 20%\ub294 \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \uc90c  \nran = RandomForestClassifier(n_estimators=25,\n                             max_depth=3, \n                             max_features=3,\n                             min_samples_leaf=2, \n                             min_samples_split=8,  \n                             random_state=1)\n\nknn = KNeighborsClassifier(algorithm='auto', \n                           leaf_size=1, \n                           n_neighbors=5, \n                           weights='uniform')\n\nlog = LogisticRegression(C=2.7825594022071245,\n                         penalty='l2')\n\nxgb = XGBClassifier(learning_rate=0.0001, \n                    n_estimators=10,\n                    random_state=1)\n\ngbc = GradientBoostingClassifier(learning_rate=0.0005,\n                                 n_estimators=1250,\n                                 random_state=1)\n\nsvc = SVC(probability=True)\n\next = ExtraTreesClassifier(max_depth=None, \n                           max_features=3,\n                           min_samples_leaf=2, \n                           min_samples_split=8,\n                           n_estimators=10,\n                           random_state=1)\n\nada = AdaBoostClassifier(learning_rate=0.1, \n                         n_estimators=50,\n                         random_state=1)\n\ngpc = GaussianProcessClassifier()\n\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v3 = []\n\n# Fit & \uad50\ucc28 \uac80\uc99d\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v3.append(acc.mean())","97cded86":"# \ub7ad\ud0b9 \ud14c\uc774\ube14 \uc0dd\uc131\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2,\n    'Score with tuned parameters': scores_v3})\n\nresult_df = results.sort_values(by='Score with tuned parameters', ascending=False).reset_index(drop=True)\nresult_df.head(11)","e5efba13":"# \uacb0\uacfc\nsns.barplot(x=None, y = None, data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 1.00)","e2d7b9ba":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub4dc\ubcf4\ud305\ngrid_hard = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'hard')\n\ngrid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv = 10)\ngrid_hard.fit(X_train, y_train)\n\nprint(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean()*100))","33ab39b3":"grid_soft = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'soft')\n\ngrid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv = 10)\ngrid_soft.fit(X_train, y_train)\n\nprint(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean()*100))","f4f62661":"# Final predictions1\npredictions = grid_soft.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission133.csv', header = True, index = False)","8cd47084":"# Final predictions2\npredictions = grid_hard.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission134.csv', header = True, index = False)","908bcddd":"<a id = \"tips35\"><\/a>\n## No. 35 - To see jointplot between 'LastName' and 'Fare'\/ jointplot\uc73c\ub85c 'LastName'\uacfc 'Fare'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","f12344c8":"<a id = \"tips72\"><\/a>\n## No. 72- To view one on one graphs between features using pairplot\/  Pairplot\uc73c\ub85c \ubcf8 \uac01 \ud56d\ubaa9\ub2f9\uc758 1:1 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","16a23f86":"<a id = \"tips80\"><\/a>\n## No. 80 -   Viewing importance table for 5 models \/ 5\uac1c\ubaa8\ub378 \uc911\uc694\ub3c4 \ud45c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","0c4f9cc9":"<a id = \"tips36\"><\/a>\n## No. 36 - Plotting survival count vs Siblings or Spouse on board \ubc30\uc6b0\uc790 \ubc0f \ud615\uc81c\uc790\ub9e4 (SibSp)\ub3d9\uc2b9\uc790 \uc0dd\uc874\uc728 \uc22b\uc790\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","22475e6b":"<a id = \"tips82\"><\/a>\n## No. 82 -  Viewing the result plot after retraining \ubaa8\ub378 \uc7ac \uad50\uc721 \ud6c4 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","3d71128c":"<a id = \"tips62\"><\/a>\n## No. 62- To view Pcalss groupby survival % and replace exisiting values with that % \uac01 Pclass \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","cd3eff9b":"<a id = \"tips94\"><\/a>\n## No. 94 -    Viewing the Random Forest parameter tunning result \/ Random Forest \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","94ab7f61":"-------","b3d4221e":"<a id = \"tips20\"><\/a>\n## No. 20 - To see Survival ratio per Age using kdeplot. density plot\uc744 \ud65c\uc6a9\ud558\uc5ec \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \ube44\uc728 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","9aad4958":"<a id = \"tips73\"><\/a>\n## No. 73- To view one on one graphs between features using pairgrid\/  Pairgrid\ub85c \ubcf8 \uac01 \ud56d\ubaa9\ub2f9\uc758 1:1 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","18c2f79c":"<a id = \"tips8\"><\/a>\n## No. 8 To see Survival count per Pclass. Pclass \ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","e4aaa8e6":"<a id = \"tips92\"><\/a>\n## No. 92 -    Viewing the Adaboost parameter tunning result \/ Adaboost \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","d36f3544":"<a id = \"tips68\"><\/a>\n## No. 68- To view Fare groupby survival % and replace exisiting values with that % \uac01 \uc694\uae08\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","7f551e26":"<a id = \"tips54\"><\/a>\n## No. 54 -  Fare per Embarked using distplot. \ub514\uc2a4\ud2b8\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","dab41501":"<a id = \"tips85\"><\/a>\n## No. 85 -    Viewing the LR parameter tunning result \/ LR \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","5418ac61":"<a id = \"tips74\"><\/a>\n## No. 74 -  Overall Correlation of Final Features \/ Heatmap\uc73c\ub85c \ubcf8 \ud56d\ubaa9\ub4e4\uc758 \uc804\uccb4\uc801 \uc0c1\uad00\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","aec6fadf":"* Cabin","f1f9e482":"<a id = \"tips79\"><\/a>\n## No. 79 -    Viewing importance plot for LR \/ LR \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","c0637498":"<a id = \"tips70\"><\/a>\n## No. 70- To view Embarked groupby survival % and replace exisiting values with that % \uac01 \uc2b9\uc120 \uc7a5\uc18c\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","e8cbe9a5":"<a id = \"tips6\"><\/a>\n## No. 6 - To see the survival counts \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","bcd66a28":"<a id = \"tips46\"><\/a>\n## No. 46 - To view Ticket per Pclass using lineplot \/Pclass \ubcc4 \ud2f0\ucf13 \ub77c\uc778\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","0a0c0c61":"<a id = \"tips31\"><\/a>\n## No. 31 - To see relplot between 'Initial' and 'LastName'\/ relplot\uc73c\ub85c 'Initial'\uacfc 'LastName'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","2bcb3ae2":"<a id = \"tips7\"><\/a>\n## No. 7 - To see Survived percentage in a pie chart and count in a countplot \uc11c\ube0c \ud50c\ub86f \ub450\uac1c\uc5d0\uc11c \ud30c\uc774\ucc28\ud2b8\ub85c \uc0dd\uc874\uc790 %\ubcf4\uace0 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c \uc0dd\uc874\uc790 \uc22b\uc790\ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","0794b208":"<a id = \"tips93\"><\/a>\n## No. 93 -    Viewing the KNN parameter tunning result \/ KNN \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","53630634":"<a id = \"tips64\"><\/a>\n## No. 64- To view Gender groupby survival % and replace exisiting values with that % \uac01 \uc131\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)","fef72ee4":"<a id = \"tips55\"><\/a>\n## No. 55 -    Survival frequencies by Embarked using density plotsEmbarked\ubcc4 \uc0dd\uc874\uc790\ub97c Density Plot\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","8114020b":"<a id = \"tips83\"><\/a>\n## No. 83 -  Viewing the SVC parameter tunning result \/ SVC \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","edf87d45":"<a id = \"tips12\"><\/a>\n## No. 12 - To see Survived percentage and count in countplot and pointplot \uce74\uc6b4\ud2b8\ud50c\ub86f \ubc0f \ud3ec\uc778\ud2b8 \ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \uc0dd\uc874\uc790 % \ubc0f \uc22b\uc790\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","81024d4c":"--------------\n\n# Part 8  Data Visualization in Feature Engineering ","27486163":"<a id = \"tips57\"><\/a>\n## No. 57 -  Viewing Cabins per Embarked using replot\/ replot\uc73c\ub85c Embarked \ubcc4 \uce90\ube48 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","235773da":"<a id = \"tips99\"><\/a>\n## No. 99 -    Viewing the hard voting result \ud558\ub4dc \ubcf4\ud305 \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","ef02b5ef":"<a id = \"tips60\"><\/a>\n## No. 60 - Viewing Cabin per Pclass using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 Cabin \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)\n[Go to the Table of Contents](#table_of_contents)","869df8df":"<a id = \"tips61\"><\/a>\n## No. 61 -  To view the new data frame with heatmap\/ Heatmap\uc73c\ub85c \uc0c8 \ub370\uc774\ud130 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)\n","f837ce46":"_________\n\n## Part 5 'SibSp' & 'Parch' ","7d754952":"<a id = \"tips42\"><\/a>\n## No 42. - Survival numbers per Fare and Pclass using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c \ubcf8 Pclass \ubc0f Fare\ub85c \ubcf8 \uc0dd\uc874 \uc218\n[Go to the Table of Contents](#table_of_contents)","1f7795f3":"<a id = \"tips37\"><\/a>\n## No. 37 - Plotting survival count vs Parents and Children on board \ubd80\ubaa8\ub098 \uc790\uc2dd\uacfc (Parch)\ub3d9\uc2b9\uc790 \uc0dd\uc874\uc728 \uc22b\uc790\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","2266b584":"<a id = \"tips5\"><\/a>\n## No. 5 - Data columns \ub370\uc774\ud130\uc758 \uceec\ub7fc\ub9cc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","46dc15e4":"<a id = \"tips100\"><\/a>\n## No. 100 -    Viewing the soft voting result \uc18c\ud504\ud2b8 \ubcf4\ud305 \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","a78e5cd1":"<a id = \"tips67\"><\/a>\n## No. 67- To view Ticket groupby survival % and replace exisiting values with that % \uac01 \ud2f0\ucf13\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","f4b46902":"<a id = \"tips53\"><\/a>\n## No 53 - To view Fare per Embarked using vilolinplot \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4 \uc694\uae08 \ud604\ud669\n[Go to the Table of Contents](#table_of_contents)","9a4e3b64":"_________\n\n## Part 6 'Fare' and 'Ticket'\n","833bd00f":"* First we have to import a few things \uba87 \uac1c \uc784\ud3ec\ud2b8\ud558\uace0 \uc2dc\uc791\ud569\ub2c8\ub2e4.","3fc32101":"## Importing","7a3c5330":"<a id = \"tips86\"><\/a>\n## No. 86 -   Viewing the XGB Step 1 parameter tunning result \/ XGB Step 1 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","800d6046":"<a id = \"tips10\"><\/a>\n## No. 10 - To see Survival count per Pclass using crosstab. \ud06c\ub85c\uc2a4 \ud0ed\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","15289d0b":"<a id = \"tips52\"><\/a>\n## No 52 - Surval Status per Embarked using factorplot \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4 \uc0dd\uc874 \ud604\ud669\n[Go to the Table of Contents](#table_of_contents)","04d98dbf":"<a id = \"tips22\"><\/a>\n## No. 22 - Plotting with facotplot to see survival rate per Sex and Pclass\/ Factorplot\uc73c\ub85c \ub0a8\ub140\ubcc4 Pclass\ubcc4 \uc0dd\uc874\uc728 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","2fc7d7e5":"<a id = \"tips63\"><\/a>\n## No. 63- To view Name groupby survival % and replace exisiting values with that % \uac01 Name \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)","87c13f91":"_________________\n\n## Part 2 'Survived'","097983b6":"<a id = \"tips1\"><\/a>\n## No. 1 - Using missingno from matplotlib to see missing values \ub9f7\ud50c\ub86f\ub9bd\uc758 \ubbf8\uc2f1\ub178\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube48\uac12 \ud55c \ub208\uc5d0 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","99386fd1":"<a id = \"tips9\"><\/a>\n## No. 9 To see survival percentage per gender per Pclass using factoplot. Pclass \ub2f9 \ub0a8\ub140 \uc0dd\uc874 \ud655\ub960 \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","9e1c4a99":"<a id = \"tips34\"><\/a>\n## No. 34 - To see relplot between 'LastName' and 'Ticket'\/ relplot\uc73c\ub85c 'LastName'\uacfc 'Ticket'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","ad55d246":"<a id = \"tips26\"><\/a>\n## No. 26  Age Histogram by Survival -  \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uc5f0\ub839\ubcc4 \uc0dd\uc874\uc790 \uce74\uc6b4\ud2b8 \ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","85d547c1":"## Part 1 Overview","dc2e390b":"<a id = \"tips32\"><\/a>\n## No. 32 - To see relplot between 'Initial' and 'Age'\/ relplot\uc73c\ub85c 'Initial'\uacfc 'Age'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","768781a9":"<a id = \"tips24\"><\/a>\n## No. 24  To view the average age per Pclass and Pclass counts per Age -  \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c Pclass\ub2f9 \ud3c9\uade0 \ub098\uc774\ubcf4\uace0 \uc5f0\ub839\ubcc4 Pclss \uce74\uc6b4\ud2b8 \ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","dc09c0ed":"<a id = \"tips17\"><\/a>\n## No. 17 - To see Fare per Pclass using violinlot. violin plot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 Fare \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","916d7702":"<a id = \"tips65\"><\/a>\n## No. 65- To view Age groupby survival % and replace exisiting values with that % \uac01 \ub098\uc774\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)","8f25175a":"<a id = \"tips91\"><\/a>\n## No. 91 -    Viewing the GP parameter tunning result \/ GP \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","2520042d":"* Fare","982f0a1f":"<a id = \"tips49\"><\/a>\n## No. 49 - To view Fare frequencies between survivors and non-survivors using kdeplot \/Fare\ube48\ub3c4 \uc0dd\uc874\ubcc4\ub85c kdeplot\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","f928d59d":"<a id = \"tips30\"><\/a>\n## No. 30 - To see jointplot between 'Initial' and 'Fare'\/ \uc870\uc778\ud2b8 \ud50c\ub86f\uc73c\ub85c 'Initial'\uacfc 'Fare'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","734780de":"<a id = \"tips66\"><\/a>\n## No. 66- To view Family groupby survival % and replace exisiting values with that % \uac01 \ub3d9\uc2b9\uc790 \uc22b\uc790 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","176c8f68":"<a id = \"tips29\"><\/a>\n## No. 29 - To see Survival status per age vs Pclass and sex using violin plot\/ \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \ubc0f \uc131\ubcc4\uc5d0\uc11c Age\ubcc4\ub85c \uc0dd\uc874\uce74\uc6b4\ud2b8 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","dedc6b08":"<a id = \"tips2\"><\/a>\n## No. 2 - Correlation heatmap between numerical values \uc218\uce58\ud654 \ub418\uc5b4 \uc788\ub294 \ud56d\ubaa9\uc5d0 \ub300\ud55c \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","315d4055":"<a id = \"tips98\"><\/a>\n## No. 98 -   Viewing the final result graph\/ \ud30c\uc774\ub110 \uacb0\uacfc \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","abc07d00":"<a id = \"tips39\"><\/a>\n## No. 39 - SibSp by Survival using barplot and factoplot\/ \ubc14\ud50c\ub86f\uc774\ub791 \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c SibSp \ubcc4 \uc0dd\uc874 \ud655\ub960 \ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","41c8c596":"<a id = \"tips40\"><\/a>\n## No. 40 - To see relplot between 'Pclass' and 'FamilySize'\/ relplot\uc73c\ub85c 'Pclass'\uc640 'FamilySize'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","0bf89a0c":"<a id = \"tips101\"><\/a>\n## No. 101 -  To view the submission file \uc81c\ucd9c \ud30c\uc77c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","0afa2d20":"<a id = \"tips15\"><\/a>\n## No. 15 - To see Survival % per Pclass using barplot. barplot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","3a1aad01":"<a id = \"tips28\"><\/a>\n## No. 28 - To see Age count using histogram. \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c Age count \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","a47f6511":"<a id = \"tips71\"><\/a>\n## No. 71- To view LastName groupby survival % and replace exisiting values with that % \uac01 Last Name\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)","816d0057":"<a id = \"tips87\"><\/a>\n## No. 87 -    Viewing the XGB Step 2 parameter tunning result \/ XGB Step 2 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","84aea6de":"<a id = \"table_of_contents\"><\/a>\n## Table of contents\n\n### Part 1 Overview\n\n[Tips 1: Using missingno from matplotlib to see missing values \ub9f7\ud50c\ub86f\ub9bd\uc758 \ubbf8\uc2f1\ub178\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube48\uac12 \ud55c \ub208\uc5d0 \ubcf4\uae30](#tips1)\t\t\t\n[Tips 2: Correlation heatmap between numerical values \uc218\uce58\ud654 \ub418\uc5b4 \uc788\ub294 \ud56d\ubaa9\uc5d0 \ub300\ud55c \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4 \ubcf4\uae30](#tips2)\t\t\t\n[Tips 3: Overall Co-relation matrix \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4\ub97c \ub9cc\ub4e4\uc5b4 \uad00\uacc4 \ud55c \ub208\uc5d0 \ubcf4\uae30](#tips3)\t\t\t\n[Tips 4: To check the empty values \ube48\uac12\uc758 \ud569 \ubcf4\uae30](#tips4)\t\t\t\n[Tips 5: Data columns \ub370\uc774\ud130\uc758 \uceec\ub7fc\ub9cc \ubcf4\uae30](#tips5)\t\n\n### Part 2 Survived\n\n[Tips 6: To see the survival counts \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips6)\t\t\t\n[Tips 7: To see Survived percentage in a pie chart and count in a countplot \uc11c\ube0c \ud50c\ub86f \ub450\uac1c\uc5d0\uc11c \ud30c\uc774\ucc28\ud2b8\ub85c \uc0dd\uc874\uc790 %\ubcf4\uace0 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips7)\t\t\t\n\n### Part 3 Pclass\n\n[Tips 8: To see Survival count per Pclass. Pclass \ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips8)\t\t\t\n[Tips 9: To see survival percentage per gender per Pclass using factoplot. Pclass \ub2f9 \ub0a8\ub140 \uc0dd\uc874 \ud655\ub960 \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips9)\t\t\t\n[Tips 10: To see Survival count per Pclass using crosstab. \ud06c\ub85c\uc2a4 \ud0ed\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips10)\t\t\t\n\n[Tips 11: To see Survived percentage and count in countplots for Pclass \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \uc0dd\uc874\uc790 % \ubc0f \uc22b\uc790\ub85c \ubcf4\uae30](#tips11)\t\n[Tips 12: To see Survived percentage and count in countplot and pointplot \uce74\uc6b4\ud2b8\ud50c\ub86f \ubc0f \ud3ec\uc778\ud2b8 \ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \uc0dd\uc874\uc790 % \ubc0f \uc22b\uc790\ub85c \ubcf4\uae30](#tips12)\n[Tips 13: To see Survival % per Pclass. Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30](#tips13)\t\n[Tips 14: To see Survival % per Pclass using kdeplot. density plot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30 ](#tips14)\t\t\t\n[Tips 15: To see Survival % per Pclass using barplot. barplot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30](#tips15)\t\n\n[Tips 16: To see Survival % per Pclass using boxplot. boxplot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30](#tips16)  \n[Tips 17: To see Fare per Pclass using violinlot. violin plot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 Fare \ubcf4\uae30](#tips17)  \t\n\n### Part 4 Age, Sex and Name\n\n[Tips 18: To see Survival counts per Sex and Age after dropping missing values in Age. \ub098\uc774\uc758 \ube48\uac12\uc744 \uc81c\uac70\ud55c \ud6c4 \ub0a8\ub140\ubcc4 \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips18)\t\t\n[Tips 19: To see Survival counts per Age. \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips19)\t\t\t\n[Tips 20: To see Survival ratio per Age using kdeplot. density plot\uc744 \ud65c\uc6a9\ud558\uc5ec \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \ube44\uc728 \ubcf4\uae30](#tips20)\t\t\t\n\n[Tips 21: After extracting salutations as 'Initial' and check them per gender \uc774\ub984\uc5d0\uc11c \ud638\uce6d\ub9cc \ube7c\ub0b4\uc11c \uc774\ub97c \ub0a8\ub140 \uc22b\uc790\ub85c \ubcf4\uae30](#tips21)\n[Tips 22: Plotting with facotplot to see survival rate per Sex and Pclass\/ Factorplot\uc73c\ub85c \ub0a8\ub140\ubcc4 Pclass\ubcc4 \uc0dd\uc874\uc728 \ubcf4\uae30](#tips22)\t\t\t\n[Tips 23: Combined Views of Survived per Sex and Age -  \ub0a8\ub140\ubcc4, \ub098\uc774\ubcc4 \uc0dd\uc874\uc790\uc218\ub97c \uc885\ud569\uc801\uc73c\ub85c \ubcf4\uae30](#tips23)\t\n[Tips 24: To view the average age per Pclass and Pclass counts per Age -  \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c Pclass\ub2f9 \ud3c9\uade0 \ub098\uc774\ubcf4\uace0 \ubcf4\uae30](#tips24)  \n[Tips 25: To view the Survival counts per Age using swarmplot -  \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c \uc5f0\ub839\ubcc4 \uc0dd\uc874\uc790 \uce74\uc6b4\ud2b8 \ubcf4\uae30](#tips25) \n\n[Tips 26: Age Histogram by Survival -  \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uc5f0\ub839\ubcc4 \uc0dd\uc874\uc790 \uce74\uc6b4\ud2b8 \ubcf4\uae30](#tips26)  \t\n[Tips 27: To see Survival count per gender per Pclass using crosstab. \ud06c\ub85c\uc2a4 \ud0ed\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \ub0a8\ub140\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30](#tips27)  \n[Tips 28: To see Age count using histogram. \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c Age count \ubcf4\uae30](#tips28) \n[Tips 29: To see Survival status per age vs Pclass and sex using violin plot\/ \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \ubc0f \uc131\ubcc4\uc5d0\uc11c Age\ubcc4\ub85c \uc0dd\uc874\uce74\uc6b4\ud2b8 \ubcf4\uae30](#tips29)  \n[Tips 30: To see jointplot between 'Initial' and 'Fare'\/ \uc870\uc778\ud2b8 \ud50c\ub86f\uc73c\ub85c 'Initial'\uacfc 'Fare'\uad00\uacc4 \ubcf4\uae30](#tips30)\t\t\t\n\n[Tips 31: To see relplot between 'Initial' and 'LastName'\/ relplot\uc73c\ub85c 'Initial'\uacfc 'LastName'\uad00\uacc4 \ubcf4\uae30](#tips31)\t\t\t\n[Tips 32: To see relplot between 'Initial' and 'Age'\/ relplot\uc73c\ub85c 'Initial'\uacfc 'Age'\uad00\uacc4 \ubcf4\uae30](#tips32) \n[Tips 33: To see relplot between 'LastName' and 'Fare'\/ relplot\uc73c\ub85c 'LastName'\uacfc 'Fare'\uad00\uacc4 \ubcf4\uae30](#tips33)  \n[Tips 34: To see relplot between 'LastName' and 'Ticket'\/ relplot\uc73c\ub85c 'LastName'\uacfc 'Ticket'\uad00\uacc4 \ubcf4\uae30](#tips34)   \n[Tips 35: To view Fare per Ticket using scatter plot \ud2f0\ucf13 \ubcc4 \uac00\uaca9 \uc2a4\uce90\ud130 \ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips35)   \n\n### Part 5 SibSp & Parch \n\n[Tips 36: Plotting survival count vs Siblings or Spouse on board \ubc30\uc6b0\uc790 \ubc0f \ud615\uc81c\uc790\ub9e4 (SibSp)\ub3d9\uc2b9\uc790 \uc0dd\uc874\uc728 \uc22b\uc790\ub85c \ubcf4\uae30](#tips36)\t\n[Tips 37: Plotting survival count vs Parents and Children on board \ubd80\ubaa8\ub098 \uc790\uc2dd\uacfc (Parch)\ub3d9\uc2b9\uc790 \uc0dd\uc874\uc728 \uc22b\uc790\ub85c \ubcf4\uae30](#tips37)\t\t\t\n[Tips 38: Family Size Histogram by Survival \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uac00\uc871 \ud06c\uae30 \ubcc4 \uc0dd\uc874 \ud655\ub960 \ubcf4\uae30](#tips38)\t\t\t\n[Tips 39: SibSp by Survival using barplot and factoplot\/ \ubc14\ud50c\ub86f\uc774\ub791 \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c SibSp \ubcc4 \uc0dd\uc874 \ud655\ub960 \ubcf4\uae30](#tips39)\t\n[Tips 40: TTo see relplot between 'Pclass' and 'FamilySize'\/ relplot\uc73c\ub85c 'Pclass'\uc640 'FamilySize'\uad00\uacc4 \ubcf4\uae30](#tips40)  \n\n### Part 6 Fare and Ticket\n\n[Tips 41: Fare Histogram by Survival \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \ubcf8 \uc694\uae08\ubcc4 \uc0dd\uc874](#tips41) \n[Tips 42: Survival numbers per Fare and Pclass using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c \ubcf8 Pclass \ubc0f Fare\ub85c \ubcf8 \uc0dd\uc874 \uc218](#tips42)  \n[Tips 43: To view Fare using histogram \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec Fare \ubcf4\uae30](#tips43)   \n[Tips 44: To view Fare per Ticket using scatter plot \ud2f0\ucf13 \ubcc4 \uac00\uaca9 \uc2a4\uce90\ud130 \ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips44)   \n[Tips 45: To view Fare per Pclass using lineplot \/Pclass \ubcc4 \uac00\uaca9 \ub77c\uc778\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips45)  \t\n\t\t\n[Tips 46: To view Ticket per Pclass using lineplot \/Pclass \ubcc4 \ud2f0\ucf13 \ub77c\uc778\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips46)\t  \t\t\n[Tips 47: To view Fare per Ticket using catplot \/\ud2f0\ucf13\ubcc4 \uac00\uaca9 \ucea3\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30](#tips47)  \t\t\t\n[Tips 48: To view Fare per Ticket using relplot \/\ud2f0\ucf13\ubcc4 \uac00\uaca9 relplot\uc73c\ub85c \ubcf4\uae30](#tips48)  \t \t\t\n[Tips 49: To view Fare frequencies between survivors and non-survivors using kdeplot \/Fare\ube48\ub3c4 \uc0dd\uc874\ubcc4\ub85c kdeplot\uc73c\ub85c \ubcf4\uae30]](#tips49)\t  \t\n[Tips 50: To view Ticket frequencies between survivors and non-survivors using kdeplot \/Ticket \ube48\ub3c4 \uc0dd\uc874\ubcc4\ub85c kdeplot\uc73c\ub85c \ubcf4\uae30)](#tips50)\n\n\n### Part 7 Cabin and Embarked\n \n[Tips 51: Surval Status per Embarked \uc5ec\ub7ec\uac1c\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked \ubcc4 \uc0dd\uc874 \ud604\ud669](#tips51)  \n[Tips 52: Surval Status per Embarked using factorplot \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4  \uc0dd\uc874\ud604\ud669](#tips52)  \t\t\n[Tips 53: To view Fare per Embarked using vilolinplot \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4 \uc694\uae08 \ud604\ud669](#tips53)\t\t\t\n[Tips 54: Fare per Embarked using distplot. \ub514\uc2a4\ud2b8\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30)](#tips54)   \n  \n\n\n[Tips 36 isin - filtering by conditions multi conditions in multi columns \/ isin\uc744 \ud65c\uc6a9\ud55c \uba40\ud2f0 \uceec\ub7fc \uc870\uac74 \ud544\ud130\ub9c1](#tips36)\t\t\t\n[Tips 37: Sorting and Counting sorted values \uc18c\ud305\ud558\uace0 \uc18c\ud305\ub41c \ud569 \uc138\uae30](#tips37)\t\t\t\n[Tips 38: Sorting with conditions and counting the sorted values \uc870\uac74\uc73c\ub85c \uc18c\ud305\ud558\uace0 \uadf8 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc758 \uac2f\uc218 \uc138\uae30](#tips38)\t\t\t\n[Tips 39: Sorting with conditions and if there are any that matches \uc870\uac74\uc73c\ub85c \uc18c\ud305\ud558\uace0 \uadf8 \uc870\uac74\uc5d0 \ub9de\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \uccb4\ud06c - True\/False)](#tips39)  \t\t\t\n[Tips 40: Sorting with conditions and get the percentage \uc18c\ud305\ud558\uace0 \uadf8 \uac83\uc774 \ucc28\uc9c0\ud558\ub294 \ubc31\ubd84\uc728 \uad6c\ud558\uae30](#tips40)  \n\n[Tips 41: Making a new empty DataFrame \uc0c8\ub85c\uc6b4 \ube48 \ub370\uc774\ud130 \ud504\ub808\uc784 \ub9cc\ub4e4\uae30)](#tips41)\t\t\t\n[Tips 42: Copying and creating a new DataFrame \ubcf5\uc0ac\ud574\uc11c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud504\ub808\uc784 \ub9cc\ub4e4\uae30](#tips42)\t\t\t\n[Tips 43: Creating a new column \uc0c8\ub85c\uc6b4 \uc5f4 \ub9cc\ub4e4\uae30](#tips43)\t\t\t\n[Tips 44: Creating a new column by copying an existing column \uae30\uc874 \uc5f4\uc744 \uce74\ud53c\ud574\uc11c \uc0c8\uc5f4\uc744 \ub9cc\ub4e4\uae30](#tips44)  \n[Tips 45: Creating a new Dataframe with a certain column) \uc0c8 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \ud558\ub098\ub85c \ub9cc\ub4e4\uae30](#tips45)  \t\n\t\t\n[Tips 46: Creating a new Dataframe with certain rows) \uc0c8 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uae30\uc874 \ud589 \uc77c\ubd80\ub85c \ub9cc\ub4e4\uae30](#tips46)\t  \t\t\n[Tips 47: Creating a new Dataframe with certain columns) \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \uba87 \uac1c\ub85c \ub9cc\ub4e4\uae30](#tips47)  \t\t\t\n[Tips 48: Creating a new Dataframe with certain columns and certain rows) \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \uc5f4 \uba87\uac1c\uacfc \ud589 \uba87\uac1c\ub85c \ub9cc\ub4e4\uae30](#tips48)  \t \t\t\n[Tips 49: Creating a new Dataframe with exisiting rows that matches a certain condition \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uae30\uc874 \ud589\uc5d0\uc11c \ud2b9\uc815 \uc870\uac74\uc5d0 \uc77c\uce58\ud558\ub294 \uac83\ub9cc \uac00\uc9c0\uace0 \ub9cc\ub4e4\uae30]](#tips49)\t  \t\n[Tips 50: Creating a new Dataframe with exisiting rows that matches multiple conditions \uc0c8 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uba40\ud2f0 \uc870\uac74\uc5d0 \ubd80\ud569\ud558\ub294 \uae30\uc874 \ud589\uc73c\ub85c \ub9cc\ub4e4\uae30)](#tips50)\t\n\n[Tips 51: Surval Status per Embarked \uc5ec\ub7ec\uac1c\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked \ubcc4 \uc0dd\uc874 \ud604\ud669](#tips51)  \n[Tips 52: Surval Status per Embarked using factorplot \ud329\ud1a0\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4  \uc0dd\uc874\ud604\ud669](#tips52)  \t\t\n[Tips 53: To view Fare per Embarked using vilolinplot \ubc14\uc774\uc62c\ub9b0 \ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked\ubcc4 \uc694\uae08 \ud604\ud669](#tips53)\t\t\t\n[Tips 54: Fare per Embarked using distplot. \ub514\uc2a4\ud2b8\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30)](#tips54)  \n[Tips 55: Survival frequencies by Embarked using density plotsEmbarked\ubcc4 \uc0dd\uc874\uc790\ub97c Density Plot\uc73c\ub85c \ubcf4\uae30](#tips55)\t\n\n[Tips 56: Survival Rate per Embarked Place using countplot and pointplot \uce74\uc6b4\ud2b8\ud50c\ub86f\uacfc \ud3ec\uc778\ud2b8\ud50c\ub86f\uc744 \uc0ac\uc6a9\ud558\uc5ec Embarked\ubcc4 \uc0dd\uc874\uc218 \ubcf4\uae30](#tips56)\t\t\t\n[Tips 57: Viewing Cabins per Embarked using replot\/ replot\uc73c\ub85c Embarked \ubcc4 \uce90\ube48 \ubcf4\uae30](#tips57)\t\t\t\n[Tips 58: Viewing Fares per Embarked using jointplot \uc870\uc778\ud2b8\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30](#tips58)\t\t\t\n[Tips 59: Viewing Fares per Embarked using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30 ](#tips59)\t\t\t\n[Tips 60: Viewing Cabin per Pclass using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 Cabin \ubcf4\uae30 ](#tips60)\n\n### Part 8  Data Visualization in Feature Engineering \n\t\n[Tips 61: To view the new data frame with heatmap\/ Heatmap\uc73c\ub85c \uc0c8 \ub370\uc774\ud130 \ubcf4\uae30](#tips61)\t\t\t\n[Tips 62: To view Pcalss groupby survival % and replace exisiting values with that % \uac01 Pclass \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips62)\t\t\t\n[Tips 63: To view Name groupby survival % and replace exisiting values with that % \uac01 Name \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips63)\t\t\t\n[Tips 64: To view Gender groupby survival % and replace exisiting values with that % \uac01 \uc131\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips64)\t\t\t\n[Tips 65: To view Age groupby survival % and replace exisiting values with that % \uac01 \ub098\uc774\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips65)\t\t\n\n[Tips 66: To view Family groupby survival % and replace exisiting values with that % \uac01 \ub3d9\uc2b9\uc790 \uc22b\uc790 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips66)\t  \t\t\n[Tips 67: To view Ticket groupby survival % and replace exisiting values with that % \uac01 \ud2f0\ucf13\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips67)\t\t\t\n[Tips 68: To view Fare groupby survival % and replace exisiting values with that % \uac01 \uc694\uae08\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips68)\t\t\t\n[Tips 69: To view Cabin groupby survival % and replace exisiting values with that % \uac01 \uc694\uae08\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips69)\n[Tips 70: To view Embarked groupby survival % and replace exisiting values with that % \uac01 \uc2b9\uc120 \uc7a5\uc18c\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips70)\n\n[Tips 71: To view LastName groupby survival % and replace exisiting values with that % \uac01 Last Name\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30](#tips71)\t\t\t\n[Tips 72: To view one on one graphs between features using pairplot\/  Pairplot\uc73c\ub85c \ubcf8 \uac01 \ud56d\ubaa9\ub2f9\uc758 1:1 \uadf8\ub798\ud504 \ubcf4\uae30](#tips72)\t\t\t\n[Tips 73: To view one on one graphs between features using pairgrid\/  Pairgrid\ub85c \ubcf8 \uac01 \ud56d\ubaa9\ub2f9\uc758 1:1 \uadf8\ub798\ud504 \ubcf4\uae30](#tips73)\t\t\t\t\n[Tips 74: Overall Correlation of Final Features \/ Heatmap\uc73c\ub85c \ubcf8 \ud56d\ubaa9\ub4e4\uc758 \uc804\uccb4\uc801 \uc0c1\uad00\uad00\uacc4 \ubcf4\uae30](#tips74)\t\n\n\n### Part 9 Machine Learning\n\n\n[Tips 75:Viewing accurcacy table for the initial model \ucd5c\ucd08 \ubaa8\ub378 \uc815\ud655\ub3c4 \ud45c \ubcf4\uae30](#tips75)\t\t\t\n\n[Tips 76: Viewing accurcacy plot for the initial model \ucd5c\ucd08 \ubaa8\ub378 \uc815\ud655\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30](#tips76)\t\t\t\n[Tips 77: Viewing importance plot for XGB \/ XGB \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30](#tips77)\t\t\t\n[Tips 78: Viewing importance table for LR \/ LR \uc911\uc694\ub3c4 \ud45c \ubcf4\uae30](#tips78)\t\t\t\n[Tips 79: Viewing importance plot for LR \/ LR \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30](#tips79)\t\t\t\n[Tips 80: Viewing importance table for 5 models \/ 5\uac1c\ubaa8\ub378 \uc911\uc694\ub3c4 \ud45c \ubcf4\uae30](#tips80)  \n\n[Tips 81: Viewing importance plot for 5 models \/ 5\uac1c\ubaa8\ub378 \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30](#tips81)  \n[Tips 82: Viewing the result plot after retraining \ubaa8\ub378 \uc7ac \uad50\uc721 \ud6c4 \uadf8\ub798\ud504 \ubcf4\uae30](#tips82)  \n[Tips 83: Viewing the SVC parameter tunning result \/ SVC \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips83)  \n[Tips 84: Viewing the GBC parameter tunning result \/ GBC \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips84)  \n[Tips 85: Viewing the LR parameter tunning result \/ LR \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips85)  \n\n[Tips 86: Viewing the XGB Step 1 parameter tunning result \/ XGB Step 1 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips86)  \n[Tips 87: Viewing the XGB Step 2 parameter tunning result \/ XGB Step 2 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips87)  \n[Tips 88: Viewing the XGB Step 3 parameter tunning result \/ XGB Step 3 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips88)  \n[Tips 89: Viewing the XGB Step 4 parameter tunning result \/ XGB Step 4 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips89)  \n[Tips 90: Viewing the XGB Step 5 parameter tunning result \/ XGB Step 5 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips90)  \n\n[Tips 91: Viewing the GP parameter tunning result \/ GP \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips91)  \n[Tips 92: Viewing the Adaboost parameter tunning result \/ Adaboost \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips92)  \n[Tips 93: Viewing the KNN parameter tunning result \/ KNN \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips93)  \n[Tips 94: Viewing the Random Forest parameter tunning result \/ Random Forest \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips94)  \n[Tips 95: Viewing the Extra Trees parameter tunning result \/ Extra Trees \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips95)  \n\n[Tips 96: Viewing the Bagging Classifier parameter tunning result \/ Bagging Classifier \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30](#tips96)  \n[Tips 97: Viewing the ranking table after final training \/ Final Training Ranking Table \ubcf4\uae30](#tips97)  \n[Tips 98: Viewing the final result graph\/ \ud30c\uc774\ub110 \uacb0\uacfc \uadf8\ub798\ud504 \ubcf4\uae30](#tips98)  \n[Tips 99: Viewing the hard voting result \ud558\ub4dc \ubcf4\ud305 \uacb0\uacfc \ubcf4\uae30](#tips99)  \n[Tips 100: Viewing the soft voting result \uc18c\ud504\ud2b8 \ubcf4\ud305 \uacb0\uacfc \ubcf4\uae30](#tips100)  \n\n[Tips 101: To view the submission file \uc81c\ucd9c \ud30c\uc77c \ubcf4\uae30 ](#tips101)  \n\n\n","c5ce2416":"When using Google Colab\n\n        from google.colab import files\n        uploaded = files.upload()\n\nAnd then\n\n        import io\n        test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n        train = pd.read_csv(io.BytesIO(uploaded['train.csv']))","1ba45fc4":"<a id = \"tips95\"><\/a>\n## No. 95 -    Viewing the Extra Trees parameter tunning result \/ Extra Trees \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","75b61b03":"<a id = \"tips25\"><\/a>\n## No. 25  To view the Survival counts per Age using swarmplot -  \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c \uc5f0\ub839\ubcc4 \uc0dd\uc874\uc790 \uce74\uc6b4\ud2b8 \ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","ddf3e976":"<a id = \"tips21\"><\/a>\n## No. 21 - After extracting salutations as 'Initial' and check them per gender \uc774\ub984\uc5d0\uc11c \ud638\uce6d\ub9cc \ube7c\ub0b4\uc11c \uc774\ub97c \ub0a8\ub140 \uc22b\uc790\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","b6517bb4":"* Embarked","67d76e9e":"# Part 9 Machine Learning","9f9a0b36":"<a id = \"tips84\"><\/a>\n## No. 84 -    Viewing the GBC parameter tunning result \/ GBC \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","09090b02":"<a id = \"tips14\"><\/a>\n## No. 14 - To see Survival % per Pclass using kdeplot. density plot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","a0196da6":"<a id = \"tips16\"><\/a>\n## No. 16 - To see Survival % per Pclass using boxlot. boxplot\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","62032304":"<a id = \"tips90\"><\/a>\n## No. 90 -    Viewing the XGB Step 5 parameter tunning result \/ XGB Step 5 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","21004cf2":"------------\n\n# Part 7   'Cabin' and 'Embarked'","d9e6260d":"<a id = \"tips44\"><\/a>\n## No. 44 - To view Fare per Ticket using scatter plot \ud2f0\ucf13 \ubcc4 \uac00\uaca9 \uc2a4\uce90\ud130 \ud50c\ub86f\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","cdd9b729":"* Filling in the NaN values\n\n* Age","b38ff5fa":"<a id = \"tips3\"><\/a>\n## No. 3 _ Overall Co-relation matrix \ucf54\ub9b4\ub808\uc774\uc158 \ub9e4\ud2b8\ub9ad\uc2a4\ub97c \ub9cc\ub4e4\uc5b4 \uad00\uacc4 \ud55c \ub208\uc5d0 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","4eaece73":"<a id = \"tips75\"><\/a>\n## No. 75 - Viewing accurcacy table for the initial model \ucd5c\ucd08 \ubaa8\ub378 \uc815\ud655\ub3c4 \ud45c \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)\n","d74cd84a":"<a id = \"tips59\"><\/a>\n## No. 59 -  Viewing Fares per Embarked using swarmplot \uc2a4\uc650\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","8a97b720":"_________________\n\n## Part 3 'Pclass'","7ec8b4bc":"<a id = \"tips18\"><\/a>\n## No. 18 - To see Survival counts per Sex and Age after dropping missing values in Age. \ub098\uc774\uc758 \ube48\uac12\uc744 \uc81c\uac70\ud55c \ud6c4 \ub0a8\ub140\ubcc4 \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","7673923c":"<a id = \"tips38\"><\/a>\n## No. 38 - Family Size Histogram by Survival \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uac00\uc871 \ud06c\uae30 \ubcc4 \uc0dd\uc874 \ud655\ub960 \ubcf4\uae30  \n[Go to the Table of Contents](#table_of_contents)","ca451c5c":"<a id = \"tips56\"><\/a>\n## No. 56 -  Survival Rate per Embarked Place using countplot and pointplot \uce74\uc6b4\ud2b8\ud50c\ub86f\uacfc \ud3ec\uc778\ud2b8\ud50c\ub86f\uc744 \uc0ac\uc6a9\ud558\uc5ec Embarked\ubcc4 \uc0dd\uc874\uc218 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","de2c7420":"<a id = \"tips76\"><\/a>\n## No. 76 -    Viewing accurcacy plot for the initial model \ucd5c\ucd08 \ubaa8\ub378 \uc815\ud655\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","5ad4ea83":"<a id = \"tips97\"><\/a>\n## No. 97 -    Viewing the ranking table after final training \/ Final Training Ranking Table \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","7d9bbdfb":"<a id = \"tips45\"><\/a>\n## No. 45 - To view Fare per Pclass using lineplot \/Pclass \ubcc4 \uac00\uaca9 \ub77c\uc778\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","d1a7fce6":"<a id = \"tips51\"><\/a>\n## No 51. - Surval Status per Embarked \uc5ec\ub7ec\uac1c\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c \ubcf8 Embarked \ubcc4 \uc0dd\uc874 \ud604\ud669\n[Go to the Table of Contents](#table_of_contents)","fb83f7b0":"<a id = \"tips81\"><\/a>\n## No. 81 -    Viewing importance plot for 5 models \/ 5\uac1c\ubaa8\ub378 \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","3e9eea0b":"<a id = \"tips69\"><\/a>\n## No. 69- To view Cabin groupby survival % and replace exisiting values with that % \uac01 \uc694\uae08\ubcc4 \uc0dd\uc874\uc728\uc744 \ubcf4\uace0 \uc0dd\uc874\uc728\uc744 \uae30\uc874 \uac12 \ub300\uc2e0 \ub123\uae30\n[Go to the Table of Contents](#table_of_contents)\n","fc6c8c1f":"<a id = \"tips96\"><\/a>\n## No. 96 -   Viewing the Bagging Classifier parameter tunning result \/ Bagging Classifier \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","22f8a714":"<a id = \"tips77\"><\/a>\n## No. 77 -    Viewing importance plot for XGB \/ XGB \uc911\uc694\ub3c4 \uadf8\ub798\ud504 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","1052f57e":"<a id = \"tips23\"><\/a>\n## No. 23  Combined Views of Survived per Sex and Age -  \ub0a8\ub140\ubcc4, \ub098\uc774\ubcc4 \uc0dd\uc874\uc790\uc218\ub97c \uc885\ud569\uc801\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","d860d8f6":"* Initial","2c5e9e7c":"___________\n\n## Part 4 'Age', 'Sex' and 'Name'","bcece4fb":"<a id = \"tips58\"><\/a>\n## No. 58 -  Viewing Fares per Embarked using jointplot \uc870\uc778\ud2b8\ud50c\ub86f\uc73c\ub85c Embarked\ubcc4 \uc694\uae08 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","85e22231":"<a id = \"tips4\"><\/a>\n## No. 4 - To check the empty values \ube48\uac12\uc758 \ud569 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","06671d11":"<a id = \"tips89\"><\/a>\n## No. 89 -    Viewing the XGB Step 4 parameter tunning result \/ XGB Step 4 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","3dd0ec77":"<a id = \"tips48\"><\/a>\n## No. 48 - To view Fare per Ticket using relplot \/\ud2f0\ucf13\ubcc4 \uac00\uaca9 relplot\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","bc774825":"<a id = \"tips33\"><\/a>\n## No. 33 - To see relplot between 'LastName' and 'Fare'\/ relplot\uc73c\ub85c 'LastName'\uacfc 'Fare'\uad00\uacc4 \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","bae88dfa":"<a id = \"tips41\"><\/a>\n## No 41. - Fare Histogram by Survival \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \ubcf8 \uc694\uae08\ubcc4 \uc0dd\uc874\n[Go to the Table of Contents](#table_of_contents)","333ed4d6":"<a id = \"tips11\"><\/a>\n## No. 11 - To see Survived percentage and count in countplots \uce74\uc6b4\ud2b8\ud50c\ub86f\uc73c\ub85c Pclass\ubcc4 \uc0dd\uc874\uc790 % \ubc0f \uc22b\uc790\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","ee46552f":"<a id = \"tips13\"><\/a>\n## No. 13 - To see Survival % per Pclass. Pclass \ubcc4 \uc0dd\uc874\uc790 % \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","a4496719":"<a id = \"tips47\"><\/a>\n## No. 47 - To view Fare per Ticket using catplot \/\ud2f0\ucf13\ubcc4 \uac00\uaca9 \ucea3\ud50c\ub86f\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","f5f03d02":"<a id = \"tips50\"><\/a>\n## No. 50 - To view Ticket frequencies between survivors and non-survivors using kdeplot \/Ticket \ube48\ub3c4 \uc0dd\uc874\ubcc4\ub85c kdeplot\uc73c\ub85c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","d725b233":"* Change Strings to Numbers","edfb13a9":"<a id = \"tips19\"><\/a>\n## No. 19 - To see Survival counts per Age. \ub098\uc774\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","36211e1a":"<a id = \"tips43\"><\/a>\n## No. 43 - To view Fare using histogram \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec Fare \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","39527762":"<a id = \"tips27\"><\/a>\n## No. 27 - To see Survival count per gender per Pclass using crosstab. \ud06c\ub85c\uc2a4 \ud0ed\uc744 \ud65c\uc6a9\ud558\uc5ec Pclass \ubcc4 \ub0a8\ub140\ubcc4 \uc0dd\uc874\uc790 \uc22b\uc790 \ubcf4\uae30 \n[Go to the Table of Contents](#table_of_contents)","a80beaa5":"# This is an easy Data Visualization  samples for absolute beginners who want to work on the Kaggle Titanic Challenge.\n\n# \uc774 \uac83\uc740 Kaggle Titanic Challenge\ub97c \ucc98\uc74c \ud558\uc2dc\ub294 \ubd84\ub4e4\uc744 \uc704\ud55c \uc26c\uc6b4 \ub370\uc774\ud130\uc2dc\uac01\ud654 \uc0d8\ud50c\uc785\ub2c8\ub2e4.\n\n# Upvote if you found it useful. \n# \uc720\uc6a9\ud558\uc2dc\uba74 Upvote \ub20c\ub7ec \uc8fc\uc138\uc694\n\n\n## \uc2dc\uac01\ud654 \uc5f0\uc2b5\uc6a9\uc785\ub2c8\ub2e4. \ub0b4\uc6a9\uc740 \uacfc\uc801\ud569\uc758 \ud45c\ubcf8\uc785\ub2c8\ub2e4. \u3160\u3160 \n## This is only for visualization. Actual contents show what overfitting is :(\n\n\n### optional plotting w\/pandas: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/visualization.html\n\n### matplotlib.pyplot: https:\/\/matplotlib.org\/api\/pyplot_api.html","220faf6c":"<a id = \"tips78\"><\/a>\n## No. 78 -    Viewing importance table for LR \/ LR \uc911\uc694\ub3c4 \ud45c \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)","a0cfb8d9":"<a id = \"tips88\"><\/a>\n## No. 88 -    Viewing the XGB Step 3 parameter tunning result \/ XGB Step 3 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uacb0\uacfc \ubcf4\uae30\n[Go to the Table of Contents](#table_of_contents)"}}