{"cell_type":{"b7db26a0":"code","fbc31366":"code","287d320c":"code","085ca707":"code","a9b1a6ca":"code","dfe6f0c8":"code","e98303e8":"code","23c4d498":"code","e5dc4c63":"code","285f3431":"code","5a7e9397":"code","78029d36":"code","41d0fa04":"code","79c8c78d":"code","9d24dfee":"code","d67d10c2":"code","4184438c":"code","c4d59ef0":"code","351dc828":"code","cf4e076a":"code","5d62eb58":"code","f51d08a1":"code","71773207":"code","cfdfb3a2":"code","9e242ff7":"markdown","528a1cf1":"markdown","1d2b5f12":"markdown","9f1313b0":"markdown","29d40871":"markdown","a2ac5eb5":"markdown"},"source":{"b7db26a0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","fbc31366":"train= pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest= pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ntrain['train_test'] = 1\ntest['train_test'] = 0\ntest['Survived'] = np.NaN\ndf = pd.concat([train,test])","287d320c":"df.head(15)","085ca707":"df.info()","a9b1a6ca":"test.info()","dfe6f0c8":"train.describe()","e98303e8":"for i in ['Age', 'SibSp','Parch','Fare']:\n    plt.hist(train[i])\n    plt.hist(test[i])\n    plt.title(i)\n    plt.show()","23c4d498":"corr=train[['Age','Pclass', 'SibSp', 'Parch','Fare']].corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize=(8,8))\nsns.heatmap(corr, mask=mask, annot=True, fmt='.1f')\nplt.show()","e5dc4c63":"pd.pivot_table(train, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","285f3431":"for i in ['Survived','Pclass','Sex','Embarked','Cabin','Ticket']:\n    sns.barplot(x=train[i].value_counts().index,y=train[i].value_counts()).set_title(i);\n    plt.show();","5a7e9397":"df['haveAge']=df.Age.apply(lambda x: 1 if pd.isna(x) else 0)","78029d36":"df.Age=df.Age.fillna(df.Age.mean())\ndf.Fare=df.Fare.fillna(df.Fare.median())\ndf.Pclass=np.log(df.Pclass+1)\ndf.SibSp=np.log(df.SibSp+1)\ndf.dropna(axis=0, subset=['Embarked'],inplace = True)","41d0fa04":"df.head()","79c8c78d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_scaled=df.copy()\ndf_scaled[['Pclass', 'Age','SibSp','Parch','Fare']]=scaler.fit_transform(df_scaled[['Pclass', 'Age','SibSp','Parch','Fare']])","9d24dfee":"df_scaled.head()","d67d10c2":"melt=pd.melt(df_scaled[(df_scaled['Survived'] == 1)| (df_scaled['Survived'] == 0)][['Survived', 'Age','Pclass', 'SibSp', 'Parch','Fare']],id_vars=\"Survived\", var_name=\"features\", value_name='value')","4184438c":"plt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"Survived\", data=melt, palette=\"muted\", split=True, inner=\"quart\")\nplt.show()","c4d59ef0":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", data=melt)\nplt.show()","351dc828":"df_scaled.head()","cf4e076a":"df_dummies=pd.get_dummies(df_scaled[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','train_test']])\nx_train= df_dummies[df_dummies['train_test']==1]\nx_test= df_dummies[df_dummies['train_test']==0]\ny_train=df[df['train_test']==1]['Survived']","5d62eb58":"print(x_train.shape)\nprint(y_train.shape)","f51d08a1":"from sklearn import svm\nclf = svm.SVC(kernel='rbf')\nclf.fit(x_train, y_train)\nyhat = clf.predict(x_test)\nyhat=yhat.astype(int)","71773207":"final_data = {'PassengerId': df_scaled[df_scaled['train_test']==0].PassengerId, 'Survived': yhat}\nsubmission = pd.DataFrame(data=final_data)","cfdfb3a2":"submission.to_csv('submission.csv', index =False)","9e242ff7":"### Valores categ\u00f3ricos","528a1cf1":"Vamos normalizar...","1d2b5f12":"### Valores num\u00e9ricos","9f1313b0":"Somente Age est\u00e1 normalizado, SibSp, Parch e Fare ter\u00e3o que ser modificados com alguma t\u00e9cnica de normaliza\u00e7\u00e3o.","29d40871":"Talvez podemos usar Feature Engineering em Cabin e Ticket.","a2ac5eb5":"* Age est\u00e1 com bastante null-values que podem ser substitu\u00eddos pela m\u00e9dia ou mediana dependendo da distribui\u00e7\u00e3o das idades ou talvez 'adivinhada' por um algoritimo de machine learning.\n* Cabin falta bastante valores. Um valor \u00fanico pode ser atribu\u00eddo aos que faltam.\n* Embarked est\u00e1 com dois valores faltando, caso esta vari\u00e1vel for utilizada essas duas linhas poder\u00e3o ser removidas."}}