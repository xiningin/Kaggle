{"cell_type":{"8a89d890":"code","72bc5c66":"code","e292d6cd":"code","bd8a5c46":"code","26275d7a":"code","2378e1a7":"code","d53883b7":"code","7965eb80":"code","b782829f":"code","27b3b8f9":"code","292fdf0e":"code","c2b3eb84":"code","e76a1ae8":"code","82ae3792":"code","f592654a":"code","78214fd6":"code","c77d1a05":"code","0a64c4ca":"markdown","e2fdb060":"markdown","96376c46":"markdown","e2909a87":"markdown","a6fbd141":"markdown","89d48a86":"markdown","84988fd5":"markdown","c1a1213c":"markdown","1b12eefe":"markdown","d28ee3ea":"markdown","6d06518e":"markdown","915a63cb":"markdown","c952a69e":"markdown"},"source":{"8a89d890":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n","72bc5c66":"import librosa as lr\nimport librosa.display as lrd\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns","e292d6cd":"tpdf = pd.read_csv('\/kaggle\/input\/rfcx-species-audio-detection\/train_tp.csv')\nfpdf = pd.read_csv('\/kaggle\/input\/rfcx-species-audio-detection\/train_fp.csv')\n","bd8a5c46":"tpdf['duration'] = tpdf.t_max-tpdf.t_min\ntpdf['bandwidth'] = tpdf.f_max-tpdf.f_min\n\ntpdf.pivot_table(index='species_id',columns='songtype_id',\n                 values='duration',aggfunc='count').fillna(0)","26275d7a":"fig,ax = plt.subplots(1,figsize=(10,4))\nsns.boxplot(data=tpdf,y='duration',x='species_id',hue='songtype_id')","2378e1a7":"fig,ax = plt.subplots(1,figsize=(10,4))\nsns.boxplot(data=tpdf,y='f_min',x='species_id',hue='songtype_id')","d53883b7":"fig,ax = plt.subplots(1,figsize=(10,4))\nsns.boxplot(data=tpdf,y='f_max',x='species_id',hue='songtype_id')","7965eb80":"fig,ax = plt.subplots(1,figsize=(10,4))\nsns.boxplot(data=tpdf,y='bandwidth',x='species_id',hue='songtype_id')","b782829f":"row=tpdf.sample()\n\nbase_dir = '\/kaggle\/input\/rfcx-species-audio-detection\/train\/'\nw,sr = lr.load(os.path.join(base_dir,row.iloc[0]['recording_id']+'.flac'))","27b3b8f9":"fmax_mel=11000\nhop_length=256\nn_wind=1024\nms = lr.feature.melspectrogram(w,sr,n_fft=n_wind,hop_length=hop_length,fmax=fmax_mel)","292fdf0e":"fig,ax= plt.subplots(1)\n\n# convert to dB because the range is too wide\ndbs = 20*np.log10(ms)\n\n\n# This shows the MEL spectrogram\nimg = lrd.specshow(dbs,sr=sr,fmax=fmax_mel,\n                   y_axis=\"mel\",x_axis=\"time\",\n                   hop_length=hop_length,\n                   cmap='gray')\n\n# Plot the True positive events on this file\nrecrows = tpdf[tpdf.recording_id==row.iloc[0].recording_id]\nprint(f'Number of TRUE positives: {len(recrows)}')\nfor ir,rrow in recrows.iterrows():\n    rect = patches.Rectangle((rrow.t_min,rrow.f_min),\n                             rrow.t_max-rrow.t_min,rrow.f_max-rrow.f_min,\n                             linewidth=1,edgecolor='g',facecolor='g',alpha=.2)\n    #plt.axvspan(rrow.t_min,rrow.t_max,color='g',alpha=.2)\n    ax.add_patch(rect)\n    \n# Plot the False Positives on this file\nrecrows = fpdf[fpdf.recording_id==row.iloc[0].recording_id]\nprint(f'Number of FALSE positives: {len(recrows)}')\nfor ir,rrow in recrows.iterrows():\n    rect = patches.Rectangle((rrow.t_min,rrow.f_min),\n                             rrow.t_max-rrow.t_min,rrow.f_max-rrow.f_min,\n                             linewidth=1,edgecolor='r',facecolor='r',alpha=.2)\n    #plt.axvspan(rrow.t_min,rrow.t_max,color='g',alpha=.2)\n    ax.add_patch(rect)\n","c2b3eb84":"avs = np.median(dbs,axis=1)\ndvs = np.diff(np.percentile(dbs,[25,75],axis=1),axis=0)[0]\n\nzs = (dbs-np.tile(avs[:,np.newaxis],(1,dbs.shape[1])))\/np.tile(dvs[:,np.newaxis],(1,dbs.shape[1]))\nimg = lrd.specshow(zs,sr=sr,fmax=fmax_mel,\n                   y_axis=\"mel\",x_axis=\"time\",\n                   hop_length=hop_length,\n                   cmap='gray')\n","e76a1ae8":"zzs = zs.copy()\nzzs[zzs<1] = 0\n\nfig,ax= plt.subplots(1,figsize=(12,4))\n\n\nimg = lrd.specshow(zzs,sr=sr,fmax=fmax_mel,\n                   y_axis=\"mel\",x_axis=\"time\",\n                   hop_length=hop_length,\n                   cmap='gray')\n\n# Plot the True positive events on this file\ntrecrows = tpdf[tpdf.recording_id==row.iloc[0].recording_id]\nprint(f'Number of TRUE positives: {len(trecrows)}')\nfor ir,rrow in trecrows.iterrows():\n    rect = patches.Rectangle((rrow.t_min,rrow.f_min),\n                             rrow.t_max-rrow.t_min,rrow.f_max-rrow.f_min,\n                             linewidth=1,edgecolor='g',facecolor='g',alpha=.5)\n    #plt.axvspan(rrow.t_min,rrow.t_max,color='g',alpha=.2)\n    ax.add_patch(rect)\n    \n# Plot the False Positives on this file\nfrecrows = fpdf[fpdf.recording_id==row.iloc[0].recording_id]\nprint(f'Number of FALSE positives: {len(frecrows)}')\nfor ir,rrow in frecrows.iterrows():\n    rect = patches.Rectangle((rrow.t_min,rrow.f_min),\n                             rrow.t_max-rrow.t_min,rrow.f_max-rrow.f_min,\n                             linewidth=1,edgecolor='r',facecolor='r',alpha=.2)\n    #plt.axvspan(rrow.t_min,rrow.t_max,color='g',alpha=.5)\n    ax.add_patch(rect)\n","82ae3792":"t=np.linspace(0,len(w-n_wind)\/sr,dbs.shape[1])\n\nfor ir,rrow in trecrows.iterrows():\n    idx = (t>rrow.t_min) & (t<rrow.t_max)\n    fig,ax = plt.subplots(1)\n    img = lrd.specshow(zzs[:,idx],sr=sr,fmax=fmax_mel,\n                   y_axis=\"mel\",x_axis=\"time\",\n                   hop_length=hop_length,\n                   cmap='gray')\n    ax.axhspan(rrow.f_min,rrow.f_max,color='g',alpha=.4)\nfor ir,rrow in frecrows.iterrows():\n    idx = (t>rrow.t_min) & (t<rrow.t_max)\n    fig,ax = plt.subplots(1)\n    img = lrd.specshow(zzs[:,idx],sr=sr,fmax=fmax_mel,\n                   y_axis=\"mel\",x_axis=\"time\",\n                   hop_length=hop_length,\n                   cmap='gray')\n    ax.axhspan(rrow.f_min,rrow.f_max,color='r',alpha=.4)\n","f592654a":"srows = tpdf[(tpdf.species_id==row.iloc[0].species_id) & (tpdf.songtype_id==row.iloc[0].songtype_id)]\nsrows.sample(10)","78214fd6":"def get_ev_zspec(row):\n    w,sr = lr.load(os.path.join(base_dir,row['recording_id']+'.flac'))\n    ms = lr.feature.melspectrogram(w,sr,n_fft=n_wind,hop_length=hop_length,fmax=fmax_mel)    \n    dbs = 20*np.log10(ms)\n    avs = np.median(dbs,axis=1)\n    dvs = np.diff(np.percentile(dbs,[25,75],axis=1),axis=0)[0]\n\n    zs = (dbs-np.tile(avs[:,np.newaxis],(1,dbs.shape[1])))\n    zd = np.tile(dvs[:,np.newaxis],(1,dbs.shape[1]))\n    t=np.linspace(0,len(w-n_wind)\/sr,dbs.shape[1])\n\n    idx = (t>row.t_min) & (t<row.t_max)\n    zs[zs<zd]=0\n    return zs[:,idx]\n","c77d1a05":"nsam = 6\nncols = 3\nnrows = int(np.ceil(nsam\/ncols))\n\nfig,ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\naxf = ax.flatten()\n\nfor ii, (ir, srw) in enumerate(srows.sample(nsam).iterrows()):\n    zss = get_ev_zspec(srw)\n    img = lrd.specshow(zss,sr=sr,fmax=fmax_mel,\n               y_axis=\"mel\",x_axis=\"time\",\n               hop_length=hop_length,\n               cmap='gray',ax=axf[ii])\n    axf[ii].axhspan(srw.f_min,srw.f_max,color='g',alpha=.4)\n\n    ","0a64c4ca":"Let's read both tables to identify true and false positives on the spectrum","e2fdb060":"### Call duration\n","96376c46":"## Number of samples per call type and species","e2909a87":"### Lower frequency of call band","a6fbd141":"We'll use librosa to read audio and perform some analysis","89d48a86":"Notice how some of the true events are hard to distinguish from the background noise","84988fd5":"## Metadata per species\n\nNotice how the duration and frequency bands are highly characteristic of each species. \n\nThe trouble will be to establish the event boundaries in new sound files","c1a1213c":"## Sample audio\n\nNow let's select a sample audio file and mark the events \n\nWe'll use the MEL spectrum to visualize the audio data. It's a sort of spectrogram where the frequency bands are logarithmic","1b12eefe":"### Bandwidth","d28ee3ea":"## Compare a few samples of the same species","6d06518e":"### Uper frequency of call band","915a63cb":"## Extract a normalised spectrum","c952a69e":"# Exploring a database of wildlife recordings\n\nThis database contains a series of 1 minute recordings containing at least one call of known a wildlife species. These are identified in the file `train_tp.csv` with start and end times and frequency bands. \n\nEach recording may also contain calls of other species. Some of them are marked in the file `train_fp.csv` as being wrongly identified by some automated algorithm.\n\nHere we explore the times and frequency bands of each species and pinpoint them in a representation of the recording. "}}