{"cell_type":{"5346d344":"code","475275f4":"code","6e2c4232":"code","f6911c3b":"code","63373510":"code","700d5c39":"code","b64d7f5e":"code","de5d7816":"code","685e73a0":"code","ccdaab63":"code","d80014e3":"code","96bfe793":"code","31ff4839":"code","9e58b59a":"code","28da344f":"code","bcf824d1":"code","70cb3918":"code","8532f453":"code","d8784910":"code","5af5a66c":"code","447de60b":"markdown","19acffcf":"markdown","56947b3f":"markdown","59ffcd63":"markdown","70732cb1":"markdown","e8e03f00":"markdown","341d42b3":"markdown","1e48029a":"markdown","23e54d18":"markdown","2b82ddd1":"markdown","89ff6b2e":"markdown","bbe2b397":"markdown","4cf77412":"markdown","e1b59a55":"markdown","808c704a":"markdown","ab788b16":"markdown","014578bd":"markdown","fda04478":"markdown","f4049d0e":"markdown","a0d2aa26":"markdown","fbd014f2":"markdown","5fbeb357":"markdown","110131f9":"markdown","50c9cd8e":"markdown"},"source":{"5346d344":"!pip install chart_studio","475275f4":"import pandas as pd\nimport numpy as np\nimport chart_studio.plotly as py\nimport cufflinks as cf\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\n# Make Plotly work in your Jupyter Notebook\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n# Use Plotly locally\ncf.go_offline()","6e2c4232":"# Create a dataframe using a NumPy array that is 50 by 4\narr_1 = np.random.randn(50, 4)\ndf_1 = pd.DataFrame(arr_1, columns=['A','B','C','D'])\ndf_1.head()\n\n# Compare old plots to a Plotly interactive plot\n# You can save as PNG, Zoom, Pan, Turn off & on Data and more\ndf_1.plot()\ndf_1.iplot()","f6911c3b":"# Allows us to create graph objects for making more customized plots\nimport plotly.graph_objects as go\n\n# Use included Google price data to make one plot\ndf_stocks = px.data.stocks()\npx.line(df_stocks, x='date', y='GOOG', labels={'x':'Date', 'y':'Price'})\n\n# Make multiple line plots\npx.line(df_stocks, x='date', y=['GOOG','AAPL'], labels={'x':'Date', 'y':'Price'},\n       title='Apple Vs. Google')\n\n# Create a figure to which I'll add plots\nfig = go.Figure()\n# You can pull individual columns of data from the dataset and use markers or not\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AAPL, \n                        mode='lines', name='Apple'))\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AMZN, \n                        mode='lines+markers', name='Amazon'))\n# You can create custom lines (Dashes : dash, dot, dashdot)\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.GOOG, \n                        mode='lines+markers', name='Google',\n                        line=dict(color='firebrick', width=2, dash='dashdot')))\n# Further style the figure\n# fig.update_layout(title='Stock Price Data 2018 - 2020',\n#                    xaxis_title='Price', yaxis_title='Date')\n\n# Go crazy styling the figure\nfig.update_layout(\n    # Shows gray line without grid, styling fonts, linewidths and more\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    # Turn off everything on y axis\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)","63373510":"# Get population change in US by querying for US data\ndf_us = px.data.gapminder().query(\"country == 'United States'\")\npx.bar(df_us, x='year', y='pop')\n\n# Create a stacked bar with more customization\ndf_tips = px.data.tips()\npx.bar(df_tips, x='day', y='tip', color='sex', title='Tips by Sex on Each Day',\n      labels={'tip': 'Tip Amount', 'day': 'Day of the Week'})\n\n# Place bars next to each other\npx.bar(df_tips, x=\"sex\", y=\"total_bill\",\n             color='smoker', barmode='group')\n\n# Display pop data for countries in Europe in 2007 greater than 2000000\ndf_europe = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df_europe, y='pop', x='country', text='pop', color='country')\n# Put bar total value above bars with 2 values of precision\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n# Set fontsize and uniformtext_mode='hide' says to hide the text if it won't fit\nfig.update_layout(uniformtext_minsize=8)\n# Rotate labels 45 degrees\nfig.update_layout(xaxis_tickangle=-45)\n","700d5c39":"# Use included Iris data set\ndf_iris = px.data.iris()\n# Create a scatter plot by defining x, y, different color for count of provided\n# column, size based on supplied column and additional data to display on hover\npx.scatter(df_iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 size='petal_length', hover_data=['petal_width'])\n\n# Create a customized scatter with black marker edges with line width 2, opaque\n# and colored based on width. Also show a scale on the right\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=df_iris.sepal_width, y=df_iris.sepal_length,\n    mode='markers',\n    marker_color=df_iris.sepal_width,\n    text=df_iris.species,\n    marker=dict(showscale=True)\n))\nfig.update_traces(marker_line_width=2, marker_size=10)\n\n# Working with a lot of data use Scattergl\nfig = go.Figure(data=go.Scattergl(\n    x = np.random.randn(100000),\n    y = np.random.randn(100000),\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(100000),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\nfig","b64d7f5e":"# Create Pie chart of the largest nations in Asia\n# Color maps here plotly.com\/python\/builtin-colorscales\/\ndf_samer = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Asia'\")\npx.pie(df_samer, values='pop', names='country', \n       title='Population of Asian continent', \n       color_discrete_sequence=px.colors.sequential.RdBu)\n\n# Customize pie chart\ncolors = ['blue', 'green', 'black', 'purple', 'red', 'brown']\nfig = go.Figure(data=[go.Pie(labels=['Water','Grass','Normal','Psychic', 'Fire', 'Ground'], \n                       values=[110,90,80,80,70,60])])\n# Define hover info, text size, pull amount for each pie slice, and stroke\nfig.update_traces(hoverinfo='label+percent', textfont_size=20,\n                  textinfo='label+percent', pull=[0.1, 0, 0.2, 0, 0, 0],\n                  marker=dict(colors=colors, line=dict(color='#FFFFFF', width=2)))","de5d7816":"# Plot histogram based on rolling 2 dice\ndice_1 = np.random.randint(1,7,5000)\ndice_2 = np.random.randint(1,7,5000)\ndice_sum = dice_1 + dice_2\n# bins represent the number of bars to make\n# Can define x label, color, title\n# marginal creates another plot (violin, box, rug)\nfig = px.histogram(dice_sum, nbins=11, labels={'value':'Dice Roll'},\n             title='5000 Dice Roll Histogram', marginal='violin',\n            color_discrete_sequence=['green'])\n\nfig.update_layout(\n    xaxis_title_text='Dice Roll',\n    yaxis_title_text='Dice Sum',\n    bargap=0.2, showlegend=False\n)\n\n# Stack histograms based on different column data\ndf_tips = px.data.tips()\npx.histogram(df_tips, x=\"total_bill\", color=\"sex\")","685e73a0":"# A box plot allows you to compare different variables\n# The box shows the quartiles of the data. The bar in the middle is the median \n# The whiskers extend to all the other data aside from the points that are considered\n# to be outliers\ndf_tips = px.data.tips()\n# We can see which sex tips the most, points displays all the data points\npx.box(df_tips, x='sex', y='tip', points='all')\n\n# Display tip sex data by day\npx.box(df_tips, x='day', y='tip', color='sex')\n\n# Adding standard deviation and mean\nfig = go.Figure()\nfig.add_trace(go.Box(x=df_tips.sex, y=df_tips.tip, marker_color='blue',\n                    boxmean='sd'))\n\n# Complex Styling\ndf_stocks = px.data.stocks()\nfig = go.Figure()\n# Show all points, spread them so they don't overlap and change whisker width\nfig.add_trace(go.Box(y=df_stocks.GOOG, boxpoints='all', name='Google',\n                    fillcolor='blue', jitter=0.5, whiskerwidth=0.2))\nfig.add_trace(go.Box(y=df_stocks.AAPL, boxpoints='all', name='Apple',\n                    fillcolor='red', jitter=0.5, whiskerwidth=0.2))\n# Change background \/ grid colors\nfig.update_layout(title='Google vs. Apple', \n                  yaxis=dict(gridcolor='rgb(255, 255, 255)',\n                 gridwidth=3),\n                 paper_bgcolor='rgb(243, 243, 243)',\n                 plot_bgcolor='rgb(243, 243, 243)')","ccdaab63":"# Violin Plot is a combination of the boxplot and KDE\n# While a box plot corresponds to data points, the violin plot uses the KDE estimation\n# of the data points\ndf_tips = px.data.tips()\npx.violin(df_tips, y=\"total_bill\", box=True, points='all')\n\n# Multiple plots\npx.violin(df_tips, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\",\n          hover_data=df_tips.columns)\n\n# Morph left and right sides based on if the customer smokes\nfig = go.Figure()\nfig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'Yes' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'Yes' ],\n                        legendgroup='Yes', scalegroup='Yes', name='Yes',\n                        side='negative',\n                        line_color='blue'))\nfig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'No' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'No' ],\n                        legendgroup='Yes', scalegroup='Yes', name='No',\n                        side='positive',\n                        line_color='red'))","d80014e3":"# Create a heatmap using Seaborn data\nflights = sns.load_dataset(\"flights\")\nflights\n\n# You can set bins with nbinsx and nbinsy\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         color_continuous_scale=\"Viridis\")\nfig\n\n# You can add histograms\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         marginal_x=\"histogram\", marginal_y=\"histogram\")\nfig","96bfe793":"# Create a 3D scatter plot using flight data\nfig = px.scatter_3d(flights, x='year', y='month', z='passengers', color='year',\n                   opacity=0.7, width=800, height=400)\nfig","31ff4839":"fig = px.line_3d(flights, x='year', y='month', z='passengers', color='year')\nfig","9e58b59a":"# With a scatter matrix we can compare changes when comparing column data\nfig = px.scatter_matrix(flights, color='month')\nfig","28da344f":"# There are many interesting ways of working with maps\n# plotly.com\/python-api-reference\/generated\/plotly.express.scatter_geo.html\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     color=\"continent\", # which column to use to set the color of markers\n                     hover_name=\"country\", # column added to hover information\n                     size=\"pop\", # size of markers\n                     projection=\"orthographic\")\nfig","bcf824d1":"# You can color complex maps like we do here representing unemployment data\n\n# Allows us to grab data from a supplied URL\nfrom urllib.request import urlopen\n# Used to decode JSON data\nimport json\n# Grab US county geometry data\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\n# Grab unemployment data based on each counties Federal Information Processing number\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\n# Draw map using the county JSON data, color using unemployment values on a range of 12\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           scope=\"usa\",\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig","70cb3918":"# Polar charts display data radially \n# Let's plot wind data based on direction and frequency\n# You can change size and auto-generate different symbols as well\ndf_wind = px.data.wind()\npx.scatter_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                size=\"frequency\", symbol=\"strength\")\n\n# Data can also be plotted using lines radially\n# A template makes the data easier to see\npx.line_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                line_close=True, template=\"plotly_dark\", width=800, height=400)","8532f453":"# Used to represent ratios of 3 variables\ndf_exp = px.data.experiment()\npx.scatter_ternary(df_exp, a=\"experiment_1\", b=\"experiment_2\", \n                   c='experiment_3', hover_name=\"group\", color=\"gender\")","d8784910":"# You can create numerous subplots\ndf_tips = px.data.tips()\npx.scatter(df_tips, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")\n\n# We can line up data in rows and columns\npx.histogram(df_tips, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_row=\"time\", facet_col=\"day\",\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})\n\n# This dataframe provides scores for different students based on the level\n# of attention they could provide during testing\natt_df = sns.load_dataset(\"attention\")\nfig = px.line(att_df, x='solutions', y='score', facet_col='subject',\n             facet_col_wrap=5, title='Scores Based on Attention')\nfig","5af5a66c":"# Create an animated plot that you can use to cycle through continent\n# GDP & life expectancy changes\ndf_cnt = px.data.gapminder()\npx.scatter(df_cnt, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", \n           animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])\n\n# Watch as bars chart population changes\npx.bar(df_cnt, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000])","447de60b":"### Import","19acffcf":"### Animated Plots","56947b3f":"### 3D Scatter Plots","59ffcd63":"### Scatter Matrix","70732cb1":"### Density Heatmap","e8e03f00":"### Pie Charts","341d42b3":"### 3D Line Plots","1e48029a":"Thanks to Derek Banas for wonderful notebook and awesome tutorial. \n\n## Plotly Tutorial","23e54d18":"### Box Plots","2b82ddd1":"### Polar Chart","89ff6b2e":"### Basics","bbe2b397":"### What is Plotly?","4cf77412":"### Bar Charts","e1b59a55":"### Choropleth Maps","808c704a":"### Map Scatter Plots","ab788b16":"### Violin Plot","014578bd":"You can install using Anaconda under the environment tab by searching for Plotly. You'll also need Cufflinks and a few other packages that you can install by running : conda install -c conda-forge cufflinks-py in your command line or terminal. Also you can use the commands pip install plotly and pip install cufflinks. Cufflinks connects Plotly to Pandas.","fda04478":"### Line Plots","f4049d0e":"### Ternary Plot","a0d2aa26":"### Scatter Plot","fbd014f2":"### Installation","5fbeb357":"Plotly allows you to create over 40 beautiful interactive web-based visualizations that can be displayed in Jupyter notebooks or saved to HTML files. It is widely used to plot scientific, statistical and financial data. Plotly is free to use unless you want them to host your data for you.","110131f9":"### Histograms","50c9cd8e":"### Facets"}}