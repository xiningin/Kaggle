{"cell_type":{"b5c66feb":"code","322eb364":"code","5dc0bf17":"code","50dc2288":"code","bd1c27d1":"code","10d61748":"code","9331f067":"code","1c132aef":"code","36e3ff37":"code","74b254be":"code","5442d69c":"code","f1e55297":"code","92e1c2ca":"code","5de2bb7b":"code","bafb0eb9":"code","f61a9fe9":"code","8f232ff7":"code","3b3c061e":"code","ed2cf31b":"code","47567234":"code","2d525310":"code","1d3fabfc":"code","7ca57117":"code","3d17ecfd":"code","60948154":"code","be6e15b5":"code","07ebbb67":"code","f2fdc04a":"code","c0842238":"code","25664798":"code","1580be12":"code","03282875":"code","0f229c98":"code","742b9997":"code","005113e8":"code","b2bfb347":"code","2975e65d":"code","ad544759":"code","78445504":"code","f25ee96e":"code","63a2824c":"code","e26003c3":"code","ded7d2b0":"code","af27057e":"code","968ad602":"code","19650f97":"code","5a9b7c4d":"code","44711b4b":"code","bd5e4574":"code","e73ffb62":"code","ccbb7b90":"code","e1c04a66":"code","fa2b0a6e":"code","cdfa9159":"code","c8a557e6":"code","b9f688e6":"code","3d838714":"code","63809798":"code","6b7b2a11":"code","5c47c7ab":"code","5988f116":"code","31b328a8":"code","be9eb733":"code","7c1a400d":"code","9db2a58b":"code","78a698ff":"code","9d4e127c":"code","4d09eb3e":"code","dc4d7d69":"code","1938af69":"code","eec012b5":"code","c1c9d16c":"code","88001ffe":"code","0eccbc85":"code","b267c08e":"code","6cb7285d":"code","9863433e":"code","daade7c3":"code","652d6a2b":"code","44400dac":"code","f93616b7":"code","5969f4ef":"code","4fd4465b":"code","eefb36a1":"code","26fc8837":"code","6380e1f9":"code","95f839cd":"code","fd878cfb":"markdown","66ea9609":"markdown","e5cbccf7":"markdown","e4a4459b":"markdown","222e3289":"markdown","3fd041d7":"markdown","e6eafe43":"markdown","23afad3c":"markdown","fc6e1013":"markdown","4cc5cbba":"markdown","7bfedd25":"markdown"},"source":{"b5c66feb":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport re\nimport tqdm\n%matplotlib inline\n\nprint('Files:')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","322eb364":"df_train = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv')\ndf_train.head()","5dc0bf17":"outdoor = ['Outdoor', 'Outdoors', 'Cloudy', 'Heinz Field', 'Outdor', 'Ourdoor', \n           'Outside', 'Outddors','Outdoor Retr Roof-Open', 'Oudoor', 'Bowl']\n\nindoor_closed = ['Indoors', 'Indoor', 'Indoor, Roof Closed', 'Indoor, Roof Closed', 'Retractable Roof',\n                 'Retr. Roof-Closed', 'Retr. Roof - Closed', 'Retr. Roof Closed']\n\nindoor_open   = ['Indoor, Open Roof', 'Open', 'Retr. Roof-Open', 'Retr. Roof - Open']\ndome_closed   = ['Dome', 'Domed, closed', 'Closed Dome', 'Domed', 'Dome, closed']\ndome_open     = ['Domed, Open', 'Domed, open']\n","50dc2288":"df_train['StadiumType'] = df_train['StadiumType'].replace(outdoor,'outdoor')\ndf_train['StadiumType'] = df_train['StadiumType'].replace(indoor_closed,'indoor_closed')\ndf_train['StadiumType'] = df_train['StadiumType'].replace(indoor_open,'indoor_open')\ndf_train['StadiumType'] = df_train['StadiumType'].replace(dome_closed,'dome_closed')\ndf_train['StadiumType'] = df_train['StadiumType'].replace(dome_open,'dome_open')","bd1c27d1":"rain = ['Rainy', 'Rain Chance 40%', 'Showers','Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.',\n        'Scattered Showers', 'Cloudy, Rain', 'Rain shower', 'Light Rain', 'Rain']\n\novercast = ['Cloudy, light snow accumulating 1-3\"', 'Party Cloudy', 'Cloudy, chance of rain',\n            'Coudy', 'Cloudy, 50% change of rain', 'Rain likely, temps in low 40s.',\n            'Cloudy and cold', 'Cloudy, fog started developing in 2nd quarter',\n            'Partly Clouidy', '30% Chance of Rain', 'Mostly Coudy', 'Cloudy and Cool',\n            'cloudy', 'Partly cloudy', 'Overcast', 'Hazy', 'Mostly cloudy', 'Mostly Cloudy',\n            'Partly Cloudy', 'Cloudy']\n\nclear = ['Partly clear', 'Sunny and clear', 'Sun & clouds', 'Clear and Sunny',\n        'Sunny and cold', 'Sunny Skies', 'Clear and Cool', 'Clear and sunny',\n        'Sunny, highs to upper 80s', 'Mostly Sunny Skies', 'Cold',\n        'Clear and warm', 'Sunny and warm', 'Clear and cold', 'Mostly sunny',\n        'T: 51; H: 55; W: NW 10 mph', 'Clear Skies', 'Clear skies', 'Partly sunny',\n        'Fair', 'Partly Sunny', 'Mostly Sunny', 'Clear', 'Sunny', 'Sunny, Windy']\n\nsnow  = ['Heavy lake effect snow', 'Snow']\n\nnone  = ['N\/A Indoor', 'Indoors', 'Indoor', 'N\/A (Indoors)', 'Controlled Climate']","10d61748":"df_train['GameWeather'] = df_train['GameWeather'].replace(rain,'rain')\ndf_train['GameWeather'] = df_train['GameWeather'].replace(overcast,'overcast')\ndf_train['GameWeather'] = df_train['GameWeather'].replace(clear,'clear')\ndf_train['GameWeather'] = df_train['GameWeather'].replace(snow,'snow')\ndf_train['GameWeather'] = df_train['GameWeather'].replace(none,'none')","9331f067":"nan = ['nan','E','SE','Calm','SSW']\ndef clean_wind_speed(windspeed):\n    ws = str(windspeed)\n\n    if 'mph' in ws.lower():\n        return int(ws.lower().split('mph')[0])\n    else :\n        return ws\ndf_train['WindSpeed'] = df_train['WindSpeed'].apply(clean_wind_speed)\ndf_train['WindSpeed'] = df_train['WindSpeed'].replace(nan,np.nan)","1c132aef":"north = ['N','From S','North']\n\nsouth = ['S','From N','South','s']\n\nwest = ['W','From E','West']\n\neast = ['E','From W','from W','EAST','East']\n\n\n\nnorth_east = ['FROM SW','FROM SSW','FROM WSW','NE','NORTH EAST','North East','East North East','NorthEast','Northeast','ENE','From WSW','From SW']\nnorth_west = ['E','From ESE','NW','NORTHWEST','N-NE','NNE','North\/Northwest','W-NW','WNW','West Northwest','Northwest','NNW','From SSE']\nsouth_east = ['E','From WNW','SE','SOUTHEAST','South Southeast','East Southeast','Southeast','SSE','From SSW','ESE','From NNW']\nsouth_west = ['E','From ENE','SW','SOUTHWEST','W-SW','South Southwest','West-Southwest','WSW','SouthWest','Southwest','SSW','From NNE']\nno_wind = ['clear','Calm']\nnan = ['1','8','13']","36e3ff37":"df_train['WindDirection'] = df_train['WindDirection'].replace(north,'north')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(south,'south')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(west,'west')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(east,'east')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(north_east,'north_east')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(north_west,'north_west')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(south_east,'clear')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(south_west,'south_west')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(no_wind,'no_wind')\ndf_train['WindDirection'] = df_train['WindDirection'].replace(nan,np.nan)","74b254be":"natural_grass = ['natural grass','Naturall Grass','Natural Grass']\ngrass = ['Grass']\n\nfieldturf = ['FieldTurf','Field turf','FieldTurf360','Field Turf']\n\nartificial = ['Artificial','Artifical']","5442d69c":"df_train['Turf'] = df_train['Turf'].replace(natural_grass,'natural_grass')\ndf_train['Turf'] = df_train['Turf'].replace(grass,'grass')\ndf_train['Turf'] = df_train['Turf'].replace(fieldturf,'fieldturf')\ndf_train['Turf'] = df_train['Turf'].replace(artificial,'artificial')","f1e55297":"df_train.loc[df_train.VisitorTeamAbbr == \"ARI\",'VisitorTeamAbbr'] = \"ARZ\"\ndf_train.loc[df_train.HomeTeamAbbr == \"ARI\",'HomeTeamAbbr'] = \"ARZ\"\n\ndf_train.loc[df_train.VisitorTeamAbbr == \"BAL\",'VisitorTeamAbbr']= \"BLT\"\ndf_train.loc[df_train.HomeTeamAbbr == \"BAL\",'HomeTeamAbbr'] = \"BLT\"\n\ndf_train.loc[df_train.VisitorTeamAbbr == \"CLE\",'VisitorTeamAbbr'] = \"CLV\"\ndf_train.loc[df_train.HomeTeamAbbr == \"CLE\",'HomeTeamAbbr'] = \"CLV\"\n\ndf_train.loc[df_train.VisitorTeamAbbr == \"HOU\",'VisitorTeamAbbr'] = \"HST\"\ndf_train.loc[df_train.HomeTeamAbbr == \"HOU\",'HomeTeamAbbr'] = \"HST\"","92e1c2ca":"df_train['ToLeft'] = 0\ndf_train.loc[df_train.PlayDirection == \"left\",'ToLeft'] = 1\n\ndf_train['IsBallCarrier'] = df_train['NflId'] == df_train['NflIdRusher']\n\ndf_train['TeamOnOffense'] = 'away'\ndf_train.loc[df_train.PossessionTeam == df_train.HomeTeamAbbr,\\\n             'TeamOnOffense'] = 'home'","5de2bb7b":"df_train['IsBallCarrier'] = df_train['NflId'] == df_train['NflIdRusher']\ndf_train['IsOnOffense'] = df_train['Team'] == df_train['TeamOnOffense']","bafb0eb9":"df_train['YardsFromOwnGoal'] = 50 + (50-df_train['YardLine'])\ndf_train.loc[df_train.YardLine == 50,'YardsFromOwnGoal'] = 50\ndf_train.loc[df_train.FieldPosition == df_train.PossessionTeam, \\\n             'YardsFromOwnGoal'] = 50\n\ndf_train['X_std'] = df_train['X']\ndf_train['Y_std'] = df_train['Y']\n\ndf_train.loc[df_train.ToLeft == 1, 'X_std'] = 120 - df_train['X']\ndf_train.loc[df_train.ToLeft == 1, 'Y_std'] = 160\/3-df_train['Y']","f61a9fe9":"df_train['SecondsPassed'] = ((df_train['Quarter'].astype('int')-1)*15 + \\\n                             df_train['GameClock'].str.slice(stop=2) \\\n                                                  .astype('int'))*60 + \\\n                             df_train['GameClock'].str.slice(start=3, stop=5) \\\n                                                  .astype('int')","8f232ff7":"# from https:\/\/teamcolorcodes.com\/category\/nfl-team-color-codes\/\nnfl_color_dict = {\n    'ARZ': ['#97233F','#000000'],\n    'ATL': ['#A71930','#000000'],\n    'BLT': ['#241773','#000000'],\n    'BUF': ['#00338D','#C60C30'],\n    'CAR': ['#0085CA','#101820'],\n    'CHI': ['#0B162A','#C83803'],\n    'CIN': ['#FB4F14','#000000'],\n    'CLV': ['#311D00','#FF3C00'],\n    'DAL': ['#003594','#FFFFFF'],\n    'DEN': ['#FB4F14','#002244'],\n    'DET': ['#0076B6','#B0B7BC'],\n    'GB' : ['#203731','#FFB612'],\n    'HST': ['#03202F','#A71930'],\n    'IND': ['#002C5F','#A2AAAD'],\n    'JAX': ['#101820','#D7A22A'],\n    'KC' : ['#E31837','#FFB81C'],\n    'LAC': ['#002A5E','#FFC20E'],\n    'LA':  ['#002244','#866D4B'],\n    'MIA': ['#008E97','#FC4C02'],\n    'MIN': ['#4F2683','#FFC62F'],\n    'NE' : ['#002244','#C60C30'],\n    'NO' : ['#D3BC8D','#101820'],\n    'NYG': ['#0B2265','#A71930'],\n    'NYJ': ['#125740','#000000'],\n    'OAK': ['#000000','#A5ACAF'],\n    'PHI': ['#004C54','#A5ACAF'],\n    'PIT': ['#FFB612','#101820'],\n    'SF' : ['#AA0000','#B3995D'],\n    'SEA': ['#002244','#69BE28'],\n    'TB' : ['#D50A0A','#FF7900'],\n    'TEN': ['#0C2340','#418FDE'],\n    'WAS': ['#773141','#FFB612']\n}","3b3c061e":"df_train.loc['YardsToTD'] =  df_train['X_std']\ndf_train.loc[ df_train.ToLeft == 0, 'YardsToTD'] = 100 - df_train['X_std']\ndf_train.loc[ (df_train.ToLeft == 0) & (df_train.X_std > 100), 'YardsToTD'] = df_train['Yards']\n\ndf_train['team_abr'] = df_train['VisitorTeamAbbr']\ndf_train.loc[df_train.Team == 'home','team_abr'] = df_train['HomeTeamAbbr']","ed2cf31b":"np.cos(10)","47567234":"def plot_motion(row):\n    x = row.X_std\n    y = row.Y_std\n    degrees = row.Dir\n    toLeft = row.ToLeft\n    speed = row.S\n    \n    if toLeft == 1:\n        degrees = 360-degrees\n    quad = int(np.floor(degrees \/ 90) + 1)\n    degrees = int(degrees)\n\n\n    # SOH CAH TOA\n#     dx = los+runner.Yards.values[0]-run_x\n    rads = degrees * np.pi\/180\n    # cos() = A\/H\n    if quad <= 2:\n        if quad == 1:\n            dx = speed*np.cos((np.pi\/2)-rads)\n            dy = speed*np.sin((np.pi\/2)-rads)\n        elif quad == 2:\n            dx = speed*np.cos(np.pi-rads)\n            dy = -speed*np.sin(np.pi-rads)\n    elif quad == 3:\n        dx = -speed*np.cos((3*np.pi\/2)-rads)\n        dy = -speed*np.sin((3*np.pi\/2)-rads)\n    else:\n        dx = -speed*np.cos((2*np.pi)-rads)\n        dy = speed*np.sin((2*np.pi)-rads)\n        \n    ax2.arrow(x=x,y=y, \n          dx=dx,dy=dy,\n          head_width=0.2, head_length=0.2,zorder=3,ec='#FFFFF0')","2d525310":"# Plot 1 Play\nimport matplotlib.pyplot as plt\n\nplays_ids = df_train['PlayId'].unique()\nplay_sample = plays_ids[np.random.randint(0,len(plays_ids))]\n\nplay_pd = df_train.loc[df_train.PlayId == play_sample]\n\nrunner = play_pd[play_pd.IsBallCarrier == True]\nrunner_loc = runner[['X_std','Y_std']].values[0]\nplayer_c = [nfl_color_dict[i][0] for i in play_pd.team_abr.values]\nplayer_o = [nfl_color_dict[i][1] for i in play_pd.team_abr.values]\n\nlos = round(np.mean(play_pd.loc[(play_pd.Position == 'T')|(play_pd.Position == 'G')| \\\n                                (play_pd.Position == 'C')]['X_std']))\n\nteams = play_pd[['HomeTeamAbbr','VisitorTeamAbbr']].iloc[1].values\ntry:\n    left_team = play_pd.loc[(play_pd.ToLeft == 1), 'Team'].unique()[0]\nexcept:\n    left_team = play_pd['Team'].unique()[0]\nif left_team == 'away':\n    left_abr = teams[1]\n    right_abr = teams[0]\nelse:\n    left_abr = teams[0]\n    right_abr = teams[1]\n    \n\n\nplt.figure(figsize=(22,14))\n\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(25,10), gridspec_kw={'width_ratios': [1, 5]})\nplt.subplots_adjust(wspace=0.01, hspace=0)\nax2.set_facecolor('#6b9c58')\n\n#Players\nax2.scatter(play_pd.X_std.values, play_pd.Y_std.values, \\\n            c=player_c, s=150, edgecolors=player_o, zorder=2)\nax2.scatter(runner_loc[0],runner_loc[1],c='white',marker='*', zorder=2)\nax2.set_xlim([-10,110])\nax2.set_ylim([0,53.3])\n\n# Endzones\nax2.axvspan(-10, 0, alpha=0.9, color=nfl_color_dict[left_abr][0])\nax2.axvspan(100, 110, alpha=0.9, color=nfl_color_dict[right_abr][0])\nax2.axvline(0,c=nfl_color_dict[left_abr][1])\nax2.axvline(100,c=nfl_color_dict[right_abr][1])\nax2.text(-7, 53.3\/2, left_abr, fontsize=15, color=nfl_color_dict[left_abr][1], fontweight='bold')\nax2.text(103, 53.3\/2, right_abr, fontsize=15, color=nfl_color_dict[right_abr][1], fontweight='bold')\n\n# Hash Marks + Midfield\nax2.axhline(53.3\/2+18.5\/2, linestyle='--',c='white',zorder=-2)\nax2.axhline(53.3\/2-18.5\/2, linestyle='--',c='white',zorder=-2)\nax2.axvline(50,c='white',zorder=-2)\nax2.scatter(50,53.3\/2, c='white', s=15000, zorder=-2)\nax2.text(47.5,53.3\/2-1.5, s='Big Data\\n  Bowl\\n  2019', fontsize=10, color='#6b9c58', \n         fontweight='bold', zorder=-1)\nyards = 10\nwhile yards <= 50:\n    ax2.axvline(yards, linestyle='-',c='white',zorder=-1)\n    ax2.axvline(100-yards, linestyle='-',c='white',zorder=-1)\n    \n    ax2.text(yards-2, 50, str(yards), fontsize=10, color='white', fontweight='bold')\n    ax2.text(yards-2, 2, str(yards), fontsize=10, color='white', fontweight='bold')\n    if yards == 50:\n        break\n    ax2.text(100-yards+1, 50, str(yards), fontsize=10, color='white', fontweight='bold')\n    ax2.text(100-yards+1, 2, str(yards), fontsize=10, color='white', fontweight='bold')\n    \n    yards+=10\n\n# Movement\nplay_pd.apply(plot_motion, axis=1)\n    \nax2.arrow(x=runner.X_std.values[0],y=runner.Y_std.values[0], \n          dx=los+runner.Yards.values[0]-runner.X_std.values[0],dy=0,\n          head_width=1.2, head_length=1.2,zorder=3, ec='#FFFFF0')\n\n# Play YardLines\nax2.axvline(los,c='grey',zorder=-1)\nfirst_down = los+play_pd.Distance.values[0]\n# Set it to goal to go\nif first_down >= 100:\n    first_down = 100\nax2.axvline(first_down,c='yellow',zorder=3)\n\n# Scoreboard\nax1.set_facecolor('#000000')\nax1.set_xlim([0,100])\nax1.set_ylim([0,100])\nseason = str(int(play_pd.Season.values[0]))\nweek   = str(int(play_pd.Week.values[0]))\nhome_team = play_pd.HomeTeamAbbr.values[0]\naway_team = play_pd.VisitorTeamAbbr.values[0]\nhome_score = str(int(play_pd.HomeScoreBeforePlay.values[0]))\naway_score = str(int(play_pd.VisitorScoreBeforePlay.values[0]))\nquarter = str(int(play_pd.Quarter.values[0]))\ngame_clock = play_pd.GameClock.values[0][:-3]\ndown =  int(play_pd.Down.values[0])\nif first_down >= 100:\n    distance = 'Goal'\nelse:\n    distance = str(int(play_pd.Distance.values[0]))\nax1.text(10,90,season+' Week '+ week, fontsize=20, color='white')\nax1.text(10,80,home_team +':', fontsize=40, color='white')\nax1.text(10,70,away_team +':', fontsize=40, color='white')\nax1.text(60,80,home_score, fontsize=40, color='white')\nax1.text(60,70,away_score, fontsize=40, color='white')\nif play_pd.TeamOnOffense.values[0] == 'home':\n    ax1.scatter(90,82.5,color='white', s=200)\nelse:\n    ax1.scatter(90,72.5,color='white', s=200)\nax1.text(10,50, 'Q'+quarter, color='white', fontsize=30)\nax1.text(45,50, game_clock, color='white', fontsize=30)\nif down == 1:\n    down_str = 'st'\nelif down == 2:\n    down_str = 'nd'\nelif down == 3:\n    down_str = 'rd'\nelse:\n    down_str = 'th'\nax1.text(10,40, str(down)+down_str+' and '+distance, color='white', fontsize=30)\n\n# plt.gca().fill(x=15, y=10, x2=30, y2=20,c='black')  \n\n# Turn off tick labels\nax2.set_yticklabels([])\nax2.set_xticklabels([])\nax1.set_yticklabels([])\nax1.set_xticklabels([])\nax1.grid(False)\nax2.grid(False)\nplt.show()","1d3fabfc":"runners_pd = df_train[df_train.IsBallCarrier == True]\n\nleft_orientation = runners_pd[runners_pd.ToLeft == 1].Orientation.values\nright_orientation = runners_pd[runners_pd.ToLeft == 0].Orientation.values\n\nplt.hist(left_orientation, alpha=0.5, label='left facing')\nplt.hist(right_orientation, alpha=0.5, label='right facing')\nplt.legend()\nplt.show()\n# runners_pd.head()","7ca57117":"runners_pd.shape[0] == len(df_train.PlayId.unique())","3d17ecfd":"run_id = runners_pd.PlayId.unique()\nplay_id = df_train.PlayId.unique()\nfor i in run_id:\n    if i not in play_id:\n        print(i)","60948154":"\nyards = runners_pd.Yards.values\n\nplt.hist(yards, bins = 50)\nplt.axvline(np.mean(yards),label='Mean:{}'.format(np.round(np.mean(yards))), color='orange')\nplt.axvline(np.median(yards),label='Median:{}'.format(np.round(np.median(yards))), color='red')\nplt.legend()\nplt.show()","be6e15b5":"df_train.head()","07ebbb67":"from sklearn.preprocessing import LabelEncoder\n\nenc = LabelEncoder()\n\ndf_labels = df_train.copy()\nfor col in df_labels.columns:\n    if df_labels[col].dtype == 'O':\n        df_labels[col] = enc.fit_transform(df_labels[col].astype(str))","f2fdc04a":"import seaborn as sns\n\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\n\ncorr = df_labels.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","c0842238":"col_names = corr.columns\nfound_pairs = []\ndef parse_corr_matrix(corr_matrix):\n    for row in col_names:\n        for col in col_names:\n            if row == col:\n                continue\n            if ([row, col] in found_pairs) or ([col, row] in found_pairs):\n                continue\n            corr_val = np.abs(corr_matrix[row][col])\n            if corr_val > 0.6:\n                print('{} by {}: {}'.format(row,col,np.round(corr_matrix[row][col],2)))\n                found_pairs.append([row,col])\n\nparse_corr_matrix(corr)","25664798":"# YardsFromOwnGoal, X_std is important features\ndf_uncorr_train = runners_pd.copy()\ndf_uncorr_train['above_avg_yards'] = runners_pd.Yards > 3\nlabels = df_uncorr_train.above_avg_yards\ndf_uncorr_train = df_uncorr_train.drop(['GameId','PlayId','YardsToTD','Quarter',\n                      'PlayDirection','Yards','above_avg_yards', 'YardsFromOwnGoal','X_std'],axis=1)\ncols = df_uncorr_train.columns\ncat_features = [i for i in range(len(cols)) if df_uncorr_train[cols[i]].dtype == 'O']\n# Check for NaNs\nprint('NaNs present in...')\nfor col in cols:\n    if df_uncorr_train[col].isnull().values.any():\n        df_uncorr_train.loc[df_uncorr_train[col].isnull()] = 0\n        print(col)","1580be12":"from collections import Counter\nCounter(labels)","03282875":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(iterations=20)\nclf.fit(df_uncorr_train.values, labels.astype('int').values, cat_features, verbose=0)","0f229c98":"Counter(clf.predict(df_uncorr_train.values))","742b9997":"from sklearn import metrics\n\nfpr, tpr, thresholds = metrics.roc_curve(labels.astype('int').values, \n                                         clf.predict(df_uncorr_train.values), pos_label=1)\n\nmetrics.auc(fpr, tpr)","005113e8":"x_vals = df_uncorr_train.columns\ny_vals = clf.feature_importances_\n\nplt.bar(x_vals,y_vals)\nplt.xticks(rotation=90)\nplt.show()","b2bfb347":"from sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\n\nX = runners_pd.SecondsPassed.values\nX_ = X.reshape(len(X),1)\ny = runners_pd.Yards.values\nreg = LinearRegression().fit(X_, y)\n\n\nr2 = reg.score(X_, y)\nplt.scatter(runners_pd.SecondsPassed.values, runners_pd.Yards.values, alpha=0.3)\nplt.title('Seconds Pass vs. Yards Gained on Runs\\n Explanatory Power: {}%'.format(np.round(100*r2)) )\nplt.ylabel('Yards Gained')\nplt.xlabel('Seconds Passed')\nplt.show()","2975e65d":"runners_pd.columns","ad544759":"dib_mean = runners_pd.loc[runners_pd.DefendersInTheBox > 3] \\\n                     .groupby('DefendersInTheBox')['Yards'].mean()\ndib_count = runners_pd.loc[runners_pd.DefendersInTheBox > 3] \\\n                    .groupby('DefendersInTheBox')['PlayId'].count()","78445504":"legit = runners_pd.loc[runners_pd.DefendersInTheBox > 3]\nX = legit.DefendersInTheBox.values\nX_ = X.reshape(len(X),1)\ny = legit.Yards.values\nreg = LinearRegression().fit(X_, y)\nr2 = reg.score(X_, y)\n\nplt.title('Defenders in Box vs. Yards Gained on Runs\\n Explanatory Power: {}%'.format(np.round(100*r2)) )\nplt.bar(dib_mean.index,dib_mean.values,fill=None,edgecolor='orange')\nplt.scatter(legit.DefendersInTheBox.values, legit.Yards.values)\nplt.ylabel('Yards gained')\nplt.xlabel('# of Defenders in the Box')\nplt.show()","f25ee96e":"# Close vs. Blowouts per quarter\n\nrunners_pd.loc['score_diff'] = runners_pd.VisitorScoreBeforePlay - runners_pd.HomeScoreBeforePlay\nrunners_pd.loc[runners_pd.Team == 'home', 'score_diff'] = runners_pd.HomeScoreBeforePlay - runners_pd.VisitorScoreBeforePlay\n\n\n\nX = runners_pd.score_diff.fillna(0).values\nX_ = X.reshape(len(X),1)\ny = runners_pd.Yards.fillna(0).values\nreg = LinearRegression().fit(X_, y)\nr2 = reg.score(X_, y)\n\n# plt.title('Defenders in Box vs. Yards Gained on Runs\\n Explanatory Power: {}%'.format(np.round(100*r2)) )\n# plt.bar(dib_mean.index,dib_mean.values,fill=None,edgecolor='orange')\n# plt.scatter(legit.DefendersInTheBox.values, legit.Yards.values)\n# plt.ylabel('Yards gained')\n# plt.xlabel('# of Defenders in the Box')\n# plt.show()","63a2824c":"score_diff = runners_pd.HomeScoreBeforePlay.values - runners_pd.VisitorScoreBeforePlay.values\nrunners_pd.score_diff = score_diff","e26003c3":"plt.scatter(runners_pd.Dis,runners_pd.Yards, alpha=0.1)\nplt.show()","ded7d2b0":"# - Only look at \"normal\" instances\n#     - Get rid of 4th quarter\n#     - Get rid of redzone\n#     - Get rid of 2min of 1st half\n#     - Only look at reasonably close games","af27057e":"runners_pd = runners_pd.dropna(subset=['Yards'])\n","968ad602":"runners_pd.columns","19650f97":"from scipy.stats import ttest_ind\n\n# Is Q4 so different than other times in game?\nq4_yards = runners_pd.loc[runners_pd.Quarter == 4].Yards.values\nnot_q4_yards = runners_pd.loc[runners_pd.Quarter != 4].Yards.values\n\nt, p = ttest_ind(q4_yards, not_q4_yards)\nplt.boxplot([q4_yards,not_q4_yards], labels=['Q4 Plays\\n{}\\n{}'.format(round(np.mean(q4_yards),2),\n                                                                       round(np.std(q4_yards),2)),\n                                             '~Q4 Plays\\n{}\\n{}'.format(round(np.mean(not_q4_yards),2),\n                                                                       round(np.std(not_q4_yards),2))])\nplt.ylabel('Yards Gained')\nplt.title('Is Q4 so different than other times in game? {}'.format(round(p,2)< 0.05))\nplt.show()","5a9b7c4d":"# Is redzone so different than other times in game?\nrz_yards = runners_pd.loc[runners_pd.YardsToTD <= 20].Yards.values\nnot_rz_yards = runners_pd.loc[runners_pd.YardsToTD > 20].Yards.values\n\nt, p = ttest_ind(rz_yards, not_rz_yards)\nplt.boxplot([rz_yards,not_rz_yards],  labels=['RZ Plays\\n{}\\n{}'.format(round(np.mean(rz_yards),2),\n                                                                       round(np.std(rz_yards),2)),\n                                             '~RZ Plays\\n{}\\n{}'.format(round(np.mean(not_rz_yards),2),\n                                                                       round(np.std(not_rz_yards),2))])\nplt.ylabel('Yards Gained')\nplt.title('Is redzone so different than other times in game? {}'.format(round(p,2) < 0.05))\nplt.show()","44711b4b":"# Is 2min of Q2 different?\ntwomin_yards = runners_pd[(runners_pd.SecondsPassed >= (15+13)*60) & (runners_pd.SecondsPassed < (15+15)*60)].Yards.values\nnot_twomin_yards = runners_pd[(runners_pd.SecondsPassed < (15+13)*60) | (runners_pd.SecondsPassed >= (15+15)*60)].Yards.values\n\nt, p = ttest_ind(rz_yards, not_rz_yards)\nplt.boxplot([twomin_yards,not_twomin_yards], labels=['2min Plays\\n{}\\n{}'.format(round(np.mean(twomin_yards),2),\n                                                                       round(np.std(twomin_yards),2)),\n                                             '~2min Plays\\n{}\\n{}'.format(round(np.mean(not_twomin_yards),2),\n                                                                       round(np.std(not_twomin_yards),2))])\nplt.ylabel('Yards Gained')\nplt.title('Is 2min OFF so different than other times in game? {}'.format(round(p,2)< 0.05))\nplt.show()","bd5e4574":"# Are bowouts different\nblowout_yards = runners_pd[abs(runners_pd.HomeScoreBeforePlay - runners_pd.VisitorScoreBeforePlay) >= 20].Yards.values\nwin_blowout_yards = runners_pd[runners_pd.score_diff >= 20].Yards.values\nlose_blowout_yards = runners_pd[runners_pd.score_diff < -20].Yards.values\nnot_blowout_yards = runners_pd[abs(runners_pd.HomeScoreBeforePlay - runners_pd.VisitorScoreBeforePlay) < 20].Yards.values\nt, p = ttest_ind(blowout_yards, not_blowout_yards)\nplt.boxplot([blowout_yards,not_blowout_yards], labels=['All Blowout Plays\\n{}\\n{}'.format(round(np.mean(blowout_yards),2),\n                                                                       round(np.std(blowout_yards),2)),\n                                             '~Not Blowout Plays\\n{}\\n{}'.format(round(np.mean(not_blowout_yards),2),\n                                                                       round(np.std(not_blowout_yards),2))])\nplt.ylabel('Yards Gained')\nplt.title('Blowout Runs so different than other times in game? {}'.format(round(p,2)< 0.05))\nplt.show()","e73ffb62":"t, p = ttest_ind(win_blowout_yards, not_blowout_yards)\nt, p1 = ttest_ind(lose_blowout_yards, not_blowout_yards)\nplt.boxplot([win_blowout_yards,lose_blowout_yards, not_blowout_yards], labels=['Winning Blowout Plays','Losing Blowout Plays','~Blowout Plays'])\nplt.ylabel('Yards Gained')\nplt.title('Blowout Runs so different than other times in game? Winning:{} Losing: {}'.format(round(p,2)< 0.05,round(p1,2)< 0.05))\nplt.show()","ccbb7b90":"# evaluation metric\ndef crps(y_true, y_pred):\n    y_true = np.clip(np.cumsum(y_true, axis=1), 0, 1)\n    y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n    return ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * y_true.shape[0]) ","e1c04a66":"def generate_cpd(yards):\n    yards = int(yards)\n    return(np.append(np.zeros(99+yards),np.zeros(199-(99+yards))+1).reshape(199,1))\n\ndef generate_cpd2(yards):\n    return(np.append(np.zeros(99+(int(np.floor(yards)))),np.array(yards-np.floor(yards)), np.zeros(199-(99+int(yards)-1))+1).reshape(199,1))","fa2b0a6e":"generate_cpd(4).shape","cdfa9159":"runners_answers = [generate_cpd(i) for i in runners_pd.Yards.values]\ndummy_answers = [generate_cpd(4) for i in runners_pd.Yards.values]","c8a557e6":"dummy_results = [crps(runners_answers[i],dummy_answers[i]) for i in range(runners_pd.shape[0])]\nprint(\n\"Dummy Sum: {}\\nDummy MAE: {}\".format(sum(dummy_results),np.mean(dummy_results)*1000000)\n)","b9f688e6":"labels.astype('int').values","3d838714":"from catboost import Pool, CatBoostRegressor\n\n\n# Initialize CatBoostRegressor\n# clf = CatBoostRegressor(iterations=500)\n# clf.fit(df_uncorr_train.values, runners_pd.Yards.values, cat_features, verbose=0)","63809798":"# preds = clf.predict(df_uncorr_train.values)\n# preds","6b7b2a11":"from collections import namedtuple, defaultdict\nimport torch\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\nfrom torch.utils.data import Dataset, DataLoader, RandomSampler, Sampler, SequentialSampler","5c47c7ab":"# Create the dataset\ndf_train = df_train.loc[pd.notnull(df_train.Position)]","5988f116":"# create positional dataset\n# Which positions are in every single play?\n# So there is not set positional information to keep constant... but positon doesn't matter!\n# What does matter is proximity to ball carrier, what team they are on, their speed, direction, height, weight\ncnt = Counter(df_train.Position.values)\nplay_cnt = len(df_train.PlayId.unique())\nprint('Total Number of Plays:',play_cnt)\nfor k,v in cnt.items():\n    print(k,v, '({}%)'.format(round(100*v\/play_cnt,2)))\n","31b328a8":"play_pd.head()","be9eb733":"def motion_prepro(row):\n    x = row.X_std\n    y = row.Y_std\n    degrees = row.Dir\n    toLeft = row.ToLeft\n    speed = row.S\n    \n    # This was checked-- it's bc speed == 0, so no angle of movement Dir\n    if speed == 0:\n        return(0,0)\n    \n    if toLeft == 1:\n        degrees = 360-degrees\n        \n    quad = int(np.floor(degrees \/ 90) + 1)\n    degrees = int(degrees)\n   \n\n\n    # SOH CAH TOA\n    rads = degrees * np.pi\/180\n    # cos() = A\/H\n    if quad <= 2:\n        if quad == 1:\n            dx = speed*np.cos((np.pi\/2)-rads)\n            dy = speed*np.sin((np.pi\/2)-rads)\n        elif quad == 2:\n            dx = speed*np.cos(np.pi-rads)\n            dy = -speed*np.sin(np.pi-rads)\n    elif quad == 3:\n        dx = -speed*np.cos((3*np.pi\/2)-rads)\n        dy = -speed*np.sin((3*np.pi\/2)-rads)\n    else:\n        dx = -speed*np.cos((2*np.pi)-rads)\n        dy = speed*np.sin((2*np.pi)-rads)\n        \n    return(dx, dy)","7c1a400d":"dis_list = df_train.apply(motion_prepro, axis=1)\n\ndxs = []\ndys = []\nfor dx,dy in dis_list.items():\n    dxs.append(dx); dys.append(dy)\ndf_train['dx'] = [i[0] for i in dis_list]\ndf_train['dy'] = [i[1] for i in dis_list]","9db2a58b":"df_train['dx'] = [i[0] for i in dis_list]\ndf_train['dy'] = [i[1] for i in dis_list]","78a698ff":"position_dict = {\n    'QB':0,\n    'HB':1,\n    'RB':1,\n    'FB': 2,\n    'WR': 3,\n    'TE': 4,\n    'T': 5,\n    'OT':5,\n    'G': 6,\n    'OG':6,\n    'C': 7,\n    'DT':8,\n    'DE':9,\n    'DL':10,\n    'ILB':11,\n    'MLB':12,\n    'OLB':13,\n    'LB':14,\n    'CB':15,\n    'DB':16,\n    'S':17,\n    'FS':18,\n    'SS':19,\n    'SAF':20,\n    'NT':21\n}\nCounter(df_train.loc[df_train.IsBallCarrier == 1].Position.values)\ndf_train['adam_encode_pos'] = [position_dict[i] for i in df_train.Position.values]","9d4e127c":"import re\nrez = [re.split(r'-',i) for i in df_train.PlayerHeight]\ndf_train['Height'] = [int(i[0])*12+int(i[1]) for i in rez]","4d09eb3e":"df_train.shape","dc4d7d69":"def preprocess(df_train, train=True):\n    \n    print('Starting at {} features...'.format(df_train.shape[1]))\n    df_train['ToLeft'] = 0\n    df_train.loc[df_train.PlayDirection == \"left\",'ToLeft'] = 1\n\n    df_train['IsBallCarrier'] = df_train['NflId'] == df_train['NflIdRusher']\n    \n    df_train['YardsFromOwnGoal'] = 50 + (50-df_train['YardLine'])\n    df_train.loc[df_train.YardLine == 50,'YardsFromOwnGoal'] = 50\n    df_train.loc[df_train.FieldPosition == df_train.PossessionTeam, \\\n             'YardsFromOwnGoal'] = 50\n\n    df_train['X_std'] = df_train['X']\n    df_train['Y_std'] = df_train['Y']\n\n    df_train.loc[df_train.ToLeft == 1, 'X_std'] = 120 - df_train['X']\n    df_train.loc[df_train.ToLeft == 1, 'Y_std'] = 160\/3-df_train['Y']\n    \n    df_train['encode_pos'] = [position_dict[i] for i in df_train.Position.values]\n    \n    dis_list = df_train.apply(motion_prepro, axis=1)\n\n    dxs = []\n    dys = []\n    for dx,dy in dis_list.items():\n        dxs.append(dx); dys.append(dy)\n    df_train['dx'] = [i[0] for i in dis_list]\n    df_train['dy'] = [i[1] for i in dis_list]\n    \n    rez = [re.split(r'-',i) for i in df_train.PlayerHeight]\n    df_train['Height'] = [int(i[0])*12+int(i[1]) for i in rez]\n\n    plays = df_train.PlayId.unique()\n    spacial_list = []\n    play_list = []\n    \n    print('Now at {} features...'.format(df_train.shape[1]))\n    for play in plays:\n        play_pd = df_train.loc[df_train.PlayId == play]\n        runner = play_pd.loc[play_pd.IsBallCarrier == 1]\n        run_x = runner.X_std.values[0]\n        run_y = runner.Y_std.values[0]\n        run_dx = runner.dx.values[0]\n        run_dy = runner.dy.values[0]\n        run_height = runner.Height.values[0]\n        run_weight = runner.PlayerWeight.values[0]\n        run_pos = runner.encode_pos.values[0]\n\n        run_np = np.array([run_x,run_y,run_dx,run_dy,run_height,run_weight,run_pos])\n\n        players = play_pd.loc[play_pd.IsBallCarrier != 1]\n        unrank_pd = pd.DataFrame()\n\n        play_x = players.X_std.values - run_x\n        play_y = players.X_std.values - run_y\n        unrank_pd['play_x'] = play_x\n        unrank_pd['play_y'] = play_y\n        unrank_pd['play_dis'] = np.sqrt((run_x-play_x)**2+(run_y-play_y)**2) #euclidean\n        unrank_pd['play_dx'] = players.dx.values\n        unrank_pd['play_dy'] = players.dy.values\n        unrank_pd['play_height'] = players.Height.values\n        unrank_pd['play_weight'] = players.PlayerWeight.values\n        unrank_pd['play_pos'] = players.encode_pos.values\n\n        rank_pd = unrank_pd.sort_values(by='play_dis', axis=0, ascending=True, \n                              inplace=False, kind='quicksort', na_position='last')\n\n        spacial_list.append(np.append(run_np, rank_pd.values.flatten()))\n        play_list.append(play)\n      \n    torch_data = torch.from_numpy(np.array(spacial_list)).float()\n    \n    print('Returning {} features...'.format(torch_data.shape[1]))\n    if train:\n        y = [df_train.loc[df_train.PlayId == play].Yards.values[0] for play in plays]\n        y = np.array([generate_cpd(i) for i in y])\n        y = torch.from_numpy(y)\n        return(torch_data, y, play_list)\n\n    return(torch_data, play_list)","1938af69":"# x = df_train[df_train.GameId == 2017090700.0].copy()\n# a, b = preprocess(df_train, train=False)","eec012b5":"def make_pred(test_data, prediction_df, env, model):\n    data, plays = preprocess(test_data,train=False)\n    output = model(data)\n    \n    col_list = ['Yards{}'.format(i) for i in range(-99,100)]\n    answer_pd = pd.DataFrame(output.numpy(), columns=col_list)\n    answer_pd['PlayId'] = plays\n    env.predict(answer_pd)\n    env.write_submission_file()","c1c9d16c":"import time\n\n# Change everyone's x\/y to be in relation to runner\n    # Collect their team, dx\/dy, height, weight\n# Rank each play by distance to runner\n# Populate column values based on proximity\n\nplays = df_train.PlayId.unique()\ncnt = 10\nspacial_list = []\nstart = time.time()\nfor play in plays:\n    play_pd = df_train.loc[df_train.PlayId == play]\n    runner = play_pd.loc[play_pd.IsBallCarrier == 1]\n    run_x = runner.X_std.values[0]\n    run_y = runner.Y_std.values[0]\n    run_dx = runner.dx.values[0]\n    run_dy = runner.dy.values[0]\n    run_height = runner.Height.values[0]\n    run_weight = runner.PlayerWeight.values[0]\n    run_pos = runner.adam_encode_pos.values[0]\n\n    run_np = np.array([run_x,run_y,run_dx,run_dy,run_height,run_weight,run_pos])\n\n    players = play_pd.loc[play_pd.IsBallCarrier != 1]\n    unrank_pd = pd.DataFrame()\n\n    play_x = players.X_std.values - run_x\n    play_y = players.X_std.values - run_y\n    unrank_pd['play_x'] = play_x\n    unrank_pd['play_y'] = play_y\n    unrank_pd['play_dis'] = np.sqrt((run_x-play_x)**2+(run_y-play_y)**2) #euclidean\n    unrank_pd['play_dx'] = players.dx.values\n    unrank_pd['play_dy'] = players.dy.values\n    unrank_pd['play_height'] = players.Height.values\n    unrank_pd['play_weight'] = players.PlayerWeight.values\n    unrank_pd['play_pos'] = players.adam_encode_pos.values\n\n    rank_pd = unrank_pd.sort_values(by='play_dis', axis=0, ascending=True, \n                          inplace=False, kind='quicksort', na_position='last')\n\n    spacial_list.append(np.append(run_np, rank_pd.values.flatten()))\nprint(round((time.time() - start)\/60),'minutes to run')","88001ffe":"y = [df_train.loc[df_train.PlayId == play].Yards.values[0] for play in plays]\ny = np.array([generate_cpd(i) for i in y])\ny = torch.from_numpy(y)","0eccbc85":"np.array(spacial_list).shape","b267c08e":"np_spacial = np.array(spacial_list)","6cb7285d":"torch_train = torch.from_numpy(np_spacial[101:,:]).float()\ny_train = y[101:].view(torch_train.shape[0],199).float()\ntorch_test = torch.from_numpy(np_spacial[:101,:]).float()\ny_test = y[:101].view(101,199).float()","9863433e":"class Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(175, 150)\n        self.fc2 = nn.Linear(150, 125)\n        self.fc3 = nn.Linear(125, 100)\n        self.fc4 = nn.Linear(100, 150)\n        self.fc5 = nn.Linear(150, 199)\n        \n        self.bn1 = nn.BatchNorm1d(150)\n        self.bn2 = nn.BatchNorm1d(125)\n        self.bn3 = nn.BatchNorm1d(100)\n        self.bn4 = nn.BatchNorm1d(150)\n\n    def forward(self, x):\n        x = torch.sigmoid(self.bn1(self.fc1(x)))\n        x = torch.sigmoid(self.bn2(self.fc2(x)))\n        x = torch.sigmoid(self.bn3(self.fc3(x)))\n        x = torch.sigmoid(self.bn4(self.fc4(x)))\n        x = self.fc5(x)\n        return x\n      \ndef init_weights(m):\n    if type(m) == nn.Linear:\n        torch.nn.init.xavier_uniform_(m.weight)\n        m.bias.data.fill_(0.05)\n        \nmodel = Net()\nmodel.apply(init_weights)","daade7c3":"# evaluation metric\ndef crps(y_true, y_pred):\n    y_true = torch.clamp(torch.cumsum(y_true, dim=1), 0, 1)\n    y_pred = torch.clamp(torch.cumsum(y_pred, dim=1), 0, 1)\n    y_loss = ((y_true - y_pred) ** 2).sum(dim=1).sum(dim=0) \/ (199 * y_true.shape[0]) \n    return(y_loss)","652d6a2b":"optimizer = optim.Adam(model.parameters(), lr=0.001)\n\nfor epoch in range(50): # 3 full passes over the data\n    model.zero_grad()\n    output = model(torch_train)\n    loss = crps(y_train,output.float())\n    loss.backward()\n    optimizer.step()\n    ","44400dac":"\noutput = model(torch_test)\nloss = crps(y_test,output.float())\nprint('Testing Loss:',loss.item())","f93616b7":"len(plays[:101])","5969f4ef":"col_list = ['Yards{}'.format(i) for i in range(-99,100)]\nanswer_pd = pd.DataFrame(y_test.numpy(), columns=col_list)\nanswer_pd['PlayId'] = plays[:101]\nanswer_pd","4fd4465b":"# from kaggle.competitions import nflrush\n# env = nflrush.make_env()\n# for (play, prediction_df) in env.iter_test():\n#     make_pred(play, prediction_df, env, spatial_model)\n# # env = nflrush.make_env()\n# # env.predict(pd.DataFrame(data=y_pred.clip(0,1),columns=sample.columns))\n# # env.write_submission_file()","eefb36a1":"from kaggle.competitions import nflrush\nenv = nflrush.make_env()","26fc8837":"# dummy = df_train.loc[df_train.PlayId == 20170907000118.0].copy()\n# data, plays = preprocess(dummy,train=False)\n# output = model(data)","6380e1f9":"for test, sample in tqdm.tqdm(env.iter_test()):\n    data, plays = preprocess(test,train=False)\n    model.eval()\n    output = model(data)\n#     col_list = ['Yards{}'.format(i) for i in range(-99,100)]\n    answer_pd = pd.DataFrame(output.detach().numpy(), columns=sample.columns)\n    env.predict(answer_pd)\nenv.write_submission_file()","95f839cd":"# output = model(data)\n\n# col_list = ['Yards{}'.format(i) for i in range(-99,100)]\n# answer_pd = pd.DataFrame(output.numpy(), columns=col_list)\n# answer_pd['PlayId'] = plays\n# env.predict(answer_pd)\n# env.write_submission_file()","fd878cfb":"# Spacial Net","66ea9609":"## Checking for irregularity in game situation","e5cbccf7":"# Data Explore + Dummy Models","e4a4459b":"## Data Schema\n\n### train.csv\n* `GameId` - a unique game identifier\n* `PlayId` - a unique play identifier\n* `Team` - home or away\n* `X` - player position along the long axis of the field. See figure below.\n* `Y` - player position along the short axis of the field. See figure below.\n* `S` - speed in yards\/second\n* `A` - acceleration in yards\/second^2\n* `Dis` - distance traveled from prior time point, in yards\n* `Orientation` - orientation of player (deg)\n* `Dir` - angle of player motion (deg)\n* `NflId` - a unique identifier of the player\n* `DisplayName` - player's name\n* `JerseyNumber` - jersey number\n* `Season` - year of the season\n* `YardLine` - the yard line of the line of scrimmage\n* `Quarter` - game quarter (1-5, 5 == overtime)\n* `GameClock` - time on the game clock\n* `PossessionTeam` - team with possession\n* `Down` - the down (1-4)\n* `Distance` - yards needed for a first down\n* `FieldPosition` - which side of the field the play is happening on\n* `HomeScoreBeforePlay` - home team score before play started\n* `VisitorScoreBeforePlay` - visitor team score before play started\n* `NflIdRusher` - the NflId of the rushing player\n* `OffenseFormation` - offense formation\n* `OffensePersonnel` - offensive team positional grouping\n* `DefendersInTheBox` - number of defenders lined up near the line of scrimmage, spanning the width of the offensive line\n* `DefensePersonnel` - defensive team positional grouping\n* `PlayDirection` - direction the play is headed\n* `TimeHandoff` - UTC time of the handoff\n* `TimeSnap` - UTC time of the snap\n* `Yards` - the yardage gained on the play (you are predicting this)\n* `PlayerHeight` - player height (ft-in)\n* `PlayerWeight` - player weight (lbs)\n* `PlayerBirthDate` - birth date (mm\/dd\/yyyy)\n* `PlayerCollegeName` - where the player attended college\n* `HomeTeamAbbr` - home team abbreviation\n* `VisitorTeamAbbr` - visitor team abbreviation\n* `Week` - week into the season\n* `Stadium` - stadium where the game is being played\n* `Location` - city where the game is being player\n* `StadiumType` - description of the stadium environment\n* `Turf` - description of the field surface\n* `GameWeather` - description of the game weather\n* `Temperature` - temperature (deg F)\n* `Humidity` - humidity\n* `WindSpeed` - wind speed in miles\/hour\n* `WindDirection` - wind direction","222e3289":"## Ideas\n- Give player a certain amount of space depending on their location + velocity\n- Historical Features\n    - RB by Yards\n    - OL by Yards\n    - DVLA\n        - Function of DSkill + RB Skill\n- Worrying about the closest 2-3 defenders\n    - Blocked?\n        - There's a Blocker within N distance\n        - Look at speed\/direction\n        - Are they moving slowly?\n    - Project where RB will be in 1 sec\n        - Are defenders moving in that direction?\n        - Is there a blocker in their way    \n- Count OFF men in box\n- Only look at \"normal\" instances\n    - Get rid of 4th quarter\n    - Get rid of redzone\n    - Get rid of 2min of 1st half\n    - Only look at reasonably close games\n","3fd041d7":"## Objective: Predict how many yards a play will go for\n- The output isn't a single number, but a list of probabilities for the play resulting in a number of yards <= that many yards. (-99 to 99, making each output an array for 199 values for 0 to 1). Meaning `col_-99` will always be 0 and `col_99` will always be 1\n- This output is then fed through the CRPS algo for a true score","e6eafe43":"## Spacial Netv1\nMaking feature space the formation of the play, normalized around...\n - Running back?\n - Line of Scrimmage?\n - Nothing, because they are already normalized around 0,0 of the actual field?","23afad3c":"> # Clean Data\nlifted from https:\/\/www.kaggle.com\/zero92\/best-lbgm-new-features\nand https:\/\/www.kaggle.com\/statsbymichaellopez\/nfl-tracking-wrangling-voronoi-and-sonars","fc6e1013":"## FCNN Functions","4cc5cbba":"# Play Plotter","7bfedd25":"# Context"}}