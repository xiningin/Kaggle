{"cell_type":{"47ce0202":"code","96f1d7f6":"code","bec395c7":"code","4c49d8f0":"code","17bf18bf":"code","c57645a6":"code","e327ce56":"code","96f7d02c":"code","65c63923":"code","c732e4eb":"code","847bb2a1":"code","3edad2cb":"code","ce396efc":"code","fdd462da":"code","bbfbfbf7":"code","cfc74a29":"code","c9b421a5":"code","490e400a":"code","37aea678":"code","7b8396c4":"code","c18777af":"code","b6473fb9":"code","9efa5c60":"code","fc65964e":"code","b2c4d835":"code","e510dc22":"code","880a9eaa":"code","f0deb8a6":"code","45f8f015":"code","5dbcd471":"code","1266d7b3":"code","1e828304":"code","823ade5a":"code","f2e7f96a":"code","5398a8d5":"code","e0892fca":"code","c1031e28":"code","ca21e035":"code","5568d64c":"code","82f15381":"code","cc7dcf57":"code","d0fc2e13":"code","6ec9cf7a":"code","2a6a86f7":"code","9d4ca22d":"code","a00e6389":"code","b8cf7545":"code","b752f94a":"markdown","3a73931c":"markdown","c0cba131":"markdown","55937b7c":"markdown","3bd5b036":"markdown","2234218c":"markdown","667ca613":"markdown","78cc08ae":"markdown","95f79f65":"markdown","ea5479b6":"markdown","23d8ac73":"markdown","3f759ed6":"markdown","1ec4e642":"markdown","922dfe7c":"markdown","8f82583b":"markdown","b8114b97":"markdown","d5ac816c":"markdown","8c4ea17d":"markdown","8489604a":"markdown","498bb083":"markdown","eb2694ef":"markdown","8bac1baa":"markdown","9c6740ab":"markdown","0367f8f6":"markdown","7120f7f8":"markdown","04e36128":"markdown","ee13ee02":"markdown","cc830ddb":"markdown","c3905942":"markdown","1c1715e2":"markdown","485bf9a2":"markdown","f8f4f7d1":"markdown","fbddb166":"markdown","3d76a8ab":"markdown","d2a3167b":"markdown","f2ddf08f":"markdown","b4ddbc1a":"markdown","eddf0b60":"markdown","0b319aaa":"markdown"},"source":{"47ce0202":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pylab as plt # help to plot different graphs \n\n# Set the global default size of matplotlib figures\nplt.rc('figure', figsize=(10, 5))\n\n# Size of matplotlib figures that contain subplots\nfizsize_with_subplots = (10, 10)\n\n# Size of matplotlib histogram bins\nbin_size = 10\n#\/kaggle\/input\/titanic\/test.csv\n#\/kaggle\/input\/titanic\/train.csv\n#\/kaggle\/input\/titanic\/gender_submission.csv","96f1d7f6":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head()","bec395c7":"df_train.tail()","4c49d8f0":"df_train.dtypes","17bf18bf":"df_train.info()","c57645a6":"# Set up a grid of plots\nfig = plt.figure(figsize=fizsize_with_subplots)\nfig_dims = (3, 2)\n\n# Plot death and survival counts\nplt.subplot2grid(fig_dims, (0, 0))\ndf_train['Survived'].value_counts().plot(kind='bar',\n                                         title='Death and Survival Counts')\n\n# Plot Pclass counts\nplt.subplot2grid(fig_dims, (0, 1))\ndf_train['Pclass'].value_counts().plot(kind='bar',\n                                       title='Passenger Class Counts')\n\n# Plot Sex counts\nplt.subplot2grid(fig_dims, (1, 0))\ndf_train['Sex'].value_counts().plot(kind='bar',\n                                    title='Gender Counts')\nplt.xticks(rotation=0)\n\n# Plot Embarked counts\nplt.subplot2grid(fig_dims, (1, 1))\ndf_train['Embarked'].value_counts().plot(kind='bar',\n                                         title='Ports of Embarkation Counts')\n\n# Plot the Age histogram\nplt.subplot2grid(fig_dims, (2, 0))\ndf_train['Age'].hist()\nplt.title('Age Histogram')","e327ce56":"pclass_xt = pd.crosstab(df_train['Pclass'], df_train['Survived'])\npclass_xt","96f7d02c":"# Normalize the cross tab to sum to 1:\npclass_xt_pct = pclass_xt.div(pclass_xt.sum(1).astype(float), axis=0)\nprint(pclass_xt_pct)\npclass_xt_pct.plot(kind='bar',\n                   stacked=True,\n                   title='Survival Rate by Passenger Classes')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')","65c63923":"# mapping of gender sex variable with with an id.\nsexes = sorted(df_train['Sex'].unique())\ngenders_mapping = dict(zip(sexes, range(0, len(sexes))))\ngenders_mapping","c732e4eb":"# Transfering Sex from string to number representation.\ndf_train['Sex_Val'] = df_train['Sex'].map(genders_mapping).astype(int)\ndf_train.head()","847bb2a1":"sex_val_xt = pd.crosstab(df_train['Sex_Val'], df_train['Survived'])\nsex_val_xt","3edad2cb":"# Normalize the cross tab of Sex to sum to 1:\nsex_val_xt_pct = sex_val_xt.div(sex_val_xt.sum(1).astype(float), axis=0)\nprint(sex_val_xt_pct)\nsex_val_xt_pct.plot(kind='bar',\n                   stacked=True,\n                   title='Survival Rate by Gender')\nplt.xlabel('Gender')\nplt.ylabel('Survival Rate')","ce396efc":"# Get the unique values of Pclass:\npassenger_classes = sorted(df_train['Pclass'].unique())\n\nfor p_class in passenger_classes:\n    print('Male:   ', p_class, len(df_train[(df_train['Sex'] == 'male') &\n                             (df_train['Pclass'] == p_class)]))\n    print('Female: ', p_class, len(df_train[(df_train['Sex'] == 'female') &\n                             (df_train['Pclass'] == p_class)]))","fdd462da":"# Plot survival rate by Sex\nfemales_df = df_train[df_train['Sex'] == 'female']\nfemales_xt = pd.crosstab(females_df['Pclass'], df_train['Survived'])\nfemales_xt_pct = females_xt.div(females_xt.sum(1).astype(float), axis=0)\nfemales_xt_pct.plot(kind='bar',\n                    stacked=True,\n                    title='Female Survival Rate by Passenger Class')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')\n\n# Plot survival rate by Pclass\nmales_df = df_train[df_train['Sex'] == 'male']\nmales_xt = pd.crosstab(males_df['Pclass'], df_train['Survived'])\nmales_xt_pct = males_xt.div(males_xt.sum(1).astype(float), axis=0)\nmales_xt_pct.plot(kind='bar',\n                  stacked=True,\n                  title='Male Survival Rate by Passenger Class')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')","bbfbfbf7":"df_train[df_train['Embarked'].isnull()]","cfc74a29":"df_train['Embarked'] = sorted(df_train['Embarked'].fillna('A'))\ndf_train['Embarked'].unique()","c9b421a5":"# Get the unique values of Embarked\nembarked_locs = df_train['Embarked'].unique()\n\nembarked_locs_mapping = dict(zip(embarked_locs,\n                                 range(0, len(embarked_locs))))\nembarked_locs_mapping","490e400a":"df_train['Embarked_Val'] = df_train['Embarked'] \\\n                               .map(embarked_locs_mapping) \\\n                               .astype(int)\ndf_train.head()","37aea678":"#Ploting histograph for embarked\ndf_train['Embarked_Val'].hist(bins=len(embarked_locs), range=(0, 3))\nplt.title('Port of Embarkation Histogram')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Count')\nplt.show()","7b8396c4":"# As we see majority of passager is from S embarked, so we assign missing with S\ndf_train.replace({'Embarked_Val' :\n                { embarked_locs_mapping['A'] : embarked_locs_mapping['S']\n                }\n             },\n             inplace=True)","c18777af":"# Verifing replaced data\nembarked_locs = sorted(df_train['Embarked_Val'].unique())\nembarked_locs","b6473fb9":"# Plot cross tab for Embarked_val and Survival\nembarked_val_xt = pd.crosstab(df_train['Embarked_Val'], df_train['Survived'])\nembarked_val_xt_pct = \\\n    embarked_val_xt.div(embarked_val_xt.sum(1).astype(float), axis=0)\nembarked_val_xt_pct.plot(kind='bar', stacked=True)\nplt.title('Survival Rate by Port of Embarkation')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Survival Rate')","9efa5c60":"# Set up a grid of plots\nfig = plt.figure(figsize=fizsize_with_subplots)\n\nrows = 2\ncols = 3\ncol_names = ('Sex_Val', 'Pclass')\n\nfor portIdx in embarked_locs:\n    for colIdx in range(0, len(col_names)):\n        plt.subplot2grid((rows, cols), (colIdx, portIdx - 1))\n        df_train[df_train['Embarked_Val'] == portIdx][col_names[colIdx]] \\\n            .value_counts().plot(kind='bar')","fc65964e":"# Leaving Embarked as integers implies ordering in the values, which does not exist. Another way to represent Embarked without ordering is to create dummy variables:\ndf_train = pd.concat([df_train, pd.get_dummies(df_train['Embarked_Val'], prefix='Embarked_Val')], axis=1)\n","b2c4d835":"# Filter to view missing Age values:\n\ndf_train[df_train['Age'].isnull()][['Sex', 'Pclass', 'Age']].head()\n","e510dc22":"# To keep Age in tact, make a copy of it called AgeFill\n# that we will use to fill in the missing ages:\ndf_train['AgeFill'] = df_train['Age']\n\n# Populate AgeFill\ndf_train['AgeFill'] = df_train['AgeFill'] \\\n                        .groupby([df_train['Sex_Val'], df_train['Pclass']]) \\\n                        .apply(lambda x: x.fillna(x.median()))","880a9eaa":"# Plot a normalized cross tab for AgeFill and Survived:\n\n# Set up a grid of plots\nfig, axes = plt.subplots(2, 1, figsize=fizsize_with_subplots)\n\n# Histogram of AgeFill segmented by Survived\ndf1 = df_train[df_train['Survived'] == 0]['Age']\ndf2 = df_train[df_train['Survived'] == 1]['Age']\nmax_age = max(df_train['AgeFill'])\naxes[0].hist([df1, df2],\n             bins=int(max_age \/ bin_size),\n             range=(1, max_age),\n             stacked=True)\naxes[0].legend(('Died', 'Survived'), loc='best')\naxes[0].set_title('Survivors by Age Groups Histogram')\naxes[0].set_xlabel('Age')\naxes[0].set_ylabel('Count')\n\n# Scatter plot Survived and AgeFill\naxes[1].scatter(df_train['Survived'], df_train['AgeFill'])\naxes[1].set_title('Survivors by Age Plot')\naxes[1].set_xlabel('Survived')\naxes[1].set_ylabel('Age')","f0deb8a6":"for pclass in passenger_classes:\n    df_train.AgeFill[df_train.Pclass == pclass].plot(kind='kde')\nplt.title('Age Density Plot by Passenger Class')\nplt.xlabel('Age')\nplt.legend(('1st Class', '2nd Class', '3rd Class'), loc='best')","45f8f015":"# Set up a grid of plots\nfig = plt.figure(figsize=fizsize_with_subplots)\nfig_dims = (3, 1)\n\n# Plot the AgeFill histogram for Survivors\nplt.subplot2grid(fig_dims, (0, 0))\nsurvived_df = df_train[df_train['Survived'] == 1]\nsurvived_df['AgeFill'].hist(bins=int(max_age \/ bin_size), range=(1, max_age))\n\n# Plot the AgeFill histogram for Females\nplt.subplot2grid(fig_dims, (1, 0))\nfemales_df = df_train[(df_train['Sex_Val'] == 0) & (df_train['Survived'] == 1)]\nfemales_df['AgeFill'].hist(bins=int(max_age \/ bin_size), range=(1, max_age))\n\n# Plot the AgeFill histogram for first class passengers\nplt.subplot2grid(fig_dims, (2, 0))\nclass1_df = df_train[(df_train['Pclass'] == 1) & (df_train['Survived'] == 1)]\nclass1_df['AgeFill'].hist(bins=int(max_age \/ bin_size), range=(1, max_age))\n","5dbcd471":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch']\ndf_train.head()","1266d7b3":"# Plot a histogram of FamilySize:\ndf_train['FamilySize'].hist()\nplt.title('Family Size Histogram')","1e828304":"# Get the unique values of Embarked and its maximum\nfamily_sizes = sorted(df_train['FamilySize'].unique())\nfamily_size_max = max(family_sizes)\n\ndf1 = df_train[df_train['Survived'] == 0]['FamilySize']\ndf2 = df_train[df_train['Survived'] == 1]['FamilySize']\nplt.hist([df1, df2],\n         bins=family_size_max + 1,\n         range=(0, family_size_max),\n         stacked=True)\nplt.legend(('Died', 'Survived'), loc='best')\nplt.title('Survivors by Family Size')","823ade5a":"df_train.dtypes[df_train.dtypes.map(lambda x: x == 'object')]\n","f2e7f96a":"# Drop the columns we won't use:\n\ndf_train = df_train.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'],\n                         axis=1)\ndf_train = df_train.drop(['Age', 'SibSp', 'Parch', 'PassengerId', 'Embarked_Val'], axis=1)\ndf_train.dtypes","5398a8d5":"train_data = df_train.values\ntrain_data","e0892fca":"def clean_data(df, drop_passenger_id):\n\n    # Get the unique values of Sex\n    sexes = sorted(df['Sex'].unique())\n\n    # Generate a mapping of Sex from a string to a number representation\n    genders_mapping = dict(zip(sexes, range(0, len(sexes))))\n\n    # Transform Sex from a string to a number representation\n    df['Sex_Val'] = df['Sex'].map(genders_mapping).astype(int)\n\n    # Get the unique values of Embarked\n    df['Embarked'] = sorted(df['Embarked'].fillna('A'))\n    embarked_locs = sorted(df['Embarked'].unique())\n\n    # Generate a mapping of Embarked from a string to a number representation\n    embarked_locs_mapping = dict(zip(embarked_locs,\n                                     range(0, len(embarked_locs))))\n\n    # Transform Embarked from a string to dummy variables\n    df = pd.concat([df, pd.get_dummies(df['Embarked'], prefix='Embarked_Val')], axis=1)\n\n    # Fill in missing values of Embarked\n    # Since the vast majority of passengers embarked in 'S': 3,\n    # we assign the missing values in Embarked to 'S':\n    if (len(df[df['Embarked']=='A']) > 0):\n        df.replace({'Embarked_Val' :\n                        { embarked_locs_mapping['A'] : embarked_locs_mapping['S']\n                        }\n                    },\n                    inplace=True)\n\n    # Fill in missing values of Fare with the average Fare\n    if (len(df[df['Fare'].isnull()]) > 0):\n        avg_fare = df['Fare'].mean()\n        df.replace({ None: avg_fare }, inplace=True)\n\n    # To keep Age in tact, make a copy of it called AgeFill\n    # that we will use to fill in the missing ages:\n    df['AgeFill'] = df['Age']\n\n    # Determine the Age typical for each passenger class by Sex_Val.\n    # We'll use the median instead of the mean because the Age\n    # histogram seems to be right skewed.\n    df['AgeFill'] = df['AgeFill'] \\\n                        .groupby([df['Sex_Val'], df['Pclass']]) \\\n                        .apply(lambda x: x.fillna(x.median()))\n\n    # Define a new feature FamilySize that is the sum of\n    # Parch (number of parents or children on board) and\n    # SibSp (number of siblings or spouses):\n    df['FamilySize'] = df['SibSp'] + df['Parch']\n\n    # Drop the columns we won't use:\n    df = df.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1)\n\n    # Drop the Age column since we will be using the AgeFill column instead.\n    # Drop the SibSp and Parch columns since we will be using FamilySize.\n    # Drop the PassengerId column since it won't be used as a feature.\n    df = df.drop(['Age', 'SibSp', 'Parch'], axis=1)\n\n    if drop_passenger_id:\n        df = df.drop(['PassengerId'], axis=1)\n\n    return df","c1031e28":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=100)\n# Training data features, skip the first column 'Survived'\ntrain_features = train_data[:, 1:]\n\n# 'Survived' column values\ntrain_target = train_data[:, 0]\n\n# Fit the model to our training data\nclf = clf.fit(train_features, train_target)\nscore = clf.score(train_features, train_target)\nprint(\"Accuracy: %.2f%%\" % (score * 100.0))","ca21e035":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# fit model no training data\nmodel = XGBClassifier()\nmodel.fit(train_features, train_target)\n# make predictions for test data\ny_pred = model.predict(train_features)\npredictions = [round(value) for value in y_pred]\n# evaluate predictions\naccuracy = accuracy_score(train_target, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","5568d64c":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# Data wrangle the test set and convert it to a numpy array\ndf_test = clean_data(df_test, drop_passenger_id=False)\ntest_data = df_test.values","82f15381":"# Get the test data features, skipping the first column 'PassengerId'\ntest_x = test_data[:, 1:]\n\n# Predict the Survival values for the test data\ntest_y = clf.predict(test_x)","cc7dcf57":"test_y = model.predict(test_x)","d0fc2e13":"df_test['Survived'] = test_y\ndf_test['Survived'] = df_test['Survived'].astype(int)\ndf_test[['PassengerId', 'Survived']] \\\n    .to_csv('\/kaggle\/working\/submission.csv', index=False)\n\n","6ec9cf7a":"# Link to download file for submission\nfrom IPython.display import FileLink\nFileLink('\/kaggle\/working\/submission.csv')","2a6a86f7":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n\n# Split 80-20 train vs test data\ntrain_x, test_x, train_y, test_y = train_test_split(train_features,\n                                                    train_target,\n                                                    test_size=0.20,\n                                                    random_state=0)\nprint (train_features.shape, train_target.shape)\nprint (train_x.shape, train_y.shape)\nprint (test_x.shape, test_y.shape)","9d4ca22d":"# Use the new training data to fit the model, predict, and get the accuracy score:\n\nclf = clf.fit(train_x, train_y)\npredict_y = clf.predict(test_x)\n\nfrom sklearn.metrics import accuracy_score\nprint (\"Accuracy = %.2f\" % (accuracy_score(test_y, predict_y)))","a00e6389":"# Get the model score and confusion matrix:\n\nmodel_score = clf.score(test_x, test_y)\nprint (\"Model Score %.2f \\n\" % (model_score))\n\nconfusion_matrix = metrics.confusion_matrix(test_y, predict_y)\nprint (\"Confusion Matrix \", confusion_matrix)\n\nprint (\"          Predicted\")\nprint (\"         |  0  |  1  |\")\nprint (\"         |-----|-----|\")\nprint (\"       0 | %3d | %3d |\" % (confusion_matrix[0, 0],\n                                   confusion_matrix[0, 1]))\nprint (\"Actual   |-----|-----|\")\nprint (\"       1 | %3d | %3d |\" % (confusion_matrix[1, 0],\n                                   confusion_matrix[1, 1]))\nprint (\"         |-----|-----|\")","b8cf7545":"#Display the classification report:\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(test_y,\n                            predict_y,\n                            target_names=['Not Survived', 'Survived']))","b752f94a":"# FINAL DATA PREPARATION FOR MACHINE LEARNING\nMany machine learning algorithms do not work on strings and they usually require the data to be in an array, not a DataFrame.\n\nShow only the columns of type 'object' (strings):","3a73931c":"Transform Embarked from a string to a number representation to prepare it for machine learning algorithms:","c0cba131":"From RF and XGBOOST, RF work better for this prediction. So, we will predict actual survival through Random Forest.","55937b7c":"Now, normalized a cross tab of Sex_Val with survicval rate.","3bd5b036":"# FEATURE: EMBARKED\nEmbarked column might be an important variable but it has much missing values. So, we need to infer with some value or need to delete that column after seeing relation between them.","2234218c":"# DATA WRANGLING SUMMARY\n\nBelow is a summary of the data wrangling we performed on our training data set. We encapsulate this in a function since we'll need to do the same operations to our test set later.","667ca613":"When looking at AgeFill density by Pclass, we see the first class passengers were generally older then second class passengers, which in turn were older than third class passengers. We've determined that first class passengers had a higher survival rate than second class passengers, which in turn had a higher survival rate than third class passengers.","78cc08ae":"There are some of variables which have missing values for example Age, Cabin and Embarked. Cabin has too many missing values, whereas we might be able to infer values for Age and Embarked.","95f79f65":"It appears those that embarked in location 'C': 1 had the highest rate of survival. We'll dig in some more to see why this might be the case. Below we plot a graphs to determine gender and passenger class makeup for each port:\n","ea5479b6":"From this bar gragh of passanger survival rate with passanger class it is clear that pclass also play important role to determine survival of passanger.","23d8ac73":"Based on the histograms, it is not immediately obvious what impact FamilySize has on survival. The machine learning algorithms might benefit from this feature.\n\nAdditional features we might want to engineer might be related to the Name column, for example honorrary or pedestrian titles might give clues and better predictive power for a male's survival.","3f759ed6":"# FEATURE: AGE\nThe Age column seems like an important feature--unfortunately it is missing many values. We'll need to fill in the missing values like we did with Embarked.","1ec4e642":"Now, We will see is there any relation exist between pClass and Sex.\nAnd count males and females in each Pclass.","922dfe7c":"Take the decision trees and run it on the test data:\n\n","8f82583b":"# FEATURE: FAMILY SIZE\nFeature enginering involves creating new features or modifying existing features which might be advantageous to a machine learning algorithm.\n\nDefine a new feature FamilySize that is the sum of Parch (number of parents or children on board) and SibSp (number of siblings or spouses):","b8114b97":"Unfortunately, the graphs above do not seem to clearly show any insights. We'll keep digging further.\n\nPlot AgeFill density by Pclass:","d5ac816c":"# FEATURE: PASSENGER CLASSES\nFrom the above exploratory analysis we see that there are three classes as 1,2 and 3. Now We'll determine what proportion of passager survive according to different classes.\n","8c4ea17d":"# XGBoost Model: TRAINING\n","8489604a":"# RANDOM FOREST: PREDICTING","498bb083":"### Reading training data with showing first 5 records","eb2694ef":"Take the XG boost and run it on the test data:\n","8bac1baa":"# FEATURE: SEX\n\nSex might also be played important role to determine survival of passanger. So, as we see sex is categorical data so we change this to numerical by mapping with proper id of Male and Female. ","9c6740ab":"The vast majority of females in First and Second class survived. Males in First class had the highest chance for survival.","0367f8f6":"# RANDOM FOREST: TRAINING","7120f7f8":"Plot survival rate of pclass and sex.","04e36128":"From the above bar chart, It is clear that Survival of passanger is strongly dependent on Sex. The majority of females survived, whereas the majority of males did not.","ee13ee02":"Determine the Age typical for each passenger class by Sex_Val. We'll use the median instead of the mean because the Age histogram seems to be right skewed.\n","cc830ddb":"In the first graph, we see that most survivors come from the 20's to 30's age ranges and might be explained by the following two graphs. The second graph shows most females are within their 20's. The third graph shows most first class passengers are within their 30's.","c3905942":"### Checking datatypes of columns","1c1715e2":"Plot a histogram of AgeFill segmented by Survived:","485bf9a2":"Convert the DataFrame to a numpy array:","f8f4f7d1":"### Get some basic information of the DataFrame:","fbddb166":"# XGBOOST ALGO: PREPARE FOR KAGGLE SUBMISSION\nCreate a DataFrame by combining the index from the test data with the output of predictions, then write the results to the output:\n","3d76a8ab":"Let's plots some basic figure to get basic idea of data.","d2a3167b":"# Importing required libraries and setup some variables","f2ddf08f":"Let's create Embarked from categorical to numerical variables. And find the relation between target varible Survivale.","b4ddbc1a":"### Fetching last 5 records from training data","eddf0b60":"# EVALUATE MODEL ACCURACY\nSubmitting to Kaggle will give you an accuracy score. It would be helpful to get an idea of accuracy without submitting to Kaggle.\n\nWe'll split our training data, 80% will go to \"train\" and 20% will go to \"test\":\n","0b319aaa":"Ploting cross tab:"}}