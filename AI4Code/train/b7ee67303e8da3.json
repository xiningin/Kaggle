{"cell_type":{"ba45eeb5":"code","b26e913a":"code","955280c0":"code","5ecad548":"code","f1f4383d":"code","dcca1ce3":"code","de61dd5d":"code","e10141fb":"code","ded3269c":"code","3a27eb77":"code","5090a4b5":"code","659208f3":"code","25753815":"code","4ef7dda9":"code","ae76d29e":"code","2f6366c2":"code","cba5a324":"code","6c7cae0f":"markdown","0a9cfe5b":"markdown","ea1c7ea2":"markdown"},"source":{"ba45eeb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nfrom scipy import stats\nimport statsmodels.stats.multitest as smm\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b26e913a":"df = pd.read_csv(\"..\/input\/kc-house-data\/kc_house_data.csv\")\ndf[df.isnull().any(axis=1)]\ndf.head()","955280c0":"count_row = df.shape[0]  #\u041a\u043e\u043b-\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 (\u0441\u0442\u0440\u043e\u043a)\ncount_col = df.shape[1]  #\u041a\u041e\u043b-\u0432\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a (\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445)\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439\", count_row)\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\", count_col)","5ecad548":"df.info()","f1f4383d":"stats = df.describe()\nstats=stats.transpose()\npd.DataFrame(stats)","dcca1ce3":"df.isnull().sum()","de61dd5d":"df.dtypes","e10141fb":"df1=df[['price', 'bedrooms', 'bathrooms', 'sqft_living',\n    'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n    'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',\n    'lat', 'long', 'sqft_living15', 'sqft_lot15']]\nh = df1.hist(bins=25,figsize=(16,16),xlabelsize='10',ylabelsize='10',xrot=-15)\nsns.despine(left=True, bottom=True)\n[x.title.set_size(12) for x in h.ravel()];\n[x.yaxis.tick_left() for x in h.ravel()];","ded3269c":"sns.set(style=\"whitegrid\", font_scale=1)","3a27eb77":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x=df['bedrooms'],y=df['price'], ax=axes[0])\nsns.boxplot(x=df['floors'],y=df['price'], ax=axes[1])\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Bedrooms', ylabel='Price')\naxes[0].yaxis.tick_left()\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\naxes[1].set(xlabel='Floors', ylabel='Price')\n\nf, axe = plt.subplots(1, 1,figsize=(12.18,5))\nsns.despine(left=True, bottom=True)\nsns.boxplot(x=df['bathrooms'],y=df['price'], ax=axe)\naxe.yaxis.tick_left()\naxe.set(xlabel='Bathrooms \/ Bedrooms', ylabel='Price');","5090a4b5":"f, axes = plt.subplots(1, 2,figsize=(15,5))\nsns.boxplot(x=df['waterfront'],y=df['price'], ax=axes[0])\nsns.boxplot(x=df['view'],y=df['price'], ax=axes[1])\nsns.despine(left=True, bottom=True)\naxes[0].set(xlabel='Waterfront', ylabel='Price')\naxes[0].yaxis.tick_left()\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\naxes[1].set(xlabel='View', ylabel='Price')\n\nf, axe = plt.subplots(1, 1,figsize=(12.18,5))\nsns.boxplot(x=df['grade'],y=df['price'], ax=axe)\nsns.despine(left=True, bottom=True)\naxe.yaxis.tick_left()\naxe.set(xlabel='Grade', ylabel='Price');","659208f3":"df_dm=df.copy()\ndf_dm.describe()","25753815":"#\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf1 = df.drop([\"zipcode\",\"lat\",\"long\",\"id\",\"date\"], axis = 1)\ndf1.head()","4ef7dda9":"corr = df1.corr()\ncorr.style.background_gradient(cmap=\"coolwarm\").set_precision(2)","ae76d29e":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nX = df[['sqft_living']].values\ny = df[['price']].values\nregr = LinearRegression()\n\nquadratic = PolynomialFeatures(degree=2)\ncubic = PolynomialFeatures(degree=3)\nX_quad = quadratic.fit_transform(X)\nX_cubic = cubic.fit_transform(X)\n\nX_fit = np.arange(X.min(),X.max(),1)[:,np.newaxis]\nregr = regr.fit(X,y)\ny_lin_fit = regr.predict(X_fit)\nlinear_r2 = r2_score(y,regr.predict(X))\n\nregr = regr.fit(X_quad,y)\ny_quad_fit = regr.predict(quadratic.fit_transform(X_fit))\nquadratic_r2 = r2_score(y,regr.predict(X_quad))\n\nregr = regr.fit(X_cubic,y)\ny_cubic_fit = regr.predict(cubic.fit_transform(X_fit))\ncubic_r2 = r2_score(y,regr.predict(X_cubic))\n\nplt.scatter(X,y,label='training points',color='lightgray')\nplt.plot(X_fit,y_lin_fit,label='linear (d=1), $R^2=%.2f$' % linear_r2, color='blue', lw=2, linestyle=':')\nplt.plot(X_fit,y_quad_fit,label='quadratic (d=2), $R^2=%.2f$' % quadratic_r2, color='red', lw=2, linestyle='-')\nplt.plot(X_fit,y_cubic_fit,label='cubic (d=3), $R^2=%.2f$' % cubic_r2, color='green', lw=2, linestyle='--')\nplt.xlabel('% lower status of the popelation [LSTAT]')\nplt.ylabel('Price in $1000\\'s [MEDV]')\nplt.legend(loc='upper right')\nplt.show()","2f6366c2":"from sklearn.tree import DecisionTreeRegressor\n#df1 = df.drop([\"zipcode\",\"lat\",\"long\",\"id\",\"date\",\"price\"], axis = 1)\nX = df1[['sqft_living']].values\n#X = df1.values\ny = df[['price']].values\n    \nfrom sklearn import tree\nclf = tree.DecisionTreeRegressor(max_leaf_nodes=40)\nclf = clf.fit(X, y)\ntree_r2 = r2_score(y, clf.predict(X))\ntree_r2","cba5a324":"X = df1[['sqft_living','bathrooms','sqft_living',\n         'waterfront','grade',\n         'yr_built']].values\n#X = df1.values\ny = df[['price']].values\n    \nfrom sklearn import tree\nclf = tree.DecisionTreeRegressor(max_leaf_nodes=40)\nclf = clf.fit(X, y)\ntree_r2 = r2_score(y, clf.predict(X))\ntree_r2","6c7cae0f":"#  \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","0a9cfe5b":"sqft_living \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 sqft_above, \u0430 \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u0442\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0435\u0433\u043e. \u0422\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0430\u044f \u0436\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 sqft_living \u0438 grade","ea1c7ea2":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435"}}