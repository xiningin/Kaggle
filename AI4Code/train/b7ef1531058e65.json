{"cell_type":{"7af0f10a":"code","fb20b036":"code","2aece77f":"code","3a2bd737":"code","1bad2fe4":"code","779be8b9":"code","0a932aae":"code","3c6abe86":"code","9b7fd3c4":"code","b1fc4ee4":"code","b5962a3a":"code","3645b6ef":"code","a56a6c0d":"code","1a8b0d23":"code","c2717c26":"code","01d9875d":"code","9416a436":"code","5b0f5367":"code","4a601b32":"code","e5413259":"code","4a532c57":"code","62046ad4":"code","4222274c":"code","d1d677a0":"code","8dd256d3":"code","e0e2aa8e":"code","a482524c":"code","9b30fd35":"code","38b5a339":"code","f9b8ff31":"code","21584f42":"code","4c960fa7":"code","f32fb650":"code","8b052693":"code","7c9199da":"code","a5eacc43":"code","81a59837":"code","9c2f3000":"code","ceb806b7":"code","98e6d49f":"code","0fb065a7":"code","29cb0ff9":"code","c1d14c6a":"code","80243944":"code","db2696f2":"code","0928c76f":"code","deba6891":"code","8e55cf82":"markdown","671e6bac":"markdown","f5a73097":"markdown"},"source":{"7af0f10a":"import colorsys\nimport imghdr\nimport cv2\nimport os\nimport random\nfrom keras import backend as K\n\nimport numpy as np\nfrom PIL import Image, ImageDraw, ImageFont\n\n\ndef read_classes(classes_path):\n    with open(classes_path) as f:\n        class_names = f.readlines()\n    class_names = [c.strip() for c in class_names]\n    return class_names\n\n\ndef read_anchors(anchors_path):\n    with open(anchors_path) as f:\n        anchors = f.readline()\n        anchors = [float(x) for x in anchors.split(',')]\n        anchors = np.array(anchors).reshape(-1, 2)\n    return anchors\n\n\ndef generate_colors(class_names):\n    hsv_tuples = [(x \/ len(class_names), 1., 1.) for x in range(len(class_names))]\n    colors = list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))\n    colors = list(map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)), colors))\n    random.seed(10101)  # Fixed seed for consistent colors across runs.\n    random.shuffle(colors)  # Shuffle colors to decorrelate adjacent classes.\n    random.seed(None)  # Reset seed to default.\n    return colors\n\n\ndef scale_boxes(boxes, image_shape):\n    \"\"\" Scales the predicted boxes in order to be drawable on the image\"\"\"\n    height = image_shape[0]\n    width = image_shape[1]\n    image_dims = K.stack([height, width, height, width])\n    image_dims = K.reshape(image_dims, [1, 4])\n    boxes = boxes * image_dims\n    return boxes\n\n\ndef preprocess_image(imag, model_image_size):\n    #image_type = imghdr.what(img_path)\n    image = Image.fromarray(imag)\n    image = image.convert('RGB')\n    #image_data = cv2.resize(image,\n    #model_image_size, interpolation = cv2.INTER_AREA)\n    resized_image = image.resize(tuple(reversed(model_image_size)), Image.BICUBIC)\n    image_data = np.array(resized_image, dtype='float32')\n    #image_data = np.asarray(image_data,dtype='float32')\n    image_data \/= 255.\n    image_data = np.expand_dims(image_data, 0)  # Add batch dimension.\n    return image, image_data\n\n\ndef draw_boxes(image, out_scores, out_boxes, out_classes, class_names, colors):\n    results = []\n    font = ImageFont.truetype(font='..\/input\/fontdata\/FiraMono-Medium.otf',\n                              size=np.floor(3e-2 * image.size[1] + 0.5).astype('int32'))\n    thickness = (image.size[0] + image.size[1]) \/\/ 300\n\n    for i, c in reversed(list(enumerate(out_classes))):\n        predicted_class = class_names[c]\n        box = out_boxes[i]\n        score = out_scores[i]\n\n        label = '{} {:.2f}'.format(predicted_class, score)\n\n        draw = ImageDraw.Draw(image)\n        label_size = draw.textsize(label, font)\n\n        top, left, bottom, right = box\n        top = max(0, np.floor(top + 0.5).astype('int32'))\n        left = max(0, np.floor(left + 0.5).astype('int32'))\n        bottom = min(image.size[1], np.floor(bottom + 0.5).astype('int32'))\n        right = min(image.size[0], np.floor(right + 0.5).astype('int32'))\n        results.append([label, left, top, right, bottom])\n       # print(label, (left, top), (right, bottom))\n\n        if top - label_size[1] >= 0:\n            text_origin = np.array([left, top - label_size[1]])\n        else:\n            text_origin = np.array([left, top + 1])\n\n        # My kingdom for a good redistributable image drawing library.\n        for i in range(thickness):\n            draw.rectangle([left + i, top + i, right - i, bottom - i], outline=colors[c])\n        draw.rectangle([tuple(text_origin), tuple(text_origin + label_size)], fill=colors[c])\n        draw.text(text_origin, label, fill=(0, 0, 0), font=font)\n        del draw\n    return results","fb20b036":"from functools import reduce\n\n\ndef compose(*funcs):\n    \"\"\"Compose arbitrarily many functions, evaluated left to right.\n\n    Reference: https:\/\/mathieularose.com\/function-composition-in-python\/\n    \"\"\"\n    # return lambda x: reduce(lambda v, f: f(v), funcs, x)\n    if funcs:\n        return reduce(lambda f, g: lambda *a, **kw: g(f(*a, **kw)), funcs)\n    else:\n        raise ValueError('Composition of empty sequence not supported.')\n","2aece77f":"import functools\nfrom functools import partial\n\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model\nfrom keras.regularizers import l2\n\n\n\n# Partial wrapper for Convolution2D with static default argument.\n_DarknetConv2D = partial(Conv2D, padding='same')\n\n\n@functools.wraps(Conv2D)\ndef DarknetConv2D(*args, **kwargs):\n    \"\"\"Wrapper to set Darknet weight regularizer for Convolution2D.\"\"\"\n    darknet_conv_kwargs = {'kernel_regularizer': l2(5e-4)}\n    darknet_conv_kwargs.update(kwargs)\n    return _DarknetConv2D(*args, **darknet_conv_kwargs)\n\n\ndef DarknetConv2D_BN_Leaky(*args, **kwargs):\n    \"\"\"Darknet Convolution2D followed by BatchNormalization and LeakyReLU.\"\"\"\n    no_bias_kwargs = {'use_bias': False}\n    no_bias_kwargs.update(kwargs)\n    return compose(\n        DarknetConv2D(*args, **no_bias_kwargs),\n        BatchNormalization(),\n        LeakyReLU(alpha=0.1))\n\n\ndef bottleneck_block(outer_filters, bottleneck_filters):\n    \"\"\"Bottleneck block of 3x3, 1x1, 3x3 convolutions.\"\"\"\n    return compose(\n        DarknetConv2D_BN_Leaky(outer_filters, (3, 3)),\n        DarknetConv2D_BN_Leaky(bottleneck_filters, (1, 1)),\n        DarknetConv2D_BN_Leaky(outer_filters, (3, 3)))\n\n\ndef bottleneck_x2_block(outer_filters, bottleneck_filters):\n    \"\"\"Bottleneck block of 3x3, 1x1, 3x3, 1x1, 3x3 convolutions.\"\"\"\n    return compose(\n        bottleneck_block(outer_filters, bottleneck_filters),\n        DarknetConv2D_BN_Leaky(bottleneck_filters, (1, 1)),\n        DarknetConv2D_BN_Leaky(outer_filters, (3, 3)))\n\n\ndef darknet_body():\n    \"\"\"Generate first 18 conv layers of Darknet-19.\"\"\"\n    return compose(\n        DarknetConv2D_BN_Leaky(32, (3, 3)),\n        MaxPooling2D(),\n        DarknetConv2D_BN_Leaky(64, (3, 3)),\n        MaxPooling2D(),\n        bottleneck_block(128, 64),\n        MaxPooling2D(),\n        bottleneck_block(256, 128),\n        MaxPooling2D(),\n        bottleneck_x2_block(512, 256),\n        MaxPooling2D(),\n        bottleneck_x2_block(1024, 512))\n\n\ndef darknet19(inputs):\n    \"\"\"Generate Darknet-19 model for Imagenet classification.\"\"\"\n    body = darknet_body()(inputs)\n    logits = DarknetConv2D(1000, (1, 1), activation='softmax')(body)\n    return Model(inputs, logits)\n","3a2bd737":"import sys\n\nimport numpy as np\nimport tensorflow as tf\nfrom keras import backend as K\nfrom keras.layers import Lambda\nfrom keras.layers.merge import concatenate\nfrom keras.models import Model\n\n\n\nsys.path.append('..')\n\nvoc_anchors = np.array(\n    [[1.08, 1.19], [3.42, 4.41], [6.63, 11.38], [9.42, 5.11], [16.62, 10.52]])\n\nvoc_classes = [\n    \"aeroplane\", \"bicycle\", \"bird\", \"boat\", \"bottle\", \"bus\", \"car\", \"cat\",\n    \"chair\", \"cow\", \"diningtable\", \"dog\", \"horse\", \"motorbike\", \"person\",\n    \"pottedplant\", \"sheep\", \"sofa\", \"train\", \"tvmonitor\"\n]\n\n\ndef space_to_depth_x2(x):\n    \"\"\"Thin wrapper for Tensorflow space_to_depth with block_size=2.\"\"\"\n    # Import currently required to make Lambda work.\n    # See: https:\/\/github.com\/fchollet\/keras\/issues\/5088#issuecomment-273851273\n    import tensorflow as tf\n    return tf.space_to_depth(x, block_size=2)\n\n\ndef space_to_depth_x2_output_shape(input_shape):\n    \"\"\"Determine space_to_depth output shape for block_size=2.\n\n    Note: For Lambda with TensorFlow backend, output shape may not be needed.\n    \"\"\"\n    return (input_shape[0], input_shape[1] \/\/ 2, input_shape[2] \/\/ 2, 4 *\n            input_shape[3]) if input_shape[1] else (input_shape[0], None, None,\n                                                    4 * input_shape[3])\n\n\ndef yolo_body(inputs, num_anchors, num_classes):\n    \"\"\"Create YOLO_V2 model CNN body in Keras.\"\"\"\n    darknet = Model(inputs, darknet_body()(inputs))\n    conv20 = compose(\n        DarknetConv2D_BN_Leaky(1024, (3, 3)),\n        DarknetConv2D_BN_Leaky(1024, (3, 3)))(darknet.output)\n\n    conv13 = darknet.layers[43].output\n    conv21 = DarknetConv2D_BN_Leaky(64, (1, 1))(conv13)\n    # TODO: Allow Keras Lambda to use func arguments for output_shape?\n    conv21_reshaped = Lambda(\n        space_to_depth_x2,\n        output_shape=space_to_depth_x2_output_shape,\n        name='space_to_depth')(conv21)\n\n    x = concatenate([conv21_reshaped, conv20])\n    x = DarknetConv2D_BN_Leaky(1024, (3, 3))(x)\n    x = DarknetConv2D(num_anchors * (num_classes + 5), (1, 1))(x)\n    return Model(inputs, x)\n\n\ndef yolo_head(feats, anchors, num_classes):\n    \"\"\"Convert final layer features to bounding box parameters.\n\n    Parameters\n    ----------\n    feats : tensor\n        Final convolutional layer features.\n    anchors : array-like\n        Anchor box widths and heights.\n    num_classes : int\n        Number of target classes.\n\n    Returns\n    -------\n    box_xy : tensor\n        x, y box predictions adjusted by spatial location in conv layer.\n    box_wh : tensor\n        w, h box predictions adjusted by anchors and conv spatial resolution.\n    box_conf : tensor\n        Probability estimate for whether each box contains any object.\n    box_class_pred : tensor\n        Probability distribution estimate for each box over class labels.\n    \"\"\"\n    num_anchors = len(anchors)\n    # Reshape to batch, height, width, num_anchors, box_params.\n    anchors_tensor = K.reshape(K.variable(anchors), [1, 1, 1, num_anchors, 2])\n    # Static implementation for fixed models.\n    # TODO: Remove or add option for static implementation.\n    # _, conv_height, conv_width, _ = K.int_shape(feats)\n    # conv_dims = K.variable([conv_width, conv_height])\n\n    # Dynamic implementation of conv dims for fully convolutional model.\n    conv_dims = K.shape(feats)[1:3]  # assuming channels last\n    # In YOLO the height index is the inner most iteration.\n    conv_height_index = K.arange(0, stop=conv_dims[0])\n    conv_width_index = K.arange(0, stop=conv_dims[1])\n    conv_height_index = K.tile(conv_height_index, [conv_dims[1]])\n\n    # TODO: Repeat_elements and tf.split doesn't support dynamic splits.\n    # conv_width_index = K.repeat_elements(conv_width_index, conv_dims[1], axis=0)\n    conv_width_index = K.tile(K.expand_dims(conv_width_index, 0), [conv_dims[0], 1])\n    conv_width_index = K.flatten(K.transpose(conv_width_index))\n    conv_index = K.transpose(K.stack([conv_height_index, conv_width_index]))\n    conv_index = K.reshape(conv_index, [1, conv_dims[0], conv_dims[1], 1, 2])\n    conv_index = K.cast(conv_index, K.dtype(feats))\n    \n    feats = K.reshape(feats, [-1, conv_dims[0], conv_dims[1], num_anchors, num_classes + 5])\n    conv_dims = K.cast(K.reshape(conv_dims, [1, 1, 1, 1, 2]), K.dtype(feats))\n\n    # Static generation of conv_index:\n    # conv_index = np.array([_ for _ in np.ndindex(conv_width, conv_height)])\n    # conv_index = conv_index[:, [1, 0]]  # swap columns for YOLO ordering.\n    # conv_index = K.variable(\n    #     conv_index.reshape(1, conv_height, conv_width, 1, 2))\n    # feats = Reshape(\n    #     (conv_dims[0], conv_dims[1], num_anchors, num_classes + 5))(feats)\n\n    box_confidence = K.sigmoid(feats[..., 4:5])\n    box_xy = K.sigmoid(feats[..., :2])\n    box_wh = K.exp(feats[..., 2:4])\n    box_class_probs = K.softmax(feats[..., 5:])\n\n    # Adjust preditions to each spatial grid point and anchor size.\n    # Note: YOLO iterates over height index before width index.\n    box_xy = (box_xy + conv_index) \/ conv_dims\n    box_wh = box_wh * anchors_tensor \/ conv_dims\n\n    return box_confidence, box_xy, box_wh, box_class_probs\n\n\ndef yolo_boxes_to_corners(box_xy, box_wh):\n    \"\"\"Convert YOLO box predictions to bounding box corners.\"\"\"\n    box_mins = box_xy - (box_wh \/ 2.)\n    box_maxes = box_xy + (box_wh \/ 2.)\n\n    return K.concatenate([\n        box_mins[..., 1:2],  # y_min\n        box_mins[..., 0:1],  # x_min\n        box_maxes[..., 1:2],  # y_max\n        box_maxes[..., 0:1]  # x_max\n    ])\n\n\ndef yolo_loss(args,\n              anchors,\n              num_classes,\n              rescore_confidence=False,\n              print_loss=False):\n    \"\"\"YOLO localization loss function.\n\n    Parameters\n    ----------\n    yolo_output : tensor\n        Final convolutional layer features.\n\n    true_boxes : tensor\n        Ground truth boxes tensor with shape [batch, num_true_boxes, 5]\n        containing box x_center, y_center, width, height, and class.\n\n    detectors_mask : array\n        0\/1 mask for detector positions where there is a matching ground truth.\n\n    matching_true_boxes : array\n        Corresponding ground truth boxes for positive detector positions.\n        Already adjusted for conv height and width.\n\n    anchors : tensor\n        Anchor boxes for model.\n\n    num_classes : int\n        Number of object classes.\n\n    rescore_confidence : bool, default=False\n        If true then set confidence target to IOU of best predicted box with\n        the closest matching ground truth box.\n\n    print_loss : bool, default=False\n        If True then use a tf.Print() to print the loss components.\n\n    Returns\n    -------\n    mean_loss : float\n        mean localization loss across minibatch\n    \"\"\"\n    (yolo_output, true_boxes, detectors_mask, matching_true_boxes) = args\n    num_anchors = len(anchors)\n    object_scale = 5\n    no_object_scale = 1\n    class_scale = 1\n    coordinates_scale = 1\n    pred_xy, pred_wh, pred_confidence, pred_class_prob = yolo_head(\n        yolo_output, anchors, num_classes)\n\n    # Unadjusted box predictions for loss.\n    # TODO: Remove extra computation shared with yolo_head.\n    yolo_output_shape = K.shape(yolo_output)\n    feats = K.reshape(yolo_output, [\n        -1, yolo_output_shape[1], yolo_output_shape[2], num_anchors,\n        num_classes + 5\n    ])\n    pred_boxes = K.concatenate(\n        (K.sigmoid(feats[..., 0:2]), feats[..., 2:4]), axis=-1)\n\n    # TODO: Adjust predictions by image width\/height for non-square images?\n    # IOUs may be off due to different aspect ratio.\n\n    # Expand pred x,y,w,h to allow comparison with ground truth.\n    # batch, conv_height, conv_width, num_anchors, num_true_boxes, box_params\n    pred_xy = K.expand_dims(pred_xy, 4)\n    pred_wh = K.expand_dims(pred_wh, 4)\n\n    pred_wh_half = pred_wh \/ 2.\n    pred_mins = pred_xy - pred_wh_half\n    pred_maxes = pred_xy + pred_wh_half\n\n    true_boxes_shape = K.shape(true_boxes)\n\n    # batch, conv_height, conv_width, num_anchors, num_true_boxes, box_params\n    true_boxes = K.reshape(true_boxes, [\n        true_boxes_shape[0], 1, 1, 1, true_boxes_shape[1], true_boxes_shape[2]\n    ])\n    true_xy = true_boxes[..., 0:2]\n    true_wh = true_boxes[..., 2:4]\n\n    # Find IOU of each predicted box with each ground truth box.\n    true_wh_half = true_wh \/ 2.\n    true_mins = true_xy - true_wh_half\n    true_maxes = true_xy + true_wh_half\n\n    intersect_mins = K.maximum(pred_mins, true_mins)\n    intersect_maxes = K.minimum(pred_maxes, true_maxes)\n    intersect_wh = K.maximum(intersect_maxes - intersect_mins, 0.)\n    intersect_areas = intersect_wh[..., 0] * intersect_wh[..., 1]\n\n    pred_areas = pred_wh[..., 0] * pred_wh[..., 1]\n    true_areas = true_wh[..., 0] * true_wh[..., 1]\n\n    union_areas = pred_areas + true_areas - intersect_areas\n    iou_scores = intersect_areas \/ union_areas\n\n    # Best IOUs for each location.\n    best_ious = K.max(iou_scores, axis=4)  # Best IOU scores.\n    best_ious = K.expand_dims(best_ious)\n\n    # A detector has found an object if IOU > thresh for some true box.\n    object_detections = K.cast(best_ious > 0.6, K.dtype(best_ious))\n\n    # TODO: Darknet region training includes extra coordinate loss for early\n    # training steps to encourage predictions to match anchor priors.\n\n    # Determine confidence weights from object and no_object weights.\n    # NOTE: YOLO does not use binary cross-entropy here.\n    no_object_weights = (no_object_scale * (1 - object_detections) *\n                         (1 - detectors_mask))\n    no_objects_loss = no_object_weights * K.square(-pred_confidence)\n\n    if rescore_confidence:\n        objects_loss = (object_scale * detectors_mask *\n                        K.square(best_ious - pred_confidence))\n    else:\n        objects_loss = (object_scale * detectors_mask *\n                        K.square(1 - pred_confidence))\n    confidence_loss = objects_loss + no_objects_loss\n\n    # Classification loss for matching detections.\n    # NOTE: YOLO does not use categorical cross-entropy loss here.\n    matching_classes = K.cast(matching_true_boxes[..., 4], 'int32')\n    matching_classes = K.one_hot(matching_classes, num_classes)\n    classification_loss = (class_scale * detectors_mask *\n                           K.square(matching_classes - pred_class_prob))\n\n    # Coordinate loss for matching detection boxes.\n    matching_boxes = matching_true_boxes[..., 0:4]\n    coordinates_loss = (coordinates_scale * detectors_mask *\n                        K.square(matching_boxes - pred_boxes))\n\n    confidence_loss_sum = K.sum(confidence_loss)\n    classification_loss_sum = K.sum(classification_loss)\n    coordinates_loss_sum = K.sum(coordinates_loss)\n    total_loss = 0.5 * (\n        confidence_loss_sum + classification_loss_sum + coordinates_loss_sum)\n    if print_loss:\n        total_loss = tf.Print(\n            total_loss, [\n                total_loss, confidence_loss_sum, classification_loss_sum,\n                coordinates_loss_sum\n            ],\n            message='yolo_loss, conf_loss, class_loss, box_coord_loss:')\n\n    return total_loss\n\n\ndef yolo(inputs, anchors, num_classes):\n    \"\"\"Generate a complete YOLO_v2 localization model.\"\"\"\n    num_anchors = len(anchors)\n    body = yolo_body(inputs, num_anchors, num_classes)\n    outputs = yolo_head(body.output, anchors, num_classes)\n    return outputs\n\n\ndef yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold=.6):\n    \"\"\"Filter YOLO boxes based on object and class confidence.\"\"\"\n\n    box_scores = box_confidence * box_class_probs\n    box_classes = K.argmax(box_scores, axis=-1)\n    box_class_scores = K.max(box_scores, axis=-1)\n    prediction_mask = box_class_scores >= threshold\n\n    # TODO: Expose tf.boolean_mask to Keras backend?\n    boxes = tf.boolean_mask(boxes, prediction_mask)\n    scores = tf.boolean_mask(box_class_scores, prediction_mask)\n    classes = tf.boolean_mask(box_classes, prediction_mask)\n\n    return boxes, scores, classes\n\n\ndef yolo_eval(yolo_outputs,\n              image_shape,\n              max_boxes=10,\n              score_threshold=.6,\n              iou_threshold=.5):\n    \"\"\"Evaluate YOLO model on given input batch and return filtered boxes.\"\"\"\n    box_confidence, box_xy, box_wh, box_class_probs = yolo_outputs\n    boxes = yolo_boxes_to_corners(box_xy, box_wh)\n    boxes, scores, classes = yolo_filter_boxes(\n        box_confidence, boxes, box_class_probs, threshold=score_threshold)\n    \n    # Scale boxes back to original image shape.\n    height = image_shape[0]\n    width = image_shape[1]\n    image_dims = K.stack([height, width, height, width])\n    image_dims = K.reshape(image_dims, [1, 4])\n    boxes = boxes * image_dims\n\n    # TODO: Something must be done about this ugly hack!\n    max_boxes_tensor = K.variable(max_boxes, dtype='int32')\n    K.get_session().run(tf.variables_initializer([max_boxes_tensor]))\n    nms_index = tf.image.non_max_suppression(\n        boxes, scores, max_boxes_tensor, iou_threshold=iou_threshold)\n    boxes = K.gather(boxes, nms_index)\n    scores = K.gather(scores, nms_index)\n    classes = K.gather(classes, nms_index)\n    \n    return boxes, scores, classes\n\n\ndef preprocess_true_boxes(true_boxes, anchors, image_size):\n    \"\"\"Find detector in YOLO where ground truth box should appear.\n\n    Parameters\n    ----------\n    true_boxes : array\n        List of ground truth boxes in form of relative x, y, w, h, class.\n        Relative coordinates are in the range [0, 1] indicating a percentage\n        of the original image dimensions.\n    anchors : array\n        List of anchors in form of w, h.\n        Anchors are assumed to be in the range [0, conv_size] where conv_size\n        is the spatial dimension of the final convolutional features.\n    image_size : array-like\n        List of image dimensions in form of h, w in pixels.\n\n    Returns\n    -------\n    detectors_mask : array\n        0\/1 mask for detectors in [conv_height, conv_width, num_anchors, 1]\n        that should be compared with a matching ground truth box.\n    matching_true_boxes: array\n        Same shape as detectors_mask with the corresponding ground truth box\n        adjusted for comparison with predicted parameters at training time.\n    \"\"\"\n    height, width = image_size\n    num_anchors = len(anchors)\n    # Downsampling factor of 5x 2-stride max_pools == 32.\n    # TODO: Remove hardcoding of downscaling calculations.\n    assert height % 32 == 0, 'Image sizes in YOLO_v2 must be multiples of 32.'\n    assert width % 32 == 0, 'Image sizes in YOLO_v2 must be multiples of 32.'\n    conv_height = height \/\/ 32\n    conv_width = width \/\/ 32\n    num_box_params = true_boxes.shape[1]\n    detectors_mask = np.zeros(\n        (conv_height, conv_width, num_anchors, 1), dtype=np.float32)\n    matching_true_boxes = np.zeros(\n        (conv_height, conv_width, num_anchors, num_box_params),\n        dtype=np.float32)\n\n    for box in true_boxes:\n        # scale box to convolutional feature spatial dimensions\n        box_class = box[4:5]\n        box = box[0:4] * np.array(\n            [conv_width, conv_height, conv_width, conv_height])\n        i = np.floor(box[1]).astype('int')\n        j = min(np.floor(box[0]).astype('int'),1)\n        best_iou = 0\n        best_anchor = 0\n                \n        for k, anchor in enumerate(anchors):\n            # Find IOU between box shifted to origin and anchor box.\n            box_maxes = box[2:4] \/ 2.\n            box_mins = -box_maxes\n            anchor_maxes = (anchor \/ 2.)\n            anchor_mins = -anchor_maxes\n\n            intersect_mins = np.maximum(box_mins, anchor_mins)\n            intersect_maxes = np.minimum(box_maxes, anchor_maxes)\n            intersect_wh = np.maximum(intersect_maxes - intersect_mins, 0.)\n            intersect_area = intersect_wh[0] * intersect_wh[1]\n            box_area = box[2] * box[3]\n            anchor_area = anchor[0] * anchor[1]\n            iou = intersect_area \/ (box_area + anchor_area - intersect_area)\n            if iou > best_iou:\n                best_iou = iou\n                best_anchor = k\n                \n        if best_iou > 0:\n            detectors_mask[i, j, best_anchor] = 1\n            adjusted_box = np.array(\n                [\n                    box[0] - j, box[1] - i,\n                    np.log(box[2] \/ anchors[best_anchor][0]),\n                    np.log(box[3] \/ anchors[best_anchor][1]), box_class\n                ],\n                dtype=np.float32)\n            matching_true_boxes[i, j, best_anchor] = adjusted_box\n    return detectors_mask, matching_true_boxes\n","1bad2fe4":"import os\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport scipy.io\nimport scipy.misc\nimport numpy as np\nimport pandas as pd\nimport PIL\nimport tensorflow as tf\nfrom skimage.transform import resize\nfrom keras import backend as K\nfrom keras.layers import Input, Lambda, Conv2D\nfrom keras.models import load_model, Model\n\n\n%matplotlib inline","779be8b9":"def yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = .6):\n    box_scores = box_confidence*box_class_probs\n    box_classes = K.argmax(box_scores,-1)\n    box_class_scores = K.max(box_scores,-1)\n    filtering_mask = box_class_scores>threshold\n    scores = tf.boolean_mask(box_class_scores,filtering_mask)\n    boxes = tf.boolean_mask(boxes,filtering_mask)\n    classes = tf.boolean_mask(box_classes,filtering_mask)\n \n    return scores, boxes, classes","0a932aae":"def iou(box1, box2):\n    xi1 = max(box1[0],box2[0])\n    yi1 = max(box1[1],box2[1])\n    xi2 = min(box1[2],box2[2])\n    yi2 = min(box1[3],box2[3])\n    inter_area = (yi2-yi1)*(xi2-xi1)\n    box1_area = (box1[3]-box1[1])*(box1[2]-box1[0])\n    box2_area = (box2[3]-box2[1])*(box2[2]-box2[0])\n    union_area = box1_area+box2_area-inter_area\n    iou = inter_area\/union_area\n \n    return iou","3c6abe86":"def yolo_non_max_suppression(scores, boxes, classes, max_boxes = 10, iou_threshold = 0.5):\n    max_boxes_tensor = K.variable(max_boxes, dtype='int32')\n    K.get_session().run(tf.variables_initializer([max_boxes_tensor]))\n    nms_indices = tf.image.non_max_suppression(boxes,scores,max_boxes,iou_threshold)\n    scores = K.gather(scores,nms_indices)\n    boxes = K.gather(boxes,nms_indices)\n    classes = K.gather(classes,nms_indices)\n\n    return scores, boxes, classes","9b7fd3c4":"yolo_outputs = (tf.random_normal([19, 19, 5, 1], mean=1, stddev=4, seed = 1),\n                   tf.random_normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1),\n                   tf.random_normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1),\n                   tf.random_normal([19, 19, 5, 80], mean=1, stddev=4, seed = 1))","b1fc4ee4":"def yolo_eval(yolo_outputs, image_shape = (720., 1280.), max_boxes=10, score_threshold=.6, iou_threshold=.5):\n    box_confidence, box_xy, box_wh, box_class_probs = yolo_outputs\n    boxes = yolo_boxes_to_corners(box_xy, box_wh)\n    scores, boxes, classes = yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = score_threshold)\n    boxes = scale_boxes(boxes, image_shape)\n    scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes, max_boxes, iou_threshold)\n\n    return scores, boxes, classes","b5962a3a":"scores, boxes, classes = yolo_eval(yolo_outputs)","3645b6ef":"sess = K.get_session()\nclass_names = read_classes(\"..\/input\/yoloh5file\/coco_classes.txt\")\nanchors = read_anchors(\"..\/input\/yoloh5file\/yolo_anchors.txt\")\n\nyolo_model = load_model(\"..\/input\/yoloh5file\/yolo.h5\")","a56a6c0d":"yolo_model.output","1a8b0d23":"yolo_outputs = yolo_head(yolo_model.output, anchors, len(class_names))","c2717c26":"def predict(sess, image_file):\n    image, image_data = preprocess_image( image_file, model_image_size = (608, 608))\n    out_scores, out_boxes, out_classes = sess.run([scores, boxes, classes], feed_dict={yolo_model.input: image_data, K.learning_phase(): 0})\n    #print('Found {} boxes for {}'.format(len(out_boxes), image_file))\n    # Generate colors for drawing bounding boxes.\n    colors = generate_colors(class_names)\n    # Draw bounding boxes on the image file\n    results = draw_boxes(image, out_scores, out_boxes, out_classes, class_names, colors)\n    # Save the predicted bounding box on the image\n    #image.save(os.path.join(\"out\", image_file), quality=90)\n    # Display the results in the notebook\n    #output_image = scipy.misc.imread(os.path.join(\"out\", image_file))\n    return out_scores, out_boxes, out_classes,image,results","01d9875d":"def campare2coordinate2(cor1,cor2,thresh):\n    distance = math.sqrt(sum([(a - b)**2 for a, b in zip(cor1, cor2)]))\n    \n    if(distance<=thresh):\n        \n        return True\n    else:\n        return False\ndef distance(cor1,cor2):\n    return math.sqrt(sum([(a - b)**2 for a, b in zip(cor1, cor2)]))\ndef findclosestcar(i,image2,thresh=132):\n    temp = {}\n    for j in image2:\n        if(campare2coordinate2(i,j,thresh)==True):\n            temp.update({distance(i,j):j})\n            #temp1.append(distance(i,j))\n    if(len(temp)!=0):\n        minkey = sorted(temp)[0]\n        return temp[minkey]\n    else:\n        cor = []\n        return cor\n   \n  ","9416a436":"def findvalue(i,dic):\n    for a,b in dic.items():\n        if (i == a):\n            return True\n        \n    return False\n            \n    ","5b0f5367":"globalcar = []\ndef add2dic(te,list2,list1):\n    t= ''\n    for i in list1:\n        t = t + ' ' + str(i)\n\n    te[t] = list2\n    return t\ndef campare2coordinate2(cor1,cor2,thresh):\n    distance = math.sqrt(sum([(a - b)**2 for a, b in zip(cor1, cor2)]))\n    \n    if(distance<=thresh):\n        \n        return True\n    else:\n        return False\ndef distance(cor1,cor2):\n    return math.sqrt(sum([(a - b)**2 for a, b in zip(cor1, cor2)]))\ndef findclosestcar(i,image2,thresh=132):\n    temp = {}\n    for j in image2:\n        if(campare2coordinate2(i,j,thresh)==True):\n            temp.update({distance(i,j):j})\n            #temp1.append(distance(i,j))\n    if(len(temp)!=0):\n        minkey = sorted(temp)[0]\n        return temp[minkey]\n    else:\n        cor = []\n        return cor\ndef campare2coordinate(cor1,cor2):\n    return (abs(cor1[0]-cor2[0])+abs(cor1[1]-cor2[1])),cor2\nimport math\n'''def localcars2(image1,image2,thresh):\n    dic = {}\n    for i in range(0,len(image1)):\n        for j in range(0,len(image2)):\n            if(campare2coordinate2(image1[i],image2[j],thresh) is True):\n                add2dic(dic,image1[i],image2[j])\n                #del image1[i]\n                #del image2[j]\n    return dic'''\ndef localcars2(image1,image2,thresh):\n    print('localcars2 func')\n    print(image1,image2)\n    dic = {}\n    memory_obj = image2\n    if(len(image2)!=0):\n        for i in image1:\n            cor = findclosestcar(i,memory_obj)\n            if(len(cor)!=0):\n                add2dic(dic,i,cor)\n                memory_obj.remove(cor)\n    return dic\n                \n                \n                        \n                       \n                       \n            \ndef add2dic(te,list2,list1):\n    t= ''\n    for i in list1:\n        t = t + ' ' + str(i)\n\n    te[t] = list2\n    return t\ndef findhighfromdic(dic):\n    ln = list(dic.values())\n    num = []\n    for i in ln:\n        num.append(int(i[-1]))\n    return max(num)\ndef drawuniquecars(image1,image2,first,globalcars,traffic_count):\n    if first==True:\n        traffic_count = 1\n        globalcars = {}\n   \n        count = 1\n        for i in image1:\n            tst = ''\n            for term in i:\n                tst = tst + ' ' + str(term)\n            globalcars[tst] = 'car'+str(count)\n            count += 1\n   \n    dic = localcars2(image1.copy(),image2.copy(),132)\n    print(dic)\n    countcars = findhighfromdic(globalcars)\n    \n\n    for i in image2:\n        temp = ''\n        for term in i:\n            temp = temp + ' ' + str(term)\n        if(findvalue(temp,dic)==True):\n            array = dic.get(temp)\n            temp2 = ''\n            for term in array:\n                temp2 = temp2 + ' ' + str(term)\n            \n            car = globalcars.get(temp2)\n           \n            globalcars[temp] = car\n        elif(findvalue(temp,dic)==False):\n            countcars = countcars+1\n            globalcars[temp] = 'car' + str(countcars)\n        '''elif(bool(dic)==False): \n            countcars = countcars+1\n            globalcars[temp] = 'car' + str(countcars)'''\n    return globalcars,traffic_count\n\n        \n        \n            \n    \n    \n                ","4a601b32":"def midpoint(args):\n    x,y,a,b =args\n    return int(round((x+a)\/2)),int(round((y+b)\/2))","e5413259":"def conv(tup):\n    return (int(tup[0]),int(tup[1]))","4a532c57":"def conv2coor(s):\n    coor = s.split(' ')\n    return int(coor[1][:]),int(coor[2][:])\n\n\n    \n    \n    ","62046ad4":"def globalarraymodify(gc,newcor1):\n    length = len(newcor1)\n    temp = gc.copy()\n    for i in range(0,length):\n       del gc[list(temp.keys())[i]]\n    return gc\n\n  \ng = {' 242.0 530.0': 'car1', ' 232.0 532.0': 'car1', ' 676.0 535.0': 'car2'}\nglobalarraymodify(g,[1,2])","4222274c":"results1 = [['car 0.69',1,2],['traffic 0.3',19,22]]\ncarresult = []\nfor i in results1:\n        if 'car' in i[0]:\n            carresult.append(i)\ncarresult","d1d677a0":"def fill_list(dic):\n    ln = list(dic.keys())\n    newln = []\n    for i in ln:\n        newln.append(conv2coor(i))\n    return newln","8dd256d3":"def conv2dicformat(coor):\n    tst = ''\n    for term in coor:\n        tst = tst + ' ' + str(term)\n    return tst","e0e2aa8e":"def result(img,img2,globalcars,traffic_count,resultlist,first=False):   \n    #img = plt.imread('..\/input\/testingtracking\/fc2_save_2018-09-05-163418-0423.bmp')\n    #img2 = plt.imread('..\/input\/testingtracking1\/fc2_save_2018-09-05-163418-0422.bmp')\n    image_shape = float(img.shape[0]), float(img.shape[1])\n    scores, boxes, classes = yolo_eval(yolo_outputs, image_shape)\n    out_scores, out_boxes, out_classes,image1,results1 = predict(sess, img)\n    out_scores, out_boxes, out_classes,image2,results2 = predict(sess, img2)\n    \n    img1 = np.asarray(image1) \n    img2 = np.asarray(image2)\n        \n    cor1 = []\n    \n    cor2 = []\n    newcor1 = []\n    newcor2 = []\n    carresult1 = []\n    carresult2 = []\n    traffic1 = []\n    traffic2 = []\n    \n    for i in results1:\n        if 'car' in i[0]:\n            carresult1.append(i)\n        elif 'traffic' in i[0]:\n            traffic1.append(i)\n            \n    for i in results2:\n        if 'car' in i[0]:\n            carresult2.append(i)\n        elif 'traffic' in i[0]:\n            traffic2.append(i)\n    if (len(traffic1) >=1 or len(traffic2) >=1 ):\n        if(len(traffic1)>=1 and len(traffic2)==0 and first==True):\n            traffic_count += 1\n        if(len(traffic1)==0 and len(traffic2)>=1):\n            traffic_count += 1\n        if(first==True and len(traffic1)>=1):\n            resultlist.append(['trafficlight'+str(traffic_count),conv(traffic1[0][1:])])\n            cv2.putText(img1,'trafficlight'+str(traffic_count),conv(traffic1[0][1:]) , cv2.FONT_HERSHEY_SIMPLEX,  1,  255, 2, cv2.LINE_AA)\n            resultlist.append(['trafficlight'+str(traffic_count),conv(traffic1[0][1:])])\n        if(first==True and len(traffic2)>=1):\n            cv2.putText(img1,'trafficlight'+str(traffic_count),conv(traffic2[0][1:]) , cv2.FONT_HERSHEY_SIMPLEX,  1,  255, 2, cv2.LINE_AA)\n            resultlist.append(['trafficlight'+str(traffic_count),conv(traffic2[0][1:])])\n            \n        if(len(traffic2)>=1 and first==False):\n            cv2.putText(img2,'trafficlight'+str(traffic_count),conv(traffic2[0][1:]) , cv2.FONT_HERSHEY_SIMPLEX,  1,  255, 2, cv2.LINE_AA)\n            resultlist.append(['trafficlight'+str(traffic_count),conv(traffic2[0][1:])])\n    if(len(carresult1)>0 or len(carresult2)>0):\n        #return img,img2,globalcars,resultlist\n        \n        for i in carresult1:\n            cor1.append(i[1:])\n            #cor2.append(j[1:])\n        for j in carresult2:\n            #cor1.append(i[1:])\n            cor2.append(j[1:])\n\n        for i in cor1:\n            newcor1.append(midpoint(i))\n            #newcor2.append(midpoint(j))\n        for j in cor2:\n\n        #newcor1.append(midpoint(i))\n            newcor2.append(midpoint(j))\n        if(len(carresult1)==0):\n            newcor1 = fill_list(globalcars)\n        print(newcor1,newcor2)\n        globalcars,dic = drawuniquecars(newcor1,newcor2,first,globalcars,traffic_count)\n        cars_in_1 = len(results1)\n\n\n\n        listofimage1values = []\n        listofimage2values = []\n        \n\n        #print(cor1)\n        #print(cor1)\n        '''if(len(newcor1)<len(newcor2)):\n            count = len(newcor1) \n            for i in range(0,len(newcor2)):\n                tst = ''\n                for term in newcor2[i]:\n                    tst = tst + ' ' + str(term)\n                count  += 1 \n                globalcars[tst] = 'car' + str(count)'''\n\n        '''for i in range(0,cars_in_1):\n            #listofimage1values.append(list(globalcars.values())[i])\n            a,b = conv2coor(list(globalcars.keys())[i])\n            cv2.putText(img1,list(globalcars.values())[i],(a,b) , cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)\n        for i in range(cars_in_1,len(globalcars)):\n            #listofimage2values.append(list(globalcars.values())[i])\n            a,b = conv2coor(list(globalcars.keys())[i])\n            cv2.putText(img2,list(globalcars.values())[i],(a,b) , cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)\n        #print(listofimage1values)\n        #print(globalcars)'''\n\n\n        if(len(carresult1)>0 and first==True):\n            temp = []\n\n            for i in newcor1:\n                cv2.putText(img1,globalcars.get(conv2dicformat(i)),conv(i) , cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)\n                temp.append(globalcars.get(conv2dicformat(i)))\n            resultlist.append([temp,carresult1])\n        if(len(carresult2)>0):\n            temp = []\n            for i in newcor2:\n                temp.append(globalcars.get(conv2dicformat(i)))\n                cv2.putText(img2,globalcars.get(conv2dicformat(i)),conv(i) , cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)\n            resultlist.append([temp, carresult2])\n\n\n\n\n\n\n        '''for i in range(0,len(newcor1)):\n            cv2.putText(img1,listofimage1values[i],conv(newcor1[i]) , cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)\n        for i in range(0,len(newcor2)):\n            cv2.putText(img2,listofimage2values[i],conv(newcor2[i]) ,  cv2.FONT_HERSHEY_SIMPLEX,  2,  255, 3, cv2.LINE_AA)'''\n        '''if(len(results2)>0):\n            newgc = globalarraymodify(globalcars,newcor1)\n        else:\n            newgc = globalcars'''\n\n   \n    return img1,img2,globalcars,resultlist,traffic_count","a482524c":"listn = []\nfor i,j,k in os.walk('..\/input\/testing100images2\/test\/test\/'):\n    for filename in k:\n        print(i)\n        listn.append(plt.imread('..\/input\/testing100images2\/test\/test\/'+filename))","9b30fd35":"len(listn)","38b5a339":"img = listn[0]\nimage_shape = float(img.shape[0]), float(img.shape[1])\nscores, boxes, classes = yolo_eval(yolo_outputs, image_shape)\nout_scores, out_boxes, out_classes,image,results = predict(sess, img)\n","f9b8ff31":"#listn = [img,traffic,img,traffic,img,traffic,traffic,traffic]","21584f42":"results","4c960fa7":"import requests\nf = open('0000001.jpg','wb')\nf.write(requests.get('https:\/\/storage.googleapis.com\/proudcity\/sanrafaelca\/uploads\/2018\/05\/traffic-signal.jpg').content)\nf.close()","f32fb650":"listn = listn[:6]","8b052693":"len(listn)","7c9199da":"count= 0\ngc = {}\nfr = []\ntc = 0\nresultlist = []\nfor i in range(0,len(listn)-1):\n    if i==0:\n        globalcars = {}\n        x,y,gc,resultlist,tc = result(listn[i],listn[i+1],globalcars,tc,resultlist,first=True)\n        fr.append(x)\n        fr.append(y)\n    else:\n        x,y,gc,resultlist,tc = result(listn[i],listn[i+1],gc,tc,resultlist,first=False)\n        fr.append(y)\n        \n        \n        \n        ","a5eacc43":"resultlist","81a59837":"def to_csv(listr):\n    label = []\n    coor = []\n    for i in listr:\n        label.append(i[0])\n        tcoor = []\n        for j in i[1]:\n            mid = int(abs(j[1]-j[3])\/2)\n            tcoor.append([mid,j[2]])\n        coor.append(tcoor)\n    data = {'label':label,'coordinates':coor}\n    df = pd.DataFrame(data=data,columns=['label','coordinates'])\n    \n    return df.to_csv('.\/data.csv',index=False)\n            ","9c2f3000":"print(to_csv(resultlist))","ceb806b7":"coor = pd.read_csv('.\/data.csv')\ncoor","98e6d49f":"len(listn)","0fb065a7":"for i in listn:\n    plt.imshow(i)\n    plt.show()\n    ","29cb0ff9":"for i in fr:\n    plt.imshow(i)\n    plt.show()","c1d14c6a":"img = plt.imread('..\/input\/finaldataset\/create\/create\/image (1).bmp')\nimage_shape = float(img.shape[0]), float(img.shape[1])\nscores, boxes, classes = yolo_eval(yolo_outputs, image_shape)\nlistn = []\nresult = []\nfilen = []\nfor i,j,k in os.walk('..\/input\/finaldataset\/create\/create\/'):\n    for filename in k:\n        img = plt.imread('..\/input\/finaldataset\/create\/create\/'+filename)\n        out_scores, out_boxes, out_classes,image,results = predict(sess, img)\n        temp1 = \"\"\n        for i in results:\n            temp = \"\"\n            for j in i:\n                temp = temp + str(j) + \" \"\n            temp = temp + '\\n'\n            temp1 += temp\n        \n        '''print(filename[:-3] + 'txt')   \n        f = open('.\/'+filename[:-3] + 'txt','w+')\n        f.write(temp1)'''\n        filen.append(filename)\n        result.append(temp1)","80243944":"filen","db2696f2":"with open('download.txt', 'w') as f:\n    for item in result:\n        f.write(\"%s\\n\" % item)\nf.close()\nwith open('name.txt', 'w') as a:\n    for item in filen:\n        a.write(\"%s\\n\" % item)\na.close()","0928c76f":"predicted = result.copy()","deba6891":"import random\ntruth = [random.randint(1,100) for i in range(25) ]","8e55cf82":"for video testing!","671e6bac":"To test images for yolo model!****","f5a73097":"> **To initilize shape and boxes for the model!!**"}}