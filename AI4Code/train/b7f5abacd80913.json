{"cell_type":{"30bcfc15":"code","f7ee9aa2":"code","74a1a7e0":"code","02997158":"code","b67f3213":"code","8d6b8228":"code","e96d269e":"code","5a3c18f2":"code","058f51fb":"code","4b7acd83":"code","762fbb63":"code","11dc8f70":"code","15642c71":"code","d0113430":"code","8fa9c22b":"code","abb5e469":"code","2df3c9be":"code","bf5df4d6":"markdown","9122f8fb":"markdown","07ebb1fe":"markdown","91ce52b7":"markdown","c13d1f2d":"markdown","cd3d8a9a":"markdown","1e7a3f6e":"markdown","daf2742c":"markdown","accc03e7":"markdown","ac2e5c53":"markdown","2776cbd0":"markdown","cea387f4":"markdown","e6127960":"markdown"},"source":{"30bcfc15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport tensorflow as tf\nfrom tensorflow.keras import losses, layers\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7ee9aa2":"\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","74a1a7e0":"def show_num(img,lbl):\n    print(\"Label \", lbl)\n    plt.imshow(img.reshape((28,28)))","02997158":"X = train.iloc[:,1:].to_numpy()\ny = train.iloc[:,0]","b67f3213":"i = np.random.randint(train.shape[0])\nshow_num(X[i],y[i])","8d6b8228":"X = X.reshape(-1,28,28)\nX = np.expand_dims(X,axis=-1)","e96d269e":"X.shape","5a3c18f2":"model = tf.keras.Sequential([\n    layers.Conv2D(32,3,activation='relu',input_shape=(28,28,1)),\n    layers.MaxPool2D(2),\n    layers.Conv2D(64,3,activation='relu'),\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(512,activation='relu'),\n    layers.Dense(10,activation='softmax')\n])\n\nmodel.compile(optimizer='adam',loss=losses.SparseCategoricalCrossentropy(),metrics=['accuracy'])","058f51fb":"model.summary()","4b7acd83":"tf.keras.utils.plot_model(model)","762fbb63":"xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=.2,random_state=0)","11dc8f70":"epochs = 10\nbatch = 32\n\nmodel.fit(xtrain,ytrain,epochs=epochs,batch_size=batch,validation_data=(xtest,ytest))","15642c71":"xtest = np.expand_dims(test.to_numpy().reshape((-1,28,28)),axis=-1)","d0113430":"xtest.shape","8fa9c22b":"pred = model.predict_classes(xtest)","abb5e469":"sub['Label'] = pred","2df3c9be":"sub.to_csv(\"submission.csv\",index=False)","bf5df4d6":"\nBasic example to start with TF2 for Digit Recognition with CNN model. \n\nHope it will be usefull for beginners !\n\nPlease upvote if you found useful. ","9122f8fb":"# **CNN Model Architecture**","07ebb1fe":"Visualize Random data and its Label","91ce52b7":"By default the data are presented as a single row data,\n\nWe are reshaping it into matrix data for CNN model. ","c13d1f2d":"# Helper Funtion to Visualize the data","cd3d8a9a":"**Visualize the Model **","1e7a3f6e":"# **Load Libraries**","daf2742c":"# **Load Data**","accc03e7":"Please share your thoughts ! ","ac2e5c53":"# **Training the model**","2776cbd0":"# Export the File for submission","cea387f4":"**Train Test Split**\n","e6127960":"# **Data and Label Split**"}}