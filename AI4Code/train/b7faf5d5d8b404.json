{"cell_type":{"4cc92ce6":"code","f944c069":"code","b58c6a73":"code","05475bc3":"code","b7622f8e":"code","7873a987":"code","4156bdf8":"code","47b19c94":"code","4fd04ca5":"code","31bc1d95":"code","c1cd816e":"code","349b37ab":"code","dc5e665e":"code","d6d5b8d6":"code","551b96a6":"code","3a0f3b3e":"code","39cc1d60":"code","20cc8a73":"code","71d4d52e":"markdown","6aadff28":"markdown","b284ff6e":"markdown","83eb5710":"markdown"},"source":{"4cc92ce6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nfrom collections import defaultdict\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f944c069":"train = pd.read_csv('\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\ntrain.head()","b58c6a73":"train.info()","05475bc3":"train_dir = '\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/train\/'\ntest_dir = '\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/test\/'","b7622f8e":"def getText(filenames, Dir=train_dir):\n    text_list = []\n    append = text_list.append\n    for filename in filenames:\n        file = pd.read_json(Dir+filename+'.json')\n        text = ' '.join(file['text'].values)\n        append(text)\n    return text_list","7873a987":"text_list = getText(train['Id'].values)","4156bdf8":"train['text'] = text_list","47b19c94":"train.head()","4fd04ca5":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower())","31bc1d95":"data_title = list(map(clean_text, train['dataset_title'].unique()))\ndata_label = list(map(clean_text, train['dataset_label'].unique()))\ncleaned_label = list(train['cleaned_label'].unique())","c1cd816e":"labels = set(data_title + data_label + cleaned_label)","349b37ab":"sample_submission = pd.read_csv('\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\nsample_submission.head()","dc5e665e":"subText = getText(sample_submission['Id'].values, test_dir)\nsample_submission['text'] = subText","d6d5b8d6":"mapping = dict()\nfor row in train.iterrows():\n    cleaned_label = row[1]['cleaned_label'].strip()\n    title = clean_text(row[1]['dataset_title']).strip()\n    dataSetLabel = clean_text(row[1]['dataset_label']).strip()\n    mapTitle = mapping.get(title, set())\n    mapTitle.add(cleaned_label)\n    mapping[title] = mapTitle\n    mapLabel = mapping.get(dataSetLabel, set())\n    mapLabel.add(cleaned_label)\n    mapping[dataSetLabel] = mapLabel\n    mapCleanedLabel = mapping.get(cleaned_label, set())\n    mapCleanedLabel.add(cleaned_label)\n    mapping[dataSetLabel] = mapLabel","551b96a6":"mapping","3a0f3b3e":"sample_submission.head()","39cc1d60":"strings = []\nfor text in sample_submission['text'].values:\n    text = clean_text(text)\n    predictString = set()\n    for label in labels:\n        if label in text:\n            for string in mapping[label.strip()]:\n                predictString.add(string)\n    predictString = \"|\".join(predictString)\n    strings.append(predictString)","20cc8a73":"sample_submission['PredictionString'] = strings\nsample_submission.drop(['text'], axis=1).to_csv(\"submission.csv\", index=False)","71d4d52e":"**Submission !!**","6aadff28":"**Combining the Existing Labels**","b284ff6e":"**Reading the training json files**","83eb5710":"**Matching the string from labels to the test text**"}}