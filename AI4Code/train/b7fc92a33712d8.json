{"cell_type":{"e19909cf":"code","a7cdc45b":"code","643a754d":"code","2c77d70e":"code","afe476ea":"code","6f81ff1f":"code","5de64dae":"code","fe27b5c5":"code","f824ac03":"code","59c852d0":"code","67c376c0":"code","063de9c3":"code","5b610717":"code","ab13abdf":"code","016ceb13":"code","a387dee6":"code","ab63192b":"code","8cc72d2f":"code","81d841a4":"code","6f77b946":"code","ec5878d6":"code","a68485d4":"code","bc226249":"code","273da096":"code","37cb539b":"code","7e22d377":"code","26a9cbab":"markdown","19c34099":"markdown","2a95e3ba":"markdown","851590d6":"markdown"},"source":{"e19909cf":"!pip install -U 'lightning-flash[image]'==0.5.0rc0 -q\n!pip install -U torchvision\n!pip install -U torchtext","a7cdc45b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nimport flash\nfrom flash.image import ImageClassificationData, ImageClassifier\n\nfrom pytorch_lightning.callbacks import ModelCheckpoint, EarlyStopping\nfrom pytorch_lightning.metrics import FBeta\nfrom pytorch_lightning.loggers import CSVLogger, TensorBoardLogger\n\n\nimport torch\nimport torchmetrics\nimport torchvision\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport os\nfrom glob import glob\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\n\nfrom PIL import Image\n\nfrom torchvision import transforms\nfrom pathlib import Path","643a754d":"data_dir = Path(\"\/kaggle\/input\/plant-pathology-2021-fgvc8\/\")","2c77d70e":"df = pd.read_csv(data_dir\/'train.csv')\ndf['label_org'] = df.labels.values\ndf.labels = df.labels.str.split()\n\ndf.head()","afe476ea":"# ref: Jirka\nimport itertools\nimport seaborn as sns\n\nlabels_all = list(itertools.chain(*[lbs.split(\" \") for lbs in df['label_org']]))\n\nax = sns.countplot(y=sorted(labels_all), orient='v')\nax.grid()","6f81ff1f":"BS = 32\nIMAGE_SIZE = 128","5de64dae":"# ref: Jirka\nfrom torchvision import transforms as T\n\nTRAIN_TRANSFORM = T.Compose([\n    T.Resize(256),\n    T.RandomPerspective(),\n    T.RandomResizedCrop(IMAGE_SIZE),\n    T.RandomHorizontalFlip(),\n    T.RandomVerticalFlip(),\n    T.ToTensor(),\n    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n])\n\nVALID_TRANSFORM = T.Compose([\n    T.Resize(256),\n    T.CenterCrop(IMAGE_SIZE),\n    T.ToTensor(),\n    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n])\n\nTEST_TRANSFORM = T.Compose([\n    T.Resize(256),\n    T.CenterCrop(IMAGE_SIZE),\n    T.ToTensor(),\n    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),\n])","fe27b5c5":"mlb = MultiLabelBinarizer(sparse_output=True)\nmlb = mlb.fit(df.labels)\ndef create_ohe(df, mlb):    \n    ohe = mlb.transform(df.labels)\n    ohe = pd.DataFrame.sparse.from_spmatrix(ohe, columns=mlb.classes_)\n    df = df.merge(ohe, left_index=True, right_index=True)\n    return df\ndf = create_ohe(df, mlb)\ndf = df.sample(frac=1, random_state=42).reset_index(drop=True)\ndf.head()","f824ac03":"split = 0.9\nfrac = int(split * len(df))\n\ntrain_data = df[:frac]\nval_data = df[frac:]\n\ntrain_data = train_data.sample(frac=1, random_state=42).reset_index(drop=True)\nval_data = val_data.sample(frac=1, random_state=42).reset_index(drop=True)","59c852d0":"class PlantDataset(Dataset):\n    def __init__(self, data, transformation, folder='train'):\n        self.data = data\n        self.transform = transformation\n        self.folder = folder\n    \n    def __len__(self): return len(self.data)\n    \n    def __getitem__(self, idx):\n        folder = self.folder\n        file = data_dir\/f\"{folder}_images\/{self.data.loc[idx, 'image']}\"\n        image = Image.open(file)\n        if self.transform:\n            image = self.transform(image)\n        labels = self.data.iloc[idx, 3:].to_numpy().astype(int)\n        return {\"input\": image, \"target\": labels}","67c376c0":"train_dataset = PlantDataset(train_data, TRAIN_TRANSFORM)\nval_dataset = PlantDataset(val_data, VALID_TRANSFORM)","063de9c3":"import multiprocessing as mproc\nimport pytorch_lightning as pl\n\nclass PlantPathologyDM(pl.LightningDataModule):\n\n    def __init__(\n        self,\n        train_dataset: Dataset = None,\n        val_dataset: Dataset = None,\n        batch_size: int = 64,\n        num_workers: int = None,\n    ):\n        super().__init__()\n        self.batch_size = batch_size\n        self.num_workers = num_workers if num_workers is not None else mproc.cpu_count()\n        self.train_dataset = train_dataset\n        self.valid_dataset = val_dataset\n\n    def prepare_data(self):\n        pass\n\n    @property\n    def num_classes(self) -> int:\n        return num_classes\n\n    \n    def train_dataloader(self):\n        return DataLoader(\n            self.train_dataset,\n            batch_size=self.batch_size,\n            num_workers=self.num_workers,\n            shuffle=True,\n            pin_memory=True\n        )\n\n    def val_dataloader(self):\n        return DataLoader(\n            self.valid_dataset,\n            batch_size=self.batch_size,\n            num_workers=self.num_workers,\n            shuffle=False,\n            pin_memory=True\n        )\n\n    def test_dataloader(self):\n        pass","5b610717":"dm = PlantPathologyDM(train_dataset, val_dataset)\n","ab13abdf":"# # quick view\n# fig = plt.figure(figsize=(3, 7))\n# for data in dm.train_dataloader():\n#     imgs = data[\"input\"]\n#     lbs = data[\"target\"]\n#     print(f'batch labels: {torch.sum(lbs, axis=0)}')\n#     print(f'image size: {imgs[0].shape}')\n#     for i in range(3):\n#         ax = fig.add_subplot(3, 1, i + 1, xticks=[], yticks=[])\n#         # print(np.rollaxis(imgs[i].numpy(), 0, 3).shape)\n#         ax.imshow(np.rollaxis(imgs[i].numpy(), 0, 3))\n#         ax.set_title(lbs[i])\n#     break","016ceb13":"labels = []\ni = 0\nfor label in tqdm(df.labels):\n    labels.extend(label)\nlabels = set(labels)\nnum_classes = len(labels)\nlabels","a387dee6":"def binary_cross_entropy_with_logits(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:\n    \"\"\"Calls BCE with logits and cast the target one_hot (y) encoding to floating point precision.\"\"\"\n    return F.binary_cross_entropy_with_logits(x, y.float())","ab63192b":"model = ImageClassifier(\n    dm.num_classes,\n    'ssl_resnet50',\n    loss_fn=binary_cross_entropy_with_logits,\n    multi_label=True\n)","8cc72d2f":"# model.serializer = Labels(labels, multi_label=True, threshold=0.25)","81d841a4":"model = model.to('cuda')","6f77b946":"trainer = flash.Trainer(\n    max_epochs=10,\n    auto_lr_find=True,\n    benchmark=True,\n    gpus=1,\n)","ec5878d6":"trainer.finetune(model, datamodule=dm, strategy=\"freeze_unfreeze\")","a68485d4":"submission_df = pd.read_csv(data_dir\/'sample_submission.csv')\n# submission_df.labels = None\nsubmission_df.head()","bc226249":"submission_dataset = PlantDataset(submission_df, TEST_TRANSFORM, 'test')\nsubmission_dataloader = DataLoader(submission_dataset, 16, num_workers=4)","273da096":"model = model.eval()","37cb539b":"@torch.no_grad()\ndef get_results(submission_dataloader):\n    results = []\n    for data in submission_dataloader:\n        image = data['input']\n        preds = model(image)\n        preds = (preds.sigmoid() > 0.5)\n\n        for pred in preds:\n            lab = (df.columns[3:][pred])\n            results.append(lab.tolist())\n    return results","7e22d377":"submission_df.labels = get_results(submission_dataloader)\nsubmission_df.labels = submission_df.labels.apply(lambda x: \" \".join(x))\nsubmission_df.to_csv(\"\/kaggle\/working\/results.csv\")","26a9cbab":"Nvidia Pytorch tips","19c34099":"TODO: create submission data","2a95e3ba":"Installation (you might have to restart the kernel)\n```\n!pip install -U 'lightning-flash[image]'==0.5.0rc0 -q\n!pip install -U torchvision\n!pip install -U torchtext\n```","851590d6":"# References\n1. [Plant Pathology with Lightning \u26a1 : by Jirka](https:\/\/www.kaggle.com\/jirkaborovec\/plant-pathology-with-lightning)\n2. [Plant Pathology - PyTorch Lightning \u26a1\ufe0f: by Aniket](https:\/\/www.kaggle.com\/aniketmaurya\/plant-pathology-pytorch-lightning\/comments) "}}