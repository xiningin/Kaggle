{"cell_type":{"9ce9522d":"code","0f01f427":"code","93f85a1d":"code","250df20b":"code","a84f879f":"code","940a1ae2":"code","1a6a7c67":"code","39546576":"code","98d60395":"code","c9d7e99f":"code","4bbfac9c":"code","ba65047f":"code","ea10db3f":"code","458876f5":"code","21ec0a5e":"code","edb36690":"code","316261bc":"code","d5a9488e":"code","f378fbdb":"code","6ca9ef13":"code","12922649":"code","8b86552f":"code","e4e29c38":"code","94e23602":"code","f5fc0414":"code","09a46f3b":"code","d6c7ab20":"code","d34f6ebe":"code","50a11e39":"code","29820e3b":"code","3a691135":"code","eb18b853":"code","1675a8aa":"code","0776335f":"code","1e318093":"code","0b6a5b72":"code","21729e02":"code","8752af7b":"code","05d2740c":"code","f4f8841d":"code","4eb07f34":"code","5bc3ead1":"code","4474e045":"code","3fb9491e":"code","b0e30672":"code","5fee7158":"code","a143a816":"code","ab16e0b1":"code","fe4328cb":"code","202aa208":"code","1d7f75a9":"code","5319f7a5":"code","e067d6b4":"markdown","25af10bc":"markdown","e03cb485":"markdown","4b6124bb":"markdown","7392ad60":"markdown","aed8caf9":"markdown","33a54ac9":"markdown","286d2885":"markdown","40899742":"markdown","389af30b":"markdown","9142dd14":"markdown","3ef593b2":"markdown","04849b9a":"markdown","e5236341":"markdown","b4309f58":"markdown","05102ed2":"markdown","c4540f5b":"markdown"},"source":{"9ce9522d":"import os\nimport tarfile\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torch.utils.data import random_split\nfrom torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor\nfrom torch.utils.data.dataloader import DataLoader\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline","0f01f427":"project_name = '004FacialExpressoRecogCNNApproach'","93f85a1d":"data_dir = '..\/input\/facial-expression-recog-image-ver-of-fercdataset\/Dataset'\nclasses = os.listdir(data_dir + '\/train')","250df20b":"for i in classes:\n    var_files = os.listdir(data_dir + '\/train\/' + i)\n    print(i, ':', len(var_files))","a84f879f":"for i in classes:\n    var_files = os.listdir(data_dir + '\/test\/' + i)\n    print(i,': ',len(var_files))","940a1ae2":"dataset = ImageFolder(\n    data_dir + '\/train', \n    transform = ToTensor()\n                     )","1a6a7c67":"dataset","39546576":"img, label = dataset[0]\nprint(img.shape, label)\nimg","98d60395":"print(dataset.classes)","c9d7e99f":"def show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","4bbfac9c":"show_example(*dataset[5300])","ba65047f":"random_seed = 42\ntorch.manual_seed(random_seed)","ea10db3f":"val_size = int(0.1*len(dataset))\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","458876f5":"batch_size = 64","21ec0a5e":"train_dl = DataLoader(\n                        train_ds, \n                        batch_size, \n                        shuffle=True, \n                        num_workers=4,\n                        pin_memory=True   \n                     )\n\nval_dl = DataLoader(\n                        val_ds, \n                        batch_size*2, \n                        num_workers=4, \n                        pin_memory=True\n                    )","edb36690":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))\n        break","316261bc":"show_batch(train_dl)","d5a9488e":"def apply_kernel(image, kernel):\n    ri, ci = image.shape       # image dimensions\n    rk, ck = kernel.shape      # kernel dimensions\n    ro, co = ri-rk+1, ci-ck+1  # output dimensions\n    output = torch.zeros([ro, co])\n    for i in range(ro): \n        for j in range(co):\n            output[i,j] = torch.sum(image[i:i+rk,j:j+ck] * kernel)\n    return output","f378fbdb":"# simple_model = nn.Sequential(\n#     nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1),\n#     nn.MaxPool2d(2, 2)\n# )","6ca9ef13":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","12922649":"class FacialExpressRecogCnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 48, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(48, 96, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 96 x 24 x 24\n\n            nn.Conv2d(96, 192, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(192, 192, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 192 x 12 x 12\n\n            nn.Conv2d(192, 384, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(384, 384, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 384 x 6 x 6\n\n            nn.Flatten(), \n            nn.Linear(384*6*6, 2304),\n            nn.ReLU(),\n            nn.Linear(2304, 1152),\n            nn.ReLU(),\n            nn.Linear(1152, 576),\n            nn.ReLU(),\n            nn.Linear(576, 7)\n                                    )\n        \n    def forward(self, xb):\n        return self.network(xb)","8b86552f":"model = FacialExpressRecogCnnModel()\nmodel","e4e29c38":"for images, labels in train_dl:\n    print('images.shape:', images.shape)\n    out = model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","94e23602":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","f5fc0414":"device = get_default_device()\ndevice","09a46f3b":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device)","d6c7ab20":"@torch.no_grad()    # This is to say that PyTorch to stop tracking of grad\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","d34f6ebe":"model = to_device(FacialExpressRecogCnnModel(), device)","50a11e39":"evaluate(model, val_dl)","29820e3b":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 0.001","3a691135":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","eb18b853":"#num_epochs = 20\n#opt_func = torch.optim.Adam\n#lr = 0.001","1675a8aa":"#history += fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","0776335f":"#num_epochs = 30\n#opt_func = torch.optim.Adam\n#lr = 0.001","1e318093":"#history += fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","0b6a5b72":"evaluate(model, test_loader)","21729e02":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n\ndef plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs')","8752af7b":"plot_accuracies(history)","05d2740c":"plot_losses(history)","f4f8841d":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","4eb07f34":"test_dataset = ImageFolder(data_dir+'\/test', transform=ToTensor())","5bc3ead1":"img, label = test_dataset[1]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","4474e045":"img, label = test_dataset[1034]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","3fb9491e":"img, label = test_dataset[2315]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","b0e30672":"stop here","5fee7158":"!pip install jovian","a143a816":"import jovian\njovian.commit(project=project_name)","ab16e0b1":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","fe4328cb":"jovian.log_metrics(\n                    test_loss=result['val_loss'], \n                    test_acc=result['val_acc'],\n                    train_loss=history[-1]['train_loss'], \n                    val_loss=history[-1]['val_loss'], \n                    val_acc=history[-1]['val_acc']\n                   )","202aa208":"num_epochs = [10]\nopt_func = torch.optim.Adam\nlr = [0.001]","1d7f75a9":"jovian.log_hyperparams({\n    'num_epochs': num_epochs,\n    'opt_func': opt_func.__name__,\n    'batch_size': batch_size,\n    'lr': lr,\n})","5319f7a5":"\njovian.commit(project=project_name, environment=None)","e067d6b4":"## Commit to Jovian","25af10bc":"## Using a GPU","e03cb485":"## Data Loaders","4b6124bb":"## Function to Predict","7392ad60":"## Info of the Dataset","aed8caf9":"## **Training and Validation Datasets**","33a54ac9":"## Defining the Model(CNN)","286d2885":"No. of images of each class in test set:-","40899742":"# Facial Expressoin Recognition with Convolutional Neural Network","389af30b":"## Imports","9142dd14":"creating the `dataset` variable","3ef593b2":"- **User**: [@manishshah120](https:\/\/www.kaggle.com\/manishshah120)\n- **LinkedIn**: https:\/\/www.linkedin.com\/in\/manishshah120\/\n- **GitHub**: https:\/\/github.com\/ManishShah120\n- **Twitter**: https:\/\/twitter.com\/ManishShah120\n\n> This Notebook was created while working on project for a course \"**Deep Learning with PyTorch: Zero to GANs**\" from \"*jovian.ml*\" in collaboratoin with \"*freecodecamp.org*\"","04849b9a":"## Plotting Functions","e5236341":"No. of training images of each class in training set:-","b4309f58":"### Predictions","05102ed2":"## Functions to train the Model","c4540f5b":"## Test Dataset\nLets store the test images in the `test_dataset` variable"}}