{"cell_type":{"6ed6671d":"code","b4aea65d":"code","6bc702a9":"code","4a23f9ae":"code","b01e15ad":"code","ce4bfeb6":"code","439f84a7":"code","68d2c7b7":"code","f3f95a2f":"code","4b5040c9":"code","3c53b29b":"code","d89d7073":"code","b662bbe4":"code","6deafad8":"code","09ff5df9":"code","6808b888":"code","8dd4fc96":"code","db43fc92":"code","8b1bde38":"code","2b373c12":"code","3fe56b88":"code","6933fa9b":"code","dea80a65":"code","5009b506":"code","37922a21":"code","0ce651fe":"code","4578d3e5":"code","3e33c807":"code","84c897db":"code","8414c8aa":"code","133349be":"code","afc83ed9":"code","ed5190d9":"code","b6d93914":"code","99048b8a":"code","bd40589f":"code","df808049":"code","69621927":"code","bfdcbbd7":"code","b29c218e":"code","d88f6c86":"code","47973d1d":"code","8165b568":"code","2f0ec45b":"code","1793390b":"code","8b51ae23":"code","b83224f4":"code","4930eacb":"code","47a05c28":"code","8cfcc02b":"markdown","45c4651b":"markdown","e64bd44b":"markdown","77b1b93b":"markdown","e1bd9ed3":"markdown","732edcee":"markdown","f0825ace":"markdown","0b11cca8":"markdown","79830cf6":"markdown","5960b5ee":"markdown","748941aa":"markdown","aed2947e":"markdown","42589540":"markdown","a6d1d50d":"markdown","1f620937":"markdown","3dfeda2c":"markdown","b707a70c":"markdown","057fb427":"markdown","01b7eec7":"markdown","1891ba72":"markdown","36622200":"markdown","74e36817":"markdown","2e5c8d72":"markdown"},"source":{"6ed6671d":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt \nimport seaborn as sns # \nimport plotly.express as px \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \nimport cufflinks as cf \n\nimport warnings","b4aea65d":"warnings.filterwarnings('ignore')\ncf.go_offline() \ninit_notebook_mode(connected=True) ","6bc702a9":"!pip install jupyterthemes","4a23f9ae":"from jupyterthemes import jtplot \njtplot.style(theme= 'monokai', context= 'notebook', ticks= True, grid= False)","b01e15ad":"# Read a preprocessed version of the Dataset file \ntelecom_df = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/LasalJayawardena\/ML-Projects\/main\/Telecom_Churn_Prediction\/telecom_churn.csv\")","ce4bfeb6":"telecom_df.head()","439f84a7":"telecom_df.tail()","68d2c7b7":"# Check the shape of the dataframe\ntelecom_df.shape","f3f95a2f":"# Display the feature columns\ntelecom_df.columns","4b5040c9":"# Obtain the summary of the dataframe\ntelecom_df.info()","3c53b29b":"telecom_df.describe()","d89d7073":"telecom_df.hist(figsize = (30, 30))\nplt.show()","b662bbe4":"import plotly.graph_objects as go\nfig = go.Figure(data = [go.Pie(labels = [\"Exited (1)\", \"Retained (0)\"], values = telecom_df[\"class\"].value_counts())])\nfig.show()","6deafad8":"fig = px.histogram(telecom_df, x = \"international_plan\",\n                  color = \"class\",\n                  title = \"International Plan service opted by the Telecom Customers\")\nfig.show()","09ff5df9":"corr_matrix = telecom_df.corr()\nplt.figure(figsize = (15, 15))\ncm = sns.heatmap(corr_matrix,\n               linewidths = 1,\n               annot = True, \n               fmt = \".2f\")\nplt.title(\"Correlation Matrix of Telecom Customers\", fontsize = 20)\nplt.show()\n\n# It is clearly shown that \"voice_mail_plan\" and \"number_vmail_messages\" are highly correlated.\n# It is clearly shown that \"total day charge\" and \"total daily minutes\" are highly correlated.","6808b888":"ax = sns.kdeplot(telecom_df.total_day_charge[(telecom_df[\"class\"] == 0)],\n               color = \"seagreen\", shade = True)\nax = sns.kdeplot(telecom_df.total_day_charge[(telecom_df[\"class\"] == 1)],\n               color = \"yellow\", shade = True)\n\nax.legend([\"Retain\", \"Churn\"], loc = \"upper right\")\nax.set_ylabel(\"Density\")\nax.set_xlabel(\"Day Charges\")\nax.set_title(\"Distribution of day charges by churn\");","8dd4fc96":"ax = sns.kdeplot(telecom_df.total_eve_charge[(telecom_df[\"class\"] == 0)],\n               color = \"yellow\", shade = True)\nax = sns.kdeplot(telecom_df.total_eve_charge[(telecom_df[\"class\"] == 1)],\n               color = \"white\", shade = True)\n\nax.legend([\"Retain\", \"Churn\"], loc = \"upper right\")\nax.set_ylabel(\"Density\")\nax.set_xlabel(\"Evening Charges\")\nax.set_title(\"Distribution of evening charges by churn\");","db43fc92":"X = telecom_df.drop([\"class\", \"area_code\", \"phone_number\"], axis = \"columns\") # area_code and phone_number features are irrelevant to proceed further to train the model\ny = telecom_df[\"class\"]","8b1bde38":"X.shape","2b373c12":"y.shape","3fe56b88":"# Perform train\/test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 150)","6933fa9b":"y_train.shape, y_test.shape","dea80a65":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train.values.ravel())","5009b506":"# Plot the feature importance\n\nfeat_scores= pd.DataFrame({\"Fraction of variables affected\" : rf.feature_importances_},index = X.columns)\nfeat_scores= feat_scores.sort_values(by = \"Fraction of variables affected\")\nfeat_scores.plot(kind = \"barh\", figsize = (10, 5))\nsns.despine()","37922a21":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nmodel_LR = LogisticRegression(max_iter=100000)\n        \nmodel_LR.fit(X_train, y_train)","0ce651fe":"y_predict = model_LR.predict(X_test)","4578d3e5":"# precision is the ratio of TP\/(TP+FP)\n# recall is the ratio of TP\/(TP+FN)\n# F-beta score can be interpreted as a weighted harmonic mean of the precision and recall\n# where an F-beta score reaches its best value at 1 and worst score at 0. \nprint(classification_report(y_test, y_predict))","3e33c807":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True);","84c897db":"from sklearn.calibration import CalibratedClassifierCV # For probability score output\nfrom sklearn.svm import LinearSVC\n\nmodel_svc = LinearSVC(max_iter=100000)\nmodel_svm = CalibratedClassifierCV(model_svc) \nmodel_svm.fit(X_train, y_train)","8414c8aa":"y_predict = model_svm.predict(X_test)","133349be":"print(classification_report(y_test, y_predict))","afc83ed9":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True);","ed5190d9":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_rf = RandomForestClassifier()\nmodel_rf.fit(X_train, y_train)","b6d93914":"y_predict = model_rf.predict(X_test)","99048b8a":"print(classification_report(y_test, y_predict))","bd40589f":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True);","df808049":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train, y_train)","69621927":"y_predict = model_knn.predict(X_test) ","bfdcbbd7":"print(classification_report(y_test, y_predict))","b29c218e":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True);","d88f6c86":"from sklearn.naive_bayes import GaussianNB","47973d1d":"model_gnb = GaussianNB()\nmodel_gnb.fit(X_train, y_train)","8165b568":"y_predict = model_gnb.predict(X_test)","2f0ec45b":"print(classification_report(y_test, y_predict))","1793390b":"cm = confusion_matrix(y_test, y_predict)\nsns.heatmap(cm, annot = True);","8b51ae23":"from sklearn.metrics import roc_curve\n","b83224f4":"# ROC curve\n\nfpr1, tpr1, thresh1 = roc_curve(y_test, model_LR.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr2, tpr2, thresh2 = roc_curve(y_test, model_svm.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr3, tpr3, thresh3 = roc_curve(y_test, model_rf.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr4, tpr4, thresh4 = roc_curve(y_test, model_knn.predict_proba(X_test)[:, 1], pos_label = 1)\nfpr5, tpr5, thresh5 = roc_curve(y_test, model_gnb.predict_proba(X_test)[:, 1], pos_label = 1)\n","4930eacb":"# AUC score\n\nfrom sklearn.metrics import roc_auc_score\n\nauc_score1 = roc_auc_score(y_test, model_LR.predict_proba(X_test)[:, 1])\nauc_score2 = roc_auc_score(y_test, model_svm.predict_proba(X_test)[:, 1])\nauc_score3 = roc_auc_score(y_test, model_rf.predict_proba(X_test)[:, 1])\nauc_score4 = roc_auc_score(y_test, model_knn.predict_proba(X_test)[:, 1])\nauc_score5 = roc_auc_score(y_test, model_gnb.predict_proba(X_test)[:, 1])\n\nprint(\"Logistic Regression: \", auc_score1) # Logistic Regression\nprint(\"Support Vector Machine: \", auc_score2) # Support Vector Machine\nprint(\"Random Forest: \", auc_score3) # Random Forest\nprint(\"K-Nearest Neighbors: \", auc_score4) # K-Nearest Neighbors\nprint(\"Naive Bayes: \", auc_score5) # Naive Bayes","47a05c28":"plt.plot(fpr1, tpr1, linestyle = \"--\", color = \"orange\", label = \"Logistic Regression\")\nplt.plot(fpr2, tpr2, linestyle = \"--\", color = \"red\", label = \"SVM\")\nplt.plot(fpr3, tpr3, linestyle = \"--\", color = \"green\", label = \"Random Forest\")\nplt.plot(fpr4, tpr4, linestyle = \"--\", color = \"yellow\", label = \"KNN\")\nplt.plot(fpr5, tpr5, linestyle = \"--\", color = \"white\", label = \"Naive bayes\")\n\nplt.title('Receiver Operator Characteristics (ROC)')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\n\nplt.legend(loc = 'best')\nplt.savefig('ROC', dpi = 300)\nplt.show()","8cfcc02b":"## Compare Each Model with the ROC Curve","45c4651b":"## Data Preprocessing","e64bd44b":"## Train and Evaluate A K-Nearest Neighbor (KNN) Classifier","77b1b93b":"## Load Data","e1bd9ed3":"### Churn by day charges","732edcee":"## Train and Evaluate a Random Forest Classifier","f0825ace":"### Correlation Matrix","0b11cca8":"### Pie Chart to get the information about the percentage of Telecom Customers churning using Plotly histogram","79830cf6":"## Train and Evaluate a Logistic Regressor","5960b5ee":"### Churn by evening charges","748941aa":"### Histogram graph for the international plan service used by the Telecom customers with respect to churned\/Retained","aed2947e":"## Conclusion:\n\n**The graph represents that Random Forest algorithm produced the best AUC. Therefore, it is clear that Random Forest model did a better job of classifying the churned\/retained telecom customers.**","42589540":"## Train Test Split","a6d1d50d":"> Customer Attrition, also known as **Customer Churn**, customer turnover, or customer defection, is the loss of clients or customers.\n\n> High churn rates reduce customer \u2018lifetime value\u2019 and drive higher cost of sales to replace lost customers. The result is less profit for your bottom line.","1f620937":"## Train and Evaluate a Naive Bayes Classifier","3dfeda2c":"### Plot the Histograms for the Dataset","b707a70c":"## Import Libraries","057fb427":"## Context\n\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASsAAACpCAMAAABEdevhAAACQFBMVEX\/\/\/8AAACfn58cdLvT09O\/Hi38\/PxyZlhtbnLyWikAoUtYWVvegCbds2H4+Pg1HRFZSkM6Ojo6tUrs0Lrz8\/N\/qIabhXju7u6MMTD3+v3o6Oji4uLr8\/rx9vrk7\/jOt5fatqOyy+Pb6fa80uery+mDs99tptrT4e\/CwsJRUVGhxOZVmNSzs7P38e08JRXMzMzF2epQltMtLS3q1GcGQWBflceVvuOoxN98qNFbk8Z3rNy+Hi3Ysp7lzcHs3NOLi4tDQ0MAbLcZbK1Jhb56b2mIrdOvqaUmAACYkIsdHR3o1cp1dXVhYWGWSEeZudk+f7uFe3a6opHkxLDswcVqXljmihreijfut3f88d8rDACz37mmekxOPTUWZJ1lWEnSL0KbuqCKmq3M3NCPNzarcG\/Yvr73kA0aFRbEuLEAXqKtmInCqpiOeWzo3Mp7VjfDl3Tyzaivairdp3\/bdgXkmE3bh4\/HPUrNb2vUmIzSZnHkqK713N\/Yx6zcml\/ITlm7ABfqp1nNfHO8qIvnlC\/uwY2njnDJhil0oDRfqkPK6M59y4ZYIiqjJDBcvmdVNDeGz5EuJx4rsT0tNkMkV4Of2Kc5Xz8tdDZcpGUqOCq9o6W7h4z48c7z57LfvZLp0YFTdolXPS94kHVzd2PdgYyVt5yLbTrF1sigZVn0rZfplHbqeFLsaDv0wbDybx2EHRq8S0xmHxmgqbU4r2yh2Lo7ZHpwuI58oIK+Wx6jQB+0ZETKmF+UQkJNGBguHR4AiDstJQl+DdU2AAAgAElEQVR4nO2dj38b1ZXoJ4pyHQiV7Ua1GM2PaGYkjWJJ0dh0pJFiSQFZqiO7kqM44IAJSYDEaycbdmkCNGyBBLYLLVtStkuBUnj7ePTH9sdC2\/e6r6\/tv\/buvfN75s5IduLEfD49Lbaj3\/PVOeeec+6591LNyN9kRKGi1N9kVLnzrACgaJYXRZ5iZSjwF8tyNLjj73P35c6yonlFmk5TUq2WzZfpdD4Pf1HT2VqmrFCQHkff0Xe723KnWHG8IqRpOZ\/Pz9SAAuFMS0BOp9PTEpXOQHJpqjyTr2UUime\/tMDuBCuOp\/lMFioRz5fTCrQ6mqNpw+qQRXIcy7OUMl2uZSUuUytL8pcT122zYuV0Ji+zGUhJHIaAhlaYrmVnZkRaGvrg3Se3xQqwHFWG+pQRKbcrInAAvH4j4HhpmhbhkwT+dt77HshtsKLl6do0kKYV3jvIyZofA6sKzn8J5exMBtrm9t\/+7sv2WfGZfL6WpilCNCA8osCfLM\/BeAEqFEDuim9VXI+heUEC09m0zG37E9xt2R4rIKZpMVuWWfLdwl7ISlFbmtjWKLmqqFVVYT2ssEi1fB4a8JdEtsOKlsv5GZnymZ4liBXb0pSWJuwVe6osKC3Vq1e6cEo5K3LSl8MUt8EKpGEMJYWZDmIl7pWoXlXs99Qe19P6VTIr5POBks9KARq6q2SrrGhZoqWyEj7gQ39Fi3srtKZy7f5esdKvVANZQWHTtXxW2eIHuQeyRVb8dDbP08NCI+ERVVPaLbUvUMojLVrqh+iV+bICtesjrq2xkrL5zBCdQsIKQoWnpYoM\/+y34dMERYHRZ9hTeMBDL7+7aW2FFQw8s8IWHYvyiDTiI9lMPpseEkBw6P8cGlNonCcBeANOpsS74e9GZ8VPZ1huyx9JFkaOn4Bcm0mHahan8pwqajKM6fgqGjtllaPhPymg6YEu2NHSz8isxNpMbaeHdn4axg8hbLkWz7Xktqj0ekq1J9AU3xdlVakItCYIPBx1oOnv4McblZUADeRueBNlpiYH3slV272WXJVa7ZbSgn9Bfer1ekK7L2uVqlLRelVV28E0YDRWHCXU5GH6De5E8ZMtw2Ar6EvhqhUBsaqqPWiDKgwzBLWqwOhN0SpQvTQNstzBL3QUVkCB0c\/QzyC3Vc3hzuTtBkxyNh+kWVyVhTZYFVpqT66KGnwHttXiVahlmtTW1HZFrYw6kmxHRmAFhGw+8CPE48YffLXaUxUODlMszItZSlN5CibNNEWzHE9zqCLDwWSa5jiUURvkQTIXjXlfUkwH1R9ogaMFVpIgLUnSMyNBouRKhVV4viLBuKSyk8nlcFbc9Ew28BMwy\/MFBptepQ+1gdPaQFNZGIYK\/b0q32u1NE6qaq221urRstpSRaVabQvVFmYPmM7K2sRyKe59VTqTDXZaUJnaWu9eVCeGs2JrwZWA6PzExMR8JAoo0K6iWEfVaOhB+j2J16qy0q8IeyvCI5U2\/H9fhLz6bWmvBt2NhFHk0LOhLHhh0XAkUUKcH83dk2mhYaxEiRaDvkOA1ALK2gQDWbVYnZVW5aEi0W0VVFocDbWoxUt9VuorrZZa7Ul9nuq1NOzMIms6q5WE76WV7MxOep7tyRBWYi0fqFSgM2EKfBWhL3CyDL1UtcrCbFlqV1mhL4v9HmQl7IW4lKrGyyxiJSotFb2A8fy1eZ8RQg9fI7NiWTTfiN2ZgpUTvimLU0l6x2sV4azgmBQcVcWWDb0Y2ygiV9VXW1IF\/lAVVW3Jlb4mV1vVKi8ZrCBAtSpAVtCjtXroBQoG6WWfe4fCAlkgvHWlTfV6UpuiaVqPD4SqpvGaCO1SlXc2bA9nxcMBMPjtwQJkNbWxcWJwELKiOAV6IVpRRBn+JaK\/AC\/BsYpVaF6iWYUDsqRwLAye4G9MoTM2BkFPnVgm6BXUk3J+2g+rotHtttITe1qvrbYVdINYhaF8ry2qUm9nS6zhrDKhTgP6m5XBQSSNbb33wubBzU34AlNJ4t1shpAeVmDM3pa0iqb22u2eSlMw2NJYGMr3eLXa3tnMIoQVjHPCR+bO7bECyyn85IOXAj4En\/HHdRWV1xCrqia2K4rKwRt6Gl+VK1UYwrfvlQ2ytcD42ZCCxaq4nbeOrWzgJ6cmgj4Em\/EF\/7q\/0nqqVjFYaVxVUqW2KsBgZGeLq4GsuPJMesjXlIOsNvHlbu\/7XB7DpKcmyDZIoTlZyXP5LOq74XjorTQe\/sY3iKxIiyLFo3RhJyWIFZieKQ+z\/hL07RuDweZgW2oFWa0hxRqsBLOiuGyWmO4o7fbdnyoLYkWXy6azAqQhHT8XsUqlLi1s761hKDuWGgw2VpaDWVFKfserZiNLkFvlLL9evPxyg2xjzNrE319Jpa488dxq8BuEmCdg3k+lUif8+aDzMekw\/ebvascNmRWfzRjXWLx8CMrLlwm6tfrcPzz6wAP\/OPfoA89\/KwhWLLoQYci4QPHk1WsvpF689tK3rwdpLpJyLdALidkZQgi2Y0JkRZdnjEaN2MuHdLnse9Dqtx5A8ug\/wR+nniO\/OrOwsrY23yEqzsmXju7bd\/SFa\/v27fvO1RCPx\/J0QOjC12rTwdWiOy9EVmnr6wKBrIqPPf+AJae+RbzY+LyeWy+Q9OaFV\/bpcnTfK69cD\/uMabLLgqh4ajo4X73jQmLF57Om2lusfNHmwZunHKzIisWYybG\/kEBRL+6z5behwWyaaGlcBpXV2FrmrpWySKxowQ5CTVZeh1S8ecrB6oFTr5IUK2ckxyuM\/z4wd81m9VooK+gS\/JbGZvQKpJifDnvunRQCK8kRriO9unHj0GDTezHPnXKzuul3aPDFV1ZQGeLSMkGvYqkXoPXpcu3F8CTJoeimcGWzdJrO361WCD8rcaZmD1zFE1MnLm3A\/7ruB63e9LA69TrhxRPLG5dWpjY3OwR\/VRy8ZpvgXDc88pfKHlY2KoqeDi5xD5EtjqE+VnTZ+T0Vb5w4sTk4ceKNl90X8xhE9errFqpXTxGNMLawsTE1dWKjQCBRTDlZ1cNZ0TTrgkU7xz82mxly0aJ7bBBRxQhVB7c48+pjJbkcafGGnhwfetmlGqsQ1c3VVRPVo6uQ3UHCqzObmwcHm5sk116ENmjKtWGsoCN38qDTrlBBzqfDn61V4HNYGnAUB7FTFZVSVJaluZbCoaZgdsTRwccqk3fCbtw4hFANbhxysYLe6uZBymL1reLlm6ceI3n3Bno2MVBtpF57ymT10twgLBqFAhzaLrJpdwkSpEOnfSiqXaH4ttZWNFEVewolVvl2r6K1eVXRWE2SNG1IQcUQHyvZNeQUb9xIDQ4ODl1x69XrWI0sVv9URPRIYUNxEFSxacw1Thoj4dXrg6HpN5+1wvdMzatHIOPz\/S6BrFD5VKpW+r0qNEC1pyqVdktRpRZbrVS1am\/Iu+viYcUqbn2ErOZgznbjSt1166unHoO\/Vp+3WYHXoVH6X74In5wicujONWIv6bHoSapOfoxT0mYqweX9TSh8NrQo0u7RuNSstdotFaDiqipWey1JVaoyZNUWtqVX6Rn3AFy88cYGvNqpN1523gpHQaREFisUta+++rxvKExE1xGrQpSQ5HRTxeJ3dL369iisrHq2MpMt+wY+JS94b3JIT4X2p2m0ANEgFRJbFU7ToAXKbU2VBK09WtThZsVls069AsnC\/IEDU5vLB5YWnNWAy6dwsnz5ecu3UwjgTZd7B0yhuX\/\/Qiq1sH9\/M+dLoBup4nWLVXeEEhgcC\/FvKU1qgA7NdeAoCqBvR61t+voO+JPmOMABtHKI4kacmnWzkmZcniC5eADJfvzTESQ9d+ox9OoHrYxwVb\/1Ved7Mov7kSws4F+L3hoVYmX6q5FYUWk9myEbG5cJLkfcKXGxgimWyxMk5w9YctjB6jHdjx984NFH\/\/nRf4aiB+2vu4J3g5UhflaD4lUzZLjeGDYOIpEyYeEQnx9ax71dcbGi0+4BprFsszqwaX\/1r2I3Dh7\/7ne\/+y\/f\/Rcoj+Obi3NOt5NoOlk1vTFWsX7dTHFeudoYFl8hGdLfJY1YnvEQBaMTdrIyl2JZ0jhho5q3zaR4E5vgm1815dZb+CqK9TlHKpSIOFlF\/Kw633v6+98\/evT7D35vfiRWQwSkg+ed6AoLg3QcpnN4XRVd6VV4HB4p7ZHfwcmKr3kGk0bKNsIpB6t\/xCb4b7csWG\/rjr+YcrIqOFkV\/Kxys5OT\/\/q9761Nzi6OxmpYbB+c63BVEQbpmkyLvNhSWNR52tN6UgXwnKLSo2Y6TlaCt\/TRTdlGuGHZF6jrSN76qi1v6ncVHTaYzDndVc7vr9YhKyyzze5gOKtYaZnQquUUMRtUUeaqktKSYZCgtaSWVpVRN2W7J\/Qqak\/S2qNFoi5WdMY7v1R36lXKrJuAAf4TvG2juvW4eZ\/9ZKbkcO7NkpdVcVCyWQ3XKxBdXjt9em25FPZAIag8Q1chJbmqVHuaCJlJkJXaF4V2RRWUfnUbeiXOeKpmoD63ZA2DyxYrOMKjUcvF6i3\/JTBRh3OPRL3lvlgjOmmyijSGTvKXxr8xDuUb3whtwJjOpom0dBusCq2qwLdExApaZK\/SFnv9iqqGLH5xieOtJe+3AhWos99g1Vy3WRX1OTCd1Q\/edjgs55OZaMTFykuzyNisikNNMDeuSzgrMTtTJt1Ot3lOE9tStVeV2nxPpmhNlqG\/ErSeUlFGbRlx2qB3OQwYDEBU16xFUJzzlPsMf\/Xm47ccDsvx5GjU4dwLflZU8pjJqjDC5zyiszpNKEfbImVnwmpZMAlUb2Mqw2bF+lbTFhErXa32w+Cp7rn7B5jV+djbtxwOyxKoVw5WOQKrxOFtsDoSMkeNesB8PtclsnI7k9g2K8k3ARAb1KmczmopVkx5WeGY4e0Y9TjRYUFWOcu5L5Z8\/oqi4harnPNNydmOyWo8VK9QL\/7OpTo2K3\/2CSCrgsEqAVJeG0Ssbr0Frw4Z49vnva\/MRO2BsBmN+vUhdsBkVbJuK16+ccX7PlhG81c7K9Zbc7Wa1wbBoEtFjGEwiv7hFqxP\/2b84XdYyag9EBJZgf1G0DBrfIhi9+UrT0DxKjCSjskqR7jz9mTkJMdiBXNP731g0DBc+4HDzcTAO66\/aSLCiuVzWAnIamlpfnl5fulAJBol1NwL8yvHJo8dXlkw7us+YQgh2lo4bbDqjHplowpf3nJ8JfqbpEG90Txsxle5eiArpFhYwVySiDLz4+NnpsbOjI8vREnlvuIgtZlbn7OCkeIVE5bfZ1mshjcwxbaWW\/LDZjYssc2fsOFSvbE8MXEYycRaoetl9bgVV52HMZbPucejzNKePe+Mjb2zZw+0QeIUIRwviik7cGscmksNDj3xxJUQVsP0CkQXItHEVnBNhxfrbTFZAcm\/qAPq1YLV7u\/Xq7fs4e+tW\/5oNIZZ6QJZET59bDDnZAVKXTy\/duWJQ\/4Hj+qvEp2VtbWJ+cII9TBT+OyIimWyIiXpoN6NWKxKXn8Vd3j0xwnOHQajTlaE94Y5FGZlaFGiacxFPkEYCUdjBfNrvduE1BUQKOnQmMwW8xqIMyH1hmMZiVevYLx+6wfG3+cJ0Sio1y1Wy75BVH+Ei1W0uY5ZzRFMkG+aNhgJuS7QmdCXcqxtaQRgR\/RYJivi3G2xaC4DmVhhGm61jr\/tCKrAW7f8zr3rZEVMjrswbyqmzMJYp9nRWd3wmaDSevKHGNWff\/hkP3jSBa\/kmFjRFwhtQUZULPNFFeK6KpCzWXku4E2XKj1OiNxjjcMWK3LHqYsVWGjqRph62ffA3N69e9+FtH747iN7Hy757rakBD\/piU0oW+uMHtFjWXpVJhZgSyareW8sCTXJQef8V2\/5Sw0UYnX8OPJX5DdvYFZGNFU8MVVoHBzAsdHvl7utvYjWu+hnP6SnJqa3gZMWcoBiQIcwkjDFsp9ljYPkwn90IqA1L+7x5m\/dettfakCsJifDWDVsVszcoBgbpFK+XApK\/dxeS86F1QVza\/riBB\/PYtc3jjuEy06T9zoAIBazvjrLBslbbjDLZzCrM97+2Mehg3J+nscJkTtmdeBAMKtiCrPCf8cWxtY7C5up1NzGOuPRLDDo2Kw6YfNj8fkUUa+Kg7kws2QzM4GaZS+0M1mVAx7b3dxYWJg64XUA0Jl\/1UXvzbf9zh2zWtw\/jJWuR8zY2PrYmbGNE5fGxpY77tAVDDb7JqrWeuhcYidFWCAUa9TnQrsA5Gx+BPdusArsNGmgIb2eSnk+X+lH\/37WdQP4wVffgxfoUn3MqtlEwLwvi3Q7Hv\/2a68lT7529Xo8HgeJ3HpnzJQzZxacNh9LpaoGqofVVOgcdbyOUDm\/2lixm5qbIw\/ElvCGrsRIeaspI7BqwDjIzQpQzdnZxUQ8HjNyL3jlZ3\/048PNgmsaELMqRPysIKl4IpF89tor10pXX9l3NZlMxGMAWqFD1h2Ph2Ol+rDBShvSJ1JHy1bOWG4YqhRqP6kPGxi5NLr+WGdlORdIy2ZFbm4zWDnnpEA8EY80F483owyDrhFdeDJZmFxcmp1sMnE7dQXHIKZcgcAKPYOJvnTtmfcLhQ++c\/RZhoG04i5WY44QCbISTCOUwlkBhGa9dHn1ww9\/crlbrw90UqPlhwkYn62trXQK5OLrMFYorIbvP3BeKCJTKByeXMpFmSTULXzhpcVIIVKIYnrmIxGraM7PSn\/Ks1ffz+UKhVzug28TWJ1x7ERQnKsD7UksWiyMFVh97qO5VOqj5376EJSPUrp0R4y2Enr2C3mRQ9lRWFF1Z60dKQVEUypEIjl0iXBQRayiuU6uFNVZAX3siCFWSQb+2O+9JgwLPQsJJhUDHr0as\/MUFId9\/HUsH8e6c0GuZ\/XD17\/yla889hH8+ZDNaqj5WYLW+J1BbeYLZDUc5q+KA8iq65qX0G2OgYL8DMSiX7nzBv29EKvj8QSBle7bE9BnQUlAlYrHE9HOmEes0jqKw0xWoBHEavWnX7EFs6p3G43i6BWH5MrEyuYgFRj1j8jKGx+iS4UKZcYeQB\/X7BuwxGAYOhmLHyewMp5kChVdWIYBg6VY88vICi337maVIrMCP3nIzeqnH5IvOVBAcNSPxbTMoLmimI8VYDrBQ4VL4pDVAUDNBrBySml5frnDRE1Wy+suVjAOY6vvInmyxTUC\/NVPHnKy+smHq1tvvelM6NEZaQ0IZbMSvCsTDAF1zMoiDaILa98YXwkYKdyCWC0C6tgIrEAsCV\/RZpWAKnbGKlUVU8WKGV8JRTKr1YecrF7fVo9SNHxbADsfDLgIxMqh9oU1VEg6PU7YA8YniBWM2Jf27Fny3JMk97vYrOLJZSerAdMy4\/YqQ4xFiz95yAlre6wSy6HbAli1vjTZBr2sOkbNbXwExUKsIhS16GWVWF+ZJ9XfqZLNCv7tsMEBY6WDfZnI6sOHXKwC1n4OEdDRWQUMByYr\/6yzIV3Myvp4Zi13LbQTShfEqkBRMHA\/7PiaY+tnjoyPfzJPmEDO2TZIUQsuveoPYbX6EfLmFquQBdhhAr3zYBC424RdFyU1iMMhqp5qwPCvYQ5w6+PYBk9PjDAUQ1bHc8DLivlk\/AiUbxB23HGxyjn9lW2DrSjRX9VTH\/30oQ9vl1VxgAOyITZIWrII46Z4aWKtGZ1YW0rgGBOy+gRqxSeXNs4M0Sv43Fh0FrKCMT6MHJLxuBlPdI5gGT\/jt+J1J6vEvMMGk0P8FVqfUV8t3hYrcP3bL73wYurF165dJT\/AZOVfWAZg3pdglvYcb+agd+7g\/BZe6YnBxgbaLyfUt+s5InRUxwvRKEqemyiH0ZOfyDjSK2jFfiO0WKEqLOhYrEA3YdcZkqS6aDeFyg+3xer61e\/se2XftRd+C3+Sl1+brOhp755A+HIjx5qFXCEX2X8YKghSjYVNY7+c0H4VXEfAxRiY8BWWDFh6VSIHNfPIJ5emCIugP\/sfUP4DCdK5qD29FYupJistTppprONZxtthdfKatVb96L7\/SfQwVpbo2zwbsyrkoqVcDiZ6hRLO2cD8JX2\/nCOhMyXIehMoGyzAZ5eQYulGjO5LbgxObMCYb91\/zZ9+zRTEKu74OoBmsSIFN8jPxJysthqyU+baIH1h\/7WTpMfYvR++yQlkSHE9z2OYhH6tsZVP9P1yLobP\/6IydWRxsak\/ubm4WIiZtS5q9WBAEJOwUH0NT6Y5YWpm\/Yq4bxN0VyhjXd02q9jVp546atN66iXSgyxW8ox\/3gcneSjFTZiuObZyGinW4JOQ+V\/zECFgP9mVKRYPBuxtdN7DyiltU6+IDdYNfaJ\/+6xOXnvqqX0OVldJ34jFKmTVsLPOt3z6k7nBYOp0YN9mrLTg7Ps36zNOuUxWq9hZm9Vn3jt7Jiti03BdLywn\/xeSNy698ffrpEcFy3WIysHq2ovE\/Nz2V+GdlqYsnF6bS6WmAnsRmQjaXjUXGlE0oBkTBv4Edldn9Z9ewCgffBjng6RXrOsLpqNwiB0\/MnVm6pMtbp108ikklhG+RpykdPQUjbTPAbf\/3SfPpTqtJ79eImphAjcUrIX3E3TJi1U\/wxqVwL\/Oej8qVzintlrquQKpJBkb6Ml990EkP\/vZzx58ZmsTz43XvvPUUy+ZmnXt5CBFUiyblTw9XK8U7RE0m4kCw1abVJgoGb0Xy4G5a7H7819Azfz5L37laZCgsAme1b3Wp17FRHV0hkk5i9mO1zTQP\/ubBw35U+gGNV6BIcfcCy+Zy6\/3XbteJ36ZzqF\/+PLM9sP2nObDpKihsxa8vSqS4s9\/ed999\/1ybu4\/77vvP3\/xK+fniRvBgj4a+oIv5JJwcxtBuil97uR9i9Vv3h92KU6BQ0OqYS393Hf0JEoD\/F7CccFKbVifPCg4ULVI7i83YeyKEpAu\/uo+LL\/8pf7buej3vGF7MeywfO6wq7Mi9SZBtcDuCnyAMD39NPr5zBaa1dD8J3wBBytMz+eynKwIUYPnQw1aNqxzJFbMytTKxKWNjSB\/9fp9Tvm1gxU4a8YK1h8uaeisyL1JusHEn8GU8M8Ht7CNZ0y3uOtP2axwdOuF5WAFo4YhG2AUB3YPRr9D\/IoPT05OTQSvhHj91y5WjjJT\/FNz+DtPDBogq1gsgFVRbwcpfhNBev\/Zp7dohEUdi7VOFrGCr5lKeTJPByswPWxD0WIqYrGqpoj9KoUNlMIsBFQCwWOBrM5b2pQkDoSNuWBWxu6LDczq2RhSrN9sYSRspPB8gsVqH85wECz3fJnTQcvZsE0OqJFYgYBA07jXzeqCY0eHz6zRT3dYXiNEvUd4oiRYsEJ9s2H8Hn0k7OqD3vVrR6H89re\/Papng6CbmnM5eCcrethZgMWUwwYD+lUaoaxefT6I1ae24Z0lRaOIFQifn3\/WcOoAe6yRjRBNq6NLif4XkqlLb\/yX4W1B163HroEfyOFG2Jj73KrlquvkfhXoV4I7WYqvXnCa4IXHLCAJR6CQICmWziq0R+YD009hxXom9FIcAiNZ7Hpz71yE\/7s0dumi2QIFYl1nM6CL1TDv3pjrKq1HsGhJ4n458d+dhYPKy797kzxkF29e+DWZ1Xkchzr+4VUs1NM2hBX2U89SxoD49KgOy4xkC7i19Z3J2T3HrE\/v2ofWrVfT4XlOY64R\/70+\/3uOYA+xN\/\/wxf33fy116L377\/\/id+cJ7mzVxer5C9YGYzhisDXpM59iQV9Vj8fX6yELSIp\/QgE7DsyeNamNIg3DDpp7LAnt\/TBEzGfCYvfuXCMRwup392P5w3v41xeE0N3N6oLNCkUMn9qxOi45nLWfB0D0848\/jkY\/\/vhzJnDzfxy168Mfwvab90ecIzQSb7DfZhUhPtBDsDwTFrs3UsWkxarrY\/Xm\/U4JYPU8kdV5T0iFoy0z8MBzJF\/\/+u9zOfjmUatBziPMNx+0AX1gYRsqAHWYUUZXj942vecwMebxsJIDpup1gaz43+O+gnfPUX5W579wsvoDabXSzQsXnKwsf\/WZNwU8bxshKhommXMff1wofHzuHOr4IrJ6Hw1+3zQusgu9+5+Iizb9Uk\/h10tgSktYu44Te+h9lsmHVBsgK7Pm1hcbPj\/LuFj5SgUUihkcrH59wYoZwKcuk0Ny3lY0ow0wVyqh5rgEmVXRFVTFPhg9dC\/qcUEJW18henFPUDOwl5V7E0Hvqw5kM2Z4uE1g9Qcnq89IrB5zszLjduZ\/+4PPsz+yEiU81YFbvpKJAFR6PcZ2UeifI0YNhgPUh8EShXrM9xwLrSGbMh1yiE9xULGKMlXGF4syZ53uqkSaQXz9woX\/88c\/\/veVK\/\/9xz8+gFnFCpFI89iPf\/wfCUczF\/wzedjlYXGHF6raBzjsJPJWH9j\/jsF\/Pz1KM48laLZpz2SSyl0MGgn9NpgN3ly+OJCskozqYwWYzxys3iN2Pz934cLfv3NkbOrS2JF3\/uHCqVXoxZvHjkO5uJQ0uidjeEIj2jy+p+m41mFH3yBv9YyTzQdbiBqw4JBhf4yKLwWNhH5+EnnrDCSNlGKz8tkgiEadrp2wGpyiDl64cGVqagpt0Tr1fy+gbbTicaaweHjy+CJ2RWjmBzXqNiePT+4vMKa58fyQbaqQGn3TVfO6\/qcHf\/PBFopYwEKUwz6e4EH8rOjgQ3Ggv7JYab690CArh3M\/S2T14YULb0wZAllB2nGEphBpdkpRBk2PYVSdA0uLhajeFYA\/0rBqEQw+n3ZrEao2bKXqnsALrdBMHm6fniTMvRDsElBB58zH6lZvD2Tl7SuIRaMO5\/4ZYfcKtFvkqydMVofwlmMYjtGNHI8b\/d+lXAl3Jxt6JQ07JySx9Of\/5w09oXf\/0zppyo0shYu6u6IMz0WowJF8WPA238WkPQ76GnxdrL4gswKDwYbJah0Xzw3\/hOe1YwBYTc5JOzgQAw4zcVwodHj7k5QDDADxfx3\/82QzEkiXxTYAAAjYSURBVCGfSuCVGB7+lvA1McdIy2LIrLhaYFrIWaz887\/QBu2B8IsS0QapRt1mZTo8qxvZ+Fcs5hryQGbIbBygCseOX7y4GLWmxxHx+OGLxy\/uuXismRhFtXJ7HMqE3PysHzExS4RfZECqw5kFd9L8LxO1B8I\/EHevgFfRsFmFLH50iRQ6DwA1KJ6MRpZmIZaorox4uQKzNDt5bDESDQpeXRLH4fqiwSeqR1peIWfUgWMhXQ1n9YWDVYDud8xxcMR5dGVIYVsHE81FFvfvxws5kGIir1eIdArY7Y3ACgdVdhZ4mBg1kFmBtEhepwqs9VaEwRL66Pf+8pf33oM\/\/vIpcfcKJIhVZ3RWfN63z43nIwF9eCiVTDDAWMihjxiJRGyoEeKAwbEFUAF3QXkfFXhGVZoYOQDtYQzr4YcJLiQZjc7\/9a8w0Dzz1792AllBTJfWO6OyYglnxfk+FF5hh5erxOM6F2vEsHsvw6TkGfmS0LvP+tAEHtGWJTtU5Vy1v7ffUs8RvuwE3r1iDe2KcjFC3OkDXQViVVq3WIUHA3RmRhjBqwE9BXJFCO4RI1RivrWzKGzwzXEGtufJZP9eHKTWpdw6cf43Ho0esKplhI3UsGBWUZuVklaCwjlq6Gbjd0hKx70mx5CihuBWRiVP2o0ZdYC79stx3hctHXawIr8sZsWULFZifmYmKCSgZZq\/G6ffLF\/cc8wT4UBNm\/UGPSFtn+kMmVUdBLGq1y1WC0ELjBGrqUTUYgXK+Xw6QLF8O1PujCQnJt7xjnrQux\/vxB0bDlChrABg\/QtPQN2zD5PrPiergFwMs4oxtm\/nM+lsjXjeWzo\/tBvltgX5OdTcM590LPCDAwODeljml+ed53SHthMreb9quffLcUvRZjUVFGgiVhsg6RgHWUrMZP2nyAJplH0AblNwdJFbXplYW84ZMatRhcUHMq8s5Bwt4uGt1+kZ3zfbDWGlJ+uzwTMhlMGKirtjBjqdz3hDTi6z81pFAVzmyBWa8xMTC3hdOwA4kC0tzC8vdNxBf\/iGPvT0jDcS1FkFWBhmdeD4MFYdKuaNr+CwKzlVC7n1u3CgpcEKSaGQdLLCXf2MVRZCMmzzo\/S05\/S\/hmsfJo9gVs3ZYazWcUTqjl84qFq2HnGk4852QBxLta1FMEZoyySTnlRyGCuaZjOu3ekMVuSgHLOKTIaxigWwQn2Flmqx5XzogQl3TvSF2p4OfLPU4Qn5h2+qJWZdZ52j\/V+Kg4C9gjCrwoFhrEo4K\/TFxVw5r5\/mwtZmpu\/aqYKjywgbkInwkxvDIUwZICv4X52cZWFWpf1hrOKQFXzTdQIripayNYUGHFe+m8egjiyjbNbG4sO0sLIm4pVz5xjh3Dk57ttigNJzzuPR5jBWMKQvkVihVUH56ekMYfvO3SAjbWxHK7QiccjjMUr\/7\/ol7ZG\/03CRN+6ZsEuiHRmYSCgrOAKiJfNTl4j9t3Q5H7wV1T2WUTcBzMyUZVQSUp9UPy8UzrWeFIytTVx1NGYSVcwKQZPcSEpnPhmDgUwO\/koSTttQsvlaNijnuccyKitoHFmBYXLnPtf3y\/m8Z7FyrmWeRDNrqHbdJDaTxkB0Ynx8BT41tzY+Pu\/tDwIsJWUlLp3N7HwUug0ZeXNJWsjWcCBi7pej9xa4XRaDd69AJQ4SK1TbHRs\/Mt5BCzCXx4+cXnBrJZ2uifgAFrmWFb6c46AhgJfjvYqMK5BGxdHXXsDg3Suis0Gs4skzR45MYM0sHDlyZNlZtKSVTN48c3F3qtaWNi3lajM1ibOmpPw4GLx7BfLwAXoVz3U6BZhAlErRTqcTdYbFUj7vWD2FAtOtfLS7IVvb4BV+36FHjDF49woUZZH9Fd7JydgPCu+cZZZBxDTnWUTMloedGHvXZatHEogwTJSJ1SYkiFWOii0FsDKyh7g3qeDT2RnFW3mnd91guPXjG2g6k89I5AthZnHn0mIgK1085itl85nd6Mu9so2jLoBczhNr8TorBs9xh7JyCC1KtFTzBFRuDRu1e2PHZXvHgvDTGVou+5eklGb3zCbwjNHiSK1PvFTL543eKlmkFF5Gox\/dRj85iaYU9IdU2SWwtnmECuCo9Ey+7DRF+PXHFidnDydioDA7eSw3VB84ZM3QnHUtorUepQo9ieJYtopOA+ZbMlWVOI6qaBw6xhodeHpvZfvHzdDKdHYmDdUBLf3VR7jm7ORkAe3vuDg5eawUC+kjADx8dppK28YHtB4HWSmVbEtQ1aqCThqWq5JWVSrtdkXRRE0d9dytnZLbOZqHFgWezmYzaZHGNQjmwOzs4RzqK4hMzs5GYLhKZsWxKO3LZyVnYyOtVdt9oS2ovaqsCuhMQEntteW22qu0tYqkCi2tdY9Hxts9xoiWytmZPM8LkswwkcXFCNpsJ1dYXFzMwfDez4qWpelajZYzaY+3022wLWitHluVe23Uv9RXeprWhnqFDgpsCcKXWK90oXklTStQTWo9Rq\/y5\/CmrLi9x\/E4jhUVgRWRQpWh\/\/FipNsVSpN6kqqpkiZWUMtSu8VJqlqBhqlqbVHTel96VlhYJV3OZhIVSEyrMFJFkBQ5wYu8KHKUrEjCNM9CPz6Tl7m0FLCik6YpGtBstadK8DfCgmZFODgC0GgYoMCX2Ld7hWZ5oJRrMAmKw\/grn0\/T5Ww2m5eoGvqXwpUz0wjTsPFflpR7zSRI7vSxazQrsvB6hfS0TKfLUGRKQkrGjX7E2K6VHTuiDgUSNL2Fk6bDZHfkhvfwOD+\/yO4yDC30euxWD6zeQdlVrCoaOopU5ERa5FgeHcKMDqzmZF5S+V1Q+tttrGhNUwVVrkKVQidYt3tSr6fCUFQb9cDqHZTdxkpu8b2e1m5pqkJxqtoXJRSHSqMfWL2DsrtYqbzcUrRKpd9uwYSGa8laT9CUdrVSHfnA6h2UXcVK0doydFGcqMm9CgrlWRkm0zDxkSvKvQ7aqV3GCsbuAMdhtF7QgX\/SAN8CdkN4trtY7W75G6vR5W+sRpe\/sRpZ\/j+jKbMbwWh1nwAAAABJRU5ErkJggg==)","01b7eec7":"* Unnecessary features would decrease the training speed, the model interpretability and the generalization performance on the test data. \n* Therefore, finding and selecting the most useful features in the dataset is crucial.\n* Assigning input features to X and output (Churn) to y","1891ba72":"## Identify Feature Importance with a Random Forest Classifier","36622200":"## Data Vizualisation","74e36817":"# Telecom Customer Churn Prediction","2e5c8d72":"## Train and Evaluate a Support Vector Machine"}}