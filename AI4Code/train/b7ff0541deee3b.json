{"cell_type":{"cb556e1a":"code","7f7e1c67":"code","61b3f886":"code","043a9d6f":"code","f595b0a9":"code","b6ce77cf":"code","44a88cbd":"code","7667413d":"code","96a057e1":"code","890b07ec":"code","c0c0a78e":"code","92af7282":"code","3d6e3ae3":"code","fd0a60f8":"code","2bd06015":"code","8bb3bf77":"code","55d8a8e1":"code","cf98dec3":"code","a2fb1a27":"code","2b040c09":"code","869472d2":"code","cb421567":"code","e083e39f":"code","75bad9a6":"code","1ff0b970":"code","9535edf5":"code","a7338f7e":"code","6ad28b8d":"code","973e5dd0":"code","b5059c98":"code","299f9a19":"code","28568c8d":"code","3f1fc994":"code","a316a40f":"code","03204f9e":"code","55943378":"code","f3fd0b76":"code","d2505e12":"code","ae826258":"code","b2a98f48":"code","130dc02e":"code","de32ce8b":"code","14e202b3":"code","17c36e2d":"code","0502b43f":"code","51e594d8":"code","375ddb71":"code","bbaefe1e":"code","a9eabf26":"code","ec5c55a1":"code","4da9c6a3":"code","fb689549":"code","77aba5ea":"code","264c0738":"code","b504313f":"code","231a28ec":"code","610d0765":"code","6d42af48":"code","b08c51a2":"markdown","6b07553e":"markdown","dd5e6622":"markdown","fcdad858":"markdown","332724ed":"markdown","473f3f33":"markdown","ed3efcee":"markdown","fdd1373c":"markdown","1a9732e4":"markdown","f916a953":"markdown","7882e4de":"markdown","c0758a37":"markdown","34e4965a":"markdown","1728719b":"markdown","8cf44dc0":"markdown","4d6c384a":"markdown","4a033b80":"markdown"},"source":{"cb556e1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as pltimport \nimport matplotlib.pyplot as plt # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f7e1c67":"google=pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","61b3f886":"google.head()","043a9d6f":"df=google.copy()","f595b0a9":"#I rename columns that could cause problem when making visualization\n\ndf.rename(columns={\"Content Rating\":\"Content_Rating\",\"Last Updated\":\"Last_Updated\",\"Android Ver\":\"Androidver\",\"Current Ver\":\"Currentver\"},inplace=True)","b6ce77cf":"df.isnull().sum()","44a88cbd":"df.dropna(inplace=True)","7667413d":"df.isnull().sum()","96a057e1":"df.head()","890b07ec":"df.info()","c0c0a78e":"#I want to use only year for visualization\n\nyear=[]\n\nfor i in df.Last_Updated:\n    year.append(i.split(\",\"))\n    \n  ","92af7282":"yr_list=[]\n\nfor i in year:\n    yr_list.append(i[1])","3d6e3ae3":"year_list=[]\nfor i in yr_list:\n    i.split(\" \")\n    year_list.append(i)","fd0a60f8":"df[\"Year\"]=year_list","2bd06015":"df.head()","8bb3bf77":"df.Year=df.Year.astype(int)\ndf.Reviews=df.Reviews.astype(int)","55d8a8e1":"Data=pd.DataFrame({\"Genres\":df.Genres.value_counts().index,\"Number_of_Apps\":df.Genres.value_counts().values})","cf98dec3":"Data=Data[Data[\"Number_of_Apps\"]>=10]","a2fb1a27":"fig = px.bar(Data, y=\"Number_of_Apps\", x=\"Genres\", text='Genres',color=\"Number_of_Apps\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(title_text=\" Number of Apps and Their Genres \")\nfig.show()","2b040c09":"Data=pd.DataFrame({\"Android_ver\":df.Androidver.value_counts().index,\"Number_of_app\":df.Androidver.value_counts().values})","869472d2":"plt.figure(figsize=(15,15))\nsns.barplot(x=\"Android_ver\",y=\"Number_of_app\",data=Data,errwidth=0)\nplt.xticks(rotation=90)\nplt.xlabel(\"Android Versions of Apps\")\nplt.ylabel(\"Number of Apps\")\nplt.title(\"Number of Apps by Android Version\")","cb421567":"plt.figure(figsize=(10,20))\nsns.barplot(x=\"Type\",y=\"Rating\",hue=\"Category\",data=df,errwidth=0)","e083e39f":"Data=pd.DataFrame({\"Size\":df.Androidver.value_counts().index,\"Number_of_app\":df.Androidver.value_counts().values})","75bad9a6":"year=[2014,2015,2016,2017,2018]\n\n\nfor i in year:\n    \n    x=df[df[\"Year\"]==i]\n\n    plt.figure(figsize=(5,5))\n    sns.barplot(x=x.Size.value_counts().index[:20] ,y=x.Size.value_counts().values[:20],data=x,errwidth=0)\n    plt.xticks(rotation=90)\n    plt.xlabel(\"Size of Apps\")\n    plt.ylabel(\"Number of Apps\")\n    plt.title(\"Number of Apps by Size in {}\".format(i))","1ff0b970":"Data=pd.DataFrame(df.groupby([\"App\"])[\"Rating\"].mean().reset_index())","9535edf5":"Data.sort_values(by=\"Rating\",ascending=False,inplace=True)\nData.reset_index(drop=True)","a7338f7e":"fig = px.bar(Data[:20], y=\"Rating\", x=\"App\", text='App',color=\"Rating\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=120, uniformtext_mode='hide')\nfig.show()","6ad28b8d":"Data_2=pd.DataFrame(df.groupby([\"App\",\"Rating\"])[\"Reviews\"].mean().reset_index())\nData_2.sort_values(by=\"Reviews\",ascending=False,inplace=True)\nData_2.reset_index(drop=True)","973e5dd0":"fig = px.bar(Data_2[:20], y=\"Reviews\", x=\"App\", text='Reviews',color=\"Rating\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=120, uniformtext_mode='hide')\nfig.update_layout(title_text=\"Top 20 Reviewed Apps \")\nfig.show()","b5059c98":"price=[]\n\nfor i in df.Price:\n    i=i.split(\"$\")\n    if len(i)==1:\n        price.append(i[0])\n    elif len(i)==2:\n        price.append(i[1])\n","299f9a19":"df.Price=price","28568c8d":"df.Price=df.Price.astype(float)","3f1fc994":"Data_3=pd.DataFrame(df.groupby([\"App\",\"Rating\"])[\"Price\"].mean().reset_index())\nData_3.sort_values(by=\"Price\",ascending=False,inplace=True)\nData_3.reset_index(drop=True)","a316a40f":"Data_3=Data_3[Data_3[\"Price\"]<=300.00]","03204f9e":"Data_3","55943378":"\nfig = px.bar(Data_3[:20], y=\"Price\", x=\"App\", text='Price',color=\"Rating\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=120, uniformtext_mode='hide')\nfig.update_layout(title_text=\"Top 20 Expensive apps \")\nfig.show()","f3fd0b76":"\u0131nstalls_list=[]\n\nfor i in df.Installs:\n    i=i.split(\"+\")\n    \u0131nstalls_list.append(i[0])","d2505e12":"df.Installs=\u0131nstalls_list","ae826258":"fixed_\u0131ns=[]\na=\"\"\nb=\"\"\nc=\"\"\n\nfor i in df.Installs:\n    i=i.split(\",\")\n    if len(i)==1:\n        fixed_\u0131ns.append(i[0])\n    elif len(i)==2:\n        a= i[0]+i[1]\n        fixed_\u0131ns.append(a)\n    elif len(i)==3:\n        b=i[0]+i[1]+i[2]\n        fixed_\u0131ns.append(b)\n    elif len(i)==4:\n        c=i[0]+i[1]+i[2]+i[3]\n        fixed_\u0131ns.append(c)\n        \n        \n        \n        \n    ","b2a98f48":"df.Installs=fixed_\u0131ns","130dc02e":"df.Installs=df.Installs.astype(int)","de32ce8b":"Data_\u0131ns=pd.DataFrame(df.groupby([\"App\",\"Reviews\"])[\"Installs\"].mean().reset_index())\nData_\u0131ns.sort_values(by=\"Reviews\",ascending=False,inplace=True)\nData_\u0131ns.reset_index(drop=True)","14e202b3":"Data_\u0131ns.drop_duplicates(subset=[\"App\"],inplace=True)","17c36e2d":"fig = px.bar(Data_\u0131ns[:100], y=\"Reviews\", x=\"App\", text='Installs',color=\"Installs\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=120, uniformtext_mode='hide')\nfig.update_layout(title_text=\"Top 20 apps that have higher installs and higher reviews than other apps \")\nfig.show()","0502b43f":"df2016=df[df[\"Year\"]==2016]\ndf2017=df[df[\"Year\"]==2017]\ndf2018=df[df[\"Year\"]==2018]\n\ndf2018.Type.value_counts().values[0]\n","51e594d8":"year_list=[2016,2017,2018]\npaid_count=[]\nfree_count=[]\n\n\nfor i in year_list:\n    x=df[df[\"Year\"]==i]\n    paid_count.append(x.Type.value_counts().values[1])\n    free_count.append(x.Type.value_counts().values[0])\n    \ndata_t=pd.DataFrame({\"Year\": year_list,\"Free\":free_count,\"Paid\":paid_count})\n    \n    \n    ","375ddb71":"trace1 = go.Bar(\n                x = data_t.Year,\n                y = data_t.Free,\n                name = \"Free apps\",\n                marker = dict(color = 'rgba(100, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_t.Year)\n \ntrace2 = go.Bar(\n                x = data_t.Year,\n                y = data_t.Paid,\n                name = \"Paid apps\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_t.Year)\n    \ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\nfig.update_layout(title_text=\"Free and Paid apps in 2016,2017 and 2018\")\niplot(fig)","bbaefe1e":"dt=pd.DataFrame({\"Year\":df.Year.value_counts().index,\"Count\":df.Year.value_counts().values})\ndt.sort_values(by=\"Year\",ascending=False,inplace=True)\ndt.reset_index(drop=True)","a9eabf26":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='Year',y='Count',data=dt,color='lime',alpha=0.8)\nplt.ylabel(\"Numbers of apps\")\nplt.title(\"How many apps updated in these years ?\")\nplt.grid()","ec5c55a1":"Df_n=pd.DataFrame({\"Content_Rating\":df.Content_Rating.value_counts().index,\"Count\":df.Content_Rating.value_counts().values})","4da9c6a3":"Df_n.head()","fb689549":"labels = Df_n.Content_Rating\nvalues = Df_n.Count\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0.2, 0.2, 0.2, 0.2])])\nfig.show()","77aba5ea":"labels = df.Size.value_counts().index[:20]\nvalues = df.Size.value_counts().values[:20]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,pull=[0.1 for i in labels ])])\nfig.update_layout(title_text=\"Number of Apps and Their size in All time with Pie chart\")\n\nfig.show()","264c0738":"from wordcloud import WordCloud\n\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df.App))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","b504313f":"import plotly.express as px\nfig = px.box(df,x=\"Type\" ,y=\"Rating\")\nfig.show()","231a28ec":"import plotly.express as px\nfig = px.box(df,x=\"Content_Rating\" ,y=\"Rating\",color=\"Content_Rating\")\nfig.show()","610d0765":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","6d42af48":"import plotly.express as px\nfig = px.scatter(df, x=\"Reviews\", y=\"Installs\", color=\"Rating\",\n                 size='Reviews', hover_data=[\"App\"])\nfig.show()","b08c51a2":"I dont use \u0131nstalls or reviews for box plot because these columns has big differences in their elements so \u0131f  I used \u0131nstalls or reviews intead of rating and Type ,This could bad visualization.","6b07553e":"With Heat Map We can take a look at correlation between numerical variables","dd5e6622":"# Google Apps\n\n## \u0130nformation\n\nThis data frame is about apps \n\n* App : Name of app\n\n* Category,Genres : Genre of the app,What purpose this app have? like art,education,game and so on\n\n* Rating : This shows How many like this app got (upper limit:5.0,lower bound:1.0)\n\n* Reviews : This shows that How many like and dislike this app got\n\n* Size : Size of the app\n\n* Installs : Downloaded number of app\n\n* Type : It shows that \u0131f the app is paid or free\n\n* Price : This is Money that you have to pay to use the app\n\n* Content Rating : Indicates application suitability for age\n\n* Last Updated : Shows which year of information of app was used while this dataframe was creating\n\n* Current Version : Current version of the app\n\n* Android Version : Android Version of the app\n\n1.[Reading and Exploring Data](#1)\n\n2.[Bar Plots(Seaborn-Plotly)](#2)\n\n3.[Point Plot](#3)\n\n4.[Pie Charts](#4)\n\n5.[Word Cloud](#5)\n\n6.[Box Plots](#6)\n\n7.[Heat Map](#7)\n\n8.[Scatter Plot](#8)\n\n","fcdad858":"<a id='8'><\/a><br>\n# Scatter Plot","332724ed":"<a id='5'><\/a><br>\n# Word Cloud","473f3f33":"Now I want to make graphic with Installs but to do this,I have to rid of \"+\" and \",\"","ed3efcee":"## If you like my kernel,Please upvote ","fdd1373c":"<a id='7'><\/a><br>\n# Heat Map","1a9732e4":"By this plot most of the apps were updated in 2018 so This data contains mostly 2018's and 2017's data","f916a953":"<a id='3'><\/a><br>\n# Point Plot ","7882e4de":"##### as you can see from the plot it,s not a good visualization so I going to look other columns to see if I can make better visualization with","c0758a37":"Installs doesnt show real download number.Real \u0131nstalls number can be lower or higher than these values that shown on graph","34e4965a":"<a id ='1'><\/a><br>\n## Reading and Exploring Data","1728719b":"<a id='6'><\/a><br>\n# Box Plot","8cf44dc0":"Other bar plots show us graphic that have two features like install&reviews,install&rating,year&type and so on but I made a scatter plot that show three features.","4d6c384a":"<a id='4'><\/a><br>\n# Pie Chart","4a033b80":"<a id='2'><\/a><br>\n## Bar Plot"}}