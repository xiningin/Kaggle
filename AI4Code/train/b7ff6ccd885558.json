{"cell_type":{"79c63734":"code","fb389dbf":"code","023da967":"code","606502c1":"code","ef2916b4":"code","88dc8b3a":"code","17ade56d":"code","270839dd":"code","6b01b57c":"code","c0e4eb55":"code","2852d5b9":"code","5cd30d22":"code","46eb5886":"code","e2a36409":"code","9181b378":"markdown","d3495b45":"markdown","10db89fb":"markdown","f4904a49":"markdown","49a7b969":"markdown","3f454dc9":"markdown"},"source":{"79c63734":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nimport os","fb389dbf":"def process_date(x, start_time=[]):\n    x = x.copy()\n    dates = [datetime.strptime(date, '%Y-%m-%d') for date in x['date']]\n    SECONDS_IN_DAY = 24 * 60 * 60\n    if not start_time:\n        start_time.append(min(dates).timestamp() \/ SECONDS_IN_DAY)\n    start_time = start_time[0]\n    x['timestamp'] = [x.timestamp() \/ SECONDS_IN_DAY - start_time for x in dates]\n    x['year'] = [x.year for x in dates]\n    x['month'] = [x.month for x in dates]\n    x['day'] = [x.day for x in dates]\n    x['weekday'] = [x.weekday() for x in dates]\n    x.drop('date', axis=1, inplace=True)\n    return x","023da967":"def plots(x, y, figsize=(15, 5), cols=6, plot_function=matplotlib.axes.Axes.scatter):\n    x_names = x.columns if len(x.shape) > 1 else np.array([x.name])\n    y_names = y.columns if len(y.shape) > 1 else np.array([y.name])\n    rows = (x_names.size * y_names.size + cols - 1) \/\/ cols\n    fig, ax = plt.subplots(rows, cols, figsize=figsize)\n    for i in range(x_names.size * y_names.size):\n        if rows == 1:\n            if cols == 1:\n                cur_ax = ax\n            else:\n                cur_ax = ax[i % cols]\n        else:\n            cur_ax = ax[i \/\/ cols][i % cols]\n        x_name = x_names[i % x_names.size]\n        y_name = y_names[i \/\/ x_names.size]\n        cur_x = x[x_name] if x_names.size > 1 else x\n        cur_y = y[y_name] if y_names.size > 1 else y\n        cur_ax.set_xlabel(x_name, fontsize=10)\n        cur_ax.set_ylabel(y_name, fontsize=10)\n        plot_function(cur_ax, cur_x, cur_y, c='b')\n    \n    fig.tight_layout()\n    plt.show()","606502c1":"x_train = pd.read_csv('..\/input\/train_data.csv', index_col='index')\ny_train = pd.read_csv('..\/input\/train_target.csv', index_col='index')\nx_test = pd.read_csv('..\/input\/test_data.csv', index_col='index')","ef2916b4":"x_train = process_date(x_train)\nx_test = process_date(x_test)","88dc8b3a":"plots(x_train, y_train, figsize=(25, 10))","17ade56d":"X = x_train.copy()\nX['price'] = y_train","270839dd":"X['price'].describe()","6b01b57c":"gby = X.groupby('timestamp')\nprice_stat = gby['price'].agg(['mean', 'min', 'max', 'count'])","c0e4eb55":"plots(price_stat.index, price_stat, figsize=(25, 5), cols=price_stat.shape[1], plot_function=matplotlib.axes.Axes.plot)","2852d5b9":"gby = X.groupby('month')\nprice_stat = gby['price'].agg(['mean', 'min', 'max', 'count'])\nplots(price_stat.index, price_stat, figsize=(25, 5), cols=price_stat.shape[1], plot_function=matplotlib.axes.Axes.plot)","5cd30d22":"gby = X.groupby('weekday')\nprice_stat = gby['price'].agg(['mean', 'min', 'max', 'count'])\nplots(price_stat.index, price_stat, figsize=(25, 5), cols=price_stat.shape[1], plot_function=matplotlib.axes.Axes.plot)","46eb5886":"corr = X.corr()\ncorr","e2a36409":"mask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","9181b378":"## Month","d3495b45":"## Weekday","10db89fb":"# Correlation","f4904a49":"# Plots","49a7b969":"## Timestamp","3f454dc9":"# Price analysis"}}