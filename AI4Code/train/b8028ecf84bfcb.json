{"cell_type":{"1f1cbf07":"code","2162f96a":"code","4fcfc72a":"code","f41ed2cc":"code","4527116e":"code","7417135a":"code","d5127e72":"markdown","13ce208e":"markdown","964eecce":"markdown","d6c554e9":"markdown","ac82abda":"markdown"},"source":{"1f1cbf07":"import sys","2162f96a":"sys.getrecursionlimit()","4fcfc72a":"sys.setrecursionlimit(2000)","f41ed2cc":"def recur_add(n):\n    if(n > 0):return n + recur_add(n-1);\n    else:return 0;","4527116e":"print( \"sum =\",recur_add(1500) )","7417135a":"print( \"sum =\",recur_add(2500) )","d5127e72":"sys.getrecursionlimit()\n\n\nReturn the current value of the recursion limit, the maximum depth of the Python interpreter stack. \n\nThis limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.\n\nIt can be set by setrecursionlimit()","13ce208e":"# get recursion limit ","964eecce":"# this case error occured","d6c554e9":"sys.setrecursionlimit(limit)\n\nSet the maximum depth of the Python interpreter stack to limit. \nThis limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.\n\nThe highest possible limit is platform-dependent. \n\nA user may need to set the limit higher when they have a program that requires deep recursion and a platform that supports a higher limit. \n\nThis should be done with care, because a too-high limit can lead to a crash.\n\nIf the new limit is too low at the current recursion depth, a RecursionError exception is raised.\n\n***Changed in version 3.5.1: A RecursionError exception is now raised if the new limit is too low at the current recursion depth.***","ac82abda":"# set recursion limit "}}