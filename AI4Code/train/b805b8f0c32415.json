{"cell_type":{"a91b8cab":"code","27514649":"code","d602b25b":"code","061b50b6":"code","88c6832d":"code","1cd03205":"code","2415638a":"code","d374330f":"code","a5e5ed5c":"code","1ce5ae3f":"code","140e1990":"code","82e3377d":"markdown","d2989af0":"markdown","e7e7d26c":"markdown","fa78df2b":"markdown","845a7c65":"markdown","06092864":"markdown","29886415":"markdown","7079af89":"markdown"},"source":{"a91b8cab":"import numpy as np\nimport pandas as pd\nimport json\nimport torch\nfrom tqdm import tqdm\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder","27514649":"WEIGHTS_PATH = '..\/input\/weights-5\/weights (5).pth'\nFEATURE_SIZE = 21\nBATCH_SIZE = 256","d602b25b":"def one_hot(categories, string):\n    encoding = np.zeros((len(string), len(categories)))\n    for idx, char in enumerate(string):\n        encoding[idx, categories.index(char)] = 1\n    return encoding\n\ndef featurize(entity):\n    sequence = one_hot(list('ACGU'), entity['sequence'])\n    structure = one_hot(list('.()'), entity['structure'])\n    loop_type = one_hot(list('BEHIMSX'), entity['predicted_loop_type'])\n    features = np.hstack([sequence, structure, loop_type])\n    return features \n\ndef char_encode(index, features, feature_size):\n    half_size = (feature_size - 1) \/\/ 2\n    \n    if index - half_size < 0:\n        char_features = features[:index+half_size+1]\n        padding = np.zeros((int(half_size - index), char_features.shape[1]))\n        char_features = np.vstack([padding, char_features])\n    elif index + half_size + 1 > len(features):\n        char_features = features[index-half_size:]\n        padding = np.zeros((int(half_size - (len(features) - index))+1, char_features.shape[1]))\n        char_features = np.vstack([char_features, padding])\n    else:\n        char_features = features[index-half_size:index+half_size+1]\n    \n    return char_features","061b50b6":"class VaxDataset(Dataset):\n    def __init__(self, path, test=False):\n        self.path = path\n        self.test = test\n        self.features = []\n        self.targets = []\n        self.ids = []\n        self.load_data()\n    \n    def load_data(self):\n        with open(self.path, 'r') as text:\n            for line in text:\n                records = json.loads(line)\n                features = featurize(records)\n                \n                for char_i in range(records['seq_scored']):\n                    char_features = char_encode(char_i, features, FEATURE_SIZE)\n                    self.features.append(char_features)\n                    self.ids.append('%s_%d' % (records['id'], char_i))\n                        \n                if not self.test:\n                    targets = np.stack([records['reactivity'], records['deg_Mg_pH10'], records['deg_Mg_50C']], axis=1)\n                    self.targets.extend([targets[char_i] for char_i in range(records['seq_scored'])])\n                    \n    def __len__(self):\n        return len(self.features)\n    \n    def __getitem__(self, index):\n        if self.test:\n            return self.features[index], self.ids[index]\n        else:\n            return self.features[index], self.targets[index], self.ids[index]","88c6832d":"test_dataset = VaxDataset('..\/input\/stanford-covid-vaccine\/test.json', test=True)\ntest_dataloader = DataLoader(test_dataset, BATCH_SIZE, num_workers=4, drop_last=False, pin_memory=True)","1cd03205":"class Flatten(nn.Module):\n    def forward(self, x):\n        batch_size = x.shape[0]\n        return x.view(batch_size, -1)\n\nclass VaxModel(nn.Module):\n    def __init__(self):\n        super(VaxModel, self).__init__()\n        self.layers = nn.Sequential(\n            nn.Dropout(0.2),\n            nn.Conv1d(14, 32, 1, 1),\n            nn.PReLU(),\n            nn.BatchNorm1d(32),\n            nn.Dropout(0.2),\n            nn.Conv1d(32, 1, 1, 1),\n            nn.PReLU(),\n            Flatten(),\n            nn.Dropout(0.2),\n            nn.Linear(FEATURE_SIZE, 32),\n            nn.PReLU(),\n            nn.BatchNorm1d(32),\n            nn.Dropout(0.2),\n            nn.Linear(32, 3),\n        )\n    \n    def forward(self, features):\n        return self.layers(features)","2415638a":"model = VaxModel().cuda()","d374330f":"sub = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv', index_col='id_seqpos')","a5e5ed5c":"model.load_state_dict(torch.load(WEIGHTS_PATH))\nmodel.eval()\nfor features, ids in tqdm(test_dataloader):\n    features = features.cuda().permute(0,2,1).float()\n    predictions = model(features)\n    sub.loc[ids, ['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C']] = predictions.detach().cpu().numpy()","1ce5ae3f":"sub.head()","140e1990":"sub.to_csv('submission.csv')","82e3377d":"### Inference","d2989af0":"### DataLoaders","e7e7d26c":"### Imports","fa78df2b":"### Encoding functions","845a7c65":"### Configuration","06092864":"### Dataset","29886415":"## Welcome to my first baseline notebook!\nThis is an interesting competition, especially with the short time constraint. We are provided a sequence of mRNA and for the first 68 bases we must predict three properties `reactivity`, `deg_Mg_pH10`, and `deg_Mg_50C`. In this notebook, I present my code for a simple baseline that as of publishing scores #1 on the leaderboard (0.380). I haven't messed with the hyperparameters at all so you are sure to get a better score than me!\n\nNote that this is the inference part of a 2-part Notebook. The training portion is located here: https:\/\/www.kaggle.compytorch-nn-starter-baseline-train","7079af89":"### Model"}}