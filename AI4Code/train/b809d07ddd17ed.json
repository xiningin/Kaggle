{"cell_type":{"15252973":"code","f76a3c42":"code","f058d23f":"code","d123c4be":"code","0c3f7579":"code","19fab6cb":"code","bb69bd52":"code","57f98d88":"code","b031b243":"code","68342d91":"code","d0505f4a":"code","919b37ae":"code","a0dfce90":"code","ec116153":"code","6ef2979b":"code","cf2e10b4":"code","da1bcc2e":"code","929ee1e5":"code","ce72dd3e":"code","52e06ba2":"code","8b51d6cb":"markdown","8d3d9133":"markdown","d7f79a86":"markdown","cdc45146":"markdown","1d3cd3bb":"markdown","ebbbbb33":"markdown","e10a2cf0":"markdown"},"source":{"15252973":"!pip install -q \"monai-weekly[gdown, nibabel, tqdm, itk]\"","f76a3c42":"import os\nimport shutil\nimport tempfile\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport numpy as np\nimport cv2\nfrom sklearn.metrics import classification_report\n\nimport torch\n\nfrom monai.apps import download_and_extract\nfrom monai.config import print_config\nfrom monai.metrics import ROCAUCMetric\nfrom monai.networks.nets import DenseNet121\nfrom monai.transforms import *\nfrom monai.data import Dataset, DataLoader\nfrom monai.utils import set_determinism\n\n#print_config()","f058d23f":"data1_dir = '..\/input\/ramen-images\/Ramen' \ndata2_dir = '..\/input\/spaghetti-images\/Spaghetti' \ndata_dirs = [data1_dir,data2_dir]\nclass_names = ['Ramen','Spaghetti']\nnum_class = len(class_names)","d123c4be":"image_file_list1 = [os.path.join(data1_dir, x) for x in os.listdir(data1_dir)] \nimage_label_list1=[0]*len(image_file_list1)\nimage_file_list2=[os.path.join(data2_dir, x) for x in os.listdir(data2_dir)] \nimage_label_list2=[1]*len(image_file_list2)\n\nprint(image_file_list1[0:3])\nprint(image_label_list1[0:3])","0c3f7579":"image_file_list = np.concatenate([image_file_list1,image_file_list2],0)\nimage_label_list = np.concatenate([image_label_list1,image_label_list2],0)","19fab6cb":"num_total = len(image_label_list)\nprint('Total image count:', num_total)","bb69bd52":"plt.subplots(3,3, figsize=(12,12))\nfor i,k in enumerate(np.random.randint(num_total, size=9)):\n    im = Image.open(image_file_list[k])\n    arr = np.array(im)\n    print(arr.shape)\n    plt.subplot(3,3, i+1)\n    plt.xlabel(class_names[image_label_list[k]])\n    plt.imshow(arr, cmap='gray', vmin=0, vmax=255)\nplt.tight_layout()\nplt.show()","57f98d88":"valid_frac, test_frac = 0.1, 0.1\ntrainX,trainY = [],[]\nvalX,valY = [],[]\ntestX,testY = [],[]\n\nfor i in range(num_total):\n    rann = np.random.random()\n    if rann < valid_frac:\n        valX.append(image_file_list[i])\n        valY.append(image_label_list[i])\n    elif rann < test_frac + valid_frac:\n        testX.append(image_file_list[i])\n        testY.append(image_label_list[i])\n    else:\n        trainX.append(image_file_list[i])\n        trainY.append(image_label_list[i])\n\nprint(len(trainX),len(valX),len(testX))","b031b243":"trainX=np.array(trainX)\ntrainY=np.array(trainY)\nvalX=np.array(valX)\nvalY=np.array(valY)\ntestX=np.array(testX)\ntestY=np.array(testY)","68342d91":"class SumDimension(Transform):\n    def __init__(self, dim=1):\n        self.dim = dim\n\n    def __call__(self, inputs):\n        return inputs.sum(self.dim)","d0505f4a":"class MyResize(Transform):\n    def __init__(self, size=(100,100)):\n        self.size = size\n    def __call__(self, inputs):\n        image2=cv2.resize(inputs,dsize=(self.size[1],self.size[0]),interpolation=cv2.INTER_CUBIC)\n        return image2","919b37ae":"class Astype(Transform):\n    def __init__(self, type='uint8'):\n        self.type = type\n    def __call__(self, inputs):\n        return inputs.astype(self.type)","a0dfce90":"train_transforms = Compose([\n    LoadImage(image_only=True),\n    Resize((-1,1)),\n    Astype(),\n    SumDimension(2),\n    Astype(),\n    MyResize(),\n    AddChannel(),    \n    ToTensor(),\n])\n\nval_transforms = Compose([\n    LoadImage(image_only=True),\n    Resize((-1,1)),\n    Astype(),\n    SumDimension(2),\n    Astype(),\n    MyResize(),\n    AddChannel(),    \n    ToTensor(),\n])\n\nact = Activations(softmax=True)\nto_onehot = AsDiscrete(to_onehot=True, n_classes=num_class)","ec116153":"class MedNISTDataset(Dataset):\n    \n    def __init__(self, image_files, labels, transforms):\n        self.image_files = image_files\n        self.labels = labels\n        self.transforms = transforms\n\n    def __len__(self):\n        return len(self.image_files)\n\n    def __getitem__(self, index):\n        return self.transforms(self.image_files[index]), self.labels[index]","6ef2979b":"train_ds = MedNISTDataset(trainX, trainY, train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=64, shuffle=True, num_workers=2)\n\nval_ds = MedNISTDataset(valX, valY, val_transforms)\nval_loader = DataLoader(val_ds, batch_size=64, num_workers=2)\n\ntest_ds = MedNISTDataset(testX, testY, val_transforms)\ntest_loader = DataLoader(test_ds, batch_size=64, num_workers=2)","cf2e10b4":"device = torch.device(\"cuda:0\")   #\"cuda:0\"\nmodel = DenseNet121(\n    spatial_dims=2,            \n    in_channels=1,\n    out_channels=num_class,\n).to(device)\n\nloss_function = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), 1e-5)\nepoch_num = 20\nval_interval = 1","da1bcc2e":"best_metric = -1\nbest_metric_epoch = -1\nepoch_loss_values = list()\nauc_metric = ROCAUCMetric()\nmetric_values = list()\n\nfor epoch in range(epoch_num):\n    print('-' * 10)\n    print(f\"epoch {epoch + 1}\/{epoch_num}\")\n    model.train()\n    epoch_loss = 0\n    step = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[0].to(device), batch_data[1].to(device)\n        optimizer.zero_grad()\n        outputs = model(inputs.float())     ##### \n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item()\n        print(f\"{step}\/{len(train_ds) \/\/ train_loader.batch_size}, train_loss: {loss.item():.4f}\")\n        epoch_len = len(train_ds) \/\/ train_loader.batch_size\n\n    epoch_loss \/= step\n    epoch_loss_values.append(epoch_loss)\n    print(f\"epoch {epoch + 1} average loss: {epoch_loss:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            y_pred = torch.tensor([], dtype=torch.float32, device=device)\n            y = torch.tensor([], dtype=torch.long, device=device)\n            for val_data in val_loader:\n                val_images, val_labels = val_data[0].to(device), val_data[1].to(device)\n                y_pred = torch.cat([y_pred, model(val_images.float())], dim=0)\n                y = torch.cat([y, val_labels], dim=0)\n                \n            y_onehot = [to_onehot(i) for i in y]\n            y_pred_act = [act(i) for i in y_pred]\n            auc_metric(y_pred_act, y_onehot)\n            auc_result = auc_metric.aggregate()\n            auc_metric.reset()\n            del y_pred_act, y_onehot\n            metric_values.append(auc_result)\n            acc_value = torch.eq(y_pred.argmax(dim=1), y)\n            acc_metric = acc_value.sum().item() \/ len(acc_value)\n            \n            if acc_metric > best_metric:\n                best_metric = acc_metric\n                best_metric_epoch = epoch + 1\n                torch.save(model.state_dict(), 'best_metric_model.pth')\n                print('saved new best metric model')\n                \n            print(f\"current epoch: {epoch + 1} current AUC: {auc_result:.4f}\"\n                  f\" current accuracy: {acc_metric:.4f} best AUC: {best_metric:.4f}\"\n                  f\" at epoch: {best_metric_epoch}\")\n            \nprint(f\"train completed, best_metric: {best_metric:.4f} at epoch: {best_metric_epoch}\")\n","929ee1e5":"plt.figure('train', (12, 6))\nplt.subplot(1, 2, 1)\nplt.title(\"Epoch Average Loss\")\nx = [i + 1 for i in range(len(epoch_loss_values))]\ny = epoch_loss_values\nplt.xlabel('epoch')\nplt.plot(x, y)\nplt.subplot(1, 2, 2)\nplt.title(\"Validation: Area under the ROC curve\")\nx = [val_interval * (i + 1) for i in range(len(metric_values))]\ny = metric_values\nplt.xlabel('epoch')\nplt.plot(x, y)\nplt.show()","ce72dd3e":"model.load_state_dict(torch.load('best_metric_model.pth'))\nmodel.eval()\ny_true = list()\ny_pred = list()\n\nwith torch.no_grad():\n    for test_data in test_loader:\n        test_images, test_labels = test_data[0].to(device), test_data[1].to(device)\n        pred = model(test_images.float()).argmax(dim=1)\n        for i in range(len(pred)):\n            y_true.append(test_labels[i].item())\n            y_pred.append(pred[i].item())","52e06ba2":"print(classification_report(y_true, y_pred, target_names=class_names, digits=4))","8b51d6cb":"## Install MONAI","8d3d9133":"## Prepare training, validation and test data lists","d7f79a86":"## Plot the loss and metric","cdc45146":"## Define MONAI transforms, Dataset and Dataloader to pre-process data","1d3cd3bb":"# Ramen\/Spaghetti Classify MONAI Pytorch\nThis notebook referred to MONAI's Image Classification Tutorial with the MedNIST Dataset<br\/>\nhttps:\/\/colab.research.google.com\/drive\/1wy8XUSnNWlhDNazFdvGBHLfdkGvOHBKe","ebbbbb33":"## Visualise some examples","e10a2cf0":"## Read image filenames from the dataset folders"}}