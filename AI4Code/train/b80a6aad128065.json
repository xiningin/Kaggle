{"cell_type":{"c1371b8a":"code","11a0d94c":"code","c2c62074":"code","905bcbd8":"code","c6aa66c0":"code","ec1c67b6":"code","d955e7d9":"code","a1e48730":"code","1d8376b2":"code","af926056":"code","0bf466d2":"code","65b6080e":"code","0c816438":"code","e949b745":"code","ee0dc2cc":"code","c7f692fe":"code","94e29288":"code","57b76aa8":"markdown","f9153d1d":"markdown","251f127d":"markdown","84034326":"markdown","85e6fd8b":"markdown","8b4382a0":"markdown"},"source":{"c1371b8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11a0d94c":"airbnb = pd.read_csv(\"..\/input\/us-airbnb-open-data\/AB_US_2020.csv\")\n","c2c62074":"airbnb.head()","905bcbd8":"airbnb.info()","c6aa66c0":"airbnb.isnull().sum()","ec1c67b6":"import seaborn as sns\nsns.barplot(x='room_type',y='price',data=airbnb,palette='spring')\n","d955e7d9":"sns.lmplot(x='number_of_reviews',y='price',data=airbnb, palette='spring')\n","a1e48730":"airbnb['neighbourhood_group'].fillna('Others',inplace=True)\nairbnb.drop(['name','host_name'],axis=1,inplace=True)\nairbnb['last_review'] = pd.to_datetime(airbnb['last_review'],infer_datetime_format=True)\nairbnb['reviews_per_month'].fillna(airbnb['reviews_per_month'].mean(),inplace=True)\nairbnb[\"last_review\"] = airbnb[\"last_review\"].replace(np.nan, airbnb[\"last_review\"].mode().iloc[0])\nairbnb.drop(['id','host_id'],axis=1,inplace=True)\n","1d8376b2":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nairbnb['neighbourhood_group'] = label_encoder.fit_transform(airbnb['neighbourhood_group'])\nairbnb['neighbourhood'] = label_encoder.fit_transform(airbnb['neighbourhood'])\nairbnb['room_type'] = label_encoder.fit_transform(airbnb['room_type'])\nairbnb['city'] = label_encoder.fit_transform(airbnb['city'])","af926056":"plt.rcParams['figure.figsize']=12,12\ng = sns.heatmap(airbnb.corr(),annot=True)\n\n","0bf466d2":"import datetime \nairbnb['last_review'] = airbnb['last_review'].map(datetime.datetime.toordinal)\n","65b6080e":"from scipy import stats\nz_scores = stats.zscore(airbnb)\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\nnew_airbnb = airbnb[filtered_entries]","0c816438":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n#scaler.fit(new_df)\nscaled_features = scaler.fit_transform(new_airbnb)\nscaled_features_airbnb = pd.DataFrame(scaled_features, index=new_airbnb.index, columns=new_airbnb.columns)","e949b745":"scaled_features_airbnb.head()\n\n","ee0dc2cc":"from sklearn.model_selection import train_test_split\nX = scaled_features_airbnb.drop('price',axis=1)\ny = scaled_features_airbnb['price']\nX_train, X_test, y_train, y_test = train_test_split(X,y , test_size = 0.2, random_state=42)\n","c7f692fe":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 200, random_state = 0)\nmodel=regressor.fit(X_train, y_train)  \ny1 = model.predict(X_test)","94e29288":"from sklearn.metrics import mean_squared_error,r2_score\nimport math\nprint('MSE',mean_squared_error(y_test, y1))\nprint('RMSE',math.sqrt(mean_squared_error(y_test, y1)))\nprint('Adj R^2 value:',1 - (1-regressor.score(X_test, y_test))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))","57b76aa8":"Here I have used LabelEncoder for categorical variable. ","f9153d1d":"**SPLITTING OF DATA**","251f127d":"Here we dropped 'name' and 'host_name' as price don't depend on them. And change the format of 'last_review'. And replaced the missing values of 'reviews_per_month' with it's mean value. ","84034326":"Here we can see that price depends on the type of room and shared room are of lowest price and hotel room are of highest price.","85e6fd8b":"**I have used RandomForestRegressor to get RMSE of 0.77 which can be further improved to a better value.I have dropped some attributes with null values and used One hot encoding for categorical data.**","8b4382a0":"**RANDOM FOREST REGRESSOR**"}}