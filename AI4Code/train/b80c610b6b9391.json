{"cell_type":{"e336f102":"code","548243d1":"code","cec6e4a0":"code","96fd82e4":"code","66255eaf":"code","091bed96":"code","87c1d9ee":"code","60a5ce50":"code","a05a2ce4":"code","72d9efb8":"code","8c178f58":"code","a69f220e":"code","87db1be3":"code","0201b6ed":"code","574e36ad":"code","59ae9d95":"code","37c2494e":"code","7102b28c":"code","05253b68":"code","16126813":"code","8167cc65":"code","34ca3246":"code","ed0898f5":"code","a8d88ea6":"code","a2a1a1df":"markdown","46cf3269":"markdown","f61ca3fe":"markdown","67f8d56a":"markdown","7ece7763":"markdown"},"source":{"e336f102":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","548243d1":"data = pd.read_csv('..\/input\/Mall_Customers.csv')\n#data.head()\n#data.info()","cec6e4a0":"#Change from Male and Female to 0-1 \ndata.Gender = [1 if each == \"Female\" else 0 for each in data.Gender ]","96fd82e4":"data = data.rename(columns={'Annual Income (k$)':'annual_income','Spending Score (1-100)':'Spending_Score'})\ndata.describe()","66255eaf":"trace1= go.Scatter(\n    x= data.Age,\n    y= data.Spending_Score,\n    mode = 'markers',\n    xaxis='x1',\n    yaxis='y1',\n    name=\"Spending Score\"\n\n)\n\ndata1=[trace1]\n\nlayout = dict(title='Comparison of Feature',\n             xaxis= dict(title= 'Age',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Spending Score',ticklen= 5,zeroline= False))\n\niplot(go.Figure(data=data1, layout=layout))","091bed96":"trace2= go.Scatter(\n    x= data.Age,\n    y= data.annual_income,\n    mode = 'markers',\n    xaxis='x2',\n    yaxis='y2',\n    name=\"annual income\"\n)\n\ndata1=[trace2]\n\nlayout = dict(title='Comparison of Feature',\n             xaxis= dict(title= 'Age',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Annual Income',ticklen= 5,zeroline= False))\n\niplot(go.Figure(data=data1, layout=layout))","87c1d9ee":"trace3= go.Scatter(\n    x= data.Spending_Score,\n    y= data.annual_income,\n    mode = 'markers',\n    xaxis='x3',\n    yaxis='y3',\n    name=\"annual income\"\n)\n\ndata1=[trace3]\n\nlayout = dict(title='Comparison of Feature',\n             xaxis= dict(title= 'Spending Score',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Annual Income',ticklen= 5,zeroline= False))\n\niplot(go.Figure(data=data1, layout=layout))","60a5ce50":"x1 = data[['Age' , 'Spending_Score']].iloc[: , :].values\nx2 = data[['Age' , 'annual_income']].iloc[: , :].values\nx3 = data[['annual_income' , 'Spending_Score']].iloc[: , :].values","a05a2ce4":"#select K value\n\nfrom sklearn.cluster import KMeans\nWCSS = []\n\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(x1)\n    WCSS.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),WCSS)\nplt.xlabel(\"Number of K Value(Cluster)\")\nplt.ylabel(\"WCSS\")\nplt.grid()\nplt.show()","72d9efb8":"kmean2 =KMeans(n_clusters = 4 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan')\nclusters = kmean2.fit_predict(x1) #create to model with k =3 #fit_predict= fitting and predict data\nlabels1 = kmean2.labels_\ncentroids1 = kmean2.cluster_centers_","8c178f58":"h = 0.02\nx_min, x_max = x1[:, 0].min() - 1, x1[:, 0].max() + 1\ny_min, y_max = x1[:, 1].min() - 1, x1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = kmean2.predict(np.c_[xx.ravel(), yy.ravel()]) ","a69f220e":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age' ,y = 'Spending_Score' , data = data , c = labels1 , \n            s = 200 )\nplt.scatter(x = centroids1[: , 0] , y =  centroids1[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending_Score') , plt.xlabel('Age')\nplt.grid()\nplt.title(\"Spending Score & Age Clustering\")\nplt.show()","87db1be3":"#select K value\n\nfrom sklearn.cluster import KMeans\nWCSS = []\n\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(x2)\n    WCSS.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),WCSS)\nplt.xlabel(\"Number of K Value(Cluster)\")\nplt.ylabel(\"WCSS\")\nplt.grid()\nplt.show()","0201b6ed":"algorithm = (KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(x2)\nlabels3 = algorithm.labels_\ncentroids3 = algorithm.cluster_centers_","574e36ad":"h = 0.02\nx_min, x_max = x2[:, 0].min() - 1, x2[:, 0].max() + 1\ny_min, y_max = x2[:, 1].min() - 1, x2[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","59ae9d95":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ2 = Z2.reshape(xx.shape)\nplt.imshow(Z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Age' ,y = 'annual_income' , data = data , c = labels3 , \n            s = 200 )\nplt.scatter(x = centroids3[: , 0] , y =  centroids3[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Age') , plt.xlabel('Annual Income (k$)')\nplt.grid()\nplt.title(\"Age & Annual Income Clustering\")\nplt.show()","37c2494e":"#select K value\n\nfrom sklearn.cluster import KMeans\nWCSS = []\n\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(x3)\n    WCSS.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),WCSS)\nplt.xlabel(\"Number of K Value(Cluster)\")\nplt.ylabel(\"WCSS\")\nplt.grid()\nplt.show()","7102b28c":"algorithm = (KMeans(n_clusters = 5 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(x3)\nlabels2 = algorithm.labels_\ncentroids2 = algorithm.cluster_centers_","05253b68":"h = 0.02\nx_min, x_max = x3[:, 0].min() - 1, x3[:, 0].max() + 1\ny_min, y_max = x3[:, 1].min() - 1, x3[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","16126813":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ2 = Z2.reshape(xx.shape)\nplt.imshow(Z2 , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'annual_income' ,y = 'Spending_Score' , data = data , c = labels2 , \n            s = 200 )\nplt.scatter(x = centroids2[: , 0] , y =  centroids2[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Spending Score (1-100)') , plt.xlabel('Annual Income (k$)')\nplt.grid()\nplt.title(\"Spending Score & Age Clustering\")\nplt.show()","8167cc65":"from scipy.cluster.hierarchy import linkage,dendrogram\n\nmerg = linkage(x1,method=\"ward\")\ndendrogram(merg,leaf_rotation = 90)\nplt.xlabel(\"Data Points\")\nplt.ylabel(\"Euclidean Distance\")\nplt.show()","34ca3246":"from sklearn.cluster import AgglomerativeClustering\n\nHC = AgglomerativeClustering(n_clusters = 3, affinity = \"euclidean\",linkage=\"ward\")\ncluster = HC.fit_predict(x1)","ed0898f5":"data[\"x1_label\"] = cluster #add clusters to data","a8d88ea6":"plt.scatter(data.Age[data.x1_label == 0],data.Spending_Score[data.x1_label == 0],color=\"orange\")\nplt.scatter(data.Age[data.x1_label == 1],data.Spending_Score[data.x1_label == 1],color=\"lime\")\nplt.scatter(data.Age[data.x1_label == 2],data.Spending_Score[data.x1_label == 2],color=\"red\")\nplt.grid()\nplt.show()","a2a1a1df":"# Read Data","46cf3269":"# Import Libraries","f61ca3fe":"# Hierarchical Clustering","67f8d56a":"# Pre-investigation of Features","7ece7763":"# K-Means Clustering\n## Data Seperation "}}