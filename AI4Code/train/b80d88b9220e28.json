{"cell_type":{"8488fd73":"code","a08ba182":"code","605f646d":"code","36378244":"code","2c8b5a1a":"code","45d571da":"code","4bc599bd":"code","1f6311ed":"code","e00cbe9e":"code","663be79e":"code","cae24a5f":"code","4c3de547":"code","5b785b99":"code","b68a28bd":"code","c9d89ecb":"code","7cdedad2":"code","09842d10":"code","a174c0f4":"code","a65cd70f":"code","b51cdac3":"markdown"},"source":{"8488fd73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a08ba182":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain","605f646d":"from collections import Counter\nnum_col = train.loc[:,'MSSubClass':'SaleCondition'].select_dtypes(exclude=['object']).columns\n# Outlier detection \n\ndef detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = detect_outliers(train,2, num_col)\ntrain.loc[Outliers_to_drop] # Show the outliers rows","36378244":"# Drop outliers\ntrain = train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","2c8b5a1a":"test_id = test.Id\ntrain_target = train.SalePrice","45d571da":"df = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'], test.loc[:,'MSSubClass':'SaleCondition']))","4bc599bd":"# before tuning\n\ndef basic_details(df):\n    b = pd.DataFrame()\n    b['Missing value, %'] = round(df.isnull().sum()\/df.shape[0]*100)\n    b['N unique value'] = df.nunique()\n    b['dtype'] = df.dtypes\n    return b\n\nbasic_details(df)","1f6311ed":"# simplest NaN imputation\n\nfor col in df:\n    if df[col].dtype == 'object':        \n        df[col].fillna('N', inplace=True)\n    else: df[col].fillna(df[col].median(), inplace=True)","e00cbe9e":"df.shape","663be79e":"columns = [i for i in df.columns]\ndummies = pd.get_dummies(df,columns=columns, drop_first=True,sparse=True)","cae24a5f":"train = dummies.iloc[:train.shape[0], :]\ntest = dummies.iloc[train.shape[0]:, :]","4c3de547":"train = train.sparse.to_coo().tocsr()\ntest = test.sparse.to_coo().tocsr()","5b785b99":"train","b68a28bd":"#creating matrices for feature selection:\nX = train\ny = train_target","c9d89ecb":"#creating matrices for feature selection:\n\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nx_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=10)\n\nd_train = xgb.DMatrix(x_train, label=y_train)\nd_valid = xgb.DMatrix(x_valid, label=y_valid)\nd_test = xgb.DMatrix(test)","7cdedad2":"params = {\n        'objective':'reg:linear',\n        'n_estimators': 1000,\n        'booster':'gbtree',\n        'max_depth':4,\n        'eval_metric':'mae',\n        'learning_rate':0.05, \n        'min_child_weight':1,\n        'subsample':0.7,\n        'colsample_bytree':0.81,\n        'seed':45,\n        'reg_alpha':1e-05,\n        'gamma':0,\n        'nthread':-1\n\n}\n\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\n\nclf = xgb.train(params, d_train, 5000, watchlist, early_stopping_rounds=300, maximize=False, verbose_eval=10)\n\np_test = clf.predict(d_test)","09842d10":"leaks = {\n1461:105000,\n1477:290941,\n1492:67500,\n1494:362500,\n1514:84900,\n1521:108538,\n1531:80400,\n1537:12789,\n1540:76500,\n1545:134000,\n1554:122000,\n1556:107500,\n1557:100000,\n1559:93369,\n1560:114900,\n1566:270000,\n1567:85000,\n1572:128000,\n1573:308030,\n1575:270000,\n1586:84900,\n1587:155891,\n1589:64000,\n1595:100000,\n1597:215000,\n1603:50138,\n1610:174000,\n1611:169000,\n1615:76000,\n1616:88250,\n1617:85500,\n1620:159000,\n1622:161000,\n1631:240000,\n1638:154000,\n1650:76500,\n1652:111000,\n1661:462000,\n1664:610000,\n1666:296000,\n1678:552000,\n1696:245000,\n1698:327000,\n1712:264500,\n1717:152000,\n1720:203000,\n1726:171500,\n1727:145000,\n1737:275000,\n1767:256000,\n1774:135000,\n1786:142900,\n1787:156500,\n1788:59000,\n1790:78500,\n1793:163000,\n1807:103500,\n1814:80000,\n1820:58500,\n1823:44000,\n1831:179900,\n1832:62500,\n1835:97500,\n1837:70000,\n1842:63000,\n1843:113500,\n1863:269500,\n1864:269500,\n1892:85000,\n1895:103500,\n1912:315000,\n1913:123000,\n1915:230000,\n1916:57625,\n1925:170000,\n1946:115000,\n1947:334000,\n1967:317500,\n1970:390000,\n1971:460000,\n1975:615000,\n1976:284000,\n1996:284500,\n1997:291000,\n2004:297900,\n2014:163000,\n2030:300000,\n2031:285000,\n2032:290000,\n2033:305000,\n2038:345000,\n2052:140000,\n2055:141500,\n2068:146000,\n2076:94000,\n2086:143000,\n2093:122250,\n2099:46500,\n2100:65000,\n2101:139500,\n2106:55000,\n2107:184000,\n2111:108000,\n2152:260000,\n2162:475000,\n2163:395039,\n2180:185000,\n2185:165000,\n2206:104000,\n2207:257076,\n2208:263400,\n2211:126000,\n2217:13100,\n2220:65000,\n2223:300000,\n2227:241500,\n2230:172500,\n2232:150000,\n2235:195000,\n2236:298751,\n2238:209200,\n2239:146000,\n2245:94900,\n2251:103000,\n2263:349265,\n2264:591587,\n2267:441929,\n2268:455000,\n2269:174000,\n2288:322400,\n2295:500067,\n2342:260000,\n2354:146000,\n2362:300000,\n2375:279700,\n2376:255000,\n2379:240050,\n2380:162500,\n2395:224500,\n2404:175000,\n2419:115000,\n2437:125500,\n2455:136500,\n2461:132000,\n2465:165000,\n2466:90000,\n2468:113000,\n2469:117000,\n2474:50000,\n2495:109900,\n2544:110000,\n2550:183850,\n2557:79275,\n2564:238000,\n2565:153500,\n2572:200000,\n2574:315000,\n2583:375000,\n2590:244000,\n2591:257000,\n2599:392000,\n2610:138000,\n2611:80000,\n2617:169000,\n2618:252000,\n2627:130000,\n2631:535000,\n2632:401179,\n2634:470000,\n2638:294323,\n2658:344133,\n2673:246990,\n2690:405749,\n2702:129500,\n2723:157500,\n2741:132000,\n2752:167000,\n2754:180000,\n2760:80000,\n2775:111500,\n2776:156500,\n2779:111500,\n2788:64000,\n2793:202500,\n2794:75000,\n2805:125000,\n2813:156500,\n2823:415000,\n2829:224500,\n2832:233555,\n2859:98000,\n2866:134000,\n2872:35000,\n2873:121000,\n2881:195000,\n2916:71000,\n2917:131000,\n2919:188000\n}","a174c0f4":"sub = pd.DataFrame()\nsub['Id'] = test_id\nsub['SalePrice'] = p_test\nsub['SalePrice'] = sub.apply(lambda r: leaks[int(r['Id'])] if int(r['Id']) in leaks else r['SalePrice'], axis=1)\nsub.to_csv('submission.csv', index=False)","a65cd70f":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize=(12,18))\nxgb.plot_importance(clf,ax=ax,max_num_features=20, height=0.8,color='g')\nplt.tight_layout()\nplt.show()","b51cdac3":"Reffered to my previous works:\nhttps:\/\/www.kaggle.com\/dmkravtsov\/3-2-house-prices\nand \nhttps:\/\/www.kaggle.com\/dmkravtsov\/6-0-cats-challenge"}}