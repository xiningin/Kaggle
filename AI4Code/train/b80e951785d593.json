{"cell_type":{"fdf31d5e":"code","dd7fb27f":"code","52609dd6":"code","02820b76":"code","7cd3a8af":"code","07e4ebc2":"code","0b4d5468":"code","6c26204c":"code","c106ccd8":"code","3a69dc5f":"code","e22ceb33":"code","94faa810":"code","cea15084":"markdown","4bed8bff":"markdown","ac1c33af":"markdown","8fafcbd9":"markdown","cd3888c3":"markdown","22e4e3ee":"markdown","ccefa9b0":"markdown","658d7133":"markdown"},"source":{"fdf31d5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom glob import glob\n\nimport datetime as dt\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import linear_model\n\nfrom ipywidgets import interact\n\nfrom IPython.core.pylabtools import figsize\n\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dd7fb27f":"figsize(15, 9)\nfigsize(15, 9)\n\nsns.set()\n\npd.set_option('display.max_columns', 50)\n\nSMALL_SIZE = 14\nMEDIUM_SIZE = 16\nBIGGER_SIZE = 18\n\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title","52609dd6":"data_dir = \"\/kaggle\/input\/demographic-data\/\"","02820b76":"country_map = {\n    'US': 'United States',\n    'United States of America': 'United States',\n    'Czechia': 'Czech_Republic',\n    'UK': 'United_Kingdom',\n    'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',\n    'Hong Kong SAR': 'Hong Kong',\n    'Russian Federation': 'Russia',\n    'Mainland China': 'China',\n    'Korea, South': 'South Korea',\n    'Republic of Korea': 'South Korea',\n}","7cd3a8af":"P_SEVERE = 0.2 #WHO stats on people that require hosptialization\nP_CRITICAL = 0.047","07e4ebc2":"def get_line(line):\n    return [x.strip() for x in line.split(',')]\n\ndef to_num(x):\n    try:\n        return float(x)\n    except:\n        return None\n\nnew_bed = os.path.join(data_dir, 'beds per 1000 data.csv')\nnew_rows =[]\nwith open(new_bed, 'r') as infile:\n    headers = get_line(next(infile))\n    for line in infile:\n        split_liness = get_line(line)\n        #print(split_liness)\n        rowd = dict(zip(headers, split_liness))\n        new_rows.append(rowd)\nnew_beds_df = pd.DataFrame(new_rows)\nnew_beds_df ['beds_p_1k'] = pd.to_numeric(new_beds_df['beds per 1000'], errors='coerce')\nnew_beds_df = new_beds_df.replace(np.nan, 0, regex=True)\nnew_beds_df['Country'] = new_beds_df['country']\nnew_beds_df = new_beds_df[['Country', 'beds_p_1k']].copy()\nnew_beds_df[new_beds_df['Country'].isin(['Malaysia', 'South Korea', 'Fiji'])]","0b4d5468":"pop_df = pd.read_csv(os.path.join(data_dir, 'population.csv'))\npop_df['Country'] = pop_df['Country or area']\npop_df['population'] = pop_df['Population(1 July 2019)'].map(lambda x: x.replace(',', '')).astype('int')\npop_df = pop_df[['Country', 'population']].copy()\n\npop_df['Country'] = pop_df['Country'].str.replace(r\"\\(.*\\)\", \"\")\npop_df['Country'] = pop_df['Country'].str.replace(r\"\\[.*\\]\", \"\")\npop_df['Country'] = pop_df['Country'].str.replace('_', ' ', regex=True)\npop_df[pop_df['Country'].isin(['Antigua and Barbuda', 'South Korea', 'Botswana'])]","6c26204c":"new_merged_static = new_beds_df.merge(pop_df, on='Country', how='inner')\nnew_merged_static['beds'] = ((new_merged_static['beds_p_1k'] \/ 1000.0) * new_merged_static['population']).astype(int)\nnew_merged_static['available_beds'] = (new_merged_static['beds'] * (1\/4)).astype(int) # assuming 75% occupancy rates\nnew_merged_static","c106ccd8":"\ncovid_time_series_confirmed_path = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\n\ncovid_time_series_recovered_path = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\n\ncovid_time_series_death_path = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\n\n\nconfirmed_df = pd.read_csv(covid_time_series_confirmed_path).drop(['Lat', 'Long'], axis=1)\nconfirmed_df = \\\n    confirmed_df\\\n        .rename(columns={'Province\/State': 'State', 'Country\/Region': 'Country'})\\\n        .melt(['State', 'Country'], var_name='Date', value_name='Confirmed')\\\n        .copy()\n\nrecovered_df = pd.read_csv(covid_time_series_recovered_path).drop(['Lat', 'Long'], axis=1)\nrecovered_df = \\\n    recovered_df\\\n        .rename(columns={'Province\/State': 'State', 'Country\/Region': 'Country'})\\\n        .melt(['State', 'Country'], var_name='Date', value_name='Recovered')\\\n        .copy()\n\ndeaths_df = pd.read_csv(covid_time_series_death_path).drop(['Lat', 'Long'], axis=1)\ndeaths_df = \\\n    deaths_df\\\n        .rename(columns={'Province\/State': 'State', 'Country\/Region': 'Country'})\\\n        .melt(['State', 'Country'], var_name='Date', value_name='Deaths')\\\n        .copy()\n\nMERGE_COLS = ['State', 'Country', 'Date']\ncovid_df = \\\n    confirmed_df\\\n        .merge(recovered_df, on=MERGE_COLS)\\\n        .merge(deaths_df, on=MERGE_COLS)\n\ncovid_df = covid_df[covid_df[['Confirmed', 'Recovered', 'Deaths']].notnull().values.all(axis=1)]\ncovid_df['Active'] = covid_df['Confirmed'] - covid_df['Deaths'] - covid_df['Recovered']\ncovid_df['Severe'] = (covid_df['Active'] * P_SEVERE).astype('int64')\ncovid_df['Critical'] = (covid_df['Active'] * P_CRITICAL).astype('int64')\ncovid_df['Country'] = covid_df['Country'].map(lambda x: country_map.get(x, x.strip())) #rename some countries\ncovid_df['Date'] = pd.to_datetime(covid_df['Date']).dt.date\ncovid_df = covid_df.groupby(['Country', 'Date']).sum().reset_index().copy() #group countries, arrange by date\ncovid_df['Date'] = pd.to_datetime(covid_df['Date']) \n\ncovid_df[covid_df['Country'] == 'Botswana']","3a69dc5f":"countries = sorted(new_merged_static['Country'].unique())\n\nLINEWIDTH=6\n\ndef show(country, log, forecast, beds, scale):\n    \n    \n    sns.set(font_scale=1.5)\n    country_data_df = \\\n        covid_df[covid_df['Country'] == country]\\\n            .groupby(['Country', 'Date'])\\\n            .sum()\\\n            .reset_index()\n\n    _, row = next(country_data_df.head(1).iterrows())\n    first_date = row['Date']\n    \n    N_DAYS = 7\n    last_week = country_data_df.tail(N_DAYS)\n    _, row = next(last_week.head(1).iterrows())\n\n    first_date_last_week = row['Date']\n    last_week_indices = list(range(N_DAYS))\n    \n    _, row = next(new_merged_static[new_merged_static['Country']==country].iterrows())\n    available_beds = row['available_beds']\n    \n    if forecast:\n        model = linear_model.LinearRegression()\n        try:\n            model.fit([[i] for i in last_week_indices], np.log(last_week['Severe'])) \n        except: \n            print('fail')\n        #based on last 7 days of data, fit log(number of cases) into a linear regression\n\n        if available_beds and pd.notnull(available_beds):\n            try:\n                N_DAYS_PREDICT = int((np.log(available_beds) - model.intercept_)\/model.coef_) + 5\n            except: \n                print(country)\n            #predicted days = ((log(available beds) - regression intercept)\/regression coef) + 5\n     \n                N_DAYS_PREDICT = 4 * N_DAYS #fixed 4 weeks if no predicted value\n\n        next_week_indices = list(range(N_DAYS, N_DAYS_PREDICT))\n        next_week = list(np.exp(model.predict([[i] for i in next_week_indices])))\n        #using exponential model, predict values for each day until the day where it hits capacity\n        next_week = [scale * n for n in next_week]\n        #to adjust the scale of the graph\n        \n    else:\n        next_week_indices = [N_DAYS]\n        next_week = None\n    \n    predict_df = pd.DataFrame()\n    predict_df['Date'] = pd.to_datetime([\n        first_date_last_week + dt.timedelta(days=i) for i in next_week_indices\n    ])\n    predict_df['Country'] = country\n    predict_df['Forecast'] = next_week\n    \n    concat_df = \\\n        country_data_df\\\n            .merge(predict_df, on=['Date', 'Country'], how='outer')\\\n            .assign(available_beds=available_beds)\\\n            .reset_index(drop=True)\n    \n    concat_df['Date'] = concat_df['Date'].dt.date\n    concat_df.set_index('Date', inplace=True)\n    \n    ax = concat_df['Severe'].plot(logy=log, lw=LINEWIDTH, style='r-', use_index=True)\n    \n    positions = [p for p in concat_df.index if p.weekday() == 0]\n    labels = [l.strftime('%m-%d') for l in positions]\n    \n    \n    \n    if forecast:\n        concat_df['Forecast'].plot(logy=log, lw=LINEWIDTH, use_index=True, style='ro')\n    \n    if beds:\n        concat_df['available_beds'].plot(logy=log, lw=LINEWIDTH, style='k--', xticks=[], use_index=True)\n        ax.annotate(\n            'Available Beds = {}'.format(int(available_beds)),\n            (first_date, available_beds),\n            fontsize=18,\n            color='darkslategray',\n            xytext=(10, -20),\n            textcoords='offset points'\n    )\n    if forecast:\n        plt.title(\n            country+': Approximately {} days till hospitals exceed bed capacity'.format(N_DAYS_PREDICT - N_DAYS),\n            fontsize=BIGGER_SIZE,\n        )\n    ax.set_xticks(positions)\n    ax.set_xticklabels(labels)\n    ax.set_facecolor(\"lightblue\")\n    plt.ylabel('Severe Cases')\n    plt.show()\n    #predict_df\ninteract(show, country=countries, log=False, forecast=True, beds=True, scale=1.0)","e22ceb33":"countries = sorted(new_merged_static['Country'].unique())\n\nLINEWIDTH=6\n\nglobal df\ndf = pd.DataFrame()\n\n\nforecast = True;\nfor country in countries:\n    try:\n\n#sns.set(font_scale=1.5)\n        country_data_df = \\\n            covid_df[covid_df['Country'] == country]\\\n                .groupby(['Country', 'Date'])\\\n                .sum()\\\n                .reset_index()\n\n        _, row = next(country_data_df.head(1).iterrows())\n        first_date = row['Date']\n\n        N_DAYS = 7\n        last_week = country_data_df.tail(N_DAYS)\n        _, row = next(last_week.head(1).iterrows())\n\n        first_date_last_week = row['Date']\n        last_week_indices = list(range(N_DAYS))\n\n        _, row = next(new_merged_static[new_merged_static['Country']==country].iterrows())\n        available_beds = row['available_beds']\n\n        if forecast:\n            model = linear_model.LinearRegression()\n\n            model.fit([[i] for i in last_week_indices], np.log(last_week['Severe'])) \n\n            #based on last 7 days of data, fit log(number of cases) into a linear regression\n\n            if available_beds and pd.notnull(available_beds):\n\n                N_DAYS_PREDICT = int((np.log(available_beds) - model.intercept_)\/model.coef_) + 5\n                #predicted days = ((log(available beds) - regression intercept)\/regression coef) + 5\n            else:\n                N_DAYS_PREDICT = 4 * N_DAYS #fixed 4 weeks if no predicted value\n                \n            next_week_indices = list(range(N_DAYS, N_DAYS_PREDICT))\n            next_week = list(np.exp(model.predict([[i] for i in next_week_indices])))\n            #using exponential model, predict values for each day until the day where it hits capacity\n            #next_week = [scale * n for n in next_week]\n            #to adjust the scale of the graph\n            next_week_indices = [N_DAYS]\n            next_week = None\n\n        predict_df = pd.DataFrame()\n        predict_df['Date'] = pd.to_datetime([\n                first_date_last_week + dt.timedelta(days=i) for i in next_week_indices\n            ])\n        predict_df['Country'] = country\n        #predict_df['Forecast'] = next_week\n\n        final_df = predict_df[['Country']].copy()\n        final_df['Predicted Days To Shortage'] = N_DAYS_PREDICT - N_DAYS\n        final_df.drop_duplicates(subset =\"Country\", inplace = True)\n        final_df.reset_index()\n        #print(final_df.to_string())\n        df = df.append(final_df)\n        #final_df.info(verbose=True)\n        \n    except: print(country)\n\n","94faa810":"df = df.reset_index(drop= True)\ndf","cea15084":"## Severity Rates\nhttps:\/\/www.worldometers.info\/coronavirus\/coronavirus-symptoms\/#mild \nHonestly, the source seems a little dubious, tentatively we are using WHO numbers. \nCountries like Singapore hospitalize all patients, regardless of severity.","4bed8bff":"## Merge Static Data Sets\n\nAvailable beds based on OECD hospital bed occupancy average of 75% due to lack of data outside OECD countries.","ac1c33af":"## COVID19 Data\nhttps:\/\/github.com\/CSSEGISandData\/COVID-19\nupdated daily, notebook directly pulls from updated source","8fafcbd9":"## Hospital Bed Statistics by Country\nhttps:\/\/www.cia.gov\/library\/publications\/the-world-factbook\/fields\/360.html","cd3888c3":"## [Population By Country](https:\/\/data.un.org\/Data.aspx?d=PopDiv&f=variableID%3a12%3btimeID%3a83%2c84%3bvarID%3a2&c=2,4,6,7&s=_crEngNameOrderBy:asc,_timeEngNameOrderBy:desc,_varEngNameOrderBy:asc&v=1)\n","22e4e3ee":"## Interactive Model","ccefa9b0":"To use the Interactive graph, press copy and edit at the top right, then click on run all. Scroll back down here after. ","658d7133":"Sources:\nhttps:\/\/medium.com\/@dan.monroe.dev\/covid-19-how-long-do-our-hospitals-have-ce2ec49d768d\n"}}