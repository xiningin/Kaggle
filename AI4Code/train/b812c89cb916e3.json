{"cell_type":{"3f17c11e":"code","0c3e5493":"code","760fb756":"code","23bdd89c":"code","357ec85b":"code","c19d62e5":"code","78a9dbd2":"code","17b8e043":"code","bda48623":"code","45859811":"code","9e96c06f":"code","aaf7d327":"code","d2beeebf":"code","b9fc9212":"code","e02a4df4":"code","8304a051":"code","2a72f871":"code","d8d99904":"code","6c3071a3":"code","400c1cd6":"code","4ef0a47e":"markdown","2270d2ff":"markdown","277609d9":"markdown","e97a123b":"markdown","4076d3b4":"markdown","569ca363":"markdown","846d1072":"markdown","87dbfc32":"markdown","1246727f":"markdown","8db9c630":"markdown","9698fd46":"markdown","ef75126b":"markdown","e118730c":"markdown","29290839":"markdown","90f71ea4":"markdown","23903024":"markdown","de96061e":"markdown","d96d055e":"markdown","74edc50e":"markdown","394823c5":"markdown"},"source":{"3f17c11e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c3e5493":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')","760fb756":"df = pd.read_csv('\/kaggle\/input\/loan-eligible-dataset\/loan-train.csv')","23bdd89c":"print(df.shape)\nprint(df.columns)\ndf.head()","357ec85b":"groups = ['Gender','Married','Education','Self_Employed','Dependents','Property_Area']\nfig, ax = plt.subplots(3,2, figsize = (12,12))\naxs=ax.ravel()\nfor i, group in enumerate(groups):\n    sns.countplot(x = group, hue = 'Loan_Status',ax=axs[i], data=df)","c19d62e5":"fig, ax = plt.subplots(3,2, figsize = (12,12))\naxs=ax.ravel()\nfor i, group in enumerate(groups):\n    sns.kdeplot(x = 'LoanAmount' , hue = group,ax=axs[i], data=df, fill=True)","78a9dbd2":"fig, ax = plt.subplots(3,2, figsize = (12,12))\naxs=ax.ravel()\nfor i, group in enumerate(groups):\n    sns.kdeplot(x = 'ApplicantIncome' , hue = group,ax=axs[i], data=df, fill=True)","17b8e043":"cont = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount','Loan_Amount_Term']\nfig, ax = plt.subplots(2,2, figsize = (12,10))\naxs=ax.ravel()\nfor i, continuous_group in enumerate(cont):\n    sns.kdeplot(x = continuous_group, hue = 'Loan_Status', ax = axs[i], data = df, fill = True)\n","bda48623":"df.head()","45859811":"fig,ax = plt.subplots(figsize = (8,8))\nsns.heatmap(df.isna(),ax=ax)","9e96c06f":"def dfimputation(df):\n    df['Married'] = df['Married'].apply(lambda x: 0 if x == 'No' else 1 if x == 'Yes' else np.nan)\n    df['Education'] = df['Education'].apply(lambda x: 0 if x == 'Not Graduate' else 1 if x == 'Graduate' else np.nan)\n    df['Self_Employed'] = df['Self_Employed'].apply(lambda x: 0 if x == 'No' else 1 if x == 'Yes' else np.nan)\n    if 'Loan_Status' in df.columns:\n        df['Loan_Status'] = df['Loan_Status'].apply(lambda x: 0 if x == 'N' else 1 if x == 'Y' else np.nan)\n    df['Credit_History'] = df['Credit_History'].apply(lambda x: 'Y' if x == 1 else 'N' if x == 0 else 'Unknown')\n    df['Gender'].fillna(value = 'Unknown\/Other', inplace = True)\n    df['Married'].fillna(value = 0, inplace = True)\n    df['Dependents'].fillna(value = '0', inplace = True)\n    df['Self_Employed'].fillna(value = 0, inplace = True)\n    df['LoanAmount'].fillna(value = df['LoanAmount'].mean(), inplace = True)\n    df['Loan_Amount_Term'].fillna(value = df['Loan_Amount_Term'].mean(), inplace = True)\n    return(df)","aaf7d327":"df = dfimputation(df)","d2beeebf":"print(df.groupby('Credit_History').mean())\nsns.countplot(x = 'Credit_History', hue = 'Loan_Status', data=df)","b9fc9212":"df.drop(['Dependents'],axis=1)","e02a4df4":"from sklearn.preprocessing import OneHotEncoder\nOHEgroups = ['Property_Area','Gender','Dependents','Credit_History']\ndef OHEdf(df):\n    enc = OneHotEncoder(handle_unknown = 'ignore')\n    onehotdf = pd.DataFrame(enc.fit_transform(df[OHEgroups]).toarray(),columns = enc.get_feature_names())\n    dfnew = pd.concat([df.drop(OHEgroups,axis = 1),onehotdf],axis =1)\n    return(dfnew)\ndf = OHEdf(df)\ndf.dtypes","8304a051":"from sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix","2a72f871":"dftest = pd.read_csv('\/kaggle\/input\/loan-eligible-dataset\/loan-test.csv')\ndftest = OHEdf(dfimputation(dftest))\nX_test = df.drop(['Loan_Status','Loan_ID'],axis =1)\n","d8d99904":"X_train = df.drop(['Loan_Status','Loan_ID'],axis =1)\ny_train = df['Loan_Status']","6c3071a3":"SVCPipeline = make_pipeline(StandardScaler(), SVC(gamma='auto'))\nSVCPipeline.fit(X_train, y_train)\nscores = cross_val_score(SVCPipeline, X_train, y_train, cv=3)\nprint('Support Vector Machine Training Set CV Scores = {}. Average = {}'.format(scores, scores.mean()))\nfig, ax = plt.subplots(figsize =(7,7))\nsns.heatmap(confusion_matrix(y_train,SVCPipeline.predict(X_train)),cmap = 'coolwarm',annot=True, ax=ax, fmt = '.1f')\nax.set_title('SVM Confusion Matrix')\nax.set_ylabel('Actual Loan Statuses')\nax.set_xlabel('Predicted Loan Statuses')\nax.set_xticklabels(['No','Yes'])\nax.set_yticklabels(['No','Yes'])","400c1cd6":"RFPipeline = make_pipeline(StandardScaler(), RandomForestClassifier(max_depth =8))\nRFPipeline.fit(X_train, y_train)\nscores = cross_val_score(DTPipeline, X_train, y_train, cv=3)\nprint('Random Forest Classifier CV Scores = {}. Average = {}'.format(scores, scores.mean()))\nfig, ax = plt.subplots(figsize =(7,7))\nsns.heatmap(confusion_matrix(y_train,RFPipeline.predict(X_train)),cmap = 'coolwarm',annot=True, ax=ax, fmt = '.1f')\nax.set_title('RF Confusion Matrix')\nax.set_ylabel('Actual Loan Statuses')\nax.set_xlabel('Predicted Loan Statuses')\nax.set_xticklabels(['No','Yes'])\nax.set_yticklabels(['No','Yes'])","4ef0a47e":"We can see that people who haven't graduated are far less likely to have their loans approved, also there exists a biad towards married couples over those who haven't married","2270d2ff":"We want to check firstly if there is any difference between different groups when it comes to loan approval","277609d9":"Look at continuous variables. First we will fill na values with the mean of each respective column","e97a123b":"Things to notice:\n* Far more men take out loans than women, likewise with education level\n* Most distributions are similar; most demographics will take out similar sized loans (between 100 and 200 thousand dollars)\n* The exception to this ^ is that married couples are more likely to take out higher loands than non-married couples. This is likely due to the phenomena of married couples settling down and taking out a mortgage","4076d3b4":"First we will rename the variables:\n* Status: Married : 1, Not Married: 0 \n* Education: Graduated : 1, Not Graduated: 0\n* Self Employed: Yes : 1, No : 0 \n* Loan_Status: Y : 1, No : 0 \n\nFor gender we will impute ","569ca363":"Now that we have pre-processed the data we will build a range of different classifiers and train and test them","846d1072":"**Building classifier**","87dbfc32":"# EDA","1246727f":"**Disparities in income?**","8db9c630":"**Random Forest Classifier**","9698fd46":"**Support Vector Machine Classifier**","ef75126b":"**Treating NA Values**\n\n* Gender na can be replaced with unknown\/other\n* Married can be replaced the most common answer, which is married (since there aren't many unknowns in this category this is not a huge issue)\n* Dependents na can be filled with 0, since most likely people who filled in na as a way to say this was not applicable. * * Likewise with self_employed\n\n\n","e118730c":"Nothing particularly noticeable here","29290839":"We can sense check this by looking comparing the average marriage status of the 'nan' dependents and '0' dependents: as it can be seen the two groups have a similar marriage rate","90f71ea4":"# Building and Training Classifiers","23903024":"**Are there disparities in how large a loan different groups take out?**","de96061e":"Read in test data set and apply preprocessing steps","d96d055e":"Overall differences are quite subtle however there are a couple of things to note:\n* Applicant and coapplicant income show slightly fatter left-tails for rejected loans than for accepted loans as expected\n* The loans that are rejected have a more concentrated loan amount value than loans that are accepted\n","74edc50e":"**One Hot Encoding Categorical Variables**","394823c5":"Our classifier is far more likely to succesful loan applications than atually exist"}}