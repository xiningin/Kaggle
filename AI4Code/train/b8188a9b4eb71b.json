{"cell_type":{"a8fe05e9":"code","f593b8d1":"code","97a2d9ae":"code","af8df7a4":"code","dd687a3b":"code","4dc24936":"code","e4af4164":"code","8086da59":"code","5aa37f4c":"code","b5eae55c":"code","12e21bd7":"code","55a90e03":"code","f638c745":"code","9c8ff92d":"code","5d047073":"code","b782ddbb":"code","e16f7ff0":"code","3e033736":"code","6c56048a":"code","7c155dac":"code","34145ede":"code","95cadc85":"code","dd3f8a5a":"code","54c00284":"code","aedd2410":"code","3415b354":"code","994a017a":"code","d0324e1f":"code","46cf6862":"code","95816f77":"code","89b1ea5f":"code","e75214b2":"code","b30d4cad":"code","f04f7faf":"code","29b1c4be":"code","a26f6e4a":"code","85f70924":"code","e5d8cea4":"code","b8222b62":"code","5d2bc042":"code","9e528c7b":"code","8fb560f1":"code","9a3bb0c8":"code","92c63e7e":"code","c6de5bfd":"code","fc84f224":"code","04804f8f":"code","b855aa16":"code","b3b5b045":"code","23351b13":"code","a59ede84":"code","30462250":"code","cf6d8418":"code","bf62d271":"code","a1e86494":"code","ce7ab406":"code","5d21ddf6":"code","ac3c6f0f":"code","a9017b4b":"code","72cb15f5":"code","9eba4f7b":"code","7e913c56":"code","058ae0c2":"code","557abe28":"code","6996ab6b":"code","becf57ba":"code","2c602029":"code","3197f040":"code","dd3f0053":"code","f88e4975":"code","fc3dce70":"code","5d6655a0":"code","c6f0cea9":"code","20b3edf2":"code","774a554b":"code","6aaebbd8":"code","2d28b1d9":"code","40fb319d":"code","e82b4568":"code","b7545b79":"code","57f23923":"code","b5771bdc":"code","02533461":"code","622eeb08":"code","49be1acd":"code","a6d247a9":"code","732f8759":"code","c888ee67":"code","b6ccef4f":"code","902d690f":"code","baab9478":"code","c8458da5":"code","900fbdd1":"code","8915a105":"code","d31a41e0":"code","a8af49d0":"code","9ee456da":"code","aa3a7dba":"code","15a3b701":"code","609a6927":"code","2b0782d3":"code","359a510d":"code","7fc7b47c":"code","417ca395":"code","4709da41":"code","bfcb35ae":"code","c5572d47":"code","37edfc9e":"code","d109a105":"code","95d2c447":"code","34b2e429":"code","c32046a6":"code","502f51d4":"code","9ee385a9":"code","13aae8d9":"code","601d8066":"code","25d4f80e":"code","2dde8f0a":"code","5c1ab7fc":"code","e51be313":"code","5a0cec1b":"code","0130c263":"code","2b6dd5b0":"code","9e85803e":"code","0312005c":"code","b1b15802":"code","2f9f9b8e":"code","e4fc4b66":"code","98606c08":"markdown","7c80a173":"markdown","520d25e8":"markdown","0a9d49fc":"markdown","0b223201":"markdown","08ebbffc":"markdown","e9cdeab3":"markdown","0649ff1a":"markdown","88f55824":"markdown","84e02246":"markdown","e534abc9":"markdown","717d6324":"markdown","b13ee144":"markdown","c31f4235":"markdown","70b11499":"markdown","b6ae1d2b":"markdown","ba81d21f":"markdown","bece3ae4":"markdown","39295bfd":"markdown","40493a0c":"markdown","7019188c":"markdown","77cbf3bc":"markdown","e66bd5cd":"markdown","8df47381":"markdown","f5908f5a":"markdown","51bdc2db":"markdown","48b4909b":"markdown","1eb55b86":"markdown","45343845":"markdown","b13ab63f":"markdown","502cc679":"markdown","291f5d3c":"markdown","32b896d4":"markdown","1f909cea":"markdown","c74f01a8":"markdown","21d01ec8":"markdown","e147edcf":"markdown","017a7717":"markdown","28ce5dcf":"markdown","3363e922":"markdown","c1e3595d":"markdown","c448c9db":"markdown"},"source":{"a8fe05e9":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom yellowbrick.target import FeatureCorrelation\nfrom cuml import RandomForestClassifier as cuRF\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nplt.figure(figsize = (20, 18))","f593b8d1":"oct_data = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/train.csv\")\noct_data.shape","97a2d9ae":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","af8df7a4":"oct_data = reduce_mem_usage(oct_data)","dd687a3b":"oct_data.head()","4dc24936":"\noct_data.groupby(['target']).size()","e4af4164":"oct_data.groupby(['target']).size().isnull().sum() # no null columns","8086da59":"oct_data.nunique()","5aa37f4c":"oct_data.isnull().sum()","b5eae55c":"df = oct_data[['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9','f10','target']]","12e21bd7":"df.plot.scatter(x='f1', y='f10',c='target',colormap='viridis',figsize=(20, 18));","55a90e03":"df.describe().transpose().round(2)","f638c745":"df.info()","9c8ff92d":"#checking for correlation\npearson_corr = df.corr(method='pearson')\n\npearson_corr","5d047073":"sns.heatmap(pearson_corr, \n            linewidth=1, \n            annot=True, \n            annot_kws={'size' : 10} )\n\nplt.title('Pearson correlations', fontsize=25)\n\nplt.show()","b782ddbb":"sns.countplot(data=df,x='target')","e16f7ff0":"target = df['target']\n\nfeatures = df.drop('target', axis=1)","3e033736":"feature_names = list(features.columns)","6c56048a":"\n\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","7c155dac":"df = oct_data[['f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19','f20','target']]","34145ede":"target = df['target']\n\nfeatures = df.drop('target', axis=1)","95cadc85":"feature_names = list(features.columns)","dd3f8a5a":"figure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","54c00284":"df = oct_data[['f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29','f30','target']]","aedd2410":"target = df['target']\nfeatures = df.drop('target', axis=1)\n\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\n\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\nvisualizer.fit(features, target)\nvisualizer.poof()","3415b354":"df = oct_data[['f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39','f40','target']]","994a017a":"target = df['target']\nfeatures = df.drop('target', axis=1)\n\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\n\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\nvisualizer.fit(features, target)\nvisualizer.poof()","d0324e1f":"df = oct_data[['f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49','f50','target']]","46cf6862":"target = df['target']\nfeatures = df.drop('target', axis=1)\n\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\n\n\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\nvisualizer.fit(features, target)\nvisualizer.poof()","95816f77":"df = oct_data[['f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57', 'f58', 'f59','f60','target']]","89b1ea5f":"target = df['target']\nfeatures = df.drop('target', axis=1)\n\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\n\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\nvisualizer.fit(features, target)\nvisualizer.poof()","e75214b2":"df = oct_data[['f61', 'f62','f63', 'f64', 'f65', 'f66', 'f67', 'f68', 'f69','f70','target']]\ntarget = df['target']\nfeatures = df.drop('target', axis=1)\n\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\n\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\nvisualizer.fit(features, target)\nvisualizer.poof()\n","b30d4cad":"df = oct_data[['f71', 'f72', 'f73', 'f74', 'f75', 'f76', 'f77', 'f78', 'f79','f80','target']]\n\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()\n","f04f7faf":"df = oct_data[['f81', 'f82', 'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89','f90','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","29b1c4be":"df = oct_data[['f91', 'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99','f100','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","a26f6e4a":"df = oct_data[['f101', 'f102', 'f103', 'f104', 'f105', 'f106', 'f107', 'f108', 'f109','f110','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","85f70924":"df = oct_data[['f111', 'f112', 'f113', 'f114', 'f115', 'f116', 'f117', 'f118', 'f119','f120','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","e5d8cea4":"df = oct_data[['f121', 'f122', 'f123', 'f124', 'f125', 'f126', 'f127', 'f128', 'f129','f130','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","b8222b62":"df = oct_data[['f131', 'f132', 'f133', 'f134', 'f135', 'f136', 'f137', 'f138', 'f139','f140','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","5d2bc042":"df = oct_data[['f141', 'f142', 'f143', 'f144', 'f145', 'f146', 'f147', 'f148', 'f149','f150','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","9e528c7b":"df.head()","8fb560f1":"df = oct_data[['f151', 'f152', 'f153', 'f154', 'f155', 'f156', 'f157', 'f158', 'f159','f160','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","9a3bb0c8":"df.head()","92c63e7e":"df = oct_data[['f161', 'f162', 'f163', 'f164', 'f165', 'f166', 'f167', 'f168', 'f169','f170','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","c6de5bfd":"df.head()","fc84f224":"df = oct_data[['f171', 'f172', 'f173', 'f174', 'f175', 'f176', 'f177', 'f178', 'f179','f180','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","04804f8f":"df.head()","b855aa16":"df = oct_data[['f181', 'f182', 'f183', 'f184', 'f185', 'f186', 'f187', 'f188', 'f189','f190','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","b3b5b045":"df.head()","23351b13":"df = oct_data[['f191', 'f192', 'f193', 'f194', 'f195', 'f196', 'f197', 'f198', 'f199','f200','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","a59ede84":"df.head()","30462250":"df = oct_data[['f201', 'f202', 'f203', 'f204', 'f205', 'f206', 'f207', 'f208', 'f209','f210','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","cf6d8418":"df.head()","bf62d271":"df = oct_data[['f211', 'f212', 'f213', 'f214', 'f215', 'f216', 'f217', 'f218', 'f219','f220','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","a1e86494":"df.head()","ce7ab406":"df = oct_data[['f221', 'f222', 'f223', 'f224', 'f225', 'f226', 'f227', 'f228', 'f229','f230','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","5d21ddf6":"df.head()","ac3c6f0f":"df = oct_data[['f231', 'f232', 'f233', 'f234', 'f235', 'f236', 'f237', 'f238', 'f239','f240','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","a9017b4b":"df.head()","72cb15f5":"df = oct_data[['f241', 'f242', 'f243', 'f244', 'f245', 'f246', 'f247', 'f248', 'f249','f250','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","9eba4f7b":"df.head()","7e913c56":"df = oct_data[['f251', 'f252', 'f253', 'f254', 'f255', 'f256', 'f257', 'f258', 'f259','f260','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","058ae0c2":"df.head()","557abe28":"df = oct_data[['f261', 'f262', 'f263', 'f264', 'f265', 'f266', 'f267', 'f268', 'f269','f270','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","6996ab6b":"df.head()","becf57ba":"df = oct_data[['f271', 'f272', 'f273', 'f274', 'f275', 'f276', 'f277', 'f278', 'f279','f280','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","2c602029":"df.head()","3197f040":"df = oct_data[['f281', 'f282', 'f283', 'f284','target']]\ntarget = df['target']\n\nfeatures = df.drop('target', axis=1)\nfeature_names = list(features.columns)\nfigure(figsize=(20,18), dpi=80)\nvisualizer = FeatureCorrelation(labels = feature_names, method='pearson')\n\nvisualizer.fit(features, target)\n\nvisualizer.poof()","dd3f0053":"df.head()","f88e4975":"df=oct_data[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f22','f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f43','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241', 'f243', 'f247','f252', 'f254', 'f255', 'f256', 'f258', 'f259', 'f260','f261', 'f265', 'f266', 'f267', 'f269',\n'f271', 'f273', 'f274', 'f275', 'f276', 'f277','f278','f279','f280','f281', 'f282', 'f283','f284','target']]","fc3dce70":"df.shape","5d6655a0":"df.head()","c6f0cea9":"del oct_data","20b3edf2":"#numeric columns\ndf_numeric_cols = df[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241']]","774a554b":"df_cat_cols = df[[ 'f22','f43','f243', 'f247','f252', 'f254', 'f255', 'f256', 'f258', 'f259', 'f260','f261', 'f265', 'f266', 'f267', 'f269',\n'f271', 'f273', 'f274', 'f275', 'f276', 'f277','f278','f279','f280','f281', 'f282', 'f283','f284']]","6aaebbd8":"df_cat_cols.head()\n","2d28b1d9":"df_cat_cols.info()","40fb319d":"df[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20','f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f44','f48','f52', 'f56','f58','f63','f69','f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108','f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150','f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189','f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230','f231', 'f232', 'f239', 'f240','f241']]= pd.DataFrame(preprocessing.scale(df[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f31','f32','f33','f34','f35','f36','f39','f40','f42','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90','f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130','f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170','f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210','f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241']]))","e82b4568":"df[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241']].head()","b7545b79":"df[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241']].describe().T # mean close to 0 and standard deviation = 1","57f23923":"df.head()","b5771bdc":"df.shape","02533461":"del df_cat_cols","622eeb08":"del df_numeric_cols","49be1acd":"X = df.drop('target',axis=1)\nY = df['target']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)","a6d247a9":"x_train.shape, y_train.shape,x_test.shape, y_test.shape","732f8759":"x_train.head()","c888ee67":"y_train.head()","b6ccef4f":"del features","902d690f":"del target","baab9478":"del df","c8458da5":"rnd_clf = RandomForestClassifier(n_estimators=50, random_state=42)","900fbdd1":"rnd_clf.fit(x_train, y_train)","8915a105":"\ny_pred = rnd_clf.predict(x_test)\nprint(accuracy_score(y_test, y_pred))","d31a41e0":"plot_confusion_matrix(rnd_clf,x_test,y_test)","a8af49d0":"print(classification_report(y_test, y_pred))","9ee456da":"print(confusion_matrix(y_test, y_pred))","aa3a7dba":"predictions = []\nfor tree in rnd_clf.estimators_:\n    predictions.append(tree.predict_proba(x_test)[None, :])","15a3b701":"predictions = np.vstack(predictions)","609a6927":"cum_mean = np.cumsum(predictions, axis=0)\/np.arange(1, predictions.shape[0] + 1)[:, None, None]","2b0782d3":"scores = []\nfor pred in cum_mean:\n    scores.append(accuracy_score(y_test, np.argmax(pred, axis=1)))","359a510d":"plt.figure(figsize=(10, 6))\nplt.plot(scores, linewidth=3)\nplt.xlabel('num_trees')\nplt.ylabel('accuracy');","7fc7b47c":"# Create StratifiedKFold object.\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state= 40)\nacc = []\ntest_predictions = []","417ca395":"for fold, (train_index, test_index) in enumerate(skf.split(x_train, y_train)):\n    x_train_fold, x_test_fold = x_train.iloc[train_index], x_train.iloc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n    print(\"Fold \",fold)\n    rnd_clf.fit(x_train_fold, y_train_fold)\n    acc.append(rnd_clf.score(x_test_fold, y_test_fold))\n    print('Accuracy:', acc)\n    preds = rnd_clf.predict(x_test)\n    test_predictions.append(preds)","4709da41":"# Print the output.\nprint('Accuracy:', acc)\n","bfcb35ae":"del acc","c5572d47":"y_pred = np.mean(np.column_stack(test_predictions),axis=1)\ny_pred = y_pred.astype('int32')\ny_test = y_test.astype('int32')\nprint(accuracy_score(y_test,y_pred))","37edfc9e":"importances = rnd_clf.feature_importances_","d109a105":"#\n# Sort the feature importance in descending order\n#\nsorted_indices = np.argsort(importances)[::-1]","95d2c447":"print(x_train.columns[sorted_indices])","34b2e429":"figure(figsize=(18,25), dpi=80)\nplt.title('Feature Importance')\nplt.bar(range(x_train.shape[1]), importances[sorted_indices], align='center')\nplt.xticks(range(x_train.shape[1]), x_train.columns[sorted_indices], rotation=90)\nplt.tight_layout()\nplt.show()","c32046a6":"# cuml Random Forest params     \ncu_rf_params = { 'n_estimators': 500, 'max_depth':8 } ","502f51d4":"x_train = x_train.astype('float32')","9ee385a9":"y_train = y_train.astype('float32')","13aae8d9":"x_test = x_test.astype('float32')","601d8066":"y_test = y_test.astype('float32')","25d4f80e":"cu_rf = cuRF(**cu_rf_params)\ncu_rf.fit(x_train, y_train)  ","2dde8f0a":"y_pred = cu_rf.predict(x_test)\nprint(accuracy_score(y_test, y_pred)) # 0.75919","5c1ab7fc":"x_train = x_train[['f22', 'f179', 'f69', 'f58', 'f136', 'f214', 'f156', 'f78', 'f8', 'f12']]","e51be313":"cu_rf.fit(x_train, y_train)  ","5a0cec1b":"x_test = x_test[['f22', 'f179', 'f69', 'f58', 'f136', 'f214', 'f156', 'f78', 'f8', 'f12']]","0130c263":"y_pred = cu_rf.predict(x_test)\nprint(accuracy_score(y_test, y_pred))","2b6dd5b0":"# Create StratifiedKFold object.\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state= 40)\nval_acc = []\ntest_predictions = []\n","9e85803e":"for fold, (train_index, test_index) in enumerate(skf.split(x_train, y_train)):\n    x_train_fold, x_test_fold = x_train.iloc[train_index], x_train.iloc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n    print('Fold', fold )\n    \n    cu_rf.fit(x_train_fold, y_train_fold)\n    print(\"score : \",cu_rf.score(x_train_fold, y_train_fold))\n    \n    y_pred = cu_rf.predict(x_test_fold)\n    print(accuracy_score(y_test_fold, y_pred))\n    \n    preds = cu_rf.predict(x_test)\n    test_predictions.append(preds)\n    \n   ","0312005c":"y_pred = np.mean(np.column_stack(test_predictions), axis=1)\ny_pred = y_pred.astype('int32')","b1b15802":"y_test = y_test.astype('int32')","2f9f9b8e":"print(accuracy_score(y_test, y_pred))","e4fc4b66":"test_data = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-oct-2021\/test.csv\")\ntest_df=test_data[['f1', 'f2', 'f3', 'f4', 'f8','f12', 'f13', 'f14', 'f16','f17','f18','f19','f20',\n'f22','f31','f32','f33','f34','f35','f36','f39','f40',\n'f42','f43','f44','f48','f52', 'f56','f58','f63','f69',\n'f72','f73','f74','f75','f77','f78','f82','f83','f85','f86','f87','f89','f90',\n'f92', 'f93', 'f95', 'f96', 'f98', 'f99','f103', 'f107', 'f108',\n'f112', 'f117', 'f119','f123', 'f125','f126', 'f127','f128', 'f129', 'f130',\n'f134', 'f136','f141', 'f143', 'f144', 'f146', 'f147', 'f150',\n'f152', 'f154', 'f156' ,'f161', 'f162', 'f163', 'f164', 'f169', 'f170',\n'f179','f181', 'f182', 'f183','f184','f187','f188','f189',\n'f191', 'f192', 'f193','f195', 'f199','f200','f201', 'f206', 'f208', 'f210',\n'f211', 'f213', 'f214','f222','f224','f225','f226','f227','f229','f230',\n'f231', 'f232', 'f239', 'f240','f241', 'f243', 'f247','f252', 'f254', 'f255', 'f256', 'f258', 'f259', 'f260','f261', 'f265', 'f266', 'f267', 'f269',\n'f271', 'f273', 'f274', 'f275', 'f276', 'f277','f278','f279','f280','f281', 'f282', 'f283','f284']]\nsubmission = pd.DataFrame({\"id\": test_data[\"id\"], \"target\": rnd_clf.predict(test_df)})\nsubmission.to_csv(\"submission.csv\", index = False)","98606c08":"f82,f83,f85,f86,f87,f89,f90 features","7c80a173":"Ten columns at a time subsetting and applying yellowbricks package to get the important features","520d25e8":"f152, f154, f156 features","0a9d49fc":"# Important Features","0b223201":"# StratifiedKFold Cross Validation","08ebbffc":"f103, f107, f108 features","e9cdeab3":"# Stratified Cross Validation","0649ff1a":"f271, f273, f274, f275, f276, f277,f278,f279,f280 categorical features","88f55824":"f141, f143, f144, f146, f147, f150 features","84e02246":"f252, f254, f255, 256, f258, f259, f260 features. Categorical features","e534abc9":"f63, f69","717d6324":"f112, f117, f119 features","b13ee144":"# Feature selection with Yellowbrick","c31f4235":"f52, f56,f58 are the features","70b11499":"#### Will manually do feature selection with Yellowbricks","b6ae1d2b":"f134, f136","ba81d21f":"f181, f182, f183,f184,f187,f188,f189","bece3ae4":"f161, f162, f163, f164, f169, f170 features","39295bfd":"f281, f282, f283,f284 categorical features","40493a0c":"f201, f206, f208, f210 features","7019188c":"f22 is the feature to consider for model training","77cbf3bc":"f191, f192, f193,f195, f199,f200 features","e66bd5cd":"# Picking the top 10 features from the prior trained model and the feature importance plot","8df47381":"f92, f93, f95, f96, f98, f99 features","f5908f5a":"f179 feature","51bdc2db":"Manual data selection completed and we will train the model with the selected features","48b4909b":"f42,f43,f44,f48 are the features","1eb55b86":"f231, f232, f239, f240 features","45343845":"f261, f265, f266, f267, f269 categorical features ","b13ab63f":"f31,f32,f33,f34,f35,f36,f39,f40 are the features","502cc679":"# CPU","291f5d3c":"#### My learning in this competition as the kernel kept crashing.I started using the below code snippet to reduce the memory usage","32b896d4":"f123, f125,f126, f127,f128, f129, f130 features","1f909cea":"# RandomForest Classifier","c74f01a8":"f211,  f213, f214 features","21d01ec8":"The important features are f12, f13, f14, f16,f17,f18,f19,f20","e147edcf":"f222,f224,f225,f226,f227,f229,f230","017a7717":"From the above plot we can see f1, f2, f3, f4, f8 are the important features","28ce5dcf":"# Random Forest and GPU","3363e922":"# Test Data and Submission file","c1e3595d":"241, 243, 247 features. Categorical features","c448c9db":"f72,f73,f74,f75,f77,f78 features"}}