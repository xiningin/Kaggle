{"cell_type":{"3c091dae":"code","6c442a20":"code","f6991a57":"code","4a30e1b9":"code","f53dc6d2":"code","abdf2392":"code","85dcf159":"code","03066406":"markdown"},"source":{"3c091dae":"import graphviz \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score, GridSearchCV","6c442a20":"train = pd.read_csv('..\/input\/train.csv').set_index('PassengerId')\ntest = pd.read_csv('..\/input\/test.csv').set_index('PassengerId')\ndf = pd.concat([train, test], axis=0, sort=False)\ndf['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\ndf['IsWomanOrChild'] = ((df.Title == 'Master') | (df.Sex == 'female'))\ndf['LastName'] = df.Name.str.split(',').str[0]\n\nfamily = df.groupby(df.LastName).Survived\ndf['FamilyTotalCount'] = family.transform(lambda s: s[df.IsWomanOrChild].fillna(0).count())\ndf['FamilyTotalCount'] = df.mask(df.IsWomanOrChild, df.FamilyTotalCount - 1, axis=0)\ndf['FamilySurvivedCount'] = family.transform(lambda s: s[df.IsWomanOrChild].fillna(0).sum())\ndf['FamilySurvivedCount'] = df.mask(df.IsWomanOrChild, df.FamilySurvivedCount - df.Survived.fillna(0), axis=0)\ndf['FamilySurvivalRate'] = (df.FamilySurvivedCount \/ df.FamilyTotalCount.replace(0, np.nan))\ndf['IsSingleTraveler'] = df.FamilyTotalCount == 0","f6991a57":"x = pd.concat([\n    df.FamilySurvivalRate.fillna(0),\n    df.IsSingleTraveler,\n    df.Sex.replace({'male': 0, 'female': 1}),\n], axis=1)\ntrain_x, test_x = x.loc[train.index], x.loc[test.index]\ntrain_y = df.Survived.loc[train.index]","4a30e1b9":"clf = tree.DecisionTreeClassifier()\ngrid = GridSearchCV(clf, cv=5, param_grid={\n    'criterion': ['gini', 'entropy'], \n    'max_depth': [2, 3, 4, 5]})\ngrid.fit(train_x, train_y)\ngrid.best_params_","f53dc6d2":"model = grid.best_estimator_","abdf2392":"graphviz.Source(tree.export_graphviz(model, feature_names=x.columns)) ","85dcf159":"test_y = model.predict(test_x).astype(int)\npd.DataFrame({'Survived': test_y}, index=test.index) \\\n.reset_index() \\\n.to_csv(f'survived.csv', index=False)","03066406":"# Titanic survival prediction from Name and Sex\nThis notebook is inspired by [Simple Titanic model using only Name](https:\/\/www.kaggle.com\/cdeotte\/titanic-using-name-only-0-81818). I take a similar approach and calculate the survival rate of the woman and children in a family with two primary differences.\n\nFirst, I adjust the `WCSurvivedPct` on a per individual basis so that it represents the survival rate of the rest of the family, not including the current individual.\n\nSecond, I use a `DecisionTreeClassifier` to create slightly more complex classification rules instead of the two rules from Chris's notebook *1)all males die except boys in families where all woman and children survive, 2) all females live except for females in families where all woman and children die*.\n\nThese changes result in an improvement from 0.82296 to 0.83253."}}