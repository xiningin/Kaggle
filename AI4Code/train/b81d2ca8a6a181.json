{"cell_type":{"a1d9bd7c":"code","46c7f328":"code","da7b25f4":"code","035586b6":"code","244c6d7d":"code","808779cb":"code","8a605b11":"code","dbd663cb":"code","98cdf276":"code","1c1b3154":"code","b9594848":"code","d074d515":"code","a5c775e8":"code","7c1e0dc1":"code","e7cf4d10":"code","f5733ebf":"code","38f20ca9":"code","2c24030d":"code","a1ef015e":"code","2b3ba572":"code","ca209c7b":"code","9a7c3a05":"code","049092ec":"code","cd460dca":"code","bc5d14df":"code","883f0d23":"code","8e7b3b0d":"code","07fe7062":"code","f25c4c82":"code","323ee612":"code","174c8f95":"code","3c6810f1":"code","03794fe9":"code","0474375a":"markdown","af264278":"markdown"},"source":{"a1d9bd7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46c7f328":"import math\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import skew, norm\nfrom scipy.special import boxcox\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nimport lightgbm as lgb\nimport warnings\nimport datetime\nimport time\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\nplt.style.use(style='seaborn')","da7b25f4":"train = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')\nsample = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv')","035586b6":"print(train.shape)\nprint(test.shape)","244c6d7d":"train.head()","808779cb":"test.head()","8a605b11":"sample.head()","dbd663cb":"train.describe()","98cdf276":"print(train.isnull().sum())\nprint(test.isnull().sum())","1c1b3154":"train['datetime']","b9594848":"# Training set\ntrain['hour'] = [t.hour for t in pd.DatetimeIndex(train['datetime'])]\ntrain['day'] = [t.day for t in pd.DatetimeIndex(train['datetime'])]\ntrain['month'] = [t.month for t in pd.DatetimeIndex(train['datetime'])]\ntrain['year'] = [t.year for t in pd.DatetimeIndex(train['datetime'])]\ntrain.head(10)","d074d515":"# Testing set\ntest['hour'] = [t.hour for t in pd.DatetimeIndex(test['datetime'])]\ntest['day'] = [t.day for t in pd.DatetimeIndex(test['datetime'])]\ntest['month'] = [t.month for t in pd.DatetimeIndex(test['datetime'])]\ntest['year'] = [t.year for t in pd.DatetimeIndex(test['datetime'])]\ntest.head(10)","a5c775e8":"# Get the test id\ntest_id = test['datetime']\ntest_id","7c1e0dc1":"print(train.shape)\nprint(test.shape)","e7cf4d10":"# Drop extra columns at the training set\ntrain.drop(['casual', 'registered'], axis=1, inplace=True)\nprint(train.shape)\nprint(test.shape)","f5733ebf":"sns.boxplot(train['count'])","38f20ca9":"sns.distplot(train['count'], fit=norm)","2c24030d":"train['count']","a1ef015e":"train['count'] = np.log(train['count'])\ntrain['count']","2b3ba572":"sns.distplot(train['count'], fit=norm)","ca209c7b":"cat_features = ['season', 'holiday', 'workingday', 'weather']\ni = 1\nfor col in cat_features:\n    plt.subplot(2, 2, i)\n    i += 1\n    sns.countplot(train[col])\nplt.show()","9a7c3a05":"num_features = ['temp', 'atemp', 'humidity', 'windspeed']\ni = 1\nfor col in num_features:\n    plt.subplot(2, 2, i)\n    i += 1\n    sns.boxplot(train[col]) \n\nplt.show()","049092ec":"corr = train.corr()\nplt.subplots(figsize=(12, 12))\nsns.heatmap(corr, annot=True)","cd460dca":"plt.scatter(train['count'], train['windspeed'])\nplt.show()","bc5d14df":"plt.scatter(train['count'], train['season'])\nplt.show()","883f0d23":"sns.distplot(train['season'])","8e7b3b0d":"train.skew()","07fe7062":"train.drop(['holiday'], axis=1, inplace=True)\ntest.drop(['holiday'], axis=1, inplace=True)","f25c4c82":"target = train['count']\ntrain.drop(['datetime', 'count'], axis=1, inplace=True)\ntest.drop(['datetime'], axis=1, inplace=True)\nprint(train.shape)\nprint(test.shape)","323ee612":"target","174c8f95":"# XGBoost\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\nmodel_xgb.fit(train, target)","3c6810f1":"# y_pred = model_xgb.predict(np.floor(np.exp(test)))\ny_pred = model_xgb.predict(test)\ny_pred = np.exp(y_pred)\ny_pred","03794fe9":"sub = pd.DataFrame()\nsub['datetime'] = test_id\nsub['count'] = y_pred\nsub.to_csv('submission.csv', index=False)","0474375a":"Columns Info\ndatetime - hourly date + timestamp\nseason - 1 = spring, 2 = summer, 3 = fall, 4 = winter\nholiday - whether the day is considered a holiday\nworkingday - whether the day is neither a weekend nor holiday\nweather - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\ntemp - temperature in Celsius\natemp - \"feels like\" temperature in Celsius\nhumidity - relative humidity\nwindspeed - wind speed\ncasual - number of non-registered user rentals initiated\nregistered - number of registered user rentals initiated\ncount - number of total rentals","af264278":"Objective:\ncount of bikes rented during each hour"}}