{"cell_type":{"61ba032a":"code","046f42c3":"code","bff7cff1":"code","db92ab36":"code","255397cf":"code","471a77f1":"code","41f14326":"code","44aee2b4":"code","49782a6b":"code","96fd7dd2":"code","3a09c1bf":"code","aa166ba3":"code","a9ceacc5":"code","64aa713d":"code","ea5c8184":"markdown","ae3f57e0":"markdown","6c4cfe94":"markdown","911d2e22":"markdown","c3e5d9c0":"markdown","635b7ab0":"markdown","5ee1e14a":"markdown"},"source":{"61ba032a":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization,GlobalAveragePooling2D\nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image","046f42c3":"lookup = dict()\nreverselookup = dict()\ncount = 0\nfor j in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/00\/'):\n    if not j.startswith('.'): # If running this code locally, this is to \n                              # ensure you aren't reading in hidden folders\n        lookup[j] = count\n        reverselookup[count] = j\n        count = count + 1\nlookup","bff7cff1":"x_data = []\ny_data = []\nIMG_SIZE = 150\ndatacount = 0 # We'll use this to tally how many images are in our dataset\nfor i in range(0, 10): # Loop over the ten top-level folders\n    for j in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/0' + str(i) + '\/'):\n        if not j.startswith('.'): # Again avoid hidden folders\n            count = 0 # To tally images of a given gesture\n            for k in os.listdir('..\/input\/leapgestrecog\/leapGestRecog\/0' + \n                                str(i) + '\/' + j + '\/'):\n                                # Loop over the images\n                path = '..\/input\/leapgestrecog\/leapGestRecog\/0' + str(i) + '\/' + j + '\/' + k\n                img = cv2.imread(path,cv2.IMREAD_GRAYSCALE)\n                img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n                arr = np.array(img)\n                x_data.append(arr) \n                count = count + 1\n            y_values = np.full((count, 1), lookup[j]) \n            y_data.append(y_values)\n            datacount = datacount + count\nx_data = np.array(x_data, dtype = 'float32')\ny_data = np.array(y_data)\ny_data = y_data.reshape(datacount, 1) # Reshape to be the correct size","db92ab36":"# check some image\nfig,ax=plt.subplots(5,2)\nfig.set_size_inches(15,15)\nfor i in range(5):\n    for j in range (2):\n        l=rn.randint(0,len(y_data))\n        ax[i,j].imshow(x_data[l])\n        ax[i,j].set_title(reverselookup[y_data[l,0]])\n        \nplt.tight_layout()","255397cf":"y_data=to_categorical(y_data)\nx_data = x_data.reshape((datacount, IMG_SIZE, IMG_SIZE, 1))\nx_data = x_data\/255","471a77f1":"x_train,x_test,y_train,y_test=train_test_split(x_data,y_data,test_size=0.25,random_state=42)","41f14326":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (IMG_SIZE,IMG_SIZE,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(10, activation = \"softmax\"))","44aee2b4":"batch_size=128\nepochs=10","49782a6b":"checkpoint = ModelCheckpoint(\n    '.\/base.model',\n    monitor='val_loss',\n    verbose=1,\n    save_best_only=True,\n    mode='min',\n    save_weights_only=False,\n    period=1\n)\nearlystop = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001,\n    patience=30,\n    verbose=1,\n    mode='auto'\n)\ntensorboard = TensorBoard(\n    log_dir = '.\/logs',\n    histogram_freq=0,\n    batch_size=16,\n    write_graph=True,\n    write_grads=True,\n    write_images=False,\n)\n\ncsvlogger = CSVLogger(\n    filename= \"training_csv.log\",\n    separator = \",\",\n    append = False\n)\n\nreduce = ReduceLROnPlateau(\n    monitor='val_loss',\n    factor=0.1,\n    patience=3,\n    verbose=1, \n    mode='auto'\n)\n\ncallbacks = [checkpoint,tensorboard,csvlogger,reduce]","96fd7dd2":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","3a09c1bf":"model.summary()","aa166ba3":"History = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1, validation_data=(x_test, y_test),callbacks=callbacks)","a9ceacc5":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","64aa713d":"plt.plot(History.history['acc'])\nplt.plot(History.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","ea5c8184":"# Model Build","ae3f57e0":"## Please upvote if you like it;)","6c4cfe94":"# Import Modules","911d2e22":"# Make Data","c3e5d9c0":"# Check Result","635b7ab0":"# Train","5ee1e14a":"## Please upvote if you like it ;)"}}