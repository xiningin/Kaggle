{"cell_type":{"1e208c9b":"code","e663e449":"code","451e4588":"code","8131f5ba":"code","b27c66f5":"markdown","f3a0f9d3":"markdown","6a075ebe":"markdown"},"source":{"1e208c9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e663e449":"from keras.utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\n\nvisible = Input(shape=(2,))\nhidden1 = Dense(10, activation='relu')(visible)\nhidden2 = Dense(20, activation='relu')(hidden1)\nhidden3 = Dense(10, activation='relu')(hidden2)\noutput = Dense(1, activation='sigmoid')(hidden3)\nmodel = Model(inputs=visible, outputs=output)\nmodel.summary()\nplot_model(model, to_file='multilayer_perceptron_graph.png')","451e4588":"from keras.utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.pooling import MaxPooling2D\n\nvisible = Input(shape=(64,64,1))\nconv1 = Conv2D(32, (4,4), activation='relu')(visible)\npool1 = MaxPooling2D()(conv1)\nconv2 = Conv2D(16, (4,4), activation='relu')(pool1)\npool2 = MaxPooling2D()(conv2)\nflat1 = Flatten()(pool2)\nhidden1 = Dense(10, activation='relu')(flat1)\noutput = Dense(1, activation='sigmoid')(hidden1)\nmodel = Model(inputs=visible, outputs=output)\nmodel.summary()\nplot_model(model, to_file='convolutional_neural_network.png')","8131f5ba":"from keras.utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers.recurrent import LSTM\n\nvisible = Input(shape=(100,1))\nhidden1 = LSTM(10)(visible)\nhidden2 = Dense(20, activation='relu')(hidden1)\noutput = Dense(1, activation='sigmoid')(hidden2)\nmodel = Model(inputs=visible, outputs=output)\nmodel.summary()\nplot_model(model,  to_file='recurrent_neural_network.png')","b27c66f5":"## Multilayer Perceptron ","f3a0f9d3":"## Convolution Neural Network","6a075ebe":"## Recurrent Neural Network"}}