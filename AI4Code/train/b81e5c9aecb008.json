{"cell_type":{"d3def6a3":"code","4b5b4067":"code","952aac49":"code","cdde5379":"code","4f3d2c7b":"code","f2fb2e81":"code","2850ddfe":"code","05d6c058":"code","5a9544d5":"code","db1bacd3":"code","b315bfcf":"code","4daa8973":"code","0bc1bc3d":"code","a6b6d3cd":"code","f30d4127":"markdown","e8ca40f5":"markdown","4543ab28":"markdown","67930c1b":"markdown","2cee3920":"markdown","33e34379":"markdown","66b52699":"markdown","571e4a0e":"markdown","a9181390":"markdown","a3f53fad":"markdown","b0a7df93":"markdown","0e02d8c1":"markdown","96b65f8b":"markdown"},"source":{"d3def6a3":"!pip install -q efficientnet","4b5b4067":"import math, re, os, random\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nimport gc\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\nprint(\"TF version \" + tf.__version__)","952aac49":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect() # TPU detection\n    strategy = tf.distribute.TPUStrategy(tpu)\nexcept ValueError:\n    strategy = tf.distribute.MirroredStrategy() # for GPU or multi-GPU machines\n\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","cdde5379":"IMAGE_SIZE = [224, 224]\nEPOCHS = 60\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","4f3d2c7b":"train = pd.read_csv('..\/input\/classify-leaves\/train.csv')\nCLASSES = sorted(list(set(train['label'])))\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('leavestfrec')\n\nTraining_filenames, Validation_filenames = [], []\n\nfor i in range(5):\n    Training_filenames.append(tf.io.gfile.glob(GCS_DS_PATH + f'\/train{i}.tfrec'))\n    Validation_filenames.append(tf.io.gfile.glob(GCS_DS_PATH + f'\/val{i}.tfrec'))\n\n\nTEST_FILENAMES = tf.io.gfile.glob(GCS_DS_PATH + '\/test.tfrec')\ntrain['label'].value_counts()","f2fb2e81":"def random_erasing(img, sl=0.1, sh=0.2, rl=0.4, p=0.3):\n    h = tf.shape(img)[0]\n    w = tf.shape(img)[1]\n    c = tf.shape(img)[2]\n    origin_area = tf.cast(h*w, tf.float32)\n\n    e_size_l = tf.cast(tf.round(tf.sqrt(origin_area * sl * rl)), tf.int32)\n    e_size_h = tf.cast(tf.round(tf.sqrt(origin_area * sh \/ rl)), tf.int32)\n\n    e_height_h = tf.minimum(e_size_h, h)\n    e_width_h = tf.minimum(e_size_h, w)\n\n    erase_height = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_height_h, dtype=tf.int32)\n    erase_width = tf.random.uniform(shape=[], minval=e_size_l, maxval=e_width_h, dtype=tf.int32)\n\n    erase_height = abs(erase_height-10)\n    erase_width = abs(erase_width-10)\n    \n    erase_area = tf.zeros(shape=[erase_height, erase_width, c])\n    erase_area = tf.cast(erase_area, tf.uint8)\n\n    pad_h = h - erase_height\n    pad_top = tf.random.uniform(shape=[], minval=0, maxval=pad_h, dtype=tf.int32)\n    pad_bottom = pad_h - pad_top\n\n    pad_w = w - erase_width\n    pad_left = tf.random.uniform(shape=[], minval=0, maxval=pad_w, dtype=tf.int32)\n    pad_right = pad_w - pad_left\n\n    erase_mask = tf.pad([erase_area], [[0,0],[pad_top, pad_bottom], [pad_left, pad_right], [0,0]], constant_values=1)\n    erase_mask = tf.squeeze(erase_mask, axis=0)\n    erased_img = tf.multiply(tf.cast(img,tf.float32), tf.cast(erase_mask, tf.float32))\n\n    return tf.cond(tf.random.uniform([], 0, 1) > p, lambda: tf.cast(img, img.dtype), lambda:  tf.cast(erased_img, img.dtype))","2850ddfe":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef onehot(image,label):\n    return image,tf.one_hot(label, len(CLASSES))\n\ndef read_labeled_tfrecord(example):\n    feature  = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"label\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, feature)\n    image = decode_image(example['image'])\n    label = tf.cast(example['label'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    feature  = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict leaves classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, feature)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_brightness(image, 0.5)\n    image = random_erasing(image)\n    return image, label\n\ndef data_hflip(image, idnum):\n    image = tf.image.flip_left_right(image)\n    return image, idnum\n\ndef get_training_dataset(training_filenames, do_onehot=False):\n    dataset = load_dataset(training_filenames, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    if do_onehot:\n        dataset = dataset.map(onehot, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(validation_filenames, ordered=False, do_onehot=False):\n    dataset = load_dataset(validation_filenames, labeled=True, ordered=ordered)\n    if do_onehot:\n        dataset = dataset.map(onehot, num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False, augmented=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.map(data_hflip, num_parallel_calls=AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\nNUM_TRAINING_IMAGES = 14683\nNUM_VALIDATION_IMAGES = 3670\nNUM_TEST_IMAGES = 8800\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nVALIDATION_STEPS = -(-NUM_VALIDATION_IMAGES \/\/ BATCH_SIZE) # The \"-(-\/\/)\" trick rounds up instead of down :-)\nTEST_STEPS = -(-NUM_TEST_IMAGES \/\/ BATCH_SIZE)             # The \"-(-\/\/)\" trick rounds up instead of down :-)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","05d6c058":"# Learning rate schedule for TPU, GPU and CPU.\n# Using an LR ramp up because fine-tuning a pre-trained model.\n# Starting with a high LR would break the pre-trained weights.\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 9\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .87\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n\nrng = [i for i in range(25 if EPOCHS<25 else EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","5a9544d5":"def get_model(base_model):\n    base_model.trainable = True\n    model = tf.keras.Sequential([\n        base_model,\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model.compile(\n        optimizer='nadam',\n        loss = 'categorical_crossentropy',\n#         metrics=[tfa.metrics.F1Score(len(CLASSES), average='macro')],\n        metrics=['accuracy'],\n        # NEW on TPU in TensorFlow 24: sending multiple batches to the TPU at once saves communications\n        # overheads and allows the XLA compiler to unroll the loop on TPU and optimize hardware utilization.\n        steps_per_execution=16\n    )\n    return model","db1bacd3":"for i in range(len(Training_filenames)):\n    \n    print(f'Start training the fold{i} !')\n    with strategy.scope():\n        enet = efn.EfficientNetB7(weights='noisy-student', \n                                include_top=False,\n                                pooling='avg',\n                                input_shape=(*IMAGE_SIZE, 3))\n        model1 = get_model(enet)\n    \n\n    chk_callback1 = tf.keras.callbacks.ModelCheckpoint(f'effnetb7_{i}_best.h5',\n                                                       save_weights_only=True,\n#                                                        monitor='val_f1_score',\n                                                       monitor='val_accuracy',\n                                                       mode='max',\n                                                       save_best_only=True,\n                                                       verbose=1)\n    \n    history1 = model1.fit(get_training_dataset(Training_filenames[i], do_onehot=True), \n                      steps_per_epoch=STEPS_PER_EPOCH, \n                      epochs=EPOCHS, \n                      validation_data=get_validation_dataset(Validation_filenames[i], do_onehot=True),\n                      validation_steps=VALIDATION_STEPS,\n                      callbacks=[lr_callback, chk_callback1],\n                      verbose=2)\n\n    del chk_callback1, history1, model1\n    gc.collect()","b315bfcf":"for i in range(len(Training_filenames)):\n    \n    print(f'Start training the fold{i} !')\n    with strategy.scope():\n        densenet = tf.keras.applications.DenseNet201(weights='imagenet', \n                                                    include_top=False,\n                                                    pooling='avg',\n                                                    input_shape=(*IMAGE_SIZE, 3))\n        model2 = get_model(densenet)\n\n    chk_callback2 = tf.keras.callbacks.ModelCheckpoint(f'densenet201_{i}_best.h5',\n                                                       save_weights_only=True,\n#                                                        monitor='val_f1_score',\n                                                       monitor='val_accuracy',\n                                                       mode='max',\n                                                       save_best_only=True,\n                                                       verbose=1)\n    \n    history2 = model2.fit(get_training_dataset(Training_filenames[i], do_onehot=True), \n                      steps_per_epoch=STEPS_PER_EPOCH, \n                      epochs=EPOCHS, \n                      validation_data=get_validation_dataset(Validation_filenames[i], do_onehot=True),\n                      validation_steps=VALIDATION_STEPS,\n                      callbacks=[lr_callback, chk_callback2],\n                      verbose=2)\n\n    del chk_callback2, history2, model2\n    gc.collect()","4daa8973":"def run_inference(modellist, model):\n    test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n    test_images_ds = test_ds.map(lambda image, idnum: image)\n    predslist = []\n    for modelpath in modellist:\n        model.load_weights(modelpath)\n        predslist.append(model.predict(test_images_ds,verbose=0, steps=TEST_STEPS))\n    \n    preds = np.sum(predslist, axis = 0)\n    del model\n    gc.collect()\n    \n    return preds","0bc1bc3d":"train = pd.read_csv('..\/input\/classify-leaves\/train.csv')\ntrain.head()\nleaves_labels = sorted(list(set(train['label'])))\nn_classes = len(leaves_labels)\nclass_to_num = dict(zip(leaves_labels, range(n_classes)))\nnum_to_class = {v : k for k, v in class_to_num.items()}","a6b6d3cd":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Calculating predictions...')\nmodel1list = [f'.\/effnetb7_{i}_best.h5' for i in range(len(Training_filenames))]\nmodel2list = [f'.\/densenet201_{i}_best.h5' for i in range(len(Training_filenames))]\nmodel1 = get_model(enet)\nmodel2 = get_model(densenet)\nprobs1 = run_inference(model1list,model1)\nprobs2 = run_inference(model2list,model2)\nprobabilities = 0.5*probs1 + 0.5*probs2\npredictions = np.argmax(probabilities, axis=-1)\n\npreds = []\nfor i in predictions:\n    preds.append(num_to_class[i])\n\nprint('Generating submission file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, preds]), fmt=['%s', '%s'], delimiter=',', header='image,label', comments='')","f30d4127":"**\u7531\u4e8e\u672c\u5730\u6ca1\u6709\u53ef\u7528\u7684gpu\u8d44\u6e90\u4ee5\u53cakaggle kernels gpu\u7684\u65f6\u957f\u9650\u5236\uff0c\u6545\u501f\u672c\u6b21\u6bd4\u8d5b\u7684\u673a\u4f1a\u5b66\u4e60\u4f7f\u7528TPU\u8fdb\u884c\u8bad\u7ec3\u4e0e\u63a8\u7406**\n\n\u8be5\u4ee3\u7801\u4e3b\u8981\u4f9d\u636eAraik Tamazian\u7684notebook [FC Ensemble External Data (EffNet+DenseNet)](https:\/\/www.kaggle.com\/atamazian\/fc-ensemble-external-data-effnet-densenet) \u8fdb\u884c\u6539\u5199\n\n\u540c\u65f6\u4e5f\u53c2\u8003\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a\n* [simple resnet baseline](https:\/\/www.kaggle.com\/nekokiku\/simple-resnet-baseline) by Neko Kiku\n* [del_duplicate_image](https:\/\/github.com\/seefun\/TorchUtils\/blob\/master\/torch_utils\/dataset\/del_duplicate_image.py) by seefun\n* [Getting started with 100+ flowers on TPU](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu) by Martine Goerner\n* [TPU Flowers](https:\/\/www.kaggle.com\/tusharkendre\/tpu-flowers) by Tushar Kendre and Shreyaansh Gupta (random_blockout augmentation)\n* [TPU: ENet B7 + DenseNet](https:\/\/www.kaggle.com\/wrrosa\/tpu-enet-b7-densenet) by Wojtek Rosa\n\n\u5bf9\u4ee5\u4e0a\u4f5c\u8005\u7684\u65e0\u79c1\u5206\u4eab\u8868\u793a\u7531\u8877\u7684\u611f\u8c22\uff01\n\n","e8ca40f5":"# Dataset functions","4543ab28":"TPUs read data directly from Google Cloud Storage (GCS), so we need to copy the dataset to a GCS bucket co-located with the TPU. To do that, pass the name of a specific dataset to the get_gcs_path function. The name of the dataset is the name of the directory it is mounted in. \n\n\u8fd9\u91cc\u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0cGoogle\u8981\u6c42\u6240\u6709\u5728Kaggle\u5e73\u53f0\u4e0a\u4f7f\u7528TPU\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u7528\u6237\u987b\u5c06\u6570\u636e\u653e\u5728GCS\u4e0a\uff0c\u6545\u8be5notebook\u7684\u6570\u636e\u96c6\u5df2\u516c\u5f00\u5728kaggle datasets\u4e0a\u3002\u8003\u8651\u5230\u6d4b\u8bd5\u96c6\u4e0e\u8bad\u7ec3\u96c6\u53ef\u80fd\u5305\u542b\u76f8\u540c\u7684\u6807\u6ce8\u566a\u58f0\uff0c\u8be5\u6570\u636e\u96c6\u9009\u7528\u672a\u7ecf\u6e05\u6d17\u7684\u539f\u59cb\u6570\u636e\u96c6\u3002","67930c1b":"## EfficientNet B7","2cee3920":"# Data access and classes","33e34379":"## Custom LR scheduler","66b52699":"# Random blockout augmentation","571e4a0e":"# TPU detection","a9181390":"## DenseNet201","a3f53fad":"# Predictions","b0a7df93":"\u672cnotebook\u53ef\u5728kaggle kernels\u7684TPU\u73af\u5883\u4e0b\u5b9e\u73b0\u4e00\u952e\u8dd1\u901a\uff0c\u5e76\u5728private test\u4e0a\u83b7\u5f970.988\u5de6\u53f3\u7684\u6210\u7ee9\u3002\u5982\u679c\u5927\u5bb6\u518d\u9009\u62e9\u4e0d\u540c\u7684\u6a21\u578b\u7ec4\u5408\uff0c\u8bad\u7ec3\u7b56\u7565\u4ee5\u53ca\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3\u4e0e\u63a8\u7406\uff0c\u6700\u7ec8\u5bf9\u591a\u4e2a\u7ed3\u679c\u91c7\u53d6\u6295\u7968\u7684\u65b9\u6cd5\u8fdb\u884c\u878d\u5408\uff0c\u6210\u7ee9\u53ef\u8fbe0.989-0.990+\u3002\u5173\u4e8e\u6295\u7968\u7684\u4ee3\u7801\u5728\u5176\u4ed6\u5c0f\u4f19\u4f34\u5206\u4eab\u7684notebook\u4e2d\u5df2\u6709\u8be6\u7ec6\u7684\u5b9e\u73b0\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\n\n\u5728\u672c\u6b21\u6bd4\u8d5b\u4e2d\u5e76\u672a\u4f7f\u7528\u592a\u591a\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u4e5f\u8fd8\u6ca1\u6765\u5f97\u53ca\u5c1d\u8bd5\u6c90\u795e\u7684ResNeSt\uff0c\u6240\u4ee5\u8fd8\u662f\u6709\u5f88\u5927\u7684\u63d0\u5347\u7a7a\u95f4\u7684\uff0c\u6b22\u8fce\u5927\u5bb6\u8fdb\u884c\u9b54\u6539\uff0c\u4e5f\u5e0c\u671b\u5927\u5bb6\u591a\u591a\u5206\u4eab\u6539\u8fdb\u65b9\u6848\u3002\n\n**<span style=\"color:blue\">\u7b2c\u4e00\u6b21\u5206\u4eabnotebook\uff0c\u5927\u5bb6\u6709\u4ec0\u4e48\u610f\u89c1\u5c3d\u7ba1\u63d0\uff1b\u5982\u679c\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\uff0c\u4e5f\u8bf7\u5404\u4f4d\u4e0d\u8981\u541d\u556cvote\u5440\uff0c\u54c8\u54c8\u54c8<\/span>**","0e02d8c1":"# Configuration","96b65f8b":"# Models and training"}}