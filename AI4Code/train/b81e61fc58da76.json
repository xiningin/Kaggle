{"cell_type":{"ef8d7232":"code","b880204b":"code","81212c81":"code","6148416d":"code","058674f2":"code","5c6a6bc1":"code","dbfcba59":"code","c86ccd09":"code","b5192b93":"code","d5d51566":"code","66198f0b":"code","a0cefbc5":"code","a978a0b6":"code","73f2195c":"code","6cc1d6c9":"code","239a6b4e":"code","29b60c89":"code","37dba76e":"code","48083687":"code","c2fadf69":"code","b2254541":"code","3b0e82f7":"code","33e2e0ba":"code","de182a1f":"code","744b6d50":"code","f4ddbc02":"code","06a10aa6":"code","ebc5fe66":"code","4990627f":"code","14f998d2":"code","64ef7500":"code","b17d5620":"code","2fe84be2":"code","1a36fb64":"code","d8d55a94":"code","822481eb":"code","086534c3":"code","2a134db3":"code","275ef7e1":"code","2d11b8ff":"code","254053aa":"code","a97e910e":"code","c9e18c4e":"code","dae349fa":"code","69a95dad":"code","e0dea9ed":"code","1fce30c8":"code","aadac56b":"code","1d7c9c1d":"code","33ba5f02":"code","3152918c":"code","c7237477":"code","fda23cbb":"code","5fc8c799":"code","515345f0":"code","7ef10868":"markdown","8bbded92":"markdown","976c7ce4":"markdown","ea0ecb1d":"markdown","b66681a0":"markdown","2dd97840":"markdown","f6d62606":"markdown","4e2d2dc0":"markdown","6c204689":"markdown","0e600f6b":"markdown","5d822d13":"markdown","60cddbcb":"markdown","797134a7":"markdown","c3537fc5":"markdown","55ef3c2e":"markdown","b3657763":"markdown","88a6b2fc":"markdown","503d5af9":"markdown","6fc68218":"markdown","50a14d7f":"markdown","a2257047":"markdown","2a2ddcdf":"markdown","7a55e123":"markdown","3e5c4aad":"markdown","28157758":"markdown","98b8c675":"markdown","c0e349e6":"markdown","1a3a97f9":"markdown","561397e2":"markdown","72d72e62":"markdown","3164c6f1":"markdown","3da3c6ba":"markdown","3d571b95":"markdown","b5c917c1":"markdown","6413ea01":"markdown","34fd510b":"markdown","bd7f6903":"markdown","01ddd539":"markdown","56529975":"markdown","6dfe74f3":"markdown","722ba035":"markdown","4c6d46b3":"markdown","aeda759b":"markdown","dd2705bf":"markdown","30a37fec":"markdown","ccb8af61":"markdown","174cdd93":"markdown","29dede04":"markdown","7f2d620b":"markdown","ee05d08c":"markdown","22c1e783":"markdown","b17f105d":"markdown","d90e32d0":"markdown","55ba9f35":"markdown","743985ed":"markdown","264f3af3":"markdown","e7b1c55c":"markdown","f2108925":"markdown","5ece5808":"markdown","6e71f257":"markdown","db74a68f":"markdown","86f9cd60":"markdown","01824e9c":"markdown","c561de75":"markdown","6341cad7":"markdown","ea0ecc91":"markdown","8d218533":"markdown","9160ae12":"markdown","005eb5d2":"markdown","bc1f0e3a":"markdown","52a7091d":"markdown","05cf31e3":"markdown","e9aeb8ee":"markdown","105b52d1":"markdown"},"source":{"ef8d7232":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","b880204b":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","81212c81":"filename_1 = r'\/kaggle\/input\/rki-covid19csv\/408.csv' \nfilename_2 = r'\/kaggle\/input\/rki-covid19csv\/428.csv' \nfilename_3 = r'\/kaggle\/input\/rki-covid19csv\/502.csv'","6148416d":"ds_1=pd.read_csv(filename_1, index_col='ObjectId')\nds_1","058674f2":"ds_1.info()","5c6a6bc1":"import time\nds_1['Ref\ud83d\udcc5']=ds_1['Refdatum'].apply(lambda x : time.strptime(x[:10],'%Y-%m-%d')[7])\nds_1['Mel\ud83d\udcc5']=ds_1['Meldedatum'].apply(lambda x : time.strptime(x[:10],'%Y-%m-%d')[7])","dbfcba59":"ds_1.iloc[0]","c86ccd09":"ds = ds_1.iloc[0]['Datenstand']\nds_1[ds_1['Datenstand'].apply(lambda x : x!=ds)]","b5192b93":"ds_1=ds_1.drop(['IdBundesland','Bundesland','Landkreis','Refdatum','Meldedatum','Datenstand'],axis=1)","d5d51566":"ds_1.info()","66198f0b":"ds_1","a0cefbc5":"Altersgruppen_as_set = set(ds_1['Altersgruppe'].tolist()) # As set so we get the unique values.\nAltersgruppen = list(Altersgruppen_as_set)\nAltersgruppen.sort()     # Needed to make it reproduceable. Also, it's more intuitive this way.\nAltersgruppen","a978a0b6":"Geschlechter_as_set = set(ds_1['Geschlecht'].tolist())\nGeschlechter = list(Geschlechter_as_set)\nGeschlechter.sort()     # Needed to make it reproduceable. Also, it's more intuitive this way.\nGeschlechter","73f2195c":"ds_2=pd.read_csv(filename_2, index_col='ObjectId')\nds_2","6cc1d6c9":"ds_2.info()","239a6b4e":"ds_2['Ref\ud83d\udcc5']=ds_2['Refdatum'].apply(lambda x : time.strptime(x[:10],'%Y-%m-%d')[7])","29b60c89":"ds_2['Mel\ud83d\udcc5']=ds_2['Meldedatum'].apply(lambda x : time.strptime(x[:10],'%Y-%m-%d')[7])","37dba76e":"ds = ds_2.iloc[0]['Datenstand']\nds_2[ds_2['Datenstand'].apply(lambda x : x!=ds)]","48083687":"ds_2=ds_2.drop(['IdBundesland','Bundesland','Landkreis','Refdatum','Meldedatum','Datenstand'],axis=1)","c2fadf69":"ds_2.info()","b2254541":"ds_2","3b0e82f7":"Altersgruppen_coarse_as_set = set(ds_2['Altersgruppe'].tolist())\nAltersgruppen_coarse = list(Altersgruppen_coarse_as_set)\nAltersgruppen_coarse.sort()\nAltersgruppen_coarse","33e2e0ba":"def Age_coarse(s):\n   return Altersgruppen_coarse.index(s) ","de182a1f":"Altersgruppen_fine_as_set = set(ds_2['Altersgruppe2'].tolist())\nAltersgruppen_fine = list(Altersgruppen_fine_as_set)\nAltersgruppen_fine.sort()  \nAltersgruppen_fine","744b6d50":"Geschlechter_as_set = set(ds_a28['Geschlecht'].tolist())\nGeschlechter = list(Geschlechter_as_set)\nGeschlechter.sort()     # Needed to make it reproduceable. Also, it's more intuitive this way.\nGeschlechter","f4ddbc02":"def Gender(s):\n    return s[:1]","06a10aa6":"ds_3=pd.read_csv(filename_3, index_col='FID')\nds_3","ebc5fe66":"ds_3.info()","4990627f":"ds_3['Ref\ud83d\udcc5']=ds_3['Refdatum'].apply(lambda x : time.strptime(x[:10],'%Y\/%m\/%d')[7])","14f998d2":"ds_3['Mel\ud83d\udcc5']=ds_3['Meldedatum'].apply(lambda x : time.strptime(x[:10],'%Y\/%m\/%d')[7])","64ef7500":"ds_3.iloc[0]","b17d5620":"ds = ds_3.iloc[0]['Datenstand']\nds_3[ds_3['Datenstand'].apply(lambda x : x!=ds)]","2fe84be2":"ds_3=ds_3.drop(['IdBundesland','Bundesland','Landkreis','Refdatum','Meldedatum','Datenstand'],axis=1)","1a36fb64":"ds_3.info()","d8d55a94":"ds_3","822481eb":"Altersgruppen_ds3_as_set = set(ds_3['Altersgruppe'].tolist())\nAltersgruppen_ds3 = list(Altersgruppen_ds3_as_set)\nAltersgruppen_ds3.sort()\nAltersgruppen_ds3","086534c3":"Altersgruppen2_ds3_as_set = set(ds_3['Altersgruppe2'].tolist())\nAltersgruppen2_ds3 = list(Altersgruppen2_ds3_as_set)\nAltersgruppen2_ds3.sort()  \nAltersgruppen2_ds3","2a134db3":"Altersgruppen_fine","275ef7e1":"Altersgruppen_fine.append('Nicht \u00fcbermittelt')\nAltersgruppen_fine","2d11b8ff":"Altersgruppen_fine","254053aa":"Geschlechter_as_set = set(ds_3['Geschlecht'].tolist())\nGeschlechter = list(Geschlechter_as_set)\nGeschlechter.sort()     # Needed to make it reproduceable. Also, it's more intuitive this way.\nGeschlechter","a97e910e":"ds_2[ds_2['Ref\ud83d\udcc5']==ds_2['Mel\ud83d\udcc5']]","c9e18c4e":"ds_1['agim'] = ds_1.apply(lambda row : \n    \"{}{}{}.{}\".format(\n        Age_coarse(row['Altersgruppe']), \n        Gender(row['Geschlecht']), \n        str(row['IdLandkreis']).zfill(5), \n        str(row['Mel\ud83d\udcc5']).zfill(3))\n                              ,axis=1)\nds_1","dae349fa":"ds_2['agim'] = ds_2.apply(lambda row : \n    \"{}{}{}.{}\".format(\n        Age_coarse(row['Altersgruppe']), \n        Gender(row['Geschlecht']), \n        str(row['IdLandkreis']).zfill(5), \n        str(row['Ref\ud83d\udcc5']).zfill(3))\n                              ,axis=1)\nds_2","69a95dad":"ds_3['agim'] = ds_3.apply(lambda row : \n    \"{}{}{}.{}\".format(\n        Age_coarse(row['Altersgruppe']), \n        Gender(row['Geschlecht']), \n        str(row['IdLandkreis']).zfill(5), \n        str(row['Ref\ud83d\udcc5']).zfill(3))\n                              ,axis=1)\nds_3","e0dea9ed":"ds_1['agim'][ds_1['agim'].duplicated(False)==True]","1fce30c8":"ds_1[:][ds_1['agim'].duplicated(False)==True]","aadac56b":"dup_agim = ds_2[:][ds_2['agim'].duplicated(False)==True]\ndup_agim","1d7c9c1d":"def Age_fine(s):\n   return Altersgruppen_fine.index(s) ","33ba5f02":"ds_2['fgim'] = ds_2.apply(lambda row : \n    \"{}{}{}.{}\".format(\n        Age_fine(row['Altersgruppe2']), \n        Gender(row['Geschlecht']), \n        str(row['IdLandkreis']).zfill(5), \n        str(row['Ref\ud83d\udcc5']).zfill(3))\n                              ,axis=1)\nds_2","3152918c":"dup_fine = ds_2[:][ds_2['fgim'].duplicated(False)==True]\ndup_fine","c7237477":"ds_2['Altersgruppe'].value_counts()","fda23cbb":"ds_2['Altersgruppe2'].value_counts()","5fc8c799":"dup_babies = dup_agim[dup_agim['Altersgruppe']=='A00-A04']\ndup_babies['agim'].value_counts()","515345f0":"dup_agim['agim'].value_counts()","7ef10868":"In Germany, the Robert Koch-Institut (RKI) was the designated authority to collect all relevant data about COVID-19. They provided daily updates of their patient database at [npgeo-corona-npgeo-de.hub.arcgis.com\/datasets](https:\/\/npgeo-corona-npgeo-de.hub.arcgis.com\/datasets\/). This is an attempt to compare these datasets for consistency.\n","8bbded92":"### \tValues for Altersgruppe","976c7ce4":"## Streamline dataset","ea0ecb1d":"### \tValues for Altersgruppe","b66681a0":"So, for this later dataset, we found even over 90\u202f000 duplicated datasets with the given auxiliary index. Maybe there's a better chance at least connecting the more recent datasets which share the finer 'Altersgruppe2' classification:","2dd97840":"Again, we see that they're the same as for the old dataset. So let's define a function that will simplify comparison. This time, we just use one character for easier packing.","f6d62606":"So we found over 40\u202f000 duplicated datasets. Unfortunately, that is too much to have hopes of identifying the records across datasets.","4e2d2dc0":"Collect unique values of the Altersgruppe field in a list to see what we got. This also can be used to replace the strings with numbers so they're less unwieldy. (In German, \u201cAltersgruppen\u201d is the plural of \u201cAltersgruppe\u201d (age group). ) ","6c204689":"## Replace the string data with day of year","0e600f6b":"This shows that for both coarse and fine age classification, the fewest duplications (apart from the 'unbekannt' \u2013 unknown \u2013 group) are in the age group from 0 to 4 years of age, which is no surprise, since that is also the smallest group. But that gives us a glimmer of hope, so let's look at that slice a bit further.","5d822d13":"Some conversion is needed so we can do computations with dates. Since all dates are from the same year and no times occur, we can simply use the day of the year, that is, tm_yday of the time struct.","60cddbcb":"## \tValues for Geschlecht","797134a7":"### For first dataset (of April 8)","c3537fc5":"Collect unique values of the Geschlecht field in a list to see what we got. This also can be used to replace the strings with one-bite characters so they're less unwieldy. (In German, \u201cGeschlechter\u201d is the plural of \u201cGeschlecht\u201d (gender). ) ","55ef3c2e":"## Creating auxiliary index fields","b3657763":"## Check if there are any differences in 'Datenstand' field","88a6b2fc":"There are no differences, so we can simply delete this field.","503d5af9":"## Replace the string data with day of year","6fc68218":"Take a look at first entry to see if it looks correct:","50a14d7f":"Of these, we will take the first three to investigate further. (The reason why I'm not taking later ones is that I don't want to change the kernel each time I upload a new dataset.)","a2257047":"## Streamline dataset","2a2ddcdf":"## \tValues for Geschlecht","7a55e123":"## Duplications within the first dataset (of April 8)","3e5c4aad":"### How many duplicates are there per age group?","28157758":"The new dataset has two fields for age groups 'Altersgruppe' and 'Altersgruppe2'; let's look at them one by one.","98b8c675":"# Checking for duplications","c0e349e6":"### How many duplicates are there for each auxiliary index?","1a3a97f9":"Because the datasets have different index fields, we need to create a auxiliary index field that connects as many records as possible between the datasets. \n\nFor that, we use data available in each dataset. The most promising fields, which are least likely to have changed, are:\n\n\u2022 'Altersgruppe' (age group). Unfortunately, we have to use the coarser field classification 'Altersgruppe', since the finer 'Altersgruppe2' is not present in all datasets. \n\n\u2022 'Geschlecht' (gender)\n\n\u2022 'IdLandkreis' (ID for location, comparable to county level)\n\n\u2022 'Mel\ud83d\udcc5' (compressed from 'Meldedatum' \u2013 date of date of notification.) The other date field, 'Referenzdatum' (\u201creference date\u201d), may sound like a better choice, but that field was actually more prone to change for a number of reasons, including that the RKI considered it at times synonymous to the assumed infection date. Both are often the same, anyway:","561397e2":"Like the dataset of April 28, this dataset has two fields for age groups 'Altersgruppe' and 'Altersgruppe2'.","72d72e62":"Since those are not available in the older dataset, we can't use them for comparison of all datasets, so we're not defining a function. (Spoiler: But we will do so later.)","3164c6f1":"In this dataset, the name of the index field changed from \u201cObjectID\u201d to \u201cFID\u201d.","3da3c6ba":"Collect unique values of the Geschlecht field in a list to see what we got. This also can be used to replace the strings with one-bite characters so they're less unwieldy. (In German, \u201cGeschlechter\u201d is the plural of \u201cGeschlecht\u201d (gender). )","3d571b95":"Take a look at the first entry to see if it looks correct:","b5c917c1":"# Preparing the second dataset","6413ea01":"## Read dataset and view info","34fd510b":"Before we can try to compare the datasets over time, we need to check how reliably our auxiliary index identifies unique records. We start by looking at duplications within the individual datasets. ","bd7f6903":"There are no differences, so we can simply delete this field.","01ddd539":"# Preparing the datasets for comparison","56529975":"## Read dataset and view info","6dfe74f3":"# Outlook","722ba035":"## \tValues for Altersgruppe","4c6d46b3":"The datasets downloaded from RKI are mirrored at \/kaggle\/input\/rki-covid19csv\/ and described at [\/sebastianhelm\/rki-covid19csv](https:\/\/www.kaggle.com\/sebastianhelm\/rki-covid19csv). This workbook examines three of them.\n\nThe following code lists all available datasets:","aeda759b":"## \tValues for Geschlecht","dd2705bf":"Replace the strings for age groups with numbers so they're less unwieldy.","30a37fec":"### \tValues for Altersgruppe2","ccb8af61":"## Streamline dataset","174cdd93":"This is the same as for the previous two datasets.","29dede04":"Again, we see that they're the same as for the other two datasets.","7f2d620b":"## Read dataset and view info","ee05d08c":"So we cut down the duplicates from over 90\u202f000 to over 49\u202f000. Sadly, this is still to many to have much hope to get meaningful results of a cross-dataset comparison of individual records. So we'll skip looking for duplications in the third dataset.","22c1e783":"# Preparing the third dataset","b17f105d":"## Further experiments with duplication","d90e32d0":"They're the same as the Altersgruppe values of the older dataset. So let's define a function that will simplify comparison.","55ba9f35":"### \tValues for Altersgruppe2","743985ed":"It may be interesting to check if the duplications conform to statistical expectations. Particularly informative would be a comparison on a landkreis (county) level, since the quality of the data depended on the county administration, and another investigation I carried out (which is however not ready to be published yet) indicated that there may be big differences in how the date fields were handled from landkreis to landkreis.","264f3af3":"# Preparing the first dataset","e7b1c55c":"### For second dataset (of April 28)","f2108925":"# Evaluation of the patient data provided by the RKI","5ece5808":"## Replace the string data with day of year","6e71f257":"## Check if there are any differences in 'Datenstand' field","db74a68f":"## Duplications within the second dataset (of April 28)","86f9cd60":"### For third dataset (of May 2)","01824e9c":"Replace the strings for age groups with numbers so they're less unwieldy.","c561de75":"## Age groups","6341cad7":"The information of the fields 'IdBundesland','Bundesland','Landkreis' is (or should be) all redundant with field 'IdLandkreis' and can therefore be deleted. For the other dropped fields, see above. ","ea0ecc91":"Some conversion is needed so we can do computations with dates. Since all dates are from the same year and no times occur, we can simply use the day of the year, that is, tm_yday of the time struct.","8d218533":"# Datasets compared","9160ae12":"Those were not transmitted. \ud83d\ude25 Incidentally, we learn that there is another possible value for this field, which we will add to the Altersgruppen_fine list.","005eb5d2":"## Age groups","bc1f0e3a":"## Check if there are any differences in 'Datenstand' field","52a7091d":"Some conversion is needed so we can do computations with dates. Since all dates are from the same year and no times occur, we can simply use the day of the year, that is, tm_yday of the time struct.","05cf31e3":"Collect unique values of the Geschlecht field in a list to see what we got. This also can be used to replace the strings with one-bite characters so they're less unwieldy. (In German, \u201cGeschlechter\u201d is the plural of \u201cGeschlecht\u201d (gender). ) ","e9aeb8ee":"There are no differences, so we can simply delete this field.","105b52d1":"### Just looking at the youngest"}}