{"cell_type":{"e72d4e26":"code","159a81c3":"code","d4b8870f":"code","de021bd4":"code","a96694d9":"code","34c82440":"code","8901c605":"code","cd60161f":"code","9d6cc108":"code","64ca163f":"code","43de84a4":"code","0d0ba3db":"code","0a37c8ae":"code","7dce17f7":"code","1fda2c1b":"code","559ec5ca":"code","29307871":"code","bc48cedc":"code","9d150955":"code","2afeeef7":"code","4dab5e69":"code","0ad4aac1":"code","d56a17cd":"code","03927f09":"code","65bc4dfc":"code","d116e2f9":"code","6b5f1711":"code","20e690b1":"code","f8923242":"code","c967c6cd":"code","26e3405d":"code","a103ae95":"code","cc21f4ac":"code","184f2b0c":"code","e4fd44a5":"code","27844a3a":"code","f0477b97":"code","7f14c86e":"code","8a6fdf72":"code","d49d87df":"code","1acfa4db":"code","4b9ae2e4":"code","d646a9b0":"code","2f5241c2":"code","2c6ce44d":"code","86b21bc0":"code","cff83d4c":"code","f139fa51":"code","5afd0832":"code","1f096ded":"code","85ff7760":"code","bc0a556f":"code","db5e936b":"code","7791f542":"code","9974f87c":"markdown","ca853122":"markdown","35019475":"markdown","e82d84c8":"markdown"},"source":{"e72d4e26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","159a81c3":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","d4b8870f":"data = pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndata.head()","de021bd4":"data.shape","a96694d9":"data.info()","34c82440":"data.columns","8901c605":"data.isnull().sum()","cd60161f":"data.describe()","9d6cc108":"data1 = data.copy()","64ca163f":"data1.head()","43de84a4":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","0d0ba3db":"data1['symboling'].unique()","0a37c8ae":"sns.countplot(x=data1['symboling'], data= data1)","7dce17f7":"data1['CarName'].unique()","1fda2c1b":"sns.countplot(x=data1['fueltype'], data=data1)","559ec5ca":"data1['aspiration'].unique()","29307871":"sns.countplot(x = data1['aspiration'], data=data1)","bc48cedc":"sns.countplot(x=data1['doornumber'], data=data)","9d150955":"data1[data1['doornumber'] == 'two']","2afeeef7":"sns.countplot(x=data1['carbody'], data=data1)","4dab5e69":"data[data['carbody'] == \"hatchback\"]","0ad4aac1":"sns.countplot(x=data1['drivewheel'], data=data1)","d56a17cd":"sns.countplot(x=data1['enginelocation'], data=data1)","03927f09":"data1[data1['enginelocation'] == \"rear\"]","65bc4dfc":"sns.countplot(x=data1['enginetype'], data=data1)","d116e2f9":"sns.countplot(x=data1['cylindernumber'], data=data1)","6b5f1711":"sns.countplot(x=data1['fuelsystem'], data=data1)","20e690b1":"cat_cols = [x for x in data1.columns if data1[x].dtypes == \"object\"]\ncat_cols","f8923242":"num_cols = [x for x in data1.columns if data1[x].dtypes != \"object\"]\nnum_cols","c967c6cd":"sns.displot(data1['carlength'])","26e3405d":"sns.displot(data1['carwidth'])","a103ae95":"sns.displot(data1['enginesize'])","cc21f4ac":"sns.displot(data1['price'])","184f2b0c":"sns.boxplot(x=data1['price'], data=data1)","e4fd44a5":"sns.displot(x=data1['stroke'])","27844a3a":"plt.figure(figsize=(10, 6))\nsns.heatmap(data1.corr(), annot=True, cmap=\"Blues\")","f0477b97":"sns.pairplot(data1)","7f14c86e":"num_cols","8a6fdf72":"sns.scatterplot(x=data1['price'], y=data1['carheight'])","d49d87df":"sns.scatterplot(x=data1['citympg'], y=data1['price'])","1acfa4db":"sns.scatterplot(x=data1['price'], y=data1['enginesize'])","4b9ae2e4":"sns.scatterplot(x=data1['curbweight'], y=data1['price'])","d646a9b0":"num_cols","2f5241c2":"cat_cols","2c6ce44d":"data1 = pd.get_dummies(data1, drop_first = True)","86b21bc0":"data1.head()","cff83d4c":"X = data1.drop('price', axis=1)\ny = data1['price']","f139fa51":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","5afd0832":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=200, n_jobs=-1, random_state=42)","1f096ded":"model.fit(X_train, y_train)","85ff7760":"model_pred = model.predict(X_test)","bc0a556f":"model.score(X_test, y_test)","db5e936b":"from sklearn.metrics import mean_squared_error","7791f542":"mse = mean_squared_error(y_test, model_pred)\nmse","9974f87c":"### Splitting the dataset into X and Y ","ca853122":"### Converting the dataset into categorical and numerical columns","35019475":"### Data Preprocessing","e82d84c8":"### Model Building using Random Forest Regressor"}}