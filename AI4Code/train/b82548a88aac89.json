{"cell_type":{"03e303b6":"code","69014168":"code","ca88a18e":"code","18e2e5d9":"code","817b885f":"code","f92d3756":"code","fd8c44a3":"code","e4d16e10":"markdown","8093082b":"markdown","932b9ba3":"markdown","f5f43e4f":"markdown","29681e9a":"markdown","81bf3c0a":"markdown","302c176e":"markdown","95c661da":"markdown","c32d41f7":"markdown","60e0f9d7":"markdown"},"source":{"03e303b6":"# Get all the required libraries \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport matplotlib.cm as cm\nimport re\nsns.set_style(\"darkgrid\")\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# Reading the Input data\nplayer_Data = pd.read_csv(\"..\/input\/data.csv\")","69014168":"# Show first five results\nplayer_Data.head()\n# Show the columns\nplayer_Data.columns\n\n# Separate out the required columns\nreq_Cols = [\"Name\",\"Age\",\"Nationality\",\"Overall\",\"Potential\",\"Club\",\"Value\",\"Wage\",\"Special\",\"International Reputation\",\n            \"Skill Moves\",\"Work Rate\",\"Position\",\"Crossing\",\"Finishing\", \"HeadingAccuracy\", \"ShortPassing\", \n            \"Volleys\", \"Dribbling\",\"Curve\", \"FKAccuracy\", \"LongPassing\", \"BallControl\", \"Acceleration\",\n            \"SprintSpeed\", \"Agility\", \"Reactions\", \"Balance\", \"ShotPower\",\"Jumping\", \"Stamina\", \"Strength\",\n            \"LongShots\", \"Aggression\",\"Interceptions\", \"Positioning\", \"Vision\", \"Penalties\", \"Composure\",\n            \"Marking\", \"StandingTackle\", \"SlidingTackle\", \"GKDiving\", \"GKHandling\",\"GKKicking\",\n            \"GKPositioning\", \"GKReflexes\"]\n\n# Create new dataset with the trimmed set of columns\nplayer_Data_Trimmed = player_Data[req_Cols]\nreq_Cols_Simple = [\"Name\",\"Age\",\"Nationality\",\"Overall\",\"Potential\",\"Club\",\"Value\",\"Position\"]\nplayer_Data_Simple = player_Data[req_Cols_Simple]\n\n# Manipulating the Potential and Overall values to get the possible growth of a player\nplayer_Data_Simple[\"Growth\"] = player_Data_Simple[\"Potential\"] - player_Data_Simple[\"Overall\"]\n\n# Convert the value to a player to number and converting all values... \n# ...(including the values which appear in hundred thousands) to same unit - Millions\nplayer_Data_Simple['Unit'] = player_Data_Simple['Value'].str[-1]\nplayer_Data_Simple['Value (M)'] = np.where(player_Data_Simple['Unit'] == '0', 0, \n                                           player_Data_Simple['Value'].str[1:-1].replace(r'[a-zA-Z]',''))\nplayer_Data_Simple['Value (M)'] = player_Data_Simple['Value (M)'].astype(float)\nplayer_Data_Simple['Value (M)'] = np.where(player_Data_Simple['Unit'] == 'M', \n                                           player_Data_Simple['Value (M)'], \n                                           player_Data_Simple['Value (M)']\/1000)\nplayer_Data_Simple = player_Data_Simple.drop('Unit', 1)\n\n# Creating a list of Premier League clubs\nprem_Leg_Clubs = [\"Arsenal\",\"Bournemouth\", \"Brighton & Hove Albion\", \"Burnley\", \"Cardiff City\", \"Chelsea\", \"Crystal Palace\",\n                  \"Everton\", \"Fulham\", \"Huddersfield Town\", \"Leicester City\", \"Liverpool\", \"Manchester City\", \n                  \"Manchester United\", \"Newcastle United\", \"Southampton\", \"Tottenham Hotspur\", \n                  \"Watford\", \"West Ham United\", \"Wolverhampton Wanderers\"]\n\n# We get all the players in the premier league into a single dataset\nplayer_Data_Simple_Prem = player_Data_Simple[player_Data_Simple['Club'].isin(prem_Leg_Clubs)]\n\nplayer_Data_Simple_Prem.isnull().sum()\nplayer_Data_Simple_Prem = player_Data_Simple_Prem.dropna()","ca88a18e":"# Find the mean of the various parameters grouped across the teams\nplayer_Data_Simple_Prem.groupby(\"Club\").mean()\n\n# Sort the data to view the teams which have the highest mean player overall ratings\nplayer_Data_Simple_Prem.groupby(\"Club\").mean().sort_values('Overall', ascending = False)\n\n# Findings: \n# Top Four: Manchester United, Chelsea, Manchester City, Tottenham Hotspur\n# Bottom Four: Fulham, Huddersfield Town, Wolverhampton Wanderers, Cardiff City\n\n# Sort the data to view the teams which have highest mean value of players\nplayer_Data_Simple_Prem.groupby(\"Club\").mean().sort_values('Value (M)', ascending = False)\n\n# Findings:\n# Unsurprisingly, Manchester City takes the top spot with respect to the value of players in its roster\n# Top four: Manchester City, Tottenham Hotspur, Chelsea, Manchester United\n# Bottom four: Brighton & Hove Albion, Bournemouth, Huddersfield Town, Cardiff City\n\n# A rudimentarly attempt at seeing a chart with the mean values of the different parameters spread across the teams\nplayer_Data_Simple_Prem.groupby(\"Club\").mean().plot(kind=\"bar\")","18e2e5d9":"# Function to get the best squad based on overall rating\ndef get_best_squad(position):\n    player_Data_Simple_Prem_copy = player_Data_Simple_Prem.copy()\n    # instantiate an array \n    store = []\n    # Loop through the players based on the positions passed into the function\n    for i in position:\n        store.append([i,player_Data_Simple_Prem_copy.loc[[player_Data_Simple_Prem_copy[player_Data_Simple_Prem_copy['Position'] == i]['Overall'].idxmax()]]['Name'].to_string(index = False), \n                      player_Data_Simple_Prem_copy[player_Data_Simple_Prem_copy['Position'] == i]['Overall'].max(),player_Data_Simple_Prem_copy[player_Data_Simple_Prem_copy['Position'] == i]['Club']])\n        player_Data_Simple_Prem_copy.drop(player_Data_Simple_Prem_copy[player_Data_Simple_Prem_copy['Position'] == i]['Overall'].idxmax(), inplace = True)\n    # Return the store array\n    return pd.DataFrame(np.array(store).reshape(11,4), columns = ['Position', 'Player', 'Overall','Club']).to_string(index = False)\n\n# 4-3-3\nsquad_433 = ['GK', 'LB', 'CB', 'CB', 'RB', 'LM', 'CDM', 'RM', 'LW', 'ST', 'RW']\nprint ('4-3-3')\nprint (get_best_squad(squad_433))","817b885f":"df_p_Prem = player_Data_Simple_Prem.groupby(['Age'])['Potential'].mean()\ndf_o_Prem = player_Data_Simple_Prem.groupby(['Age'])['Overall'].mean()\n\ndf_summary_Prem = pd.concat([df_p_Prem, df_o_Prem], axis=1)\n\nax = df_summary_Prem.plot()\nax.set_ylabel('Rating')\nax.set_title('Average Rating by Age')","f92d3756":"laLiga_Clubs = [\"Atl\u00e9tico Madrid\",\"FC Barcelona\", \"Real Madrid\", \"Athletic Club de Bilbao\", \"Real Betis\", \n                \"RC Celta\", \"RCD Espanyol\",\"Real Sociedad\", \"Valencia CF\", \"Real Valladolid CF\", \n                \"Deportivo Alav\u00e9s\", \"SD Eibar\", \"Rayo Vallecano\", \"Sevilla FC\", \n                \"Villarreal CF\", \"Levante UD\", \"Getafe CF\",\"CD Legan\u00e9s\", \"Girona FC\", \n                \"SD Huesca\"]\nbundes_Clubs = [\"FC Bayern M\u00fcnchen\",\"Borussia Dortmund\", \"Borussia M\u00f6nchengladbach\", \"SC Freiburg\", \n                \"Bayer 04 Leverkusen\", \"FC Schalke 04\", \"VfB Stuttgart\",\n                  \"SV Werder Bremen\", \"Hertha BSC\", \"1. FSV Mainz 05\", \"1. FC N\u00fcrnberg\", \n                \"VfL Wolfsburg\", \"Hannover 96\", \"Eintracht Frankfurt\", \"TSG 1899 Hoffenheim\", \n                \"FC Augsburg\", \"Fortuna D\u00fcsseldorf\", \"RB Leipzig\"]\nligue1_Clubs = [\"FC Girondins de Bordeaux\",\"En Avant de Guingamp\", \"LOSC Lille\", \"Olympique Lyonnais\", \n                \"AS Monaco\", \"Montpellier HSC\", \"FC Nantes\",\"OGC Nice\", \"Paris Saint-Germain\", \n                \"Stade Rennais FC\", \"RC Strasbourg Alsace\", \"Stade Malherbe Caen\", \"Olympique de Marseille\", \n                  \"N\u00eemes Olympique\", \"Stade de Reims\", \"Angers SCO\", \"Toulouse Football Club\", \n                  \"Amiens SC\", \"AS Saint-\u00c9tienne\", \"Dijon FCO\"]\nserieA_Clubs = [\"Atalanta\",\"Inter\", \"Juventus\", \"Lazio\", \"Milan\", \"Napoli\", \"Parma\",\n                  \"Roma\", \"Torino\", \"Udinese\", \"Bologna\", \"Chievo Verona\", \"Empoli\", \n                  \"Sampdoria\", \"Cagliari\", \"Fiorentina\", \"Genoa\", \n                  \"Frosinone\", \"Sassuolo\", \"SPAL\"]\n\n# We get all the players in the premier league into a single dataset\nplayer_Data_Simple_LaLiga = player_Data_Simple[player_Data_Simple['Club'].isin(laLiga_Clubs)]\n# We get all the players in the premier league into a single dataset\nplayer_Data_Simple_Bundes = player_Data_Simple[player_Data_Simple['Club'].isin(bundes_Clubs)]\n# We get all the players in the premier league into a single dataset\nplayer_Data_Simple_Ligue1 = player_Data_Simple[player_Data_Simple['Club'].isin(ligue1_Clubs)]\n# We get all the players in the premier league into a single dataset\nplayer_Data_Simple_SerieA = player_Data_Simple[player_Data_Simple['Club'].isin(serieA_Clubs)]\n\n# Checking the players with highest overall rating in each club. \n# It also helps to see a unique row for each club to ascertain that all clubs in the league are represented\nplayer_Data_Simple_LaLiga.sort_values('Overall',ascending = False).groupby('Club').head(1)\nplayer_Data_Simple_Bundes.sort_values('Overall',ascending = False).groupby('Club').head(1)\nplayer_Data_Simple_Ligue1.sort_values('Overall',ascending = False).groupby('Club').head(1)\nplayer_Data_Simple_SerieA.sort_values('Overall',ascending = False).groupby('Club').head(1)\n\n# Bundesliga\ndf_o_Bundes = player_Data_Simple_Bundes.groupby(['Age'])['Overall'].mean()\n# Laliga\ndf_o_Laliga = player_Data_Simple_LaLiga.groupby(['Age'])['Overall'].mean()\n# SerieA\ndf_o_SerieA = player_Data_Simple_SerieA.groupby(['Age'])['Overall'].mean()\n#Ligue1\ndf_o_Ligue1 = player_Data_Simple_Ligue1.groupby(['Age'])['Overall'].mean()\n\ndf_summary = pd.concat([df_o_Prem,df_o_Bundes,df_o_Laliga,df_o_SerieA,df_o_Ligue1], axis=1, \n                       keys=['Premier League','Bundesliga','La Liga','Serie A','Ligue 1'])\ndf_summary\nax = df_summary.plot()\nax.set_ylabel('Rating')\nax.set_title('Average Rating by Age')","fd8c44a3":"# Function to get the best squad for a single team. \n# Takes in parameters of position of player, Club name and the measure of interest - Overall player rating\/Potential\ndef get_best_squad(position, club = '*', measurement = 'Overall'):\n    df_copy = player_Data_Simple_Prem.copy()\n    df_copy = df_copy[df_copy['Club'] == club]\n    store = []\n    for i in position:\n        store.append([df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]\n                      ['Position'].to_string(index = False),\n                      df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]\n                      ['Name'].to_string(index = False), \n                      df_copy[df_copy['Position'].str.contains(i)][measurement].max(), \n                      float(df_copy.loc[[df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax()]]\n                            ['Value (M)'].to_string(index = False))])\n        df_copy.drop(df_copy[df_copy['Position'].str.contains(i)][measurement].idxmax(), inplace = True)\n    #return store\n    return np.sum([x[2] for x in store]).round(1), pd.DataFrame(np.array(store).reshape(11,4), columns = ['Position', 'Player', measurement, 'Value (M)']).to_string(index = False), np.sum([x[3] for x in store]).round(1)\n\n# Setting the constraints for the positions of the team\nsquad_352_adj = ['GK', 'B$', 'B$', 'B$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'M$|W$|T$', 'W$|T$|M$', 'W$|T$|M$']\n\nBy_club = player_Data_Simple_Prem.groupby(['Club'])['Overall'].mean()\n\n# Function to get the \ndef get_summary(squad):\n    OP = []\n    # only get top 100 clubs for shorter run-time\n    for i in By_club.sort_values(ascending = False).index[0:100]:\n        # for overall rating\n        O_temp_rating, _, _  = get_best_squad(squad, club = i, measurement = 'Overall')\n        # for potential rating & corresponding value\n        P_temp_rating, _, P_temp_value = get_best_squad(squad, club = i, measurement = 'Potential')\n        OP.append([i, O_temp_rating, P_temp_rating, P_temp_value])\n    return OP\n\nOP_df = pd.DataFrame(np.array(get_summary(squad_352_adj)).reshape(-1,4), columns = ['Club', 'Overall', 'Potential', 'Value of highest Potential squad'])\nOP_df.set_index('Club', inplace = True)\nOP_df = OP_df.astype(float)\n\nOP_df_rank = OP_df.sort_values('Overall')\n\n# Visualising the results\n# Function to produce a horizontal bar plot\ndef barplot(x_data, y_data, x_label=\"\", y_label=\"\", title=\"\"):\n    _, ax = plt.subplots()\n    # Draw bars, position them in the center of the tick mark on the x-axis\n    ax.barh(x_data, y_data, color = '#539caf', align = 'center')\n    ax.set_ylabel(y_label)\n    ax.set_xlabel(x_label)\n    ax.set_title(title)\n\nbarplot(x_data = OP_df_rank.index,y_data = OP_df_rank['Overall'],x_label='OverallRating',y_label = 'Club',title = 'Premier League Team Rating')\n","e4d16e10":"# Conclusion\nThere we have it. The Premier League teams are ranked based on the Overall player ratings of the best players in the different positions.\n<br>I have barely scratched the surface of the possible analysis which we can perform on the data available.\n<br>As a next step I will investigate and check if we can build a model to predict the league standings based on the player ratings from FIFA over the years. But that is for another day.\n","8093082b":"# Initial Verification and Data Exploration\n<br>\nWe prepared the data and out of all the players in the FIFA 19 data set, we narrowed our dataset to consider a limited set of features (columns) and at the same time, created a subset of the players (rows) - players playing in the Premier League teams.\n\nLet us now explore the data a bit, to understand what is going on with the data","932b9ba3":"# Set up and Data Load\n****Data Load:****\nAt the outset, we load all the required libraries and also load the data from the available dataset.\nIn this instance, the data is availble at the path: \"..\/input\/data.csv\"","f5f43e4f":"If the Premier League table positions were decided by FIFA overall ratings, we could confidently place our bets for the leagure positions and go home as millionaires.\n<br>\nHowever, reality is a bit different. We have more work to do.\n### Best players in different positions in Premier League\nLet us look at players in Premier League and try to come up with the best 4-3-3 formation with all the players in the league, irrespective of the clubs.\n<br>\nWhy, you ask? Well, because we can.","29681e9a":"Hmm. Pep was not joking. The average player rating in Premier League is not the highest among the top leagues of Europe. \n<br>However, it is interesting to observe that Premier League has the consistent highest average player rating for younger players, aged 22 to 25. \n<br> Is it possible that young players play well in Premier League and then move on to other leagues? I am looking at you, Barcelona and Real Madrid.\n<br><br> Sorry, Premier League fans, the BestLeagueInTheWorld trademark does not belong to you.\n\n## Premier League Club Ranking\nAs the last part of this analysis, let us try to rank the Premier League teams based on the sum of overall ratings of players.\n<br>There are a few things which we have to consider in this case.\n<br><br>1. The number of players in the roster are different for the teams - Chelsea might have 34 players in its roster, but Arsenal might have only 28. So a sum of overall ratings will inevitably skew the ranking towards the team with more number of players.\n<br>2. A team which has the best attacking players could have the worst defensive players. Such a team will have a higher sum of overall ranking, but will not necessarliy be the best all-round team in the league.\n<br><br> Inorder to offset these conditions, we will find the best 11 players of each team and then use the overall ratings of those 11 players to come up with club ranking.","81bf3c0a":"## Data Preparation\n<br>\nUse the different tools of pandas data frame to investigate and further trim the data set.","302c176e":"No surprises here. \n<br>The average Overall rating of the players increases from around the age of 20 and the decreases past the age of 35. This just makes me sad.\n<br> Football is an ageist game. Let us move on to more cheerful analysis.\n### Comparison of Leagues\n<br> How does the Premier League players fare against the other top leagues of the world? Pep Guardiola says that English Premier League is not the toughest in the world. Is that assertion backed up data? \n<br>Let us compare the average overall ratings of players of the top 5 leagues of Europe.\n<br><br>Note that we are jumping back to the data preparation phase here. If I were a meticulous person, I would have done this step in the previous section. No one is perfect.","95c661da":"This is an attempt to analyse the players of English Premier League, based on the rating s provided by the popular EA game - FIFA19.\nUsing the overall ratings of the players, we will try to create a summary score for each team in the Premier League and use it to create a rudimentary team ranking.","c32d41f7":"# Inspiration\nThis notebook is inspired by several kernels\/notebooks found in Kaggle.\n<br>\nNotable ones:\n<br>\nhttps:\/\/www.kaggle.com\/fosskevin\/fifa18-analysis-for-beginners\n<br>\nhttps:\/\/www.kaggle.com\/residentmario\/faceting-with-seaborn\/notebook\n<br>\nhttps:\/\/www.kaggle.com\/phimcpsy\/fifa-18-find-the-best-squad\/edit","60e0f9d7":"Interesting. Manchester City has four players in the best squad of the league. Chelsea has two. \n<br>\nDoes that mean that Manchester City will become league winners and Chelsea will finish second? Not if Sarri has anything to say about it.\n### Player Potential and Rating against Age\n<br>\nLet us take a break from investigating clubs and look at players. Player are people too, you know. They deserve our attention as much as, if not more than the clubs.\n<br>\nWe are going to look at the players' Overall rating and the Potential of players, and how it changes with Age. "}}