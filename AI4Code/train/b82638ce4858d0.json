{"cell_type":{"ce048713":"code","26134263":"code","ba22e5b0":"code","f0e4279f":"code","e9dce3e7":"code","f176ef9b":"code","1b5473ee":"code","f3dfcb2f":"code","6807e92a":"code","78260276":"code","62ca26dd":"code","2e0e7ed3":"code","51366e69":"code","0e0f04d2":"code","c36b65dd":"code","377c4009":"code","8fad4d64":"code","4c2207e7":"code","d371704a":"code","a94d628b":"code","26e28b8a":"code","b5540179":"code","4ef4b90d":"code","fd6b9d00":"code","fdc3e98f":"code","16171a1f":"code","3fe07860":"code","5980d4f3":"code","08e5260a":"code","eaada5e3":"markdown","1c4d9e79":"markdown"},"source":{"ce048713":"#Library Yang Dipakai\nimport numpy as np \nimport pandas as pd \nimport operator\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom prettytable import PrettyTable\nfrom numpy import sqrt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom IPython.display import Markdown as md\nimport statsmodels.api as sm","26134263":"#Import Dataset\ndf = pd.read_csv('..\/input\/autompg-dataset\/auto-mpg.csv')\ndf","ba22e5b0":"#Covert Objek ke numeric\nlabelencoder = LabelEncoder()\ndf['car name'] = labelencoder.fit_transform(df['car name'])\ndf['horsepower'] = labelencoder.fit_transform(df['horsepower'])","f0e4279f":"#Cek apakah data terdapat missing value atau tidaak\ndf.isnull().sum()","e9dce3e7":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df[['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']]\ny = df['mpg']\n","f176ef9b":"#Menampilkan data y_head\n##y.head()","1b5473ee":"df.info()","f3dfcb2f":"#Menampilkan data x_head\n##x.head()\n","6807e92a":"#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)","78260276":"#Membagi training data dengan Testing Data\n#x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)","62ca26dd":"#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n","2e0e7ed3":"#Menampilkan koefisien\nprint(model.coef_)\n","51366e69":"#Menampilkan intercept\nprint(model.intercept_)","0e0f04d2":"#Function untuk RMSE dan R Square\nrmse = sqrt(mean_squared_error(y,y_poly_pred))\nr2 = r2_score(y,y_poly_pred)","c36b65dd":"#Membuat Tabel Parameter\ntabel_parameter = PrettyTable(['parameter', 'nilai'])\ntabel_parameter.add_row(['polynomial\\ndegree', degree])\ntabel_parameter.add_row(['RMSE','{:.10}'.format(rmse)])\ntabel_parameter.add_row(['R^2', '{:.10}'.format(r2)])","377c4009":"print(tabel_parameter)","8fad4d64":"#mencari model regresi\nmodell=sm.OLS(y,x).fit()\npredictions=modell.predict(x)\nmodell.summary()","4c2207e7":"#menambahkan variabel konstan\nc=sm.add_constant(x)\nmodelll=sm.OLS(y,c).fit()\nmodelll.summary()\n","d371704a":"# let's visualize the distribution of the features of the df\ndf.hist(figsize=(12,8),bins=20)\nplt.show()","a94d628b":"#Menyebut function polynomial\ndegree = 1\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Function untuk RMSE dan R Square\nrmse = sqrt(mean_squared_error(y,y_poly_pred))\nr2 = r2_score(y,y_poly_pred)\n\n#Membuat Tabel Parameter\ntabel_parameter = PrettyTable(['parameter', 'nilai'])\ntabel_parameter.add_row(['polynomial\\ndegree', degree])\ntabel_parameter.add_row(['RMSE','{:.10}'.format(rmse)])\ntabel_parameter.add_row(['R^2', '{:.10}'.format(r2)])\nprint(tabel_parameter)","26e28b8a":"\ndef display_equation(model):\n    for coef in model.coef_:\n        pass\n    streq = \"$y = \" +str(model.intercept_[0])\n    for i,c in enumerate(coef):\n        j = len(coef)-i-1\n        if abs(c) > c:\n            sign = \"-\"\n        else:\n            sign = \"+\"\n        if i > 1:\n            streq += sign +str(abs(c)) + \" \\cdot x^{\"+str(i)+\"}\"\n        elif i == 1:\n            streq += sign +str(abs(c)) + \" \\cdot x\"\n\n    streq =   streq + \"$\"\n    return md(streq)\n","b5540179":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['cylinders'].values.reshape(df['cylinders'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Cylinders\\n')\nplt.xlabel('Cylinders')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)\n","4ef4b90d":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['displacement'].values.reshape(df['displacement'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Displacement\\n')\nplt.xlabel('Displacement')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)\n","fd6b9d00":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['horsepower'].values.reshape(df['horsepower'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Horsepower\\n')\nplt.xlabel('Horsepower')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","fdc3e98f":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['weight'].values.reshape(df['weight'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Weight\\n')\nplt.xlabel('Weight')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","16171a1f":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['acceleration'].values.reshape(df['acceleration'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Acceleration\\n')\nplt.xlabel('Acceleration')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","3fe07860":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['model year'].values.reshape(df['model year'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Model Year\\n')\nplt.xlabel('Model Year')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","5980d4f3":"#Split Data menjadi x (Variable independen) y (variabel dependen)\n\n#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['origin'].values.reshape(df['origin'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Origin\\n')\nplt.xlabel('Origin')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","08e5260a":"#Memisahkan Data\n#independen = ['cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name']\nx = df['car name'].values.reshape(df['car name'].size,1)\ny = df['mpg'].values.reshape(df['mpg'].size,1)\n\n#Menyebut function polynomial\ndegree = 5\npolynomial_features= PolynomialFeatures(degree=degree)\nx_poly = polynomial_features.fit_transform(x)\n\n#Function untuk model regression\nmodel = LinearRegression()\nmodel.fit(x_poly, y)\ny_poly_pred = model.predict(x_poly)\n\n#Plot Antara MPG dan Cylinders\n\nplt.figure(figsize=(10, 7))\nplt.scatter(x, y, s=10)\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(x,y_poly_pred), key=sort_axis)\nx, y_poly_pred = zip(*sorted_zip)\nplt.title('Plot Antara MPG dan Car Name\\n')\nplt.xlabel('Car Name')\nplt.ylabel('MPG')\n\nplt.plot(x, y_poly_pred, color='m')\nplt.show()\n#print(tabel_parameter)\ndisplay_equation(model)","eaada5e3":"#  Anggota Kelompok :\n##  1. Dewi Ananta Hakim\n##  2. Diaz Adha Asri Prakoso\n##  3. Yasmin Fathia Purwani","1c4d9e79":"**y = -21.86 - 0.2128x + 0.0162x^2**"}}