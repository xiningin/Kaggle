{"cell_type":{"5dc6070b":"code","7c42a5bf":"code","dbdf0613":"code","ddacf4a9":"code","dfda1cea":"code","00fc5955":"code","f2a84e41":"code","41ea69b3":"code","a8d1c702":"code","1d96cbf8":"code","1b5bda78":"code","5a64dec3":"code","228f3b49":"code","47cf87c4":"code","57bfd60d":"code","36fa56b4":"code","2cbed83a":"code","241d77ab":"code","9185758d":"code","600816ce":"code","36fccf02":"code","99ca367a":"code","7d5bcfd7":"code","00ba51ae":"code","cf007671":"code","d13f58a9":"code","8ae39129":"code","03cd3646":"code","383f44db":"code","195fa0d2":"markdown","820ea741":"markdown","266c8ae9":"markdown","6cb5e2bf":"markdown","2ef9ff26":"markdown","ef9e1464":"markdown","f986e4ed":"markdown","e184a5cb":"markdown","75871fa8":"markdown","d606b795":"markdown","843dd92f":"markdown","8e282a76":"markdown","be9dc976":"markdown","33c5d3fb":"markdown","861aee60":"markdown","5821a3a7":"markdown","acaa682b":"markdown","a4986984":"markdown","50207327":"markdown","c9b273cd":"markdown","b2663a53":"markdown","4053411f":"markdown","9823417f":"markdown","94bc2849":"markdown","eb969802":"markdown","5c90b7a6":"markdown","a260940b":"markdown","5371aed4":"markdown","371be1ab":"markdown"},"source":{"5dc6070b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c42a5bf":"def capital_indexes(name):\n    my_list=[]\n    for i , j in enumerate(name):\n        if ord(j) >= 65 and ord(j) <=90:\n            my_list.append(i)\n    return my_list    \n       \nans = capital_indexes(\"Entefrf Ghg deGB\")\nprint(ans)","dbdf0613":"def mid(name):\n    ans=\"\"\n    if len(name)%2 == 0:\n        return ans\n    else:\n        mid = len(name)\/\/2\n        return name[mid]\n\n        \nans = mid(\"Enter\")\nprint(ans)","ddacf4a9":"def online_count(my_dict):\n    count=0\n    for i in my_dict.values():\n        if i == \"online\":\n            count+=1\n    return count \n\nmy_dict = {\"Alice\":\"online\",\n            \"Jatin\":\"online\",\n            \"Kaka\":\"offline\",}\nans = online_count(my_dict)            \nprint(ans)","dfda1cea":"import random\ndef random_number():\n    ans = random.randint(1,100)\n    return ans\n    \nans = random_number()    \nprint(ans)","00fc5955":"def only_ints(a,b):\n    if type(a)==int and type(b) == int:\n        return True\n    else:\n        return False\n\nans = only_ints(4,3)        \nprint(ans)\nans = only_ints(\"name\",4)\nprint(ans)\nans = only_ints(\"fwef\",492.123)\nprint(ans)","f2a84e41":"def double_letters(name):\n    for i in range(0,len(name)-1):\n        if name[i] == name[i+1]:\n            return True\n    return False\n    \nans = double_letters(\"nono\")    \nprint(ans)  \nans = double_letters(\"hello\")\nprint(ans)","41ea69b3":"def add_dots(name):\n    return \".\".join(name)\n\ndef remove_dots(name):\n    return name.replace(\".\",\"\") \n\nans = add_dots(\"test\")    \nprint(ans)\nans = remove_dots(\"t.e.s.t\")\nprint(ans)\nans = remove_dots(add_dots(\"test\")) # will print the string as it was\nprint(ans)","a8d1c702":"def count(param):\n    count=0\n    for i in param:\n        if i is \"-\":\n            count+=1\n    return count+1        \n    \nans = count(\"ter-min-a-toe\")    \nprint(ans)","1d96cbf8":"def is_anagram(a,b):\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return True\n    else:\n        return False\n\nans = is_anagram(\"typhoon\", \"opython\")\nprint(ans)\nans = is_anagram(\"Alice\", \"Bob\")\nprint(ans)","1b5bda78":"def flatten(my_list):\n    sec_list=[]\n    for i in my_list:\n        for j in i:\n            sec_list.append(j)\n    return sec_list \n\nans = flatten([[1, 2], [3, 4]])\nprint(ans)","5a64dec3":"def largest_difference(my_list):\n    return max(my_list) - min(my_list)\n    \nans = largest_difference([6,4,1,3])    \nprint(ans)","228f3b49":"def div_3(num):\n    return num%3==0\n\nans = div_3(9)\nprint(ans)\nans = div_3(7)\nprint(ans)","47cf87c4":"def get_row_col(move):\n    board = {\"A\":0,\"B\":1,\"C\":2}\n    \n    letter = move[0]\n    number = move[1]\n    \n    row = int(number)-1\n    column = board[letter]\n    \n    return (row,column)\n    \nans = get_row_col(\"C1\")\nprint(ans)\nans = get_row_col(\"A3\")\nprint(ans)","57bfd60d":"def palindrome(param):\n    return param == param[::-1]\n    \nans = palindrome(\"bob\")\nprint(ans)\nans = palindrome(\"my name\")\nprint(ans)","36fa56b4":"def up_down(a):\n    return (a-1,a+1)\n    \nans = up_down(81)    \nprint(ans)","2cbed83a":"# naive solution\ndef consecutive_zeros(bin_str):\n    result = 0\n    streak = 0\n    for letter in bin_str:\n        if letter == \"0\":\n            streak += 1\n        else:\n            streak = 0\n        result = max(result, streak)\n    return result\n\nans = consecutive_zeros(\"1010100000101\")\nprint(ans)\n\n# shorter solution\ndef consecutive_zeros2(bin_str):\n    return max([len(s) for s in bin_str.split(\"1\")])\n\nans = consecutive_zeros2(\"101000101010001\")\nprint(ans)","241d77ab":"def all_equal(my_list):\n    if len(my_list) == 0:\n        return True\n    if len(set(my_list)) == 1:\n        return True\n    return False    \n\nans = all_equal([1,1,1])\nprint(ans)\nans = all_equal([\"a\",\"a\",\"x\"])\nprint(ans)\nans = all_equal([])\nprint(ans)","9185758d":"def triple_and(a,b,c):\n    if a and b and c:\n        return True\n    return False\n\nans = triple_and(True,True,True)    \nprint(ans)\nans = triple_and(False,True,False)\nprint(ans)","600816ce":"def convert(my_list):\n    return [str(i) for i in my_list]\n\nans = convert([1,2,3,23])    \nprint(ans)","36fccf02":"def zap(a,b):\n    my_list=[]\n    for i,j in zip(a,b):\n        my_list.append((i,j))\n    return my_list    \n\nans = zap([0,1,2,3],[5,6,7,8])        \nprint(ans)","99ca367a":"def list_xor(n,list1, list2):\n        list1.sort()\n        list2.sort()\n        \n        if n in list1:\n            if n in list2:\n                return False\n            if n not in list2:\n                return True\n        \n        if n in list2:\n            if n in list1:\n                return False\n            if n not in list1:\n                return True\n        \n        return False        \n        \n                \n\nans  =list_xor(1, [1, 2, 3], [1, 5, 6])        \nprint(ans)\n\n#another solution\ndef list_xor2(n, list1, list2):\n    return (n in list1) ^ (n in list2)\n\nans = list_xor2(1, [0, 0, 0], [4, 5, 6])\nprint(ans)","7d5bcfd7":"def param_count(*args):\n    return len(args)\n    \nans = param_count(2,3,9,1)\nprint(ans)","00ba51ae":"#DIY solution\n\ndef format_number(n):\n    result = \"\"\n    for i, digit in enumerate(reversed(str(n))):\n        if i != 0 and (i % 3) == 0:\n            result += \",\"\n        result += digit\n    return result[::-1]\n\nans = format_number(1000000)\nprint(ans)\n#built-in solution\n\ndef format_number1(n):\n    return \"{:,}\".format(n)\n\nans = format_number1(1000)\nprint(ans)","cf007671":"import random\n\ndef find_overlap(a,b):\n    a.sort()\n    b.sort()\n    print(\"List1\",a)\n    print(\"List2\",b)\n    new_list=[]\n    for x in b:\n        for y in a:\n            if x == y:\n                new_list.append(y)\n    return new_list            \n\nlist1 = random.sample(range(1,100),8) #create a list of 8 random numbers from 1 to 100\nlist2 = random.sample(range(1,100),10) \nans = find_overlap(list1, list2)\nprint(\"Common element in both list\",ans)","d13f58a9":"import random\n\ndef even_list(a):\n    return [x for x in a if x%2==0]\n\nlist1 = random.sample(range(1,10),5)\nprint(\"Generated list\",list1)\nans = even_list(list1)\nprint(ans)","8ae39129":"import random\n\ndef game(a,b):\n    if a == 'Rock' and b == 'Paper':\n        return \"Player 2 won\"\n    if a == 'Rock' and b == 'Scissor':\n        return \"player 1 won\"\n    if a == 'Paper' and b == 'Rock':\n        return \"player 1 won\"\n    if a == 'Paper' and b=='Scissor':\n        return \"player 2 won\"\n    if a == 'Scissor' and b=='Rock':\n        return \"player 2 won\"\n    if a == 'Scissor' and b=='Paper':\n        return \"Player 1 won\"\n    if a==b:\n        return \"Game Draw\"\n\noptions = ['Rock','Paper','Scissor']\n\noptions1 = random.randint(0,2)\nplayer1 = options[options1]\n\noptions2 = random.randint(0,2)\nplayer2 = options[options2]\nprint(\"Player 1 move {} and Player 2 move {}\".format(player1,player2))\nans = game(player1,player2)\nprint(ans)","03cd3646":"def reverse_string(n):\n    a = n.split(\" \")\n    b = a[::-1]\n    return \" \".join(b)\n\nuser_input = \"My name is this this and this\"\nans = reverse_string(user_input)\nprint(ans)","383f44db":"import random\nimport re\ndef generate_pass(n):\n    charsUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    charsLow = \"abcdefghijklmnopqrstuvwxyz\"\n    charsNumber = \"0123456789\"\n    charsSpecial = \"!@#$%&*()[]{}\"\n    charlist = [charsUpper, charsLow, charsNumber, charsSpecial]\n    password = ''\n    index = 0\n\n    while index < n:\n        password += random.choice(random.choice(charlist))\n        index += 1\n    return password\n\nn = 15 #length of password\nans = generate_pass(n)\nprint(ans)","195fa0d2":"Q14. A string is a palindrome when it is the same when read backwards.\n\nFor example, the string \"bob\" is a palindrome. So is \"abba\". But the string \"abcd\" is not a palindrome, because \"abcd\" != \"dcba\".\n\nWrite a function named palindrome that takes a single string as its parameter. Your function should return True if the string is a palindrome, and False otherwise.","820ea741":"Q7. Write a function named add_dots that takes a string and adds \".\" in between each letter. For example, calling add_dots(\"test\") should return the string \"t.e.s.t\".\n\nThen, below the add_dots function, write another function named remove_dots that removes all dots from a string. For example, calling remove_dots(\"t.e.s.t\") should return \"test\".","266c8ae9":"Q5. Write a function named only_ints that takes two parameters. Your function should return True if both parameters are integers, and False otherwise.\n\nFor example, calling only_ints(1, 2) should return True, while calling only_ints(\"a\", 1) should return False.","6cb5e2bf":"Q24. Take two lists, say for example these two:\n\n  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nand write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.","2ef9ff26":"Q6. Define a function named double_letters that takes a single parameter. The parameter is a string. Your function must return True if there are two identical letters in a row in the string, and False otherwise.\n\nFor example, the string \"hello\" has l twice in a row, while the string \"nono\" does not have two identical letters in a row.","ef9e1464":"Q3. Write a function named online_count that takes one parameter. The parameter is a dictionary that maps from strings of names to the string \"online\" or \"offline\".\n\nFor example, consider the following dictionary:\n\nstatuses = {\n    \"Alice\": \"online\",\n    \"Bob\": \"offline\",\n    \"Eve\": \"online\",\n}\nIn this case, the number of people online is 2.","f986e4ed":"Q12. Define a function named div_3 that returns True if its single integer parameter is divisible by 3 and False otherwise.\n\nFor example, div_3(6) is True because 6\/3 does not leave any remainder. However div_3(5) is False because 5\/3 leaves 2 as a remainder.","e184a5cb":"Q11. Define a function named largest_difference that takes a list of numbers as its only parameter.\n\nYour function should compute and return the difference between the largest and smallest number in the list.\n\nFor example, the call largest_difference([1, 2, 3]) should return 2 because 3 - 1 is 2.","75871fa8":"Q16. Define a function named consecutive_zeros that takes a single parameter, which is the string of zeros and ones.\n\nFor example, given the string:\n\n\"1001101000110\"\nThe biggest number of consecutive zeros is 3.","d606b795":"Q.28 Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password.","843dd92f":"Q27. Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order. \\\nFor example, say I type the string: My name is Michele\n\nThen I would see the string: Michele is name My","8e282a76":"Q13. Here's the backstory for this challenge: imagine you're writing a tic-tac-toe game, where the board looks like this:\n\n    1:  X | O | X\n        -----------\n    2:    |   |  \n        -----------\n    3:  O |   |\n        A   B  C\nThe board is represented as a 2D list:\n\nboard = [\n    [\"X\", \"O\", \"X\"],\n    [\" \", \" \", \" \"],\n    [\"O\", \" \", \" \"],\n]\n\nImagine if your user enters \"C1\" and you need to see if there's an X or O in that cell on the board. To do so, you need to translate from the string \"C1\" to row 0 and column 2 so that you can check board[row][column].\n\nYour task is to write a function that can translate from strings of length 2 to a tuple (row, column). Name your function get_row_col; it should take a single parameter which is a string of length 2 consisting of an uppercase letter and a digit.\n\nFor example, calling get_row_col(\"A3\") should return the tuple (2, 0) because A3 corresponds to the row at index 2 and column at index 0in the board.","be9dc976":"Q4. Define a function, random_number, that takes no parameters. The function must generate a random integer between 1 and 100, both inclusive, and return it.\n\nFor example, calling random_number() some times might first return 42, then 63, then 1.","33c5d3fb":"Q1. Write a function named capital_indexes. The function takes a single parameter, which is a string. Your function should return a list of all the indexes in the string that have capital letters.\n\nFor example, calling capital_indexes(\"HeLlO\") should return the list [0, 2, 4].","861aee60":"Q10. Write a function that takes a list of lists and flattens it into a one-dimensional list.\n\nName your function flatten. It should take a single parameter and return a list.\n\nFor example, calling:\n\nflatten([[1, 2], [3, 4]])\nShould return the list:\n\n[1, 2, 3, 4]","5821a3a7":"Q23. Write a function named format_number that takes a non-negative number as its only parameter.\n\nYour function should convert the number to a string and add commas as a thousands separator.\n\nFor example, calling format_number(1000000) should return \"1,000,000\".","acaa682b":"Q25. Write one line in a function that takes this list and makes a new list that has only the even elements of this list in it.","a4986984":"Q8. Define a function named count that takes a single parameter. The parameter is a string. The string will contain a single word divided into syllables by hyphens, such as these:\n\n\"ho-tel\"\n\"cat\"\n\"met-a-phor\"\n\"ter-min-a-tor\"\nYour function should count the number of syllables and return it.\n\nFor example, the call count(\"ho-tel\") should return 2.","50207327":"Q18. Define a function named triple_and that takes three parameters and returns True only if they are all True and False otherwise.","c9b273cd":"Q9. Two strings are anagrams if you can make one from the other by rearranging the letters.\n\nWrite a function named is_anagram that takes two strings as its parameters. Your function should return True if the strings are anagrams, and False otherwise.\n\nFor example, the call is_anagram(\"typhoon\", \"opython\") should return True while the call is_anagram(\"Alice\", \"Bob\") should return False.","b2663a53":"Q26. Create a rock paper Scissors game.","4053411f":"Q22. Define a function param_count that takes a variable number of parameters. The function should return the number of arguments it was called with.\n\nFor example, param_count() should return 0, while param_count(2, 3, 4) should return 3.","9823417f":"Q20. Define a function named zap. The function takes two parameters, a and b. These are lists.\n\nYour function should return a list of tuples. Each tuple should contain one item from the a list and one from b.\n\nYou may assume a and b have equal lengths.\n\nFor example:\n\nzap(\n    [0, 1, 2, 3],\n    [5, 6, 7, 8]\n)\nShould return:\n\n[(0, 5),\n (1, 6),\n (2, 7),\n (3, 8)]","94bc2849":"Q21. Define a function named list_xor. Your function should take three parameters: n, list1 and list2.\n\nYour function must return whether n is exclusively in list1 or list2.\n\nIn other words, if n is in both lists or in none of the lists, return False. If n is in only one of the lists, return True.\n\nFor example:\n\nlist_xor(1, [1, 2, 3], [4, 5, 6]) == True\n\nlist_xor(1, [0, 2, 3], [1, 5, 6]) == True\n\nlist_xor(1, [1, 2, 3], [1, 5, 6]) == False\n\nlist_xor(1, [0, 0, 0], [4, 5, 6]) == False","eb969802":"Q15. Define a function named up_down that takes a single number as its parameter. Your function return a tuple containing two numbers; the first should be one lower than the parameter, and the second should be one higher.\n\nFor example, calling up_down(5) should return (4, 6).","5c90b7a6":"Q2. Write a function named mid that takes a string as its parameter. Your function should extract and return the middle letter. If there is no middle letter, your function should return the empty string.\n\nFor example, mid(\"abc\") should return \"b\" and mid(\"aaaa\") should return \"\".","a260940b":"Q19. Define a function named convert that takes a list of numbers as its only parameter and returns a list of each number converted to a string.\n\nFor example, the call convert([1, 2, 3]) should return [\"1\", \"2\", \"3\"].","5371aed4":"That's it for now, do comment or suggest if you have some more beginners friendly problems. ","371be1ab":"Q17. Define a function named all_equal that takes a list and checks whether all elements in the list are the same.\n\nFor example, calling all_equal([1, 1, 1]) should return True."}}