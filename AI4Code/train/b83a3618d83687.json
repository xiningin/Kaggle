{"cell_type":{"0cd3c4c4":"code","101a5579":"code","1eafb39c":"code","803bf5c8":"code","faf37b91":"code","20e1178a":"code","aaf4a8eb":"code","2969976f":"code","fa120fee":"code","015222f2":"code","fecc32b0":"code","68003ea5":"code","483b29ac":"code","3dc966a9":"code","449a77b1":"code","27319050":"code","f4b5a9a6":"code","7642b636":"code","5c8416f6":"code","1fe0cfcb":"code","598f4b19":"code","8a79baff":"code","5ae8c637":"code","e50666c1":"code","34532a75":"code","a4341fe3":"code","6e151898":"code","d02fda42":"code","20ac4bde":"code","09cd8c06":"code","c921d22f":"code","fc5adbad":"code","b94800a7":"code","c11892f0":"code","01a6bb55":"code","6aca90a5":"code","5b32f586":"code","603744d1":"code","aadbc2dd":"code","05a45b3f":"code","b3792750":"code","e00fd5e0":"code","51f6f432":"code","78beb5b4":"code","8d1d6d98":"code","0c95ca0f":"code","db793d7e":"code","e68a1fec":"code","0b5a5d3a":"code","23eed9eb":"code","868f0b12":"code","c2382ef0":"code","d6a7902e":"code","d01e6056":"code","2bbb9e27":"markdown","c37c7911":"markdown","f7e49f31":"markdown","4a5add5f":"markdown","d7b704f9":"markdown","a7ae9c02":"markdown","46cacbf9":"markdown","befca5cf":"markdown","afdd08dc":"markdown","9dadd7d5":"markdown","bf347a65":"markdown","73f6d737":"markdown","2dbb4025":"markdown","56bb6943":"markdown","d95abbc0":"markdown","c59a7416":"markdown","2ef8d117":"markdown","f425ed9a":"markdown","e75aea00":"markdown","8bbc7ed5":"markdown","61dac33e":"markdown","b72ad4f1":"markdown","613841f4":"markdown","3420c866":"markdown"},"source":{"0cd3c4c4":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nfrom fastai.learner import *\nfrom fastai.column_data import *","101a5579":"path='..\/input\/'\ntmp_path='\/kaggle\/working\/tmp\/'\nmodels_path='\/kaggle\/working\/models\/'","1eafb39c":"ratings = pd.read_csv(path+'ratings.csv')\nratings.head()","803bf5c8":"movies = pd.read_csv(path+'movies.csv')\nmovies.head()","faf37b91":"g=ratings.groupby('userId')['rating'].count()\ntopUsers=g.sort_values(ascending=False)[:15]\n\ng=ratings.groupby('movieId')['rating'].count()\ntopMovies=g.sort_values(ascending=False)[:15]\n\ntop_r = ratings.join(topUsers, rsuffix='_r', how='inner', on='userId')\ntop_r = top_r.join(topMovies, rsuffix='_r', how='inner', on='movieId')\n\npd.crosstab(top_r.userId, top_r.movieId, top_r.rating, aggfunc=np.sum)","20e1178a":"val_idxs = get_cv_idxs(len(ratings))\nwd=2e-4\nn_factors = 50","aaf4a8eb":"cf = CollabFilterDataset.from_csv(path, 'ratings.csv', 'userId', 'movieId', 'rating')\nlearn = cf.get_learner(n_factors, val_idxs, 64, opt_fn=optim.Adam, tmp_name=tmp_path, models_name=models_path)","2969976f":"learn.fit(1e-2, 2, wds=wd, cycle_len=1, cycle_mult=2)","fa120fee":"math.sqrt(0.776)","015222f2":"preds = learn.predict()","fecc32b0":"y=learn.data.val_y\nsns.jointplot(preds, y, kind='hex', stat_func=None);","68003ea5":"movie_names = movies.set_index('movieId')['title'].to_dict()\ng=ratings.groupby('movieId')['rating'].count()\ntopMovies=g.sort_values(ascending=False).index.values[:3000]\ntopMovieIdx = np.array([cf.item2idx[o] for o in topMovies])","483b29ac":"m=learn.model; m.cuda()","3dc966a9":"movie_bias = to_np(m.ib(V(topMovieIdx)))","449a77b1":"movie_bias","27319050":"movie_ratings = [(b[0], movie_names[i]) for i,b in zip(topMovies,movie_bias)]","f4b5a9a6":"sorted(movie_ratings, key=lambda o: o[0])[:15]","7642b636":"sorted(movie_ratings, key=itemgetter(0))[:15]","5c8416f6":"sorted(movie_ratings, key=lambda o: o[0], reverse=True)[:15]","1fe0cfcb":"movie_emb = to_np(m.i(V(topMovieIdx)))\nmovie_emb.shape","598f4b19":"from sklearn.decomposition import PCA\npca = PCA(n_components=3)\nmovie_pca = pca.fit(movie_emb.T).components_","8a79baff":"movie_pca.shape","5ae8c637":"fac0 = movie_pca[0]\nmovie_comp = [(f, movie_names[i]) for f,i in zip(fac0, topMovies)]","e50666c1":"sorted(movie_comp, key=itemgetter(0), reverse=True)[:10]","34532a75":"sorted(movie_comp, key=itemgetter(0))[:10]","a4341fe3":"fac1 = movie_pca[1]\nmovie_comp = [(f, movie_names[i]) for f,i in zip(fac1, topMovies)]","6e151898":"sorted(movie_comp, key=itemgetter(0), reverse=True)[:10]","d02fda42":"sorted(movie_comp, key=itemgetter(0))[:10]","20ac4bde":"idxs = np.random.choice(len(topMovies), 50, replace=False)\nX = fac0[idxs]\nY = fac1[idxs]\nplt.figure(figsize=(15,15))\nplt.scatter(X, Y)\nfor i, x, y in zip(topMovies[idxs], X, Y):\n    plt.text(x,y,movie_names[i], color=np.random.rand(3)*0.7, fontsize=11)\nplt.show()","09cd8c06":"a = T([[1.,2],[3,4]])\nb = T([[2.,2],[10,10]])\na,b","c921d22f":"a*b","fc5adbad":"(a*b).sum(1)","b94800a7":"class DotProduct(nn.Module):\n    def forward(self, u, m): return (u*m).sum(1)","c11892f0":"model=DotProduct()","01a6bb55":"model(a,b)","6aca90a5":"u_uniq = ratings.userId.unique()\nuser2idx = {o:i for i,o in enumerate(u_uniq)}\nratings.userId = ratings.userId.apply(lambda x: user2idx[x])\n\nm_uniq = ratings.movieId.unique()\nmovie2idx = {o:i for i,o in enumerate(m_uniq)}\nratings.movieId = ratings.movieId.apply(lambda x: movie2idx[x])\n\nn_users=int(ratings.userId.nunique())\nn_movies=int(ratings.movieId.nunique())","5b32f586":"class EmbeddingDot(nn.Module):\n    def __init__(self, n_users, n_movies):\n        super().__init__()\n        self.u = nn.Embedding(n_users, n_factors)\n        self.m = nn.Embedding(n_movies, n_factors)\n        self.u.weight.data.uniform_(0,0.05)\n        self.m.weight.data.uniform_(0,0.05)\n        \n    def forward(self, cats, conts):\n        users,movies = cats[:,0],cats[:,1]\n        u,m = self.u(users),self.m(movies)\n        return (u*m).sum(1).view(-1, 1)","603744d1":"x = ratings.drop(['rating', 'timestamp'],axis=1)\ny = ratings['rating'].astype(np.float32)","aadbc2dd":"data = ColumnarModelData.from_data_frame(path, val_idxs, x, y, ['userId', 'movieId'], 64)","05a45b3f":"wd=1e-5\nmodel = EmbeddingDot(n_users, n_movies).cuda()\nopt = optim.SGD(model.parameters(), 1e-1, weight_decay=wd, momentum=0.9)","b3792750":"fit(model, data, 3, opt, F.mse_loss)","e00fd5e0":"set_lrs(opt, 0.01)","51f6f432":"fit(model, data, 3, opt, F.mse_loss)","78beb5b4":"min_rating,max_rating = ratings.rating.min(),ratings.rating.max()\nmin_rating,max_rating","8d1d6d98":"def get_emb(ni,nf):\n    e = nn.Embedding(ni, nf)\n    e.weight.data.uniform_(-0.01,0.01)\n    return e\n\nclass EmbeddingDotBias(nn.Module):\n    def __init__(self, n_users, n_movies):\n        super().__init__()\n        (self.u, self.m, self.ub, self.mb) = [get_emb(*o) for o in [\n            (n_users, n_factors), (n_movies, n_factors), (n_users,1), (n_movies,1)\n        ]]\n        \n    def forward(self, cats, conts):\n        users,movies = cats[:,0],cats[:,1]\n        um = (self.u(users)* self.m(movies)).sum(1)\n        res = um + self.ub(users).squeeze() + self.mb(movies).squeeze()\n        res = F.sigmoid(res) * (max_rating-min_rating) + min_rating\n        return res.view(-1, 1)","0c95ca0f":"wd=2e-4\nmodel = EmbeddingDotBias(cf.n_users, cf.n_items).cuda()\nopt = optim.SGD(model.parameters(), 1e-1, weight_decay=wd, momentum=0.9)","db793d7e":"fit(model, data, 3, opt, F.mse_loss)","e68a1fec":"set_lrs(opt, 1e-2)","0b5a5d3a":"fit(model, data, 3, opt, F.mse_loss)","23eed9eb":"class EmbeddingNet(nn.Module):\n    def __init__(self, n_users, n_movies, nh=10, p1=0.05, p2=0.5):\n        super().__init__()\n        (self.u, self.m) = [get_emb(*o) for o in [\n            (n_users, n_factors), (n_movies, n_factors)]]\n        self.lin1 = nn.Linear(n_factors*2, nh)\n        self.lin2 = nn.Linear(nh, 1)\n        self.drop1 = nn.Dropout(p1)\n        self.drop2 = nn.Dropout(p2)\n        \n    def forward(self, cats, conts):\n        users,movies = cats[:,0],cats[:,1]\n        x = self.drop1(torch.cat([self.u(users),self.m(movies)], dim=1))\n        x = self.drop2(F.relu(self.lin1(x)))\n        return F.sigmoid(self.lin2(x)) * (max_rating-min_rating+1) + min_rating-0.5","868f0b12":"wd=1e-5\nmodel = EmbeddingNet(n_users, n_movies).cuda()\nopt = optim.Adam(model.parameters(), 1e-3, weight_decay=wd)","c2382ef0":"fit(model, data, 3, opt, F.mse_loss)","d6a7902e":"set_lrs(opt, 1e-3)","d01e6056":"fit(model, data, 3, opt, F.mse_loss)","2bbb9e27":"Looking good - we've found a solution better than any of those benchmarks! Let's take a look at how the predictions compare to actuals for this model.","c37c7911":"## Movielens","f7e49f31":"### Movie bias","4a5add5f":"### Embedding interpretation","d7b704f9":"Now we can look at the top and bottom rated movies. These ratings are corrected for different levels of reviewer sentiment, as well as different types of movies that different reviewers watch.","a7ae9c02":"We can draw a picture to see how various movies appear on the map of these components. This picture shows the first two components.","46cacbf9":"Let's compare to some benchmarks. Here's [some benchmarks](https:\/\/www.librec.net\/release\/v1.3\/example.html) on the same dataset for the popular Librec system for collaborative filtering. They show best results based on [RMSE](http:\/\/www.statisticshowto.com\/rmse\/) of 0.91. We'll need to take the square root of our loss, since we use plain MSE.","befca5cf":"## Collab filtering from scratch","afdd08dc":"We're working with the movielens data, which contains one rating per row, like this:","9dadd7d5":"Just for display purposes, let's read in the movie names too.","bf347a65":"Here's the 1st component. It seems to be 'easy watching' vs 'serious'.","73f6d737":"First, we'll look at the movie bias term. Here, our input is the movie id (a single id), and the output is the movie bias (a single float).","2dbb4025":"Data available from http:\/\/files.grouplens.org\/datasets\/movielens\/ml-latest-small.zip","56bb6943":"### Bias","d95abbc0":"## Collaborative filtering","c59a7416":"## Analyze results","2ef8d117":"### Dot product model","f425ed9a":"Here's the 2nd component. It seems to be 'CGI' vs 'dialog driven'.","e75aea00":"Because it's hard to interpret 50 embeddings, we use [PCA](https:\/\/plot.ly\/ipython-notebooks\/principal-component-analysis\/) to simplify them down to just 3 vectors. ","8bbc7ed5":"### Dot product example","61dac33e":"## Create subset for Excel","b72ad4f1":"We create a crosstab of the most popular movies and most movie-addicted users which we'll copy into Excel for creating a simple example. This isn't necessary for any of the modeling below however.","613841f4":"### Mini net","3420c866":"We can now do the same thing for the embeddings."}}