{"cell_type":{"a2b650d0":"code","ecc27377":"code","c4330294":"code","55437900":"code","5649b912":"code","7c46ce37":"code","2b6087e6":"code","afe00872":"code","0c218985":"code","8c61fcc6":"code","7f326c9c":"code","a35a3493":"code","bd5720b5":"code","d4aa7c64":"code","70fe03c5":"code","98892e5d":"code","b1f93544":"code","b318cd71":"code","335906af":"code","233105b5":"markdown","4080b428":"markdown","4339b8b5":"markdown","239416e1":"markdown","dd90c8b7":"markdown","3bc5402e":"markdown","57d2f4f4":"markdown","35188a2f":"markdown","8e7c7948":"markdown","00b50af6":"markdown","7a51814f":"markdown","ca163a6c":"markdown","6e486673":"markdown","65d04903":"markdown","ec65e13a":"markdown","296836e9":"markdown","5f5fe9a9":"markdown","65e652ff":"markdown","d04a1a7f":"markdown","8ebaa5a9":"markdown"},"source":{"a2b650d0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 20)","ecc27377":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr","c4330294":"features = []","55437900":"f = tr.groupby('custid')['tot_amt'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f); f","5649b912":"f = tr.groupby('custid')['tot_amt'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f); f","7c46ce37":"f = tr.groupby('custid')['tot_amt'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f); f","2b6087e6":"f = tr.groupby('custid')['inst_mon'].agg([('\ud3c9\uade0\ud560\ubd80\uac1c\uc6d4\uc218', 'mean')]).reset_index()\nf.iloc[:,1] = f.iloc[:,1].apply(round, args=(1,))\nfeatures.append(f); f","afe00872":"n = tr.corner_nm.nunique()\nf = tr.groupby('custid')['brd_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f); f","0c218985":"tr['sdate'] = tr.sales_date.str[:10]\nf = tr.groupby(by = 'custid')['sdate'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f); f","8c61fcc6":"x = tr[tr['import_flg'] == 1].groupby('custid').size() \/ tr.groupby('custid').size()\nf = x.reset_index().rename(columns={0: '\uc218\uc785\uc0c1\ud488_\uad6c\ub9e4\ube44\uc728'}).fillna(0)\nf.iloc[:,1] = (f.iloc[:,1]*100).apply(round, args=(1,))\nfeatures.append(f); f","7f326c9c":"#def weekday(x):\n#    w = x.dayofweek \n#    if w < 4:\n#        return 1 # \uc8fc\uc911\n#    else:\n#        return 0 # \uc8fc\ub9d0\n#f = tr.groupby(by = 'custid')['sdate'].agg([('\uc694\uc77c\uad6c\ub9e4\ud328\ud134', lambda x : pd.to_datetime(x).apply(weekday).value_counts().index[0])]).reset_index()\n#features.append(f); f","a35a3493":"def fw(x):\n    k = x.dayofweek\n    if k <= 4 :\n        return('\uc8fc\uc911_\ubc29\ubb38')\n    else :\n        return('\uc8fc\ub9d0_\ubc29\ubb38')    \n    \ndf = tr.copy()\ndf = df.drop_duplicates(['custid','sales_date'])\n\ndf['week'] = pd.to_datetime(df.sales_date).apply(fw)\ndf = pd.pivot_table(df, index='custid', columns='week', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\ndf['\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728'] = ((df.iloc[:,1] \/ (df.iloc[:,1]+df.iloc[:,2]))*100).apply(round, args=(1,))\nf = df.copy().iloc[:,[0,-1]]\nfeatures.append(f); f","bd5720b5":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='custid', columns='season', values='tot_amt', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","d4aa7c64":"def f2(x):\n    if 9 <= x <= 12 :\n        return('\uc544\uce68_\uad6c\ub9e4\uac74\uc218')\n    elif 13 <= x <= 17 :\n        return('\uc810\uc2ec_\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uc800\ub141_\uad6c\ub9e4\uac74\uc218')  # datatime \ud544\ub4dc\uac00 \uc2dc\uac04 \ud615\uc2dd\uc5d0 \ub9de\uc9c0 \uc54a\uc740 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0 \uc800\ub141\uc2dc\uac04\uc73c\ub85c \ucc98\ub9ac\n\ntr['timeslot'] = tr.sales_date.str.split(' |:', expand=True).iloc[:,1].astype(int).apply(f2)\nf = pd.pivot_table(tr, index='custid', columns='timeslot', values='tot_amt', \n                   aggfunc=np.size).reset_index()\nfeatures.append(f); f","70fe03c5":"f = tr.groupby('custid')['corner_nm'].agg([('\uc8fc\uad6c\ub9e4\ucf54\ub108', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['\uc8fc\uad6c\ub9e4\ucf54\ub108'])  # This method performs One-hot-encoding\nfeatures.append(f); f","98892e5d":"X_train = pd.DataFrame({'custid': tr_train.custid.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left')\ndisplay(X_train)\n\nX_test = pd.DataFrame({'custid': tr_test.custid.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left')\ndisplay(X_test)","b1f93544":"IDtest = X_test.custid;\nX_train.drop(['custid'], axis=1, inplace=True)\nX_test.drop(['custid'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","b318cd71":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\n#parameters = {'max_depth': 6, 'n_estimators': 200}\n#clf = RandomForestClassifier(**parameters, random_state=0)\n\nparameters = {'xgb__max_depth': 3, 'xgb__subsample': 0.7}\nclf = XGBClassifier(**parameters, random_state=0, n_jobs=-1)\n\nscore = cross_val_score(clf, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","335906af":"pred = clf.fit(X_train, y_train).predict_proba(X_test)[:,1]\nfname = 'submission.csv'\nsubmissions = pd.concat([IDtest, pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","233105b5":"**[\ud30c\uc0dd\ubcc0\uc218 11]** \uc8fc\uad6c\ub9e4 \ucf54\ub108: 26\uac1c \ucf54\ub108 \uc911 \uac00\uc7a5 \ub9ce\uc774 \uad6c\ub9e4\ud55c \uacf3","4080b428":"## Step 1) Make features ## \n- \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc801\uc808\ud55c \ud30c\uc0dd\ubcc0\uc218(feature)\ub97c \ub9cc\ub4e0 \ud6c4 \ud559\uc2b5\uc6a9(`X_train`)\uacfc \ud3c9\uac00\uc6a9(`X_test`)\uc73c\ub85c \ub098\ub204\uc5b4 \uc800\uc7a5\ud55c\ub2e4.\n- scikit-learn\uc5d0\uc11c\ub294 categorical feature\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 One-hot-encoding\uc744 \ud1b5\ud574 numeric feature\ub85c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4.","4339b8b5":"<br><br>\n*\uc544\ub798 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uc0dd\uc131\ud55c \ubaa8\ub4e0 \ud30c\uc0dd\ubcc0\uc218\uac00 \ubcd1\ud569\ub418\uace0 \ud559\uc2b5\uc6a9\uacfc \ud3c9\uac00\uc6a9\uc73c\ub85c \ub098\ub258\uc5b4\uc9c4\ub2e4.*","239416e1":"## Step 2) Evaluate performance ##\n- Step 1)\uc5d0\uc11c \uc0dd\uc131\ud55c `X_train`\uacfc `X_test`\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc744 \ud655\uc778\ud55c\ub2e4.\n  - [5-fold cross validation](http:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html)\uc744 \uc218\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc758 \ud3c9\uade0 \uac12\uacfc \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \ucd9c\ub825\ud55c\ub2e4.\n  - \ubaa8\ud615\uc131\ub2a5\uc740 [ROC-AUC](http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py)\ub85c \uce21\uc815\ud558\uba70, \uac12\uc774 \ub192\uc744\uc218\ub85d \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. (*0 <= ROC-AUC <=1*)\n- \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub418\ub294 `submissions.csv`\ub97c Kaggle\uc5d0 \uc81c\ucd9c\ud558\uc5ec \"public leaderboard\"\uc5d0\uc11c \ubcf8\uc778\uc758 Score(ROC-AUC)\uc640 \ub4f1\uc218\ub97c \ud655\uc778\ud55c\ub2e4. ","dd90c8b7":"![](http:\/\/) **[\ud30c\uc0dd\ubcc0\uc218 8]** \uc694\uc77c \uad6c\ub9e4\ud328\ud134 with `\uc8fc\ub9d0\ubc29\ubb38\ube44\uc728`","3bc5402e":"<font color='green'>\n### Numeric Features","57d2f4f4":"**[\ud30c\uc0dd\ubcc0\uc218 2]** \uad6c\ub9e4\uac74\uc218","35188a2f":"## End","8e7c7948":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud559\uc2b5\uc6a9\uacfc \uc81c\ucd9c\uc6a9 \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub97c \uc77d\uace0 \ud558\ub098\ub85c \ud569\uce5c\ub2e4.*","00b50af6":"**[\ud30c\uc0dd\ubcc0\uc218 3]** \ud3c9\uade0 \uad6c\ub9e4\uac00\uaca9","7a51814f":"**[\ud30c\uc0dd\ubcc0\uc218 6]** \ub0b4\uc810\uc77c\uc218","ca163a6c":"<font color='green'>\n### Categorical Features","6e486673":"**[\ud30c\uc0dd\ubcc0\uc218 5]** \uad6c\ub9e4\uc0c1\ud488 \ub2e4\uc591\uc131: `\uad6c\ub9e4\ud55c \uc11c\ub85c\ub2e4\ub978 \ube0c\ub79c\ub4dc \uc218` \/ `1906`","65d04903":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \uc800\uc7a5\ud560 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.*","ec65e13a":"**[\ud30c\uc0dd\ubcc0\uc218 1]** \ucd1d \uad6c\ub9e4\uc561","296836e9":"**[\ud30c\uc0dd\ubcc0\uc218 9]** \uacc4\uc808\ubcc4 \uad6c\ub9e4\uac74\uc218: `Spring`(3~5)\/`Summer`(6~8)\/`Fall`(9-11)\/`Winter`(12~2)","5f5fe9a9":"**[\ud30c\uc0dd\ubcc0\uc218 7]** \uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\ube44\uc728: `\uc218\uc785\uc0c1\ud488 \uad6c\ub9e4\uac74\uc218` \/ `\ucd1d \uad6c\ub9e4\uac74\uc218`","65e652ff":" **[\ud30c\uc0dd\ubcc0\uc218 4]** \ud3c9\uade0 \ud560\ubd80\uac1c\uc6d4\uc218","d04a1a7f":"# MBA(Management & Business Analytics) Competition\n## starter code","8ebaa5a9":"**[\ud30c\uc0dd\ubcc0\uc218 10]** \uc2dc\uac04\ub300\ubcc4 \uad6c\ub9e4\uac74\uc218: `Morning`(09~12)\/`Afternoon`\/(13~17)\/`Evening`(18-20)"}}