{"cell_type":{"33ec60ba":"code","33be136f":"code","833399a5":"code","9c71dd0a":"code","b2be1490":"code","6d6c23c0":"code","df926483":"code","9aec1206":"code","45cdf3f9":"code","87df131c":"code","b0322a34":"code","3ea9b84c":"code","bd1051d8":"code","f0a512f5":"code","319ee395":"code","39558149":"code","46a9e539":"code","721f86c8":"code","3c87dccd":"code","440ac877":"code","a2d4e709":"code","29861716":"code","f0a57fb8":"code","98d7871c":"code","5b2108e1":"code","1d47bc1b":"code","fcda01db":"code","26e15c75":"code","40f8f299":"code","e02156ca":"code","21b56055":"code","c83b9d1a":"code","cbe86faf":"code","fa1ac5b7":"code","4abb0dfe":"code","c6d2aff9":"code","29d6b26b":"code","fef5e4aa":"code","bd2dc7c0":"code","368c6251":"code","a2837a7f":"code","3c3b2d4f":"code","4c25ce2a":"code","1426fe47":"code","7540639c":"code","264b35df":"code","8b9e2368":"code","9d53828b":"code","53b49910":"code","54570f36":"code","16184fd7":"code","f6d01778":"code","1f97a541":"code","0754424e":"code","1cefc0e1":"code","12d59e57":"code","f48e3dbc":"code","c7dc6d92":"code","a41ae26c":"code","d143df9f":"code","b6ecbed1":"code","f2175d36":"code","ab1bd396":"code","42e1e0e4":"code","75b8c88f":"code","5fdc2ff0":"code","6aeb9103":"code","88b8a513":"markdown","2d409a2a":"markdown","3df90758":"markdown","3a18597a":"markdown","278f8ca1":"markdown","5e599cae":"markdown","e572d4c3":"markdown","6c4eff2d":"markdown","3b232e5c":"markdown","8201ce65":"markdown","e69777aa":"markdown","052c128f":"markdown","4120278c":"markdown","9c8f3207":"markdown","af834f31":"markdown","127912de":"markdown","075e4414":"markdown","ea44d250":"markdown","06623dc1":"markdown","f68e2c48":"markdown","1ce489f3":"markdown","593c8188":"markdown","eddca132":"markdown","0e309b9e":"markdown","cf69ad1a":"markdown","cff5ca74":"markdown","b2702e2b":"markdown","03531982":"markdown","cfa36062":"markdown","809f587b":"markdown","c0ee3be4":"markdown","3674b8b5":"markdown","04a042ca":"markdown","220b1256":"markdown","be1b0566":"markdown","014ca32c":"markdown","9626db8d":"markdown","e9fa30e4":"markdown","5d71930f":"markdown","6d412f9b":"markdown","c601dba5":"markdown","9ca642b8":"markdown","9c61f65a":"markdown","a6724451":"markdown","7615dfe5":"markdown","6a8e4170":"markdown","446dc300":"markdown","c12a5d60":"markdown","d620b96b":"markdown","8d38bab5":"markdown","8fbe18d1":"markdown","48a662a3":"markdown","fea45fde":"markdown","34b0dea4":"markdown","9965fc9f":"markdown","6519698b":"markdown","6943316e":"markdown","95493c26":"markdown","c80ebc01":"markdown","a83485c5":"markdown","f7b430be":"markdown","19b94499":"markdown","433c4420":"markdown"},"source":{"33ec60ba":"import pandas as pd\nimport numpy as np\nimport scipy\nimport scipy.stats as stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom pandas.plotting import scatter_matrix\n\nfrom sklearn import preprocessing\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\n\n# Setting data frame display \npd.set_option('display.max_columns', None)","33be136f":"ecom_ram = pd.read_csv(\"..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv\")","833399a5":"ecom_ram.head(10)","9c71dd0a":"ecom_ram.shape","b2be1490":"for col_name in ecom_ram.columns:\n    if ecom_ram[col_name].value_counts().shape == (1,):\n        print(col_name)","6d6c23c0":"for col_name in ecom_ram.columns:\n    if ecom_ram[col_name].value_counts().shape != (1,) and (ecom_ram[col_name].value_counts().shape[0] < 5) and ((ecom_ram[col_name].value_counts().iloc[0] - ecom_ram[col_name].value_counts().iloc[1]) > 1200):\n            print(col_name)","df926483":"ecom_ram['badges_count'].value_counts()","9aec1206":"ecom_ram['badge_local_product'].value_counts()","45cdf3f9":"ecom_ram['badge_product_quality'].value_counts()","87df131c":"ecom_ram['badge_fast_shipping'].value_counts()","b0322a34":"ecom_ram['shipping_is_express'].value_counts()","3ea9b84c":" ecom_ram_clean = ecom_ram.drop(['title', 'title_orig', 'currency_buyer', 'badge_local_product', 'badge_product_quality', 'badge_fast_shipping', 'merchant_name', 'merchant_title', 'merchant_profile_picture', 'product_picture', 'product_variation_size_id', 'product_url', 'shipping_option_name', 'shipping_is_express', 'theme', 'tags', 'urgency_text', 'crawl_month', 'merchant_info_subtitle'], axis =1) ","bd1051d8":"ecom_ram_clean.info()","f0a512f5":"# Product Color Transformation \npc_fit = ecom_ram_clean['product_color'].unique()\nle = preprocessing.LabelEncoder()\nle.fit(pc_fit)\necom_ram_clean['product_color'] = le.transform(ecom_ram_clean['product_color'])\n\n# Origin Country Transformation \noc_fit = ecom_ram_clean['origin_country'].unique()\nle.fit(oc_fit)\necom_ram_clean['origin_country'] = le.transform(ecom_ram_clean['origin_country'])\n\n# Merchant ID Transformation\nmid_fit = ecom_ram_clean['merchant_id'].unique()\nle.fit(mid_fit)\necom_ram_clean['merchant_id'] = le.transform(ecom_ram_clean['merchant_id'])\n\n# Product ID Transformation\npid_fit = ecom_ram_clean['product_id'].unique()\nle.fit(pid_fit)\necom_ram_clean['product_id'] = le.transform(ecom_ram_clean['product_id'])\necom_ram_clean.head()","319ee395":"(ecom_ram_clean < 0).values.any()","39558149":"ecom_ram_clean.isna().sum()","46a9e539":"fill_value = {'has_urgency_banner':0} \necom_ram_clean = ecom_ram_clean.fillna(value = fill_value)\necom_ram_clean['has_urgency_banner'].value_counts()","721f86c8":"imputer = SimpleImputer(strategy = \"most_frequent\")\nimputer.fit(ecom_ram_clean)\n# imputer.statistics_\nX = imputer.transform(ecom_ram_clean)\necom_ram_tr = pd.DataFrame(X, columns = ecom_ram_clean.columns)\necom_ram_tr.isna().sum()","3c87dccd":"%matplotlib inline\necom_ram_tr.hist(bins = 50, figsize=(20,16)) \nplt.show()","440ac877":"ecom_ram_tr['inventory_total'].value_counts()","a2d4e709":"ecom_ram_tr['origin_country'].value_counts()","29861716":"ecom_ram_tr = ecom_ram_tr.drop(['inventory_total', 'origin_country'], axis =1)\necom_ram_tr.info()","f0a57fb8":"def outlier_cols_ram(x): \n    n = len(x)\n    mean_x = np.mean(x)\n    sd_x = np.std(x)\n    numerator = max(abs(x-mean_x))\n    g_calculated = numerator\/sd_x\n    t_value = stats.t.ppf(1 - 0.05 \/ (2 * n), n - 2)\n    g_critical = ((n - 1) * np.sqrt(np.square(t_value))) \/ (np.sqrt(n) * np.sqrt(n - 2 + np.square(t_value)))\n    return col if (g_critical) < g_calculated else 0","98d7871c":"cols_with_outliers = []\nfor col in ecom_ram_tr.columns:\n    outlier_col = outlier_cols_ram(ecom_ram_tr[col])\n    cols_with_outliers.append(outlier_col)\n\nwhile (cols_with_outliers.count(0)):\n    cols_with_outliers.remove(0)\ncols_with_outliers","5b2108e1":"for col in cols_with_outliers:\n    ecom_ram_tr[col] = (ecom_ram_tr[col]**(1\/3.7))","1d47bc1b":"any_outlier_col = []\nfor col in cols_with_outliers:\n    outlier_col = outlier_cols_ram(ecom_ram_tr[col])\n    any_outlier_col.append(outlier_col)\n\nwhile (any_outlier_col.count(0)): \n    any_outlier_col.remove(0)\nany_outlier_col","fcda01db":"def grubbs_test(x):\n    n = len(x)\n    mean_x = np.mean(x)\n    sd_x = np.std(x)\n    numerator = max(abs(x-mean_x))\n    g_calculated = numerator\/sd_x\n    print(\"Grubbs Calculated Value:\",g_calculated)\n    t_value = stats.t.ppf(1 - 0.05 \/ (2 * n), n - 2)\n    g_critical = ((n - 1) * np.sqrt(np.square(t_value))) \/ (np.sqrt(n) * np.sqrt(n - 2 + np.square(t_value)))\n    print(\"Grubbs Critical Value:\",g_critical)\n    if g_critical > g_calculated:\n        print(\"From grubbs_test we observe that calculated value is lesser than critical value, Accept null hypothesis and conclude that there is no outlier\\n\")\n    else:\n        print(\"From grubbs_test we observe that calculated value is greater than critical value, Reject null hypothesis and conclude that there is an outliers\\n\")","26e15c75":"for col in any_outlier_col:\n    ecom_ram_tr[col] = (ecom_ram_tr[col]**(3.7))      ","40f8f299":"ecom_ram_tr['price'].value_counts()","e02156ca":"%matplotlib inline\necom_ram_tr['price'].hist(bins = 50, figsize=(10,7)) \nplt.show()","21b56055":"for i in ecom_ram_tr['price']:\n    if i >= 22:\n        ecom_ram_tr['price'] = ecom_ram_tr['price'].replace(i, 22)\necom_ram_tr['price'].value_counts()","c83b9d1a":"grubbs_test(ecom_ram_tr['price'])","cbe86faf":"ecom_ram_tr['rating'].value_counts()","fa1ac5b7":"%matplotlib inline\necom_ram_tr['rating'].hist(bins = 50, figsize=(10,7)) \nplt.show()","4abb0dfe":"for i in ecom_ram_tr['rating']:\n    if i <= 1.8:\n        ecom_ram_tr['rating'] = ecom_ram_tr['rating'].replace(i, 1.8)\necom_ram_tr['rating'].value_counts()","c6d2aff9":"grubbs_test(ecom_ram_tr['rating'])","29d6b26b":"ecom_ram_tr['shipping_option_price'].value_counts()","fef5e4aa":"%matplotlib inline\necom_ram_tr['shipping_option_price'].hist(bins = 50, figsize=(10,7)) \nplt.show()","bd2dc7c0":"for i in ecom_ram_tr['shipping_option_price']:\n    if i >= 7:\n        ecom_ram_tr['shipping_option_price'] = ecom_ram_tr['shipping_option_price'].replace(i, 6)\necom_ram_tr['shipping_option_price'].value_counts()","368c6251":"grubbs_test(ecom_ram_tr['shipping_option_price'])","a2837a7f":"ecom_ram_tr['merchant_rating_count'].value_counts()","3c3b2d4f":"%matplotlib inline\necom_ram_tr['merchant_rating_count'].hist(bins = 50, figsize=(10,7)) \nplt.show()","4c25ce2a":"for i in ecom_ram_tr['merchant_rating_count']:\n    if i >= 160000:\n        ecom_ram_tr['merchant_rating_count'] = ecom_ram_tr['merchant_rating_count'].replace(i, 160000)\necom_ram_tr['merchant_rating_count'].value_counts()","1426fe47":"grubbs_test(ecom_ram_tr['merchant_rating_count'])","7540639c":"ecom_ram_tr['merchant_rating'].value_counts()","264b35df":"%matplotlib inline\necom_ram_tr['merchant_rating'].hist(bins = 50, figsize=(10,7)) \nplt.show()","8b9e2368":"for i in ecom_ram_tr['merchant_rating']:\n    if i <= 3.3:\n        ecom_ram_tr['merchant_rating'] = ecom_ram_tr['merchant_rating'].replace(i, 3.3)\n    elif i >= 4.3:\n        ecom_ram_tr['merchant_rating'] = ecom_ram_tr['merchant_rating'].replace(i, 4.3)\n        \necom_ram_tr['merchant_rating'].value_counts()","9d53828b":"grubbs_test(ecom_ram_tr['merchant_rating'])","53b49910":"split = StratifiedShuffleSplit(n_splits = 1, test_size = 0.2, random_state = 65)\nfor train_index, test_index in split.split(ecom_ram_tr, ecom_ram_tr['merchant_has_profile_picture']):\n    train_set = ecom_ram_tr.loc[train_index]\n    test_set = ecom_ram_tr.loc[test_index]\n      \nprint(f\"Rows in train set : {len(train_set)}\\nRows in test set: {len(test_set)}\\n\")","54570f36":"train_set['badges_count'].value_counts()","16184fd7":"test_set['badges_count'].value_counts()","f6d01778":"train_set['merchant_has_profile_picture'].value_counts()","1f97a541":"test_set['merchant_has_profile_picture'].value_counts()","0754424e":"ecom_ram_tr = train_set.copy()\necom_ram_tr.shape","1cefc0e1":"corr_matrix = ecom_ram_tr.corr()\ncorr_matrix['units_sold'].sort_values()","12d59e57":"attributes = ['units_sold', 'rating_count', 'product_id']\nscatter_matrix(ecom_ram_tr[attributes], figsize = (12,8))\nplt.plot()","f48e3dbc":"ecom_ram_tr.plot(kind = \"scatter\", x = \"units_sold\", y=\"rating_count\", alpha = 0.8)","c7dc6d92":"ecom_ram_tr = train_set.drop(\"units_sold\", axis = 1) # Dropping feature from the training set\necom_ram_labels = train_set[\"units_sold\"].copy()     # Storing feature in labels variable","a41ae26c":"my_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy = \"median\")),\n    ('std_scaler', StandardScaler()),\n])","d143df9f":"ecom_ram_num = my_pipeline.fit_transform(ecom_ram_tr)\necom_ram_num","b6ecbed1":"ecom_ram_num.shape","f2175d36":"model_comparison = pd.DataFrame()\n\nmodel_names = [ExtraTreesRegressor, AdaBoostRegressor, BaggingRegressor, GradientBoostingRegressor, RandomForestRegressor]\nfor model_name in model_names:\n    model = model_name()\n    model.fit(ecom_ram_num, ecom_ram_labels)\n    \n    # Evaluating the Model\n    scores = cross_val_score(model, ecom_ram_num, ecom_ram_labels, scoring = \"neg_mean_squared_error\" ,cv=10)\n    rmse_scores = np.sqrt(-scores)\n    \n    model_comparison = model_comparison.append({'model_name': model_name, 'mean_rmse': rmse_scores.mean(), 'rmse_std': rmse_scores.std()}, ignore_index = True)\nmodel_comparison.sort_values(by = ['mean_rmse'], inplace = True) \nprint(model_comparison)","ab1bd396":"model = ExtraTreesRegressor()\nmodel.fit(ecom_ram_num, ecom_ram_labels)","42e1e0e4":"from joblib import dump, load\ndump(model, 'EcomRam.joblib')","75b8c88f":"model = load('EcomRam.joblib')","5fdc2ff0":"X_test = test_set.drop('units_sold', axis=1)\nY_test = test_set['units_sold'].copy()\nX_test_prepared = my_pipeline.transform(X_test)\nfinal_predictions = model.predict(X_test_prepared)\n\n# Evaluating Results\nfinal_mse = mean_squared_error(Y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)\n# print(final_predictions, list(Y_test))","6aeb9103":"print(\"Using ExtraTreesRegressor the model predicts units sold with MSE: {} and RMSE: {}.\".format(final_mse, final_rmse))","88b8a513":"#### #2. Finding all Columns with Outliers  ","2d409a2a":"#### #4. Verifying the Outlier removal from all the Columns","3df90758":"### D. Removing Unnecessary Columns","3a18597a":"### C. Finding Unnecessary Columns","278f8ca1":"##### **#Result:** Above columns possess outliers.","5e599cae":"# Importing Libraries ","e572d4c3":"#### #5.3 . Removing Outlier from 'price' Column (Using Imputing)","6c4eff2d":"##### **Observation #4.1:** 'units_sold' has strongest positive correlation with 'rating_count'. 'units_sold' has strongest negative correalation with 'product_id'. ","3b232e5c":"###  C. Copying the training data and verifying correctness","8201ce65":"### F. Looking for Negative Values","e69777aa":"### A. Plotting the column wise distribution of the values   ","052c128f":"# TASK #2: Analysing and Improving Column-Wise Value Distribution","4120278c":"#### #1. 'badges_count' ","9c8f3207":"##### **#Result:** All NaNs are filled with suitable values.","af834f31":"#### #5.3. Removing Outlier from 'merchant_rating' Column (Using Imputing)","127912de":"#### #1. Filling 'has_urgency_banner' column first. (with zeros where there is no urgency)","075e4414":"#### #5.2 . Removing Cubical Transform from Columns with Outliers  ","ea44d250":"### B. Analyzing Data Frame Columns","06623dc1":"#### #1. Splitting the data frame ","f68e2c48":"### D: Detection and Removal of Outliers from All Columns","1ce489f3":"###  B. Verifying Stratification ","593c8188":"# TASK #3: Splitting Training and Testing Data ","eddca132":"##### **#Result:** The best result is obtained by using ExtraTreesRegressor model. It is the most suitable model for the given dataset.","0e309b9e":"#### #2. Finding columns with very few value counts in other indices (and less than 5 indices)","cf69ad1a":"### E.  Converting Object Datatype Columns to Integers  ","cff5ca74":"##### **Observation #1.3:** Above columns are unnecessary as they have only one unique value","b2702e2b":"<!-- ### B. Obtaining the Unique Values in Each Object Type Column  -->","03531982":"# TASK #4: Plotting Feature Correlations with 'units_sold'","cfa36062":"# Final Result","809f587b":"### E. Filling Missing Values ","c0ee3be4":"# TASK #9: Testing the Model in Test Data","3674b8b5":"# TASK #6. Performing Feature Scaling  ","04a042ca":"#### #3. Removing Outliers from all the Columns (Performing Cubical Transformation) ","220b1256":"##### **Observation #2.1:** 'inventory_total' and 'origin_country' seem to have very few value counts in other indices.   \n##### **Observation #2.2:** Many columns seems to possess outliers.","be1b0566":"# TASK #5: Forming Training Set and Training Labels  ","014ca32c":"#### #5.5. Outlier Removal in 'merchant_rating' Column (Using Imputing)","9626db8d":"### A. Finding Correlation of 'units_sold' with Other Features","e9fa30e4":"#### #5.4 . Removing Outlier from 'rating' Column (Using Imputing)","5d71930f":"##### **#Result**: The above columns still possess outliers. ","6d412f9b":"##### **#Result:** 'inventory_total' column is removed. ","c601dba5":"#### #5.6 . Removing Outlier from 'merchant_rating_count' Column (Using Imputing)","9ca642b8":"#### #1. Finding columns with only one unique value","9c61f65a":"#### #5.5 . Removing Outlier from ''shipping_option_price'' Column (Using Imputing)","a6724451":"##### **#Observation 2.3:** Very few values in indices other than '50.0' (Total sum of other indices is just 10). This column can be dropped.","7615dfe5":"#### #2. 'merchant_has_profile_picture'","6a8e4170":"### A. Reading the .csv Data","446dc300":"##### **Observation #1.1:** 'title', 'title_orig', 'product_url', 'product_picture' (URL), 'product_variation_size_id' are redundant as 'product_id' also represents the same data.  \n##### **Observation #1.2:** 'merchant_name', 'merchant_title', 'merchant_info_subtitle' and ''merchant_profile_picture' (URL) are redundant as 'merchant_id' also represents the same data.   ","c12a5d60":"##### **Observation #1.5:** Columns with object datatype can be converted to 'int' for convenience.\n##### **Observation #1.6:** Some columns possess missing values. ","d620b96b":"#### #5. Individually removing outliers from 'any_outlier_col' columns","8d38bab5":"### B. Plotting Correlation Among Top Correlated Features","8fbe18d1":"#### #1. Declaring Grubbs Test Function for Outlier Detection","48a662a3":"##### **#Observation 2.4:** Very few values in indices other than '1.0' (Total sum of other indices is just 47). This column can be dropped.","fea45fde":"#### #5.1. Declaring function for outlier detection. ","34b0dea4":"#### #2. Filling rest of the columns with  \"most frequent\" values","9965fc9f":"# TASK #1: Reading & Cleaning the Data Frame ","6519698b":"##### **Observation #1.4:** Above columns are unnecessary as they possess very few value counts in other indices.","6943316e":"##### **#Result:** There are no negative values in the data frame .","95493c26":"##### **#Result:** All object values have converted to integers","c80ebc01":"# Task #7: Selecting the Desired Model for the E-Commerce Sales","a83485c5":"# TASK #8: Implementing ExtraTreesRegressor and Saving the Model","f7b430be":"### A.  Splitting the Dataframe to Train and Test Data ","19b94499":"### G. Looking for NaNs (Missing Values)","433c4420":"### B: Removing Additional Columns"}}