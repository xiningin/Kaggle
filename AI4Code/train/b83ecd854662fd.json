{"cell_type":{"4fe49238":"code","522bc9c9":"code","3c3ff42f":"code","a5d77762":"code","aaa0e67a":"code","0ac929d0":"code","536476f6":"code","ed7b994c":"code","612ecd08":"code","3b51a114":"code","76d59119":"code","1e0afdd9":"code","3886c074":"code","50542b02":"code","4614c6d7":"code","d5e9c801":"code","3d8d7b98":"code","3c4f944c":"code","90750b69":"code","4260467f":"code","9bfdd142":"code","f8eda9e7":"code","b103b4d1":"code","5e34d203":"code","91206f7e":"code","38d7760a":"code","d92690c7":"code","fcc17380":"code","9dc93b2a":"code","62dea754":"code","ddbc7ac3":"code","6f7301bb":"code","e7bef65d":"code","6a2e412b":"code","5909a1e6":"code","8fbe08c4":"code","56523d11":"code","11a29a61":"code","07d6f0cc":"code","2a6376d4":"code","2413af88":"code","01b8dec8":"code","d7b37bee":"code","a7d90e84":"code","87ed34e7":"code","0afd178b":"code","43ab1ddd":"markdown","529cb6b0":"markdown"},"source":{"4fe49238":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport dateutil\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom pandasql import sqldf\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","522bc9c9":"data_path='\/kaggle\/input\/dwdm-petrol-prices\/Petrol Prices.csv'\ndata = pd.read_csv(data_path)\ndata","3c3ff42f":"data.head(7)","a5d77762":"data.tail(4)","aaa0e67a":"data.shape # prints a tuple with the (number of rows, number of columns)","0ac929d0":"data.columns","536476f6":"data.dtypes","ed7b994c":"# Find count of non-NA across the columns \ndata.count(axis = 1) ","612ecd08":"count = data['Date'].value_counts() \nprint(count) ","3b51a114":"count = data.groupby(['Date']).count() \nprint(count) ","76d59119":"df_results = sqldf(\"select count(Date) as Records, Date as Month  \" +\n                   \"from data group by Month\")\ndf_results","1e0afdd9":"#data['Date'] = pd.to_datetime(data['Date'])","3886c074":"data.loc[data['Date'] == 'ug 18 2016']","50542b02":"data.at[143,'Date']='Aug 18 2016'\ndata","4614c6d7":"data['Date'] = pd.to_datetime(data['Date'])\ndata","d5e9c801":"data.loc[data['Date'] == 'Aug 18 2016']","3d8d7b98":"data[\"months\"]=pd.DatetimeIndex(data['Date']).month\ndata","3c4f944c":"do=data.groupby('months').count()\ndo","90750b69":"rng = pd.DataFrame() \nrng['date'] = pd.date_range('1\/1\/2011', periods = 72, freq ='H') \n  \n# Print the dates in dd-mm-yy format \nrng[:5] \n  \n# Create features for year, month, day, hour, and minute \nrng['year'] = rng['date'].dt.year \nrng['month'] = rng['date'].dt.month \nrng['day'] = rng['date'].dt.day \n\n  \n# Print the dates divided into features \nrng.head(3) ","4260467f":"do.plot(title=\"Bar graph\", kind='bar',\n            figsize=(12,8))","9bfdd142":"data[\"day\"]=pd.DatetimeIndex(data['Date']).day\ndata[\"year\"]=pd.DatetimeIndex(data['Date']).year\ndata\n\n#data[\"day\"]=0\n#data[\"year\"]=0","f8eda9e7":"data['Timestamp']= pd.to_datetime(data['Date']).values.astype(datetime)\ndata","b103b4d1":"# replacing na values in NaN with Null\ndata[\"months\"].fillna(\"Null\", inplace = True) \ndata[\"day\"].fillna(\"Null\", inplace = True)  \ndata[\"year\"].fillna(\"Null\", inplace = True) \n\ndata ","5e34d203":"data2 = data[['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery'\n]]\ndata2","91206f7e":"data3 = data[['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery','Timestamp'\n]]\ndata3","38d7760a":"data3.plot(kind='line',x='Timestamp', y=['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery'\n],\n           title=\"Line\",\n            figsize=(20,20))","d92690c7":"data.Gasolene_90[0]","fcc17380":"help(pd.date_range)","9dc93b2a":"intrest_col= data['Gasolene_90'].pct_change(periods=4)\nintrest_col\n","62dea754":"intrest_col.head(20)","ddbc7ac3":"intrest_col.plot(kind='bar', figsize=(20,20))","6f7301bb":"new={'HFO':data.HFO, 'Asphalt':data.Asphalt,'months':data.months,'year':data.year,'day':data.year,'Timestamp':data.Timestamp}\ndata11=pd.DataFrame(new)\ndata11","e7bef65d":"data11.info()\n","6a2e412b":"#drop null\ndata11=data11.dropna(subset=['HFO'])","5909a1e6":"data11","8fbe08c4":"data11['months'].astype(np.int64)","56523d11":"kmeans = KMeans(n_clusters=3).fit(data11)\ncentroids = kmeans.cluster_centers_\nprint(centroids)","11a29a61":"kmeans = KMeans(n_clusters=3).fit(data11)","07d6f0cc":"new={'HFO':data.HFO, 'Asphalt':data.Asphalt}\ndata12=pd.DataFrame(new)\ndata12","2a6376d4":"data12=data12.dropna(subset=['HFO'])","2413af88":"data12\n","01b8dec8":"data11['cluster']=kmeans.fit_predict(data12)\ndata11","d7b37bee":"data11.plot(kind='scatter',x='HFO',y='Asphalt',c=kmeans.labels_, cmap='rainbow', figsize=(20,20))","a7d90e84":"Year = data[['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery','year'\n]]\nYear","87ed34e7":"G_year=Year.groupby('year').sum()\nG_year","0afd178b":"G_mean=G_year.groupby('year').mean()\nG_mean","43ab1ddd":"A time series is a sequence of observations taken sequentially in time.\n\nMoving Average (MA)\nThe moving average (MA) method models the **next step in the sequence** as a linear function of the **residual errors** from a mean process at prior time steps.\n\nThe notation for the model involves specifying the order of the model q as a parameter to the MA function, e.g. MA(q). For example, MA(1) is a first-order moving average model.\n\nThe method is suitable for univariate time series without trend and seasonal components.","529cb6b0":"change ug 18 2016 to aug 18 2016"}}