{"cell_type":{"04920051":"code","ad43c361":"code","d8c33738":"code","2c757d4c":"code","4c61666d":"code","c65f0644":"code","db05304a":"code","be71a523":"code","7134f408":"code","14f9d15d":"code","838d6a6a":"code","447e4a83":"code","ad331c58":"code","825acba8":"code","6610456e":"code","ce679985":"code","4e93124e":"code","f95efba7":"code","76e65650":"code","5b66faba":"code","f14747ad":"code","51b63fb5":"code","1a515d4e":"code","aac3e795":"code","5fdea605":"code","b8d3ab6e":"code","87804bf2":"code","8415b486":"code","0a76480e":"code","26ac2849":"code","ff78ac89":"code","69eda57e":"code","e3589881":"code","c7241a7f":"code","9cffb4e9":"code","b29ad823":"code","09c6d040":"code","1f67d616":"code","3a451be7":"code","28524810":"code","39cf3ff4":"code","9dc9f3fd":"code","bb6988e4":"code","91fe3d7f":"code","994a8d5d":"code","5bb4f18f":"code","983240c6":"code","334a64fb":"markdown","efbfd2d2":"markdown","0bc50d3f":"markdown","2f2f3211":"markdown","6627b372":"markdown","02ee185a":"markdown","e26b9d79":"markdown","27cced88":"markdown"},"source":{"04920051":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ad43c361":"df = pd.read_csv(\"\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv\") ","d8c33738":"df","2c757d4c":"df.head()","4c61666d":"df.tail()","c65f0644":"df.sample(10)   #Random Sample of 10 rows  ","db05304a":"df.shape        # Rows and Columns of the Dataset. ","be71a523":"#Data type of the Data\n\n\ndf.info()","7134f408":"pd.set_option('precision',2)\n\n\ndf.describe()","14f9d15d":"df.describe().T","838d6a6a":"import warnings\nwarnings.filterwarnings(\"ignore\")  ","447e4a83":"# Outlier Analysis\n\nfig, axs = plt.subplots(1, figsize = (5,5))\nplt1 = sns.boxplot(df['YearsExperience'])\nplt.tight_layout()","ad331c58":"# Checking the Null Values in the Data. \n\ndf.isnull().sum()","825acba8":"# Checking zero values in the data. \n\n(df == 0).sum()   ","6610456e":"df.Salary.value_counts()","ce679985":"df.Salary.value_counts().sum()     #Total Unique Values in the Data. ","4e93124e":"\ncorrmat = df.corr()                        #pariwise correlation of all the columns \ntop_corr_features = corrmat.index                    \nplt.figure(figsize = (5,5))\n\n#heatmap of the data\n\ng = sns.heatmap(df[corrmat.index].corr(),annot = True, cmap=\"RdYlGn\") # annot present values in the blocks. cmap = colormap \n\n# g = sns.heatmap(df[top_corr_features].corr(),annot = True, cmap=\"RdYlGn\") ","f95efba7":"pd.set_option('precision', 2)         # 2 values after precision. \n\ndf.corr()   #Correlation between Variables.","76e65650":"import seaborn as sns\nsns.pairplot(df)","5b66faba":"\nX = df['YearsExperience']\ny= df['Salary']  \n\nplt.figure(figsize=(6,6))\n\nplt.scatter(X, y, label = \"label_name\" )\n\n# Set x and y axes labels\nplt.xlabel('YearsExperience')\nplt.ylabel('Salary')\n\nplt.title('Scatter Plot')\n\nplt.show()\n2\n","f14747ad":"sns.regplot(df.YearsExperience, df.Salary, order=1, ci=None, scatter_kws={'color':'r', 's':9}) \n\nplt.xlim(2,10)\nplt.ylim(bottom=30000)\nplt.show() \n","51b63fb5":"df1 = pd.DataFrame({'YearsExperience as X': df['YearsExperience'], 'Salary as Y ':df['Salary'] })   \ndf1.head(10)\n","1a515d4e":"# Calculating the mean of X and Y \n\nmean_x = df['YearsExperience'].sum() \/ df['YearsExperience'].count()  \nround(mean_x,2) \n\nmean_y = df['Salary'].sum() \/ df['Salary'].count()   \nround(mean_y,2) \n","aac3e795":"X = df['YearsExperience'].values          \nY = df['Salary'].values \nn = len(X)\n\n\n# Using the formula to calculate m and c\n\nnumer = 0\ndenom = 0\nfor i in range(n):\n    numer += (X[i] - mean_x) * (Y[i] - mean_y)\n    denom += (X[i] - mean_x) ** 2\n    m = numer \/ denom\n    c = mean_y - (m * mean_x)","5fdea605":"m","b8d3ab6e":"c","87804bf2":"Y = m * 1.3 + c  ","8415b486":"Y","0a76480e":"import sklearn.linear_model as skl_lm\nfrom sklearn.linear_model import LinearRegression\n\nregr = skl_lm.LinearRegression()\nX = df.YearsExperience.values.reshape(-1,1)\ny = df.Salary\n\nregr.fit(X,y)\n","26ac2849":"regr.intercept_","ff78ac89":"regr.coef_","69eda57e":"regr.score(X, y)\n","e3589881":"( regr.score(X,y) ) * 100           # Accuracy Score of the Model.  ","c7241a7f":"# Now We can Make Prediction. \n\nregr.predict([[1.1]])   ","9cffb4e9":"list1 = []\n\nfor x in df['YearsExperience']:\n    print(regr.predict([[x]]))   \n    list1.append(regr.predict([[x]]))\n    ","b29ad823":"from itertools import chain\nflatten_list = list(chain.from_iterable(list1))\nstr(flatten_list)","09c6d040":"results = list(map(float, flatten_list))\nresults","1f67d616":"df1 = pd.DataFrame({'Actual': df['Salary'], 'Predicted': results, 'Difference': round( (df['Salary']-results),2 ) }) \ndf1.head(10)\n","3a451be7":"#Sum of Residuals \n\nround( (df['Salary']-results),2 ).sum() ","28524810":"# Sum of Residual errors are : \n\n\nSRS = round( (df['Salary']-results),2 )**2    \n\nSRS\n\nSRS.sum()\n","39cf3ff4":"# The sum of weighted residuals\n\none = round( (df['Salary']-results),2 )   \n\n\n\nfig = plt.figure()\none\nsns.distplot(one, bins = 15) \n\nplt.show()\n","9dc9f3fd":"from sklearn.metrics import mean_squared_error, r2_score\nSales_pred = regr.predict(X)                       # Value of Target variable when we predict it with the Independent variable. \nr2_score(df['Salary'], results) ","bb6988e4":"# Actual Line\n\nsns.regplot(df.YearsExperience, df.Salary, order=1, ci=None, scatter_kws={'color':'r', 's':9}) \n\n#Predicted Line\n\nsns.regplot(df.YearsExperience, results, order=1, ci=None, scatter_kws={'color':'g', 's':9}) \n\nplt.xlim(2,10)\nplt.ylim(bottom=30000)\nplt.show() \n","91fe3d7f":"sns.residplot(x = \"YearsExperience\", y = \"Salary\", data = df)\nplt.show()","994a8d5d":"sns.residplot(x = \"YearsExperience\", y = \"Salary\", data = df, lowess = True,color = 'r') \nplt.show()","5bb4f18f":"import matplotlib.pyplot as plt\n\nplt.plot(df['YearsExperience'], df['Salary'], label = \"Actual Line\")\n\nplt.plot(df['YearsExperience'], results, label = \"Predicted Line\")\n\nplt.xlabel('x - axis')\nplt.ylabel('y - axis')\nplt.title('Two lines on same graph!')\nplt.legend()\nplt.show()","983240c6":"#  OLS = ordinary least square method. \n\nimport statsmodels.api as sm\nX2 = sm.add_constant(X)\nest = sm.OLS(y,X2)                                   \nest2=est.fit()\nest2.summary()","334a64fb":"## Linear Regression using Methods","efbfd2d2":"- There are no more data we have, I think it is a sample of a big dataset and now we didn't need to scaling the data. ","0bc50d3f":"# Linear Regression using Classical Methods","2f2f3211":"# Salary Prediction ","6627b372":"# We can see that Our values from the Classical Method and Sklearn Model are same. ","02ee185a":"## Analysis the Relation using Visualization ","e26b9d79":"- We can see there is no more outlier in the column","27cced88":"Y = m * x + c "}}