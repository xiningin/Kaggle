{"cell_type":{"e0535bb4":"code","4009369b":"code","a4c0d85a":"code","3a1a7572":"code","ca056d0d":"code","e38cb4b1":"code","2a8b7146":"code","8b05190c":"code","7e5d28e0":"code","5d05f84c":"code","7e701c55":"code","2b13a1e1":"code","af1c9b21":"code","183aabd2":"code","26ec0754":"code","3ad5e736":"code","9a9e4b62":"code","1f5fb9a7":"code","413b06bb":"code","8bdd3494":"code","643d87fe":"code","99d56e55":"code","86c76bf7":"code","737200b9":"code","c3a883e9":"code","94f8a369":"code","7be79b77":"code","ba2145af":"code","fbb0530f":"code","a734ad69":"code","5f72d0ac":"markdown","61cc4f5a":"markdown","6d33150e":"markdown","d342ff7f":"markdown","55a4c7a3":"markdown","c14bf66d":"markdown","06e62b89":"markdown","79d8bdc2":"markdown","5627f4cc":"markdown","223f163f":"markdown","6c219ac6":"markdown","3b1635f7":"markdown"},"source":{"e0535bb4":"#Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","4009369b":"# Dataset Load\nurl = '..\/input\/prediction-of-purchased-car\/Social_Network_Ads.csv'\ndata = pd.read_csv(url, header='infer')","a4c0d85a":"data.shape","3a1a7572":"#checking for null or missing values\ndata.isna().sum()","ca056d0d":"#dropping the User Id column\ndata = data.drop(columns='User ID',axis=1)","e38cb4b1":"#Function to define category name for Purchased column\n\ndef pur_cat(pur_code):\n    if pur_code == 0:\n        return 'Not Purchased'\n    else:\n        return 'Purchased'\n    \n#Applying the function to Purchased Column\ndata['Purchased'] = data['Purchased'].apply(pur_cat)\n","2a8b7146":"data.head()","8b05190c":"#Estimated Salary vs Gender -- Purchase Stats\nsns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.swarmplot (x='Gender', y='EstimatedSalary', data=data, hue = 'Purchased',palette=\"Set2\")\nplt.title('Estimated Salary vs Gender -- Purchase Stats')\nplt.ylabel('Estimated Salary')\nplt.xlabel('Gender')\nax.legend(fancybox=True, shadow=True )","7e5d28e0":"#Estimated Age vs Gender -- Purchase Stats\nsns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.swarmplot (x='Gender', y='Age', data=data, hue = 'Purchased',palette=\"Set2\")\nplt.title('Estimated Salary vs Gender -- Purchase Stats')\nplt.ylabel('Estimated Salary')\nplt.xlabel('Gender')\nax.legend(fancybox=True, shadow=True )","5d05f84c":"#Gender vs Purchase -- Average Age Heatmap\nAvgAge_PTable = data.pivot_table(values='Age', index='Gender', columns='Purchased', aggfunc=np.mean)\n\n# Using seaborn heatmap\nplt.figure(figsize=(6,6))\nplt.title('Gender vs Purchase -- Average Age Heatmap', fontsize=14)\nplt.tick_params(labelsize=10)\nsns.heatmap(AvgAge_PTable.round(), cmap='icefire', linecolor='grey',linewidths=0.1, cbar=False, annot=True, fmt=\".0f\")","7e701c55":"#Gender vs Purchase -- Average Estimated Salary Heatmap\nAvgSal_PTable = data.pivot_table(values='EstimatedSalary', index='Gender', columns='Purchased', aggfunc=np.mean)\n\n# Using seaborn heatmap\nplt.figure(figsize=(6,6))\nplt.title('Gender vs Purchase -- Average Estimated Salary Heatmap', fontsize=14)\nplt.tick_params(labelsize=10)\nsns.heatmap(AvgSal_PTable.round(), cmap='icefire', linecolor='grey',linewidths=0.1, cbar=False, annot=True, fmt=\".0f\")","2b13a1e1":"# --- Importing ML libraries ---\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder \n\n#Metrics Libraries\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\n#ML Classifier Algorithm Libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","af1c9b21":"lae = LabelEncoder()\n\ndata['Gender'] = lae.fit_transform(data['Gender'])","183aabd2":"#Backup of the original dataset\ndata_backup = data.copy()","26ec0754":"#creating unseen dataframe\nunseen_df = data.iloc[:10,:]","3ad5e736":"unseen_df.head(10)","9a9e4b62":"#Dropping the top 10 rows from the original dataset\ndata.drop(data.index[:10],inplace=True)\n\n# Re-indexing the original dataset\ndata.reset_index(inplace=True, col_level=1, drop=True)","1f5fb9a7":"data.head(10)","413b06bb":"#Feature & Target Selection\nfeatures = ['Gender', 'Age', 'EstimatedSalary']\ntarget = ['Purchased']\n\n# Feature& Target  Dataset\nX = data[features]\ny = data[target]","8bdd3494":"#Dataset Split  [train = 90%, test = 10%]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0) \n\n#Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","643d87fe":"# -- Building Model List --\nmodels = []\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nmodels.append(('RFC', RandomForestClassifier()))","99d56e55":"# -- Model Evaluation --\nmodel_results = []\nmodel_names = []\n\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=None, shuffle=False)\n    cross_val_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    model_results.append(cross_val_results)\n    model_names.append(name)\n    print(name, \":--\", \"Mean Accuracy =\", '{:.2%}'.format(cross_val_results.mean()), \n                       \"Standard Deviation Accuracy =\", '{:.2%}'.format(cross_val_results.std())\n         )","86c76bf7":"# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(model_results)\nax.set_xticklabels(model_names)\nplt.show()","737200b9":"#Instantiating KNN Model\nknc = KNeighborsClassifier(n_neighbors=3, metric='minkowski')\n","c3a883e9":"#Training the KNN Model\nknc.fit(X_train, y_train)","94f8a369":"#Making a prediction\ny_pred = knc.predict(X_test)\n\n# -- Calculating Metrics \nprint(\"Trained Model Accuracy Score - KNN Model: \",'{:.2%}'.format(accuracy_score(y_test,y_pred)) )","7be79b77":"unseen_df.head(10)","ba2145af":"#Making prediction on unseen data\nunseenData_pred = knc.predict(unseen_df.iloc[:,0:3])\n\n#Appending the prediction to the unseen dataset\nunseen_df['Pred_Purchased'] = unseenData_pred","fbb0530f":"unseen_df.head(10)","a734ad69":"# -- Calculating Metrics \nprint(\"Trained KNN Model Accuracy Score on unseen data: \",'{:.2%}'.format(accuracy_score(unseen_df['Purchased'],unseenData_pred)) )","5f72d0ac":"> **Data Visualisation**","61cc4f5a":"Since there is no seperate test dataset, I will slice the top 10 rows of the existing dataset and use them as \"unseen\" dataset for validating the model at the end.","6d33150e":"**Modeling & Prediction**","d342ff7f":"**Pre-Processing**","55a4c7a3":"Under modeling & prediction, I shall compare multiple Classifier Models from SKLEARN library and try to find the model with highest accuracy. The model that gives the higest accuracy will then be used for making predictions on unseen data","c14bf66d":"**Model Creation & Evaluation**","06e62b89":"**As you can observe, KNN Model gives us the highest accuracy of 91.11%**","79d8bdc2":"**Converting the Gender category to numerical code using Label Encoding**","5627f4cc":"**Making Prediction on Unseen Data**","223f163f":"I believe that the low accuracy on the unseen data is due to the fact that the model has been trained on less number of data records i.e. around 360. ","6c219ac6":"**Exploration**","3b1635f7":"**KNN Model Predictions & Metrics****"}}