{"cell_type":{"8cad2087":"code","ad9f8d5c":"code","a65f00c6":"code","f69f62d8":"code","215ad814":"code","276a3d41":"code","e41346c8":"code","ca7e1d4b":"code","6bbadb8c":"code","efa31b8a":"code","5bb41a94":"code","4428cf35":"code","8eebe254":"code","e83004cc":"code","b6880829":"code","01080081":"code","f8cf4ae9":"code","d8662544":"code","e244bf9d":"code","2c7966b0":"code","539b68a2":"code","fbcc9386":"code","1b90b2b4":"code","c5d867c6":"code","ffb1f012":"code","b120cb49":"code","eaf93e54":"code","97327c52":"code","14d7e449":"code","5d839daf":"code","f1df3d3b":"code","7a118cc8":"code","7d813c2e":"code","3d9247ef":"code","3941713a":"code","500531f8":"code","14b929d9":"code","0315e97b":"code","58565684":"code","6997ace5":"code","fb902acd":"code","967ef27e":"code","56bfbd42":"code","fc5a0613":"code","46ec61f7":"code","96c0ecf9":"code","c461e9e1":"markdown","fb103c50":"markdown","867e41b2":"markdown","cb6217d0":"markdown","24647c11":"markdown","bec051be":"markdown","42f51b00":"markdown","a942bbe2":"markdown","52a451a2":"markdown","ec1c84a9":"markdown","140cc33a":"markdown","8f3d268b":"markdown","f5318f88":"markdown","7bf5a2a0":"markdown","54d5ac3e":"markdown","b78cd920":"markdown","5a9bd5da":"markdown","ffad69eb":"markdown","ca4fd3b3":"markdown","aeec4afd":"markdown","d4d08c5a":"markdown","b9a7c9ff":"markdown","5b4a67b5":"markdown","59a7b064":"markdown","da58e700":"markdown","e09a8b44":"markdown","d81cf7cf":"markdown","bf2b470f":"markdown","fe9a74f3":"markdown","961712e7":"markdown","e0a200b3":"markdown","cd976fc4":"markdown","6f739a1d":"markdown","223c74a1":"markdown","d85c81b5":"markdown","79705931":"markdown","028b56d0":"markdown","a56300c2":"markdown","bb194f0c":"markdown","7e0052a8":"markdown"},"source":{"8cad2087":"import pandas as pd\nimport numpy as np\nimport plotly.express as px \nfrom plotly.offline import init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport random \nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nfrom geopy.geocoders import Nominatim ","ad9f8d5c":"def random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color\n\ndef size(num):\n    s = [i*10 for i in range(num,0,-1)]\n    return s  ","a65f00c6":"df = pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv\")\ndf.head(3)","f69f62d8":"df1 = pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\")\ndf1['season'] = df1['date'].str[:4].astype(int)\ndf1.head(3)","215ad814":"df1.replace(to_replace =\"Deccan Chargers\", value =\"Sunrisers Hyderabad\",inplace=True)\ndf1.replace(to_replace =\"Bangalore\", value =\"Bengaluru\",inplace=True)\ndf1.replace(to_replace =\"Rising Pune Supergiant\", value =\"Rising Pune Supergiants\",inplace=True)\ndf1.replace(to_replace =\"Pune Warriors\", value =\"Rising Pune Supergiants\",inplace=True)\ndf1.replace(to_replace =\"M Chinnaswamy Stadium\", value =\"M.Chinnaswamy Stadium\",inplace=True)\ndf1.replace(to_replace =\"Subrata Roy Sahara Stadium\", value =\"Maharashtra Cricket Association Stadium\",inplace=True)\ndf1.replace(to_replace =\"Delhi Daredevils\", value =\"Delhi Capitals\",inplace=True)\ndf1.replace(to_replace =\"Punjab Cricket Association IS Bindra Stadium, Mohali\", value =\"Punjab Cricket Association Stadium, Mohali\",inplace=True)\ndf.replace(to_replace =\"Deccan Chargers\", value =\"Sunrisers Hyderabad\",inplace=True)\ndf.replace(to_replace =\"Delhi Daredevils\", value =\"Delhi Capitals\",inplace=True)\ndf.replace(to_replace =\"Rising Pune Supergiant\", value =\"Rising Pune Supergiants\",inplace=True)\ndf.replace(to_replace =\"Pune Warriors\", value =\"Rising Pune Supergiants\",inplace=True)","276a3d41":"df2 = df1[['id','season']].merge(df, left_on = 'id', right_on = 'id', how = 'left')\ndf2.head(3)","e41346c8":"city = df1.city.unique()# to get uniques cities\ncity = city.tolist()\ndel city[-5]# nan value was present at this index\nUAE = ['Dubai', 'Sharjah', 'Abu Dhabi']\nSA = ['Cape Town', 'Port Elizabeth', 'Durban', 'Centurion', 'East London', 'Johannesburg', 'Kimberley', 'Bloemfontein']\nIND = ['Bengaluru', 'Chandigarh', 'Delhi', 'Mumbai', 'Kolkata', 'Jaipur', 'Hyderabad', 'Chennai','Ahmedabad', 'Cuttack', 'Nagpur', 'Dharamsala', 'Kochi', 'Indore', 'Visakhapatnam', 'Pune', 'Raipur', 'Ranchi', 'Rajkot', 'Kanpur']","ca7e1d4b":"bat = df.groupby(['batsman','id']).agg({'ball':'count','batsman_runs':'sum'})\nbat = bat.groupby(['batsman']).agg({'count','mean','sum'})\nbat.columns = ['total_matches1', 'mean_balls_faced','total_balls_faced','total_matches2','mean_runs','total_runs']\nbat['rate'] = (bat['total_runs']*100)\/bat['total_balls_faced']\nhigh_avg = bat[bat['total_matches1']>=30].sort_values(by='mean_runs',ascending=False)[:10]\nhigh_rate = bat[bat['total_matches1']>=30].sort_values(by='rate',ascending=False)[:10]\nfig = make_subplots(rows=2, cols=1, subplot_titles=('Highest Strike Rate','Highest Average'))\nfig.add_trace(\n    go.Scatter(x=high_rate.index, y=high_rate['rate'], mode='markers', marker=dict(size=size(10),color = '#f79902'),line=dict(color='#000000',width=15), name = 'Strike rate'),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Scatter(x=high_avg.index, y=high_avg['mean_runs'], mode='markers', marker=dict(size=size(10),color = '#7d1dde'),line=dict(color='#000000',width=15), name = 'Average'),\n    row=2, col=1)\n\niplot(fig)","6bbadb8c":"fig = go.Figure([go.Bar(x=df['batsman'].value_counts().index.tolist()[:11], y= df['batsman'].value_counts().tolist()[:11],marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Batsmen who faced most balls',xaxis=dict(title='Batsmen',tickmode='linear'),yaxis=dict(title='Balls Faced'))\nfig.update_layout(layout)\niplot(fig)","efa31b8a":"l = [];l1 = [];l2 = []\nfor player in df.batsman.unique():\n    l.append((player,sum(df[df['batsman']==player]['batsman_runs'].values) ))\nl.sort(key=lambda x: x[1])\na = l[-10:]\na.reverse()\nfor i in a:\n    l1.append(i[0])\n    l2.append(i[1])\n\nfig = go.Figure([go.Bar(x=l1, y= l2,text = l2,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most runs scored',xaxis=dict(title='Batsmen',tickmode='linear'),yaxis=dict(title='Runs'))\nfig.update_layout(layout)\niplot(fig)","5bb41a94":"four = df[df['batsman_runs'] == 4]['batsman'].value_counts()[:10]\nsix = df[df['batsman_runs'] == 6]['batsman'].value_counts()[:10]\nfig = make_subplots(rows=2, cols=1, subplot_titles=(\"Most fours hit\", \"Most sixes hit\"))\n\nfig.append_trace(go.Scatter(\n    x=four.index,\n    y=four.values,\n    mode='markers',\n    name = 'Fours',\n    marker=dict(size=size(10),color = '#bd207b')\n), row=1, col=1)\n\nfig.append_trace(go.Scatter(\n    x=six.index,\n    y=six.values,\n    mode='markers',\n    name = 'Sixes',\n    marker=dict(size=size(10),color = '#1c5ead')\n), row=2, col=1)\niplot(fig)","4428cf35":"fig = go.Figure([go.Bar(x=df['bowler'].value_counts().index.tolist()[:11], y= df['bowler'].value_counts().tolist()[:11],marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Bowler who bowled most balls',xaxis=dict(title='Bowler',tickmode='linear'),yaxis=dict(title='Balls Bowled'))\nfig.update_layout(layout)\niplot(fig)","8eebe254":"l3 = [];l4 = []\nwickets_by_bowler = ['caught', 'bowled', 'lbw', 'stumped', 'hit wicket', 'caught and bowled']\nw = df[df['dismissal_kind'].isin(wickets_by_bowler)]['bowler'].values\ndiss = [(i,w.tolist().count(i)) for i in set(w)]\ndiss.sort(key=lambda x: x[1])\nb = diss[-10:]\nb.reverse()\nfor i in b:\n    l3.append(i[0])\n    l4.append(i[1])\n \nfig = go.Figure([go.Bar(x=l3, y= l4,text = l4,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most wickets taken',xaxis=dict(title='Bowler',tickmode='linear'),yaxis=dict(title='Wickets'))\nfig.update_layout(layout)\niplot(fig)","e83004cc":"dot = df[df['total_runs'] == 0]['bowler'].value_counts()[:10]\nfig = go.Figure(data=go.Scatter(x=dot.index, y=dot.values, mode='markers+lines'))\nlayout = go.Layout(title = 'Most dot balls bowled',xaxis=dict(title='Bowlers',tickmode='linear'),yaxis=dict(title='Number of dot balls'))\nfig.update_layout(layout)\niplot(fig)","b6880829":"dist = [];inn1 = [];inn2 = []\nfor inn in [1,2]:\n    for run in [1,2,3,4,5,6]:\n        a = df[(df['inning']==inn) & (df['batsman_runs']==run)]\n        dist.append((inn,run,len(a)))\nfor i in dist[:6]:\n    inn1.append(i[2])\nfor i in dist[6:]:\n    inn2.append(i[2])    \nlabels = ['1','2','3','4', '5', '6']\n\nfig = make_subplots(\n    rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n    subplot_titles=(\"Inning 1\", \"Inning 2\"))\n\nfig.add_trace(go.Pie(labels=labels, values=inn1, scalegroup='one',name = '1st Inning'), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=inn2, scalegroup='one', name = '2nd Inning'), 1, 2)\n\nfig.update_layout(title_text='Run Distribution')\niplot(fig)","01080081":"dist = [];inn1 = [];inn2 = []\nfor inn in [1,2]:\n    for wic in ['caught', 'run out', 'bowled', 'lbw',\n       'stumped', 'caught and bowled', 'hit wicket']:\n        a = df[(df['inning']==inn) & (df['dismissal_kind']==wic)]\n        dist.append((inn,run,len(a)))\nfor i in dist[:8]:\n    inn1.append(i[2])\nfor i in dist[8:]:\n    inn2.append(i[2])    \nlabels = ['caught', 'run out', 'bowled', 'lbw',\n       'stumped', 'caught and bowled', 'hit wicket']\n\nfig = make_subplots(\n    rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n    subplot_titles=(\"Inning 1\", \"Inning 2\"))\n\nfig.add_trace(go.Pie(labels=labels, values=inn1, scalegroup='one',name = '1st Inning'), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=inn2, scalegroup='one',name = '2nd Inning'), 1, 2)\n\nfig.update_layout(title_text='Dismissal Distribution')\niplot(fig)","f8cf4ae9":"extras = df[df['extra_runs'] != 0]['extra_runs'].value_counts()\nfig = go.Figure(data=[go.Pie(labels=extras.index, values=extras.values)])\nlayout = go.Layout(title = 'Extras distribution')\nfig.update_layout(layout)\niplot(fig)","d8662544":"catch = df[df['dismissal_kind']=='caught']['fielder'].value_counts()\nfig = go.Figure([go.Bar(x=catch.index[:10], y=catch.values[:10],marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most catch taken by a fielder',xaxis=dict(title='Fielders',tickmode='linear'),yaxis=dict(title='Catches'))\nfig.update_layout(layout)\niplot(fig)","e244bf9d":"stumping = df[df['dismissal_kind']=='stumped']['fielder'].value_counts()\nfig = go.Figure([go.Bar(x=stumping.index[:10], y=stumping.values[:10],marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most stumpings by a keeper',xaxis=dict(title='Wicket Keepers',tickmode='linear'),yaxis=dict(title='Stumpings'))\nfig.update_layout(layout)\niplot(fig)","2c7966b0":"run_out = df[df['dismissal_kind']=='run out']['fielder'].value_counts()\nfig = go.Figure([go.Bar(x=run_out.index[:10], y=run_out.values[:10],marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most run outs done by a fielder',xaxis=dict(title='Fielders',tickmode='linear'),yaxis=dict(title='Run Outs'))\nfig.update_layout(layout)\niplot(fig)","539b68a2":"p_overs = [0,1,2,3,4,5];r =[];t = []\nfor team in df.batting_team.unique():\n    runs = sum(df[(df['over'].isin(p_overs)) & (df['batting_team'] == team)]['total_runs'].values)\n    r.append(runs)\n    t.append(team)\n    \nfig = go.Figure([go.Bar(x=t, y=r,text = r,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Runs scored in powerplay by teams',xaxis=dict(title='Teams',tickmode='linear'),yaxis=dict(title='Runs'))\nfig.update_layout(layout)\niplot(fig)    ","fbcc9386":"p_overs = [0,1,2,3,4,5];w =[];t = []\nfor team in df.batting_team.unique():\n    wickets =  df[(df['over'].isin(p_overs)) & (df['batting_team'] == team) & (df['is_wicket']==1)].is_wicket.count()\n    w.append(wickets)\n    t.append(team)\n    \nfig = go.Figure([go.Bar(x=t, y=w,text = w,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Wickets lost in powerplay by teams',xaxis=dict(title='Teams',tickmode='linear'),yaxis=dict(title='Wickets'))\nfig.update_layout(layout)\niplot(fig)","1b90b2b4":"p_overs = [0,1,2,3,4,5];l = [];l1 = [];l2 = []\nfor man in df.batsman.unique():\n    runs = sum(df[(df['over'].isin(p_overs)) & (df['batsman'] == man)]['batsman_runs'].values)\n    l.append((man, runs))\nl.sort(key=lambda x: x[1])\na = l[-10:]; a.reverse()\nfor i in a:\n    l1.append(i[0])\n    l2.append(i[1])    \nfig = go.Figure(data = [go.Bar(x=l1, y=l2,text = l2,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Runs scored in powerplay by batsman',xaxis=dict(title='Batsmen',tickmode='linear'),yaxis=dict(title='Runs'))\nfig.update_layout(layout)\niplot(fig)    ","c5d867c6":"p_overs = [0,1,2,3,4,5];l = [];l1 = [];l2 = [];wick_type = ['caught', 'bowled', 'lbw','stumped', 'caught and bowled', 'hit wicket']\nfor man in df.bowler.unique():\n    wickets =  df[(df['over'].isin(p_overs)) & (df['bowler'] == man) & (df['dismissal_kind'].isin(wick_type))].is_wicket.count()\n    l.append((man,wickets))\n    \nl.sort(key=lambda x: x[1])\na = l[-10:]; a.reverse()\nfor i in a:\n    l1.append(i[0])\n    l2.append(i[1])      \n    \nfig = go.Figure(data = [go.Scatter(\n    x=l1,\n    y=l2,\n    mode='markers',\n    name = 'Sixes',\n    marker=dict(size=size(10),color = '#e62b0e',line=dict(color='#000000',width=3))\n)])\nlayout = go.Layout(title = 'Wickets taken in powerplay by bowlers',xaxis=dict(title='Bowlers',tickmode='linear'),yaxis=dict(title='Wickets'))\nfig.update_layout(layout)\niplot(fig)","ffb1f012":"d_overs = [16,17,18,19];r =[];t = []\nfor team in df.batting_team.unique():\n    runs = sum(df[(df['over'].isin(d_overs)) & (df['batting_team'] == team)]['total_runs'].values)\n    r.append(runs)\n    t.append(team)\n    \nfig = go.Figure([go.Bar(x=t, y=r,text = r,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Runs scored in death overs by teams',xaxis=dict(title='Teams',tickmode='linear'),yaxis=dict(title='Runs'))\nfig.update_layout(layout)\niplot(fig)    ","b120cb49":"d_overs = [16,17,18,19];w =[];t = []\nfor team in df.batting_team.unique():\n    wickets =  df[(df['over'].isin(d_overs)) & (df['batting_team'] == team) & (df['is_wicket']==1)].is_wicket.count()\n    w.append(wickets)\n    t.append(team)\n    \nfig = go.Figure([go.Bar(x=t, y=w,text = w,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Wickets lost in death overs by teams',xaxis=dict(title='Teams',tickmode='linear'),yaxis=dict(title='Wickets'))\nfig.update_layout(layout)\niplot(fig)","eaf93e54":"d_overs = [16,17,18,19];l = [];l1 = [];l2 = []\nfor man in df.batsman.unique():\n    runs = sum(df[(df['over'].isin(d_overs)) & (df['batsman'] == man)]['batsman_runs'].values)\n    l.append((man, runs))\nl.sort(key=lambda x: x[1])\na = l[-10:]; a.reverse()\nfor i in a:\n    l1.append(i[0])\n    l2.append(i[1])    \nfig1 = go.Figure([go.Bar(x=l1, y=l2,marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Runs scored in death overs by batsman',xaxis=dict(title='Batsmen',tickmode='linear'),yaxis=dict(title='Runs'))\nfig1.update_layout(layout)\niplot(fig1)    ","97327c52":"d_overs = [16,17,18,19];l = [];l1 = [];l2 = [];wick_type = ['caught', 'bowled', 'lbw','stumped', 'caught and bowled', 'hit wicket']\nfor man in df.bowler.unique():\n    wickets =  df[(df['over'].isin(d_overs)) & (df['bowler'] == man) & (df['dismissal_kind'].isin(wick_type))].is_wicket.count()\n    l.append((man,wickets))\n    \nl.sort(key=lambda x: x[1])\na = l[-10:]; a.reverse()\nfor i in a:\n    l1.append(i[0])\n    l2.append(i[1])      \n    \nfig = go.Figure(data = [go.Scatter(\n    x=l1,\n    y=l2,\n    mode='markers',\n    name = 'Sixes',\n    marker=dict(size=size(10),color = '#3db02e',line=dict(color='#000000',width=3))\n)])\nlayout = go.Layout(title = 'Wickets taken in death overs by bowlers',xaxis=dict(title='Bowlers',tickmode='linear'),yaxis=dict(title='Wickets'))\nfig.update_layout(layout)\niplot(fig)","14d7e449":"geolocator = Nominatim(user_agent=\"Yash\")\nloc = []\ndef getCord(city_name):\n    location = geolocator.geocode(city_name)\n    loc.append((city_name,location.latitude,location.longitude))\nfor i in city:\n    getCord(i)\nloc","5d839daf":"fig = plt.figure(figsize=(20, 11))\nm = Basemap(projection='cyl', resolution=None,\n            llcrnrlat=4, urcrnrlat=37,\n            llcrnrlon=65, urcrnrlon=97, )\n\nm.bluemarble(alpha = 0.8)\n\nfor c in loc:\n    if c[0] in IND: \n        x,y = m(c[2],c[1])\n        plt.plot(x, y, 'o', markersize=13)\n        plt.text(x, y, c[0], fontsize=11,horizontalalignment='center',verticalalignment='top')","f1df3d3b":"data = [go.Histogram(x = df1[df1['city'].isin(IND)].city,marker=dict(color='#348feb', line=dict(color='#000000', width=2)))]\nlayout = go.Layout(title = 'Mumbai hosted the most matches followed by Bengaluru',xaxis=dict(title='Indian Cities',tickmode='linear'),yaxis=dict(title='Count'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7a118cc8":"fig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='cyl', resolution=None,\n            llcrnrlat=9, urcrnrlat=30,\n            llcrnrlon=42, urcrnrlon=62, )\n\nm.bluemarble(alpha = 0.8)\n\nfor c in loc:\n    if c[0] in UAE:\n        x,y = m(c[2],c[1])\n        plt.plot(x, y, 'o', markersize=13)\n        plt.text(x, y, c[0], fontsize=11,horizontalalignment='center',verticalalignment='top')","7d813c2e":"data = [go.Histogram(x = df1[df1['city'].isin(UAE)].city,marker=dict(color='#348feb', line=dict(color='#000000', width=2)))]\nlayout = go.Layout(title = 'Abu Dhabi hosted the most matches followed by Dubai',xaxis=dict(title='UAE Cities',tickmode='linear'),yaxis=dict(title='Count'))\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3d9247ef":"moms = df1['player_of_match'].value_counts()\nfig = go.Figure([go.Bar(x=moms.index[:10], y= moms.values[:10],text = moms.values[:10],textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Most man of the match awards won ',xaxis=dict(title='Player',tickmode='linear'),yaxis=dict(title='Number of Awards'))\nfig.update_layout(layout)\niplot(fig)","3941713a":"fig = px.violin(df1, y=df1[(df1['result'] == 'wickets')].result_margin, color = df1[(df1['result'] == 'wickets')].result,box=True,points='all')\nlayout = go.Layout(title = 'Wicket margin',yaxis=dict(title='Number of wickets'))\nfig.update_layout(layout)\nfig.show()","500531f8":"fig = px.violin(df1, y=df1[(df1['result'] == 'runs')].result_margin, color = df1[(df1['result'] == 'runs')].result,box=True,points='all')\nlayout = go.Layout(title = 'Run margin',yaxis=dict(title='Runs'))\nfig.update_layout(layout)\nfig.show()","14b929d9":"match = df1[\"team1\"].value_counts() + df1[\"team2\"].value_counts()\nwinner = df1[\"winner\"].value_counts()\nteams = match.index; per = []\nfor i in teams:\n    per.append(round((winner[i]\/match[i])*100,2))\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['Team', 'Win-Match %'],\n                align='left'),\n    cells=dict(values=[teams,per],\n               align='left'))\n])\nlayout = go.Layout(title = 'Win-Match %')\nfig.update_layout(layout)\nfig.update_layout(width=600, height=450)\nfig.show()","0315e97b":"toss = df1['toss_winner'].value_counts()\nfig = go.Figure([go.Bar(x=toss.index, y= toss.values,text = toss.values,textposition='outside',marker=dict(color=random_colors(10), line=dict(color='#000000', width=2)))])\nlayout = go.Layout(title = 'Number of Toss won by teams',xaxis=dict(title='Teams',tickmode='linear'),yaxis=dict(title='Number of Toss Won'))\nfig.update_layout(layout)\niplot(fig)","58565684":"team = []; bat = []; field = []\nfor t in df1.toss_winner.unique():\n    team.append(t)\n    bat.append(df1[(df1['toss_decision'] == 'bat') & (df1['toss_winner'] == t)].toss_decision.count())\n    field.append(df1[(df1['toss_decision'] == 'field') & (df1['toss_winner'] == t)].toss_decision.count())\n\nfig = go.Figure(data=[\ngo.Bar(name='Bat', x=team, y=bat),\ngo.Bar(name='Field', x=team, y=field)])\nfig.update_layout(barmode='stack')\nfig.show()","6997ace5":"stad = df1['venue'].value_counts()[:12]\nstadium = []; bat = []; field = []\nfor t in stad.index:\n    stadium.append(t)\n    bat.append(df1[(df1['toss_decision'] == 'bat') & (df1['venue'] == t)].toss_decision.count())\n    field.append(df1[(df1['toss_decision'] == 'field') & (df1['venue'] == t)].toss_decision.count())\n\nfig = go.Figure(data=[\ngo.Bar(name='Bat', x=stadium, y=bat),\ngo.Bar(name='Field', x=stadium, y=field)])\nfig.update_layout(barmode='stack')\nfig.show()","fb902acd":"a = np.equal(df1['toss_winner'],df1['winner']).value_counts()\nfig = go.Figure(data=[go.Pie(labels=a.index, values=a.values, hole=.3)])\nlayout = go.Layout(title = 'Does toss win help you win the match')\nfig.update_layout(layout)\nfig.update_traces(textinfo='label + value',marker=dict(colors=random_colors(2), line=dict(color='#000000', width=2)))\niplot(fig)","967ef27e":"season=df2.groupby(['season','inning'])['total_runs'].sum().reset_index()\nnum_matches = df1['date'].str[:4].astype(int).value_counts(sort = False)\n\navg_1 = (season[season['inning']==1].total_runs)\/num_matches.values\navg_2 = (season[season['inning']==2].total_runs)\/num_matches.values\n\nfig = {\"data\" : [{\"x\" : num_matches.index,\"y\" : avg_1,\n                  \"name\" : \"1st Innings Average Runs\" ,\"marker\" : {\"color\" : \"cyan\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" },\n        \n                 {\"x\" : num_matches.index,\"y\" : avg_2,\n                  \"name\" : \"2nd Innings Average Runs\",\"marker\" : {\"color\" : \"red\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Average runs per innings\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"2nd Innings\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Year\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"1st Innings\"}}}\n\niplot(fig)","56bfbd42":"df3 = df.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \ninn1 = df3[(df3['total_runs']>=200) & (df3['inning'] == 1 )].batting_team.value_counts()\ninn2 = df3[(df3['total_runs']>=200) & (df3['inning'] == 2 )].batting_team.value_counts()\n\nfig = make_subplots(\n    rows=2, cols=1, specs=[[{'type':'domain'}], [{'type':'domain'}]],\n    subplot_titles=(\"Inning 1\", \"Inning 2\"))\n\nfig.add_trace(go.Pie(labels=inn1.index, values=inn1.values, scalegroup='one',name = '1st Inning'), 1, 1)\nfig.add_trace(go.Pie(labels=inn2.index, values=inn2.values, scalegroup='one', name = '2nd Inning'), 2, 1)\n\nfig.update_layout(title_text='200+ scores by teams')\nfig.update_traces(textinfo='label + value',marker=dict(colors=random_colors(9), line=dict(color='#000000', width=2)))\niplot(fig)","fc5a0613":"inn1 = df3[(df3['total_runs']>=200) & (df3['inning'] == 1 )]\ninn2 = df3[df3['inning'] == 2]\ninn = inn1[['id','inning','total_runs']].merge(inn2[['id', 'inning', 'total_runs']],on = 'id')\ninn['win'] = np.where(inn['total_runs_x']<=inn['total_runs_y'], 'Yes', 'No')\na = inn['win'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=a.index, values=a.values, hole=.3)])\nlayout = go.Layout(title = 'How often does a team chase 200+ score')\nfig.update_layout(layout)\nfig.update_traces(textinfo='label + value',marker=dict(colors=random_colors(2), line=dict(color='#000000', width=2)))\niplot(fig)","46ec61f7":"#Source https:\/\/www.kaggle.com\/dude431\/ipl-detailed-analysis#notebook-container\n\nrun_4 = df2.groupby(['season'])['batsman_runs'].agg(lambda x: (x==4).sum()*4).reset_index()\nrun_6 = df2.groupby(['season'])['batsman_runs'].agg(lambda x: (x==6).sum()*6).reset_index()\nrun_total = df2.groupby(['season'])['total_runs'].sum().reset_index()\n\nfig = go.Figure(data=[\ngo.Bar(name='Runs by 6', x=run_6['season'], y=run_6['batsman_runs']),\ngo.Bar(name='Runs by 4', x=run_4['season'], y=run_4['batsman_runs']),\ngo.Bar(name='Remaining Runs', x=run_total['season'], y=run_total['total_runs']-(run_6['batsman_runs']+run_4['batsman_runs']))])\nfig.update_layout(barmode='stack')\nfig.show()","96c0ecf9":"#Source https:\/\/www.kaggle.com\/dude431\/ipl-detailed-analysis#notebook-container\n\nruns_per_over = df.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=np.sum)\nruns_per_over.reset_index(inplace=True)\nnumber_of_over = df.pivot_table(index=['over'],columns='batting_team',aggfunc='size')\nnumber_of_over.reset_index(inplace=True)\n\nruns_per_over.drop(['Kochi Tuskers Kerala','Rising Pune Supergiants','Gujarat Lions'],axis=1,inplace=True)\nnumber_of_over.drop(['Kochi Tuskers Kerala','Rising Pune Supergiants','Gujarat Lions'],axis=1,inplace=True)\n\na = df.batting_team.unique().tolist();a.remove('Kochi Tuskers Kerala');a.remove('Rising Pune Supergiants');a.remove('Gujarat Lions')\n\nfig = go.Figure()\nfor i in a:\n    fig.add_trace(go.Scatter(x=runs_per_over['over'],y = (runs_per_over[i]\/number_of_over[i])*6,name=i))\niplot(fig)","c461e9e1":"## Batsman stats - Faced most balls, Scored most runs and Hit most boundaries<a id=\"1\"><\/a>\n","fb103c50":"## Most MOMs <a id=\"8\"><\/a>","867e41b2":"### Distribution of Wickets in both innings<a id=\"3b\"><\/a>","cb6217d0":"### UAE<a id=\"7b\"><\/a>","24647c11":"### Batsman with most runs<a id=\"1b\"><\/a>","bec051be":"### Powerplay performance by players<a id=\"5b\"><\/a>","42f51b00":"## Distribution of - Runs, Wickets and Extras<a id=\"3\"><\/a>","a942bbe2":"### Outcome of 200+ score matches<a id=\"12b\"><\/a>","52a451a2":"Preprocessing","ec1c84a9":"### Bowler who bowled most dot balls<a id=\"2c\"><\/a>","140cc33a":"## Powerplay performance by teams and players<a id=\"5\"><\/a>","8f3d268b":"### What do teams choose after winning the toss<a id=\"10b\"><\/a>","f5318f88":"<h1 style=\"color:blue;\"><center>UPVOTE<\/center><\/h1>","7bf5a2a0":"### Bowler who bowled most balls<a id=\"2a\"><\/a>","54d5ac3e":"### Most Toss Wins<a id=\"10a\"><\/a>","b78cd920":"### Impact of stadium on toss decision<a id=\"10c\"><\/a>","5a9bd5da":"## Table of content\n\n1. [Batsman stats](#1)\n    * [Most balls faced](#1a)\n    * [Scored most runs](#1b)\n    * [Hit most boundaries](#1c)\n    * [Highest strike rate and average](#1d)\n2. [Bowler stats](#2)\n    * [Bowled most balls](#2a)\n    * [Took most wickets](#2b)\n    * [Bowled most dot balls](#2c)\n3. [Distribution](#3) \n    * [Runs in both innings](#3a)\n    * [Wickets in both innings](#3b)\n    * [Extras](#3c)\n4. [Top fielders](#4)\n5. [Powerplay performace](#5)\n    * [Teams](#5a)\n    * [Players](#5b)\n6. [Death overs performace](#6)\n    * [Teams](#6a)\n    * [Players](#6b)\n7. [Stadium](#7)\n    * [India](#7a)\n    * [UAE](#7b)\n8. [Most MOMs](#8)\n9. [Win Margin and Match-Win %](#9)\n10. [Toss](#10)\n    * [Team to win most toss](#10a)\n    * [What do teams choose after winning the toss?](#10b)\n    * [How grounds affect toss decisions](#10c)\n    * [Does winning the toss, help you win the game?](#10d)\n11. [Average Runs scored in both innings in all seasons](#11)  \n12. [200+ in the 1st Innings](#12)\n    * [How many times have teams scored 200+](#12a)\n    * [Outcome of those matches](#12b)\n13. [Distribution of runs in all seasons](#13)     \n14. [Average runs given in all overs by teams](#14)     ","ffad69eb":"## Toss<a id=\"10\"><\/a>","ca4fd3b3":"### 200+ runs game in 1st and 2nd innings<a id=\"12a\"><\/a>","aeec4afd":"### Distribution of Runs in both innings<a id=\"3a\"><\/a>","d4d08c5a":"### INDIA<a id=\"7a\"><\/a>","b9a7c9ff":"### Bowlers with most wickets<a id=\"2b\"><\/a>","5b4a67b5":"### Batsman who hit most boundaries<a id=\"1c\"><\/a>","59a7b064":"## Death overs performance by teams and players<a id=\"6\"><\/a>","da58e700":"## Average runs given in each over<a id=\"14\"><\/a>","e09a8b44":"### Distribution of Extras<a id=\"3c\"><\/a>","d81cf7cf":"### Impact of toss win on match win<a id=\"10d\"><\/a>","bf2b470f":"### Powerplay performance by teams<a id=\"5a\"><\/a>","fe9a74f3":"### Death overs performance by players<a id=\"6b\"><\/a>","961712e7":"## 200+ runs games<a id=\"12\"><\/a>","e0a200b3":"### Death overs performance by teams<a id=\"6a\"><\/a>","cd976fc4":"## Average Runs scored in both innings in all seasons<a id=\"11\"><\/a>","6f739a1d":"## Bowler stats - Bowled most balls, Took most wickets and Bowled most dot balls<a id=\"2\"><\/a>","223c74a1":"## Stadiums<a id=\"7\"><\/a>","d85c81b5":"### Batsman who have highest strike rate and average(30+ matches)<a id=\"1d\"><\/a>","79705931":"## Win Margin and Match-Win %<a id = '9'><\/a>","028b56d0":"## Distribution of runs in all seasons<a id=\"13\"><\/a>","a56300c2":"### Batsman who faced most balls<a id=\"1a\"><\/a>","bb194f0c":"## Fielder who caused most dismissals(Catches, Stumpings and Run Outs)<a id=\"4\"><\/a>","7e0052a8":"### Stadium location"}}