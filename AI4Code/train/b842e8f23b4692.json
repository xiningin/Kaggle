{"cell_type":{"72d9e02a":"code","d86e9460":"code","45e4379d":"code","39fa7d39":"code","ec7b7c77":"code","2f760c37":"code","cd58d01c":"code","23a23117":"code","f211b50a":"code","eb02651a":"code","a3e05699":"code","bc3051dc":"code","5e84789d":"code","7c5f8614":"code","5ccd01ba":"code","f2527648":"code","52f590e6":"code","15776278":"code","925415cf":"code","cac081ad":"code","5f7a9ad9":"code","e4da2637":"code","929039a4":"code","3ce09fe3":"code","faba23f8":"code","0ae9d4dd":"code","a3300490":"code","15105518":"code","b1322b0a":"code","efe44fa3":"code","773f6512":"code","da8856c3":"code","f1e7d265":"code","e605dd1a":"markdown","59da386a":"markdown","2dd8dbe4":"markdown","3ec5f5b4":"markdown","2c6aa136":"markdown","aa8a8ce9":"markdown","05bc78c0":"markdown","e13df0b7":"markdown"},"source":{"72d9e02a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d86e9460":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest =  pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission =  pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","45e4379d":"train.head()","39fa7d39":"test.head()","ec7b7c77":"submission.head()","2f760c37":"plt.figure(figsize=(12,10))\nsns.set_style(\"darkgrid\")\nsns.histplot(data=train, x=\"SalePrice\", bins=50,cbar=True)","cd58d01c":"# Skew and kurtosis for SalePrice \nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","23a23117":"#Applying log transformation to remove skewness and make target variable normally distributed\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n\nplt.figure(figsize=(12,10))\nsns.set_style(\"darkgrid\")\nsns.histplot(data=train, x=\"SalePrice\", bins=50,cbar=True,color=\"red\")","f211b50a":"sns.scatterplot(x='GrLivArea',y='SalePrice',data=train)","eb02651a":"train=train.drop(train.loc[(train['GrLivArea']>4000) & (train['SalePrice']<200000)].index,0)\ntrain.reset_index(drop=True, inplace=True)","a3e05699":"sns.scatterplot(x='GrLivArea',y='SalePrice',data=train)","bc3051dc":"#Here we list the correlation between the target and other features from the highest to the negative ones\ncorr=train.drop('Id',1).corr().sort_values(by='SalePrice',ascending=False).round(2)\nprint(corr['SalePrice'])","5e84789d":"import numpy as np\ncols =corr['SalePrice'].head(10).index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1)\nhm = sns.heatmap(cm, annot=True, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","7c5f8614":"sns.pairplot(train[corr['SalePrice'].head(10).index])","5ccd01ba":"trainrow=train.shape[0]\ntestrow=test.shape[0]","f2527648":"y = train['SalePrice'].copy()\ntestids = test['Id'].copy()\ndata = pd.concat((train,test)).reset_index(drop=True)\ndata = data.drop('SalePrice',1)\ndata = data.drop('Id',axis=1)\n","52f590e6":"missing=data.isnull().sum().sort_values(ascending=False)\nmissing=missing.drop(missing[missing==0].index)\nmissing","15776278":"# PoolQC\ndata['PoolQC']=data['PoolQC'].fillna('NA')\nprint(data['PoolQC'].unique())\n\n# MiscFeature\ndata['MiscFeature']=data['MiscFeature'].fillna('NA')\nprint(data['MiscFeature'].unique())\n\n# Alley\ndata['Alley']=data['Alley'].fillna('NA')\nprint(data['Alley'].unique())\n\n# Fence\ndata['Fence']=data['Fence'].fillna('NA')\nprint(data['Fence'].unique())\n\n# FireplaceQu\ndata['FireplaceQu']=data['FireplaceQu'].fillna('NA')\nprint(data['FireplaceQu'].unique())\n\n# GarageCond\ndata['GarageCond']=data['GarageCond'].fillna('NA')\nprint(data['GarageCond'].unique())\n\n# GarageQual\ndata['GarageQual']=data['GarageQual'].fillna('NA')\nprint(data['GarageQual'].unique())\n\n# GarageFinish\ndata['GarageFinish']=data['GarageFinish'].fillna('NA')\nprint(data['GarageFinish'].unique())","925415cf":"data['BsmtExposure']=data['BsmtExposure'].fillna('NA')\ndata['BsmtCond']=data['BsmtCond'].fillna('NA')\ndata['BsmtQual']=data['BsmtQual'].fillna('NA')\ndata['BsmtFinType2']=data['BsmtFinType2'].fillna('NA')\ndata['BsmtFinType1']=data['BsmtFinType1'].fillna('NA')\ndata['MasVnrType']=data['MasVnrType'].fillna('NA')\ndata['Exterior2nd']=data['Exterior2nd'].fillna('NA')\ndata['Exterior1st']=data['Exterior1st'].fillna('NA')","cac081ad":"data['GarageYrBlt']=data['GarageYrBlt'].fillna(0)\ndata['GarageType']=data['GarageType'].fillna(0)\ndata['GarageArea']=data['GarageArea'].fillna(0)\ndata['GarageCars']=data['GarageCars'].fillna(0)\ndata['BsmtFinSF1']=data['BsmtFinSF1'].fillna(0)\ndata['BsmtFinSF2']=data['BsmtFinSF2'].fillna(0)\ndata['MasVnrArea']=data['MasVnrArea'].fillna(0)\ndata['BsmtFullBath']=data['BsmtFullBath'].fillna(0)\ndata['BsmtHalfBath']=data['BsmtHalfBath'].fillna(0)\ndata['BsmtUnfSF']=data['BsmtUnfSF'].fillna(0)\ndata['TotalBsmtSF']=data['TotalBsmtSF'].fillna(0)","5f7a9ad9":"# LotFrontage\ndata['LotFrontage']=data['LotFrontage'].fillna(data['LotFrontage'].dropna().mean())","e4da2637":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].dropna().index[0])\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].dropna().index[0])\ndata['Functional']=data['Functional'].fillna(data['Functional'].dropna().index[0])\ndata['Electrical']=data['Electrical'].fillna(data['Electrical'].dropna().index[0])\ndata['KitchenQual']=data['KitchenQual'].fillna(data['KitchenQual'].dropna().index[0])\ndata['SaleType']=data['SaleType'].fillna(data['SaleType'].dropna().index[0])","929039a4":"missing=data.isnull().sum().sort_values(ascending=False)\nmissing=missing.drop(missing[missing==0].index)\nmissing","3ce09fe3":"data['GrLivArea_2']=data['GrLivArea']**2\ndata['GrLivArea_3']=data['GrLivArea']**3\ndata['GrLivArea_4']=data['GrLivArea']**4\n\ndata['TotalBsmtSF_2']=data['TotalBsmtSF']**2\ndata['TotalBsmtSF_3']=data['TotalBsmtSF']**3\ndata['TotalBsmtSF_4']=data['TotalBsmtSF']**4\n\ndata['GarageCars_2']=data['GarageCars']**2\ndata['GarageCars_3']=data['GarageCars']**3\ndata['GarageCars_4']=data['GarageCars']**4\n\ndata['1stFlrSF_2']=data['1stFlrSF']**2\ndata['1stFlrSF_3']=data['1stFlrSF']**3\ndata['1stFlrSF_4']=data['1stFlrSF']**4\n\ndata['GarageArea_2']=data['GarageArea']**2\ndata['GarageArea_3']=data['GarageArea']**3\ndata['GarageArea_4']=data['GarageArea']**4","faba23f8":"data['Floorfeet']=data['1stFlrSF']+data['2ndFlrSF']\ndata=data.drop(['1stFlrSF','2ndFlrSF'],1)","0ae9d4dd":"data = pd.get_dummies(data)","a3300490":"X = data[:len(train)] #converted into train data\ntest = data[len(train):] #test data\nprint('Train Data Shape:',X.shape) #train set shape\nprint('Test Data Shape:',test.shape)#test set shape\nprint(y.shape)","15105518":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n","b1322b0a":"from sklearn.linear_model import LinearRegression\nreg_liner=LinearRegression()\nreg_liner.fit(X_train,y_train)\nprint(reg_liner.score(X_train,y_train))\npredictions1 = reg_liner.predict(X_test)\nprint(predictions1)","efe44fa3":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nprint(mean_absolute_error(y_test,predictions1))\nprint(mean_squared_error(y_test,predictions1))\nprint(np.sqrt(mean_squared_error(y_test,predictions1)))\n","773f6512":"plt.figure(figsize=(12,10))\nsns.regplot(predictions1,y_test)","da8856c3":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_train, y_train)], \n             verbose=False)\nprint(my_model.score(X_train,y_train))","f1e7d265":"predictions =  reg_liner.predict(test)\nmy_submission = pd.DataFrame({\"Id\": testids,\"SalePrice\": np.expm1(predictions) })\nmy_submission.to_csv('final_submission.csv', index=False , header = True)\nmy_submission.head()","e605dd1a":"It seem the overall quality has the highest positive correlation with the target","59da386a":"**MISSING DATA**","2dd8dbe4":"Now it is normally distributed","3ec5f5b4":"The SalePrice is right skewed and is not normally distributed , therefore we need to adjust it","2c6aa136":"**XG BOOST**","aa8a8ce9":"TRAINING AND TESTING MACHINE LEARNING MODELS","05bc78c0":"Saleprice column is our target","e13df0b7":"**FEATURE ENGINEERING**"}}