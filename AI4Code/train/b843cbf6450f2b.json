{"cell_type":{"f12e19f8":"code","4d0d1d83":"code","b361bf07":"code","af61030a":"code","197d78a1":"code","ea76a733":"code","9d59d755":"code","c98e6359":"code","eadb9993":"code","e659ecba":"code","e51cb539":"code","e9f74cde":"code","0182589e":"code","60893d15":"code","60b31a01":"code","c12433fb":"code","17744a49":"code","d428a98c":"code","2e0ef49d":"code","aed4b889":"code","1424287f":"code","db72dadd":"code","20973310":"code","caf80db0":"code","263f8535":"code","91167c62":"code","ea44e153":"code","d9c61b31":"code","d21294e4":"code","086e5c3e":"code","96c3f051":"code","1dc370e8":"code","3d114319":"code","190219a9":"markdown","16dd7ac1":"markdown","e64197c8":"markdown","45f82d8a":"markdown","0d04e69c":"markdown","ca2cd16b":"markdown","3a121f4b":"markdown","01db9339":"markdown","641ecb85":"markdown","6df284e0":"markdown","c664fac8":"markdown"},"source":{"f12e19f8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nimport seaborn  as sb","4d0d1d83":"%matplotlib inline\nrcParams['figure.figsize']=10,6\nplt.style.use('seaborn-whitegrid')","b361bf07":"data = pd.read_csv('..\/input\/BlackFriday.csv')\ndata.head() #overview of our dataset\n","af61030a":"data.info()","197d78a1":"data_gender_purchase =data[['User_ID','Gender','Purchase']]\ndata_gender_purchase=data_gender_purchase.groupby(['User_ID','Gender']).sum()\ndata_gender_purchase.reset_index(inplace=True)\ndata_gender_purchase.head()","ea76a733":"sb.countplot(data_gender_purchase[\"Gender\"])","9d59d755":"print (data_gender_purchase.groupby('Gender')['Purchase'].sum())\nprint (data_gender_purchase.groupby('Gender')['Purchase'].mean())","c98e6359":"plt.subplot(1,2,1)\nplt.pie(data_gender_purchase.groupby('Gender')['Purchase'].sum())\nplt.legend(['Female','Male'],loc='best')\nplt.title('Total Purchase Ammount')\n\nplt.subplot(1,2,2)\nplt.pie(data_gender_purchase.groupby('Gender')['Purchase'].mean())\nplt.legend(['Female','Male'],loc='best')\nplt.title('Average Purchase Ammount')","eadb9993":"data_City_Category_purchase =data[['User_ID','City_Category','Purchase']]\ndata_City_Category_purchase=data_City_Category_purchase.groupby(['User_ID','City_Category']).sum()\ndata_City_Category_purchase.reset_index(inplace=True)\ndata_City_Category_purchase.head()","e659ecba":"sb.countplot(data_City_Category_purchase[\"City_Category\"])","e51cb539":"print (data_City_Category_purchase.groupby('City_Category')['Purchase'].sum())\nprint (data_City_Category_purchase.groupby('City_Category')['Purchase'].mean())","e9f74cde":"plt.subplot(1,2,1)\nplt.pie(data_City_Category_purchase.groupby('City_Category')['Purchase'].sum())\nplt.legend(['A','B','C'],loc='best')\nplt.title('Total Purchase Ammount')\n\nplt.subplot(1,2,2)\nplt.pie(data_City_Category_purchase.groupby('City_Category')['Purchase'].mean())\nplt.legend(['A','B','C'],loc='best')\nplt.title('Average Purchase Ammount')","0182589e":"data_City_Years_purchase =data[['User_ID','Stay_In_Current_City_Years','Purchase']]\ndata_City_Years_purchase=data_City_Years_purchase.groupby(['User_ID','Stay_In_Current_City_Years']).sum()\ndata_City_Years_purchase.reset_index(inplace=True)\ndata_City_Years_purchase.head()","60893d15":"sb.countplot(data_City_Years_purchase[\"Stay_In_Current_City_Years\"])","60b31a01":"plt.subplot(1,2,1)\nplt.pie(data_City_Category_purchase.groupby('City_Category')['Purchase'].sum())\nplt.legend(['A','B','C'],loc='best')\nplt.title('Total Purchase Ammount')\n\nplt.subplot(1,2,2)\nplt.pie(data_City_Category_purchase.groupby('City_Category')['Purchase'].mean())\nplt.legend(['A','B','C'],loc='best')\nplt.title('Average Purchase Ammount')","c12433fb":"# converting product id in to int\ndata['Product_ID']=data['Product_ID'].apply(lambda x:x[1:-2])\ndata['Product_ID']=(data['Product_ID']).astype(int)\ndata.head()","17744a49":"data_Product_ID_purchase =data[['Product_ID','Purchase']]\ndata_Product_ID_purchase=data_Product_ID_purchase.groupby(['Product_ID']).mean()\ndata_Product_ID_purchase.reset_index(inplace=True)\ndata_Product_ID_purchase.head(10)","d428a98c":"plt.bar(x='Product_ID',height='Purchase',data=data_Product_ID_purchase)\nplt.title('Mean Purchase for every product ID')","2e0ef49d":"data.isnull().sum()","aed4b889":"# First handling Categorical variables\ndata = pd.get_dummies(data, columns = ['Gender','Age','City_Category','Stay_In_Current_City_Years'],drop_first = True)\ndata.drop(['User_ID'],axis=1,inplace=True)","1424287f":"data.head()","db72dadd":"plt.subplot(1,2,1)\nplt.boxplot(data[data['Product_Category_2'].isnull()==False]['Product_Category_2'],showmeans=True)\nplt.title('Before Filling missing values')\n\nplt.subplot(1,2,2)\ndata['Product_Category_2']=data['Product_Category_2'].fillna(data['Product_Category_2'].median())\nplt.boxplot(data['Product_Category_2'],showmeans=True)\nplt.title('After Filling missing values')","20973310":"sb.distplot(data[data['Product_Category_3'].isnull()==False]['Product_Category_3'])\nplt.show()","caf80db0":"plt.subplot(1,2,1)\nplt.boxplot(data[data['Product_Category_3'].isnull()==False]['Product_Category_3'],showmeans=True)\nplt.title('Before Filling missing values')\n\nplt.subplot(1,2,2)\ndata['Product_Category_3']=data['Product_Category_3'].fillna(method='bfill')\ndata['Product_Category_3']=data['Product_Category_3'].fillna(method='ffill')\ndata.boxplot(column='Product_Category_3',showmeans=True)\nplt.title('After Filling missing values')","263f8535":"data.isnull().sum()","91167c62":"sb.distplot(data['Purchase'])\nplt.show()","ea44e153":"sb.distplot(data['Occupation'])\nplt.show()","d9c61b31":"#Using Random Forest Algo \nimport sklearn\nfrom sklearn.model_selection import  train_test_split \nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.metrics import mean_squared_error","d21294e4":"Y=data['Purchase']\nX=data.drop(columns=['Purchase'])\n# split the train and test dataset where test set is 30% of dataset\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size=0.3)","086e5c3e":"model= RandomForestRegressor(max_depth=15) \nmodel=model.fit(xtrain,ytrain) ","96c3f051":"model.score(xtest,ytest)","1dc370e8":"ypred=model.predict(xtest)","3d114319":"rmse = np.sqrt(mean_squared_error(ytest, ypred))\nrmse","190219a9":"# Applying Model","16dd7ac1":"# Treating Missing values","e64197c8":"## Stay_In_Current_City_Years","45f82d8a":"### For Product_Category_3","0d04e69c":"### For Product_Category_2","ca2cd16b":"## City_Category","3a121f4b":"# Checking data Distribution","01db9339":"# Exploratory Data Analysis ****","641ecb85":"## Gender","6df284e0":"## Product_ID","c664fac8":"## Filling missing values"}}