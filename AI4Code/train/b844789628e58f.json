{"cell_type":{"efaf43f6":"code","8fb6d56a":"code","ec64850d":"code","954c46e1":"code","1c992aef":"code","bc2e3204":"code","96e2f81c":"code","61c45324":"code","edd459e0":"code","9382c43b":"code","891eafec":"code","c2e65873":"code","352c58ce":"code","21503b8e":"code","e1341e84":"code","88c5dd4e":"code","7f385a1e":"code","a7c2c50b":"code","80804b8e":"code","80beb794":"code","b76b958b":"code","4909ed28":"code","2ee02bd4":"code","df661bd5":"markdown","96a7739d":"markdown","6cf94777":"markdown","2182c9f0":"markdown","772278bf":"markdown","2a2d84ef":"markdown","14e60a12":"markdown","865c55be":"markdown"},"source":{"efaf43f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8fb6d56a":"dataframe=pd.read_csv(\"..\/input\/air_quality_Nov2017.csv\")","ec64850d":"dataframe.head() #head shows first 5 rows\n# this is first look ","954c46e1":"dataframe.tail()\n#tail gives last 5 rows","1c992aef":"dataframe.columns\n#columns gives columns name of the features","bc2e3204":"dataframe.shape\n#gives the shape of the dataset in a tuble (row,columns)","96e2f81c":"dataframe.info()\n#info give fatures names in columns and what type of value in it. Like int,obj,float\n# with the quantites of values,we decide are there any NaN values or not.","61c45324":"print(dataframe['PM10 Value'].value_counts(dropna=False))","edd459e0":"dataframe.describe()","9382c43b":"dataframe.boxplot(column='PM10 Value',by='Longitude')\nplt.show()\n\n# in this box plot, at the 2.1239 longitude has a few higher outliers..\n","891eafec":" #new data for example from origin our data\n    \ndataframe_new=dataframe.head()\ndataframe_new","c2e65873":"melted=pd.melt(frame=dataframe_new,id_vars='Station',value_vars=['Longitude','Latitude'])\n#frame=dataframe_new melt edece\u011fimiz datay\u0131 frame e e\u015fitliyoruz\n#id_vars= de\u011fi\u015fmeden kalmas\u0131n\u0131 istedi\u011fimiz feature u se\u00e7iyoruz\n#value_vars='Longitude','Latitude' yeni valuelar olarak olu\u015fturulmas\u0131n\u0131 istedi\u011fimiz feature lar\n#yeni tablodaki columns name variable ve value default olarak geliyor ileride de\u011fi\u015ftirilebilir\nmelted","352c58ce":"#PIVOT\u0130NG DATA\n#REVERSE OF MELT\u0130NG\nmelted.pivot(index='Station',columns ='variable',values= 'value')","21503b8e":"#row concatenating \ndataframe1=dataframe.head() #dataframe1 created from dataframe's head \ndataframe2=dataframe.tail() #dataframe1 created from dataframe's tail \nconcat_data_row=pd.concat([dataframe1,dataframe2],axis=0,ignore_index=True) #pd.concat is the cncatenating method. axis=0 means row concatenating \nconcat_data_row   #ignore_index=True new index after the concatenating","e1341e84":"#columns concatenating \ndataframe1=dataframe['Longitude'].head() #dataframe1 created from dataframe['Longitude']'s  head \ndataframe2=dataframe['Latitude'].head() #dataframe1 created from dataframe['Latitude']'s head \nconcat_data_columns=pd.concat([dataframe1,dataframe2],axis=1)  # axis=1 means concatenate columns side by side\nconcat_data_columns","88c5dd4e":"dataframe.dtypes","7f385a1e":"#some data types are convertable for example:\n\ndataframe[\"Station\"]=dataframe[\"Station\"].astype(\"category\")\ndataframe.dtypes","a7c2c50b":"dataframe.info()","80804b8e":"dataframe[\"O3 Quality\"].value_counts(dropna=False)\n# 1476 NaN value and 167 -- value in this column.","80beb794":"#droping Nan Values\ndataframe3=dataframe\ndataframe3[\"O3 Quality\"].dropna(inplace=True)\ndataframe3[\"O3 Quality\"].value_counts(dropna=False)\n","b76b958b":"assert dataframe3[\"O3 Quality\"].notnull().all()\n# assert statment  check rest of the code is true or not, when is true return nothing but when its wrong traceback errors come.\n#like assert 1==2 check this statment","4909ed28":"dataframe4=dataframe\ndataframe4[\"O3 Quality\"].fillna('empty',inplace=True)\nassert dataframe4[\"O3 Quality\"].notnull().all()\ndataframe4[\"O3 Quality\"].value_counts(dropna=False)\n","2ee02bd4":"#assert examples\n\nassert dataframe.columns[0] == 'Station' #nothing returns so its correct\nassert dataframe.Longitude.dtypes==np.float # nothing returns so its correct\n\n\n#note: indentation error means line stars with empty space!!","df661bd5":"Missing Data Handling\nTesting with Assert\n\n\u0130f we encounter missing data;\n\nleave as it is\n\ndrop them with dropna() method\n\nfill missing data with fillna() method\n\n\n","96a7739d":"**Diagnose Data And Cleaning****\n\nWe use head, tail,shape,column and info for the diagnose ","6cf94777":"Exploratory Data Analysis\n\nvalue_counts(): frequency counts\n\nThere are some definitions for Exploratory Data, to see these results we will use desribe() method. \n\nstd: is the standar daviation\n\nmean: average of the entries\n\ncount: number of entries\n\nOutlier: the value considerably higher or lower  from rest of the data.  \n\nOutlier are smaller than Q1 - IQR * 1.5   and bigger than Q3+ IQR * 1.5\n\n    IQR=(Q3-Q1)\n\n example serie: 1,8,9,10,11,12,13,14,15,16,17,18,19\n\nMedian : middle of the serie= 13 (quantile %50) not mean median!! middle of the sequence\n\nQuartile;\n\nThe lower quartile: median between the smallest number and quantile%50(exact median)= 10 %25 quantile(Q1)\n\nThe upper quartile : median between the largest number and quantile%50(exact median)= 16 %75 quantile(Q3)\n","2182c9f0":"Concatenating Data\n\nWe can concatenate two dataframes","772278bf":"TIDY Data With melt() method. This methods belongs to Pandas Library.","2a2d84ef":"DATA TYPES\n5 different data types we are working with;\ninteger, object(string), boolean, float and categorical\nWhat kind of data types we have in our dataframe?\n    \n","14e60a12":"Looking for missing values and NaN values","865c55be":"Visual Exploratory Data With Box Plot\n\nBox plot visualize  basics statistics like outliers,min\/max or quantiles"}}