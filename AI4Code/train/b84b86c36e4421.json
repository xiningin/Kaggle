{"cell_type":{"6568a9d7":"code","981791a7":"code","b2ec76d7":"code","98049e32":"code","dd77d55a":"code","ed62ed9c":"code","06c0b73f":"code","c7344f84":"code","e94cd6b2":"code","9af03a03":"code","6156b09d":"code","c890ca95":"code","1ce03f0d":"code","d6fb80c8":"markdown","650cdbc2":"markdown","a61c7117":"markdown"},"source":{"6568a9d7":"import gc\nimport numpy as np\nimport pandas as pd\nimport datatable as dt\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom tpot import TPOTClassifier","981791a7":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\",\"object\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","b2ec76d7":"def preprocess_data(df):\n    num_missing = df.isna().sum(axis=1)\n    # Fill missing values in training data with 0.0\n    numerical_transformer = SimpleImputer(strategy='constant', fill_value=0.0)\n    imputed_df1 = pd.DataFrame(numerical_transformer.fit_transform(df))\n    imputed_df1.columns = df.columns\n    \n    df1 = reduce_memory_usage(imputed_df1)\n    \n    df1['missing'] = num_missing\n    \n    return df1\n\ndef make_sample(df, size=0.2):\n    sampled_df = df.sample(int(len(df) * size))\n    return sampled_df.drop(columns=['claim','id']), sampled_df['claim'].astype('int16')","98049e32":"train_df = preprocess_data(dt.fread('..\/input\/tabular-playground-series-sep-2021\/train.csv').to_pandas())\ntest_df = preprocess_data(dt.fread('..\/input\/tabular-playground-series-sep-2021\/test.csv').to_pandas())","dd77d55a":"test_df.id = test_df.id.astype('int32')","ed62ed9c":"# X holds the training data\n# y holds the target\/dependent variable, the 'claim' column.\n# make_sample converts the 'claim' column to 'int8' since it is of type 'object'. tpot can't use object column as a target\n\nX, y = make_sample(train_df, 0.1)","06c0b73f":"del train_df\ngc.collect()","c7344f84":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.15, random_state=459)","e94cd6b2":"import multiprocessing\n# This was taken from tpot documentation. It changes the fork behavior so that tpot uses less memory.\nmultiprocessing.set_start_method('forkserver')\n\npipeline_optimizer = TPOTClassifier(generations=20, population_size=30, scoring='roc_auc', memory='auto',\n                                random_state=459, n_jobs=4, cv=2, config_dict='TPOT light', verbosity=0)","9af03a03":"pipeline_optimizer.fit(X_train, y_train)","6156b09d":"pipeline_optimizer.export('exported_TPS_pipeline.py')","c890ca95":"roc_auc_score(y_valid, pipeline_optimizer.predict_proba(X_valid)[:,1])","1ce03f0d":"drop_id = test_df.drop(columns=['id'])\n\noutput = pd.DataFrame({\n    'id': test_df.id,\n    'claim': pipeline_optimizer.predict_proba(drop_id)[:,1]\n})\noutput.to_csv('submission.csv', index=False)","d6fb80c8":"## September Tabular Playground Series - AutoML with Tpot","650cdbc2":"#### Garbage collecting","a61c7117":"Model Time"}}