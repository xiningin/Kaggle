{"cell_type":{"747627e4":"code","8e5773cc":"code","1f4448e0":"code","60e2d576":"code","618544e5":"code","be4f8cc4":"code","99e251ad":"code","dd9b9e85":"code","6cdf89bb":"markdown","5f1f3507":"markdown","f2cf54fe":"markdown","b8cbf50d":"markdown","e210a284":"markdown"},"source":{"747627e4":"import numpy as np","8e5773cc":"def myownmult(array1,array2):\n    mult_array = np.array([])\n    for i, i2 in zip(array1, array2):\n        mult_array = np.append(mult_array, [i*i2]).astype(int)\n    \n    return mult_array","1f4448e0":"a = np.array([1,2,3])\nb = np.array([1,2,3])","60e2d576":"import time\n\nt0 = time.time()\nmult = a * b\nt1= time.time()\nprint(\"numpy: \", mult, \" in \", t1-t0)\n\nt0 = time.time()\nmult = myownmult(a,b)\nt1= time.time()\nprint(\"my forloop: \", mult, \" in \", t1-t0)","618544e5":"def myown_matrix_multipy(mat1, mat2):\n    result = None\n    row = np.array([])\n    for i in mat1:\n        for i2 in mat2.T:\n            sum = np.matmul(i,i2.T)\n            row = np.append(row, sum)\n        if result is None:\n            result = row\n        else:\n            result = np.row_stack((result, row)).astype(int)\n        row = np.array([]) \n    return result","be4f8cc4":"matrix1 = np.matrix([[3,2,1],[3,4,0]])\nmatrix2 = np.matrix([[1,2],[3,4],[2,3]])","99e251ad":"t0 = time.time()\nmult = myown_matrix_multipy(matrix1,matrix2)\nt1= time.time()\nprint(\"mine: \", mult, \" in \", t1-t0)\n\nt0 = time.time()\nmult = matrix1 * matrix2\nt1= time.time()\nprint(\"numpy: \", mult, \" in \", t1-t0)","dd9b9e85":"a = np.transpose(np.matrix([1,2,3])) * np.matrix([1,2])\nprint(a)","6cdf89bb":"### For loop","5f1f3507":"### For loop ","f2cf54fe":"# Matrix multiplication","b8cbf50d":"## For loop\nYour own functoin\ndef myownmatmul(a,b):\n    return output\n    \n","e210a284":"# Vector multiplication\n\nAbout vector multiplication \n\n1. item wise multiplication\n2. dot product (math multiplication)"}}