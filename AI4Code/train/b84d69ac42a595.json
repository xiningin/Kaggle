{"cell_type":{"4e90fb46":"code","5fcd86a7":"code","63ba882d":"code","423e1e53":"code","aafeeeb0":"code","f21393c2":"code","c14ff5e7":"code","7cb47e44":"code","37430d69":"code","196e832c":"code","3257423a":"code","1cf785e6":"code","8f92c5d7":"markdown","75e6f777":"markdown","19068602":"markdown","0a66ac2b":"markdown","ecc7a7ed":"markdown","e3af5e9c":"markdown"},"source":{"4e90fb46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nimport re\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5fcd86a7":"# Load the data and one random example from the training dataset\ndf = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ndf = df[['text','target']]\nprint (df.isna().sum())\nimport seaborn as sns\nsns.countplot(\"target\",data=df);","63ba882d":"replace_list = {r\"i'm\": 'i am',\n                r\"'re\": ' are',\n                r\"let\u2019s\": 'let us',\n                r\"'s\":  ' is',\n                r\"'ve\": ' have',\n                r\"can't\": 'can not',\n                r\"cannot\": 'can not',\n                r\"shan\u2019t\": 'shall not',\n                r\"n't\": ' not',\n                r\"'d\": ' would',\n                r\"'ll\": ' will',\n                r\"'scuse\": 'excuse',\n                ',': ' ,',\n                '.': ' .',\n                '!': ' !',\n                '!!': ' !',\n                '!!!': ' !',\n                '?': ' ?',\n                '??': ' ?',\n                '???': ' ?',\n                '\\s+': ' '}\n\ndef more_preprocess (x):\n    processed_feature = re.sub(r'\\W', ' ', str(x))\n\n    # Remove all single characters\n    processed_feature= re.sub(r'\\s+[a-zA-Z]\\s+', ' ', processed_feature)\n\n    # Remove single characters from the start\n    processed_feature = re.sub(r'\\^[a-zA-Z]\\s+', ' ', processed_feature) \n\n    # Substituting multiple spaces with single space\n    processed_feature = re.sub(r'\\s+', ' ', processed_feature, flags=re.I)\n\n    # Removing prefixed 'b'\n    processed_feature = re.sub(r'^b\\s+', '', processed_feature)\n\n    # Converting to Lowercase\n    processed_feature = processed_feature.lower()\n    \n    for s in replace_list:\n        processed_feature = processed_feature.replace(s, replace_list[s])\n    #text = ' '.join(text.split())\n    \n    return processed_feature\n\ndf['text'] = df['text'].apply(more_preprocess)\ndf.sample()","423e1e53":"max_fatures = 2000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(df['text'].values)\nX = tokenizer.texts_to_sequences(df['text'].values)\nX = pad_sequences(X)\nprint (X.shape)","aafeeeb0":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","f21393c2":"Y = pd.get_dummies(df['target']).values\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","c14ff5e7":"batch_size = 128\nmodel.fit(X_train, Y_train, epochs = 20, batch_size=batch_size, verbose = 1, validation_data=(X_test,Y_test))","7cb47e44":"# Let's obtain our predictions on our test dataset\npredictions = model.predict(X_test)\npreds = [np.argmax(y) for y in predictions]\n","37430d69":"# and the true predictions as vector\ny_test = [np.argmax(y) for y in Y_test]","196e832c":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nprint(confusion_matrix(y_test,preds))\nprint(classification_report(y_test,preds))\nprint(\"Accuracy {0:.2f}%\".format(100*accuracy_score(y_test, preds)))","3257423a":"twt = ['severe drought']\n#vectorizing the tweet by the pre-fitted tokenizer instance\ntwt = tokenizer.texts_to_sequences(twt)\n#padding the tweet to have exactly the same shape as `embedding_2` input\ntwt = pad_sequences(twt, maxlen=X.shape[1], dtype='int32', value=0)\nprint(twt)\nsentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\nif(np.argmax(sentiment) == 0):\n    print(\"no disaster\")\nelif (np.argmax(sentiment) == 1):\n    print(\"disaster\")","1cf785e6":"test = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\",usecols=['text','id'])\ntest['text'] = test['text'].apply(more_preprocess)\n\n#vectorizing the tweet by the pre-fitted tokenizer instance\n\n\nX_submission = tokenizer.texts_to_sequences(test['text'].values)\nmaxlen = 27 # = X.shape[1]\n\nX_submission = pad_sequences(X_submission, maxlen=maxlen)\nprint (X_submission.shape)\npredictions = model.predict(X_submission)\npreds = [np.argmax(pred) for pred in predictions]\nsubmission=pd.DataFrame()\nsubmission['id']=test['id']\nsubmission['target'] = preds\nsubmission.sample()\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","8f92c5d7":"### Validation","75e6f777":"### Submission","19068602":"### Training","0a66ac2b":"### Model","ecc7a7ed":"### Tokenizer","e3af5e9c":"### Data cleaning"}}