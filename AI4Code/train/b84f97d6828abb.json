{"cell_type":{"79864aa2":"code","38180d10":"code","90025ad8":"code","7a581f1b":"code","9949ccfe":"code","1162951d":"code","7925a591":"code","0ffd80b3":"code","9b75df81":"code","158538a3":"code","dcf50676":"code","69c10d10":"code","047cf9d8":"code","b9ef2a8c":"code","30d6eae8":"code","af89457c":"markdown","5e3eae12":"markdown","04b2d61d":"markdown","7bef64b2":"markdown","0cc4d897":"markdown","a5a57863":"markdown","d89e9430":"markdown","e26e684f":"markdown","4cd4658f":"markdown","e316afaa":"markdown","eb9c6e38":"markdown","8054039a":"markdown"},"source":{"79864aa2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import layers\nimport xgboost as xgb\nimport lightgbm as lgbm\nimport catboost","38180d10":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntrain = train.set_index('id')\ntarget = train['loss']\ntrain = train.drop('loss', axis=1)\ntest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\ntest = test.set_index('id')\npreds = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')","90025ad8":"train.describe()","7a581f1b":"plt.matshow(train.corr())\nplt.colorbar()\nplt.show()","9949ccfe":"train.hist(figsize=(50,30), bins=30)\nplt.show()","1162951d":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\ntrain_pca = pca.fit_transform(train)\nplt.scatter(train_pca[:,0], train_pca[:,1], s=0.1, c=target)\nplt.colorbar()\nplt.show()","7925a591":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\ntrain_sc = sc.fit_transform(train)\ntest_sc = sc.transform(test)\ntrain_sc_pca = pca.fit_transform(train_sc)\nplt.scatter(train_sc_pca[:,0], train_sc_pca[:,1], s=0.1, c=target)\nplt.colorbar()\nplt.show()","0ffd80b3":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(train_sc, target, random_state=0,\n                                                  stratify=target, test_size=0.5)","9b75df81":"from sklearn.metrics import mean_squared_error\n\ndef score_model(mod, X, y):\n    y_pred = mod.predict(X)\n    return np.sqrt(mean_squared_error(y, y_pred))","158538a3":"preds_dict = {}","dcf50676":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100, random_state=0, n_jobs=4)\nrf.fit(X_train, y_train)\nprint(score_model(rf, X_val, y_val))\n\nrf.fit(train_sc, target)\npreds_dict['rf'] = rf.predict(test_sc)","69c10d10":"lgbmC = lgbm.LGBMClassifier(n_estimators=800, learning_rate=0.02, random_state=0)\nlgbmC.fit(X_train, y_train)\nprint(score_model(lgbmC, X_val, y_val))\n\nlgbmC.fit(train_sc, target)\npreds_dict['lgbmC'] = lgbmC.predict(test_sc)","047cf9d8":"cat = catboost.CatBoostClassifier(n_estimators=600, learning_rate=0.02, random_state=0)\ncat.fit(X_train, y_train)\nprint(score_model(cat, X_val, y_val))\n\ncat.fit(train_sc, target)\npreds_dict['cat'] = cat.predict(test_sc)","b9ef2a8c":"from keras.callbacks import EarlyStopping\n\nwith tf.device('\/gpu:0'):\n    def block(inp, nsize, drop):\n        x = layers.BatchNormalization()(inp)\n        x = layers.Dense(nsize)(x)\n        x = layers.Dropout(drop)(x)\n        x = layers.Activation('relu')(x)\n        return x\n    \n    def build_model():\n        inp = layers.Input(shape=(train_sc.shape[1]))\n        x = block(inp, 10000, 0.2)\n        x = layers.Dense(target.nunique(), activation='softmax')(x)\n        return keras.Model(inputs=inp, outputs=x)\n    \n    model = build_model()\n    \n    earlyStopping = EarlyStopping(min_delta=0.001, patience=10, verbose=1)\n    \n    model.compile(optimizer=\"Adam\", loss=\"SparseCategoricalCrossentropy\", \n                  metrics=['RootMeanSquaredError'])\n    \n    history = model.fit(X_train, y_train, validation_data=(X_val, y_val),\n                       batch_size=512, epochs=100, callbacks=[earlyStopping])\n    \n    preds_dict['nn'] = model.predict(test_sc)","30d6eae8":"total_preds = np.zeros(shape=preds.shape[0])\nfor i, pred in enumerate(preds_dict.values()):\n    pred_ = pd.DataFrame(data=pred)\n    pred_.to_csv('submission_'+ str(i) +'.csv', index=False)\n    try:\n        if (pred.shape[1] > 1):\n            pred = pd.DataFrame(pred.argmax(axis=1))\n        total_preds += pred\n    except:\n        print('how?')\ntry:\n    total_preds \/= len(preds_dict.keys())\n    total_preds = pd.DataFrame(data=total_preds, columns=[preds.columns[1]], index=preds.id)\n    total_preds.reset_index()\n    total_preds.to_csv('submission.csv', index=False)\nexcept:\n    print('mecag\u00fcen')","af89457c":"### Scoring function","5e3eae12":"## Predictions","04b2d61d":"## Ensemble","7bef64b2":"## Models","0cc4d897":"### Random Forest","a5a57863":"### Neural Networks","d89e9430":"### LightGBM","e26e684f":"## EDA","4cd4658f":"## Libraries","e316afaa":"## Train, Validation split","eb9c6e38":"## Data","8054039a":"### CatBoost"}}