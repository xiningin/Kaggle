{"cell_type":{"485f4197":"code","b6bb4120":"code","ce3db2f4":"code","47a429d1":"code","55e1b961":"code","68af2575":"code","9ce213d5":"code","c2f9ec1d":"code","957a65e5":"code","0b4fd5f4":"code","5847d2e7":"code","3985e3b9":"code","4fbf2d23":"code","f85b2071":"code","001fc18e":"code","de043bb7":"code","9354d0ee":"code","fc0b2391":"code","6ef603a5":"code","6d6b4988":"code","6792248c":"code","2b2beee5":"code","55654723":"code","4f847041":"code","b0eb7e11":"code","cc1e3668":"code","e5d2611b":"markdown","6f409439":"markdown","036b189a":"markdown","75a331bd":"markdown","e2044ba8":"markdown","462f70bc":"markdown","037756bd":"markdown","84db4fa5":"markdown","32a396c9":"markdown","16fac825":"markdown","72f28cb1":"markdown","c0339b6b":"markdown","97b64c9e":"markdown","b96c9040":"markdown"},"source":{"485f4197":"!pip install -q efficientnet","b6bb4120":"import math, re, os\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nfrom tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.applications import ResNet152V2\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.applications import DenseNet201\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nprint(\"Tensorflow version \" + tf.__version__)\n","ce3db2f4":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Create strategy from tpu\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nIMAGE_SIZE = [512, 512]\nEPOCHS = 18\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync","47a429d1":"LR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","55e1b961":"GCS_PATH_SELECT = { # available image sizes\n    192: GCS_DS_PATH + '\/tfrecords-jpeg-192x192',\n    224: GCS_DS_PATH + '\/tfrecords-jpeg-224x224',\n    331: GCS_DS_PATH + '\/tfrecords-jpeg-331x331',\n    512: GCS_DS_PATH + '\/tfrecords-jpeg-512x512'\n}\nGCS_PATH = GCS_PATH_SELECT[512]\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') # predictions on this dataset should be submitted for the competition\n\n# watch out for overfitting!\nSKIP_VALIDATION = True\nif SKIP_VALIDATION:\n    TRAINING_FILENAMES = TRAINING_FILENAMES + VALIDATION_FILENAMES","68af2575":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102","9ce213d5":"def display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","c2f9ec1d":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)#\u968f\u673a\u5de6\u53f3\u53cd\u8f6c\n    image = tf.image.random_flip_up_down(image)\n    image = tf.image.random_contrast(image,0,2)\n    return image, label  \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(1024)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = (1 - SKIP_VALIDATION) * count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","957a65e5":"# Need this line so Google will recite some incantations\n# for Turing to magically load the model onto the TPU\nwith strategy.scope():\n    enet = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model = tf.keras.Sequential([\n        enet,\n        tf.keras.layers.GlobalMaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ]) \n\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel.summary()","0b4fd5f4":"#scheduler = tf.keras.callbacks.ReduceLROnPlateau(patience=3, verbose=1)\n\nhistory = model.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS,\n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)","5847d2e7":"if not SKIP_VALIDATION:\n    display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\n    display_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","3985e3b9":"with strategy.scope():\n    res = Xception(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model2 = tf.keras.Sequential([\n        res,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel2.summary()","4fbf2d23":"history2 = model2.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)","f85b2071":"if not SKIP_VALIDATION:\n    display_training_curves(history2.history['loss'], history2.history['val_loss'], 'loss', 211)\n    display_training_curves(history2.history['sparse_categorical_accuracy'], history2.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","001fc18e":"with strategy.scope():\n    Inct=DenseNet201(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n      \n    )\n    model3 = tf.keras.Sequential([\n        Inct,\n        tf.keras.layers.GlobalMaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel3.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel3.summary()","de043bb7":"history3 = model3.fit(\n    get_training_dataset(), \n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_callback],\n    validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n)","9354d0ee":"if not SKIP_VALIDATION:\n    display_training_curves(history3.history['loss'], history3.history['val_loss'], 'loss', 211)\n    display_training_curves(history3.history['sparse_categorical_accuracy'], history3.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","fc0b2391":"# with strategy.scope():\n#     den=DenseNet201(\n#         input_shape=(512, 512, 3),\n#         weights='imagenet',\n#         include_top=False\n      \n#     )\n#     model4 = tf.keras.Sequential([\n#         den,\n#         tf.keras.layers.GlobalMaxPooling2D(),\n#         tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n#     ])\n        \n# model4.compile(\n#     optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n#     loss = 'sparse_categorical_crossentropy',\n#     metrics=['sparse_categorical_accuracy']\n# )\n# model4.summary()","6ef603a5":"# history4 = model4.fit(\n#     get_training_dataset(), \n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     epochs=EPOCHS, \n#     callbacks=[lr_callback],\n#     validation_data=None if SKIP_VALIDATION else get_validation_dataset()\n# )","6d6b4988":"# if not SKIP_VALIDATION:\n#     display_training_curves(history4.history['loss'], history4.history['val_loss'], 'loss', 211)\n#     display_training_curves(history4.history['sparse_categorical_accuracy'], history4.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","6792248c":"if  not SKIP_VALIDATION:\n    cmdataset = get_validation_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and labels, order matters.\n    images_ds = cmdataset.map(lambda image, label: image)\n    labels_ds = cmdataset.map(lambda image, label: label).unbatch()\n    cm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\n    m = model.predict(images_ds)\n    m2 = model2.predict(images_ds)\n    m3 = model3.predict(images_ds)\n    scores = []\n    best_score,best_alpha,best_beta=0,0,0\n    for alpha in np.linspace(0,1,100):\n        for beta in np.linspace(0,1,100):\n            cm_probabilities = alpha*m+(beta)*m2+(1-alpha-beta)*m3\n            cm_predictions = np.argmax(cm_probabilities, axis=-1)#\u82b1\u7684\u79cd\u7c7b\n            score = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n            #scores.append(score)\n        \n            #print(\"Correct   labels: \", cm_correct_labels.shape, cm_correct_labels)\n            #print(\"Predicted labels: \", cm_predictions.shape, cm_predictions)\n            #plt.plot(scores)\n            if(score > best_score):\n                best_alpha = alpha\n                best_beta  = beta\n                best_score = score\n        scores.append(best_score)\n    plt.plot(scores)\n    print(\"best_alha:\",best_alpha,\"best_beta:\",best_beta)\n    cm_probabilities = best_alpha*m+best_beta*m2+(1-best_alpha)*m3\n    cm_predictions = np.argmax(cm_probabilities, axis=-1)\nelse:\n    best_alpha = 0.505\n    best_beta = 0.303","2b2beee5":"#print(best_alpha,best_beta)","55654723":"if not SKIP_VALIDATION:\n    cmat = confusion_matrix(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)))\n    score = f1_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    precision = precision_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    recall = recall_score(cm_correct_labels, cm_predictions, labels=range(len(CLASSES)), average='macro')\n    #cmat = (cmat.T \/ cmat.sum(axis=1)).T # normalized\n    display_confusion_matrix(cmat, score, precision, recall)\n    print('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score, precision, recall))","4f847041":"best_beta = 0.2\nfor best_alpha in np.linspace(0.4,0.6,20):\n    test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\n    print('Computing predictions...')\n    test_images_ds = test_ds.map(lambda image, idnum: image)\n    probabilities = best_alpha*model.predict(test_images_ds) + (best_beta)*model2.predict(test_images_ds) + (1-best_beta-best_alpha)*model3.predict(test_images_ds)\n    predictions = np.argmax(probabilities, axis=-1)\n    print(predictions)\n    \n    print('Generating submission.csv file...')\n    test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n    test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\n    filename = 'submission'+(str(best_alpha))+(str(best_alpha))+('.csv')\n    np.savetxt(filename, np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","b0eb7e11":"for best_alpha in np.linspace(0.4,0.6,20):\n    test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\n    print('Computing predictions...')\n    test_images_ds = test_ds.map(lambda image, idnum: image)\n    probabilities = best_alpha*model.predict(test_images_ds) + (1-best_alpha)*model2.predict(test_images_ds)\n    predictions = np.argmax(probabilities, axis=-1)\n    print(predictions)\n    \n    print('Generating submission.csv file...')\n    test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n    test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\n    filename = 'submission'+(str(best_alpha))+('.csv')\n    np.savetxt(filename, np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","cc1e3668":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = (model.predict(test_images_ds) + model2.predict(test_images_ds)+model3.predict(test_images_ds))\/3\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","e5d2611b":"# About this kernel\n\nif you like it ,please vote me for my work,Thank you. good scores for you! \n\nV1: This one is just a blend of two kernels:\n\nhttps:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7\n\nhttps:\/\/www.kaggle.com\/ratan123\/densenet201-flower-classification-with-tpus\n\nCore kernel: [starter kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu). \n\nV2: added confusion matrix from starter kernel, epochs = 20\n\nV3: Vote up original kernels and this one if you like my work :)\n\nV4: Custom LR schedule + adding validation data to training data (https:\/\/www.kaggle.com\/msheriey\/flowers-on-tpu-ensemble-lr-schedule)\n\nV5: Skip validation = FALSE + finding best_alpha\n\nV7: Skip validation = TRUE + best_alpha = 0.44\n\nmy_V3:ENet B7 + IncepentionResnetV2 0.9558\n\nmy_V5:ENet B7 + IncepentionResnetV2 + Densenet201 Skip validation = FALSE + finding best_alpha,beta\n\nmy_V6:ENet B7 + IncepentionResnetV2 + Densenet201 Skip validation = True + best_alpha=0.37,best_beta = 0.26\n\nmy_V9: 15 epoch 0.96\nmy_V10: 10 epoch replace IncepectionResnetV2 to resnet101\n\nmy_V12: exist false\n\nmy_V13\uff1aFALSE + finding best_alpha best_beta ENet B7 + Resnet152+InceptionResnetV2 0.95751\n\nmy_V15\uff1aTrue + best_alpha,best_beta = 0.505,0.303\n\nmy_V16:data_augment+avg_pro \n\nmy_V17:data_augment + avg score +four model\n\nmy_V18:data_augment + avg score + TTA","6f409439":"## Training 4:","036b189a":"# Custom LR schedule","75a331bd":"# Helper Functions\n## Visualization","e2044ba8":"## Datasets Functions","462f70bc":"## Training 3:","037756bd":"# Training Model","84db4fa5":"## Load Model into TPU","32a396c9":"## Training 2:","16fac825":"## Training","72f28cb1":"Unhide to see `CLASSES`:","c0339b6b":"# Configurations","97b64c9e":"# Finding best alpha and Beta\nOur final model is just mix of two presented above. In the first commit it was arithmetic mean (alpha = 0.5). Note that using validation data as training will fit your model with accuracy equal 1.0.\nThus formula presented below of linear combination of models will work only with validation data:\n\nprob = alpha * (model) + beta * (model2) + (1-alpha-beta) * (model3)","b96c9040":"# Confusion matrix"}}