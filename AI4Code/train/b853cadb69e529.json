{"cell_type":{"664c24ec":"code","6648302a":"code","322f28ee":"code","1aab52bd":"code","1bb566a9":"code","74121ecc":"code","045cf289":"code","3453416d":"code","9742ff7e":"code","c37f2926":"code","eaa3b147":"code","64d92f20":"code","c76a8792":"code","c7a7f0d5":"code","47c9b004":"code","9ab9202c":"code","02fd4448":"code","9f659805":"code","d9718048":"code","a847cd67":"code","36373dc5":"code","f45061f2":"code","2295c5c4":"code","2371c65d":"code","879978c9":"code","461f746c":"code","c23f2839":"code","22b0ee31":"code","deeca216":"code","149a11e6":"code","a9836eb3":"markdown","1f7c5f26":"markdown","5f6cf732":"markdown","a77ac798":"markdown","605c63d6":"markdown","25039f7f":"markdown","a964502e":"markdown","0ca2f5f6":"markdown","e94ce650":"markdown","17272d8e":"markdown","47b21d1e":"markdown","802756cd":"markdown","e0ec6c60":"markdown","ade3c60c":"markdown","b955abdf":"markdown"},"source":{"664c24ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6648302a":"#Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n#Machine Learning\nfrom sklearn.ensemble import RandomForestRegressor","322f28ee":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv\")\ntrain.head()","1aab52bd":"test = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv\")\ntest.head()","1bb566a9":"train.shape","74121ecc":"train.info()","045cf289":"train.dtypes","3453416d":"train.describe()","9742ff7e":"train.describe(include=[np.object])","c37f2926":"train.isna().any()","eaa3b147":"train.isna().sum()","64d92f20":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","c76a8792":"for df in [train,test]:\n    df.drop(\"County\",axis=1,inplace=True)\n    df.drop(\"Province_State\",axis=1,inplace=True)","c7a7f0d5":"train.head()","47c9b004":"test.head()","9ab9202c":"fig = px.pie(train, values='TargetValue', names='Target', title='ConfirmedCases & Fatalities')\nfig.show()","02fd4448":"fig = px.pie(train, values='TargetValue', names='Country_Region', title='ConfirmedCases & Fatalities Percentile by Country')\nfig.update_traces(textposition='inside')\nfig.show()","9f659805":"train[\"Date\"] = pd.to_datetime(train[\"Date\"]).dt.strftime(\"%m%d\").astype(int)","d9718048":"test[\"Date\"] = pd.to_datetime(test[\"Date\"]).dt.strftime(\"%m%d\").astype(int)","a847cd67":"from sklearn.preprocessing import LabelEncoder \n  \nle = LabelEncoder() \n  \ntrain['Country_Region']= le.fit_transform(train['Country_Region']) \ntrain['Target']= le.fit_transform(train['Target']) \ntest['Country_Region']= le.fit_transform(test['Country_Region']) \ntest['Target']= le.fit_transform(test['Target']) ","36373dc5":"train.tail()","f45061f2":"test.head()","2295c5c4":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['TargetValue', 'Id'], axis=1)\ntarget = train[\"TargetValue\"]\nX_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.2, random_state =0)","2371c65d":"model = RandomForestRegressor(n_jobs=-1)\nscores = []\nmodel.set_params(n_estimators=100)\nmodel.fit(X_train, y_train)\nscores.append(model.score(X_test, y_test))\nscore = model.score(X_test, y_test)\nprint(score*100)","879978c9":"test.drop(['ForecastId'],axis=1,inplace=True)\ntest.index.name = 'Id'\ntest.head()","461f746c":"y_pred = model.predict(X_test)\ny_pred","c23f2839":"predictions = model.predict(test)\n\npred_list = [int(x) for x in predictions]\n\noutput = pd.DataFrame({'Id': test.index, 'TargetValue': pred_list})\nprint(output)","22b0ee31":"q05 = output.groupby('Id')['TargetValue'].quantile(q=0.05).reset_index()\nq50 = output.groupby('Id')['TargetValue'].quantile(q=0.5).reset_index()\nq95 = output.groupby('Id')['TargetValue'].quantile(q=0.95).reset_index()\n\nq05.columns=['Id','0.05']\nq50.columns=['Id','0.5']\nq95.columns=['Id','0.95']","deeca216":"concatDF = pd.concat([q05,q50['0.5'],q95['0.95']],1)\nconcatDF['Id'] = concatDF['Id'] + 1\nconcatDF.head(10)","149a11e6":"sub = pd.melt(concatDF, id_vars=['Id'], value_vars=['0.05','0.5','0.95'])\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head(10)","a9836eb3":"Converting String Date into Integer for both Train and Test Datasets","1f7c5f26":"# Handeling Null Values","5f6cf732":"# Prediction","a77ac798":"# Output","605c63d6":"# Submission","25039f7f":"Fitting the model RandomForestRegressor ","a964502e":"Appling Label Encoding for Categorial features  ","0ca2f5f6":"# Preparing data for Model","e94ce650":"Slipting Data based on Predictors and Target values","17272d8e":"Data Discription for String Columns","47b21d1e":"# Data Visualization","802756cd":"Understanding and Cleaning the Data","e0ec6c60":"# Preparing Submission File","ade3c60c":"Droping of Unwanted Data to make model more Predictive","b955abdf":"# Performing Correlation Matrix for Train Data"}}