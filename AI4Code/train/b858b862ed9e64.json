{"cell_type":{"eb0156e6":"code","1db0601d":"code","86776f83":"code","f1df2454":"code","45667898":"code","5e031dc0":"code","54f6c7d9":"code","a8ac50fd":"code","e4d3a337":"code","addc74e5":"code","9447d8d9":"code","ffd8da46":"code","cd90fff0":"code","ab7ff002":"code","2e2eeaf6":"code","98ca1e70":"code","caa0eb76":"code","7a7da943":"code","3979d336":"code","fa9956a6":"code","1e64b9d8":"code","484e5b99":"code","11b93400":"code","f1715e03":"code","c1771528":"code","371b25c7":"code","fbe28022":"code","b32e7a16":"code","ceb9b44e":"markdown","92311f51":"markdown","9278479d":"markdown","0ebdd22b":"markdown","bc2afa63":"markdown","3cc55319":"markdown","cf32fe67":"markdown","822814f4":"markdown","947a68dc":"markdown","a048409e":"markdown","5ef88ac5":"markdown"},"source":{"eb0156e6":"# upload all import packages\n# subjects' info: age, gender, ...summary all the information you can show. image info: size, how many, intensity histogram, ...\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport glob\nimport pydicom\nfrom pydicom.data import get_testdata_files\nimport os","1db0601d":"ds = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-001\/04-02-1992-FH-HEADBrain Protocols-79896\/11.000000-T1post-80644\/1-13.dcm')\nplt.imshow(ds.pixel_array, cmap=plt.cm.gray)\nplt.savefig('tumor_plot1.png')\n# plt.show()","86776f83":"ds1 = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-001\/04-02-1992-FH-HEADBrain Protocols-79896\/11.000000-T1post-80644\/1-13.dcm')\nax = plt.hist(ds1.pixel_array.ravel(), bins = 256)\n# plt.show()\nplt.savefig('first_plot1.png', transparent = True)","f1df2454":"ds = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-007\/12-29-1992-Mr Rcbv Sequence Fh-74352\/37998.000000-T2reg-77099\/1-12.dcm')\nplt.imshow(ds.pixel_array, cmap=plt.cm.gray)\nplt.savefig('tumor_plot2.png')\n# plt.show()","45667898":"ds2 = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-007\/12-29-1992-Mr Rcbv Sequence Fh-74352\/37998.000000-T2reg-77099\/1-12.dcm')\nax = plt.hist(ds2.pixel_array.ravel(), bins = 256)\n# plt.show()\nplt.savefig('first_plot2.png')","5e031dc0":"ds = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-017\/08-21-1997-MR RCBV SEQUENCE-73885\/37603.000000-FLAIRreg-59258\/1-12.dcm')\nplt.imshow(ds.pixel_array, cmap=plt.cm.gray)\nplt.savefig('tumor_plot3.png')\n# plt.show()","54f6c7d9":"\nds3 = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-017\/08-21-1997-MR RCBV SEQUENCE-73885\/37603.000000-FLAIRreg-59258\/1-12.dcm')\nax = plt.hist(ds3.pixel_array.ravel(), bins = 256)\n# plt.show()\nplt.savefig('first_plot3.png')","a8ac50fd":"ds = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-020\/11-09-1989-HEADBrain Protocols-61674\/28721.000000-nCBFreg-99726\/1-12.dcm')\nplt.imshow(ds.pixel_array, cmap=plt.cm.gray)\nplt.savefig('tumor_plot4.png')\n# plt.show()","e4d3a337":"ds4 = pydicom.dcmread('..\/input\/brain-tumor-progression\/Brain-Tumor-Progression\/PGBM-020\/11-09-1989-HEADBrain Protocols-61674\/28721.000000-nCBFreg-99726\/1-12.dcm')\nax = plt.hist(ds4.pixel_array.ravel(), bins = 256)\n# plt.show()\nplt.savefig('first_plot4.png')","addc74e5":"# ds4\n# plt.imshow(ds4.pixel_array, cmap=plt.cm.gray)\n# plt.show()","9447d8d9":"# read all the file\ndf = []\npixels= []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        dataset = pydicom.dcmread(os.path.join(dirname, filename))\n        df.append(dataset)\n        pixels.append(dataset.pixel_array)","ffd8da46":"# dfnames =[]\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         ds = pydicom.read_file(os.path.join(dirname, filename), force = True)\n#         df = pd.DataFrame(ds.values())\n# #        able to read raw data elements\n#         df[0] = df[0].apply(lambda x: pydicom.dataelem.DataElement_from_raw(x) if isinstance(x, pydicom.dataelem.RawDataElement) else x)\n#         df['name'] = df[0].apply(lambda x: x.name)\n# #         df['value'] = df[0].apply(lambda x: x.value)\n#         dfnames.append(df[0].apply(lambda x: x.name))\n#         df = df[['name']]","cd90fff0":"biggest = 0\n# length of 8798\nfor i in range (len(df)):\n#     i is the 8798 df[i]\n    for j in range (len(df[i])):\n        if j >biggest:\n            biggest = j\n    \n#     compute length of df \nprint(biggest)","ab7ff002":"location = []\n# length of 8798\nfor i in range (len(df)):\n#     i is the 8798 df[i]\n    location.append(len(df[i]))\nlocation.index(max(location))","2e2eeaf6":"df[490]","98ca1e70":"# df[0].apply(lambda x: pydicom.dataelem.DataElement_from_raw(x) if isinstance(x, pydicom.dataelem.RawDataElement) else x)","caa0eb76":"# put patient information in list\ni=0\nModality=[]\nPatientAge = []\nPatientBirthDate= []\nPatientID =[]\nPatientIdentityRemoved=[]\nPatientName =[]\nPatientPosition = []\nPatientSex = []\nPatientWeight =[]\nRows=[]\nColumns=[]\nSliceLocation=[]\nSpacingBetweenSlices =[]\nStudyDate = []\nTransmitCoilName= []\nfor i in range(len(df)):\n    PatientAge.append(df[i].PatientAge[0:3])\n    PatientBirthDate.append(df[i].PatientBirthDate)\n    PatientID.append(df[i].PatientID)\n    PatientIdentityRemoved.append(df[i].PatientIdentityRemoved)\n    PatientName.append(df[i].PatientName)\n    PatientPosition.append(df[i].PatientPosition)\n    PatientSex.append(df[i].PatientSex)\n    PatientWeight.append(df[i].PatientWeight)\n    Modality.append(df[i].Modality)\n    Rows.append(df[i].Rows)\n    Columns.append(df[i].Columns)\n    SliceLocation.append(df[i].SliceLocation)\n    SpacingBetweenSlices.append(df[i].SpacingBetweenSlices)\n    StudyDate.append(df[i].StudyDate)\n#     if \"TransmitCoilName\" not in df[i]:\n#         TransmitCoilName.append(\"Missing\")\n#     elif \"TransmitCoilName\" in df[i]:\n#         TransmitCoilName.append(df[i].TransmitCoilName)","7a7da943":"frame = pd.DataFrame(np.column_stack([Rows,Columns,SliceLocation,SpacingBetweenSlices,StudyDate,]), \n                     columns=['Rows','Columns','SliceLocation','SpacingBetweenSlices','StudyDate'])","3979d336":"patient_frame = pd.DataFrame(np.column_stack([PatientAge, PatientBirthDate, PatientID,PatientIdentityRemoved,PatientName,\n                                      PatientPosition,PatientSex,PatientWeight,Modality]), \n                     columns=['PatientAge', 'PatientBirthDate', 'PatientID','PatientIdentityRemoved','PatientName',\n                              'PatientPosition','PatientSex','PatientWeight','Modality'])","fa9956a6":"patient_frame['PatientAge'] = patient_frame['PatientAge'].astype(str).astype(int)\npatient_frame['PatientWeight'] = patient_frame['PatientWeight'].astype(str).astype(float)","1e64b9d8":"# change data type\n\nframe['Rows'] = frame['Rows'].astype(str).astype(int)\nframe['Columns'] = frame['Columns'].astype(str).astype(int)\nframe['SliceLocation'] = frame['SliceLocation'].astype(str).astype(float)\nframe['SpacingBetweenSlices'] = frame['SpacingBetweenSlices'].astype(str).astype(float)\nframe['StudyDateYear']=frame['StudyDate'].astype(str).str[0:4].astype(int)","484e5b99":"patient_frame","11b93400":"frame","f1715e03":"# Defining a function to view the distribution of the categorical variables\ndef plotFrequencyTable(df, catColName):\n    '''\n    This function is used to plot the frequency table of the specified categorical variable\n    @df (dataframe) - Dataframe for which frequency table is to be plotted\n    @catColName (string) - Column name for which frequency table is to be plotted\n    '''\n    sns.countplot(x=catColName, data=df)\n    plt.title(catColName)\n    plt.xticks(rotation = 90)\n    plt.show();\n","c1771528":"plt.subplot(2,2,1)\nplotFrequencyTable(patient_frame,'PatientSex')","371b25c7":"plt.subplot(2,2,1)\nplotFrequencyTable(patient_frame,'PatientPosition')","fbe28022":"plt.subplot(2,2,1)\nplotFrequencyTable(patient_frame,'PatientIdentityRemoved')","b32e7a16":"# # ADD rows and columns for image size\n# frame['Image_Size'] = frame['Rows']*frame['Columns']\n# frame['Slice_Location']=frame.get('SliceLocation', '(missing)')","ceb9b44e":"## Reading Dataset","92311f51":"## Put it into DataFrame","9278479d":"## PLOT density function individually","0ebdd22b":"### change data type","bc2afa63":"#### create header on dataframes","3cc55319":"### find max length list in dicoms","cf32fe67":"#### image and density plot 2","822814f4":"change patient dataframe","947a68dc":"#### patient dataframe","a048409e":"### locate the list","5ef88ac5":"#### image and density plot 1"}}