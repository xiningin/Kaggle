{"cell_type":{"91bf77b8":"code","462a3f5a":"code","8b49db8d":"code","7f26317b":"code","d546c58d":"code","e6cce864":"code","e9071afe":"markdown"},"source":{"91bf77b8":"import random\n\n# randint\n\ndef roll(quantity = 3, sides = 6):\n    #loop\n    #Range\n    total = 0\n    for index in range(quantity):\n        total += random.randint(1,sides)\n        \n    return total # 3-18\n\nprint(roll()) # 3-18\n\nprint(roll(4,2)) # 4 - 8\n","462a3f5a":"def roll_many(time = 100,quantity = 3, sides = 6):\n    data = []\n    \n    for index in range(0,time):\n        data.append(roll(quantity, sides))    \n    return data\n\nresult = roll_many(3)\nprint(result)\nprint(sum(result))\n","8b49db8d":"data = {\n    3:1,\n    4:5,\n    11:23,\n    12:50,\n    18:1,\n}\nfor k in data:\n    print(k)\n    print(data[k])\n\nprint( 9 in data)\nprint( 3 in data)\ndata[9] = 1\nprint( 9 in data)\nprint( 3 in data)\n","7f26317b":"def generate(epochs = 100,quantity = 3, sides = 6):\n    data = {}\n    \n    for index in range(0,epochs):\n        result = roll(quantity, sides)\n        if result in data:\n            data[result] += 1\n        else:\n            data[result] = 1\n    return data\n\ndef generate2(epochs = 100):\n    data = {}\n    \n    for index in range(0,epochs):\n        result = roll()\n        if result not in data:\n            data[result] = 1\n        else:\n            data[result] += 1\n    return data\n\nprint(generate(5))\nprint(generate2(5))\n","d546c58d":"# Write a function called ***chart*** that takes a parameter called data that is a Dict\/Hash Returned from Generate.\n# Prints an ascii chart with hashes.\n\n#  3|## (2)\n#  4|##### (4)\n# \u2026\n# 10|############# (13)\n# 11|############## (14)\n# \u2026\n# 17|### (3)\n# 18|# (1)\n\n","e6cce864":"def chart(data, quantity = 1, sides = 6):\n    screen = 60\n    for k in range(quantity, (quantity * sides) + 1):\n        if k < 10:\n            line = \" \"\n        else:\n            line = \"\"\n        line += f\"{k}|\"\n        if k in data:\n            scale_factor = data[k] \/ (quantity * sides)\n            h = scale_factor * data[k]\n            for c in range(int(h):\n                line += \"#\"\n            line += f\" ({ data[k] })\"\n        else:\n            line += f\" (0)\"\n\n        print( line )\n\nquantity = 4\nsides = 6\nresult = generate(500, quantity, sides)\nchart(result, quantity, sides)\n","e9071afe":"Write a function named generate that takes a parameter called epochs (default to 100) \nCall roll_many once for each epoch. \nStore in a Dict\/Hash the number of times each return value from roll_many occurs.\n The keys will be 3-18 and resulting quantities should be higher in the middle near 10 and lower at the extremes of 3 and 18. \nReturn the final populated Dict\/Hash.\n{\n 3:2,\n 4:4,\n\u2026\n10:13,\n11:14,\n\u2026\n17:3,\n18:1\n}\n"}}