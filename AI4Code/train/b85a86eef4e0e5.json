{"cell_type":{"a77a814b":"code","89476bbb":"code","df4304d4":"code","02e3ef61":"code","8ca30abc":"code","f2659795":"code","0d350fb8":"code","8e06fda6":"code","a1f18f5a":"code","3c4eddd4":"code","fe337aa9":"code","25cde2bf":"code","d01506a0":"code","e63efc46":"code","09a3cbc8":"code","a554f618":"code","0b26ec26":"code","c2f4aa25":"code","a9dc4ca7":"code","29efa6e5":"code","a5be62f3":"code","fe0de47d":"code","9958315d":"code","6e94cb36":"code","f7ce34c3":"code","5c0797a4":"code","44ed188b":"code","cf6f5726":"code","9671d612":"code","63e6194b":"code","fb6c2338":"code","12b71397":"code","d39612b3":"code","edc5c606":"code","097d44cb":"code","13141a1f":"code","b8393121":"code","459c48af":"code","a0b3fedc":"code","fd4a686d":"code","d5dc7d37":"code","80a89c90":"code","f5c92ee6":"code","12020a5d":"markdown","220e2d7b":"markdown","839a8469":"markdown","71dd4c21":"markdown","24edc7bc":"markdown","ab1c576e":"markdown","fe0c2693":"markdown","49bb64de":"markdown","05a38574":"markdown","a7cc538a":"markdown","a62e3870":"markdown","7b4fcf11":"markdown","25d651ec":"markdown","c82b6beb":"markdown","e749c395":"markdown","c13a8737":"markdown","c1c7c3d5":"markdown","91fa7676":"markdown","3316b56c":"markdown","078e7295":"markdown","26734584":"markdown"},"source":{"a77a814b":"import numpy as np\na = np.array([1,2,3])\nprint(a)","89476bbb":"import numpy as np\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)","df4304d4":"import numpy as np\nnp.zeros((3,4))","02e3ef61":"import numpy as np\nnp.arange(1,10,2)","8ca30abc":"#even numbers between 10 and 20\nnp.arange(10,20,2)","f2659795":"np.linspace(5,10,10)","0d350fb8":"#even numbers between 0 to 10\nnp.linspace(0,10,6)","8e06fda6":"np.full((2,3),6)","a1f18f5a":"np.random.random((2,3))","3c4eddd4":"a = np.array([[2,3,4],[4,4,6]])\nprint(a.shape)","fe337aa9":"s = np.array([[1,2,3,4],[2,3,4,6],[6,7,8,9]])\nprint(s.shape)","25cde2bf":"a = np.array([[2,3,4],[4,4,6]])\na.shape = (3,2)\nprint(a)","d01506a0":"a = np.array([[2,3,4,4],[2,4,4,6]])\na.shape = (8,1) #Trick: x*y = Total number of elements in the array\nprint(a)","e63efc46":"a = np.arange(25)\na\n#print(a.ndim)\n#reshape our array\n#b = a.reshape(12,2) #trick: Calculate the factors of 24: 1,2,3,4,6,12,24 \n#print(b.ndim)\n","09a3cbc8":"print(a.size)","a554f618":"d = np.array([[1,2,3,4],[4,5,6,4],[6,7,8,9]])\nprint(d.size)","0b26ec26":"a = np.arange(24, dtype=float)\nprint(a.dtype)\na","c2f4aa25":"import numpy as np\nnp.sum([10,20])","a9dc4ca7":"#using a variable that is sum of a+b\na,b = 10,20\nnp.sum([a,b])","29efa6e5":"np.sum([[1,2],[5,6]],axis = 0)","a5be62f3":"np.sum([[1,2],[5,6]],axis = 1)","fe0de47d":"np.sum([[1,2],[5,6]])","9958315d":"np.subtract(10,20)","6e94cb36":"np.multiply(2,3) #Multiplying two numbers","f7ce34c3":"np.divide(10,5) #Dividing two numbers","5c0797a4":"a =np.array([2,4,6])\nb =np.array([1,2,3])\nnp.multiply(a,b)","44ed188b":"#exp,sqrt,sin,cos,log\nprint(\"Exponent : \",np.exp(a))\nprint(\"Square root : \", np.sqrt(a))\nprint(\"Sin : \", np.sin(a))\nprint(\"Cos : \", np.cos(a))\nprint(\"Log : \", np.log(a))","cf6f5726":"#Element-wise Comparison\na = [1,2,4]\nb = [2,4,4]\nc = [1,2,4]\nnp.equal(a,b)","9671d612":"#Array-wise Comparison\na = [1,2,4]\nb = [1,4,4]\nc = [1,2,4]\nnp.array_equal(a,c)","63e6194b":"a = [1,2,4]\nb = [2,4,4]\nc = [1,2,4]\nprint(\"Sum: \",np.sum(a))\nprint(\"Minimum Value: \",np.min(a))\nprint(\"Mean: \",np.mean(a))\nprint(\"Median: \",np.median(a))\nprint(\"Coorelation Coefficient: \",np.corrcoef(a))\nprint(\"Standard Deviation: \",np.std(a))\n","fb6c2338":"import numpy as np\na = np.array([[0,0,0],[1,2,3],[4,5,6],[5,6,7]])\nb = np.array([[0,1,2]])\nprint(\"First Array: \\n\",a,'\\n')\nprint(\"Second Array: \\n\",b,'\\n')\nprint(\"First Array + Second Array: \\n\",a+b,'\\n')","12b71397":"a = ['m','o','n','t','y',' ','p','y','t','h','o','n']\na[2:9]","d39612b3":"a = np.array([[1,2,3],[4,5,6],[7,8,9]])\na[0]\na[:1]\nprint(a)\na[:1,1:]","edc5c606":"a[:2,1:]","097d44cb":"a[1:,1:]","13141a1f":"a = np.array([1,2,3])\nb= np.array([4,5,6])\n#concatenation of two arrays\nnp.concatenate((a,b))","b8393121":"#Stack array row-wise: Horizontal \nnp.hstack((a,b))","459c48af":"#Stack array row-wise: Vertically\nnp.vstack((a,b))","a0b3fedc":"#Combining Column-wise\nnp.column_stack((a,b))","fd4a686d":"# Splitting Array","d5dc7d37":"x = np.arange(16).reshape(4,4)\nprint(x,\"\\n\\n\")\nprint(np.hsplit(x,2))\nprint(\"\\n\\n\", np.hsplit(x,np.array([2,3])))","80a89c90":"#Numpy vs List: Memory size\nimport numpy as np\nimport sys\n\n#define a list\nl = range(1000)\nprint(\"Size of a list: \",sys.getsizeof(1)*len(l))\n\n#define a numpy array\na = np.arange(1000)\nprint(\"Size of an array: \",a.size*a.itemsize)","f5c92ee6":"#Numpy vs List: Speed\nimport time\ndef using_List():\n    t1 = time.time()#Starting\/Initial Time\n    X = range(10000)\n    Y = range(10000)\n    z = [X[i]+Y[i] for i in range(len(X))]\n    return time.time()-t1\n\ndef using_Numpy():\n    t1 = time.time()#Starting\/Initial Time\n    a = np.arange(10000)\n    b = np.arange(10000)\n    z =a+b #more convient than a list\n    return time.time()-t1\nlist_time = using_List()\nnumpy_time = using_Numpy()\nprint(list_time,numpy_time)\nprint(\"In this example Numpy is \"+str(list_time\/numpy_time)+\" times faster than a list\")","12020a5d":"# Array Manipulation in Python","220e2d7b":"# Filling RANDOM number in an array of dimension x X y","839a8469":"# Advantages of Numpy Over a List\n","71dd4c21":"# Inspecting the array: Checking the size of the array","24edc7bc":"# Find the number of elements in an array","ab1c576e":"# Concept of Broadcasting","fe0c2693":"# Filling SAME number in an array of dimension x X y","49bb64de":"# Aggregate Function","05a38574":"# 2-Dimensional Array","a7cc538a":"# Return the dimension of the array","a62e3870":"# Arrange the numbers between x and y with an interval of z","7b4fcf11":"# Numpy Array Mathematics: Subtraction","25d651ec":"# Numpy Array Mathematics: Addition","c82b6beb":"# Initialize all the elements of x X y array to 0","e749c395":"# Find the datatype of the array","c13a8737":"# Arrange 'z' numbers between x and y","c1c7c3d5":"# Inspecting the array: Resize the Array","91fa7676":"# 1-Dimensional Array","3316b56c":"# Array Comparison","078e7295":"# Indexing and Slicing in Python","26734584":"# All other numpy Mathematics Function"}}