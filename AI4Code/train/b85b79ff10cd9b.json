{"cell_type":{"64d4cbba":"code","05e37c84":"code","71e0ba68":"code","acdcf6de":"code","e1820d66":"code","457e2eab":"code","493a86f4":"code","f39bd8cb":"code","ef1bf141":"code","d7ba7e29":"code","ace01099":"code","400f567b":"code","55785a1a":"code","ed265402":"code","c78ec940":"code","aaecddec":"code","7208814a":"code","57dfd412":"code","394e6650":"code","e97d5c6b":"code","be46e296":"code","9c211087":"code","5dfcb115":"code","90a2e3cc":"code","a24a0e16":"code","9dd66bb6":"code","34d534ee":"code","388d8fae":"code","b70850b5":"code","5a6e98a2":"code","b8c6950f":"code","54375042":"code","70602cc0":"code","f310a8f8":"code","fd3ffaaf":"code","b2eed6d4":"code","16fd0ed8":"code","c7cf9a4d":"code","d9d771af":"code","9961e3c3":"code","23ee5d99":"code","75588119":"code","5d7c4f39":"code","b71e75ae":"code","0ee4e3b2":"code","b208463e":"code","71dc579c":"code","617cb3c1":"code","912ee7f0":"code","ea747427":"code","bac32a05":"code","71cd5cbd":"code","8b123c9a":"code","1776b653":"code","25829fbf":"code","dbac2bba":"code","b1f72274":"code","eb260df5":"code","d28d8517":"code","ce0fed11":"code","580851e7":"code","f74fcfe7":"code","0ca31714":"code","6d86cf78":"markdown"},"source":{"64d4cbba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05e37c84":"data=pd.read_csv('\/kaggle\/input\/cusersmarildownloadswinecsv\/\/wine.csv',sep=\";\")","71e0ba68":"data.head()","acdcf6de":"data.info()","e1820d66":"data['alcohol'] = pd.to_numeric(data['alcohol'],errors='coerce')","457e2eab":"data.describe()","493a86f4":"data['alcohol'].fillna(data['alcohol'].mean(), inplace = True)","f39bd8cb":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ef1bf141":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"fixed_acidity\",palette='rocket' ,ax=ax, data=data)","d7ba7e29":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"volatile_acidity\",palette='rocket' , ax=ax, data=data)","ace01099":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"citric_acid\",palette='rocket' , ax=ax, data=data)","400f567b":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"residual_sugar\",palette='rocket' , ax=ax, data=data)","55785a1a":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"chlorides\",palette='rocket' , ax=ax, data=data)","ed265402":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"free_sulfur_dioxide\",palette='rocket' , ax=ax, data=data)","c78ec940":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"total_sulfur_dioxide\",palette='rocket' , ax=ax, data=data)","aaecddec":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"pH\",palette='rocket' , ax=ax, data=data)","7208814a":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"sulphates\",palette='rocket' , ax=ax, data=data)","57dfd412":"fig, ax = plt.subplots(figsize=(10,8))\nsns.boxplot(x = \"quality\", y = \"alcohol\",palette='rocket' , ax=ax, data=data)","394e6650":"fig, ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = \"volatile_acidity\", y = \"fixed_acidity\",palette='rocket' , ax=ax, data=data)","e97d5c6b":"fig, ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = \"citric_acid\", y = \"residual_sugar\",palette='rocket' , ax=ax, data=data)","be46e296":"fig, ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = \"free_sulfur_dioxide\", y = \"total_sulfur_dioxide\",palette='rocket' , ax=ax, data=data)","9c211087":"fig, ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = \"chlorides\", y = \"sulphates\",palette='rocket' , ax=ax, data=data)","5dfcb115":"fig, ax = plt.subplots(figsize=(10,8))\nsns.scatterplot(x = \"alcohol\", y = \"pH\",palette='red' , ax=ax, data=data)","90a2e3cc":"plt.subplots(figsize=(16,12))\nax = plt.axes()\nax.set_title(\"Wine Characteristic Correlation Heatmap\")\ncorr = data.corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,\n           cmap=\"Reds\")\nplt.show()","a24a0e16":"df=data","9dd66bb6":"lower_limit = df[\"free_sulfur_dioxide\"].mean() - 3*df[\"free_sulfur_dioxide\"].std()\nupper_limit = df[\"free_sulfur_dioxide\"].mean() + 3*df[\"free_sulfur_dioxide\"].std()","34d534ee":"df2 = df[(df[\"free_sulfur_dioxide\"] > lower_limit) & (df[\"free_sulfur_dioxide\"] < upper_limit)]","388d8fae":"lower_limit = df2['total_sulfur_dioxide'].mean() - 3*df2['total_sulfur_dioxide'].std()\nupper_limit = df2['total_sulfur_dioxide'].mean() + 3*df2['total_sulfur_dioxide'].std()","b70850b5":"df3 = df2[(df2['total_sulfur_dioxide'] > lower_limit) & (df2['total_sulfur_dioxide'] < upper_limit)]","5a6e98a2":"lower_limit = df3['residual_sugar'].mean() - 3*df3['residual_sugar'].std()\nupper_limit = df3['residual_sugar'].mean() + 3*df3['residual_sugar'].std()","b8c6950f":"df4 = df3[(df3['residual_sugar'] > lower_limit) & (df3['residual_sugar'] < upper_limit)]","54375042":"lower_limit = df4[\"chlorides\"].mean() - 3*df4[\"chlorides\"].std()\nupper_limit = df4[\"chlorides\"].mean() + 3*df4[\"chlorides\"].std()","70602cc0":"df5 = df4[(df4['chlorides'] > lower_limit) & (df4['chlorides'] < upper_limit)]","f310a8f8":"lower_limit = df5[\"sulphates\"].mean() - 3*df5[\"sulphates\"].std()\nupper_limit = df5[\"sulphates\"].mean() + 3*df5[\"sulphates\"].std()","fd3ffaaf":"df6 = df5[(df5['sulphates'] > lower_limit) & (df5['sulphates'] < upper_limit)]","b2eed6d4":"lower_limit = df6[\"volatile_acidity\"].mean() - 3*df6[\"volatile_acidity\"].std()\nupper_limit = df6[\"volatile_acidity\"].mean() + 3*df6[\"volatile_acidity\"].std()","16fd0ed8":"df7 = df6[(df6['volatile_acidity'] > lower_limit) & (df6['volatile_acidity'] < upper_limit)]","c7cf9a4d":"lower_limit = df7[\"fixed_acidity\"].mean() - 3*df7[\"fixed_acidity\"].std()\nupper_limit = df7[\"fixed_acidity\"].mean() + 3*df7[\"fixed_acidity\"].std()","d9d771af":"df8 = df7[(df7['fixed_acidity'] > lower_limit) & (df7['fixed_acidity'] < upper_limit)]","9961e3c3":"lower_limit = df8[\"citric_acid\"].mean() - 3*df8[\"citric_acid\"].std()\nupper_limit = df8[\"citric_acid\"].mean() + 3*df8[\"citric_acid\"].std()","23ee5d99":"df9 = df8[(df8['citric_acid'] > lower_limit) & (df8['citric_acid'] < upper_limit)]","75588119":"lower_limit = df9[\"pH\"].mean() - 3*df9[\"pH\"].std()\nupper_limit = df9[\"pH\"].mean() + 3*df9[\"pH\"].std()","5d7c4f39":"df10 = df9[(df9['pH'] > lower_limit) & (df9['pH'] < upper_limit)]","b71e75ae":"quality_mapping = { 3 : \"Low\",4 : \"Low\",5: \"Medium\",6 : \"Medium\",7: \"Medium\",8 : \"High\",9 : \"High\"}\ndf10[\"quality\"] =  df10[\"quality\"].map(quality_mapping)","0ee4e3b2":"quality_code = {\"Low\" : 0,\"Medium\": 1,\"High\" : 2}\ndf10[\"quality\"] =  df10[\"quality\"].map(quality_code)","b208463e":"train=df10","71dc579c":"from sklearn.model_selection import train_test_split","617cb3c1":"X=train.drop(['quality'],axis=1)\ny=train['quality']","912ee7f0":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)\nprint(X.shape)\n","ea747427":"from sklearn.decomposition import PCA\npca = PCA()\nx_pca = pca.fit_transform(X)","bac32a05":"plt.figure(figsize=(10,10))\nplt.plot(np.cumsum(pca.explained_variance_ratio_), 'ro-')\nplt.grid()","71cd5cbd":"pca_new = PCA(n_components=10)\nx_new = pca_new.fit_transform(X)","8b123c9a":"print(x_new.shape)\nprint(y.shape)","1776b653":"X_train, X_test, y_train, y_test = train_test_split(x_new, y, test_size = 0.2,random_state=1)","25829fbf":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC","dbac2bba":"model_params  = {\n    \"svm\" : {\n        \"model\":SVC(gamma=\"auto\"),\n        \"params\":{\n            'C' : [1,10,20],\n            'kernel':[\"rbf\"]\n        }\n    },\n    \n    \"decision_tree\":{\n        \"model\": DecisionTreeClassifier(),\n        \"params\":{\n            'criterion':[\"entropy\",\"gini\"],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \n    \"random_forest\":{\n        \"model\": RandomForestClassifier(),\n        \"params\":{\n            \"n_estimators\":[1,5,10],\n            \"max_depth\":[5,8,9,10]\n        }\n    },\n    \"naive_bayes\":{\n        \"model\": GaussianNB(),\n        \"params\":{}\n    },\n    \n    'logistic_regression' : {\n        'model' : LogisticRegression(solver='liblinear',multi_class = 'auto'),\n        'params': {\n            \"C\" : [1,5,10]\n        }\n    }\n    \n}","b1f72274":"score=[]\nfor model_name,mp in model_params.items():\n    clf = GridSearchCV(mp[\"model\"],mp[\"params\"],cv=4,return_train_score=False)\n    clf.fit(X_train,y_train)\n    score.append({\n        \"Model\" : model_name,\n        \"Best_Score\": clf.best_score_,\n        \"Best_Params\": clf.best_params_\n    })","eb260df5":"result = pd.DataFrame(score,columns=[\"Model\",\"Best_Score\",\"Best_Params\"])","d28d8517":"result","ce0fed11":"from sklearn.model_selection import cross_val_score\nclf_rf = RandomForestClassifier(max_depth= 9, n_estimators=5)\nscores = cross_val_score(clf_rf,X_train,y_train,cv=8,scoring=\"accuracy\")","580851e7":"scores.mean()*100","f74fcfe7":"clf_rf.fit(X_train,y_train)\ny_pred = clf_rf.predict(X_test)","0ca31714":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test,y_pred)\nprint(acc*100)","6d86cf78":"<img src=\"https:\/\/c1.staticflickr.com\/5\/4124\/5096953439_5a41df8055_b.jpg\"  align=center>"}}