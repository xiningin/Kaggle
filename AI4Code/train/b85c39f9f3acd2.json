{"cell_type":{"8ac83f95":"code","cd871923":"code","ade9a45d":"code","ba926e80":"code","4fbaffb6":"code","4bb8ae50":"code","37b0d159":"code","3e8013b6":"code","f321dafa":"markdown","5cb0d736":"markdown","984f0489":"markdown","26f096ef":"markdown","d50ae28f":"markdown","c69d5827":"markdown","277cf67d":"markdown"},"source":{"8ac83f95":"%%html\n<style>\n  table {margin-left: 0 !important;}\n<\/style>","cd871923":"import numpy as np\nimport pandas as pd \nimport scipy.optimize as opt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom datetime import timedelta\nimport scipy.stats as sps\n\ncve = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/cve.csv', header=0, index_col=0)\nproducts = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/products.csv', header=0, index_col=0)\nvendors = pd.read_csv('..\/input\/cve-common-vulnerabilities-and-exposures\/vendors.csv', header=0, index_col=0)\n\ncve.pub_date = pd.to_datetime(cve.pub_date)","ade9a45d":"X = cve.pub_date.dt.to_period('Q').sort_index().value_counts()\nX.index = X.index.to_timestamp()\nX = X.sort_index()\nX[X.index] = np.cumsum(X.values)\n\nrolling = cve.pub_date.dt.to_period('M').sort_index().value_counts()\nrolling.index = rolling.index.to_timestamp()\nrolling = rolling.sort_index()\nrolling[rolling.index] = np.cumsum(rolling.values)\nrolling = rolling.rolling(12, axis=0).sum().pct_change(axis=0)\n\n# 2 Plots\n# Left: cumulative, right rolling avg. growth rate\nfig = make_subplots(rows=1,cols=2)\n\n# Trace 1: Grey bars\nfig.add_trace(\n    go.Bar(\n        x=X.index[:-20],\n        y=X.values[:-20],\n        marker_color=\"#bbbbbb\",\n    ),\n    row=1,\n    col=1\n)\n\n# Trace 2: Blue (emph) bars\nfig.add_trace(\n    go.Bar(\n        x=X.index[-20:],\n        y=X.values[-20:],\n        marker_color=\"#2aa198\"\n    ), \n    row=1,\n    col=1\n)\n\n# Trace 3: Growth rate\nfig.add_trace(\n    go.Scatter(\n        x=rolling.index,\n        y=rolling.values,\n        marker_color=\"#bbbbbb\",\n        mode=\"lines\"\n    ),\n    row=1,\n    col=2\n)\n\nfig.update_layout(\n    title=dict(\n        text=\"Threat Proliferation\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False\n    ),\n    yaxis=dict(\n        showgrid=False\n    ),\n    annotations = [\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.2,\n            showarrow=False,\n            text ='The number of known threats (left) continues to grow, but ' + \\\n            'growth (right), measured as a perent change <br>on a 12-month rolling average, has leveled.',\n            valign='top',\n            align='left'\n        ),\n        dict(\n            ax=-80,\n            ay=-100,\n            x=X.index[-20],\n            y=40000,\n            text='60% of threats occur after 2015'\n        )\n    ],\n    showlegend=False,\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    bargap=0\n)\n\nfig.show()","ba926e80":"fig = go.Figure()\nX = cve.cvss.sort_values().astype('int').value_counts().sort_index()[1:]\n\n# Three traces\nfig.add_trace(\n    go.Bar(\n        x=X.index.map(lambda x: \"{}-{}\".format(x-1,x)),\n        y=X.values\/np.sum(X.values)*100,\n        marker_color=['#bbbbbb', '#bbbbbb', '#bbbbbb', '#dc322f', '#dc322f', '#dc322f', '#dc322f', '#bbbbbb', '#bbbbbb', '#bbbbbb'],\n        text=np.vectorize(lambda x: str(x) + \"%\")(np.round((X.values\/np.sum(X.values) * 100),1)),\n        textposition='outside'\n))\n\nfig.update_layout(\n    title=dict(\n        text=\"Threat Severity Distribution\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.2,\n            showarrow=False,\n            text =\"CVSS scores reflect a threat's severity. Over 75 percent of scores fall in FIRSTs Medium (4.0-6.9) threat category<br>\" +\n            \"with a thicker tail toward the higher end of the spectrum.\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    bargap=0\n)\n\nfig.show()","4fbaffb6":"# Authentication access\n\n# multiple = pd.get_dummies(cve.access_authentication.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().MULTIPLE\nsingle = pd.get_dummies(cve.access_authentication.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().SINGLE\nnone = pd.get_dummies(cve.access_authentication.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().NONE\n\nlow = pd.get_dummies(cve.access_complexity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().LOW\nmed = pd.get_dummies(cve.access_complexity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().MEDIUM\nhigh = pd.get_dummies(cve.access_complexity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().HIGH\n\nnet = pd.get_dummies(cve.access_vector.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().NETWORK\nloc = pd.get_dummies(cve.access_vector.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().LOCAL\nadj = pd.get_dummies(cve.access_vector.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().ADJACENT_NETWORK\n\npart = pd.get_dummies(cve.impact_availability.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().PARTIAL\nno_ia = pd.get_dummies(cve.impact_availability.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().NONE\ncomp = pd.get_dummies(cve.impact_availability.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().COMPLETE\n\npart_ic = pd.get_dummies(cve.impact_confidentiality.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().PARTIAL\nno_ic = pd.get_dummies(cve.impact_confidentiality.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().NONE\ncomp_ic = pd.get_dummies(cve.impact_confidentiality.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().COMPLETE\n\npart_ii = pd.get_dummies(cve.impact_integrity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().PARTIAL\nno_ii = pd.get_dummies(cve.impact_integrity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().NONE\ncomp_ii = pd.get_dummies(cve.impact_integrity.dropna()).groupby(cve.pub_date.dt.to_period('Y')).mean().COMPLETE\n\ntraces = [\n    [single, none],\n    [low, med, high],\n    [net, loc, adj],\n    [part, no_ia, comp],\n    [part_ic, no_ic, comp_ic],\n    [part_ii, no_ii, comp_ii],\n]\n\ntexts = [\n    ['Single', 'None'],\n    ['Low', 'Medium', 'High'],\n    ['Network', 'Local', 'Adj. Network'],\n    ['Partial', 'None', 'Complete'],\n    ['Partial', 'None', 'Complete'],\n    ['Partial', 'None', 'Complete'],\n]\n\ncolors = ['#2aa198', '#268bd2', '#dc322f']\n\nfig = make_subplots(\n    rows=3, \n    cols=2, \n    subplot_titles=[\n        'Authentication required',\n        'Impact on availability',\n        'Access required',\n        'Impact on confidentiality',\n        'Attack vector',\n        'Impact on integrity'\n])\n\nfor i, (t, txt) in enumerate(zip(traces, texts)):\n    for ndx, trace in enumerate(t):\n        fig.add_trace(\n            go.Scatter(\n                x = [trace.index.to_timestamp()[-1]],\n                y = [trace[-1]],\n                name = \"\",\n                text = \" {}% {}\".format(np.round(trace[-1] * 100, 1), txt[ndx]),\n                textposition='middle right',\n                mode='text',\n                cliponaxis=False\n            ),\n            row=i%3 + 1,\n            col=i\/\/3 + 1,\n        )\n\n        fig.add_trace(\n            go.Scatter(\n                x = trace.index.to_timestamp(),\n                y = trace,\n                name = \"\",\n                line=dict(color=colors[ndx])\n            ),\n            row=i%3 + 1,\n            col=i\/\/3 + 1\n        )\n\n        fig.add_trace(\n            go.Scatter(\n                x = [trace.index.to_timestamp()[0]],\n                y = [trace[0]],\n                name = \"\",\n                text = \"{}% \".format(np.round(trace[0] * 100), 1),\n                textposition='middle left',\n                mode='text',\n                cliponaxis=False\n            ),\n            row=i%3 + 1,\n            col=i\/\/3 + 1\n        )\n\nfig.update_layout(\n    showlegend=False,\n    height=1200,\n    title=dict(\n        text=\"Access and impact\",\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=12,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis2=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis3=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis4=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis5=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    yaxis6=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)'\n)\n\nfig.show()","4bb8ae50":"fig = go.Figure()\nX = pd.get_dummies(\n        cve.cwe_name[cve.cwe_name.isin(cve.cwe_name.value_counts()[:10].index)]\n    ).join(\n        cve.pub_date\n    ).groupby(\n        cve.pub_date.dt.to_period(\"D\")\n).sum()\n\ncolors = ['#ababab', '#cb4b16', '#268bd2', '#ebebeb', '#2aa198', '#dc322f', '#bbbbbb', '#9b9b9b', '#cbcbcb', '#dbdbdb']\nX.index = X.index.to_timestamp()\nX = X.divide(X.sum(axis=1), axis=0)\n\n# One trace for each column\nfor ndx in range(X.shape[1]):\n    data = X.iloc[:,ndx].rolling(365,axis=0).mean() \n    fig.add_trace(go.Scatter(\n        x=data.index[365:],\n        y=data.values[365:], \n        name=X.columns[ndx] if \"'\" not in X.columns[ndx] else X.columns[ndx].split(\"'\")[1],\n        marker_color=colors[ndx]\n    ))\n\nfig.update_layout(\n    title=dict(\n        text=\"How threats have changed over time\",\n        xref=\"paper\",\n        x=0., y=1.\n    ),\n    height=1100,\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False,\n    ),\n    yaxis=dict(\n        showgrid=False,\n        showticklabels=False\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.075,\n            showarrow=False,\n            text =\"These threats are the 10 most common, but their relative prominence is shifting,\" +\n            \"injection (both code and SQL)<br> is becoming less common while cross-site scripting and input validation are on the rise. \" +\n            \"Values are shown as <br> a 365-entry rolling average of relative frequencies.\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    legend=dict(x=0., y=1.)\n)\n\nfig.show()","37b0d159":"X = products.vulnerable_product.value_counts()[25:0:-1]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 2 else x.upper(), x.split(\"_\"))))(X.index),\n    x=X.values,\n    orientation='h',\n    marker_color= [\"#268bd2\"] * 3 + [\"#bbbbbb\"] + [\"#268bd2\"] * 5 + [\"#859900\"] + [\"#268bd2\"] + [\"#859900\"] + [\"#268bd2\"] * 2 + [\"#bbbbbb\"] * 2 + [\"#268bd2\"] * 2 + [\"#859900\"] * 2 + [\"#268bd2\"] * 5\n))\n\nfig.update_layout(\n    height=800,\n    title=dict(\n        xref='paper',\n        text=\"Affected Products\",\n        x=0, y=.965\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        tickmode=\"linear\"\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.075,\n            showarrow=False,\n            text=\"Most of the top 25 affected products are operating systems (blue) or web browsers (green)\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    bargap=.2\n)\n\nfig.show()","3e8013b6":"X = vendors.vendor.value_counts()[25:0:-1]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=np.vectorize(lambda x: \" \".join(map(lambda x: x.title() if len(x) > 3 else x.upper(), x.split(\"_\"))))(X.index),\n    x=X.values,\n    orientation='h',\n    marker_color= \"#bbbbbb\"\n))\n\nfig.update_layout(\n    height=800,\n    title=dict(\n        xref='paper',\n        text=\"Affected Vendors\",\n        x=0, y=.965\n    ),\n    font=dict(\n        family=\"Arial\",\n        size=14,\n        color=\"#586e75\"\n    ),\n    xaxis=dict(\n        showgrid=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        tickmode=\"linear\"\n    ),\n    annotations=[\n        dict(\n            xref='paper',\n            yref='paper',\n            x=0., y=1.075,\n            showarrow=False,\n            text=\"40% of the products affected by any vulnerability are distributed by these top 25 vendors\",\n            valign='top',\n            align='left'\n        ),\n    ],\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    bargap=.2\n)\n\nfig.show()","f321dafa":"## 1.2 Severity","5cb0d736":"| attribute | dtype  | description \n| :-- | :-- | :--\n| mod_date | datetime | The date the entry was last modified \n| pub_date | datetime | The date the entry was published\n| cvss | float | Common Vulnerability Scoring System (CVSS) score, a measure of the severity of a vulnerability \n| cwe_code | categorical | Common Weakness Enumeration (CWE) code, identifying the type of weakness\n| cwe_name | categorical | The name associated with the CWE code\n| summary | str | A text summary of the vulnerability\n| access_authentication | categorical | {NONE, SINGLE, MULTIPLE}\n| access_complexity | categorical | {LOW, MEDIUM, HIGH}\n| access_vector | categorical | {LOCAL, NETWORK, ADJACENT NETWORK}\n| impact_availability | categorical | {NONE, PARTIAL, COMPLETE}\n| impact_confidentiality | categorical | {NONE, PARTIAL, COMPLETE}\n| impact_integrity | categorical | {NONE, PARTIAL, COMPLETE}","984f0489":"The Common Vulnerability Scoring System (CVSS) is an open framework for describing the characteristics\nand severity of computer security exploits developed and maintained by FIRST. These scores consider\nexploitability and impact alongside temporal and environmental factors. Scores range from 0 to 10.\n\n![CVSS Subscore Components](https:\/\/i.imgur.com\/IfyiFzc.png)","26f096ef":"## 1.4 Products and Vendors","d50ae28f":"## 1.3 Exploit Types","c69d5827":"# 0. Overview\n\nCommon Vulnerabilities and Exposures (CVE) is a list of computer security threats provided by the U.S. Department of Homeland Security and maintained by the MITRE corporation. \n\nPer MITRE's terminology documentation, CVE distinguishes between vulnerabilities where\n\n> A \"vulnerability\" is a weakness in the computational logic (e.g., code) found in software and some hardware components (e.g., firmware) that, when exploited, results in a negative impact to confidentiality, integrity, OR availability. Mitigation of the vulnerabilities in this context typically involves coding changes, but could also include specification changes or even specification deprecations (e.g., removal of affected protocols or functionality in their entirety).\n\nand exposures where\n\n> An \"exposure\" is a system configuration issue or a mistake in software that allows access to information or capabilities that can be used by a hacker as a stepping-stone into a system or network.\n\nCVE considers a configuration issue or a mistake an exposure if it does not directly allow compromise but could be an important component of a successful attack, and is a violation of a reasonable security policy.","277cf67d":"# 1. Features\n## 1.1 Publication Date"}}