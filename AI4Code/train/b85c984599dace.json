{"cell_type":{"0ecf2bfe":"code","9928ad82":"code","89a9ec51":"code","785dcebd":"code","5b562b27":"code","a7722836":"code","b518ff44":"code","91b456e8":"code","380029b5":"code","698c8e17":"code","18083da3":"code","81d6e21f":"code","cfa42571":"code","f110338b":"code","fe90580f":"code","2813756e":"code","25cf9965":"code","017171fa":"code","87c638ed":"code","1b1a2935":"code","067c8f71":"code","8a16f6c9":"code","2c99fb66":"code","7aa61fe7":"code","512719b9":"code","473e4deb":"code","7be75e8b":"code","2c5d0126":"code","b75cdaf6":"code","5911fda8":"code","75500869":"code","b45f7893":"code","d5a944e2":"code","5ce7ed5e":"code","12c56f29":"code","401dd52f":"code","27cc9f41":"code","d929a576":"code","cd5433e7":"code","a0ed9392":"code","c0840d90":"code","95c6ea29":"markdown","42c84c2f":"markdown","02797c90":"markdown","2acfe8ca":"markdown","432c393d":"markdown","a0b7c6e5":"markdown","ad158d62":"markdown","23f94c46":"markdown","1efc1692":"markdown","eaa7ff57":"markdown"},"source":{"0ecf2bfe":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","9928ad82":"\n# Necessary\/extra dependencies. \nimport os\nimport gc\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom shutil import copyfile\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n#! conda install -c conda-forge gdcm -y\n#! conda install pylibjpeg pylibjpeg-libjpeg pylibjpeg-openjpeg\n#! conda install pillow\n#customize iPython writefile so we can write variables\nfrom IPython.core.magic import register_line_cell_magic\n\n\nimport pylab\n#import pillow\n#import gdcm\n#pydicom\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom fastai.imports import *\n#from fastai.medical.imaging import *\nfrom PIL import Image\n\n@register_line_cell_magic\ndef writetemplate(line, cell):\n    with open(line, 'w') as f:\n        f.write(cell.format(**globals()))\n        \nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","89a9ec51":"import torch\nprint(f\"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})\")","785dcebd":"# Read the submisison file\nsub_df = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/sample_submission.csv')\nprint(len(sub_df))\nsub_df.head()","5b562b27":"study_df = sub_df.loc[sub_df.id.str.contains('_study')]\nlen(study_df)","a7722836":"study_df = sub_df.loc[sub_df.id.str.contains('_study')]\nlen(study_df)","b518ff44":"image_df = sub_df.loc[sub_df.id.str.contains('_image')]\nlen(image_df)","91b456e8":"# Ref: https:\/\/www.kaggle.com\/xhlulu\/siim-covid-19-convert-to-jpg-256px\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data\n\ndef resize_xray(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","380029b5":"\nIMG_SIZE = 256\nTEST_PATH = f'\/kaggle\/tmp\/test\/'\n\ndef prepare_test_images():\n    image_id = []\n    dim0 = []\n    dim1 = []\n\n    os.makedirs(TEST_PATH, exist_ok=True)\n\n    for dirname, _, filenames in tqdm(os.walk(f'..\/input\/siim-covid19-detection\/test')):\n        for file in filenames:\n            # set keep_ratio=True to have original aspect ratio\n            xray = read_xray(os.path.join(dirname, file))\n            im = resize_xray(xray, size=IMG_SIZE)  \n            im.save(os.path.join(TEST_PATH, file.replace('dcm', 'png')))\n\n            image_id.append(file.replace('.dcm', ''))\n            dim0.append(xray.shape[0])\n            dim1.append(xray.shape[1])\n            \n    return image_id, dim0, dim1","698c8e17":"image_ids, dim0, dim1 = prepare_test_images()\nprint(f'Number of test images: {len(os.listdir(TEST_PATH))}')","18083da3":"!ls '..\/input\/yolo-model-train-weight\/weights'","81d6e21f":"weights_dir = '..\/input\/yolo-model-train-weight\/weights\/best.pt'","cfa42571":"# meta_df=pd.read_csv('\/kaggle\/input\/siim-covid19-resized-to-256px-jpg\/meta.csv')\n\n","f110338b":"meta_df = pd.DataFrame.from_dict({'image_id': image_ids, 'dim0': dim0, 'dim1': dim1})\n\n# Associate image-level id with study-level ids.\n# Note that a study-level might have more than one image-level ids.\nfor study_dir in os.listdir('..\/input\/siim-covid19-detection\/test'):\n    for series in os.listdir(f'..\/input\/siim-covid19-detection\/test\/{study_dir}'):\n        for image in os.listdir(f'..\/input\/siim-covid19-detection\/test\/{study_dir}\/{series}\/'):\n            image_id = image[:-4]\n            meta_df.loc[meta_df['image_id'] == image_id, 'study_id'] = study_dir\n        \nmeta_df.head()\n","fe90580f":"#meta_df_test=meta_df.loc[meta_df['split']=='test']\nmeta_df_test=meta_df.copy()","2813756e":"#del meta_df_test['split']","25cf9965":"meta_df_test","017171fa":"# YOLO_MODEL_PATH = '..\/input\/yolo-models\/yolov5s-e-100-img-512.pt'\n#YOLO_MODEL_PATHS = 'kaggle-siim-covid19\/exp\/weights\/best.pt'\n# TEST_PATH = '\/kaggle\/input\/siim-covid19-resized-to-256px-jpg\/test\/'\nTEST_PATH = f'\/kaggle\/tmp\/test\/'\n!python ..\/input\/yolo-v5\/detect.py --weights {weights_dir} \\\n                  --source {TEST_PATH} \\\n                  --img {IMG_SIZE} \\\n                  --conf 0.28 \\\n                  --iou-thres 0.5 \\\n                  --max-det 3 \\\n                  --save-txt \\\n                  --save-conf \\\n                  --exist-ok","87c638ed":"os.listdir('runs\/detect\/')","1b1a2935":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport numpy as np\nimport random\nimport cv2\nfrom glob import glob\nfrom tqdm import tqdm\n\nfiles = glob('runs\/detect\/exp\/*')\nfor _ in range(3):\n    row = 4\n    col = 3\n    grid_files = random.sample(files, row*col)\n    images     = []\n    for image_path in tqdm(grid_files):\n        img= cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)\n        images.append(img)\n\n    fig = plt.figure(figsize=(col*5, row*5))\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(col, row),  # creates 2x2 grid of axes\n                     axes_pad=0.05,  # pad between axes in inch.\n                     )\n\n    for ax, im in zip(grid, images):\n        # Iterating over the grid returns the Axes.\n        ax.imshow(im)\n        ax.set_xticks([])\n        ax.set_yticks([])\n    plt.show()","067c8f71":"PRED_PATH ='runs\/detect\/exp\/labels'\nprediction_files = os.listdir(PRED_PATH)\nprint(f'Number of opacity predicted by YOLOv5: {len(prediction_files)}')","8a16f6c9":"import tensorflow as tf\nimport gc\n\n","2c99fb66":"AUTOTUNE = tf.data.AUTOTUNE\n\nCONFIG = dict (\n    seed = 42,\n    num_labels = 4,\n    num_folds = 5,\n    img_width = 256,\n    img_height = 256,\n    batch_size = 8,\n    architecture = \"CNN\",\n    infra = \"GCP\",\n)","7aa61fe7":"# TEST_PATH = '\/kaggle\/input\/siim-covid19-resized-to-256px-jpg\/test\/'","512719b9":"image_df['path'] = image_df.apply(lambda row: TEST_PATH+row.id.split('_')[0]+'.png', axis=1)\nimage_df = image_df.reset_index(drop=True)","473e4deb":"image_df.head()","7be75e8b":"study_df = sub_df.loc[sub_df.id.str.contains('_study')]\nlen(study_df)","2c5d0126":"@tf.function\ndef decode_image(image):\n    # convert the compressed string to a 3D uint8 tensor\n    image = tf.image.decode_png(image, channels=3)\n    # Normalize image\n    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n    return image\n\n@tf.function\ndef load_image(df_dict):\n    # Load image\n    image = tf.io.read_file(df_dict['path'])\n    image = decode_image(image)\n    \n    # Resize image\n    image = tf.image.resize(image, (CONFIG['img_height'], CONFIG['img_width']))\n    \n    return image\n\ntestloader = tf.data.Dataset.from_tensor_slices(dict(image_df))\n\ntestloader = (\n    testloader\n    .shuffle(1024)\n    .map(load_image, num_parallel_calls=AUTOTUNE)\n    .batch(CONFIG['batch_size'])\n    .prefetch(AUTOTUNE)\n)","b75cdaf6":"# Load Model\nSTUDY_MODEL_PATHS = '\/kaggle\/input\/studylevelmodel\/SIIM-Study-Level-model\/'\nstudy_models = os.listdir(STUDY_MODEL_PATHS)\nstudy_models","5911fda8":"# ! pip install -q efficientnet\n\n\n!pip install ..\/input\/keras-efficientnet-whl\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/keras-efficientnet-whl\/efficientnet-1.1.1-py3-none-any.whl\nfrom efficientnet.tfkeras import EfficientNetB5","75500869":"predictions = []\nfor model in study_models:\n    # Load model\n    tf.keras.backend.clear_session()\n    model = tf.keras.models.load_model(STUDY_MODEL_PATHS+model)\n    # Prediction\n    tmp = []\n    for img_batch in tqdm(testloader):\n        preds = model.predict(img_batch)\n        tmp.extend(preds)\n        \n    predictions.append(tmp)\n    \n    del model\n    _ = gc.collect()\n    \npredictions = np.mean(predictions, axis=0)","b45f7893":"class_labels = ['0', '1', '2', '3']\nimage_df.loc[:, class_labels] = predictions\nimage_df.head()","d5a944e2":"class_to_id = { \n    'negative': 0,\n    'typical': 1,\n    'indeterminate': 2,\n    'atypical': 3}\nid_to_class  = {v:k for k, v in class_to_id.items()}\n\ndef get_study_prediction_string(preds, threshold=0):\n    string = ''\n    for idx in range(4):\n        conf =  preds[idx]\n        if conf>threshold:\n            string+=f'{id_to_class[idx]} {conf:0.2f} 0 0 1 1 '\n    string = string.strip()\n    return string","5ce7ed5e":"image_df.head()","12c56f29":"meta_df_test.head()","401dd52f":"study_ids = []\npred_strings = []\n\nfor study_id, df in meta_df_test.groupby('study_id'):\n    # accumulate preds for diff images belonging to same study_id\n    tmp_pred = []\n    \n    df = df.reset_index(drop=True)\n    for image_id in df.image_id.values:\n        preds = image_df.loc[image_df.id == image_id+'_image'].values[0]\n        tmp_pred.append(preds[3:])\n    \n    preds = np.mean(tmp_pred, axis=0)\n    pred_string = get_study_prediction_string(preds)\n    pred_strings.append(pred_string)\n    \n    study_ids.append(f'{study_id}_study')\n    \nstudy_df = pd.DataFrame.from_dict({'id': study_ids, 'PredictionString': pred_strings})\nstudy_df.head()\n","27cc9f41":"# The submisison requires xmin, ymin, xmax, ymax format. \n# YOLOv5 returns x_center, y_center, width, height\ndef correct_bbox_format(bboxes):\n    correct_bboxes = []\n    for b in bboxes:\n        xc, yc = int(np.round(b[0]*IMG_SIZE)), int(np.round(b[1]*IMG_SIZE))\n        w, h = int(np.round(b[2]*IMG_SIZE)), int(np.round(b[3]*IMG_SIZE))\n\n        xmin = xc - int(np.round(w\/2))\n        ymin = yc - int(np.round(h\/2))\n        xmax = xc + int(np.round(w\/2))\n        ymax = yc + int(np.round(h\/2))\n        \n        correct_bboxes.append([xmin, ymin, xmax, ymax])\n        \n    return correct_bboxes\n\ndef scale_bboxes_to_original(row, bboxes):\n    # Get scaling factor\n    scale_x = IMG_SIZE\/row.dim1\n    scale_y = IMG_SIZE\/row.dim0\n    \n    scaled_bboxes = []\n    for bbox in bboxes:\n        xmin, ymin, xmax, ymax = bbox\n        \n        xmin = int(np.round(xmin\/scale_x))\n        ymin = int(np.round(ymin\/scale_y))\n        xmax = int(np.round(xmax\/scale_x))\n        ymax = int(np.round(ymax\/scale_y))\n        \n        scaled_bboxes.append([xmin, ymin, xmax, ymax])\n        \n    return scaled_bboxes\n\n# Read the txt file generated by YOLOv5 during inference and extract \n# confidence and bounding box coordinates.\ndef get_conf_bboxes(file_path):\n    confidence = []\n    bboxes = []\n    with open(file_path, 'r') as file:\n        for line in file:\n            preds = line.strip('\\n').split(' ')\n            preds = list(map(float, preds))\n            confidence.append(preds[-1])\n            bboxes.append(preds[1:-1])\n    return confidence, bboxes","d929a576":"image_pred_strings = []\nfor i in tqdm(range(len(image_df))):\n    row = meta_df_test.loc[i]\n    id_name = row.image_id\n    \n    if f'{id_name}.txt' in prediction_files:\n        # opacity label\n        confidence, bboxes = get_conf_bboxes(f'{PRED_PATH}\/{id_name}.txt')\n        bboxes = correct_bbox_format(bboxes)\n        ori_bboxes = scale_bboxes_to_original(row, bboxes)\n        \n        pred_string = ''\n        for j, conf in enumerate(confidence):\n            pred_string += f'opacity {conf} ' + ' '.join(map(str, ori_bboxes[j])) + ' '\n        image_pred_strings.append(pred_string[:-1]) \n    else:\n        image_pred_strings.append(\"none 1 0 0 1 1\")","cd5433e7":"meta_df_test['PredictionString'] = image_pred_strings\nimage_df = meta_df_test[['image_id', 'PredictionString']]\nimage_df.insert(0, 'id', image_df.apply(lambda row: row.image_id+'_image', axis=1))\nimage_df = image_df.drop('image_id', axis=1)\nimage_df.head()","a0ed9392":"!rm -rf runs","c0840d90":"sub_df = pd.concat([study_df, image_df])\nsub_df.to_csv('\/kaggle\/working\/submission.csv', index=False)\nsub_df","95c6ea29":"## Submission File","42c84c2f":"# # Run Detection","02797c90":"# Meta Files","2acfe8ca":"Create Meta file for Test  dataset","432c393d":"Read Files","a0b7c6e5":"# Imports","ad158d62":"remove unused files","23f94c46":"# Load Model for Study _pred","1efc1692":"Thanks to https:\/\/www.kaggle.com\/ayuraj\/submission-covid19\/data","eaa7ff57":"Image Detection"}}