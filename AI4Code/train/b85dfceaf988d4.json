{"cell_type":{"79811953":"code","65ad7e54":"code","cdb26b77":"code","029d9ac2":"code","f38e1cc2":"code","e0a7a43d":"code","d999d597":"code","8526b27c":"code","d2b192dc":"code","24fc3616":"code","63971f9b":"code","44a2fecf":"code","bb92b88d":"code","c77b9854":"code","6ce330b6":"code","9a07313c":"markdown","fe1e58c4":"markdown","34892927":"markdown","fada081f":"markdown","3d9aec1d":"markdown","d74b9ef6":"markdown","845f8b23":"markdown","682ca046":"markdown","de2a53c7":"markdown","de7ec280":"markdown","c73ec2f5":"markdown","6c4286d1":"markdown","9ff0567d":"markdown","88fda721":"markdown","55c0153b":"markdown","a7fbe31c":"markdown","7a147082":"markdown","f5adcfc2":"markdown","720e3aa5":"markdown","fbfdbe47":"markdown","d4ee0474":"markdown","153beedf":"markdown","297c3052":"markdown","ff3c06ca":"markdown","8d226e30":"markdown","11ff7012":"markdown","247caf32":"markdown"},"source":{"79811953":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime,date\ndf = pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv\")\ndf = df[df.Rainfall_Bastia_Umbra.notna()].reset_index(drop=True)\ndf = df.drop(['Depth_to_Groundwater_P24', 'Temperature_Petrignano'], axis=1)\ndf.columns = ['date', 'rainfall', 'depth_to_groundwater', 'temperature', 'drainage_volume', 'river_hydrometry']\ntargets = ['depth_to_groundwater']\nfeatures = [feature for feature in df.columns if feature not in targets]\ndf['date'] = pd.to_datetime(df['date'], format = '%d\/%m\/%Y')","65ad7e54":"f, ax = plt.subplots(nrows=5, ncols=1, figsize=(15, 25))\n\nfor i, column in enumerate(df.drop('date', axis=1).columns):\n    sns.lineplot(x=df['date'], y=df[column].fillna(method='ffill'), ax=ax[i], color='dodgerblue')\n    ax[i].set_title('Feature: {}'.format(column), fontsize=14)\n    ax[i].set_ylabel(ylabel=column, fontsize=14)\n                      \n    ax[i].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])   ","cdb26b77":"df = df.sort_values(by='date')\ndf['delta'] = df['date'] - df['date'].shift(1)","029d9ac2":"df['delta'].sum(),df['delta'].count()","f38e1cc2":"# setting rows, columns and size \nf, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 15))\n\n\n# hydrometry having original values and hydrometry having zoeros replaced with nan\nold_hydrometry = df['river_hydrometry'].copy()\ndf['river_hydrometry'] = df['river_hydrometry'].replace(0, np.nan)\n\n# ploting for old and new hydrometry\nsns.lineplot(x=df['date'], y=old_hydrometry, ax=ax[0], color='darkorange', label='original')\nsns.lineplot(x=df['date'], y=df['river_hydrometry'].fillna(np.inf), ax=ax[0], color='dodgerblue', label='modified')\nax[0].set_title('Feature: Hydrometry', fontsize=14)\nax[0].set_ylabel(ylabel='Hydrometry', fontsize=14)\nax[0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nold_drainage = df['drainage_volume'].copy()\ndf['drainage_volume'] = df['drainage_volume'].replace(0, np.nan)\n\nsns.lineplot(x=df['date'], y=old_drainage, ax=ax[1], color='darkorange', label='original')\nsns.lineplot(x=df['date'], y=df['drainage_volume'].fillna(np.inf), ax=ax[1], color='dodgerblue', label='modified')\nax[1].set_title('Feature: Drainage', fontsize=14)\nax[1].set_ylabel(ylabel='Drainage', fontsize=14)\nax[1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])","e0a7a43d":"f,ax = plt.subplots(nrows=1,ncols=1,figsize=(16,5))\nsns.heatmap(df.T.isna(),cmap='Blues')\nax.set_title('Missing Values',fontsize=16)\n\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label.set_fontsize(14)\nplt.show()\n    ","d999d597":"f, ax = plt.subplots(nrows=4,ncols=1,figsize=(15,12))\n\n## we take np.inf to differentiate with \nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(0),ax = ax[0],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[0],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with zeros')\n\nmean_drain = df['drainage_volume'].mean()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(mean_drain),ax = ax[1],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[1],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with meanvalue')\n\n\nlast_value = df['drainage_volume'].ffill()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(last_value),ax = ax[2],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[2],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with last value')\n\ninterpolate = df['drainage_volume'].interpolate()\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(interpolate),ax = ax[3],color = 'darkorange',label = 'modified')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].fillna(np.inf),ax = ax[3],color = 'dodgerblue',label = 'original')\nax[0].set_title('filling Nan values with interpolation')\n\nfor i in range(4):\n    ax[i].set_xlim([date(2019, 5, 1), date(2019, 10, 1)])\n    \nplt.tight_layout()\nplt.show()","8526b27c":"df['drainage_volume'] = df['drainage_volume'].interpolate()\ndf['river_hydrometry'] = df['river_hydrometry'].interpolate()\ndf['depth_to_groundwater'] = df['depth_to_groundwater'].interpolate()","d2b192dc":"f, ax = plt.subplots(nrows=3,ncols=2,figsize = (16,12))\n\nsns.lineplot(x=df['date'],y=df['drainage_volume'],ax = ax[0,0], color = 'dodgerblue')\nax[0,0].set_title('drainage_volume',fontsize =14)\n\nresampling = df[['date','drainage_volume']].resample('7D',on='date').sum().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['drainage_volume'],ax = ax[1,0], color = 'dodgerblue')\nax[1,0].set_title('weekly_drainage_volume',fontsize =14)\n\nresampling = df[['date','drainage_volume']].resample('M',on='date').sum().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['drainage_volume'],ax = ax[2,0], color = 'dodgerblue')\nax[2,0].set_title('Monthly_drainage_volume',fontsize =14)\n\nfor i in range(3):\n    ax[i, 0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nsns.lineplot(x=df['date'],y=df['temperature'],ax = ax[0,1], color = 'dodgerblue')\nax[0,1].set_title('temperature',fontsize =14)\n\nresampling = df[['date','temperature']].resample('7D',on='date').mean().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['temperature'],ax = ax[1,1], color = 'dodgerblue')\nax[1,1].set_title('weekly_temperature',fontsize =14)\n\nresampling = df[['date','temperature']].resample('M',on='date').mean().reset_index(drop = False)\nsns.lineplot(x=resampling['date'],y=resampling['temperature'],ax = ax[2,1], color = 'dodgerblue')\nax[2,1].set_title('Monthly_temperature',fontsize =14)\n\nfor i in range(3):\n    ax[i, 1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\nplt.show()","24fc3616":"downsammple = df[['date',\n                 'depth_to_groundwater', \n                 'temperature',\n                 'drainage_volume', \n                 'river_hydrometry',\n                 'rainfall']].resample('7D',on='date').mean().reset_index(drop = False)\n\ndf = downsammple.copy()","63971f9b":"# rolling windo is the number of weeks per year\nrolling_window = 52\nf , ax = plt.subplots(nrows=2,ncols=1,figsize= (16,16))\n\nsns.lineplot(x=df['date'],y=df['drainage_volume'],ax= ax[0], color = 'dodgerblue')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].rolling(rolling_window).mean(),ax= ax[0], color = 'black',label = 'roling_mean')\nsns.lineplot(x=df['date'],y=df['drainage_volume'].rolling(rolling_window).std(),ax= ax[0], color = 'orange',label = 'roling_std')\nax[0].set_title('Depth to Groundwater: Non-stationary \\n non-constant mean & non-constant variance', fontsize=14)\nax[0].set_ylabel(ylabel='Drainage Volume', fontsize=14)\nax[0].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nsns.lineplot(x=df['date'], y=df['temperature'], ax=ax[1], color='dodgerblue')\nsns.lineplot(x=df['date'], y=df['temperature'].rolling(rolling_window).mean(), ax=ax[1], color='black', label='rolling mean')\nsns.lineplot(x=df['date'], y=df['temperature'].rolling(rolling_window).std(), ax=ax[1], color='orange', label='rolling std')\nax[1].set_title('Temperature: Non-stationary \\nvariance is time-dependent (seasonality)', fontsize=14)\nax[1].set_ylabel(ylabel='Temperature', fontsize=14)\nax[1].set_xlim([date(2009, 1, 1), date(2020, 6, 30)])\n\nplt.tight_layout()\nplt.show()","44a2fecf":"from statsmodels.tsa.stattools import adfuller\n\nresult = adfuller(df['depth_to_groundwater'].values)\nresult","bb92b88d":"f,ax = plt.subplots(nrows=3,ncols=2,figsize = (15,9))\n\ndef visualisation(series,title,ax):\n    result = adfuller(series)\n    sig_lvl = 0.05\n    adf_stat = result[0]\n    p_val = result[1]\n    crit_val_1 = result[4]['1%']\n    crit_val_5 = result[4]['5%']\n    crit_val_10 = result[4]['10%']\n    if (p_val < sig_lvl) & ((adf_stat < crit_val_1)):\n        linecolor = 'forestgreen' \n    elif (p_val < sig_lvl) & (adf_stat < crit_val_5):\n        linecolor = 'orange'\n    elif (p_val < sig_lvl) & (adf_stat < crit_val_10):\n        linecolor = 'red'\n    else:\n        linecolor = 'purple'\n    sns.lineplot(x=df['date'],y=series,ax=ax,color=linecolor)\n    ax.set_title(f'ADF Statistic {adf_stat:0.3f}, p-value: {p_val:0.3f}\\nCritical Values 1%: {crit_val_1:0.3f}, 5%: {crit_val_5:0.3f}, 10%: {crit_val_10:0.3f}', fontsize=14)\n    ax.set_ylabel(ylabel=title, fontsize=14)\n    \nvisualisation(df['rainfall'].values, 'Rainfall', ax[0, 0])\nvisualisation(df['temperature'].values, 'Temperature', ax[1, 0])\nvisualisation(df['river_hydrometry'].values, 'River_Hydrometry', ax[0, 1])\nvisualisation(df['drainage_volume'].values, 'Drainage_Volume', ax[1, 1])\nvisualisation(df['depth_to_groundwater'].values, 'Depth_to_Groundwater', ax[2, 0])\n\n","c77b9854":"df['depth_to_groundwater_log'] = np.log(abs(df['depth_to_groundwater']))\nf, ax = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))\nvisualisation(df['depth_to_groundwater_log'], 'Transformed \\n Depth to Groundwater', ax[0])\n\nsns.distplot(df['depth_to_groundwater_log'], ax=ax[1])","6ce330b6":"# First Order Differencing\nts_diff = np.diff(df['depth_to_groundwater'])\ndf['depth_to_groundwater_diff_1'] = np.append([0], ts_diff)\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))\nvisualisation(df['depth_to_groundwater_diff_1'], 'Differenced (1. Order) \\n Depth to Groundwater', ax)","9a07313c":"#### Chronological Order and Equidistant Timestamps","fe1e58c4":"We can see there is still some null values in the features\n\nAlso we can see that  there are some zero values in river_hydrometry and drainage volume which we can repalce with nan values and filling them afterwords ","34892927":"From the above we can see that down sampling weekly wise will make the analysis easy with less data loss","fada081f":"# Time Series - Part 2 (Data Preprocessing)","3d9aec1d":"From the above we can see that best option is to interpolate ","d74b9ef6":"#### Handling Missing Values","845f8b23":"Chronological Order of timeseries data must be checked and preprocessed. Similarly Equidistant of the date also needed to be check.\n\nIn order make in chronological order we  sort the data. similarly to check for equidistant we see the difference between the current and previous date or you can use a constant time and find the diffenrence in date","682ca046":"From the above heatmap gives insights on null values and we can see that  hydrometry having more null values","de2a53c7":"we can see that the equdistant between each record has been maintained ","de7ec280":"Sationarity means dataset is sattionary when the data properties does not depend on time. the data with sesonality and trends are said to be non stationary. since the trends and sesonality affects the data at different at diffrent timeseries.\n\nStationarity defines the time series as\n\n* constant mean and mean is not time-dependent\n* constant variance and variance is not time dependent \n* constant covariance and covariance is not time dependent\n\n","c73ec2f5":"### Unit Root Test\n\nUnit Root test is a charachteristic of time series that make time series Non stationary, ADF is a Unit root test. A unit root is said to be exist in a time series if Value of alpha =1 in time series \n\nY\nt\n=\n\u03b1\nY\nt\n\u2212\n1\n+\n\u03b2\nX\ne\n+\n\u03f5","6c4286d1":"shift function will shift the value of the date one record below its previous record based on the argumet given inside the shift function.\n\n ","9ff0567d":"## Stationarity","88fda721":"From the above we can see that features don't have constant mean and standard deviation","55c0153b":"Now, we are going to check for each variable:\n\nThe p-value is less than 0.05\nCheck the range of the ADF statistic compared with critical_values","a7fbe31c":"### Agumented Dicky Fuller(ADF)\n\nAgumeented Dicky Fuller is a type of Statistical test called as Unit root test. we can give them by.\n\n**Null Hypothesis(H0)**: Time Series has unit Root (Non- Stationary)\n**Alternate Hypothesis(H1)**: Time Series not has unit Root (Stationary)\n\nIf the null hypothesis can be rejected, we can conclude that the time series is stationary.\n\nThere are two ways to rejects the null hypothesis:\n\nOn the one hand, the null hypothesis can be rejected if the p-value is below a set significance level. The defaults significance level is 5%\n\n**p-value > significance level (default: 0.05)**: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n**p-value <= significance level (default: 0.05)**: Reject the null hypothesis (H0), the data does not have a unit root and is stationary.\nOn the other hand, the null hypothesis can be rejects if the test statistic is less than the critical value.\n\n**ADF statistic > critical value**: Fail to reject the null hypothesis (H0), the data has a unit root and is non-stationary.\n**ADF statistic < critical value**: Reject the null hypothesis (H0), the data does not have a unit root and is stationary.","7a147082":"#### Differencing","f5adcfc2":"Resampling the data can provide additional information. there are two types of resampling\n\n-  Upsampling : upsampling is making weekly wise data into day wise data\n-  downsampling : downsapling is making day wise data into weekly or mothly data\n\nin this we will use .resample() method to resample","720e3aa5":"### Transformation","fbfdbe47":"###### The above steps are already detalied explined in my data visualisation notebook","d4ee0474":"Differencing can be done in different orders:\n\nFirst order differencing: linear trends with  \nz\ni\n=\ny\ni\n\u2212\ny\ni\n\u2212\n1\n \nSecond-order differencing: quadratic trends with  \nz\ni\n=\n(\ny\ni\n\u2212\ny\ni\n\u2212\n1\n)\n\u2212\n(\ny\ni\n\u2212\n1\n\u2212\ny\ni\n\u2212\n2\n)\n \nand so on...","153beedf":"If the data is not staionary bh=ut we want to use ARIMA models. we can do that transforming the data.The two most common methods to transform series into stationarity ones are:\n\nTransformation: e.g. log or square root to stabilize non-constant variance\n\nDifferencing: subtracts the current value from the previous\n","297c3052":"From the above we can see that zeros are replaced by null values which is mentioned in orange lines ","ff3c06ca":"This stationarity check can be done with three methods\n\n- Visually: by ploting in a graph and checking trends and seasonality\n- Statistical: spliting time series and camparing the mean and variance of the data\n- Staitstical test: Augmented Dickey Fuller test ","8d226e30":"##### Smoothing data \/ Resampling","11ff7012":"###### Missing values handling\n\n1. filling NaN values with zeros or Outliers.\n2. filling NaN values with last value\n3. filling NaN values with mean value\n4. filling NaN values with  .interpolate()","247caf32":"# Time Series Part-1 (data visualisation) is explained clearly in the below link kindly check and then continue here\n\n#### https:\/\/www.kaggle.com\/nandha13\/time-series-part-1-data-visualization"}}