{"cell_type":{"c86d0a8c":"code","7fcb0fbc":"code","c56e66a8":"code","163c2dea":"code","900062d6":"code","c55f237e":"code","cf5cb533":"code","19ff1d6d":"code","70f3cd71":"code","8d7df153":"code","c8dd7324":"code","07b86cff":"code","e4a43ebd":"code","ac24a5a5":"code","b2d42a6e":"code","1e051cf3":"code","aa34b2fc":"code","74d34366":"code","d67319a6":"code","d4698ee5":"code","a5d7c8ec":"code","942e590d":"code","3daa3cc5":"code","c22e4e9f":"code","72e4b0ec":"code","3b2dcb73":"code","7e90a548":"code","38bfec66":"code","14b9b1c5":"code","339a6469":"code","72c9dfbd":"code","d722c09f":"code","00779a6f":"code","66024ebc":"code","421f8089":"code","26c93a5d":"code","7539c3a6":"code","111d5e80":"code","a54c8818":"code","4d429168":"code","ad858b2b":"code","c7a59f81":"code","ddf0f393":"code","5fdf3005":"code","3240a6bb":"code","8fc97ed5":"code","79a4ac03":"markdown","18b026ea":"markdown","eedaa4a3":"markdown","9e8ce110":"markdown","91fe8fbe":"markdown","386e02ad":"markdown","cd6dd822":"markdown","be6a9239":"markdown","415871a9":"markdown","dec5867f":"markdown","910ce065":"markdown","0e9666b5":"markdown"},"source":{"c86d0a8c":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n\nimport seaborn as sns\n\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nimport os\n","7fcb0fbc":"dir = os.listdir('..\/input\/sales-data')\nfiles = [file for file in dir]\nfor file in files:\n    print(file)","c56e66a8":"path = '..\/input\/sales-data'\n\n# create a blank dataframe\nall_data = pd.DataFrame()\n\nfor file in files:\n    current_df = pd.read_csv(path+\"\/\"+file)\n    all_data = pd.concat([all_data,current_df])","163c2dea":"all_data.head()","900062d6":"all_data.shape","c55f237e":"# export the data frame to a csv file\nall_data.to_csv('.\/all_data.csv', index=False)","cf5cb533":"# check null values and get sum of them for each coloumn.\nall_data.isnull().sum()","19ff1d6d":"# drop all the missing values with their rows.\nall_data = all_data.dropna(how='all')","70f3cd71":"all_data.shape","8d7df153":"all_data.head()","c8dd7324":"# add a month column to the dataframe.\ndef month(x):\n    return x.split('\/')[0]\nall_data['month'] = all_data['Order Date'].apply(month)","07b86cff":"all_data.head()","e4a43ebd":"# check the data types of each column\nall_data.dtypes","ac24a5a5":"# check unique values of month.\nall_data['month'].unique()","b2d42a6e":"# creating a filter.\nfilter = all_data['month'] == 'Order Date'\nall_data = all_data[~filter]","1e051cf3":"all_data.shape","aa34b2fc":"# changing the data types\nall_data['month'] = all_data['month'].astype(int)\nall_data['Quantity Ordered'] = all_data['Quantity Ordered'].astype(int)\nall_data['Price Each'] = all_data['Price Each'].astype(float)","74d34366":"all_data.dtypes","d67319a6":"all_data['sales'] = all_data['Quantity Ordered'] * all_data['Price Each']\nall_data.head()","d4698ee5":"y = all_data.groupby('month')['sales'].sum()\nmonths = range(1,13)\nmonth_labels = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']","a5d7c8ec":"# plotting the data\nplt.figure(figsize=(10,5))\nplt.bar(months, y)\nplt.xticks(months,month_labels)\nplt.title('Monthly Sales')\nplt.xlabel('Month',fontsize=12,labelpad=15)\nplt.ylabel('Sales in USD',fontsize=12, labelpad=15)\nplt.show()","942e590d":"# creating the city column.\ndef city(x):\n    return x.split(',')[1]\n\nall_data['city'] = all_data['Purchase Address'].apply(city)\nall_data.head()","3daa3cc5":"city_counts = all_data.groupby('city')['city'].count()\ncity_counts = city_counts.to_frame(name=\"city_counts\")\ncity_counts.index.names = ['city_name']\ncity_counts.reset_index(inplace=True)\ncity_counts.head()","c22e4e9f":"city_counts.shape","72e4b0ec":"plt.figure(figsize=(10,5))\nsns.barplot(x=city_counts['city_name'],y=city_counts['city_counts'],data=city_counts)\nplt.xlabel('Name of the City', fontsize=12, labelpad=15)\nplt.ylabel('Number of orders',fontsize=12, labelpad=15)\nplt.title('Orders by City')\nplt.xticks(rotation=45)\nplt.show()","3b2dcb73":"all_data['Product'].values","7e90a548":"all_data['Hour'] = pd.to_datetime(all_data['Order Date']).dt.hour\nall_data.head()","38bfec66":"keys = []\nhour = []\nfor key, hour_df in all_data.groupby('Hour'):\n    keys.append(key)\n    hour.append(len(hour_df))","14b9b1c5":"plt.figure(figsize=(10,5))\nsns.barplot(x=keys,y=hour)\nsns.lineplot(x=keys, y=hour)\nplt.xlabel('Hour', fontsize=12, labelpad=15)\nplt.ylabel('Number of orders',fontsize=12, labelpad=15)\nplt.title('Orders by Time and Hour')\nplt.show()","339a6469":"quantity = all_data.groupby('Product')['Quantity Ordered'].sum()\nquantity = quantity.to_frame(name=\"product_counts\")\nquantity.reset_index(inplace=True)\nquantity.head()","72c9dfbd":"quantity.shape","d722c09f":"plt.figure(figsize=(10,5))\nsns.barplot(x=quantity['Product'],y=quantity['product_counts'],data=quantity)\nplt.xlabel('product', fontsize=12, labelpad=15)\nplt.ylabel('Number of product orders',fontsize=12, labelpad=15)\nplt.title('Orders by product and their order count')\nplt.xticks(rotation=90)\nplt.show()","00779a6f":"all_data.head()","66024ebc":"quantity_1 = all_data.groupby('Product')['Quantity Ordered'].sum()\nproducts = all_data.groupby('Product')['Quantity Ordered'].sum().index\nprices = all_data.groupby('Product')['Price Each'].mean()","421f8089":"products","26c93a5d":"quantity_1","7539c3a6":"prices","111d5e80":"fig, axes = plt.subplots(1,2,sharex=True,figsize=(16,8))\nfig.suptitle('Analyzing Most Sold Products')\n\naxes[0].set_title('Sold product counts')\naxes[0].set_ylabel('Number of products that sold')\nsns.barplot(ax=axes[0], x=products, y=quantity_1.values)\naxes[0].set_xticklabels(products, rotation=90)\n\naxes[1].set_title('Products Prices')\naxes[1].set_ylabel('Each price for a product (USD)')\nsns.barplot(ax=axes[1], x=prices.index, y=prices.values)\naxes[1].set_xticklabels(prices.index, rotation=90)\n\nfig.show()","a54c8818":"fig,ax1 = plt.subplots(figsize=(10,5))\nfig.suptitle(\"Analyzing sold product counts and product prices.\")\nax2=ax1.twinx()\nsns.barplot(ax=ax1, x=products, y=quantity_1.values)\nsns.lineplot(ax=ax2, x=products, y=prices.values)\nax1.set_xticklabels(products, rotation='vertical', size=8)\nax1.set_xlabel(\"Product Names\")\nax1.set_ylabel(\"Product Order Counts\", labelpad=15)\nax2.set_ylabel(\"Product Prices (USD)\", labelpad=15)\nfig.show()","4d429168":"# duplicated data manipulate\ndf = all_data[all_data['Order ID'].duplicated(keep=False)]\ndf.head()","ad858b2b":"df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x:','.join(x))","c7a59f81":"df.head()","ddf0f393":"# drop duplicates data according to Order ID\ndf2 = df.drop_duplicates(subset=['Order ID'])\ndf2.head()","5fdf3005":"labels = df['Grouped'].value_counts()[0:5].index\ncounts = df2['Grouped'].value_counts()[0:5]","3240a6bb":"trace = go.Pie(labels=labels,\n              values=counts,\n              hoverinfo='label+percent',\n              textinfo='value',\n              textfont=dict(size=25),\n              pull=[0,0,0,0.2,0])","8fc97ed5":"iplot([trace])","79a4ac03":"It seems like orders are placed mostly at less busy hours like 11:00 AM - 13:00 AM and 18:00 PM - 20:00 PM. This means, to increase the sales, we should display advertisements at these times.","18b026ea":"This indicates that the number of orders for cheap products such as AA Batteries (4-pack), AAA Batteries (4-pack), USB C charging cables and Lighting charging cables is much higher than the number of orders for non-cheap products.","eedaa4a3":"### Analyze the quantity of orders and the time at which those orders were placed.","9e8ce110":"### Analyzing Product sold counts","91fe8fbe":"The chart above shows that festive months like April, October and December have the highest sales of any other month. Of those months, December had the highest sales. From the chart above we can conclude that the best sales are during the festive season and the highest number of items are sold during the Christmas season.","386e02ad":"### Introduction.\nThis data analysis is based on a course that I recently followed on Udemy.\n#### Table of content\n1. Importing necessary libraries\n2. Data cleaning and Data preparation\n3. Analyzing monthly sales\n4. Order quantity and city analysis of those orders\n5. Analyze the quantity of orders and the time at which those orders were placed.\n6. Analyzing Product sold counts\n7. Analyzing products that most often sold together","cd6dd822":"### Importing necessary libraries.","be6a9239":"### Order quantity and city analysis of those orders","415871a9":"### Analyzing monthly sales.\n","dec5867f":"### Data cleaning and Data preparation.","910ce065":"### Analyzing products that most often sold together","0e9666b5":"**Costal cities** like San Francisco, New York City, Los Angeles and Boston are the major cities ordering the most products. The products are mostly related to the electrical devices or smart devices. As many of these coastal cities are economically as well as technologically advanced, it can be concluded that people in those cities are increasingly buying smart devices and related products."}}