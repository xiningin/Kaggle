{"cell_type":{"dbf81513":"code","0cf685b7":"code","c2e44a4d":"code","3e05c034":"code","4538f81a":"code","1205a28d":"code","22d82233":"code","be30a1fa":"code","05ab5d83":"code","7a71fb6f":"code","9799bce0":"code","13350a12":"code","8cb6c3fc":"code","4fe4e34d":"code","8b4cfaeb":"code","d8990568":"code","00a26e4c":"code","c1ecc438":"code","e75082d2":"code","64450c98":"code","53472167":"code","388d4c42":"code","cc349ccd":"code","043fbff2":"code","f4a880fc":"code","23ea9264":"code","099acaed":"code","34839d12":"code","303b69ed":"code","f49a2e13":"code","81e42d5d":"code","7096d874":"code","c008d2b4":"code","60267c94":"code","f8142dde":"code","66072bc3":"code","ebca126e":"code","96e3e97f":"code","fc139779":"code","cce2381c":"code","d7c0d8b6":"code","a4fbfc34":"code","0af264aa":"code","c159fb42":"code","98dd5e50":"code","637a3f7f":"code","f4c030e5":"code","4a86e067":"code","9984af00":"code","839be2d7":"code","98d67303":"code","74424fc4":"code","499d8079":"code","267c537e":"code","2af37b15":"code","e110f2e8":"markdown","e1edf839":"markdown","33bfd282":"markdown","ef582722":"markdown","2cc68b70":"markdown","8e9e33e5":"markdown","56dd8adc":"markdown","e4e6372e":"markdown","f3d2d837":"markdown","ce786e97":"markdown","2e13eb2b":"markdown","8f4c1384":"markdown","4907a78f":"markdown","45839775":"markdown","674d757c":"markdown","054b4f21":"markdown","c9b46fb1":"markdown","ff1144e2":"markdown","dbd48c1e":"markdown","317cbb24":"markdown","4f305f12":"markdown","b01f176d":"markdown","fc1ff7ec":"markdown","f64aac24":"markdown","73d13f9a":"markdown","3fe33584":"markdown","18fc8b90":"markdown","26f67fc8":"markdown","42800dd7":"markdown","ec35f732":"markdown","a90f4e2c":"markdown","98bfb318":"markdown","6f41af95":"markdown"},"source":{"dbf81513":"import pandas as pd\nimport numpy as np\nfrom urllib.request import urlretrieve","0cf685b7":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","c2e44a4d":"yield_apples = [0.895, 0.91, 0.919, 0.926, 0.929, 0.931]","3e05c034":"plt.plot(yield_apples)","4538f81a":"years = [2010, 2011, 2012, 2013, 2014, 2015]\nyield_apples = [0.895, 0.91, 0.919, 0.926, 0.929, 0.931]","1205a28d":"plt.plot(years,yield_apples);","22d82233":"plt.plot(years,yield_apples)\nplt.xlabel('years')\nplt.ylabel('yield (ton_per_hectar)');","be30a1fa":"# here using range function to decries the input.\nyears = range(2000, 2012)\napples = [0.895, 0.91, 0.919, 0.926, 0.929, 0.931, 0.934, 0.936, 0.937, 0.9375, 0.9372, 0.939]\noranges = [0.962, 0.941, 0.930, 0.923, 0.918, 0.908, 0.907, 0.904, 0.901, 0.898, 0.9, 0.896, ]","05ab5d83":"plt.plot(years,apples)\nplt.plot(years,oranges)\nplt.xlabel('years')\nplt.ylabel('yield( ton_per_hectar)');","7a71fb6f":"plt.plot(years, apples)\nplt.plot(years,oranges)\nplt.xlabel('years')\nplt.ylabel('yield(ton per hectar)')\nplt.title('crop yield in kota')\nplt.legend(['apples','oranges']);","9799bce0":"plt.plot(years, apples, marker='o')\nplt.plot(years,oranges, marker='x')\nplt.xlabel('years')\nplt.ylabel('yield(ton per hectar)')\nplt.title('crop yield in kota')\nplt.legend(['apples','oranges']);","13350a12":"plt.plot(years, apples, marker='s', c='b', ls='-', lw=2, ms=8, mew=2, mec='navy')\nplt.plot(years, oranges, marker='o', c='r', ls='--', lw=3, ms=10, alpha=.5)\n\nplt.xlabel('Year')\nplt.ylabel('Yield (tons per hectare)')\n\nplt.title(\"Crop Yields in Kanto\")\nplt.legend(['Apples', 'Oranges']);","8cb6c3fc":"plt.plot(years, apples, 's-b') # fmt='s-b'\nplt.plot(years,oranges, 'o--r') #fmt = '0--r'\nplt.xlabel('years')\nplt.ylabel('yield(ton per hectar)')\nplt.title('crop yield in kota')\nplt.legend(['apples','oranges']);","4fe4e34d":"# If no line style is specified in fmt, only markers are drawn.\nplt.plot(years,oranges, 'or')\nplt.title('crop yield in kota');","8b4cfaeb":"plt.figure(figsize=(2 ,2))\nplt.plot(years,oranges, 'or')\nplt.title('crop yield in kota');","d8990568":"plt.figure(figsize=(8 ,5))\nplt.plot(years,oranges, 'or')\nplt.title('crop yield in kota');","00a26e4c":"sns.set_style('whitegrid')","c1ecc438":"plt.plot(years, apples, 's-b') # fmt='s-b'\nplt.plot(years,oranges, 'o--r') #fmt = '0--r'\nplt.xlabel('years')\nplt.ylabel('yield(ton per hectar)')\nplt.title('crop yield in kota')\nplt.legend(['apples','oranges']);","e75082d2":"sns.set_style('darkgrid')","64450c98":"plt.plot(years, apples, 's-b') # fmt='s-b'\nplt.plot(years,oranges, 'o--r') #fmt = '0--r'\nplt.xlabel('years')\nplt.ylabel('yield(ton per hectar)')\nplt.title('crop yield in kota')\nplt.legend(['apples','oranges']);","53472167":"plt.figure(figsize=(8 ,5))\nplt.plot(years,oranges, 'or')\nplt.title('crop yield in kota');","388d4c42":"import matplotlib","cc349ccd":"matplotlib.rcParams['font.size']=14\nmatplotlib.rcParams['figure.figsize']=(9,5)\nmatplotlib.rcParams['figure.facecolor']='#00000000'","043fbff2":"plt.plot(years,oranges, 'or')\nplt.title('crop yield in kota');","f4a880fc":"# load data into pandas data fram\nflowers_df= sns.load_dataset('iris')\nflowers_df","23ea9264":"flowers_df.species.unique()","099acaed":"plt.plot(flowers_df.sepal_length, flowers_df.sepal_width)","34839d12":"sns.scatterplot(flowers_df.sepal_length, flowers_df.sepal_width)","303b69ed":"sns.scatterplot(flowers_df.sepal_length,\n                flowers_df.sepal_width,\n                hue=flowers_df.species,\n                s=100);","f49a2e13":"plt.figure(figsize=(12,6))\nplt.title('sepal_dimenstional')\nsns.scatterplot(flowers_df.sepal_length,\n                flowers_df.sepal_width,\n                hue=flowers_df.species,\n                s=100);","81e42d5d":"# same way of above but using datafram instead of series.\nplt.title('Sepal Dimensions')\nsns.scatterplot('sepal_length', \n                'sepal_width', \n                hue='species',\n                s=100,\n                data=flowers_df);","7096d874":" # load the data into datafram\nflowers_df=sns.load_dataset('iris')\nflowers_df.sepal_width","c008d2b4":"flowers_df.describe()","60267c94":"plt.title('distrubtion of sepal width')\nplt.hist(flowers_df.sepal_width);","f8142dde":"# Specifying the number of bins\nplt.hist(flowers_df.sepal_width, bins=5)","66072bc3":"np.arange(2,5,0.25)","ebca126e":"# Specifying the boundaries of each bin\nplt.hist(flowers_df.sepal_width, bins= np.arange(2,5,0.25))","96e3e97f":"# bins for unequel sizes\nplt.hist(flowers_df.sepal_width, bins=[1,3,4,4.5])","fc139779":"setosa_df = flowers_df[flowers_df.species == 'setosa']\nversicolor_df = flowers_df[flowers_df.species == 'versicolor']\nvirginica_df = flowers_df[flowers_df.species == 'virginica']","cce2381c":"setosa_df","d7c0d8b6":"plt.hist(setosa_df.sepal_width,alpha= 0.4, bins=np.arange(2,5,0.25))\nplt.hist(versicolor_df.sepal_width,alpha=0.4, bins=np.arange(2,5,0.25))\nplt.legend(['setosa','versicolor']);","a4fbfc34":"# can run all of them on one code\nplt.title('Discrebution of sepal')\nplt.hist([setosa_df.sepal_width, versicolor_df.sepal_width,virginica_df.sepal_width],\n        bins= np.arange(2,5,0.25),\n        stacked= True)\nplt.legend(['setosa','versicolor','virginica']);","0af264aa":"years = range(2000, 2006)\napples = [0.35, 0.6, 0.9, 0.8, 0.65, 0.8]\noranges = [0.4, 0.8, 0.9, 0.7, 0.6, 0.8]","c159fb42":"plt.bar(years,oranges);","98dd5e50":"plt.plot(years,apples);","637a3f7f":"# can be using the two kinds of charts togather.\nplt.bar(years,oranges);\nplt.plot(years,oranges, 'o--r');\nplt.title('yield');","f4c030e5":"plt.bar(years, apples)\nplt.bar(years,oranges, bottom = apples)\nplt.legend(['apples','oranges']);","4a86e067":"tips_df= sns.load_dataset('tips')\ntips_df","9984af00":"tips_df.sample(10)","839be2d7":"bill_average_df=tips_df.groupby('day')[['total_bill']].mean()\nbill_average_df","98d67303":"plt.bar(bill_average_df.index, bill_average_df.total_bill);","74424fc4":"# can do all of that on one stepby seaborn\nsns.barplot('day','total_bill', data=tips_df)","499d8079":"# using hue funcation to compare between the female and male  .\nsns.barplot('day', 'total_bill', hue ='sex', data= tips_df)","267c537e":"sns.barplot('total_bill', 'day', hue='sex', data= tips_df)","2af37b15":"sns.barplot('day', 'total_bill', hue ='smoker', data= tips_df)","e110f2e8":"## Customizing Seaborn Figures\nSince Seaborn uses Matplotlib's plotting functions internally, we can use functions like plt.figure and plt.title to modify the figure.","e1edf839":"We can use a scatter plot to visualize how sepal length & sepal width vary using the scatterplot function from seaborn (imported as sns).","33bfd282":"Adding hues makes the plot more informative. We can immediately tell that flowers of the Setosa species have a smaller sepal length but higher sepal widths, while the opposite holds true for the Virginica species.\n\n","ef582722":"## Plotting using Pandas Data Frames\nSeaborn has in-built support for Pandas data frames. Instead of passing each column as a series, you can also pass column names and use the data argument to pass the data frame.","2cc68b70":"## Customizing the X-axis\nThe X-axis of the plot currently shows list element indexes 0 to 5. The plot would be more informative if we could show the year for which the data is being plotted. We can do this by two arguments plt.plot.","8e9e33e5":"## Bar Plots with Averages\nLet's look at another sample dataset included with Seaborn, called \"tips\". The dataset contains information about the sex, time of day, total bill and tip amount for customers visiting a restaurant over a week.","56dd8adc":" ## Bar Chart\nBar charts are quite similar to line charts i.e. they show a sequence of values, however a bar is shown for each value, rather than points connected by lines. We can use the plt.bar function to draw a bar chart.","e4e6372e":"Notice this we also include the special command %matplotlib inline to ensure that plots are shown and embedded within the Jupyter notebook itself. Without this command, sometimes plots may show up in pop-up windows.","f3d2d837":" ## Axis Labels\nWe can add labels to the axes to show what each axis represents using the plt.xlabel and plt.ylabel methods.","ce786e97":"## Multiple Histograms\nSimilar to line charts, we can draw multiple histograms in a single chart. We can reduce the opacity of each histogram, so the the bars of one histogram don't hide the bars for others.\n\nLet's draw separate histograms for each species of flowers.","2e13eb2b":"You can also edit default styles directly by modifying the matplotlib.rcParams dictionary. Learn more: https:\/\/matplotlib.org\/3.2.1\/tutorials\/introductory\/customizing.html#matplotlib-rcparams","8f4c1384":"Like histograms, bars can also be stacked on top of one another. We use the bottom argument to plt.bar to achieve this.","4907a78f":"Let's try to visualize the relationship between sepal length and sepal width. Our first instinct might be to create a line chart using plt.plot. However, the output is not very informative as there are too many combinations of the two properties within the dataset, and there doesn't seem to be simple relationship between them.","45839775":"We might want to draw a bar chart to visualize how the average bill amount varies across different days of the week. One way to do this would be to compute the day-wise averages and then use plt.bar (try it as an exercise).\n\nHowever, since this is a very common use case, the Seaborn library provides a barplot function which can automatically compute averages.","674d757c":"## Controlling the size and number of bins\nWe can control the number of bins, or the size of each bin using the bins argument.","054b4f21":"## Styling lines and markers\n##### The plt.plot function supports many arguments for styling lines and markers:\n\n#####  color or c: set the color of the line (supported colors)\n#####  linestyle or ls: choose between a solid or dashed line\n##### linewidth or lw: set the width of a line\n##### markersize or ms: set the size of markers\n##### markeredgecolor or mec: set the edge color for markers\n##### markeredgewidth or mew: set the edge width for markers\n##### markerfacecolor or mfc: set the fill color for markers\n##### alpha: opacity of the plot\n##### Check out the documentation for plt.plot to learn more: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot","c9b46fb1":" ### Line Chart\nLine charts are one of the simplest and most widely used data visualization techniques. A line chart displays information as a series of data points or markers, connected by straight lines. You can customize the shape, size, color and other aesthetic elements of the markers and lines for better visual clarity.","ff1144e2":"Calling the plt.plot function draws the line chart as expected, and also returns a list of plots drawn [<matplotlib.lines.Line2D at 0x7ff70aa20760>] shown within the output. We can include a semicolon (;) at the end of the last statement in the cell to avoiding showing the output and just display the graph.","dbd48c1e":"The fmt argument provides a shorthand for specifying the line style, marker and line color. It can be provided as the third argument to plt.plot.\n\nfmt = '[marker][line][color]'","317cbb24":"## Adding Hues\nNotice how the points in the above plot seem to form distinct clusters with some outliers. We can color the dots using the flower species as a hue. We can also make the points larger using the s argument.","4f305f12":"can make the bars horzonal by switch the axis.","b01f176d":"## Changing the Figure Size\nYou can use the plt.figure function to change the size of the figure.","fc1ff7ec":"## Improving Default Styles using Seaborn\nAn easy way to make your charts look beautiful is to use some default styles provided in the Seaborn library. These can be applied globally using the sns.set_style function. You can see a full list of predefined styles here: https:\/\/seaborn.pydata.org\/generated\/seaborn.set_style.html","f64aac24":"We can also stack multiple histograms on top of one another.","73d13f9a":" ## Plotting Multiple Lines\nIt's really easy to plot multiple lines in the same graph. Just invoke the plt.plot function multiple times. Let's compare the yields of apples vs. oranges in Kanto.","3fe33584":"## Histogram\nA histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.\n\nAs an example, let's visualize the how the values of sepal width in the flowers dataset are distributed. We can use the plt.hist function to create a histogram.","18fc8b90":"The lines cutting each bar represent the amount of variation in the values. For instance, it seems like the variation in the total bill was quite high on Fridays, and lower on Saturday.\n\nWe can also specify a hue argument to compare bar plots side-by-side based on a third feature e.g. sex.","26f67fc8":"## Chart Title and Legend\nTo differentiate between multiple lines, we can include a legend within the graph using the plt.legend function. We also give the entire chart a title using the plt.title function.","42800dd7":"Like histograms, bars can also be stacked on top of one another. We use the bottom argument to plt.bar to achieve this.","ec35f732":"We can visualize how the yield of apples changes over time using a line chart. To draw a line chart, we can use the plt.plot function","a90f4e2c":"# Uncomment the next line to install the required libraries\n# !pip install matplotlib seaborn --upgrade --quiet","98bfb318":"## Scatter Plot\nIn a scatter plot, the values of 2 variables are plotted as points on a 2-dimensional grid. Additionally, you can also use a third variable to determine the size or color of the points. Let's try out an example.\n\nThe Iris flower dataset provides samples measurements of sepals and petals for 3 species of flowers. The Iris dataset is included with the Seaborn library, and can be loaded as a Pandas data frame.","6f41af95":"## Line Markers\nWe can also show markers for the data points on each line using the marker argument of plt.plot. Matplotlib supports many different types of markers like circle, cross, square, diamond etc. You can find the full list of marker types here: https:\/\/matplotlib.org\/3.1.1\/api\/markers_api.html"}}