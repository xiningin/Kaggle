{"cell_type":{"4e052771":"code","41445400":"code","4464dd85":"code","04c22789":"code","5614d65e":"code","2c6fadb8":"code","63068c21":"code","1e3c2ef6":"code","6aa007f6":"code","32d7d0e6":"code","77e9f51f":"code","374b087e":"code","5cf18220":"code","c2558d73":"code","22e2cf19":"code","c3530d79":"code","3fa41a04":"code","edd4cec2":"code","7e81f657":"code","497bbe67":"code","0fe4e48f":"code","b5abdd73":"code","34054521":"code","b8877335":"code","17eaa4aa":"code","ff8e2c97":"code","28db9a42":"code","138c86d4":"code","085ba763":"code","6b87e7d4":"code","d7fe9cc4":"code","9b37f6d6":"code","06d61401":"code","7b399a2b":"code","2aa5ad37":"code","572ac403":"code","4b96a970":"code","0a9edc6e":"markdown","de09b5fa":"markdown","d0fff5c2":"markdown","50afa41f":"markdown","e3e274c0":"markdown","f07731b4":"markdown","14d20d5c":"markdown","f67b3aac":"markdown","b9b559ba":"markdown","b2d5ce8f":"markdown","0fb9ac95":"markdown","774bfddc":"markdown","72a717b7":"markdown","ab67e222":"markdown","6a540017":"markdown","b69609a4":"markdown","1855421c":"markdown","9b78a104":"markdown","a78a2311":"markdown","fee7a18d":"markdown","8b3a7795":"markdown","faf32803":"markdown","78e3197b":"markdown","a6f3cb7e":"markdown","13cb5d8b":"markdown","a8fb159c":"markdown","91922693":"markdown","c18e09c4":"markdown","a1983f01":"markdown","9fa78f7a":"markdown","3fd10f46":"markdown","8b9b8278":"markdown","54b7fcf7":"markdown","77d47586":"markdown","4e4e8542":"markdown","4fd1af66":"markdown"},"source":{"4e052771":"!pip install autoviz\n\n\nimport numpy as np\nimport pandas as pd\n\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly.offline import iplot\nimport plotly.express as px\n\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\nimport textwrap\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nfrom pandas_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings(\"ignore\") \n\nsns.set_style('dark')\n%matplotlib inline","41445400":"data = pd.read_csv('..\/input\/videogamesales\/vgsales.csv', sep = ',')\ndata.sample(10)","4464dd85":"print(\"Shape: \", data.shape)\nmsno.matrix(data, labels = True)\nplt.show()","04c22789":"print(\"Count of null values:-\\n\", data.isnull().sum())","5614d65e":"new_data = data.dropna(axis = 0, inplace = False)\nnew_data = new_data.drop(data[data['Year'] >= 2017].index)","2c6fadb8":"print(\"Data types:-\\n\", new_data.dtypes)\nprint(\"Shape: \", new_data.shape)\nnew_data['Year'] = new_data['Year'].astype('int')","63068c21":"new_data.describe().transpose()","1e3c2ef6":"response = requests.get('https:\/\/mpng.subpng.com\/20180915\/jzo\/kisspng-computer-icons-bird-hunt-lite-game-controllers-sca-5b9d77bf746252.7340208815370464634767.jpg')\nimage = Image.open(BytesIO(response.content))\ncrop_image = image.crop(box = (180, 90, 720, 425))  \ncontroller_mask = np.array(crop_image)\n\nfor i in range(len(controller_mask)):\n    for j in range(len(controller_mask[i])):\n        for k in range(3):\n            if controller_mask[i][j][k] <= 50:\n                controller_mask[i][j][k] = 0\n            else:\n                controller_mask[i][j][k] = 255\n\nwordcloud_data = pd.concat([new_data.groupby('Platform').sum(), \n                            new_data.groupby('Genre').sum()])\nwordcloud_data = wordcloud_data['Global_Sales'].sort_values(ascending = False).index\n\nplt.figure(figsize = (15, 8))\nwordcloud = WordCloud(background_color = 'black', repeat = True, \n                      max_words = 100, mask = controller_mask, \n                      contour_color = 'white', contour_width = 3, \n                      min_font_size = 10, \n                      max_font_size = 150).generate(' '.join(wordcloud_data))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout()\nplt.show()","6aa007f6":"year_data = new_data.groupby(by = 'Year').count()['Rank']\nplt.figure(figsize = (15, 8))\nplt.plot(year_data.index, year_data.values, marker = 'o', \n         markerfacecolor = 'red', linewidth = 2)\nplt.title('Games Released in Each Year')\nplt.xlabel('Year')\nplt.ylabel('Count')\nplt.grid(True)\nplt.show()","32d7d0e6":"def count_plot(column_name, x_text):\n    plt.style.use('fivethirtyeight')\n    color = ['#4878d0', '#ee854a', '#6acc64', '#d65f5f', '#956cb4', \n             '#8c613c', '#dc7ec0', '#797979', '#d5bb67', '#82c6e2']\n    column_data = (new_data.groupby(column_name).count()['Rank']).sort_values(axis = 0)\n    \n    column_plot = plt.barh(y = column_data.index, width = column_data.values,\n                           color = color)\n    for bar in column_plot:\n        plt.text(bar.get_height() + bar.get_width() + x_text, bar.get_y() + 0.5, \n                 bar.get_width(), horizontalalignment = 'center')\n    axes_subplot = plt.subplot()\n    axes_subplot.invert_yaxis()\n    plt.yticks(column_data.index)\n    plt.xticks([])\n    plt.title('No. of Games Released On Each %s'%(column_name))\n    plt.ylabel(column_name)\n    plt.xlabel('No. of games')\n    plt.grid(False)","77e9f51f":"plt.figure(figsize = (15, 15))\ncount_plot('Platform', 50)\nplt.show()","374b087e":"plt.figure(figsize = (13, 7))\ncount_plot('Genre', 85)\nplt.show()","5cf18220":"publisher_data = pd.DataFrame(data = new_data.groupby(by = 'Publisher').count()['Rank'])\npublisher_data = publisher_data.sort_values(by = 'Rank', ascending = False)\npublisher_data = publisher_data.rename(columns = {'Rank' : 'Count'}).head(n = 10)\n\nplt.figure(figsize = (15, 7))\npublisher_globalsale_plot = sns.barplot(x = publisher_data.index, \n                                        y = publisher_data.Count, \n                                        edgecolor = 'black', \n                                        linewidth = 2, \n                                        palette = 'colorblind')\npublisher_globalsale_plot.set_xticklabels(textwrap.fill(name.get_text(), \n                                                        width = 10) for name in publisher_globalsale_plot.get_xticklabels())\npublisher_globalsale_plot.set_xticklabels(publisher_globalsale_plot.get_xticklabels(),\n                                          fontdict = {'fontsize' : 12, 'color' : 'black'})\nplt.xlabel('Publisher')\nplt.ylabel('Sales in Millions')\nplt.title('Top 10 Publisher by Global Sales')\nplt.grid(False)\nplt.show()","c2558d73":"year_sales_data = new_data.groupby(by = 'Year')['NA_Sales', 'EU_Sales', \n                                                'JP_Sales', 'Other_Sales', 'Global_Sales'].sum()\nplt.figure(figsize = (15, 8))\nsns.lineplot(x = year_sales_data.index, \n             y = year_sales_data.iloc[:, 4], \n             color = 'purple', \n             linewidth = 3)\nplt.title('Gloabal Sales in Millions')\nplt.xlabel('Year')\nplt.ylabel('Amount in Millions')\nplt.grid(False)\nplt.show()","22e2cf19":"plt.figure(figsize = (15, 8))\nsns.lineplot(x = year_sales_data.index, y = year_sales_data.iloc[:, 0], label = 'North America')\nsns.lineplot(x = year_sales_data.index, y = year_sales_data.iloc[:, 1], label = 'Europe')\nsns.lineplot(x = year_sales_data.index, y = year_sales_data.iloc[:, 2], label = 'Japan')\nsns.lineplot(x = year_sales_data.index, y = year_sales_data.iloc[:, 3], label = 'Other')\nplt.title('Sales in Each Year')\nplt.xlabel('Year')\nplt.ylabel('Amount in Millions')\nplt.legend(loc = 2, ncol = 1, shadow = True, fancybox = True, frameon = True)\nplt.grid(False)\nplt.show()","c3530d79":"def first_plot(column_name):\n    first_column_data = new_data.groupby(by = column_name)['Year'].min()\n    first_column_data = first_column_data.sort_values(axis = 0)\n    first_column_plot = sns.stripplot(x = first_column_data.index, \n                                      y = first_column_data.values, palette = 'bright')\n    first_column_plot.set_xticklabels(first_column_data.index, \n                                      rotation=45, horizontalalignment='right')\n    plt.title('First Game Reales on %s' %(column_name))\n    plt.xlabel(column_name)\n    plt.ylabel('Year')\n    plt.grid(True)\n    plt.show() ","3fa41a04":"plt.figure(figsize = (15, 8))\nfirst_plot('Platform')","edd4cec2":"plt.figure(figsize = (15, 6))\nfirst_plot('Genre')","7e81f657":"def type_sales_pie(column_name, sale_name):\n    type_sales_data = new_data.groupby(by = column_name)['NA_Sales', 'EU_Sales',\n                                                         'JP_Sales', 'Global_Sales']\n    type_sales_data = type_sales_data.sum().sort_values(by = 'Global_Sales', \n                                                        ascending = False)\n    type_sales_pie = {'data': [{'values': type_sales_data[sale_name], \n                                'labels': type_sales_data.index, \n                                'domain': {'x': [0, .5]}, \n                                'hoverinfo': 'label + percent', \n                                'hole': 0.2, \n                                'type': 'pie'},],\n                      'layout': {'title': '%s sales by %s' %(sale_name, column_name), \n                                 'annotations': [{\n                                     'font': { 'size': 15}, \n                                     'showarrow': False, \n                                     'text': 'Amount in Millions', \n                                     'x': 0.1, \n                                     'y': 1.1},]}}\n\n    iplot(figure_or_data = type_sales_pie)","497bbe67":"type_sales_pie('Genre', 'NA_Sales')","0fe4e48f":"type_sales_pie('Genre', 'EU_Sales')","b5abdd73":"type_sales_pie('Genre', 'JP_Sales') ","34054521":"type_sales_pie('Genre', 'Global_Sales')","b8877335":"type_sales_pie('Platform', 'NA_Sales')","17eaa4aa":"type_sales_pie('Platform', 'EU_Sales')","ff8e2c97":"type_sales_pie('Platform', 'JP_Sales')","28db9a42":"type_sales_pie('Platform', 'Global_Sales')","138c86d4":"no_sales_platform = new_data.groupby(by = 'Platform')['NA_Sales', 'EU_Sales', \n                                                      'JP_Sales', 'Other_Sales', 'Global_Sales']\nno_sales_platform = no_sales_platform.sum().sort_values(by = 'Global_Sales', \n                                                        ascending = True).head(n = 10)\nno_sales_platform","085ba763":"platform_genre_data = new_data.groupby(by = ['Platform', 'Genre']).size()\nplatform_genre_data = platform_genre_data.reset_index().rename(columns = {0: \"Count\"})\n\nfig = px.scatter(platform_genre_data, x = 'Platform', y = 'Genre', \n                 size = 'Count', color = 'Count')\nfig.show()","6b87e7d4":"def globalsale_data(column_name):\n    column_globalsale_data = new_data.groupby(by = column_name)['Global_Sales']\n    column_globalsale_data = column_globalsale_data.sum().sort_values(ascending = False).head(n = 10)\n    \n    plt.figure(figsize = (15, 7))\n    name_globalsale_plot = sns.barplot(x = column_globalsale_data.index, \n                                       y = column_globalsale_data.values, \n                                       edgecolor = 'black', \n                                       linewidth = 2, \n                                       palette = 'colorblind')\n    name_globalsale_plot.set_xticklabels(textwrap.fill(name.get_text(), width = 10) for name in name_globalsale_plot.get_xticklabels())\n    name_globalsale_plot.set_xticklabels(name_globalsale_plot.get_xticklabels(), \n                                         fontdict = {'fontsize' : 12, 'color' : 'black'})\n    plt.ylabel('Sales in Millions')\n    plt.grid(False)","d7fe9cc4":"globalsale_data('Name')\nplt.title('Top 10 Games by Global Sales')\nplt.xlabel('Game')\nplt.show()","9b37f6d6":"globalsale_data('Publisher')\nplt.title('Top 10 Publisher by Global Sales')\nplt.xlabel('Publisher')\nplt.show()","06d61401":"name_count_data = pd.pivot_table(new_data, index = ['Name'],\n                                 aggfunc = {'Name': 'count', 'Global_Sales' : np.sum})\nname_count_data = name_count_data.rename(columns = {'Name' : 'Count'})\nname_count_data = name_count_data.sort_values(by = ['Count', 'Global_Sales'], \n                                              ascending = False)['Count'].head(n = 10)\n\nplt.figure(figsize = (15, 7))\nname_globalsale_plot = sns.barplot(x = name_count_data.index, \n                                   y = name_count_data.values, \n                                   edgecolor = 'black', \n                                   linewidth = 2, \n                                   palette = 'colorblind')\nname_globalsale_plot.set_xticklabels(textwrap.fill(name.get_text(), width = 10) for name in name_globalsale_plot.get_xticklabels())\nname_globalsale_plot.set_xticklabels(name_globalsale_plot.get_xticklabels(), \n                                     fontdict = {'fontsize' : 12, 'color' : 'black'})\nplt.xlabel('Game')\nplt.ylabel('Count')\nplt.title('Top 10 Games released on different platforms')\nplt.grid(False)\nplt.show()","7b399a2b":"plt.figure(figsize = (8, 8))\ncmap = sns.diverging_palette(250, 230, 90, 60, as_cmap=True)\nsns.heatmap(data = new_data.corr(), annot = True, cmap = cmap, \n            linewidths = 2, square = True, \n            linecolor = 'White', fmt = '.2f')\nplt.title('Correlation \\n', fontdict = {'fontsize': 20,  \n                                        'fontweight' : 'normal',\n                                        'color' : 'black'})\nplt.show()","2aa5ad37":"ProfileReport(data)","572ac403":"AV = AutoViz_Class()\ndf = AV.AutoViz(filename = '..\/input\/videogamesales\/vgsales.csv', \n                sep = ',', chart_format = 'svg', verbose = 2)","4b96a970":"from IPython.display import HTML\nstyle = \"<style> div.changeh { background-color: #FF5733; width: 350px; height: 40px;} <\/style>\"\nHTML(style)","0a9edc6e":"## Import\/Installing Modules <a id=\"installing-modules\"> <\/a> \n\n* First we need to install AutoViz to use it in this notebook. \n* Importing all the modules that will be necessary for this notebook. \n* To use shell commands, prefix the command with the ! character.","de09b5fa":"**Inference** - PCFX, GG, 3DO, TG16, WS and NG platforms made contributions only in Japan.","d0fff5c2":"**Inferences** - \n* As only year is provided, we can say that Shooter, Misc, Fighting, Sports, Action were the first game genres. \n* First Strategy game came in 1991 that is 11 years after the first game was released.","50afa41f":"**Inference** - Action was the most preferred genre.","e3e274c0":"**Inference** - Major contribution of sales in North America was by X360 Platform.","f07731b4":"## Exploratory Data Analysis (EDA) <a id = 'eda'> <\/a>","14d20d5c":"**Inference** - Major contribution of sales in Japan was by DS Platfrom.\n","f67b3aac":"#### If you found this notebook useful then upvote it.\n#### If found any error or a new approach to the problem then mention it in the comments section.","b9b559ba":"**Inference** - Globally, most contribution of sales was by PS2 Platfrom and the least by PCFX Platfrom.","b2d5ce8f":"**Inferences** - \n* North America has the most sales. \n* Around year 2009, North America's sales was twice as much as Europe.","0fb9ac95":"**Inference** - Majority of games were released between year 2006 and 2011.","774bfddc":"![word.png](attachment:word.png)","72a717b7":"**Infernece** - Major contribution of sales in Europe was by Action Genre.","ab67e222":"### 1. Pandas Profiling <a id = 'pandas-profiling'> <\/a>","6a540017":"## Word Cloud <a id = 'word-cloud'><\/a>\n* Before starting EDA, lets make a World Cloud.\n* First we open the image and use this image as a mask.\n* We will crop this image so that only controller is visible and unused white space is removed.\n* Change format of the image so that Word Cloud can work properly.\n* Prepare the data to fill in the World Cloud. We will only show Platform and Genre names. To make sure that platforms and genres who have more global sales have bigger name in World Cloud, then those who have less global sales, we sort the data before feeding it to World Cloud.","b69609a4":"**Inference** - Major contribution of sales in North America was by Action Genre.","1855421c":"  <center> <div class=\"changeh\"> <center> <H1> <font color = 'white'> Video Game Sales <\/font> <\/H1> <\/center> <\/div> <\/center>","9b78a104":"**Inference** - Nintendo platform has highest sales.","a78a2311":"**Inferences** - \n* On PS2 platform mostly Action and Sports genre were released.\n* On DS platform mostly Misc and Action genre were released.\n* On PS3 platform moslty Action genre was released.","fee7a18d":"**Inference** - Need for Speed: Most Wanted was the only game that was released on 12 different platforms.","8b3a7795":"* Counting the missing values.\n* We have 16598 records in our data. Out of that 271 records are missing from Year and 58 records from Publisher.\n* We will drop these records because removing them won't distrub our EDA.","faf32803":"## Missing Values <a id = 'missing-values'> <\/a>\n* Module missingno helps to visualize the distribution of missing values.\n* Shape will give the dimensionality of the DataFrame.","78e3197b":"**Infernce** - Major contribution of sales in Japan was by Role-Playing Genre.","a6f3cb7e":"**Inference** - Most of the games were published by Electonic Arts.","13cb5d8b":"**Inference** - Globally, most contribution of sales was by Action genre and the least by Strategy games.","a8fb159c":"## Table of Contents\n* [Import\/Installing Modules](#installing-modules)\n* [Reading Dataset](#reading-dataset)\n* [Missing Values](#missing-values)\n* [Data Type](#data-type)\n* [Descriptive Statistics](#descriptive-statistics)\n* [Word Cloud](#word-cloud)\n* [Exploratory Data Analysis (EDA)](#eda)\n* [Fast EDA](#fast-eda) - \n    * [Pandas Profiling](#pandas-profiling)\n    * [Autoviz](#autoviz)","91922693":"## Descriptive Statistics <a id = 'descriptive-statistics'> <\/a>\n*  Describe gives descriptive statistics of data distribution.\n    * count\n    * mean\n    * minimun, maximum values\n    * lower, 50, upper percentiles.\n* It excludes NaN values and categorical columns.","c18e09c4":"**Inference** - Most of the games were released on platform PS2 and DS while platform GG and PCFX had least preference.","a1983f01":"> ## Data type <a id = 'data-type'> <\/a>\n* Checking data types will help us understand how the data is stored and how to manipulate it further.\n* Year is stored as float64. We can also change it to int64.","9fa78f7a":"**Inference** - Wii Sports and GTA V are the most selling games in the world.","3fd10f46":"### 2. Autoviz <a id = 'autoviz'> <\/a> ","8b9b8278":"## Fast EDA <a id = 'fast-eda'> <\/a>\n* There are many methods by which EDA can be done fast.\n* This will save our time and can do more detailed analysis.\n* Here, we will use untampered data.\n* We will see only 2 modules by which we can achieve fast EDA.\n* Some modules by which we can do fast EDA in python are as follows -\n    * AutoViz\n    * DataPrep\n    * Dora\n    * Edaviz\n    * ExploriPy\n    * HoloViews\n    * Lens\n    * Pandas-profiling\n    * Pandas-summary\n    * SpeedML\n    * StatsModels\n    * Sweetviz\n    * Tpot","54b7fcf7":"**Inference** - Major contribution of sales in Europe was by PS3 Platfrom.","77d47586":"**Inference** - From 2000 to 2009 there was a good increase in sales.","4e4e8542":"## Reading Dataset <a id = 'reading-dataset'> <\/a>\n\n* Reading a comma-separated values(CSV) file into the DataFrame.\n* Extracting random samples from data.","4fd1af66":"**Inferences** -  \n* First game was released on platform 2600.\n* There was a gap from year 2006 - 2011 where a new plaform was not tried."}}