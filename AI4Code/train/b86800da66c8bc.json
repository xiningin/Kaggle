{"cell_type":{"8fa52454":"code","89242776":"code","5a3a7b80":"code","0474143d":"code","917e94ae":"code","b626272c":"code","ee78e145":"code","ce13d38a":"code","b8b01025":"code","7391fd77":"code","77580d51":"code","d4374b83":"code","5a37880c":"code","41c92c72":"code","233d9482":"code","49ed69a7":"markdown","64955877":"markdown","02e10066":"markdown","7b33b533":"markdown","aee49839":"markdown","481dc6a5":"markdown","3259974e":"markdown","b3d57617":"markdown","28d6cac0":"markdown","045cc0bc":"markdown","cdceefe3":"markdown"},"source":{"8fa52454":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89242776":"card = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ncard.columns","5a3a7b80":"card.isnull().any()","0474143d":"card['Class'].value_counts(normalize = True)","917e94ae":"v_cols = card.drop(columns=['Time', 'Amount', 'Class'])\nsns.boxplot(data=v_cols, palette=\"Set3\")","b626272c":"fraud = card.loc[card['Class'] == 1]\nno_fraud = card.loc[card['Class'] == 0]","ee78e145":"sns.scatterplot(x=\"Time\", y=\"Amount\", data=fraud)","ce13d38a":"print(\"The most fraud done in the transaction over the past 2 days was {}\".format(fraud.Amount.max()))\nprint(\"The average fraud done in the transaction over the past 2 days was {}\".format(fraud.Amount.mean()))","b8b01025":"sns.scatterplot(x=\"Time\", y=\"Amount\", data=no_fraud)","7391fd77":"print(\"The most non-fraud done in the transaction over the past 2 days was {}\".format(no_fraud.Amount.max()))\nprint(\"The average non-fraud done in the transaction over the past 2 days was {}\".format(no_fraud.Amount.mean()))","77580d51":"X_var=card.drop(['Class'], axis=1)\ny_var=card[\"Class\"]\nprint(X_var.shape)\nprint(y_var.shape)\nX=X_var.values\ny=y_var.values","d4374b83":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.70, test_size=0.30, random_state=1)\ncard_model = DecisionTreeClassifier()\ncard_model.fit(X_train, y_train)\ncard_preds = card_model.predict(X_test)\nprint(mean_absolute_error(y_test, card_preds))","5a37880c":"con_mat = confusion_matrix(y_test, card_preds)\ncon_mat","41c92c72":"tp = con_mat[0][0]\nfp = con_mat[0][1]\ntn = con_mat[1][1]\nfn = con_mat[1][0]\nprecision = (tp)\/(tp+fp)\naccuracy = (tp+tn)\/(tp+tn+fp+fn)\nsensitivity = (tp)\/(tp+fn)\nspecificity = (tn)\/(tn+fp)\nrecall_score = (tp)\/(tp+fp)","233d9482":"print(\"Precision:\", precision)\nprint(\"Accuracy:\", accuracy)\nprint(\"Sensitivity:\", sensitivity)\nprint(\"Specificity:\", specificity)\nprint(\"Recall Score:\", recall_score)","49ed69a7":"Scatterplot of the fraudulent transaction amount over the 2 day period","64955877":"Conclusion: It is .1727% likely that fraud will happen in this particular bank","02e10066":"There were about .1727% cases of fraud in the credit card transactions","7b33b533":"The specificity is the least accurate measurement in this classifier. Some of the \"no\" predictions may actually be false. The model appears to work well since a majority of scores are around 99%.","aee49839":"Confusion Matrix","481dc6a5":"Fraud amount during a specific time","3259974e":"Precision - Predicting \"yes\" and being correct\n\nAccuracy - Being correct with any prediction\n\nSensitivity - Predicting \"yes\" and being correct with the \"yes\" predictions (true positive rate)\n\nSpecificity - Predicting \"no\" and being correct with the \"no\" predictions (true negative rate)\n\nRecall Score - Being correct with all of the positive predictions","b3d57617":"Scatterplot of the non-fraudulent transaction amount over the 2 day period","28d6cac0":"Identifying which transactions are fraud with **Fraud = 1** and **Non-Fraud = 0**","045cc0bc":"PCA scatterplot","cdceefe3":"Check for missing values in the columns"}}