{"cell_type":{"d4326226":"code","96898615":"code","2d214eba":"code","7a098577":"code","2700bf36":"code","aa9f13aa":"code","80c85cdc":"code","2023b28c":"code","728de08e":"code","41baf23e":"code","5998f013":"code","74de309a":"code","906e0792":"code","7cbb4f71":"code","8e100738":"code","f2c1710b":"code","f60682bb":"code","6b8beb90":"code","96c41caf":"code","c27ca7b5":"code","3c59aad0":"code","90a3c828":"code","3c67bf37":"code","c092df8e":"code","c8f885f6":"code","224e2f28":"code","fb046e1d":"code","eb84b8d9":"code","80e5b44c":"code","c2a78834":"code","a4fce2b2":"code","382fd7ad":"code","839e433e":"code","c2828804":"code","c2276966":"code","7ac07a2f":"code","566d26c9":"code","7108733f":"code","de4d5f6f":"code","e1b422eb":"code","37c39a9b":"code","ea0f0de7":"code","42d966b2":"code","f31fbf27":"code","20dd1a4f":"code","f6f4874a":"code","9ab598cf":"code","1934b2c1":"code","49567d79":"code","a51674d5":"code","f96c2799":"code","25a4b66a":"code","077aeedc":"code","2176d659":"code","cb29ecdb":"code","194a9eee":"code","6d80c1b1":"code","611f82f0":"code","e868d76f":"code","eb9e2517":"code","ce9fb897":"code","49ed5199":"code","9350e9d3":"code","065bc55b":"code","c039bac5":"code","f02cf552":"code","0d58be1e":"code","5bf69ee3":"code","8c0ee48d":"code","1e3d5876":"code","3a294815":"code","e7346144":"code","893d3df7":"code","22f993ee":"code","266e5dd3":"code","a9b9f7a7":"code","c111b8b1":"code","34aa4f11":"code","9b5f0f14":"code","48b35e82":"code","da11c9d8":"code","70919fbe":"code","290dd782":"code","f6344ea0":"code","a1d4c02d":"code","7bd89982":"code","e6468c7f":"code","ac702e00":"code","cab5d74c":"code","479f9df8":"code","60ebaff0":"code","08f6894a":"code","e0b86311":"code","562de091":"code","e500b2db":"code","ebb56ddd":"code","822cc2ec":"code","ada80a26":"code","b3f0568f":"code","2bfca610":"code","f456daea":"code","918da708":"code","93f3f725":"code","ee257b2a":"code","ce57411f":"markdown","2f3ecdae":"markdown","c7840086":"markdown","9f6803cb":"markdown","ad2bdca4":"markdown","17809963":"markdown","308d628e":"markdown","160d5851":"markdown","20d9725b":"markdown","6df985bd":"markdown","e9e779cb":"markdown","fa40dceb":"markdown","a661ab81":"markdown","bf2e3bfd":"markdown","297267cc":"markdown","cfa1a69f":"markdown","319cde16":"markdown","fa518bd1":"markdown","faa76c74":"markdown","0439915c":"markdown","9fcbbccc":"markdown","7b989a0f":"markdown","ee7a14a9":"markdown","628a66e8":"markdown","68c864fd":"markdown","a0b9ad7e":"markdown","374ce188":"markdown","8f3a5588":"markdown","34380ede":"markdown","2661d9cf":"markdown","867159b0":"markdown","97d55e21":"markdown","f986b3b6":"markdown","f3bbec03":"markdown","674d9710":"markdown"},"source":{"d4326226":"#Importing all the necessary libraies\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\n\n\nimport datetime as dt\n\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n\nimport fbprophet\nfrom fbprophet import Prophet\n\nfrom fbprophet.diagnostics import cross_validation\nfrom fbprophet.diagnostics import performance_metrics\nfrom fbprophet.diagnostics import performance_metrics\n\nfrom fbprophet.plot import add_changepoints_to_plot","96898615":"# Import data and parse date columns\n\nstores=pd.read_csv('\/kaggle\/input\/retaildataset\/stores data-set.csv')\nfeatures=pd.read_csv('\/kaggle\/input\/retaildataset\/Features data set.csv', parse_dates=['Date'])\nsales=pd.read_csv('\/kaggle\/input\/retaildataset\/sales data-set.csv', parse_dates=['Date'])","2d214eba":"features.head(2)","7a098577":"features.shape","2700bf36":"features.info()","aa9f13aa":"features.describe()","80c85cdc":"stores.head()","2023b28c":"stores.shape","728de08e":"#Number of stores\nstores.Store.nunique()","41baf23e":"# Types of stores\nstores['Type'].unique()","5998f013":"sales.tail(2)","74de309a":"sales.shape","906e0792":"# Date unique values\nsales['Date'].nunique()","7cbb4f71":"# Holiday weeks\n\nsales_weekly = sales.groupby(['Date', 'IsHoliday'], as_index = False).agg({'Weekly_Sales':\"sum\"})","8e100738":"sales_weekly['IsHoliday'].value_counts()","f2c1710b":"# Total sales for 3 years\nsales['Weekly_Sales'].sum()\n","f60682bb":"#check for nan values in features\nfeatures.isna().sum()","6b8beb90":"#Visualize missing values (NaN) with Missingno Library in features\nmsno.matrix(features)","96c41caf":"#Check for NaN in sales\nsales.isna().sum()","c27ca7b5":"#Check for NaN in stores\nstores.isna().sum()","3c59aad0":"df=pd.merge(sales,features, on=['Store','Date', 'IsHoliday'], how='left')\n\ndf=pd.merge(df,stores, on=['Store'], how='left')","90a3c828":"df.head()","3c67bf37":"# df structure\ndf.shape","c092df8e":"# check total sales after joining\ndf['Weekly_Sales'].sum()","c8f885f6":"#check for missing values\n\ndf.isna().sum()","224e2f28":"#check for duplicates\n\ndf.duplicated().sum()","fb046e1d":"df = df.drop(columns = ['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4','MarkDown5', 'Size'],axis = 1)","eb84b8d9":"df.head()","80e5b44c":"#temperature unit conversion\ndf['Temperature'] = (df['Temperature']- 32) * 5.\/9.\n\n#factorize (Yes\/No to 1\/0 conversion)\nholidays_factor, types =df['IsHoliday'].factorize()\ndf['IsHoliday'] = holidays_factor\n\ndf.head()","c2a78834":"df.info()","a4fce2b2":"df.describe()","382fd7ad":"df['Y'] = df['Date'].dt.year","839e433e":"df['M'] = df['Date'].dt.month","c2828804":"df['D'] = df['Date'].dt.dayofyear","c2276966":"df['W'] = df['Date'].dt.weekofyear","7ac07a2f":"df.head()","566d26c9":"# There are 52 Weeks in a year \ndf['W'].nunique()","7108733f":"# There are 12 Months in a year \ndf['M'].nunique()","de4d5f6f":"df_average_sales_weekly = df.groupby('Date', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\n\ndf_average_sales_sorted = df_average_sales_weekly.sort_values('Weekly_Sales', ascending = False)\n\nplt.figure(figsize=(20,5))\n\nplt.plot(df_average_sales_weekly.Date, df_average_sales_weekly.Weekly_Sales, color = 'b')\n\nplt.show()","e1b422eb":"df_average_sales_monthly = df.groupby('M', as_index=False)\\\n    .agg({'Weekly_Sales': 'mean'})\nplt.figure(figsize=(20,5))\nplt.plot(df_average_sales_monthly.M, df_average_sales_monthly.Weekly_Sales, color = 'r')\nplt.show()","37c39a9b":"# Most profitable weeks\ndf_average_sales_sorted.head()","ea0f0de7":"# Compare weekly sales by years","42d966b2":"df10 = df.query('Y == 2010').groupby('D', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\ndf11 = df.query('Y == 2011').groupby('D', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\ndf12 = df.query('Y == 2012').groupby('D', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\nfig, ax = plt.subplots(figsize=(25,8))\nax.plot(df10.D, df10.Weekly_Sales, label = \"2010\")\nax.plot(df11.D, df11.Weekly_Sales, label = \"2011\")\nax.plot(df12.D, df12.Weekly_Sales, label = \"2012\")\nax.legend()\nplt.show()","f31fbf27":"# Sales sums distribution\n\nfig, ax = plt.subplots(figsize=(25,8))\n\ndf10['Weekly_Sales'].plot(kind='hist', title='Sales distribution', label = \"2010\");\n\ndf11['Weekly_Sales'].plot(kind='hist', label = \"2011\");\ndf12['Weekly_Sales'].plot(kind='hist', label = \"2012\");\n\nax.legend()\nplt.show()","20dd1a4f":"df_average_sales_weekly['Date'].tail(5)","f6f4874a":"# Rolling mean (window = 4)","9ab598cf":"df_average_sales_weekly['rol_month'] = df_average_sales_weekly['Weekly_Sales'].rolling(4).mean()","1934b2c1":"fig = plt.figure(figsize=(25,8))\nline1, = plt.plot(df_average_sales_weekly.Date, df_average_sales_weekly.rol_month, '--', color='red')\nline2, = plt.plot(df_average_sales_weekly.Date, df_average_sales_weekly.Weekly_Sales,  color='green')\n\nfig.suptitle('Rolling mean - window = 4', fontsize=24)\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Sales', fontsize=16)\n\nplt.legend((line2, line1), ['sum', 'rolling mean'])\n\n\n\nplt.show()","49567d79":"# holiday weeks are marked with red lines\ndf2=df.groupby(by=['Date'], as_index=False)['Weekly_Sales'].sum()\nf_1 = plt.figure(figsize=(12,6), dpi=100)\nax_1 = f_1.add_axes([0.0, 0.0, 0.9, 0.9])\nax_1.set_ylabel('Weekly_Sales')\nax_1.plot(df2['Date'], df2['Weekly_Sales'])\n\nfor x in df[df['IsHoliday']==1]['Date']:\n    ax_1.axvline(x=x, color='red', linewidth=0.5)","a51674d5":"df_SW = df.groupby('D', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\n\ndf_SW['differ'] = df_SW['Weekly_Sales'].diff()","f96c2799":"plt.figure(figsize=(20,5))\nplt.plot(df_SW.D, df_SW.differ, '--', color = 'b')\nplt.show()","25a4b66a":"df_SW2 = df.groupby('Date', as_index=False)\\\n    .agg({'Weekly_Sales': 'sum'})\n\ndf_SW2['differ'] = df_SW2['Weekly_Sales'].diff()","077aeedc":"plt.figure(figsize=(20,5))\nplt.plot(df_SW2.Date, df_SW2.differ, '--', color = 'b')\nplt.show()","2176d659":"df_type = df.groupby('Type', as_index=False).agg(Mean=('Weekly_Sales', 'mean'), Sum=('Weekly_Sales', 'sum'))\ndf_type","cb29ecdb":"plt.figure(figsize = (16,5))\nax = sns.barplot(x=\"Type\", y=\"Weekly_Sales\", hue=\"Y\", data=df, palette= \"Paired\")\nax.set_title('Mean weekly sales by years',fontsize=10)","194a9eee":"df_gr_type = df.groupby('Type', as_index = False)\\\n    .agg({'Weekly_Sales':'mean'})\\\n    .sort_values('Weekly_Sales', ascending = False)","6d80c1b1":"df_gr_type","611f82f0":"df_gr = df.groupby('Store', as_index = False)\\\n    .agg({'Weekly_Sales':'sum'})\\\n    .sort_values('Weekly_Sales', ascending = False)","e868d76f":"df_gr.head(5)","eb9e2517":"df_gr_u = df.groupby('Y', as_index = False)\\\n    .agg({'Unemployment':'mean'})\\\n    .sort_values('Unemployment', ascending = False)","ce9fb897":"df_gr_u","49ed5199":"fig = plt.figure(figsize=(25,8))\ndf_average_sales_weekly2 = df.groupby('Date', as_index=False)\\\n    .agg({'CPI': 'sum'})\ndf_average_sales_sorted = df_average_sales_weekly2.sort_values('CPI', ascending = False)\n\n\ndf_average_sales_weekly2['rol_month'] = df_average_sales_weekly2['CPI'].rolling(20).mean()\nline1 = plt.plot(df_average_sales_weekly2.Date, df_average_sales_weekly2.rol_month, '--', color='b')\n\n\nplt.plot(df_average_sales_weekly2.Date, df_average_sales_weekly2.CPI, color = 'r')\nplt.show()","9350e9d3":"df_gr_cpi = df.groupby('Y', as_index = False)\\\n    .agg({'CPI':'mean'})\\\n    .sort_values('CPI', ascending = False)","065bc55b":"df_gr_cpi","c039bac5":"df_average_sales_weekly2 = df.groupby('Date', as_index=False)\\\n    .agg({'Fuel_Price': 'sum'})\ndf_average_sales_sorted = df_average_sales_weekly2.sort_values('Fuel_Price', ascending = False)\n\nplt.figure(figsize=(20,5))\nplt.plot(df_average_sales_weekly2.Date, df_average_sales_weekly2.Fuel_Price, color = 'orange')\nplt.show()","f02cf552":"df.shape","0d58be1e":"labels=[\"less than -10 deg\", \"-10-0\", \"0-10\", \"10-15\", \"15-20\", \"20-25\", \"more than 25\"]\nbins=[-np.inf,-10,0,10,15,20,25, np.inf]\ndf['temperature_category'] = pd.cut(df['Temperature'], bins=bins, labels=labels,right=False) ","5bf69ee3":"df_gr_t = df.groupby('temperature_category', as_index = False)\\\n    .agg({'Weekly_Sales':'sum'})\\\n    .sort_values('Weekly_Sales', ascending = False)","8c0ee48d":"df_gr_t","1e3d5876":"data_tab = df['temperature_category'].value_counts()","3a294815":"data_tab","e7346144":"plt.figure(figsize = (12,5))\nax = sns.countplot(x=\"temperature_category\", data=df, palette=\"coolwarm\")\nax.set(xlabel=\"category\", ylabel = \"num\", title=\"Sales\")\nvals = ax.get_yticks()","893d3df7":"#Feature correletion analysis for store 20","22f993ee":"df20=df.where( df['Store'] == 20)\ndf20=df20.groupby(by=['Date'], as_index=False)[['Temperature', 'Fuel_Price', 'CPI', 'Unemployment', \n                                                  'IsHoliday', 'Weekly_Sales']].mean()\ndf20 = df20.set_index('Date')\ndf20.head()","266e5dd3":"corrMatrix20 = df20.corr()","a9b9f7a7":"corrMatrix20","c111b8b1":"plt.figure(figsize=(12,10))\nsns.heatmap(corrMatrix20, annot=True)\nplt.show()","34aa4f11":"#Data Preparation for Fbprophet\n\ndf1=df.groupby(by=['Date'], as_index=False)['Weekly_Sales'].sum()\n\ndf1 = df1.rename(columns = {'Date':'ds', 'Weekly_Sales':'y'})","9b5f0f14":"df1.tail()","48b35e82":"# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(df1)","da11c9d8":"#Range of weeks for forecast\nfuture_dates = pd.date_range(\"20121216\",\"20141230\", freq='W')","70919fbe":"future_dates = [pd.to_datetime(i) for i in future_dates]","290dd782":"future = pd.DataFrame([dt.datetime.strftime(i, '%Y-%m-%d') for i in future_dates],  columns=['ds'])","f6344ea0":"forecast = model.predict(future)\n\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())\n# plot forecast\nmodel.plot(forecast)\nplt.show()","a1d4c02d":"dates = pd.date_range(\"20111126\",\"20121110\", freq='W')\ndates = [pd.to_datetime(i) for i in dates]\ndates_for_forecast = pd.DataFrame([dt.datetime.strftime(i, '%Y-%m-%d') for i in dates],  columns=['ds'])","7bd89982":"forecast_dates = model.predict(dates_for_forecast)\n# summarize the forecast\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())\n# plot forecast\nmodel.plot(forecast_dates)\n\nplt.plot(df1.ds, df1.y, color = 'orange')\n\nplt.show()","e6468c7f":"df_grouped_20 = df.query('Store == 20')\\\n    .groupby(['Date', 'IsHoliday', 'CPI', 'Temperature'], as_index = False)\\\n    .agg({'Weekly_Sales':'sum'})","ac702e00":"df_grouped_20.head()","cab5d74c":"#Data Preparation for Fbprophet\n\ndf_grouped_20 = df_grouped_20.rename(columns = {'Date':'ds','Weekly_Sales':'y'})","479f9df8":"datetime_series = pd.to_datetime(df_grouped_20['ds'])\n\ndatetime_index = pd.DatetimeIndex(datetime_series.values)\n\nStore20_data=df_grouped_20.set_index(datetime_index)","60ebaff0":"Store20_data.head()","08f6894a":"Store20_data.shape","e0b86311":"train_data_pr1 = Store20_data.iloc[:len(Store20_data)-40]\ntest_data_pr1 = Store20_data.iloc[len(Store20_data)-40:]","562de091":"test_data_pr2 = test_data_pr1[['ds', 'IsHoliday', 'CPI', 'Temperature']]","e500b2db":"# define the model\nm1 = Prophet(changepoint_prior_scale=0.05, interval_width=0.95,growth = 'linear',seasonality_mode = 'multiplicative', \\\n               yearly_seasonality=20, weekly_seasonality=True, changepoint_range=0.9)\nm1.add_seasonality('weekly', period=7, fourier_order=15)\n\nm1.add_regressor('IsHoliday')\nm1.add_regressor('CPI')\nm1.add_regressor('Temperature')\nm1.fit(train_data_pr1)\n\n\n","ebb56ddd":"prophet_pred2 = m1.predict(test_data_pr2)\n\n\nprint(prophet_pred2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())\n# plot forecast\nm1.plot(prophet_pred2)\n\n\nplt.plot(Store20_data.ds, Store20_data.y, color = 'orange')\n\nplt.show()","822cc2ec":"m1.plot_components(prophet_pred2);","ada80a26":"Store20_data_2 = Store20_data[['ds', 'IsHoliday', 'CPI', 'Temperature']]","b3f0568f":"prophet_pred2 = m1.predict(Store20_data_2)\n\n\nprint(prophet_pred2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())\n# plot forecast\nm1.plot(prophet_pred2)\n\n\nplt.plot(Store20_data.ds, Store20_data.y, color = 'orange')\n\nfor x in Store20_data[Store20_data['ds']=='2012-12-10']['ds']:\n    plt.axvline(x=x, color='red', linewidth=0.5, ls='--', label='2012-12-10')\n    \n\nplt.legend()\n\nplt.show()","2bfca610":"prophet_pred3 = prophet_pred2[['ds','yhat']]","f456daea":"df_ds=pd.merge(Store20_data, prophet_pred3, on=['ds'], how='left')","918da708":"df_ds['diff'] = (df_ds['y']-df_ds['yhat'])\/df_ds['y']","93f3f725":"x1 = df_ds['ds']\ny1 = df_ds['diff']\nfig, ax = plt.subplots(figsize=(20,5))\nax.plot(x1.values, y1.values, c='r')","ee257b2a":"df_ds[['diff']].describe()","ce57411f":"Sales analysis by dates, different types of stores and conditions","2f3ecdae":"Top-5 stores by sales","c7840086":"### Drop MarkDown columns from analysis","9f6803cb":"# 3 - Forecasting","ad2bdca4":"Difference of Weekly Sales sum by day of year compared with a previous day of year","17809963":"#### Out of sample overall Sales forecast with Fbprophet model","308d628e":"### Fuel Price tendency","160d5851":"# correlation matrix","20d9725b":"### Temperature analysis","6df985bd":"Plot weekly sales mean by months","e9e779cb":"# 2 - \u0421ategorical data analysis","fa40dceb":"#### In sample store 20 Sales forecast with Fbprophet model","a661ab81":"For further analysis, let's add the columns of the year, month, date of year and week number","bf2e3bfd":"Take CPI, Temperature, IsHoliday as regressors for our model","297267cc":"## This notebook is divided into three parts\n- Exploratory data analysis\n- \u0421ategorical data analysis\n- Time series forecasting with Fbprophet (In-Sample and Out-Sample Forecast, forecast with and without regressors)","cfa1a69f":"# The correlation of features","319cde16":"### Table stores\nAnonymized information about the 45 stores, indicating the type and size of store","fa518bd1":"Plot weekly sales sums","faa76c74":"Difference of Weekly Sales sum by date compared with a previous date","0439915c":"# Retail Analytics\nVisualization and forecasting","9fcbbccc":"### Unemployment analysis","7b989a0f":"### Check for missing values (NaN)","ee7a14a9":"The most profitable weeks and months coincide with the holidays of Christmas and Thanksgiving","628a66e8":"### Table features\nAdditional data related to the store, department and regional activity for the given dates.","68c864fd":"Fbprophet with regressors","a0b9ad7e":"2012 sales do not have significant positive emissions like in 2010 and 2011 because of lack of data on 2012 december holidays weeks","374ce188":"### Table sales\nHistorical sales data","8f3a5588":"### Sales analysis by store types","34380ede":"Fbprophet without regressors","2661d9cf":"## 1 - Exploratory Data Analysis (EDA)","867159b0":"### The consumer price index\n","97d55e21":"#### In sample overall Sales forecast with Fbprophet model","f986b3b6":"### Source of data:\n https:\/\/www.kaggle.com\/manjeetsingh\/retaildataset","f3bbec03":"# Data Pre-Processing\n### Merge the information of 3 tables (sales, features, stores) into one dataframe df","674d9710":"### Generate descriptive statistics on df "}}