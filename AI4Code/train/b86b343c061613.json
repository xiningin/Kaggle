{"cell_type":{"af8f1581":"code","482a6df3":"code","df3879ef":"code","1d88bb4a":"code","e01bf0b0":"code","64843a3f":"code","103a42a8":"code","8ca40575":"code","bccd3a9c":"code","f9d106d7":"code","18e9b702":"code","cf7ee243":"code","617f803c":"code","4b737080":"code","2a9bea0e":"code","7fb6dbf1":"code","716b0896":"code","cf04597b":"code","10a77b67":"code","79145268":"code","1542f16e":"code","f13ad2e0":"code","969c25b6":"code","a1d2871c":"code","4a5f6da6":"code","7ba135c1":"code","34d6278f":"code","41c6e6d9":"code","ff66c6bc":"code","f2473347":"markdown","12a4e155":"markdown","7d7f99d5":"markdown","3ebe6444":"markdown","0114a57d":"markdown","33cfd553":"markdown","901ede3a":"markdown","532b2738":"markdown","f08f8604":"markdown","fec48336":"markdown"},"source":{"af8f1581":"import numpy as np\nimport pandas as pd\nimport os\nfrom google.cloud import bigquery\n# For this Notebook, we will be using the Nakamoto python \n# module found here: https:\/\/github.com\/YazzyYaz\/nakamoto-coefficient\n!pip install nakamoto","482a6df3":"client = bigquery.Client()\nethereum_dataset_ref = client.dataset('crypto_ethereum_classic', project='bigquery-public-data')","df3879ef":"# SQL query needed to get top 10K Ethereum Classic balances for the day\nquery = \"\"\"\n#standardSQL\n-- MIT License\n-- Copyright (c) 2018 Evgeny Medvedev, evge.medvedev@gmail.com\nwith double_entry_book as (\n    -- debits\n    select to_address as address, value as value\n    from `bigquery-public-data.crypto_ethereum_classic.traces`\n    where to_address is not null\n    and status = 1\n    and (call_type not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n    union all\n    -- credits\n    select from_address as address, -value as value\n    from `bigquery-public-data.crypto_ethereum_classic.traces`\n    where from_address is not null\n    and status = 1\n    and (call_type not in ('delegatecall', 'callcode', 'staticcall') or call_type is null)\n    union all\n    -- transaction fees debits\n    select miner as address, sum(cast(receipt_gas_used as numeric) * cast(gas_price as numeric)) as value\n    from `bigquery-public-data.crypto_ethereum_classic.transactions` as transactions\n    join `bigquery-public-data.crypto_ethereum_classic.blocks` as blocks on blocks.number = transactions.block_number\n    group by blocks.miner\n    union all\n    -- transaction fees credits\n    select from_address as address, -(cast(receipt_gas_used as numeric) * cast(gas_price as numeric)) as value\n    from `bigquery-public-data.crypto_ethereum_classic.transactions`\n)\nselect address, \nsum(value) \/ 1000000000 as balance\nfrom double_entry_book\ngroup by address\norder by balance desc\nlimit 10000\n\"\"\"\n\n# We pass the query to the client\nquery_job = client.query(query)\niterator = query_job.result()","1d88bb4a":"rows = list(iterator)\n# Transform the rows into a nice pandas dataframe\nbalances = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))","e01bf0b0":"# Now that we have a dataframe of the top 100k balances for the day on ETC,\n# it's time to import it into a CustomSector in nakamoto to begin analysis\n\nfrom nakamoto.sector import CustomSector\n\n# data passed into nakamoto must be as a numpy array\nbalance_data = np.array(balances['balance'])\ntype(balance_data)","64843a3f":"# We build a config dictionary for Plotly like this:\nnakamoto_config = {\n    'plot_notebook': True,\n    'plot_image_path': None\n}\n\n# We also need a currency name and sector type, which is used for plotting information\ncurrency = 'ETC'\nsector_type = 'daily balance'\n\n# Since our balance data is sorted descending, we need to flip the data\n# for a proper gini and lorenz, otherwise the coefficient comes back negative\nbalance_data = balance_data[::-1]\n\n# Now, we instantiate the balance object\nbalance_sector = CustomSector(balance_data,\n                             currency,\n                             sector_type,\n                             **nakamoto_config)","103a42a8":"# Let's get back the gini coefficient\nbalance_sector.get_gini_coefficient()","8ca40575":"balance_sector.get_nakamoto_coefficient()","bccd3a9c":"balance_sector.get_plot()","f9d106d7":"query = \"\"\"\n#standardSQL\n-- MIT License\n-- Copyright (c) 2019 Yaz Khoury, yaz.khoury@gmail.com\nWITH mined_block AS (\n  SELECT miner, DATE(timestamp)\n  FROM `bigquery-public-data.crypto_ethereum_classic.blocks` \n  WHERE DATE(timestamp) > DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n  ORDER BY miner ASC)\nSELECT miner, COUNT(miner) AS total_block_reward \nFROM mined_block \nGROUP BY miner \nORDER BY total_block_reward ASC\n\"\"\"\n\n# We pass the query to the client\nquery_job = client.query(query)\niterator = query_job.result()","18e9b702":"rows = list(iterator)\n# Transform the rows into a nice pandas dataframe\nmining_rewards = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\nmining_rewards_data = np.array(mining_rewards['total_block_reward'])","cf7ee243":"sector_type = 'mining_rewards'\nmining_rewards_sector = CustomSector(mining_rewards_data,\n                             currency,\n                             sector_type,\n                             **nakamoto_config)","617f803c":"# Mining Gini\nmining_rewards_sector.get_gini_coefficient()","4b737080":"# Nakamoto Coefficient\nmining_rewards_sector.get_nakamoto_coefficient()","2a9bea0e":"mining_rewards_sector.get_plot()","7fb6dbf1":"from nakamoto.sector import Market\n\nmarket_url = \"https:\/\/coinmarketcap.com\/currencies\/ethereum-classic\/#markets\"\nmarket_sector = Market(currency, market_url, **nakamoto_config)","716b0896":"# Market Gini\nmarket_sector.get_gini_coefficient()","cf04597b":"market_sector.get_nakamoto_coefficient()","10a77b67":"market_sector.get_plot()","79145268":"from nakamoto.sector import Client, Geography\n\nclient_sector = Client(currency, **nakamoto_config)\ngeography_sector = Geography(currency, **nakamoto_config)","1542f16e":"# Client Gini\nclient_sector.get_gini_coefficient()","f13ad2e0":"# Geography Gini\ngeography_sector.get_gini_coefficient()","969c25b6":"# Client Nakamoto\nclient_sector.get_nakamoto_coefficient()","a1d2871c":"# Geography Nakamoto\ngeography_sector.get_nakamoto_coefficient()","4a5f6da6":"client_sector.get_plot()","7ba135c1":"geography_sector.get_plot()","34d6278f":"from nakamoto.coefficient import Nakamoto\n\n\nsector_list = [geography_sector, \n               market_sector, \n               client_sector,  \n               balance_sector,\n               mining_rewards_sector]\n\nnakamoto = Nakamoto(sector_list)","41c6e6d9":"# Minimum Nakamoto Coefficient\nnakamoto.get_minimum_nakamoto()","ff66c6bc":"# Maximum Gini Coefficient\nnakamoto.get_maximum_gini()","f2473347":"## Nakamoto Coefficient of Wealth Distribution on Blockchain Addresses\n\nHere, we will first measure the wealth distribution and income inequality among all Ethereum Classic addresses, where we limit our measurement to the top 10k accounts.\n\nWe provide the query here for getting the top 10k balances for the day which was taken from [the article here](https:\/\/medium.com\/google-cloud\/how-to-query-balances-for-all-ethereum-addresses-in-bigquery-fb594e4034a7). ","12a4e155":"## Lorenz Curve\n\nThe lorenz curve can plot distribution of inequality. It has a straight line used as a measure of perfect equality. The curve, called the Lorenz curve highlights how far away the entities are from perfect equality.\n\nWe pass a line through the 51% mark to highlight the influence of the minimum number of entities who are capable of compromising the system. The minimum Nakamoto coefficient is the number of entities in red.","7d7f99d5":"## Nakamoto Coefficient\n\nNakamoto coefficient is a measure of the minimum amount of entities required to achieve > 51% control or influence to compromise a subsystem. In this example, we are measuring the minimum number of entities required to control more than 51% of the entire ETC circulating supply.","3ebe6444":"## Gini\nThe Gini coefficient is a value between 0 and 1, with 0 being perfect equality and 1 being perfect inequality. It helps understand measurement of inequality. In this example, we measure inequality distribution using balances per address. The assumption here is that each person has only 1 address; Top addresses also belong to exchanges, which use their own accounting software on their app; Only top 10k balances analyzed, so not a complete picture.","0114a57d":"## Client and Geography Nakamoto Coefficient\n\nHere, we have built in sector classes for `Geography` (mining nodes by country) and `Client` (mining nodes by client software) for ETC and ETH because the built-in sector takes data from [Ethernodes.org](http:\/\/ethernodes.org) which doesn't distinguish between `chainId`. We plan on being able to separate two datasets, but for now, it's assumed as the Client and Geography Nakamoto coefficients of EVM datasets.","33cfd553":"## Market Nakamoto Coefficient Of Ethereum Classic Volume By Exchange\n\nWe will now measure the total 24 hour volume by the exchanges that trade Ethereum Classic. We will look into the distribution of ETC inequality among exchanges and the minimum amount of exchanges needed to compromise 51% of total circulating supply of ETC in exchanges.\n\nFor this, we use the special sector class `Market`. We pass it a CoinMarketCap `#market` type of url like the following we will use for ETC: `https:\/\/coinmarketcap.com\/currencies\/ethereum-classic\/#markets`","901ede3a":"## Mininmum Nakamoto and Maximum Gini Coefficient of All Ethereum Classic Sectors\n\nTo get an overall idea of all the subsystems and the minimum nakamoto of all minimum nakamoto coefficients in the sectors as well as maximum gini which is most centralized\/inequal sector, we use `Nakamoto` class for analysis.","532b2738":"Now, we will once again get the Gini, Nakamoto and Lorenz Plot of the Mining Reward Counts Per Miner in the Past 30 Days.","f08f8604":"# Measuring Decentralization of Ethereum Classic using Nakamoto Library on Python with Google BigQuery\n\n[Nakamoto](https:\/\/github.com\/YazzyYaz\/nakamoto-coefficient) is a python library built to measure the Nakamoto Coefficient as presented by the Medium article \"[Quantifying Decentralization](https:\/\/news.earn.com\/quantifying-decentralization-e39db233c28e)\".\n\nNakamoto is a measurement of the minimum entity needed to compromise a subsystem of the blockchain, or 51% attack it. It is not just limited to the hashrate of the blockchain but can used to measure wealth distribution, exchange volume, code contribution. \n\nNakamoto module here will go over each subsystem example and how to generate the Nakamoto Coefficient, the Gini Coefficient (to measure inequality distribution), and the Lorenz Curve (to measure curve to perfect equality).\n\nThis notebook will also be using Google BigQuery with the Ethereum Classic Dataset to measure two subsytems of the Nakamoto Coefficient.\n\nLet's get started!\n\nThe module we will be running is called `nakamoto` and can be installed by running the following chunk.","fec48336":"## Nakamoto Coefficient of Miner Reward Count By Miner Address on Ethereum Classic\n\nHere, we will use Google BigQuery Ethereum Classic Dataset to run an SQL query to get back the total number of times a miner received a block reward in the last month. We will measure the income inequality by block reward count. This of course assumes the rewards are divided by entities, but of course those addresses can belong to pools."}}