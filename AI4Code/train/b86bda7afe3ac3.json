{"cell_type":{"73ba5f46":"code","229339b6":"code","7578055f":"code","7edfee15":"code","06e73fac":"code","ed0668d2":"code","1dcfff97":"code","33ee7e61":"code","983d7764":"code","ac1b64b2":"code","584a1536":"code","05621768":"code","25cc669e":"code","4ad3ecf5":"code","c227ce72":"code","ee71b9a4":"code","636109e5":"code","c4c0528b":"code","0ee75869":"code","9cc0b12e":"code","bf827316":"code","5700aff7":"code","dc2077f9":"code","6fb71cd2":"code","90f09507":"code","71658996":"code","d61bc902":"code","18973250":"code","1c6b5fab":"code","761f30e7":"code","0b463669":"code","44fdeeb3":"code","079c358b":"code","63cdbae2":"code","2c0d917b":"code","13b57c3d":"code","3fd6839c":"code","13393b5f":"code","10f56b8f":"code","f4d91b6d":"code","3ac55f44":"code","8131de39":"code","82f0e160":"code","44809124":"code","9380817a":"code","05f8623f":"code","e1cb4432":"code","ed577f03":"code","4c191166":"code","603267a9":"code","cb373228":"code","ef7c1628":"code","06e2d839":"code","0eea56bd":"code","a951ce68":"code","e3423dfb":"code","0a2d1957":"code","711527c0":"code","a3ea8959":"code","528342d7":"code","aa2db374":"code","65b82bb8":"code","697540ff":"code","a69d423e":"code","9219cc09":"code","90472fac":"code","d47d290b":"code","11f886e9":"code","65de80d7":"code","b085adc8":"code","e3a30159":"code","a4e594d8":"code","1254e0ab":"code","06dc27da":"code","087f25cc":"code","3c6e15ee":"code","5afd9a09":"code","ef500de6":"code","30aedc2b":"code","c0dce75a":"code","6feafcdc":"code","b9532e97":"code","af53fe64":"code","d757527e":"code","0cd14da8":"code","93e94cdd":"code","a9a4a0b3":"code","e3032cb1":"code","a8ba194c":"code","3f85f33d":"code","3dec345b":"code","cb3f400a":"code","29f37d3c":"code","1f26096e":"code","1755edd3":"code","9b6aadf9":"code","8f48ccad":"code","5343f082":"code","33a94d24":"code","de62dbfa":"code","e5b746fe":"code","c52da003":"code","13d04458":"code","6493579f":"code","52f9fed2":"code","052d8006":"markdown","a051b67a":"markdown","83f1ff0c":"markdown","7d5e0cc8":"markdown","26c677e8":"markdown","e7cded16":"markdown","f7e781ee":"markdown","34326f07":"markdown","7e0bd36c":"markdown","18cf364c":"markdown","56993256":"markdown","324d84fe":"markdown"},"source":{"73ba5f46":"#test='test'\ntest='varza'\nsample=0.05","229339b6":"import sys\npackage_dir = '..\/input\/autokeras-april-2021'\nsys.path.insert(0, package_dir)","7578055f":"import matplotlib.pyplot as plt\nimport seaborn as sns, numpy as np","7edfee15":"from sklearn.linear_model import Ridge\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom scipy.stats import rankdata","06e73fac":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.feature_extraction.text import TfidfVectorizer","ed0668d2":"import os\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nimport autokeras as ak","1dcfff97":"pseudoscores_df = pd.read_csv(\"..\/input\/pseudoscores-jigsaw-toxic-comments\/validation_data_pseudo_scores_clasament.csv\",index_col=0)\n#https:\/\/www.kaggle.com\/crischir\/auto-keras-text-regression-cpu\/edit\/run\/85744222\nif test =='test':\n    pseudoscores_df=pseudoscores_df.sample(frac=sample)","33ee7e61":"pseudoscores_df['score']=pseudoscores_df['score']+2.90","983d7764":"pseudoscores_df.head(1)","ac1b64b2":"df = pd.read_csv(\"..\/input\/jigsaw-score-augumentation\/jigsaw_train_hate_annotationprob.csv\",index_col=0)\nif test =='test':\n    df=df.sample(frac=sample)","584a1536":"df.describe()","05621768":"ruddit_df = pd.read_csv(\"..\/input\/ruddit-jigsaw-dataset\/Dataset\/ruddit_with_text.csv\",index_col=0)\nif test =='test':\n    ruddit_df=ruddit_df.sample(frac=sample)","25cc669e":"ruddit_df.head()","4ad3ecf5":"ruddit_df.describe()","c227ce72":"df['target']=df['proposed_score3']+0.1*df['offensive_agreement_rating']","ee71b9a4":"df[\"score_align\"]=(df['target']+0.0667)*(20.597967\/5.783141)\n","636109e5":"df['target']=df[\"score_align\"]","c4c0528b":"df= df[['text', 'target']]","0ee75869":"pseudoscores_df.rename(columns={\"score\": 'target'}, inplace = True)","9cc0b12e":"df1=pseudoscores_df[['text', 'target']]","bf827316":"mermeleala_df=df.append(df1)","5700aff7":"mermeleala_df.describe()","dc2077f9":"mermeleala_df.tail()","6fb71cd2":"len(mermeleala_df)","90f09507":"x = df['target']\nax = sns.displot(x, height=6, aspect=4, kde=True)\nplt.figure(figsize=(5,40))\nplt.show()","71658996":"#df[\"target\"]=df['target']+0.066618","d61bc902":"# ruddit_df['offensiveness_score']=ruddit_df['offensiveness_score']+0.889000\n\n# ruddit_df['offensiveness_score']=ruddit_df['offensiveness_score']*3.1091","18973250":"ruddit_df.rename(columns={'txt':'text','offensiveness_score':'target'},inplace=True)\n","1c6b5fab":"\nruddit_df= ruddit_df[['text', 'target']]","761f30e7":"from sklearn.model_selection import train_test_split\n\ntrain, valid = train_test_split(df, test_size=0.10)\n#valid, test = train_test_split(valid, test_size=0.3)","0b463669":"df_test=pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\",index_col=0)\nif test =='test':\n    df_test=df_test.sample(frac=sample)","44fdeeb3":"comments_to_score=pd.read_csv(\"\/kaggle\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\",index_col=0)\nif test =='test':\n    comments_to_score=comments_to_score.sample(frac=sample)","079c358b":"X_less_toxic =df_test.less_toxic.values\nX_more_toxic =df_test.more_toxic.values\nX_comments_to_score =comments_to_score.text.values","63cdbae2":"train_data = train['text'].values\ntrain_target = train['target'].values\n\nvalid_data = valid['text'].values\nvalid_target = valid['target'].values\n\nprint(train_data.shape, train_target.shape)\nprint(valid_data.shape, valid_target.shape)","2c0d917b":"# Initialize the text regressor.\n#reg = ak.TextRegressor(overwrite=True, max_trials=2,directory='\/kaggle\/working\/models',loss='MeanAbsolutePercentageError',tuner='hyperband')  # It tries 10 different models.\nreg = ak.TextRegressor(overwrite=True, max_trials=2,directory='\/kaggle\/working\/models',loss='MeanAbsolutePercentageError')  # It tries 10 different models.\n# Feed the text regressor with training data.\nreg.fit(train_data, train_target, epochs=4)\n# Predict with the best model.\npredicted_y = reg.predict(valid_data)\n# Evaluate the best model with testing data.\nprint(reg.evaluate(valid_data, valid_target))","13b57c3d":"#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np1 = reg.predict(X_less_toxic).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np2 = reg.predict(X_more_toxic).squeeze().tolist()#help(reg)","3fd6839c":"def compare(p1,p2):\n    z=0\n    k=0\n    n=len(p1)\n    for i in range(len(p1)):\n        if p1[i]< p2[i]:\n            z=z+1\n        else:\n            k=k+1\n            #print('nu')\n    print(z\/n)\n    return z\/n","13393b5f":"# Validation Accuracy\ncompare(p1,p2)","10f56b8f":"scored_sub=reg.predict(X_comments_to_score).squeeze().tolist()","f4d91b6d":"comments_to_score['score1_rank']=rankdata( scored_sub, method='ordinal') ","3ac55f44":"comments_to_score['score1_df']=scored_sub","8131de39":"comments_to_score.head()","82f0e160":"input_node = ak.TextInput()\noutput_node = ak.TextToIntSequence()(input_node)\noutput_node = ak.Embedding()(output_node)\n# Use separable Conv layers in Keras.\noutput_node = ak.ConvBlock(separable=True)(output_node)\n#output_node = ak.ConvBlock(separable=True)(output_node)\noutput_node = ak.RegressionHead()(output_node)\nreg = ak.AutoModel(\n    inputs=input_node, outputs=output_node, overwrite=True, max_trials=3\n)\nreg.fit(train_data, train_target, epochs=7,validation_split=0.15)","44809124":"#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np3 = reg.predict(X_less_toxic).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np4 = reg.predict(X_more_toxic).squeeze().tolist()\n","9380817a":"# Validation Accuracy\ncompare(p3,p4)","05f8623f":"scored_sub=reg.predict(X_comments_to_score).squeeze().tolist()\ncomments_to_score['score2_rank']=rankdata( scored_sub, method='ordinal') \ncomments_to_score['score2_df_agregat']=scored_sub","e1cb4432":"df1 = pd.read_csv(\"..\/input\/jigsaw-score-augumentation\/jigsaw_train_hate_annotationprob.csv\",index_col=0)\nif test =='test':\n    df1=df1.sample(frac=sample)","ed577f03":"vectorizor = TfidfVectorizer(analyzer='char_wb', max_df=0.8, min_df=1, ngram_range=(1, 3) )","4c191166":"%%time\nX = vectorizor.fit_transform(df1['text'])\ntemp_score = df1[\"proposed_score\"].values\ny=np.around ( temp_score ,decimals = 2)","603267a9":"%%time\nregressor=Ridge(alpha=0.7)\nregressor.fit(X, y)","cb373228":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['df_p0_score1_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['df_p0_score1']=temp_score\ncomments_to_score.head()","ef7c1628":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np11 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np12 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()\n# Validation Accuracy\ncompare(p11,p12)","06e2d839":"vectorizor = TfidfVectorizer(analyzer='char_wb', max_df=0.6, min_df=1, ngram_range=(1, 4) )","0eea56bd":"%%time\nX = vectorizor.fit_transform(df1['text'])\ntemp_score = df1[\"proposed_score2\"].values\ny=np.around ( temp_score ,decimals = 2)","a951ce68":"%%time\nregressor=Ridge(alpha=0.7)\nregressor.fit(X, y)","e3423dfb":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['df_p2_score1_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['df_p2_score1']=temp_score\ncomments_to_score.head()","0a2d1957":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np11 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np12 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()\n# Validation Accuracy\ncompare(p11,p12)","711527c0":"vectorizor = TfidfVectorizer(analyzer='char_wb', max_df=0.6, min_df=0.1, ngram_range=(1, 4) )","a3ea8959":"%%time\nX = vectorizor.fit_transform(df1['text'])\ntemp_score = df1[\"proposed_score3\"].values\ny=np.around ( temp_score ,decimals = 2)","528342d7":"%%time\nregressor=Ridge(alpha=0.7)\nregressor.fit(X, y)","aa2db374":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['df_p3_score1_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['df_p3_score1']=temp_score\ncomments_to_score.head()","65b82bb8":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np13 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np14 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()\n# Validation Accuracy\ncompare(p13,p14)","697540ff":"ruddit_df.head()","a69d423e":"vectorizor = TfidfVectorizer(analyzer='char_wb', max_df=0.8, min_df=1, ngram_range=(2, 5) )","9219cc09":"%%time\nX = vectorizor.fit_transform(ruddit_df['text'])\ntemp_score = ruddit_df[\"target\"].values\ny=np.around ( temp_score ,decimals = 3)","90472fac":"%%time\nregressor=Ridge(alpha=0.5)\nregressor.fit(X, y)","d47d290b":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['ruddit_score1_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['ruddit_score1']=temp_score\ncomments_to_score.head()","11f886e9":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np5 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np6 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()","65de80d7":"# Validation Accuracy\ncompare(p5,p6)","b085adc8":"%%time\nX = vectorizor.fit_transform(mermeleala_df['text'])\ntemp_score = mermeleala_df[\"target\"].values\ny=np.around ( temp_score ,decimals = 3)","e3a30159":"%%time\nregressor=Ridge(alpha=0.5)\nregressor.fit(X, y)","a4e594d8":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np7 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np8 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()","1254e0ab":"# Validation Accuracy\ncompare(p5,p6)","06dc27da":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['aggregated_score2_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['aggregated_score2']=temp_score\ncomments_to_score.head()","087f25cc":"%%time\nX = vectorizor.fit_transform(df['text'])\ntemp_score = df[\"target\"].values\ny=np.around ( temp_score ,decimals = 3)","3c6e15ee":"%%time\nregressor=Ridge(alpha=0.5)\nregressor.fit(X, y)","5afd9a09":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np9 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np10 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()","ef500de6":"# Validation Accuracy\ncompare(p7,p8)","30aedc2b":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['df_score2_rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['dfscore2']=temp_score\ncomments_to_score.head()","c0dce75a":"df.head()","6feafcdc":"extend_df = pd.read_csv(\"..\/input\/jigsaw-score-augumentation\/jigsaw_train_hate_annotationprob.csv\",index_col=0)\nif test =='test':\n    extend_df=extend_df.sample(frac=sample)","b9532e97":"%%time\nX = vectorizor.fit_transform(extend_df['text'])\ntemp_score = extend_df[\"offensive_agreement_rating\"].values\ny=np.around ( temp_score ,decimals = 3)","af53fe64":"%%time\nregressor=Ridge(alpha=0.5)\nregressor.fit(X, y)","d757527e":"#comments_to_score_set=vectorizor.transform(comments_to_score['text'])\n#preds = reg.predict(X_less_toxic).squeeze().tolist()\n#p1 = predictor.predict(X_less_toxic)\np11 = regressor.predict(vectorizor.transform(X_less_toxic)).squeeze().tolist()\n#p2 = predictor.predict(X_more_toxic)\np12 = regressor.predict(vectorizor.transform(X_more_toxic)).squeeze().tolist()","0cd14da8":"# Validation Accuracy\ncompare(p9,p10)","93e94cdd":"comments_to_score_set=vectorizor.transform(comments_to_score['text'])\ntemp_score=regressor.predict(comments_to_score_set)\ncomments_to_score['df_score2_1rank']=rankdata( temp_score, method='ordinal')\ncomments_to_score['dfscore2_1']=temp_score\ncomments_to_score.head()","a9a4a0b3":"comments_to_score.head(50)","e3032cb1":"comments_to_score.columns","a8ba194c":"comments_to_score['grand_slam']=comments_to_score['score1_rank']+comments_to_score['score2_rank']+comments_to_score['ruddit_score1_rank']+comments_to_score['aggregated_score2_rank']+comments_to_score['df_score2_rank']+comments_to_score['df_score2_1rank']+comments_to_score['df_p0_score1_rank']+comments_to_score['df_p2_score1_rank']+comments_to_score['df_p3_score1_rank']","3f85f33d":"comments_to_score['grand_slam_ranks']=rankdata( comments_to_score['grand_slam'], method='ordinal')","3dec345b":"#comments_to_score['score']=scored_sub","cb3f400a":"submission=comments_to_score.loc[:,['grand_slam_ranks']]\n","29f37d3c":"submission.rename(columns={\"grand_slam_ranks\": 'score'}, inplace = True)","1f26096e":"submission.to_csv('submission.csv')","1755edd3":"submission.head()","9b6aadf9":"comments_to_score.to_csv('\/kaggle\/working\/comments_to_score.csv')","8f48ccad":"df_test.head()","5343f082":"df_test['p1']=p1\ndf_test['p2']=p2\ndf_test['p3']=p3\ndf_test['p4']=p4\ndf_test['p5']=p5\ndf_test['p6']=p6\ndf_test['p7']=p7\ndf_test['p8']=p8\ndf_test['p9']=p9\ndf_test['p10']=p10","33a94d24":"(df_test['p2']-df_test['p1']).sum()","de62dbfa":"(df_test['p4']-df_test['p3']).sum()","e5b746fe":"(df_test['p6']-df_test['p5']).sum()","c52da003":"(df_test['p8']-df_test['p7']).sum()","13d04458":"(df_test['p10']-df_test['p9']).sum()","6493579f":"# submission=comments_to_score[['score']]","52f9fed2":"# submission.to_csv('submission.csv')","052d8006":"Validate results","a051b67a":"ofensiveness","83f1ff0c":"Load data","7d5e0cc8":"Fake dataset","26c677e8":"Prepare a keras model. ","e7cded16":"Simple model 0.6745383286834064 \n\n* validation score with second conv block and 3 epoch:\n0.6651720472963997\n","f7e781ee":"# Basic Text Regressor using Auto-Keras\n\nBasic implementatio for toxic comment challange.","34326f07":"Ruddit -dumb test","7e0bd36c":"Text regressor","18cf364c":"Train test split. Not used\/usefull. ","56993256":"Ruddit ponderation","324d84fe":"Another score"}}