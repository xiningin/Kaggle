{"cell_type":{"ec00e5d5":"code","c03708b1":"markdown","43385ff2":"markdown","3f27ad5a":"markdown","6108f458":"markdown","fa386b55":"markdown","bbfd5d66":"markdown","735d0839":"markdown","028b13fa":"markdown"},"source":{"ec00e5d5":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom emissionglobals import algorithmTypes\nfrom sklearn import metrics\nfrom emissionglobals import modelTrained\nimport pickle\n\nclass emissionModel():\n    def __init__(self, appGlobal):\n        self.appGlobal = appGlobal\n        self.objAppConfig = appGlobal.objAppConfig\n        self.config = self.objAppConfig.getConfig()\n        self.outputPath =  self.appGlobal.outputPath\n        self.modelTrain = []\n\n    def createModel(self, algorithmType):\n        '''\n            Read data to be trained and trigger train model function for the provided algorithm type\n        '''\n        try:\n            requiredFields = self.objAppConfig.getAllTrainFields()\n            requiredFields.append('emissionFactor')\n\n            for dir in os.listdir(self.outputPath):\n                print(\"Training the model for the sub national region - \" + dir)\n                if os.path.isdir(self.outputPath + dir):\n                    csvEmissionArr = [pd.read_csv(fi) for fi in glob.glob(self.outputPath + dir + \"\/RasterEmission_*.csv\")]\n                    csvWeatherArr = [pd.read_csv(fi) for fi in glob.glob(self.outputPath + dir + \"\/RasterWeather_*.csv\")]\n                    df_Emission = pd.concat(csvEmissionArr)\n                    df_Weather = pd.concat(csvWeatherArr)\n\n                    df_modelData = pd.merge(df_Emission, df_Weather, on=['Date',dir])\n                    df_modelData = df_modelData[requiredFields]\n\n                    x = df_modelData.iloc[:,:-1]\n                    y = df_modelData.iloc[:, -1]\n\n                    self.runAlgorithm(x, y, algorithmType, self.outputPath + dir, df_Emission)\n\n            finalModel = None\n\n            for md in self.modelTrain:\n                if finalModel == None:\n                    finalModel = md\n                else:\n                    if(finalModel.modelTrainCoef < md.modelTrainCoef and \\\n                        finalModel.modelTestCoef < md.modelTestCoef and finalModel.modelRMSE > md.modelRMSE):\n                        finalModel = md\n\n            modelPath = os.path.dirname(os.path.dirname(self.appGlobal.outputPath))            \n            pickle.dump(finalModel.modelObj, open(modelPath + \"\\\\emissionModel_trained.h5\", 'wb'))\n\n        except Exception as e:\n            print(e)\n            print(\"Failed at emissionmodel.py - createModel\")\n            raise\n        \n    def runAlgorithm(self, x, y, algorithmType, outputPath, xdummy):\n        '''\n           Traing the model for provided data and algorithm type\n        '''\n        try:\n            x_train, x_test,y_train, y_test = train_test_split(x, y)\n            mdl = None\n            mt = modelTrained()\n            \n            if algorithmTypes.randomForestRegression == algorithmType:\n                from sklearn.ensemble import RandomForestRegressor\n                mt.modelObj = RandomForestRegressor(n_estimators=100)            \n\n            if algorithmTypes.linearRegression == algorithmType:            \n                from sklearn.linear_model import LinearRegression\n                mt.modelObj = LinearRegression()\n\n            if algorithmTypes.xgboost == algorithmType:            \n                import xgboost as xgb  \n                mt.modelObj = xgb.XGBRegressor()\n                \n            #Train the model\n            mt.modelObj.fit(x_train, y_train)\n\n            # Cross validating\n            score = cross_val_score(mt.modelObj, x_train, y_train, cv=5)\n            mean_score = score.mean()\n            print(\"Cross validation -- Mean score \" + str(mean_score))\n\n            # calculating the Root mean square error\n            mt.modelTrainCoef = mt.modelObj.score(x_train, y_train)\n            mt.modelTestCoef = mt.modelObj.score(x_test, y_test)\n            print('Co-efficient of determination -- on train set - ', mt.modelTrainCoef)\n            print('Co-efficient of determination -- on test set - ', mt.modelTestCoef)\n\n            #mode evaluation\n            y_prediction = mt.modelObj.predict(x_test)\n\n            # calculating the Root mean square error\n            mt.modelMSE = metrics.mean_squared_error(y_test, y_prediction)\n            mt.modelRMSE = np.sqrt(mt.modelMSE)\n            \n            print('MSE - ', mt.modelMSE)\n            print('RMSE - ', mt.modelRMSE )\n\n            # Plot test and prediction data\n            sns.scatterplot(y_test, y_prediction)\n            plt.xlabel = \"Prediction data\"\n            plt.ylabel = \"Test Data\"\n\n            self.modelTrain.append(mt)\n            \n            plt.savefig(outputPath + \"\/\"+ algorithmType+\"_train_coeff\"+str(mt.modelTrainCoef)+\"_test_coeff_\"+str(mt.modelTestCoef)+\".png\")\n        except Exception as e:\n            print(e)\n            print(\"Failed at emissionmodel.py - runAlgorithm\")\n            raise\n","c03708b1":"<p id=\"trainmodel\" style=\"color:#703bdb; font-size:20px\">Step 1: Train Model<\/p>\n<hr size=\"30\">\n\nIn this step, will train the model by feeding the data to the machine learning algorithm. \n\nWe tried to train the model with below Machine learning and Deep Learning algorithm and we received the best accuracy while training the model using the Random Forest algorithm. \n\n1. Linear Regression\n2. Random Forest\n2. XGBoost\n3. Artificial Neural Network\n\nSteps to train the model:\n\n1) Joined the weather and emission data on date and region name\n\n2) Splitted the dataset, 80% of data for a train purpose and 20% of data for test purpose\n\n3) Train the model\n\n4) Cross validation with 5 folds\n\n5) Each sub region, provide different output model. Selecting the model which has better accuracy for predicting.\n\n5) Save trained model to disk\n\n\n![image.png](attachment:image.png)","43385ff2":"<p id=\"modelselection\" style=\"color:#703bdb; font-size:20px\">2. Model Selection<\/p>\n<hr size=\"30\">\n\n\nWe went through co-efficient factor, MSE and RMSE values of different algorithm. We received the best accuracy result with Random Forest Algorithm as below. Hence we choosen this saved this trained model to disk and using this model to predict the emission factor\n\n<font color=\"green\"> Accuracy using the emission data for sub national region - powerplant_100Miles <\/font>\n<br\/>\n<br\/>\nCo-efficient of determination -- on train set -  0.9997355344690939\n\nCo-efficient of determination -- on test set -  0.995034041776702\n\nMSE -  0.0002533805794829245\n\nRMSE -  0.01591793263847176\n<br\/>\n<font color=\"green\"> Accuracy using the emission data for sub national region - powerplant_10Miles <\/font>\n<br\/>\n\nCo-efficient of determination -- on train set -  0.9975558449139813\n\nCo-efficient of determination -- on test set -  0.9894919952706159\n\nMSE -  6.455504930415938e-07\n\nRMSE -  0.0008034615691130434\n<br\/>\n<font color=\"green\"> Accuracy using the emission data for sub national region - powerplant_50Miles <\/font>\n<br\/>\n<br\/>\nCo-efficient of determination -- on train set -  0.9976996563453595\n\nCo-efficient of determination -- on test set -  0.9929606559574589\n\nMSE -  3.281562321673379e-05\n\nRMSE -  0.0057284922289144976\n","3f27ad5a":"<p id=\"componentb\" style=\"color:#703bdb; font-size:20px\">Compenent B - Extending Architecture to another Geographical Region<\/p>\n<hr size=\"30\">\n\nBelow details explain how to utilize the implementation of the Puerto Rico region to other Geographical areas\n<br \/>\n<br \/>\n<p id=\"powerplantSubregions\" style=\"color:#703bdb; font-size:20px\">Guidelines to extend architecture to another Geographical Region<\/p>\n\nThe Trained model of the Puerto Rico region can be directly utilized to find the emission factors of the other Geographical area if the amount of error is less. Follow the steps available here  <a href=\"#utilizemodeltrained\">Step 3: Utilize Model Trained<\/a>.\n\nIf error rate is high, then Model need to be trained using GPPD csv file for the geographical regions, Sentinel 5P, GFS and GLDAS satelite image using below steps\n\n1) Setup the configuration file. For more details of configuration file visit <a href=\"https:\/\/www.kaggle.com\/nagabilwanth\/step-1-create-a-configuration-file\">Configuration details<\/a>\n\n2) Create the emission explorer dataset with below architecture. If you want to change folder structure, change accordingly in the configuration file\n\n![image.png](attachment:image.png)\n\n3) Replace the configuration file created for the geographical area.\n\n4) Execute the script <a href=\"https:\/\/www.kaggle.com\/nagabilwanth\/emissionexplorer\">emissionExplorer.py<\/a>\nThis script generates the trained model.\n\n5) Replace the trained model and follow the steps in  <a href=\"#utilizemodeltrained\">Step 3: Utilize Model Trained<\/a>","6108f458":"Emission Factor predicted using the Machine Learning shows as below\n\n![image.png](attachment:image.png)","fa386b55":"<p id=\"utilizemodeltrained\" style=\"color:#703bdb; font-size:20px\">Step 3: Utilize Model Trained<\/p>\n<hr size=\"30\">\n\nBelow are the steps used to utilize the train model\n\n1. Satelite imagery to be predicted should be place with below folder structure\n\n![image.png](attachment:image.png)\n\n2. Setup config (contain data source path to predict, trained model location, bands to be considered)\n\nPredicted imagery path will be specified in configuration file as below. It use the same format of configuration file use in training the model to make code reuse. For more details of configuration file visit <a href=\"https:\/\/www.kaggle.com\/nagabilwanth\/step-1-create-a-configuration-file\">Configuration details<\/a>\n\n\"sentinel-5P\":{ <br \/>\n        \"type\":\"RasterEmission\",<br \/>\n        \"concatType\":\"sum\",<br \/>\n        \"data_Path\":\"\/kaggle\/input\/eiedatapredict\/s5p_no2\/\",<br \/>\n        \"file_format\":\"s5p_no2_%Y%m%d\",<br \/>\n        \"filename_Start_at\":-1,<br \/>\n        \"filename_End_at\": 16,<br \/>\n\n2. Load <a href=\"https:\/\/www.kaggle.com\/nagabilwanth\/ds4gmodel\" >Trained Model<\/a>\n\n3. Pass the two input parameter to EmissionPrediction.py script\n\n\"Date\" - The satelite imagery for the date you want to predict\n\n\"Sub Region\" - Sub Region name \"County\", \"powerplant_50Miles\", \"powerplant_100Miles\"\n\n\n4. Predict the emission factor\n\nFor testing purpose we hardcoded input parameters in <a href=\"https:\/\/www.kaggle.com\/nagabilwanth\/emissionprediction\">Emission Prediction Kernel<\/a> as below\n\nif __name__ == \"__main__\": <br\/>\n    args=[\"\",\"07-04-2018\",\"County\"]<br\/>\n    main(args)<br\/>\n\n\n\n\n","bbfd5d66":"This is my seventh kernel series contribution to <a href=\"https:\/\/www.kaggle.com\/c\/ds4g-environmental-insights-explorer\/overview\"> DS4G: Environmental Insights Explorer <\/a> to analyze the impacts of air pollution at a particular Geographical area and location\n\nIn this kernel, methdology to calculate emission factor of electricity for another geographical area is detailed\n\n\n<a href=\"#componenta\">**Compenent A: Architecture to calculate emission factor in Puerto Rico region **<\/a>\n*     <a href=\"#overviewcomponenta\">Overview<\/a>\n*     <a href=\"#trainmodel\">Step 1: Train Model<\/a>\n*     <a href=\"#modelselection\">Step 2: Model selection<\/a>\n*     <a href=\"#utilizemodeltrained\">Step 3: Utilize Model Trained<\/a>\n\n<a href=\"#componentb\">**Compenent B - Extending Architecture to another Geographical Region**<\/a>\n*     <a href=\"#powerplantSubregions\">Guidelines to extend architecture to another Geographical Region<\/a>\n","735d0839":"<font color=\"green\"> Scattered plot of Accuracy for sub national region - powerplant_50miles <\/font>\n\n![image.png](attachment:image.png)","028b13fa":"<p id=\"dataIntegration\" style=\"color:#703bdb; font-size:20px\">Compenent A: Architecture to calculate emission factor in Puerto Rico region<\/p>\n<hr size=\"30\">\n\nWill detail Architecture to calculate emission factor in Puerto Rico region using Machine Learning techniques\n\n\n<p id=\"overviewcomponenta\" style=\"color:#703bdb; font-size:20px\">Overview<\/p>\n<hr size=\"30\">\n\nTill now, we went through 6 kernels, it explained data pre-processing, analysis framework and methdology to calculate emission factor. These require scientific formulas to derive emission factor. In this kernel we detail about how to train the model using data derived from kernel 1 to 6 and how to predict emission factor for a given date without using scientific formulas but using machine learning algorthirms. \n\nThe architecture looks as below to derive emission factor using machine learning algorthirms.\n\n![image.png](attachment:image.png)"}}