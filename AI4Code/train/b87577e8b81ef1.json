{"cell_type":{"206f2136":"code","37728038":"code","a9118c37":"code","b0660894":"code","356ef59e":"code","e27954b4":"code","c080393b":"code","27ec81d0":"code","426f69f3":"code","fd82af37":"code","531e5281":"code","98abdd6d":"code","7508af6e":"code","7f75cb10":"code","eee8c71a":"code","cd12c969":"code","33a060ca":"code","2788de38":"code","d14ea277":"code","f5e8689b":"code","b8db64cd":"code","8935dbf0":"code","df48c866":"code","44770ed9":"code","5993ffcd":"code","1e1d4507":"code","1703de8c":"code","b67b1f5f":"code","8d58deb2":"code","6611467b":"code","d48f6087":"code","1c493fa6":"code","05974808":"code","4a63786b":"code","2d399ceb":"code","596f420f":"code","9db66f17":"code","3f43fa83":"code","00b39e9d":"code","d4c89cdb":"code","fc50e5bc":"code","a1e6e240":"code","a13377c6":"code","9e06211b":"code","3e8ff1f8":"code","4270dee8":"code","599bf8fe":"code","d4e4a9bc":"code","63b1be67":"code","dd24aa6c":"code","9cb0e16f":"markdown","f04889ea":"markdown","64faac6e":"markdown","a9edd55e":"markdown","e6f058c1":"markdown","970e34a2":"markdown","3b95b206":"markdown","75c1922e":"markdown","c18e4a90":"markdown","01f8079f":"markdown","0e0a12ff":"markdown","e5756a22":"markdown","019a3619":"markdown","98393cdb":"markdown","5f1c93c1":"markdown","61548240":"markdown","4e16cf1b":"markdown","09db2506":"markdown","0bdc4fb6":"markdown","df9f2701":"markdown"},"source":{"206f2136":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.stats import skew\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","37728038":"# load data\ndata = pd.read_csv('..\/input\/FIFA 2018 Statistics.csv')","a9118c37":"data.shape","b0660894":"data.dtypes","356ef59e":"data.head()","e27954b4":"numerical_features   = data.select_dtypes(include = [np.number]).columns\ncategorical_features = data.select_dtypes(include= [np.object]).columns","c080393b":"numerical_features","27ec81d0":"categorical_features","426f69f3":"\ndata.describe()","fd82af37":"# pots a histogram reations between numerical data\ndata.hist(figsize=(30,30))\nplt.plot()","531e5281":"var1 = ['Goal Scored', 'On-Target', 'Corners', 'Attempts', 'Free Kicks', 'Yellow Card', 'Red', 'Fouls Committed']\nvar1.append('Man of the Match')\nsns.pairplot(data[var1], hue = 'Man of the Match', palette=\"husl\")\nplt.show()\n","98abdd6d":"sns.countplot(x='Man of the Match',data = data)","7508af6e":"# Plotting total goal attempts by teams\nattempts=data.groupby('Team')['Attempts'].sum().reset_index().sort_values(by=('Attempts'),ascending=False)\n\nplt.figure(figsize = (15, 12), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Attempts\", data=attempts)\n\nplot1.set_xticklabels(attempts['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total attempts')\nplot1.set_title('Total goal attempts by teams')","7f75cb10":"# Plotting total goals by teams\ngoals_by_team=data.groupby('Team')['Goal Scored'].sum().reset_index().sort_values(by=('Goal Scored'),ascending=False)\n\nplt.figure(figsize = (15,12), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Goal Scored\", data=goals_by_team)\n\nplot1.set_xticklabels(goals_by_team['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total goals scored')\nplot1.set_title('Total goals scored by teams')","eee8c71a":"# Plotting mean ball possession for teams\n\nball_possession=data.groupby('Team')['Ball Possession %'].mean().reset_index().sort_values(by=('Ball Possession %'),ascending=False)\nball_possession \n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Ball Possession %\", data=ball_possession)\n\nplot1.set_xticklabels(ball_possession['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Ball possession')\nplot1.set_title('Mean ball possession')","cd12c969":"# Plotting total Man of the Match awards for teams\n\n# Encoding the values for the column man of the Match\nmom_1={'Man of the Match':{'Yes':1,'No':0}}\ndata.replace(mom_1,inplace=True)\n\n# Converting column datatype to int\ndata['Man of the Match']=data['Man of the Match'].astype(int)\n\nmom=data.groupby('Team')['Man of the Match'].sum().reset_index().sort_values(by=('Man of the Match'),ascending=False)\n\nplt.figure(figsize = (12, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Man of the Match\", data=mom)\n\nplot1.set_xticklabels(mom['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Man of the Matches')\nplot1.set_title('Most Man of the Match awards')","33a060ca":"# Plot of Total On-target and Off-target and blocked attempts by teams\n\ngroup_attempt = data.groupby('Team')['On-Target','Off-Target','Blocked'].sum().reset_index()\n\n# Changing the dataframe for plotting\ngroup_attempt_sorted = group_attempt.melt('Team', var_name='Target', value_name='Value')\n\n# Plotting the new dataset created above\nplt.figure(figsize = (16, 10), facecolor = None)\n\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=group_attempt_sorted)\n\nplot1.set_xticklabels(group_attempt_sorted['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Attempts')\nplot1.set_title('Total On-Target, Off-Target and Blocked attempts by teams')\n","2788de38":"# Plotting Most saves by teams\n\nsaves=data.groupby('Team')['Saves'].sum().reset_index().sort_values(by=('Saves'),ascending=False)\n\nplt.figure(figsize = (15,12), facecolor = None)\nsns.set_style(\"darkgrid\")\nplot1 = sns.barplot(x=\"Team\", y=\"Saves\", data=saves)\n\nplot1.set_xticklabels(saves['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total Saves')\nplot1.set_title('Most Saves')","d14ea277":"# Plot of total corners, free kicks and offsides for teams\n\ncorners_offsides_freekicks = data.groupby('Team')['Corners','Offsides','Free Kicks'].sum().reset_index()\ncorners_offsides_freekicks\n\n# Changing the dataframe for plotting\ncorners_offsides_freekicks_sort = corners_offsides_freekicks.melt('Team', var_name='Target', value_name='Value')\n\n# Plotting the new dataset created above\nplt.figure(figsize = (16, 10), facecolor = None)\n\n# style\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Value\", hue=\"Target\", data=corners_offsides_freekicks_sort)\n\n#labeling\nplot1.set_xticklabels(corners_offsides_freekicks_sort['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Totals')\nplot1.set_title('Total Corners, free kicks and offsides for teams')","f5e8689b":"# Plot of total goals conceded by teams\n\n# Most goals conceded by teams\ngoals_conceded = data.groupby('Opponent')['Goal Scored'].sum().reset_index().sort_values(by=('Goal Scored'), ascending=False)\n\nplt.figure(figsize = (16, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Opponent\", y=\"Goal Scored\", data=goals_conceded)\n\nplot1.set_xticklabels(goals_conceded['Opponent'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total goals conceded')\nplot1.set_title('Total goals conceded')","b8db64cd":"# Plot of Most Yellow Cards conceded by teams\n\n# Most Yellow Cards by teams\nyellow_cards = data.groupby('Team')['Yellow Card'].sum().reset_index().sort_values(by=('Yellow Card'), ascending=False)\n\nplt.figure(figsize = (16, 10), facecolor = None)\nsns.set_style(\"darkgrid\")\nsns.set(font_scale=1.5)\nplot1 = sns.barplot(x=\"Team\", y=\"Yellow Card\", data=yellow_cards)\n\nplot1.set_xticklabels(yellow_cards['Team'], rotation=90, ha=\"center\")\nplot1.set(xlabel='Teams',ylabel='Total yellow cards')\nplot1.set_title('Total yellow cards')","8935dbf0":"# Sewness of numerical data\nskew_values = skew(data[numerical_features], nan_policy = 'omit')\npd.concat([pd.DataFrame(list(numerical_features), columns=['Features']), \n           pd.DataFrame(list(skew_values), columns=['Skewness degree'])], axis = 1)","df48c866":"\nmissing_values = data.isnull().sum().sort_values(ascending = False)\npercentage_missing_values = (missing_values\/len(data))*100\npd.concat([missing_values, percentage_missing_values], axis = 1, keys= ['Missing values', '% Missing'])\n","44770ed9":"data.isnull().sum()","5993ffcd":"plt.figure(figsize=(30,30))\nsns.heatmap(data[numerical_features].corr(), square=True, annot=True,robust=True, yticklabels=1)","1e1d4507":"# Correlation with highally correlated features\nvar = ['Goal Scored', 'On-Target', 'Corners', 'Attempts', 'Free Kicks', 'Yellow Card', 'Red', \n       'Fouls Committed', 'Own goal Time']\nplt.figure(figsize=(15,10))\nsns.heatmap((data[var].corr()), annot=True)","1703de8c":"dummy_data = data[var1]\nplt.figure(figsize=(20,10))\nsns.boxplot(data = dummy_data)\nplt.show()","b67b1f5f":"\nmissing_values = data.isnull().sum().sort_values(ascending = False)\npercentage_missing_values = (missing_values\/len(data))*100\npd.concat([missing_values, percentage_missing_values], axis = 1, keys= ['Missing values', '% Missing'])\n","8d58deb2":"data.drop(['Own goal Time', 'Own goals', '1st Goal'], axis = 1, inplace= True)","6611467b":"categorical_features","d48f6087":"# Function for finding no of unique elements in each features\ndef uniqueCategories(x):\n    columns = list(x.columns).copy()\n    for col in columns:\n        print('Feature {} has {} unique values: {}'.format(col, len(x[col].unique()), x[col].unique()))\n        print('\\n')\nuniqueCategories(data[categorical_features].drop('Date', axis = 1))","1c493fa6":"data.drop('Date', axis = 1, inplace=True)","05974808":"data.drop(['Corners', 'Fouls Committed', 'On-Target'], axis = 1, inplace=True)\nprint(data.shape)\ndata.head()","4a63786b":"cleaned_data  = pd.get_dummies(data)","2d399ceb":"print(cleaned_data.shape)\ncleaned_data.head()","596f420f":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import r2_score, classification_report, confusion_matrix, precision_recall_curve","9db66f17":"df = cleaned_data.copy()\ndf.describe()\n","3f43fa83":"df = df.apply(LabelEncoder().fit_transform)\ndf.head()","00b39e9d":"targetfet = df['Man of the Match']\n\nfeatures = df.drop(['Man of the Match'], axis = 1)\ntargetfet.shape\n","d4c89cdb":"features.shape","fc50e5bc":"####Prediction model########\n#Train-Test split\nfrom sklearn.model_selection import train_test_split\ndata_train, data_test, label_train, label_test = train_test_split(features, targetfet, test_size = 0.2, random_state = 42)\nlabel_train.shape","a1e6e240":"#Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlogis = LogisticRegression()\nlogis.fit(data_train, label_train)\nlogis_score_train = logis.score(data_train, label_train)\nprint(\"Training score: \",logis_score_train)\nlogis_score_test = logis.score(data_test, label_test)\nprint(\"Testing score: \",logis_score_test)","a13377c6":"#decision tree\nfrom sklearn.ensemble import RandomForestClassifier\ndt = RandomForestClassifier()\ndt.fit(data_train, label_train)\ndt_score_train = dt.score(data_train, label_train)\nprint(\"Training score: \",dt_score_train)\ndt_score_test = dt.score(data_test, label_test)\nprint(\"Testing score: \",dt_score_test)","9e06211b":"#random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(data_train, label_train)\nrfc_score_train = rfc.score(data_train, label_train)\nprint(\"Training score: \",rfc_score_train)\nrfc_score_test = rfc.score(data_test, label_test)\nprint(\"Testing score: \",rfc_score_test)","3e8ff1f8":"#Model comparison\nmodels = pd.DataFrame({\n        'Model'          : ['Logistic Regression',  'Decision Tree', 'Random Forest'],\n        'Training_Score' : [logis_score_train,  dt_score_train, rfc_score_train],\n        'Testing_Score'  : [logis_score_test, dt_score_test, rfc_score_test]\n    })\nmodels.sort_values(by='Testing_Score', ascending=False)","4270dee8":"train = cleaned_data.copy()\ntrain.head()","599bf8fe":"# Specify the label (just in case we want to predict something else)\nlabel_name = 'Man of the Match'\n\n# Categorical features are the non numeric ones\ncategoricals = train.columns[train.dtypes == 'object'].tolist()\n\n# Label encode them otherwise LightGBM can't use them\nfor cat_feat in categoricals:\n    encoder = LabelEncoder()\n    train[cat_feat] = encoder.fit_transform(df[cat_feat])\nlabel = train.pop(label_name)\n\n# Don't specify the label as a categorical\nif label_name in categoricals:\n    categoricals.remove(label_name)","d4e4a9bc":"import lightgbm as lgbm\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import r2_score, classification_report, confusion_matrix, precision_recall_curve\n\n\nclf = lgbm.LGBMClassifier(\n    boosting_type='gbdt',\n)\ny_prob = cross_val_predict(\n    estimator=clf, \n    cv=5, \n    X=train, \n    y=label,\n    fit_params={'categorical_feature': categoricals},\n    method='predict_proba'\n)\ny_pred = np.argmax(y_prob, axis=1)","63b1be67":"y_pred","dd24aa6c":"print(classification_report(y_true=label, y_pred=y_pred))","9cb0e16f":"Categorical -['Date', 'Team', 'Opponent','Round', 'PSO']\n\nNominal - Team, Opponent\n\nOrdinal - Round\n\nInterval - Date, PSO is binary\n\n\nI believe 'Round' should also not have any impact on 'Man of the Match' because, a player performance should be consistent over all matches to become man of the match than just in a particular round. Thus, let's give equal weitage to each round.\nPSO is binary\n\nI am not going to include 'Match date' as it should definately not impact a player formance.\n\n","f04889ea":"Cross validate and predict\nGiven the relatively small dataset size, the most robust measure of prediction accuracy will be to use SKLearn's cross_val_predict\n\n","64faac6e":"\n## Now we can Appy different machine learning algorithms to predict the Man of the Match\nThe data has been cleaned and is ready for further steps in data pipeling\n    - Pre-processing\n    - Modeling\n    - Evaluation\n    - Prediction\n","a9edd55e":"### Check performance\nUsing classification_report, we can then quickly see how well the LightGBM classifier has performed:\n","e6f058c1":"## Second Modal","970e34a2":"#### So clearly Goal scored is highest correlated to target","3b95b206":"### Missing value treatment\n\nfeatures -- ['Own goal Time', 'Own goals', '1st Goal']  have very high percentage of missing data\n\nso it is better to drop them","75c1922e":"## Univariate Analysis","c18e4a90":"## Loading Libraries","01f8079f":"Dropping \"Corners', 'Fouls Committed' and 'On-Targets' will remove high correlated elements and remove chances of multi-collinearity. these features are selected based on their low collinearity with 'Man of the Match' and high collinearity with other features.\n","0e0a12ff":"As per boxplot there are :\n-1 outlier in Goal scored\n\n-2 in On-Target\n\n-1 in corners\n\n-2 in Attempts\n\n-3 in Yellow Card\n\n-1 in Red\n\n#### What are Outliers\nIn statistics, an outlier is an observation point that is distant from other observations. An outlier may be due to variability in the measurement or it may indicate experimental error; the latter are sometimes excluded from the data set.\n \nPragmatic approach: plot scatter visualisation or boxplot and identify abnormally distant points\n\nThe quantity of outliers present in this problem is not too huge and will not have gravity impact if left untreated. They are only few and within range.","e5756a22":"### Base line model","019a3619":"## Have any doubts ???\n\n","98393cdb":"Categorical features encoding\n- As machine laearning models understand only numbers data in different formats including text and dates needs to be mapped into numbers prior to feeding to the model\n- The process of changing non-numerical data into numerical is called 'Encoding'\n- Before encoding let's understand how many categories or levels are present in each categorical features","5f1c93c1":"### Outliers detection and removal","61548240":"Scatter plot is a great tool to see correlation degree and direction among features. Using seaborn pairplot makes this task easy for us by plotting all possible combinations.\n","4e16cf1b":"For normally distributed data, the skewness should be about 0.\n\nFor unimodal continuous distributions, a skewness value > 0 means that there is more weight in the right tail of the distribution. \n\nThe function skewtest can be used to determine if the skewness value is close enough to 0, statistically speaking.\n\nAlthough data is not normally distribute, there are positive as well have negative skewedness\n\n'Yello & Red', 'Red' and 'Goals in PSO' are highly positively skewed.\n### Missing values","09db2506":"## Bivariate analysis\n- Understanding how statistics of one feature is impacted in presence of other features\n- Commonly used tools are:\n    - Pearson Correlation Coefficient (or) scatter plots\n    - Pairplots","0bdc4fb6":"### Correlation Coefficient\nIt is a measure of the strength and direction of the linear relationship between two variables that is defined as the covariance of the variables divided by the product of their standard deviations.\n\nIt is of two type: Positive correlation and Negative correlation\n\npositive correlation if the values of two variables changing with same direction\n\nnegative correlation when the values ofvariables change with opposite direction\n\nr values always lie between -1 to + 1\n\nInterpretation:\n Exactly -1. A perfect downhill (negative) linear relationship\n\n Exactly +1. A perfect uphill (positive) linear relationship\n","df9f2701":"Correlated columns needs to be removed to avoid multicollinearity. Let's use multicollinearity check\n\nThese features have least or no correlation with 'Man of the Match'\n['Blocked', 'OffSides', 'Saves','Distance Covered (Kms)', 'Yellow & Red', '1st Goal', 'Goals in PSO']\n\nThese features will not have impact on aur analysis and thus, holding them or retaining them is our choice\n"}}