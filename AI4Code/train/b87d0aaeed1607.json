{"cell_type":{"06dd82e3":"code","950c5654":"code","244b163a":"code","1a125738":"code","3f205fd2":"code","4d119c37":"code","399890d9":"code","90dc7430":"code","25d28e76":"code","237bea7b":"code","5cdfe3de":"markdown","52b02ea6":"markdown","1ee10da6":"markdown","a8164b90":"markdown","38bbfbbb":"markdown","3290397e":"markdown","c9f8b110":"markdown","20fa8c01":"markdown"},"source":{"06dd82e3":"import numpy as np # linear algebra\nfrom numpy.random import seed\nseed(1)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as mfm\nfrom tqdm import tqdm\nfrom IPython.display import clear_output\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import classification_report\n\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.layers import Dense, InputLayer, Dropout\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import metrics","950c5654":"training_binary = np.load(\"..\/input\/kuzushiji\/k49-train-imgs.npz\")\nlabel_binary = np.load(\"..\/input\/kuzushiji\/k49-train-labels.npz\")\nprint(training_binary.files, label_binary.files)","244b163a":"Xtrain = training_binary[\"arr_0\"]\nytrain = label_binary[\"arr_0\"]\nprint(\"Xshape:\", Xtrain.shape)\nprint(\"yshape:\", ytrain.shape)\nnum_class = len(np.unique(ytrain))\nprint(\"Classes:\", num_class)\nimg_dim = Xtrain.shape[1]\nprint(ytrain[0:10])","1a125738":"def showRandom100Examples(X, y, imgdim=28):\n    # Generate 100 random indices\n    random_idx = np.random.randint(0, X.shape[0], 100)\n    random_set = X[random_idx]\n    random_set = random_set.reshape(10, 10, imgdim, imgdim)\n    # Create 10x10 grid\n    fig, ax = plt.subplots(10, 10, figsize=(10, 10))\n    for i in range(random_set.shape[0]):\n        for j in range(random_set.shape[1]):\n            example = random_set[i, j]\n            ax[i, j].imshow(example)\n            ax[i, j].set_xticks([])\n            ax[i, j].set_yticks([])\n    plt.show()\n            \nshowRandom100Examples(Xtrain, 0)","3f205fd2":"Xtrain = Xtrain.reshape(-1, 28*28)\nprint(\"Training set shape:\", Xtrain.shape)\n\nscaler = StandardScaler()\nscaler.fit(Xtrain)\nXtrain = scaler.transform(Xtrain)\n\necd = OneHotEncoder()\necd.fit(ytrain.reshape(-1, 1))\nytrain = ecd.transform(ytrain.reshape(-1, 1)).toarray()\nprint(ytrain[0:10])","4d119c37":"def buildModel(dropout_rate=0.0, num_hidden=3, hidden_size=512):\n    model = Sequential()\n    model.add(InputLayer(input_shape=(img_dim**2,)))\n\n    for i in range(num_hidden):\n        model.add(Dense(hidden_size, activation='relu'))\n        model.add(Dropout(dropout_rate, input_shape=(hidden_size,)))\n\n    model.add(Dense(num_class, activation='softmax'))\n    model.compile(loss=categorical_crossentropy, \n                  optimizer=Adam(1e-4),\n                  metrics=['accuracy'])\n    return model\n\n\nmodel = buildModel(dropout_rate=0.3, num_hidden=4, hidden_size=512)\nearlystop = EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=1e-3,\n    mode=\"min\",\n    patience=2,\n)\n\nmodel.fit(Xtrain, ytrain, epochs=200, callbacks=[earlystop], validation_split=0.2)\n\nprint(\"Training completed\")","399890d9":"test_data_bin = np.load(\"..\/input\/kuzushiji\/k49-test-imgs.npz\")\ntest_labels_bin = np.load(\"..\/input\/kuzushiji\/k49-test-labels.npz\")\n\nXtest = test_data_bin[\"arr_0\"]\nytest = test_labels_bin[\"arr_0\"]\nprint(\"Xshape:\", Xtest.shape)\nprint(\"yshape:\", ytest.shape)\n\nXtest = Xtest.reshape(-1, 28*28)\nXtest = scaler.transform(Xtest)\nytest = ecd.transform(ytest.reshape(-1, 1)).toarray()\nprint(\"Xshape (flatten):\", Xtest.shape)\nprint(\"yshape (flatten):\", ytest.shape)","90dc7430":"model.evaluate(Xtest, ytest)","25d28e76":"# Generate hiragana map\nprefix = ('', 'k', 's', 't', 'n', 'h', 'm')\nsuffix = ('a', 'i', 'u', 'e', 'o')\nhiramap = np.array([[p+s for s in suffix] for p in prefix])\nhiramap = np.append(hiramap, ['ya', 'yu', 'yo', 'ra', 'ri', 'ru', 're', 'ro', 'wa', 'wi', 'we', 'wo', 'n', 'grave'])\nhiramap = np.array(hiramap).ravel()","237bea7b":"# Generate 100 random indices\nimgdim = 28\nrandom_idx = np.random.randint(0, Xtest.shape[0], 100)\n\nrandom_set = Xtest[random_idx]\nrandom_labels = ecd.inverse_transform(ytest[random_idx]).reshape(10, 10)\npred_labels = model.predict(random_set).argmax(axis=1).reshape(10, 10)\n\nrandom_set = random_set.reshape(10, 10, imgdim, imgdim)\n\n# Create 10x10 grid\nfig, ax = plt.subplots(10, 10, figsize=(15, 15))\nfig.suptitle('Test set predictions (truth\/prediction)', fontsize=20)\n\nfor i in range(random_set.shape[0]):\n    for j in range(random_set.shape[1]):\n        example = random_set[i, j]\n        ax[i, j].imshow(example, vmin=0, vmax=1)\n        ax[i, j].set_xticks([])\n        ax[i, j].set_yticks([])\n        ax[i, j].set_title(f\"{hiramap[random_labels[i, j]]}\/{hiramap[pred_labels[i, j]]}\")\n\nplt.subplots_adjust(hspace=0.5)\nplt.show()","5cdfe3de":"## Load test data","52b02ea6":"# 2. Prepare and train model","1ee10da6":"## Test and print metrics","a8164b90":"## Show random 100 training examples","38bbfbbb":"## Flatten and standardize data","3290397e":"# 1. Import and process data","c9f8b110":"## Read data from file","20fa8c01":"# 3. Test and print metrics"}}