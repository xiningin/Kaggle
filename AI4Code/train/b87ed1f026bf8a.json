{"cell_type":{"dab6abfe":"code","be6e7ca1":"code","b5ebc3b3":"code","4eea0b0f":"code","31cc2f2a":"code","d83de312":"code","3cfcd2f4":"code","2466e019":"code","ce34d6c4":"code","7d436063":"code","f9604209":"code","a274c3ac":"code","1c528db6":"code","06aa0df5":"code","615a6960":"code","5606bed3":"code","befda02d":"code","69e50752":"code","3255e383":"code","89bdb55a":"code","aabce8d9":"code","187a183a":"code","7957aa50":"code","b11b2530":"code","3f5e41d8":"code","01672d9d":"code","86dbe9dd":"markdown","57a3c47f":"markdown","0ea9f409":"markdown","6c33db1f":"markdown","8cb0dc88":"markdown","e6378d38":"markdown","34530679":"markdown","4ce94a83":"markdown","58b44f51":"markdown","4ae5070c":"markdown","79ffeb7b":"markdown","cd91ad12":"markdown","2fce8689":"markdown"},"source":{"dab6abfe":"import numpy as np\nimport matplotlib.pyplot as plt","be6e7ca1":"def metrics(y_true, y_pred, metric):\n    if metric=='mse':\n        deviation = []\n        for i in range(len(y_true)):\n            deviation.append((y_true-y_pred)**2)\n        mse = np.sum(deviation)\/len(y_true)\n        print(f'Mean Squared Error      = {mse}')\n    \n    elif metric=='rmse':\n        deviation = []\n        for i in range(len(y_true)):\n            deviation.append((y_true-y_pred)**2)\n        rmse = np.sqrt(np.sum(deviation)\/len(y_true))\n        print(f'Root Mean Squared Error = {rmse}')\n    \n    elif metric=='mae':\n        deviation = []\n        for i in range(len(y_true)):\n            deviation.append(abs(y_true-y_pred))\n        mae = np.sum(deviation)\/len(y_true)\n        print(f'Mean Absolute Error     = {mae}')\n        \n    elif metric=='r2':\n        deviation_sr = []\n        deviation_st = []\n        y_mean = np.mean(y_true)\n        for i in range(len(y_true)):\n            deviation_sr.append((y_true-y_pred)**2)\n            deviation_st.append((y_true-y_mean)**2)\n        r2 = 1 - (np.sum(deviation_sr)\/np.sum(deviation_st))\n        print(f'R2 Score                = {r2}')\n        \n    elif metric=='r':\n        deviation_sr = []\n        deviation_st = []\n        y_mean = np.mean(y_true)\n        for i in range(len(y_true)):\n            deviation_sr.append((y_true-y_pred)**2)\n            deviation_st.append((y_true-y_mean)**2)\n        r = np.sqrt(1 - (np.sum(deviation_sr)\/np.sum(deviation_st)))\n        print(f'Coefficient Correlation = {r}')","b5ebc3b3":"def least_squared_reg(x, y):\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    \n    sum_x = np.sum(x)\n    sum_y = np.sum(y)\n    sum_xy = np.sum(x*y)\n    sum_x_squared = np.sum(x**2)\n    \n    matriks_A = np.matrix([[n, sum_x], [sum_x, sum_x_squared]])\n    matriks_A = np.linalg.inv(matriks_A)\n    matriks_B = np.matrix([[sum_y], [sum_xy]])\n    \n    coeff = matriks_A * matriks_B\n    \n    y_pred = [(coeff[0].item())+(coeff[1]*x) for x in x]\n    y_pred = [y_pred[i].item() for i in range(len(x))]\n    \n    print(f'Intercept (a) = {round(coeff[0].item(), 3)}')\n    print(f'Slope     (b) = {round(coeff[1].item(), 4)}')\n    print(f'Equation\\'s    = {round(coeff[0].item(), 3)} + {round(coeff[1].item(), 4)}X')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()\n    \n    return y_pred","4eea0b0f":"x = [35.3, 29.7, 30.8, 58.8, 61.4, 71.3, 74.4, 76.7, 70.7, 57.5, 46.4, 28.9, 28.1, 39.1, 46.8, 48.5, 59.3, 70, 70, 74.5, 72.1, 58.1, 44.6, 33.4, 28.6]\ny = [10.98, 11.13, 12.51, 8.4, 9.27, 8.73, 6.36, 8.5, 7.82, 9.14, 8.24, 12.19, 11.88, 9.57, 10.94, 9.58, 10.09, 8.11, 6.83, 8.88, 7.68, 8.47, 8.86, 10.36, 11.08]","31cc2f2a":"x = [0.5, 2.5, 2, 4, 3.5, 6, 5.5]\ny = [1, 2, 3, 4, 5, 6, 7]","d83de312":"ls_pred = least_squared_reg(x, y)","3cfcd2f4":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nx = np.array(x).reshape(-1, 1)\nmodel.fit(x, y)\n\nprint(f'Intercept -> {model.intercept_}')\nprint(f'Slope -> {model.coef_[0]}')\nprint(f'Equation\\'s -> {round(model.intercept_, 3)} + {round(model.coef_[0], 4)}X')","2466e019":"def least_squared_l2_reg(x, y, lambda_coeff):\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    \n    sum_x = np.sum(x)\n    sum_y = np.sum(y)\n    sum_xy = np.sum(x*y)\n    sum_x_squared = np.sum(x**2)\n    \n    matriks_A = np.matrix([[n, sum_x], [sum_x, (sum_x_squared+lambda_coeff)]])\n    matriks_A = np.linalg.inv(matriks_A)\n    matriks_B = np.matrix([[sum_y], [sum_xy]])\n    \n    coeff = matriks_A * matriks_B\n    \n    y_pred = [(coeff[0].item())+(coeff[1]*x) for x in x]\n    y_pred = [y_pred[i].item() for i in range(len(x))]\n    \n    print(f'Intercept (a) = {coeff[0].item()}')\n    print(f'Slope     (b) = {coeff[1].item()}')\n    print(f'Equation\\'s    = {round(coeff[0].item(), 3)} + {round(coeff[1].item(), 4)}X')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()","ce34d6c4":"x = [35.3, 29.7, 30.8, 58.8, 61.4, 71.3, 74.4, 76.7, 70.7, 57.5, 46.4, 28.9, 28.1, 39.1, 46.8, 48.5, 59.3, 70, 70, 74.5, 72.1, 58.1, 44.6, 33.4, 28.6]\ny = [10.98, 11.13, 12.51, 8.4, 9.27, 8.73, 6.36, 8.5, 7.82, 9.14, 8.24, 12.19, 11.88, 9.57, 10.94, 9.58, 10.09, 8.11, 6.83, 8.88, 7.68, 8.47, 8.86, 10.36, 11.08]","7d436063":"least_squared_l2_reg(x, y, lambda_coeff=0.5)","f9604209":"from sklearn.linear_model import Ridge\nmodel = Ridge(alpha=0.5)\nx = np.array(x).reshape(-1, 1)\nmodel.fit(x, y)\n\nprint(f'Intercept -> {model.intercept_}')\nprint(f'Slope -> {model.coef_[0]}')\nprint(f'Equation\\'s -> {round(model.intercept_, 3)} + {round(model.coef_[0], 4)}X')","a274c3ac":"def improved_leastSquared_reg(x, y):\n    x = np.array(x)\n    y = np.array(y)\n    \n    sum_1_over_y_squared = np.sum(1\/(y**2))\n    sum_x_over_y_squared = np.sum(x\/(y**2))\n    sum_x_squared_over_y_squared = np.sum((x**2)\/(y**2))\n    sum_1_over_y = np.sum(1\/y)\n    sum_x_over_y = np.sum(x\/y)\n    \n    matriks_A = np.matrix([[sum_1_over_y_squared, sum_x_over_y_squared], [sum_x_over_y_squared, sum_x_squared_over_y_squared]])\n    matriks_B = np.matrix([[sum_1_over_y], [sum_x_over_y]])\n    \n    matriks_A_invers = np.linalg.inv(matriks_A)\n    coeff = matriks_A_invers * matriks_B\n    \n    y_pred = [(coeff[0].item())+((coeff[1].item())*x) for x in x]\n    y_pred = [y_pred[i].item() for i in range(len(x))]\n\n    print(f'Intercept (a) = {round(coeff[0].item(), 3)}')\n    print(f'Slope     (b) = {round(coeff[1].item(), 4)}')\n    print(f'Equation\\'s    = {round(coeff[0].item(), 3)} + {round(coeff[1].item(), 4)}X')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()\n    \n    return y_pred","1c528db6":"x = [35.3, 29.7, 30.8, 58.8, 61.4, 71.3, 74.4, 76.7, 70.7, 57.5, 46.4, 28.9, 28.1, 39.1, 46.8, 48.5, 59.3, 70, 70, 74.5, 72.1, 58.1, 44.6, 33.4, 28.6]\ny = [10.98, 11.13, 12.51, 8.4, 9.27, 8.73, 6.36, 8.5, 7.82, 9.14, 8.24, 12.19, 11.88, 9.57, 10.94, 9.58, 10.09, 8.11, 6.83, 8.88, 7.68, 8.47, 8.86, 10.36, 11.08]","06aa0df5":"x = [0.5, 2.5, 2, 4, 3.5, 6, 5.5]\ny = [1, 2, 3, 4, 5, 6, 7]","615a6960":"ils_pred = improved_leastSquared_reg(x, y)","5606bed3":"ils_pred","befda02d":"ls_pred","69e50752":"def polynom_regression(x, y):\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    \n    sum_x = np.sum(x)\n    sum_x_squared = np.sum(x**2)\n    sum_x_cubic = np.sum(x**3)\n    sum_x_fourth = np.sum(x**4)\n    \n    sum_y = np.sum(y)\n    sum_xy = np.sum(x*y)\n    sum_x_squared_y = np.sum((x**2)*y)\n    \n    matrix_A = np.matrix([[n, sum_x, sum_x_squared], [sum_x, sum_x_squared, sum_x_cubic], [sum_x_squared, sum_x_cubic, sum_x_fourth]])\n    matrix_Y = np.matrix([[sum_y], [sum_xy], [sum_x_squared_y]])\n    \n    matrix_A = np.linalg.inv(matrix_A)\n    coeff = matrix_A*matrix_Y\n    \n    y_pred = [coeff[0].item() + (coeff[1].item()*x) + (coeff[2].item()*(x**2)) for x in x]\n    \n    print(f'Intercept-1 (a1) = {round(coeff[1].item(), 3)}')\n    print(f'Intercept-2 (a2) = {round(coeff[2].item(), 3)}')\n    print(f'Slope       (a0) = {round(coeff[0].item(), 3)}')\n    print(f'Equation\\'s       = {round(coeff[0].item(), 3)} + {round(coeff[1].item(), 3)}X + {round(coeff[2].item(), 3)}X\\u00b2')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()","3255e383":"x = [2, 4, 6, 8, 10, 12, 14]\ny = [0.02, 0.12, 0.6, 3, 9, 14, 27]","89bdb55a":"polynom_regression(x, y)","aabce8d9":"def eksponensial_regression(x, y):\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    \n    Y = np.log(y)\n    X = x\n    \n    sum_X = np.sum(X)\n    sum_Y = np.sum(Y)\n    sum_XY = np.sum(X*Y)\n    sum_X_squared = np.sum(X**2)\n    \n    B = ((n*sum_XY) - (sum_X*sum_Y))\/((n*sum_X_squared) - sum_X**2)\n    A = (sum_Y - (B*sum_X))\/n\n    \n    a = np.exp(A)\n    b = B\n    \n    y_pred = [a*np.exp(b*x) for x in x]\n    \n    print(f'Intercept (a) = {round(a, 3)}')\n    print(f'Slope     (b) = {round(b, 3)}')\n    print(f'Equation\\'s    = {round(a, 3)} + {round(b, 3)}X')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()","187a183a":"x = [0.4, 0.8, 1.2, 1.6, 2, 2.3]\ny = [800, 975, 1500, 1950, 2900, 3600]","7957aa50":"eksponensial_regression(x, y)","b11b2530":"def sederhana_regression(x, y):\n    n = len(x)\n    x = np.array(x)\n    y = np.array(y)\n    \n    Y = np.log(y)\n    X = np.log(x)\n    \n    sum_X = np.sum(X)\n    sum_Y = np.sum(Y)\n    sum_XY = np.sum(X*Y)\n    sum_X_squared = np.sum(X**2)\n    \n    B = ((n*sum_XY) - (sum_X*sum_Y))\/((n*sum_X_squared) - sum_X**2)\n    A = (sum_Y - (B*sum_X))\/n\n    \n    a = np.exp(A)\n    b = B\n    \n    y_pred = [a*x**b for x in x]\n    \n    print(f'Intercept (a) = {round(a, 3)}')\n    print(f'Slope     (b) = {round(b, 3)}')\n    print(f'Equation\\'s    = {round(a, 3)} + {round(b, 3)}X')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'mse')\n    metrics(y, y_pred, 'rmse')\n    metrics(y, y_pred, 'mae')\n    print('---------------------------------------')\n    metrics(y, y_pred, 'r2')\n    metrics(y, y_pred, 'r')\n    print('---------------------------------------')\n    \n    plt.scatter(x, y, label='Data')\n    plt.plot(x, y_pred, color='r' ,label='Regression Line')\n    plt.legend()","3f5e41d8":"x = [0.15, 0.4, 0.6, 1.01, 1.5, 2.2, 2.4]\ny = [4.4964, 5.1284, 5.6913, 6.2884, 7.0989, 7.5507, 7.5106]","01672d9d":"sederhana_regression(x, y)","86dbe9dd":"# Least Square Method - Linear","57a3c47f":"# Model Eksponensial","0ea9f409":"![image.png](attachment:370f4ad6-e321-4acb-b273-d72f41d75220.png)","6c33db1f":"# Least Squared with L2 Regularization","8cb0dc88":"# Model Pangkat Sederhana","e6378d38":"![image.png](attachment:5880d4ae-2540-4ce2-96ec-2e13cda58b25.png)","34530679":"![image.png](attachment:f95688ca-7ad4-44a5-920f-1e47c4e3bcf3.png)","4ce94a83":"# Least Squared Method - Polynomial Degree 2","58b44f51":"![image.png](attachment:1d6f3089-2e0f-4de1-84e4-27c830c2af74.png)","4ae5070c":"![image.png](attachment:37fdbd59-210e-40a3-b5ed-2d9b2c740e46.png)","79ffeb7b":"![image.png](attachment:8ddf1023-adfe-4049-bffc-69ccea10c295.png)","cd91ad12":"![image.png](attachment:b43fce1a-fa4a-437e-aefb-2e7556cd7c73.png)","2fce8689":"# Improved Least Squared"}}