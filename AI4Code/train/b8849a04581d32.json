{"cell_type":{"ddb5763a":"code","bbcdfa84":"code","2956be19":"code","1441fd79":"code","5443f096":"code","79b3a940":"code","c6895d1f":"code","24b69bc0":"code","807b3817":"code","64ab8804":"code","9cf99a24":"code","28de73ad":"code","cd7154cd":"code","bb52f377":"code","e300c23f":"code","f0ac4423":"markdown","78dd0dbf":"markdown","e615087a":"markdown","dadc718c":"markdown","d2589816":"markdown","992904a0":"markdown","8fcb480e":"markdown","6d0e5ef1":"markdown","84a89df2":"markdown","d4a54f15":"markdown","3da5b9bd":"markdown","907ed240":"markdown","36beba1c":"markdown"},"source":{"ddb5763a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbcdfa84":"#Data loading\n#-------------------------------\ngames_path = '..\/input\/nfl-big-data-bowl-2022\/games.csv'\nplays_path = '..\/input\/nfl-big-data-bowl-2022\/plays.csv'\nplayers_path = '..\/input\/nfl-big-data-bowl-2022\/players.csv'\nPFFScoutingData_path = '..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv'\ntracking2018_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv'\ntracking2019_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv'\ntracking2020_path = '..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv'\n\ngames_data = pd.read_csv(games_path)\nplays_data = pd.read_csv(plays_path)\nplayers_data = pd.read_csv(players_path)\nPFFScoutingData_data = pd.read_csv(PFFScoutingData_path)\n#tracking2018_data = pd.read_csv(tracking2018_path)\n#tracking2019_data = pd.read_csv(tracking2019_path)\n#tracking2020_data = pd.read_csv(tracking2020_path)","2956be19":"#Let's see what the data provided by the NFL\n#First of all, let's look at the ball related data contained in plays_path and PFFScoutingData_path\n#-------------------------------\ndef describe_data(data, n = 10, d = False):\n    print(data.shape)\n    print(data.columns)\n    print()\n    if d == True:\n        print(data.describe())\n    print()\n    return data.head(n)","1441fd79":"describe_data(plays_data)","5443f096":"describe_data(PFFScoutingData_data)","79b3a940":"#choosed features from Plays\ncol_plays_use_cat = ['specialTeamsPlayType', 'specialTeamsResult']\ncol_plays_use_num = ['yardlineNumber', 'kickLength', 'kickReturnYardage', 'playResult', 'absoluteYardlineNumber']\n\n#choosed features from PFFScoutingData\ncol_PFF_use_cat = ['snapDetail', 'kickType', 'kickContactType']\ncol_PFF_use_num = ['operationTime', 'hangTime']","c6895d1f":"#Combining DF for work\n#-------------------------------\ndef creater_df():\n    df1_temp = plays_data[['gameId', 'playId',] + col_plays_use_cat + col_plays_use_num].copy().set_index(['gameId', 'playId'])\n    df2_temp = PFFScoutingData_data[['gameId', 'playId',] + col_PFF_use_cat + col_PFF_use_num].copy().set_index(['gameId', 'playId'])\n    df_temp = df1_temp.join(df2_temp, lsuffix='_CAN', rsuffix='_UK')\n    return df_temp","24b69bc0":"#Displaying statistics of actions of special teams\n#-------------------------------\ndf = creater_df()\ndf_temp = pd.DataFrame(df.groupby(['specialTeamsPlayType', 'specialTeamsResult']).specialTeamsResult.count())\ndf_temp\n","807b3817":"#Creating a DF for work. DF will only contain data for Punt\n#-------------------------------\n\ndf = creater_df()\ndf_punt = df.loc[df['specialTeamsPlayType'].isin(['Punt'])]\n\n#Check for unique data in each columns\ndef unique_incol(data):\n    for col in data.columns:\n        print(data[col].name)\n        print(data[col].count())\n        print(data[col].isnull().sum(axis = 0))\n        print(data[col].unique(), \"\\n\")\n\n#unique_incol(df_punt)\n#print(\"---------------------------------------\")\n\n#Let's throw out the values by rows that cannot be filled in (categorical)\ndf_punt = df_punt.dropna(subset=['kickType', 'kickContactType', 'snapDetail'])\n#kickReturnYardage has 60% NaN values, let's select this column at this stage\ndf_punt.drop(columns = ['kickReturnYardage'], inplace=True)\n#Let's fill the remaining NaN values with row averages\ndf_punt['operationTime'] = round(df_punt['operationTime'].fillna(df_punt['operationTime'].mean()), 2)\ndf_punt['hangTime'] = round(df_punt['hangTime'].fillna(df_punt['hangTime'].mean()), 2)\n\nunique_incol(df_punt)\ndf_punt.index = df_punt.index.droplevel(0)\ndf_punt","64ab8804":"#Visualization of the relationship between the results of special commands and numerical characteristics\n#-------------------------------\nfig = plt.figure(figsize=(18, 15))\ngs = fig.add_gridspec(3, 2)\n\nax = fig.add_subplot(gs[0, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='yardlineNumber')\n\nax = fig.add_subplot(gs[0, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='kickLength')\n\nax = fig.add_subplot(gs[1, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='playResult')\n\nax = fig.add_subplot(gs[1, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='absoluteYardlineNumber')\n\nax = fig.add_subplot(gs[2, 0])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='operationTime')\n\nax = fig.add_subplot(gs[2, 1])\nsns.violinplot(data = df_punt, x='specialTeamsResult', y='hangTime')\n\nfig.tight_layout()\n","9cf99a24":"#View results of special teams and categorical features\n#-------------------------------\n\n# 1. Building a table of values for the result of a special action and what happened with the Punt\ndf_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','kickContactType']).kickContactType.count().unstack().reset_index())\n#df2.columns = df2.columns.droplevel(0)\n#df2.columns = df2.columns.map(''.join)\ndf_temp = df_temp.fillna(0)\nprint(df_temp, 5*'\\n')\n\n# 2. Building a table of values of the result of a special team and whether the Punt had a binding\ndf2_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','snapDetail']).snapDetail.count().unstack().reset_index())\nprint(df2_temp, 5*'\\n')\n\n# 3.Building a table of the results of a special action and a Punt type\ndf3_temp = pd.DataFrame(df_punt.groupby(['specialTeamsResult','kickType']).kickType.count().unstack().reset_index())\ndf3_temp = df3_temp.fillna(0)\nprint(df3_temp)\n","28de73ad":"#Preparing categorical data for models\n#-------------------------------\n\nfrom sklearn.preprocessing import LabelEncoder\ndata2 = df_punt.copy()\nlabel_encoder = LabelEncoder()\n\ncolumns_LE = {\n    \"1\": 'kickContactType',\n    \"2\": 'snapDetail',\n    \"3\": 'kickType'}\n\nfor name, column in columns_LE.items():\n    print(data2[column].unique())\n    mapped_education = pd.Series(label_encoder.fit_transform(data2[column]))\n    data2[column] = label_encoder.fit_transform(data2[column])\n    print(dict(enumerate(label_encoder.classes_)))\n    print(data2[column].unique())\n\n#data2","cd7154cd":"#Selection of the most successful model based on all selected features\n#-------------------------------\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\n\nmodels = {\n    \"XGBClassifier\": XGBClassifier(),\n    \"K-Nearest Neighbors\": KNeighborsClassifier(),  \n    \"Stochastic Gradient Descent Classifier\": SGDClassifier(),\n    \"Support Vector Classifier\": SVC(),\n    \"Linear Support Vector Classifier\": LinearSVC(),\n    \"Decision Tree Classifier\": DecisionTreeClassifier(),\n    \"Random Forest Classifer\": RandomForestClassifier(random_state = 5)         \n         }\n \ncols_to_use2 = ['yardlineNumber', 'kickLength', 'playResult', 'hangTime', 'snapDetail', 'kickType']\nX4 = data2[cols_to_use2]\ny4 = data2.specialTeamsResult\nX4_train, X4_valid, y4_train, y4_valid = train_test_split(X4, y4, test_size=0.4, random_state = 11)\n\nfor name, model in models.items():\n    model.fit(X4_train, y4_train)\n    print(name + \" trained\")\n    \nprint(\"-------------------------\", '\\n')\n\nfor name, model in models.items():\n    print(name)\n    predictions4 = model.predict(X4_valid)\n    print(\"Accuracy: %.2f%%\" % (accuracy_score(y4_valid, predictions4, normalize=True) * 100.0))","bb52f377":"#Finding the best parameters for the XGBClassifier model\n#-------------------------------\n\nfrom sklearn.model_selection import train_test_split\nX5 = data2[cols_to_use2]\ny5 = data2.specialTeamsResult\nX5_train, X5_valid, y5_train, y5_valid = train_test_split(X5, y5, test_size=0.4, random_state = 11)\n\nfrom xgboost import XGBClassifier\nmy_model5 = XGBClassifier(booster='gbtree', max_depth=7, eta=0.07, gamma=0.01, subsample=0.8, colsample_bytree = 1, min_child_weight=2)\nmy_model5.fit(X5_train, y5_train)\n\npredictions5 = my_model5.predict(X5_valid)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y5_valid, predictions5, normalize=True)\nprint(\"Primary Accuracy: 70.57% (with standart parameters)\")\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nprint('\\n')\nprint(my_model5)","e300c23f":"#Finding the best parameters for the RandomForestClassifier model\n#-------------------------------\n\nfrom sklearn.model_selection import train_test_split\nX6 = data2[cols_to_use2]\ny6 = data2.specialTeamsResult\nX6_train, X6_valid, y6_train, y6_valid = train_test_split(X6, y6, test_size=0.4, random_state = 11)\n\nfrom sklearn.ensemble import RandomForestClassifier\nmy_model6 = RandomForestClassifier(max_depth=15, n_estimators=500, max_features = 'auto', random_state = 10)\nmy_model6.fit(X6_train, y6_train)\n\npredictions6 = my_model6.predict(X6_valid)\n\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y6_valid, predictions6, normalize=True)\nprint(\"Primary Accuracy: 69.63% (with standart parameters)\")\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nprint('\\n')\nprint(my_model6)","f0ac4423":"#### The XGBClassifier and RandomForestClassifier models showed the highest accuracy. Let's try to select parameters for them that will further increase their accuracy","78dd0dbf":"## Primary data processing. Choosing the purpose and features for a model","e615087a":"#### Let's look at the numerical features for each Punt outcome. To do this, we will build violin graphs for numerical tables, and categorical we will group into compact tables according to the number of characteristics for each outcome.\n#### These actions will allow you to evaluate how much each outcome for different features differs and whether it makes sense to use these features. ","dadc718c":"## Model training","d2589816":"## Data visualization\n","992904a0":"#### Based on the violin graphs, the operationTime characteristic is practically the same for all Punt results, so it makes no sense to take it into account.  \n#### The kickContactType characteristic can cause data leakage, since it contains typing of the Punt's outcomes, and the goal of the model to predict the outcomes themselves. Looking ahead, when training the model, adding kickContactType increased the accuracy by 15% at once, which proved to the creation of a data leak.","8fcb480e":"### The outcome","6d0e5ef1":"#### Let's define the purpose of the model. Let's look at the results of the actions of the special teams. The future model is conceived to predict the outcome of the Punt. There are eight outcomes for him, each of which happened a completely different number of times for all the games presented in the data. It can be assumed that the model will be able to distinguish them, which means that the target's choice of the specialTeamsResult model is justified. ","84a89df2":"# **NFL Big Data Bowl 2022**\n\n#### Punt (punt) is one of the most important actions by a special team. Understanding what leads to scoring after the Punt is one of the key tasks for the coaching staff. This notebook contains an attempt to create a model predicting the likelihood of what the result of the draw a ball performance will be. ","d4a54f15":"#### We will consider only those features that are related to the ball (position, the distance at which it was kicked, etc.). All others, including those from other datasets, are not considered.  \n> **specialTeamsPlayType**: Formation of play: Extra Point, Field Goal, Kickoff or Punt (text)  \n> **specialTeamsResult**: Special Teams outcome of play dependent on play type: Blocked Kick Attempt, Blocked Punt, Downed, Fair Catch, Kick Attempt Good, Kick Attempt No Good, Kickoff Team Recovery, Muffed, Non-Special Teams Result, Out of Bounds, Return or Touchback (text)  \n> **yardlineNumber**: Yard line at line-of-scrimmage (numeric)  \n> **kickLength**: Kick length in air of kickoff, field goal or punt (numeric)  \n> **kickReturnYardage**: Yards gained by return team if there was a return on a kickoff or punt (numeric)  \n> **playResult**: Net yards gained by the kicking team, including penalty yardage (numeric)  \n> **absoluteYardlineNumber**: Location of ball downfield in tracking data coordinates (numeric)  \n> **snapDetail**: On Punts, whether the snap was on target and if not, provides detail (H: High, L: Low, <: Left, >: Right, OK: Accurate Snap, text)  \n> **kickType**: Kickoff or Punt Type (text). Possible values for punt plays:   \n> > N: Normal - standard punt style  \n> > R: Rugby style punt  \n> > A: Nose down or Aussie-style punts  \n\n> **kickContactType**: Detail on how a punt was fielded, or what happened when it wasn't fielded (text). Possible values:  \n> > BB: Bounced Backwards  \n> > BC: Bobbled Catch from Air  \n> > BF: Bounced Forwards  \n> > BOG: Bobbled on Ground  \n> > CC: Clean Catch from Air  \n> > CFFG: Clean Field From Ground  \n> > DEZ: Direct to Endzone  \n> > ICC: Incidental Coverage Team Contact  \n> > KTB: Kick Team Knocked Back  \n> > KTC: Kick Team Catch  \n> > KTF: Kick Team Knocked Forward  \n> > MBC: Muffed by Contact with Non-Designated Returner  \n> > MBDR: Muffed by Designated Returner  \n> > OOB: Directly Out Of Bounds  \n\n> **operationTime**: Timing from snap to kick on punt plays in seconds: (numeric)  \n> **hangTime**: Hangtime of player's punt or kickoff attempt in seconds. Timing is taken from impact with foot to impact with the ground or a player. (numeric)\n\n","3da5b9bd":"<center>\n<img src=\"https:\/\/i.gifer.com\/8Zr9.gif\" alt=\"drawing\"\/>\n<img src=\"https:\/\/static.www.nfl.com\/image\/upload\/v1554321393\/league\/nvfr7ogywskqrfaiu38m.svg\" alt=\"drawing\" width=\"320\"\/>\n<\/center>","907ed240":"#### The assigned task with the selected data set belongs to the classification task. Since there is a set of characteristics for each outcome, their combinations during the match ensure that the desired outcome of the Punt is played.","36beba1c":"### The XGBClassifier model shows the best result and achieves an accuracy of 71.97%.  \n### In the future, it is planned to supplement the data from player tracking. The combination of data on the position of the ball and the players on the field after a punther strike allow receive is the best quality of the model and its application in real play on the field."}}