{"cell_type":{"b7aa34e5":"code","711537ce":"code","1f44eb26":"code","8bbc6be1":"code","8b7dbae6":"code","ce15fcd9":"code","694ad4f4":"code","55fa8722":"code","e1bef4de":"code","38e543c9":"code","bef75640":"code","3d522c78":"code","9f163590":"code","1ef1fb7b":"code","988b4863":"code","49850479":"code","48f9384b":"code","67b290ef":"code","e4d33312":"code","1a3052da":"code","9fe6688a":"code","f6bcdc1d":"code","aa0898f8":"code","3a00e7d4":"code","c69d9555":"code","cad9a93e":"code","b7888e08":"code","76431f16":"markdown","e0f531b4":"markdown","511175b3":"markdown","fa12d201":"markdown","a306e2ea":"markdown","f251bd60":"markdown","a0892623":"markdown"},"source":{"b7aa34e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","711537ce":"!pip install openpyxl","1f44eb26":"df = pd.read_excel('\/kaggle\/input\/covid19-testing-positive-by-age-florida\/Covid-19_testing_positive_by_age_Florida.xlsx')\ndf.tail()","8bbc6be1":"df.isnull().sum()","8b7dbae6":"#Code by Lucas Abrah\u00e3o https:\/\/www.kaggle.com\/lucasabrahao\/trabalho-manufatura-an-lise-de-dados-no-brasil\n\ndf[\"sex\"].value_counts().plot.bar(color=['blue', '#f5005a'], title='Covid19 Positive by Gender')","ce15fcd9":"!pip install pywaffle","694ad4f4":"from pywaffle import Waffle\nimport random\n\ngender = df[\"sex\"].value_counts()\n\nplt.figure(\n    FigureClass=Waffle,\n    rows=5,\n    columns=10,\n    values=gender,\n    title={'label': 'Covid19 Positive by Gender', 'loc': 'left'},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(gender.index, gender) ],\n    # Set the position of the legend\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1, 1)},\n    dpi=100\n)\nplt.show()","55fa8722":"#Age has a space on the right side\n\ndf[\"Age \"].value_counts()","e1bef4de":"df[\"testing_day\"].value_counts()","38e543c9":"sns.set(style=\"ticks\", context=\"talk\", font_scale=1.5)\nplt.style.use(\"dark_background\")","bef75640":"#Codes by Alexander Filin https:\/\/www.kaggle.com\/infamous25700\/pornactors-are-among-us-18\n\nfrom pywaffle import Waffle\n\ntest = df[\"testing_day\"].value_counts()\n\nplt.figure(\n    FigureClass=Waffle,\n    rows=5,\n    columns=10,\n    values=test,\n    title={'label': 'Covid19 Testing Day Distribution', 'loc': 'left'},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(test.index, test) ],\n    # Set the position of the legend\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1, 1)},\n    dpi=100,\n    colors = [\"#ffa31a\", \"#D17200\",\"#9c5400\", \"#763f00\", \"#422400\", \"#e1eb34\" ]\n    #colors = [\"#ffa31a\", \"#D17200\", \"#9c5400\", \"#763f00\", \"#422400\"]\n)\nplt.show()","3d522c78":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","9f163590":"df = pd.get_dummies(df)","1ef1fb7b":"# Taking all the dependent variables in x and all the independent variables in y \n\nX=df.drop('testing_day',axis=1).values\ny=df['testing_day'].values","988b4863":"# Making a 80:20 train test split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)\n\nX_train.shape","49850479":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","48f9384b":"##### Creating Tensors\nX_train=torch.FloatTensor(X_train)\nX_test=torch.FloatTensor(X_test)\ny_train=torch.LongTensor(y_train)\ny_test=torch.LongTensor(y_test)","67b290ef":"class ANN_Model(nn.Module):\n    def __init__(self,input_features=8,hidden1=20,hidden2=10,hidden3= 5, out_features=2):\n        super().__init__()\n        self.f_connected1=nn.Linear(input_features,hidden1)\n        self.f_connected2=nn.Linear(hidden1,hidden2)\n        self.f_connected3=nn.Linear(hidden2,hidden3)\n        self.out=nn.Linear(hidden3,out_features)\n    def forward(self,x):\n        x=F.relu(self.f_connected1(x))\n        x=F.relu(self.f_connected2(x))\n        x=F.relu(self.f_connected3(x))\n        x=self.out(x)\n        return x","e4d33312":"torch.manual_seed(20)\nmodel=ANN_Model()\n# torch.manual_seed() fixes the random value to a certain value and does not change the value everytime one reruns it","1a3052da":"model.parameters","9fe6688a":"###Backward Propogation-- Define the loss_function,define the optimizer\nloss_function=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(model.parameters(),lr=0.01)","f6bcdc1d":"epochs=500\nfinal_losses=[]\nfor i in range(epochs):\n    i=i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if i%10==1:\n        print(\"Epoch number: {} and the loss : {}\".format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","aa0898f8":"### plot the loss function\nimport matplotlib.pyplot as plt\n%matplotlib inline","3a00e7d4":"plt.plot(range(epochs),final_losses)\nplt.ylabel('Loss')\nplt.xlabel('Epoch')","c69d9555":"predictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_test):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())","cad9a93e":"from sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,predictions)\nscore","b7888e08":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. That is all kagglers, @mpwolke was Here.' )","76431f16":"#No tests on Wednesday?","e0f531b4":"![](https:\/\/media.tenor.com\/images\/580d8006df883655068f426b4bb4bc1c\/tenor.gif)","511175b3":"#From Now only Errors that I have no clue how to fix.","fa12d201":"#f_connected in this case means fully connected layer","a306e2ea":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT3Uu1z_3Uy_XFFFRCtUIHeWIM2b-ArZajbfQ&usqp=CAU)wftv.com","f251bd60":"![](https:\/\/i.imgflip.com\/1xtie5.jpg)https:\/\/imgflip.com\/tag\/wednesday+addams?sort=latest&after=1y7qjm","a0892623":"#Codes by Sayantan Sadhu https:\/\/www.kaggle.com\/sayantansadhu\/pytorch-for-beginners-with-a-problem-statement"}}