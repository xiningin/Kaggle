{"cell_type":{"60e580e6":"code","dcb3b75d":"code","2594c63f":"code","27f3546c":"code","68b4b293":"code","702ee340":"code","2b39c4eb":"code","2a91b450":"code","5796392a":"code","09be553c":"code","542416ec":"code","7eecc373":"code","284ce31d":"code","5748c399":"code","cf513df2":"code","414433a8":"code","724d9fcb":"markdown","60dd5bfa":"markdown","eb9c6e41":"markdown","ac17837e":"markdown","d540f11e":"markdown","2c823e6a":"markdown","460d0b5e":"markdown","fd3e9955":"markdown"},"source":{"60e580e6":"import os\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport keras\nimport keras.backend as K\nfrom keras.datasets import cifar100\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization, Flatten, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.optimizers import Adam, SGD\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\n\nimport albumentations as albu\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score","dcb3b75d":"# parameters for data\nheight = 224\nwidth = 224\nchannels = 3\ninput_shape = (height, width, channels)\nn_classes = 100\n\n# parameters for optimizers\nlr = 1e-3\n\n# Parameters for training\nepochs = 10\nbatch_size = 8\n\n# parameters for callback functions\nes_patience = 10\nrlrop_patience = 5\ndecay_rate = 0.5","2594c63f":"(X, y), (X_test, y_test) = cifar100.load_data()\n\nprint(\"The shape of X_train : \", X.shape)\nprint(\"The shape of X_test : \", X_test.shape)\n\nfine_label_list =  ['apple', 'aquarium_fish', 'baby', 'bear', 'beaver', 'bed', 'bee', 'beetle', 'bicycle', 'bottle', 'bowl', 'boy', 'bridge', 'bus', 'butterfly', \n                    'camel', 'can', 'castle', 'caterpillar', 'cattle', 'chair', 'chimpanzee', 'clock', 'cloud', 'cockroach', 'couch', 'crab', 'crocodile', 'cup', \n                    'dinosaur', 'dolphin', 'elephant', 'flatfish', 'forest', 'fox', 'girl', 'hamster', 'house', 'kangaroo', 'computer_keyboard', \n                    'lamp', 'lawn_mower', 'leopard', 'lion', 'lizard', 'lobster', 'man', 'maple_tree', 'motorcycle', 'mountain', 'mouse', 'mushroom', \n                    'oak_tree', 'orange', 'orchid', 'otter', 'palm_tree', 'pear', 'pickup_truck', 'pine_tree', 'plain', 'plate', 'poppy', 'porcupine', 'possum', \n                    'rabbit', 'raccoon', 'ray', 'road', 'rocket', 'rose', \n                    'sea', 'seal', 'shark', 'shrew', 'skunk', 'skyscraper', 'snail', 'snake', 'spider', 'squirrel', 'streetcar', 'sunflower', 'sweet_pepper', \n                    'table', 'tank', 'telephone', 'television', 'tiger', 'tractor', 'train', 'trout', 'tulip', 'turtle', \n                    'wardrobe', 'whale', 'willow_tree', 'wolf', 'woman', 'worm']","27f3546c":"class_plotted = np.random.choice(range(n_classes), 5, replace = False)\nfor i in range(len(class_plotted)):\n    image_samples = X[y.reshape(-1) == class_plotted[i]][:5]\n    fig, ax = plt.subplots(nrows = 1, ncols = 5,figsize = (8,8))\n    fig.suptitle(\"label : %d, class : %s\" % (class_plotted[i], fine_label_list[class_plotted[i]]), y = .6)\n    for j in range(5):\n        ax[j].imshow(image_samples[j])\n        ax[j].axis('off')  \n    fig.tight_layout()\nplt.show()","68b4b293":"# Spliting the training data into a training data and a validation data.\nst = StratifiedShuffleSplit(n_splits = 2, test_size = 0.2, random_state = 1)\nfor train_index, val_index in st.split(X, y):\n    X_train, X_val, y_train, y_val = X[train_index], X[val_index], y[train_index], y[val_index]\n    \nprint(\"The number of training data : \", X_train.shape[0])\nprint(\"The number of validation data : \", X_val.shape[0])\n\ndel X, y","702ee340":"def np_resize(img, shape):\n    return cv2.resize(img, (shape[1], shape[0]), interpolation = cv2.INTER_CUBIC)","2b39c4eb":"class DataGenerator(keras.utils.Sequence):\n    'Generates data for keras'\n    def __init__(self, images , labels = None, mode = 'fit', batch_size = batch_size,\n                 dim = (height, width), channels = channels, n_classes = n_classes,\n                 shuffle = True, augment = False):\n        self.images = images\n        self.labels = labels\n        self.mode = mode\n        self.batch_size = batch_size\n        self.dim = dim\n        self.channels = channels\n        self.n_classes = n_classes\n        self.shuffle = shuffle\n        self.augment = augment\n        \n        self.on_epoch_end()\n        \n    def on_epoch_end(self):\n        'Updates indexes after each epoch'\n        self.indexes = np.arange(self.images.shape[0])\n        if self.shuffle == True:\n            np.random.shuffle(self.indexes)\n            \n    def __len__(self):\n        'Denotes the number of batches per epoch'\n        return int(np.floor(len(self.images) \/ self.batch_size))\n        \n    def __getitem__(self, index):\n        'Generate one batch of data'\n        batch_indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n\n        # =========================================================== #\n        # Generate mini-batch of X\n        # =========================================================== #\n        X = np.empty((self.batch_size, *self.dim, self.channels))\n        for i, ID in enumerate(batch_indexes):\n            # Generate a preprocessed image\n            img = self.images[ID]\n            img = img.astype(np.float32) \/ 255.\n            img = np_resize(img, self.dim)\n            X[i] = img\n            \n        \n        # =========================================================== #\n        # Generate mini-batch of y\n        # =========================================================== #\n        if self.mode == 'fit':\n            y = self.labels[batch_indexes]\n            y = to_categorical(y, n_classes)\n            # Augmentation should only be implemented in the training part.\n            if self.augment == True:\n                X = self.__augment_batch(X)                \n            \n            return X,y\n        \n        elif self.mode == 'predict':\n            return X       \n        \n        else:\n            raise AttributeError('The mode parameters should be set to \"fit\" or \"predict\"')\n            \n    def __random_transform(self, img):\n        composition = albu.Compose([albu.HorizontalFlip(p = 0.5),\n                                    albu.VerticalFlip(p = 0.5),\n                                    albu.GridDistortion(p = 0.2),\n                                    albu.ElasticTransform(p = 0.2)])\n        \n        return composition(image = img)['image']\n        \n    \n    def __augment_batch(self, img_batch):\n        for i in range(img_batch.shape[0]):\n            img_batch[i] = self.__random_transform(img_batch[i])\n            \n        return img_batch","2a91b450":"train_generator = DataGenerator(X_train, y_train, augment = True)\nvalid_generator = DataGenerator(X_val, y_val, augment = False)","5796392a":"!pip install -U efficientnet","09be553c":"import efficientnet.keras as efn \n\nefnb0 = efn.EfficientNetB0(weights = 'imagenet', include_top = False, classes = n_classes, input_shape = input_shape)\n\nmodel = Sequential()\nmodel.add(efnb0)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(n_classes, activation = 'softmax'))\n\nmodel.summary()","542416ec":"sgd = SGD(lr = lr, momentum = 0.9, nesterov = True)\nes = EarlyStopping(monitor = 'val_loss', mode = 'min', patience = es_patience, restore_best_weights = True, verbose = 1)\nrlrop = ReduceLROnPlateau(monitor = 'val_loss', mode = 'min', patience = rlrop_patience, \n                        factor = decay_rate, min_lr = 1e-6, verbose = 1)","7eecc373":"model.compile(loss = 'categorical_crossentropy', optimizer = sgd,metrics=['accuracy'])","284ce31d":"hist = model.fit_generator(train_generator,validation_data = valid_generator, \n                           epochs = epochs, verbose = 1, callbacks = [es, rlrop])\n","5748c399":"fig, loss_ax = plt.subplots()\n\nacc_ax = loss_ax.twinx()\n\nloss_ax.plot(hist.history['loss'], 'y', label='train loss')\nloss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n\nacc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\nacc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n\nloss_ax.set_xlabel('epoch')\nloss_ax.set_ylabel('loss')\nacc_ax.set_ylabel('accuray')\n\nloss_ax.legend(loc='upper left')\nacc_ax.legend(loc='lower left')\n\nplt.show()","cf513df2":"# model.load_weights(\"..\/input\/%s\/best_weight.h5\" % (os.listdir('..\/input')[0]))\nprint(\"The Accuracy on the validation data : {:.2f}%\".format(100 * model.evaluate_generator(valid_generator, verbose = 1)[-1]))","414433a8":"# Make sure to set shuffle be False.\ntest_generator = DataGenerator(X_test, mode = 'predict', augment = False, shuffle = False)\ny_pred = model.predict_generator(test_generator,verbose = 1)\ny_pred = np.argmax(y_pred, axis = 1)\n\nprint(\"The accuracy on the testing data : {:.2f}%\".format(100 * accuracy_score(y_test, y_pred)))","724d9fcb":"One can train only fully connected layers by adding the following code\n~~~python\nefnb0.trainable = False\n~~~","60dd5bfa":"- Before inference, make sure to set `shuffle=False` in test generator. \n    - If not, predictions cannot be compared  with true labels because test generator predicts output in the shuffled order.","eb9c6e41":"# Using a pretrained EfficientNetB0","ac17837e":"- The paper `EfficientNet` says balancing model's depth, model's width and resolution of input images is important for model scaling.\n- So original images should be resized to the specified size, which is (224, 224) in the case of `EfficientNetB0`. \n    - When I used the original size (32,32,3), the model's performance was less than 40% (accuracy).\n- The bicubic method is a good choice interpolation when upscaling images and it can be implemented by `cv2.INTER_CUBIC`.\n- To do this, I used a custom `DataGenerator` that contains the part of resizing a image.","d540f11e":"One can easily use EfficientNet models pretrained on `ImageNet` for transfer learnings (or fine tunings) just like other pretrained models.<br\/>\nThe manual to use EfficientNet is well documented at [this site](https:\/\/github.com\/qubvel\/efficientnet).<br\/>\nTo do this I refered to [this site](https:\/\/www.dlology.com\/blog\/transfer-learning-with-efficientnet\/).","2c823e6a":"# Data preparation\n- I decided to make the testing data be unknown so I splited the training data into a training data and a validation data.\n- Because the number of images for each class in the training data is quite small (500), I used `StratifiedShuffleSplit` method to keep the number of images for each class.","460d0b5e":"# CIFAR-100 dataset\n- In order to download `cifar-100` datasets from `keras.datasets`, one should make `Internet` setting  be **on**.\n- `cifar-100` contains 50,000 training data and 10,000 testing data each of which is 32 x 32 x 3 images with 1 class out of 100 classes.<br\/>\n- I could find the label names from [this sites](https:\/\/github.com\/keras-team\/keras\/issues\/2653)","fd3e9955":"- Plotting some sampled images from randomly chosen 5 classes"}}