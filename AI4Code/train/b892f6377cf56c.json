{"cell_type":{"959df10f":"code","8e72f80c":"code","5caa97a5":"code","d28ba7aa":"code","6d778c7c":"code","1f69f83b":"code","842f3a92":"code","bc347fc8":"code","2baa46f1":"code","1a7e8bce":"code","dee72b6e":"code","89d2433d":"code","44a480ff":"code","c2014e29":"code","4f2e1a5e":"code","ed189411":"code","ba90ffba":"code","39543663":"code","58120a5f":"code","20a1b4c0":"code","c7fd2b45":"code","17fa53a0":"code","1f5e4706":"code","8e71bcbb":"code","710f98aa":"code","d86be1c9":"code","d4af21a5":"code","cc47c106":"code","8b3730cf":"code","914e7b22":"code","e0c3ace5":"code","22c7e8fa":"code","cc4862c7":"code","7554f218":"code","9df54906":"code","c46bd076":"code","bfed5254":"markdown","dcda8fd0":"markdown","4036acf2":"markdown","5e2cff91":"markdown","cbd095d8":"markdown","f038cb38":"markdown","d85d6e28":"markdown","feb429b0":"markdown","ff374ebe":"markdown","77699bf7":"markdown","eb28ae70":"markdown","e387618e":"markdown","2c8f6aea":"markdown","47a67784":"markdown","f3a41483":"markdown","f16323fc":"markdown","5a905409":"markdown","ad687008":"markdown","144f36a5":"markdown","3e65320f":"markdown","0e50f0c8":"markdown","6eaae8d7":"markdown","080c838f":"markdown","f83c20f2":"markdown","b4a747b6":"markdown","409015a3":"markdown"},"source":{"959df10f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Important imports for the analysis of the dataset\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e72f80c":"# Create the dataframe and check the first 8 rows\napp_df = pd.read_csv(\"\/kaggle\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv\")\napp_df.head(8)","5caa97a5":"# Dropping columns that I will not use for this analysis\napp_df_cut = app_df.drop(columns=['URL', 'Subtitle', 'Icon URL'])","d28ba7aa":"app_df_cut.info()","6d778c7c":"# Most reviewed app\n#app_df_cut.iloc[app_df_cut[\"User Rating Count\"].idxmax()]\n\n# A better way of seeing the most reviwed apps \napp_df_cut = app_df_cut.sort_values(by=\"User Rating Count\", ascending=False)\napp_df_cut.head(5)","1f69f83b":"# Get the columns \"User Rating Count\" and \"Average User Rating\" where they are both equal to NaN and set the\n# values to 0.\napp_df_cut.loc[(app_df_cut[\"User Rating Count\"].isnull()) | (app_df_cut[\"Average User Rating\"].isnull()),\n               [\"Average User Rating\", \"User Rating Count\"]] = 0","842f3a92":"# Check if there are any other missing values in those columns\napp_df_cut.loc[(app_df_cut[\"User Rating Count\"].isnull()) | (app_df_cut[\"Average User Rating\"].isnull())]","bc347fc8":"# Get the column \"In-app Purchases\" where the value is NaN and set it to zero\napp_df_cut.loc[app_df_cut[\"In-app Purchases\"].isnull(),\n               \"In-app Purchases\"] = 0","2baa46f1":"# Check if there are any NaN value in the \"In-app Purchases\" column\napp_df_cut.loc[app_df_cut[\"In-app Purchases\"].isnull()]","1a7e8bce":"# Check if there are missing or 0 ID's\napp_df_cut.loc[(app_df_cut[\"ID\"] == 0) | (app_df_cut[\"ID\"].isnull()),\n              \"ID\"]","dee72b6e":"# Check for duplicates in the ID column\nlen(app_df_cut[\"ID\"]) - len(app_df_cut[\"ID\"].unique())\n\n# The number of unique values is lower than the total amount of ID's, therefore there are duplicates among them.","89d2433d":"# Drop every duplicate ID row\napp_df_cut.drop_duplicates(subset=\"ID\", inplace=True)\napp_df_cut.shape","44a480ff":"# Check if there are null values in the Size column\napp_df_cut[(app_df_cut[\"Size\"].isnull()) | (app_df_cut['Size'] == 0)]","c2014e29":"# Drop the only row in which the game has no size\napp_df_cut.drop([16782], axis=0, inplace=True)","4f2e1a5e":"# Convert the size to MB\napp_df_cut[\"Size\"] = round(app_df_cut[\"Size\"]\/1000000)\napp_df_cut.head(5)","ed189411":"# Drop the row with NaN values in the \"Price\" column\napp_df_cut = app_df_cut.drop(app_df_cut.loc[app_df_cut[\"Price\"].isnull()].index)","ba90ffba":"# Check if there are any null values on the price column\napp_df_cut.loc[app_df_cut[\"Price\"].isnull()]","39543663":"# Drop the rows with NaN values in the \"Languages\" column\napp_df_cut = app_df_cut.drop(app_df_cut.loc[app_df_cut[\"Languages\"].isnull()].index)","58120a5f":"# Check if there are any null values on the \"Languages\" column\napp_df_cut.loc[app_df_cut[\"Languages\"].isnull()]","20a1b4c0":"app_df_cut.info()","c7fd2b45":"app_df_cut.to_csv(\"app_df_clean.csv\", index=False)","17fa53a0":"app_df_clean = pd.read_csv(\"app_df_clean.csv\")\napp_df_clean.head()","1f5e4706":"# Transform the the string dates into datetime objects\napp_df_clean[\"Original Release Date\"] = pd.to_datetime(app_df_clean[\"Original Release Date\"])\napp_df_clean[\"Current Version Release Date\"] = pd.to_datetime(app_df_clean[\"Current Version Release Date\"])","8e71bcbb":"app_df_clean.info()","710f98aa":"# Make the figure\nplt.figure(figsize=(16,10))\n\n# Variables\nyears = app_df_clean[\"Original Release Date\"].apply(lambda date: date.year)\nsize = app_df_clean[\"Size\"]\n\n# Plot a swarmplot\npalette = sns.color_palette(\"muted\")\nsize = sns.swarmplot(x=years, y=size, palette=palette)\nsize.set_ylabel(\"Size (in MB)\", fontsize=16)\nsize.set_xlabel(\"Original Release Date\", fontsize=16)\nsize.set_title(\"Time Evolution of the Apps' Sizes\", fontsize=20)\nplt.show()","d86be1c9":"# Make the figure\nplt.figure(figsize=(16,10))\n\n# Plot a countplot\npalette1 = sns.color_palette(\"inferno_r\")\napps_per_year = sns.countplot(x=years, data=app_df_clean, palette=palette1)\napps_per_year.set_xlabel(\"Year of Release\", fontsize=16)\napps_per_year.set_ylabel(\"Amount\", fontsize=16)\napps_per_year.set_title(\"Quantity of Apps per Year\", fontsize=20)\n\n# Write the height of each bar on top of them\nfor p in apps_per_year.patches:\n    apps_per_year.annotate(\"{}\".format(p.get_height()),\n                          (p.get_x() + p.get_width() \/ 2, p.get_height() + 40),\n                          va=\"center\", ha=\"center\", fontsize=16)","d4af21a5":"#Make a list of years from 2014 to 2018\nyears_lst = [year for year in range(2014,2019)]\n\n#For loop to get a picture of the amount of games produced from August to December\nfor year in years_lst:\n    from_August = app_df_clean[\"Original Release Date\"].apply(lambda date: (date.year == year) & (date.month >= 8)).sum()\n    total = app_df_clean[\"Original Release Date\"].apply(lambda date: date.year == year).sum()\n    print(\"In {year}, {percentage}% games were produced from August to December.\"\n          .format(year=year,\n                  percentage=round((from_August\/total)*100, 1)))","cc47c106":"# Make the figure\nplt.figure(figsize=(16,10))\n\n# Variables\nprice = app_df_clean[\"Price\"]\n\n# Plot a Countplot\npalette2 = sns.light_palette(\"green\", reverse=True)\nprice_vis = sns.countplot(x=price, palette=palette2)\nprice_vis.set_xlabel(\"Price (in US dollars)\", fontsize=16)\nprice_vis.set_xticklabels(price_vis.get_xticklabels(), fontsize=12, rotation=45)\nprice_vis.set_ylabel(\"Amount\", fontsize=16)\nprice_vis.set_title(\"Quantity of Each App per Price\", fontsize=20)\n\n# Write the height of the bars on top\nfor p in price_vis.patches:\n    price_vis.annotate(\"{:.0f}\".format(p.get_height()), # Text that will appear on the screen\n                       (p.get_x() + p.get_width() \/ 2 + 0.1, p.get_height()), # (x, y) has to be a tuple\n                       ha='center', va='center', fontsize=14, color='black', xytext=(0, 10), # Customizations\n                       textcoords='offset points')","8b3730cf":"# Make the figure\nplt.figure(figsize=(16,10))\n\n# Variables\nin_app_purchases = app_df_clean[\"In-app Purchases\"].str.split(\",\").apply(lambda lst: len(lst))\n\n# Plot a stripplot\npalette3 = sns.color_palette(\"BuGn_r\", 23)\nin_app_purchases_vis = sns.stripplot(x=price, y=in_app_purchases, palette=palette3)\nin_app_purchases_vis.set_xlabel(\"Game Price (in US dollars)\", fontsize=16)\nin_app_purchases_vis.set_xticklabels(in_app_purchases_vis.get_xticklabels(), fontsize=12, rotation=45)\nin_app_purchases_vis.set_ylabel(\"In-app Purchases Available\", fontsize=16)\nin_app_purchases_vis.set_title(\"Quantity of In-app Purchases per Game Price\", fontsize=20)\nplt.show()","914e7b22":"# Plot a distribution of the top 200 apps by their price\n\n# Make the figure\nplt.figure(figsize=(16,10))\n\n# Plot a Countplot\npalette4 = sns.color_palette(\"BuPu_r\")\ntop_prices = sns.countplot(app_df_clean.iloc[:200][\"Price\"], palette=palette4)\ntop_prices.set_xlabel(\"Price (in US dollars)\", fontsize=16)\ntop_prices.set_xticklabels(top_prices.get_xticklabels(), fontsize=12)\ntop_prices.set_ylabel(\"Amount\", fontsize=16)\ntop_prices.set_title(\"Quantity of Each App per Price\", fontsize=20)\n\n# Write the height of the bars on top\nfor p in top_prices.patches:\n    top_prices.annotate(\"{:.0f}\".format(p.get_height()), \n                        (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                        ha='center', va='center', fontsize=14, color='black', xytext=(0, 8),\n                        textcoords='offset points')","e0c3ace5":"# Create the DataFrames needed\npaid = app_df_clean[app_df_clean[\"Price\"] > 0]\ntotal_paid = len(paid)\nfree = app_df_clean[app_df_clean[\"Price\"] == 0]\ntotal_free = len(free)\n\n# Make the figure and the axes (1 row, 2 columns)\nfig, axes = plt.subplots(1, 2, figsize=(16,10))\n\n# Free apps countplot\nfree_vis = sns.countplot(x=\"Average User Rating\", data=free, ax=axes[0])\nfree_vis.set_xlabel(\"Average User Rating\", fontsize=16)\nfree_vis.set_ylabel(\"Amount\", fontsize=16)\nfree_vis.set_title(\"Free Apps\", fontsize=20)\n\n# Display the percentages on top of the bars\nfor p in free_vis.patches:\n     free_vis.annotate(\"{:.1f}%\".format(100 * (p.get_height()\/total_free)),\n                       (p.get_x() + p.get_width() \/ 2 + 0.1, p.get_height()),\n                        ha='center', va='center', fontsize=14, color='black', xytext=(0, 8),\n                        textcoords='offset points')\n    \n# Paid apps countplot\npaid_vis = sns.countplot(x=\"Average User Rating\", data=paid, ax=axes[1])\npaid_vis.set_xlabel(\"Average User Rating\", fontsize=16)\npaid_vis.set_ylabel(\" \", fontsize=16)\npaid_vis.set_title(\"Paid Apps\", fontsize=20)\n\n# Display the percentages on top of the bars\nfor p in paid_vis.patches:\n    paid_vis.annotate(\"{:.1f}%\".format(100 * (p.get_height()\/total_paid)),\n                      (p.get_x() + p.get_width() \/ 2 + 0.1, p.get_height()),\n                       ha='center', va='center', fontsize=14, color='black', xytext=(0, 8),\n                       textcoords='offset points')","22c7e8fa":"# Make the figure\nplt.figure(figsize=(16,10))\n\n# Make a countplot\npalette5 = sns.color_palette(\"BuGn_r\")\nage_vis = sns.countplot(x=app_df_clean[\"Age Rating\"], order=[\"4+\", \"9+\", \"12+\", \"17+\"], palette=palette5)\nage_vis.set_xlabel(\"Age Rating\", fontsize=16)\nage_vis.set_ylabel(\"Amount\", fontsize=16)\nage_vis.set_title(\"Amount of Games per Age Restriction\", fontsize=20)\n\n# Write the height of the bars on top\nfor p in age_vis.patches:\n    age_vis.annotate(\"{:.0f}\".format(p.get_height()), \n                        (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                        ha='center', va='center', fontsize=14, color='black', xytext=(0, 8),\n                        textcoords='offset points')","cc4862c7":"# Create a new column that contains the amount of languages that app has available\napp_df_clean[\"numLang\"] = app_df_clean[\"Languages\"].apply(lambda x: len(x.split(\",\")))","7554f218":"#Make the figure\nplt.figure(figsize=(16,10))\n\n#Variables\nlang = app_df_clean.loc[app_df_clean[\"numLang\"] <= 25, \"numLang\"]\n\n#Plot a countplot\npalette6 = sns.color_palette(\"PuBuGn_r\")\nnumLang_vis = sns.countplot(x=lang, data=app_df_clean, palette=palette6)\nnumLang_vis.set_xlabel(\"Quantity of Languages\", fontsize=16)\nnumLang_vis.set_ylabel(\"Amount of Games\", fontsize=16)\nnumLang_vis.set_title(\"Quantity of Languages Available per Game\", fontsize=20)\n\n# Write the height of the bars on top\nfor p in numLang_vis.patches:\n    numLang_vis.annotate(\"{:.0f}\".format(p.get_height()), \n                        (p.get_x() + p.get_width() \/ 2. + .1, p.get_height()),\n                        ha='center', va='center', fontsize=12, color='black', xytext=(0, 12),\n                        textcoords='offset points')","9df54906":"#Amount of games that have only the English language\nlen(app_df_clean[(app_df_clean[\"numLang\"] == 1) & (app_df_clean[\"Languages\"] == \"EN\")])","c46bd076":"#Amount of games that have only one language and is not English\nlen(app_df_clean[(app_df_clean[\"numLang\"] == 1) & (app_df_clean[\"Languages\"] != \"EN\")])","bfed5254":"### In-app Purchases column\n> I'm considering that the null values within the \"In-app Purchases\" column means that there are no in-app purchases available\n\n**Different considerations could have been done, but I will continue with this one for now.**","dcda8fd0":"> **The vast majority of the games - 12.431 - have only one language available and more than 99% of these use the English language. After that there is a huge drop and only 1089 games have two languages available. Note that not all the data is shown in the graph above, but games with more than 25 languages were left out and they don't represent a huge number overall. It is interesting to point out that there is a strange increase in the number of games with 16 languages and then another one when we reach 25 languages. The explanation to that is unknown and it will not be investigated in this notebook.**","4036acf2":"> **As expected, free and lower priced apps provide more items to be purchased and a wider range of in-app prices than expensive games. Two reasons can be named:**\n>\n>> **1.The developers have to invest money into making the games and updating them, therefore they need a source of income. In the case of free games this comes with the in-app purchases available.**\n>\n>> **2. People who have spent a lot of money on an app would not be happy or willing to spend more, given that they have already made an initial high investment.**","5e2cff91":"### Evolution of the Apps' Size\n> Do the apps get bigger with time?","cbd095d8":"### Now that the dataset is organized, let's save it into a csv file so that we do not have to redo all the steps above","f038cb38":"# 3. Graphics and Insights","d85d6e28":"> **The graph above shows that among the top 200 games the vast majority are free ones. This result makes sense considering you don't have to invest any money to start playing and can spend afterwards if you would like to invest in it.**","feb429b0":"> **Having checked the previous five years we can see that the amount of games released from August to December represents a significant portion of the whole and that it can be considered roughly constant at 42%. Nevertheless, the last two years show a tendency for a linear decrease in the quantity of games released per year and taking into account that we still have 42% of the games of this year to be released, the total amount in the present year (2019) would be 2617. This is bigger than 2018, but this was not an elaborate calculation as we took the average of games being prouced between the months 8-12 to be 42%.**","ff374ebe":"> **There is no indications to whether a paid or a free game is better. Actually, the pattern of user ratings are pretty much equal for both type of games. The graph above shows that both categories seems to deliver a good service and mostly satisfy their costumers as most of the rating are between 4-5 stars. We can also identify that the majority of the users do not rate the games.**","77699bf7":"# Analysis of Games from the Apple Store\n\nThe dataset contains 18 columns:\n - **URL**: _URL of the app.[](http:\/\/)_\n - **ID**: _ID of the game._\n - **Name**: _Name of the game._\n - **Subtitle**: _Advertisement text of the game._\n - **Icon URL**: _Icon of the game, 512x512 pixels jpg._\n - **Average User Rating**: _Rounded to nearest .5. Requires at least 5 ratings._\n - **User Rating Count**: _Total of user ratings. Null values means it is below 5._\n - **Price**: _Price in USD._\n - **In-app Purchases**: _Prices of available in-app purchases._\n - **Description**: _Game description._\n - **Developer**: _Game developer._\n - **Age Rating**: _Age to play the game. Either 4+, 9+, 12+or 17+._\n - **Languages**: _Languages the game supports in ISO Alpha-2 codes._\n - **Size**: _Size in bytes._\n - **Genre**: _Main genre of the game._\n - **Primary Genre**: _All genre the game fits in._\n - **Original Release Date**: _Date the game was released._\n - **Current Version Release Date**: _Date of last update._\n \nThe questions we are going to answer are:\n\n    1. Does the advance in technology impact the size of the apps?\n    2. Does the advance in technology impact the amount of apps being produced?\n    3. Are most apps free or paid and which category is more popular?\n    4. Is there a better one between free or paid apps?\n    5. How is the distribution of the age restriction?\n    6. Do most games offer more than one language?\n    \n#### Below is the sequence I will be following:\n    1. Reading and Understanding the Data\n    2. Exploratory analysis\n         -> Missing data\n         -> Data types in the dataframe\n         -> Sorting by a desired column\n         -> Saving a new file after this job is done\n    3. Graphics and insights\n    \n## Important note\n > **This notebook is intended exclusively to practicing and learning purposes. Any corrections, comments and suggestions are more than welcome and I would really appreciate it. Feel free to get in touch if you liked it or if you want to colaborate somehow.**","eb28ae70":"> **From 2008 to 2016 we can identify a drastic increase in the amount of games released each year in which the highest increase occurs between the years of 2015 and 2016. After 2016 the amount of games released per year starts to drop down almost linearly for 2 years (2019 cannot be considered yet because the data was collected in August, 4 months of data of the current year is missing).**\n>\n> **Without further analysis, I would argue that after a boom in the production of apps it gets harder to come up with new ideas that are not out there yet, making the production and release of new games slow down, but it is important to keep in mind that without further research it cannot be taken as the right explanation.**","e387618e":"### Price column\n   > Games with a missing value in the price column will be dropped","2c8f6aea":"### Rating columns\n> I'm going to consider that all the NaN values in the \"User Rating Count\" column means that the game recieved no ratings and therefore is 0. If the app recieved no ratings, then the \"Average User Rating\" will also be zero for these games.","47a67784":"> **With the advance in technology and the internet becoming cheaper and cheaper more people have access to faster networks. As the years go by, it can be seen in the graph above that the games' size get bigger. Some games that have more than 2GB can be noted, reaching a maximum value of 4GB, but they are not the most common ones. As each game is represented by a different tiny ball in the graph above, the quantity of games seems to grow as well. Let's investigate the amount of apps per year to be sure.**","f3a41483":"# Languages\n> Do most games have various choices of languages?","f16323fc":"> **Most of the apps are in the +4 age category, which can be translated as \"everyone can play\". This ensures that the developers are targeting a much broader audience with their games.**","5a905409":"### We know that most of the apps are free. Let's see if there are any links between an app being paid and being better than the free ones:","ad687008":"# Age Rating\n> Is there a preference for permitted age to the games?","144f36a5":"### ID column\n> Let's check if there are missing or duplicate ID's in the dataset:","3e65320f":"### Languages column\n> Games with a missing value in the \"Languages\" column will be dropped","0e50f0c8":"# 2. Exploratory Analysis","6eaae8d7":"***\n\nFrom the above cell I understand that I should take a closer look into the columns listed below because they have some missing values:\n - Average User Rating\n - User Rating Count\n - Price\n - Languages\n \nAnother important thing to check is if there are any **duplicate ID's** and, if so, remove them. Also, the last two column are not *datetime* type, which they should be.\n\nThe dataframe will be sorted by the \"User Rating Count\" column. This column will be our guide to conclude if a game is successful or not.","080c838f":"### Even though most games are free we should take a look if a type of app (paid or free) is better. Let's do that by checking the average user rating.","f83c20f2":"### Size column\n> I will check if there are any missing or 0 values in the size column. If so, they will be removed from the data since we cannot know it's value.","b4a747b6":"### The amount of apps had a considerable increase in the past years indicating that producing an app has been a trend and possibly a lucrative market. That being said, it is important to analyse if there is a preference for free or paid games and the range of prices they are in.","409015a3":"> **We can see that the majority of the games are free. That leads me to analyse if the free apps have more in-app purchases then the paid ones, meaning that this might be their source of income.**"}}