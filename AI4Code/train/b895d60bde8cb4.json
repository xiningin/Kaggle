{"cell_type":{"ebf300cb":"code","6b687755":"code","fcf4ee97":"code","185a394d":"code","7e1d4035":"code","915d8a34":"code","94cbbf42":"code","c2cfa27a":"code","954dd528":"code","df111e5f":"code","acc2e8d3":"code","407c3e61":"code","bb461449":"code","9fb93f49":"code","c5f7efb9":"code","1a3e245a":"code","4dfaf3fd":"code","2cb0aae5":"code","9a6c88d9":"code","2b558d68":"code","06463ef0":"code","9cc85a0e":"code","2ee31d75":"code","1b9b70db":"code","36f1e4ad":"code","ec49fb2f":"code","7e0442e8":"code","82256e8a":"code","3369def6":"code","7fce1b05":"code","cee65414":"code","fd824e39":"code","eef6c0b1":"code","8b42d8c7":"code","9bb33c6d":"markdown","8e2515e3":"markdown","3cb6b185":"markdown","1463347c":"markdown","2a34b850":"markdown","2cf0a8be":"markdown","41d44ed4":"markdown"},"source":{"ebf300cb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6b687755":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","fcf4ee97":"print(\"Train shape\",train_df.shape)\nprint(\"Test shape\",test_df.shape)","185a394d":"train_df.head()","7e1d4035":"train_df.info()","915d8a34":"train_df.describe()","94cbbf42":"train_df.isna().sum()","c2cfa27a":"features = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']\nfig, ax = plt.subplots(nrows=2, ncols=3, figsize=(20, 10))\nstart = 0\nfor j in range(2):\n    for i in range(3):\n        if start == len(features):\n            break\n        sns.barplot(x=features[start],\n                    y='Survived', data=train_df, ax=ax[j, i])\n        start += 1","954dd528":"ax = sns.boxplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\", data=train_df)\nax.set_yscale('log')","df111e5f":"plt.figure(figsize=(8, 8))\ncorrmap = sns.heatmap(train_df.drop('PassengerId',axis=1).corr(), square=True, annot=True)","acc2e8d3":"# For pipeline\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n\n# Sklearn classifiers\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Other Classifiers\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","407c3e61":"methods = {\n    'RandomForestClassifier' : RandomForestClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n    'LogisticRegression': LogisticRegression(),\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'XGBClassifier': XGBClassifier(verbosity=0, use_label_encoder=False),\n    'LGBMClassifier' : LGBMClassifier(),\n    'CatBoostClassifier' : CatBoostClassifier(verbose=False),\n}","bb461449":"train_df.columns","9fb93f49":"train_df.info()","c5f7efb9":"train_df['Pclass'] = train_df['Pclass'].astype(str)\ntrain_df['Parch'] = train_df['Parch'].astype(str)","1a3e245a":"X = train_df[[ 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked' ]]\ny = train_df['Survived']","4dfaf3fd":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42 )","2cb0aae5":"for name, model in methods.items():\n    pipeline = Pipeline( steps=[\n        ( 'transformer', ColumnTransformer(transformers=[\n            ('numerical', Pipeline(steps=[\n                ('imputer', SimpleImputer(strategy='median') ),\n                ('scaler', StandardScaler()) ]), \n            ['Fare', 'Age', 'SibSp',]),\n            ('categorical', Pipeline(steps=[\n                ('imputer', SimpleImputer(strategy='most_frequent') ),\n                ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n            ['Sex', 'Pclass', 'Embarked', 'Parch'])\n        ]) ),\n        ( 'classifier', model)\n    ])\n    pipeline.fit(X_train, y_train)\n    \n    y_predicted=pipeline.predict(X_test)\n    print(name, accuracy_score(y_test, y_predicted))","9a6c88d9":"from sklearn.model_selection import StratifiedKFold","2b558d68":"results = []\nnames = []\n\nfor name, model in methods.items():\n    skfold = StratifiedKFold(n_splits=5)\n    pipeline =Pipeline( steps=[\n        ( 'transformer', ColumnTransformer(transformers=[\n            ('numerical', Pipeline(steps=[\n                ('imputer', SimpleImputer(strategy='median') ),\n                ('scaler', StandardScaler()) ]), \n            ['Fare', 'Age', 'SibSp',]),\n            ('categorical', Pipeline(steps=[\n                ('imputer', SimpleImputer(strategy='most_frequent') ),\n                ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n            ['Sex', 'Pclass', 'Embarked', 'Parch'])\n        ]) ),\n        ( 'classifier', model)\n    ])\n    cv_results = cross_val_score(pipeline, X, y, cv=skfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = '%s: %f (%f)' % (name, cv_results.mean(), cv_results.std())\n    print(msg)","06463ef0":"train_df['Cabin']","9cc85a0e":"train_df[~train_df['Cabin'].isna()]['Cabin']","2ee31d75":"train_df[~train_df['Cabin'].isna()]['Cabin'].apply( lambda x: x[0]).value_counts()","1b9b70db":"# Creating new feature \ntrain_df['cabin_letter'] = train_df[~train_df['Cabin'].isna()] ['Cabin'].apply( lambda x: x[0])","36f1e4ad":"X = train_df[[ 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'cabin_letter' ]]\ny = train_df['Survived']","ec49fb2f":"sss = StratifiedKFold()\nacc = []\nfor train_idx, test_idx in sss.split(X, y):\n    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n    pipe_1 = Pipeline( steps=[\n            ( 'transformer', ColumnTransformer(transformers=[\n                ('numerical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='median') ),\n                    ('scaler', StandardScaler()) ]), \n                ['Fare', 'Age', 'SibSp',]),\n                ('categorical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='most_frequent') ),\n                    ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n                ['Sex', 'Pclass', 'Embarked', 'Parch', ])\n            ]) ),\n            ( 'classifier', CatBoostClassifier(silent=True))\n        ])\n    pipe_1.fit(X_train, y_train)\n    y_predicted=pipe_1.predict(X_test)\n    acc.append(accuracy_score(y_test, y_predicted))\nnp.mean(acc)","7e0442e8":"sss = StratifiedKFold()\nacc = []\nfor train_idx, test_idx in sss.split(X, y):\n    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n    pipe_2 = Pipeline( steps=[\n            ( 'transformer', ColumnTransformer(transformers=[\n                ('numerical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='median') ),\n                    ('scaler', StandardScaler()) ]), \n                ['Fare', 'Age', 'SibSp',]),\n                ('categorical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='most_frequent') ),\n                    ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n                ['Sex', 'Pclass', 'Embarked', 'Parch', 'cabin_letter'])\n            ]) ),\n            ( 'classifier', CatBoostClassifier(silent=True))\n        ])\n    pipe_2.fit(X_train, y_train)\n    y_predicted=pipe_2.predict(X_test)\n    acc.append(accuracy_score(y_test, y_predicted))\nnp.mean(acc)","82256e8a":"sss = StratifiedKFold()\nacc = []\nfor train_idx, test_idx in sss.split(X, y):\n    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n    pipe_3 = Pipeline( steps=[\n            ( 'transformer', ColumnTransformer(transformers=[\n                ('numerical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='mean') ),\n                    ('scaler', StandardScaler()) ]), \n                ['Fare', 'Age', 'SibSp',]),\n                ('categorical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='most_frequent') ),\n                    ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n                ['Sex', 'Pclass', 'Embarked', 'Parch', 'cabin_letter'])\n            ]) ),\n            ( 'classifier', VotingClassifier( estimators=[\n                ('cat', CatBoostClassifier(silent=True) ),\n                ('xgb', XGBClassifier(verbosity=0, use_label_encoder=False)),\n                ('rf', RandomForestClassifier()),\n            ], voting='soft') )\n        ])\n    pipe_3.fit(X_train, y_train)\n    y_predicted=pipe_3.predict(X_test)\n    acc.append(accuracy_score(y_test, y_predicted))\nnp.mean(acc)","3369def6":"sss = StratifiedKFold()\nacc = []\nfor train_idx, test_idx in sss.split(X, y):\n    X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]\n    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]\n    pipe_3 = Pipeline( steps=[\n            ( 'transformer', ColumnTransformer(transformers=[\n                ('numerical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='mean') ),\n                    ('scaler', StandardScaler()) ]), \n                ['Fare', 'Age', 'SibSp']),\n                ('categorical', Pipeline(steps=[\n                    ('imputer', SimpleImputer(strategy='most_frequent') ),\n                    ('ohe', OneHotEncoder(handle_unknown='ignore') ) ]), \n                ['Sex', 'Pclass', 'Embarked', 'Parch', 'cabin_letter'])\n            ]) ),\n            ( 'classifier', CatBoostClassifier( depth=8, learning_rate=0.3,\n                silent=True))\n        ])\n    pipe_3.fit(X_train, y_train)\n    y_predicted=pipe_3.predict(X_test)\n    acc.append(accuracy_score(y_test, y_predicted))\nnp.mean(acc)","7fce1b05":"test_df['Pclass'] = test_df['Pclass'].astype(str)\ntest_df['Parch'] = test_df['Parch'].astype(str)\ntest_df['cabin_letter'] = test_df[~test_df['Cabin'].isna()] ['Cabin'].apply( lambda x: x[0])","cee65414":"test_X = test_df[X.columns]","fd824e39":"test_Y = pipe_3.predict(test_X)","eef6c0b1":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = test_Y","8b42d8c7":"submission.to_csv('submission_1.csv', index=False)","9bb33c6d":"# Visualizations","8e2515e3":"### Understanding the data","3cb6b185":"### Loading Train and Test","1463347c":"## Voting Classifier","2a34b850":"## Model Construction","2cf0a8be":"### Feature engineering","41d44ed4":"# Submission"}}