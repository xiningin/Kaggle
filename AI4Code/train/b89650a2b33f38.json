{"cell_type":{"96d88fe5":"code","e07a4d9e":"code","33b0bd11":"code","cdd1e288":"code","31655c74":"code","3d0bdb1b":"code","6cf81265":"code","853e5a98":"code","053fd502":"code","b1ad36a3":"code","de45f812":"code","f5b93eac":"code","5e9b37b7":"code","b78e0e99":"code","901a75bb":"code","b8b6b1be":"code","d998bf4d":"code","83d157b9":"code","c6be0e00":"code","38db778e":"code","82be8946":"code","ab927d68":"code","7746955d":"code","f0d373e1":"code","08bfbfbb":"code","bb9d2a39":"code","6b97ce47":"code","c94ddfcf":"code","6a8b67cc":"code","555fa6d1":"code","585c4736":"code","89f8ee7a":"code","18b64776":"code","b5c9d624":"code","006e109e":"code","3c9f06eb":"code","9f61adb8":"code","797f32dc":"code","62481472":"code","71f5a3e6":"code","aa708911":"code","ecfa17aa":"code","53981480":"code","b977d5a8":"code","63df1c22":"code","d204b104":"code","cfad5a62":"code","fe3fed81":"code","4d87142e":"code","3c5fa791":"code","77f51aa5":"code","8c901d37":"code","d67e4e02":"code","2079af71":"code","906e0810":"code","ade053db":"code","1ac03d0f":"code","3d2f7271":"code","76beee01":"code","8a43a0b6":"code","2b4cc064":"code","6ac28a6a":"code","60ae23e5":"code","d419ea68":"code","ca27a987":"code","ef287f4b":"code","aa0be26e":"code","3030a3b1":"code","186c3ff9":"code","e825aff4":"markdown","b02e7f68":"markdown","b43055a9":"markdown","85e2c7ec":"markdown","fd2cfc3e":"markdown","4fd58f19":"markdown","34832847":"markdown","6a57d4ca":"markdown","10b9e491":"markdown","6c63e0e3":"markdown","5b5750ef":"markdown","ecc7f42f":"markdown","5392739f":"markdown","c1520dca":"markdown","6b7df546":"markdown","35ca6e2a":"markdown"},"source":{"96d88fe5":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom dateutil import parser\n","e07a4d9e":"data = pd.read_csv('..\/input\/app-data\/appdata10.csv')","33b0bd11":"data.head()","cdd1e288":"data.shape","31655c74":"data.describe()","3d0bdb1b":"data['hour'] = data.hour.str.slice(1, 3).astype(int)","6cf81265":"data","853e5a98":"numerical = [f for f in data if data[f].dtypes!='O']","053fd502":"numerical","b1ad36a3":"numerical.remove('user')","de45f812":"for f in numerical:\n    dataC = data.copy()\n    dataC[f].hist()\n    plt.xlabel(f)\n    plt.show()","f5b93eac":"data2 = data.copy().drop(columns = ['user', 'first_open', 'enrolled_date', 'screen_list', 'enrolled'])","5e9b37b7":"data2","b78e0e99":"plt.figure(figsize=(25,18))\nplt.suptitle('Histograms of Numerical Columns', fontsize=40)\nfor i in range(1, data2.shape[1] +1):\n    plt.subplot(3, 3, i)\n    f = plt.gca()\n    f.set_title(data2.columns.values[i -1 ])\n\n    vals = np.size(data2.iloc[:, i - 1].unique())\n    plt.hist(data2.iloc[:, i - 1], bins=vals, color='blue')\n    \n\nplt.show()","901a75bb":"data2.corrwith(data['enrolled']).plot.bar(figsize=(15,8), color = 'blue', rot=45, fontsize=15, \n                                          title = 'Correlation with Enrolled (Response) variable')","b8b6b1be":"plt.figure(figsize=(10,15))\n\nsns.heatmap(data2.corr(), square=True, linewidths=.5)\n","d998bf4d":"data.dtypes","83d157b9":"data['first_open'] = [parser.parse(f) for f in data['first_open']]","c6be0e00":"data.dtypes","38db778e":"data['enrolled_date'] = [parser.parse(f) if isinstance(f, str) else f for f in data['enrolled_date']]","82be8946":"data.dtypes","ab927d68":"data['difference'] = (data['enrolled_date']-data['first_open']).astype('timedelta64[h]')","7746955d":"response_hist = plt.hist(data[\"difference\"].dropna(), color='#3F5D7D')","f0d373e1":"response_hist = plt.hist(data[\"difference\"].dropna(), color='#3F5D7D', range = (0, 48))","08bfbfbb":"data.loc[data.difference > 48, 'enrolled'] = 0\ndata = data.drop(columns=['enrolled_date', 'difference', 'first_open'])","bb9d2a39":"data","6b97ce47":"top_screens = pd.read_csv('..\/input\/app-data\/top_screens.csv').top_screens.values\ntop_screens","c94ddfcf":"len(top_screens)","6a8b67cc":"data['screen_list'] = data.screen_list.astype(str) + ','","555fa6d1":"data","585c4736":"for sc in top_screens:\n    data[sc] = data.screen_list.str.contains(sc).astype(int)\n    data['screen_list'] = data['screen_list'].replace(sc+ \",\" + \"\")","89f8ee7a":"data.head(20)","18b64776":"data['other'] = data['screen_list'].str.count(',')","b5c9d624":"data","006e109e":"data = data.drop(['screen_list'], axis=1)","3c9f06eb":"savings_screens = [\"Saving1\", \"Saving2\", \"Saving2Amount\", \"Saving4\", \"Saving5\", \"Saving6\", \"Saving7\", \"Saving8\", \"Saving9\",\n                    \"Saving10\"]","9f61adb8":"data[\"SavingCount\"] = data[savings_screens].sum(axis=1)\ndata = data.drop(columns=savings_screens)","797f32dc":"cm_screens = [\"Credit1\", \"Credit2\", \"Credit3\", \"Credit3Container\", \"Credit3Dashboard\"]","62481472":"data[\"CMCount\"] = data[cm_screens].sum(axis=1)\ndata = data.drop(columns=cm_screens)","71f5a3e6":"cc_screens = [\"CC1\", \"CC1Category\", \"CC3\"]","aa708911":"data[\"CCCount\"] = data[cc_screens].sum(axis=1)\ndata = data.drop(columns=cc_screens)","ecfa17aa":"loan_screens = [\"Loan\", \"Loan2\", \"Loan3\", \"Loan4\"]","53981480":"data[\"LoansCount\"] = data[loan_screens].sum(axis=1)\ndata = data.drop(columns=loan_screens)","b977d5a8":"datan = data.copy()","63df1c22":"Y = data['enrolled']\nX = data.drop(['enrolled'], axis=1)","d204b104":"from sklearn.model_selection import train_test_split","cfad5a62":"xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=0.2, random_state=0)","fe3fed81":"xtrain.shape","4d87142e":"ytrain.shape","3c5fa791":"# Removing Identifiers\n\ntrain_identity = xtrain['user']\nxtrain = xtrain.drop(['user'], axis = 1)\n\ntest_identity = xtest['user']\nxtest = xtest.drop(['user'], axis=1)","77f51aa5":"from sklearn.preprocessing import StandardScaler","8c901d37":"sc_train = StandardScaler()\nsc_test = StandardScaler()","d67e4e02":"xtrain2 = pd.DataFrame(sc_train.fit_transform(xtrain))\nxtest2 = pd.DataFrame(sc_test.fit_transform(xtest))","2079af71":"xtrain2.columns = xtrain.columns.values","906e0810":"xtest2.columns = xtest.columns.values","ade053db":"xtrain2.index = xtrain.index.values\nxtest2.index = xtest.index.values","1ac03d0f":"xtrain2","3d2f7271":"xtrain  = xtrain2\nxtest = xtest2","76beee01":"from sklearn.linear_model import LogisticRegression","8a43a0b6":"model1 = LogisticRegression(random_state = 0,  max_iter=100)\nmodel1.fit(xtrain, ytrain)","2b4cc064":"from sklearn.ensemble import RandomForestClassifier","6ac28a6a":"model2 = RandomForestClassifier(n_estimators=150)\nmodel2.fit(xtrain, ytrain)","60ae23e5":"y_pred1 = model1.predict(xtest)\ny_pred2 = model2.predict(xtest)","d419ea68":"model1.score(xtest, ytest)","ca27a987":"model2.score(xtest, ytest)","ef287f4b":"from sklearn.metrics import confusion_matrix","aa0be26e":"cm1 = confusion_matrix(ytest, y_pred1)\ncm2 = confusion_matrix(ytest, y_pred2)","3030a3b1":"sns.heatmap(cm1, annot= True, fmt='g')\nplt.title('Logistic Regression')","186c3ff9":"sns.heatmap(cm2, annot= True, fmt='g')\nplt.title('Random Forest')","e825aff4":"### - Object to datetime","b02e7f68":"#### This shows that people enroll in first 500 hours but we are not sure as it can be very less than 500 hours so we can use range ","b43055a9":"##### Random Forest got accuracy of 77%\n","85e2c7ec":"# Data Preprocessing","fd2cfc3e":"# Model Building","4fd58f19":"###### The Other columns shows how many left over screens we have","34832847":"# Feature Engineering","6a57d4ca":"## Getting rid of same type of screens by creating Funnels","10b9e491":"## Formatting Screen_list","6c63e0e3":"#### - Feature Scalling","5b5750ef":"#### Very less correlation between independent  variables","ecc7f42f":"#### It is very clear that people enroll in first 48 hours","5392739f":"## Confusion Matrix","c1520dca":"##### - More the number of screens and who has played mini games are  more likely to enroll\n##### - More aged people tends to enroll less","6b7df546":"datan","35ca6e2a":"##### Logistic Regression got accuracy of 76%"}}