{"cell_type":{"22ef4a57":"code","9320e5ce":"code","39f49b9d":"code","556902c7":"code","1477e161":"code","994ce3fc":"code","e1e7a722":"code","68b5e6d2":"code","552e0658":"code","8d436b0f":"code","bf3046c7":"code","96f47215":"code","e0bc50c8":"code","e40edf50":"code","6ccab1d1":"code","505e86b4":"code","65770e05":"code","dcefb418":"code","8e31680e":"code","b94d0509":"code","3c684636":"code","8e7b562a":"code","8260802b":"code","83dab30f":"code","595fd931":"code","04482d34":"code","89636657":"code","7cdbc290":"code","af996178":"code","2116140e":"code","5b04a7a2":"code","afa1d730":"code","a517cc01":"code","ee0120fd":"code","188e343d":"code","ed9e0faf":"code","c52a39e4":"code","0d048e5c":"code","a3e21e90":"code","234aecac":"code","26ff9f23":"code","f4417d60":"code","d61d5268":"code","f6856aa3":"markdown","fd8aaa66":"markdown","d9e322a1":"markdown","66f70a07":"markdown","dab1a6fa":"markdown","60daaabc":"markdown","ce7a7ff0":"markdown"},"source":{"22ef4a57":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom scipy import stats\nimport numpy as np","9320e5ce":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')","39f49b9d":"df.info()","556902c7":"df.shape","1477e161":"df.head(7)","994ce3fc":"df.isnull().sum().sum()","e1e7a722":"data=df.copy()","68b5e6d2":"plt.style.use('seaborn')","552e0658":"plt.figure(figsize=(5,3))\ndata.sex.value_counts().plot.pie(autopct='%1.1f%%')\nplt.show()","8d436b0f":"plt.figure(figsize=(5, 3))\ndf.groupby('smoker').sex.value_counts().unstack(0).plot.bar()\nplt.title('Smoking cases between genders')\nplt.xticks(rotation=0)\nplt.show()","bf3046c7":"plt.figure(figsize=(6, 4))\ndata.groupby(['region', 'sex']).smoker.value_counts().unstack(0).plot.bar()\nplt.title('Smoking cases between genders and regions')\nplt.xticks(rotation=0)\nplt.show()","96f47215":"plt.figure(figsize=(6, 4))\ndata.groupby('region').charges.mean().plot.bar()\nplt.title('Average charges by regions')\nplt.xticks(rotation=0)\nplt.show()","e0bc50c8":"plt.figure(figsize=(6, 4))\ndata.groupby('age').charges.mean().plot()\nplt.title('Average charges by age')\nplt.show()","e40edf50":"plt.figure(figsize=(6,4))\nsns.regplot(data['age'], data['charges'])\nplt.show()","6ccab1d1":"plt.figure(figsize=(6,4))\nsns.distplot(df.charges)\nplt.show()","505e86b4":"plt.figure(figsize=(6,4))\nsns.distplot(df.charges, fit=stats.norm)\nplt.show()","65770e05":"print(\"Skewness coeff. is: %f\" % df['charges'].skew())\nprint(\"Kurtosis coeff. is: %f\" % df['charges'].kurt())","dcefb418":"df['charges']=np.log1p(df['charges'])","8e31680e":"plt.figure(figsize=(6,4))\nsns.distplot(df.charges, fit=stats.norm)\nplt.show()","b94d0509":"df.describe().T","3c684636":"plt.style.use('default')\nfig, ax=plt.subplots(2,2, figsize=(15, 8))\ni, j=0, 0\nfor column in df._get_numeric_data().columns:\n    sns.boxplot(df[column], ax=ax[i][j])\n    j+=1\n    if j==2:\n        i+=1\n        j=0","8e7b562a":"df.shape","8260802b":"df=df.query(\"`bmi`<45\")","83dab30f":"df.shape","595fd931":"plt.style.use('default')\nfig, ax=plt.subplots(2,2, figsize=(15, 8))\ni, j=0, 0\nfor column in df._get_numeric_data().columns:\n    sns.boxplot(df[column], ax=ax[i][j])\n    j+=1\n    if j==2:\n        i+=1\n        j=0","04482d34":"df=pd.get_dummies(df, drop_first=True)","89636657":"Y=df.charges\nX=df.drop(['charges'], axis=1)\nprint(Y.shape, X.shape)","7cdbc290":"from sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor","af996178":"X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.25, random_state=42)","2116140e":"results={'model': [], 'r2_score': [], 'Rmse': []}","5b04a7a2":"models=[LinearRegression(), Lasso(), Ridge(), ElasticNet(), KNeighborsRegressor(), \n        DecisionTreeRegressor(), LGBMRegressor(), CatBoostRegressor(silent=True)]","afa1d730":"for model in models:\n    m=model\n    m.fit(X_train, Y_train)\n    Y_test_pred=m.predict(X_test)\n    rmse=np.sqrt(mean_squared_error(Y_test, Y_test_pred))\n    r2=r2_score(Y_test, Y_test_pred)\n    results['model'].append(type(model).__name__)\n    results['r2_score'].append(r2)\n    results['Rmse'].append(rmse)","a517cc01":"results_frame=pd.DataFrame(results)\nresults_frame.sort_values('r2_score', ascending=False)","ee0120fd":"ridge_params={'alpha': [0.1, 0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1], \n                   'solver': ['auto', 'svd', 'cholesky']}\nlasso_params={'alpha': [0.1, 0.01, 0.005, 0.05, 0.001 ,0.2, 0.3, 0.5, 0.8, 0.9, 1]\n                   }\nlgbm_params={'learning_rate': [0.1, 0.2], 'max_depth': list(range(-1, 2, 1)), \n                   'n_estimators': list(range(97, 103))}\ncatboost_params={'depth'         : [6,8,10],\n                  'learning_rate' : [0.01, 0.05, 0.1],\n                  'iterations'    : [30, 50, 100]\n                 }","188e343d":"def tuning(x, y, model, model_params):\n    results=[]\n    X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.25, random_state=42)\n    clf=GridSearchCV(model, model_params, cv=5, return_train_score=True)\n    clf.fit(X_train, Y_train)\n    Y_test_pred=clf.predict(X_test)\n    test_error=np.sqrt(mean_squared_error(Y_test, Y_test_pred))\n    r2score=r2_score(Y_test, Y_test_pred)                                                  \n    print(type(model).__name__)\n    print('Rmse: {}'.format(test_error))\n    print('r2_score: {}'.format(r2score))\n    results.append({'model': type(model).__name__, \n                    'RMSE': test_error,\n                    'R2 Score': r2score,\n                    'best_score': clf.best_score_,\n                    'best_params': clf.best_params_})\n    return results","ed9e0faf":"result1=tuning(X, Y, Ridge(), ridge_params)","c52a39e4":"result2=tuning(X, Y, Lasso(), lasso_params)","0d048e5c":"result3=tuning(X, Y, LGBMRegressor(silent=True), lgbm_params)","a3e21e90":"result4=tuning(X, Y, CatBoostRegressor(silent=True), catboost_params)","234aecac":"res1 = pd.DataFrame(result1)\nres2 = pd.DataFrame(result2)\nres3 = pd.DataFrame(result3)\nres4 = pd.DataFrame(result4)","26ff9f23":"res=pd.concat([res1, res2, res3, res4])","f4417d60":"sorted_results=res.sort_values('R2 Score', ascending=False)\nsorted_results","d61d5268":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\nlg=CatBoostRegressor(**sorted_results.iloc[0, 4], silent=True)\nlg.fit(X_train, Y_train)\nY_test_pred=lg.predict(X_test)\ntest_error=np.sqrt(mean_squared_error(Y_test, Y_test_pred))\nr2score=r2_score(Y_test, Y_test_pred)                                                  \nprint(type(model).__name__)\nprint('r2_score: {}%'.format(np.round(r2score, 3)*100))\nprint('Rmse: {}'.format(test_error))","f6856aa3":"# EDA","fd8aaa66":"# Outlier Analysis","d9e322a1":"# Feature Engineering","66f70a07":"# Model Tuning","dab1a6fa":"# Final Model","60daaabc":"# Encoding","ce7a7ff0":"# Model "}}