{"cell_type":{"7230582c":"code","a3443d90":"code","1d6b4172":"code","fa272cb7":"code","0637fefd":"code","62a4e134":"code","cd201973":"code","7d90b2d9":"code","457bbf5b":"code","dfd49aae":"code","2ecc58df":"code","b77b5e91":"code","27517045":"code","f86d700a":"code","1ff62749":"code","b401af9a":"code","b52048a5":"code","79ec777f":"code","987fb6d9":"code","3dc78ed3":"code","7230e4f3":"code","c78ba443":"code","eb919d24":"code","eb3abe9f":"code","359a695d":"code","0a18baff":"code","5fab59b5":"code","d3d485c8":"code","cabf2a21":"code","58084d63":"code","da7da40c":"code","9948abab":"code","5f5228b4":"code","d00487f2":"code","f7311fa8":"code","3182dd9e":"code","e3571184":"code","932e9289":"code","d524c03a":"code","d07145c3":"markdown","5ba3b8a7":"markdown","5661a891":"markdown","40fd8608":"markdown","e845a16c":"markdown","9fd4378e":"markdown","3ed5b92f":"markdown","5fcbb395":"markdown","cb44a423":"markdown","e32cae9d":"markdown","806dfc2b":"markdown","74a67627":"markdown","84ef327b":"markdown","f1ea2539":"markdown","6b9ac587":"markdown","bd26eb1e":"markdown","479503f4":"markdown"},"source":{"7230582c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom collections import Counter\nfrom IPython.core.display import display, HTML\nsns.set_style('darkgrid')","a3443d90":"dataset = pd.read_csv('..\/input\/ToyotaCorolla.csv')\ndataset.head()","1d6b4172":"dataset.count()","fa272cb7":"dataset.describe()","0637fefd":"dataset.isnull().sum()","62a4e134":"corr = dataset.corr()\n#Plot figsize\nfig, ax = plt.subplots(figsize=(8, 8))\n#Generate Heat Map, allow annotations and place floats in map\nsns.heatmap(corr, cmap='magma', annot=True, fmt=\".2f\")\n#Apply xticks\nplt.xticks(range(len(corr.columns)), corr.columns);\n#Apply yticks\nplt.yticks(range(len(corr.columns)), corr.columns)\n#show plot\nplt.show()","cd201973":"f, axes = plt.subplots(2, 2, figsize=(12,8))\n\nsns.regplot(x = 'Price', y = 'Age', data = dataset, scatter_kws={'alpha':0.6}, ax = axes[0,0])\naxes[0,0].set_xlabel('Price', fontsize=14)\naxes[0,0].set_ylabel('Age', fontsize=14)\naxes[0,0].yaxis.tick_left()\n\nsns.regplot(x = 'Price', y = 'KM', data = dataset, scatter_kws={'alpha':0.6}, ax = axes[0,1])\naxes[0,1].set_xlabel('Price', fontsize=14)\naxes[0,1].set_ylabel('KM', fontsize=14)\naxes[0,1].yaxis.set_label_position(\"right\")\naxes[0,1].yaxis.tick_right()\n\nsns.regplot(x = 'Price', y = 'Weight', data = dataset, scatter_kws={'alpha':0.6}, ax = axes[1,0])\naxes[1,0].set_xlabel('Price', fontsize=14)\naxes[1,0].set_ylabel('Weight', fontsize=14)\n\nsns.regplot(x = 'Price', y = 'HP', data = dataset, scatter_kws={'alpha':0.6}, ax = axes[1,1])\naxes[1,1].set_xlabel('Price', fontsize=14)\naxes[1,1].set_ylabel('HP', fontsize=14)\naxes[1,1].yaxis.set_label_position(\"right\")\naxes[1,1].yaxis.tick_right()\naxes[1,1].set(ylim=(40,160))\n\nplt.show()","7d90b2d9":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['KM'], ax = axes[0])\naxes[0].set_xlabel('KM', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.scatterplot(x = 'Price', y = 'KM', data = dataset, ax = axes[1])\naxes[1].set_xlabel('Price', fontsize=14)\naxes[1].set_ylabel('KM', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","457bbf5b":"fuel_list= Counter(dataset['FuelType'])\nlabels = fuel_list.keys()\nsizes = fuel_list.values()\n\nf, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.countplot(dataset['FuelType'], ax = axes[0], palette=\"Set1\")\naxes[0].set_xlabel('Fuel Type', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.violinplot(x = 'FuelType', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('Fuel Type', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","dfd49aae":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['HP'], ax = axes[0])\naxes[0].set_xlabel('HP', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.scatterplot(x = 'HP', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('HP', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","2ecc58df":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['MetColor'], ax = axes[0])\naxes[0].set_xlabel('MetColor', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.boxplot(x = 'MetColor', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('MetColor', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","b77b5e91":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['Automatic'], ax = axes[0])\naxes[0].set_xlabel('Automatic', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.boxenplot(x = 'Automatic', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('Automatic', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","27517045":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['CC'], ax = axes[0])\naxes[0].set_xlabel('CC', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.boxplot(x = 'CC', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('CC', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","f86d700a":"f, axes = plt.subplots(1,2,figsize=(14,4))\n\nsns.distplot(dataset['Doors'], ax = axes[0])\naxes[0].set_xlabel('Doors', fontsize=14)\naxes[0].set_ylabel('Count', fontsize=14)\naxes[0].yaxis.tick_left()\n\nsns.boxenplot(x = 'Doors', y = 'Price', data = dataset, ax = axes[1])\naxes[1].set_xlabel('Doors', fontsize=14)\naxes[1].set_ylabel('Price', fontsize=14)\naxes[1].yaxis.set_label_position(\"right\")\naxes[1].yaxis.tick_right()\n\nplt.show()","1ff62749":"dataset = pd.get_dummies(dataset)","b401af9a":"dataset.head()","b52048a5":"X = dataset.drop('Price', axis = 1).values\ny = dataset.iloc[:, 0].values.reshape(-1,1)","79ec777f":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)","987fb6d9":"print(\"Shape of X_train: \",X_train.shape)\nprint(\"Shape of X_test: \", X_test.shape)\nprint(\"Shape of y_train: \",y_train.shape)\nprint(\"Shape of y_test\",y_test.shape)","3dc78ed3":"from sklearn.linear_model import LinearRegression\nregressor_linear = LinearRegression()\nregressor_linear.fit(X_train, y_train)","7230e4f3":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score the Test set results\ncv_linear = cross_val_score(estimator = regressor_linear, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_linear_train = regressor_linear.predict(X_train)\nr2_score_linear_train = r2_score(y_train, y_pred_linear_train)\n\n# Predicting R2 Score the Test set results\ny_pred_linear_test = regressor_linear.predict(X_test)\nr2_score_linear_test = r2_score(y_test, y_pred_linear_test)\n\n# Predicting RMSE the Test set results\nrmse_linear = (np.sqrt(mean_squared_error(y_test, y_pred_linear_test)))\nprint(\"CV: \", cv_linear.mean())\nprint('R2_score (train): ', r2_score_linear_train)\nprint('R2_score (test): ', r2_score_linear_test)\nprint(\"RMSE: \", rmse_linear)","c78ba443":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X_train)\npoly_reg.fit(X_poly, y_train)\nregressor_poly2 = LinearRegression()\nregressor_poly2.fit(X_poly, y_train)","eb919d24":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score the Test set results\ncv_poly2 = cross_val_score(estimator = regressor_poly2, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_poly2_train = regressor_poly2.predict(poly_reg.fit_transform(X_train))\nr2_score_poly2_train = r2_score(y_train, y_pred_poly2_train)\n\n# Predicting R2 Score the Test set results\ny_pred_poly2_test = regressor_poly2.predict(poly_reg.fit_transform(X_test))\nr2_score_poly2_test = r2_score(y_test, y_pred_poly2_test)\n\n# Predicting RMSE the Test set results\nrmse_poly2 = (np.sqrt(mean_squared_error(y_test, y_pred_poly2_test)))\nprint('CV: ', cv_poly2.mean())\nprint('R2_score (train): ', r2_score_poly2_train)\nprint('R2_score (test): ', r2_score_poly2_test)\nprint(\"RMSE: \", rmse_poly2)","eb3abe9f":"from sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\nsteps = [\n    ('scalar', StandardScaler()),\n    ('poly', PolynomialFeatures(degree=3)),\n    ('model', Ridge(alpha=1777, fit_intercept=True))\n]\n\nridge_pipe = Pipeline(steps)\nridge_pipe.fit(X_train, y_train)","359a695d":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score the Test set results\ncv_ridge = cross_val_score(estimator = ridge_pipe, X = X_train, y = y_train.ravel(), cv = 10)\n\n# Predicting R2 Score the Test set results\ny_pred_ridge_train = ridge_pipe.predict(X_train)\nr2_score_ridge_train = r2_score(y_train, y_pred_ridge_train)\n\n# Predicting R2 Score the Test set results\ny_pred_ridge_test = ridge_pipe.predict(X_test)\nr2_score_ridge_test = r2_score(y_test, y_pred_ridge_test)\n\n# Predicting RMSE the Test set results\nrmse_ridge = (np.sqrt(mean_squared_error(y_test, y_pred_ridge_test)))\nprint('CV: ', cv_ridge.mean())\nprint('R2_score (train): ', r2_score_ridge_train)\nprint('R2_score (test): ', r2_score_ridge_test)\nprint(\"RMSE: \", rmse_ridge)","0a18baff":"from sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\n\nsteps = [\n    ('scalar', StandardScaler()),\n    ('poly', PolynomialFeatures(degree=3)),\n    ('model', Lasso(alpha=2.36, fit_intercept=True, tol = 0.0199, max_iter=2000))\n]\n\nlasso_pipe = Pipeline(steps)\nlasso_pipe.fit(X_train, y_train)","5fab59b5":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_lasso = cross_val_score(estimator = lasso_pipe, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Test set results\ny_pred_lasso_train = lasso_pipe.predict(X_train)\nr2_score_lasso_train = r2_score(y_train, y_pred_lasso_train)\n\n# Predicting R2 Score the Test set results\ny_pred_lasso_test = lasso_pipe.predict(X_test)\nr2_score_lasso_test = r2_score(y_test, y_pred_lasso_test)\n\n# Predicting RMSE the Test set results\nrmse_lasso = (np.sqrt(mean_squared_error(y_test, y_pred_lasso_test)))\nprint('CV: ', cv_lasso.mean())\nprint('R2_score (train): ', r2_score_lasso_train)\nprint('R2_score (test): ', r2_score_lasso_test)\nprint(\"RMSE: \", rmse_lasso)","d3d485c8":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nX_scaled = sc_X.fit_transform(X_train)\ny_scaled = sc_y.fit_transform(y_train.reshape(-1,1))","cabf2a21":"# Fitting the SVR Model to the dataset\nfrom sklearn.svm import SVR\nregressor_svr = SVR(kernel = 'rbf', gamma = 'scale')\nregressor_svr.fit(X_scaled, y_scaled.ravel())","58084d63":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_svr = cross_val_score(estimator = regressor_svr, X = X_scaled, y = y_scaled.ravel(), cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_svr_train = sc_y.inverse_transform(regressor_svr.predict(sc_X.transform(X_train)))\nr2_score_svr_train = r2_score(y_train, y_pred_svr_train)\n\n# Predicting R2 Score the Test set results\ny_pred_svr_test = sc_y.inverse_transform(regressor_svr.predict(sc_X.transform(X_test)))\nr2_score_svr_test = r2_score(y_test, y_pred_svr_test)\n\n# Predicting RMSE the Test set results\nrmse_svr = (np.sqrt(mean_squared_error(y_test, y_pred_svr_test)))\nprint('CV: ', cv_svr.mean())\nprint('R2_score (train): ', r2_score_svr_train)\nprint('R2_score (test): ', r2_score_svr_test)\nprint(\"RMSE: \", rmse_svr)","da7da40c":"# Fitting the Decision Tree Regression Model to the dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor_dt = DecisionTreeRegressor(random_state = 0)\nregressor_dt.fit(X_train, y_train)","9948abab":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_dt = cross_val_score(estimator = regressor_dt, X = X_train, y = y_train, cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_dt_train = regressor_dt.predict(X_train)\nr2_score_dt_train = r2_score(y_train, y_pred_dt_train)\n\n# Predicting R2 Score the Test set results\ny_pred_dt_test = regressor_dt.predict(X_test)\nr2_score_dt_test = r2_score(y_test, y_pred_dt_test)\n\n# Predicting RMSE the Test set results\nrmse_dt = (np.sqrt(mean_squared_error(y_test, y_pred_dt_test)))\nprint('CV: ', cv_dt.mean())\nprint('R2_score (train): ', r2_score_dt_train)\nprint('R2_score (test): ', r2_score_dt_test)\nprint(\"RMSE: \", rmse_dt)","5f5228b4":"# Fitting the Random Forest Regression to the dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators = 1200, random_state = 0)\nregressor_rf.fit(X_train, y_train.ravel())","d00487f2":"from sklearn.metrics import r2_score\n\n# Predicting Cross Validation Score\ncv_rf = cross_val_score(estimator = regressor_rf, X = X_scaled, y = y_train.ravel(), cv = 10)\n\n# Predicting R2 Score the Train set results\ny_pred_rf_train = regressor_rf.predict(X_train)\nr2_score_rf_train = r2_score(y_train, y_pred_rf_train)\n\n# Predicting R2 Score the Test set results\ny_pred_rf_test = regressor_rf.predict(X_test)\nr2_score_rf_test = r2_score(y_test, y_pred_rf_test)\n\n# Predicting RMSE the Test set results\nrmse_rf = (np.sqrt(mean_squared_error(y_test, y_pred_rf_test)))\nprint('CV: ', cv_rf.mean())\nprint('R2_score (train): ', r2_score_rf_train)\nprint('R2_score (test): ', r2_score_rf_test)\nprint(\"RMSE: \", rmse_rf)","f7311fa8":"models = [('Linear Regression', rmse_linear, r2_score_linear_train, r2_score_linear_test, cv_linear.mean()),\n          ('Polynomial Regression (2nd)', rmse_poly2, r2_score_poly2_train, r2_score_poly2_test, cv_poly2.mean()),\n          ('Ridge Regression', rmse_ridge, r2_score_ridge_train, r2_score_ridge_test, cv_ridge.mean()),\n          ('Lasso Regression', rmse_lasso, r2_score_lasso_train, r2_score_lasso_test, cv_lasso.mean()),\n          ('Support Vector Regression', rmse_svr, r2_score_svr_train, r2_score_svr_test, cv_svr.mean()),\n          ('Decision Tree Regression', rmse_dt, r2_score_dt_train, r2_score_dt_test, cv_dt.mean()),\n          ('Random Forest Regression', rmse_rf, r2_score_rf_train, r2_score_rf_test, cv_rf.mean())   \n         ]","3182dd9e":"predict = pd.DataFrame(data = models, columns=['Model', 'RMSE', 'R2_Score(training)', 'R2_Score(test)', 'Cross-Validation'])\npredict","e3571184":"f, axe = plt.subplots(1,1, figsize=(18,6))\n\npredict.sort_values(by=['Cross-Validation'], ascending=False, inplace=True)\n\nsns.barplot(x='Cross-Validation', y='Model', data = predict, ax = axe)\n#axes[0].set(xlabel='Region', ylabel='Charges')\naxe.set_xlabel('Cross-Validaton Score', size=16)\naxe.set_ylabel('Model')\naxe.set_xlim(0,1.0)\naxe.set_xticks(np.arange(0, 1.1, 0.1))\nplt.show()","932e9289":"f, axes = plt.subplots(2,1, figsize=(14,10))\n\npredict.sort_values(by=['R2_Score(training)'], ascending=False, inplace=True)\n\nsns.barplot(x='R2_Score(training)', y='Model', data = predict, palette='Blues_d', ax = axes[0])\n#axes[0].set(xlabel='Region', ylabel='Charges')\naxes[0].set_xlabel('R2 Score (Training)', size=16)\naxes[0].set_ylabel('Model')\naxes[0].set_xlim(0,1.0)\naxes[0].set_xticks(np.arange(0, 1.1, 0.1))\n\npredict.sort_values(by=['R2_Score(test)'], ascending=False, inplace=True)\n\nsns.barplot(x='R2_Score(test)', y='Model', data = predict, palette='Reds_d', ax = axes[1])\n#axes[0].set(xlabel='Region', ylabel='Charges')\naxes[1].set_xlabel('R2 Score (Test)', size=16)\naxes[1].set_ylabel('Model')\naxes[1].set_xlim(0,1.0)\naxes[1].set_xticks(np.arange(0, 1.1, 0.1))\n\nplt.show()","d524c03a":"predict.sort_values(by=['RMSE'], ascending=False, inplace=True)\n\nf, axe = plt.subplots(1,1, figsize=(18,6))\nsns.barplot(x='Model', y='RMSE', data=predict, ax = axe)\naxe.set_xlabel('Model', size=16)\naxe.set_ylabel('RMSE', size=16)\n\nplt.show()","d07145c3":"## <span id=\"12\"><\/span> ** 5. Measuring the Error **","5ba3b8a7":"### <span id=\"11\"><\/span> ** Random Forest Regression **","5661a891":"### <span id=\"7\"><\/span> ** Ridge Regression **","40fd8608":"In this kernel, I have built 7 regression models using Toyota Corolla Dataset. These are linear, polynomial, ridge, lasso,  svr, decision tree and random forest regression. Then measured and visualized the performance of the models. Please make a comment and let me know how to improve model performance, visualization or something in this kernel. This will also help me on my future analysis.\n\n<b><font color=\"red\">Don't forget to <\/font><\/b> <b><font color=\"green\">UPVOTE <\/font><\/b> if you liked this kernel, thank you.","e845a16c":"### <span id=\"6\"><\/span> ** Polynomial Regression - 2nd degree **","9fd4378e":"### <span id=\"9\"><\/span> ** Support Vector Regression **","3ed5b92f":"## <span id=\"4\"><\/span> ** 4. Regression Models **","5fcbb395":"### <span id=\"13\"><\/span> ** Visualizing Models Performance **","cb44a423":"## <span id=\"14\"><\/span> ** 6. Conclusion **","e32cae9d":"<hr\/>\n[**Nadeem**](https:\/\/www.kaggle.com\/nadeem07)\n<hr\/>\n<font color=green>\n1. [Overview](#1)\n1. [Importing Libraries and Reading the Dataset](#2)\n1. [Data Preprocessing and Visualization](#3) \n1. [Regression Models](#4) \n    * [Linear Regression](#5) \n    * [Polynomial Regression - 2nd degree](#6)\n    * [Ridge Regression](#7)\n    * [Lasso Regression](#8)\n    * [Support Vector Regression](#9)\n    * [Decision Tree Regression](#10) \n    * [Random Forest Regression](#11)\n1. [Measuring the Error](#12)\n    * [Visualizing Models Performance](#13)\n1. [Conclusion](#14)\n<hr\/>","806dfc2b":"## <span id=\"2\"><\/span> ** 2. Importing Libraries and Reading the Dataset **","74a67627":"### <span id=\"10\"><\/span> ** Decision Tree Regression **","84ef327b":"## <span id=\"1\"><\/span> ** 1. Overview **","f1ea2539":"### <span id=\"8\"><\/span> ** Lasso Regression **","6b9ac587":"## <span id=\"3\"><\/span> ** 3. Data Preprocessing and Visualization **","bd26eb1e":"Columns:\n- <b> Age: <\/b> Age in years\n- <b> KM: <\/b> Accumulated Kilometers on odometer\n- <b> FuelType: <\/b> Fuel Type (Petrol, Diesel, CNG)\n- <b> HP: <\/b> Horse Power\n- <b> MetColor: <\/b> Metallic Color? (Yes=1, No=0)\n- <b> Automatic: <\/b> Automatic ( (Yes=1, No=0)\n- <b> CC: <\/b> Cylinder Volume in cubic centimeters\n- <b> Doors: <\/b> Number of doors\n- <b> Weight: <\/b> Weight in Kilograms\n- <b> Price: <\/b> Offer Price in EUROs","479503f4":"### <span id=\"5\"><\/span> ** Linear Regression **"}}