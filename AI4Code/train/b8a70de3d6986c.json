{"cell_type":{"33fa9c97":"code","374832b8":"code","61f2138a":"code","23ab1652":"code","37492b2e":"code","fbf4365c":"code","01cf2c62":"code","5e698ec0":"code","75162df6":"code","628fdafb":"code","5cde7871":"code","8bfef37c":"code","004448b5":"code","bef84fa9":"code","21a79bde":"code","5db74d8c":"code","0e8be9f1":"code","b8450510":"code","b8d65ee9":"code","85eea14e":"code","53cde9c1":"code","5cbf1ff7":"code","87164a76":"code","1fadb022":"markdown"},"source":{"33fa9c97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","374832b8":"# install the feyn module\n!pip install feyn","61f2138a":"import feyn\nimport sklearn.model_selection\nimport seaborn as sbn","23ab1652":"# loading the dataset\ndf_polution = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ndf_polution","37492b2e":"# dropping the date_time column\ndf_polution = df_polution = df_polution.drop([\"date_time\"], axis=1)","fbf4365c":"# checking for NaN values\ndf_polution.isna().sum()","01cf2c62":"# checking for categorical types in data - if there are categorical types in your dataset, \n# you don't have to encode them, but you'll need to pass information about them to your QLattice. \n# see this page for more help: https:\/\/docs.abzu.ai\/docs\/guides\/essentials\/stypes.html\ndf_polution.dtypes","5e698ec0":"# just a quick look to get an impression of data\nsbn.pairplot(df_polution)","75162df6":"# preparing a dataset for predicting each variable\ndf_target_carbon_monoxide = df_polution\ndf_target_carbon_monoxide = df_target_carbon_monoxide.drop([\"target_benzene\", \n                                                            \"target_nitrogen_oxides\"], \n                                                           axis=1)\n\ndf_target_benzene = df_polution\ndf_target_benzene = df_target_benzene.drop([\"target_carbon_monoxide\", \n                                            \"target_nitrogen_oxides\"], \n                                           axis=1)\n\ndf_target_nitrogen_oxides = df_polution\ndf_target_nitrogen_oxides = df_target_nitrogen_oxides.drop([\"target_carbon_monoxide\", \n                                                            \"target_benzene\"], \n                                                           axis=1)","628fdafb":"# splitting the datasets\ndf_train_target_carbon_monoxide, df_test_target_carbon_monoxide = sklearn.model_selection.train_test_split(df_target_carbon_monoxide, \n                                                                                                           train_size=.80, \n                                                                                                           random_state=1)\ndf_train_target_benzene, df_test_target_benzene = sklearn.model_selection.train_test_split(df_target_benzene, \n                                                                                           train_size=.80, \n                                                                                           random_state=1)\ndf_train_target_nitrogen_oxides, df_test_target_nitrogen_oxides = sklearn.model_selection.train_test_split(df_target_nitrogen_oxides, \n                                                                                                           train_size=.80, \n                                                                                                           random_state=1)\n\n","5cde7871":"# connect to a qlattice\nql = feyn.connect_qlattice()","8bfef37c":"# training model for predicting carbon_monoxide\nmodels = ql.auto_run(df_train_target_carbon_monoxide,\n                     output_name=\"target_carbon_monoxide\",\n                     max_complexity=5)","004448b5":"# plotting the best model the qlattice found\nbest_model = models[0]\nbest_model.plot(df_train_target_carbon_monoxide, df_test_target_carbon_monoxide)","bef84fa9":"# loading test data\ndf_polution_test = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")","21a79bde":"# preparring for building submission df\npred_target_carbon_monoxide = best_model.predict(df_polution_test)","5db74d8c":"# training model for predicting benzene\nql.reset()\nmodels = ql.auto_run(df_train_target_benzene, \n                     output_name=\"target_benzene\",\n                     max_complexity=5)","0e8be9f1":"# plotting the best model the qlattice found\nbest_model = models[0]\nbest_model.plot(df_train_target_benzene, df_test_target_benzene)","b8450510":"# preparring for building submission df\npred_target_benzene = best_model.predict(df_polution_test)","b8d65ee9":"# training model for predicting nitrogen_oxides\nql.reset()\nmodels = ql.auto_run(df_train_target_nitrogen_oxides, \n                     output_name=\"target_nitrogen_oxides\",\n                     max_complexity=5)","85eea14e":"# plotting the best model the qlattice found\nbest_model = models[0]\nbest_model.plot(df_train_target_nitrogen_oxides, df_test_target_nitrogen_oxides)","53cde9c1":"# preparring for building submission df\npred_target_nitrogen_oxides = best_model.predict(df_polution_test)","5cbf1ff7":"# building submission csv\ndf_my_submission = pd.DataFrame(columns=[\"date_time\", \"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"])\ndf_my_submission = df_my_submission.astype({\"date_time\": object, \"target_carbon_monoxide\": float, \"target_benzene\": float, \"target_nitrogen_oxides\": float})\n\nfor i in range(len(df_polution_test)):\n    new_row = {\"date_time\":df_polution_test[\"date_time\"].values[i], \n               \"target_carbon_monoxide\": pred_target_carbon_monoxide[i],\n               \"target_benzene\": pred_target_benzene[i],\n               \"target_nitrogen_oxides\": pred_target_nitrogen_oxides[i]}    \n    df_my_submission = df_my_submission.append(new_row, ignore_index=True)  \n\ndf_my_submission.to_csv('submission.csv', index=False)","87164a76":"df_my_submission","1fadb022":"# The QLattice \n\nIn this notebook I'll show how the QLattice can be used to predict air polution with almost no knowledge about ML and data science - actually your grandmother could probably easily learn how to operate the QLattice :-)\n\nThe QLattice can also be used for much more advanced analysis, but you have to find examples of that in other notebooks - with this one, I want to show how easy it can be, to tell something meaningful from a dataset.  \n\nThe QLattice is a supervised machine learning tool for symbolic regression developed by Abzu. It is inspired by Richard Feynman's path integral formulation. That's why the python module to use it is called Feyn, and the Q in QLattice is for Quantum.\n\nAbzu provides free QLattices for non-commercial use to anyone. These free community QLattices gets allocated for you automatically if you use Feyn without an active subscription, as we will do in this notebook. Read more about how it works here: https:\/\/docs.abzu.ai\/docs\/guides\/getting_started\/community.html"}}