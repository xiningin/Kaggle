{"cell_type":{"daed3813":"code","76c43edd":"code","d032a22a":"code","abe6834b":"code","af89daa7":"code","144bcf4b":"code","dab77daf":"code","5403c15c":"code","821610f4":"code","9da226f2":"code","b0ba1067":"code","c741d1ca":"code","897bc3e0":"code","d3e735f0":"code","97ba65c2":"code","9b13c6aa":"code","518fcd5a":"code","140478a5":"code","b90b082c":"code","5730b6a2":"code","7db6cb45":"code","e605699d":"code","dc56d2e0":"code","4b1defe7":"code","ec77bb73":"code","45f40f55":"code","7ccf5052":"code","daa22332":"code","3d3324c4":"code","96670232":"code","1456ecb0":"code","ffed94eb":"code","1db11ebc":"code","9b05d517":"code","a7a522d2":"code","0e8cef0a":"code","c6c169b5":"code","69d568f8":"code","d139bd0f":"code","c4bc44bb":"code","2aefd598":"code","e78c5118":"code","8010aa05":"code","45ed01fa":"code","ea5779d8":"code","95695a72":"code","576267b9":"code","4c55feb1":"code","e512fb0f":"code","fb404c78":"code","75ff2419":"code","97017152":"markdown","55367036":"markdown","44a1df95":"markdown","884b6d99":"markdown","899d1477":"markdown","0cead387":"markdown","78728950":"markdown","cbcaf6d7":"markdown","cb63068e":"markdown","3151e18a":"markdown","fcf0bd1d":"markdown","77f7c1ab":"markdown","8007203f":"markdown","81040d2b":"markdown","5b96310a":"markdown","2fd112b9":"markdown","0a655732":"markdown","6c8e5843":"markdown","899b63b8":"markdown","214c8935":"markdown","41f45f55":"markdown","1870c2c5":"markdown","f63d0ab1":"markdown","7c1fbf66":"markdown","d23e662b":"markdown","b395b712":"markdown","3f4b9ff1":"markdown","3f79685f":"markdown","2e09fddc":"markdown","c22d28bb":"markdown","eff7e121":"markdown","0acacac7":"markdown","fb0223d6":"markdown","068a9246":"markdown","e443a98b":"markdown","a2a41865":"markdown","c3606a5b":"markdown"},"source":{"daed3813":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport gc, os, sys, re, time\nimport matplotlib.pyplot as plt\nimport cv2\nfrom IPython.display import Image, display\nfrom tqdm import tqdm_notebook as tqdm","76c43edd":"DTYPE = {\n    'TransactionID': 'int32',\n    'isFraud': 'int8',\n    'TransactionDT': 'int32',\n    'TransactionAmt': 'float32',\n    'ProductCD': 'category',\n    'card1': 'int16',\n    'card2': 'float32',\n    'card3': 'float32',\n    'card4': 'category',\n    'card5': 'float32',\n    'card6': 'category',\n    'addr1': 'float32',\n    'addr2': 'float32',\n    'dist1': 'float32',\n    'dist2': 'float32',\n    'P_emaildomain': 'category',\n    'R_emaildomain': 'category',\n    'C1': 'float32',\n    'C2': 'float32',\n    'C3': 'float32',\n    'C4': 'float32',\n    'C5': 'float32',\n    'C6': 'float32',\n    'C7': 'float32',\n    'C8': 'float32',\n    'C9': 'float32',\n    'C10': 'float32',\n    'C11': 'float32',\n    'C12': 'float32',\n    'C13': 'float32',\n    'C14': 'float32',\n    'D1': 'float32',\n    'D2': 'float32',\n    'D3': 'float32',\n    'D4': 'float32',\n    'D5': 'float32',\n    'D6': 'float32',\n    'D7': 'float32',\n    'D8': 'float32',\n    'D9': 'float32',\n    'D10': 'float32',\n    'D11': 'float32',\n    'D12': 'float32',\n    'D13': 'float32',\n    'D14': 'float32',\n    'D15': 'float32',\n    'M1': 'category',\n    'M2': 'category',\n    'M3': 'category',\n    'M4': 'category',\n    'M5': 'category',\n    'M6': 'category',\n    'M7': 'category',\n    'M8': 'category',\n    'M9': 'category',\n}\n\nIN_DIR = '..\/input'\nTARGET = 'isFraud'\nBASE_COLS = list(DTYPE.keys())\nPLOTS_TRAIN_BASE = 'train'\nPLOTS_TRAIN_V = 'train_v'\nPLOTS_TEST = 'test'\nV_COLS = [ f'V{i}' for i in range(1, 340) ]\nV_DTYPE = {v:'float32' for v in V_COLS}\nDTYPE.update(V_DTYPE)\nTRAIN_USE = list(DTYPE.keys())\nTEST_USE = [c for c in TRAIN_USE if c != TARGET]","d032a22a":"train = pd.read_csv(f'{IN_DIR}\/train_transaction.csv', usecols=TRAIN_USE, dtype=DTYPE)\ntrain.shape","abe6834b":"train.TransactionDT.max() ","af89daa7":"train.TransactionDT.max() \/ 86400","144bcf4b":"86400 \/ 480","dab77daf":"WIDTH = 480\nHEIGHT = 183\nIMG_SIZE = WIDTH * HEIGHT\nSECONDS_PER_PIXEL = 180\nDAY_MARKER = 10","5403c15c":"def make_plot(source_df, querystr, verbose=False):\n    df = source_df.query(querystr, engine='python')\n    if verbose:\n        print(querystr, df.shape[0], 'transactions')\n    ts = (df.TransactionDT \/\/ SECONDS_PER_PIXEL).values\n    c = np.zeros(IMG_SIZE, dtype=int)\n    np.add.at(c, ts, 1)\n    return c.reshape((HEIGHT, WIDTH))\n\ndef normalize(c):\n    return ((c\/c.max()) * 255)\n\ndef make_and_save(source_df, png_file, querystr):\n    p = make_plot(source_df, querystr)\n    # NOTE: log1p() of counts to stretch the contrast\n    cv2.imwrite(png_file, normalize(np.log1p(p)))","821610f4":"make_and_save(train, 'all_transactions.png', 'TransactionID>0')","9da226f2":"display(Image('all_transactions.png'))","b0ba1067":"def save_all(df, cols, base_dir):\n    os.makedirs(base_dir, exist_ok=True)\n    for col in tqdm(cols):\n        vc = df[col].value_counts(dropna=False)\n        for value, count in vc.items():\n            if count < 5000:\n                continue\n            #print(col, value, count)\n            tag = f'{col}_{value}_{count}'\n            png = f'{base_dir}\/{tag}.png'\n            if type(value) is float and np.isnan(value):\n                make_and_save(df, png, f'{col}.isnull()')\n            else:\n                make_and_save(df, png, f'{col}==\"{value}\"')","c741d1ca":"save_all(train, BASE_COLS, PLOTS_TRAIN_BASE)","897bc3e0":"!ls -1 $PLOTS_TRAIN_BASE | wc -l","d3e735f0":"save_all(train, V_COLS, PLOTS_TRAIN_V)","97ba65c2":"!ls -1 $PLOTS_TRAIN_V | wc -l","9b13c6aa":"xlabels = [f'{h}am' for h in range(12)] + \\\n          [f'{h}pm' for h in range(12)]\nxlabels[12] = '12pm'","518fcd5a":"ylabels = [f'day{i}' for i in range(0, HEIGHT, DAY_MARKER)]","140478a5":"plt.rcParams[\"figure.figsize\"] = (15, 5)\nplt.rcParams[\"image.cmap\"] = 'afmhot'","b90b082c":"def show_plot(source_df, querystr):\n    fig, ax = plt.subplots(figsize=(18, 6))\n    p = make_plot(source_df, querystr, verbose=True)\n    c = ax.pcolormesh(p)\n    ax.invert_yaxis()\n    ax.set_xticks(np.arange(0, WIDTH, 20), False)\n    ax.set_xticklabels(xlabels)\n    ax.set_yticks(range(0, HEIGHT, DAY_MARKER))\n    ax.set_yticklabels(ylabels)\n    ax.set_title(querystr)\n    cbar = fig.colorbar(c, ax=ax)\n    return plt.tight_layout()","5730b6a2":"show_plot(train, 'TransactionID>0')","7db6cb45":"show_plot(train, 'isFraud==1')","e605699d":"show_plot(train, 'D4.isnull()')","dc56d2e0":"show_plot(train, 'D15.isnull()')","4b1defe7":"show_plot(train, 'card1==7919')","ec77bb73":"show_plot(train, 'card2==194')","45f40f55":"show_plot(train, 'card2.isnull()')","7ccf5052":"show_plot(train, 'card5==202')","daa22332":"show_plot(train, 'card5==126')","3d3324c4":"show_plot(train, 'R_emaildomain==\"gmail.com\"')","96670232":"show_plot(train, 'D6==0')","1456ecb0":"show_plot(train, 'D9==0.75')","ffed94eb":"show_plot(train, 'ProductCD==\"S\"')","1db11ebc":"show_plot(train, '(P_emaildomain.isnull()) and (TransactionAmt<=30)')","9b05d517":"test = pd.read_csv(f'{IN_DIR}\/test_transaction.csv', usecols=TEST_USE, dtype=DTYPE)\ntest.shape","a7a522d2":"test.TransactionDT.min()","0e8cef0a":"test.TransactionDT.max()","c6c169b5":"test.TransactionDT.min() \/ 86400","69d568f8":"test.TransactionDT.max() \/ 86400","d139bd0f":"test['TransactionDT'] -= 213 * 86400","c4bc44bb":"test.TransactionDT.max() \/ 86400","2aefd598":"save_all(test, test.columns, PLOTS_TEST)","e78c5118":"!ls -1 $PLOTS_TEST | wc -l","8010aa05":"show_plot(test, 'TransactionID>0')","45ed01fa":"show_plot(test, 'D9==0.75')","ea5779d8":"show_plot(test, 'D15.isnull()')","95695a72":"show_plot(test, 'card1==7919')","576267b9":"show_plot(test, 'ProductCD==\"S\"')","4c55feb1":"show_plot(test, 'ProductCD==\"R\"')","e512fb0f":"show_plot(test, 'ProductCD==\"H\"')","fb404c78":"!7z a -bd -mmt4 -sdel $PLOTS_TRAIN_V.7z $PLOTS_TRAIN_V >>compress_7z.log","75ff2419":"!7z a -bd -mmt4 -sdel $PLOTS_TEST.7z $PLOTS_TEST >>compress_7z.log","97017152":"Now some covariate shifts...","55367036":"# IEEE-CIS Fraud Detection Time Series Heatmaps\n\nThis notebook shows counts of transactions over time in a 2D heatmap, as a simple exploration of the time series structure of the train\/test sets.\n\nOne row of pixels in each image is 1 day, with about 183 rows in each image, derived from the training set, and later on, the test set.","44a1df95":"More complicated expressions are possible, you could extract a decision tree path and plug it in as query string, a simple (uninsightful?) example (depth 2) is:","884b6d99":"# Clean Up\n\nCompress some of the generated pngs - Kaggle does not allow more than 500 output files.","899d1477":"# Matplotlib Display\n\nShow some plots selected for interesting features...","0cead387":"seems to be correlated with card2 value 194","78728950":"Fraud does not seem to dip so much overnight... (Note: max value is 8 - no three-minute block has more than 8 fraudulent transactions.)","cbcaf6d7":"card1 value 7919 seems periodic, at about 30 days, with some double peaks too...","cb63068e":"Test starts at day 213:","3151e18a":"A bit hard to see, but gmail.com as R_emaildomain has a drop (dark band) around day 100.","fcf0bd1d":"Value \"S\" for ProductCD only appears late - the natural choice for a validation era:","77f7c1ab":"Take a preview look at what we made...","8007203f":"However - value \"R\" appears quite late in the *test* set - in the private LB zone. This is similar to how \"S\" appeared only late in the *train* set.","81040d2b":"Overall shape looks similar, perhaps night time drifts later towards the end?","5b96310a":"D15 continues it's erratic behaviour - and is different between public\/private periods - though it is only null for 12069 rows (of ~500k), so perhaps it's ok to ignore this. Or just fillna(0) or fillna(1).","2fd112b9":"## Notes\n\nMuch more is possible here, for example, count all transactions, then count subsets like\n - `ProductCD==X`\n \nand\n - `ProductCD==X and isFraud==1` \n \nthen apply Bayes rule to get **p(isFraud | ProductCD==X)** and color cells in accordingly, e.g. p(isFraud) as the red channel in RGB.\n\nAlso `np.add.at(c, ts, 1)` can be changed to `np.add.at(c, ts, df.isFraud)` to accumulate values instead of simply count transctions.\n\n____\n\n*to be continued...*  **(HOWEVER: feel free to fork this notebook and try it out yourself :)**","0a655732":"card2 is not missing at random, but missing in streaks:","6c8e5843":"# Test Set","899b63b8":"card5 stops being equal to 202 at about day 80","214c8935":"Above we saw that value \"S\" for ProductCD only appears late in the train set - but here in the test set it is more uniform, though around the same number of transactions.","41f45f55":"Similarly, \"H\" for ProductCD ramps up in the test set.","1870c2c5":"A bit easier to see here in D6...","f63d0ab1":"## Test Set Plots\n\nThe leaderboard page says **This leaderboard is calculated with approximately 20% of the test data**. [This great discussion topic][1] says the public\/private split is by time. So, the public LB will be day 0 - day 37, all after is the private LB...\n\n [1]: https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101040\n","7c1fbf66":"Now the V columns too:","d23e662b":"The \"D\" columns refer to time, as stated by organizers. D9 being 0.75 means 6pm-7pm for example:","b395b712":"To make test look like train, subtract 213 days, then reuse the above code. Note `day0 .. day183` in the plots now refers to test set days.","3f4b9ff1":"`TransactionID>0` is a simple way to say 'all the training set' - it is true for all rows.","3f79685f":"183 days, put them on one row each in a heatmap, with 480 columns","2e09fddc":"TransactionDT is in seconds, with 15811131 maximum.","c22d28bb":"So each pixel will represent 180 seconds of a day. All transactions in each 3 minute block will be counted.","eff7e121":"but value 126 starts appearing more about that time... perhaps they have a similar meaning?","0acacac7":"Generate test set plots for offline use.","fb0223d6":"card1 value 7919 seems familiar, similar to train...","068a9246":"Date columns appear to mean the same thing, no daylight savings shift...","e443a98b":"This is all transactions in the training set - I'm using the raw date values from the training data so the values are on the time axis are possibly the wrong timezone - night time appears clearly visible but about 3 hours late (depending on your lifestyle ;)\n\nAlso a fat peak around days 20-30, and a thin (1 day) peak at about day 92.\n\nLooking closely (right click &rarr; *View Image* helps) there is some weekly seasonality - a darker line in the mornings - presumably Sunday.","a2a41865":"Looks good, now do it for all values that appear 5000 times or more, for every single column.","c3606a5b":"Over 300 plots :)"}}