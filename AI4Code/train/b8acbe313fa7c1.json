{"cell_type":{"78750463":"code","c1a7db0d":"code","470bbb2e":"code","569b6d08":"code","dc771ee1":"code","f95e17ee":"code","5ffa8653":"code","02cd3112":"code","1b28aa6e":"code","4d9e2e6b":"code","8d7313d3":"code","b6e4ecd2":"code","33d308d9":"code","ca886b23":"code","6c2e3510":"code","e5bd8499":"code","1950d8a9":"code","8738e469":"code","f7c85ade":"code","c5e0c0a2":"code","f7a4de8f":"code","0ba45a25":"code","e31ac264":"code","874dc092":"code","9c2621f0":"code","c7d478ba":"code","214e400b":"code","043f6140":"code","077dc6f3":"code","97ab44ed":"code","02443764":"code","7999404d":"code","ade341b7":"code","551d9b9a":"code","b5a8b1ce":"code","0a21908f":"code","22d27312":"code","13f86697":"code","28ac642f":"code","2d726285":"code","1f974c36":"code","4a484515":"code","27fc0d56":"code","10a603a8":"markdown"},"source":{"78750463":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1a7db0d":"#GridSearch for parameters\nimport warnings\nwarnings.filterwarnings(action='ignore')\nimport seaborn as sns\nimport plotly.express as px\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()","470bbb2e":"train['stock_id'].value_counts()","569b6d08":"sns.countplot(x=\"stock_id\", data=train)","dc771ee1":"train['time_id'].value_counts()","f95e17ee":"fig = px.scatter(train, y=\"target\", x=\"time_id\")\nfig.show()","5ffa8653":"train.shape","02cd3112":"import seaborn as sns\nsns.distplot(train['target'], color = 'r', label = 'target distribution')","1b28aa6e":"sns.histplot(train['target'], color = 'r', label = 'target distribution')","4d9e2e6b":"sns.distplot(train['time_id'], color = 'y', label = 'time distribution')","8d7313d3":"#Read the data for stock id=0  and time id = 5 from the parquet file \nbook_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\nstock_id = '0'\nbook_example = book_example[book_example['time_id']==5]\nbook_example.loc[:,'stock_id'] = stock_id\ntrade_example = trade_example[trade_example['time_id']==5]\ntrade_example.loc[:,'stock_id'] = stock_id\n","b6e4ecd2":"book_example.head()","33d308d9":"trade_example.head()","ca886b23":"import matplotlib.pyplot as plt\n\nimport matplotlib as mpl\n%matplotlib inline\n\nbook_example.hist(figsize=(18,10))\nplt.show()","6c2e3510":"trade_example.hist(figsize=(18,10), color = 'r')\nplt.show()","e5bd8499":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() ","1950d8a9":"#our target is to predict short-term realized volatility\n#volatility is a statistical measure of price changes on a given stock, to calculate the price change we first need to have a stock valuation at the fixed interval (1 second)\nbook_example['wap'] = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                       book_example['bid_size1']+ book_example['ask_size1'])\n\nfig = px.line(book_example, x=\"seconds_in_bucket\", y=\"wap\", title='WAP of stock_id_0, time_id_5')\nfig.show()","8738e469":"plt.hist(book_example[\"seconds_in_bucket\"], bins = 30)","f7c85ade":"sns.distplot(book_example['wap'])","c5e0c0a2":"book_example.loc[:,'log_return'] = log_return(book_example['wap'])\nbook_example = book_example[~book_example['log_return'].isnull()]","f7a4de8f":"book_example.head()","0ba45a25":"\nsns.distplot(book_example['log_return'], color ='r', label = 'log_return distribution')\n","e31ac264":"sns.distplot(book_example['bid_price1'], color ='b')","874dc092":"sns.distplot(book_example['bid_price2'], color ='y')","9c2621f0":"sns.distplot(book_example['ask_price1'], color ='g');","c7d478ba":"sns.distplot(book_example['ask_price2'], color ='m')","214e400b":"fig = px.line(book_example, x=\"seconds_in_bucket\", y=\"log_return\", title='Log return of stock_id_0, time_id_5')\nfig.show()","043f6140":"#realized vol of stock 0 in this feature bucket\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\nprint(f'Realized volatility for stock_id 0 on time_id 5 is {realized_vol}')","077dc6f3":"import os\nimport glob\nlist_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","97ab44ed":"def realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book_data = pd.read_parquet(file_path)\n    df_book_data['wap'] =(df_book_data['bid_price1'] * df_book_data['ask_size1']+df_book_data['ask_price1'] * df_book_data['bid_size1'])  \/ (\n                                      df_book_data['bid_size1']+ df_book_data[\n                                  'ask_size1'])\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book_data.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]","02443764":"def past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in list_file:\n        df_past_realized = pd.concat([df_past_realized,\n                                     realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized","7999404d":"def rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))","ade341b7":"train.loc[train.stock_id == 0].head()","551d9b9a":"\ndf_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_train,\n                                                           prediction_column_name='pred')","b5a8b1ce":"df_past_realized_train","0a21908f":"sns.distplot(df_past_realized_train['pred'], color = 'k')","22d27312":"plt.hist(df_past_realized_train['pred'], color = 'm')","13f86697":"train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_joined = train.merge(df_past_realized_train[['row_id','pred']], \n                        on = ['row_id'], how = 'left')","28ac642f":"df_joined","2d726285":"sns.regplot(x='target', y ='pred', data = df_joined)","1f974c36":"from sklearn.metrics import r2_score\nR2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)","4a484515":"print(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","27fc0d56":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","10a603a8":"## Upvote if you like it."}}