{"cell_type":{"82bdd067":"code","ec92bf33":"code","bb0ebe5d":"code","2b1dd29b":"code","789c7aee":"code","071f161e":"code","9c18bf8e":"code","c690437b":"code","6eb5b0fd":"code","d13f8650":"code","4a33a460":"code","6e9f707e":"code","00103390":"code","b341a408":"code","a83a06c8":"code","925457dd":"code","82f54b5f":"code","3afcc76e":"code","efd58de3":"code","43045429":"code","82de264a":"code","b2505e0a":"code","0b2e020a":"code","f28c6a1c":"code","5d54f615":"code","121c3eb7":"code","81a80bfa":"code","72b9c4ae":"code","c3607a51":"code","e9585c28":"code","a5fec9b9":"code","f8231f5c":"code","a903818d":"code","01a2e432":"code","50f13d7b":"code","7c94bc3e":"code","6d0e007e":"code","2236fb83":"code","1d7e3e65":"code","9261582d":"code","5f720c90":"code","c5f46bb6":"code","dc774f19":"code","5d962414":"code","099fdb6d":"code","20590c8f":"code","7af3b626":"code","de9f5438":"code","7304d728":"code","21eaf0d9":"code","d2c29fad":"code","210ce553":"code","24c6811a":"code","d1753423":"code","8adfdf43":"code","8615161e":"code","9a69231a":"code","daa8685a":"code","c6af896a":"code","a399980f":"code","8e88e0ea":"code","712af9a7":"code","443b0723":"code","9279d676":"code","17db8180":"code","8ca0f8f9":"code","1784e92f":"code","cad0817e":"code","1c2f0e5e":"code","da60692a":"code","7fd96189":"code","d7b4dca5":"code","b7390e5c":"code","cdd86f4e":"code","0a11d50f":"code","7cb42bbb":"markdown"},"source":{"82bdd067":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nimport datetime as dt\n\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n\nimport matplotlib.dates as dates\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n","ec92bf33":"df = pd.read_csv(\"..\/input\/google-stock-data\/GOOG.csv\")","bb0ebe5d":"df.head()","2b1dd29b":"df.index = pd.to_datetime(df[\"Date\"])\ndf.drop(\"Date\", axis = 1, inplace = True)","789c7aee":"df.describe().T","071f161e":"df[\"Open\"].plot(figsize = (12,8))\nplt.ylabel(\"open price\")","9c18bf8e":"df[\"High\"].plot(figsize = (12,8))\nplt.ylabel(\"high price\")","c690437b":"df[\"Low\"].plot(figsize = (12,8))\nplt.ylabel(\"low price\")","6eb5b0fd":"df[\"Close\"].plot(figsize = (12,8))\nplt.ylabel(\"close price\")","d13f8650":"df[\"Volume\"].plot(figsize = (12,8))\nplt.ylabel(\"volume price\")","4a33a460":"df.isnull().sum()","6e9f707e":"df['Total Pos'] = df.sum(axis=1)","00103390":"df.head()","b341a408":"df['Total Pos'].plot(figsize=(10,8))\nplt.title('Total Portfolio Value')","a83a06c8":"df.drop('Total Pos',axis=1).plot(kind=\"line\", figsize  =(10,8))","925457dd":"df[\"Daily Return\"]= df[\"Total Pos\"].pct_change(1)","82f54b5f":"cum_ret = 100 * (df['Total Pos'][-1]\/df['Total Pos'][0] -1 )\nprint('Our return {} was percent!'.format(cum_ret))","3afcc76e":"df['Daily Return'].mean()","efd58de3":"df['Daily Return'].std()","43045429":"df['Daily Return'].plot(kind='kde')","82de264a":"SR = df['Daily Return'].mean()\/df['Daily Return'].std()","b2505e0a":"ASR = (252**0.5)*SR","0b2e020a":"all_plot = df\/df.iloc[0]\nall_plot.plot(figsize=(24,16))","f28c6a1c":"df.hist(bins=100,figsize=(12,6));\nplt.tight_layout()","5d54f615":"df.resample(rule='A').mean()","121c3eb7":"df.resample(rule='AS').min()","81a80bfa":"df.resample(rule='AS').std()","72b9c4ae":"df.resample(rule='M').mean().head()","c3607a51":"df.resample(rule='MS').max().head()\n","e9585c28":"title = 'Yearly Mean Closing Price for zoom'\ndf['Close'].resample('A').mean().plot.bar(title=title,figsize=(10,8));","a5fec9b9":"df.resample(rule='M').max().tail(10)","f8231f5c":"df.tail()","a903818d":"df['Close'].resample('M').max().plot.bar(figsize=(25,6),color='#1f77b4');\nxlim=[\"2021-01-31\", \"2021-10-311\"]","01a2e432":"ax = df['Close'].plot(figsize=(24,6),title=title)","50f13d7b":"df['6-month-SMA'] = df['Close'].rolling(window=6).mean()\ndf['12-month-SMA'] = df['Close'].rolling(window=12).mean()\ndf['2-month-SMA'] = df['Close'].rolling(window=2).mean()","7c94bc3e":"df.head(10)\n","6d0e007e":"df['EWMA12'] = df['Close'].ewm(span=12,adjust=True).mean()\n","2236fb83":"df[['Close','EWMA12']].plot(figsize=(12,6));\n","1d7e3e65":"df[['Close','EWMA12','12-month-SMA']].plot(figsize=(30,15)).autoscale(axis='x',tight=True);\n","9261582d":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing","5f720c90":"span = 12\nalpha = 2\/(span+1)","c5f46bb6":"df['EWMA12'] = df['Close'].ewm(alpha=alpha,adjust=False).mean()\n","dc774f19":"model=SimpleExpSmoothing(df[\"Close\"])","5d962414":"model.fit(smoothing_level=alpha,optimized=False)","099fdb6d":"fitted_model=model.fit(smoothing_level=alpha,optimized=False)","20590c8f":"fitted_model.fittedvalues","7af3b626":"fitted_model.fittedvalues.shift(-1)","de9f5438":"df[\"SES12\"]=fitted_model.fittedvalues.shift(-1)","7304d728":"df[['Close',\"SES12\"]].plot(figsize=(30,15)).autoscale(axis='x',tight=True);","21eaf0d9":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\n","d2c29fad":"\ndf['DESadd12'] = ExponentialSmoothing(df['Close'], trend='add').fit().fittedvalues.shift(-1)\ndf.head()","210ce553":"df[['Close',  'SES12', 'DESadd12']].plot(figsize=(24,12))","24c6811a":"df['DESadd12'].head()","d1753423":"df[['Close','EWMA12','DESadd12']].iloc[:12].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","8adfdf43":"df['DESmul12'] = ExponentialSmoothing(df['Close'], trend='mul').fit().fittedvalues.shift(-1)\ndf.head()","8615161e":"df[['Close','DESadd12','DESmul12']].iloc[:48].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","9a69231a":"df['TESadd12'] = ExponentialSmoothing(df['Close'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf.head()","daa8685a":"df['TESmul12'] = ExponentialSmoothing(df['Close'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf.head()","c6af896a":"df[['Close','TESadd12','TESmul12']].plot(figsize=(24,12)).autoscale(axis='x',tight=True);","a399980f":"df[['Close','TESadd12','TESmul12']].iloc[:48].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","8e88e0ea":"df = pd.read_csv(\"..\/input\/google-stock-data\/GOOG.csv\")\ndf.head()","712af9a7":"len(df)","443b0723":"train_df = df.iloc[:3000]\ntest_df = df.iloc[3000:]","9279d676":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Open'],name=\"google Train\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Open'],name=\"google Test\"),secondary_y=False,)","17db8180":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(train_df['Close'].values.reshape(-1,1))","8ca0f8f9":"prediction_days = 30\n\nx_train = []\ny_train = []\n\nfor x in range(prediction_days, len(scaled_data)-5):     \n    x_train.append(scaled_data[x-prediction_days:x, 0])\n    y_train.append(scaled_data[x+5, 0])     \n    \nx_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","1784e92f":"model = Sequential()    \nmodel.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1],1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1))","cad0817e":"model.summary()\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics = ['accuracy']) ","1c2f0e5e":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5)\nhis=model.fit(x_train,y_train,epochs=20,batch_size=32,callbacks=[callback])","da60692a":"plt.plot(his.history['loss'])\nplt.plot(his.history['accuracy'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['loss','accuracy'], loc='upper right')\nplt.show()","7fd96189":"actual_prices = test_df['Close'].values\ntotal_dataset = pd.concat((train_df['Close'], test_df['Close']), axis=0)\n\nmodel_inputs = total_dataset[len(total_dataset)-len(test_df)-prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1,1)\nmodel_inputs = scaler.transform(model_inputs)","d7b4dca5":"x_test = []\nfor x in range(prediction_days,len(model_inputs)):\n    x_test.append(model_inputs[x-prediction_days:x,0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))\n\npredicted_prices = model.predict(x_test)\npredicted_prices = scaler.inverse_transform(predicted_prices)","b7390e5c":"plt.plot(actual_prices, color='red', label=f\"Actual price\")\nplt.plot(predicted_prices, color= 'blue', label=f\"Predicted 5-days-after price\")\nplt.title(f\"Zoom Stock\")\nplt.xlabel(\"Days in test period\")\nplt.ylabel(f\"Price\")\nplt.legend()\nplt.show()","cdd86f4e":"test_df['predict']=predicted_prices\ntest_df[[\"Date\",\"Close\",\"predict\"]]","0a11d50f":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=train_df['Date'],y=train_df['Close'],name=\"Train Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['Close'],name=\"Test Actual\"),secondary_y=False,)\nfig.add_trace(go.Scatter(x=test_df['Date'],y=test_df['predict'],name=\"Predicted 5-days after price\"),secondary_y=False,)\nfig.update_layout(autosize=False,width=900,height=500,title_text=\"Zoom\")\nfig.update_xaxes(title_text=\"year\")\nfig.update_yaxes(title_text=\"prices\",secondary_y=False)\nfig.show()","7cb42bbb":"Data Extraction"}}