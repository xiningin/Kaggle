{"cell_type":{"dbf0113f":"code","f7789726":"code","942bad47":"code","8e9d9a17":"code","4167a5ef":"code","596ea65c":"code","ee85cafe":"code","d7df22b2":"code","7a996458":"code","376a8f28":"code","9472e3ed":"code","8d1bd6a3":"code","e01080ed":"code","a5f29f84":"code","8c32f7c7":"code","bd7df817":"code","9b3164bc":"code","f2f9dbd1":"code","473f7261":"code","28d3d559":"code","f7aee22f":"code","c618a40f":"code","ac8614a5":"markdown","9197212f":"markdown","52da2c43":"markdown","eae24bdb":"markdown","80c61245":"markdown","875a2ab8":"markdown"},"source":{"dbf0113f":"#importing required libraries \n\nfrom sklearn.datasets import make_regression   #for creating a regression data set \nimport numpy as np \nimport matplotlib.pyplot as plt   #for plotting graphs ","f7789726":"#generating our data set using make_regression() func. \nx,y = make_regression(100, 1, shuffle = True, bias = 0.0, noise = 0, random_state=2)\n#100 : number of samples \n#1 : dimensionality ","942bad47":"#shape of x \nx.shape","8e9d9a17":"#shape of y\ny.shape","4167a5ef":"#max and min values of x\nprint(np.max(x))\nprint(np.min(x))","596ea65c":"#max and min values of y\nprint(np.max(y))\nprint(np.min(y))","ee85cafe":"#mean of x  \nmean_x = np.mean(x)\nmean_x\n\n#mean_x = sum(x)\/len(x)   #another way","d7df22b2":"#mean of y \nmean_y = np.mean(y)\nmean_y\n\n# mean_y = sum(y)\/len(y)  #another way","7a996458":"#since our x is 2 dimensional and y is 1 dimensional. Let's flatten x to 1 dimension\nx = np.ravel(x)\nx.shape","376a8f28":"#let's find out our m (slope)\n#Whenever stuck, please refer to the formula provided above :)\n\nm = sum((x - mean_x)*(y - mean_y))\/sum((x - mean_x)**2)\nm","9472e3ed":"#determining c\n\nc = mean_y - mean_x*m\nc","8d1bd6a3":"#let the value of x be 2.9\nX = 2.9 \n#Y = mx + c\nY = m*X + c\nY   #our predicted value of y","e01080ed":"#importing the required libraries \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","a5f29f84":"#importing our dataset \ndf = pd.read_csv('..\/input\/diamonds\/diamonds.csv')\ndf.head()    #Returns the first 5 rows of the dataframe","8c32f7c7":"#our independent variable\nX = df[['carat']]\nX","bd7df817":"#if you want to use more attributes for regression you can perform this way \n#X = df[['carat','depth','table']] \n\n#Note : these attributes have numerical value","9b3164bc":"#dependent variable \nY = df['price']\nY","f2f9dbd1":"#splitting our data set into training and testing set\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","473f7261":"#training our model using training data set\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)","28d3d559":"#Now after training, it's time to make predictions using our testing data set\npredictions = model.predict(X_test)\npredictions","f7aee22f":"#let make a temporary Dataframe with categorical variables \ntemp = df[['cut','color','clarity']]\ntemp","c618a40f":"#Let's convert them into numerical values \ntemp = pd.get_dummies(data=temp)\ntemp","ac8614a5":"# **Simple Linear Regression**\n\nBefore jumping into the implementation and the programming part, first of all let's understand what linear regression is and why do we use it?\n\nLinear Regression : It shows linear relationship between a dependent variable and one or more independent variable. \n\nImportant points that you should remember : \n\n1. It makes predictions for real\/continuous or numeric variables such as sales, age, price etc.\n2. We finds out how the value of dependent variable(y) changes according to the value of independent variable(x). \n![LR.jpg](attachment:922f65a9-901e-4491-b630-a422865ef0b4.jpg)\n\nYou might be wondering what the term random error means. Don't worry I have made it easier for you.<br>  \nRandom error :  It is the difference between the predicted value of y for x and the observed value of y for x. \n\nNow, we  have to find the value of 'm' and 'c' to make predictions from our regression line. \nSo, for that we have : \n\n![image.png](attachment:05598385-4b77-47ec-ab72-f0dca72086bc.png)\n\nLet's get into the coding part!","9197212f":"# **3. Regression With Categorical Variables**\n\nWhat if you want to include the categorical variables for prediction?<br>\nSimple answer is that you have to assign those variables a numerical value","52da2c43":"# **1. Performing mathematically** ","eae24bdb":"# **2. Performing on a dataset**","80c61245":"You're good to go with performing regression on data sets!\n<br>\nReviews and edits are always welcome. Let's share and grow :)","875a2ab8":"We have determined our 'm' and 'c'. From both these values, we can predict the value of y for some value of x. "}}