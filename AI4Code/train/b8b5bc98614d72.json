{"cell_type":{"0940d21a":"code","966f8648":"code","491e330b":"code","8c536a8f":"code","7e4d4505":"code","f1544eab":"markdown","6110ffe5":"markdown","641f693a":"markdown","8db2cc0b":"markdown","15556535":"markdown"},"source":{"0940d21a":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport torch\nimport torch.nn as nn\nimport random\nimport time\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","966f8648":"!pip install \/kaggle\/input\/pythonchess\/python_chess-0.30.1-py3-none-any.whl\n!pip install \/kaggle\/input\/pythonchess\/python-chess-0.30.1\/dist\/python-chess-0.30.1.tar","491e330b":"import chess\nimport torch\n\nclass State(object):\n    def __init__(self, board=None):\n        if board is None:\n            self.board = chess.Board()\n        else:\n            self.board = board\n\n    def serialize(self):\n        assert self.board.is_valid()\n\n        bstate = np.zeros(64,np.uint8)\n        for i in range(64):\n            pp = self.board.piece_at(i)\n            if pp is not None:\n                # print(i, pp.symbol())\n                bstate[i] = {\"P\": 1, \"N\": 2, \"B\": 3, \"R\": 4, \"Q\": 5, \"K\": 6,\n                             \"p\": 9, \"n\": 10, \"b\": 11, \"r\": 12, \"q\": 13, \"k\": 14}[pp.symbol()]\n\n        if self.board.has_queenside_castling_rights(chess.WHITE):\n            assert bstate[0] == 4\n            bstate[0] = 7\n\n        if self.board.has_kingside_castling_rights(chess.WHITE):\n            assert bstate[7] == 4\n            bstate[7] = 7\n\n        if self.board.has_queenside_castling_rights(chess.BLACK):\n            assert bstate[56] == 8+4\n            bstate[56] = 8+7\n\n        if self.board.has_kingside_castling_rights(chess.BLACK):\n            assert bstate[63] == 8+4\n            bstate[63] = 8+7\n\n        if self.board.ep_square is not None:\n            assert bstate[self.board.ep_square] == 0\n            bstate[self.board.ep_square] = 8\n\n        # Binary representation\n        bstate = bstate.reshape(8, 8)\n        state = np.zeros((5, 8, 8), np.uint8)\n\n        # 0-3 column to binary\n        state[0] = (bstate >> 3) & 1\n        state[1] = (bstate >> 2) & 1\n        state[2] = (bstate >> 1) & 1\n        state[3] = (bstate >> 0) & 1\n\n        # 4th column is who's turn it is\n        state[4] = (self.board.turn*1.0)\n        return state\n\n    def edges(self):\n        return list(self.board.legal_moves)\n","8c536a8f":"class Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.a1 = nn.Conv2d(5, 16, kernel_size=3, padding=1)\n        self.a2 = nn.Conv2d(16, 16, kernel_size=3, padding=1)\n        self.a3 = nn.Conv2d(16, 32, kernel_size=3, stride=2)\n\n        self.b1 = nn.Conv2d(32, 32, kernel_size=3, padding=1)\n        self.b2 = nn.Conv2d(32, 32, kernel_size=3, padding=1)\n        self.b3 = nn.Conv2d(32, 64, kernel_size=3, stride=2)\n\n        self.c1 = nn.Conv2d(64, 64, kernel_size=2, padding=1)\n        self.c2 = nn.Conv2d(64, 64, kernel_size=2, padding=1)\n        self.c3 = nn.Conv2d(64, 128, kernel_size=2, stride=2)\n\n        self.d1 = nn.Conv2d(128, 128, kernel_size=1)\n        self.d2 = nn.Conv2d(128, 128, kernel_size=1)\n        self.d3 = nn.Conv2d(128, 128, kernel_size=1)\n\n        self.last = nn.Linear(128, 1)\n\n    def forward(self, x):\n        x = F.relu(self.a1(x))\n        x = F.relu(self.a2(x))\n        x = F.relu(self.a3(x))\n\n        # 4x4\n        x = F.relu(self.b1(x))\n        x = F.relu(self.b2(x))\n        x = F.relu(self.b3(x))\n\n        # 2x2\n        x = F.relu(self.c1(x))\n        x = F.relu(self.c2(x))\n        x = F.relu(self.c3(x))\n\n        # 1x64\n        x = F.relu(self.d1(x))\n        x = F.relu(self.d2(x))\n        x = F.relu(self.d3(x))\n\n        x = x.view(-1, 128)\n        x = self.last(x)\n\n        # value output\n        return F.tanh(x)","7e4d4505":"class Valuator(object):\n    def __init__(self):\n        vals = torch.load('\/kaggle\/input\/chess-dataset\/value.pth')\n        self.model = Net()\n        self.model.load_state_dict(vals)\n\n    def __call__(self, s):\n        brd = s.serialize()[None]\n        output = self.model(torch.tensor(brd).float())\n        return float(output.data[0][0])\n\n\ndef explore_leaves(s, v):\n    ret = []\n    for e in s.edges():\n        s.board.push(e)\n        ret.append((v(s), e))\n        s.board.pop()\n    return ret\n\n\n# Chess board and \"engine\"\nv = Valuator()\ns = State()\n\n\ndef computer_move():\n    move = sorted(explore_leaves(s, v), key=lambda x: x[0], reverse=s.board.turn)[0]\n    print(move)\n    s.board.push(move[1])\n","f1544eab":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","6110ffe5":"Oh, no! There are no automatic insights available for the file types used in this dataset. As your Kaggle kerneler bot, I'll keep working to fine-tune my hyper-parameters. In the meantime, please feel free to try a different dataset.","641f693a":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","8db2cc0b":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","15556535":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!"}}