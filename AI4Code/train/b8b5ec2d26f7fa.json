{"cell_type":{"13ffc66f":"code","b9de5f46":"code","6c75b33f":"code","a1f96ded":"code","8b5b8008":"code","4c6c5cce":"code","0716a101":"code","936d2f5d":"code","59732a39":"code","56d8143d":"code","7ca0da1e":"code","58765fb5":"code","50e0c04f":"markdown","be9709b9":"markdown","94f6aa8b":"markdown"},"source":{"13ffc66f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport ast, json\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","b9de5f46":"df = pd.read_csv(\"..\/input\/what's-happening-la-calendar-dataset\/whats-happening-la-calendar-dataset.csv\")","6c75b33f":"df.describe()","a1f96ded":"df.head()","8b5b8008":"# Date pre-processing - Only include events after 2010\ndf['Start Year'] = df['Event Date & Time Start'].astype(str).apply(lambda x: x.split('-')[0])\ndf['End Year'] = df['Event Date & Time Ends'].astype(str).apply(lambda x: x.split('-')[0])\ndf = df[df['Start Year'].astype(float) > 2010]\ndf = df[df['End Year'].astype(float) > 2010]\ndf['Event Date & Time Start'] = pd.to_datetime(df['Event Date & Time Start'])\ndf['Event Date & Time Ends'] = pd.to_datetime(df['Event Date & Time Ends'])\n\n# Add new date columns\ndf['Month'] = df['Event Date & Time Start'].apply(lambda time: time.month)\ndf['Day of Week'] = df['Event Date & Time Start'].apply(lambda time: time.dayofweek)\ndmap = {0: 'Mon', 1: 'Tue', 2: 'Wed', 3: 'Thu', 4: 'Fri', 5: 'Sat', 6: 'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)\ndf['Day of Week'] = pd.Categorical(df['Day of Week'], categories=['Mon','Tue','Wed','Thu','Fri','Sat', 'Sun'], ordered=True)\n\n# Replace NAs in location address\ndf['Location Address'].fillna('{}', inplace = True)","4c6c5cce":"# Normalize json in location address\ndef only_dict(d):\n    '''\n    Convert json string representation of dictionary to a python dict\n    '''\n    return ast.literal_eval(d)\n\nlocation_data = json_normalize(data = df['Location Address'].apply(only_dict))\nlocation_data['human_address'].fillna('{}', inplace = True)\nhuman_address_data = json_normalize(data = location_data['human_address'].apply(only_dict))","0716a101":"human_address_data.head()","936d2f5d":"# Events started in each year - bar plot\nplt.figure(figsize=(12,6))\nsns.countplot(data = df, x = 'Start Year', palette = 'viridis')\nplt.title('Number of Events Started each Year')","59732a39":"# Events started in each month - heatmap\nbyMonthDay = df.groupby(['Month','Day of Week']).count()['Event Date & Time Start'].unstack(level=0)\nplt.figure(figsize=(12,6))\nsns.heatmap(data = byMonthDay, cmap = 'coolwarm')\nplt.title('Events across the Days\/Months')","56d8143d":"# Bar chart on age groupings of events\nhuman_address_data['city'].value_counts().head()","7ca0da1e":"# Clean human_address data\nhuman_address_data['city'].replace('', np.NaN, inplace = True)\nhuman_address_data = human_address_data.dropna()\n\n# Find number of events in each county from 2014 - 2017\nbycity = human_address_data.groupby('city').count()\nbycity = bycity.reset_index().sort_values(by='address', ascending = False).rename(str.capitalize,axis = 'columns')\nbycity = bycity.rename(index = str, columns = {'Address': 'Count'})\nbycity","58765fb5":"# Bar chart showing top 5 cities where events were held\nplt.figure(figsize=(12,6))\nsns.barplot(data= bycity.head(), x = 'City', y = 'Count',  palette='viridis')\nplt.title('Top 5 Cities for Events in LA')","50e0c04f":"First, I wanted to know which years had the most events.","be9709b9":"Second, I wanted to know which are the most popular days of the week and months to host events","94f6aa8b":"Lastly, I wanted to show a bar chart showing the top 5 cities for events"}}