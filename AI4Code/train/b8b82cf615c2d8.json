{"cell_type":{"a1920377":"code","f8d0787b":"code","9b07f70f":"code","43269f0b":"code","fa151252":"code","d1e200f6":"code","8f971256":"code","a67b204c":"code","d46be3c6":"markdown","2f358089":"markdown","f5d06095":"markdown","be317653":"markdown","f495ec74":"markdown","ad858d26":"markdown","d29dcfb6":"markdown"},"source":{"a1920377":"import numpy  as np \nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport plotly.express as px\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nsns.set_palette(\"bright\")\n\ncsv_0 = pd.read_csv('..\/input\/optiver-public-leaderboard-files\/optiver-realized-volatility-prediction-publicleaderboard_00.csv',index_col=0)\ncsv_1 = pd.read_csv('..\/input\/optiver-public-leaderboard-files\/optiver-realized-volatility-prediction-publicleaderboard_01.csv',index_col=0)\ncsv_2v1 = pd.read_csv('..\/input\/optiver-public-leaderboard-files\/optiver-realized-volatility-prediction-publicleaderboard_02.csv',index_col=0)\ncsv_2 = pd.read_csv('..\/input\/optiver-public-leaderboard-files\/optiver-realized-volatility-prediction-publicleaderboard_02_v2.csv',index_col=0)\n\n# create the positions\ncsv_0.insert(loc=2, column='position 0', value=np.arange(start=1, stop=(len(csv_0)+1) ))\ncsv_1.insert(loc=2, column='position 1', value=np.arange(start=1, stop=(len(csv_1)+1) ))\ncsv_2v1.insert(loc=2, column='position 2v1', value=np.arange(start=1, stop=(len(csv_2v1)+1) ))\ncsv_2.insert(loc=2, column='position 2v2', value=np.arange(start=1, stop=(len(csv_2)+1) ))\n\ncsv_0 = csv_0.drop([           'SubmissionDate'], axis='columns')\ncsv_1 = csv_1.drop(['TeamName','SubmissionDate'], axis='columns')\ncsv_2v1 = csv_2v1.drop(['TeamName','SubmissionDate'], axis='columns')\ncsv_2 = csv_2.drop(['TeamName','SubmissionDate'], axis='columns')\n\ncsv_0.rename(columns={\"Score\":\"score 0\"},inplace=True)\ncsv_1.rename(columns={\"Score\":\"score 1\"},inplace=True)\ncsv_2v1.rename(columns={\"Score\":\"score 2v1\"},inplace=True)\ncsv_2.rename(columns={\"Score\":\"score 2v2\"},inplace=True)\n\nmerged_df = csv_0.join(csv_1).join(csv_2v1).join(csv_2)\n\nmerged_df[\"delta score\"] = abs(merged_df[\"score 2v1\"] - merged_df[\"score 2v2\"])\nmerged_df[\"delta position\"] = abs(merged_df[\"position 2v1\"] - merged_df[\"position 2v2\"])\n\n# Take a look at the top 20 for the second update\ncols = [\"TeamName\",\"position 2v1\",\"score 2v1\",\"position 2v2\",\"score 2v2\",\"delta score\",\"delta position\"]\nmerged_df[cols].set_index(\"TeamName\").sort_values(by='score 2v2', ascending=True).head(20)","f8d0787b":"print(\"Number of teams with a shakeup of over   50: \",merged_df[merged_df['delta position'] > 50].shape[0] )\nprint(\"Number of teams with a shakeup of over  100: \",merged_df[merged_df['delta position'] > 100].shape[0] )\nprint(\"Number of teams with a shakeup of over  200: \",merged_df[merged_df['delta position'] > 200].shape[0] )\nprint(\"Number of teams with a shakeup of over  500: \",merged_df[merged_df['delta position'] > 500].shape[0] )\nprint(\"Number of teams with a shakeup of over 1000: \",merged_df[merged_df['delta position'] > 1000].shape[0] )","9b07f70f":"fig, ax = plt.subplots(figsize=(12, 6))\nax.set_xlabel(\"\u0394 position\", fontsize=14)\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax = ax.twinx()\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nsns.ecdfplot(data=merged_df, x=\"delta position\")\nax.set(xlim=(0, 250))\nplt.show();","43269f0b":"print(\"Number of teams with a score shakeup of over 0.002: \", merged_df[merged_df['delta score'] > 0.002].shape[0] )\nprint(\"Number of teams with a score shakeup of over 0.003: \", merged_df[merged_df['delta score'] > 0.003].shape[0] )\nprint(\"Number of teams with a score shakeup of over 0.005: \", merged_df[merged_df['delta score'] > 0.005].shape[0] )\nprint(\"Number of teams with a score shakeup of over 0.1  : \", merged_df[merged_df['delta score'] > 0.1].shape[0] )","fa151252":"fig, ax = plt.subplots(figsize=(12, 6))\nax.set_xlabel(\"\u0394 score\", fontsize=14)\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax = ax.twinx()\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nsns.ecdfplot(data=merged_df, x=\"delta score\")\nax.set(xlim=(0, 0.005))\nplt.show();","d1e200f6":"# https:\/\/matplotlib.org\/stable\/gallery\/color\/named_colors.html\ncolor_1 = 'blue'\ncolor_2 = 'olive'\ncolor_3 = 'orange'\ncolor_4 = 'crimson'\ncolor_5 = 'limegreen'\ncolor_6 = 'red'\ncolor_7 = 'teal'\ncolor_8 = 'yellowgreen'\n\nfig  = px.scatter(merged_df,x='position 1',y='position 2v1',hover_name='TeamName').update_traces(marker=dict(color=color_6))\nfig_2  = px.scatter(merged_df,x='position 1',y='position 2v2',hover_name='TeamName').update_traces(marker=dict(color=color_1))\nfig.add_trace(fig_2.data[0])\n\nfig.update_layout(\n    title=\"The black line represents \u0394=0.\",\n    xaxis_title=\"Old Leaderboard position\",\n    yaxis_title=\"New Leaderboard position\",)\n#fig.update_layout(xaxis = dict(range=[0.17,0.3]))\n#fig.update_layout(yaxis = dict(range=[0.17,0.3]))\nfig.add_shape(type=\"line\",x0=0, y0=0, x1=4000, y1=4000,line=dict(color=\"black\",width=1.5,))\nfig.update_traces(mode='markers', marker_size=3)\nfig.show();","8f971256":"data = [[0, 0], [5000, 5000]]\nxy = pd.DataFrame(data, columns = ['x', 'y'])\n\nfig, ax = plt.subplots(figsize=(8, 8))\nsns.kdeplot(x=merged_df[\"position 1\"], y=merged_df[\"position 2v1\"],  fill=True , thresh=0.0035, color=color_6, ax = ax)\nsns.kdeplot(x=merged_df[\"position 1\"], y=merged_df[\"position 2v2\"],  fill=True , thresh=0.0035, color=color_1, ax = ax)\nsns.lineplot(data=xy, x=\"x\", y=\"y\", color=\"black\", linewidth=0.5)\nax.set_title(\"With noise in red, and without noise in blue\", fontsize=14)\nax.set_xlabel(\"LB 1 position\", fontsize=14)\nax.set_ylabel(\"LB 2 position\", fontsize=14)\nax.set(xlim=(0, 5000))\nax.set(ylim=(0, 5000))\nplt.show();","a67b204c":"fig  = px.scatter(merged_df,x='score 1',y='score 2v1',hover_name='TeamName').update_traces(marker=dict(color=color_6))\nfig_2  = px.scatter(merged_df,x='score 1',y='score 2v2',hover_name='TeamName').update_traces(marker=dict(color=color_1))\nfig.add_trace(fig_2.data[0])\n\nfig.update_layout(\n    title=\"The black line represents \u0394=0.\",\n    xaxis_title=\"Old Leaderboard score\",\n    yaxis_title=\"New Leaderboard score\",)\nfig.update_layout(xaxis = dict(range=[0.17,0.9]))\nfig.update_layout(yaxis = dict(range=[0.17,0.9]))\nfig.add_shape(type=\"line\",x0=0, y0=0, x1=250, y1=250,line=dict(color=\"black\",width=1,))\nfig.update_traces(mode='markers', marker_size=3)\nfig.show();","d46be3c6":"we can plot this as an empirical cumulative distribution function (only plotted for a LB position shakeup up to 250)","2f358089":"## [Optiver Realized Volatility Prediction competition](https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/)\n## The Second Update: with and without the noise.\n\nI shall not go into details concerning motivation for creating this notebook; I shall simply refer the interested reader to the following topics:\n* [Second leaderboard update is complete [out of date]](https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/282791)\n* [Second leaderboard update will be rerun without added noise](https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/284121)\n* [Revised second rerun is posted](https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/284665)\n\n###  The \"Top 20\"","f5d06095":"Here is a smoothed contour plot, the red indicating the \"spreading out\" of the shakeup due to the addition of noise:","be317653":"only plotted up to a score shakeup of 0.005.\n\n## Position shakeups with noise (red) and without noise (blue)","f495ec74":"The values for the $\\Delta$ that I use here are somewhat arbitrary (if you wish to change them please feel free to fork this notebook and rerun, or make a suggestion in the comments section and I will re-run this script). They were chosen by looking at one of the [isoscore strings](https:\/\/www.kaggle.com\/carlmcbrideellis\/shakeup-scatterplots-boxes-strings-and-things) at the bottom of the leaderboard, under the assumption that the said notebook was probably an unsophisticated '*naive*' submission, and would be little affected by the random noise modification. This corresponded to a $\\Delta$(position) of 33 and a $\\Delta$(score) of less than 0.002. To both of these values I have also arbitrarily added some margins.\n\n* Number of teams with position shakeups:","ad858d26":"Number of teams score shakeups:","d29dcfb6":"## Interactive score shakeups (with noise in red and without noise in blue)"}}