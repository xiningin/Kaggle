{"cell_type":{"dbb8a60b":"code","9af960f4":"code","a7297c72":"code","4082e808":"code","b482f72f":"code","4f8c51ea":"code","f2d79234":"code","47760717":"code","bf5c19fb":"code","8299a004":"code","f380d6db":"code","2b110af5":"code","2b3d627a":"code","25147e9f":"code","8ce85f72":"code","6efb26fe":"code","3f9b2ef0":"code","27227e50":"code","4b623e5e":"code","ca070aa8":"code","720509b6":"code","2b452874":"code","c38ec7a9":"code","3f971c63":"code","cd562651":"code","936fa360":"code","1fc6568f":"code","7e98a093":"code","52969bfd":"code","e918f2c5":"code","19f011e0":"code","3519d6d0":"code","2b803f96":"code","389d7af4":"code","950d717b":"code","76989203":"code","cc994e24":"code","245facc7":"code","d32edf08":"code","9691103c":"code","1b899b36":"code","17a8bb38":"code","a12866e2":"code","9d49768c":"code","c1796d2e":"code","1cc5170f":"code","4fa727aa":"markdown","fec89d49":"markdown","3ea4b8d3":"markdown","bbc1bbe4":"markdown","900c321c":"markdown","09369c3b":"markdown","c6b4deb7":"markdown","1f94be66":"markdown","0a5d2077":"markdown","91a72cee":"markdown","b810b6ed":"markdown","51f725e7":"markdown","82dcc971":"markdown","ca2f4c6c":"markdown","c69269dd":"markdown","9859b8b6":"markdown"},"source":{"dbb8a60b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9af960f4":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport seaborn as sns\n\nimport datetime as datetime\nimport matplotlib.dates as dates\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import KFold, train_test_split, GridSearchCV\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nimport datetime\nfrom datetime import date","a7297c72":"df = pd.read_csv('\/kaggle\/input\/covid19-indonesia\/covid_19_indonesia_time_series_all.csv')\ndf.head(20)","4082e808":"df.columns","b482f72f":"print('---Location---')\ndf.Location.unique()","4f8c51ea":"date2=[]\nfor item in df['Date']:\n    item2=item.split('\/')\n    month=int(item2[0])\n    day=int(item2[1])\n    year=int(item2[2])\n    date2+=[datetime.date(year,month,day)]\ndf['Date']=date2\ndf['Date'] = pd.to_datetime(df['Date'])","f2d79234":"data = df.drop(['City or Regency','Name','Item','Kind','Hidden','Location ISO Code',\n                'Province','Country','Continent','Island','Time Zone','Special Status',\n                'Total Regencies','Total Cities','Total Districts','Total Urban Villages',\n                'Total Rural Villages','New Cases per Million','Total Cases per Million',\n                'New Deaths per Million','Total Deaths per Million','Case Fatality Rate',\n                'Case Recovered Rate','Growth Factor of New Cases','Growth Factor of New Deaths'],axis = 1)\ndata = data.fillna(0)\ndata.head(5)","47760717":"data.info()","bf5c19fb":"data1 = data[data['Location Level'] != 'Country']\ndata1.head()","8299a004":"newest = data1.drop_duplicates(subset='Location', keep=\"last\")\nnewest.head()","f380d6db":"newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)","2b110af5":"plt.figure(figsize=(12,9))\nplt.bar(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Location'].values[:5], newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Total Cases'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kasus Paling Banyak', fontsize=14)\nplt.xlabel('Provinsi')\nplt.show()","2b3d627a":"(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Total Cases'].values[:2][0] - newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Total Cases'].values[:2][1])\/newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Total Cases'].values[:2][0] * 100","25147e9f":"plt.figure(figsize=(12,9))\n# plt.bar(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Location'].values[:5], newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Total Deaths'].values[:5])\n# plt.title('5 Provinsi Teratas Dengan Total Kematian Paling Banyak', fontsize=14)\n# plt.xlabel('Provinsi')\n# plt.show()\n\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Total Deaths'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kematian Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.show()","8ce85f72":"plt.figure(figsize=(12,9))\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Recovered'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Recovered'], ascending=False)['Total Recovered'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kesembuhan Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.show()","6efb26fe":"plt.figure(figsize=(12,9))\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Active Cases'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Active Cases'], ascending=False)['Total Active Cases'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kasus Aktif Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.show()","3f9b2ef0":"jakarta = data[data.Location == 'DKI Jakarta'].tail(7).copy()\njakarta","27227e50":"plt.figure(figsize=(10,7))\nplt.plot(jakarta['Date'].values ,jakarta['New Cases'].values)\nplt.xlabel('Waktu')\nplt.ylabel('Jumlah Kasus Baru')\nplt.show()","4b623e5e":"print('Persentase Kenaikan dari Tanggal 7-8 sebanyak', (jakarta['New Cases'].values[4:][1]- jakarta['New Cases'].values[4:][0]) \/ jakarta['New Cases'].values[4:][0] * 100)","ca070aa8":"plt.figure(figsize=(10,9))\nplt.plot(jakarta['Date'].values ,jakarta['New Cases'].values, label='Cases')\nplt.plot(jakarta['Date'].values, jakarta['New Recovered'].values, label = 'Recover')\nplt.plot(jakarta['Date'].values, jakarta['New Deaths'].values, label = 'Death')\nplt.title('Perbandingan Peningkatan Kasus Baru, Kematian, dan Kesembuhan. ')\nplt.legend()\nplt.show()","720509b6":"# fig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,9))\n# ax1.plot(jakarta['Date'].values, jakarta['New Deaths'].values, label = 'Death')\n# ax2.plot(jakarta['Date'].values, jakarta['New Recovered'].values, label = 'Recover')\n\nplt.figure(figsize=(10,9))\nplt.plot(jakarta['Date'].values, jakarta['New Deaths'].values, label = 'Death')\nplt.title('Angka Kematian Covid 19 DKI Jakarta 3 Juli - 9 Juli 2021')\nplt.legend()\nplt.show()","2b452874":"jatim = data[data.Location == 'Jawa Timur'].tail(7).copy()\njatim","c38ec7a9":"fig,(ax1,ax2) =  plt.subplots(1,2,figsize=(12,9))\nax1.plot(range(7), jatim['Total Cases'].values)\nax1.set_title('Angka Kasus COVID 19')\nax2.plot(range(7), jatim['Total Deaths'].values)\nax2.set_title('Angka Kematian COVID 19')\nplt.suptitle('Total Cases and Deaths', fontsize=20)\nplt.show()","3f971c63":"fig, ax = plt.subplots(1,3, figsize=(15,8))\nfig.suptitle('Perbandingan Kasus, Kematian, Kesembuhan Pada Awal PPKM', fontsize=20)\nax[0].plot(range(7), jatim['New Cases'].values, label = 'Jawa Timur')\nax[0].plot(range(7), jakarta['New Cases'].values, label = 'DKI Jakarta')\nax[0].set_title('Angka Kasus')\nax[0].legend()\nax[1].plot(range(7), jatim['New Deaths'].values, label = 'Jawa Timur')\nax[1].plot(range(7), jakarta['New Deaths'].values, label = 'DKI Jakarta')\nax[1].set_title('Angka Kematian')\nax[1].legend()\nax[2].plot(range(7), jatim['New Recovered'].values, label = 'Jawa Timur')\nax[2].plot(range(7), jakarta['New Recovered'].values, label = 'DKI Jakarta')\nax[2].set_title('Angka Kesembuhan')\nax[2].legend()\nplt.show()","cd562651":"plt.figure(figsize=(8,10))\nsns.heatmap(data1.corr(), annot=True)","936fa360":"data1.info()","1fc6568f":"data1.head()","7e98a093":"# ['New Deaths', 'New Cases', 'New Recovered', 'Total Recovered', 'Total Active Cases', 'Population']\n\nX = data1.drop(['New Deaths', 'Date', 'Location', 'New Active Cases', 'Location Level', 'Total Active Cases', 'Longitude', 'Latitude'], axis=1)\ny = data1['New Deaths']\n\nbestfeatures = SelectKBest(score_func=chi2, k=8)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features","52969bfd":"data2 = data1[['New Deaths', 'New Cases','Total Cases', 'New Recovered', 'Total Recovered', 'Total Deaths','Population', 'Population Density']]\ndata2.head()","e918f2c5":"sns.pairplot(data2)","19f011e0":"X = data2.drop('New Deaths', axis = 1)\ny = data2['New Deaths']","3519d6d0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 41)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","2b803f96":"pipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","389d7af4":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","950d717b":"def predict_model(model, trainX, testX, trainY, testY):\n    m = model\n    m.fit(trainX, trainY)\n    predict_m = m.predict(testX)\n    print('-----------{}-----------'.format(model))\n    print_evaluate(testY, predict_m)","76989203":"model = [LinearRegression(), Lasso(), SVR(), DecisionTreeRegressor()]\nfor i in model:\n    predict_model(i, X_train,X_test, y_train, y_test)","cc994e24":"dct = DecisionTreeRegressor()\ndct.fit(X_train, y_train)\n\npred_dct = dct.predict(X_test)\nprint_evaluate(y_test, pred_dct)\n\ndf_dct = pd.DataFrame({'Real Values':y_test, 'Predicted Values':pred_dct})\ndf_dct.head()\n\nplt.figure(figsize=(10,8))\nplt.plot(df_dct['Real Values'].values[:50], label = 'Real Values')\nplt.plot(df_dct['Predicted Values'].values[:50], label = 'Predicted Values')\nplt.legend()\nplt.show()","245facc7":"id_data = data[data['Location'] == 'Indonesia']\nid_data.drop(['Date', 'Location', 'Longitude', 'Latitude','Location Level'], axis=1, inplace=True)","d32edf08":"id_data","9691103c":"plt.figure(figsize=(12,10))\nsns.heatmap(id_data.corr(), annot= True)","1b899b36":"id_data.drop(['Area (km2)', 'Population', 'Population Density'], axis=1, inplace=True)\nid_data.head()","17a8bb38":"X = id_data.drop('New Deaths', axis=1)\ny = id_data['New Deaths']","a12866e2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 41)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","9d49768c":"pipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","c1796d2e":"model = [LinearRegression(), Lasso(), SVR(), DecisionTreeRegressor()]\nfor i in model:\n    predict_model(i, X_train,X_test, y_train, y_test)","1cc5170f":"dct = LinearRegression()\ndct.fit(X_train, y_train)\n\npred_dct = dct.predict(X_test)\nprint_evaluate(y_test, pred_dct)\n\ndf_dct = pd.DataFrame({'Real Values':y_test, 'Predicted Values':pred_dct})\ndf_dct.head()\n\nplt.figure(figsize=(10,8))\nplt.plot(df_dct['Real Values'].values[:50], label = 'Real Values')\nplt.plot(df_dct['Predicted Values'].values[:50], label = 'Predicted Values')\nplt.legend()\nplt.show()","4fa727aa":"## COVID 19 Di DKI Jakarta","fec89d49":"## Provinsi dengan Angka Kesembuhan Terbanyak","3ea4b8d3":"Dapat dilihat bahwa grafik menunjukan keadaan yang cukup fluaktif namun ketika dari tanggal 7 ke tanggal 8 mengalami kenaikan yang sangat cukup signifikan sebanyak 38%. Selanjutnya, grafik tetap meningkat hingga ke tgl 9. Bagaimana dengan tingkat kematian serta kesembuhan pada DKI Jakarta selama kurun waktu 6 hari tsb ?","bbc1bbe4":"## Provinsi dengan Angka Kematian Terbanyak","900c321c":"# SPLIT DATA","09369c3b":"# Menggunakan location 'Indonesia' sebagai acuan data","c6b4deb7":"Pandemi telah berlangsung selama lebih dari 17 bulan di Indonesia dan hingga saat ini belum menemukan titik terang kapan pandemi akan berakhir. Jika kita lihat dari data yang telah ada sekarang apakah pandemi akan selesai sesegera mungkin ? Data ini akan memberikan gambaran apakah pandemi yang selama ini kita alami dapat terkendali atau justru sebaliknya yang kian memburuk.","1f94be66":"# PREDICT DATA","0a5d2077":"## Provinsi dengan Angka Kasus Aktif Terbanyak","91a72cee":"# EDA ","b810b6ed":"Chat diatas menjelaskan bahwa tingkat recover pada DKI Jakarta kian hari kian meningkat dan jumlah yang telah recover pada tangal 9 lebih tingg dari angka kasus baru. Namun pada angka kematian mengalami peningkatan kian harinya yang tiap harinya naik sejumlah 20-40 korban meninggal. ","51f725e7":"Chart diatas menunjukan bahwa DKI Jakarta menempati peringkat tertinggi dalam total kasus covid 19. Dibandingkan dengan peringkat 2, DKI jauh mengungguli dengan 30% jumlah kasus dari 1 tingkat dibawahnya yaitu Jawa Barat.","82dcc971":"## COVID 19 Di Jawa Timur","ca2f4c6c":"## Data Terbaru mengenai COVID 19 Hingga Tanggal 9 Juli 2021","c69269dd":"menghapus kolom dengan semua data bernilai null dan kolom yang tidak dibutuhkan","9859b8b6":"## Provinsi dengan Total Kasus Terbanyak"}}