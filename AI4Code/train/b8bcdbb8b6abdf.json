{"cell_type":{"ba2320e7":"code","247399a2":"code","664a79e2":"code","7201a2e0":"code","1f1e0c93":"code","a0f6c271":"code","8ba2b3e6":"code","20f11cdd":"code","4ce301cb":"code","cd004471":"code","afc14d32":"code","c89b852d":"code","6083897a":"code","8100b42e":"code","b0f9f016":"code","91e6147f":"code","80453f9e":"code","83ea2950":"code","58e42b8c":"code","03042129":"code","0b7fca80":"code","69160a2c":"code","22dfed31":"code","3684c5cf":"code","00818e91":"markdown","e1120ac3":"markdown","2deb1d03":"markdown","e6eebe3b":"markdown","6daf1406":"markdown"},"source":{"ba2320e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","247399a2":"import matplotlib.pyplot as plt \nfrom PIL import Image","664a79e2":"dir = '..\/input\/chest-xray-pneumonia\/chest_xray'\ntest_dir = os.path.join(dir,'test') \ntrain_dir =os.path.join(dir,'train') \nval_dir =os.path.join(dir,'val') ","7201a2e0":"categ = ['NORMAL', 'PNEUMONIA']\nfor ca in categ:\n    path = os.path.join(train_dir,ca)\n    for img in os.listdir(path):\n        img_arr =Image.open(os.path.join(path,img)) \n        arr = np.array(img_arr)\n        plt.imshow(np.array(img_arr),cmap='gray')\n        plt.show()\n        break\n    ","1f1e0c93":"img_size = 80\nnew_img = img_arr.resize((img_size,img_size))\nplt.imshow(new_img,cmap='gray')\nplt.show()","a0f6c271":"for ca in categ:\n    path = os.path.join(test_dir,ca)\n    for img in os.listdir(path):\n        img_arr =Image.open(os.path.join(path,img)) \n        print(np.array(img_arr).shape)\n        plt.imshow(img_arr,cmap='gray')\n        plt.show()\n        break\n    break","8ba2b3e6":"def creat_data(my_list,categ,my_dir):\n    img_size = 150\n    for ca in categ:\n        path = os.path.join(my_dir,ca)\n        class_num = categ.index(ca)\n        for img in os.listdir(path):\n            try:\n                img_arr =Image.open(os.path.join(path,img)) \n                new_img = img_arr.resize((img_size,img_size))\n                new_img = np.asarray(new_img)\n                arr = new_img.reshape((img_size, img_size, 1))\n                my_list.append([arr,class_num])\n            except Exception as e:\n                e = e","20f11cdd":"train_list = []\ntest_list = []\nval_list = []\ncreat_data(train_list,categ,train_dir)\nprint(len(train_list))","4ce301cb":"creat_data(test_list,categ,test_dir)\nprint(len(test_list))","cd004471":"creat_data(val_list,categ,val_dir)\nprint(len(val_list))","afc14d32":"for i in range(608):\n    ele = train_list.pop(0)\n    val_list.append(ele)","c89b852d":"print(len(train_list))\nprint(len(val_list))","6083897a":"def split_data(X,y,my_list):\n    img_size = 150\n    for fe,la in my_list:\n        X.append(fe)\n        y.append(la)\n    X = np.array(X).reshape(-1, img_size, img_size, 1)","8100b42e":"X_train = []\ny_train = []\nX_test = []\ny_test = []\nX_val = []\ny_val = []\nsplit_data(X_train, y_train, train_list)","b0f9f016":"split_data(X_test, y_test, test_list)","91e6147f":"split_data(X_val, y_val, val_list)","80453f9e":"X_train = np.asarray(X_train)\ny_train = np.asarray(y_train)\nX_test = np.asarray(X_test)\ny_test = np.asarray(y_test)\nX_val = np.asarray(X_val)\ny_val = np.asarray(y_val)","83ea2950":"X_train = X_train\/255.0\nX_test = X_test\/255.0\nX_val = X_val\/255.0","58e42b8c":"import tensorflow as tf \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D","03042129":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor = 'val_loss', patience = 10, restore_best_weights=True)","0b7fca80":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), input_shape = X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.5))\n\n\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","69160a2c":"model.compile(loss='binary_crossentropy',\n              optimizer = tf.keras.optimizers.Adam(),\n              metrics=['accuracy'])","22dfed31":"model.fit(X_train, y_train,epochs = 150, batch_size = 32, validation_data = (X_test,y_test),callbacks = [early_stop])","3684c5cf":"model.evaluate(X_val,y_val) ","00818e91":"### Increase amount of val. data","e1120ac3":"# Prepare Data","2deb1d03":"###  Load Data To List","e6eebe3b":"### Split Data  ","6daf1406":"# Building The Model"}}