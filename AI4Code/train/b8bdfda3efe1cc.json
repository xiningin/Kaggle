{"cell_type":{"8a629ad3":"code","3c706fa7":"code","28e90845":"code","06d82640":"code","aa328069":"code","318b301d":"code","44b35278":"code","f4f477bb":"code","fa7cf4d6":"code","bf16ec6d":"code","0c02275a":"code","72167e60":"code","aff6ec68":"code","46778fa6":"code","3dcef176":"code","70daa854":"code","9aafbbb0":"code","bf9a9873":"code","d055c84e":"code","82c09dcc":"code","1806c720":"markdown","48fc635e":"markdown","f6d2bf7a":"markdown","e08b8322":"markdown","32c5061a":"markdown","44bdef57":"markdown","a688556c":"markdown","126abf70":"markdown","a5125d75":"markdown","5952b49d":"markdown","06aa97aa":"markdown","bbe5cb24":"markdown","349cc349":"markdown","42861538":"markdown","1f46a465":"markdown","faeadc96":"markdown","ddb6b9d6":"markdown","85cce06f":"markdown","cd8c6435":"markdown","61098436":"markdown","fb74b87b":"markdown","f9a6a666":"markdown","8952c64b":"markdown"},"source":{"8a629ad3":"import numpy as np\nimport pandas as pd\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import LabelEncoder\nfrom IPython.core.display import display, HTML\nimport ipywidgets\n\n# Seed for random number generation...\n# Set to None to seed the random number\n# generator with a random seed...\nSEED = 12903614\n\n# Colorblindness friendly colours...\n# It is important to make our work\n# as accessible as possible...\nCOLORMAP = [\"#005AB5\", \"#DC3220\"]\n\n# Template settings for plotly...\nlayout_axis = dict(\n    mirror=True,\n    ticks=\"outside\",\n    showline=True,\n    title_standoff = 5,\n    showgrid = True,\n)\npio.templates[\"DrJohnWagner\"] = go.layout.Template(\n    layout_xaxis = layout_axis,\n    layout_yaxis = layout_axis,\n    layout_title_font_size = 18,\n    layout_font_size = 16,\n)\npio.templates.default = \"simple_white+DrJohnWagner\"","3c706fa7":"# Loading the data from the csv file...\ndf = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\ndf.head()","28e90845":"# Fix the egregious column naming error...\ndf = df.rename(columns = {\"ST_Slope\": \"STSlope\", \"Oldpeak\": \"OldPeak\"})\n\n# Always test these things...\nassert len(df[\"STSlope\"]) > 0, \"Ruh roh! ST_Slope is still terribly mistaken!\"\nassert len(df[\"OldPeak\"]) > 0, \"Ruh roh! Oldpeak is still terribly mistaken!\"\n\ndf.head()","06d82640":"# Break the columns into two groupings...\ncategorical_columns = [column for column in df.columns if df[column].dtypes =='O']\nnumerical_columns = [column for column in df.columns if df[column].dtypes != 'O']\n\n# Now that we've got the column names fixed\n# let's define some labels for later...\nLABELS = {\n    \"Sex\": \"Sex\",\n    \"Age\": \"Age\",\n    \"MaxHR\": \"Max HR\",\n    \"OldPeak\": \"Old Peak\",\n    \"STSlope\": \"ST Slope\",\n    \"RestingBP\": \"Rest. BP\",\n    \"FastingBS\": \"Fast. BS\",\n    \"RestingECG\": \"Rest. ECG\",\n    \"Cholesterol\": \"Cholesterol\",\n    \"HeartDisease\": \"Heart Disease\",\n    \"ChestPainType\": \"Chest Pain\",\n    \"ExerciseAngina\": \"Ex. Angina\",\n    # For playing with classes...\n    \"AgeClass\": \"Age Class\",\n    \"CholesterolClass\": \"Cholesterol Class\",\n    \"RestingBPClass\": \"Resting BP Class\",\n}","aa328069":"display(df.iloc[0:2, :][numerical_columns])","318b301d":"# We will make a lot of parallel coordinates plots\n# so let's wrap the calls in a simple function that\n# creates a plotly.graph_objects.Parcoords object\n# to display our data in parallel coordinates...\ndef create_parallel_coordinates_plot(df, color, columns):\n    return go.Parcoords(\n        dimensions = list([\n            dict(\n                values = df[column],\n                label = LABELS[column],\n                name = column,\n            ) for column in columns\n        ]),\n        line = dict(\n            color = df[\"HeartDisease\"],\n            colorscale = COLORMAP,\n            showscale = False\n        ),\n        labelfont = dict( size = 16 ),\n        tickfont = dict( size = 16 ),\n    )\n\ndef create_layout(title):\n    return go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5,\n            xanchor = \"center\"\n        )\n    )\n\n# Wrap the plotly.graph_objects.Parcoords object\n# in a plotly.graph_objects.Figure object...\nfig_one = go.Figure(\n    create_parallel_coordinates_plot(\n        df.iloc[0:2, :], \"HeartDisease\", numerical_columns\n    ),\n    layout = create_layout(\"Parallel Coordinates Plot of Patients One and Two\"),\n)\n# And show() the figure!\nfig_one.show()\n","44b35278":"# Plot the numerical columns of the dataset\n# colour coded by HeartDisease with red = true...\n# Plot every other row starting at one to\n# reduce data for better visibility...\nfig_two = go.Figure(\n    create_parallel_coordinates_plot(\n        df.iloc[1::2, :], \"HeartDisease\", numerical_columns\n    ),\n    layout = create_layout(\"Parallel Coordinates Plot of Odd Numbered Patients\"),\n)\n\n# Show the plot!\nfig_two.show()\n","f4f477bb":"def set_column_value_to_normal_distribution(df, column, value):\n    # Compute the column's mean and standard deviation\n    # after removing rows whose column matches value...\n    mean_value = df[df[column] != value][column].mean()\n    std_value  = df[df[column] != value][column].std()\n    # Create a random number generator...\n    rng = np.random.default_rng(SEED)\n    # Now set the column of those rows to a\n    # random sample from a normal distribution...\n    df[column] = df[column].apply(\n        lambda x : rng.normal(mean_value, std_value) if x == value else x\n    )\n    return df\n\ndf = set_column_value_to_normal_distribution(df, \"RestingBP\"  , 0)\ndf = set_column_value_to_normal_distribution(df, \"Cholesterol\", 0)\n\n# Always test...\nassert len(df[df[\"RestingBP\"  ] == 0]) == 0, \"Ruh roh! One or more patients has crashed again!\"\nassert len(df[df[\"Cholesterol\"] == 0]) == 0, \"Ruh roh! One or more patients has crashed again!\"","fa7cf4d6":"# Let's shuffle the data to ensure\n# we get a random selection of data\ndf = shuffle(df)\n\n# Regenerate the figure...\nfig_three = go.Figure(\n    create_parallel_coordinates_plot(\n        df.iloc[1::2, :], \"HeartDisease\", numerical_columns\n    ),\n    layout = create_layout(\"Parallel Coordinates Plot of Odd Numbered Patients Redux\"),\n)\n\n# And show and tell time!\nfig_three.show()","bf16ec6d":"from plotly.subplots import make_subplots\n\ndef create_histogram_plot(df, heart_disease, column, name):\n    return go.Histogram(\n        x = df[df[\"HeartDisease\"] == heart_disease][column],\n        name = name,\n        marker_color = COLORMAP[heart_disease],\n        xbins = dict(\n            start = int(np.min(df[column])) - 0.5,\n            end   = int(np.max(df[column])) + 0.5,\n            size = 1.0\n        )\n    )\n\nfig_four_bp = go.Figure(\n    layout = create_layout(\"Histogram of Resting Blood Pressure\"),\n)\nfig_four_bp.add_trace(\n    create_histogram_plot(df, 0, \"RestingBP\", \"Heart Disease Absent\")\n)\nfig_four_bp.add_trace(\n    create_histogram_plot(df, 1, \"RestingBP\", \"Heart Disease Present\")\n)\n\nmin_bp, max_bp = int(np.min(df[\"RestingBP\"])), int(np.max(df[\"RestingBP\"]))\nfig_four_bp.update_layout(\n    barmode = \"stack\",\n    xaxis_tickvals = np.arange(min_bp, max_bp + 1, 10),\n    xaxis_title_text = \"Resting Systolic Blood Pressure (mm Hg)\",\n    yaxis_title_text = \"Number of Patients\",\n    legend = dict(\n        orientation = \"h\", yanchor = \"bottom\", y = 1.02, xanchor = \"center\", x = 0.5\n    )\n)\n\n# Show the plot!\nfig_four_bp.show()","0c02275a":"from plotly.subplots import make_subplots\n\nfig_four_hr = go.Figure(\n    layout = create_layout(\"Histogram of Maximum Heart Rate\"),\n)\nfig_four_hr.add_trace(\n    create_histogram_plot(df, 0, \"MaxHR\", \"Heart Disease Absent\")\n)\nfig_four_hr.add_trace(\n    create_histogram_plot(df, 1, \"MaxHR\", \"Heart Disease Present\")\n)\n\nmin_hr, max_hr = int(np.min(df[\"MaxHR\"])), int(np.max(df[\"MaxHR\"]))\nfig_four_hr.update_layout(\n    barmode = \"stack\",\n    xaxis_tickvals = np.arange(min_hr, max_hr + 1, 10),\n    xaxis_title_text = \"Maximum Heart Rate (per minute)\",\n    yaxis_title_text = \"Number of Patients\",\n    legend = dict(\n        orientation = \"h\", yanchor = \"bottom\", y = 1.02, xanchor = \"center\", x = 0.5\n    )\n)\n\n# Show the plot!\nfig_four_hr.show()","72167e60":"# Let's move FastingBS from numerical_columns\n# to categorical_columns and add HeartDisease\n# to categorical_columns...\nif \"FastingBS\" not in categorical_columns:\n    categorical_columns.append(\"FastingBS\")\nif \"HeartDisease\" not in categorical_columns:\n    categorical_columns.append(\"HeartDisease\")\nif \"FastingBS\" in numerical_columns:\n    numerical_columns.remove(\"FastingBS\")\n\nassert \"FastingBS\" not in numerical_columns, \"FastingBS not removed from numerical columns...\"\nassert \"FastingBS\" in categorical_columns, \"FastingBS not added to categorical columns...\"\nassert \"HeartDisease\" in categorical_columns, \"HeartDisease not added to categorical columns...\"","aff6ec68":"df_copy = df.copy()\nlabel_encoder = LabelEncoder()\nfor column in [\"Sex\", \"ChestPainType\", \"RestingECG\", \"ExerciseAngina\", \"STSlope\"]:\n    df_copy[column] = label_encoder.fit_transform(df_copy[column])\n\nfig_five = go.Figure(\n    create_parallel_coordinates_plot(\n        df_copy[1::2], \"HeartDisease\", list(df_copy)\n    ),\n    layout = create_layout(\"Parallel Coordinates Plot of Odd Numbered Patients With Categorical Variables\"),\n)\n\n# Show the plot!\nfig_five.show()","46778fa6":"# We will make a lot of parallel categories plots\n# so let's wrap the calls in a simple function...\ndef create_parallel_categoriess_plot(df, color, columns, labels = LABELS):\n    return go.Parcats(\n        line = dict(color = df['HeartDisease'], colorscale = COLORMAP, showscale = False),\n        dimensions = list([\n            dict(\n                label = labels[column],\n                values = df[column],\n                categoryorder = \"category ascending\"\n            ) for column in columns\n        ]),\n        labelfont = dict( size = 16 ),\n        tickfont = dict( size = 16 ),\n    )\n\nfig_six = go.Figure(\n    create_parallel_categoriess_plot(df, \"HeartDisease\", categorical_columns),\n    layout = create_layout(\"Parallel Categories Plot of All Patients\"),\n)\n\n# Show the plot!\nfig_six.show()","3dcef176":"fig_seven = go.Figure(\n    create_parallel_categoriess_plot(\n        df, \"HeartDisease\", [\"Age\"] + categorical_columns\n    ),\n    layout = create_layout(\"Parallel Categories Plot of All Patients and Age\"),\n)\n\n# Show the plot!\nfig_seven.show()","70daa854":"def create_categories_from_values(df, column, resolution = 10, offset = 0):\n    return df[column].apply(\n        lambda x : str(\n            int(resolution*((x - offset) \/\/ resolution) + offset)\n        ) + \" - \" + str(\n            int(resolution*(1 + (x - offset) \/\/ resolution) + offset)\n        )\n    )\n\ndf_copy = df.copy()\ndf_copy[\"AgeClass\" ] = create_categories_from_values(df_copy, \"Age\", 10, 5)\n\nfig_eight = go.Figure(\n    create_parallel_categoriess_plot(\n        df_copy, \"HeartDisease\", [\"AgeClass\"] + categorical_columns\n    ),\n    layout = create_layout(\"Parallel Categories Plot of All Patients and Age Classes\"),\n)\n\n# Turn off the colorbar...it's useless...\nfig_eight.update_layout(coloraxis_showscale = False)\n# fig.update_layout(yaxis_autorange = \"reversed\")\n# fig['layout']['yaxis']['autorange'] = \"reversed\"\n# Show the plot!\nfig_eight.show()","9aafbbb0":"df_copy[\"CholesterolClass\" ] = create_categories_from_values(df_copy, \"Cholesterol\", 50, 0)\ndf_copy[\"RestingBPClass\" ] = create_categories_from_values(df_copy, \"RestingBP\", 10, 5)\n\nfig_nine = go.Figure(\n    create_parallel_categoriess_plot(\n        df_copy, \"HeartDisease\", [\"AgeClass\", \"CholesterolClass\", \"RestingBPClass\"] + categorical_columns\n    ),\n    layout = create_layout(\"Parallel Categories Plot of All Patients and Age, Cholesterol and RestingBP Classes\"),\n)\n\n# Turn off the colorbar...it's useless...\nfig_nine.update_layout(coloraxis_showscale = False)\n# fig.update_layout(yaxis_autorange = \"reversed\")\n# fig['layout']['yaxis']['autorange'] = \"reversed\"\n# Show the plot!\nfig_nine.show()","bf9a9873":"categorical_columns.remove(\"HeartDisease\")\ncategorical_columns = [\"HeartDisease\"] + categorical_columns\nnumerical_columns.remove(\"Age\")\nnumerical_columns.remove(\"HeartDisease\")\nnumerical_columns = numerical_columns + [\"Age\", \"HeartDisease\"]","d055c84e":"# Forgive the use of ipywidgets for laying out\n# figures side by side...it's the only way.\ndef update_layout(fig, left = 20, right = 40, width = 650):\n    fig.update_layout(\n        margin = dict(l = left, r = right),\n        autosize = False,\n        width = width,\n        height = 650,\n    )\n    return fig\n\noutput_left = ipywidgets.Output()\nwith output_left:\n    fig_ten = go.Figure(\n        create_parallel_categoriess_plot(df, \"HeartDisease\", categorical_columns),\n        layout = create_layout(\"Parallel Categories Plot of All Patients Final\"),\n    )\n    fig_ten = update_layout(fig_ten, 5, 0, 650)\n    # Show the plot!\n    fig_ten.show()\n    \noutput_right = ipywidgets.Output()\nwith output_right:\n    fig_eleven = go.Figure(\n        create_parallel_coordinates_plot(df, \"HeartDisease\", numerical_columns),\n        layout = create_layout(\"Parallel Coordinates Plot of All Patients Final\"),\n    )\n    fig_eleven = update_layout(fig_eleven, 40, 60, 600)\n    # Show the plot!\n    fig_eleven.show()\n\nipywidgets.HBox([output_left, output_right], layout = ipywidgets.Layout(width = \"1600px\", flex_flow = \"row wrap\"))\n","82c09dcc":"fig_twelve = go.Figure(\n    create_parallel_categoriess_plot(df, \"HeartDisease\", categorical_columns),\n    layout = create_layout(\"Parallel Categories Plot of All Patients Final\"),\n)\n\n# Show the plot!\nfig_twelve.show()\n\nfig_thirteen = go.Figure(\n    create_parallel_coordinates_plot(df, \"HeartDisease\", numerical_columns),\n    layout = create_layout(\"Parallel Coordinates Plot of All Patients Final\"),\n)\n\n# Show the plot!\nfig_thirteen.show()","1806c720":"Note that the first patient does not have heart disease, but the second does, and that while the two share the same fasting blood sugar (`FastingBS`) value, all of their other vitals are different. Thus they will appear very different on almost any plot. That's perfect for getting a feel for parallel coordinates!\n\nAlso, neither of these patients has lupus. Jus' sayin'.\n\n>> **Foreman:** *You stash your drugs in a lupus textbook.*  \n>> **House:** *It's never lupus.*\n>\n> *Finding Judas*, **House**, Season 3, Episode 9\n\nThat's right. It's never lupus.\n\nMoving on...this is what those two sets of vitals look like plotted in parallel coordinates:","48fc635e":"Parallel category plots \"spread out\" the polylines while also grouping records with similar categorical values. That reminds me...\n\n>>There may be said to be two classes of people in the world; those who constantly divide the people of the world into two classes, and those who do not.\n>\n> Robert Benchley\n\nBut wait! There's more!\n\nAgain, plotly plots are interactive, and parallel category plots are no exception, though their interactions differ from parallel coordinate plots: you can hover! Hover over the categories on each axis. Then hover over the polilines between axes. You'll see groups of polylines--that is, groups of patient records--highlighted. This is extremely useful, and reminiscent of decision tree representations of data.","f6d2bf7a":"Noice!\n\n>> Look! It's moving. It's alive. It's alive...it's alive, it's moving, it's alive, it's alive, it's alive, it's alive, IT'S ALIVE!\n>\n> Henry Frankenstein, Frankenstein, 1931\n\nYessssss! Bolstered by this sucess, let's keep going. Let's add `Cholesterol` and `RestingBP` next.\n\nBut before we do, check out how many men--and how few women--between the ages of 65 and 75 have heart disease. SMH\n\nMoving on...adding `Cholesterol` and `RestingBP`...","e08b8322":">> The patient says, \"Doctor, it hurts when I do this.\"  \n>> The doctor says, \"Then don't do that!\u201d\n>\n> Henny Youngman\n\nDo you notice anything different about the columns `ST_Slope` and `Oldpeak`? This is an egregious naming faux pas that is simply confusing and will cause errors over and over again by you and anyone else who uses your data or code.\n\n<div class=\"alert alert-block alert-warning\">\nIt hurts when people do that. So don't do that!\n<\/div>\n\nLet's fix that immediately so that it doesn't propagate. We'll change them to column names consistent with the others: `STSlope` and `OldPeak`.","32c5061a":"And there you have it. All of the columns in the dataset displayed in one (er, one, two-in-one) interactive visualisation.\n\nThank you for attending my TED Talk.\n\nQuestions? Comments? Threats? Funny anecdotes? Bitingly sarcastic remarks? Clever observations? Ad hominem attacks? Throw them in the comments!","44bdef57":"## Everybody Lies\n\n>> **House:** *It's a basic truth of the human condition that everybody lies. The only variable is about what.*\n>\n> **Three Stories**, *House*, Season 1, Episode 21\n\nLet's see what we can quickly and easily learn about our patients from this one plot:\n1. The majority of patients with heart disease are between the ages of 50 and 65. This is because heart disease tends to occur and be diagnosed by about age 50 and, unfortunately, often starts leading to death around age of 65. That said, old age does not seem to be as strongly discriminating as younger age.\n1. The mean OldPeak value for patients with heart disease is probably lower than the mean OldPeak value for patients with no heart disease. I also see something similar for MaxHR.\n1. About half(?) of patients with heart disease have a fasting blood sugar value of 1, but most patients who do not have heart disease have a fasting blood sugar value of 0.\n1. I see something that I am very familiar with after many years analysing health data...  \nMy blood pressure is extremely stable. It is almost always 106 mm Hg systolic unless I've been doing something to raise it, like walking or exercising or chasing my cat around the house. But if you look in my health records, you'll conclude that it is very consistently 110 mm Hg. But the proper conclusion is that my doctor is lazy when recording my blood pressure. It's somehow easier to write 110 than 106, I guess,  \nBut then again, 4 mm Hg doesn't make that much of a difference. And my doctor knows that.  \nIn any case, you can easily see from the parallel coordinates plot that blood pressure is often rounded off to the nearest 10 mm Hg. We'll look at this next.\n\nNote that plotly plots are interactive, and in the caase of parallel coordinate plots, you can do something really useful from a data exploration standpoint: click on any axis, hold the mouse down while you drag (you'll see a thick pink line appear) and then release. The pink line is a slider. Slide it up and down. See what happens? This constraint (plotly calls them constraints) acts like a filter, or data selector. You can create as many constraints on as many axes as you like, even multiple constraints on a single axis. When you're done with a constraint, just click on it and it will disappear. Go ahead and play with them.\n\nMoving on...just as an aside, let's examine that last point above:","a688556c":"But again...\n\n>> The patient says, \"Doctor, it hurts when I do this.\"  \n>> The doctor says, \"Then don't do that!\u201d\n>\n> Henny Youngman\n\nThe problem is that the vertices of polylines going through categorical values are all plotted on top of each other, making it impossible to see the *distributions of values* on categorical axes. Put another way, you can't visually follow polylines through categorical axes. This is even more problematic when you have two categorical axes next to each other, for example `Sex` and `ChestPainType`; `FastingBS` and `RestingECG`; and`STSlope` and `HeartDisease`.\n\nFortunately, there is a different way of plotting polylines with categorical variables: parallel category plots. Let's take a look:","126abf70":"## Code Blue! Get the crash cart!\n\nNow we're cooking with gas! Oh. Wait. We're Gregory House. Um...now we're diagnosing with technology? Moving on...\n\nThe first thing we see--immediately--is that a number of our patients are dead due to extremely low blood pressure (one polyline intersects the `RestingBP` axis at 0) and\/or cholesterol (a few dozen polylines intersect the `Cholesterol` axis at 0).\n\n>> **Cox:** *I actually had my physical last week, and while my cholesterol was low, my blood pressure was through the roof. Needless to say, my physician was stumped. But now, thank God, you've helped to solve that riddle, because the instant I heard your shrill voice whining about a \"teeny-weeny problem,\" oh, it took every ounce of self-restraint I had to keep blood from shooting out my ears.*  \n>> **Elliot:** *Doesn't it seem like in the time that it took you to say all that, you could have just helped me instead?*  \n>> **Dr. Cox:** *Well, yes, it does, but here, that's what makes it delicious.*\n>\n> *My First Step*, **Scrubs**, Season 2, Episode 7\n\nI guess the problem could be blood shooting out of their ears, but more likely these values are simply this dataset's way of recording missing values.\n\nRather than calling the medical examiner to transport them to the morgue, let's get the crash cart (STAT!) and bring their values up.\n\nWe will set those values to random samples drawn from a uniform distribution approximating the rest of the values in those columns:","a5125d75":"Now that we have dealt with these \"missing values\" and our patients are stable again, let's get another set of vitals.","5952b49d":"This sort of works but not well. There are simply too many classes, and decreasing the numbers makes the classes less informative. Moreover, the more dimensions we add, the smaller the groups of patients that are clustered together. Non-uniform classes would help here, like combining all `Cholesterol` values between 300 and 650 into a single class, and all `RestingBP` values less than 105 into one class, and all values above 165 into another. But the limitations of this approach should be clear. Do when it works, but don't expect it to work very often.\n\n>> The key to happiness in life is low expectations.\n>\n> You guessed it. Me.\n\nNext let's move some columns around so that in what comes next we don't have to specify the order they should be drawn in, since plotly orders axes in dataframe column order:","06aa97aa":"## Parallel Coordinates: The Postmortem\n\nWell, as the old joke goes, the surgery was a success but the patient died.\n\nIf you are viewing this in preview mode on Kaggle, then the Mother Of All Parallel Coordinates Visualisations, which may or may not be displaed above, was a success but may have died in preview mode. A service will be held in the Kaggle chapel on Saturday afternoon. We ask that donations be sent to World Heart Foundation in the name of The Mother Of All Parallel Coordinates Visualisations.\n\nIf, however, you open this notebook and run it, the visualisation above should be resuscitated and display properly. The issue is that The Mother Of All Parallel Coordinates Visualisations is about 1600 pixels wide (their physician recommended diet and exercise, but did they listen? Nnnooo...I mean, who listens to their physician?) and Kaggle's previewer simply can't display anything that wide. It could also be that Kaggle's preview mode can't handle the `ipywidgets.HBox` used to display two `plotly` plots side by side. Either way, the surgery was a success but the patient died.\n\nHowever, if you have a litle imagination, and can mentally transpose two vertically arranged plots, you can still experience The Mother Of All Parallel COordinates Visualisation here...provided it does not also fail to display:","bbe5cb24":"In this plot, the lines are coloured by the value of `HeartDisease`. As a result, the first patient is represented by the blue polyline, which intersects the `HeartDisease` axis at 0 (no heart disease), the `OldPeak` axis at 0, the `MaxHeartRate` axis at 172 and so forth. Conversely, the second patient is represented by the red polyline, which intersects the `HeartDisease` axis at 1 (has heart disease), the `OldPeak` axis at 1, the `MaxHeartRate` axis at 156 and so on. Note that both patients have the value 0 for `FastingBS`, but do not share any other values.\n\nTo convince yourself you understand parallel coordinate plots now, compare the values where these two polylines intersect each of these axes with the values in the two patient records above.\n\nNow let's look at a parallel coordinates plot of every other patient (to reduce the clutter) starting with the second patient, with datapoints again coloured by `HeartDisease`:","349cc349":"## Time to examine the patients!\nIs exam room one open? Let's wheel these patients in there and have a look.\n\nWith the column names fixed, we now have 12 consistently named data columns, including 5 categorical columns (`Sex`, `ChestPainType`, `RestingECG`, `ExerciseAngina`, and `STSlope`) and 7 numerical columns (`Age`, `RestingBP`, `Cholesterol`, `FastingBS`, `MaxHR`, `OldPeak`, and `HeartDiseases`).\n\nNote, however, that the numerical columns `FastingBS` and `HeartDisease` are numerical columns with small numbers (two) of discrete values. As a result, we may treat them as both categorical and numerical.\n\nNow I know what you're thinking. Fasting blood sugar is a glucose test that measures the levels of sugar (typically in mg\/dl) in your blood after fasting overnight. Why isn't it a float? Good question. I was going to cover what some of these measures are and why they're important, but [Duncan McKinnon](https:\/\/www.kaggle.com\/duncankmckinnon) has already done that: [Explanation of ECG Attributes in Data](https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci\/discussion\/151898).\n\nMoving on...let's extract the categorical and numerical columns, as they will come in handy later. We will also define some labels for plots. Note that some of the columns will be displayed in abbreviated form, e.g. \"Chest Pain\" instead of \"Chest Pain Type\".","42861538":"Moving on...\n\nSee how much you can learn about a dataset from a parallel coordinates plot? Try doing that examining one or two columns at a time with bar charts or scatter plots!\n\nNow before we forget, let's treat `FastingBS` as a categorical column, and while we're at it, let's add `HeartDisease` to the categorical columns list.","1f46a465":"Clearly there is a rounding tendency (read: bias) when recording blood pressures and the effect is larger for patients with heart disease. This is no surprise. If you work with health data regularly you'll see this over and over again and quickly come to realise blood pressure values are extremely imprecise and unreliable.\n\nEither that or a lot of people were injured by turles.\n\n>> According to hospital insurance codes, there are 9 different ways you can be injured by turtles.\n>\n> Wall Street Journal\n\nSo a word to the wise (health data scientist): if you build a model whose power depends heavily on blood pressure, espeically small differences in blood pressure, you're probably doing something wrong.\n\nAs [Davina](https:\/\/www.kaggle.com\/daviniagun) pointed out in the notebook [Heart Failure Machine Learning](https:\/\/www.kaggle.com\/daviniagun\/heart-failure-machine-learning) this also happens with heart rate:","faeadc96":"## <center> Parallel Coordinates in Heart Disease Prediction","ddb6b9d6":"And now, without further ado--and brilliantly funny, perfectly selected, medically related quotes--we generate our final parallel coordinates visualisation...the Mother Of All Parallel Coordinates Visualisations...","85cce06f":"## You\u2019re Very Sick!\n\nAs an aside, you might be tempted to ask, \"I understand we can't add categorical values to a parallel coordinates plot without converting them to numerical values, and I understand why that's generally not very useful, but could we maybe add numerical values to parallel category plots? After all, we did that for FastingBS, though really it was only technically a numerical value...but isn't it worth a try?\"\n\nGood question! Let's find out! `Age` is a numerical value that can easily be thought of as a category. Let's try that:","cd8c6435":"I am new to Kaggle--though not to data science--and as a result I've been perusing competitions, datasets and a fair number of notebooks for a few weeks now and thought it was about time to jump in and get my feet wet with a notebook of my own.\n\nOne thing I've noticed is that not that many people seem to use parallel coordinate plots in their data exploration and visualisations. Since I've been a big fan of parallel coordinates ever since I met Alfred Inselberg back in the late 1980s, around the time he began popularising them, I thought I might use that as a backdrop for my first notebook. This is where that led.\n\nAlso, I have a passion for solving puzzles, especially in healthcare and life sciences...\n\n>> **Daniel:** *You want to talk hypocrisy; What about you? You act like you don't care about anyone, but here you are, saving lives.*  \n>> **House:** *Solving Puzzles. Saving lives is just collateral damages.*\n>\n> *Unfaithful*, **House**, Season 5, Episode 15\n\nSo I thought I'd incorporate a bit of a medical show inspired theme. Just for fun. I hope you enjoy.\n\nNB: I had hoped to include some medical show memes and so forth, but quickly ran out of space and had to downsize on the images to preserve room for the code and visualisations. But I hope you have fun with what remains!","61098436":"## In a world full of Richard Webbers be Cristina Yang\nLet's get a quick overview of all of the patients on the ward.\n\n>> **Richard:** *What do we need to know in order to do our jobs and not simply be mechanics?*  \n>> **Owen:** *How are we...we're not being mechanics!*  \n>> **Richard:** *You're treating this patient like a sack of organs on a table.*  \n>\n> *The Room Where It Happens*, **Grey's Anatomy**, Season 13, Episode 8\n\nNow if this were Grey's Anatomy, some of you might think of yourselves as Richard Webber: brilliant, talented and respected but accustomed to playing by the rules, medically speaking. As a result, you might be inclined to follow standard medical practice and throw the patients' vitals into `matplotlib` bar charts, scatter plots, heatmaps, etc.\n\nNow this isn't Grey's Anatomy, and we're not Richard Webber, but if it were, I'd rather be Cristina Yang. She's a doctor doctor! PhD from Berkeley. MD from Stanford. And a Smith grad to boot. And she likes to break the rules. Sure, she's arrogant and condescending--and has the *worst* bedside manner--but Cristina would never waste her time with `matplotlb` or bar charts. No way! She'd pour a glass of wine, roll up her sleeves, `pip install plotly` and start coding up something a little less conventional: a parallel coordinates plot.\n\nParallel coordinate plots allow us to plot all of our patients and (numerical) columns on one plot. Unlike Cartesian coordinate plots, where coordinate axes are perpendicular to one another, in parallel coordinate plots the coordinate axes are placed in parallel. And datapoints, which would be represented as points in Cartesian coordinates, are represented as polylines in parallel coordinates with vertices on the parallel axes.\n\nWe begin by examining the numerical columns of our first two patients:","fb74b87b":"## Get the EEG, the BP monitor, and the AVV.\n\n>> **Obstetrician 1:** *Get the EEG, the BP monitor, and the AVV.*  \n>> **Obstetrician 2:** *And get the machine that goes 'ping!'.*  \n>> **Obstetrician 1:** *And get the most expensive machine - in case the Administrator comes.*\n>\n> *The Meaning of Life*, Monty Python\n\nNow, what about categorical columns? Why can't we plot them in a parallel coordinates plot?\n\nThat's a fair question but one with an easy answer: we can, we just have to convert the categorical values to numbers. We could probably even add in the EEG, the BP monitor and the AVV if we wanted.\n\nBut as we might guess based upon `FastingBS`, parallel coordinate plots with (many) axes with small numbers of discrete values are often difficult to interpret.\n\nLet's take a look:","f9a6a666":"## Bring in the patients!\n\n>> **Foreman:** *OK, we can all stare at each other, or we can investigate what caused the heart failure. Just the heart failure.*\n>\n> *Safe*, **House**, Season 2, Episode 16\n\nOK, let's stop staring and dig right in! Time to open the patient files!","8952c64b":"Ruh roh!\n\n>> Doctor to patient: \u201cYou\u2019re very sick! I like that in a patient.\u201d\n>\n> P.C. Vey\n\nThis plot is quite sick, but nobody likes that in a data visualisation. And I trust you can diagnose the problem. The problem is that parallel category plots don't scale well to large numbers of categories. Sure, the labels are a mess, but that can be dealth with to a large extent by turning them off and relying on hovering to supply the missing labels. The real problem is that they lose their ability to group records.\n\nBut that's not the only way to turn `Age` into a categorical variable. Let's try age classes instead:"}}