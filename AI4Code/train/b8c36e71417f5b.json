{"cell_type":{"7284499f":"code","3e416536":"code","5068318b":"code","0a3d0293":"code","effda5ad":"code","60a24245":"code","0f580963":"code","ba78cb81":"code","efa432ff":"code","3bd3e704":"code","d6c1b141":"code","6b5ee019":"code","f3b59573":"code","eea47a16":"code","01346eaa":"code","5dc4af59":"code","390de8a7":"code","7198c465":"code","c0961da8":"code","3b28115e":"code","d600d501":"code","f55259c4":"code","dc0eeb41":"code","0bbd6180":"code","27b8131d":"code","2582fe5a":"code","4ba38acb":"code","5ee018cb":"code","5014a844":"code","a3feb126":"code","32505fb7":"code","c5cd8d8b":"code","ccc56564":"code","4ec1389a":"code","485207df":"code","5cf132aa":"code","1a9abc64":"code","d3aa4a61":"code","f4b702dc":"code","61fd428e":"code","0873ec73":"code","d5165fd1":"code","60891fa8":"code","f42b43c2":"code","3a9b4ffd":"code","c44c6d24":"code","3b84d397":"code","9e0e81cf":"code","e826a62f":"code","9e70ffa5":"code","32158054":"code","c6c0d83a":"code","69c5d7e6":"code","122912f1":"code","5cfb68c5":"code","8fb51efb":"code","1b63ada0":"code","f1c3086d":"code","23f592e9":"code","2ca00f3c":"code","723802a9":"code","4c8579ca":"code","f73052ba":"code","faf40b28":"code","c60a6c1e":"code","f9451974":"code","47b63b35":"code","5e22d80c":"code","aa0a5b96":"code","eb7481c5":"code","9f84fff9":"code","d210c47e":"code","b44c1a38":"code","b8f3405d":"code","e8a0c1e0":"code","6a3822bf":"code","2d5d39ff":"code","82a61d56":"code","db68bbcc":"code","42b8cde1":"code","ce7043b9":"code","cac7afd8":"code","fb168943":"code","fb763ae7":"code","64ff0c58":"code","9725915e":"code","bb9bf454":"code","f40211a1":"code","bddfe4fd":"code","657e77bc":"code","776cfcc0":"code","8277b905":"code","401e573f":"code","21a15e88":"code","ea7d4d0d":"code","e8c3e338":"code","7979335c":"code","d041e0b8":"code","6f2e8363":"code","ef3dd841":"code","2e853a7c":"code","e3c7fd53":"code","9c9c2683":"code","da3aea26":"markdown","2f4a7d14":"markdown","4494394b":"markdown","3458e1dd":"markdown","581b9115":"markdown","a42beb8c":"markdown","5b121743":"markdown","6f2be4a8":"markdown","ebb5ece5":"markdown","1c0e9add":"markdown","c043e81d":"markdown","6c4a347a":"markdown","f70f8917":"markdown","77f2341d":"markdown","0c74ad95":"markdown","52009465":"markdown","22c445d7":"markdown","10105d38":"markdown","097f41b1":"markdown","1266d861":"markdown","9f5b66eb":"markdown","bdd25c86":"markdown","403948f9":"markdown","7b736c39":"markdown","8d18b362":"markdown","29535fce":"markdown","663bd308":"markdown"},"source":{"7284499f":"# import libraries\nfrom bs4 import BeautifulSoup\nfrom urllib import request\nimport time\nimport random\nimport numpy as np\nimport pandas as pd\nimport re","3e416536":"# creat file and write headers\nfilename = \"newegg_desktop_pageN.csv\"\nf = open(filename, \"w\", encoding='utf-8')\nheaders = \"Brand,Core,Ram,HDD,SSD,Graphics,Price,Detail \\n\"\nf.write(headers)","5068318b":"# Get HDD informations function\ndef getHDD(container):\n    product_detail = list(container.children)[3].img[\"alt\"]\n    p = [r\"\\d+\\s?\\w+\\s?HDD\", r\"\\d+\\w+\\s?HDD\", r\"\\d+TB\\s?\\w?\\s?SSHD\", r\"\\d+TB\\s?.+\\sRPM\"]\n    for i in p:\n        findhdd = re.search(i, product_detail)\n        if findhdd != None:\n            break\n        else:\n            continue\n\n    if findhdd != None:\n        hdd = findhdd.group()\n    else:\n        hdd = \"\"\n\n    return hdd\n","0a3d0293":"# Get Core informations function\ndef getcore(container):\n    product_detail = list(container.children)[3].img[\"alt\"]\n    findcore = re.search(r\"\\d.\\d+\\sGHz\", product_detail)\n    if findcore != None:\n        core = findcore.group()\n    else:\n        findcore = re.search(r\"\\d.\\d+GHz\", product_detail)\n        if findcore != None:\n            core = findcore.group()\n        else:\n            core = \"\"\n    return core\n","effda5ad":"# Get Ram informations function\ndef getram(container):\n    product_detail = list(container.children)[3].img[\"alt\"]\n    findram = re.search(r\"\\d+\\s?GB\\s?DDR\\d\", product_detail)\n    if findram == None:\n        ram = \"\"\n\n    else:\n        ram = findram.group()\n    return ram\n","60a24245":"# Get SSD informations function\ndef getSSD(container):\n    product_detail = list(container.children)[3].img['alt']\n    p = [r'\\d+GB\\s\\w+\\sSSD', \n         r'\\d+\\s?\\w+\\s?SSD', \n         r'\\d+\\w+\\s?SSD',\n         r'\\d+TB\\s?\\w?\\s?SSD',\n         r'\\d+TB\\s?\\w+\\s?SSD',\n         r'x \\d+\\s?GB',\n         r'\\d+\\sGB\\s+\\S+\\s+SSD',\n         r'\\d+\\sGB\\s+\\S+\\s+\\S+\\s+SSD',\n         r'\\d+\\sGB\\s+\\S+\\s+\\S+\\s+\\S+\\s+SSD',\n         r'\\d+GB\\s+\\SSD',\n        r'\\d+GB\\s+\\S+\\sSSD']\n    for i in p:\n        findssd = re.search(i,product_detail)\n        if findssd != None:\n            break\n        else:\n            continue\n            \n    if findssd != None:\n        ssd = findssd.group()\n    else:\n        ssd = ''\n        \n    return ssd","0f580963":"# Get Graphics informations function\ndef getgraphics(container):\n    product_detail = list(container.children)[3].img['alt']\n    findgraphics = re.search(r'(NVIDIA|AMD)\\s?\\w+\\s?\\w+\\s\\d+',product_detail)\n    \n    p = [r'Radeon RX Vega\\s\\S+',\n         r'(NVIDIA|AMD)\\s?\\w+\\s?\\w+\\s\\d+', \n         r'Intel HD Graphics \\d+']\n    for i in p:\n        findgraphics = re.search(i,product_detail)\n        if findgraphics != None:\n            break\n        else:\n            continue\n    \n    if findgraphics != None:\n        graphics = findgraphics.group()\n    else:\n        graphics = ''\n\n    return graphics\n","ba78cb81":"# Get price informations function\ndef getprice(container):\n    price_current = container.findAll(\"li\", {\"class\": \"price-current\"})\n    for p in price_current:\n        price_c = p.text\n        price_c = re.search(r\"\\$\\d\\,?\\d+\", price_c)\n        if price_c == None:\n            price = \"\"\n        else:\n            price = price_c.group()\n            price = price.replace(\",\", \"\")\n        return price\n","efa432ff":"# Scraping 100 pages from newegg\n\"\"\"\nfor i in range(1, 100):\n    my_url = \"https:\/\/www.newegg.ca\/Desktop-Computers\/SubCategory\/ID-10\/Page-{}?Tid=6737&PageSize=96&order=BESTMATCH\".format(\n        i\n    )\n    uClient = request.urlopen(my_url)\n    page_html = uClient.read()\n    uClient.close()\n    page_soup = BeautifulSoup(page_html, \"html.parser\")\n    containers = page_soup.findAll(\"div\", {\"class\": \"item-container \"})\n    for container in containers:\n        product_detail = list(container.children)[3].img[\"alt\"].replace(\",\", \"  \")\n        brand = product_detail.split()[0]\n        core = getcore(container)\n        ram = getram(container)\n        HDD = getHDD(container)\n        SSD = getSSD(container)\n        graphics = getgraphics(container)\n        price = getprice(container)\n        f.write(\n            brand\n            + \",\"\n            + core\n            + \",\"\n            + ram\n            + \",\"\n            + HDD\n            + \",\"\n            + SSD\n            + \",\"\n            + graphics\n            + \",\"\n            + price\n            + \",\"\n            + product_detail\n            + \"\\n\"\n        )\n        time.sleep(0.5 + random.random())\n    time.sleep(10 + random.random())\n    print(i)\n\"\"\"","3bd3e704":"f.close()","d6c1b141":"# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n","6b5ee019":"# load data from csv file\ndataset = pd.read_csv(\"..\/input\/newegg_desktop_pageN - V3.csv\", encoding=\"latin-1\", dtype=str)\n\ndataset.info()\n","f3b59573":"dataset.head(6)\n","eea47a16":"# clean label Price and transform into float\ndataset.Price = dataset.Price.str.replace(\",\", \"\")\ndataset.Price = dataset.Price.str.replace(\"$\", \"\")\ndataset.Price = dataset.Price.astype(float)\n","01346eaa":"# drop na\nprint(\"length of dataset before dropna of column Price:\", len(dataset))\ndataset.dropna(thresh=1, subset=[\"Price\"], inplace=True)\nprint(\"length of dataset after dropna of column Price:\", len(dataset))\n","5dc4af59":"# add one column as sequence for agg use\ndataset[\"seq\"] = [i for i in range(len(dataset.Brand))]\ndataset[:5]\n","390de8a7":"# clean Feature: Brand\ndataset.Brand = dataset.Brand.str.lower()\ndataset.Brand = dataset.Brand.str.replace(\"amsdell\", \"dell\")\ndataset.Brand = dataset.Brand.str.replace(\"certified\", \"refurbished\")\ndataset.Brand = dataset.Brand.str.strip()\nbrand = dataset.groupby(by=\"Brand\", as_index=False).agg({\"seq\": pd.Series.nunique})\nbrand.seq.sum()\nbrand[brand.seq >= 30]\n","7198c465":"# rename brand as 'others' for all brands which sequence less than 30 \u2014\u2014 expect alienware and apple of course\nother_brand_list = brand[brand.seq < 30].Brand\nfor i in other_brand_list:\n    if i != \"alienware\" and i != \"apple\":\n        dataset.Brand = dataset.Brand.str.replace(i, \"others\")\n\nother_brand = [\"otherstel\",\n    \"othersfothersite\",\n    \"others40t\",\n    \"others40\",\n    \"viewsonothers\",\n    \"wothersdows\",\n    \"othersdustrial\",\n    \"thotherskcentre\",\n    \"versuspower\",\n    \"othersest\",\n    \"optiplex\",\n    \"others7\",\n    \"othersplex\",\n    \"hp-elitedesk-800-g3-i5-7500t-2-7ghz-256gb-ssd-4gb-mothersi-others-hp-warranty\"]\n\nfor b in other_brand:\n    dataset.Brand = dataset.Brand.str.replace(b, \"others\")\n\ndataset.Brand = dataset.Brand.str.replace(\"cyberpowerothers\", \"cyberpower\")\ndataset.Brand = dataset.Brand.str.replace(\"cybertronothers\", \"cybertron\")\ndataset.Brand = dataset.Brand.str.replace(\"vothers\", \"others\")\ndataset.Brand.unique()\n","c0961da8":"brand2 = dataset.groupby(by=\"Brand\", as_index=False).agg({\"seq\": pd.Series.nunique})\n# t = brand2[brand2.seq >= 5]\ncheck = dataset.groupby(\"Brand\", as_index=False)[\"Price\"].mean()\nv = check[check.Brand.isin([i for i in brand2.Brand])]\nv = v.sort_values(by=\"Price\")\nv\n","3b28115e":"v[\"value\"] = v.Price \/ np.mean(v.Price)\nv.drop(columns=\"Price\")\n","d600d501":"# plot Brand Average Price\nv.plot(\n    x='Brand',\n    y='Price',\n    kind=\"bar\",\n    figsize=(12,6),\n    use_index=True,\n    title='Brand Average Price',\n    grid=True,\n    legend=True,\n    fontsize=12,\n    colormap=None,\n)\n","f55259c4":"# find all i\/Ryzen series in dataset\nreg = [r\"Ryzen \\d+\", r\" i\\d\"]\nirlist = []\nfor i in dataset.Detail:\n    for j in reg:\n        find = re.search(j, i)\n        if find == None:\n            f = \"\"\n        else:\n            f = find.group()\n        irlist.append(f)\nset(irlist)\n","dc0eeb41":"# Creat new column Iseries to record i\/Ryzen series number\ndataset[\"Iseries\"] = \"0\"\niseries = [\" i3\", \" i5\", \" i7\", \" i9\", \"Ryzen 3\", \"Ryzen 5\", \"Ryzen 7\"]\nfor i in iseries:\n    index2 = dataset.Iseries[dataset.Detail.str.contains(i)].index\n    dataset.loc[index2, \"Iseries\"] = i[-1]\ndataset.Iseries.unique()\n","0bbd6180":"dataset.Iseries = dataset.Iseries.astype(float)\n","27b8131d":"# check how many examples contains i\/Ryzen series record\niseries = [\" i3\", \" i5\", \" i7\", \" i9\", \"Ryzen 3\", \"Ryzen 5\", \"Ryzen 7\"]\ncountI = dataset.Detail[dataset.Detail.str.contains(\"|\".join(iseries))]\n\ncountIn = dataset.Detail[dataset.Detail.str.contains(\"|\".join(iseries)) == False]\nprint(\n    \"lengh of examples contains i\/Ryzen series record: \",\n    len(countIn),\n    \"lengh of examples not contains i\/Ryzen series record: \",\n    len(countI),\n    \"lengh of dataset: \",\n    len(dataset),\n)\n","2582fe5a":"# dataset[(dataset.Detail.str.contains('|'.join(iseries)) == False) & (dataset.Price <= 5000) & (dataset.Price >= 500)]","4ba38acb":"dataset.columns","5ee018cb":"# Creat column Workstation to mark if the example is Workstation: 1 for Workstation and 0 for not\ndataset[\"Workstation\"] = \"0\"\nindexw = dataset.Workstation[dataset.Detail.str.contains(\"Workstation\")].index\ndataset.loc[indexw, \"Workstation\"] = \"1\"\ndataset.Workstation = dataset.Workstation.astype(float)\n","5014a844":"# Clean data for feature Core\ndataset.Core = dataset.Core.str.replace(\"GHz\", \"\")\ndataset.Core = dataset.Core.str.strip()\ndataset.Core = dataset.Core.str.replace(\"0 \", \"\")\ndataset.Core = dataset.Core.str.replace(\"2-7\", \"2.7\")\ndataset.Core = dataset.Core.str.replace(\"5 3\", \"3\")\ndataset.Core = dataset.Core.str.strip()\ndataset.Core.unique()\n","a3feb126":"# drop nan\nprint(\"length of dataset before dropna of column Core:\", len(dataset))\ndataset.dropna(thresh=1, subset=[\"Core\"], inplace=True)\nprint(\"length of dataset after dropna of column Core:\", len(dataset))\n","32505fb7":"dataset.Core = dataset.Core.astype(float)\n","c5cd8d8b":"# creat new feature DDR\ndataset[\"DDR\"] = dataset.Ram.str[-1]\ndataset.DDR.unique()\n","ccc56564":"dataset.Ram.unique()\n","4ec1389a":"# clean Ram\nclean_data = [\"GB DDR2\", \"GB DDR3\", \"GB DDR4\", \"GB DDR5\"]\nfor cd in clean_data:\n    dataset.Ram = dataset.Ram.str.replace(cd, \"\")\ndataset.Ram = dataset.Ram.str.strip()\ndataset.Ram.unique()\n","485207df":"# drop nan\nprint(\"length of dataset before dropna of column Ram:\", len(dataset))\ndataset.dropna(thresh=1, subset=[\"Ram\"], inplace=True)\nprint(\"length of dataset after dropna of column Ram:\", len(dataset))\n","5cf132aa":"dataset.Ram = dataset.Ram.astype(float)\ndataset.DDR = dataset.DDR.astype(float)\n","1a9abc64":"# clean Graphics, first check the unique Graphics values\ndataset.Graphics.unique()\n","d3aa4a61":"len(dataset[dataset.Graphics.notna()])\n","f4b702dc":"score = pd.read_csv(\"..\/input\/videocardbenchmark.csv\", encoding=\"latin-1\", dtype=str)\nscore.head()\n","61fd428e":"# Update Graphics format\ndataset.Graphics = dataset.Graphics.str.strip(\"NVIDIA\")\ndataset.Graphics = dataset.Graphics.str.strip(\"AMD\")\ndataset.Graphics = dataset.Graphics.str.lower()\ndataset.Graphics = dataset.Graphics.str.strip()\n","0873ec73":"# Merge Score of Graphics Model into dataset\ndataset = dataset.merge(score, left_on=\"Graphics\", right_on=\"model\", how=\"left\")\ndataset.columns\n","d5165fd1":"dataset.score = dataset.score.fillna(\"0\")\ndataset.score = dataset.score.astype(float)\n","60891fa8":"dataset = dataset.drop(columns=\"Graphics\")\n","f42b43c2":"dataset = dataset.drop(columns=\"model\")\n","3a9b4ffd":"dataset.SSD.fillna(value=\"0\", inplace=True)\nlen(dataset)\n","c44c6d24":"dataset.HDD.unique()\n","3b84d397":"# clean HDD\nclean_data = [\"HDD\", \"SSHD\", \"GB\", \"RPM\", \"7200\", \"SSD\"]\n\nfor cd in clean_data:\n    dataset.HDD = dataset.HDD.str.replace(cd, \"\")\n\ndataset.HDD = dataset.HDD.str.strip()\ndataset.HDD.unique()\n","9e0e81cf":"# keep cleaning...\n# dataset.drop(dataset[dataset.HDD == ''].index,inplace=True)\ndataset.HDD = dataset.HDD.str.replace(\"4 1TB\", \"1TB\")\ndataset.HDD = dataset.HDD.str.replace(\"3 1TB\", \"1TB\")\ndataset.HDD = dataset.HDD.str.replace(\"4 2TB\", \"2TB\")\ndataset.HDD = dataset.HDD.str.replace(\"2 80\", \"80\")\ndataset.HDD = dataset.HDD.str.replace(\"4 2TB\", \"2TB\")\ndataset.HDD = dataset.HDD.str.replace(\"2 1TB\", \"1TB\")\ndataset.HDD = dataset.HDD.str.replace(\"4 3TB\", \"3TB\")\ndataset.HDD = dataset.HDD.str.replace(\"4 4TB\", \"4TB\")\ndataset.HDD = dataset.HDD.str.replace(\"G\", \"\")\ndataset.HDD = dataset.HDD.str.replace(\" \", \"\")\ndataset.HDD = dataset.HDD.str.replace(\"TB\", \"000\")\ndataset.HDD.unique()\n","e826a62f":"dataset.drop(dataset[dataset.HDD == \"\"].index, inplace=True)\ndataset.HDD = dataset.HDD.fillna(\"0\")\ndataset.HDD.unique()\n","9e70ffa5":"# drop nan\nprint(\"length of dataset before dropna of column HDD:\", len(dataset))\ndataset.dropna(thresh=1, subset=[\"HDD\"], inplace=True)\nprint(\"length of dataset after dropna of column HDD:\", len(dataset))\n","32158054":"dataset.HDD = dataset.HDD.astype(float)\n","c6c0d83a":"# clean SSD\ndataset.SSD.unique()\n","69c5d7e6":"dataset[dataset.SSD == \"2 PCIe SSD\"].values\ndataset.SSD = dataset.SSD.str.replace(\"2 PCIe SSD\", \"256\")\ndataset[\n    (dataset.SSD == \"2 SATA SSD\")\n    & dataset.Detail.str.contains(\"DDR4 32 GB M.2 SATA SSD\")\n].values\ndataset.SSD = dataset.SSD.str.replace(\"2 SATA SSD\", \"32\")\n","122912f1":"# clean SSD\nclean_data = [\n    \" GB SSD\",\n    \"GB SSD\",\n    \"SSD\",\n    \"G\",\n    \"PCIe\",\n    \"BSATA\",\n    \"BNVMe\",\n    \"NVMe\",\n    \"SATA\",\n    \"4250\",\n    \"4240\",\n    \"x\",\n    \"B\",\n    \"3128\",\n    \"3 \",\n    \"4 \",\n    \"nboard\",\n    \"O\",\n]\n\nfor cd in clean_data:\n    dataset.SSD = dataset.SSD.str.replace(cd, \"\")\n\ndataset.SSD = dataset.SSD.str.strip()\n\ndataset.SSD = dataset.SSD.str.replace(\"T\", \"000\")\ndataset.SSD = dataset.SSD.str.replace(\" \", \"\")\ndataset.SSD = dataset.SSD.str.replace(\"M.2\", \"\")\n# dataset.SSD = dataset.SSD.str.replace('TB','000')\n# dataset.SSD = dataset.SSD.str.strip()\ndataset.SSD.unique()\n","5cfb68c5":"# dataset = dataset.sort_values(by = 'pricing',ascending=True, inplace=True)\ndataset[:10]\n","8fb51efb":"# set type as float\ndataset.SSD = dataset.SSD.astype(float)\n","1b63ada0":"len(dataset)\n","f1c3086d":"dataset = dataset.drop(columns=\"Detail\")\ndataset = dataset.drop(columns=\"seq\")\n","23f592e9":"dataset[:5]\n","2ca00f3c":"# OneHotEncoder: using pd.get_dummies\ndataset = pd.get_dummies(dataset)\ndataset[:5]","723802a9":"dataset = dataset.sort_values(by=\"Price\")\ndataset.drop(dataset[dataset.Price <= 800].index, inplace=True)\ndataset.drop(dataset[dataset.Price >= 5000].index, inplace=True)\nlen(dataset)\n","4c8579ca":"dataset.columns\n","f73052ba":"from pandas.plotting import scatter_matrix\n\nscatter_matrix = scatter_matrix(\n    dataset[\n        [\"Core\", \"Iseries\", \"Workstation\", \"Ram\", \"DDR\", \"HDD\", \"SSD\", \"score\", \"Price\"]\n    ],\n    alpha=0.2,\n    figsize=(17, 17),\n    diagonal=\"kde\",\n)\n","faf40b28":"# X = zip(dataset.Core,dataset.HDD,dataset.Ram,dataset.SSD)\nX = dataset.score\nY = dataset.Price\nplt.plot(Y, \"bo\", alpha=0.5, markersize=2)\n","c60a6c1e":"plt.plot(X, Y, \"mo\", alpha=0.5, markersize=2)\nplt.legend()\n","f9451974":"# Plot heatmap\nimport seaborn as sns\n\ncols = [\"Core\", \"Iseries\", \"Workstation\", \"Ram\", \"DDR\", \"HDD\", \"SSD\", \"score\", \"Price\"]\ncorrcoef_map = np.corrcoef(dataset[cols].values.T)\nfig, ax = plt.subplots(figsize=(8, 8))\nhm = sns.heatmap(\n    corrcoef_map,\n    cbar=True,\n    annot=True,\n    square=True,\n    fmt=\".2f\",\n    annot_kws={\"size\": 15},\n    yticklabels=cols,\n    xticklabels=cols,\n    ax=ax,\n)\n","47b63b35":"dataset.columns\n","5e22d80c":"import seaborn as sns\n\ncols = [\n    \"Price\",\n    \"Brand_acer\",\n    \"Brand_alienware\",\n    \"Brand_apple\",\n    \"Brand_asus\",\n    \"Brand_cyberpower\",\n    \"Brand_cybertron\",\n    \"Brand_dell\",\n    \"Brand_hp\",\n    \"Brand_lenovo\",\n    \"Brand_msi\",\n    \"Brand_others\",\n    \"Brand_refurbished\",\n]\ncm = np.corrcoef(dataset[cols].values.T)\nfig, ax = plt.subplots(figsize=(18, 18))\nhm = sns.heatmap(\n    cm,\n    cbar=True,\n    annot=True,\n    square=True,\n    fmt=\".2f\",\n    annot_kws={\"size\": 15},\n    yticklabels=cols,\n    xticklabels=cols,\n    ax=ax,\n)\n","aa0a5b96":"dataset = dataset.drop(\n    columns=[\n        \"Workstation\",\n        \"Brand_acer\",\n        \"Brand_alienware\",\n        \"Brand_apple\",\n        \"Brand_cyberpower\",\n        \"Brand_dell\",\n        \"Brand_msi\",\n        \"Brand_refurbished\",\n    ]\n)\n","eb7481c5":"dataset.head()\n","9f84fff9":"# Standard processing\nfrom sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit_transform(dataset)\n","d210c47e":"# Split Training\/Test set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.loc[:, dataset.columns != \"Price\"], dataset.loc[:, \"Price\"], test_size=0.3\n)\n\n# resort y_test, and using the same order sorting x\norder = y_test.argsort(axis=0)\ny_test = y_test.values[order]\nX_test = X_test.values[order, :]\n","b44c1a38":"# Creat Predict and Plot function for ML methods\nfrom sklearn import metrics\n\n\ndef try_different_method(method):\n    method.fit(X_train, y_train)\n    y_pred = method.predict(X_test)\n\n    maer = 1 - np.mean(abs(y_pred - y_test) \/ y_test)\n    mse = metrics.mean_squared_error(y_pred, y_test)\n    r2 = metrics.r2_score(y_pred, y_test)\n\n    plt.figure(figsize=(10, 6))\n    plt.plot(\n        np.arange(len(y_pred)),\n        y_test,\n        \"ro-\",\n        markersize=4,\n        label=\"listing price\",\n        alpha=0.8,\n    )\n    plt.plot(\n        np.arange(len(y_pred)),\n        y_pred,\n        \"bo-\",\n        markersize=4,\n        label=\"predict price\",\n        alpha=0.5,\n    )\n\n    plt.grid()\n    plt.title(\"MSE: %f\" % mse)\n    print(\"mean_squared_error: %f\" % mse)\n    print(\"r2: %f\" % r2)\n    print(\"mean_abs_error_rate: %f\" % maer)\n    plt.legend()\n    return mse\n","b8f3405d":"result = []\n","e8a0c1e0":"# KNN - Choose hyper parameters\nfrom sklearn import neighbors\n\n# knn = neighbors.KNeighborsRegressor()\nmse_list = []\nfor i in range(1, 6):\n    knn = neighbors.KNeighborsRegressor(\n        n_neighbors=i,\n        weights=\"uniform\",\n        algorithm=\"auto\",\n        leaf_size=100,\n        p=1,\n        metric=\"minkowski\",\n        metric_params=None,\n        n_jobs=1,\n    )\n\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    mse = metrics.mean_squared_error(y_pred, y_test)\n    mse_list.append([i, mse])\n    print(\"mean_squared_error for n_neighbors %f: %f\" % (i, mse))\n","6a3822bf":"pick = pd.DataFrame(mse_list, columns=[\"nneighbors\", \"MSE\"])\nm = pick[pick.MSE == pick.MSE.min()]\nn = m.nneighbors.values[0]\nm\n","2d5d39ff":"# KNN\nfrom sklearn import neighbors\n\n# knn = neighbors.KNeighborsRegressor()\nknn = neighbors.KNeighborsRegressor(\n    n_neighbors=n,\n    weights=\"uniform\",\n    algorithm=\"auto\",\n    leaf_size=100,\n    p=1,\n    metric=\"minkowski\",\n    metric_params=None,\n    n_jobs=1,\n)\n\nmse_score = try_different_method(knn)\n# result.append(m.MSE.values[0])\nresult.append((\"KNN\", mse_score))\n","82a61d56":"# DecisionTreeRegressor - Choose hyper parameters\nfrom sklearn import tree\n\nfor i in range(10, 100):\n    tree_reg = tree.DecisionTreeRegressor(\n        criterion=\"mse\",\n        splitter=\"best\",\n        max_depth=i,\n        min_samples_split=2,\n        min_samples_leaf=1,\n        min_weight_fraction_leaf=0.0,\n        max_features=None,\n        random_state=None,\n        max_leaf_nodes=None,\n        min_impurity_decrease=0.0,\n        min_impurity_split=None,\n        presort=False,\n    )\n    tree_reg.fit(X_train, y_train)\n    y_pred = tree_reg.predict(X_test)\n    mse = metrics.mean_squared_error(y_pred, y_test)\n    mse_list.append([i, mse])\n","db68bbcc":"pick = pd.DataFrame(mse_list, columns=[\"maxdepth\", \"MSE\"])\nm = pick[pick.MSE == pick.MSE.min()]\nn = m.maxdepth.values[0]\nm\n","42b8cde1":"# DecisionTreeRegressor\nfrom sklearn import tree\n\ntree_reg = tree.DecisionTreeRegressor(\n    criterion=\"mse\",\n    splitter=\"best\",\n    max_depth=n,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_features=None,\n    random_state=None,\n    max_leaf_nodes=None,\n    min_impurity_decrease=0.0,\n    min_impurity_split=None,\n    presort=False,\n)\nmse_score = try_different_method(tree_reg)\n# result.append(m.MSE.values[0])\nresult.append((\"Decision Tree\", mse_score))\n","ce7043b9":"# RandomForestRegressor\nfrom sklearn import ensemble\n\nrf = ensemble.RandomForestRegressor(\n    n_estimators=50,\n    criterion=\"mse\",\n    max_depth=None,\n    max_features=\"auto\"\n)\nmse_score = try_different_method(rf)\nresult.append((\"Random Forest\", mse_score))\n","cac7afd8":"# GBRT\n# gbrt = ensemble.GradientBoostingRegressor(n_estimators=100)\ngbrt = ensemble.GradientBoostingRegressor(\n    loss=\"ls\",\n    learning_rate=0.9,\n    n_estimators=200,\n    subsample=1.0,\n    criterion=\"friedman_mse\",\n    min_samples_split=2,\n    min_samples_leaf=1,\n    min_weight_fraction_leaf=0.0,\n    max_depth=3,\n    min_impurity_decrease=0.0,\n    min_impurity_split=None,\n    init=None,\n    random_state=None,\n    max_features=None,\n    alpha=0.9,\n    verbose=0,\n    max_leaf_nodes=None,\n    warm_start=False,\n    presort=\"auto\",\n)\nmse_score = try_different_method(gbrt)\nresult.append((\"gbrt\", mse_score))\n","fb168943":"# LinearRegression\nfrom sklearn import linear_model\n\nlinear_reg = linear_model.LinearRegression(\n    fit_intercept=False, normalize=False, copy_X=True, n_jobs=1\n)\nmse_score = try_different_method(linear_reg)\nresult.append((\"Linear Regression\", mse_score))\n","fb763ae7":"# svr = svm.SVR(C=10, gamma=1, kernel=\"linear\")\n# try_different_method(svr)\n","64ff0c58":"# svr = svm.SVR(C=10, gamma=1, kernel=\"poly\")\n# try_different_method(svr)\n","9725915e":"# SVM - Use GridSearchCV choose hyper parameters\nfrom sklearn.svm import SVR\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score, KFold, GridSearchCV\n\ngrid_params = {\n    \"kernel\": [\"rbf\"],\n    \"gamma\": [10 ** i for i in range(-2, 1)],\n    \"C\": [3 ** i for i in range(4, 10)],\n}\nclf = GridSearchCV(SVR(), grid_params, cv=5, scoring=\"neg_mean_squared_error\")\nclf.fit(X_train, y_train)\nb = clf.best_params_\nprint(\"Best parameter values: %r\\n\" % clf.best_params_)\n\nmeans = clf.cv_results_[\"mean_test_score\"]\nstds = clf.cv_results_[\"std_test_score\"]\nparams = stds, clf.cv_results_[\"params\"]\n","bb9bf454":"# SVM\nfrom sklearn import svm\n\nsvr = svm.SVR(C=b[\"C\"], gamma=b[\"gamma\"], kernel=b[\"kernel\"])\nmse_score = try_different_method(svr)\nresult.append((\"SVM\", mse_score))\n","f40211a1":"clf.best_params_\n","bddfe4fd":"comparison = pd.DataFrame(result, columns=[\"method\", \"MSE\"])\ncomparison\n","657e77bc":"comparison.plot(\n    x=\"method\", kind=\"bar\", grid=True, title=\"MSE comparison between each method\"\n)\n","776cfcc0":"dataset.head()\n","8277b905":"dataset = dataset.drop(columns=[\"Iseries\", \"score\"])\nresult2 = []\n","401e573f":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit_transform(dataset)\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.loc[:, dataset.columns != \"Price\"], dataset.loc[:, \"Price\"], test_size=0.3\n)\n\n# resort y_test, and using the same order sorting x\norder = y_test.argsort(axis=0)\ny_test = y_test.values[order]\nX_test = X_test.values[order, :]\n","21a15e88":"mse_score = try_different_method(knn)\n# result.append(m.MSE.values[0])\nresult2.append((\"KNN\", mse_score))\n","ea7d4d0d":"mse_score = try_different_method(tree_reg)\n# result.append(m.MSE.values[0])\nresult2.append((\"Decision Tree\", mse_score))\n","e8c3e338":"mse_score = try_different_method(rf)\nresult2.append((\"Random Forest\", mse_score))\n","7979335c":"mse_score = try_different_method(gbrt)\nresult2.append((\"gbrt\", mse_score))\n","d041e0b8":"mse_score = try_different_method(linear_reg)\nresult2.append((\"Linear Regression\", mse_score))\n","6f2e8363":"mse_score = try_different_method(svr)\nresult2.append((\"SVM\", mse_score))\n","ef3dd841":"comparison2 = pd.DataFrame(result2, columns=[\"method\", \"MSE\"])\ncomparison2\n","2e853a7c":"comparison","e3c7fd53":"m = pd.merge(\n    left=comparison2, right=comparison, on=\"method\", suffixes=(\"_iteration1\", \"_iteration2\")\n)\n","9c9c2683":"m.plot(\n    x=\"method\",\n    y=[\"MSE_iteration1\", \"MSE_iteration2\"],\n    kind=\"bar\",\n    grid=True,\n    title=\"MSE comparison between each method\"\n)\n","da3aea26":"# LinearRegression","2f4a7d14":"# Creat Predict and Plot function for ML methods","4494394b":"# Clean data for label Price","3458e1dd":"# Clean data for feature HDD","581b9115":"# Compare the performance between each iteration","a42beb8c":"# Check dataset","5b121743":"# Clean data for feature Graphics","6f2be4a8":"# Plot scatter_matrix","ebb5ece5":"# SVM","1c0e9add":"# Load data into dataset","c043e81d":"# KNN","6c4a347a":"# Importing Data","f70f8917":"# Plot heatmap","77f2341d":"# Standard processing and Training\/Test set Split","0c74ad95":"# DecisionTree","52009465":"# OneHotEncoder: use get_dummies","22c445d7":"# Drop unimportant features","10105d38":"# Clean data for feature Ram & create feature DDR","097f41b1":"# Clean data for feature Core","1266d861":"# Clean data for feature SSD","9f5b66eb":"# GBRT","bdd25c86":"# Add feature if Workstation","403948f9":"# Clean data for feature Core","7b736c39":"# Choose the dataset range by price","8d18b362":"# Test the data on different ML method","29535fce":"# Add feature i\/Ryzen series","663bd308":"# Random Forest"}}