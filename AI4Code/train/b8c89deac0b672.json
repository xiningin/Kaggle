{"cell_type":{"b4869c2a":"code","19e01b4c":"code","04490e44":"code","d25818e3":"code","80e0df4b":"code","114cfe53":"code","198452dc":"code","a0b2376f":"code","cfd3e8bc":"code","a0d3eaf2":"code","70e8a1b3":"code","eb337bc5":"code","c36a8f99":"code","15ece107":"code","5908efc3":"code","ec89100d":"code","0993a0e5":"code","ef5a0f4c":"code","a5aed9b6":"code","ba4ebbfc":"code","48047b9b":"code","3c45eb26":"code","d08ab6aa":"code","14884862":"code","ea8694dc":"code","c2b67efc":"code","4ab6696a":"code","ea90742c":"code","233c378b":"code","7b5ea89b":"code","53e4b415":"code","71fab21b":"markdown","c9a839e0":"markdown","3982325b":"markdown","a7b6cf52":"markdown","79d613d2":"markdown","2183991e":"markdown","9008db7e":"markdown","601a6d7a":"markdown","c163d1b8":"markdown","94e3fba3":"markdown","182a46d1":"markdown","1cd1b122":"markdown","49eeb0f3":"markdown","8e9694df":"markdown","b5e9a388":"markdown","c44d8a07":"markdown","e68d6833":"markdown","9a1971fe":"markdown","e8ea8b7c":"markdown"},"source":{"b4869c2a":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom mlxtend.plotting import plot_decision_regions\nimport seaborn as sns","19e01b4c":"#import libraries for pandas profiling\n# Detailing for pandas profiling: https:\/\/github.com\/pandas-profiling\/pandas-profiling\nfrom pathlib import Path\nfrom pandas_profiling import ProfileReport\nfrom pandas_profiling.utils.cache import cache_file","04490e44":"diabetes = pd.read_csv(\"..\/input\/diabetes\/diabetes_data.csv\")\ndiabetes.head()","d25818e3":"#Profiling: we can see our dataset details,simply.\nprofile = ProfileReport(diabetes, title=\"diabetes\")\n# The Notebook Widgets Interface\nprofile.to_widgets()","80e0df4b":"# gives information about the data types,columns, null value counts, memory usage etc\ndiabetes.info()\ndiabetes.shape","114cfe53":"# basic statistic details about the data (note only numerical columns would be displayed here unless parameter include=\"all\")\ndiabetes.describe()","198452dc":"diabetes.describe().T\n#dpf = DiabetesPedigreeFunction","a0b2376f":"diabetes_copy = diabetes.copy(deep=True)\ndiabetes_copy[['glucose','diastolic','triceps','insulin','bmi']] = diabetes_copy[['glucose','diastolic','triceps','insulin','bmi']].replace(0,np.NaN)\n# showing the count of Nans\nprint(diabetes_copy.isnull().sum())","cfd3e8bc":"his = diabetes.hist(figsize=(20,20))","a0d3eaf2":"#'glucose','diastolic','triceps','insulin','bmi'\ndiabetes_copy[\"glucose\"].fillna(diabetes_copy[\"glucose\"].mean(), inplace=True)\ndiabetes_copy[\"diastolic\"].fillna(diabetes_copy[\"diastolic\"].mean(), inplace=True)\ndiabetes_copy[\"triceps\"].fillna(diabetes_copy[\"triceps\"].median(), inplace=True)\ndiabetes_copy[\"insulin\"].fillna(diabetes_copy[\"insulin\"].median(), inplace=True)\ndiabetes_copy[\"bmi\"].fillna(diabetes_copy[\"bmi\"].median(), inplace=True)","70e8a1b3":"his = diabetes_copy.hist(figsize=(20,20))","eb337bc5":"from pandas.plotting import scatter_matrix\np = scatter_matrix(diabetes,figsize=(20,20))","c36a8f99":"#from pandas.plotting import scatter_matrix\n#p = scatter_matrix(diabetes_copy,figsize=(20,20))\np = sns.pairplot(diabetes_copy, hue=\"diabetes\")","15ece107":"plt.figure(figsize=(12,10))  \np=sns.heatmap(diabetes.corr(), annot=True,cmap ='RdYlGn')","5908efc3":"plt.figure(figsize=(12,10)) \np=sns.heatmap(diabetes_copy.corr(), annot=True,cmap ='RdYlGn') ","ec89100d":"from sklearn.preprocessing import StandardScaler\nSt_sc = StandardScaler()\nX = pd.DataFrame(St_sc.fit_transform(diabetes_copy.drop([\"diabetes\"],axis=1)),columns=[\"pregnancies\",\"glucose\",\n                                                                                      \"diastolic\",\"triceps\",\"insulin\",\"bmi\",\"dpf\",\"age\"])\ny = diabetes_copy.diabetes\n","0993a0e5":"X.head()","ef5a0f4c":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42, stratify=y)\n#Train Test Split data==> 70% of data set for Train, 30% of data set for Test","a5aed9b6":"# Create a k-NN classifier\nknn = KNeighborsClassifier(n_neighbors = 6, metric= \"manhattan\")\n# Fit the classifier to the training data\nknn.fit(X_train,y_train)\n#PREDICTION\nprint(\"Prediction of features (test set): \",knn.predict(X_test))\nprint(\"Actual label variables: (test set)\",y_test)\n#ACCURACY\n# Print the accuracy\nprint(knn.score(X_test, y_test))\n","ba4ebbfc":"# Setup arrays to store train and test accuracies\nneighbors = np.arange(1,15)\ntrain_accuracy = np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))","48047b9b":"# Loop over different values of k\nfor i, k in enumerate(neighbors):\n    # Setup a k-NN Classifier with k neighbors: knn\n    knn = KNeighborsClassifier(n_neighbors = k, metric= \"manhattan\")\n    # Fit the classifier to the training data\n    knn.fit(X_train,y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n\n    #Compute accuracy on the testing set\n    test_accuracy[i] = knn.score(X_test, y_test)\n","3c45eb26":"max_train_score = max(train_accuracy)\ntrain_scores_ind = [i for i, v in enumerate(train_accuracy) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","d08ab6aa":"max_test_score = max(test_accuracy)\ntest_scores_ind = [i for i, v in enumerate(test_accuracy) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","14884862":"# Generate plot\nplt.title('k-NN: Varying Number of Neighbors')\nplt.plot(neighbors, train_accuracy, label = 'Training Accuracy')\nplt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')\nplt.legend()\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.show()","ea8694dc":"#The best result is captured at k = 12\nknn = KNeighborsClassifier(12, metric= \"manhattan\")\n\nknn.fit(X_train,y_train)\nknn.score(X_test,y_test)","c2b67efc":"#import confusion matrix\nfrom sklearn.metrics import confusion_matrix\n#let us get the predictions using the classifier we had fit above\ny_predict = knn.predict(X_test)\nconfusion_matrix(y_test,y_predict)\npd.crosstab(y_test,y_predict,rownames=[\"True\"],colnames=[\"Predicted\"],margins=True)","4ab6696a":"from sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_predict)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","ea90742c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predict))","233c378b":"from sklearn.metrics import roc_curve\ny_predict_prob = knn.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test,y_predict_prob)","7b5ea89b":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=11) ROC curve')\nplt.show()","53e4b415":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_predict_prob)","71fab21b":"nan values accordance with their distribution in the columns.","c9a839e0":"KNN Fit-Prediction with an number of K","3982325b":"Heatmap for unclean data","a7b6cf52":"Basic level. My KNN Algorithm trial.","79d613d2":"Pair plot for clean data\nScatter matrix for clean data","2183991e":"3. ROC - AUC","9008db7e":"TRAIN-TEST SPLIT","601a6d7a":"# Model Performance Analysis","c163d1b8":"# Pearson's Correlation Coefficient","94e3fba3":"KNN Fit-Predict with different numbers of k","182a46d1":"Heatmap for clean data","1cd1b122":"# **Basic EDA and statistical analysis**","49eeb0f3":"1. Confusion Matrix","8e9694df":"Scaling the data","b5e9a388":"To fill these Nan values the data distribution needs to be understood","c44d8a07":"2. Classification Report\nReport which includes Precision, Recall and F1-Score","e68d6833":"# Plotting after NaN regulation","9a1971fe":"Following columns or variables have an invalid zero value:\n\n* Glucose\n* BloodPressure = diastolic\n* Triceps =SkinThickness\n* Insulin\n* BMI \n\nIt is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values","e8ea8b7c":"Scatter matrix of raw data"}}