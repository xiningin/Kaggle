{"cell_type":{"4b5fda16":"code","121a4825":"code","efd1485d":"code","dd6e4228":"code","d7f7376e":"code","366cb69f":"code","94e171cf":"code","1b3d72c8":"code","2e7c6b9b":"code","21a76231":"code","fbb3808c":"code","1dba4259":"code","4459e127":"code","e07ae0af":"code","7ac7f6ef":"code","3487c351":"code","e14aa214":"code","bfc870a4":"code","1714e9ef":"code","2bd9da60":"code","fa557d91":"code","bb086e87":"code","2f3e30fd":"code","9c30d3b4":"code","777c8b71":"code","0092a725":"code","095ae929":"code","2e8f4d27":"code","d82fa2f5":"code","33a8ff51":"code","ea58e21c":"code","0bcfe24a":"code","18168566":"code","6769ff66":"code","5087ac2f":"code","b0763332":"code","4d778160":"markdown","3d0f05ab":"markdown","3a663101":"markdown","2936ddb3":"markdown"},"source":{"4b5fda16":"# Import the Library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import metrics\nfrom sklearn.datasets import load_boston\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")","121a4825":"# import load_boston dataset\nboston = load_boston()","efd1485d":"data = pd.DataFrame(boston.data)","dd6e4228":"data.head()","d7f7376e":"data.columns = boston.feature_names\ndata.head()","366cb69f":"#Adding target variable to dataframe\ndata['PRICE'] = boston.target \n# Median value of owner-occupied homes in $1000","94e171cf":"data.shape","1b3d72c8":"data.columns","2e7c6b9b":"data.dtypes","21a76231":"data.nunique()","fbb3808c":"data.isnull().sum()","1dba4259":"# See rows with missing values\ndata[data.isnull().any(axis=1)]","4459e127":"# Viewing the data statistics\ndata.describe()","e07ae0af":"# Finding out the correlation between the features\ncorr = data.corr()\ncorr.shape","7ac7f6ef":"# Spliting target variable and independent variables\nX = data.drop(['PRICE'], axis = 1)\ny = data['PRICE']","3487c351":"# Splitting to training and testing data\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 4)","e14aa214":"# Train The Model\n\n# Import Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Create a Random Forest Regressor\nreg = RandomForestRegressor()\n\n# Train the model using the training sets \nreg.fit(X_train, y_train)","bfc870a4":"# Model prediction on train data\ny_pred = reg.predict(X_train)","1714e9ef":"# Model Evaluation\nprint('R^2:',metrics.r2_score(y_train, y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_train, y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train, y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_pred)))","2bd9da60":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_train, y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","fa557d91":"# Checking residuals\nplt.scatter(y_pred,y_train-y_pred)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","bb086e87":"# Test The Data Model\n# Predicting Test data with the model\ny_test_pred = reg.predict(X_test)","2f3e30fd":"# Model Evaluation\nacc_rf = metrics.r2_score(y_test, y_test_pred)\nprint('R^2:', acc_rf)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))","9c30d3b4":"# Import XGBoost Regressor\nfrom xgboost import XGBRegressor\n\n#Create a XGBoost Regressor\nreg = XGBRegressor()\n\n# Train the model using the training sets \nreg.fit(X_train, y_train)","777c8b71":"# Train Dataset Model\n\n# Model prediction on train data\ny_pred = reg.predict(X_train)\n\n\n# Model Evaluation\nprint('R^2:',metrics.r2_score(y_train, y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_train, y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train, y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_pred)))","0092a725":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_train, y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","095ae929":"# Checking residuals\nplt.scatter(y_pred,y_train-y_pred)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","2e8f4d27":"# Test Dataset Model\n\n#Predicting Test data with the model\ny_test_pred = reg.predict(X_test)\n\n\n# Model Evaluation\nacc_xgb = metrics.r2_score(y_test, y_test_pred)\nprint('R^2:', acc_xgb)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))","d82fa2f5":"# Creating scaled set to be used in model to improve our results\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","33a8ff51":"# Train the model\n\n# Import SVM Regressor\nfrom sklearn import svm\n\n# Create a SVM Regressor\nreg = svm.SVR()\n# Train the model using the training sets \nreg.fit(X_train, y_train)","ea58e21c":"# Model prediction on train data\ny_pred = reg.predict(X_train)\n\n# Model Evaluation\nprint('R^2:',metrics.r2_score(y_train, y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_pred))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_train, y_pred))\nprint('MSE:',metrics.mean_squared_error(y_train, y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train, y_pred)))","0bcfe24a":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(y_train, y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","18168566":"# Checking residuals\nplt.scatter(y_pred,y_train-y_pred)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","6769ff66":"# Test Dataset Model\n\n# Predicting Test data with the model\ny_test_pred = reg.predict(X_test)\n\n# Model Evaluation\nacc_svm = metrics.r2_score(y_test, y_test_pred)\nprint('R^2:', acc_svm)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_test_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_test_pred)))","5087ac2f":"models = pd.DataFrame({\n    'Model': ['Random Forest', 'XGBoost', 'Support Vector Machines'],'R-squared Score': [ acc_rf*100, acc_xgb*100, acc_svm*100]})\nmodels.sort_values(by='R-squared Score', ascending=False)\n","b0763332":"# Plotting the heatmap of correlation between features\nplt.figure(figsize=(20,20))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='Greens')","4d778160":"# XGBoost Regressor","3d0f05ab":"\nUse house_boston dataset. Construct a prediction model to predict the price of the house based on \ngiven features. Use GBRegressor to construct a regression model and analyze the performance of \nyour model. ","3a663101":"# SVM Regressor","2936ddb3":"# Evaluation and comparision of all the models\n"}}