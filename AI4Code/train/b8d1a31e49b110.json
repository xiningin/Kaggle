{"cell_type":{"fea9e924":"code","9a7d2897":"code","184f0183":"code","1060aaa5":"code","6eb9ac15":"code","b274e789":"code","4f106457":"code","4d0f0a23":"code","2fb4e858":"code","8409e33d":"code","b790098d":"code","7586f4ef":"code","3fa3c4ce":"code","4e231649":"code","a1e0c99f":"code","af3e343e":"code","f6281b88":"code","28da10c2":"code","e0657b67":"code","9344e6b3":"code","ed565888":"code","aed5d360":"code","023b47b0":"code","650bb8de":"code","ce4e29f1":"code","bb8c5ed4":"code","2af10dab":"code","2e2e78ad":"code","d429777e":"code","b5c973c6":"code","258d23e8":"code","c8d755ca":"code","b0c14429":"code","14fecc8a":"code","774f1826":"code","31db35f9":"code","98462217":"code","b2f2a314":"code","e4f34c52":"code","b64411e0":"code","5cbdc411":"code","f95fd924":"code","058f2457":"code","7b1974e7":"code","82551da1":"code","2d14cd5b":"code","662412c9":"code","ff0e0c69":"code","a1f24b2c":"markdown","9c8b9974":"markdown","4e6001c4":"markdown","50196211":"markdown","67b856b3":"markdown","07e3c7dd":"markdown","431a8a11":"markdown","9183456e":"markdown","89dd6c11":"markdown","9073b12d":"markdown","ef6b2f3c":"markdown","e23a7b6d":"markdown","d57de3ab":"markdown","3520fc0b":"markdown","4f86c297":"markdown","71336b7d":"markdown","bc9e9642":"markdown","6a0d3a08":"markdown","57395b05":"markdown","1d16aa1f":"markdown","f0135f3b":"markdown","92da1e28":"markdown","f178a813":"markdown","df39a3fb":"markdown","96d7c4ac":"markdown","52c44081":"markdown","71f29bed":"markdown","5c34e268":"markdown","63aa1536":"markdown","fa521ea3":"markdown","3cc768a4":"markdown","68ef4870":"markdown","b85e10ef":"markdown","b169528e":"markdown","09343647":"markdown","694622fd":"markdown"},"source":{"fea9e924":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization\nimport seaborn as sns #visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a7d2897":"data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")","184f0183":"data.info()","1060aaa5":"data.corr()","6eb9ac15":"f,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True , linewidths = .5 , fmt= '.1f', ax=ax )\nplt.show()","b274e789":"data.head(10)","4f106457":"data.columns","4d0f0a23":"series = data[\"Defense\"]\nprint(type(series))\n\ndata_frame = data[[\"Defense\"]]\nprint(type(data_frame))","2fb4e858":"filtre = data['Defense']>200 #Dataset i\u00e7erisinde bulunan pokemonlardan \"Defense\" \u00f6zelli\u011fi 200 de\u011ferinden b\u00fcy\u00fck olanlar ko\u015fulu filtreye atan\u0131r.\ndata[filtre] #Datasete filtreleme yap\u0131l\u0131r.","8409e33d":"data[np.logical_and(data[\"Defense\"]>200,data[\"Attack\"]>100)] #Numpy k\u00fct\u00fcphanesine ait logical_and fonksiyonu ile Defense de\u011feri 200'den b\u00fcy\u00fck ve Attack de\u011feri 130'dan b\u00fcy\u00fck datalar\u0131 filtreleme","b790098d":"filtre_2 = ((data[\"Defense\"]>200) & (data[\"Attack\"]>100))\ndata[filtre_2]","7586f4ef":"for index ,attack in data[[\"Attack\"]][100:106].iterrows():\n    print(index , \" : \" , attack)","3fa3c4ce":"data.Speed.plot(kind=\"line\", color=\"green\", label=\"Speed\", linewidth = 1 , alpha=0.5, grid =True ,linestyle=\":\")\ndata.Defense.plot(kind=\"line\" , color=\"blue\" , label=\"Defense\" , linewidth=1 , alpha = 0.5 , grid = True , linestyle=\"-.\")\nplt.legend(loc=\"best\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Line Plot\")\nplt.show()","4e231649":"data.plot(kind=\"scatter\" , x=\"Attack\" , y=\"Defense\" , alpha=\"0.5\" , color=\"red\")\nplt.title(\"Scatter Plot\")\nplt.show()","a1e0c99f":"plt.scatter(data.Attack , data.Defense , alpha=0.5)\nplt.title(\"Scatter Plot\")\nplt.show()","af3e343e":"data.Speed.plot(kind=\"hist\",bins=50,figsize=(10,10),grid=True)\nplt.xlabel(\"Speed\")\nplt.title(\"Histogram Plot\")\nplt.show()","f6281b88":"data.head()","28da10c2":"print(data[\"Type 1\"].value_counts())","e0657b67":"data.describe().T","9344e6b3":"sns.boxplot(data[\"Defense\"] , color =\"#25B89B\");","ed565888":"data.boxplot(column = \"Attack\", by=\"Legendary\" , figsize=(8,6))\nplt.show()","aed5d360":"data_new = data.head()\ndata_new","023b47b0":"melted = pd.melt(frame = data_new , id_vars = \"Name\" , value_vars = [\"Attack\" , \"Defense\"])\nmelted","650bb8de":"sns.boxplot(y=melted[\"value\"] ,x=melted[\"variable\"])","ce4e29f1":"df = data.drop(\"#\",axis=1)\ndf.plot(subplots = True , figsize=(8,12))\nplt.show();","bb8c5ed4":"data.plot(kind=\"scatter\", x=\"Attack\", y=\"Defense\")","2af10dab":"data.plot(kind=\"hist\", y=\"HP\" , bins=50 , normed = True);","2e2e78ad":"melted.pivot(index=\"Name\" , columns=\"variable\" , values = \"value\")","d429777e":"df_1 = data.head()\ndf_2 = data.tail()\ncon_data_row = pd.concat([df_1,df_2] , axis=0  , ignore_index = True)\ncon_data_row","b5c973c6":"df_1 = data[\"Attack\"].head()\ndf_2 = data[\"Defense\"].head()\ncon_data_col = pd.concat([df_1,df_2] , axis=1)\ncon_data_col","258d23e8":"data.dtypes","c8d755ca":"data[\"Type 1\"] = data[\"Type 1\"].astype(\"category\")\ndata.dtypes","b0c14429":"data[\"Type 2\"].value_counts(dropna = False)","14fecc8a":"data_1 = data.copy()\ndata_1[\"Type 2\"].dropna(inplace=True)","774f1826":"data_1[\"Type 2\"].notnull().all()","31db35f9":"data_2 = data.copy()\ndata_2[\"Type 2\"].fillna(\"empty\" , inplace=True)\ndata_2[\"Type 2\"].notnull().all()","98462217":"liste = [1,2,3, np.nan,5,np.nan,np.nan,8,9]\nsayi_df = pd.DataFrame(liste , columns=[\"values\"])\nsayi_df\n","b2f2a314":"sayi_df= sayi_df.interpolate(\"linear\")\nsayi_df","e4f34c52":"data.head()","b64411e0":"df = data.set_index(\"#\")\ndf.index.name = \"Index\"\ndf.head()","5cbdc411":"df[[\"HP\" , \"Attack\" , \"Defense\"]].head()","f95fd924":"df.loc[1:10 , : \"Defense\"]","058f2457":"df[(df.Attack > 170)  & (df.Legendary == True)]\n","7b1974e7":"df.HP[(df.Attack > 170)  & (df.Legendary == True)]","82551da1":"def div(n):\n    return n\/2\ndf.HP[(df.Attack > 170)  & (df.Legendary == True)].apply(div)","2d14cd5b":"df.HP[(df.Attack > 170)  & (df.Legendary == True)].apply(lambda n:n\/2)","662412c9":"df = df.set_index([\"Type 1\" , \"Type 2\"])\ndf.head(50)","ff0e0c69":"df= df.swaplevel(0,1)\ndf","a1f24b2c":"* Eksik veriyi doldurmak","9c8b9974":"Eksik veriler ortadan kald\u0131r\u0131ld\u0131.","4e6001c4":"## Visual Exploratory Data Analysis","50196211":"* Y\u00f6ntem 2 :","67b856b3":"* For d\u00f6ng\u00fcs\u00fcyle feature \u00fczerinde gezinmek","07e3c7dd":"**\u0130ki ko\u015ful ile filtreleme**","431a8a11":"### Pivoting Data\n\n* Melt edilen veriyi eski haline getirmekl","9183456e":"# Matplotlib\n\n* **Line Plot : ** E\u011fer x ekseni zamansa kullan\u0131lmas\u0131 uygundur.\n* **Scatter Plot : ** \u0130ki feature aras\u0131nda correlation olup olmad\u0131\u011f\u0131n\u0131 anlamak i\u00e7in kullan\u0131lmas\u0131 uygundur.\n* **Histogram Plot : ** Bir datan\u0131n distribution\u0131n\u0131 yani s\u0131kl\u0131\u011f\u0131n\u0131(frekans\u0131n\u0131) anlamak i\u00e7in kullan\u0131lmas\u0131 uygundur.\n","89dd6c11":"head fonksiyonu ile ilk 10 datay\u0131 getirir.","9073b12d":"* Y\u00f6ntem 1 :","ef6b2f3c":"* Seaborn ile boxplot","e23a7b6d":"### DataFrame Filtreleme","d57de3ab":"* 386 tane Type 2 \u00f6zelli\u011fi olmayan pokemon var.","3520fc0b":"* corr() fonksiyonu bize featurelar aras\u0131ndaki korelasyonu verir.\n* seaborn k\u00fct\u00fcphanesine ait heatmap fonksionu correlation tablosunu g\u00f6rselle\u015ftirir.\n\n    **1.** annot = True heat map i\u00e7erisinde oranlar\u0131 g\u00f6ster demektir.\n\n    **2.** linewidths = .5 demek aras\u0131ndaki line kal\u0131nl\u0131\u011f\u0131n\u0131 ayarlamay\u0131 sa\u011flar.\n    \n    **3.** fmt= '.1f'  g\u00f6sterilecek oran miktarlar\u0131n\u0131n virg\u00fcl sonras\u0131 1 hane g\u00f6sterilmesini sa\u011flamakt\u0131r.\n","4f86c297":"### Data Types","71336b7d":"columns ile data sette yer alan featurelar\u0131 g\u00f6rebiliriz.","bc9e9642":"### Tidy Data","6a0d3a08":"# Cleaning Data\n\nBir veri setinde kolon adlar\u0131n\u0131n standart formatta olmamas\u0131 (B\u00fcy\u00fckl\u00fc k\u00fc\u00e7\u00fckl\u00fc yaz\u0131, bo\u015fluklulu isimlendirmeler vb.), eksik veriler ve farkl\u0131 diller kullan\u0131ld\u0131\u011f\u0131nda bozukluk olu\u015fur. Bunlar\u0131 tespit edip d\u00fczeltmek ya da temizlemek gerekir. ","57395b05":"# Pandas\n\nVeri biliminde dosyalar\u0131 import etmek gerekmektedir. Bu dosyalar genellikle CSV (Comma-Separated-Value) format\u0131nda olmaktad\u0131r. ","1d16aa1f":"* \u0130ndeks de\u011feri # ile verilirken bir de pandas ekledi. Bunu kald\u0131rmak i\u00e7in;","f0135f3b":"## Concatenating Data","92da1e28":"* Matplotlib ile boxplot","f178a813":"* Say\u0131sal \u00f6zellikleri incelemek i\u00e7in describe kullan\u0131l\u0131r.","df39a3fb":"* Ayk\u0131r\u0131 de\u011ferler varsa medyana bakmak , ortalamadan daha do\u011fru kararlar sunar. ","96d7c4ac":"### Correlation Map\n* Featurelar aras\u0131ndaki ili\u015fkiyi anlamam\u0131z\u0131 sa\u011flar.\n* E\u011fer iki feature aras\u0131nda korelasyon 1 ise bu iki feature aras\u0131nda do\u011fru orant\u0131 var demektir.\n\n* **Pozitif Correlatet :** Bir evin oda say\u0131s\u0131 artarsa fiyat\u0131 artar. Oda say\u0131s\u0131 ve fiyat aras\u0131 pozitif correlatet vard\u0131r. (1 veya 1'e yak\u0131nsa)\n\n* **Negatif Correlatet :** Bir evin \u015fehir merkezine olan uzakl\u0131\u011f\u0131 artt\u0131k\u00e7a fiyat\u0131 d\u00fc\u015fer. \u015eehir merkezine uzakl\u0131k ve fiyat aras\u0131 negatif correlatet vard\u0131r. (-1 veya yak\u0131n \u00e7\u0131karsa )\n\n* **S\u0131f\u0131r \u00e7\u0131kan correlation ili\u015fki yok demektir.**\n","52c44081":"**Tek ko\u015ful ile filtreleme**","71f29bed":"* Ye\u015fil dikd\u00f6rtgenin sol kenar\u0131 Q1 - lower quartile\n* Ye\u015fil dikd\u00f6rtgenin ortas\u0131ndaki \u00e7izgi Q2 - medyan\n* Ye\u015fil dikd\u00f6rtgenin sa\u011f kenar\u0131 Q3 - upper quartile\n* En soldaki dik \u00e7izi minimum de\u011fer\n* En sa\u011fdaki dik \u00e7izgi maksimum de\u011fer\n* D\u00f6rtgen olarak verilen k\u00fc\u00e7\u00fck \u015fekiller ayk\u0131r\u0131 de\u011ferleri yani outlierlar\u0131 temsil eder.\n\n* IQR = Q3 - Q1 kabul edilir. \n\n  Minimum De\u011fer = Q1 - 1,5 IQR\n\n  Maximum De\u011fer = Q3 + 1,5 IQR","5c34e268":"Attack ile defense do\u011fru orant\u0131l\u0131d\u0131r.\n\n***Bir ba\u015fka scatter olu\u015fturma yolu***","63aa1536":"## Missing Data\n\nEksik veri \u00e7\u00f6z\u00fcm\u00fc\n\n* NaN olarak b\u0131rak\u0131labilir.\n* Eksik verilei data setten \u00e7\u0131karabiliriz.\n* Bo\u015f b\u0131rak\u0131ld\u0131ysa NaN ile doldurabiliriz. (fillna())\n* \u0130statistik de\u011ferlerle doldurabiliriz.\n\nBiri \u00f6zelli\u011fin de\u011ferlerini incelemek.","fa521ea3":"### Manip\u00fclasyon","3cc768a4":"## Explotary Data Analysiss (EDA)\n\n* Value_counts() : S\u0131kl\u0131k de\u011ferlerini verir.\n* Outlier : Ayk\u0131r\u0131 , ayr\u0131k demektir.\n* Medyan :  Say\u0131sal veriler s\u0131raland\u0131\u011f\u0131nda ortada kalan de\u011ferdir.\n* Q1 : Veri s\u0131raland\u0131\u011f\u0131nda %25'teki de\u011fer.\n* Q2 : Veri s\u0131raland\u0131\u011f\u0131nda %50'deki de\u011fer yani medyan.\n* Q3 : Veri s\u0131raland\u0131\u011f\u0131nda %75'deki de\u011fer.","68ef4870":"### Dataset ile ilgili temel bilgileri \u00e7ekmek","b85e10ef":"### CSV Formatl\u0131 Dosyay\u0131 Okuma","b169528e":"* interpolate(\"linear\") : Eksik de\u011ferleri lineer \u015fekilde doldurmay\u0131 sa\u011flar.","09343647":"<mark> Datadaki *Defense* \u00f6zelli\u011fi(feature) liste olarak al\u0131nmazsa DataFrame olu\u015fturmak yerine series olu\u015fturulur.","694622fd":"### Pandas Datatypelar\u0131 \n\nPandas k\u00fct\u00fcphanesinde veriler i\u00e7in series ve dataframe datatypelar\u0131 kullan\u0131lmaktad\u0131r.\n\n   * **Series:** Vekt\u00f6r \u015feklindeki verilerde kullan\u0131l\u0131r.\n\n   * **Dataframe:** Matris \u015feklindeki verilerde kullan\u0131l\u0131r."}}