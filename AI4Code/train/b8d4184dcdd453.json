{"cell_type":{"14885c17":"code","b6d25d46":"code","9f49bc04":"code","648a7306":"code","3b1ab132":"code","32817e1c":"code","329a98ad":"code","bd42deac":"code","845610b4":"code","da214766":"code","1d03fa95":"code","5a0b9e1e":"code","fef93dfb":"code","130a5da9":"code","c9f22626":"code","e5f42630":"code","f2870fd7":"code","e43e39de":"code","d20981cf":"code","61daea5f":"code","249f13af":"code","988ccf61":"code","e2d8145e":"code","1645f128":"code","fa36dce1":"code","1306f3bd":"code","719734fa":"code","ce7147c6":"code","d97fd144":"code","da792c09":"code","2bd55e17":"code","b5297f79":"markdown","960e07ae":"markdown","51701abe":"markdown","a7ea2f02":"markdown","d56878f1":"markdown","de58dc0a":"markdown","17c6c557":"markdown","0d541bed":"markdown","68b4ea30":"markdown","e6067ddf":"markdown","38d26a0e":"markdown","a65ceaf2":"markdown","bd9cea85":"markdown","59c38c7a":"markdown","c5c3c1af":"markdown","bd212baf":"markdown","b0bb8ab3":"markdown","50a9a653":"markdown","58c4b664":"markdown","084392f2":"markdown","42ac4e4d":"markdown","08db2bbd":"markdown","0ffc5b62":"markdown","fba07fe3":"markdown","48b49749":"markdown"},"source":{"14885c17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6d25d46":"## import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport warnings\nwarnings.filterwarnings(\"ignore\") ## ignore warnings","9f49bc04":"## import train dataset\ndf_train = pd.read_csv(\"..\/input\/mercedes-benz-greener-manufacturing\/train.csv.zip\")\n\n## Quick peak on train dataset\nprint(\"Shape of Train Dataset : {}\".format(df_train.shape))\ndf_train.head()","648a7306":"## import test dataset\ndf_test = pd.read_csv(\"..\/input\/mercedes-benz-greener-manufacturing\/test.csv.zip\")\n\n## Quick peak on test dataset\nprint(\"Shape of Test Dataset : {}\".format(df_test.shape))\ndf_test.head()","3b1ab132":"## Drop ID column\ndf_train = df_train.drop(\"ID\",axis=1)\ndf_test = df_test.drop(\"ID\",axis=1)","32817e1c":"## Quantitative data\nquantitative_data = [feat for feat in df_train if df_train[feat].dtype != np.object]\n\nprint(\"A total of {} quantitative columns\".format(len(quantitative_data)))\nprint(quantitative_data)","329a98ad":"## Continuous data\ncontinuous_feats = [feat for feat in quantitative_data if df_train[feat].nunique() > 25]\n\ncontinuous_feats","bd42deac":"## Discrete data\ndiscrete_feats = [feat for feat in quantitative_data if df_train[feat].nunique() <= 25]\n\ndiscrete_feats","845610b4":"## Binary Data\nbinary_feats = [feat for feat in discrete_feats if df_train[feat].nunique() == 2]\n\n## One_unique_feats\none_uni_feats = [feat for feat in discrete_feats if df_train[feat].nunique() == 1]\n\nprint(\"Number of Binary column: {}\".format(len(binary_feats)))\nprint(\"Number of One unique column: {}\".format(len(one_uni_feats)))","da214766":"zero_value = []\none_value = []\n\nfor col in binary_feats:\n    zero_value.append(df_train[col].value_counts(normalize=True).loc[0])\n    one_value.append(df_train[col].value_counts(normalize=True).loc[1])\n\ncount = len(binary_feats)\nidx = np.arange(count)\nbar_width = 0.5\n\nplt.figure(figsize=(6,125))\np1 = plt.barh(idx,zero_value,bar_width,color=\"red\")\np2 = plt.barh(idx,one_value,bar_width,left=zero_value, color=\"black\")\nplt.yticks(idx,binary_feats)\nplt.legend((p1[0], p2[0]), ('Zero count', 'One Count'))\nplt.show()","1d03fa95":"## Qualitative Data\nqualitative_data = [feat for feat in df_train if df_train[feat].dtype == np.object]\nprint(\"A total of {} qualitative columns\".format(len(qualitative_data)))\nprint(qualitative_data)","5a0b9e1e":"## Visualization of qualitative columns\nfor col in qualitative_data:\n    fig, ax = plt.subplots(1,1,figsize=(16,5))\n    sns.boxplot(df_train[col],df_train[\"y\"],ax=ax)\n    ax.set_xticklabels(ax.get_xticklabels(),rotation=90)\n    plt.show()","fef93dfb":"## Assign to Dataframe\ndf_check = pd.DataFrame()\ndf_check[\"Missing Values\"] = df_train.isnull().sum()\ndf_check[\"Number of Unique Values\"] = df_train.nunique()\n\n#Have a look on the dataframe\nprint(\"Presence of missing values = {}\".format(any(df_check[\"Missing Values\"] > 0)))","130a5da9":"## extraction of dependant variable\ny = df_train[\"y\"]\n\n## drop\ndf_train = df_train.drop(\"y\",axis=1)","c9f22626":"# Create a new column \"train\" for easier for separate the data later\ndf_train[\"train\"] = 1 # 1 indicates train data)\ndf_test[\"train\"] = 0 # 0 indicates test data)\n# Combination of both test and train\ndf_all = pd.concat([df_train,df_test],axis=0)","e5f42630":"## Let's have a look on \"y\" normal distribution\nplt.figure(figsize=(12,9))\nsns.distplot(y)\nplt.title(\"Before Normalization\")\nplt.show()\nprint(\"Skewness: {}\".format(y.skew()))","f2870fd7":"## Normalize dependant variable\ny_norm = np.log1p(y)\n\n## Visualization\nplt.figure(figsize=(12,9))\nsns.distplot(y_norm)\nplt.title(\"After Normalization\")\nplt.show()\nprint(\"Skewness: {}\".format(y.skew()))","e43e39de":"# a = [f for f in df_all if df_all[f].nunique() == 1]\n# print(a)\n# a = []\n# for f in df_all:\n#     if df_all[f].nunique() == 1:\n#         a.append(f)\n# print(a)\n# df_all[\"X1\"].nunique()","d20981cf":"## Shape of dataset before the removal of one unique feats\nprint(\"Shape of the whole dataset before the removal: {}\".format(df_all.shape))\n\n## Removal of one unique feats\none_uni_feats = [feat for feat in df_all.columns if df_all[feat].nunique() == 1]\ndf_all = df_all.drop(one_uni_feats,axis=1)\n\n## Shape of dataset after the removal of one unique feats\nprint(\"Shape of the whole dataset after the removal: {}\".format(df_all.shape))","61daea5f":"threshold = 0.9 ## A unique value that consist more 90% of the feature is consider as biased\n\n## Indentify biased features \nbias_feat = []\nfor col in df_all:\n    feat = df_all[col].value_counts(normalize=True,dropna=False).values[0] > 0.9\n    if feat == True:\n        bias_feat.append(col)\n\n## Remove them\ndf_all.drop(bias_feat,axis=1)\n\n## Let's check on the shape of the whole dataset\nprint(\"Shape: {}\".format(df_all.shape))","249f13af":"##Label encode qualitative data\nfrom sklearn.preprocessing import LabelEncoder #Library for LabelEncoding\nlbl_encoder = LabelEncoder()\n\nfor col in qualitative_data:\n    encoded = lbl_encoder.fit_transform(df_all[col])\n    df_all[col] = encoded","988ccf61":"# df_train data\ndf_train = df_all.loc[df_all[\"train\"]== 1,:]\ndf_train.drop(\"train\",axis=1,inplace=True)\n\n# df_test data\ndf_test = df_all.loc[df_all[\"train\"]== 0,:] \ndf_test.drop(\"train\",axis=1,inplace=True)","e2d8145e":"## import necessary package\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n## Split the data into train and test set\nX_train, X_test, y_train, y_test =  train_test_split(df_train,y,test_size=0.33,random_state=42)\n\n\n## Check on the dataset shape\nprint(\"Shapes: \", X_train.shape, X_test.shape, y_train.shape, y_test.shape)","1645f128":"## import models\nfrom sklearn.ensemble import ExtraTreesRegressor, GradientBoostingRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor","fa36dce1":"## Create a list for store each individual best estimator\nbest_estimators = []","1306f3bd":"## parameters\nparams = {\n    \"learning_rate\": [.1, .5],\n    \"colsample_bytree\": [.3,.5,],\n    \"max_depth\": [2, 4],\n    \"alpha\": [3, 5],\n    \"subsample\": [.5],\n    \"n_estimators\": [30, 70],\n    \"random_state\" : [42]\n}\n\n## XGBoost Regressor\nXGBR =  XGBRegressor()\nXGBR_grid = GridSearchCV(XGBR, params, scoring='r2', cv=7, n_jobs=-1)\nXGBR_grid.fit(X_train, y_train)\n\n## Output\nprint(\"Best parameters:  {}:\".format(XGBR_grid.best_params_))\nprint(\"Best score: {}\".format(XGBR_grid.best_score_))\n\n## Append to list\nbest_estimators.append([\"XGBoostR\",XGBR_grid.best_estimator_])","719734fa":"## Parameters\nparams = {\n    \"max_depth\": [\"None\",10],\n    \"max_features\": [\"auto\",.3, .4],\n    \"min_samples_leaf\": [3,7],\n    \"min_samples_split\": [2, 4],\n    \"n_estimators\": [50, 100],\n    \"random_state\" : [42]\n}\n\n## ExtraTreesRegressor\nETR = ExtraTreesRegressor()\nETR_grid = GridSearchCV(ETR, params, scoring='r2', cv=7, n_jobs=-1)\nETR_grid.fit(X_train, y_train)\n\n## Output\nprint(\"Best parameters:  {}:\".format(ETR_grid.best_params_))\nprint(\"Best score: {}\".format(ETR_grid.best_score_))\n\n## Append to list\nbest_estimators.append([\"ExtraTreesR\",ETR_grid.best_estimator_])","ce7147c6":"## Parameters\nparams = {\n    \"max_depth\": [2, 3],\n    \"max_features\": [\"auto\",0.3],\n    \"min_samples_leaf\": [1,3],\n    \"min_samples_split\": [2, 5],\n    \"n_estimators\": [50, 100],\n    \"random_state\" : [42],\n    \"tol\" : [0.0001,0.01]\n}\n\n## GradientBoostingRegressor\nGBR = GradientBoostingRegressor()\nGBR_grid = GridSearchCV(GBR, params, scoring='r2', cv=7, n_jobs=-1)\nGBR_grid.fit(X_train, y_train)\n\n## Output\nprint(\"Best parameters:  {}:\".format(GBR_grid.best_params_))\nprint(\"Best score: {}\".format(GBR_grid.best_score_))\n\n## Append to list\nbest_estimators.append([\"GradientBoostR\",GBR_grid.best_estimator_])","d97fd144":"## import necessary libraries for evaluation\nfrom sklearn.model_selection import cross_val_score,KFold\n\n## create an empty dataframe to store estimator's cross_validation_score\nevaluate = pd.DataFrame(columns=[\"model\",\"std\",\"cv_mean\",\"cv_median\"])#note: \"cv\" for mean cv & \"cv_all\" for later visualization use\n\nfor name,estimator in best_estimators:\n    kfold = KFold(n_splits=10,random_state=42,shuffle=True)\n    cv = cross_val_score(estimator,X_train,y_train,cv=kfold,n_jobs=-1,scoring=\"r2\")\n    \n    row = evaluate.shape[0]\n    evaluate.loc[row,\"model\"] = name\n    evaluate.loc[row,\"cv_mean\"] = round(cv.mean(),3)\n    evaluate.loc[row,\"cv_median\"] = round(np.median(cv),3)\n    evaluate.loc[row,\"std\"] = \"+\/- {}\".format(round(cv.std(),4))\n    \n    evaluate = evaluate.sort_values(\"cv_mean\",ascending=False)\n\nevaluate","da792c09":"## Visualization\nfig,ax = plt.subplots(1,1,figsize=(12,9))\nbar = sns.barplot(evaluate[\"model\"],evaluate[\"cv_mean\"],ax=ax,palette=sns.color_palette(\"rocket\"))\nfor rec in bar.patches:\n    height = rec.get_height()\n    ax.text(rec.get_x() + rec.get_width()\/2, height *1.02, height,ha=\"center\")\nplt.show()","2bd55e17":"## Optimal XGBRegressor Estimator\nXBGR = XGBR_grid.best_estimator_\nXBGR.fit(df_train,y)\n\n## Submission\n\nsubmission = pd.read_csv(\"..\/input\/mercedes-benz-greener-manufacturing\/sample_submission.csv.zip\")\nsubmission.iloc[:,1] = XBGR.predict(df_test)\n\nsubmission.to_csv('submission', index=False)\n\n## Print out the first five row of the submission\nsubmission.head()","b5297f79":"## Model Building\n### Train_test_split\nThe dataset are split into X_train,X_test, y_train, y_test","960e07ae":"### Label Encode Qualitative Data\n","51701abe":"### Visualization on Binary Data","a7ea2f02":"Extract the dependant variable \"y\" out and drop it from the quantitative features.","d56878f1":"### Normalization of Dependant Variable - \"y\"","de58dc0a":"Our targer variable is a continuous data.","17c6c557":"### GridSearchCV Best Parameters for Below Models\nSearching for the optimal predefined hyperparameters for each individual estimator.\n1. XGBoost Regressor\n1. ExtraTreeRegressor\n1. GradientBoostingRegressor","0d541bed":"### Evaluation the Optimized Estimators","68b4ea30":"## Data Processing","e6067ddf":"### Quantitative and Qualitative Data","38d26a0e":"#### XGBRegressor","a65ceaf2":"We should be choosing the XGBoostRegressor estimator. Now let's train estimator with the whole training dataset and make prediction.","bd9cea85":"### Removal of One Unique Values\n","59c38c7a":"### Visualization of Estimator's CV score\nVisualize the each estimator mean in bar charts","c5c3c1af":"### Split The Data Back into Train and Test Dataset","bd212baf":"#### ExtraTreesRegressor","b0bb8ab3":"## Submission","50a9a653":"### Eliminating Biased Feature\nFeature with biased data would negatively affect a model.","58c4b664":"### Quick Peak","084392f2":"Two types of Quantitative data:\n\n1. Continuous data: Numerical data that can take on any values. A great example would be the the height of a person. Donald is 6 foot or 182.88cm tall.\n\n1. Discrete data: Numerical data that has specific values. A great example would be the number of dogs. The number of dogs are counted as 1 dog, 2 dogs, 3 dogs. There is no such thing as 0.5 dog.\n","42ac4e4d":"#### GradientBoostingRegressor","08db2bbd":"### Missing Values ","0ffc5b62":"****Binary data****: Numerical data or categorical data that has two unique values represents one of two conceptually opposed values. Eg. \"Success\" or \"Failure\" (in categorical data), \"1\" or \"0\" (in numerical data).\n\n****One Unique Value Column****: Any column in the dataset that contain only the same value. One unique value column will not help to your model to differentiate between two different labels instead it can even negatively affect your model by creating bias in the data.\n\n\n\nDetermine whether the discrete features consists of binary data or one unique value column","fba07fe3":"# Outline of This Notebook\n1. ### EDA - Exploratory Data Analysis\n    1. [Quick Peak](#Quick-Peak)\n    1. [Quantitative and Qualitative Data](#Quantitative-and-Qualitative-Data)\n    1. [Visualization on Binary Data](#Visualization-on-Binary-Data)\n    1. [Missing Values](#Missing-Values)\n    \n1. ### Data Processing\n    1. [Normalization of Dependant Variable - \"y\"](#Normalization-of-Dependant-Variable---\"y\")\n    1. [Removal of One Unique Values](#Removal-of-One-Unique-Values)\n    1. [Eliminating Biased Feature](#Eliminating-Biased-Feature)\n    1. [Split The Data Back into Train and Test Dataset](#Split-The-Data-Back-into-Train-and-Test-Dataset)\n    \n1. ### Model Building\n    1. [Train_test_split](#Train_test_split)\n    1. [GridSearchCV Best Parameters for Below Models](#GridSearchCV-Best-Parameters-for-Below-Models)\n    1. [Evaluation the Optimized Estimators](Evaluation-the-Optimized-Estimators)\n    1. [Visualization of Estimator's CV score](Visualization-of-Estimator's-CV-score)\n    \n    \n## [Submission](#Submission)","48b49749":"There's a total of 8 qualitative and 368 quantitative features in this dataset"}}