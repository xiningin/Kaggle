{"cell_type":{"fd251f66":"code","87488678":"code","5d96e5cc":"code","62804e01":"code","0181f0f8":"code","ce10ca22":"code","48a0ba4b":"code","f48b963c":"code","ad688811":"code","f601f81a":"code","c42d41a1":"code","2a0ecd27":"code","f102aa98":"code","5d432cf8":"code","710df4db":"code","80bb73e1":"code","06cb7425":"code","f145732e":"code","af2330b7":"code","479da9e4":"markdown","3305a879":"markdown","c44e9728":"markdown","39321471":"markdown","c5cd7dfc":"markdown"},"source":{"fd251f66":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.linear_model import LinearRegression\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.metrics import mean_squared_log_error","87488678":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')\nss = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv')","5d96e5cc":"train[['Country\/Region', 'Province\/State']] = train[['Country\/Region', 'Province\/State']].fillna('None')\ntest[['Country\/Region', 'Province\/State']] = test[['Country\/Region', 'Province\/State']].fillna('None')","62804e01":"train.head()","0181f0f8":"train.shape","ce10ca22":"test.head()","48a0ba4b":"ss.head()","f48b963c":"print(ss.shape)","ad688811":"train['Country\/Region'].value_counts(dropna=False)","f601f81a":"train['Province\/State'].value_counts(dropna=False)","c42d41a1":"train['Date'].max(), test['Date'].min()","2a0ecd27":"valid = train[train['Date'] >= test['Date'].min()]\ntrain = train[train['Date'] < test['Date'].min()]","f102aa98":"log_target = True\nplot = False\n\ntest['ConfirmedCases'] = np.nan\ntest['Fatalities'] = np.nan\n\ncountries = train['Country\/Region'].unique()\ntest_countries = test['Country\/Region'].unique()\n\npredictions = []\nfor c in tqdm(countries):\n    train_df = train[train['Country\/Region'] == c]\n    provinces = train_df['Province\/State'].unique()\n    \n    if c in test_countries:\n        test_df = test[test['Country\/Region'] == c]\n        test_provinces = test_df['Province\/State'].unique()\n    \n        for p in provinces:\n            train_df_p = train_df[train_df['Province\/State'] == p]\n            test_df_p = test_df[test_df['Province\/State'] == p]\n            \n            confirmed = train_df_p['ConfirmedCases'].values[-10:]\n            fatalities = train_df_p['Fatalities'].values[-10:]\n\n            if log_target:\n                confirmed = np.log1p(confirmed)\n                fatalities = np.log1p(fatalities)\n\n            if np.sum(confirmed) > 0:            \n                x = np.arange(len(confirmed)).reshape(-1, 1)\n                x_test = len(confirmed) + np.arange(len(test_df_p)).reshape(-1, 1)\n                \n                model = LinearRegression()\n                model.fit(x, confirmed)\n                p_conf = model.predict(x_test)\n                p_conf = np.clip(p_conf, 0, None)\n                p_conf = p_conf - np.min(p_conf) + confirmed[-1]\n                if log_target:\n                    p_conf = np.expm1(p_conf)\n                test.loc[(test['Country\/Region'] == c) & (test['Province\/State'] == p), 'ConfirmedCases'] = p_conf\n                \n                model = LinearRegression()\n                model.fit(x, fatalities)\n                p_fatal = model.predict(x_test)\n                p_fatal = np.clip(p_fatal, 0, None)\n                p_fatal = p_fatal - np.min(p_fatal) + fatalities[-1]\n                if log_target:\n                    p_fatal = np.expm1(p_fatal)\n                test.loc[(test['Country\/Region'] == c) & (test['Province\/State'] == p), 'Fatalities'] = p_fatal\n                \n                if plot:\n                    plt.figure();\n                    plt.plot(x, confirmed);\n                    plt.plot(x, fatalities);\n                    plt.plot(x_test, p_conf);\n                    plt.plot(x_test, p_fatal);\n                    plt.title(c + ', ' + p);\n            \ntest[['ConfirmedCases', 'Fatalities']] = test[['ConfirmedCases', 'Fatalities']].fillna(0)","5d432cf8":"valid.sort_values(['Country\/Region', 'Province\/State', 'Date'], inplace=True)\npreds = test.sort_values(['Country\/Region', 'Province\/State', 'Date'])\npreds = valid[['Country\/Region', 'Province\/State', 'Date']].merge(preds, on=['Country\/Region', 'Province\/State', 'Date'], how='left')\n\nscore_c = np.sqrt(mean_squared_log_error(valid['ConfirmedCases'].values, preds['ConfirmedCases']))\nscore_f = np.sqrt(mean_squared_log_error(valid['Fatalities'].values, preds['Fatalities']))\n\nprint(f'score_c: {score_c}, score_f: {score_f}, mean: {np.mean([score_c, score_f])}')","710df4db":"pd.concat([valid.reset_index().drop('index', axis=1), \n           preds.reset_index()[['ConfirmedCases', 'Fatalities']].rename({'ConfirmedCases': 'ConfirmedCases_p', 'Fatalities': 'Fatalities_p'}, axis=1)], axis=1)","80bb73e1":"valid.shape, preds.shape","06cb7425":"plt.figure(figsize=(12, 8))\nplt.plot([0, 70000], [0, 70000], 'black')\nplt.plot(preds['ConfirmedCases'], valid['ConfirmedCases'], '.')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.grid()\n\nplt.figure(figsize=(12, 8))\nplt.plot([0, 3500], [0, 3500], 'black')\nplt.plot(preds['Fatalities'], valid['Fatalities'], 'r.')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.grid()","f145732e":"submission = test[['ForecastId', 'ConfirmedCases', 'Fatalities']]\nsubmission.to_csv('submission.csv', index=False)\nprint(submission.shape)","af2330b7":"submission.head()","479da9e4":"## Build a simple model","3305a879":"## Load and preview Data","c44e9728":"# Evaluate predictions","39321471":"## Exclude leaking data","c5cd7dfc":"## Prepare submission"}}