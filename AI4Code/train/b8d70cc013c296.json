{"cell_type":{"c82f2d85":"code","bdb5f861":"code","dce73115":"code","beb9f75c":"code","1a4386d4":"code","25cab13a":"code","0aa5af67":"code","c40be7ec":"code","4e1d2f80":"code","812851a4":"code","568f6528":"code","1cc07b6e":"code","65f8a034":"code","d7241009":"code","8db7142b":"code","14ea6f12":"code","14f59e71":"code","e1038a90":"code","ac310986":"code","98988eef":"code","8899d347":"code","cfd74edc":"code","cd8c94ca":"code","94bd524a":"code","d19cd7a0":"code","c0b9ed67":"code","fc37adde":"code","8540b1c1":"code","5878245a":"code","d73408ad":"code","f7749698":"code","859e18a9":"code","2b6c9e8a":"code","4c1e3e75":"code","a9d5a12c":"code","cc03c051":"code","21989db2":"code","d51b0edb":"code","07f1612d":"code","8ed41cbf":"code","9c4819c1":"code","ae6b28f5":"code","f6f8d89e":"code","bd1a7f57":"code","b961b7a7":"code","7cc7f745":"code","2d30eada":"code","7cad00b4":"code","9ddeff98":"code","03c61ee8":"code","b2165da5":"code","89925980":"code","27110521":"code","1b32ec73":"code","f96e79fd":"code","1b0deba9":"code","b1469e0c":"code","dfcf8704":"markdown","9f928614":"markdown","a3566f29":"markdown","feb343c6":"markdown","c342b8c6":"markdown","528c524a":"markdown","620a4e69":"markdown","32ed7fbd":"markdown","24b100a7":"markdown","c697494b":"markdown","fb6737ac":"markdown","962475fe":"markdown","25bd03d4":"markdown","06b5a884":"markdown","bbf86761":"markdown","2fcf43bf":"markdown","c70292cf":"markdown"},"source":{"c82f2d85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdb5f861":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","dce73115":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","beb9f75c":"# import models\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC,LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score as cv","1a4386d4":"train.head(10)","25cab13a":"train.info()","0aa5af67":"test.info()","c40be7ec":"train.describe()","4e1d2f80":"train.describe(include=['O'])","812851a4":"train.groupby(['Pclass'],as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","568f6528":"train.groupby(['Sex'],as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","1cc07b6e":"train.groupby(['Parch'],as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","65f8a034":"train.groupby(['SibSp'],as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","d7241009":"grph = sns.FacetGrid(train,col='Survived')\ngrph.map(plt.hist,'Age',alpha=0.5,bins=20)","8db7142b":"grph=sns.FacetGrid(train,col='Survived',row='Pclass')\ngrph.map(plt.hist,'Age',bins=20,alpha=0.5)","14ea6f12":"grph = sns.FacetGrid(train,row='Embarked',size=2.2,aspect=1.6)\ngrph.map(sns.pointplot,'Pclass','Survived','Sex',palette='deep')\ngrph.add_legend()","14f59e71":"s=train.groupby(['Sex','Survived']).Survived.count()\nm_count=train.groupby(['Sex']).Survived.count()[1]\nf_count=train.groupby(['Sex']).Survived.count()[0]\n","e1038a90":"f=s.loc[('female')]\/f_count\nm=s.loc[('male')]\/m_count\nf","ac310986":"width=0.15\nplt.figure(figsize=(7,7))\nplt.title('Survived segmented rate by Gender')\n\nplt.bar(f.index,f,width,label=train.Sex.unique()[1])\nplt.bar(m.index+width,m,width,label=train.Sex.unique()[0])\nplt.xticks(m.index+width\/2,[0,1])\nplt.xlabel('Survived')\nplt.ylabel('rate')\nplt.legend(loc='best')\nplt.show()","98988eef":"grph=sns.FacetGrid(train,row='Embarked',col='Survived',size=2.6,aspect=1.6)\ngrph.map(sns.barplot,'Sex','Fare',alpha=0.8)\ngrph.add_legend()","8899d347":"dataset=[train,test]","cfd74edc":"for data in dataset:\n    data['Title']=data.Name.str.extract('([A-Za-z]+)\\.',expand=False)\npd.crosstab(train['Title'],train['Sex'])\n#train","cd8c94ca":"for data in dataset:\n    data['Title']=data['Title'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Rev','Sir'],'Rare')\n    data['Title']=data['Title'].replace(['Mlle','Ms'],'Miss')\n    data['Title']=data['Title'].replace('Mme','Mrs')\ntrain.groupby(['Title'],as_index=False).Survived.mean()","94bd524a":"title={'Mr':1,'Mrs':2,'Miss':3,'Master':4,'Rare':5}\nfor data in dataset:\n    data['Title']=data['Title'].map(title)\n    data['Title']=data['Title'].fillna(0)\ntrain","d19cd7a0":"train=train.drop(['Name','PassengerId'],axis=1)\ntest=test.drop(['Name'],axis=1)\ndataset=[train,test]\ntrain.shape,test.shape","c0b9ed67":"for data in dataset:\n    data['Sex']=data['Sex'].map({'male':0,'female':1}).astype(int)\ndata","fc37adde":"age=np.zeros((2,3))\nage","8540b1c1":"for data in dataset:\n    for i in range(0,2):\n        for j in range(0,3):\n            age_drop=data[(data['Sex']==i)&(data['Pclass']==j+1)].Age.dropna()\n            age_median=age_drop.median()\n            age[i,j] = int( age_median\/0.5 + 0.5 ) * 0.5\nfor data in dataset:\n    for i in range(0,2):\n        for j in range(0,3):\n            data.loc[(data.Age.isnull())&(data.Sex==i)&(data.Pclass==j+1),'Age']=age[i,j]\n            \ntrain","5878245a":"train['AgeBand']=pd.cut(train['Age'],5)\ntrain.groupby('AgeBand',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","d73408ad":"for data in dataset:\n    data.loc[data['Age']<=16,'Age']=0\n    data.loc[(data['Age']>16) & (data['Age']<=32),'Age']=1\n    data.loc[(data['Age']>32) & (data['Age']<=48),'Age']=2\n    data.loc[(data['Age']>48) & (data['Age']<=64),'Age']=3\n    data.loc[(data['Age']>64),'Age']=4\n    data['Age']=data['Age'].astype(int)\ntrain","f7749698":"train=train.drop(['AgeBand'],axis=1)\n#test=test.drop(['AgeBand'],axis=1)\ndataset=[train,test]","859e18a9":"train","2b6c9e8a":"for data in dataset:\n    data['Company']=data['SibSp']+data['Parch']+1\ntrain.groupby('Company',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","4c1e3e75":"for data in dataset:\n    data['IsAlone']=0\n    data.loc[data['Company']==1,'IsAlone']=1\ntrain.groupby('IsAlone',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","a9d5a12c":"train=train.drop(['SibSp','Parch','Company'],axis=1)\ntest=test.drop(['SibSp','Parch','Company'],axis=1)\ndataset=[train,test]\nprint(test.shape)\ntrain.shape","cc03c051":"freq=train.Embarked.dropna().mode()[0]\nfreq","21989db2":"for data in dataset:\n    data['Embarked']=data['Embarked'].fillna(freq)\ntrain.groupby('Embarked',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","d51b0edb":"for data in dataset:\n    data['Embarked']=data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\ntrain.groupby('Embarked',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","07f1612d":"test['Fare'].fillna(test['Fare'].dropna().median(), inplace=True)\ntest.head()","8ed41cbf":"train['FareBand']=pd.qcut(train['Fare'],4)\ntrain.groupby('FareBand',as_index=False).Survived.mean().sort_values(by='Survived',ascending=False)","9c4819c1":"for data in dataset:\n    data.loc[data['Fare']<=7.91,'Fare']=0\n    data.loc[(data['Fare']>7.91) & (data['Fare']<=14.45),'Fare']=1\n    data.loc[(data['Fare']>14.45) & (data['Fare']<=31),'Fare']=2\n    data.loc[data['Fare']>31,'Fare']=3\n    data['Fare']=data['Fare'].astype(int)\ntrain.groupby('Fare',as_index=False).Survived.mean().sort_values(by='Fare',ascending=False)","ae6b28f5":"train=train.drop('FareBand',axis=1)\nprint(train.shape)\ntest.shape","f6f8d89e":"train=train.drop(['Ticket','Cabin'],axis=1)\ntest=test.drop(['Ticket','Cabin'],axis=1)\ntrain.head()","bd1a7f57":"train['Age*Class'] = train.Age * train.Pclass\ntest['Age*Class'] = test.Age * test.Pclass\ntrain","b961b7a7":"X_train=train.drop('Survived',axis=1)\ny_train=train['Survived']\nX_test=test.drop('PassengerId',axis=1)","7cc7f745":"logreg=LogisticRegression()\nacc_log=cv(logreg,X_train,y_train,cv=5,scoring='accuracy').mean()\nlogreg.fit(X_train, y_train)\nacc_log","2d30eada":"coeff=pd.DataFrame(train.columns.delete(0))\ncoeff.columns=['Feature']\ncoeff['Correlation']=(logreg.coef_[0])\ncoeff.sort_values(by='Correlation',ascending=False)","7cad00b4":"svc = SVC(kernel='poly')\nacc_svc = cv(svc,X_train, y_train,cv=5,scoring='accuracy').mean()\nsvc.fit(X_train, y_train)\nY_pred = svc.predict(X_test)\nacc_svc","9ddeff98":"gbc=GradientBoostingClassifier(n_estimators=300)\nacc_gbc=cv(gbc,X_train,y_train,cv=5,scoring='accuracy').mean()\ngbc.fit(X_train,y_train)\nY_pred_Best=gbc.predict(X_test)\nacc_gbc","03c61ee8":"rfc=RandomForestClassifier(n_estimators=100)\nacc_rfc=cv(rfc,X_train,y_train,cv=5,scoring='accuracy').mean()\nrfc.fit(X_train,y_train)\nY_pred=rfc.predict(X_test)\nacc_rfc","b2165da5":"knn = KNeighborsClassifier(n_neighbors = 3)\nacc_knn=cv(knn,X_train,y_train,cv=5,scoring='accuracy').mean()\nknn.fit(X_train, y_train)\nY_pred = knn.predict(X_test)\nacc_knn","89925980":"linear_svc = LinearSVC()\nacc_linear_svc = cv(linear_svc,X_train, y_train,cv=5,scoring='accuracy').mean()\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc\n","27110521":"sgd = SGDClassifier()\nacc_sgd = cv(sgd,X_train, y_train,cv=5,scoring='accuracy').mean()\nsgd.fit(X_train, y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd","1b32ec73":"DT = DecisionTreeClassifier()\nacc_DT = cv(DT,X_train, y_train,cv=5,scoring='accuracy').mean()\nDT.fit(X_train, y_train)\nY_pred = DT.predict(X_test)\nacc_DT","f96e79fd":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', 'Gradient Boosting',\n              'Random Forest','Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, acc_gbc,\n              acc_rfc, acc_sgd, acc_linear_svc, acc_DT]})\nmodels.sort_values(by='Score', ascending=False)\n","1b0deba9":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred_Best\n    })","b1469e0c":"submission.to_csv('titanic_data.csv',index=False)\nprint('submission successful')","dfcf8704":"# LOAD DATASET","9f928614":"# Pre-analyse the test data:\nIn test data, Age, Fare and Cabin contains null value. 6 features are either int or float.","a3566f29":"# Create AgeBand","feb343c6":"# Create new feature artificially:","c342b8c6":"**Lets use the range from the above band. Applying cut in different dataset will make test set of different value**","528c524a":"# Take Fare and split it into ranges.","620a4e69":"# Impute missing values of categorical variable:","32ed7fbd":"# Import required libraries","24b100a7":"# Convert Categorical values","c697494b":"# Descriptive analysis of training data (only for the numerical variable):\nAround 40% of the total passenger is included in the training dataset. Of that 38% of the total survived rate is observed.","fb6737ac":"# Model Building","962475fe":"# Group by siblings and parents, create new feature:","25bd03d4":"# VISUALIZATION","06b5a884":"# Impute Missing Values of Numerical Continuous Feature","bbf86761":"# Descriptive analysis of categorical variable or ordinal variable.\nThere are missing values in Cabin and Embarked features. Ticket contains high duplicates value. Cabin has high missing values. Whereas Embarked contains 3 missing values.","2fcf43bf":"# Pre-analyse the training data:\nIn training dataset, features- Age, Cabin and Embarked contains null-value. And there are 7 either integers or floats datatypes.","c70292cf":"# Observe Dataset. \n**  First 10 rows are viewed**"}}