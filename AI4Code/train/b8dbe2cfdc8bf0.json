{"cell_type":{"9288a2be":"code","f6ede8c1":"code","9462abc8":"code","18db9dd1":"code","adc018de":"code","aacb5961":"code","a413ef43":"code","dcbedbe1":"markdown","67548380":"markdown","9bc4487d":"markdown","4106b831":"markdown","98d092de":"markdown"},"source":{"9288a2be":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.python.compiler.tensorrt import trt_convert as trt\n\nimport keras as ke\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\n\n#from keras.models import Model\n#from keras.models import Sequential\n#from keras.layers import Dense\n#from keras.layers import LSTM, CuDNNLSTM\n\nfrom sklearn.preprocessing import MinMaxScaler\nmin_max_scaler = MinMaxScaler()\n\nprint(tf.__version__)\nprint(ke.__version__)\nprint(\"ready\")","f6ede8c1":"df = pd.read_csv(\"..\/input\/historical_data_btc_only_close.csv\", delimiter=';')\ndf_norm = df\n\nprint(df_norm)","9462abc8":"prediction_days = 30\n\ndf_train= df[:len(df)-prediction_days]\ndf_test= df[len(df)-prediction_days:]\n","18db9dd1":"training_set = df_train.values\ntraining_set = min_max_scaler.fit_transform(training_set)\n\nx_train = training_set[0:len(training_set)-1]\ny_train = training_set[1:len(training_set)]\nx_train = np.reshape(x_train, (1, len(x_train), 1))\ny_train = np.reshape(y_train, (1, len(y_train), 1))\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(y_train)\nprint(x_train)","adc018de":"from tensorflow.python.compiler import tensorrt as trt\n\nnum_units = 4\nactivation_function = 'sigmoid'\noptimizer = 'RMSProp'\nloss_function = 'binary_crossentropy'\nbatch_size = 1 # Only 1 due to a problem where a size was requested by which the passed model can be divided. \nnum_epochs = 50\n\n# Initialize the RNN\nregressor = Sequential()\n\n# Adding the input layer and the LSTM layer\nregressor.add(LSTM(units = num_units, \n                   #activation = activation_function, \n                   input_shape=(None, 1), \n                   stateful=False, \n                   return_sequences=True,\n                   batch_input_shape=(1, None, 1)\n#                    input_shape=(1, len(x_train), 1)\n                  ))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = optimizer, loss = loss_function)\n\n# Using the training set to train the model\nimport time\nstart = time.time()\nregressor.fit(x_train, y_train, batch_size = batch_size, epochs = num_epochs)\nend = time.time()\nregressor.summary()\nprint(end - start)","aacb5961":"test_set = df_test.values\nprint(test_set.shape)\nshape1 = test_set.shape[0] \nshape2 = test_set.shape[1]\n\n\ninputs = np.reshape(test_set, (shape1, shape2))\nprint(inputs.shape)\n\ninputs = min_max_scaler.transform(inputs)\nprint(inputs.shape)\n\ninputs = np.reshape(inputs, (1, shape1, shape2))\nprint(inputs.shape)\n\npredicted_price = regressor.predict(inputs)\n\nprint(predicted_price.shape)\n# print((predicted_price))\n\npredicted_price = np.reshape(predicted_price, (shape1, shape2))\nprint(predicted_price.shape)\n\npredicted_price = min_max_scaler.inverse_transform(predicted_price)\n\nprint(predicted_price.size)\nprint(predicted_price)\nprint(test_set.size)\n\n# regressor.predict_proba\nfor i in range(0, prediction_days):\n    print(test_set[i][0],\"-\" , predicted_price[i][0],\"\\tDifference: \" ,test_set[i][0]-predicted_price[i][0])","a413ef43":"plt.figure(figsize=(25, 25), dpi=80, facecolor = 'w', edgecolor = 'k')\n\nplt.plot(test_set[:, 0], color='red', label='Real BTC Price')\nplt.plot(predicted_price[:, 0], color = 'blue', label = 'Predicted BTC Price')\n\nplt.title('BTC Price Prediction', fontsize = 40)\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('BTC Price(USD)', fontsize = 40)\nplt.legend(loc = 'best')\nplt.show()","dcbedbe1":"Shaping, scaling, starting prediction, printing the numbers. ","67548380":"Reshaping the sets like mentioned in \"Used Sources\" *2. ","9bc4487d":"# Bitcoin forecast with Keras\nAn attempt to predict the price of Bitcoin with Keras.\n\nBut I got some Problems.\n\n\n# # Used Sources\n\n* *1 This gave me apparently good results. [First steps and basis for forecasting](https:\/\/towardsdatascience.com\/bitcoin-price-prediction-using-lstm-9eb0938c22bd)\n* *2 But then I read this and tried the improvements mentioned. [For corrections and optimizations](https:\/\/stackoverflow.com\/questions\/48760472\/how-to-use-a-keras-rnn-model-to-forecast-for-future-dates-or-events)\n\nBoth of got me to the code and plot above.\n\n\n# # My questions now \n* How to get better results? \n* How to predict 1 to X days of the (real) future? How to get the \"unknown\"?\n\n","4106b831":"Splitting into test and train.","98d092de":"Reading CSV with Bitcoin-Close-Prices only."}}