{"cell_type":{"63de159b":"code","b757f433":"code","e58e77ed":"code","b876b0a1":"code","cbfb9f42":"code","585932c0":"code","c795c05d":"code","f8d06340":"code","cde8f252":"code","3104fcc1":"code","c7cf702b":"code","0410ae3c":"code","07d9ad00":"code","3f1c671e":"code","c14d00e0":"code","628e77f1":"code","368599aa":"code","d35018fd":"code","899090e8":"code","745c68c7":"code","fdd3be55":"code","1cf9b825":"code","c23f1f64":"code","4d92be08":"markdown","c2719959":"markdown","7d0ced34":"markdown","71a6cdaa":"markdown","5c2da4cd":"markdown","ac25b058":"markdown","88305759":"markdown","53b26d2f":"markdown","7318d4ba":"markdown","d93e9a92":"markdown","f59b2192":"markdown","271a1ee4":"markdown","adf71dec":"markdown","c2df8dcd":"markdown","5544b00e":"markdown","421111a2":"markdown","f117f2c6":"markdown","01155667":"markdown","1ff56814":"markdown","174b438b":"markdown"},"source":{"63de159b":"# in this notebook we'll only get one of the files (the Oscar one) for the sake of simplicity and performance\n!wget -c https:\/\/cdn-datasets.huggingface.co\/EsperBERTo\/data\/oscar.eo.txt","b757f433":"import transformers\n\ntransformers.__version__","e58e77ed":"# We won't need TensorFlow here\n!pip uninstall -y tensorflow\n# Install `transformers` from master\n!pip install git+https:\/\/github.com\/huggingface\/transformers\n!pip list | grep -E 'transformers|tokenizers'\n# transformers version at notebook update --- 2.11.0\n# tokenizers version at notebook update --- 0.8.0rc1","b876b0a1":"%%time \nfrom pathlib import Path\n\nfrom tokenizers import ByteLevelBPETokenizer\n\npaths = [str(x) for x in Path(\".\").glob(\"**\/*.txt\")]\n\n# Initialize a tokenizer\ntokenizer = ByteLevelBPETokenizer()\n\n# Customize training\ntokenizer.train(files=paths, vocab_size=52_000, min_frequency=2, special_tokens=[\n    \"<s>\",\n    \"<pad>\",\n    \"<\/s>\",\n    \"<unk>\",\n    \"<mask>\",\n])","cbfb9f42":"!mkdir EsperBERTo\ntokenizer.save_model(\"EsperBERTo\")","585932c0":"from tokenizers.implementations import ByteLevelBPETokenizer\nfrom tokenizers.processors import BertProcessing\n\n\ntokenizer = ByteLevelBPETokenizer(\n    \".\/EsperBERTo\/vocab.json\",\n    \".\/EsperBERTo\/merges.txt\",\n)","c795c05d":"tokenizer._tokenizer.post_processor = BertProcessing(\n    (\"<\/s>\", tokenizer.token_to_id(\"<\/s>\")),\n    (\"<s>\", tokenizer.token_to_id(\"<s>\")),\n)\ntokenizer.enable_truncation(max_length=512)","f8d06340":"tokenizer.encode(\"Mi estas Julien.\")","cde8f252":"tokenizer.encode(\"Mi estas Julien.\").tokens","3104fcc1":"# Check that we have a GPU\n!nvidia-smi","c7cf702b":"# Check that PyTorch sees it\nimport torch\ntorch.cuda.is_available()","0410ae3c":"from transformers import RobertaConfig\n\nconfig = RobertaConfig(\n    vocab_size=52_000,\n    max_position_embeddings=514,\n    num_attention_heads=12,\n    num_hidden_layers=6,\n    type_vocab_size=1,\n)","07d9ad00":"from transformers import RobertaTokenizerFast\n\ntokenizer = RobertaTokenizerFast.from_pretrained(\".\/EsperBERTo\", max_len=512)","3f1c671e":"from transformers import RobertaForMaskedLM\n\nmodel = RobertaForMaskedLM(config=config)","c14d00e0":"model.num_parameters()\n# => 84 million parameters","628e77f1":"%%time\nfrom transformers import LineByLineTextDataset\n\ndataset = LineByLineTextDataset(\n    tokenizer=tokenizer,\n    file_path=\".\/oscar.eo.txt\",\n    block_size=128,\n)","368599aa":"from transformers import DataCollatorForLanguageModeling\n\ndata_collator = DataCollatorForLanguageModeling(\n    tokenizer=tokenizer, mlm=True, mlm_probability=0.15\n)","d35018fd":"from transformers import Trainer, TrainingArguments\n\ntraining_args = TrainingArguments(\n    output_dir=\".\/EsperBERTo\",\n    overwrite_output_dir=True,\n    num_train_epochs=1,\n    per_gpu_train_batch_size=64,\n    save_steps=10_000,\n    save_total_limit=2,\n    prediction_loss_only=True,\n)\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    data_collator=data_collator,\n    train_dataset=dataset,\n)","899090e8":"%%time\ntrainer.train()","745c68c7":"trainer.save_model(\".\/EsperBERTo\")","fdd3be55":"from transformers import pipeline\n\nfill_mask = pipeline(\n    \"fill-mask\",\n    model=\".\/EsperBERTo\",\n    tokenizer=\".\/EsperBERTo\"\n)","1cf9b825":"# The sun <mask>.\n# =>\n\nfill_mask(\"La suno <mask>.\")","c23f1f64":"fill_mask(\"Jen la komenco de bela <mask>.\")\n\n# This is the beginning of a beautiful <mask>.\n# =>","4d92be08":"# How to train a new language model from scratch using Transformers and Tokenizers\n\n### Notebook edition (link to blogpost [link](https:\/\/huggingface.co\/blog\/how-to-train)). Last update May 15, 2020\n\n\nOver the past few months, we made several improvements to our [`transformers`](https:\/\/github.com\/huggingface\/transformers) and [`tokenizers`](https:\/\/github.com\/huggingface\/tokenizers) libraries, with the goal of making it easier than ever to **train a new language model from scratch**.\n\nIn this post we\u2019ll demo how to train a \u201csmall\u201d model (84 M parameters = 6 layers, 768 hidden size, 12 attention heads) \u2013 that\u2019s the same number of layers & heads as DistilBERT \u2013 on **Esperanto**. We\u2019ll then fine-tune the model on a downstream task of part-of-speech tagging.\n","c2719959":"### Start training","7d0ced34":"#### \ud83c\udf89 Save final model (+ tokenizer + config) to disk","71a6cdaa":"### Finally, we are all set to initialize our Trainer","5c2da4cd":"## 1. Find a dataset\n\nFirst, let us find a corpus of text in Esperanto. Here we\u2019ll use the Esperanto portion of the [OSCAR corpus](https:\/\/traces1.inria.fr\/oscar\/) from INRIA.\nOSCAR is a huge multilingual corpus obtained by language classification and filtering of [Common Crawl](https:\/\/commoncrawl.org\/) dumps of the Web.\n\n<img src=\"https:\/\/huggingface.co\/blog\/assets\/01_how-to-train\/oscar.png\" style=\"margin: auto; display: block; width: 260px;\">\n\nThe Esperanto portion of the dataset is only 299M, so we\u2019ll concatenate with the Esperanto sub-corpus of the [Leipzig Corpora Collection](https:\/\/wortschatz.uni-leipzig.de\/en\/download), which is comprised of text from diverse sources like news, literature, and wikipedia.\n\nThe final training corpus has a size of 3 GB, which is still small \u2013 for your model, you will get better results the more data you can get to pretrain on. \n\n","ac25b058":"Now let's save files to disk","88305759":"Like in the [`run_language_modeling.py`](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/examples\/language-modeling\/run_language_modeling.py) script, we need to define a data_collator.\n\nThis is just a small helper that will help us batch different samples of the dataset together into an object that PyTorch knows how to perform backprop on.","53b26d2f":"If you want to take a look at models in different languages, check https:\/\/huggingface.co\/models\n\n[![all models](https:\/\/huggingface.co\/front\/thumbnails\/models.png)](https:\/\/huggingface.co\/models)\n","7318d4ba":"### We'll define the following config for the model","d93e9a92":"\ud83d\udd25\ud83d\udd25 Wow, that was fast! \u26a1\ufe0f\ud83d\udd25\n\nWe now have both a `vocab.json`, which is a list of the most frequent tokens ranked by frequency, and a `merges.txt` list of merges.\n\n```json\n{\n\t\"<s>\": 0,\n\t\"<pad>\": 1,\n\t\"<\/s>\": 2,\n\t\"<unk>\": 3,\n\t\"<mask>\": 4,\n\t\"!\": 5,\n\t\"\\\"\": 6,\n\t\"#\": 7,\n\t\"$\": 8,\n\t\"%\": 9,\n\t\"&\": 10,\n\t\"'\": 11,\n\t\"(\": 12,\n\t\")\": 13,\n\t# ...\n}\n\n# merges.txt\nl a\n\u0120 k\no n\n\u0120 la\nt a\n\u0120 e\n\u0120 d\n\u0120 p\n# ...\n```\n\nWhat is great is that our tokenizer is optimized for Esperanto. Compared to a generic tokenizer trained for English, more native words are represented by a single, unsplit token. Diacritics, i.e. accented characters used in Esperanto \u2013 `\u0109`, `\u011d`, `\u0125`, `\u0135`, `\u015d`, and `\u016d` \u2013 are encoded natively. We also represent sequences in a more efficient manner. Here on this corpus, the average length of encoded sequences is ~30% smaller as when using the pretrained GPT-2 tokenizer.\n\nHere\u2019s  how you can use it in `tokenizers`, including handling the RoBERTa special tokens \u2013 of course, you\u2019ll also be able to use it directly from `transformers`.\n","f59b2192":"## 3. Train a language model from scratch\n\n**Update:** This section follows along the [`run_language_modeling.py`](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/examples\/legacy\/run_language_modeling.py) script, using our new [`Trainer`](https:\/\/github.com\/huggingface\/transformers\/blob\/master\/src\/transformers\/trainer.py) directly. Feel free to pick the approach you like best.\n\n> We\u2019ll train a RoBERTa-like model, which is a BERT-like with a couple of changes (check the [documentation](https:\/\/huggingface.co\/transformers\/model_doc\/roberta.html) for more details).\n\nAs the model is BERT-like, we\u2019ll train it on a task of *Masked language modeling*, i.e. the predict how to fill arbitrary tokens that we randomly mask in the dataset. This is taken care of by the example script.\n","271a1ee4":"## 4. Check that the LM actually trained","adf71dec":"## 2. Train a tokenizer\n\nWe choose to train a byte-level Byte-pair encoding tokenizer (the same as GPT-2), with the same special tokens as RoBERTa. Let\u2019s arbitrarily pick its size to be 52,000.\n\nWe recommend training a byte-level BPE (rather than let\u2019s say, a WordPiece tokenizer like BERT) because it will start building its vocabulary from an alphabet of single bytes, so all words will be decomposable into tokens (no more `<unk>` tokens!).\n","c2df8dcd":"Ok, simple syntax\/grammar works. Let\u2019s try a slightly more interesting prompt:\n\n","5544b00e":"Now let's re-create our tokenizer in transformers","421111a2":"Finally let's initialize our model.\n\n**Important:**\n\nAs we are training from scratch, we only initialize from a config, not from an existing pretrained model or checkpoint.","f117f2c6":"Finally, when you have a nice model, please think about sharing it with the community:\n\n- upload your model using the CLI: `transformers-cli upload`\n- write a README.md model card and add it to the repository under `model_cards\/`. Your model card should ideally include:\n    - a model description,\n    - training params (dataset, preprocessing, hyperparameters), \n    - evaluation results,\n    - intended uses & limitations\n    - whatever else is helpful! \ud83e\udd13\n\n### **TADA!**\n\n\u27a1\ufe0f Your model has a page on http:\/\/huggingface.co\/models and everyone can load it using `AutoModel.from_pretrained(\"username\/model_name\")`.\n\n[![tb](https:\/\/huggingface.co\/blog\/assets\/01_how-to-train\/model_page.png)](https:\/\/huggingface.co\/julien-c\/EsperBERTo-small)\n","01155667":"### Now let's build our training Dataset\n\nWe'll build our dataset by applying our tokenizer to our text file.\n\nHere, as we only have one text file, we don't even need to customize our `Dataset`. We'll just use the `LineByLineDataset` out-of-the-box.","1ff56814":"Aside from looking at the training and eval losses going down, the easiest way to check whether our language model is learning anything interesting is via the `FillMaskPipeline`.\n\nPipelines are simple wrappers around tokenizers and models, and the 'fill-mask' one will let you input a sequence containing a masked token (here, `<mask>`) and return a list of the most probable filled sequences, with their probabilities.\n\n","174b438b":"## 5. Share your model \ud83c\udf89"}}