{"cell_type":{"52c981df":"code","15cb15ba":"code","08b3f146":"code","2e44433a":"code","85264a46":"code","ebe304cd":"code","3eaf1abb":"code","f2156be6":"code","dd5f6b4f":"code","5420ff67":"code","059ca4a9":"code","ed51ed9e":"code","fb40d9a2":"markdown","91158b48":"markdown","430fc591":"markdown","b5d2b2eb":"markdown","7406e18d":"markdown","2e53676e":"markdown","e8da58f8":"markdown","9b89b565":"markdown","c0c35943":"markdown","035d918e":"markdown","212bc935":"markdown","632ff225":"markdown","48a6df3a":"markdown","efad492e":"markdown"},"source":{"52c981df":"import pandas as pd\nimport geopandas as gpd\nimport math","15cb15ba":"import folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","08b3f146":"m_1 = folium.Map(location=[42.32,-71.0589], tiles='openstreetmap', zoom_start=10)\nm_1","2e44433a":"crimes = pd.read_csv(\"..\/input\/crimes-in-boston\/crime.csv\", encoding='latin-1')\n\n# Drop rows with missing locations\ncrimes.dropna(subset=['Lat', 'Long', 'DISTRICT'], inplace=True)\n\n# Focus on major crimes in 2018\ncrimes = crimes[crimes.OFFENSE_CODE_GROUP.isin([\n    'Larceny', 'Auto Theft', 'Robbery', 'Larceny From Motor Vehicle', 'Residential Burglary',\n    'Simple Assault', 'Harassment', 'Ballistics', 'Aggravated Assault', 'Other Burglary', \n    'Arson', 'Commercial Burglary', 'HOME INVASION', 'Homicide', 'Criminal Harassment', \n    'Manslaughter'])]\ncrimes = crimes[crimes.YEAR>=2018]\n\n# Print the first five rows of the table\ncrimes.head()","85264a46":"daytime_robberies = crimes[((crimes.OFFENSE_CODE_GROUP == 'Robbery') & \\\n                            (crimes.HOUR.isin(range(7,23))))]","ebe304cd":"m_2 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=13)\n\nfor idx, row in daytime_robberies.iterrows():\n    Marker([row['Lat'], row['Long']]).add_to(m_2)\nm_2","3eaf1abb":"m_3 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=13)\n\nmc = MarkerCluster()\nfor idx, row in daytime_robberies.iterrows():\n    if not math.isnan(row['Long']) and not math.isnan(row['Lat']):\n        mc.add_child(Marker([row['Lat'], row['Long']]))\nm_3.add_child(mc)\n\n# Display the map\nm_3\n","f2156be6":"m_4 = folium.Map(location=[42.32,-71.0589], tiles=\"cartodbpositron\",zoom_start=15)\ndef color_val(val):\n    return 'forestgreen' if (val<=12) else \"darkred\"\n    \nfor i in range(0,len(daytime_robberies)):\n    Circle(\n        location=[daytime_robberies.iloc[i]['Lat'], daytime_robberies.iloc[i]['Long']],\n        radius=40,\n        color=color_val(daytime_robberies.iloc[i]['HOUR'])).add_to(m_4)\nm_4","dd5f6b4f":"m_5 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=12)\nHeatMap(data=crimes[['Lat', 'Long']], radius=10).add_to(m_5)\nm_5","5420ff67":"# GeoDataFrame with geographical boundaries of Boston police districts\ndistricts_full = gpd.read_file('..\/input\/boston-police-districts\/Police_Districts.shp')\ndistricts = districts_full[[\"DISTRICT\", \"geometry\"]].set_index(\"DISTRICT\")\ndistricts.head()","059ca4a9":"plot_dict = crimes.DISTRICT.value_counts()\nplot_dict.head()","ed51ed9e":"m_6 = folium.Map(location=[42.32,-71.0589], tiles='cartodbpositron', zoom_start=12)\n\nChoropleth(geo_data=districts.__geo_interface__, data=plot_dict, key_on=\"feature.id\", fill_color='YlGnBu', \n           legend_name='Major criminal incidents (Jan-Aug 2018)').add_to(m_6)\nm_6","fb40d9a2":"```location``` is a list containing the center of the circle, in latitude and longitude.\n\n```radius``` sets the radius of the circle.\nNote that in a traditional bubble map, the radius of each circle is allowed to vary. We can implement this by defining a function similar to the ```color_producer()``` function that is used to vary the color of each circle.\n\n```color``` sets the color of each circle.\n\nThe ```color_producer()``` function is used to visualize the effect of the hour on robbery location.","91158b48":"# Interactive maps with the folium package\n","430fc591":"# Heatmap\n## folium.plugin.Heatmap()","b5d2b2eb":"# Choropleth maps","7406e18d":"To reduce the amount of data we need to fit on the map, we'll (temporarily) confine our attention to daytime robberies.","2e53676e":"```geo_data``` is a GeoJSON FeatureCollection containing the boundaries of each geographical area.\n\nIn the code above, we convert the districts GeoDataFrame to a GeoJSON FeatureCollection with the __geo_interface__ attribute.\n```data``` is a Pandas Series containing the values that will be used to color-code each geographical area.\n\n```key_on``` will always be set to feature.id.\n\nThis refers to the fact that the GeoDataFrame used for geo_data and the Pandas Series provided in data have the same index. To understand the details, we'd have to look more closely at the structure of a GeoJSON Feature Collection (where the value corresponding to the \"features\" key is a list, wherein each entry is a dictionary containing an \"id\" key).\n\n```fill_color``` sets the color scale.\n\n```legend_name``` labels the legend in the top right corner of the map.","e8da58f8":"# Several arguments customize the appearance of the map:\n\n```location``` sets the initial center of the map. We use the latitude (42.32\u00b0 N) and longitude (-71.0589\u00b0 E) of the city of Boston.\n\n```tiles``` changes the styling of the map; in this case, we choose the OpenStreetMap style. If you're curious, you can find the other options listed here.\n\ncartodbdark_matter\n\ncartodbpositron\n\ncartodbpositronnolabels\n\ncartodbpositrononlylabels\n\nopenstreetmap\n\nstamenterrain\n\nstamentoner\n\nstamentonerbackground\n\nstamentonerlabels\n\nstamenwatercolor\n\n```zoom_start``` sets the initial level of zoom of the map, where higher values zoom in closer to the map.\nTake the time now to explore by zooming in and out, or by dragging the map in different directions.","9b89b565":"### A relatively simple map with folium.Map()","c0c35943":"# Buble Map\n## folium.Circle()","035d918e":"# Interactive Map","212bc935":"# Read Crimes in Boston Dataset","632ff225":"# Cluster lots of data\n## folium.plugins.MarkerCluster\u00b6","48a6df3a":"# folium.Marker\n## folium.Marker()\nWe add markers to the map with folium.Marker(). Each marker below corresponds to a different robbery.","efad492e":"```data``` is a DataFrame containing the locations that we'd like to plot.\n\n```radius``` controls the smoothness of the heatmap. Higher values make the heatmap look smoother (i.e., with fewer gaps)."}}