{"cell_type":{"4b765c9f":"code","75c9f0a6":"code","dd4e96c7":"code","c2f2067f":"code","8dd88330":"code","931fc919":"code","ecda3941":"code","e4d41936":"code","059558ba":"code","50eff774":"code","57063858":"code","968e76aa":"code","8b5b134e":"code","b4504a7a":"code","08360a9c":"code","f49b0063":"code","fa1aebf7":"code","0ce6492a":"code","a2aaff8c":"code","b2f68d2d":"code","6b1f5615":"code","b8f9da2c":"code","2e7dc74f":"code","49f3363b":"code","da20b81c":"code","84189630":"code","c1d8dfc8":"code","769287b1":"code","e61a81a2":"code","98a55dfe":"code","ba03e5c9":"code","4b1b3b39":"code","b700e695":"code","c5459e31":"code","fb91df7e":"code","cabecfb5":"code","e98fa3f9":"code","82898107":"code","d60b4ef4":"code","b4887b15":"code","95dd166b":"code","52366371":"code","0b93950b":"code","5207b556":"code","b3b114f2":"code","bd50bd00":"code","db5a7079":"code","4d520cb1":"code","2f765c6a":"code","d3b28cc9":"code","26838db1":"code","50cd5b57":"code","afcca587":"code","97e81cce":"code","2db23e1b":"code","cd03400c":"code","78866a01":"code","15bec4ea":"code","2d54ecb5":"code","00e82b5d":"code","722a6aed":"code","75ac608c":"code","509667ec":"markdown","6a42fe60":"markdown","c2989194":"markdown","ddf462be":"markdown","6fcd5859":"markdown","582ecb44":"markdown","df427658":"markdown","4e463af8":"markdown","35544251":"markdown","33eb1a40":"markdown","5e9798f3":"markdown","c1c41f40":"markdown","c785856c":"markdown","9bf77320":"markdown","d92db016":"markdown","01e3fdce":"markdown","8d40d6e4":"markdown","3a801a83":"markdown","5f6293ac":"markdown","f7a49a49":"markdown","467c3cc6":"markdown","55e7b7ac":"markdown","699b11f6":"markdown","2a004251":"markdown","545db791":"markdown","007751ee":"markdown","dbcdb719":"markdown","189ff2fb":"markdown","959189d4":"markdown","fb80ff8a":"markdown","618bbb96":"markdown","748250ab":"markdown","73aa108a":"markdown","d0f7f268":"markdown"},"source":{"4b765c9f":"# Data Manipulation Libraries\nimport os\nimport pandas as pd\nimport numpy as np\n\n# Vizualization Libraries\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# pre-processing\nfrom sklearn.preprocessing import StandardScaler\n\n# ML model Libraries\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","75c9f0a6":"bank_data = pd.read_csv('..\/input\/bank-marketing-campaigns-dataset\/bank-additional-full.csv',sep=';',engine='python')","dd4e96c7":"# Pandas Profiling - Enable if needed\n# from pandas_profiling import ProfileReport\n# profile = ProfileReport(df, title=\"Pandas Profiling Report\",explorative=True)\n# profile.to_notebook_iframe()\n# profile.to_file('initial_report.html')","c2f2067f":"bank_data_with_unknowns = bank_data.copy()\n#Drop Duplicate rows\nbank_data_with_unknowns.drop_duplicates(subset=None, keep='first', inplace=True)\nbank_data_with_unknowns.head()","8dd88330":"bank_data_with_unknowns['pdays'].value_counts()\nbank_pdays = bank_data_with_unknowns.loc[bank_data_with_unknowns['pdays'] == 999,'y']\nbank_pdays.value_counts()\nbank_not_pdays = bank_data_with_unknowns.loc[bank_data_with_unknowns['pdays'] != 999,['y','pdays']]\n#sns.violinplot(x='y',y='pdays',data=bank_not_pdays)\nsns.swarmplot(x='y',y='pdays',data=bank_not_pdays)","931fc919":"#dropping column pdays\nbank_data_with_unknowns.drop(columns=['pdays'],inplace=True)","ecda3941":"#Checking if we need the column 'previous'\nbank_data_with_unknowns['previous'].value_counts()\n#zero contributes to 86.3% of the data.\nplt.figure(figsize=(15,5))\nplt.subplot(121)\nbank_not_previous =  bank_data_with_unknowns.loc[bank_data_with_unknowns['previous'] != 0,['y','previous']]\nsns.violinplot(x='y',y='previous',data=bank_not_previous)\nplt.subplot(122)\nbank_previous =  bank_data_with_unknowns.loc[bank_data_with_unknowns['previous'] == 0,['y','previous']]\nsns.countplot(x='y',data=bank_previous)","e4d41936":"#Percentage of yes and no\nbnp = bank_not_previous['y'].value_counts()\nprint(bnp['yes']\/bnp['no'])\nbp = bank_previous['y'].value_counts()\nprint(bp['yes']\/bp['no'])","059558ba":"#Checking if we need the column 'poutcome'\nbank_data_with_unknowns['poutcome'].value_counts()\n#zero contributes to 86.3% of the data.\nplt.figure(figsize=(15,5))\nplt.subplot(121)\nbank_not_nonexistent =  bank_data_with_unknowns.loc[bank_data_with_unknowns['poutcome'] != 'nonexistent',['y']]\nsns.countplot(x='y',data=bank_not_nonexistent)\nplt.subplot(122)\nbank_nonexistent =  bank_data_with_unknowns.loc[bank_data_with_unknowns['poutcome'] == 'nonexistent',['y']]\nsns.countplot(x='y',data=bank_nonexistent)\n","50eff774":"#Percentage of yes and no\nbnne = bank_not_nonexistent['y'].value_counts()\nprint(bnne['yes']\/bnne['no'])\nbne = bank_nonexistent['y'].value_counts()\nprint(bne['yes']\/bne['no'])","57063858":"#handling job unknown values\nbank_data_with_unknowns['job'].value_counts()\nbank_data_with_unknowns['job'] = bank_data_with_unknowns['job'].str.replace('.','')\nbank_data_with_unknowns['job'] = bank_data_with_unknowns['job'].str.replace('-','')\nbank_data_with_unknowns.loc[bank_data_with_unknowns['job'] == 'unknown','job'] = 'admin'","968e76aa":"#Handling marital unknown values\nbank_data_with_unknowns['marital'].value_counts()\nbank_data_with_unknowns.loc[bank_data_with_unknowns['marital'] == 'unknown','marital'] = 'married'","8b5b134e":"#handling education\nbank_data_with_unknowns['education'].value_counts()\nbank_data_with_unknowns.loc[bank_data_with_unknowns['education'] == 'basic.9y','education'] = 'basic'\nbank_data_with_unknowns.loc[bank_data_with_unknowns['education'] == 'basic.6y','education'] = 'basic'\nbank_data_with_unknowns.loc[bank_data_with_unknowns['education'] == 'basic.4y','education'] = 'basic'\nbank_data_with_unknowns['education'] = bank_data_with_unknowns['education'].str.replace('.','')\nbank_data_with_unknowns['education'].value_counts()\n\n#converting the unknown values to basic instead of university degree\nbank_data_with_unknowns.loc[bank_data_with_unknowns['education'] == 'unknown','education'] = 'basic'","b4504a7a":"#Dropping default column as it dosent contribute to any useful info\nbank_data_with_unknowns.drop(columns=['default'],inplace=True)","08360a9c":"#handling unknows in housing as yes as it has the highest frequency\nbank_data_with_unknowns.loc[bank_data_with_unknowns['housing'] == 'unknown','housing'] = 'yes'","f49b0063":"#handling unknows in loan as no as it has the highest frequency\nbank_data_with_unknowns.loc[bank_data_with_unknowns['loan'] == 'unknown','loan'] = 'no'","fa1aebf7":"#Contribution of contact\nplt.figure(figsize=(15,5))\nplt.subplot(121)\nbank_telephone =  bank_data_with_unknowns.loc[bank_data_with_unknowns['contact'] == 'telephone',['y']]\nsns.countplot(x='y',data=bank_telephone)\nplt.subplot(122)\nbank_cellular =  bank_data_with_unknowns.loc[bank_data_with_unknowns['contact'] == 'cellular',['y']]\nsns.countplot(x='y',data=bank_cellular)","0ce6492a":"bt = bank_telephone['y'].value_counts()\nbc = bank_cellular['y'].value_counts()\nprint(bt['yes']\/bt['no'],bc['yes']\/bc['no'])","a2aaff8c":"#the responses 'yes' & 'no' are almost similarly distributed so dropping this column\nbank_data_with_unknowns.drop(columns=['contact'],inplace=True)","b2f68d2d":"#handling duration -  this attribute highly affects the output target (e.g., if duration=0 then y='no'). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known.\n#dropped rows where duration was zero (4 rows)\nbank_data_with_unknowns = bank_data_with_unknowns[~(bank_data_with_unknowns['duration']==0)] ","6b1f5615":"#clearly it is a contributing factor - so lets deal with the outliers\npx.box(bank_data_with_unknowns,x='y',y='duration')\n#duration can be classified as greater_than_1600, greater_than_800, greater_than_400 and less_than_400 - data needs to be capped, we will do that later","b8f9da2c":"#Handling campaign\npx.violin(bank_data_with_unknowns,x='y',y='campaign')\n#Distribution is significantly different so we will keep this variable - values greater than 10 could be capped","2e7dc74f":"#we have handled all unknowns so\nbank_eda_data = bank_data_with_unknowns.copy() \njob_vs_duration = px.box(bank_eda_data, x=\"duration\", y=\"job\", color=\"y\",notched=True,template='simple_white',color_discrete_sequence=px.colors.qualitative.Pastel)\njob_vs_duration.update_traces(quartilemethod=\"exclusive\",orientation='h') #Quantile at 2.5 and 7.5\njob_vs_duration.show()","49f3363b":"#Campaign vs duration calls\ncampaign_vs_duration = px.scatter(bank_eda_data, x=\"campaign\", y=\"duration\",color='y',template='simple_white',color_discrete_sequence=px.colors.qualitative.Pastel)\ncampaign_vs_duration.show()","da20b81c":"#campaign vs month\ncampaign_vs_month = bank_eda_data.copy()\nsort_order = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']\ncampaign_vs_month.month = campaign_vs_month.month.astype(\"category\")\ncampaign_vs_month.month.cat.set_categories(sort_order, inplace=True)\ncampaign_vs_month = campaign_vs_month.sort_values(['month'])\nplt.bar(campaign_vs_month['month'],campaign_vs_month['campaign'])\nplt.show()","84189630":"#Yes and No vs (Job, Month, Marital status, Education, Day of week, Housing, Contact, default)\n\nplt.figure(figsize = (15, 30))\nsx = plt.subplot(5,2,1)\nsns.countplot(x=\"job\",hue=\"y\", data=bank_eda_data, palette=\"Set2\")\nsx.set_xticklabels(sx.get_xticklabels(),rotation=45)\nsx = plt.subplot(5,2,2)\n\nbde_copy = bank_eda_data.copy()\nbde_copy.month = bde_copy.month.astype(\"category\")\nbde_copy.month.cat.set_categories(['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'], inplace=True)\n\nsns.countplot(x=\"month\",hue=\"y\", data=bde_copy.sort_values(['month']), palette=\"Set2\")\nsx = plt.subplot(5,2,3)\nsns.countplot(x=\"marital\",hue=\"y\", data=bde_copy, palette=\"Set2\")\nsx = plt.subplot(5,2,4)\nsns.countplot(x=\"education\",hue=\"y\", data=bde_copy, palette=\"Set2\")\nsx.set_xticklabels(sx.get_xticklabels(),rotation=45)\nsx = plt.subplot(5,2,5)\nsns.countplot(x=\"housing\",hue=\"y\", data=bde_copy, palette=\"Set2\")\nsx = plt.subplot(5,2,6)\nsns.countplot(x=\"loan\",hue=\"y\", data=bde_copy, palette=\"Set2\")\nsx = plt.subplot(5,2,7)\nsns.countplot(x=\"day_of_week\",hue=\"y\", data=bde_copy, palette=\"Set2\")","c1d8dfc8":"# Only - Yes vs (Job, Month, Marital status, Education, Day of week, Housing)\n\nplt.figure(figsize = (15, 30))\nbank_only_yes = bank_eda_data.copy()\nbank_only_yes = bank_only_yes[bank_only_yes['y']=='yes']\nsx2 = plt.subplot(5,2,1)\nsns.countplot(x=\"job\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")\nsx2.set_xticklabels(sx2.get_xticklabels(),rotation=45)\nsx2 = plt.subplot(5,2,2)\n\nbde_only_yes_copy = bank_only_yes.copy()\nbde_only_yes_copy.month = bde_copy.month.astype(\"category\")\nbde_only_yes_copy.month.cat.set_categories(['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'], inplace=True)\n\nsns.countplot(x=\"month\",hue=\"y\", data=bde_only_yes_copy.sort_values(['month']), palette=\"Set2\")\nsx2 = plt.subplot(5,2,3)\nsns.countplot(x=\"marital\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")\nsx2 = plt.subplot(5,2,4)\nsns.countplot(x=\"education\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")\nsx2.set_xticklabels(sx2.get_xticklabels(),rotation=45)\nsx2 = plt.subplot(5,2,5)\nsns.countplot(x=\"housing\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")\nsx2 = plt.subplot(5,2,6)\nsns.countplot(x=\"loan\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")\nsx2 = plt.subplot(5,2,7)\nsns.countplot(x=\"day_of_week\",hue=\"y\", data=bank_only_yes, palette=\"Set2\")","769287b1":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(14.7, 5.27)\nsns.boxplot(x='cons.price.idx',y='month',data=bde_copy,ax=ax)","e61a81a2":"sns.jointplot(x ='emp.var.rate', y ='cons.price.idx', data = bank_eda_data) \nsns.jointplot(x ='emp.var.rate', y ='euribor3m', data = bank_eda_data) \nsns.jointplot(x ='emp.var.rate', y ='nr.employed', data = bank_eda_data) \nsns.jointplot(x ='euribor3m', y ='nr.employed', data = bank_eda_data, kind ='kde') \nsns.jointplot(x ='cons.price.idx', y ='nr.employed', data = bank_eda_data, kind ='kde') ","98a55dfe":"#Checking for outliers in data\nplt.figure(figsize = (15, 5))\nax=plt.subplot(121)\nplt.boxplot(bank_eda_data['duration'])\nax.set_title('duration')\nax=plt.subplot(122)\nplt.boxplot(bank_eda_data['campaign'])\nax.set_title('campaign')\n","ba03e5c9":"# We choose not to perform any outlier filtering as the values observed are not so extreme. Although its optional if you see fit.\n# #We can directly apply interquantile range filter for duration and campaign.\n# numerical_features=['campaign','duration']\n# for cols in numerical_features:\n#     Q3 = bank_eda_data[cols].quantile(0.95)\n#     Q1 = bank_eda_data[cols].quantile(0.05)\n#     IQR = Q3 - Q1\n#     filter = (bank_eda_data[cols] <= (Q3 + 1.5 *IQR))\n#     bank_eda_data=bank_eda_data.loc[filter]\n\n# #replotting after applying filter\n# plt.figure(figsize = (5, 5))\n\n# ax3=plt.subplot(121)\n# plt.boxplot(bank_eda_data['duration'])\n# ax3.set_title('duration')\n\n# ax3=plt.subplot(122)\n# plt.boxplot(bank_eda_data['campaign'])\n# ax3.set_title('campaign')","4b1b3b39":"bank_eda_data['previous'].value_counts()","b700e695":"bank_eda_data.dtypes","c5459e31":"bank_eda_data.head()","fb91df7e":"bank_preprocess = bank_eda_data.copy()","cabecfb5":"bank_preprocess.dtypes","e98fa3f9":"category_features = ['job','marital','education','housing','loan','month','day_of_week','poutcome']\nbank_preprocess[category_features].head()","82898107":"bank_preprocess_one_hot = pd.get_dummies(bank_preprocess, columns = category_features)\nbank_preprocess_one_hot = pd.get_dummies(bank_preprocess_one_hot, columns = ['y'],drop_first=True)\nbank_preprocess_one_hot.head()","d60b4ef4":"bank_one_hot_data = bank_preprocess_one_hot.copy()\nX = bank_one_hot_data.drop(columns=['y_yes'])\ny = bank_one_hot_data['y_yes']\nssc = StandardScaler(with_mean=True,with_std=True)\nssc.fit_transform(X)","b4887b15":"X.columns","95dd166b":"x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n","52366371":"log = LogisticRegression()\nlog.fit(x_train,y_train)\ny_pred = log.predict(x_test)\nprint('Accuracy Score : %f' % (accuracy_score(y_pred, y_test)))\nparameters = {'C':[0.001, 0.1, 1, 10, 100]}\nlog_gsmodel = GridSearchCV(estimator=log, param_grid = parameters)\nlog_gsmodel_result = log_gsmodel.fit(x_train,y_train)\nprint(\"Best: %f using %s\" % (log_gsmodel_result.best_score_, log_gsmodel_result.best_params_))\nprint('mean_test_score : %s' % (log_gsmodel_result.cv_results_['mean_test_score']))\nprint('std_test_Score : %s' % (log_gsmodel_result.cv_results_['std_test_score']))\nprint('params: %s' %(log_gsmodel_result.cv_results_['params']))","0b93950b":"ds_tree_entropy = DecisionTreeClassifier(criterion='entropy',random_state=42)\nds_tree_entropy.fit(x_train,y_train)\nds_tree_entropy_y_pred = ds_tree_entropy.predict(x_test)\nds_tree_entropy_y_pred","5207b556":"print(\"Model Entropy - no max depth\")\nprint(\"Accuracy:\", metrics.accuracy_score(y_test,ds_tree_entropy_y_pred))\nprint(\"Balanced accuracy:\", metrics.balanced_accuracy_score(y_test,ds_tree_entropy_y_pred))\nprint('Precision score for \"Yes\"' , metrics.precision_score(y_test,ds_tree_entropy_y_pred, pos_label = 1))\nprint('Precision score for \"No\"' , metrics.precision_score(y_test,ds_tree_entropy_y_pred, pos_label = 0))\nprint('Recall score for \"Yes\"' , metrics.recall_score(y_test,ds_tree_entropy_y_pred, pos_label = 1))\nprint('Recall score for \"No\"' , metrics.recall_score(y_test,ds_tree_entropy_y_pred, pos_label = 0))","b3b114f2":"entr_parameters = {'max_depth':[2,3,4,5,6,7]}\ndt_entr_gsmodel = GridSearchCV(estimator=ds_tree_entropy, param_grid = entr_parameters)\ndt_entr_gsmodel_result = dt_entr_gsmodel.fit(x_train,y_train)\nprint(\"Best: %f using %s\" % (dt_entr_gsmodel_result.best_score_, dt_entr_gsmodel_result.best_params_))\nprint('mean_test_score : %s' % (dt_entr_gsmodel_result.cv_results_['mean_test_score']))\nprint('std_test_Score : %s' % (dt_entr_gsmodel_result.cv_results_['std_test_score']))\nprint('params: %s' %(dt_entr_gsmodel_result.cv_results_['params']))","bd50bd00":"ds_tree_gini = DecisionTreeClassifier(criterion='gini',random_state=42)\nds_tree_gini.fit(x_train,y_train)\nds_tree_gini_y_pred = ds_tree_gini.predict(x_test)\nprint(\"Model Entropy - no max depth\")\nprint(\"Accuracy:\", metrics.accuracy_score(y_test,ds_tree_gini_y_pred))\nprint(\"Balanced accuracy:\", metrics.balanced_accuracy_score(y_test,ds_tree_gini_y_pred))\nprint('Precision score for \"Yes\"' , metrics.precision_score(y_test,ds_tree_gini_y_pred, pos_label = 1))\nprint('Precision score for \"No\"' , metrics.precision_score(y_test,ds_tree_gini_y_pred, pos_label = 0))\nprint('Recall score for \"Yes\"' , metrics.recall_score(y_test,ds_tree_gini_y_pred, pos_label = 1))\nprint('Recall score for \"No\"' , metrics.recall_score(y_test,ds_tree_gini_y_pred, pos_label = 0))","db5a7079":"gini_parameters = {'max_depth':[2,3,4,5,6,7]}\ndt_gini_gsmodel = GridSearchCV(estimator=ds_tree_gini, param_grid = gini_parameters)\ndt_gini_gsmodel_result = dt_gini_gsmodel.fit(x_train,y_train)\nprint(\"Best: %f using %s\" % (dt_gini_gsmodel_result.best_score_, dt_entr_gsmodel_result.best_params_))\nprint('mean_test_score : %s' % (dt_gini_gsmodel_result.cv_results_['mean_test_score']))\nprint('std_test_Score : %s' % (dt_gini_gsmodel_result.cv_results_['std_test_score']))\nprint('params: %s' %(dt_gini_gsmodel_result.cv_results_['params']))","4d520cb1":"nb = GaussianNB()\nnb_result = nb.fit(x_train,y_train)\nnb_y_pred = nb.predict(x_test)\nprint(accuracy_score(nb_y_pred,y_test))","2f765c6a":"\nsgd = SGDClassifier(loss='modified_huber',shuffle=True,random_state=42)\nsgd.fit(x_train,y_train)\nsgd_y_pred = sgd.predict(x_test)\nprint(accuracy_score(sgd_y_pred,y_test))","d3b28cc9":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train,y_train)\nknn_y_pred = knn.predict(x_test)\nprint(accuracy_score(knn_y_pred,y_test))","26838db1":"knn_parameters = {'n_neighbors': range(10,20)}\nknn_gsmodel = GridSearchCV(estimator=KNeighborsClassifier(), param_grid = knn_parameters)\nknn_gsmodel_result = knn_gsmodel.fit(x_train,y_train)\nprint(\"Best: %f using %s\" % (knn_gsmodel_result.best_score_, knn_gsmodel_result.best_params_))\nprint('mean_test_score : %s' % (knn_gsmodel_result.cv_results_['mean_test_score']))\nprint('std_test_Score : %s' % (knn_gsmodel_result.cv_results_['std_test_score']))\nprint('params: %s' %(knn_gsmodel_result.cv_results_['params']))","50cd5b57":"\nrfm = RandomForestClassifier(n_estimators=20,oob_score=True,n_jobs=1,random_state=42,max_features=None,min_samples_leaf=10)\nrfm.fit(x_train,y_train)\nrfm_y_pred = rfm.predict(x_test)\nprint(accuracy_score(rfm_y_pred,y_test))","afcca587":"rfm_parameters = {'n_estimators': [80,90,100]}\nrfm_gsmodel = GridSearchCV(estimator=RandomForestClassifier(oob_score=True,n_jobs=1,random_state=42,max_features=None,min_samples_leaf=10), param_grid = rfm_parameters)\nrfm_gsmodel_result = rfm_gsmodel.fit(x_train,y_train)\nprint(\"Best: %f using %s\" % (rfm_gsmodel_result.best_score_, rfm_gsmodel_result.best_params_))\nprint('mean_test_score : %s' % (rfm_gsmodel_result.cv_results_['mean_test_score']))\nprint('std_test_Score : %s' % (rfm_gsmodel_result.cv_results_['std_test_score']))\nprint('params: %s' %(rfm_gsmodel_result.cv_results_['params']))","97e81cce":"rfm_gsmodel_result.best_estimator_","2db23e1b":"vote_classify = VotingClassifier(estimators=[\n    ('log_be', log_gsmodel_result.best_estimator_), # Logistic Regression\n    ('dt_entr_be', dt_entr_gsmodel_result.best_estimator_), #Decision tree entropy\n    ('dt_gini_be', dt_gini_gsmodel_result.best_estimator_), #Decision tree Gini\n    ('nb_be', nb), #Naive bayes\n    ('sgd_be', sgd), #Stocastic Gradient Descent\n    ('knn_be', knn_gsmodel_result.best_estimator_), #K-nearest Neighbors\n    ('rfm_be', rfm_gsmodel_result.best_estimator_)], voting='soft') # Random Forest\nvote_classify_model = vote_classify.fit(x_train, y_train)\nvote_classify_ypred = vote_classify_model.predict(x_test)\nprint(accuracy_score(vote_classify_ypred,y_test))","cd03400c":"print(confusion_matrix(vote_classify_ypred,y_test))","78866a01":"print(classification_report(vote_classify_ypred,y_test))","15bec4ea":"fpr, tpr, _ =  roc_curve(y_test,vote_classify_model.predict_proba(x_test)[:,1])\nroc_auc = auc(fpr,tpr)","2d54ecb5":"plt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label = 'ROC curve (area = %0.3f)' % (roc_auc))\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","00e82b5d":"X.columns","722a6aed":"plt.figure(figsize=(15,5))\nplt.bar(X.columns,rfm_gsmodel_result.best_estimator_.feature_importances_)\nplt.xticks(X.columns,rotation='vertical')\nplt.show()","75ac608c":"# #Bonus SVM Models - COMMENTED BECAUSE OF HIGH EXECUTION TIME\n# from sklearn.svm import SVC\n# x_discarded, x_chosen, y_discarded, y_chosen = train_test_split(X,y,test_size=0.1,random_state=42)\n# x_train, x_test, y_train, y_test = train_test_split(x_chosen,y_chosen,test_size=0.25,random_state=42)\n# #Linear svm\n# svc_linear = SVC(kernel='linear', gamma='auto')\n# svc_linear.fit(x_train,y_train)\n# svc_linear_y_pred = svc_linear.predict(x_test)\n# print('linear: %s' %(accuracy_score(svc_linear_y_pred,y_test)))\n# #quadratic svm \n# svc_quadratic = SVC(kernel='poly',degree=2, gamma='auto')\n# svc_quadratic.fit(x_train,y_train)\n# svc_quadratic_y_pred = svc_quadratic.predict(x_test)\n# print('quadratic: %s' %(accuracy_score(svc_quadratic_y_pred,y_test)))\n# #cubic svm\n# svc_cubic = SVC(kernel='poly',degree=3, gamma='auto')\n# svc_cubic.fit(x_train,y_train)\n# svc_cubic_y_pred = svc_cubic.predict(x_test)\n# print('cubic: %s' %(accuracy_score(svc_cubic_y_pred,y_test)))","509667ec":"<a id=\"connect-12\"><\/a>\n### Economic Data analysis","6a42fe60":"<a id=\"connect-23\"><\/a>\n### k-nearest neighbors","c2989194":"<a id=\"connect-18\"><\/a>\n### Logistic Regression","ddf462be":"<a id=\"connect-11\"><\/a>\n### Yes response influence analysis","6fcd5859":"<a class=\"anchor\" id=\"second-bullet\"><\/a>","582ecb44":"#Insights : <br>\n1. Retired people and people with blue-collar, technitian and admin jobs contribute to the majority of the deposits. <br>\n2. April to August including November contributes to highest deposits. <br>\n3. poeple without loans at the bank tend to have contributed more to the deposits. <br>\n4. cellular contacts and people with no defaults are more favorable.<br>","df427658":"Insights:<br>\nThere is some significant difference, since we are keeping 'previous' column, lets keep 'poutcome' as well.","4e463af8":"Ingights: <br>\nThere seems to be some difference, a contributing factor. So we will keep this variable.","35544251":"<a id=\"connect-14\"><\/a>\n### Dealing with outliers","33eb1a40":"<a id=\"connect-10\"><\/a>\n### Response Factor Analysis","5e9798f3":"Insights:\n1. As the euribor interest rates increased, employee variation rate also increased. Higher the euribor interest rates more number of people were employed.(More on https:\/\/www.global-rates.com\/en\/interest-rates\/euribor\/euribor-interest-3-months.aspx)<br>\n2. More the number of people employed, higher the consumer price index.<br>\n3. Jun, July and August had high employment rate.<br>\n4. After the fluctuation in september and October, the employment reduced towards the end of the year. Explains the small increase in November and drop in December.<br>","c1c41f40":"<a id=\"connect-13\"><\/a>\n## Feature Engineering","c785856c":"<a id=\"connect-25\"><\/a>\n### Vote Classifier","9bf77320":"Insights:<br>\n    As we can see that huge number of data is '999' meaning the client was not previously contacted. In the cases where the client was previously contacted, which is a very small fraction of the entire data,'No' and 'Yes' is almost same. So we can drop this column, as it isnt contributing any value for the prediction.","d92db016":"<a id=\"connect-19\"><\/a>\n### Decision Tree Classifier - Entropy<br>","01e3fdce":"<a id=\"connect-17\"><\/a>\n## MODELING","8d40d6e4":"<a id=\"connect-26\"><\/a>\n## Conclusion\n<img src=\"https:\/\/bl.thgim.com\/money-and-banking\/ti94vq\/article27109100.ece\/alternates\/LANDSCAPE_435\/bl13coinsgrowthpix\"><\/img><br>\nFrom our extensive analysis, we have learnt many things. <br>\n\nTop take aways are:<br>\n- Duration has a huge impact on the outcome. The more the customer is engaged, the more the probability he\/she would make a deposit.<br>\n- The state of the country's economy plays a huge role. The better the economy the more willing are customers to make a deposit. So campaigns should be targeted during this period. October being one of the bad months with highest fluctuations in the economic status of country, campaigns in such months should be avoided.<br>\n- People in blue-collor jobs, admins, technitians are more probable to make a deposit.<br>\n- Customers with good background education are more likely to do well financially and would have the mind set to save. University degree or higher degree holders are more likely to deposit.<br>","3a801a83":"<a id=\"connect-21\"><\/a>\n### Naive Baeys Classifier ","5f6293ac":"<a id=\"connect-5\"><\/a>\n### Data Cleaning","f7a49a49":"<a id=\"connect-6\"><\/a>\n## Exploratory Data Analysis\n<a id=\"connect-7\"><\/a>\n### Job vs Duration of calls","467c3cc6":"7140(correctly predicted 0) + 134(Falsely predicted 0) = 7274 (total 0) <br>\n561(Falsely predicted 1) + 320(Correctly predicted 1) = 881 (total 1)<br>\nThis is one such example of the confusion matrix. A more stable model could be built reducing the randomness induced by some models.\nwe are able to predict almost one third of positive deposits! and predict fairly well who wont deposit. It is more important to reduce falsely predicted 0 as much as possible in this scenario. Further work should focus on that. This will help navigate between the groups for better turn over.","55e7b7ac":"<a id=\"connect-9\"><\/a>\n### Campaign vs Month","699b11f6":"<a id=\"connect-27\"><\/a>\n## Bonus Model","2a004251":"<a id=\"connect-24\"><\/a>\n### Random Forest ","545db791":"<a id=\"connect-15\"><\/a>\n## PREPROCESSING","007751ee":"<a id=\"section-one\"><\/a>","dbcdb719":"Insights:\n    Campaign activity is high during May and slowly decays by the  end of the year. March and Apirl sees almost half the activity in may.\n    ","189ff2fb":"<a class=\"anchor\" id=\"first-bullet\"><\/a>","959189d4":"<a id=\"connect-8\"><\/a>\n### Campaign vs Duration of calls","fb80ff8a":"# Table of Contents\n\n1. [Introduction](#connect-0)\n   - [Problem Statement](#connect-1)\n   - [Dataset Information](#connect-2)\n    \n2. [Data Wrangling](#connect-3)\n    - [Import Libraries](#connect-4)\n    - [Data Cleaning](#connect-5)\n3. [Exploratory Data Analysis](#connect-6)\n    - [Job vs Duration](#connect-7)\n    - [Campaign vs Duration](#connect-8)\n    - [Campaign vs month](#connect-9)\n    - [Response Factor Analysis](#connect-10)\n    - [Yes Response Influence Factor Analysis](#connect-11)\n    - [Economic Data Analysis](#connect-12)\n4. [Feature Engineering](#connect-13)\n    - [Dealing with outliers](#connect-14)\n5. [Preprocessing](#connect-15)\n    - [Standard Scaling](connect-16)\n6. [Modeling](#connect-17)\n    - [Logistic Regression](#connect-18)\n    - [Decision Tree Classifier - Entropy](#connect-19)\n    - [Decision Tree Classifier - Gini](#connect-20)\n    - [Naive Bayes CLassifier](#connect-21)\n    - [Stochastic Gradient Descent](#connect-22)\n    - [K-Nearest Neighbors](#connect-23)\n    - [Random Forest](#connect-24)\n    - [Vote Classifier](#connect-25)\n7. [Conclusion](#connect-26)\n8. [Bonus Model](#connect-27)\n\n\n<a id=\"connect-0\"><\/a>\n## Introduction<br>\n\n<img src='https:\/\/img.freepik.com\/free-vector\/isometric-money-saving-concept-background_52683-6820.jpg?size=626&ext=jpg'><\/img>\n\n<a id=\"connect-1\"><\/a>\n### Problem Statement<br>\nThe data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution. The classification goal is to predict if the client will subscribe a term deposit (variable y).\n\n<a id=\"connect-2\"><\/a>\n### Data Set Information:<br>\nThe data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be ('yes') or not ('no') subscribed.\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/bank+marketing\nThe classification goal is to predict if the client will subscribe (yes\/no) a term deposit (variable y).\n\nAttribute Information:<br><br>\nInput variables:<br>\nbank client data:<br>\nNumeric Attributes:<br>\n1 - age <br>\n2 - duration: last contact duration, in seconds.<br>\n3 - campaign: number of contacts performed during this campaign and for this client.<br>\n4 - pdays: number of days that passed by after the client was last contacted from a previous campaign<br>\n5 - previous: number of contacts performed before this campaign and for this client <br>\n<b>social and economic context attributes<\/b><br>\n6 - emp.var.rate: employment variation rate - quarterly indicator <br>\n7 - cons.price.idx: consumer price index - monthly indicator <br>\n8 - cons.conf.idx: consumer confidence index - monthly indicator <br>\n9 - euribor3m: euribor 3 month rate - daily indicator <br>\n10 - nr.employed: number of employees - quarterly indicator <br>\n\nCategorical Attributes:<br><br>\n1 - job : type of job ('admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')<br>\n2 - marital : marital status ('divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)<br>\n3 - education ('basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')<br>\n4 - default: has credit in default? ('no','yes','unknown')<br>\n5 - housing: has housing loan? ('no','yes','unknown')<br>\n6 - loan: has personal loan? ('no','yes','unknown')<br>\nrelated with the last contact of the current campaign:<br>\n7 - contact: contact communication type ('cellular','telephone')<br>\n8 - month: last contact month of year ('jan', 'feb', 'mar', ..., 'nov', 'dec')<br>\n9 - day_of_week: last contact day of the week ('mon','tue','wed','thu','fri')<br>\n10 - poutcome: outcome of the previous marketing campaign ('failure','nonexistent','success')<br>\n\n<a id=\"connect-3\"><\/a>\n## Data Wrangling<br>\n<a id=\"connect-4\"><\/a>\n### Import Libraries<br>","618bbb96":"<a id=\"connect-20\"><\/a>\n### Decision Tree Classifier - Gini","748250ab":"<a id=\"connect-16\"><\/a>\n### Standard Scaling","73aa108a":"<a id=\"connect-22\"><\/a>\n### Stochastic Gradient Descent<br>","d0f7f268":"Insights:<br>\n1. May, June, July, August & November where the months the campaigns were actively performed.<br>\n2. Admins, Technitions and people with jobs in services, management and blue-collar jobs were targeted for the campaigns.<br>\n3. Married and single people are more likely to deposit. <br>\n4. People with high-school, professional course or university degree are more likely to deposit. <br>\n5. Loan, housing, contact, day of the week, default don't really contribute much to drawing any conclusions. <br>"}}