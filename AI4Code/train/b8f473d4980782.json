{"cell_type":{"b954917c":"code","934a3905":"code","8dd337e5":"code","8a5da322":"code","00f6fc58":"code","760f4ae9":"code","fbfdfab0":"code","1058b8e7":"code","a75cd0c5":"code","256a268b":"code","2a70b755":"code","29f65d36":"code","e18b772b":"code","43dfcd79":"code","b8002605":"code","6a8ea3d6":"code","dcc24f14":"code","7e56dbdf":"code","50399bf8":"code","a2ad7723":"code","7a0a99b4":"code","d5e3bb33":"code","681169d4":"code","ae89b2ac":"code","51825a48":"code","080305e8":"code","89b57c6c":"code","147f5b5e":"code","150abde2":"code","9dcaac4a":"markdown","61185e17":"markdown","f393bff6":"markdown","39090bac":"markdown","17afeb6c":"markdown","2b72de6e":"markdown","8e23db8b":"markdown","9461250a":"markdown","a6b2a3d3":"markdown","3c4db357":"markdown","52284de0":"markdown","d78dc5bf":"markdown"},"source":{"b954917c":"import pandas as pd\ntrain = pd.read_csv('..\/input\/train.csv', nrows=300_000)\ntest = pd.read_csv('..\/input\/test.csv')","934a3905":"train.shape","8dd337e5":"train.head()","8a5da322":"%matplotlib inline\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt","00f6fc58":"train['pickup_datetime'] = pd.to_datetime(train['pickup_datetime'])\ntrain['hour'] = train['pickup_datetime'].dt.hour\ntrain['day'] = train['pickup_datetime'].dt.day\ntrain['week'] = train['pickup_datetime'].dt.week\ntrain['month'] = train['pickup_datetime'].dt.month\ntrain['day_of_year'] = train['pickup_datetime'].dt.dayofyear\ntrain['week_of_year'] = train['pickup_datetime'].dt.weekofyear","760f4ae9":"test['pickup_datetime'] = pd.to_datetime(test['pickup_datetime'])\ntest['hour'] = test['pickup_datetime'].dt.hour\ntest['day'] = test['pickup_datetime'].dt.day\ntest['week'] = test['pickup_datetime'].dt.week\ntest['month'] = test['pickup_datetime'].dt.month\ntest['day_of_year'] = test['pickup_datetime'].dt.dayofyear\ntest['week_of_year'] = test['pickup_datetime'].dt.weekofyear","fbfdfab0":"train.head()\ntrain = train.dropna(how = 'any', axis='rows')","1058b8e7":"train = train.loc[(train['fare_amount'] > 0) & (train['fare_amount'] < 200)]\ntrain = train.loc[(train['pickup_longitude'] > -75) & (train['pickup_longitude'] < 75)]\ntrain = train.loc[(train['pickup_latitude'] > 40) & (train['pickup_latitude'] < 45)]\ntrain = train.loc[(train['dropoff_longitude'] > -75) & (train['dropoff_longitude'] < 75)]\ntrain = train.loc[(train['dropoff_latitude'] > 40) & (train['dropoff_latitude'] < 45)]\ntrain = train.loc[train['passenger_count'] <= 8]","a75cd0c5":"train['abs_diff_longitude'] = (train['pickup_longitude'] - train['dropoff_longitude']).abs()\ntrain['abs_diff_latitude'] = (train['pickup_latitude'] - train['dropoff_latitude']).abs()","256a268b":"test['abs_diff_longitude'] = (test['pickup_longitude'] - test['dropoff_longitude']).abs()\ntest['abs_diff_latitude'] = (test['pickup_latitude'] - test['dropoff_latitude']).abs()","2a70b755":"train.head()","29f65d36":"train.head()","e18b772b":"sns.barplot(data=train, x=\"passenger_count\", y=\"fare_amount\")","43dfcd79":"#'hour', 'passenger_count'\nfeature_names = ['hour', 'passenger_count','abs_diff_longitude', 'abs_diff_latitude']\nfeature_names","b8002605":"label_name = 'fare_amount'\nlabel_name","6a8ea3d6":"X_train = train[feature_names]\ny_train = train[label_name]\nX_test = test[feature_names]","dcc24f14":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\n# Machine Learning\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb","7e56dbdf":"#Linear Regression Model\nregr = LinearRegression()\nregr.fit(X_train, y_train)\nregr_prediction = regr.predict(X_test)","50399bf8":"#KNeighborsRegressor\nknr = KNeighborsRegressor()\nknr.fit(X_train, y_train)\nknr_prediction = knr.predict(X_test)","a2ad7723":"#Random Forest Model\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)\nrfr_prediction = rfr.predict(X_test)","7a0a99b4":"dtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test)","d5e3bb33":"#set parameters for xgboost\nparams = {'max_depth':7,\n          'eta':1,\n          'silent':1,\n          'objective':'reg:linear',\n          'eval_metric':'rmse',\n          'learning_rate':0.05\n         }\nnum_rounds = 50","681169d4":"xb = xgb.train(params, dtrain, num_rounds)","ae89b2ac":"y_pred_xgb = xb.predict(dtest)\nprint(y_pred_xgb)","51825a48":"#Assigning weights\n# predictions = (regr_prediction + rfr_prediction + knr_prediction + 3 * y_pred_xgb) \/ 6\npredictions = y_pred_xgb","080305e8":"predictions","89b57c6c":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['fare_amount'] = predictions","147f5b5e":"submission.head()","150abde2":"submission.to_csv('.\/simplenewyorktaxi.csv', index=False)","9dcaac4a":"## Load Dataset","61185e17":"### Difference between latitude and longitude","f393bff6":"figure, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3)\n\nfigure.set_size_inches(18,8)\n\nsns.barplot(data=train, x=\"hour\", y=\"fare_amount\", ax=ax1)\nsns.barplot(data=train, x=\"day\", y=\"fare_amount\", ax=ax2)\nsns.barplot(data=train, x=\"week\", y=\"fare_amount\", ax=ax3)\nsns.barplot(data=train, x=\"month\", y=\"fare_amount\", ax=ax4)\nsns.barplot(data=train, x=\"day_of_year\", y=\"fare_amount\", ax=ax5)\nsns.barplot(data=train, x=\"week_of_year\", y=\"fare_amount\", ax=ax6)","39090bac":"## Preprocessing\n### Datetime\n* Parsing Datetime","17afeb6c":"### Longitude & Latitude\n* Calculate difference between longitude and latitude","2b72de6e":"# New York City Taxi Fare Prediction\n## Overview\n* train.csv - Input features and target fare_amount values for the training set (about 55M rows).\n* test.csv - Input features for the test set (about 10K rows). Your goal is to predict fare_amount for each row.\n* sample_submission.csv - a sample submission file in the correct format (columns key and fare_amount). This file 'predicts' fare_amount to be $11.35 for all rows, which is the mean fare_amount from the training set.","8e23db8b":"### Passengercount","9461250a":"## Train","a6b2a3d3":"## Explore\n### Datetime","3c4db357":"## ID\n* key - Unique string identifying each row in both the training and test sets. Comprised of pickup_datetime plus a unique integer, but this doesn't matter, it should just be used as a unique ID field. Required in your submission CSV. Not necessarily needed in the training set, but could be useful to simulate a 'submission file' while doing cross-validation within the training set.","52284de0":"## Features\n* **pickup_datetime** - timestamp value indicating when the taxi ride started.\n* **pickup_longitude** - float for longitude coordinate of where the taxi ride started.\n* **pickup_latitude** - float for latitude coordinate of where the taxi ride started.\n* **dropoff_longitude** - float for longitude coordinate of where the taxi ride ended.\n* **dropoff_latitude** - float for latitude coordinate of where the taxi ride ended.\n* **passenger_count** - integer indicating the number of passengers in the taxi ride.","d78dc5bf":"## Target\n* **fare_amount** - float dollar amount of the cost of the taxi ride. This value is only in the training set; this is what you are predicting in the test set and it is required in your submission CSV."}}