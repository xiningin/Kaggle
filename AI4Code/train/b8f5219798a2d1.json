{"cell_type":{"d5675bef":"code","9f595396":"code","1a2d039e":"code","f35fd25e":"code","5579aada":"code","a3fa4b59":"code","86a27d22":"code","be01fb61":"code","f520fd4d":"code","55e8f889":"code","69774916":"code","32081e83":"code","93c9bd77":"code","c7be182f":"code","59b0e207":"code","90718b80":"code","757e7d00":"code","017b259b":"code","5ea14d0a":"code","a8a193eb":"code","9e51c302":"code","e559a2ec":"code","30df5c7a":"code","0911c3bf":"code","1d97191b":"code","87b7f86a":"code","f3cf83f1":"code","c1a125ee":"code","b20241dc":"code","884a86af":"code","cb3bb4b1":"code","35b27550":"code","945a79e0":"code","62db7d57":"code","c80ca693":"code","5619cffd":"code","76dc09b4":"code","e0a0b7a9":"markdown","c11af366":"markdown","924e0f43":"markdown","0013928b":"markdown","c016e818":"markdown","c5eff1c9":"markdown","3058901f":"markdown","198dbb5e":"markdown","1bdc69fc":"markdown","4ea73d85":"markdown","fbc20799":"markdown","3723155e":"markdown","aeed7ad3":"markdown","902a7d78":"markdown","fc3a6686":"markdown"},"source":{"d5675bef":"import pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\n\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler","9f595396":"# Loading Dataset and remainig its columns\n\ndata=pd.read_csv('..\/input\/netflix-stock-dataset-20022021\/NFLX Stock.csv')\ndata = data.rename(columns={'Date': 'date','Open':'open','High':'high','Low':'low','Close':'close','Adj Close':'adj_close','Volume':'volume'})","1a2d039e":"# Displaying first 5 rows of the dataset\n\ndata.head()","f35fd25e":"# Displaying Last 5 rows of the dataset\n\ndata.tail()","5579aada":"data.shape","a3fa4b59":"data.isnull().sum()","86a27d22":"data['date'] = pd.to_datetime(data.date)\ndata.head()","be01fb61":"# Finding the duration of dataset\n\nprint(\"Starting date: \",data.iloc[0][0])\nprint(\"Ending date: \", data.iloc[-1][0])\nprint(\"Duration: \", data.iloc[-1][0]-data.iloc[0][0])","f520fd4d":"y_2020 = data.loc[(data['date'] >= '2020-01-01')\n                     & (data['date'] < '2021-01-01')]\n\ny_2020.drop(y_2020[['adj_close','volume']],axis=1)","55e8f889":"monthvise= y_2020.groupby(y_2020['date'].dt.strftime('%B'))[['open','close']].mean()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)\nmonthvise","69774916":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock open and close price')\nfig.show()\n","32081e83":"y_2020.groupby(y_2020['date'].dt.strftime('%B'))['low'].min()\nmonthvise_high = y_2020.groupby(data['date'].dt.strftime('%B'))['high'].max()\nmonthvise_high = monthvise_high.reindex(new_order, axis=0)\n\nmonthvise_low = y_2020.groupby(y_2020['date'].dt.strftime('%B'))['low'].min()\nmonthvise_low = monthvise_low.reindex(new_order, axis=0)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","93c9bd77":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(y_2020, x=y_2020.date, y=[y_2020['open'], y_2020['close'], \n                                          y_2020['high'], y_2020['low']],\n             labels={'Date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","c7be182f":"y_2021 = data.loc[(data['date'] >= '2021-01-01')\n                     & (data['date'] < '2021-12-31')]\n\ny_2021.drop(y_2021[['adj_close','volume']],axis=1)","59b0e207":"monthvise= y_2021.groupby(y_2021['date'].dt.strftime('%B'))[['open','close']].mean()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)\nmonthvise","90718b80":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock open and close price')\nfig.show()","757e7d00":"y_2021.groupby(y_2021['date'].dt.strftime('%B'))['low'].min()\nmonthvise_high = y_2021.groupby(data['date'].dt.strftime('%B'))['high'].max()\nmonthvise_high = monthvise_high.reindex(new_order, axis=0)\n\nmonthvise_low = y_2021.groupby(y_2021['date'].dt.strftime('%B'))['low'].min()\nmonthvise_low = monthvise_low.reindex(new_order, axis=0)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","017b259b":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(y_2021, x=y_2021.date, y=[y_2021['open'], y_2021['close'], \n                                          y_2021['high'], y_2021['low']],\n             labels={'Date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","5ea14d0a":"y_overall=data\ny_overall.drop(y_overall[['adj_close','volume']],axis=1)","a8a193eb":"monthvise= y_overall.groupby(y_overall['date'].dt.strftime('%B'))[['open','close']].mean()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)","9e51c302":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(y_overall, x=y_overall.date, y=[y_overall['open'], y_overall['close'], \n                                          y_overall['high'], y_overall['low']],\n             labels={'Date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","e559a2ec":"closedf = data[['date','close']]\nprint(\"Shape of close dataframe:\", closedf.shape)","30df5c7a":"closedf = closedf[closedf['date'] > '2020-11-13']\nclose_stock = closedf.copy()\nprint(\"Total data for prediction: \",closedf.shape[0])","0911c3bf":"del closedf['date']\nscaler=MinMaxScaler(feature_range=(0,1))\nclosedf=scaler.fit_transform(np.array(closedf).reshape(-1,1))\nprint(closedf.shape)","1d97191b":"training_size=int(len(closedf)*0.70)\ntest_size=len(closedf)-training_size\ntrain_data,test_data=closedf[0:training_size,:],closedf[training_size:len(closedf),:1]\nprint(\"train_data: \", train_data.shape)\nprint(\"test_data: \", test_data.shape)","87b7f86a":"fig, ax = plt.subplots(figsize=(15, 6))\nsns.lineplot(x = close_stock['date'][:149], y = close_stock['close'][:149], color = 'black')\nsns.lineplot(x = close_stock['date'][149:], y = close_stock['close'][149:], color = 'red')\n\n# Formatting\nax.set_title('Train & Test data', fontsize = 20, loc='center', fontdict=dict(weight='bold'))\nax.set_xlabel('Date', fontsize = 16, fontdict=dict(weight='bold'))\nax.set_ylabel('Weekly Sales', fontsize = 16, fontdict=dict(weight='bold'))\nplt.tick_params(axis='y', which='major', labelsize=16)\nplt.tick_params(axis='x', which='major', labelsize=16)\nplt.legend(loc='upper right' ,labels = ('train', 'test'))\nplt.show()","f3cf83f1":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","c1a125ee":"time_step = 21\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_test\", y_test.shape)","b20241dc":"# Biulding Model\n\nmy_model = XGBRegressor(n_estimators=1000)\nmy_model.fit(X_train, y_train, verbose=False)","884a86af":"predictions = my_model.predict(X_test)\nprint(\"Mean Absolute Error - MAE : \" + str(mean_absolute_error(y_test, predictions)))\nprint(\"Root Mean squared Error - RMSE : \" + str(math.sqrt(mean_squared_error(y_test, predictions))))","cb3bb4b1":"train_predict=my_model.predict(X_train)\ntest_predict=my_model.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)","35b27550":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","945a79e0":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Close price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","62db7d57":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = my_model.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = my_model.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","c80ca693":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","5619cffd":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Close price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","76dc09b4":"my_model=closedf.tolist()\nmy_model.extend((np.array(lst_output).reshape(-1,1)).tolist())\nmy_model=scaler.inverse_transform(my_model).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close Price'])\n\nfig = px.line(my_model,labels={'value': 'Close price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","e0a0b7a9":"### Normalizing close price value","c11af366":"## Prediction next 10 days","924e0f43":"### Visualizing Dataset for Year 2021","0013928b":"#### Year 2020","c016e818":"# Importing Library","c5eff1c9":"### Convert date field from string to Date format","3058901f":"# Prepare train data for time series analysis","198dbb5e":" # Import XGBRegressor module and Fit X_train and y_train for training mode","1bdc69fc":"# Separate data for Train and Test","4ea73d85":"## Overall Analysis from 2002-2021","fbc20799":"**Since we had data till September, so after September its showing NaN**","3723155e":"# Loading Dataset","aeed7ad3":"# Checking for null values","902a7d78":"### Creating new dataframe of Bitcoin data containing only date and closing price","fc3a6686":"# EDA"}}