{"cell_type":{"0fb25c42":"code","fd4cd46f":"code","1422a150":"code","9115ec7d":"code","b5374ccf":"code","a8d15d8d":"code","aeacee71":"code","ddc67df4":"code","f3291efc":"code","81aa3727":"code","8f0bc4d6":"code","b1120bff":"code","dfea8cb6":"code","6221797d":"code","57282d6d":"code","d7fd4b6b":"code","03f95ee8":"code","0734ce70":"code","3b3e8c39":"code","164b50bc":"code","72e5a812":"code","ad086782":"code","08e94ced":"code","7438a214":"code","ebca0294":"code","209d89f8":"code","b2c6bacb":"code","cefc2adf":"code","ab952b4a":"code","fea3eb0a":"code","64ce65db":"code","92c30d54":"code","b0150b95":"code","4e527ea3":"code","bf51d154":"code","2390cc23":"code","9748ae5b":"code","5c120ec5":"code","844989b6":"code","ce5f004d":"code","a99a925d":"code","f4405e24":"code","2ded00fd":"code","2eb78d66":"code","69b1c879":"code","2f81eef9":"code","cf22c3b7":"code","128026b4":"code","89e6fc40":"code","04dc1977":"markdown","63685537":"markdown","0713a270":"markdown","e6b17d20":"markdown","40a8b11a":"markdown","ca2a3adc":"markdown","0e0e0450":"markdown","14915ffc":"markdown","1b73e5bc":"markdown","9709bdab":"markdown","e327df27":"markdown","319f2623":"markdown","cc277d07":"markdown","e224fb15":"markdown","0e91da87":"markdown","c3636cfa":"markdown","1b0a6fd0":"markdown","655243fa":"markdown","acb58be6":"markdown","db2f7cb3":"markdown","0ef6a00d":"markdown","c9b3f9ae":"markdown","b80d38d8":"markdown","8e182967":"markdown","f11d6ad6":"markdown","bbad4e50":"markdown","82540378":"markdown","e8eec072":"markdown","66dd360d":"markdown","b99aedf8":"markdown","9cd870f4":"markdown"},"source":{"0fb25c42":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","fd4cd46f":"DATASET_PATH = \"\/kaggle\/input\/fashion-product-images-dataset\/fashion-dataset\/fashion-dataset\/\"\nprint(os.listdir(DATASET_PATH))","1422a150":"# what is inside the main directory\nlist_directory = os.listdir(DATASET_PATH)\nprint(list_directory)\n\n# each time directory files gets reordered. That's why needed to find where images folder is.\nindex=0\nfor i in range (len(list_directory)):\n    if list_directory[i]==\"images\":\n        index=i\n        break\n\n# what is in the image directory\nimageIndex = os.listdir(DATASET_PATH+list_directory[index])\n# print(type(imageIndex))\nhead = 10\n\n# collecting some samples in list\nsampleImages = []\n\n# showing indices\nfor i in range (head):\n    sampleImages.append(imageIndex[i])\n    print(sampleImages[i])\n\n# choosing some samples to observe\nfig=plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\naxis=[]\nrow = len(sampleImages)\/2\ncol = row+1\n\nfor i in range (len(sampleImages)):\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+sampleImages[i]\n    src = cv2.imread(Image_path)\n    image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \n    axis.append(fig.add_subplot(row, col, i+1))\n    subplot_title=sampleImages[i]\n    axis[-1].set_title(subplot_title)  \n    plt.imshow(image)\n\nfig.tight_layout()\nplt.show()","9115ec7d":"df = pd.read_csv(DATASET_PATH + \"styles.csv\", nrows=40000, error_bad_lines=False)\ndf.head(10)","b5374ccf":"df['image'] = df.apply(lambda row: str(row['id']) + \".jpg\", axis=1)\ndf.head(10)","a8d15d8d":"augmentedDataframe = pd.DataFrame({\n    'filename': df['image'],\n    'type': df['articleType']\n})\n\n# total number of entries in the dataframe\ntotal_row = len(augmentedDataframe)\nprint('total row count: ', total_row)\n\naugmentedDataframe.head(10)","aeacee71":"unique_types = augmentedDataframe['type'].unique().tolist()\ntotal_class = len(unique_types)\nprint(total_class)\nprint(unique_types)\nprint(unique_types[0])\nprint(unique_types.index(unique_types[0]))\naugmentedDataframe['number_types'] = augmentedDataframe['type'].apply(lambda x: unique_types.index(x) if x in unique_types else 0)\naugmentedDataframe.head(10)","ddc67df4":"augmentedDataframe['type'].value_counts()","f3291efc":"plt.figure(figsize=(20,5))\naugmentedDataframe['type'].value_counts().plot(kind='bar',x='type',y='filename')\nplt.show()","81aa3727":"def getData(start,stop):\n    x_data = []\n    y_data = []\n    #start = 0 #setting start parameter\n    #stop = int(0.001*total_row) #setting stop parameter \n    \n    for i in range(start, stop): \n        Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n#         print(augmentedDataframe.loc[i,'filename'])\n        image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n        try:\n            resized_img = cv2.resize(image, dsize=(28, 28))\n        except:\n            print(\"Rejected Image: \"+augmentedDataframe.loc[i,'filename'])\n            continue\n        x_data.append(resized_img) \n        y_values = augmentedDataframe.loc[i,'number_types'] # earlier it was type\n        y_data.append(y_values)\n                \n    return x_data, y_data","8f0bc4d6":"X=[]\nY=[]\n# for now start=0,stop=(0.001*total_row)\n# total_row=count of rows in augmented data frame\nstart = 0\nstop = int(0.001*total_row) # testing with 0.1% image of the dataset\nX,Y=getData(start,stop)","b1120bff":"print(type(X))\nprint(X[0])\nplt.title(unique_types[Y[0]])\nplt.imshow(X[0])","dfea8cb6":"X = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)","6221797d":"X = X\/255.0","57282d6d":"Y = Y.reshape(len(X),)","d7fd4b6b":"print(type(X))\nprint(X.shape)\nprint(Y.shape)\nprint(X[0])\nprint(Y[0])","03f95ee8":"X=[]\nY=[]\nstart = 0\nstop = total_row\nX,Y=getData(start,stop)\n\n# conversion into numpy array\nX = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)\n\n# normalizing\nX = X\/255\n\n# processing Y_train for dimension matching\nY = Y.reshape(len(X),)","0734ce70":"print('Image Data Shape: ',X.shape)\nprint('Label Data Shape: ',Y.shape)","3b3e8c39":"from sklearn.model_selection import train_test_split","164b50bc":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 500)","72e5a812":"print('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Test Image Data Shape: ',X_test.shape)\nprint('Test Label Data Shape: ',Y_test.shape)\n","ad086782":"X_train, X_validate, Y_train, Y_validate = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 500)","08e94ced":"print('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Validation Image Data Shape: ',X_validate.shape)\nprint('Validation Label Data Shape: ',Y_validate.shape)","7438a214":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nimport os\nimport tensorflow as tf\nimport datetime, os\nfrom tensorflow.keras.callbacks import TensorBoard","ebca0294":"def build_model():\n    cnn_model = Sequential()\n    cnn_model.add(Conv2D(32, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(64, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(128, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Flatten())\n    cnn_model.add(Dense(units = 512, activation = 'relu'))\n    cnn_model.add(Dropout(0.25))\n    cnn_model.add(Dense(units = total_class, activation = 'softmax'))\n    return cnn_model\n","209d89f8":"model=build_model()","b2c6bacb":"print(model.summary())","cefc2adf":"def train_model(model):\n    model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics =['accuracy'])\n    history = model.fit(X_train, Y_train, batch_size = 128, epochs = 150, verbose = 1, validation_data = (X_validate, Y_validate))\n#     model.fit(X_train, Y_train, epochs=50, batch_size=512, validation_split=0.2)","ab952b4a":"train_model(model)","fea3eb0a":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(model.history.history['loss'], label='Loss')\n# plt.plot(model.history.history['val_loss'], label='val_Loss')\nplt.legend()\nplt.grid()\nplt.title('Loss evolution')\n\nplt.subplot(2, 2, 2)\nplt.plot(model.history.history['accuracy'], label='accuracy')\n# plt.plot(model.history.history['val_accuracy'], label='val_accuracy')\nplt.legend()\nplt.grid()\nplt.title('Accuracy evolution')","64ce65db":"model.save('visual_product_recommend.h5')","92c30d54":"from keras import models","b0150b95":"model = models.load_model('visual_product_recommend.h5')","4e527ea3":"predicted_classes = model.predict_classes(X_test)","bf51d154":"#PC=PredictedClass #TC=TrueClass\nL = 5\nW = 5\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title(f\"PC = {unique_types[predicted_classes[i]]}\\n TC = {unique_types[Y_test[i]]}\") #predicted_classes[i]:0.1f #Y_test[i]:0.1f\n    axes[i].axis('off')\nplt.subplots_adjust(wspace=0.5)","2390cc23":"#augmentedDataframe.head(10)","9748ae5b":"def load_image(i):\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n    Image_id=augmentedDataframe.loc[i,'filename'].split(\".\")\n    res=Image_id[0]\n    image = cv2.imread(Image_path,cv2.IMREAD_COLOR)\n    resized_img = cv2.resize(image, dsize=(224, 224))\n    return resized_img,res","5c120ec5":"img,img_id = load_image(200)\nimg=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nplt.title(img_id)\nplt.imshow(img)","844989b6":"def make_prediction(img):\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) \n    resized_img = cv2.resize(img, dsize=(28, 28))\n    x_data = np.array(resized_img).reshape(-1, 28,28,1)\n    x_data=x_data\/255\n#     print(x_data)\n#     print(x_data.shape)\n    result=model.predict(x_data)\n#     print(type(result))\n#     print(np.argmax(result))\n    return x_data,unique_types[np.argmax(result)]\n    ","ce5f004d":"numpy_image,result=make_prediction(img)\nprint(result)","a99a925d":"#df.head(10)","f4405e24":"typeList=[]\nfor i, row in df.iterrows(): \n    if(row[\"articleType\"]==result):\n        #print(row[\"id\"],row[\"articleType\"])\n        if(img_id!=str(row[\"id\"])):\n            typeList.append(row['id'])","2ded00fd":"print(typeList)","2eb78d66":"i=0\nX_similar=[]\nX_id_similar=[]\nX_numpy=[]\nfor imageId in typeList:\n#     print(imageId)\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(imageId)+\".jpg\"\n    image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n    try:\n        resized_img = cv2.resize(image, dsize=(28,28))\n    except:\n        print(\"can't read file: \", str(imageId)+\".jpg\")\n    X_similar.append(resized_img)\n    X_id_similar.append(imageId)\n        \nX_numpy = np.array(X_similar).reshape(-1, 28,28,1)\nX_numpy = X_numpy\/255\n#print(X_numpy[0])\n    ","69b1c879":"plt.imshow(X_similar[0])\nplt.title(X_id_similar[0])","2f81eef9":"import math\ndef calculateDistance(i1, i2):\n    return math.sqrt(np.sum((i1-i2)**2))","cf22c3b7":"print(calculateDistance(numpy_image,X_numpy[0]))","128026b4":"distance_list=[]\nfor i in range (0, len(X_numpy)):\n    distance_list.append(calculateDistance(numpy_image,X_numpy[i]))\n\nsorted_distance_list=distance_list.copy()\n#print(distance_list)\nsorted_distance_list.sort()\n\nleast_ten_distance=sorted_distance_list[0:10]\nprint(least_ten_distance)\nindex_distance=[]\nfor i in range (0, len(least_ten_distance)-1):\n    if(least_ten_distance[i]!=least_ten_distance[i+1]):\n        index_distance.append(distance_list.index(least_ten_distance[i]))\n\nindex_distance=index_distance[0:5]\n\nprint(index_distance)","89e6fc40":"# Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(img_id)+\".jpg\"\n# src = cv2.imread(Image_path)\n# image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \nplt.imshow(img)\nplt.title(img_id)\n\nfig=plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\naxis=[]\nfor i in range(0,len(index_distance)):\n    print(X_id_similar[i])\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(X_id_similar[index_distance[i]])+\".jpg\"\n    src = cv2.imread(Image_path)\n    image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \n    axis.append(fig.add_subplot(1,5, i+1))\n    subplot_title=str(X_id_similar[index_distance[i]])\n    axis[-1].set_title(subplot_title)  \n    plt.imshow(image)\n\nfig.tight_layout()\nplt.show()\n    ","04dc1977":"> # Creating sequential model with layers","63685537":"# Image id matches with styles.csv file Id column. \n## For ease of access, adding another column naming 'id.jpg'","0713a270":"# Showing Directories with List","e6b17d20":"# Change into numpy array","40a8b11a":"# Saving Model","ca2a3adc":"# Calculating Vector Distance between Two Image","0e0e0450":"# Successful insertion of images in the array. Also we got the labels required.","14915ffc":"# Starting with train and test data\n## Inserting Image and Labels in numpy array","1b73e5bc":"># Importing Libraries","9709bdab":"# Adding all the images to numpy array\n> # X=Image Array\n> # Y=Image Label Array","e327df27":"# What is inside the image directory\n## Observing some sample image","319f2623":"# Load Model","cc277d07":"# Starting Check for Similarity","e224fb15":"# Recommended Items","0e91da87":"> # Created a list with unique values And added a column with their specified element position","c3636cfa":"> ## Splitting done with train and test and validation set.","1b0a6fd0":"# Sample printing","655243fa":"# Processing labels for dimension matching","acb58be6":"# Test of the function","db2f7cb3":"# Now we got Image and Label added in the arrays. Next will be Spliting both train and test data.","0ef6a00d":"# CNN Model Create","c9b3f9ae":"# Importing the Libraries","b80d38d8":"# Problem1-We have no labeled data. Exploring styles.csv for more info. ","8e182967":"# Single Image Prediction & Find the Label of the Image","f11d6ad6":"# Building another dataframe with columns- image and article type","bbad4e50":"# Normalizing by 255","82540378":"# Utility Function to get images and inserted into image array\n## Start and Stop parameters will be useful train and test separation\n\n## Here all X=image_data, Y=label_data","e8eec072":"# Predictions for the test data","66dd360d":"# Model Evolution","b99aedf8":"> # Train,Test Division into 90:10\n> # Train,Validation Division into 90:10\n> Train, Validation, Test Percentage 80:10:10","9cd870f4":"# Here total counting length is total available class."}}