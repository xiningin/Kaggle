{"cell_type":{"0aedbfe1":"code","b70d8965":"code","0a7a3d12":"code","1fd9a3b5":"code","c046bcbb":"code","f93c870a":"code","356f3dc9":"code","94dc8a5c":"code","ebb3faa2":"code","3ff81bc2":"code","f004502e":"code","ad2ab527":"code","281e9f4d":"code","10f31855":"code","0470f3ac":"code","76eb8b3b":"code","562b8ebb":"code","281dc73b":"code","d5303408":"code","92e50d89":"code","d799067c":"code","24ad2d55":"code","003d41bf":"code","de96d2ba":"code","006644eb":"code","edff13f2":"code","69455959":"code","3fb05018":"code","5a6d7c49":"code","f7300a87":"code","68ae0c3b":"code","90ae8e70":"code","7718e9c4":"code","e3bc3457":"code","b183ee7c":"code","a2ff4649":"code","4402866c":"code","940b952f":"code","4b0f4543":"code","4d4a41bc":"code","61a7cff9":"code","f0ceb0e1":"code","2d46af25":"code","0137df73":"code","72a22ec1":"code","0c3ff422":"code","c5acdcff":"code","da0e59fa":"code","74095343":"code","7be480a3":"code","add5d03e":"code","c62c3b40":"markdown","f1a480e8":"markdown","3a553a57":"markdown","1df32ee1":"markdown","bfaeb19c":"markdown","2c1ad1a0":"markdown","9dc707db":"markdown","63164ff4":"markdown","52f82234":"markdown","25344680":"markdown","be6e30be":"markdown","bbc50127":"markdown","57e82593":"markdown","7f8fd12a":"markdown","be1f3979":"markdown","2270f499":"markdown","8bfc9e76":"markdown","ec6e1ad9":"markdown","659e5312":"markdown","0e87d405":"markdown","e45e5f99":"markdown","f3dd49d4":"markdown","8c8e11ec":"markdown","12053ceb":"markdown","753031f7":"markdown","62945365":"markdown","1bbe90f3":"markdown","b4284273":"markdown","956e266d":"markdown","5d465a84":"markdown","2c231ebb":"markdown","497d7903":"markdown"},"source":{"0aedbfe1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b70d8965":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0a7a3d12":"df = pd.read_csv('\/kaggle\/input\/used-bike-price-in-india\/bikes.csv')","1fd9a3b5":"df.head()","c046bcbb":"df.info()","f93c870a":"# remove whitespace from data\nfor col in df.select_dtypes(include='object').columns:\n        df[col] = df[col].str.strip()","356f3dc9":"# Remove commas from kms_driven and price columns\n\ndef clean_kms_driven(val):\n    if not val:\n        return ''\n\n    val = val.lower()\n\n    if 'kms' in val:\n        val = val.replace('kms','')\n\n    if 'km' in val:\n        val = val.replace('km','')\n\n    if 'mileage' in val.lower():\n        return np.nan\n\n    return val.replace(',','')\n\n\ndef clean_price(val):\n    if not val:\n        return ''\n\n    val = str(val)\n\n    val = val.replace(',','')\n\n\n    return val\n    \n\ndf['kms_driven'] = df['kms_driven'].apply(clean_kms_driven)\n\ndf['price'] = df['price'].apply(clean_price)\n\n","94dc8a5c":"df['kms_driven'] = pd.to_numeric(df['kms_driven'],errors='coerce',downcast='integer')\ndf['price'] = pd.to_numeric(df['price'],errors='coerce',downcast='integer')","ebb3faa2":"# onwer feature have one value which is \"fourth or more\" make it \"fourth\"\ndef clean_owner(val):\n    if not val:\n        return val\n\n    val = val.replace('owner','')\n\n    if 'or more' in val.lower():\n        return 'fourth'\n\n    return val.strip()\n\ndf['owner'] = df['owner'].apply(clean_owner)","3ff81bc2":"def clean_mileage(val):\n    if not val:\n        return np.nan\n    \n    return str(val).lower().replace('kmpl','')\n\ndf['mileage'] = df.mileage.apply(clean_mileage)","f004502e":"def clean_power(val):\n    if not val:\n        return np.nan\n    \n    return str(val).lower().replace('bhp','')\n\ndf['power'] = df.power.apply(clean_power)","ad2ab527":"df = df[~df.duplicated()]","281e9f4d":"cols = ['kms_driven', 'price','mileage','power']\nfor col in cols:\n    df[col] = pd.to_numeric(df[col], errors='coerce', downcast='integer')","10f31855":"df.info()","0470f3ac":"df['brand'] = df['model_name'].apply(lambda x: ' '.join(x.split()[:1]))","76eb8b3b":"import re\ndef extract_cc(val):\n    match =  re.search(r\"\\d{2,}(cc)\", val) \n    if match:\n        return match.group().replace('cc','')\n    else:\n        return None\n    \n\ndf['engine'] = df['model_name'].apply(extract_cc)","562b8ebb":"df.head(3)","281dc73b":"df = df.drop('model_name',axis=1)","d5303408":"from datetime import date\ncurrent_year = date.today().year\n\ndf['age'] = df.model_year.apply(lambda x: current_year - x if x else None )","92e50d89":"df = df.drop('model_year',axis=1)","d799067c":"print('Unique Value Count:',len(df.location.unique()))","24ad2d55":"top_locations = df.location.value_counts().index[:5]\nprint(top_locations)","003d41bf":"df['location'] = df.location.apply(lambda x: x if x in top_locations else 'other')","de96d2ba":"print('Unique Brands :',len(df['brand'].unique()))","006644eb":"top_brands = df['brand'].value_counts().index[:10]\ndf['brand'] = df['brand'].apply(lambda x: x if x in top_brands else 'other')","edff13f2":"df['brand'] = df.brand.str.replace('Royal','Royal Enfield')","69455959":"df['engine'] = pd.to_numeric(df['engine'], errors='coerce', downcast='integer')","3fb05018":"df.head()","5a6d7c49":"def box_plot(df):\n    plt.figure(figsize=(8,6))\n    sns.boxplot(data=df)","f7300a87":"box_plot(df['kms_driven'])","68ae0c3b":"max_val = df['kms_driven'].quantile(.99)\n\nmin_val = df['kms_driven'].quantile(.1)\n\ndf = df[(df['kms_driven'] <= max_val) & (df['kms_driven'] > min_val)]","90ae8e70":"box_plot(df['kms_driven'])","7718e9c4":"box_plot(df['mileage'])","e3bc3457":"box_plot(df['power'])","b183ee7c":"box_plot(df['age'])","a2ff4649":"df = df[df['age'] <= 16]","4402866c":"box_plot(df['price'])","940b952f":"max_val = df['price'].quantile(.99)\n\nmin_val = df['price'].quantile(.1)\n\ndf = df[(df['price'] <= max_val) & (df['price'] > min_val)]","4b0f4543":"box_plot(df['price'])","4d4a41bc":"df.shape","61a7cff9":"X = df.drop('price',axis=1)\ny = df['price']","f0ceb0e1":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.25,random_state=11)","2d46af25":"from sklearn.impute import KNNImputer\n\nnum_cols = [ col for col in X.columns if X[col].dtypes != 'object' ]\nprint(num_cols)","0137df73":"imputer = KNNImputer(n_neighbors=7,weights='distance')\n\nimputer.fit(X_train[num_cols])\n\nX_train.loc[:][num_cols] = imputer.fit_transform(X_train[num_cols])\nX_test.loc[:][num_cols] = imputer.transform(X_test[num_cols])","72a22ec1":"print('Missing Values in Train set',X_train.isnull().sum())\nprint('Missing Values in Test set',X_test.isnull().sum())","0c3ff422":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder,OrdinalEncoder,MinMaxScaler\n\ncategory_transformer = ColumnTransformer([\n    (\"kms_driven_engine_min_max_scaler\",MinMaxScaler(),[0,6,3,4]),\n    (\"owner_ordinal_enc\",OrdinalEncoder(categories=[['fourth','third','second','first']],dtype=np.int16),[1]),\n    (\"brand_location_ohe\",OneHotEncoder(sparse=False,handle_unknown='error',drop='first',),[2,5]),\n],remainder='passthrough')\n","c5acdcff":"from sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn import set_config\n\nset_config(display='diagram')","da0e59fa":"def build_pipeline_with_estimator(estimator):\n    return Pipeline([\n    ('category_transformer',category_transformer),\n    ('estimator',estimator),\n])","74095343":"# Metrics\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n# MAPE\ndef mape(targets, predictions):\n    return np.mean(np.abs((targets - predictions)) \/ targets) * 100\n\n# Adjusted R^2\ndef adj_r2(ind_vars, targets, predictions):\n    r2 = r2_score(targets, predictions)\n    n = ind_vars.shape[0]\n    k = ind_vars.shape[1]\n    return 1-((1-r2)*(n-1)\/(n-k-1))\n\n# Model performance check\ndef model_perf(model, inp, out,cross_val=True):\n\n    y_pred = model.predict(inp)\n    y_act = out.values\n\n    cross_val_ = cross_val_score(model, inp,out,cv=10).mean() if cross_val else None\n    \n\n    return pd.DataFrame({\n                \"RMSE\": np.sqrt(mean_squared_error(y_act, y_pred)),\n                \"MAE\": mean_absolute_error(y_act, y_pred),\n                \"MAPE\": mape(y_act, y_pred),\n                \"R^2\": r2_score(y_act, y_pred),\n                \"Adjusted R^2\": adj_r2(inp, y_act, y_pred),\n                \"Cross Val Score (Mean)\": cross_val_ if cross_val else None\n           }, index=[0])","7be480a3":"linear_regressor = build_pipeline_with_estimator(LinearRegression())\n\nlinear_regressor.fit(X_train,y_train)\n\nprint('Linear Regression Train Performance.\\n')\nprint(model_perf(linear_regressor,X_train,y_train,True))\n\nprint('Linear Regression Test Performance.\\n')\nprint(model_perf(linear_regressor,X_test,y_test,True))","add5d03e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nmodel = build_pipeline_with_estimator(RandomForestRegressor())\n\n\nmodel.fit(X_train,y_train)\n\nprint('RandomForest Train Performance.\\n')\nprint(model_perf(model,X_train,y_train,False))\n\nprint('RandomForest Test Performance.\\n')\nprint(model_perf(model,X_test,y_test,False))","c62c3b40":"## Handle location","f1a480e8":"## Handle model_name\n### There are too many models, let's try to create a brand category using the model name.","3a553a57":"### Impute missing values","1df32ee1":"## Handle engine","bfaeb19c":"## Handle brand","2c1ad1a0":"### mileage looks good, let's not mess with it","9dc707db":"## Power","63164ff4":"### Category encoding transformer","52f82234":"### Let's take only top 5 locations and make other as 'others'","25344680":"# Outlier Handling","be6e30be":"### Remove duplicates\n","bbc50127":"#### Let's change the 'Royal' to 'Royal Enfield' as it is the actual brand","57e82593":"## Data Cleaning","7f8fd12a":"# Feature Engineering","be1f3979":"### Let's take only top 10 brands as our base brands & make other as 'other' category","2270f499":"### RandomForest","8bfc9e76":"### We can now drop the model_name feature as it has no use.","ec6e1ad9":"### Let's drop the model_year as we will use the age value","659e5312":"### LinearRegression","0e87d405":"### More than 16 years old bikes are not that much good enough to be bought by anyone,let's take only age upto 16 years.\nNOTE: I have come to the number 16 by trial and error.","e45e5f99":"### We can also extract the engine details as cc from model_name","f3dd49d4":"### I will create the pipeline to handle the missing values and category encoding","8c8e11ec":"## kms_driven","12053ceb":"## Price","753031f7":"## Age","62945365":"price outliers could really impact on our model,Let's remove the outliers using quantile method\n","1bbe90f3":"Some bikes can have more power than normal bikes, so this could be a valid data points.","b4284273":"## You can try other models as well if you want. I hope you find this notebook useful....","956e266d":"# Model Building","5d465a84":"## mileage","2c231ebb":"### Fix column data types","497d7903":"## Handle model_year\n### We can use model_year to calculate the age of the bike, Age might give us the better results or representation"}}