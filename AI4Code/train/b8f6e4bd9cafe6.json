{"cell_type":{"c1eca614":"code","1cba7be5":"code","ac975c4f":"code","cb603228":"code","a148f6ed":"code","74f2a735":"code","3a0ed340":"code","6d559823":"code","29794164":"code","10a00314":"code","3fe2bbab":"code","cb9becbc":"code","3c8fa046":"code","0650bb2a":"code","54896b66":"code","5f28f9d5":"code","c184861c":"code","650d8cb7":"code","40534623":"code","cee52fe9":"code","0d4d15e5":"code","85546e2c":"code","6c67c66a":"code","101afa09":"code","8a78e7c1":"code","82bca412":"code","fb1532e5":"code","acd52dc2":"code","87fb16f1":"code","26ff36fc":"code","95565c1b":"code","dc66a54a":"code","3a0f35f9":"code","c866bdf4":"code","8630958b":"code","3799f9dc":"code","c4d2a07f":"code","ffbf3a3a":"code","cc39424e":"code","2a3701f9":"code","099d991d":"code","23351131":"code","e70d30de":"code","1fd40ecf":"code","8949b098":"code","d5a2c248":"code","392aecc5":"code","f040e114":"code","57eaef11":"code","1809b659":"code","e4a3c9b1":"code","e9ddc0f4":"code","a17f0d84":"code","630bdb70":"code","b4cd005e":"code","a7766bdc":"code","5c451a3c":"code","461ae898":"code","936204b0":"code","b09dcec9":"code","c43b8554":"code","75196198":"code","b77250b6":"code","39bc5df6":"code","1149c9cf":"code","d09d274c":"code","8af8d88e":"code","b5f184f8":"code","98001f5d":"code","41afb1ea":"code","2d0019fa":"code","6b073a46":"code","88e7156b":"code","921342ee":"code","9c07b248":"code","d8c3c54a":"code","6159d8cc":"code","cdb53124":"code","1040706f":"code","c85adbb8":"code","6c239861":"code","95c66db5":"code","0abeefc5":"code","6955403a":"code","1380683a":"code","f92dd895":"code","df8953c6":"code","ebf42c41":"code","04370e94":"code","769b10c4":"code","1d343da6":"code","ca2ae239":"code","3be27c2b":"code","7c087968":"code","0e5bca48":"code","ff499d83":"code","4ae86cfa":"code","079e69f8":"code","e7faa5db":"code","409a47f3":"code","de06762c":"code","00e9d260":"code","a28c8f8a":"code","d74e76fe":"code","6c1c3b0e":"code","13df7511":"code","7ccf8a5a":"code","5c7c2b1f":"code","009ec3bd":"code","868363e9":"code","1673c4d0":"code","08fba3ba":"code","ae0b4c8b":"code","091ae92a":"code","9d073861":"code","f8ac1726":"code","6c95c9f0":"code","97343b84":"code","f26d8490":"code","f80ce2d4":"code","465ede9c":"code","34472563":"code","93dab6b2":"code","02c92c8c":"code","17179c63":"code","58cc63eb":"code","db7f65a0":"code","3a69949c":"code","ab2850d2":"code","4fc74a34":"code","23c6652d":"code","6c825baf":"code","eeaefe90":"code","49d30112":"code","0a948eae":"code","3b0fe11e":"code","cec48a33":"code","b3976f0a":"code","7d415783":"code","00e2b3ce":"code","580bf131":"code","faf53e61":"code","ef1a5749":"code","c2e4086d":"code","6bd7132c":"code","1bd95129":"code","2acf6fe9":"code","f86f1e73":"code","5ceaafde":"code","4703d66b":"code","662e92d0":"code","3e1c9c2c":"code","f837e528":"code","a4d0547d":"code","cafc07d1":"code","7b565ff8":"code","4cb43eed":"markdown","2a7b8154":"markdown","c6f4e6c9":"markdown","76861afa":"markdown","6c8265c8":"markdown","4622a6b8":"markdown","bb454187":"markdown","5611d0c4":"markdown","ced1c9c6":"markdown","51a77a06":"markdown","74fc5dfb":"markdown","c14ea427":"markdown","a8e7cb1b":"markdown","7fa6e91f":"markdown","5282cbdf":"markdown","053880b3":"markdown","0f134423":"markdown","5536a152":"markdown","284643a5":"markdown","4431de81":"markdown","0f5a2fdc":"markdown","0d982be2":"markdown","033dbcf9":"markdown","0ef4a3e9":"markdown","56571918":"markdown","4f8fe3a6":"markdown","4ad35b55":"markdown","1eac1031":"markdown","a8a4f135":"markdown","d00a9281":"markdown","ae796b20":"markdown","ee80dc9a":"markdown","25f50cfa":"markdown","fc42709a":"markdown","fc2545e9":"markdown","2d9e4048":"markdown","23e23db6":"markdown","73a17f87":"markdown","767dce0a":"markdown","da4a2280":"markdown","07b3df4e":"markdown","4e45dcdf":"markdown","0b4d6db6":"markdown","15d8bfd7":"markdown","48e531a4":"markdown","597f2b18":"markdown","3eb9436f":"markdown","84131c48":"markdown","0fb43be7":"markdown","7ddfe26f":"markdown","555074ed":"markdown","69267d01":"markdown","902da098":"markdown","c1a66510":"markdown","18cc5c50":"markdown","4d735809":"markdown","9c7ca09b":"markdown","4bfcfe5f":"markdown","530220dd":"markdown","08782a46":"markdown","2a41c7df":"markdown","2474acdc":"markdown","8d1067dc":"markdown","d58467e5":"markdown","00ccc507":"markdown","3d1ad6fb":"markdown","4627ea50":"markdown","6d80a7c6":"markdown","3ac1fa03":"markdown","d6c4d6de":"markdown","5c21566c":"markdown","76c89b10":"markdown","54b713ab":"markdown","1a7017c3":"markdown","2777002f":"markdown","f26523e5":"markdown","b9621964":"markdown","6efe6c24":"markdown","39206960":"markdown","6e5a2447":"markdown","c9c974b0":"markdown","798643c0":"markdown","10a63be2":"markdown","ba8b4595":"markdown","d7803b84":"markdown","08e32f1a":"markdown","552e3284":"markdown","3c67705e":"markdown","7946af06":"markdown","6dc3a01f":"markdown","5fd86db3":"markdown","4eccffc7":"markdown","3b182ba0":"markdown","adbc33db":"markdown","889a35f2":"markdown","2a39ad95":"markdown","d2011c69":"markdown","b17a6a61":"markdown","3f2cecc7":"markdown","18c72754":"markdown"},"source":{"c1eca614":"import pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc","1cba7be5":"#bring in the six packs\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')\ny_reg = df_train['SalePrice']","ac975c4f":"data = pd.concat([df_train['SalePrice'], df_train['OverallQual']], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x='OverallQual', y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","cb603228":"df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]","a148f6ed":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncorrmat = df_train.corr(method='spearman') # correlation \uc804\uccb4 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \uacc4\uc0b0\ncols = corrmat.nlargest(k, 'OverallQual').index # nlargest : Return this many descending sorted values\ncm = np.corrcoef(df_train[cols].values.T) # correlation \ud2b9\uc815 \uceec\ub7fc\uc5d0 \ub300\ud574\uc11c\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(16, 10))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 8}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","74f2a735":"print(\"Variable\",\"       value  \", \"     mean\",\"      \",\"   0.75Q\")\nprint(\"YearBuilt:    \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['YearBuilt'].values,\n      \"\",df_train[df_train['OverallQual'] == 4]['YearBuilt'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 4]['YearBuilt'].quantile(0.75))\nprint(\"GarageCars:   \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['GarageCars'].values,\n      \"   \",df_train[df_train['OverallQual'] == 4]['GarageCars'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 4]['GarageCars'].quantile(0.75))\nprint(\"GrLivArea:    \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['GrLivArea'].values,\n      \"\",df_train[df_train['OverallQual'] == 4]['GrLivArea'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 4]['GrLivArea'].quantile(0.75))\nprint(\"FullBath:     \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['FullBath'].values,\n      \"   \",df_train[df_train['OverallQual'] == 4]['FullBath'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 4]['FullBath'].quantile(0.75))\nprint(\"YearRemodAdd: \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['YearRemodAdd'].values,\n      \"\",df_train[df_train['OverallQual'] == 4]['YearRemodAdd'].mean(),\n     \"            \",df_train[df_train['OverallQual'] == 4]['YearRemodAdd'].quantile(0.75))\nprint(\"GarageArea:   \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['GarageArea'].values,\n      \" \",df_train[df_train['OverallQual'] == 4]['GarageArea'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 4]['GarageArea'].quantile(0.75))\nprint(\"TotalBsmtSF:  \",df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]['TotalBsmtSF'].values,\n      \"\",df_train[df_train['OverallQual'] == 4]['TotalBsmtSF'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 4]['TotalBsmtSF'].quantile(0.75))","3a0ed340":"df_train[df_train['OverallQual'] == 4][df_train['SalePrice'] > 200000]","6d559823":"df_train = df_train[df_train['Id'] != 457]","29794164":"df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]","10a00314":"print(\"Variable\",\"       value  \", \"     mean\",\"      \",\"   0.75Q\")\nprint(\"YearBuilt:    \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['YearBuilt'].values,\n      \"\",df_train[df_train['OverallQual'] == 8]['YearBuilt'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['YearBuilt'].quantile(0.75))\nprint(\"GarageCars:   \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['GarageCars'].values,\n      \"   \",df_train[df_train['OverallQual'] == 8]['GarageCars'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['GarageCars'].quantile(0.75))\nprint(\"GrLivArea:    \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['GrLivArea'].values,\n      \"\",df_train[df_train['OverallQual'] == 8]['GrLivArea'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['GrLivArea'].quantile(0.75))\nprint(\"FullBath:     \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['FullBath'].values,\n      \"   \",df_train[df_train['OverallQual'] == 8]['FullBath'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['FullBath'].quantile(0.75))\nprint(\"YearRemodAdd: \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['YearRemodAdd'].values,\n      \"\",df_train[df_train['OverallQual'] == 8]['YearRemodAdd'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['YearRemodAdd'].quantile(0.75))\nprint(\"GarageArea:   \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['GarageArea'].values,\n      \" \",df_train[df_train['OverallQual'] == 8]['GarageArea'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 8]['GarageArea'].quantile(0.75))\nprint(\"TotalBsmtSF:  \",df_train[df_train['OverallQual'] == 8][df_train['SalePrice'] > 500000]['TotalBsmtSF'].values,\n      \"\",df_train[df_train['OverallQual'] == 8]['TotalBsmtSF'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 8]['TotalBsmtSF'].quantile(0.75))","3fe2bbab":"df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]","cb9becbc":"print(\"Variable\",\"       value  \", \"     mean\",\"      \",\"   0.25Q\")\nprint(\"YearBuilt:    \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['YearBuilt'].values,\n      \"\",df_train[df_train['OverallQual'] == 10]['YearBuilt'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 10]['YearBuilt'].quantile(0.25))\nprint(\"GarageCars:   \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['GarageCars'].values,\n      \"   \",df_train[df_train['OverallQual'] == 10]['GarageCars'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 10]['GarageCars'].quantile(0.25))\nprint(\"GrLivArea:    \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['GrLivArea'].values,\n      \"\",df_train[df_train['OverallQual'] == 10]['GrLivArea'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 10]['GrLivArea'].quantile(0.25))\nprint(\"FullBath:     \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['FullBath'].values,\n      \"   \",df_train[df_train['OverallQual'] == 10]['FullBath'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 10]['FullBath'].quantile(0.25))\nprint(\"YearRemodAdd: \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['YearRemodAdd'].values,\n      \"\",df_train[df_train['OverallQual'] == 10]['YearRemodAdd'].mean(),\n     \"\",df_train[df_train['OverallQual'] == 10]['YearRemodAdd'].quantile(0.25))\nprint(\"GarageArea:   \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['GarageArea'].values,\n      \"\",df_train[df_train['OverallQual'] == 10]['GarageArea'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 10]['GarageArea'].quantile(0.25))\nprint(\"TotalBsmtSF:  \",df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 180000]['TotalBsmtSF'].values,\n      \"\",df_train[df_train['OverallQual'] == 10]['TotalBsmtSF'].mean(),\n     \" \",df_train[df_train['OverallQual'] == 10]['TotalBsmtSF'].quantile(0.25))","3c8fa046":"var = 'SaleCondition'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","0650bb2a":"var = 'SaleCondition'\ndata = pd.concat([df_train[df_train['OverallQual'] == 10]['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","54896b66":"var = 'MSZoning'\ndata = pd.concat([df_train[df_train['OverallQual'] == 10]['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","5f28f9d5":"df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] < 200000]","c184861c":"df_train = df_train[df_train['Id'] != 524][df_train['Id'] != 1299]","650d8cb7":"var = 'Neighborhood'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","40534623":"df_train[df_train['Neighborhood'] == 'Edwards']['SalePrice'].describe()","cee52fe9":"df_train[df_train['OverallQual'] == 10][df_train['SalePrice'] > 700000]","0d4d15e5":"df_train = df_train[df_train['Id'] != 692][df_train['Id'] != 1183]","85546e2c":"df_train[df_train['Neighborhood'] == 'NoRidge']['SalePrice'].describe()","6c67c66a":"#FireplaceQu\nvar = 'BsmtQual'\ndata = pd.concat([df_train[df_train['OverallQual'] == 10]['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nxt = plt.xticks(rotation=45)","101afa09":"from scipy import stats\ndata = pd.concat([df_train['SalePrice'], df_train['GrLivArea']], axis=1)\n#f, ax = plt.subplots(figsize=(8, 6))\ndef r2(x, y):\n    return stats.pearsonr(x, y)[0] ** 2\nsns.jointplot('GrLivArea','SalePrice', kind=\"reg\",stat_func=r2, data=data,height =16)\n#fig.axis(ymin=0, ymax=800000);","8a78e7c1":"data = pd.concat([df_train['SalePrice'], df_train['GarageCars']], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x='GarageCars', y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","82bca412":"df_train[df_train['GarageCars'] == 4]","fb1532e5":"df_test[df_test['GarageCars'] == 4]","acd52dc2":"df_train[df_train['Neighborhood'] == 'Mitchel']['SalePrice'].describe()","87fb16f1":"df_train[df_train['Neighborhood'] == 'OldTown']['SalePrice'].describe()","26ff36fc":"df_train[(df_train['Neighborhood'] == 'OldTown') & (df_train['SalePrice'] > 400000)]","95565c1b":"from scipy import stats\ndata = pd.concat([df_train['SalePrice'], df_train['GarageArea']], axis=1)\n#f, ax = plt.subplots(figsize=(8, 6))\ndef r2(x, y):\n    return stats.pearsonr(x, y)[0] ** 2\nsns.jointplot('GarageArea','SalePrice', kind=\"reg\",stat_func=r2, data=data,height =18)\n#fig.axis(ymin=0, ymax=800000);","dc66a54a":"data = pd.concat([df_train['SalePrice'], df_train['GrLivArea']], axis=1)\n#f, ax = plt.subplots(figsize=(8, 6))\ndef r2(x, y):\n    return stats.pearsonr(x, y)[0] ** 2\nsns.jointplot('GrLivArea','SalePrice', kind=\"reg\",stat_func=r2, data=data,height =18)\n#fig.axis(ymin=0, ymax=800000);","3a0f35f9":"df_train[df_train['GrLivArea'] < 3000][df_train[\"SalePrice\"] > 600000]","c866bdf4":"df_train[df_train['Neighborhood'] == 'NridgHt']['SalePrice'].describe()","8630958b":"df_train = df_train[df_train['Id'] != 899]","3799f9dc":"#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n\n#histogram\n#missing_data = missing_data.head(20)\npercent_data = percent.head(20)\npercent_data.plot(kind=\"bar\", figsize = (18,16), fontsize = 15)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Percent of Missing Value (%)\", fontsize = 20)\n#plt.title(\"Total Missing Value (%)\", fontsize = 20)","c4d2a07f":"import missingno as msno\nlen_train = df_train.shape[0]\ndf_all = pd.concat([df_train,df_test])\nmissingdata_df = df_all.columns[df_all.isnull().any()].tolist()\nmsno.heatmap(df_all[missingdata_df], figsize=(20,20))","ffbf3a3a":"#We impute them by proceeding sequentially through features with missing values\n\n#PoolQC : data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general.\n\ndf_all[\"PoolQC\"] = df_all[\"PoolQC\"].fillna(\"None\")","cc39424e":"df_all[\"PoolQC\"].describe()","2a3701f9":"df_all[(df_all[\"PoolQC\"] == 'None') & (df_all[\"PoolArea\"] > 0)][[\"Id\",\"PoolQC\",\"PoolArea\",\"OverallQual\"]]","099d991d":"df_all.loc[df_all['Id'] == 2421, ['PoolQC']] = 'TA'\ndf_all.loc[df_all['Id'] == 2504, ['PoolQC']] = 'Gd'\ndf_all.loc[df_all['Id'] == 2600, ['PoolQC']] = 'Fa'","23351131":"df_all[(df_all[\"PoolQC\"] == 'None') & (df_all[\"PoolArea\"] > 0)][[\"Id\",\"PoolQC\",\"PoolArea\",\"OverallQual\"]]","e70d30de":"df_all[\"PoolQC\"].describe()","1fd40ecf":"df_all[\"MiscFeature\"] = df_all[\"MiscFeature\"].fillna(\"None\")","8949b098":"df_all[\"Alley\"] = df_all[\"Alley\"].fillna(\"None\")","d5a2c248":"df_all[\"Fence\"] = df_all[\"Fence\"].fillna(\"None\")","392aecc5":"df_all[\"FireplaceQu\"] = df_all[\"FireplaceQu\"].fillna(\"None\")","f040e114":"len(df_all[df_all[\"LotFrontage\"].isnull()])","57eaef11":"df_all[\"LotFrontage\"] = df_all.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","1809b659":"len(df_all[df_all[\"LotFrontage\"].isnull()])","e4a3c9b1":"df_all['GarageYrBlt'] = df_all.fillna(df_all['YearBuilt'])","e9ddc0f4":"df_all[df_all['GarageType'].isnull()][['GarageCond','GarageFinish','GarageQual']].head(10)","a17f0d84":"df_all[((df_all['GarageType'].isnull()) == False) & ((df_all['GarageFinish'].isnull()) == True)][['Id','GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]","630bdb70":"print(\"GarageCond: \", df_all[(df_all['GarageType']=='Detchd') & (df_all['GarageCond'] != \"nan\")]['GarageCond'].mode().values)\nprint(\"GarageQual: \", df_all[(df_all['GarageType']=='Detchd') & (df_all['GarageQual'] != \"nan\")]['GarageQual'].mode().values)\nprint(\"GarageFinish: \", df_all[(df_all['GarageType']=='Detchd') & (df_all['GarageFinish'] != \"nan\")]['GarageFinish'].mode().values)","b4cd005e":"df_all.loc[df_all['Id'] == 2127, ['GarageCond']] = 'TA'\ndf_all.loc[df_all['Id'] == 2127, ['GarageQual']] = 'TA'\ndf_all.loc[df_all['Id'] == 2127, ['GarageFinish']] = 'Unf'","a7766bdc":"df_all[df_all[\"Id\"]==2127][['GarageCond','GarageQual','GarageFinish']]","5c451a3c":"df_all.loc[df_all['Id'] == 2577, ['GarageCars']] = 0\ndf_all.loc[df_all['Id'] == 2577, ['GarageArea']] = 0\ndf_all.loc[df_all['Id'] == 2577, ['GarageType']] = 'None'","461ae898":"df_all[df_all[\"Id\"]==2577][['GarageCars','GarageArea','GarageType']]","936204b0":"df_all['GarageType'] = df_all['GarageType'].fillna('None')","b09dcec9":"df_all['GarageFinish'] = df_all['GarageFinish'].fillna('None')","c43b8554":"df_all['GarageQual'] = df_all['GarageQual'].fillna('None')","75196198":"df_all['GarageCond'] = df_all['GarageCond'].fillna('None')","b77250b6":"df_all[((df_all[\"BsmtFinType1\"].isnull())==False) & ((df_all[\"BsmtCond\"].isnull()) | (df_all[\"BsmtQual\"].isnull()) | (df_all[\"BsmtExposure\"].isnull()) | (df_all[\"BsmtFinType2\"].isnull()))][['Id','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']]","39bc5df6":"print(\"BsmtFinType2 mode\",df_all['BsmtFinType2'].mode().values,\"\\nBsmtExposure mode\",df_all['BsmtExposure'].mode().values,\"\\nBsmtCond mode\",df_all['BsmtCond'].mode().values,\"\\nBsmtQual mode\",df_all['BsmtQual'].mode().values)","1149c9cf":"df_all.loc[df_all['Id'] == 333, ['BsmtFinType2']] = 'Unf'\ndf_all.loc[(df_all['Id'] == 949),['BsmtExposure']] = 'No';df_all.loc[(df_all['Id'] == 1488),['BsmtExposure']] = 'No';df_all.loc[(df_all['Id'] == 2349),['BsmtExposure']] = 'No'\ndf_all.loc[(df_all['Id'] == 2041), ['BsmtCond']] = 'Unf';df_all.loc[(df_all['Id'] == 2186), ['BsmtCond']] = 'Unf';df_all.loc[(df_all['Id'] == 2525), ['BsmtCond']] = 'Unf'\ndf_all.loc[(df_all['Id'] == 2218), ['BsmtQual']] = 'Unf';df_all.loc[(df_all['Id'] == 2219), ['BsmtQual']] = 'Unf'","d09d274c":"df_all['BsmtQual'] = df_all['BsmtQual'].fillna('None')","8af8d88e":"df_all['BsmtCond'] = df_all['BsmtCond'].fillna('None')","b5f184f8":"df_all['BsmtExposure'] = df_all['BsmtExposure'].fillna('None')","98001f5d":"df_all['BsmtFinType1'] = df_all['BsmtFinType1'].fillna('None')","41afb1ea":"df_all['BsmtFinType2'] = df_all['BsmtFinType2'].fillna('None')","2d0019fa":"df_all[(df_all[\"BsmtFullBath\"].isnull()) & ((df_all[\"BsmtHalfBath\"].isnull()) | (df_all[\"BsmtFinSF1\"].isnull()) | (df_all[\"BsmtFinSF2\"].isnull()) | (df_all[\"BsmtUnfSF\"].isnull())| (df_all[\"TotalBsmtSF\"].isnull()) )][['Id','BsmtQual', 'BsmtQual', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]","6b073a46":"df_all['BsmtFullBath'] = df_all['BsmtFullBath'].fillna(0)","88e7156b":"df_all['BsmtHalfBath'] = df_all['BsmtHalfBath'].fillna(0)","921342ee":"df_all['BsmtFinSF1'] = df_all['BsmtFinSF1'].fillna(0)","9c07b248":"df_all['BsmtFinSF2'] = df_all['BsmtFinSF2'].fillna(0)","d8c3c54a":"df_all['BsmtUnfSF'] = df_all['BsmtUnfSF'].fillna(0)","6159d8cc":"df_all['TotalBsmtSF'] = df_all['TotalBsmtSF'].fillna(0)","cdb53124":"df_all[(df_all['MasVnrType'].isnull()) & (df_all['MasVnrArea'].isnull() == False ) ][['Id','MasVnrType','MasVnrArea']]","1040706f":"#FireplaceQu\nvar = 'MasVnrArea'\ndata = pd.concat([df_all['MasVnrType'], df_all[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 10))\nfig = sns.boxplot(x='MasVnrType', y=\"MasVnrArea\", data=data)\nxt = plt.xticks(rotation=45)","c85adbb8":"df_all.loc[df_all['Id'] == 2611, ['MasVnrType']] = 'Stone'","6c239861":"df_all[df_all['Id']==2611]['MasVnrType']","95c66db5":"df_all[df_all['MasVnrType'].isnull() == True]['MasVnrType'].head()","0abeefc5":"df_all['MasVnrType'] = df_all['MasVnrType'].fillna('None')","6955403a":"df_all['MasVnrArea'] = df_all['MasVnrArea'].fillna(0)","1380683a":"len(df_all[df_all['MasVnrArea'].isnull()])","f92dd895":"df_all['MSZoning'].describe()","df8953c6":"df_all['MSZoning'] = df_all['MSZoning'].fillna('RL')","ebf42c41":"df_all['KitchenQual'].describe()","04370e94":"df_all['KitchenQual'] = df_all['KitchenQual'].fillna('TA')","769b10c4":"df_all['Utilities'].describe()","1d343da6":"del df_all['Utilities'];\ngc.collect()","ca2ae239":"df_all['Functional'].describe()","3be27c2b":"df_all['Functional'] = df_all['Functional'].fillna('Typ')","7c087968":"df_all['Exterior1st'].describe()","0e5bca48":"df_all['Exterior1st'] = df_all['Exterior1st'].fillna('VinylSd')","ff499d83":"df_all['Exterior2nd'].describe()","4ae86cfa":"df_all['Exterior2nd'] = df_all['Exterior2nd'].fillna('VinylSd')","079e69f8":"df_all['Electrical'].describe()","e7faa5db":"df_all['Electrical'] = df_all['Electrical'].fillna('SBrkr')","409a47f3":"df_all['SaleType'].describe()","de06762c":"df_all['SaleType'] = df_all['SaleType'].fillna('WD')","00e9d260":"#missing data\ntotal = df_all.isnull().sum().sort_values(ascending=False)\npercent = (df_all.isnull().sum()\/df_all.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n\n#histogram\n#missing_data = missing_data.head(20)\npercent_data = percent.head(20)\npercent_data.plot(kind=\"bar\", figsize = (18,16), fontsize = 15)\nplt.xlabel(\"Columns\", fontsize = 20)\nplt.ylabel(\"Percent of Missing Value (%)\", fontsize = 20)\n#plt.title(\"Total Missing Value (%)\", fontsize = 20)","a28c8f8a":"import scipy.stats as st\n\ny = df_train['SalePrice']\n\n#plt.figure(1); plt.title('Johnson SU')\n#sns.distplot(y, kde=True, fit=st.johnsonsu)\nplt.figure(1); plt.title('Normal')\nsns.distplot(y, kde=True, fit=st.norm)","d74e76fe":"plt.figure(1)\nres = stats.probplot(df_train['SalePrice'], plot=plt)\n\nplt.figure(2)\nres = stats.probplot(np.log1p(df_train['SalePrice']), plot=plt)","6c1c3b0e":"var = 'SaleCondition'\ndf_train['SaleCondition'].unique()","13df7511":"df_train.shape","7ccf8a5a":"from sklearn.preprocessing import OneHotEncoder\none_hot_encoding = df_train.copy()\npd.get_dummies(one_hot_encoding['SaleCondition']).head()","5c7c2b1f":"label_encoding = df_train.copy()\nlabel_encoding['SaleCondition'], indexer = pd.factorize(label_encoding['SaleCondition'])\ndf_test['SaleCondition'] = indexer.get_indexer(df_test['SaleCondition'])","009ec3bd":"def frequency_encoding(frame, col):\n    freq_encoding = frame.groupby([col]).size()\/frame.shape[0] \n    freq_encoding = freq_encoding.reset_index().rename(columns={0:'{}_Frequency'.format(col)})\n    return frame.merge(freq_encoding, on=col, how='left')\n\nlen_train_frequency = df_train.shape[0]\ndf_all_frequency = pd.concat([df_train, df_test])\n\ndf_all_frequency_ex = df_all_frequency.copy()\ncategorical_features = ['SaleCondition']\nfor col in categorical_features:\n    df_all_frequency_ex = frequency_encoding(df_all_frequency, col)","868363e9":"df_all_frequency_ex['SaleCondition_Frequency'].head()","1673c4d0":"from sklearn.model_selection import KFold\n\ndef mean_k_fold_encoding(col, alpha):\n    target_name = 'SalePrice'\n    target_mean_global = df_train[target_name].mean()\n    \n    nrows_cat = df_train.groupby(col)[target_name].count()\n    target_means_cats = df_train.groupby(col)[target_name].mean()\n    target_means_cats_adj = (target_means_cats*nrows_cat + \n                             target_mean_global*alpha)\/(nrows_cat+alpha)\n    # Mapping means to test data\n    encoded_col_test = df_test[col].map(target_means_cats_adj)\n    #\uc784\uc758\ub85c \ucd94\uac00 \ud55c \ubd80\ubd84\n    encoded_col_test.fillna(target_mean_global, inplace=True)\n    encoded_col_test.sort_index(inplace=True)\n\n    kfold = KFold(n_splits=5, shuffle=True, random_state=1989)\n    parts = []\n    for trn_inx, val_idx in kfold.split(df_train):\n        df_for_estimation, df_estimated = df_train.iloc[trn_inx], df_train.iloc[val_idx]\n        nrows_cat = df_for_estimation.groupby(col)[target_name].count()\n        target_means_cats = df_for_estimation.groupby(col)[target_name].mean()\n\n        target_means_cats_adj = (target_means_cats * nrows_cat + \n                                target_mean_global * alpha) \/ (nrows_cat + alpha)\n\n        encoded_col_train_part = df_estimated[col].map(target_means_cats_adj)\n        parts.append(encoded_col_train_part)\n        \n    encoded_col_train = pd.concat(parts, axis=0)\n    encoded_col_train.fillna(target_mean_global, inplace=True)\n    encoded_col_train.sort_index(inplace=True)\n    \n    return encoded_col_train, encoded_col_test","08fba3ba":"df_all['GarageYrBlt'] = df_all['GarageYrBlt'].astype('int8')","ae0b4c8b":"categorical_features = df_all.select_dtypes(include = [\"object\"]).columns\nnumerical_features = df_all.select_dtypes(exclude = [\"object\"]).columns\nnumerical_features = numerical_features.drop(\"SalePrice\")\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))","091ae92a":"df_all.shape","9d073861":"from sklearn.preprocessing import OneHotEncoder\none_hot_encoding = df_all.copy()\none_hot_encoding = pd.get_dummies(one_hot_encoding)\n#len_train","f8ac1726":"one_hot_encoding.head()","6c95c9f0":"one_hot_encoding.shape","97343b84":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nimport gc\nimport time\nfrom pandas.core.common import SettingWithCopyWarning\nimport warnings\nimport lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold\n\n# I don't like SettingWithCopyWarnings ...\nwarnings.simplefilter('error', SettingWithCopyWarning)\ngc.enable()\n%matplotlib inline\nimport os","f26d8490":"one_hot_encoding_train = one_hot_encoding[:len_train]\none_hot_encoding_test = one_hot_encoding[len_train:]\n\ndef get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = one_hot_encoding_train['SalePrice']\ndel one_hot_encoding_train['SalePrice']\n\nif 'SalePrice' in one_hot_encoding_test.columns:\n    del one_hot_encoding_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = one_hot_encoding_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=one_hot_encoding_train, n_splits=5)\n\ntrain_features = [_f for _f in one_hot_encoding_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(one_hot_encoding_train.shape[0])\nsub_reg_preds = np.zeros(one_hot_encoding_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = one_hot_encoding_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = one_hot_encoding_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(one_hot_encoding_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","f80ce2d4":"one_hot_encoding_train['SalePrice'] = y_reg\none_hot_encoding_train.to_csv('one_hot_encoding_train.csv', index=False)\none_hot_encoding_test.to_csv('one_hot_encoding_test.csv', index=False)","465ede9c":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"one_hot_encoding_model.csv\", index=False) # submission","34472563":"categorical_features","93dab6b2":"label_encoding = df_all.copy()\nfor i in categorical_features:\n    label_encoding[i], indexer = pd.factorize(label_encoding[i])","02c92c8c":"label_encoding.head()","17179c63":"label_encoding_train = label_encoding[:len_train]\nlabel_encoding_test = label_encoding[len_train:]\n\ndef get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = label_encoding_train['SalePrice']\ndel label_encoding_train['SalePrice']\n\nif 'SalePrice' in label_encoding_test.columns:\n    del label_encoding_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = label_encoding_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=label_encoding_train, n_splits=5)\n\ntrain_features = [_f for _f in label_encoding_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(label_encoding_train.shape[0])\nsub_reg_preds = np.zeros(label_encoding_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = label_encoding_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = label_encoding_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(label_encoding_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","58cc63eb":"label_encoding_train['SalePrice'] = y_reg\nlabel_encoding_train.to_csv('label_encoding_train.csv', index=False)\nlabel_encoding_test.to_csv('label_encoding_test.csv', index=False)","db7f65a0":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"label_encoding_model.csv\", index=False) # submission","3a69949c":"frequency_encoding_all = df_all.copy()\n    \ndef frequency_encoding(frame, col):\n    freq_encoding = frame.groupby([col]).size()\/frame.shape[0] \n    freq_encoding = freq_encoding.reset_index().rename(columns={0:'{}_Frequency'.format(col)})\n    return frame.merge(freq_encoding, on=col, how='left')\n\nfor col in categorical_features:\n    frequency_encoding_all = frequency_encoding(frequency_encoding_all, col)","ab2850d2":"frequency_encoding_all.head()","4fc74a34":"frequency_encoding_all = frequency_encoding_all.drop(categorical_features,axis=1, inplace=False)\nfrequency_encoding_all.head()","23c6652d":"frequency_encoding_train = frequency_encoding_all[:len_train]\nfrequency_encoding_test = frequency_encoding_all[len_train:]\n\ndef get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = frequency_encoding_train['SalePrice']\ndel frequency_encoding_train['SalePrice']\n\nif 'SalePrice' in frequency_encoding_test.columns:\n    del frequency_encoding_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = frequency_encoding_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=frequency_encoding_train, n_splits=5)\n\ntrain_features = [_f for _f in frequency_encoding_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(frequency_encoding_train.shape[0])\nsub_reg_preds = np.zeros(frequency_encoding_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = frequency_encoding_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = frequency_encoding_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(frequency_encoding_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","6c825baf":"frequency_encoding_train['SalePrice'] = y_reg\n\nfrequency_encoding_train.to_csv('frequency_encoding_train.csv', index=False)\nfrequency_encoding_test.to_csv('frequency_encoding_test.csv', index=False)","eeaefe90":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"frequency_encoding_model.csv\", index=False) # submission","49d30112":"mean_encoding = df_all.copy()\nmean_encoding_train = mean_encoding[:len_train]\nmean_encoding_test = mean_encoding[len_train:]\ndel mean_encoding\n#del df_all; gc.collect()\nfor col in categorical_features:\n    temp_encoded_tr, temp_encoded_te = mean_k_fold_encoding(col, 5)\n    new_feat_name = 'mean_k_fold_{}'.format(col)\n    mean_encoding_train[new_feat_name] = temp_encoded_tr.values\n    mean_encoding_test[new_feat_name] = temp_encoded_te.values\n    \nmean_encoding_train = mean_encoding_train.drop(categorical_features, axis=1, inplace=False)\nmean_encoding_test = mean_encoding_test.drop(categorical_features, axis=1, inplace=False)\nmean_encoding_train.head()","0a948eae":"def get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = mean_encoding_train['SalePrice']\ndel mean_encoding_train['SalePrice']\n\nif 'SalePrice' in mean_encoding_test.columns:\n    del mean_encoding_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = mean_encoding_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=mean_encoding_train, n_splits=5)\n\ntrain_features = [_f for _f in mean_encoding_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(mean_encoding_train.shape[0])\nsub_reg_preds = np.zeros(mean_encoding_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = mean_encoding_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = mean_encoding_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(mean_encoding_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","3b0fe11e":"mean_encoding_train['SalePrice'] = y_reg\n\nmean_encoding_train.to_csv('mean_encoding_train.csv', index=False)\nmean_encoding_test.to_csv('mean_encoding_test.csv', index=False)","cec48a33":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"mean_encoding_model.csv\", index=False) # submission","b3976f0a":"encoding_all = df_all.copy()\n    \ndef frequency_encoding(frame, col):\n    freq_encoding = frame.groupby([col]).size()\/frame.shape[0] \n    freq_encoding = freq_encoding.reset_index().rename(columns={0:'{}_Frequency'.format(col)})\n    return frame.merge(freq_encoding, on=col, how='left')\n\nfor col in categorical_features:\n    encoding_all = frequency_encoding(encoding_all, col)","7d415783":"encoding_all_train = encoding_all[:len_train]\nencoding_all_test = encoding_all[len_train:]\ndel encoding_all\n#del df_all; gc.collect()\nfor col in categorical_features:\n    temp_encoded_tr, temp_encoded_te = mean_k_fold_encoding(col, 5)\n    new_feat_name = 'mean_k_fold_{}'.format(col)\n    encoding_all_train[new_feat_name] = temp_encoded_tr.values\n    encoding_all_test[new_feat_name] = temp_encoded_te.values\n    \nencoding_all = pd.concat([encoding_all_train,encoding_all_test])","00e2b3ce":"encoding_all = pd.get_dummies(encoding_all)\nfor col in categorical_features:\n    encoding_all[col] = list(label_encoding[col].values)\nencoding_all_train = encoding_all[:len_train]\nencoding_all_test = encoding_all[len_train:]","580bf131":"def get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = encoding_all_train['SalePrice']\ndel encoding_all_train['SalePrice']\n\nif 'SalePrice' in encoding_all_test.columns:\n    del encoding_all_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = encoding_all_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=encoding_all_train, n_splits=5)\n\ntrain_features = [_f for _f in encoding_all_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(encoding_all_train.shape[0])\nsub_reg_preds = np.zeros(encoding_all_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = encoding_all_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = encoding_all_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(encoding_all_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","faf53e61":"encoding_all_train['SalePrice'] = y_reg\n\nencoding_all_train.to_csv('encoding_all_train.csv', index=False)\nencoding_all_test.to_csv('encoding_all_test.csv', index=False)","ef1a5749":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"encoding_all_model.csv\", index=False) # submission","c2e4086d":"label_columns = ['BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n                 'BsmtQual','CentralAir','Electrical','ExterCond','ExterQual','Fence',\n                 'FireplaceQu','GarageCond','GarageFinish','GarageQual','GarageYrBlt',\n                 'HeatingQC','KitchenQual','LotShape','PoolQC']\nfor i in label_columns:\n    df_all[i], indexer = pd.factorize(df_all[i])","6bd7132c":"df_all['KitchenQual'].head()","1bd95129":"mean_columns = [_f for _f in df_all.columns \n                    if (_f not in label_columns) & (df_all[_f].dtype == 'object')]\nprint(str(mean_columns))","2acf6fe9":"df_train = df_all[:len_train]\ndf_test = df_all[len_train:]\ndel df_all; gc.collect()","f86f1e73":"for col in mean_columns:\n    temp_encoded_tr, temp_encoded_te = mean_k_fold_encoding(col, 5)\n    new_feat_name = 'mean_k_fold_{}'.format(col)\n    df_train[new_feat_name] = temp_encoded_tr.values\n    df_test[new_feat_name] = temp_encoded_te.values","5ceaafde":"df_train = df_train.drop(mean_columns, axis=1, inplace=False)\ndf_test = df_test.drop(mean_columns, axis=1, inplace=False)","4703d66b":"def get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = df_train['SalePrice']\ndel df_train['SalePrice']\n\nif 'SalePrice' in df_test.columns:\n    del df_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = df_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=df_train, n_splits=5)\n\ntrain_features = [_f for _f in df_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(df_train.shape[0])\nsub_reg_preds = np.zeros(df_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = df_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = df_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(df_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","662e92d0":"df_train['SalePrice'] = y_reg\n\ndf_train.to_csv('df_train.csv', index=False)\ndf_test.to_csv('df_test.csv', index=False)","3e1c9c2c":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"label_mean_model.csv\", index=False) # submission","f837e528":"fre_label_all = frequency_encoding_all.copy()\nfor col in categorical_features:\n    fre_label_all[col] = list(label_encoding[col].values)\nfre_label_all_train = fre_label_all[:len_train]\nfre_label_all_test = fre_label_all[len_train:]","a4d0547d":"def get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['Id'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['Id'].isin(unique_vis[trn_vis])],\n                ids[df['Id'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids\n\ny_reg = fre_label_all_train['SalePrice']\ndel fre_label_all_train['SalePrice']\n\nif 'SalePrice' in fre_label_all_test.columns:\n    del fre_label_all_test['SalePrice']\n    \nexcluded_features = ['Id','SalePrice'] \ntest_idx = fre_label_all_test.Id\n\nsub_reg_preds = 0\nfolds = get_folds(df=fre_label_all_train, n_splits=5)\n\ntrain_features = [_f for _f in fre_label_all_train.columns if _f not in excluded_features]\nprint(train_features)\n\nimportances = pd.DataFrame()\noof_reg_preds = np.zeros(fre_label_all_train.shape[0])\nsub_reg_preds = np.zeros(fre_label_all_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds):\n    trn_x, trn_y = fre_label_all_train[train_features].iloc[trn_], y_reg.iloc[trn_]\n    val_x, val_y = fre_label_all_train[train_features].iloc[val_], y_reg.iloc[val_]\n    \n    reg = lgb.LGBMRegressor(\n        num_leaves=31,\n        learning_rate=0.005,\n        n_estimators=1000,\n        subsample=.9,\n        colsample_bytree=.9,\n        random_state=1\n    )\n    reg.fit(\n        trn_x, np.log1p(trn_y),\n        eval_set=[(val_x, np.log1p(val_y))],\n        early_stopping_rounds=50,\n        verbose=100,\n        eval_metric='rmse'\n    )\n    imp_df = pd.DataFrame()\n    imp_df['feature'] = train_features\n    imp_df['gain'] = reg.booster_.feature_importance(importance_type='gain')\n    \n    imp_df['fold'] = fold_ + 1\n    importances = pd.concat([importances, imp_df], axis=0, sort=False)\n    \n    oof_reg_preds[val_] = reg.predict(val_x, num_iteration=reg.best_iteration_)\n    oof_reg_preds[oof_reg_preds < 0] = 0\n    _preds = reg.predict(fre_label_all_test[train_features], num_iteration=reg.best_iteration_)\n    _preds[_preds < 0] = 0\n    sub_reg_preds += np.expm1(_preds) \/ len(folds)\n    \nmean_squared_error(np.log1p(y_reg), oof_reg_preds) ** .5","cafc07d1":"fre_label_all_train['SalePrice'] = y_reg\n\nfre_label_all_train.to_csv('fre_label_all_train.csv', index=False)\nfre_label_all_test.to_csv('fre_label_all_test.csv', index=False)","7b565ff8":"test_pred = pd.DataFrame({\"Id\":test_idx})\ntest_pred[\"SalePrice\"] = sub_reg_preds\ntest_pred.columns = [\"Id\", \"SalePrice\"]\ntest_pred.to_csv(\"fre_label_all_model.csv\", index=False) # submission","4cb43eed":"## \uacb0\uce21\uce58 \ucc44\uc6b0\uae30.\n`single imputation` vs `multiple imputation`  \nhttps:\/\/surveymethods.com\/blog\/when-to-use-single-imputation-or-multiple-imputation\/\n\n\ub2e8\uc77c \ub300\uccb4\ub294 \uacc4\uc0b0\uc774 \ub35c \ud544\uc694\ud558\uba70 \ub204\ub77d \ub41c \ub370\uc774\ud130 \ub300\uc2e0 \ud2b9\uc815 \uc218\uc758 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud55c \uac00\uc9c0 \uc720\ud615\uc758 \ub2e8\uc77c \ub300\uccb4\uac00 \uc788\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c\uc774 \ud504\ub85c\uc138\uc2a4\uc5d0\ub294 \ub2e4\ub978 \uc751\ub2f5\uc744 \ubd84\uc11d\ud558\uace0 \uac1c\uc778\uc774 \uc751\ub2f5\ud588\uc744 \uac00\ub2a5\uc131\uc774 \uac00\uc7a5 \ub192\uc740 \uc751\ub2f5 (\ub610\ub294 \uac00\uc7a5 \uac00\ub2a5\uc131\uc774 \ub192\uc740 \ub2f5\ubcc0)\uc744 \ucc3e\uace0 \ud574\ub2f9 \uac00\ub2a5\ud55c \uc751\ub2f5 \uc911 \ud558\ub098\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4 \ubb34\uc791\uc704\ub85c \uc120\ud0dd\ud558\uc5ec \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ubc30\uce58\ud569\ub2c8\ub2e4.\n\n\uc57d\uac04\uc758 \ub370\uc774\ud130 \ub9cc \ub204\ub77d\ub418\uba74 \ub2e8\uc77c \ub300\uccb4 (single imputation)\uac00 \uc720\uc6a9\ud55c \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\uac83\uc740 \ub370\uc774\ud130 \uc694\uc18c\ub97c \uc798 \ucc44\uc6b0\uace0 \ubd84\uc11d \uacb0\uacfc \uac04\uc758 \ucc28\uc774\ub294 \ud070 \ucc28\uc774\ub85c \uc778\ud574 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc0c1\ub2f9 \ubd80\ubd84 \ub204\ub77d \ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0 \ub2e8\uc77c \ub300\uccb4 \ubaa8\ub378\uc740 \uc2ec\uac01\ud55c \ubb38\uc81c\ub97c \uc57c\uae30\ud569\ub2c8\ub2e4. \uc989, \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \uc22b\uc790\uac00 \ucd94\uac00\ub418\uba74 \ud574\ub2f9 \uc218\uce58\ub97c \uadc0\uc18d\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc640 \ub3d9\uc77c\ud558\uac8c \ucde8\uae09\ud558\uc5ec \uc624\ud574\uc758 \uc18c\uc9c0\uac00\uc788\ub294 \ubd84\uc11d\uc744 \ud5c8\uc6a9\ud569\ub2c8\ub2e4 .\n\n\ub2e4\uc911 \ub300\uccb4\ub294 \uc5b4\ub5bb\uac8c \uc218\uc815\ud569\ub2c8\uae4c?\n\ub2e4\uc911 \ub300\uccb4\ub294 \uadf8 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub824\uace0 \ub178\ub825\ud569\ub2c8\ub2e4. \ub2e4\uc911 \ub300\uccb4\ub294 \uc77c\ub828\uc758 \uac00\ub2a5\ud55c \uc751\ub2f5\uc5d0\uc11c \ucde8\ud558\ub294 \uc2dc\ubbac\ub808\uc774\uc158 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc2dc\ubbac\ub808\uc774\uc158\uc774 \uc120\ud0dd\ud55c \uc22b\uc790\uc5d0 \ub530\ub77c \uadc0\uc18d \ub41c \ub370\uc774\ud130 \uc138\ud2b8 \uac04\uc758 \ucc28\uc774\uc810\uc744 \ub354 \uc798 \uc774\ud574\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud560 \uc218\uc788\ub294 \ubd84\uc0b0 \/ \uc2e0\ub8b0 \uad6c\uac04\uc744 \ub3c4\ucd9c\ud558\uae30 \uc704\ud574 \uc5f0\uc18d\uc801\uc73c\ub85c \ubcf4\ub0c5\ub2c8\ub2e4 \ub204\ub77d \ub41c \ub370\uc774\ud130\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\ub204\ub77d \ub41c \uc751\ub2f5\uc5d0 \ubc30\uce58 \ub420 \uac00\ub2a5\uc131\uc774 \uac00\uc7a5 \ub192\uc740 \ub370\uc774\ud130\ub97c \ucc3e\ub294 \ub370\ub294 \uc5ec\ub7ec \uac00\uc9c0 \uc720\ud615\uc758 \uacc4\uc0b0\uc774 \uc0ac\uc6a9\ub418\ubbc0\ub85c \uc5f0\uad6c \uacb0\uacfc\uac00 \ub354 \uade0\uc77c \ud55c \uc5f0\uad6c (\ub204\ub77d \ub41c \ub370\uc774\ud130\ub97c \uac00\uc9c4 \uc0ac\ub78c\uacfc \ube44\uc2b7\ud55c \uc751\ub2f5\uc744 \uac00\uc9c4 \uc0ac\ub78c\ub4e4\uc774 \uadc0\uacb0 \ub41c \ub370\uc774\ud130 \uc138\ud2b8\ub294 \ud6e8\uc52c \uc801\uc740 \ud3b8\ucc28\ub97c \uac00\uc838\uc57c\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc720\uc0ac\ud55c \uc18d\uc131\uc744 \uac00\uc9c4 \uc0ac\ub78c\ub4e4\uc758 \uacb0\uacfc\uac00 \ub2e4\uc591\ud55c \ubc18\uc751\uc744 \ubcf4\uc77c \uacbd\uc6b0, \uadc0\uc18d \ub41c \uc138\ud2b8\ub3c4 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub2e8\uc77c \ub610\ub294 \ubcf5\uc218 \ub300\uccb4 \uc120\ud0dd\n\ubcf5\uc218 \uc804\uac00\uc758 \uac00\uc7a5 \ud070 \ub2e8\uc810\uc740 \uc774\ub7ec\ud55c \uc804\uac00\ub97c \uc218\ud589\ud558\ub294 \ubcf5\uc7a1\ud55c \ubcf8\uc9c8\uc774\ub2e4. \ubd84\uc11d\uc744 \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5ec\uae30\uc5d0 \ud45c\uc2dc\ub41c \uacb0\uacfc\ub97c \uacb0\ud569\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc798 \uc54c\uace0 \uc788\uc5b4\uc57c\ud569\ub2c8\ub2e4. \ube44\uc2b7\ud558\uac8c, \ub204\ub77d \ub41c \ub370\uc774\ud130\uac00 \uac70\uc758\uc5c6\ub294 \uacbd\uc6b0, \ub2e8\uc77c \ub300\uccb4\ub294 \ub354 \uac04\ub2e8 \ud560 \uc218 \uc788\uc73c\uba70 \uc2ec\uac01\ud55c \uc624\ub958\uac00 \uc5c6\uc73c\uba74 \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \ubcf5\uc218\uc758 \ub300\uccb4\ub294 \uac00\ub2a5\ud55c \uc751\ub2f5\uc758 \ubc94\uc704\ub97c \ucc3e\uae30 \uc704\ud574 \uadc0\uc18d \ub41c \ub370\uc774\ud130\uc758 \ub2e4\uc591\uc131\uc744 \ub3c4\uc785\ud558\ub824\uace0\ud569\ub2c8\ub2e4.\n\n![](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC5717805\/bin\/12874_2017_442_Fig2_HTML.jpg)","2a7b8154":"#### GarageCond: Garage condition\n\nAnother variable than can be made ordinal with the Qualities vector.","c6f4e6c9":"### Alley ","76861afa":"![](https:\/\/postfiles.pstatic.net\/MjAxODEwMTBfMTc5\/MDAxNTM5MTM1ODMwNjM4.TewjhkBwZ6MeTXyPpvB7nzaQk2N4VibkuvRFGuJYtxog.sG0Vrgqmep7oZvXYCAZvG2Lg5dU6N3CBsmpv8SqysD0g.PNG.choco_9966\/image.png?type=w966)\n\n\uc7a5\uc810 : \uac12 \ubd84\ud3ec\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \uc798 \ubcf4\uc874. \uac12\uc758 \ube48\ub3c4\uac00 \ud0c0\uac9f\uacfc \uc5f0\uad00\uc774 \uc788\uc73c\uba74 \uc544\uc8fc \uc720\uc6a9.\n\n\ub2e8\uc810 : \ud558\uc9c0\ub9cc Encoding\ud55c Category\ub07c\ub9ac \uac19\uc740 Frequency\ub97c \uac00\uc9c4\ub2e4\uba74 Feature\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub428.\n","6c8265c8":"#### Masonry veneer type, and masonry veneer area\n\nMasonry veneer type has 24 NAs. Masonry veneer area has 23 NAs. If a house has a veneer area, it should also have a masonry veneer type. Let\u2019s fix this one first.","4622a6b8":"\uc774\uc0c1\uce58 \ucc98\ub9ac\ub294 \ub354 \ub9ce\uc9c0\ub9cc \uc774 \uc815\ub3c4\ub85c \ud558\uace0 \uacb0\uce21\uce58 \ucc98\ub9ac\ub97c \ub2e4\ub8e8\uc5b4 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4...","bb454187":"## One-hot encoding \ub9cc \uc0ac\uc6a9","5611d0c4":"## Exploratoy data analysis with Pyhton\n[Hyun woo kim] - 2018-10-06 ~ 15\n![](https:\/\/kaggle2.blob.core.windows.net\/competitions\/kaggle\/5407\/media\/housesbanner.png)","ced1c9c6":"### Fence ","51a77a06":"#### BsmtExposure: Refers to walkout or garden level walls\n\nA variable than can be made ordinal.\n```\n   Gd   Good Exposure\n   Av   Average Exposure (split levels or foyers typically score average or above)  \n   Mn   Mimimum Exposure\n   No   No Exposure\n   NA   No Basement\n   ```","74fc5dfb":"#### BsmtHalfBath: Basement half bathrooms\n\nAn integer variable.","c14ea427":"\uacb0\ub860\uc801\uc73c\ub85c \uc9c0\ud558\uc2e4\uc774\uc5c6\ub294 79 \ucc44\uc758 \uc9d1\uc774\uc788\ub294 \uac83\ucc98\ub7fc \ubcf4\uc785\ub2c8\ub2e4. \ub204\ub77d \ub41c \uac00\uce58\uac00\uc788\ub294 \ub2e4\ub978 \uc8fc\ud0dd\uc758 \uc9c0\ud558 \ubcc0\uc218\uac00 \ubaa8\ub450 80 % (5 \uac00\uc9c0 \uac12 \uc911 1 \uac00\uc9c0\uac00 \ub204\ub77d \ub428)\uc774\uae30 \ub54c\ubb38\uc5d0 \uc9c0\ud558\uc2e4\uc774\uc5c6\ub294 \uc9d1\uc774\uc788\ub294 \uac83\ucc98\ub7fc \ubcf4\uc785\ub2c8\ub2e4. \uc800\ub294 \uadf8 9 \ucc44\uc758 \uc9d1\uc744 \uace0\uce58\ub294 mode\uac12\uc744 \uc804\uac00\ud558\ub824\uace0\ud569\ub2c8\ub2e4.","a8e7cb1b":"#### BsmtUnfSF: Unfinished square feet of basement area\n\nAn integer variable.","7fa6e91f":"\n\n#### Exterior1st: Exterior covering on house\n\n1 NA. Values are categorical.\n```\n   AsbShng  Asbestos Shingles\n   AsphShn  Asphalt Shingles\n   BrkComm  Brick Common\n   BrkFace  Brick Face\n   CBlock   Cinder Block\n   CemntBd  Cement Board\n   HdBoard  Hard Board\n   ImStucc  Imitation Stucco\n   MetalSd  Metal Siding\n   Other    Other\n   Plywood  Plywood\n   PreCast  PreCast \n   Stone    Stone\n   Stucco   Stucco\n   VinylSd  Vinyl Siding\n   Wd Sdng  Wood Siding\n   WdShing  Wood Shingles\n   ```","5282cbdf":"![](https:\/\/postfiles.pstatic.net\/MjAxODEwMTBfMyAg\/MDAxNTM5MTM1ODY0ODI0.VeUbglWPIoiRyp_HkyAoB9Wgu3cTaNtn6X7z5x0BSAsg.vOf1ijCTePLlfUdqNrC6G_7u_GugNxvmoUI7F4_MLrIg.PNG.choco_9966\/image.png?type=w966)\n\n\uc7a5\uc810 : Target\uc744 \uac00\uc9c0\uace0 encoding\uc744 \ud574\uc11c Target\uc744 \uc798 \uc124\uba85\ud568.\n\n\ub2e8\uc810 : Overfitting\uc758 \uc704\ud5d8\uc774 \uc81c\uc77c \ud07c.","053880b3":"\ub204\ub77d \ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud558\uae30 \uc704\ud574\uc774\ub97c \ubd84\uc11d\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\ub370\uc774\ud130\uc758 15 % \uc774\uc0c1\uc774 \ub204\ub77d \ub41c \uacbd\uc6b0 \ud574\ub2f9 \ubcc0\uc218\ub97c \uc0ad\uc81c\ud558\uace0 \uc808\ub300 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud574\uc57c\ud569\ub2c8\ub2e4. \uc989, \uc774\ub7ec\ud55c \uacbd\uc6b0 \ub204\ub77d \ub41c \ub370\uc774\ud130\ub97c \ucc44\uc6b0\uae30 \uc704\ud574 \uc5b4\ub5a4 \ud2b8\ub9ad\ub3c4 \uc2dc\ub3c4\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5d0 \ub530\ub974\uba74 \uc0ad\uc81c\ud574\uc57c \ud560 \ubcc0\uc218 \uc9d1\ud569 (\uc608 : 'PoolQC', 'MiscFeature', 'Alley'\ub4f1)\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uc810\uc740 : \uc6b0\ub9ac\uac00 \uc774 \ub370\uc774\ud130\ub97c \ub193\uce60\uae4c\uc694? \ub098\ub294 \uadf8\ub807\uac8c \uc0dd\uac01\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub7ec\ud55c \ubcc0\uc218 \uc911 \uc0c1\ub2f9\uc218\ub294 \uc9d1\uc744 \uc0b4 \ub54c \uc6b0\ub9ac\uac00 \uc0dd\uac01\ud558\ub294 \uce21\uba74\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 (\ub370\uc774\ud130\uac00 \ub204\ub77d \ub41c \uc774\uc720\uac00 \ubb34\uc5c7\uc77c\uae4c\uc694?) \uc774\ub7ec\ud55c \ubcc0\uc218\ub294 \ub9e4\uc6b0 \uc911\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ubcc0\uc218\ub97c \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uba74 'PoolQC', 'MiscFeature'\ubc0f 'FireplaceQu'\uc640 \uac19\uc740 \ubcc0\uc218\uac00 \uc774\uc0c1\uce58\uc5d0 \ub300\ud55c \uac15\ub825\ud55c \ud6c4\ubcf4\uac00 \ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \uc0ad\uc81c \ud574 \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.\n\n\ub098\uba38\uc9c0 \uc0ac\ub840\uc640 \uad00\ub828\ud558\uc5ec 'GarageX'\ubcc0\uc218\uc758 \ub204\ub77d \ub370\uc774\ud130 \uc218\uac00 \uac19\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub204\ub77d \ub41c \ub370\uc774\ud130\ub294 \ub3d9\uc77c\ud55c \uad00\uce21 \uc138\ud2b8\ub97c \ub098\ud0c0\ub0bc \uac83\uc785\ub2c8\ub2e4 (\uccb4\ud06c\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ub2e8\uc9c0 5 %\uc774\uace0 20 \uac1c\uc758 5 \uac1c\uc758 \ubb38\uc81c\ub97c \uc9c0\ucd9c\ud558\uc9c0 \uc54a\uc544\uc57c \ud568). \ucc28\uace0\uc5d0 \uad00\ud55c \uac00\uc7a5 \uc911\uc694\ud55c \uc815\ubcf4\ub294 'GarageCars'\ub85c \ud45c\uc2dc\ub418\ubbc0\ub85c \ub204\ub77d \ub41c \ub370\uc774\ud130\uc758 \uc57d 5 %\ub97c \ub9d0\ud558\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud558\uc5ec \uc55e\uc11c \uc5b8\uae09 \ud55c 'GarageX'\ubcc0\uc218\ub97c \uc0ad\uc81c\ud569\ub2c8\ub2e4. \uac19\uc740 \ub17c\ub9ac\uac00 'BsmtX'\ubcc0\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4.\n\n'MasVnrArea'\ubc0f 'MasVnrType'\uacfc \uad00\ub828\ud558\uc5ec \uc774\ub7ec\ud55c \ubcc0\uc218\uac00 \ud544\uc218\uc801\uc778 \uac83\uc740 \uc544\ub2c8\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c 'YearBuilt'\ubc0f 'OverallQual'\uacfc \uc774\ubbf8 \uac15\ud55c \uc5f0\uad00\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c 'MasVnrArea'\ubc0f 'MasVnrType'\uc744 \uc0ad\uc81c\ud558\uba74 \uc815\ubcf4\uac00 \uc190\uc2e4\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c, \uc6b0\ub9ac\ub294 '\uc804\uae30'\uc5d0\uc11c \ud55c \uac00\uc9c0 \ube60\uc9c4 \uad00\ucc30\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc9c0 \ud558\ub098\uc758 \uad00\ucc30\uc774\ubbc0\ub85c, \uc6b0\ub9ac\ub294\uc774 \uad00\ucc30\uc744 \uc0ad\uc81c\ud558\uace0 \ubcc0\uc218\ub97c \uc720\uc9c0\ud560 \uac83\uc785\ub2c8\ub2e4.\n\n\uc694\uc57d\ud558\uba74 \ub204\ub77d \ub41c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574 'Electrical'\ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0 \ub204\ub77d \ub41c \ub370\uc774\ud130\uac00\uc788\ub294 \ubaa8\ub4e0 \ubcc0\uc218\uac00 \uc0ad\uc81c\ub429\ub2c8\ub2e4. 'Electrical'\uc5d0\uc11c\ub294 \ub204\ub77d \ub41c \ub370\uc774\ud130\uac00\uc788\ub294 \uad00\uce21\uce58 \ub9cc \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n\nhttps:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python","0f134423":"## \uacb0\uce21\uce58 \ucc44\uc6b0\ub294 \ubc29\ubc95","5536a152":"### Garage \n\uc704\uc758 \uacb0\uce21\uce58\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uba74 'GarageType' , 'GarageCond' , 'GarageFinish' , 'GarageQual' 4\uac1c \ubcc0\uc218\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4\uac00 \ub9e4\uc6b0 \ud07c.\n\uadf8\ub798\uc11c \uba3c\uc800 \uc774\ub97c \uc911\uc2ec\uc73c\ub85c \uacb0\uce21\uce58\ub97c \uc0b4\ud3b4 \ubd04.","284643a5":"\ud558\uc9c0\ub9cc Id 2577\uc740 \uc0c1\ud669\uc774 \ub2e4\ub978\uac8c GarageType\uc740 \uc874\uc7ac\ud558\uc9c0\ub9cc, Cars\uc640 Area\ub294 0\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\ub294 \uc704\uc758 \uc815\ubcf4\ub9cc\uc73c\ub85c\ub294 \uc0c1\ud669\uc744 \ud30c\uc545\ud558\uae30\uac00 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. Garage\uac00 \uc874\uc7ac\ud588\ub294\ub370 \ud45c\uae30\uac00 \ub418\uc9c0 \uc54a\uc740\uac83 \uc77c \uc218\ub3c4 \uc788\uace0 \ubc18\ub300\ub85c \uc5c6\ub294\ub370 Type\ub9cc \ud45c\uae30\ub418\uc5c8\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc77c Train\uc5d0 \uc774 \uc815\ubcf4\uac00 \uc788\uc5c8\ub2e4\uba74 \uc800\ub294 \uc9c0\uc6e0\uaca0\uc9c0\ub9cc, test\uc5d0 \uc788\uae30\uc5d0 NA\ub97c \uc804\ubd80 \uc9d1\uc5b4 \ub123\uc5b4\uc90c\uc73c\ub85c\uc368 \ud3b8\ud5a5\uc744 \uc904\uc774\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","4431de81":"```\n   Ex   Excellent\n   Gd   Good\n   TA   Typical\/Average\n   Fa   Fair\n   Po   Poor\n   NA   No Garage\n   ```","0f5a2fdc":"\uc704\uc5d0\ub294 \uc774\uc0c1\uce58\ub97c \uc81c\uac70 \ud588\uc9c0\ub9cc, \uc774\uc0c1\uce58\ub97c \uc5c6\uc560\ub294 \ubc29\ubc95\uc740 1. \uc81c\uac70 2. \ub300\ud46f\uac12 \ub300\uc785\uc758 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc74c. ","0d982be2":"## \uc778\ucf54\ub529\n  - One-hot-encoding\n  - Label encoding\n  - Mean encoding\n  - Frequency encoding\n  \n  \ucd9c\ucc98 : https:\/\/www.slideshare.net\/yeonminkim\/pycon-korea-2018-kaggle-tutorialkaggle-break","033dbcf9":"It should be obvious that those remaining NAs all refer to \u2018not present\u2019. Below, I am fixing those remaining variables.\n\n#### BsmtFullBath: Basement full bathrooms\n\nAn integer variable.","0ef4a3e9":"## \uc804\ucc98\ub9ac\n- ### \uc815\uaddc\ud654\nhttps:\/\/www.kaggle.com\/pavansanagapati\/a-simple-tutorial-on-exploratory-data-analysis\n- ### \uc778\ucf54\ub529\n  - One-hot-encoding\n  - Label encoding\n  - Mean encoding\n  - Frequency encoding","56571918":"| \uacb0\uce21\uce58 \ud37c\uc13c\ud2b8 |              \uacb0\uce21\uce58 \ucc44\uc6b0\ub294 \ubc29\ubc95             |\n|:-------------:|:-------------------------------------------:|\n|    10% \ubbf8\ub9cc   | \uc81c\uac70 \ub610\ub294 \uc5b4\ub5a0\ud55c \ubc29\ubc95\uc774\ub4e0\uc9c0 \uc0c1\uad00\uc5c6\uc774 \ucc44\uc6b0\uae30 |\n|   10% ~ 20%   |   hot deck, regression, model based method  |\n|    20% \uc774\uc0c1   |        model based method, regression       |\n\n- hot deck : \ubcc0\uc218\ub4e4\uc774 \ube44\uc2b7\ud55c \uac12\uc744 \uac16\ub294 \uc720\uc0ac\ud55c \uc9d1\ub2e8\uc5d0\uc11c \uc784\uc758\uc758 \ud55c \uac1c\uccb4\ub97c \uc120\ud0dd\ud574\uc11c \uacb0\uce21\uac12\uc744 \ub300\uccb4","4f8fe3a6":"\uacb0\uce21\uce58 \ucd94\uac00 \ucc38\uace0 :   \nhttps:\/\/www.kaggle.com\/juliencs\/a-study-on-regression-applied-to-the-ames-dataset   \nhttps:\/\/www.kaggle.com\/pratikmirani\/house-prices-lasso-xgboost-and-a-detailed-eda","4ad35b55":"#### BsmtFinType2: Rating of basement finished area (if multiple types)\n\nA variable than can be made ordinal with the FinType vector.\n```\n   GLQ  Good Living Quarters\n   ALQ  Average Living Quarters\n   BLQ  Below Average Living Quarters   \n   Rec  Average Rec Room\n   LwQ  Low Quality\n   Unf  Unfinshed\n   NA   No Basement\n   ```","1eac1031":"\uc704 4\uac00\uc9c0 \ubc29\ubc95\uc744 \uc0c1\ud669\uc5d0 \ub9de\uac8c \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \uc81c\uc77c \uc88b\uc74c.","a8a4f135":"## \ub1cc\ud53c\uc15c \uc2e4\ud5d8 (Label + Mean)","d00a9281":"### \uc815\uaddc\ud654\n\n\ucd9c\ucc98 : https:\/\/www.kaggle.com\/pavansanagapati\/a-simple-tutorial-on-exploratory-data-analysis","ae796b20":"## \uc774\uc0c1\uce58 5 : GrLivArea","ee80dc9a":"### Utilities\n#### Utilities: Type of utilities available\n\n2 NAs. Ordinal as additional utilities is better.\n```\n   AllPub   All public Utilities (E,G,W,& S)    \n   NoSewr   Electricity, Gas, and Water (Septic Tank)\n   NoSeWa   Electricity and Gas Only\n   ELO  Electricity only\n```\nHowever, the table below shows that only one house does not have all public utilities. This house is in the train set. Therefore, imputing \u2018AllPub\u2019 for the NAs means that all houses in the test set will have \u2018AllPub\u2019. This makes the variable useless for prediction. Consequently, I will get rid of it.","25f50cfa":"### Exterior Variables\n#### There are 4 exterior variables\n\n2 variables have 1 NA, 2 variables have no NAs.","fc42709a":"#### GarageType: Garage location","fc2545e9":"![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*Nph7tFVhdnFjJWHMKof-0A.png)\n\n\ucd9c\ucc98 : https:\/\/medium.com\/ibm-data-science-experience\/missing-data-conundrum-exploration-and-imputation-techniques-9f40abe0fd87","2d9e4048":"## Label Encoding \ub9cc \uc0ac\uc6a9","23e23db6":"### \uacb0\uce21\uce58 \uc720\ud615\uc744 \ud30c\uc545\ud55c\ub2e4.  \n| \uacb0\uce21\uce58 \uc720\ud615  |              \uc124\uba85             |  \n|:-------------:|:-------------------------------------------:|  \n|    \uc644\uc804 \ubb34\uc791\uc704 \uacb0\uce21(MACR)   |  \uc5b4\ub5a4 \ubcc0\uc218\uc5d0 \uc788\ub294 \uacb0\uce21\uce58\uac00 \uad00\uce21\ub41c \ud639\uc740 \uad00\uce21\ub418\uc9c0 \uc54a\uc740 \ub2e4\ub978 \ubcc0\uc218\uc640 \uc544\ubb34 \uc5f0\uad00\uc774 \uc5c6\uc74c. |  \n|   \ubb34\uc791\uc704 \uacb0\uce21(MAR)   |  \uc5b4\ub5a4 \ubcc0\uc218 \uc0c1\uc5d0 \uacb0\uce21\ub370\uc774\ud130\uac00 \uad00\uce21\ub41c \ub2e4\ub978 \ubcc0\uc218\uc640 \uc5f0\uad00\ub418\uc5b4 \uc788\uc9c0\ub9cc \uadf8 \uc790\uccb4\uc758 \ube44\uad00\uce21\ub41c \uac12\ub4e4\uacfc\ub294 \uc5f0\uad00\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c.  |  \n|    \ube44 \ubb34\uc791\uc704 \uacb0\uce21(NMAR)   | \uc5b4\ub5a4 \ubcc0\uc218\uc758 \uacb0\uce21\ub370\uc774\ud130\uac00 \uc644\uc804 \ubb34\uc791\uc704 \uacb0\uce21, \ubb34\uc791\uc704 \uacb0\uce21\uc774 \uc544\ub2cc \uacbd\uc6b0 \ube44 \ubb34\uc791\uc704 \uacb0\uce21. \uc608\ub97c\ub4e4\uc5b4, \uc18c\ub4dd\uc774 \uc801\uc740 \uc0ac\ub78c\uc774 \uc18c\ub4dd\uc5d0 \ub300\ud55c \uacb0\uce21\uac12\uc744 \uac00\uc9c0\uae30 \uc27d\ub2e4\uba74(\uc18c\ub4dd\uc774 \uc801\uc740 \uc0ac\ub78c\ub4e4\uc740 \uc124\ubb38\uc5d0 \uc790\uae30 \uc18c\ub4dd\uc744 \ubc1d\ud788\uae30 \uc2eb\uc5b4\ud55c\ub2e4\uace0 \uac00\uc815), \uc774 \ub370\uc774\ud130\ub294 \ube44 \ubb34\uc791\uc704 \uacb0\uce21\uc774\ub77c \ud568.|  \n\n\ucd9c\ucc98: https:\/\/m.blog.naver.com\/PostView.nhn?blogId=tjdudwo93&logNo=220976082118&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F\n\n### \ucc44\uc6b8\uc9c0 \ub9d0\uc9c0 \uacb0\uc815\n\n\n![](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC5717805\/bin\/12874_2017_442_Fig1_HTML.jpg)","73a17f87":"## \uacb0\uce21\uce58 \ucc98\ub9ac","767dce0a":"#### MasVnrArea: Masonry veneer area in square feet\n\nAn integer variable.","da4a2280":"### One-hot-encoding","07b3df4e":"```\n   2Types   More than one type of garage\n   Attchd   Attached to home\n   Basment  Basement Garage\n   BuiltIn  Built-In (Garage part of house - typically has room above garage)\n   CarPort  Car Port\n   Detchd   Detached from home\n   NA       No Garage\n   ```","4e45dcdf":"\ub9c8\ucc2c\uac00\uc9c0\ub85c Neighborhood\uac00 NoRidge\ub85c \ub3d9\uc77c \ud55c \uac83\uc744 \ubcfc \uc218 \uc788\uc74c.","0b4d6db6":"#### GarageQual: Garage quality\nAnother variable than can be made ordinal with the Qualities vector.\n","15d8bfd7":"```\n   Fin  Finished\n   RFn  Rough Finished  \n   Unf  Unfinished\n   NA   No Garage \n```","48e531a4":"## \ub1cc\ud53c\uc15c \uc2e4\ud5d82 (Fre + Label)","597f2b18":"#### BsmtCond: Evaluates the general condition of the basement\nA variable than can be made ordinal with the Qualities vector.\n\n```\n   Ex   Excellent\n   Gd   Good\n   TA   Typical - slight dampness allowed\n   Fa   Fair - dampness or some cracking or settling\n   Po   Poor - Severe cracking, settling, or wetness\n   NA   No Basement```\n\n","3eb9436f":"#### BsmtFinSF1: Type 1 finished square feet\n\nAn integer variable.","84131c48":"### FireplaceQu ","0fb43be7":"### Basement \nAltogether, there are 11 variables that relate to the Basement of a house. Five of those have 79-82 NAs, six have one or two NAs.","7ddfe26f":"## Frequency \ub9cc","555074ed":"```\n   Ex   Excellent - Exceptional Masonry Fireplace\n   Gd   Good - Masonry Fireplace in main level\n   TA   Average - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n   Fa   Fair - Prefabricated Fireplace in basement\n   Po   Poor - Ben Franklin Stove\n   NA   No Fireplace\n```","69267d01":"\uadf8\ub7f0\ub370 \uc704\uc758 \uadf8\ub798\ud504\ub294 OverallQual\uc774 1 ~ 10\uc774 \ubaa8\ub450 \uc11e\uc5ec \uc788\ub294 \ubc15\uc2a4\ud50c\ub86f\uc774\uc5b4\uc11c \uc6b0\ub9ac\uac00 \uc0dd\uac01\ud588\ub358 \uac83\uc774\ub791 \ub2e4\ub97c \uc218 \uc788\ub2e4.","902da098":"-  MSZoning : The general zoning classification","c1a66510":"## Encoding \uc2e4\uc2b5","18cc5c50":"## Mean encoding \ub9cc","4d735809":"![](https:\/\/postfiles.pstatic.net\/MjAxODEwMTBfMTY0\/MDAxNTM5MTM1Nzg5MjQy.jwa5o8TfLYUfqiG2CJcgZuBAdz7gkVlisCk36iU45JQg.MoCt2Vji4smyK5M9BmzudKUdu2x6PHbXQHZKZ8TMfzEg.PNG.choco_9966\/image.png?type=w966)\n\n\uc7a5\uc810 : bias\uac00 \uac00\uc7a5 \uc801\ub2e4.\n\n\ub2e8\uc810 : Tree Model\uc5d0\uc11c \ub290\ub824\uc9c8 \uc218 \uc788\uace0 \uc131\ub2a5\uc774 \ud56d\uc0c1 \uc62c\ub77c\uac00\ub294 \uac83\uc740 \uc544\ub2d8. \ud558\uc9c0 \uc54a\uc544\ub3c4 \uc0c1\uad00 \uc5c6\uc74c. \uceec\ub7fc\uc774 \ub9ce\uc544\uc838 \ucc28\uc6d0\uc774 \ub9ce\uc544\uc9c0\ubbc0\ub85c \ud559\uc2b5\uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9b4 \uc218 \uc788\ub294 \ub2e8\uc810.\n","9c7ca09b":"### LotFrontage\n\uc8fc\ud0dd\uac00\uc5d0 \uc5f0\uacb0\ub41c \uac01 \uac70\ub9ac\uc758 \uc9c0\uc5ed\uc740 \uc778\uadfc \uc9c0\uc5ed\uc758 \ub2e4\ub978 \uc8fc\ud0dd\uacfc \ube44\uc2b7\ud55c \uc9c0\uc5ed\uc744 \uac00\uc9c8 \uac00\ub2a5\uc131\uc774 \ub192\uc73c\ubbc0\ub85c \uc774\uc6c3\uc758 LotFrontage\uc758 \uc911\uc559\uac12\uc73c\ub85c \ub204\ub77d \uac12\uc744 \ucc44\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","4bfcfe5f":"## \uc774\uc0c1\uce58 \uc81c\uac70\n- \uc65c \uc774\uc0c1\uce58\uac00 \ubc1c\uc0dd\ud588\uc744\uae4c?\n- \uc81c\uac70 \/ \ub300\ud46f\uac12 \ub300\uc785 ","530220dd":"\ubcf4\uba74 value\uac00 ordinal\ud558\uac8c \uc21c\uc704\uac00 \uc788\ub294 \ubcc0\uc218\ub85c Fin > RFn > Unf > NA\uc784. \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \ubcc0\uc218\ub294 label encoder\ub97c \ud574\uc8fc\uba74 \uc88b\uac8c \uc801\uc6a9\ud568.","08782a46":"\uc804\ubc18\uc801\uc73c\ub85c \ubd24\uc744 \ub54c \ubcc4\ub85c \uac12\uc774 \ud06c\uc9c0 \uc54a\ub294\ub370 \uc774\uc0c1\ud558\uac8c salesprice\ub9cc \ud070\uac74 \uc774\uc0c1\ud558\ub2e4. \uadf8\ub798\uc11c \uc774\uc0c1\uce58\ub85c \ud310\ub2e8.","2a41c7df":"### \uc774\uc0c1\uce58 1 : OverallQual","2474acdc":"#### BsmtFinType1: Rating of basement finished area\n\nA variable than can be made ordinal.\n```\n   GLQ  Good Living Quarters\n   ALQ  Average Living Quarters\n   BLQ  Below Average Living Quarters   \n   Rec  Average Rec Room\n   LwQ  Low Quality\n   Unf  Unfinshed\n   NA   No Basement\n   ```","8d1067dc":"#### Exterior2nd: Exterior covering on house (if more than one material)\n\n1 NA. Values are categorical. \n```\n   AsbShng  Asbestos Shingles\n   AsphShn  Asphalt Shingles\n   BrkComm  Brick Common\n   BrkFace  Brick Face\n   CBlock   Cinder Block\n   CemntBd  Cement Board\n   HdBoard  Hard Board\n   ImStucc  Imitation Stucco\n   MetalSd  Metal Siding\n   Other    Other\n   Plywood  Plywood\n   PreCast  PreCast\n   Stone    Stone\n   Stucco   Stucco\n   VinylSd  Vinyl Siding\n   Wd Sdng  Wood Siding\n   WdShing  Wood Shingles\n   ```","d58467e5":"#### MSZoning: Identifies the general zoning classification of the sale\n\n4 NAs. Values are categorical.\n```\n   A    Agriculture\n   C    Commercial\n   FV   Floating Village Residential\n   I    Industrial\n   RH   Residential High Density\n   RL   Residential Low Density\n   RP   Residential Low Density Park \n   RM   Residential Medium Density\n   ```","00ccc507":"### Kitchen Variables\n#### Kitchen quality and numer of Kitchens above grade\n\nKitchen quality has 1 NA. Number of Kitchens is complete.\n\n#### Kitchen quality\n\n1NA. Can be made ordinal with the qualities vector.\n```\n   Ex   Excellent\n   Gd   Good\n   TA   Typical\/Average\n   Fa   Fair\n   Po   Poor\n   ```","3d1ad6fb":"```\n   Elev Elevator\n   Gar2 2nd Garage (if not described in garage section)\n   Othr Other\n   Shed Shed (over 100 SF)\n   TenC Tennis Court\n   NA   None\n```","4627ea50":"#### GarageFinish: Interior finish of the garage\nThe values are ordinal.","6d80a7c6":"## \uacb0\uce21\uce58 \ucc44\uc6b0\uae30 \uc2e4\uc2b5","3ac1fa03":"#### TotalBsmtSF: Total square feet of basement area\n\nAn integer variable.","d6c4d6de":"#### BsmtFinSF2: Type 2 finished square feet\n\nAn integer variable.","5c21566c":"![](https:\/\/postfiles.pstatic.net\/MjAxODEwMTBfMjMw\/MDAxNTM5MTM1ODA4NjI0.BkQPnFjiQKNNaANbPskM0bjJlOfxf6CCuPNQrmIg-dgg.cUGHiirirISZBpBsUJ75CfwTxhrLsZVNVJ9fvjsqPG8g.PNG.choco_9966\/image.png?type=w966)\n\n\uc7a5\uc810 : \uc2e4\uc6a9\uc801 ( String < Int ) , \ud2b9\uc815 \uc54c\uace0\ub9ac\uc998 \uc9c0\uc6d0, \uc131\ub2a5 , \uc21c\uc11c\ud615 \ubcc0\uc218\uac19\uc740 \uacbd\uc6b0 \ub9e4\uc6b0 \uc758\ubbf8\uc788\uc74c.\n\n\ub2e8\uc810 : \uc704\uc758 \uac19\uc740 \uacbd\uc6b0 \uac12\uc758 \ud06c\uae30\uac00 \uc758\ubbf8\uac00 \uc5c6\ub294\ub370 \ubd80\uc5ec\ub418\uc5b4\uc11c bias\uac00 \uc0dd\uae38 \uc218 \uc788\uc74c.\n\n\ubc29\ubc95 : sklearn\uc758 LabelEncoder, pandas factorize\n\ucc28\uc774 : factorize\ub294 NAN\uac12\uc744 \uc790\ub3d9\uc73c\ub85c -1\ub85c \ucc44\uc6b0\ub294\ub370 \ubc18\ud574 Label Encoder\ub294 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd. ","76c89b10":"### Mean Encoding","54b713ab":"### Mean encoding","1a7017c3":"\uc9c0\ub09c\uc8fc Week1 \ud30c\uc77c\uc5d0\uc11c \uc6b0\ub9ac\ub294 `\uc774\uc0c1\uce58`\uc640 `\uacb0\uce21\uce58` , `\ud3b8\ud5a5 \ub41c \uac12`\ub4e4\uc744 \ubd24\uc5c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubc88\uc5d0\ub294 \uc774\ub7ec\ud55c \uac12\ub4e4\uc744 \uc5b4\ub5bb\uac8c \ud0d0\uc0c9\ud558\uace0 \ucc98\ub9ac\ud558\ub294\uc9c0\uc5d0 \ub300\ud574 \uacf5\ubd80\ud574\ubcf4\ub3c4\ub85d \ud558\uc790.","2777002f":"### Label Encoding","f26523e5":"Test\uc5d0 \uc5c6\uc73c\uba74 \uc9c0\uc6cc\ub3c4 \ub418\uc9c0 \uc54a\uc744\uae4c??? \uc65c\ub0d0\ud558\uba74 \uc0ad\uc81c\ud574\ub3c4 \uc704\ud5d8\ubd80\ub2f4\uc774 \ub5a8\uc5b4\uc9c0\ub2c8\uae50!","b9621964":"- OverallQual : 4\n- OverallQual : 8\n- OverallQual : 10","6efe6c24":"\uc704\uc758 \uacfc\uc815\uc5d0\uc11c \ub69c\ub837\ud55c \ud754\uc801\uc744 \ubc1c\uacac\ud558\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uc5d0 \uc6b0\ub9ac\uac00 \ud0d0\uc0c9\ud558\uc9c0 \uc54a\uc558\ub358 \ubcc0\uc218\ub4e4\uc744 \ud0d0\uc0c9. \uadfc\ub370 corr\uc5d0 \uc758\ud574\uc11c numerical type\uc740 \uc5b4\ub290\uc815\ub3c4 \uc870\uc0ac\uac00 \ub418\uc5c8\ub2e4\uace0 \uc0dd\uac01\ud558\uace0 \ubb38\uc790\ud615 \ubcc0\uc218\ub4e4\uc744 \uc870\uc0ac","39206960":"### MiscFeature ","6e5a2447":"### SaleType\n#### SaleType: Type of sale\n\n1 NA. Values are categorical.\n```\n   WD   Warranty Deed - Conventional\n   CWD  Warranty Deed - Cash\n   VWD  Warranty Deed - VA Loan\n   New  Home just constructed and sold\n   COD  Court Officer Deed\/Estate\n   Con  Contract 15% Down payment regular terms\n   ConLw    Contract Low Down payment and low interest\n   ConLI    Contract Low Interest\n   ConLD    Contract Low Down\n   Oth  Other\n   ```","c9c974b0":"\uc704\uc5d0\uc11c \uc774\ubbf8 \uc81c\uac70 \ub428.","798643c0":"\uc774\ub807\uac8c \uacc4\uc18d \uce74\ud14c\uace0\ub9ac(\ubc94\uc8fc\ud615)\ubcc0\uc218\ub97c \uc0b4\ud3b4\ubcf4\ub358 \uc911\uc5d0 Neighborhood\uac00 \uac00\uaca9\uc5d0 \uc2ec\uac01\ud55c \uc601\ud5a5\uc744 \ub07c\uce58\ub294\uac83\uc744 \ud655\uc778\ud588\uc74c. \uadf8\ub807\ub2e4\uba74 \uc5ec\uae30\uc11c \ub450\uac00\uc9c0 \uc774\uc288\uac00 \ubc1c\uc0dd\ud568.\n- \uc774\uc6c3\uc744 \uc5b4\ub5bb\uac8c encoding\ud574\uc11c \ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud558\uac8c \ud560\uc9c0 ?\n- \uc774\uc6c3\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc774\uc0c1\uce58\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac \ud574\uc57c \ud560\uc9c0 ?","10a63be2":"```\n   GdPrv    Good Privacy\n   MnPrv    Minimum Privacy\n   GdWo Good Wood\n   MnWw Minimum Wood\/Wire\n   NA   No Fence\n```","ba8b4595":"GarageType \ub0b4\uc758 157 \uac1c\uc758 NAs\ub294 \ubaa8\ub450 GarageCondition, GarageQuality \ubc0f GarageFinish\uc5d0\uc11c\ub3c4 NA\uac00\ub429\ub2c8\ub2e4. \uadf8 \ucc28\uc774\uc810\uc740 \uc8fc\ud0dd 2127\uacfc 2577\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\uc2dc\ub2e4\uc2dc\ud53c, \uc9d1 2127\uc5d0\ub294 \uc2e4\uc81c\ub85c \ucc28\uace0\uac00 \uc788\uace0 \uc9d1 2577\uc5d0\ub294\uc5c6\ub294 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucc28\uace0\uac00\uc5c6\ub294 158 \ucc44\uc758 \uc9d1\uc774 \uc788\uc5b4\uc57c\ud569\ub2c8\ub2e4. \ud558\uc6b0\uc2a4 2127\uc744 \uc218\uc815\ud558\uae30 \uc704\ud574 GarageCond, GarageQual \ubc0f GarageFinish\uc5d0 \ub300\ud55c \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uac12 (\ubaa8\ub4dc)\uc744 \ub300\uccb4\ud569\ub2c8\ub2e4.","d7803b84":"### PoolQC\nhttps:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data \uc5d0 data_description.txt \ud30c\uc77c\uc5d0 \uc798 \ub098\uc640\uc788\uc74c\n```\n   Ex   Excellent\n   Gd   Good\n   TA   Average\/Typical\n   Fa   Fair\n   NA   No Pool\n```\nSo, it is obvious that I need to just assign \u2018No Pool\u2019 to the NAs. Also, the high number of NAs makes sense as normally only a small proportion of houses have a pool.","08e32f1a":"#### BsmtQual: Evaluates the height of the basement\n```\n   Ex   Excellent (100+ inches) \n   Gd   Good (90-99 inches)\n   TA   Typical (80-89 inches)\n   Fa   Fair (70-79 inches)\n   Po   Poor (<70 inches\n   NA   No Basement\n   ```","552e3284":"```\n   Grvl Gravel\n   Pave Paved\n   NA   No alley access\n```","3c67705e":"## 4\uac00\uc9c0 \uc0ac\uc6a9","7946af06":"\ubb34\uc5c7\ubcf4\ub2e4\ub3c4 GarageYrBlt : Year garage\uac00 YearBuilt \uac12\uc73c\ub85c \uad6c\uc131\ub41c \uac12 (\uc774 \uac12\uc740 YearRemodAdd\uc640 \ube44\uc2b7\ud569\ub2c8\ub2e4. \ub610\ud55c \uae30\ubcf8\uac12\uc73c\ub85c YearBuilt\uac00 \ub9ac\ud3fc \ub610\ub294 \ucd94\uac00\uac00\uc5c6\ub294 \uacbd\uc6b0)\uc744 \ub300\uccb4\ud569\ub2c8\ub2e4.","6dc3a01f":"```\n   Ex   Excellent\n   Gd   Good\n   TA   Typical\/Average\n   Fa   Fair\n   Po   Poor\n   NA   No Garage\n   ```","5fd86db3":"## \uc774\uc0c1\uce58 3. GarageCars","4eccffc7":"#### Remaining Basement variabes with just a few NAs\n\nI now still have to deal with those 6 variables that have 1 or 2 NAs.","3b182ba0":"## \uc774\uc0c1\uce58 2 : GrLivArea","adbc33db":"#### Functional: Home functionality\n\n1NA. Can be made ordinal (salvage only is worst, typical is best).\n```\n   Typ  Typical Functionality\n   Min1 Minor Deductions 1\n   Min2 Minor Deductions 2\n   Mod  Moderate Deductions\n   Maj1 Major Deductions 1\n   Maj2 Major Deductions 2\n   Sev  Severely Damaged\n   Sal  Salvage only\n   ```","889a35f2":"### Label encoding","2a39ad95":"## \uc774\uc0c1\uce584. GarageArea","d2011c69":"### Frequency encoding","b17a6a61":"### Electrical\n#### Electrical: Electrical system\n\n1 NA. Values are categorical.\n```\n   SBrkr    Standard Circuit Breakers & Romex\n   FuseA    Fuse Box over 60 AMP and all Romex wiring (Average) \n   FuseF    60 AMP Fuse Box and mostly Romex wiring (Fair)\n   FuseP    60 AMP Fuse Box and mostly knob & tube wiring (poor)\n   Mix  Mixed\n   ```","3f2cecc7":"## \uc694\uc57d\n# \uc2e4\ud5d8\n|    | One-hot encoding | Label encoding | Frequency encoding | Mean encoding | 4\uac00\uc9c0 \uc778\ucf54\ub529 | Label + Mean | Fre + Label |\n|----|------------------|----------------|--------------------|---------------|--------------|--------------|\n| CV |0.126977                |0.127370                |0.125568                    |0.127391               | 0.126922             | 0.127099             |0.125801 |\n| LB |                  |                |                    |               |              |              |    |","18c72754":"#### Masonry veneer type\n\nWill check the ordinality below.\n```\n   BrkCmn   Brick Common\n   BrkFace  Brick Face\n   CBlock   Cinder Block\n   None None\n   Stone    Stone\n   ```"}}