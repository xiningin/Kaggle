{"cell_type":{"69f84b22":"code","6ab8cc1b":"code","b1a96002":"code","87c98c86":"code","08039ebc":"code","2d5d18e0":"code","f6fa7717":"code","f5806378":"code","1588782a":"code","e7973823":"code","339220db":"code","bd9fcf58":"code","47b8d729":"code","8909788d":"code","8f0272e1":"code","41cdfcf9":"code","fb78be17":"code","978136f4":"code","ec222a50":"code","25457b2d":"code","c582a450":"code","176651c7":"code","d96fe1b2":"markdown","85bd5455":"markdown","4bb4934c":"markdown","299cc898":"markdown","03f7f763":"markdown","56032417":"markdown","0c8a658a":"markdown","5404cc2f":"markdown","df012f04":"markdown","57695cbb":"markdown","5ca8f0bf":"markdown","67792b80":"markdown","52254149":"markdown","8229a9d4":"markdown","d32953ef":"markdown"},"source":{"69f84b22":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6ab8cc1b":"wine = pd.read_csv(\"..\/input\/winemag-data-130k-v2.csv\")\nprint(wine.info())","b1a96002":"wine = wine[['country', 'points', 'price', 'taster_name', 'variety', 'winery', 'description']]\nwine = wine.dropna().reset_index(drop=True)\nprint(wine.describe())","87c98c86":"sns.jointplot(x='price', y='points', data=wine, facecolors='none', edgecolors='darkblue', alpha=0.1)\nplt.show()","08039ebc":"# We take the logarithm of the price and points columns\n\nlog_score = np.log(wine[['price', 'points']])\nlog_score = log_score.dropna().reset_index(drop=True)\nlog_score.columns = ['log_price', 'log_score']\n\n# We visualize our DataFrame\nlog_score.head()","2d5d18e0":"# Scatter plot\n\nsns.jointplot(x='log_price', y='log_score', data=log_score, facecolors='none', edgecolors='darkblue', alpha=0.05)\nplt.show()","f6fa7717":"# Linear regression: 95% confidence interval (ci)\n\nsns.regplot(x='log_price', y='log_score', data=log_score, scatter_kws={'alpha':0.05}, ci=95)\nplt.show()","f5806378":"# Correlation coefficient: \n\ncorr = np.corrcoef(wine['points'], wine['price'])\ncorr2 = np.corrcoef(log_score['log_score'], log_score['log_price'])\nprint('Data correlation coefficient: %.4f \\nLog-data correlation coefficient: %.4f' % (corr[0][1], corr2[0][1]))","1588782a":"# Price quartiles\n\nquart1 = wine[wine.price < wine.price.quantile(.25)].reset_index(drop=True)\nquart1 = quart1.dropna().reset_index(drop=True)\n\nquart2 = wine[(wine.price < wine.price.quantile(.50)) & (wine.price >= wine.price.quantile(.25))].reset_index(drop=True)\nquart2 = quart2.dropna().reset_index(drop=True)\n\nquart3 = wine[(wine.price < wine.price.quantile(.75)) & (wine.price >= wine.price.quantile(.50))].reset_index(drop=True)\nquart3 = quart3.dropna().reset_index(drop=True)\n\nquart4 = wine[wine.price >= wine.price.quantile(.75)].reset_index(drop=True)\nquart4 = quart4.dropna().reset_index(drop=True)","e7973823":"# Figure parameters\n\nplt.figure(figsize=(20,10))\n\n#------\nplt.subplot(2, 2, 1)\n\nplt.title('Quartile 1', fontsize=20)\nsns.distplot( quart1['points'], color='green', kde=False)\nplt.axvline(np.mean(wine.points), 0,1, linestyle='--', color='black', label='Mean score')\nplt.axvline(np.mean(quart1.points), 0,1, linestyle='--', color='green', label='Q1 mean score')\nplt.legend(fontsize=15)\n\n#------\nplt.subplot(2, 2, 2)\nplt.title('Quartile 2', fontsize=20)\nsns.distplot( quart2['points'], color='gold', kde=False)\nplt.axvline(np.mean(wine.points), 0,1, linestyle='--', color='black', label='Mean score')\nplt.axvline(np.mean(quart2.points), 0,1, linestyle='--', color='gold', label='Q2 mean score')\nplt.legend(fontsize=15)\n\n#------\nplt.subplot(2, 2, 3)\nplt.title('Quartile 3', fontsize=20)\nsns.distplot( quart3['points'], color='red', kde=False)\nplt.axvline(np.mean(wine.points), 0,1, linestyle='--', color='black', label='Mean score')\nplt.axvline(np.mean(quart3.points), 0,1, linestyle='--', color='red', label='Q3 mean score')\nplt.legend(fontsize=15)\n\n#------\nplt.subplot(2, 2, 4)\nplt.title('Quartile 4', fontsize=20)\nsns.distplot( quart4['points'], color='skyblue', kde=False)\nplt.axvline(np.mean(wine.points), 0,1, linestyle='--', color='black', label='Mean score')\nplt.axvline(np.mean(quart4.points), 0,1, linestyle='--', color='skyblue', label='Q4 mean score')\nplt.legend(fontsize=15)\n\nplt.show()","339220db":"# We now compare all quartiles on the same graph\n\n# Figure parameters\nplt.figure(figsize=(20,10))\n\nplt.title('Score distribution per price quantile', fontsize=30)\nsns.kdeplot( quart1['points'], color='green',   label='Quartile 1', shade=True)\nsns.kdeplot( quart2['points'], color='gold',    label='Quartile 2', shade=True)\nsns.kdeplot( quart3['points'], color='red',     label='Quartile 3', shade=True)\nsns.kdeplot( quart4['points'], color='skyblue', label='Quartile 4', shade=True)\nplt.axvline(np.mean(wine.points), 0,1, linestyle=':', color='black', label='Mean score')\nplt.legend(fontsize=15)\n\nplt.show()","bd9fcf58":"# This function will be used to obtain the list of different critics who rated the wine\n\ndef GetUniqueParameterValues(parameter_of_interest):\n    '''\n    Parameters:\n    ----------------------------------------\n    \n    parameter_of_interest: \n        String - Which parameter we wish to find. e.g. 'country', 'variety'\n    \n    '''\n    param_data = wine[[parameter_of_interest, 'points']]\n    param_data = param_data.dropna().reset_index(drop=True)\n    \n    param_values = param_data[parameter_of_interest]\n    param_values = pd.DataFrame(param_values).drop_duplicates(keep='first').reset_index(drop=True)\n    param_values = np.array(param_values)\n    \n    param_list = []\n    for i in range(len(param_values)):\n        param_list.append(param_values[i][0])\n    return param_list","47b8d729":"# This function gets the data asociated to a particular parameter\n# This function will be used within the CalculateCorrelation function below\n\ndef GetParameterData(parameter_of_interest, param_value):\n    '''\n    Parameters:\n    ----------------------------------------\n    \n    parameter_of_interest: \n        String - Which parameter we wish to find. e.g. 'country', 'variety'\n    \n    param_value:\n        String - Specific value of the parameter e.g. 'Italy', 'Cabernet Sauvignon', etc.\n    \n    '''\n    \n    res = wine.loc[wine[parameter_of_interest] == param_value]\n    res = res[['price', 'points']]\n    res = res.dropna().reset_index(drop=True)\n    return res","8909788d":"# This function calculates the correlation coefficient between price and score\n# of our wines according to their country, winery and variety\n\ndef CalculateCorrelation(parameter_of_interest, param_value_list):\n    '''\n    Parameters:\n    ----------------------------------------\n    \n    parameter_of_interest: \n        String - Which parameter we wish to find. e.g. 'country', 'variety'\n    \n    param_value_list:\n        List - Lists of string elements of the parameters we are analyzing. e.g. list of wineries, \n               list of countries\n    \n    '''\n    res = []\n    for i in range(len(param_value_list)):\n        data_ = GetParameterData(parameter_of_interest, param_value_list[i])\n        corr_coef = np.corrcoef(data_['price'], data_['points'])[0][1]\n        temp = param_value_list[i], corr_coef\n        res.append(temp)\n    res = pd.DataFrame(res)\n    res.columns = [parameter_of_interest, 'corr_coef']\n    res = res.sort_values(by=['corr_coef'], ascending=True).reset_index(drop=True) #DEBERIA SER ascending=False\n    return res","8f0272e1":"# We visualize the top 19 wineries, countries and varieties in terms of numer of data entries\n\nwrs = wine['winery'].value_counts()\nctr = wine['country'].value_counts()\nvrt = wine['variety'].value_counts()\nprint(wrs.head(19), '\\n------------------------------\\n', ctr.head(19) \n                  , '\\n------------------------------\\n', vrt.head(19))","41cdfcf9":"# We look at the following variables: taster, country, winery, variety\n\n# Tasters which we will be comparing\ntasters   = GetUniqueParameterValues('taster_name')\n\n# Countries which we will be comparing\ncountry   = ['US', 'France', 'Italy', 'Spain', 'Portugal', 'Chile', 'Argentina', 'Austria', 'Germany', 'Australia', \n            'New Zealand', 'South Africa', 'Israel', 'Greece', 'Canada', 'Hungary', 'Bulgaria', 'Romania', \n            'Uruguay']\n\n# Wineries which we will be comparing\nwineries  = ['Wines & Winemakers', 'DFJ Vinhos', 'Chateau Ste. Michelle', 'Concha y Toro', \n            'Louis Latour', 'Columbia Crest', 'Georges Duboeuf', 'Montes', 'Trapiche', 'Testarossa', 'Santa Ema', \n            'Undurraga', 'Maryhill', 'Chehalem', 'Jean-Luc and Paul Aegerter', 'Chanson P\u00e8re et Fils', \n            'Seven Hills', \"D'Arenberg\", 'Georges Vigouroux']\n\n# Varieties which we will be comparing\nvarieties = ['Pinot Noir', 'Chardonnay', 'Red Blend', 'Cabernet Sauvignon', 'Bordeaux-style Red Blend', \n            'Riesling', 'Sauvignon Blanc', 'Syrah', 'Ros\u00e9', 'Malbec', 'Portuguese Red', 'Merlot', 'Sangiovese', \n            'Nebbiolo', 'Tempranillo', 'White Blend', 'Sparkling Blend', 'Zinfandel', 'Pinot Gris']","fb78be17":"# Correlation coefficient between price and score:\n\n# a) According to different tasters\ntst_corr = CalculateCorrelation('taster_name', tasters)\n\n# b) According to different countries\nctr_corr = CalculateCorrelation('country', country)\n\n# c) According to different wineries\nwnr_corr = CalculateCorrelation('winery', wineries)\n\n# d) According to different varieties\nvrt_corr = CalculateCorrelation('variety', varieties)","978136f4":"# Visualization of the correlation coefficients\n\ntst_range = range(1,len(tst_corr.index)+1)\nmy_range = range(1,len(ctr_corr.index)+1)\n\nsns.set()\n\n# Figure parameters\nplt.figure(figsize=(15,10))\n\n#------\nplt.subplot(2, 2, 1)\n\nplt.hlines(y=my_range, xmin=0, xmax=ctr_corr['corr_coef'], color='skyblue')\nplt.plot(ctr_corr['corr_coef'], my_range, \"o\")\n\nplt.yticks(my_range, ctr_corr['country'])\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Country')\n\nplt.axvline(1, 0,1, linestyle='--', color='black')\nplt.axvline(np.mean(ctr_corr.corr_coef), 0,1, linestyle='--', color='gold')\n\n#------\nplt.subplot(2, 2, 2)\n\nplt.hlines(y=my_range, xmin=0, xmax=wnr_corr['corr_coef'], color='skyblue')\nplt.plot(wnr_corr['corr_coef'], my_range, \"o\")\n\nplt.yticks(my_range, wnr_corr['winery'])\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Winery')\n\nplt.axvline(1, 0,1, linestyle='--', color='black')\nplt.axvline(np.mean(wnr_corr.corr_coef), 0,1, linestyle='--', color='gold')\n\n#------\nplt.subplot(2, 2, 3)\n\nplt.hlines(y=my_range, xmin=0, xmax=vrt_corr['corr_coef'], color='skyblue')\nplt.plot(vrt_corr['corr_coef'], my_range, \"o\")\n\nplt.yticks(my_range, vrt_corr['variety'])\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Variety')\n\nplt.axvline(1, 0,1, linestyle='--', color='black')\nplt.axvline(np.mean(vrt_corr.corr_coef), 0,1, linestyle='--', color='gold')\n\n#------\nplt.subplot(2, 2, 4)\n\nplt.hlines(y=tst_range, xmin=0, xmax=tst_corr['corr_coef'], color='skyblue')\nplt.plot(tst_corr['corr_coef'], tst_range, \"o\")\n\nplt.yticks(tst_range, tst_corr['taster_name'])\nplt.xlabel('Correlation coefficient')\nplt.ylabel('Taster name')\n\nplt.axvline(1, 0,1, linestyle='--', color='black')\nplt.axvline(np.mean(tst_corr.corr_coef), 0,1, linestyle='--', color='gold')\n\nplt.tight_layout()\nplt.show()","ec222a50":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","25457b2d":"# Score quartiles\n\nscore_quart4 = wine[wine.points >= wine.points.quantile(.75)].reset_index(drop=True)\nscore_quart4 = score_quart4.dropna().reset_index(drop=True)\n\nscore_quart3 = wine[(wine.points < wine.points.quantile(.75)) & (wine.points >= wine.points.quantile(.50))].reset_index(drop=True)\nscore_quart3 = score_quart3.dropna().reset_index(drop=True)\n\nscore_quart2 = wine[(wine.points < wine.points.quantile(.50)) & (wine.points >= wine.points.quantile(.25))].reset_index(drop=True)\nscore_quart2 = score_quart2.dropna().reset_index(drop=True)\n\nscore_quart1 = wine[wine.points < wine.points.quantile(.25)].reset_index(drop=True)\nscore_quart1 = score_quart1.dropna().reset_index(drop=True)\n\n# Price quantiles were defined previously","c582a450":"# Wine descriptions by PRICE\n\nqt1_txt = str(quart1.description)\nqt2_txt = str(quart2.description)\nqt3_txt = str(quart3.description)\nqt4_txt = str(quart4.description)\n\nstopwords = set(STOPWORDS)\n\n# We remove words that are common among all descriptions, in order to see if there is one characteristic\n# that differentiates these wines\nstopwords.update([\"drink\", \"now\", \"wine\", \"flavor\", \"flavors\", \"aroma\", \"aromas\", \"blend\", \"note\", \"notes\"])\n\n# Figures\n\nplt.figure(figsize=(15,15))\n\nplt.subplot(2, 2, 1)\nplt.title('Q1 by price (cheapest)', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt1_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 2)\nplt.title('Q2 by price', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt2_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 3)\nplt.title('Q3 by price', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt3_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 4)\nplt.title('Q4 by price (priciest)', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt4_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()","176651c7":"# Wine descriptions by SCORE\n\nqt1_txt = str(score_quart1.description)\nqt2_txt = str(score_quart2.description)\nqt3_txt = str(score_quart3.description)\nqt4_txt = str(score_quart4.description)\n\nstopwords = set(STOPWORDS)\n\n# We remove words that are common among all descriptions, in order to see if there is one characteristic\n# that differentiates these wines\nstopwords.update([\"drink\", \"now\", \"wine\", \"flavor\", \"flavors\", \"aroma\", \"aromas\"])\n\n# Figures\n\nplt.figure(figsize=(15,15))\n\nplt.subplot(2, 2, 1)\nplt.title('Q1 by score (lowest-scoring)', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt1_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 2)\nplt.title('Q2 by score', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt2_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 3)\nplt.title('Q3 by score', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt3_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\n#------\n\nplt.subplot(2, 2, 4)\nplt.title('Q4 by score (highest-scoring)', fontsize=15)\nwordcloud = WordCloud(stopwords=stopwords, background_color='white').generate(qt4_txt)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\n\nplt.tight_layout()\nplt.show()","d96fe1b2":"# World cloud\n---\nFor a more subjective analysis, lets see what the critics have to say about these different wines. By making a word cloud, we can see what the general feelings about these wines are.\n\nIf we also repeat our analysis by quantiles, both by *price* and *score*, we can get a sense of what each critic is saying for differently priced wines, and differently scored wines.","85bd5455":"## Application\n---\nNow, we apply the functions defined above. First, we look at the most common different wineries, countries and varieties.","4bb4934c":"We can wines in the most expensive quartiles are characterized by fruits such as \"plum\" or \"cherry\". The two middle quartiles share the words \"fruit\".  Also, some wine varieties such as \"cabernet sauvignon\" and \"white\" and \"chardonnay\" appear in these same quartiles. The words \"ripe\", \"soft\" and \"merlot\" stand out on the cheaper quartile Q1","299cc898":"We apply the CalculateCorrelation function that gives us the correlation coefficient between price and score, conditioning on the previous parameters:","03f7f763":"The word \"blend\" stands out on both of the higher-scoring quartiles, as well as the words \"cabernet\". Interestingly, the word \"fruit\" appears most often on the lowest scoring wines. This is interesting because it also appears on the highest scoring quartile Q4. Also, particular fruits such as \"plum\", \"peach\", \"cherry\" and \"apple\" appear on Q4.","56032417":"**Observation:** We can see that, despite the high correlation between price and score, there are plenty of good wine options across all price ranges\n\n# Other variables\n---\nWe now take a different look at our data. By comparing the correlation coefficient according to different critics, wineries, countries and varieties, we can check if any of these parameters influence the relationship between a wine's price and the score it recieves from someliers. \n\nTo begin with, there are some functions we need to define:","0c8a658a":"# Wine Database\n------\n\n**Objective:** Wine and wine culture in general is often percieved to be an expensive hobby. Some wine bottles sell for thousands of dollars, depending on variables such as the region and the year that the grapes were harvested. This made me wonder, does good wine *have* to be expensive? Most wine bottles are relatively accesible, so, does a pricier bottle *really* result in better wine? Or is it just a preconceived notion, a bias, that outsiders and casual wine consumers have? Lets see what the data says about it!","5404cc2f":"These countries, wineries and varieties are the ones which we will be calculating the correlation coefficient.","df012f04":"Having separated the wines into quartiles by price, we can now plot a histogram with the number of wines with a certain score","57695cbb":"## Data transformation\nIt is clear that we need to transform the data. By looking at the information from the command `wine.describe()`, we can see that the minimum price for a bottle is 4 dollars, while the maximum price is 3300 dollars. Furthermore, the minimum score awarded was 80, and the maximum score is 100. This means that we have a very broad range of prices, while at the same time having a small interval of score values.\n\nBecause of this, it is useful to apply the logarithm function to our data. This function has a particular property: it brings closer together points who are far away, and separates points which are close to each other. This is perfect for our data, since we have both of those problems.","5ca8f0bf":"## Visualization\n---\nNow, we visualize our results:","67792b80":"Lets take a look at the correlation coefficient between the \"points\" and \"price\" values","52254149":"# Data visualization\n---\nWe draw a scatter plot in order to identify any relation between our two variables","8229a9d4":"Taking a look at our transformed data, it is clear by our graphs that there seems to be a relationship between price and wine score, overall. Aditionally, the correlation coefficient between the score recieved and the wine's price is $\\rho=0.4$ for our original data and $\\rho_{\\log}=0.62$ for our transformed data.\n\n## Distribution of scores per price quartiles\n---\nWe can take a closer look at this problem. By separating our score data into four different *price* quantiles, we can see how their scores are distributed. This will help us visualize if the best wines are indeed the more expensive ones. ","d32953ef":"# Conclusion\n---\nSo, is more expensive wine better? The data suggests that, overall, the answer is yes. This result is a generalization, so it only means that, on average, more expensive wine is generally better. Despite this conclusion, it is also very obvious that there is plenty of great wine at all price ranges, just by looking at the second histogram of our initial quantile analysis."}}