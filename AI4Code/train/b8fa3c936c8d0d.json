{"cell_type":{"457e736d":"code","4fa76645":"code","0867f4fd":"code","186f3095":"code","b02ba605":"code","2aac3e56":"code","04efb24f":"code","8f6bdc2d":"code","1c2cbdbb":"code","72b60f0d":"code","5b672b09":"code","8ff5aa5c":"code","f090215d":"code","e87e259f":"code","885f1215":"markdown","4eca981f":"markdown","1d847b64":"markdown","5ba77620":"markdown","2db402b1":"markdown","efa392ab":"markdown","a5cd7573":"markdown","cd64b94b":"markdown"},"source":{"457e736d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fa76645":"# import\nimport glob\nimport os\nimport PIL\nimport imageio\nimport re\nimport shutil\nfrom PIL import Image, ImageDraw\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow_addons as tfa\nfrom tensorflow.keras.callbacks import Callback\nimport matplotlib.pyplot as plt\nfrom kaggle_datasets import KaggleDatasets","0867f4fd":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\nAUTO = tf.data.experimental.AUTOTUNE\nprint(tf.__version__)","186f3095":"GCS_PATH = KaggleDatasets().get_gcs_path('gan-getting-started')\n\n\nMONET_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/monet_tfrec\/monet*.tfrec'))\nPHOTO_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/photo_tfrec\/photo*.tfrec'))\n\n\nn_monet_sample = np.sum([int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in MONET_FILENAMES])\nn_photo_sample = np.sum([int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in PHOTO_FILENAMES])\n\nprint(f'Monet TFRecord files: {len(MONET_FILENAMES)}')\nprint(f'Monet image files: {n_monet_sample}')\nprint(f'Photo TFRecord files: {len(PHOTO_FILENAMES)}')\nprint(f'Photo image files: {n_photo_sample}')","b02ba605":"OUTPUT_CHANNELS = 3","2aac3e56":"# Data augment\ndef data_augment(image):\n    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n\n    # rotation\n    if p_rotate > .8:\n        image = tf.image.rot90(image)\n    elif p_rotate > .6:\n        image = tf.image.rot90(image, 2)\n    elif p_rotate > .4:\n        image = tf.image.rot90(image, 3)\n\n    # flip\n    if p_spatial > .6:\n        image = tf.image.random_flip_left_right(image)\n        image = tf.image.random_flip_up_down(image)\n        if p_spatial > .85:\n            image = tf.image.transpose(image)\n\n    return image\n\n# Normalize\ndef normalize_img(image):\n    fimg = tf.cast(image, dtype=tf.float32)\n    img = (fimg \/ 127.5) - 1.\n    return img\n\n# Decode img\ndef decode_img(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    img = tf.reshape(image, [256, 256, 3])\n    return img\n\n# Read data\ndef read_tfrecord(example):\n    tfrecord_format = {\n        'image': tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_img(example['image'])\n    return image\n\n# Get dataset\ndef get_dataset(filenames, augment=None, repeat=True, batch_size=1):\n\n    raw_dataset = tf.data.TFRecordDataset(filenames)\n    dataset = raw_dataset.map(read_tfrecord, num_parallel_calls=AUTO)\n\n    # repeat\n    if repeat:\n        dataset = dataset.repeat(2)\n\n    # augment\n    if augment:\n        dataset = dataset.map(augment, num_parallel_calls=AUTO)\n\n    # normalize\n    dataset = dataset.map(normalize_img, num_parallel_calls=AUTO)\n\n    dataset = dataset.batch(batch_size).cache().prefetch(AUTO)\n\n    return dataset\n\n\n# Model functions\ndef encoder_block(filters, size=3, strides=2, apply_instancenorm=True):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    block = keras.Sequential()\n    # Convolution\n    block.add(layers.Conv2D(filters, size, strides, padding='same', kernel_initializer=initializer, use_bias=False))\n\n    # Normalization\n    if apply_instancenorm:\n        block.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    # Activation\n    block.add(layers.ReLU())\n\n    return block\n\n\ndef decoder_block(filters, size=3, strides=2, apply_instancenorm=True):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    block = keras.Sequential()\n    # Transposed convolutional layer\n    block.add(\n        layers.Conv2DTranspose(filters, size, strides, padding='same', kernel_initializer=initializer, use_bias=False))\n\n    # Normalization\n    if apply_instancenorm:\n        block.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    # Activation\n    block.add(layers.LeakyReLU())\n    return block\n\n\ndef resnet_block(input_layer, size=3, strides=1):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n    filters = input_layer.shape[-1]\n\n    block = layers.Conv2D(filters, size, strides=strides, padding='same', use_bias=False,\n                          kernel_initializer=initializer)(input_layer)\n    block = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(block)\n    block = layers.ReLU()(block)\n\n    block = layers.Conv2D(filters, size, strides=strides, padding='same', use_bias=False,\n                          kernel_initializer=initializer)(block)\n    block = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(block)\n\n    block = layers.Add()([block, input_layer])\n\n    return block\n\n# Generator\ndef Generator():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n    inputs = layers.Input(shape=[256, 256, 3])\n    x = inputs\n\n    down_layers = [encoder_block(64, 7, 1, apply_instancenorm=False),\n                   encoder_block(128, 3, 2, apply_instancenorm=True),\n                   encoder_block(256, 3, 2, apply_instancenorm=True)]\n\n    skips = []\n    for layer in down_layers:\n        x = layer(x)\n        skips.append(x)\n\n    skips = reversed(skips[:-1])\n\n    for n in range(5):\n        x = resnet_block(x, 3, 1)\n\n    up_layers = [decoder_block(256, 3, 2),\n                 decoder_block(128, 3, 2),\n                 decoder_block(64, 3, 2), ]\n\n    for layer, skip in zip(up_layers, skips):\n        x = layer(x)\n        x = layers.Concatenate()([x, skip])\n\n    last = layers.Conv2D(OUTPUT_CHANNELS, 7,\n                         strides=1, padding='same',\n                         kernel_initializer=initializer,\n                         use_bias=False,\n                         activation='tanh')\n\n    outputs = last(x)\n\n    return keras.Model(inputs=inputs, outputs=outputs)\n\n# discriminator\ndef Discriminator():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    inputs = layers.Input(shape=[256, 256, 3])\n    x = inputs\n    x = encoder_block(64, 4, 2, apply_instancenorm=False)(x)  # (bs, 128, 128, 64)\n    x = encoder_block(128, 4, 2, apply_instancenorm=True)(x)  # (bs, 64, 64, 128)\n    x = encoder_block(256, 4, 2, apply_instancenorm=True)(x)  # (bs, 32, 32, 256)\n    x = encoder_block(512, 4, 1, apply_instancenorm=True)(x)\n\n    outputs = layers.Conv2D(1, 4, strides=1, padding='valid', kernel_initializer=initializer)(x)\n\n    return keras.Model(inputs=inputs, outputs=outputs)\n\n# Build model\nwith strategy.scope():\n    monet_generator = Generator()  # transforms photos to Monet-esque paintings\n    photo_generator = Generator()  # transforms Monet paintings to be more like photos\n\n    monet_discriminator = Discriminator()  # differentiates real Monet paintings and generated Monet paintings\n    photo_discriminator = Discriminator()  # differentiates real photos and generated photos\n\n\nclass CycleGan(keras.Model):\n    def __init__(\n            self,\n            monet_generator,\n            photo_generator,\n            monet_discriminator,\n            photo_discriminator,\n            lambda_cycle=10,\n    ):\n        super(CycleGan, self).__init__()\n        self.m_gen = monet_generator\n        self.p_gen = photo_generator\n        self.m_disc = monet_discriminator\n        self.p_disc = photo_discriminator\n        self.lambda_cycle = lambda_cycle\n\n    def compile(\n            self,\n            m_gen_optimizer,\n            p_gen_optimizer,\n            m_disc_optimizer,\n            p_disc_optimizer,\n            gen_loss_fn,\n            disc_loss_fn,\n            cycle_loss_fn,\n            identity_loss_fn\n    ):\n        super(CycleGan, self).compile()\n        self.m_gen_optimizer = m_gen_optimizer\n        self.p_gen_optimizer = p_gen_optimizer\n        self.m_disc_optimizer = m_disc_optimizer\n        self.p_disc_optimizer = p_disc_optimizer\n        self.gen_loss_fn = gen_loss_fn\n        self.disc_loss_fn = disc_loss_fn\n        self.cycle_loss_fn = cycle_loss_fn\n        self.identity_loss_fn = identity_loss_fn\n\n    def train_step(self, batch_data):\n        real_monet, real_photo = batch_data\n\n        with tf.GradientTape(persistent=True) as tape:\n            # photo to monet back to photo\n            fake_monet = self.m_gen(real_photo, training=True)\n            cycled_photo = self.p_gen(fake_monet, training=True)\n\n            # monet to photo back to monet\n            fake_photo = self.p_gen(real_monet, training=True)\n            cycled_monet = self.m_gen(fake_photo, training=True)\n\n            # generating itself\n            same_monet = self.m_gen(real_monet, training=True)\n            same_photo = self.p_gen(real_photo, training=True)\n\n            # discriminator used to check, inputing real images\n            disc_real_monet = self.m_disc(real_monet, training=True)\n            disc_real_photo = self.p_disc(real_photo, training=True)\n\n            # discriminator used to check, inputing fake images\n            disc_fake_monet = self.m_disc(fake_monet, training=True)\n            disc_fake_photo = self.p_disc(fake_photo, training=True)\n\n            # evaluates generator loss\n            monet_gen_loss = self.gen_loss_fn(disc_fake_monet)\n            photo_gen_loss = self.gen_loss_fn(disc_fake_photo)\n\n            # evaluates total cycle consistency loss\n            total_cycle_loss = self.cycle_loss_fn(real_monet, cycled_monet, self.lambda_cycle) + self.cycle_loss_fn(\n                real_photo, cycled_photo, self.lambda_cycle)\n\n            # evaluates total generator loss\n            total_monet_gen_loss = monet_gen_loss + total_cycle_loss + self.identity_loss_fn(real_monet, same_monet,\n                                                                                             self.lambda_cycle)\n            total_photo_gen_loss = photo_gen_loss + total_cycle_loss + self.identity_loss_fn(real_photo, same_photo,\n                                                                                             self.lambda_cycle)\n\n            # evaluates discriminator loss\n            monet_disc_loss = self.disc_loss_fn(disc_real_monet, disc_fake_monet)\n            photo_disc_loss = self.disc_loss_fn(disc_real_photo, disc_fake_photo)\n\n        # Calculate the gradients for generator and discriminator\n        monet_generator_gradients = tape.gradient(total_monet_gen_loss,\n                                                  self.m_gen.trainable_variables)\n        photo_generator_gradients = tape.gradient(total_photo_gen_loss,\n                                                  self.p_gen.trainable_variables)\n\n        monet_discriminator_gradients = tape.gradient(monet_disc_loss,\n                                                      self.m_disc.trainable_variables)\n        photo_discriminator_gradients = tape.gradient(photo_disc_loss,\n                                                      self.p_disc.trainable_variables)\n\n        # Apply the gradients to the optimizer\n        self.m_gen_optimizer.apply_gradients(zip(monet_generator_gradients,\n                                                 self.m_gen.trainable_variables))\n\n        self.p_gen_optimizer.apply_gradients(zip(photo_generator_gradients,\n                                                 self.p_gen.trainable_variables))\n\n        self.m_disc_optimizer.apply_gradients(zip(monet_discriminator_gradients,\n                                                  self.m_disc.trainable_variables))\n\n        self.p_disc_optimizer.apply_gradients(zip(photo_discriminator_gradients,\n                                                  self.p_disc.trainable_variables))\n\n        return {\n            \"monet_gen_loss\": total_monet_gen_loss,\n            \"photo_gen_loss\": total_photo_gen_loss,\n            \"monet_disc_loss\": monet_disc_loss,\n            \"photo_disc_loss\": photo_disc_loss\n        }\n\n# Loss Function\nwith strategy.scope():\n    def discriminator_loss(real, generated):\n        real_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(real), real)\n\n        generated_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.zeros_like(generated), generated)\n\n        total_disc_loss = real_loss + generated_loss\n\n        return total_disc_loss * 0.5\n\n    def generator_loss(generated):\n        return tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(generated), generated)\n\n    def calc_cycle_loss(real_image, cycled_image, LAMBDA):\n        loss1 = tf.reduce_mean(tf.abs(real_image - cycled_image))\n\n        return LAMBDA * loss1\n\n    def identity_loss(real_image, same_image, LAMBDA):\n        loss = tf.reduce_mean(tf.abs(real_image - same_image))\n        return LAMBDA * 0.5 * loss\n\n# #optimizer\nwith strategy.scope():\n    monet_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n\n    monet_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n\n#compile\nwith strategy.scope():\n    cycle_gan_model = CycleGan(\n        monet_generator, photo_generator, monet_discriminator, photo_discriminator\n    )\n\n    cycle_gan_model.compile(\n        m_gen_optimizer = monet_generator_optimizer,\n        p_gen_optimizer = photo_generator_optimizer,\n        m_disc_optimizer = monet_discriminator_optimizer,\n        p_disc_optimizer = photo_discriminator_optimizer,\n        gen_loss_fn = generator_loss,\n        disc_loss_fn = discriminator_loss,\n        cycle_loss_fn = calc_cycle_loss,\n        identity_loss_fn = identity_loss\n    )\n\n# Monitor\nclass GANMonitor(Callback):\n\n    def __init__(self, num_img=1, monet_path='monet', photo_path='photo'):\n        self.num_img = num_img\n        self.monet_path = monet_path\n        self.photo_path = photo_path\n        # Create directories to save the generate images\n        if not os.path.exists(self.monet_path):\n            os.makedirs(self.monet_path)\n        if not os.path.exists(self.photo_path):\n            os.makedirs(self.photo_path)\n\n    def on_epoch_end(self, epoch, logs=None):\n        # Monet generated images\n        for i, img in enumerate(photo_eval.skip(5).take(self.num_img)):\n            monet_prediction = monet_generator(img, training=False)[0].numpy()\n            monet_prediction_uint8 = (monet_prediction * 127.5 + 127.5).astype(np.uint8)\n            monet_prediction_img = Image.fromarray(monet_prediction_uint8)\n            monet_prediction_img.save(f'{self.monet_path}\/generated_{i}_{epoch + 1}.png')\n\n        # Photo generated images\n        for i, img in enumerate(monet_eval.skip(5).take(self.num_img)):\n            photo_prediction = photo_generator(img, training=False)[0].numpy()\n            photo_prediction_uint8 = (photo_prediction * 127.5 + 127.5).astype(np.uint8)\n            photo_prediction_img = Image.fromarray(photo_prediction_uint8)\n            photo_prediction_img.save(f'{self.photo_path}\/generated_{i}_{epoch + 1}.png')","04efb24f":"monet_ds = get_dataset(MONET_FILENAMES, augment=data_augment)\nphoto_ds = get_dataset(PHOTO_FILENAMES, repeat=False)\n\nmonet_eval = get_dataset(MONET_FILENAMES, repeat=False)\nphoto_eval = get_dataset(PHOTO_FILENAMES, repeat=False)\n\n# create gif\ndef create_gif(images_path, gif_path):\n    images = []\n    filenames = glob.glob(images_path)\n    filenames.sort(key=lambda x: int(''.join(filter(str.isdigit, x))))\n\n    for epoch, filename in enumerate(filenames):\n        img = ImageDraw.Image.open(filename)\n        ImageDraw.Draw(img).text((0, 0), f'Epoch {epoch + 1}')\n        images.append(img)\n    imageio.mimsave(gif_path, images, fps=3)\n\n\n# train\ncycle_gan_model.fit(tf.data.Dataset.zip((monet_ds, photo_ds)), epochs=10, callbacks=[GANMonitor()])\n\n","8f6bdc2d":"# predict and save\ndef predict_and_save(input_ds, generator_model, output_path):\n    i = 1\n    for img in input_ds:\n        prediction = generator_model(img, training=False)[0].numpy()  # make predition\n        prediction = (prediction * 127.5 + 127.5).astype(np.uint8)   # re-scale\n        im = PIL.Image.fromarray(prediction)\n        im.save(f'{output_path}{str(i)}.jpg')\n        i += 1","1c2cbdbb":"%%time\nos.makedirs('..\/images\/') # Create folder to save generated images\npredict_and_save(photo_eval, monet_generator, '..\/images\/')","72b60f0d":"shutil.make_archive('\/kaggle\/working\/images\/', 'zip', '..\/images')\n\nprint(f\"Generated samples: {len([name for name in os.listdir('..\/images\/') if os.path.isfile(os.path.join('..\/images\/', name))])}\")","5b672b09":"\n# create gif\ncreate_gif('\/kaggle\/working\/monet\/*.png', 'monet.gif')\ncreate_gif('\/kaggle\/working\/photo\/*.png', 'photo.gif')\n\nprint('creat complete')\n","8ff5aa5c":"ds_iter = iter(photo_eval.skip(10).take(25))\nfor n_sample in range(25):\n    example_sample = next(ds_iter)\n    generated_sample = monet_generator.predict(example_sample)\n\n    f = plt.figure(figsize=(10, 10))\n\n    plt.subplot(121)\n    plt.title('Input image')\n    plt.imshow(example_sample[0] * 0.5 + 0.5)\n    plt.axis('off')\n\n    plt.subplot(122)\n    plt.title('Generated image')\n    plt.imshow(generated_sample[0] * 0.5 + 0.5)\n    plt.axis('off')\n    plt.show()","f090215d":"fig, axes = plt.subplots(4, 3, figsize=(22, (4 * 6)))\naxes = axes.flatten()\n\nds_iter = iter(photo_eval.skip(5).take(4))\nfor n_sample in range(4):\n    idx = n_sample * 3\n    example_sample = next(ds_iter)\n    monet_sample = monet_generator.predict(example_sample)\n    photo_sample = photo_generator.predict(monet_sample)\n\n    axes[idx].set_title('Input image', fontsize=18)\n    axes[idx].imshow(example_sample[0] * 0.5 + 0.5)\n    axes[idx].axis('off')\n\n    axes[idx + 1].set_title('Generated image', fontsize=18)\n    axes[idx + 1].imshow(monet_sample[0] * 0.5 + 0.5)\n    axes[idx + 1].axis('off')\n\n    axes[idx + 2].set_title('Cycled image', fontsize=18)\n    axes[idx + 2].imshow(photo_sample[0] * 0.5 + 0.5)\n    axes[idx + 2].axis('off')\nplt.show()","e87e259f":"fig, axes = plt.subplots(4, 3, figsize=(22, (4 * 6)))\naxes = axes.flatten()\n\nds_iter = iter(monet_eval.skip(5).take(4))\nfor n_sample in range(4):\n    idx = n_sample * 3\n    example_sample = next(ds_iter)\n    photo_sample = monet_generator.predict(example_sample)\n    monet_sample = photo_generator.predict(photo_sample)\n\n    axes[idx].set_title('Input image', fontsize=18)\n    axes[idx].imshow(example_sample[0] * 0.5 + 0.5)\n    axes[idx].axis('off')\n\n    axes[idx + 1].set_title('Generated image', fontsize=18)\n    axes[idx + 1].imshow(photo_sample[0] * 0.5 + 0.5)\n    axes[idx + 1].axis('off')\n\n    axes[idx + 2].set_title('Cycled image', fontsize=18)\n    axes[idx + 2].imshow(monet_sample[0] * 0.5 + 0.5)\n    axes[idx + 2].axis('off')\nplt.show()","885f1215":"# Load Data","4eca981f":"# Set up TPU","1d847b64":"# Set up","5ba77620":"# Evaluate the cycle","2db402b1":"# Start Training","efa392ab":"# Import","a5cd7573":"# Display generated samples","cd64b94b":"# Fucntions"}}