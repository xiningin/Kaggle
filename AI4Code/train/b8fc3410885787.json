{"cell_type":{"7f9fe453":"code","45e4b456":"code","7e7f8024":"code","f5df7cd0":"code","d80833e5":"code","02617252":"code","d837d953":"code","b1e8eaa7":"code","0ae23e18":"markdown","487e84c6":"markdown","ed93d6fd":"markdown","c43c32d4":"markdown","0979baaa":"markdown","9ab449a0":"markdown","3d87e55b":"markdown","e6a0170e":"markdown","a4b87bcc":"markdown"},"source":{"7f9fe453":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# Halite environment was defined in v0.2.1\n!pip install 'kaggle-environments>=0.2.1'","45e4b456":"from kaggle_environments import evaluate, make\n\nenv = make(\"halite\", debug=True)\nenv.render()","7e7f8024":"import copy\nimport math\nimport pprint\nfrom random import choice, randint, shuffle\n\ndef get_col_row(size, pos):\n    return (pos % size, pos \/\/ size)\n\ndef get_to_pos(size, pos, direction):\n    col, row = get_col_row(size, pos)\n    if direction == \"NORTH\":\n        return pos - size if pos >= size else size ** 2 - size + col\n    elif direction == \"SOUTH\":\n        return col if pos + size >= size ** 2 else pos + size\n    elif direction == \"EAST\":\n        return pos + 1 if col < size - 1 else row * size\n    elif direction == \"WEST\":\n        return pos - 1 if col > 0 else (row + 1) * size - 1\n    \nclass Board:\n    def __init__(self, obs, config):\n        self.action = {}\n        self.obs = obs\n        self.config = config\n        size = config.size\n        \n        self.shipyards = [-1] * size ** 2\n        self.shipyards_by_uid = {}\n        self.ships = [None] * size ** 2\n        self.ships_by_uid = {}\n        self.possible_ships = [{} for _ in range(size ** 2)]\n        \n        for index, player in enumerate(obs.players):\n            _, shipyards, ships = player\n            for uid, pos in shipyards.items():\n                details = {\"player_index\": index, \"uid\": uid, \"pos\": pos}\n                self.shipyards_by_uid[uid] = details\n                self.shipyards[pos] = details\n            for uid, ship in ships.items():\n                pos, ship_halite = ship\n                details = {\"halite\": ship_halite, \"player_index\": index, \"uid\": uid, \"pos\": pos}\n                self.ships[pos] = details\n                self.ships_by_uid[uid] = details\n                for direction in [\"NORTH\", \"EAST\", \"SOUTH\", \"WEST\"]:\n                    self.possible_ships[get_to_pos(size, pos, direction)][uid] = details\n        \n        #pprint(self.possible_ships)\n    \n    def move(self, ship_uid, direction):\n        self.action[ship_uid] = direction\n        # Update the board.\n        self.__remove_possibles(ship_uid)\n        ship = self.ships_by_uid[ship_uid]\n        pos = ship[\"pos\"]\n        to_pos = get_to_pos(self.config.size, pos, direction)\n        ship[\"pos\"] = to_pos\n        self.ships[pos] = None\n        self.ships[to_pos] = ship\n    \n    def convert(self, ship_uid):\n        self.action[ship_uid] = \"CONVERT\"\n        # Update the board.\n        self.__remove_possibles(ship_uid)\n        pos = self.ships_by_uid[ship_uid][\"pos\"]\n        self.shipyards[pos] = self.obs.player\n        self.ships[pos] = None\n        del self.ships_by_uid[ship_uid]\n    \n    def spawn(self, shipyard_uid):\n        self.action[shipyard_uid] = \"SPAWN\"\n        # Update the board.\n        temp_uid = f\"Spawn_Ship_{shipyard_uid}\"\n        pos = self.shipyards_by_uid[shipyard_uid][\"pos\"]\n        details = {\"halite\": 0, \"player_index\": self.obs.player, \"uid\": temp_uid, \"pos\": pos}\n        self.ships[pos] = details\n        self.ships_by_uid = details\n    \n    def __remove_possibles(self, ship_uid):\n        pos = self.ships_by_uid[ship_uid][\"pos\"]\n        intended_deletes = []\n        for d in [\"NORTH\", \"EAST\", \"SOUTH\", \"WEST\"]:\n            to_pos = get_to_pos(self.config.size, pos, d)\n            intended_deletes.append(to_pos)\n        #print('Deleting possible positions:', intended_deletes,'for', self.ships_by_uid[ship_uid])\n        for d in [\"NORTH\", \"EAST\", \"SOUTH\", \"WEST\"]:\n            to_pos = get_to_pos(self.config.size, pos, d)\n            #print(\"Deleting to_pos:\",to_pos, \"for\", ship_uid)\n            #print(self.possible_ships[to_pos])\n            del self.possible_ships[to_pos][ship_uid]","f5df7cd0":"from random import choice\ndef random_agent(obs):\n    action = {}\n    ship_id = list(obs.players[obs.player][2].keys())[0]\n    ship_action = choice([\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\", None])\n    if ship_action is not None:\n        action[ship_id] = ship_action\n    return action","d80833e5":"import sys\nimport traceback\n\nDIRS = [\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"]\n\n# Each ship id will be assigned a state, one of COLLECT or DEPOSIT, which decides what it will do on a turn.\nstates = {}\n\nCOLLECT = \"collect\"\nDEPOSIT = \"deposit\"\n\n\ndef argmax(arr, key=None):\n    return arr.index(max(arr, key=key)) if key else arr.index(max(arr))\n\n\n# This function will not hold up in practice\n# E.g. cell getAdjacent(224) includes position 0, which is not adjacent\ndef getAdjacent(pos):return [\n    (pos - 15) % 225,\n    (pos + 15) % 225,\n    (pos +  1) % 225,\n    (pos -  1) % 225\n  ]\n\ndef getDirTo(fromPos, toPos):\n    fromY, fromX = divmod(fromPos, 15)\n    toY,   toX   = divmod(toPos,   15)\n\n    if fromY < toY: return \"SOUTH\"\n    if fromY > toY: return \"NORTH\"\n    if fromX < toX: return \"EAST\"\n    if fromX > toX: return \"WEST\"\n\n    \ndef greedy_agent(obs):\n    action = {}\n    player_halite, shipyards, ships = obs.players[obs.player]\n\n    for uid, shipyard in shipyards.items():\n        # Maintain one ship always\n        if len(ships) == 0:\n            action[uid] = \"SPAWN\"\n\n    for uid, ship in ships.items():\n        # Maintain one shipyard always\n        if len(shipyards) == 0:\n            action[uid] = \"CONVERT\"\n            continue\n\n        # If a ship was just made\n        if uid not in states: states[uid] = COLLECT\n\n        pos, halite = ship\n\n        if states[uid] == COLLECT:\n            if halite > 2500:\n                states[uid] = DEPOSIT\n\n            elif obs.halite[pos] < 100:\n                best = argmax(getAdjacent(pos), key=obs.halite.__getitem__)\n                action[uid] = DIRS[best]\n\n        if states[uid] == DEPOSIT:\n            if halite < 200: states[uid] = COLLECT\n\n            direction = getDirTo(pos, list(shipyards.values())[0])\n            if direction: action[uid] = direction\n            else: states[uid] = COLLECT\n\n    return action","02617252":"def get_planned_agent(min_turns_to_spawn=100, search_depth = 4):\n    def planned_agent(obs, config):\n        \"\"\"Central function for an agent.\n\n        Relevant properties of arguments:\n\n        obs: \n            halite: a one-dimensional list of the amount of halite in each board space\n\n            player: integer, player id, generally 0 or 1\n            \n            players: a list of players, where each is:\n                [halite, { 'shipyard_uid': position }, { 'ship_uid': [position, halite] }]\n\n            step: which turn we are on (counting up)\n\n        Should return a dictionary where the key is the unique identifier string of a ship\/shipyard\n        and action is one of \"CONVERT\", \"SPAWN\", \"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"\n        (\"SPAWN\" being only applicable to shipyards and the others only to ships).\n        \n        \"\"\"\n        # Using this to avoid later computations\n        genval = 1.0\n            \n        SHIP_MOVE_COST_RATIOS = []\n        genval = 1.0\n        for i in range(40):\n            SHIP_MOVE_COST_RATIOS.append(genval)\n            genval = genval * (1.0 - config.moveCost)\n        \n        reward = obs.players[obs.player][0]\n\n        player = obs.player\n        size = config.size\n        board_halite = obs.halite\n        board = Board(obs, config)\n        player_halite, shipyards, ship_items = obs.players[player]\n        shipyard_uids = list(shipyards.keys())\n        shipyards = list(shipyards.values())\n        \n        ships = []\n        ship_halite_by_pos = {}\n        ship_uids = {}\n        for ship_item in ship_items:\n            ship_pos = ship_items[ship_item][0]\n            ships.append(ship_pos)\n            ship_uids[ship_pos] = ship_item\n            ship_halite_by_pos[ship_pos] = ship_items[ship_item][1]\n        \n        action = {}\n        plans = []\n        updated_ships = []\n        \n        def get_col(pos):\n            \"\"\"Gets the column index of a position.\"\"\"\n            return pos % size\n\n        def get_row(pos):\n            \"\"\"Gets the row index of a position.\"\"\"\n            return pos \/\/ size\n\n        def get_col_row(pos):\n            \"\"\"Gets the column and row index of a position as a single tuple.\"\"\"\n            return (pos % size, pos \/\/ size)\n        \n        def manhattan_distance(pos1, pos2):\n            \"\"\"Gets the Manhattan distance between two positions, i.e.,\n            how many moves it would take a ship to move between them.\"\"\"\n            # E.g. for 17-size board, 0 and 17 are actually 1 apart\n            dx = manhattan_distance_single(pos1 % size, pos2 % size)\n            dy = manhattan_distance_single(pos1 \/\/ size, pos2 \/\/ size)\n            return dx + dy\n\n        def manhattan_distance_single(i1, i2):\n            \"\"\"Gets the distance in one dimension between two columns or two rows, including wraparound.\"\"\"\n            iMin = min(i1, i2)\n            iMax = max(i1, i2)\n            return min(iMax - iMin, iMin + size - iMax)\n        \n        def get_new_pos(pos, direction):\n            \"\"\"Gets the position that is the result of moving from the given position in the given direction.\"\"\"\n            col, row = get_col_row(pos)\n            if direction == \"NORTH\":\n                return pos - size if pos >= size else size ** 2 - size + col\n            elif direction == \"SOUTH\":\n                return col if pos + size >= size ** 2 else pos + size\n            elif direction == \"EAST\":\n                return pos + 1 if col < size - 1 else row * size\n            elif direction == \"WEST\":\n                return pos - 1 if col > 0 else (row + 1) * size - 1\n\n        def get_neighbors(pos):\n            \"\"\"Returns the possible destination positions from the given one, in the order N\/S\/E\/W.\"\"\"\n            neighbors = []\n            col, row = get_col_row(pos)\n            neighbors.append(get_new_pos(pos, \"NORTH\"))\n            neighbors.append(get_new_pos(pos, \"SOUTH\"))\n            neighbors.append(get_new_pos(pos, \"EAST\"))\n            neighbors.append(get_new_pos(pos, \"WEST\"))\n            return neighbors\n\n        def get_direction(from_pos, to_pos):\n            \"\"\"Gets the direction from one space to another, i.e., which direction a ship\n            would have to move to get from from_pos to to_pos.\n            \n            Note this function will throw an error if used with non-adjacent spaces, so use carefully.\"\"\"\n            if from_pos == to_pos:\n                return None\n            \n            neighbors = get_neighbors(from_pos)\n            if to_pos == neighbors[0]:\n                return \"NORTH\"\n            elif to_pos == neighbors[1]:\n                return \"SOUTH\"\n            elif to_pos == neighbors[2]:\n                return \"EAST\"\n            elif to_pos == neighbors[3]:\n                return \"WEST\"\n            else:\n                print('From:', from_pos, 'neighbors:', neighbors)\n                raise Exception(\"Could not determine direction from \" + str(from_pos) + \" to \" + str(to_pos))\n        \n        def make_plans():\n            \"\"\"Populates the (existing) plans array with a set of paths for all ships.\"\"\"\n            plans.clear()\n\n            unplanned = copy.copy(ships)\n\n            # Start by taking care of any dropoffs at the shipyard\n            if (len(shipyards) == 1):\n                shipyard = shipyards[0]\n                for i in reversed(range(len(unplanned))):\n                    if unplanned[i] == shipyard and ship_halite_by_pos[shipyard] > 0:\n                        plans.append([shipyard, shipyard])\n                        unplanned.remove(shipyard)\n                        break\n            elif len(ships) == 1:\n                # Make initial shipyard\n                plans.append([ships[0], -1])\n                return\n            \n            while len(unplanned) > 0:\n                ship = unplanned.pop()\n\n                max_halite_result = get_max_halite_per_turn([ship], search_depth, ship_halite_by_pos[ship])\n                new_plan = [ship] if max_halite_result is None else max_halite_result[1]\n\n                # Failure modes for get_max_halite_per_turn:\n                # It doesn't necessarily return to the shipyard\n                if new_plan[-1] != shipyard:\n                    new_plan = get_safe_return_path(new_plan, shipyard)\n\n                # If it returns to the shipyard, it also need to stay there for dropoff\n                if new_plan[-1] == shipyard:\n                    new_plan.append(shipyard)\n                    \n                # It can give up and just stay put, but it doesn't add a space automatically\n                elif len(new_plan) == 1:\n                    new_plan.append(new_plan[0])\n                    if is_blocked(new_plan):\n                        # Critical failure - tried to stay put but somebody reserved this spot.\n                        # We should probably make THEM try something else instead.\n                        for plan_index in range(len(plans)):\n                            if len(plans[plan_index]) > 1 and plans[plan_index][1] == new_plan[1]:\n                                unplanned.append(plans[plan_index][0])\n                                plans.pop(plan_index)\n                                break\n                \n                plans.append(new_plan)            \n        \n        def current_cell_halite(pos, starting_halite, path):\n            \"\"\"Gets the amount of halite left in the current cell after the given ship path is run.\n            \n            Does not account for the actions of other ships.\n            \"\"\"\n            current_halite = starting_halite\n            for i in range(len(path)):\n                if i == 0:\n                    continue\n                p = path[i]\n                if path[i-1] == pos:\n                    current_halite = current_halite * 0.75\n            return current_halite\n        \n        def is_blocked(path):\n            \"\"\"Checks to see if the last step in a given path is blocked by an already planned one\"\"\"\n            for plan in plans:\n                if len(plan) >= len(path):\n                    if plan[len(path) - 1] == path[-1]:\n                        return True\n                    elif len(path) > 1 and plan[len(path) - 2] == path[-1] and plan[len(path) - 1] == path[-2]:\n                        return True\n            return False\n        \n        def get_max_halite_per_turn(path, max_depth, halite_so_far, blocked_spaces = None, debug = False):\n            \"\"\"Gets the most halite per turn possibly yielded by plans that go out to [max_depth] turns.\n            \n            Assumes if the plan does not end at the shipyard, we will then move along the shortest safe path to it.\n            \"\"\"\n            if max_depth == 0:\n                return (halite_so_far, copy.copy(path))\n            \n            next_positions = get_neighbors(path[-1])\n            next_positions.append(path[-1])\n\n            choices = []\n\n            for np in next_positions:\n                path.append(np)\n                if not is_blocked(path):\n                    new_halite = get_new_ship_halite(board_halite, path, shipyards[0], halite_so_far)\n                    choice = get_max_halite_per_turn(path, max_depth - 1, new_halite, blocked_spaces, debug)\n                    if not choice is None:\n                        choices.append(choice)\n                path.pop()\n            \n            # It is possible that we wound up in a terrible situation with no escape, including staying put\n            if len(choices) == 0:\n                return None\n            \n            best_choice = choices[0]\n            best_yield = get_yield_per_turn(best_choice[1], shipyards[0], best_choice[0])\n\n            for choice in choices[1:]:\n                new_yield = get_yield_per_turn(choice[1], shipyards[0], choice[0])\n                if debug:\n                    print(len(choice[1]), 'choice with yield', new_yield, choice[1])\n                if new_yield > best_yield:\n                    best_choice = choice\n                    best_yield = new_yield\n\n            current_yield = get_yield_per_turn(path, shipyards[0], halite_so_far)\n            if current_yield > best_yield:\n                if debug:\n                    print(len(path), 'current_yield of', current_yield, 'wins.')\n                return (halite_so_far, copy.copy(path))\n            else:\n                if debug:\n                    if (best_yield > 0):\n                        print(len(path), 'best yield:', best_yield,'length:', len(best_choice[1]), 'distance:', manhattan_distance(best_choice[1][-1], shipyard))\n                    else:\n                        print(len(path), 'best yield is nothing', best_choice[1])\n                return best_choice\n\n        def get_new_ship_halite(board_halite, path, shipyard, starting_halite):\n            \"\"\"Determines how much halite a ship will have after following the last step in this path.\n            \n            Assumes that the ship has already followed all prior steps and that starting_halite is whatever\n            the ship will have accumulated by then.\"\"\"\n            if len(path) <= 1:\n                return starting_halite\n            if (path[-1] == path[-2]):\n                if path[-1] == shipyard and starting_halite == 0.0:\n                    return -100.0 # Workaround to avoid idling at shipyard\n                cell_halite = current_cell_halite(path[-1], board_halite[path[-1]], path[:-1]) # Note: path[-1] because otherwise we count mining twice\n                new_halite = min(starting_halite + 0.25 * cell_halite, 1000.0)\n                return new_halite\n            else:\n                new_halite = starting_halite * (1.0 - config.moveCost)\n                return new_halite\n\n        def get_yield_per_turn(path, shipyard, halite):\n            \"\"\"Gets the yield, per turn, of halite following the given path.\"\"\"\n            if (path[-1] == shipyard):\n                if len(path) == 1:\n                    return halite\n            steps_to_dropoff = manhattan_distance(path[-1], shipyard)\n            total_steps = steps_to_dropoff + len(path) - 1 # path[0] is the start, not a turn\n            return halite * (SHIP_MOVE_COST_RATIOS[steps_to_dropoff]) \/ total_steps\n        \n        def get_direction(from_pos, to_pos):\n            \"\"\"Gets the direction from one space to another, i.e., which direction a ship\n            would have to move to get from from_pos to to_pos.\n            \n            Note this function will throw an error if used with non-adjacent spaces, so use carefully.\"\"\"\n            \n            if from_pos == to_pos:\n                return None\n            \n            neighbors = get_neighbors(from_pos)\n            if to_pos == neighbors[0]:\n                return \"NORTH\"\n            elif to_pos == neighbors[1]:\n                return \"SOUTH\"\n            elif to_pos == neighbors[2]:\n                return \"EAST\"\n            elif to_pos == neighbors[3]:\n                return \"WEST\"\n            else:\n                print('From:', from_pos, 'neighbors:', neighbors)\n                raise Exception(\"Could not determine direction from \" + str(from_pos) + \" to \" + str(to_pos))\n        \n        def get_shortest_path(from_path, to_pos):\n            \"\"\"Gets the shortest paths between two spaces, or at least one of the possible shortest paths, avoiding collisions.\"\"\"\n            \n            path = copy.copy(from_path)\n            \n            choices = []\n            \n            east = get_col(to_pos) - get_col(from_pos)\n            if east < 0:\n                east += size\n            west = get_col(from_pos) - get_col(to_pos)\n            if west < 0:\n                west += size\n\n            if west > 0 or east > 0:\n                if west < east:\n                    for i in range(west):\n                        path.append(get_new_pos(path[-1], \"WEST\"))\n                else:\n                    for i in range(east):\n                        path.append(get_new_pos(path[-1], \"EAST\"))\n            \n            north = get_row(from_pos) - get_row(to_pos)\n            if north < 0:\n                north += size\n            south = get_row(to_pos) - get_row(from_pos)\n            if south < 0:\n                south += size\n\n            if north < south:\n                for i in range(north):\n                    path.append(get_new_pos(path[-1], \"NORTH\"))\n            else:\n                for i in range(south):\n                    path.append(get_new_pos(path[-1], \"SOUTH\"))\n\n            return path\n        \n        def get_safe_return_path(path, to_pos, allowed_wait_steps=0):\n            \"\"\"Gets a return path to the spot, including waiting there (intended for shipyard dropoffs)\n            \n            Note this also pretty much breaks the passed-in path, so be careful when calling it.\n            \"\"\"\n            if allowed_wait_steps > 3:\n                return path\n            \n            result_path = get_safe_return_path_helper(copy.copy(path), to_pos, allowed_wait_steps)\n            \n            if not result_path is None:\n                return result_path\n            \n            return get_safe_return_path(path, to_pos, allowed_wait_steps + 1)\n            \n        def get_safe_return_path_helper(path, to_pos, allowed_wait_steps=0):\n            if path[-1] == to_pos and len(path) > 1 and path[-2] == to_pos:\n                return path\n            \n            choices = []\n            \n            from_pos = path[-1]\n            \n            east = get_col(to_pos) - get_col(from_pos)\n            if east < 0:\n                east += size\n            west = get_col(from_pos) - get_col(to_pos)\n            if west < 0:\n                west += size\n\n            if west > 0 and east > 0:\n                if west < east:\n                    choices.append(get_new_pos(from_pos, \"WEST\"))\n                else:\n                    choices.append(get_new_pos(from_pos, \"EAST\"))\n            \n            north = get_row(from_pos) - get_row(to_pos)\n            if north < 0:\n                north += size\n            south = get_row(to_pos) - get_row(from_pos)\n            if south < 0:\n                south += size\n\n            if north > 0 and south > 0:\n                if north < south:\n                    choices.append(get_new_pos(from_pos, \"NORTH\"))\n                else:\n                    choices.append(get_new_pos(from_pos, \"SOUTH\"))\n            \n            for choice in choices:\n                path.append(choice)\n                if not is_blocked(path):\n                    result = get_safe_return_path_helper(path, to_pos, allowed_wait_steps)\n                    if not result is None:\n                        return result\n                path.pop()\n                \n            if allowed_wait_steps > 0:\n                path.append(path[-1])\n                if not is_blocked(path):\n                    result = get_safe_return_path_helper(path, to_pos, allowed_wait_steps - 1)\n                    if not result is None:\n                        return result\n                path.pop()\n            \n            return None\n        \n        try:\n            make_plans()\n            #print('Plans:', plans)\n            for plan in plans:\n                if len(plan) > 1:\n                    if plan[1] == -1:\n                        action[ship_uids[plan[0]]] = \"CONVERT\"\n                    else:\n                        direction = get_direction(plan[0], plan[1])\n                        if not direction is None:\n                            action[ship_uids[plan[0]]] = direction\n                        updated_ships.append(plan[1])\n\n            # Spawn Ships (whenever possible).\n            if config.spawnCost <= reward and len(shipyards) == 1 and config.episodeSteps - obs.step >= min_turns_to_spawn and not shipyards[0] in updated_ships and not shipyards[0] in ships:\n                reward -= config.spawnCost\n                action[shipyard_uids[0]] = \"SPAWN\"\n\n            return action\n        except Exception as e:\n            print('Error!', e)\n            info = sys.exc_info()\n            print('Error:', info)\n            print('Traceback:', traceback.print_exception(*info))\n    return planned_agent","d837d953":"import sys\nimport traceback\nfrom pprint import pprint\n\ndef get_time_value_agent(time_value_ratio = 0.95, min_turns_to_spawn=20, max_ships = 200, spawn_payoff_factor = 8.0, debug = False):\n    \"\"\"Helper function to define an agent.\n    \n    Exists so I can pass different top-level attributes to agents with the same logic.\n    \n    Returns the central function for an agent (see immediately below).\n    \n    This particular bot is based on the premise of the 'time-value' of a resource,\n    where you assume that the value of harvesting a resource later is less than\n    the value of harvesting now (or conversely that the value of having it now\n    is higher than the value of having it later). Given some ratio R between 0 and 1,\n    you can consider the value of a ship harvesting X halite over T turns to be X * (R ** T).\n    \n    As you can also say that a ship that is Z moves away from the shipyard therefore\n    effectively will only harvest ((1 - move_cost) ** Z) halite, at any given time\n    you can calculate the present-turn value of a ship's halite, and therefore\n    determine which subsequent series of moves will maximize that value.\n    \n    Arguments to this function:\n    \n        time_value_ratio:\n            A number that should be between 0 and 1 and expresses how much less valuable an\n            equivalent amount of halite should be considered if it is received one turn later.\n            Note that I tried a lot of values for this before settling on 0.95, but it might\n            be worth changing if you also, say, plan longer paths.\n            \n        min_turns_to_spawn:\n            The agent will only spawn ships if at least this many turns are left in the game\n            (because at a certain point they presumably won't pay back their cost).\n        \n        max_ships:\n            The agent will not spawn more than this many ships at once.\n            (In practice I have not found this to be terribly useful, which is why the default\n            is so high.)\n\n        spawn_payoff_factor:\n            Used to calculate whether we think it's worth spawning another ship, assuming that\n            ship will gather an equal share of the remaining halite and drop it off, and\n            comparing that to the spawn cost. Higher values mean we need more expected payoff\n            and will therefore spawn fewer ships.\n            \n        debug:\n            If True, prints some general values on what the agent is doing.\n        \"\"\"\n    \n    def time_value_agent(obs, config):\n        \"\"\"Central function for an agent.\n\n        Relevant properties of arguments:\n\n        obs: \n            halite: a one-dimensional list of the amount of halite in each board space\n\n            player: integer, player id, generally 0 or 1\n            \n            players: a list of players, where each is:\n                [halite, { 'shipyard_uid': position }, { 'ship_uid': [position, halite] }]\n\n            step: which turn we are on (counting up)\n\n        Should return a dictionary where the key is the unique identifier string of a ship\/shipyard\n        and action is one of \"CONVERT\", \"SPAWN\", \"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"\n        (\"SPAWN\" being only applicable to shipyards and the others only to ships).\n        \n        \"\"\"\n        \n        # Purely for the convenience of shorter names\n        player = obs.player\n        size = config.size\n        halite = obs.halite\n        board = Board(obs, config)\n        player_halite, shipyards, ships = obs.players[player]\n        shipyards = list(shipyards.values())\n        \n        # Using this to avoid later, repeated computations\n        genval = 1.0\n        time_value_ratios = []\n        for i in range(40):\n            time_value_ratios.append(genval)\n            genval = genval * time_value_ratio\n            \n        ship_move_cost_ratios = []\n        genval = 1.0\n        for i in range(40):\n            ship_move_cost_ratios.append(genval)\n            genval = genval * (1.0 - config.moveCost)\n        \n        def get_col(pos):\n            \"\"\"Gets the column index of a position.\"\"\"\n            return pos % size\n\n        def get_row(pos):\n            \"\"\"Gets the row index of a position.\"\"\"\n            return pos \/\/ size\n\n        def get_col_row(pos):\n            \"\"\"Gets the column and row index of a position as a single tuple.\"\"\"\n            return (get_col(pos), get_row(pos))\n        \n        def manhattan_distance(pos1, pos2):\n            \"\"\"Gets the Manhattan distance between two positions, i.e.,\n            how many moves it would take a ship to move between them.\"\"\"\n            # E.g. for 17-size board, 0 and 17 are actually 1 apart\n            dx = manhattan_distance_single(get_col(pos1), get_col(pos2))\n            dy = manhattan_distance_single(get_row(pos1), get_row(pos2))\n            return dx + dy\n\n        def manhattan_distance_single(i1, i2):\n            \"\"\"Gets the distance in one dimension between two columns or two rows, including wraparound.\"\"\"\n            iMin = min(i1, i2)\n            iMax = max(i1, i2)\n            return min(iMax - iMin, iMin + size - iMax)\n        \n        def get_new_pos(pos, direction):\n            \"\"\"Gets the position that is the result of moving from the given position in the given direction.\"\"\"\n            col, row = get_col_row(pos)\n            if direction == \"NORTH\":\n                return pos - size if pos >= size else size ** 2 - size + col\n            elif direction == \"SOUTH\":\n                return col if pos + size >= size ** 2 else pos + size\n            elif direction == \"EAST\":\n                return pos + 1 if col < size - 1 else row * size\n            elif direction == \"WEST\":\n                return pos - 1 if col > 0 else (row + 1) * size - 1\n\n        def get_neighbors(pos):\n            \"\"\"Returns the possible destination positions from the given one, in the order N\/S\/E\/W.\"\"\"\n            neighbors = []\n            col, row = get_col_row(pos)\n            neighbors.append(get_new_pos(pos, \"NORTH\"))\n            neighbors.append(get_new_pos(pos, \"SOUTH\"))\n            neighbors.append(get_new_pos(pos, \"EAST\"))\n            neighbors.append(get_new_pos(pos, \"WEST\"))\n            return neighbors\n\n        def get_direction(from_pos, to_pos):\n            \"\"\"Gets the direction from one space to another, i.e., which direction a ship\n            would have to move to get from from_pos to to_pos.\n            \n            Note this function will throw an error if used with non-adjacent spaces, so use carefully.\"\"\"\n\n            # Special case to specify converting to a dropoff\n            if to_pos == -1:\n                return \"CONVERT\"\n\n            if from_pos == to_pos:\n                return None\n            \n            neighbors = get_neighbors(from_pos)\n            if to_pos == neighbors[0]:\n                return \"NORTH\"\n            elif to_pos == neighbors[1]:\n                return \"SOUTH\"\n            elif to_pos == neighbors[2]:\n                return \"EAST\"\n            elif to_pos == neighbors[3]:\n                return \"WEST\"\n            else:\n                print('From:', from_pos, 'neighbors:', neighbors)\n                raise Exception(\"Could not determine direction from \" + str(from_pos) + \" to \" + str(to_pos))\n        \n        def get_current_value(path, plans, starting_halite):\n            \"\"\"Figures out the time-value the ship will have at the end of the given path,\n            including loss of existing halite due to moving and gain of halite due to mining.\n            \n            Arguments:\n            \n                path:\n                    The planned path for this ship (of the same format as that returned by get_plans(...).\n                    \n                plans:\n                    The planned path for all OTHER ships owned by this agent (at least, those that it has\n                    generated plans for already - there may be others waiting to be planned).\n                    \n                starting_halite:\n                    The amount of halite this ship has at the start of the path.\n                \"\"\"\n            final_halite = starting_halite\n            delivered_halite = 0.0\n\n            # Track spaces we mine from during this path.\n            # Note that this ignores any mining that other ships do, which is suboptimal.\n            mined = {}\n\n            # This only checks the last space, so we need to be careful how we call this function.\n            if is_blocked(path, plans):\n                return -1\n\n            for i in range(1, len(path)):\n                if path[i] == path[i-1]:\n                    if path[i] in shipyards:\n                        # Dropoff - short-circuit, only lose time-value up to now\n                        total_value_loss = time_value_ratios[i]\n                        delivered_halite += final_halite * total_value_loss\n                        final_halite = 0.0\n                    else:\n                        mined_pos = path[i]\n                        mined_halite = obs.halite[path[i]] * 0.25\n                        if mined_pos in mined.keys():\n                            mined_halite = mined_halite * (0.75 ** mined[mined_pos])\n                        else:\n                            mined[mined_pos] = 0\n                            \n                        # Some slight fudging on rewards - we don't want to mine halite if it takes us below\n                        # the regen threshold, because we assume that will be worse in the long run.\n                        # This might turn out to be a bad plan in some situations, since it also\n                        # means our opponents can collect the new halite.\n                        #if mined_halite < 17:\n                        #    mined_halite = -10\n\n                        mined[mined_pos] += 1\n\n                        final_halite = final_halite + mined_halite\n                elif path[i] == -1:\n                    # Convert to dropoff, both the convert and spawn costs (including a\n                    # replacement ship), assuming we assign no value to having a dropoff.\n                    #\n                    # A good way to improve on this strategy would probably be to\n                    # come up with some estimate of the dropoff value based on the\n                    # change in time- and movement-based value of the available halite\n                    # around it (by virtue of how much quicker it would be to mine and\n                    # how much less would be lost while coming to the dropoff).\n                    final_halite = final_halite - config.moveCost - config.convertCost\n                    total_value_loss = time_value_ratios[i]\n                    delivered_halite += final_halite * total_value_loss\n                    final_halite = 0.0\n                else:\n                    final_halite = final_halite - final_halite * config.moveCost          \n\n            remaining_steps = distance_to_closest_dropoff(path[-1])\n            if remaining_steps + len(path) < len(time_value_ratios):\n                total_time_value_loss = time_value_ratios[remaining_steps + len(path)]\n            else:\n                total_time_value_loss = time_value_ratios[-1]\n                print(\"Tried to find a time_value_ratio past the end of the preculated list. This should only happen if you aren't pre-calculating enough of them. Path:\", path, \"Remaining Steps:\", remaining_steps)\n            \n            # Note the above counts an extra step from the path (since the first step is 'current location'),\n            # but we also need one extra for dropoff at the shipyard\n\n            total_movement_value_loss = ship_move_cost_ratios[remaining_steps]\n            \n            # In a sense, we can also say we are one more time-step away from a further harvest at this location.\n            potential_harvest = obs.halite[path[-1]] * 0.25 * time_value_ratios[len(path) + 1]\n            \n            # Technically this is simplistic - we could also say we're two time-steps away from two more harvests,\n            # the second of which is worth less than the first. We could say something similar about the value of\n            # adjacent spaces, which are really two steps away from being harvested. Possibly that would improve\n            # this strategy, although it would also make it harder to calculate.\n            # \n            # Just adding one step was a reasonable compromise between being fairly simple, but also making the\n            # agent appreciate paths that didn't involve harvesting, but took us to valuable spaces.\n            \n            if path[-1] in mined.keys():\n                potential_harvest = potential_harvest * (0.75 ** mined[path[-1]])\n\n            current_adjusted_value = (final_halite + potential_harvest) * total_movement_value_loss * total_time_value_loss + delivered_halite\n            \n            # As an alternate plan, we can always convert to a dropoff at the current space.\n            # That would effectively cost both the convert and spawn costs (assuming a replacement ship)\n            # but allow us to immediately receive the halite in the ship, which might be a better deal\n            # than whatever value loss is associated with the time and movement of carrying\n            # it back to the nearest shipyard\/dropoff.\n            potential_dropoff_value = final_halite - config.spawnCost - config.convertCost + delivered_halite\n            \n            return max(current_adjusted_value, potential_dropoff_value)\n\n        def distance_to_closest_dropoff(pos):\n            \"\"\"Determines the manhattan distance (number of moves) from the given position\n            to the nearest shipyard.\"\"\"\n            min_distance = size\n            \n            for d in shipyards:\n                if d == pos:\n                    return 0\n                distance = manhattan_distance(pos, d)\n                if distance < min_distance:\n                    min_distance = distance\n            \n            return min_distance\n        \n        def get_best_move(pos, plans, starting_halite = 0, path_so_far = None, max_depth = 3):\n            \"\"\"Figures out which move has the best time-value to its yield.\n            \n            This can be either because a particular move will get us to harvest more\n            in the next (max_depth) turns or because the value of heading toward the shipyard\n            is higher than anything else.\n\n            Returns the path of spaces to occupy, where the first item is always the starting space\n            and the subsequent spaces are the planned moves. (This may include the starting space multiple times,\n            if mining is the optimal move.)\n\n            Avoids intersecting with any existing plans, unless stuck and also about to be crashed into.\n            In that case the calling function should force the other ship to change.\n            \n            This function calls itself recursively to explore all of the complete plans of [max_depth] moves.\n            \n            Arguments:\n            \n            pos:\n                Current position of the ship.\n            \n            plans:\n                List of existing plans (see make_plans(...) below for details).\n            \n            starting_halite:\n                How much halite the ship is carrying at the start of the path\n                (note that this does not change as the function recurses)\n            \n            path_so_far:\n                A partial path for the ship (gets added to on recursive calls).\n            \n            max_depth:\n                How many more steps to add to the path.\n                \n            Increasing default max_depth would presumably make the agent perform better -\n            it'll be making more complex plans out into the future - but any value\n            past about 5 or 6 will also probably be impossible to calculate in time.\n            \"\"\"\n            if path_so_far is None:\n                path_so_far = [pos]\n            else:\n                if is_blocked(path_so_far, plans):\n                    return None\n\n            # Dropoff conversion\n            if path_so_far[-1] == -1:\n                return copy.copy(path_so_far)\n\n            if max_depth == 0:\n                return copy.copy(path_so_far)\n            \n            next_pos_choices = get_neighbors(pos)\n            next_pos_choices.append(pos)\n            next_pos_choices.append(-1) # Used to represent dropoff conversion\n\n            choices = []\n\n            for next_pos in next_pos_choices:\n                path_so_far.append(next_pos)\n\n                best_move = get_best_move(next_pos, plans, starting_halite, path_so_far, max_depth - 1)\n\n                if not best_move is None:\n                    choices.append(best_move)\n                \n                path_so_far.pop()\n\n            best_value = -1\n            best_choice = None\n\n            for choice in choices:\n                value = get_current_value(choice, plans, starting_halite)\n                if value > best_value:\n                    best_value = value\n                    best_choice = choice\n            \n            if not best_choice is None:\n                return best_choice\n            else:\n                return [path_so_far[0], path_so_far[0]]\n            \n        def make_plans():\n            \"\"\"\n            Generates a list of plans for how the ships should behave for the current turn\n            (and several subsequent turns).\n            \n            Each plan is expressed as a list of integer board positions, where the\n            first entry in the list is the CURRENT ship space (and thus not a move)\n            and the subsequent entries in the list are where the agent plans on\n            having the ship on the next and subsequent turns.\n\n            If two values in a row are the same, that indicates the ship is mining\n            (or dropping off resources at a shipyard\/dropoff).\n\n            The value \"-1\" is used as a special placeholder for indicating that\n            the ship will convert to a shipyard.\n            \n            Note that this function is rerun every turn, so really only the first two values\n            in the list apply, but each plan is chosen because it is expected to produce\n            the maximum value after all steps are completed. (Therefore, in the event of\n            strange behavior, it may be helpful to look at the full plans to see why the\n            agent thought a particular move was a good idea.)\n            \"\"\"\n            plans = []\n\n            unplanned = []\n            \n            for shipData in ships.values():\n                pos, ship_halite = shipData\n                unplanned.append(pos)\n                \n            # Clumsy default to just turn the first ship into a shipyard immediately.\n            if len(ships) == 1 and len(shipyards) == 0 and player_halite > config.spawnCost + config.convertCost and len(shipyards) == 0:\n                return [[unplanned[0], -1]]\n            \n            # Start by taking care of any dropoffs, which are basically always the best move.\n            for i in reversed(range(len(unplanned))):\n                if unplanned[i] in shipyards and board.ships[unplanned[i]][\"halite\"] > 0:\n                    plans.append([unplanned[i], unplanned[i]])\n                    unplanned.pop(i)\n                    break\n            \n            while len(unplanned) > 0:\n                ship = unplanned.pop()\n                best_ship_path = get_best_move(ship, plans, board.ships[ship][\"halite\"])\n                \n                if debug:\n                    print('Best path:', best_ship_path, 'value:', get_current_value(best_ship_path, plans, board.ships[ship][\"halite\"]))\n\n                # Should only be true if we gave up finding a path and stayed put,\n                # but somebody else already plans on moving through this space.\n                #\n                # To solve this, we will stay put, AND force that ship to find a new plan.\n                if is_blocked(best_ship_path, plans):\n                    for plan_index in range(len(plans)):\n                        if len(plans[plan_index]) > 1 and plans[plan_index][1] == best_ship_path[1]:\n                            unplanned.append(plans[plan_index][0])\n                            plans.pop(plan_index)\n                            break\n                \n                plans.append(best_ship_path)\n            \n            return plans\n        \n        def is_blocked(path, plans):\n            \"\"\"Checks to see if a specific path is blocked by one in the existing plans,\n            i.e., they end at the same place, or they try to move through one another.\n            \n            Note that this does NOT check whether the plans would intersect at some\n            space PRIOR to the last index of the path argument. It is intended to\n            be used incrementally as the path is constructed.\"\"\"\n            \n            # Conversion can't be blocked (and two ships might be doing it at once)\n            if path[-1] == -1:\n                return False\n            \n            for plan in plans:\n                if len(plan) >= len(path):\n                    if plan[len(path) - 1] == path[-1]:\n                        return True\n                    elif len(path) > 1 and plan[len(path) - 2] == path[-1] and plan[len(path) - 1] == path[-2]:\n                        return True\n            return False\n        \n        try:\n            plans = make_plans()\n            if debug:\n                print('Plans:', plans)\n                \n            action = {}\n            \n            # Where the ships will be after the next step\n            updated_ships = []\n            \n            for plan in plans:\n                if len(plan) > 1:\n                    if plan[0] != plan[1]:\n                        shipUid = board.ships[plan[0]][\"uid\"]\n                        if plan[1] == -1:\n                            action[shipUid] = \"CONVERT\"\n                        else:\n                            direction = get_direction(plan[0], plan[1])\n                            action[shipUid] = direction\n                    if plan[1] != -1:\n                        updated_ships.append(plan[1])\n\n            ship_count = len(ships)\n            remaining_halite = sum(obs.halite)\n\n            # See if we should also spawn a ship.\n            # \n            # Note we do this if hard requirements are met (shipyard isn't occupied, we have enough halite)\n            # but also with some additional limits, including an assumption that we shouldn't spawn a ship\n            # if there isn't enough halite on the board to expect it to pay off.\n            #\n            # This calculation is very rough - it assumes each of our ships captures an equal amount of the\n            # remaining halite (presumably very false if there is an active opponent) and ignores the fact\n            # that we will lose some of that halite in transit. This strategy might do better if we make\n            # more strict assumptions. On the other hand, it may be that we should consider the value of\n            # blocking an opponent from mining even if we don't capture that value ourselves.\n            for shipyard in shipyards:\n                if (config.spawnCost <= player_halite and \n                    config.episodeSteps - obs.step >= min_turns_to_spawn and\n                    not shipyard in updated_ships and\n                    ship_count < max_ships and\n                    (ship_count == 0 or remaining_halite \/ (ship_count + 1) > config.spawnCost * spawn_payoff_factor)):\n                    ship_count += 1\n                    player_halite -= config.spawnCost\n                    action[board.shipyards[shipyard][\"uid\"]] = \"SPAWN\"\n            \n            if debug:\n                print('Action:', action)\n            return action\n        except Exception as e:\n            info = sys.exc_info()\n            print(traceback.print_exception(*info))\n    \n    return time_value_agent","b1e8eaa7":"agents = {\"random\": random_agent, 'greedy': greedy_agent, 'timevalue': get_time_value_agent(), 'planned': get_planned_agent() }\n\nenv.agents = agents\nresult = env.run([\"timevalue\", \"greedy\"])\nscores = [result[-1][0][\"reward\"], result[-1][1][\"reward\"]]\nprint(scores)\n\nenv.render(mode=\"ipython\", width=800, height=600)","0ae23e18":"# Testing Agents","487e84c6":"# Create Halite Environment","ed93d6fd":"# Greedy Agent\n\nAs included in the \"Halite Basic Greedy Agent\" notebook.","c43c32d4":"# Random Agent\n\nAs included in the Getting Started notebook. For benchmarking.","0979baaa":"# Planned Agent\nThis is a fairly straightforward (but not very good) agent that just goes through each ship it has, and tries to figure out which plan will yield the most halite over the next several turns by exhaustively searching all possible paths. I mostly kept it around to verify that the \"time-value agent\", below, easily beats it. If that stops being true, something is probably broken.\n\nThe obvious weaknesses of this bot are:\n\n- It takes way too much processing time once the number of ships gets big. You could reduce this by reducing its planning depth, but it's possible it will just perform poorly as a result.\n- It's particularly bad about going long distances to get halite, even though it searches to a greater depth than the \"time-value agent\"\n- It assumes that at the end of the search period, the ship will basically always make a beeline for the shipyard (which might be a bad plan in some situations).\n\nIt basically also shares every weakness of the time-value agent.","9ab449a0":"# Install kaggle-environments","3d87e55b":"# Introduction\nThis notebook contains a couple of example rules-based agents for Halite.\n\nAs you will see, neither of them is actually using any form of learning. They are intended to be examples of fairly intuitive strategies that mostly boil down to \"grab as much halite as you can, as quickly as you can\".\n\nI doubt either of them will earn a particularly high rank in the competition, but they may be useful test opponents for more complex strategies.\n\nI have tried to make the code relatively clear, but there may still be some rough edges or comments that don't quite match up, so please let me know if you find anything that's off.","e6a0170e":"# Time-Value Agent\n\nThis is a decent baseline agent that is built around the concept (commonly used in investment) that money or similar resources have a \"time-value\". For example, if you are earning 5% return on your financial investments, then a 2020 dollar is worth $1.05 dollars in 2021.\n\nApplying a similar concept here, we assign some rate at which halite decays in value over time (default to losing 5% of its value every turn). In addition, we understand halite in a ship to be worth less based on how many turns it would take to deliver it to a shipyard (losing both the movement cost and the time-value over the expected return trip).\n\nThis agent has some things in common with the \"Planned Agent\" - both effectively are performing a recursive search over the possible moves of each ship. However, unlike that agent, which really only understands success in terms of the delivery of halite to the shipyard, this bot understands the value of intermediate states, and can therefore only search a much smaller set of future moves while at the same time making more reasonable tradeoffs between things like \"stay here and mine another 500 halite\" vs. \"move closer to the shipyard\".\n\nIt has a much higher tendency to wander away from the shipyard if it finds a resource-rich spot, so I gave it the ability to recognize when it would be more valuable to convert a ship than to cart all of the halite home, by assuming that its resource yield is the greater of [the current-time value of the halite it has if it were to cart it to the nearest shipyard] and [the yield after converting in place and then building a new ship to replace this one]. Note that it doesn't need to perform this conversion immediately - it can still plan more movement and harvesting knowing that at any time it can convert.\n\nThere are a couple of parameters that might be worth tweaking - I optimized them based on the assumption of a 400-turn game and a 30,000 halite, 17-length board with 2 players. They are explained below, but, other than the time-value ratio, are mostly related to limits on building more ships (on the assumption that there's no point in building them if they won't recoup their cost).\n\nPotential weaknesses:\n\n- Like the \"planned agent\", it only avoids colliding with its own ships, and completely disregards those of other players.\n- Although it does in some situations create new shipyards, it doesn't assign any value to actually having shipyards, whether as a source of more ships, to reduce dropoff congestion, or to be close to areas of high resources (although it often does tend to place them near distant resource clusters as a consequence of the math). It similarly doesn't recognize that in some scenarios, converting might also increase the effective value of the halite in nearby ships.\n- Similarly, basically assigns no value to having ships (and uses other, clumsier mechanisms for deciding when to stop building them).\n- Again like the \"planned agent\", it treats each ship as an individual. Other than avoiding crashing into its own ships, it doesn't attempt to coordinate them in some kind of mutually-beneficial way.\n- It just immediately places a shipyard on the first turn, even though it might make more sense to locate it elsewhere.\n\nThese are also noted in the comments below where relevant, along with a couple suggested changes that might be worth exploring.","a4b87bcc":"# Helpers"}}