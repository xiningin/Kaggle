{"cell_type":{"eb89b9bf":"code","ec082ddf":"code","cda4b58e":"code","aaf5a25b":"code","fd41ddeb":"code","c45eea8d":"code","a50eb79c":"code","f7a872df":"code","385baa1e":"code","13aa88a9":"code","d2f87b9c":"code","5d148421":"markdown","fd825ab1":"markdown"},"source":{"eb89b9bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport seaborn as sns\nimport random\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\nfrom kaggle.competitions import nflrush\n\n# Any results you write to the current directory are saved as output.\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (12, 6)","ec082ddf":"def calculate_distance(row):\n    return np.sqrt((row['X'] - row['X_Rusher'])**2 + (row['Y'] - row['Y_Rusher'])**2)\n\ndef preprocess_play(df, play_id, cols=None):\n    play_df = df.loc[df['PlayId'] == play_id].copy()\n    play_df['Dis_from_Rusher'] = play_df.apply(lambda row: calculate_distance(row), axis=1)\n    \n    if cols:\n        play_df = play_df[cols]\n    return play_df\n\ndef create_field_points(points, deltas):\n    s, e = points\n    delta_x, delta_y = deltas\n    x = []\n    y = []\n    for i in range(1, 10+1):\n        x.extend([delta_x*i, delta_x*i])\n        if i%2:\n            y.extend([int(not (i%2))*delta_y, int(not (i%2))*delta_y + delta_y])\n        else:\n            y.extend([int(not (i%2))*delta_y, int(not (i%2))*delta_y - delta_y])\n            \n    return x, y","cda4b58e":"def draw_field(ax, play_id):\n    rect = patches.Rectangle((0, 0), 120, 53.3, fc='seagreen', ec='w', zorder=0)\n    ax.add_patch(rect)\n\n    ez_left = patches.Rectangle((0, 0), 10, 53.3, fc='grey', zorder=1)\n    ax.add_patch(ez_left)\n    plt.text(5, 34, 'HOME ENDZONE', horizontalalignment='center', fontdict=dict(color='yellow', fontsize=14, rotation=90))\n\n    ez_right = patches.Rectangle((110, 0), 10, 53.3, fc='grey', zorder=1)\n    ax.add_patch(ez_right)\n    plt.text(115, 35, 'VISITOR ENDZONE', horizontalalignment='center', fontdict=dict(color='yellow', fontsize=14, rotation=270))\n\n    x_values, y_values = create_field_points((0, 0), (10, 53.3))\n    plt.plot(x_values, y_values, color='white', linewidth=1)\n    \n    plt.xlim(0, 120)\n    plt.ylim(0, 53.3)\n\n    plt.text(10+0.5, 3, 'G', fontdict=dict(color='w', size=14))\n    plt.text(10+0.5, 53.3-3, 'G', fontdict=dict(color='w', size=14, rotation=180))\n\n    for i in range(1, 10):\n        label = i*10 if i<=5 else ((10-i))*10\n        plt.text((i+1)*10, 3, label, fontdict=dict(color='w', size=14))\n        plt.text((i+1)*10, 53.3-3, label, fontdict=dict(color='w', size=14, rotation=180))\n\n    plt.text(110-3, 3, 'G', fontdict=dict(color='w', size=14))\n    plt.text(110-3, 53.3-3, 'G', fontdict=dict(color='w', size=14, rotation=180))\n\n    plt.axis('off')\n    plt.tight_layout()\n    \n    play_df = preprocess_play(df, play_id)\n    plot_play(play_df)\n    return fig, ax\n\ndef plot_play(play_df):\n    play_df[play_df.Team == 'home'].plot('X', 'Y', kind='scatter', ax=ax, color='darkblue')\n    play_df[play_df.Team == 'away'].plot('X', 'Y', kind='scatter', ax=ax, color='red')\n    play_df[play_df.IsRusher].plot('X', 'Y', kind='scatter', ax=ax, s=50, color='yellow')\n\n    yard_line = int(play_df['YardLine'].unique()[0])\n    plt.plot([yard_line + 10]*2, [0, 53.3], '--', color='yellow', linewidth=2)\n    plt.text(yard_line + 10 + 1, 10, 'YardLine at ' + str(yard_line), fontdict=dict(color='black', size=14))\n\ndef get_longest_running_plays(gameId, colors):\n    game_df = df.loc[(df['GameId'] == gameId) & (df.IsRusher)].reset_index(drop=True)\n    game_df['TimeSnap_next'] = list(game_df.loc[[min(len(game_df), i+1) for i, j in enumerate(game_df.index)]]['TimeSnap'].values)\n    game_df['TimeSnap_next'] = game_df['TimeSnap_next'].dt.tz_localize('UTC')\n    game_df['PlayDuration'] = (game_df['TimeSnap_next'] - game_df['TimeSnap']) \/ np.timedelta64(1,'s')\n    \n    game_df = game_df.loc[~game_df['PlayDuration'].isnull()].sort_values(by=['PlayDuration'], ascending=False)\n    game_df['PlayDuration'] = game_df['PlayDuration'].astype(int)\n    game_df['PlayDuration_scaled'] = (game_df['PlayDuration'] - game_df['PlayDuration'].min()) \/ (game_df['PlayDuration'].max() - game_df['PlayDuration'].min())\n\n    red, green, blue = colors\n    game_df['red'] = [red] * len(game_df)\n    game_df['green'] = [green] * len(game_df)\n    game_df['blue'] = [blue] * len(game_df)\n\n    for c in ['red', 'green', 'blue']:\n        game_df[c] = game_df.apply(lambda x: x[c] * (x['PlayDuration'] \/ game_df['PlayDuration'].max()), axis=1)\n        game_df[c] = game_df[c].astype(int)\n\n    game_df['color1'] = game_df.apply(lambda x: '#%02X%02X%02X' % (x.red, x.green, x.blue), axis=1)\n    return game_df","aaf5a25b":"target = 'Yards'\ndata_dir = '\/kaggle\/input\/nfl-big-data-bowl-2020\/'\nr = lambda: random.randint(0,255)  #'#%02X%02X%02X' % (red, green, blue)","fd41ddeb":"df = pd.read_csv(f\"{data_dir}\/train.csv\", low_memory=False)\ndf['TimeHandoff'] = pd.to_datetime(df['TimeHandoff'])\ndf['TimeSnap'] = pd.to_datetime(df['TimeSnap'])","c45eea8d":"df['IsRusher'] = df['NflId'] == df['NflIdRusher']\nrusher_df = df[df.IsRusher]\ndf = df.merge(rusher_df[['GameId', 'PlayId', 'X', 'Y']], how='left', on=['GameId', 'PlayId'], suffixes=('', '_Rusher'))","a50eb79c":"np.random.seed(0)\n#game_id = np.random.choice(df['GameId'])\ngame_id = 2017121707\n\ngame_df = get_longest_running_plays(game_id, (34, 46, 213))\n\n# d = game_df['PlayDuration'][:10]\n# indx = np.arange(len(d))\n# fig, ax = plt.subplots(figsize=(8, 6))\n# ax.barh(indx, d, 0.85, color=list(game_df.loc[d.index, 'color1']))\n# plt.yticks(indx, list(game_df.loc[d.index, 'PlayId']))\n# ax.set_title(f'Play duration for game {game_id}')\n# plt.show()","f7a872df":"df.columns","385baa1e":"fig, ax = plt.subplots(1, figsize=(10, 5))\nfig, ax = draw_field(ax, 20171217070078)\nplt.show()","13aa88a9":"play_df = preprocess_play(df, 20171217070078)\nplay_df[['X', 'Y', 'S', 'A', 'Dis', 'Orientation', 'Dir', 'Team', \n         'JerseyNumber', 'Position', 'HomeTeamAbbr', 'VisitorTeamAbbr', \n         'PlayDirection']]","d2f87b9c":"fig, ax = plt.subplots(figsize=(8, 5))\nplay_df[play_df.Team == 'home'].plot('X', 'Y', kind='scatter', ax=ax, s=50, color='blue')\nplay_df[play_df.Team == 'away'].plot('X', 'Y', kind='scatter', ax=ax, s=50, color='red')\nplt.xlim(0, 100)\nplt.ylim(0, 53.3)\nplt.show()","5d148421":"### Draw field","fd825ab1":"### Longest running plays in a game"}}