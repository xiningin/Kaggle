{"cell_type":{"ba8451c8":"code","5048282f":"code","8b81e0ab":"code","fc1d9d1f":"code","4edaaa03":"code","a2ecf635":"code","ff8c00ab":"code","19cafc5a":"code","23d9fc6b":"code","5e7aa884":"code","ec882a2d":"code","4aa990b2":"code","3f261d24":"code","0988eb5d":"code","783abf97":"code","8c34d5f7":"code","8fd9b618":"code","9a2f4f9f":"markdown"},"source":{"ba8451c8":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import SMOTE","5048282f":"data = pd.read_csv('..\/input\/train.csv')\ndata.head()","8b81e0ab":"data.info()","fc1d9d1f":"data.describe()","4edaaa03":"#checking target column\nsns.countplot(data['target'])","a2ecf635":"#checking for null values\ndata.columns[data.isnull().any()]","ff8c00ab":"#checking count for possible values of target\ndata.groupby('target').count()['ID_code']","19cafc5a":"y = data['target']\nX = data.drop(['target', 'ID_code'], axis=1)\n\n#scaling dataset\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X)\nX_scaled = sc.transform(X)\nX_scaled = pd.DataFrame(X_scaled, columns=X.columns)\nX_scaled.head()","23d9fc6b":"#splitting dataset into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=101, stratify=y)\nX_train.head()","5e7aa884":"X_train.shape, X_test.shape","ec882a2d":"#using random forests\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\npredictionRFC = rfc.predict_proba(X_test)\npredictionRFC","4aa990b2":"#probability that a customer will make this transaction (target class 1)\nprob = [1 - item[0] for item in predictionRFC] \nprob[:5]","3f261d24":"#evaluating performance of the model\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, prob)","0988eb5d":"#loading test dataset\ntest = pd.read_csv('..\/input\/test.csv')\ntest.head()","783abf97":"#making prediction on test dataset\ntest_ID = test['ID_code']\ntest_sc = test.drop(['ID_code'], axis=1)\ntest_scaled = sc.transform(test_sc)\n#test_scaled = pd.DataFrame(test_scaled, columns = test_sc.columns)\npredicted = pd.DataFrame([1 - item[0] for item in rfc.predict_proba(test_scaled)])\npredicted.rename(columns={0: 'target'}, inplace=True)\npredicted_output = pd.concat([test_ID, predicted['target']], axis=1)\npredicted_output.head()","8c34d5f7":"#resampling imbalanced dataset using SMOTE\/ADASYN\n#sm = SMOTE(random_state=12, ratio = 1.0)\n#X_train_res, y_train_res = sm.fit_sample(X_train_scaled, y_train)\n#type(X_train_res), type(y_train_res)","8fd9b618":"predicted_output.to_csv('PredictedRFC', index=False)","9a2f4f9f":"This model predicts whether a customer will make a transaction in the future."}}