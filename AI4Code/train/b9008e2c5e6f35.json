{"cell_type":{"32bced79":"code","f925e887":"code","ad07a537":"code","ad9257d6":"code","898202e2":"code","bf54ae5e":"code","2da21ba6":"code","182c5d3b":"code","30783737":"code","ad4f5cba":"code","d1114011":"code","bfabd965":"code","75743e1b":"code","2f12458f":"code","229914ea":"code","e95447ad":"code","192750cc":"code","8550e1ee":"code","0d0e3920":"code","5e078466":"code","6ff4b9bf":"code","5e4b67a0":"code","3825257c":"code","60c239f4":"code","fc9c00e6":"code","eab5bf8d":"code","53a884d2":"code","33c804c6":"code","33a35343":"code","3b1aae64":"code","d4ce8f10":"code","5330c491":"code","51911bd1":"code","f9f41678":"code","2d7d4b0e":"code","d267a3fb":"code","01791e7a":"code","634d896e":"code","bffae569":"markdown"},"source":{"32bced79":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport pydicom \nfrom pydicom.data import get_testdata_files \nfrom pydicom.pixel_data_handlers.util import apply_voi_lut","f925e887":"train_image_level = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv')\ntrain_study_level = pd.read_csv('\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv')","ad07a537":"train_image_level.head()","ad9257d6":"train_study_level.head()","898202e2":"import numpy as np\ntr = train_study_level\nts = np.array(tr[: : ])\ntr['classes'] = [0 for i in range(len(tr))]\ncl = ['Negative for Pneumonia','Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']\nfor i in range(len(ts)):\n    tem = ts[i]\n    for j in range(1,5):\n        if tem[j] == 1: \n            tr['classes'][i] = cl[j-1]\n            ","bf54ae5e":"tr.head()","2da21ba6":"ty = 0 \nat = 0\nne = 0\nind = 0\nnn = 0\nfor i in range(len(tr)):\n    if tr['classes'][i] == 'Typical Appearance':\n        ty = ty + 1\n    elif tr['classes'][i] == 'Atypical Appearance':\n        at = at + 1\n    elif tr['classes'][i] == 'Negative for Pneumonia':\n        ne = ne + 1\n    elif tr['classes'][i] == 'Indeterminate Appearance' : \n        ind = ind + 1\n    else : \n        nn = nn + 1\ny = [int(ty),int(at),int(ne),int(ind)]\nplt.figure(figsize= (12,12))\nplt.bar(cl,y)\n","182c5d3b":"len(train_image_level['boxes'])","30783737":"train_image_level['label'][0]","ad4f5cba":" \ns = train_image_level['StudyInstanceUID'][0]\ns = s + '_study'\nlist(train_study_level['id']).index(s)","d1114011":"train_study_level['id'][2018]","bfabd965":"import cv2\nimport os\nimport pydicom\nimport glob\n#import gdcm \ninputdir = '\/kaggle\/input\/siim-covid19-detection\/test\/2fb11712bc93\/b056067b8455\/'\noutdir = '.\/'\n#os.mkdir(outdir)\ndef dicom_read(path, voi_lut = True, fix_monochrome= True):\n    dic = pydicom.read_file(path)\n    \n    if voi_lut : \n        data = apply_voi_lut(dic.pixel_array, dic)\n    \n    elif fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n        data = data - np.min(data)\n        data = data \/ np.max(data)\n        data = (data * 255).astype(np.uint8)\n    else : \n        data = dic.pixel_array\n    return data\n","75743e1b":"from fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfs = get_dicom_files('\/kaggle\/input\/siim-covid19-detection\/test')\nfs[10]\nds = dicom_read(fs[110])\nplt.figure(figsize= (12,12))\nplt.imshow(ds,cmap=plt.cm.bone)","2f12458f":"train_data = get_dicom_files('\/kaggle\/input\/siim-covid19-detection\/train')\ndr = dicom_read(train_data[116])\nplt.figure(figsize= (12,12))\nplt.imshow(dr,cmap=plt.cm.bone)\nimage= cv2.imread(str(train_data[116]),0)\nlabels = train_image_level['label']\nboxes = train_image_level['boxes']\nprint(boxes[111])\n#cv2.rectangle(image,)","229914ea":"classes = train_study_level.columns\nstudy_class = (classes[1:5])\nstudy_class[3]\nimage_class = ['none', 'opacity']","e95447ad":"box = boxes[116]","192750cc":"import numpy as np \ndef boxes_params(box):\n    \n    bx = box.split(\"},\")\n    #print(len(bx))  # no of boxes\n    n = len(bx)\n    x = []\n    y= []\n    width = []\n    height= []\n    for i in range(n):\n        b = bx[i]\n        #print(b.split(','))\n        bxx= b.split(',')\n    \n        for i in range(1):\n            #print()\n            x.append(float(bxx[0].split(\":\")[1]))\n            y.append(float(bxx[1].split(\":\")[1]))\n            width.append(float(bxx[2].split(\":\")[1]))\n            height.append(float(bxx[3].strip('}]').split(\":\")[1]))\n    return (x,y,width,height,n)\nx,y,w,h,n = boxes_params(box)","8550e1ee":"# x,y,w,h,n","0d0e3920":"import cv2\ndef dicom_display(di,a,b,c,d,n):\n    ima = dicom_read(di)\n    for i in range(n):\n    \n        start = (int(a[i]),int(b[i]))\n        end = (int(c[i]), int(d[i]))\n        color = (255,0,0)\n        thickness = 7\n    \n    \n        im = cv2.rectangle(ima,start,end,color,thickness)\n    plt.figure(figsize=(5,5))\n    plt.imshow(im, cmap=plt.cm.bone )\ndicom_display(train_data[0],x,y,w,h,n)","5e078466":"# start = (int(x[0]),int(y[0]))\n# end = (int(w[0]), int(h[0]))\n# color = (255,0,0)\n# thickness = 5\n# print(str(train_data[116]))\n# ima = dicom_read(train_data[116])\n\n# #image= cv2.imread(ima)\n\n# im ='\/kaggle\/input\/siim-covid19-detection\/test\/004bd59708be\/e7d024ea82d7\/c39146cbda47.dcm'\n# #cv2.rectangle(img,start,end,color,thickness)\n# #cv2.imshow('fs', ima)","6ff4b9bf":"l= labels[116].split(' ')\nn_l = int(len(l)\/6)\ndef labels_params(l):\n    \n    n_l = int(len(l)\/6)\n    X = []\n    Y = []\n    W = []\n    H = []\n    for i in range(n_l):\n        j = i*6 \n        if l[j] == 'opacity' :\n            X.append(int(float(l[2 + 6*i])))\n            Y.append(int(float(l[3 + 6*i])))\n            W.append(int(float(l[4 + 6*i])))\n            H.append(int(float(l[5 + 6*i])))\n    return(X,Y,W,H)\nX,Y,W,H = labels_params(l)","5e4b67a0":"dicom_display(train_data[116],X,Y,W,H,n_l),dicom_display(train_data[116],x,y,w,h,n)","3825257c":"\nima = dicom_read(train_data[0])\nir = cv2.resize(ima, (4020,4020))\nimg2 = np.zeros((4020,4020,3))\nimg2[:,:,0] = ir\nimg2[:,:,1] = ir\nimg2[:,:,2] = ir\nbacktorgb = cv2.cvtColor(ir,cv2.COLOR_GRAY2RGB)","60c239f4":"x = r'{}'.format(train_data[0])\nl = len(x)\nprint(x[1:l])\nimg3 = cv2.imread(img2)","fc9c00e6":"plt.imshow(backtorgb)\n","eab5bf8d":"from shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/usr\/lib\/utils\/utils.py\", dst = \"..\/working\/utils.py\")\ncopyfile(src = \"..\/usr\/lib\/darknet\/darknet.py\", dst = \"..\/working\/darknet.py\")\n# import all our functions\nfrom utils import *\nfrom darknet import Darknet","53a884d2":"# for downloading pretrained weights for yolov3 algorithm\n!wget https:\/\/pjreddie.com\/media\/files\/yolov3.weights","33c804c6":"cfg_file = '\/kaggle\/input\/yolo-cfg\/yolov3.cfg'\n\n\nnames_file = '\/kaggle\/input\/names-study\/study_names.names'\n\nweight_names = '.\/yolov3.weights'\n\nm = Darknet(cfg_file)\nm.load_weights(weight_names)\nclass_names = load_class_names(names_file)\n","33a35343":"class_names","3b1aae64":"m.print_network()","d4ce8f10":"backtorgb = backtorgb.astype('uint8')","5330c491":"import cv2\nplt.rcParams['figure.figsize'] = [24.0, 14.0]\n\n#img = cv2.imread('\/kaggle\/input\/yolo-cfg\/index.jpg')\noriginal_image = cv2.cvtColor(backtorgb, cv2.COLOR_BGR2RGB)\n#CV_Assert( ssize.area() > 0 );\nresized_image = cv2.resize(backtorgb, (m.width, m.height))\n\nplt.subplot(121)\nplt.title('Original Image')\nplt.imshow(backtorgb)\nplt.subplot(122)\nplt.title('Resized Image')\nplt.imshow(resized_image, cmap= plt.cm.bone)\nplt.show()","51911bd1":"nms_threshold = 0.6\niou_threshold = 0.4","f9f41678":"resized_image.reshape(608,608)\nresized_image.shape","2d7d4b0e":"#from utils import *\n#plt.rcParams['figure.figsize'] = [24.0, 14.0]\n\n#mg = cv2.imread('\/content\/index.jpg')\n\n#original_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n#resized_image = cv2.resize(original_image, (m.width, m.height))\nbo = detect_objects(m, resized_image, iou_threshold, nms_threshold)\n#print_objects(bo, class_names )\n#plot_boxes(backtorgb, bo, class_names, plot_labels = True)","d267a3fb":"bo[0]","01791e7a":"dicom_display(train_data[116],list(bo[0][1].item()),list(bo[0][2].item()),list(bo[0][3].item()),list(bo[0][4].item()),1)","634d896e":"ia = dicom_read(train_data[116])\nstar =(bo[0][1].item(),bo[0][2].item())\nen = (bo[0][3].item(), bo[0][4].item())\ncolor = (255,0,0)\nthickness = 7\n    \n    \nim = cv2.rectangle(ia,star,en)\nplt.figure(figsize=(5,5))\nplt.imshow(im, cmap=plt.cm.bone )","bffae569":"##### no. of channels = 1 Refer to https:\/\/dicom.innolitics.com\/ciods\/rt-brachy-treatment-record\/rt-brachy-session-record\/30080110\/30080130\/300a0282"}}