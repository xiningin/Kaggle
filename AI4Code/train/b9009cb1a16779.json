{"cell_type":{"e5fc9080":"code","cad34784":"code","5dd44759":"code","4a84f7c7":"code","8af37c0f":"code","31a04f52":"code","414cca04":"code","2b5238d8":"code","73e28a44":"code","8839e4f4":"code","8a4ac6a9":"code","7d7b9af2":"code","b7d6123a":"code","bdf9bb0e":"code","101b5f02":"code","602021b3":"code","c842ac7b":"code","f3b718d3":"code","fd4183ae":"code","12b76df7":"code","f117d0b6":"code","4f1c9799":"code","c8cc7f0d":"code","d26dd118":"code","4ab2e025":"code","2bfa41fc":"code","0c35f9ff":"code","67ca048a":"code","ff580688":"markdown"},"source":{"e5fc9080":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# load help packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # basic plotting\nimport seaborn as sns # additional plotting functionality\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running the below code (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\n#from generator import DataGenerator\nimport keras\n","cad34784":"# load data\nxray_data = pd.read_csv('..\/input\/Data_Entry_2017.csv')\n\n# see how many observations there are\nnum_obs = len(xray_data)\nprint('Number of observations:',num_obs)\n\n# examine the raw data before performing pre-processing\nxray_data.head(5) # view first 5 rows\n#xray_data.sample(5) # view 5 randomly sampled rows","5dd44759":"from glob import glob\n#import os # already imported earlier\n\nmy_glob = glob('..\/input\/images*\/images\/*.png')\nprint('Number of Observations: ', len(my_glob)) # check to make sure I've captured every pathway, should equal 112,120","4a84f7c7":"full_img_paths = {os.path.basename(x): x for x in my_glob}\nxray_data['full_path'] = xray_data['Image Index'].map(full_img_paths.get)\n","8af37c0f":"num_unique_labels = xray_data['Finding Labels'].nunique()\nprint('Number of unique labels:',num_unique_labels)\n\n# let's look at the label distribution to better plan our next step\ncount_per_unique_label = xray_data['Finding Labels'].value_counts() # get frequency counts per label\ndf_count_per_unique_label = count_per_unique_label.to_frame() # convert series to dataframe for plotting purposes\n","31a04f52":"print(df_count_per_unique_label) # view tabular results","414cca04":"sns.barplot(x = df_count_per_unique_label.index[:20], y=\"Finding Labels\", data=df_count_per_unique_label[:20], color = \"green\")\nplt.xticks(rotation = 90) ","2b5238d8":"# define dummy labels for one hot encoding - simplifying to 14 primary classes (excl. No Finding)\ndummy_labels = ['Atelectasis', 'Consolidation', 'Infiltration', 'Pneumothorax', 'Edema', 'Emphysema', 'Fibrosis', 'Effusion', 'Pneumonia', 'Pleural_Thickening', \n'Cardiomegaly', 'Nodule', 'Mass', 'Hernia'] # taken from paper\n\n# One Hot Encoding of Finding Labels to dummy_labels\nfor label in dummy_labels:\n    xray_data[label] = xray_data['Finding Labels'].map(lambda result: 1.0 if label in result else 0)\nxray_data.head(20) # check the data, looking good!","73e28a44":"clean_labels = xray_data[dummy_labels].sum().sort_values(ascending= False) # get sorted value_count for clean labels\nprint(clean_labels) # view tabular results\n\n# plot cases using seaborn barchart\nclean_labels_df = clean_labels.to_frame() # convert to dataframe for plotting purposes\nsns.barplot(x = clean_labels_df.index[::], y= 0, data = clean_labels_df[::], color = \"green\"), plt.xticks(rotation = 90) # visualize results graphically","8839e4f4":"## MODEL CREATION PHASE STARTS HERE\n\n# create vector as ground-truth, will use as actuals to compare against our predictions later\nxray_data['target_vector'] = xray_data.apply(lambda target: [target[dummy_labels].values], 1).map(lambda target: target[0])","8a4ac6a9":"xray_data.head() \n","7d7b9af2":"# split the data into a training and testing set\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(xray_data, test_size = 0.2, random_state = 1993)\n\n# quick check to see that the training and test set were split properly\nprint('training set - # of observations: ', len(train_set))\nprint('test set - # of observations): ', len(test_set))\nprint('prior, full data set - # of observations): ', len(xray_data))","b7d6123a":"from keras.preprocessing.image import ImageDataGenerator\ndata_gen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        horizontal_flip=True)","bdf9bb0e":"def flow_from_dataframe(img_data_gen, in_df, path_col, y_col, **dflow_args):\n    base_dir = os.path.dirname(in_df[path_col].values[0])\n    print('## Ignore next message from keras, values are replaced anyways')\n    df_gen = img_data_gen.flow_from_directory(base_dir, \n                                     class_mode = 'sparse',\n                                    **dflow_args)\n    df_gen.filenames = in_df[path_col].values\n    df_gen.classes = np.stack(in_df[y_col].values)\n    df_gen.samples = in_df.shape[0]\n    df_gen.n = in_df.shape[0]\n    df_gen._set_index_array()\n    df_gen.directory = '' # since we have the full path\n    print('Reinserting dataframe: {} images'.format(in_df.shape[0]))\n    return df_gen","101b5f02":"image_size = (128, 128) # image re-sizing target\n\ntrain_gen = flow_from_dataframe(data_gen, train_set, path_col = 'full_path', y_col = 'target_vector', \n                                target_size = image_size, \n                                color_mode = 'rgb',\n                                batch_size = 32)\n\nvalid_gen = flow_from_dataframe(data_gen, test_set, path_col = 'full_path', y_col = 'target_vector', \n                                target_size = image_size, \n                                color_mode = 'rgb', \n                                batch_size = 128)\n\n# define test sets\ntest_X, test_Y = next(flow_from_dataframe(data_gen, test_set, path_col = 'full_path', y_col = 'target_vector', \n                                          target_size = image_size, \n                                          color_mode = 'rgb', \n                                          batch_size = 2048))","602021b3":"t_x, t_y = next(train_gen)\nfig, m_axs = plt.subplots(4, 4, figsize = (16, 16))\nfor (c_x, c_y, c_ax) in zip(t_x, t_y, m_axs.flatten()):\n    c_ax.imshow(c_x[:,:,0])\n    c_ax.set_title(', '.join([n_class for n_class, n_score in zip(dummy_labels, c_y) \n                             if n_score>0.5]))\n    c_ax.axis('off')\n","c842ac7b":"from keras.applications.mobilenet import MobileNet\nfrom keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten\nfrom keras.models import Sequential\nmobilenet_model = MobileNet(input_shape =  t_x.shape[1:], \n                                 include_top = False, weights = None)\nmulti_disease_model = Sequential()\nmulti_disease_model.add(mobilenet_model)\nmulti_disease_model.add(GlobalAveragePooling2D())\nmulti_disease_model.add(Dropout(0.5))\nmulti_disease_model.add(Dense(512))\nmulti_disease_model.add(Dropout(0.5))\nmulti_disease_model.add(Dense(len(dummy_labels), activation = 'sigmoid'))\nmulti_disease_model.compile(optimizer = 'adam', loss = 'binary_crossentropy',\n                           metrics = ['binary_accuracy', 'mae'])\nmulti_disease_model.summary()","f3b718d3":"history = multi_disease_model.fit_generator(train_gen, \n                                  steps_per_epoch=100,\n                                  validation_data = (test_X,test_Y), \n                                  epochs = 10)\n                                  ","fd4183ae":"multi_disease_model.save('mobilenet.h5')","12b76df7":"from keras.models import load_model \nmulti_disease = load_model('mobilenet.h5')","f117d0b6":"test_X.shape","4f1c9799":"sample_image = test_X[0]","c8cc7f0d":"sample_image = sample_image.reshape((1, 128,128,3))","d26dd118":"multi_disease_model.predict(sample_image)","4ab2e025":"y_pred = multi_disease_model.predict(test_X)","2bfa41fc":"print('test binary accuracy = ',multi_disease_model.evaluate(test_X,test_Y, verbose=0)[1])","0c35f9ff":"from sklearn.metrics import roc_auc_score\nprint('roc score = ',roc_auc_score(test_Y.astype(int), y_pred))","67ca048a":"multi_disease_model.compile(optimizer = 'adam', loss = 'binary_crossentropy',\n                           metrics = ['binary_accuracy', 'mae'])","ff580688":"**MobileNet**"}}