{"cell_type":{"5fc0232a":"code","9f4be95f":"code","d5b0d4b0":"code","e5fc90c8":"code","be263bc9":"code","50c2b4ec":"code","aefaf8be":"code","0de37caa":"code","7509bd05":"code","c9fc92a6":"code","954f67ac":"code","a01ed3e4":"code","ec8c9e0c":"code","4a10cf20":"code","2cce5320":"code","940027f8":"code","26d2ba4b":"code","0de1b527":"code","4567c716":"code","4fb2ebbc":"code","0cf65bef":"code","6065e961":"code","8951a4b0":"code","e0745e78":"code","b3656d2b":"code","e76653de":"code","a0b2796e":"code","650d68e3":"code","a4274701":"code","6fd88fec":"markdown","341ea46c":"markdown","21455269":"markdown","96be4592":"markdown","0f79b8cb":"markdown","120dca83":"markdown","93041c1b":"markdown","937e97b0":"markdown","2d16dc35":"markdown","9f321c1a":"markdown","b8efa9e5":"markdown","907cecae":"markdown","0fce4ad9":"markdown","5d41933b":"markdown"},"source":{"5fc0232a":"# feature extractoring and preprocessing data\nimport librosa\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfrom PIL import Image\nimport pathlib\nimport csv\n\n# Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\n#Keras\nimport keras\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder, scale, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential, Model, load_model\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Convolution2D, Conv2D, MaxPooling2D, GlobalAveragePooling2D, UpSampling2D, Input\nfrom keras.optimizers import Adam\nfrom keras.utils import np_utils\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom keras import optimizers\nfrom keras.regularizers import l1\nfrom keras.utils.vis_utils import plot_model\nfrom datetime import datetime\nfrom sklearn import metrics\nimport librosa, librosa.display, os, csv\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pylab\nplt.switch_backend('agg')\nimport itertools\nimport scipy as sp\nfrom scipy import signal\nimport xgboost as xgb\nimport joblib\nfrom glob import glob\nimport urllib\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\nfrom tensorflow.keras.utils import to_categorical \n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\n# Basic Libraries\n\nimport pandas as pd\nimport numpy as np\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.preprocessing import MinMaxScaler","9f4be95f":"#Loading CSV file\ntrain_csv = pd.read_csv(\"..\/input\/coughclassifier-trial\/cough_trial_extended.csv\")\ndataset = \"..\/input\/coughclassifier-trial\/cough_trial_extended.csv\"\ntrain_csv","d5b0d4b0":"train_csv['class'].unique()","e5fc90c8":"cmap = plt.get_cmap('inferno')\ntot_rows = train_csv.shape[0]\nfor i in range(tot_rows):\n    source = train_csv['file_properties'][i]\n    filename = '..\/input\/coughclassifier-trial\/trial_covid\/'+source\n    y,sr = librosa.load(filename, mono=True, duration=5)\n    plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');\n    plt.axis('off');\n    plt.savefig(f'.\/{source[:-3].replace(\".\", \"\")}.png')\n    plt.clf()","be263bc9":"header = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'\nfor i in range(1, 21):\n    header += f' mfcc{i}'\nheader += ' label'\nheader = header.split()","50c2b4ec":"file = open('data_new_extended.csv', 'w')\nwith file:\n    writer = csv.writer(file)\n    writer.writerow(header)\nfor i in range(tot_rows):\n        source = train_csv['file_properties'][i]\n        file_name = '..\/input\/coughclassifier-trial\/trial_covid\/'+source\n        y,sr = librosa.load(file_name, mono=True, duration=5)\n        chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)\n        rmse = librosa.feature.rms(y=y)\n        spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)\n        spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)\n        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)\n        zcr = librosa.feature.zero_crossing_rate(y)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr)\n        to_append = f'{source[:-3].replace(\".\", \"\")} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    \n        for e in mfcc:\n            to_append += f' {np.mean(e)}'\n        \n        file = open('data_new_extended.csv', 'a')\n        with file:\n            writer = csv.writer(file)\n            writer.writerow(to_append.split())","aefaf8be":"data = pd.read_csv('..\/input\/coughclassifier-trial\/data_new_extended.csv')\ndata","0de37caa":"data.shape","7509bd05":"# Dropping unneccesary columns\ndata = data.drop(['filename'],axis=1)","c9fc92a6":"genre_list = data.iloc[:, -1]\nencoder = LabelEncoder()\ny = encoder.fit_transform(genre_list)","954f67ac":"scaler = StandardScaler()\nX = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))","a01ed3e4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)","ec8c9e0c":"X_train.shape","4a10cf20":"X_train.shape[1]","2cce5320":"y_train.shape","940027f8":"\nfrom keras import models\nfrom keras import layers\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(512, activation='relu', input_shape=(X_train.shape[1],)))\n\nmodel.add(layers.Dense(256, activation='relu'))\n\nmodel.add(layers.Dense(128, activation='relu'))\n\nmodel.add(layers.Dense(64, activation='relu'))\n\nmodel.add(layers.Dense(10, activation='relu'))\n\nmodel.add(layers.Dense(2, activation='softmax'))\n\n# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")\n\n# plot model\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","26d2ba4b":"model.summary()","0de1b527":"# # loading weights into new model\n# loaded_model.load_weights(\"model.h5\")\n# print(\"Loaded model from disk\")\n \n# # evaluate loaded model on test data\n# loaded_model.compile(optimizer='adam',\n#               loss='sparse_categorical_crossentropy',\n#               metrics=['accuracy'])\n# score = loaded_model.evaluate(X, Y, verbose=0)\n# print(\"%s: %.2f%%\" % (loaded_model.metrics_names[1], score[1]*100))","4567c716":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(X_train,\n                    y_train,\n                    epochs=100,\n                    batch_size=128)","4fb2ebbc":"test_loss, test_acc = model.evaluate(X_test,y_test)","0cf65bef":"print('test_acc: ',test_acc)","6065e961":"predictions = model.predict(X_test)\nprint(predictions[0].shape)\nprint(np.sum(predictions[0]))\nprint(predictions[:4])\nprint(y_test[:4])","8951a4b0":"!tar -zcvf outputname.tar.zip \/kaggle\/working","e0745e78":"df = pd.DataFrame(predictions, columns = ['Negative','Positive'])","b3656d2b":"a = df.iloc[:,0] < df.iloc[:,1] \na = a*1","e76653de":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom matplotlib import pyplot","a0b2796e":"a.to_numpy()","650d68e3":"y_test","a4274701":"# summarize score\nprint('Model: auROC=%.3f' % (roc_auc_score(y_test, a)))\n# calculate roc curves\nlr_fpr, lr_tpr, _ = roc_curve(y_test, a)\n# plot the roc curve for the model\npyplot.plot(lr_fpr, lr_tpr, marker='.', label='Model')\n# axis labels\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\n# show the legend\npyplot.legend()\n# show the plot\npyplot.show()","6fd88fec":"## Encoding the Labels","341ea46c":"All the audio files get converted into their respective spectrograms .We can know easily extract features from them.","21455269":"### Test Accuracy","96be4592":"## Extracting the Spectrogram for every Audio File","0f79b8cb":"# Analysing the Data in Pandas","120dca83":"## Saving the Spectograms as a single output file","93041c1b":"## Writing data to csv file\n\nWe write the data to a csv file","937e97b0":"## Dividing data into training and Testing set","2d16dc35":"## Extracting features from Spectrogram\n\n\nWe will extract\n\n* Mel-frequency cepstral coefficients (MFCC)(20 in number)\n* Spectral Centroid,\n* Zero Crossing Rate\n* Chroma Frequencies\n* Spectral Roll-off.","9f321c1a":"# COVID-19 Cough classification notebook","b8efa9e5":"## Predictions on Test Data","907cecae":"# Classification with Keras\n\n## Building our Network","0fce4ad9":"## Importing Libraries","5d41933b":"## Scaling the Feature columns"}}