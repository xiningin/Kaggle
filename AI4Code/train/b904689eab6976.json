{"cell_type":{"a7b76d0e":"code","1bb59afb":"code","b6ca6d9e":"code","e4c3a5c9":"code","6f796b7f":"code","d9d2da4f":"code","1c30fcb7":"code","f850dde2":"code","ad7cbb6f":"code","d0f97a82":"code","d1870d9a":"code","977bab84":"code","cfa1a0c1":"code","55612630":"markdown","fe6b6eb8":"markdown","33786b51":"markdown","8508efb6":"markdown","1f404490":"markdown","693a8281":"markdown","ce5be18e":"markdown","f987e6c3":"markdown","6b0004cf":"markdown","2677c33a":"markdown","9f9622d9":"markdown","439dfc5a":"markdown","67a1b0c4":"markdown","3a20720c":"markdown","5bd2c1b5":"markdown","89554aae":"markdown"},"source":{"a7b76d0e":"import pandas as pd\nimport regex as re\nimport nltk","1bb59afb":"df = pd.read_csv('..\/input\/Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)\ndf.head()","b6ca6d9e":"from nltk.corpus import stopwords #remove words that are non significant for ML for e.g: This\nfrom nltk.stem.porter import PorterStemmer #bring everything to one tense","e4c3a5c9":"review = re.sub('[^a-zA-Z]',' ', df.Review[0])\nreview = review.lower()\nreview","6f796b7f":"review = review.split()\nreview","d9d2da4f":"ps = PorterStemmer()\nreview = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\nreview","1c30fcb7":"review = ' '.join(review)\nreview","f850dde2":"corpus = []\nfor i in range(len(df)):\n    review = re.sub('[^a-zA-Z]',' ', df.Review[i])\n    review = review.lower()\n    review = review.split()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","ad7cbb6f":"df['Filter_Review'] = corpus\ndf.head()","d0f97a82":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=1500)\nX = cv.fit_transform(df.Filter_Review).toarray()","d1870d9a":"y = df.Liked.values","977bab84":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)\nfrom sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test,y_pred), annot= True)\nplt.xlabel('y_test')\nplt.ylabel('y_predicted')\nplt.title('Confusion Matrix using Naive Bayes')","cfa1a0c1":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\ncv = []\nmodel_rf= RandomForestClassifier(n_estimators=20)\nmodel_dt = DecisionTreeClassifier()\nmodels = [model, model_rf, model_dt]\nfor i in models:\n    cv.append(cross_val_score(i,X,y, cv = 5).mean())\nprint('''Naive Bayes: {},\nRandom Forest: {},\nDecision Tree: {}'''.format(cv[0],cv[1],cv[2]))","55612630":"**Random Forest seems to be the most accuate model among the others**","fe6b6eb8":"**Importing important libraries**","33786b51":"**Split model into train and test data. Train the dataset using Naive Bayes Classifier and the results can be visualized using Confusion Matrix **","8508efb6":"**Step4: join the words to form back the string**","1f404490":"**'Review' column is a string and the 'Liked' column is a boolean where 1 means positive review and 0 means negative review **","693a8281":"**Checking accuracy of different classification models**","ce5be18e":"**Step3: remove stopwords from string and convert all to their root word**","f987e6c3":"**Step1: remove punctuations and numerical values from the string**","6b0004cf":"**Import some additional modules for easy language processing**","2677c33a":"**Applying the above for the whole dataset**","9f9622d9":"**Read the data file**","439dfc5a":"**Setting target\/dependent variable**","67a1b0c4":"**Cheers**","3a20720c":"**Step2: split the string to raw words to apply changes**","5bd2c1b5":"**Converting the filtered reviews to sparse matrix**","89554aae":"**Adding the new list to the dataset, just to compare manually**"}}