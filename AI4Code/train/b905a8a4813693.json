{"cell_type":{"cf087f9a":"code","b7a3cfc2":"code","c2a98c58":"code","4c92dbf0":"code","29183e75":"code","118ed917":"code","52c95bcb":"code","ca3eed55":"code","cd4b9343":"code","de1e4936":"code","8f749e8d":"code","86da40f4":"code","b9a06e5c":"code","c49e4fca":"code","1eb48db8":"code","92e1cc4f":"code","3733d816":"code","9dc97f31":"code","f5244a19":"code","ad7b518b":"code","beb1f9ec":"code","5b5eea18":"code","79cd11df":"code","43a4c88d":"code","0f653cc9":"code","813bed51":"code","62824a4d":"code","6ee183cc":"markdown","8e64f278":"markdown","1b4857e4":"markdown","6c2c5c92":"markdown","2efcb769":"markdown","a6b93ac2":"markdown","468cf53b":"markdown","9c160b5f":"markdown","7aa1dd25":"markdown","ffed6aa4":"markdown","7fc315d7":"markdown","2dc6beef":"markdown","ced50576":"markdown","ba43071c":"markdown","e48177f5":"markdown","368ac082":"markdown","d640a46c":"markdown","a555e233":"markdown","a4b22bcf":"markdown","b09382d3":"markdown","8d5126c9":"markdown","b322931c":"markdown"},"source":{"cf087f9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b7a3cfc2":"ncov = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')\nprint(ncov.head(7))\nprint('\\n')","c2a98c58":"print(ncov.info())","4c92dbf0":"ncov = ncov.drop('Sno', axis = 1)\nncov.columns = ['State', 'Country', 'Date', 'Confirmed', 'Deaths', 'Recovered']\nncov['Date'] = ncov['Date'].apply(pd.to_datetime).dt.normalize() #convert to proper datetime object","29183e75":"ncov.info()","118ed917":"ncov[['State','Country','Date']].drop_duplicates().shape[0] == ncov.shape[0]","52c95bcb":"ncov.describe(include = 'all')","ca3eed55":"ncov[['Country','State']][ncov['State'].isnull()].drop_duplicates()","cd4b9343":"ncov[ncov['Country'].isin(list(ncov[['Country','State']][ncov['State'].isnull()]['Country'].unique()))]['State'].unique()","de1e4936":"ncov.State.unique()","8f749e8d":"ncov.Country.unique()","86da40f4":"print(ncov[ncov['Country'].isin(['China', 'Mainland China'])].groupby('Country')['State'].unique())\nprint(ncov[ncov['Country'].isin(['China', 'Mainland China'])].groupby('Country')['Date'].unique())","b9a06e5c":"ncov['Country'] = ncov['Country'].replace(['Mainland China'], 'China') #set 'Mainland China' to 'China'\nsorted(ncov.Country.unique())","c49e4fca":"print(ncov.head())","1eb48db8":"china = ncov[ncov['Country']=='China']\nchina.head()","92e1cc4f":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.rcParams[\"figure.figsize\"] = (7,5)\nax1 = china[['Date','Confirmed']].groupby(['Date']).sum().plot()\nax1.set_ylabel(\"Total Number of Confirmed Cases\")\nax1.set_xlabel(\"Date\")\n\nax2 = china[['Date','Deaths', 'Recovered']].groupby(['Date']).sum().plot()\nax2.set_ylabel(\"Total N\")\nax2.set_xlabel(\"Date\")\n","3733d816":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (17,10)\nnums = china.groupby([\"State\"])['Confirmed'].aggregate(sum).reset_index().sort_values('Confirmed', ascending= False)\nax = sns.barplot(x=\"Confirmed\", y=\"State\", order = nums['State'], data=china, ci=None) \nax.set_xlabel(\"Total Confirmed Cases\")","9dc97f31":"#a custom function to return the lower and upper bounds of 95% confidence interval of a proportion\ndef get_ci(N,p):\n    lci = (p - 1.96*(((p*(1-p))\/N) ** 0.5))*100\n    uci = (p + 1.96*(((p*(1-p))\/N) ** 0.5))*100\n    return str(np.round(lci,3)) + \"% - \" + str(np.round(uci,3)) + '%'","f5244a19":"final = ncov[ncov.Date==np.max(ncov.Date)]\nfinal = final.copy()\n\nfinal['CFR'] = np.round((final.Deaths.values\/final.Confirmed.values)*100,3)\nfinal['CFR 95% CI'] = final.apply(lambda row: get_ci(row['Confirmed'],row['CFR']\/100),axis=1)\nglobal_cfr = np.round(np.sum(final.Deaths.values)\/np.sum(final.Confirmed.values)*100, 3)\nfinal.sort_values('CFR', ascending= False).head(10)","ad7b518b":"tops = final.sort_values('CFR', ascending= False)\ntops = tops[tops.CFR >0]\ndf = final[final['CFR'] != 0]\nplt.rcParams[\"figure.figsize\"] = (10,5)\nax = sns.barplot(y=\"CFR\", x=\"State\", order = tops['State'], data=df, ci=None) \nax.axhline(global_cfr, alpha=.5, color='r', linestyle='dashed')\nax.set_title('Case Fatality Rates (CFR) as of 30 Jan 2020')\nax.set_ylabel('CFR %')\nprint('Average CFR % = ' + str(global_cfr))","beb1f9ec":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import LocalOutlierFactor\nscaler = StandardScaler()\nscd = scaler.fit_transform(final[['Confirmed','Deaths','Recovered']])\nclf = LocalOutlierFactor(n_neighbors=20, contamination=0.1) #LOF is very sensitive to the choice of n_neighbors. Generally, n_neighbors = 20 works better\nclf.fit(scd)\nlofs = clf.negative_outlier_factor_*-1\nfinal['LOF Score'] = lofs\ntops = final.sort_values('LOF Score', ascending= False)\nplt.rcParams[\"figure.figsize\"] = (20,12)\nax = sns.barplot(x=\"LOF Score\", y=\"State\", order = tops['State'], data=final, ci=None) \nax.axvline(1, alpha=.5, color='g', linestyle='dashed')\nax.axvline(np.median(lofs), alpha=.5, color='b', linestyle='dashed')\nax.axvline(np.mean(lofs) + 3*np.std(lofs), alpha=.5, color='r', linestyle='dashed')","5b5eea18":"final.sort_values('LOF Score', ascending=False)","79cd11df":"from sklearn.cluster import KMeans\nplt.rcParams[\"figure.figsize\"] = (5,5)\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=1897)\n    kmeans.fit(scd)\n    wcss.append(kmeans.inertia_)\nplt.plot(range(1, 11), wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Within Cluster Sum of Squares')\nplt.show()","43a4c88d":"kmeans = KMeans(n_clusters=2, init='k-means++', max_iter=300, n_init=10, random_state=1897)\nclusters = np.where(kmeans.fit_predict(scd) == 0, 'Cluster 1', 'Cluster 2')\nclusters","0f653cc9":"from sklearn import decomposition\npca = decomposition.PCA(n_components=3)\npca.fit(scd)\nX = pca.transform(scd)\nprint(pca.explained_variance_ratio_.cumsum())","813bed51":"plt.rcParams[\"figure.figsize\"] = (7,7)\nax = sns.scatterplot(X[:,0], X[:,1], marker = 'X', s = 80, hue=clusters)\nax.set_title('K-Means Clusters of States\/Provinces')\nax.set_xlabel('Principal Component 1')\nax.set_ylabel('Principal Component 2')","62824a4d":"pd.DataFrame(final.State.values, clusters)","6ee183cc":"### Looking at the list of countries, there appear to be two values that sounds conflicting. These are 'China' and 'Mainland China'. These two entities are supposed to be representing a single country, but in the data it's two different entities. Let's see what's going on..","8e64f278":"# 2019 Novel Corona Virus Outbreak: EDA with estimation of Case Fatality Rate (CFR)\n","1b4857e4":"##### The first principal component itself explains ~99% of the variance.","6c2c5c92":"### The data has 434 rows and 7 columns. The first column 'Sno' doesn't appear to be informative. So we will remove it. Also, let's rename the columns to something that doesn't have any special characters or spaces. Also, the column 'Last Update' is a date variable, but its not in the proper datetime format and so let's convert it to proper datetime format as well","2efcb769":"### Total confirmed cases per each state\/province in China","a6b93ac2":"### It looks like the value of 'Country' is set to 'China' for observations on 22 Jan 2020 and from 23 Jan 2020 onwards its recorded as 'Mainland China'. Both the entities have same distinct states as well. This means that they both represent 'China', a single entity. We should correct the name or else having them as two different values could cause trouble in the EDA downstream","468cf53b":"### Let's read the data and get a glimpse of how it looks like","9c160b5f":"## Local Outlier Factor (LOF)\n> > In anomaly detection, the local outlier factor (LOF) is an algorithm proposed by Markus M. Breunig, Hans-Peter Kriegel, Raymond T. Ng and J\u00f6rg Sander in 2000 for finding anomalous data points by measuring the local deviation of a given data point with respect to its neighbours.\n> https:\/\/en.wikipedia.org\/wiki\/Local_outlier_factor","7aa1dd25":"#### Let's do Principal Component Analysis (PCA). This makes it easier to visualize high-dimensional data in 2D-space","ffed6aa4":"### From the above table, we know that there are missing values for 'State', but rest all columns doesn't contain any missing values. Let's explore 'State' variable to see if its missing is something dubious","7fc315d7":"#### The above two line plots is looking only at the data from 'China' to explore the trends of 2019-nCoV outbreak. The number of confirmed cases are on the rise. However, there doesn't seem to be any explosion in the number of confirmed infections in China with time. A similar trend is seen with respect to the number of 'deaths' and 'recovered' cases as well. Number of people who is dying from 2019-nCoV is rising day by day with no plateau reached as of 30 Jan 2020. The number of people who are 'recovering' from the infection is also increasing day by day.","2dc6beef":"#### The numerical columns of the data with confirmed number of cases, number of deaths and number of recovered cases are the interesting variables here for outlier detection. Variables denoting geocordinates of each state could be a value addition, but we don't have that in the data. These variables are standardized and then inputted into the LOF algorithm to get LOF scores for each state. A LOF score in and around 1 is characteristic of an inlier, while a LOF score >>1 is typical for outliers ","ced50576":"### Ok, it looks the 'State' names are missing for certain nations only. In case of Australia, there are records where 'State' is recorded and there are also records where Australia's 'State' name is missing. The plausible reason could be that the epicenter of 2019-nCoV outbreak is China and hence data is likely to be more complete from China. Nonetheless, the missingness of 'State' doesn't appear to be something that's dubious. ","ba43071c":"#### The average CFR is represented by the dotted red line. The CFR of 2019-nCoV as of now is ~ 2-4%. Note that there are many infectious agents in the world whose CFR is many times higher than 2019-nCoV.","e48177f5":"##### The above code simply checks if the number of distinct rows of the dataset containing only the three columns State, Country and Date is equal to the number of rows of the parent dataset. This check returned 'True' and it means that every row in the dataset is unique per each Country per State per Date. This is important information to have while performing grouping and aggregating operations","368ac082":"## K-Means Clustering \nThe outlierness of Hubei is clearly seen in K-Means clustering too","d640a46c":"##### num_clusters = 2 seems to be the best choice by looking at the elbow analysis above","a555e233":"#### Hubei is indeed in a league of its when it comes to nCoV. It's LOF score is 70, which is kind of astronomically high! The bar plot above has three dotted lines representing a LOF score of 1 (green), the median LOF score (blue) and the LOF score that's 3 standard deviations away (red). It is to be noted that LOF score does not translate to a bad epidemiological condition in that region and that it only represents whether that region is an outlier or not as compared to others. For example, New South Wales also has a very high LOF score (~12), but this was because 50% of the cases in New South Wales got recovered already.","a4b22bcf":"#### Looking at the barplot above, Hubei clearly has more confirmed cases than anywhere else in China. Wuhan is the capital of Hubei province. There also seems to be a province named 'Taiwan', this is likely an error (typo) in the data.","b09382d3":"## Case Fatality Rate\nThe case fatality rate or CFR is the proportion of deaths among people diagnosed with a disease. This is a measure of the fatality and is a measure of the risk of death if you happen to have get infected with an infectious agent. For infectious agents like Ebola and Nipah this number is quite high. 2019-nCoV's CFR rates are estimated to be less than 5% in most literature. We could compute the same using this data. ","8d5126c9":"##### Hubei is clustered into 'Cluster 2' and is quite far from any other states.","b322931c":"### Now let's view some summary statistics of all the 6 columns"}}