{"cell_type":{"1756fe96":"code","2d4f33e0":"code","15d048df":"code","64928ed7":"code","f4a3818c":"code","83b1785c":"code","ffba36f3":"code","68046d93":"code","5212379c":"code","c7c8e37a":"code","097ee2e9":"code","811be3f3":"code","2847b00e":"code","b93de25d":"markdown","d96e660d":"markdown","cb816cde":"markdown","ff4ffb2e":"markdown","e9a8ef55":"markdown"},"source":{"1756fe96":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statistics\n\nfrom sklearn.model_selection import train_test_split,RepeatedStratifiedKFold, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\nfrom sklearn.metrics import plot_confusion_matrix, f1_score","2d4f33e0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","15d048df":"df = pd.read_csv('..\/input\/company-bankruptcy-prediction\/data.csv')\ndf.head()","64928ed7":"# remove spaces from column names and rename target\n\nnew_name_map = {}\n\nfor col in df.columns:\n    new_name_map[col] = col.replace(' ','_').replace('%','percent').replace('?','ed')\n    \ndf.rename(columns = new_name_map, inplace = True)","f4a3818c":"# dataset in higly unbalanced\ndf_count = df.groupby('Bankrupted').count()\nnum_bankrupted = df_count.CFO_to_ASSETS[0] #any column is good\nnum_solid = df_count.CFO_to_ASSETS[1]\nx = np.arange(1)\nwidth = 0.5\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width, num_bankrupted, width, label='Bankrupted')\nrects2 = ax.bar(x + width, num_solid, width, label='Solid')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number')\nax.set_title('Samples by target')\nax.set_xticks(x)\n#ax.set_xticklabels(\"\")\nax.legend()","83b1785c":"# try to run a classifier without taking care of target imbalancing\nX = df.drop('Bankrupted', axis=1)\ny = df['Bankrupted']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, stratify=y, random_state=0)\n\nclassifier = RandomForestClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\nclassifier.score(X_test,y_test)","ffba36f3":"# see how the accuracy score is high (around 0.96) but the performance of the classifier is poor\n# (it is just predicting always \"Solid\").\n\nclass_names = { 'Solid' : 0, 'Bankrupted' : 1}\n\nplot_confusion_matrix(classifier, X_test, y_test,  display_labels=class_names, cmap=plt.cm.Blues)","68046d93":"# compute f1 score\n\nf1_score(y_test,classifier.predict(X_test))","5212379c":"# Try to combine oversampling with undersampling and get the dataset more balanced\n\n# define oversampling strategy\nover = RandomOverSampler(sampling_strategy=0.1, random_state=0)\n# fit and apply the transform\nX, y = over.fit_resample(X, y)\n# define undersampling strategy\nunder = RandomUnderSampler(sampling_strategy=0.8, random_state=0)\n# fit and apply the transform\nX, y = under.fit_resample(X, y)\n\n# show new target counts: now the dataset is more balanced\ny.value_counts()","c7c8e37a":"# Run the classifier with the new dataset\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, stratify=y, random_state=0)\nclassifier = RandomForestClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\nclassifier.score(X_test,y_test)","097ee2e9":"# the classifier is working much better now\n# also, only 7 bankrupted companies were classified as solid, against 31 solid classified as bankrupted\n# making less mistakes in the first case (bankrupted companies classified as solid) could be much more acceptable\n# than the opposite\n\nclass_names = { 'Solid' : 0, 'Bankrupted' : 1}\n\nplot_confusion_matrix(classifier, X_test, y_test,  display_labels=class_names, cmap=plt.cm.Blues)","811be3f3":"# compute f1 score\n\nf1_score(y_test,classifier.predict(X_test))","2847b00e":"# compute mean accuracy\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=10, random_state=1)\nscores = cross_val_score(classifier, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint('Mean Accuracy: %.3f' % statistics.mean(scores))","b93de25d":"# quick dataset analysis on target","d96e660d":"# Try to balance the dataset","cb816cde":"# Possible improvements\n\n1) play with the undersampler\/oversampler in order to get better classification results\n\n2) a deep data analysis\/feature engineering could help to remove outliers and unneeded features\n\n3) tune the classifier parameters","ff4ffb2e":"# Classifying with the re-balanced dataset","e9a8ef55":"# Classifying with the original dataset"}}