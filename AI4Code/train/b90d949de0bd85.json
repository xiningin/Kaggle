{"cell_type":{"4f4ca21f":"code","e452adc5":"code","a5e234d6":"code","8ee0944a":"code","0691cca9":"code","3dd57b0c":"code","3537b257":"code","80c4797a":"code","89802609":"code","cc43bfdb":"code","93fa9b42":"code","f9976419":"code","5f506216":"code","1c408082":"code","67e1cab6":"code","7cc0f0fd":"code","dcb9d141":"code","58d3f1a6":"code","874f7e89":"code","7629ee53":"code","84dbccfe":"code","82f2ea6b":"code","aba97c17":"markdown","bae6e095":"markdown","4f918eaf":"markdown","88d4b8bb":"markdown","96cdc5d7":"markdown","8f0a7678":"markdown","c39feab0":"markdown","eee3266b":"markdown","e1a20235":"markdown","adde5ff9":"markdown","e878baa8":"markdown","04763902":"markdown","9d6d9a9f":"markdown"},"source":{"4f4ca21f":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","e452adc5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a5e234d6":"mnist_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nmnist_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","8ee0944a":"print(mnist_train.shape, mnist_test.shape)","0691cca9":"mnist_train.head()","3dd57b0c":"mnist_train.describe()","3537b257":"mnist_train.isna().any().any()\n# There is no empty field. Data is clean already.","80c4797a":"mnist_train_data = mnist_train.loc[:, \"pixel0\":]\nmnist_train_label = mnist_train.loc[:, \"label\"]\n\nmnist_train_data = mnist_train_data\/255.0\nmnist_test = mnist_test\/255.0","89802609":"digit_array = mnist_train.loc[3, \"pixel0\":]\narr = np.array(digit_array) \n\n#.reshape(a, (28,28))\nimage_array = np.reshape(arr, (28,28))\n\ndigit_img = plt.imshow(image_array, cmap=plt.cm.binary)\nplt.colorbar(digit_img)\nprint(\"IMAGE LABEL: {}\".format(mnist_train.loc[3, \"label\"]))","cc43bfdb":"sns.countplot(mnist_train.label)\nprint(list(mnist_train.label.value_counts().sort_index()))","93fa9b42":"# Converting dataframe into arrays\nmnist_train_data = np.array(mnist_train_data)\nmnist_train_label = np.array(mnist_train_label)","f9976419":"mnist_train_data = mnist_train_data.reshape(mnist_train_data.shape[0], 28, 28, 1)\nprint(mnist_train_data.shape, mnist_train_label.shape)","5f506216":"from tensorflow import keras\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Lambda, Flatten, BatchNormalization\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, AvgPool2D\nfrom tensorflow.keras.optimizers import Adadelta\nfrom keras.utils.np_utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.callbacks import LearningRateScheduler","1c408082":"nclasses = mnist_train_label.max() - mnist_train_label.min() + 1\nmnist_train_label = to_categorical(mnist_train_label, num_classes = nclasses)\nprint(\"Shape of ytrain after encoding: \", mnist_train_label.shape)","67e1cab6":"def build_model(input_shape=(28, 28, 1)):\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = input_shape))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, kernel_size = 3, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(128, kernel_size = 4, activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Flatten())\n    model.add(Dropout(0.4))\n    model.add(Dense(10, activation='softmax'))\n    return model\n\n    \ndef compile_model(model, optimizer='adam', loss='categorical_crossentropy'):\n    model.compile(optimizer=optimizer, loss=loss, metrics=[\"accuracy\"])\n    \n    \ndef train_model(model, train, test, epochs, split):\n    history = model.fit(train, test, shuffle=True, epochs=epochs, validation_split=split)\n    return history","7cc0f0fd":"cnn_model = build_model((28, 28, 1))\ncompile_model(cnn_model, 'adam', 'categorical_crossentropy')\nmodel_history = train_model(cnn_model, mnist_train_data, mnist_train_label, 100, 0.2)","dcb9d141":"plt.plot(model_history.history['accuracy'],label = 'ACCURACY')\nplt.plot(model_history.history['val_accuracy'],label = 'VALIDATION ACCURACY')\nplt.legend()","58d3f1a6":"plt.plot(model_history.history['loss'],label = 'TRAINING LOSS')\nplt.plot(model_history.history['val_loss'],label = 'VALIDATION LOSS')\nplt.legend()","874f7e89":"mnist_test_arr = np.array(mnist_test)\nmnist_test_arr = mnist_test_arr.reshape(mnist_test_arr.shape[0], 28, 28, 1)\nprint(mnist_test_arr.shape)","7629ee53":"predictions = cnn_model.predict(mnist_test_arr)","84dbccfe":"predictions_test = []\n\nfor i in predictions:\n    predictions_test.append(np.argmax(i))","82f2ea6b":"submission =  pd.DataFrame({\n        \"ImageId\": mnist_test.index+1,\n        \"Label\": predictions_test\n    })\n\nsubmission.to_csv('my_submission.csv', index=False)","aba97c17":"### Visulaize a single digit with an array","bae6e095":"### Countplot for each of the 10 digits.","4f918eaf":"### Data Cleaning and Normalization\nData is totally clean in this case.","88d4b8bb":"### Training data: <br>Training a neural network with one input layer, one hidden layer and one output layer for learning the digits in images.","96cdc5d7":"### Prediction & Submission","8f0a7678":"### Building a Sequential Model","c39feab0":"### Model Performance Plots","eee3266b":"### I hope you like reading this notebook :)","e1a20235":"### Transforming testing data","adde5ff9":"### Import Libraries","e878baa8":"### Encoding train labels","04763902":"### MNIST Image Classification on Digits\n* In this project I am using MNIST dataset of digits images to classify each image into a class of digits 0-9.\n* KAGGLE LINK: https:\/\/www.kaggle.com\/c\/digit-recognizer","9d6d9a9f":"### Data Normalization"}}