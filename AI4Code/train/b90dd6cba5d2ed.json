{"cell_type":{"f7b6a0b2":"code","fa7e4485":"code","462c02a2":"code","5c8093c0":"code","775289c0":"code","84046247":"code","8839f3db":"code","a8097e5f":"code","4f8be1c3":"code","f760facf":"code","1015c6d2":"code","533490d7":"code","c21c6ca0":"code","9100b79e":"code","6ef60e6a":"code","bcd68f72":"code","f2da750c":"code","fa215f34":"code","ea4e06e1":"code","231bf4c7":"code","eeeb7064":"markdown","088c5bab":"markdown","49cad6d4":"markdown","7facd1ea":"markdown"},"source":{"f7b6a0b2":"import re\nimport os\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# \"magic\" command to make plots show up in the notebook\n%matplotlib inline ","fa7e4485":"df = pd.read_csv('..\/input\/lending-club\/accepted_2007_to_2018Q4.csv.gz')","462c02a2":"###Drop Current\ndf = df[df['loan_status'] != 'Current']","5c8093c0":"drop_cols = df.columns[df.isnull().mean() > 0.9]\ndf = df.drop(drop_cols,axis=1)","775289c0":"df.drop(['last_pymnt_d','last_credit_pull_d','earliest_cr_line'] , 1, inplace = True)","84046247":"df.drop(['url','emp_title','title','zip_code','policy_code'] , 1, inplace = True)  ## policy_code \ucd94\uac00(unique\uac12 1\uac1c\ub77c \uc758\ubbf8\uc5c6)","8839f3db":"obj_col = df.select_dtypes('object').columns.values\ndf[obj_col].nunique().sort_values(ascending=False)","a8097e5f":"df[df['grade'].isna()]","4f8be1c3":"df = df[df['grade'].notna()]","f760facf":"df['verification_status'] = df.verification_status.map({'Verified': 0, 'Source Verified': 1, 'Not Verified': 2})\ndf['debt_settlement_flag'] = df.debt_settlement_flag.map({'N': 0, 'Y': 1})\ndf['initial_list_status'] = df.initial_list_status.map({'w': 0, 'f': 1})\ndf['application_type'] = df.application_type.map({'Individual': 0, 'Joint App': 1})\ndf['hardship_flag'] = df.hardship_flag.map({'N': 0, 'Y': 1})\ndf['pymnt_plan'] = df.pymnt_plan.map({'n': 0, 'y': 1})\ndf['disbursement_method'] = df.disbursement_method.map({'Cash': 0, 'DirectPay': 1})","1015c6d2":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndf['addr_state'] = le.fit_transform(df['addr_state'].astype(str))\ndf['sub_grade'] = le.fit_transform(df['sub_grade'].astype(str))\ndf['purpose'] = le.fit_transform(df['purpose'].astype(str))\ndf['emp_length'] = le.fit_transform(df['emp_length'].astype(str))\ndf['home_ownership'] = le.fit_transform(df['home_ownership'].astype(str))\ndf['term'] = le.fit_transform(df['term'].astype(str))","533490d7":"df['loan_status'].value_counts()","c21c6ca0":"###Targets\n\ndf['grade'] = df.grade.map({'A': 0, 'B': 1,'C': 2, 'D': 3,'E': 4, 'F': 5,'G': 6})   \ndf['loan_status'] = df.loan_status.map({'Fully Paid':0, \n                                            'Charged Off': 1\n                                            , 'Late (31-120 days)': 1\n                                           , 'Late (16-30 days)': 1\n                                           , 'In Grace Period': 0\n                                           , 'Does not meet the credit policy. Status:Fully Paid': 0\n                                           , 'Does not meet the credit policy. Status:Charged Off': 1\n                                           , 'Default': 1})","9100b79e":"# df.fillna(-1,inplace = True)","6ef60e6a":"# from sklearn.model_selection import train_test_split\n# train, test = train_test_split(df,test_size = 0.2, random_state = 2021)","bcd68f72":"# train.reset_index(drop=True, inplace=True)\n# test.reset_index(drop=True, inplace=True)","f2da750c":"# answer = test[['id','loan_status']]\n# test.drop('loan_status',1, inplace = True)","fa215f34":"# # Kernel Density Plot\n# fig = plt.figure(figsize=(15,8),)\n# ax=sns.kdeplot(df.loc[(df['loan_status'] == 0),'last_fico_range_high'] , color='gray',shade=True,label='Normal')\n# ax=sns.kdeplot(df.loc[(df['loan_status'] == 1),'last_fico_range_high'] , color='g',shade=True, label='Default')\n# plt.title('last_fico_range_high Distribution Normal vs Default', fontsize = 25, pad = 40)\n# plt.ylabel(\"Frequency of Default\", fontsize = 15, labelpad = 20)\n# plt.xlabel(\"last_fico_range_high\", fontsize = 15, labelpad = 20);","ea4e06e1":"# # Kernel Density Plot\n# fig = plt.figure(figsize=(15,8),)\n# ax=sns.kdeplot(df.loc[(df['loan_status'] == 0),'last_fico_range_low'] , color='gray',shade=True,label='Normal')\n# ax=sns.kdeplot(df.loc[(df['loan_status'] == 1),'last_fico_range_low'] , color='g',shade=True, label='Default')\n# plt.title('last_fico_range_low Distribution Normal vs Default', fontsize = 25, pad = 40)\n# plt.ylabel(\"Frequency of Default\", fontsize = 15, labelpad = 20)\n# plt.xlabel(\"last_fico_range_low\", fontsize = 15, labelpad = 20);","231bf4c7":"df.to_pickle('df_preprocessesd.pkl')\n# train.to_pickle(\"train.pkl\")\n# test.to_pickle(\"test.pkl\")\n# answer.to_pickle(\"answer.pkl\")","eeeb7064":"## Drop Columns which contains NaN value more than 90% ","088c5bab":"## Drop rows fulled with NaN values","49cad6d4":"## Label Encoding","7facd1ea":"## Drop useless columns\n- Date columns (since no FE in following project), titles , zipcode (encrypted) , policy_code (single unique value)"}}