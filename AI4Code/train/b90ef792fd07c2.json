{"cell_type":{"39556964":"code","869fa8f7":"code","cba0f99b":"code","61c0f65f":"code","94a59457":"code","7fda86ae":"code","3d89e79a":"code","46530e45":"code","288b7384":"code","0c3362f6":"code","8d0bb312":"code","f4bbce9c":"code","3ee57b03":"code","21d7b9a9":"code","4a4b7a74":"code","40b9f626":"code","b636dd78":"code","62be53e5":"code","c3ce87b1":"code","607c9971":"code","8ffb2b90":"code","66a9b3ec":"code","fccc0c77":"code","e4c9f4aa":"code","fc6268e7":"code","daa27bcd":"code","f38adae8":"code","0629325f":"markdown","1370d545":"markdown","b30f77c9":"markdown","7adc309f":"markdown"},"source":{"39556964":"# install pycaret\n!pip install pycaret","869fa8f7":"# import libraries\nimport pandas as pd\nimport numpy as np","cba0f99b":"# read csv data\ndata = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndata.head()","61c0f65f":"# check data types\ndata.dtypes","94a59457":"# replace blanks with np.nan\ndata['TotalCharges'] = data['TotalCharges'].replace(' ', np.nan)\ndata.isnull().sum()","7fda86ae":"# convert to float64\ndata['TotalCharges'] = data['TotalCharges'].astype('float64')\ndata.info()","3d89e79a":"!pip install pandas-profiling","46530e45":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(data, title=\"EDA Report\")\nprofile","288b7384":"# check missing values\ndata.isnull().sum()","0c3362f6":"round(data.Churn.value_counts()*100 \/ len(data),2)","8d0bb312":"categorical = []\nfor i in data.columns:\n    if (data[i].dtype=='object'):\n        categorical.append(i)\nprint(\"Categorical Attribute : {}\\n \".format(len(categorical)))\nfor x in range(len(categorical)): \n    print(categorical[x])","f4bbce9c":"data[categorical].nunique()","3ee57b03":"for i in categorical[1:]:\n    print(i)\n    print(data[i].unique())\n    print(\"\\n\")","21d7b9a9":"# init setup\nfrom pycaret.classification import *\ntelecom = setup(data, target = 'Churn', ignore_features = ['customerID'],\n                ordinal_features = {'Contract' : ['Month-to-month' ,'One year', 'Two year']},\n                fix_imbalance = True,\n               transformation = True,#Transformation changes the shape of the distribution such that the transformed data can be represented by normal distribution\n                  normalize = True, #rescale the values of numeric columns\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                numeric_imputation='median',\n                categorical_imputation='mode',)","4a4b7a74":"# compare all models\nbest_model = compare_models()","40b9f626":"lr= create_model('lr')","b636dd78":"print(lr)","62be53e5":"tuned_lr = tune_model(lr,optimize = 'AUC') #tuned on AUC","c3ce87b1":"evaluate_model(tuned_lr) #Graphical plot ","607c9971":"# create a custom function\ndef calculate_profit(y, y_pred):\n    tp = np.where((y_pred==1) & (y==1), (5000-1000), 0)\n    fp = np.where((y_pred==1) & (y==0), -1000, 0)\n    fn = 2 * fp\n    return np.sum([tp,fp,fn])","8ffb2b90":"# add metric to PyCaret\nadd_metric('profit', 'Profit', calculate_profit)","66a9b3ec":"# compare all models\nbest_model = compare_models(sort='Profit')","fccc0c77":"tuned_gdc = tune_model(best_model,optimize = 'Profit') #tuned on Profit","e4c9f4aa":"evaluate_model(tuned_gdc) #Graphical plot ","fc6268e7":"predict_model(tuned_gdc)# Test data evaluation ","daa27bcd":"final_gdc = finalize_model(tuned_gdc) # Final model \nfinal_gdc","f38adae8":"predict_model(final_gdc)#final test model evaluation ","0629325f":"# Adding Custom Metric in PyCaret","1370d545":"# Data Preparation","b30f77c9":"# Missing Values","7adc309f":"# Exploratory Data Analysis"}}