{"cell_type":{"c9ec739d":"code","221565aa":"code","c0be0247":"code","d9f301ad":"code","a7d60b52":"code","9d1bf0b5":"code","42f5630e":"code","6caf2f9e":"code","175318d9":"code","586ab662":"code","e7905868":"code","f0c08749":"code","cf3500a6":"code","fd19f1e3":"code","385d7fcb":"code","81f24937":"code","4ea96a99":"code","e7f8c25f":"code","213580a4":"code","97d1bac0":"code","98dbf4ba":"code","ade02ea0":"code","dbcce6ce":"code","cbec710c":"code","519556a7":"code","7f563597":"markdown","38eba45b":"markdown","558dc646":"markdown","d1c40df4":"markdown","897dfed8":"markdown","0376950d":"markdown","976d826f":"markdown","03cecf83":"markdown","b9b2255a":"markdown","e5ad49a3":"markdown","6ad627f7":"markdown","27637702":"markdown","790bc7ee":"markdown","1d86ec28":"markdown","50a9f91f":"markdown","453871e9":"markdown","ad993e19":"markdown","bfb8f265":"markdown"},"source":{"c9ec739d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","221565aa":"import numpy as np\nimport pandas as pd","c0be0247":"column_names = ['user_id', 'item_id', 'rating', 'timestamp']\ndf = pd.read_csv('\/kaggle\/input\/movie-dataset\/u.data', sep='\\t', names=column_names)","d9f301ad":"df.head()","a7d60b52":"movie_titles = pd.read_csv(\"\/kaggle\/input\/movie-dataset\/Movie_Id_Titles\")\nmovie_titles.head()","9d1bf0b5":"df = pd.merge(df,movie_titles,on='item_id')\ndf.head()","42f5630e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6caf2f9e":"df.groupby('title')['rating'].mean().sort_values(ascending=False).head()","175318d9":"df.groupby('title')['rating'].count().sort_values(ascending=False).head()","586ab662":"ratings = pd.DataFrame(df.groupby('title')['rating'].mean())\nratings.head()","e7905868":"ratings['num of ratings'] = pd.DataFrame(df.groupby('title')['rating'].count())\nratings.head()","f0c08749":"ratings.head()","cf3500a6":"plt.figure(figsize=(10,4))\nratings['num of ratings'].hist(bins=70)","fd19f1e3":"plt.figure(figsize=(10,4))\nratings['rating'].hist(bins=70)","385d7fcb":"sns.jointplot(x='rating',y='num of ratings',data=ratings,alpha=0.5)","81f24937":"moviemat = df.pivot_table(index='user_id',columns='title',values='rating')\nmoviemat.head()","4ea96a99":"ratings.sort_values('num of ratings',ascending=False).head(10)","e7f8c25f":"ratings.head()","213580a4":"starwars_user_ratings = moviemat['Star Wars (1977)']\nliarliar_user_ratings = moviemat['Liar Liar (1997)']\nstarwars_user_ratings.head()","97d1bac0":"similar_to_starwars = moviemat.corrwith(starwars_user_ratings)\nsimilar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)","98dbf4ba":"corr_starwars = pd.DataFrame(similar_to_starwars,columns=['Correlation'])\ncorr_starwars.dropna(inplace=True)\ncorr_starwars.head()","ade02ea0":"corr_starwars.sort_values('Correlation',ascending=False).head(10)","dbcce6ce":"corr_starwars = corr_starwars.join(ratings['num of ratings'])\ncorr_starwars.head()","cbec710c":"corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation',ascending=False).head()","519556a7":"corr_liarliar = pd.DataFrame(similar_to_liarliar,columns=['Correlation'])\ncorr_liarliar.dropna(inplace=True)\ncorr_liarliar = corr_liarliar.join(ratings['num of ratings'])\ncorr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation',ascending=False).head()","7f563597":"We can then use corrwith() method to get correlations between two pandas series:","38eba45b":"## Recommending Similar Movies\n","558dc646":"Now the same for the comedy Liar Liar:","d1c40df4":"# EDA\nLet's explore the data a bit and get a look at some of the best rated movies.\n\n# Visualization Imports","897dfed8":"Let's choose two movies: starwars, a sci-fi movie. And Liar Liar, a comedy.","0376950d":"Now set the number of ratings column:","976d826f":"Now sort the values and notice how the titles make a lot more sense:","03cecf83":"Most rated movie:","b9b2255a":"# Great Job!\n\nFor more information see: https:\/\/www.udemy.com\/course\/python-for-data-science-and-machine-learning-bootcamp\/","e5ad49a3":"Now if we sort the dataframe by correlation, we should get the most similar movies, however note that we get some results that don't really make sense. This is because there are a lot of movies only watched once by users who also watched star wars (it was the most popular movie). ","6ad627f7":"Now let's grab the user ratings for those two movies:","27637702":"Now a few histograms:","790bc7ee":"Let's create a ratings dataframe with average rating and number of ratings:","1d86ec28":"# Recommender Systems with Python\u00b6\n\nHello Kagglers and welcome to the code notebook for Recommender Systems with Python. In this notebook we will develop basic recommendation systems using Python and pandas. \n\nIn this notebook, we will focus on providing a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. Keep in mind, this is a basic recommendation system and it just tells you what movies\/items are most similar to your movie choice.\n\n\nLet's get started!\n\n# Import Libraries","50a9f91f":"Let's fix this by filtering out movies that have less than 100 reviews (this value was chosen based off the histogram from earlier).","453871e9":"## Get the Data","ad993e19":"Let's clean this by removing NaN values and using a DataFrame instead of a series:","bfb8f265":"Now let's create a matrix that has the user ids on one access and the movie title on another axis. Each cell will then consist of the rating the user gave to that movie. Note there will be a lot of NaN values, because most people have not seen most of the movies."}}