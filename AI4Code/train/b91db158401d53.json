{"cell_type":{"6a336f22":"code","ebf7e173":"code","02b0754a":"code","61eba257":"code","755e90ea":"code","75e74a9d":"code","5b1c6b7e":"code","0957f41a":"code","462aafba":"code","afb86892":"code","f6b8ec1b":"code","6e08f10f":"code","339cebea":"code","61382a31":"code","3c89ca71":"code","8042dc6a":"code","e5bf8edd":"code","ee342fc4":"code","b8e2b94d":"code","c241c481":"code","2e838566":"code","ac7139ec":"code","94dc677a":"code","dd60f7ee":"code","2774e0b8":"code","89a54d14":"code","b49fdda0":"code","614995a7":"code","2b875d28":"code","36ae58db":"code","2091e679":"code","070b9193":"code","44fc8752":"code","b8d643d9":"code","ecb2ddd1":"code","228a4671":"code","5652ca85":"code","5b44c521":"markdown","1474319d":"markdown","be6f85a2":"markdown","b24213b9":"markdown","151dc3c1":"markdown","a3dffeab":"markdown","227bf557":"markdown","6b6529ce":"markdown","5bb302ca":"markdown","0f77b5ef":"markdown","28b88f5f":"markdown"},"source":{"6a336f22":"!pip install bbox-visualizer","ebf7e173":"import numpy as np\nimport pandas as pd\nfrom glob import glob\nimport shutil, os\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport bbox_visualizer as bbv\n\nfrom sklearn.model_selection import GroupKFold\nfrom tqdm.notebook import tqdm\n\nimport cv2","02b0754a":"size = 512\nBASE_DIR = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/'\nif size == 512:\n    External_DIR = '..\/input\/vinbigdata'\nif size == 1024:\n    External_DIR = '..\/input\/vinbigdata-chest-xray-resized-png-1024x1024'","61eba257":"train_df = pd.read_csv(os.path.join(BASE_DIR, \"train.csv\"))\ntrain_df.head()","755e90ea":"train_df = train_df[train_df.class_name!='No finding'].reset_index(drop=True)","75e74a9d":"train_dim = pd.read_csv(os.path.join(External_DIR, \"train_meta.csv\"))\ntrain_dim.head()","5b1c6b7e":"train = pd.merge(train_df, train_dim, on='image_id')\ntrain.head()","0957f41a":"# reshaping the bounding-box w.r.t. the resized image\ntrain['x_min'] = train.apply(lambda row: (row.x_min)\/row.dim1, axis = 1)*float(size)\ntrain['y_min'] = train.apply(lambda row: (row.y_min)\/row.dim0, axis = 1)*float(size)\n\ntrain['x_max'] = train.apply(lambda row: (row.x_max)\/row.dim1, axis =1)*float(size)\ntrain['y_max'] = train.apply(lambda row: (row.y_max)\/row.dim0, axis =1)*float(size)\n\n# calculation x-mid, y-mid, width and hight of the bounding box for yolo\ntrain['x_mid'] = train.apply(lambda row: (row.x_max+row.x_min)\/2, axis =1)\ntrain['y_mid'] = train.apply(lambda row: (row.y_max+row.y_min)\/2, axis =1)\n\ntrain['w'] = train.apply(lambda row: (row.x_max-row.x_min), axis =1)\ntrain['h'] = train.apply(lambda row: (row.y_max-row.y_min), axis =1)\n\ntrain['x_mid'] \/= float(size)\ntrain['y_mid'] \/= float(size)\n\ntrain['w'] \/= float(size)\ntrain['h'] \/= float(size)\n\ntrain['area'] = train['w']*train['h']\ntrain.head()","462aafba":"Kfold  = GroupKFold(n_splits = 3)\ntrain['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(Kfold.split(train, groups = train.image_id.values)):\n    train.loc[val_idx, 'fold'] = fold\ntrain.head()","afb86892":"fold_0 = 1\nfold_1 = 2\ntrain_files = []\nval_files   = []\n\ntrain_files += list(train[train.fold==fold_0].image_id.unique())\nval_files += list(train[train.fold==fold_1].image_id.unique())\nlen(train_files), len(val_files)","f6b8ec1b":"def visualize_plot(idx):\n    image = train_files[idx]\n    records = train[train['image_id'] == image]\n    boxes = np.array(records[['x_min','y_min','x_max','y_max']])\n    \n    labels = records.class_name\n    sample = cv2.imread(os.path.join('\/content','train',f'{image}.png'))\n    img = sample.copy()\n    plt.figure(figsize=(16, 16))\n    for box,label in zip(boxes,labels):\n        bbv.add_label(img, \n                      label, \n                      [int(round(box[0])), int(round(box[1])),int(round(box[2])), int(round(box[3]))], \n                      draw_bg=True,\n                      text_bg_color=(255,0,0),\n                      text_color=(0,0,0),\n                      )\n        cv2.rectangle(img ,\n                      (int(round(box[0])), int(round(box[1]))),\n                      (int(round(box[2])), int(round(box[3]))),\n                      (255,0,0),\n                      2)\n\n\n    plt.imshow(img)","6e08f10f":"#visualize_plot(0)","339cebea":"#visualize_plot(12)","61382a31":"#visualize_plot(24)","3c89ca71":"#visualize_plot(30)","8042dc6a":"#visualize_plot(62)","e5bf8edd":"os.makedirs('.\/vinbigdata\/labels\/train', exist_ok = True)\nos.makedirs('.\/vinbigdata\/labels\/val', exist_ok = True)\nos.makedirs('.\/vinbigdata\/images\/train', exist_ok = True)\nos.makedirs('.\/vinbigdata\/images\/val', exist_ok = True)","ee342fc4":"TRAIN_LABELS_PATH = '.\/vinbigdata\/labels\/train'\nVAL_LABELS_PATH = '.\/vinbigdata\/labels\/val'\nTRAIN_IMAGES_PATH = '.\/vinbigdata\/images\/train'\nVAL_IMAGES_PATH = '.\/vinbigdata\/images\/val'\n\nfor file in tqdm(train_files):\n    records = train[train['image_id'] == file]\n    attributes = records[['class_id','x_mid','y_mid','w','h']].values\n    attributes = np.array(attributes)\n    np.savetxt(\n        os.path.join(\n            TRAIN_LABELS_PATH,\n            f\"{file}.txt\"\n        ),\n        attributes,\n        fmt = [\"%d\",\"%f\",\"%f\",\"%f\",\"%f\"]\n    )\n    shutil.copy(\n        os.path.join(\n            External_DIR,\n            'train',\n            f\"{file}.png\" \n        ),          \n        TRAIN_IMAGES_PATH\n    )","b8e2b94d":"for file in tqdm(val_files):\n    records = train[train['image_id'] == file]\n    attributes = records[['class_id','x_mid','y_mid','w','h']]\n    attributes = np.array(attributes)\n    np.savetxt(\n        os.path.join(\n            VAL_LABELS_PATH,\n            f\"{file}.txt\"\n        ),\n        attributes,\n        fmt = [\"%d\",\"%f\",\"%f\",\"%f\",\"%f\"]\n    )\n    shutil.copy(\n        os.path.join(\n            External_DIR,\n            'train',\n            f\"{file}.png\" \n        ),          \n        VAL_IMAGES_PATH\n    )","c241c481":"class_ids, class_names = list(zip(*set(zip(train.class_id, train.class_name))))\nclasses = list(np.array(class_names)[np.argsort(class_ids)])\nclasses = list(map(lambda x: str(x), classes))\nclasses","2e838566":"from os import listdir\nfrom os.path import isfile, join\nimport yaml\n\ncwd = '.\/'\n\nwith open(join( cwd , 'train.txt'), 'w') as f:\n    for path in glob('.\/vinbigdata\/images\/train\/*'):\n        f.write(path+'\\n')\n            \nwith open(join( cwd , 'val.txt'), 'w') as f:\n    for path in glob('.\/vinbigdata\/images\/val\/*'):\n        f.write(path+'\\n')\n\ndata = dict(\n    train =  '..\/train.txt',\n    val   =  '..\/val.txt',\n    nc    = 14,\n    names = classes\n    )\n\nwith open(join( cwd , 'vinbigdata.yaml'), 'w') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False)\n    \nf = open(join( cwd, 'vinbigdata.yaml'), 'r')\nprint('\\nyaml:')\nprint(f.read())","ac7139ec":"#!git clone https:\/\/github.com\/AlexeyAB\/darknet\n#!wget https:\/\/github.com\/AlexeyAB\/darknet\/releases\/download\/darknet_yolo_v4_pre\/yolov4-csp.weights\n#!git clone -b yolov4-csp https:\/\/github.com\/WongKinYiu\/ScaledYOLOv4.git","94dc677a":"#!git clone https:\/\/github.com\/JunnYu\/mish-cuda.git\n#%cd mish-cuda\n#!python setup.py build install\n#%cd ..","dd60f7ee":"#!git clone https:\/\/github.com\/WongKinYiu\/ScaledYOLOv4.git\n#%cd .\/ScaledYOLOv4\/\n#!git checkout yolov4-csp","2774e0b8":"#!python train.py --img 512 512 --batch-size 24 --epochs 20 --data ..\/vinbigdata.yaml --cfg yolov4-csp.cfg --weights ..\/yolov4-csp.weights --cache","89a54d14":"!git clone https:\/\/github.com\/ultralytics\/yolov3.git\n%cd .\/yolov3\/\n!pip install -r requirements.txt","b49fdda0":"!wget https:\/\/github.com\/ultralytics\/yolov3\/releases\/download\/v9.1\/yolov3.pt\n#!wget https:\/\/github.com\/ultralytics\/yolov3\/releases\/download\/v9.1\/yolov3-spp.pt\n#!wget https:\/\/github.com\/ultralytics\/yolov3\/releases\/download\/v9.1\/yolov3-tiny.pt","614995a7":"!WANDB_MODE=\"dryrun\" python train.py --img {size} --batch-size 40 --epochs 60 --data ..\/vinbigdata.yaml --weights yolov3.pt","2b875d28":"!pip install matplotlib==3.1.3\nimport matplotlib.pyplot as plt","36ae58db":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/results.png'));","2091e679":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/precision_recall_curve.png'));","070b9193":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('.\/runs\/train\/exp\/labels.jpg'));","44fc8752":"_, ax = plt.subplots(1, 2, figsize=(20, 20))\n\nax[0].imshow(plt.imread('runs\/train\/exp\/test_batch0_labels.jpg'))\nax[1].imshow(plt.imread('runs\/train\/exp\/test_batch0_pred.jpg'))\nax[0].title.set_text('Ground Truth')\nax[1].title.set_text('YOLO predictions')","b8d643d9":"_, ax = plt.subplots(1, 2, figsize=(20, 20))\n\nax[0].imshow(plt.imread('runs\/train\/exp\/test_batch1_labels.jpg'))\nax[1].imshow(plt.imread('runs\/train\/exp\/test_batch1_pred.jpg'))\nax[0].title.set_text('Ground Truth')\nax[1].title.set_text('YOLO predictions')","ecb2ddd1":"_, ax = plt.subplots(1, 2, figsize=(20, 20))\n\nax[0].imshow(plt.imread('runs\/train\/exp\/test_batch2_labels.jpg'))\nax[1].imshow(plt.imread('runs\/train\/exp\/test_batch2_pred.jpg'))\nax[0].title.set_text('Ground Truth')\nax[1].title.set_text('YOLO predictions')","228a4671":"for file in (glob('runs\/train\/exp\/**\/*.png', recursive = True)+glob('runs\/train\/exp\/**\/*.jpg', recursive = True)):\n    os.remove(file)","5652ca85":"%cd ..\nshutil.rmtree('vinbigdata')","5b44c521":"## My Previous work on VinBigData Chest X-ray Abnormalities Detection\n\n1. [Chest X-ray Abnormalities Detection](https:\/\/www.kaggle.com\/basu369victor\/chest-x-ray-abnormalities-detection)\n\nTopics utilized in the above notebook.\n   * FasterRCNN from torchvision\n   * Uses Resnet50+FPN backbone\n   * Normalization of the X-ray images\n   * Visualization of Model performance over validation images\n\n2. [Chest X-ray Abnormalities Detection(Submission)](https:\/\/www.kaggle.com\/basu369victor\/chest-x-ray-abnormalities-detection-submission)\n\n\n**If you find my previous notebooks informative and useful please do support my work by upvoting them and also let me know your opinions in the comments**.","1474319d":"## Pre-processing","be6f85a2":"## Directory Tree for YOLO","b24213b9":"## Yolo performance evaluation","151dc3c1":"## Chest X-ray bounding bounding box visualization\n\nIf the image size is 1024, you could use the **visualize_plot** function to visualize x-rays with bounding boxes, but I would not recommend this in case of 512 or lower size images because of the low-quality plots in the final visualized result.<br><br>\nI have already created similar plots in my [Chest X-ray Abnormalities Detection](https:\/\/www.kaggle.com\/basu369victor\/chest-x-ray-abnormalities-detection) notebook, so you could go and check them out.\n","a3dffeab":"## Yolo V3","227bf557":"## Chest Abnormality Detection with YOLO-v3\n\n![yolo](https:\/\/miro.medium.com\/max\/3802\/1*d4Eg17IVJ0L41e7CTWLLSg.png)","6b6529ce":"## Implementation of Scaled YOLO-v4\n\n\nI have commented out the scaled Yolo implementation part because the final results were not promising, but you could give it a try in your side, and have promising and better solution over this problem.","5bb302ca":"## Credits\n\nPlease go and visit these below mentioned notebooks and support their works. Without the help of the below mentioned notebooks, it would have been much difficult for me to approach the solution.\n\n1. [VinBigData-CXR-AD YOLOv5 14 Class [train]](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train)\n\n2. [VinBigData-CXR-AD YOLOv5 14 Class [infer]](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-infer)\n\n3. [VinBigData: Process and resize to PNG (1024x1024)](https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-png-1024x1024)\n\n4. [VinBigData: Process and resize to image](https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image)\n\n5. [chest generate training folds](https:\/\/www.kaggle.com\/abhishek\/chest-generate-training-folds)\n\n6. video -> [Train custom object detection model with YOLO V5](https:\/\/youtu.be\/NU9Xr_NYslo) by [Abhishek Thakur](https:\/\/www.kaggle.com\/abhishek)","0f77b5ef":"## Explanation\n\nSo I was trying to approach this problem with [**Scaled YOLO-v4**](https:\/\/arxiv.org\/pdf\/2011.08036.pdf), but the approach did not go well, the recall score was pretty low and the model was not predicting the bounding box. My assumptions are that if the model was trained for many iterations or if the model parameters would have been tuned manually like iou_threshold, or convolution layer parameters the model would have worked fine.<br><br>\n\nNow, Yolo-v5 and Yolo-v4 are far better than Yolo-v3 then why did I go for Yolo-v3. Yolo-v5 for this problem has already been implemented in this notebook- [VinBigData-CXR-AD YOLOv5 14 Class [train]](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train)\n, and I think the performance is really good. For Yolo-v4, I kept it for later experimentation. And with Yolo-v3 I tried because I was curious to know how an older methodology would work over a medical imaging scenario. \n\nAlso, I came across this research paper where YOLO-v2 with DenseNet201 in backend network has been used for chest x-ray abnormality detection, [Reproducibility of abnormality detection on chest radiographs using convolutional neural network in paired radiographs obtained within a short-term interval](https:\/\/www.nature.com\/articles\/s41598-020-74626-4). I think this research paper is pretty interesting and you could give it a look. The output layers of eDenseYOLO, which is You Only Look Once v2 with DenseNet201, were modified for improved robustness to the variable size of disease patterns. If the input resolution was 256\u2009\u00d7\u2009256, the feature map for the last layer was 8\u2009\u00d7\u20098, 16\u2009\u00d7\u200916, and 32\u2009\u00d7\u200932 with skip connection.","28b88f5f":"## The End\n\nThe Inference notebook would be availale at [Chest X-ray Abnormality Detection YOLOv3 [Infer]](https:\/\/www.kaggle.com\/basu369victor\/chest-x-ray-abnormality-detection-yolov3-infer)"}}