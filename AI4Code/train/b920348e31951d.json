{"cell_type":{"eb2b2954":"code","06cfacd7":"code","407e0b36":"code","46f1a2ee":"code","3c4e4367":"code","98530e23":"code","9119bbab":"code","3566ac63":"code","497c6436":"code","9768fdc9":"code","1c50b63b":"code","8ad0264a":"code","f88cac08":"code","7cf08dba":"code","f154dbff":"code","5908a63a":"code","2150fd7f":"code","13d28c2f":"code","19ad02a4":"code","ed561ce3":"code","66dbccc0":"code","0e02024c":"code","92dafb97":"code","841bb249":"code","e3926e14":"code","9d664058":"code","18df6bda":"code","5499cb0d":"code","d2ae5c61":"code","2cdeee59":"code","1ba4ac6e":"code","0c92c51f":"code","a03ca7b8":"code","15dbdc4a":"code","13be21de":"code","908e1570":"code","aa9d72d1":"code","30f39c0b":"markdown","48387f22":"markdown","86ed4495":"markdown","b1dcf3c5":"markdown","1bacf134":"markdown","5ef68c94":"markdown","ea53bbd8":"markdown","ddab1f90":"markdown"},"source":{"eb2b2954":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06cfacd7":"import warnings\n\nwarnings.filterwarnings('ignore')","407e0b36":"data = '..\/input\/car-evaluation\/car_evaluation.csv'\n\ndf = pd.read_csv(data, header=None)\n","46f1a2ee":"# view dimensions of dataset\n\ndf.shape","3c4e4367":"df.head()","98530e23":"#for rename\ncol_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\n\ndf.columns = col_names\n\ncol_names","9119bbab":"# let's again preview the dataset\n\ndf.head()","3566ac63":"#view summary\ndf.info()","497c6436":"col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']\n\n\nfor col in col_names:\n    \n    print(df[col].value_counts()) ","9768fdc9":"df['class'].value_counts()","1c50b63b":"# check missing values in variables\n\ndf.isnull().sum()","8ad0264a":"X = df.drop(['class'], axis=1)\n\ny = df['class']","f88cac08":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)","7cf08dba":"# check the shape of X_train and X_test\n\nX_train.shape, X_test.shape","f154dbff":"# check data types in X_train\n\nX_train.dtypes","5908a63a":"X_train.head()","2150fd7f":"# import category encoders\n\nimport category_encoders as ce","13d28c2f":"# encode variables with ordinal encoding\n\nencoder = ce.OrdinalEncoder(cols=['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety'])\n\n\nX_train = encoder.fit_transform(X_train)\nX_test = encoder.transform(X_test)","19ad02a4":"X_train.head()","ed561ce3":"X_test.head()","66dbccc0":"# import DecisionTreeClassifier\n\nfrom sklearn.tree import DecisionTreeClassifier","0e02024c":"# instantiate the DecisionTreeClassifier model with criterion gini index\n\nclf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\n\n\n# fit the model\nclf_gini.fit(X_train, y_train)","92dafb97":"y_pred_gini = clf_gini.predict(X_test)","841bb249":"from sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))","e3926e14":"y_pred_train_gini = clf_gini.predict(X_train)\n\ny_pred_train_gini","9d664058":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_gini)))","18df6bda":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))","5499cb0d":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf_gini.fit(X_train, y_train)) ","d2ae5c61":"#Visualize decision-trees with graphviz\nimport graphviz \ndot_data = tree.export_graphviz(clf_gini, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \n\ngraph ","2cdeee59":"# instantiate the DecisionTreeClassifier model with criterion entropy\n\nclf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)\n\n\n# fit the model\nclf_en.fit(X_train, y_train)","1ba4ac6e":"#Predict the Test set results with criterion entropy\ny_pred_en = clf_en.predict(X_test)","0c92c51f":"#Check accuracy score with criterion entropy\nfrom sklearn.metrics import accuracy_score\n\nprint('Model accuracy score with criterion entropy: {0:0.4f}'. format(accuracy_score(y_test, y_pred_en)))","a03ca7b8":"y_pred_train_en = clf_en.predict(X_train)\n\ny_pred_train_en","15dbdc4a":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_en)))","13be21de":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(clf_en.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(clf_en.score(X_test, y_test)))","908e1570":"plt.figure(figsize=(12,8))\n\nfrom sklearn import tree\n\ntree.plot_tree(clf_en.fit(X_train, y_train)) ","aa9d72d1":"import graphviz \ndot_data = tree.export_graphviz(clf_en, out_file=None, \n                              feature_names=X_train.columns,  \n                              class_names=y_train,  \n                              filled=True, rounded=True,  \n                              special_characters=True)\n\ngraph = graphviz.Source(dot_data) \ngraph","30f39c0b":"**Visualisasi decision tree**","48387f22":"***Decision Tree*****","86ed4495":"> **CEK AKURASI Dg Gini index**","b1dcf3c5":"# **Visualisasi decision tree**","1bacf134":"**Compare the train-set and test-set accuracy**\nNow, I will compare the train-set and test-set accuracy to check for overfitting.","5ef68c94":"**Check for overfitting and underfitting**","ea53bbd8":"**Check for overfitting and underfitting**","ddab1f90":"**Predict the Test set results with criterion gini index**"}}