{"cell_type":{"ed2e4eaa":"code","606d11ae":"code","8ab91ced":"code","f42fd810":"code","08f2ec0e":"code","e7e52638":"code","9d2881da":"code","ba36c05e":"code","877d9394":"code","bc094e8b":"code","4e7df644":"code","af0eb5e8":"code","380f61cb":"code","9ea7c399":"code","3281118a":"code","c7715a91":"code","7df3dc4f":"code","99d14ea4":"code","9ee60640":"code","1e9dcd5f":"code","5a456888":"code","199de44a":"code","ce786a4c":"code","9dfe0ea8":"code","32cfbafa":"code","d66ecb18":"code","172317e6":"code","5f240ce8":"code","e12cd63c":"code","f3f3fc65":"code","48c4eae3":"code","eef46dd7":"code","0b7e7693":"code","82474d7f":"code","6c24b064":"code","383283cd":"code","3f0e0039":"code","6864fdd6":"code","14d02d07":"code","a340440e":"code","8cbb9416":"code","0eb9f036":"code","84b6e6d5":"code","88a9299e":"code","179d6ad9":"code","52b6f893":"code","807c7a3a":"code","2a0d6fbf":"code","57b27473":"code","061f24b6":"code","f6602229":"code","bf828388":"code","b24a3825":"code","eab58b07":"code","5255c80b":"code","553726d8":"code","fcaa1cec":"code","c79bedeb":"code","fb9e2c55":"code","0103f62a":"code","d8d206fe":"code","50ebfbcf":"code","36c2c1e6":"code","219975d8":"code","df320be4":"markdown","9af088e8":"markdown","60fb4979":"markdown","1123bd55":"markdown","efbf64f2":"markdown","bd048a66":"markdown","aa2cd9e9":"markdown","098acd4c":"markdown","e8ee3a0b":"markdown","1f64bbb7":"markdown","d3bad9b8":"markdown","dfd93ed9":"markdown","f228086d":"markdown","43ebb206":"markdown","ccfc6a97":"markdown","18ed7cd6":"markdown","bd63d55d":"markdown","604401a3":"markdown","266b83a9":"markdown"},"source":{"ed2e4eaa":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats","606d11ae":"d_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nd_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","8ab91ced":"print('*'*100,'\\n')\nprint(\"About the Dataset\".center(50,'*'),'\\n')\nprint('''The Dataset is split into test and train datasets''')\nprint('\\n\\n')\nprint(\"The Training Dataset has %d rows and %d columns\"%(d_train.shape[0],d_train.shape[1]))\n\nprint(\"The Test Dataset has %d rows and %d columns\"%(d_test.shape[0],d_test.shape[1]))\nprint('\\n','*'*100)","f42fd810":"d_train = d_train.drop('Id',axis=1)\nd_test = d_test.drop('Id',axis =1)","08f2ec0e":"nans = pd.concat([d_train.isnull().sum(), (d_train.isnull().sum() \/ d_train.shape[0])*100 , d_test.isnull().sum(), (d_test.isnull().sum() \/ d_test.shape[0])*100], axis=1, keys=['Train', 'Percentage', 'Test', 'Percentage'],sort = False)\nnans\n","e7e52638":"d_test = d_test.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)","9d2881da":"d_train = d_train.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1)","ba36c05e":"corr = d_train.corr().abs()\nf,ax = plt.subplots(figsize=(20,18))\nsns.heatmap(corr,square =True,ax =ax,annot=True)\nplt.show()","877d9394":"upper = corr.where(np.tril(np.ones(corr.shape), k=0).astype(np.bool))\nhigh_cor = upper[(upper>0.70)&(upper<1)]\nf,ax = plt.subplots(figsize=(20,18))\nsns.heatmap(high_cor,square=True,annot=True,ax=ax)\nplt.show()","bc094e8b":"Pred_corr = corr.nlargest(10,'SalePrice')\nPred_corr['SalePrice']","4e7df644":"d_train.drop(['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF'], axis=1, inplace=True)\nd_train['TotalBsmtSF'] = d_train['TotalBsmtSF'].fillna(0)\nd_train['1stFlrSF'] = d_train['1stFlrSF'].fillna(0)\nd_train['2ndFlrSF'] = d_train['2ndFlrSF'].fillna(0)\nd_train['TotalSF'] = d_train['TotalBsmtSF'] + d_train['1stFlrSF'] + d_train['2ndFlrSF']\nd_train.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1, inplace=True)\nd_train.drop(['GarageCars'], axis=1, inplace=True) ","af0eb5e8":"d_test.drop(['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF'], axis=1, inplace=True)\nd_test['TotalBsmtSF'] = d_test['TotalBsmtSF'].fillna(0)\nd_test['1stFlrSF'] = d_test['1stFlrSF'].fillna(0)\nd_test['2ndFlrSF'] = d_test['2ndFlrSF'].fillna(0)\nd_test['TotalSF'] = d_test['TotalBsmtSF'] + d_test['1stFlrSF'] + d_test['2ndFlrSF']\nd_test.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1, inplace=True)\nd_test.drop(['GarageCars'], axis=1, inplace=True)","380f61cb":"d_train.drop(['Utilities', 'RoofMatl', 'MasVnrArea', 'MasVnrType', 'Heating', 'LowQualFinSF',\n            'BsmtFullBath', 'BsmtHalfBath', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n            'Functional', 'GarageYrBlt', 'GarageCond', 'GarageType', 'GarageFinish', 'GarageQual', 'WoodDeckSF',\n            'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n            'MiscVal'], axis=1, inplace=True)","9ea7c399":"d_test.drop(['Utilities', 'RoofMatl', 'MasVnrArea', 'MasVnrType', 'Heating', 'LowQualFinSF',\n            'BsmtFullBath', 'BsmtHalfBath', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n            'Functional', 'GarageYrBlt', 'GarageCond', 'GarageType', 'GarageFinish', 'GarageQual', 'WoodDeckSF',\n            'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n            'MiscVal'], axis=1, inplace=True)","3281118a":"d_train = d_train.drop(['MoSold'],axis=1)","c7715a91":"d_test = d_test.drop(['MoSold'],axis=1)","7df3dc4f":"d_train.LotFrontage=d_train.LotFrontage.fillna(np.random.randint(68,80))","99d14ea4":"d_test.LotFrontage=d_test.LotFrontage.fillna(np.random.randint(68,80))","9ee60640":"d_train.Electrical=d_train.Electrical.fillna('Mix')","1e9dcd5f":"d_train.FireplaceQu=d_train.FireplaceQu.fillna('NA')","5a456888":"d_test.FireplaceQu=d_test.FireplaceQu.fillna('NA')","199de44a":"d_test.MSZoning = d_test.MSZoning.fillna('RM')","ce786a4c":"d_test.KitchenQual=d_test.KitchenQual.fillna('TA')","9dfe0ea8":"d_test.Exterior1st = d_test.Exterior1st.fillna('Other')\nd_test.Exterior2nd = d_test.Exterior2nd.fillna('Other')","32cfbafa":"d_test.SaleType=d_test.SaleType.fillna('Other')","d66ecb18":"d_test.GarageArea=d_test.GarageArea.fillna(0)","172317e6":"d_train.info()","5f240ce8":"sns.scatterplot(x='LotFrontage',y='SalePrice',data = d_train)\nplt.show()","e12cd63c":"sns.scatterplot(x='TotalSF',y='SalePrice',data = d_train)\nplt.show()","f3f3fc65":"d_train = d_train[(d_train.TotalSF<7500)]","48c4eae3":"d_train.info()","eef46dd7":"d_train.OverallQual = d_train.OverallQual.astype('category')","0b7e7693":"d_train.OverallCond = d_train.OverallCond.astype('category')","82474d7f":"d_test.OverallQual = d_test.OverallQual.astype('category')","6c24b064":"d_test.OverallCond = d_test.OverallCond.astype('category')","383283cd":"for i in d_train.columns:\n        if(d_train[i].dtype=='object'):\n            d_train[i]=d_train[i].astype('category')\n        else:\n            pass","3f0e0039":"for i in d_test.columns:\n        if(d_test[i].dtype=='object'):\n            d_test[i]=d_test[i].astype('category')\n        else:\n            pass","6864fdd6":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","14d02d07":"X = d_train.drop('SalePrice',axis =1)\ny = d_train.SalePrice","a340440e":"X =pd.get_dummies(X,drop_first=True)","8cbb9416":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","0eb9f036":"scaler = preprocessing.StandardScaler()\nscaler = scaler.fit(X_train)\n\nX_train_transformed = scaler.transform(X_train)\n\n\nX_test_transformed = scaler.transform(X_test)","84b6e6d5":"X_data = pd.get_dummies(X,drop_first=True)","88a9299e":"import statsmodels.api as sm","179d6ad9":"X_Stats = sm.add_constant(X_train)\nX_Stats_Test = sm.add_constant(X_test)","52b6f893":"stat_mod =sm.OLS(y_train,X_Stats).fit()","807c7a3a":"stat_mod.summary()","2a0d6fbf":"y_stat_pred = stat_mod.predict(X_Stats)\nresiduals =stat_mod.resid\nprint(stat_mod.rsquared)","57b27473":"ax = sns.residplot(y_stat_pred, residuals, lowess = True, color = \"b\")\nax.set(xlabel='Fitted Value', ylabel='Residuals', title = 'Residual Vs Fitted values PLOT \\n')\nplt.show()","061f24b6":"from sklearn import linear_model\nfrom sklearn.metrics import r2_score,mean_squared_error","f6602229":"model = linear_model.LinearRegression()","bf828388":"model.fit(X_train,y_train)","b24a3825":"y_pred = model.predict(X_test)","eab58b07":"print(\"R2 SCORE OF TRAIN DATA:\",round(r2_score(y_pred,y_test)*100,2),'%')\nprint(\"RMSE OF TRAIN DATA:\",np.sqrt(mean_squared_error(y_test,y_pred)))\n\n\n","5255c80b":"from sklearn.linear_model import Ridge\nrd=Ridge(alpha=0.3, normalize=True)\nrd.fit(X_test,y_test)\nprint(\"Ridge Regression Score:\",rd.score(X_test,y_test))\nrmse = np.sqrt(mean_squared_error(rd.predict(X_train), y_train))\nprint(\"RMSE:\",rmse)\nprint(\"\\n********************************\\n\")\nfrom sklearn.linear_model import Lasso\nla=Lasso(alpha=5, normalize=True)\nla.fit(X_test,y_test)\nprint(\"Lasso Regression score: \",la.score(X_train,y_train))\nrmse = np.sqrt(mean_squared_error(la.predict(X_train), y_train))\nprint(\"RMSE:\",rmse)\nprint(\"\\n********************************\\n\")\nfrom sklearn.linear_model import ElasticNet\nregr = ElasticNet(alpha = 0.1,random_state=1,max_iter=40000)\nregr.fit(X_test, y_test) \nprint(\"Elastic net score: \",regr.score(X_train,y_train))\nrmse = np.sqrt(mean_squared_error(regr.predict(X_train), y_train))\nprint(\"RMSE:\",rmse)\nprint(\"\\n********************************\\n\")","553726d8":"final_pred = regr.predict(X_data)","fcaa1cec":"d_t = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c79bedeb":"final_file = pd.DataFrame({'Id':d_t.Id[:-1],'SalePrice':final_pred})","fb9e2c55":"final_file.to_csv('Submission.csv',index=False)","0103f62a":"#These, are few of the different advanced regression models that are used to predict the house prices.","d8d206fe":"from sklearn.ensemble import GradientBoostingRegressor","50ebfbcf":"clf =GradientBoostingRegressor(alpha=0.1,n_estimators= 200, max_depth= 4, min_samples_split=2,learning_rate = 0.01, loss= 'ls')\n\nclf.fit(X_train, y_train)\n","36c2c1e6":"print(\"Gradient Boosted Score: \",clf.score(X_train,y_train))","219975d8":"rmse = np.sqrt(mean_squared_error(y_test, clf.predict(X_test)))\nprint(\"RMSE: %.4f\" % rmse)","df320be4":"# DATA PREPROCESSING","9af088e8":"# LOAD THE DATASET","60fb4979":"Eliminate Id column from both the datasets as it is of no importance.","1123bd55":"We can see a high correlation between features :\n\n* 1stFlrSF - TotalBsmtSF = 0.82\n* TotRmsAbvGrd - GrLivArea = 0.83\n* GarageArea -GarageCars = 0.88\n* GarageYrBlt - YearBuilt = 0.83\n* SalePrice - OverallQual = 0.79\n* SalePrice - GrLivArea = 0.71\n","efbf64f2":"FOR THE TEST DATASET","bd048a66":"# LINEAR REGRESSION USING SKLEARN","aa2cd9e9":"# ADVANCED REGRESSION TECHNIQUES","098acd4c":"FOR THE TRAIN DATASET","e8ee3a0b":"We, notice 'Alley','PoolQC','Fence','MiscFeature' features suffer from high amount of null values. (Almost 90%).And have, less significance to the data, hence they can be dropped.","1f64bbb7":"# LOAD THE REQUIRED LIBRARIES","d3bad9b8":"# ENSEMBLE : GRADIENT BOOSTING REGRESSOR","dfd93ed9":"CORELATION ANALYSIS","f228086d":"# EXPLORATORY DATA ANALYSIS","43ebb206":"NULL VALUE TREATMENT","ccfc6a97":"# Stats Model :Multiple Regression","18ed7cd6":"Are the outliers in the feature and can be removed.These two points lie above 7500.","bd63d55d":"From analysis and intutuion we decide to drop correlated features, and in case of Square feet related features, since they are related , we can sum them up to equal the entire buildings square feet , and reduce them into a single feature.","604401a3":"Convert Categorical fields into categorical data type.","266b83a9":"# PRELIMINARY ANALYSIS"}}