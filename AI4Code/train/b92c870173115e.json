{"cell_type":{"ffbfa32a":"code","6034fe6a":"code","064e8f12":"code","20e08fe7":"code","841b0d8d":"code","aa0d5fdd":"code","0a83fac8":"code","142d72d5":"code","afe077ee":"code","c34cf345":"code","52e9d4e9":"code","0b8cb6b4":"code","323c88c1":"code","7aa38915":"code","968d0f20":"code","d2559772":"code","b138bfdb":"code","6af8fae8":"code","558d5e34":"code","64244b6c":"code","d95c708e":"code","b393c1b7":"code","d9623b24":"code","60a9993d":"code","3c3526c9":"code","fcd275f4":"code","c44975fa":"code","5a6d058d":"code","0ad90fab":"code","b38eca94":"code","27c0e372":"code","df2780b4":"code","b241c22a":"code","aa81d65b":"code","46d8bcbc":"code","b7806a77":"code","00ccedcc":"code","f0b6cfa5":"code","faa9f981":"code","53891e9c":"code","af00591a":"code","41c1e6f0":"code","e1b98c3e":"code","b5dd87a2":"code","4d090d09":"code","4481fe86":"code","a7b538bb":"markdown","e81ac4c6":"markdown"},"source":{"ffbfa32a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6034fe6a":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.ensemble import AdaBoostRegressor\n\n\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain = pd.DataFrame(df_train)\ntest = pd.DataFrame(df_test)","064e8f12":"train.info()","20e08fe7":"test.info()","841b0d8d":"train.dtypes","aa0d5fdd":"train = train.drop(['Alley', 'PoolQC','FireplaceQu','MiscFeature', 'Fence', 'LotFrontage', 'Id' ], axis = 1)","0a83fac8":"test = test.drop(['Alley', 'PoolQC','FireplaceQu','MiscFeature', 'Fence', 'LotFrontage','Id' ], axis = 1)","142d72d5":"object1 = train.select_dtypes(include=['object']).columns\nobject1\n","afe077ee":"object_test = test.select_dtypes(include=['object']).columns\nobject_test","c34cf345":"integer = train.select_dtypes(include=['int64']).columns\ninteger","52e9d4e9":"integer_test = test.select_dtypes(include=['int64']).columns\ninteger_test","0b8cb6b4":"float1 = train.select_dtypes(include=['float64']).columns\nfloat1\n\n","323c88c1":"float_test = test.select_dtypes(include=['float64']).columns\nfloat_test","7aa38915":"for column in object1:\n    train[column].fillna(train[column].mode()[0], inplace = True)\n    #test[column].fillna(test[column].mode()[0], inplace=True)","968d0f20":"for column in object_test:\n    #train[column].fillna(train[column].mode()[0], inplace = True)\n    test[column].fillna(test[column].mode()[0], inplace=True)","d2559772":"for column in integer:\n    train[column].fillna(train[column].mean, inplace = True)\n    #test[column].fillna(test[column].mean(), inplace=True) # does not conatin sale price ","b138bfdb":"for column in integer_test:\n    #train[column].fillna(train[column].mean, inplace = True)\n    test[column].fillna(test[column].mean(), inplace=True) ","6af8fae8":"for column in float1:\n    train[column].fillna(train[column].mean(), inplace = True)\n    test[column].fillna(test[column].mean(), inplace=True)","558d5e34":"for column in float_test:\n    #train[column].fillna(train[column].mean(), inplace = True)\n    test[column].fillna(test[column].mean(), inplace=True)","64244b6c":"train.head()","d95c708e":"test.head()","b393c1b7":"from sklearn.preprocessing import LabelEncoder, StandardScaler\nle= LabelEncoder()\nsc = StandardScaler()","d9623b24":"for column in object1:\n    train[column] = le.fit_transform(train[column])\n    test[column] = le.fit_transform(test[column])","60a9993d":"#test[\"BsmtFinType2\"].fillna(test[\"BsmtFinType2\"].mode()[0], inplace=True)\n#test[\"BsmtFinType1\"].fillna(test[\"BsmtFinType1\"].mode()[0], inplace=True)\n#test[\"BsmtFinSF1\"].fillna(test[\"BsmtFinSF1\"].mode()[0], inplace=True)","3c3526c9":"test.head()\ntest1 = test.copy()\ntest1.info()","fcd275f4":"X = train.drop(['SalePrice'], 1)\ny = train['SalePrice']","c44975fa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)","5a6d058d":"sc.fit(X_train, y_train)\nX_train = sc.transform(X_train)\nX_test = sc.transform(X_test)","0ad90fab":"from sklearn.linear_model import LogisticRegression, Ridge, Lasso, BayesianRidge, ridge_regression\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nlr = LogisticRegression(max_iter=1000)\nrd = Ridge()\nla = Lasso()\nbyrd = BayesianRidge()\n\nmodels = [lr, rd, la, byrd]\nfor model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mod = model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    r2_score = metrics.r2_score(y_test, y_pred)\n    RMSE = np.sqrt(metrics.mean_squared_error(y_test,y_pred))\n    print('\\n', model,'\\n', 'R2_score:', r2_score,'\\n', 'RMSE:', '\\n', RMSE, '\\n')","b38eca94":"test1 = sc.transform(test1)","27c0e372":"byrd.fit(X_train, y_train)\ny_pred = model.predict(test1).round(3)\nprint(y_pred)","df2780b4":"test_prediction_byrd = pd.DataFrame(y_pred, columns=['SalePrice'])\ntest_prediction_byrd.head()","b241c22a":"ID = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_id = ID['Id']\nID = pd.DataFrame(test_id, columns=['Id'])","aa81d65b":"result = pd.concat([ID,test_prediction_byrd], axis=1)\nresult","46d8bcbc":"result.to_csv('submission.csv',index =False)","b7806a77":"import tensorflow as tf","00ccedcc":"ann = tf.keras.models.Sequential()","f0b6cfa5":"ann.add(tf.keras.layers.Dense(units=64, activation='relu'))","faa9f981":"ann.add(tf.keras.layers.Dense(units=16, activation='relu'))\nann.add(tf.keras.layers.Dense(units=8, activation='relu'))","53891e9c":"ann.add(tf.keras.layers.Dense(units=1, activation='relu'))","af00591a":"ann.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = ['mse'])","41c1e6f0":"ann.fit(X_train, y_train, batch_size = 32, epochs = 1000)","e1b98c3e":"y_ann = ann.predict(test1)","b5dd87a2":"test_ann = pd.DataFrame(y_ann, columns=['SalePrice'])","4d090d09":"result_ann = pd.concat([ID,test_ann], axis=1)\nresult_ann","4481fe86":"result_ann.to_csv('submission_ann.csv',index =False)","a7b538bb":"# ANN","e81ac4c6":"***After Two Failed attempts I am submitting a new version***"}}