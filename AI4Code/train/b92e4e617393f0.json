{"cell_type":{"fbade30d":"code","b387ed30":"code","69c9dde7":"code","5f12a2c9":"code","b89dc9e1":"code","f4d059a0":"code","287fc1ff":"code","e07b8b28":"code","8330ffb2":"code","34b3ceb7":"code","58adc76d":"code","47a86996":"code","bbc82453":"code","3a37bdaf":"code","d487c766":"code","e76ad568":"code","891fbfd3":"code","0daf4091":"code","6314cab7":"markdown","a1f84114":"markdown","9d3f730a":"markdown","7ebb1cb3":"markdown","e8d4386b":"markdown","9a23f9f5":"markdown","76ffe089":"markdown","45753eba":"markdown","b543d4eb":"markdown","fe76e093":"markdown","544970e4":"markdown","c805ed4b":"markdown","301a9623":"markdown","a29a37a8":"markdown","c00a1e96":"markdown"},"source":{"fbade30d":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt ","b387ed30":"dataset = pd.read_csv('..\/input\/churn-predictions-personal\/Churn_Predictions.csv')","69c9dde7":"dataset.head()","5f12a2c9":"x= dataset.iloc[:, 3:13]\ny= dataset.iloc[: ,13]","b89dc9e1":"geography = pd.get_dummies(x[\"Geography\"], drop_first= True)\ngender = pd.get_dummies(x[\"Gender\"], drop_first=True)","f4d059a0":"x=pd.concat([x,geography,gender], axis=1)","287fc1ff":"x.head()","e07b8b28":"x=x.drop(['Geography','Gender'],axis=1)","8330ffb2":"x.head()","34b3ceb7":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2 , random_state =0)","58adc76d":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","47a86996":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Embedding, Flatten, LeakyReLU, BatchNormalization, Dropout\nfrom keras.activations import relu, sigmoid","bbc82453":"def create_model(layers, activation):\n    model = Sequential()\n    for i, nodes in enumerate(layers):\n        if i==0:\n            model.add(Dense(nodes,input_dim=x_train.shape[1]))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n        else:\n            model.add(Dense(nodes))\n            model.add(Activation(activation))\n            model.add(Dropout(0.3))\n            \n    model.add(Dense(units = 1, kernel_initializer= 'glorot_uniform', activation = 'sigmoid')) # Note: no activation beyond this point\n    \n    model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])\n    return model\n    \nmodel = KerasClassifier(build_fn=create_model, verbose=0)\n\n\nlayers = [(20,), (40, 20), (45, 30, 15)]\nactivations = ['sigmoid', 'relu']\nparam_grid = dict(layers=layers, activation=activations, batch_size = [128, 256], epochs=[30])\ngrid = GridSearchCV(estimator=model, param_grid=param_grid,cv=5)","3a37bdaf":"grid_result = grid.fit(x_train, y_train)","d487c766":"print(grid_result.best_score_,grid_result.best_params_)","e76ad568":"y_pred= grid.predict(x_test)\ny_pred = (y_pred>0.5)","891fbfd3":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","0daf4091":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(y_test, y_pred)\nscore","6314cab7":"Feature Scaling ","a1f84114":"Assigning Dependent and Independent Variables","9d3f730a":"COoncatinating DUmmy Variables","7ebb1cb3":"**Data Preprocessing","e8d4386b":"Calcuting the accuracy","9a23f9f5":"Predicting the test set results","76ffe089":"Importing the data","45753eba":"Importing Keras and other relevant libraries","b543d4eb":"Splitting the training and testing data","fe76e093":"Making the confusion Matrix\n","544970e4":"Creating Dummy Variables for ","c805ed4b":"To identify the best parameter","301a9623":"Building the Artificial Neural Network","a29a37a8":"Deleting the orginal geography and gender column","c00a1e96":"Hyperparameter tuning"}}