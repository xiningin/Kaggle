{"cell_type":{"7f1c5f7a":"code","cabe8b17":"code","58539e3b":"code","dc4b77e9":"code","2989d054":"code","b440497f":"code","7f6c537c":"code","227ef85f":"code","e3c0ab54":"code","210b42c4":"code","fa3e733f":"code","4230d46a":"code","b4b14c41":"code","b09195ac":"code","3071a0f4":"code","0ebb5b9c":"code","6561bacd":"code","319ad65f":"code","8f3356f0":"code","631c0d74":"code","2e2a8130":"code","b6049e1f":"code","fff02638":"code","8cf38a9b":"code","5a8b0131":"code","2308d05c":"code","17d23fb7":"code","3ced209f":"code","7e742fb0":"code","f59da975":"code","984c3a7f":"code","f8845ae6":"code","36c90d47":"code","0950142f":"code","d102a25c":"markdown","ae93b5eb":"markdown","c344f04d":"markdown","ca554e5a":"markdown"},"source":{"7f1c5f7a":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","cabe8b17":"X_train.head()","58539e3b":"y_train.head()","dc4b77e9":"X_train.info()","2989d054":"# null\uac12\uc774 \uc788\ub294 column\ub4e4\uc744 \ub2e4\uc2dc \uc0b4\ud3b4\ubcf8\ub2e4\n# \uba3c\uc800 train\uacfc test column\uc744 \ubaa8\ub450 \ud569\uce5c\ub2e4.\ntrain_idx = list(X_train.index)\ntest_idx = list(X_test.index) # test data\ub97c \ubcf4\uc874\ud558\uae30 \uc704\ud568\n\ny_train.drop(['Id'], axis=1, inplace=True)\ny_test.drop(['Id'], axis=1, inplace=True)\n\ntrain = pd.concat([X_train, y_train], axis=1)\ntest = pd.concat([X_test, y_test], axis=1)\n\nagg = pd.concat([train, test], axis=0)\nfor col in agg.columns:\n    if np.sum(agg[col].isnull()) > 0:\n        print(col, agg[col].dtype, np.sum(agg[col].isnull()))","b440497f":"# MasVnr - Type\uacfc Area\uc758 null value\ub4e4\uc758 index\uac00 \uac19\uc740\uc9c0 \ud655\uc778\nagg_null = agg.isnull()\nmv_null = agg_null[['MasVnrType', 'MasVnrArea']]\ntpe = mv_null[mv_null['MasVnrType'] == True].index\narea = mv_null[mv_null['MasVnrArea'] == True].index\nprint(tpe == area)","7f6c537c":"# \ub530\ub77c\uc11c MasVnr\uc758 \uacbd\uc6b0 \uacb0\uce21\uce58\ub97c \uc81c\uac70\ud568\n# \uadf8 \uc804\uc5d0 test index\uc5d0 tpe\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ntpe_test = [idx for idx in list(tpe) if idx in list(test_idx)]\nprint(tpe_test)","227ef85f":"# test_idx\uc5d0\uc11c tpe_test \uc778\ub371\uc2a4 \uc0ad\uc81c\nprint(len(test_idx))\ntest_idx.remove(tpe_test[0])\ntest_idx.remove(tpe_test[1])\nprint(len(test_idx))\n\n# tpe \uc81c\uac70\nprint(agg.shape)\nagg.drop(tpe, axis=0, inplace=True)\nprint(agg.shape)","e3c0ab54":"# Electrical \uc5ed\uc2dc \uacb0\uce21\uce58 \uc81c\uac70\nelec_null = agg_null[agg_null['Electrical'] == True]\nprint(elec_null.index)\n\nelec_test = [idx for idx in list(elec_null.index) if idx in list(test_idx)]\nprint(elec_test)","210b42c4":"agg.drop(elec_null.index, axis=0, inplace=True)\nprint(agg.shape)","fa3e733f":"# Garage\uc758 \uacbd\uc6b0 type-year-finish-qual-cond\uac00 \uc11c\ub85c \uc774\uc5b4\uc9c4 column, year\ub294 \ucd5c\ube48\uac12\uc73c\ub85c, \ub098\uba38\uc9c0\ub294 'None\uc73c\ub85c \ucc44\uc6c0'\nagg['GarageType'].fillna('None', inplace=True)\nagg['GarageFinish'].fillna('None', inplace=True)\nagg['GarageQual'].fillna('None', inplace=True)\nagg['GarageCond'].fillna('None', inplace=True)\n\ngyear_mode = agg['GarageYrBlt'].mode()\nagg['GarageYrBlt'].fillna(int(gyear_mode[0]), inplace=True)","4230d46a":"qualnull = agg_null[agg_null['BsmtQual'] == True].index\nexpnull = agg_null[agg_null['BsmtExposure'] == True].index\n\nprint(qualnull)\nprint(expnull)\n\nnot_exp = [i for i in expnull if i not in qualnull]\nnot_exp","b4b14c41":"# 948\ud589 \uc9c0\uc6b0\uae30\nprint(len(test_idx))\nif not_exp[0] in test_idx:\n    test_idx.remove(not_exp[0])\nelse:\n    pass\nprint(len(test_idx))\n\nagg.drop(not_exp[0], axis=0, inplace=True)","b09195ac":"# LotFrontage\ub294 \uc911\uac04\uac12\uc73c\ub85c, \ub098\uba38\uc9c0\ub294 'None'\uc73c\ub85c \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\nagg['LotFrontage'].fillna(agg['LotFrontage'].median(), inplace=True)\n\nnonefeat = ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n            'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature']\nfor col in nonefeat:\n    agg[col].fillna('None', inplace=True)\n\nprint(agg.shape)","3071a0f4":"cat_features = [col for col in agg.select_dtypes(include=object).columns]\nprint(cat_features)","0ebb5b9c":"num_features = [col for col in agg.select_dtypes(include=[int, float]).columns]\nprint(num_features)","6561bacd":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nagg[cat_features] = agg[cat_features].apply(le.fit_transform)\n\nagg.head()","319ad65f":"for num_col in num_features:\n    q1 = agg[num_col].quantile(q=0.25)\n    q3 = agg[num_col].quantile(q=0.75)\n    iqr = q3 - q1\n    outliers = agg[(agg[num_col] < q1-(1.5*iqr)) | agg[num_col] > q3+(1.5*iqr)]\n    print(num_col, ':', len(outliers))","8f3356f0":"# MSSubclass\uc758 \uacbd\uc6b0 \uce74\ud14c\uace0\ub9ac \ubcc0\uc218\uc774\ubbc0\ub85c label encoding \uc9c4\ud589\ncat_features.append('MSSubClass')\nnum_features.remove('MSSubClass')\n\nagg['MSSubClass'] = agg['MSSubClass'].map(lambda x: str(x))\n\nle = LabelEncoder()\nagg['MSSubClass'] = le.fit_transform(agg['MSSubClass']) ","631c0d74":"# \ub113\uc774, \uae38\uc774, \uae08\uc561\uc740 \ubaa8\ub450 \ub85c\uadf8\ubcc0\ud658\nmeasures = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', \n            '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', \n            '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice']\n\n# target\ub3c4 \ub85c\uadf8\ubcc0\ud658 - \ub098\uc911\uc5d0 \ub2e4\uc2dc \uc9c0\uc218\ubcc0\ud658\ud574\uc904 \uc608\uc815\nfor mcol in measures:\n    if 0 in agg[mcol]:\n        agg[mcol] = np.log1p(agg[mcol])\n    else:\n        agg[mcol] = np.log(agg[mcol])","2e2a8130":"years = ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold']\nfor yr in years:\n    agg[yr] = agg[yr].map(lambda x: int(x))\n    \nagg[years].head()","b6049e1f":"# Sold Year\uc5d0\uc11c Year built\ub97c \ube7c\uc90c\uc73c\ub85c\uc368 \uc900\uacf5 \ud6c4 \uba87 \ub144 \ub4a4\uc5d0 \ud314\uc558\ub294\uc9c0\ub97c \uce21\uc815\nagg['YrSold'] = agg['YrSold'] - agg['YearBuilt']","fff02638":"agg.head()","8cf38a9b":"# \ub2e4\uc2dc train\uacfc test\ub85c \ubd84\ub9ac\ntest = agg.loc[test_idx]\ntrain = agg.drop(test_idx, axis=0)\n\nX_train = train.drop(['SalePrice'], axis=1)\ny_train = train['SalePrice']\nX_test = test.drop(['SalePrice'], axis=1)\ny_test = test['SalePrice']\n\nprint(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)\n\ntrain_idx[:5]","5a8b0131":"# import sklearn\n# help(sklearn.metrics)","2308d05c":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error, make_scorer","17d23fb7":"def custom(y_true, y_pred):\n    return (-1) * mean_squared_log_error(y_true, y_pred)\n\nneg_msle = make_scorer(custom, greater_is_better=True)","3ced209f":"rf = RandomForestRegressor(random_state=42)\ngbr = GradientBoostingRegressor(random_state=42)\nxgb = XGBRegressor(random_state=42)","7e742fb0":"models = [rf, gbr, xgb]\nfor model in models:\n    name = model.__class__.__name__\n    msles = cross_val_score(model, X=X_train, y=y_train, cv=5, scoring=neg_msle, n_jobs=-1)\n    score = (-1) * np.mean(msles)\n    rmsle = np.sqrt(score)\n    \n    print('Model %s - RMSLE: %.4f' % (name, rmsle))","f59da975":"# help(GradientBoostingRegressor)","984c3a7f":"# param_grid = {\n#     'max_depth': [3, 5, 7],\n#     'n_estimators': [100, 300, 500],\n#     'learning_rate': [0.01, 0.05, 0.1],\n#     'min_samples_split': [2, 3, 4, 5],\n#     'min_samples_leaf': [1, 2, 3],\n#     'random_state': [42]\n# }\n\n# search = GridSearchCV(gbr, param_grid=param_grid, cv=5, scoring=neg_msle, n_jobs=-1)\n# search.fit(X_train, y_train)\n# print('Best params: {}, Best score: {}'.format(search.best_params_, search.best_score_))","f8845ae6":"final_gbr = GradientBoostingRegressor()\n\nfinal_gbr.fit(X_train, y_train)\ny_pred = final_gbr.predict(X_test)\n\nexp_pred = np.exp(y_pred)\n\nprint('RMSLE: %.4f' % (np.sqrt(mean_squared_log_error(y_test, y_pred))))\nprint('RMSE: %.4f' % np.sqrt(mean_squared_error(np.exp(y_test), exp_pred)))","36c90d47":"test_id = pd.Series(test_idx)\ntest_id += 1\n\noutput = pd.DataFrame({'Id': test_id, 'SalePrice': exp_pred})\noutput.head()","0950142f":"output.to_csv(\"000000.csv\", index=False)","d102a25c":"# Label Encoding","ae93b5eb":"# Model Selection","c344f04d":"# numeric features - detect outliers","ca554e5a":"# Predict & to CSV"}}