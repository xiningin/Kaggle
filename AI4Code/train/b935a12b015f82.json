{"cell_type":{"695587e7":"code","70d19755":"code","f76ddf0e":"code","f6d0ec29":"code","13d8bd8e":"code","071aac7f":"code","d94c60ac":"code","ce2a30ae":"code","12d58059":"code","505167be":"code","6f4c4b43":"code","836821f1":"code","7dac2df0":"code","65e710ec":"code","5f656b38":"code","5628449a":"code","b7c837d0":"code","755c3051":"code","278d9c75":"code","bce3242a":"code","b3ab069f":"code","6f226716":"code","c0306e79":"code","8dc171dc":"code","e45c44fe":"markdown","2625521e":"markdown","7f3427d3":"markdown","ba873cd9":"markdown","2665cbe7":"markdown"},"source":{"695587e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","70d19755":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split","f76ddf0e":"df_train.head()","f6d0ec29":"df_train = pd.read_csv('..\/input\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/test.csv', index_col=0)","13d8bd8e":"## \u578b\u3067\u30ab\u30e9\u30e0\u308f\u3051\ntext_cols = ['RaceEthnicity', 'CurrencySymbol', 'FrameworkWorkedWith', 'CommunicationTools', 'DevType']\ncate_cols = [col for col in df_test.columns.values if (df_train[col].dtypes == 'object') and col not in text_cols] \nnum_cols = [col for col in df_test.columns.values if df_train[col].dtypes != 'object'] ","071aac7f":"## \u30c6\u30ad\u30b9\u30c8\u3001\u30ab\u30c6\u30b4\u30ea\u306e\u9078\u5225\n\ndf_train.loc[:, cate_cols].nunique().sort_values()","d94c60ac":"y_train =  df_train['ConvertedSalary']\nX_train = df_train.drop(['ConvertedSalary'], axis=1)\nX_test = df_test","ce2a30ae":"#train test \u3067\u9055\u3046\u3082\u306e\u304c\u51fa\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\n\ntmp_cols = []\nfor col in cate_cols:\n    if len(set(X_train[col].unique()) - set(X_test[col].unique())) != 0:\n        tmp_cols.append(col)\n        print(col)","12d58059":"for col in tmp_cols:\n    print(col)\n    display(X_train[col].unique())\n    display(X_test[col].unique())","505167be":"## \u6b20\u640d\u5024\u306e\u5408\u8a08\nX_train['null_count'] = X_train.isnull().sum(axis=1)\nX_test['null_count'] = X_test.isnull().sum(axis=1)","6f4c4b43":"## \u4e00\u6642\u7684\u306b\u7d50\u5408\n\nX_all = pd.concat([X_train, X_test])","836821f1":"X_all.head()","7dac2df0":"X_all.dtypes","65e710ec":"# ## \u56fd\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u524d\u56de\u3042\u3093\u307e\u52b9\u304b\u306a\u304b\u3063\u305f\u6c17\u3059\u308b\u3051\u3069\uff09\n\n# country_df = pd.read_csv('..\/input\/country_info.csv')\n# country_df['Region'] = country_df['Region'].map(country_df['Region'].value_counts())\n\n# X_all = X_all.reset_index().merge(country_df, on='Country', how='left').set_index(X_all.index.names)\n# X_all.head()","5f656b38":"## \u5e74\u9f62\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\ndef Age_to_num(col):\n    if col == '18 - 24 years old':\n        return 1\n    elif col == '25 - 34 years old':\n        return 2\n    elif col == '35 - 44 years old':\n        return 3\n    elif col == '45 - 54 years old':\n        return 4\n    elif col == '55 - 64 years old':\n        return 5\n    elif col == '65 years or older':\n        return 6\n    elif col == 'Under 18 years old':\n        return 0\n\nX_all['Age_code'] = X_all['Age'].apply(Age_to_num)","5628449a":"## \u30d0\u30a4\u30bf\u30ea\u30c6\u30a3\u306e\u30ab\u30a6\u30f3\u30c8\n\nsemi_colon_counter = lambda x: x.count(';')\nfor col in ['RaceEthnicity', 'CurrencySymbol', 'FrameworkWorkedWith', 'CommunicationTools', 'DevType']:\n    colname = col+'_semicount'\n    X_all[colname] = X_all[col].fillna('-')\n    X_all[colname] = X_all[colname].apply(semi_colon_counter)","b7c837d0":"## \u5b66\u6b74\u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\n\nphd_flg = lambda x: 1 if x == 'Other doctoral degree (Ph.D, Ed.D., etc.)' else 0\nms_flg = lambda x: 1 if x == 'aster\u2019s degree (MA, MS, M.Eng., MBA, etc.)' else 0\n\nX_all['FormalEducation_phd'] = X_all['FormalEducation'].apply(phd_flg)\nX_all['FormalEducation_ms'] = X_all['FormalEducation'].apply(ms_flg)","755c3051":"## \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n\nfor col in cate_cols:\n    X_all[col] = X_all[col].map(X_all[col].value_counts())\nX_all.loc[:, cate_cols].head()","278d9c75":"## \u30c6\u30ad\u30b9\u30c8\u5909\u6570\u306f\u4e00\u65e6\u7121\u8996\n\nX_all.drop(text_cols, axis=1, inplace=True)","bce3242a":"## -9999\u3067\u6b20\u640d\u5024\u3092\u88dc\u5b8c\nX_all.fillna(-9999, inplace=True)","b3ab069f":"X_train = X_all.loc[X_train.index, :]\nX_test = X_all.loc[X_test.index, :]","6f226716":"RANSEED = 0\nN_FOLDS = 5\n\ny_pred = np.zeros(len(X_test))\n\ndef rmsle(y_true, y_pred):\n    assert len(y_true) == len(y_pred)\n    return np.sqrt(np.mean(np.power(np.log1p(y_true + 1) - np.log1p(y_pred + 1), 2)))\n\nparams = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': 'rmsle',\n#     'max_depth': 6, \n    'learning_rate': 0.05,\n    'verbose': 0}\n\nn_estimators = 9999\nmedian_ConvertedSalary = np.median(df_train['ConvertedSalary'].values)\n\nfor i in range(N_FOLDS):\n    X_train_, X_valid_, y_train_, y_valid_ = train_test_split(X_train, y_train, test_size=0.10, random_state=i)\n    d_train = lgb.Dataset(X_train_, label=y_train_)\n    d_valid = lgb.Dataset(X_valid_, label=y_valid_)\n    watchlist = [d_valid]\n    \n    model = lgb.train(params, d_train, n_estimators, watchlist, verbose_eval=1)\n    \n    tmp_pred = model.predict(X_test)\n    tmp_pred[tmp_pred<10000] = median_ConvertedSalary\n    tmp_pred[tmp_pred>10000000] = median_ConvertedSalary\n    y_pred += tmp_pred    \n    \ny_pred \/= N_FOLDS","c0306e79":"submission = pd.read_csv('..\/input\/sample_submission.csv', index_col=0)","8dc171dc":"submission['ConvertedSalary'] = y_pred\nsubmission.to_csv('submission_base_2.csv')","e45c44fe":"## \u6b20\u640d\u5024\u88dc\u5b8c","2625521e":"## \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u51e6\u7406","7f3427d3":"## \u30e2\u30c7\u30ea\u30f3\u30b0","ba873cd9":"## \u5909\u6570\u8abf\u67fb","2665cbe7":"## \u5206\u6790\u30a4\u30f3\u30d7\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u306b\u6574\u5f62"}}