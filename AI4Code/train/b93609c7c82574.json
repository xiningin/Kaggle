{"cell_type":{"55b827b3":"code","45db8bc6":"code","14c196dc":"code","5deaeb04":"code","0ddcd0bd":"code","56d71d7c":"code","102ddede":"code","6410a250":"code","0d6dbb63":"code","d5eae06e":"code","158892da":"code","4d246b62":"code","6b278abb":"code","842bd720":"code","7f636978":"code","29a808f7":"code","5618b0b8":"code","8c56f58f":"code","e246fccd":"code","82e40dee":"code","12655484":"code","a93a875b":"code","9102fca3":"code","da862a6d":"code","3bf87cfa":"code","f6a4612a":"code","e4e29be9":"code","0289d6af":"code","5b51f0c3":"code","91b74368":"code","bd569d8a":"code","91b31098":"markdown","ebdb6d0e":"markdown","675bf417":"markdown","588bd64b":"markdown","ce86805c":"markdown","1bf15a7a":"markdown","e5af029b":"markdown"},"source":{"55b827b3":"# Libraries and some environment configurations\ntry:\n    import openpyxl\nexcept:\n    !pip install openpyxl\nimport pandas as pd\nimport re\nimport glob\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom warnings import simplefilter\nimport datetime as dt\nfrom IPython.display import Markdown as md\n# from IPython.display import Image\nimport gc\ngc.collect()\n\nsimplefilter(action=\"ignore\", category=pd.errors.PerformanceWarning)\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)\npd.set_option('display.max_columns', None)\n\npal2 = [\"#ffcbf2\",\"#f3c4fb\",\"#ecbcfd\",\"#e5b3fe\",\"#e2afff\",\"#deaaff\",\"#d8bbff\",\"#d0d1ff\",\"#c8e7ff\",\"#c0fdff\"]","45db8bc6":"# Functions that will be used in the process\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n#     print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type) == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n#     print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n#     print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True, index_col=None, header=0)\n    df = reduce_mem_usage(df)\n    return df\n","14c196dc":"product_df = pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\ndistrict_df = import_data(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\n\npath = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \nall_files = glob.glob(path + \"\/*.csv\")\nli = []\nfor filename in all_files:\n    df = import_data(filename)\n    district_id = filename.split(\"\/\")[4].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    if df.time.nunique() == 366:\n        li.append(df)\n    \nengagement_df = pd.concat(li, axis=0, ignore_index=True)\nengagement_df = engagement_df.reset_index(drop=True)\n\nengagement_df['district_id']=engagement_df['district_id'].astype(str)\ndistrict_df['district_id']=district_df['district_id'].astype(str)\ndistrict_df.loc[:,'district_id'] = district_df['district_id'].str.replace('\\.0', '')\n\n\ndel li, path, all_files\n\ngc.collect()","5deaeb04":"# Shape of the data files ( number of rows and number of columns) \nprint('\\033[1m'\"Shape of the Engagement File \"'\\033[0m',engagement_df.shape )\nprint('\\033[1m'\"Shape of the District File\"'\\033[0m', district_df.shape)\nprint('\\033[1m'\"Shape of the Product File\"'\\033[0m',product_df.shape)","0ddcd0bd":"show = district_df.head()\n\nshow = show.style.format(precision=0, na_rep='MISSING')\n\ncell_hover = {  # for row hover use <tr> instead of <td>\n    'selector': 'td:hover',\n    'props': [('background-color', '#ffffb3')]\n}\nindex_names = {\n    'selector': '.index_name',\n    'props': 'font-style: italic; color: darkgrey; font-weight:normal;'\n}\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': 'background-color: #000066; color: white;'\n}\nshow.set_table_styles([cell_hover, headers])\nshow.set_table_styles([\n    {'selector': 'th.col_heading','props': 'text-align: center; font-size:1.25em'},\n    {'selector': 'td', 'props': 'text-align: center;'},\n], overwrite=False)\nshow.set_caption(\"First 5 rows from district table\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': 'caption-side: bottom; font-size:1.25em;font-style: italic;'\n }], overwrite=False)\n\nshow.set_table_styles([  # create internal CSS classes\n    {'selector': '.border-red', 'props': 'border: 2px dashed red;'}\n], overwrite=False)\n\ncell_border = pd.DataFrame([[' ', ' ',' ',' ', ' ', ' ',' '],\n                           ['border-red ', 'border-red ', 'border-red ', 'border-red ','border-red ','border-red ','border-red '],\n                           [' ', ' ', ' ', ' ',' ',' ',' '],\n                           ['border-red ', 'border-red ', 'border-red ', 'border-red ','border-red ','border-red ','border-red '],\n                           ['border-red ', 'border-red ', 'border-red ', 'border-red ','border-red ','border-red ','border-red ']],\n                          index=show.index,\n                          columns=show.columns)\n\nshow.set_td_classes(cell_border)","56d71d7c":"district_df.iloc[district_df[(district_df.isnull().sum(axis=1) ==6)].index].count()","102ddede":"del show\ngc.collect()\n\n#district_df = district_df[['district_id','state','locale']]\ndistrict_df = district_df[district_df.state.notna()]\ndistrict_df = district_df[district_df.district_id.isin(engagement_df.district_id.unique())].reset_index(drop=True)\ndistrict_df.head()","6410a250":"show = product_df.head()\n\nshow = show.style.format(precision=0, na_rep='MISSING')\n\ncell_hover = {  # for row hover use <tr> instead of <td>\n    'selector': 'td:hover',\n    'props': [('background-color', '#ffffb3')]\n}\nindex_names = {\n    'selector': '.index_name',\n    'props': 'font-style: italic; color: darkgrey; font-weight:normal;'\n}\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': 'background-color: #000066; color: white;'\n}\nshow.set_table_styles([cell_hover, headers])\nshow.set_table_styles([\n    {'selector': 'th.col_heading','props': 'text-align: center; font-size:1.25em'},\n    {'selector': 'td', 'props': 'text-align: center;'},\n], overwrite=False)\nshow.set_caption(\"First 5 rows from product table\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': 'caption-side: bottom; font-size:1.25em;font-style: italic;'\n }], overwrite=False)","0d6dbb63":"del show\ngc.collect()\n\ntemp_sectors = product_df['Sector(s)'].str.get_dummies(sep=\"; \")\ntemp_sectors.columns = [f\"sector_{re.sub(' ', '', c)}\" for c in temp_sectors.columns]\nproduct_df = product_df.join(temp_sectors)\n\ndel temp_sectors\ngc.collect()\n\nproduct_df['primary_function_main'] = product_df['Primary Essential Function'].apply(lambda x: x.split(' - ')[0] if x == x else x)\nproduct_df['primary_function_sub'] = product_df['Primary Essential Function'].apply(lambda x: x.split(' - ')[1] if x == x else x)\n\n# Synchronize similar values\nproduct_df['primary_function_sub'] = product_df['primary_function_sub'].replace({'Sites, Resources & References' : 'Sites, Resources & Reference'})\nproduct_df.drop(\"Primary Essential Function\", axis=1, inplace=True)\nproduct_df = product_df[product_df['LP ID'].isin(engagement_df.lp_id.unique())].reset_index(drop=True)","d5eae06e":"product_df.head()","158892da":"show = engagement_df.head()\n\nshow = show.style.format(precision=0, na_rep='MISSING')\n\ncell_hover = {  # for row hover use <tr> instead of <td>\n    'selector': 'td:hover',\n    'props': [('background-color', '#ffffb3')]\n}\nindex_names = {\n    'selector': '.index_name',\n    'props': 'font-style: italic; color: darkgrey; font-weight:normal;'\n}\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': 'background-color: #000066; color: white;'\n}\nshow.set_table_styles([cell_hover, headers])\nshow.set_table_styles([\n    {'selector': 'th.col_heading','props': 'text-align: center; font-size:1.25em'},\n    {'selector': 'td', 'props': 'text-align: center;'},\n], overwrite=False)\nshow.set_caption(\"First 5 rows from engagement table\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': 'caption-side: bottom; font-size:1.25em;font-style: italic;'\n }], overwrite=False)","4d246b62":"print(len(engagement_df))\nengagement_df = engagement_df[engagement_df.lp_id.isin(product_df['LP ID'].unique())]\nprint(len(engagement_df))\nengagement_df = engagement_df[engagement_df.district_id.isin(district_df['district_id'].unique())]\nprint(len(engagement_df))","6b278abb":"print(engagement_df.isna().sum())","842bd720":"full_table = pd.merge(engagement_df,product_df, \"inner\", left_on='lp_id', right_on='LP ID')\nfull_table = pd.merge(full_table,district_df, \"inner\", on='district_id')\nfull_table = full_table[full_table.engagement_index.notna()]\nfull_table.dropna(subset = [\"state\"], inplace=True)","7f636978":"full_table.shape","29a808f7":"full_table.head()","5618b0b8":"# datetime \nfull_table[\"time\"] = pd.to_datetime(full_table.time)\nfull_table[\"week\"] = full_table.time.dt.dayofweek \nfull_table[\"holiday\"] = full_table.week.apply(lambda x: 1 if x in [5, 6] else 0)\nd = pd.date_range(start=\"2020-01-01\", end=\"2020-01-19\")\nfull_table[\"is_pandemic\"] = full_table.time.apply(lambda x: 0 if x in d else 1)\nfull_table.drop(\"week\", axis=1, inplace=True)","8c56f58f":"full_table.head()","e246fccd":"full_table[full_table.is_pandemic == 0].groupby('holiday')['pct_access'].mean()","82e40dee":"full_table[full_table.is_pandemic == 1].groupby('holiday')['pct_access'].mean()","12655484":"full_table[full_table.is_pandemic == 0].groupby('holiday')['engagement_index'].mean()","a93a875b":"full_table[full_table.is_pandemic == 1].groupby('holiday')['engagement_index'].mean()","9102fca3":"most_popular_produscts = full_table.groupby('Product Name')['engagement_index'].mean()","da862a6d":"most_popular_produscts.reset_index().sort_values(by = 'engagement_index', ascending=False, ignore_index=True).head(10)","3bf87cfa":"# AQUI ADICIONAR A AN\u00c1LISE HIST\u00d3RICA","f6a4612a":"most_engaged_states = full_table.groupby('state')['engagement_index'].mean()\nmost_engaged_states.reset_index().sort_values(by = 'engagement_index', ascending=False, ignore_index=True).head(10)","e4e29be9":"most_engaged_states = full_table.groupby('locale')['engagement_index'].mean()\nmost_engaged_states.reset_index().sort_values(by = 'engagement_index', ascending=False, ignore_index=True).head(10)","0289d6af":"most_engaged_states = full_table.groupby(['state', 'locale'])['engagement_index'].mean()\nmost_engaged_states.reset_index().sort_values(by = 'engagement_index', ascending=False, ignore_index=True).head(10)","5b51f0c3":"full_table.groupby('pct_black\/hispanic')['pct_access'].mean()","91b74368":"full_table.groupby('pct_black\/hispanic')['engagement_index'].mean()","bd569d8a":"product_df['Provider\/Company Name'].value_counts().reset_index().head(10)","91b31098":"# 3. Estados com maior engajamento","ebdb6d0e":"<h1 style=\"font-family:'lucida console';\"> <center>\ud83d\udcda DIGITAL LEARNING IN THE PANDEMIC PERIOD (2020) \ud83d\udda5\ufe0f<\/center> <\/h1>","675bf417":"# 1. Acesso e engajamento entre feriados pr\u00e9 e p\u00f3spandemia","588bd64b":"# 2. Ferramenta mais popular","ce86805c":"# 5. Empresas com maior n\u00famero de produtos","1bf15a7a":"# 4. Demografia","e5af029b":"Aqui gostaria ainda de testar se as ferramentas das empresas com mais produtos s\u00e3o aquelas com melhor aceita\u00e7\u00e3o (se isso \u00e9 correlato de alguma forma) ou algum fornecedor de apenas um produto (especializado) tem os melhores resultados."}}