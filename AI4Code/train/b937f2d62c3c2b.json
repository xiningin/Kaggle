{"cell_type":{"f099f608":"code","376e80c7":"code","669ceed1":"code","a2b207f7":"code","f1f6a371":"code","24a86709":"code","e9886675":"code","cb1249bc":"code","1b8b67b8":"code","f02867dd":"code","80b91dd5":"code","abd71d46":"code","7505c358":"code","22ffe6f1":"code","ee71c77d":"code","ae9ad670":"code","58f1b826":"code","fd9bc2ca":"code","e056462e":"code","45a928ab":"markdown","58b371c0":"markdown"},"source":{"f099f608":"import pandas as pd\nimport numpy as np\nfrom sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport glob\nimport cv2","376e80c7":"#Preparing Training data\n\npath_1 = glob.glob(\"..\/input\/sorted-cotton-data-set\/Segmented_Cotton_images\/Segmented_Cotton_images\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n =  cv2.imread(img)\n    n = cv2.resize(n,(100,100))\n    cv_img.append(n)\n    \narray1 = np.asarray(cv_img)\nprint(array1.shape)\n\n\npath_2 = glob.glob(\"..\/input\/sorted-cotton-data-set\/Segmented_weed_images\/Segmented_weed_images\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n =  cv2.imread(img)\n    n = cv2.resize(n,(100,100))\n    cv_img.append(n)\n    \narray2 = np.asarray(cv_img)\nprint(array2.shape)","669ceed1":"plt.imshow(array1[15])","a2b207f7":"plt.imshow(array2[17])","f1f6a371":"xtr = np.concatenate((array1, array2))\n#xts = np.concatenate((array3, array4))\n\nxtr.shape, #xts.shape","24a86709":"cotton = np.zeros(len(array1))\nweed = np.ones(len(array2))\n\nprint('Cotton labels =', cotton, 'Weed Labels =',weed)\nlen(cotton),len(weed)","e9886675":"ytr = np.concatenate((cotton,weed))\n#yts = np.concatenate((Bl2,Bl3))\n\nytr.shape, #yts.shape","cb1249bc":"from sklearn.model_selection import train_test_split\nxtr,xval,ytr,yval = train_test_split(xtr,ytr,test_size = 0.2, shuffle = True)\nxtr.shape,xval.shape,ytr.shape,yval.shape","1b8b67b8":"xtrnorm = xtr\/255\nxvalnorm = xval\/255\n#xtsnorm = xts\/255","f02867dd":"# Applying CNN model\nfrom keras import layers , models\nimport tensorflow as tf\ntf.random.set_seed(2)\n\nmodel = models.Sequential()\n\nmodel.add(layers.Conv2D(32,3,activation = 'relu', input_shape = (100,100,3)))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Conv2D(64,3,activation = 'relu'))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(16,activation = 'relu'))\nmodel.add(layers.Dense(1, activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy', metrics = ['acc'])\nmodel_hist = model.fit(xtr,ytr,epochs = 5, validation_data = (xval,yval),verbose = 1)\nmodel.fit(xtrnorm,ytr,epochs = 15, validation_data = (xvalnorm, yval))","80b91dd5":"#Predicting model for class \"0\" which is block_2\n\nprint(model.predict_classes(xts[[45]]))\nplt.imshow(xts[45])","abd71d46":"#Predicting model for class \"0\" which is block_3\n\nprint(model.predict_classes(xval[[3]]))\nplt.imshow(xval[3])","7505c358":"print(model.predict_classes(xval[[3]]))","22ffe6f1":"#Building and Implementing ANN model\n\ntf.random.set_seed(2)\n\namodel = models.Sequential()\namodel.add(layers.Flatten())\namodel.add(layers.Dense(32,activation = 'relu',input_shape=(100,100,3)))\namodel.add(layers.Dense(1,activation = 'relu'))\namodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy', metrics = ['acc'])\namodel_hist = amodel.fit(xtr,ytr,epochs = 5, validation_data = (xval,yval),verbose = 1)\n\nmodel.add(layers.Dense(1, activation = 'sigmoid'))\nmodel.fit(xtrnorm,ytr,epochs = 15, validation_data = (xvalnorm, yval))\n\nloss, acc = amodel.evaluate(xval,yval,verbose = 1)","ee71c77d":"#Summary for ANN model\namodel.summary()","ae9ad670":"##Summary for CNN model\nmodel.summary()","58f1b826":"#Evaluating CNN model\nev1 = model.evaluate(xval,yval)\nev1","fd9bc2ca":"#Evaluating ANN model\nev2 = amodel.evaluate(xval,yval)\nev2","e056462e":"# plotting Accuracy \nplt.bar(['Cnn Acc','Ann Acc'],[ev1[1],ev2[1]])","45a928ab":"#Preparing Testing  data\n\n\npath_1 = glob.glob(\"..\/input\/block2-block3-images\/Dataset\/Block_2\/test\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n =  cv2.imread(img)\n    n = cv2.resize(n,(100,100))\n    cv_img.append(n)\n    \narray3 = np.asarray(cv_img)\nprint(array3.shape)\n\n\npath_2 = glob.glob(\"..\/input\/block2-block3-images\/Dataset\/Block_3\/test\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n =  cv2.imread(img)\n    n = cv2.resize(n,(100,100))\n    cv_img.append(n)\n    \narray4 = np.asarray(cv_img)\nprint(array4.shape)","58b371c0":"Bl2 = np.zeros(len(array3))\nBl3 = np.ones(len(array4))\n\nprint('Block2 labels =', Bl2, 'Block3 Labels =',Bl3)\nlen(Bl2),len(Bl3)"}}