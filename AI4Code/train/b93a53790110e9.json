{"cell_type":{"79c97f13":"code","26904944":"code","ced3cd85":"code","2bd203a6":"markdown"},"source":{"79c97f13":"%%writefile submission.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport random\nimport numpy as np\n\ndirections = {0:'EAST', 1:'NORTH', 2:'WEST', 3:'SOUTH', 'EAST':0, 'NORTH':1, 'WEST':2, 'SOUTH':3}\n\n\ndef move(loc, direction):\n    \"\"\"Move the whole snake in the given direction\"\"\"\n    global directions\n    direction = directions[direction]\n    new_loc = []\n    if direction == 'EAST':\n        new_loc.append(int(11*(loc[0]\/\/11)  + (loc[0]%11 + 1)%11))\n    elif direction == 'WEST':\n        new_loc.append(int(11*(loc[0]\/\/11) + (loc[0]%11 + 10)%11))\n    elif direction == 'NORTH':\n        new_loc.append(int(11*((loc[0]\/\/11 + 6)%7) + loc[0]%11))\n    else:\n        new_loc.append(int(11*((loc[0]\/\/11 + 1)%7) + loc[0]%11))\n    if len(loc) == 1:\n        return new_loc\n    return new_loc + loc[:-1]\n    \n\ndef greedy_choose(head, board):\n    move_queue = []\n    visited = [[[100, 'NA'] for _ in range(11)] for l in range(7)]\n    visited[head\/\/11][head%11][0] = 0\n    \n    for i in range(4):\n        move_queue.append([head, [i]])\n    \n    while len(move_queue) > 0:\n        now_move = move_queue.pop(0)\n        \n        next_step = move([now_move[0]], now_move[1][-1])[0]\n        \n        if board[next_step\/\/11][next_step%11] < 0:\n            continue\n        \n        if len(now_move[1]) < visited[next_step\/\/11][next_step%11][0]:\n            visited[next_step\/\/11][next_step%11][0] = len(now_move[1])\n            visited[next_step\/\/11][next_step%11][1] = now_move[1][0]\n            for i in range(4):\n                move_queue.append([next_step, now_move[1] + [i]])\n        \n        if board[next_step\/\/11][next_step%11] > 0:\n            return now_move[1][0]\n    return random.randint(0,3)\n    \n    \n    \ndef agent(obs, conf):\n    global directions\n\n    obs = Observation(obs)\n    conf = Configuration(conf)\n    board = np.zeros((7, 11), dtype=int)\n    \n    #Obstacle-ize your opponents\n    for ind, goose in enumerate(obs.geese):\n        if ind == obs.index or len(goose) == 0:\n            continue\n        for direction in range(4):\n            moved = move(goose, direction)\n            for part in moved:\n                board[part\/\/11][part%11] -= 1\n    \n    #Obstacle-ize your body, except the last part\n    if len(obs.geese[obs.index]) > 1:\n        for k in obs.geese[obs.index][:-1]:\n            board[k\/\/11][k%11] -= 1\n            \n    #Count food only if there's no chance an opponent will meet you there\n    for f in obs.food: \n        board[f\/\/11][f%11] += (board[f\/\/11][f%11] == 0)\n        \n    return directions[greedy_choose(obs.geese[obs.index][0], board)]","26904944":"!pip install kaggle-environments --upgrade -q\n\nfrom kaggle_environments import make\nenv = make(\"hungry_geese\", debug=True)","ced3cd85":"env.run(['submission.py', 'submission.py', 'submission.py', 'submission.py'])\nenv.render(mode='ipython')","2bd203a6":"Agreeably not the most efficient way to find food, but it does take care of most often-ly faced situations. Is wary of obstacles of one step ahead."}}