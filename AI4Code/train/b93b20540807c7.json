{"cell_type":{"a4e8a0ab":"code","fc5564f6":"code","dab400a7":"code","4ba8e3bd":"code","19e73b57":"code","5d54d80c":"code","0a1e52a2":"code","129a7eda":"code","df8fb2d6":"code","750a0fbf":"code","e20800b9":"code","8984ecb2":"code","e1d6a9d1":"code","1fb818f4":"code","fbbf1034":"markdown","990821f8":"markdown","f26ef3b6":"markdown","0cca3af7":"markdown","0643febe":"markdown","35a56045":"markdown","edecaa92":"markdown","74ac3df6":"markdown","4951b658":"markdown"},"source":{"a4e8a0ab":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import KNNImputer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fc5564f6":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","dab400a7":"MSZoning = {'RH' : 0,'RM' : 1,'RL' : 2,'FV' : 3,'C (all)' : 4}\nAccess = {'Grvl' : 1,'Pave' : 2}\nLotShape = {'IR3' : 0,'IR2' : 1,'IR1' : 2,'Reg' : 3}\nLandContour = {'Low' : 0,'Lvl' : 1,'Bnk' : 2,'HLS' : 3}\nUtilities = {'EL0' : 0,'NoSeWa' : 1,'NoSewr' : 2,'AllPub' : 3}\nLotConfig = {'FR3' : 0,'FR2' : 1,'Corner' : 2,'Inside' : 3,'CulDSac' : 4}\nLandSlope = {'Sev' : 0,'Mod' : 1,'Gtl' : 2}\nNeighborhood = {'Timber' : 0,'Mitchel' : 1,'MeadowV' : 1,'BrDale' : 2,'Blmngtn' : 2,'StoneBr' : 2,'NAmes' : 2,'Crawfor' : 3,'Blueste' : 3,'IDOTRR' : 3,'OldTown' : 3,'NWAmes' : 3,'BrkSide' : 4,'ClearCr' : 4,'Veenker' : 4,'CollgCr' : 4,'SWISU' : 4,'NridgHt' : 5,'NPkVill' : 5,'Somerst' : 5,'NoRidge' : 5,'SawyerW' : 6,'Sawyer' : 6,'Edwards' : 6,'Gilbert' : 7}\nCondition = {'RRAn' : 0,'RRAe' : 0,'RRNn' : 1,'RRNe' : 1,'Feedr' : 2,'Artery' : 3,'Norm' : 4,'PosN' : 5,'PosA' : 6}\nBldgType = {'Twnhs' : 0,'TwnhsE' : 1,'Duplex' : 2,'2fmCon' : 3,'1Fam' : 4}\nHouseStyle = {'1Story' : 0,'1.5Unf' : 1,'1.5Fin' : 2,'2Story' : 3,'SFoyer' : 3,'SLvl' : 3,'2.5Unf' : 4,'2.5Fin' : 5}\nRoofStyle = {'Flat' : 0,'Shed' : 1,'Gable' : 2,'Hip' : 3,'Gambrel' : 4,'Mansard' : 5}\nRoofMatl = {'WdShake' : 0,'Tar&Grv' : 1,'Roll' : 2,'Membran' : 3,'WdShngl' : 4,'Metal' : 5,'CompShg' : 6,'ClyTile' : 7}\nMasVnrType = {'None' : 0,'BrkCmn' : 1,'BrkFace' : 2,'CBlock' : 3,'Stone' : 4}\nQualCond = {'Po' : 1,'No' : 1,'Fa' : 2,'Mn' : 2,'TA' : 3,'Av' : 3,'Gd' : 4,'Ex' : 5}\nExterior = {'AsbShng' : 0,'Other' : 0,'AsphShn' : 1,'VinylSd' : 2,'CemntBd' : 3,'CmentBd' : 3,'Plywood' : 4,'ImStucc' : 5,'MetalSd' : 6,'Wd Sdng' : 7,'Stucco' : 8,'Wd Shng' : 9,'WdShing' : 9,'BrkComm' : 10,'Brk Cmn' : 10,'BrkFace' : 11,'HdBoard' : 12,'CBlock' : 13,'Stone' : 14}\nFoundation = {'Wood' : 0,'Stone' : 1,'BrkTil' : 2,'Slab' : 3,'CBlock' : 4,'PConc' : 5}\nCentralAir = {'Y' : 1,'N' : 0}\nFunctional = {'Sev' : 0,'Maj2' : 1,'Maj1' : 2,'Mod' : 3,'Min2' : 4,'Min1' : 5,'Typ' : 6}\nPavedDrive = {'N' : 0,'P' : 1,'Y' : 2}\nBsmtFinType = {'Unf' : 1,'LwQ' : 2,'Rec' : 3,'BLQ' : 4,'ALQ' : 5,'GLQ' : 6}\nHeating = {'Wall' : 0,'Grav' : 1,'GasA' : 2,'OthW' : 3,'GasW' : 4,'Floor' : 5}\nElectrical = {'FuseP' : 0,'Mixed' : 1,'Mix' : 1,'FuseF' : 2,'FuseA' : 3,'SBrkr' : 4}\nGarageType = {'Detchd' : 1,'CarPort' : 2,'BultIn' : 3,'Basment' :4,'Attchd' : 5,'2Types' : 6}\nGarageFinish = {'Unf' : 1,'RFn' : 2,'Fin' : 3}\nFence = {'MnWw' : 1,'GdWo' : 2,'MnPrv' : 3,'GdPrv' : 4}\nMiscFeature = {'Shed' : 1,'TenC' : 2,'Other' : 3,'Gar2' : 4}\nSaleType = {'Oth' : 0,'ConLD' : 1,'ConLI' : 2,'ConLw' : 3,'Con' : 4,'COD' : 5,'New' : 6,'CWD' : 7,'WD' : 8}\nSaleCondition = {'Partial' : 0,'Abnorml' : 1,'Family' : 2,'Normal' : 3,'AdjLand' : 4,'Alloca' : 5}","4ba8e3bd":"train['MSZoning'] = train['MSZoning'].map(MSZoning)\ntrain['Street'] = train['Street'].map(Access)\ntrain['Alley'] = train['Alley'].map(Access,na_action = 'ignore').fillna(0)\ntrain['LotShape'] = train['LotShape'].map(LotShape)\ntrain['LandContour'] = train['LandContour'].map(LandContour)\ntrain['Utilities'] = train['Utilities'].map(Utilities)\ntrain['LotConfig'] = train['LotConfig'].map(LotConfig)\ntrain['LandSlope'] = train['LandSlope'].map(LandSlope)\ntrain['Neighborhood'] = train['Neighborhood'].map(Neighborhood)\ntrain['Condition1'] = train['Condition1'].map(Condition)\ntrain['Condition2'] = train['Condition2'].map(Condition)\ntrain['BldgType'] = train['BldgType'].map(BldgType)\ntrain['HouseStyle'] = train['HouseStyle'].map(HouseStyle)\ntrain['RoofStyle'] = train['RoofStyle'].map(RoofStyle)\ntrain['RoofMatl'] = train['RoofMatl'].map(RoofMatl)\ntrain['Exterior1st'] = train['Exterior1st'].map(Exterior)\ntrain['Exterior2nd'] = train['Exterior2nd'].map(Exterior)\ntrain['MasVnrType'] = train['MasVnrType'].map(MasVnrType,na_action = 'ignore')\ntrain['ExterQual'] = train['ExterQual'].map(QualCond)\ntrain['ExterCond'] = train['ExterCond'].map(QualCond)\ntrain['Foundation'] = train['Foundation'].map(Foundation)\ntrain['BsmtQual'] = train['BsmtQual'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['BsmtCond'] = train['BsmtCond'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['BsmtExposure'] = train['BsmtExposure'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['BsmtFinType1'] = train['BsmtFinType1'].map(BsmtFinType,na_action = 'ignore').fillna(0)\ntrain['BsmtFinType2'] = train['BsmtFinType2'].map(BsmtFinType,na_action = 'ignore').fillna(0)\ntrain['Heating'] = train['Heating'].map(Heating)\ntrain['HeatingQC'] = train['HeatingQC'].map(QualCond)\ntrain['CentralAir'] = train['CentralAir'].map(CentralAir)\ntrain['Electrical'] = train['Electrical'].map(Electrical,na_action = 'ignore')\ntrain['KitchenQual'] = train['KitchenQual'].map(QualCond)\ntrain['Functional'] = train['Functional'].map(Functional)\ntrain['FireplaceQu'] = train['FireplaceQu'].map(QualCond).fillna(0)\ntrain['GarageType'] = train['GarageType'].map(GarageType,na_action = 'ignore').fillna(0)\ntrain['GarageFinish'] = train['GarageFinish'].map(GarageFinish,na_action = 'ignore').fillna(0)\ntrain['GarageQual'] = train['GarageQual'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['GarageCond'] = train['GarageCond'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['PavedDrive'] = train['PavedDrive'].map(PavedDrive)\ntrain['PoolQC'] = train['PoolQC'].map(QualCond,na_action = 'ignore').fillna(0)\ntrain['Fence'] = train['Fence'].map(Fence,na_action = 'ignore').fillna(0)\ntrain['MiscFeature'] = train['MiscFeature'].map(MiscFeature,na_action = 'ignore').fillna(0)\ntrain['SaleType'] = train['SaleType'].map(SaleType)\ntrain['SaleCondition'] = train['SaleCondition'].map(SaleCondition)","19e73b57":"test['MSZoning'] = test['MSZoning'].map(MSZoning)\ntest['Street'] = test['Street'].map(Access)\ntest['Alley'] = test['Alley'].map(Access,na_action = 'ignore').fillna(0)\ntest['LotShape'] = test['LotShape'].map(LotShape)\ntest['LandContour'] = test['LandContour'].map(LandContour)\ntest['Utilities'] = test['Utilities'].map(Utilities)\ntest['LotConfig'] = test['LotConfig'].map(LotConfig)\ntest['LandSlope'] = test['LandSlope'].map(LandSlope)\ntest['Neighborhood'] = test['Neighborhood'].map(Neighborhood)\ntest['Condition1'] = test['Condition1'].map(Condition)\ntest['Condition2'] = test['Condition2'].map(Condition)\ntest['BldgType'] = test['BldgType'].map(BldgType)\ntest['HouseStyle'] = test['HouseStyle'].map(HouseStyle)\ntest['RoofStyle'] = test['RoofStyle'].map(RoofStyle)\ntest['RoofMatl'] = test['RoofMatl'].map(RoofMatl)\ntest['Exterior1st'] = test['Exterior1st'].map(Exterior)\ntest['Exterior2nd'] = test['Exterior2nd'].map(Exterior)\ntest['MasVnrType'] = test['MasVnrType'].map(MasVnrType,na_action = 'ignore')\ntest['ExterQual'] = test['ExterQual'].map(QualCond)\ntest['ExterCond'] = test['ExterCond'].map(QualCond)\ntest['Foundation'] = test['Foundation'].map(Foundation)\ntest['BsmtQual'] = test['BsmtQual'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['BsmtCond'] = test['BsmtCond'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['BsmtExposure'] = test['BsmtExposure'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['BsmtFinType1'] = test['BsmtFinType1'].map(BsmtFinType,na_action = 'ignore').fillna(0)\ntest['BsmtFinType2'] = test['BsmtFinType2'].map(BsmtFinType,na_action = 'ignore').fillna(0)\ntest['Heating'] = test['Heating'].map(Heating)\ntest['HeatingQC'] = test['HeatingQC'].map(QualCond)\ntest['CentralAir'] = test['CentralAir'].map(CentralAir)\ntest['Electrical'] = test['Electrical'].map(Electrical,na_action = 'ignore')\ntest['KitchenQual'] = test['KitchenQual'].map(QualCond)\ntest['Functional'] = test['Functional'].map(Functional)\ntest['FireplaceQu'] = test['FireplaceQu'].map(QualCond).fillna(0)\ntest['GarageType'] = test['GarageType'].map(GarageType,na_action = 'ignore').fillna(0)\ntest['GarageFinish'] = test['GarageFinish'].map(GarageFinish,na_action = 'ignore').fillna(0)\ntest['GarageQual'] = test['GarageQual'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['GarageCond'] = test['GarageCond'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['PavedDrive'] = test['PavedDrive'].map(PavedDrive)\ntest['PoolQC'] = test['PoolQC'].map(QualCond,na_action = 'ignore').fillna(0)\ntest['Fence'] = test['Fence'].map(Fence,na_action = 'ignore').fillna(0)\ntest['MiscFeature'] = test['MiscFeature'].map(MiscFeature,na_action = 'ignore').fillna(0)\ntest['SaleType'] = test['SaleType'].map(SaleType)\ntest['SaleCondition'] = test['SaleCondition'].map(SaleCondition)","5d54d80c":"imputed = KNNImputer().fit_transform(train.drop(columns = 'SalePrice'))","0a1e52a2":"for column in train.columns[train.isna().any()]:\n    axis = train.columns.get_loc(column)\n    train[column]=pd.Series(imputed[:,axis]).values","129a7eda":"imputed = KNNImputer().fit_transform(test)","df8fb2d6":"for column in test.columns[test.isna().any()]:\n    axis = test.columns.get_loc(column)\n    test[column]=pd.Series(imputed[:,axis]).values","750a0fbf":"train['Area'] = train['LotArea'] + train['BsmtFinSF1'] + train['BsmtFinSF2'] + train['BsmtUnfSF'] + train['1stFlrSF'] + train['2ndFlrSF'] + train['LowQualFinSF'] + train['GrLivArea'] + train['GarageArea'] + train['WoodDeckSF'] + train['OpenPorchSF'] + train['EnclosedPorch'] + train['3SsnPorch'] + train['ScreenPorch'] + train['PoolArea']\ntrain['Quality'] = train['OverallQual'] + train['OverallCond'] + train['ExterQual'] + train['ExterCond']+ train['BsmtQual'] + train['BsmtCond'] + train['BsmtExposure'] + train['BsmtFinType1'] + train['BsmtFinType2'] + train['HeatingQC'] + train['KitchenQual'] + train['FireplaceQu'] + train['GarageQual'] + train['GarageCond'] + train['PoolQC'] + train['Fence']\ntrain['Bathroom'] = train['BsmtFullBath'] + train['BsmtHalfBath'] + train['FullBath'] + train['HalfBath']\ntest['Area'] = test['LotArea'] + test['BsmtFinSF1'] + test['BsmtFinSF2'] + test['BsmtUnfSF'] + test['1stFlrSF'] + test['2ndFlrSF'] + test['LowQualFinSF'] + test['GrLivArea'] + test['GarageArea'] + test['WoodDeckSF'] + test['OpenPorchSF'] + test['EnclosedPorch'] + test['3SsnPorch'] + test['ScreenPorch'] + test['PoolArea']\ntest['Quality'] = test['OverallQual'] + test['OverallCond'] + test['ExterQual'] + test['ExterCond']+ test['BsmtQual'] + test['BsmtCond'] + test['BsmtExposure'] + test['BsmtFinType1'] + test['BsmtFinType2'] + test['HeatingQC'] + test['KitchenQual'] + test['FireplaceQu'] + test['GarageQual'] + test['GarageCond'] + test['PoolQC'] + test['Fence']\ntest['Bathroom'] = test['BsmtFullBath'] + test['BsmtHalfBath'] + test['FullBath'] + test['HalfBath']","e20800b9":"X = train.drop(columns = 'SalePrice')\ny = np.log1p(train['SalePrice'])","8984ecb2":"regr = RandomForestRegressor(random_state = 42)\nscores=cross_val_score(regr,X,y,scoring = 'neg_mean_squared_log_error')\nprint('Rerata skor RMSLE',np.sqrt(-scores).mean(),'dengan simpangan baku',np.sqrt(-scores).std(),'.')","e1d6a9d1":"regr = regr.fit(X,y)\npredict = regr.predict(test)\nsubmission['SalePrice'] = pd.Series(np.expm1(predict))","1fb818f4":"submission.set_index('Id').to_csv('submission.csv')","fbbf1034":"Saya juga mendapat pencerahan untuk membuat peubah baru dari notebook karya [adamml](https:\/\/www.kaggle.com\/adamml\/how-to-be-in-top-10-for-beginner). Di sini, saya membuat peubah Area, Quality, dan Bathroom.","990821f8":"Regresi dilakukan menggunakan RandomForestRegressor() dengan cross validation untuk menguji keumuman model. Model dievaluasi dengan root mean squared logarithmic error sebagaimana metrics yang digunakan oleh platfom kaggle untuk kompetisi ini.","f26ef3b6":"Berikut adalah penerapan skema ordinal encoding untuk menyandikan peubah kategorikal (nominal dan ordinal) pada dataset train.","0cca3af7":"Menurut referensi [1], data yang tersaji pada kompetisi ini adalah data nyata yang dihimpun oleh Kantor Asesor Kota Ames, Iowa, Amerika Serikat, yang telah disaring sedemikian rupa sehingga menampilkan 80 peubah berisi informasi penting yang dianggap menentukan nilai properti residensial yang terjual di kota tersebut antara tahun 2006 sampai dengan 2010. Kedelapan puluh peubah tersebut terdiri dari 23 peubah nominal, 23 ordinal, 14 diskret, dan 20 kontinu.\n\nPeubah nominal biasanya menyatakan tipe tempat tinggal, garasi, bahan bangunan, kondisi lingkungan, sedangkan peubah ordinal biasanya menyatakan peringkat kelayakan dari berbagai bagian properti. Peubah diskret biasanya menyatakan jumlah bagian properti, misalnya dapur, tempat tidur, kamar mandi, kapasitas garasi, sampai tanggal pembangunan atau renovasi, dll. Terakhir, peubah kontinu biasanya menyatakan luasan dari properti atau bagiannya, seperti luasan ruang bawah tanah, luasan ruang tamu, luasan beranda, dll.","0643febe":"Referensi\n\n[1] De Cock D. Ames, Iowa: Alternative to the Boston housing data as an end of semester regression project. Journal of Statistics Education. 2011 Nov 1;19(3).","35a56045":"Dari 80 peubah, bisa jadi hanya sebagian yang memiliki korelasi relatif kuat terhadap SalePrice. Hal ini dapat diperiksa dengan train.corr()['SalePrice']. Namun, saya memilih untuk menggunakan seluruh peubah tersebut karena menurut saya memang masing-masing peubah memiliki korelasi logis terhadap SalePrice. Apalagi kompetisi ini menganjurkan penggunaan RandomForestRegressor sebagai salah satu estimator. Bukankah random forest pada hakikatnya merupakan sekumpulan estimator lemah yang disatukan untuk menghasilkan estimator kuat? Artinya, menggunakan banyak peubah dalam hal ini menurut saya adalah menguntungkan, walaupun dengan imbalan model yang dihasilkan menjadi rumit dan menyita sumber daya komputasi yang relatif besar.\n\nMenggunakan kedelapan puluh peubah juga bukan hal yang sederhana karena sebagian mengandung missing values. Hal ini dapat diperiksa dengan train.isna().sum() dan test.isna().sum(). Mungkin bisa saja peubah yang mengandung missing values diabaikan sama sekali. Namun, saya memilih untuk melakukan imputasi. Toh, missing values hanya minoritas. Dalam beberapa kesempatan, saya terbiasa menggunakan KNNImputer dan pada kesempatan ini saya juga akan menggunakannya.\n\nCatatan : beberapa missing values pada suatu peubah dapat dideduksi nilainya dari peubah lainnya. Misalnya missing values pada peubah FireplaceQu dapat digantikan dengan nilai 0 karena pada peubah Fireplaces untuk observasi yang sama menginformasikan bahwa properti tersebut tidak memiliki perapian.","edecaa92":"Peubah ordinal, yaitu yang memiliki tingkatan dalam nilai peubahnya, secara alamiah sudah pasti disandikan dengan skema ordinal encoding. Contoh peubah ordinal adalah seperti ExterQual (kualitas eksterior), BsmtQual (kualitas ruang bawah tanah), dll.\n\nDi sisi lain, peubah nominal sekilas tidak menampakkan adanya suatu tingkatan. Namun, jika direnungkan lebih dalam, peubah nominal pun mengandung suatu tingkatan. Sebagai contoh, peubah nominal MSZoning yang terdiri dari 5 kemungkinan nilai: 'RH' (Residential High Density), 'RM' (Residential Medium Density), 'RL' (Residential Low Density), 'FV' (Floating Village Residential), dan 'C (all)' (Commercial), bisa dikelompokkan dalam tingkatan berdasarkan potensi ekonomi dan eksklusivitas. Secara umum, properti komersial wajar memiliki nilai jual per satuan luas yang lebih tinggi dibanding properti residensial. Kemudian untuk properti residensial itu sendiri, semakin padat perumahan, semakin bising, sehingga wajarnya semakin rendah nilai jual per satuan luasnya. Penalaran sejenis, walaupun subjektif, juga diterapkan untuk peubah nominal lainnya, seperti Street, Alley, LotShape, dll. Dengan demikian, peubah nominal pun akan disandikan dengan skema ordinal encoding.","74ac3df6":"Berikut adalah penerapan skema ordinal encoding untuk peubah kategorikal (nominal dan ordinal) pada dataset test.","4951b658":"Kualitas prediksi dengan teknik seperti di atas ternyata hanya menghasilkan skor rmsle sebesar 0.13843 saja."}}