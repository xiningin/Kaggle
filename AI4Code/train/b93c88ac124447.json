{"cell_type":{"3c300dae":"code","57429a26":"code","4ac25902":"code","47070e7c":"code","bcad477a":"code","e53fc399":"code","71e4a85a":"code","19a3ac85":"code","143de760":"code","d275efe3":"code","59ba8d35":"code","0bcd5524":"code","7526fe2b":"code","8d885ac0":"code","f42d788e":"code","79ed3d2d":"code","02da9c75":"code","acfc2032":"markdown","5ce2dbc4":"markdown","d11fa678":"markdown","fa47900e":"markdown","f38d804a":"markdown","c1d54bee":"markdown","2d44afee":"markdown","a8d26104":"markdown","bd8905c4":"markdown","8facef07":"markdown","f41b7bef":"markdown","fb0b92f3":"markdown","4c849372":"markdown"},"source":{"3c300dae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","57429a26":"from IPython.display import Image\nImage(filename='\/kaggle\/input\/korea-coronavirus-additional-files\/SKmap.gif') ","4ac25902":"import pandas    as pd\nimport geopandas as gpd\nimport geopy     as gpy\nimport folium\nfrom   folium import plugins\nimport datetime\nimport numpy as np\n\nprint(folium.__version__)","47070e7c":"df_time           = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/time.csv')\ndf_peroid         = df_time[df_time[\"date\"] >= '2020-02-18']\ndf_peroid[\"rate\"] = df_peroid[\"confirmed\"]\/df_peroid[\"test\"] * 100 \ndf_peroid.tail(5)","bcad477a":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nbarplot = sns.barplot(x=df_peroid['date'], y=df_peroid['rate'], palette=\"rocket\")\nplt.xticks(rotation=45)\n\nplt.show()","e53fc399":"def wordcloud_column(dataframe):\n    from wordcloud import WordCloud, STOPWORDS \n \n    comment_words = ' '\n    stopwords = set(STOPWORDS) \n  \n    # iterate through the csv file \n    for k in range(len(dataframe)):\n        # typecaste each val to string \n        val = str(dataframe.iloc[k,0]) \n        # split the value \n        tokens = val.split()\n    \n        # Converts each token into lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n          \n        for words in tokens: \n            comment_words = comment_words + words + ' '\n  \n    # lower max_font_size\n    wordcloud = WordCloud(width=300, height=120,background_color ='white', max_font_size=60).generate(comment_words)\n    plt.figure()\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()","71e4a85a":"# Find the word cloud for Reason\ndf_patient = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/patient.csv')\ndf_reason  = df_patient[['infection_reason']]\ndf_reason  = df_reason[(df_reason['infection_reason'].notna())]\nwordcloud_column(df_reason)","19a3ac85":"# Find the word cloud for Group\ndf_group  = df_patient[['group']]\ndf_group  = df_group[(df_group['group'].notna())]\nwordcloud_column(df_group) ","143de760":"# read the region coordinates from region.csv\ndf_region = pd.read_csv('\/kaggle\/input\/korea-coronavirus-additional-files\/region.csv')\n\n# Prepare for a map to show the recent confirmed cases\n\nlist = df_region['region'].tolist()               # generate a list of regions based on the region dataframe\nresult = df_time[list].iloc[-1].sort_index()      # get the most recent row sorted with regions.  \n# Store the most recent counts on a new total\nfor col in result.index:\n    df_region.loc[df_region['region'] == col, 'total'] = result[col]\n                                \ndf_region.head(5)","d275efe3":"# Create a legend\nlegend_html = '''\n        <div style=\"position: fixed; bottom: 100px; left: 50px; width: 160px; height: 110px; \n                    background-color: white; border:2px solid grey; z-index:9999; font-size:14px;\"\n                    >&nbsp; <b>Legend<\/b> <br>\n                    &nbsp; Confirmed < 100 &nbsp&nbsp&nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#ff9900\"><\/i><br>\n                    &nbsp; Confirmed < 1000 &nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#cc33ff\"><\/i><br>\n                    &nbsp; Confirmed < 3000 &nbsp; \n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#ff0000\"><\/i><br>\n                    &nbsp; Confirmed >= 3000\n                        <i class=\"fa fa-circle\" style=\"font-size:14px;color:#660000\"><\/i>\n        <\/div>\n        ''' \n\ndef color(total):\n    # Color range\n    col_100  = \"#ff9900\"\n    col_1000 = \"#cc33ff\"\n    col_3000 = \"#ff0000\"\n    over     = \"#660000\"\n    if (total < 100):   \n            rad = total\/10\n            color = col_100\n    elif (total < 1000): \n            rad = min(total\/10, 20)\n            color = col_1000\n    elif (total < 3000): \n            rad = min(total\/10, 30)\n            color = col_3000\n    else: \n            rad = 35\n            color = over\n    return rad, color\n","59ba8d35":"map0 = folium.Map(location=[35.7982008,125.6296572], control_scale=True, tiles='OpenStreetMap', zoom_start=7)\nfolium.TileLayer('openstreetmap').add_to(map0)\nfolium.TileLayer('CartoDB positron',name='Positron').add_to(map0)\nfolium.TileLayer('CartoDB dark_matter',name='Dark Matter').add_to(map0)\nfolium.TileLayer('Stamen Terrain',name='Terrain').add_to(map0)\nfolium.TileLayer('Stamen Toner',name='Toner').add_to(map0)\n# Enable the layer control \nfolium.LayerControl().add_to(map0)\n# Enable Expand fullscreen feature\nplugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(map0) \nmap0.get_root().html.add_child(folium.Element(legend_html))\n\nfor index, row in df_region.iterrows():\n    \n    total = row[\"total\"]\n    reg   = row[\"region\"]\n    lat   = row[\"latitude\"]\n    long  = row[\"longitude\"]\n    \n    # generate the popup message that is shown on click.\n    popup_text = \"<b>Region:<\/b> {}<br><b>Confirmed: <\/b>{}\"\n    popup_text = popup_text.format(reg, total)          \n    \n    # select colors and radius\n    rad, col = color(total)\n    folium.CircleMarker(location=(lat,long), radius = rad, color=col, popup=popup_text, \n                        opacity= 4.0, fill=True).add_to(map0)\n\ndisplay(map0)","0bcd5524":"from folium.plugins import TimestampedGeoJson\n\nmap2 = folium.Map(location=[35.7982008,125.6296572], zoom_start=7, control_scale=True,tiles='CartoDB dark_matter')\nfolium.TileLayer('openstreetmap').add_to(map2)\nfolium.TileLayer('CartoDB positron',name='Positron').add_to(map2)\nfolium.TileLayer('CartoDB dark_matter',name='Dark Matter').add_to(map2)\nfolium.TileLayer('Stamen Terrain',name='Terrain').add_to(map2)\nfolium.TileLayer('Stamen Toner',name='Toner').add_to(map2)\n# Enable the layer control \nfolium.LayerControl().add_to(map2)\n# Enable Expand fullscreen feature\nplugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(map2) \nmap2.get_root().html.add_child(folium.Element(legend_html))\n\nfeatures = []\nfor index, row in df_time[(df_time['date']>='2020-02-18')].iterrows():\n        # Extract the province counts \n        province = df_time[list].iloc[index].sort_index() \n        date = row['date']\n        for i in range(len(province)):\n            total  = province[i]\n            if (total > 0):\n                # select various colors and radius\n                rad, col = color(total)\n                lat    = df_region.at[i, 'latitude']\n                long   = df_region.at[i, 'longitude']\n                reg    = df_region.at[i, 'region']\n                popup_text = \"<b>Region:<\/b> {}<br><b>Confirmed: <\/b>{}\"\n                popup_text = popup_text.format(reg, total)\n                feature = {\n                    'type': 'Feature',\n                    'geometry': {\n                        'type':'Point', 'coordinates':[long, lat]},\n                    'properties': {\n                        'time': date.__str__(),\n                        'style': {'color' : col},\n                        'popup': popup_text,\n                        'icon': 'circle',\n                        'iconstyle':{\n                            'fillColor': col,\n                            'fillOpacity': 0.8,\n                            'fill': 'true',\n                            #'stroke': 'true',\n                            'radius': rad}\n                            }\n                        }\n                features.append(feature)\n\nTimestampedGeoJson(\n        {'type': 'FeatureCollection',\n        'features': features}\n        , period='P1D'\n        , add_last_point=True\n        , auto_play=False\n        , loop=False\n        , max_speed=1\n        , loop_button=True\n        , date_options='YYYY-MM-DD'\n        , time_slider_drag_update=True).add_to(map2)\n\nmap0.save('SKConfirmedwithTimestamp.html')\ndisplay(map2)","7526fe2b":"# Define a zoom_prov function\ndef zoom_prov(province_in, zoomstart=12):\n    province = df_route[df_route[\"province\"] == province_in]\n    # Initialize the area\n    \n    init_points  = (np.average(province.iloc[:,5]),np.average(province.iloc[:,6]))\n    label_points = (np.average(province.iloc[:,5])-0.23,np.average(province.iloc[:,6])-0.23)\n\n    temp_map     = folium.Map(location=init_points, zoom_start=zoomstart, control_scale=True,tiles='CartoDB Positron')\n    plugins.Fullscreen( position='topleft', title='Expand', title_cancel='Exit', force_separate_button=True ).add_to(temp_map)\n\n    # Create a City Name\n    name1 = '''\n        <div style=\"position: fixed; bottom: 50px; left: 50px; width: 130px; height: 65px; \n                    background-color: white; border:2px solid grey; z-index:9999; font-size:14px;\"\n                    >&nbsp; <br>  <b>Province: '''  \n    name2 =  province_in + ' <\/b> <\/div> '\n    name  = name1 + name2\n    temp_map.get_root().html.add_child(folium.Element(name))\n    \n    for index, row in province.iterrows():\n        date  = row[\"date\"]\n        visit = row[\"visit\"]\n        city  = row[\"city\"]\n        loc   = (row[\"latitude\"], row[\"longitude\"])\n     \n        # generate the popup message that is shown on click.\n        popup_text = \"<b>Date:<\/b> {}<br><b>Vist<\/b>: {}<br><b>City:<\/b> {}<br><b>Loc:<\/b> {}\"\n        popup_text = popup_text.format(date,visit,city,loc)\n        icon       = folium.Icon(color='red', icon='info-sign')\n        popup = folium.Popup(popup_text, max_width=300, min_width=80)\n        folium.Marker(loc, popup=popup, icon=icon).add_to(temp_map)\n    display(temp_map)","8d885ac0":"# Look into the buildings involved virus in Daegu\ndf_route     = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/route.csv')\nprovince = \"Daegu\"\nzoom_prov(province)","f42d788e":"province=\"Gyeongsangbuk-do\"\nzoom_prov(province, zoomstart=8)","79ed3d2d":"# Look into what buildings got involved with virus in Seoul\nprovince=\"Seoul\"\nzoom_prov(province)","02da9c75":"# Look into what buildings got involved with virus in Gyeonggi-do \nprovince = \"Gyeonggi-do\"\nzoom_prov(province,zoomstart=9)","acfc2032":"## Project Re-Start ... with the new version of datasets ","5ce2dbc4":"### Then, look at a geo map with time.","d11fa678":"### Reasons, 'Contact Patient' and 'Visit daegu', are the eye-catching words in the \"reason\" word cloud. \"Wuhan\" is not shown as important as 'Contact Patient'. The reason is probably because the virus becomes spreading within Korea now.","fa47900e":"### Observation: The above diagram shows that the accuminated precentage of the confirmed cases started greater than 1% after Feb 20. The rate was drastically inceased and above 3% since Feb 28. It should be noted that the rate was slightly declined from 3.934% on Mar 4 to 3.48% on March 11. \n### Note: It should be noted that the percentage of the confirmed cases has dropped below Mar 1 figure 3.776%. \n","f38d804a":"### Find the percentage of the confirmed cases in daily examination test (Started on Feb 18): Since the Korea government has spent a great effort on testing virus, roughly 10,000 daily, it is important to look at the percentage of the new confirmed cases, not just the new cases.\n### Note: It seems that this time file was modified recently. new_confirmed and new_test column were removed. The region information was also added. ","c1d54bee":"## What is the percent of test people comfired with the COVID-19 virus?\n#### Note: test.csv has been updated with new format. It seems that it contains more accurate geo data in it. ","2d44afee":"### Hospitals and Churchs are the eye-catching words in the \"group\" word cloud. ","a8d26104":"## Look into where the virus is spreading","bd8905c4":"### WORK IN PROGRESS! STAY TUNED!\n\n### Thanks for providing the datasets which are updated very frequently. Thanks for reading my kernal! If you liked my kernel, give upvote it. \n### Your comments are most welcome. ","8facef07":"#### The above map shows how many confirm cases in each region. Dague is the worst region which has 5794 confirmed cases. ","f41b7bef":"### Zoom in province in the route.cvs file to see what buildings\/areas involved with WuHan virus","fb0b92f3":"## Define a word cloud function for processing \"Reason\" and \"Group\" columns","4c849372":"## First, look at a geo map without time. "}}