{"cell_type":{"bca747d5":"code","9172c3ab":"code","1233d0a9":"code","bbba6d84":"code","c5f5e090":"code","af47ce8b":"code","5a29f467":"code","738d8949":"code","a6532e0a":"code","3faac6fa":"code","83a4ae6b":"code","a63b1eb5":"code","341d5a04":"code","6a719522":"code","29069ff2":"code","28ff8479":"markdown","af99d147":"markdown","0d6231ea":"markdown","19e041c5":"markdown","d1372ebe":"markdown","e06bef5c":"markdown","8a096523":"markdown","8aeaa77d":"markdown","67e1f583":"markdown","e2aa0bdf":"markdown","0d47ba34":"markdown","096e268f":"markdown","fb77bc41":"markdown","970f2329":"markdown"},"source":{"bca747d5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom PIL import  Image\n%matplotlib inline\nplt.style.use('fivethirtyeight')\n\nfrom PIL import Image\n# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom tensorflow.contrib.keras.api.keras.callbacks import Callback\nfrom tensorflow.contrib.keras.api.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.contrib.keras import backend\nfrom keras.optimizers import Adam\n\nimport os\n\nprint(os.listdir(\"..\/input\/flowers\/flowers\/\"))","9172c3ab":"\nscript_dir = os.path.dirname(\".\")\ntraining_set_path = os.path.join(script_dir, '..\/input\/flowers\/flowers\/')\ntest_set_path = os.path.join(script_dir, '..\/input\/flowers\/flowers\/')\n","1233d0a9":"classifier = Sequential()","bbba6d84":"input_size = (256, 256)\nclassifier.add(Conv2D(32, (3, 3), input_shape=(256,256,3), activation='relu'))","c5f5e090":"classifier.add(MaxPooling2D(pool_size=(2, 2), dim_ordering=\"th\"))\n","af47ce8b":"classifier.add(Conv2D(32, (3, 3), activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2, 2)))","5a29f467":"classifier.add(Conv2D(64, (3, 3), activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2, 2)))","738d8949":"classifier.add(Flatten())","a6532e0a":"classifier.add(Dense(units=64, activation='relu'))\nclassifier.add(Dropout(0.5))\nclassifier.add(Dense(units=5, activation='softmax'))","3faac6fa":"opt = Adam(lr=1e-3, decay=1e-6)\nclassifier.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\n","83a4ae6b":"batch_size = 32\n\ntrain_datagen = ImageDataGenerator(rescale=1. \/ 255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255, validation_split=0.33)\n\ntraining_set = train_datagen.flow_from_directory(training_set_path,\n                                                 target_size=input_size,\n                                                 batch_size=batch_size,\n                                                 subset=\"training\",\n                                                 class_mode='categorical')\n\n\n\ntest_set = test_datagen.flow_from_directory(test_set_path,\n                                            target_size=input_size,\n                                            batch_size=batch_size,\n                                            subset=\"validation\",\n                                            class_mode='categorical')\n\n","a63b1eb5":"\nclassifier.summary()\n","341d5a04":"\n\nmodel_info = classifier.fit_generator(training_set,\n                         steps_per_epoch=1000\/batch_size,\n                         epochs=90,\n                         validation_data=test_set,\n                         validation_steps=100\/batch_size,\n                         workers=12)","6a719522":"def plot_model_history(model_history):\n    fig, axs = plt.subplots(1,2,figsize=(15,5))\n    # summarize history for accuracy\n    axs[0].plot(range(1,len(model_history.history['acc'])+1),model_history.history['acc'])\n    axs[0].plot(range(1,len(model_history.history['val_acc'])+1),model_history.history['val_acc'])\n    axs[0].set_title('Model Accuracy')\n    axs[0].set_ylabel('Accuracy')\n    axs[0].set_xlabel('Epoch')\n    axs[0].set_xticks(np.arange(1,len(model_history.history['acc'])+1),len(model_history.history['acc'])\/10)\n    axs[0].legend(['train', 'val'], loc='best')\n    # summarize history for loss\n    axs[1].plot(range(1,len(model_history.history['loss'])+1),model_history.history['loss'])\n    axs[1].plot(range(1,len(model_history.history['val_loss'])+1),model_history.history['val_loss'])\n    axs[1].set_title('Model Loss')\n    axs[1].set_ylabel('Loss')\n    axs[1].set_xlabel('Epoch')\n    axs[1].set_xticks(np.arange(1,len(model_history.history['loss'])+1),len(model_history.history['loss'])\/10)\n    axs[1].legend(['train', 'val'], loc='best')\n    plt.show()\n","29069ff2":"plot_model_history(model_info)\n","28ff8479":"That's all i have. I hope you enjoyed this.  if you find this kernel helpful, please upvote.","af99d147":"# Summary\n","0d6231ea":"# Step 2 - Pooling","19e041c5":"# Data preprocessing\nRead  image data and split it in two part training and test.\n\n","d1372ebe":"# Step 3 - Flattening\n","e06bef5c":"## Classification of Flower image\n\nThis dataset contain image of different type of flower , there are five type flowers.\n* Sunflower\n* Tulip\n* Daisy\n* Rose\n* Dandelion\n\nHere to to solve this Classification problem we will create a CNN model and train it with given image dataset, then we will take some image from dataset and try to predict its accuracy.","8a096523":"\n# Part 2 - Fitting the CNN to the images","8aeaa77d":"# Initialising the CNN\n","67e1f583":"# Step 1 - Convolution","e2aa0bdf":"# Adding a third convolutional layer\n","0d47ba34":"# Compiling the CNN\n","096e268f":"# Step 4 - Full connection\n","fb77bc41":"# Adding a second convolutional layer\n","970f2329":"##  Accuracy or Loss as a Function of Number of Epoch\n"}}