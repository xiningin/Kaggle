{"cell_type":{"137d9a4d":"code","0a5e9da0":"code","0af9cc0a":"code","cf8edb13":"code","21e1f1cc":"code","b9670a7a":"code","189eedec":"code","5216f97c":"code","edde536b":"code","fe6b0155":"code","9ba35dfc":"code","9ba1e06d":"code","5fc47ff6":"code","f9121f3e":"code","f95aa997":"code","64d26f73":"code","0f2fbca2":"code","30b96665":"code","75bb47b3":"markdown","3dbce806":"markdown","7ec792c9":"markdown","6e3f718e":"markdown","6652965a":"markdown","18af8274":"markdown","4efead1f":"markdown","4b83a6e0":"markdown","6ad9cedf":"markdown","ac24662e":"markdown","c307e8f3":"markdown","cb47bc41":"markdown","849f6ca2":"markdown","688ebc52":"markdown","91f9b931":"markdown","66405152":"markdown","81a90c4c":"markdown","79f85652":"markdown","b7cd63ed":"markdown","69e18dff":"markdown","b4c6c69a":"markdown","a6809725":"markdown"},"source":{"137d9a4d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout \nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import StratifiedShuffleSplit,train_test_split\n\n\nimport tensorflow as tf\n\nimport cv2\nimport os\nimport pandas as pd\nimport numpy as np","0a5e9da0":"labels = ['vehicles', 'non-vehicles']\nimg_size = 64\ndef get_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img))[...,::-1] #convert BGR to RGB format\n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) # Reshaping images to preferred size\n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","0af9cc0a":"#Now we can easily fetch our train and validation data.\ndata = get_data('\/kaggle\/input\/vehicle-detection-image-set\/data')\n","cf8edb13":"df=pd.DataFrame(data,columns=['image','label'])\n","21e1f1cc":"df['image'][1].shape","b9670a7a":"X_train, X_test, y_train, y_test = train_test_split(df['image'], df['label'], test_size=0.2, random_state=1)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1)","189eedec":"print ('train_df length: ', len(X_train), '  test_df length: ', len(X_test), '  valid_df length: ', len(X_val))","5216f97c":"l = []\nfor i in data:\n    if(i[1] == 0):\n        l.append(\"non-vehicles\")\n    else:\n        l.append(\"vehicles\")\nsns.set_style('darkgrid')\nsns.countplot(l)","edde536b":"plt.figure(figsize = (5,5))\nplt.imshow(data[1][0])\nplt.title(labels[data[0][1]])","fe6b0155":"plt.figure(figsize = (5,5))\nplt.imshow(data[-1][0])\nprint(data[-1][0].shape)\nplt.title(labels[data[-1][1]])","9ba35dfc":"def change_image_dimension(data):\n    data=np.reshape(data.to_list(),(len(data),img_size,img_size,3))\n    return data","9ba1e06d":"X_train=change_image_dimension(X_train)\nX_val=change_image_dimension(X_val)\nX_test=change_image_dimension(X_test)\nX_train=X_train\/255.0\nX_val=X_val\/255.0\nX_test=X_test\/255.0\nX_label=np.array(y_train,dtype=int)\nval_label=np.array(y_val,dtype=int)\ny_test=np.array(y_test,dtype=int)","5fc47ff6":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","f9121f3e":"model = Sequential()\nmodel.add(Conv2D(32,3,padding=\"same\", activation=\"relu\", input_shape=(64,64,3)))\nmodel.add(MaxPool2D())\n\nmodel.add(Conv2D(32, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D())\n\nmodel.add(Conv2D(64, 3, padding=\"same\", activation=\"relu\"))\nmodel.add(MaxPool2D())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation=\"relu\"))\nmodel.add(Dense(2, activation=\"sigmoid\"))\n\nmodel.summary()","f95aa997":"opt = Adam(lr=0.0001)\nmodel.compile(optimizer = opt , loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) , metrics = ['accuracy'])","64d26f73":"history = model.fit(X_train,X_label,epochs = 5 ,batch_size=10, validation_data = (X_val, val_label))","0f2fbca2":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(5)\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","30b96665":"predictions = model.predict_classes(X_test)\npredictions = predictions.reshape(1,-1)[0]\nprint(classification_report(val_label, predictions, target_names = ['Vehicle (Class 0)','Non vehicle (Class 1)']))","75bb47b3":"Vehicle classification has crop up as an important field of study due of its importance in variety of applications like surveillance, security framework, traffic congestion prevention and accidents avoidance.\n\nOur Objective is to recognize if a vehicle in an image or not using Vehicle Detection Image Set which contains 17k images of dimension (64x64x3). separeted in two folders named: Non-Vehicles and Vehicles.","3dbce806":"Let\u2019s define a simple CNN model with 3 Convolutional layers followed by max-pooling layers. A dropout layer is added after the 3rd maxpool operation to avoid overfitting.","7ec792c9":"Next, let\u2019s define the path to our data. We define a function called get_data() that makes it easier for us to create our train and validation dataset. We define the two labels \u2018vehicles\u2019 and \u2018non-vehicles\u2019 that we will use. We use the Opencv imread function to read the images in the RGB format and resize the images to our desired width and height in this case both being 64.","6e3f718e":"Let us also visualize a random image from the vehicles and non-vehicles classes","6652965a":"# Step 1:- Import the required libraries ","18af8274":"Now, let\u2019s train our model for 50 epochs since our learning rate is very small.","4efead1f":"Data augmentation on the train data:-","4b83a6e0":"# Step 6:- Evaluating the result","6ad9cedf":"# Step 2:- Loading the data","ac24662e":"**Table of Contents**\n\n1. Image classification\n2. Understanding the problem statement\n3. Lets Build our Image Classification Model\n       1. Data Preprocessing\n       2. Data Augmentation\n       3. Model definition and training\n       4.Evaluating Results","c307e8f3":"\n\nAs a human, I can (usually) identify what it depicts with ease. Otherwise,the machine does not find this task *Image classification* quite easy as Human, then, is a challenge for machines. Which is where deep learning comes in.\n\nImage Classification is the task of assigning an input image, one label from a fixed set of categories. This is one of the core problems in Computer Vision.\n","cb47bc41":"**Step 4:- Data Preprocessing and Data Augmentation** \n\nNext, we perform some Data Preprocessing and Data Augmentation before we can proceed with building the model.","849f6ca2":"# Step 3:- Visualize the data ","688ebc52":"**Let\u2019s Build our Image Classification Model!**","91f9b931":"**Changing Dimension Of Data**","66405152":"#  What is image classification","81a90c4c":"# Step 5:- Define the Model ","79f85652":"\nHere we will be making use of the Keras library for creating our model and training it. We also use Matplotlib and Seaborn for visualizing our dataset to gain a better understanding of the images we are going to be handling. Another important library to handle image data is Opencv.\n","b7cd63ed":"#  spliting of data","69e18dff":"Let\u2019s compile the model now using Adam as our optimizer and SparseCategoricalCrossentropy as the loss function. We are using a lower learning rate of 0.000001 for a smoother curve.","b4c6c69a":"Let\u2019s visualize our data to explore the data that we are working in, for example, plot the number of images in both the classes in order to know how balance our data is, using seaborn library.","a6809725":"#  Understanding the Problem Statement"}}