{"cell_type":{"0404c413":"code","30adf1cd":"code","bd8787a9":"code","1d4b9e35":"code","3b4a151c":"code","602046c1":"code","ca23716e":"code","6224c603":"code","777e1114":"code","baae411a":"code","f3730dd1":"code","17d61ec5":"code","edeace81":"code","5d18f451":"code","07c14012":"code","963ad2b4":"code","497da962":"code","e0822b40":"code","bea627e3":"code","56374010":"code","4400042a":"code","3de5f60d":"code","a5e5b28e":"code","d68fc160":"code","0db1439d":"code","0b21a89e":"code","81429fb2":"code","0e69fd0a":"code","73954496":"code","7cf7cae7":"code","1d0b3cbf":"code","f8a49138":"code","db768afc":"code","12079157":"code","2eb614d8":"code","7aae67ac":"code","afc0df0c":"code","b3109d48":"code","caab8862":"code","1afdc72e":"code","04c06935":"code","8e11dc3d":"code","28018f29":"code","afa987aa":"markdown","e29e39a5":"markdown","b3448bfb":"markdown","419a9f6e":"markdown","dee000d4":"markdown","a4172fb1":"markdown","43799b67":"markdown","5e6d9270":"markdown","0e8d4c4b":"markdown","f204b8d6":"markdown","4c935c2f":"markdown","d77d2741":"markdown","cfd86082":"markdown","98309a1b":"markdown","5db8aa9b":"markdown","b0096d6d":"markdown","d9e5dd10":"markdown","de603b35":"markdown","00b04099":"markdown","f8e95284":"markdown","6dce5f28":"markdown","750da1df":"markdown","f6701e29":"markdown","278b3122":"markdown","7a5391f6":"markdown","094268a8":"markdown","a02c99b7":"markdown","36373890":"markdown","18ab3b18":"markdown","3a10a59d":"markdown","1d64a7df":"markdown","cd30a7f3":"markdown","991d2665":"markdown","93d14f67":"markdown","f96b6dd8":"markdown","64a0718f":"markdown"},"source":{"0404c413":"import pandas as pd\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport nltk\n%matplotlib inline","30adf1cd":"messages = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\",encoding='latin-1')\nmessages.head()","bd8787a9":"messages = messages.drop(labels = [\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis = 1)\nmessages.columns = [\"label\", \"text\"]\nmessages.head()","1d4b9e35":"messages.describe()","3b4a151c":"messages.groupby(\"label\").describe()","602046c1":"messages['length']=messages['text'].apply(len)\nmessages.head()","ca23716e":"messages.info()","6224c603":"messages.describe()","777e1114":"def print_validation_report(y_true, y_pred):\n    print(\"Classification Report\")\n    print(classification_report(y_true, y_pred))\n    acc_sc = accuracy_score(y_true, y_pred)\n    print(\"Accuracy : \"+ str(acc_sc))","baae411a":"def plot_confusion_matrix(y_true, y_pred):\n    mtx = confusion_matrix(y_true, y_pred)\n    #fig, ax = plt.subplots(figsize=(4,4))\n    sns.heatmap(mtx, annot=True, fmt='d', linewidths=.5,  \n                cmap=\"Blues\", cbar=False)\n    #  square=True,\n    plt.ylabel('true label')\n    plt.xlabel('predicted label')","f3730dd1":"messages[\"label\"].value_counts().plot(kind = 'pie', figsize = (8, 8), autopct = '%1.1f%%', shadow = True)\nplt.ylabel(\"Spam vs Ham\")\nplt.legend([\"Ham\", \"Spam\"])\nplt.show()","17d61ec5":"messages.hist(column='length',by='label',bins=50, figsize=(20,6))","edeace81":"ham  = messages[messages['label'] == 'ham'].copy()\nspam = messages[messages['label'] == 'spam'].copy()\n\nham.head()","5d18f451":"import wordcloud\n\ndef show_wordcloud(data, title):\n    text = ' '.join(data['text'].astype(str).tolist())\n    stopwords = set(wordcloud.STOPWORDS)\n    \n    fig_wordcloud = wordcloud.WordCloud(stopwords=stopwords,background_color='white',\n                    colormap='viridis', width=800, height=600).generate(text)\n    \n    plt.figure(figsize=(10,7), frameon=True)\n    plt.imshow(fig_wordcloud, interpolation='bilinear')  \n    plt.axis('off')\n    plt.title(title, fontsize=20 )\n    plt.show()","07c14012":"show_wordcloud(ham, \"Ham top words\")","963ad2b4":"show_wordcloud(spam, \"Spam top words\")","497da962":"messages.head()","e0822b40":"import string\nfrom nltk.corpus import stopwords\nstopwords.words('english')[0:10] # Show some stop words","bea627e3":"def remove_punct_stop(mess):\n    \"\"\"\n    Takes in a string of text, then performs the following:\n    1. Remove all punctuation\n    2. Remove all stopwords\n    3. Returns a list of the cleaned text\n    \"\"\"\n    # Check characters to see if they are in punctuation\n    nopunc = [char for char in mess if char not in string.punctuation]\n\n    # Join the characters again to form the string.\n    nopunc = ''.join(nopunc)\n    \n    # Now just remove any stopwords\n    return [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]","56374010":"messages['text'].apply(remove_punct_stop)","4400042a":"from sklearn.model_selection import train_test_split\n\nmsg_train, msg_test, label_train, label_test = train_test_split(messages['text'], messages['label'], test_size=0.3)\n\nprint(len(msg_train), len(msg_test), len(msg_train) + len(msg_test))","3de5f60d":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\n\npipeline_NB = Pipeline([\n    ('bow', CountVectorizer(analyzer=remove_punct_stop)),  # strings to token integer counts | use the DATA CLEANING FUNCTION PREDEFINED\n    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores\n    ('classifier', MultinomialNB()),  # train on TF-IDF vectors w\/ CHOSEN ML MODEL (CAN BE CHANGED)\n])","a5e5b28e":"pipeline_NB.fit(msg_train,label_train)","d68fc160":"predictions = pipeline_NB.predict(msg_test)","0db1439d":"from sklearn.metrics import classification_report, confusion_matrix,accuracy_score, fbeta_score","0b21a89e":"print(fbeta_score(predictions,label_test, beta=0.5, pos_label='ham'))","81429fb2":"plot_confusion_matrix(predictions,label_test)","0e69fd0a":"print_validation_report(predictions,label_test)","73954496":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\n\npipeline_KNN = Pipeline([ ('bow'  , CountVectorizer(analyzer = remove_punct_stop) ),\n                   ('tfidf'   , TfidfTransformer()),\n                   ('clf_KNN' , KNeighborsClassifier() )\n                    ])\n\nparameters_KNN = {'clf_KNN__n_neighbors': (8,15,20), }\n\ngrid_KNN = GridSearchCV(pipeline_KNN, parameters_KNN, cv=5,refit=True, verbose=3)\n\ngrid_KNN.fit(msg_train,label_train)","7cf7cae7":"grid_KNN.best_params_","1d0b3cbf":"grid_KNN.best_score_","f8a49138":"predictions = grid_KNN.predict(msg_test)","db768afc":"print(fbeta_score(predictions,label_test, beta=0.5, pos_label='ham'))","12079157":"plot_confusion_matrix(predictions,label_test)","2eb614d8":"print_validation_report(predictions,label_test)","7aae67ac":"from sklearn.svm import SVC\n\npipeline_SVC = Pipeline([ ('bow'  , CountVectorizer(analyzer = remove_punct_stop) ),\n                   ('tfidf'   , TfidfTransformer()),\n                   ('clf_SVC' , SVC(gamma='auto', C=1000)),\n                    ])\n\n\nparameters_SVC = dict(tfidf=[None, TfidfTransformer()], clf_SVC__C=[500, 1000,1500])\n\ngrid_SVC = GridSearchCV(pipeline_SVC, parameters_SVC, cv=5, refit=True, verbose=1)\n\ngrid_SVC.fit(msg_train, label_train)","afc0df0c":"grid_SVC.best_params_","b3109d48":"grid_SVC.best_estimator_","caab8862":"grid_SVC.best_score_","1afdc72e":"predictions = grid_SVC.predict(msg_test)","04c06935":"print(fbeta_score(predictions,label_test, beta=0.5, pos_label='ham'))","8e11dc3d":"plot_confusion_matrix(predictions,label_test)","28018f29":"print_validation_report(predictions,label_test)","afa987aa":"Importing the libraries (**NLTK for NLP**):","e29e39a5":"## Creating a Data Pipeline","b3448bfb":"To plot the error rate\/ accuracy use:","419a9f6e":"Explore error rate and accuracy vs K value, this will take a lot of time, as K is varies for 40 values, instead of 3 in GridSearchCV, but can be done!","dee000d4":"## Performance Functions defined:","a4172fb1":"Visualize the percentage of Spam vs. Ham on piechart:","43799b67":"## 4.3 SVM Classifier","5e6d9270":"Split into 2 datasets based on label:","0e8d4c4b":"# 4. Model Training","f204b8d6":"Pipeline with GridSearchCV | Optimize for best param: n_neighbors","4c935c2f":"Remove punctuation and stopwords fucntion:","d77d2741":"A lot of messages are actually not spam. About 86% of our dataset consists of normal messages.\n\nA very basic model would be a model that predicts everything as ham. It would have a decent accuracy. But then again, is that right? No. We will then have to use an accuracy metric that keeps this in mind. Goal : We don't mind if we miss the odd spam message but we surely don't want to mark a ham message as spam i.e Precision is very important. Hence we will use **fbeta** score as our accuracy metric with inclination towards Precision.","cfd86082":"For MultinomialNB (can be changed for any Classification algorithm)","98309a1b":"Drop extra columns and rename the other two:","5db8aa9b":"**WordCloud Function:**","b0096d6d":"plt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","d9e5dd10":"## 4.2 KNN Classifier","de603b35":"(NOTE): Can SCALING the data after TFIDF increase the accuracy score of the model?","00b04099":"(NOTE) For now, the length column is ignored as a feature, but it seems a good idea to add it later","f8e95284":"# 2. Exploratory Data Analysis (EDA)","6dce5f28":"## Wordclouds: SPAM vs HAM","750da1df":"Optimal K value is 15. This can be done exploring the plot of error rate\/accuracy score vs K between 1 and 40; however, this will take LOTS of TIME! (script attached below)","f6701e29":"**Best Score=Cross-validation score**","278b3122":"Confusion matrix:","7a5391f6":"error_rate = []\nscores = []\n\nfor i in range(1,40): # check all values of K between 1 and 40\n    pipeline_KNN = Pipeline([ ('bow'  , CountVectorizer(analyzer = remove_punct_stop) ),\n                   ('tfidf'   , TfidfTransformer()),\n                   ('clf_KNN' , KNeighborsClassifier(n_neighbors=i) )\n                    ])\n    pipeline_KNN.fit(msg_train,label_train)\n    pred_i = pipeline_KNN.predict(msg_test)\n    score=accuracy_score(label_test,pred_i)\n    scores.append(score)\n    error_rate.append(np.mean(pred_i != label_test)) # ERROR RATE DEF and add it to the list","094268a8":"**Best Score=Cross-validation score**","a02c99b7":"Importing the SMS UCI dataset (spam vs ham labels):","36373890":"Classification report and accuracy score:","18ab3b18":"# 1. Data import, cleaning and defining functions:","3a10a59d":"## 4.1 Multinomial Naive-Bayes (NB)","1d64a7df":"Feature engineer a length of message column:","cd30a7f3":"Check if the function works well:","991d2665":"### Train-test Split:","93d14f67":"# 3. Pre-processing Data","f96b6dd8":"Pipeline with GridSearchCV | Optimize for best param: gamma set to auto, optimize for C and usage of TFIDF (yes\/no)","64a0718f":"Looks like spam texts are usually longer, and the whole dataset has a binormal distribution overall."}}