{"cell_type":{"da5bd3d4":"code","a2e7080c":"code","c00db2c2":"code","03af784e":"code","b070fcbc":"code","8c739d8a":"code","8bd1bc72":"code","0f5cb1ff":"code","8f060a1e":"code","46fac451":"code","d9fb0eda":"code","68ee1131":"code","776c47db":"code","6311e2ed":"code","8a325120":"code","23ef13b3":"code","b6c493ba":"code","83edae62":"code","05b3dd6c":"code","0b4c3dd7":"code","914648e8":"code","e0543826":"code","1ac07be2":"code","02652d54":"code","e309de48":"markdown","b21fccb2":"markdown","944ff476":"markdown","78027f2c":"markdown","15b04587":"markdown","b09e72c5":"markdown","7b3a54b1":"markdown","14c6bd6a":"markdown","f25c162e":"markdown","c1ae5a5a":"markdown","ba5949bb":"markdown","808c73f1":"markdown","67e4b060":"markdown","fdd3bb43":"markdown"},"source":{"da5bd3d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport optuna\n\n# Pandas setting to display more dataset rows and columns\npd.set_option('display.max_rows', 150)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2e7080c":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv\", low_memory=False)#, nrows=10000)\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv\", low_memory=False)#, nrows=10000)\ntrain.info(memory_usage=\"deep\")","c00db2c2":"test.info(memory_usage=\"deep\")","03af784e":"# Colors to be used for plots\ncolors = [\"lightcoral\", \"sandybrown\", \"darkorange\", \"mediumseagreen\",\n          \"lightseagreen\", \"cornflowerblue\", \"mediumpurple\", \"palevioletred\",\n          \"lightskyblue\", \"sandybrown\", \"yellowgreen\", \"indianred\",\n          \"lightsteelblue\", \"mediumorchid\", \"deepskyblue\"]","b070fcbc":"train.head()","8c739d8a":"fig, ax = plt.subplots(figsize=(5, 6))\npie = ax.pie([len(train), len(test)],\n             labels=[\"Train dataset\", \"Test dataset\"],\n             colors=[\"salmon\", \"teal\"],\n             textprops={\"fontsize\": 15},\n             autopct='%1.1f%%')\nax.axis(\"equal\")\nax.set_title(\"Dataset length comparison\", fontsize=18)\nfig.set_facecolor('white')\nplt.show();","8bd1bc72":"train.describe()","0f5cb1ff":"features = [x for x in train.columns if x[0]==\"f\"]\n\ndf = pd.concat([train[features], test[features]], axis=0)\ndf.reset_index(inplace=True, drop=True)\n\nunique_values = df[features].nunique() < 30\ncat_features = unique_values[unique_values==True].index\nunique_values = df[features].nunique() >= 30\nnum_features = unique_values[unique_values==True].index\n\nprint(f\"There are {len(cat_features)} categorical features: {cat_features}\")\nprint(f\"There are {len(num_features)} continuous features: {num_features}\")","8f060a1e":"fig, ax = plt.subplots(figsize=(6, 6))\n\nbars = ax.bar(train[\"target\"].value_counts().index,\n              train[\"target\"].value_counts().values,\n              color=colors,\n              edgecolor=\"black\",\n              width=0.4)\nax.set_title(\"Target values distribution\", fontsize=20, pad=15)\nax.set_ylabel(\"Amount of values\", fontsize=14, labelpad=15)\nax.set_xlabel(\"Target value\", fontsize=14, labelpad=10)\nax.set_xticks(train[\"target\"].value_counts().index)\nax.tick_params(axis=\"both\", labelsize=14)\nax.bar_label(bars, [f\"{x:2.2f}%\" for x in train[\"target\"].value_counts().values\/(len(train)\/100)],\n                 padding=5, fontsize=15)\nax.bar_label(bars, [f\"{x:2d}\" for x in train[\"target\"].value_counts().values],\n                 padding=-30, fontsize=15)\nax.margins(0.2, 0.12)\nax.grid(axis=\"y\")\n\nplt.show();","46fac451":"train.isna().sum().sum(), test.isna().sum().sum()","d9fb0eda":"df = pd.concat([train[num_features], test[num_features]], axis=0)\ncolumns = df.columns.values\n\ncols = 5\nrows = len(columns) \/\/ cols + 1\n\nfig, axs = plt.subplots(ncols=cols, nrows=rows, figsize=(16,65), sharex=False)\n\nplt.subplots_adjust(hspace = 0.3)\ni=0\n\nfor r in np.arange(0, rows, 1):\n    for c in np.arange(0, cols, 1):\n        if i >= len(columns):\n            axs[r, c].set_visible(False)\n        else:\n            hist1 = axs[r, c].hist(train[columns[i]].values,\n                                   range=(df[columns[i]].min(),\n                                          df[columns[i]].max()),\n                                   bins=40,\n                                   color=\"deepskyblue\",\n                                   edgecolor=\"black\",\n                                   alpha=0.7,\n                                   label=\"Train Dataset\")\n            hist2 = axs[r, c].hist(test[columns[i]].values,\n                                   range=(df[columns[i]].min(),\n                                          df[columns[i]].max()),\n                                   bins=40,\n                                   color=\"palevioletred\",\n                                   edgecolor=\"black\",\n                                   alpha=0.7,\n                                   label=\"Test Dataset\")\n            axs[r, c].set_title(columns[i], fontsize=12, pad=5)\n            axs[r, c].set_yticks(axs[r, c].get_yticks())\n            axs[r, c].set_yticklabels([str(int(i\/1000))+\"k\" for i in axs[r, c].get_yticks()])\n            axs[r, c].tick_params(axis=\"y\", labelsize=10)\n            axs[r, c].tick_params(axis=\"x\", labelsize=10)\n            axs[r, c].grid(axis=\"y\")\n            if i == 0:\n                axs[r, c].legend(fontsize=10)\n                                  \n        i+=1\n#plt.suptitle(\"Numerical feature values distribution in both datasets\", y=0.99)\nplt.show();","68ee1131":"print(\"Numerical features with the least amount of unique values:\")\ntrain[num_features].nunique().sort_values().head(5)","776c47db":"# Plot dataframe\ndf = train[features].corr().round(5)\n\n# Mask to hide upper-right part of plot as it is a duplicate\nmask = np.zeros_like(df)\nmask[np.triu_indices_from(mask)] = True\n\n# Making a plot\nplt.figure(figsize=(16,16))\nax = sns.heatmap(df, annot=False, mask=mask, cmap=\"RdBu\", annot_kws={\"weight\": \"bold\", \"fontsize\":13})\nax.set_title(\"Feature correlation heatmap\", fontsize=17)\nplt.setp(ax.get_xticklabels(), rotation=90, ha=\"right\",\n         rotation_mode=\"anchor\", weight=\"normal\")\nplt.setp(ax.get_yticklabels(), weight=\"normal\",\n         rotation_mode=\"anchor\", rotation=0, ha=\"right\")\nplt.show();","6311e2ed":"# Scaling all values\ns_scaler = StandardScaler()\nfor col in features:\n    train[col] = s_scaler.fit_transform(np.array(train[col]).reshape(-1,1))\n    test[col] = s_scaler.transform(np.array(test[col]).reshape(-1,1))","8a325120":"X = train[features].copy()\nX_test = test[features].copy()\ny = train[\"target\"]","23ef13b3":"# def train_model_optuna(trial, X_train, X_valid, y_train, y_valid):\n#     \"\"\"\n#     A function to train a model using different hyperparamerters combinations provided by Optuna. \n#     Loss of validation data predictions is returned to estimate hyperparameters effectiveness.\n#     \"\"\"\n\n#     #A set of hyperparameters to optimize by optuna\n#     xgb_params = {\n#                  \"objective\": trial.suggest_categorical('objective', [\"binary:logistic\"]),\n#                  \"use_label_encoder\": trial.suggest_categorical('use_label_encoder', [False]),\n#                  \"n_estimators\": trial.suggest_categorical('n_estimators', [40000]),\n#                  \"learning_rate\": trial.suggest_loguniform('learning_rate', 0.15, 1.0),\n#                  \"subsample\": trial.suggest_float('subsample', 0.1, 1, step=0.01),\n#                  \"colsample_bytree\": trial.suggest_float('colsample_bytree', 0.05, 1, step=0.01),\n#                  \"max_depth\": trial.suggest_int(\"max_depth\", 1, 8),\n#                  \"booster\": trial.suggest_categorical('booster', [\"gbtree\"]),\n#                  \"gamma\": trial.suggest_float('gamma', 0, 100, step=0.1),\n#                  \"tree_method\": trial.suggest_categorical('tree_method', [\"gpu_hist\"]),\n#                  \"reg_lambda\": trial.suggest_loguniform('reg_lambda', 0.1, 100),\n#                  \"reg_alpha\": trial.suggest_loguniform('reg_alpha', 0.1, 100),\n#                  \"random_state\": trial.suggest_categorical('random_state', [42]),\n#                  \"n_jobs\": trial.suggest_categorical('n_jobs', [4]),\n#                  \"min_child_weight\": trial.suggest_categorical(\"min_child_weight\", [256]),\n#                     }\n\n\n\n#     # Model loading and training\n#     model = XGBClassifier(**xgb_params)\n#     model.fit(X_train, y_train,\n#               eval_set=[(X_train, y_train), (X_valid, y_valid)],\n#               eval_metric=\"auc\",\n#               early_stopping_rounds=100,\n#               verbose=False)\n    \n#     print(f\"Number of boosting rounds: {model.best_iteration}\")\n#     oof = model.predict_proba(X_valid)[:, 1]\n    \n#     return roc_auc_score(y_valid, oof)","b6c493ba":"# %%time\n# # Splitting data into train and valid folds using target bins for stratification\n# X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n# # Setting optuna verbosity to show only warning messages\n# # If the line is uncommeted each iteration results will be shown\n# # optuna.logging.set_verbosity(optuna.logging.WARNING)\n\n# time_limit = 3600 * 4\n\n# study = optuna.create_study(direction='maximize')\n# study.optimize(lambda trial: train_model_optuna(trial, X_train, X_valid,\n#                                                     y_train, y_valid),\n# #                n_trials = 2\n#                timeout=time_limit\n#               )\n\n# # Showing optimization results\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial parameters:', study.best_trial.params)\n# print('Best score:', study.best_value)","83edae62":"# Fold splitting parameters\nsplits = 10\nskf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n\n# Two zero-filled arrays for out-of-fold and test predictions\nlinear_oof_preds = np.zeros((X.shape[0],))\nlinear_test_preds = np.zeros((X_test.shape[0],))\ntotal_mean_auc = 0\n\n# Generating folds and making training and prediction for each of them\nfor num, (train_idx, valid_idx) in enumerate(skf.split(X, y)):\n    X_train, X_valid = X.loc[train_idx], X.loc[valid_idx]\n    y_train, y_valid = y.loc[train_idx], y.loc[valid_idx]\n\n    linear_model = LinearSVC(tol=1e-7, penalty='l2', dual=False, max_iter=2000, random_state=42)\n    linear_model.fit(X_train, y_train)\n    \n    # Getting validation data predictions. Each fold model makes predictions on an unseen data.\n    # So in the end it will be completely filled with unseen data predictions.\n    # It will be used to evaluate hyperparameters performance only.    \n    linear_oof_preds[valid_idx] = linear_model.decision_function(X_valid)\n    \n    # Getting mean test data predictions (i.e. devided by number of splits)\n    linear_test_preds += linear_model.decision_function(X_test) \/ splits\n    \n    # Getting score for a fold model\n    fold_auc = roc_auc_score(y_valid, linear_oof_preds[valid_idx])\n    print(f\"Fold {num} ROC AUC: {fold_auc}\")\n    \n    # Getting mean score of all fold models (i.e. devided by number of splits)\n    total_mean_auc += fold_auc \/ splits\n\nprint(f\"\\nOverall ROC AUC: {total_mean_auc}\")","05b3dd6c":"X[\"linear_preds\"] = linear_oof_preds\nX_test[\"linear_preds\"] = linear_test_preds","0b4c3dd7":"# Model hyperparameters\nxgb_params = {'objective': 'binary:logistic', \n              'use_label_encoder': False,\n              'n_estimators': 40000,\n              'learning_rate': 0.18515462875481553,\n              'subsample': 0.97, \n              'colsample_bytree': 0.32,\n              'max_depth': 1,\n              'booster': 'gbtree',\n              'gamma': 0.2, \n              'tree_method': 'gpu_hist',\n              'reg_lambda': 0.11729916523488974, \n              'reg_alpha': 0.6318827156945853,\n              'random_state': 42,\n              'n_jobs': 4, \n              'min_child_weight': 256}","914648e8":"%%time\n# Setting up fold parameters\nsplits = 5\nskf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n\n# Creating an array of zeros for storing \"out of fold\" predictions\noof_preds = np.zeros((X.shape[0],))\npreds = 0\nmodel_fi = 0\ntotal_mean_auc = 0\n\n# Generating folds and making training and prediction for each of them\nfor num, (train_idx, valid_idx) in enumerate(skf.split(X, y)):\n    X_train, X_valid = X.loc[train_idx], X.loc[valid_idx]\n    y_train, y_valid = y.loc[train_idx], y.loc[valid_idx]\n    \n    model = XGBClassifier(**xgb_params)\n    model.fit(X_train, y_train,\n              verbose=False,\n              # The parameters below help to detect and avoid overfitting\n              eval_set=[(X_train, y_train), (X_valid, y_valid)],\n              eval_metric=\"auc\",\n              early_stopping_rounds=300,\n              )\n    \n    # Getting mean test data predictions (i.e. devided by number of splits)\n    preds += model.predict_proba(X_test)[:, 1] \/ splits\n    \n    # Getting mean feature importances (i.e. devided by number of splits)\n    model_fi += model.feature_importances_ \/ splits\n    \n    # Getting validation data predictions. Each fold model makes predictions on an unseen data.\n    # So in the end it will be completely filled with unseen data predictions.\n    # It will be used to evaluate hyperparameters performance only.\n    oof_preds[valid_idx] = model.predict_proba(X_valid)[:, 1]\n    \n    # Getting score for a fold model\n    fold_auc = roc_auc_score(y_valid, oof_preds[valid_idx])\n    print(f\"Fold {num} ROC AUC: {fold_auc}\")\n\n    # Getting mean score of all fold models (i.e. devided by number of splits)\n    total_mean_auc += fold_auc \/ splits\n    \nprint(f\"\\nOverall ROC AUC: {total_mean_auc}\")","e0543826":"# Creating a dataframe to be used for plotting\ndf = pd.DataFrame()\ndf[\"Feature\"] = X.columns\n# Extracting feature importances from the trained model\ndf[\"Importance\"] = model_fi \/ model_fi.sum()\n# Sorting the dataframe by feature importance\ndf.sort_values(\"Importance\", axis=0, ascending=False, inplace=True)","1ac07be2":"fig, ax = plt.subplots(figsize=(13, 35))\nbars = ax.barh(df[\"Feature\"], df[\"Importance\"], height=0.4,\n               color=\"mediumorchid\", edgecolor=\"black\")\nax.set_title(\"Feature importances\", fontsize=30, pad=15)\nax.set_ylabel(\"Feature name\", fontsize=20, labelpad=15)\nax.set_xlabel(\"Feature importance\", fontsize=20, labelpad=15)\nax.set_yticks(df[\"Feature\"])\nax.set_yticklabels(df[\"Feature\"], fontsize=13)\nax.tick_params(axis=\"x\", labelsize=15)\nax.grid(axis=\"x\")\n# Adding labels on top\nax2 = ax.secondary_xaxis('top')\nax2.set_xlabel(\"Feature importance\", fontsize=20, labelpad=13)\nax2.tick_params(axis=\"x\", labelsize=15)\nax.margins(0.05, 0.01)\n\n# Inverting y axis direction so the values are decreasing\nplt.gca().invert_yaxis()","02652d54":"predictions = pd.DataFrame()\npredictions[\"id\"] = test[\"id\"]\npredictions[\"target\"] = preds\n\npredictions.to_csv('submission.csv', index=False, header=predictions.columns)\npredictions.head()","e309de48":"# **Feature importances**","b21fccb2":"There is very weak linear correlation between the features.","944ff476":"# **Predictions submission**","78027f2c":"Some features look like categorical ones. Maybe it's worth to try to transform them into bins.\n\nAs you can see, the datasets are well balanced. So target distribution should probably be the same for test predictions.","15b04587":"The target value classes are balanced which is good.","b09e72c5":"# **Data preprocessing**","7b3a54b1":"# **Hyperparameters optimization**","14c6bd6a":"There are no missing values in the both datasets.\n\nLet's check feature values distribution in the both datasets.","f25c162e":"Hyperparameters used in this notebook were optimized using Optuna. The code used or that is shown below. They are commented in order to save runtime as optimization has been already done.","c1ae5a5a":"The LinearSVC model will be used first. Its predictions are used as a feature for XGBoost model.","ba5949bb":"Let's look at feature correlation.","808c73f1":"# **Data import**","67e4b060":"# **EDA**","fdd3bb43":"# **Model training**"}}