{"cell_type":{"13fa4caf":"code","0a2fcceb":"code","ed35f4af":"code","71bd55fb":"code","0b10a06d":"code","f8baac34":"code","8027e8ed":"code","503ba4f3":"code","1372b5a8":"code","f1f49f29":"code","7632d32b":"code","b5c52f94":"code","d73f8169":"code","32f9e985":"code","7c1f18d0":"markdown","6c0b1baa":"markdown","517c582b":"markdown","684e894a":"markdown","7c392731":"markdown","9df34817":"markdown","14d4eafd":"markdown","3c67fc98":"markdown","619b137f":"markdown","8a0b689e":"markdown","417fb1fc":"markdown","54d400fd":"markdown","3962d12e":"markdown","73697e2a":"markdown"},"source":{"13fa4caf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a2fcceb":"data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\",encoding='latin1')\ndata.head()","ed35f4af":"df = pd.DataFrame(data)","71bd55fb":"df.head()","0b10a06d":"plt.figure(figsize=(10,5))\nsns.countplot(x='Sentiment', data=df, order=['Extremely Negative', 'Negative', 'Neutral', 'Positive', 'Extremely Positive'])\nplt.title(\"Sentiment\")\nplt.ylabel(\"Count\", fontsize = 12)\nplt.xlabel(\"Sentiments\",fontsize = 12)\nplt.show()","f8baac34":"df.info()","8027e8ed":"reg = re.compile(\"(@[A-Za-z0-9]+)|(#[A-Za-z0-9]+)|([^0-9A-Za-z t])|(w+:\/\/S+)\")\ntweet = []\nfor i in df[\"OriginalTweet\"]:\n    tweet.append(reg.sub(\" \", i))\ndf = pd.concat([df, pd.DataFrame(tweet, columns=[\"CleanedTweet\"])], axis=1, sort=False)","503ba4f3":"df.head(10)","1372b5a8":"from sklearn.feature_extraction.text import TfidfVectorizer\nstop_words = set(stopwords.words('english'))     # make a set of stopwords\nvectoriser = TfidfVectorizer(stop_words=None)","f1f49f29":"X_train = vectoriser.fit_transform(df[\"CleanedTweet\"])\n# Encoding the classes in numerical values\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(df['Sentiment'])\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)","7632d32b":"# importing the Test dataset for prediction and testing purposes\ntest_data = pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\",encoding='latin1')\ntest_df = pd.DataFrame(test_data)\ntest_df.head()","b5c52f94":"reg1 = re.compile(\"(@[A-Za-z0-9]+)|(#[A-Za-z0-9]+)|([^0-9A-Za-z t])|(w+:\/\/S+)\")\ntweet = []\nfor i in test_df[\"OriginalTweet\"]:\n    tweet.append(reg1.sub(\" \", i))\ntest_df = pd.concat([test_df, pd.DataFrame(tweet, columns=[\"CleanedTweet\"])], axis=1, sort=False)\ntest_df.head()","d73f8169":"X_test = vectoriser.transform(test_df[\"CleanedTweet\"])\ny_test = encoder.transform(test_df[\"Sentiment\"])\n# Prediction\ny_pred = classifier.predict(X_test)\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()","32f9e985":"from sklearn import metrics\n# Generate the roc curve using scikit-learn.\nfpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred, pos_label=1)\nplt.plot(fpr, tpr)\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.show()\n# Measure the area under the curve. The closer to 1, the \"better\" the predictions.\nprint(\"AUC of the predictions: {0}\".format(metrics.auc(fpr, tpr)))","7c1f18d0":"# Modeling","6c0b1baa":"**8)** LabelEncoder is used here for transforming categorical values into numerical values.","517c582b":"**12)** So, at last, we have performed the accuracy of our model in the form of an AUC curve plotted using the matplotlib library.","684e894a":"Here we got a score of `AUC \u2013 0.64` for the classifier (Naive Byes), we can say that the classifier (Naive Bayes) is not that so good but can acceptable. Since the more nearer to 1 AUC score, the classifier will be better.\n\nIn the same way, we can perform any sentimental analysis of \u201ctweets\u201d.","7c392731":"**9)** Let\u2019s do all operations for test data also.","9df34817":"**5)** Here we will perform a regular expression function to remove any symbols and special characters, etc to get pure data.","14d4eafd":"**2)** Here we have read the file named \u201cCorona_NLP_train\u201d in CSV(comma-separated value) format. And have checked for the top 5 values in the dataset using head()","3c67fc98":"**11)** By using vectorization, we have performed normalization of test data and stored it into x_test & y_test. We have also predicted actual and predicted values.","619b137f":"**4)** In this step, we are able to see how the summary of our data like No. of columns with their data types.","8a0b689e":"**7)** now convert text into the matrix of tokens, we have to import the following library and perform code.","417fb1fc":"# Conclusion\n\nI hope you liked my notebook. Please do share with your friends, colleagues & upvoted. Thank You!\n","54d400fd":"**10)** Here we will perform a regular expression function to remove any symbols and special character, etc to get pure test data.","3962d12e":"**3)** Further, I have performed some data visualizations using matplotlib and seaborn libraries which are really the best visualization libraries in Python. I have plotted only one graph, you can plot more graphs to see how your data is!","73697e2a":"**6)** Now we can see cleaned data obtained from the above code."}}