{"cell_type":{"ee4496b2":"code","6009a61e":"code","19041422":"code","f789f769":"code","50261440":"code","1b1205b4":"code","cd2d2141":"code","689525a8":"code","13dd3ba0":"code","3c48af03":"code","09708ce6":"code","2375771e":"code","e6de6813":"code","674adfce":"code","f6729ed0":"code","df3987ef":"code","e3264d3f":"code","b002a82f":"code","d111e06e":"code","66f7592c":"code","45c478a0":"code","39c81f2e":"code","0e5810f5":"code","e3d6346a":"code","e445b46f":"code","caf961f2":"code","f9216a16":"code","f67c056b":"code","b6559835":"code","0d3db351":"code","7247e645":"code","e1011ecf":"code","474d0488":"code","a0b4c6bb":"code","8246dbfd":"code","9e6aa99b":"code","4af1e9d0":"code","bcf8b1a7":"code","e45867b7":"code","abf34ac0":"code","91a227f6":"code","9a060d60":"code","9b4d17e2":"code","eb669104":"code","86074170":"code","b2e68d2e":"code","ac74627a":"code","81b28ee6":"code","68fb52e6":"code","dda17a4f":"code","1d8a04a6":"code","7aefe092":"code","d8f392fc":"code","148cd6d3":"code","22a8899d":"code","4a704934":"code","9d68f017":"code","8f99df5c":"code","bcf86a84":"code","9572ead3":"code","21d59624":"code","d50ebf0f":"code","db1e22bb":"code","808910d7":"code","b49f6d73":"code","4d971b73":"code","f3fa243a":"code","cd85b5b2":"code","4fc30315":"code","4785be68":"code","7fe73ace":"code","5b9e2867":"code","70897b19":"code","8c0cb27d":"code","069aa305":"code","c83ea8cf":"code","137ce3ce":"code","9c00504b":"code","54fb436d":"code","30f1e41c":"code","c170f528":"code","a1132802":"code","7566f090":"code","31ad5c73":"code","4d49d2de":"code","9edd8b44":"code","d30dd9a7":"code","f69d2b14":"code","e5a982a6":"code","afae9e99":"code","6a034664":"code","561c0aaa":"code","e08e974a":"code","27b7cacf":"code","ece1753c":"code","4f8f9864":"code","2a8d4ba5":"code","f3e0a25a":"code","c58679d4":"code","9d2f412a":"code","07948b9f":"code","c62be612":"code","b4e45187":"code","b64b3f64":"code","9b17ba47":"code","5dd06978":"code","576017f8":"code","fc673cc2":"code","4802cf4d":"code","46e44f2e":"code","afbdb8e8":"code","3e652c97":"code","c1183df6":"code","6a2b15af":"code","cf818c3f":"code","a65fcec1":"markdown","decdfbe1":"markdown","7eb06416":"markdown","c6a1fd2c":"markdown","259e508a":"markdown","5f4c338d":"markdown","b1e39eb0":"markdown","8568ef60":"markdown","38f43071":"markdown","d786a6b2":"markdown","05391d62":"markdown","368e835b":"markdown","af5974f5":"markdown","9d6f4212":"markdown","eeaea7fc":"markdown","d412a8b0":"markdown","226b7e0a":"markdown","eb39c9cb":"markdown","100c181b":"markdown","05879959":"markdown","d08c2f49":"markdown","ca2e3318":"markdown","5efb8ea4":"markdown","25726184":"markdown","bb546f1e":"markdown","13aca1c8":"markdown","bbf6184d":"markdown","5da22a1e":"markdown","0e5f10b9":"markdown","eec4b534":"markdown","88b47b45":"markdown","77d2fd77":"markdown","ae61b737":"markdown","7c2507ed":"markdown","7b62a18a":"markdown","0dbf1173":"markdown","3fe7930c":"markdown","af4a8602":"markdown","44459e43":"markdown","2b236ed8":"markdown","72e1dde0":"markdown","b49133ef":"markdown","97fa0dfb":"markdown","6076b75b":"markdown","5e01bafe":"markdown","8757d787":"markdown","94b003c1":"markdown","66555819":"markdown","e25d3345":"markdown","da8bd080":"markdown","651eb004":"markdown","07dfaead":"markdown","5445eacb":"markdown","89cd5f7c":"markdown"},"source":{"ee4496b2":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","6009a61e":"# using SQLite Table to read data.\ncon = sqlite3.connect('..\/input\/database.sqlite') \n\n# filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n# for tsne assignment you can take 5k data points\n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3\"\"\", con) \n\n# Give reviews with Score>3 a positive rating(1), and reviews with a score<3 a negative rating(0).\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1\n\n#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","19041422":"display = pd.read_sql_query(\"\"\"\nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","f789f769":"print(display.shape)\ndisplay.head()","50261440":"display[display['UserId']=='AZY10LLTJ71NX']","1b1205b4":"display['COUNT(*)'].sum()","cd2d2141":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","689525a8":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","13dd3ba0":"#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","3c48af03":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","09708ce6":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","2375771e":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","e6de6813":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","674adfce":"# printing some random reviews\nsent_0 = final['Text'].values[0]\nprint(sent_0)\nprint(\"=\"*50)\n\nsent_1000 = final['Text'].values[1000]\nprint(sent_1000)\nprint(\"=\"*50)\n\nsent_1500 = final['Text'].values[1500]\nprint(sent_1500)\nprint(\"=\"*50)\n\nsent_4900 = final['Text'].values[4900]\nprint(sent_4900)\nprint(\"=\"*50)","f6729ed0":"# remove urls from text python: https:\/\/stackoverflow.com\/a\/40823105\/4084039\nsent_0 = re.sub(r\"http\\S+\", \"\", sent_0)\nsent_1000 = re.sub(r\"http\\S+\", \"\", sent_1000)\nsent_150 = re.sub(r\"http\\S+\", \"\", sent_1500)\nsent_4900 = re.sub(r\"http\\S+\", \"\", sent_4900)\n\nprint(sent_0)","df3987ef":"# https:\/\/stackoverflow.com\/questions\/16206380\/python-beautifulsoup-how-to-remove-all-tags-from-an-element\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(sent_0, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1000, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_1500, 'lxml')\ntext = soup.get_text()\nprint(text)\nprint(\"=\"*50)\n\nsoup = BeautifulSoup(sent_4900, 'lxml')\ntext = soup.get_text()\nprint(text)","e3264d3f":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","b002a82f":"sent_1500 = decontracted(sent_1500)\nprint(sent_1500)\nprint(\"=\"*50)","d111e06e":"#remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039\nsent_0 = re.sub(\"\\S*\\d\\S*\", \"\", sent_0).strip()\nprint(sent_0)","66f7592c":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent_1500 = re.sub('[^A-Za-z0-9]+', ' ', sent_1500)\nprint(sent_1500)","45c478a0":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st step\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","39c81f2e":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","0e5810f5":"preprocessed_reviews[1500]","e3d6346a":"final['cleaned_text']=preprocessed_reviews","e445b46f":"data_pos = final[final[\"Score\"] == 1].sample(n = 10000)\ndata_neg = final[final[\"Score\"] == 0].sample(n = 10000)\nfinal1 = pd.concat([data_pos, data_neg])\nfinal1.shape\n","caf961f2":"Y = final1['Score'].values\nX = final1['cleaned_text'].values\nprint(Y.shape)\nprint(type(Y))\nprint(X.shape)\nprint(type(X))","f9216a16":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=12)\nX_train,X_cv,Y_train,Y_cv=train_test_split(X,Y,test_size=0.2,random_state=12)\nprint('='*100)\nprint(\"After splitting\")\nprint(X_train.shape,Y_train.shape)\nprint(X_cv.shape,Y_cv.shape)\nprint(X_test.shape,Y_test.shape)","f67c056b":"vectorizer=CountVectorizer()\nvectorizer=vectorizer.fit(X_train)\nX_train_bow=vectorizer.transform(X_train)\nX_cv_bow=vectorizer.transform(X_cv)\nX_test_bow=vectorizer.transform(X_test)\nprint('='*100)\nprint(\"After transform\")\nprint(X_train_bow.shape,Y_train.shape)\nprint(X_cv_bow.shape,Y_cv.shape)\nprint(X_test_bow.shape,Y_cv.shape)","b6559835":"print(Y_train.shape)\nprint(Y_cv.shape)","0d3db351":"train_auc = []\ncv_auc = []\nK = list(range(1, 150, 10))\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='brute')\n    neigh.fit(X_train_bow, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(X_train_bow)[:,1]\n    Y_cv_pred =  neigh.predict_proba(X_cv_bow)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","7247e645":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nneighbors = list(range(80, 100, 2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='brute')\n    scores = cross_val_score(knn, X_train_bow, Y_train, cv=10, scoring='accuracy')\n    cv_score.append(scores.mean())                             ","e1011ecf":"MSE = [1 - x for x in cv_score]\noptimal_k1 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k1)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","474d0488":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k1,algorithm='brute')\noptimal_model.fit(X_train_bow, Y_train)\nprediction = optimal_model.predict(X_test_bow)","a0b4c6bb":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, optimal_model.predict_proba(X_train_bow)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, optimal_model.predict_proba(X_test_bow)[:,1])\nAUC1=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","8246dbfd":"training_accuracy = optimal_model.score(X_train_bow, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)\n","9e6aa99b":"import seaborn as sb\nconf_matrix = confusion_matrix(Y_test, optimal_model.predict(X_test_bow))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","4af1e9d0":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","bcf8b1a7":"# Please write all the code with proper documentation\ntf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=5)\ntf_idf_vect.fit(X_train)\nX_train_tfidf= tf_idf_vect.transform(X_train)\nX_cv_tfidf=tf_idf_vect.transform(X_cv)\nX_test_tfidf=tf_idf_vect.transform(X_test)","e45867b7":"train_auc = []\ncv_auc = []\nK = list(range(1, 400, 10))\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='brute')\n    neigh.fit(X_train_tfidf, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(X_train_tfidf)[:,1]\n    Y_cv_pred =  neigh.predict_proba(X_cv_tfidf)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","abf34ac0":"neighbors = list(range(151, 400,10))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='brute')\n    scores = cross_val_score(knn, X_train_tfidf, Y_train, cv=10, scoring='accuracy')\n    cv_score.append(scores.mean())       ","91a227f6":"MSE = [1 - x for x in cv_score]\noptimal_k2 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k2)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","9a060d60":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k2, algorithm='brute')\noptimal_model.fit(X_train_tfidf, Y_train)\nprediction = optimal_model.predict(X_test_tfidf)","9b4d17e2":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, optimal_model.predict_proba(X_train_tfidf)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, optimal_model.predict_proba(X_test_tfidf)[:,1])\nAUC2=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","eb669104":"training_accuracy = optimal_model.score(X_train_tfidf, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)","86074170":"import seaborn as sb\nconf_matrix = confusion_matrix(Y_test, optimal_model.predict(X_test_tfidf))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","b2e68d2e":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","ac74627a":"# Please write all the code with proper documentation\ni=0\nlist_of_sentance_train=[]\nfor sentance in X_train:\n    list_of_sentance_train.append(sentance.split())\n\n# this line of code trains your w2v model on the give list of sentances\nw2v_model=Word2Vec(list_of_sentance_train,min_count=5,size=50, workers=4)\n\nw2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:50])","81b28ee6":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_train = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_train): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_train.append(sent_vec)\nsent_vectors_train = np.array(sent_vectors_train)\nprint(sent_vectors_train.shape)\nprint(sent_vectors_train[0])","68fb52e6":"i=0\nlist_of_sentance_cv=[]\nfor sentance in X_cv:\n    list_of_sentance_cv.append(sentance.split())\n# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_cv = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_cv): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_cv.append(sent_vec)\nsent_vectors_cv = np.array(sent_vectors_cv)\nprint(sent_vectors_cv.shape)\nprint(sent_vectors_cv[0])","dda17a4f":"i=0\nlist_of_sentance_test=[]\nfor sentance in X_test:\n    list_of_sentance_test.append(sentance.split())\n# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_test = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_test): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_test.append(sent_vec)\nsent_vectors_test = np.array(sent_vectors_test)\nprint(sent_vectors_test.shape)\nprint(sent_vectors_test[0])","1d8a04a6":"train_auc = []\ncv_auc = []\nK = list(range(1,150,10))\nfor i in K:\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='brute')\n    neigh.fit(sent_vectors_train, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(sent_vectors_train)[:,1]\n    Y_cv_pred =  neigh.predict_proba(sent_vectors_cv)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","7aefe092":"neighbors = list(range(31,45, 2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='brute')\n    scores = cross_val_score(knn, sent_vectors_train, Y_train, cv=10, scoring='f1')\n    cv_score.append(scores.mean())       ","d8f392fc":"MSE = [1 - x for x in cv_score]\noptimal_k3 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k3)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","148cd6d3":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k3, algorithm='brute')\noptimal_model.fit(sent_vectors_train, Y_train)\nprediction = optimal_model.predict(sent_vectors_test)","22a8899d":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, optimal_model.predict_proba(sent_vectors_train)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, optimal_model.predict_proba(sent_vectors_test)[:,1])\nAUC3=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n","4a704934":"training_accuracy = optimal_model.score(sent_vectors_train, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)","9d68f017":"import seaborn as sb\nconf_matrix = confusion_matrix(Y_test, optimal_model.predict(sent_vectors_test))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","8f99df5c":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","bcf86a84":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit(X_train)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","9572ead3":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_train=[]\nfor sentance in X_train:\n    list_of_sentance_train.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_train = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_train): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_train.append(sent_vec)\n    row += 1","21d59624":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_cv=[]\nfor sentance in X_cv:\n    list_of_sentance_cv.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_cv = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_cv): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_cv.append(sent_vec)\n    row += 1","d50ebf0f":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_test=[]\nfor sentance in X_test:\n    list_of_sentance_test.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_test = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_test): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_test.append(sent_vec)\n    row += 1","db1e22bb":"train_auc = []\ncv_auc = []\nK = list(range(1,150,10))\nfor i in K:\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='brute')\n    neigh.fit(tfidf_sent_vectors_train, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(tfidf_sent_vectors_train)[:,1]\n    Y_cv_pred =  neigh.predict_proba(tfidf_sent_vectors_cv)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","808910d7":"neighbors = list(range(21, 50, 2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='brute')\n    scores = cross_val_score(knn, tfidf_sent_vectors_train, Y_train, cv=10, scoring='f1')\n    cv_score.append(scores.mean())       ","b49f6d73":"MSE = [1 - x for x in cv_score]\noptimal_k4 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k4)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","4d971b73":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k4, algorithm='brute')\noptimal_model.fit(tfidf_sent_vectors_train, Y_train)\nprediction = optimal_model.predict(tfidf_sent_vectors_test)\n\n","f3fa243a":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, optimal_model.predict_proba(tfidf_sent_vectors_train)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, optimal_model.predict_proba(tfidf_sent_vectors_test)[:,1])\nAUC4=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n","cd85b5b2":"training_accuracy = optimal_model.score(tfidf_sent_vectors_train, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)\n\nimport seaborn as sb","4fc30315":"conf_matrix = confusion_matrix(Y_test, optimal_model.predict(tfidf_sent_vectors_test))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","4785be68":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","7fe73ace":"data_pos1 = final[final[\"Score\"] == 1].sample(n = 1000)\ndata_neg1 = final[final[\"Score\"] == 0].sample(n = 1000)\nfinal2 = pd.concat([data_pos1, data_neg1])\nfinal2.shape\n\nB = final2['Score'].values\nA = final2['cleaned_text'].values\nprint(B.shape)\nprint(type(B))\nprint(A.shape)\nprint(type(B))","5b9e2867":"A_train,A_test,B_train,B_test=train_test_split(A,B,test_size=0.2,random_state=12)\nA_train,A_cv,B_train,B_cv=train_test_split(A,B,test_size=0.2,random_state=12)\nprint('='*100)\nprint(\"After splitting\")\nprint(A_train.shape,B_train.shape)\nprint(A_cv.shape,B_cv.shape)\nprint(A_test.shape,B_test.shape)","70897b19":"\nvectorizer=CountVectorizer(min_df=10, max_features=500)\nvectorizer=vectorizer.fit(A_train)\nA_train_bow_kdtree=vectorizer.transform(A_train)\nA_cv_bow_kdtree=vectorizer.transform(A_cv)\nA_test_bow_kdtree=vectorizer.transform(A_test)\nprint('='*100)\nprint(\"After transform\")\nprint(A_train_bow_kdtree.shape,B_train.shape)\nprint(A_cv_bow_kdtree.shape,B_cv.shape)\nprint(A_test_bow_kdtree.shape,B_cv.shape)","8c0cb27d":"train_auc = []\ncv_auc = []\nK = list(range(1,200,10))\nfor i in K:\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='kd_tree')\n    neigh.fit(A_train_bow_kdtree.todense(), B_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    B_train_pred =  neigh.predict_proba(A_train_bow_kdtree.todense())[:,1]\n    B_cv_pred =  neigh.predict_proba(A_cv_bow_kdtree.todense())[:,1]\n    \n    train_auc.append(roc_auc_score(B_train,B_train_pred))\n    cv_auc.append(roc_auc_score(B_cv, B_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","069aa305":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nneighbors = list(range(31, 71, 2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='kd_tree')\n    scores = cross_val_score(knn, A_train_bow_kdtree.todense(), B_train, cv=10, scoring='accuracy')\n    cv_score.append(scores.mean())                             ","c83ea8cf":"MSE = [1 - x for x in cv_score]\noptimal_k5 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k5)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","137ce3ce":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k5,algorithm='kd_tree')\noptimal_model.fit(A_train_bow_kdtree.todense(), B_train)\nprediction = optimal_model.predict(A_test_bow_kdtree.todense())\n","9c00504b":"train_fpr, train_tpr, thresholds = roc_curve(B_train, optimal_model.predict_proba(A_train_bow_kdtree.todense())[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(B_test, optimal_model.predict_proba(A_test_bow_kdtree.todense())[:,1])\nAUC5=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","54fb436d":"training_accuracy = optimal_model.score(A_train_bow_kdtree.todense(), B_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(B_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)\n","30f1e41c":"import seaborn as sb\nconf_matrix = confusion_matrix(B_test, optimal_model.predict(A_test_bow_kdtree.todense()))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","c170f528":"from sklearn.metrics import classification_report\nprint(classification_report(B_test, prediction))","a1132802":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=5, max_df=100)\ntf_idf_vect.fit(A_train)\nA_train_tfidf =tf_idf_vect.transform(A_train)\nA_cv_tfidf=tf_idf_vect.transform(A_cv)\nA_test_tfidf=tf_idf_vect.transform(A_test)\nprint(A_train_tfidf.shape)","7566f090":"train_auc = []\ncv_auc = []\nK = list(range(1,200,10))\nfor i in K:\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='kd_tree')\n    neigh.fit(A_train_tfidf.todense(), B_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    B_train_pred =  neigh.predict_proba(A_train_tfidf.todense())[:,1]\n    B_cv_pred =  neigh.predict_proba(A_cv_tfidf.todense())[:,1]\n    \n    train_auc.append(roc_auc_score(B_train,B_train_pred))\n    cv_auc.append(roc_auc_score(B_cv, B_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","31ad5c73":"from sklearn.metrics import accuracy_score\nneighbors = list(range(109,125,2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='kd_tree')\n    scores = cross_val_score(knn, A_train_tfidf.todense(), B_train, cv=3, scoring='accuracy')\n    cv_score.append(scores.mean())     ","4d49d2de":"MSE = [1 - x for x in cv_score]\noptimal_k6 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k6)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","9edd8b44":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k6, algorithm='kd_tree')\noptimal_model.fit(A_train_tfidf.todense(), B_train)\nprediction = optimal_model.predict(A_test_tfidf.todense())","d30dd9a7":"train_fpr, train_tpr, thresholds = roc_curve(B_train, optimal_model.predict_proba(A_train_tfidf.todense())[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(B_test, optimal_model.predict_proba(A_test_tfidf.todense())[:,1])\nAUC6=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n","f69d2b14":"training_accuracy = optimal_model.score(A_train_tfidf.todense(), B_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(B_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)","e5a982a6":"import seaborn as sb\nconf_matrix = confusion_matrix(B_test, optimal_model.predict(A_test_tfidf.todense()))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","afae9e99":"from sklearn.metrics import classification_report\nprint(classification_report(B_test, prediction))","6a034664":"i=0\nlist_of_sentance_train=[]\nfor sentance in X_train:\n    list_of_sentance_train.append(sentance.split())\n\n# this line of code trains your w2v model on the give list of sentances\nw2v_model=Word2Vec(list_of_sentance_train,min_count=5,size=50, workers=4)\n\nw2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:50])","561c0aaa":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_train = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_train): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_train.append(sent_vec)\nsent_vectors_train = np.array(sent_vectors_train)\nprint(sent_vectors_train.shape)\nprint(sent_vectors_train[0])","e08e974a":"i=0\nlist_of_sentance_cv=[]\nfor sentance in X_cv:\n    list_of_sentance_cv.append(sentance.split())\n# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_cv = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_cv): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_cv.append(sent_vec)\nsent_vectors_cv = np.array(sent_vectors_cv)\nprint(sent_vectors_cv.shape)\nprint(sent_vectors_cv[0])","27b7cacf":"i=0\nlist_of_sentance_test=[]\nfor sentance in X_test:\n    list_of_sentance_test.append(sentance.split())\n# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors_test = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance_test): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors_test.append(sent_vec)\nsent_vectors_test = np.array(sent_vectors_test)\nprint(sent_vectors_test.shape)\nprint(sent_vectors_test[0])","ece1753c":"train_auc = []\ncv_auc = []\nK = list(range(1,200,10))\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='kd_tree')\n    neigh.fit(sent_vectors_train, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(sent_vectors_train)[:,1]\n    Y_cv_pred =  neigh.predict_proba(sent_vectors_cv)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","4f8f9864":"neighbors = list(range(9,35,2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='kd_tree')\n    scores = cross_val_score(knn, sent_vectors_train, Y_train, cv=10, scoring='f1')\n    cv_score.append(scores.mean())       ","2a8d4ba5":"MSE = [1 - x for x in cv_score]\noptimal_k7 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k7)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","f3e0a25a":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k7, algorithm='kd_tree')\noptimal_model.fit(sent_vectors_train, Y_train)\nprediction = optimal_model.predict(sent_vectors_test)","c58679d4":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, neigh.predict_proba(sent_vectors_train)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, neigh.predict_proba(sent_vectors_test)[:,1])\nAUC7=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n","9d2f412a":"training_accuracy = optimal_model.score(sent_vectors_train, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)","07948b9f":"import seaborn as sb\nconf_matrix = confusion_matrix(Y_test, optimal_model.predict(sent_vectors_test))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","c62be612":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","b4e45187":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\ntf_idf_matrix = model.fit(X_train)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","b64b3f64":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_train=[]\nfor sentance in X_train:\n    list_of_sentance_train.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_train = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_train): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_train.append(sent_vec)\n    row += 1","9b17ba47":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_cv=[]\nfor sentance in X_cv:\n    list_of_sentance_cv.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_cv = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_cv): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_cv.append(sent_vec)\n    row += 1","5dd06978":"# TF-IDF weighted Word2Vec\ni=0\nlist_of_sentance_test=[]\nfor sentance in X_test:\n    list_of_sentance_test.append(sentance.split())\ntfidf_feat = tf_idf_vect.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors_test = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance_test): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors_test.append(sent_vec)\n    row += 1","576017f8":"train_auc = []\ncv_auc = []\nK = list(range(1,200,10))\nfor i in tqdm(K):\n    neigh = KNeighborsClassifier(n_neighbors=i, algorithm='kd_tree')\n    neigh.fit(sent_vectors_train, Y_train)\n    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n    # not the predicted outputs\n    Y_train_pred =  neigh.predict_proba(sent_vectors_train)[:,1]\n    Y_cv_pred =  neigh.predict_proba(sent_vectors_cv)[:,1]\n    \n    train_auc.append(roc_auc_score(Y_train,Y_train_pred))\n    cv_auc.append(roc_auc_score(Y_cv, Y_cv_pred))\n\nplt.plot(K, train_auc, label='Train AUC')\nplt.scatter(K, train_auc, label='Train AUC')\nplt.plot(K, cv_auc, label='CV AUC')\nplt.scatter(K, cv_auc, label='CV AUC')\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()","fc673cc2":"from sklearn.model_selection import cross_val_score\nneighbors = list(range(13, 50, 2))\ncv_score = []\nfor k in tqdm(neighbors):\n    knn = KNeighborsClassifier(n_neighbors=k, algorithm='kd_tree')\n    scores = cross_val_score(knn, tfidf_sent_vectors_train, Y_train, cv=10, scoring='accuracy')\n    cv_score.append(scores.mean())       ","4802cf4d":"MSE = [1 - x for x in cv_score]\noptimal_k8 = neighbors[MSE.index(min(MSE))]\nprint(\"_\" * 101)\nprint(\"Optimal number of neighbors: \", optimal_k8)\nprint(\"_\" * 101)\nprint(\"Missclassification error for each k values: \", np.round(MSE, 3))\nprint(\"_\" * 101)\n\nplt.plot(neighbors, MSE)\nplt.title(\"Number of neighbors and error\")\nplt.xlabel(\"Number of neighbors\")\nplt.ylabel(\"Missclassification error\")\nplt.show()","46e44f2e":"optimal_model = KNeighborsClassifier(n_neighbors=optimal_k8, algorithm='kd_tree')\noptimal_model.fit(tfidf_sent_vectors_train, Y_train)\nprediction = optimal_model.predict(tfidf_sent_vectors_test)","afbdb8e8":"train_fpr, train_tpr, thresholds = roc_curve(Y_train, neigh.predict_proba(tfidf_sent_vectors_train)[:,1])\ntest_fpr, test_tpr, thresholds = roc_curve(Y_test, neigh.predict_proba(tfidf_sent_vectors_test)[:,1])\nAUC8=str(auc(test_fpr, test_tpr))\nplt.plot(train_fpr, train_tpr, label=\"train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"K: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"ERROR PLOTS\")\nplt.show()\n","3e652c97":"training_accuracy = optimal_model.score(tfidf_sent_vectors_train, Y_train)\ntraining_error = 1 - training_accuracy\ntest_accuracy = accuracy_score(Y_test, prediction)\ntest_error = 1 - test_accuracy\n\n\nprint(\"_\" * 101)\nprint(\"Training Accuracy: \", training_accuracy)\nprint(\"Train Error: \", training_error)\nprint(\"Test Accuracy: \", test_accuracy)\nprint(\"Test Error: \", test_error)\nprint(\"_\" * 101)","c1183df6":"import seaborn as sb\nconf_matrix = confusion_matrix(Y_test, optimal_model.predict(tfidf_sent_vectors_test))\nclass_label = [0, 1]\ndf_conf_matrix = pd.DataFrame(\n    conf_matrix, index=class_label, columns=class_label)\nsb.heatmap(df_conf_matrix, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.show()\nprint(\"_\" * 101)","6a2b15af":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, prediction))","cf818c3f":"from prettytable import PrettyTable\ncomparison = PrettyTable()\ncomparison.field_names = [\"Vectorizer\", \"Model\", \"Hyperparameter\", \"AUC\"]\ncomparison.add_row([\"BOW\", 'brute', optimal_k1, np.round(float(AUC1),3)])\ncomparison.add_row([\"TFIDF\", 'brute', optimal_k2, np.round(float(AUC2),3)])\ncomparison.add_row([\"AVG W2V\", 'brute', optimal_k3, np.round(float(AUC3),3)])\ncomparison.add_row([\"Weighted W2V\", 'brute', optimal_k4,np.round(float(AUC4),3)])\ncomparison.add_row([\"BOW\", 'kd_tree', optimal_k5, np.round(float(AUC5),3)])\ncomparison.add_row([\"TFIDF\", 'kd_tree', optimal_k6, np.round(float(AUC6),3)])\ncomparison.add_row([\"AVG W2V\", 'kd_tree', optimal_k7, np.round(float(AUC7),3)])\ncomparison.add_row([\"Weighted W2V\", 'kd_tree', optimal_k8, np.round(float(AUC8),3)])\nprint(comparison)\n","a65fcec1":"Confusion Matrix","decdfbe1":"Confusion Matrix","7eb06416":"Plotting the AUC Curve","c6a1fd2c":"### [4.1.3] Applying KNN brute force on AVG W2V,<font color='red'> SET 3<\/font>","259e508a":"Plotting the AUC Curve","5f4c338d":"# [5] Conclusions","b1e39eb0":"Accuracy Check","8568ef60":" Accuracy Check","38f43071":"# [1]. Reading Data","d786a6b2":"Confusion Matrix","05391d62":"Classification Report","368e835b":"Classification Matrix","af5974f5":"## [4.2] Applying KNN kd-tree","9d6f4212":"Confusion matrix","eeaea7fc":"Accuracy Check","d412a8b0":"Plotting The AUC Curve","226b7e0a":"## [1.1] Loading the data\n\nThe dataset is available in two forms\n1. .csv file\n2. SQLite Database\n\nIn order to load the data, We have used the SQLITE dataset as it is easier to query the data and visualise the data efficiently.\n<br> \n\nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score is above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".","eb39c9cb":"# BOW","100c181b":"Classification Matrix","05879959":"Confusion Matrix","d08c2f49":"Plotting the AUC Curve","ca2e3318":"Classification Report","5efb8ea4":"Confusion matrix","25726184":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","bb546f1e":"# Amazon Fine Food Reviews Analysis\n\n\nData Source: https:\/\/www.kaggle.com\/snap\/amazon-fine-food-reviews <br>\n\nEDA: https:\/\/nycdatascience.com\/blog\/student-works\/amazon-fine-foods-visualization\/\n\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.<br>\n\nNumber of reviews: 568,454<br>\nNumber of users: 256,059<br>\nNumber of products: 74,258<br>\nTimespan: Oct 1999 - Oct 2012<br>\nNumber of Attributes\/Columns in data: 10 \n\nAttribute Information:\n\n1. Id\n2. ProductId - unique identifier for the product\n3. UserId - unqiue identifier for the user\n4. ProfileName\n5. HelpfulnessNumerator - number of users who found the review helpful\n6. HelpfulnessDenominator - number of users who indicated whether they found the review helpful or not\n7. Score - rating between 1 and 5\n8. Time - timestamp for the review\n9. Summary - brief summary of the review\n10. Text - text of the review\n\n\n#### Objective:\nGiven a review, determine whether the review is positive (rating of 4 or 5) or negative (rating of 1 or 2).\n\n<br>\n[Q] How to determine if a review is positive or negative?<br>\n<br> \n[Ans] We could use Score\/Rating. A rating of 4 or 5 can be cosnidered as a positive review. A rating of 1 or 2 can be considered as negative one. A review of rating 3 is considered nuetral and such reviews are ignored from our analysis. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.\n\n\n","13aca1c8":"### [4.2.4] Applying KNN kd-tree on TFIDF W2V,<font color='red'> SET 4<\/font>","bbf6184d":"Plotting the AUC Curve","5da22a1e":"### [4.1.4] Applying KNN brute force on TFIDF W2V,<font color='red'> SET 4<\/font>","0e5f10b9":"Accuracy Check","eec4b534":"Accuracy Check","88b47b45":"### [4.2.2] Applying KNN kd-tree on TFIDF,<font color='red'> SET 6<\/font>","77d2fd77":"Plotting the AUC Curve","ae61b737":" Classification Report","7c2507ed":"## [3.1].  Preprocessing Review Text\n\nNow that we have finished deduplication our data requires some preprocessing before we go on further with analysis and making the prediction model.\n\nHence in the Preprocessing phase we do the following in the order below:-\n\n1. Begin by removing the html tags\n2. Remove any punctuations or limited set of special characters like , or . or # etc.\n3. Check if the word is made up of english letters and is not alpha-numeric\n4. Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)\n5. Convert the word to lowercase\n6. Remove Stopwords\n7. Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming)<br>\n\nAfter which we collect the words used to describe positive and negative reviews","7b62a18a":"Accuracy Check","0dbf1173":"### [4.1.2] Applying KNN brute force on TFIDF,<font color='red'> SET 2<\/font>","3fe7930c":"Confusion Matrix","af4a8602":"#  [3] Preprocessing","44459e43":"## [4.1] Applying KNN brute force","2b236ed8":"Classification Report","72e1dde0":"Accuracy Check","b49133ef":"#  [2] Exploratory Data Analysis","97fa0dfb":"### [4.2.3] Applying KNN kd-tree on AVG W2V,<font color='red'> SET 3<\/font>","6076b75b":"Classification report","5e01bafe":"As it can be seen above that same user has multiple reviews with same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","8757d787":"## [2.1] Data Cleaning: Deduplication\n\nIt is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","94b003c1":"Classification Matrix","66555819":"Plotiing the AUC","e25d3345":"Accuracy Check","da8bd080":"### [4.2.1] Applying KNN kd-tree on BOW,<font color='red'> SET 5<\/font>","651eb004":"<b><li>[1]. With reference to the Comparison Report above, 391-NN by using TFIDF with brute force model provides the best AUC and thus best performance. <\/li>\n   <li>[2]. The Optimal K is to be chosen such that our model is not Overfit or Underfit. This can be done by simply following the below methods:<\/li>\n    <li>-(i).  Split the dataset into TRAIN-CV-TEST with an appropriate ratio like 0.6:0.2:0.2<\/li>\n    <li>-(ii). Plot the ROC_AUC curve of both, Train and CV data.<\/li>\n    <li>-(iii).Now choose the a range for K such that the AUC of CV curve should be large and at the same time, should be closest to the TRAIN curve.<\/li>\n    <li>-(iv). Now Apply cross_val_score to the selected range and from it, the optimal K can be calculated ny using the minimum Misclassification error function.<\/li> \n   <li>[3]. Even though the 391-NN TFIDF gives us an accuracy of 0.84, we cannot be sure after dwployment that the model will give us exact same accuracy because the the data wasn't time based splitted.<\/li> <\/b>\n    ","07dfaead":"Plotting the AUC Curve","5445eacb":" Confusion Matrix","89cd5f7c":"### [4.1.1] Applying KNN brute force on BOW,<font color='red'> SET 1<\/font>"}}