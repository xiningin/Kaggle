{"cell_type":{"d033d3f3":"code","684b3bfc":"code","9fffad67":"code","5fc6a164":"code","b9b9a00c":"code","c793374c":"code","8421791c":"code","b1e6a046":"code","4982aa13":"code","c975a240":"code","f1e6f32b":"code","181a016a":"code","4d6846b5":"code","9df90923":"code","3f7845f9":"code","a1728a10":"code","74f9e920":"code","26076f8e":"code","7468320e":"code","85ce86fc":"code","d61fcd5e":"code","380696dc":"code","40da4b4c":"code","706ba46d":"code","7ca21134":"code","5d4a5130":"code","5809408a":"code","3855b086":"code","239cdc7e":"code","83112214":"code","32a1eed6":"code","c78d7a34":"code","d799607a":"code","2872fbaf":"code","01c71fac":"code","3004abd8":"markdown","f498d0d7":"markdown","adb36414":"markdown","f2c7c359":"markdown","a55bf13e":"markdown","e3d3b350":"markdown","895f6347":"markdown","25749995":"markdown"},"source":{"d033d3f3":"# Import Libraries","684b3bfc":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","9fffad67":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","5fc6a164":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","b9b9a00c":"train.info()","c793374c":"test.info()","8421791c":"all = pd.concat([train, test], sort = False)\nall.info()","b1e6a046":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","4982aa13":"all.info()","c975a240":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","f1e6f32b":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","181a016a":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","4d6846b5":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","9df90923":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","3f7845f9":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","a1728a10":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","74f9e920":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","26076f8e":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","7468320e":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","85ce86fc":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","d61fcd5e":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","380696dc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","40da4b4c":"from sklearn.linear_model import LogisticRegression","706ba46d":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","7ca21134":"predictions = logmodel.predict(X_test)\npredictions","5d4a5130":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","5809408a":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","3855b086":"all_test.head()","239cdc7e":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","83112214":"TestForPred.info()","32a1eed6":"t_pred = logmodel.predict(TestForPred).astype(int)","c78d7a34":"PassengerId = all_test['PassengerId']","d799607a":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","2872fbaf":"logSub.to_csv(\"gender_submission.csv\", index = False)","01c71fac":"logSub.to_csv('..\/input\/titanic\/gender_submission.csv', index=False)","3004abd8":"## Combine train and test","f498d0d7":"****Extra Features:","adb36414":"****Build Logistic Model","f2c7c359":"****Train\/Test Split","a55bf13e":"# Import Data","e3d3b350":"****Final Predictions","895f6347":"****Check Accuracy","25749995":"****Confusion Matrix"}}