{"cell_type":{"96b7bc0b":"code","2ba34fc7":"code","16fe686e":"code","98f6943b":"code","d0739f9a":"code","91a1e792":"code","ef352100":"code","e11cfe1a":"code","166b9d7f":"code","f516fbd1":"code","bb04aa49":"code","c1098f99":"code","17e8f584":"code","02ecea3a":"code","493b1f2a":"code","61029ca5":"code","7afa824b":"markdown","2f21b03b":"markdown","b6e80cdf":"markdown","a185d6b6":"markdown","06ba8d86":"markdown","1fa8c118":"markdown","835a9826":"markdown","a21a30a7":"markdown","32c6a5f0":"markdown"},"source":{"96b7bc0b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport sklearn\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\n\nfrom lightgbm import LGBMClassifier\nfrom lightgbm import plot_importance\n\nimport optuna.integration.lightgbm as lgb\nimport optuna","2ba34fc7":"train_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')","16fe686e":"train_df = train_data.drop(['id'], axis=1)\ntest_df = test_data.drop(['id'], axis=1)","98f6943b":"X = train_df.drop('target', axis=1)\ny = train_df['target']","d0739f9a":"scaler = StandardScaler()\nX = scaler.fit_transform(X)","91a1e792":"_test = scaler.fit_transform(test_df)","ef352100":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, shuffle=True, random_state=266632)","e11cfe1a":"Train_Data = lgb.Dataset(X_train, y_train)\nValid_Data = lgb.Dataset(X_valid, y_valid)","166b9d7f":"def objective(trial):\n    param = {\n        'metric': 'auc',\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'feature_pre_filter': False,\n        # 'device':'gpu',\n    }\n    model = lgb.train(param,\n                    Train_Data,\n                    valid_sets=Valid_Data,\n                    early_stopping_rounds=15,\n                    verbose_eval = False)\n\n    preds = model.predict(X_valid)\n    pred_labels = np.rint(preds)\n    accuracy = sklearn.metrics.accuracy_score(y_valid, pred_labels)\n    return accuracy","f516fbd1":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=75)","bb04aa49":"print('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","c1098f99":"params = {'metric': 'auc',\n          # 'device':'gpu',  # If you don't use GPU, Please Comment out this.\n          'early_stopping_rounds': 15}\nparams = params.update(study.best_trial.params)","17e8f584":"model = train(params,\n              Train_Data,\n              valid_sets=Valid_Data,\n              early_stopping_rounds=15)","02ecea3a":"prediction = model.predict(_test)","493b1f2a":"submission = pd.DataFrame({'id':test_data['id'], 'target': prediction})","61029ca5":"submission.to_csv('submission.csv', index=False)","7afa824b":"We get optimized hyper-parameter by Optuna.\n\nLet's use this.","2f21b03b":"# Train and Predict.","b6e80cdf":"# Optuna's Setup","a185d6b6":"## Predict","06ba8d86":"# Submit","1fa8c118":"# Import Data.","835a9826":"## Train","a21a30a7":"ID is not necessary.\n\nSo I'm deleting it.","32c6a5f0":"Optuna can optimize hyper-parameter.\n\nI use LightGBM and Optuna."}}