{"cell_type":{"448cd04a":"code","3a32fd12":"code","4fb42687":"code","9c6f0c27":"code","93354545":"code","2fe03783":"code","2cbbaee2":"code","06cbfd6c":"markdown","8cc987b2":"markdown","2270d071":"markdown","50f48084":"markdown","354a22b1":"markdown","253a161a":"markdown","a0a9df69":"markdown","5ff51011":"markdown","486115d0":"markdown","16b4a7b8":"markdown"},"source":{"448cd04a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3a32fd12":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(r'\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv')\ndf['count'] = 1  #Assit col\ndf = df[df['value_eur'] > 1]  #Exclude player with 0 value\ndf.head(5)\n","4fb42687":"def top_n_charts(field, n):\n    df_club = df.groupby([field]).mean()\n    df_club = df_club.sort_values('overall', ascending = False).reset_index()\n\n    ls = df.groupby([field]).sum()\n    ls = ls[ls['count'] > 10].index\n\n    df_club = df_club[df_club[field].isin(ls)]\n\n    f, ax = plt.subplots(figsize = (20,5))\n    sns.barplot(x = field, y = 'overall', data = df_club.iloc[:n])\n    ax.set(ylim = (60,85))\n\ntop_n_charts('club', 10)\ntop_n_charts('nationality', 10)","9c6f0c27":"df['best_pos'] = df['player_positions'].str.split(',').str[0]\ndf_player = df[df['best_pos']!= 'GK'].copy()\n\ndct_pos = {\n    'ST': 'Fwd_Centre',\n    'CF': 'Fwd_Centre',\n    'LW': 'Fwd_Winger',\n    'RW': 'Fwd_Winger',\n    'CM': 'Mid_Centre',\n    'CAM': 'Mid_Centre',\n    'CDM': 'Mid_Centre',\n    'LM': 'Mid_Side',\n    'RM': 'Mid_Side',\n    'CB': 'Back_Centre',\n    'LB': 'Back_Side',\n    'RB': 'Back_Side',\n    'LWB': 'Back_Winger',\n    'RWB': 'Back_Winger',\n}\n\ndf_player['best_pos'] = df_player['best_pos'].map(dct_pos)\n\ns = ['Back_Centre',\n 'Back_Side',\n 'Back_Winger',\n 'Mid_Centre',\n 'Mid_Side',\n 'Fwd_Centre',\n 'Fwd_Winger']","93354545":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import export_graphviz\n\nfrom sklearn.neural_network import MLPClassifier\n\ndef display_confusion_matrix(y, y_hat, label, axs):\n    res = confusion_matrix(y, y_hat, labels = label)\n    row_sums = res.astype(np.float).sum(axis=1)\n    res = res\/row_sums[:, np.newaxis]\n    res = pd.DataFrame(res, columns = label, index = label)\n    sns.heatmap(res, cmap=\"Blues\", annot=True, ax=axs)\n\n#pd.DataFrame(y_test).groupby('best_pos')['best_pos'].count()\n\ncols = ['pace', 'shooting', 'passing', 'dribbling', 'defending', 'physic']\nfor col in cols:\n    df_player.loc[:, 'n_'+col] = df_player[col] \/ df_player['overall']\n\nreq_col_basic = ['n_'+col for col in cols]\n\nX = df_player[req_col_basic]\ny = df_player['best_pos']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nfig, ax = plt.subplots(ncols=3, figsize=(25,5))\n\n#KNN Classifier\nclassifier = KNeighborsClassifier(n_neighbors=10)\nclassifier.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, classifier.predict(X_test), s, ax[0])\n\n#Decision Tree Classifier\nmodel = tree.DecisionTreeClassifier(max_depth=5)\nmodel.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, model.predict(X_test), s, ax[1])\n\n#Neural Net Classifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                    hidden_layer_sizes=(7,7,7), \n                    activation='relu',random_state=1)\nclf.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, clf.predict(X_test), s, ax[2])\n\nax[0].set_title('KNN-Classifier')\nax[1].set_title('Decision Tree Classifier')\nax[2].set_title('Neural Net Classifier')\n","2fe03783":"cols = ['attacking_crossing','attacking_finishing','attacking_heading_accuracy',\n        'attacking_short_passing','attacking_volleys','skill_dribbling','skill_curve',\n        'skill_fk_accuracy','skill_long_passing','skill_ball_control','movement_acceleration',\n        'movement_sprint_speed','movement_agility','movement_reactions','movement_balance',\n        'power_shot_power','power_jumping','power_stamina','power_strength','power_long_shots',\n        'mentality_aggression','mentality_interceptions','mentality_positioning','mentality_vision',\n        'mentality_penalties','mentality_composure','defending_marking','defending_standing_tackle',\n        'defending_sliding_tackle']\n\nfor col in cols:\n    df_player['n_'+col] = df_player[col] \/ df_player['overall']\n\nreq_col_detail = ['n_'+col for col in cols]\n\nX = df_player[req_col_detail]\ny = df_player['best_pos']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nfig, ax = plt.subplots(ncols=3, figsize=(25,5))\n\n#KNN Classifier\nclassifier = KNeighborsClassifier(n_neighbors=10)\nclassifier.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, classifier.predict(X_test), s, ax[0])\n\n#Decision Tree Classifier\nmodel = tree.DecisionTreeClassifier(max_depth=5)\nmodel.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, model.predict(X_test), s, ax[1])\n\n#Neural Net Classifier\nclf = MLPClassifier(solver='lbfgs', alpha=1e-5,\n                    hidden_layer_sizes=(7,7,7), \n                    activation='relu',random_state=1)\nclf.fit(X_train, y_train)\n\ndisplay_confusion_matrix(y_test, clf.predict(X_test), s, ax[2])\n\nax[0].set_title('KNN-Classifier')\nax[1].set_title('Decision Tree Classifier')\nax[2].set_title('Neural Net Classifier')\n","2cbbaee2":"df_analysis = df_player[req_col_basic + ['best_pos']]\ntmp = df_analysis.groupby('best_pos').mean()\nsns.heatmap(tmp, cmap=\"Blues\", annot=True)","06cbfd6c":"# Exploring the Dataset\nWhich club has the best overall rating?","8cc987b2":"# What makes you good at each position?","2270d071":"The heatmap tells the requirement of each position:\n\n1. Centre Defeners: Good Physic, such that you won't get crushed by the strikers\n2. Side (Wing) Defenders: Good defending skills and dribbling skills. You are the one to stop the counterparts and start your attack.\n3. Centre Midfielders: Good dribbling and passing skills is a must! You are connecting everyone in your team.\n4. Side Midfielders: Good passing skills and shooting skills would be useful. You are a great assistant to the strikers.\n5. Forward Wingers: Good shooting skills with fast pace are the definition of wingers. You are the attacker from the side.\n6. Centre Forward: Good dribbling and shooting skills is a must. Sometimes good physic can give you extra advantage to crush the defenders in the air!","50f48084":"### Given the 6 basic attributes, can we derive the player's best position?\n\nThis would be a classification problem, and it can be tackled by a number of techniques. We will try:\n1. k-Nearest Neighbors\n2. Classification tree\n3. Neural Network Classifier\n\nFirst, we will normalize these attributes by the footballer's overall score. This is to find the relative strength of the player rather than comparing the absolute strength between players.\nSecond, we will fit the data and attempt to predict the best position for each player given thei relative strength, and presented using a confusion matrix.","354a22b1":"# Players Analysis","253a161a":"Import useful libraries, read in the dataset, and display some of them.","a0a9df69":"A few observations:\n1. We are classifying all WingBacks as SideBacks. In fact, these 2 roles are quite similar while WingBacks are a bit more like an attacker. Examples would be A.Cole, Marcelo. \n2. Fwd Wingers are usually classified as side midfielders or centre forward. In fact, functions of LW & RW are exactly the combination of LM\/RM and CF\/ST. Classical examples will be L.Messi and Cristiano Ronaldo!\n3. Having more attributes is certainly improving the accuracy.\n","5ff51011":"Good, at least we are not classifying defenders as attackers!\nLet's try with more detailed attributes!","486115d0":"Surprisingly Egypt, Israel, Gabon, Cape Verde... etc are on the list, while we don't see traditionally strong countries such as Germany, Netherlands and France here. This is probably many low level leagues are included, making the spectrum much wider.","16b4a7b8":"Let's extract the player's best position of playing (assuming the first position in the string is the best)"}}