{"cell_type":{"d5e0c6ba":"code","46852813":"code","1f7565a5":"code","3ca170c1":"code","f558b978":"code","1fe8ec42":"code","e4956009":"code","dc68351b":"code","8a735707":"code","e2262716":"code","5b2e3cdf":"code","409793e9":"code","64e07974":"code","b076ffb0":"code","1f309e9c":"code","ed7fc24e":"code","3a91ab32":"code","5f0c3892":"code","a56f4829":"code","fd75e1ff":"code","45660e2f":"code","fbc31d04":"code","3b32e877":"code","26f7bff0":"code","77d0560b":"code","e565b35d":"code","8d0073c2":"code","05c77b7e":"code","3b79db2e":"code","34a93bd3":"code","4cd9f106":"code","db930124":"code","63c5af5a":"code","73fca83d":"code","d387660e":"code","e555144c":"code","be903989":"code","eae32f88":"code","8582a512":"code","29b6d642":"code","41530497":"code","28adcf53":"code","1221fff1":"code","b0d790bd":"code","55bde89e":"code","5fe8ed8f":"code","78405e02":"code","bbd66018":"code","84ef35a7":"code","0698abe1":"code","56dee884":"code","baed292c":"code","48cc077c":"code","b01cfee9":"code","0f4381e1":"code","ee5e70d3":"code","559671f7":"code","dd8af4b9":"code","9789160e":"code","41549186":"code","9c283cac":"code","cf0ecc96":"code","5de50418":"code","27dd86e7":"code","a64c3b45":"code","9e262e24":"code","7be82b2b":"code","7d55fcc7":"code","ef38bf2e":"code","db72e84a":"code","3bd396fb":"code","e0c35e9d":"code","091151aa":"code","9fc75f93":"code","5d4ca3c4":"code","6f18aff3":"code","d72a6940":"code","607d69ef":"code","2c28a5e3":"code","68fbaf46":"code","a8e1f2b5":"code","8d2446c1":"code","c34062d8":"code","7dcc9f18":"code","86e736ce":"code","8306b05c":"code","b6b26580":"code","104acc68":"code","73b4dc89":"code","47a1b137":"code","a490c52b":"code","c33f8d67":"code","35a54edd":"code","26ae9cce":"code","2ad3154c":"code","89040c8e":"code","02c2ecea":"code","68b1fa41":"code","b51c03a7":"code","ca47f6fe":"code","fb9171e3":"code","2f77c4d6":"code","8e96ac60":"code","efa82613":"code","2ab9e14a":"code","fbc02ea2":"code","41f606fa":"code","e809253e":"code","87861810":"code","fabc82dd":"code","97d9a7ea":"code","2025fc59":"code","6218f6c4":"code","9eaf8fcd":"code","3c34639e":"code","e02a76d2":"code","69252a2f":"code","833d186d":"code","057f5b77":"code","ab30f870":"code","9351ce32":"code","413f0ab3":"code","fd8cf0a9":"code","388cca02":"code","8149abf1":"code","7bf1c6d7":"code","71548e92":"code","4b444928":"code","4861c636":"code","835cc750":"code","f17808f1":"markdown","6f01be4e":"markdown","de45f386":"markdown","ca2c1a80":"markdown","00f3855e":"markdown","42065e52":"markdown","6481cd7d":"markdown","b547b3c2":"markdown","28eb0c5e":"markdown","cfcbe704":"markdown","cf56068a":"markdown","3e2d54f1":"markdown","9402e363":"markdown","d02932c4":"markdown","783aa85e":"markdown","98b01d59":"markdown","b0e86f79":"markdown","0d759a9b":"markdown","5964fd79":"markdown","d21659d1":"markdown","edc1c21f":"markdown","25f4909e":"markdown","3cdd5d05":"markdown"},"source":{"d5e0c6ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","46852813":"df = pd.read_csv(\"train.csv\")","1f7565a5":"df.head()","3ca170c1":"df.info()","f558b978":"df.describe()","1fe8ec42":"df.isnull().sum()","e4956009":"import seaborn as sns\nsns.heatmap(df.corr(),annot=True)","dc68351b":"df.corr()","8a735707":"df['Gender'].unique","e2262716":"df['Gender'].value_counts()","5b2e3cdf":"df['Gender'].mode()","409793e9":"df['Gender'].fillna(df['Gender'].mode()[0] , inplace = True)","64e07974":"df.columns","b076ffb0":"df['Married']\ndf['Married'].value_counts()","1f309e9c":"df['Married'].describe()","ed7fc24e":"df['Married'].fillna(df['Married'].mode()[0] , inplace = True)","3a91ab32":"df['Dependents'].describe()","5f0c3892":"df['Dependents'].fillna(df['Dependents'].mode()[0] , inplace = True)","a56f4829":"df['Self_Employed'].value_counts()","fd75e1ff":"df['Self_Employed'].describe()","45660e2f":"df['Self_Employed'].fillna(df['Self_Employed'].mode()[0] , inplace = True)","fbc31d04":"df['Loan_Amount_Term'].describe()","3b32e877":"df['Loan_Amount_Term'].mode()","26f7bff0":"df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0] , inplace = True)","77d0560b":"df['CoapplicantIncome'].describe()","e565b35d":"df['CoapplicantIncome'] = df['CoapplicantIncome'].replace(to_replace = 0 , value =df['CoapplicantIncome'].mean() )","8d0073c2":"df.head()","05c77b7e":"df.isnull().sum()","3b79db2e":"df['LoanAmount'].describe()","34a93bd3":"df['LoanAmount'].fillna(df['LoanAmount'].mode()[0] , inplace = True)","4cd9f106":"df['Credit_History'].describe()","db930124":"df['Credit_History'].fillna(df['Credit_History'].max() , inplace = True)","63c5af5a":"df.isnull().sum()","73fca83d":"df.boxplot(column = 'ApplicantIncome')","d387660e":"df.shape","e555144c":"df[df['ApplicantIncome']>50000]","be903989":"df.drop([171,333,409] , inplace = True)","eae32f88":"df.reset_index(inplace = True)","8582a512":"df.head(2)","29b6d642":"df['ApplicantIncome'].hist(bins=20)","41530497":"df['ApplicantIncome'].describe()","28adcf53":"df['CoapplicantIncome'].hist(bins=20)","1221fff1":"df.columns","b0d790bd":"df.describe().columns\n           ","55bde89e":"df.boxplot(column = 'ApplicantIncome', by = 'Education')","5fe8ed8f":"n_by = df.groupby(\"Loan_Status\")[\"Credit_History\"].count()\nn_by.head(10)","78405e02":"df.boxplot(column = 'LoanAmount')","bbd66018":"df['LoanAmount'].hist(bins=20)","84ef35a7":"df['LoanAmount_log'] = np.log(df['LoanAmount'])\ndf['LoanAmount_log'].hist(bins = 20)","0698abe1":"df['CoapplicantIncome_log'] = np.log(df['CoapplicantIncome'])\ndf['ApplicantIncome_log'] = np.log(df['ApplicantIncome'])\n","56dee884":"df['CoapplicantIncome_log'].hist(bins = 20)","baed292c":"df['ApplicantIncome_log'].hist(bins = 20)","48cc077c":"df.isnull().sum()","b01cfee9":"df['TotalIncome'] = df['ApplicantIncome']+df['CoapplicantIncome']\ndf['TotalIncome_log'] = np.log(df['TotalIncome'])\ndf['TotalIncome_log'].hist(bins=20)","0f4381e1":"df.head()","ee5e70d3":"df.columns","559671f7":"df.info()","dd8af4b9":"df = df[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', \n       'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status',\n       'LoanAmount_log', 'CoapplicantIncome_log', 'ApplicantIncome_log',\n        'TotalIncome_log']]","9789160e":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ncat_col = ['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed',  'Property_Area', 'Loan_Status']\n\nfor each_col in cat_col:\n    \n    df[each_col] = le.fit_transform(df[each_col])","41549186":"df.head(1)","9c283cac":"sns.heatmap(df.corr(),annot= True)\nplt.rcParams[\"figure.figsize\"] = (20,10)","cf0ecc96":"df.corr().transpose()","5de50418":"x = df[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', 'CoapplicantIncome_log', 'ApplicantIncome_log',\n       'Loan_Amount_Term', 'Credit_History', 'Property_Area', \n       'LoanAmount_log',  'TotalIncome_log']].values\ny = df[['Loan_Status']].values","27dd86e7":"x","a64c3b45":"y","9e262e24":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2 , random_state= 0)","7be82b2b":"X_train.shape, X_test.shape, Y_train.shape, Y_test.shape","7d55fcc7":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.fit_transform(X_test)","ef38bf2e":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression( random_state=0)\nlr.fit(X_train, Y_train)","db72e84a":"y_pred = lr.predict(X_test)\ny_pred","3bd396fb":"from sklearn import metrics\nprint('The accuracy of Logistic Regression is: ', metrics.accuracy_score(y_pred, Y_test))","e0c35e9d":"from sklearn.naive_bayes import GaussianNB\nNBc = GaussianNB()\nNBc.fit(X_train, Y_train)","091151aa":"y_pred = NBc.predict(X_test)\ny_pred","9fc75f93":"print('The accuracy of Naive Bayes is: ', metrics.accuracy_score(y_pred, Y_test))","5d4ca3c4":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, Y_train)","6f18aff3":"y_pred = classifier.predict(X_test)\ny_pred","d72a6940":"print('The accuracy of KNN is: ', metrics.accuracy_score(y_pred, Y_test))","607d69ef":"from sklearn.ensemble import VotingClassifier\nlr = LogisticRegression( random_state=0)\nNBc = GaussianNB()\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nmodel = VotingClassifier(estimators=[('lr', lr), ('NBc', NBc), ('classifier', classifier)], voting='hard')\nmodel.fit(X_train,Y_train)\nmodel.score(X_test,Y_test)","2c28a5e3":"testdata = pd.read_csv(\"test.csv\")","68fbaf46":"testdata.head()","a8e1f2b5":"testdata.info()","8d2446c1":"testdata.isnull().sum()","c34062d8":"testdata.columns","7dcc9f18":"testdata['Gender'].fillna(testdata['Gender'].mode()[0] , inplace = True)\ntestdata['Dependents'].fillna(testdata['Dependents'].mode()[0] , inplace = True)\ntestdata['Self_Employed'].fillna(testdata['Self_Employed'].mode()[0] , inplace = True)\ntestdata['LoanAmount'].fillna(testdata['LoanAmount'].mode()[0]  , inplace = True)\ntestdata['Loan_Amount_Term'].fillna(testdata['Loan_Amount_Term'].mode()[0]  , inplace = True)\ntestdata['Credit_History'].fillna(testdata['Credit_History'].mode()[0]  , inplace = True)","86e736ce":"testdata.isnull().sum()","8306b05c":"testdata.describe()","b6b26580":"testdata.boxplot(column = 'LoanAmount')\n","104acc68":"testdata.boxplot(column = 'CoapplicantIncome')","73b4dc89":"testdata.boxplot(column = 'ApplicantIncome')","47a1b137":"testdata['LoanAmount_log'] = np.log(testdata['LoanAmount'])","a490c52b":"testdata['TotalIncome'] = testdata['ApplicantIncome']+testdata['CoapplicantIncome']\ntestdata['TotalIncome_log'] = np.log(testdata['TotalIncome'])","c33f8d67":"testdata.head()","35a54edd":"testdata.shape","26ae9cce":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ncat_col1 = ['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed',  'Property_Area']\n\nfor each_col in cat_col1:\n    \n    testdata[each_col] = le.fit_transform(testdata[each_col])","2ad3154c":"testdata.columns","89040c8e":"testdata.head()","02c2ecea":"testdata.shape","68b1fa41":"test = testdata.iloc[:,np.r_[1:5,9:11,13:15]].values","b51c03a7":"test = testdata[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', \n       'Loan_Amount_Term', 'Credit_History', 'Property_Area',\n       'TotalIncome', 'TotalIncome_log']].values","ca47f6fe":"test = ss.fit_transform(test)","fb9171e3":"test.shape,y.shape","2f77c4d6":"pred = NBc.predict(test)\npred","8e96ac60":"NBc.fit(X_train, Y_train)","efa82613":"pred = NBc.predict(y)\npred","2ab9e14a":"df1 = df.copy()","fbc02ea2":"df1.head()","41f606fa":"df1.shape","e809253e":"df1.isnull().sum()","87861810":"df1.columns","fabc82dd":"df1['Loan_Status']","97d9a7ea":"df1['Loan_Status'].value_counts()","2025fc59":"df1 = df1[df1['Loan_Status']==1]","6218f6c4":"df1.shape","9eaf8fcd":"df1.reset_index(inplace = True)","3c34639e":"df1.columns","e02a76d2":"df1['LoanAmount'] = np.exp(df1['LoanAmount_log'])","69252a2f":"df1.head()","833d186d":"df1.shape","057f5b77":"df1 = df1[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', 'LoanAmount_log',\n       'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status',\n       'ApplicantIncome_log', 'CoapplicantIncome_log', \n       'TotalIncome_log']]","ab30f870":"x = df1[[ 'Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', 'Loan_Amount_Term', 'Credit_History', 'Property_Area',\n       'Loan_Status',  'CoapplicantIncome_log',\n       'ApplicantIncome_log', 'TotalIncome_log']].values\ny = df1[['LoanAmount']].values","9351ce32":"x.shape","413f0ab3":"from sklearn.model_selection import train_test_split","fd8cf0a9":"X_train, X_test, Y_train, Y_test = train_test_split(x, y, train_size = 0.7, test_size=0.3)","388cca02":"x.reshape(-1,1)","8149abf1":"y.reshape(-1,1)","7bf1c6d7":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, Y_train)","71548e92":"X_train.shape , X_test.shape, Y_train.shape, Y_test.shape","4b444928":"lr.intercept_","4861c636":"lr.coef_","835cc750":"y_pred= lr.predict(x)\ny_pred","f17808f1":"# Ensembling","6f01be4e":"# KNeighborsClassifier","de45f386":"filling missing values","ca2c1a80":"StandardScaler","00f3855e":"# Naive Bayes","42065e52":"##test=pred\nprint('The accuracy : ', metrics.accuracy_score(pred,y_pred))","6481cd7d":"from sklearn.naive_bayes import GaussianNB\nNBc = GaussianNB()\nNBc.fit(X_train, Y_train)","b547b3c2":"preprocessing_LabelEncoder","28eb0c5e":"model_selection","cfcbe704":"Handling missing values","cf56068a":"Exploratory Data Analysis","3e2d54f1":"# Regression model","9402e363":"Normalization (normalize using pandas log function )","d02932c4":"from sklearn.metrics import accuracy_score\naccuracy_score(pred, labels_test)","783aa85e":"Handling missing values","98b01d59":"# Loan provided\/granted","b0e86f79":"Max Voting","0d759a9b":"# Classification algorithm\n","5964fd79":"# Test data","d21659d1":"missing values","edc1c21f":"## Logistic Regression","25f4909e":"independent and denpendent variable(Target)","3cdd5d05":"Linear Regression"}}