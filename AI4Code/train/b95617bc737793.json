{"cell_type":{"7e99df10":"code","b066dc66":"code","fcebe3b0":"code","7224d7ce":"code","f89568ae":"code","2e8471df":"code","789e6c6a":"code","b1ffe170":"code","796e4089":"code","c1180a6b":"code","a4d82504":"code","e059d300":"code","51056ed7":"code","802f7959":"code","a253344c":"code","73e7dd8e":"code","03a5fdb6":"code","586aef5f":"code","0b183314":"code","024304dc":"code","799effcb":"code","1f96b8ed":"code","1dd0a9f8":"code","5b1fc361":"code","e08d4298":"code","6adbc877":"code","0d1213a4":"markdown"},"source":{"7e99df10":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b066dc66":"!pip install xlrd\n!pip install openpyxl","fcebe3b0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","7224d7ce":"sla = pd.read_excel(\"..\/input\/shopee-code-league-20\/_DA_Logistics\/SLA_matrix.xlsx\")\ndeliver = pd.read_csv(\"..\/input\/shopee-code-league-20\/_DA_Logistics\/delivery_orders_march.csv\")","f89568ae":"# Fill null data\nsla = sla.fillna(-1)\ndeliver = deliver.fillna(-1)","2e8471df":"sla.dtypes","789e6c6a":"deliver.dtypes","b1ffe170":"sla.head()","796e4089":"deliver.head()","c1180a6b":"# Convert datetime\ndeliver['1st_deliver_attempt'] = pd.to_datetime(deliver['1st_deliver_attempt'], unit = 's').dt.strftime('%Y-%m-%d')\n# deliver['1st_deliver_attempt'] = deliver['1st_deliver_attempt'].dt.round('1s')","a4d82504":"# Convert datetime\ndeliver['2nd_deliver_attempt'] = pd.to_datetime(deliver['2nd_deliver_attempt'], unit = 's').dt.strftime('%Y-%m-%d')\n# deliver['2nd_deliver_attempt'] = deliver['2nd_deliver_attempt'].dt.round('1s')","e059d300":"# Convert datetime\ndeliver['pick'] = pd.to_datetime(deliver['pick'], unit='s').dt.strftime('%Y-%m-%d')","51056ed7":"# Convert upper case to lower case\ndeliver['buyeraddress'] = deliver['buyeraddress'].str.lower()\ndeliver['selleraddress']  = deliver['selleraddress'].str.lower()","802f7959":"deliver.head()","a253344c":"days = [\"Mon\", \"Tue\",\" Wed\",\" Thur\", \"Fri\", \"Sat\", \"Sun\"]\npublic_hol = ['2020-03-08','2020-03-25','2020-03-30','2020-03-31']","73e7dd8e":"locations = [\"metro manila\",\"luzon\",\"visayas\",\"mindanao\"]\ndeliver.loc[deliver['buyeraddress'].str.contains('metro manila'), 'buyeraddress'] = 'metro manila'\ndeliver.loc[deliver['buyeraddress'].str.contains('luzon'), 'buyeraddress'] = 'luzon'\ndeliver.loc[deliver['buyeraddress'].str.contains('visayas'), 'buyeraddress'] = 'visayas'\ndeliver.loc[deliver['buyeraddress'].str.contains('mindanao'), 'buyeraddress'] = 'mindanao'\ndeliver.head()","03a5fdb6":"locations = [\"metro manila\",\"luzon\",\"visayas\",\"mindanao\"]\ndeliver.loc[deliver['selleraddress'].str.contains('metro manila'), 'selleraddress'] = 'metro manila'\ndeliver.loc[deliver['selleraddress'].str.contains('luzon'), 'selleraddress'] = 'luzon'\ndeliver.loc[deliver['selleraddress'].str.contains('visayas'), 'selleraddress'] = 'visayas'\ndeliver.loc[deliver['selleraddress'].str.contains('mindanao'), 'selleraddress'] = 'mindanao'\ndeliver.head()","586aef5f":"def working_days(df):\n    if df['buyeraddress'] == \"metro manila\" and df['selleraddress'] == 'metro manila':\n        return 3\n    elif (df['buyeraddress'] == \"metro manila\" or df['buyeraddress'] == 'luzon') and (df['selleraddress'] == 'metro manila' or  df['selleraddress'] == 'luzon'):\n        return 5\n    else:\n        return 7\n        ","0b183314":"deliver['working_days'] = deliver.apply(lambda row: working_days(row), axis=1)","024304dc":"deliver.head(10)","799effcb":"holidays = [\"2020-03-08\", \"2020-03-25\", \"2020-03-30\", \"2020-03-31\"]\ndeliver[\"first_try\"] = np.busday_count(deliver[\"pick\"], deliver[\"1st_deliver_attempt\"], weekmask=\"1111110\", holidays = holidays)\ndeliver[\"second_try\"] = np.busday_count(deliver[\"1st_deliver_attempt\"], deliver[\"2nd_deliver_attempt\"], weekmask=\"1111110\", holidays = holidays) ","1f96b8ed":"deliver.head()","1dd0a9f8":"def isLate(df):\n    if df['first_try'] > df['working_days'] or (df['second_try'] > 3):\n        return 1\n    else:\n        return 0","5b1fc361":"deliver['isLate'] = deliver.apply(lambda row: isLate(row), axis=1)","e08d4298":"deliver.head()","6adbc877":"result = deliver[['orderid','isLate']].copy()\nresult.head()\nprint(len(result.loc[result['isLate'] == 1]))","0d1213a4":"**Cleaning data**"}}