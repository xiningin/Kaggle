{"cell_type":{"e17fb9ba":"code","4266762b":"code","8c77bcff":"code","1d0c275b":"code","a74eeff4":"code","cd1ad7d1":"code","ea12d196":"code","221fa579":"code","3e527290":"code","9b2113c1":"code","6c0894ac":"code","bea95fb0":"code","0e96f634":"code","937d1a70":"code","8d5976be":"code","7fee44ed":"code","f5934f58":"code","4fc63e1a":"markdown","ad8ed79d":"markdown","f689c8e5":"markdown"},"source":{"e17fb9ba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost\nfrom xgboost import XGBClassifier, plot_importance\nfrom bayes_opt import BayesianOptimization\nfrom sklearn.model_selection import cross_val_score, train_test_split, learning_curve\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, confusion_matrix","4266762b":"df = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","8c77bcff":"df.head()","1d0c275b":"def binary_numerical(column):\n    column_list = []\n    for term in column:\n        if term == 'Male':\n            column_list.append(1)\n        elif term == 'Female':\n            column_list.append(0)\n        elif term == 'Yes':\n            column_list.append(1)\n        elif term == 'No':\n            column_list.append(0)\n        elif term == np.nan:\n            column_list.append(np.nan)\n        elif term == 'No internet service':\n            column_list.append(np.nan)\n        elif term == 'No phone service':\n            column_list.append(np.nan)\n        # the following three conditions make the function do nothing if it's already been run\n        elif term == 0:\n            pass\n        elif term == 1:\n            pass\n        elif term == np.nan:\n            pass\n        else:\n            print('error on', term)\n    return column_list","a74eeff4":"# numerically encoding columns with only yes\/no, male\/female, or no-service (which I encode as nan)\nbinary_cols = ['gender', 'Partner', 'Dependents', 'OnlineSecurity',\n               'OnlineBackup', 'DeviceProtection', 'TechSupport',\n               'StreamingTV', 'StreamingMovies', 'PaperlessBilling',\n               'MultipleLines']\n\nfor col in binary_cols:\n    df[col] = binary_numerical(df[col])\n\n# creating a design matrix from the numerically encoded rows\nX = df[binary_cols]\n    \n\n# one-hot-encoding multi-category columns, and appending the results to the design matrix\nmulti_category_cols = ['InternetService', 'Contract', 'PaymentMethod']\n# I'll also append them to a dataframe with churn alone, to inspect correlations\ndummy_frame = df['Churn']\nfor col in multi_category_cols:\n    dummies = pd.get_dummies(df[col], prefix = col)\n    X = pd.concat([X, dummies], axis = 'columns')\n    dummy_frame = pd.concat([dummy_frame, dummies], axis = 'columns')\ndummy_frame['Churn'] = binary_numerical(dummy_frame['Churn'])\n# putting 'Churn' on the end, so my heatmap looks the way I want it to\ndummy_frame = dummy_frame[[c for c in dummy_frame if c not in ['Churn']] + ['Churn']]\n    \n\n    \n# appending the columns with ordered numerical values\n# I might be able to improve performance by scaling these to a smaller range\nX['tenure'] = df['tenure']\nX['MonthlyCharges'] = df['MonthlyCharges']\n\n# creating the numerical target column for churn\ndf['Churn'] = binary_numerical(df['Churn'])\ny = df['Churn']\n\nX.head()","cd1ad7d1":"sns.set(style = 'white')\n\ncorrelations = df.corr()\n\nmask = np.zeros_like(correlations, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\nplt.subplots(figsize = (20, 16))\nsns.heatmap(correlations, mask = mask, cmap = cmap, center = 0, vmax = 0.6, vmin = -0.6,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot = True)\nplt.title('Correlations with Binary and Numerical Features', fontsize = 16);","ea12d196":"sns.set(style = 'white')\n\ncorrelations = dummy_frame.corr()\n\nmask = np.zeros_like(correlations, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\nplt.subplots(figsize = (20, 16))\nsns.heatmap(correlations, mask = mask, cmap = cmap, center = 0, vmax = 0.6, vmin = -0.6,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot = True)\nplt.title('Correlations with One-Hot-Encoded Features', fontsize = 16);","221fa579":"X_train, X_test, y_train, y_test = train_test_split(X, y)","3e527290":"pbounds = {\n           'min_child_weight': (1, 10),\n           'gamma': (0.5, 5),\n           'subsample': (0.6, 1.0),\n           'colsample_bytree': (0.6, 1.0),\n           'max_depth': (0, 20),\n           'n_estimators': (10, 1000),\n           'learning_rate': (0.005, 0.05)\n          }\n\ndef black_box_function(min_child_weight, gamma, subsample, colsample_bytree, max_depth,\n                       n_estimators, learning_rate):\n    \n    xgb = XGBClassifier(learning_rate = learning_rate, \n                        n_estimators = int(n_estimators), \n                        objective = 'binary:logistic',\n                        nthread = -1,\n                        min_child_weight = min_child_weight,\n                        gamma = gamma,\n                        subsample = subsample,\n                        colsample_bytree = colsample_bytree,\n                        max_depth = int(max_depth))\n    \n    scores = cross_val_score(xgb, X_train, y_train, cv = 5)\n    return scores.mean()\n\n\noptimizer = BayesianOptimization(f = black_box_function,\n                                 pbounds = pbounds,\n                                 random_state = 66)","9b2113c1":"optimizer.maximize(init_points = 6, n_iter = 60)\n\n# the bayesian optimizer outputs floats, so integer parameters have to be converted\nparams = optimizer.max['params']\nint_parameters = ['max_depth', 'n_estimators']\nfor param_name in int_parameters:\n    params[param_name] = int(params[param_name])","6c0894ac":"print(params)","bea95fb0":"xgb = XGBClassifier(params = params)\n\nscores = cross_val_score(xgb, X_train, y_train, cv = 5)\nprint(scores)\nprint(scores.mean())","0e96f634":"xgb.fit(X_train, y_train)","937d1a70":"fig, ax = plt.subplots(figsize = (16, 8))\nplot_importance(xgb, ax = ax)\nplt.title('Feature Importance', fontsize = 16, y = 1.02);","8d5976be":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"\n    Generate a simple plot of the test and training learning curve.\n\n    Parameters\n    ----------\n    estimator : object type that implements the \"fit\" and \"predict\" methods\n        An object of that type which is cloned for each validation.\n\n    title : string\n        Title for the chart.\n\n    X : array-like, shape (n_samples, n_features)\n        Training vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n        Target relative to X for classification or regression;\n        None for unsupervised learning.\n\n    ylim : tuple, shape (ymin, ymax), optional\n        Defines minimum and maximum yvalues plotted.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n          - None, to use the default 3-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, optional (default=None)\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like, shape (n_ticks,), dtype float or int\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the dtype is float, it is regarded as a\n        fraction of the maximum size of the training set (that is determined\n        by the selected validation method), i.e. it has to be within (0, 1].\n        Otherwise it is interpreted as absolute sizes of the training sets.\n        Note that for classification the number of samples usually have to\n        be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    plt.figure(figsize = (16, 8))\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt\n\nplot_learning_curve(xgb, 'Learning Curve', X_train, y_train, cv = 5);","7fee44ed":"preds = xgb.predict(X_test)\n# XGBoost produces confidence scores for each value, rather than definite predictions\n# so if we want to use metrics like accuracy or f1-score, we have to round those values\nhard_preds = preds.round()\n\nprint('Accuracy:', accuracy_score(y_test, hard_preds))\nprint('f1-score:', f1_score(y_test, hard_preds))\nprint('Precision:', precision_score(y_test, hard_preds))\nprint('Recall:', recall_score(y_test, hard_preds))\nprint('ROC AUC:', roc_auc_score(y_test, hard_preds))","f5934f58":"conf = confusion_matrix(y_test, hard_preds)\n\nfig, ax = plt.subplots(figsize = (10, 8))\nsns.heatmap(conf, annot = True)\nplt.title('Confusion Matrix', fontsize = 18, y = 1.06)\nax.set_yticklabels(['Churn', 'No Churn'], rotation = 0, fontsize = 14)\nax.set_xticklabels(['Churn', 'No Churn'], fontsize = 14);","4fc63e1a":"# Preprocessing ","ad8ed79d":"# Modelling","f689c8e5":"# Making Predictions "}}