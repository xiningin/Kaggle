{"cell_type":{"298e8f13":"code","89a397ef":"code","04193228":"code","57355514":"code","e4cc35bd":"code","0dee6f60":"code","7d4dc183":"code","3b8c8fd8":"code","bc383d26":"code","a8e2d3c3":"code","579108da":"code","a8f52fd2":"markdown","c52408d7":"markdown","fbe85eee":"markdown","1cfdb8a8":"markdown","5ab751dd":"markdown","3b573c18":"markdown","390e131a":"markdown","9a590ad7":"markdown","498d8f35":"markdown","015ab5b3":"markdown","3bdbd526":"markdown"},"source":{"298e8f13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89a397ef":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                       low_memory=False, \n                       nrows=10**6)\nlectures = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv')\nquestions = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')","04193228":"# \u51c6\u5907\u7528\u6237\u770b\u8fc7\u7684lectures\u5177\u6709\u7684tag\u7684\u8868user_lec\ndef add_user_lec(data,lectures):\n    # \u4ece\u6570\u636e\u4e2d\u5206\u51falecture\u884c\uff0c\u9009\u62e9\u9700\u8981\u7684\u4fe1\u606f\u5e76\u5bf9id\u91cd\u547d\u540d\u4ee5\u4fbfmerge\n    data = data[data['content_type_id'] == 1]\n    data = data[['user_id','content_id']].copy()\n    data.rename(columns = {\"content_id\": \"lecture_id\"}, inplace = True)\n\n    data = data.merge(lectures,'left')\n    \n    # \u6784\u9020\u7a7a\u7684\u8868\u6765\u5b58\u50a8\u7528\u6237\u5b66\u7684tags\n    col = ['user_id','lec_tag']\n    user_lec = pd.DataFrame(columns = col)\n    \n    # \u5c06\u4e0d\u540c\u7528\u6237\u770b\u8fc7\u7684tag\u4ee5list\u5f62\u5f0f\u5b58\u8d77\u6765\n    user_id = data['user_id'].unique()\n    idx = 0\n    for uid in user_id:\n        tmptdf = data[data[col[0]] == uid]\n        tlist = tmptdf['tag'].tolist()\n        user_lec.loc[idx] = {col[0]:uid, col[1]:tlist}\n        idx += 1\n    \n    return user_lec\n\nuser_lec = add_user_lec(train_df,lectures)\nuser_lec.head()","57355514":"# \u7b80\u5316\u95ee\u9898\u8868\uff08tags\u5217\u542b\u6709nan\uff09\ntqdf = questions[['question_id','part','tags']].copy()\ntqdf.fillna(0,inplace = True)\n# \u5c06tags\u7531string\u548cint\uff08\u586b\u8865\u76840\uff09\u7c7b\u578b\u53d8\u4e3aint\u7c7b\u578b\u7684list\ntqdf['tags'] = tqdf['tags'].apply(lambda tgs:  [int(x) for x in str(tgs).split()])\ntqdf.head()","e4cc35bd":"import string\n\n# \u9009\u53d6\u95ee\u9898\u96c6\uff0c\u5220\u53bb\u591a\u4f59\u5217,\u586b\u8865\u7f3a\u5931\u7b54\u6848\uff08\u5e94\u5f53\u6ca1\u6709\u7f3a\u5931\uff0c\u4f46\u662f\u6211\u53c8\u88ab\u8fd9\u4e2ascoring error\u7ed9\u4eba\u6574\u50bb\u4e86\u8fd8\u662f\u52a0\u4e0a\u5427\uff09\ntdf = train_df[train_df['content_type_id'] == 0].copy()\ntdf = tdf.drop(['content_type_id','row_id'],1)\ntdf['answered_correctly'] = tdf['answered_correctly'].apply(lambda x: 0 if str(x) == 'nan' else x)\n    \n# \u6784\u9020\u65b0\u7684features\nfeatures = tdf[['user_id','content_id','answered_correctly','prior_question_had_explanation']].copy()\nfeatures.rename(columns = {\"content_id\": \"question_id\"}, inplace=True)\n\n# \u4e0d\u540c\u7528\u6237\u7684\u505a\u9898\u6b63\u786e\u7387\uff08\u8868\u5f81\u7528\u6237\u6c34\u5e73\uff09\nfeature1 = features.groupby('user_id').agg({'answered_correctly': [\n                                                'mean',\n                                                'std'\n                                            ]}).reset_index().copy()\nfeature1.columns = ['user_id','u_min','u_std']\n\n# \u4e0d\u540c\u95ee\u9898\u7684\u505a\u9898\u6b63\u786e\u7387\uff08\u8868\u5f81\u9898\u76ee\u96be\u5ea6\uff09\nfeature2 = features.groupby('question_id').agg({'answered_correctly': [\n                                                'mean',\n                                                'std'\n                                                ]}).reset_index().copy()\nfeature2.columns = ['question_id','q_min','q_std']\n\n# \u662f\u5426\u770b\u8fc7\u4e0a\u4e2a\u9898\u76ee\u7b54\u6848\u89e3\u91ca\u548c\u505a\u9898\u6b63\u786e\u7387\u7684\u5173\u7cfb\u5206\u5e03\nfeatures['prior_question_had_explanation'] = features['prior_question_had_explanation'].astype(str)\nfeature3 = features.groupby('prior_question_had_explanation').agg({'answered_correctly': [\n                                                                    'mean',\n                                                                    'std'\n                                                                    ]}).reset_index().copy()\nfeature3.columns = ['prior_question_had_explanation','e_min','e_std']\n\n# \u770b\u4e00\u4e0bnan\u548cfalse\u7684\u533a\u522b\nfeature3.head()","0dee6f60":"# \u8fd9\u5904\u8017\u8d39CPU\n# \u627ea\u548cb\u7684\u4ea4\u96c6\uff08\u4e0d\u77e5\u9053\u7528set\u5feb\u8fd8\u662f\u8fd9\u4e2a\u5feb\uff0c\u4f46\u662f\u80af\u5b9a\u8fd9\u4e2a\u7a33\u4e00\u70b9\uff09\ndef csnm(a,b):\n    ans = 0\n    for i in a:\n        if i in b:\n            ans += 1\n    return ans\n\n# \u5c06\u6807\u7b7e\u8f6c\u5316\u4e3a\u5b66\u4e60\u8fc7\u7684\u6bd4\u4f8b\uff08\u8003\u8651\u6539\u8fdb\uff0c\u52a0\u5165\u9047\u5230\u8fc7\u4e14\u770b\u8fc7\u89e3\u91ca\u7684\u6807\u7b7e\uff09\ndef trans_tags(data):\n    # \u65f6\u95f4\u6233\u4e5f\u52a0\u4e86\u8fdb\u6765\uff0c\u5982\u679c\u8ddd\u79bb\u4e0a\u4e00\u4e2a\u9898\u76ee\u95f4\u9694\u65f6\u95f4\u4e0d\u8fc7\u957f\uff08\u4ee3\u8868\u7740\u4e0d\u9057\u5fd8\uff09\uff0c\u8d8a\u5f80\u540e\u53ef\u80fd\u5b66\u7684\u8d8a\u591a\u505a\u7684\u8d8a\u597d\n    cols = ['timestamp','user_id','content_id','task_container_id','prior_question_elapsed_time','prior_question_had_explanation']\n    data = data[cols].copy()\n    \n    # \u9632\u6b62explanation\u91cc\u7684nan\u88abfill\n    data['prior_question_had_explanation'] = data['prior_question_had_explanation'].astype(str)\n    data.fillna(0, inplace = True)\n    \n    # \u65b9\u4fbfmerge\n    data.rename(columns = {\"content_id\": \"question_id\"}, inplace=True)\n    \n    # \u5408\u5e76fetures\uff0c\u9009\u62e9left\uff0c\u4fdd\u7559data\u6240\u6709\u7684\u5185\u5bb9\n    data = pd.merge(data,feature1,'left',sort = False)\n    data = pd.merge(data,feature2,'left',sort = False)\n    data = pd.merge(data,feature3,'left',sort = False)\n    \n    # \u8868\u5f81\u90fd\u75280.5\u586b\u8865nan\n    data.fillna(0.5, inplace = True)\n    \n    # \u5408\u5e76question\u548clecture\n    data = pd.merge(data,tqdf,'left',sort = False)\n    data = pd.merge(data,user_lec,'left',sort = False)\n    \n    # \u5c06\u95ee\u9898\u7684tag\u7684nan\u7528[-1]\u586b\u8865\uff0c\u8bb2\u5ea7\u7684tag\u7528[0]\u586b\u8865\u4ee5\u533a\u5206\u5b83\u4eec\n    data['tags'] = data['tags'].apply(lambda x:  [-1] if str(x) == 'nan' else x)\n    data['lec_tag'] = data['lec_tag'].apply(lambda x: [0] if str(x) == 'nan' else x)\n    \n    data.fillna(0, inplace = True)\n    \n    # \u8ba1\u7b97\u5b66\u4e60\u8fc7\u7684\u6bd4\u7387\uff0c\u53bb\u9664\u65e0\u7528\u5217\n    tlst = data.apply(lambda x: csnm(x['tags'],x['lec_tag'])\/(len(x['tags'])+1e-3), axis = 1)\n    data = data.drop(['tags','lec_tag'],1)\n    data[\"learned_ratio\"] = tlst\n    \n    # \u8fd9\u91cc\u662f\u56e0\u4e3a\u53d1\u73b0nan\u8ddftrue\u7684\u7ed3\u679c\u63a5\u8fd1\uff0c\u6700\u540e\u89c9\u5f97\u8fd8\u662f\u4fdd\u7559\u505a\u4e00\u4e0b\u5c1d\u8bd5\n    data['prior_question_had_explanation'] = data['prior_question_had_explanation'].apply(lambda x: 'True' if x == 'nan' or x == '<NA>' else x)\n    \n    return data\n\ntdf = trans_tags(tdf)\ntdf.head()","7d4dc183":"tdf.describe()","3b8c8fd8":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler,OneHotEncoder\nimport tensorflow as tf\n\n# \u6570\u636escale\ndef enc_scl(data):\n    # \u7c7b\u522b\u7f16\u7801\n    le = LabelEncoder()\n    le = le.fit(['True', 'False'])\n    data['prior_question_had_explanation'] = le.transform(data['prior_question_had_explanation'])\n    \n    # \u4f7f\u7528MinMaxScaler\u5f52\u5165\u533a\u95f4[0,1]\n    sclcol = ['timestamp','task_container_id', 'prior_question_elapsed_time']\n    min_max_scaler = MinMaxScaler()\n    data[sclcol] = min_max_scaler.fit_transform(data[sclcol])\n                                                   \n    return data\n\ntdf = enc_scl(tdf)\n\n# onehot\u7f16\u7801\nenc = OneHotEncoder()\n# \u56e0\u4e3a\u8981\u8f93\u5165\u4e8c\u7ef4\u5411\u91cf\u6240\u4ee5\u8981\u8fdb\u884creshape\ntpart = tdf['part'].values.reshape(-1, 1)\n# fit\u5e76\u4fdd\u5b58\u5230one_hot_enc\none_hot_enc = enc.fit(tpart)\n# \u8f6c\u5316\u540e\u8981\u8fdb\u884ctoarray\u6765\u83b7\u53d6trans\u4e4b\u540e\u7684\u4e8c\u7ef4\u6570\u7ec4\ntpart = one_hot_enc.transform(tpart).toarray()\n# \u6784\u5efa\u65b0\u7684dataframe\u4fdd\u5b58\u7ed3\u679c\npartcol = ['1','2','3','4','5','6','7']\ntpart = pd.DataFrame(columns = partcol,data = tpart)\n# \u53bb\u6389part\u5217\uff0c\u5408\u5e76\u65b0\u7684dataframe\ntdf = tdf.drop('part',1)\ntdf = tdf.join(tpart)\n\n# \u6784\u9020\u8bad\u7ec3\u96c6\ntrain_x = tdf.drop(['user_id','question_id'],1)\ntrain_y = train_df['answered_correctly'].copy()\ntrain_x.head()","bc383d26":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, advanced_activations\nfrom keras import backend as K\nimport keras\n\nmodel = Sequential()\nmodel.add(Dense(36, input_shape=(18,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# AUC\u51fd\u6570\u6765\u6e90\uff1aAI_\u76f2\uff08CSDN\uff09\n# PFA, prob false alert for binary classifier\ndef binary_PFA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    # N = total number of negative labels\n    N = K.sum(1 - y_true)\n    # FP = total number of false alerts, alerts from the negative class labels\n    FP = K.sum(y_pred - y_pred * y_true)\n    return FP\/N\n\n\n# P_TA prob true alerts for binary classifier\ndef binary_PTA(y_true, y_pred, threshold=K.variable(value=0.5)):\n    y_pred = K.cast(y_pred >= threshold, 'float32')\n    # P = total number of positive labels\n    P = K.sum(y_true)\n    # TP = total number of correct alerts, alerts from the positive class labels\n    TP = K.sum(y_pred * y_true)\n    return TP\/P\n\n# AUC for a binary classifier\ndef auc(y_true, y_pred):\n    ptas = tf.stack([binary_PTA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.stack([binary_PFA(y_true,y_pred,k) for k in np.linspace(0, 1, 1000)],axis=0)\n    pfas = tf.concat([tf.ones((1,)) ,pfas],axis=0)\n    binSizes = -(pfas[1:]-pfas[:-1])\n    s = ptas*binSizes\n    return K.sum(s, axis=0)\n'''\nmodel.compile(optimizer='adadelta',\n              loss='binary_crossentropy',\n              metrics=[auc])\n'''\nkeras.initializers.he_normal(seed=None)\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=[auc])","a8e2d3c3":"model.fit(train_x, train_y, batch_size=4800, epochs=30, verbose=1,validation_split=0.2,\n          shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0)","579108da":"import riiideducation\nenv = riiideducation.make_env()\niter_test = env.iter_test()\n\nfor (sample_test,sample_prediction_df) in iter_test:\n    # \u66f4\u65b0\u7528\u6237\u770b\u8fc7\u7684lecture\u5305\u542b\u7684tags\n    user_lec = user_lec.append(add_user_lec(sample_test,lectures))\n    # \u53bb\u9664\u91cd\u590d\uff08\u5b9e\u9645\u4e0a\u5e94\u8be5\u5408\u5e76\u76f8\u540cid\u7684tags\u5217\u8868\uff0c\u4f46\u662f\u6211\u8fd8\u6ca1\u6709\u641e\uff09\n    user_lec = user_lec.drop_duplicates(['user_id'])\n    \n    # \u9009\u53d6\u95ee\u9898\u96c6\uff0c\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\n    sample_test = sample_test[sample_test['content_type_id'] == 0].copy()\n    test = trans_tags(sample_test)\n    test = enc_scl(test)\n    \n    tpart = test['part'].values.reshape(-1, 1)\n    tpart = one_hot_enc.transform(tpart).toarray()\n    partcol = ['1','2','3','4','5','6','7']\n    tpart = pd.DataFrame(columns = partcol,data = tpart)\n    test = test.drop('part',1)\n    test = test.join(tpart)\n    \n    test = test.drop(['user_id','question_id'],1)\n    \n    # \u6a21\u578b\u9884\u6d4b\n    res = model.predict(test)\n    \n    # \u6784\u9020submission\n    sample_test['answered_correctly']=res\n    env.predict(sample_test[['row_id','answered_correctly']])","a8f52fd2":"\u4e0a\u9762\u51c6\u5907\u597d\u4e86\u5904\u7406\u8fc7\u7684lecture\u8ddfquestion\u8868\u8fd8\u6709\u81ea\u5df1\u9009\u53d6\u7684\u51e0\u4e2a\u7279\u5f81\uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u62fc\u63a5\u5b83\u4eec\u6765\u6784\u9020\u8bad\u7ec3\u96c6\u4e86\u3002\n\nSANT+\u5bf9\u4e8eSANT\u7684\u6539\u8fdb\u5c31\u662f\u4f7f\u7528\u4e86ET\u548cLT\uff0c\u8fd9\u4e24\u4e2a\u65f6\u95f4\u5728SANT+\u7684\u8bba\u6587\u4e2d\u6709\u56fe\u7247\u53ef\u4ee5\u89e3\u91ca\uff0c\u8fd9\u91cc\u7684ET\u6570\u636e\u96c6\u672c\u8eab\u5c31\u5df2\u7ecf\u7ed9\u51fa\uff0c\u5b9e\u9645\u4e0a\u6211\u662f\u60f3\u5904\u7406\u51fa\u6765\u4e00\u4e2aLT\u8ddf\u4e00\u4e2a\u7528\u6237\u52a0\u5165\u5e73\u53f0\u7684\u603b\u65f6\u95f4\u7684\uff0c\u4f46\u662f\u8fd9\u6709\u70b9\u590d\u6742\uff0c\u6240\u4ee5\u6211\u5c31\u8fd8\u6ca1\u6709\u5b9e\u73b0\uff0c\u53ea\u5148\u7b80\u5355\u7684\u7528\u4e86\u4e00\u4e0b\u7ed9\u51fa\u7684\u65f6\u95f4\u6233\uff1a\n\n![image.png](attachment:image.png)","c52408d7":"\u63a5\u4e0b\u6765\u662f\u5bf9question\u8868\u7684\u5904\u7406\uff1a","fbe85eee":"# step2 \u9009\u62e9\u6a21\u578b\n\u719f\u6089\u597d\u6570\u636e\u4e4b\u540e\u5c31\u8981\u505a\u7279\u5f81\u9009\u62e9\uff08\u5904\u7406\uff09\u548c\u9009\u62e9\u6a21\u578b\u4e86\uff0c\u672c\u9898\u76ee\u524d\u6700\u597d\u7528\u7684\u6a21\u578b\u5e94\u5f53\u662f\u8ba8\u8bba\u533a\u63d0\u5230\u7684SANT+\uff1ahttp:\/\/arxiv.org\/abs\/2010.12042\n\n\u4f46\u662f\u4e0d\u8d70\u79d1\u7814\u65b0\u6210\u679c\u6377\u5f84\u7684\u8bdd\uff08\u6bd5\u7adf\u65b0\u624b\u6709\u65f6\u5019\u6ca1\u529e\u6cd5\u770b\u61c2\u65b0\u8bba\u6587\u540e\u5c31\u7acb\u9a6c\u80fd\u5199\u51fa\u6765\u90a3\u4e2a\u4ee3\u7801\uff09\uff0c\u65b0\u624b\u53bb\u6311\u9009\u76ee\u524d\u5df2\u5b66\u4e60\u5230\u7684\u5404\u79cd\u6a21\u578b\uff08lstm\\RNN\\RandomForest\\NLP\\MLP...\uff09\uff0c\u5e94\u5f53\u4ee5\u4ec0\u4e48\u4f5c\u4e3a\u6311\u9009\u51c6\u5219\u5462\uff1f\n\n\uff08\u4e2a\u4eba\u8ba4\u4e3a\u7279\u5f81\u5904\u7406\u548c\u6a21\u578b\u9009\u62e9\u662f\u5206\u4e0d\u5f00\u7684\uff0c\u6240\u4ee5\u6211\u628a\u5b83\u4eec\u653e\u5230\u4e00\u8d77\u8003\u8651\uff09\n\n\u6211\u4e5f\u5728\u8fd9\u6837\u7684\u4e00\u4e2a\u6478\u7d22\u9636\u6bb5\u3002\n\n\u6709\u4eba\u8bf4\uff0c\u8fd9\u4e9b\u6a21\u578b\u90fd\u5dee\u4e0d\u591a\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662f\u6570\u636e\u6e05\u6d17\u3001\u7279\u5f81\u9009\u62e9\u548c\u7279\u5f81\u5904\u7406\u3002\n\n\u4f46\u662f\u6211\u8ba4\u4e3a\uff0c\u6a21\u578b\u7684\u5185\u90e8\u7ed3\u6784\u51b3\u5b9a\u4e86\u80fd\u591f\u9020\u51fa\u6765\u7684\u6a21\u578b\u7684\u51e0\u4f55\u5f62\u72b6\u7684\u7a7a\u95f4\uff0c\u8d77\u7801\u8fd9\u4e00\u70b9\u8fd8\u662f\u8981\u660e\u786e\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982\u4f60\u53bb\u62ff\u4e00\u4e2a\u5206\u7c7b\u6a21\u578b\u53bb\u505a\u4e00\u4e2a\u7ebf\u6027\u7684\u9884\u6d4b\uff0c\u4e00\u4e2a\u51e0\u4f55\u7a7a\u95f4\u662f\u79bb\u6563\u503c\uff0c\u53e6\u4e00\u4e2a\u662f\u7ebf\uff0c\u6839\u672c\u5c31\u5bf9\u4e0d\u4e0a\uff1b\u6216\u8005\u5c31\u597d\u6bd4\u4e00\u4e2a\u6700\u591a\u4ea7\u751f\u4e8c\u6b21\u51fd\u6570\u7684\u6a21\u578b\u62ff\u53bb\u9884\u6d4b\u4e09\u7ef4\u7a7a\u95f4\u7684\u503c\uff0c\u5c31\u4e0d\u80fd\u9002\u7528\u3002\u975e\u6570\u5b66\u4e13\u4e1a\uff0c\u63cf\u8ff0\u4e0d\u592a\u51c6\u786e\uff0c\u5168\u9760\u611f\u89c9\uff0c\u5b9e\u5728\u62b1\u6b49\uff0c\u6b22\u8fce\u6307\u6b63\uff09\u3002\n\n\u6211\u7684\u601d\u8003\u8fc7\u7a0b\uff1a\n\n\u8fd9\u4e2a\u9898\u76ee\u5b66\u751f\u505a\u9898\u6b63\u786e\u7387\u786e\u5b9e\u662f\u4e2a\u76d1\u7763\u5b66\u4e60\u4e0b\u7684\u4e8c\u5206\u7c7b\u7684\u9898\u76ee\uff0c\u4f46\u662f\u5b66\u751f\u505a\u9898\u6c34\u5e73\u4f1a\u968f\u7740\u65f6\u95f4\u63d0\u9ad8\uff0c\u4e5f\u8981\u8003\u8651\u65f6\u95f4\u5e8f\u5217\u7684\u56e0\u7d20\uff08LSTM,RNN\u5565\u7684\uff09\uff0c\u6211\u4e2a\u4eba\u624d\u758f\u5b66\u6d45\uff0c\u76ee\u524d\u4e5f\u53ea\u662f\u5b66\u4e86\u4e00\u4e9b\u6a21\u578b\u7684\u539f\u7406\uff0c\u8fd8\u6ca1\u600e\u4e48\u5199\u8fc7\u4ee3\u7801\uff0c\u6240\u4ee5\u5c31\u62ff\u90a3\u4e2a\u53ef\u4ee5\u7528\u975e\u7ebf\u6027\u9762\u5206\u5272\u7a7a\u95f4\uff0c\u6a21\u578b\u7b80\u5355\u53c8\u6709\u73b0\u6210\u7684\u63a5\u53e3\u53ef\u4ee5\u76f4\u63a5\u7528\u7684MLP\u5f00\u5200\u5427\u3002","1cfdb8a8":"\u63a5\u4e0b\u6765\u662f\u6839\u636e\u6211\u5bf9\u6570\u636e\u7684\u7406\u89e3\uff0c\u63d0\u53d6\u4e00\u4e9b\u6709\u7528\u7684\u7279\u5f81\u548c\u5206\u5e03\uff0c\u6211\u8ba4\u4e3a\u5f71\u54cd\u4e00\u4e2a*\u5b66\u751f*\u5bf9\u4e8e\u4e00\u4e2a*\u95ee\u9898*\u662f\u5426\u80fd\u7b54\u5bf9\uff0c\u9664\u4e86\u770b\u4ed6\u662f\u4e0d\u662f\u5b66\u8fc7\uff0c\u8fd8\u8981\u770b\u5b66\u751f\u6c34\u5e73\u548c\u95ee\u9898\u96be\u5ea6\u3002\n\n\u56e0\u6b64\uff0c\u6211\u7528\u4e00\u4e2a\u5b66\u751f\u7684\u7b54\u9898\u6b63\u786e\u7387\u548c\u6807\u51c6\u5dee\u6765\u8868\u5f81\u5b66\u751f\u6c34\u5e73\uff0c\u95ee\u9898\u96be\u5ea6\u540c\u7406\u3002\n\n\u6b64\u5916\uff0c\u5b66\u751f\u662f\u5426\u770b\u8fc7\u4e0a\u4e00\u4e2a\u95ee\u9898\u7684\u89e3\u91ca\u4e5f\u5bf9\u5b66\u751f\u662f\u5426\u80fd\u505a\u5bf9\u5f53\u524d\u9898\u76ee\u4f1a\u6709\u5f71\u54cd\uff08\u6211\u60f3\u5230\u4e86\u9ad8\u4e2d\u505a\u9605\u8bfb\u7684\u573a\u666f\uff0c\u505a\u4e86\u4e00\u4e2a\u9898\uff0c\u5b66\u4e86\u51e0\u4e2a\u5355\u8bcd\u6216\u8005\u5b66\u4e86\u4e2a\u505a\u9898\u65b9\u6cd5\uff0c\u4e0b\u4e00\u4e2a\u9898\u7528\u4e0a\u4e86\u3002\u6216\u8005\u540c\u4e00\u7bc7\u9605\u8bfb\u505a\u4e00\u4e2a\u9898\u76ee\u5c31\u770b\u4e00\u4e2a\u7b54\u6848\u53ef\u80fd\u6709\u70b9\u8fc7\u5206\uff09","5ab751dd":"\u6700\u540e\uff0cfuture works\u5f88\u591a\uff0c\u4e5f\u4e0d\u6b62\u8fd9\u4e2a\u6a21\u578b\u9700\u8981\u4fee\u6539\uff0c\u6211\u8fd8\u6709\u5728\u8003\u8651\u628atags\u5904\u7406\u4e00\u4e0b\u4e4b\u540e\u4e5f\u505a\u4e00\u4e2aonehot\uff0c\u76ee\u524d\u4e5f\u5728\u5b66\u4e60transformer\u548csant\u8fd8\u6709sant+\u3002\u6700\u540e\u8fd8\u662f\u60f3\u7528\u5229\u5668sant+\u6765\u5b9e\u73b0\u7684hhh\uff0c\u5e0c\u671b\u81ea\u5df1\u53ef\u4ee5\u5c3d\u5feb\u5b66\u4f1a\uff01\u7b49\u6211\u5b66\u4f1a\u4e86\u518d\u6765\u7ed9\u4f60\u4eec\u770b\u6210\u679c~\n\n\u5982\u679c\u672c\u6587\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u6b22\u8fce\u5927\u5bb6\u6765\u6307\u70b9\u6211\uff01\n\n---------------------- \u81f4\u8c22 --------------------------\n\n\u611f\u8c22 Shuhao Cao\uff0c\u6211\u4f7f\u7528\u4e86.copy() \u4e4b\u540e\u53d1\u73b0\u4e0d\u4ec5\u4ec5\u662f\u6ca1\u6709warning\u4e86\uff0c\u4ee3\u7801\u8dd1\u8d77\u6765\u4e5f\u5feb\u4e86\u5f88\u591a\uff0c\u975e\u5e38\u8212\u9002","3b573c18":"# step3 \u7279\u5f81\u5904\u7406\n\u5bf9\u4e8electure\u6587\u4ef6\uff0c\u6211\u8ba4\u4e3a\u6709\u610f\u4e49\u7684\u4e1c\u897f\u5305\u62eclecture\u5bf9\u5e94\u7684tag\u8ddfpart\uff0cquestion\u4e5f\u662f\u4e00\u6837\u3002tag\u7684\u542b\u4e49\u662f\u77e5\u8bc6\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u9884\u6d4b\u5b66\u751f\u662f\u5426\u80fd\u505a\u5bf9\u9898\u76ee\uff08\u57fa\u672c\u7b49\u540c\u4e8e\u662f\u5426\u638c\u63e1\u77e5\u8bc6\u70b9\uff09\u7684\u6700\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u6211\u9700\u8981\u8981\u628a\u5904\u7406\u7684\u91cd\u5fc3\u653e\u5728\u8fd9\u91cc\uff0c\u4f46\u5b83\u53ef\u80fd\u4e5f\u662f\u6700\u96be\u7684\u90e8\u5206\uff1ftag\u8ddfpart\u4f3c\u4e4e\u8981\u7ed3\u5408\u5728\u4e00\u8d77\u66f4\u6709\u610f\u4e49\uff0c\u4f46\u662f\u5e94\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\n\n\u6211\u53bb\u7ffb\u627e\u4e86\u5176\u4ed6\u4eba\u5bf9tag\u505a\u7684\u5de5\u4f5c\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u60f3\u6cd5\u76f8\u6295\u7684\u4f19\u8ba1https:\/\/www.kaggle.com\/yanamal\/questions-tags-and-lectures-riiid-metadata-eda\n\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u505a\u4e86\u597d\u770b\u7684\u805a\u7c7b\u5206\u6790\u7684\u5927\u5144\u5f1f\uff1ahttps:\/\/www.kaggle.com\/spacelx\/2020-r3id-clustering-question-tags\n\nYana Malysheva\u7684\u5de5\u4f5c\u975e\u5e38\u6709\u8da3\uff0c\u4ed6\u5f97\u51fa\u4e86\u4e00\u4e9b\u6709\u6307\u5bfc\u610f\u4e49\u7684\u7ed3\u8bba\uff0c\u8bf4\u660etags\u5728\u4e0d\u540cpart\u7684\u5212\u5206\u5177\u6709\u610f\u4e49\uff0c\u5305\u62ec\uff1a\n* part5\u548cpart6\u4f1a\u95ee\u4e00\u4e9b\u76f8\u4f3c\u95ee\u9898\uff08\u5177\u6709\u76f8\u540ctag\uff09\uff1b\n* part1-4\u5305\u542b\u76f8\u540c\u7684tag\uff08\u548c\u542c\u529b\u7406\u89e3\u6709\u5173\uff09\uff1b\n* 1-4\u4e0e7\u53ea\u8003\u5bdf\u7efc\u5408\u77e5\u8bc6\uff08\u591atag\uff09\uff0c5\u53ea\u8003\u5bdf\u67d0\u4e2a\u77e5\u8bc6\u70b9\uff08\u5355tag\uff09\uff1b\n* tag162\u4f7f\u5f97part6\u533a\u5206\u4e8epart5\uff1b\n* part3-4\u7684\u6bcf\u4e2a\u95ee\u9898\u90fd\u4f1a\u5305\u542b[74, 82, 161, 106, 136, 157, 113]\u5176\u4e2d\u7684\u4e00\u4e2a\n\n\u6b64\u5916\uff0c\u4ed6\u8fd8\u63a2\u7d22\u4e86tag\u7684\u542b\u4e49\uff0c\u6bd4\u5982\u90a3\u4e9b\u6ca1\u51fa\u73b0\u5728\u8bb2\u5ea7\u91cc\u7684\u6807\u7b7e\uff0c\u53ef\u80fd\u662f\u865a\u7684\u5185\u5bb9\uff08\u6bd4\u5982\u542c\u529b\u80fd\u529b\uff09\uff0c\u5e76\u63d0\u51fa\u4e86\u5173\u4e8epart3-4\u4e2dtag\u8ddf\u96be\u5ea6\u7684\u5173\u7cfb\u731c\u60f3\u3002\n\n-\n\n\u6211\u60f3\u4e00\u5b9a\u6709\u4eba\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\u6765\u5c06tag\u548cpart\u505a\u51fa\u5408\u9002\u7684\u597d\u7684\u5904\u7406\uff0c\u4f46\u662f\u6211\u6700\u521d\u7684\u6a21\u578b\u6050\u6015\u4e0d\u9002\u5408\u4f53\u91cf\u592a\u5927\uff0c\u5c31\u5148\u5c06tag\u548cpart\u5206\u5f00\u505a\u4e00\u4e0b\u5904\u7406\u597d\u4e86\uff0c\u53e6\u5916\uff0c\u6211\u8ba4\u4e3a\u4e00\u4e2a\u77e5\u8bc6\u70b9\u53ef\u4ee5\u8fc1\u79fb\u8fd0\u7528\uff0c\u5176\u5b9e\u4e5f\u4e0d\u4f1a\u90a3\u4e48\u62d8\u6ce5\u4e8e\u6d89\u53ca\u7684part\u3002\u76f8\u540ctag\u5bf9\u4e0d\u540cpart\uff0c\u533a\u5206\u66f4\u591a\u7684\u53ef\u80fd\u662f\u4e00\u4e9b\u89e3\u9898\u6280\u5de7\u3002\n\n\u6700\u7ec8\uff0c\u6211\u60f3\u5bf9L&Q\u7684tag\u505a\u7684\u5904\u7406\u662f\uff0c\u8ba1\u7b97\u51fa\u4e00\u4e2a\u7528\u6237\u662f\u5426\u5b66\u4e60\u8fc7question\u6d89\u53ca\u7684tag\uff0c\u5bf9\u4e8e\u5305\u542b\u591a\u4e2atag\u7684question\uff0c\u8ba1\u7b97\u5b66\u8fc7\u7684tag\u6240\u5360\u7684\u6bd4\u7387\uff08\u8fd9\u4e2a\u7279\u5f81\u786e\u5b9e\u4e0d\u592a\u597d\uff0c\u6211\u8fd8\u5728\u601d\u8003\u8981\u600e\u4e48\u53bb\u505a\u6539\u8fdb\uff0c\u6bd4\u5982\u662f\u5426\u8981\u53bb\u6389\u90a3\u4e9b\u6ca1\u6709\u5355\u72ec\u51fa\u73b0\u6216\u6ca1\u6709\u5728lecture\u51fa\u73b0\u7684tag\uff0c\u6216\u8005\u518d\u8fdb\u4e00\u6b65\uff0c\u628a\u90a3\u4e9b\u770b\u8fc7\u89e3\u91ca\u7684\u95ee\u9898\u7684tag\u4e5f\u52a0\u5165\u8fdb\u6765\uff09\n\n\u6211\u7684\u7b2c\u4e00\u4e2a\u5904\u7406\u6b65\u9aa4\u662f\uff0c\u63d0\u53d6\u7528\u6237\u4ecelecture\u4e2d\u5b66\u5230\u7684tags\uff1a","390e131a":"# step1 \u719f\u6089\u6570\u636e\n\u5728\u5efa\u7acb\u6a21\u578b\u4e4b\u524d\uff0c\u6700\u91cd\u8981\u7684\u662f\u53bb\u719f\u6089\u6570\u636e\uff0c\u719f\u6089\u6570\u636e\u6709\u51e0\u4e2a\u76ee\u7684\uff1a\n1. \u4e86\u89e3\u6570\u636e\u7684\u542b\u4e49\uff0c\u4ee5\u6839\u636e\u7ecf\u9a8c\u521d\u6b65\u7b5b\u9009\u4f60\u6a21\u578b\u4e2d\u9700\u8981\u7528\u5230\u7684\u6570\u636e\u5217\u548c\u4e0d\u9700\u8981\u7684\u6570\u636e\u5217\u3002\n    \n    \u672c\u9898\u7684\u6570\u636e\u542b\u4e49\u89c1\u6211\u7684\u719f\u6089\u6570\u636enotebook\uff1ahttps:\/\/www.kaggle.com\/zcatherine\/riiid\n   \n   \n2. \u601d\u8003\u6570\u636e\u95f4\u7684\u5173\u7cfb\uff0c\u4ee5\u4fbf\u9009\u53d6\u5408\u9002\u7684\u6a21\u578b\u548c\u53c2\u6570\u3002\n   \n   \u6bd4\u5982\uff1a\u672c\u9898\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u7684\u6982\u7387\u9884\u6d4b\uff0c\u6211\u7528MLP\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff0c\u90a3\u4e48\u8fd9\u79cd\u95ee\u9898\u7684\u4f18\u5316\u5668\u901a\u5e38\u4f1a\u9009\u62e9RMSProp\uff0c\u6fc0\u6d3b\u51fd\u6570\u9009\u62e9sigmoid\u7684\u7ec4\u5408\u6bd4\u8f83\u5408\u9002\uff1b\u6709\u7684\u7279\u5f81\u5355\u72ec\u770b\u548c\u7ed3\u679c\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u4f46\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u7279\u5f81\u7ec4\u5408\u5728\u4e00\u8d77\u4f1a\u5bf9\u7ed3\u679c\u4ea7\u751f\u8f83\u5927\u7684\u5f71\u54cd(e.g. XOR)\uff0c\u90a3\u4e48\u5c31\u8981\u5728\u6a21\u578b\u4e2d\u52a0\u5165\u975e\u7ebf\u6027\u7ed3\u6784\u3002\n   \n   \n3. \u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u5305\u62ec\u586b\u8865nan\u548c\u628a\u4e00\u4e9b\u5217\u5904\u7406\u6210\u4f60\u60f3\u8981\u7684\u7279\u5f81\u3002\n   \n   \u5173\u4e8enan\u7684\u662f\u5426\u586b\u8865\uff0c\u586b\u8865\u4e3a\u54ea\u4e9b\u503c\uff08\u5e73\u5747\u6570\uff1f\u4f17\u6570\uff1f0\uff1fINF\uff1fpre\u9884\u6d4b\u7ed3\u679c\uff1f\uff09\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u601d\u8003\u7684\u95ee\u9898\u3002\u5c31\u597d\u50cf\u672c\u9898\u7684\u8bad\u7ec3\u96c6\u4e2d\uff0c\u4e0a\u4e00\u4e2a\u9898\u76ee\u662f\u5426\u6709\u89e3\u91ca\u8fd9\u4e00\u5217\u6709true\u3001false\u3001nan\u4e09\u79cd\u503c\uff0c\u6211\u4e00\u5f00\u59cb\u5c31\u4e0d\u786e\u5b9a\u8981\u4e0d\u8981\u628anan\u586b\u8865\u6210false\uff0c\u4f46\u662f\u540e\u6765\u8003\u8651\u5230\u8fd9\u4e9bnan\u4ee3\u8868\u7740\u7b2c\u4e00\u4e2a\u9898\u76ee\uff0c\u6216\u8bb8\u4e5f\u6709\u5b83\u7684\u610f\u4e49\uff0c\u7136\u540e\u5199\u51fa\u672c\u6587\u4e2d\u7684feature3\u4e4b\u540e\u53d1\u73b0\u5b83\u548cfalse\u5173\u4e8e\u4f5c\u7b54\u662f\u5426\u6b63\u786e\u7684\u5e73\u5747\u503c\u548c\u65b9\u5dee\u8fd8\u662f\u6709\u533a\u522b\uff0c\u6240\u4ee5\u6700\u7ec8\u8fd8\u662f\u6ca1\u6709\u53bb\u586b\u8865\u5b83\u3002","9a590ad7":"# step6 \u6a21\u578b\u8bad\u7ec3\n\u6a21\u578b\u8bad\u7ec3\u8981\u8003\u8651\u7684\u53c2\u6570\uff1a\n\nbatch_size\uff1a\u592a\u5927\u6216\u8005\u592a\u5c0f\u90fd\u4f1a\u8bad\u7ec3\u5f88\u6162\uff0c\u9002\u4e2d\u7684batch_size\u53ef\u4ee5\u63d0\u9ad8\u8bad\u7ec3\u901f\u5ea6\uff08\u8fd8\u8bb0\u5f97mini-batch\u90a3\u4e00\u8bfe\u4e48\uff1f\uff09\uff0c\u8fd9\u91cc\u8003\u8651\u5230\u8bad\u7ec3\u6570\u636e\u96c6\u6709100w\u6570\u636e\uff0c\u5c31\u9009\u62e9\u4e864800\uff08\u5fae\u8c03\u4e86\u4e00\u4e0b\uff09\u3002\n\nepochs\uff1a    \u4f5c\u4e3a\u4e00\u4e2a\u8bad\u7ec3\u8f6e\u6b21\uff0c\u5f53\u7136\u53ef\u4ee5\u81ea\u9002\u5e94\uff0c\u4f46\u662f\u6211\u4e0d\u5e0c\u671b\u592a\u591a\u4ee5\u81f4\u592a\u6162\uff0c\u4e5f\u4e0d\u5e0c\u671b\u592a\u5c11\u770b\u4e0d\u51fa\u6548\u679c\uff0c\u5f71\u54cd\u6211\u7684\u6548\u7387\uff0c\u4e8e\u662f\u8bbe\u7f6e\u4e3a30\u3002\n\n\u5176\u4ed6\u53c2\u6570\u4e0d\u505a\u8fc7\u591a\u89e3\u91ca\uff0c\u4f46\u662f\u5728\u6587\u6863\u4e2d\u90fd\u53ef\u4ee5\u627e\u5230\u5177\u4f53\u542b\u4e49\uff0c\u65b0\u624b\u5c31\u662f\u8981\u591a\u5b66\u4e60\u6587\u6863\u3002","498d8f35":"# step5 \u6784\u9020\u6a21\u578b\nstep2\u4e2d\u8bf4\u660e\u8fc7\u9009\u62e9MLP\u6a21\u578b\u7684\u7406\u7531\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u91cd\u590d\uff0c\u5982\u4f55\u4f7f\u7528keras\u5199\u6a21\u578b\u53ef\u4ee5\u53c2\u8003https:\/\/keras.io\/guides\/functional_api\/\n\n\u9996\u5148\u8fd8\u662f\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\u6a21\u578b\uff0c\u53e0\u5c42\u7684\u65f6\u5019\u8003\u8651\u5230\u5c42\u6570\u591a\u4e86\u5bb9\u6613\u6536\u655b\u8fc7\u5feb+\u8fc7\u62df\u5408\uff0c\u8fd9\u91cc\u5c31\u53ea\u6784\u9020\u4e86\u4e00\u4e2a\u4e24\u5c42\u6a21\u578b\uff0c\u8282\u70b9\u6570\u7684\u9009\u62e9\u786e\u5b9e\u5f88\u56f0\u96be\uff0c\u6211\u5c1d\u8bd5\u4e86\u591a\u6b21\u8c03\u6574\uff0c\u4f46\u662f\u5dee\u522b\u4e0d\u5927\uff0c\u5c31\u968f\u4fbf\u9009\u4e86\u4e00\u4e2a\u6570\uff08\u611f\u89c9\u8f93\u5165shape\u76842\u500d\u597d\u7528\u7684\uff09\u3002\n\n\u81f3\u4e8e\u6fc0\u6d3b\u51fd\u6570\u7684\u9009\u62e9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0brelu\u7684\u8868\u73b0\u90fd\u4e0d\u9519\uff0c\u4e8c\u5206\u7c7b\u6982\u7387\u95ee\u9898\u6700\u540e\u9009\u7528sigmoid\uff0c\u7ecf\u8fc7\u5c1d\u8bd5\u53d1\u73b0\u8fd9\u6837\u786e\u5b9e\u662f\u5408\u9002\u7684\u7ec4\u5408\u3002\n\n\u540e\u9762\u6a21\u578bmetrics\u4e2d\u7684AUC\u51fd\u6570\u662f\u4eceCSDN\u4e0a\u627e\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u4ed6\u7684\u7528\u6237\u540d\u641c\u5230\u6765\u6e90\u3002\n\n\u6a21\u578b\u7684\u53c2\u6570\u6211\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u4e5f\u662f\u9009\u53d6\u6bd4\u8f83\u901a\u7528\u7684he_normal, loss\u662f\u4e8c\u5206\u7c7b\u7684\u4ea4\u53c9\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u4f18\u5316\u5668\u6211\u8bd5\u4e86\u4e00\u4e0b\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u7684adadelta\uff08 https:\/\/keras.io\/zh\/optimizers\/#adadelta \uff09\uff0c\u6700\u7ec8\u53d1\u73b0\u8fd8\u662frmsprop\u6548\u679c\u597d\uff1a","015ab5b3":"# step4 \u6570\u636escale\n\u5728\u9009\u62e9\u597d\u7279\u5f81\u4e4b\u540e\uff0c\u8fd8\u6709\u4e00\u4e9b\u6709\u7528\u7684\u5217\u503c\u6ca1\u6709\u7ecf\u8fc7\u5904\u7406\uff0c\u4ed6\u4eec\u7684\u6570\u503c\u91cf\u7ea7\u6bd4\u5904\u7406\u8fc7\u7684\u91cf\u7ea7\u5927\u5f97\u591a\uff0c\u8fd9\u4f1a\u5f71\u54cd\u8c03\u53c2\u6548\u7387\u548c\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd8\u8981\u5bf9\u8fd9\u4e9b\u5217\u503c\u505a\u4e00\u4e2a\u5f52\u4e00\u5316\u3001\u6807\u51c6\u5316\u4e4b\u7c7b\u7684\u5904\u7406\uff0c\u53e6\u5916part1-7\u4e5f\u53ef\u4ee5\u505a\u4e00\u4e2aonehot\u7f16\u7801\uff0c\u8003\u8651\u5230\u540e\u7eedtest\u6570\u636e\u7684\u4e0d\u5b8c\u6574\u6027\uff0c\u8fd9\u91cc\u5bf9part\u7f16\u7801\u540e\u4fdd\u5b58encoder\u76f4\u63a5\u5bf9\u540e\u7eedtest\u6570\u636e\u8fdb\u884c\u5904\u7406\uff1a","3bdbd526":"# step7 \u6a21\u578b\u9884\u6d4b\u4e0e\u7ed3\u679c\u63d0\u4ea4\n\u9898\u5916\u8bdd\uff1a\u7ec8\u4e8e\u8bad\u7ec3\u597d\u4e00\u4e2a\u6a21\u578b\u4e4b\u540e\u5c31\u8981\u5f00\u59cb\u9884\u6d4b\u548c\u63d0\u4ea4\u6a21\u578b\u5566\uff0c\u8fd9\u91cc\u7684env\u5361\u4e86\u6211\u597d\u4e45\uff0c\u5c31\u662f\u4e4b\u524d\u76f4\u63a5\u5199\u5728\u53e6\u4e00\u4e2anotebook\u91cc\u7684\u6a21\u578b\u4e00\u76f4\u8fc7\u4e0d\u53bb\u5361\u4e86\u621130\u591aversion\uff0c\u76f4\u5230\u6211\u5f00\u59cb\u5199\u8fd9\u4efdnotebook\u7528\u9609\u5272\u7248\u6a21\u578b\u4e00\u70b9\u4e00\u70b9\u52a0\u4e0a\u6765\u624d\u62ff\u5230\u4e86\u5206\u6570\uff0c\u4f46\u662f\u660e\u660e\u4e24\u4e2anotebook\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u6211\u7684\u8fd9\u4e2a\u6a21\u578b\u8bad\u7ec3\u7ed3\u679c\u662f0.5\u51e0\uff0c\u53e6\u4e00\u4e2a\u4e00\u76f4scoring error\u7684\u6a21\u578b\u7ed3\u679c\u662f0.7\u51e0\uff0c\u6211\u8fd8\u6ca1\u627e\u5230\u5dee\u5728\u54ea\u4e86\uff0c\u8fd8\u662f\u633a\u61f5\u7684\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u4e2a\u6a21\u578b\u6709\u65f6\u5019\u6539\u4e00\u70b9\u70b9\u7a81\u7136\u5c31\u8dd1\u5f97\u5f88\u6162\uff0c\u6211\u4e5f\u6ca1\u5f04\u660e\u767d\u5230\u5e95\u662f\u4e3a\u4ec0\u4e48\u3002\n\n------------ \u53e6\u4e00\u4e2anotebook\u7528\u4e86.copy()\u4e4b\u540e\u4e5f\u8dd1\u51fa\u5206\u4e86[doge]\uff0c\u5f97\u52060.692\uff0c\u4f46\u6211\u8fd8\u662f\u627e\u4e0d\u51fa\u4e24\u4e2anotebook\u7684\u5dee\u522b\u5728\u54ea\uff0c\u54ed\u6ce3 ------------\n![image.png](attachment:image.png)\n\n\n\u9884\u6d4b\u7684\u65f6\u5019\u4e5f\u8fd8\u662f\u8981\u5904\u7406test\u96c6\uff0c\u5c31\u50cf\u5904\u7406train\u96c6\u4e00\u6837"}}