{"cell_type":{"a468ca50":"code","72b881a7":"code","1f37a245":"code","32f3c311":"code","257ba1b4":"code","77417c54":"code","2c3a4695":"code","e5047476":"code","72ca0ebe":"code","dc3ff6fc":"code","44ef5d9d":"code","98828337":"code","e1032239":"code","60a0eb67":"code","cf984dfe":"code","61e3d9b6":"code","59107d29":"code","7834dc60":"code","48d40ae5":"code","f19b74ad":"code","9283f13a":"code","7e65672c":"code","0f30176c":"code","80629472":"code","bf64dd8a":"code","f76919de":"code","dce9059c":"code","8b9af890":"code","9d7d0839":"code","c7513d30":"code","46a76f06":"code","21ba9602":"code","2ad20e65":"code","9869b498":"code","9321233a":"code","3156f3f5":"code","9c15cb25":"code","8e5bf42f":"code","ce58a1db":"code","6f054311":"code","e58f1407":"code","dac6720a":"code","4f26961d":"code","317b8df5":"code","d2ac3a3b":"code","6ac5eb01":"code","9c281b45":"code","0d9d7eeb":"code","dcf99575":"code","f92d8496":"code","c7f5f76a":"code","5fb0f73e":"code","a150dd4f":"code","d2b732ee":"code","b860d55f":"code","2374ad42":"code","b5ac6a35":"code","de5fbbe5":"code","540f48f0":"code","c00256e2":"code","18452c40":"code","1844fd7d":"code","f7f19ec9":"code","20d7df21":"code","ff5cbf3b":"code","cbd029f0":"code","8480602c":"code","3f270ff3":"code","a88f232b":"code","12d0468d":"code","cb37969b":"code","31a598f0":"code","41b7b22b":"code","42a4ee01":"code","27dcad00":"code","f12c9d49":"code","5e766abe":"code","27c454bf":"code","98d45bc8":"code","c4fbd856":"code","b83a0209":"code","aaf477a1":"code","425452b6":"code","f9cd6b0c":"code","fbfcc27c":"code","67519f08":"code","35d4e430":"code","1884a066":"code","7baed99b":"code","d5792a0a":"code","4bd612ce":"code","2156d43c":"code","18f15f77":"code","edf1b6e7":"code","0089d9e4":"code","bb04f320":"code","b7107e03":"code","7719e6a6":"code","c0b79481":"code","1a7b7689":"code","21425c66":"code","63f4f140":"code","480e1588":"code","debafe69":"code","1b96a051":"code","937b18dc":"code","366be44b":"code","4b313153":"code","12711368":"code","f2503649":"code","dab3a38c":"code","2bb06a95":"code","e68ecb84":"code","229bf578":"code","d97b27f9":"code","fa2525f5":"code","d57f678d":"code","d0374306":"code","af946a9a":"code","c77ef0d9":"code","001278ad":"code","c2d964e7":"code","a7a957be":"code","a7b52e82":"code","85bad573":"code","00b2d637":"code","01660e20":"code","91a02723":"code","e5534bd5":"code","507d5d65":"code","b485d56a":"code","1f17a59f":"code","6745cd18":"code","a18d1d22":"code","71c870b2":"code","d48e4128":"code","2ef46ae7":"code","40cfb97a":"code","a8384660":"code","0013ad7a":"code","86aca9c1":"code","e87a6716":"code","df577f11":"code","0a606ece":"code","ae513596":"code","8279a684":"code","203d183d":"code","fa507047":"code","5378a33f":"code","f7602cd0":"code","699f5986":"code","2baa76f9":"code","a22298d3":"code","f3787f55":"code","406f9594":"code","d52d7cfe":"code","f2cab8f4":"code","52b2915f":"code","0b0e0ef8":"code","57b367f5":"code","8873387b":"code","66df7d18":"code","747a9292":"code","90374831":"code","f32b401a":"code","ab878680":"code","c395c080":"code","811ccd06":"code","3cee3057":"code","5430b2ff":"code","5b186b55":"code","d58dcb2b":"code","b02e42c3":"code","c700f59d":"code","4ceb64df":"code","42826fc3":"code","2c7703d3":"code","9d190b22":"code","6530418c":"code","863194d6":"code","99f793de":"code","68484dec":"code","59b6d58d":"code","8f68bb1f":"code","7f727c88":"code","5c71ba60":"code","99a7b648":"code","a3cce0e3":"code","8a69245c":"code","3c86294f":"code","ad16c2d5":"code","fdb034b4":"code","e551a8d8":"code","83973114":"code","b23a8459":"code","741ff324":"code","0886cccf":"code","afab8b8e":"code","20c92fb9":"code","fd04874c":"code","8ee10994":"code","17c4464d":"code","9e93cd99":"code","bcb5666a":"code","0ed4522f":"code","31a8ec3f":"code","76b36116":"code","a9080b80":"code","323e9656":"code","a076d547":"code","49016910":"code","073b7a3e":"code","feeee49c":"code","396a530e":"code","f35f8e6c":"code","e4da3586":"code","b6a154f7":"code","7e862b16":"code","98405f22":"code","9d608237":"code","0caa9d7b":"code","ccd20f3a":"code","1c6e564f":"code","50d2ffb7":"code","c2766820":"code","09a8d13e":"code","ac72b843":"code","9e8a15cf":"code","f5600c02":"code","20d54b53":"code","6991a694":"code","387c0630":"code","f8f371ae":"code","4c1eb710":"code","7164a4c8":"code","9fb0f816":"code","a985de29":"code","aebab665":"code","97acd83a":"code","7999e92b":"code","2127931a":"code","b5849f33":"code","9e626402":"code","7314db41":"code","6e094c0a":"code","3575ac9b":"code","1f22aa83":"code","ddd4a639":"code","f43530d1":"code","d98481e9":"code","d125ef7b":"code","2990da8e":"code","d9f53369":"code","1a042758":"code","517eb8bc":"code","f0316b83":"code","6f1bac86":"code","8f885e9c":"code","5bdd1323":"code","fd05240e":"code","63e79cf0":"code","a054a364":"code","a576cf2b":"code","efb5b947":"code","5c6126ed":"code","d3b48dfb":"code","ace9b4b7":"code","83557bc1":"code","c78041e0":"code","25932c0e":"code","e4fb4c5e":"code","2f63fb8e":"code","63adf4de":"code","062c4ee0":"code","1362f088":"code","bff4c3b7":"code","a1c7ebd9":"code","b39c5bcd":"code","dfffe903":"code","695bfd40":"code","30f684ca":"code","2fb2c4fe":"code","29b3fa6c":"code","38a8efcb":"code","ad4584c2":"code","952f3ddf":"code","7afe7529":"code","0f7bfad2":"code","70f522e0":"code","4fb39270":"code","f6e0fdc1":"code","9eea5a9c":"code","ec819cf6":"code","85db7337":"code","2903726c":"code","56bbd9be":"code","69a38a6e":"code","07dedf8a":"code","2d09ea19":"code","0f44f00b":"code","ec6d478e":"code","25653553":"code","19933d15":"code","3f64cb7f":"code","1362be31":"code","d52663bb":"code","d2b0146a":"code","da8954e4":"code","6430599e":"code","f3aaea4f":"code","b4379f0f":"code","f04ff6d5":"code","c37d062e":"code","bb2153be":"code","1233d593":"code","4dc0e92c":"code","9be3643f":"code","89d081af":"code","14b0bd09":"code","803c104c":"code","2ff47da6":"code","7ffd09d2":"code","9284aabe":"code","64e60a4a":"code","88e89c61":"code","8e634eea":"code","00617024":"code","ae1c1a7a":"code","5a3f463b":"code","7ca43b4d":"code","5f49a9d6":"code","e2824841":"code","a5557729":"code","05b71766":"code","fbf8cc46":"code","e0ffaf70":"code","97dff363":"code","79d26dc0":"code","3a90178f":"code","21e3e67d":"code","d9776bfc":"code","15b37778":"code","b447c3d3":"code","47efa8f9":"code","b66eb190":"code","4caea505":"code","6eb6dc7e":"code","caabf962":"code","086ded3d":"code","185e05c9":"code","1d58d6b3":"code","731e1230":"code","68830a64":"code","17224095":"code","5f617de7":"code","6f16a06e":"code","0ab373de":"code","50859559":"code","dcf59360":"code","10f06693":"code","5f458957":"code","15f496a0":"code","273f59de":"code","07d84601":"code","5e71486f":"code","ced0f3cf":"code","56308822":"code","42a2845a":"code","c8edc6bc":"code","86200049":"code","6e9717fe":"code","ebb08633":"code","263aeba8":"code","46600e8e":"code","2a4cb598":"code","a628b837":"code","0c2f403a":"code","72ce70c7":"code","8fad01b9":"code","75549e5c":"code","98518af0":"code","d599d96f":"code","6f174433":"code","1d935755":"code","373839a5":"code","93ebf009":"code","59c3613c":"code","f6d3b857":"code","6b44332a":"code","6f622bb3":"code","ca4a5cfe":"code","b832a751":"code","ebc9337a":"code","dba3d445":"code","1f034f03":"code","fd806aa0":"code","58419d06":"code","e4dbdbfc":"code","dd8b26e3":"code","bb3c5fe7":"code","dc72936f":"code","fec2692f":"code","e10e2f51":"code","41a9ec65":"code","d4e19ed1":"code","4fd066a8":"code","1afed0b0":"code","e5d82a3c":"code","2ecbd390":"code","ebea4487":"code","06d663f7":"code","90075011":"code","c7436455":"code","8232b71c":"code","f52285a8":"code","933402c2":"code","7c7e341c":"code","ba881dcb":"code","a2046a50":"code","8ba535fe":"code","ccba507c":"code","f9eabc30":"code","4259708c":"code","c0e5d50b":"code","496212e6":"code","2b468ac3":"code","b29623f9":"code","f095749a":"code","74e4c548":"code","669152ce":"code","1c5a6ad6":"code","88d002bc":"code","3996524f":"code","5ed0e2ba":"code","e0f34e01":"code","cc8524f7":"code","8978336b":"code","fd185140":"code","e04b9c52":"code","b0eaad49":"code","5ef8763e":"code","fd6fb594":"code","df9554ef":"code","8c351e4c":"code","a041d99c":"code","7b68e08e":"code","c004c82b":"code","c32e80fd":"code","09a7c445":"code","59c36a9b":"code","c5536d67":"code","7fa0eec9":"code","74ec00ac":"code","e75ef411":"code","7d4d3125":"code","9c0bfcd4":"code","41f0c852":"code","e17f6a16":"code","a67a46f9":"code","50bcdf44":"code","f20f5d88":"code","c9790867":"code","b1d50c98":"code","b300158e":"code","5d8ac260":"code","3b9cae87":"code","bd22ceb7":"code","2b176607":"code","cfb89e9d":"code","5be81bbf":"code","af895a00":"code","67dd4300":"code","1d87b043":"code","4be1d59e":"code","573eb7e8":"code","2c118813":"code","f78b1078":"code","f5aab570":"code","b62a54b2":"code","58016dd5":"code","be952437":"code","18467686":"code","ac45fa1b":"code","876facfa":"code","1c901e90":"code","1720a2d1":"code","51ed007a":"code","3344f1e7":"code","2e726ddc":"code","fa5cab26":"code","d6da9f7c":"code","74e5e676":"code","ad932fb3":"code","2905c406":"code","693b1710":"code","d0f1deee":"code","73272a71":"code","51d6fa0b":"code","8c2f1c36":"code","3d9fbb35":"code","2b0d9c40":"code","56dfeffb":"code","a394cc09":"code","c8dc4a0d":"code","2d8d6ec9":"code","70ca038c":"code","51baf344":"code","d53c47f0":"markdown","aeebebfd":"markdown","c8207e88":"markdown","9aa1e103":"markdown","48e09134":"markdown","717aa6c5":"markdown","618e8777":"markdown","ca698923":"markdown","2ed4e5dc":"markdown","7788e280":"markdown","52993ae7":"markdown","7d712aa1":"markdown","251cc83e":"markdown","424838a2":"markdown","dfc149b7":"markdown","2d3d1cc4":"markdown","f6fcad50":"markdown","a12c2ca6":"markdown","91258e6a":"markdown","a243f4e3":"markdown","b1417f9e":"markdown","daa06e33":"markdown","7ca5feb7":"markdown","6d00536d":"markdown","fa2a79fd":"markdown","557f2620":"markdown","daead330":"markdown","105f17cd":"markdown","734de6f5":"markdown","39b71864":"markdown","7293370b":"markdown","43712ec4":"markdown","0da8597a":"markdown","eafc68ab":"markdown","8012510b":"markdown","1d70d56e":"markdown","68cac63c":"markdown","71429078":"markdown","a6b6a62d":"markdown","22156629":"markdown","cd94c995":"markdown","e2797d2d":"markdown","a053ab8c":"markdown","98108a6f":"markdown","9d063cf4":"markdown","dac9e423":"markdown","267da36f":"markdown","202afd23":"markdown","68c87d28":"markdown","e97cf049":"markdown","a3e6a550":"markdown","54f993db":"markdown","1400a5ed":"markdown","b6dbd2a6":"markdown","4d6c93ec":"markdown","d1a4ef7d":"markdown","dfc78b20":"markdown","9a7e0071":"markdown","b33bbb7c":"markdown","f3c057db":"markdown","4af8ed74":"markdown","11340121":"markdown","672170eb":"markdown","ee23f608":"markdown","9ff5c95c":"markdown","adae90b5":"markdown","558d93b6":"markdown","254ff0df":"markdown","fa5d9dea":"markdown","c23bc7c3":"markdown","4902fc77":"markdown","b3936661":"markdown","4106b354":"markdown","afe9c329":"markdown","9ba68bef":"markdown","95ef6db6":"markdown","e02e6a5e":"markdown","f1a3e4b1":"markdown","d390c5a7":"markdown","a46a5672":"markdown","11d5f18e":"markdown","dfbf051c":"markdown","b3914cab":"markdown","72fd6c2d":"markdown","27d04bc2":"markdown","8ecece26":"markdown","d51dea7a":"markdown","b1d5dcc5":"markdown","60cc8edd":"markdown","a1f6da76":"markdown","9365ee17":"markdown","ff00fbc1":"markdown","417409bb":"markdown","88d61415":"markdown","d29b6928":"markdown","a49650a2":"markdown","9e7f4a54":"markdown","f6a97abb":"markdown","bf00d1ae":"markdown","6a66f2ed":"markdown","dee7c973":"markdown","f44245c9":"markdown","c462cf43":"markdown","62894517":"markdown","17b723cb":"markdown","31b11f3d":"markdown","5a44f1bd":"markdown","d59c2d99":"markdown","03aaacef":"markdown","0022b660":"markdown","8e45a28b":"markdown","a124931e":"markdown","335a8c6a":"markdown","48947ec0":"markdown","583b189b":"markdown","5068b657":"markdown","23249916":"markdown","cfc16530":"markdown","ceb0b8b9":"markdown","da487f68":"markdown","5ec9477a":"markdown","b1094fc6":"markdown","3faf973a":"markdown","bfbfbb62":"markdown","51a50b65":"markdown","c317ebfb":"markdown","c745b407":"markdown","94e70d72":"markdown","70919692":"markdown","a7671d9e":"markdown","79f51cf4":"markdown","4d28ff65":"markdown","897f0fb8":"markdown","9251e59c":"markdown","2a87c362":"markdown","494d32ac":"markdown","63185de6":"markdown","25db37e2":"markdown","e6fa479d":"markdown","27215311":"markdown","086f8869":"markdown","ba37ad63":"markdown","81a65e4e":"markdown","05dd6544":"markdown","12fcdcaf":"markdown","e229848a":"markdown","b69df387":"markdown","6ee31c22":"markdown","9729b1d9":"markdown","19f2d622":"markdown","e5f8b7b6":"markdown","9761f299":"markdown","855c2cf5":"markdown","23d92248":"markdown","fba43418":"markdown","2c13109b":"markdown","4b9c6465":"markdown","45da4abe":"markdown","616fb5d0":"markdown","67f2b227":"markdown","c7e700fe":"markdown","a0568e3e":"markdown","0e281f31":"markdown","c723d614":"markdown","776534d5":"markdown","bf1f8b5f":"markdown","0c09f46f":"markdown","537388d3":"markdown","81c69c8d":"markdown","04b14d0a":"markdown","ee2c292b":"markdown","0883f183":"markdown","87d64d11":"markdown","9e2d05bd":"markdown","dc795f4e":"markdown","bf40e745":"markdown","9f9ca4ce":"markdown","dc8e49ec":"markdown","7d72fe35":"markdown","f9512faf":"markdown","9be93ec0":"markdown","70b90c88":"markdown","9c612358":"markdown","d5f7aa7d":"markdown","fb0d249f":"markdown","c424253f":"markdown","7dc6a53b":"markdown","67c1f8c5":"markdown","0379a2dd":"markdown","f25c3382":"markdown","fc2c085c":"markdown","0435f5d1":"markdown","d96e8ada":"markdown","976cdc12":"markdown","63e105b4":"markdown","afd1b3e3":"markdown"},"source":{"a468ca50":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes=True)\nimport warnings\nwarnings.filterwarnings('ignore')","72b881a7":"!pip install tpot","1f37a245":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV,RandomizedSearchCV\nfrom tpot import TPOTClassifier\nfrom scipy.stats import randint\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","32f3c311":"!wget \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00447\/data.zip\"","257ba1b4":"!unzip \"data.zip\"","77417c54":"a=[]\nfor i in [\"PS1\",\"PS2\",\"PS3\",\"PS4\",\"PS5\",\"PS6\"]:\n    PS=np.genfromtxt(r\"\/kaggle\/working\"+\"\/\"+i+\".txt\")\n    a.append(PS)\nps1,ps2,ps3,ps4,ps5,ps6=a","2c3a4695":"ps1","e5047476":"ps1.shape","72ca0ebe":"np.isnan(ps1).sum()","dc3ff6fc":"ps2","44ef5d9d":"ps1_arr=ps1.mean(axis=1)\nps1_arr","98828337":"ps2_arr=ps2.mean(axis=1)\nps2_arr","e1032239":"ps3_arr=ps3.mean(axis=1)\nps3_arr","60a0eb67":"ps4_arr=ps4.mean(axis=1)\nps4_arr","cf984dfe":"ps5_arr=ps5.mean(axis=1)\nps5_arr","61e3d9b6":"ps6_arr=ps6.mean(axis=1)\nps6_arr","59107d29":"df=pd.DataFrame({\"PS1\":ps1_arr,\"PS2\":ps2_arr,\"PS3\":ps3_arr,\"PS4\":ps4_arr,\"PS5\":ps5_arr,\"PS6\":ps6_arr})","7834dc60":"df.head()","48d40ae5":"eps1=np.genfromtxt(r\"\/kaggle\/working\/EPS1.txt\")","f19b74ad":"esp1_arr=eps1.mean(axis=1)\nesp1_arr","9283f13a":"df[\"ESP1\"]=esp1_arr","7e65672c":"df.head()","0f30176c":"a=[]\nfor i in [\"FS1\",\"FS2\"]:\n    FS=np.genfromtxt(r\"\/kaggle\/working\"+\"\/\"+i+\".txt\")\n    a.append(FS)\nfs1,fs2=a","80629472":"fs1_arr=fs1.mean(axis=1)\nfs1_arr","bf64dd8a":"fs2_arr=fs2.mean(axis=1)\nfs2_arr","f76919de":"df[\"FS1\"]=fs1_arr\ndf[\"FS2\"]=fs2_arr","dce9059c":"df.head()","8b9af890":"a=[]\nfor i in [\"TS1\",\"TS2\",\"TS3\",\"TS4\"]:\n    TS=np.genfromtxt(r\"\/kaggle\/working\"+\"\/\"+i+\".txt\")\n    a.append(TS)\nts1,ts2,ts3,ts4=a","9d7d0839":"ts1_arr=ts1.mean(axis=1)\nts1_arr","c7513d30":"ts2_arr=ts2.mean(axis=1)\nts2_arr","46a76f06":"ts3_arr=ts3.mean(axis=1)\nts3_arr","21ba9602":"ts4_arr=ts4.mean(axis=1)\nts4_arr","2ad20e65":"df[\"TS1\"]=ts1_arr\ndf[\"TS2\"]=ts2_arr\ndf[\"TS3\"]=ts3_arr\ndf[\"TS4\"]=ts4_arr","9869b498":"df.head()","9321233a":"vs1=np.genfromtxt(r\"\/kaggle\/working\/VS1.txt\")","3156f3f5":"vs1","9c15cb25":"vs1_arr=vs1.mean(axis=1)\nvs1_arr","8e5bf42f":"df[\"VS1\"]=vs1_arr","ce58a1db":"df.head()","6f054311":"a=[]\nfor i in [\"CE\",\"CP\"]:\n    C=np.genfromtxt(r\"\/kaggle\/working\"+\"\/\"+i+\".txt\")\n    a.append(C)\nce,cp=a","e58f1407":"ce_arr=ce.mean(axis=1)\nce_arr","dac6720a":"cp_arr=cp.mean(axis=1)\ncp_arr","4f26961d":"df[\"CE\"]=ce_arr\ndf[\"CP\"]=cp_arr","317b8df5":"df.head()","d2ac3a3b":"se=np.genfromtxt(r\"\/kaggle\/working\/SE.txt\")","6ac5eb01":"se_arr=se.mean(axis=1)\nse_arr","9c281b45":"df[\"SE\"]=se_arr","0d9d7eeb":"df.head()","dcf99575":"target=np.genfromtxt(r\"\/kaggle\/working\/profile.txt\")","f92d8496":"target","c7f5f76a":"target.shape","5fb0f73e":"df_temp=pd.DataFrame(target,columns=[\"Cooler_Condition\",\"Valve_Condition\",\"Internal_Pump_Leakage\",\"Hydraulic_Accumulator\",\"Stable_Flag\"])\ndf_temp.head()","a150dd4f":"df_final=pd.concat([df,df_temp],axis=1)","d2b732ee":"df_final.head(20)","b860d55f":"df_final.info()","2374ad42":"df_final.describe()","b5ac6a35":"df_final.var()","de5fbbe5":"df_final.corr()","540f48f0":"fig=plt.gcf()\nfig.set_size_inches((25,15))\nsns.heatmap(df_final.corr(),annot=True)","c00256e2":"# fig.savefig(\"corr.png\")","18452c40":"df_final_corr=df_final.corr().sort_values([\"Cooler_Condition\",\"Valve_Condition\",\"Internal_Pump_Leakage\",\"Hydraulic_Accumulator\",\"Stable_Flag\"],ascending=False)\ndf_final_corr.head()","1844fd7d":"df_final_corr_target=df_final_corr[[\"Cooler_Condition\",\"Valve_Condition\",\"Internal_Pump_Leakage\",\"Hydraulic_Accumulator\",\"Stable_Flag\"]]\ndf_final_corr_target.drop([\"Cooler_Condition\",\"Valve_Condition\",\"Internal_Pump_Leakage\",\"Hydraulic_Accumulator\",\"Stable_Flag\"],axis=0,inplace=True)","f7f19ec9":"df_final_corr_target","20d7df21":"x=df_final.iloc[:,:-5]","ff5cbf3b":"x.head(2)","cbd029f0":"y=df_final.iloc[:,-5:]","8480602c":"y.head(2)","3f270ff3":"target_1=y.iloc[:,-5]\ntarget_2=y.iloc[:,-4]\ntarget_3=y.iloc[:,-3]\ntarget_4=y.iloc[:,-2]\nfinal_target=y.iloc[:,-1]\nfinal_target=(final_target.astype(int))","a88f232b":"x.head()","12d0468d":"round((target_1.value_counts(normalize=True)),4)    #cooler condition is normal","cb37969b":"train_x,test_x,train_y,test_y=train_test_split(x,target_1,test_size=0.2,random_state=1)","31a598f0":"from sklearn.preprocessing import StandardScaler","41b7b22b":"sc=StandardScaler()","42a4ee01":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","27dcad00":"l_classifier=LogisticRegression(random_state=42)","f12c9d49":"l_classifier.fit(train_x,train_y)","5e766abe":"pred_train_y=l_classifier.predict(train_x)\npred_test_y=l_classifier.predict(test_x)\naccuracy_score_lr_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_lr_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_lr_train= \",accuracy_score_lr_train)\nprint(\"accuracy_score_lr_test= \",accuracy_score_lr_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","27c454bf":"precision_score_lr_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_lr_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_lr_train= \",precision_score_lr_train)\nprint(\"precision_score_lr_test= \",precision_score_lr_test)","98d45bc8":"scores=cross_validate(l_classifier,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","c4fbd856":"accuracy_score_lr_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_lr_cross= \",accuracy_score_lr_cross)\nprecision_score_lr_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_lr_cross= \",precision_score_lr_cross)        ","b83a0209":"knn=KNeighborsClassifier(n_neighbors=10,p=2)","aaf477a1":"knn.fit(train_x,train_y)","425452b6":"pred_train_y=knn.predict(train_x)\npred_test_y=knn.predict(test_x)\naccuracy_score_knn_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_knn_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_knn_train= \",accuracy_score_knn_train)\nprint(\"accuracy_score_knn_test= \",accuracy_score_knn_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","f9cd6b0c":"precision_score_knn_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_knn_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_knn_train= \",precision_score_knn_train)\nprint(\"precision_score_knn_test= \",precision_score_knn_test)","fbfcc27c":"scores=cross_validate(knn,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","67519f08":"accuracy_score_knn_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_knn_cross= \",accuracy_score_knn_cross)\nprecision_score_knn_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_knn_cross= \",precision_score_knn_cross)","35d4e430":"svc=SVC(kernel=\"rbf\")","1884a066":"svc.fit(train_x,train_y)","7baed99b":"pred_train_y=svc.predict(train_x)\npred_test_y=svc.predict(test_x)\naccuracy_score_svc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_svc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\nprint(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","d5792a0a":"precision_score_svc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_svc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_svc_train= \",precision_score_svc_train)\nprint(\"precision_score_svc_test= \",precision_score_svc_test)","4bd612ce":"scores=cross_validate(svc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","2156d43c":"accuracy_score_svc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_svc_cross= \",accuracy_score_svc_cross)\nprecision_score_svc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_svc_cross= \",precision_score_svc_cross)","18f15f77":"dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=1)","edf1b6e7":"dtc.fit(train_x,train_y)","0089d9e4":"pred_train_y=dtc.predict(train_x)\npred_test_y=dtc.predict(test_x)\naccuracy_score_dtc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_dtc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\nprint(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) ","bb04f320":"precision_score_dtc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_dtc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_dtc_train= \",precision_score_dtc_train)\nprint(\"precision_score_dtc_test= \",precision_score_dtc_test)     #overfitting","b7107e03":"scores=cross_validate(dtc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","7719e6a6":"accuracy_score_dtc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\nprecision_score_dtc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_dtc_cross= \",precision_score_dtc_cross)","c0b79481":"rfc=RandomForestClassifier(n_estimators=100,random_state=1)","1a7b7689":"rfc.fit(train_x,train_y)","21425c66":"pred_train_y=rfc.predict(train_x)\npred_test_y=rfc.predict(test_x)\naccuracy_score_rfc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_rfc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\nprint(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) #overfitting","63f4f140":"precision_score_rfc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_rfc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_rfc_train= \",precision_score_rfc_train)\nprint(\"precision_score_rfc_test= \",precision_score_rfc_test)     ","480e1588":"scores=cross_validate(rfc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","debafe69":"accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\nprecision_score_rfc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_rfc_cross= \",precision_score_rfc_cross)","1b96a051":"tpotc=TPOTClassifier(generations=20,population_size=50,scoring=[\"accuracy\",\"precision\"],cv=5,verbosity=2,n_jobs=-1,random_state=42,config_dict=\"TPOT light\")","937b18dc":"tpotc.fit(train_x,train_y)","366be44b":"tpotc.fitted_pipeline_","4b313153":"pred_train_y=tpotc.predict(train_x)\npred_test_y=tpotc.predict(test_x)\naccuracy_score_tpotc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_tpotc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_tpotc_train= \",accuracy_score_tpotc_train)\nprint(\"accuracy_score_tpotc_test= \",accuracy_score_tpotc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","12711368":"precision_score_tpotc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_tpotc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_tpotc_train= \",precision_score_tpotc_train)\nprint(\"precision_score_tpotc_test= \",precision_score_tpotc_test)","f2503649":"scores=cross_validate(tpotc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=5)\nscores","dab3a38c":"print(\"tpot_accuracy_score_target1= \",scores[\"test_accuracy\"].mean())\nprint(\"tpot_precision_score_target1= \",scores[\"test_precision_weighted\"].mean())","2bb06a95":"accuracy_score_tpotc_train=0.9994331065759637\naccuracy_score_tpotc_test=1.0\nprecision_score_tpotc_train=0.9994340890602342\nprecision_score_tpotc_test=1.0","e68ecb84":"pred_train_accuracy=[accuracy_score_lr_train,accuracy_score_knn_train,accuracy_score_svc_train\n                     ,accuracy_score_tpotc_train]\npred_test_accuracy=[accuracy_score_lr_test,accuracy_score_knn_test,accuracy_score_svc_test\n                     ,accuracy_score_tpotc_test]\npred_train_precision=[precision_score_lr_train,precision_score_knn_train,precision_score_svc_train\n                     ,precision_score_tpotc_train]\npred_test_precision=[precision_score_lr_test,precision_score_knn_test,precision_score_svc_test\n                     ,precision_score_tpotc_test]","229bf578":"df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\ndf_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])\ndf_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\ndf_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])","d97b27f9":"df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\ndf_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\ndf_best_model=pd.concat([df_accuracy,df_precision],keys=[\"accuracy\",\"precision\"],axis=1)\ndf_best_model.set_axis([\"logistic_reg\",\"knn\",\"svc\",\"tpotclassifier\"],axis=0,inplace=True)\ndf_best_model","fa2525f5":"print(\"logistic_regression_target1= \",max(df_best_model.accuracy.test))","d57f678d":"target1_pred_values=l_classifier.predict(test_x)","d0374306":"round((target_2.value_counts(normalize=True)),4)     # valve's condition is good","af946a9a":"train_x,test_x,train_y,test_y=train_test_split(x,target_2,test_size=0.2,random_state=1)","c77ef0d9":"sc=StandardScaler()","001278ad":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","c2d964e7":"l_classifier=LogisticRegression(random_state=42)","a7a957be":"l_classifier.fit(train_x,train_y)","a7b52e82":"pred_train_y=l_classifier.predict(train_x)\npred_test_y=l_classifier.predict(test_x)\naccuracy_score_lr_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_lr_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_lr_train= \",accuracy_score_lr_train)\nprint(\"accuracy_score_lr_test= \",accuracy_score_lr_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","85bad573":"precision_score_lr_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_lr_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_lr_train= \",precision_score_lr_train)\nprint(\"precision_score_lr_test= \",precision_score_lr_test)","00b2d637":"scores=cross_validate(l_classifier,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","01660e20":"accuracy_score_lr_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_lr_cross= \",accuracy_score_lr_cross)\nprecision_score_lr_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_lr_cross= \",precision_score_lr_cross)        ","91a02723":"knn=KNeighborsClassifier(n_neighbors=5,p=2)","e5534bd5":"knn.fit(train_x,train_y)","507d5d65":"pred_train_y=knn.predict(train_x)\npred_test_y=knn.predict(test_x)\naccuracy_score_knn_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_knn_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_knn_train= \",accuracy_score_knn_train)\nprint(\"accuracy_score_knn_test= \",accuracy_score_knn_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","b485d56a":"precision_score_knn_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_knn_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_knn_train= \",precision_score_knn_train)\nprint(\"precision_score_knn_test= \",precision_score_knn_test)","1f17a59f":"scores=cross_validate(knn,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","6745cd18":"accuracy_score_knn_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_knn_cross= \",accuracy_score_knn_cross)\nprecision_score_knn_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_knn_cross= \",precision_score_knn_cross)","a18d1d22":"svc=SVC(kernel=\"rbf\")","71c870b2":"svc.fit(train_x,train_y)","d48e4128":"pred_train_y=svc.predict(train_x)\npred_test_y=svc.predict(test_x)\naccuracy_score_svc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_svc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\nprint(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)     # not accepted","2ef46ae7":"precision_score_svc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_svc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_svc_train= \",precision_score_svc_train)\nprint(\"precision_score_svc_test= \",precision_score_svc_test)","40cfb97a":"dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=1)","a8384660":"dtc.fit(train_x,train_y)","0013ad7a":"pred_train_y=dtc.predict(train_x)\npred_test_y=dtc.predict(test_x)\naccuracy_score_dtc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_dtc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\nprint(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) #overfitting","86aca9c1":"precision_score_dtc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_dtc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_dtc_train= \",precision_score_dtc_train)\nprint(\"precision_score_dtc_test= \",precision_score_dtc_test)     ","e87a6716":"scores=cross_validate(dtc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","df577f11":"accuracy_score_dtc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\nprecision_score_dtc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_dtc_cross= \",precision_score_dtc_cross)","0a606ece":"rfc=RandomForestClassifier(n_estimators=50,random_state=1)","ae513596":"rfc.fit(train_x,train_y)","8279a684":"pred_train_y=rfc.predict(train_x)\npred_test_y=rfc.predict(test_x)\naccuracy_score_rfc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_rfc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\nprint(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) #overfitting","203d183d":"precision_score_rfc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_rfc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_rfc_train= \",precision_score_rfc_train)\nprint(\"precision_score_rfc_test= \",precision_score_rfc_test)     ","fa507047":"scores=cross_validate(rfc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","5378a33f":"accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\nprecision_score_rfc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_rfc_cross= \",precision_score_rfc_cross)","f7602cd0":"tpotc=TPOTClassifier(generations=20,population_size=50,scoring=[\"accuracy\",\"precision\"],cv=5,\n                    random_state=2,verbosity=2,config_dict=\"TPOT light\",n_jobs=-1)","699f5986":"tpotc.fit(train_x,train_y)","2baa76f9":"pred_train_y=tpotc.predict(train_x)\npred_test_y=tpotc.predict(test_x)\naccuracy_score_tpotc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_tpotc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_tpotc_train= \",accuracy_score_tpotc_train)\nprint(\"accuracy_score_tpotc_test= \",accuracy_score_tpotc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","a22298d3":"precision_score_tpotc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_tpotc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_tpotc_train= \",precision_score_tpotc_train)\nprint(\"precision_score_tpotc_test= \",precision_score_tpotc_test)","f3787f55":"accuracy_score_tpotc_train= 0.9931972789115646\naccuracy_score_tpotc_test=0.9841269841269841\nprecision_score_tpotc_train=0.9932222784708485\nprecision_score_tpotc_test=0.9841349279175272","406f9594":"pred_train_accuracy=np.array([accuracy_score_lr_train,accuracy_score_knn_train,accuracy_score_svc_train\n                     ,accuracy_score_dtc_train,accuracy_score_rfc_train,accuracy_score_tpotc_train])\npred_test_accuracy=[accuracy_score_lr_test,accuracy_score_knn_test,accuracy_score_svc_test\n                     ,accuracy_score_dtc_test,accuracy_score_rfc_test,accuracy_score_tpotc_test]\npred_train_precision=[precision_score_lr_train,precision_score_knn_train,precision_score_svc_train\n                   ,precision_score_dtc_train,precision_score_rfc_train,precision_score_tpotc_train]\npred_test_precision=[precision_score_lr_test,precision_score_knn_test,precision_score_svc_test\n                     ,precision_score_dtc_test,precision_score_rfc_test,precision_score_tpotc_test]","d52d7cfe":"df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\ndf_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])\ndf_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\ndf_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])","f2cab8f4":"df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\ndf_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\ndf_best_model=pd.concat([df_accuracy,df_precision],keys=[\"accuracy\",\"precision\"],axis=1)\ndf_best_model.set_axis([\"logistic_reg\",\"knn\",\"svc\",\"decision_tree_cl\",\"random_forest_cl\",\"tpotclassifier\"],axis=0,inplace=True)\ndf_best_model","52b2915f":"print(\"tpotclassifier(logisticregression)_target2= \",max(df_best_model.accuracy.test))","0b0e0ef8":"target2_pred_values=tpotc.predict(test_x)","57b367f5":"round((target_3.value_counts(normalize=True)),4)  #pump's condition is also good","8873387b":"train_x,test_x,train_y,test_y=train_test_split(x,target_3,test_size=0.2,random_state=1)","66df7d18":"sc=StandardScaler()","747a9292":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","90374831":"l_classifier=LogisticRegression(random_state=42)","f32b401a":"l_classifier.fit(train_x,train_y)","ab878680":"pred_train_y=l_classifier.predict(train_x)\npred_test_y=l_classifier.predict(test_x)\naccuracy_score_lr_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_lr_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_lr_train= \",accuracy_score_lr_train)\nprint(\"accuracy_score_lr_test= \",accuracy_score_lr_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","c395c080":"precision_score_lr_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_lr_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_lr_train= \",precision_score_lr_train)\nprint(\"precision_score_lr_test= \",precision_score_lr_test)","811ccd06":"scores=cross_validate(l_classifier,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","3cee3057":"accuracy_score_lr_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_lr_cross= \",accuracy_score_lr_cross)\nprecision_score_lr_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_lr_cross= \",precision_score_lr_cross)","5430b2ff":"knn=KNeighborsClassifier(n_neighbors=10,p=2)","5b186b55":"knn.fit(train_x,train_y)","d58dcb2b":"pred_train_y=knn.predict(train_x)\npred_test_y=knn.predict(test_x)\naccuracy_score_knn_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_knn_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_knn_train= \",accuracy_score_knn_train)\nprint(\"accuracy_score_knn_test= \",accuracy_score_knn_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","b02e42c3":"precision_score_knn_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_knn_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_knn_train= \",precision_score_knn_train)\nprint(\"precision_score_knn_test= \",precision_score_knn_test)","c700f59d":"scores=cross_validate(knn,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","4ceb64df":"accuracy_score_knn_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_knn_cross= \",accuracy_score_knn_cross)\nprecision_score_knn_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_knn_cross= \",precision_score_knn_cross)","42826fc3":"svc=SVC(kernel=\"rbf\")","2c7703d3":"svc.fit(train_x,train_y)","9d190b22":"pred_train_y=svc.predict(train_x)\npred_test_y=svc.predict(test_x)\naccuracy_score_svc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_svc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\nprint(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","6530418c":"precision_score_svc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_svc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_svc_train= \",precision_score_svc_train)\nprint(\"precision_score_svc_test= \",precision_score_svc_test)","863194d6":"scores=cross_validate(svc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","99f793de":"accuracy_score_svc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_svc_cross= \",accuracy_score_svc_cross)\nprecision_score_svc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_svc_cross= \",precision_score_svc_cross)","68484dec":"nbc=GaussianNB()","59b6d58d":"nbc.fit(train_x,train_y)","8f68bb1f":"pred_train_y=nbc.predict(train_x)\npred_test_y=nbc.predict(test_x)\naccuracy_score_nbc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_nbc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_nbc_train= \",accuracy_score_nbc_train)\nprint(\"accuracy_score_nbc_test= \",accuracy_score_nbc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","7f727c88":"precision_score_nbc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_nbc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_nbc_train= \",precision_score_nbc_train)\nprint(\"precision_score_nbc_test= \",precision_score_nbc_test)     #not accepted","5c71ba60":"pred_train_accuracy=[accuracy_score_lr_train,accuracy_score_knn_train,accuracy_score_svc_train,accuracy_score_nbc_train\n                     ]\npred_test_accuracy=[accuracy_score_lr_test,accuracy_score_knn_test,accuracy_score_svc_test,accuracy_score_nbc_test\n                     ]\npred_train_precision=[precision_score_lr_train,precision_score_knn_train,precision_score_svc_train,\n                     precision_score_nbc_train]\npred_test_precision=[precision_score_lr_test,precision_score_knn_test,precision_score_svc_test,\n                     precision_score_nbc_test]","99a7b648":"df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\ndf_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])","a3cce0e3":"df_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\ndf_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])","8a69245c":"df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\ndf_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\ndf_best_model=pd.concat([df_accuracy,df_precision],keys=[\"accuracy\",\"precision\"],axis=1)\ndf_best_model.set_axis([\"logistic_reg\",\"knn\",\"svc\",\"naive_bayes\"],axis=0,inplace=True)\ndf_best_model","3c86294f":"print(\"logistic_regression_target3= \",0.988918)","ad16c2d5":"target3_pred_values=l_classifier.predict(test_x)","fdb034b4":"round((target_4.value_counts(normalize=True)),4)     #hydraulic accumulator's condition is not good","e551a8d8":"train_x,test_x,train_y,test_y=train_test_split(x,target_4,test_size=0.2,random_state=1)","83973114":"sc=StandardScaler()","b23a8459":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","741ff324":"l_classifier=LogisticRegression(random_state=1)","0886cccf":"l_classifier.fit(train_x,train_y)","afab8b8e":"pred_train_y=l_classifier.predict(train_x)\npred_test_y=l_classifier.predict(test_x)\naccuracy_score_lr_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_lr_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_lr_train= \",accuracy_score_lr_train)\nprint(\"accuracy_score_lr_test= \",accuracy_score_lr_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)       #not accepted","20c92fb9":"precision_score_lr_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_lr_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_lr_train= \",precision_score_lr_train)\nprint(\"precision_score_lr_test= \",precision_score_lr_test)       ","fd04874c":"knn=KNeighborsClassifier(n_neighbors=5,p=2)","8ee10994":"knn.fit(train_x,train_y)","17c4464d":"pred_train_y=knn.predict(train_x)\npred_test_y=knn.predict(test_x)\naccuracy_score_knn_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_knn_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_knn_train= \",accuracy_score_knn_train)\nprint(\"accuracy_score_knn_test= \",accuracy_score_knn_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","9e93cd99":"precision_score_knn_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_knn_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_knn_train= \",precision_score_knn_train)\nprint(\"precision_score_knn_test= \",precision_score_knn_test)","bcb5666a":"scores=cross_validate(knn,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","0ed4522f":"accuracy_score_knn_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_knn_cross= \",accuracy_score_knn_cross)\nprecision_score_knn_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_knn_cross= \",precision_score_knn_cross)","31a8ec3f":"svc=SVC(kernel=\"rbf\")","76b36116":"svc.fit(train_x,train_y)","a9080b80":"pred_train_y=svc.predict(train_x)\npred_test_y=svc.predict(test_x)\naccuracy_score_svc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_svc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\nprint(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)      #not accepted","323e9656":"precision_score_svc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_svc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_svc_train= \",precision_score_svc_train)\nprint(\"precision_score_svc_test= \",precision_score_svc_test)","a076d547":"nbc=GaussianNB()","49016910":"nbc.fit(train_x,train_y)","073b7a3e":"pred_train_y=nbc.predict(train_x)\npred_test_y=nbc.predict(test_x)\naccuracy_score_nbc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_nbc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_nbc_train= \",accuracy_score_nbc_train)\nprint(\"accuracy_score_nbc_test= \",accuracy_score_nbc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)      #not accepted","feeee49c":"precision_score_nbc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_nbc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_nbc_train= \",precision_score_nbc_train)\nprint(\"precision_score_nbc_test= \",precision_score_nbc_test)     ","396a530e":"dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=1)","f35f8e6c":"dtc.fit(train_x,train_y)","e4da3586":"pred_train_y=dtc.predict(train_x)\npred_test_y=dtc.predict(test_x)\naccuracy_score_dtc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_dtc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\nprint(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)    #overfitting","b6a154f7":"precision_score_dtc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_dtc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_dtc_train= \",precision_score_dtc_train)\nprint(\"precision_score_dtc_test= \",precision_score_dtc_test)    ","7e862b16":"scores=cross_validate(dtc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","98405f22":"accuracy_score_dtc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\nprecision_score_dtc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_dtc_cross= \",precision_score_dtc_cross)","9d608237":"rfc=RandomForestClassifier(n_estimators=100,random_state=1)","0caa9d7b":"rfc.fit(train_x,train_y)","ccd20f3a":"pred_train_y=rfc.predict(train_x)\npred_test_y=rfc.predict(test_x)\naccuracy_score_rfc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_rfc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\nprint(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) #overfitting","1c6e564f":"precision_score_rfc_train=precision_score(train_y,pred_train_y,average=\"weighted\")\nprecision_score_rfc_test=precision_score(test_y,pred_test_y,average=\"weighted\")\nprint(\"precision_score_rfc_train= \",precision_score_rfc_train)\nprint(\"precision_score_rfc_test= \",precision_score_rfc_test)     ","50d2ffb7":"scores=cross_validate(rfc,train_x,train_y,scoring=[\"accuracy\",\"precision_weighted\"],cv=10)\nscores","c2766820":"accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\nprecision_score_rfc_cross=scores[\"test_precision_weighted\"].mean()\nprint(\"precision_score_rfc_cross= \",precision_score_rfc_cross)","09a8d13e":"pred_train_accuracy=np.array([accuracy_score_lr_train,accuracy_score_knn_train,accuracy_score_svc_train,accuracy_score_nbc_train\n                     ,accuracy_score_dtc_train,accuracy_score_rfc_train])\npred_test_accuracy=[accuracy_score_lr_test,accuracy_score_knn_test,accuracy_score_svc_test,accuracy_score_nbc_test\n                     ,accuracy_score_dtc_test,accuracy_score_rfc_test]\npred_train_precision=[precision_score_lr_train,precision_score_knn_train,precision_score_svc_train,\n                     precision_score_nbc_train,precision_score_dtc_train,precision_score_rfc_train]\npred_test_precision=[precision_score_lr_test,precision_score_knn_test,precision_score_svc_test,\n                     precision_score_nbc_test,precision_score_dtc_test,precision_score_rfc_test]","ac72b843":"df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\ndf_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])\ndf_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\ndf_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])","9e8a15cf":"df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\ndf_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\ndf_best_model=pd.concat([df_accuracy,df_precision],keys=[\"accuracy\",\"precision\"],axis=1)\ndf_best_model.set_axis([\"logistic_reg\",\"knn\",\"svc\",\"naive_bayes\",\"decision_tree_cl\",\"random_forest_cl\"],axis=0,inplace=True)\ndf_best_model","f5600c02":"print(\"knearestneighbors_target4= \",0.946064)","20d54b53":"target4_pred_values=knn.predict(test_x)","6991a694":"y_ind=y.iloc[:,:-1]\ny_ind.head()","387c0630":"final_target.head(2)","f8f371ae":"final_target.value_counts(normalize=True)","4c1eb710":"train_x,test_x,train_y,test_y=train_test_split(y_ind,final_target,test_size=0.2,random_state=1,stratify=final_target)","7164a4c8":"sc=StandardScaler()","9fb0f816":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","a985de29":"l_classifier=LogisticRegression(random_state=1)","aebab665":"l_classifier.fit(train_x,train_y)","97acd83a":"pred_train_y=l_classifier.predict(train_x)\npred_test_y=l_classifier.predict(test_x)\naccuracy_score_lr_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_lr_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_lr_train= \",accuracy_score_lr_train)\nprint(\"accuracy_score_lr_test= \",accuracy_score_lr_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","7999e92b":"precision_score_lr_train=precision_score(train_y,pred_train_y)\nprecision_score_lr_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_lr_train= \",precision_score_lr_train)\nprint(\"precision_score_lr_test= \",precision_score_lr_test)       ","2127931a":"metrics.roc_auc_score(test_y,l_classifier.predict_proba(test_x)[:,1])","b5849f33":"metrics.plot_roc_curve(l_classifier,test_x,test_y)","9e626402":"scores=cross_validate(l_classifier,train_x,train_y,scoring=[\"accuracy\",\"precision\"],cv=10)\nscores","7314db41":"accuracy_score_lr_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_lr_cross= \",accuracy_score_lr_cross)\nprecision_score_lr_cross=scores[\"test_precision\"].mean()\nprint(\"precision_score_lr_cross= \",precision_score_lr_cross)  ","6e094c0a":"knn=KNeighborsClassifier(n_neighbors=5,p=2)","3575ac9b":"knn.fit(train_x,train_y)","1f22aa83":"pred_train_y=knn.predict(train_x)\npred_test_y=knn.predict(test_x)\naccuracy_score_knn_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_knn_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_knn_train= \",accuracy_score_knn_train)\nprint(\"accuracy_score_knn_test= \",accuracy_score_knn_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","ddd4a639":"precision_score_knn_train=precision_score(train_y,pred_train_y)\nprecision_score_knn_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_knn_train= \",precision_score_knn_train)\nprint(\"precision_score_knn_test= \",precision_score_knn_test)","f43530d1":"scores=cross_validate(knn,train_x,train_y,scoring=[\"accuracy\",\"precision\"],cv=10)\nscores","d98481e9":"accuracy_score_knn_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_knn_cross= \",accuracy_score_knn_cross)\nprecision_score_knn_cross=scores[\"test_precision\"].mean()\nprint(\"precision_score_knn_cross= \",precision_score_knn_cross)","d125ef7b":"svc=SVC(kernel=\"rbf\",probability=True)","2990da8e":"svc.fit(train_x,train_y)","d9f53369":"pred_train_y=svc.predict(train_x)\npred_test_y=svc.predict(test_x)\naccuracy_score_svc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_svc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\nprint(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)","1a042758":"precision_score_svc_train=precision_score(train_y,pred_train_y)\nprecision_score_svc_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_svc_train= \",precision_score_svc_train)\nprint(\"precision_score_svc_test= \",precision_score_svc_test)","517eb8bc":"metrics.roc_auc_score(test_y,svc.predict_proba(test_x)[:,1])","f0316b83":"metrics.plot_roc_curve(svc,test_x,test_y)","6f1bac86":"scores=cross_validate(svc,train_x,train_y,scoring=[\"accuracy\",\"precision\"],cv=10)\nscores","8f885e9c":"accuracy_score_svc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_svc_cross= \",accuracy_score_svc_cross)\nprecision_score_svc_cross=scores[\"test_precision\"].mean()\nprint(\"precision_score_svc_cross= \",precision_score_svc_cross)","5bdd1323":"nbc=GaussianNB()","fd05240e":"nbc.fit(train_x,train_y)","63e79cf0":"pred_train_y=nbc.predict(train_x)\npred_test_y=nbc.predict(test_x)\naccuracy_score_nbc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_nbc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_nbc_train= \",accuracy_score_nbc_train)\nprint(\"accuracy_score_nbc_test= \",accuracy_score_nbc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)    ","a054a364":"precision_score_nbc_train=precision_score(train_y,pred_train_y)\nprecision_score_nbc_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_nbc_train= \",precision_score_nbc_train)\nprint(\"precision_score_nbc_test= \",precision_score_nbc_test)     ","a576cf2b":"dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=1)","efb5b947":"dtc.fit(train_x,train_y)","5c6126ed":"pred_train_y=dtc.predict(train_x)\npred_test_y=dtc.predict(test_x)\naccuracy_score_dtc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_dtc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\nprint(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True)  ","d3b48dfb":"precision_score_dtc_train=precision_score(train_y,pred_train_y)\nprecision_score_dtc_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_dtc_train= \",precision_score_dtc_train)\nprint(\"precision_score_dtc_test= \",precision_score_dtc_test)    ","ace9b4b7":"metrics.roc_auc_score(test_y,dtc.predict_proba(test_x)[:,1])","83557bc1":"metrics.plot_roc_curve(dtc,test_x,test_y)","c78041e0":"scores=cross_validate(dtc,train_x,train_y,scoring=[\"accuracy\",\"precision\"],cv=10)\nscores","25932c0e":"accuracy_score_dtc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\nprecision_score_dtc_cross=scores[\"test_precision\"].mean()\nprint(\"precision_score_dtc_cross= \",precision_score_dtc_cross)","e4fb4c5e":"rfc=RandomForestClassifier(n_estimators=100,random_state=1)","2f63fb8e":"rfc.fit(train_x,train_y)","63adf4de":"pred_train_y=rfc.predict(train_x)\npred_test_y=rfc.predict(test_x)\naccuracy_score_rfc_train=accuracy_score(train_y,pred_train_y)\naccuracy_score_rfc_test=accuracy_score(test_y,pred_test_y)\nprint(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\nprint(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\nprint(\"\\nconfusion_matrix:-\")\nsns.heatmap(confusion_matrix(test_y,pred_test_y),annot=True) #overfitting","062c4ee0":"precision_score_rfc_train=precision_score(train_y,pred_train_y)\nprecision_score_rfc_test=precision_score(test_y,pred_test_y)\nprint(\"precision_score_rfc_train= \",precision_score_rfc_train)\nprint(\"precision_score_rfc_test= \",precision_score_rfc_test)     ","1362f088":"metrics.roc_auc_score(test_y,rfc.predict_proba(test_x)[:,1])","bff4c3b7":"metrics.roc_auc_score(train_y,rfc.predict_proba(train_x)[:,1])","a1c7ebd9":"metrics.plot_roc_curve(rfc,test_x,test_y)","b39c5bcd":"scores=cross_validate(rfc,train_x,train_y,scoring=[\"accuracy\",\"precision\"],cv=10)\nscores","dfffe903":"accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\nprint(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\nprecision_score_rfc_cross=scores[\"test_precision\"].mean()\nprint(\"precision_score_rfc_cross= \",precision_score_rfc_cross)","695bfd40":"print(\"random_forest_classifier_roc_auc_score= \",round(0.9689312628453983,4))","30f684ca":"df_final_data_testing_final_target=pd.DataFrame({\"Cooler_Condition\":target1_pred_values,\"Valve_Condition\":target2_pred_values\n                                                 ,\"Internal_Pump_Leakage\":target3_pred_values,\"Hydraulic_Accumulator\":target4_pred_values})","2fb2c4fe":"df_final_data_testing_final_target.head()","29b3fa6c":"df_final_data_testing_final_target.head()","38a8efcb":"df_final_data_testing_final_target.var()","ad4584c2":"std_final_data_testing_final_target=StandardScaler().fit_transform(df_final_data_testing_final_target)\nstd_final_data_testing_final_target","952f3ddf":"pred_values_per_minute=rfc.predict(std_final_data_testing_final_target)\npred_values_per_minute","7afe7529":"np.sum(pred_values_per_minute==0)\/len(test_x)","0f7bfad2":"np.sum(pred_values_per_minute==1)\/len(test_x)","70f522e0":"df_final.head()","4fb39270":"len(df_final)","f6e0fdc1":"2205\/15","9eea5a9c":"x.head()","ec819cf6":"y.head()","85db7337":"y_15=y.iloc[:,:-1]","2903726c":"y_15=y_15.iloc[14:,:]\ny_15","56bbd9be":"y_15=y_15.set_axis(range(2191),axis=0)\ny_15.head()","69a38a6e":"len(y_15)","07dedf8a":"x_15=x.iloc[:-14,:]\nx_15","2d09ea19":"x_15=x_15.set_axis(range(2191),axis=0)\nx_15.head()","0f44f00b":"df_final_15=pd.concat([x_15,y_15],axis=1)\ndf_final_15.head()","ec6d478e":"len(df_final_15)","25653553":"(((y.iloc[:,-1]).iloc[14:]).set_axis(range(2191),axis=0)).astype(int)","19933d15":"target_15_1=df_final_15.iloc[:,-4]\ntarget_15_2=df_final_15.iloc[:,-3]\ntarget_15_3=df_final_15.iloc[:,-2]\ntarget_15_4=df_final_15.iloc[:,-1]\nfinal_target_15=(((y.iloc[:,-1]).iloc[14:]).set_axis(range(2191),axis=0)).astype(int)","3f64cb7f":"final_target_15","1362be31":"fig=plt.gcf()\nfig.set_size_inches((35,15))\nsns.heatmap(df_final_15.corr(),annot=True)","d52663bb":"# fig.savefig(\"corr_15.png\")","d2b0146a":"class Singleclass_Classification_Models:\n    def __init__(self,train_x,test_x,train_y,test_y):\n        self.train_x=train_x\n        self.test_x=test_x\n        self.train_y=train_y\n        self.test_y=test_y\n    \n    def logistic_regression(self):\n        global accuracy_score_log_reg_train,accuracy_score_log_reg_test,precision_score_log_reg_train,precision_score_log_reg_test,recall_score_log_reg_train,recall_score_log_reg_test\n        log_reg=LogisticRegression(random_state=42)\n        log_reg.fit(self.train_x,self.train_y)\n        pred_train_y=log_reg.predict(self.train_x)\n        pred_test_y=log_reg.predict(self.test_x)\n    \n        # accuracy_score\n        accuracy_score_log_reg_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_log_reg_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_log_reg_train= \",accuracy_score_log_reg_train)\n        print(\"accuracy_score_log_reg_test= \",accuracy_score_log_reg_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_log_reg_train=precision_score(self.train_y,pred_train_y)\n        precision_score_log_reg_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_log_reg_train= \",precision_score_log_reg_train)\n        print(\"precision_score_log_reg_test= \",precision_score_log_reg_test)  \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_log_reg_train=recall_score(self.train_y,pred_train_y)\n        recall_score_log_reg_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_log_reg_train= \",recall_score_log_reg_train)\n        print(\"recall_score_log_reg_test= \",recall_score_log_reg_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(log_reg,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_log_reg_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_log_reg_cross= \",accuracy_score_log_reg_cross)\n        precision_score_log_reg_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_log_reg_cross= \",precision_score_log_reg_cross)\n        recall_score_log_reg_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_log_reg_cross= \",recall_score_log_reg_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n      \n    def knearestneighbors(self):\n        global accuracy_score_kn_neighbors_train,accuracy_score_kn_neighbors_test,precision_score_kn_neighbors_train,precision_score_kn_neighbors_test,recall_score_kn_neighbors_train,recall_score_kn_neighbors_test\n        kn_neighbors=KNeighborsClassifier(n_neighbors=7,p=2)\n        kn_neighbors.fit(self.train_x,self.train_y)\n        pred_train_y=kn_neighbors.predict(self.train_x)\n        pred_test_y=kn_neighbors.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_kn_neighbors_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_kn_neighbors_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_kn_neighbors_train= \",accuracy_score_kn_neighbors_train)\n        print(\"accuracy_score_kn_neighbors_test= \",accuracy_score_kn_neighbors_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_kn_neighbors_train=precision_score(self.train_y,pred_train_y)\n        precision_score_kn_neighbors_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_kn_neighbors_train= \",precision_score_kn_neighbors_train)\n        print(\"precision_score_kn_neighbors_test= \",precision_score_kn_neighbors_test) \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_kn_neighbors_train=recall_score(self.train_y,pred_train_y)\n        recall_score_kn_neighbors_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_kn_neighbors_train= \",recall_score_kn_neighbors_train)\n        print(\"recall_score_kn_neighbors_test= \",recall_score_kn_neighbors_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(kn_neighbors,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_kn_neighbors_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_kn_neighbors_cross= \",accuracy_score_kn_neighbors_cross)\n        precision_score_kn_neighbors_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_kn_neighbors_cross= \",precision_score_kn_neighbors_cross)\n        recall_score_kn_neighbors_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_kn_neighbors_cross= \",recall_score_kn_neighbors_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n        \n    def Svc(self):\n        global accuracy_score_svc_train,accuracy_score_svc_test,precision_score_svc_train,precision_score_svc_test,recall_score_svc_train,recall_score_svc_test\n        svc=SVC(kernel=\"rbf\")\n        svc.fit(self.train_x,self.train_y)\n        pred_train_y=svc.predict(self.train_x)\n        pred_test_y=svc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_svc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_svc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\n        print(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_svc_train=precision_score(self.train_y,pred_train_y)\n        precision_score_svc_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_svc_train= \",precision_score_svc_train)\n        print(\"precision_score_svc_test= \",precision_score_svc_test) \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_svc_train=recall_score(self.train_y,pred_train_y)\n        recall_score_svc_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_svc_train= \",recall_score_svc_train)\n        print(\"recall_score_svc_test= \",recall_score_svc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(svc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_svc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_svc_cross= \",accuracy_score_svc_cross)\n        precision_score_svc_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_svc_cross= \",precision_score_svc_cross)\n        recall_score_svc_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_svc_cross= \",recall_score_svc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n        \n    def naive_bayes(self):\n        global accuracy_score_nbc_train,accuracy_score_nbc_test,precision_score_nbc_train,precision_score_nbc_test,recall_score_nbc_train,recall_score_nbc_test\n        nbc=GaussianNB()\n        nbc.fit(train_x,train_y)\n        pred_train_y=nbc.predict(self.train_x)\n        pred_test_y=nbc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_nbc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_nbc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_nbc_train= \",accuracy_score_nbc_train)\n        print(\"accuracy_score_nbc_test= \",accuracy_score_nbc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_nbc_train=precision_score(self.train_y,pred_train_y)\n        precision_score_nbc_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_nbc_train= \",precision_score_nbc_train)\n        print(\"precision_score_nbc_test= \",precision_score_nbc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_nbc_train=recall_score(self.train_y,pred_train_y)\n        recall_score_nbc_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_nbc_train= \",recall_score_nbc_train)\n        print(\"recall_score_nbc_test= \",recall_score_nbc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(nbc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_nbc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_nbc_cross= \",accuracy_score_nbc_cross)\n        precision_score_nbc_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_nbc_cross= \",precision_score_nbc_cross)\n        recall_score_nbc_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_nbc_cross= \",recall_score_nbc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)   \n        print(\"\\n\")\n        \n    def decision_tree(self):\n        global accuracy_score_dtc_train,accuracy_score_dtc_test,precision_score_dtc_train,precision_score_dtc_test,recall_score_dtc_train,recall_score_dtc_test\n        dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=42)\n        dtc.fit(train_x,train_y)\n        pred_train_y=dtc.predict(self.train_x)\n        pred_test_y=dtc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_dtc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_dtc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\n        print(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_dtc_train=precision_score(self.train_y,pred_train_y)\n        precision_score_dtc_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_dtc_train= \",precision_score_dtc_train)\n        print(\"precision_score_dtc_test= \",precision_score_dtc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_dtc_train=recall_score(self.train_y,pred_train_y)\n        recall_score_dtc_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_dtc_train= \",recall_score_dtc_train)\n        print(\"recall_score_dtc_test= \",recall_score_dtc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(dtc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_nbc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\n        precision_score_dtc_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_dtc_cross= \",precision_score_dtc_cross)\n        recall_score_dtc_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_dtc_cross= \",recall_score_dtc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)      \n        print(\"\\n\")\n        \n    def random_forest(self):\n        global accuracy_score_rfc_train,accuracy_score_rfc_test,precision_score_rfc_train,precision_score_rfc_test,recall_score_rfc_train,recall_score_rfc_test\n        rfc=RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)\n        rfc.fit(train_x,train_y)\n        pred_train_y=rfc.predict(self.train_x)\n        pred_test_y=rfc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_rfc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_rfc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\n        print(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_rfc_train=precision_score(self.train_y,pred_train_y)\n        precision_score_rfc_test=precision_score(self.test_y,pred_test_y)\n        print(\"precision_score_rfc_train= \",precision_score_rfc_train)\n        print(\"precision_score_rfc_test= \",precision_score_rfc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_rfc_train=recall_score(self.train_y,pred_train_y)\n        recall_score_rfc_test=recall_score(self.test_y,pred_test_y)\n        print(\"recall_score_rfc_train= \",recall_score_rfc_train)\n        print(\"recall_score_rfc_test= \",recall_score_rfc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(rfc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision\",\"recall\"],cv=10)\n        accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\n        precision_score_rfc_cross=scores[\"test_precision\"].mean()\n        print(\"precision_score_rfc_cross= \",precision_score_rfc_cross)\n        recall_score_rfc_cross=scores[\"test_recall\"].mean()\n        print(\"recall_score_rfc_cross= \",recall_score_rfc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n    \n    def best_model(self):\n        pred_train_accuracy=[accuracy_score_log_reg_train,accuracy_score_kn_neighbors_train,accuracy_score_svc_train\n                     ,accuracy_score_nbc_train,accuracy_score_dtc_train,accuracy_score_rfc_train]\n        pred_test_accuracy=[accuracy_score_log_reg_test,accuracy_score_kn_neighbors_test,accuracy_score_svc_test\n                             ,accuracy_score_nbc_test,accuracy_score_dtc_test,accuracy_score_rfc_test]\n        pred_train_precision=[precision_score_log_reg_train,precision_score_kn_neighbors_train,precision_score_svc_train\n                            ,precision_score_nbc_train,precision_score_dtc_train,precision_score_rfc_train]\n        pred_test_precision=[precision_score_log_reg_test,precision_score_kn_neighbors_test,precision_score_svc_test\n                             ,precision_score_nbc_test,precision_score_dtc_test,precision_score_rfc_test]\n        pred_train_recall=[recall_score_log_reg_train,recall_score_kn_neighbors_train,recall_score_svc_train,recall_score_nbc_train\n                          ,recall_score_dtc_train,recall_score_rfc_train]\n        pred_test_recall=[recall_score_log_reg_test,recall_score_kn_neighbors_test,recall_score_svc_test,recall_score_nbc_test\n                         ,recall_score_dtc_test,recall_score_rfc_test]\n\n        df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\n        df_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])\n        \n        df_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\n        df_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])\n        \n        df_train_recall=pd.DataFrame(pred_train_recall,columns=[\"train\"])\n        df_test_recall=pd.DataFrame(pred_test_recall,columns=[\"test\"])\n        \n        df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\n        df_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\n        df_recall=pd.concat([df_train_recall,df_test_recall],axis=1)\n        df_best_model=pd.concat([df_accuracy,df_precision,df_recall],keys=[\"accuracy\",\"precision\",\"recall\"],axis=1)\n        df_best_model.set_axis([\"logistic_reg_cl\",\"knn_cl\",\"sv_cl\",\"naive-bayes_cl\",\"decision_tree_cl\",\"random_forest_cl\"],axis=0,inplace=True)\n        return df_best_model","da8954e4":"class Multiclass_Classification_Models:\n    def __init__(self,train_x,test_x,train_y,test_y):\n        self.train_x=train_x\n        self.test_x=test_x\n        self.train_y=train_y\n        self.test_y=test_y\n    \n    def logistic_regression(self):\n        global accuracy_score_log_reg_train,accuracy_score_log_reg_test,precision_score_log_reg_train,precision_score_log_reg_test,recall_score_log_reg_train,recall_score_log_reg_test\n        log_reg=LogisticRegression(random_state=42)\n        log_reg.fit(self.train_x,self.train_y)\n        pred_train_y=log_reg.predict(self.train_x)\n        pred_test_y=log_reg.predict(self.test_x)\n    \n        # accuracy_score\n        accuracy_score_log_reg_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_log_reg_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_log_reg_train= \",accuracy_score_log_reg_train)\n        print(\"accuracy_score_log_reg_test= \",accuracy_score_log_reg_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_log_reg_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_log_reg_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_log_reg_train= \",precision_score_log_reg_train)\n        print(\"precision_score_log_reg_test= \",precision_score_log_reg_test)  \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_log_reg_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_log_reg_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_log_reg_train= \",recall_score_log_reg_train)\n        print(\"recall_score_log_reg_test= \",recall_score_log_reg_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(log_reg,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_log_reg_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_log_reg_cross= \",accuracy_score_log_reg_cross)\n        precision_score_log_reg_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_log_reg_cross= \",precision_score_log_reg_cross)\n        recall_score_log_reg_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_log_reg_cross= \",recall_score_log_reg_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n      \n    def knearestneighbors(self):\n        global accuracy_score_kn_neighbors_train,accuracy_score_kn_neighbors_test,precision_score_kn_neighbors_train,precision_score_kn_neighbors_test,recall_score_kn_neighbors_train,recall_score_kn_neighbors_test\n        kn_neighbors=KNeighborsClassifier(n_neighbors=7,p=2)\n        kn_neighbors.fit(self.train_x,self.train_y)\n        pred_train_y=kn_neighbors.predict(self.train_x)\n        pred_test_y=kn_neighbors.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_kn_neighbors_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_kn_neighbors_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_kn_neighbors_train= \",accuracy_score_kn_neighbors_train)\n        print(\"accuracy_score_kn_neighbors_test= \",accuracy_score_kn_neighbors_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_kn_neighbors_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_kn_neighbors_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_kn_neighbors_train= \",precision_score_kn_neighbors_train)\n        print(\"precision_score_kn_neighbors_test= \",precision_score_kn_neighbors_test) \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_kn_neighbors_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_kn_neighbors_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_kn_neighbors_train= \",recall_score_kn_neighbors_train)\n        print(\"recall_score_kn_neighbors_test= \",recall_score_kn_neighbors_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(kn_neighbors,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_kn_neighbors_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_kn_neighbors_cross= \",accuracy_score_kn_neighbors_cross)\n        precision_score_kn_neighbors_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_kn_neighbors_cross= \",precision_score_kn_neighbors_cross)\n        recall_score_kn_neighbors_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_kn_neighbors_cross= \",recall_score_kn_neighbors_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n        \n    def Svc(self):\n        global accuracy_score_svc_train,accuracy_score_svc_test,precision_score_svc_train,precision_score_svc_test,recall_score_svc_train,recall_score_svc_test\n        svc=SVC(kernel=\"rbf\")\n        svc.fit(self.train_x,self.train_y)\n        pred_train_y=svc.predict(self.train_x)\n        pred_test_y=svc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_svc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_svc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_svc_train= \",accuracy_score_svc_train)\n        print(\"accuracy_score_svc_test= \",accuracy_score_svc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_svc_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_svc_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_svc_train= \",precision_score_svc_train)\n        print(\"precision_score_svc_test= \",precision_score_svc_test) \n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_svc_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_svc_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_svc_train= \",recall_score_svc_train)\n        print(\"recall_score_svc_test= \",recall_score_svc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(svc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_svc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_svc_cross= \",accuracy_score_svc_cross)\n        precision_score_svc_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_svc_cross= \",precision_score_svc_cross)\n        recall_score_svc_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_svc_cross= \",recall_score_svc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n        \n    def naive_bayes(self):\n        global accuracy_score_nbc_train,accuracy_score_nbc_test,precision_score_nbc_train,precision_score_nbc_test,recall_score_nbc_train,recall_score_nbc_test\n        nbc=GaussianNB()\n        nbc.fit(train_x,train_y)\n        pred_train_y=nbc.predict(self.train_x)\n        pred_test_y=nbc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_nbc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_nbc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_nbc_train= \",accuracy_score_nbc_train)\n        print(\"accuracy_score_nbc_test= \",accuracy_score_nbc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_nbc_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_nbc_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_nbc_train= \",precision_score_nbc_train)\n        print(\"precision_score_nbc_test= \",precision_score_nbc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_nbc_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_nbc_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_nbc_train= \",recall_score_nbc_train)\n        print(\"recall_score_nbc_test= \",recall_score_nbc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(nbc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_nbc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_nbc_cross= \",accuracy_score_nbc_cross)\n        precision_score_nbc_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_nbc_cross= \",precision_score_nbc_cross)\n        recall_score_nbc_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_nbc_cross= \",recall_score_nbc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)   \n        print(\"\\n\")\n        \n    def decision_tree(self):\n        global accuracy_score_dtc_train,accuracy_score_dtc_test,precision_score_dtc_train,precision_score_dtc_test,recall_score_dtc_train,recall_score_dtc_test\n        dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=42)\n        dtc.fit(train_x,train_y)\n        pred_train_y=dtc.predict(self.train_x)\n        pred_test_y=dtc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_dtc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_dtc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_dtc_train= \",accuracy_score_dtc_train)\n        print(\"accuracy_score_dtc_test= \",accuracy_score_dtc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_dtc_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_dtc_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_dtc_train= \",precision_score_dtc_train)\n        print(\"precision_score_dtc_test= \",precision_score_dtc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_dtc_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_dtc_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_dtc_train= \",recall_score_dtc_train)\n        print(\"recall_score_dtc_test= \",recall_score_dtc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(dtc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_nbc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_dtc_cross= \",accuracy_score_dtc_cross)\n        precision_score_dtc_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_dtc_cross= \",precision_score_dtc_cross)\n        recall_score_dtc_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_dtc_cross= \",recall_score_dtc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)      \n        print(\"\\n\")\n        \n    def random_forest(self):\n        global accuracy_score_rfc_train,accuracy_score_rfc_test,precision_score_rfc_train,precision_score_rfc_test,recall_score_rfc_train,recall_score_rfc_test\n        rfc=RandomForestClassifier(n_estimators=100,random_state=42,n_jobs=-1)\n        rfc.fit(train_x,train_y)\n        pred_train_y=rfc.predict(self.train_x)\n        pred_test_y=rfc.predict(self.test_x)\n        \n        # accuracy_score\n        accuracy_score_rfc_train=accuracy_score(self.train_y,pred_train_y)\n        accuracy_score_rfc_test=accuracy_score(self.test_y,pred_test_y)\n        print(\"accuracy_score_rfc_train= \",accuracy_score_rfc_train)\n        print(\"accuracy_score_rfc_test= \",accuracy_score_rfc_test)\n        print(\"\\n\")\n        \n        # precision-score\n        precision_score_rfc_train=precision_score(self.train_y,pred_train_y,average=\"weighted\")\n        precision_score_rfc_test=precision_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"precision_score_rfc_train= \",precision_score_rfc_train)\n        print(\"precision_score_rfc_test= \",precision_score_rfc_test)\n        print(\"\\n\")\n        \n        # recall-score\n        recall_score_rfc_train=recall_score(self.train_y,pred_train_y,average=\"weighted\")\n        recall_score_rfc_test=recall_score(self.test_y,pred_test_y,average=\"weighted\")\n        print(\"recall_score_rfc_train= \",recall_score_rfc_train)\n        print(\"recall_score_rfc_test= \",recall_score_rfc_test)\n        print(\"\\n\")\n        \n        # cross-validate\n        scores=cross_validate(rfc,self.train_x,self.train_y,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=10)\n        accuracy_score_rfc_cross=scores[\"test_accuracy\"].mean()\n        print(\"accuracy_score_rfc_cross= \",accuracy_score_rfc_cross)\n        precision_score_rfc_cross=scores[\"test_precision_weighted\"].mean()\n        print(\"precision_score_rfc_cross= \",precision_score_rfc_cross)\n        recall_score_rfc_cross=scores[\"test_recall_weighted\"].mean()\n        print(\"recall_score_rfc_cross= \",recall_score_rfc_cross)\n        \n        # confusion_matrix\n        print(\"\\nconfusion_matrix:-\")\n        sns.heatmap(confusion_matrix(self.test_y,pred_test_y),annot=True)\n        print(\"\\n\")\n    \n    def best_model(self):\n        pred_train_accuracy=[accuracy_score_log_reg_train,accuracy_score_kn_neighbors_train,accuracy_score_svc_train\n                     ,accuracy_score_nbc_train,accuracy_score_dtc_train,accuracy_score_rfc_train]\n        pred_test_accuracy=[accuracy_score_log_reg_test,accuracy_score_kn_neighbors_test,accuracy_score_svc_test\n                             ,accuracy_score_nbc_test,accuracy_score_dtc_test,accuracy_score_rfc_test]\n        pred_train_precision=[precision_score_log_reg_train,precision_score_kn_neighbors_train,precision_score_svc_train\n                            ,precision_score_nbc_train,precision_score_dtc_train,precision_score_rfc_train]\n        pred_test_precision=[precision_score_log_reg_test,precision_score_kn_neighbors_test,precision_score_svc_test\n                             ,precision_score_nbc_test,precision_score_dtc_test,precision_score_rfc_test]\n        pred_train_recall=[recall_score_log_reg_train,recall_score_kn_neighbors_train,recall_score_svc_train,recall_score_nbc_train\n                          ,recall_score_dtc_train,recall_score_rfc_train]\n        pred_test_recall=[recall_score_log_reg_test,recall_score_kn_neighbors_test,recall_score_svc_test,recall_score_nbc_test\n                         ,recall_score_dtc_test,recall_score_rfc_test]\n\n        df_train_accuracy=pd.DataFrame(pred_train_accuracy,columns=[\"train\"])\n        df_test_accuracy=pd.DataFrame(pred_test_accuracy,columns=[\"test\"])\n        \n        df_train_precision=pd.DataFrame(pred_train_precision,columns=[\"train\"])\n        df_test_precision=pd.DataFrame(pred_test_precision,columns=[\"test\"])\n        \n        df_train_recall=pd.DataFrame(pred_train_recall,columns=[\"train\"])\n        df_test_recall=pd.DataFrame(pred_test_recall,columns=[\"test\"])\n        \n        df_accuracy=pd.concat([df_train_accuracy,df_test_accuracy],axis=1)\n        df_precision=pd.concat([df_train_precision,df_test_precision],axis=1)\n        df_recall=pd.concat([df_train_recall,df_test_recall],axis=1)\n        df_best_model=pd.concat([df_accuracy,df_precision,df_recall],keys=[\"accuracy\",\"precision\",\"recall\"],axis=1)\n        df_best_model.set_axis([\"logistic_reg_cl\",\"knn_cl\",\"sv_cl\",\"naive-bayes_cl\",\"decision_tree_cl\",\"random_forest_cl\"],axis=0,inplace=True)\n        return df_best_model","6430599e":"round((target_15_1.value_counts(normalize=True)),4)","f3aaea4f":"train_x,test_x,train_y,test_y=train_test_split(x_15,target_15_1,test_size=0.2,random_state=1)","b4379f0f":"sc=StandardScaler()","f04ff6d5":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","c37d062e":"all_models1=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","bb2153be":"all_models1.logistic_regression()","1233d593":"all_models1.knearestneighbors()","4dc0e92c":"all_models1.Svc()","9be3643f":"all_models1.naive_bayes()","89d081af":"all_models1.decision_tree()    #overfitting","14b0bd09":"all_models1.random_forest()    #overfitting","803c104c":"all_models1.best_model()","2ff47da6":"print(\"logistic_regression= \",round(0.986471,4))","7ffd09d2":"l_classifier=LogisticRegression(random_state=42)\nl_classifier.fit(train_x,train_y)\npred_test_y=l_classifier.predict(test_x)","9284aabe":"target1_15_pred_values=pred_test_y","64e60a4a":"round((target_15_2.value_counts(normalize=True)),4)","88e89c61":"train_x,test_x,train_y,test_y=train_test_split(x_15,target_15_2,test_size=0.2,random_state=1)","8e634eea":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","00617024":"all_models2=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","ae1c1a7a":"all_models2.logistic_regression()    # not accepted","5a3f463b":"all_models2.knearestneighbors()         #not accepted","7ca43b4d":"all_models2.Svc()      #not accepted","5f49a9d6":"all_models2.naive_bayes()     #not accepted","e2824841":"all_models2.decision_tree()     ","a5557729":"all_models2.random_forest()      ","05b71766":"all_models2.best_model()","fbf8cc46":"print(\"random_forest_classifier= \",round(0.787609,4))","e0ffaf70":"rfc=RandomForestClassifier(n_estimators=100,random_state=42)\nrfc.fit(train_x,train_y)\npred_test_y=rfc.predict(test_x)","97dff363":"target2_15_pred_values=pred_test_y","79d26dc0":"target_15_3=target_15_3.astype(int)\ntarget_15_3","3a90178f":"round((target_15_3.value_counts(normalize=True)),4)","21e3e67d":"train_x,test_x,train_y,test_y=train_test_split(x_15,target_15_3,test_size=0.2,random_state=1)","d9776bfc":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","15b37778":"all_models3=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","b447c3d3":"all_models3.logistic_regression()","47efa8f9":"all_models3.knearestneighbors()","b66eb190":"all_models3.Svc()       ","4caea505":"all_models3.naive_bayes()","6eb6dc7e":"all_models3.decision_tree()","caabf962":"all_models3.random_forest()","086ded3d":"all_models3.best_model()","185e05c9":"print(\"knn= \",round(0.846353,4))","1d58d6b3":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","731e1230":"pred_test_y=knn.predict(test_x)","68830a64":"target3_15_pred_values=pred_test_y","17224095":"round((target_15_4.value_counts(normalize=True)),4)","5f617de7":"train_x,test_x,train_y,test_y=train_test_split(x_15,target_15_4,test_size=0.2,random_state=1)","6f16a06e":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","0ab373de":"all_models4=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","50859559":"all_models4.logistic_regression()","dcf59360":"all_models4.knearestneighbors()","10f06693":"all_models4.Svc()","5f458957":"all_models4.naive_bayes()          #not accepted","15f496a0":"all_models4.decision_tree()","273f59de":"all_models4.random_forest()","07d84601":"all_models4.best_model()","5e71486f":"print(\"knn= \",round(0.927738,4))","ced0f3cf":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","56308822":"pred_test_y=knn.predict(test_x)","42a2845a":"target4_15_pred_values=pred_test_y","c8edc6bc":"final_target_15.value_counts(normalize=True)","86200049":"y_15_ind=y_15\ny_15_ind","6e9717fe":"train_x,test_x,train_y,test_y=train_test_split(y_15_ind,final_target_15,test_size=0.2,random_state=1,stratify=final_target_15)","ebb08633":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","263aeba8":"all_models5=Singleclass_Classification_Models(train_x,test_x,train_y,test_y)","46600e8e":"all_models5.logistic_regression()","2a4cb598":"l_classifier=LogisticRegression(random_state=1)\nl_classifier.fit(train_x,train_y)","a628b837":"metrics.roc_auc_score(test_y,l_classifier.predict_proba(test_x)[:,1])","0c2f403a":"metrics.plot_roc_curve(l_classifier,test_x,test_y)","72ce70c7":"all_models5.knearestneighbors()","8fad01b9":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","75549e5c":"metrics.roc_auc_score(test_y,knn.predict_proba(test_x)[:,1])","98518af0":"metrics.plot_roc_curve(knn,test_x,test_y)","d599d96f":"all_models5.Svc()      ","6f174433":"svc=SVC(kernel=\"linear\",probability=True)\nsvc.fit(train_x,train_y)","1d935755":"metrics.roc_auc_score(test_y,svc.predict_proba(test_x)[:,1])","373839a5":"metrics.plot_roc_curve(svc,test_x,test_y)","93ebf009":"all_models5.naive_bayes()","59c3613c":"all_models5.decision_tree()","f6d3b857":"all_models5.random_forest()","6b44332a":"all_models5.best_model()","6f622bb3":"print(\"knearestneighbors_cl= \",round(0.903448,4))","ca4a5cfe":"df_final_data_testing_final_target15=pd.DataFrame({\"Cooler_Condition\":target1_15_pred_values,\"Valve_Condition\":target2_15_pred_values\n                                                 ,\"Internal_Pump_Leakage\":target3_15_pred_values,\"Hydraulic_Accumulator\":target4_15_pred_values})","b832a751":"df_final_data_testing_final_target15.head()","ebc9337a":"df_final_data_testing_final_target15.var()","dba3d445":"std_final_data_testing_final_target15=StandardScaler().fit_transform(df_final_data_testing_final_target15)\nstd_final_data_testing_final_target15","1f034f03":"pred_values_before15_minutes=knn.predict(std_final_data_testing_final_target15)\npred_values_before15_minutes","fd806aa0":"(np.sum(pred_values_before15_minutes==0))\/len(pred_values_before15_minutes)","58419d06":"(np.sum(pred_values_before15_minutes==1))\/len(pred_values_before15_minutes)","e4dbdbfc":"y_30=y.iloc[29:,:]\ny_30","dd8b26e3":"y_30.set_axis(range(2176),axis=0,inplace=True)\ny_30.head()","bb3c5fe7":"target_30_1=y_30.iloc[:,-5]\ntarget_30_2=y_30.iloc[:,-4]\ntarget_30_3=y_30.iloc[:,-3]\ntarget_30_4=y_30.iloc[:,-2]\nfinal_target_30=(y_30.iloc[:,-1]).astype(int)","dc72936f":"x_30=x.iloc[:-29,:]\nx_30","fec2692f":"df_final_30=pd.concat([x_30,y_30.iloc[:,:-1]],axis=1)\ndf_final_30","e10e2f51":"fig=plt.gcf()\nfig.set_size_inches((35,15))\nsns.heatmap(df_final_30.corr(),annot=True)","41a9ec65":"# fig.savefig(\"corr_30.png\")","d4e19ed1":"target_30_1.value_counts(normalize=True)","4fd066a8":"train_x,test_x,train_y,test_y=train_test_split(x_30,target_30_1,test_size=0.2,random_state=1)","1afed0b0":"sc=StandardScaler()","e5d82a3c":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","2ecbd390":"all_models30_1=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","ebea4487":"all_models30_1.logistic_regression()","06d663f7":"all_models30_1.knearestneighbors()","90075011":"all_models30_1.Svc()","c7436455":"all_models30_1.naive_bayes()","8232b71c":"all_models30_1.decision_tree()    #overfitting","f52285a8":"all_models30_1.random_forest()     #overfitting","933402c2":"all_models30_1.best_model()","7c7e341c":"print(\"knearestneighbors_cl= \",round(0.986385,4))","ba881dcb":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","a2046a50":"precision_score(test_y,knn.predict(test_x),average=\"weighted\")","8ba535fe":"target1_30_pred_values=knn.predict(test_x)","ccba507c":"target_30_2.value_counts(normalize=True)","f9eabc30":"train_x,test_x,train_y,test_y=train_test_split(x_30,target_30_2,test_size=0.2,random_state=1)","4259708c":"sc=StandardScaler()","c0e5d50b":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","496212e6":"all_models30_2=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","2b468ac3":"all_models30_2.logistic_regression()","b29623f9":"all_models30_2.knearestneighbors()","f095749a":"all_models30_2.Svc()      # not accepted","74e4c548":"all_models30_2.naive_bayes()      #not accepted","669152ce":"all_models30_2.decision_tree()","1c5a6ad6":"all_models30_2.random_forest()","88d002bc":"tpotc=TPOTClassifier(generations=5,population_size=50,scoring=[\"accuracy\",\"precision_weighted\",\"recall_weighted\"],cv=5,verbosity=2\n                     ,n_jobs=-1,random_state=1,config_dict=\"TPOT light\")","3996524f":"tpotc.fit(train_x,train_y)","5ed0e2ba":"tpotc.fitted_pipeline_","e0f34e01":"accuracy_score(test_y,tpotc.predict(test_x))","cc8524f7":"precision_score(test_y,tpotc.predict(test_x),average=\"weighted\")","8978336b":"recall_score(test_y,tpotc.predict(test_x),average=\"weighted\")","fd185140":"f1_score(test_y,tpotc.predict(test_x),average=\"weighted\")","e04b9c52":"all_models30_2.best_model()","b0eaad49":"print(\"kneighborsclassifier (tpotclassifier)= \",round(0.8226260716568949,4))","5ef8763e":"target2_30_pred_values=tpotc.predict(test_x)","fd6fb594":"round(target_30_3.value_counts(normalize=True),4)","df9554ef":"train_x,test_x,train_y,test_y=train_test_split(x_30,target_30_3,test_size=0.2,random_state=1)","8c351e4c":"sc=StandardScaler()","a041d99c":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","7b68e08e":"all_models30_3=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","c004c82b":"all_models30_3.logistic_regression()","c32e80fd":"all_models30_3.knearestneighbors()","09a7c445":"all_models30_3.Svc()     # not accepted","59c36a9b":"all_models30_3.naive_bayes()    #not accepted","c5536d67":"all_models30_3.decision_tree()","7fa0eec9":"all_models30_3.random_forest()    #overfitting","74ec00ac":"all_models30_3.best_model()","e75ef411":"print(\"knearestneighbors_cl= \",round(0.918220,4))","7d4d3125":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","9c0bfcd4":"pred_test_y=knn.predict(test_x)","41f0c852":"target3_30_pred_values=pred_test_y","e17f6a16":"target_30_4.value_counts(normalize=True)","a67a46f9":"train_x,test_x,train_y,test_y=train_test_split(x_30,target_30_4,test_size=0.2,random_state=1)","50bcdf44":"sc=StandardScaler()","f20f5d88":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","c9790867":"all_models30_4=Multiclass_Classification_Models(train_x,test_x,train_y,test_y)","b1d50c98":"all_models30_4.logistic_regression()","b300158e":"all_models30_4.knearestneighbors()","5d8ac260":"all_models30_4.Svc()","3b9cae87":"all_models30_4.naive_bayes()      #not accepted","bd22ceb7":"all_models30_4.decision_tree()     #overfitting","2b176607":"all_models30_4.random_forest()","cfb89e9d":"all_models30_4.best_model()","5be81bbf":"print(\"knearestneighbors_cl= \",round(0.929583,4))","af895a00":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","67dd4300":"target4_30_pred_values=knn.predict(test_x)","1d87b043":"final_target_30.value_counts(normalize=True)","4be1d59e":"train_x,test_x,train_y,test_y=train_test_split(y_30.iloc[:,:-1],final_target_30,test_size=0.2,random_state=1,stratify=final_target_30)","573eb7e8":"sc=StandardScaler()","2c118813":"train_x=sc.fit_transform(train_x)\ntest_x=sc.transform(test_x)","f78b1078":"all_models30_5=Singleclass_Classification_Models(train_x,test_x,train_y,test_y)","f5aab570":"all_models30_5.logistic_regression()","b62a54b2":"l_classifier=LogisticRegression(random_state=1)\nl_classifier.fit(train_x,train_y)","58016dd5":"metrics.roc_auc_score(test_y,l_classifier.predict_proba(test_x)[:,1])","be952437":"metrics.plot_roc_curve(l_classifier,test_x,test_y)","18467686":"all_models30_5.knearestneighbors()","ac45fa1b":"knn=KNeighborsClassifier(n_neighbors=7,p=2)\nknn.fit(train_x,train_y)","876facfa":"metrics.roc_auc_score(test_y,knn.predict_proba(test_x)[:,1])","1c901e90":"metrics.plot_roc_curve(knn,test_x,test_y)","1720a2d1":"all_models30_5.Svc()","51ed007a":"svc=SVC(kernel=\"rbf\",probability=True)\nsvc.fit(train_x,train_y)","3344f1e7":"metrics.roc_auc_score(test_y,svc.predict_proba(test_x)[:,1])","2e726ddc":"metrics.plot_roc_curve(svc,test_x,test_y)","fa5cab26":"all_models30_5.naive_bayes()","d6da9f7c":"all_models30_5.decision_tree()  ","74e5e676":"dtc=DecisionTreeClassifier(criterion=\"entropy\",random_state=42)\ndtc.fit(train_x,train_y)","ad932fb3":"metrics.roc_auc_score(test_y,dtc.predict_proba(test_x)[:,1])","2905c406":"metrics.plot_roc_curve(dtc,test_x,test_y)","693b1710":"all_models30_5.random_forest()   ","d0f1deee":"rfc=RandomForestClassifier(n_estimators=100,random_state=1)\nrfc.fit(train_x,train_y)","73272a71":"metrics.roc_auc_score(test_y,rfc.predict_proba(test_x)[:,1])","51d6fa0b":"metrics.plot_roc_curve(rfc,test_x,test_y)","8c2f1c36":"all_models30_5.best_model()","3d9fbb35":"print(\"knearestneighbors_cl= \",round(0.921429,4))","2b0d9c40":"df_final_data_testing_final_target30=pd.DataFrame({\"Cooler_Condition\":target1_30_pred_values,\"Valve_Condition\":target2_30_pred_values\n                                                 ,\"Internal_Pump_Leakage\":target3_30_pred_values,\"Hydraulic_Accumulator\":target4_30_pred_values})","56dfeffb":"df_final_data_testing_final_target30.head()","a394cc09":"df_final_data_testing_final_target30.var()","c8dc4a0d":"std_final_data_testing_final_target30=StandardScaler().fit_transform(df_final_data_testing_final_target30)\nstd_final_data_testing_final_target30","2d8d6ec9":"pred_values_before30_minutes=knn.predict(std_final_data_testing_final_target30)\npred_values_before30_minutes","70ca038c":"(np.sum(pred_values_before30_minutes==0))\/len(pred_values_before30_minutes)","51baf344":"(np.sum(pred_values_before30_minutes==1))\/len(pred_values_before30_minutes)","d53c47f0":"## data splitting  target-4","aeebebfd":"# Models (classification)    target-1","c8207e88":"### target incidence","9aa1e103":"## best model ","48e09134":"## best model","717aa6c5":"## 3- SVC","618e8777":"## 4- naive-bayes","ca698923":"## data splitting    target-1","2ed4e5dc":"## best model","7788e280":"## feature scaling target-2","52993ae7":"## data splitting target-2","7d712aa1":"# 2- Data Analysis","251cc83e":"# Final data for testing with final-target30","424838a2":"### cross-validate","dfc149b7":"## 2- knn","2d3d1cc4":"## 3- SVC","f6fcad50":"## best model","a12c2ca6":"## 2- knn","91258e6a":"## data splitting  target-1","a243f4e3":"### cross-validate","b1417f9e":"### cross-validate","daa06e33":"## 1- logistic regression","7ca5feb7":"### target incidence","6d00536d":"## feature scaling target-1","fa2a79fd":"## best model","557f2620":"## 7- tpotclassifier","daead330":"## 4- naive-bayes","105f17cd":"## 6- random forest classifier","734de6f5":"## data splitting  target-4","39b71864":"## 5- decision tree classifier","7293370b":"### cross-validate","43712ec4":"## 5- decision tree classifier","0da8597a":"## feature scaling final_target30","eafc68ab":"### cross-validate","8012510b":"## 2- k-nearest neighbors","1d70d56e":"## 4- naive bayes","68cac63c":"## 6- random forest classifier","71429078":"### cross-validate","a6b6a62d":"## feature scaling target-1","22156629":"## data splitting  final target-30","cd94c995":"## 6- random forest classifier","e2797d2d":"# 3- Data Preprocessing","a053ab8c":"## data splitting   target-3","98108a6f":"## 5- random forest classifier","9d063cf4":"## data splitting  target-2","dac9e423":"## 4- naive-bayes classifier","267da36f":"## data splitting target-1","202afd23":"## 1- logistic_regression","68c87d28":"## 4- decision tree classifier","e97cf049":"## knn","a3e6a550":"## 1- logistic regression","54f993db":"## feature scaling  target-3","1400a5ed":"## best model","b6dbd2a6":"### target incidence","4d6c93ec":"### cross-validate","d1a4ef7d":"## 3- SVC","dfc78b20":"## 4- naive_bayes","9a7e0071":"## 4- naive-bayes","b33bbb7c":"### cross-validate","f3c057db":"# Data Uploading","4af8ed74":"### cross-validate","11340121":"## 1- logistic regression","672170eb":"## data splitting target-3","ee23f608":"## decision tree classifier","9ff5c95c":"# Models (classification)   target-4","adae90b5":"### cross validate","558d93b6":"### cross-validate","254ff0df":"## 4- naive bayes","fa5d9dea":"## best model","c23bc7c3":"## data splitting target-4","4902fc77":"### target incidence","b3936661":"# Models (classification)  target-3","4106b354":"## 3- SVC","afe9c329":"# Models (classification)  target-2","9ba68bef":"# Models (classification)  target-2","95ef6db6":"## best model","e02e6a5e":"# Models for predicting machine failure before 15 minutes","f1a3e4b1":"## 5- decision tree classifier","d390c5a7":"## 4- naive-bayes","a46a5672":"## 5- decision tree classifier","11d5f18e":"### cross-validate","dfbf051c":"## 2- knn","b3914cab":"### cross-validate","72fd6c2d":"### cross-validate","27d04bc2":"## naive-bayes","8ecece26":"# Final Results Of Stable Flag","d51dea7a":"## 2- knn","b1d5dcc5":"# Models (classifiers)     target-2","60cc8edd":"# Models (classification)  target-4","a1f6da76":"## 1- logistic regression ","9365ee17":"## 6- random forest classifier","ff00fbc1":"## random forest classifier","417409bb":"## SVC","88d61415":"## 6- random forest classifier","d29b6928":"#Models for predicting machine failure before 30 minutes ","a49650a2":"## 4- decision tree classifer","9e7f4a54":"# Final_data for testing with final_target","f6a97abb":"## logistic_regression","bf00d1ae":"## 3- SVC","6a66f2ed":"## 6- tpotclassifier","dee7c973":"## 3- SVC","f44245c9":"# Models (classification) target-4","c462cf43":"## 3- SVC","62894517":"#data preperation ","17b723cb":"## best_model","31b11f3d":"## best model","5a44f1bd":"## best model","d59c2d99":"# Models (classification) final target","03aaacef":"## 2- knn","0022b660":"### target incidence","8e45a28b":"# 1- Data Preperation","a124931e":"## 3- SVC","335a8c6a":"## 5- decision tree classifier","48947ec0":"## feature scaling  target-2","583b189b":"## 2- knn","5068b657":"## data splitting target-2","23249916":"## 5- decision tree classifier","cfc16530":"## 2- knn","ceb0b8b9":"## data splitting final-target","da487f68":"# Final_data for testing with final_target15","5ec9477a":"## 4- naive-bayes","b1094fc6":"### cross-validate","3faf973a":"## 2- knn","bfbfbb62":"## best model","51a50b65":"## 4- naive-bayes","c317ebfb":"# Models (classification)  final-target30","c745b407":"### target incidence","94e70d72":"## 1- logistic regression","70919692":"## feature scaling target-3","a7671d9e":"# Models  (classification)  target-1","79f51cf4":"## 6- random forest classifier","4d28ff65":"## 5- decision tree classifier","897f0fb8":"## 3- SVC","9251e59c":"### cross-validate","2a87c362":"## 3- SVC","494d32ac":"### cross-validate","63185de6":"## 2- knn","25db37e2":"### cross-validate","e6fa479d":"## feature scaling  target-1","27215311":"## best model","086f8869":"## data splitting   final_target15","ba37ad63":"### cross-validate","81a65e4e":"## 6- random forest classifier","05dd6544":"## 2- knn","12fcdcaf":"## 3- SVC","e229848a":"## 1- logistic regression","b69df387":"## 5- random forest classifier","6ee31c22":"## feature scaling  target-2","9729b1d9":"## feature scaling  final target","19f2d622":"### target incidence","e5f8b7b6":"## 1- logistic regression","9761f299":"## 1- logistic regression","855c2cf5":"# Models (classification)  target-3 ","23d92248":"### target incidence","fba43418":"## 3- SVC","2c13109b":"## data analysis","4b9c6465":"## feature scaling target-4","45da4abe":"### cross-validate","616fb5d0":"## 6- tpotclassifier","67f2b227":"## 6- random forest classifier","c7e700fe":"## random forest classifier","a0568e3e":"### target incidence","0e281f31":"# Models (classification)  target-1","c723d614":"## feature scaling  target-3","776534d5":"### target incidence","bf1f8b5f":"# Final Results Of Stable Flag ","0c09f46f":"### cross-validate","537388d3":"## 5- decision tree classifier","81c69c8d":"## 3- SVC","04b14d0a":"# models","ee2c292b":"## 2- knn","0883f183":"## 5- decision tree classifier","87d64d11":"## feature scaling  target-4","9e2d05bd":"## feature scaling  final_target15","dc795f4e":"## 4- naive-bayes","bf40e745":"## 1- logistic regression","9f9ca4ce":"## 1- logistic regression","dc8e49ec":"## 5- decision tree classifier","7d72fe35":"## 2- knn","f9512faf":"## 6- random forest classifier","9be93ec0":"## 1- logistic regression","70b90c88":"## 2- knn","9c612358":"## 6- random forest classifier","d5f7aa7d":"## best_model","fb0d249f":"## 1- logistic_regression","c424253f":"### target incidence","7dc6a53b":"## best model","67c1f8c5":"## 1- logistic regression","0379a2dd":"## 4- naive bayes","f25c3382":"## 3- SVC","fc2c085c":"# Final results of Stable Flag","0435f5d1":"## 5- decision tree classifier","d96e8ada":"# Models (classification)   target-3","976cdc12":"## feature  scaling","63e105b4":"### target incidence","afd1b3e3":"## data splitting  target-3"}}