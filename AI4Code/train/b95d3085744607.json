{"cell_type":{"187c8a50":"code","bb54ee29":"code","efec305e":"code","127abe2b":"code","b396879c":"code","e6db2612":"code","56da3b16":"code","22ec8c18":"code","f7481d5d":"code","6ecea553":"code","bf2fcb74":"code","4d70e68d":"code","a87737fc":"code","2d2656b1":"code","9c623a3b":"code","ce7c2497":"code","0ffefdc8":"code","2ba2b23f":"code","8a2fa250":"code","2f1e1723":"code","91b2349f":"code","43240346":"code","026516c0":"code","dea2f652":"code","126dbf94":"code","3d3c06d3":"code","1c2b6546":"markdown"},"source":{"187c8a50":"from keras.utils import np_utils\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, cohen_kappa_score\n\nfrom operator import truediv\nfrom plotly.offline import init_notebook_mode\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.io as sio\nimport os\nimport spectral\n\ninit_notebook_mode(connected=True)\n%matplotlib inline","bb54ee29":"## GLOBAL VARIABLES\ndataset = 'IP'","efec305e":"def loadData(name):\n    \n    if name == 'IP':\n        data = sio.loadmat('..\/input\/hsi-dataset\/Indian_pines_corrected.mat')['indian_pines_corrected']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/Indian_pines_gt.mat')['indian_pines_gt']\n    elif name == 'SA':\n        data = sio.loadmat('..\/input\/hsi-dataset\/Salinas_corrected.mat')['salinas_corrected']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/Salinas_gt.mat')['salinas_gt']\n    elif name == 'PU':\n        data = sio.loadmat('..\/input\/hsi-dataset\/PaviaU.mat')['paviaU']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/PaviaU_gt.mat')['paviaU_gt']\n    \n    return data, labels","127abe2b":"def applyPCA(X, numComponents):\n    newX = np.reshape(X, (-1, X.shape[2]))\n    pca = PCA(n_components=numComponents, whiten=True)\n    newX = pca.fit_transform(newX)\n    newX = np.reshape(newX, (X.shape[0],X.shape[1], numComponents))\n    return newX, pca","b396879c":"def applyLDA(X,y):\n    newX=np.reshape(X, (-1, X.shape[2]))\n    y=np.reshape(y,(-1,1))\n    lda=LDA()\n    newX = lda.fit_transform(newX,y.ravel())\n    newX = np.reshape(newX, (X.shape[0],X.shape[1],newX.shape[1]))\n    return newX","e6db2612":"X, y = loadData(dataset)","56da3b16":"X.shape, y.shape","22ec8c18":"LDAX= applyLDA(X,y)\nprint('LDAX.shape',LDAX.shape)\nprint('LDAy.shape',y.shape)","f7481d5d":"K = 60\nPCAX,pca = applyPCA(X,numComponents=K)\nev=pca.explained_variance_ratio_\nprint('PCAX.shape',PCAX.shape)\nprint('y.shape',y.shape)","6ecea553":"LDAX = np.reshape(LDAX, (-1, LDAX.shape[2]))\nPCAX = np.reshape(PCAX, (-1, PCAX.shape[2]))\nprint('PCAX.shape',PCAX.shape)\nprint('LDAX.shape',LDAX.shape)","bf2fcb74":"X= np.concatenate((LDAX,PCAX),axis=1)","4d70e68d":"X.shape","a87737fc":"y = np.reshape(y, (-1))\ny.shape","2d2656b1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 0)","9c623a3b":"print('X_train.shape',X_train.shape)\nprint('X_test.shape',X_test.shape)\nprint('y_train.shape',y_train.shape)\nprint('y_test.shape',y_test.shape)","ce7c2497":"from sklearn.svm import SVC\nclassifier =SVC(random_state=0, tol=1e-5,kernel='rbf', degree = 10, gamma='scale', cache_size=1024*7,max_iter=99999)\nclassifier.fit(X_train, y_train)","0ffefdc8":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred.shape","2ba2b23f":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test, y_pred)\nprint(acc)","8a2fa250":"def reports (X_test,y_test,name):\n    #start = time.time()\n    Y_pred = classifier.predict(X_test)\n    y_pred = np.argmax(Y_pred, axis=1)\n    #end = time.time()\n    #print(end - start)\n    if name == 'IP':\n        target_names = ['Alfalfa', 'Corn-notill', 'Corn-mintill', 'Corn'\n                        ,'Grass-pasture', 'Grass-trees', 'Grass-pasture-mowed', \n                        'Hay-windrowed', 'Oats', 'Soybean-notill', 'Soybean-mintill',\n                        'Soybean-clean', 'Wheat', 'Woods', 'Buildings-Grass-Trees-Drives',\n                        'Stone-Steel-Towers']\n    elif name == 'SA':\n        target_names = ['Brocoli_green_weeds_1','Brocoli_green_weeds_2','Fallow','Fallow_rough_plow','Fallow_smooth',\n                        'Stubble','Celery','Grapes_untrained','Soil_vinyard_develop','Corn_senesced_green_weeds',\n                        'Lettuce_romaine_4wk','Lettuce_romaine_5wk','Lettuce_romaine_6wk','Lettuce_romaine_7wk',\n                        'Vinyard_untrained','Vinyard_vertical_trellis']\n    elif name == 'PU':\n        target_names = ['Asphalt','Meadows','Gravel','Trees', 'Painted metal sheets','Bare Soil','Bitumen',\n                        'Self-Blocking Bricks','Shadows']\n    \n    classification = classification_report(np.argmax(y_test, axis=1), y_pred, target_names=target_names)\n    oa = accuracy_score(np.argmax(y_test, axis=1), y_pred)\n    conf = confusion_matrix(np.argmax(y_test, axis=1), y_pred)\n    each_acc, aa = AA_andEachClassAccuracy(conf)\n    kappa = cohen_kappa_score(np.argmax(y_test, axis=1), y_pred)\n    score = model.evaluate(X_test, y_test, batch_size=32)\n    Test_Loss =  score[0]*100\n    Test_accuracy = score[1]*100\n    \n    return classification, conf, Test_Loss, Test_accuracy, oa*100, each_acc*100, aa*100, kappa*100","2f1e1723":"if dataset == 'IP':\n    target_names = ['Alfalfa', 'Corn-notill', 'Corn-mintill', 'Corn'\n                        ,'Grass-pasture', 'Grass-trees', 'Grass-pasture-mowed', \n                        'Hay-windrowed', 'Oats', 'Soybean-notill', 'Soybean-mintill',\n                        'Soybean-clean', 'Wheat', 'Woods', 'Buildings-Grass-Trees-Drives',\n                        'Stone-Steel-Towers']\nelif dataset == 'SA':\n    target_names = ['Brocoli_green_weeds_1','Brocoli_green_weeds_2','Fallow','Fallow_rough_plow','Fallow_smooth',\n                        'Stubble','Celery','Grapes_untrained','Soil_vinyard_develop','Corn_senesced_green_weeds',\n                        'Lettuce_romaine_4wk','Lettuce_romaine_5wk','Lettuce_romaine_6wk','Lettuce_romaine_7wk',\n                        'Vinyard_untrained','Vinyard_vertical_trellis']\nelif dataset == 'PU':\n    target_names = ['Asphalt','Meadows','Gravel','Trees', 'Painted metal sheets','Bare Soil','Bitumen',\n                        'Self-Blocking Bricks','Shadows']\nclassification=classification_report(y_test,y_pred,zero_division=0)\nprint('Classification report:\\n',classification)","91b2349f":"def AA_andEachClassAccuracy(confusion_matrix):\n    counter = confusion_matrix.shape[0]\n    list_diag = np.diag(confusion_matrix)\n    list_raw_sum = np.sum(confusion_matrix, axis=1)\n    each_acc = np.nan_to_num(truediv(list_diag, list_raw_sum))\n    average_acc = np.mean(each_acc)\n    return each_acc, average_acc","43240346":"confusion= confusion_matrix(y_test, y_pred)","026516c0":"each_acc, aa = AA_andEachClassAccuracy(confusion)    \nkappa = cohen_kappa_score(y_test, y_pred)\noa = accuracy_score(y_test, y_pred)","dea2f652":"classification = str(classification)\nconfusion= confusion_matrix(y_test, y_pred)\nconfusion = str(confusion)\nfile_name = \"classification_report.txt\"\n\nwith open(file_name, 'w') as x_file:\n    x_file.write('{} Kappa accuracy (%)'.format(kappa*100))\n    x_file.write('\\n')\n    x_file.write('{} Overall accuracy (%)'.format(oa*100))\n    x_file.write('\\n')\n    x_file.write('{} Average accuracy (%)'.format(aa*100))\n    x_file.write('\\n')\n    x_file.write('\\n')\n    x_file.write('{}'.format(classification))\n    x_file.write('\\n')\n    x_file.write('{}'.format(confusion))","126dbf94":"f = open(\"classification_report.txt\", \"r\")\nprint(f.read()) ","3d3c06d3":"import scikitplot as skplt\n\nskplt.metrics.plot_confusion_matrix(\n    y_test, \n    y_pred,\n    figsize=(12,12));","1c2b6546":"**MOdel and traing**"}}