{"cell_type":{"8a141d72":"code","c330e585":"code","f18d15c6":"code","1dd0cea6":"code","0ed1b672":"code","1dbf7063":"code","ac0a57be":"code","c45ac028":"code","bfa91c0c":"code","f41d4c57":"code","e301da7d":"code","ccfa1d1e":"code","711755d7":"code","2d153077":"code","824014f8":"code","5e3cf135":"code","2bab993a":"code","43c93d46":"code","be04ca5a":"code","a0e55636":"code","3c71ba9f":"code","d6c14aca":"code","60f398f9":"code","67486209":"code","d599e39b":"code","4bbc4930":"code","5c5f7e33":"code","648b5b92":"code","53e1e778":"code","063701f1":"code","7d2af79b":"code","515452d6":"code","2fe0fadd":"code","466f3cfb":"code","09a2958f":"code","4f788d5a":"code","a01155ff":"markdown","8662f7ee":"markdown","69325c62":"markdown","79a896b0":"markdown","50481b78":"markdown","8f3f6204":"markdown","6da36090":"markdown","ea07e707":"markdown","6c22cd9b":"markdown","5577a63e":"markdown","42fb98d0":"markdown","644b2328":"markdown","612feaf3":"markdown"},"source":{"8a141d72":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c330e585":"play_store_file = '\/kaggle\/input\/googleplaystore.csv'\nuser_reviews = '\/kaggle\/input\/googleplaystore_user_reviews.csv'","f18d15c6":"store = pd.read_csv(play_store_file, na_values=['','None','NaN', 'NA', 'nan'])\nstore.head(10)","1dd0cea6":"reviews = pd.read_csv(user_reviews, na_values=['','None','NaN', 'NA', 'nan'])\nreviews.head(10)","0ed1b672":"store.info()","1dbf7063":"reviews.info()","ac0a57be":"store.nunique()","c45ac028":"store[store['App'].duplicated(keep=False)]['App'].sort_values(ascending=False)[:10]","bfa91c0c":"store[store['App']=='wetter.com - Weather and Radar']","f41d4c57":"store[store['App']=='8 Ball Pool']","e301da7d":"store['Category'].unique()","ccfa1d1e":"store[store['Category']=='1.9']","711755d7":"col = store.columns[1:]\ncol_b = store.columns[1:-1]\ntemp = store.loc[10472, col_b]\nstore.loc[10472, 'Category'] = None\nfor i in range(0, len(col_b)):\n    store.loc[10472, col[i+1]] = temp[col_b[i]]\n    \nstore['Category'].unique()","2d153077":"store['Rating'] = pd.to_numeric(store['Rating'], downcast='unsigned', errors='coerce')\nstore['Rating'].unique()","824014f8":"store['Reviews'] = pd.to_numeric(store['Reviews'], downcast='unsigned', errors='coerce')\nstore.head()","5e3cf135":"last_ch = []\nval = store['Size']\nfor v in val:\n    if v:\n        c = v[-1]\n        if c not in last_ch:\n            last_ch.append(c)\nlast_ch","2bab993a":"store[store['Size']=='Varies with device'][:5]","43c93d46":"def convert_size(v):\n    if v:\n        if v == 'Varies with device':\n            return None\n        else:\n            c = v[-1]\n            if c == 'M':\n                return v[:-1]\n            elif c == 'k':\n                n = float(v[:-1])\n                n = n \/ 1024.0\n                return str(n)\n            else:\n                return v\n    else:\n        return None\n\nstore['Size'] = pd.to_numeric(store['Size'].apply(convert_size), downcast='unsigned', errors='coerce')\nstore.head(5)","be04ca5a":"store['Installs'].unique()","a0e55636":"def remove_plus(v):\n    if '+' in v:\n        return v[:-1].replace(',','')\n    else:\n        return v.replace(',','')\n\nstore['Installs'] = pd.to_numeric(store['Installs'].apply(remove_plus), errors='coerce')\nstore['Installs'].unique()","3c71ba9f":"store['Type'].unique()","d6c14aca":"store['Price'].unique()","60f398f9":"def get_first(v):\n    if v:\n        return v[0]\n    else:\n        return v\n\nstore['Price'].apply(get_first).unique()","67486209":"def remove_dollor(v):\n    if '$' in v:\n        return v[1:]\n    else:\n        return v\n\nstore['Price'] = pd.to_numeric(store['Price'].apply(remove_dollor), errors='coerce')\nstore['Price'].unique()","d599e39b":"store['Content Rating'].unique()","4bbc4930":"store['Genres'].unique()","5c5f7e33":"store['Android Ver'].unique()","648b5b92":"import re\n# 4.4W where W stands for wearable\nstore['Android Ver'] = store['Android Ver'].apply(lambda x: str(x).replace('W',''))\ndef replace_nan(v):\n    if v=='nan':\n        return None\n    else:\n        return v\n\nper_form = '^[0-9]+\\.[0-9]+\\.[0-9]+ - [0-9]+\\.[0-9]+\\.[0-9]+$'\n\ndef make_uniform(v):\n    if v:\n        if 'and' in v:\n            n = v.count('.')\n            if n == 0:\n                chat = v.find('and')\n                return v[:chat-1]+'.0.0 - 99.99.99'\n            elif n == 1:\n                chat = v.find('and')\n                return v[:chat-1]+'.0 - 99.99.99'\n            elif n == 2:\n                chat = v.find('and')\n                return v[:chat-1]+' - 99.99.99'\n            else:\n                return v\n        elif '-' in v:\n            parts = v.split(' - ')\n            final = []\n            for vp in parts:\n                n = vp.count('.')\n                if n == 0:\n                    vp = vp +'.0.0'\n                elif n == 1:\n                    vp = vp +'.0'\n                final.append(vp)\n            return final[0] + ' - ' + final[1]\n        else:\n            return v\n    else:\n        return v\n\ndef fill_default(v):\n    if v == 'Varies with device':\n        return '1.0.0 - 99.99.99'\n    else:\n        return v\nstore['Android Ver'] = store['Android Ver'].apply(replace_nan)\nstore['Android Ver'] = store['Android Ver'].apply(make_uniform)\nstore['Android Ver'] = store['Android Ver'].apply(fill_default)\nstore['Android Ver'].unique()","53e1e778":"sorted(store['Last Updated'].unique())[:10]","063701f1":"import dateutil\nstore['Last Updated'] = pd.to_datetime(store['Last Updated'], errors='coerce')\nstore['Last Updated'] = store['Last Updated'].dt.normalize()\nstore['Last Updated'].unique()","7d2af79b":"store['Current Ver'].unique()","515452d6":"valid_pat = '^[0-9]+\\.[0-9]+\\.[0-9]+$'\ndef find_dif(v):\n    if not re.match(valid_pat, str(v)) and v != 'Varies with device':\n        return True\n    else:\n        return False\nstore[store['Current Ver'].apply(find_dif)]['Current Ver'].unique()","2fe0fadd":"store[store['Current Ver'].apply(find_dif)]","466f3cfb":"only_text = '^[a-zA-z\\s-]*$'\nstart_v = r'[a-zA-Z \\(\\)\\-]+?'\nonly_num = '^[0-9]+$'\ndef remove_string(v):\n    if re.match(only_text, str(v)):\n        return None\n    else:\n        return v\ndef remove_v(v):\n    return re.sub(start_v, '', v)\ndef remove_large(v):\n    if ('.' in str(v)) or (v == 'Varies with device') or (len(str(v)) <= 4 and re.match(only_num, str(v))):\n        return v\n    else:\n        return None\ndef add_dot(v):\n    if v != None and '.' not in v and v != 'Varies with device':\n        return v+'.0.0'\n    elif v != None and str(v).count('.')==1 and v != 'Varies with device':\n        return v+'.0'\n    else:\n        return v\n    \ndef fetch_valid(v):\n    if v:\n        valid = '[0-9]+\\.[0-9]+\\.[0-9]+|$'\n        find = re.findall(valid, v)[0]\n        if find != \"\":\n            return find\n        else:\n            return v\nstore['Current Ver'] = store['Current Ver'].apply(lambda x: str(x).replace('_','.'))\nstore['Current Ver'] = store['Current Ver'].apply(lambda x: x.replace(',','.'))\nstore['Current Ver'] = store['Current Ver'].apply(remove_v)\nstore['Current Ver'] = store['Current Ver'].apply(fetch_valid)\nstore['Current Ver'] = store['Current Ver'].apply(remove_large)\nstore['Current Ver'] = store['Current Ver'].apply(remove_string)\nstore['Current Ver'] = store['Current Ver'].apply(add_dot)\nstore.loc[store['Current Ver'].apply(find_dif), 'Current Ver'] = None\nstore.loc[store['Current Ver'].apply(find_dif), 'Current Ver'].unique()","09a2958f":"store.head(5)","4f788d5a":"store.info()","a01155ff":"<h1>Installs<\/h1>","8662f7ee":"<h1>Reviews<\/h1>","69325c62":"<h1>Category<\/h1>\nCategory column has one unexpected value <i>'1.9'<\/i>. When it is envestigated, It looks that perticular record has wrongly entered as it is shifted to right by one column. I have fixed it by shifting it left side by one column. I have filled category value as <code>None<\/code> for that record.","79a896b0":"<h1>Android Ver<\/h1>\nAndroid version is generally written in x.x.x format.\nAndroid versions for application are provided in range (e.g. 5.0 - 8.0) or only earliest supported version (e.g. 5.0 and up).\nTo make it uniform for all records, I have used format x.x.x - y.y.y.\nI have used 99.99.99 for highest possible android version.\nValue <code>'Varies with device'<\/code> is replced with complete version range 1.0.0 - 99.99.99","50481b78":"<h1>Current Ver<\/h1>\nValues of current version are made uniform by converting it in format x.x.x Any other value which are not possible to convert to that format are made None.","8f3f6204":"<h1>Content Rating<\/h1>","6da36090":"<h1>Genres<\/h1>","ea07e707":"<h1>App<\/h1>\nMany entries have same application name. Most of them seems redundant entries. We need to remove redundant data, But first, I will clean all other columns to get clear picture about each record.","6c22cd9b":"<h1>Type<\/h1>","5577a63e":"<h1>Last Updated<\/h1>","42fb98d0":"<h1>Rating<\/h1>","644b2328":"<h1>Price<\/h1>","612feaf3":"<h1>Size<\/h1>\nSize was given in MB and kB units. Many records have have value <code>'Varies with device'<\/code>, <code>'Varies with device'<\/code> does not help in analysis hence it is made <code>None<\/code>. And column is converted to numeric type. To keep value in same unit for all records, all values in kB are converted to MB unit. "}}