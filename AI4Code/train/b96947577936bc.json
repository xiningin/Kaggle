{"cell_type":{"8ea81d49":"code","6d739252":"code","c70d3817":"code","6bd58154":"code","d764e537":"code","f9ba3fac":"code","3e4ead5d":"code","2728cb68":"code","c1cfaa4f":"markdown","909b92d3":"markdown"},"source":{"8ea81d49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d739252":"import numpy as np\nimport pandas as pd","c70d3817":"import plotly.express as px\nimport plotly.graph_objects as go","6bd58154":"fig = px.line(x=[\"a\",\"b\",\"c\"], y=[1,3,2], title=\"sample figure\")\nprint(fig)\nfig.show()","d764e537":"df = px.data.tips()\nfig = px.scatter(\n    df, x='total_bill', y='tip', opacity=0.65,\n    trendline='ols', trendline_color_override='darkblue'\n)\nfig.show()","f9ba3fac":"fig = px.imshow([[1, 20, 30],\n                 [20, 1, 60],\n                 [30, 60, 1]])\nfig.show()","3e4ead5d":"import plotly.graph_objects as go\n\nnp.random.seed(1)\n\nN = 70\n\nfig = go.Figure(data=[go.Mesh3d(x=(70*np.random.randn(N)),\n                   y=(55*np.random.randn(N)),\n                   z=(40*np.random.randn(N)),\n                   opacity=0.5,\n                   color='rgba(244,22,100,0.6)'\n                  )])\n\nfig.update_layout(\n    scene = dict(\n        xaxis = dict(nticks=4, range=[-100,100],),\n                     yaxis = dict(nticks=4, range=[-50,100],),\n                     zaxis = dict(nticks=4, range=[-100,100],),),\n    width=700,\n    margin=dict(r=20, l=10, b=10, t=10))\n\nfig.show()","2728cb68":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\n# Initialize figure with 4 3D subplots\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{'type': 'surface'}, {'type': 'surface'}],\n           [{'type': 'surface'}, {'type': 'surface'}]])\n\n# Generate data\nx = np.linspace(-5, 80, 10)\ny = np.linspace(-5, 60, 10)\nxGrid, yGrid = np.meshgrid(y, x)\nz = xGrid ** 3 + yGrid ** 3\n\n# adding surfaces to subplots.\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='Viridis', showscale=False),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='RdBu', showscale=False),\n    row=1, col=2)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='YlOrRd', showscale=False),\n    row=2, col=1)\n\nfig.add_trace(\n    go.Surface(x=x, y=y, z=z, colorscale='YlGnBu', showscale=False),\n    row=2, col=2)\n\nfig.update_layout(\n    title_text='3D subplots with different colorscales',\n    height=800,\n    width=800\n)\n\nfig.show()","c1cfaa4f":"## Tugas Intro Visualisasi Menggunakan Plotly","909b92d3":"Plotly adalah library untuk pembuatan plot yang tersedia dalam bahasa pemrograman python dan R. dari segi kompatibilitas pada diagram, library ini tidak jauh berbeda dengan matplotlib. plot garis, diagram batang, hingga heatmaps mampu digambarkan dengan baik. Sempat mencoba sendiri plotly, terdapat perbedaan mencolok pada tampilan dibanding matplotlib. yakni pada plotly secara default sudah tersedia beberapa tools yang mendukung interaksi pada plot. pembesaran diagram dan tombol screenshot tersedia secara otomatis. Berbeda dengan matplotlib, penulisan kode manual diperlukan untuk menyimpan hasil diagram."}}