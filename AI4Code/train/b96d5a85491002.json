{"cell_type":{"9263ef0b":"code","70216f3c":"code","110192f6":"code","5d15d1ec":"code","21123dfc":"code","c1a32662":"code","60722cfd":"code","c3b19375":"code","54a5c38c":"code","88c1f9a7":"markdown","27cb4b16":"markdown","9b0c6b9e":"markdown","bf564af0":"markdown","a172b175":"markdown","96f4001a":"markdown","a714dfe6":"markdown","c32fc858":"markdown"},"source":{"9263ef0b":"import os\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go","70216f3c":"# Load data from file\ndf_world = pd.read_csv('\/kaggle\/input\/world-capitals-gps\/concap.csv')\n\n# Only want locations with longitude and latitude details\ndf1 = df_world[(df_world['CapitalLatitude'] != 0) & (df_world['CapitalLongitude'] != 0)]\n\n# Remove nulls\ndf1 = df1.dropna()\n\ndf_world.info()","110192f6":"# Remove Antartica\ndf1 = df1[df1['ContinentName'] != 'Antarctica']\n\n# Remove other locations\ndf1 = df1[~df1['CountryName'].isin(\n    ['Norfolk Island', \n     'US Minor Outlying Islands'])]","5d15d1ec":"# Get all possible \"pairs\" of locations\ndf2 = df1.copy()\ndf_cartesian = df1.assign(key=1).merge(df2.assign(key=1), on='key').drop('key', 1)\ndf_cartesian = df_cartesian[df_cartesian['CapitalName_x'] != df_cartesian['CapitalName_y']]\ndf_cartesian.head(-5)","21123dfc":"# Function for the haversine formula\ndef haversine_np(lon1, lat1, lon2, lat2):\n\n    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = np.sin(dlat \/ 2.0) ** 2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon \/ 2.0) ** 2\n\n    c = 2 * np.arcsin(np.sqrt(a))\n    km = 6367 * c\n    return km","c1a32662":"# Create a new data frame column with haversine calculation\ndf_cartesian['distance'] = haversine_np(\n    df_cartesian['CapitalLongitude_x'],\n    df_cartesian['CapitalLatitude_x'],\n    df_cartesian['CapitalLongitude_y'],\n    df_cartesian['CapitalLatitude_y'])\ndf_cartesian.head(-5)","60722cfd":"# Get closest city per city\ndf_plot = df_cartesian.sort_values(['distance','CountryName_y','CapitalName_y']). \\\ndrop_duplicates(['CountryName_x', 'CapitalName_x', 'CapitalLatitude_x', 'CapitalLongitude_x'], keep = 'first')","c3b19375":"# Get top10 most isolated cities\ndf_topN = df_plot.sort_values(by='distance', ascending=False)\ndf_topN[['CapitalName_x', 'CountryName_x', 'CapitalName_y', 'CountryName_y', 'distance']].iloc[0:10]","54a5c38c":"# Plot capital cities and display details of closest city \nfig = go.Figure(\n    data=go.Scattergeo(\n        text = df_plot, \n        lon  = df_plot['CapitalLongitude_x'], \n        lat  = df_plot['CapitalLatitude_x'], \n        mode = 'markers', \n        hovertemplate = \"<b>%{text[0]}<\/b>\"\n                        \"<br><br>\"\n                        \"Capital: %{text[1]}\"\n                        \"<extra><b>Closest Capital<\/b>\"\n                        \"<br>%{text[7]}: %{text[6]}\"\n                        \"<br>%{text[12]:.0f}km<\/extra>\"))\n\nfig.update_traces(mode='markers', marker={'sizemode':'area', 'sizeref':10})\n            \nfig.update_layout(title    = 'Capitals',\n                  autosize = True,\n                  width    = 800,\n                  height   = 450,\n                  margin   = {\"r\":0,\"t\":50,\"l\":0,\"b\":0})","88c1f9a7":"## Importing the Libraries","27cb4b16":"For something a little more interesting, let's plot these coordinates on a map and display the details of it's closest city","9b0c6b9e":"## Results","bf564af0":"For each combination of locations, we will apply the haversine formula to calculate the distance between points in KM","a172b175":"# Objective\nThis notebook provides a walkthrough to find the world's most remote capital city using longitude and latitude.  The haversine formula is used to calculate distances betwen points and is visualised using plotly.","96f4001a":"## Reading and Cleansing the dataset","a714dfe6":"Let's remove some territories from this analysis","c32fc858":"## Haversine Implementation\nDistance between locations can be calculated using the [haversine formula](https:\/\/en.wikipedia.org\/wiki\/Haversine_formula)\nLet's create a dataframe with all possible pairings of locations."}}