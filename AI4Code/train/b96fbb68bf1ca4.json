{"cell_type":{"f7617041":"code","8bab732f":"code","d6accb71":"code","8ce47349":"code","81321a17":"code","8bc6cc0d":"code","745bcd85":"code","ade164cd":"code","b3ecf123":"code","8c4c01d2":"code","c1eaa729":"code","aba4db90":"code","232d5979":"code","ec0a8f82":"code","95aabf5b":"code","48f45046":"code","08794dcd":"code","b02c67dc":"code","7088b72e":"code","8e4a7561":"code","3ef53200":"code","129245b2":"code","d38d34d8":"code","f22ab559":"code","83270bd8":"code","b3b27a22":"code","549c2ee4":"code","2e5d55ad":"markdown","f019454b":"markdown","ce353c2f":"markdown"},"source":{"f7617041":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bab732f":"import seaborn as sns\nimport matplotlib as plt\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nfrom scipy import stats \n","d6accb71":"sample = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest =  pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","8ce47349":"test.info()","81321a17":"train.columns","8bc6cc0d":"train.describe()","745bcd85":"train[\"SalePrice\"].describe()","ade164cd":"style.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize = (30,20))\n\nmask = np.zeros_like(train.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(train.corr(), \n            cmap=sns.diverging_palette(20, 220, n=200), \n            mask = mask, \n            annot=True, \n            center = 0, \n           );\nplt.title(\"Heatmap of all the Features\", fontsize = 30);","b3ecf123":"def string_remover(df,list1=[],drop=[]):\n    a = df.select_dtypes(include='object')\n    for i in a.columns:\n        for x in a.index:\n            try:\n                c = list1.index(a[i].iloc[x:x+1][x])\n                a[i].iloc[x:x+1][x] = c\n            except:\n                list1.append(a[i].iloc[x:x+1][x])\n                a[i].iloc[x:x+1][x] = len(list1)-1\n    a.fillna(len(list1))\n    d = df.select_dtypes(exclude='object').fillna(0)\n    try:\n        return pd.concat([d,a],axis=1).fillna(0).drop([drop],axis=1)\n    except:\n        return pd.concat([d,a],axis=1).fillna(0)","8c4c01d2":"b = []\ntrain = string_remover(train,list1=b)\ntest = string_remover(test,list1=b)","c1eaa729":"train.head()","aba4db90":"test.head()","232d5979":"import pandas_profiling as pp\npp.ProfileReport(train)","ec0a8f82":"sns.set_style('darkgrid')\n\nfig,ax = plt.subplots(1,1,figsize=(9,5))\nsns.distplot(train['SalePrice'], ax=ax)\n\nax.set_xlabel('Price(USD)')\nplt.suptitle('Distribution of Price', size=10)\nplt.show()","95aabf5b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(train.drop('SalePrice',axis=1),train['SalePrice'],test_size=0.33,random_state=42)","48f45046":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor()\nforest.fit(X_train,y_train)","08794dcd":"forest_pred = forest.predict(test)","b02c67dc":"sample['SalePrice'] = pd.Series(forest_pred)\nsample.to_csv('submission_forest.csv',index=False)\nsample","7088b72e":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()","8e4a7561":"lm.fit(X_train,y_train)","3ef53200":"print(lm.intercept_)","129245b2":"reg_pred = lm.predict(X_test)","d38d34d8":"plt.scatter(y_test, reg_pred, color =\"blue\")","f22ab559":"sns.distplot((y_test-reg_pred),bins=50)","83270bd8":"from sklearn import metrics","b3b27a22":"print(\"MAE:\", metrics.mean_absolute_error(y_test, reg_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, reg_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, reg_pred)))","549c2ee4":"sample['SalePrice'] = pd.Series(reg_pred)\nsample.to_csv('submission.csv',index=False)\nsample","2e5d55ad":"# Modelling","f019454b":"**Random Forest**","ce353c2f":"**Regression**"}}