{"cell_type":{"a542cd16":"code","12698aed":"code","858bc227":"code","a151362e":"code","3e8468f1":"code","13217d1f":"code","67b48d58":"code","9c37ab54":"code","bb978680":"code","802a1c1d":"code","502f7c43":"code","41a1d2c6":"code","6259652d":"code","67078b82":"code","4f1ba1d1":"code","96e8a92a":"code","1179aaf8":"code","c3113d69":"code","6b51296c":"code","507f890d":"code","50d3d939":"code","de8f36a4":"code","07ae540b":"code","db0ad6b2":"code","47671ce7":"code","250823f3":"code","8e3c4928":"code","1c411bed":"code","96173661":"code","4a86dc18":"code","f1111289":"code","0513f9c0":"code","7cdf0926":"code","c9cb9c09":"code","d57590f2":"code","725a1a5e":"code","cbd2df41":"code","91f704ed":"code","a284ea90":"code","68cc85b6":"code","b9510512":"code","5352cd93":"code","2a37ada3":"code","daba30b1":"code","455e2d68":"code","0110e9e7":"code","5d4be675":"code","df646029":"markdown","d212c954":"markdown","e809970a":"markdown","c1005c8b":"markdown","dfce6620":"markdown","9f73f107":"markdown"},"source":{"a542cd16":"import pandas as pd \nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\n\nfrom imblearn.over_sampling import SMOTE\n\nfrom sklearn.svm import LinearSVC \nfrom sklearn.svm import SVC \n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import confusion_matrix","12698aed":"df = pd.read_csv(\"..\/input\/pulsar-dataset\/pulsar_stars.csv\")","858bc227":"df.head()","a151362e":"''' plt.figure(figsize=(20,10))\ndf['Mean of the integrated profile'] = df.index\nsns.catplot(x = 'target_class' , y = 'Mean of the integrated profile' , data=df )\nplt.show()'''","3e8468f1":"plt.figure(figsize=(20,50))\nsns.set_theme(style=\"ticks\")\nsns.pairplot(df, hue=\"target_class\")","13217d1f":"df.info()","67b48d58":"df[\"target_class\"].value_counts()","9c37ab54":"sns.set(font_scale=1.5)\ndf.hist(edgecolor='black', linewidth=1.5, figsize=(20, 20));","bb978680":"df.describe()","802a1c1d":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","502f7c43":"y=df[\"target_class\"]\nx=df.drop(\"target_class\",axis = 1)","41a1d2c6":"over = SMOTE()\nox, oy = over.fit_resample(x, y)","6259652d":"x_train,x_test,y_train,y_test=train_test_split(ox,oy,test_size=0.2 , shuffle = True , random_state = 1 , stratify = oy)","67078b82":"print(\"Depth\\t\\tTraining Acuracy\\t\\tTesting Acuracy\")\nfor i in range (1,24):\n    model_tree = DecisionTreeClassifier(max_depth = i)\n    model_tree.fit(x_train,y_train)\n    print(i,\"\\t\\t\",model_tree.score(x_train,y_train),\"\\t\\t\\t\\t\",model_tree.score(x_test,y_test))","4f1ba1d1":"model_tree = DecisionTreeClassifier(max_depth = 21)\nmodel_tree.fit(x_train,y_train)","96e8a92a":"tree_pred = model_tree.predict(x_test)","1179aaf8":"print(\"Train accuracy =>\",model_tree.score(x_train,y_train))\nprint(\"Test accuracy =>\",model_tree.score(x_test,y_test))","c3113d69":"DT = confusion_matrix(y_test,tree_pred)\nDT","6b51296c":"plt.figure(figsize=(10,7))\nsns.heatmap(DT, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","507f890d":"print(\"No of tree\\t\\tDepth\\t\\tTraining Acuracy\\t\\tTesting Acuracy\")\nfor i in range (1,6):\n    for j in range (1,24):\n        forest_model = RandomForestClassifier(n_estimators=i,max_depth=j,criterion='entropy')\n        forest_model.fit(x_train,y_train)\n        print(i,\"\\t\\t\\t\",j,\"\\t\\t\",model_tree.score(x_train,y_train),\"\\t\\t\\t\",model_tree.score(x_test,y_test))","50d3d939":"forest_model = RandomForestClassifier()\nforest_model.fit(x_train,y_train)","de8f36a4":"forest_pred = forest_model.predict(x_test)","07ae540b":"print(\"Train accuracy =>\",forest_model.score(x_train,y_train))\nprint(\"Test accuracy =>\",forest_model.score(x_test,y_test))","db0ad6b2":"RF = confusion_matrix(y_test,forest_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(RF, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","47671ce7":"LogR = LogisticRegression(max_iter=8000)\nLogR.fit(x_train , y_train)","250823f3":"LogR_pred = LogR.predict(x_test)","8e3c4928":"print(\"Training accuracy => \",LogR.score(x_train,y_train))\nprint(\"Testing accuracy => \",LogR.score(x_test,y_test))","1c411bed":"LR = confusion_matrix(y_test,LogR_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(LR, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","96173661":"# Standarding values.\nsa = StandardScaler()\nStand_x_train = sa.fit_transform(x_train)\nStand_x_test = sa.fit_transform(x_test)","4a86dc18":"print(\"Degree\\t\\t Training Accuracy\\t\\t Testing Accuracy\")\nfor deg in range (1,5):\n    Poly_LogR=PolynomialFeatures(degree = deg ,include_bias=False )\n    new_x_train = Poly_LogR.fit_transform(Stand_x_train)\n    new_x_test = Poly_LogR.fit_transform(Stand_x_test)\n    LogR_polynomial = LogisticRegression(max_iter=100000)\n    LogR_polynomial.fit(new_x_train,y_train)\n    print(deg,\"\\t\\t\",LogR_polynomial.score(new_x_train, y_train),\"\\t\\t\",LogR_polynomial.score(new_x_test, y_test))\n    ","f1111289":"Poly_LogR=PolynomialFeatures(degree = 5 ,include_bias=False )\nnew_x_train = Poly_LogR.fit_transform(Stand_x_train)\nnew_x_test = Poly_LogR.fit_transform(Stand_x_test)\nLogR_polynomial = LogisticRegression(max_iter=100000)\nLogR_polynomial.fit(new_x_train,y_train)\n","0513f9c0":"LogR_ploy_pred = LogR_polynomial.predict(new_x_test)","7cdf0926":"print(\"Training accuracy => \",LogR_polynomial.score(new_x_train,y_train))\nprint(\"Testing accuracy => \",LogR_polynomial.score(new_x_test,y_test))","c9cb9c09":"PLR = confusion_matrix(y_test,LogR_ploy_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(PLR, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","d57590f2":"svm_model = SVC()","725a1a5e":"svm_model.fit(x_train,y_train)","cbd2df41":"svm_pred = svm_model.predict(x_test)","91f704ed":"len(y_test)","a284ea90":"print(\"Training Accuracy => \",svm_model.score(x_train,y_train))\nprint(\"Test Accuracy => \",svm_model.score(x_test,y_test))","68cc85b6":"sum(svm_pred == y_test )\/len(y_test)","b9510512":"svm = confusion_matrix(y_test,svm_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(svm, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","5352cd93":"print(\"Neighbors\\tTraining Acuracy\\t\\tTesting Acuracy\")\nfor i in range (2,21):\n    knn_model = KNeighborsClassifier(n_neighbors=i)\n    knn_model.fit(x_train,y_train)\n    print(i,\"\\t\\t\",knn_model.score(x_train,y_train),\"\\t\\t\",knn_model.score(x_test,y_test))\n","2a37ada3":"knn_model = KNeighborsClassifier()","daba30b1":"knn_model.fit(x_train,y_train)","455e2d68":"print(\"Training Accuracy => \",knn_model.score(x_train,y_train))\nprint(\"Test Accuracy => \",knn_model.score(x_test,y_test))","0110e9e7":"knn_pred = knn_model.predict(x_test)","5d4be675":"knn = confusion_matrix(y_test,knn_pred)\nplt.figure(figsize=(10,7))\nsns.heatmap(knn, annot = True)\nplt.xlabel('Prediction')\nplt.ylabel('Original')\nplt.show()","df646029":"# Logistic Regression Using Polynomial Features","d212c954":"# Random forest","e809970a":"# Logistic Regression","c1005c8b":"# SVM","dfce6620":"# KNN","9f73f107":"# Decision tree"}}