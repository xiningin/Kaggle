{"cell_type":{"7354bc18":"code","76e915dc":"code","beed9fdd":"code","9b6e2914":"code","210a02ee":"code","ddf0e1e3":"code","8cf2f7e7":"code","a5b4b756":"code","27f62cf9":"code","c1e43f52":"code","d66e938e":"code","e8d0f1a0":"code","3b8c4ff9":"code","ab1af394":"code","fb1efc0d":"code","c41c3628":"code","d2d7da61":"code","9c8a21b1":"code","abd28721":"code","3b2215dc":"code","f17577a7":"code","45d26d25":"code","65416010":"code","6ceba40e":"code","db106ecd":"code","b3aece76":"code","960f960e":"code","10827031":"code","859bbf69":"code","1b27ff26":"code","60a03063":"code","34de6552":"code","696378ec":"code","37b21370":"code","5a319b0d":"code","34a1c804":"code","3b92717e":"code","bcf5da20":"code","96dd4052":"code","47e1425f":"code","f632bcef":"code","5b12542b":"code","6879eaa2":"code","b5ca7bf7":"code","f488aac8":"code","e4a3162f":"code","eb678b79":"code","07ba9df8":"code","23a09975":"code","6a78073c":"code","3a34d463":"code","e8807a39":"code","e6773589":"code","d69881b5":"code","76ae6629":"code","daf6ffb6":"code","b1c0368d":"code","4149dc1c":"code","cb7f5165":"code","bc24b050":"code","65fe9846":"code","d6074401":"code","04a7c34d":"code","a513a426":"code","c340cc5a":"code","92f964e0":"code","89c013b2":"code","96dcbe5f":"code","6634b031":"code","2eb383ac":"code","9739fe20":"code","a34a73f1":"code","e3148405":"code","a6f2f677":"code","def200d2":"code","5296732b":"code","00f205ca":"code","f1b7b6db":"code","ad877871":"code","f1651df7":"code","dad5573d":"code","a6733841":"code","5be245f1":"code","17bc819a":"code","2b83015c":"code","d00e2487":"code","9bd2db09":"code","af9b414a":"code","f1a9499a":"code","26b00e5f":"code","e77ad28c":"code","0195c174":"code","f610e69e":"code","bd4d49cb":"code","8e2503bb":"code","4661227e":"code","5cc4b5e7":"code","b330421d":"code","515609d0":"code","7c68c488":"code","41660134":"code","0cb354e8":"code","f9ebfa3d":"code","8a963727":"code","b26e9e17":"code","5cd6e8f0":"code","a7cf3416":"code","bfdc6d3c":"code","840027e1":"code","b0399165":"code","370e55b8":"code","43638f93":"code","f28770ed":"code","b98eb9e3":"code","05ce7399":"code","ddb04dca":"code","bc8e1f2a":"code","e95e241a":"code","03d75f1d":"code","2c9b75fb":"code","c0c9a922":"code","e39bd8c1":"code","4ac73325":"code","ea7f1145":"code","da9f9bc9":"code","c2cab051":"code","a1934ae6":"code","c520bcb7":"markdown","54c42ca1":"markdown","c218c3cf":"markdown","ccbf49f6":"markdown","155fd857":"markdown","8cf059a1":"markdown","49ed8f3c":"markdown","301c4616":"markdown","ddd3aa1c":"markdown","28671ed8":"markdown","33208bd0":"markdown","be196df0":"markdown","e599b238":"markdown","39eff1c8":"markdown","bb5c9a30":"markdown","d0ca0884":"markdown","8b377e9b":"markdown","10886626":"markdown","2e14079e":"markdown","e2e22fd3":"markdown","4e07da91":"markdown","7ca5da7e":"markdown","9bb4ca18":"markdown","d3d9ab4c":"markdown","ad89238e":"markdown","24585910":"markdown","caeae235":"markdown","6d3cea01":"markdown","8b9f1c83":"markdown","0f43b62d":"markdown","92c82339":"markdown","ab58ef43":"markdown","36c6a18e":"markdown","f1f96def":"markdown","04976c96":"markdown","d43b13dd":"markdown","f4447fde":"markdown","dffefa8c":"markdown","f22f3199":"markdown","e361fe30":"markdown","f81276e1":"markdown","c4df2488":"markdown","25e9f312":"markdown","4e3c1060":"markdown","0a42cb4d":"markdown","ef11549d":"markdown","dcc84547":"markdown","7fa6c358":"markdown","afd5d750":"markdown","e32afbb4":"markdown","883b4e38":"markdown","1ac20e57":"markdown","e7878581":"markdown","411f6f4a":"markdown","020ea207":"markdown"},"source":{"7354bc18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport os\nimport missingno as msno\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","76e915dc":"data_test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndata_train=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\n","beed9fdd":"ids=data_test['Id']\ndata_train.drop(['Id'],axis=1,inplace=True)\ndata_test.drop(['Id'],axis=1,inplace=True)","9b6e2914":"all_data = pd.concat((data_train,data_test)).reset_index(drop=True)","210a02ee":"print(\"data_test shape\",data_test.shape)\nprint(\"data_train shape\",data_train.shape)\n\n\nntrain = data_train.shape[0] #for recreating data later\nntest = data_test.shape[0] #for recreating data later\n\n","ddf0e1e3":"print(data_train.head())","8cf2f7e7":"num_cols = all_data.select_dtypes(include=['number'])\ncat_cols = all_data.select_dtypes(include=['object'])\n\nprint(f'The dataset contains {len(num_cols.columns.tolist())} numerical columns \\\nand {len(cat_cols.columns.tolist())} categorical columns')","a5b4b756":"msno.matrix(all_data)","27f62cf9":"msno.heatmap(all_data)","c1e43f52":"#percentage of missing values for each column\nna_ratio=all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\/len(all_data)*100\n#number of missing values for each column\nna_sum=all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\npd.DataFrame(na_ratio,index=na_ratio.index,columns=['Missing Value Ratio']).head(15)","d66e938e":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n# axes.grid(color='#909090',linestyle=':',linewidth=2)\nplt.xticks(rotation=90)\nsns.barplot(x=na_ratio.index,y=na_ratio,palette='coolwarm_r')\nplt.title('Missing Value Ratio',color=('#000000'),y=1.03)\nplt.tight_layout();","e8d0f1a0":"fig,axes=plt.subplots(1,1,figsize=(12,12))\nsns.barplot(x=na_sum,y=na_sum.index,palette='brg')\nfor p in axes.patches:\n            value = p.get_width()\n            x = p.get_x() + p.get_width()+30\n            y = p.get_y() + p.get_height()-.2\n            axes.text(x, y, int(value), ha=\"left\",fontsize=11,color='#000000',bbox=dict(facecolor='#dddddd', edgecolor='black',boxstyle='round', linewidth=.5))\nplt.title('Total Missing Values',color=('#000000'),y=1.03)\nplt.tight_layout();","3b8c4ff9":"num_cols = data_train.select_dtypes(include=['number'])","ab1af394":"year_feature = [feature for feature in num_cols if 'Yr' in feature or 'Year' in feature]","fb1efc0d":"for feature in year_feature:\n    print(feature, all_data[feature].unique())\n    print('\\n')","c41c3628":"all_data['Age']=all_data['YrSold']-all_data['YearBuilt']+1\nall_data['AgeRemodAdd']=all_data['YrSold']-all_data['YearRemodAdd']+1\nall_data['AgeGarage']=all_data['YrSold']-all_data['GarageYrBlt']+1\ndel all_data['YearBuilt']\ndel all_data['YearRemodAdd']\ndel all_data['GarageYrBlt']\n","d2d7da61":"for i in ['Alley','PoolQC','Fence','MiscFeature','FireplaceQu']:\n    all_data[i]=all_data[i].apply(lambda x: 'None' if str(x)=='nan' else x)","9c8a21b1":"for i in ('GarageType','GarageFinish','GarageQual','GarageCond'):\n    all_data[i].fillna('None',inplace=True)\n\nall_data['GarageArea'] = (np.where((all_data['GarageType']=='None'), 0, all_data['GarageArea']))\nall_data['GarageCars'] = (np.where((all_data['GarageType']=='None'), 0, all_data['GarageCars']))\nall_data['AgeGarage'] = (np.where((all_data['GarageType']=='None'), 0, all_data['AgeGarage']))","abd28721":"for i in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[i].fillna('None',inplace=True)\nfor i in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[i] = (np.where((all_data['BsmtQual']=='None'), 0, all_data[i]))","3b2215dc":"#percentage of missing values for each column\nna_ratio=all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\/len(all_data)*100\n#number of missing values for each column\nna_sum=all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\npd.DataFrame(na_ratio,index=na_ratio.index,columns=['Missing Value Ratio']).head(15)","f17577a7":"from scipy.stats import norm\nplt.figure(figsize=(12,6))\nmu, sigma = norm.fit(data_train['SalePrice'])\nsns.distplot(data_train['SalePrice'],fit=norm,color='b',rug=True,kde_kws={'shade':True,'color':'b','alpha':.2})\nplt.legend(['$\\mu=$ {:.3f} and $\\sigma=$ {:.3f}'.format(mu, sigma)],fontsize=14)\nplt.title('Distribution of Sale Price')\nplt.tight_layout();","45d26d25":"data_train['SalePrice'].describe()","65416010":"corrs=data_train.drop('SalePrice',axis=1).corrwith(data_train['SalePrice']).sort_values(ascending=False)","6ceba40e":"fig,axes=plt.subplots(1,1,figsize=(12,9))\naxes.axhline(corrs[corrs>0].mean(), ls=':',color='black',linewidth=2)\naxes.text(25.5,corrs[corrs>0].mean()+.015, \"Average = {:.3f}\".format(corrs[corrs>0].mean()),color='black',size=14)\naxes.axhline(corrs[corrs<0].mean(), ls=':',color='black',linewidth=2)\naxes.text(25.5,corrs[corrs<0].mean()-.035, \"Average = {:.3f}\".format(corrs[corrs<0].mean()),color='black',size=14)\nsns.barplot(y=corrs,x=corrs.index,palette='Spectral')\nplt.title('Correlation of Sale Price to other Features',size=20,color='black',y=1.03)\nplt.xticks(rotation=90)\nfor p in axes.patches:\n            value = p.get_height()\n            if value <=.5:\n                continue\n            x = p.get_x() + p.get_width()-.9\n            y = p.get_y() + p.get_height()+(.02*value)\n            axes.text(x, y, str(value)[1:5], ha=\"left\",fontsize=12,color='#000000')\nplt.tight_layout();","db106ecd":"plt.subplots(1,1,figsize=(6,3))\nall_data.groupby('YrSold')['SalePrice'].median().plot(color = \"tomato\",linestyle = \"--\",linewidth=3)\nall_data.groupby('YrSold')['SalePrice'].mean().plot(color = \"blue\",linestyle = \"--\",linewidth=3)\nplt.gca().legend(('median','mean'))\nplt.xlabel('Year Sold',fontsize = 15)\nplt.ylabel('Median House Price',fontsize =15)\nplt.title(\"House Price Vs YearSold\",fontsize=22)\nplt.figure(figsize=(30,12))","b3aece76":"plt.figure(figsize=(12,6))\nsns.boxplot(data=data_train, y='SalePrice',x='YrSold')\nplt.tight_layout()\nplt.title('YearSold');","960f960e":"plt.subplots(1,1,figsize=(6,3))\nall_data.groupby('MoSold')['SalePrice'].median().plot(color = \"tomato\",linestyle = \"--\",linewidth=3)\nall_data.groupby('MoSold')['SalePrice'].mean().plot(color = \"blue\",linestyle = \"--\",linewidth=3)\nplt.gca().legend(('median','mean'))\nplt.xlabel('Month Sold',fontsize = 15)\nplt.ylabel('House Price',fontsize =15)\nplt.title(\"House Price Vs MonthSold\",fontsize=22)\nplt.figure(figsize=(30,12))","10827031":"import datetime \nall_data['DaySold']=1\nall_data2 = all_data[[\"YrSold\", \"MoSold\",'DaySold']].copy()\nall_data2.columns = [\"year\", \"month\", \"day\"]\nall_data['year_month']=pd.to_datetime(all_data2[[\"year\", \"month\", \"day\"]])","859bbf69":"plt.subplots(1,1,figsize=(12,6))\nall_data.groupby('year_month')['SalePrice'].median().plot(color = \"tomato\",linestyle = \"--\",linewidth=3)\nall_data.groupby('year_month')['SalePrice'].mean().plot(color = \"blue\",linestyle = \"--\",linewidth=3)\nplt.gca().legend(('median','mean'))\nplt.xlabel('year_month',fontsize = 15)\nplt.ylabel('House Price',fontsize =15)\nplt.title(\"House Price Vs year_month\",fontsize=22)\nplt.figure(figsize=(30,12))","1b27ff26":"print(corrs.head(15))","60a03063":"print(corrs.tail(15))","34de6552":"plt.figure(figsize=(11,6))\nsns.boxplot(data=data_train, y='SalePrice',x='OverallQual')\nplt.tight_layout()\nplt.title('Overall Quality')","696378ec":"data_train[(data_train['OverallQual']==4 ) & (data_train['SalePrice']>200000)][['GrLivArea','GarageCars','GarageArea','TotalBsmtSF','SalePrice']]","37b21370":"data_train[(data_train['OverallQual']==8 ) & (data_train['SalePrice']>450000)][['GrLivArea','GarageCars','GarageArea','TotalBsmtSF','SalePrice']]","5a319b0d":"data_train[(data_train['OverallQual']==10 ) & (data_train['SalePrice']<200000)][['GrLivArea','GarageCars','GarageArea','TotalBsmtSF','SalePrice']]","34a1c804":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='GrLivArea',y='SalePrice',data=data_train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\nfor index in [457,769,523,1298]:\n    p1.text(data_train['GrLivArea'][index]+50, data_train['SalePrice'][index],s=\"id:\"+str(index)+\"; val\"+str(data_train['GrLivArea'][index]) ,size=14, color='red')\nplt.title('GrLivArea',size=20)\nplt.tight_layout();","3b92717e":"plt.figure(figsize=(12,6))\nsns.boxplot(data=data_train, y='SalePrice',x='GarageCars')\nplt.tight_layout()\nplt.title('GarageCars');","bcf5da20":"print(data_train.groupby('GarageCars')['SalePrice'].count())","96dd4052":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='GarageArea',y='SalePrice',data=data_train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\n\n#new outliers\np1.text(data_train['GarageArea'][691]+15, data_train['SalePrice'][691],s=\"id:\"+str(691)+\"; val\"+str(data_train['GarageArea'][691]) ,size=14, color='red')\np1.text(data_train['GarageArea'][1182]-65, data_train['SalePrice'][1182]-35000,s=\"id:\"+str(1182)+\"; val\"+str(data_train['GarageArea'][1182]) ,size=14, color='red')\np1.text(data_train['GarageArea'][1061]-65, data_train['SalePrice'][1061]-35000,s=\"id:\"+str(1061)+\"; val\"+str(data_train['GarageArea'][1061]) ,size=14, color='red')\n\n#old outliers\np1.text(data_train['GarageArea'][457]-65, data_train['SalePrice'][457]-35000,s=\"id:\"+str(457)+\"; val\"+str(data_train['GarageArea'][457]) ,size=14, color='purple')\np1.text(data_train['GarageArea'][769]-65, data_train['SalePrice'][769]-35000,s=\"id:\"+str(769)+\"; val\"+str(data_train['GarageArea'][769]) ,size=14, color='purple')\np1.text(data_train['GarageArea'][523]-65, data_train['SalePrice'][523]-35000,s=\"id:\"+str(523)+\"; val\"+str(data_train['GarageArea'][523]) ,size=14, color='purple')\np1.text(data_train['GarageArea'][1298]-65, data_train['SalePrice'][1298]-35000,s=\"id:\"+str(1298)+\"; val\"+str(data_train['GarageArea'][1298]) ,size=14, color='purple')\n\n\nplt.title('GarageArea',size=20)\nplt.tight_layout();","47e1425f":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='TotalBsmtSF',y='SalePrice',data=data_train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\n#old outliers\np1.text(data_train['TotalBsmtSF'][457]+15, data_train['SalePrice'][457],s=\"id:\"+str(457)+\"; val\"+str(data_train['TotalBsmtSF'][457]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][691]+15, data_train['SalePrice'][691],s=\"id:\"+str(691)+\"; val\"+str(data_train['TotalBsmtSF'][691]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][1182]-65, data_train['SalePrice'][1182]-35000,s=\"id:\"+str(1182)+\"; val\"+str(data_train['TotalBsmtSF'][1182]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][1061]-65, data_train['SalePrice'][1061]-35000,s=\"id:\"+str(1061)+\"; val\"+str(data_train['TotalBsmtSF'][1061]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][769]-65, data_train['SalePrice'][769]-35000,s=\"id:\"+str(769)+\"; val\"+str(data_train['TotalBsmtSF'][769]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][523]-65, data_train['SalePrice'][523]-35000,s=\"id:\"+str(523)+\"; val\"+str(data_train['TotalBsmtSF'][523]) ,size=14, color='purple')\np1.text(data_train['TotalBsmtSF'][1298]-65, data_train['SalePrice'][1298]-35000,s=\"id:\"+str(1298)+\"; val\"+str(data_train['TotalBsmtSF'][1298]) ,size=14, color='purple')\n\nplt.tight_layout()\nplt.title('TotalBsmtSF',size=20);","f632bcef":"plt.figure(figsize=(12,9))\ncorrmat = data_train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.35]\nsns.heatmap(data_train[top_corr_features].corr(),annot=True,cmap='inferno',square=True,linewidths=1)\nplt.title('Correlations',size=25,y=1.03)\nplt.tight_layout();\n\n","5b12542b":"for variable in data_train.columns:\n    print(\"{}:{}\".format(variable,data_train[variable].loc[457]))\ndata_train['OverallQual'].loc[457]=5","6879eaa2":"data_train.drop(index=[523,1298,691,1061,1182],inplace=True)","b5ca7bf7":"pd.DataFrame(na_ratio,index=na_ratio.index,columns=['Missing Value Ratio']).head(20)","f488aac8":"all_data[\"MasVnrType\"].hist()","e4a3162f":"all_data[\"MasVnrType\"].fillna(\"None\",inplace=True)\nall_data[\"MasVnrArea\"].fillna(0,inplace=True)","eb678b79":"for i in ('MSZoning','Electrical','KitchenQual','Exterior1st','Exterior2nd'):\n    all_data[i+'_mode']=all_data.groupby(\"Neighborhood\")[i].apply(lambda x: x.fillna(x.mode()[0],inplace=True))\n    all_data.loc[(all_data[i].isna()),i] = all_data[i+'_mode']\n    del all_data[i+'_mode']\nfor i in ('MSZoning','Electrical','KitchenQual','Exterior1st','Exterior2nd'):\n    all_data[i].fillna(all_data[i].mode()[0],inplace=True)\n\nall_data['SaleType'].fillna(all_data['SaleType'].mode()[0],inplace=True)","07ba9df8":"plt.figure(figsize=(6,6))\nsns.boxplot(data=all_data, y='LotFrontage')\nplt.tight_layout()\nplt.title('LotFrontage')","23a09975":"plt.figure(figsize=(12,6))\np1=sns.regplot(x='LotFrontage',y='SalePrice',data=data_train,line_kws={'color':'#252525','linewidth':2},ci=0,marker='o')\nplt.title('LotFrontage',size=20)\nplt.tight_layout();","6a78073c":"all_data[(all_data['LotFrontage']>250 )][['GrLivArea','GarageCars','GarageArea','TotalBsmtSF','SalePrice']]","3a34d463":"all_data.loc[(all_data['LotFrontage']>250),'LotFrontage']=np.nan","e8807a39":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel('LotFrontage',size=15)\nplt.xlabel('Neighborhood',size=15)\nmean_lot=all_data.groupby(\"Neighborhood\").median()['LotFrontage']\nsns.barplot(x=mean_lot.index,y=mean_lot)\nfor p in axes.patches:\n            value = p.get_height()\n            x = p.get_x() +.12\n            y = p.get_y() + p.get_height()-5\n            axes.text(x, y, int(value), ha=\"left\",fontsize=15,color='#000000')\nplt.xticks(rotation=90)\nplt.title('Median LotFrontage',color='black')\nplt.tight_layout();","e6773589":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel('LotFrontage',size=15)\nplt.xlabel('Neighborhood',size=15)\nmean_lot=all_data.groupby(\"Neighborhood\").mean()['LotFrontage']\nsns.barplot(x=mean_lot.index,y=mean_lot)\nfor p in axes.patches:\n            value = p.get_height()\n            x = p.get_x() +.12\n            y = p.get_y() + p.get_height()-5\n            axes.text(x, y, int(value), ha=\"left\",fontsize=15,color='#000000')\nplt.xticks(rotation=90)\nplt.title('Mean LotFrontage',color='black')\nplt.tight_layout();","d69881b5":"fig,axes=plt.subplots(1,1,figsize=(12,6))\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.ylabel('LotFrontage',size=15)\nplt.xlabel('MSZoning',size=15)\nmean_lot=all_data.groupby(\"MSZoning\").median()['LotFrontage']\nsns.barplot(x=mean_lot.index,y=mean_lot)\nfor p in axes.patches:\n            value = p.get_height()\n            x = p.get_x() +.12\n            y = p.get_y() + p.get_height()-5\n            axes.text(x, y, int(value), ha=\"left\",fontsize=15,color='#000000')\nplt.xticks(rotation=90)\nplt.title('Mean LotFrontage',color='black')\nplt.tight_layout();","76ae6629":"pd.crosstab(all_data['Neighborhood'],all_data['MSZoning'])","daf6ffb6":"pd.crosstab(all_data['Neighborhood'],all_data['MSZoning'],values=all_data.LotFrontage, aggfunc='median')","b1c0368d":"all_data['zone_neighborhood']=all_data['Neighborhood']+\" \"+all_data[\"MSZoning\"]\nall_data['LotFrontage_medians_1']=all_data.groupby(\"zone_neighborhood\")['LotFrontage'].apply(lambda x: x.fillna(x.median()))\nall_data['LotFrontage_medians_2']=all_data.groupby(\"Neighborhood\")['LotFrontage'].apply(lambda x: x.fillna(x.median()))\ndel all_data['zone_neighborhood']","4149dc1c":"all_data['LotFrontage']\nall_data.loc[(all_data['LotFrontage'].isna()),'LotFrontage'] = all_data['LotFrontage_medians_1']\nall_data.loc[(all_data['LotFrontage'].isna()),'LotFrontage'] = all_data['LotFrontage_medians_2']\ndel all_data['LotFrontage_medians_1']\ndel all_data['LotFrontage_medians_2']","cb7f5165":"all_data[all_data['AgeGarage'].isna()][['GarageType','Age','Neighborhood']]","bc24b050":"all_data[(all_data['Neighborhood']==\"OldTown\") & (all_data['GarageType']==\"Detchd\")]['GarageType'].count()","65fe9846":"all_data[(all_data['Neighborhood']==\"IDOTRR\") & (all_data['GarageType']==\"Detchd\")]['GarageType'].count()","d6074401":"all_data['agegarage_median']=all_data.groupby(['Neighborhood','GarageType'])['AgeGarage'].apply(lambda x: x.fillna(x.median()))\nall_data.loc[(all_data['AgeGarage'].isna()),'AgeGarage'] = all_data['agegarage_median']\ndel all_data['agegarage_median']","04a7c34d":"all_data[all_data['GarageCars'].isna()][['GarageType','Age','Neighborhood']]","a513a426":"all_data['GarageCars_mode']=all_data.groupby(['Neighborhood','GarageType'])['GarageCars'].apply(lambda x: x.fillna(x.mode()[0]))\nall_data.loc[(all_data['GarageCars'].isna()),'GarageCars'] = all_data['GarageCars_mode']\ndel all_data['GarageCars_mode']","c340cc5a":"all_data[all_data['GarageArea'].isna()][['GarageType','Age','Neighborhood']]","92f964e0":"all_data['GarageArea_mode']=all_data.groupby(['Neighborhood','GarageType'])['GarageArea'].apply(lambda x: x.fillna(x.median()))\nall_data.loc[(all_data['GarageArea'].isna()),'GarageArea'] = all_data['GarageArea_mode']\ndel all_data['GarageArea_mode']","89c013b2":"for i in ('Utilities','Functional'):\n    all_data[i+'_mode']=all_data.groupby(['Neighborhood','MSZoning'])[i].apply(lambda x: x.fillna(x.mode()[0]))\n    all_data.loc[(all_data[i].isna()),i] = all_data[i+'_mode']\ndel all_data[i+'_mode']","96dcbe5f":"all_data.isnull().sum().sort_values(ascending=False)","6634b031":"all_data['MoSold'] = all_data['MoSold'].apply(str)\nall_data['YrSold'] = all_data['YrSold'].apply(str)","2eb383ac":"x=  { 20:'1-STORY 1946 & NEWER ALL STYLES',\n        30:'1-STORY 1945 & OLDER',\n        40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n        45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n        50:'1-1\/2 STORY FINISHED ALL AGES',\n        60:'2-STORY 1946 & NEWER',\n        70:'2-STORY 1945 & OLDER',\n        75:'2-1\/2 STORY',\n        80:'SPLIT',\n        85:'SPLIT FOYER',\n        90:'DUPLEX',\n       120:'1-STORY PUD',\n       150:'1-1\/2 STORY PUD',\n       160:'2-STORY PUD',\n       180:'PUD - MULTILEVEL',\n       190:'2 FAMILY CONVERSION'}","9739fe20":"all_data['MSSubClass']=all_data['MSSubClass'].map(x)","a34a73f1":"x=  {        \n       'Ex':5,\n       'Gd':4,\n       'TA':3,\n       'Fa':2,\n       'Po':1,\n       'None':0}","e3148405":"all_data['ExterQual']=all_data['ExterQual'].map(x)\nall_data['ExterCond']=all_data['ExterCond'].map(x)\nall_data['BsmtQual']=all_data['BsmtQual'].map(x)\nall_data['BsmtCond']=all_data['BsmtCond'].map(x)\nall_data['HeatingQC']=all_data['HeatingQC'].map(x)\nall_data['FireplaceQu']=all_data['FireplaceQu'].map(x)\nall_data['GarageCond']=all_data['GarageCond'].map(x)\nall_data['GarageQual']=all_data['GarageQual'].map(x)\nall_data['PoolQC']=all_data['PoolQC'].map(x)\n","a6f2f677":"pd.crosstab(all_data['OverallQual'],all_data['OverallCond'])","def200d2":"all_data['TotalHomeQuality'] = all_data['OverallQual'] + all_data['OverallCond']","5296732b":"all_data['TotalGarageQuality'] = all_data['GarageCond']+all_data['GarageQual']\nall_data['TotalExterQuality'] = all_data['ExterCond']+all_data['ExterQual']\nall_data['TotalBsmtQuality'] = all_data['BsmtCond']+all_data['BsmtQual']","00f205ca":"all_data[['TotalBsmtSF','BsmtUnfSF','GrLivArea','1stFlrSF','2ndFlrSF']]","f1b7b6db":"all_data['TotalSF_finished'] = all_data['TotalBsmtSF'] + all_data['GrLivArea']-all_data['BsmtUnfSF']\nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['GrLivArea']\nall_data['Bsmt_Unf_share']=all_data['BsmtUnfSF']\/all_data['TotalSF']","ad877871":"all_data[['FullBath','HalfBath','BsmtFullBath','BsmtHalfBath']]","f1651df7":"all_data['TotalBathrooms'] = (all_data['FullBath'] + (0.5 * all_data['HalfBath']) + all_data['BsmtFullBath'] + (0.5*all_data['BsmtHalfBath']))","dad5573d":"all_data[['OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']]","a6733841":"all_data['low_qual_share']=all_data['LowQualFinSF']\/all_data['GrLivArea']","5be245f1":"all_data['TotRmsAbvGrd_withoutbedroomskitchen']=all_data['TotRmsAbvGrd']-all_data['BedroomAbvGr']-all_data['KitchenAbvGr']\n       ","17bc819a":"all_data['TotalPorchSF'] = all_data['OpenPorchSF'] + all_data['EnclosedPorch'] + all_data['3SsnPorch'] + all_data['ScreenPorch']","2b83015c":"all_data['MiscVal'].corr(all_data['SalePrice'])","d00e2487":"num_cols = all_data.select_dtypes(include=['number'])\ncat_cols = all_data.select_dtypes(include=['object'])\n\nprint(f'The dataset contains {len(num_cols.columns.tolist())} numerical columns \\\nand {len(cat_cols.columns.tolist())} categorical columns')","9bd2db09":"print(num_cols.columns)","af9b414a":"num_cols=num_cols[['SalePrice','LotFrontage', 'LotArea', 'MasVnrArea', \\\n                   'GarageArea', 'WoodDeckSF','TotalPorchSF','TotalSF', \\\n                   'Age','AgeRemodAdd',\\\n                   'TotalHomeQuality','TotalExterQuality','TotalBsmtQuality','HeatingQC','FireplaceQu',\\\n                   'TotalGarageQuality','PoolQC','Fireplaces',\\\n                   'TotalBathrooms','KitchenAbvGr','BedroomAbvGr',\\\n                   'Bsmt_Unf_share','low_qual_share', 'TotRmsAbvGrd_withoutbedroomskitchen']]\n      ","f1a9499a":"plt.figure(figsize=(12,9))\ncorrmat = num_cols.corr()\nprint(corrmat[\"SalePrice\"])\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.30]\nsns.heatmap(num_cols[top_corr_features].corr(),annot=True,cmap='inferno',square=True,linewidths=1)\nplt.title('Correlations',size=25,y=1.03)\nplt.tight_layout();","26b00e5f":"print(num_cols.columns)","e77ad28c":"num_cols.head()","0195c174":"data=num_cols.columns\nfig,axes=plt.subplots(ncols=2,nrows=15,figsize=(12,60))\nfor i, feature in enumerate(all_data[data]):\n    row = int(i\/2)\n    col = i%2\n    sns.regplot(x=all_data[feature],y=all_data['SalePrice'], ax=axes[row][col],ci=0,line_kws={'color':'#000000','linewidth':2},marker='o')\nplt.suptitle('Explanatory Features',y=1,size=20)\nall_data[data].iloc[:, i]\nplt.tight_layout()","f610e69e":"list_log1p=['LotFrontage','LotArea','MasVnrArea','WoodDeckSF','TotalSF','TotalPorchSF','GarageArea']\nfor i in list_log1p:\n    num_cols[i].hist()\n    plt.title(i)\n    plt.show()\n    if ((i != \"GarageArea\") & (i!='LotFrontage')):\n        num_cols[i]=np.log1p(num_cols[i])","bd4d49cb":"num_cols_name=num_cols.columns","8e2503bb":"num_cols.isnull().sum().sort_values(ascending=False)","4661227e":"print(cat_cols.columns)","5cc4b5e7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor feature in cat_cols.columns:\n    cat_cols[feature]=le.fit_transform(cat_cols[feature])","b330421d":"cat_cols","515609d0":"plt.figure(figsize=(15,15))\nsns.heatmap(cat_cols.corr(), square=True, mask = np.triu(cat_cols.corr()), cmap= \"coolwarm\")","7c68c488":"cat_corr = cat_cols.corr()\ncat_corr_triu = cat_corr.where(np.triu(np.ones(cat_corr.shape), k=1).astype(np.bool))\n\ncat_collinear_features = [column for column in cat_corr_triu.columns if any(cat_corr_triu[column] > 0.60) or any(cat_corr_triu[column] <-0.60)]","41660134":"cat_collinear_features","0cb354e8":"cat_cols.drop(columns = cat_collinear_features,inplace=True)","f9ebfa3d":"cat_cols_name=cat_cols.columns","8a963727":"all_data=pd.concat([num_cols, cat_cols], axis = 1) ","b26e9e17":"all_data.describe","5cd6e8f0":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer \n\nX_dummy=all_data[['MSSubClass', 'MSZoning',\\\n       'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\\\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\\\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'MasVnrType', \\\n       'Foundation', 'BsmtExposure',\\\n       'BsmtFinType1', 'BsmtFinType2', 'Heating', 'CentralAir',\\\n       'Electrical', 'Functional', 'GarageType', 'GarageFinish',\\\n       'PavedDrive', 'Fence',\\\n       'MiscFeature', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition']]\nct = ColumnTransformer([(\"dummy\", OneHotEncoder(),[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])], remainder=\"passthrough\") \nX_dummy=ct.fit_transform(X_dummy).toarray()","a7cf3416":"data_train = all_data[:ntrain]\nX_dummy_train=X_dummy[:ntrain]\ndata_test = all_data[ntrain:]\nX_dummy_test=X_dummy[ntrain:]","bfdc6d3c":"data_train","840027e1":"data_train['SalePrice']=np.log1p(data_train['SalePrice'])","b0399165":"plt.figure(figsize=(12,6))\nmu, sigma = norm.fit(data_train['SalePrice'])\nsns.distplot(data_train['SalePrice'],fit=norm,color='b',rug=True,kde_kws={'shade':True,'color':'b','alpha':.2})\nplt.legend(['$\\mu=$ {:.3f} and $\\sigma=$ {:.3f}'.format(mu, sigma)],fontsize=14)\nplt.title('Sale Price',size=20)\nplt.tight_layout();","370e55b8":"data_test","43638f93":"y_train=data_train[data_train.columns[0]].values\n\nprint(data_train.columns)\n\nX_train = data_train[data_train.columns[1:24]].values\nX_test = data_test[data_test.columns[1:24]].values\nprint(data_train[data_train.columns[1:24]].columns)","f28770ed":"X_train =np.concatenate((X_train,X_dummy_train),axis=1)\nX_test =np.concatenate((X_test,X_dummy_test),axis=1)","b98eb9e3":"strata = data_train['Neighborhood'].values\n\nfrom sklearn import model_selection\n\nX_train_train, X_train_validation, y_train_train, y_train_validation = model_selection.train_test_split(X_train, y_train, test_size=0.25,stratify=strata, random_state=42 ) ","05ce7399":"from sklearn import preprocessing\nstd_scale = preprocessing.StandardScaler().fit(X_train_train[:,0:16])\nX_train_train_std = std_scale.transform(X_train_train[:,0:16])\nX_train_validation_std = std_scale.transform(X_train_validation[:,0:16])\nX_test_std = std_scale.transform(X_test[:,0:16])\n\nX_train_train_std=np.concatenate((X_train_train_std,X_train_train[:,16:]),axis=1)\nX_train_validation_std=np.concatenate((X_train_validation_std,X_train_validation[:,16:]),axis=1)\nX_test_std=np.concatenate((X_test_std,X_test[:,16:]),axis=1)","ddb04dca":"from sklearn import model_selection\n# define model evaluation method\ncv = model_selection.RepeatedKFold(n_splits=5,random_state=42 )","bc8e1f2a":"from sklearn import linear_model\nfrom sklearn import metrics\nn_alphas = 200\nalphas = np.logspace(-5, 5, n_alphas)\n\nscore = 'neg_root_mean_squared_error'\nparam_grid={ 'alpha': alphas }\nridge = linear_model.Ridge()\ngrid_pred = model_selection.GridSearchCV(\n        ridge,\n        param_grid,\n        cv=cv,\n        scoring=score)\ngrid_pred.fit(X_train_train_std, y_train_train)\nprint('''neg RMSE d'une regression ridge avec cv (apprentissage): {:.4f}'''.format(grid_pred.best_score_))\ny_train_validation_pred_cv = grid_pred.predict(X_train_validation_std)\nrmse_cv = np.sqrt(metrics.mean_squared_error(y_train_validation, y_train_validation_pred_cv))\nprint('''RMSE d'une regression ridge avec cv (g\u00e9n\u00e9ralisation): {:.4f}'''.format(rmse_cv))\n\nfig, ax = plt.subplots(figsize=(5, 5))\nplt.scatter(y_train_validation, y_train_validation_pred_cv)\np1 = max(max(y_train_validation_pred_cv), max(y_train_validation))\np2 = min(min(y_train_validation_pred_cv), min(y_train_validation))\nplt.plot([p1, p2], [p1, p2], '--',c='red')\nax.axes.axis('equal')\nplt.title('Ridge model, {}'.format(grid_pred.best_estimator_))\nplt.ylabel('Model predictions')\nplt.xlabel('Truths')","e95e241a":"print(grid_pred.best_params_)\nr2_cv = metrics.r2_score(y_train_validation, y_train_validation_pred_cv)\nprint('''r\u00b2 d'une regression ridge avec cv (g\u00e9n\u00e9ralisation): {:.4f}'''.format(r2_cv))","03d75f1d":"alpha=grid_pred.best_params_['alpha']\nstd_scale = preprocessing.StandardScaler().fit(X_train[:,0:16])\nX_train_std = std_scale.transform(X_train[:,0:16])\nX_test_std = std_scale.transform(X_test[:,0:16])\n\nX_train_std=np.concatenate((X_train_std,X_train[:,16:]),axis=1)\nX_test_std=np.concatenate((X_test_std,X_test[:,16:]),axis=1)\nridge = linear_model.Ridge()\nridge.set_params(alpha=alpha)\nridge.fit(X_train_std, y_train)\n","2c9b75fb":"ridge_coef=pd.DataFrame(ridge.coef_[0:23],index=data_train.columns[1:24], columns=[\"param\"])\nridge_coef=ridge_coef.sort_values(by = 'param',ascending = False)","c0c9a922":"ridge_coef","e39bd8c1":"fig,axes=plt.subplots(1,1,figsize=(12,9))\nsns.barplot(y=ridge_coef['param'],x=ridge_coef.index,palette='Spectral')\nplt.title('ridge coefficient by numerical features',size=20,color='black',y=1.03)\nplt.xticks(rotation=90)\nfor p in axes.patches:\n            value = p.get_height()\n            if value <=.5:\n                continue\n            x = p.get_x() + p.get_width()-.9\n            y = p.get_y() + p.get_height()+(.02*value)\n            axes.text(x, y, str(value)[1:5], ha=\"left\",fontsize=12,color='#000000')\nplt.tight_layout();","4ac73325":"y_train_predict = ridge.predict(X_train_std)\nprint(\"rmse_apprentissage_final: {}\".format(np.sqrt(metrics.mean_squared_error(y_train, y_train_predict))))","ea7f1145":"fig, ax = plt.subplots(figsize=(5, 5))\nplt.scatter(y_train, y_train_predict)\np1 = max(max(y_train_predict), max(y_train))\np2 = min(min(y_train_predict), min(y_train))\nplt.plot([p1, p2], [p1, p2], '--',c='red')\nax.axes.axis('equal')\nplt.title('Ridge model, {}'.format(grid_pred.best_estimator_))\nplt.ylabel('Model predictions')\nplt.xlabel('Truths')","da9f9bc9":"y_test = ridge.predict(X_test_std)\ndata_y_predict=pd.DataFrame(y_test,index=data_test.index,columns=[\"log_SalePrice\"])\ndata_y_predict['SalePrice']=np.expm1(data_y_predict['log_SalePrice'])\ndata_y_predict['id']=data_y_predict.index\ndata_y_predict['id']=data_y_predict['id']+1\ndata_y_predict=data_y_predict[['id','SalePrice']]","c2cab051":"data_y_predict","a1934ae6":"data_y_predict.to_csv('submission.csv',index = False, header=True)","c520bcb7":"Concatenate numerical variables with dummy variables","54c42ca1":"rearrangement of the numerical columns","c218c3cf":"LowQualFinSF: Low quality finished square feet (all floors)","ccbf49f6":"LotFrontage is linear feet of street connected to property. Imputing missing values by the median LotFrontage of the neighborhood\/MSZoning seems best option. In a second step, I impute with the median of the neighborhood.","155fd857":"Reduce and center the data","8cf059a1":"Let's look at the heatmap of the correlations of categorical variables","49ed8f3c":"Data description says:\n-GarageType : NA means No garage\n-GarageFinish : NA means No garage\n-GarageQual : NA means No garage \n-GarageCond : NA means No garage","301c4616":"Ridge coefficients","ddd3aa1c":"Using Neighborhood for the stratification of the train_test_split seems good option","28671ed8":"BsmtFullBath: Basement full bathrooms\nBsmtHalfBath: Basement half bathrooms\nFullBath: Full bathrooms above grade\nHalfBath: Half baths above grade","33208bd0":"Adding new features","be196df0":"Submission files","e599b238":"# Data Year and data age","39eff1c8":"Let's first look at the effect of the sales date.","bb5c9a30":"None is yet a category","d0ca0884":"# Modelling","8b377e9b":"merge the two dataset for missing value and outliers treatment","10886626":"Transform the categorical variables in dummy variables","2e14079e":"Creation of Fold\n","e2e22fd3":"Let's look more particularly at index 457 which always seems average except for the overall quality","4e07da91":"imputation of garage variable missing value ","7ca5da7e":"correlation of the missing value","9bb4ca18":"OpenPorchSF: Open porch area in square feet\nEnclosedPorch: Enclosed porch area in square feet\n3SsnPorch: Three season porch area in square feet\nScreenPorch: Screen porch area in square feet","d3d9ab4c":"OverallQual: Rates the overall material and finish of the house","ad89238e":"Training on the entire dataset with the best parameter","24585910":"numerical data","caeae235":"# first imputation thanks to strict nomenclature ","6d3cea01":"# Missing values","8b9f1c83":"# Load data","0f43b62d":"MSZoning: Identifies the general zoning classification of the sale.\nElectrical: Electrical system\nKitchenQual: Kitchen quality\nExterior1st: Exterior covering on house\nExterior2nd: Exterior covering on house (if more than one material)\nSaleType: Type of sale\nWe can fill Na values of above features with their most repeating value.\n","92c82339":"We can not notice huges differences during the period. We can show a small seasonality","ab58ef43":"load data","36c6a18e":"let's look at the most correlated data\nExploring the features that highly correlated with the target value is important. Because they effect model performance more than other features.","f1f96def":"Target variable is right skewed. Regression models work better with normal distributed data. We'll deal this before modelling.","04976c96":"# Data organization","d43b13dd":"dropping collinear features","f4447fde":"Explanatory Features vs SalePrice","dffefa8c":"In skewed data, the tail region may act as an outlier for the statistical model and that\noutliers adversely affect the model\u2019s performance especially regression-based models.\nI transform the skewed data with log1p to improve model.","f22f3199":"log1p transform of the dependent variable","e361fe30":"-OverallQual: Rates the overall material and finish of the house\n-OverallCond: Rates the overall condition of the house","f81276e1":"Changing some numeric variables.\nThere are 3 variables that are seems numeric but should actually be categorical in the data.\nMSSubClass,YrSold and MoSold.","c4df2488":"Exploring the features that highly correlated with the target value is important. Because they effect model performance more than other features","25e9f312":"Data description says:\n-Alley : NA means \"no alley access\"\n-PoolQC : NA means \"no Pool\".\n-Fence : NA means \"no fence\"\n-MiscFeature : NA means \"no misc feature\"\n-FireplaceQu : NA means \"no fireplace\"\nSo we can fill all NA values of this features with 'None'","4e3c1060":"MiscVal: Value of miscellaneous feature","0a42cb4d":"# missing value imputation","ef11549d":"unnecessary column","dcc84547":"-TotalBsmtSF Total square feet of basement area\n-GrLivArea: Above grade (ground) living area square feet\n-BsmtUnfSF: Unfinished square feet of basement area","7fa6c358":"Ridge Regression\n","afd5d750":"categorical variables","e32afbb4":"we can note some outliers.","883b4e38":"# Exploring Important Features","1ac20e57":"Test data might has some outliers like we discovered in train data. So deleting this outliers may affect badly to the model.\nHowever this outliers can be observe more than one features.(GrLivArea,TotalBsmtSF and the features we create later)\nI believe deleting them improve the model.","e7878581":"Spliting the data_train and tha data_test","411f6f4a":"Data description says:\n-BsmtQual: NA means No Basement\n-BsmtCond: NA means No Basement\n-BsmtExposure: NA means No Basement   \n-BsmtFinType1: NA means No Basement \n-BsmtFinType2: NA means No Basement   ","020ea207":"# Feature Engineering"}}