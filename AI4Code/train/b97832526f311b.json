{"cell_type":{"a57892c3":"code","68135930":"code","ca91076a":"code","5b910b5e":"code","a63a1fad":"code","2a93b62b":"code","37fa8625":"code","f6156fc8":"code","8502f8fa":"code","3498175b":"code","4792ebf6":"code","fd1222cb":"code","d6ca2cb0":"code","82b5f3de":"code","9e617641":"code","77944fe8":"code","3ce6767d":"code","5ac946cf":"code","5587e046":"code","8865e3ca":"code","b36be9fa":"code","b3a3d807":"code","fea43233":"code","110ff221":"code","f940b7bd":"code","bb11f4b6":"code","8afdef38":"code","1a2e9e44":"code","41a523e2":"code","25df33d8":"code","9154f8a6":"code","e986180f":"code","3c6dd019":"code","083f48f0":"code","cca5bf3a":"code","c8befbfd":"code","99fade3e":"code","b3a3069d":"code","2267683c":"code","e63c164f":"code","e1b944f6":"code","767f2901":"code","18ce0b86":"code","b515c989":"code","9a98af57":"code","e551538e":"code","0dc91a24":"code","611d8569":"code","932d1278":"code","56d04362":"code","d1800589":"code","d1ef78b4":"code","0eba1ff4":"markdown","7e1920d2":"markdown","7f4e1f2a":"markdown","1b349575":"markdown"},"source":{"a57892c3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nfrom lightgbm.sklearn import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score,accuracy_score\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA\ngc.enable()\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","68135930":"#Dataset view\npath1= \"..\/input\/\"\ndata_files=list(os.listdir(path1))\ndf_files=pd.DataFrame(data_files,columns=['File_Name'])\ndf_files['Size_in_MB']=df_files.File_Name.apply(lambda x:round(os.stat(path1+x).st_size\/(1024*1024),2))\ndf_files","ca91076a":"#All functions\n\n#FUNCTION FOR PROVIDING FEATURE SUMMARY\ndef feature_summary(df_fa):\n    print('DataFrame shape')\n    print('rows:',df_fa.shape[0])\n    print('cols:',df_fa.shape[1])\n    col_list=['Null','Unique_Count','Data_type','Max\/Min','Mean','Std','Skewness','Sample_values']\n    df=pd.DataFrame(index=df_fa.columns,columns=col_list)\n    df['Null']=list([len(df_fa[col][df_fa[col].isnull()]) for i,col in enumerate(df_fa.columns)])\n    #df['%_Null']=list([len(df_fa[col][df_fa[col].isnull()])\/df_fa.shape[0]*100 for i,col in enumerate(df_fa.columns)])\n    df['Unique_Count']=list([len(df_fa[col].unique()) for i,col in enumerate(df_fa.columns)])\n    df['Data_type']=list([df_fa[col].dtype for i,col in enumerate(df_fa.columns)])\n    for i,col in enumerate(df_fa.columns):\n        if 'float' in str(df_fa[col].dtype) or 'int' in str(df_fa[col].dtype):\n            df.at[col,'Max\/Min']=str(round(df_fa[col].max(),2))+'\/'+str(round(df_fa[col].min(),2))\n            df.at[col,'Mean']=df_fa[col].mean()\n            df.at[col,'Std']=df_fa[col].std()\n            df.at[col,'Skewness']=df_fa[col].skew()\n        df.at[col,'Sample_values']=list(df_fa[col].unique())\n           \n    return(df.fillna('-'))\n\ndef drop_corr_col(df_corr):\n    upper = df_corr.where(np.triu(np.ones(df_corr.shape),\n                          k=1).astype(np.bool))\n    # Find index of feature columns with correlation greater than 0.999\n    to_drop = [column for column in upper.columns if any(upper[column] > 0.999)]\n    return(to_drop)","5b910b5e":"%%time\n#Reading train data\ntrain=pd.read_csv(path1+'application_train.csv',usecols=['SK_ID_CURR','TARGET'])\n#Reading bureau data\nbur=pd.read_csv(path1+'bureau.csv')\nprint('bureau set reading complete...')\n#Reading bureau balance\nbur_bal=pd.read_csv(path1+'bureau_balance.csv')\nprint('bureau balance set reading complete...')","a63a1fad":"train.head()","2a93b62b":"bur.head()","37fa8625":"bur_fs=feature_summary(bur)","f6156fc8":"bur_fs","8502f8fa":"bur_fs[bur_fs.Data_type=='object']","3498175b":"%%time\nfor col in ['CREDIT_CURRENCY','CREDIT_TYPE','CREDIT_ACTIVE']:\n    bur[col]=bur[col].apply(lambda x: str(x).replace(\" \",\"_\")) \n\ndummy=pd.DataFrame()\nfor col in ['CREDIT_CURRENCY','CREDIT_TYPE','CREDIT_ACTIVE']:\n    dummy=pd.concat([dummy,pd.get_dummies(bur[col],prefix='DUM_'+col)],axis=1)","4792ebf6":"dummy.head()","fd1222cb":"bur_f=pd.concat([bur.drop(['CREDIT_CURRENCY','CREDIT_TYPE','CREDIT_ACTIVE'],axis=1),dummy],axis=1)","d6ca2cb0":"bur_f.head()","82b5f3de":"bur_f.shape","9e617641":"bur_f['CALC_PER_CREDIT_MAX_OVERDUE']=bur_f['AMT_CREDIT_MAX_OVERDUE']\/bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_PER_CREDIT_SUM_DEBT']=bur_f['AMT_CREDIT_SUM_DEBT']\/bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_PER_CREDIT_SUM_LIMIT']=bur_f['AMT_CREDIT_SUM_LIMIT']\/bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_PER_CREDIT_SUM_OVERDUE']=bur_f['AMT_CREDIT_SUM_OVERDUE']\/bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_PER_ANNUITY']=bur_f['AMT_ANNUITY']\/bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_CREDIT_LIMIT_CROSSED']=bur_f['AMT_CREDIT_SUM_LIMIT']-bur_f['AMT_CREDIT_SUM']\nbur_f['CALC_CREDIT_PER_DAY']=bur_f['AMT_CREDIT_SUM']\/bur_f['DAYS_CREDIT_ENDDATE'].abs()\nbur_f['CALC_CREDIT_CLOSED']=(bur_f['DAYS_ENDDATE_FACT'] < 0).astype(int)","77944fe8":"bur_f.shape","3ce6767d":"del bur,dummy\ngc.collect()","5ac946cf":"bur_bal.head()","5587e046":"bur_bal[bur_bal.SK_ID_BUREAU==5715448]","8865e3ca":"bur_bal['MONTHS_BALANCE']=bur_bal.MONTHS_BALANCE.abs()","b36be9fa":"%%time\nbur_bal_f=bur_bal.groupby(['SK_ID_BUREAU','STATUS']).aggregate({'STATUS':['count'],'MONTHS_BALANCE':['max','min']})\nbur_bal_f.reset_index(inplace=True)\nbur_bal_f.columns=['SK_ID_BUREAU','STATUS','STATUS_count','MONTHS_BALANCE_max','MONTHS_BALANCE_min']","b3a3d807":"bur_bal_f.head()","fea43233":"dummy=pd.get_dummies(bur_bal_f['STATUS'],prefix='DUM_STATUS')","110ff221":"dummy.head()","f940b7bd":"bur_bal_ff=pd.concat([bur_bal_f.drop(['STATUS'],axis=1),dummy],axis=1)","bb11f4b6":"bur_bal_ff.head()","8afdef38":"dummy_col=[x for x in bur_bal_ff.columns if 'DUM_' in x]","1a2e9e44":"%%time\nfor col in dummy_col:\n    bur_bal_ff[col]=bur_bal_ff.apply(lambda x: x.STATUS_count if x[col]==1 else 0,axis=1)","41a523e2":"bur_bal_ff.head()","25df33d8":"bur_bal_ff.drop('STATUS_count',axis=1,inplace=True)","9154f8a6":"bur_bal_ff.shape","e986180f":"bur_bal_cols=[x for x in list(bur_bal_ff.columns) if x not in ['SK_ID_BUREAU']]\nbur_bal_agg={}\nbur_bal_name=['SK_ID_BUREAU']\nfor col in bur_bal_cols:\n    if 'DUM_' in col:\n        bur_bal_agg[col]=['sum']\n        bur_bal_name.append(col)\n    elif '_max' in col:\n        bur_bal_agg[col]=['max']\n        bur_bal_name.append(col)\n    elif '_min' in col:\n        bur_bal_agg[col]=['min']\n        bur_bal_name.append(col)\n    else:\n        bur_bal_agg[col]=['sum','mean']\n        bur_bal_name.append(col+'_'+'sum')\n        bur_bal_name.append(col+'_'+'mean')","3c6dd019":"%%time\nbur_bal_fg=bur_bal_ff.groupby('SK_ID_BUREAU').aggregate(bur_bal_agg)\nbur_bal_fg.reset_index(inplace=True)\nbur_bal_fg.columns=bur_bal_name","083f48f0":"bur_bal_fg.head()","cca5bf3a":"del bur_bal,bur_bal_f,bur_bal_ff\ngc.collect()","c8befbfd":"bur_combi=bur_f.join(bur_bal_fg.set_index('SK_ID_BUREAU'),on='SK_ID_BUREAU',lsuffix='_BU', rsuffix='_BUB')","99fade3e":"del bur_bal_fg\ngc.collect()","b3a3069d":"bur_combi_fs=feature_summary(bur_combi)","2267683c":"bur_combi_fs","e63c164f":"bur_combi_cols=[x for x in list(bur_combi.columns) if x not in ['SK_ID_CURR','SK_ID_BUREAU']]\nbur_combi_agg={}\nbur_combi_name=['SK_ID_CURR','SK_ID_BUREAU']\nfor col in bur_combi_cols:\n    if 'DUM_' in col:\n        bur_combi_agg[col]=['sum']\n        bur_combi_name.append(col+'_'+'sum')\n    elif 'AMT_' in col:\n        bur_combi_agg[col]=['sum','mean','max','min','var','std']\n        bur_combi_name.append(col+'_'+'sum')\n        bur_combi_name.append(col+'_'+'mean')\n        bur_combi_name.append(col+'_'+'max')\n        bur_combi_name.append(col+'_'+'min')\n        bur_combi_name.append(col+'_'+'var')\n        bur_combi_name.append(col+'_'+'std')\n    elif 'CNT_' in col:\n        bur_combi_agg[col]=['sum','max','min','count']\n        bur_combi_name.append(col+'_'+'sum')\n        bur_combi_name.append(col+'_'+'max')\n        bur_combi_name.append(col+'_'+'min')\n        bur_combi_name.append(col+'_'+'count')\n    elif 'DAYS_' in col:\n        bur_combi_agg[col]=['sum','max','min']\n        bur_combi_name.append(col+'_'+'sum')\n        bur_combi_name.append(col+'_'+'max')\n        bur_combi_name.append(col+'_'+'min')\n    elif 'CALC_' in col:\n        bur_combi_agg[col]=['mean']\n        bur_combi_name.append(col+'_'+'mean')\n    else:\n        bur_combi_agg[col]=['sum']\n        bur_combi_name.append(col+'_'+'sum')\n       \n","e1b944f6":"%%time\nbur_combi_f=bur_combi.groupby(['SK_ID_CURR','SK_ID_BUREAU']).aggregate(bur_combi_agg)                 \nbur_combi_f.reset_index(inplace=True)\nbur_combi_f.columns=bur_combi_name","767f2901":"bur_combi_f.head()","18ce0b86":"bur_combi_cols=list(bur_combi_f.columns)\nbur_combi_agg={}\nbur_combi_name=['SK_ID_CURR']\nfor col in bur_combi_cols:\n    if 'SK_ID_CURR'==col:\n        bur_combi_agg[col]=['count']\n        bur_combi_name.append('SK_ID_BUREAU_count')\n    elif '_sum'==col:\n        bur_combi_agg[col]=['sum']\n        bur_combi_name.append(col)\n    elif '_mean' in col:\n        bur_combi_agg[col]=['mean']\n        bur_combi_name.append(col)\n    elif '_max' in col:\n        bur_combi_agg[col]=['max']\n        bur_combi_name.append(col)\n    elif '_min' in col:\n        bur_combi_agg[col]=['min']\n        bur_combi_name.append(col)\n    elif '_count' in col:\n        bur_combi_agg[col]=['sum']\n        bur_combi_name.append(col)\n    elif '_var' in col:\n        bur_combi_agg[col]=['mean']\n        bur_combi_name.append(col)\n    elif '_std' in col:\n        bur_combi_agg[col]=['mean']\n        bur_combi_name.append(col)\n    else:\n        bur_combi_agg[col]=['sum']\n        bur_combi_name.append(col)","b515c989":"%%time\nbur_combi_fg=bur_combi_f.groupby(['SK_ID_CURR']).aggregate(bur_combi_agg)                 \nbur_combi_fg.reset_index(inplace=True)\nbur_combi_fg.columns=bur_combi_name","9a98af57":"df_bur_target=train.join(bur_combi_fg.set_index('SK_ID_CURR'),on='SK_ID_CURR',lsuffix='_AP', rsuffix='_BU')","e551538e":"df_bur_target.head()","0dc91a24":"df_bur_target.shape","611d8569":"train_X,test_X,train_y,test_y=train_test_split(df_bur_target.drop(['SK_ID_CURR','TARGET'],axis=1),df_bur_target['TARGET'],random_state=200)\nmodel =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\nmodel.fit(train_X,train_y)\nscore2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\nprint(score2)","932d1278":"df_bur=df_bur_target.drop(['SK_ID_CURR','TARGET'],axis=1)","56d04362":"%%time\n#FEATURE EXCLUSION\nscore=0\nscore1=0\nscore2=0\ndrop_list=[]\ncol_list=list(df_bur.columns)\n\n\nwhile True:\n    score1=0\n    score2=0\n    for i,col in enumerate(col_list):\n        col_list.remove(col)\n        train_X,test_X,train_y,test_y=train_test_split(df_bur[col_list],train['TARGET'],random_state=200)\n        model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n        model.fit(train_X,train_y)\n        score2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\n        col_list.extend([col])\n#        dummy_1.at[i,'score']=score2\n        if score1<score2:\n            score1=score2\n            col1=col\n#        print('dropped col',col,':',score2)\n    if score<score1:\n        score=score1\n        print('dropped col',col1,':',score)\n        drop_list.extend([col1])\n        col_list.remove(col1)\n    else:\n        print('Best score achieved')\n        break\nprint(drop_list)\nprint('best score:',score)","d1800589":"# select_list=['CALC_PER_CREDIT_SUM_DEBT_mean','AMT_CREDIT_MAX_OVERDUE_mean','DAYS_CREDIT_min','SK_ID_BUREAU_count','AMT_CREDIT_SUM_mean',\n#              'DAYS_CREDIT_ENDDATE_max','AMT_CREDIT_SUM_LIMIT_max','DUM_STATUS_1_sum','DAYS_CREDIT_sum','AMT_CREDIT_SUM_DEBT_max']\n# col_list=[x for x in list(df_bur_target.columns) if x not in select_list]\n# col_list.remove('SK_ID_CURR')\n# col_list.remove('TARGET')","d1ef78b4":"# %%time\n# score=0\n# score1=0\n# score2=0\n\n# k=1\n\n\n# while True:\n#     score1=0\n#     score2=0\n#     temp_list=select_list\n#     for i,col in enumerate(col_list):\n#         try:\n#             if k==0:\n#                 train_X,test_X,train_y,test_y=train_test_split(df_bur_target[col],df_bur_target['TARGET'],random_state=200)\n#                 model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n#                 model.fit(np.array(train_X).reshape(-1,1),train_y)\n#                 score2=roc_auc_score(test_y,model.predict_proba(np.array(test_X).reshape(-1,1))[:,1])\n#             else:\n#                 temp_list.extend([col])\n#                 train_X,test_X,train_y,test_y=train_test_split(df_bur_target[temp_list],df_bur_target['TARGET'],random_state=200)\n#                 model =LGBMClassifier(learning_rate=0.05,n_estimators=200,n_jobs=-1,reg_alpha=0.1,min_split_gain=.1,verbose=-1)\n#                 model.fit(train_X,train_y)\n#                 score2=roc_auc_score(test_y,model.predict_proba(test_X)[:,1])\n#                 temp_list.remove(col)\n#         except:\n#             print('Exception raised exclude:',col)\n#             col_list.remove(col)\n            \n#         if score1<score2:\n#             score1=score2\n#             col1=col\n# #        print('dropped col',col,':',score2)\n#     k=k+1\n#     if ((score<score1) & (k<=10)):\n#         score=score1\n#         print('select col',col1,':',score)\n#         select_list.extend([col1])\n#         col_list.remove(col1)\n#     else:\n#         print('Best score achieved')\n#         break\n    \n# print(select_list)\n# print('best score:',score)","0eba1ff4":"* Base score 0.65767686641552\n* col to drop: AMT_ANNUITY_min  best score: 0.6589085792540271\n* col to drop: CREDIT_DAY_OVERDUE_max  best score: 0.6589349471341632\n* col to drop: AMT_CREDIT_SUM_LIMIT_mean  best score: 0.6592303121197545","7e1920d2":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/home-credit\/home_credit.png\" alt=\"Count of Operation\" height=\"800\" width=\"800\"><\/img>","7f4e1f2a":"* select col CALC_PER_CREDIT_SUM_OVERDUE_mean : 0.659498139677538\n* select col DAYS_ENDDATE_FACT_max : 0.6604809385408974\n* Best score achieved\n* ['CALC_PER_CREDIT_SUM_DEBT_mean', 'AMT_CREDIT_MAX_OVERDUE_mean', 'DAYS_CREDIT_min', 'SK_ID_BUREAU_count', 'AMT_CREDIT_SUM_mean', 'DAYS_CREDIT_ENDDATE_max', 'AMT_CREDIT_SUM_LIMIT_max', 'DUM_STATUS_1_sum', 'DAYS_CREDIT_sum', 'AMT_CREDIT_SUM_DEBT_max', 'CALC_PER_CREDIT_SUM_OVERDUE_mean', 'DAYS_ENDDATE_FACT_max']\n* best score: 0.6604809385408974\n* CPU times: user 3h 46min 4s, sys: 25.6 s, total: 3h 46min 29s\n* Wall time: 56min 53s","1b349575":"<h2>A basic approach for preparing Bureau Data<\/h2>\n<ol>\n<li>Analyzing ***bureau*** and ***bureau_balance*** tables\n<li>Converting categorical features into dummies\n<li>Aggregating ***bureau_balance*** on SK_ID_BUREAU.\n<li>Above step ensures we have only one row for SK_ID_BUREAU.\n<li>Join bureau with ***bureau_balance*** on SK_ID_BUREAU\n<li>Aggregate joined table on SK_ID_CURR.\n<li>Aggregation on joined table ensures we get a single line for SK_ID_CURR. This can be further joined with ***application*** table.\n<li>Dropping highly correlated features"}}