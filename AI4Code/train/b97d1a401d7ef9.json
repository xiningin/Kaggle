{"cell_type":{"b623f395":"code","1043dd3c":"code","b9152096":"code","5c009e8a":"code","b16e7eb5":"code","5eabf60a":"code","c905a519":"code","781fb90e":"code","bde4a69a":"markdown","a9a26535":"markdown","3ef90f77":"markdown","a79dd971":"markdown","053024a4":"markdown","d46d1e27":"markdown","495edd12":"markdown","c9712833":"markdown","314360f4":"markdown","f6d95e88":"markdown","1f316e5d":"markdown","99cc9e36":"markdown","9aa7685f":"markdown","0514ec13":"markdown","464801a7":"markdown","e540fe63":"markdown","a7b8d487":"markdown","100b46a9":"markdown"},"source":{"b623f395":"import pandas as pd\n%pylab inline","1043dd3c":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n# read data\ndf = pd.read_csv('..\/input\/google-job-skills\/job_skills.csv')\n# display multiple outputs\ndf.head(3)\ndf.tail(3)","b9152096":"%lsmagic","5c009e8a":"int_variable = 5\nfloat_variable = 6.1\nlist_variable = [1,2]\nstring_variable = 'hi'\nstring_variable_2 = 'how are you'\n\n%who str        # List all variable with string type\n%who list       # List all variable with list type","b16e7eb5":"import numpy as np\nfrom IPython.display import Audio\nframerate = 44100\nt = np.linspace(0,5,framerate*5)\ndata = np.sin(2*np.pi*220*t**2)\nAudio(data,rate=framerate)","5eabf60a":"from IPython.display import YouTubeVideo\nYouTubeVideo('zGFKSQlef_0')","c905a519":"# Multicursor support with Alt keyboard\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('q_FturFMdj0')","781fb90e":"from IPython.display import Markdown, display\ndef printmd(string, color=None):\n    colorstr = \"<span style='color:{}'>{}<\/span>\".format(color, string)\n    display(Markdown(colorstr))\n\nprintmd(\"**bold and blue**\", color=\"blue\")","bde4a69a":"<a id = \"trick9\"><\/a>\n# Trick 9: Interactive dashboard with PitvotTable.js\n[Go back to the Table of Contents](#table_of_content)\n\nPivotTable.js is designed for Ipython\/Jupyter notebook to create flexible dashboard and let us freely interact with it.\nFirst we need to download and import PivotTable.js and do the following step\n```python\n# Download library\n!pip install pivottablejs\nimport pivottablejs\nfrom pivottablejs import pivot_ui\n# read data\ndf = pd.read_csv('job_skills.csv')\n# feed data to pivot_ui\npivot_ui(df)\n```\nAfter running, a dashboard appears and we can play with it as much as we can\n![Capture.7.JPG](attachment:Capture.7.JPG)\n\nPivotTable.js is **only designed for Jupyter notebooks**, That why if you run this code on Kaggle kernel, it cannot working.\nThe dashboard above run on my local Jupyter notebook","a9a26535":"<a id = \"trick5\"><\/a>\n# Trick 5: List all variables of global scope.\n[Go back to the Table of Contents](#table_of_content)\n\nThe **%who** command without any arguments will list all variables that existing in the global scope. Passing a parameter like **%who str** will list only variables of that type.","3ef90f77":"<a id = \"trick10\"><\/a>\n# Trick 10: Multicursor support with Alt keyboard\n[Go back to the Table of Contents](#table_of_content)\n\nThis is one of the most convenience trick in a Jupyter notebook. if we made the same mistake at multiple places? It\u2019d be a daunting task to go and rectify it everywhere.\nJupyter supports mutiple cursors, similar to Sublime Text. Simply click and drag your mouse while holding down Alt.","a79dd971":"<a id = \"trick11\"><\/a>\n# Trick 11: Jump to current running cell with javascript magic\n[Go back to the Table of Contents](#table_of_content)\n\nImagining when we click to **run all** in jupyter notebook, and we want to know where is current running cell, all we have to do is:\nrun this cript on top of notebook\n```python\n%%javascript\n\/\/ Go to Running cell shortcut\nJupyter.keyboard_manager.command_shortcuts.add_shortcut('Alt-I', {\n    help : 'Go to Running cell',\n    help_index : 'zz',\n    handler : function (event) {\n        setTimeout(function() {\n            \/\/ Find running cell and click the first one\n            if ($('.running').length > 0) {\n                \/\/alert(\"found running cell\");\n                $('.running')[0].scrollIntoView();\n            }}, 250);\n        return false;\n    }\n});\n```\n\nnow we can jump directly to the current running cell using **Control + I**","053024a4":"<a id = \"trick3\"><\/a>\n# Trick 3: Easy links to documentation\n[Go back to the Table of Contents](#table_of_content)\n\nwe can use 2 simple way to explore what is inside a function \nexample: Let say we want to dive into the method Avgpool2d in pytorch, we can do it by 2 ways:\n```python\nhelp(torch.nn.AvgPool2d)\n\nor\n\n?torch.nn.AvgPool2d\n```","d46d1e27":"<a id = \"trick2\"><\/a>\n# Trick 2: Display multiple Variables without print() statements\n[Go back to the Table of Contents](#table_of_content)\n\nWhen we print multiple things in Jupyter, it will only print the last thing, that's why we need to use multiple print() statement.\nBut now we won't need print() anymore\nThis is one of my favorite trick because of its super convenience. To do it, we first import the following code\n```python\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n```\nAfter running this script, we can freely display multiple variables at the same time without using multiple print() statement. This is especially useful when dealing with Pandas DataFrames, as the output is neatly formatted into a table.\nLet take a look at the example below.","495edd12":"<a id = \"trick8\"><\/a>\n# Trick 8: Inline Video\n[Go back to the Table of Contents](#table_of_content)\n\nLet say we want to add the deeplearning.ai video of new course: AI for medicine specialization.\nA youtube link will be stored as format : https:\/\/www.youtube.com\/watch?v=zGFKSQlef_0. \nTo insert a video to Jupyter cell, we copy the code '**zGFKSQlef_0**' (before watch?v= ) and add it to YouTubeVideo library like following","c9712833":"<a id = \"trick16\"><\/a>\n# Trick 16: Running cell with Alt + Enter\n[Go back to the Table of Contents](#table_of_content)\n\nNormally we use Shift + Enter to run a cell, but there's actually one more convenient way to run which is: **Alt+Enter** . \nALt + Enter help us with 2 things: \n1. runs current cell\n1. automatically creates a new cell below it.\n\nThat's great because we wont need to care about the lack of cells\n(of course in some cases, such as we need to re-run some cell to fix-bug, normal Shift + Enter will be fine","314360f4":"<a id = \"trick7\"><\/a>\n# Trick 7: Inline Audio\n[Go back to the Table of Contents](#table_of_content)","f6d95e88":"<a id = \"trick4\"><\/a>\n# Trick 4: IPython Magic Commands\n[Go back to the Table of Contents](#table_of_content)\n\nJupyter has access to all the Magics from the IPython kernel, as we are very familiar with %matplotlib inline, this is one of Ipython magic commands. In order to know all magic commands, we run **%lsmagic**","1f316e5d":"<a id = \"trick6\"><\/a>\n# Trick 6: Commenting\/Uncommenting a block of code\n[Go back to the Table of Contents](#table_of_content)\n\n* Step 1: we need to select all those lines which we want to comment out.\n* Step 2: we need to press the ctrl + \/  to comment out the highlighted portion of the code.\n\nThis does save a lot of time for us especially in data analysis project","99cc9e36":"Hi everyone, in this kernel I will share some interesting and useful tricks when working with jupyter notebook. Hoping these tricks will save your times when doing your own projects. If you know the other tricks and please share with me too, Thank youu\n\n# <a id = \"table_of_content\"><\/a>\n# Table of content\n[1. Keyboard shortcuts](#trick1)\n\n[2. Display multiple Variables without print() statements](#trick2)\n\n[3. Easy links to documentation](#trick3)\n\n[4. IPython Magic Commands](#trick4)\n\n[5. List all variables of global scope](#trick5)\n\n[6. Commenting\/Uncommenting a block of code](#trick6)\n\n[7. Inline Audio](#trick7)\n\n[8. Inline Video](#trick8)\n\n[9. Interactive dashboard with PitvotTable.js](#trick9)\n\n[10. Multicursor support with Alt keyboard](#trick10)\n\n[11. Jump to current running cell with javascript magic](#trick11)\n\n[12. Customize the num_col\/num_row display when working with pandas](#trick12)\n\n[13. Hiding text output when drawing charts in matplotlib](#trick13)\n\n[14. Markdown printing](#trick14)\n\n[15. Beware of the hidden state](#trick15)\n\n[16. Running cell with Alt + Enter](#trick16)\n","9aa7685f":"## Reference\n* https:\/\/github.com\/NirantK\/best-of-jupyter\n* https:\/\/forums.fast.ai\/t\/jupyter-notebook-enhancements-tips-and-tricks\/17064\/16\n* https:\/\/www.quora.com\/What-are-your-favorite-tricks-for-IPython-Notebook\n* https:\/\/www.kdnuggets.com\/2020\/01\/optimize-jupyter-notebook.html\n* https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tips-tricks-shortcuts\/","0514ec13":"<a id = \"trick12\"><\/a>\n# Trick 12: Customize the num_col\/num_row display when working with pandas\n[Go back to the Table of Contents](#table_of_content)\n\nWe can change the default pandas display by changing the max row\/max columns in the following\n```python\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\n```","464801a7":"<a id = \"trick15\"><\/a>\n# Trick 15: Beware of the hidden state\n[Go back to the Table of Contents](#table_of_content)\n\nBeing very flexible, Jupyter notebooks let us run cells, edit, remove, add new ones, and do all those things out of order. This freedom comes with a price, because the order in which we execute our cells actually matters when some cells rely on the execution of the others. And this is the case most of the time. Rare cells exist completely independent of the others.\nExecuting cells out of order can produce confusing results. \n\nwe can use **%history** magic to examine past input and its order.\n","e540fe63":"<a id = \"trick14\"><\/a>\n# Trick 14: Markdown printing\n[Go back to the Table of Contents](#table_of_content)\n\nIncluding markdown in your code\u2019s output is very useful. Use this to highlight parameters, performance notes and so on. This enables colors, Bold, etc.","a7b8d487":"<a id = \"trick1\"><\/a>\n# Trick 1: Keyboard shortcut\n[Go back to the Table of Contents](#table_of_content)\n\n\n* A to insert a new cell above the current cell, B to insert a new cell below.\n* M to change the current cell to Markdown, Y to change it back to code\n* D + D (press the key twice) to delete the current cell\n* Shift + Tab will show you the Docstring (documentation) for the the object\/function you have just create\n* Esc + F will find and replace on your code but not the outputs (really nice and fast)\n* Esc + O Toggle cell output ( Hidden output)\n* Space to scroll down, shift + space to scroll back\n* Select Multiple Cells:\n   * Shift + J \/ Shift + Down selects the next sell in a downwards direction. You can also select sells in an upwards direction by using Shift + K or Shift + Up. I personally really like this one because of its convenience. Once cells are selected, I can then delete \/ copy \/ cut \/ paste \/ run them as a batch. This is helpful when you need to move parts of a notebook. we can also use Shift + M to merge multiple cells.","100b46a9":"<a id = \"trick13\"><\/a>\n# Trick 13: Hiding text output when drawing charts in matplotlib\n[Go back to the Table of Contents](#table_of_content)\n\nWhen using matplotlib, we often see the text came along with charts in return like this:\n![capter%2010.JPG](attachment:capter%2010.JPG)\n\nTo hide the text, all we need to do is adding semi-colon symbol **;** in the end of script and the output will display only the chart\n![Capture11.JPG](attachment:Capture11.JPG)"}}