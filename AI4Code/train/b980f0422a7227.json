{"cell_type":{"6f8bab51":"code","85aa9f26":"code","f971666d":"code","308b45db":"code","fbc01fe6":"code","5d6d8cd7":"code","3a881878":"code","87585277":"code","62d0dba6":"code","83737c21":"code","45f6a50f":"code","a7cd353c":"code","42fd3551":"code","69cd3442":"code","8a0f273f":"code","19fb69f5":"code","6fe1d9f1":"code","e5db26d0":"code","50f858d6":"code","74e18efa":"code","f7274ea5":"code","a6db205d":"code","311483b1":"code","28136b04":"code","267c5ebe":"code","896a2b5b":"code","30157706":"code","bcea27a7":"code","56fc9df1":"code","fb47cf9e":"code","b92f35d1":"code","37b5f926":"code","6c763539":"code","d8c715eb":"code","b762f099":"code","473dd27e":"code","4d9c6ffc":"code","de2837ad":"code","62de7c64":"code","1ae362a4":"code","61bd9756":"code","780967ab":"code","4c167307":"code","18ffd6c1":"code","b176a440":"code","e41edbd7":"code","55b8e86a":"code","ed5ea729":"code","dfb52f92":"code","4314423d":"code","db882dee":"code","16e2adf4":"code","8738c35e":"markdown","1b305905":"markdown","89281fa5":"markdown","79e43781":"markdown","8424d546":"markdown","6aaa7be9":"markdown","fa375d54":"markdown","00de60f9":"markdown","222cd589":"markdown","7253c96b":"markdown","221a15d9":"markdown","c6cb8660":"markdown","08f8cefa":"markdown","ddac6a25":"markdown","0032cdcd":"markdown","5b4a68bd":"markdown","2f31dae3":"markdown","44590377":"markdown","cdaca2b6":"markdown"},"source":{"6f8bab51":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics","85aa9f26":"data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f971666d":"data.head(10)","308b45db":"data.shape","fbc01fe6":"data.describe()","5d6d8cd7":"data.dtypes","3a881878":"def fill_wedge(value):\n    format_value = round(value, 2)\n    return str(format_value) + \"%\"","87585277":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Passengers: Not Survived vs Survived\")\nplt.show()","62d0dba6":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Embarked\"] == \"S\"][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Passenger Embarkation - Sounthampton\")\nplt.show()","83737c21":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Embarked\"] == \"C\"][\"Survived\"].value_counts(), labels = [\"Survived\", \"Not Survived\"], autopct = fill_wedge)\nplt.title(\"Passenger Embarkation - Cherbourg\")\nplt.show()","45f6a50f":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Embarked\"] == \"Q\"][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Passenger Embarkation - Queenstown\")\nplt.show()","a7cd353c":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[\"Sex\"].value_counts(), labels = [\"Male\", \"Female\"], autopct = fill_wedge)\nplt.title(\"Male vs Female\")\nplt.show()","42fd3551":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Sex\"] == \"male\"][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Male: Not Survived vs Survived\")\nplt.show()","69cd3442":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Sex\"] == \"female\"][\"Survived\"].value_counts(), labels = [\"Survived\", \"Not Survived\"], autopct = fill_wedge)\nplt.title(\"Female: Not Survived vs Survived\")\nplt.show()","8a0f273f":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Survived\"] == 0][\"Sex\"].value_counts(), labels = [\"Male\", \"Female\"], autopct = fill_wedge)\nplt.title(\"Not Survived: Female vs Male\")\nplt.show()","19fb69f5":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Survived\"] == 1][\"Sex\"].value_counts(), labels = [\"Female\", \"Male\"], autopct = fill_wedge)\nplt.title(\"Survived: Female vs Male\")\nplt.show()","6fe1d9f1":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[\"Pclass\"].value_counts(), labels = [\"Third\", \"First\", \"Second\"], autopct = fill_wedge)\nplt.title(\"Pclass: First vs Second vs Third\")\nplt.show()","e5db26d0":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Survived\"] == 1][\"Pclass\"].value_counts(), labels = [\"First\", \"Three\", \"Two\"], autopct = fill_wedge)\nplt.title(\"Survived: First vs Second vs Third PClass\")\nplt.show()","50f858d6":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Survived\"] == 0][\"Pclass\"].value_counts(), labels = [\"Third\", \"Second\", \"First\"], autopct = fill_wedge)\nplt.title(\"Not Survived: First vs Second vs Third PClass\")\nplt.show()","74e18efa":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Pclass\"] == 1][\"Survived\"].value_counts(), labels = [\"Survived\", \"Not Survived\"], autopct = fill_wedge)\nplt.title(\"First Class: Survived vs Not Survived\")\nplt.show()","f7274ea5":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Pclass\"] == 2][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Second Class: Survived vs Not Survived\")\nplt.show()","a6db205d":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"Pclass\"] == 3][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"Third Class: Survived vs Not Survived\")\nplt.show()","311483b1":"fig = plt.figure(figsize =(10, 7))\nsns.violinplot(x = data[\"Survived\"], y = data[\"Age\"])\nplt.title(\"Age: Survived vs Not Survived\")\nplt.show()","28136b04":"fig = plt.figure(figsize =(10, 7))\nsns.violinplot(x = data[data[\"Sex\"] == \"male\"][\"Survived\"], y = data[data[\"Sex\"] == \"male\"][\"Age\"])\nplt.title(\"Male Passengers - Age: Survived vs Not Survived\")\nplt.show()","267c5ebe":"fig = plt.figure(figsize =(10, 7))\nsns.violinplot(x = data[data[\"Sex\"] == \"female\"][\"Survived\"], y = data[data[\"Sex\"] == \"female\"][\"Age\"])\nplt.title(\"Female Passengers - Age: Survived vs Not Survived\")\nplt.show()","896a2b5b":"fig = plt.figure(figsize =(10, 7))\nplt.plot(data[\"SibSp\"], data[\"Survived\"], 'bo')\nplt.title(\"SibSip vs Survived\")\nplt.show()","30157706":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 0][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=0: Survived vs Not Survived\")\nplt.show()","bcea27a7":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 1][\"Survived\"].value_counts(), labels = [\"Survived\", \"Not Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=1: Survived vs Not Survived\")\nplt.show()","56fc9df1":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 2][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=2: Survived vs Not Survived\")\nplt.show()","fb47cf9e":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 3][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=3: Survived vs Not Survived\")\nplt.show()","b92f35d1":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 4][\"Survived\"].value_counts(), labels = [\"Not Survived\", \"Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=4: Survived vs Not Survived\")\nplt.show()","37b5f926":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 5][\"Survived\"].value_counts(), labels = [\"Not Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=5: Survived vs Not Survived\")\nplt.show()","6c763539":"fig = plt.figure(figsize =(10, 7))\nplt.pie(data[data[\"SibSp\"] == 8][\"Survived\"].value_counts(), labels = [\"Not Survived\"], autopct = fill_wedge)\nplt.title(\"SibSp=8: Survived vs Not Survived\")\nplt.show()","d8c715eb":"data.head()","b762f099":"data = data.drop([\"PassengerId\", \"Name\", \"Age\", \"Ticket\", \"Fare\", \"Cabin\"], axis=1)","473dd27e":"data.isnull().sum()","4d9c6ffc":"data[data[\"Embarked\"].isnull()][\"Embarked\"]","de2837ad":"data.iloc[61, 5] = \"C\"\ndata.iloc[829, 5] = \"C\"","62de7c64":"data.isnull().sum()","1ae362a4":"X = data.iloc[:, [1, 2, 3, 4, 5]]\ny = data.iloc[:, 0]","61bd9756":"X = pd.get_dummies(X)","780967ab":"data[\"Survived\"].value_counts()","4c167307":"rus = RandomUnderSampler(sampling_strategy ={0: 450})\nX_res, y_res = rus.fit_resample(X, y)","18ffd6c1":"y_res.value_counts()","b176a440":"smote = SMOTE(sampling_strategy = {1: 450})\nX_final, y_final = smote.fit_resample(X_res, y_res)","e41edbd7":"y_final.value_counts()","55b8e86a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","ed5ea729":"K_values = list(range(1, 201))\n\nkf = KFold(n_splits=5)\nacc_score_cv = []\nacc_score_train = []\n\nfor K in K_values:\n    total_acc_cv = []\n    total_acc_train = []\n    for train_index, test_index in kf.split(X_train):\n        X_tr , X_cv = X.iloc[train_index,:],X.iloc[test_index,:]\n        y_tr , y_cv = y[train_index] , y[test_index]\n        model = KNeighborsClassifier(n_neighbors=K)\n        model.fit(X_tr, y_tr)\n        \n        total_acc_cv.append(model.score(X_cv, y_cv))\n        total_acc_train.append(model.score(X_tr, y_tr))\n    \n    avg_acc_cv = (sum(total_acc_cv)) \/ len(total_acc_cv)\n    avg_acc_train = (sum(total_acc_train)) \/ len(total_acc_train)\n        \n    acc_score_cv.append(avg_acc_cv)\n    acc_score_train.append(avg_acc_train)","dfb52f92":"optimal_K = acc_score_cv.index(max(acc_score_cv)) + 1\nprint(\"The optimal value of hyperparameter K is: \" + str(optimal_K))","4314423d":"fig = plt.figure(figsize = (10, 7))\nplt.plot(K_values, acc_score_cv, label = \"Cross-Validation\")\nplt.plot(K_values, acc_score_train, label = \"Train\")\nplt.legend()\nplt.xlabel(\"K Value\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy on different K-Values of Train and CV sets\")\nplt.show()","db882dee":"model = KNeighborsClassifier(n_neighbors=optimal_K)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\ncf_matrix = metrics.confusion_matrix(y_test, y_pred)\nfig = plt.figure(figsize = (10, 7))\nax = sns.heatmap(cf_matrix, annot = True)\nax.set_title('Confusion Matrix');\nax.set_xlabel('Predicted Values')\nax.set_ylabel('Actual Values ');\nax.xaxis.set_ticklabels(['False','True'])\nax.yaxis.set_ticklabels(['False','True'])\nplt.show()","16e2adf4":"print(metrics.classification_report(y_test, y_pred))","8738c35e":"* Out of all the passengers who did survive 40% of them had first class ticket, 25% of them had second class ticket, and 35% of them had third class ticket.\n* Out of all the passengers who did not survive 15% of them had first class ticket, 18% of them had second class ticket, and 68% of them had third class ticket.\n* Probability of third class ticket given that the passenger did not survive is 67.76%.\n* Probability of second class ticket given that the passenger did not survive is 17.67%\n* Probability of first class ticket given that the passenger did not survive is 14.57%","1b305905":"* Catagorical features like \"Sex\" and \"Embarked\" are to be converted into numerical features.\n* I will use one hot encoding to convert the categorical features to numerical features","89281fa5":"* Out of male passengers, 19% did survive and 81% did not survive.\n* Out of female passengers, 74% did survive and 26% did not survive.\n* The probability of passenger did not survive given that he is of sex male is 81.11% \n* The probability of a passenger did not survive given that she is of sex female is 25.8%","79e43781":"## Exploratory Data Analysis","8424d546":"## Model Evaluation","6aaa7be9":"* Combination of Undersamping and SMOTE will be used to handle the imbalance in the classes.\n* First I will use undersampling to reduce the number of datapoints in the majority class to 450\n* Then SMOTE will be used to increase the number of datapoints in the minority class to 450.","fa375d54":"* Of all the passengers who did not survive, 85% of them were of sex Male and 15% of them were of sex Female\n* Of all the passengers who did survive, 68% of them were of sex Female and 31% of them were of sex Male\n* So most of the passengers of the sex Male did not survive, and most of the passengers of the sex Female did survive","00de60f9":"* Filling the missing embarked value with \"C\"(Cherbourg), because the probability that the passenger survived given the embarked at \"C\" is almost 50%.","222cd589":"# Titanic - Machine Learning from Disaster","7253c96b":"* In the graph as hyperparameter K increases, performance of train set decreases, Because at K=1 the model overfits.\n* The performance on cross-validation set increases and then decreases (towards underfitting).\n* The value of optimal hyperparameter K is the value which results in highest cross-validation accuracy.","221a15d9":"## Data Storytelling","c6cb8660":"* Out of all the passengers having first class ticket 63% of them Survived while 37% of them did not survive.\n* Out of all the passengers having third class ticket 76% of them did not survive and 24% of them survived.\n* Out of all the passengers having second class ticket 53% of them did not survive, while 47% of them survived.\n* The probability of not surviving given that the passenger has first class ticket is 37.04%\n* The probability of not surviving given that the passenger has second class ticket is 52.72%\n* The probability of not surviving given that the passenger has third class ticket is 75.76%","08f8cefa":"* Out of all the passengers, 62% did not survive, and 38% did survive. \n* So I can say the probability of surviving abord the Titanic of a random passenger is 38.38% while the probability of not surviving is 61.62%","ddac6a25":"* There are 55% passengers with third class ticket, 21% passengers with second class ticket, and 24% passengers with first class ticket\n","0032cdcd":"* As the number of Siblings\/Spouses increase, more chance that they will not survive\n* Same can be said for Parents\/Children feature","5b4a68bd":"* Here the distributions of passengers age of survived and not survived is almost the same.\n* So, The Age feature is useless, I will remove this feature.","2f31dae3":"## Model Building","44590377":"* Aboard the Titanic, 65% of population was of Male and 35% of population was of Female","cdaca2b6":"* Almost all the passengers who embarked at Southampton intended to go to New York, Because most of people who embarked at Southampton did not survive.\n* Same can be said for passengers embarked at Cherbourg. \n* So it can be concluded that very few passengers got off from Titanic between the stops Sounthampton and Queenstown"}}