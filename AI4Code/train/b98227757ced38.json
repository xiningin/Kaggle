{"cell_type":{"0934ed99":"code","b4a71572":"code","a09da223":"code","bee700bb":"code","16c0597a":"code","a7f3eca6":"code","24c04b92":"code","b8c967c5":"code","611b1fae":"code","57a3a0d9":"code","f48a375f":"code","07a66191":"code","8e9b4af8":"code","4f7aef9b":"code","093a174f":"code","f1252b32":"code","d8fd7963":"code","249f8534":"code","b2e866db":"code","1a05e968":"code","cc614dcf":"code","6314e990":"code","f86128a2":"code","58097596":"code","77a31b1d":"markdown","cd15dc27":"markdown","00f9b6e7":"markdown","7de78732":"markdown","7442526f":"markdown","ac71193d":"markdown","96e5911e":"markdown"},"source":{"0934ed99":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing, utils\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","b4a71572":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output\ndata = pd.read_csv(\"\/kaggle\/input\/credit-card-transactions\/Credit Card Transactions.csv - Credit Card Transactions.csv.csv\")\n","a09da223":"data.shape\ndata.head()\ndata = data.drop(['Customer_ID', 'Count'], axis=1)\ndata.columns\ndata[data==0].count()\ndata.isnull().sum()\ndata['Default_On_Payment'].value_counts()","bee700bb":"import matplotlib.pyplot as plt\nplt.scatter(data.index, data['Credit_Amount'])\nli = list(data['Credit_Amount'].sort_values()[-5:].index)\ndata = data.drop(li,axis = 0)\nplt.scatter(data.index, data['Credit_Amount'])\ndata.head()\ndata.reset_index(drop=True,inplace=True)\ndata.Default_On_Payment.value_counts()\nli = data[data['Default_On_Payment']==0].sample(2000).index\ndata = data.drop(li, axis = 0)\ndata.Default_On_Payment.value_counts()","16c0597a":"X = data.drop(['Default_On_Payment'], axis=1)\ny = data['Default_On_Payment']","a7f3eca6":"\nli","24c04b92":"data.head()","b8c967c5":"data.head()","611b1fae":"\nli","57a3a0d9":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2)","f48a375f":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\n\n# Train the model using 'fit' method\nmodel.fit(X_train, y_train)\n\n# Test the model using 'predict' method\ny_pred = model.predict(X_test)\n\n# Print the classification report \nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))\n","07a66191":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nprint('Print the Confusion Matrix')\nprint(cm)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n#plt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","8e9b4af8":"from sklearn.linear_model import Ridge\n\n## training the model\n\nridgeReg = Ridge(alpha=0.05, normalize=True)\n\nridgeReg.fit(X_train,y_train)\n\nprint(classification_report(y_test, y_pred))\n","4f7aef9b":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nprint('Print the Confusion Matrix')\nprint(cm)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n#plt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","093a174f":"from sklearn.linear_model import Lasso\n\n## training the model\n\nlassoReg = Lasso(alpha=0.5, normalize=True)\n\nlassoReg.fit(X_train,y_train)\n\npred = lassoReg.predict(X_test)\nfrom sklearn.linear_model import Lasso\n\nprint(classification_report(y_test, y_pred))\n","f1252b32":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nprint('Print the Confusion Matrix')\nprint(cm)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n#plt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");\n","d8fd7963":"from sklearn import tree\n\nfrom sklearn.metrics import classification_report\n\nmodel = tree.DecisionTreeClassifier() \nmodel.fit(X, y)\nmodel.score(X, y)\n\n#Predict Output\npredicted= model.predict(X_test)\n\nprint(classification_report(y_test, predicted))\n\n#print(predicted)\n","249f8534":"\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predicted)\ncm\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","b2e866db":"from sklearn import ensemble\nclassifier = ensemble.RandomForestClassifier()\nclassifier.fit(X_train, y_train)\n\nfrom sklearn.metrics import classification_report\n# predict the labels on validation dataset\npredictions = classifier.predict(X_test)\n\n#print(predictions)\n\nprint(classification_report(y_test,predictions))","1a05e968":"cm=confusion_matrix(y_test,predictions)\ncm\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n#plt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","cc614dcf":"from sklearn import tree\nfrom sklearn.naive_bayes import GaussianNB \nmodel = GaussianNB() \nmodel.fit(X_train, y_train) \n\n#Predict Output\npredicted= model.predict(X_test)\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, predicted))","6314e990":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predicted)\ncm\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\n#plt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","f86128a2":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\n\nX = add_constant(X)\n\npd.Series([variance_inflation_factor(X.values, i) \n               for i in range(X.shape[1])], \n              index=X.columns).sort_values()","58097596":"import scipy.stats as stats\nfrom scipy.stats import chi2_contingency\n\nSignificance = pd.Series()\n\nfor i in X.columns:\n    dfObserved = pd.crosstab(X[i],y)\n    chi2, p, dof, expected = stats.chi2_contingency(dfObserved.values)\n    Significance[i] = p\n\nSignificance.sort_values()","77a31b1d":"### Ridge and Lasso Regression","cd15dc27":"### Variance Inflation Factor","00f9b6e7":"### Chi sqaure","7de78732":"### Naive Bayes\n","7442526f":"### Random Forest\n","ac71193d":"### Logistic Regression","96e5911e":"### Decision Tree\n"}}