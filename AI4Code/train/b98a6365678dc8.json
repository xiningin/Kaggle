{"cell_type":{"831560d2":"code","c3a2f169":"code","8e9f184f":"code","6302a85a":"code","d233020f":"code","8bac2282":"code","87873b76":"code","58692250":"code","e064010c":"code","7117bf7e":"code","645defae":"code","2f2f2169":"code","8fda1cde":"code","24a237b1":"code","6e512a63":"code","dc2cf12a":"code","0b80e1d1":"code","190c6014":"code","de529daa":"code","c49afc85":"code","7befae36":"markdown"},"source":{"831560d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3a2f169":"from sklearn.datasets import fetch_openml\nfrom sklearn import metrics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8e9f184f":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","6302a85a":"train.head()","d233020f":"test.head()","8bac2282":"from sklearn.model_selection import train_test_split\ntrains,tests= train_test_split(train, train_size=0.7, random_state=42)","87873b76":"y_train = trains[\"label\"]\nX_train = trains.drop(labels = [\"label\"],axis = 1) \ny_test = tests[\"label\"]\nX_test = tests.drop(labels = [\"label\"],axis = 1) ","58692250":"X_train.info()","e064010c":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nmodel =  CatBoostClassifier()\ncategorical_features_indices = np.where(X_train.dtypes != np.int)[0]\ncategorical_features_indices","7117bf7e":"model.fit(X_train,y_train,cat_features=([]))","645defae":"from sklearn.metrics import accuracy_score\ntestaccuracy= accuracy_score(y_test,model.predict(X_test))\ntestaccuracy\nprint(\"Test Data Accuracy    :{} %\".format(round((testaccuracy*100),2)))","2f2f2169":"cm= metrics.confusion_matrix(y_test,model.predict(X_test))\ncm","8fda1cde":"model.score(X_test,y_test)","24a237b1":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","6e512a63":"y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","dc2cf12a":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nmodel =  CatBoostClassifier()\ncategorical_features_indices = np.where(X_train.dtypes != np.int)[0]\ncategorical_features_indices","0b80e1d1":"model.fit(X_train,y_train,cat_features=([]))","190c6014":"# predict result\npred = model.predict(test)\nresult=pd.DataFrame(pred)\nresult= result.rename(columns={ 0 : 'Label'})\nresult.head()","de529daa":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\n\n","c49afc85":"submission.head()","7befae36":"Looks Promising !!"}}