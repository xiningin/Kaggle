{"cell_type":{"1ad538ac":"code","e6ccd3f2":"code","ae2c3afe":"code","efcb0f80":"code","42716cc5":"code","0292acf9":"code","0416e39d":"code","c9bdcc5b":"code","9ee9d489":"code","fd50c891":"code","bd41dbe8":"code","4a8ea1e7":"code","c0f6acb0":"code","1ea84ba9":"code","27887b3f":"code","06023a56":"code","d6637e73":"code","9543d345":"code","518ba65b":"code","0f1ae35b":"code","56fffde2":"code","f657a5ff":"code","09cefce3":"code","1c302d4b":"code","230b648c":"code","da9b8d3d":"code","aa2162b4":"code","dd0f9cc8":"code","d8735859":"code","b3aa7e4a":"code","045b57f3":"code","5443bd67":"code","e7cafb35":"code","962bec64":"code","e67d950e":"code","a6dde6f0":"code","b595592e":"code","0dc50fea":"code","2a2253d8":"code","a69ce492":"code","3b1fc38a":"code","403da4da":"code","cb2df7f9":"code","3bd4de48":"code","28e7d2a7":"code","6fbee9fd":"code","b2ad8832":"code","78e14639":"code","afd815ba":"code","7bfb139c":"code","cc51c415":"code","de19b08b":"code","bf1ffa95":"code","6c7dffaa":"code","d459109f":"code","efb023b1":"code","6ec017d4":"code","8a4c7f08":"code","f5754d4a":"code","9095471d":"code","a0188674":"code","19618996":"code","97f06b89":"code","e0b7eb9d":"code","a36ff898":"code","8051d122":"code","454a9607":"code","426423cc":"code","7d432da0":"code","99a9acee":"code","9cdbdfcb":"code","0910926e":"code","490919ac":"code","4149ef58":"code","c2560f31":"code","51464009":"code","746b2ca7":"code","ca2a72e0":"code","f6879ef7":"code","59bdac92":"code","bf645941":"code","683da613":"code","4c58ab81":"code","a918ada1":"code","62b87ba1":"code","f0443131":"code","0dfc2f86":"code","636e051f":"code","447616ed":"code","0eba6290":"code","3139d7ee":"code","e2a1abeb":"code","e6e6c32e":"code","fe341a6f":"code","eb886a1c":"code","b0ff56aa":"code","e9cdc04c":"code","e5d94348":"code","38c5a0a9":"code","a5199175":"code","1291629c":"code","3ee7fd2f":"code","c2b23cbd":"code","5d315e4b":"code","fc906b27":"markdown","09155e88":"markdown","56d5045c":"markdown","77419840":"markdown","243ee138":"markdown","1e483bb9":"markdown","4c83a5e1":"markdown","cde8d2b9":"markdown","7ca38af9":"markdown","e8e8bd25":"markdown","93a2d3be":"markdown","4bc94509":"markdown","06219ec3":"markdown","981ebd80":"markdown","4fa71369":"markdown"},"source":{"1ad538ac":"# September 2021","e6ccd3f2":"# This awesome dataset is from Jeff Sackmann : https:\/\/github.com\/JeffSackmann","ae2c3afe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import xticks\nimport matplotlib.dates as dates\nimport datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efcb0f80":"# Matchs from 1968 to present\nyears = range(1968, 2022)\ndata = pd.DataFrame()\n\nfor y in years:\n    df_year = pd.read_csv('https:\/\/raw.githubusercontent.com\/JeffSackmann\/tennis_atp\/master\/atp_matches_'+str(y)+'.csv')\n    data = data.append(df_year)","42716cc5":"data.tail()","0292acf9":"data['tourney_date'] = pd.to_datetime(data['tourney_date'], format=\"%Y%m%d\")","0416e39d":"len(data)","c9bdcc5b":"data['year'] = pd.to_numeric(data['tourney_id'].str[:4])","9ee9d489":"data.columns","fd50c891":"slams = data[data.tourney_level == 'G']","bd41dbe8":"finals_slams = slams[slams['round'] == 'F']","4a8ea1e7":"finals_slams = finals_slams[['tourney_date','tourney_name', 'winner_name', 'loser_name']]","c0f6acb0":"big3_perc = finals_slams[finals_slams.winner_name.isin(['Novak Djokovic', 'Roger Federer', 'Rafael Nadal']) | \n                   finals_slams.loser_name.isin(['Novak Djokovic', 'Roger Federer', 'Rafael Nadal'])]","1ea84ba9":"big3_perc.head()","27887b3f":"winners = big3_perc['winner_name'].value_counts()\nlosers = big3_perc['loser_name'].value_counts()","06023a56":"winners = winners.reset_index()\nwinners.columns = ['name', 'count_wins']\n\nlosers = losers.reset_index()\nlosers.columns = ['name', 'count_loses']","d6637e73":"big3_perc = pd.merge(winners, losers)","9543d345":"# Keep only Djokovic, Federer, Nadal\nbig3_perc = big3_perc.loc[:2]","518ba65b":"big3_perc['total_finals'] = big3_perc['count_wins'] + big3_perc['count_loses']\nbig3_perc['finals_wins%'] = big3_perc['count_wins'] \/ big3_perc['total_finals']","0f1ae35b":"big3_perc","56fffde2":"plt.figure(figsize=(15,8))\nsns.set_style(\"white\")\nsns.set_style('darkgrid',{\"axes.facecolor\": \".92\"})\n\ng = sns.barplot(x=big3_perc.name, y=big3_perc['finals_wins%'])\ng.set(ylim=(0.5, 0.75))\nplt.show()","f657a5ff":"big3 = finals_slams[finals_slams.winner_name.isin(['Novak Djokovic', 'Roger Federer', 'Rafael Nadal'])]","09cefce3":"big3 = big3[['tourney_date','winner_name']]\nbig3.columns = ['Date', 'Player']\nbig3 = big3.sort_values(['Date'])\nbig3['Titles'] = big3.groupby('Player').cumcount().astype(int) + 1\nbig3 = big3.reset_index().iloc[:,1:]\nbig3.tail()","1c302d4b":"# Get all titles at current time\n\nlast = big3.groupby('Player').tail(1)\nlast['Date'] = last.iloc[-1].Date\n\nbig3 = pd.concat([big3, last])\nbig3 = big3.drop_duplicates()","230b648c":"federer_slams = big3[big3.Player == 'Roger Federer']\nnadal_slams = big3[big3.Player == 'Rafael Nadal']\ndjokovic_slams = big3[big3.Player == 'Novak Djokovic']","da9b8d3d":"fig = plt.figure(figsize=(15,8))\nax = plt.axes()\nsns.lineplot(x='Date', y='Titles', data=federer_slams, drawstyle='steps-post')\nsns.lineplot(x='Date', y='Titles', data=nadal_slams, drawstyle='steps-post')\nsns.lineplot(x='Date', y='Titles', data=djokovic_slams, drawstyle='steps-post')\nfig.legend(bbox_to_anchor=(-0.2, 0.85, 0.41, 0), labels=['Federer','Nadal','Djokovic'])\nplt.yticks(np.arange(1, 21, 1))\n# specify the position of the major ticks for every year\nax.xaxis.set_major_locator(dates.YearLocator(1))\n# specify the format of the labels as 'year-month-day'\nax.xaxis.set_major_formatter(dates.DateFormatter('%Y'))\nplt.setp(ax.xaxis.get_majorticklabels(), rotation = 45)\nt=fig.suptitle('Slams Evolution for the Big 3')","aa2162b4":"data.columns","dd0f9cc8":"player_id = data[['winner_id', 'winner_name', 'loser_id', 'loser_name']]\ndata = data[['tourney_name', 'tourney_level', 'winner_name', 'loser_name', 'round','winner_rank', 'winner_rank_points', 'loser_rank', 'loser_rank_points', 'year']]","d8735859":"data.head()","b3aa7e4a":"data['tourney_level'].value_counts()","045b57f3":"# 'G' = Grand Slams, 'M' = Masters 1000s, 'A' = other tour-level events, 'C' = Challengers, 'S' = Satellites\/ITFs, 'F' = Tour finals and other season-ending events, and 'D' = Davis Cup","5443bd67":"# W in Grand Slam = 8x W in 250 series, 2x W in M1000, etc...\n\ntourney_g = [8,5,3,1.5,0.5]\n# atp_finals : 4 (6 max) for the winner, 2 for the finalist (4 max), otherwise 1 per win\ntourney_m1000 = [4,2.5,1.5,0.5,0]\nolympics = [3,2,1,0.5,0]\ntourney_atp500 = [2,1,0.5,0,0]\ntourney_davis = [2,1,0.5,0,0]\ntourney_atp250 = [1,0.5,0,0,0]\n\npoints = pd.DataFrame({\"Grand Slams\" : tourney_g, \"Master 1000\" : tourney_m1000, \"Olympics\" : olympics, \n                       \" ATP 500\": tourney_atp500, \"Davis Cup\": tourney_davis, \"ATP 250\": tourney_atp250})\npoints['level'] = ['W', 'F', 'SF', 'QF', 'R16']","e7cafb35":"points","962bec64":"# Points rewarded are different for ATP Finals, Olympics (Bronze medal) and ATP Cup","e67d950e":"# Sort ATP500 and ATP250\natp_tourneys = data[data.tourney_level == 'A'].tourney_name.drop_duplicates().reset_index().iloc[:,1:]\natp_tourneys['level'] = ''","a6dde6f0":"len(atp_tourneys)","b595592e":"# For tourneys with records from 2000\n# It is possible that there are come mistakes\natp_tourneys_level = {'Auckland':'A250', 'St. Poelten':'A250', 'Munich':'A250', 'Queen\\'s Club':'A500',\n                     'Gstaad':'A250', 'Newport':'A250', 'Bastad':'A250', 'Amsterdam':'A250', \n                      'Kitzbuhel':'A250', 'Stuttgart Outdoor':'A250', 'Palermo':'A250', 'Toulouse':'A250', \n                      'Basel':'A500', 'Tokyo':'A500', 'Hong Kong':'A250', 'Vienna':'A500', 'Sydney':'A250', \n                     'Adelaide':'A250', 'Bogota':'A250', 'Casablanca':'A250', 'Lyon':'A250', \n                      'Memphis':'A250', 'Rotterdam':'A500', 'London':'A500', 'Atlanta':'A250', \n                      'Washington':'A500', 'Indianapolis':'A250', \n                      'Los Angeles':'A250', 'San Jose':'A250', 'Barcelona':'A500', 'Stockholm':'A250', \n                      'Scottsdale':'A250', 'Moscow':'A250', 'Umag':'A250', 's Hertogenbosch':'A250', \n                      'Long Island':'A250', 'Doha':'A250', 'Estoril':'A250', 'San Marino':'A250', \n                      'Copenhagen':'A250', 'Dubai':'A500', 'Marseille':'A250', 'Delray Beach':'A250', \n                      'Halle':'A500', 'Santiago':'A250', 'St. Petersburg':'A250', 'Mallorca':'A250', \n                      'Dusseldorf':'A250', 'Brighton':'A250', 'Orlando':'A250', 'Tashkent':'A250', \n                      'Nottingham':'A250', 'Bucharest':'A250', 'Mexico City':'A250', 'Shanghai':'A250', \n                      'Chennai':'A250', 'Sydney Olympics' : 'O', 'Stuttgart':'A250', 'Milan':'A250', \n                      'Sopot':'A250', 'Vina del Mar':'A250', 'Buenos Aires':'A250', \n                      'Costa Do Sauipe':'A250', 'Houston':'A250', 'Acapulco':'A500', 'Amersfoort':'A250', \n                      'Bangkok':'A250', 'Metz':'A250', 'Valencia':'A250', 'Beijing':'A500', \n                      'Athens Olympics': 'O', 'New Haven':'A250', 'Ho Chi Minh City':'A250', \n                      'Zagreb':'A250', 'Poertschach':'A250', 'Mumbai':'A250', 'Las Vegas':'A250', \n                      'Warsaw':'A250', 'Beijing Olympics': 'O', 'Brisbane':'A250', 'Hamburg': 'A500', \n                      'Johannesburg':'A250', 'Belgrade':'A250','Kuala Lumpur':'A250', 'Eastbourne':'A250', \n                      'Nice':'A250', 'Montpellier':'A250', 'Winston-Salem':'A250', 'Sao Paulo':'A250', \n                      'London Olympics': 'O', 'Rio de Janeiro':'A500', 'Shenzhen':'A250', 'Quito':'A250', \n                      'Istanbul':'A250', 'Geneva':'A250', 'Sofia':'A250', 'Marrakech':'A250', \n                      'Los Cabos':'A250', 'Rio Olympics': 'O', 'Chengdu':'A250', 'Antwerp':'A250', \n                      'Budapest':'A250','Antalya':'A250', 'Pune':'A250', 'New York':'A250', \n                      'Cordoba':'A250', 'Zhuhai':'A250', 'Atp Cup': 'F', 'Cologne 1':'A250', \n                      'Sardinia':'A250', 'St Petersburg':'A500', 'Cologne 2':'A250', 'Nur-Sultan':'A250', \n                      'Great Ocean Road Open':'A250', 'Murray River Open':'A250', 'Singapore':'A250'}","0dc50fea":"for name in atp_tourneys_level:\n    data.loc[data.tourney_name == name, \"tourney_level\"] = atp_tourneys_level[name]\ndata.loc[data.tourney_name.str.contains('Washington'), \"tourney_level\"] = 'A500'\ndata.loc[data.tourney_name.str.contains('Indianapolis'), \"tourney_level\"] = 'A500'","2a2253d8":"# ATP 500 before 2000\nlist_atp500_before_2000 = ['Brussels', 'Antwerp', 'Montreal \/ Toronto', 'Toronto Indoor', 'Philadelphia', \n                          'Stuttgart Indoor', 'Tokyo Outdoor', 'Stuttgart Outdoor', 'Sydney Indoor', \n                           'Tokyo Indoor']\ndata.loc[data.tourney_name.isin(list_atp500_before_2000), \"tourney_level\"] = 'A500'","a69ce492":"# Let's change the rest with A250, which are estimated as ATP 250\ndata.loc[data.tourney_level == 'A', \"tourney_level\"] = 'A250'","3b1fc38a":"data['tourney_level'].value_counts()","403da4da":"# Queen's Club 250: 1972-2014, 500 : 2015-\n# Basel 250: 1970-2008, 500 : 2009-\n# Memphis 250: 1975-1990 and 2014-, 500 : 1991-2013\n# Rotterdam 250: 1972-1998, 500 : 1999-\n# Halle 250: 1993-2014, 500 : 2015-\n# St Petersburg : 1995-2019, 500 : 2020-\n# Hamburg 250 : -1989, M1000 : 1990-2008, 500 : 2009-\n# Stuttgart 250: 2009-, 500 : -2008\n# Kitzbuhel : 500 : 1999-2008\n# Washington : 500: -2002 and 2009-\n# Indianapolis 250: 2003-\n# New Haven 500: -1998\n# Singapore 500:1997-1999\n# Vienna 500:1996-\n\ndata.loc[(data.tourney_name == \"Queen's Club\") & (data.year <= 2014), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"Basel\") & (data.year <= 2008), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"Memphis\") & (data.year <= 1990), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"Rotterdam\") & (data.year <= 1998), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"St Petersburg\") & (data.year <= 2019), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"Hamburg\") & (data.year <= 1989), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"Hamburg\") & (data.year >= 1990), \"tourney_level\"] = 'M'\ndata.loc[(data.tourney_name == \"Hamburg\") & (data.year >= 2009), \"tourney_level\"] = 'A500'\ndata.loc[(data.tourney_name == \"Hamburg\") & (data.year < 2009), \"tourney_level\"] = 'A500'\ndata.loc[((data.tourney_name == \"Kitzbuhel\") & ((data.year >= 1999) & (data.year <= 2008))), \"tourney_level\"] = 'A500'\ndata.loc[((data.tourney_name.str.contains('Washington')) & ((data.year <= 2002) | (data.year >= 2009))), \"tourney_level\"] = 'A500'\ndata.loc[(data.tourney_name == \"Indianapolis\") & (data.year >= 2003), \"tourney_level\"] = 'A250'\ndata.loc[(data.tourney_name == \"New Haven\") & (data.year <= 1998), \"tourney_level\"] = 'A500'\ndata.loc[((data.tourney_name.str.contains('Singapore')) & ((data.year >= 1997) | (data.year <= 1999))), \"tourney_level\"] = 'A500'\ndata.loc[(data.tourney_name == \"Hamburg\") & (data.year < 1996), \"tourney_level\"] = 'A250'","cb2df7f9":"data['round'].drop_duplicates()","3bd4de48":"# Removing useless rounds for points\ndata = data[~(data['round'].isin(['ER', 'R128', 'R64', 'R32']))]\n\n# No points for these tourneys at round R16\ndata = data[~((data['round'] == 'R16') & (data['tourney_level'] != 'G'))]\n\n# No points for these tourneys at round QF\ndata = data[~((data['round'] == 'QF') & (data['tourney_level'].isin(['A250', 'A500', 'ATP'])))]\n\n# No points for these tourneys at round SF\ndata = data[~((data['round'] == 'SF') & (data['tourney_level'].isin(['A250', 'O', 'ATP'])))]","28e7d2a7":"# Get Points for Player\n\nwin = data[data['round'].isin(['F', 'BR', 'RR'])]\nwin = win[['tourney_name', 'tourney_level', 'winner_name', 'round','year']]\n# final and atp round winners\nlosers = data[data['round']!='RR']\nlosers = losers[['tourney_name', 'tourney_level', 'loser_name', 'round','year']]","6fbee9fd":"# Initialization\nwin['points'] = 0\nlosers['points'] = 0","b2ad8832":"# Wins points\nwin.loc[win.tourney_level == \"G\", \"points\"] = 8\nwin.loc[win.tourney_level == \"F\", \"points\"] = 4\nwin.loc[(win.tourney_level == \"F\") & (win['round'] == \"RR\"), \"points\"] = 1\nwin.loc[win.tourney_level == \"M\", \"points\"] = 4\nwin.loc[win.tourney_level == \"O\", \"points\"] = 3\nwin.loc[((win.tourney_level == \"O\") & (win['round'] == \"BR\")), \"points\"] = 1.5\nwin.loc[win.tourney_level == \"A500\", \"points\"] = 2\nwin.loc[win.tourney_level == \"D\", \"points\"] = 2\nwin.loc[win.tourney_level == \"A250\", \"points\"] = 1\nwin.loc[win.tourney_level == \"ATP\", \"points\"] = 1","78e14639":"# Losers points\nlosers.loc[(losers.tourney_level == \"G\") & (losers['round'] == \"F\"), \"points\"] = 5\nlosers.loc[(losers.tourney_level == \"G\") & (losers['round'] == \"SF\"), \"points\"] = 3\nlosers.loc[(losers.tourney_level == \"G\") & (losers['round'] == \"QF\"), \"points\"] = 1.5\nlosers.loc[(losers.tourney_level == \"G\") & (losers['round'] == \"R16\"), \"points\"] = 0.5\n\nlosers.loc[losers.tourney_level == \"F\", \"points\"] = 2\n\nlosers.loc[(losers.tourney_level == \"M\") & (losers['round'] == \"F\"), \"points\"] =  2.5\nlosers.loc[(losers.tourney_level == \"M\") & (losers['round'] == \"SF\"), \"points\"] = 1.5\nlosers.loc[(losers.tourney_level == \"M\") & (losers['round'] == \"QF\"), \"points\"] = 0.5\n\nlosers.loc[(losers.tourney_level == \"O\") & (losers['round'] == \"F\"), \"points\"] =  2\nlosers.loc[(losers.tourney_level == \"O\") & (losers['round'] == \"BR\"), \"points\"] = 1\nlosers.loc[(losers.tourney_level == \"O\") & (losers['round'] == \"QF\"), \"points\"] = 0.5\n\nlosers.loc[(losers.tourney_level == \"A500\") & (losers['round'] == \"F\"), \"points\"] =1\nlosers.loc[(losers.tourney_level == \"A500\") & (losers['round'] == \"SF\"), \"points\"] = 0.5\n\nlosers.loc[(losers.tourney_level == \"D\") & (losers['round'] == \"F\"), \"points\"] = 1\nlosers.loc[(losers.tourney_level == \"D\") & (losers['round'] == \"SF\"), \"points\"] = 0.5\n\nlosers.loc[(losers.tourney_level == \"A250\") & (losers['round'] == \"F\"), \"points\"] = 0.5\nlosers.loc[(losers.tourney_level == \"ATP\") & (losers['round'] == \"F\"), \"points\"] = 0.5","afd815ba":"# Rename columns\nwin.columns = ['tourney_name', 'tourney_level', 'name', 'round', 'year', 'points']\nlosers.columns = ['tourney_name', 'tourney_level', 'name', 'round', 'year', 'points']","7bfb139c":"players_points = pd.concat([win, losers])","cc51c415":"players_points = players_points[['name', 'points']]","de19b08b":"players_points = players_points.groupby('name').sum().reset_index()","bf1ffa95":"players_points.sort_values('points', ascending=False).head(10)","6c7dffaa":"# Using Fibonacci sequence : 8,5,3,2,1\nranking_career = data[['winner_name', 'loser_name','winner_rank', 'loser_rank']]\nranking_w = data[['winner_name', 'winner_rank']]\nranking_l = data[['loser_name', 'loser_rank']]\nranking_w.columns = ['name', 'rank']\nranking_l.columns = ['name', 'rank']\nranking_career = pd.concat([ranking_w, ranking_l])","d459109f":"ranking_career = ranking_career.groupby('name').min().reset_index().dropna()","efb023b1":"# No points for ranking not in top 5\nranking_career = ranking_career[ranking_career['rank'] <= 5]\nranking_career['points_ranking'] = 0","6ec017d4":"rank_points = dict({1:8, 2:5, 3:3, 4:2, 5:1})\nfor rank in rank_points:\n    ranking_career.loc[ranking_career['rank'] == rank, \"points_ranking\"] = rank_points[rank]","8a4c7f08":"ranking_career.head()","f5754d4a":"players_points = pd.merge(players_points, ranking_career, how=\"left\")","9095471d":"players_points['points'] = players_points['points'] + players_points['points_ranking']\nplayers_points = players_points[['name', 'points']]","a0188674":"players_points = players_points.dropna()","19618996":"players_points.sort_values('points', ascending=False).head(10)","97f06b89":"# Using Fibonacci sequence : 8,5,3,2,1\n# Rankings\ndecades = range(0,10)\ndecades = [d for d in decades if d not in [3,4,5,6]] \ndata_decades = pd.DataFrame()\n\nfor d in decades:\n    df_decade = pd.read_csv('https:\/\/raw.githubusercontent.com\/JeffSackmann\/tennis_atp\/master\/atp_rankings_'+str(d)+'0s.csv')\n    df_decade.columns = ['ranking_date','rank','id','points']\n    data_decades = data_decades.append(df_decade)\n    \n# Adding 2021 season\ndf_decade = pd.read_csv('https:\/\/raw.githubusercontent.com\/JeffSackmann\/tennis_atp\/master\/atp_rankings_current.csv')\ndf_decade.columns = ['ranking_date','rank','id','points']\ndata_decades = data_decades.append(df_decade)\ndata_decades = data_decades[['ranking_date','rank','id']]","e0b7eb9d":"# String to date\ndata_decades['ranking_date'] = pd.to_datetime(data_decades['ranking_date'], format='%Y%m%d')\ndata_decades = data_decades.sort_values('ranking_date')\n\n# Extracting year\ndata_decades['year'] = data_decades['ranking_date'].dt.year","a36ff898":"player_id_w = player_id[['winner_name', 'winner_id']]\nplayer_id_l = player_id[['loser_name', 'loser_id']]\nplayer_id_w.columns = ['name', 'id']\nplayer_id_l.columns = ['name', 'id']\nplayer_id = pd.concat([player_id_w, player_id_l])\nplayer_id = player_id.drop_duplicates()","8051d122":"end_year_ranking = pd.merge(data_decades, player_id)\nend_year_ranking = end_year_ranking[['ranking_date', 'name', 'rank', 'year']]","454a9607":"ranking_week = end_year_ranking[['ranking_date', 'name', 'rank']]","426423cc":"# Removing 2021 for end year because not finished\nend_year_ranking = end_year_ranking[end_year_ranking['year'] != 2021]","7d432da0":"end_year_ranking = end_year_ranking.groupby(['year', 'name']).nth(-1).reset_index().dropna()","99a9acee":"# No points for ranking not in top 5\nend_year_ranking = end_year_ranking[end_year_ranking['rank'] <= 5]\nend_year_ranking['points_ranking'] = 0","9cdbdfcb":"end_year_ranking = end_year_ranking[['name', 'rank', 'points_ranking']]","0910926e":"for rank in rank_points:\n    end_year_ranking.loc[end_year_ranking['rank'] == rank, \"points_ranking\"] = rank_points[rank]","490919ac":"# Sum for all years\nend_year_ranking = end_year_ranking[['name', 'points_ranking']]\nend_year_ranking = end_year_ranking.groupby('name').sum().reset_index()","4149ef58":"end_year_ranking.sort_values('points_ranking', ascending=False).head()","c2560f31":"players_points = pd.merge(players_points, ranking_career, how=\"left\")","51464009":"players_points['points'] = players_points['points'] + players_points['points_ranking']\nplayers_points = players_points[['name', 'points']]\nplayers_points = players_points.dropna()","746b2ca7":"players_points.sort_values('points', ascending=False).head(20)","ca2a72e0":"# Only number 1s\nranking_week = ranking_week[ranking_week['rank'] == 1]","f6879ef7":"rw = ranking_week.groupby('name').count().reset_index().iloc[:,:-1]\nrw.columns = ['name', 'points_week']","59bdac92":"rw.sort_values('points_week', ascending=False)","bf645941":"# Some values are wrong due to missing data, let's correct it manually\nrw.loc[rw.name == \"Novak Djokovic\", \"points_week\"] += 36\nrw.loc[rw.name == \"Roger Federer\", \"points_week\"] += 3\nrw.loc[rw.name == \"Pete Sampras\", \"points_week\"] += 1\nrw.loc[rw.name == \"Ivan Lendl\", \"points_week\"] += 42\nrw.loc[rw.name == \"Jimmy Connors\", \"points_week\"] += 164\nrw.loc[rw.name == \"Rafael Nadal\", \"points_week\"] += 17\nrw.loc[rw.name == \"John McEnroe\", \"points_week\"] += 34\nrw.loc[rw.name == \"Bjorn Borg\", \"points_week\"] += 15\nrw.loc[rw.name == \"Andre Agassi\", \"points_week\"] += 1\nrw.loc[rw.name == \"Stefan Edberg\", \"points_week\"] += 1\nrw.loc[rw.name == \"Andy Murray\", \"points_week\"] += 4\nrw.loc[rw.name == \"Ilie Nastase\", \"points_week\"] += 30\nrw.loc[rw.name == \"Mats Wilander\", \"points_week\"] += 4\nrw.loc[rw.name == \"John Newcombe\", \"points_week\"] += 8","683da613":"rw = rw.sort_values('points_week', ascending=False).reset_index().iloc[:,1:]","4c58ab81":"rw","a918ada1":"fig = plt.figure(figsize=(15,8))\ng = sns.barplot(x=\"points_week\", y=\"name\", data=rw.iloc[:10])","62b87ba1":"# 1 point for each week at number 1 + 10 pts bonus for the first place\nrw.loc[0, \"points_week\"] += 10","f0443131":"players_points = pd.merge(players_points, rw, how=\"left\")\nplayers_points['points'] = players_points['points'] + players_points['points_week']\nplayers_points = players_points[['name', 'points']]\nplayers_points = players_points.dropna()","0dfc2f86":"players_points.sort_values('points', ascending=False).head(10)","636e051f":"rivalries = data[['winner_name', 'loser_name']]","447616ed":"rivalries['rivalry'] = ['-'.join(sorted(tup)) for tup in zip(rivalries['winner_name'], rivalries['loser_name'])]","0eba6290":"rivalries = rivalries.groupby('rivalry').count().reset_index().iloc[:,:-1]\nrivalries.columns = ['rivalry', 'count']\nrivalries = rivalries.sort_values('count', ascending=False).head(20)\nrivalries = rivalries.reset_index().iloc[:,1:]","3139d7ee":"rivalries","e2a1abeb":"# Correcting these values for top 5 rivalries\nrivalries.loc[0, 'count'] += 1\nrivalries.loc[1 ,'count'] += 1\nrivalries.loc[2, 'count'] += 1\nrivalries.loc[3, 'count'] += 3\nrivalries.loc[4, 'count'] += 4\nrivalries.loc[10, 'count'] += 11\nrivalries.loc[8, 'count'] += 8","e6e6c32e":"rivalries = rivalries.sort_values('count', ascending=False).head(7)\nrivalries = rivalries.reset_index().iloc[:,1:]","fe341a6f":"# Using Fibonacci sequence : 8,5,3,2,1\nrivalries['point_rivalry'] = [8,5,3,2,2,1,1]","eb886a1c":"rivalries","b0ff56aa":"# Get list of players\nlist_players = []\nfor i, row in rivalries.iterrows():\n    list_players+=row['rivalry'].split('-')","e9cdc04c":"# Removing duplicates\nlist_players = list(set(list_players))","e5d94348":"player_rivalry = pd.DataFrame({'name':list_players})\nplayer_rivalry['points_rivalry'] = 0","38c5a0a9":"# Adding points\nfor p in list_players:\n    for i, row in rivalries.iterrows():\n        if p in row['rivalry']:\n            player_rivalry.loc[player_rivalry.name == p, \"points_rivalry\"] += row['point_rivalry']","a5199175":"player_rivalry.sort_values('points_rivalry', ascending=False)","1291629c":"# Adding points\nfor p in list_players:\n    for i, row in players_points.iterrows():\n        if p == row['name']:\n            players_points.loc[players_points.name == p, \"points\"] += int(player_rivalry.loc[player_rivalry.name == p, \"points_rivalry\"])","3ee7fd2f":"players_points.sort_values('points', ascending=False).head(10)","c2b23cbd":"pp = players_points.sort_values('points', ascending=False).reset_index().iloc[:,1:]","5d315e4b":"fig = plt.figure(figsize=(15,8))\ng = sns.barplot(x=\"points\", y=\"name\", data=pp.iloc[:10])","fc906b27":"## First : An observation for Djokovic, Federer, Nadal","09155e88":"### Points earned in tournaments\n\n![points.PNG](attachment:points.PNG)","56d5045c":"#### Best ranking in career","77419840":"#### GOAT Players in tournaments","243ee138":"#### Number of weeks at ranking #1","1e483bb9":"### Percentage finals wins","4c83a5e1":"## Let's go back to the GOAT subject","cde8d2b9":"### Evolution of number of Slams","7ca38af9":"### Creating weight points for tournaments","e8e8bd25":"### Points for rankings","93a2d3be":"#### Greatest rivalries","4bc94509":"##### Points attribution","06219ec3":"#### Associate weight points with the tourneys","981ebd80":"#### Ranking at end year","4fa71369":"#### Placing the correct values for tourneys that changes category"}}