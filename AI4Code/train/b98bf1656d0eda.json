{"cell_type":{"5406d849":"code","36cc192e":"code","c058781c":"code","d2a1e304":"code","44eb046f":"code","e440e64e":"code","2b2ca10e":"code","9dc79896":"code","5f7b4b73":"code","34fbd6a4":"code","5403e6b1":"code","a42aced8":"code","a84bbc33":"code","60b97610":"code","1a9ebe82":"code","536fa15b":"code","994858cb":"code","8cf795a5":"code","872cc506":"code","ff6e1b7e":"code","e7929642":"code","b8006507":"code","e7b8cd1a":"code","fc37575e":"code","415f3c5c":"code","318bfbe7":"code","fc63b011":"markdown","279d4a99":"markdown","8b34ab25":"markdown","3737fe87":"markdown","e9194ce3":"markdown","29438041":"markdown","98eb82dd":"markdown","5dc5fde2":"markdown","3daedf78":"markdown","b829b746":"markdown","10df23fa":"markdown","2eac413b":"markdown","cba993bc":"markdown","513d1e3b":"markdown","be260649":"markdown","d39845f7":"markdown","5efbd972":"markdown","b42dfc40":"markdown","8843fafa":"markdown","c94325b5":"markdown","e84dd12c":"markdown","852e1e03":"markdown","6cb87678":"markdown","20f239f9":"markdown","38127ffc":"markdown"},"source":{"5406d849":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","36cc192e":"cities = [\"barcelona\", \"madrid\", \"istanbul\", \"paris\"]","c058781c":"i = 0\n\nfor city in cities:\n    print(i, city)\n    i+=1","d2a1e304":"for i, city in enumerate(cities):\n    print(i, city)","44eb046f":"x_list = [1,2,3]\ny_list = [2,4,6]","e440e64e":"for i in range(len(x_list)):\n    x = x_list[i]\n    y = y_list[i]\n    print(x, y)","2b2ca10e":"for x,y in zip(x_list, y_list):\n    print(x, y)","9dc79896":"x = 10\ny = -10","5f7b4b73":"print(\"Before : x = %d, y = %d\" %(x,y))","34fbd6a4":"tmp = y\ny = x\nx = tmp","5403e6b1":"print(\"After : x = %d, y = %d\" %(x,y))","a42aced8":"print(\"Before : x = %d, y = %d\" %(x,y))","a84bbc33":"x, y = y, x","60b97610":"print(\"After : x = %d, y = %d\" %(x,y))","1a9ebe82":"ages = {\n    \"Mary\" : 31,\n    \"Jonathan\" : 28\n}","536fa15b":"# age = ages[\"Dick\"] this code has error, because dictionary has'nt \"Dick\" key.","994858cb":"if \"Dick\" in ages:\n    age = ages[\"Dick\"]\nelse: \n    age = \"unknown\"\n    \nprint(\"Dick is %s years old.\"%age)","8cf795a5":"age = ages.get(\"Dick\", \"unknown\")\nprint(\"Dick is %s years old.\"%age)","872cc506":"needle = \"e\"\nhaystack = [\"a\", \"b\", \"c\",\"d\"]","ff6e1b7e":"found = False\n\nfor letter in haystack:\n    if needle == letter:\n        print(\"Found!\")\n        found = True\n        break\n        \nif not found:\n        print(\"Not found!\")","e7929642":"for letter in haystack:\n    if needle == letter:\n        print(\"Found!\")\n        break\nelse: # if no break occured.\n    print(\"Not found!\")","b8006507":"f = open(\"\/kaggle\/input\/text-simple\/text.txt\")\ntext = f.read()\nfor line in text.split(\"\\n\"):\n    print(line)\n    \nf.close()","e7b8cd1a":"f = open(\"\/kaggle\/input\/text-simple\/text.txt\")\n\nfor line in f:\n    print(line)\n\nf.close()","fc37575e":"with open(\"\/kaggle\/input\/text-simple\/text.txt\") as f:\n    for line in f:\n        print(line)","415f3c5c":"print(\"Converting!\")\nprint(int(\"1\"))\nprint(\"Done\")","318bfbe7":"print(\"Converting!\")\n\ntry:\n    int(\"x\")\nexcept:\n    print(\"Conversion failed!\")\nelse:\n    print(\"Conversion successful!\")\nfinally:\n    print(\"Done\")","fc63b011":"### + Good Way","279d4a99":"## 5 - Use \"else\" after for loop.","8b34ab25":"### + Good Way","3737fe87":"### - Bad Way","e9194ce3":"### - Bad Way","29438041":"## 3 - Use \"swap\".","98eb82dd":"## 2 - Use \"zip\".","5dc5fde2":"### + Good Way","3daedf78":"### + Good Way","b829b746":"### + Good Way","10df23fa":"### + Best Way","2eac413b":"### - Bad Way","cba993bc":"### + Good Way","513d1e3b":"**Source : https:\/\/www.youtube.com\/watch?v=pQmKDXUh2I8**","be260649":"### - Bad Way","d39845f7":"**Source created by  Sebastiaan Math\u00f4t Youtube Channel.**","5efbd972":"## 6 - Use \"with\".","b42dfc40":"## 1 - Use \"enumerate\".","8843fafa":"### + Good Way","c94325b5":"### - Bad Way","e84dd12c":"### - Bad Way","852e1e03":"## 7 - Use \"try - catch\"","6cb87678":"### - Bad Way","20f239f9":"# 7 Tricks to Write Better Python Code","38127ffc":"## 4 - Use \"get\"."}}