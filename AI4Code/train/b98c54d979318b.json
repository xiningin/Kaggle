{"cell_type":{"4437f3f6":"code","06447a74":"code","84b0fef7":"code","10d279bb":"code","33849e34":"code","7fccc429":"code","d471f1c0":"code","81c44dad":"code","6ed0d303":"code","74b1506c":"code","4b4be6a9":"code","f2992306":"code","47f4f6c4":"code","b63c493d":"code","d597134d":"code","02d9407e":"code","41331b62":"code","6c542743":"code","5ccbee9e":"code","1cb0ae4f":"code","bba44783":"code","7bd0d6a1":"code","7a670f52":"code","eb4f8a66":"code","ff61715f":"code","2205c6a4":"code","f3b8c750":"code","65c6cdb3":"code","02abf901":"code","0e0db63c":"code","9b618540":"code","6a66e434":"code","05892a2a":"code","ed80cc14":"code","017b9ab1":"code","f9fdf150":"code","71a46b5c":"code","ad291ba4":"code","bc38a023":"code","2585c8f0":"code","c287da94":"code","3af87bf8":"code","fb3911cb":"code","b5b4a7f8":"code","72b9626a":"code","986379ac":"code","946c8a00":"code","4b489fc7":"code","8008bed1":"code","d0a782b4":"code","d304c0df":"code","7c57a449":"code","ddc45a10":"code","d51f4a56":"code","b490b6bb":"code","d971403a":"code","a87fe6cc":"code","3f03bd3a":"code","c26d9ebe":"code","8b5887c9":"code","a53d480f":"code","7fc04ace":"code","47d97464":"code","2f50ddae":"code","2433ad15":"code","03c2f0d6":"code","1cc9c7ce":"code","5ea40b57":"code","5a175aa4":"code","94079a91":"code","7c91baca":"code","f9982ecb":"code","abd79d57":"code","9dce71e7":"code","1dc09dd0":"code","20378b91":"code","f8bb2659":"code","67dffb82":"code","072e8ac3":"code","16ac36b8":"code","010e4da5":"code","7762f183":"code","caac6651":"code","1f93edc6":"code","10cea037":"code","770c5ebf":"code","78e7be90":"code","0a5024b5":"code","efa08867":"code","93ed2eb0":"code","5b69c86b":"markdown","b9321c00":"markdown","96293555":"markdown","a0bb5b3c":"markdown","d6fc9326":"markdown","431a3f62":"markdown","fb3d4184":"markdown","1cb7598f":"markdown","c95fb4ba":"markdown","37d488f7":"markdown","e1ed1668":"markdown","ad8f45f9":"markdown","d8423458":"markdown","16f7c456":"markdown","ac6e7dab":"markdown","e054cb43":"markdown","0c4cd60e":"markdown","9b58b649":"markdown","55b4798c":"markdown","fa82276c":"markdown","310de859":"markdown","4943cf5e":"markdown","72e70ba0":"markdown","75024724":"markdown","06f943f6":"markdown","ab7cc477":"markdown","02b3d4e8":"markdown","c1449677":"markdown"},"source":{"4437f3f6":"import numpy as np\nimport seaborn as sns \nimport pandas as pd\nimport matplotlib.pyplot as plt","06447a74":"# Data loading\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","84b0fef7":"df_train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_train.head()","10d279bb":"# to check all columns having null values more than 0\n\nnull_columns_count = df_train.isnull().sum()[df_train.isnull().sum() > 0]\nnull_columns_count.head()","33849e34":"total_rows_of_null_columns = df_train.isnull().count()[df_train.isnull().sum() > 0]\ntotal_rows_of_null_columns.head()","7fccc429":"# percentage of null data corresponding to each columns\n\nnull_percentage = (null_columns_count\/total_rows_of_null_columns)*float(100)\nnull_percentage.sort_values(ascending = False)","d471f1c0":"df_train = df_train.drop([\"PoolQC\" , \"MiscFeature\" , \"Alley\" , \"Fence\" , \"FireplaceQu\"] , axis = 1)","81c44dad":"df_train.head(2)","6ed0d303":"correlation_table = df_train.corr()\ncorrelation_table[\"SalePrice\"].sort_values(ascending = False)","74b1506c":"df_train = df_train.loc[:,{\"Id\" , \"OverallQual\" , \"GrLivArea\" ,\"GarageCars\" ,\"GarageArea\" , \"TotalBsmtSF\" , \"1stFlrSF\" , \"FullBath\" , \"TotRmsAbvGrd\" ,\"YearBuilt\" ,\"SalePrice\" }]","4b4be6a9":"df_train.isnull().sum()\n# no any null values","f2992306":"sns.pairplot(df_train)","47f4f6c4":"from sklearn.preprocessing import StandardScaler \n\nscaler = StandardScaler()\nstandardized = scaler.fit_transform(df_train[\"SalePrice\"][:,np.newaxis])\n\n#standardized---> now mean 0 and sd 1 \n\n# np.newaxis converts 1d to 2d  \n\n# we just have to check min and max value to get an idea of ouliers","b63c493d":"low_range = standardized[standardized[:,0].argsort()][:10]  # selecting only 10 data after sorting\nhigh_range= standardized[standardized[:,0].argsort()][-10:]\nprint(low_range)\nprint(high_range)","d597134d":"# we can see outliers effects above as points are deviated more on positive side","02d9407e":"sns.distplot(df_train[\"SalePrice\"])\n# positive skewness","41331b62":"from scipy import stats\n\nstats.probplot(df_train[\"SalePrice\"] , plot = plt)\n\n# have to transform it to normal distribution ","6c542743":"df_train[\"SalePrice\"] = np.log(df_train[\"SalePrice\"])","5ccbee9e":"from scipy.stats import norm\n\nsns.distplot(df_train[\"SalePrice\"] , fit = norm)","1cb0ae4f":"stats.probplot(df_train[\"SalePrice\"] , plot = plt)","bba44783":"df_train.columns","7bd0d6a1":"sns.barplot(x = \"OverallQual\" , y = \"SalePrice\" ,data = df_train)","7a670f52":"sns.scatterplot(x = \"GrLivArea\" , y = \"SalePrice\" , data = df_train)","eb4f8a66":"df_train[\"GrLivArea\"].sort_values(ascending = False).head(2)  # we got our two outliers","ff61715f":"#or\n\ndf_train.sort_values(by = \"GrLivArea\" ,ascending = False)[:2] # we got our two outliers","2205c6a4":"df_train = df_train.drop(df_train[df_train['Id'] == 1299].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 524].index)\n\n# removing outliers","f3b8c750":"sns.scatterplot(x = \"GrLivArea\" , y = \"SalePrice\" , data = df_train)","65c6cdb3":"sns.distplot(df_train[\"GrLivArea\"] , fit = norm)","02abf901":"stats.probplot(df_train[\"GrLivArea\"] , plot = plt)","0e0db63c":"df_train[\"GrLivArea\"] = np.log(df_train[\"GrLivArea\"])","9b618540":"# same thing as done for univariate analysis\n\nsns.distplot(df_train[\"GrLivArea\"] , fit = norm)","6a66e434":"stats.probplot(df_train[\"GrLivArea\"] , plot = plt)  \n\n# perfect","05892a2a":"fig,ax = plt.subplots(figsize = (15,5))\n\nsns.boxplot(x = \"YearBuilt\" , y = \"SalePrice\" ,data = df_train)","ed80cc14":"sns.barplot(x = \"TotRmsAbvGrd\" , y = \"SalePrice\" ,data = df_train)","017b9ab1":"sns.boxplot(x = \"TotRmsAbvGrd\" , y = \"SalePrice\" ,data = df_train)","f9fdf150":"sns.scatterplot(x = \"TotalBsmtSF\" , y = \"SalePrice\" , data = df_train)","71a46b5c":"df_train.sort_values(by = \"TotalBsmtSF\" ,ascending = False)[:2] # we got our two outliers","ad291ba4":"df_train = df_train.drop(df_train[df_train['Id'] == 333].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 497].index)\n\n# removing outliers","bc38a023":"sns.scatterplot(x = \"TotalBsmtSF\" , y = \"SalePrice\" , data = df_train)","2585c8f0":"sns.distplot(df_train[\"TotalBsmtSF\"] , fit = norm)","c287da94":"stats.probplot(df_train[\"TotalBsmtSF\"] , plot = plt)","3af87bf8":"df_train[\"FullBath\"].value_counts()","fb3911cb":"sns.barplot(x = \"FullBath\" , y = \"SalePrice\" , data = df_train)","b5b4a7f8":"sns.boxplot(x = \"FullBath\" , y = \"SalePrice\" , data = df_train)","72b9626a":"sns.scatterplot(x = \"GarageArea\" , y = \"SalePrice\" , data = df_train)\nplt.grid()","986379ac":"df_train.sort_values(by = \"GarageArea\" , ascending = False)","946c8a00":"df_train = df_train.drop(df_train[df_train[\"Id\"] == 582].index)","4b489fc7":"df_train = df_train.drop(df_train[df_train[\"Id\"] == 1191].index)\ndf_train = df_train.drop(df_train[df_train[\"Id\"] == 1062].index)","8008bed1":"sns.scatterplot(x = \"GarageArea\" , y = \"SalePrice\" , data = df_train)\nplt.grid()","d0a782b4":"sns.distplot(df_train[\"GarageArea\"] , fit = norm)","d304c0df":"stats.probplot(df_train[\"GarageArea\"]  , plot = plt)","7c57a449":"sns.scatterplot(x = \"1stFlrSF\" , y = \"SalePrice\" , data = df_train)\nplt.grid()","ddc45a10":"sns.distplot(df_train[\"1stFlrSF\"] , fit = norm)","d51f4a56":"stats.probplot(df_train[\"1stFlrSF\"] , plot = plt)","b490b6bb":"df_train[\"1stFlrSF\"] = np.log(df_train[\"1stFlrSF\"])","d971403a":"sns.distplot(df_train[\"1stFlrSF\"] , fit = norm)","a87fe6cc":"stats.probplot(df_train[\"1stFlrSF\"] , plot = plt)","3f03bd3a":"df_train[\"GarageCars\"].value_counts()","c26d9ebe":"sns.boxplot(x = \"GarageCars\" , y = \"SalePrice\" , data = df_train)\nplt.grid()","8b5887c9":"sns.stripplot(x = \"GarageCars\" , y = \"SalePrice\" , data = df_train)\nplt.grid()","a53d480f":"df_train.head()","7fc04ace":"x_train = df_train.drop([\"SalePrice\" , \"Id\"] , axis = 1)","47d97464":"y_train = df_train.loc[: , \"SalePrice\"]","2f50ddae":"y_train","2433ad15":"print(x_train.shape)\nprint(y_train.shape)","03c2f0d6":"df_test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_test.head()","1cc9c7ce":"df_test = df_test.loc[:,{\"Id\" , \"OverallQual\" , \"GrLivArea\" ,\"GarageCars\" ,\"GarageArea\" , \"TotalBsmtSF\" , \"1stFlrSF\" , \"FullBath\" , \"TotRmsAbvGrd\" ,\"YearBuilt\"  }]","5ea40b57":"df_test.isnull().sum()","5a175aa4":"df_test[df_test[\"TotalBsmtSF\"].isnull()]","94079a91":"df_test[\"TotalBsmtSF\"] = df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())","7c91baca":"df_test[df_test[\"GarageArea\"].isnull()]","f9982ecb":"df_test[\"GarageArea\"] = df_test['GarageArea'].fillna(df_test['GarageArea'].mean())","abd79d57":"df_test[df_test[\"GarageCars\"].isnull()]","9dce71e7":"df_test[\"GarageCars\"] = df_test['GarageCars'].fillna(df_test['GarageCars'].mean())","1dc09dd0":"df_test.isnull().sum()","20378b91":"df_test[\"1stFlrSF\"] = np.log(df_test[\"1stFlrSF\"])\ndf_test[\"GrLivArea\"] = np.log(df_test[\"GrLivArea\"])","f8bb2659":"x_test = df_test.drop(\"Id\" , axis = 1)","67dffb82":"x_train.head(2)","072e8ac3":"y_train.head(2)","16ac36b8":"x_test.head(2)","010e4da5":"import xgboost\nregressor=xgboost.XGBRegressor()","7762f183":"## Hyper Parameter Optimization\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\nbase_score=[0.25,0.5,0.75,1]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","caac6651":"# Set up the random search with 4-fold cross validation\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","1f93edc6":"random_cv.fit(x_train,y_train)","10cea037":"random_cv.best_params_","770c5ebf":"#regressor=xgboost.XGBRegressor(base_score=0.25, n_estimators = ,max_depth = , learning_rate = , min_child_weight = , booster = )\n","78e7be90":"#regressor.fit(x_train , y_train) ","0a5024b5":"y_pred = random_cv.predict(x_test)\ny_pred","efa08867":"y_pred_final = np.exp(y_pred)\ny_pred_final","93ed2eb0":"##Create Sample Submission file and Submit using ANN\n\npred=pd.DataFrame(y_pred_final)\nsub_df=pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\n#datasets.to_csv('sample_submission.csv',index=False)","5b69c86b":"We can say that as the room increases sale price also increases but there are outliers after room count 11 \\\nbut it is not fisible to remove that as may be people donot like more than 11 rooms","b9321c00":"As the garage size increases overall sale price also increases but after some threshold as we can see, it stops increasing","96293555":"As we can see, as the number of bathrooms increases ,sale price also increases so we can remove outlier which according to me \\\nis 0 bathrooms and its price is high cause of some other feautures but i think its not fisble to remove all 9 counts of \\\n0 bathrooms so we will check accuracy with this only later i will decide to remove that or not.","a0bb5b3c":"I am taking only that columns having correlation more than 0.50","d6fc9326":"#### It's better to remove columns having null percentage more than 20","431a3f62":"By analysing pairplots we can see outliers when comparing sale price to different features\\\nlets start analysis","fb3d4184":"# Univariate analysis(Sale price)","1cb7598f":"#### with YearBuilt","c95fb4ba":"I am removing 3 outliers that we can see in the above plot","37d488f7":"# Applying algorithm","e1ed1668":"#### filling null values with mean","ad8f45f9":"We can see two outliers so lets find them and remove them","d8423458":"#### Lets find correlation between columns","16f7c456":"#### Now our sale price becomes normally distributed","ac6e7dab":"#### with GrLivArea(garage live area)","e054cb43":"#### with GarageArea","0c4cd60e":"#### with TotRmsAbvGrd (Total rooms above grade)","9b58b649":"#### We will standardize sale price and lets see its max and min range to get an idea about outliers","55b4798c":"#### with OverallQual","fa82276c":"#### with TotalBsmtSF(total basement area)","310de859":"#### with 1stFlrSF (First Floor square feet) ","4943cf5e":"# Bivariate analysis","72e70ba0":"Here we can remove two outliers as we can say that basement area increases ,sale price also increases.","75024724":"#### with GarageCars (Size of garage in car capacity)","06f943f6":"It is not clear but we can say that old houses are somewhat cheaper than new houses ","ab7cc477":"#### with FullBath (Full bathrooms above grade)","02b3d4e8":"# For test data ","c1449677":"Its clearly visible that sale price is directly depended on overallquality so this selection is perfect"}}