{"cell_type":{"2a16bc22":"code","e63cee40":"code","293d767e":"code","46392d6c":"code","38a75788":"code","2248deaf":"code","d135569e":"code","30b0ea10":"code","49dafa49":"code","f5587a84":"code","635d0ea2":"code","c501135c":"code","32739f2f":"code","01f6a3fa":"code","716eb9da":"code","a75ad9d6":"code","5e1dbf53":"code","3495a3c7":"code","a229c1b2":"code","6da5db75":"markdown"},"source":{"2a16bc22":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nimport glob\n\nimport PIL\nfrom PIL import Image\nimport imageio\n\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\n\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sn\nimport numpy as np\nimport pathlib","e63cee40":"train_dir = pathlib.Path('..\/input\/brain-tumor-classification-mri\/Training')\ntest_dir = pathlib.Path('..\/input\/brain-tumor-classification-mri\/Testing')\n\nimage_count_train = len(list(train_dir.glob('*\/*.jpg')))\nimage_count_test = len(list(test_dir.glob('*\/*.jpg')))\nprint(\"Train Image Count: {} \\n Test Image Count: {}\".format(image_count_train,image_count_test))","293d767e":"batch_size = 32\nimg_height = 180\nimg_width = 180\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    train_dir,\n    validation_split=None,\n    seed=123,\n    image_size=(img_height, img_width),\n    batch_size=batch_size)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n  test_dir,\n  validation_split=None,\n  seed=123,\n  image_size=(img_height, img_width),\n  batch_size=batch_size)","46392d6c":"class_names = train_ds.class_names\nprint(class_names)","38a75788":"normalization_layer = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255)\n\nnormalized_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))\nimage_batch, labels_batch = next(iter(normalized_ds))","2248deaf":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)","d135569e":"num_classes = 4\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255),\n  tf.keras.layers.Conv2D(32, 3, activation='relu'),\n  tf.keras.layers.MaxPooling2D(),\n  tf.keras.layers.Conv2D(32, 3, activation='relu'),\n  tf.keras.layers.MaxPooling2D(),\n  tf.keras.layers.Conv2D(32, 3, activation='relu'),\n  tf.keras.layers.MaxPooling2D(),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(255, activation='relu'),\n  tf.keras.layers.Dense(num_classes)\n])\n\nmodel.compile(\n  optimizer='adam',\n  loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),\n  metrics=['accuracy'])\n\nhist = model.fit(\n  train_ds,\n  validation_data=val_ds,\n  epochs=20\n)","30b0ea10":"model.summary()","49dafa49":"tf.keras.utils.plot_model(model,\n                          show_shapes=True,\n                          expand_nested=True)","f5587a84":"def plot_metrics(history):\n  metrics = ['loss', 'accuracy']\n  for n, metric in enumerate(metrics):\n    try:\n      name = metric.replace(\"_\",\" \").capitalize()\n      plt.plot(history.epoch, history.history[metric], label='Train')\n      plt.plot(history.epoch, history.history['val_'+metric], linestyle=\"--\", label='Val')\n      plt.xlabel('Epoch')\n      plt.ylabel(name)\n      if metric == 'loss':\n        plt.ylim([0, plt.ylim()[1]])\n      elif metric == 'auc':\n        plt.ylim([0.8,1])\n      else:\n        plt.ylim([0,1])\n      plt.legend()\n      plt.show()  \n    except:\n      pass","635d0ea2":"plot_metrics(hist)","c501135c":"def list_files(dir,full_dir):\n    r = []\n    r1 = []\n    for root, dirs, files in os.walk(dir):\n        for name in files:\n            rr = os.path.join(root, name)\n            r.append(rr)\n    dd = {'local_path':r}\n    df = pd.DataFrame(dd)\n    return df\n\ndef proccess(img1):\n  img = tf.keras.preprocessing.image.load_img(\n      img1, target_size=(img_height, img_width)\n  )\n  img_array = tf.keras.preprocessing.image.img_to_array(img)\n  img_array = tf.expand_dims(img_array, 0) # Create a batch\n\n  predictions = model.predict(img_array)\n  score = tf.nn.softmax(predictions[0])\n\n  pred = class_names[np.argmax(score)]\n  score1 = 100 * np.max(score)\n\n  return pred, score1\n\n\ndef new_col(col):\n    if col['Pred'] == 'glioma_tumor' and col['Actual'] == 'glioma_tumor':\n        return 1\n    elif col['Pred'] == 'meningioma_tumor' and col['Actual'] == 'meningioma_tumor':\n      return 1\n    elif col['Pred'] == 'no_tumor' and col['Actual'] == 'no_tumor':\n      return 1\n    elif col['Pred'] == 'pituitary_tumor' and col['Actual'] == 'pituitary_tumor':\n      return 1\n    else:\n      return 0\n\n\ndef proccess1(df):\n  aa = []\n  bb = []\n  cc = []\n\n  for a,b in df.iterrows():\n    img = b['local_path']\n    pred, value = proccess(img)\n    pat = b['local_path']\n    \n    val = pat.split('\/')[4]\n    \n    aa.append(pred)\n    bb.append(value)\n    cc.append(val)\n  vals = {\"Pred\":aa,\"Accurarcy\":bb,'Actual':cc}\n  df_test1 = pd.DataFrame(vals)\n  df_test1 = pd.concat([df,df_test1], axis=1)\n\n  df_test1['Check'] = df_test1.apply(lambda col: new_col (col),axis=1)\n\n  return df_test1\n","32739f2f":"fullpath = '..\/input\/brain-tumor-classification-mri\/Testing'\npath = \"test\"\n\ndf_test = list_files(fullpath, path)\ndf_test1 = proccess1(df_test)","01f6a3fa":"form = df_test1.Check.value_counts()[1] \/ df_test1.Check.count()\nprint('Accuracy is : {}'.format(form))","716eb9da":"df_test1[df_test1['Check'] == 0][['Pred',\"Actual\"]].value_counts()","a75ad9d6":"df_test1[df_test1['Check'] == 1][['Pred']].value_counts()","5e1dbf53":"df_test1.head(2)","3495a3c7":"count = 0\nfor a,b in df_test1[(df_test1['Check'] == 0) & (df_test1['Actual'] == 'glioma_tumor')].iterrows():\n    if count == 10:\n        break\n    img_path = (b['local_path'])\n    im = imageio.imread(img_path)\n\n    print(\"Actual: {} \\nPrediction: {}\".format(b['Actual'], b['Pred']))\n    plt.imshow(im)\n    plt.show()\n    count +=1\n    print('==============================================')","a229c1b2":"count = 0\nfor a,b in df_test1[(df_test1['Check'] == 0) & (df_test1['Actual'] == 'pituitary_tumor')].iterrows():\n    if count == 10:\n        break\n    img_path = (b['local_path'])\n    im = imageio.imread(img_path)\n\n    print(\"Actual: {} \\nPrediction: {}\".format(b['Actual'], b['Pred']))\n    plt.imshow(im)\n    plt.show()\n    count +=1\n    print('==============================================')","6da5db75":"# Model Summary"}}