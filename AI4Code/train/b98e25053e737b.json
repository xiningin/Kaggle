{"cell_type":{"6a8f04f6":"code","b8167019":"code","049280f5":"code","36614a6f":"code","9dd78723":"code","55f35941":"code","010ed911":"code","97ac8148":"code","300ebf44":"code","330ea7d2":"code","297fe8d0":"code","35804bf3":"code","9e3ab938":"code","cd545c7a":"code","b7825b7b":"code","e492d1db":"code","4b4551af":"code","0102f748":"code","f939f659":"code","4f62a5e1":"code","ec22e610":"code","e50e46f8":"code","f743a789":"markdown","24d5dcc2":"markdown","826146d1":"markdown","539d7576":"markdown","ea1822c9":"markdown"},"source":{"6a8f04f6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8167019":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf\nimport keras","049280f5":"ds = pd.read_csv('\/kaggle\/input\/foreign-exchange-rates-per-dollar-20002019\/Foreign_Exchange_Rates.csv', na_values='ND')\nds","36614a6f":"ds.isnull().sum()","9dd78723":"ds.interpolate(inplace=True)\nds.isnull().sum()","55f35941":"plt.plot(ds['UNITED KINGDOM - UNITED KINGDOM POUND\/US$'])","010ed911":"plt.plot(ds['CANADA - CANADIAN DOLLAR\/US$'])","97ac8148":"df = ds['CANADA - CANADIAN DOLLAR\/US$']\ndf","300ebf44":"df = np.array(df).reshape(-1,1)\ndf","330ea7d2":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","297fe8d0":"df = scaler.fit_transform(df)\ndf","35804bf3":"train = df[:4800]\ntest = df[4800:]\n\ntrain.shape , test.shape","9e3ab938":"def get_data(data, look_back):\n  datax, datay = [],[]\n  for i in range(len(data)-look_back-1):\n    datax.append(data[i:(i+look_back),0])\n    datay.append(data[i+look_back,0])\n  return np.array(datax) , np.array(datay)","cd545c7a":"look_back = 1\n\nx_train , y_train = get_data(train, look_back)\nx_train.shape , y_train.shape","b7825b7b":"x_test , y_test = get_data(test,look_back)\nx_test.shape, y_test.shape","e492d1db":"x_train = x_train.reshape(x_train.shape[0],x_train.shape[1], 1)\nx_test = x_test.reshape(x_test.shape[0],x_test.shape[1], 1)\n\nx_train.shape, x_test.shape","4b4551af":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.LSTM(5, activation='tanh', input_dim = 1))\nmodel.add(tf.keras.layers.Dense(1))","0102f748":"model.compile(optimizer='adam', loss = 'mse')\nmodel.fit(x_train,y_train, epochs = 5, batch_size=1)","f939f659":"scaler.scale_","4f62a5e1":"y_pred = model.predict(x_test)\n\ny_pred = scaler.inverse_transform(y_pred)\ny_pred[:10]","ec22e610":"y_test = np.array(y_test).reshape(-1,1)\ny_test = scaler.inverse_transform(y_test)\ny_test[:10]","e50e46f8":"plt.plot(y_test , label = 'Actual')\nplt.plot(y_pred , label = 'Predicted')\nplt.legend()","f743a789":"## Inverse transformation of MinMaxScaler","24d5dcc2":"# Split data into train and test","826146d1":"# Accuracy","539d7576":"## Standardization","ea1822c9":"# LSTM"}}