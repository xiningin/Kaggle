{"cell_type":{"9c6c6078":"code","739d2553":"code","3ec3a868":"code","0d8b9382":"code","04c2aab9":"code","423b6667":"code","33dd475d":"code","446dd6f9":"code","bf7f2cde":"code","4f318137":"code","221f69c0":"code","99346767":"code","47508885":"code","e9411f28":"code","406a35d5":"code","2aa47a2d":"code","30c9fb4e":"code","a8448a04":"code","c33bb906":"code","dde104fc":"code","35391cdb":"code","de7a520b":"code","431ee162":"code","31c33a4e":"code","9542b04b":"code","fd9d4b1f":"code","73fb4fc0":"code","bc5a2854":"code","9cbfa5e6":"code","a4acb3a8":"code","bf20ce30":"code","867f503b":"code","b667bd07":"code","ee71817a":"code","b6ccf4a8":"code","d87a7549":"code","5f6700a1":"code","f474219b":"code","7943144d":"code","71baa3b1":"code","87d9cfe7":"code","36e2917b":"code","96f66c8a":"code","ebec1c56":"code","439ba507":"code","1b7d9c9c":"code","83949483":"code","3dddec93":"code","fa01c151":"code","f0dcb6cc":"code","c6911194":"code","870382b8":"code","c3ebecfb":"code","820e2eda":"code","e4887cff":"code","a3e08bf8":"code","d69a37ec":"code","043197c9":"code","e3fb4b20":"code","99aba723":"code","b17a71b6":"code","8f074021":"code","4c9e268c":"code","755e8fd8":"markdown","702aa1b6":"markdown","c4eca88c":"markdown","d4df1158":"markdown","27c8c998":"markdown","bce698fc":"markdown","7f3ec823":"markdown","4c740cbd":"markdown","4d99b972":"markdown","5020f950":"markdown","47264343":"markdown","3c5fc5a1":"markdown","3b35f705":"markdown","e11e9a44":"markdown","e1009e9e":"markdown","5d2e2d25":"markdown","dbf8b848":"markdown","4fdbd8f0":"markdown","d3c2c8d4":"markdown","35c375ba":"markdown"},"source":{"9c6c6078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","739d2553":"df = pd.read_csv(\"\/kaggle\/input\/av-jobathon-sep2021\/train.csv\")\ndf","3ec3a868":"import pandas_profiling as pp","0d8b9382":"profile = pp.ProfileReport(df)","04c2aab9":"#profile","423b6667":"df.isnull().sum()","33dd475d":"df.drop([\"ID\"],axis=1,inplace=True)","446dd6f9":"df.head()","bf7f2cde":"encoded_data = pd.get_dummies(df,columns=[\"Store_Type\",\"Location_Type\",\"Region_Code\",\"Discount\"])\nencoded_data","4f318137":"test = pd.read_csv(\"\/kaggle\/input\/av-jobathon-sep2021\/test.csv\")\ntest","221f69c0":"encoded_test_data = pd.get_dummies(test,columns=[\"Store_Type\",\"Location_Type\",\"Region_Code\",\"Discount\"])\nencoded_test_data","99346767":"#training_set\nencoded_data['Date'] = pd.to_datetime(encoded_data['Date'])\nencoded_data['Day']=encoded_data['Date'].dt.day_name()\nencoded_data","47508885":"#training_set\nencoded_test_data['Date'] = pd.to_datetime(encoded_test_data['Date'])\nencoded_test_data['Day']=encoded_test_data['Date'].dt.day_name()\nencoded_test_data","e9411f28":"#training_data\nencoded_data = pd.get_dummies(encoded_data,columns=[\"Day\"]) \nencoded_data","406a35d5":"#test_data\nencoded_test_data = pd.get_dummies(encoded_test_data,columns=[\"Day\"])","2aa47a2d":"encoded_test_data","30c9fb4e":"#training_set\nencoded_data[\"month\"] = pd.DatetimeIndex(encoded_data[\"Date\"]).month\nencoded_data","a8448a04":"#test_set\nencoded_test_data[\"month\"] = pd.DatetimeIndex(encoded_test_data[\"Date\"]).month\nencoded_data","c33bb906":"#training_data\nencoded_data = pd.get_dummies(encoded_data,columns=[\"month\"]) \nencoded_data","dde104fc":"#test_data\nencoded_test_data = pd.get_dummies(encoded_test_data,columns=[\"month\"]) \nencoded_test_data","35391cdb":"encoded_test_data","de7a520b":"encoded_data.columns","431ee162":"encoded_test_data.columns","31c33a4e":"encoded_test_data.drop([\"ID\"],axis=1,inplace=True)","9542b04b":"encoded_data.drop([\"#Order\"],axis=1,inplace=True)","fd9d4b1f":"encoded_data.columns","73fb4fc0":"encoded_test_data.columns","bc5a2854":"encoded_data.head()","9cbfa5e6":"encoded_test_data.head()","a4acb3a8":"encoded_data.drop([\"Date\"],axis=1,inplace=True)\nencoded_test_data.drop([\"Date\"],axis=1,inplace=True)","bf20ce30":"encoded_data.head()","867f503b":"encoded_test_data.head()","b667bd07":"from sklearn.model_selection import train_test_split","ee71817a":"x = encoded_data.drop([\"Sales\"],axis=1)","b6ccf4a8":"y = encoded_data[\"Sales\"]\ny","d87a7549":"#splitting the dataset for training the model\nX_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.3)","5f6700a1":"from sklearn.linear_model import LinearRegression","f474219b":"LR = LinearRegression()","7943144d":"LR.fit(X_train,y_train)","71baa3b1":"y_prediction =  LR.predict(X_test)\ny_prediction","87d9cfe7":"from sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\n# predicting the accuracy score\nscore=r2_score(y_test,y_prediction)\nprint(\"r2 socre is \",score)\nprint(\"mean_sqrd_error is==\",mean_squared_error(y_test,y_prediction))\nprint(\"root_mean_squared error of is==\",np.sqrt(mean_squared_error(y_test,y_prediction)))","36e2917b":"import xgboost as xg","96f66c8a":"xgb_r = xg.XGBRegressor(objective ='reg:linear',\n                  n_estimators = 10, seed = 123)","ebec1c56":"xgb_r.fit(X_train, y_train)\n","439ba507":"pred = xgb_r.predict(X_test)","1b7d9c9c":"pred","83949483":"y_test","3dddec93":"from sklearn.metrics import mean_squared_error as MSE\nrmse = np.sqrt(MSE(y_test, pred))\nprint(\"RMSE : % f\" %(rmse))","fa01c151":"encoded_test_data","f0dcb6cc":"encoded_test_data[\"month_1\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_2\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_3\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_4\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_5\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_6_new\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_7_new\"] = encoded_test_data[\"month_7\"]\nencoded_test_data[\"month_8\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_9\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_10\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_11\"] = encoded_test_data[\"month_6\"]\nencoded_test_data[\"month_12\"] = encoded_test_data[\"month_6\"]\n\n\nencoded_test_data","c6911194":"encoded_test_data.drop([\"month_6\",\"month_7\"],axis=1,inplace=True)","870382b8":"encoded_test_data.rename(columns={\"month_6_new\":\"month_6\",\"month_7_new\":\"month_7\"},inplace=True)","c3ebecfb":"cols=[\"month_1\",\"month_2\",\"month_3\",\"month_4\",\"month_5\",\"month_8\",\"month_9\",\"month_10\",\"month_11\",\"month_12\"]\ncols","820e2eda":"for i in cols:\n    encoded_test_data[cols]=0","e4887cff":"encoded_test_data[cols]","a3e08bf8":"encoded_test_data","d69a37ec":"result = xgb_r.predict(encoded_test_data)","043197c9":"result","e3fb4b20":"test","99aba723":"sub = pd.DataFrame()","b17a71b6":"sub[\"ID\"] = test[\"ID\"]\nsub[\"Sales\"] = result","8f074021":"sub","4c9e268c":"sub.to_csv(\"Submission.csv\",index=False)","755e8fd8":"### Linear Regression","702aa1b6":"### Checking for the missing values in the data","c4eca88c":"## Exploratory Data Analysis","d4df1158":"### XGBOOSTER","27c8c998":"## Preparing the data for training the model ","bce698fc":"### Encoding the Day Column","7f3ec823":"### Extracting the month from date column","4c740cbd":"### Viewing the final datasets","4d99b972":"### Checking wheather all columns are same in training and test data","5020f950":"we don't need the data column in train and test data now, so we drop the columns in both the datasets","47264343":"There is no missing values in the training data","3c5fc5a1":"## Pre-processing ","3b35f705":"There are few columns missing in the encoded_test_data, month_1 to month_12 excluding month_6 and month_7 is missing","e11e9a44":"Since the transcation id is unique we don't need that in our analysis","e1009e9e":"## Reading the datasets","5d2e2d25":"There are 5 categorical columns and one numerical columns in the data.\nFor each of the categorical columns we need to convert it into numerical data, so we perform one hot encoding for the categorical features.","dbf8b848":"### There is and extra column in test data Id and #order ","4fdbd8f0":"#### Importing the test data and performing the transformation on it","d3c2c8d4":"### Performing encoding on months","35c375ba":"## Feature Engineering\n### Extracting the Days of the week using date"}}