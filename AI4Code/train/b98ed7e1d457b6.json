{"cell_type":{"f0954d15":"code","f60252d1":"code","c3c14a3b":"code","cfeafe1a":"code","12d3fdaa":"code","b87d9150":"code","c7aa1bbf":"code","fd093702":"code","93c6c63b":"code","f25c877d":"code","59501e7b":"code","35b9118f":"markdown"},"source":{"f0954d15":"import pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport numpy as np\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\n%matplotlib inline\nsns.set(font_scale=1.4)","f60252d1":"data= pd.read_csv('..\/input\/covid19india\/data.csv')\ndata[data['id'] == data['unique_id']].shape","c3c14a3b":"entities = ['schools & other educational organization shutdown','public places shutdown',\n            'work from home started for employees','country under lockdown','current situation']\ndates = ['2020-03-10','2020-03-13','2020-03-16','2020-03-21','2020-03-26']","cfeafe1a":"data = data.sort_values(by=\"diagnosed_date\")","12d3fdaa":"mask1 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-09') # before school lockdown\nmask1 = len(data.loc[mask1])\nmask2 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-12') #before public place shutdown\nmask2 = len(data.loc[mask2])\nmask3 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-15') # beforw wfh\nmask3 = len(data.loc[mask3])\nmask4 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-21') # beforw lookdown\nmask4 = len(data.loc[mask4])\nmask5 = (data['diagnosed_date'] > '2020-01-30') & (data['diagnosed_date'] <= '2020-03-26') # beforw lookdown\nmask5 = len(data.loc[mask5])","b87d9150":"case_counts = [mask1, mask2,mask3,mask4,mask5]","c7aa1bbf":"plot_data = pd.DataFrame({'dates':dates,'counts':case_counts,'entities': entities})","fd093702":"plot_data","93c6c63b":"plot_data['dates'] = pd.to_datetime(plot_data['dates'])","f25c877d":"fig, ax = plt.subplots(figsize = (10,6))\nlabels = entities\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.family'] = 'sans-serif'\nplt.rcParams['text.color'] = 'black'\nplt.rcParams['axes.labelcolor']= '#909090'\nplt.rcParams['xtick.color'] = 'black'\nplt.rcParams['ytick.color'] = 'black'\nplt.rcParams['font.size']=14\ncolor_palette_list = ['#009ACD', '#ADD8E6', '#63D1F4', '#0EBFE9',   \n                      '#C1F0F6', '#0099CC']\npercentages = case_counts\nexplode=(0.1,0.1,0.1,0,0)\nax.pie(percentages, explode=explode, labels=labels,  \n       colors=color_palette_list[0:2], autopct='%1.0f%%', \n       shadow=False, startangle=0,   \n       pctdistance=1.2,labeldistance=1.4)\nax.axis('equal')\nax.legend(frameon=False, bbox_to_anchor=(0.0,0.8))","59501e7b":"fig, ax = plt.subplots(figsize=(10,8))\nplt.hlines(y=plot_data.entities, xmin=0, xmax=plot_data.counts, color='red')\nplt.plot(plot_data.counts, plot_data.entities, \"D\")\n# Add titles and axis names\nax.xaxis.label.set_color('black')\nplt.yticks(plot_data.entities)\nplt.title(\"Case Count Growth Rate After Lockdown\")\nplt.xlabel('Covid19 Case Count', fontsize=10)","35b9118f":"> **Note: This work is highly inspired from few other kaggle kernels , github sources and other data science resources. Any traces of replications, which may appear , is purely co-incidental. Due respect & credit to all my fellow kagglers.**"}}