{"cell_type":{"7c59056f":"code","1a448039":"code","5dbad1d9":"code","08d8eed8":"code","f7e17238":"code","5e08ff1f":"code","08b38fe7":"code","cfff5c65":"code","f35079b1":"code","678899c5":"code","ce956e04":"code","f4aa2b13":"code","d66c43f9":"code","2fab9cbe":"code","3f272be9":"code","64836244":"code","d769d69a":"code","a806332f":"code","aec487f8":"code","f7e1db3c":"code","0ecaa88f":"code","59f2e397":"code","fbfccd18":"code","7ef00935":"code","3e9a97b7":"code","654a8307":"code","248ea34b":"code","19c90555":"code","4166155b":"code","09f0c5b4":"code","abae87bb":"code","4522a220":"code","19c78e49":"code","b5d9e6ec":"code","e92859ef":"code","82f6d2bc":"code","d30c87f1":"code","4bbf3ebb":"code","a0d12787":"code","0bca793e":"code","0333f11d":"code","ef07db9f":"code","434687dd":"code","8c8f3b37":"code","4b766651":"code","9326bbba":"code","4eddd6b5":"code","40d495bd":"code","817486c5":"code","f9bed198":"code","113b6943":"code","fc3ac3b5":"code","7de0d06f":"code","7ecd8481":"code","dda3fc19":"code","98c67f85":"code","245caa8a":"code","90936247":"code","6d630add":"code","c8788c61":"code","dbcac189":"code","ff0cac9d":"code","a6e008de":"code","5e866643":"code","b4d1a1d3":"code","f7fcf926":"code","460e1135":"code","62ca609d":"code","36193f4b":"code","bfae15fc":"code","f5900523":"code","2ab092ae":"code","21c85cc5":"code","317bd688":"code","3d60500c":"code","f86473ef":"code","86376974":"code","b94ae8dc":"code","f7273c4c":"code","fdfc054a":"code","b15c08de":"code","3ef97cd8":"code","9d313fd5":"code","27068f1d":"code","48a2b4af":"code","0ca0223b":"code","41a6907a":"code","d3b1b296":"code","a889d41e":"code","775aa386":"code","e2cbe143":"code","bf3b86d3":"code","c45721d5":"code","3fe9d26c":"markdown","faadd94b":"markdown","c94867b7":"markdown","ea430c6b":"markdown","dceecbdb":"markdown","47677349":"markdown","c45d673a":"markdown","a05dbca6":"markdown","b318582c":"markdown","2781fef3":"markdown","482c79ab":"markdown","5e54f903":"markdown","0722cf29":"markdown","09f730cb":"markdown","8eaea202":"markdown","08cbc00a":"markdown","57af4770":"markdown","5848fea4":"markdown","6fcd682b":"markdown","3c0885f2":"markdown"},"source":{"7c59056f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom scipy.stats import norm, skew, boxcox_normmax\nfrom scipy.special import boxcox1p\nfrom datetime import date\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split","1a448039":"#uploading training and test data\ntrain_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","5dbad1d9":"train_data.head()","08d8eed8":"test_data.head()","f7e17238":"train_data.shape","5e08ff1f":"test_data.shape","08b38fe7":"df=pd.concat([train_data, test_data], ignore_index=True)","cfff5c65":"df.head()","f35079b1":"data=df.copy()","678899c5":"df.shape","ce956e04":"df.dtypes","f4aa2b13":"df.info()","d66c43f9":"df.describe().T","2fab9cbe":"sns.distplot(df[df['SalePrice'].notnull()]['SalePrice'])","3f272be9":"train_data.corr()","64836244":"f, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(train_data.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","d769d69a":"def find_correlation(df, num_cols, corr_limit=0.60):\n    high_corr, low_corr={}, {}\n    for col in num_cols:\n        if col=='SalePrice':\n            pass\n        else:\n            corr=df[[col, 'SalePrice']].corr().loc[col, 'SalePrice']\n            print(col, corr)\n            if abs(corr)>corr_limit:\n                high_corr[col]=corr\n            else:\n                low_corr[col]=corr\n                \n    return high_corr, low_corr","a806332f":"# Some of the non-numeric predictors are stored as numbers; convert them into strings \ndf['MSSubClass'] = df['MSSubClass'].apply(str)\ndf['YrSold'] = df['YrSold'].astype(str)\ndf['MoSold'] = df['MoSold'].astype(str)","aec487f8":"sns.distplot(df[df['SalePrice'].notnull()]['SalePrice'])","f7e1db3c":"sns.distplot(df[df['SalePrice'].notnull()]['SalePrice'], fit=norm)","0ecaa88f":"#musbetdirse saga carpik, menfidirse sola carpik, 0 ve 0-a yaxin simmetrik\nprint(\"Skewness coeff. is: %f\" % df[df['SalePrice'].notnull()]['SalePrice'].skew())\n\n#3 olanda SNP, 3-den kicik olanda nisbeten daha basik 3-den boyuk olanda daha dik\nprint(\"Kurtosis coeff. is: %f\" % df[df['SalePrice'].notnull()]['SalePrice'].kurt())","59f2e397":"# log(1+x) transform\ndf['SalePrice']=np.log1p(df['SalePrice'])","fbfccd18":"sns.distplot(df[df['SalePrice'].notnull()]['SalePrice'], fit=norm)","7ef00935":"#finding numeric column from data\nnum_cols=list(df._get_numeric_data().columns)\nnum_cols.remove('Id')\nprint(f\"Numeric variable numbers: {len(num_cols)}\")","3e9a97b7":"def hist_for_nums(df, numeric_cols):\n    for col in numeric_cols:\n        df[col].hist(bins=20)\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()","654a8307":"hist_for_nums(df, num_cols)","248ea34b":"find_correlation(df, num_cols)","19c90555":"cat_cols=list(set(df.columns)-set(num_cols))\nprint('Categorical Features:{}'.format(len(cat_cols)))","4166155b":"df[cat_cols].nunique()","09f0c5b4":"#count total value in every catgorical feature\nfor cat in cat_cols:\n    print(f'##########{cat}##########')\n    print(df[cat].value_counts(normalize=True))","abae87bb":"df.drop(df[(df['GrLivArea']>4500) & (df['SalePrice']<300000) ].index, inplace=True)","4522a220":"df[df['GarageYrBlt']==2207]","19c78e49":"df.loc[df['GarageYrBlt']==2207, 'GarageYrBlt']=2007","b5d9e6ec":"#Total number of nulls\ndf.drop('SalePrice', axis=1).isnull().sum().sum()","e92859ef":"df.drop('SalePrice', axis=1).isnull().sum().sort_values(ascending=False)","82f6d2bc":"total_null=df.drop('SalePrice', axis=1).isnull().sum().sort_values(ascending=False)","d30c87f1":"percentage=(df.drop('SalePrice', axis=1).isnull().sum()\/len(df))\nmissing_data=pd.concat([total_null, percentage], axis=1, keys=['Total', 'Percentage'])","4bbf3ebb":"missing_data.head(10)","a0d12787":"missing_data[missing_data['Percentage']>0.05].index","0bca793e":"plt.figure(figsize=(8,5))\nplt.title('Percent missing data by feature')\nsns.barplot(missing_data.head(10).index, missing_data.head(10)['Percentage'])\nplt.xticks(rotation=45)\nplt.show()","0333f11d":"df['Functional']=df['Functional'].fillna('Typ')","ef07db9f":"df['PoolQC']=df['PoolQC'].fillna('None')","434687dd":"for col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    df[col]=df[col].fillna(0)","8c8f3b37":"for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    df[col]=df[col].fillna('None')","4b766651":"for col in ['BsmtQual', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    df[col]=df[col].fillna('None')","9326bbba":"df['MSZoning'] = df.groupby('MSSubClass')['MSZoning'].apply(lambda x: x.fillna(x.mode()[0]))","4eddd6b5":"#Group the by neighborhoods, and fill in missing value by the median LotFrontage of the neighborhood\ndf['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","40d495bd":"#filling numrical missing value using fillna\nfor col in num_cols:\n    if col=='SalePrice':\n        pass\n    else:  \n        df[col].fillna(df[col].mean(), inplace=True)","817486c5":"#filling catgorical missing value\nfor col in cat_cols:\n    df[col].fillna(df[col].mode()[0], inplace=True)","f9bed198":"#There are no missing values anymore!\ndf.drop('SalePrice', axis=1).isnull().sum().sum()","113b6943":"skewed_feats = df[num_cols].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)","fc3ac3b5":"skewed_feats.head(10)","7de0d06f":"skewed_features=(skewed_feats[skewed_feats>0.5]).index\nprint(len(skewed_features))","7ecd8481":"for col in skewed_features:\n     df[col] = boxcox1p(df[col], boxcox_normmax(df[col] + 1))","dda3fc19":"df['Sold_RemodAdd']=df['YrSold'].astype(int)-df['YearRemodAdd']","98c67f85":"df['Sold_Built']=df['YrSold'].astype(int)-df['YearBuilt']","245caa8a":"df['TotalSF']=df['TotalBsmtSF']+df['1stFlrSF']+df['2ndFlrSF']","90936247":"df['Total_porch_sf'] = df['OpenPorchSF'] + df['3SsnPorch'] + df['EnclosedPorch'] + df['ScreenPorch'] + df['WoodDeckSF']","6d630add":"df['TotalSF'] = df['BsmtFinSF1'] + df['BsmtFinSF2'] + df['1stFlrSF'] + df['2ndFlrSF']","c8788c61":"df['Sold_GarageYrBlt']=df['YrSold'].astype(int)-df['GarageYrBlt']","dbcac189":"df['KitchenBedroomAbvGr']=df['KitchenAbvGr']+df['BedroomAbvGr']","ff0cac9d":"df['GrDividedLotArea']=df['GrLivArea']\/df['LotArea']","a6e008de":"todays_date = date.today()\ndf[\"Building_age\"] = todays_date.year - df[\"YearBuilt\"]","5e866643":"df['YrBltAndRemodAdd'] = df['YearRemodAdd'] - df['YearBuilt']","b4d1a1d3":"df['All_FlrSF']=df['1stFlrSF']+df['2ndFlrSF']","f7fcf926":"df['HasTotalBsmtSF']=[ 0 if i==0 else 1 for i in df['TotalBsmtSF'].astype(int) ]","460e1135":"df['Has2ndFlrSF']=[ 0 if i==0 else 1 for i in df['2ndFlrSF'].astype(int) ]","62ca609d":"df['HasGarageArea']=[ 0 if i==0 else 1 for i in df['GarageArea'].astype(int) ]","36193f4b":"df['HasGarageCars']=[ 0 if i==0 else 1 for i in df['GarageCars'].astype(int) ]","bfae15fc":"df['HasBsmtQual']= [ 0 if i==\"None\" else 1 for i in df['BsmtQual'] ]","f5900523":"df['HasPoolArea']=[0 if i==0 else 1 for i in df['PoolArea'].astype(int) ]","2ab092ae":"df['HasTotalBsmtSF']=[0 if i==0 else 1 for i in df['TotalBsmtSF'].astype(int) ]","21c85cc5":"df['HasFireplaces']=[ 0 if i==0 else 1 for i in df['Fireplaces'].astype(int) ]","317bd688":"df['Has2ndfloor'] =[ 0 if i==0 else 1 for i in df['2ndFlrSF'].astype(int) ]","3d60500c":"df['HasWoodDeckSF']=[0 if i==0 else 1 for i in df['WoodDeckSF'].astype(int) ]","f86473ef":"df[\"HasCentralAir\"]=[ 1 if i=='Y' else 0 for i in df[\"CentralAir\"] ]","86376974":"df['HasLotFrontage'] =[ 0 if i==0 else 1 for i in df['LotFrontage'].astype(int) ]","b94ae8dc":"df['HasMasVnrArea'] =[ 0 if i==0 else 1 for i in df['MasVnrArea'].astype(int) ]","f7273c4c":"df['HasBsmtFinSF1'] =[ 0 if i==0 else 1 for i in df['BsmtFinSF1'].astype(int) ]","fdfc054a":"df=df.drop(['Utilities', 'Street', 'PoolQC', ], axis=1)","b15c08de":"num_cols=list(df._get_numeric_data().columns)\nnum_cols.remove('Id')\ncat_cols=list(set(df.columns)-set(num_cols))\nnumerical=list(set(num_cols)-set(['SalePrice']))\nscaler = preprocessing.MinMaxScaler()\ndf[numerical]=scaler.fit_transform(df[numerical])","3ef97cd8":"df=pd.get_dummies(df, drop_first=True)","9d313fd5":"df.head()","27068f1d":"train=df[df['SalePrice'].notnull()].drop('Id', axis=1)\ntest=df[df['SalePrice'].isnull()].drop('SalePrice', axis=1)","48a2b4af":"train.head()","0ca0223b":"test.head()","41a6907a":"X = train.drop([\"SalePrice\"], axis=1)\nY=train[['SalePrice']]","d3b1b296":"def submission(test, predict):\n    res=test.copy()\n    res['SalePrice']=np.around(pre, 2)\n    res['Id']=res.astype(int)\n    return res[['Id', 'SalePrice']]","a889d41e":"def model_tuning(X, Y, algo, algo_cv, grid, split_share=0.20, cv=10):\n    X_train, X_test, Y_train, Y_test=train_test_split(X, Y, random_state=42, test_size=split_share)\n    model_cv=algo_cv(alphas=grid, cv=cv)\n    model_cv.fit(X_train, Y_train)\n    model_tuned=algo(alpha=model_cv.alpha_)\n    model_tuned.fit(X_train, Y_train)\n    train_rmse=np.sqrt(mean_squared_error(Y_train, model_tuned.predict(X_train)))\n    test_rmse=np.sqrt(mean_squared_error(Y_test, model_tuned.predict(X_test)))\n    return (type(algo()).__name__, train_rmse, test_rmse) ","775aa386":"models={Ridge: RidgeCV, Lasso:LassoCV, ElasticNet:ElasticNetCV}\nresults_tuned={'model':[], 'train_rmse':[], 'test_rmse':[]}\nalphas = [1e-1, 1e-2, 1e-3, 1e-4, 1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 5e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]","e2cbe143":"for model in models:\n    res=model_tuning(X, Y, model, models[model], alphas)\n    results_tuned['model'].append(res[0])\n    results_tuned['train_rmse'].append(res[1])\n    results_tuned['test_rmse'].append(res[2])","bf3b86d3":"results_tuned=pd.DataFrame(results_tuned)\nresults_tuned","c45721d5":"#0.12517\nalphas = [1e-1, 1e-2, 1e-3, 1e-4, 1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 5e-2, 0.1, 0.3, 1, 3, 5, \n          10, 15, 18, 20, 30, 50, 75, 100, 0.001, 0.0005]\nmodel_cv=LassoCV(alphas=alphas, cv=20)\nmodel_cv.fit(X, Y)\nmodel_tuned=Lasso(alpha=model_cv.alpha_, max_iter=50000)\nmodel_tuned.fit(X, Y)\npre=model_tuned.predict(test.drop('Id', axis=1))\nres=submission(test, pre)\nres['SalePrice']=np.exp(res['SalePrice'])\nres.to_csv('submission.csv', index=False)","3fe9d26c":"# Encode categorical features","faadd94b":"# Categorical Variable Analysis","c94867b7":"# Correlation","ea430c6b":"# Numerical Variable Analysis","dceecbdb":"# Import libraries","47677349":"# Final Model","c45d673a":"# Independent variable analysis","a05dbca6":"# Get the data","b318582c":"# Setup models","2781fef3":"# Missing Values","482c79ab":"# Sale price analysis","5e54f903":"combining training & testing data for preposesing after that we do not write same code for test","0722cf29":"# SalePrice: the variable we're trying to predict","09f730cb":"# here we use minmax scaler for scaling numeric fields","8eaea202":"# Create Interesting features","08cbc00a":"# EDA","57af4770":"# Submission function","5848fea4":"# Feature Engineering","6fcd682b":"# Outliers","3c0885f2":"# Data Preposesing"}}