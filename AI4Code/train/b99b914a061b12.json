{"cell_type":{"90c14e37":"code","67fc835a":"code","d37d9d77":"code","f21d1e91":"code","6cd0d253":"code","3d34023c":"code","df79885a":"code","59977643":"code","798ac5cc":"code","bdf470c1":"code","e085f5f0":"code","b6ef7a24":"code","0406e916":"code","f4f43703":"code","38f778f8":"code","1f290ef0":"code","04f132f0":"code","2eccd811":"code","340e4ae0":"code","ffd6d1d6":"code","fa053a7c":"code","7862ecc0":"code","24e7d117":"code","f0e1ae61":"code","6597bbcc":"code","8a6b9ab5":"code","392882e3":"code","86f97fdb":"code","41121a8e":"code","4dd9583f":"code","cdebd415":"code","12be01d7":"code","5f6404d2":"code","5a9e9d12":"code","b3e4fe5d":"code","c34fd75c":"code","01e917c7":"code","1be0cc6b":"code","e843c336":"code","a08b5986":"code","ac4309a5":"code","e2489694":"code","4589645c":"code","54a9d336":"code","aef49691":"code","f797ee55":"code","b3051a3a":"code","36efa08a":"code","b7e8a1b7":"code","334e8d81":"code","4254fbbb":"code","8909070f":"code","b1e8217f":"code","7ddfc4a9":"code","906d89ec":"code","022498d7":"code","a9128854":"code","d3dbda20":"code","5d734c67":"code","e36b1f70":"code","87aabe67":"code","6b1b8fc2":"code","7ee00107":"code","fec14b96":"code","9f426678":"code","98152871":"code","be4f7e28":"code","3249842e":"code","aa42d409":"code","9d36e2dd":"code","d58559a9":"markdown","7123be31":"markdown","0de494ba":"markdown","08736a41":"markdown","46706fe5":"markdown","e42c6fdf":"markdown","6f851b60":"markdown","c82889b3":"markdown","312d0484":"markdown","688ab42a":"markdown","565ee83e":"markdown","1034d54f":"markdown","85302059":"markdown","b8e184cc":"markdown","8250ee89":"markdown","2731c845":"markdown","6f6ce876":"markdown","44517c64":"markdown","3fb6bc26":"markdown","2bc6eb08":"markdown","61baac8d":"markdown","7fc4d087":"markdown","3dc3f406":"markdown","ce2a74d7":"markdown"},"source":{"90c14e37":"import numpy as np\nimport pandas as pd\nimport sys\nimport re\nimport json\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\n\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom collections import defaultdict\n\nfrom scipy.stats import pearsonr\n\npd.set_option('display.max_rows', 50) \npd.set_option('display.max_columns', 50)","67fc835a":"VERSION    = 4\nDIR_TRAIN  = '..\/input\/200629-autoru\/' \nDIR_TEST   = '..\/input\/sf-dst-car-price\/'\nVAL_SIZE   = 0.3   # 33%\nN_FOLDS    = 5\n\n# CATBOOST\nITERATIONS = 2000\nLR         = 0.1\n\n# RANDOM_SEED\nRANDOM_SEED = 42","d37d9d77":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0447\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0438\u043d\u043e\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435\ndef feature_info(_column, _bins = 0, _normalize=True, _values=False, _threshold=10):\n    \n    if(_bins==0):\n        _bins = len(_column.value_counts(dropna=True, normalize=_normalize))\n            \n    print(f\"\u0422\u0438\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: {_column.dtype}\\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430:\")\n    \n    \n    if _column.dtype != 'object':\n        _column.hist(bins = _bins, align='left')\n        display(_column.describe())\n        if _values == True:\n            display(pd.DataFrame(_column.value_counts(dropna=False, normalize=_normalize).round(3)))\n       # plt.plot(_column,pupils['score'])\n    \n    else:\n        display(pd.DataFrame(_column.value_counts(dropna=False, normalize=_normalize).round(3)))\n    \n    print(f\"\u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 c \u0443\u0447\u0451\u0442\u043e\u043c NaN: {len(_column.value_counts(dropna=False, normalize=_normalize))}\\n\\\n              \\t  \u0431\u0435\u0437 \u0443\u0447\u0451\u0442\u0430 NaN: {len(_column.value_counts(dropna=True, normalize=_normalize))} \\n\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432: {_column.isnull().sum()}\")\n    print(f\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0431\u043e\u043b\u0435\u0435 {_threshold} \u0440\u0430\u0437:\"#\u0427\u0438\u0441\u043b\u043e 10 \u0432\u0437\u044f\u0442\u043e \u0434\u043b\u044f \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0430, \u043c\u043e\u0436\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0435\n      , (_column.value_counts()>_threshold).sum())","f21d1e91":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true))\n\ndef print_regression_metrics(y_true, y_pred):\n    mse = mean_squared_error(y_true, y_pred)\n    rmse = np.sqrt(mse)\n    r2 = r2_score(y_true, y_pred)\n    mae = mean_absolute_error(y_true, y_pred)\n    mape = mean_absolute_percentage_error(y_true, y_pred)\n    print(f'RMSE = {rmse:.2f}, MAE = {mae:.2f}, R-sq = {r2:.2f}, MAPE = {mape:.2f} ')","6cd0d253":"train = pd.read_csv(DIR_TRAIN+'train.csv', sep=';', encoding ='utf-8')\ntrain.head(5)","3d34023c":"train.info()","df79885a":"test = pd.read_csv(DIR_TEST+'test.csv', sep=',', encoding ='utf-8')\ntest.head(5)","59977643":"test.info()","798ac5cc":"# \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043a\u0430\u043a \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ntest.rename(columns={'mileage': 'kmAge', '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f': 'comlpectation', '\u041f\u0440\u0438\u0432\u043e\u0434':'drive', \n                     '\u0420\u0443\u043b\u044c':'whilleType', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435': 'condition', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b':'#owners',\n                    '\u041f\u0422\u0421':'pts', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f':'castoms', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435':'inUse'}, inplace=True)","bdf470c1":"# \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u043a \u0442\u0438\u043f\u0443 int\ntest.modelDate = test.modelDate.astype(int)\ntest.productionDate = test.productionDate.astype(int)\ntest.kmAge = test.kmAge.astype(int)\n","e085f5f0":"# \u041f\u0440\u0438\u0437\u043d\u0430\u043a vehicleConfiguration \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0442.\u043a. \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0438\u0437 \u043d\u0435\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\ntest.drop(['vehicleConfiguration'], axis=1, inplace=True)\n\n# \u041f\u0440\u0438\u0437\u043d\u0430\u043a description \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ntest.drop(['description'], axis=1, inplace=True)\n\n# \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c\n#test.drop(['id'],axis=1,inplace = True)","b6ef7a24":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 bodyType\nfeature_info(test.bodyType)\ntest.bodyType = test.bodyType.apply(lambda x: re.sub(\"\\d \u0434\u0432\\.\", \"\", x))","0406e916":"feature_info(test.name)","f4f43703":"bmw = train[train.brand=='BMW']","38f778f8":"#bmw = pd.read_csv(\"d:\\\\skillfactory\\\\Real Data Science\\\\4.Auto_pickup\\\\BMW_char.csv\", sep=';', encoding='utf-8')\nBMW = bmw.groupby(['modelDate', 'name']).count().reset_index(level=1)['name']\n\n\ndef process_test_name(row):\n    name_parts = row['name'].split(sep=' ')\n    if row['modelDate'] in BMW.keys():\n        if type(BMW[row['modelDate']]) is str:\n           models = [BMW[row['modelDate']]]\n        else:\n           models = BMW[row['modelDate']].values\n\n        for model in models:\n            if name_parts[1] == 'xDrive':\n                if (name_parts[0] in model) and (name_parts[1] in model):\n                    return model\n            else:\n                 if name_parts[0] in model:\n                     return model\n\n        else:\n            models = bmw['name'].unique()\n            for model in models:\n                if name_parts[1] == 'xDrive':\n                    if (name_parts[0] in model) and (name_parts[1] in model):\n                        return model\n                else:\n                    if name_parts[0] in model:\n                        return model\n\n    return row['name']\n\n\ntest['name'] = test.apply(process_test_name, axis =1)","1f290ef0":"feature_info(test.engineDisplacement)\ntest.engineDisplacement = test.engineDisplacement.apply(lambda x: \"1.6 LTR\" if x=='undefined LTR' else x)\ntest.engineDisplacement = test.engineDisplacement.apply(lambda x: (re.sub(\" LTR\", \"\", x))).astype(float)","04f132f0":"feature_info(test.enginePower)\ntest.enginePower = test.enginePower.apply(lambda x: (re.sub(\" N12\", \"\", x))).astype(int)","2eccd811":"most_valueble_options = ['led_lights','tyres_contol', 'elecrtic_back', 'electic_rear_seats', 'bottom_start', 'window_airbag',\n               'no_key', 'electrick_mirror', 'anti_crash', 'hsa', 'rain_control', 'leather', 'warm_wheel', 'light_control',\n               'premium_audio', 'line_control', 'rear_sits_memory', 'start_stop', 'leather_wheel', 'wheel_controls',\n                'navigation'] # \u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n\ndef fill_components_item(value):\n    if item in value:\n        return 1\n    else:\n        return 0\n    \ndef proc_test_complectation(x):\n    if  pd.isnull(x):\n        return []\n\n    x = x.replace(\"['\", '')\n    x = x.replace(\"']\", '')\n    x = x.replace('\u0421\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0440\u044b', 'led_lights')\n    x = x.replace('\u0414\u0430\u0442\u0447\u0438\u043a \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0448\u0438\u043d\u0430\u0445', 'tyres_contol')\n    x = x.replace('\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u0440\u0438\u0432\u043e\u0434 \u043a\u0440\u044b\u0448\u043a\u0438 \u0431\u0430\u0433\u0430\u0436\u043d\u0438\u043a\u0430', 'elecrtic_back')\n    x = x.replace('\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0445 \u0441\u0438\u0434\u0435\u043d\u0438\u0439', 'electic_rear_seats')\n    x = x.replace('\u0417\u0430\u043f\u0443\u0441\u043a \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0441 \u043a\u043d\u043e\u043f\u043a\u0438', 'bottom_start')\n    x = x.replace('\u041f\u043e\u0434\u0443\u0448\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u043e\u043a\u043e\u043d\u043d\u044b\u0435(\u0448\u0442\u043e\u0440\u043a\u0438)', 'window_airbag')\n    x = x.replace('\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0431\u0435\u0437 \u043a\u043b\u044e\u0447\u0430', 'no_key')\n    x = x.replace('\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0435 \u0437\u0435\u0440\u043a\u0430\u043b', 'electrick_mirror')\n    x = x.replace('\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u044f', 'anti_crash')\n    x = x.replace('\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0432 \u0433\u043e\u0440\u0443 (HSA)', 'hsa')\n    x = x.replace('\u0414\u0430\u0442\u0447\u0438\u043a \u0434\u043e\u0436\u0434\u044f', 'rain_control')\n    x = x.replace('\u041a\u043e\u0436\u0430 (\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u0441\u0430\u043b\u043e\u043d\u0430)', 'leather')\n    x = x.replace('\u041e\u0431\u043e\u0433\u0440\u0435\u0432 \u0440\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u043b\u0435\u0441\u0430', 'warm_wheel')\n    x = x.replace('\u0414\u0430\u0442\u0447\u0438\u043a \u0441\u0432\u0435\u0442\u0430', 'light_control')\n    x = x.replace('\u041f\u0440\u0435\u043c\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0430\u0443\u0434\u0438\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0430', 'premium_audio')\n    x = x.replace('\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0437\u0430 \u043f\u043e\u043b\u043e\u0441\u043e\u0439 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f', 'line_control')\n    x = x.replace('\u041f\u0430\u043c\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0445 \u0441\u0438\u0434\u0435\u043d\u0438\u0439', 'rear_sits_memory')\n    x = x.replace('\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u00ab\u0441\u0442\u0430\u0440\u0442 - \u0441\u0442\u043e\u043f\u00bb', 'start_stop')\n    x = x.replace('\u041e\u0442\u0434\u0435\u043b\u043a\u0430 \u043a\u043e\u0436\u0435\u0439 \u0440\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u043b\u0435\u0441\u0430', 'leather_wheel')\n    x = x.replace('\u041c\u0443\u043b\u044c\u0442\u0438\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0443\u043b\u0435\u0432\u043e\u0435 \u043a\u043e\u043b\u0435\u0441\u043e', 'leather_wheel')\n    x = x.replace('\u041f\u043e\u0434\u0440\u0443\u043b\u0435\u0432\u044b\u0435 \u043b\u0435\u043f\u0435\u0441\u0442\u043a\u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447', 'leather_wheel')\n    x = x.replace('\u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430', 'navigation')\n\n    values = json.loads(x)\n    result = []\n    for item in values:\n        if 'values' in item.keys():\n            result.extend(item['values'])\n    return result","340e4ae0":"test['comlpectation'] = test['comlpectation'].apply(proc_test_complectation)\ntest['num_options'] = test['comlpectation'].apply(lambda x: len(x))","ffd6d1d6":"complectation_items = defaultdict(int)\nfor value in test['comlpectation']:\n    for item in value:\n         complectation_items[item] += 1\n\nfor item in most_valueble_options:\n    test[item] = test['comlpectation'].apply(fill_components_item)\n\ntest.drop(['comlpectation'], axis=1, inplace = True)","fa053a7c":"test['#owners'] = test['#owners'].apply(lambda x: (re.sub(\"\\D\", \"\", x))).astype(int)","7862ecc0":"feature_info(test.inUse)","24e7d117":"test.inUse.fillna('0',inplace=True)\ndef reshape_years(inuse):\n    word = inuse.split(sep=' ')\n    years = 0\n    months = 0\n\n    if len(word) >= 2:\n        for i in range(0, len(word)):\n            if word[i].isdigit() and word[i + 1][:3] == '\u043c\u0435\u0441':\n                months = int(word[i])\n            elif word[i].isdigit() and (word[i + 1][:3] == '\u043b\u0435\u0442' or word[i + 1][:3] == '\u0433\u043e\u0434'):\n                years = int(word[i])\n    return (years * 12 + months)   \n    \ntest['inUse']=test.inUse.apply(reshape_years)","f0e1ae61":"def fill_tax(x):\n    if x in bmw.name.values:\n        tax = bmw[bmw.name == x].tax.mean()\n    else:\n        tax = bmw.tax.mean()\n\n    return tax\n\ntest['tax'] = test.name.apply(fill_tax)","6597bbcc":"test['total_tax'] = test.inUse*test['tax']\/12\ntest['km_per_month'] = test['kmAge']\/((2020 - test['productionDate'])*12+1)","8a6b9ab5":"test.head(5)","392882e3":"test.head(5)","86f97fdb":"train_features = train.columns.values.tolist()\ntest_features = test.columns.values.tolist()\nfor feature in train_features:\n    if feature not in test_features:\n        print(feature)","41121a8e":"train.drop(['place', 'VIN', 'seller', 'exchange'], axis=1, inplace =True)","4dd9583f":"train.drop(['warm_wheel', 'elecrtic_back', 'navigation', 'wheel_controls', 'electic_rear_seats', 'led_lights',\n            'hsa', 'window_airbag'], axis=1, inplace=True)\ntest.drop(['warm_wheel', 'elecrtic_back', 'navigation', 'wheel_controls', 'electic_rear_seats', 'led_lights',\n            'hsa', 'window_airbag'], axis=1, inplace=True)","cdebd415":"# \u041a\u043e\u043f\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0441 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u043c\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\ntrain_num = train.copy(deep=True)\ntest_num = test.copy(deep=True)","12be01d7":"#name\nencoder = LabelEncoder()\n\n# name_mean =train.groupby('name').price.mean()\n# mean_bmw = train[train.brand=='BMW'].price.mean()\n\n# mean_bmw\nnames =train.name.values.tolist() + test.name.values.tolist()\nencoder.fit(names)\ntrain_num.name = encoder.transform(train_num.name)\ntest_num.name = encoder.transform(test_num.name)\n","5f6404d2":"# train.name = train.name.apply(lambda x: name_mean.loc[x] if x in name_mean.index else mean_bmw)","5a9e9d12":"# test.name = test.name.apply(lambda x: name_mean.loc[x] if x in name_mean.index else mean_bmw)","b3e4fe5d":"# train_num.name = train_num.name.apply(lambda x: name_mean.loc[x] if x in name_mean.index else mean_bmw)","c34fd75c":"# test_num.name = test_num.name.apply(lambda x: name_mean.loc[x] if x in name_mean.index else mean_bmw)","01e917c7":"#brand\n# brand_mean =train.groupby('brand').price.mean()\n# train.brand = train.brand.apply(lambda x: brand_mean.loc[x])\n# test.brand = test.brand.apply(lambda x: brand_mean.loc[x])\n# train_num.brand = train_num.brand.apply(lambda x: brand_mean.loc[x])\n# test_num.brand = test_num.brand.apply(lambda x: brand_mean.loc[x])\ntrain.brand = train.brand.astype('category')\ntest.brand = test.brand.astype('category')\ntrain_num.brand = encoder.fit_transform(train_num.brand)\ntest_num.brand =encoder.transform(test_num.brand)","1be0cc6b":"test.head(5)","e843c336":"train_num","a08b5986":"# color\n\ntrain_num.color = encoder.fit_transform(train_num.color)\ntest_num.color = encoder.transform(test_num.color)","ac4309a5":"# bodyType\n\ntrain_num.bodyType = encoder.fit_transform(train_num.bodyType)\ntest_num.bodyType = encoder.transform(test_num.bodyType)","e2489694":"# fuelType\n\ntrain_num.fuelType = encoder.fit_transform(train_num.fuelType)\ntest_num.fuelType = encoder.transform(test_num.fuelType)","4589645c":"# vehicleTransmission\n\ntrain_num.vehicleTransmission = encoder.fit_transform(train_num.vehicleTransmission)\ntest_num.vehicleTransmission = encoder.transform(test_num.vehicleTransmission)","54a9d336":"# whilleType\n\ntrain_num.whilleType = encoder.fit_transform(train_num.whilleType)\ntest_num.whilleType = encoder.transform(test_num.whilleType)","aef49691":"# drive\n\ntrain_num.drive = encoder.fit_transform(train_num.drive)\ntest_num.drive = encoder.transform(test_num.drive)","f797ee55":"# condition\n\ntrain_num.condition = encoder.fit_transform(train_num.condition)\ntest_num.condition = encoder.transform(test_num.condition)","b3051a3a":"# castoms\n\ntrain_num.castoms = encoder.fit_transform(train_num.castoms)\ntest_num.castoms = encoder.transform(test_num.castoms)","36efa08a":"# pts\n\ntrain_num.pts = encoder.fit_transform(train_num.pts)\ntest_num.pts = encoder.transform(test_num.pts)","b7e8a1b7":"test = test.reindex(columns=train.drop(['price'], axis=1).columns)","334e8d81":"corr_matrix = train.corr()","4254fbbb":"corr_features = np.abs(corr_matrix[np.abs(corr_matrix.price)>0.00].price).sort_values(ascending=False)\nprint(\"\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\\n\",corr_features[1:])","8909070f":"for index in corr_matrix.index:\n    for column in corr_matrix.columns:\n        if corr_matrix[index][column]>0.7 and index!=column:\n            print (index, column, corr_matrix[index][column])","b1e8217f":"test","7ddfc4a9":"train_num.drop(['modelDate', 'engineDisplacement', 'inUse', 'electrick_mirror', 'anti_crash', 'start_stop', 'rain_control',\n                'leather', 'whilleType', 'pts', 'castoms', 'tyres_contol', 'bottom_start', 'light_control', 'no_key',\n                'premium_audio', 'leather_wheel'], axis=1, inplace=True)\ntest_num.drop(['modelDate', 'engineDisplacement', 'inUse', 'electrick_mirror', 'anti_crash', 'start_stop', 'rain_control',\n                'leather', 'whilleType', 'pts', 'castoms', 'tyres_contol', 'bottom_start', 'light_control', 'no_key',\n                'premium_audio', 'leather_wheel'], axis=1, inplace=True)\ntrain.drop(['modelDate', 'engineDisplacement', 'inUse', 'electrick_mirror', 'anti_crash', 'start_stop', 'rain_control',\n                'leather', 'whilleType', 'pts', 'castoms', 'tyres_contol', 'bottom_start', 'light_control', 'no_key',\n                'premium_audio', 'leather_wheel'], axis=1, inplace=True)\ntest.drop(['modelDate', 'engineDisplacement', 'inUse', 'electrick_mirror', 'anti_crash', 'start_stop', 'rain_control',\n                'leather', 'whilleType', 'pts', 'castoms', 'tyres_contol', 'bottom_start', 'light_control', 'no_key',\n                'premium_audio', 'leather_wheel'], axis=1, inplace=True)","906d89ec":"X = train.drop(['price'], axis=1)\nX_num = train_num.drop(['price'], axis=1)\ny = train.price\ny_num = train_num.price\nX_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=VAL_SIZE, random_state=RANDOM_SEED)\nX_num_train, X_num_test, y_num_train, y_num_test =  train_test_split(X_num, y_num, test_size=VAL_SIZE, random_state=RANDOM_SEED)","022498d7":"cat_features = [ 'brand','name', 'color', 'bodyType', 'fuelType', 'vehicleTransmission', 'drive',  \n                'condition']# 'whilleType', 'pts',, 'castoms'\nmodel = CatBoostRegressor(iterations = ITERATIONS, learning_rate = LR, random_seed = RANDOM_SEED,\n                          eval_metric='MAPE', custom_metric=['R2', 'MAE'])\nmodel.fit(X_train, y_train, cat_features = cat_features, eval_set=(X_test, y_test), verbose_eval = 100,\n          use_best_model = True, plot = True)","a9128854":"feat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(30).plot(kind='barh')","d3dbda20":"feat_importances.nlargest(30)","5d734c67":"y_pred = model.predict(test)","e36b1f70":"X_num_test","87aabe67":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor(n_estimators=10, random_state=RANDOM_SEED) #max_depth = 15, min_samples_leaf = 1, min_samples_split = 5, n_estimators = 100, verbose = 100)\nforest.fit(X_num_train, y_num_train)\ny_pred = forest.predict(X_num_test)\nprint_regression_metrics(y_num_test, y_pred)","6b1b8fc2":"y_pred_for = forest.predict(test_num.drop(['id'], axis=1))","7ee00107":"feat_importances = pd.Series(forest.feature_importances_, index=X.columns)\nfeat_importances.nlargest(30).plot(kind='barh')","fec14b96":"from sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import ExtraTreeRegressor\n\nmodel_bet = BaggingRegressor(ExtraTreeRegressor(random_state=RANDOM_SEED))\nmodel_bet.fit(X_num_train, y_num_train)","9f426678":"y_pred = model_bet.predict(X_num_test)\nprint_regression_metrics(y_num_test, y_pred)","98152871":"y_pred_bag = model_bet.predict(test_num.drop(['id'], axis=1))","be4f7e28":"from sklearn.base import clone\n\ndef compute_meta_feature(clf, X_train, X_test, y_train, cv):\n\n    X_meta_train = np.zeros_like(y_train, dtype = np.float32)\n    X_meta_test = np.zeros(len(X_test), dtype=np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):\n        X_fold_train, X_fold_predict = X_train.iloc[train_fold_index], X_train.iloc[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        folded_clf = clone(clf)\n        \n        if type(clf).__name__ == 'CatBoostRegressor':\n            folded_clf.fit(X_fold_train, y_fold_train, cat_features=cat_features_ids, verbose_eval = 100)\n        else:\n            folded_clf.fit(X_fold_train, y_fold_train)\n            \n        X_meta_train[predict_fold_index] = folded_clf.predict(X_fold_predict)\n        print_regression_metrics(X_meta_train[predict_fold_index], y_train.iloc[predict_fold_index])\n        X_meta_test += folded_clf.predict(X_test)\n    X_meta_test = X_meta_test \/ cv.n_splits\n\n    return X_meta_train, X_meta_test\n\n\n\ndef generate_meta_features(classifiers, X_train, X_test, y_train, cv):\n    features = [\n        compute_meta_feature(clf, X_train, X_test, y_train, cv)\n        for clf in tqdm(classifiers)\n    ]\n\n    stacked_features_train = np.stack([\n        features_train for features_train, features_test in features\n        ],axis=-1)\n\n    stacked_features_test = np.stack([\n        features_test for features_train, features_test in features\n        ],axis=-1)\n\n    return stacked_features_train, stacked_features_test\n","3249842e":"cv = KFold(n_splits=5, shuffle=True, random_state=42)\nmodel_rf = RandomForestRegressor(n_estimators=10, random_state=RANDOM_SEED)\nmodel_bet = BaggingRegressor(ExtraTreeRegressor(random_state=RANDOM_SEED))\nmodel_cb = CatBoostRegressor( \n                          #learning_rate = 0.1,\n                          random_seed = 42,\n                          eval_metric='MAPE')\nX_num_train.reset_index(drop=True,inplace = True)\ny_num_train.reset_index(drop=True, inplace = True)\nstacked_features_train, stacked_features_test = generate_meta_features([model_rf,model_bet], X_num_train, \n                                                                       test_num.drop(['id'], axis=1),\n                                                                       y_num_train, cv)\n\n\nfrom sklearn.linear_model import Ridge\nfinal_model = Ridge(alpha=20).fit(stacked_features_train, y_num_train)\ny_pred = np.round((final_model.predict(stacked_features_test)\/1000))*1000\n#print_regression_metrics(y_test, y_pred)","aa42d409":"y_pred_stck = np.round((final_model.predict(stacked_features_test)\/1000))*1000","9d36e2dd":"test['price'] =  y_pred_stck\ntest[['price']].to_csv(f'MBS1983_submission_stack_v{VERSION}_BMW.csv', index=True)","d58559a9":"### 1.2.6. #owners\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0432\u0438\u0434","7123be31":"# 3. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432\n## 3.1. CatBoost","0de494ba":"\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0431\u044b\u043b \u0432\u044b\u0434\u0435\u043b\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 20 \u043e\u043f\u0446\u0438\u0439, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u043e, \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0446\u0435\u043d\u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f (\u0441\u043c. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 25-45) \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0440\u044f\u0434 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: \n1. total_tax - \u043e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430\u043b\u043e\u0433\u0430, \u0443\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0430\u0432\u0442\u043e;\n2. km_per_month - \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0431\u0435\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f;\n3. num_options - \u043e\u0431\u0449\u0435\u0435\u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0446\u0438\u0439 \u0432 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f.\n\n\u041d\u043e\u0443\u0442\u0431\u0443\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 EDA \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d https:\/\/github.com\/MBS1983\/SkillFactory_RDS_Project_3_choose_auto\n","08736a41":"### 1.2.7. total_tax, km_per_month","46706fe5":"### 1.2.7. tax\n\u0414\u043e\u0430\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a **tax** - \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430\u043b\u043e\u0433\u0430. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","e42c6fdf":"### 1.2.7. inUse\n\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0445\u043e\u0437\u044f\u0438\u043d\u043e\u043c.","6f851b60":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445:","c82889b3":"### 1.2.3. engineDisplacement\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0442\u0438\u043f\u0443 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 undefined \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0451\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f 1.6.","312d0484":"**\u0412\u044b\u0432\u043e\u0434\u044b:** \n1. \u041f\u0440\u0438\u0437\u043d\u0430\u043a num_options \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0441 \u043e\u043f\u0446\u0438\u044f\u043c\u0438.\n2. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 modelDate \u0438 productionDate \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 modelDate \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c\n3. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 engineDisplacement \u0438 enginePower \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439\n4. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 enginePower \u0438 tax \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439","688ab42a":"\u0424\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043b\u0435\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043a \u043e\u043e\u0431\u0449\u0435\u043c\u0443 \u0432\u0438\u0434\u0443. ","565ee83e":"## 1.2. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","1034d54f":"### 1.2.4 enginePower\n\u0423\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 N12","85302059":"## 3.4. \u0421\u0442\u044d\u043a\u043a\u0438\u043d\u0433","b8e184cc":"# 2. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","8250ee89":"## 1.3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","2731c845":"## 3.3 BaggingRegressor ExtraTreeRegressor","6f6ce876":"\u041f\u0440\u0435\u0434\u0432\u0430\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","44517c64":"### 1.2.1. bodyType","3fb6bc26":"\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. \u0422.\u043a. \u0432\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u0442\u043e \u0432\u0441\u0435 \u043e\u043d\u0438 (\u043a\u0440\u043e\u043c\u0435 price \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430).\n","2bc6eb08":"## 3.2. \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441","61baac8d":"### 1.2.2. name\n\u0412 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043d\u0443\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a **name**. \u0424\u043e\u0440\u043c\u0430\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0441\u0435\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0439. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u0441\u044f \u043d\u0430 \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0437\u0430\u043c\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u043c \u0432\u0438\u0434\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439: \u043f\u043e \u0433\u043e\u0434\u0443 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0449\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0438\u043c\u044f \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f.","7fc4d087":"# 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n\n## 1.1. \u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u0441\u0430\u0439\u0442\u0430 auto.ru. \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0431\u044b\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 (\u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d: https:\/\/github.com\/MBS1983\/SkillFactory_RDS_Project_3_choose_auto\/). \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0431\u044b\u043b \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d, \u043e\u0447\u0438\u0449\u0435\u043d \u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.","3dc3f406":"### 1.2.5 complectation\n\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043f\u043e\u043b\u0435 \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0431\u043e\u0440 \u043e\u043f\u0438\u0446\u0438\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f 20 \u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0432\u043b\u044f\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f (\u0441\u043c. https:\/\/github.com\/MBS1983\/SkillFactory_RDS_Project_3_choose_auto).","ce2a74d7":"\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0440\u044f\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:"}}