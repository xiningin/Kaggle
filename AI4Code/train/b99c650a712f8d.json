{"cell_type":{"dd30f4cf":"code","db5d40a8":"code","3944b0fc":"code","d132a07d":"code","619bb448":"code","ac53c439":"code","3d6cbb94":"code","1fb460b9":"code","d239cbe8":"code","1fd35f7a":"code","f1a647d6":"code","627e6acf":"code","51ef48b5":"code","c610727d":"code","86dd6957":"code","a469f3b4":"code","3867a9e9":"code","e5ebef7a":"code","3a2f67de":"code","32919b63":"code","250838c8":"code","a4c57b0c":"code","8f230374":"code","7623e3d3":"code","b0196d7f":"code","1a84acb8":"code","380d1506":"code","f16a7c59":"code","2d8627c4":"code","369a319c":"code","a3ee3d6b":"code","d458254b":"code","649f92a8":"code","74aabe7d":"code","36405f33":"code","ce45b455":"markdown","2c0bdd31":"markdown","7aee65b4":"markdown","97cfb688":"markdown","fca8ebe9":"markdown","50a68e38":"markdown","890bad04":"markdown","b5aad7c6":"markdown","2d2d78ca":"markdown","7ccae775":"markdown","cee9ec0c":"markdown","673c3823":"markdown","c1484833":"markdown","193f53cc":"markdown","c8fdac9c":"markdown","57d6b46e":"markdown"},"source":{"dd30f4cf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import stats\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","db5d40a8":"play = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","3944b0fc":"playreview = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")","d132a07d":"play.head()","619bb448":"play.shape","ac53c439":"play.isnull().sum()","3d6cbb94":"play.Rating.value_counts()","1fb460b9":"sns.boxplot(play.Rating)","d239cbe8":"playreview.dropna(inplace=True)","1fd35f7a":"playreview.isnull().sum()","f1a647d6":"playreview['Translated_Review'] = playreview.Translated_Review.str.replace(\"[^a-zA-Z#]\", \" \")","627e6acf":"playreview.head()","51ef48b5":"playreview.head()","c610727d":"playreview['Translated_Review'] = playreview['Translated_Review'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))","86dd6957":"playreview.head()","a469f3b4":"playreview = playreview.reset_index().drop('index',axis=1)","3867a9e9":"tokens = playreview['Translated_Review'].apply(lambda x: x.split())\ntokens.head()","e5ebef7a":"wnl = WordNetLemmatizer()","3a2f67de":"tokens = tokens.apply(lambda x: [wnl.lemmatize(i) for i in x])","32919b63":"tokens","250838c8":"for i in range(len(tokens)):\n    tokens[i] = ' '.join(tokens[i])\n\nplayreview['Translated_Review'] = tokens","a4c57b0c":"playreview['Translated_Review'].apply(lambda x: '')","8f230374":"all_words = ' '.join([text for text in playreview['Translated_Review']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","7623e3d3":"positive_words = ' '.join([text for text in playreview['Translated_Review'][playreview['Sentiment']=='Positive']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(positive_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","b0196d7f":"negative_words = ' '.join([text for text in playreview['Translated_Review'][playreview['Sentiment']=='Negative']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(negative_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","1a84acb8":"playreview.Sentiment.value_counts()","380d1506":"sns.countplot(playreview.Sentiment)","f16a7c59":"from sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","2d8627c4":"x = playreview.Translated_Review\ny = playreview.Sentiment","369a319c":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,random_state=0,test_size=0.3)","a3ee3d6b":"# Logistic\nreview_lr = Pipeline([('tfidf', TfidfVectorizer()),\n                     ('review', LogisticRegression()),\n])\n\n# Na\u00efve Bayes:\nreview_nb = Pipeline([('tfidf', TfidfVectorizer()),\n                     ('review', MultinomialNB()),\n])\n\n# Linear SVC:\nreview_svc = Pipeline([('tfidf', TfidfVectorizer()),\n                     ('review', LinearSVC()),\n])","d458254b":"def model(obj,name):\n    ypred = obj.fit(xtrain,ytrain).predict(xtest)\n    return print(name,\"\\n\\n\",\n                \"Accuracy Score:- \",accuracy_score(ytest,ypred),\"\\n\\n Confusion Matrix:- \\n\",confusion_matrix(ytest,ypred),\n                \"\\n\\n Classification Report:- \\n\",classification_report(ytest,ypred))","649f92a8":"model(review_lr,\"Logistic Regression\")","74aabe7d":"model(review_nb,\"Naive Bayes\")","36405f33":"model(review_svc,\"Support Vector Classifier\")","ce45b455":"## Applying 3 classifiaction Models and comparing their Accuracy Scores.","2c0bdd31":"## Lemmatization","7aee65b4":"## Checking the null values in both the datasets and treating them. ","97cfb688":"## Stiching the tokens back together.","fca8ebe9":"## Data Preprocessing","50a68e38":"## Conclusion:- So Support Vector Classification is giving us the best results. ","890bad04":"## Tokenization","b5aad7c6":"## Importing the Libraries","2d2d78ca":"## WordCloud of Positive Reviews","7ccae775":"## Removing Short Words","cee9ec0c":"## WordCloud of All Reviews","673c3823":"## WordCloud of Negative Reviews","c1484833":"## Removing Punctuations, Numbers, and Special Characters","193f53cc":"## Loading The Datasets","c8fdac9c":"## Checking the distribution of Sentiments.","57d6b46e":"## Converting labels into numbers."}}