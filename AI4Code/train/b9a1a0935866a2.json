{"cell_type":{"b2bfe9cf":"code","3b48f583":"code","89dd69d9":"code","94f707b4":"code","b129d688":"code","532ca799":"code","44e2b35b":"code","30cd63c8":"code","9608df5b":"code","bb6c3c15":"code","caa86978":"code","8766aa59":"code","9ce788c1":"code","135356fd":"code","248e77db":"code","915881f3":"code","cd108393":"code","a729f1f3":"code","a23c25a4":"code","a5d0d196":"markdown","4a8b40ec":"markdown","5d4c5028":"markdown","586c6624":"markdown","4deabe77":"markdown","90ec8176":"markdown"},"source":{"b2bfe9cf":"import fastai\nfrom fastai.vision import *\nfastai.__version__","3b48f583":"path = Path('..\/input\/imet-2019-fgvc6\/') # iMet data path","89dd69d9":"# Making pretrained weights work without needing to find the default filename\nfrom torch.utils import model_zoo\nPath('models').mkdir(exist_ok=True)\n!cp '..\/input\/densenet201\/densenet201.pth' 'models\/'\ndef load_url(*args, **kwargs):\n    model_dir = Path('models')\n    filename  = 'densenet201.pth'\n    if not (model_dir\/filename).is_file(): raise FileNotFoundError\n    return torch.load(model_dir\/filename)\nmodel_zoo.load_url = load_url","94f707b4":"# Load train dataframe\ntrain_df = pd.read_csv(path\/'train.csv')\ntrain_df.head()","b129d688":"# Load labels dataframe\nlabels_df = pd.read_csv(path\/'labels.csv')\nlabels_df.head()","532ca799":"# Load sample submission\ntest_df = pd.read_csv(path\/'sample_submission.csv')\ntest_df.head()","44e2b35b":"train, test = [ImageList.from_df(df, path=path, cols='id', folder=folder, suffix='.png') \n               for df, folder in zip([train_df, test_df], ['train', 'test'])]\ndata = (train.split_by_rand_pct(0.2, seed=42)\n        .label_from_df(cols='attribute_ids', label_delim=' ')\n        .add_test(test)\n        .transform(get_transforms(), size=128)\n        .databunch(path=Path('.'), bs=64).normalize())","30cd63c8":"data.show_batch()","9608df5b":"# Source: https:\/\/www.kaggle.com\/c\/human-protein-atlas-image-classification\/discussion\/78109\nclass FocalLoss(nn.Module):\n    def __init__(self, gamma=2):\n        super().__init__()\n        self.gamma = gamma\n\n    def forward(self, logit, target):\n        target = target.float()\n        max_val = (-logit).clamp(min=0)\n        loss = logit - logit * target + max_val + \\\n               ((-max_val).exp() + (-logit - max_val).exp()).log()\n\n        invprobs = F.logsigmoid(-logit * (target * 2.0 - 1.0))\n        loss = (invprobs * self.gamma).exp() * loss\n        if len(loss.size())==2:\n            loss = loss.sum(dim=1)\n        return loss.mean()","bb6c3c15":"learn = cnn_learner(data, base_arch=models.densenet201, loss_func=FocalLoss(), metrics=fbeta)","caa86978":"# Find a good learning rate\nlearn.lr_find()\nlearn.recorder.plot()","8766aa59":"lr = 3e-2\nlearn.fit_one_cycle(3, slice(lr))","9ce788c1":"learn.unfreeze()","135356fd":"learn.lr_find()\nlearn.recorder.plot()","248e77db":"lr = 1e-3\nlearn.fit_one_cycle(21, slice(lr\/10, lr))","915881f3":"def find_best_fixed_threshold(preds, targs, do_plot=True):\n    score = []\n    thrs = np.arange(0, 0.5, 0.01)\n    for thr in progress_bar(thrs):\n        score.append(fbeta(valid_preds[0],valid_preds[1], thresh=thr))\n    score = np.array(score)\n    pm = score.argmax()\n    best_thr, best_score = thrs[pm], score[pm].item()\n    print(f'thr={best_thr:.3f}', f'F2={best_score:.3f}')\n    if do_plot:\n        plt.plot(thrs, score)\n        plt.vlines(x=best_thr, ymin=score.min(), ymax=score.max())\n        plt.text(best_thr+0.03, best_score-0.01, f'$F_{2}=${best_score:.3f}', fontsize=14);\n        plt.show()\n    return best_thr\n\ni2c = np.array([[i, c] for c, i in learn.data.train_ds.y.c2i.items()]).astype(int) # indices to class number correspondence\n\ndef join_preds(preds, thr):\n    return [' '.join(i2c[np.where(t==1)[0],1].astype(str)) for t in (preds[0].sigmoid()>thr).long()]","cd108393":"# Validation predictions\nvalid_preds = learn.get_preds(DatasetType.Valid)\nbest_thr = find_best_fixed_threshold(*valid_preds)","a729f1f3":"# Test predictions\ntest_preds = learn.get_preds(DatasetType.Test)\ntest_df.attribute_ids = join_preds(test_preds, best_thr)\ntest_df.head()","a23c25a4":"test_df.to_csv('submission.csv', index=False)","a5d0d196":"# Create learner with densenet121 and FocalLoss\nFor problems with high class imbalance Focal Loss is usually a better choice than the usual Cross Entropy Loss.","4a8b40ec":"# Train the model","5d4c5028":"# Create data object using datablock API","586c6624":"# Initial setup","4deabe77":"# iMet Collection 2019 - FGVC6\n**Simple baseline for iMet Collection 2019 competition using fastai v1**\n* Model: densenet201\n* Loss: Focal loss\n* Metric: $F_{2}$ score\n\n**What to try next?**\n* Different models\n* Optimize hyperparameter choice\n* Few-shot learning to improve score on classes with very few samples","90ec8176":"# Get predictions"}}