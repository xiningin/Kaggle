{"cell_type":{"dee6faa8":"code","7cc5f80b":"code","13c99cf9":"code","2da922d2":"code","e72b2092":"code","6818961c":"code","2f43aa9a":"code","f15219d8":"code","028d0b73":"code","a6529a9f":"code","400fde68":"code","629f0877":"code","6b9aaf48":"code","7b232880":"code","198269ac":"code","e9fa0bd1":"code","759d0f84":"code","07798213":"code","2ea54bd8":"code","10414faf":"code","35d0291f":"code","9b080ffd":"code","f871009f":"code","5d6c823f":"code","fcf929fc":"code","bc229531":"code","ea09ba56":"code","662726f3":"code","cf90caf0":"code","1f65739b":"code","f674b333":"code","daec121d":"code","59e20b73":"code","67887940":"code","f1e18d79":"code","1ff35354":"code","a6a4eeb5":"code","4e1bcdc9":"code","911c3a4f":"code","138be4f1":"code","da43493a":"code","78cc6168":"code","593fb4ca":"code","7d41e3ef":"code","2d64d661":"code","e3aba89e":"code","2b7d86cb":"code","33a586d0":"code","6a8187ac":"markdown","a2aeb36d":"markdown","a029230a":"markdown","012086ea":"markdown","efdcd5a3":"markdown","a772eeda":"markdown","d627eb9a":"markdown","31b98877":"markdown","64181a1c":"markdown","31d93760":"markdown","53c56203":"markdown","467172df":"markdown","54635855":"markdown","e699d904":"markdown","ea3f056d":"markdown","09f39a35":"markdown","5621a780":"markdown","52a0f733":"markdown","8c953799":"markdown","955503e5":"markdown","c3cb3403":"markdown","ca7f3104":"markdown","688c32d6":"markdown","45fe5641":"markdown","15506d3b":"markdown","4568ac7c":"markdown","e65c9fa7":"markdown","9ea1872d":"markdown","3bcef5fd":"markdown","cc4623cf":"markdown","838aa006":"markdown","4c1ab9dd":"markdown","9f986547":"markdown","f9d686ed":"markdown"},"source":{"dee6faa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Visualization\nimport matplotlib.pyplot\nimport seaborn as sns\n# Too see full dataframe...\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', None)\n\nimport json # library to handle JSON files\n\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n\nimport requests # library to handle requests\n\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\n# import k-means from clustering stage\nfrom sklearn.cluster import KMeans\n\nimport folium # map rendering library\n\nprint('Libraries imported.')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# First We have to locate the file path and changed accordingly\nimport os\nos.getcwd()\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7cc5f80b":"# Link To Extract\npath='https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_M'\n# Read File\ndf_wiki=pd.read_html(path)\n#Check the type\ntype(df_wiki)\n# Call the position where the table is stored\nneighborhood=df_wiki[0]\n# Rename the Columns\nneighborhood.rename(columns={0:'Postcode', 1: 'Borough', 2: 'Neighborhood'}, inplace=True)\n# Eliminate the first row\nneighborhood=neighborhood.drop([0])\n# Eliminate \"Not assigned\", categorical values from \"Borough\" Column\nneighborhood=neighborhood[neighborhood.Borough !='Not assigned']\n# Making DataFrame\nneighborhood=pd.DataFrame(neighborhood)\n# Merging rows with same Postcode\nneighborhood.set_index(['Postcode','Borough'],inplace=True)\nmerge_result = neighborhood.groupby(level=['Postcode','Borough'], sort=False).agg( ','.join)\n# Setting the index\nserial_wise=merge_result.reset_index()\n# Assign the 'Borough' column value to 'Neighborhood' where 'Not assigned' occurs\nserial_wise.loc[4, 'Neighborhood']='Queen\\'s Park'\n# Saving the file for future use!\nserial_wise.to_excel('wikipedia_table.xls')\n# Showing the Data Frame\ndf=pd.DataFrame(serial_wise)\ndf.head()","13c99cf9":"# Geographical Coordinates\ndf1=pd.read_csv(\"..\/input\/geospatial-coordinates-toronto\/Geospatial_Coordinates.csv\")\n# Change the Postal Code to Postcode\ndf1.rename(columns={'Postal Code':'Postcode'},inplace=True)\n#Cancatenation\nframes=[df,df1]\nframes=pd.concat(frames, axis=1, sort=False)\n# Merging the two columns on 'Postcode'\nmerge_columns=pd.merge(df, df1, left_on='Postcode', right_on='Postcode')\n# Save the Data Frame\nmerge_columns.to_csv('neigbors_geographical.csv')\nmerge_columns.head()\n","2da922d2":"# Sorting\n# set index for only Downtown Toronto\ndowntown_toronto_data = merge_columns[merge_columns['Borough'] == 'Downtown Toronto'].reset_index(drop=True)\n# eliminate 'Postcode' column\ndowntown_toronto_data=downtown_toronto_data.drop(['Postcode'], axis=1)\ndowntown_toronto_data.head()","e72b2092":"neighborhoods=pd.read_csv(\"..\/input\/neighborhoods-ny\/neighborhoods_NY.csv\", index_col=0)\n# And make sure that the dataset has all 5 boroughs and 306 neighborhoods.\nprint('The dataframe has {} boroughs and {} neighborhoods.'.format(\n        len(neighborhoods['Borough'].unique()),\n        neighborhoods.shape[0]\n    )\n)\n\nneighborhoods.head()","6818961c":"# Creating new Dataframe manhattan_data\nmanhattan_data = neighborhoods[neighborhoods['Borough'] == 'Manhattan'].reset_index(drop=True)\nmanhattan_data.head()","2f43aa9a":"# Define Foursquare Credentials and Version\nCLIENT_ID = 'HRMBKZUASN1NWO005IQK4TGG15UVEY5GCLJCYXHXW0VDP00K' # your Foursquare ID\nCLIENT_SECRET = 'JSXFO23NR2OMICQSZRFQYDAZG1GMNRALXXACAFVNF5CGAM4C' # your Foursquare Secret\nVERSION = '20180604'\nlimit = 20\nprint('Your credentails:')\nprint('CLIENT_ID:'+ CLIENT_ID)\nprint('CLIENT_SECRET:'+ CLIENT_SECRET)","f15219d8":"# get the geographical coordinates of Downtown Toronto\naddress = 'Downtown Toronto, ON, Canada'\n\ngeolocator = Nominatim()\nlocation = geolocator.geocode(address)\nlatitude_downtown_toronto = location.latitude\nlongitude_downtown_toronto = location.longitude\nprint(\"Downtown Toronto\",\"latitude\",latitude_downtown_toronto, \"& \" \"longitude\" ,longitude_downtown_toronto)","028d0b73":"# Let's get the geographical coordinates of Manhattan.\naddress = 'Manhattan, NY'\n\ngeolocator = Nominatim()\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Manhattan are {}, {}.'.format(latitude, longitude))","a6529a9f":"# create map of Downtown Toronto using latitude and longitude values\nmap_downtown_toronto = folium.Map(location=[latitude_downtown_toronto,longitude_downtown_toronto], zoom_start=11)\n\n# add markers to map\nfor lat, lng, label in zip(downtown_toronto_data['Latitude'], downtown_toronto_data['Longitude'], downtown_toronto_data['Neighborhood']):\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_downtown_toronto)  \n    \nmap_downtown_toronto","400fde68":"from folium import plugins\n# create map of Downtown Toronto using latitude and longitude values\nmap_downtown_toronto = folium.Map(location=[latitude_downtown_toronto,longitude_downtown_toronto], zoom_start=11)\n# instantiate a mark cluster object for the incidents in the dataframe\nincidents = plugins.MarkerCluster().add_to(map_downtown_toronto)\n# add markers to map\nfor lat, lng, label in zip(downtown_toronto_data['Latitude'], downtown_toronto_data['Longitude'], downtown_toronto_data['Neighborhood']):\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(incidents)  \n    \nmap_downtown_toronto","629f0877":"# let's visualizat Manhattan the neighborhoods in it.\n# create map of Manhattan using latitude and longitude values\nmap_manhattan = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# add markers to map\nfor lat, lng, label in zip(manhattan_data['Latitude'], manhattan_data['Longitude'], manhattan_data['Neighborhood']):\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_manhattan)  \n    \nmap_manhattan","6b9aaf48":"# create map of Manhattan using latitude and longitude values\nmap_manhattan = folium.Map(location=[latitude, longitude], zoom_start=11)\n\ngrouping = plugins.MarkerCluster().add_to(map_manhattan)\n\n# add markers to map\nfor lat, lng, label in zip(manhattan_data['Latitude'], manhattan_data['Longitude'], manhattan_data['Neighborhood']):\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='blue',\n        fill=True,\n        fill_color='#3186cc',\n        fill_opacity=0.7,\n        parse_html=False).add_to(grouping)  \n    \nmap_manhattan","7b232880":"# Let's create a function to repeat the process to all the neighborhoods in Toronto\ndef getNearbyVenues(names, latitudes,longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names,latitudes,longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            limit)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Neighborhood Latitude', \n                  'Neighborhood Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)","198269ac":"# Write the code to run the above function on each neighborhood and create a new dataframe called toronto_venues.\ndowntown_toronto_venues = getNearbyVenues(names=downtown_toronto_data['Neighborhood'],\n                                   latitudes=downtown_toronto_data['Latitude'],\n                                   longitudes=downtown_toronto_data['Longitude'],\n                                  )","e9fa0bd1":"# Let's check the size of the resulting dataframe\nprint(downtown_toronto_venues.shape)\ndowntown_toronto_venues.head()","759d0f84":"# Let's check how many venues were returned for each neighborhood\ndowntown_toronto_venues.groupby('Neighborhood').count()","07798213":"# Let's find out how many unique categories can be curated from all the returned venues\nprint('There are {} uniques categories.'.format(len(downtown_toronto_venues['Venue Category'].unique())))","2ea54bd8":"# one hot encoding\ndowntown_toronto_onehot = pd.get_dummies(downtown_toronto_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\ndowntown_toronto_onehot['Neighborhood'] = downtown_toronto_venues['Neighborhood'] \n\n# move neighborhood column to the first column\nfixed_columns = [downtown_toronto_onehot.columns[-1]] + list(downtown_toronto_onehot.columns[:-1])\ndowntown_toronto_onehot = downtown_toronto_onehot[fixed_columns]\n\ndowntown_toronto_onehot.head()","10414faf":"# Next, let's group rows by neighborhood and by taking the mean of the frequency of occurrence of each category\ndowntown_toronto_grouped = downtown_toronto_onehot.groupby('Neighborhood').mean().reset_index()","35d0291f":"# Let's print each neighborhood along with the top 5 most common venues\nnum_top_venues = 5\n\nfor hood in downtown_toronto_grouped['Neighborhood']:\n    print(\"----\"+hood+\"----\")\n    temp = downtown_toronto_grouped[downtown_toronto_grouped['Neighborhood'] == hood].T.reset_index()\n    temp.columns = ['venue','freq']\n    temp = temp.iloc[1:]\n    temp['freq'] = temp['freq'].astype(float)\n    temp = temp.round({'freq': 2})\n    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n    print('\\n')","9b080ffd":"# Let's put that into a pandas dataframe\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","f871009f":"# Now let's create the new dataframe and display the top 10 venues for each neighborhood.\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = downtown_toronto_grouped['Neighborhood']\n\nfor ind in np.arange(downtown_toronto_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(downtown_toronto_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted","5d6c823f":"# set number of clusters\nkclusters = 5\n\ndowntown_toronto_grouped_clustering = downtown_toronto_grouped.drop('Neighborhood', 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(downtown_toronto_grouped_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] ","fcf929fc":"# Let's create a new dataframe that includes the cluster as well as the top 10 venues for each neighborhood.\ndowntown_toronto_merged = downtown_toronto_data\n\n# add clustering labels\ndowntown_toronto_merged['Cluster Labels'] = kmeans.labels_\n\n# merge toronto_grouped with toronto_data to add latitude\/longitude for each neighborhood\ndowntown_toronto_merged = downtown_toronto_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\ndowntown_toronto_merged.head() # check the last columns!","bc229531":"# create map\nmap_clusters = folium.Map(location=[latitude_downtown_toronto, longitude_downtown_toronto], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i+x+(i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(downtown_toronto_merged['Latitude'], downtown_toronto_merged['Longitude'], downtown_toronto_merged['Neighborhood'], downtown_toronto_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","ea09ba56":"downtown_toronto_merged.loc[downtown_toronto_merged['Cluster Labels'] == 0, downtown_toronto_merged.columns[[1] + list(range(5, downtown_toronto_merged.shape[1]))]]","662726f3":"downtown_toronto_merged.loc[downtown_toronto_merged['Cluster Labels'] == 1, downtown_toronto_merged.columns[[1] + list(range(5, downtown_toronto_merged.shape[1]))]]","cf90caf0":"downtown_toronto_merged.loc[downtown_toronto_merged['Cluster Labels'] == 2, downtown_toronto_merged.columns[[1] + list(range(5, downtown_toronto_merged.shape[1]))]]","1f65739b":"downtown_toronto_merged.loc[downtown_toronto_merged['Cluster Labels'] == 3, downtown_toronto_merged.columns[[1] + list(range(5, downtown_toronto_merged.shape[1]))]]","f674b333":"downtown_toronto_merged.loc[downtown_toronto_merged['Cluster Labels'] == 4, downtown_toronto_merged.columns[[1] + list(range(5, downtown_toronto_merged.shape[1]))]]","daec121d":"# Let's create a function to repeat the same process to all the neighborhoods in Manhattan\ndef getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            limit)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighborhood', \n                  'Neighborhood Latitude', \n                  'Neighborhood Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)","59e20b73":"# Now write the code to run the above function on each neighborhood and create a new dataframe called manhattan_venues\nmanhattan_venues = getNearbyVenues(names=manhattan_data['Neighborhood'],\n                                   latitudes=manhattan_data['Latitude'],\n                                   longitudes=manhattan_data['Longitude'],\n                                  )","67887940":"# Let's check how many venues were returned for each neighborhood\nmanhattan_venues.groupby('Neighborhood').count()","f1e18d79":"# Let's find out how many unique categories can be curated from all the returned venues\nprint('There are {} uniques categories.'.format(len(manhattan_venues['Venue Category'].unique())))","1ff35354":"# one hot encoding\nmanhattan_onehot = pd.get_dummies(manhattan_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\nmanhattan_onehot['Neighborhood'] = manhattan_venues['Neighborhood'] \n\n# move neighborhood column to the first column\nfixed_columns = [manhattan_onehot.columns[-1]] + list(manhattan_onehot.columns[:-1])\nmanhattan_onehot = manhattan_onehot[fixed_columns]\n\nmanhattan_onehot.head()","a6a4eeb5":"# Set Index\nmanhattan_grouped = manhattan_onehot.groupby('Neighborhood').mean().reset_index()","4e1bcdc9":"# Let's print each neighborhood along with the top 5 most common venues\nnum_top_venues = 5\n\nfor hood in manhattan_grouped['Neighborhood']:\n    print(\"----\"+hood+\"----\")\n    temp = manhattan_grouped[manhattan_grouped['Neighborhood'] == hood].T.reset_index()\n    temp.columns = ['venue','freq']\n    temp = temp.iloc[1:]\n    temp['freq'] = temp['freq'].astype(float)\n    temp = temp.round({'freq': 2})\n    print(temp.sort_values('freq', ascending=False).reset_index(drop=True).head(num_top_venues))\n    print('\\n')","911c3a4f":"# Let's put that into a pandas dataframe\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","138be4f1":"# Now let's create the new dataframe and display the top 10 venues for each neighborhood.\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = manhattan_grouped['Neighborhood']\n\nfor ind in np.arange(manhattan_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(manhattan_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted","da43493a":"# Run k-means to cluster the neighborhood into 5 clusters.\n# set number of clusters\nkclusters = 5\n\nmanhattan_grouped_clustering = manhattan_grouped.drop('Neighborhood', 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(manhattan_grouped_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_[0:10] ","78cc6168":"# Let's create a new dataframe that includes the cluster as well as the top 10 venues for each neighborhood\nmanhattan_merged = manhattan_data\n\n# add clustering labels\nmanhattan_merged['Cluster Labels'] = kmeans.labels_\n\n# merge toronto_grouped with toronto_data to add latitude\/longitude for each neighborhood\nmanhattan_merged = manhattan_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\nmanhattan_merged.head() # check the last columns!","593fb4ca":"# create map\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i+x+(i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(manhattan_merged['Latitude'], manhattan_merged['Longitude'], manhattan_merged['Neighborhood'], manhattan_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","7d41e3ef":"manhattan_merged.loc[manhattan_merged['Cluster Labels'] == 0, manhattan_merged.columns[[1] + list(range(5, manhattan_merged.shape[1]))]]","2d64d661":"manhattan_merged.loc[manhattan_merged['Cluster Labels'] == 1, manhattan_merged.columns[[1] + list(range(5, manhattan_merged.shape[1]))]]","e3aba89e":"manhattan_merged.loc[manhattan_merged['Cluster Labels'] == 2, manhattan_merged.columns[[1] + list(range(5, manhattan_merged.shape[1]))]]","2b7d86cb":"manhattan_merged.loc[manhattan_merged['Cluster Labels'] == 3, manhattan_merged.columns[[1] + list(range(5, manhattan_merged.shape[1]))]]","33a586d0":"manhattan_merged.loc[manhattan_merged['Cluster Labels'] == 4, manhattan_merged.columns[[1] + list(range(5, manhattan_merged.shape[1]))]]","6a8187ac":"# RESULTS\n\n### After clustering the data of the respective neighborhoods, both cities (Boroughs) have venues which can be explored and attract the Tourists. The neighborhoods are much similar in features like Theaters, opera houses, food places, clubs, museums, parks etc. As far as concern to dissimilarity, it differs in terms of some unique places like historical places and monuments.","a2aeb36d":"## EXAMINE CLUSTERS\n\n### Now, we can examine each cluster and determine the discriminating venue categories that distinguish each cluster. Based on the defining categories, we can then assign a name to each cluster.","a029230a":"## EXPLORATION\n\n### For Downtown Toronto case, we have extracted table of Toronto\u2019s Borough from Wikipedia page. Then we arrange the data according to our requirements. In the arrangement phase, which applied multiple steps including but not limited to, eliminating \u201cNot assigned\u201d values, combine neighborhoods which have same geographical coordinates at each borough and sorted against the concerned borough. For data verification and further exploration, we use Foursquare API to get the coordinates of Downtown Toronto and explore its neighborhoods. The neighborhoods are further characterized as venues and venue categories.\n\n### For Manhattan, we used a saved data file which is already explored through foursquare API in which we have extracted all the boroughs of New York and then sorted against the concerned borough. Then we explored the Manhattan neighborhoods as venues and venue categories","012086ea":"## Clustering Neighborhoods","efdcd5a3":"# VISUALIZATION \n\n### We visualize the data many times at different stages. In the beginning, we visualize the selected borough neighborhoods so that we can get an idea or confirmation regarding the coordinates of that Borough. The second time after clustered the neighborhoods, we visualize the clusters to name them. Assigning the names are very important because it can identify the areas or specific places in each cluster.\n\n## (Before Clustering)","a772eeda":"### Now we will move towards New York Boroughs. We select \"Manhattan\" as a Borough and anylze its neighborhoods later","d627eb9a":"# ANALYSIS\n\n### We analyze both boroughs neighborhoods through one hot encoding (giving \u20181\u2019 if a venue category is there, and \u20180\u2019 in case of venue category is not there). On the basis of one hot encoding, we calculate mean of the frequency of occurrence of each category and picked top ten venues on that basis for each neighborhood. It means the top venues are showing the foot traffic or the more visited places.","31b98877":"# PROBLEM & BACKGROUND\n\n### Toronto and New York are the famous places in the world. They are diverse in many ways. Both are multicultural as well as the financial hubs of their respective countries. We want to explore how much they are similar or dissimilar in aspects from a tourist point of view regarding food, accommodation, beautiful places, and many more.\n\n### Today Tourism is one of the pillars of the economy and the people most often visits those countries who are rich in heritage and developed enough from a foreign prospective, like friendly environment. Every city is unique in their own way and give something new. And now the information is so common regarding location of every place around the world on your fingertips which make it easier to explore. Therefore, tourists always eager to travel to different places on the basis of available information, and the comparison (the part of the information) between the two cities always assist to choose the specific places or according to their choice.","64181a1c":"## Cluster 2 (Gastropubs)","31d93760":"# DATA DESCRIPTION\n\n### For this problem, we will get the services of Foursquare API to explore the data of two cities, in terms of their neighborhoods. The data also include the information about the places around each neighborhood like restaurants, hotels, coffee shops, parks, theaters, art galleries, museums and many more. We selected one Borough from each city to analyze their neighborhoods. Manhattan from New York and Downtown Toronto from Toronto. We will use machine learning technique, \u201cClustering\u201d to segment the neighborhoods with similar objects on the basis of each neighborhood data. These objects will be given priority on the basis of foot traffic (activity) in their respective neighborhoods. This will help to locate the tourist\u2019s areas and hubs, and then we can judge the similarity or dissimilarity between two cities on that basis.","53c56203":"## Downtown Toronto","467172df":"## PREPROCESSING","54635855":"## Cluster 5 (Seafood, steakhouse, Hotel & Cafe)","e699d904":"## Examine Clusters\n\n### Now, we can examine each cluster and determine the discriminating venue categories that distinguish each cluster. Based on the defining categories, we can then assign a name to each cluster.### Now, we can examine each cluster and determine the discriminating venue categories that distinguish each cluster. Based on the defining categories, we can then assign a name to each cluster.","ea3f056d":"### Residential","09f39a35":"## Manhattan","5621a780":"## Exploring Neighborhoods in Downtown Toronto","52a0f733":"### Center Acivity","8c953799":"## METHODOLOGY\n### As we have selected two cities Borough to explore their neighborhoods. The data exploration, analysis and visualization for both boroughs are done in the same way but separately.","955503e5":"## Analyzing Each Neighborhood","c3cb3403":"## Cluster 3 (Cafes)","ca7f3104":"### Cultural & Going Out Places","688c32d6":"## Exploring Neighborhoods in Manhattan","45fe5641":"## Manhattan","15506d3b":"## CLUSTERING NEIGHBORHOODS\n\n### Now we applied Machine Learning Technique \u201cClustering\u201d to segment the neighborhoods in similar objects cluster. This will help to analyze from Tourist perspective and we can easily extract the Tourist places which are present on one of the clusters.","4568ac7c":"## Foursquare API ","e65c9fa7":"# Conclusion\n\n### The downtown Toronto and Manhattan neighborhoods have more like similar venues. As we know that every place is unique in its own way, so that\u2019s argument is present in both neighborhoods. The dissimilarity exists in terms of some different venues and facilities but not on a larger extent.","9ea1872d":"## Cluster 1 (Airport Lounge, Coffee Shop, Cafe, Restaurants & Grocery Store)","3bcef5fd":"### Tourist Areas & Hubs","cc4623cf":"### Commercial Places","838aa006":"## Manhattan","4c1ab9dd":"# Observations & Recommendations\n\n### When we compare the tourist places, we observe that the historical place is only situated in Downtown Toronto and the Monument or landmark venue is in Manhattan neighborhoods. Similarly, Airport facility, Harbor, Sculpture garden and Boat or ferry services are also available i****n Downtown Toronto while venues like Nightlife, Climbing gym and Museums are present in Manhattan.\n\n### As far as concern to recommendations, we recommend Downtown Toronto Neighborhoods will be considered first to visit. The tourists have an easily travelling access due to Airport facility, which not only saves time but also helps to save money. This saved money can be utilized to explore more, the attracting venues.","9f986547":"## Analyzing the Neighborhoods","f9d686ed":"## Cluster 4 (Coffee Shop, Cafe, Park & Japanese Restaurant)"}}