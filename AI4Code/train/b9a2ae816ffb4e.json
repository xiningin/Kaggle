{"cell_type":{"be2f77d9":"code","164fbb68":"code","98ecd09b":"code","77c578db":"code","f1e20f27":"code","4c928264":"code","66cf76b8":"code","16a35bfe":"markdown","4fe88075":"markdown"},"source":{"be2f77d9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom keras_preprocessing.image import ImageDataGenerator\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import RMSprop\n\nfrom PIL import Image\nimport requests\nfrom io import BytesIO","164fbb68":"SIZE = 150\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255\n    #,\n    #rotation_range=40,\n    # width_shift_range=0.2,\n    # height_shift_range=0.2,\n    # shear_range=0.2,\n    #zoom_range=0.2,\n    #horizontal_flip=True#,\n    # fill_mode='nearest'\n    )\n\ntrain_generator = train_datagen.flow_from_directory(\n        '\/kaggle\/input\/horses-or-humans-dataset\/horse-or-human\/train',\n        target_size=(SIZE, SIZE),\n        batch_size=128,\n        shuffle=True,\n        class_mode='categorical')\n\n\n##################################################################################\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalidation_generator = test_datagen.flow_from_directory(\n        '\/kaggle\/input\/horses-or-humans-dataset\/horse-or-human\/validation\/',\n        target_size=(SIZE, SIZE),\n        batch_size=64,\n        class_mode='categorical')","98ecd09b":"# modelo = keras.Sequential(\n#     [\n#         keras.Input(shape=(128, 128, 3)),\n#         layers.Flatten(),\n#         layers.BatchNormalization(),\n#         layers.Dense(512, activation=\"relu\", kernel_regularizer = keras.regularizers.l2(0.03)),\n#         layers.Dropout(0.5),\n#         layers.Dense(512, activation=\"relu\", kernel_regularizer = keras.regularizers.l2(0.03)),\n#         layers.Dropout(0.5),\n#         layers.BatchNormalization(),\n#         layers.Dense(1, activation=\"sigmoid\")\n#     ]\n# )\n\n\n\nmodelo = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image SIZExSIZE with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(SIZE, SIZE, 3)),\n    tf.keras.layers.SpatialDropout2D(0.5),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.SpatialDropout2D(0.5),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.SpatialDropout2D(0.5),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fourth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.SpatialDropout2D(0.5),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fifth convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.SpatialDropout2D(0.5),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    # Flatten the results to feed into a DNN\n    #tf.keras.layers.Flatten(),\n    # 512 neuron hidden layer\n    #tf.keras.layers.Dense(512, activation='relu'),\n    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')\n    #tf.keras.layers.Dense(1, activation='sigmoid')\n    \n    \n    tf.keras.layers.Flatten(),\n    #tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dense(512, activation=\"relu\", kernel_regularizer = keras.regularizers.l2(0.03)),\n    tf.keras.layers.Dropout(0.2),\n    #tf.keras.layers.Dense(256, activation=\"relu\"),\n    #tf.keras.layers.Dropout(0.2),\n    #tf.keras.layers.BatchNormalization(),\n    #tf.keras.layers.Dense(128, activation=\"relu\"),\n    #tf.keras.layers.Dropout(0.2),\n    #tf.keras.layers.BatchNormalization(),\n    #tf.keras.layers.Dense(64, activation=\"relu\"),\n    #tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.BatchNormalization(),\n   # tf.keras.layers.Dense(1, activation=\"sigmoid\")\n    tf.keras.layers.Dense(2, activation=\"softmax\")\n])\n\nmodelo.build((SIZE, SIZE))\nmodelo.summary()\n\noptimizer = keras.optimizers.Adam(learning_rate=0.001)\n\nmodelo.compile(loss = 'categorical_crossentropy', optimizer='adamax', metrics=['accuracy'])\n\n\n#modelo.compile(loss = 'binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n#modelo.compile(loss='sparse_categorical_crossentropy', optimizer='adamax', metrics=['accuracy'])\n\n# algoritmo de optimizacion lr = 0.001 \/ # se compila el modelo con Mean Square Error\n#optimizer = tf.keras.optimizers.RMSprop(0.001)\n#model.compile(loss='mse', optimizer=optimizer, metrics=['mae', 'mse'])\n\n\n\n#modelo.compile(loss='binary_crossentropy',optimizer=RMSprop(lr=0.001),metrics=['accuracy'])","77c578db":"# imprime el progreso (Keras Callback)\nearly_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\nclass PrintDot(keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs):\n        if epoch % 100 == 0: \n            print('')\n            print(\"Epoch\",epoch,'completed', end='')\n\nEPOCHS = 100\n\nhistory = modelo.fit(\n    train_generator,\n    steps_per_epoch = train_generator.samples\/\/train_generator.batch_size,\n    #steps_per_epoch = 20,\n    epochs = EPOCHS, \n    verbose = 1,\n    callbacks=[early_stop, PrintDot()],\n    #shuffle=True,\n    #batch_size=500,\n    validation_data=validation_generator,\n    #validation_steps=20\n    validation_steps=validation_generator.samples\/validation_generator.batch_size\n    )\n\n\n\n#history = model.fit(train_datagen.flow(x_train,y_train), \n#                    epochs=100,\n#                    verbose=1, \n#                    shuffle=True,\n#                    validation_data=validation_generator\n#                    validation_steps=validation_generator.samples\/validation_generator.batch_size)\n#                   )","f1e20f27":"def line_plot(series, legends, title, ylabel, xlabel):\n    for serie in series:\n        plt.plot(serie)\n    plt.title(title)\n    plt.ylabel(ylabel)\n    plt.xlabel(xlabel)\n    plt.legend(legends, loc='upper left')\n    #plt.ylim([0, 1.1])\n    plt.show()\n\n    \nline_plot(\n    [history.history['accuracy'], history.history['val_accuracy']],\n    ['train', 'test'],\n    'model accuracy',\n    'accuracy',\n    'epoch'\n)\n\nline_plot(\n    [history.history['loss'], history.history['val_loss']],\n    ['train', 'test'],\n    'model loss',\n    'loss',\n    'epoch'\n)","4c928264":"#score = model.evaluate_generator (generator_pruebas,verbose=0)\nscore = modelo.evaluate (validation_generator,verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","66cf76b8":"random_images = [\"https:\/\/th.bing.com\/th\/id\/OIP.dbNcopSuA_XOcOPLLsKKmAHaJ4?pid=Api&rs=1\",\n                 \"http:\/\/pm1.narvii.com\/6371\/ae93eccfb765519d2dc77cad4719c004973d857c_00.jpg\",\n                 \"https:\/\/thumbs.dreamstime.com\/z\/space-animal-starlight-horse-illustration-animals-cute-mystical-creatures-who-travel-sky-stars-everlasting-147251913.jpg\",\n                 \"https:\/\/s-media-cache-ak0.pinimg.com\/736x\/d5\/f3\/d1\/d5f3d1470b290bde1436c77933477e3d--horse-facts-debate-memes.jpg\",\n                 \"https:\/\/th.bing.com\/th\/id\/OIP.kDBAelShOgb7uaRicHmAGQHaEK?pid=Api&rs=1\",\n                 \"https:\/\/th.bing.com\/th\/id\/OIP.NhMGK_jAG_MxVZAVkRxqLgHaHj?pid=Api&rs=1\",\n                 \"https:\/\/th.bing.com\/th\/id\/OIP.IxKZm5sNIuK35f5If4luxwHaKe?pid=Api&rs=1\"\n                ]\n\nlabels = ['Horse','Human']\n\ndef predict(img):\n    y_pred = modelo.predict(np.array([img]))\n    y_class = y_pred.argmax(axis=-1)\n    #print (y_class, y_pred)\n    return labels[y_class[0]]\n\nIMAGE_SIZE = (SIZE, SIZE)\n\nfor url in random_images:\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img = img.resize(IMAGE_SIZE) \n    arr = np.array(img)\n    arr = arr\/255\n    plt.title(predict(arr))\n    plt.imshow(img)\n    plt.show()","16a35bfe":"# CNN \n# Cenfotec University Howework\n# Created by Esteban Corrales\n# https:\/\/www.linkedin.com\/in\/marvin-esteban-cm\/","4fe88075":"# Testing "}}