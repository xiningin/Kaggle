{"cell_type":{"c2ba3948":"code","d44d1d0b":"code","1a502e2e":"code","cf4d0af2":"code","482483f3":"code","f70edc55":"code","7a56a210":"code","c4dc2d12":"code","6d57be08":"code","d54c6dae":"code","015461a4":"code","2ae75592":"code","ecccb411":"code","cafc1612":"code","04383838":"code","e482d8d9":"code","645fba83":"markdown","9172e595":"markdown","f75e72c9":"markdown","8fe5c8f6":"markdown","a5458389":"markdown"},"source":{"c2ba3948":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os, fnmatch\ndef find(pattern, path):\n    \"\"\"Utility to find files wrt a regex search\"\"\"\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            if fnmatch.fnmatch(name, pattern):\n                result.append(os.path.join(root, name))\n    return result","d44d1d0b":"FIND_FOLDER=\"..\/input\/unet-lung-segmentation-dataset-siim-covid\/segmented_data\/segmented_data\"\npng_files=find('*.png', FIND_FOLDER)\nprint(len(png_files),\"Files Found.\")","1a502e2e":"import random\nnum_subset = 3\nrandom.seed(42) # 42 # 2021\nsubset_png_files =  random.choices(png_files, k=num_subset) # dcm_files[:3]\nsubset_png_files","cf4d0af2":"import matplotlib.pyplot as plt\nimport cv2","482483f3":"def masking_ratio(img):\n    Shape_X,Shape_Y = img.shape\n    zeros_img = np.sum(img == 0)\n    non_zeros_img = Shape_X * Shape_Y - zeros_img\n    return non_zeros_img\/(Shape_X * Shape_Y)","f70edc55":"fig, ax = plt.subplots(1, num_subset, figsize=(20, 12))\n\nfor i,path in enumerate(subset_png_files):\n    ax[i].imshow(cv2.imread(path,0), cmap=\"viridis\")\n    ax[i].axis('off')\n\nplt.show()","7a56a210":"fig, ax = plt.subplots(1, num_subset, figsize=(20, 12))\n\nfor i,path in enumerate(subset_png_files):\n    ax[i].imshow(cv2.imread(path,0), cmap=\"gray\")\n    ax[i].axis('off')\n\nplt.show()","c4dc2d12":"for i,path in enumerate(subset_png_files):\n    print(masking_ratio(cv2.imread(path,0)))","6d57be08":"import tqdm\nmasking_ratio_vals = np.zeros((len(png_files)))\nfor i,path in tqdm.tqdm(enumerate(png_files)):\n    masking_ratio_vals[i] = masking_ratio(cv2.imread(path,0))","d54c6dae":"plt.style.use('dark_background')","015461a4":"plt.figure(figsize=(20,12))\nplt.hist(masking_ratio_vals,bins=100)\nplt.xticks(np.arange(min(masking_ratio_vals), max(masking_ratio_vals)+1, 0.1))\nplt.show()","2ae75592":"THRESH_VALUE = 0.12","ecccb411":"num_samples=50\nsorted_masks_idx=masking_ratio_vals.argsort()\nbad_masks_idx=sorted_masks_idx[10:13]\ngood_masks_idx=sorted_masks_idx[7000:7003]","cafc1612":"fig, ax = plt.subplots(1, num_subset, figsize=(20, 12))\nc=0\n\n\nfor i in good_masks_idx:\n    ax[c].imshow(cv2.imread(png_files[i],0), cmap=\"gray\")\n    ax[c].axis('off')\n    print(\"Masking Ratio Values :\",masking_ratio_vals[i])\n    c+=1\n\nplt.show()","04383838":"fig, ax = plt.subplots(1, num_subset, figsize=(20, 12))\nc=0\n\n\nfor i in bad_masks_idx:\n    ax[c].imshow(cv2.imread(png_files[i],0), cmap=\"gray\")\n    ax[c].axis('off')\n    print(\"Masking Ratio Values :\",masking_ratio_vals[i])\n    c+=1\n\nplt.show()","e482d8d9":"df = pd.DataFrame.from_dict({'image_id': list(map(lambda x: os.path.basename(x), png_files)), \n                             'image_path': png_files, \n                             'masking_ratio': masking_ratio_vals, \n                             'is_well_segmented': masking_ratio_vals>THRESH_VALUE})\ndf.to_csv('segmented_metadata.csv', index=False)","645fba83":"### Properly Segmented Masks must have a High Masking Ratio","9172e595":"`Masking Ratio > 0.12` looks like a sensible choice","f75e72c9":"### Visualize Good Masks","8fe5c8f6":"### Visualize Bad Masks","a5458389":"### Hence it is definitely advisable to threshold using masking ratio!"}}