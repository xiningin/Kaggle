{"cell_type":{"c8c07f9b":"code","fe2f7cb8":"code","2d894368":"code","7a5e2c1d":"code","d01fbc44":"code","6b47b95a":"code","d4ec08b5":"code","09999f80":"code","46555da4":"code","96685bbb":"code","982829ab":"code","b7a98db5":"code","a5687098":"code","218c49d9":"code","83e687af":"code","dcc59abb":"code","c3b733df":"code","95e382b9":"code","d6b7b827":"code","380dc890":"code","bf1f4501":"code","b0544ead":"code","a8571bdd":"code","3fc4ed0e":"code","79ceb589":"code","05c797bb":"code","26e08215":"code","a9b564fa":"code","a8f09366":"code","ebd5a58e":"code","86bb9554":"code","36135698":"code","0ba1f15c":"code","ca59abc5":"code","cef2987b":"code","71fc9c4a":"code","bb54480c":"code","56ec59c8":"code","96f83582":"code","2470e85c":"code","a14a8318":"code","e4391c0d":"code","53079494":"code","a54b9f94":"code","e7165c77":"code","54ddb1a4":"code","b7682cb7":"code","f6f2b14e":"code","c15246eb":"code","eb989836":"code","3fa790fa":"code","e3c34dd6":"code","3c74d026":"code","448a28eb":"code","9de40bf0":"code","f5c2194f":"code","bcd38687":"code","228aae9c":"code","52c26397":"markdown","a5c2d4c1":"markdown","1bf5eafa":"markdown","219b61ec":"markdown","a1e649fc":"markdown"},"source":{"c8c07f9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe2f7cb8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ntrain=pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv\")\ntrain.head()","2d894368":"train.sort_values('image_name',ascending=True,inplace=True)\ntrain.head()","7a5e2c1d":"train.info()","d01fbc44":"train['sex'].fillna(train['sex'].mode()[0],inplace=True)\ntrain['age_approx'].fillna(train['age_approx'].mean(),inplace=True)\ntrain['anatom_site_general_challenge'].fillna(train['anatom_site_general_challenge'].mode()[0],inplace=True)","6b47b95a":"train.anatom_site_general_challenge.value_counts()","d4ec08b5":"corr = train.corr()\ncorr.style.background_gradient(cmap='inferno')","09999f80":"plt.figure(figsize=(15,10))\nsns.countplot(train.sex)","46555da4":"plt.figure(figsize=(15,10))\nsns.countplot(train.anatom_site_general_challenge)","96685bbb":"plt.figure(figsize=(15,10))\nsns.countplot(train.diagnosis)","982829ab":"plt.figure(figsize=(15,10))\nsns.countplot(y=\"benign_malignant\",data=train)","b7a98db5":"train.head()","a5687098":"from sklearn.preprocessing import LabelEncoder\nlab=LabelEncoder()\nlabels=lab.fit_transform(train.benign_malignant)","218c49d9":"import glob\nimport cv2\nfrom PIL import Image\nimport numpy as np\nfrom tqdm import tqdm\nimage_array=[]\nl=[]\ni=0\nfor img in tqdm(glob.glob(\"..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/*.jpg\")):\n    image= cv2.imread(img)\n    image_from_array = Image.fromarray(image, 'RGB')\n    size_image = image_from_array.resize((50,50))\n    image_array.append(np.array(size_image))\n    i=i+1\n    if i==1000:\n        break","83e687af":"len(image_array)","dcc59abb":"data=np.array(image_array)\nlabels=labels[:1000]","c3b733df":"len(labels),np.unique(labels)","95e382b9":"import matplotlib.pyplot as plt\nfigure=plt.figure(figsize=(15,10))\nax=figure.add_subplot(121)\nax.imshow(data[0])\nbx=figure.add_subplot(122)\nbx.imshow(data[60])\nplt.show()","d6b7b827":"np.save(\"Cells\",data)\nnp.save(\"labels\",labels)","380dc890":"Cells=np.load(\"Cells.npy\")\nlabels=np.load(\"labels.npy\")","bf1f4501":"s=np.arange(Cells.shape[0])\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","b0544ead":"num_classes=len(np.unique(labels))\nlen_data=len(Cells)\nnum_classes","a8571bdd":"x_train,x_test=Cells[(int)(0.1*len_data):],Cells[:(int)(0.1*len_data)]\nx_train = x_train.astype('float32')\/255\nx_test = x_test.astype('float32')\/255\ntrain_len=len(x_train)\ntest_len=len(x_test)","3fc4ed0e":"y_train,y_test=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]","79ceb589":"import keras\ny_train=keras.utils.to_categorical(y_train,num_classes)\ny_test=keras.utils.to_categorical(y_test,num_classes)","05c797bb":"from keras.models import Sequential,Model\nfrom keras.layers import Dense,Conv2D,MaxPooling2D,Dropout,Flatten,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.layers import Activation, Convolution2D, Dropout, Conv2D,AveragePooling2D, BatchNormalization,Flatten,GlobalAveragePooling2D\nfrom keras import layers\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau\nfrom keras.applications.resnet50 import ResNet50","26e08215":"base_model = ResNet50(weights='imagenet',include_top=False, input_shape=(50,50,3))\nx = base_model.output\nx = Flatten()(x)\nx=Dense(500, activation='relu')(x)\nx=Dropout(0.2)(x)\npredictions = Dense(2, activation='softmax')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nfor layer in base_model.layers:\n    layer.trainable = False\nmodel.summary()","a9b564fa":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","a8f09366":"filepath=\"weights.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')\nhistory=model.fit(x_train,y_train,batch_size=128,epochs=20,verbose=1,validation_split=0.33,callbacks=[checkpoint])","ebd5a58e":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","86bb9554":"figure=plt.figure(figsize=(15,15))\nax=figure.add_subplot(121)\nax.plot(history.history['accuracy'])\nax.plot(history.history['val_accuracy'])\nax.legend(['Training Accuracy','Val Accuracy'])\nbx=figure.add_subplot(122)\nbx.plot(history.history['loss'])\nbx.plot(history.history['val_loss'])\nbx.legend(['Training Loss','Val Loss'])","36135698":"test_image_array=[]\nfor img in tqdm(glob.glob(\"..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/*.jpg\")):\n    image= cv2.imread(img)\n    image_from_array = Image.fromarray(image, 'RGB')\n    size_image = image_from_array.resize((50,50))\n    test_image_array.append(np.array(size_image))\nnp.save(\"test\",test_image_array)","0ba1f15c":"ts_array=np.load(\"..\/input\/siimpred\/test.npy\")\np=np.argmax(model.predict(ts_array),axis=1)","ca59abc5":"a=lab.inverse_transform(p)\na=pd.DataFrame(a)","cef2987b":"a.to_csv(\"benign_malignant.csv\",index=False)","71fc9c4a":"from sklearn.preprocessing import LabelEncoder\nla=LabelEncoder()\ntrain['benign_malignant']=la.fit_transform(train['benign_malignant'])\ntrain['diagnosis']=la.fit_transform(train['diagnosis'])\ntrain['anatom_site_general_challenge']=la.fit_transform(train['anatom_site_general_challenge'])\ntrain['sex']=la.fit_transform(train['sex'])","bb54480c":"train.head()","56ec59c8":"train.info()","96f83582":"x=train.drop(['image_name','patient_id','target','diagnosis'],axis=1)\ny=train['target']","2470e85c":"from imblearn.over_sampling import SMOTE\nsm=SMOTE()\nx,y=sm.fit_sample(x,y)","a14a8318":"from sklearn.model_selection import train_test_split,KFold,cross_val_score\nxr,xt,yr,yt=train_test_split(x,y)","e4391c0d":"from sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier,RandomForestRegressor,GradientBoostingRegressor\nfrom xgboost import XGBClassifier,XGBRFRegressor,XGBRegressor\nfrom sklearn.tree import DecisionTreeClassifier,DecisionTreeRegressor\nfrom sklearn.linear_model import LogisticRegression,LinearRegression,SGDRegressor\nfrom sklearn.svm import SVC,SVR\nfrom sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom lightgbm import LGBMRegressor,LGBMRegressor","53079494":"model=XGBClassifier(n_estimators=1000)\nmodel.fit(x,y)\n# kfold=KFold(n_splits=10)\n# res=cross_val_score(model,x,y,cv=kfold)\n# res.mean()*100","a54b9f94":"yp=model.predict(xt)","e7165c77":"from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\nprint(r2_score(yt,yp))\nprint(mean_absolute_error(yt,yp))\nprint(mean_squared_error(yt,yp))","54ddb1a4":"sample=pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv\")\nsample.head()","b7682cb7":"test=pd.read_csv(\"\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv\")\ntest.head()","f6f2b14e":"test['sex'].fillna(test['sex'].mode()[0],inplace=True)\ntest['age_approx'].fillna(test['age_approx'].mean(),inplace=True)\ntest['anatom_site_general_challenge'].fillna(test['anatom_site_general_challenge'].mode()[0],inplace=True)","c15246eb":"test['anatom_site_general_challenge']=la.fit_transform(test['anatom_site_general_challenge'])\ntest['sex']=la.fit_transform(test['sex'])","eb989836":"test.head()","3fa790fa":"test=pd.concat([test,a],axis=1)\ntest.head()","e3c34dd6":"test.columns=[                   'image_name',                    'patient_id',\n                                 'sex',                    'age_approx',\n       'anatom_site_general_challenge',                               'benign_malignant']","3c74d026":"test['benign_malignant']=la.fit_transform(test['benign_malignant'])","448a28eb":"test.info()","9de40bf0":"x1=test.drop(['image_name','patient_id'],axis=1)\nyp1=model.predict(x1)\nyp1=pd.DataFrame(yp1)","f5c2194f":"test=pd.concat([test,yp1],axis=1)\ntest.head()","bcd38687":"test.columns=[                   'image_name',                    'patient_id',\n                                 'sex',                    'age_approx',\n       'anatom_site_general_challenge',              'benign_malignant',\n                                     'target']","228aae9c":"test.to_csv('sub.csv',columns=['image_name','target'],index=False)","52c26397":"# Deep Learning","a5c2d4c1":"# Machine Learning","1bf5eafa":"# TEST","219b61ec":"# TRAIN","a1e649fc":"# Machine Learning"}}