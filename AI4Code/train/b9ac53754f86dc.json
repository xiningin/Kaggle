{"cell_type":{"41b40d93":"code","8e25bd6c":"code","1d3520af":"code","849458eb":"code","22f13322":"code","2cea687b":"code","e96b65e3":"code","3d029885":"markdown","90c77799":"markdown","d7743d1e":"markdown","9ad5829e":"markdown","b106090d":"markdown","46593579":"markdown","6353108e":"markdown","fe67683b":"markdown","078ad241":"markdown"},"source":{"41b40d93":"# Set up feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql.ex3 import *\nprint(\"Setup Complete\")","8e25bd6c":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"hacker_news\" dataset\ndataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# Construct a reference to the \"comments\" table\ntable_ref = dataset_ref.table(\"comments\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"comments\" table\nclient.list_rows(table, max_results=5).to_dataframe()","1d3520af":"# Query to select prolific commenters and post counts\nprolific_commenters_query = \"\"\"\n        SELECT author, COUNT(1) AS NumPosts\n        FROM `bigquery-public-data.hacker_news.comments`\n        GROUP BY author\n        HAVING COUNT(1) > 10000\n        \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(prolific_commenters_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nprolific_commenters = query_job.to_dataframe()\n\n# View top few rows of results\nprint(prolific_commenters.head())\n\n# Check your answer\nq_1.check()","849458eb":"#q_1.solution()","22f13322":"# Query to select prolific commenters and post counts\nprolific_commenters_query = \"\"\"\n        SELECT deleted, COUNT(1) AS NumPosts\n        FROM `bigquery-public-data.hacker_news.comments`\n        GROUP BY deleted\n        \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquery_job = client.query(prolific_commenters_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nprolific_commenters = query_job.to_dataframe()\n\n# View top few rows of results\nprint(prolific_commenters.head())","2cea687b":"num_deleted_posts = 227736 # Put your answer here\n\n# Check your answer\nq_2.check()","e96b65e3":"#q_2.solution()","3d029885":"**This notebook is an exercise in the [SQL](https:\/\/www.kaggle.com\/learn\/intro-to-sql) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/dansbecker\/group-by-having-count).**\n\n---\n","90c77799":"# Exercises\n\n### 1) Prolific commenters\n\nHacker News would like to send awards to everyone who has written more than 10,000 posts. Write a query that returns all authors with more than 10,000 posts as well as their post counts. Call the column with post counts `NumPosts`.\n\nIn case sample query is helpful, here is a query you saw in the tutorial to answer a similar question:\n```\nquery = \"\"\"\n        SELECT parent, COUNT(1) AS NumPosts\n        FROM `bigquery-public-data.hacker_news.comments`\n        GROUP BY parent\n        HAVING COUNT(1) > 10\n        \"\"\"\n```","d7743d1e":"The code cell below fetches the `comments` table from the `hacker_news` dataset.  We also preview the first five rows of the table.","9ad5829e":"# Keep Going\n**[Click here](https:\/\/www.kaggle.com\/dansbecker\/order-by)** to move on and learn about the **ORDER BY** clause.","b106090d":"For the solution, uncomment the line below.","46593579":"### 2) Deleted comments\n\nHow many comments have been deleted? (If a comment was deleted, the `deleted` column in the comments table will have the value `True`.)","6353108e":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161314) to chat with other Learners.*","fe67683b":"# Introduction\n\nQueries with **GROUP BY** can be powerful. There are many small things that can trip you up (like the order of the clauses), but it will start to feel natural once you've done it a few times. Here, you'll write queries using **GROUP BY** to answer questions from the Hacker News dataset.\n\nBefore you get started, run the following cell to set everything up:","078ad241":"For the solution, uncomment the line below."}}