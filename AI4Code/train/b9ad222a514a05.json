{"cell_type":{"bc682833":"code","036f7ac4":"code","ed885cf0":"code","eeefa563":"code","f5bdfc43":"code","8337385f":"code","ee0810ad":"code","48c1cb2a":"code","370379bc":"code","396c84e4":"code","a353c4a9":"code","dd05b2f6":"markdown","260bce42":"markdown","aa98b226":"markdown","e471c03c":"markdown","ba8acd3b":"markdown","2267ab9a":"markdown","18b4eaae":"markdown","933e53a9":"markdown","b85d03bb":"markdown"},"source":{"bc682833":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","036f7ac4":"directory = '\/kaggle\/input\/random-linear-regression\/'","ed885cf0":"train_data = pd.read_csv (directory + 'train.csv')\ntest_data = pd.read_csv(directory + 'test.csv')","eeefa563":"train_data.info() ","f5bdfc43":"test_data.info()","8337385f":"train_data = train_data.dropna()","ee0810ad":"X_train = np.array(train_data.iloc[:,0].values)\ny_train = np.array(train_data.iloc[:,1].values)\nprint( 'X_train' , X_train [:5] )\nprint( 'y_train' , y_train [:5] )","48c1cb2a":"X_train = X_train.reshape( -1 ,1 )\nprint( 'X_train\\n' , X_train [:5] )\n","370379bc":"X_test = np.array(test_data.iloc[:,0].values)\ny_test = np.array(test_data.iloc[:,1].values)\nprint( 'X_test' , X_test [:5] )\nprint( 'y_test' , y_test [:5] )\n","396c84e4":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit( X_train , y_train )\nmodel.score( X_train , y_train )","a353c4a9":"import matplotlib.pyplot as plt\nplt.scatter( X_test , y_test )\nplt.plot( X_test , model.predict( X_test.reshape( - 1 , 1 ) ) , 'r')","dd05b2f6":"# Extract Data from Csv File","260bce42":"# Removes the Null Value","aa98b226":"# Changing the Shape as LR requires 2D array","e471c03c":"# Linear Regression Model","ba8acd3b":"# Extracting Input and Output from Test Dataset","2267ab9a":"# Derive Information about the Dataset","18b4eaae":"# Extract Input and output from the Train Dataset","933e53a9":"# Plotting the graph to Check the performance ","b85d03bb":"Happy kaggling ...\nKindly Upvote if like the Notebook"}}