{"cell_type":{"612186da":"code","3103f25c":"code","dba81ab3":"code","2d321e5f":"code","9167d802":"code","666d542a":"code","408d2a89":"code","ec68cb57":"code","e6cfc4c0":"code","eed02728":"code","168c894d":"code","bf38265d":"code","b488cdb3":"code","ae82af08":"code","96f12f63":"code","db975de8":"code","be50966c":"code","612e4245":"code","ea5e4638":"code","58e7754f":"code","f19ef39d":"code","21195cb7":"code","e2c136fc":"code","9201b714":"code","fe500cfe":"code","ff34a93b":"code","8bf39302":"code","b67a669b":"code","4349835a":"code","44cb3002":"code","bed55a20":"code","29200e4a":"code","3aa9fef9":"code","8a01cd3b":"code","6a1cb663":"code","d3d11c79":"code","180a9800":"code","6afa67f0":"code","ad472006":"code","3d943791":"code","67f5a58a":"code","b2cb4882":"code","7eded23b":"code","6c6e1ce7":"code","dc1090e6":"code","0cb7e868":"code","32098ccf":"code","ab4e3f93":"code","b9271654":"code","4128c106":"code","d041246e":"code","c535aee0":"code","98323dda":"code","cd0b55ef":"code","ad380b65":"code","30262c16":"code","38391425":"code","7430fb5c":"code","ee6be94c":"code","42a6bdef":"code","d1927a7d":"code","af3889b8":"code","6e45e361":"code","07e6f172":"code","26cd631b":"code","185dfc30":"code","87e3c8d4":"code","72bded2c":"code","5fafc5d7":"code","5dd17a9e":"code","81895f8d":"code","aefdb07b":"code","c2d3afa9":"code","94b23c1b":"code","5ec46667":"code","fb0d3674":"code","2cc40ca5":"code","f0c8e397":"code","ae53b01c":"code","5a7762ef":"code","1020ccbe":"code","e8b49fce":"code","d538cdcd":"code","749deb2f":"code","7636facd":"code","b48a0516":"code","022e5d29":"markdown","64f126a0":"markdown","b313f1ef":"markdown","f0837f7e":"markdown","34c2d4fd":"markdown","ed6a0d1a":"markdown","796d98f6":"markdown","3c72c171":"markdown","ba03e16c":"markdown","80602e5a":"markdown","eab36b5c":"markdown","3faf6215":"markdown","523f8fb1":"markdown","4076f7b9":"markdown","9c59b092":"markdown","d28578d0":"markdown","5cf895f5":"markdown","6ac98885":"markdown"},"source":{"612186da":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.linear_model import Lasso, Ridge\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","3103f25c":"dftmp=pd.read_csv('..\/input\/lianjia\/new.csv')\ndf = pd.read_csv('..\/input\/new-data-clean\/clean_data')\ndf.drop('Unnamed: 0',axis=1,inplace=True)","dba81ab3":"df.head()","2d321e5f":"sns.distplot(df['totalPrice'])","9167d802":"fig = px.box(df, y=\"totalPrice\")\nfig.show()","666d542a":"df.describe()","408d2a89":"df.info()","ec68cb57":"df.drop(['url','id','Lat','Lng','Cid','tradeTime','DOM','followers','communityAverage','fiveYearsProperty'],inplace=True,axis=1)","e6cfc4c0":"df['constructionTime'] = df['constructionTime'].astype('object')","eed02728":"df.info()","168c894d":"from sklearn.preprocessing import RobustScaler","bf38265d":"robust = RobustScaler()","b488cdb3":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","ae82af08":"features","96f12f63":"## Train test split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.10, random_state=101)","db975de8":"## Creating and Training the Model\nlm = LinearRegression()","be50966c":"lm.fit(x_train,y_train)","612e4245":"# Prediction with data train\npredictions_train = lm.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","ea5e4638":"# Prediction with data test\npredictions_test = lm.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","58e7754f":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","f19ef39d":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","21195cb7":"rid = Ridge()","e2c136fc":"rid.fit(x_train,y_train)","9201b714":"# Prediction with data train\npredictions_train = rid.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","fe500cfe":"# Prediction with data test\npredictions_test = rid.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","ff34a93b":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","8bf39302":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","b67a669b":"las = Lasso()","4349835a":"las.fit(x_train,y_train)","44cb3002":"# Prediction with data train\npredictions_train = las.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","bed55a20":"# Prediction with data test\npredictions_test = las.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","29200e4a":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","3aa9fef9":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","8a01cd3b":"las2 = Lasso()","6a1cb663":"param_grid = {\n    'alpha': [0.0001, 0.001, 0.01,0.1, 0.5, 1],\n}","d3d11c79":"lasso_cv = GridSearchCV(las2, param_grid,cv=5)","180a9800":"lasso_cv.fit(x_train, y_train)","6afa67f0":"# Prediction with data train\npredictions_train = lasso_cv.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","ad472006":"# Prediction with data test\npredictions_test = lasso_cv.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","3d943791":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","67f5a58a":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","b2cb4882":"dtree = DecisionTreeRegressor(random_state=101)","7eded23b":"dtree.fit(x_train,y_train)","6c6e1ce7":"# Prediction with data train\npredictions_train = dtree.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","dc1090e6":"# Prediction with data test\npredictions_test = dtree.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","0cb7e868":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","32098ccf":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","ab4e3f93":"dtree2 = DecisionTreeRegressor(random_state=101)","b9271654":"parameters = {\n    'max_depth' : [4,5,6,7,None],\n    'min_samples_split' : [2,5,8,10,15],\n    'min_samples_leaf' : [1,2,3,4],\n}","4128c106":"grid_dtree = GridSearchCV(estimator = dtree2,\n                        param_grid = parameters,\n                        scoring='neg_root_mean_squared_error',cv=4,n_jobs=-1\n                       )","d041246e":"grid_dtree.fit(x_train,y_train)","c535aee0":"# Prediction with data train\npredictions_train = grid_dtree.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","98323dda":"# Prediction with data test\npredictions_test = grid_dtree.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","cd0b55ef":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","ad380b65":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","30262c16":"rf = RandomForestRegressor(random_state=101)","38391425":"rf.fit(x_train,y_train)","7430fb5c":"# Prediction with data train\npredictions_train = rf.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","ee6be94c":"# Prediction with data test\npredictions_test = rf.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","42a6bdef":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","d1927a7d":"## Train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","af3889b8":"parameters = {\n    'max_depth' : [5,6,None],\n    'min_samples_split' : [2,4],\n    'min_samples_leaf' : [1,2],\n    'n_estimators' : [100]\n}","6e45e361":"rf = RandomForestRegressor(random_state=101)","07e6f172":"grid_rfc = GridSearchCV(estimator = rf,\n                        param_grid = parameters,\n                        scoring='neg_root_mean_squared_error',cv=4,n_jobs=-1\n                       )","26cd631b":"grid_rfc.fit(x_train,y_train)","185dfc30":"# Prediction with data train\npredictions_train = grid_rfc.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","87e3c8d4":"# Prediction with data test\npredictions_test = grid_rfc.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","72bded2c":"grid_rfc.best_params_","5fafc5d7":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","5dd17a9e":"## Train test split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","81895f8d":"parameters = {\n    'max_depth' : [None],\n    'min_samples_split' : [6],\n    'min_samples_leaf' : [5],\n    'n_estimators' : [120]\n}","aefdb07b":"rf = RandomForestRegressor(random_state=101)","c2d3afa9":"grid_rf = GridSearchCV(estimator = rf,\n                        param_grid = parameters,\n                        scoring='neg_root_mean_squared_error',cv=4,n_jobs=-1\n                       )","94b23c1b":"grid_rf.fit(x_train,y_train)","5ec46667":"# Prediction with data train\npredictions_train = grid_rf.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","fb0d3674":"# Prediction with data test\npredictions_test = grid_rf.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","2cc40ca5":"grid_rf.best_params_","f0c8e397":"## Setting features and target\nfeatures = df.drop('totalPrice',axis=1)\nfeatures = pd.get_dummies(features,drop_first=True)\n## Lanjutan standarisasi nilai\nrobust.fit(features)\nrobust_data = robust.transform(features)\nfeatures = pd.DataFrame(robust_data,columns=features.columns)\ntarget = df['totalPrice']","ae53b01c":"## Train test split\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.1, random_state=101)","5a7762ef":"parameters = {\n    'max_depth' : [None],\n    'min_samples_split' : [10],\n    'min_samples_leaf' : [7],\n    'n_estimators' : [150]\n}","1020ccbe":"rf = RandomForestRegressor(random_state=101)","e8b49fce":"grid_rf = GridSearchCV(estimator = rf,\n                        param_grid = parameters,\n                        scoring='neg_root_mean_squared_error',cv=5,n_jobs=-1\n                       )","d538cdcd":"grid_rf.fit(x_train,y_train)","749deb2f":"# Prediction with data train\npredictions_train = grid_rf.predict(x_train)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_train,predictions_train)))\nprint('R2 Score : ', r2_score(y_train,predictions_train))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_train, y = predictions_train,ax = axes[0])\nsns.distplot((y_train-predictions_train),ax = axes[1])","7636facd":"# Prediction with data test\npredictions_test = grid_rf.predict(x_test)\nprint('RMSE : ', np.sqrt(metrics.mean_squared_error(y_test,predictions_test)))\nprint('R2 Score : ', r2_score(y_test,predictions_test))\nf, axes = plt.subplots(1,2,figsize=(20,10))\nsns.regplot(x = y_test, y = predictions_test,ax = axes[0])\nsns.distplot((y_test-predictions_test),ax = axes[1])","b48a0516":"grid_rf.best_params_","022e5d29":"#### III.1 Linear Regression Default Parameter","64f126a0":"### II.2 Standarisasi Nilai","b313f1ef":"#### III.4 Decison Tree Regressor","f0837f7e":"III.8 Random Forest Regressor with Parameter II","34c2d4fd":"#### III.6 Random Forest Regressor","ed6a0d1a":"#### III.7 Random Forest Regressor with Parameter I","796d98f6":"#### III.3 Lasso Regression Default","3c72c171":"III.8 Random Forest Regressor with Parameter III ","ba03e16c":"Unused variables are variables that don't need to be inputted.\n- url\n- id\n- Ex\n- Lng\n- Cid\n- tradeTime\n- DOM\n- followers\n- communityAverage\n- fiveYearsProperty","80602e5a":"With the results of the training model above, the best model is ** III.8 Random Forest Regressor with Parameter II ** with the lowest RMSE value of 124.3104488455155 than the other models.\n\nDetails of model training\n- Amount of data: 316448\n- Data Train: 90%\n- Test data: 10%\n- Algorithm: Random Forest Regressor\n- Standardized Value: Robust Scaller\n- The training method used: GridSearch CV\n- Best parameter: ('max_depth': None,\n  'min_samples_leaf': 5,\n  'min_samples_split': 6,\n  'n_estimators': 120}","eab36b5c":"#### III.2 Ridge Regression Default","3faf6215":"================================================================================================================================","523f8fb1":"#### III.3 Lasso Regression with Parameter Tuning","4076f7b9":"#### III.5 Decison Tree Regressor with Parameter","9c59b092":"## II. Feature Engineering I","d28578d0":"### II.1 Unused variable","5cf895f5":"## Machine Learning I\n- Using 5 algorithms, namely: Linear Regression, Ridge Regression and Lasso Regression, Decision Tree, and Random Forest","6ac98885":"### III. Making Machine Learning Models"}}