{"cell_type":{"ec9a0d90":"code","a0021ef6":"code","467c0282":"code","8a5e097e":"code","86441b12":"code","85e64984":"code","12c37d82":"code","01fcb8f7":"code","dd07ad98":"code","0ddade1c":"code","332f5943":"code","f0ac51f8":"code","acdc557e":"code","cdfdd2e1":"code","ee8c462b":"code","92fd934f":"code","d560203e":"code","c71b1c09":"code","8d8b1597":"code","8b16fdf7":"code","bc003317":"code","0bb3326c":"code","c121d666":"code","e9323afe":"code","f287b667":"code","eebe0c36":"code","a4fe811b":"code","85161a36":"code","7556d36a":"code","0f8132eb":"code","f42b1d52":"code","f42000fa":"code","da3c62a8":"code","b0dbf738":"code","ffbfa35d":"code","7d2c0ea1":"code","e68c91ca":"code","a9c81114":"code","ec2a4724":"code","e18fa6cc":"code","add5459a":"code","86522aaa":"code","5238c3fd":"code","5d55c64f":"code","1577400a":"code","e1d9f6b6":"code","74bd07aa":"code","5b6230de":"code","632e4433":"code","6973306e":"code","d90dde53":"code","a3be9b8d":"code","848d7479":"code","96215378":"code","647b2491":"code","2c3ef3ac":"code","5145d2b7":"code","86cd8bd9":"code","0185c76d":"code","1be80c99":"code","60753bfe":"code","ab7ea256":"code","0a5b554c":"code","b7c5bba5":"code","e509b920":"code","2542a782":"markdown"},"source":{"ec9a0d90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a0021ef6":"pd.set_option('display.max_columns',None)","467c0282":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","8a5e097e":"train.columns","86441b12":"%matplotlib notebook\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nmpl.rcParams['figure.figsize'] = [10.0, 8.0]","85e64984":"from sklearn.model_selection import train_test_split\ntraining,valid=train_test_split(train,random_state=0,test_size=0.2)\ntraining.head()","12c37d82":"import warnings\nwarnings.filterwarnings(action='ignore')","01fcb8f7":"age=training.Age\nage.fillna(age.mean(),inplace=True)\nage=age.values\nsex=training.Sex\nsex=pd.get_dummies(sex)\nsex=sex.values[:,0]\nfare=training.Fare\nfare=fare.fillna(fare.mean())\nfare=fare.values\nembarked=training.Embarked\nembarked=embarked.fillna('S')\nembarked=pd.get_dummies(embarked)\nembarked=embarked.values\nsib=training.SibSp.values\nparch=training.Parch.values\npclass=training.Pclass.values\nsurvive=training.Survived.values\n\n\n","dd07ad98":"sex[:5]","0ddade1c":"no_of_male=list(sex).count(0)\nno_of_female=list(sex).count(1)\nmale_survive=len([survive[i] for i in range(len(survive)) if sex[i]==0 and survive[i]==1])\nfemale_survive=len([survive[i] for i in range(len(survive)) if sex[i]==1 and survive[i]==1])\nprint(no_of_male,no_of_female,male_survive,female_survive,len(survive),(male_survive)+(female_survive))\nmale_survive_rate=male_survive\/no_of_male\nfemale_survive_rate=female_survive\/no_of_female","332f5943":"female_survive_rate","f0ac51f8":"male_survive_rate","acdc557e":"plt.figure(figsize=(10,8))\nplt.bar([0],male_survive_rate,0.5,label='MALE')\nplt.bar([1],female_survive_rate,0.5,label='FEMALE')\nplt.xlabel('sex',fontsize=18)\nplt.ylabel('survive rate',fontsize=18)\nplt.title('sex vs survive rate')\nplt.xticks([0,1],labels=['MALE','FEMALE'])\nplt.ylim([0,1])\nplt.legend(loc='best')\nplt.show()","cdfdd2e1":"# def plotdata(x,y,title=None,xlabel=None,ylabel=None):\n#     alist=[0]\n#     survive_list=[0]\n#     newls=[]\n#     maximum=max(x)\n#     for j in range(1,maximum):\n#         alist[0]=0\n#         survive_list[0]=0\n#         for num,i in enumerate(x):\n#             if(i<=j):\n#                 alist[0]+=1\n#                 if(survive[num]==1):\n#                     survive_list[0]+=1          \n#         newls.append(survive_list[0]\/alist[0])\n#     plt.figure()    \n#     plt.title(title)\n#     plt.xlabel(xlabel)\n#     plt.ylabel(ylabel)\n#     plt.plot([i for i in range(1,81)],newls)    \n#     plt.show()","ee8c462b":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(age):\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1          \n    newls.append(survive_agelist[0]\/agelist[0])\nplt.figure()    \nplt.title('age vs survive rate')\nplt.xlabel('age')\nplt.ylabel('survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","92fd934f":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(age):\n        if(sex[num]==0):\n            continue\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1          \n    newls.append(survive_agelist[0]\/agelist[0])\nplt.figure()    \nplt.title('age vs Female survive rate')\nplt.xlabel('age')\nplt.ylabel('Female survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","d560203e":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(age):\n        if(sex[num]==1):\n            continue\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1          \n    newls.append(survive_agelist[0]\/agelist[0])\nplt.figure()    \nplt.title('age vs Male survive rate')\nplt.xlabel('age')\nplt.ylabel('Male survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","c71b1c09":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(fare):\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1          \n    if(agelist[0]==0):\n        newls.append(0)\n        continue\n    newls.append(survive_agelist[0]\/agelist[0])\n    \nplt.figure()    \nplt.title('fare vs survive rate')\nplt.xlabel('fare')\nplt.ylabel('survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","8d8b1597":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(fare):\n        if(sex[num]==0):\n            continue\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1\n    if(agelist[0]==0):\n        newls.append(0)\n        continue\n    newls.append(survive_agelist[0]\/agelist[0])\nplt.figure()    \nplt.title('fare vs Female survive rate')\nplt.xlabel('fare')\nplt.ylabel('Female survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","8b16fdf7":"agelist=[0]\nsurvive_agelist=[0]\nnewls=[]\nfor j in range(1,81):\n    agelist[0]=0\n    survive_agelist[0]=0\n    for num,i in enumerate(fare):\n        if(sex[num]==1):\n            continue\n        if(i<=j):\n            agelist[0]+=1\n            if(survive[num]==1):\n                survive_agelist[0]+=1 \n    if(agelist[0]==0):\n        newls.append(0)\n        continue            \n    newls.append(survive_agelist[0]\/agelist[0])\nplt.figure()    \nplt.title('fare vs Male survive rate')\nplt.xlabel('fare')\nplt.ylabel('Male survive rate')\nplt.plot([i for i in range(1,81)],newls)    \nplt.show()","bc003317":"training.columns","0bb3326c":"X_train,X_valid,y_train,y_valid=train_test_split(training[['Pclass', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Embarked']],training[['Survived']],test_size=0.2,random_state=0)\n","c121d666":"X_train.columns","e9323afe":"X_train.Embarked.fillna('S',inplace=True)\nX_valid.Embarked.fillna('S',inplace=True)\nX_train=pd.get_dummies(X_train)\n# X_train=X_train.drop(['Age'],axis=1)\nX_valid=pd.get_dummies(X_valid)\n# X_valid=X_valid.drop(['Age'],axis=1)","f287b667":"X_valid.head()","eebe0c36":"X_valid.shape","a4fe811b":"X_train.shape","85161a36":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nX_train=scaler.fit_transform(X_train)\nX_valid=scaler.transform(X_valid)","7556d36a":"# from sklearn.preprocessing import StandardScaler\n# scaler=StandardScaler()\n# X_train=scaler.fit_transform(X_train)\n# X_valid=scaler.transform(X_valid)","0f8132eb":"from sklearn.decomposition import PCA\npca=PCA(n_components=2)\nX_train_pca=pca.fit_transform(X_train)\nX_valid_pca=pca.transform(X_valid)\n","f42b1d52":"plt.figure()\nplt.scatter(X_train_pca[:,0],X_train_pca[:,1],c=y_train.values.reshape(-1,),s=50)\nplt.show()","f42000fa":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(X_train,y_train)\nlr.score(X_valid,y_valid)","da3c62a8":"!pip install keras_utils","b0dbf738":"!pip install keras","ffbfa35d":"import tensorflow as tf\nprint(tf.__version__)\nimport keras_utils\n# from keras_utils import reset_tf_session\nfrom keras.layers import Dense,Activation\nfrom keras.models import Sequential","7d2c0ea1":"model=Sequential()\nmodel.add(Dense(10,input_shape=(10,)))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(10))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","e68c91ca":"model.summary()","a9c81114":"model.compile(\n    loss='categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n    )\n    ","ec2a4724":"y_t=y_train.values\ny_2t=y_t==0\ny_2t=y_2t.astype(int)\ny_2t[:5]","e18fa6cc":"y_train_oh=np.append(y_train.values,y_2t,axis=1)\nprint(y_train_oh.shape)\nprint(y_train_oh[:5])","add5459a":"X_train.shape","86522aaa":"y_v=y_valid.values\ny_2v=y_v==0\ny_2v=y_2v.astype(int)\ny_valid_oh=np.append(y_valid.values,y_2v,axis=1)","5238c3fd":"vx,tx,vy,ty=train_test_split(X_valid,y_valid_oh,test_size=0.5,random_state=0)","5d55c64f":"model.fit(X_train,y_train_oh,epochs=100,validation_data=(vx,vy),verbose=0)","1577400a":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nX_test=test[['Pclass', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Fare', 'Embarked']]","e1d9f6b6":"X_test.Fare.fillna(32,inplace=True)\nX_test.Age.fillna(29,inplace=True)\nX_test=pd.get_dummies(X_test)","74bd07aa":"X_test.head()","5b6230de":"X_test=scaler.transform(X_test)","632e4433":"model.predict(tx)[:4]","6973306e":"ty[:5]","d90dde53":"def changeto(pred):\n    arr=[]\n    for i in pred[:,1]:\n        if(i>0.5):\n            arr.append(1)\n        else:\n            arr.append(0)\n    return np.array(arr)        ","a3be9b8d":"pred=changeto(model.predict(tx))","848d7479":"pred[:10]","96215378":"ty[:10,1]","647b2491":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(ty[:,1],pred)","2c3ef3ac":"from sklearn.metrics import roc_auc_score\nroc_auc_score(ty[:,1],model.predict(tx)[:,1])","5145d2b7":"lr.predict_proba()","86cd8bd9":"roc_auc_score(ty[:,0],lr.predict_proba(tx)[:,1])","0185c76d":"from sklearn.metrics import accuracy_score\naccuracy_score(ty[:,1],pred)","1be80c99":"accuracy_score(ty[:,0],lr.predict(tx))","60753bfe":"train_pred=changeto(model.predict(X_train))","ab7ea256":"accuracy_score(y_train_oh[:,1],train_pred)","0a5b554c":"test_pred=changeto(model.predict(X_test))","b7c5bba5":"result=pd.DataFrame(zip(test.PassengerId.values,test_pred),columns=['PassengerId','Survived'])\n    ","e509b920":"result.to_csv('submission.csv',index=False)","2542a782":"# training"}}