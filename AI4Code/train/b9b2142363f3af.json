{"cell_type":{"869895a2":"code","01b27ac8":"code","cfb9ac55":"code","cfd08d7c":"code","a3ace00c":"code","9856e88a":"code","08940d8a":"code","cfea0da8":"code","85a4141b":"code","01e13aa0":"code","67218982":"code","2d64cd5f":"code","539d8038":"code","5a7cce73":"code","fc1cf45a":"code","6e274f73":"code","d80c0a75":"code","782b366f":"code","f1738854":"code","41b64927":"code","2468e25d":"code","5372a9ee":"code","5f2bcf41":"code","ba113c4a":"code","a0e22b06":"code","80f84781":"code","55d9d0c1":"code","9453b5a2":"code","3d1936f1":"code","b501c935":"code","c7aa9254":"code","6127e390":"code","6e7076ab":"code","d0fdbe58":"code","2466b48c":"code","05560532":"code","5c5e8807":"code","bd2bb8c7":"code","bdd7849f":"code","042a541f":"code","46593660":"code","0cbaecef":"code","cbab9dde":"code","8f4033a3":"code","11428b30":"code","4d0e5ccb":"code","a023957a":"code","58069edc":"code","5020797d":"code","61a0bbca":"code","78d33ad4":"code","c95a8a5c":"code","726318f2":"code","7440b87f":"code","0eaf27ca":"code","64905e82":"code","2510f4a5":"code","1a545976":"code","477dbdd1":"markdown","bc76941f":"markdown"},"source":{"869895a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime \nfrom scipy.stats import f_oneway\n%matplotlib inline\nimport scipy.stats as stats\nimport statsmodels.api as sm\nimport statsmodels.formula.api","01b27ac8":"serv311 = pd.read_csv(\"..\/input\/311-service-requests-nyc\/311_Service_Requests_from_2010_to_Present.csv\",parse_dates=[\"Created Date\", \"Closed Date\"])\n\nserv311.replace('Unspecified',np.NaN,inplace=True)","cfb9ac55":"serv311.info","cfd08d7c":"\nserv311 = serv311[serv311['Status']=='Closed']\nserv311.drop(['Status'],inplace=True, axis=1)\nserv311 = serv311[(serv311['Latitude'].notnull())& (serv311['Longitude'].notnull()) & (serv311['Descriptor'].notnull())]\nserv311.info()","a3ace00c":"serv311['Complaint Type'].unique()","9856e88a":"serv311['Descriptor'].unique()","08940d8a":"serv311['City'].unique()","cfea0da8":"# fix city names\n\ndef camel_case(city):\n    try:\n        city = city.split(' ')\n        city = ' '.join([x.lower().capitalize() for x in city])\n        if city == 'Unknown':\n            return np.nan\n        else:\n            return city\n    except:\n        return np.nan\n    \n# Apply camel_case function to City column\nserv311['City'] = serv311['City'].apply(camel_case)\nserv311['City'].value_counts()","85a4141b":"serv311.count()","01e13aa0":"serv311.nunique()","67218982":"serv311.info()","2d64cd5f":"complaintTypecity = pd.DataFrame({'count':\n                                  serv311.groupby(['Complaint Type','City']).size()}).reset_index()\ncomplaintTypecity","539d8038":"serv311.groupby(['Borough','Complaint Type','Descriptor']).size()","5a7cce73":"serv311 = pd.read_csv('..\/input\/311-service-requests-nyc\/311_Service_Requests_from_2010_to_Present.csv', parse_dates=[\"Created Date\", \"Closed Date\"], low_memory=False)","fc1cf45a":"serv311[\"Request_Closing_Time\"] = serv311[\"Closed Date\"] - serv311[\"Created Date\"]","6e274f73":"#Have a look at the status of tickets\nserv311['Status'].value_counts().plot(kind='bar',alpha=0.6,figsize=(7,7))\nplt.show()","d80c0a75":"serv311['Agency'].value_counts()","782b366f":"print('Start from : ',min(serv311['Created Date']))\nprint('Till : ',max(serv311['Created Date']))","f1738854":"serv311['Complaint Type'].value_counts().plot(kind='barh',alpha=0.6,figsize=(7,7))\nplt.show()","41b64927":"serv311.groupby([\"Borough\",\"Complaint Type\",\"Descriptor\"]).size()","2468e25d":"majorcomplints=serv311.dropna(subset=[\"Complaint Type\"])\nmajorcomplints=serv311.groupby(\"Complaint Type\")\n\nsortedComplaintType = majorcomplints.size().sort_values(ascending = False)\nsortedComplaintType = sortedComplaintType.to_frame('count').reset_index()\n\nsortedComplaintType\nsortedComplaintType.head(10)","5372a9ee":"sortedComplaintType = sortedComplaintType.head()\nplt.figure(figsize=(5,5))\nplt.pie(sortedComplaintType['count'],labels=sortedComplaintType[\"Complaint Type\"], autopct=\"%1.1f%%\")\nplt.show()","5f2bcf41":"groupedby_complainttype = serv311.groupby('Complaint Type')\ngroupedby_complainttype.head() ","ba113c4a":"grp_data = groupedby_complainttype.get_group('Blocked Driveway')\ngrp_data.shape","a0e22b06":"serv311['City'].dropna(inplace=True)","80f84781":"grp_data['City'].fillna('Unknown City', inplace =True)","55d9d0c1":"grp_data['City'].isnull().sum()","9453b5a2":"plt.figure(figsize=(20, 15))\nplt.scatter(grp_data['Complaint Type'],grp_data['City'])\nplt.title('Plot showing list of cities that raised complaint of type Blocked Driveway')\nplt.show()","3d1936f1":"top_complaints = ['Blocked Driveway','Illegal Parking','Noise - Commercial','Noise - Street\/Sidewalk','Derelict Vehicle','Animal Abuse','Traffic','Homeless Encampment','Noise - Park']\ncomp_borough = serv311.groupby(['Borough','Complaint Type']).size().unstack()\ncomp_borough = comp_borough[top_complaints]\ncomp_borough","b501c935":"city_comp = serv311.groupby(['City','Complaint Type']).size().unstack()\n\ncol_number = 3\nrow_number = 3\nfig, axes = plt.subplots(row_number,col_number, figsize=(12,12))\n\nfor d, (label,col) in enumerate(comp_borough.iteritems()):\n    ax = axes[int(d\/col_number), d%col_number]\n    col = col.sort_values(ascending=True)[:15]\n    col.plot(kind='barh', ax=ax)\n    ax.set_title(label)\n    \nplt.tight_layout()","c7aa9254":"# Visualization of most Complaints per Borough\nborough_comp = serv311.groupby(['Complaint Type','Borough']).size().unstack()\n\ncol_number = 2\nrow_number = 3\nfig, axes = plt.subplots(row_number,col_number, figsize=(12,12))\n\nfor i, (label,col) in enumerate(borough_comp.iteritems()):\n    ax = axes[int(i\/col_number), i%col_number]\n    col = col.sort_values(ascending=True)[:15]\n    col.plot(kind='barh', ax=ax)\n    ax.set_title(label)\n    \nplt.tight_layout()","6127e390":"serv311['City'].shape","6e7076ab":"serv311['City'].value_counts().plot(kind='bar',alpha=0.6,figsize=(10,10))\nplt.show()","d0fdbe58":"citywise_complaints = pd.DataFrame(serv311['City'].value_counts()[:10])\n\nimport squarify\nfig = plt.gcf()\nfig.set_size_inches(14, 12)\nlabel=zip(list(citywise_complaints.index),citywise_complaints['City'])\nsquarify.plot(sizes=citywise_complaints['City'], label=label, alpha=0.7)\nplt.axis('off')\nplt.show()","2466b48c":"serv311['Borough'].value_counts().plot(kind='barh',alpha=0.6,figsize=(7,7))\nplt.show()","05560532":"serv311['Request_Closing_Time'] = serv311['Closed Date'] - serv311['Created Date']","5c5e8807":"serv311['Request_Closing_Hours'] = serv311['Request_Closing_Time'].astype('timedelta64[h]')+1\nserv311[['Request_Closing_Time','Request_Closing_Hours']].head()","bd2bb8c7":"serv311['Request_Closing_Hours'].sort_values().head()","bdd7849f":"serv311['Request_Closing_Hours'].sort_values().tail()","042a541f":"mean = serv311['Request_Closing_Hours'].mean()\nstd = serv311['Request_Closing_Hours'].std()\n\nprint('My Mean for serv311 dataset is: ',mean)\nprint('My Std for serv311 dataset is ',std)","46593660":"plot_data = serv311[ ((serv311['Request_Closing_Hours']-mean)\/std) < 1]\nplot_data['Request_Closing_Hours'].hist(bins=9)\nplt.xlabel('Time(Hours) to close the request')\nplt.ylabel('Number of Requets')\nplt.title('Requests closing time distribution')\nplt.show()","0cbaecef":"citywise_resolution = serv311.groupby(['Complaint Type','Borough'])[['Request_Closing_Hours']].mean().unstack()\n\ncol_number = 2\nrow_number = 3\nfig, axes = plt.subplots(row_number,col_number, figsize=(12,12))\n\nfor i, (label,col) in enumerate(citywise_resolution.iteritems()):\n    ax = axes[int(i\/col_number), i%col_number]\n    col = col.sort_values(ascending=True)[:15]\n    col.plot(kind='barh', ax=ax)\n    ax.set_title(label)\n    \nplt.tight_layout()","cbab9dde":"import datetime\nserv311['YYYY-MM'] = serv311['Created Date'].apply(lambda x: datetime.datetime.strftime(x, '%Y-%m'))\n\n#Incidents on a monthly basis\nmonthly_incidents =  serv311.groupby('YYYY-MM').size().plot(figsize=(12,5), title='Incidents on a monthly basis');","8f4033a3":"# Complaints per Borough through the year\nserv311.groupby(['YYYY-MM','Borough']).size().unstack().plot(figsize=(15,6))\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5));","11428b30":"serv311.groupby(['YYYY-MM','Borough'])['Request_Closing_Hours'].mean().unstack().plot(figsize=(15,7),\n                                                                        title='Processing time per Borough on a monthly basis');","4d0e5ccb":"fig = plt.figure(figsize=(21,6))\nplt.subplot(1, 2, 1)\nserv311.groupby('Borough')['Unique Key'].size().plot(kind='barh',title='Complaints per Borough');\n\nplt.subplot(1, 2, 2)\nserv311.groupby('Borough')['Request_Closing_Hours'].mean().plot(kind='barh',title='Mean Closing Time per Borough (Hours)');\nplt.show()","a023957a":"serv311['Request_Closing_Minutes'] = serv311['Request_Closing_Time'].astype('timedelta64[m]')+1\n\noriginal = serv311[serv311['Complaint Type']=='Noise - Street\/Sidewalk']['Request_Closing_Minutes']\noriginal.hist(bins=100,range=(0,1250))","58069edc":"data = {}\nfor complaint in serv311['Complaint Type'].unique():\n    data[complaint] = np.log(serv311[serv311['Complaint Type']==complaint]['Request_Closing_Minutes'])","5020797d":"data.keys()","61a0bbca":"data['Noise - Street\/Sidewalk'].hist(bins=120)","78d33ad4":"data['Blocked Driveway'].hist(bins=120)","c95a8a5c":"data['Illegal Parking'].hist(bins=120)","726318f2":"data['Derelict Vehicle'].hist(bins=120)","7440b87f":"data['Noise - Commercial'].hist(bins=120)\n ","0eaf27ca":"for complaint in data.keys():\n    print(data[complaint].std())","64905e82":"[ complaint for complaint in data.keys() ]","2510f4a5":"data['Noise - Street\/Sidewalk'].value_counts().head().plot(kind='box',figsize=(5,5));","1a545976":"# import f_oneway from scipy.stats library\nfrom scipy.stats import f_oneway\n\nstat, p = f_oneway(data['Noise - Street\/Sidewalk'],data['Blocked Driveway'],data['Illegal Parking'],data['Derelict Vehicle'],\n                   data['Noise - Commercial'])","477dbdd1":"NYC 311's mission is to provide the public with quick and easy access to all New York City government services and information while offering the best customer service. Each day, NYC311 receives thousands of requests related to several hundred types of non-emergency services, including noise complaints, plumbing issues, and illegally parked cars. These requests are received by NYC311 and forwarded to the relevant agencies such as the police, buildings, or transportation. The agency responds to the request, addresses it, and then closes it.\n\nProblem Objective :\n\nPerform a service request data analysis of New York City 311 calls. You will focus on the data wrangling techniques to understand the pattern in the data and also visualize the major complaint types.\nDomain: Customer Service\n\nAnalysis Tasks to be performed:\n\n(Perform a service request data analysis of New York City 311 calls) \n\nImport a 311 NYC service request.\nRead or convert the columns \u2018Created Date\u2019 and Closed Date\u2019 to datetime datatype and create a new column \u2018Request_Closing_Time\u2019 as the time elapsed between request creation and request closing. (Hint: Explore the package\/module datetime)\nProvide major insights\/patterns that you can offer in a visual format (graphs or tables); at least 4 major conclusions that you can come up with after generic data mining.\nOrder the complaint types based on the average \u2018Request_Closing_Time\u2019, grouping them for different locations.\nPerform a statistical test for the following:\nPlease note: For the below statements you need to state the Null and Alternate and then provide a statistical test to accept or reject the Null Hypothesis along with the corresponding \u2018p-value\u2019.\n\nWhether the average response time across complaint types is similar or not (overall)\nAre the type of complaint or service requested and location related?","bc76941f":"***Can any one please help me with the last cell block"}}