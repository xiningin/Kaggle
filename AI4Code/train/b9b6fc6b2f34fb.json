{"cell_type":{"78a826ed":"code","935a8df3":"code","544d2370":"code","4fc7ca69":"code","6e26e138":"code","275834a7":"code","446c54c1":"code","8a812297":"code","72d81d20":"code","1df2cdbb":"code","471e82dc":"code","8277c569":"code","e5d5d767":"code","6d34b3a2":"code","072ee429":"markdown","7eb44e63":"markdown","6d3c3ffc":"markdown","285e2b77":"markdown","efbc55b0":"markdown"},"source":{"78a826ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","935a8df3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","544d2370":"data.corr() # to see if a variables is affected by the other variables","4fc7ca69":"# correlation map\nf,ax = plt.subplots(figsize = (20,20))\nsns.heatmap(data.corr(), annot = True, linewidths = .5, fmt = '.2f', ax = ax)\nplt.show()","6e26e138":"data.columns ","275834a7":"data.head() # gives us the first five if used with empty parantheses","446c54c1":"# line plot of the variables Solids and Sulfates\ndata.Solids.plot(kind = 'line', color = 'pink', alpha = 1, label = 'Solids', linestyle = 'dotted', linewidth = 1, grid = True)\ndata.Sulfate.plot(kind = 'line', color = 'yellow', alpha = 1, label = 'Sulfate', linestyle = 'dashed', linewidth = 1, grid = True)\nplt.legend('upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Relationship Between the Solids and Sulfate in Water')\n","8a812297":"# scatter plot of Hardness and ph\ndata.plot(kind = 'scatter', color = 'lime', x = 'ph', y = 'Hardness', alpha = .2)\nplt.title('The Relationship Between Water pH and Hardness')\nplt.show()","72d81d20":"# histogram\ndata.Turbidity.plot(kind = 'hist', color = 'blue', alpha = .7, figsize = (6,6), bins = 10)\nplt.show()","1df2cdbb":"# Filtering pandas data frame\nx = data['ph'] > 12\ndata[x]","471e82dc":"# Filtering with pandas Logical_and\ndata[np.logical_and(data['ph'] > 12, data['Conductivity'] < 450)]","8277c569":"# Filtering using &\ndata[(data['ph']>12) & (data['Conductivity']<450)]","e5d5d767":"# for loop\ndict = {'bmth': 'shadow moses', 'as i lay dying': 'forsaken'}\ni = 0\nfor i in dict:\n    print([i])\nprint('the first 2 lines of the data have been printed')\n\n# to obtain the key and its value at the same time\nfor key, value in dict.items():\n    print(key,' : ', value)","6d34b3a2":"# while loop\ni = 0\nwhile i < 4:\n    print(i)\n    i = i + 1\n    ","072ee429":"Both the line plot and the correlation shows that Solids and Sulfate are irrelevant.","7eb44e63":"**Loops**","6d3c3ffc":"As seen above, none of the variables are significantly correlated with each other.","285e2b77":"**Pandas**","efbc55b0":"**Data Visualization With Matplotlib**"}}