{"cell_type":{"0d6ed89d":"code","1749c026":"code","be9cb114":"code","66c56e22":"code","bdf97901":"code","d8e1b2ab":"code","20433782":"code","5f5526d1":"code","32200eda":"code","b3d8331d":"code","b900c06f":"code","2795b2b7":"code","de524561":"code","5c9682b5":"code","95edbd21":"code","57a8b155":"code","f5543a50":"code","90d929e8":"code","75b79bc0":"code","e933e05d":"code","ac088369":"code","15af1a19":"code","c09fbe47":"markdown","9637cd90":"markdown","6b21e205":"markdown","671789eb":"markdown","fe9682fe":"markdown","72165177":"markdown","781a120b":"markdown","b121b146":"markdown","d3d7cbbc":"markdown","86142dba":"markdown","9a3ee231":"markdown","6feeb988":"markdown","80e63f81":"markdown","95c6a17b":"markdown"},"source":{"0d6ed89d":"import tensorflow as tf","1749c026":"# We may execute Tensorflow 1 methods by using the tf.compat.v1 namespace \n# In eager execution mode. This means that any computation that you perform using tensors are executed right away\n\ntf.compat.v1.executing_eagerly()","be9cb114":"# We instantiate two tensors - a and b\na = tf.constant(5, name = \"a\")\nb = tf.constant(7, name = \"b\")\n\n# We add the two tensors together using the tf.add operation\n# The result is a new tensor 'c', that holds the sum of the two tensors\nc = tf.add(a, b, name = \"sum\")","66c56e22":"# instantiating a session which is available in \n# tf.compat.v1.session and I invoke session.run on the result c\nsess = tf.compat.v1.Session()\n\nsess.run(c)\n# In eager execution mode, computations are performed right away. \n# The session did not have a static computation graph to execute\n# Which results in a RuntimeError","bdf97901":"# working in eager execution mode, which is the \n# default for Tensorflow 2, c directly holds the result of the computation\nc","d8e1b2ab":"# We use tf.compat.v1 and disable eager execution\n# to get rid of the eager execution functionality\ntf.compat.v1.disable_eager_execution()\n\n# Having disabled eager execution, tf.compat.executing_eagerly now returns false\ntf.compat.v1.executing_eagerly()","20433782":"#reset default graph before getting started\ntf.compat.v1.reset_default_graph()","5f5526d1":"a = tf.constant(5, name = \"a\")\nb = tf.constant(7, name = \"b\")\n\nc = tf.add(a, b, name = \"sum\")","32200eda":"c","b3d8331d":"# Instantiate a session and call a run on c, this will execute the computation graph and produce a result, c is equal to 12. \n# This is how Tensorflow worked by default in v1\nsess = tf.compat.v1.Session()\n\nsess.run(c)","b900c06f":"d = tf.multiply(a, b, name = \"product\")\n\n# operations that you performed on tensors were added\n# to the default graph, which was then executed when you called session.run\nsess.run(d)","2795b2b7":"sess.close()","de524561":"\nm = tf.Variable([4.0, 5.0, 6.0], tf.float32, name='m')\n\nc = tf.Variable([1.0, 1.0, 1.0], tf.float32, name='c')","5c9682b5":"# look at the variable m, even though we initialized it with a tensor, \n# that value is not available until the computation graph is executed. \n\nm","95edbd21":"# The same is true of the variable c \nc","57a8b155":"\nx = tf.compat.v1.placeholder(tf.float32, shape=[3], name='x')\n\nx","f5543a50":"y = m * x + c\n\ny","90d929e8":"init = tf.compat.v1.global_variables_initializer()","75b79bc0":"!rm -rf .\/logs\/ ","e933e05d":"with tf.compat.v1.Session() as sess:\n    \n    sess.run(init)\n\n    y_output = sess.run(y, feed_dict={x: [100.0, 100.0, 100.0]})\n\n    print (\"Final result: mx + c = \", y_output)\n    \n    writer = tf.compat.v1.summary.FileWriter('.\/logs', sess.graph)\n    writer.close()","ac088369":"%load_ext tensorboard","15af1a19":"%tensorboard --logdir=\".\/logs\" --port 6060","c09fbe47":"### NOTE:\n\n- Do not explore the graph within Jupyter\n- go to localhost:6060 in browser and show it again (explore it in the browser there)\n- click on each node in the graph\n- click on the tag drop-down on the left, only the default graph is present\n- click on the trace inputs slider, then once again click on the different nodes. You will see specific paths highlighted","9637cd90":"Here we see a static computation graph computing. y is equal to mx + c. Every operation that we have specified is a node in this graph, including the initialization of c and m.\n\nOn the left, scroll down and turn on Trace inputs, you'll be able to trace the exact path within a computation graph that leads to a particular node. Let's say you select the multiplication node. You'll see what inputs and what paths lead to this particular node's computation","6b21e205":"### Building a graph in v1.compat mode","671789eb":"### Disabling eager_execution","fe9682fe":"#### Using Tensorboard","72165177":"using session and run() function will throw error now as eager execution is enabled by default","781a120b":"When we look at c in this v1 compat mode, you'll find that the result of 12, that c is supposed to hold hasn't actually been computed yet","b121b146":"In the Tensorflow v1 mode of execution using static computation graphs, all operations will be added to the default graph. Rather than executed immediately as in Tensorflow v2 mode.","d3d7cbbc":"The computation of y depends on some input that we haven't yet specified, the values for the placeholder x, and that's exactly why we use the feed dictionary - feed_dict\n\nWe feed in the value for x at runtime when we execute the computation graph. X is a one\u2011dimensional tensor with 3 elements all equal to 100\n\nThe field dictionary in the session.run invocation is used to specify the values for your placeholder inputs. Session.run will execute the computation graph that gives us the result of y which we place in y_output and we print that out to screen\n\nfinal result mx + c is equal to 401, 501, 601","86142dba":"After this point restart the jupyter to enable eager execution again","9a3ee231":"Need to get rid of the logs directory under our current working directory because we're going to write out some events in order to view our static computation graph in TensorBoard","6feeb988":"We visualize our static computation graph using TensorBoard. run TensorBoard from within Jupyter notebook by loading the TensorBoard extension and then invoking TensorBoard.\n\nSpecify the log directory and the port where you want TensorBoard to run. The TensorBoard visualization tool will be show up embedded within your Jupyter notebook","80e63f81":"Tensorflow v1, trainable parameters were variables\nand inputs that you specified to a computation graph were represented using placeholders.\nActual data is fed in at runtime when we run the computation graph","95c6a17b":"### Using variables, placeholders, and the feed dictionary"}}