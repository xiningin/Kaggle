{"cell_type":{"a7fb8acf":"code","bc4f0406":"code","5a30b982":"code","95f14638":"code","3fa9e103":"code","8094fa71":"code","2255b730":"code","bdce57bc":"code","5f6a21c2":"code","baac62b1":"code","cbd47997":"code","ac3831d8":"code","b13e41ec":"code","4b2480f6":"code","288b2cfd":"markdown","0c7b09cc":"markdown","07b53867":"markdown","4d72f755":"markdown"},"source":{"a7fb8acf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc4f0406":"dataset = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","5a30b982":"dataset.head()","95f14638":"X = dataset.iloc[:,[2,5]].values\nY = dataset.iloc[:,[1]].values","3fa9e103":"X","8094fa71":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values= np.nan,strategy='mean')\nimputer.fit(X)\nX = imputer.transform(X)","2255b730":"X","bdce57bc":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2, random_state = 1)","5f6a21c2":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","baac62b1":"# from sklearn.linear_model import LogisticRegression\n# # building the model\n# classifier = LogisticRegression()\n# # training the model\n# classifier.fit(X_train,Y_train.ravel())\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train.ravel())","cbd47997":"classifier.predict(X_test)","ac3831d8":"y_predicted = classifier.predict(X_test)\n# print(np.concatenate((y_predicted.reshape(len(y_predicted),1),Y_test.reshape(len(Y_test),1)),1))","b13e41ec":"from sklearn.metrics import confusion_matrix\nconf_mat = confusion_matrix(Y_test,y_predicted)\nprint(conf_mat)","4b2480f6":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(Y_test,y_predicted)\nprint(accuracy)","288b2cfd":"# Splitting the dataset into training set and test set","0c7b09cc":"# Feature Scaling","07b53867":"# Training on Random Forest Classifier","4d72f755":"# removing the missing values"}}