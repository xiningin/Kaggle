{"cell_type":{"6f1e71fa":"code","262cf4c5":"code","a44654f7":"code","dccff180":"code","1d2e73c5":"code","29f493bc":"code","37886e70":"code","6d319052":"code","100c2eea":"code","ff0ffcd3":"code","60094496":"code","34179b90":"code","c0e0885a":"code","17a3d104":"markdown","6cc14164":"markdown","99feee5c":"markdown","8bbafd96":"markdown","1d4833b3":"markdown","3328ca03":"markdown","f27b9466":"markdown","97ba5131":"markdown","e6ed2a2a":"markdown","4bd7d23d":"markdown","643f5000":"markdown","21574214":"markdown"},"source":{"6f1e71fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\"\"\"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\"\"\"\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\n\n# Import data\ntrain_csv = pd.read_csv(\"..\/input\/birdsong-recognition\/train.csv\")\ntrain_csv.info()","262cf4c5":"print(\"There are {:,} unique bird species in the dataset.\".format(len(train_csv['species'].unique())))","a44654f7":"print(\"There are {:,} audio files in the dataset.\".format(len(train_csv['filename'].unique())))","dccff180":"# Plot the counts of first 20 bird species sorted by quantity\ntrain_csv['species'].value_counts().head(20).plot.bar()","1d2e73c5":"# Plot the counts of first 20 bird species sorted alphabetically\ntrain_csv['species'].value_counts().sort_index(ascending=True).head(20).plot.bar()","29f493bc":"top_10 = list(train_csv['elevation'].value_counts().head(10).reset_index()['index'])\ndata = train_csv[train_csv['elevation'].isin(top_10)]\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(data['elevation'], palette=\"hls\", order = data['elevation'].value_counts().index)\n\nplt.title(\"Top 10 Elevation Types\", fontsize=16)","37886e70":"top_10 = list(train_csv['country'].value_counts().head(10).reset_index()['index'])\ndata = train_csv[train_csv['country'].isin(top_10)]\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(data['country'], palette=\"hls\", order = data['country'].value_counts().index)\n\nplt.title(\"Top 10 Countries with bird recordings\", fontsize=16)","6d319052":"def get_year(date):\n    return date.split('-')[0]\n\ntrain_csv['year'] = train_csv['date'].apply(get_year)\n\ntop_25 = list(train_csv['year'].value_counts().head(25).reset_index()['index'])\ndata = train_csv[train_csv['year'].isin(top_25)]\n\nplt.figure(figsize=(16, 6))\nax = sns.countplot(data['year'], palette=\"hls\")","100c2eea":"train_csv['bird_seen'].fillna('Not Defined',inplace=True)\nlabels = train_csv['bird_seen'].value_counts().index\nvalues = train_csv['bird_seen'].value_counts().values\ncolors=['#3795bf','#bfbfbf', '#cf5353']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial',marker=dict(colors=colors))])\nfig.show()","ff0ffcd3":"plt.figure(figsize=(16, 6))\nax = sns.countplot(data['number_of_notes'], palette=\"hls\", order = data['number_of_notes'].value_counts().index)\nplt.xlabel(\"Number of notes\", fontsize=14)","60094496":"train_csv['playback_used'].fillna('Not Defined',inplace=True)\nlabels = train_csv['playback_used'].value_counts().index\nvalues = train_csv['playback_used'].value_counts().values\ncolors=['#3795bf','#bfbfbf', '#cf5353']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial',marker=dict(colors=colors))])\nfig.show()","34179b90":"print(train_csv['duration'].describe())","c0e0885a":"train_csv['channels'].fillna('Not Defined',inplace=True)\nlabels = train_csv['channels'].value_counts().index\nvalues = train_csv['channels'].value_counts().values\ncolors=['#3795bf','#bfbfbf', '#cf5353']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial',marker=dict(colors=colors))])\nfig.show()","17a3d104":"Reference:<br\/>\nhttps:\/\/towardsdatascience.com\/15-data-exploration-techniques-to-go-from-data-to-insights-93f66e6805df <br\/>\nhttps:\/\/www.kaggle.com\/andradaolteanu\/birdcall-recognition-eda-and-audio-fe <br\/>\nhttps:\/\/www.kaggle.com\/parulpandey\/eda-and-audio-processing-with-python","6cc14164":"# 6. Dates of recording","99feee5c":"# 11. Channels","8bbafd96":"# 7. Bird seen","1d4833b3":"# 1. Number of bird species","3328ca03":"# 5. Countries","f27b9466":"# 8. Number of notes","97ba5131":"# 10. Duration","e6ed2a2a":"# 2. Number of audio files","4bd7d23d":"# 4. Elevation","643f5000":"# 9. Playback Used","21574214":"# 3. Number of individuals for each species"}}