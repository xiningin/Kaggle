{"cell_type":{"a38dfbe8":"code","457d5def":"code","749a1d33":"code","fcf5dd05":"code","4a73a44e":"code","aa3dccca":"code","c92fd36b":"code","c1fa63f8":"code","7ad99aac":"code","9f7df20e":"code","059ce5ea":"code","21408abf":"code","c2b6f382":"code","61b4677c":"code","823a9490":"code","46f11a42":"code","bf50787a":"code","5a350967":"code","5b2a912f":"code","f1f4a36e":"markdown","16fa3b77":"markdown","c53d37df":"markdown","e8ac7d04":"markdown","569fbb2b":"markdown","d74f2827":"markdown","ecd84a4f":"markdown","9e61e2f5":"markdown","baed01de":"markdown","94f171b5":"markdown","60a069e7":"markdown","4c33d337":"markdown","a7d03959":"markdown"},"source":{"a38dfbe8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n","457d5def":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","749a1d33":"data.head(5)","fcf5dd05":"data.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = '-') #alpha demek saydaml\u0131k \ndata.Attack.plot(kind = 'line', color = 'r', label = 'Attack', linewidth = 1 , alpha = 0.5, grid = True, linestyle = ':')\nplt.legend(loc='upper right')\nplt.xlabel('Number of Pokemons')\nplt.ylabel('Speed and Attack Levels')\nplt.title('Line Plot')\nplt.show()\n","4a73a44e":"data.plot(kind = 'scatter', x = 'Attack', y = 'Defense', alpha = 0.5, color = 'red')\nplt.title('Attack and Defense Scatter Plot')\nplt.show()","aa3dccca":"plt.scatter(data.Attack,data.Defense, color = 'red', alpha = 0.5)\nplt.show()","c92fd36b":"data.Speed.plot(kind = 'hist', bins = 50, figsize = (15,15)) #bins is number of bar in figure\nplt.xlabel('The Values of Speed')\nplt.show()","c1fa63f8":"data.Speed.plot(kind = 'hist', bins = 50, figsize = (15,15)) #bins is number of bar in figure\nplt.clf()\n","7ad99aac":"dictionary = {'spain':'madrid', 'usa':'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","9f7df20e":"dictionary['spain'] = \"Barcelona\"\nprint(dictionary)\ndictionary['france'] = \"paris\"\nprint(dictionary)\ndel dictionary['spain']\nprint(dictionary)\nprint('france' in dictionary)\ndictionary.clear()\nprint(dictionary)","059ce5ea":"del dictionary\nprint(dictionary)","21408abf":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')')","c2b6f382":"series = data['Defense']\nprint(type(series))\ndata_frame = data[['Defense']]\nprint(type(data_frame))","61b4677c":"print(2 == 3)\nprint(True and False)\nprint(True or False)","823a9490":"x = data['Defense'] > 200\ndata[x]","46f11a42":"data[np.logical_and(data['Defense']>200, data['Attack']>100)]","bf50787a":"data[(data['Defense']>200) & (data['Attack']>100)]","5a350967":"i = 0\nwhile i != 5:\n    print(\"i = \", i)\n    i += 1\n\nprint(i, \", 5e e\u015fittir.\")","5b2a912f":" lis = [1,2,3,4,5]\n\nfor i in lis:\n    print(i)\nprint('')\n\ndictionary = {'spain':'madrid','france':'paris'}\nfor key, value in dictionary.items():\n    print(key, \" : \", value)\nprint('')\n\nfor index, value  in data[['Attack']][0:1].iterrows():\n    print(index, \" : \", value)\n","f1f4a36e":"# **PANDAS**\n\nDosyalar\u0131 csv format\u0131nda al\u0131yoruz\n\ncsv = comma - seperated values\n\npandas iki \u015fekilkde kullan\u0131l\u0131r\n1. series\n2. data_frame","16fa3b77":"**Clear Methodu Kullan\u0131m\u0131**\n\nYukar\u0131daki kodun ayn\u0131s\u0131n\u0131 kopyal\u0131yorum ve en sonuna clf komutumu uyguluyorum.","c53d37df":"# **While and For Loops**","e8ac7d04":"Yukar\u0131daki i\u015flenmin ayn\u0131s\u0131n\u0131 a\u015fa\u011f\u0131daki gibi de yapabiliriz. Gene logic ve numpy kullan\u0131lmam\u0131\u015f hali","569fbb2b":"# Veri Bilimi Notlar\u0131 (T\u00fcrk\u00e7e)\n\nBurada genel olarak veri bilimiyle ilgili notlar\u0131m ve \u00f6rneklerim bulunmaktad\u0131r. Piyasadaki eksik bilgilerden ve yapanc\u0131 bilgilerden \u00f6t\u00fcr\u00fc hepsini tek bir seferde bulabilece\u011finiz notlardan olu\u015fmaktad\u0131r. Umar\u0131m i\u015finize yarar.","d74f2827":"# **Scatter Plot Kullan\u0131m\u0131**\n\nBununlar \u00e7e\u015fitli \u015feyleri k\u0131yaslayaca\u011f\u0131z korelasyon da denilebilir yani correlation. ","ecd84a4f":"E\u011fer dictionary i silmek istiyorsak da \u015fu kodu yazmal\u0131y\u0131z ve print ile kullan\u0131rsak bize hata verir","9e61e2f5":"# Line Plot\n\nG\u00f6r\u00fcld\u00fc\u011f\u00fc gibi burada \u00e7izgisel bir grafik elde ettik ve burada pokemon say\u0131lar\u0131n\u0131 zaman olarak da d\u00fc\u015f\u00fcnebiliriz. Zamana g\u00f6re cismin ald\u0131\u011f\u0131 de\u011ferler olabilir burada kullanabiliriz.","baed01de":"G\u00f6r\u00fcld\u00fc\u011f\u00fc gibi herhangi bir grafik \u00e7\u0131kt\u0131s\u0131 vermedi.\n\n**Dicitonary Kullan\u0131m\u0131**\n\n\n***dictionary = {'spain':'madrid', 'usa':'vegas'} ***\n\ngibi array lerden \u00e7ok daha h\u0131zl\u0131lar ondan kullan\u0131m olarak bunlar\u0131 tercih ediyoruz. Deeplearning de bunun \u00e7ok kullanaca\u011f\u0131z.\n","94f171b5":"# **Historgram Plot**\n\nad\u0131 \u00fcst\u00fcnde histogram y\u00f6ntemiyle g\u00f6steriyor","60a069e7":"\u015eimdi filtring e ge\u00e7elim,","4c33d337":"Pandas a devam etmeden \u00f6nce **logic, control flow, filtering** kavramlar\u0131n\u0131 \u00f6\u011frnememiz gerek\n    \n*     comprasion operator : ==, <=, >=, <, >\n*     Boolean operators : and, or,not\n*     filtreing pandas","a7d03959":"**Farkl\u0131 bir bi\u00e7imde scatter plot kullan\u0131m\u0131**\n\nBu a\u015fa\u011f\u0131daki \u015fekilde de yukar\u0131dakinin ayn\u0131s\u0131n\u0131 yapabiliyoruz hi\u00e7 bir \u015fey de\u011fi\u015fmiyor. "}}