{"cell_type":{"18000405":"code","c2ff9be4":"code","9b147730":"code","2334a689":"code","9975bbec":"code","39085e9e":"code","f717e047":"code","f2f9b1ff":"code","acac8cf9":"code","58478aeb":"code","42f56ad2":"code","f447db59":"code","9cb989be":"code","b564fbcb":"code","bfabb476":"code","312ea46e":"code","2a97ce7d":"code","efc0bcd4":"code","572e7b17":"code","1f69e0fc":"code","ef3ca321":"code","a2b659c1":"code","9c7289c5":"code","157c3994":"code","766bb626":"code","88332f96":"code","e1edda00":"code","f36f0178":"code","34337f3e":"code","c1896b01":"code","0c175812":"code","d9b93144":"code","c95fb2ee":"markdown","9170b434":"markdown","f6899226":"markdown","c3083be5":"markdown","045fe12e":"markdown","78f89a06":"markdown","f8ca81b1":"markdown","3b885230":"markdown","2a13aebd":"markdown"},"source":{"18000405":"import pandas as pd\n\nraw_train = pd.read_csv(\"..\/input\/kagglecamp2022\/train.csv\")","c2ff9be4":"raw_train","9b147730":"category_cols = []\ncolunq_dict = dict()\nfor col in raw_train.columns:\n    colunq_dict[col] = len(raw_train[col].unique())\n    \n    if 'Cover_Type' == col:\n        continue\n    \n    if colunq_dict[col] < 40:\n        category_cols.append(col)\ncolunq_dict","2334a689":"category_cols","9975bbec":"category_cols","39085e9e":"raw_train.isnull().sum(axis=1).describe()","f717e047":"raw_train.isnull().any(axis=1).sum(), round(raw_train.isnull().any(axis=1).sum() \/ raw_train.shape[0],2)","f2f9b1ff":"distance_cols = []\nfor col in raw_train.columns:\n    if \"Dis\" in col:\n        print(col)\n        distance_cols.append(col)","acac8cf9":"import matplotlib.pyplot as plt\n# for col in distance_cols:\n#     print(col)\n#     raw_train[col].hist()\n#     plt.show()","58478aeb":"raw_train.Cover_Type.value_counts()","42f56ad2":"raw_train.Cover_Type.hist()","f447db59":"raw_corr = raw_train.corr()\nfig = plt.figure(figsize=(20,6))\nimport numpy as np\nmask = np.triu(raw_corr)\nimport seaborn as sns\nsns.heatmap(raw_corr, \n               annot = True,      # \uc2e4\uc81c \uac12 \ud654\uba74\uc5d0 \ub098\ud0c0\ub0b4\uae30\n               cmap = 'RdYlBu_r',  # Red, Yellow, Blue \uc0c9\uc0c1\uc73c\ub85c \ud45c\uc2dc\n               vmin = -1, vmax = 1, #\uceec\ub7ec\ucc28\ud2b8 -1 ~ 1 \ubc94\uc704\ub85c \ud45c\uc2dc\n               mask=mask\n              )\nplt.show()","9cb989be":"category_cols = []\ncolunq_dict = dict()\nfor col in raw_train.columns:\n    colunq_dict[col] = len(raw_train[col].unique())\n    \n    if 'Cover_Type' == col:\n        continue\n    \n    if colunq_dict[col] < 40:\n        category_cols.append(col)\ncolunq_dict\n\n\n\nfrom sklearn.preprocessing import OneHotEncoder\nohe_dict = dict()\nohe_df = raw_train.copy()\nfor col in category_cols:\n    ohe = OneHotEncoder()\n    df = ohe.fit_transform(raw_train[[col]]).toarray().astype(int)\n    df = pd.DataFrame(df, columns=[str(col)+\"_\" + str(value) for value in ohe.categories_[0]])\n    ohe_df = ohe_df.join(df)\n    ohe_df= ohe_df.drop(columns = col)\n    \n    ohe_dict[col] = ohe","b564fbcb":"test_df = pd.read_csv(\"..\/input\/kagglecamp2022\/test.csv\")","bfabb476":"ohe_test = test_df.copy()\n\nfor col in category_cols:\n    df = ohe_dict[col].transform(test_df[[col]]).toarray().astype(int)\n    df = pd.DataFrame(df, columns=[str(col)+\"_\" + str(value) for value in ohe_dict[col].categories_[0]])\n    ohe_test = ohe_test.join(df)\n    ohe_test.drop(columns = col, inplace=True)","312ea46e":"from sklearn.model_selection import train_test_split\nX_train_ids = ohe_df['id']\nohe_data = ohe_df.drop(columns = 'id')\n\ntarget = ohe_data[\"Cover_Type\"]\nInputData = ohe_data.drop(columns=\"Cover_Type\")","2a97ce7d":"test_ids = ohe_test['id']\nohe_X_test = ohe_test.drop(columns = 'id')\nohe_X_test.shape","efc0bcd4":"X_train, X_val, y_train, y_val = train_test_split(InputData, target,\n                                                  stratify = target,\n                                                  test_size = 0.2)","572e7b17":"X_train.shape","1f69e0fc":"from sklearn.metrics import accuracy_score, confusion_matrix,f1_score, make_scorer\n\nf1_scorer = make_scorer(f1_score,average='macro')","ef3ca321":"# from lightgbm import LGBMClassifier\n# lgbm = LGBMClassifier(n_estimators=100)\n# lgbm.fit(X_train,y_train,eval_set=(X_val,y_val),verbose=False)\n# pred = lgbm.predict(X_val)\n# lgbm_f1 = f1_score(y_val,pred,average='macro')\n# print(lgbm_f1)","a2b659c1":"# from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n# from lightgbm import LGBMClassifier\n# # params = {\n# #     'n_estimators': [100], \n# #     'max_depth': [30,50,70]\n# # }\n# # clf = RandomizedSearchCV(LGBMClassifier(), params, random_state=42, cv=3, n_iter=25, scoring=f1_scorer)\n\n# # clf.fit(X_train,y_train, eval_set=(X_val,y_val),verbose=False)\n\n# # print('\ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', clf.best_params_)\n# # print('\ucd5c\uace0 \uc608\uce21 \uc815\ud655\ub3c4: {:.4f}'.format(clf.best_score_))\n\n\n# # params = {'max_depth': [10, 15, 20],\n# #           'min_child_samples': [20, 40, 60],\n# #           'subsample': [0.8, 1]}\n\n# # lgbm = LGBMClassifier(n_estimators=200)\n# # grid = GridSearchCV(lgbm, param_grid=params)\n# # grid.fit(X_train, y_train, early_stopping_rounds=100, eval_metric='auc',\n# #          eval_set=[(X_val, y_val)])","9c7289c5":"# # lgbm_best_params = clf.best_params_\n# # best_lgbm = LGBMClassifier(**lgbm_best_params)\n# lgbm = LGBMClassifier(n_estimators=1000, num_leaves=50, subsample=0.8,\n#                       min_child_samples=60, max_depth=20)\n# lgbm.fit(X_train,y_train,eval_set=(X_val,y_val),verbose=False)","157c3994":"# pred = lgbm.predict(X_val)\n# lgbm_f1 = f1_score(y_val,pred,average='macro')\n# print(lgbm_f1)","766bb626":"# lgbm_pred = lgbm.predict(ohe_X_test)\n# lgbm_submission = pd.read_csv(\"..\/input\/kagglecamp2022\/sample_submission.csv\")\n# lgbm_submission['Cover_Type'] = lgbm_pred\n# lgbm_submission.to_csv(\"submission.csv\",index=False)","88332f96":"xgb_target = target-1\n\nX_train, X_val, y_train, y_val = train_test_split(InputData, xgb_target,\n                                                  stratify = xgb_target,\n                                                  test_size = 0.2)","e1edda00":"# from xgboost import XGBClassifier\n\n# xgb = XGBClassifier(**best_params_xgb)\n# xgb.fit(X_train,y_train)\n# pred = xgb.predict(X_test)\n# xgb_acc = f1_score(y_test, pred)\n# print(xgb_acc)","f36f0178":"# from xgboost import XGBClassifier\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.metrics import accuracy_score, confusion_matrix,f1_score, make_scorer\n\n# f1_scorer = make_scorer(f1_score,average='macro')\n\n\n# # \uac1d\uccb4 \uc0dd\uc131, \uc77c\ub2e8\uc740 \ud2b8\ub9ac 100\uac1c\ub9cc \ub9cc\ub4e6\n# xgb_model = XGBClassifier(random_state=42,tree_method='gpu_hist')\n\n# # \ud6c4\ubcf4 \ud30c\ub77c\ubbf8\ud130 \uc120\uc815\n# params = {'max_depth':[3,8],# 'min_child_weight':[1,3,6], 'colsample_bytree':[0.3,0.5,0.7],\n#           'objective' : ['multi:softmax'],'eval_metric' :['merror'],\n#           'colsample_bylevel' : [0.5,0.8], 'min_child_weight' : [3],'n_estimators' : [100],\n#           'gamma' : [0.2,0.6]}\n\n# # gridsearchcv \uac1d\uccb4 \uc815\ubcf4 \uc785\ub825(\uc5b4\ub5a4 \ubaa8\ub378, \ud30c\ub77c\ubbf8\ud130 \ud6c4\ubcf4, \uad50\ucc28\uac80\uc99d \uba87 \ubc88)\n# # gridcv = GridSearchCV(xgb_model, param_grid=params, cv=3,scoring=f1_scorer)\n\n# rancv = RandomizedSearchCV(xgb_model,param_distributions=params,\n#                   n_iter = 5,cv = 3,scoring = f1_scorer)\n\n\n# rancv.fit(X_train, y_train, early_stopping_rounds=30, eval_set=[(X_val, y_val)],verbose=False)\n# best_xgb = rancv.best_estimator_ ","34337f3e":"best_params_xgb = {'objective': 'multi:softmax', 'n_estimators': 100, 'min_child_weight': 3, 'max_depth': 8, 'gamma': 0.2, 'eval_metric': 'merror', 'colsample_bylevel': 0.8}\nbest_params_xgb['tree_method'] = 'gpu_hist'\nbest_params_xgb['random_state'] = 42\nbest_params_xgb['n_estimators'] = 500\nprint(best_params_xgb)","c1896b01":"test_ids = ohe_test['id']\nohe_test.drop(columns='id',inplace=True)","0c175812":"from xgboost import XGBClassifier\nxgb_model = XGBClassifier(**best_params_xgb)\nxgb_model.fit(X_train,y_train,verbose=False)","d9b93144":"submission = pd.read_csv(\"..\/input\/kagglecamp2022\/sample_submission.csv\")\nxgb_pred = xgb_model.predict(ohe_test) + 1\nsubmission['Cover_Type'] = xgb_pred\nsubmission.to_csv(\"submission.csv\",index=False)","c95fb2ee":"LGBMClassifier(max_depth=20, min_child_samples=60, n_estimators=1000,\n               num_leaves=50, subsample=0.8)","9170b434":"0.8734711984876256","f6899226":"- \ud589 \ub2e8\uc704 \ub370\uc774\ud130\uc758 null \uac12\uc758 \ud3c9\uade0 0.23 , \ud45c\uc900\ud3b8\ucc28 0.47\n\n- \uc81c 1,2,3 \uc0ac\ubd84\uc704\uc218\uac00 0\uc778 \uac83\uc73c\ub85c \ubcf4\uc544 \ub370\uc774\ud130\ub294 \ub300\ubd80\ubd84 \ub110\uac12\uc774 \uc5c6\uc74c\n- null\uc774 1\uac1c \uc774\uc0c1 \uc874\uc7ac\ud558\ub294 \ub370\uc774\ud130\ub294 \uc804\uccb4\uc758 21%","c3083be5":"# \ub370\uc774\ud130 \uc14b \ubd84\ub9ac","045fe12e":"{'objective': 'multi:softmax', 'n_estimators': 100, 'min_child_weight': 3, 'max_depth': 8, 'gamma': 0.2, 'eval_metric': 'merror', 'colsample_bylevel': 0.8}","78f89a06":"# LGBM Classifer \uc0ac\uc6a9","f8ca81b1":"- Vertical_Distance_To_Hydrology\uc5d0 \uc74c\uc218\uac00 \uc874\uc7ac\n- Horizontal_Distance_To_Roadways, Horizontal_Distance_To_Fire_Points, Horizontal_Distance_To_Hydrology\uc758 \ubd84\ud3ec \ud615\ud0dc \uc720\uc0ac","3b885230":"# Test data \uc804\ucc98\ub9ac (\uc6d0\ud56b \uc778\ucf54\ub529)","2a13aebd":"# \uc6d0\ud56b\uc778\ucf54\ub529"}}