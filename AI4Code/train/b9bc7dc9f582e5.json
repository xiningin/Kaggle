{"cell_type":{"9809ba20":"code","d8852b1e":"code","ac7a4aeb":"code","09cfbc83":"code","3fdff196":"code","8c48a3a6":"code","02640ce8":"code","af5a34c2":"code","fd3b26b1":"code","5baa3e55":"code","ffe2b653":"code","ec097ce6":"code","3396b3b8":"code","564befbc":"code","365cd3a5":"code","065b7b81":"code","230b529b":"code","d0f0949e":"code","662c2047":"code","7b9b72b5":"code","eb26778b":"code","92d013e9":"code","8365dae9":"code","ea4bc617":"code","b14c717b":"code","6e488a2d":"code","8a08ed6d":"code","2e61cf7d":"code","d522e552":"code","3b6181dc":"code","cd4bb8cd":"code","ce831b5d":"code","e93077ad":"code","8ac73307":"code","63b2e5b0":"code","4eba58e5":"code","a84c66ba":"code","419d4197":"code","8b187974":"code","d15bbef1":"code","44e4979f":"code","215f115b":"code","912dd993":"code","b3a49f31":"code","a9455227":"code","3ed3b1bd":"markdown","a560b7a3":"markdown","828b7d7e":"markdown","10ce51a4":"markdown","f160d0a4":"markdown","3f21478e":"markdown","90afe9ef":"markdown","7f029281":"markdown","c41e6ef2":"markdown","6f8d0706":"markdown","dbd93078":"markdown","a4aacf95":"markdown","584bbb00":"markdown","d39f9ce7":"markdown"},"source":{"9809ba20":"pip install sidetable","d8852b1e":"import pandas as pd\nimport sidetable","ac7a4aeb":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","09cfbc83":"train.head()","3fdff196":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()","8c48a3a6":"train.select_dtypes(\"O\").columns","02640ce8":"def cat_identifier(col):\n  return(\"{} = {}\".format(col.name, col.unique()))\n","af5a34c2":"for col in train.select_dtypes(\"O\").columns:\n  print(cat_identifier(train[col]))","fd3b26b1":"for col in train.select_dtypes(\"O\").columns:\n  train[col] = label_encoder.fit_transform(train[col].astype('str'))","5baa3e55":"missing_df = train.stb.missing()","ffe2b653":"missing_df","ec097ce6":"missing_df[missing_df['percent'] > 0]","3396b3b8":"corr_df = train.corrwith(train[\"SalePrice\"],method ='pearson').abs() * 100\ncorr_df[corr_df > 50]","564befbc":"remove_columns = list(corr_df[corr_df > 50].index)","365cd3a5":"missing_df[missing_df.percent > 0]","065b7b81":"remove_columns.remove('SalePrice')","230b529b":"remove_columns","d0f0949e":"train = train.drop(remove_columns, axis=1)","662c2047":"train.head()","7b9b72b5":"from sklearn.experimental import enable_iterative_imputer","eb26778b":"from sklearn.impute import IterativeImputer","92d013e9":"my_imputer = IterativeImputer()","8365dae9":"train_imputed = my_imputer.fit_transform(train.drop('SalePrice', axis=1))","ea4bc617":"train_imputed[1]","b14c717b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    train_imputed, train['SalePrice'], test_size=0.25, random_state=42\n)","6e488a2d":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","8a08ed6d":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\nrf_regressor = RandomForestRegressor(n_estimators = 100, random_state=42)","2e61cf7d":"rf_regressor.fit(X_train, y_train)","d522e552":"predict_rf = rf_regressor.predict(X_test)","3b6181dc":"rf_regressor.score(X_test, y_test)","cd4bb8cd":"import xgboost as xgb\n\nxgb_model = xgb.XGBRegressor(learning_rate=0.01,\n                            n_estimators=1000,\n                            max_depth = 10)\n\nxgb_model.fit(X_train,y_train)","ce831b5d":"xgb_predict = xgb_model.predict(X_test)","e93077ad":"xgb_model.score(X_test,y_test)","8ac73307":"from sklearn.model_selection import GridSearchCV\nparams = {\n 'max_depth': range (2, 10, 1),\n 'n_estimators': range(60, 220, 40),\n 'learning_rate': [0.1, 0.01, 0.05]\n}","63b2e5b0":"grid_search = GridSearchCV(estimator=xgb_model,\n                           param_grid=params,                          \n                           n_jobs=1,\n                           cv=2,\n                           verbose=True)\ngrid_search.fit(X_train,y_train)","4eba58e5":"predict_cv = grid_search.predict(X_test)","a84c66ba":"grid_search.score(X_test,y_test)","419d4197":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","8b187974":"test.head()","d15bbef1":"for col in test.select_dtypes(\"O\").columns:\n  test[col] = label_encoder.fit_transform(test[col].astype('str'))","44e4979f":"test = test.drop(remove_columns, axis=1)","215f115b":"test_imputed = my_imputer.fit_transform(test)","912dd993":"grid_predictions = grid_search.predict(test_imputed)","b3a49f31":"submission_csv = pd.DataFrame({'Id': test['Id'], 'SalePrice':grid_predictions})","a9455227":"submission_csv.to_csv(\"submission1.csv\", index=False)","3ed3b1bd":"# Train test Split","a560b7a3":"# Handling Categorical variables","828b7d7e":"# Predicting Test Data","10ce51a4":"All the text variables are categorical, hence we will transform them into numerical using Label Encoding.","f160d0a4":"# Importing Data","3f21478e":"**LotFrontage** has more than 17% null values but it affects the Target variable with 0.35 correlation score.So, we will keep this column and try to impute it.Also,columns having over 50% of **correlation** can introduce bias in dataset. Hence we will remove those.","90afe9ef":"# XGBoost","7f029281":"Our data has missing values at random and hence can be predicted using multiple imputaion. Univariate imputation might introduce bias as missing data has no pattern.","c41e6ef2":"Let's try to improve the performance of XGBoost using GridSearchCV by tuning the features with their best. Here, i will try GridSearchCV with minimal setting as kaggle kernal has limitaions. In local environment, one can tune various features.","6f8d0706":"# Random Forest Regressor","dbd93078":"# **Imputing Null Values**","a4aacf95":"# Gridsearch CV to improve performance","584bbb00":"Training data is combination of Continues and Categorical features.Random Forest regressor handles both types of data in regression.","d39f9ce7":"# Missing and Unnecessary Data"}}