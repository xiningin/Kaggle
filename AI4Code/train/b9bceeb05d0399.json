{"cell_type":{"53795d63":"code","b91aa9ef":"code","3f7a53e1":"code","c0355dea":"code","1e1eced4":"code","772f3ab4":"code","77993c6f":"code","11b43f59":"code","1f744a64":"code","303bccb6":"code","33912697":"code","41531482":"code","948b9ba9":"code","94fb3f49":"code","a20d4033":"code","17216b8d":"code","4e4d0668":"code","2bddf681":"code","869471d8":"code","47f96e29":"markdown","f65c7f99":"markdown","39121603":"markdown","6969e836":"markdown","411a6f84":"markdown","60e0efd9":"markdown","5544393e":"markdown","4ec597d3":"markdown","0d90e361":"markdown","f7fdc039":"markdown","1089c2e9":"markdown","2c87afe1":"markdown","da79cdb1":"markdown","fc2a2cfc":"markdown","3b5997cd":"markdown","20cce53f":"markdown","1ada6a57":"markdown","4f1ed7a9":"markdown","aba71519":"markdown"},"source":{"53795d63":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.datasets import mnist\nimport keras \nfrom keras.models import Sequential,model_from_json\nfrom keras.layers import Dense\nfrom keras.optimizers import RMSprop\nimport pylab as plt\nimport tensorflow as tf\nimport seaborn as sns\nimport datetime\n!rm -rf .\/logs\/\n%load_ext tensorboard\nfrom sklearn.datasets import fetch_openml\nimport cv2","b91aa9ef":"(x_train, y_train), (x_test, y_test) = mnist.load_data()","3f7a53e1":"mnist","c0355dea":"batch_size = 128\nnum_classes = 10\nepochs = 10","1e1eced4":"x_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')","772f3ab4":"x_train \/=255\nx_test \/=255","77993c6f":"print(x_train.shape[0],'train samples')\nprint(x_test.shape[0],'test samples')","11b43f59":"y_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)","1f744a64":"print(\"Label:\",y_test[10])\nplt.imshow(x_test[10].reshape(28,28), cmap='rainbow')\nplt.colorbar()\nplt.show()","303bccb6":"first_layer_size = 32\nmodel = Sequential()\nmodel.add(Dense(first_layer_size,activation='sigmoid',input_shape=(784,)))\nmodel.add(Dense(32,activation='sigmoid'))\nmodel.add(Dense(32, activation='sigmoid'))\nmodel.add(Dense(32,activation='sigmoid'))\nmodel.add(Dense(32, activation='sigmoid'))\nmodel.add(Dense(32,activation='sigmoid'))\nmodel.add(Dense(32, activation='sigmoid'))\n \nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()","33912697":"w =[]\nfor layer in model.layers:\n  weights= layer.get_weights()\n  w.append(weights)\n \nlayer1 = np.array(w[0][0])\nprint(\"Shape of First Layer\",layer1.shape)\nprint(\"Visualization of First Layer\")\nfig=plt.figure(figsize=(12,12))\ncolumns = 8\nrows = int(first_layer_size\/8)\nfor i in range(1, columns*rows +1):\n  fig.add_subplot(rows, columns, i)\n  plt.imshow(layer1[:,i-1].reshape(28,28),cmap='gray')\nplt.show()","41531482":"model.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","948b9ba9":"A=model.fit(x_train,y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1)","94fb3f49":"w =[]\nfor layer in model.layers:\n  weights= layer.get_weights()\n  w.append(weights)\n \nlayer1 = np.array(w[0][0])\nprint(\"Shape of First Layer\",layer1.shape)\nprint(\"Visualization of First Layer\")\nfig=plt.figure(figsize=(12,12))\ncolumns = 8\nrows = int(first_layer_size\/8)\nfor i in range(1, columns*rows +1):\n  fig.add_subplot(rows, columns, i)\n  plt.imshow(layer1[:,i-1].reshape(28,28),cmap='gray')\n  plt.copper()  \nplt.show()","a20d4033":"prediction = model.predict(x_test[10:11])\nprediction = prediction[0]\nprint('Prediction\\n',prediction)\nprint('\\nThresholded output\\n', (prediction>0.5)*1)","17216b8d":"plt.imshow(x_test[10].reshape(28,28),cmap='cool')\nplt.colorbar()\nplt.show()\nprint(y_test[10])","4e4d0668":"sum(prediction)","2bddf681":"log_dir = \"logs\/fit\/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nmodel.fit(x_test, \n          y_test,\n          epochs=50, \n          validation_data=(x_test, y_test), \n          callbacks=[tensorboard_callback])","869471d8":"%tensorboard --logdir logs\/fit","47f96e29":"**CHECK MACHINE IS PREDICT THE MODEL CORRECTLY OR WRONG,SCORE OF THE MODELS**","f65c7f99":"**CHECKING DATASET SHAPE**","39121603":"**SET 128 DATASETS AS A BATCHSIZE, NUM_CLASSES 10= 0 TO 9, EPOCHS 10**","6969e836":"**TRAINING MODEL AND FIT THE MODEL**","411a6f84":"**CREATING NEURAL NETWORK WITH 32 NODES, 1-INPUT LAYER IN 784, 6-HIDDEN LAYER, 1-OUTPUT LAYER**","60e0efd9":"**PLOT 10th DATA IN DATASET**","5544393e":"**CONVERT INTO BINARY CLASS \"BY USING utils.to_categorial\"**","4ec597d3":"**IMPORT ALL PACKAGES**","0d90e361":"**IMPORT DATASETS AND SPLIT FOR TRAINING,TESTING**","f7fdc039":"**CHECKING FIRST HIDDEN LAYER NODES AFTER TRAINING MODEL**","1089c2e9":"**ADD LOSS,OPTIMIZER FUNCTON AND ACCURACY METRICS**","2c87afe1":"**DATASET CHECK**","da79cdb1":"**CHECKING FIRST HIDDEN LAYER NODES BEFORE TRAINING MODEL**","fc2a2cfc":"**VISUALIZE ACCURACY AND LOSS IN TENSORBOARD**","3b5997cd":"**DIVIDED BY 255 - (BECAUSE EVERY IMAGE HAS 0 TO 255 VALUES OF PIXELS)**","20cce53f":"**CHECT THE MODEL BY PLOT**","1ada6a57":"**VALIDATING TESTING MODELS**","4f1ed7a9":"**RESHAPE DATA AND CONVERT INTO FLOAT**","aba71519":"**SUM PREDICTION**"}}