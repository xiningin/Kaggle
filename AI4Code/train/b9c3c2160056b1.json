{"cell_type":{"c3b28b51":"code","13d4b7d7":"code","924b9a60":"code","76863bc5":"code","2c3c1654":"code","f4c09d86":"code","5e3aed98":"code","cfa4549f":"code","97bb75f3":"code","2e1c6467":"code","b1d2f3d9":"code","61822c50":"code","796088a7":"code","16e3f23d":"code","b5719f23":"code","7efafa9a":"code","0ee67919":"code","0c1284e8":"code","bf183882":"code","507ed938":"code","a560bd3e":"code","d043c4b6":"code","b95695d0":"code","e055a5f6":"code","9e1b1446":"code","a153b6c6":"code","1363eb3c":"code","36062fe2":"code","e558d34f":"code","62aa4330":"code","16875ddc":"code","63b42c4c":"code","a0cfe7ea":"code","551cec4e":"code","cf6a9cdb":"code","aa31ae2a":"code","4c6724f5":"code","5932a66a":"code","21f9d7d1":"code","2900436b":"code","bbaf2498":"code","b7771919":"code","d0f944d9":"code","45050f15":"code","f557be10":"code","4f090ed4":"code","e2f3930c":"code","633df60f":"code","0bbbdccf":"markdown","e6ee04d2":"markdown","d6d7b7fd":"markdown","93a6d73a":"markdown","258a803f":"markdown","4a27fbf7":"markdown","1ea91190":"markdown","dd9c9e9a":"markdown","e57eccd7":"markdown","e8e2114a":"markdown","093ae594":"markdown","071bdd2c":"markdown","120f0072":"markdown","e9deb8c2":"markdown","788cb54d":"markdown","d7a7ab60":"markdown","8c229222":"markdown","722575c6":"markdown","49f001fa":"markdown","f725840a":"markdown","80732b77":"markdown","0c193de0":"markdown","6f432d05":"markdown","e87080c4":"markdown","729495bc":"markdown","abe96f47":"markdown","aaa642e6":"markdown","e3823ac1":"markdown","072fa279":"markdown","52844dcf":"markdown","0d9da4cc":"markdown","43adf032":"markdown","ad204485":"markdown","3d2ba3c3":"markdown","e368beb8":"markdown","fe7679b1":"markdown","3a2a8498":"markdown","59d141f0":"markdown","2ebd36ab":"markdown","d1c3b4ff":"markdown","7e7f52c9":"markdown","c50569a2":"markdown","3cdffea4":"markdown","b52dd335":"markdown","48be9d99":"markdown","ff2cc569":"markdown"},"source":{"c3b28b51":"#Import Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os #operating system dependent modules of Python\nimport matplotlib.pyplot as plt #visualization\nimport seaborn as sns #visualization\n%matplotlib inline\nimport itertools\nimport plotly.offline as py#visualization\npy.init_notebook_mode(connected=True)#visualization\nimport plotly.graph_objs as go#visualization\nimport plotly.tools as tls#visualization\nimport plotly.figure_factory as ff#visualization\nimport warnings\nwarnings.filterwarnings(\"ignore\")","13d4b7d7":"#selecting 5 million rows\nnyc_data  = pd.read_csv(r\"..\/input\/train.csv\",nrows = 5000000)\nnyc_data.head()","924b9a60":"#replace 0's in coordinates with null values\ncoord = ['pickup_longitude','pickup_latitude', \n         'dropoff_longitude', 'dropoff_latitude']\n\nfor i in coord :\n    nyc_data[i] = nyc_data[i].replace(0,np.nan)\n    nyc_data    = nyc_data[nyc_data[i].notnull()]\n\n#Date manipulation\n#conver to date format\nnyc_data[\"pickup_datetime\"] = nyc_data[\"pickup_datetime\"].str.replace(\" UTC\",\"\")\nnyc_data[\"pickup_datetime\"] = pd.to_datetime(nyc_data[\"pickup_datetime\"],\n                                             format=\"%Y-%m-%d %H:%M:%S\")\n#extract year\nnyc_data[\"year\"]  = pd.DatetimeIndex(nyc_data[\"pickup_datetime\"]).year\n#extract month\nnyc_data[\"month\"] = pd.DatetimeIndex(nyc_data[\"pickup_datetime\"]).month\nnyc_data[\"month_name\"] = nyc_data[\"month\"].map({1:\"JAN\",2:\"FEB\",3:\"MAR\",\n                                                4:\"APR\",5:\"MAY\",6:\"JUN\",\n                                                7:\"JUL\",8:\"AUG\",9:\"SEP\",\n                                                10:\"OCT\",11:\"NOV\",12:\"DEC\"\n                                               })\n#merge year month\nnyc_data[\"month_year\"] = nyc_data[\"year\"].astype(str) + \" - \" + nyc_data[\"month_name\"]\n#extract week day \nnyc_data[\"week_day\"]   = nyc_data[\"pickup_datetime\"].dt.weekday_name\n#extract day \nnyc_data[\"day\"]        = nyc_data[\"pickup_datetime\"].dt.day\n#extract hour\nnyc_data[\"hour\"]        = nyc_data[\"pickup_datetime\"].dt.hour \nnyc_data = nyc_data.sort_values(by = \"pickup_datetime\",ascending = False)\n\n#Outlier treatment\n#drop observations with passengers greater than 6 and equals 0\nnyc_data = nyc_data[(nyc_data[\"passenger_count\"] > 0 ) &\n                    (nyc_data[\"passenger_count\"] < 7) ]\n\n#drop observations with fareamount  less than 0 and  greater than 99.99% percentile value.\nnyc_data = nyc_data[ (nyc_data[\"fare_amount\"] > 0 ) &\n                     (nyc_data[\"fare_amount\"]  <  \n                      nyc_data[\"fare_amount\"].quantile(.9999))]\n\n#drop outlier observations in data\ncoords = ['pickup_longitude','pickup_latitude', \n          'dropoff_longitude', 'dropoff_latitude']\nfor i in coord  : \n    nyc_data = nyc_data[(nyc_data[i]   > nyc_data[i].quantile(.001)) & \n                        (nyc_data[i] < nyc_data[i].quantile(.999))]\n    \n#create new variable log of fare amount\nnyc_data[\"log_fare_amount\"] = np.log(nyc_data[\"fare_amount\"])\n    \nnyc_data.head()","76863bc5":"#radius of earth in kilometers\nR = 6373.0\n\npickup_lat  = np.radians(nyc_data[\"pickup_latitude\"])\npickup_lon  = np.radians(nyc_data[\"pickup_longitude\"])\ndropoff_lat = np.radians(nyc_data[\"dropoff_latitude\"])\ndropoff_lon = np.radians(nyc_data[\"dropoff_longitude\"])\n\ndist_lon = dropoff_lon - pickup_lon\ndist_lat = dropoff_lat - pickup_lat\n\n#Formula\na = (np.sin(dist_lat\/2))**2 + np.cos(pickup_lat) * np.cos(dropoff_lat) * (np.sin(dist_lon\/2))**2 \nc = 2 * np.arctan2( np.sqrt(a), np.sqrt(1-a) ) \nd = R * c #(where R is the radius of the Earth)\n\nnyc_data[\"trip_distance_km\"] = d\n\n#create new variable log of distance\nnyc_data[\"log_trip_ditance\"] = np.log(nyc_data[\"trip_distance_km\"])\n\nnyc_data[coord + [\"trip_distance_km\"]].head(7)\n\n","2c3c1654":"summary = nyc_data.describe().transpose().reset_index().rename(columns = {\"index\" : \n                                                                          \"variable\"})\nsummary  = np.around(summary,2)\n\nvar_lst = [summary[\"variable\"],summary[\"count\"],summary['mean'],summary['std'],\n           summary[\"min\"],summary[\"25%\"],summary[\"50%\"],summary[\"75%\"],summary[\"max\"]]\n\ntable = go.Table(header = dict(values = summary.columns.tolist(),\n                               line = dict(color = ['#506784']),\n                               fill = dict(color = ['#119DFF']),\n                              ),\n                 cells  = dict(values = var_lst,\n                               line = dict(color = ['#506784']),\n                               fill = dict(color = [\"lightgrey\",'#F5F8FF']),\n                              ),\n                 columnwidth = [130,80,80,80,80,80,80,80,80])\n                \nlayout = go.Layout(dict(title = \"Variable Summary\"))\nfigure = go.Figure(data=[table],layout=layout)\npy.iplot(figure)","f4c09d86":"trace = go.Pie(values = [nyc_data.shape[0],5000000 - nyc_data.shape[0]],\n               labels = [\"Available data\" , \"Data loss due to outliers and missing values\"],\n               marker = dict(colors =  [ 'royalblue' ,'lime'],line = dict(color = \"black\",\n                                                                          width =  1.5)),\n               rotation  = 60,\n               hoverinfo = \"label+percent\",\n              )\n\nlayout = go.Layout(dict(title = \"Data Loss due to outliers and missing values\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                       )\n                  )\n\nfig = go.Figure(data=[trace],layout=layout)\npy.iplot(fig)","5e3aed98":"cols = ['fare_amount','passenger_count', \n        'pickup_longitude', 'dropoff_longitude',\n        'pickup_latitude', 'dropoff_latitude']\n\nlength = len(cols)\ncs     = [(0.8941176470588236, 0.10196078431372549, 0.10980392156862745),\n          (0.21568627450980393, 0.49411764705882355, 0.7215686274509804),\n          (0.30196078431372547, 0.6862745098039216, 0.2901960784313726),\n          (0.596078431372549, 0.3058823529411765, 0.6392156862745098),\n          (1.0, 0.4980392156862745, 0.0),\"b\"]\n\nsns.set_style(\"darkgrid\")\nplt.figure(figsize = (13,15))\nfor i,j,k in itertools.zip_longest(cols,range(length),cs) :\n    plt.subplot(length\/2,length\/3,j+1)\n    sns.distplot(nyc_data[i],color = k)\n    plt.axvline(nyc_data[i].mean(),linewidth  = 2 ,\n                linestyle = \"dashed\",color = \"k\" ,\n                label = \"Mean\")\n    plt.legend(loc = \"best\")\n    plt.title(i,color = \"b\")\n    plt.xlabel(\"\")\n    ","cfa4549f":"plt.figure(figsize = (12,7))\nsns.distplot(nyc_data[\"log_fare_amount\"],color = \"b\")\nplt.axvline(nyc_data[\"log_fare_amount\"].mean(),color = \"k\",\n            linestyle = \"dashed\",label = \"Avg fare amount\")\nplt.title(\"Distribution in log of fare amount\")\nplt.legend(loc = \"best\",prop = {\"size\" : 12})\nplt.show()","97bb75f3":"plt.figure(figsize = (12,7))\nsns.distplot(nyc_data[\"trip_distance_km\"],color = \"r\")\nplt.axvline(nyc_data[\"trip_distance_km\"].mean(),color = \"k\",\n            linestyle = \"dashed\",label = \"Avg trip distance (km)\")\nplt.title(\"Distribution in trip distance in kilometers\")\nplt.legend(loc = \"best\",prop = {\"size\" : 12})\nplt.show()","2e1c6467":"plt.figure(figsize = (12,10))\n\nplt.scatter(nyc_data[\"fare_amount\"],\n            nyc_data[\"trip_distance_km\"],s = 5,\n            linewidths=1, c = \"b\")\nplt.ylabel(\"Haversine distance in kilometers\")\nplt.xlabel(\"Fare amount\")\nplt.title(\"scatter plot for distance and fare amount\")\nplt.show()","b1d2f3d9":"plt.figure(figsize = (12,10))\nplt.scatter(nyc_data[\"log_fare_amount\"],\n            nyc_data[\"log_trip_ditance\"],s = 5,\n            linewidths=1, c = \"b\")\nplt.ylabel(\"log of Haversine distance in kilometers\")\nplt.xlabel(\"log of Fare amount\")\nplt.title(\"scatter plot for distance and fare amount\")\nplt.show()","61822c50":"yearly_analysis  = nyc_data.groupby(\"year\").agg({\"key\":\"count\",\n                                                 \"fare_amount\":\"sum\",\n                                                 \"passenger_count\":\"sum\",\n                                                 \"trip_distance_km\" : \"sum\"}).reset_index()\n#aggregating by year\nyearly_analysis = yearly_analysis.rename(columns = {\"key\" : \"trip_count\"})\n\n#plotting trips ,passengers and fare amount by year\ndef plotting(column) : \n    tracer = go.Bar(x= yearly_analysis[\"year\"],y = yearly_analysis[column],\n                    marker = dict(line = dict(width = 1)),\n                    name = column\n                   )\n    return tracer\n\n#layout\nlayout = go.Layout(dict(title = \"Total  trips ,passengers,trip_distance and fare amount by year\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"year\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"count\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                       )\n                  )\n    \ndata = [plotting(\"trip_count\"),plotting(\"passenger_count\"),\n        plotting(\"trip_distance_km\"),plotting(\"fare_amount\")]\nfig  = go.Figure(data=data,layout=layout)\npy.iplot(fig)","796088a7":"yrs = [i for i in nyc_data[\"year\"].unique().tolist() if i not in [2015]]\n\n#subset data without year 2015\ncomplete_dat = nyc_data[nyc_data[\"year\"].isin(yrs)]\n\n\nplt.figure(figsize = (13,15))\nfor i,j in itertools.zip_longest(yrs,range(len(yrs))) :\n    plt.subplot(3,2,j+1)\n    trip_counts_mn = complete_dat[complete_dat[\"year\"] == i][\"month_name\"].value_counts()\n    trip_counts_mn = trip_counts_mn.reset_index()\n    sns.barplot(trip_counts_mn[\"index\"],trip_counts_mn[\"month_name\"],\n                palette = \"rainbow\",linewidth = 1,\n                edgecolor = \"k\"*complete_dat[\"month_name\"].nunique() \n               )\n    plt.title(i,color = \"b\",fontsize = 12)\n    plt.grid(True)\n    plt.xlabel(\"\")\n    plt.ylabel(\"trips\")\n","16e3f23d":"fare_mn = complete_dat.groupby(\"month_name\")[\"fare_amount\"].mean().reset_index()\n\nmnth_ord = ['JAN', 'FEB', 'MAR','APR', 'MAY' , 'JUN',\n                'JUL',  'AUG', 'SEP','OCT', 'NOV','DEC']\n\nplt.figure(figsize = (12,7))\nsns.barplot(\"month_name\",\"fare_amount\",\n            data = fare_mn,order = mnth_ord,\n            linewidth =1,edgecolor = \"k\"*len(mnth_ord)\n           )\nplt.grid(True)\nplt.title(\"Average fare amount by Month\")\nplt.show()","b5719f23":"def plot_day_trend(year) :\n    day_count = complete_dat[complete_dat[\"year\"] == year][\"week_day\"].value_counts().reset_index()\n    day_count.columns = [\"day\",\"count\"]\n    day_count[\"order\"]  = day_count[\"day\"].replace({\"Sunday\" :1,'Monday' : 2, 'Tuesday': 3,\n                                                    'Wednesday':4,'Thursday' :5, 'Friday':6,\n                                                    'Saturday':7})\n    day_count = day_count.sort_values(by = \"order\",ascending  = True)\n    \n    tracer = go.Bar(x = day_count[\"day\"],y = day_count[\"count\"],\n                    name = year,marker = dict(line = dict(width =1))\n                   )\n    \n    return tracer\n\n#layout\nlayout = go.Layout(dict(title = \"Trend in trips  by weekdays\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"weekday\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"count\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                       )\n                  )\n\nt  = plot_day_trend(2009)\nt1 = plot_day_trend(2010)\nt2 = plot_day_trend(2011)\nt3 = plot_day_trend(2012)\nt4 = plot_day_trend(2013)\nt5 = plot_day_trend(2014)\n\ndata = [t,t1,t2,t3,t4,t5]\npy.iplot(go.Figure(data = data,layout=layout))","7efafa9a":"fare_wk = complete_dat.groupby(\"week_day\")[\"fare_amount\"].mean().reset_index()\n\nwk_ord = [\"Sunday\" ,'Monday' , 'Tuesday','Wednesday',\n          'Thursday' ,'Friday', 'Saturday']\n\nplt.figure(figsize = (12,7))\nsns.barplot(\"week_day\",\"fare_amount\",\n             data = fare_wk,order = wk_ord,palette = \"husl\",\n             linewidth =1,edgecolor = \"k\"*len(wk_ord)\n            )\nplt.grid(True)\nplt.title(\"Average fare amount by week day\")\nplt.show()","0ee67919":"trips_hr = nyc_data[\"hour\"].value_counts().reset_index()\ntrips_hr.columns = [\"hour\",\"count\"]\ntrips_hr = trips_hr.sort_values(by = \"hour\",ascending = True)\n\ntrace = go.Scatter(x = trips_hr[\"hour\"],y = trips_hr[\"count\"],\n                   mode = \"markers+lines\",\n                  marker = dict(color = \"red\",size = 9,\n                                line = dict(color = \"black\",width =2)))\n#layout\nlayout = go.Layout(dict(title = \"Trend in trips  by hour of day\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"hour\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"count\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                       )\n                  )\n\nfig = go.Figure(data = [trace],layout = layout)\npy.iplot(fig)","0c1284e8":"avg_fare_hr = complete_dat.groupby(\"hour\")[\"fare_amount\"].mean().reset_index()\navg_fare_hr\ntrace = go.Scatter(x = avg_fare_hr[\"hour\"],y = avg_fare_hr[\"fare_amount\"],\n                   mode = \"markers+lines\",\n                  marker = dict(color = \"blue\",size = 9,\n                                line = dict(color = \"black\",width =2)))\n\n#layout\nlayout = go.Layout(dict(title = \"Average fare by hour\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"hour\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"average_fare\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                       )\n                  )\n\nfig = go.Figure(data = [trace],layout = layout)\npy.iplot(fig)\n","bf183882":"#aggregate by year-month(trips)\ntrip_count = nyc_data.groupby([\"year\",\"month\",\n                               \"month_name\"])[\"month_year\"].value_counts().to_frame()\ntrip_count.columns = [\"count\"]\ntrip_count = trip_count.reset_index()\n\n#aggregate by year-month(passengers)\npassenger_count = (nyc_data.groupby([\"year\",\"month\",\"month_name\",\n                                     \"month_year\"])[\"passenger_count\"].sum().reset_index())\n\n#aggregate by year-month(fare amount)\ntotal_fare = (nyc_data.groupby([\"year\",\"month\",\"month_name\",\n                                     \"month_year\"])[\"fare_amount\"].sum().reset_index())\n\n#aggregate by year-month(total trip distance)\ntotal_trip_dist = (nyc_data.groupby([\"year\",\"month\",\"month_name\",\n                                     \"month_year\"])[\"trip_distance_km\"].sum().reset_index())\n\n\n#plotting\ndef trend_scatter(data_frame,column) :\n    tracer = go.Scatter(x = data_frame[\"month_year\"],y = data_frame[column],\n                        mode = \"lines+markers\",\n                        marker = dict(color = data_frame[\"month\"],size = 7,\n                                      colorscale = \"Picnic\",\n                                      line = dict(width =1 ,color = \"black\")\n                                     ),\n                        line = dict(color = \"grey\" ),\n                   )\n    return tracer\n\ndef layout_plot(title) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"count\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            margin = dict(b = 100)\n                           )\n                      )\n    return layout\n\n#figure 1\ndata    = [trend_scatter(trip_count,\"count\")]\nlayout  = layout_plot(\"Trend in trip count from 2009-Jan to 2015-May\")\nfig = go.Figure(data = data,layout = layout)\npy.iplot(fig)\n\n#figure 2\ndata1    = [trend_scatter(passenger_count,\"passenger_count\")]\nlayout1  = layout_plot(\"Trend in total passenger count from 2009-Jan to 2015-May\")\nfig1 = go.Figure(data = data1,layout = layout1)\npy.iplot(fig1)\n\n#figure 3\ndata2    = [trend_scatter(total_fare,\"fare_amount\")]\nlayout2  = layout_plot(\"Trend in total fare amount from 2009-Jan to 2015-May\")\nfig2 = go.Figure(data = data2,layout = layout2)\npy.iplot(fig2)\n\n#figure 4\ndata3    = [trend_scatter(total_trip_dist,\"trip_distance_km\")]\nlayout3  = layout_plot(\"Trend in trip distance from 2009-Jan to 2015-May\")\nfig3 = go.Figure(data = data3,layout = layout3)\npy.iplot(fig3)","507ed938":"#plot annoted heat map by month - year\ndef plot_heat_map(column,aggregate_function,title) :\n    #pivot table \n    pivot_table = pd.pivot_table(data = nyc_data,columns = \"month_name\",index = \"year\",\n                                values = column,aggfunc = aggregate_function)\n    \n    mnth_ord = ['JAN', 'FEB', 'MAR','APR', 'MAY' , 'JUN',\n                'JUL',  'AUG', 'SEP','OCT', 'NOV','DEC']\n    \n    #reverse mnth order list\n    def reverse(data_list) :\n        return data_list[::-1]\n    \n    mnth_ord_rev = reverse(mnth_ord)\n    \n    pivot_table  = pivot_table[mnth_ord_rev].sort_values(by = \"year\",ascending = True)\n    pivot_table  = pivot_table.transpose()\n    \n    #convert array\n    pivot_array  = np.around(np.array(pivot_table))\n    \n    #color scale\n    colorscale=[[0.0, 'rgb(255,255,255)'], [.2, 'rgb(255, 255, 153)'], \n                [.4, 'rgb(153, 255, 204)'], [.6, 'rgb(179, 217, 255)'], \n                [.8, 'rgb(240, 179, 255)'],[1.0, 'rgb(255, 77, 148)']]\n    #plot heat map\n    figure = ff.create_annotated_heatmap(z = pivot_array,\n                                         x = pivot_table.columns.tolist(),\n                                         y = pivot_table.index.tolist(),\n                                         font_colors = [\"black\"],\n                                         showscale = True,\n                                         colorscale = colorscale,\n                                         colorbar   = dict(title = \"total \" + title,\n                                                           titleside = \"right\")\n                                        )\n    #title\n    figure.layout.title = \"Total \" + title + \" by  month - year .\"\n    figure.layout.plot_bgcolor  = \"white\"\n    figure.layout.paper_bgcolor = \"white\"\n    \n    return py.iplot(figure)\n\n#plot1\nplot_heat_map(\"key\",\"count\",\"trip count\")\n#plot2\nplot_heat_map(\"passenger_count\",\"sum\",\"passengers count\")\n#plot3\nplot_heat_map(\"fare_amount\",\"sum\",\"fare amount\")\n#plot4\nplot_heat_map(\"trip_distance_km\",\"sum\",\"trip distance(km)\")","a560bd3e":"#Merge passenger_count,trip_count and fare_amount data \nmerge1  = trip_count.merge(passenger_count,left_on = \"month_year\",\n                           right_on = \"month_year\",how= \"left\")\n\nmerge2  = total_fare.merge(total_trip_dist,left_on = \"month_year\",\n                           right_on = \"month_year\",how= \"left\")\n\nfinal_my_dat = merge1.merge(merge2,left_on = \"month_year\",\n                           right_on = \"month_year\",how= \"left\")\n\nfinal_my_dat = final_my_dat[[\"month_year\",\"count\",\"passenger_count\",\"fare_amount\",\n                             \"trip_distance_km\",\"month_x_x\",\"year_x_x\",\"month_name_x_x\"]]\n\n\nfinal_my_dat = final_my_dat.rename(columns = {\"month_x_x\":\"month\",\"year_x_x\":\"year\",\n                                   \"count\" : \"trips_count\",\"month_name_x_x\":\"month_name\"})\n\n\n# #correlation\ncorr  =  np.array(final_my_dat[['trips_count', 'passenger_count',\n                                'fare_amount', \"trip_distance_km\"]].corr())\ncorr  =  np.around(corr,4)\n\n# #x & y ticks\nticks =  ['trips_count', 'passenger_count', 'fare_amount', \"trip_distance_km\"]\n\n# #plot heatmap\nfig = ff.create_annotated_heatmap(z = corr,x = ticks,y = ticks,showscale=True,\n                                   colorscale = \"Portland\",\n                                   colorbar   = dict(title = \"correlation coefficient\",\n                                                     titleside = \"right\"\n                                      ) \n                                  )\nfig.layout.title  = \"Correlation Matrix\"\nfig.layout.margin = dict(l = 200,r = 200)\npy.iplot(fig)","d043c4b6":"#import libraries\nimport folium\nimport folium.plugins\n\n#lat and lon center\nlat_center = 40.77\nlon_center = -73.96\n\n#plot\nmap_ny = folium.Map(location=[lat_center,lon_center],\n                    tiles=\"openstreetmap\",max_zoom=15,zoom_start=11.5)\nmap_ny","b95695d0":"trips_ln = nyc_data[nyc_data[\"trip_distance_km\"] > 40]\n\nlat_center = 40.78\nlon_center = -73.62\n\nmap_nyc = folium.Map(location=[lat_center,lon_center],\n                    tiles=\"stamentoner\",max_zoom=15,zoom_start=10)\n\n\nfor i in range(0,len(trips_ln)) : \n    \n    p1 = [trips_ln[\"pickup_latitude\"].values[i],\n          trips_ln[\"pickup_longitude\"].values[i]]\n    \n    p2 = [trips_ln[\"dropoff_latitude\"].values[i],\n          trips_ln[\"dropoff_longitude\"].values[i]]\n    \n    folium.Marker(location = p1,\n                  icon=folium.Icon(color='green',\n                                   icon = \"home\"),\n                  popup = \"Pick up = \" + str(p1),\n                 ).add_to(map_nyc)\n    \n    folium.Marker(location = p2,\n                 icon=folium.Icon(color='blue',\n                                  icon = \"home\"),\n                  popup = \"Drop off = \" + str(p2),\n                 ).add_to(map_nyc)\n    \n    folium.PolyLine(locations = [p1,p2] ,\n                    color = \"red\",opacity = .9,\n                   ).add_to(map_nyc)\n    \n   \nmap_nyc","e055a5f6":"#Import Libraries\nfrom bokeh.models import BoxZoomTool\nfrom bokeh.plotting import figure, output_notebook, show\nimport datashader as ds\nfrom datashader.bokeh_ext import InteractiveImage\nfrom functools import partial\nfrom datashader.utils import export_image\nfrom datashader.colors import colormap_select, Greys9, Hot, inferno,Set1\nfrom datashader import transfer_functions as tf\noutput_notebook()\n\n#plot datapoints by location coordinates\ndef plot_data_points(longitude,latitude,data_frame,focus_point) :\n    #plot dimensions\n    x_range, y_range = ((-74.14,-73.73), (40.6,40.9))\n    plot_width  = int(750)\n    plot_height = int(plot_width\/\/1.2)\n    export  = partial(export_image, export_path=\"export\", background=\"black\")\n    fig = figure(background_fill_color = \"black\")    \n    #plot data points\n    cvs = ds.Canvas(plot_width=plot_width, plot_height=plot_height,\n                    x_range=x_range, y_range=y_range)\n    agg = cvs.points(data_frame,longitude,latitude,\n                      ds.count(focus_point))\n    img = tf.shade(agg, cmap= Hot, how='eq_hist')\n    image_xpt  =  tf.dynspread(img, threshold=0.5, max_px=4)\n    return export(image_xpt,\"NYCT_hot\")\n\nplot_data_points('pickup_longitude', 'pickup_latitude',nyc_data,\"passenger_count\")","9e1b1446":"plot_data_points('dropoff_longitude', 'dropoff_latitude',nyc_data,\"passenger_count\")","a153b6c6":"plot_data_points('pickup_longitude', 'pickup_latitude',nyc_data,\"fare_amount\")","1363eb3c":"plot_data_points('dropoff_longitude', 'dropoff_latitude',nyc_data,\"fare_amount\")","36062fe2":"jfk_data = nyc_data.copy()\n\n#jfk coordinates\njfk_data[\"jfk_lat\"] = 40.6413\njfk_data[\"jfk_lon\"] = -73.7781\n\n#function to get haversine distance for two set of coordinates\ndef distance_points(data_frame,x1_lat,x1_lon,x2_lat,x2_lon) :    \n    R = 6373.0 #radius of the Earth in kilometers\n    \n    point1_lat = np.radians(data_frame[x1_lat])\n    point1_lon = np.radians(data_frame[x1_lon])\n    point2_lat = np.radians(data_frame[x2_lat])\n    point2_lon = np.radians(data_frame[x2_lon])\n    \n    dist_lon = point2_lon - point1_lon\n    dist_lat = point2_lat - point1_lat\n    \n    #Formula\n    a = (np.sin(dist_lat\/2))**2 + np.cos(pickup_lat) * np.cos(dropoff_lat) * (np.sin(dist_lon\/2))**2 \n    c = 2 * np.arctan2( np.sqrt(a), np.sqrt(1-a) ) \n    d = R * c #(where R is the radius of the Earth)\n    \n    return d\n    \n#distance_from jfk airport to pickup coordinates\njfk_data[\"dist_pickup_jfk\"]  = distance_points(jfk_data,\"pickup_latitude\",\n                                               \"pickup_longitude\",\n                                              \"jfk_lat\",\"jfk_lon\")\n\n#distance_from jfk airport to dropoff coordinates\njfk_data[\"dist_dropoff_jfk\"] = distance_points(jfk_data,\"dropoff_latitude\",\n                                               \"dropoff_longitude\",\n                                              \"jfk_lat\",\"jfk_lon\")\n\n#pick ups from 1km distance from jfk \njfk_data_pickups  = jfk_data[(jfk_data[\"dist_pickup_jfk\"] <  2)]\njfk_data_pickups[\"type\"]  = \"Pick up\"\njfk_data_pickups = jfk_data_pickups.drop(columns = [ 'jfk_lat','jfk_lon'] ,\n                                         axis = 1)\n\n#dropoffs from 1km distance from jfk \njfk_data_dropoffs = jfk_data[(jfk_data[\"dist_dropoff_jfk\"] < 2)]\njfk_data_dropoffs[\"type\"] = \"Drop off\"\njfk_data_dropoffs = jfk_data_dropoffs.drop(columns = [ 'jfk_lat', 'jfk_lon'] ,\n                                           axis = 1)\n\n#concat jfk pickups and dropoff\njfk = pd.concat([jfk_data_pickups,jfk_data_dropoffs],axis = 0)\n\n#subset data which are not in jfk\nnot_jfk = nyc_data.drop(jfk.index,axis = 0)\n\n#trips to jfk\njfk.head()","e558d34f":"lat_center_jfk = 40.645626\nlon_center_jfk = -73.785220\n\nmap_jfk_pk = folium.Map(location=[lat_center_jfk,lon_center_jfk],\n                         tiles=\"OpenStreetMap\",\n                         max_zoom=15,zoom_start=15)\n\nfolium.Marker(location = [lat_center_jfk,lon_center_jfk],\n              icon = folium.Icon( icon=\"star\",color = \"blue\")).add_to(map_jfk_pk)\n\n#plotting 2500 dta points\nfor i in range(0,len(jfk_data_dropoffs[:2500])) :\n    p = [jfk_data_pickups[\"pickup_latitude\"][:2500].values[i],\n        jfk_data_pickups[\"pickup_longitude\"][:2500].values[i]]\n    \n    folium.Circle(location = p ,radius = 2,\n                  color = \"red\").add_to(map_jfk_pk)\n    \n\nmap_jfk_pk\n","62aa4330":"map_jfk_dp = folium.Map(location=[lat_center_jfk,lon_center_jfk],\n                        tiles=\"OpenStreetMap\",\n                        max_zoom=15,zoom_start=15)\n\nfolium.Marker(location = [lat_center_jfk,lon_center_jfk],\n              icon = folium.Icon( icon=\"star\",color = \"blue\")).add_to(map_jfk_dp)\n\n#plotting 2500 dta points\nfor i in range(0,len(jfk_data_dropoffs[:2500])) :\n    p = [jfk_data_dropoffs[\"pickup_latitude\"][:2500].values[i],\n        jfk_data_dropoffs[\"pickup_longitude\"][:2500].values[i]]\n    \n    folium.Circle(location = p ,radius = 5,\n                  color = \"blue\").add_to(map_jfk_dp)\n    \n\nmap_jfk_dp","16875ddc":"plt.figure(figsize = (13,7))\nsns.distplot(not_jfk[\"fare_amount\"],color = \"b\")\nsns.distplot(jfk[\"fare_amount\"],color = \"r\")\nplt.axvline(not_jfk[\"fare_amount\"].mean(),\n            color = \"b\",linestyle = \"dashed\",label = \"non_jfk_trip_mean\")\nplt.axvline(jfk[\"fare_amount\"].mean(),\n            color = \"r\",linestyle = \"dashed\",label = \"jfk_trip_mean\")\nplt.legend(loc = \"best\",prop= {\"size\" : 12})\nplt.title(\"Fare amount distribution for jfk and non jfk trips\")\nplt.show()","63b42c4c":"#average fare amounts by jfk pickups and dropoff\njfk_tp_avg   = jfk.groupby(\"type\")[\"fare_amount\"].mean().reset_index()\n\n#average fare amount by jfk and non jfk trip  \njfk_njfk_avg = pd.DataFrame({\"type\" : [\"jfk\",\"non_jfk\"], \n                            \"fare_amount\":[jfk[\"fare_amount\"].mean(),\n                                           not_jfk[\"fare_amount\"].mean()]\n                            }\n                            )\n\n#plot\nplt.figure(figsize = (13,5))\nplt.subplot(121)\nax = sns.barplot(x = \"fare_amount\",y = \"type\",data = jfk_tp_avg,\n                 linewidth = 2, edgecolor = \"k\"*2 ,\n                 palette = \"husl\"\n                )\nplt.grid(True)\nplt.ylabel(\"trip type\")\nplt.title(\"Average fare amount by jfk pickups and drop offs\")\nfor i,j in enumerate(np.around(jfk_tp_avg[\"fare_amount\"].values,2)) :\n    ax.text(.9,i,j,fontsize = 15)\n    \nplt.subplot(122)\nax1 = sns.barplot(x = \"fare_amount\",y = \"type\",data = jfk_njfk_avg,\n                 linewidth = 2, edgecolor = \"k\"*2 ,\n                 palette = \"husl\")\nplt.ylabel(\"\")\nplt.grid(True)\nplt.title(\"Average fare amount by jfk and non jfk trip\")\nfor i,j in enumerate(np.around(jfk_njfk_avg[\"fare_amount\"].values,2)) :\n    ax1.text(.9,i,j,fontsize = 15)\nplt.show()","a0cfe7ea":"plt.figure(figsize = (13,7))\nsns.distplot(not_jfk[\"trip_distance_km\"],color = \"b\")\nsns.distplot(jfk[\"trip_distance_km\"],color = \"r\")\nplt.axvline(not_jfk[\"trip_distance_km\"].mean(),\n            color = \"b\",linestyle = \"dashed\",label = \"non_jfk_trip_mean\")\nplt.axvline(jfk[\"trip_distance_km\"].mean(),\n            color = \"r\",linestyle = \"dashed\",label = \"jfk_trip_mean\")\nplt.legend(loc = \"best\",prop= {\"size\" : 12})\nplt.title(\"Trip distance distribution for jfk and non jfk trips\")\nplt.show()","551cec4e":"#average distance by jfk pickups and dropoff\njfk_tp_avg   = jfk.groupby(\"type\")[\"trip_distance_km\"].mean().reset_index()\n\n#average distance by jfk and non jfk trip  \njfk_njfk_avg = pd.DataFrame({\"type\" : [\"jfk\",\"non_jfk\"], \n                            \"trip_distance_km\":[jfk[\"trip_distance_km\"].mean(),\n                                                not_jfk[\"trip_distance_km\"].mean()]\n                            }\n                            )\n\n#plot\nplt.figure(figsize = (13,5))\nplt.subplot(121)\nax = sns.barplot(x = \"trip_distance_km\",y = \"type\",data = jfk_tp_avg,\n                 linewidth = 2, edgecolor = \"k\"*2 ,\n                 palette = \"husl\"\n                )\nplt.grid(True)\nplt.ylabel(\"trip type\")\nplt.title(\"Average trip_distance by jfk pickups and drop offs\")\nfor i,j in enumerate(np.around(jfk_tp_avg[\"trip_distance_km\"].values,2)) :\n    ax.text(.9,i,j,fontsize = 15)\n    \nplt.subplot(122)\nax1 = sns.barplot(x = \"trip_distance_km\",y = \"type\",data = jfk_njfk_avg,\n                 linewidth = 2, edgecolor = \"k\"*2 ,\n                 palette = \"husl\")\nplt.ylabel(\"\")\nplt.grid(True)\nplt.title(\"Average trip_distance  by jfk and non jfk trip\")\nfor i,j in enumerate(np.around(jfk_njfk_avg[\"trip_distance_km\"].values,2)) :\n    ax1.text(.9,i,j,fontsize = 15)\nplt.show()","cf6a9cdb":"plt.figure(figsize = (13,6))\nplt.subplot(121)\nplt.scatter(jfk_data_pickups[\"fare_amount\"],\n            jfk_data_pickups[\"trip_distance_km\"],\n            linewidth =1,edgecolor = \"k\",s = 30,\n            color= \"r\",alpha =.7,label = \"pick ups\")\nplt.legend(loc = \"best\",prop = {\"size\" : 15})\nplt.xlabel(\"fare amount\")\nplt.ylabel(\"trip distance km\")\nplt.title(\"Jfk pick-ups \")\n\nplt.subplot(122)\nplt.scatter(jfk_data_dropoffs[\"fare_amount\"],\n            jfk_data_dropoffs[\"trip_distance_km\"],\n            linewidth =1,edgecolor = \"k\",s = 30,\n            color = \"b\",alpha =.7,label = \"drop offs\")\nplt.legend(loc = \"best\",prop = {\"size\" : 15})\nplt.xlabel(\"fare amount\")\nplt.ylabel(\"trip distance km\")\nplt.title(\"Jfk drop-offs \")\n\nplt.show()\n","aa31ae2a":"plt.figure(figsize = (12,5))\njfk.groupby([\"year\"])[\"fare_amount\"].mean().plot(kind = \"bar\",linewidth = 1,\n                                                 figsize = (12,6),\n                                                 edgecolor = \"k\" *jfk[\"year\"].nunique())\nplt.xticks(rotation = 0)\nplt.ylabel(\"fare\")\nplt.title(\"Average fare amount for jfk airport by year\")\nplt.show()\n","4c6724f5":"import datetime\n#Data - total fare amount by month from 2009 to 2015-06\nts_fare = total_fare.copy()\nts_fare[\"date\"] = ts_fare[\"year\"].astype(str) + \"-\" + ts_fare[\"month\"].astype(str)\n#selecting columns\nts_fare = ts_fare[[\"date\",\"fare_amount\"]]\n#convert to date format\nts_fare[\"date\"] = pd.to_datetime(ts_fare[\"date\"],format = \"%Y-%m\")\nts_fare.index   = ts_fare[\"date\"]\nts_fare = ts_fare.drop(columns  = [\"date\"],axis = 1)\nts_fare.head(10)","5932a66a":"trace = go.Scatter(x = ts_fare.index,y = ts_fare.fare_amount,\n                   mode = \"lines+markers\",\n                   marker = dict(color = \"royalblue\",line = dict(width =1))\n                  )\nlayout = go.Layout(dict(title = \"Visualizing time series\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = \"count\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        margin = dict(b = 100)\n                       )\n                  )\nfig = go.Figure(data = [trace],layout = layout)\npy.iplot(fig)","21f9d7d1":"from statsmodels.tsa.stattools import adfuller\n\ndef plot_line(x,y,color,name) :\n    tracer = go.Scatter(x = x,y = y,mode = \"lines\",\n                        marker = dict(color = color,\n                                      line = dict(width =1)),\n                       name = name)\n    return tracer\n\ndef plot_layout(title) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                            zerolinewidth=1,ticklen=5,gridwidth=2),\n                        margin = dict(b = 100)\n                       )\n                  )\n    return layout\n\n\ndef stationary_test(timeseries) :\n    #rolling mean\n    rol_mean = timeseries[\"fare_amount\"].rolling(window = 12,\n                                                 center = False).mean()\n    #rolling standard deviation\n    rol_std  = timeseries[\"fare_amount\"].rolling(window = 12,\n                                                 center = False).std()\n    \n    #plotting\n    trace1  = plot_line(timeseries.index,timeseries[\"fare_amount\"],\n                        \"blue\",\"time_series\")\n    trace2  = plot_line(rol_mean.index,rol_mean.values,\n                        \"red\",\"rolling_mean\")\n    trace3  = plot_line(rol_std.index,rol_std.values,\n                        \"green\", \"rolling_std\")\n    layout  = plot_layout(\"rolling mean and standard deviation for timeseries\")\n    figure  = go.Figure(data = [trace1,trace2,trace3],layout = layout)\n    \n    test_results = adfuller(timeseries[\"fare_amount\"])\n    res_list     = [\"Test Statistic\",\"p-value\",\n                    \"lags used\",\"no of observations\"] \n    res_df = pd.Series(test_results[:4],index = res_list)\n    \n    for key,value in test_results[4].items() :\n        res_df[\"Critical value (%s)\"%key] = value \n        \n    print (\"Results - Dickey fuller test\")\n    print (res_df)\n    return py.iplot(figure)\n\nstationary_test(ts_fare)","2900436b":"#log of timeseries\nlog_ts_fare = np.log(ts_fare)\n\n#rolling average of log timeseries\nrol_avg_log_ts = log_ts_fare[\"fare_amount\"].rolling(window = 12,center = False).mean()\n\n#plotting log timeseries and rolling mean\nt1 = plot_line(log_ts_fare.index,log_ts_fare.fare_amount,\n                \"blue\",\"log_time_series\")\nt2 = plot_line(rol_avg_log_ts.index,rol_avg_log_ts.values,\n               \"red\",\"moving_average(log)\")\nlay = plot_layout(\"log time series and moving average\")\nfig = go.Figure(data = [t1,t2],layout = lay)\npy.iplot(fig)\n\n#difference\nlog_ts_fare_diff = log_ts_fare - rol_avg_log_ts.to_frame()\nlog_ts_fare_diff.dropna(inplace = True)\nstationary_test(log_ts_fare_diff)","bbaf2498":"#exponential moving average of log time series\nexp_log_avg = log_ts_fare[\"fare_amount\"].ewm(halflife = 12).mean()\n\n#plotting\nt1 = plot_line(log_ts_fare.index,log_ts_fare[\"fare_amount\"],\n               \"blue\",\"log time series\")\nt2 = plot_line(exp_log_avg.index,exp_log_avg.values,\n               \"red\",\"exponential avg\")\nlay = plot_layout(\"log time series and exponential moving average\")\nfig = go.Figure(data = [t1,t2],layout = lay)\npy.iplot(fig)\n\n#difference\nexp_ts_diff = log_ts_fare - exp_log_avg.to_frame()\nstationary_test(exp_ts_diff)","b7771919":"#differencing log series\nts_fare_diff = log_ts_fare - log_ts_fare.shift()\nts_fare_diff.dropna(inplace = True)\n\n#plotting\nt1 = plot_line(ts_fare_diff.index,ts_fare_diff[\"fare_amount\"],\n              \"blue\",\"Differenced log series\")\nlay = plot_layout(\"Differenced log series\")\nfig = go.Figure(data = [t1],layout=lay)\npy.iplot(fig)\n\n#stationary test\nstationary_test(ts_fare_diff)\n","d0f944d9":"from statsmodels.tsa.seasonal import seasonal_decompose\n\n#decompose\ndecompose = seasonal_decompose(log_ts_fare)\n\n#trend\ntrend       = decompose.trend\n#seasonality\nseasonality = decompose.seasonal\n#residuals\nresiduals   = decompose.resid\n\n#plotting\nt1 = plot_line(ts_fare.index,ts_fare.fare_amount,\n               \"blue\",\"log_Series\")\nt2 = plot_line(trend.index,trend.fare_amount,\n               \"green\",\"Trend\")\nt3 = plot_line(seasonality.index,seasonality.fare_amount,\n               \"red\",\"Seasonality\")\nt4 = plot_line(residuals.index,residuals.fare_amount,\n               \"black\",\"Residuals\")\n#subplots\nfig = tls.make_subplots(rows = 4,cols = 1,subplot_titles = (\"log series\",\n                                                            \"Trend\",\n                                                            \"Seasonality\",\n                                                            \"residuals\"))\n\nfig.append_trace(t1,1,1)\nfig.append_trace(t2,2,1)\nfig.append_trace(t3,3,1)\nfig.append_trace(t4,4,1)\n#layout\nfig[\"layout\"].update(height = 750,\n                     plot_bgcolor  = \"rgb(243,243,243)\",\n                     paper_bgcolor = \"rgb(243,243,243)\",\n                     xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                  zerolinewidth=1,ticklen=5,gridwidth=2),\n                    yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                 zerolinewidth=1,ticklen=5,gridwidth=2),\n                    title = \"decomposing\"\n                    )\npy.iplot(fig)\n\n#stationary tert for residuals\nresiduals.dropna(inplace = True)\nstationary_test(residuals)","45050f15":"from statsmodels.tsa.stattools import acf,pacf\n\n#auto correlation function\nacf_vals  = acf(ts_fare_diff)\n#partial auto correlation function\npacf_vals = pacf(ts_fare_diff)\n\n#plot acf,pacf\ndef plot_corr_fact(x,y,color,name) :\n    tracer = go.Bar(x = x, y= y ,\n                    marker = dict(color = color,\n                                  line = dict(width =1,\n                                              color = \"black\") \n                                 ),\n                    name = name\n                   )\n    return tracer\n#plot confidence intervals\ndef plot_lines(x,y) :\n    trace_line = go.Scatter(x = x, y = y,\n                            mode   = \"lines\",\n                            line   = dict(color = \"black\",\n                                          width = 2,\n                                          dash = \"dash\" \n                                         ) ,\n                            name = \"confidence intervals\"\n                           )\n    return trace_line\n\n#acf values\nt_acf  = plot_corr_fact(np.arange(0,len(acf_vals)),\n                    acf_vals,\"blue\",\"acf\")\n#confidence intervals for acf\nlu_acf = plot_lines(np.arange(0,len(acf_vals)),\n                    [1.96\/np.sqrt(len(ts_fare_diff))]*len(acf_vals))\nll_acf = plot_lines(np.arange(0,len(acf_vals)),\n                    [-1.96\/np.sqrt(len(ts_fare_diff))]*len(acf_vals))\n\n#pacf values\nt_pacf = plot_corr_fact(np.arange(0,len(pacf_vals)),\n                    pacf_vals,\"red\",\"pacf\")\n#confidence intervals for pacf\nlu_pacf = plot_lines(np.arange(0,len(pacf_vals)),\n                    [1.96\/np.sqrt(len(ts_fare_diff))]*len(pacf_vals))\nll_pacf = plot_lines(np.arange(0,len(pacf_vals)),\n                    [-1.96\/np.sqrt(len(ts_fare_diff))]*len(pacf_vals))\n\n#subplots\nfig = tls.make_subplots(rows = 1, cols  = 2,\n                        subplot_titles = (\"auto correlation function\",\n                                          \"partial auto correlation function\"))\n\nfig.append_trace(t_acf,1,1)\nfig.append_trace(lu_acf,1,1)\nfig.append_trace(ll_acf,1,1)\nfig.append_trace(t_pacf,1,2)\nfig.append_trace(lu_pacf,1,2)\nfig.append_trace(ll_pacf,1,2)\n\n#layout\nfig[\"layout\"].update(plot_bgcolor  = \"rgb(243,243,243)\",\n                     showlegend = False,\n                     paper_bgcolor = \"rgb(243,243,243)\",\n                     xaxis1 = dict(gridcolor = 'rgb(255, 255, 255)',\n                                  zerolinewidth=1,ticklen=5,gridwidth=2),\n                     yaxis1 = dict(gridcolor = 'rgb(255, 255, 255)',\n                                 zerolinewidth=1,ticklen=5,gridwidth=2),\n                     xaxis2 = dict(gridcolor = 'rgb(255, 255, 255)',\n                                  zerolinewidth=1,ticklen=5,gridwidth=2),\n                     yaxis2 = dict(gridcolor = 'rgb(255, 255, 255)',\n                                 zerolinewidth=1,ticklen=5,gridwidth=2))\n\n\npy.iplot(fig)","f557be10":"from statsmodels.tsa.arima_model import ARIMA\n\n#ARIMA model\ndef arima_model(time_series,p,d,q) :\n    arima_model   = ARIMA(time_series , order = (p,d,q))\n    results_arima = arima_model.fit(disp = -1)\n    fitted_values = results_arima.fittedvalues\n    \n    trace1 = plot_line(fitted_values.index,\n                       fitted_values.values,\n                       \"blue\",\"fitted values\")\n    \n    trace2 = plot_line(ts_fare_diff.index,\n                       ts_fare_diff[\"fare_amount\"],\n                       \"red\",\"log differenced values\")\n\n    layout = plot_layout((\"ARIMA model p = \" + str(p) + \n                          \", d = \" + str(d) + \", q = \" + str(q)))\n    data  = [trace2,trace1]\n    fig   = go.Figure(data = data,layout = layout)\n    py.iplot(fig)\n    print (results_arima.summary())\n    \narima_model(log_ts_fare,1,1,0)\n","4f090ed4":"arima_model(log_ts_fare,0,1,1)","e2f3930c":"arima_model(log_ts_fare,1,1,1)","633df60f":"arima_model(log_ts_fare,2,1,2)","0bbbdccf":"## Average fare by hour","e6ee04d2":"## New york city map","d6d7b7fd":"## scatter plot for distance and fare amount","93a6d73a":"## Trip distance distribution for jfk and non jfk trips","258a803f":"## Seasonal Trend in trips, passengers and fare amount","4a27fbf7":"## Trend in trips  by weekdays","1ea91190":"## Drop off locations by passenger count","dd9c9e9a":"## Eliminating Trend and seasonality\n## Differencing","e57eccd7":"## Average fare amount by week day","e8e2114a":"## Distribution of haversine distance in kilometers","093ae594":"## Variable Summary","071bdd2c":"## Average fare amount by jfk and non jfk trip  ","120f0072":"## Distribution in log of fare amount","e9deb8c2":"## Exponential weighted moving average","788cb54d":"## Trend in  trips by months.","d7a7ab60":"## Data Loss","8c229222":"## Correlation ","722575c6":"# Forecasting\n  ## ACF & PACF plots","49f001fa":"## Average trip distance by jfk and non jfk trip  ","f725840a":"## Data","80732b77":"## Time series forecasting of fare amount","0c193de0":"## Extracting JFK Airport dropoff's and pickup's\n* calculated haversine distance from pick up and drop off coordinates to jfk and subset dataset with less than 1km distance.","6f432d05":"# Eliminating Trend\n## Moving Average","e87080c4":"## MA model","729495bc":"## Fare amount distribution for jfk and non jfk trips","abe96f47":"## Decomposing","aaa642e6":"## Average fare amount by month","e3823ac1":"## Drop off locations by fare amount","072fa279":"## Pick up locations from JFK airport`","52844dcf":"## Finding distances based on Latitude and Longitude\n* The haversine formula determines the great-circle distance between two points on a sphere given their longitudes and latitudes.\n* Formula\n* dlon = lon2 - lon1 \n* dlat  = lat2 - lat1 \n* a = (sin(dlat\/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon\/2))^2 \n* c = 2 * atan2( sqrt(a), sqrt(1-a) ) \n* d = R * c (where R is the radius of the Earth)","0d9da4cc":"## scatter plot for distance and fare amount","43adf032":"## Visualizing time series","ad204485":"## Data Manipulation","3d2ba3c3":"## Average fare amount for jfk airport by year","e368beb8":"## Check stationarity of time series","fe7679b1":"## Dropoff locations for JFK Airport","3a2a8498":"## Trend in trips  by hour of day","59d141f0":"## NYC  Taxi Fare - Time series","2ebd36ab":"## Distribution plots for numerical features","d1c3b4ff":"## Pick up locations by fare amount","7e7f52c9":"## Trips with maximum distance (> 40 km)","c50569a2":"## Pick up locations by passenger count","3cdffea4":"## Total  trips , passengers and fare amount by year","b52dd335":"## Combined ARIMA model`","48be9d99":"# ARIMA Model\n## AR model","ff2cc569":"## Heat map for trips,passengers and fare amount by month year"}}