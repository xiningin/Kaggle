{"cell_type":{"4bd07b0d":"code","9ed8f87c":"code","72793920":"code","26cd2c2f":"code","90c1c1bf":"code","a843049b":"code","52ff7fea":"code","1a2c6507":"markdown","fc6bf044":"markdown"},"source":{"4bd07b0d":"import os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport skimage.io\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm","9ed8f87c":"def rle_encode(img):\n    '''\n    Source: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\n    --\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    runs = runs.astype(str).tolist()\n    return ' '.join(runs)\n\n\ndef rle_decode(mask_rle, shape):\n    '''\n    Source: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\n    --\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape)","72793920":"data_dir = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_images\/'\nmask_dir = '\/kaggle\/input\/prostate-cancer-grade-assessment\/train_label_masks\/'\nmask_files = os.listdir(mask_dir)","26cd2c2f":"mask = skimage.io.MultiImage(mask_dir + mask_files[0])\nimg = skimage.io.MultiImage(data_dir + mask_files[0].replace(\"_mask\", \"\"))\n\nfig, axes = plt.subplots(1, 5, figsize=(15, 3))\n\naxes[0].imshow(mask[-1][:, :, 0] == 1)\naxes[1].imshow(mask[-1][:, :, 0] == 2)\naxes[2].imshow(mask[-1][:, :, 0] == 3)\naxes[3].imshow(mask[-1][:, :, 0] == 4)\naxes[4].imshow(mask[-1][:, :, 0] == 5)","90c1c1bf":"encs = []\nshapes = []\n\nfile = mask_files[0]\n\nfor file in tqdm(mask_files):\n\n    mask = skimage.io.MultiImage(mask_dir + file)\n    enc = []\n\n    for n in range(1,6):\n        enc.append(rle_encode(mask[-1][:, :, 0] == n))\n\n    encs.append(enc)\n    shapes.append(mask[-1].shape)","a843049b":"rle_df = pd.DataFrame(encs,  columns=[f'mask_{i}' for i in range(1, 6)])\nrle_df['file'] = mask_files\nrle_df['shapes'] = shapes\nrle_df.head()","52ff7fea":"rle_df.to_csv('train_masks_rle.csv')","1a2c6507":"## Encode all train","fc6bf044":"## Visual verification"}}