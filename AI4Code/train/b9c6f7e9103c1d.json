{"cell_type":{"4212867e":"code","883fae0d":"code","9a203f85":"code","38e02217":"code","e834372c":"code","72fdde07":"code","a07cb486":"code","bdc8ba62":"code","c8ed6e85":"code","1a2e2fa6":"code","6fd853fb":"code","6f46eb94":"code","3d7756e0":"code","f94a6804":"code","2e215ea4":"code","f5fb1aa4":"code","6c0c6efc":"code","c72e75dc":"code","e3a077ea":"code","6d2cbe07":"code","f4b2411a":"code","fd15352f":"code","fe92474d":"code","bfa505a8":"code","dc02b314":"code","5a819881":"code","e5ba4f6b":"code","1e7e8ac7":"code","0de38ffa":"code","303156a4":"code","6cd4a86b":"code","74285b56":"code","608b9ff2":"code","94925543":"code","caf4a7f8":"code","830be421":"code","06ac651b":"code","2ff54ee8":"code","b48bdf78":"code","032d7194":"code","7e6955db":"code","490155f1":"code","996b174d":"code","560535f8":"code","f3afd235":"code","b82ba8f8":"code","452fea5c":"code","a865a504":"code","93abf2ee":"code","ea1a32e2":"code","6aa34e11":"code","ae684966":"code","24f79b98":"code","5f1a7160":"code","7c9e3271":"code","047204fb":"code","43e4303a":"code","ca3a8159":"code","7e1e4ab1":"code","6bcdf150":"code","5dd06f9c":"code","4557e7c7":"code","24492e0a":"code","2c55582d":"code","7b338c4e":"code","b8f097ce":"code","7b45ae3b":"code","12cde53f":"code","77fdf97f":"code","b2f14ec7":"code","bd52bfa7":"code","1d6704a1":"code","226695a5":"code","0046331e":"code","48e309dd":"code","fa23cc15":"code","a8af2cca":"code","763aee11":"code","dfa9adfd":"code","5cd2a97c":"code","ef9ec4af":"code","349680f3":"code","1b80cefc":"code","342723c7":"code","34e327f1":"code","8486a64e":"code","8ccf723d":"code","d0d96bc4":"code","483a3656":"code","84d2b1da":"code","0fe47f1c":"code","3f4027ec":"code","bb33fc4b":"code","42fc9401":"code","65efcf26":"code","9247cf58":"code","99d0f57f":"code","6dc11d0f":"code","53040a29":"code","0321b1a0":"code","b7f84355":"code","8af5625f":"code","6efc48a7":"code","8d02d884":"code","f844cc4e":"code","f6cfaea7":"markdown","110f5c8c":"markdown","3fc10dc2":"markdown","312cb103":"markdown","679340a0":"markdown","bbaff1a5":"markdown","ecde76eb":"markdown","9e49e127":"markdown","5ea2b03f":"markdown","fc8636b3":"markdown","dbaad121":"markdown","0bc5cacf":"markdown","41b78605":"markdown","5e1ff4f9":"markdown","22dc398d":"markdown","5e65de92":"markdown","6b81f924":"markdown","054993c3":"markdown","045248f0":"markdown","f050ebc6":"markdown","4192074c":"markdown","412b646e":"markdown","3be736cf":"markdown","bd2b12b9":"markdown","e2a64701":"markdown","f1f907d4":"markdown"},"source":{"4212867e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.model_selection import GridSearchCV, cross_val_score","883fae0d":"pd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)","9a203f85":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf = train.append(test).reset_index(drop=True)\ndf.head()","38e02217":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","e834372c":"check_df(df)","72fdde07":"df.isnull().sum()","a07cb486":"df.isnull().sum().sum()","bdc8ba62":"df[\"MSZoning\"].describe()\ndf['MSZoning'] = df.groupby('MSSubClass')['MSZoning'].apply(lambda x: x.fillna(x.mode()[0]))\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])","c8ed6e85":"df[\"TotalBsmtSF\"].value_counts()","1a2e2fa6":"df[df[\"TotalBsmtSF\"]==0]\nnan_to_zero=[]\nnan_to_zero.append(\"TotalBsmtSF\")","6fd853fb":"nan_to_zero.append(\"LotFrontage\")","6f46eb94":"nan_to_zero.append(\"Alley\")","3d7756e0":"def twice_col(df,col1,col2):\n    n=df[col1].unique().tolist()\n    l=len(n)\n    n1=df[col2].unique().tolist()\n    l1=len(n1)\n    for i in n:\n        for j in range(l):\n            for z in n1:\n                for t in range(l1):\n                    df.loc[(df[col1] == n[j]) & (df[col2] == n1[t]), str(col1) + \"_\" + str(col2)]=str(n[j]) + str(n1[t])","f94a6804":"twice_col(df,\"Heating\",\"Electrical\")","2e215ea4":"df[df[\"Utilities\"].isna()]['Heating_Electrical']\ndf.groupby(['Heating_Electrical'])[\"Utilities\"].agg(pd.Series.mode)\ndf[\"Utilities\"].value_counts()\ndf[\"Utilities\"]=df[\"Utilities\"].fillna(\"AllPub\")\ndf[\"Utilities\"].isnull().sum()","f5fb1aa4":"df[['PoolArea',\"PoolQC\",]].head()\nnan_to_zero.append(\"PoolQC\")\nnan_to_zero.append('PoolArea')","6c0c6efc":"nan_to_zero.append(\"MiscFeature\")\nnan_to_zero.append(\"Fence\")\nnan_to_zero.append(\"FireplaceQu\")","c72e75dc":"nan_to_zero.append(\"GarageQual\")\nnan_to_zero.append(\"GarageFinish\")","e3a077ea":"df[df[\"GarageYrBlt\"].isnull()][[\"GarageYrBlt\",\"GarageType\"]]\ndf.loc[df[\"GarageYrBlt\"].isnull(),\"GarageType\"]=\"None\"","6d2cbe07":"nan_to_zero.append(\"GarageYrBlt\")\ndf[\"BsmtExposure\"].value_counts()\ndf[\"BsmtExposure\"].isnull().sum()\nnan_to_zero.append(\"BsmtExposure\")","f4b2411a":"nan_to_zero.append(\"BsmtQual\")\nnan_to_zero.append(\"BsmtFinType1\")\nnan_to_zero.append(\"BsmtFinType2\")","fd15352f":"df.loc[df[\"MasVnrType\"].isnull(),\"MasVnrArea\"].notnull()\ndf.loc[df[\"MasVnrArea\"].isnull(),\"MasVnrType\"]\ndf.loc[df[\"MasVnrArea\"].isnull(),\"MasVnrType\"]=\"None\"\ndf[df[\"MasVnrType\"]==\"None\"][\"MasVnrArea\"]","fe92474d":"nan_to_zero.append(\"MasVnrArea\")\nnan_to_zero.append(\"GarageCond\")\nnan_to_zero.append(\"BsmtFullBath\")\nnan_to_zero.append(\"BsmtHalfBath\")","bfa505a8":"for i in nan_to_zero:\n    if i != \"SalePrice\":\n        print(df[i].head())","dc02b314":"for col in nan_to_zero:\n    if df[col].dtype == \"O\":\n        df.loc[df[col].isnull(), col] = \"None\"\n    else:\n        df.loc[df[col].isnull(), col] = 0","5a819881":"df.isnull().sum()","e5ba4f6b":"na_cols = [col for col in df.columns if df[col].isnull().sum() > 0]","1e7e8ac7":"for i in na_cols:\n    if i != \"SalePrice\":\n        print(df[i].head())","0de38ffa":"for col in na_cols:\n    if col!=\"SalePrice\":\n        if df[col].dtype==\"O\":\n            df.loc[df[col].isnull(), col] = \"None\"\n        else:\n            df.loc[df[col].isnull(),col]=0","303156a4":"df['YearBuilt'].describe()\ndf[\"GarageYrBlt\"].describe()","6cd4a86b":"df.loc[df[\"GarageYrBlt\"]==2207]","74285b56":"df.loc[df[\"GarageYrBlt\"]==2207,\"GarageYrBlt\"]=2007","608b9ff2":"sns.boxplot(df[\"SalePrice\"])\nplt.show()","94925543":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","caf4a7f8":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","830be421":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","06ac651b":"for i in num_cols:\n    outlier_thresholds(df, i, q1=0.1, q3=0.90)","2ff54ee8":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","b48bdf78":"for i in num_cols:\n    replace_with_thresholds(df,i)","032d7194":"sns.boxplot(df[\"SalePrice\"])\nplt.show()","7e6955db":"def find_correlation(dataframe, numeric_cols, corr_limit=0.60):\n    high_correlations = []\n    low_correlations = []\n    for col in numeric_cols:\n        if col == \"SalePrice\":\n            pass\n        else:\n            correlation = dataframe[[col, \"SalePrice\"]].corr().loc[col, \"SalePrice\"]\n            print(col, correlation)\n            if abs(correlation) > corr_limit:\n                high_correlations.append(col + \": \" + str(correlation))\n            else:\n                low_correlations.append(col + \": \" + str(correlation))\n    return low_correlations, high_correlations","490155f1":"find_correlation(df, num_cols)","996b174d":"df[\"newww\"]=df[\"TotalBsmtSF\"]*df[\"OverallQual\"]\ndf[\"NEW_area\"]=df['1stFlrSF']+df[\"2ndFlrSF\"]","560535f8":"def new_sorting(df,col,old,new):\n    maps={}\n    n=len(old)\n    for i in range(n):\n        maps.setdefault(old[i],new[i])\n    df[col] = df[col].map(maps).astype(int)","f3afd235":"df[\"Functional\"].head()\ndf[\"Functional\"].unique()\ndf.groupby([\"Functional\"])[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"Functional\"].value_counts()\nnew_sorting(df,\"Functional\",['Typ', 'Min1', 'Maj1', 'Min2', 'Mod', 'Maj2', 'Sev', 'None'],[6,5,5,4,5,5,3,1])","b82ba8f8":"df[\"new_sey\"]=df[\"YrSold\"]-df[\"YearBuilt\"]\ndf[\"new_sey2\"]=df[\"YrSold\"]-df[\"YearRemodAdd\"]\n\ndf[\"MoSold\"]=[int(i) for i in df[\"MoSold\"]]\ndf[\"MoSold\"].describe()","452fea5c":"for i in range(df.shape[0]):\n    if df.loc[i,\"MoSold\"] in [12,1,2]:\n        df.loc[i,\"season\"]=1\n    elif df.loc[i,\"MoSold\"] in [3,4,5]:\n        df.loc[i, \"season\"] = 2\n    elif df.loc[i,\"MoSold\"] in [6,7,8]:\n        df.loc[i, \"season\"] = 3\n    else:\n        df.loc[i, \"season\"] = 4","a865a504":"df[\"new\"]=df[\"TotRmsAbvGrd\"]+df[\"FullBath\"]+df[\"HalfBath\"]+df[\"BsmtFullBath\"]+df[\"BsmtHalfBath\"]","93abf2ee":"def generate(df,c,a,b,t,y,y1,y2):\n    df.loc[(df[c] < a), t] = y\n    df.loc[(df[c] >= a) & (df[c] < b), t] = y1\n    df.loc[(df[c] >= b), t] = y2\n    return df[t]","ea1a32e2":"df[\"new2\"]=df[\"BsmtUnfSF\"]\/df[\"TotalBsmtSF\"]\ndf[\"new2\"].describe()\ngenerate(df,\"new2\",0.21,0.47,\"new2_new\",3,2,1)","6aa34e11":"df[\"BsmtFinType1\"].unique()","ae684966":"new_sorting(df,\"BsmtFinType1\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ', 'None', 'LwQ'],[5,4,1,3,3,0,2])\nnew_sorting(df,\"BsmtFinType2\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ', 'None', 'LwQ'],[5,4,1,3,3,0,2])\ndf[\"new3\"]=df[\"BsmtFinType1\"]+df[\"BsmtFinType2\"]","24f79b98":"df[\"new4\"]=df[\"GrLivArea\"]\/df[\"LotArea\"]","5f1a7160":"df[\"new5\"]=df[\"YrSold\"]-df[\"GarageYrBlt\"]\ndf[\"new7\"]=df[\"GarageCars\"]*df[\"GarageArea\"]\ndf[\"new8\"]=df['OverallQual']*df['OverallCond']","7c9e3271":"df[\"new9\"]=df[\"TotRmsAbvGrd\"]+df[\"HalfBath\"]+df['FullBath']","047204fb":"df[\"new10\"]=(df['BsmtFinSF1']+df[\"BsmtFinSF2\"])\/df[\"TotalBsmtSF\"]","43e4303a":"generate(df,\"new10\",0.41,0.71,\"new10_new\",1,2,3)","ca3a8159":"df[\"new11\"]=df[\"KitchenAbvGr\"]+df[\"BedroomAbvGr\"]","7e1e4ab1":"new_sorting(df,\"PavedDrive\",[\"Y\",\"P\",\"N\"],[3,2,1])\ndf[\"PavedDrive\"]\ndf[\"new_quality\"]=df['WoodDeckSF']+df['OpenPorchSF']+df['EnclosedPorch']+df['3SsnPorch']+df['ScreenPorch']+df['PoolArea']","6bcdf150":"new_sorting(df,\"LotShape\",[\"Reg\",\"IR1\",\"IR2\",\"IR3\"],[4,3,2,1])\nnew_sorting(df,\"LandContour\",[\"Lvl\",\"Bnk\",\"HLS\",\"Low\"],[4,3,2,1])\ndf['LotConfig'].unique()\nnew_sorting(df,\"LotConfig\",['Inside','Corner','CulDSac','FR2','FR3'],[2,3,1,4,5])","5dd06f9c":"df['BldgType'].unique()\nnew_sorting(df,'BldgType',['1Fam', '2fmCon', 'Duplex', 'TwnhsE', 'Twnhs'],[1,2,2,3,3])","4557e7c7":"df.groupby(\"HouseStyle\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"HouseStyle\"].unique()","24492e0a":"new_sorting(df,\"HouseStyle\",['2Story', '1Story', '1.5Fin', '1.5Unf', 'SFoyer', 'SLvl', '2.5Unf',\n       '2.5Fin'],[7,6,3,1,2,5,4,8])\ndf['GarageType'].unique()\nnew_sorting(df,'GarageType',['Attchd', 'Detchd', 'BuiltIn', 'CarPort', 'None', 'Basment',\n       '2Types'],[3,5,2,1,0,4,5])","2c55582d":"df[\"GarageFinish\"].unique()","7b338c4e":"new_sorting(df,\"GarageFinish\",['RFn', 'Unf', 'Fin', 'None']\n,[2,1,3,0])","b8f097ce":"df.loc[(df[df[\"KitchenQual\"]==\"None\"].index),\"KitchenQual\"]=\"Po\"\ndf.loc[(df[df['BsmtQual']==\"None\"].index),'BsmtQual']=\"Po\"\ndf.loc[(df[df[\"BsmtExposure\"]==\"None\"].index),\"BsmtExposure\"]=\"Po\"\ndf.loc[(df[df[\"PoolQC\"]==\"None\"].index),\"PoolQC\"]=\"Po\"","7b45ae3b":"old=[\"Ex\",\"Gd\",\"TA\",\"Fa\",\"Po\",\"NA\",\"No\",\"Av\",\"Mn\",'None',0]\nnew=[5,4,3,2,1,0,0,2,1,0,0]\nfor col in [\"ExterCond\",\"HeatingQC\",\"KitchenQual\",\"PoolQC\",\"FireplaceQu\",'BsmtCond','BsmtQual',\"BsmtExposure\",\"ExterQual\",\"GarageQual\",\"GarageCond\"]:\n    new_sorting(df,col,old,new)","12cde53f":"df[\"BsmtFinType1\"].value_counts()\ndf.groupby([\"BsmtFinType1\"])[\"SalePrice\"].mean().sort_values(ascending=False)\ndf.groupby([\"BsmtFinType2\"])[\"SalePrice\"].mean().sort_values(ascending=False)","77fdf97f":"df['PoolArea']=[1 if i>0 else 0 for i in df['PoolArea']]\ndf['GarageCars']=[1 if i>0 else 0 for i in df['GarageCars']]\ndf['Fireplaces']=[1 if i>0 else 0 for i in df['Fireplaces']]\ndf[\"CentralAir\"]=[1 if i==\"Y\" else 0 for i in df[\"CentralAir\"]]\ndf[\"MiscFeature\"]=[0 if i==\"None\" else 1 for i in df[\"MiscFeature\"]]","b2f14ec7":"df.groupby(\"MSZoning\")[[\"SalePrice\"]].mean()\ndf[\"MSZoning\"].unique()\nnew_sorting(df,\"MSZoning\",[\"C (all)\",'RL','RM','FV','RH'],[1,5,3,4,2])\nnew_sorting(df,\"Alley\",[\"Grvl\",\"Pave\",'None'],[1,2,0])","bd52bfa7":"df[\"Utilities\"].unique()\ndf[\"Utilities\"]=[2 if i=='AllPub' else 1 for i in df[\"Utilities\"]]","1d6704a1":"df[\"LandSlope\"].unique()\nnew_sorting(df,\"LandSlope\",[\"Gtl\",\"Mod\",'Sev'],[3,2,1])\ndf.groupby([\"Neighborhood\"])[\"SalePrice\"].mean().sort_values(ascending=False)\ndf[\"Neighborhood\"].unique()\nold=['CollgCr', 'Veenker', 'Crawfor', 'NoRidge', 'Mitchel', 'Somerst',\n       'NWAmes', 'OldTown', 'BrkSide', 'Sawyer', 'NridgHt', 'NAmes',\n       'SawyerW', 'IDOTRR', 'MeadowV', 'Edwards', 'Timber', 'Gilbert',\n       'StoneBr', 'ClearCr', 'NPkVill', 'Blmngtn', 'BrDale', 'SWISU',\n       'Blueste']\nnew=[5,9,6,12,4,8,5,2,2,3,11,4,5,1,1,2,9,5,10,7,4,5,1,4,3]\nnew_sorting(df,\"Neighborhood\",old,new)","226695a5":"df[\"newfeac\"]=df['KitchenAbvGr']*df['KitchenQual']\ndf[\"newfeac2\"]=df['Fireplaces']*df['FireplaceQu']\ndf[\"Fence\"].unique()\nnew_sorting(df,\"Fence\",['None', 'MnPrv', 'GdWo', 'GdPrv', 'MnWw'],[0,1,2,2,1])","0046331e":"df[\"Street\"]=[0 if i == \"Gravel\" else 1 for i in df[\"Street\"]]","48e309dd":"new_sorting(df,\"Heating\",['GasA', 'GasW', 'Grav', 'Wall', 'OthW', 'Floor'],[3,3,1,2,3,1])","fa23cc15":"df[\"RoofStyle\"].unique()\nnew_sorting(df,\"RoofStyle\",['Gable', 'Hip', 'Gambrel', 'Mansard', 'Flat', 'Shed']\n,[4,2,2,1,3,1])","a8af2cca":"df.groupby(\"RoofMatl\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"RoofMatl\"].unique()\nnew_sorting(df,\"RoofMatl\",['CompShg', 'WdShngl', 'Metal', 'WdShake', 'Membran', 'Tar&Grv',\n       'Roll', 'ClyTile'],[3,6,4,5,5,4,1,2])","763aee11":"df[\"Electrical\"].unique()\ndf.groupby(\"Electrical\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)","dfa9adfd":"new_sorting(df,\"Electrical\",['SBrkr', 'FuseF', 'FuseA', 'FuseP', 'Mix', 'None'],[5,2,3,1,0,4])\ndf.groupby(\"SaleType\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"SaleType\"].value_counts()\ndf[\"SaleType\"].unique()","5cd2a97c":"new_sorting(df,\"SaleType\",['WD', 'New', 'COD', 'ConLD', 'ConLI', 'CWD', 'ConLw', 'Con', 'Oth',\n       'None'],[5,8,4,2,6,7,3,9,1,0])","ef9ec4af":"df.groupby(\"SaleCondition\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"SaleCondition\"].value_counts()\ndf[\"SaleCondition\"].unique()\ndf.head()\nnew_sorting(df,\"SaleCondition\",['Normal', 'Abnorml', 'Partial', 'AdjLand', 'Alloca', 'Family'],[4,2,5,1,3,2])","349680f3":"df.groupby(\"Foundation\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"Foundation\"].unique()\nnew_sorting(df,\"Foundation\",['PConc', 'CBlock', 'BrkTil', 'Wood', 'Slab', 'Stone'],[5,2,1,4,0,3])\n\ndf[\"MasVnrType\"].unique()\ndf.groupby(\"MasVnrType\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\n# ['BrkFace', 'None', 'Stone', 'BrkCmn']\nnew_sorting(df,\"MasVnrType\",['BrkFace', 'None', 'Stone', 'BrkCmn'],[3,2,4,1])\ndf[\"Condition1\"].unique()\nnew_sorting(df,\"Condition1\",['Norm', 'Feedr', 'PosN', 'Artery', 'RRAe', 'RRNn', 'RRAn', 'PosA',\n       'RRNe'],[2,1,3,1,1,3,2,3,2])\nnew_sorting(df,\"Condition2\",['Norm', 'Feedr', 'PosN', 'Artery', 'RRAe', 'RRNn', 'RRAn', 'PosA',\n       'RRNe'],[2,1,3,1,1,3,2,3,2])","1b80cefc":"df[\"Exterior1st\"].value_counts()\ndf[\"Exterior1st\"].unique()\ndf.groupby(\"Exterior1st\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)","342723c7":"new_sorting(df,\"Exterior1st\",['VinylSd', 'MetalSd', 'Wd Sdng', 'HdBoard', 'BrkFace', 'WdShing',\n       'CemntBd', 'Plywood', 'AsbShng', 'Stucco', 'BrkComm', 'AsphShn',\n       'Stone', 'ImStucc', 'CBlock'],[7,3,3,4,6,3,8,5,2,4,1,2,9,10,2])","34e327f1":"df.loc[(df[\"Exterior2nd\"]==\"Other\"),\"Exterior2nd\"]='ImStucc'\nnew_sorting(df,\"Exterior2nd\",['VinylSd', 'MetalSd', 'Wd Shng', 'HdBoard', 'Plywood', 'Wd Sdng',\n       'CmentBd', 'BrkFace', 'Stucco', 'AsbShng', 'Brk Cmn', 'ImStucc',\n       'AsphShn', 'Stone', 'CBlock'],[7,3,3,4,5,3,8,6,4,2,1,10,2,9,2])","8486a64e":"df.head()","8ccf723d":"check_df(df)","d0d96bc4":"useless_cols = [col for col in cat_cols if df[col].nunique() == 1 or\n                (df[col].nunique() == 2 and (df[col].value_counts() \/ len(df) <= 0.01).any(axis=None))]\n\ncat_cols = [col for col in cat_cols if col not in useless_cols]\n\n\nfor col in useless_cols:\n    df.drop(col, axis=1, inplace=True)","483a3656":"df.drop(\"Heating_Electrical\",axis=1,inplace=True)","84d2b1da":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\ncat_cols = cat_cols + cat_but_car","0fe47f1c":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","3f4027ec":"df = one_hot_encoder(df, cat_cols, drop_first=True)\n\ncat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nuseless_cols_new = [col for col in cat_cols if (df[col].value_counts() \/ len(df) <= 0.01).any(axis=None)]","bb33fc4b":"df[useless_cols_new].head()","42fc9401":"train_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()].drop(\"SalePrice\", axis=1)\ny = np.log1p(train_df['SalePrice'])\nX = train_df.drop([\"Id\", \"SalePrice\"], axis=1)","65efcf26":"models = [('LR', LinearRegression()),\n          (\"Ridge\", Ridge()),\n          (\"Lasso\", Lasso()),\n          (\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          ('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor()),\n          (\"CatBoost\", CatBoostRegressor(verbose=False))]","9247cf58":"for name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")","99d0f57f":"lgbm_model = LGBMRegressor(random_state=46)\n\nrmse = np.mean(np.sqrt(-cross_val_score(lgbm_model,\n                                        X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n\n\nlgbm_params = {\"learning_rate\": [0.01,0.02,0.03,0.05,0.1, 0.2],\n               \"n_estimators\": [100,200,300,500,1000,1200,1500],\n               \"colsample_bytree\": [0.2,0.3,0.5, 0.7,0.8,0.9,1]}\n\n\nlgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=3,\n                            n_jobs=-1,\n                            verbose=True).fit(X, y)\n","6dc11d0f":"final_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X, y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(final_model, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n\nrmse","53040a29":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')","0321b1a0":"plot_importance(final_model, X, 20)","b7f84355":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)","8af5625f":"feature_imp = pd.DataFrame({'Value': final_model.feature_importances_, 'Feature': X.columns})\n\nfeature_imp[feature_imp[\"Value\"] > 0].shape\n\nfeature_imp[feature_imp[\"Value\"] < 1].shape\n\n\nzero_imp_cols = feature_imp[feature_imp[\"Value\"] < 1][\"Feature\"].values\n","6efc48a7":"selected_cols = [col for col in X.columns if col not in zero_imp_cols]","8d02d884":"lgbm_model = LGBMRegressor(random_state=46)\n\nlgbm_params = {\"learning_rate\": [0.01,0.02,0.03,0.05,0.1, 0.2],\n               \"n_estimators\":  [100,200,300,500,1000,1200,1500],\n               \"colsample_bytree\": [0.2,0.3,0.5, 0.7,0.8,0.9,1]}\n\nlgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=3,\n                            n_jobs=-1,\n                            verbose=True).fit(X[selected_cols], y)\n\n\nfinal_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X[selected_cols], y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(final_model, X[selected_cols], y, cv=5, scoring=\"neg_mean_squared_error\")))","f844cc4e":"rmse","f6cfaea7":"> Kaliteli \u00f6zellikler \u00fcretebilmek i\u00e7in columnlar\u0131n saleprice ba\u011f\u0131ml\u0131 de\u011fi\u015fkeniyle olan korelasyonuna bak\u0131l\u0131r.","110f5c8c":"> Test ve train seti birle\u015ftirildi\u011finden test setindeki sales de\u011ferleri bo\u015f gelecektir onun d\u0131\u015f\u0131nda birka\u00e7 columnda daha bo\u015f de\u011fer oldu\u011fu g\u00f6r\u00fcnmekte onlar da d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcr.","3fc10dc2":"> Kategorik columnlar modele girebilmek i\u00e7in encoding i\u015flemine tabi tutulur.","312cb103":"> Bir evde havuz varsa 1 d\u00f6nd\u00fcr\u00fcr yoksa 0 d\u00f6nd\u00fcr\u00fcr\nAyn\u0131 \u015fekilde garaj varsa 1 yoksa 0 d\u00f6nd\u00fcr\u00fcr.\nDi\u011fer feature'lar da ayn\u0131 mant\u0131kla olu\u015fturulur.","679340a0":"**Ama\u00e7: Her bir eve ait \u00f6zelliklerin ve ev fiyatlar\u0131n\u0131n bulundu\u011fu veriseti kullan\u0131larak, farkl\u0131 tipteki\nevlerin fiyatlar\u0131na ili\u015fkin bir makine \u00f6\u011frenmesi projesi ger\u00e7ekle\u015ftirilmek istenmektedir.**","bbaff1a5":"> G\u00f6zlemlerdeki kategorik bilgi ta\u015f\u0131yan veriler say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcr b\u00f6ylelikle aralar\u0131nda ordinallik sa\u011flan\u0131r.Bu i\u015flem bir\u00e7ok column'a uygulanaca\u011f\u0131ndan ayn\u0131 i\u015flemleri tekrar etmemek ad\u0131na bir fonksiyon olu\u015fturulur.","ecde76eb":"> \"PoolArea\" : Havuzun alan \u00f6l\u00e7\u00fcs\u00fc. \n> \"PoolQC\" : Havuzun kalitesi hakk\u0131nda bilgi.\n> Bu de\u011fi\u015fkenlerdeki bo\u015f de\u011ferler de o evde havuz olmad\u0131\u011f\u0131n\u0131 g\u00f6steriyor ayn\u0131 \u015fekilde listeye eklenir.","9e49e127":"> \"TotalBsmtSF\" : Toplam bodrum y\u00fcz\u00f6l\u00e7\u00fcm\u00fcn\u00fc veriyor.Buradaki nan de\u011ferler o evde bodrum olmad\u0131\u011f\u0131n\u0131 g\u00f6steriyor eksik g\u00f6zlem de\u011fil, b\u00f6yle bir\u00e7ok de\u011fi\u015fken oldu\u011fundan bir liste olu\u015fturulur t\u00fcm columnlar incelendikten sonra hepsi for d\u00f6ng\u00fcs\u00fcyle nan'dan 0'a \u00e7evrilir. ","5ea2b03f":"> Ve tipi object olan columnlardaki bo\u015f de\u011ferler none ile object olmayanlar\u0131n bo\u015f de\u011ferleri ise 0 ile doldurulur.","fc8636b3":"> Test ve train seti olarak ayr\u0131lan veri setini birle\u015ftirme","dbaad121":" > Model kurulur.","0bc5cacf":"> Bo\u015f de\u011fer kontrol\u00fc","41b78605":"> GrLivArea : Oturma alan\u0131 metre karesi. (ya\u015fam alan\u0131)\nLotArea: Eve ait arsan\u0131n alan \u00f6l\u00e7\u00fcm\u00fcn\u00fc veriyor.\nBu \u00f6zellik de toplam ya\u015fam alan\u0131n\u0131n toplam evin alan\u0131na(arsa) oran\u0131n\u0131 veriyor.","5e1ff4f9":"> MSZoning: \u0130mar s\u0131n\u0131fland\u0131rmas\u0131n\u0131 veriyor.\n> MSSubClass : Evlerin stili hakk\u0131nda bilgi veriyor.\n> MSZoning'deki bo\u015f de\u011ferleri evlerin stili hakk\u0131ndaki bilgiyi veren de\u011fi\u015fkene g\u00f6re grupland\u0131r\u0131p kategorik de\u011fi\u015fken oldu\u011fundan mode'u ile dolduruyoruz. \u00c7\u00fcnk\u00fc evlerin stiliyle kullan\u0131lma amac\u0131 aras\u0131nda bir ili\u015fki vard\u0131r bu mant\u0131\u011fa uygun.","22dc398d":"> Toplam bo\u015f de\u011fer say\u0131s\u0131","5e65de92":"> Ayn\u0131 \u015fekilde baz\u0131 columnlarda ise \u00e7eyreklik de\u011ferlerine g\u00f6re bir s\u0131ralama yap\u0131lmak istendi\u011finden ve bu i\u015flem bir\u00e7ok kez tekrarlanaca\u011f\u0131ndan b\u00f6yle bir fonksiyon olu\u015fturulur.","6b81f924":"> Roofstyle de\u011fi\u015fkeni \u00e7at\u0131lar\u0131n \u00f6zelliklerini belirtmektedir \u00e7at\u0131 g\u00f6rsellerine ve saleprice'a g\u00f6re ortalamalara bak\u0131ld\u0131\u011f\u0131nda bu \u015fekilde bir s\u0131ralama elde edilir.","054993c3":"> Listede bulunan de\u011fi\u015fkenler hakk\u0131nda bilgi sahibi olunmas\u0131 ve type bilgisine ula\u015f\u0131lmas\u0131 i\u00e7in head at\u0131l\u0131r","045248f0":"> Bu i\u015flem sonras\u0131nda \u00f6nem d\u00fczeylerine bak\u0131lan \u00f6zelliklerin \u00f6nemlileriyle tekrar bir model kurulur. Bu \u015fekilde hata azalt\u0131lmaya \u00e7al\u0131\u015f\u0131l\u0131r.","f050ebc6":"> LightGBM ile hiperparametre optimizasyonu yap\u0131l\u0131r \u00f6rne\u011fin learning rate parametresine girilen bir\u00e7ok de\u011fer di\u011fer iki parametredeki de\u011ferlerin her biriyle i\u015fleme sokulur bunu sa\u011flayan GridSearchCV'dir ve en d\u00fc\u015f\u00fck hatay\u0131 veren parametre de\u011ferleri lgbm_best_params olarak atan\u0131r. Model en iyi parametrelerle tekrar kurulur ve rmse(hata de\u011feri) tekrar hesaplan\u0131r.","4192074c":"> Y\u0131l de\u011fi\u015fkeninde g\u00fcr\u00fclt\u00fcl\u00fc bir veri var bu g\u00f6zlemin sat\u0131\u015f y\u0131l\u0131na bak\u0131ld\u0131\u011f\u0131nda 2007 yazd\u0131\u011f\u0131 g\u00f6r\u00fclmektedir \u00e7ok b\u00fcy\u00fck ihtimal garaj yap\u0131m y\u0131l\u0131 da 2007 olacakt\u0131r, d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcr.","412b646e":"> Olu\u015fturulan yeni \u00f6zelliklerin \u00f6nem d\u00fczeylerine plot_importance fonksiyonuyla eri\u015filir","3be736cf":"> Ayk\u0131r\u0131 de\u011ferler bask\u0131lan\u0131r.","bd2b12b9":"> Gereksiz columnlar silinir.","e2a64701":"> Veri hakk\u0131nda bilgi edinme","f1f907d4":"> Gerekli k\u00fct\u00fcphanelerin import edilmesi"}}