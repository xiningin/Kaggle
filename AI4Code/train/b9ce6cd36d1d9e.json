{"cell_type":{"805a7275":"code","7df29b1c":"code","bd06a7bd":"code","69cb0c00":"code","b1e87e47":"code","28101479":"code","cbed3c9b":"code","e1402d65":"code","b10ec103":"code","39e16034":"code","d128fe99":"code","d99c77e2":"code","b85c2b0e":"code","f9462a8a":"code","55e856e7":"code","7a696b7b":"code","d5a1410f":"markdown","5eb382e5":"markdown","e74e316f":"markdown","5a49c6ed":"markdown","c4316fbf":"markdown","6d0e7a07":"markdown","6311c6df":"markdown","9c608352":"markdown","bbf65063":"markdown","ad71767c":"markdown","e025a1f9":"markdown","a5168c04":"markdown","c1cd1916":"markdown","9f65d5c0":"markdown"},"source":{"805a7275":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7df29b1c":"! DIR=\/kaggle\/input\/air-quality-index-india; for file in `ls $DIR`; do cp $DIR\/$file ~\/$file.csv; done","bd06a7bd":"!ls -l ~\/*.csv","69cb0c00":"import pandas as pd\nimport numpy as np","b1e87e47":"cheDf=pd.read_csv(\"~\/Chennai_AQI_Dec19_Mar20.csv\", index_col=0)\nhydDf=pd.read_csv(\"~\/Hyderabad_AQI_Dec19_Mar20.csv\", index_col=0)\nkolDf=pd.read_csv(\"~\/Kolkata_AQI_Dec19_Mar20.csv\", index_col=0)\nmumDf=pd.read_csv(\"~\/Mumbai_AQI_Dec19_Mar20.csv\", index_col=0)\ndelDf=pd.read_csv(\"~\/NewDelhi_AQI_Dec19_Mar20.csv\", index_col=0)","28101479":"cheDf\n","cbed3c9b":"def getDates(df):\n    return [(str(row[0])+str(row[1]).zfill(2)+str(row[2]).zfill(2)) for row in np.asarray(df[[\"Year\",\"Month\",\"Day\",\"Hour\"]])]","e1402d65":"cheDf[\"Date\"]=getDates(cheDf)\nhydDf[\"Date\"]=getDates(hydDf)\nkolDf[\"Date\"]=getDates(kolDf)\nmumDf[\"Date\"]=getDates(mumDf)\ndelDf[\"Date\"]=getDates(delDf)","b10ec103":"cheDf.columns","39e16034":"che_hour_Df=cheDf.groupby(\"Hour\").mean()\nche_hour_Df[\"Hour\"]=che_hour_Df.index\n\nche_hour_Df\n","d128fe99":"import matplotlib.pyplot as plt; plt.rcdefaults()\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plotHist(x,y,df):\n    _Df=df.groupby(x).mean()\n    _Df[x]=_Df.index\n    city=df[\"Site\"][:1][0]\n    df=_Df\n    objects = df[x]\n    y_pos = np.arange(len(objects))\n    performance = df[y]\n\n    plt.bar(y_pos, performance, align='center', alpha=0.5)\n    plt.xticks(y_pos, objects)\n    plt.ylabel(y)\n    plt.xlabel(x)\n    plt.title(y+ \"-\" +str(city))\n    plt.show()","d99c77e2":"plotHist(\"Hour\",\"AQI\",cheDf)\nplotHist(\"Hour\",\"AQI\",kolDf)\nplotHist(\"Hour\",\"AQI\",hydDf)\n\nplotHist(\"Month\",\"AQI\",cheDf)\nplotHist(\"Month\",\"AQI\",kolDf)\nplotHist(\"Month\",\"AQI\",hydDf)\n","b85c2b0e":"def plotSactterPlot(x,y,df):\n    city=df[\"Site\"][0:1][0]\n    X = df[x]\n    Y = df[y]\n    #colors = (0,0,0)\n    area = np.pi*3\n\n    # Plot\n    #plt.scatter(x, y, s=area, c=colors, alpha=0.5)\n    plt.scatter(X, Y, alpha=0.5)\n    plt.title('Scatter plot:'+x+\" vs \"+y+\" for \"+ str(city))\n    plt.xlabel(x)\n    plt.ylabel(y)\n    plt.show()","f9462a8a":"plotSactterPlot(\"NowCast Conc.\",\"Raw Conc.\",hydDf)\nplotSactterPlot(\"NowCast Conc.\",\"Raw Conc.\",cheDf)\nplotSactterPlot(\"NowCast Conc.\",\"Raw Conc.\",kolDf)\nplotSactterPlot(\"NowCast Conc.\",\"Raw Conc.\",delDf)\nhydDf","55e856e7":"def plotLinePlot(x,y,df):\n    city=df[\"Site\"][0:1][0]\n    X = df[x]\n    Y = df[y]\n    #colors = (0,0,0)\n    area = np.pi*3\n\n    # Plot\n    #plt.scatter(x, y, s=area, c=colors, alpha=0.5)\n    plt.plot(X, df[y], linestyle='solid')\n    plt.plot(X, df[y], linestyle='solid')\n    plt.title('Line plot:'+x+\" vs \"+y+\" for \"+ str(city))\n    plt.xlabel(x)\n    plt.ylabel(y)\n    plt.show()\n","7a696b7b":"plotLinePlot(\"Date\",\"Raw Conc.\",hydDf)\nplotLinePlot(\"Date\",\"NowCast Conc.\",hydDf)\n","d5a1410f":"# Now Draw them.","5eb382e5":"# I wanted to create a column that had the year, month and date in one column","e74e316f":"# How about some Line Plots or whatever they're supposed to be called?","5a49c6ed":"# Lets see if the data is loaded properly","c4316fbf":"# Lets try createing some histograms now.","6d0e7a07":"# Lets draw some scatterplots","6311c6df":"# This was a simple Notebook to explore the data. You could use those functions and the code herein to create more sophisticated visualizations","9c608352":"# Lets read the files now to dataframes. For simplicity I read the files into their own dataframes. We could combine them all into one.","bbf65063":"# A function to create a scatterplot now","ad71767c":"# Again validate the newly added column, shall we?","e025a1f9":"# Lets create a function to create a a Histogram.","a5168c04":"# I think I will rename the files to have an extension of .csv.\n# That way I know that they are csv files. I also copied them to my home folder.","c1cd1916":"# What files do we have? Can we see them?","9f65d5c0":"# This is how we got hourly, mean of the data.\n# We could use this for ather aggregation."}}