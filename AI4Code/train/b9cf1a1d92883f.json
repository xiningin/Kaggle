{"cell_type":{"7a983585":"code","cd4a6450":"code","2eb559b7":"code","8fb14405":"code","df26291a":"code","7fdaa4d8":"code","ff2d94fd":"code","0c75ac97":"code","1b3cdd1e":"code","b7ce564c":"code","31752028":"code","275a157a":"code","fbffa5c0":"code","7a079106":"code","458b9218":"code","d3a2e06c":"code","94b6ed9f":"code","1f9fa6c1":"code","85fe13cd":"code","c9b631bf":"code","7ac2bcf2":"code","c31358fb":"code","d78a5f85":"code","09e17107":"code","d2fb45cd":"code","23ce58b0":"code","26795cec":"code","1aeb4c13":"code","69b658b2":"code","2aec5d36":"code","eb6d708e":"code","971d3983":"code","9244aac3":"code","80215744":"code","6216daf7":"code","96a9b2f3":"code","5029628a":"code","ca1ad1db":"code","ce25bca5":"code","45d60e3c":"code","7186862d":"code","1d6f5ee5":"code","68aaae19":"markdown","bb994b45":"markdown","49c27df4":"markdown","d9c2472f":"markdown","f794307b":"markdown","d06a2f04":"markdown","4ae89f3e":"markdown","e5114e75":"markdown","b8e8916a":"markdown"},"source":{"7a983585":"#Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\nimport re\nfrom nltk.corpus import stopwords\nfrom sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer","cd4a6450":"#reading the dataset\nzomato_real=pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")\nzomato_real.head() # prints the first N rows of a DataFrame","2eb559b7":"zomato_real.info()","8fb14405":"#Deleting Unnnecessary Columns\nzomato=zomato_real.drop(['url','dish_liked','phone'],axis=1) #Dropping the column \"dish_liked\", \"phone\", \"url\" and saving the new dataset as \"zomato\"","df26291a":"#Removing the Duplicates\nzomato.duplicated().sum()\nzomato.drop_duplicates(inplace=True)","7fdaa4d8":"#Remove the NaN values from the dataset\nzomato.isnull().sum()\nzomato.dropna(how='any',inplace=True)\nzomato.info() #.info() function is used to get a concise summary of the dataframe","ff2d94fd":"#Reading Column Names\nzomato.columns","0c75ac97":"#Changing the column names\nzomato = zomato.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',\n                                  'listed_in(city)':'city'})\nzomato.columns","1b3cdd1e":"#Some Transformations\nzomato['cost'] = zomato['cost'].astype(str) #Changing the cost to string\nzomato['cost'] = zomato['cost'].apply(lambda x: x.replace(',','.')) #Using lambda function to replace ',' from cost\nzomato['cost'] = zomato['cost'].astype(float) # Changing the cost to Float\nzomato.info()","b7ce564c":"#Reading Rate of dataset\nzomato['rate'].unique()","31752028":"#Removing '\/5' from Rates\nzomato = zomato.loc[zomato.rate !='NEW']\nzomato = zomato.loc[zomato.rate !='-'].reset_index(drop=True)\nremove_slash = lambda x: x.replace('\/5', '') if type(x) == np.str else x\nzomato.rate = zomato.rate.apply(remove_slash).str.strip().astype('float')\nzomato['rate'].head()","275a157a":"# Adjust the column names\nzomato.name = zomato.name.apply(lambda x:x.title())\nzomato.online_order.replace(('Yes','No'),(True, False),inplace=True)\nzomato.book_table.replace(('Yes','No'),(True, False),inplace=True)\nzomato.cost.unique()","fbffa5c0":"zomato.head()","7a079106":"zomato['city'].unique()","458b9218":"## Checking Null values\nzomato.isnull().sum()","d3a2e06c":"## Computing Mean Rating\nrestaurants = list(zomato['name'].unique())\nzomato['Mean Rating'] = 0\n\nfor i in range(len(restaurants)):\n    zomato['Mean Rating'][zomato['name'] == restaurants[i]] = zomato['rate'][zomato['name'] == restaurants[i]].mean()","94b6ed9f":"zomato.head()","1f9fa6c1":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range = (1,5))\n\nzomato[['Mean Rating']] = scaler.fit_transform(zomato[['Mean Rating']]).round(2)\n\nzomato.sample(3)","85fe13cd":"zomato.head()","c9b631bf":"## Text Preprocessing","7ac2bcf2":"# 5 examples of these columns before text processing:\nzomato[['reviews_list', 'cuisines']].sample(5)","c31358fb":"## Lower Casing\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].str.lower()\nzomato[['reviews_list', 'cuisines']].sample(5)","d78a5f85":"## Removal of Puctuations\nimport string\nPUNCT_TO_REMOVE = string.punctuation\ndef remove_punctuation(text):\n    \"\"\"custom function to remove the punctuation\"\"\"\n    return text.translate(str.maketrans('', '', PUNCT_TO_REMOVE))\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_punctuation(text))\nzomato[['reviews_list', 'cuisines']].sample(5)","09e17107":"## Removal of Stopwords\nfrom nltk.corpus import stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndef remove_stopwords(text):\n    \"\"\"custom function to remove the stopwords\"\"\"\n    return \" \".join([word for word in str(text).split() if word not in STOPWORDS])\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_stopwords(text))","d2fb45cd":"## Removal of URLS\ndef remove_urls(text):\n    url_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url_pattern.sub(r'', text)\n\nzomato[\"reviews_list\"] = zomato[\"reviews_list\"].apply(lambda text: remove_urls(text))","23ce58b0":"zomato[['reviews_list', 'cuisines']].sample(5)","26795cec":"# RESTAURANT NAMES:\nrestaurant_names = list(zomato['name'].unique())\nrestaurant_names","1aeb4c13":"def get_top_words(column, top_nu_of_words, nu_of_word):\n    \n    vec = CountVectorizer(ngram_range= nu_of_word, stop_words='english')\n    \n    bag_of_words = vec.fit_transform(column)\n    \n    sum_words = bag_of_words.sum(axis=0)\n    \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    \n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    \n    return words_freq[:top_nu_of_words]","69b658b2":"zomato.head()","2aec5d36":"zomato.sample(5)","eb6d708e":"zomato.shape","971d3983":"zomato.columns","9244aac3":"zomato=zomato.drop(['address','rest_type', 'type', 'menu_item', 'votes'],axis=1)","80215744":"import pandas\n\n# Randomly sample 60% of your dataframe\ndf_percent = zomato.sample(frac=0.5)","6216daf7":"df_percent.shape","96a9b2f3":"df_percent.set_index('name', inplace=True)","5029628a":"indices = pd.Series(df_percent.index)","ca1ad1db":"# Creating tf-idf matrix\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df_percent['reviews_list'])","ce25bca5":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","45d60e3c":"def recommend(name, cosine_similarities = cosine_similarities):\n    \n    # Create a list to put top restaurants\n    recommend_restaurant = []\n    \n    # Find the index of the hotel entered\n    idx = indices[indices == name].index[0]\n    \n    # Find the restaurants with a similar cosine-sim value and order them from bigges number\n    score_series = pd.Series(cosine_similarities[idx]).sort_values(ascending=False)\n    \n    # Extract top 30 restaurant indexes with a similar cosine-sim value\n    top30_indexes = list(score_series.iloc[0:31].index)\n    \n    # Names of the top 30 restaurants\n    for each in top30_indexes:\n        recommend_restaurant.append(list(df_percent.index)[each])\n    \n    # Creating the new data set to show similar restaurants\n    df_new = pd.DataFrame(columns=['cuisines', 'Mean Rating', 'cost'])\n    \n    # Create the top 30 similar restaurants with some of their columns\n    for each in recommend_restaurant:\n        df_new = df_new.append(pd.DataFrame(df_percent[['cuisines','Mean Rating', 'cost']][df_percent.index == each].sample()))\n    \n    # Drop the same named restaurants and sort only the top 10 by the highest rating\n    df_new = df_new.drop_duplicates(subset=['cuisines','Mean Rating', 'cost'], keep=False)\n    df_new = df_new.sort_values(by='Mean Rating', ascending=False).head(10)\n    \n    print('TOP %s RESTAURANTS LIKE %s WITH SIMILAR REVIEWS: ' % (str(len(df_new)), name))\n    \n    return df_new","7186862d":"# HERE IS A RANDOM RESTAURANT. LET'S SEE THE DETAILS ABOUT THIS RESTAURANT:\ndf_percent[df_percent.index == 'Pai Vihar'].head()","1d6f5ee5":"recommend('Pai Vihar')","68aaae19":"### Importing Libraries","bb994b45":"<h1 align='center'> Zomato Recommendation System<\/h1>\n\n## Context\nI was always fascinated by the food culture of Bengaluru. Restaurants from all over the world can be found here in Bengaluru. From United States to Japan, Russia to Antarctica, you get all type of cuisines here. Delivery, Dine-out, Pubs, Bars, Drinks,Buffet, Desserts you name it and Bengaluru has it. Bengaluru is best place for foodies. The number of restaurant are increasing day by day. Currently which stands at approximately 12,000 restaurants. With such an high number of restaurants. This industry hasn't been saturated yet. And new restaurants are opening every day. However it has become difficult for them to compete with already established restaurants. The key issues that continue to pose a challenge to them include high real estate costs, rising food costs, shortage of quality manpower, fragmented supply chain and over-licensing. This Zomato data aims at analysing demography of the location. Most importantly it will help new restaurants in deciding their theme, menus, cuisine, cost etc for a particular location. It also aims at finding similarity between neighborhoods of Bengaluru on the basis of food. The dataset also contains reviews for each of the restaurant which will help in finding overall rating for the place.\n\nIn this notebook I will try analyzing the Buisness Problem of Zomato and create a practical recommendation system for users.\n\n![Zomato](https:\/\/cdn.businesstraveller.com\/wp-content\/uploads\/fly-images\/951047\/zomato-infinity-dining-916x516.jpg)\n\n### What is Recommendation System?\nThe rapid growth of data collection has led to a new era of information. Data is being used to create more efficient systems and this is where Recommendation Systems come into play. Recommendation Systems are a type of information filtering systems as they improve the quality of search results and provides items that are more relevant to the search item or are realted to the search history of the user.\nThey are active information filtering systems which personalize the information coming to a user based on his interests, relevance of the information etc. Recommender systems are used widely for recommending movies, articles, restaurants, places to visit, items to buy etc.\n\n\nThere are basically three types of recommender systems:-\n\n - Demographic Filtering- They offer generalized recommendations to every user, based on movie popularity and\/or genre. The System recommends the same movies to users with similar demographic features.\n\n - Content Based Filtering- They suggest similar items based on a particular item. This system uses item metadata, such as genre, director, description, actors, etc. for movies, to make these recommendations.\n\n - Collaborative Filtering- This system matches persons with similar interests and provides recommendations based on this matching. Collaborative filters do not require item metadata like its content-based counterparts.\n \n \nHere I will be using Content Based Filtering\n\nContent-Based Filtering: This method uses only information about the description and attributes of the items users has previously consumed to model user's preferences. In other words, these algorithms try to recommend items that are similar to those that a user liked in the past (or is examining in the present). In particular, various candidate items are compared with items previously rated by the user and the best-matching items are recommended.\n\nThis data set consists of restaurants of Bangalore,India collected from Zomato.\n\nMy aim is to create a content based recommender system in which when I will write a restaurant name, Recommender system will look at the reviews of other restaurants, and System will recommend us other restaurants with similar reviews and sort them from the highest rated.","49c27df4":"### Data Cleaning and Feature Engineering","d9c2472f":"# <font color='orange'>Please Upvote if you found this helpful:)<\/font>","f794307b":"### Loading the dataset","d06a2f04":"## End of the Notebook","4ae89f3e":"# Breakdown of this notebook:\n1. **Loading the dataset:** Load the data and import the libraries. <br>\n2. **Data Cleaning:** <br>\n - Deleting redundant columns.\n - Renaming the columns.\n - Dropping duplicates.\n - Cleaning individual columns.\n - Remove the NaN values from the dataset\n - #Some Transformations\n3. **Text Preprocessing**\n - Cleaning unnecessary words in the reviews\n - Removing links and other unncessary items\n - Removing Symbols\n4. **Recommendation System**","e5114e75":"Some of the common text preprocessing \/ cleaning steps are:\n\n - Lower casing\n - Removal of Punctuations\n - Removal of Stopwords\n - Removal of URLs\n - Spelling correction","b8e8916a":"### Term Frequency-Inverse Document Frequency\nTerm Frequency-Inverse Document Frequency (TF-IDF) vectors for each document. This will give you a matrix where each column represents a word in the overview vocabulary (all the words that appear in at least one document) and each column represents a restaurant, as before.\n\nTF-IDF is the statistical method of evaluating the significance of a word in a given document.\n\nTF \u2014 Term frequency(tf) refers to how many times a given term appears in a document.\n\nIDF \u2014 Inverse document frequency(idf) measures the weight of the word in the document, i.e if the word is common or rare in the entire document.\nThe TF-IDF intuition follows that the terms that appear frequently in a document are less important than terms that rarely appear.\nFortunately, scikit-learn gives you a built-in TfIdfVectorizer class that produces the TF-IDF matrix quite easily."}}