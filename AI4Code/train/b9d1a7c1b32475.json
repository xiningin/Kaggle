{"cell_type":{"23fc978f":"code","901d74ed":"code","a52533de":"code","a5baf315":"code","94b2544a":"code","b6b91cef":"code","c65945ab":"code","df03afff":"code","6f2c902b":"code","df65a243":"code","c7f42d51":"code","48606b65":"code","311fdcd1":"code","dcfb0535":"code","f6d08b28":"code","3a10f817":"code","406a454e":"code","4609e34d":"code","f9ff4399":"code","b13f175f":"code","e6afc5b3":"code","f804d9eb":"code","bf7b1a14":"code","5e47b905":"code","7230cfe6":"code","1039299b":"code","8f39bd55":"code","e6f808b8":"code","9e102e1b":"code","17c7fde4":"code","6e98ba7d":"code","d73b4a11":"markdown"},"source":{"23fc978f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","901d74ed":"import matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport matplotlib.gridspec as grid_spec\nimport seaborn as sns\nfrom imblearn.over_sampling import SMOTE\nimport scikitplot as skplt\n\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score\n\n\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor,DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score, recall_score, roc_auc_score, precision_score, f1_score\nimport warnings\nwarnings.filterwarnings('ignore')\n!pip install pywaffle","a52533de":"data=pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndata.head()","a5baf315":"data.drop(['id'],inplace=True,axis=1)","94b2544a":"data.describe()","b6b91cef":"data.isnull().sum()","c65945ab":"data=data.dropna()","df03afff":"col=data.columns\nfor i in col:\n    print(i,\" \",data[i].value_counts())","6f2c902b":"data = data[data['gender'] != 'Other']","df65a243":"data['gender'].value_counts()","c7f42d51":"data['gender'] = data['gender'].replace({'Male':0,'Female':1}).astype(np.uint8)\ndata['ever_married'] = data['ever_married'].replace({'No':0,'Yes':1}).astype(np.uint8)\ndata['Residence_type'] = data['Residence_type'].replace({'Rural':0,'Urban':1}).astype(np.uint8)\n","48606b65":"data['work_type'] = data['work_type'].replace({'Private':0,'Self-employed':1,'Govt_job':2,'children':3,'Never_worked':4}).astype(np.uint8)\ndata['smoking_status'] = data['smoking_status'].replace({'never smoked':0,'Unknown':1,'formerly smoked': 2,'smokes':3}).astype(np.uint8)","311fdcd1":"col=data.columns\nfor i in col:\n    print(i,\" \",data[i].value_counts())","dcfb0535":"corr=data.corr()\ncorr","f6d08b28":"plt.figure(figsize=(16, 6))\nmask = np.triu(np.ones_like(corr, dtype=bool))\nsns.heatmap(corr,annot=True, linewidths=1,mask = mask, cmap=\"YlGnBu\")","3a10f817":"#we dropoff attributes whose correlation is less then 0.05\n#ie gender ,work type,residense type,bmi,stroking status\n#mostly correleated with age ","406a454e":"#the data seems to be completely imbalanced with 0:4k 1:200","4609e34d":"#It can be handled using 5 ways\n#1)undersampling (reducing records to attain equal records in both classes it isnt a grt ide)\n#2)oversampling(just creating copies can overfit the model)\n#3)SMOTE(creating copies using Knn)\n#4)ensemble\n#5)fiscal\n#Refernce:-https:\/\/www.youtube.com\/watch?v=JnlM4yLFNuo\n","f9ff4399":"#using SMOTE\n#SMOTE (synthetic minority oversampling technique) is one of the most commonly used oversampling methods to solve the imbalance problem. \n#It aims to balance class distribution by randomly increasing minority class examples by replicating them.\n# SMOTE synthesises new minority instances between existing minority instances.\n\ncol","b13f175f":"#3 SMOTE\n#not including data with less than 0.05 correlation ie 5%\nX  = data[[ 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'avg_glucose_level']]\ny = data['stroke']\n\n","e6afc5b3":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.3, random_state=42)\n\n","f804d9eb":"#3\noversample = SMOTE()\nX_train_resh, y_train_resh = oversample.fit_resample(X_train, y_train.ravel())","bf7b1a14":"#pipelines\nrf_pipeline = Pipeline(steps = [('scale',StandardScaler()),('RF',RandomForestClassifier(random_state=42))])\nsvm_pipeline = Pipeline(steps = [('scale',StandardScaler()),('SVM',SVC(random_state=42))])\nlogreg_pipeline = Pipeline(steps = [('scale',StandardScaler()),('LR',LogisticRegression(random_state=42))])","5e47b905":"#cross validation\nrf_cv = cross_val_score(rf_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1')\nsvm_cv = cross_val_score(svm_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1')\nlogreg_cv = cross_val_score(logreg_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1')","7230cfe6":"print('Mean f1 scores:')\nprint('Random Forest mean :',cross_val_score(rf_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1').mean())\nprint('SVM mean :',cross_val_score(svm_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1').mean())\nprint('Logistic Regression mean :',cross_val_score(logreg_pipeline,X_train_resh,y_train_resh,cv=10,scoring='f1').mean())","1039299b":"#fitting the model\nrf_pipeline.fit(X_train_resh,y_train_resh)\nsvm_pipeline.fit(X_train_resh,y_train_resh)\nlogreg_pipeline.fit(X_train_resh,y_train_resh)","8f39bd55":"#predicting\nrf_pred   =rf_pipeline.predict(X_test)\nsvm_pred  = svm_pipeline.predict(X_test)\nlogreg_pred   = logreg_pipeline.predict(X_test)","e6f808b8":"#using the reult from all models ie creating a ensemble","9e102e1b":"y_pred_final = rf_pred.copy()\nfor i in range(len(rf_pred)):\n    n_ones = rf_pred[i] + svm_pred[i] + logreg_pred[i]\n    if n_ones>1:\n        y_pred_final[i] = 1\n    else:\n        y_pred_final[i] = 0","17c7fde4":"\n\ncl_rep = classification_report(y_test, y_pred_final)\nprint(cl_rep)\n\ncl_rep_f1  = confusion_matrix(y_test,y_pred_final)\ncl_rep_f1","6e98ba7d":"# Plotting our results\nimport matplotlib\n\ncolors = [\"lightgray\",\"#0f4c81\",\"#0f4c81\",\"#0f4c81\",\"#0f4c81\",\"#0f4c81\",\"#0f4c81\",\"#0f4c81\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\n\nbackground_color = \"#fbfbfb\"\n\nfig = plt.figure(figsize=(10,14)) # create figure\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.1, hspace=0.8)\nax0 = fig.add_subplot(gs[0, :])\nax0.set_facecolor(background_color) # axes background color\n\n# Overall\nsns.heatmap(cl_rep_f1, cmap=colormap,annot=True,fmt=\"d\", linewidths=5,cbar=False,ax=ax0,\n            yticklabels=['Actual Non-Stroke','Actual Stroke'],xticklabels=['Predicted Non-Stroke','Predicted Stroke'],annot_kws={\"fontsize\":12})\n\n\n\nax0.tick_params(axis=u'both', which=u'both',length=0)\nbackground_color = \"#fbfbfb\"\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) \n\n\nax0.text(0,-0.75,'Ensemble Performance',fontsize=18,fontweight='bold',fontfamily='serif')\n\n\nplt.show()","d73b4a11":"When visualiazation is done the data seems to be fundamentally incorrect, as well as there is no attribute with greater than 0.25 accuracy.\nAlso the different condition when compared with output seems to be unreal.\nMight be because the data availaible is not complete.\n\nBut for practice with respect to imbalanced dataset.It helps in learning different techniques through research.\n\nFew of them are\n1) diff techniques using sklearn libraries:-https:\/\/www.youtube.com\/watch?v=JnlM4yLFNuo\n\n2)using pycaret:-https:\/\/pycaret.org\/tune-model\/\n\nhttps:\/\/www.youtube.com\/watch?v=Z5pEuBV_lNA\n\nmy notebook:-https:\/\/www.kaggle.com\/msagmj\/pycaret-for-imbalanced-data"}}