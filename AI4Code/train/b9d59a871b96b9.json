{"cell_type":{"540ede0c":"code","ec677f9b":"code","101c0d52":"code","2e3ddc26":"code","3c298a57":"code","38d512da":"code","e8bdf5e7":"code","d5b8ed50":"code","02caf564":"code","a1596a67":"code","28cd1131":"code","e09f7bf6":"code","9e9e0297":"markdown","96719d59":"markdown","4a829d4b":"markdown","c662a3e1":"markdown","0fa92705":"markdown","089d2bbe":"markdown"},"source":{"540ede0c":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn.functional as F\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\n\nis_cuda=torch.cuda.is_available()","ec677f9b":"df=pd.read_csv('..\/input\/Admission_Predict.csv')\ndf.head()","101c0d52":"x=df.iloc[:380,-1].value_counts().index.values\ny=df.iloc[:380,-1].value_counts().values\nplt.bar(x,y,width=0.1)","2e3ddc26":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nplt.scatter(df.iloc[:,1],df.iloc[:,-1])\nplt.xlabel(\"GRE Score\")\nplt.subplot(2,2,2)\nplt.scatter(df.iloc[:,2],df.iloc[:,-1])\nplt.xlabel(\"TOEFL Score\")\nplt.subplot(2,2,3)\nplt.scatter(df.CGPA,df.iloc[:,-1])\nplt.xlabel(\"CGPA\")","3c298a57":"df.columns","38d512da":"columns_to_take=['GRE Score','TOEFL Score','CGPA','Chance of Admit ']\ninp=len(columns_to_take)-1\nrows_to_take=380\ntrain_loader=DataLoader(df.loc[:rows_to_take,columns_to_take].values,batch_size=64,shuffle=True) \ntest_loader=DataLoader(df.loc[rows_to_take:,columns_to_take].values) ","e8bdf5e7":"class Model(torch.nn.Module):\n    \n    def __init__(self):\n        super(Model,self).__init__()\n        \n        self.l1=torch.nn.Linear(inp,100)\n        self.l2=torch.nn.Linear(100,200)\n        self.l3=torch.nn.Linear(200,1)\n        \n        \n    def forward(self,x):\n        \n        x=torch.relu(self.l1(x))\n        x=torch.relu(self.l2(x))\n        x=self.l3(x)\n        \n        return x","d5b8ed50":"model=Model()\nif(torch.cuda.is_available()):\n    model=model.cuda()\ncriterion=torch.nn.MSELoss()\noptim=torch.optim.Adam(model.parameters(),lr=0.01)","02caf564":"earr=[]\nlarr=[]\nfor epoch in range(500):\n\n    for data in train_loader:\n        xd,yd=data[:,:-1],data[:,-1:]\n        xd,yd=xd.to(torch.float32),yd.to(torch.float32)\n        if(torch.cuda.is_available()):\n            xd,yd=xd.cuda(),yd.cuda()\n        \n        output=model(xd)\n        loss=criterion(output,yd)\n\n        optim.zero_grad()\n        loss.backward()\n        optim.step()\n    \n    \n    earr.append(epoch)\n    larr.append(loss)\n    if(epoch%100==0):\n        print(\"Epoch {} Loss {}\".format(epoch,loss))\n","a1596a67":"plt.plot(earr,larr)","28cd1131":"outarr=[]\nexparr=[]\nfor data in test_loader:\n    \n    xd,yd=data[:,:-1],data[:,-1:]\n    xd,yd=xd.to(torch.float32),yd.to(torch.float32)\n    if(torch.cuda.is_available()):\n        xd,yd=xd.cuda(),yd.cuda()\n        \n    output=model(xd)\n    outarr.append(output.detach().cpu().numpy())\n    exparr.append(yd.cpu().numpy())\n    \n#     print(output.detach().cpu().numpy(),yd.cpu().numpy())\n","e09f7bf6":"plt.plot(np.ravel(exparr),np.ravel(exparr))\nplt.scatter(np.ravel(outarr),np.ravel(exparr))","9e9e0297":"Simple Fully connectd neural net with 3 layers and relu activation functin for non linearity","96719d59":"The bar graph shows that the data distribution is uneven. Most of the data is concentrated in the range(0.6-0.8). \nThis means there is high probability that model will get stuck in this range","4a829d4b":"## testing","c662a3e1":"Since the concentratin of data is highest in the range 0.6-0.8, model is predicting most of the values in that range","0fa92705":"## training ","089d2bbe":"The proabilitiy of getting admission is lineary related with - GRE Score, TOEFL Score and CGPA."}}