{"cell_type":{"d6745cee":"code","70cde9c5":"code","104554bb":"code","ee7ccc0c":"code","9d3761fa":"code","05614b15":"code","ff280f23":"code","6ecc9238":"code","70f0afa4":"code","69243c4f":"code","d21d6990":"code","d774d7ac":"code","48381723":"code","ad2f2b30":"code","0742edf3":"code","ffa69bac":"code","d019113e":"code","c45c704f":"code","4193c720":"code","6fd96602":"code","f59dfae7":"code","d27905dc":"code","3cbcdc82":"code","9d3790ec":"code","ceccebae":"markdown","2c734b11":"markdown","9e97ac2a":"markdown","46d1374d":"markdown","e9d923a6":"markdown","f4cd0876":"markdown","9f52508b":"markdown","5625329a":"markdown","5276a7cb":"markdown","66c4d48f":"markdown","414c5ff8":"markdown","f6c2f377":"markdown","99f05a1f":"markdown","2f5f3e6a":"markdown","d0e853b5":"markdown","70c6b6c1":"markdown","0192b8f8":"markdown","0406ee44":"markdown"},"source":{"d6745cee":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image, ImageOps\n\nimg = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\nplt.figure(figsize=(8,8))\nplt.imshow(img)","70cde9c5":"print('# of dims: ',img.ndim)\nprint('img shape: ',img.shape)\nprint('dtype: ',img.dtype)","104554bb":"# pixel value at [R, G, B]\nprint(img[20, 20])\n\n# min pixel value at channel B\nprint(img[:, :, 2].min())","ee7ccc0c":"path = 'emma.jpg'\npil_img = Image.fromarray(img)\npil_img.save(path)","9d3761fa":"degrees = 90\nimg = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n# img = img.sum(2) \/ (255*3) # converting to grayscale\n\nfig = plt.figure(figsize=(10, 10))\n\nfig.add_subplot(1, 2, 1)\nplt.imshow(img)\nplt.title(\"original\")\nimg0 = img.copy()\n\n# Algo: image(ndarray) -> transpose -> mirror image across y axis (middle column)\n\nfor _ in range(degrees \/\/ 90):\n    img0 = img0.transpose(1, 0, 2)\n    \n    for j in range(0, img0.shape[1] \/\/ 2):\n\n        c = img0[:, j, :].copy()\n        img0[:, j, :] = img0[: , img0.shape[1]-j-1, :]\n        img0[: , img0.shape[1]-j-1, :] = c\n        \nfig.add_subplot(1, 2, 2)\nplt.imshow(img0)\nplt.title(\"rotated\")\n","05614b15":"# or you could have used np.rot90(img)\nplt.imshow(np.rot90(img))\n# This does the other way around","ff280f23":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\nimg_grey = img.sum(2) \/ (255*3) # summing over axis=2 (channel axis) to get grey scaled image\n","6ecc9238":"fig = plt.figure(figsize=(10, 10))\nimg_grey = 255*3 - img_grey        # 255 * 3 because we added along channel axis previously\nfig.add_subplot(1, 2, 1)\nplt.imshow(img_grey)\nplt.title('Negative of Grey image')\n\nimg = 255 - img\nfig.add_subplot(1, 2, 2)\nplt.imshow(img)\nplt.title('Negative of RGB image')","70f0afa4":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\nimg_grey = img.sum(2) \/ (255*3)\nimg0 = img_grey.copy()\nimg0 = np.pad(img0, ((100,100),(100,100)), mode='constant')\nplt.imshow(img0)","69243c4f":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nimg_R, img_G, img_B = img.copy(), img.copy(), img.copy()\n\nimg_R[:, :, (1, 2)] = 0\nimg_G[:, :, (0, 2)] = 0\nimg_B[:, :, (0, 1)] = 0\n\n\n\nimg_rgb = np.concatenate((img_R,img_G,img_B), axis=1)\nplt.figure(figsize=(15, 15))\nplt.imshow(img_rgb)","d21d6990":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\n# Making Pixel values discrete by first division by \/\/ which gives int and then multiply by same factor\n\nimg_0 = (img \/\/ 64) * 64    \nimg_1 = (img \/\/ 128) * 128\n\nimg_all = np.concatenate((img, img_0, img_1), axis=1)\n\nplt.figure(figsize=(15, 15))\nplt.imshow(img_all)","d774d7ac":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nfig = plt.figure(figsize=(10, 10))\n\nfig.add_subplot(1, 2, 1)\nplt.imshow(img)\nplt.title('Original')\n\nimg0 = img[128:-128, 128:-128, :]\n\nfig.add_subplot(1, 2, 2)\nplt.imshow(img0)\nplt.title('Trimmed')\n\n","48381723":"src = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg').resize((128, 128)))\ndst = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg').resize((256, 256))) \/\/ 4\n\ndst_copy = dst.copy()\ndst_copy[64:128, 128:192] = src[32:96, 32:96]\n\nfig = plt.figure(figsize=(10, 10))\n\nfig.add_subplot(1, 2, 1)\nplt.imshow(src)\nplt.title('Original')\n\nfig.add_subplot(1, 2, 2)\nplt.imshow(dst_copy)\nplt.title('Pasted with slice')","ad2f2b30":"fig = plt.figure(figsize=(10, 10))\n\nimg = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\nfig.add_subplot(1, 2, 1)\nplt.imshow(img)\nplt.title('Original')\n\nimg0 = img.transpose(1, 0, 2)\n\nfig.add_subplot(1, 2, 2)\nplt.imshow(img0)\nplt.title('Flip_rotated')","0742edf3":"# np.linspace:     Gives grdually increasing or decreasing 1-D array\n\nx = np.linspace(0, 10, 3)  # start, stop, num of samples\n# array([ 0.,  5., 10.])\n\n\n\n\n# np.tile:         Repeats our given 1-D\/ 2-D array in either\/both axes\nx= np.arange(5).reshape(1,-1)\nnp.tile(x, (3, 1))\n# array([[0, 1, 2, 3, 4],\n#        [0, 1, 2, 3, 4],\n#        [0, 1, 2, 3, 4]])\n\nnp.tile(x, (2, 2))\n# array([[0, 1, 2, 3, 4, 0, 1, 2, 3, 4],\n#        [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]])","ffa69bac":"# Lets get into Shading now\n\nHeight = 256\nWidth = 512\nstart_list = (0, 0, 192)\nstop_list = (255, 255, 64)\nis_horizontal_list = (True, False, False)\n\n\ndef gradation_2d(start, stop, width, height, is_horizontal):\n    if is_horizontal:\n        return np.tile(np.linspace(start, stop, width), (height, 1))\n    else:\n        return np.tile(np.linspace(start, stop, height), (width, 1)).T   #imagine it in your head, you'll get it\n    \n    \ndef gradation_3d(width, height, start_list, stop_list, is_horizontal_list):\n    result = np.zeros((height, width, len(start_list)),dtype=np.float)\n    \n    for i, (start, stop, is_horizontal) in enumerate(zip(start_list, stop_list, is_horizontal_list)):\n        result[:, :, i] = gradation_2d(start, stop, width, height, is_horizontal)\n    return result","d019113e":"# Width, Height, start_list, stop_list, is_horizontal_list\nimg0 = gradation_3d(256, 256, (0,0,0),(255,255,255),(True,True,True))\nimg0 = np.uint8(img0)\n\nplt.figure(figsize=(10, 5))\nplt.imshow(img0)","c45c704f":"img0 = gradation_3d(Width, Height, start_list, stop_list, is_horizontal_list)\nimg0 = np.uint8(img0)\n\nplt.figure(figsize=(10, 5))\nplt.imshow(img0)","4193c720":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nimg_64 = (img > 64) * 255\nimg_128 = (img > 128) * 255\n\nfig = plt.figure(figsize=(15, 15))\n\nimg_all = np.concatenate((img, img_64, img_128), axis=1)\nplt.imshow(img_all)\n","6fd96602":"\nimg = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\nimg0 = np.array(Image.open('..\/input\/mountains\/mountains.jpg').resize(img.shape[1::-1])) # resize takes 2 arguments (WIDTH, HEIGHT)\n\nprint(img.dtype)\n# uint8\n\ndst = (img * 0.6 + img0 * 0.4).astype(np.uint8)   # Blending them in\n\nplt.figure(figsize=(10, 10))\nplt.imshow(dst)","f59dfae7":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nones = np.ones((img.shape[0] \/\/ 2, img.shape[1] \/\/ 2, 3))\nzeros = np.zeros(((img.shape[0] \/\/ 4, img.shape[1] \/\/ 4, 3)))\n\n\nzeros_mid = np.zeros(((img.shape[0] \/\/ 2, img.shape[1] \/\/ 4, 3)))\nup = np.concatenate((zeros, zeros, zeros, zeros), axis=1)\nmiddle = np.concatenate((zeros_mid, ones, zeros_mid), axis=1)\ndown = np.concatenate((zeros, zeros, zeros, zeros), axis=1)\n\n\nmask = np.concatenate((up, middle, down), axis=0)\nmask = mask \/ 255\n\nimg0 = mask * img\n\nfig = plt.figure(figsize=(10, 10))\nfig.add_subplot(1, 2, 1)\nplt.imshow(img)\n\nfig.add_subplot(1, 2, 2)\nplt.imshow(img0)\n\n","d27905dc":"img0 = img.copy()\n\nfor i in range(img0.shape[0] \/\/ 2):\n    c = img0[i, :, :].copy()\n    img0[i, :, :] = img0[img0.shape[0] - i - 1, :, :]\n    img0[img0.shape[0] - i - 1, :, :] = c\n        \nplt.imshow(img0)","3cbcdc82":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nfig = plt.figure(figsize=(10, 10))\nfig.add_subplot(1, 2, 1)\nplt.imshow(np.flipud(img))\n\nfig.add_subplot(1, 2, 2)\nplt.imshow(np.fliplr(img))","9d3790ec":"img = np.array(Image.open('..\/input\/-emma\/emma_stone.jpg'))\n\nimg_flat = img.flatten()\n\nplt.hist(img_flat, bins=200, range=[0, 256])\nplt.title(\"Number of pixels in each intensity value\")\nplt.xlabel(\"Intensity\")\nplt.ylabel(\"Number of pixels\")\nplt.show()","ceccebae":"# 9. Flip on axis=1 and rotate anticlockwise: transpose","2c734b11":"# 5. Visualizing RGB channels","9e97ac2a":"# 3. Negative of an image","46d1374d":"# 12. Blending two images","e9d923a6":"# 13. Masking images","f4cd0876":"# 6. Color Reduction:\n","9f52508b":"In this notebook , I'll mostly be using `numpy` for basic image processing techniques.\n\n\nI you are reading this notebook, then I am pretty sure you would have heard about OpenCV library for Images.\n### Here is a fun fact: OpenCV treats image data as numpy's ndarray, so it is extremely useful to learn the processing in `NumPy` (ndarray)","5625329a":"# If you like my kernel, do *upvote* it :)","5276a7cb":"# 7. Trim Image by array slicing","66c4d48f":"# 2. Rotate image","414c5ff8":"# 14. Flip image\n","f6c2f377":"## Or you can use :\n#### np.flipud() : [up\/down]flips over x-axis\n\n#### np.fliplr() : [left\/right]flips over y_axis","99f05a1f":"# 4. Padding black spaces","2f5f3e6a":"# 15. Hisplot for pixel intensity","d0e853b5":"# 1. Saving ndarray as Image ","70c6b6c1":"# 8. Pasting with slice","0192b8f8":"# 11. Binarize image","0406ee44":"# 10. Creating Gradual Shades\n\nTo understand. this concept, we will first understand two of the numpy methods namely `linspace` and `tile`\n\n> 0 : BLACK\n\n> 255 : WHITE"}}