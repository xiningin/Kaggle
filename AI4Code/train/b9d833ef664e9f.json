{"cell_type":{"d7711571":"code","8314d0b9":"code","52392c13":"code","aac3d95a":"code","c8d3a67d":"code","57f4adb0":"code","345b6b85":"code","653ee9c8":"code","928299e0":"code","058e6122":"code","49336c1c":"code","0af04830":"code","5e3206f3":"code","261c087d":"code","7b39792a":"code","aca05671":"code","2c7b06ca":"code","cc8bc155":"code","f4b19b07":"code","e3d59e3c":"code","b043ceca":"code","bdcee085":"code","437abefd":"code","1cbd98ba":"code","03e7ea2f":"code","31562e8d":"code","30ab6e78":"code","666ea6a1":"code","6d31938a":"code","11328c13":"code","caea8146":"code","2a3f92ff":"code","ae2dea1b":"code","10981bab":"code","915b74f8":"code","f8eee90f":"code","2cdfac4c":"code","f86825ec":"code","136b4059":"code","d87e3220":"code","6ea851f7":"code","bd7baf5f":"code","be1a5fea":"code","8baeafbc":"code","22a3c820":"code","a146e4c2":"code","8d1a817a":"code","f3969365":"code","87c88c9b":"code","7a5f1048":"code","b0693618":"code","b6b6606f":"code","9846cc5c":"code","fd1eb37d":"code","a3c86bd2":"code","35141ecb":"code","1aa93d38":"code","8edc0320":"code","32a294a6":"code","810acfe4":"code","9b0bdc13":"code","f2e7d8d3":"code","6aec12cb":"code","471ec5ed":"code","d4aa6bf7":"code","084fb73d":"code","660f1c70":"code","07609ccb":"code","e9a4f40f":"code","ba7107eb":"code","6ca3432b":"code","7a050ce3":"code","b4e2fa63":"code","31b8efc2":"code","d6a4ab9b":"code","90d8fbcf":"code","ef6734e4":"code","ca22b871":"code","fa09c0fb":"code","8c441d8f":"code","e083e81c":"code","1e6f5b99":"code","5ec435f4":"code","2b42b55b":"code","66aaa2ea":"code","6b6f913c":"code","77f112b2":"code","411eb403":"code","a96a92f8":"code","f9ea7b67":"markdown","19e3a1df":"markdown","ddeac638":"markdown","630a01a3":"markdown","be2e14af":"markdown","fd7be336":"markdown","cc9329dc":"markdown","82560564":"markdown","a493b7ee":"markdown","7254edcd":"markdown","8302e5ee":"markdown","892f5645":"markdown","cc78c426":"markdown","8f1f796f":"markdown","70110eb0":"markdown","6549d7d1":"markdown"},"source":{"d7711571":"#print statment is used to print any value in python\nprint(True,False)","8314d0b9":"#type is used to print the data type of the arguments\ntype(True)","52392c13":"type(False)","aac3d95a":"#declaring a string variable my_str with value AMit Kumar\nmy_str='Amit Kumar'","c8d3a67d":"#The istitle() returns True if the string is a titlecased string otherwise it returns False.\n#titlecased:- String which has the first character in each word Uppercase and remaining all characters Lowercase alphabets.\nmy_str.istitle()","57f4adb0":"print(my_str.isalnum()) #check if all char are numbers\nprint(my_str.isalpha()) #check if all char in the string are alphabetic\nprint(my_str.isdigit()) #test if string contains digits\nprint(my_str.istitle()) #test if string contains title words\nprint(my_str.isupper()) #test if string contains upper case\nprint(my_str.islower()) #test if string contains lower case\nprint(my_str.isspace()) #test if string contains spaces\nprint(my_str.endswith('r')) #test if string endswith a d\nprint(my_str.startswith('A')) #test if string startswith H","345b6b85":"True and True","653ee9c8":"True and False","928299e0":"True or False","058e6122":"True or True","49336c1c":"str_example='Hello World'\nmy_str='Amit'","0af04830":"my_str.isalpha() or str_example.isnum()","5e3206f3":"type([])","261c087d":"#creating a empty list\nlst_example=[]","7b39792a":"type(lst_example)","aca05671":"lst=list()","2c7b06ca":"type(lst)","cc8bc155":"lst=['Mathematics', 'chemistry', 100, 200, 300, 204]","f4b19b07":"len(lst)","e3d59e3c":"type(lst)","b043ceca":"#.append is used to add elements in the list\n#adding one element\nlst.append(\"Amit\")","bdcee085":"#adding multiple elements to a list\nlst.append([\"John\",\"Bala\"])","437abefd":"lst","1cbd98ba":"##Indexing in List\nlst[6]","03e7ea2f":"lst[1:6]","31562e8d":"## insert in a specific order\n\nlst.insert(2,\"Kumar\")","30ab6e78":"lst","666ea6a1":"lst.append([\"Hello\",\"World\"])","6d31938a":"lst","11328c13":"lst=[1,2,3]","caea8146":"lst.append([4,5])","2a3f92ff":"lst","ae2dea1b":"lst=[1,2,3,4,5,6]","10981bab":"lst.extend([8,9])","915b74f8":"lst","f8eee90f":"lst=[1,2,3,4,5]","2cdfac4c":"sum(lst)","f86825ec":"lst*5","136b4059":"#drop the last value from the list\nlst.pop()","d87e3220":"lst","6ea851f7":"lst.pop(0)","bd7baf5f":"lst","be1a5fea":"lst=[1,1,2,3,4,5]\nlst.count(1)","8baeafbc":"#length:Calculates total length of List\nlen(lst)","22a3c820":"# index(): Returns the index of first occurrence. Start and End index are not necessary parameters\n#syntex index(element.start,end)\nlst.index(2,1,5) ","a146e4c2":"##Min and Max\nmin(lst)","8d1a817a":"max(lst)","f3969365":"## Defining an empy set\n\nset_var= set()\nprint(set_var)\nprint(type(set_var))","87c88c9b":"#creating a set\nset_var={1,2,3,4,3}","7a5f1048":"set_var","b0693618":"set_var={\"Avengers\",\"IronMan\",'Hitman','Antmman'}\nprint(set_var)\ntype(set_var)","b6b6606f":"## Inbuilt function in sets\n\nset_var.add(\"Hulk\")\n","9846cc5c":"print(set_var)","fd1eb37d":"set1={\"Avengers\",\"IronMan\",'Hitman'}\nset2={\"Avengers\",\"IronMan\",'Hitman','Hulk2'}","a3c86bd2":"set2.intersection_update(set1)","35141ecb":"set2","1aa93d38":"##Difference \nset2.difference(set1)","8edc0320":"set2","32a294a6":"## Difference update\n\nset2.difference_update(set1)","810acfe4":"print(set2)","9b0bdc13":"dic={}","f2e7d8d3":"type(dic)","6aec12cb":"type(dict())","471ec5ed":"set_ex={1,2,3,4,5}","d4aa6bf7":"type(set_ex)","084fb73d":"## Let create a dictionary\n\nmy_dict={\"Car1\": \"Audi\", \"Car2\":\"BMW\",\"Car3\":\"Mercidies Benz\"}","660f1c70":"type(my_dict)","07609ccb":"##Access the item values based on keys\n\nmy_dict['Car1']","e9a4f40f":"# We can even loop throught the dictionaries keys\n\nfor x in my_dict:\n    print(x)","ba7107eb":"# We can even loop throught the dictionaries values\n\nfor x in my_dict.values():\n    print(x)","6ca3432b":"# We can also check both keys and values\nfor x in my_dict.items():\n    print(x)","7a050ce3":"## Adding items in Dictionaries\n\nmy_dict['car4']='Audi 2.0'","b4e2fa63":"my_dict","31b8efc2":"my_dict['Car1']='MAruti'","d6a4ab9b":"my_dict","90d8fbcf":"car1_model={'Mercedes':1960}\ncar2_model={'Audi':1970}\ncar3_model={'Ambassador':1980}\n\ncar_type={'car1':car1_model,'car2':car2_model,'car3':car3_model}","ef6734e4":"print(car_type)","ca22b871":"## Accessing the items in the dictionary\n\nprint(car_type['car1'])","fa09c0fb":"print(car_type['car1']['Mercedes'])","8c441d8f":"## create an empty Tuples\n\nmy_tuple=tuple()","e083e81c":"type(my_tuple)","1e6f5b99":"my_tuple=()","5ec435f4":"type(my_tuple)","2b42b55b":"my_tuple=(\"Amit\",\"Krish\",\"Ankur\",\"John\")","66aaa2ea":"my_tuple=('Hello','World',\"Amit\")","6b6f913c":"print(type(my_tuple))\nprint(my_tuple)","77f112b2":"type(my_tuple)","411eb403":"## Inbuilt function\nmy_tuple.count('Amit')","a96a92f8":"my_tuple.index('Amit')","f9ea7b67":"### If this Kernel help you in any way, some UPVOTES would be very much appreciated.","19e3a1df":"### Nested Dictionary","ddeac638":"## SETS\n\nA Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python's set class represents the mathematical notion of a set.This is based on a data structure known as a hash table","630a01a3":"### Various Operations that we can perform in List","be2e14af":"### Pop() Method","fd7be336":"### Insert","cc9329dc":"### If this Kernel helped you in any way, some UPVOTES would be very much appreciated.\n# Thank You :)\n# Happy Learning ","82560564":"## Dictionaries\n\nA dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.","a493b7ee":"### Extend Method","7254edcd":"### Lists\n\nA list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ] ","8302e5ee":"### Boolean Variables\n\nBoolean values are the two constant objects False and True. \n\nThey are used to represent truth values (other values can also be considered\nfalse or true). \n\nIn numeric contexts (for example, when used as the argument to an\narithmetic operator), they behave like the integers 0 and 1, respectively.\n\nThe built-in function bool() can be used to cast any value to a Boolean,\nif the value can be interpreted as a truth value\n\nThey are written as False and True, respectively.\n\n","892f5645":"### Boolean and Logical Operators","cc78c426":"## Python Data Structures\n\n- Boolean\n- Boolean and Logical Operators\n- Lists\n- Comparison operators\n- Dictionaries\n- Tuples\n- Sets\n","8f1f796f":"### count():Calculates total occurrence of given element of List","70110eb0":"## Tuples","6549d7d1":"### Append"}}