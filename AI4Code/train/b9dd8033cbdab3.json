{"cell_type":{"5c713fbd":"code","50d24580":"code","acc7b208":"code","b99e59f2":"code","7c1ec6de":"code","01ba659b":"code","caf5490d":"code","ab82c360":"code","35fa086b":"code","08c8f912":"code","67dfdf60":"code","91252b04":"code","a86b4d8f":"code","c3cd370c":"code","6d974af4":"code","06a21203":"code","65351dc3":"code","5b549874":"code","0b1620e8":"code","4ef08705":"markdown","3eb386a3":"markdown","0592333f":"markdown","690eeea9":"markdown"},"source":{"5c713fbd":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport pandas as pd\nmnist = keras.datasets.mnist\nfrom sklearn.model_selection import train_test_split\nfrom keras import layers\nfrom keras import models\nimport matplotlib.pyplot as plt","50d24580":"train_data = pd.read_csv('..\/input\/train.csv')\ntrain_images = np.array(train_data.drop('label', axis=1))\ntrain_labels = np.array(train_data['label']).reshape(train_images.shape[0], 1)\n\n#reshape images from (784,) to (28,28)\ntrain_images = np.array(train_images.reshape((-1,28, 28,1)) )\n\n#spliting the data\ntrain_images,test_images ,train_labels, test_labels= train_test_split(train_images, train_labels)\n","acc7b208":"print('Trainning data',train_images.shape)\nprint('train labels',train_labels.shape)\n\nprint('Test data',test_images.shape)\nprint('test labels',test_labels.shape)","b99e59f2":"from sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder()\nenc.fit(train_labels)\ntrain_labels_hot = np.array(enc.transform(train_labels).toarray())\nenc2 = OneHotEncoder()\nenc2.fit(test_labels)\ntrain_labels_hot = np.array(enc2.transform(test_labels).toarray())","7c1ec6de":"train_images = train_images\/255.\ntest_images = test_images\/255.","01ba659b":"plt.imshow(train_images[5].reshape(28, 28))","caf5490d":"#from keras.layers import Conv2D\nmodel = tf.keras.models.Sequential([\ntf.keras.layers.Conv2D(32,(3,3), activation=tf.nn.relu),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Conv2D(64,(3,3), activation=tf.nn.relu),\n    tf.keras.layers.MaxPooling2D((2,2)),\n    tf.keras.layers.Conv2D(128,(3,3), activation=tf.nn.relu),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(32, activation=tf.nn.relu),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation=tf.nn.relu),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation=tf.nn.relu),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])","ab82c360":"model.compile(optimizer=tf.train.AdamOptimizer(), \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy']) ","35fa086b":"epochs=15","08c8f912":"history=model.fit(train_images, train_labels,batch_size=128, epochs=epochs,validation_data=(test_images,test_labels)) ","67dfdf60":"history_dict=history.history\nhistory_dict.keys()","91252b04":"epochs=range(1,len(history_dict['acc'])+1)\nacc_values=history_dict['acc']\nloss_values=history_dict['loss']\nvalid_acc=history_dict['val_acc']\nvalid_loss=history_dict['val_loss']\nplt.clf()\nplt.plot(epochs,loss_values,'b+-',label='T_loss')\nplt.plot(epochs,valid_loss,'r+-',label='V_loss')\nplt.legend()\nplt.show()","a86b4d8f":"plt.clf()\nplt.plot(epochs,acc_values,'b.-',label='T_acc')\nplt.plot(epochs,valid_acc,'r.-',label='V_acc')\nplt.legend()\nplt.show()","c3cd370c":"#model.summary()\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\nprint('Validation accuracy: ', test_acc)\nprint('    Validation loss: ', test_loss)","6d974af4":"testing_images = pd.read_csv('..\/input\/test.csv')\nprint(\"Testing images: \",testing_images.shape)\n\ntesting_images = np.array(testing_images)\ntesting_images = np.array(testing_images.reshape((-1,28, 28,1)) )\n\nlabels_predicted=model.predict(testing_images)\nprint(\"Testing labels predicted: \",labels_predicted.shape)\n\nsample_sub = pd.read_csv('..\/input\/sample_submission.csv')\nprint(\"Sample submission: \",sample_sub.shape)","06a21203":"labels_predicted = np.argmax(labels_predicted, axis=1)","65351dc3":"my_submission = pd.DataFrame({'ImageId': np.array(range(0,labels_predicted.shape[0])), 'Label': labels_predicted})","5b549874":"print(my_submission.shape)","0b1620e8":"print(my_submission.head())","4ef08705":"**1\/ Import the needed packages**","3eb386a3":"**Prepering the image data**","0592333f":"**2\/ Data collection**","690eeea9":"**Prepering the labels**"}}