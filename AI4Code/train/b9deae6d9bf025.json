{"cell_type":{"74f2852f":"code","bad74900":"code","0a1d974d":"code","dc8118a6":"code","417ee83a":"code","7f2922d4":"code","0fde57f6":"code","2a06ad9b":"code","bf97c1fd":"code","291642d8":"code","f2d2e31c":"code","e4c98d8b":"code","6eeae7bc":"code","7be51446":"code","008e3413":"code","6404f56a":"code","da320f2e":"code","a36b0621":"code","b17fd54d":"code","a498ec6c":"code","f2aeb704":"code","bc0577cb":"code","7fc608f1":"code","bb77cf44":"code","4a9cfe3e":"code","30e4f761":"code","2219db90":"code","fb56de1c":"code","2277b528":"code","0fe229b7":"code","cc1dbf34":"code","0eeb56dc":"code","72c25d65":"code","81f861f7":"code","b503de08":"code","d99c1150":"code","fb852cf9":"code","9c17e493":"code","77593e0f":"code","283b27b2":"code","c00f6967":"code","312af7bd":"code","aa4e5254":"code","1f5d8638":"code","3c5adeda":"code","04e899c9":"code","1883abc9":"code","42c0e08f":"code","da5898fa":"code","e007a9d1":"code","0b63df33":"code","2333b306":"code","9ae81ccd":"code","f6c15d78":"code","9c3aff59":"code","ddd9fb89":"code","a6cc01cf":"code","37a7de7e":"code","f289b19d":"code","8b3190b7":"code","0c10ff32":"code","d72e5b3c":"code","fd45cdd1":"code","f9d2ef2c":"code","bddbe22b":"code","d4edc77d":"code","b8f8c4a9":"code","a956b81e":"code","7851b4cb":"code","e89efaa8":"code","978eec13":"code","85a52a38":"code","fa730245":"code","a2330047":"code","25952fb3":"code","86513c79":"code","45619999":"code","be926a27":"code","4fe538ae":"code","5b592b7a":"code","7c4b1712":"code","947dddb6":"code","94539455":"code","1dee662b":"code","3e9cc3ec":"code","2b05f82c":"code","b591116d":"code","1fdf4eca":"code","c811a95a":"code","0e7dc9c9":"code","b2069642":"code","77b5adbf":"code","8c654353":"code","f71d50fb":"code","dd856463":"code","4a921541":"code","3940a08b":"code","18b156b7":"code","ede41851":"code","a2959778":"code","8fe99671":"code","f4f70b90":"code","fa7cf27b":"code","c0c76ae0":"code","40291f1f":"code","634c6b02":"code","6064bbfe":"code","00996b89":"code","cf7248fa":"code","11b4ac38":"code","564c65a4":"code","6b000128":"code","88987804":"code","fa31b347":"code","23423331":"code","98f5c215":"code","0866ec12":"code","a8a29aba":"code","213e8b4f":"code","801ae717":"code","787ad329":"code","095431c0":"code","914883be":"code","0fed57ba":"code","bc1a289c":"code","67a803ed":"code","5f4b1635":"code","c79cacc9":"code","5d155a61":"code","5824b10c":"code","9b650c2b":"code","1673f191":"code","990b837e":"code","1ccc2897":"code","7c4dbd1d":"code","a9d6781a":"code","d482ea79":"code","976d1efb":"code","2624a936":"code","fdf715ca":"code","f44a5f5d":"code","85178e30":"code","de8de449":"code","cf0cc274":"code","994848ca":"code","cccbd173":"code","b425e103":"code","062763dc":"code","bf9780a6":"code","753934b9":"code","05f0acb4":"code","8b2b4366":"code","e44573a9":"code","53859e02":"code","c8e6c816":"code","dcef1788":"code","2f1f0e9c":"code","048eca5f":"code","d8d357fa":"code","acc69bbc":"code","deb9d2d8":"code","e1ff6f73":"code","dca8090b":"code","b01a8489":"code","d20cf804":"code","f5ebeb97":"code","5a881cab":"code","fa4581d0":"code","f3a3824f":"code","1fca02e6":"code","157a91a4":"code","62364976":"code","7aae6dbe":"code","f79caf68":"code","9ddc45a0":"code","d4af0977":"code","49f94300":"code","bdbff487":"code","6db449ce":"code","c1750f38":"code","5c518afc":"code","e4cfe141":"code","8a2078eb":"code","360f43b9":"code","f930d67c":"code","4aad91b2":"code","b3f48340":"code","5312d6c3":"code","e75ebcaf":"code","361655c8":"code","cbf57428":"code","9c729942":"code","4780cb10":"code","8cc4998f":"code","333b219f":"code","0bd87bbf":"code","e6a447ee":"code","935b5949":"code","a67b4c17":"code","93dac804":"code","976cf88b":"code","2e5104cf":"code","092edf95":"code","36136a7a":"code","6dc61f49":"code","bee32d0e":"code","c1ca544b":"code","6acb8ebb":"code","2b8266cb":"code","d7c03730":"code","b9a02511":"code","3cc148a2":"code","7282da03":"code","04e42a6b":"code","a328af71":"code","f1e3fdc8":"code","f141f507":"code","231bfc90":"code","44241b0f":"code","6437b5bc":"code","30a6a3a7":"code","73dec979":"code","aa083b92":"code","63061ed2":"code","0907c646":"code","6f154eed":"code","41fec21e":"code","cdf79ff6":"code","d84481bf":"code","d17741b4":"code","b7abab3d":"code","c5a084fa":"code","431d70a5":"code","c17ee7a8":"code","288ed44d":"code","af53caee":"code","0d07b6fd":"code","b0b68792":"code","549d1b8d":"code","1c9b4329":"code","6282c397":"code","2ceb0196":"code","7869c9d2":"code","1c1d6bc3":"code","70139b7c":"code","bd71b8fb":"code","f9f7e49e":"code","75d3a93f":"code","b9002c28":"code","74eb192d":"code","f293820c":"code","3b062259":"code","53326443":"code","7805546f":"code","fa361a97":"code","23a055e6":"code","c3a317b6":"code","e1066016":"code","45425f92":"code","7a9af8e3":"code","d71be3bc":"code","292b63fc":"code","e2bb45ee":"code","039beeda":"code","c2462d44":"code","91ef1a5b":"code","4364e346":"code","a8653c9e":"code","92406638":"code","0c211d2e":"code","dbd0a517":"code","63bb6a74":"code","995a2110":"code","986acc6e":"markdown","18209a84":"markdown","c87c2395":"markdown","dc91fc8e":"markdown","267f0fdc":"markdown","31f18a74":"markdown","df07d3e1":"markdown","c1ad1329":"markdown","98f6efcb":"markdown","f7e3bdcb":"markdown","e2456619":"markdown","b562124e":"markdown","1c2ab9cc":"markdown","df34f779":"markdown","1674e711":"markdown","319a53fc":"markdown","5840ec8f":"markdown","ff921f57":"markdown","9d59ae3c":"markdown","198e384f":"markdown","9fad83d5":"markdown","c0024934":"markdown","a47e3efe":"markdown","f2db1c1b":"markdown","95e2bb11":"markdown","52cb13da":"markdown","00321c11":"markdown","5e74717d":"markdown","71dc5e3f":"markdown","b3827384":"markdown","1e70430d":"markdown","b5426fcb":"markdown","8b3b3580":"markdown","7b0358d9":"markdown","84feeaf8":"markdown","da05add3":"markdown","c84c6ea0":"markdown","e4238c20":"markdown","c74a0f4d":"markdown","e690ca72":"markdown","fb324653":"markdown","53003ff0":"markdown","ea584168":"markdown","6695d1b4":"markdown","077d3f37":"markdown","035b7c10":"markdown","f5e7c221":"markdown","df4af904":"markdown","af0430b9":"markdown","17f4d577":"markdown","744c9a1a":"markdown","f2159fa6":"markdown","041610d4":"markdown","8de0a542":"markdown","2e7255f9":"markdown","531b4a01":"markdown","97807fcf":"markdown","648addda":"markdown","fb284e6a":"markdown","4ed7c9ef":"markdown","8931e186":"markdown","54f9bc05":"markdown","8910e7d8":"markdown","b98f7b90":"markdown","ea749b5c":"markdown","80c8e4ea":"markdown","c936bce4":"markdown","10a786ee":"markdown","347343fd":"markdown","555bc3a0":"markdown","bec19fdf":"markdown","a506f795":"markdown","3632a129":"markdown"},"source":{"74f2852f":"# Import Numpy Library\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom IPython.display import Image","bad74900":"list1 = [10,20,30,40,50,60]\nlist1","0a1d974d":"# Display the type of an object\ntype(list1)","dc8118a6":"#Convert list to Numpy Array\narr1 = np.array(list1)\narr1","417ee83a":"#Memory address of an array object\narr1.data","7f2922d4":"# Display type of an object\ntype(arr1)","0fde57f6":"#Datatype of array\narr1.dtype","2a06ad9b":"# Convert Integer Array to FLOAT\narr1.astype(float)","bf97c1fd":"# Generate evenly spaced numbers (space =1) between 0 to 10\nnp.arange(0,10)","291642d8":"# Generate numbers between 0 to 100 with a space of 10\nnp.arange(0,100,10)","f2d2e31c":"# Generate numbers between 10 to 100 with a space of 10 in descending order\nnp.arange(100, 10, -10)","e4c98d8b":"#Shape of Array\narr3 = np.arange(0,10)\narr3.shape","6eeae7bc":"arr3","7be51446":"# Size of array\narr3.size","008e3413":"# Dimension \narr3.ndim","6404f56a":"# Datatype of object\narr3.dtype","da320f2e":"# Bytes consumed by one element of an array object\narr3.itemsize","a36b0621":"# Bytes consumed by an array object\narr3.nbytes","b17fd54d":"# Length of array\nlen(arr3)","a498ec6c":"# Generate an array of zeros\nnp.zeros(10)","f2aeb704":"# Generate an array of ones with given shape\nnp.ones(10)","bc0577cb":"# Repeat 10 five times in an array\nnp.repeat(10,5)","7fc608f1":"# Repeat each element in array 'a' thrice\na= np.array([10,20,30])\nnp.repeat(a,3)","bb77cf44":"# Array of 10's\nnp.full(5,10)","4a9cfe3e":"# Generate array of Odd numbers\nar1 = np.arange(1,20)\nar1[ar1%2 ==1]","30e4f761":"# Generate array of even numbers\nar1 = np.arange(1,20)\nar1[ar1%2 == 0]","2219db90":"# Generate evenly spaced 4 numbers between 10 to 20.\nnp.linspace(10,20,4)","fb56de1c":"# Generate evenly spaced 11 numbers between 10 to 20.\nnp.linspace(10,20,11)","2277b528":"# Create an array of random values\nnp.random.random(4)","0fe229b7":"# Generate an array of Random Integer numbers\nnp.random.randint(0,500,5)","cc1dbf34":"# Generate an array of Random Integer numbers\nnp.random.randint(0,500,10)","0eeb56dc":"# Using random.seed we can generate same number of Random numbers\nnp.random.seed(123)\nnp.random.randint(0,100,10)","72c25d65":"# Using random.seed we can generate same number of Random numbers\nnp.random.seed(123)\nnp.random.randint(0,100,10)","81f861f7":"# Using random.seed we can generate same number of Random numbers\nnp.random.seed(101)\nnp.random.randint(0,100,10)","b503de08":"# Using random.seed we can generate same number of Random numbers\nnp.random.seed(101)\nnp.random.randint(0,100,10)","d99c1150":"# Generate array of Random float numbers\nf1 = np.random.uniform(5,10, size=(10))\nf1","fb852cf9":"# Extract Integer part\nnp.floor(f1)","9c17e493":"# Truncate decimal part\nnp.trunc(f1)","77593e0f":"# Convert Float Array to Integer array\nf1.astype(int)","283b27b2":"# Normal distribution (mean=0 and variance=1)\nb2 =np.random.randn(10)\nb2","c00f6967":"arr1","312af7bd":"# Enumerate for Numpy Arrays\nfor index, value in np.ndenumerate(arr1):\n    print(index, value)","aa4e5254":"arr2 = np.arange(1,20)\narr2","1f5d8638":"# Sum of all elements in an array\narr2.sum()","3c5adeda":"# Cumulative Sum\nnp.cumsum(arr2)","04e899c9":"# Find Minimum number in an array\narr2.min()","1883abc9":"# Find MAX number in an array\narr2.max()","42c0e08f":"# Find INDEX of Minimum number in an array\narr2.argmin()","da5898fa":"# Find INDEX of MAX number in an array\narr2.argmax()","e007a9d1":"# Find mean of all numbers in an array\narr2.mean()","0b63df33":"# Find median of all numbers present in arr2\nnp.median(arr2)","2333b306":"# Variance\nnp.var(arr2)","9ae81ccd":"# Standard deviation\nnp.std(arr2)","f6c15d78":"# Calculating percentiles\nnp.percentile(arr2,70)","9c3aff59":"# 10th & 70th percentile\nnp.percentile(arr2,[10,70])","ddd9fb89":"A = np.array([[1,2,3,0] , [5,6,7,22] , [10 , 11 , 1 ,13] , [14,15,16,3]])\nA","a6cc01cf":"# SUM of all numbers in a 2D array\nA.sum()","37a7de7e":"# MAX number in a 2D array\nA.max()","f289b19d":"# Minimum\nA.min()","8b3190b7":"# Column wise mimimum value \nnp.amin(A, axis=0)","0c10ff32":"# Row wise mimimum value \nnp.amin(A, axis=1)","d72e5b3c":"# Mean of all numbers in a 2D array\nA.mean()","fd45cdd1":"# Mean\nnp.mean(A)","f9d2ef2c":"# Median\nnp.median(A)","bddbe22b":"# 50 percentile = Median\nnp.percentile(A,50)","d4edc77d":"np.var(A)","b8f8c4a9":"np.std(A)","a956b81e":"np.percentile(arr2,70)","7851b4cb":"# Enumerate for Numpy 2D Arrays\nfor index, value in np.ndenumerate(A):\n    print(index, value)","e89efaa8":"a = np.array([7,5,3,9,0,2])","978eec13":"# Access first element of the array\na[0]","85a52a38":"# Access all elements of Array except first one.\na[1:]","fa730245":"# Fetch 2nd , 3rd & 4th value from the Array\na[1:4]","a2330047":"# Get last element of the array\na[-1]","25952fb3":"a[-3]","86513c79":"a[-6]","45619999":"a[-3:-1]","be926a27":"ar = np.arange(1,20)\nar","4fe538ae":"# Replace EVEN numbers with ZERO\nrep1 = np.where(ar % 2 == 0, 0 , ar)\nprint(rep1)","5b592b7a":"ar2 = np.array([10, 20 , 30 , 10 ,10 ,20, 20])\nar2","7c4b1712":"# Replace 10 with value 99\nrep2 = np.where(ar2 == 10, 99 , ar2)\nprint(rep2)","947dddb6":"p2 = np.arange(0,100,10)\np2","94539455":"# Replace values at INDEX loc 0,3,5 with 33,55,99\nnp.put(p2, [0, 3 , 5], [33, 55, 99])\np2","1dee662b":"a = np.array([10 ,np.nan,20,30,60,np.nan,90,np.inf])\na","3e9cc3ec":"# Search for missing values and return as a boolean array\nnp.isnan(a)","2b05f82c":"# Index of missing values in an array\nnp.where(np.isnan(a))","b591116d":"# Replace all missing values with 99\na[np.isnan(a)] = 99\na","1fdf4eca":"# Check if array has any NULL value\nnp.isnan(a).any()","c811a95a":"A = np.array([[1,2,np.nan,4] , [np.nan,6,7,8] , [10 , np.nan , 12 ,13] , [14,15,16,17]])\nA","0e7dc9c9":"# Search for missing values and return as a boolean array\nnp.isnan(A)","b2069642":"# Index of missing values in an array\nnp.where(np.isnan(A))","77b5adbf":"a = np.zeros(20).reshape(2,-1)\nb = np.repeat(1, 20).reshape(2,-1)\na","8c654353":"b","f71d50fb":"np.vstack([a,b])","dd856463":"a1 = np.array([[1], [2], [3]])\nb1 = np.array([[4], [5], [6]])","4a921541":"a1","3940a08b":"b1","18b156b7":"np.vstack([a1,b1])","ede41851":"np.hstack([a,b])","a2959778":"np.hstack([a1,b1])","8fe99671":"### hstack & vstack\n\narr1 = np.array([[7,13,14],[18,10,17],[11,12,19]])\narr2= np.array([16,6,1])\narr3= np.array([[5,8,4,3]])\n\nnp.hstack((np.vstack((arr1,arr2)),np.transpose(arr3)))","f4f70b90":"c1 = np.array([10,20,30,40,50,60])\nc2 = np.array([12,20,33,40,55,60])","fa7cf27b":"np.intersect1d(c1,c2)","c0c76ae0":"# Remove common elements of C1 & C2 array from C1\n\nnp.setdiff1d(c1,c2)","40291f1f":"a = np.array([1,2,3,6,8])\nb = np.array([10,2,30,60,8])\n\nnp.where(a == b) # returns the indices of elements in an input array where the given condition is satisfied.","634c6b02":"# Return an array where condition is satisfied\na[np.where(a == b)]","6064bbfe":"# Return all numbers betweeen 20 & 35\na1 = np.arange(0,60)\na1[np.where ((a1>20) & (a1<35))]","00996b89":"# Return all numbers betweeen 20 & 35 OR numbers divisible by 10\na1 = np.arange(0,60)\na1[np.where (((a1>20) & (a1<35)) | (a1 % 10 ==0)) ]","cf7248fa":"# Return all numbers betweeen 20 & 35 using np.logical_and\na1[np.where(np.logical_and(a1>20, a1<35))]","11b4ac38":"a = np.array([10,20,30,40,50,60,70])\na","564c65a4":"# Check whether number 11 & 20 are present in an array\nnp.isin(a, [11,20])","6b000128":"#Display the matching numbers\na[np.isin(a,20)]","88987804":"# Check whether number 33 is present in an array\nnp.isin(a, 33)","fa31b347":"a[np.isin(a, 33)]","23423331":"b = np.array([10,20,30,40,10,10,70,80,70,90])\nb","98f5c215":"# Check whether number 10 & 70 are present in an array\nnp.isin(b, [10,70])","0866ec12":"# Display the indices where match occurred\nnp.where(np.isin(b, [10,70]))","a8a29aba":"# Display the matching values\nb[np.where(np.isin(b, [10,70]))]","213e8b4f":"# Display the matching values\nb[np.isin(b, [10,70])]","801ae717":"a4 = np.arange(10,30)","787ad329":"a4","095431c0":"# Reverse the array\na4[::-1]","914883be":"# Reverse the array\nnp.flip(a4)","0fed57ba":"a3 = np.array([[3,2,8,1] , [70,50,10,67] , [45,25,75,15] , [12,9,77,4]])\na3","bc1a289c":"# Reverse ROW positions\na3[::-1,]","67a803ed":"# Reverse COLUMN positions\na3[:,::-1]","5f4b1635":"# Reverse both ROW & COLUMN positions\na3[::-1,::-1]","c79cacc9":"a = np.array([10,5,2,22,12,92,17,33])","5d155a61":"# Sort array in ascending order\nnp.sort(a)","5824b10c":"a3 = np.array([[3,2,8,1] , [70,50,10,67] , [45,25,75,15]])\na3","9b650c2b":"# Sort along rows\nnp.sort(a3)","1673f191":"# Sort along rows\nnp.sort(a3,axis =1)","990b837e":"# Sort along columns\nnp.sort(a3,axis =0)","1ccc2897":"# Sort in descending order\nb = np.sort(a)\nb = b[::-1]\nb","7c4dbd1d":"# Sort in descending order\nc = np.sort(a)\nnp.flip(c)","a9d6781a":"# Sort in descending order\na[::-1].sort()\na","d482ea79":"p = np.arange(0,50)\np","976d1efb":"np.random.shuffle(p)\np","2624a936":"# Return \"n\" largest numbers in an Array\nn = 4\np[np.argsort(p)[-nth:]]","fdf715ca":"# Return \"n\" largest numbers in an Array\np[np.argpartition(-p,n)[:n]]","f44a5f5d":"# Return \"n\" smallest numbers in an Array\np[np.argsort(-p)[-n:]]","85178e30":"# Return \"n\" smallest numbers in an Array\np[np.argpartition(p,n)[:n]]","de8de449":"a5 = [10,20,30] \na5","cf0cc274":"# Repeat whole array twice\nnp.tile(a5, 2)","994848ca":"# Repeat each element in an array thrice\nnp.repeat(a5, 3)","cccbd173":"d1 = np.arange(0,10)\nd1","b425e103":"d2 = np.arange(0,10)\nd2","062763dc":"d3 = np.arange(10,20)\nd3","bf9780a6":"d4 = d1[::-1]\nd4","753934b9":"# Compare arrays using \"allclose\" function. If this function returns True then Arrays are equal\nres1 = np.allclose(d1,d2)\nres1","05f0acb4":"# Compare arrays using \"allclose\" function. If this function returns False then Arrays are not equal\nres2 = np.allclose(d1,d3)\nres2","8b2b4366":"# Compare arrays using \"allclose\" function.\nres3 = np.allclose(d1,d4)\nres3","e44573a9":"# unique numbers in an array\nb = np.array([10,10,10,20,30,20,30,30,20,10,10,30,10])\nnp.unique(b)","53859e02":"# unique numbers in an array along with the count E.g value 10 occurred maximum times (5 times) in an array \"b\"\nval , count = np.unique(b,return_counts=True)\nval,count","c8e6c816":"# 10 is the most frequent value \nnp.bincount(b).argmax()","dcef1788":"d5 = np.arange(10,100,10)\nd5","2f1f0e9c":"# Make arrays immutable  \nd5.flags.writeable = False","048eca5f":"d5[0] = 99","d8d357fa":"d5[2] = 11","acc69bbc":"# Load data from a text file using loadtext\np4 = np.loadtxt('sample.txt', \n                dtype = np.integer # Decides the datatype of resulting array\n               )\np4","deb9d2d8":"# Load data from a text file using genfromtxt\np5 = np.genfromtxt('sample0.txt',dtype='str')\np5","e1ff6f73":"# Accessing specific rows\np5[0]","dca8090b":"# Accessing specific columns\np5[:,0]","b01a8489":"p6 = np.genfromtxt('sample2.txt', \n                   delimiter=' ', \n                   dtype=None, \n                   names=('Name', 'ID', 'Age')\n                  )\np6","d20cf804":"# Skip header using \"skiprows\" parameter\np6 = np.loadtxt('sample2.txt', \n                   delimiter=' ', \n                   dtype=[('Name', str, 50), ('ID', np.integer), ('Age', np.integer)], \n                   skiprows=1\n                  )\np6","f5ebeb97":"# Return only first & third column using \"usecols\" parameter\nnp.loadtxt('sample.txt', delimiter =' ', usecols =(0, 2)) ","5a881cab":"# Return only three rows using \"max_rows\" parameter\np6 = np.loadtxt('sample2.txt', \n                   delimiter=' ', \n                   dtype=[('Name', str, 50), ('ID', np.integer), ('Age', np.integer)], \n                   skiprows=1,\n                   max_rows = 3\n                  )\np6","fa4581d0":"# Skip header using \"skip_header\" parameter\np6 = np.genfromtxt('sample2.txt', \n                   delimiter=' ', \n                   dtype=[('Name', str, 50), ('ID', np.integer), ('Age', np.float)], \n                   names=('Name', 'ID', 'Age'),\n                   skip_header=1\n                  )\np6","f3a3824f":"p7 = np.arange(10,200,11)\np7","1fca02e6":"np.savetxt('test3.csv', p7, delimiter=',')","157a91a4":"p8 = np.arange(0,121).reshape(11,11)\np8","62364976":"np.save('test4.npy', p8)","7aae6dbe":"p9 = np.load('test4.npy')\np9","f79caf68":"np.save('numpyfile', p8)","9ddc45a0":"p10 = np.load('numpyfile.npy')\np10","d4af0977":"p11 = np.arange(0,1000000).reshape(1000,1000)\np11","49f94300":"# Save Numpy array to a compressed file\nnp.savez_compressed('test6.npz', p11)","bdbff487":"# Save Numpy array to a npy file\nnp.save('test7.npy', p11)","6db449ce":"# Compressed file size is much lesser than normal npy file\nImage(filename='load_save.PNG')","c1750f38":"# Display values upto 4 decimal place\nnp.set_printoptions(precision=4)\na = np.array([12.654398765 , 90.7864098354674])\na","5c518afc":"# Display values upto 2 decimal place\nnp.set_printoptions(precision=2)\na = np.array([12.654398765 , 90.7864098354674])\na","e4cfe141":"# Array Summarization\nnp.set_printoptions(threshold=3)\nnp.arange(200)","8a2078eb":"# Reset Formatter\nnp.set_printoptions(precision=8,suppress=False, threshold=1000, formatter=None)\na = np.array([12.654398765 , 90.7864098354674])\na","360f43b9":"np.arange(1,1100)","f930d67c":"# Display all values\nnp.set_printoptions(threshold=np.inf)\nnp.arange(1,1100)","4aad91b2":"v1 = np.array([1,2])\nv2 = np.array([3,4])\nv3 = v1+v2\nv3 = np.add(v1,v2)\nprint('V3 =' ,v3)","b3f48340":"a1 = [5 , 6 ,8]\na2 = [4, 7 , 9]\nprint(np.multiply(a1,a2))","5312d6c3":"a1 = np.array([1,2,3])\na2 = np.array([4,5,6])\n\ndotp = a1@a2\nprint(\" Dot product - \",dotp)\n\ndotp = np.dot(a1,a2)\nprint(\" Dot product usign np.dot\",dotp)\n\ndotp = np.inner(a1,a2)\nprint(\" Dot product usign np.inner\", dotp)\n\ndotp = sum(np.multiply(a1,a2))\nprint(\" Dot product usign np.multiply & sum\",dotp)\n\ndotp = np.matmul(a1,a2)\nprint(\" Dot product usign np.matmul\",dotp)\n\ndotp = 0\nfor i in range(len(a1)):\n    dotp = dotp + a1[i]*a2[i]\nprint(\" Dot product usign for loop\" , dotp)","e75ebcaf":"v3 = np.array([1,2,3,4,5,6])\nlength = np.sqrt(np.dot(v3,v3))\nlength","361655c8":"v3 = np.array([1,2,3,4,5,6])\nlength = np.sqrt(sum(np.multiply(v3,v3)))\nlength","cbf57428":"v3 = np.array([1,2,3,4,5,6])\nlength = np.sqrt(np.matmul(v3,v3))\nlength","9c729942":"#First Method\nv1 = [2,3]\nlength_v1 = np.sqrt(np.dot(v1,v1))\nnorm_v1 = v1\/length_v1\nlength_v1 , norm_v1","4780cb10":"#Second Method\nv1 = [2,3]\nnorm_v1 = v1\/np.linalg.norm(v1)\nnorm_v1","8cc4998f":"#First Method\nv1 = np.array([8,4])\nv2 = np.array([-4,8])\nang = np.rad2deg(np.arccos( np.dot(v1,v2) \/ (np.linalg.norm(v1)*np.linalg.norm(v2))))\nang","333b219f":"#Second Method\nv1 = np.array([4,3])\nv2 = np.array([-3,4])\nlengthV1 = np.sqrt(np.dot(v1,v1)) \nlengthV2  = np.sqrt(np.dot(v2,v2))\nang = np.rad2deg(np.arccos( np.dot(v1,v2) \/ (lengthV1 * lengthV2)))\nprint('Angle between Vectors - %s' %ang)","0bd87bbf":"v1 = np.array([1,2,3])\nv2 = np.array([4,5,6])\nnp.inner(v1,v2)\n\nprint(\"\\n Inner Product ==>  \\n\", np.inner(v1,v2))\nprint(\"\\n Outer Product ==>  \\n\", np.outer(v1,v2))","e6a447ee":"v1 = np.array([1,2,3])\nv2 = np.array([4,5,6])\nprint(\"\\nVector Cross Product ==>  \\n\", np.cross(v1,v2))","935b5949":"# Create a 4x4 matrix\nA = np.array([[1,2,3,4] , [5,6,7,8] , [10 , 11 , 12 ,13] , [14,15,16,17]])\nA","a67b4c17":"# Datatype of Matrix\nA.dtype","93dac804":"B = np.array([[1.5,2.07,3,4] , [5,6,7,8] , [10 , 11 , 12 ,13] , [14,15,16,17]])\nB","976cf88b":"# Datatype of Matrix\nB.dtype","2e5104cf":"# Shape of Matrix\nA.shape","092edf95":"# Generate a 4x4 zero matrix\nnp.zeros((4,4))","36136a7a":"#Shape of Matrix\nz1 = np.zeros((4,4))\nz1.shape","6dc61f49":"# Generate a 5x5 matrix filled with ones\nnp.ones((5,5))","bee32d0e":"# Return 10x10 matrix of random integer numbers between 0 to 500\nnp.random.randint(0,500, (10,10))","c1ca544b":"arr2","6acb8ebb":"arr2.reshape(5,4)","2b8266cb":"mat1 = np.random.randint(0,1000,100).reshape(10,10)\nmat1","d7c03730":"mat1[0,0]","b9a02511":"mat1[mat1 > 500]","3cc148a2":"# Identity Matrix : https:\/\/en.wikipedia.org\/wiki\/Identity_matrix\n\nI = np.eye(9)\nI","7282da03":"# Diagonal Matrix : https:\/\/en.wikipedia.org\/wiki\/Diagonal_matrix\n\nD = np.diag([1,2,3,4,5,6,7,8])\nD","04e42a6b":"# Traingular Matrices (lower & Upper triangular matrix) : https:\/\/en.wikipedia.org\/wiki\/Triangular_matrix\n\nM = np.random.randn(5,5)\nU = np.triu(M)\nL = np.tril(M)\nprint(\"lower triangular matrix - \\n\" , M)\nprint(\"\\n\")\n\n\nprint(\"lower triangular matrix - \\n\" , L)\nprint(\"\\n\")\n\nprint(\"Upper triangular matrix - \\n\" , U)\n","a328af71":"# Generate a 5X5 matrix with a given fill value of 8\nnp.full((5,5) , 8)","f1e3fdc8":"# Generate 5X5 matrix of Random float numbers between 10 to 20\nnp.random.uniform(10,20, size=(5,5))","f141f507":"A","231bfc90":"# Collapse Matrix into one dimension array\nA.flatten()","44241b0f":"# Collapse Matrix into one dimension array\nA.ravel()","6437b5bc":"A","30a6a3a7":"# Fetch first row of matrix\nA[0,]","73dec979":"# Fetch first column of matrix\nA[:,0]","aa083b92":"# Fetch first element of the matrix\nA[0,0]","63061ed2":"A[1:3 , 1:3]","0907c646":"arr = np.arange(16).reshape(4,4)\narr","6f154eed":"# Reverse rows\narr[::-1]","41fec21e":"#Reverse Columns\narr[:, ::-1]","cdf79ff6":"m1 = np.arange(0,16).reshape(4,4)\nm1","d84481bf":"# SWAP rows 0 & 1\nm1[[0,1]] = m1[[1,0]]\nm1","d17741b4":"# SWAP rows 2 & 3\nm1[[3,2]] = m1[[2,3]]\nm1","b7abab3d":"m2 = np.arange(0,36).reshape(6,6)\nm2","c5a084fa":"# Swap columns 0 & 1\nm2[:,[0, 1]] = m2[:,[1, 0]]\nm2","431d70a5":"# Swap columns 2 & 3\nm2[:,[2, 3]] = m2[:,[3, 2]]\nm2","c17ee7a8":"A = np.array([[1,2] , [3,4] ,[5,6]])\nB = np.array([[1,1] , [1,1]])\nC = np.concatenate((A,B))\nC","288ed44d":"#********************************************************#\nM = np.array([[1,2,3],[4,-3,6],[7,8,0]])\nN = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n First Matrix (M)  ==>  \\n\", M)\nprint(\"\\n Second Matrix (N)  ==>  \\n\", N)\n\nC = M+N\nprint(\"\\n Matrix Addition (M+N)  ==>  \\n\", C)\n\n# OR\n\nC = np.add(M,N,dtype = np.float64)\nprint(\"\\n Matrix Addition using np.add  ==>  \\n\", C)\n\n#********************************************************#","af53caee":"#********************************************************#\nM = np.array([[1,2,3],[4,-3,6],[7,8,0]])\nN = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n First Matrix (M)  ==>  \\n\", M)\nprint(\"\\n Second Matrix (N)  ==>  \\n\", N)\n\nC = M-N\nprint(\"\\n Matrix Subtraction (M-N)  ==>  \\n\", C)\n\n# OR\n\nC = np.subtract(M,N,dtype = np.float64)\nprint(\"\\n Matrix Subtraction using np.subtract  ==>  \\n\", C)\n\n#********************************************************#","0d07b6fd":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nC = 10\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nMatrices Scalar Multiplication ==>  \\n\", C*M)\n\n# OR\n\nprint(\"\\nMatrices Scalar Multiplication ==>  \\n\", np.multiply(C,M))","b0b68792":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nTranspose of M ==>  \\n\", np.transpose(M))\n\n# OR\n\nprint(\"\\nTranspose of M ==>  \\n\", M.T)","549d1b8d":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nDeterminant of M ==>  \", np.linalg.det(M))","1c9b4329":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nRank of M ==> \", np.linalg.matrix_rank(M))","6282c397":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nTrace of M ==> \", np.trace(M))","2ceb0196":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\n\nprint(\"\\n Matrix (M)  ==>  \\n\", M)\n\nprint(\"\\nInverse of M ==> \\n\", np.linalg.inv(M))","7869c9d2":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\nN = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n First Matrix (M)  ==>  \\n\", M)\nprint(\"\\n Second Matrix (N)  ==>  \\n\", N)\n\nprint(\"\\n Point-Wise Multiplication of M & N  ==> \\n\", M*N)\n\n# OR\n\nprint(\"\\n Point-Wise Multiplication of M & N  ==> \\n\", np.multiply(M,N))","1c1d6bc3":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\nN = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n First Matrix (M)  ==>  \\n\", M)\nprint(\"\\n Second Matrix (N)  ==>  \\n\", N)\n\nprint(\"\\n Matrix Dot Product ==> \\n\", M@N)\n\n# OR\n\nprint(\"\\n Matrix Dot Product using np.matmul ==> \\n\", np.matmul(M,N))\n\n# OR\n\nprint(\"\\n Matrix Dot Product using np.dot ==> \\n\", np.dot(M,N))","70139b7c":"M = np.array([[1,2,3],[4,-3,6],[7,8,0]])\nN = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n First Matrix (M)  ==>  \\n\", M)\nprint(\"\\n Second Matrix (N)  ==>  \\n\", N)\n\n\nprint(\"\\n Matrix Division (M\/N)   ==> \\n\", M\/N)\n\n# OR\n\nprint(\"\\n Matrix Division (M\/N)   ==> \\n\", np.divide(M,N))","bd71b8fb":"N = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n Matrix (N)  ==>  \\n\", N)\n\n\nprint (\"Sum of all elements in a Matrix  ==>\")\nprint (np.sum(N))","f9f7e49e":"N = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n Matrix (N)  ==>  \\n\", N)\n\nprint (\"Column-Wise summation ==> \")\nprint (np.sum(N,axis=0))","75d3a93f":"N = np.array([[1,1,1],[2,2,2],[3,3,3]])\n\nprint(\"\\n Matrix (N)  ==>  \\n\", N)\n\nprint (\"Row-Wise summation  ==>\")\nprint (np.sum(N,axis=1))","b9002c28":"M1 = np.array([[1,2,3] , [4,5,6]]) \nM1","74eb192d":"M2 = np.array([[10,10,10],[10,10,10]])\nM2","f293820c":"np.kron(M1,M2)","3b062259":"M1 = np.array([[1,2],[4,5]])\nM1","53326443":"#Matrix to the power 3\n\nM1@M1@M1","7805546f":"#Matrix to the power 3\n\nnp.linalg.matrix_power(M1,3)","fa361a97":"# Create Tensor\n\nT1 = np.array([\n  [[1,2,3],    [4,5,6],    [7,8,9]],\n  [[10,20,30], [40,50,60], [70,80,90]],\n  [[100,200,300], [400,500,600], [700,800,900]],\n  ])\n\nT1","23a055e6":"T2 = np.array([\n  [[0,0,0] , [0,0,0] , [0,0,0]],\n  [[1,1,1] , [1,1,1] , [1,1,1]],\n  [[2,2,2] , [2,2,2] , [2,2,2]]\n    \n])\n\nT2","c3a317b6":"A = T1+T2\nA","e1066016":"np.add(T1,T2)","45425f92":"S = T1-T2\nS","7a9af8e3":"np.subtract(T1,T2)","d71be3bc":"P = T1*T2\nP","292b63fc":"np.multiply(T1,T2)","e2bb45ee":"D = T1\/T2\nD","039beeda":"np.divide(T1,T2)","c2462d44":"T1","91ef1a5b":"T2","4364e346":"np.tensordot(T1,T2)","a8653c9e":"A = np.array([[1,2,3] , [4,5,6] , [7,8,9]])\nA","92406638":"B = np.random.random((3,1))\nB","0c211d2e":"# Ist Method\nX = np.dot(np.linalg.inv(A) , B)\nX","dbd0a517":"# 2nd Method\nX = np.matmul(np.linalg.inv(A) , B)\nX","63bb6a74":"# 3rd Method\nX = np.linalg.inv(A)@B\nX","995a2110":"# 4th Method\nX = np.linalg.solve(A,B)\nX","986acc6e":"# Transpose of a matrix\n","18209a84":"# Tensor Element-Wise Division","c87c2395":"How to normalize a vector : https:\/\/www.youtube.com\/watch?v=7fn03DIW3Ak","dc91fc8e":"# Reverse Array","267f0fdc":"# Frequent Values in an Array","31f18a74":"https:\/\/www.youtube.com\/watch?v=WNuIhXo39_k\n\nhttps:\/\/www.youtube.com\/watch?v=LyGKycYT2v0","df07d3e1":"# Process Elements on Conditions","c1ad1329":"# Sum of all elements in a matrix","98f6efcb":"# Row-Wise Addition","f7e3bdcb":"# Sorting Array","e2456619":"# Replace elements in array","b562124e":"# Concatenate Matrices","1c2ab9cc":"# Tensor Element-Wise Product","df34f779":"# Matrix Multiplication (pointwise multiplication)","1674e711":"# Tensor Addition","319a53fc":"# Tensor","5840ec8f":"# Printing Options","ff921f57":"Matrix Multiplication :\n\nhttps:\/\/www.youtube.com\/watch?v=vzt9c7iWPxs&t=207s\n\nhttps:\/\/www.youtube.com\/watch?v=XkY2DOUCWMU&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&index=4","9d59ae3c":"# Trace of matrix","198e384f":"# Dot Product","9fad83d5":"# Length of Vector","c0024934":"What is Tensor :\n   - https:\/\/www.youtube.com\/watch?v=f5liqUk0ZTw\n   - https:\/\/www.youtube.com\/watch?v=bpG3gqDM80w&t=634s\n   - https:\/\/www.youtube.com\/watch?v=uaQeXi4E7gA","a47e3efe":"# Angle between vectors","f2db1c1b":"Transpose of a matrix : https:\/\/www.youtube.com\/watch?v=g_Rz94DXvNo&list=PLmdFyQYShrjcoVkhCCIwxNj9N4rW1-T5I&index=13","95e2bb11":"# Matrix subtraction","52cb13da":"Solving Equations : \n   - https:\/\/www.youtube.com\/watch?v=NNmiOoWt86M\n   - https:\/\/www.youtube.com\/watch?v=a2z7sZ4MSqo","00321c11":"# Repeating Sequences","5e74717d":"# Solving Equations $$AX = B$$","71dc5e3f":"# Reverse Rows \/ Columns of a Matrix","b3827384":"Determinant of a matrix :\n\nhttps:\/\/www.youtube.com\/watch?v=21LWuY8i6Hw&t=88s\n    \nhttps:\/\/www.youtube.com\/watch?v=Ip3X9LOh2dk&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&index=6","1e70430d":"# Normalized Vector","b5426fcb":"# Matrices Scalar Multiplication","8b3b3580":"Matrix subtraction : https:\/\/www.youtube.com\/watch?v=7jb_AO_hRc8&list=PLmdFyQYShrjcoVkhCCIwxNj9N4rW1-T5I&index=8","7b0358d9":"# Matrix Addition","84feeaf8":"# Inner & outer products","da05add3":"<!DOCTYPE html>\n<html>\n<body>\n<div align=\"center\">\n<h2>Prepared by Asif Bhat<\/h2>\n    \n<h1>Numpy Tutorial<\/h1>\n<\/div>\n<\/body>\n<\/html>","c84c6ea0":"Kronecker Product of matrices : https:\/\/www.youtube.com\/watch?v=e1UJXvu8VZk","e4238c20":"Inverse of matrix : https:\/\/www.youtube.com\/watch?v=pKZyszzmyeQ","c74a0f4d":"# Read-Only Array","e690ca72":"# Stack Arrays Vertically","fb324653":"# END","53003ff0":"# Reading elements of a Matrix","ea584168":"# Operations on an Array","6695d1b4":"# Numpy Array Creation","077d3f37":"# Vector Addition","035b7c10":"# Reading elements of an array","f5e7c221":"Matrices Scalar Multiplication : https:\/\/www.youtube.com\/watch?v=4lHyTQH1iS8&list=PLmdFyQYShrjcoVkhCCIwxNj9N4rW1-T5I&index=9","df4af904":"# Determinant of a matrix\n","af0430b9":"Matrix Concatenation : https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.concatenate.html","17f4d577":"# Missing Values in an array","744c9a1a":"# Matrix Powers","f2159fa6":"# Kronecker Product of matrices\n","041610d4":"# Remove Common Elements","8de0a542":"Matrix Addition : https:\/\/www.youtube.com\/watch?v=ZCmVpGv6_1g","2e7255f9":"# Multiplication of vectors","531b4a01":"# Compare Arrays","97807fcf":"# Tensor Dot Product","648addda":"# SWAP Rows & Columns","fb284e6a":"# Rank of a matrix","4ed7c9ef":"# Stack Arrays Horizontally","8931e186":"# Matrix dot product","54f9bc05":"# Check for elements in an Array using isin()","8910e7d8":"# Operations on a 2D Array","b98f7b90":"# \"N\" Largest & Smallest Numbers in an Array","ea749b5c":"# Matrix Division","80c8e4ea":"# Inverse of matrix A\n","c936bce4":"# Load & Save","10a786ee":"# Vector Cross Product","347343fd":"# Matrix Creation","555bc3a0":"Inner and Outer Product :\n\nhttps:\/\/www.youtube.com\/watch?v=FCmH4MqbFGs&t=2s\n\nhttps:\/\/www.youtube.com\/watch?v=FCmH4MqbFGs\n","bec19fdf":"# Common items between two Arrays","a506f795":"# Tensor Subtraction","3632a129":"# Column-Wise Addition"}}