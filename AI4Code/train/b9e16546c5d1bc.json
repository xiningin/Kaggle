{"cell_type":{"82c7d079":"code","9ea8948a":"code","8b2d62e6":"code","0656fe38":"code","842c1225":"code","8df00539":"code","50578124":"code","9305b324":"code","b649b8d4":"code","1c46aa12":"code","09318843":"code","af96bfb4":"code","0e30940a":"code","5549cca0":"code","f2a20a58":"code","66845785":"code","8a794fb3":"code","546d8f5f":"code","bd0143fd":"code","f0f86d78":"code","8e7e3bc0":"code","8c5a40d9":"code","b41fbfe9":"code","cc90fdb7":"code","11fd0665":"code","3a15598c":"code","064fe4ad":"code","fa5ba49e":"code","ba02ef44":"code","f11d6bbb":"code","ebbe6671":"code","61ff1861":"code","c4d80a89":"code","318f0534":"code","53d0dde0":"code","70621fac":"code","7d428f54":"code","b615ffa4":"code","f17f52e5":"code","5d46d46f":"code","a13957ba":"code","652e0394":"code","b68131e8":"code","7ee7c337":"code","8cc53908":"code","f1cfce34":"code","b09d3568":"code","1550bec9":"code","33bdfab6":"code","4c3f324e":"code","61e0d183":"code","f47d0ffb":"code","892b7384":"code","b5910be6":"code","9a687519":"code","12c28133":"code","50fb6396":"code","bea6ef16":"code","1fc61b6c":"code","3bf212c8":"code","db8d35d3":"code","3862af8d":"code","54bcc7c4":"code","be51356b":"code","04f4a4ff":"code","01cf451b":"code","6a66599a":"code","47002a80":"code","532dd126":"code","8703e4f5":"code","860fb1f0":"code","dc9aa85e":"code","c1c7ec64":"code","1cabbee9":"code","0ad45bec":"code","fd8149cd":"code","1bc4dc4a":"code","436b4e34":"code","ab6b0a82":"code","f5b3df52":"code","bd80cce5":"code","354a7aa4":"code","b9c1e24b":"code","401fa225":"code","c06d1e6d":"markdown","f545500c":"markdown","2f75cae4":"markdown","b6576f8d":"markdown","0a943061":"markdown","958b9359":"markdown","3fde5295":"markdown","e73a5c63":"markdown","75a5fe68":"markdown","33337c8f":"markdown","3037f129":"markdown","5213208d":"markdown","693d899d":"markdown","fdcbef6c":"markdown","2781e704":"markdown","91fdcfaf":"markdown","5a8ff699":"markdown","e357f6ff":"markdown","46fb7123":"markdown","256fe02e":"markdown","716fdd1f":"markdown","2e9770e5":"markdown","564228a4":"markdown","81c7d2bb":"markdown","ce7bcce1":"markdown","763c5242":"markdown","0e913698":"markdown","d33d9f43":"markdown","9b8c7b22":"markdown","fde93c3f":"markdown","8b1654bd":"markdown","76dd70d3":"markdown","e95c6c57":"markdown","5942ff99":"markdown","2c7e6be7":"markdown","92c8d35c":"markdown","0e1db946":"markdown","f98b669e":"markdown","3650e612":"markdown","cbf2a18a":"markdown","2b44050e":"markdown","b6c18837":"markdown","f8c6526d":"markdown","0cff6d9b":"markdown"},"source":{"82c7d079":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt \nimport seaborn as sns ","9ea8948a":"\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_df.head()","8b2d62e6":"train_df.info()","0656fe38":"\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df.head()","842c1225":"test_df.info()","8df00539":"#size of test data_set  418 there  are some null  data not found survived column","50578124":"\ntrain_df.nunique()","9305b324":"\nsurvived_df=train_df.Survived.value_counts(normalize=True)\nage_count=train_df.Age.value_counts()\nprint('survived and unsurvived',survived_df)\nprint('agecount',age_count)","b649b8d4":"survived_unsurvived_age=train_df.groupby('Survived')['Age'].describe()\nprint(survived_unsurvived_age)","1c46aa12":"train_df.describe()","09318843":"\nnull_data=train_df.isnull().sum()\nprint(null_data)","af96bfb4":"#count numbers of sibsp in titanic\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nnum_Sibsp=train_df['SibSp'].value_counts().sort_values(ascending=False)\ndata = [go.Bar(\n        x = num_Sibsp.index, \n        y = num_Sibsp.values, \n)]\n\nplotly.offline.iplot(data)","0e30940a":"\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nnum_Parch=train_df['Parch'].value_counts().sort_values(ascending=False)\ndata = [go.Bar(\n        x = num_Parch.index, \n        y = num_Parch.values, \n)]\n\nplotly.offline.iplot(data)","5549cca0":"avg=train_df['Age'].mean()\ndata = [go.Histogram(\n        x = train_df['Age']\n)]\n\n# Vertical dashed line to indicate the average age\nlayout = {'shapes': [{\n              'type' :'line',\n              'x0': avg,\n              'y0': 0,\n              'x1': avg,\n              'y1': 40,\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})","f2a20a58":"sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n\nax = sns.boxplot(x = 'Survived', y = 'Age', data =train_df)\nax.set_title('the relation between age and survived')\n","66845785":"sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n\nax = sns.boxplot(x = 'Sex', y = 'Age', data =train_df)\nax.set_title('the relation between sex and Age')","8a794fb3":"sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n\nax = sns.boxplot(x = 'Pclass', y = 'Age', data =train_df)\nax.set_title('the relation between sex and pclass')","546d8f5f":"sns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n\nax = sns.boxplot(x = 'Pclass', y = 'Fare', data =test_df)\nax.set_title('the relation between sex and pclass')","bd0143fd":"#the relation between(pclass,age) using sex\nax = sns.barplot(x = 'Pclass', y = 'Age', data =train_df,hue='Sex')\nax.set_title('the relation between pclass and Age')","f0f86d78":"\nax = sns.barplot(x = 'Embarked', y = 'Age', data =train_df,hue='Sex')\nax.set_title('the relation between Embarked and Age')","8e7e3bc0":"\nax = sns.barplot(x = 'Survived', y = 'Age', data =train_df,hue='Sex')\nax.set_title('the relation between survived and Age')","8c5a40d9":"\nax = sns.barplot(x = 'SibSp', y = 'Age', data =train_df,hue='Survived')\nax.set_title('the relation between SipSip and age')","b41fbfe9":"\nax = sns.barplot(x = 'Parch', y = 'Age', data =train_df,hue='Survived')\nax.set_title('the relation between parch and age')","cc90fdb7":"plt.figure(figsize = (10, 6))\nsns.heatmap(train_df.corr(), annot=True)\nplt.title('Corelation Matrix')","11fd0665":"cabin=train_df.Cabin.value_counts()\ncabin","3a15598c":"#drop cabin\ntrain_df.drop(train_df.columns[10],axis=1,inplace=True)\n","064fe4ad":"train_df.head()","fa5ba49e":"test_df.drop(test_df.columns[9],axis=1,inplace=True)","ba02ef44":"test_df.head()","f11d6bbb":"male=train_df.Sex.replace({'male':0,'female':1},inplace=True)\n","ebbe6671":"train_df.head()","61ff1861":"test_df.Sex.replace({'male':0,'female':1},inplace=True)\n\ntest_df.head()","c4d80a89":"train_df.Embarked.value_counts()","318f0534":"gender=test_df.Sex.value_counts()\nprint(gender)","53d0dde0":"#add colum called family number to count all familly number\ntrain_df['familynum']=train_df['SibSp']+train_df['Parch']+1\ntrain_df.head()","70621fac":"test_df['familynum']=test_df['SibSp']+test_df['Parch']+1\ntest_df.head()","7d428f54":"\ntrain_df.Fare.dropna()\ntrain_df.Embarked.dropna()\ntrain_df.info()","b615ffa4":"\ntest_df.Fare.dropna()\ntest_df.Embarked.dropna()\ntest_df.info()","f17f52e5":"\ndef clean_train_data(columns):\n    Age = columns[0]\n    Pclass = columns[1]\n    \n    if pd.isnull(Age):\n        if Pclass ==1 :\n            return 38\n        elif  Pclass == 2 :\n            return 29\n        else : \n            return 24\n    else : \n        return Age\n  ","5d46d46f":"def clean_test_data(columns) :\n    Age = columns[0]\n    Pclass = columns[1]\n    \n    if pd.isnull(Age):\n        if Pclass ==1 :\n            return 44\n        elif  Pclass == 2 :\n            return 27\n        else : \n            return 23\n    else : \n        return Age","a13957ba":"train_df.Age=train_df[['Age','Pclass']].apply(clean_train_data,axis=1) \ntest_df.Age=test_df[['Age','Pclass']].apply(clean_test_data,axis=1) ","652e0394":"train_df.info()","b68131e8":"train_df.Age.value_counts()","7ee7c337":"test_df.info()","8cc53908":"test_df.Fare.fillna(test_df.Fare.mean(),inplace=True)","f1cfce34":"test_df.info()","b09d3568":"test_df.info()","1550bec9":"features = [\"Pclass\",\"Sex\", \"SibSp\", \"Parch\",'Age']\nX = pd.get_dummies(train_df[features])\n\nX_testm = pd.get_dummies(test_df[features])\nX.head(10)","33bdfab6":"X.info()","4c3f324e":"X=X\ny=train_df.Survived","61e0d183":"\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\n","f47d0ffb":"from sklearn.preprocessing import StandardScaler \n\nX_train=StandardScaler().fit_transform(X_train)\nX_test=StandardScaler().fit_transform(X_test)","892b7384":"from sklearn.svm import SVC\nsvcmodel=SVC(kernel='poly',random_state=0)\nsvcmodel.fit(X_train,y_train)\nprint('train score ;',svcmodel.score(X_train,y_train))\nprint('test score ;',svcmodel.score(X_test,y_test))","b5910be6":"y_pred=svcmodel.predict(X_test)\nprint('predicted value for model ;',y_pred)","9a687519":"\nfrom sklearn.metrics import accuracy_score, confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\ncm\n\n","12c28133":"sns.heatmap(cm,center=True)","50fb6396":"from sklearn.linear_model import  LogisticRegression","bea6ef16":"lgr=LogisticRegression(penalty='l2',solver='sag',C=1.0,random_state=33)\nlgr.fit(X_train,y_train)","1fc61b6c":"print(' logistic train score ;',lgr.score(X_train,y_train))\nprint(' logistic test score ;',lgr.score(X_test,y_test))\nprint(' logistic classes :',lgr.classes_)\nprint(' logistic iteration :', lgr.n_iter_)","3bf212c8":"#prediction\ny_pred1=lgr.predict(X_test)\ny_pred_proba=lgr.predict_proba(X_test)\nprint('predicted value for logistic ',y_pred1[:10])\nprint('predicted probability value  for logistic ',y_pred_proba[:10])\nprint('accuracy =',accuracy_score(y_test,y_pred1))\ncm=confusion_matrix(y_test,y_pred1)\nprint('confusion_matrix=',cm)","db8d35d3":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import median_absolute_error\nDTR=DecisionTreeRegressor(max_depth=15)\nDTR.fit(X_train,y_train)","3862af8d":"#score model\nprint('DecisionTreeRegressor train score ;',DTR.score(X_train,y_train))\nprint('DecisionTreeRegressor test score ;',DTR.score(X_test,y_test))","54bcc7c4":"#overfitting model","be51356b":"#prediction\ny_pred2=DTR.predict(X_test)\ny_pred2[:10]","04f4a4ff":"print(y_test[:10])\nprint(y_pred2[:10])","01cf451b":"from sklearn.ensemble import RandomForestClassifier\nRFC=RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nRFC.fit(X_train,y_train)","6a66599a":"#score model\nprint('Random Forest Classifier train score ;',RFC.score(X_train,y_train))\nprint('Random Forest Classifier test score ;',RFC.score(X_test,y_test))","47002a80":"#prediction\ny_pred3=RFC.predict(X_test)\ny_pred3[:10]","532dd126":"from sklearn.ensemble import GradientBoostingClassifier\nGBC=GradientBoostingClassifier(n_estimators=100, max_depth=3, random_state=2)\nGBC.fit(X_train,y_train)","8703e4f5":"#score model\nprint('Gradient Boosting Classifier train score ;',GBC.score(X_train,y_train))\nprint('Gradient Boosting Classifier test score ;',GBC.score(X_test,y_test))","860fb1f0":"#prediction\ny_pred4=GBC.predict(X_test)\ny_pred_proba4=GBC.predict_proba(X_test)\nprint(y_pred4[:10])\nprint(y_pred_proba4[:10])","dc9aa85e":"#confusion_matrix\ncm=confusion_matrix(y_test,y_pred4)\nprint('confusion_matrix=',cm)","c1c7ec64":"from sklearn.neighbors import KNeighborsClassifier\nKNN=KNeighborsClassifier(n_neighbors=5,weights='uniform',algorithm='auto')\nKNN.fit(X_train,y_train)","1cabbee9":"#score model\nprint('KNeighbors Classifier train score ;',KNN.score(X_train,y_train))\nprint('KNeighbors Classifier test score ;',KNN.score(X_test,y_test))","0ad45bec":"#prediction\ny_pred5=KNN.predict(X_test)\nprint(y_pred5[:10])","fd8149cd":"!pip install  xgboost==1.4.1","1bc4dc4a":"from  xgboost import XGBClassifier\nxgb = XGBClassifier(gamma=0.99, max_depth= 5,n_estimators= 8,random_state=30)\nxgb.fit(X_train,y_train)\nprint('train score :',xgb.score(X_train,y_train))\nprint('test score :',xgb.score(X_test,y_test))","436b4e34":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nmodel1=svcmodel\nmodel2=lgr\nmodel3=DTR\nmodel4=RFC\nmodel5=GBC\nmodel6=KNN\nmodel7=xgb\nmodels=[model1,model2,model3,model4,model5,model6,model7]\nkfold = KFold(n_splits=10, random_state=2020, shuffle=True)\nmean=[]\nstandrad=[]\naccuracy=[]\nclassifiers=['svcmodel','lgr','DTR','RFC','GBC','KNN','xgb']\nfor model in models:\n    cv_result = cross_val_score(model,X,y,cv= kfold)\n    cv_result=cv_result\n    mean.append(cv_result.mean())\n    standrad.append(cv_result.std())\n    accuracy.append(cv_result)\nnew_models_dataframe2=pd.DataFrame({'Mean':mean,'Std':standrad},index=classifiers)       \nnew_models_dataframe2","ab6b0a82":"accuracy1=[]\naccuracy2=[]\nfor model in models:\n    m1=model.score(X_test,y_test)\n    m2=model.score(X_train,y_train)\n    accuracy1.append(m1)\n    accuracy2.append(m2)\nnew_models_dataframe2=pd.DataFrame({'train_score':accuracy2,'test_score':accuracy1},index=classifiers)       \nnew_models_dataframe2","f5b3df52":"# Random Forest  Classifier is best model because best mean and min std","bd80cce5":"y_pred_model=RFC.fit(X,y).predict(X_testm)","354a7aa4":"final_model = {'PassengerId': test_df.PassengerId, 'Survived':y_pred_model}\nsubmission = pd.DataFrame(data=final_model)\nsubmission.to_csv('submission_model7.csv',index =False)","b9c1e24b":"pd.set_option('display.max_rows', None)","401fa225":"sm=pd.read_csv('submission_model7.csv')\nsm","c06d1e6d":"# in this note book i made four steps :\n1_ import libraries and read data , explain it.\n2_data visulization.\n3_data engineering and cleaning data.\n4_models and evoluation","f545500c":"# KNeighborsClassifier","2f75cae4":"# the relation between sex and pclass","b6576f8d":"# Cross validiation","0a943061":"# the relation between(Survived and Age) using sex","958b9359":"# the relation between(pclass,age) using sex","3fde5295":"# the relation between(Embarked and Age) using sex","e73a5c63":"# split data ","75a5fe68":"# Corelation Matrix","33337c8f":"# number of survived and age","3037f129":"# the relation between sex and pclass","5213208d":"# drop cabin column there are many missing data ","693d899d":"# Feature Engineering Data an cleaning Data","fdcbef6c":"# Read train Data","2781e704":"# Gradient Boosting Classifier","91fdcfaf":"# read test file","5a8ff699":"# the relation between(Sibsp,age) using sex","e357f6ff":"# Decision Tree","46fb7123":"# replace gender to numerical","256fe02e":"# import libraries","716fdd1f":"# support Vector","2e9770e5":"# the relation between(parch,parch) using sex","564228a4":"# find null data","81c7d2bb":"# the relation between sex and Age","ce7bcce1":"# average of age and counts of age","763c5242":"# the relation between age and survived","0e913698":"# Data visulization","d33d9f43":"# fill missing data in Fare","9b8c7b22":"# Scalar Data","fde93c3f":"#size of train data_set  891 there  are some null  data","8b1654bd":"# Random Forest Classifier","76dd70d3":"# XGBClassifier","e95c6c57":"# fill missing data in age beacuase there are more missing data","5942ff99":"# unique valuesin train data","2c7e6be7":"#there are many null data in age and cabin column\n","92c8d35c":"# logistic regression","0e1db946":"# Model and evaluation","f98b669e":"#62% is un survived\n#38% is survived\n#between 20 to 30 is the most age","3650e612":"# Final model","cbf2a18a":"# drop missing value in fare and Embarked column","2b44050e":"# make the confusion matrix","b6c18837":"# test data drop missing data fare embarked","f8c6526d":"# convert our categorical columns to dummies","0cff6d9b":"# count numbers of parch in titanic"}}