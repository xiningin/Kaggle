{"cell_type":{"1fc3b285":"code","76e32fd7":"code","25ddd7a8":"code","1d896e48":"code","9f93691e":"code","c44b9455":"code","94a3c5b3":"code","e5872188":"code","2f2ff82b":"code","d6b1b929":"code","ea6f087e":"code","b3bdcce6":"code","3469e1e0":"code","bfa35a5b":"code","13c7a2a2":"code","90d8ce6b":"code","20669331":"code","974e07cc":"code","07e69088":"code","fcd23f32":"code","59e414ef":"code","a4ce46e0":"code","1e64e5b2":"code","3bf35fca":"code","0dfe83b4":"code","7fda5363":"code","490fcdf0":"code","d5612e25":"code","184f8277":"code","928febcd":"code","9c4f5bc3":"code","d6512474":"code","3854db81":"code","cfe3996e":"code","dea94e2f":"code","5d49b2ee":"code","a4754e69":"code","68ea7529":"code","793dc631":"code","4021c16d":"code","5bbc714e":"code","c88700d8":"code","6dc9c865":"code","f2199405":"code","fad6efd0":"code","6e5deec9":"code","156cda3c":"code","c152a17f":"code","3e363899":"code","23eccccb":"code","fa84f5b9":"code","22f6e0b1":"code","939bfb8e":"code","c2a79ffc":"code","b22cad38":"markdown","eb73005d":"markdown","bc007c83":"markdown","e50e32e4":"markdown","55449928":"markdown","903cef81":"markdown","50b02259":"markdown","6da417bd":"markdown","00071d3e":"markdown","c3920450":"markdown","52313422":"markdown","924c9848":"markdown","caa8b631":"markdown","98f4c987":"markdown","be7dbc97":"markdown","5c74a0f2":"markdown","acaef5ff":"markdown","edf0a2fd":"markdown","b408c8b1":"markdown","af1a724f":"markdown","c1d31dbf":"markdown","1e35433e":"markdown","e0a936ed":"markdown","91b90fcd":"markdown","fe207abd":"markdown","625c7eae":"markdown","142e9851":"markdown","f3d131bf":"markdown","3d292b85":"markdown","7d729add":"markdown","5f6fae7c":"markdown","0bdf696d":"markdown","0f88937d":"markdown","8af6a32f":"markdown"},"source":{"1fc3b285":"#data analysis libraries \nimport numpy as np\nimport pandas as pd\nimport random\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","76e32fd7":"data_train=pd.read_csv(\"..\/input\/train.csv\") # train data\ndata_test=pd.read_csv(\"..\/input\/test.csv\") # test data\n\nprint(\"Train info:\\n\")\ndata_train.info()\nprint(\"-\"*40)\nprint(\"Test info:\\n\")\ndata_test.info()\ndata_train.head()","25ddd7a8":"print('Train columns with null values:\\n',data_train.isnull().sum()) # sum. of null values\nprint(\"-\"*40)\nprint('Test columns with null values:\\n',data_test.isnull().sum())\ndata_train.describe(include = 'all')","1d896e48":"print(data_train['Survived'].value_counts())\n\nsns.set()\nf,ax=plt.subplots(1,2,figsize=(12,5))\ndata_train['Survived'].value_counts().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,ax=ax[1])\nax[1].set_title('Rate of the Survived',color = 'r',fontsize=15)\n\nplt.show()","9f93691e":"print(data_train.groupby(['Pclass','Survived'])['Survived'].count())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train.groupby(['Pclass','Survived'])['Survived'].count().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived vs Dead by Pclass',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,hue='Pclass',ax=ax[1])\nax[1].set_title('Survived vs Dead by Pclass',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Pclass'])['Survived'].mean().index,y=data_train.groupby(['Pclass'])['Survived'].mean().values,ax=ax[2])\nax[2].set_title('Rate of the Survived by Pclass',color = 'r',fontsize=15)\n\nplt.show()","c44b9455":"print(data_train.groupby(['Sex','Survived'])['Survived'].count())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train.groupby(['Sex','Survived'])['Survived'].count().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived vs Dead by Sex',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,hue='Sex',ax=ax[1])\nax[1].set_title('Survived vs Dead by Sex',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Sex'])['Survived'].mean().index,y=data_train.groupby(['Sex'])['Survived'].mean().values,ax=ax[2])\nax[2].set_title('Rate of the Survived by Sex',color = 'r',fontsize=15)\n\nplt.show()","94a3c5b3":"print('Age of the oldest passanger:',data_train['Age'].max(),'years old')\nprint('Age of the youngest passanger:',data_train['Age'].min(),'years old')\nprint('Average Age on the ship:',data_train['Age'].mean(),'years old')\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train[data_train['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='b')\nax[0].set_title('Dead',color = 'r',fontsize=15)\n\ndata_train[data_train['Survived']==1].Age.plot.hist(ax=ax[1],color='orange',bins=20,edgecolor='black')\nax[1].set_title('Survived',color = 'r',fontsize=15)\n\nsns.kdeplot(data_train[\"Age\"][(data_train[\"Survived\"] == 0) & (data_train[\"Age\"].notnull())], color=\"Red\", shade = True,ax=ax[2])\nsns.kdeplot(data_train[\"Age\"][(data_train[\"Survived\"] == 1) & (data_train[\"Age\"].notnull())], color=\"Blue\", shade= True,ax=ax[2])\nax[2].set_title('Rate of Survived vs Dead',color = 'r',fontsize=15)\nax[2].legend(['Dead','Survived'])\n\nplt.show()","e5872188":"print(data_train.groupby(['SibSp','Survived'])['Survived'].count())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train[data_train['Survived']==0].SibSp.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='b')\nax[0].set_title('Dead',color = 'r',fontsize=15)\n\ndata_train[data_train['Survived']==1].SibSp.plot.hist(ax=ax[1],color='orange',bins=20,edgecolor='black')\nax[1].set_title('Survived',color = 'r',fontsize=15)\n\nsns.factorplot('SibSp','Survived',data=data_train,ax=ax[2])\nax[2].set_title('Rate of the Survived',color = 'r',fontsize=15)\nplt.close(2)\n\nplt.show()","2f2ff82b":"print(data_train.groupby(['Parch','Survived'])['Survived'].count())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train[data_train['Survived']==0].Parch.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='b')\nax[0].set_title('Dead',color = 'r',fontsize=15)\n\ndata_train[data_train['Survived']==1].Parch.plot.hist(ax=ax[1],color='orange',bins=20,edgecolor='black')\nax[1].set_title('Survived',color = 'r',fontsize=15)\n\nsns.factorplot('Parch','Survived',data=data_train,ax=ax[2])\nax[2].set_title('Rate of the Survived',color = 'r',fontsize=15)\nplt.close(2)\n\nplt.show()","d6b1b929":"data_train['Ticket'].describe()","ea6f087e":"print('The highest fare was:',data_train['Fare'].max())\nprint('The lowest fare was:',data_train['Fare'].min())\nprint('The avarage was:',data_train['Fare'].mean())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train[data_train['Survived']==0].Fare.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='b')\nax[0].set_title('Dead',color = 'r',fontsize=15)\n\ndata_train[data_train['Survived']==1].Fare.plot.hist(ax=ax[1],color='orange',bins=20,edgecolor='black')\nax[1].set_title('Survived',color = 'r',fontsize=15)\n\nsns.kdeplot(data_train[\"Fare\"][(data_train[\"Survived\"] == 0) & (data_train[\"Age\"].notnull())], color=\"Red\", shade = True,ax=ax[2])\nsns.kdeplot(data_train[\"Fare\"][(data_train[\"Survived\"] == 1) & (data_train[\"Age\"].notnull())], color=\"Blue\", shade= True,ax=ax[2])\nax[2].set_title('Rate of the Survived',color = 'r',fontsize=15)\nax[2].legend(['Dead','Survived'])\n\nplt.show()","b3bdcce6":"data_train['Cabin'].describe()","3469e1e0":"print(data_train.groupby(['Embarked','Survived'])['Survived'].count())\n\nf,ax=plt.subplots(1,3,figsize=(20,5))\n\ndata_train.groupby(['Embarked','Survived'])['Survived'].count().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived vs Dead by Embarked',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,hue='Embarked',ax=ax[1])\nax[1].set_title('Survived vs Dead by Embarked',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Embarked'])['Survived'].mean().index,y=data_train.groupby(['Embarked'])['Survived'].mean().values,ax=ax[2])\nax[2].set_title('Rate of the Survived by Embarked',color = 'r',fontsize=15)\n\nplt.show()","bfa35a5b":"Title_train=[i.split(\",\")[1].split(\".\")[0].strip() for i in data_train[\"Name\"]] # split names from , to .\ndata_train[\"Title\"] = pd.Series(Title_train)\n\nTitle_test=[i.split(\",\")[1].split(\".\")[0].strip() for i in data_test[\"Name\"]]\ndata_test[\"Title\"] = pd.Series(Title_test)\n\nTitle=pd.concat([data_train[['Title','Sex']],data_test[['Title','Sex']]],axis=0) \n\nprint(Title.groupby(['Title','Sex'])['Title'].count())\n\nplt.figure(figsize=(15,5))\n\nsns.barplot(x=Title[\"Title\"].value_counts().index,y=Title[\"Title\"].value_counts().values)\nplt.xticks(rotation=45)\nplt.title('Titles',color = 'r',fontsize=15)\n\nplt.show()","13c7a2a2":"data_train['Title'].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n                            'Rare',inplace=True)\ndata_train['Title'].replace(['Mlle','Mme','Ms'], 'Miss',inplace=True)\n\ndata_test['Title'].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n                           'Rare',inplace=True)\ndata_test['Title'].replace(['Mlle','Mme','Ms'], 'Miss',inplace=True)\n\ndata_train.head()","90d8ce6b":"Age=pd.concat([data_train[['Title','Age']],data_test[['Title','Age']]],axis=0)\n\nprint(Age.groupby('Title')['Age'].mean())\n\ndata_train.loc[(data_train['Age'].isnull())&(data_train['Title']=='Master'),'Age'] = Age[Age['Title']=='Master'].Age.mean()\ndata_train.loc[(data_train['Age'].isnull())&(data_train['Title']=='Miss'),'Age'] = Age[Age['Title']=='Miss'].Age.mean()\ndata_train.loc[(data_train['Age'].isnull())&(data_train['Title']=='Mr'),'Age'] = Age[Age['Title']=='Mr'].Age.mean()\ndata_train.loc[(data_train['Age'].isnull())&(data_train['Title']=='Mrs'),'Age'] = Age[Age['Title']=='Mrs'].Age.mean()\ndata_train.loc[(data_train['Age'].isnull())&(data_train['Title']=='Rare'),'Age'] = Age[Age['Title']=='Rare'].Age.mean()\n\ndata_test.loc[(data_test['Age'].isnull())&(data_test['Title']=='Master'),'Age'] = Age[Age['Title']=='Master'].Age.mean()\ndata_test.loc[(data_test['Age'].isnull())&(data_test['Title']=='Miss'),'Age'] = Age[Age['Title']=='Miss'].Age.mean()\ndata_test.loc[(data_test['Age'].isnull())&(data_test['Title']=='Mr'),'Age'] = Age[Age['Title']=='Mr'].Age.mean()\ndata_test.loc[(data_test['Age'].isnull())&(data_test['Title']=='Mrs'),'Age'] = Age[Age['Title']=='Mrs'].Age.mean()\ndata_test.loc[(data_test['Age'].isnull())&(data_test['Title']=='Rare'),'Age'] = Age[Age['Title']=='Rare'].Age.mean()","20669331":"f,ax=plt.subplots(1,3,figsize=(23,6))\n\ndata_train.groupby(['Title','Survived'])['Survived'].count().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived vs Dead by Title',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,hue='Title',ax=ax[1])\nax[1].set_title('Survived vs Dead by Title',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Title'])['Survived'].mean().index,y=data_train.groupby(['Title'])['Survived'].mean().values,ax=ax[2])\nax[2].set_title('Rate of the Survived by Title',color = 'r',fontsize=15)\n\nplt.show()","974e07cc":"data_test[data_test['Fare'].isnull()]","07e69088":"Fare=pd.concat([data_train[['Fare','Pclass','Embarked','Parch','Sex','SibSp','Title']],\n                data_test[['Fare','Pclass','Embarked','Parch','Sex','SibSp','Title']]],axis=0)\n\ndata_test['Fare'].fillna(Fare[(Fare[\"Pclass\"]==3) & (Fare[\"Embarked\"]=='S') & (Fare[\"SibSp\"]==0) & \n           (Fare[\"Parch\"]==0) & (Fare[\"Sex\"]=='male') & (Fare[\"Title\"]=='Mr')].Fare.median(),inplace=True)\n\ndata_test.iloc[152]","fcd23f32":"data_train['Cabin'] = data_train['Cabin'].str[0] # add initial value to same location\n\ndata_test['Cabin'] = data_test['Cabin'].str[0]\n\nCabin=pd.concat([data_train[['Cabin','Embarked','Pclass','Fare']],data_test[['Cabin','Embarked','Pclass','Fare']]],axis=0)\n\nCabin.groupby(['Pclass','Embarked','Cabin'])['Fare'].max()","59e414ef":"data_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='C')&(data_train.Fare<=56.9292),'Cabin']='A'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='C')&(data_train.Fare>56.9292)&(data_train.Fare<=113.2750),'Cabin']='D'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='C')&(data_train.Fare>113.2750)&(data_train.Fare<=134.5000),'Cabin']='E'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='C')&(data_train.Fare>134.5000)&(data_train.Fare<=227.5250),'Cabin']='C'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='C')&(data_train.Fare>227.5250),'Cabin']='B'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare<=35.5000),'Cabin']='T'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare>35.5000)&(data_train.Fare<=77.9583),'Cabin']='D'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare>77.9583)&(data_train.Fare<=79.6500),'Cabin']='E'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare>79.6500)&(data_train.Fare<=81.8583),'Cabin']='A'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare>81.8583)&(data_train.Fare<=211.3375),'Cabin']='B'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&\n               (data_train.Embarked=='S')&(data_train.Fare>211.3375),'Cabin']='C'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==1)&(data_train.Embarked=='Q'),'Cabin']='C'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==2)&\n               (data_train.Embarked=='S')&(data_train.Fare<=13.0000),'Cabin']=random.sample(['D','E'],1)\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==2)&\n               (data_train.Embarked=='S')&(data_train.Fare>13.0000),'Cabin']='F'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==2)&(data_train.Embarked=='C'),'Cabin']='D'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==2)&(data_train.Embarked=='Q'),'Cabin']='E'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==3)&\n               (data_train.Embarked=='S')&(data_train.Fare<=7.6500),'Cabin']='F'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==3)&\n               (data_train.Embarked=='S')&(data_train.Fare>7.6500)&(data_train.Fare<=12.4750),'Cabin']='E'\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==3)&\n               (data_train.Embarked=='S')&(data_train.Fare>12.4750),'Cabin']='G'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==3)&(data_train.Embarked=='C'),'Cabin']='F'\n\ndata_train.loc[(data_train.Cabin.isnull())&(data_train.Pclass==3)&(data_train.Embarked=='Q'),'Cabin']='F'\n\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='C')&(data_test.Fare<=56.9292),'Cabin']='A'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='C')&(data_test.Fare>56.9292)&(data_test.Fare<=113.2750),'Cabin']='D'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='C')&(data_test.Fare>113.2750)&(data_test.Fare<=134.5000),'Cabin']='E'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='C')&(data_test.Fare>134.5000)&(data_test.Fare<=227.5250),'Cabin']='C'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='C')&(data_test.Fare>227.5250),'Cabin']='B'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare<=35.5000),'Cabin']='T'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare>35.5000)&(data_test.Fare<=77.9583),'Cabin']='D'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare>77.9583)&(data_test.Fare<=79.6500),'Cabin']='E'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare>79.6500)&(data_test.Fare<=81.8583),'Cabin']='A'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare>81.8583)&(data_test.Fare<=211.3375),'Cabin']='B'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&\n               (data_test.Embarked=='S')&(data_test.Fare>211.3375),'Cabin']='C'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==1)&(data_test.Embarked=='Q'),'Cabin']='C'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==2)&\n               (data_test.Embarked=='S')&(data_test.Fare<=13.0000),'Cabin']=random.sample(['D','E'],1)\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==2)&\n               (data_test.Embarked=='S')&(data_test.Fare>13.0000),'Cabin']='F'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==2)&(data_test.Embarked=='C'),'Cabin']='D'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==2)&(data_test.Embarked=='Q'),'Cabin']='E'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==3)&\n               (data_test.Embarked=='S')&(data_test.Fare<=7.6500),'Cabin']='F'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==3)&\n               (data_test.Embarked=='S')&(data_test.Fare>7.6500)&(data_test.Fare<=12.4750),'Cabin']='E'\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==3)&\n               (data_test.Embarked=='S')&(data_test.Fare>12.4750),'Cabin']='G'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==3)&(data_test.Embarked=='C'),'Cabin']='F'\n\ndata_test.loc[(data_test.Cabin.isnull())&(data_test.Pclass==3)&(data_test.Embarked=='Q'),'Cabin']='F'\n\nprint(data_test.Cabin.isnull().any(),'\\n')\n\nprint(data_train.Cabin.isnull().any())","a4ce46e0":"f,ax=plt.subplots(1,3,figsize=(23,6))\n\ndata_train.groupby(['Cabin','Survived'])['Survived'].count().plot.pie(autopct='%1.1f%%',ax=ax[0])\nax[0].set_title('Survived vs Dead by Cabin',color = 'r',fontsize=15)\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=data_train,hue='Cabin',ax=ax[1])\nax[1].set_title('Survived vs Dead by Cabin',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Cabin'])['Survived'].mean().index,\n            y=data_train.groupby(['Cabin'])['Survived'].mean().values,ax=ax[2])\nax[2].set_title('Rate of the Survived by Cabin',color = 'r',fontsize=15)\n\nplt.show()","1e64e5b2":"Cabin=pd.concat([data_train[['Cabin','Embarked','Pclass','Fare']],data_test[['Cabin','Embarked','Pclass','Fare']]],axis=0)\n\ndata_train[data_train['Embarked'].isnull()]","3bf35fca":"f,ax=plt.subplots(1,2,figsize=(12,5))\n\nsns.countplot('Survived',\n              data=data_train.loc[(data_train.Pclass==1)&(data_train.Cabin=='B')&(data_train.Embarked.notnull())&(data_train.Sex=='female')],\n              hue='Embarked',\n              ax=ax[0])\nax[0].set_title('Survived',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.loc[(data_train.Embarked=='C')|(data_train.Embarked=='S')].groupby(['Embarked'])['Survived'].mean().index,\n            y=data_train.loc[(data_train.Embarked=='C')|(data_train.Embarked=='S')].groupby(['Embarked'])['Survived'].mean().values,\n            ax=ax[1])\nax[1].set_title('Rate of the Survived by Embarked',color = 'r',fontsize=15)\n\nplt.show()","0dfe83b4":"data_train['Embarked'].fillna('C',inplace=True)\n\ndata_train.iloc[[61,829]]","7fda5363":"print('Train columns with null values:\\n',data_train.isnull().sum())\nprint(\"-\"*40)\nprint('Test columns with null values:\\n',data_test.isnull().sum())","490fcdf0":"data_train['Sex'].replace(['male','female'],[0,1],inplace=True)\ndata_train['Embarked'].replace(['C','Q','S'],[0,1,2],inplace=True)\ndata_train['Title'].replace(['Master','Miss','Mr','Mrs','Rare'],[0,1,2,3,4],inplace=True)\ndata_train['Cabin'].replace(['A','B','C','D','E','F','G','T'],[0,1,2,3,4,5,6,7],inplace=True)\n\ndata_train.loc[data_train['Age']<=16,'Age']=0\ndata_train.loc[(data_train['Age']>16)&(data_train['Age']<=32),'Age']=1\ndata_train.loc[(data_train['Age']>32)&(data_train['Age']<=48),'Age']=2\ndata_train.loc[(data_train['Age']>48)&(data_train['Age']<=64),'Age']=3\ndata_train.loc[data_train['Age']>64,'Age']=4\n\ndata_test['Sex'].replace(['male','female'],[0,1],inplace=True)\ndata_test['Embarked'].replace(['C','Q','S'],[0,1,2],inplace=True)\ndata_test['Title'].replace(['Master','Miss','Mr','Mrs','Rare'],[0,1,2,3,4],inplace=True)\ndata_test['Cabin'].replace(['A','B','C','D','E','F','G','T'],[0,1,2,3,4,5,6,7],inplace=True)\n\ndata_test.loc[data_test['Age']<=16,'Age']=0\ndata_test.loc[(data_test['Age']>16)&(data_test['Age']<=32),'Age']=1\ndata_test.loc[(data_test['Age']>32)&(data_test['Age']<=48),'Age']=2\ndata_test.loc[(data_test['Age']>48)&(data_test['Age']<=64),'Age']=3\ndata_test.loc[data_test['Age']>64,'Age']=4","d5612e25":"data_train['Family_Size']=0\ndata_train['Family_Size']=data_train['Parch']+data_train['SibSp']\n\ndata_test['Family_Size']=0\ndata_test['Family_Size']=data_test['Parch']+data_test['SibSp']","184f8277":"sns.factorplot('Family_Size','Survived',data=data_train)\nplt.title('Family_Size',color = 'r',fontsize=15)\n\nplt.show()","928febcd":"data_train.loc[(data_train['Family_Size']>0)&(data_train['Family_Size']<4),'Family_Size']=1\ndata_train.loc[(data_train['Family_Size']>=4),'Family_Size']=2\n\ndata_test.loc[(data_test['Family_Size']>0)&(data_test['Family_Size']<4),'Family_Size']=1\ndata_test.loc[(data_test['Family_Size']>=4),'Family_Size']=2\n\nf,ax=plt.subplots(1,2,figsize=(12,5))\n\nsns.countplot('Family_Size',data=data_train,hue='Survived',ax=ax[0])\nax[0].set_title('Survived',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Family_Size'])['Survived'].mean().index,\n            y=data_train.groupby(['Family_Size'])['Survived'].mean().values,\n            ax=ax[1])\nax[1].set_title('Rate of the Survived by Family_Size',color = 'r',fontsize=15)\n\nplt.show()","9c4f5bc3":"Fare.groupby(['Pclass'])['Fare'].median()","d6512474":"data_train.loc[data_train['Fare']<=8.0500,'Fare']=0\ndata_train.loc[(data_train['Fare']>8.0500)&(data_train['Fare']<=15.0458),'Fare']=1\ndata_train.loc[(data_train['Fare']>15.0458)&(data_train['Fare']<=60.0000),'Fare']=2\ndata_train.loc[data_train['Fare']>60.0000,'Fare']=3\n\ndata_test.loc[data_test['Fare']<=8.0500,'Fare']=0\ndata_test.loc[(data_test['Fare']>8.0500)&(data_test['Fare']<=15.0458),'Fare']=1\ndata_test.loc[(data_test['Fare']>15.0458)&(data_test['Fare']<=60.0000),'Fare']=2\ndata_test.loc[data_test['Fare']>60.0000,'Fare']=3\n\nf,ax=plt.subplots(1,2,figsize=(12,5))\n\nsns.countplot('Fare',data=data_train,hue='Survived',ax=ax[0])\nax[0].set_title('Survived',color = 'r',fontsize=15)\n\nsns.barplot(x=data_train.groupby(['Fare'])['Survived'].mean().index,\n            y=data_train.groupby(['Fare'])['Survived'].mean().values,\n            ax=ax[1])\nax[1].set_title('Rate of the Survived by Fare',color = 'r',fontsize=15)\n\nplt.show()","3854db81":"data_train.drop(['Name','Ticket','PassengerId'],axis=1,inplace=True)\ndata_test.drop(['Name','Ticket','PassengerId'],axis=1,inplace=True)","cfe3996e":"f, ax = plt.subplots(figsize=(12, 12))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(data_train.corr(), cmap=cmap, vmax=.3, center=0,square=True,annot=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","dea94e2f":"sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsns.pairplot(data_train,diag_kind=\"kde\",hue=\"Survived\")\nplt.show()","5d49b2ee":"y=data_train['Survived']\n\nx=data_train.drop(['Survived'],axis=1)","a4754e69":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=1)\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","68ea7529":"from sklearn import metrics #accuracy measure\nfrom sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nfrom sklearn.model_selection import GridSearchCV # # Grid Search Cross Validation\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\nfrom sklearn.metrics import roc_curve # ROC Curve with logistic regression","793dc631":"kfold = KFold(n_splits=10, random_state=22) # k=10, split the data into 10 equal parts\nmean=[] # List for mean of CV scores\naccuracy=[] # List for CV score\nstd=[] # List for CV std\n\n# Main function for models\ndef model(algorithm,x_train_,y_train_,x_test_,y_test_): \n    algorithm.fit(x_train_,y_train_)\n    predicts=algorithm.predict(x_test_)\n    prediction=pd.DataFrame(predicts)\n    prob=algorithm.predict_proba(x_test_)[:,1]\n    cross_val=cross_val_score(algorithm,x_train_,y_train_,cv=kfold)\n    \n    # Appending results to Lists \n    mean.append(cross_val.mean())\n    std.append(cross_val.std())\n    accuracy.append(cross_val)\n    \n    # Printing results  \n    print(('{}'.format(algorithm)).split(\"(\")[0].strip(),'\\n') \n    print(\"CV std :\",cross_val.std(),\"\\n\")\n    print(\"CV scores:\",cross_val,\"\\n\")\n    print(\"CV mean:\",cross_val.mean())\n    \n    # Plot for conf. matrix and roc curve\n    fpr, tpr, thresholds = roc_curve(y_test_, prob)\n    \n    f,ax=plt.subplots(1,2,figsize=(11,4))\n    \n    # Plot ROC curve\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.plot(fpr, tpr)\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC')\n    # Plot for Confusion Matrix\n    y_pred = cross_val_predict(algorithm,x,y,cv=10)\n    sns.heatmap(confusion_matrix(y,y_pred),ax=ax[0],annot=True,fmt='2.0f')\n    ax[0].set_title(('Confusion Matrix for {}'.format(algorithm)).split(\"(\")[0].strip())\n    \n    plt.subplots_adjust(wspace=0.3)\n    plt.close(0)\n    plt.show()\n","4021c16d":"# K-Nearest Neighbours\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\ngrids = {'n_neighbors': np.arange(1,50)}\n\ngrid = GridSearchCV(estimator=KNeighborsClassifier(), param_grid=grids, cv=kfold) # Grid Search for best param.\ngrid.fit(x_train, y_train)\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(grid.best_params_),'\\n') \nprint(\"Best score: {}\".format(grid.best_score_))","5bbc714e":"knn = KNeighborsClassifier(n_neighbors = grid.best_estimator_.n_neighbors)\n\nmodel(knn,x_train,y_train,x_test,y_test)","c88700d8":"# Support Vector Machines\n\nfrom sklearn import svm \n\nCs = [0.001, 0.01, 0.1, 1, 10]\ngammas = [0.001, 0.01, 0.1, 1]\ngrids = {'C': Cs, 'gamma' : gammas}\n\ngrid = GridSearchCV(estimator=svm.SVC(kernel='linear'), param_grid=grids, cv=kfold) # Grid Search for best param.\ngrid.fit(x_train, y_train)\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(grid.best_params_),'\\n') \nprint(\"Best score: {}\".format(grid.best_score_))","6dc9c865":"svm = svm.SVC(kernel='linear',C=grid.best_estimator_.C,gamma=grid.best_estimator_.gamma,probability=True)\n\nmodel(svm,x_train,y_train,x_test,y_test)","f2199405":"# Naive Bayes\n\nfrom sklearn.naive_bayes import GaussianNB \nnb = GaussianNB()\nmodel(nb,x_train,y_train,x_test,y_test)","fad6efd0":"# Decision Tree\n\nfrom sklearn.tree import DecisionTreeClassifier \n\ngrids={'min_samples_split' : range(10,500,20),'max_depth': range(1,20,2)}\n\ngrid = GridSearchCV(estimator=DecisionTreeClassifier(), param_grid=grids, cv=kfold) # Grid Search for best param.\ngrid.fit(x_train, y_train)\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(grid.best_params_),'\\n') \nprint(\"Best score: {}\".format(grid.best_score_))","6e5deec9":"dtc = DecisionTreeClassifier(min_samples_split=grid.best_estimator_.min_samples_split, max_depth=grid.best_estimator_.max_depth)\n\nmodel(dtc,x_train,y_train,x_test,y_test)","156cda3c":"# Random Forest\n\nfrom sklearn.ensemble import RandomForestClassifier \n\ngrids={'n_estimators':range(100,500,100)}\n\ngrid = GridSearchCV(estimator=RandomForestClassifier(), param_grid=grids, cv=kfold) # Grid Search for best param.\ngrid.fit(x_train, y_train)\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(grid.best_params_),'\\n') \nprint(\"Best score: {}\".format(grid.best_score_))","c152a17f":"rf = RandomForestClassifier(n_estimators=grid.best_estimator_.n_estimators)\n\nmodel(rf,x_train,y_train,x_test,y_test)","3e363899":"# Logistic Regression\n\nfrom sklearn.linear_model import LogisticRegression \n\ngrids = {'C': np.logspace(-3, 3, 7), 'penalty': ['l1', 'l2']}\n\ngrid = GridSearchCV(estimator=LogisticRegression(), param_grid=grids, cv=kfold) # l1 lasso l2 ridge\ngrid.fit(x_train, y_train)\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(grid.best_params_),'\\n') \nprint(\"Best score: {}\".format(grid.best_score_))","23eccccb":"lr = LogisticRegression(C=grid.best_estimator_.C,penalty=grid.best_estimator_.penalty)\n\nmodel(lr,x_train,y_train,x_test,y_test)","fa84f5b9":"classifiers=['KNN','Svm','Naive Bayes','Decision Tree','Random Forest','Logistic Regression']\n\nmodels=pd.DataFrame({'CV mean':mean,'Std':std},index=classifiers)       \nprint(models)","22f6e0b1":"f, ax = plt.subplots(figsize=(16, 7))\n\nsns.boxplot(x=models.index, y=accuracy)\nplt.xticks(rotation=45)\nplt.title('Models',color = 'r',fontsize=15)\n\nplt.show()","939bfb8e":"coefficients=pd.DataFrame({'Features':data_test.columns,'Coefficients':dtc.feature_importances_})       \n\nplt.figure(figsize=(15,5))\nsns.barplot(x=coefficients['Features'],y=coefficients['Coefficients'])\nplt.xticks(rotation=45)\nplt.title('Titles',color = 'r',fontsize=15)\n\nplt.show()","c2a79ffc":"submission = pd.DataFrame({\"PassengerId\": pd.read_csv(\"..\/input\/test.csv\")[\"PassengerId\"],\"Survived\": dtc.predict(data_test)})\n\nsubmission.to_csv('titanic.csv', index=False)","b22cad38":"Datas consist different dtypes and some of the columns have NaN values.\n\n* **Numerical Features**: Age (Continuous), Fare (Continuous), SibSp (Discrete), Parch (Discrete)\n* **Categorical Features**: Survived, Sex, Embarked, Pclass\n* **Alphanumeric Features**: Ticket, Cabin","eb73005d":"**1. Introduction: (#1)**\n\n**2. Loading Data and Explanation of Features: (#2)**\n\n**3. Exploratory Data Analysis (EDA): (#3)**\n\n**4. Feature engineering: (#4)**\n\n**5. Modeling: (#5)**\n\n**6. Conclusion: (#6)**","bc007c83":"Thirdly its time for NaN Embarked values. ","e50e32e4":"The models which I am going to use:\n\n1) K-Nearest Neighbours\n\n2) Support Vector Machines\n\n3) Naive Bayes\n\n4) Decision Tree\n\n5) Random Forest\n\n6) Logistic Regression\n\nAlso Confusion matrix and Roc curve will be plotted for better understanding.","55449928":"These two passengers share most of the features so their Embarked can be predicted from passengers that share same features.","903cef81":"**Observations:**\n\n* Being higher the sosyoeconomic ranking, are more likely to survive.\n* Females are more likely to survive.\n* Children are way more  likely to survive.\n* Having more than 4 family members Decreases survival rate.\n* Passengers having expensive fare are more likely to survive.\n* Passengers from Cherbourg are more likely to survive.","50b02259":"Cabin feature has lots of Nan value also Age feature has a good amount of Nan values. Fare and Embark Nan values may be changed easily.","6da417bd":"Finally it comes to creating a submission file. I decided to use Decision Tree model for the submission.","00071d3e":"In addition I seperated family size to 3 groups. First one is for singles, second one is for small family and third one is for large family. Because from the previous plot there is a obvious distinctions between having small and large families. ","c3920450":"<a id=\"4\"><\/a> \n**4. Feature engineering**\n\nNow its time for predict NaN values from the  features and create new category for useful information. Firstly titles will be stripped from names.","52313422":"I categorize the fare into 4 grups under the Pclass.","924c9848":"Decision Tree has the best result. Lets see what coefficients effects how much.","caa8b631":"Also added new feature as family which keeps total family count.","98f4c987":"Finally I dropped the features that  is not needed for modeling. After that I visualised the correlation between the features.","be7dbc97":"Although having little information about Cabins, they may be categorized somehow.","5c74a0f2":"Titles are useful as a new feateure which helps to define passengers have NaN Age value.","acaef5ff":"<a id=\"6\"><\/a> \n**6. Conclusion**\n\nAs I wrote before this dataset is my first competition dataest. I enjoyed very much working with and also learned much studying how to do it. If you come this far, I thank you very much.\n\nIf you like it, thank you for you upvotes.\nIf you have any question, I will happy to hear it\n\nAlso look for https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners for Machine Learning","edf0a2fd":"<a id=\"5\"><\/a> \n**5. Modeling**\n\nIn this section I am going to apply each model to train data for find the best survival predict. Before this I spiltted the train data to %80 train and % 20 test size. ","b408c8b1":"<a id=\"1\"><\/a> \n**1. Introduction**\n\nHello everyone!  This is my first competition kernel. I choosed Titanic dataset which is a famous case and also has good features to work with.\n\nThe datasets contains:\n\n* survival==>\t    Survival==>\t                                                       0 = No, 1 = Yes\n* pclass==>\t        Ticket class==>\t                                                 1 = 1st, 2 = 2nd, 3 = 3rd\n* sex==>\t         Sex\t\n* Age==>\t         Age in years\t\n* sibsp==>           # of siblings \/ spouses aboard the Titanic\t\n* parch==>\t        # of parents \/ children aboard the Titanic\t\n* ticket==>\t          Ticket number\t\n* fare==>\t          Passenger fare\t\n* cabin==>\t        Cabin number\t\n* embarked==>  Port of Embarkation==>\t                                  C = Cherbourg, Q = Queenstown, S = Southampton","af1a724f":"Only one passenger has a NaN Fare value. I am going to fill it with the  passengers' fare whose have common features. As common features I choosed Pclass, Embarked, Parch, Sex, SibSp and Title to be close as possible.","c1d31dbf":"As you can see above many titles are very low count so they can be placed to more common title.","1e35433e":"From the plot above, it show family member's count. Having 0 member means that passenger is single.","e0a936ed":"<a id=\"3\"><\/a> \n**3. Exploratory Data Analysis (EDA)**\n\nLets display each feature to understand better.","91b90fcd":"Looks like Cabins B and C have more survival rate than others.","fe207abd":"Lets see the results.","625c7eae":"Secondly I am going to categorize Cabins by initials than distinguish them by Pclass, Embarked and Fare.","142e9851":"Two Embarked locations are displayed above for these two passenger. C has more survival rate than S. So I am going to Choose C for their Embarked value because these two passengers survived.","f3d131bf":"The most of the Tickets are different from each other. Too bad there are much values to visualise.","3d292b85":"I seperated Age values to 5 equal range.","7d729add":"I completed filling the NaN values. Lets verify it. ","5f6fae7c":"For speaking survival, sex correlated the most. Pclass correlated with Cabin and Fare, Family size correlated with Sibsp and Parch size highly.","0bdf696d":"This time I am going to replace object values to numerical values for modelling and categorize some features for handling much easier.","0f88937d":"<a id=\"2\"><\/a> \n**2. Loading Data and Explanation of Features**","8af6a32f":"I am going to apply NaN Cabin values from information which is above,. This process may be bulky but it helps to fill the NaN values with the logical way."}}