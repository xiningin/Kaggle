{"cell_type":{"04a58f68":"code","9742aa41":"code","5aea2f14":"code","39704d2b":"code","f45b1ee5":"code","414d8e05":"code","562bd978":"code","c68a3247":"code","391ff77f":"code","7973fd07":"code","80835d7e":"code","ff757fde":"code","712ac0d9":"code","83f89739":"code","0c8b48c7":"code","f4af761d":"code","01f86614":"code","da11d83e":"code","baf7c597":"code","f09077ed":"code","82317b49":"code","87056e36":"code","bbed2368":"code","5d731815":"code","e8302104":"code","fab4d65f":"code","5861b293":"code","b5165903":"code","bcfdbd24":"code","0973ca3d":"code","ee5ba550":"code","9f837cb6":"code","fcb6eaea":"code","7c7056a5":"code","4d542057":"code","6e1bcd3c":"code","f70d3f15":"code","aa5c4a95":"code","11ddfb3f":"code","63cb2d77":"code","e8e0fa74":"code","67d46ec0":"code","158702f8":"code","ebb417ea":"code","11be7b8d":"code","a4c1905f":"code","528f43c1":"code","47139928":"markdown","b14c15eb":"markdown","defd18d8":"markdown","5e6e86aa":"markdown","85e2858d":"markdown","8aba4631":"markdown","fea129a3":"markdown","7ee03acf":"markdown","47b230e1":"markdown","3f84c751":"markdown","a6e5a354":"markdown","f9a167de":"markdown"},"source":{"04a58f68":"from __future__ import division\nimport numpy as np \nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","9742aa41":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\n\nprint('Number of features: %s' %data.shape[1])\nprint('Number of examples: %s' %data.shape[0])","5aea2f14":"data.head()","39704d2b":"data.info()","f45b1ee5":"data.describe()","414d8e05":"data.isnull().sum()","562bd978":"# Evaluation 1 - age distribution\n\nmin_age = data['age'].min()\nmax_age = data['age'].max()\nmean_age = round(data['age'].mean(),1)\n\nprint('Min age: %s' %min_age)\nprint('Max age: %s' %max_age)\nprint('Mean age: %s' %mean_age)","c68a3247":"# Evaluation 2 - target percentage\n\n# no disease = 0\n# disease = 1\n\nno_disease = len(data[data['target'] ==0])\nwith_disease = len(data[data['target'] ==1])\n\nprint('Percentage of people without disease: {:.2f} %' .format(no_disease\/len(data['target'])*100))\nprint('Percentage of people with disease: {:.2f} %' .format(with_disease\/len(data['target'])*100))","391ff77f":"# Evaluation 3 - gender counts\n\n# female = 0\n# male = 1\n\nfemale = len(data[data['sex'] ==0])\nmale = len(data[data['sex'] ==1])\n\nprint('Percentage of female: {:.2f} %' .format(female\/len(data['sex'])*100))\nprint('Percentage of male: {:.2f} %' .format(male\/len(data['sex'])*100))","7973fd07":"# Evaluation 4 - mean value of target\n\nmean_target = round(data['target'].mean(), 2)\n\nprint('Mean value of target: %s' %mean_target)\n\nmean_target_df = pd.DataFrame(data.groupby('target').mean()).reset_index()\nmean_target_df","80835d7e":"# Visualisation 1 - heatmap of dataset\n\nplt.figure(figsize=(15,8))\ncbar_kws = { 'ticks' : [-1, -0.5, 0, 0.5, 1], 'orientation': 'horizontal'}\nsns.heatmap(data.corr(), cmap='PuBu', linewidths=0.1, annot=True, vmax=1, vmin=-1, cbar_kws=cbar_kws)","ff757fde":"# Visualisation 2 -  distribution of age\n\nplt.figure(figsize=(15,8))\nsns.distplot(data['age'], hist=True, bins=30, color='grey')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.title('Distribution of age', fontsize=15)","712ac0d9":"# Visualisation 3 -  gender\n\nplt.figure(figsize=(15,8))\nsns.countplot(data['sex'], palette='PuBu')\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender', fontsize=15)","83f89739":"# Visualisation 4 - count of females and males vs age\n\nplt.figure(figsize=(15,8))\nsns.countplot(data['age'], hue=data['sex'], palette='PuBu', saturation=0.8)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Gender count', fontsize=15)\nplt.legend(loc='upper right', fontsize=15, labels=['Female', 'Male'])","0c8b48c7":"# Visualisation 5 - count of target\n\nplt.figure(figsize=(15,8))\nsns.countplot(data['target'], palette='PuBu')\nplt.xlabel('Target')\nplt.ylabel('Count')\nplt.title('Target count', fontsize=15)","f4af761d":"# Visualisation 6 - target in age\n\nplt.figure(figsize=(15,8))\nsns.countplot(data['age'], hue=data['target'], palette='PuBu', saturation=0.8)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Target count', fontsize=15)\nplt.legend(loc='upper right', fontsize=15, labels=['No disease', 'Disease'])","01f86614":"# Visualisation 7 - target in genders\n\nplt.figure(figsize=(15,8))\nsns.countplot(data['sex'], hue=data['target'], palette='PuBu', saturation=0.8)\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Target count in genders', fontsize=15)\nplt.legend(loc='upper right', fontsize=15, labels=['No disease', 'Disease'])","da11d83e":"# Visualisation 8 - crosstabs for features and target\n\nnames = ['Chest Pain Type', 'Slope', 'FBS - (Fasting Blood Sugar)', 'Resting electrocardiographic results',\n        'Exercise induced angina', 'Number of major vessels', 'Thal']\n\nfor col in data[['cp', 'slope','fbs', 'restecg', 'exang', 'ca', 'thal']]:\n    plt.figure(figsize=(15,8))\n    sns.countplot(data[col], hue=data.target, palette='PuBu')\n    plt.title(col)\n    plt.legend(loc='upper right', fontsize=15, labels=['No disease', 'Disease'])","baf7c597":"data.head()","f09077ed":"# Dummy values for categorical features - cp, slope, thal\n\ndummy_cp = pd.get_dummies(data.cp, prefix='cp')\ndummy_slope = pd.get_dummies(data.slope, prefix='slope')\ndummy_thal = pd.get_dummies(data.thal, prefix='thal')","82317b49":"# Merging dummies with daataframe and dropping this columns\n\ndata = pd.concat([data,dummy_cp, dummy_slope, dummy_thal], axis=1)\ndata.drop(['cp', 'slope', 'thal'], axis=1, inplace=True)","87056e36":"data.head()","bbed2368":"# Preparing train and test data for machine learning algorithms\n\nX_data = data.drop('target', axis=1)\ny = data.target","5d731815":"# Normalizing data\nX = (X_data - np.min(X_data)) \/ (np.max(X_data) - np.min(X_data)).values","e8302104":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","fab4d65f":"log = LogisticRegression()\nlog.fit(X_train, y_train)\nlog_pred = log.predict(X_test)","5861b293":"log_conf = confusion_matrix(y_test, log_pred)\nlog_class = classification_report(y_test, log_pred)","b5165903":"log_acc_train = log.score(X_train, y_train)*100\nlog_acc_test = log.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(log_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(log_acc_test))","bcfdbd24":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)","0973ca3d":"knn_conf = confusion_matrix(y_test, knn_pred)\nknn_class = classification_report(y_test, knn_pred)","ee5ba550":"knn_acc_train = knn.score(X_train, y_train)*100\nknn_acc_test = knn.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(knn_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(knn_acc_test))","9f837cb6":"# Best value for KNN\n\nknn_score_list = []\nfor i in range(1,20):\n    knn_2 = KNeighborsClassifier(n_neighbors = i)\n    knn_2.fit(X_train, y_train)\n    knn_score_list.append(knn_2.score(X_test, y_test))\n \n\nplt.figure(figsize=(15,8))\nplt.plot(range(1,20), knn_score_list)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K values\")\nplt.ylabel(\"Score\")\n\nknn_acc_2_max = max(knn_score_list)*100\nprint(\"Maximum KNN Score is {:.2f}%\".format(knn_acc_2_max))","fcb6eaea":"svm = SVC(random_state=1)\nsvm.fit(X_train, y_train)\nsvm_pred = svm.predict(X_test)","7c7056a5":"svm_conf = confusion_matrix(y_test, svm_pred)\nsvm_class = classification_report(y_test, svm_pred)","4d542057":"svm_acc_train = svm.score(X_train, y_train)*100\nsvm_acc_test = svm.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(svm_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(svm_acc_test))","6e1bcd3c":"nb = GaussianNB()\nnb.fit(X_train, y_train)\nnb_pred = nb.predict(X_test)","f70d3f15":"nb_conf = confusion_matrix(y_test, nb_pred)\nnb_class = classification_report(y_test, nb_pred)","aa5c4a95":"nb_acc_train = nb.score(X_train, y_train)*100\nnb_acc_test = nb.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(nb_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(nb_acc_test))","11ddfb3f":"d_tree = DecisionTreeClassifier()\nd_tree.fit(X_train, y_train)\ndtree_pred = d_tree.predict(X_test)","63cb2d77":"dtree_conf = confusion_matrix(y_test, dtree_pred)\ndtree_class = classification_report(y_test, dtree_pred)","e8e0fa74":"dtree_acc_train = d_tree.score(X_train, y_train)*100\ndtree_acc_test = d_tree.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(dtree_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(dtree_acc_test))","67d46ec0":"rtree = RandomForestClassifier()\nrtree.fit(X_train, y_train)\nrtree_pred = rtree.predict(X_test)","158702f8":"rtree_conf = confusion_matrix(y_test, rtree_pred)\nrtree_class = classification_report(y_test, rtree_pred)","ebb417ea":"rtree_acc_train = rtree.score(X_train, y_train)*100\nrtree_acc_test = rtree.score(X_test, y_test)*100\n\nprint(\"Train Accuracy {:.2f}%\".format(rtree_acc_train))\nprint(\"Test Accuracy {:.2f}%\".format(rtree_acc_test))","11be7b8d":"# confusion martix all\n\nconf_all = [log_conf, knn_conf, svm_conf, nb_conf, dtree_conf, rtree_conf]\nclass_all = [log_class, knn_class, svm_class, nb_class, dtree_class, rtree_class]\nclass_names = ['Logistic regression', 'K Nearest Neighbours', 'Support Vector Machine', 'Naive Bayes'\n              , 'Decision tree', 'Random forest']","a4c1905f":"plt.figure(figsize=(15,8))\nplt.suptitle(\"Confusion Matrixes\",fontsize=22)\n\nplt.subplot(2,3,1)\nplt.title('Logistic Regression Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[0], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')\n\nplt.subplot(2,3,2)\nplt.title('K Nearest Neighbours Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[1], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')\n\nplt.subplot(2,3,3)\nplt.title('Support Vector Machine Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[2], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')\n\nplt.subplot(2,3,4)\nplt.title('Naive Bayes Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[3], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')\n\nplt.subplot(2,3,5)\nplt.title('Decission tree Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[4], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')\n\nplt.subplot(2,3,6)\nplt.title('Random forestrs Confusion Matrix', fontsize=15)\nsns.heatmap(conf_all[5], annot=True, cbar=False, annot_kws={'size':15}, cmap='PuBu')","528f43c1":"for name, cls in zip(class_names, class_all):\n    print('Classification report for %s' %name)\n    print(cls)\n    print('\\n')","47139928":"4. Predictions","b14c15eb":"4.7. Confusion matrix","defd18d8":"2. Evaluations","5e6e86aa":"4.8. Classification reports","85e2858d":"1. Loading data and data exploration","8aba4631":"4.1. Logistic regression","fea129a3":"4.2. K Nearest Neighbours","7ee03acf":"4.6. Random forest classifier","47b230e1":"4.5. Decission tree","3f84c751":"3. Visualisations","a6e5a354":"4.3. Support Vector Machines","f9a167de":"4.4. Naive Bayes Gaussian"}}