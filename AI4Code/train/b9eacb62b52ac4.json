{"cell_type":{"91666dc7":"code","40f5690a":"code","87da94e4":"code","8a3d7ce4":"code","e43b13c2":"code","10d64769":"code","ada3f32c":"code","15041639":"code","8d2bc20c":"code","fac1d717":"code","e0989d7d":"code","4173a678":"code","bad6d0b4":"code","35d9000e":"code","6c2ab057":"code","a0e5ca97":"code","a288f65a":"code","714c461b":"code","9206c63f":"code","c5b1c313":"code","7878c532":"code","f678c11c":"code","e15b6a39":"code","ab327351":"code","f3598b80":"code","e7bdc5e2":"code","cb7e9b7a":"code","ad06b3f2":"code","c298d21a":"code","9a4a1196":"code","0d21adbc":"code","73ad2519":"code","39cd6660":"code","dc15601e":"code","ebe031a6":"code","7eb71a12":"code","391d96d1":"code","a8774061":"code","b74f1047":"code","e0667428":"code","bdefd773":"code","a6f99f30":"code","d49c3330":"code","f4a7f82e":"code","9028dc80":"code","9a6251a0":"code","642ab181":"code","34796568":"code","e92c1823":"code","47b28d25":"code","93cc4c1d":"code","ef3a7fb2":"code","2738e438":"code","740405d4":"code","48ceb432":"markdown","4596626d":"markdown"},"source":{"91666dc7":"### Keras and Tensorflow >2.0","40f5690a":"### Data Collection\nimport pandas_datareader as pdr\n\nkey = \"4c75f6e86b218c03b75604472c600791d8d5e1ce\"\n","87da94e4":"df = pdr.get_data_tiingo('AAPL', api_key=key)","8a3d7ce4":"df.to_csv('AAPL.csv')","e43b13c2":"import pandas as pd","10d64769":"df=pd.read_csv('AAPL.csv')","ada3f32c":"df.head()","15041639":"df.tail()","8d2bc20c":"df1=df.reset_index()['close']","fac1d717":"df1","e0989d7d":"import matplotlib.pyplot as plt\nplt.plot(df1)","4173a678":"### LSTM are sensitive to the scale of the data. so we apply MinMax scaler ","bad6d0b4":"import numpy as np","35d9000e":"df1","6c2ab057":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","a0e5ca97":"print(df1)","a288f65a":"##splitting dataset into train and test split\ntraining_size=int(len(df1)*0.65)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","714c461b":"training_size,test_size","9206c63f":"train_data","c5b1c313":"import numpy\n# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn numpy.array(dataX), numpy.array(dataY)","7878c532":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)","f678c11c":"print(X_train.shape), print(y_train.shape)","e15b6a39":"print(X_test.shape), print(y_test.shape)","ab327351":" X_train.shape","f3598b80":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","e7bdc5e2":"X_train.shape","cb7e9b7a":"X_test.shape","ad06b3f2":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","c298d21a":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\n","9a4a1196":"model.summary()","0d21adbc":"# model.summary()","73ad2519":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=100,batch_size=64,verbose=1)","39cd6660":"1.1420e-04 - 9.6903e-05","dc15601e":"9.6903e-05","ebe031a6":"import tensorflow as tf","7eb71a12":"tf.__version__","391d96d1":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","a8774061":"##Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","b74f1047":"# train_predict","e0667428":"### Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","bdefd773":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","a6f99f30":"### Plotting \n# shift train predictions for plotting\nlook_back=100\ntrainPredictPlot = numpy.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = numpy.empty_like(df1)\ntestPredictPlot[:, :] = numpy.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","d49c3330":"len(test_data)","f4a7f82e":"x_input=test_data[340:].reshape(1,-1)\nx_input.shape\n","9028dc80":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","9a6251a0":"temp_input","642ab181":"# demonstrate prediction for next 30 days\nfrom numpy import array\n\nlst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","34796568":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","e92c1823":"import matplotlib.pyplot as plt","47b28d25":"len(df1)","93cc4c1d":"plt.plot(day_new,scaler.inverse_transform(df1[1157:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","ef3a7fb2":"df3=df1.tolist()\ndf3.extend(lst_output)\nplt.plot(df3[1200:])","2738e438":"df3=scaler.inverse_transform(df3).tolist()","740405d4":"plt.plot(df3)","48ceb432":"[Pandas Datareader\n](https:\/\/pandas-datareader.readthedocs.io\/en\/latest\/remote_data.html)\n\n","4596626d":"### Stock Market Prediction And Forecasting Using Stacked LSTM"}}