{"cell_type":{"2ffb932a":"code","7b3988ea":"code","f744e9a6":"code","29d661d4":"code","04511985":"code","00811790":"code","3d247acb":"code","f2ca5668":"code","544c2cd4":"code","bed0175d":"code","d7b5d4f7":"code","e6a6915c":"code","01fdcd76":"code","da3032e7":"code","7c3ab33d":"code","bc29fc4f":"code","52bc1ba9":"code","dae01377":"code","67b822ad":"code","eb270593":"code","607f41ed":"code","09e1b7d1":"code","b7ea621d":"code","bb60ff3f":"code","3fe70312":"code","2c1afc03":"code","ddd99520":"code","5cc6bcd7":"code","0e044605":"code","c62720c3":"code","6b1fda7c":"code","a651e5ae":"code","68562caf":"code","3a2e1a8d":"code","050af72a":"code","617de2d6":"code","cc2a53a8":"code","6af5019e":"code","6843f779":"code","6b86621c":"code","b4becd49":"code","f0e34237":"code","aacb6fc2":"code","3776952b":"code","28fe3034":"code","ef786a68":"code","8ad1c2df":"code","4992bce7":"code","c29a25fd":"code","74d02e9b":"code","bb92d34c":"code","25c25319":"code","dfaf91e4":"code","9171f6b6":"code","1d21caf7":"code","14d8cd05":"code","672a78d9":"code","89e683f5":"code","ed3089df":"code","1fdbaf80":"code","875c4283":"code","14407eb9":"code","051c5917":"code","47178789":"code","c8695abd":"code","2c0bac83":"code","114a7b5a":"code","5b1eaef1":"code","7046d9c2":"code","45499baa":"code","ddd09b50":"code","4305cab5":"code","ebd73f59":"code","390bae42":"code","1efbda8e":"code","7658a061":"code","a9f6bb49":"code","f95b183d":"code","1b2ae934":"code","ac6ae1e2":"code","5f5012bf":"code","3d357b21":"code","74c5ea3f":"code","70b95063":"code","059dc9e7":"code","cf12e16b":"code","9f5329a7":"code","e5d025f6":"code","63f358a9":"markdown","cfe49b2b":"markdown","ede06c1d":"markdown","71044794":"markdown","c6730131":"markdown","12ef046b":"markdown","720fc64d":"markdown","d28780ea":"markdown","d111c0e4":"markdown","9fc1d5c8":"markdown","119ee5d9":"markdown","c7436db2":"markdown","bbfd0ded":"markdown","198e1192":"markdown","9f63ec32":"markdown","e0281798":"markdown","9d5f0877":"markdown"},"source":{"2ffb932a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7b3988ea":"# Read dataset\nall_df = pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv', names=['Country', 'Province', 'Lat', 'Long', 'Confirmed', 'Recovered', 'Deaths', 'Date'], header=0)\nall_df.drop(['Lat', 'Long'], inplace = True, axis=1)\n\n# Convert Date to datetime object\nall_df['Date'] = all_df['Date'].apply(pd.Timestamp)\n# Sum all provinces\nall_df = all_df.groupby(['Country', 'Date']).sum().reset_index()","f744e9a6":"all_df.sample(5)","29d661d4":"def logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1","04511985":"country = 'US'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","00811790":"p0 = [800000, 0.25, 80] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","3d247acb":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","f2ca5668":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","544c2cd4":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","bed0175d":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","d7b5d4f7":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","e6a6915c":"country = 'China'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","01fdcd76":"p0 = [80000, 0.2, 30] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","da3032e7":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","7c3ab33d":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","bc29fc4f":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","52bc1ba9":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","dae01377":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","67b822ad":"country = 'Italy'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","eb270593":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","607f41ed":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","09e1b7d1":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","b7ea621d":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","bb60ff3f":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","3fe70312":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","2c1afc03":"country = 'Spain'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","ddd99520":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","5cc6bcd7":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","0e044605":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","c62720c3":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","6b1fda7c":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","a651e5ae":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","68562caf":"country = 'Germany'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","3a2e1a8d":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","050af72a":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","617de2d6":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","cc2a53a8":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","6af5019e":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","6843f779":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","6b86621c":"country = 'Iran'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","b4becd49":"p0 = [800000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","f0e34237":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","aacb6fc2":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","3776952b":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","28fe3034":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","ef786a68":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","8ad1c2df":"country = 'France'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","4992bce7":"p0 = [800000, 0.2, 70] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","c29a25fd":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","74d02e9b":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","bb92d34c":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","25c25319":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","dfaf91e4":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","9171f6b6":"country = 'South Korea'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","1d21caf7":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","14d8cd05":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","672a78d9":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","89e683f5":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","ed3089df":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","1fdbaf80":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","875c4283":"country = 'United Kingdom'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","14407eb9":"p0 = [800000, 0.2, 70] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","051c5917":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","47178789":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","c8695abd":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","2c0bac83":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","114a7b5a":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","5b1eaef1":"country = 'Russia'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","7046d9c2":"p0 = [80000, 0.2, 70] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","45499baa":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","ddd09b50":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","4305cab5":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","ebd73f59":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","390bae42":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","1efbda8e":"country = 'Romania'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","7658a061":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","a9f6bb49":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","f95b183d":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","1b2ae934":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","ac6ae1e2":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","5f5012bf":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","3d357b21":"country = 'Moldova'\n\ndf = all_df[all_df['Country'] == country]\n\nplt.title(\"Number of cases in \" + country + \" by day\")\nplt.plot(df['Date'], df['Confirmed'], 'b-', label='data')","74c5ea3f":"p0 = [80000, 0.2, 50] \n\npopt, pcov = curve_fit(logistic, range(len(df)), df['Confirmed'], p0, method = \"dogbox\")\nprint(\"Last day number of cases: \" + str(int(df['Confirmed'][-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df['Confirmed'][-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","70b95063":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","059dc9e7":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days for \" + country)\nplt.plot(range(len(df)), df['Confirmed'], 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","cf12e16b":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df)+10) + \" days in \" + country)\nplt.plot(range(len(df)), np.log(df[\"Confirmed\"]), 'b-')\nplt.plot(range(len(df)+10), np.log(logistic(range(len(df)+10), *popt)), 'r-')","9f5329a7":"plt.title(\"New cases per day in \" + country)\nplt.plot(range(len(df)), df[\"Confirmed\"].diff(), 'b-')","e5d025f6":"plt.title(\"Log scale of cumulative cases by log scale of new cases in \" + country)\nplt.plot(np.log(df[\"Confirmed\"]), np.log(df[\"Confirmed\"].diff().replace(0, 1)), 'b-')","63f358a9":"## Top countries by number of cases","cfe49b2b":"# Spain","ede06c1d":"# China","71044794":"# South Korea","c6730131":"# Moldova","12ef046b":"# United Kingdom","720fc64d":"# Germany","d28780ea":"# US","d111c0e4":"## Data preparation\n\nAdding the needed packages, reading the data and creating some basic aggregations.","9fc1d5c8":"# Italy","119ee5d9":"## Introduction\n\nLet's try to fit a logistic curve over the cases of COVID-19 in different countries. Idea: https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg","c7436db2":"# France","bbfd0ded":"# Iran","198e1192":"### Defining the logistic function","9f63ec32":"# Russia","e0281798":"## Fitting the logistic function on the data\nWe used some initialisation for the parameters as follows:\n* L (the maximum number of confirmed cases) = 80000 taken from the China example\n* k (growth rate) = 0.2 approximated value from most of the countries\n* x0 (the day of the inflexion) = 50 approximated","9d5f0877":"# Romania"}}