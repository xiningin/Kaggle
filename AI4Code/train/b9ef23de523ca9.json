{"cell_type":{"fcefba42":"code","7020e6a4":"code","5650955f":"code","997e7c29":"code","293cc707":"code","a007bba3":"code","b7bfc174":"code","fc0eb7cb":"code","c376f4e8":"code","e3dea5b5":"code","664ff4e7":"code","7afe778b":"code","99f00196":"code","e0f8d1d3":"code","ad31a378":"code","16d2ab36":"code","d454ee75":"code","ccfba7d7":"code","d4c48dac":"code","990e4304":"code","78fe2717":"code","fb4329f6":"code","90d4107f":"code","d8c26efc":"code","8cf2267f":"code","6ea7c608":"code","9cee0756":"code","fdf424a0":"code","b8dcb49b":"code","cb193d96":"code","a3ae51fd":"code","de03021d":"code","f50cf578":"code","a75536da":"code","db71b739":"code","d9e833e5":"code","d21019e0":"code","17087d72":"code","0096fc03":"code","0cbcb15b":"code","3262c8bd":"code","0d79cfe8":"code","ec1c72cc":"code","ef8ec70b":"code","bfebf26f":"code","effd0bbc":"code","060dc68a":"markdown","a35b47da":"markdown","e6b68beb":"markdown","0169113a":"markdown","d4fb93fe":"markdown","fc45e412":"markdown","a2ee54c1":"markdown","41cb1100":"markdown","498f79c6":"markdown","ba37095b":"markdown","7088440d":"markdown","c6b61ff5":"markdown","2b1761f5":"markdown","1d05a9ac":"markdown","a27694ce":"markdown","2d2ca03f":"markdown","6963a868":"markdown","4a77d34e":"markdown","c2624c2f":"markdown","8845be4e":"markdown","d8654d8a":"markdown","cf4edb07":"markdown","f3865c33":"markdown","3d7d9bf2":"markdown","d9133f5e":"markdown","ba7edbc2":"markdown","0b16fcf5":"markdown","d63da65a":"markdown"},"source":{"fcefba42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7020e6a4":"data = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv')","5650955f":"data.isnull().sum()","997e7c29":"data.rename(columns={'Province\/State':'State', 'Country\/Region':'Country'}, inplace=True)","293cc707":"grouped = data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\n\nlast = grouped[grouped.Date == max(grouped.Date)]","a007bba3":"temp = last.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'])\ntemp","b7bfc174":"import plotly.express as px\n\nfig  =  px.treemap(temp, path = ['variable'], \n                   values = 'value',                 \n                   height=225)\n\nfig.data[0].textinfo = 'label+value'\n\nfig.show()","fc0eb7cb":"fig = px.bar(temp, x='variable', y='value', color='variable', height=500, width=900)\nfig.update_layout(title = {'text':'Total Cases by State', 'x':0.5, 'y':1}, \n                  legend = {'title':{'text':'Status','font':{'size':20, 'color':'orange'}}})\nfig.show()","c376f4e8":"countries = data[data.Date == max(data.Date)].groupby(['Country', 'Lat', 'Long'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ncountries.sample()","e3dea5b5":"countries.describe()","664ff4e7":"fig = px.scatter_geo(countries, lat='Lat', lon='Long',\n                       hover_name='Country',\n                       hover_data=['Recovered'],\n                       color = 'Confirmed',\n                       size='Deaths',\n                       projection='orthographic', # or 'natural earth'\n                       height= 700,\n                       color_continuous_scale='inferno_r')\n\nfig.update_layout(title={'text':'COVID-19 Case Map','x':0.5,'y':1})    \nfig.show()","7afe778b":"fig = px.scatter_mapbox(countries, lat='Lat', lon='Long',\n                       hover_name='Country',\n                       hover_data=['Recovered'],\n                       color = 'Deaths',\n                       size='Confirmed',\n                       width=1200,\n                       zoom=.75,    #  SCALE OLARAK ZOOM\n                       title={'text': \"Covid-19 - MAPBOX\", 'y':0.9, 'x':0.5},\n                       mapbox_style='stamen-watercolor')\n\nfig.show()","99f00196":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\n\ncodes = df.groupby(['COUNTRY', 'CODE']).sum().reset_index()\n\ncodes.head()","e0f8d1d3":"code_list = []\nfor i in countries.Country:\n    if i in codes.COUNTRY.values:\n        code_list.append(codes[codes.COUNTRY == i].CODE.values[0])\n    else:\n        code_list.append(np.nan)\n        \n        \ncountries['codes'] = code_list","ad31a378":"countries[countries.codes.isna()]","16d2ab36":"countries[countries['Country']=='US'] = countries[countries['Country']=='US'].fillna('USA')\ncountries[countries['Country']=='South Korea'] = countries[countries['Country']=='South Korea'].fillna('KOR')\ncountries[countries['Country']=='Czechia'] = countries[countries['Country']=='Czechia'].fillna('CZ')\ncountries[countries['Country']=='Bahamas'] = countries[countries['Country']=='Bahamas'].fillna('BHS')\ncountries[countries['Country']=='Congo (Brazzaville)'] = countries[countries['Country']=='Congo (Brazzaville)'].fillna('COG')\ncountries[countries['Country']=='Congo (Kinshasa)'] = countries[countries['Country']=='Congo (Kinshasa)'].fillna('COD')\ncountries[countries['Country']=='Gambia'] = countries[countries['Country']=='Gambia'].fillna('GMB')\ncountries[countries['Country']=='Holy See'] = countries[countries['Country']=='Holy See'].fillna('VAT')\ncountries[countries['Country']=='North Macedonia'] = countries[countries['Country']=='North Macedonia'].fillna('MKD')\ncountries[countries['Country']=='Taiwan*'] = countries[countries['Country']=='Taiwan*'].fillna('TWN')\ncountries[countries['Country']=='Western Sahara'] = countries[countries['Country']=='Western Sahara'].fillna('ESH')","d454ee75":"codes = countries[~countries.codes.isna()]\n\ncodes = codes.groupby(['codes','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\ncodes.head()","ccfba7d7":"fig = px.choropleth(codes, locations=codes['codes'],\n                    color=np.log(codes.Deaths),\n                   hover_name='Country',\n                   hover_data=['Confirmed', 'Recovered'],\n                   color_continuous_scale='inferno_r',\n                   projection='natural earth',\n                   height=800,\n                   title={'text': \"COVID-19 Choroplet Map\", 'y':0.95, 'x':0.5})\n\nfig.update_layout(font={'size':20, 'color':'purple'})\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","d4c48dac":"timeframes = data.groupby(['Date', 'Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\ncode_list = []\nfor i in timeframes.Country:\n    if i in codes.Country.values:\n        code_list.append(codes[codes.Country == i].codes.values[0])\n    else:\n        code_list.append(np.nan)","990e4304":"timeframes['codes'] = code_list\n\ntimeframes = timeframes[~timeframes.codes.isna()]","78fe2717":"timeframes['Date'] = pd.to_datetime(timeframes['Date']).sort_values()\ntimeframes = timeframes.sort_values(by='Date').reset_index(drop=True)","fb4329f6":"dates= []\nfor i in timeframes.Date.values:\n    dates.append(str(i).replace('-', '\/').split('T')[0])\n    \ntimeframes['Dates'] = dates","90d4107f":"fig = px.choropleth(timeframes,\n                   locations='codes',\n                   color=np.log(timeframes.Deaths),\n                   color_continuous_scale='inferno_r',\n                   hover_name='Country',\n                   hover_data=['Confirmed', 'Deaths', 'Recovered'],\n                   animation_frame='Dates',\n                   projection='natural earth')\n\nfig.update_layout(title={'text':'Spread of COVID-19 by Date',\n                         'font':{'size':18, 'color':'red'},\n                         'x':0.5, 'y':1})\n#                   transition = {'duration': 10000})\n\n# fig.data[0].hovertext = 'Country' + timeframes.Country\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","d8c26efc":"area = data.groupby('Date')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\narea = area.melt(id_vars='Date', value_vars=['Confirmed','Deaths','Recovered'])\n\narea = area.sort_values(by='Date').reset_index(drop=True)","8cf2267f":"area['Date'] = pd.to_datetime(area['Date']).sort_values()","6ea7c608":"fig  = px.area(area, x='Date', y='value', color='variable', width=1200, height=700) # , facet_col='variable')\n\nfig.update_layout(title={'text':'Cases over Time', 'x':0.5, 'y':.95, 'font':{'size':20}})\nfig.data[0].mode = 'markers'\nfig.data[1].mode = 'markers'\nfig.data[2].mode = 'markers+lines'\nfig.layout.legend ={'title':{'text':'Status','font':{'color':'blue', 'size':20}}, 'font':{'size':15}}\n# fig.update_layout(legend = {'title':{'text':'CASES','font':{'color':'red', 'size':20}}, 'font':{'size':20}})\n\nfig.show()","9cee0756":"fig  = px.scatter(area, x='Date', y='value', color='variable', width=1200, height=500,\n                 facet_col='variable')\n\nfig.update_layout(title={'text':'Cases over Time', 'x':0.5, 'y':1})\nfig.data[0].update(mode='markers')\nfig.data[1].update(mode='markers')\nfig.data[2].update(mode='markers')\n\nfig.show()","fdf424a0":"top_cases = data[data.Date == max(data.Date)].groupby('Country')['Confirmed', 'Deaths', 'Recovered'].sum().nlargest(columns=['Deaths'], n=15).sort_values(by='Deaths', ascending=False)\ntop_cases = top_cases.reset_index()\ntop_cases","b8dcb49b":"fig = px.bar(top_cases, y='Country', x='Deaths', color='Country', orientation='h')\n\nfig.show()","cb193d96":"temp = data.groupby(['Date','Country'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","a3ae51fd":"top_countries = data.groupby('Country')['Confirmed', 'Deaths', 'Recovered'].sum().nlargest(columns=['Deaths'], n=15).reset_index()['Country'].values","de03021d":"tf = pd.DataFrame(columns = temp.columns.values)\n\nfor c in top_countries:\n    tf = tf.append(temp[temp.Country == c])","f50cf578":"tf = tf.sort_values(by='Date').reset_index(drop=True)\n\ntf['Date'] = pd.to_datetime(tf['Date']).reset_index(drop=True)\n\ntf = tf.sort_values(by='Date').reset_index(drop=True)","a75536da":"dates = []\n\nfor i in tf.Date.values:\n    dates.append(str(i).replace('-', '\/').split('T')[0])\n    \ntf['Dates'] = dates\ntf.head()","db71b739":"fig = px.bar(tf, y='Country', x='Deaths', animation_frame='Dates', color='Country', text=tf.Deaths, orientation='h', hover_name='Country', height=700)\nfig.layout.title = {'text':'Death Tolls Caused by COVID-19 Over Time- aby','x':0.5, 'y':0.95}\n\nfig.show()","d9e833e5":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1,cols=2, subplot_titles = ['Confirmed', 'Deaths'],\n                                            specs = [[{\"type\": \"choropleth\"}, {\"type\": \"choropleth\"}]])\n\nfig.add_trace(px.choropleth(codes, locations='codes', color=np.log(codes['Deaths']), hover_name='Country').data[0], 1,1)\n\nfig.add_trace(px.choropleth(codes, locations='codes', color=np.log(codes['Confirmed']), hover_name='Country').data[0], 1,2)\n\nfig.update(layout_coloraxis_showscale=False)\n\nfig.show()","d21019e0":"fig = make_subplots(1,2, subplot_titles=['CHOROPLETH', 'BAR'],\n                   specs=[[{'type':'choropleth'}, {'type':'bar'}]])\n\nfig.add_trace(px.choropleth(codes, locations='codes', color='Deaths').data[0], 1,1)\nfig.add_traces(f2.data, rows=[1]*len(top_cases), cols=[2]*len(top_cases))\nfig.update(layout_coloraxis_showscale=False)\n\nfig.show()","17087d72":"date_countries = data.groupby(['Date', 'Country'])['Confirmed', 'Deaths','Recovered'].sum().reset_index()\n\ndate_count = data.groupby('Date')['Confirmed', 'Deaths','Recovered'].sum().reset_index()","0096fc03":"date_count['Date'] = pd.to_datetime(date_count['Date'])\ndate_count.sort_values(by='Date', inplace=True)\ndate_count.reset_index(drop=True, inplace=True)","0cbcb15b":"date_countries['Date'] = pd.to_datetime(date_countries['Date'])\ndate_countries = date_countries.sort_values(by='Date')","3262c8bd":"temp = pd.DataFrame(columns=date_countries.columns)\n\nfor i in top_countries[:10]:\n    temp = temp.append(date_countries[date_countries.Country == i])\n    \ntemp.sort_values(by=['Date','Country'], inplace=True)\ntemp = temp.reset_index(drop=True)","0d79cfe8":"daily_country = []\nfor idx, i in enumerate(temp.Date.unique()):\n    for c in temp.Country.unique():\n        if idx == 0:\n            daily_country.append(temp[(temp.Date== i) & (temp.Country == c)].Deaths.values[0])\n        else:\n            daily_country.append(temp[(temp.Date== temp.Date.unique()[idx]) & (temp.Country == c)].Deaths.values[0] - temp[(temp.Date== temp.Date.unique()[idx-1]) & (temp.Country == c)].Deaths.values[0])","ec1c72cc":"temp['Daily'] = daily_country\ntemp.tail(10)","ef8ec70b":"daily_cases = []\nfor idx in date_count.index:\n    if idx == 0:\n        daily_cases.append(date_count.Confirmed[idx])\n    else:\n        daily_cases.append(date_count.Confirmed[idx] - date_count.Confirmed[idx-1])\n\ndate_count['Daily Cases'] = daily_cases\ndate_count.head()","bfebf26f":"fig = px.bar(date_count, x='Date', y='Daily Cases', width=1000)\n\nfig.show()","effd0bbc":"fig = px.bar(temp, x='Date', y='Daily', width=500, height=1500, facet_row='Country', color='Country')\n\nfig.show()","060dc68a":"* Append iso-alpha codes","a35b47da":"<b id = 4>\n# Choropleth Maps\n\n<font color=blue>\n* To create a choropleth map, there is a need for **ISO alpha-3** codes of countries.\n* So I uploaded another dataset having these codes, and match the countries in our main dataset","e6b68beb":"<font color=blue>\n* For the textual date format in x-axis, there is a need to convert dates to datetime object","0169113a":"<font color=blue>\n### TOP 15 FINAL CASES","d4fb93fe":"<font color=blue>\n* Loading and preparing data for visualization","fc45e412":"<b id =1>\n    \n# 1. Treemap","a2ee54c1":"<font color=blue>\n* Check null code values of countries","41cb1100":"<b id=13>\n## Daily Death Tolls by Date","498f79c6":"<b id=12>\n\n# Daily Death Tolls","ba37095b":"<b id=14>\n## Daily Death Tolls by Country","7088440d":"* Make datetime object and sort dates","c6b61ff5":"<b id=11>\n\n# Subplots","2b1761f5":"## PLOTS\n\n1. [Treemap](#1)\n1. [Barplot](#2)\n1. [Scatter Geo & Scatter MAP](#3)\n1. [Choropleth Maps](#4)\n1. [Choropleth: Timeframe Animation](#5)\n\n1. [Area & Scatter Plots](#6) \n\n    * [Area Plot](#7) \n    * [Scatter Plot with Facets](#8)\n    \n    \n1. [Horizontal Barplot](#9)\n1. [Bar Chart Race](#10)\n1. [Subplots](#11)\n1. [Daily Death Tolls](#12) \n\n    * [Daily Death Tolls by Date](#13) \n    * [Daily Death Tolls by Country](#14)","1d05a9ac":"<b id=7>\n## Area Plot","a27694ce":"<font color= blue>\n\n* I don't know if any other way to do a bar chart race in Plotly. But I couldn't sort the bars simultaneously with the animation as in [here](https:\/\/www.youtube.com\/watch?v=2Uj1A9AguFs)\n\n<font color= green>\n\nI'll be so thankful if you help me about this","2d2ca03f":"<b id =6>\n# Area & Scatter Plots","6963a868":"### Only final situation","4a77d34e":"<b id= 5>\n# Choropleth: Timeframe Animation\n    \n<font color=blue>\n* This time, we make an animation of corona cases in a coropleth map by date. \n\n* Choropleth maps don't take a datetime object.\n\n* But in order to sort dates, we need to convert 'Date' into a datetime object, then convert back into string values.","c2624c2f":"# Introduction\n\n* This kernel is a sort of practical documentation of plotly for myself, I will update it permanently by adding new datasets and plots.","8845be4e":"<b id=9>\n# Horizontal Barplot","d8654d8a":"### Plot","cf4edb07":"<font color= blue>\n    \n* Codes of some sigfinicant countries cannot be coded due to the differences in the country names between 2 dataframes.\n* Therefore, I will fill these codes by hand.","f3865c33":"<b id=2>\n# Barplot","3d7d9bf2":"<b id=8>\n## Scatter Plot with Facets","d9133f5e":"### Plot","ba7edbc2":"<b id=10>\n\n# Bar Chart Race ","0b16fcf5":"<b id =3 >\n    \n# Scatter Geo & Scatter MAP","d63da65a":"<font color=blue>\n* check whether latitudes and longitudes are within the ranges: (-90, 90),  (-180, 180)"}}