{"cell_type":{"670ba4a2":"code","d0cb4845":"code","51f5c228":"code","30b8743b":"code","49aa15be":"code","84aa53b8":"code","5d8e1fab":"code","d55c1330":"code","b6c1ef05":"code","12e35fe6":"code","79798f50":"code","f34e83c6":"code","bafdf042":"code","b2bc7c07":"code","8cb44a7c":"code","08bc5c96":"code","7e2e8702":"code","e53c176c":"code","ab52bf3a":"code","ea7337f6":"code","b07f9701":"code","264fb2e6":"markdown","888cf9f1":"markdown","5738284b":"markdown","e1255000":"markdown","dc2a5582":"markdown"},"source":{"670ba4a2":"# Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","d0cb4845":"data = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ndf = pd.DataFrame(data)","51f5c228":"df.head()","30b8743b":"# showing column wise %ge of NaN values they contains \n\nfor i in df.columns:\n  print(i,\"\\t-\\t\", df[i].isna().mean()*100)\n","49aa15be":"df.info()","84aa53b8":"plt.figure(figsize=(5,5))\nax = sns.countplot(x='quality', data=df)\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n","5d8e1fab":"class_7 = df[df['quality'] == 7]                            # Class to which we bring other classes.\n\nclass_5 = df[df['quality'] == 5].sample(n = len(class_7))   # UnderSampling the class to make data balanced\nclass_6 = df[df['quality'] == 6].sample(n = len(class_7))   # UnderSampling the class to make data balanced\n\nnew_df = pd.concat([df[df['quality'] == 3], df[df['quality'] == 4], class_5, class_6, class_7, df[df['quality'] == 8]]).sample(frac=1)\nnew_df.head()","d55c1330":"plt.figure(figsize=(5,5))\nax = sns.countplot(x='quality', data=new_df)\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n","b6c1ef05":"from imblearn.over_sampling import RandomOverSampler\n\noversample = RandomOverSampler()\nx, y = oversample.fit_resample(new_df.drop(['quality'], axis=1), new_df['quality'])\n\nnew_df = pd.DataFrame(x, columns=df.drop(['quality'], axis=1).columns)\nnew_df['quality'] = y\n\nnew_df.head()","12e35fe6":"plt.figure(figsize=(5,5))\nax = sns.countplot(x='quality', data=new_df)\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n","79798f50":"cormap = new_df.corr()\nfig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(cormap, annot = True)","f34e83c6":"X = new_df.drop(['quality'], axis=1)\ny = new_df['quality']","bafdf042":"# Scale the data to be between -1 and 1\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","b2bc7c07":"#now lets split data in test train pairs\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)","8cb44a7c":"from sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier()\nclf.get_params()","08bc5c96":"from sklearn.model_selection import GridSearchCV\n\n# Number of features to consider at every split \nmax_features = ['auto', 'sqrt', 'log2']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n\n# Create the random grid\ngrid = {'max_features': max_features,\n        'max_depth': max_depth,\n        'min_samples_split': min_samples_split,\n        'min_samples_leaf': min_samples_leaf,\n        }","7e2e8702":"clf = GridSearchCV( estimator = DecisionTreeClassifier(),  param_grid = grid, cv = 5)\nclf = clf.fit(X_train, y_train)\nclf.best_params_","e53c176c":"clf = GridSearchCV( estimator = DecisionTreeClassifier(),  param_grid = grid, cv = 5)\nclf = clf.fit(X_train, y_train)\nclf.best_params_","ab52bf3a":"y_pred = clf.predict(X_test)\n\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\npred_df.head()\n","ea7337f6":"from sklearn.metrics import confusion_matrix\n\nmat = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(mat, annot = True)","b07f9701":"from sklearn import metrics\n\n# Measure the Accuracy Score\nprint(\"Accuracy score of the predictions: {0}\".format(metrics.accuracy_score(y_pred, y_test)))\n","264fb2e6":"> Here we are, firstly, under sampling class 5 and 6 to the level of class 7","888cf9f1":"> Now we are over sampling remaining classes to their level","5738284b":"> Here this bar graph easily shows how data is imbalanced. Less than 1% data is in class __3__. So, first, we have to balance the data in to get more precise predictions.\n> For that we are using both Under Sampling and Over sampling\n","e1255000":"> Since data does'nt contain any null values, we can move further","dc2a5582":"> Here we ca see that all the classes are balanced."}}