{"cell_type":{"ddd03f26":"code","688c9c90":"code","7abffe54":"code","fe945044":"code","0f217b36":"code","be5dce6b":"code","e5070a11":"code","5fca91fd":"code","00c9747f":"code","6f98153f":"code","2e6eda83":"code","54a38cc5":"code","d95ac89e":"code","cc37b343":"code","0da65bdc":"code","1f157410":"code","96ae8b28":"code","0237260e":"code","53e0deae":"code","fb61fccb":"code","d0cda81a":"code","79a094e4":"code","43f9621b":"code","9d94dcd3":"code","b2d6f351":"code","2c012b32":"code","85df9dce":"code","ac3b4e24":"code","feb2427a":"code","899389cd":"code","db7a92db":"markdown"},"source":{"ddd03f26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","688c9c90":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndata.head()","7abffe54":"import seaborn as sns","fe945044":"sns.countplot(data.sex)","0f217b36":"sns.countplot(data.cp)","be5dce6b":"sns.barplot(x=data.fbs, y=data.target)","e5070a11":"sns.countplot(data.restecg)","5fca91fd":"sns.barplot(x=data.oldpeak, y=data.target)","00c9747f":"sns.countplot(data.slope)","6f98153f":"sns.countplot(data.thal)","2e6eda83":"import matplotlib.pyplot as plt","54a38cc5":"plt.scatter(data[['trestbps']], data.target, color='red', marker='+')\nplt.xlabel('trestbps')\nplt.ylabel('Target')","d95ac89e":"plt.scatter(data[['age']], data.target, color='green', marker='+')\nplt.xlabel('age')\nplt.ylabel('Target')","cc37b343":"data.describe()","0da65bdc":"data.info()","1f157410":"data.isnull().sum()","96ae8b28":"data.corr()","0237260e":"X = data.drop('target', axis='columns')\ny = data.target","53e0deae":"X.shape","fb61fccb":"y.shape","d0cda81a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","79a094e4":"X_train.shape","43f9621b":"X_test.shape","9d94dcd3":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nimport matplotlib.pyplot as plt","b2d6f351":"model = Sequential()\n# add first hidden layer with input diamension\nmodel.add(Dense(units = 128, activation='relu', kernel_initializer = 'he_uniform', input_dim = 13))\n# add second hidden layer\nmodel.add(Dense(units = 16, activation='relu', kernel_initializer = 'he_uniform'))\n# add output layer\nmodel.add(Dense(units = 1, activation = 'sigmoid', kernel_initializer = 'glorot_uniform'))","2c012b32":"# now we compile the model\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n# train the model\nmodel.fit(X_train, y_train, batch_size = 128, epochs = 150, verbose = 1)","85df9dce":"acc = model.evaluate(X_test, y_test)","ac3b4e24":"model.summary()\n","feb2427a":"y_ann = model.predict(X_test)\ny_ann = y_ann > 0.5","899389cd":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_ann, y_test)\ncm","db7a92db":"## ANN model with keras"}}