{"cell_type":{"cfa4a5e5":"code","2efb5c85":"code","5bc107c2":"code","ad5aac1a":"code","559148f9":"code","71546301":"code","b31816f3":"code","f59be211":"code","82318fc9":"code","dc759ea0":"code","003fd669":"code","8fbd0e0c":"code","ac72b36c":"code","6d3ff7c4":"markdown","45403d20":"markdown","f1092285":"markdown","95f904d6":"markdown"},"source":{"cfa4a5e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2efb5c85":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf=pd.read_csv(\"\/kaggle\/input\/coronavirus-covid19-vaccinations\/data.csv\")\n#vaccine_info = pd.DataFrame(df)\ndf.head(5)","5bc107c2":"df.info()","ad5aac1a":"df.isnull().sum()\n#Fill all the NaN values with \"0\". And convert all the float and object data type to Integer.\ndf.fillna(value = 0, inplace = True)\n\n","559148f9":"df.head(5)","71546301":"#Droping the row # 0 which has usless string values.\ndf.drop(df.index[:1], inplace = True)\n","b31816f3":"df.head(5)","f59be211":"# Converting all the data types to integer values so we can perfrom some calculations.\ndf.total_vaccinations = df.total_vaccinations.astype(int)\ndf.people_vaccinated = df.people_vaccinated.astype(int)\ndf.people_fully_vaccinated = df.people_fully_vaccinated.astype(int)\ndf.daily_vaccinations_raw = df.daily_vaccinations_raw.astype(int)\ndf.daily_vaccinations = df.daily_vaccinations.astype(int)\ndf.total_vaccinations_per_hundred = df.total_vaccinations_per_hundred.astype(int)\ndf.people_vaccinated_per_hundred = df.people_vaccinated_per_hundred.astype(int)\ndf.people_fully_vaccinated_per_hundred = df.people_fully_vaccinated_per_hundred.astype(int)\ndf.daily_vaccinations_per_million = df.daily_vaccinations_per_million.astype(int)","82318fc9":"#Converting the data type of DATE from string to datetime and also splitting data, month and year into separate columns just incase needed for future reference.\ndate = df.date.str.split('-', expand = True)\ndate","dc759ea0":"#Creating different dataframes for year, month, and date.\ndf['year'] = date [0]\ndf['month'] = date [1]\ndf['day'] = date [2]\n#Converting the dataframe of year, month and day datatypes from string to integers\ndf.year = pd.to_numeric(df.year)\ndf.month = pd.to_numeric(df.month)\ndf.day = pd.to_numeric(df.day)\ndf.date = pd.to_datetime(df.date)\ndf.head()\n","003fd669":"#Let us find out out timeline for the data set\nprint(\"Data set collected from:\", df.date.min())\nprint(\"Data set collected till:\", df.date.max())\nprint(\"Total number of countries:\", len(df.location.unique()))","8fbd0e0c":"#Let's calculate total number of vaccinations that occured daily per country.# With help from Analytics Vidhya for code.\n#total_vaccinations_per_location = {}\n#for location in df.location.unique() :\n #   vaccinated = 0\n#for i in range(len(df)) :\n#        if df.location.all() == location:\n #           vaccinated += df.daily_vaccinations[i]\n  #          total_vaccinations_per_location[location] = vaccinated\n             \n            #except keyerror:\n            #    0\n            #    continue\n\n# created a separated dict from dataframe\n\n#total_vaccinations_per_location_df = pf.Dataframe.from_dict(total_vaccinations_per_location, orient='index', columns = ['total_vaccinations_till_date'])\n\n# Converted dict to dataframe\n#total_vaccinations_per_location_df.sort_values(by = 'total_vaccinations_till_date', ascending = False, inplace = True)\n#total_vaccinations_per_location_df","ac72b36c":"import plotly.express as px\ntotal_vaccinations_per_location = df[df['date'] == '2021-07-12'].groupby(['location','iso_code'])['daily_vaccinations'].sum().nlargest(10).reset_index\ntotal_vaccinations_per_location\n","6d3ff7c4":"The data set we have has a total of 32941 rows and 12 columns","45403d20":"# ****The Task: Name the country where maximum vaccination has taken place in a day","f1092285":"**Uploading the csv to the dataframe.**","95f904d6":"# Data set collected from: 2020-12-02 00:00:00\n# Data set collected till: 2021-07-12 00:00:00\n# Total number of countries: 230"}}