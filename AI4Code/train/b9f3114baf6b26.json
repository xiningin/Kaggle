{"cell_type":{"20d58ac3":"code","af3e313e":"code","70b76dcf":"code","def7b3ee":"code","abda3f7f":"code","fc4c15b9":"code","30cb8425":"code","ef3666cf":"code","d09fef8a":"code","28f116d7":"code","1a2c7ad4":"code","ed6604f1":"markdown","defc42a7":"markdown","6449f142":"markdown","8d3d619f":"markdown","4b11c185":"markdown","64722ec2":"markdown","8bfc62ee":"markdown","4845f271":"markdown","769f07c6":"markdown","97954eb1":"markdown","22096fe4":"markdown","9929eaa8":"markdown","7aa2b0ba":"markdown","407b382e":"markdown","1bdb5fcc":"markdown","994f92fe":"markdown","6556828e":"markdown","9a504d9d":"markdown"},"source":{"20d58ac3":"import tensorflow as tf\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","af3e313e":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf","70b76dcf":"x, y = df.iloc[:, 0:-1].values, df.iloc[:, -1].values.reshape((-1, 1))\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8)","def7b3ee":"scaler = MinMaxScaler().fit(x_train)\nx_train, x_test = scaler.transform(x_train), scaler.transform(x_test)","abda3f7f":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='bce', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=500, verbose=0)","fc4c15b9":"model.evaluate(x_test, y_test)","30cb8425":"class LogisticRegression:\n    EPS = 1e-5\n    def __ols_solve(self, x, y):\n        rows, cols = x.shape\n        if rows >= cols == tf.linalg.matrix_rank(x):\n            y = tf.math.maximum(self.EPS, tf.math.minimum(tf.cast(y, tf.float32), 1-self.EPS))\n            ols_y = -tf.math.log(tf.math.divide(1, y) - 1)\n            self.weights = tf.linalg.matmul(\n                tf.linalg.matmul(\n                    tf.linalg.inv(\n                        tf.linalg.matmul(x, x, transpose_a=True)\n                    ),\n                    x, transpose_b=True),\n                ols_y)\n        else:\n            print('Error! X has not full column rank.')\n    \n    def __sgd(self, x, y, loss_fn, learning_rate, iterations, batch_size):\n        rows, cols = x.shape\n        self.weights = tf.Variable(tf.random.normal(stddev=1.0\/cols, shape=(cols, 1)))\n        dataset = tf.data.Dataset.from_tensor_slices((x, y)).batch(batch_size)\n        \n        for i in range(iterations):\n            dataset.shuffle(buffer_size=1024)\n            for step, (xb, yb) in enumerate(dataset):\n                with tf.GradientTape() as tape:\n                    loss = loss_fn(xb, yb)\n                grads = tape.gradient(loss, self.weights)\n                self.weights.assign_sub(learning_rate*grads)\n    \n    def __sse_loss(self, xb, yb):\n        yb = tf.math.maximum(self.EPS, tf.math.minimum(tf.cast(yb, tf.float32), 1-self.EPS))\n        ols_yb = -tf.math.log(tf.math.divide(1, yb) - 1)\n        \n        diff = tf.linalg.matmul(xb, self.weights) - ols_yb\n        loss = tf.linalg.matmul(diff, diff, transpose_a=True)\n        \n        return loss\n    \n    def __mle_loss(self, xb, yb):\n        xw = tf.linalg.matmul(xb, self.weights)\n        term1 = tf.linalg.matmul(tf.cast(1-yb, tf.float32), xw, transpose_a=True)\n        term2 = tf.linalg.matmul(\n            tf.ones_like(yb, tf.float32),\n            tf.math.log(1+tf.math.exp(-xw)),\n            transpose_a=True)\n        return term1+term2\n    \n    def fit(self, x, y, method, learning_rate=0.001, iterations=500, batch_size=32):\n        x = tf.concat([x, tf.ones_like(y, dtype=tf.float32)], axis=1)\n        if method == \"ols_solve\":\n            self.__ols_solve(x, y)\n        elif method == \"ols_sgd\":\n            self.__sgd(x, y, self.__sse_loss, learning_rate, iterations, batch_size)\n        elif method == \"mle_sgd\":\n            self.__sgd(x, y, self.__mle_loss, learning_rate, iterations, batch_size)\n        else:\n            print(f'Unknown method: \\'{method}\\'')\n        \n        return self\n    \n    def predict(self, x):\n        if not hasattr(self, 'weights'):\n            print('Cannot predict. You should call the .fit() method first.')\n            return\n        \n        x = tf.concat([x, tf.ones((x.shape[0], 1), dtype=tf.float32)], axis=1)\n        \n        if x.shape[1] != self.weights.shape[0]:\n            print(f'Shapes do not match. {x.shape[1]} != {self.weights.shape[0]}')\n            return\n        \n        xw = tf.linalg.matmul(x, self.weights)\n        return tf.math.divide(1, 1+tf.math.exp(-xw))\n    \n    def accuracy(self, x, y):\n        y_hat = self.predict(x)\n        \n        if y.shape != y_hat.shape:\n            print('Error! Predictions don\\'t have the same shape as given y')\n            return\n        \n        zeros, ones = tf.zeros_like(y), tf.ones_like(y)\n        y = tf.where(y >= 0.5, ones, zeros)\n        y_hat = tf.where(y_hat >= 0.5, ones, zeros)\n        \n        return tf.math.reduce_mean(tf.cast(y == y_hat, tf.float32))","ef3666cf":"def print_acc(model):\n    print(f'Train accuracy = {model.accuracy(x_train, y_train)} ; '+\n          f'Test accuracy = {model.accuracy(x_test, y_test)}')","d09fef8a":"lr_ols_solve = LogisticRegression().fit(x_train, y_train, 'ols_solve')\nprint_acc(lr_ols_solve)","28f116d7":"lr_ols_sgd = LogisticRegression().fit(x_train, y_train, 'ols_sgd')\nprint_acc(lr_ols_sgd)","1a2c7ad4":"lr_mle_sgd = LogisticRegression().fit(x_train, y_train, 'mle_sgd')\nprint_acc(lr_mle_sgd)","ed6604f1":"## TL; DR\nIf you are here for a quick solution that just works, then here it is in just 5 lines of code:","defc42a7":"```python\nEPS = 1e-5\ndef __ols_solve(self, x, y):\n    rows, cols = x.shape\n    if rows >= cols == tf.linalg.matrix_rank(x):\n        y = tf.math.maximum(self.EPS,\n                            tf.math.minimum(tf.cast(y, tf.float32), 1-self.EPS))\n        ols_y = -tf.math.log(tf.math.divide(1, y) - 1)\n        self.weights = tf.linalg.matmul(\n            tf.linalg.matmul(\n                tf.linalg.inv(\n                    tf.linalg.matmul(x, x, transpose_a=True)\n                ),\n                x, transpose_b=True),\n            ols_y)\n    else:\n        print('Error! X has not full column rank.')\n```","6449f142":"So, when `fit()` is called with `method=\u2018ols_solve\u2019` we call `__ols_solve()`, when `method=\u2018ols_sgd\u2019` we call `__sgd()` with `loss_fn=self.__sse_loss`, and when `method=\u2019mle_sgd\u2019` we call `__sgd()` with `loss_fn=self.__mle_loss`.   \n```python\ndef fit(self, x, y, method, learning_rate=0.001, iterations=500, batch_size=32):\n    x = tf.concat([x, tf.ones_like(y, dtype=tf.float32)], axis=1)\n    if method == \"ols_solve\":\n        self.__ols_solve(x, y)\n    elif method == \"ols_sgd\":\n        self.__sgd(x, y, self.__sse_loss, learning_rate, iterations, batch_size)\n    elif method == \"mle_sgd\":\n        self.__sgd(x, y, self.__mle_loss, learning_rate, iterations, batch_size)\n    else:\n        print(f'Unknown method: \\'{method}\\'')\n\n    return self\n```","8d3d619f":"```python\ndef __sgd(self, x, y, loss_fn, learning_rate, iterations, batch_size):\n    rows, cols = x.shape\n    self.weights = tf.Variable(tf.random.normal(stddev=1.0\/cols, shape=(cols, 1)))\n    dataset = tf.data.Dataset.from_tensor_slices((x, y)).batch(batch_size)\n\n    for i in range(iterations):\n        dataset.shuffle(buffer_size=1024)\n        for step, (xb, yb) in enumerate(dataset):\n            with tf.GradientTape() as tape:\n                loss = loss_fn(xb, yb)\n            grads = tape.gradient(loss, self.weights)\n            self.weights.assign_sub(learning_rate*grads)\n```","4b11c185":"### Using 'ols_solve' method","64722ec2":"To understand better what we\u2019re going to do next, you can read [this article about logistic regression](https:\/\/towardsdatascience.com\/understanding-logistic-regression-81779525d5c6).  \nWhat's our plan for implementing Logistic Regression with TensorFlow?  \nLet's first think of the underlying math that we want to use.  \nThere are many ways to define a loss function and then find the optimal parameters for it, among them, here we will implement in our `LogisticRegression` class the following 3 ways for learning the parameters:\n- We will rewrite the logistic regression equation so that we turn it into a least-squares linear regression problem with different labels and then, we use the closed-form formula to find the weights: ![at text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/eq1.png)  \n- Like above, we turn logistic into least-squares linear regression, but instead of the closed-form formula, we use stochastic gradient descent (SGD) to minimize the following loss function: ![alt text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/eq4.png) which was obtained by substituting the y in the sum of squared errors loss ![alt text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/eq3.png) with the right-hand side of ![alt text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/eq2.png)  \n- We use the maximum likelihood estimation (MLE) method, write the likelihood function, play around with it, restate it as a minimization problem, and apply SGD with the following loss function: ![alt text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/eq5.png)","8bfc62ee":"Here is the full code of the `LogisticRegression` class:","4845f271":"In `accuracy()` we make predictions using the above method. Then check if the shape of the predictions matches that of the true labels, otherwise, we show an error message. After that we make sure that both predictions and the true labels have values of either 0 or 1 by a simple rule: if the value is >= 0.5 consider it a 1, otherwise a 0.   \nTo compute the accuracy, we check for equality between y and y_hat. This will return a vector of Boolean values. Then cast these Booleans to float (False becomes 0.0, and True becomes 1.0). Then, the accuracy is simply the mean of these values.   \n```python\ndef accuracy(self, x, y):\n    y_hat = self.predict(x)\n\n    if y.shape != y_hat.shape:\n        print('Error! Predictions don\\'t have the same shape as given y')\n        return\n\n    zeros, ones = tf.zeros_like(y), tf.ones_like(y)\n    y = tf.where(y >= 0.5, ones, zeros)\n    y_hat = tf.where(y_hat >= 0.5, ones, zeros)\n\n    return tf.math.reduce_mean(tf.cast(y == y_hat, tf.float32))\n```","769f07c6":"## The long way\nNow, if you\u2019re still with me it means that you don\u2019t want just to copy + paste 5 lines of code, but to see how you can actually implement this method yourself from scratch.  \nTensorFlow is a rich library; it has many APIs that you can use. Among them is the Keras API which can be used to build a logistic regression model very quickly, as you can see above. And there\u2019s nothing wrong with that. If you have to implement a complex deep learning model, that perhaps you saw in a new paper, Keras saves you a lot of time; it lets you focus on what\u2019s important and don\u2019t have to care about each math operation that has to be done.  \nBut, if your purpose is to learn a basic machine learning technique, like logistic regression, it is worth it using the core math functions from TensorFlow and implementing it from scratch.    \nKnowing TensorFlow\u2019s lower-level math APIs also can help you building a deep learning model when you need to implement a custom training loop, or a custom activation or loss function. It can also be more fun!  \nSo, let\u2019s get started!","97954eb1":"Now, let's evaluate our model:","22096fe4":"For the 2 SGD-based algorithms, it would be redundant to have them as 2 separate methods since they will have almost all the code the same except for the part where we compute the loss value, as we have 2 different loss functions for them.   \nWhat we\u2019ll do is to create a generic `__sgd()` method that does not rely on a particular loss function. Instead, it will expect as a parameter a function responsible for computing the loss value which the `__sgd()` method will use.   \nIn this method, we first initialize the weights to a random column vector with values drawn from a normal distribution with mean 0 and a standard deviation of 1\/(# of features). The intuition for this std dev is that if we have more features, then we need smaller weights to be able to converge (and not blow up our gradients). Then we go through all the dataset for `iterations` times. At the start of each such iteration, we randomly shuffle our dataset, then for each batch of data, we compute the loss value using the `loss_fn` function taken as a parameter, then use TensorFlow to take the gradient of this loss value with respect to (w.r.t.) `self.weights` and update the weights.   \nThe loss needs to be computed inside `with tf.GradientTape() as tape:` block. This is to tell TensorFlow to keep track of the operations applied so that it knows how to take the gradient.   \nThen, to take the gradient of the loss w.r.t. weights we use `grads = tape.gradient(loss, self.weights)`, and to subtract the gradient multiplied with the learning rate we use `self.weights.assign_sub(learning_rate*grads)`.","9929eaa8":"In the above equations, X is the input matrix that contains observations on the row axis and features on the column axis; y is a column vector that contains the classification labels (0 or 1); f is the sum of squared errors loss function; h is the loss function for the MLE method.   \nIf you want to find out more about how we obtained the above equations, please check out the above-linked article.   \nSo now, this is our goal: translate the above equations into code. And we\u2019ll use TensorFlow for that.   \nWe plan to use an object-oriented approach for implementation. We'll create a `LogisticRegression` class with 3 public methods: `fit()`, `predict()`, and `accuracy()`.   \nAmong fit's parameters, one will determine how our model learns. This parameter is named method (not to be confused with a method as a function of a class) and it can take the following strings as values: 'ols_solve' (OLS stands for Ordinary Least Squares), 'ols_sgd\u2019, and 'mle_sgd\u2019.   \nTo not make the `fit()` method too long, we would like to split the code into 3 different private methods, each one responsible for one way of finding the parameters.   \nWe will have the `__ols_solve()` private method for applying the closed-form formula.  \nIn this method and in the other methods that use the OLS approach, we will use the constant EPS to make sure the labels are not exactly 0 or 1, but something in between. That\u2019s to avoid getting plus or minus infinity for the logarithm in the equations above.   \nIn `__ols_solve()` we first check if X has full column rank so that we can apply this method. Then we force y to be between EPS and 1-EPS. The `ols_y` variable holds the labels of the ordinary least-squares linear regression problem that\u2019s equivalent to our logistic regression problem. Basically, we transform the labels that we have for logistic regression so that they are compliant with the linear regression equations. After that, we apply the closed-form formula using TensorFlow functions.   ","7aa2b0ba":"# How to Implement Logistic Regression with TensorFlow\n![alt text](https:\/\/raw.githubusercontent.com\/lazuxd\/logistic-regression-with-tensorflow\/main\/imgs\/lr.png)","407b382e":"Now we want to see how our `LogisticRegression` class performs on this heart disease dataset.","1bdb5fcc":"In `predict()` we first check if `fit()` was called previously by looking for the weights attribute (the fit method is the only method that creates it). Then we check if the shapes of the input matrix x and weights vector allow multiplication. Otherwise, return error messages. If everything is OK, we do the multiplication and pass the result through the logistic function.   \n```python\ndef predict(self, x):\n    if not hasattr(self, 'weights'):\n        print('Cannot predict. You should call the .fit() method first.')\n        return\n\n    x = tf.concat([x, tf.ones((x.shape[0], 1), dtype=tf.float32)], axis=1)\n\n    if x.shape[1] != self.weights.shape[0]:\n        print(f'Shapes do not match. {x.shape[1]} != {self.weights.shape[0]}')\n        return\n\n    xw = tf.linalg.matmul(x, self.weights)\n    return tf.math.divide(1, 1+tf.math.exp(-xw))\n```","994f92fe":"For \u2018ols_sgd\u2019 and \u2018mle_sgd\u2019 we\u2019ll create 2 private methods: `__sse_loss()` and `__mle_loss()` that compute and return the loss value for these 2 different techniques.   \nFor these 2 methods, we simply apply the formulas for f and h using TensorFlow\u2019s math functions.   \n```python\ndef __sse_loss(self, xb, yb):\n    yb = tf.math.maximum(self.EPS, tf.math.minimum(tf.cast(yb, tf.float32), 1-self.EPS))\n    ols_yb = -tf.math.log(tf.math.divide(1, yb) - 1)\n\n    diff = tf.linalg.matmul(xb, self.weights) - ols_yb\n    loss = tf.linalg.matmul(diff, diff, transpose_a=True)\n\n    return loss\n\ndef __mle_loss(self, xb, yb):\n    xw = tf.linalg.matmul(xb, self.weights)\n    term1 = tf.linalg.matmul(tf.cast(1-yb, tf.float32), xw, transpose_a=True)\n    term2 = tf.linalg.matmul(\n        tf.ones_like(yb, tf.float32),\n        tf.math.log(1+tf.math.exp(-xw)),\n        transpose_a=True)\n    return term1+term2\n```","6556828e":"### Using 'ols_sgd' method","9a504d9d":"### Using 'mle_sgd' method"}}