{"cell_type":{"6a22c213":"code","4fbb5bf0":"code","1d67aad9":"code","67d4dc0f":"code","70a6a21a":"code","eda0fd7b":"code","8d3c2ef5":"code","4f504b03":"code","32924157":"code","9c91e8aa":"code","da1f38d1":"code","8eaaa87f":"code","e0a16668":"code","e60c855b":"code","b4186aff":"code","3a630a43":"code","da5bcec7":"code","f62cf179":"code","d647312b":"code","ad8a5fde":"code","2e2e039e":"code","79fc01ed":"code","69406e49":"code","5c2060fe":"code","743c3861":"code","b6687632":"code","f51e9505":"code","2ca455fc":"code","6ca2e333":"code","8825c793":"code","cc271a91":"code","f578827f":"code","68a9b7d3":"code","0b22357a":"code","442e1e09":"code","ec604e59":"code","bef2d6fc":"code","cf0563b8":"code","2ebf46d6":"code","014de87a":"code","c77c18f2":"code","a64e6683":"code","600f641a":"code","b9954e42":"code","d47ca65b":"code","731aa596":"code","dde814b8":"code","d5bca131":"code","80fa7bbd":"code","e92e876f":"code","031b9549":"code","77bb1565":"code","6be30c6e":"code","9750027b":"code","94059911":"code","d2b3e27a":"code","d96c678d":"code","674c1aea":"code","97b2f9b9":"code","2320a49d":"code","b083ae8e":"code","593ccdd9":"code","f2445d42":"code","4e21611d":"code","6ab32b99":"code","9b161db4":"code","4b57bdee":"code","3483352c":"code","b2895490":"code","fa12c5e5":"code","c55fc8e5":"markdown"},"source":{"6a22c213":"# 1. abs() - This function returns the absolute value of a number.\n# syntax = abs(number)\ninp = -10\ny = abs(int(inp))\nprint(\"The absolute value of\", inp, \"is\", y)","4fbb5bf0":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 1\nL1 = [0,1,1]\nx= all(L1) # Here the given list has 0 which is false. Since there is one false, output is false.\nprint(x)","1d67aad9":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 2\ntup1 = (1,1,1)\nx=all(tup1) # Here for the given tuple has all 1's which are true. Hence output is True.\nprint(x)","67d4dc0f":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 3\nset1 = {True,False,True}\nx= all(set1) # Here for the given set, one element is false. Hence output is false\nprint(x)","70a6a21a":"#2. all() - This function returns true if all items in an iterable object are true\n# syntax = all(iterable)\n# Example 4\ndict1 = {0:\"Apple\",1:\"Orange\"}\nx=all(dict1) # Here in the given dictionary, the first key is 0 which is false. Hence the output is false.\nprint(x)","eda0fd7b":"#3. any() - This function returns true if any item in an iterable object is true\n# syntax = any(iterable)\nL1 = [0,0,1]\nx = any(L1)\nprint(x)","8d3c2ef5":"#4. ascii() - This function returns a readable version of any object (Lists, Tuples,strings etc.). All non ascii characters will be replaced by \\xe5.\n# You can refer the list of non-ascii characters from the link https:\/\/terpconnect.umd.edu\/~zben\/Web\/CharSet\/htmlchars.html\n# syntax = ascii(object)\nx = \"My n\u00e5me is R\u00e5vitej\u00e5\" # Here \u00e5 is the non ascii character.\ny = ascii(x)\nprint(y)","4f504b03":"#5. bin() - This function returns the binary version of a number. The output has always prefix of \"0b\".\n# syntax = bin(number)\nx = bin(24) \nprint(x)","32924157":"#6. bool() - This function returns the boolean value of the specified object. \n# This function returns false for objects like [],{},(), False, 0, None. For other values the function returns true.\n# syntax = bool(object)\nx = bool(\"Ravi\")\nprint(x)","9c91e8aa":"#7. bytearray() - This function returns an array of bytes.\n# The output always has prefix of b. Output will be in an array.\n# syntax = bytearray(x,encoding,error). If x is an integer,an empty bytearray object of specified size will be created. If it is a string, we need to specify the encoding of source.\nx = bytearray(5)\nprint(x)","da1f38d1":"#8. bytes() - This function returns a bytes object.\n# The output always has prefix of b.\n# syntax = bytes(x,encoding,error). If x is an integer,an empty bytearray object of specified size will be created. If it is a string, we need to specify the encoding of source.\nx = bytes(4)\nprint(x)","8eaaa87f":"#9. callable() - This function returns True if it is callable else false.\n# syntax = callable(object)\n# Example 1\ndef x():\n    i = 5\nprint(callable(x))","e0a16668":"#9. callable() - This function returns True if it is callable else false.\n# syntax = callable(object)\n# Example 2\ni = 5\nprint(callable(i))","e60c855b":"#10. chr() - This function returs a character from the specified unicode code.\n# Unicode characters table can be referred from the link https:\/\/www.rapidtables.com\/code\/text\/unicode-characters.html\n# syntax = chr(number)\nx = chr(98)\nprint(x)","b4186aff":"#11. classmethod() - This function converts a method into class method.\n# syntax = classmethod(function)\nclass Person:\n    age = 25\n    def printAge(cls):\n        print('The age is:', cls.age)\n\n# create printAge class method\nPerson.printAge = classmethod(Person.printAge)\nPerson.printAge()","3a630a43":"#12. compile() - This function returns the specified source as an object and ready to be executed.\n# Its format is compile(source,filename, mode, flag, dont_inherit, optimize). Flag, dont_inherit and optimize are optional.\n# Legal values of mode are : eval - if the source is single expression ; exec - if the source is a block of statements; single - if the source is a single interactive statement.\n# syntax = compile(source,filename,mode)\n# Example 1\nx = compile(\"print(5)\", \"test\",\"eval\")\nexec(x)","da5bcec7":"#12. compile() - This function returns the specified source as an object and ready to be executed.\n# Its format is compile(source,filename, mode, flag, dont_inherit, optimize). Flag, dont_inherit and optimize are optional.\n# Legal values of mode are : eval - if the source is single expression ; exec - if the source is a block of statements; single - if the source is a single interactive statement.\n# syntax = compile(source,filename,mode)\n# Example 2\nx = compile(\"print(5)\\nprint(9)\",\"test\",\"exec\")\nexec(x)","f62cf179":"#13. complex() - This functions returns a complex number\n# Here j is the imaginary part indicator.\n# syntax = comple(real,imaginary)\nx = complex(2,4)\nprint(x)","d647312b":"#14. delattr() - This function deletes the specified attribute (property or method) from the specified object.\n# syntax = delattr(object,attribute)\nclass Person: # Creating a class\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\ndelattr(Person,\"age\") # Removing age attribute from the class Person.","ad8a5fde":"#15. dict() - This function returns a dictionary (Array)\n# dict() function creates a dictionary.\n# syntax = dict(Key word arguments)\nx = dict(Name = \"Ravi\", Age = 25, Country = \"India\")\nprint(x)","2e2e039e":"#16. dir() - This function returns a list of specified object's properties and methods without the values.\n# syntax = dir(object)\nclass Person:\n  name = \"Ravi\"\n  age = 25\n  country = \"India\"\nprint(dir(Person))","79fc01ed":"#17. divmod() - This function returns the quotient and remainder when argument 1 is divided by argument 2.\n# syntax = divmod(dividend,divisor)\na = 32\nb = 5\ndivmod(int(a),int(b))","69406e49":"#18. enumerate() - This function converts the tuple into enumerate object i.e. complete ordered listing of all the items in the collection.\n# Here numbering starts from 0.\n# syntax = enumerate(iterable,start)\nx = (\"Ravi\",\"teja\",\"Raviteja\")\ny = enumerate(x)\nprint(list(y))","5c2060fe":"#19. eval() - This function evaluates the specified expression and if it is a legal python statement, it will be executed.\n# The initial parameter must be a string.\n# syntax = eval(expression)\nx = \"print(55)\"\neval(x)","743c3861":"#20. exec() - This function executes a specified python code.\n# syntax = exec(object)\nx = 'name = \"Ravi\"\\nprint(name)'\nexec(x)","b6687632":"#21. filter() - This function is used to filter items in an iterable object.\n# syntax = filter(function, array)\nage = [12,14,32,18,6,45]\ndef adult(x): # Defining a function named adult which gives true if age is greater than or equal to 18 and false if age is less than 18.\n    if x < 18:\n        return False\n    else:\n        return True\nadults = filter(adult,age)\nfor x in adults: # This will print the age which is greater than or equal to 18.\n    print(x)","f51e9505":"#22. float() - This function converts the value into floating point number.\n# syntax = float(value)\ninp = 5\nx = float(inp) # The input will be stored in form of string. This function will convert it from string to float.\nprint(x)","2ca455fc":"#23 format() - This function converts the given value into a specified format.\n# syntax = format(value,format)\nx = format(0.15,\"%\") # Converting the number into % format.\nprint(x)","6ca2e333":"#24. frozenset() - This function returns an unchangeable frozen set.\n# syntax = frozenset(iterable object)\n# If we try to change the value of frozenset item, it will show error.\nx = [\"Ravi\", \"teja\", \"Krishna\"]\ny = frozenset(x)\nprint(y)","8825c793":"#25. getattr() - This function returns the value of specified attribute.\n# syntax = getattr(object,attribute)\nclass Student:\n    Name = \"Ravi\"\n    Age = 25\n    Country = \"India\"\nx = getattr(Student,\"Age\") # Returns the value of attribute age.\nprint(x)\n","cc271a91":"#26. globals() - This function returns the global symbol table as a dictionary.\n#syntax = globals()\nx = globals()\nprint(x)","f578827f":"#27. hasattr() - This function returns true if the specified object has specified attribute.\n# syntax = hasattr(object,attribute)\nclass Student:\n    Name = \"Ravi\"\n    Age = 25\n    Country = \"India\"\nx = hasattr(Student,\"Age\") # Since age attribute is present in the object Student. Hence this returns true.\nprint(x)","68a9b7d3":"#28. hash() - This function returns the hash value of the specified object.\n# syntax = hash(object)\nx = hash(\"Ravi\")\nprint(x)","0b22357a":"#29. help() - This function is used to display the documentation of modules, functions, classes, keywords etc.\n# syntax = help(object)\nx = help(print)\nprint(x)","442e1e09":"#30. hex() - This function converts a value into hexadecimal value\n# syntax = hex(number)\nx = hex(27)\nprint(x)","ec604e59":"#31. id() - This function returns the unique id of the object. Id will be different for the same program executing multiple times.\n# syntax = id(object)\nx = [20,22,46]\ny = id(x)\nprint(y)","bef2d6fc":"#32. input() - This function allows user input.\n# syntax = input(prompt)\ninp = \"Ravi\"\nprint(\"Hello,\", inp)","cf0563b8":"#33. int() - This function converts the given number into integer. The input is always stored as string.\n# syntax = int(object)\ninp = 8\nx = int(inp)\nprint(x)","2ebf46d6":"#34. isinstance() - This function returns true if the specified object is of specified type.\n# syntax = isinstance(object,type)\nx = isinstance(\"Ravi\", str) # Ravi is a string. Hence the output is true.\nprint(x)","014de87a":"#35. issubclass() - This function returns true if the specified object is the subclass of the specified object.\n# syntax = issubclass(object,subclass)\nclass MyAge:\n    age = 25\nclass Student(MyAge): #MyAge is the subclass of Student. Hence output is True.\n    name = \"Ravi\"\n    age = MyAge\nx = issubclass(Student,MyAge)\nprint(x)\n    ","c77c18f2":"#36. iter() - This function returns an iterator object.\n# syntax = iter(object)\nx = iter([\"Mango\",\"Banana\",\"Apple\"])\nprint(next(x)) # This will print first item in the list\nprint(next(x)) # This will print second item in the list\nprint(next(x)) # This will print third item in the list","a64e6683":"#37. len() - This function returns the length of the object.\n# syntax = len(object)\nL1 = [2,4,55,31,9]\nlen(L1)","600f641a":"#38. list() - This function creates a list object.\n# syntax = list(iterable)\nx = (\"Ravi\",\"Teja\",\"Raviteja\")\ny = list(x)\nprint(y)","b9954e42":"#39. locals() - This function returns the local symbol table as dictionary.\n# syntax = locals()\nx = locals()\nprint(x)","d47ca65b":"#40. map() - This function executes a specified function for each item in an iterable.\n#syntax = map(function,iterables)\ndef length(n):\n    return len(n)\ny = map(length,(\"Apple\",\"banana\",\"orange\")) # \nprint(list(y))","731aa596":"#41. max() - This function returns the largest item in an iterable.\n# syntax = max(x1,x2,x3,...)\nx = max(45,48)\nprint(x)","dde814b8":"#42. memoryview() - This function returns memory view object from a specified object.\n#syntax = memoryview(object)\nx = memoryview(b\"Hello\")\nprint(x)\nprint(x[0]) #return the Unicode of the first character\nprint(x[1])#return the Unicode of the second character","d5bca131":"#43. min() - This function returns the smallest item in an iterable.\n# syntax = min(n1,n2,n3,...)\nx = min(10,20)\nprint(x)","80fa7bbd":"#44. next() - This function returns the next item in an iterable.\n# syntax = next(iterable)\nL1 = iter([\"Mango\",\"Apple\",\"Banana\"]) #Creating iterable\nx = next(L1)\nprint(x)\nx = next(L1)\nprint(x)\nx = next(L1)\nprint(x)","e92e876f":"#45. object() - This function returns a new empty object.\n# syntax = object()\nx = object()","031b9549":"#46. oct() - This function converts a number into an octal value\n# syntax = oct(int)\nx = 12\ny = oct(x)\nprint(y)","77bb1565":"#48. ord() - This function returns the number representing the unicode of a specified character.\n# syntax = ord(character)\nx = ord(\"h\")\nprint(x)","6be30c6e":"#49. pow() - This function returns the value of x to the power of y (x^y)\n#syntax = pow(x,y)\nx = pow(2,3)\nprint(x)","9750027b":"#50. print() - This function prints the message to the screen.\n# syntax = print(objects)\nprint(\"Hello World\")","94059911":"#52. range() - This function returns sequence of numbers starting with 0 and increments by 1 and stops before a specified number.\n# syntax = range(stop)\n# Bydefault it starts with 0 and ends with (stop value-1).\nx = range(8)\nfor y in x:\n    print(y,end=\" \")","d2b3e27a":"#53. repr() - This function returns a printable representation of the given object.\n# syntax = repr(object)\nx = \"Ravi\"\ny = repr(x)\nprint(y)","d96c678d":"#54. reversed() - This function returns a reversed iterator object.\n# syntax = reversed(object)\nx = [\"Apple\",\"Mango\",\"Banana\"]\ny = reversed(x)\nfor z in y:\n    print(z,end=\" \")","674c1aea":"#55. round() - This function returns a floating point number which is rounded to the specific number of decimals.\n# syntax = round(number,digits)\nx = 4.28567\ny = round(x,2) # Here x is rounded to 2 decimals. \nprint(y)","97b2f9b9":"#56. set() - This function creates a set object.\n# syntax = set(iterable)\nx = set((\"Apple\",\"Banana\",\"Orange\"))\nprint(x)","2320a49d":"#57. setattr() - This function sets the value of specified attribute of the specified object.\n# syntax = setattr(object,attribute,value)\nclass Student:\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\nsetattr(Student,\"age\",35) # This will set the age from 25 to 35.\nx = getattr(Student,\"age\") # This will return the set value.\nprint(x)","b083ae8e":"#58. slice() - This function is used to specify how to slice a sequence. We can specify start,end of the slice.\n#syntax = slice(start,end,step)\n# Start and step are optional. By default start is 0 and step is 1.\nx = (\"a\",\"b\",\"c\",\"d\",\"e\",\"f\")\ny = slice(2,5,1)\nprint(x[y])","593ccdd9":"#59. sorted() - This function returns a sorted list of specified iterable object.\n# syntax = sorted(iterable)\nx = (5,3,6,8,4,2)\ny = sorted(x)\nprint(y)","f2445d42":"#60. staticmethod() - This function returns a static method for teh function.\n# syntax = staticmethod(function)\nclass Mathematics:\n    def addNumbers(x, y):\n        return x + y\n\n# create addNumbers static method\nMathematics.addNumbers = staticmethod(Mathematics.addNumbers)\n\nprint('The sum is:', Mathematics.addNumbers(5, 10))","4e21611d":"#61. str() - This function converts a specified value to string.\n# syntax = str(object)\nx = str(5) # Converted type from int to str.\nprint(x)\ntype(x)","6ab32b99":"#62. sum() - This function returns the sum of all items in an iterable.\n# syntax = sum(iterable)\nx = (1,2,3,4,5)\ny = sum(x)\nprint(y)","9b161db4":"#63. super() - This function returns an object that will reflect the parent class.\n# syntax = super()\nclass Parent:\n  def __init__(self, txt):\n    self.message = txt\n\n  def printmessage(self):\n    print(self.message)\n\nclass Child(Parent):\n  def __init__(self, txt):\n    super().__init__(txt)\n\nx = Child(\"Hello, and welcome!\")\n\nx.printmessage()","4b57bdee":"#64. tuple() - This function creates a tuple object.\n# syntax = tuple(iterable)\nx = (\"Apple\",\"Banana\",\"Orange\")\ny = tuple(x)\nprint(y)","3483352c":"#65. type() - This function will return the type of specified object.\n# syntax = type(object)\nx = \"ravi\"\ntype(x)","b2895490":"#66. vars() - This function returns the dict attribute of the object.\n# syntax = vars(object)\nclass Student:\n    name = \"Ravi\"\n    age = 25\n    country = \"India\"\nx = vars(Student)\nprint(x)","fa12c5e5":"#67. zip() - This function returns a zip object which is an iterator of tuples. \n# If the passed iterators have different lengths, the iterator with least items decide the length of new iterator.\n# syntax = zip(iterator 1, iterator 2, iterator 3,...)\na = (\"Ravi\", \"sagar\", \"rama\")\nb = (\"Teja\", \"sachin\", \"Krishna\", \"Venky\")\nx = zip(a,b)\nprint(tuple(x)) # In output, Venky is neglected since a has length 3 and b has length 4.","c55fc8e5":"**Notebook - 1 : Built In functions of Python for beginners**\nThis notebook consists of Built in functions in Python along with syntax and example which is very useful to beginners. "}}