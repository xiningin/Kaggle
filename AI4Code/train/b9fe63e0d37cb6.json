{"cell_type":{"b5eadbba":"code","e25cb864":"code","2f59480c":"code","a82251ee":"code","afa4be44":"code","bcd396ff":"code","8add84fc":"code","e4188999":"code","7a609472":"code","6a194755":"code","691c1c1e":"code","250bb1ca":"code","5439e1c4":"code","fa0fe149":"code","0d98333a":"code","d49f3ded":"code","2fc930b9":"code","3a921b6c":"code","8a893ac1":"code","59ff93b2":"code","7239fc1c":"code","2a9c0096":"code","c868042f":"code","a5af6926":"code","e73e5a08":"markdown","84f02dc6":"markdown","3e50573f":"markdown"},"source":{"b5eadbba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e25cb864":"df = pd.read_csv('..\/input\/house-price-prediction-challenge\/train.csv')\ndf","2f59480c":"df.info()","a82251ee":"df.isna().sum()","afa4be44":"df['BHK_OR_RK'].value_counts()","bcd396ff":"df['POSTED_BY'].value_counts()","8add84fc":"df['ADDRESS'] = df['ADDRESS'].str.split(',').apply(lambda x: x[-1])\ndf","e4188999":"df['ADDRESS'].value_counts()","7a609472":"tier_1 = [\"Ahmedabad\", \"Bengaluru\", \"Chennai\", \"Delhi\", \"Hyderabad\", \"Kolkata\", \"Mumbai\", \"Pune\"]\ntier_2 = [\"Agra\", \"Ajmer\", \"Aligarh\", \"Amravati\", \"Amritsar\", \"Asansol\", \"Aurangabad\", \"Bareilly\", \n          \"Belgaum\", \"Bhavnagar\", \"Bhiwandi\", \"Bhopal\", \"Bhubaneswar\",\"Bikaner\", \"Bilaspur\", \n          \"Bokaro Steel City\",\"Chandigarh\", \"Coimbatore\", \"Cuttack\",\" Dehradun\",\"Dhanbad\", \"Bhilai\",\n          \"Durgapur\", \"Erode\", \"Faridabad\", \"Firozabad\", \"Ghaziabad\",\"Gorakhpur\", \"Gulbarga\", \"Guntur\", \n          \"Gwalior\", \"Gurugram\", \"Guwahati\", \"Hamirpur\", \"Hubli\u2013Dharwad\", \"Indore\", \"Jabalpur\", \"Jaipur\", \n          \"Jalandhar\", \"Jalgaon\", \"Jammu\", \"Jamnagar\", \"Jamshedpur\", \"Jhansi\", \"Jodhpur\",\"Navi Mumbai\" ,\n          \"Kakinada\", \"Kannur\",\" Kanpur\", \"Karnal\", \"Kochi\",\" Kolhapur\", \"Kollam\", \"Kozhikode\", \"Kurnool\", \n          \"Ludhiana\",\"Lucknow\",\"Madurai\", \"Malappuram\",\" Mathura\", \"Mangalore\", \"Meerut\", \"Moradabad\", \n          \"Mysore\", \"Nagpur\",\" Nanded\",\" Nashik\", \"Nellore\",\"Navi Mumbai\",\"Noid\", \"Patna\", \"Puducherry\", \n          \"Purulia\", \"Prayagraj\", \"Raipur\",\"Rajkot\", \"Rajamahendravaram\",\" Ranchi\", \"Rourkela\", \"Ratlam\", \n          \"Salem\", \"Sangli\", \"Shimla\", \"Siliguri\",\" Solapur\", \"Srinagar\", \"Surat\", \"Thanjavur\", \n          \"Thiruvananthapuram\", \"Thrissur\", \"Tiruchirappalli\", \"Tirunelveli\", \"Tiruvannamalai\", \"Ujjain\", \n          \"Vijayapura\", \"Vadodara\", \"Varanasi\", \"Vasai-Virar City\", \"Vijayawada\", \"Visakhapatnam\", \n          \"Vellore\", \"Warangal\"]","6a194755":"def map_city(city):\n    if city in tier_1:\n        return 0\n    elif city in tier_2:\n        return 1\n    else:\n        return 2\n\ndf['CITY_TIER'] = df['ADDRESS'].apply(map_city)\ndf","691c1c1e":"import folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","250bb1ca":"map = folium.Map(location=[22.00,78.00], tiles='cartodbpositron', zoom_start=6)\n\n\nfor i in range(0,len(df)):\n    Circle(\n        location=[df.iloc[i]['LONGITUDE'], df.iloc[i]['LATITUDE']],\n        radius=100,\n        color='orange').add_to(map)\n\nmap","5439e1c4":"corr_data = df.corr()\ncorr_data[\"TARGET(PRICE_IN_LACS)\"].sort_values(ascending=False)","fa0fe149":"#from pandas.plotting import scatter_matrix\n\n#attributes = [\"TARGET(PRICE_IN_LACS)\", \"SQUARE_FT\", \"BHK_NO.\", \"CITY_TIER\"]\n#scatter_matrix(df[attributes], figsize=(15, 8))","0d98333a":"from sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler,Normalizer\ndef label_encoder(df, column_name):\n    label_encoder = preprocessing.LabelEncoder()\n\n    df[column_name]= label_encoder.fit_transform(df[column_name])\n    print(column_name)\n    for i in range(len(df[column_name].unique())):\n        print(\"For {} : {}\".format(i, label_encoder.inverse_transform([i])))\n    print('-'*10)\n    print(df[column_name].value_counts())\n    print('-'*10)\n    \n    return df[column_name], label_encoder","d49f3ded":"df['POSTED_BY'], label_encoder_posted_by = label_encoder(df, 'POSTED_BY')\ndf['BHK_OR_RK'], label_encoder_posted_by = label_encoder(df, 'BHK_OR_RK')\ndf['ADDRESS'], label_encoder_posted_by = label_encoder(df, 'ADDRESS')","2fc930b9":"X = df[['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK',\n       'SQUARE_FT', 'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE',\n       'LATITUDE']]\nY = df[['TARGET(PRICE_IN_LACS)']]","3a921b6c":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor().fit(X,Y)\nprint(dtr.score(X, Y))","8a893ac1":"test_data = pd.read_csv('..\/input\/house-price-prediction-challenge\/test.csv')","59ff93b2":"test_data['POSTED_BY'], label_encoder_posted_by = label_encoder(test_data, 'POSTED_BY')\ntest_data['BHK_OR_RK'], label_encoder_posted_by = label_encoder(test_data, 'BHK_OR_RK')\ntest_data['ADDRESS'], label_encoder_posted_by = label_encoder(test_data, 'ADDRESS')","7239fc1c":"X_test = test_data[['POSTED_BY', 'UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK',\n       'SQUARE_FT', 'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE',\n       'LATITUDE']]\nY_test = pd.read_csv('..\/input\/house-price-prediction-challenge\/sample_submission.csv')","2a9c0096":"prediction = dtr.predict(X_test)","c868042f":"from sklearn.metrics import mean_squared_error\nprint(mean_squared_error(Y_test,prediction))","a5af6926":"pd.DataFrame(prediction).to_csv('submission.csv')","e73e5a08":"**FINDING CORRELATION BETWEEN ATTRIBUTES OF THE DATA**","84f02dc6":"**PREPARING AND TRAINING THE MODEL**","3e50573f":"**TESTING THE MODEL**"}}