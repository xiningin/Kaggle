{"cell_type":{"021332ce":"code","8766a69b":"code","effbf0f3":"code","3cadaa96":"code","26b0c835":"code","de203bf1":"code","5cc04b76":"code","98d7aa40":"code","e69ec127":"code","ac7e30d1":"code","3e204b17":"code","7a8ee8a5":"markdown","90209227":"markdown","922803c0":"markdown","54f7b6de":"markdown","1a09d84f":"markdown"},"source":{"021332ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8766a69b":"import pandas as pd\nimport sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import euclidean_distances\nfrom sklearn.feature_extraction.text import TfidfVectorizer","effbf0f3":"data = pd.read_csv('..\/input\/datapembobotan\/dataset_gass.csv')\ndata","3cadaa96":"vectorizer = CountVectorizer()\nvectorized_x = vectorizer.fit_transform(data['Documents']).todense()\nvectorized_x","26b0c835":"vectorizer.get_feature_names()","de203bf1":"data = pd.DataFrame(vectorized_x,\n                   index = [f'Teks-{i+1}' for i in range(len(data['Documents']))],\n                   columns = vectorizer.get_feature_names())\n\ndata","5cc04b76":"for i in range(len(vectorized_x)):\n    for j in range(i,len(vectorized_x)):\n        if i == j:\n            continue\n            jarak = euclidean_distances(vectorized_x[i],vectorized_x[j])\n            print(f'Jarak Teks {i+1} dan {j+1} : {jarak}')","98d7aa40":"vectorizer = TfidfVectorizer(stop_words='english')\nresponse = vectorizer.fit_transform(data)\nprint(response)","e69ec127":"vectorizer.get_feature_names()","ac7e30d1":"response.todense()","3e204b17":"Data = pd.DataFrame(response.todense().T,\n                   index = vectorizer.get_feature_names(),\n                   columns = [f'Teks{i+1}' for i in range(len(data))])\n\nData","7a8ee8a5":"> **Dataset Yang digunakan**","90209227":"# Model Bag Of Words (BoW)","922803c0":"> **Library Yang Digunakan**","54f7b6de":"# Term Frequency - Invers Document Frequency (Tf-Idf)","1a09d84f":"# SEKIAN"}}