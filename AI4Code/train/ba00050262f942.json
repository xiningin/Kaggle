{"cell_type":{"dbd4d6d1":"code","c05422a2":"code","c17c4434":"code","f52bf944":"code","0a1c558f":"code","f76d3ffe":"code","0f98e429":"code","884b12fb":"code","712621a1":"code","82162f6b":"code","160cc162":"code","0ae58a16":"code","c859a8b8":"code","1ef291be":"code","f3db1a68":"code","cc9617ca":"code","be33c687":"code","8283605e":"code","530dd619":"code","d2259415":"code","9fe9546e":"code","48c7ec0d":"code","47c40e96":"code","8a144412":"code","6b8ab384":"code","40b44dca":"code","ce5468d5":"code","7daf8e9b":"code","72b67cc7":"code","2b1626ae":"code","9474f2bd":"code","6e3b230c":"code","63d662ed":"code","388041e8":"code","503cda12":"code","429a0b92":"code","f573161f":"code","2c6bc03f":"code","9991398c":"code","242d01a9":"code","8fade1d6":"code","2f3d93b3":"code","bbb6eb2f":"code","908ab285":"code","5dc61589":"code","1aa1d619":"code","eb79edcb":"code","2601bff8":"code","cd00ff3f":"code","7adceeb2":"code","e8ad3ee0":"code","f330b2bf":"code","335e1fe2":"code","46ed5e16":"code","94751b3c":"code","e7625b71":"code","118b33b7":"code","c1916af5":"code","1dd6935c":"code","0d923fa0":"code","5b73b5a9":"code","aba21bc0":"code","e4b29fe9":"code","4be99234":"code","7d755da2":"code","25ade91f":"code","1152fe09":"code","2900592f":"code","828c9c71":"code","13993055":"code","2e27549d":"code","39e1a941":"code","89923505":"code","b7ee0e32":"code","f814fd10":"code","0a52c030":"code","5b3c8508":"code","11a613c0":"code","080ef442":"code","e7aa4d0c":"code","653c756a":"code","1d2fd902":"code","e160e015":"code","a9f461b1":"code","91caf14e":"code","1b04f09d":"code","219c4289":"code","c7ab88d1":"code","12cd7b21":"code","a3f02494":"code","5ec35e8e":"code","3f9aef6d":"code","3d5f3b2a":"code","7814d6a0":"code","03dd298c":"code","d20ef7b3":"code","22f9ffd7":"code","4729cdaf":"code","29e0402a":"code","1c652a10":"markdown","f9342504":"markdown","3d1b6c63":"markdown","d0578126":"markdown","5ecfdc6d":"markdown","43414c78":"markdown","f92a8386":"markdown","b941a6a8":"markdown","fa47e1fd":"markdown","7bcad1a9":"markdown","30390689":"markdown","393240f9":"markdown","63a03429":"markdown","79a19f81":"markdown","a7dac88c":"markdown","6d99ab02":"markdown","4a3338b3":"markdown","46f96261":"markdown","2908df1f":"markdown","3f3a666d":"markdown","52540a63":"markdown","db00a0bc":"markdown","9db56a30":"markdown","5754070b":"markdown","f235252e":"markdown","6a130ef5":"markdown","ecae60f1":"markdown","f0611bc3":"markdown","e2667b6c":"markdown","16a67a3b":"markdown","a3d0be96":"markdown","b7e11886":"markdown","d9c8dfc6":"markdown","24aacdeb":"markdown","1bec1c17":"markdown","5fb6a633":"markdown","76913227":"markdown","178907e1":"markdown","a77dcd7b":"markdown","56a9d900":"markdown","9e18a011":"markdown","616e563e":"markdown","057c72ba":"markdown","c1c30a72":"markdown","3200dc42":"markdown","c38b0bca":"markdown","2b7f8734":"markdown","64fe96c6":"markdown","59595ed7":"markdown","818f8473":"markdown","56a4d187":"markdown","dfe63186":"markdown","2e0f2b3d":"markdown","bd9f3c29":"markdown","3037abe6":"markdown","189fd205":"markdown","257013cb":"markdown","f6878155":"markdown","04142ad8":"markdown","d8f27e68":"markdown","fe05bdc4":"markdown","11132e90":"markdown","8ccc465a":"markdown","dd669df6":"markdown","0db6bf71":"markdown","c270783b":"markdown","e674851e":"markdown","e7e3faf6":"markdown","091ecf53":"markdown","dab3bbb5":"markdown","bf51f8d2":"markdown","41abd642":"markdown"},"source":{"dbd4d6d1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport os\n\nfrom pandas.plotting import scatter_matrix\n\nfrom sklearn import tree\nfrom sklearn import model_selection, feature_selection\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, recall_score\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c05422a2":"def substrings_in_string(big_string, substrings):\n    for substring in substrings:\n        if big_string.find(substring) != -1:\n            return substring\n    print(big_string)\n    return np.nan","c17c4434":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndft = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndatas=[df,dft]","f52bf944":"df.head(2)","0a1c558f":"print(\"\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Train {} \u0441\u0442\u0440\u043e\u043a \u0438 {} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\".format(df.shape[0],df.shape[1]))\nprint(\"\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Test {} \u0441\u0442\u0440\u043e\u043a \u0438 {} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\".format(dft.shape[0],dft.shape[1]))","f76d3ffe":"df.columns","0f98e429":"print(df.info())\nprint(df.isnull().sum())","884b12fb":"dft.columns","712621a1":"print(dft.info())\nprint(dft.isnull().sum())","82162f6b":"print(df.dtypes.value_counts())\nprint(df.select_dtypes(include = ['float64', 'int64']).head(2))\ndf.loc[:,['Age','SibSp','Parch','Fare']].describe()","160cc162":"print(dft.dtypes.value_counts())\nprint(dft.select_dtypes(include = ['float64', 'int64']).head(2))\ndft.loc[:,['Age','SibSp','Parch','Fare']].describe()","0ae58a16":"df.info()","c859a8b8":"dft.info()","1ef291be":"print(\"\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c Train \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 {} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439: {}, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439: {}\".format(\n    len(df.PassengerId.unique()),df['PassengerId'].min(), df['PassengerId'].max()))","f3db1a68":"print(\"\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c Test \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 {} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439: {}, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439: {}\".format(\n    len(dft.PassengerId.unique()),dft['PassengerId'].min(), dft['PassengerId'].max()))","cc9617ca":"df['Survived'].unique()","be33c687":"print(df.Survived.value_counts())\nprint(df.Survived.value_counts(normalize=True))","8283605e":"print(\"{}% \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0441\u043f\u0430\u0441\u043b\u043e\u0441\u044c\".format(round(df[df['Survived']==1]['PassengerId'].count()\/df['Survived'].count(),3)*100))","530dd619":"df['Pclass'].unique()","d2259415":"print(df['Pclass'].value_counts())","9fe9546e":"df['Pclass'].value_counts(normalize=True)","48c7ec0d":"df.groupby(['Pclass','Survived'])['PassengerId'].count()","47c40e96":"pd.crosstab(df['Pclass'], df['Survived'], margins=True)","8a144412":"pd.crosstab(df['Pclass'], df['Survived'], margins=True, normalize=True)","6b8ab384":"for i in [1,2,3]:\n    a = df[(df['Pclass']==i) & (df['Survived']==0)]['Survived'].count()\n    b = df[df['Pclass']==i]['Survived'].count()\n    print(\"\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043a\u0430\u044e\u0442 {}-\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430: {} ({} \u0438\u0437 {})\".format(i,round(a\/b,2),a,b))           ","40b44dca":"a = df[(df['Pclass']==2) & (df['Survived']==0)]['Survived'].count() + df[(df['Pclass']==3) & (df['Survived']==0)]['Survived'].count()\nb = len(df)\nprint(\"\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043a\u0430\u044e\u0442 2 \u0438 3-\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432: {} ({} \u0438\u0437 {})\".format(round(a\/b,2),a,b))           ","ce5468d5":"print(df['Name'].head(10))","7daf8e9b":"print(df[df['Name'].isna()])","72b67cc7":"titles = ['Mr.','Mrs.', 'Miss.', 'Ms.', 'Rev.', 'Dr.', 'Master.', \n          'Don.','Major.','Mme.','Mlle.','Col.','Capt.', 'Jonkheer.', \n          'Countess.', 'Sir.', 'Lady.', 'Dona.']\nvSum = 0\nprint(\"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0442\u0438\u0442\u0443\u043b\u043e\u0432 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 train\")\nfor title in titles:\n    c = df[df['Name'].str.find(title)!=-1]['Name'].count()\n    print(\"{}:{}\".format(title, c))\n    vSum += c\nprint(\"Sum: {}\".format(vSum))","2b1626ae":"vSum = 0\nprint(\"\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0442\u0438\u0442\u0443\u043b\u043e\u0432 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 test\")\nfor title in titles:\n    c = dft[dft['Name'].str.find(title)!=-1]['Name'].count()\n    print(\"{}:{}\".format(title, c))\n    vSum += c\nprint(\"Sum: {}\".format(vSum))","9474f2bd":"title = '|'.join(titles)\nprint(df[df['Name'].str.contains(title)!=True]['Name'])\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u0442\u0438\u0442\u0443\u043b\u0430\u043c\u0438, \u043d\u0435\u0443\u0447\u0442\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 titles: {}\".format(\n    df[df['Name'].str.contains(title)!=True]['Name'].count()))","6e3b230c":"title = '|'.join(titles)\nprint(dft[dft['Name'].str.contains(title)!=True]['Name'])\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u0442\u0438\u0442\u0443\u043b\u0430\u043c\u0438, \u043d\u0435\u0443\u0447\u0442\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 titles: {}\".format(\n    dft[dft['Name'].str.contains(title)!=True]['Name'].count()))","63d662ed":"vSumC, vSumS = 0, 0\ndftitles = pd.DataFrame(columns=['Number','Survived','Percentage'])\nfor title in titles:\n    c = df[df['Name'].str.find(title)!=-1]['Survived'].count()\n    s = df[df['Name'].str.find(title)!=-1]['Survived'].sum()\n    if c!=0:\n        dftitles.loc[title] = {'Number':c, 'Survived':s, 'Percentage':round(s\/c,2)}\n        print(\"\u0422\u0438\u0442\u0443\u043b: {:<10}, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u0441 \u0442\u0438\u0442\u0443\u043b\u043e\u043c: {:>4},  \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445: {:>4} ({}%)\".format(\n            title, c, s, round(s\/c*100,2)))\n    vSumC += c\n    vSumS += s\nprint(\"\u0412\u0441\u0435\u0433\u043e: {}, \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445:{}\".format(vSumC, vSumS))","388041e8":"dftitles.sort_values('Number',ascending=False)","503cda12":"dftitles.sort_values('Survived',ascending=False)","429a0b92":"dftitles.sort_values('Percentage',ascending=False)","f573161f":"print(\"\u0412\u0441\u0435\u0433\u043e \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 train \u0438 test {} \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u0442\u0443\u043b\u043e\u0432\".format(len(titles)))","2c6bc03f":"df['Sex'].unique()","9991398c":"if not all(df['Sex'].isna()):\n    print(\"\u041d\u0435\u0442 \u044f\u0447\u0435\u0435\u043a \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\")\nelse:\n    print(\"{} \u044f\u0447\u0435\u0435\u043a \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\".format(df[df['Sex'].isna()].shape[0]))","242d01a9":"df.groupby(['Sex','Survived'])['PassengerId'].count()","8fade1d6":"vNumMale = df[df['Sex']=='male']['PassengerId'].count()\nvNumSurvivedMale = df[(df['Sex']=='male')&(df['Survived']==1)]['PassengerId'].count()\nvNumFemale = df[df['Sex']=='female']['PassengerId'].count()\nvNumSurvivedFemale = df[(df['Sex']=='female')&(df['Survived']==1)]['PassengerId'].count()\nprint(\"\u041d\u0430 \u043a\u043e\u0440\u0430\u0431\u043b\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u043b\u043e\u0441\u044c {} \u043c\u0443\u0436\u0447\u0438\u043d (\u0432\u044b\u0436\u0438\u043b\u043e {}, {}%) \u0438 {} \u0436\u0435\u043d\u0449\u0438\u043d (\u0432\u044b\u0436\u0438\u043b\u043e {}, {}%)\".format(\n    vNumMale, vNumSurvivedMale, round(vNumSurvivedMale\/vNumMale,2)*100,\n    vNumFemale, vNumSurvivedFemale, round(vNumSurvivedFemale\/vNumFemale,2)*100))","2f3d93b3":"pd.crosstab(df['Survived'],df['Sex'], margins=True)","bbb6eb2f":"pd.crosstab(df['Survived'],df['Sex'], normalize=True, margins=True)","908ab285":"print(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043c\u0443\u0436\u0447\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='female') & (df['Survived']==False)]['Age'].mean()))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0436\u0435\u043d\u0449\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='male') & (df['Survived']==False)]['Age'].mean()))","5dc61589":"print(pd.crosstab(df['Pclass'],df['Survived'], normalize=True))\nprint(pd.crosstab(df['Sex'],df['Survived'], normalize=True))","1aa1d619":"df['Age'].isna().sum()","eb79edcb":"plt.boxplot(df['Age'].fillna(df['Age'].median()))\nplt.show()","2601bff8":"print(df[df.Sex=='female']['Age'].mean())\nprint(df[df.Sex=='male']['Age'].mean())","cd00ff3f":"print(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043c\u0443\u0436\u0447\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='female') & (df['Survived']==False)]['Age'].mean()))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0436\u0435\u043d\u0449\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='male') & (df['Survived']==False)]['Age'].mean()))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043c\u0443\u0436\u0447\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='female') & (df['Survived']==True)]['Age'].mean()))\nprint(\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0436\u0435\u043d\u0449\u0438\u043d: {:.2f}\".format(df[(df['Sex']=='male') & (df['Survived']==True)]['Age'].mean()))","7adceeb2":"print(\"\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Age \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f {} \u044f\u0447\u0435\u0435\u043a \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437 {} ({}% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)\".format(\n    df[df['Age'].isna()].shape[0], \n    df.shape[0],\n    round(df[df['Age'].isna()].shape[0]\/df.shape[0],2)*100))","e8ad3ee0":"df.loc[:,['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']].corr()","f330b2bf":"df['SibSp'].unique()","335e1fe2":"if not any(df['SibSp'].isna()):\n    print(\"\u041d\u0435\u0442 \u044f\u0447\u0435\u0435\u043a \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\")\nelse:\n    print(\"{} \u044f\u0447\u0435\u0435\u043a \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\".format(df[df['SibSp'].isna()].shape[0]))","46ed5e16":"print(df.groupby(['SibSp'])['PassengerId'].count())","94751b3c":"print(df.groupby(['Survived','SibSp'])['PassengerId'].count())","e7625b71":"df['SibSp'].unique()","118b33b7":"df['SibSp'].isna().sum()","c1916af5":"print(df.groupby(['Survived','Parch'])['PassengerId'].count())","1dd6935c":"df['Ticket']","0d923fa0":"df[df.Ticket.str.match(r'PP')==True][['Ticket','Embarked','Fare','Name','Age']]","5b73b5a9":"from collections import Counter","aba21bc0":"c = Counter(df['Ticket'])\ns = set([i for i in c.keys() if c[i]>1])\nprint(\"\u041f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0435\u043d\u043e {} \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0431\u0438\u043b\u0435\u0442\u043e\u0432\".format(len(s)))","e4b29fe9":"df['Fare']","4be99234":"df['Fare'].isna().sum()","7d755da2":"plt.boxplot(df['Fare'])\nplt.show()","25ade91f":"df.Cabin.isna().sum()","1152fe09":"print(df.groupby(['Survived','Cabin'])['PassengerId'].count())","2900592f":"df['Embarked'].unique()","828c9c71":"display(df.groupby(['Embarked'])['PassengerId'].count())","13993055":"display(df.groupby(['Survived','Embarked'])['PassengerId'].count())","2e27549d":"df_proc = df.copy()\ndft_proc = dft.copy()\ndatas_proc = [df_proc, dft_proc]","39e1a941":"# complete or delete missing values in train and test\/validation dataset\nfor dataset in datas_proc:\n    #complete missing age with median\n    dataset['Age'].fillna(dataset['Age'].median(), inplace=True)\n    #complete embarked with mode\n    dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)\n    #complete missing fare with median\n    dataset['Fare'].fillna(dataset['Fare'].median(), inplace=True)","89923505":"for dataset in datas_proc:\n    dataset[\"Embarked\"] = dataset[\"Embarked\"].map({\"S\":2,\"C\":1,\"Q\":0}).astype(int)\n    dataset[\"Sex\"]  = dataset[\"Sex\"].map({\"female\":1,\"male\":0}).astype(int)","b7ee0e32":"for dataframe in datas_proc:    \n    dataframe['FamilySize'] = dataframe['SibSp'] + dataframe['Parch'] + 1","f814fd10":"dict_titles = {'Mr.': 1,\n               'Mrs.': 2, \n               'Miss.': 3, \n               'Ms.': 4, \n               'Rev.': 5, \n               'Dr.': 6, \n               'Master.': 7, \n               'Don.': 8,\n               'Major.': 9,\n               'Mme.': 10,\n               'Mlle.': 11,\n               'Col.': 12,\n               'Capt.': 13, \n               'Jonkheer.': 14, \n               'Countess.': 15, \n               'Sir.': 16, \n               'Lady.': 17,\n               'Dona.': 18\n              }\n\nfor dataframe in datas_proc:\n    dataframe['Title'] = dataframe['Name'].map(lambda x: substrings_in_string(x, titles))\n    dataframe['TitleIndex'] = dataframe['Name'].map(lambda x: dict_titles[substrings_in_string(x, titles)])","0a52c030":"AGE_BABY = 1\nAGE_TEEN = 2\nAGE_MIDDLE = 3\nAGE_OLD = 4\n\nfor dataframe in datas_proc:\n    dataframe['AgeRange'] = pd.cut(dataframe['Age'], [0,5,18,50,100], labels=[AGE_BABY, AGE_TEEN, AGE_MIDDLE, AGE_OLD])","5b3c8508":"for dataframe in datas_proc:\n    dataframe['FareRange'] = pd.cut(dataframe['Fare'], [0,50,100,513], labels=[1,2,3])","11a613c0":"#for dataset in datas:    \n#    dataset['FareBin'] = pd.qcut(dataset['Fare'], 4)\n#    dataset['AgeBin'] = pd.cut(dataset['Age'].astype(int), 5)","080ef442":"for dataset in datas_proc:    \n    drop_column = ['PassengerId', 'Name', 'Cabin', 'Ticket']\n    dataset.drop(drop_column, axis=1, inplace = True)","e7aa4d0c":"for dataset in datas_proc:    \n    drop_column = ['SibSp', 'Parch', 'Fare', 'Title']\n    dataset.drop(drop_column, axis=1, inplace = True)","653c756a":"for dataset in datas_proc:    \n    drop_column = ['FareRange']\n    dataset.drop(drop_column, axis=1, inplace = True)","1d2fd902":"data = df_proc\nlabels = data[\"Survived\"]\ndata = data.drop(\"Survived\",axis=1)\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(data.values, labels.values, test_size=0.33, random_state=0, stratify=labels)\nss = StandardScaler()\nX_train_scaled = ss.fit_transform(X_train)\nX_test_scaled = ss.transform(X_test)","e160e015":"df.head(2)","a9f461b1":"#pp = sns.pairplot(df, hue = 'Survived', palette = 'deep', size=1.2, diag_kind = 'kde', diag_kws=dict(shade=True), plot_kws=dict(s=10) )\n#pp.set(xticklabels=[])\ndf.corr()","91caf14e":"#correlation heatmap of dataset\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(df)","1b04f09d":"scatter_matrix(df, alpha=0.05, figsize=(15, 15));","219c4289":"rfc = RandomForestClassifier()\nrfc.fit(X_train_scaled, y_train)\nprint(rfc.score(X_test_scaled, y_test))","c7ab88d1":"feats = {}\nfor feature, importance in zip(data.columns, rfc.feature_importances_):\n    feats[feature] = importance\nimportances = pd.DataFrame.from_dict(feats, orient='index').rename(columns={0: 'Gini-Importance'})\nimportances = importances.sort_values(by='Gini-Importance', ascending=False)\nimportances = importances.reset_index()\nimportances = importances.rename(columns={'index': 'Features'})\nsns.set(font_scale = 3)\nsns.set(style=\"whitegrid\", color_codes=True, font_scale = 1.2)\nfig, ax = plt.subplots()\nfig.set_size_inches(10,5)\nsns.barplot(x=importances['Gini-Importance'], y=importances['Features'], data=importances, color='skyblue')\nplt.xlabel('Importance', fontsize=15, weight = 'bold')\nplt.ylabel('Features', fontsize=15, weight = 'bold')\nplt.title('Feature Importance', fontsize=15, weight = 'bold')\nplt.show()\ndisplay(importances)","12cd7b21":"data = df_proc\nlabels = data[\"Survived\"]\ndata = data[['Age','TitleIndex','Sex','Pclass','FamilySize']]\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(data.values, labels.values, test_size=0.33, random_state=0, stratify=labels)\nss = StandardScaler()\nX_train_scaled = ss.fit_transform(X_train)\nX_test_scaled = ss.transform(X_test)\n\nrfc_1 = RandomForestClassifier()\nrfc_1.fit(X_train_scaled, y_train)\nprint(rfc_1.score(X_test_scaled, y_test))","a3f02494":"pca_test = PCA(n_components=5)\npca_test.fit(X_train_scaled)\nsns.set(style='whitegrid')\nplt.plot(np.cumsum(pca_test.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.axvline(linewidth=4, color='r', linestyle = '--', x=3, ymin=0, ymax=1)\nplt.show()\nevr = pca_test.explained_variance_ratio_\ncvr = np.cumsum(pca_test.explained_variance_ratio_)\npca_df = pd.DataFrame()\npca_df['Cumulative Variance Ratio'] = cvr\npca_df['Explained Variance Ratio'] = evr\ndisplay(pca_df.head(10))","5ec35e8e":"pca = PCA(n_components=4)\npca.fit(X_train_scaled)\nX_train_scaled_pca = pca.transform(X_train_scaled)\nX_test_scaled_pca = pca.transform(X_test_scaled)\n\nrfc_2 = RandomForestClassifier()\nrfc_2.fit(X_train_scaled_pca, y_train)\nprint(rfc_2.score(X_test_scaled_pca, y_test))","3f9aef6d":"n_estimators = [int(x) for x in np.linspace(100, 1000, 10)]\nmax_features = ['log2', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(1, 15, 15)]\nmin_samples_split = [int(x) for x in np.linspace(2, 50, 10)]\nmin_samples_leaf = [int(x) for x in np.linspace(2, 50, 10)]\nbootstrap = [True, False]\nparam_dist = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nrs = RandomizedSearchCV(rfc, \n                        param_dist, \n                        n_iter = 100, \n                        cv = 3, \n                        verbose = 1, \n                        n_jobs=-1, \n                        random_state=0)\nrs.fit(X_train_scaled_pca, y_train)\nrs.best_params_","3d5f3b2a":"#rfc.get_params()","7814d6a0":"rs_df = pd.DataFrame(rs.cv_results_).sort_values('rank_test_score').reset_index(drop=True)\nrs_df = rs_df.drop([\n            'mean_fit_time', \n            'std_fit_time', \n            'mean_score_time',\n            'std_score_time', \n            'params', \n            'split0_test_score', \n            'split1_test_score', \n            'split2_test_score', \n            'std_test_score'],\n            axis=1)\nrs_df.head(10)","03dd298c":"fig, axs = plt.subplots(ncols=3, nrows=2)\nsns.set(style=\"whitegrid\", color_codes=True, font_scale = 1)\nfig.set_size_inches(20,15)\nsns.barplot(x='param_n_estimators', y='mean_test_score', data=rs_df, ax=axs[0,0], color='lightgrey')\naxs[0,0].set_ylim([.75,.80])\naxs[0,0].set_title(label = 'n_estimators', size=10, weight='bold')\nsns.barplot(x='param_min_samples_split', y='mean_test_score', data=rs_df, ax=axs[0,1], color='coral')\naxs[0,1].set_ylim([.75,.80])\naxs[0,1].set_title(label = 'min_samples_split', size=10, weight='bold')\nsns.barplot(x='param_min_samples_leaf', y='mean_test_score', data=rs_df, ax=axs[0,2], color='lightgreen')\naxs[0,2].set_ylim([.75,.81])\naxs[0,2].set_title(label = 'min_samples_leaf', size=10, weight='bold')\nsns.barplot(x='param_max_features', y='mean_test_score', data=rs_df, ax=axs[1,0], color='wheat')\naxs[1,0].set_ylim([.75,.81])\naxs[1,0].set_title(label = 'max_features', size=10, weight='bold')\nsns.barplot(x='param_max_depth', y='mean_test_score', data=rs_df, ax=axs[1,1], color='lightpink')\naxs[1,1].set_ylim([.75,.81])\naxs[1,1].set_title(label = 'max_depth', size=10, weight='bold')\nsns.barplot(x='param_bootstrap',y='mean_test_score', data=rs_df, ax=axs[1,2], color='skyblue')\naxs[1,2].set_ylim([.75,.81])\naxs[1,2].set_title(label = 'bootstrap', size=10, weight='bold')\nplt.show()","d20ef7b3":"n_estimators = [300,700,1000]\nmax_features = ['log2']\nmax_depth = [3,4,13,15]\nmin_samples_split = [23,28]\nmin_samples_leaf = [2,7,12,39]\nbootstrap = [True]\nparam_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\ngs = GridSearchCV(rfc, param_grid, cv = 3, verbose = 1, n_jobs=-1)\ngs.fit(X_train_scaled_pca, y_train)\nrfc_3 = gs.best_estimator_\ngs.best_params_","22f9ffd7":"y_pred = rfc_1.predict(X_test_scaled)\ny_pred_pca = rfc_2.predict(X_test_scaled_pca)\ny_pred_gs = rfc_3.predict(X_test_scaled_pca)","4729cdaf":"conf_matrix_baseline = pd.DataFrame(confusion_matrix(y_test, y_pred), index = ['actual 0', 'actual 1'], columns = ['predicted 0', 'predicted 1'])\nconf_matrix_baseline_pca = pd.DataFrame(confusion_matrix(y_test, y_pred_pca), index = ['actual 0', 'actual 1'], columns = ['predicted 0', 'predicted 1'])\nconf_matrix_tuned_pca = pd.DataFrame(confusion_matrix(y_test, y_pred_gs), index = ['actual 0', 'actual 1'], columns = ['predicted 0', 'predicted 1'])\nprint(conf_matrix_baseline)\nprint('Baseline Random Forest recall score', recall_score(y_test, y_pred))\nprint(conf_matrix_baseline_pca)\nprint('Baseline Random Forest With PCA recall score', recall_score(y_test, y_pred_pca))\nprint(conf_matrix_tuned_pca)\nprint('Hyperparameter Tuned Random Forest With PCA Reduced Dimensionality recall score', recall_score(y_test, y_pred_gs))","29e0402a":"data_train = df_proc\nlabels_train = data_train[\"Survived\"]\ndata_train = data_train.drop(\"Survived\",axis=1)\ngs.best_estimator_.fit(data_train, labels_train)\n\nbest_res = gs.best_estimator_.predict(dft_proc)\n\ndfFinal=pd.DataFrame({\n    \"PassengerId\": dft['PassengerId'],\n    \"Survived\": best_res })\ndfFinal.to_csv(\"submission.csv\",index=False)","1c652a10":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0438\u0445 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0442\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f.","f9342504":"## 5.2. \u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 RandomForest <a name='rf_features'>","3d1b6c63":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","d0578126":"## 2.6. Age <a name='id-2-6'>","5ecfdc6d":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","43414c78":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","f92a8386":"## 2.4. Name <a name=\"id-2-4\">","b941a6a8":"## 2.1. PassengerId <a name=\"id-2-1\">","fa47e1fd":"177 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044f 'Age'","7bcad1a9":"\u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u043c\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044e, \u0442\u0438\u0442\u0443\u043b. \u0412 \u0440\u0435\u0434\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0438\u043c\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \"\u043f\u0440\u043e\u0437\u0432\u0438\u0449\u0435\". \u041f\u0440\u0438\u043c\u0435\u0440:","30390689":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","393240f9":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","63a03429":"## 2.10. Fare <a name='id-2-10'>","79a19f81":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","a7dac88c":"## 3.3. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a name='new_features'>","6d99ab02":"## 1.1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a <a name=\"import_libs\">","4a3338b3":"## 2.8. Parch <a name='id-2-8'>","46f96261":"\u0415\u0441\u0442\u044c \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0430\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u043a\u0430\u044e\u0442\u044b \u0438 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u043c \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 baseline - \u0435\u0441\u043b\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 \u0435\u0445\u0430\u043b 2 \u0438\u043b\u0438 3 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0442\u043e \u0441 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e 53% \u043e\u043d \u043f\u043e\u0433\u0438\u0431.","2908df1f":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","3f3a666d":"# 6. \u0412\u044b\u0432\u043e\u0434\u044b <a name='conclusions'>","52540a63":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","db00a0bc":"## 3.5. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <a name='normalize'>","9db56a30":"## 2.9. Ticket <a name='id-2-9'>","5754070b":"\u0418\u0441\u043a\u043b\u044e\u0447\u0438\u043c \u0438\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f 'Embarked' \u0438 'AgeRange'","f235252e":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","6a130ef5":"\u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Train \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 'Age', 'Fare', 'Cabin'.","ecae60f1":"## 1.4. \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 <a name=\"common_information\">","f0611bc3":"# 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 <a name='models'>","e2667b6c":"\u0426\u0435\u043b\u0435\u0441\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u0432\u0432\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u0445 \"Title\" \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \"Name\" \u043a\u0430\u043a \u043c\u0430\u043b\u043e\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0439. \u0422\u0438\u0442\u0443\u043b\u044b, \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u043d\u0435\u0435 10%, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443.","16a67a3b":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","a3d0be96":"## 5.3. PCA \u0434\u043b\u044f RandomForest <a name='rf_pca'>","b7e11886":"## 3.4. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a name='delete_features'>\n","d9c8dfc6":"\u041f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u043f.4.\n\n\u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 RandomForest (\u043f.5.) \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.\n\n\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 notebook \u0441 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439: https:\/\/www.kaggle.com\/yurychernyshov\/solve-titanic-task-with-clf-s-from-sklearn\/","24aacdeb":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442, \u0431\u0435\u0437 \u0440\u0430\u0437\u0440\u044b\u0432\u043e\u0432.","1bec1c17":"## 2.7. SibSp <a name='id-2-7'>","5fb6a633":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","76913227":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","178907e1":"# 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. <a name=\"id-1\">","a77dcd7b":"# 2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 <a name=\"id-2\">","56a9d900":"\u041f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u043d\u0435\u0442.","9e18a011":"\u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Train \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 'Age', 'Cabin', 'Embarked'.","616e563e":"\u0420\u0435\u0437\u044e\u043c\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044f\u0447\u0435\u0439\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 median() \u0438 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 feature engeneering \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","057c72ba":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","c1c30a72":"## 2.2. Survived <a name=\"id-2-2\">","3200dc42":"\u041d\u0430\u0439\u0442\u0438 \u0431\u0438\u043b\u0435\u0442\u044b, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e.","c38b0bca":"# \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 <a name='toc'>\n* [1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.](#id-1)   \n* [1.1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a](#import_libs)\n* [1.2. \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439](#functions)\n* [1.3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#input_data)\n* [1.4. \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#common_information)   \n* [2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432](#id-2)\n* [2.1. PassengerId](#id-2-1)\n* [2.2. Survived](#id-2-2)\n* [2.3. Pclass](#id-2-3)\n* [2.4. Name](#id-2-4)\n* [2.5. Sex](#id-2-5)\n* [2.6. Age](#id-2-6)\n* [2.7. SibSp](#id-2-7)\n* [2.8. Parch](#id-2-8)\n* [2.9. Ticket](#id-2-9)\n* [2.10. Fare](#id-2-10)\n* [2.11. Cabin](#id-2-11)\n* [2.12. Embarked](#id-2-12)\n* [3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445](#id-3)\n* [3.1. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 (NaN) \u044f\u0447\u0435\u0435\u043a](#fillna)\n* [3.2. \u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f: \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u0442\u0438\u043f\u0430\u043c](#vectorize)\n* [3.3. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#new_features)\n* [3.4. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#delete_features)\n* [3.5. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f](#normalize)\n* [4. \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#mul_analyze)\n* [4.1. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432](#correlation)\n* [4.2. Feature engeneering](#feature_engineering)\n* [5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439](#models)\n* [5.1. \u041c\u043e\u0434\u0435\u043b\u044c RandomForest \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e](#rf)\n* [5.2. \u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 RandomForest](#rf_features)\n* [5.3. PCA \u0434\u043b\u044f RandomForest](#rf_pca)\n* [6. \u0412\u044b\u0432\u043e\u0434\u044b](#conclusions)\n    \n    ","2b7f8734":"## 5.1. \u041c\u043e\u0434\u0435\u043b\u044c RandomForest \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <a name='rf'>","64fe96c6":"> ## 1.3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 <a name=\"input_data\">","59595ed7":"# \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 <a name='correlation'>","818f8473":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","56a4d187":"\u0421 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c 'Age' \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 'Pclass' \u0438 'Fare'.","dfe63186":"## 3.2. \u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f (\u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u0442\u0438\u043f\u0430\u043c) <a name='vectorize'>\n","2e0f2b3d":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","bd9f3c29":"## 2.3. Pclass <a name=\"id-2-3\">","3037abe6":"PCA \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.","189fd205":"## 1.2. \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 <a name='functions'>","257013cb":"## 2.12. Embarked <a name='id-2-12'>","f6878155":"\u041c\u043d\u043e\u0433\u043e \u043d\u0435\u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0423\u0434\u0430\u043b\u0438\u0442\u044c.","04142ad8":"## 2.11. Cabin <a name='id-2-11'>","d8f27e68":"\u0420\u0435\u0437\u044e\u043c\u0435: \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0430 \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u043e\u043c \u0438 \u0444\u0430\u043a\u0442\u043e\u043c \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \n\u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 (male->0, female->1)","fe05bdc4":"# 4. \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 <a name='mul_analyze'>","11132e90":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","8ccc465a":"## 3.1. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 (NaN) \u044f\u0447\u0435\u0435\u043a <a name='fillna'>\n","dd669df6":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","0db6bf71":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b (TBD)","c270783b":"# 3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 <a name='id-3'>","e674851e":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0434\u0430, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0438\u0436\u0435, \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043a\u0430\u0442\u044c \u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0442\u0438\u0442\u0443\u043b\u044b, \u043d\u0435 \u0443\u0447\u0442\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 titles, \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432\u0435\u0441\u044c\u043c\u0430 \u044d\u043a\u0437\u043e\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435.","e7e3faf6":"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043c\u0443\u0436\u0447\u0438\u043d \u0438 \u0436\u0435\u043d\u0449\u0438\u043d","091ecf53":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","dab3bbb5":"<a href='#toc'>\u041d\u0430\u0437\u0430\u0434 \u043a \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e<\/a>","bf51f8d2":"## 2.5. Sex <a name='id-2-5'>","41abd642":"\u0423\u0434\u0430\u043b\u0430\u0435\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445."}}