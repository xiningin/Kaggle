{"cell_type":{"8e32bc21":"code","101b97ac":"code","f0c743af":"code","95c1dddc":"code","377c0bec":"code","35366c0d":"code","7147b7f2":"code","c66204ef":"code","6e9300b5":"code","b6ea2d67":"code","fee843c3":"code","17c19079":"code","c4e9c71e":"code","79172b48":"code","0e2d75d1":"code","81ffc081":"code","9b5970c0":"code","4361887f":"code","347787f3":"code","4807e218":"code","d3ce7eca":"code","649d0d2d":"code","b466f1f4":"code","34bf87f9":"code","ed803102":"code","cab4c344":"code","cdebcf41":"code","d2f005bb":"code","4e6c358d":"code","58df6a0f":"code","154c02a8":"code","ad994809":"code","98227a27":"code","1f028634":"code","31c3d119":"code","a30e0bc1":"code","1fd303dd":"code","09022155":"code","7f613b0a":"code","2a96bc90":"code","37e542ac":"code","2f2f0a8f":"code","7d333e37":"markdown","c9e156ac":"markdown","4549ce6a":"markdown","f9a61ad0":"markdown","a36155a9":"markdown","0f1725c8":"markdown","472c72ed":"markdown","e29982c3":"markdown","5be9e8bd":"markdown","fcb5c6a0":"markdown"},"source":{"8e32bc21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","101b97ac":"\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n","f0c743af":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nprint('Train Data \u0130nfo')\ntrain.info()\nprint('=='*50)\nprint('Test Data \u0130nfo')\ntest.info()","95c1dddc":"train.head()","377c0bec":"test.head()","35366c0d":"train.drop('Cabin',axis=1,inplace= True)\ntest.drop('Cabin',axis=1,inplace= True)","7147b7f2":"import missingno as msno \nmsno.matrix(train)","c66204ef":"msno.matrix(test)","6e9300b5":"sns.distplot(train['Age'])","b6ea2d67":"sns.distplot(test['Age'])","fee843c3":"sns.distplot(test['Fare'])","17c19079":"train.head()","c4e9c71e":"def box(arr):\n    q1 = arr.quantile(0.25)\n    q3 = arr.quantile(0.75)\n    \u0131qr = q3-q1\n    mini = q1-(1.5*\u0131qr)\n    maxi = q3+(1.5*\u0131qr)\n    arr = arr[(arr>mini)&(arr<maxi)]\n    \ndef standart(arr):\n    plus = arr.mean()+3*arr.std()\n    minus = arr.mean()-3*arr.std()\n    arr = arr[(arr>minus)&(arr<plus)]","79172b48":"standart(train['Age'])\nbox(test['Fare'])\nstandart(test['Age'])","0e2d75d1":"sns.distplot(train['Age'])","81ffc081":"train['Age']=train['Age'].fillna(train['Age'].median())\ntest['Age']=test['Age'].fillna(test['Age'].median())\ntest['Fare'] = test['Fare'].fillna(test['Fare'].median())\n","9b5970c0":"train = train.dropna()","4361887f":"print(train.isnull().sum())\nprint('**'*40)\nprint(test.isnull().sum())","347787f3":"features = {'Pclass','Sex','SibSp','Parch','Embarked'}\nfor graph in features:\n    sns.countplot(x=train['Survived'],hue=train[graph],data=train)\n    plt.ylabel(graph)\n    plt.show()","4807e218":"feature = {'Pclass','Sex','SibSp','Parch','Embarked'}\nfor feat in feature:\n    print('\\n'*3,feat,'Features',train[feat].value_counts(),'\\n','*'*50)","d3ce7eca":"baby = train[(train['Age']<6)]\nchild = train[(train['Age']>=6)&(train['Age']<12)]\nteen = train[(train['Age']>=12)&(train['Age']<18)]\nmiddle_aged = train[(train['Age']>=18)&(train['Age']<35)]\nadult = train[(train['Age']>=35)&(train['Age']<50)]\nold = train[(train['Age']>=50)]\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''\nbaby_test = test[(test['Age']<6)]\nchild_test = test[(test['Age']>=6)&(test['Age']<12)]\nteen_test = test[(test['Age']>=12)&(test['Age']<18)]\nmiddle_aged_test = test[(test['Age']>=18)&(test['Age']<35)]\nadult_test = test[(test['Age']>=35)&(test['Age']<50)]\nold_test = test[(test['Age']>=50)]","649d0d2d":"baby['Age'] = 'Baby'\nchild['Age'] = 'Child'\nteen['Age'] = 'Teen'\nmiddle_aged['Age'] = 'Middle'\nadult['Age'] = 'Adult'\nold['Age'] = 'Old'\n''''''''''''''''''''''''''''''''''''\nbaby_test['Age'] = 'Baby'\nchild_test['Age'] = 'Child'\nteen_test['Age'] = 'Teen'\nmiddle_aged_test['Age'] = 'Middle'\nadult_test['Age'] = 'Adult'\nold_test['Age'] = 'Old'","b466f1f4":"agednn = pd.concat([baby['Age'],child['Age'],teen['Age'],middle_aged['Age'],adult['Age'],old['Age']],axis = 0)\nagednn_test = pd.concat([baby_test['Age'],child_test['Age'],teen_test['Age'],middle_aged_test['Age'],adult_test['Age'],old_test['Age']],axis = 0)","34bf87f9":"train['Age_n'] = train['Age']\ntest['Age_n'] = test['Age']\ntrain.drop('Age',inplace = True,axis = 1)\ntest.drop('Age',inplace = True,axis = 1)","ed803102":"train = pd.concat([train,agednn],axis = 1)\ntest = pd.concat([test,agednn_test],axis=1)","cab4c344":"test","cdebcf41":"train['Title'] = train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntrain['Title'].value_counts()\n","d2f005bb":"def name_title_mapping(title):    \n    \n    if title == 'Mr':\n        return 0\n    elif title == 'Mrs':\n        return 1\n    elif title == 'Miss':\n        return 2\n    else:\n        return 3","4e6c358d":"train['Title'] = train['Title'].apply(name_title_mapping)\ntest['Title'] = test['Title'].apply(name_title_mapping)\ntrain.drop('Name',axis=1,inplace=True)\ntest.drop('Name',axis=1,inplace=True)","58df6a0f":"train.drop('Ticket',axis=1,inplace=True)\ntest.drop('Ticket',axis=1,inplace=True)","154c02a8":"train['TotalFamilySize'] = train['SibSp']+train['Parch']\ntest['TotalFamilySize'] = test['SibSp']+test['Parch']","ad994809":"fam = train[(train['TotalFamilySize'] == 0)]\nalo = train[(train['TotalFamilySize'] != 0)]\nalo['TotalFamilySize']  = 'False'\nfam['TotalFamilySize'] = 'True'\nalone = pd.concat([fam['TotalFamilySize'],alo['TotalFamilySize']],axis = 0)\ntrain['TotalFamilySize_'] = train['TotalFamilySize']\ntrain= pd.concat([alone,train],axis=1)\n\nfam_t = test[(test['TotalFamilySize'] == 0)]\nalo_t = test[(test['TotalFamilySize'] != 0)]\nalo_t['TotalFamilySize']  = 0\nfam_t['TotalFamilySize'] = 1\nalone_t = pd.concat([fam_t['TotalFamilySize'],alo_t['TotalFamilySize']],axis = 0)\ntest['TotalFamilySize_'] = test['TotalFamilySize']\ntest= pd.concat([alone_t,test],axis=1)","98227a27":"sex_map = {'male':1,'female':0}\ntrain['Sex'] = train['Sex'].map(sex_map)\ntest['Sex'] = test['Sex'].map(sex_map)\nembarked_map = {'S':1,'C':2,'Q':3}\ntrain['Embarked'] = train['Embarked'].map(embarked_map)\ntest['Embarked'] = test['Embarked'].map(embarked_map)\nage_map = {'Baby':0,'Child':1,'Teen':2,'Middle':3,'Adult':4,'Old':5}\ntrain['Age'] = train['Age'].map(age_map)\ntest['Age'] = test['Age'].map(age_map)\n","1f028634":"one = pd.get_dummies(train['TotalFamilySize'])\none_t = pd.get_dummies(test['TotalFamilySize'])\ntrain = pd.concat([train,one['TotalFamilySize_False']],axis=1)\none_t.columns = ['TotalFamilySize_False','T']\ntest = pd.concat([test,one_t[one_t.columns[0]]],axis=1)","31c3d119":"train.drop('TotalFamilySize',axis = 1,inplace=True)\ntest.drop('TotalFamilySize',axis = 1,inplace=True)","a30e0bc1":"X_train = train.drop('Survived',axis = 1)\ny_train = train['Survived']\nX_test = test\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nkfold = KFold(n_splits=10,shuffle=True,random_state=0)\n","1fd303dd":"test","09022155":"svc = SVC(kernel='rbf',random_state=0)\nscore = cross_val_score(svc,X_train,y_train,cv=kfold,scoring='accuracy')\nprint(score)\nprint(score.mean())","7f613b0a":"svc_model = svc.fit(X_train,y_train)\nsvc_pred =svc_model.predict(test)","2a96bc90":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\nY_pred = classifier.predict(test)","37e542ac":"from sklearn.metrics import accuracy_score\nclassifier.score(X_train, y_train)\nclassifier = round(classifier.score(X_train,y_train ) * 100, 2)\nclassifier","2f2f0a8f":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission1.csv', index=False)\n","7d333e37":"# Feature Engineering","c9e156ac":"# Encoding","4549ce6a":"# Data Visualization","f9a61ad0":"# \u0130mport Library","a36155a9":" # \u0130ntro\n Hello everyone, this is my first Kaggle notebook. Let me know if I'm wrong. I await your suggestions :)","0f1725c8":"# Machine Learning","472c72ed":"# Drop 'Cabin' Values","e29982c3":"# Outlier Values","5be9e8bd":"* NaN values \u200b\u200bare too high in Age variable. We will add new values \u200b\u200bto NaN values \u200b\u200bby checking the distribution.","fcb5c6a0":"# NaN Values"}}