{"cell_type":{"b961c230":"code","01b5c2b5":"code","a4587c81":"code","74ad509d":"code","9b94bb54":"code","4959b9f1":"code","49042113":"markdown","4955f76a":"markdown","4b466d7d":"markdown","91e05a91":"markdown","f8d847f9":"markdown"},"source":{"b961c230":"#@title Choose parameters and variables\n\nthreshold = 2  #@param {type: \"slider\", min: 0, max: 10}\nvar_threshold = \"mod_corte\" #@param [\"mod_corte\", \"mod_coron\", \"spd_o_corte\", \"spd_o_corte\"]\ndir_pred0 = \"dir_coron\" #@param [\"dir_corte\", \"dir_coron\", \"dir_o_corte\", \"dir_o_coron\"]\ndir_obs = \"dir_o_coron\" #@param [\"dir_o_corte\", \"dir_o_coron\"]\nlabels = [\"NE\",\"SE\",\"SW\",\"NW\"] #@param [\"[\\\"NE\\\",\\\"SE\\\",\\\"SW\\\",\\\"NW\\\"]\", \"[\\\"1\\\",\\\"2\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\",\\\"10\\\"]\"] {type:\"raw\", allow-input: true}\n\n!pip install simplekml\nimport simplekml\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix ,classification_report \nfrom sklearn.model_selection import cross_val_score,cross_validate\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nfrom sklearn import tree\nimport graphviz\n\ndef wind_direction_class_test(threshold,var_threshold,labels,dir_pred,dir_obs,w_df):\n    \n    \"\"\"\n    Convert wind direction in labels above a wind intensity forecast and compare\n    wind direction observed plot results as a crosstabulation\n    \n    parameters:\n    \n    threshold=wind intensity thrsehold;\n    var_threshold=variable wind intensity observed or forecasted same or different \n    location (column w_df);\n    labels= to cut the continuity of wind direction example quadrants like NE or SE;\n    dir_pred=column from the dataframe (w_df) where the wind is predicted;\n    dir_obs:column from the dataframe (w_df) where the wind is observed; \n    w_df=dataframe where all columns are \"\"\"\n    \n    \n    #filter only data above a threshold\n    mask=w_df[w_df[var_threshold]>=threshold].dropna()\n    \n    #cut in bins==wind quadrants exemple\n    mask[dir_pred+\"_l\"]=pd.cut(x = mask[dir_pred], bins = len(labels), labels = labels)\n    mask[dir_obs+\"_l\"]=pd.cut(x = mask[dir_obs], bins = len(labels), labels = labels)\n    \n    #plot results\n    table=pd.crosstab(mask[dir_obs+\"_l\"], mask[dir_pred+\"_l\"], margins=True,)\n    table_columns=pd.crosstab(mask[dir_obs+\"_l\"], mask[dir_pred+\"_l\"], margins=True,normalize=\"columns\")\n    table_index=pd.crosstab(mask[dir_obs+\"_l\"], mask[dir_pred+\"_l\"], margins=True,normalize=\"index\")\n    \n    fig, axs = plt.subplots(3,figsize = (8,10))\n    sns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\n    sns.heatmap(table_columns,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\n    sns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\n    plt.show()\n\ndef class_report  (threshold,var_threshold,labels,dir_pred,dir_obs,w_df):\n    \n    \"\"\"\n    Convert wind direction in labels above a wind intensity forecast and compare\n    wind direction plot results: precision,recall, accuracy and f1 \n    \n    parameters:\n    \n    threshold=wind intensity thrsehold;\n    var_threshold=variable wind intensity observed or forecasted same or different \n    location (column w_df);\n    labels= to cut the continuity of wind direction example quadrants like NE or SE;\n    dir_pred=column from the dataframe (w_df) where the wind is predicted;\n    dir_obs:column from the dataframe (w_df) where the wind is observed; \n    w_df=dataframe where all columns are \"\"\"\n    \n    #filter only data above a threshold\n    mask=w_df[w_df[var_threshold]>=threshold].dropna()\n    \n    #cut in bins==wind quadrants exemple\n    mask[dir_pred+\"_l\"]=pd.cut(x = mask[dir_pred], bins = len(labels), labels = labels)\n    mask[dir_obs+\"_l\"]=pd.cut(x = mask[dir_obs], bins = len(labels), labels = labels)\n    \n    #plot results\n    print(classification_report(mask[dir_obs+\"_l\"],mask[dir_pred+\"_l\"]))\n    \n\n\n\n\n\ncoron=pd.read_csv('\/kaggle\/input\/wind-coron\/coron_all.csv',parse_dates=[\"time\"]).set_index(\"time\")\ncortegada=pd.read_csv('\/kaggle\/input\/wind-coron\/cortegada_all.csv',parse_dates=[\"time\"]).set_index(\"time\")\njoin = cortegada.join(coron, lsuffix='_corte', rsuffix='_coron').dropna()\n\nw_df=join\nclass_report  (threshold,var_threshold,labels,dir_pred0,dir_obs,w_df)\nwind_direction_class_test(threshold,var_threshold,labels,dir_pred0,dir_obs,w_df)","01b5c2b5":"#@title Choose parameters and variables: Wind direction\n\nthreshold = 2  #@param {type: \"slider\", min: 0, max: 10}\nvar_threshold = \"mod_corte\" #@param [\"mod_corte\", \"mod_coron\", \"spd_o_corte\", \"spd_o_corte\"]\ndir_pred1 = ['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',] #@param [\"['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',\\\"dir_o_corte\\\"]\", \"['dir_coron', 'dir_corte', \\\"dir_o_corte\\\"]\", \"['dir_coron', 'dir_corte', \\\"dir_o_coron\\\"]\", \"['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',]\", \"[\\\"mod_corte\\\",\\\"mod_coron\\\"]\", \"[\\\"mod_corte\\\",\\\"mod_coron\\\",\\\"dir_corte\\\"]\"] {type:\"raw\"}\n\nlabels = [\"NE\",\"SE\",\"SW\",\"NW\"] #@param [\"[\\\"NE\\\",\\\"SE\\\",\\\"SW\\\",\\\"NW\\\"]\", \"[\\\"1\\\",\\\"2\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\",\\\"10\\\"]\"] {type:\"raw\"}\nmax_depth = 10 #@param [\"2\", \"5\", \"10\", \"15\"] {type:\"raw\", allow-input: true}\ncriterion = \"entropy\" #@param [\"gini\", \"entropy\"]\n\n#filter only data above a threshold\nmask=join[join[var_threshold]>=threshold].dropna()\n#cut in bins==wind quadrants exemple\nY=pd.cut(x = mask[dir_obs], bins = len(labels), labels = labels)\n\n#independent variables. Also observed variables!! if you wish\nX=mask[dir_pred1]\n\n\n#we do not scale!!\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,)\n\n#select classification\nclf1 = DecisionTreeClassifier(max_depth=max_depth,criterion=criterion).fit(x_train,y_train) \ny_pred=clf1.predict(x_test)\n\n#plot results\nprint(classification_report(y_test,y_pred))\ny_pred_df=pd.DataFrame({\"dir_pred\":y_pred},index=y_test.index)\n\n#plot results\ntable=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,)\ntable_columns1=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,normalize=\"columns\")\ntable_index=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,normalize=\"index\")\n\n\nfig, axs = plt.subplots(3,figsize = (8,10))\nsns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\nsns.heatmap(table_columns1,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\nsns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\nplt.show()\n\n\nprint(\"Features importances:\")\nfi=[\"{:.0%}\".format(x) for x in clf1.feature_importances_]\nprint(dict(zip(X.columns,fi )))\n\n\n#cross validation\n\nprint (\"***Accuracy score***\")\nprint(cross_val_score(clf1, X, Y, cv=10,scoring=\"accuracy\"))\nprint (\"***F1_macro score***\")\nprint(cross_val_score(clf1, X, Y, cv=10,scoring='f1_macro'))\n\n#tree plot\ndot_data = tree.export_graphviz(clf1, out_file=None, \n                     feature_names=X.columns,  \n                     class_names=labels,  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph.render(\"tree\")  ","a4587c81":"#@title Choose parameters and variables: Wind direction\n\nthreshold = 2  #@param {type: \"slider\", min: 0, max: 10}\nvar_threshold = \"mod_corte\" #@param [\"mod_corte\", \"mod_coron\", \"spd_o_corte\", \"spd_o_corte\"]\ndir_pred2 = ['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',] #@param [\"['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',\\\"dir_o_corte\\\"]\", \"['dir_coron', 'dir_corte', \\\"dir_o_corte\\\"]\", \"['dir_coron', 'dir_corte', \\\"dir_o_coron\\\"]\", \"['dir_coron', 'mod_coron', 'wind_gust_coron','dir_corte', 'mod_corte', 'wind_gust_corte',]\", \"[\\\"mod_corte\\\",\\\"mod_coron\\\"]\", \"[\\\"mod_corte\\\",\\\"mod_coron\\\",\\\"dir_corte\\\"]\"] {type:\"raw\"}\n\nlabels = [\"NE\",\"SE\",\"SW\",\"NW\"] #@param [\"[\\\"NE\\\",\\\"SE\\\",\\\"SW\\\",\\\"NW\\\"]\", \"[\\\"1\\\",\\\"2\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\"]\", \"[\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\",\\\"10\\\"]\"] {type:\"raw\"}\n\n\n#filter only data above a threshold\nmask=join[join[var_threshold]>=threshold].dropna()\n#cut in bins==wind quadrants exemple\nY=pd.cut(x = mask[dir_obs], bins = len(labels), labels = labels)\n\n#independent variables. Also observed variables!! if you wish\nX=mask[dir_pred2]\n\n\n#we do not scale!!\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,)\n\n#select classification\nclf2 = RandomForestClassifier().fit(x_train,y_train) \ny_pred=clf2.predict(x_test)\n\n#plot results\nprint(classification_report(y_test,y_pred))\ny_pred_df=pd.DataFrame({\"dir_pred\":y_pred},index=y_test.index)\n\n#plot results\ntable=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,)\ntable_columns2=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,normalize=\"columns\")\ntable_index=pd.crosstab(y_test,y_pred_df[\"dir_pred\"], margins=True,normalize=\"index\")\n\n\nfig, axs = plt.subplots(3,figsize = (8,10))\nsns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\nsns.heatmap(table_columns2,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\nsns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\nplt.show()\n","74ad509d":"#@title Plot results\ndelete_ten_minutes = False #@param {type:\"boolean\"}\nshow_graph = False #@param {type:\"boolean\"}\ndate_input = '2020-06-10' #@param {type:\"date\"}\nfrom datetime import datetime, timedelta, date\nfrom urllib.request import urlretrieve\nimport xarray as xr\n\ndate_input=datetime.strptime(date_input,  '%Y-%m-%d')\n#getting model variables\n\n#creating the string_url\n#analysis day= Yesterday. Time 00:00Z. \ndatetime_str = (date_input-timedelta(days = 1)).strftime('%Y%m%d')\n\n#day to forecast 1= D+1 , 2 =D+2 and so on \nforecast=1\ndataframes=[]\ndate_anal = datetime.strptime(datetime_str,'%Y%m%d')\ndate_fore=(date_anal+timedelta(days=forecast)).strftime('%Y-%m-%d')\n\n#Coron lat: 42.580 N  lon: 8.8047 W. Cortegada lat: 42.626 N  lon: 8.784 W\ncoordenates=[\"latitude=42.626&longitude=-8.784&\",\"latitude=42.580&longitude=-8.8047&\"]\n#variables string type to perform url. The same variables as model (AI)\n\ndataframes=[]\nfor coordenate in coordenates:\n  head=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"\n  text1=\"\/wrf_arw_det_history_d03_\"+datetime_str+\"_0000.nc4?\"\n  met_var=\"var=dir&var=mod&var=wind_gust&\"\n  scope1=\"time_start=\"+date_fore+\"T00%3A00%3A00Z&\"\n  scope2=\"time_end=\"+date_fore+\"T23%3A00%3A00Z&accept=netcdf\"\n  #add all the string variables\n  url=head+datetime_str+text1+met_var+coordenate+scope1+scope2\n  #load the actual model from Meteogalicia database and transform as pandas dataframe\n  urlretrieve(url,\"model\")\n  dataframes.append(xr.open_dataset(\"model\").to_dataframe().set_index(\"time\").loc[:, 'dir':])\nmodel = dataframes[0].join(dataframes[1], lsuffix='_corte', rsuffix='_coron')\n\n#model forecast bins and Machine learning forecast\n\nmodel[dir_pred0+\"_l\"]=pd.cut(pd.concat([join[dir_obs],model[dir_pred0]]),bins=len(labels),labels=labels)[-24:].astype(str)\nmodel[dir_obs+\"_decisiontree\"]=clf1.predict(model[dir_pred1])\nmodel[dir_obs+\"_randomforest\"]=clf2.predict(model[dir_pred2])\n\n\n\n#station results\nvariables_station=[\"spd_o_corte\",\"std_spd_o_corte\",\"gust_spd_o_corte\",\"dir_o_corte\"]\nparam=[\"param=81\",\"param=10009\",\"param=10003\",\"param=82\"]\n\nhead=\"http:\/\/www2.meteogalicia.gal\/galego\/observacion\/plataformas\/historicosAtxt\/DatosHistoricosTaboas_dezminutalAFicheiro.asp?\"\n\n\"\"\"Cortegada platform:15001, Ribeira buoy:15005 warnings: wind intensity negatives!!\"\"\"\nstation=\"est=15001&\"\n\n\ndateday=\"&data1=\"+date_input.strftime(\"%d\/%m\/%Y\")+\"&data2=\"+(date_input+timedelta(days = 1)).strftime(\"%d\/%m\/%Y\")\n\n\"\"\"param=83 (air temperature C) ,10018 (dew temperature C),86 (humidity%)\n,81(wind speed m\/s),10003 (wind gust m\/s),10009 (std wind speed m\/s)\n,82 (wind direction degrees),10010 (std wind direction degrees),\n10015 (gust direcction degree),20003 (temperature sea surface C),20005 (salinity),\n20004 (conductivity mS\/cm),20017 (density anomaly surface kg\/m^3),20019 (deep sea temperature degrees)\n,20018 (deep sea salinity),20022 (deep sea conductivity mS\/cm),20021 (density anomaly deep sea kg\/m^3),\n20020 (Presure water column db),20804 (East current compound cm\/s) ,20803 (North current compound cm\/s)\"\"\"\n\ndf_station=pd.DataFrame()\nfor parameters, var in zip(param,variables_station):\n  url3=head+station+parameters+dateday\n\n  #decimal are comma ,!!\n  df=pd.read_fwf(url3,skiprows=24,sep=\" \",encoding='latin-1',decimal=',').dropna()\n  df_station[\"datetime\"]=df[\"DATA\"]+\" \"+df['Unnamed: 2']\n  df_station['datetime'] = pd.to_datetime(df_station['datetime'])\n  df_station[var]=df['Valor'].astype(float)\ndf_station=df_station.set_index(\"datetime\") \n\n#merge station with meteorological model and plot\n\nfinal=pd.merge(model, df_station, left_index=True, right_index=True, how='outer')\nif show_graph:\n  g1=(final[['mod_corte',\"mod_coron\",\"spd_o_corte\"]]*1.9438).dropna().plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g2=(final[['mod_corte',\"mod_coron\",]]*1.9438).dropna().plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g3=(final[['mod_corte',\"mod_coron\",\"spd_o_corte\"]][1:]*1.9438).plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g4=(final[[\"wind_gust_corte\"\t,\"wind_gust_coron\",\"gust_spd_o_corte\"]]*1.9438).plot(title=\"wind gust velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g5=final[['dir_corte','dir_coron']].plot(title=\"Wind direction\",figsize=(9,5)).grid(True,which='both')\n\n#reample observed data hourly and show all data about spd\npd.options.display.max_rows = 999\n\n\nif delete_ten_minutes:\n  final_s=final[[\"spd_o_corte\",\"gust_spd_o_corte\",\"dir_o_corte\",dir_pred0,dir_pred0+\"_l\",\n                 dir_obs+\"_decisiontree\",dir_obs+\"_randomforest\"]].dropna()\nelse:\n  final_s=final[[\"spd_o_corte\",\"gust_spd_o_corte\",\"dir_o_corte\",dir_pred0,dir_pred0+\"_l\",\n                 dir_obs+\"_decisiontree\",dir_obs+\"_randomforest\"]]\nfinal_s","9b94bb54":"#@title Plot results\nq_df=final[[dir_obs+\"_decisiontree\",dir_obs+\"_randomforest\"]].dropna()\npd.set_option('max_colwidth', 2000)\nquantum_randomforest=[]\nquantum_decisiontree=[]\nformatter=\"{'.0%'}\".format\nfor i in range(0, len(q_df.index)):\n  quantum_randomforest.append(table_columns2[q_df[dir_obs+\"_randomforest\"][i]].map(\"{:.0%}\".format))\n  quantum_decisiontree.append(table_columns1[q_df[dir_obs+\"_decisiontree\"][i]].map(\"{:.0%}\".format))\n  \nquantum_fi=pd.DataFrame({dir_obs+\"_decision tree\":quantum_decisiontree,dir_obs+\"_randomforest\":quantum_randomforest}, index=q_df.index)\nquantum_fi","4959b9f1":"#@title Select time forecast\nhour = 17 #@param {type:\"slider\", min:0, max:23, step:1}\nH_resolution = True #@param {type:\"boolean\"}\nvariable_met = \"dir\" \n\ntoday=date_input\nyesterday=today+timedelta(days=-1)\ntoday=today.strftime(\"%Y-%m-%d\")\nyesterday=yesterday.strftime(\"%Y%m%d\")\n\n\nurl1=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det_history_d03_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.650&west=-9.00&east=-8.75&south=42.450&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nurl2=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_1km_baixas\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det1km_history_d05_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.650&west=-9.00&east=-8.75&south=42.450&disableLLSubset=on&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nif H_resolution:\n  url=url2\n  r=\"HI_\"\nelse:\n  url=url1\n  r=\"LO_\"\n\n\nurlretrieve(url,\"model\")\ndf=xr.open_dataset(\"model\").to_dataframe()\ndf_n=pd.DataFrame(df[[\"lat\",\"lon\",variable_met]].values,columns=df[[\"lat\",\"lon\",variable_met]].columns)\n\n\n\ndf_n[variable_met]= df_n[variable_met].astype(int)\n\n\ndf_n[variable_met]=df_n[variable_met].astype(str)\nkml = simplekml.Kml()\ndf_n.apply(lambda X: kml.newpoint(name=X[variable_met], coords=[( X[\"lon\"],X[\"lat\"])]) ,axis=1)\n\n#add Cortegada wind variables if variable_met mod or wind_gust\ndescription=\"units degrees\\n\"+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]+\"\\n\"+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\n\n#add Cortegada dir\nstring=final.index.strftime(\"%Y-%m-%d\")[0]+\" \"+str(hour)+\":00:00\"\nif dir_obs[-5:]==\"coron\":\n  description=\"*\"\nkml.newpoint(name=str(round(final['dir_o_corte'].loc[string],0)), description=description,coords=[(-8.7836,42.6255)]) \n \n \n#add Coron\ndescription=\"units degrees\\n\"+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]+\"\\n\"+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\nif dir_obs[-5:]==\"corte\":\n  description=\"*\"\nkml.newpoint(name=\"Coron\",description=description,coords=[(-8.8046,42.5801)])   \n\n#save results  \nkml.save(today+\"H\"+str(hour)+r+variable_met+\".kml\")","49042113":"**Randomforest**","4955f76a":"**plot results**","4b466d7d":"**kml file**","91e05a91":"**quantum results**","f8d847f9":"**Wind velocity : select independent and observed station variables, quantiles and tune. Tree plot as output pdf file**"}}