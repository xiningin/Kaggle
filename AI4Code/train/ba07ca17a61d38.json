{"cell_type":{"eb1c835a":"code","bbcd850b":"code","70f2cc8e":"code","ff02f968":"code","ed2f0b97":"code","ab4b4638":"code","5c0d1457":"code","9bf86fcf":"code","9e40d9e8":"code","d33eb56d":"code","037a8cf1":"code","af2aa297":"markdown","14372b10":"markdown","6162a755":"markdown","3d0cad49":"markdown","c38d60e0":"markdown","1c8e7a66":"markdown","04512fc3":"markdown","ff5f4ccd":"markdown","148e4525":"markdown","ce17b8ad":"markdown","c300a330":"markdown","2dd7f923":"markdown","3aef8598":"markdown","59ea597b":"markdown","d1c2128f":"markdown","156c8d00":"markdown","60c06d1d":"markdown","d25e7751":"markdown","707667f8":"markdown","1a773479":"markdown","18420c03":"markdown"},"source":{"eb1c835a":"apples = ('apples', 1.99)\noranges = ('oranges', 2.49)\nbananas = ('bananas', 1.49)\n\n# Your code goes here:\n","bbcd850b":"# Your code goes here:\n","70f2cc8e":"# Your code goes here:\n","ff02f968":"# Your code goes here:\n","ed2f0b97":"# Your code goes here:\n","ab4b4638":"# Your code goes here:\n","5c0d1457":"# Your code goes here:\n","9bf86fcf":"my_list = [98, 69, 3, 79, 4, 53, 2, 95, 97, 58, 24, 57, 32, 90,\n           15, 29, 92, 40, 22, 99, 23, 33, 55, 38, 12, 49, 9, 42,\n           7, 76, 36, 6, 86, 82, 28, 71, 30, 11, 67, 68, 65, 45,\n           94, 73, 44, 81, 54, 51, 20, 62]","9e40d9e8":"# First run the code in the above cell. Your code goes here:\n","d33eb56d":"my_list = [98, 69, 3, 79, 4, 53, 2, 95, 97, 58, 24, 57, 32, 90,\n           15, 29, 92, 40, 22, 99, 23, 33, 55, 38, 12, 49, 9, 42,\n           7, 76, 36, 6, 86, 82, 28, 71, 30, 11, 67, 68, 65, 45,\n           94, 73, 44, 81, 54, 51, 20, 62]","037a8cf1":"# First run the code in the above cell. Your code goes here:\n","af2aa297":"d) Calculate the total cost of all the items in grocery_dict.","14372b10":"a) Given the following list of integers create a dictionary that stores the min, max, and average of the numbers in the list.\n<br><br>The dictionary should look like this:<br>\n{'min': 2, 'max': 99, 'average': 49.52}\n<br><br>\n*Hint: Use the functions min(), max(), sum(), and len()\n<br> e.g. my_list = [1, 2, 3]\n<br> min(my_list) returns 1\n<br> max(my_list) returns 3\n<br> sum(my_list) returns 6\n<br> len(my_list) returns 3 (the length of the list)*","6162a755":"c) Create a dictionary called grocery_dict from grocery_list. The keys should be the food item and the values should be the price.","3d0cad49":"f) Return the name of the highest priced item in grocery_dict.","c38d60e0":"Expected result:<br>\n[('apples', 1.99), ('oranges', 2.49), ('bananas', 1.49)]","1c8e7a66":"## Exercise 1","04512fc3":"Expected result: <br>\n'bread'  ","ff5f4ccd":"Expected result:<br>\n[('apples', 1.99), ('oranges', 2.49), ('bananas', 1.49), ('bread', 3.99)]","148e4525":"a) Each of the below tuples represents a food item along with its price. Create a list named 'grocery_list' that contains all of the tuples.","ce17b8ad":"Expected result:<br>\n{'apples': 1.99, 'oranges': 2.49, 'bananas': 1.49, 'bread': 3.99}","c300a330":"e) Count the number of food items in grocery_dict.","2dd7f923":"Expected result: <br>\n4","3aef8598":"b) Create and add a new tuple to grocery_list. This new tuple should represent 'bread', and the price is 3.99.","59ea597b":"## Exercise 2","d1c2128f":"Expected result:<br>\n9.96","156c8d00":"g) The price of apples has changed to 2.99. Update grocery_dict to reflect the new price.","60c06d1d":"If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\n\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n\n\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.","d25e7751":"Expected result:<br>\n{'apples': 2.99, 'oranges': 2.49, 'bananas': 1.49, 'bread': 3.99}","707667f8":"b) Create a dictionary that records how frequently the numbers in 'my_list' fall into the following ranges:<br>\n* Greater than or equal to 0 and less than 10 -> use the key [0, 10)<br>\n* Greater than or equal to 10 and less than 20 -> use the key [10, 20)<br>\n* Greater than or equal to 20 and less than 30 -> use the key [20, 30)<br>\n* Greater than or equal to 30 and less than 40 -> use the key [20, 40)<br>\n* .. and so on up to 100\n\nExpected output:<br>\n{'[0, 10)': 6, \n '[10,20)': 3, \n '[20,30)': 6, \n '[30,40)': 5, \n '[40,50)': 5, \n '[50,60)': 6, \n '[60,70)': 5, \n '[70,80)': 4, \n '[80,90)': 3, \n '[90,100'): 7}\n","1a773479":"# Extra Exercises: String Manipulation, Dictionaries, and Tuples","18420c03":"## Exercise 3 (Optional)\nThe following is a more challenging exercise taken from Project Euler."}}