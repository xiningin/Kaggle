{"cell_type":{"52d8dcc9":"code","2e4e3c19":"code","569c2184":"code","bccd55a2":"code","b6b124f3":"code","3cf27bbd":"code","58e2055d":"code","78fb81d7":"code","46e0fd23":"code","895a3d0c":"code","dfbd8caa":"code","c094db03":"code","ee44861f":"code","6ea72116":"code","a1f4e84c":"markdown","00a688ce":"markdown","c289e63d":"markdown","9c10d859":"markdown","18a61bb5":"markdown","4cc3b134":"markdown","19ef67b1":"markdown","916a660f":"markdown","0d91b04f":"markdown"},"source":{"52d8dcc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e4e3c19":"import pandas as pd\nimport nltk\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import PassiveAggressiveClassifier\nfrom nltk import word_tokenize\nfrom nltk.stem.porter import PorterStemmer\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n","569c2184":"df=pd.read_csv('\/kaggle\/input\/fake-news\/train.csv')\n","bccd55a2":"df.shape","b6b124f3":"df.isnull().sum()","3cf27bbd":"df = df.fillna(' ')","58e2055d":"df.isnull().sum()\n","78fb81d7":"X= df.drop(columns='label', axis=1)\nY = df['label']\nprint(X\n     )","46e0fd23":"X = df['text'].values\nY = df['label'].values","895a3d0c":"tfidf_vectorizer = TfidfVectorizer(stop_words='english',max_df=0.7)\ntfidf_vectorizer.fit(X)\nX = tfidf_vectorizer.transform(X)","dfbd8caa":"print(X)","c094db03":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, stratify=Y, random_state=2)\n","ee44861f":"pac=PassiveAggressiveClassifier(max_iter=50)\npac.fit(X_train,Y_train)\n","6ea72116":"y_pred=pac.predict(X_test)\nscore=accuracy_score(Y_test,y_pred)\nprint(f'Accuracy: {round(score*100,2)}%')\n","a1f4e84c":"3- Make vectorizer matrix","00a688ce":"2- Split the label we want to predict","c289e63d":"# Start Train the Passive Classifier Model","9c10d859":"**First step is read data **","18a61bb5":"# Split data to train and test sets","4cc3b134":"#  Predict on the test set and calculate accuracy\n","19ef67b1":"**> Import necessary libraries **","916a660f":"1- Fill empty values","0d91b04f":"# **Start to Data Cleaning : Fill Empty Coulmns , Removing Stop Words, Unnecessary Characters and Stemming \n# \n"}}