{"cell_type":{"93a189b1":"code","b4d9e7f5":"code","b03aa425":"code","3c42e6fe":"code","8437756a":"code","bd46acdd":"code","8e28d9eb":"code","432f8e1b":"code","299507fd":"code","ef07093a":"code","56d04032":"code","0382c690":"code","2bd7a214":"code","8a3c00e1":"code","b010e5f9":"code","15e98811":"code","2990b949":"code","5baa16c4":"code","0181529b":"code","0f9fced0":"code","939def06":"code","7039de70":"code","c7aeb948":"code","0e5aaf35":"code","5dcb14e7":"code","8c69c2d4":"code","8d79422e":"code","c903cf05":"code","62525f35":"code","ea3ef262":"code","b3e48e73":"code","cb9f6c85":"code","15a528f1":"code","a2477398":"code","3fe2f568":"code","d1a5e52d":"code","bf51c6a8":"markdown","b88f7da7":"markdown","8d826f60":"markdown","d2292ca8":"markdown","8bef70d3":"markdown","816f33bf":"markdown","d897a33e":"markdown","2716dec8":"markdown","1928f506":"markdown","16462624":"markdown","1eef365a":"markdown","71278e41":"markdown","c7a98dae":"markdown","442fdee3":"markdown","2c9ed157":"markdown","1d069af0":"markdown","9eb7b247":"markdown"},"source":{"93a189b1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score, classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","b4d9e7f5":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf.head()","b03aa425":"df.shape","3c42e6fe":"def print_image(index):\n    some_digit = df.iloc[index,1:].values\n    some_digit_img = some_digit.reshape(28,28)\n    plt.imshow(some_digit_img,'binary')","8437756a":"print_image(1900)","bd46acdd":"# seperating faetues and target column\nx = df.drop('label', axis=1)\nprint(\"features shape: \", x.shape)\ny = df.label\nprint(\"Target shape: \", y.shape)","8e28d9eb":"for i in range(10):\n    #plt.subplot(5,4, i+1)\n    plt.xticks([])\n    plt.yticks([])\n    print_image(i)\n    plt.xlabel('label:{}'.format(y[i]))\n    plt.show()","432f8e1b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, random_state=42, test_size=0.3)","299507fd":"print('Shape of X_train:', X_train.shape)\nprint('Shape of y_train:', y_train.shape)\nprint('Shape of X_test:', X_test.shape)\nprint('Shape of y_test:', y_test.shape)","ef07093a":"dt = DecisionTreeClassifier()\ndt = dt.fit(X_train,y_train) ","56d04032":"y_pred_test_dtf = dt.predict(X_test)\ny_pred_train_dtf = dt.predict(X_train)","0382c690":"y_pred_test_dtf","2bd7a214":"y_pred_train_dtf","8a3c00e1":"print (\"Accuracy on Training Data\", dt.score(X_train, y_train))\nprint (\"Accuracy on Test Data\", dt.score(X_test, y_test))","b010e5f9":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_pred_test_dtf))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred_test_dtf))","15e98811":"rf = RandomForestClassifier()\nrf.fit(X_train, y_train)","2990b949":"train_pred_rf = rf.predict(X_train)\npred_rf = rf.predict(X_test)","5baa16c4":"print(\"Training Accuracy: \",accuracy_score(y_train, train_pred_rf))\nprint(\"Test Accuracy: \",accuracy_score(y_test, pred_rf))","0181529b":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, pred_rf))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, pred_rf))","0f9fced0":"nb = GaussianNB()\nnb = nb.fit(X_train, y_train)","939def06":"y_prednb_test = nb.predict(X_test)\ny_prednb_train = nb.predict(X_train)","7039de70":"y_prednb_test","c7aeb948":"y_prednb_train","0e5aaf35":"print (\"Accuracy on Training Data\", nb.score(X_train, y_train))\nprint (\"Accuracy on Test Data\", nb.score(X_test, y_test))","5dcb14e7":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, y_prednb_test))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_prednb_test))","8c69c2d4":"df1 = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ndf1.head()","8d79422e":"df1.shape","c903cf05":"def print_testimage(index):\n    some_digit = df1.iloc[index].values\n    some_digit_img = some_digit.reshape(28,28)\n    plt.imshow(some_digit_img,'binary')","62525f35":"print_testimage(480)","ea3ef262":"testdata2 = dt.predict(df1)\ntestdata2","b3e48e73":"testdata3 = nb.predict(df1)\ntestdata3","cb9f6c85":"testdata4 = rf.predict(df1)\ntestdata4","15a528f1":"print_testimage(1897)","a2477398":"# DecisionTree\ntestdata2[1897]","3fe2f568":"# Naive Bayes\ntestdata3[1897]","d1a5e52d":"# RandomForest\ntestdata4[1897]","bf51c6a8":"<h2 align='center'> Decision Tree <\/h2>","b88f7da7":"### Predicting Values","8d826f60":"### Checking first 10 images with their labels","d2292ca8":"### Function to print Image","8bef70d3":"### Accuracy Score ","816f33bf":"<h2 align='center'> Random Forest <\/h2>","d897a33e":"### Accuracy Score ","2716dec8":"### Test Data ","1928f506":"### Loading Dataset","16462624":"### Random Prediction","1eef365a":"### Importing essential libraries","71278e41":"<h2 align='center'> Conclusion :  <\/h2> \n<hr>\n\n- RandomForest is best at predicting Handwritten digits ie it got accuracy of 96%\n- Naive Bayes is not good for predciting Handwritten digits\n\n\n# If you like the notebook, Please do upvote :) Thank you ","c7a98dae":"<h2 align=\"center\">Mnist Dataset of Handwritten images <\/h2>","442fdee3":"### Predicting Values","2c9ed157":"<h2 align='center'> Navive Bayes <\/h2>","1d069af0":"- Digits are predicted correctly. Hence we can say that the model is pretty good in predicting handwritten digit.","9eb7b247":"### Splitting dataset into train and test set "}}