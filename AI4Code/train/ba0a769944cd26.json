{"cell_type":{"b5f3d5e6":"code","58303ec6":"code","88341157":"code","92186c13":"code","775fd905":"code","f242efe2":"code","a1e095c6":"code","cd9fe303":"code","87299619":"code","ac5c6be5":"code","c93d8018":"code","c27a914b":"code","8eac47e6":"code","a0333e63":"code","76b2de8d":"code","c7bd96e5":"code","93a9364d":"code","99c5f897":"code","6e54343b":"markdown","eec48fe5":"markdown","44b25e10":"markdown","0e5ade09":"markdown","c353041a":"markdown","2b66eac0":"markdown"},"source":{"b5f3d5e6":"import lime\nimport sklearn\nimport numpy as np\nimport sklearn\nimport sklearn.ensemble\nimport sklearn.metrics\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","58303ec6":"from sklearn.datasets import fetch_20newsgroups\ncategories = ['alt.atheism', 'soc.religion.christian']\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=categories)\nnewsgroups_test = fetch_20newsgroups(subset='test', categories=categories)\nclass_names = ['atheism', 'christian']","88341157":"vectorizer = sklearn.feature_extraction.text.TfidfVectorizer(lowercase=False)\ntrain_vectors = vectorizer.fit_transform(newsgroups_train.data)\ntest_vectors = vectorizer.transform(newsgroups_test.data)","92186c13":"train_data_df = pd.DataFrame(data= newsgroups_train.data, columns = ['text'])","775fd905":"train_data_df['target'] = newsgroups_train.target","f242efe2":"train_data_df[train_data_df['target'] == 0].shape","a1e095c6":"train_data_df[train_data_df['target'] == 1].shape","cd9fe303":"!wget https:\/\/p7.hiclipart.com\/preview\/87\/102\/552\/anonymous-guy-fawkes-mask-clip-art-anonymous-mask.jpg\n!pip install qgrid","87299619":"from wordcloud import WordCloud, STOPWORDS \nimport matplotlib.pyplot as plt \nfrom PIL import Image\nfrom wordcloud import ImageColorGenerator\n\nchar_mask = np.array(Image.open(\"anonymous-guy-fawkes-mask-clip-art-anonymous-mask.jpg\"))    \nimage_colors = ImageColorGenerator(char_mask)","ac5c6be5":"news_words = '' \nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in train_data_df[train_data_df['target'] == 0].text: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    news_words += \" \".join(tokens)+\" \"","c93d8018":"wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10,\n                mask=char_mask,\n                max_words=400\n                     ).generate(news_words) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \n#plt.imshow(wordcloud.recolor(color_func=image_colors))\nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","c27a914b":"news_words_1 = '' \nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in train_data_df[train_data_df['target'] == 1].text: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    news_words_1 += \" \".join(tokens)+\" \"\n    \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10,\n                mask=char_mask,\n                max_words=400\n                     ).generate(news_words_1) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \n#plt.imshow(wordcloud.recolor(color_func=image_colors))\nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","8eac47e6":"rf = sklearn.ensemble.RandomForestClassifier(n_estimators=500)\nrf.fit(train_vectors, newsgroups_train.target)\npred = rf.predict(test_vectors)\nsklearn.metrics.f1_score(newsgroups_test.target, pred, average='binary')","a0333e63":"pred = rf.predict(train_vectors)\nsklearn.metrics.f1_score(newsgroups_train.target, pred, average='binary')","76b2de8d":"train_data_df['predicted_output']  = pred","c7bd96e5":"train_data_df.head(5)","93a9364d":"news_words_pred_0 = '' \nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in train_data_df[train_data_df['predicted_output'] == 0].text: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    news_words_pred_0 += \" \".join(tokens)+\" \"\n    \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10,\n                mask=char_mask,\n                max_words=400\n                     ).generate(news_words_pred_0) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \n#plt.imshow(wordcloud.recolor(color_func=image_colors))\nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","99c5f897":"news_words_pred_1 = '' \nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in train_data_df[train_data_df['predicted_output'] == 1].text: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    news_words_pred_1 += \" \".join(tokens)+\" \"\n    \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10,\n                     mask=char_mask).generate(news_words_pred_1) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \n#plt.imshow(wordcloud.recolor(color_func=image_colors))\nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","6e54343b":"## Fit A Model And Predict Value","eec48fe5":"## Word Cloud Train Data (Class 1)","44b25e10":"## Compare this two WordClouds with Previous Two to understand how the model learned\n### Also, we can have slider with top n Words\n","0e5ade09":"## Preparing Train Data For WordCloud","c353041a":"## Word Cloud Train Data (Class 0)","2b66eac0":"## Creating WordCloud on Predicted Output\n\nTo Understand Better The Key Elements in Train Data and  the Model After its Prediction are same or not"}}