{"cell_type":{"54ea6036":"code","5e992b3a":"code","9ed66ef7":"code","2d783b9d":"code","1225a43d":"code","6db0d661":"code","8c0297a9":"code","3556c0b7":"code","4bbe663e":"code","4e87ff09":"code","67547ce6":"code","b92f1c31":"code","603ef9df":"code","ddf42a06":"code","f3952df9":"code","8ae54ea9":"code","90996418":"code","cd82af24":"code","8e778bcf":"code","62b69ce3":"code","f69a6f52":"code","d013c16a":"code","e910b5cc":"code","59494fcd":"code","ddce283f":"code","a609ddfa":"markdown","0ea5363c":"markdown","006f371c":"markdown","415e727a":"markdown"},"source":{"54ea6036":"#import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True) #offline modela ilgili\nimport plotly.graph_objs as go\n# word cloud library\nfrom wordcloud import WordCloud\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","5e992b3a":"#read the data\nbook_tags = pd.read_csv('..\/input\/goodbooks-10k\/book_tags.csv',encoding=\"Latin1\")\nbooks = pd.read_csv('..\/input\/goodbooks-10k\/books.csv', encoding=\"Latin1\")\nratings = pd.read_csv('..\/input\/goodbooks-10k\/ratings.csv',encoding=\"Latin1\")\ntags = pd.read_csv('..\/input\/goodbooks-10k\/tags.csv', encoding=\"Latin1\")\nto_read = pd.read_csv('..\/input\/goodbooks-10k\/to_read.csv',encoding=\"Latin1\")","9ed66ef7":"books.head(2)","2d783b9d":"books.shape","1225a43d":"books.info()","6db0d661":"books.describe()","8c0297a9":"books['authors'].unique()","3556c0b7":"len(books['authors'].unique())","4bbe663e":"books['average_rating'].sort_values(ascending=False)","4e87ff09":"# clean the data\nbooks['authors'].value_counts(dropna=False)","67547ce6":"import warnings\nwarnings.filterwarnings(\"ignore\")","b92f1c31":"# the avarage reviews that given authors on goodreads.\ndf = books.work_text_reviews_count>29700\nbooks_newdata2=books[df]\nmelted_books2= pd.melt(frame=books_newdata2,id_vars='authors',value_vars='work_text_reviews_count')\nreviews_list= list(melted_books2['authors'].unique())\nauthor_reviews_ratio=[]\n\nfor i in reviews_list:\n    x= melted_books2[melted_books2['authors']==i]\n    author_reviews_ratio_rate=sum(x.value)\/len(x)\n    author_reviews_ratio.append(  author_reviews_ratio_rate)\n\ndata = pd.DataFrame({'reviews_list':reviews_list,'author_reviews_ratio':author_reviews_ratio})\nnew_index = (data['author_reviews_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data.reindex(new_index)\n\n#visualization\nplt.figure(figsize=(30,20))\nsns.barplot(x=sorted_data2['reviews_list'],y=sorted_data2['author_reviews_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Authors',size='30')\nplt.ylabel('Avarage Reviews')\nplt.title('Avarage Reviews Given Authors',color='purple',size='30')\nplt.show()","603ef9df":"#change some features' name.\ndata1= books.head(20)\ndata1.rename(columns={'ratings_1':'R1', 'ratings_2':'R2','ratings_3':'R3','ratings_4':'R4','ratings_5':'R5'}, inplace=True)","ddf42a06":"# Percentage of Ratings According to Authors\nauthor_list= list(data1['authors'].unique())\n\nratings1= []\nratings2= []\nfor i in author_list:\n    \n    x = data1[data1['authors']==i]\n    ratings1.append(sum(x.R1)\/len(x))\n    ratings2.append(sum(x.R2)\/len(x))\n    \nf,ax = plt.subplots(figsize = (5,8))\nsns.barplot(x=ratings1,y=author_list,color='green',alpha = 0.5,label='Rating1' )\nsns.barplot(x=ratings2,y=author_list,color='blue',alpha = 0.5,label='Rating2' )\nax.legend(loc='lower right',frameon = True)   \nax.set(xlabel='Percentage of Ratings', ylabel='Authors',title = \"Percentage of Ratings According to Authors \")\nplt.show()\n","f3952df9":"# prepare data frames\ndf2004 = books[books.original_publication_year == 2004].iloc[:200,:]\ndf2005 = books[books.original_publication_year == 2005].iloc[:200,:]\ndf2003 = books[books.original_publication_year == 2003].iloc[:200,:]\n\nimport plotly.graph_objs as go\ntrace1 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R1,\n                    mode = \"markers\",\n                    name = \"2004\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2004.authors)\ntrace2 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R2,\n                    mode = \"markers\",\n                    name = \"2005\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2005.authors)\ntrace3 =go.Scatter(\n                    x = data1.average_rating,\n                    y = data1.R3,\n                    mode = \"markers\",\n                    name = \"2003\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2003.authors)\ndata = [trace1, trace2, trace3]\nlayout = dict(\n              xaxis= dict(title= 'Average Ratings',ticklen= 9,zeroline= False),\n              yaxis= dict(title= 'Ratings',ticklen= 9,zeroline= False),\n              title = \"Ratings and Avarage Ratings of 2004\/2005\/2006\"\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","8ae54ea9":"data3=books.head(6)\nsta = books.average_rating.value_counts().index[:10]  \nplt.figure(figsize = (8,5))\nsns.barplot(x=sta,y =books.average_rating.value_counts().values[:10]) \nplt.title('Avarage Ratings of First 10 Books ',color = 'blue',fontsize=15)\nplt.show()","90996418":"df = books[books.original_publication_year == 2014].iloc[:10,:]\n\nimport plotly.graph_objs as go\n\nx = df.authors\ntrace1 = {\n  'x': x,\n  'y': df.ratings_1,\n  'name': 'ratings_1',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df.ratings_2,\n  'name': 'ratings_2',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 Authors'},\n  'barmode': 'relative',\n  'title': 'Ratings1 and Ratings2 of Top 10 Authors in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","cd82af24":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf = books[books.original_publication_year == 2009].iloc[:7,:]\npie1 = df.ratings_1\ndf1 = books[books.original_publication_year == 2010].iloc[:7,:]\npie2 = df1.ratings_1\nlabels = df.authors.value_counts().index\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=pie1, name=\"Number Of Authors Rates\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=pie1, name=\"Number Of Authors Rates\"),\n              1, 2)\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.45, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    height=800, width=800,\n    title_text=\"Number of Authors Ratings Rates\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='2009', x=0.175, y=0.5, font_size=14, showarrow=False),\n                 dict(text='2010', x=0.82, y=0.5, font_size=14, showarrow=False)])\nfig.show()","8e778bcf":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\ndf1 = books.authors[books.original_publication_year == 2009]\nplt.subplots(figsize=(7,7))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(df1))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","62b69ce3":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\ndf1 = books[books.original_publication_year == 2009]\ntrace0 = go.Scatter(\n    y=df1.ratings_1,\n    name = 'Rating1',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Scatter(\n    y=df1.ratings_2,\n    name = 'Rating2',\n     xaxis='x2',\n     yaxis='y2',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Ratings1 and Ratings2 of 2009'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f69a6f52":"books2= books.drop(columns=['work_id','id','book_id','best_book_id','best_book_id','isbn13','original_publication_year',\"image_url\",\"small_image_url\"])","d013c16a":"books2.corr()","e910b5cc":"f,ax = plt.subplots(figsize=(7,7))\nsns.heatmap(books2.corr(), annot=True, linewidths=0.6,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show() ","59494fcd":"from scipy import stats\ndata_new = pd.DataFrame({'ratings1':ratings1,'ratings2':ratings2})\ng = sns.jointplot(data_new.ratings1, data_new.ratings2, kind=\"kde\", size=5)\ng = g.annotate(stats.pearsonr)\nplt.show()","ddce283f":"sns.lmplot(x=\"ratings_3\", y=\"work_ratings_count\", data=books2)\nplt.show()","a609ddfa":"\n- **Lm Plot** shows the results of a linear regression within each dataset can be used in Machine learning (for instance when solving a regression problem).\n","0ea5363c":"**INTRODUCTION**\n- This dataset contains ratings for ten thousand popular books. \n\n - Import libraries\n - Read the data\n - Information about data\n - Clean the data\n - The avarage reviews that given authors on goodreads\n - Percentage of Ratings According to Authors\n - Rating comparisons\n - Correlation research \n \n","006f371c":"> - Data has tweenty three columns and 10000 rows.","415e727a":"- **Correlation coefficient** is a statistical method used to determine the direction and severity of relationship between two numerical measurements which have a linear relationship.\n\n-If the data is normally distributed,** Pearson correlation coefficient** is preferred but if it is not, **Spearman rank correlation coefficient ** is preferred.\n-In order to interpret a correlation coefficient, p value should be less than 0.05.\n\n- **Pearson correlation coefficient (r)**\n- r <0.2 very weak relationship or no correlation\n- 0.2<r<0.4 poor correlation between\n- 0.4<r<0.6 moderate correlation between \n- 0.6<r<0.8 high correlation between \n- r>0.8 is interpreted to be very high correlation.\n\n-If the correlation coefficient is negative,there is an inverse proportion between the two variables,that means when the value of one variable increases, the other decreases. If the correlation coefficient is positive, when the value of one variable increases, the other increases as well."}}