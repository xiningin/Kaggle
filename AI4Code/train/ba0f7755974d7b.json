{"cell_type":{"440ce583":"code","c88652ac":"code","226c3527":"code","1078e982":"code","ed4a7271":"code","85f0d3c7":"code","53c42943":"code","59bf9d4b":"code","6663573f":"code","c1311a5a":"code","bac7502b":"code","4a49a83b":"code","21c55a08":"code","d28e5555":"code","28b07634":"code","a49fcea9":"code","38e0c9b5":"code","fb45c4a1":"code","2f1989e7":"code","af1f56a0":"code","33c6889e":"code","d512e2e8":"code","9d52f8da":"code","519b8d16":"code","98f03014":"code","d89543a8":"code","88b24a87":"code","ae3204f7":"code","2959faa1":"code","2a4076d7":"code","55edd45b":"code","7a09e95c":"markdown"},"source":{"440ce583":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c88652ac":"!pip install shap","226c3527":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.decomposition import PCA\nimport shap","1078e982":"from sklearn.feature_selection import VarianceThreshold","ed4a7271":"SEED=42","85f0d3c7":"train_data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\n#train_data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv').drop('cat10',axis=1)\ntrain_target=train_data.target.values\ntest_data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\n#test_data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv').drop(['cat10'],axis=1)","53c42943":"print(len(train_data.columns),train_data.columns)\nprint(len(test_data.columns),test_data.columns)","59bf9d4b":"train_data['kfold']=-1\ntrain_data=train_data.sample(frac=1).reset_index(drop=True)\nFOLD=10\nskf=StratifiedKFold(n_splits=FOLD)\n\nfor fold,(train_,valid_) in enumerate(skf.split(train_data,train_target)):\n    train_data.loc[valid_,'kfold']=fold","6663573f":"print('Whole Data')\nprint(train_data.target.value_counts())\nprint()\nprint(train_data.target.value_counts(normalize=True),'\\n')\n\nfor i in range(FOLD):\n    print(f'Epoch:{i+1}')\n    print(train_data[train_data.kfold==i].target.value_counts(normalize=True))","c1311a5a":"train_data.to_csv('train_data_stratified_10folds.csv',index=False)","bac7502b":"features=train_data.drop(['id','target'],axis=1).columns\nprint(features)","4a49a83b":"cat_features=train_data.select_dtypes('object').columns\nnum_features=train_data.select_dtypes('float').columns\n\nprint(cat_features)\nprint(num_features)","21c55a08":"for feat in cat_features:\n    print(feat)\n    print(train_data[feat].value_counts(),'\\n')","d28e5555":"le=LabelEncoder()\n\nfor feature in cat_features:\n    print(feature)\n    le.fit(pd.concat([train_data[feature],test_data[feature]],axis=0,sort=False))\n    train_data[feature]=le.transform(train_data[feature])\n    test_data[feature]=le.transform(test_data[feature])","28b07634":"train_data.dtypes","a49fcea9":"train_data_numerical=train_data[num_features].copy()\nprint(train_data_numerical.shape,end='\\n')\nprefix='PCA_'\npca=PCA(n_components=4,random_state=SEED)\ntrain_data_numerical_pca=pd.DataFrame(pca.fit_transform(train_data_numerical))\ntrain_data_numerical_pca.rename(columns=lambda x:str(prefix)+str(x),inplace=True)\nprint('PCA:')\nprint(train_data_numerical_pca.shape)\nprint((train_data_numerical_pca.columns))\nprint(pca.explained_variance_ratio_)","38e0c9b5":"valid_auc_cat=[]\nprint('Categorical Variables Only:')\nfor fold in range(FOLD):\n    print(f'Fold:{fold+1}')\n    \n    x_train=train_data[train_data['kfold']!=fold][cat_features]\n    y_train=train_data[train_data['kfold']!=fold]['target']\n    x_valid=train_data[train_data['kfold']==fold][cat_features]\n    y_valid=train_data[train_data['kfold']==fold]['target']\n    \n    train_lgb_dataset=lgb.Dataset(x_train,label=y_train)\n    valid_lgb_dataset=lgb.Dataset(x_valid,label=y_valid)\n    \n    model_lgb=lgb.LGBMClassifier()\n    model_lgb.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_valid,y_valid)],verbose=False)\n    y_valid_pred=model_lgb.predict_proba(x_valid)[:,1]\n    print(roc_auc_score(y_valid,y_valid_pred))\n    valid_auc_cat.append(roc_auc_score(y_valid,y_valid_pred))\n    \nprint(f\"Mean ROC AUC:{np.mean(valid_auc_cat)}\")","fb45c4a1":"valid_auc_num=[]\nprint('Numerical Variables Only:')\nfor fold in range(FOLD):\n    print(f'Fold:{fold+1}')\n    \n    x_train=train_data[train_data['kfold']!=fold][num_features]\n    y_train=train_data[train_data['kfold']!=fold]['target']\n    x_valid=train_data[train_data['kfold']==fold][num_features]\n    y_valid=train_data[train_data['kfold']==fold]['target']\n    \n    train_lgb_dataset=lgb.Dataset(x_train,label=y_train)\n    valid_lgb_dataset=lgb.Dataset(x_valid,label=y_valid)\n    \n    model_lgb=lgb.LGBMClassifier()\n    model_lgb.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_valid,y_valid)],verbose=False)\n    y_valid_pred=model_lgb.predict_proba(x_valid)[:,1]\n    print(roc_auc_score(y_valid,y_valid_pred))\n    valid_auc_num.append(roc_auc_score(y_valid,y_valid_pred))\n    \nprint(f\"Mean ROC AUC:{np.mean(valid_auc_num)}\")","2f1989e7":"valid_auc_cat_pca=[]\n\nprint('Cat Variables +PCA 4 features:')\nfor fold in range(FOLD):\n    print(f'Fold:{fold+1}')\n    \n    x_train=pd.concat([train_data[cat_features],train_data_numerical_pca],axis=1)[train_data['kfold']!=fold]\n    y_train=train_data[train_data['kfold']!=fold]['target']\n    x_valid=pd.concat([train_data[cat_features],train_data_numerical_pca],axis=1)[train_data['kfold']==fold]\n    y_valid=train_data[train_data['kfold']==fold]['target']\n    \n    model_lgb=lgb.LGBMClassifier(random_state=SEED,n_estimators=1000)\n    model_lgb.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_valid,y_valid)],verbose=False)\n    y_valid_pred=model_lgb.predict_proba(x_valid)[:,1]\n    print(\"Original Score:\",roc_auc_score(y_valid,y_valid_pred))\n    valid_auc_cat_pca.append(roc_auc_score(y_valid,y_valid_pred))\n    \n    \nprint(f\"Mean ROC AUC:{np.mean(valid_auc_cat_pca)}\") ","af1f56a0":"valid_auc=[]\n\nprint('Cat Variables +Numerical Variables:')\nfor fold in range(FOLD):\n    print(f'Fold:{fold+1}')\n    \n    x_train=train_data[train_data['kfold']!=fold].drop(['id','kfold','target'],axis=1)\n    y_train=train_data[train_data['kfold']!=fold]['target']\n    x_valid=train_data[train_data['kfold']==fold].drop(['id','kfold','target'],axis=1)\n    y_valid=train_data[train_data['kfold']==fold]['target']\n    \n    model_lgb = lgb.LGBMClassifier(\n                    random_state=SEED,\n                    cat_l2=25.999876242730252,\n                    cat_smooth=89.2699690675538,\n                    colsample_bytree=0.2557260109926193,\n                    learning_rate=0.003,\n                    max_bin=788,\n                    max_depth=81,\n                    metric=\"auc\",\n                    min_child_samples=292,\n                    min_data_per_group=177,\n                    n_estimators=400000,\n                    n_jobs=-1,\n                    num_leaves=171,\n                    reg_alpha=0.7115353581785044,\n                    reg_lambda=5.658115293998945,\n                    subsample=0.9262904583735796,\n                    subsample_freq=1,\n                    verbose=-1,\n                )\n    \n    model_lgb.fit(x_train,y_train,early_stopping_rounds=200,eval_set=[(x_valid,y_valid)],verbose=False)\n    y_valid_pred=model_lgb.predict_proba(x_valid)[:,1]\n    print(\"Original Score:\",roc_auc_score(y_valid,y_valid_pred))\n    valid_auc.append(roc_auc_score(y_valid,y_valid_pred))\n    y_train_pred_score=model_lgb.predict_proba(x_train,raw_score=True)\n    \nprint(f\"Mean Original ROC AUC:{np.mean(valid_auc)}\") ","33c6889e":"x_valid=train_data[train_data['kfold']==0].drop(['id','kfold','target'],axis=1)\ny_valid=train_data[train_data['kfold']==0]['target']\n    \nmodel_lgb=lgb.LGBMClassifier(random_state=SEED,n_estimators=1000)\nmodel_lgb.fit(x_valid,y_valid,early_stopping_rounds=200,eval_set=[(x_valid,y_valid)],verbose=False)\n\nexplainer=shap.Explainer(model_lgb,x_valid)\nshap_values_lgb=explainer(x_valid,check_additivity=False)","d512e2e8":"shap.summary_plot(shap_values_lgb, x_valid)","9d52f8da":"shap.plots.waterfall(shap_values_lgb[0],max_display=31)","519b8d16":"shap.summary_plot(shap_values_lgb, x_valid)","98f03014":"valid_auc=[]\n\nfor fold in range(FOLD):\n    print(f'Fold:{fold+1}')\n    \n    x_train=train_data[train_data['kfold']!=fold].drop(['id','kfold','target'],axis=1)\n    y_train=train_data[train_data['kfold']!=fold]['target']\n    x_valid=train_data[train_data['kfold']==fold].drop(['id','kfold','target'],axis=1)\n    y_valid=train_data[train_data['kfold']==fold]['target']\n\n    model_xgb=xgb.XGBClassifier(n_estimators=1000,n_jobs=-1,random_state=SEED)\n    model_xgb.fit(x_train,y_train,eval_set=[(x_valid,y_valid)],eval_metric='auc',early_stopping_rounds=30,verbose=0)\n    y_valid_pred=model_xgb.predict_proba(x_valid)[:,1]\n    print(\"Original Score:\",roc_auc_score(y_valid,y_valid_pred))\n    valid_auc.append(roc_auc_score(y_valid,y_valid_pred))\n    # y_train_pred_score=model_xgb.predict_proba(x_train)\n    \nprint(f\"Mean ROC AUC :{np.mean(valid_auc)}\") \n","d89543a8":"xgb.plot_importance(model_xgb,importance_type='weight')","88b24a87":"xgb.plot_importance(model_xgb,importance_type='cover')","ae3204f7":"xgb.plot_importance(model_xgb,importance_type='gain')","2959faa1":"feature_imp_xgb=pd.DataFrame(sorted(zip(model_xgb.feature_importances_,train_data.drop(['id','kfold','target'],axis=1))), columns=['Value','Feature'])\nfeature_imp_xgb","2a4076d7":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\", index_col='id')\nsubmission['target'] =model_lgb.predict_proba(test_data.drop(['id'],axis=1))[:,1]\nsubmission.to_csv('model_lgb_high.csv')","55edd45b":"display(submission)","7a09e95c":"## **Categorical Variable are more important than Numerical Variables**"}}