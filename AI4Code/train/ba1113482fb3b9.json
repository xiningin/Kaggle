{"cell_type":{"3197790d":"code","0ca8763a":"code","b3a59329":"code","2f66377c":"code","3ad0b7e2":"code","428969d9":"code","c1b691a6":"code","ac14359b":"code","c9a877ea":"code","528d341e":"code","09a0f418":"code","7dcfaa6d":"code","5834ec4a":"code","0490999e":"code","ff55a64b":"code","a3051a32":"code","baa27895":"code","631183c9":"code","6158b613":"code","2067d3c1":"code","17a57f84":"code","e6be2c33":"code","4697a531":"code","3c3566aa":"code","2e4bfaa5":"code","245fcc7a":"code","108360e9":"code","c33a6c95":"code","25fad002":"markdown","6b479080":"markdown","260625fd":"markdown","b964e16a":"markdown","0f88db5f":"markdown","a8802bfe":"markdown","3e9eb6dc":"markdown","77df3f3a":"markdown","eb0fb84d":"markdown","944aa052":"markdown","11a4bc9f":"markdown","ab56e9e5":"markdown","e6448965":"markdown","5ce37edd":"markdown","dbc568e3":"markdown","c23fa514":"markdown","a0d2a25a":"markdown","b41523bf":"markdown","a066821c":"markdown","400cea6d":"markdown","5bcc00c4":"markdown","d52b9cfe":"markdown","aa5e6b67":"markdown","61928adc":"markdown","c2ad8fa9":"markdown","7dfad290":"markdown","bd427f19":"markdown","fe397204":"markdown","334f1811":"markdown","6d4eba7a":"markdown","88c20b2a":"markdown","e1153862":"markdown","33964db7":"markdown","0550f22e":"markdown","b1153b63":"markdown","81ac0d0a":"markdown","a3079caa":"markdown","bf63b233":"markdown","67bf6e84":"markdown","8d7dd721":"markdown","0b5a95c5":"markdown","097b82d1":"markdown","52c6958d":"markdown","997b702a":"markdown","1125be9e":"markdown","8447d11d":"markdown"},"source":{"3197790d":"import plotly.graph_objects as go\nimport plotly.offline as py\nautosize =False\n\n\n# Use `hole` to create a donut-like pie chart\nvalues=[35, 65]\nlabels=['Recommended Purchases',\"Original Purchases\"]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=15,\n                  marker=dict(colors=['#00008b','#000'], line=dict(color='#FFFFFF', width=2.5)))\nfig.update_layout(\n    title='Recommended Purchases VS Original')\npy.iplot(fig)","0ca8763a":"# Use `hole` to create a donut-like pie chart\nvalues=[75, 25]\nlabels=['Recommended Content',\"Originals\"]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=15,\n                  marker=dict(colors=['#DAA520','#800000'], line=dict(color='#FFFFFF', width=2.5)))\nfig.update_layout(\n    title='Recommended Views VS Original')\naustosize=False\npy.iplot(fig)","b3a59329":"import numpy as np\nfrom lightfm.data import Dataset\nfrom lightfm import LightFM\nfrom lightfm.evaluation import precision_at_k\nfrom lightfm.evaluation import auc_score\nfrom lightfm.datasets import fetch_movielens\nfrom lightfm.cross_validation import random_train_test_split\nfrom scipy.sparse import coo_matrix as sp","2f66377c":"data = fetch_movielens(min_rating = 4.0)","3ad0b7e2":"print(repr(data['train']))\nprint(repr(data['test']))","428969d9":"model = LightFM(loss = 'warp')","c1b691a6":"model.fit(data[\"train\"], epochs=30, num_threads=2)","ac14359b":"def sample_recommendation(model, data, user_ids):\n    n_users, n_items = data['train'].shape\n    for user_id in user_ids:\n        known_positives = data['item_labels'][data['train'].tocsr()                                    \n                          [user_id].indices]\n        \n        scores = model.predict(user_id, np.arange(n_items))\n\n        top_items = data['item_labels'][np.argsort(-scores)]\n\n        print(\"User %s\" % user_id)\n        print(\"     Known positives:\")\n        \n        for x in known_positives[:3]:\n            print(\"        %s\" % x)\n        \n        print(\"     Recommended:\")\n        \n        for x in top_items[:3]:\n            print(\"        %s\" % x)","c9a877ea":"sample_recommendation(model, data, [6, 25, 451])","528d341e":"import pandas as pd\nimport numpy as np","09a0f418":"books=pd.read_csv(\"..\/input\/goodbooks-10k-updated\/books.csv\")","7dcfaa6d":"books","5834ec4a":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,8))\nsns.distplot(a=books['average_rating'], kde=True, color='r')","0490999e":"dropna= books.dropna()\nfig = px.treemap(dropna, path=['original_publication_year','language_code', \"average_rating\"],\n                  color='average_rating')\nfig.show()","ff55a64b":"fig = px.line(books, y=\"books_count\", x=\"average_rating\", title='Book Count VS Average Rating')\nfig.show()","a3051a32":"books.columns","baa27895":"books_metadata_selected = books[['book_id', 'average_rating', \n'original_publication_year', 'ratings_count', 'language_code']]\nbooks_metadata_selected","631183c9":"import pandas_profiling\n\nbooks_metadata_selected.replace('', np.nan, inplace=True)\nprofile = pandas_profiling.ProfileReport(books_metadata_selected[['average_rating',\n                                                                  'original_publication_year', 'ratings_count']])\nprofile","6158b613":"#rounding the average rating to nearest 0.5 score\nbooks_metadata_selected['average_rating'] = books_metadata_selected['average_rating'].apply(lambda x: round(x*2)\/2)\n\n#replacing missing values to the year \nbooks_metadata_selected['original_publication_year'].replace(np.nan, 2100, inplace=True)","2067d3c1":"# using pandas qcut method to convert fields into quantile-based discrete intervals\nbooks_metadata_selected['ratings_count'] = pd.qcut(books_metadata_selected['ratings_count'], 25)","17a57f84":"profile = pandas_profiling.ProfileReport(books_metadata_selected[['average_rating',\n                                                                  'original_publication_year', 'ratings_count']])\nprofile","e6be2c33":"#importing ratings data for creating utility matrix\ninteractions=pd.read_csv(\"..\/input\/goodbooks-10k-updated\/ratings.csv\")","4697a531":"from scipy.sparse import *\nfrom scipy import *\nitem_dict ={}\ndf = books[['book_id', 'original_title']].sort_values('book_id').reset_index()\nfor i in range(df.shape[0]):\n    item_dict[(df.loc[i,'book_id'])] = df.loc[i,'original_title']\n# dummify categorical features\nbooks_metadata_selected_transformed = pd.get_dummies(books_metadata_selected, columns = ['average_rating','original_publication_year', 'ratings_count', 'language_code'])\nbooks_metadata_selected_transformed = books_metadata_selected_transformed.sort_values('book_id').reset_index().drop('index', axis=1)\nbooks_metadata_selected_transformed.head(5)\n# convert to csr matrix\nbooks_metadata_csr = csr_matrix(books_metadata_selected_transformed.drop('book_id', axis=1).values)","3c3566aa":"user_book_interaction = pd.pivot_table(interactions, index='user_id', columns='book_id', values='rating')\n# fill missing values with 0\nuser_book_interaction = user_book_interaction.fillna(0)\nuser_id = list(user_book_interaction.index)\nuser_dict = {}\ncounter = 0 \nfor i in user_id:\n    user_dict[i] = counter\n    counter += 1\n# convert to csr matrix\nuser_book_interaction_csr = csr_matrix(user_book_interaction.values)\nuser_book_interaction_csr","2e4bfaa5":"model = LightFM(loss='warp',\n                random_state=2016,\n                learning_rate=0.90,\n                no_components=150,\n                user_alpha=0.000005)\nmodel = model.fit(user_book_interaction_csr,\n                  epochs=5,\n                  num_threads=16, verbose=False)","245fcc7a":"def sample_recommendation_user(model, interactions, user_id, user_dict, \n                               item_dict,threshold = 0,nrec_items = 5, show = True):\n    \n    n_users, n_items = interactions.shape\n    user_x = user_dict[user_id]\n    scores = pd.Series(model.predict(user_x,np.arange(n_items), item_features=books_metadata_csr))\n    scores.index = interactions.columns\n    scores = list(pd.Series(scores.sort_values(ascending=False).index))\n    \n    known_items = list(pd.Series(interactions.loc[user_id,:] \\\n                                 [interactions.loc[user_id,:] > threshold].index).sort_values(ascending=False))\n    \n    scores = [x for x in scores if x not in known_items]\n    return_score_list = scores[0:nrec_items]\n    known_items = list(pd.Series(known_items).apply(lambda x: item_dict[x]))\n    scores = list(pd.Series(return_score_list).apply(lambda x: item_dict[x]))\n    if show == True:\n        print (\"User: \" + str(user_id))\n        print(\"Known Likes:\")\n        counter = 1\n        for i in known_items:\n            print(str(counter) + '- ' + str(i))\n            counter+=1\n    print(\"\\n Recommended Items:\")\n    counter = 1\n    for i in scores:\n        print(i)\n        print(str(counter) + '- ' + i)\n        counter+=1","108360e9":"sample_recommendation_user(model, user_book_interaction, 5, user_dict, item_dict)","c33a6c95":"sample_recommendation_user(model, user_book_interaction, 500, user_dict, item_dict)","25fad002":"****Representing Item Profiles****\n\nThe ultimate goal in content based recommendation systems, is creating an item profile. Here, the TF-IDF Concept comes into picture.\n\nTF-IDF:\nTF-IDF (term frequency-inverse document frequency) is a statistical measure that evaluates how relevant a word is to a document in a collection of documents. It was originally developed for document search and information retrieval.But, over the years, it is used in recommendation systems and machine learning models too.\n\nHow does TF-IDF work?\nIt calculates term frequency of a word in a document.","6b479080":"Cosine similarity is finding the cosine distance between two users. It is similar to dot product of two vectors. Blanks are treated as 0.\n![COS](https:\/\/i.stack.imgur.com\/36r1U.png)","260625fd":"Recommendations function that maps the user IDs to their titles and generates recommendations using the LSTM model.","b964e16a":"# Content based recommendation systems","0f88db5f":"Generating recommendations ^","a8802bfe":"# Did you know?\n\nAbout 35% purchases made from amazon are from recommendation systems.","3e9eb6dc":"![Recommend GIF](https:\/\/media.giphy.com\/media\/3o6MbsRPT4UmZ70IsU\/giphy.gif)","77df3f3a":"The first question we must deal with is how to measure similarity of users or\nitems from their rows or columns in the utility matrix. Utility matrix is the matrix where rows represent user ratings or any such feature and columns represent movie\/items.","eb0fb84d":"From the above report it is clear that original_publication_year has missing values which need to be removed.","944aa052":"This is very easy as the dataset is already provided by lightFM.","11a4bc9f":"# Recommendation Systems","ab56e9e5":"# Architecture of Recommendation systems","e6448965":"LightFM is a Python implementation of a number of popular recommendation algorithms for both implicit and explicit feedback.\n\nIt also makes it possible to incorporate both item and user metadata into the traditional matrix factorization algorithms.\n\nThe below implementation is using the pre-existing dataset of movielens provided by LIGHTFM libraries.","5ce37edd":"Thence, the models works pretty well. It generates recommendations according to the score.\n\nThis model was a good change from the traditional collaborative and content based filtering and may give precise results if trained and deployed.","dbc568e3":"### Creating LSTM model ","c23fa514":"Item profiles:\n\nIn content based recommendation systems, each item has a profile. In most cases, profiles contain characteristics of the item that are easily available or discovered.\nFor example, these features can be used in profiles of movies\/tv shows on netflix.\n* Title\n* Actors in the movie\/tv show\n* Director\n* Genre\n* Plot\/Storyline","a0d2a25a":"Number of epochs can affect the running time and also precision.","b41523bf":"Here A,B,C,D are the users and the column headers are the movies.The values in the matrix denote ratings.","a066821c":"Ever wondered how ecommerce websites use recommendation systems to show you similar sets of items? [Click here ](https:\/\/productrecom-n.herokuapp.com\/) for a small model or working prototype of the product recommendations by ecommerce websites.","400cea6d":"Some Data exploration before getting recommendations is always a good idea.","5bcc00c4":"## LightFM for the goodreads books dataset","d52b9cfe":"Therefore , we now have a csr(compressed sparse row)matrix for selected columns from the ratings file. CSR matrices are basically one hot encodings for a dataframe.","aa5e6b67":"## Pandas Profiler\n \n Pandas Profiler gives us a summary of the dataset without writing any code. It behaves like the .describe() function.\n Shown below is a sample report. Let us try and generate a sample report for our dataset.\n \n![Pandas](https:\/\/miro.medium.com\/max\/1834\/1*98WxRgNtUo026F65XTFz1A.png) ","61928adc":"\n![CHECK IT OUT](https:\/\/forthebadge.com\/images\/badges\/check-it-out.svg)\nFor a hands-on implementation of content based recommendation systems using the TF-IDF vectorizer method, [Click here](https:\/\/www.kaggle.com\/niharika41298\/netflix-visualizations-recommendation-eda#Recommendation-System-(Content-Based))","c2ad8fa9":"Consider the following utility matrix:\n![image.png](attachment:image.png)","7dfad290":"![image.png](attachment:image.png)","bd427f19":"This is a significantly different approach to recommendation.\nInstead of using features of items to determine their similarity, we focus on the\nsimilarity of the user ratings for two items. That is, in place of the item-profile\nvector for an item, we use its column in the utility matrix.","fe397204":"# Conclusion\n\n\nAlthough there are tons of implementations of recommendation systems on the Internet, all are very confusing. Therefore this notebook is just a simple guide or representation to learn about them. Content based, Collaborative and Hybrid recommendation systems are successfully implemented. Content based recommendations are easy to implement but lack precision. On the other hand, collaborative filtering is a tad bit difficult to implement but gives better results. The LightFM model is a good option too, but i think it is just a complicated implementation of collaborative filtering.","334f1811":"Creating a recommendation function to recommend 3 movies based on known positives.","6d4eba7a":"Only selecting important columns.","88c20b2a":"# Hybrid recommendation systems.","e1153862":"# Collaborative Filtering ","33964db7":"## Fact:\n75% of what people are watching on Netflix comes from recommendations, according to McKinsey and Recommendations are responsible for 70% of the time people spend watching videos on YouTube.\n","0550f22e":"**Candidate generation**:\n    Usually a large corpus of data is available but it has a smaller number of candidates or categories.Generation and differentitation of these categories is the first step of building the recommendation system.\n    \n    \n**Scoring**:\n    Scoring is the model that creates subsets and ranks the categories to be displayed to the user. The customization of scoring of categories can be done using conditions or queries.\n    \n    \n**Re-ranking**:\n    The final step, re-ranking considers all available constraints and removes unwanted or low-scoring recommendations. Re-ranking is extremely important as it filters all unnecessary items.\n    ","b1153b63":"Let us calculate similarity between User A and User B:\n\ncos angle between A and B= ((4*3)+(5*4))\/sqrt(4^2+5^2+2^2)*sqrt(3^2+5^2+4^2+1^2)\n\nThis is how cosine similarity is calculated. After calculating the cosine similarites, an algorithm like Kmeans or Decision tree can be applied to the data to get the nearest neighbors as recommendations.","81ac0d0a":"Only using movies with ratings above 4.0","a3079caa":"## Measuring Similarity","bf63b233":"![MADE WITH \u2665](https:\/\/forthebadge.com\/images\/badges\/built-with-love.svg)\nAs an appetizer, here's a [product recommendation system prototype](https:\/\/productrecom-n.herokuapp.com\/). Click on the images to get recommendations. This is an application that recommends products using transfer learning. Amazon, Flipkart use such recommenders.","67bf6e84":"## References:\n\n1. Mining of Massive Datasets,Book by Anand Rajaraman and Jeffrey Ullman.\n2. [ Google's mini-course](https:\/\/developers.google.com\/machine-learning\/recommendation)\n3. [A very helpful post](https:\/\/towardsdatascience.com\/recommendation-system-in-python-lightfm-61c85010ce17)\n4. [LightFM Documentation](https:\/\/making.lyst.com\/lightfm\/docs\/home.html)","8d7dd721":"How does Netflix know what shows you may like? How does Youtube suggest videos on your homepage that 80% of the time you are inclined to click on and watch? It's all because of recommendation systems. To explain it in the most basic terminology,recommendation systems are programs or softwares that take your interests in consideration and suggest or recommend products that you may end up liking.","0b5a95c5":"## Importance of recommendation systems\n\n* They help in discovering content that you may possibly like but didn't know existed.\n* They create personalized list of options for your viewing.\n* Help in discovering popular content.\n* They can make you watch\/read\/listen to content that is not really into your domain but you may end up liking it and discovering an all new domain that you like.\n* If you are a creator, recommendation systems can you give you a brief overview about your audience.","097b82d1":"# LightFM Hybrid recommender","52c6958d":"Running it through pandas profiler to understand the data and gather exploratory details. Generates profile reports from a pandas DataFrame. The pandas df.describe() function is great but a little basic for serious exploratory data analysis. pandas_profiling extends the pandas DataFrame with df.profile_report() for quick data analysis.","997b702a":"For a hands-on implementation on collaborative filtering, [CLICK HERE](https:\/\/www.kaggle.com\/niharika41298\/netflix-or-books-recommender-analysis-eda#2.-Collaborative-Filtering)","1125be9e":"# Types\n\n1. Content based recommendation systems:\n\n\nContent based recommendation systems focus on properties of items.These recommendation systems use features between the given items and find similarities between them as a measure for giving recommendations.For example, if a user likes the first installment of The Harry Potter movies, the recommendation system will probably recommended all the other installments. Another example can be the recommendation of a 20 min workout video on youtube because you have watched a 10 min workout video posted by the same creator.User reviews are not required in this type.\n2. Collaborative filtering recommendation systems:\n\n\nOn the other hand, systems focus on the relationship between users and items. These models require user reviews as they play a key role in scoring.Collaborative filtering models can recommend an item to user A based on the interests of a similar user B. User's previous history is also taken into consideration. For example, recommendation of a crime tv series to user A because user B who has watched similar shows as of User A has reviewed the crime series. ","8447d11d":"A hybrid recommender is a special kind of recommender that uses both collaborative and content based filtering for making recommendations."}}