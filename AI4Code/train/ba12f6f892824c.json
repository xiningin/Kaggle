{"cell_type":{"6b5323c9":"code","20943393":"code","2703c658":"code","30e864e0":"code","78bb9f1b":"code","947c3c6c":"code","acb03070":"code","0c2c7966":"code","deb453fe":"code","eaf3e1d3":"code","ceed9185":"code","f78d3fd5":"code","ba2bbc0f":"code","6f3f2d81":"code","263fa90b":"code","e58edb72":"code","9ee151d5":"code","fb86ceac":"code","da6c2688":"code","19c4db8c":"code","a0ebb4d2":"code","9f265a02":"code","6809af41":"code","04b470e3":"code","b3edbe3e":"code","dc82cfbc":"code","cd19868d":"code","4e0845bc":"code","6b76229b":"code","b8476760":"code","123241d6":"code","7ece0760":"code","e4262e39":"code","d0391176":"code","bbbde478":"code","0f0e4895":"code","c93ab2e8":"code","20540556":"code","6c9a775b":"code","c30d1d55":"code","740642c8":"code","775929f1":"code","be27473b":"code","7d8b2366":"markdown","04c33fc9":"markdown","6e0bbc66":"markdown","e20bbe42":"markdown","b586d856":"markdown","f76433fa":"markdown","3959ec1a":"markdown","0b932be6":"markdown","08e26fb2":"markdown","f60dad6c":"markdown","f48e59f2":"markdown","4fe308a0":"markdown","09af58a0":"markdown","57258210":"markdown","cd906327":"markdown","69c44e64":"markdown","200dff60":"markdown","5ac8cc2a":"markdown","7bba8447":"markdown","8c802ed0":"markdown","63c11aee":"markdown","b4ce858e":"markdown","781d1e6b":"markdown","891fa82e":"markdown","e8d94bb1":"markdown","01df0ebc":"markdown","0e2effea":"markdown","b74d5bea":"markdown","135c56c5":"markdown"},"source":{"6b5323c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport cv2\nimport pandas as pd\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import misc\nimport sklearn as sk\nfrom sklearn import metrics\nfrom PIL import Image \nfrom sklearn.mixture import GaussianMixture as GMM\n#from PIL import Convert \nimport matplotlib.pyplot as plt \nfrom sklearn.decomposition import PCA\nfrom matplotlib.pyplot import imread\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport matplotlib.image as mpimg\nfrom skimage import io, color\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20943393":"plane = imread(\"..\/input\/images\/3096_colorPlane.jpg\")\nbirdie = imread(\"..\/input\/images\/42049_colorBird.jpg\")\n\ngray = birdie[:,:,0]\ngrayP = plane[:,:,0]","2703c658":"imgbird = gray.astype(np.uint8)\n#imgbird = cv2.cvtColor(birdie, cv2.COLOR_BGR2RGB)\nimgbird = imgbird \/ 255.0\n#pixel_values = imgbird.reshape((-1, 3))\n# convert to float\n#pixel_values = np.float32(pixel_values)\ndf = pd.DataFrame(imgbird)\nprint('Size of the dataframe: {}'.format(df.shape))\nplt.imshow(imgbird)\n\n","30e864e0":"imgplane = grayP.astype(np.uint8)\nimgplane = imgplane \/ 255.0\n#pixel_values = imgbird.reshape((-1, 3))\n# convert to float\n#pixel_values = np.float32(pixel_values)\ndfP = pd.DataFrame(imgplane)\nprint('Size of the dataframe: {}'.format(dfP.shape))\nplt.imshow(imgplane)\n","78bb9f1b":"np.random.seed(4)\nrndperm = np.random.permutation(df.shape[0])\nrndpermP = np.random.permutation(dfP.shape[0])","947c3c6c":"pca = PCA(n_components=5)\npca_result = pca.fit_transform(df)\ndf['pca-one'] = pca_result[:,0]\ndf['pca-two'] = pca_result[:,1] \ndf['pca-three'] = pca_result[:,2]\ndf['pca-four'] = pca_result[:,3]\ndf['pca-five'] = pca_result[:,4]\nprint('Bird Image explained variation per principal component: {}'.format(pca.explained_variance_ratio_))\n\npca_resultP = pca.fit_transform(dfP)\ndf['pca-one'] = pca_resultP[:,0]\ndf['pca-two'] = pca_resultP[:,1] \ndf['pca-three'] = pca_resultP[:,2]\ndf['pca-four'] = pca_resultP[:,3]\ndf['pca-five'] = pca_resultP[:,4]\nprint('Plane Image explained variation per principal component: {}'.format(pca.explained_variance_ratio_))","acb03070":"pca = PCA().fit(df)\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.title(\"Scree Plot of Bird Image\")\nplt.show()\n\n\n","0c2c7966":"pcaP = PCA().fit(dfP)\nplt.plot(np.cumsum(pcaP.explained_variance_ratio_))\nplt.xlabel('number of components')\nplt.ylabel('cumulative explained variance')\nplt.title(\"Scree Plot of Plane Image\")\nplt.show()","deb453fe":"N = 300\ndf_subset = df.loc[rndperm[:N],:].copy()\n#data_subset = df_subset[df].values\npca = PCA(n_components=5)\npca_result = pca.fit_transform(df_subset)\ndf_subset['pca-one'] = pca_result[:,0]\ndf_subset['pca-two'] = pca_result[:,1] \ndf_subset['pca-three'] = pca_result[:,2]\ndf_subset['pca-four'] = pca_result[:,3]\ndf_subset['pca-five'] = pca_result[:,4]\nprint('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))\n\n","eaf3e1d3":"#Plane Random\nN = 300\ndfP_subset = dfP.loc[rndpermP[:N],:].copy()\n#data_subset = df_subset[df].values\npca = PCA(n_components=5)\npca_result = pca.fit_transform(dfP_subset)\ndfP_subset['pca-one'] = pca_result[:,0]\ndfP_subset['pca-two'] = pca_result[:,1] \ndfP_subset['pca-three'] = pca_result[:,2]\ndfP_subset['pca-four'] = pca_result[:,3]\ndfP_subset['pca-five'] = pca_result[:,4]\nprint('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))","ceed9185":"#bird\n\n#Perplexity Value 30\ntsne = TSNE(n_components=2, verbose=1, perplexity=30, n_iter=300)\ntsne_results = tsne.fit_transform(df)\nprint('t-SNE done!')\n\ndf['tsne-2d-one'] = tsne_results[:,0]\ndf['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 30\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=df,\n    legend=\"full\",\n    alpha=0.3\n)\n#Perplexity Value 40\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(df)\nprint('t-SNE done!')\n\ndf['tsne-2d-one'] = tsne_results[:,0]\ndf['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 40\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=df,\n    legend=\"full\",\n    alpha=0.3\n)\n\n#Perplexity Value 50\ntsne = TSNE(n_components=2, verbose=1, perplexity=50, n_iter=300)\ntsne_results = tsne.fit_transform(df)\nprint('t-SNE done!')\n\ndf['tsne-2d-one'] = tsne_results[:,0]\ndf['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 50\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=df,\n    legend=\"full\",\n    alpha=0.3\n)","f78d3fd5":"#plane\n\n#Perplexity Value 30\ntsne = TSNE(n_components=2, verbose=1, perplexity=30, n_iter=300)\ntsne_results = tsne.fit_transform(dfP)\nprint('t-SNE done!')\n\ndfP['tsne-2d-one'] = tsne_results[:,0]\ndfP['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 30\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=dfP,\n    legend=\"full\",\n    alpha=0.3\n)\n\n#Perplexity Value 40\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(dfP)\nprint('t-SNE done!')\n\ndfP['tsne-2d-one'] = tsne_results[:,0]\ndfP['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 40\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=dfP,\n    legend=\"full\",\n    alpha=0.3\n)\n\n#Perplexity Value 50\ntsne = TSNE(n_components=2, verbose=1, perplexity=50, n_iter=300)\ntsne_results = tsne.fit_transform(dfP)\nprint('t-SNE done!')\n\ndfP['tsne-2d-one'] = tsne_results[:,0]\ndfP['tsne-2d-two'] = tsne_results[:,1]\nplt.figure(figsize=(16,10))\nplt.title(\"TNSE with Perplexity as 50\")\nsns.scatterplot(\n    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n    #hue=\"tsne-2d-one\",\n    palette=sns.color_palette(\"hls\", 10),\n    data=dfP,\n    legend=\"full\",\n    alpha=0.3\n)","ba2bbc0f":"plane = imread(\"..\/input\/images\/3096_colorPlane.jpg\")\n#birdie = io.imread(\"..\/input\/images\/42049_colorBird.jpg\")\nimg = cv2.cvtColor(plane, cv2.COLOR_BGR2RGB)","6f3f2d81":"pixel_values = img.reshape((-1, 3))\n# convert to float\npixel_values = np.float32(pixel_values)\n\nvectorized = img.reshape((-1,3))\nvectorized = np.float32(vectorized)\n\ndf = pd.DataFrame(pixel_values)\nprint('Size of the dataframe: {}'.format(df.shape))\n#df.head()","263fa90b":"criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)","e58edb72":"K = 2\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean2= KMeans(n_clusters=2)\nKMean2.fit(df)\nlabel2=KMean2.predict(df)","9ee151d5":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Score is:\", metrics.silhouette_score(df, label2, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label2))\nsns.scatterplot(df[0],df[1],hue=label2)","fb86ceac":"K = 3\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean3= KMeans(n_clusters=3)\nKMean3.fit(df)\nlabel3=KMean3.predict(df)","da6c2688":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Score is:\", metrics.silhouette_score(df, label3, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label3))\nsns.scatterplot(df[0],df[1],hue=label3)","19c4db8c":"K = 4\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean4= KMeans(n_clusters=4)\nKMean4.fit(df)\nlabel4=KMean4.predict(df)","a0ebb4d2":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Score is:\", metrics.silhouette_score(df, label4, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label4))\nsns.scatterplot(df[0],df[1],hue=label4)","9f265a02":"K = 5\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean5= KMeans(n_clusters=5)\nKMean5.fit(df)\nlabel5=KMean5.predict(df)","6809af41":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Score is:\", metrics.silhouette_score(df, label4, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label5))\nsns.scatterplot(df[0],df[1],hue=label5)","04b470e3":"#plane = imread(\"..\/input\/images\/3096_colorPlane.jpg\")\nbirdie = imread(\"..\/input\/images\/42049_colorBird.jpg\")\nimg = cv2.cvtColor(birdie, cv2.COLOR_BGR2RGB)","b3edbe3e":"pixel_values = img.reshape((-1, 3))\n# convert to float\npixel_values = np.float32(pixel_values)\n\nvectorized = img.reshape((-1,3))\nvectorized = np.float32(vectorized)\n\ndf = pd.DataFrame(pixel_values)\nprint('Size of the dataframe: {}'.format(df.shape))\ndf.head()","dc82cfbc":"K = 2\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean2= KMeans(n_clusters=2)\nKMean2.fit(df)\nlabel2=KMean2.predict(df)","cd19868d":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, label2, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label2))\nsns.scatterplot(df[0],df[1],hue=label2)","4e0845bc":"K = 3\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean3= KMeans(n_clusters=3)\nKMean3.fit(df)\nlabel3=KMean3.predict(df)","6b76229b":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, label3, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label3))\nsns.scatterplot(df[0],df[1],hue=label3)","b8476760":"K = 4\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean4= KMeans(n_clusters=4)\nKMean4.fit(df)\nlabel4=KMean4.predict(df)","123241d6":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, label4, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label4))\nsns.scatterplot(df[0],df[1],hue=label4)","7ece0760":"K = 5\nattempts=10\nres,label,center=cv2.kmeans(vectorized,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)\ncenter = np.uint8(center)\n#print(center)\nres = center[label.flatten()]\nresult_image = res.reshape((img.shape))\nKMean5= KMeans(n_clusters=3)\nKMean5.fit(df)\nlabel5=KMean5.predict(df)","e4262e39":"figure_size = 15\nplt.figure(figsize=(figure_size,figure_size))\nplt.subplot(1,2,1),plt.imshow(img)\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(1,2,2),plt.imshow(result_image)\nplt.title('Segmented Image when K = %i' % K), plt.xticks([]), plt.yticks([])\nplt.show()\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, label5, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, label5))\nsns.scatterplot(df[0],df[1],hue=label5)","d0391176":"plane = imread(\"..\/input\/images\/3096_colorPlane.jpg\")\n#birdie = io.imread(\"..\/input\/images\/42049_colorBird.jpg\")\nimg = cv2.cvtColor(plane, cv2.COLOR_BGR2RGB)\npixel_values = img.reshape((-1, 3))\n# convert to float\npixel_values = np.float32(pixel_values)\n\nvectorized = img.reshape((-1,3))\nvectorized = np.float32(vectorized)\n\ndf = pd.DataFrame(pixel_values)\nprint('Size of the dataframe: {}'.format(df.shape))\ndf.head()","bbbde478":"gmm = GMM(n_components=2).fit(df)\nlabelGMM2 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM2, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM2))\nsns.scatterplot(df[0],df[1],hue=labelGMM2)","0f0e4895":"gmm = GMM(n_components=3).fit(df)\nlabelGMM3 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM3, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM3))\nsns.scatterplot(df[0],df[1],hue=labelGMM3)","c93ab2e8":"gmm = GMM(n_components=4).fit(df)\nlabelGMM4 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM4, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM4))\nsns.scatterplot(df[0],df[1],hue=labelGMM4)","20540556":"gmm = GMM(n_components=5).fit(df)\nlabelGMM5 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM5, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM5))\nsns.scatterplot(df[0],df[1],hue=labelGMM5)","6c9a775b":"#plane = imread(\"..\/input\/images\/3096_colorPlane.jpg\")\nbirdie = imread(\"..\/input\/images\/42049_colorBird.jpg\")\nimg = cv2.cvtColor(birdie, cv2.COLOR_BGR2RGB)\npixel_values = img.reshape((-1, 3))\n# convert to float\npixel_values = np.float32(pixel_values)\n\nvectorized = img.reshape((-1,3))\nvectorized = np.float32(vectorized)\n\ndf = pd.DataFrame(pixel_values)\nprint('Size of the dataframe: {}'.format(df.shape))\ndf.head()","c30d1d55":"gmm = GMM(n_components=2).fit(df)\nlabelGMM2 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM2, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM2))\nsns.scatterplot(df[0],df[1],hue=labelGMM2)","740642c8":"gmm = GMM(n_components=3).fit(df)\nlabelGMM3 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM3, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM3))\nsns.scatterplot(df[0],df[1],hue=labelGMM3)","775929f1":"gmm = GMM(n_components=4).fit(df)\nlabelGMM4 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM4, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM4))\nsns.scatterplot(df[0],df[1],hue=labelGMM4)","be27473b":"gmm = GMM(n_components=5).fit(df)\nlabelGMM5 = gmm.predict(df)\nprint(\"Silhouette Coefficient is:\", metrics.silhouette_score(df, labelGMM5, metric = 'euclidean'))\nprint(\"CH Index is:\", metrics.calinski_harabasz_score(df, labelGMM5))\nsns.scatterplot(df[0],df[1],hue=labelGMM5)","7d8b2366":"GMM with 2 Clusters","04c33fc9":"Bird Image","6e0bbc66":"# Different types of Unsupervised ML ALgos on 2 images - PCA\/TSNE\/K-Means\/GNM","e20bbe42":"Plane Image","b586d856":"The best value of K for GMM for the bird image is K = 2 as it has the highest silhouette score.","f76433fa":"GMM with 4 Clusters","3959ec1a":"GMM with 4 Clusters","0b932be6":"**K-MEANS Clustering**","08e26fb2":"**K- Means with 3 Clusters**","f60dad6c":"GMM with 2 Clusters","f48e59f2":"**Hierarchal Clustering**","4fe308a0":"**K- Means with 5 Clusters**","09af58a0":"GMM with 3 Clusters","57258210":"Plane","cd906327":"**K- Means with 5 Clusters**","69c44e64":"GMM with 3 Clusters","200dff60":"**K- Means with 4 Clusters**","5ac8cc2a":"The most optimal K value is 5 in the bird image as it has a very high silhouette score and also a better CH-Index as compared to K value of 2.","7bba8447":"**K- Means with 2 Clusters**","8c802ed0":"Bird","63c11aee":"The most optimal score for K is 2 in the plane image as it has the highest silhouette score.","b4ce858e":"GMM with 5 Clusters","781d1e6b":"**K- Means with 3 Clusters**","891fa82e":"GMM with 5 Clusters","e8d94bb1":"**K- Means with 4 Clusters**","01df0ebc":"TSNE****","0e2effea":"**K- Means with 2 Clusters**","b74d5bea":"The best value of K for GMM for the plane image is K = 2 as it has the highest silhouette score","135c56c5":"**GMM Based Clustering**\n\n"}}