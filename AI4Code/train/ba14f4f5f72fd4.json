{"cell_type":{"7179e3ae":"code","62625321":"code","91041fe7":"code","e4724954":"code","26ddf323":"code","fb22d0f9":"code","609b3cbd":"code","1df45cf0":"code","9bf02137":"code","62dfaf04":"code","3690bbc2":"code","9491874f":"code","09cb5078":"code","871c54d8":"code","9214ee13":"code","8f036859":"code","94a75b72":"code","6b553b82":"code","c268ef0e":"code","89f8db70":"code","e691d411":"code","5c21a85d":"code","567df44d":"code","af7153e4":"code","255ffd58":"markdown","e258735c":"markdown","1b2d1ca5":"markdown"},"source":{"7179e3ae":"import warnings\nwarnings.filterwarnings('ignore')\nimport gc\nimport os\nimport sys\nimport datetime\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook\nfrom scipy.sparse import hstack,csr_matrix\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom collections import Counter\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom joblib import Parallel,delayed\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import OneHotEncoder,StandardScaler,LabelEncoder","62625321":"def datetime_transform(df):\n    df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    df['year'] = pd.to_datetime(df['first_active_month']).dt.year\n    df['month'] = pd.to_datetime(df['first_active_month']).dt.month\n    return df\n\n\ndef applyParallel(dfGrouped, func):\n    retLst = Parallel(n_jobs=2)(delayed(func)(group)\n                                for name, group in dfGrouped)\n    return retLst\n\n\ndef get_stat_feature(df):\n    city_cnt = df['city_id'].nunique()\n    mer_cnt = df['merchant_id'].nunique()\n    state_cnt = df['state_id'].nunique()\n    installments = len(df['installments'] > 0)\n    return [df['card_id'].values[0], city_cnt, mer_cnt, state_cnt, installments]","91041fe7":"%%time\ntrain = pd.read_csv('..\/input\/train.csv',)\ntest = pd.read_csv('..\/input\/test.csv')\nht = pd.read_csv('..\/input\/historical_transactions.csv')\nnmt = pd.read_csv('..\/input\/new_merchant_transactions.csv')","e4724954":"#\u65e5\u671f\u53d8\u6362\ntrain = datetime_transform(train)\ntest = datetime_transform(test)\nht['purchase_date'] = pd.to_datetime(ht['purchase_date'])\nnmt['purchase_date'] = pd.to_datetime(nmt['purchase_date'])\nht['purchase_year'] = ht['purchase_date'].dt.year\nnmt['purchase_year'] = nmt['purchase_date'].dt.year\nht['purchase_month'] = ht['purchase_date'].dt.month\nnmt['purchase_month'] = nmt['purchase_date'].dt.month","26ddf323":"#\u7f3a\u5931\u503c\u586b\u5145\nht['category_2'] = ht['category_2'].fillna(0)\nht['category_3'] = ht['category_3'].fillna('E')\nnmt['category_2'] = nmt['category_2'].fillna(0)\nnmt['category_3'] = nmt['category_3'].fillna('E')\nht['category_2'] = ht['category_2'].map(lambda x:str(int(x)))\nnmt['category_2'] = nmt['category_2'].map(lambda x:str(int(x)))","fb22d0f9":"#\u6570\u636e\u7c7b\u578b\u8f6c\u6362\nht['merchant_category_id'] = ht['merchant_category_id'].map(lambda x:str(x))\nht['merchant_id'] = ht['merchant_id'].map(lambda x:str(x))\nnmt['merchant_category_id'] = nmt['merchant_category_id'].map(lambda x:str(x))\nnmt['merchant_id'] = nmt['merchant_id'].map(lambda x:str(x))","609b3cbd":"#\u90e8\u5206\u6570\u636e\u8f6c\u6362\uff0c\u8282\u7701\u7a7a\u95f4\nlb = LabelEncoder()\nht['authorized_flag'] = lb.fit_transform(ht['authorized_flag'])\nlb = LabelEncoder()\nht['category_1'] = lb.fit_transform(ht['category_1'])\nht['category_2'] = ht['category_2'].astype(np.int16)\nlb = LabelEncoder()\nht['category_3'] = lb.fit_transform(ht['category_3'])\nht['purchase_amount'] = ht['purchase_amount'].astype(np.float32)\nht['month_lag'] = ht['month_lag'].astype(np.float32)\nht['installments'] = ht['installments'].astype(np.int16)\nht['city_id'] = ht['city_id'].astype(np.int16)\nlb = LabelEncoder()\nht['merchant_category_id'] = lb.fit_transform(ht['merchant_category_id'])\nht['state_id'] = ht['state_id'].astype(np.int16)\nht['subsector_id'] = ht['subsector_id'].astype(np.int16)\nht['purchase_year'] = ht['purchase_year'].astype(np.int16)\nht['purchase_month'] = ht['purchase_month'].astype(np.int16)","1df45cf0":"v = pd.pivot_table(ht,values=['purchase_year'],index='card_id',columns=['state_id'],aggfunc=len,fill_value=0)\nv.columns = ['state_id_%s'%s for s in range(v.shape[1])]\nv = v.reset_index()","9bf02137":"train = pd.merge(train,v,on='card_id',how='left')\ntest = pd.merge(test,v,on='card_id',how='left')","62dfaf04":"#\u6fc0\u6d3b\u65e5\u671f\u8ddd\u79bb\u4eca\u5929\u7684\u65f6\u95f4\ntrain['active_till_now'] = train['first_active_month'].map(lambda x:(datetime.datetime.today() - x).days)\ntest['active_till_now'] = test['first_active_month'].map(lambda x:(datetime.datetime.today() - x).days)","3690bbc2":"#\u7edf\u8ba1\u5386\u53f2\u4e0a\u548c\u5728\u65b0\u5546\u54c1\u4e0a\u4e70\u8fc7\u591a\u5c11\u6b21\u4e1c\u897f\nht_cnt = ht.groupby('card_id')['city_id'].count().reset_index()\nnmt_cnt = nmt.groupby('card_id')['city_id'].count().reset_index()\nht_cnt.columns = ['card_id','ht_cnt']\nnmt_cnt.columns = ['card_id','nmt_cnt']\n#merge the result\ntrain = pd.merge(train,ht_cnt,on='card_id',how='left')\ntest = pd.merge(test,ht_cnt,on='card_id',how='left')\ntrain = pd.merge(train,nmt_cnt,on='card_id',how='left')\ntest = pd.merge(test,nmt_cnt,on='card_id',how='left')","9491874f":"ht_amount = ht.groupby('card_id').agg({'purchase_amount':[np.max,np.mean,np.std]})\nht_amount.columns = ['amount_max','amount_mean','amount_std']\nht_amount = ht_amount.reset_index()\n#\u8ba1\u7b97\u5386\u53f2\u4e0a\u7684\u6d88\u8d39\u72b6\u51b5\ntrain = pd.merge(train,ht_amount,on='card_id',how='left')\ntest = pd.merge(test,ht_amount,on='card_id',how='left')","09cb5078":"#\u8ba1\u7b97\u5386\u53f2\u4e0amonth_lag\u7684\u60c5\u51b5\nht_month_lag = ht.groupby('card_id').agg({'month_lag':[np.min,np.mean,np.std]})\nht_month_lag.columns = ['lag_min','lag_mean','lag_std']\nht_month_lag = ht_month_lag.reset_index()\ntrain = pd.merge(train,ht_month_lag,on='card_id',how='left')\ntest = pd.merge(test,ht_month_lag,on='card_id',how='left')","871c54d8":"#\u8ba1\u7b97\u5386\u53f2\u4e0ainstallments\u7684\u60c5\u51b5\nht_installment = ht.groupby('card_id').agg({'installments':[np.max,np.min,np.mean,np.std]})\nht_installment.columns = ['ins_max','ins_min','ins_mean','ins_std']\nht_installment = ht_installment.reset_index()\ntrain = pd.merge(train,ht_installment,on='card_id',how='left')\ntest = pd.merge(test,ht_installment,on='card_id',how='left')","9214ee13":"#\u8ba1\u7b97\u65b0\u5546\u5e97\u7684\u6d88\u8d39\u72b6\u51b5\nnmt_amount = nmt.groupby('card_id').agg({'purchase_amount':[np.max,np.mean,np.std]})\nnmt_amount.columns = ['nmt_amount_max','nmt_amount_mean','nmt_amount_std']\nnmt_amount = nmt_amount.reset_index()\ntrain = pd.merge(train,nmt_amount,on='card_id',how='left')\ntest = pd.merge(test,nmt_amount,on='card_id',how='left')","8f036859":"#\u8ba1\u7b97\u65b0\u5546\u5e97\u4e0amonth_lag\u7684\u60c5\u51b5\nnmt_month_lag = nmt.groupby('card_id').agg({'month_lag':[np.max,np.mean,np.std]})\nnmt_month_lag.columns = ['nmt_lag_min','nmt_lag_mean','nmt_lag_std']\nnmt_month_lag = nmt_month_lag.reset_index()\ntrain = pd.merge(train,nmt_month_lag,on='card_id',how='left')\ntest = pd.merge(test,nmt_month_lag,on='card_id',how='left')","94a75b72":"#\u8ba1\u7b97\u65b0\u5546\u5e97\u4e0ainstallments\u7684\u60c5\u51b5\nnmt_installment = nmt.groupby('card_id').agg({'installments':[np.max,np.mean,np.std]})\nnmt_installment.columns = ['nmt_ins_min','nmt_ins_mean','nmt_ins_std']\nnmt_installment = nmt_installment.reset_index()\ntrain = pd.merge(train,nmt_installment,on='card_id',how='left')\ntest = pd.merge(test,nmt_installment,on='card_id',how='left')","6b553b82":"%%time\nht_res = applyParallel(ht.groupby('card_id'),get_stat_feature)\nnmt_res = applyParallel(nmt.groupby('card_id'),get_stat_feature)\n#merge the result\nstat_df = pd.DataFrame(ht_res,columns=['card_id','city_cnt','mer_cnt','state_cnt','installments'])\nnmt_stat_df = pd.DataFrame(nmt_res,columns=['card_id','city_cnt_nmt','mer_cnt_nmt','state_cnt_nmt','installments_num'])\ntrain = pd.merge(train,stat_df,on='card_id',how='left')\ntest = pd.merge(test,stat_df,on='card_id',how='left')\ntrain = pd.merge(train,nmt_stat_df,on='card_id',how='left')\ntest = pd.merge(test,nmt_stat_df,on='card_id',how='left')","c268ef0e":"train.fillna(0,inplace=True)\ntest.fillna(0,inplace=True)","89f8db70":"#handler the numeric feature\ndrop_columns = ['first_active_month','card_id','feature_1','feature_2','feature_3','target','year','month']\nnum_feature = [v for v in train.columns if v not in drop_columns]","e691d411":"train_num_feature = train[num_feature].values\ntest_num_feature = test[num_feature].values\nss = StandardScaler()\ntrain_num_feature = ss.fit_transform(train_num_feature)\ntest_num_feature = ss.transform(test_num_feature)","5c21a85d":"#stack the feature\ntrain_feature = train_num_feature\ntest_feature = test_num_feature","567df44d":"#\u4e0d\u7528stacking\nres_lgb = []\nfeature_imp = []\nfor tr,va in KFold(n_splits=10,random_state=2018).split(train_feature,train['target'].values):\n    lgbmr = LGBMRegressor(num_leaves=16,n_estimators=100,colsample_bytree=0.7,subsample=0.7,)\n    lgbmr.fit(train_feature[tr],train['target'].values[tr],\n              eval_set=[(train_feature[tr],train['target'].values[tr]),(train_feature[va],train['target'].values[va])],\n              eval_metric='rmse',\n              verbose=50)\n    feature_imp.append(lgbmr.feature_importances_)\n    res_lgb.append(lgbmr.predict(test_feature))\nf = np.mean(feature_imp,axis=0)","af7153e4":"avg_res = np.mean(res_lgb,axis=0)\ntest['target'] = avg_res\ntest[['card_id','target']].to_csv('predict1216.csv',index=False)","255ffd58":"load data file","e258735c":"Start Feature Engineering","1b2d1ca5":"\u62fc\u63a5\u7279\u5f81"}}