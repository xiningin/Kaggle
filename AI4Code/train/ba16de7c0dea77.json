{"cell_type":{"a0b737d8":"code","17efa769":"code","c7cf5a45":"code","9b96c96b":"code","7dbe0021":"code","cebb9407":"code","e021763e":"code","0896e1c2":"code","ecbf66c2":"code","aa280673":"code","a8b3fc04":"code","df6e3b96":"code","d82f4c22":"code","26224712":"code","7badd559":"code","3d9dafd6":"code","baa194c0":"code","7f3b35bf":"code","d69388e3":"code","d2be83ea":"markdown","9356ab4e":"markdown","67c61263":"markdown","552f6b95":"markdown","dee703a5":"markdown"},"source":{"a0b737d8":"from tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, Dense, LSTM\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport random \nfrom sklearn.metrics import r2_score\nfrom scipy import optimize\n","17efa769":"modelh = keras.models.load_model('\/kaggle\/input\/lstm-model\/H_LSTM.h5')\n#modelh = keras.models.load_model('\/kaggle\/input\/h-lstm\/H_LSTM.h5')\nmodelh.summary()","c7cf5a45":"h = pd.read_csv('\/kaggle\/input\/h-coeficientes\/h_test.csv',header=None)\nh.head()\n","9b96c96b":"h=h.values\nprint(type(h))\nprint(h.shape)","7dbe0021":"def reshape_lstm(inputs):\n    return np.reshape(inputs, (inputs.shape[0], inputs.shape[1], 1))","cebb9407":"def predict(h):\n    h = reshape_lstm(h)\n    return modelh.predict(h)","e021763e":"hi=np.zeros([512,200])\nhi[:,0:100]=h[:,0:100]\nfor i in range(100):\n    ho=predict(hi[:,i:i+100])\n    hi[:,i+100]=np.squeeze(ho)\nprint(hi.shape)","0896e1c2":"plt.subplot(121)\nplt.imshow(hi)\nplt.subplot(122)\nplt.imshow(h)\nplt.show()","ecbf66c2":"a=102\nplt.plot(h[:,a],label='real')\nplt.plot(hi[:,a],label='Estimada')\nplt.legend()\nplt.show()\nnp.savetxt(\"hi.csv\", hi, delimiter=\",\")","aa280673":"def waterfilling(h,Pmax):\n  k=512\n  h=h**2\n  def f(u):\n    return (np.sum(np.maximum(np.zeros(k),1\/u-1\/(h)))-Pmax)**2\n\n  u_opt=optimize.fminbound(f, 0, np.amax(h), xtol=1e-10)\n  rho=np.zeros(k)\n\n  for i in range(k):\n    if u_opt < h[0,i]:\n      rho[i]=1\/u_opt-1\/h[0,i]\n    else:\n      rho[i]=0\n\n  return rho\n\ndef waterfilling_matrix(h,Pmax):\n    rho = np.zeros([h.shape[1],h.shape[0]])\n    h = np.transpose(h)\n    for i in range(h.shape[0]):\n        rho[i,...]=waterfilling(h[i:i+1,...],Pmax)\n    return np.transpose(rho)","a8b3fc04":"Pmax=1000\nrho2 =  waterfilling_matrix(hi,Pmax)\nrho = waterfilling_matrix(h,Pmax)\n\nplt.figure()\nplt.subplot(121)\nplt.imshow(rho)\nplt.title('Real')\nplt.xlabel('Tiempo')\nplt.ylabel('rho')\nplt.subplot(122)\nplt.imshow(rho2)\nplt.title('Estimado')\nplt.xlabel('Tiempo')\nplt.ylabel('rho')\nplt.tight_layout()\nplt.savefig('Estimacion potencia')\nplt.show()","df6e3b96":"def espectral_eff(h_predict_esc,rho2):\n    R=np.zeros([1,h_predict_esc.shape[1]])\n    for j in range(h_predict_esc.shape[1]):\n        for i in range(h_predict_esc.shape[0]):\n            R[0,j]=R[0,j]+np.log2(1+rho2[i,j]*h_predict_esc[i,j])\n    return np.squeeze(R\/h_predict_esc.shape[0])","d82f4c22":"R_real=espectral_eff(h,rho)\nplt.plot(R_real,label=\"Real\")\nR_est=espectral_eff(hi,rho2)\nplt.plot(R_est,label=\"Estimado\")\nplt.legend()\nplt.title('Eficiencia Espectral')\nplt.xlabel('Tiempo')\nplt.ylabel('R(t)')\nplt.savefig('R.jpg')\nplt.show()","26224712":"error = np.abs(R_real-R_est)\/R_real *100\nplt.plot(error)\nplt.ylabel('Porcentaje error')\nplt.xlabel('Tiempo')\nplt.title('Error porcentual relativo')\nplt.savefig('error porcentual relativo')\nplt.show()","7badd559":"w = pd.read_csv('\/kaggle\/input\/wwiener\/w.csv', header=None)\nw_vector = np.squeeze(w.values)\nw_vector.shape","3d9dafd6":"w_flip = np.flip(w_vector) # cambiar el orden de los indices","baa194c0":"inputs_wiener = np.squeeze(inputs_test)\nprint(inputs_wiener.shape,outputs_test.shape)\n","7f3b35bf":"h_predict = np.zeros([512,924])\nfor i in range(100,1024):\n    data_input = h[:,i-100:i]\n    data_input = (11.769\/2)*(data_input+1)\n    h_predict[0:512,i-100] = np.dot(data_input,w_flip)\nplt.imshow(h_predict)\nplt.colorbar()","d69388e3":"r2_score(outputs_test,predict_wienner)","d2be83ea":"## Cargando datos de Test","9356ab4e":"# Estimaci\u00f3n de Wiener","67c61263":"## Calculo error porcentual","552f6b95":"## Cargando modelo entrenado","dee703a5":"## Librerias"}}