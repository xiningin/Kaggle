{"cell_type":{"c277dbc9":"code","29c1146b":"code","abe0ce05":"code","2bed0242":"code","ecab2fbb":"code","ef3311f0":"code","1139bb39":"code","60239d3b":"code","32e64924":"code","bdee1213":"code","14e4e148":"code","406ecc3d":"code","a3ebdcfa":"code","0fbb62f8":"code","5a0eca00":"code","e9020b9c":"code","cf5435e0":"code","08bb6ee3":"code","79c2a79d":"markdown","c0015e95":"markdown","bc5af74a":"markdown","74a0e271":"markdown"},"source":{"c277dbc9":"import numpy as np\nimport pandas as pd\nimport math","29c1146b":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df.head()","abe0ce05":"num_samples = train_df.shape[0]\nprint(\"No of samples:\",num_samples)\ncolumns = list(train_df.keys())\nprint(columns)","2bed0242":"for col in columns:\n    missing = np.sum(train_df[col].isna())\n    print(col,\" \",missing,\" \",(missing*100\/train_df.shape[0]))","ecab2fbb":"train_df['Age'] = train_df['Age'].fillna(np.mean(train_df['Age']))","ef3311f0":"for col in columns:\n    missing = np.sum(train_df[col].isna())\n    print(col,\" \",missing,\" \",(missing*100\/train_df.shape[0]))","1139bb39":"columns.remove('Cabin')\ncolumns.remove('Survived')\ncolumns.remove('Name')\ncolumns.remove('PassengerId')\ncolumns.remove('Ticket')\nprint(columns)","60239d3b":"max_categorical_thresh = 3","32e64924":"domain = {}\nisCategorical = {}\nfor attribute in columns:\n    num_values = train_df[attribute].nunique()\n    if num_values > max_categorical_thresh:\n        isCategorical[attribute]=False\n        domain[attribute] = 2\n    else:\n        isCategorical[attribute]=True\n        domain[attribute]=num_values\nprint(domain)\nprint(isCategorical)","bdee1213":"num_classes = 2\noutput_classes = [0,1]","14e4e148":"df_by_attr = []\nfor attr in columns:\n    if isCategorical[attr]:\n        sub_df = train_df.groupby(['Survived',attr]).size().unstack(level=0)\n        mask = (np.sum(np.array(sub_df == np.zeros(sub_df.shape[1])),axis=0,keepdims=True) > 0).astype('int32')\n        sub_df+=mask\n        sub_df\/=np.sum(sub_df,axis=0)\n        df_by_attr.append(sub_df)\n    else:\n        mean = train_df[['Survived',attr]].groupby('Survived').mean().rename(columns={attr:'mean'})\n        std = train_df[['Survived',attr]].groupby('Survived').std().rename(columns={attr:'std'})\n        df_by_attr.append(pd.concat([mean,std],axis=1).T)\n\n# concatenate all sub dataframes\nprob = pd.concat(df_by_attr,keys=columns)\nprint(prob)","406ecc3d":"prob_class = train_df['Survived'].value_counts()\nprob_class \/= np.sum(prob_class)\nprint(prob_class)","a3ebdcfa":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_df.head()","0fbb62f8":"answer = {}","5a0eca00":"def normal(x,mean,std):\n    y = 1.0\/(std*np.sqrt(2*math.pi))\n    y *= np.exp(-0.5*np.square((x-mean)\/std))\n    return y","e9020b9c":"for i in range(test_df.shape[0]):\n    sample = test_df.iloc[i,:]\n    label_prob=[]\n    for label in output_classes:\n        cur_prod = prob_class[label]\n        mask = sample.isna()\n        for col in columns:\n            if mask[col]:\n                continue\n            if isCategorical[col]:\n                cur_prod *= prob.loc[(col,sample[col]),label]\n            else :\n                cur_prod *= normal(sample[col],prob.loc[(col,'mean'),label],prob.loc[(col,'std'),label])\n        label_prob.append(cur_prod)\n    answer[sample['PassengerId']]=np.argmax(label_prob)","cf5435e0":"submission = pd.DataFrame(data={'PassengerId':test_df['PassengerId']})\nsubmission['Survived']=submission['PassengerId'].apply(lambda x: answer[x])","08bb6ee3":"submission.to_csv('submission.csv',index=False)","79c2a79d":"### Make prediction on test data","c0015e95":"### Pre compute all required probabilities","bc5af74a":"### Preprocessing","74a0e271":"### Import libraries and read data"}}