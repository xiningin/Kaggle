{"cell_type":{"a2e5d4e5":"code","b87c8ba8":"code","fbd8b965":"code","99c78526":"code","f48d30a2":"code","70621ef4":"code","1ba9c89f":"code","916e7c0a":"code","2b5bff5c":"code","47949503":"code","63819c92":"code","c50bd384":"code","4208efc4":"markdown","73e12410":"markdown","88f758c4":"markdown","8cf87298":"markdown","a1ec83f3":"markdown","d0302977":"markdown"},"source":{"a2e5d4e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b87c8ba8":"#Importing the required Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","fbd8b965":"#Reading the Netflix csv file using Pandas\ndf = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf.head() #Displaying few first few lines of the data","99c78526":"import missingno as miss\n\nmiss.matrix(df)","f48d30a2":"#Removing rows having no Title specified \ndf = df[df['title'].notna()]\n\n#Filling NAN values\ndf['director'] = df['director'].fillna('Unknown')\n\ndf['cast'] = df['cast'].fillna('Unknown')\n\ndf['country'] = df['country'].fillna('Not Mentioned')","70621ef4":"#Only TV Shows\nTV = df[df['type'] == 'TV Show']\n\n#Only Movies\nmovie = df[df['type'] == 'Movie']\n\n#Sorting rows in descending order according to released year and Data added\nTV = TV[TV['release_year'] >= 2015].sort_values(by = ['release_year', 'date_added'], ascending = False)\nmovie = movie[movie['release_year'] >= 2015].sort_values(by = ['release_year', 'date_added'], ascending = False)","1ba9c89f":"import seaborn as sns\n\nplt.figure(figsize = (7, 5))\nsns.set(style = 'darkgrid')\nsns.countplot(df['type'][df.release_year >= 2015])\n\nplt.show()","916e7c0a":"#Directors with atleast one Movie OR atleast one TV Show\nTVorMovie = df[['type', 'director']]\nTVorMovie = TVorMovie.pivot_table(index = ['director'], columns = ['type'], aggfunc = len).fillna('...')\nTVorMovie.head(10)","2b5bff5c":"#Directors with at least one Movie AND at least one TV Show.\nTVnMovie = TVorMovie[TVorMovie['TV Show'] != '...']\nTVnMovie[TVnMovie['Movie'] != '...']","47949503":"ratingCount = df[['type', 'rating']]\nratingCount = ratingCount.groupby('rating').count()\n\nplt.figure(figsize = (15, 5))\nbars = plt.bar(ratingCount.index, ratingCount['type'], color = 'r')\nplt.tick_params(axis = 'both', left = False, bottom = False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.tick_params(labelleft = False)\n\nplt.title('Rating Count', fontsize = 25)\n\nfor i in bars:    \n      plt.gca().text(i.get_x() + i.get_width()\/2, i.get_height() + 7, \n      str(int(i.get_height())), ha = 'center', color = 'k')\nplt.show()","63819c92":"US_Based = df[['type', 'title', 'country', 'rating']].copy()\nUS_Based['country'] = US_Based['country'].str.extract(r'(United States)+')\nUS_Based.dropna().sort_values(['type','title']).reset_index(drop = True).head(10)","c50bd384":"yearCount = df[df['release_year'] > 2010]\nyearCount = yearCount.groupby('release_year')['release_year'].apply(len)\n\nplt.figure(figsize = (12, 8))\nbars = plt.bar(yearCount.index.tolist(), yearCount.values.tolist(), color = 'grey')\n\nplt.tick_params(axis = 'both', left = False, bottom = False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.tick_params(labelleft = False)\n\nplt.xticks(yearCount.index.tolist())\nplt.title('No. of Movie and TV Show Released Every Year', fontsize = 25)\n\nbars[7].set_color('black')\nfor i in bars:    \n      plt.gca().text(i.get_x() + i.get_width()\/2, i.get_height() + 7, \n      str(int(i.get_height())), ha = 'center', color = 'k')\n\nplt.show()","4208efc4":"# Types of Ratings","73e12410":"# Movie and Tv Show count Release Every Year","88f758c4":"# Finding missing values","8cf87298":"# US Based Movies and Tv Shows","a1ec83f3":"# Network analysis of Actors \/ Directors and find interesting insights","d0302977":"# Is Netflix has increasingly focusing on TV rather than movies in recent years."}}