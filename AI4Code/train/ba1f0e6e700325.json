{"cell_type":{"9e76fad0":"code","81bc08ff":"code","6cceb95c":"code","fecd4f4c":"code","d10225dd":"code","3a09c464":"code","74bad349":"code","be847c6f":"code","af191d00":"code","12b3f5c6":"code","d4229303":"code","eb13191c":"code","6eb99399":"code","5f9f8239":"code","2b2748b4":"code","6670b5d1":"code","71a0f226":"code","aaca5ace":"code","73126116":"code","f2ec4a21":"code","e2cd27fc":"code","ac38e524":"markdown","877da04c":"markdown","9ef25ade":"markdown","8ceeea7d":"markdown","b8ef0b2b":"markdown","95228b72":"markdown","850df700":"markdown","8427c988":"markdown","063f23b7":"markdown"},"source":{"9e76fad0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81bc08ff":"train=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nprint(train.shape)\ntrain.head()","6cceb95c":"test=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(test.shape)\ntest.head()","fecd4f4c":"Y_train=train[\"label\"]\nX_train=train.drop(\"label\",axis=1)","d10225dd":"plt.figure(figsize=(15,7))\nsns.countplot(Y_train,palette=\"icefire\")\nplt.title(\"Number Of Digit Counts\")\nplt.show()","3a09c464":"img=X_train.iloc[0].to_numpy()\nimg=img.reshape((28,28))\nplt.imshow(img,cmap=\"gray\")\nplt.show()","74bad349":"img=X_train.iloc[3].to_numpy()\nimg=img.reshape((28,28))\nplt.imshow(img,cmap=\"gray\")\nplt.title(X_train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","be847c6f":"X_train=X_train\/255\ntest=test\/255","af191d00":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\ntest.shape","12b3f5c6":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(Y_train,num_classes=10)\nY_train","d4229303":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val=train_test_split(X_train,Y_train,test_size=0.1,random_state=2)","eb13191c":"from sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n","6eb99399":"model=Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu'))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))","5f9f8239":"optimizer=Adam(lr=0.001,beta_1=0.9,beta_2=0.999)","2b2748b4":"model.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])\n","6670b5d1":"epochs=200\nbatch_size=64","71a0f226":"datagen= ImageDataGenerator(\n        featurewise_center=False,\n        samplewise_center=False,\n        featurewise_std_normalization=False,\n        samplewise_std_normalization=False,\n        zca_whitening=False,\n        rotation_range=0.5,\n        zoom_range=0.5,\n        width_shift_range=0.5,\n        height_shift_range=0.5,\n        horizontal_flip=False,\n        vertical_flip=False)\ndatagen.fit(X_train)","aaca5ace":"history=model.fit_generator(datagen.flow(X_train,Y_train,batch_size=batch_size),epochs=epochs,\n                                        validation_data=(X_val,Y_val),steps_per_epoch=X_train.shape[0] \/\/ batch_size)","73126116":"plt.plot(history.history['val_loss'],color='b',label='validation_loss')\nplt.title('Test Loss')\nplt.xlabel('Number Of Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","f2ec4a21":"Y_pred=model.predict(X_val)\nY_pred_classes=np.argmax(Y_pred,axis=1)\nY_true=np.argmax(Y_val,axis=1)\nconfusion_mtx=confusion_matrix(Y_true,Y_pred_classes)\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(confusion_mtx,annot=True,linewidths=0.01,cmap='Greens',linecolor='gray',fmt='.1f',ax=ax)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nplt.show()","e2cd27fc":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission_digit_recognizer.csv\",index=False)","ac38e524":"## Submission","877da04c":"## Import Keras Libraries","9ef25ade":"## Accuracy","8ceeea7d":"## Optimization","b8ef0b2b":"# Data Preparation","95228b72":"## Compile Model","850df700":"## Data Augmentation","8427c988":"## Creating Model","063f23b7":"## Fit The Model"}}