{"cell_type":{"3cb19158":"code","8492ee4f":"code","b1b2d29f":"code","54570bfd":"code","fb495f14":"code","134b4592":"code","188beabb":"code","371b5aa4":"code","68ebdc12":"code","bc7839ed":"code","4dad514b":"code","ce96309c":"code","ec401490":"code","e769ccbb":"code","a44e55f8":"code","522f3ec9":"code","0337e05e":"code","480d5335":"code","43bba426":"code","2536b1b0":"code","935ac20b":"code","9630d7f0":"code","8c56ddb8":"code","95fce335":"code","5374a84a":"code","28761c06":"markdown","211f9056":"markdown","384f9367":"markdown","70032443":"markdown","7a551eec":"markdown","ce21ddc7":"markdown","f056b8d8":"markdown","3b8b2886":"markdown","8018bb64":"markdown","98859ce0":"markdown","75385fe6":"markdown","6c5385f6":"markdown","eeaa9e60":"markdown","0c797c03":"markdown","2848149e":"markdown","31a76d2f":"markdown","86ed21fa":"markdown","ba251eb2":"markdown","68e4a2ae":"markdown","c6d98045":"markdown","83550dc2":"markdown"},"source":{"3cb19158":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.metrics import f1_score\nimport graphviz\nfrom sklearn import tree","8492ee4f":"test = pd.read_csv('..\/input\/liverpool-ion-switching\/test.csv')\ntrain = pd.read_csv('..\/input\/liverpool-ion-switching\/train.csv')\ntrain.head()","b1b2d29f":"plt.figure(figsize=(20,5)); res = 1000\nplt.plot(range(0,train.shape[0],res),train.signal[0::res])\nfor i in range(11): plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor j in range(10): plt.text(j*500000+200000,10,str(j+1),size=20)\nplt.xlabel('Row',size=16); plt.ylabel('Signal',size=16); \nplt.title('Training Data Signal - 10 batches',size=20)\nplt.show()","54570bfd":"plt.figure(figsize=(20,5)); res = 1000\nplt.plot(range(0,train.shape[0],res),train.open_channels[0::res])\nfor i in range(11): plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor j in range(10): plt.text(j*500000+200000,10,str(j+1),size=20)\nplt.xlabel('Row',size=16); plt.ylabel('Channels Open',size=16); \nplt.title('Training Data Open Channels - 10 batches',size=20)\nplt.show()","fb495f14":"for k in range(10):\n    a = int( np.random.uniform(0,train.shape[0]-50000) )\n    b=a+5000; res=10\n    print('#'*25)\n    print('### Random %i to %i'%(a,b))\n    print('#'*25)\n    plt.figure(figsize=(20,5))\n    plt.plot(range(a,b,res),train.signal[a:b][0::res])\n    plt.plot(range(a,b,res),train.open_channels[a:b][0::res])\n    plt.show()","134b4592":"plt.figure(figsize=(20,5))\nres = 1000; let = ['A','B','C','D','E','F','G','H','I','J']\nplt.plot(range(0,test.shape[0],res),test.signal[0::res])\nfor i in range(5): plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor j in range(21): plt.plot([j*100000,j*100000],[-5,12.5],'r:')\nfor k in range(4): plt.text(k*500000+200000,10,str(k+1),size=20)\nfor k in range(10): plt.text(k*100000+40000,7,let[k],size=16)\nplt.xlabel('Row',size=16); plt.ylabel('Channels Open',size=16); \nplt.title('Test Data Signal - 4 batches - 10 subsamples',size=20)\nplt.show()","188beabb":"train2 = train.copy()\n\na=500000; b=600000 # CLEAN TRAIN BATCH 2\ntrain2.loc[train.index[a:b],'signal'] = train2.signal[a:b].values - 3*(train2.time.values[a:b] - 50)\/10.","371b5aa4":"batch=2; a=500000*(batch-1); b=500000*batch; res=50\nplt.figure(figsize=(20,5))\nplt.plot(range(a,b,res),train.signal[a:b][0::res])\nplt.title('Training Batch 2 with Slant Drift',size=16)\nplt.figure(figsize=(20,5))\nplt.plot(range(a,b,res),train2.signal[a:b][0::res])\nplt.title('Training Batch 2 without Slant Drift',size=16)\nplt.show()","68ebdc12":"def f(x,low,high,mid): return -((-low+high)\/625)*(x-mid)**2+high -low\n\n# CLEAN TRAIN BATCH 7\nbatch = 7; a = 500000*(batch-1); b = 500000*batch\ntrain2.loc[train2.index[a:b],'signal'] = train.signal.values[a:b] - f(train.time[a:b].values,-1.817,3.186,325)\n# CLEAN TRAIN BATCH 8\nbatch = 8; a = 500000*(batch-1); b = 500000*batch\ntrain2.loc[train2.index[a:b],'signal'] = train.signal.values[a:b] - f(train.time[a:b].values,-0.094,4.936,375)\n# CLEAN TRAIN BATCH 9\nbatch = 9; a = 500000*(batch-1); b = 500000*batch\ntrain2.loc[train2.index[a:b],'signal'] = train.signal.values[a:b] - f(train.time[a:b].values,1.715,6.689,425)\n# CLEAN TRAIN BATCH 10\nbatch = 10; a = 500000*(batch-1); b = 500000*batch\ntrain2.loc[train2.index[a:b],'signal'] = train.signal.values[a:b] - f(train.time[a:b].values,3.361,8.45,475)","bc7839ed":"plt.figure(figsize=(20,5))\nplt.plot(train.time[::1000],train.signal[::1000])\nplt.title('Training Batches 7-10 with Parabolic Drift',size=16)\nplt.figure(figsize=(20,5))\nplt.plot(train2.time[::1000],train2.signal[::1000])\nplt.title('Training Batches 7-10 without Parabolic Drift',size=16)\nplt.show()","4dad514b":"batch = 1; a = 500000*(batch-1); b = 500000*batch\nbatch = 2; c = 500000*(batch-1); d = 500000*batch\nX_train = np.concatenate([train2.signal.values[a:b],train2.signal.values[c:d]]).reshape((-1,1))\ny_train = np.concatenate([train2.open_channels.values[a:b],train2.open_channels.values[c:d]]).reshape((-1,1))\n\nclf1s = tree.DecisionTreeClassifier(max_depth=1)\nclf1s = clf1s.fit(X_train,y_train)\nprint('Training model 1s channel')\npreds = clf1s.predict(X_train)\nprint('has f1 validation score =',f1_score(y_train,preds,average='macro'))\n\ntree_graph = tree.export_graphviz(clf1s, out_file=None, max_depth = 10,\n    impurity = False, feature_names = ['signal'], class_names = ['0', '1'],\n    rounded = True, filled= True )\ngraphviz.Source(tree_graph)  ","ce96309c":"batch = 3; a = 500000*(batch-1); b = 500000*batch\nbatch = 7; c = 500000*(batch-1); d = 500000*batch\nX_train = np.concatenate([train2.signal.values[a:b],train2.signal.values[c:d]]).reshape((-1,1))\ny_train = np.concatenate([train2.open_channels.values[a:b],train2.open_channels.values[c:d]]).reshape((-1,1))\n\nclf1f = tree.DecisionTreeClassifier(max_depth=1)\nclf1f = clf1f.fit(X_train, y_train)\nprint('Training model 1f channel')\npreds = clf1f.predict(X_train)\nprint('has f1 validation score =',f1_score(y_train,preds,average='macro'))\n\ntree_graph = tree.export_graphviz(clf1f, out_file=None, max_depth = 10,\n    impurity = False, feature_names = ['signal'], class_names = ['0', '1'],\n    rounded = True, filled= True )\ngraphviz.Source(tree_graph) ","ec401490":"batch = 4; a = 500000*(batch-1); b = 500000*batch\nbatch = 8; c = 500000*(batch-1); d = 500000*batch\nX_train = np.concatenate([train2.signal.values[a:b],train2.signal.values[c:d]]).reshape((-1,1))\ny_train = np.concatenate([train2.open_channels.values[a:b],train2.open_channels.values[c:d]]).reshape((-1,1))\n\nclf3 = tree.DecisionTreeClassifier(max_leaf_nodes=4)\nclf3 = clf3.fit(X_train,y_train)\nprint('Training model 3 channel')\npreds = clf3.predict(X_train)\nprint('has f1 validation score =',f1_score(y_train,preds,average='macro'))\n\ntree_graph = tree.export_graphviz(clf3, out_file=None, max_depth = 10,\n    impurity = False, feature_names = ['signal'], class_names = ['0', '1','2','3'],\n    rounded = True, filled= True )\ngraphviz.Source(tree_graph) ","e769ccbb":"batch = 6; a = 500000*(batch-1); b = 500000*batch\nbatch = 9; c = 500000*(batch-1); d = 500000*batch\nX_train = np.concatenate([train2.signal.values[a:b],train2.signal.values[c:d]]).reshape((-1,1))\ny_train = np.concatenate([train2.open_channels.values[a:b],train2.open_channels.values[c:d]]).reshape((-1,1))\n\nclf5 = tree.DecisionTreeClassifier(max_leaf_nodes=6)\nclf5 = clf5.fit(X_train, y_train)\nprint('Trained model 5 channel')\npreds = clf5.predict(X_train)\nprint('has f1 validation score =',f1_score(y_train,preds,average='macro'))\n\ntree_graph = tree.export_graphviz(clf5, out_file=None, max_depth = 10,\n    impurity = False, feature_names = ['signal'], class_names = ['0', '1','2','3','4','5'],\n    rounded = True, filled= True )\ngraphviz.Source(tree_graph) ","a44e55f8":"batch = 5; a = 500000*(batch-1); b = 500000*batch\nbatch = 10; c = 500000*(batch-1); d = 500000*batch\nX_train = np.concatenate([train2.signal.values[a:b],train2.signal.values[c:d]]).reshape((-1,1))\ny_train = np.concatenate([train2.open_channels.values[a:b],train2.open_channels.values[c:d]]).reshape((-1,1))\n\nclf10 = tree.DecisionTreeClassifier(max_leaf_nodes=8)\nclf10 = clf10.fit(X_train, y_train)\nprint('Trained model 10 channel')\npreds = clf10.predict(X_train)\nprint('has f1 validation score =',f1_score(y_train,preds,average='macro'))\n\ntree_graph = tree.export_graphviz(clf10, out_file=None, max_depth = 10,\n    impurity = False, feature_names = ['signal'], class_names = [str(x) for x in range(11)],\n    rounded = True, filled= True )\ngraphviz.Source(tree_graph) ","522f3ec9":"# ORIGINAL TRAIN DATA\nplt.figure(figsize=(20,5))\nr = train.signal.rolling(30000).mean()\nplt.plot(train.time.values,r)\nfor i in range(11): plt.plot([i*50,i*50],[-3,8],'r:')\nfor j in range(10): plt.text(j*50+20,6,str(j+1),size=20)\nplt.title('Training Signal Rolling Mean. Has Drift wherever plot is not horizontal line',size=16)\nplt.show()\n\n# TRAIN DATA WITHOUT DRIFT\nplt.figure(figsize=(20,5))\nr = train2.signal.rolling(30000).mean()\nplt.plot(train2.time.values,r)\nfor i in range(11): plt.plot([i*50,i*50],[-3,8],'r:')\nfor j in range(10): plt.text(j*50+20,6,str(j+1),size=20)\nplt.title('Training Signal Rolling Mean without Drift',size=16)\nplt.show()","0337e05e":"plt.figure(figsize=(20,5))\nlet = ['A','B','C','D','E','F','G','H','I','J']\nr = test.signal.rolling(30000).mean()\nplt.plot(test.time.values,r)\nfor i in range(21): plt.plot([500+i*10,500+i*10],[-3,6],'r:')\nfor i in range(5): plt.plot([500+i*50,500+i*50],[-3,6],'r')\nfor k in range(4): plt.text(525+k*50,5.5,str(k+1),size=20)\nfor k in range(10): plt.text(505+k*10,4,let[k],size=16)\nplt.title('Test Signal Rolling Mean. Has Drift wherever plot is not horizontal line',size=16)\nplt.show()","480d5335":"test2 = test.copy()","43bba426":"# REMOVE BATCH 1 DRIFT\nstart=500\na = 0; b = 100000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.\nstart=510\na = 100000; b = 200000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.\nstart=540\na = 400000; b = 500000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.","2536b1b0":"# REMOVE BATCH 2 DRIFT\nstart=560\na = 600000; b = 700000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.\nstart=570\na = 700000; b = 800000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.\nstart=580\na = 800000; b = 900000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - 3*(test2.time.values[a:b]-start)\/10.","935ac20b":"# REMOVE BATCH 3 DRIFT\ndef f(x):\n    return -(0.00788)*(x-625)**2+2.345 +2.58\na = 1000000; b = 1500000\ntest2.loc[test2.index[a:b],'signal'] = test2.signal.values[a:b] - f(test2.time[a:b].values)","9630d7f0":"plt.figure(figsize=(20,5))\nres = 1000\nplt.plot(range(0,test2.shape[0],res),test2.signal[0::res])\nfor i in range(5): plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor i in range(21): plt.plot([i*100000,i*100000],[-5,12.5],'r:')\nfor k in range(4): plt.text(k*500000+250000,10,str(k+1),size=20)\nfor k in range(10): plt.text(k*100000+40000,7.5,let[k],size=16)\nplt.title('Test Signal without Drift',size=16)\nplt.show()\n\nplt.figure(figsize=(20,5))\nr = test2.signal.rolling(30000).mean()\nplt.plot(test2.time.values,r)\nfor i in range(21): plt.plot([500+i*10,500+i*10],[-2,6],'r:')\nfor i in range(5): plt.plot([500+i*50,500+i*50],[-2,6],'r')\nfor k in range(4): plt.text(525+k*50,5.5,str(k+1),size=20)\nfor k in range(10): plt.text(505+k*10,4,let[k],size=16)\nplt.title('Test Signal Rolling Mean without Drift',size=16)\nplt.show()","8c56ddb8":"sub = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv')\n\na = 0 # SUBSAMPLE A, Model 1s\nsub.iloc[100000*a:100000*(a+1),1] = clf1s.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 1 # SUBSAMPLE B, Model 3\nsub.iloc[100000*a:100000*(a+1),1] = clf3.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 2 # SUBSAMPLE C, Model 5\nsub.iloc[100000*a:100000*(a+1),1] = clf5.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 3 # SUBSAMPLE D, Model 1s\nsub.iloc[100000*a:100000*(a+1),1] = clf1s.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 4 # SUBSAMPLE E, Model 1f\nsub.iloc[100000*a:100000*(a+1),1] = clf1f.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 5 # SUBSAMPLE F, Model 10\nsub.iloc[100000*a:100000*(a+1),1] = clf10.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 6 # SUBSAMPLE G, Model 5\nsub.iloc[100000*a:100000*(a+1),1] = clf5.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 7 # SUBSAMPLE H, Model 10\nsub.iloc[100000*a:100000*(a+1),1] = clf10.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 8 # SUBSAMPLE I, Model 1s\nsub.iloc[100000*a:100000*(a+1),1] = clf1s.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\na = 9 # SUBSAMPLE J, Model 3\nsub.iloc[100000*a:100000*(a+1),1] = clf3.predict(test2.signal.values[100000*a:100000*(a+1)].reshape((-1,1)))\n\n # BATCHES 3 AND 4, Model 1s\nsub.iloc[1000000:2000000,1] = clf1s.predict(test2.signal.values[1000000:2000000].reshape((-1,1)))","95fce335":"plt.figure(figsize=(20,5))\nres = 1000\nplt.plot(range(0,test.shape[0],res),sub.open_channels[0::res])\nfor i in range(5): plt.plot([i*500000,i*500000],[-5,12.5],'r')\nfor i in range(21): plt.plot([i*100000,i*100000],[-5,12.5],'r:')\nfor k in range(4): plt.text(k*500000+250000,10,str(k+1),size=20)\nfor k in range(10): plt.text(k*100000+40000,7.5,let[k],size=16)\nplt.title('Test Data Predictions',size=16)\nplt.show()","5374a84a":"sub.to_csv('submission.csv',index=False,float_format='%.4f')","28761c06":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\n\u30c6\u30b9\u30c8\u30b5\u30d6\u30b5\u30f3\u30d7\u30ebA\u3001B\u3001E\u3001G\u3001H\u3001I\u3068\u30c6\u30b9\u30c8\u30d0\u30c3\u30c13\u306e\u30c9\u30ea\u30d5\u30c8\u3092\u89b3\u5bdf\u3057\u307e\u3059\u3002","211f9056":"## \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\n\u6b21\u306e\u30d7\u30ed\u30c3\u30c8\u304c\u6c34\u5e73\u7dda\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u3001\u30c9\u30ea\u30d5\u30c8\u3092\u89b3\u5bdf\u3057\u307e\u3059\u3002 \u30d0\u30c3\u30c12\u30017\u30018\u30019\u300110\u306b\u30c9\u30ea\u30d5\u30c8\u304c\u898b\u3089\u308c\u307e\u3059\u3002","384f9367":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30b7\u30b0\u30ca\u30eb\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046","70032443":"## \u8003\u5bdf\n\u3053\u306e\u30b0\u30e9\u30d5\u304b\u3089\u3001\u52d5\u4f5c\u4e2d\u306e5\u3064\u306e\u30e2\u30c7\u30eb\u3092\u7279\u5b9a\u3067\u304d\u307e\u3059\u3002 \u305d\u3057\u3066\u3001\u8ffd\u52a0\u3055\u308c\u305f\u30c9\u30ea\u30d5\u30c8\u3092\u8a8d\u8b58\u3067\u304d\u307e\u3059\u3002 \u30d0\u30c3\u30c11\u306f5\u3064\u306e\u30b5\u30d6\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\u898b\u3048\u3001A\u3001B\u3001C\u3001D\u3001E\u306f\u305d\u308c\u305e\u308c\u30e2\u30c7\u30eb1s\u30013\u30015\u30011s\u30011f\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002 \u30e2\u30c7\u30eb1s\u306f\u3001\u6700\u59271\u30c1\u30e3\u30cd\u30eb\u304c\u958b\u3044\u3066\u304a\u308a\u3001\u78ba\u7387\u304c\u4f4e\u3044\u30e2\u30c7\u30eb\u3067\u3059\u3002 \u30e2\u30c7\u30eb1f\u306f\u3001\u9ad8\u78ba\u7387\u3067\u6700\u59271\u30c1\u30e3\u30cd\u30eb\u304c\u958b\u3044\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3067\u3059\u3002 \u307e\u305f\u3001\u30e2\u30c7\u30eb3\u30015\u300110\u306f\u305d\u308c\u305e\u308c\u6700\u59273\u30015\u300110\u30c1\u30e3\u30cd\u30eb\u306e\u30e2\u30c7\u30eb\u3067\u3059\u3002 \u30b5\u30d6\u30b5\u30f3\u30d7\u30ebA\u3001B\u3001E\u3001G\u3001H\u3001I\u306e\u50be\u659c\u30c9\u30ea\u30d5\u30c8\u3092\u89b3\u5bdf\u3057\u307e\u3059\u3002\u30d0\u30c3\u30c13\u3067\u653e\u7269\u7dda\u30c9\u30e9\u30d5\u30c8\u3092\u89b3\u5bdf\u3057\u307e\u3059\u3002","7a551eec":"## 1f: \u6700\u59271\u306e\u9ad8\u78ba\u7387\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb","ce21ddc7":"## 3: \u6700\u59273\u306e\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb","f056b8d8":"# \u30c6\u30b9\u30c8\u306e\u4e88\u6e2c\n\u30b7\u30b0\u30ca\u30eb\u3068\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb\u306e\u76f8\u95a2\u6027\u3092\u5143\u306b\u3001\u30b0\u30e9\u30d5\u304b\u3089\u5404\u533a\u9593\u304c\uff15\u3064\u306e\u3069\u306e\u30e2\u30c7\u30eb\u3068\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3092\u63a8\u6e2c\u3057\u3001\u305d\u306e\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002","3b8b2886":"## 1s: \u6700\u59271\u306e\u4f4e\u78ba\u7387\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30f3\u30cd\u30eb","8018bb64":"# \u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\u306e\u524a\u9664\n\u3053\u308c\u306f\u3001\u30d0\u30c3\u30c12\u306e\u50be\u659c\u30c9\u30ea\u30d5\u30c8\u306e\u524a\u9664\u3092\u793a\u3059\u30c7\u30e2\u3067\u3059\u3002  \u4ee5\u4e0b\u3067\u306f\u3001\u30d0\u30c3\u30c11\u30013\u30014\u30015\u30016\u306e\u30e2\u30c7\u30eb\u306e\u307f\u3092\u30c8\u30ec\u30a4\u30f3\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30c8\u30ec\u30a4\u30f3\u30c9\u30ea\u30d5\u30c8\u3092\u524a\u9664\u3057\u305f\u5f8c\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30d0\u30c3\u30c12\u30017\u30018\u30019\u300110\u306e\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u306b\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u65b0\u3057\u3044\u30b7\u30b0\u30ca\u30eb\u306f\u53e4\u3044\u30b7\u30b0\u30ca\u30eb\u304b\u3089f\uff08time\uff09= 3 \uff08time-50\uff09\/ 10\u3092\u5f15\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u7dda\u5f62\u65b9\u7a0b\u5f0f\u3001\u3064\u307e\u308ay\uff08x\uff09=\uff083\/10\uff09\uff08x-50\uff09\u3067\u3059\u3002 y\uff08x\uff09=\uff083\/10\uff09 x-15.\u3053\u308c\u306f\u50be\u659c\u30c9\u30ea\u30d5\u30c8\u306e\u65b9\u7a0b\u5f0f\u3067\u3059\u3002\uff08\u3053\u306e\u65b9\u7a0b\u5f0f\u306f\u624b\u8a08\u7b97\u306b\u3088\u308a\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u3002\uff09\u30c9\u30ea\u30d5\u30c8\u306f\u3001\u305d\u306e\u30e9\u30a4\u30f3\u3092\u4fe1\u53f7\u306b\u8ffd\u52a0\u3057\u305f\u7de8\u96c6\u8005\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002 \u305d\u306e\u305f\u3081\u3001\u305d\u306e\u884c\u3092\u5f15\u304f\u3053\u3068\u3067\u524a\u9664\u3057\u307e\u3059\u3002","98859ce0":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\u3092\u5206\u6790\u3059\u308b\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3057\u3087\u3046","75385fe6":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30c9\u30ea\u30d5\u30c8\u306e\u524a\u9664\n\n\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u3068\u540c\u69d8\u306b\u30c9\u30ea\u30d5\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002","6c5385f6":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","eeaa9e60":"## 10: \u6700\u592710\u306e\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb","0c797c03":"# \u30b7\u30b0\u30ca\u30eb\u3068\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb\u9593\u306e\u76f8\u95a2\n\u30b7\u30b0\u30ca\u30eb\u3068\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u9593\u9694\u3092\u8a73\u3057\u304f\u898b\u3066\u3001\u305d\u308c\u3089\u304c\u3069\u306e\u3088\u3046\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3092\u89b3\u5bdf\u3057\u307e\u3059\u3002 \u305d\u308c\u3089\u306f\u9ad8\u5ea6\u306b\u76f8\u95a2\u3057\u3066\u304a\u308a\u3001\u4e00\u7dd2\u306b\u4e0a\u4e0b\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u30b7\u30b0\u30ca\u30eb\u304b\u3089\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb\u3092\u78ba\u7387\u7684\u306b\u4e88\u6e2c\u3067\u304d\u307e\u3059\u3002 \u552f\u4e00\u306e\u554f\u984c\u306f\u3001\u8ffd\u52a0\u3055\u308c\u305f\u5408\u6210\u30c9\u30ea\u30d5\u30c8\u3067\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u3092\u524a\u9664\u3057\u307e\u3059\u3002","2848149e":"## 5: \u6700\u59275\u306e\u30aa\u30fc\u30d7\u30f3\u30c1\u30e3\u30cd\u30eb","31a76d2f":"# \u30c6\u30b9\u30c8\u4e88\u6e2c\u306e\u8868\u793a","86ed21fa":"## \u8003\u5bdf\n\n\u4e0a\u8a18\u306e\u30b0\u30e9\u30d5\u304b\u3089\u30015\u3064\u306e\u7570\u306a\u308b\u5408\u6210\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002 1\u3064\u306e\u30e2\u30c7\u30eb\u306f\u3001\u4f4e\u3044\u78ba\u7387\u3067\u6700\u59271\u30c1\u30e3\u30cd\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u3092\u751f\u6210\u3057\u307e\u3057\u305f\uff08\u30d0\u30c3\u30c11\u304a\u3088\u30732\uff09\u3002 1\u3064\u306e\u30e2\u30c7\u30eb\u306f\u3001\u9ad8\u3044\u78ba\u7387\u3067\u6700\u59271\u30c1\u30e3\u30cd\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u3092\u751f\u6210\u3057\u307e\u3057\u305f\uff08\u30d0\u30c3\u30c13\u304a\u3088\u30737\uff09\u30021\u3064\u306e\u30e2\u30c7\u30eb\u3067\u6700\u59273\u30c1\u30e3\u30cd\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\uff08\u30d0\u30c3\u30c14\u304a\u3088\u30738\uff09\u30021\u3064\u306e\u30e2\u30c7\u30eb\u306f\u6700\u59275\u30c1\u30e3\u30cd\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\uff08\u30d0\u30c3\u30c16\u304a\u3088\u30739\uff09\u3092\u751f\u6210\u3057\u30011\u3064\u306e\u30e2\u30c7\u30eb\u306f\u6700\u592710\u30c1\u30e3\u30cd\u30eb\u306e\u30aa\u30fc\u30d7\u30f3\uff08\u30d0\u30c3\u30c17\u304a\u3088\u307310\uff09\u3092\u751f\u6210\u3057\u307e\u3057\u305f\u3002\u3055\u3089\u306b\u3001\u30c9\u30ea\u30d5\u30c8\u304c\u30d0\u30c3\u30c17\u30018\u30019\u300110\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30d0\u30c3\u30c12\u306e\u59cb\u307e\u308a\u3067\u3059\u3002\u8ad6\u6587[\u3053\u3053] [1]\u306b\u5f93\u3063\u3066\u3001\u30c7\u30fc\u30bf\u304c\u5408\u6210\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u300c\u96fb\u6c17\u751f\u7406\u5b66\u7684\u300d\u30ce\u30a4\u30ba\u3068\u30c9\u30ea\u30d5\u30c8\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u30c9\u30ea\u30d5\u30c8\u306f\u30b7\u30b0\u30ca\u30eb\u30d0\u30a4\u30a2\u30b9\u3067\u3042\u308a\u3001\u30b7\u30b0\u30ca\u30eb\u306f\u4e0a\u8a18\u306e\u30d0\u30c3\u30c12\u30017\u30018\u30019\u300110\u306e\u3088\u3046\u306a\u6c34\u5e73\u7dda\u3067\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n>\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u69cb\u7bc9\u3002\u30a4\u30aa\u30f3\u30c1\u30e3\u30cd\u30eb\u306e\u6ede\u7559\u6642\u9593\u306f\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u5358\u4e00\u30c1\u30e3\u30cd\u30eb\u30e2\u30c7\u30eb\u304b\u3089Gillespie 43\u306e\u65b9\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u307e\u3057\u305f\u3002\u30c1\u30e3\u30cd\u30eb\u306f\u3001\u78ba\u7387\u7684\u30de\u30eb\u30b3\u30d5\u904e\u7a0b\u306b\u5f93\u3044\u3001\u5404\u72b6\u614b\u306b\u5bfe\u3057\u3066\u8a08\u7b97\u3055\u308c\u305f\u5bff\u547d\u78ba\u7387\u5206\u5e03\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u3042\u308b\u72b6\u614b\u304b\u3089\u6b21\u306e\u72b6\u614b\u306b\u9077\u79fb\u3059\u308b\u3068\u60f3\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b7\u30b0\u30ca\u30eb\u3092\u30d1\u30c3\u30c1\u30af\u30e9\u30f3\u30d7\u30a2\u30f3\u30d7\u306b\u901a\u3057\u3001Axon\u96fb\u5b50\u300c\u30e2\u30c7\u30eb\u30bb\u30eb\u300d\u3092\u4ecb\u3057\u3066CED\u306eSignal\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u9332\u3057\u3066\u623b\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u3053\u308c\u3089\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u672c\u7269\u306e\u300c\u96fb\u6c17\u751f\u7406\u5b66\u7684\u300d\u30ce\u30a4\u30ba\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u4e00\u90e8\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001Matlab\u3092\u4f7f\u7528\u3057\u3066\u6700\u7d42\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u306e\u30c9\u30ea\u30d5\u30c8\u304c\u9069\u7528\u3055\u308c\u307e\u3057\u305f\u3002 2\u3064\u306e\u7570\u306a\u308b\u78ba\u7387\u7684\u30b2\u30fc\u30c6\u30a3\u30f3\u30b0\u30e2\u30c7\u30eb\uff08M1\u304a\u3088\u3073M2\u3068\u547c\u3070\u308c\u308b\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u534a\u5408\u6210\u30a4\u30aa\u30f3\u30c1\u30e3\u30cd\u30eb\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3057\u305f\u3002 M1\u306f\u3001\u53c2\u8003\u6587\u732e\u306e\u4f4e\u30aa\u30fc\u30d7\u30f3\u78ba\u7387\u30e2\u30c7\u30eb\u3067\u3059\u3002 41\uff08\u56f33a\u3001b\uff09\u3067\u306f\u3001\u901a\u5e38\u3001\u540c\u6642\u306b\u958b\u304f\u30a4\u30aa\u30f3\u30c1\u30e3\u30cd\u30eb\u306f1\u3064\u3060\u3051\u3067\u3059\u3002\u30e2\u30c7\u30ebM2\u306f\u53c2\u7167\u304b\u3089\u306e\u3082\u306e\u3067\u3059\u3002 42,44\u3067\u3042\u308a\u3001\u30aa\u30fc\u30d7\u30f3\u306e\u78ba\u7387\u304c\u306f\u308b\u304b\u306b\u9ad8\u3044\uff08\u56f33c\u3001d\uff09\u3002\u305d\u306e\u7d50\u679c\u3001\u6700\u59275\u3064\u306e\u30c1\u30e3\u30cd\u30eb\u304c\u540c\u6642\u306b\u30aa\u30fc\u30d7\u30f3\u3057\u3001\u30bc\u30ed\u30c1\u30e3\u30cd\u30eb\u304c\u30aa\u30fc\u30d7\u30f3\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002\n\n[1]: https:\/\/www.nature.com\/articles\/s42003-019-0729-3\n","ba251eb2":"\u6b21\u306f\u3001\u30d0\u30c3\u30c17\u30018\u30019\u300110\u306e\u653e\u7269\u7dda\u30c9\u30ea\u30d5\u30c8\u3092\u524a\u9664\u3059\u308b\u30c7\u30e2\u3067\u3059\u3002\n\n\u65b0\u3057\u3044\u30b7\u30b0\u30ca\u30eb\u306f\u53e4\u3044\u30b7\u30b0\u30ca\u30eb\u304b\u3089((-low+high)\/625) (x-mid)^2 \u3092\u5f15\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u653e\u5c04\u7dda\u306e\u8ef8\u304b\u3089\u306e\u5909\u4f4d\u306e2\u4e57\u306b\u4fc2\u6570\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u5f15\u304f\u3053\u3068\u3067\u3001\u653e\u5c04\u7dda\u30c9\u30ea\u30d5\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002","68e4a2ae":"# \u30c7\u30fc\u30bf\u306e\u8aac\u660e\n\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u306f\u6642\u9593\u5185\u306e\u8a18\u9332\u3067\u3059\u3002 10,000\u79d2\u3054\u3068\u306b\u3001\u30b7\u30b0\u30ca\u30eb\u306e\u5f37\u5ea6\u304c\u8a18\u9332\u3055\u308c\u3001\u958b\u3044\u3066\u3044\u308b\u30a4\u30aa\u30f3\u30c1\u30e3\u30cd\u30eb\u306e\u6570\u304c\u8a18\u9332\u3055\u308c\u307e\u3057\u305f\u3002 \u5404\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u3067\u30b7\u30b0\u30ca\u30eb\u304b\u3089\u958b\u3044\u3066\u3044\u308b\u30c1\u30e3\u30cd\u30eb\u306e\u6570\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u306e\u304c\u79c1\u305f\u3061\u306e\u4ed5\u4e8b\u3067\u3059\u3002 \u3055\u3089\u306b\u3001\u30c7\u30fc\u30bf\u306f50\u79d2\u306e\u30d0\u30c3\u30c1\u3067\u8a18\u9332\u3055\u308c\u305f\u3068\u4f1d\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u5404500,000\u884c\u306f1\u3064\u306e\u30d0\u30c3\u30c1\u3067\u3059\u3002 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u306f10\u30d0\u30c3\u30c1\u304c\u542b\u307e\u308c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f4\u30d0\u30c3\u30c1\u304c\u542b\u307e\u308c\u307e\u3059\u3002 \u5404\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30d0\u30c3\u30c1\u306b\u3064\u3044\u3066\u3001\u958b\u3044\u3066\u3044\u308b\u30c1\u30e3\u30cd\u30eb\u306e\u6570\u3068\u30b7\u30b0\u30ca\u30eb\u5f37\u5ea6\u3092\u4e00\u7dd2\u306b\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","c6d98045":"# For Japanese, One Feature Model.\n\n\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001Kaggle Ion Comp\u30c7\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u30011\u3064\u306e\u7279\u5fb4\u91cf\u30e2\u30c7\u30eb\u3092\u63a2\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30c9\u30ea\u30d5\u30c8\u3092\u624b\u52d5\u3067\u524a\u9664\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c9\u30ea\u30d5\u30c8\u3092\u53d6\u308a\u9664\u304f\u306b\u306f\u6a5f\u68b0\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u3088\u3044\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u624b\u52d5\u3067\u884c\u3046\u3068\u3001\u305d\u306e\u6027\u8cea\u3092\u7406\u89e3\u3057\u3001\u5f8c\u3067\u3088\u308a\u9069\u5207\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002\n\n\u30c9\u30ea\u30d5\u30c8\u3068\u306f\u4f55\u304b\u3092\u77e5\u308b\u306b\u306f\u3001[\u3053\u3053] [2]\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[2]: https:\/\/www.kaggle.com\/c\/liverpool-ion-switching\/discussion\/133874","83550dc2":"# 5\u3064\u306e\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n\u4e0a\u3067\u89b3\u5bdf\u3057\u305f\u30b7\u30b0\u30ca\u30eb\u306e\u7570\u306a\u308b\u30bf\u30a4\u30d7\u3054\u3068\u306b\u6c7a\u5b9a\u6728\u306e\u5206\u985e\u5668\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"}}