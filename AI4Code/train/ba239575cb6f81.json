{"cell_type":{"84a720df":"code","96269074":"code","b2b154ae":"code","8dd4f90c":"code","9c0201a1":"code","5a6b0043":"code","0b3a2215":"code","dab7e53b":"code","4d8c422e":"code","6b1ddd70":"code","a529edfe":"code","6ae4a5ff":"code","c6c7a6ca":"code","03f5e914":"code","40d8af55":"code","cf96c5b0":"code","7b72f378":"code","e86b4b6b":"code","569b48cd":"code","a7cd5732":"code","b889eb90":"code","4357d191":"code","01cecc1d":"code","8832d2c2":"code","67bcabbb":"code","573d2c34":"code","02f240d0":"code","0741b03a":"code","fd0f682c":"code","a9df0db2":"code","16a7a8cf":"code","18107201":"code","5bdc7e0f":"code","87598e36":"code","d6a5e207":"code","a9135718":"code","2be625de":"code","3c4ef309":"code","19096217":"code","1c2910d0":"code","304b36e8":"code","e0a9b733":"code","ce8a7cf7":"code","6252f9c1":"code","0dd0c267":"code","9e13734c":"code","6fd16b08":"code","86e42aba":"code","65fd9194":"markdown","c80c722a":"markdown","6b2059b1":"markdown"},"source":{"84a720df":"! pip install split-folders","96269074":"import numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator\nimport os,glob\nfrom tensorflow.keras.applications import VGG16,InceptionV3\nfrom tensorflow.keras.layers import AveragePooling2D, Conv2D, MaxPooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential\nimport splitfolders","b2b154ae":"! mkdir natural_images_split","8dd4f90c":"PATH = '..\/input\/natural-images\/natural_images'","9c0201a1":"splitfolders.ratio(PATH, output='.\/natural_images_split', seed=1337, ratio=(.7, .2, .1), group_prefix=None)","5a6b0043":"train_dir = '.\/natural_images_split\/train'\nval_dir = '.\/natural_images_split\/val'\ntest_dir = '.\/natural_images_split\/test'","0b3a2215":"def get_files(dir):\n  if not os.path.exists(dir):\n    return 0\n  count = 0\n  for current_path,dirs,files in os.walk(dir):\n    for dr in dirs:\n      count += len(glob.glob(os.path.join(current_path,dr +'\/*')))\n  return count","dab7e53b":"data_training = get_files(train_dir)\ndata_val = get_files(val_dir)\ndata_test = get_files(test_dir)\nnum_classes = len(glob.glob(train_dir + \"\/*\"))\n\nprint('jumlah data training :',data_training)\nprint('jumlah data val :',data_val)\nprint('jumlah data testing :',data_test)\nprint('jumlah keals dataset :',num_classes)","4d8c422e":"train_datagen = ImageDataGenerator(\n                rescale = 1\/255,\n                horizontal_flip=True,\n                zoom_range = 0.3\n                )\n\ntest_datagen = ImageDataGenerator(\n                rescale = 1\/255\n                )\n\nval_datagen = ImageDataGenerator(\n                rescale = 1\/255,\n                horizontal_flip=True,\n                zoom_range = 0.3\n                )","6b1ddd70":"image_width = 224\nimage_height = 224\n\ntrain_generator = train_datagen.flow_from_directory(\n                    train_dir,\n                    target_size = (image_width,image_height),\n                    color_mode = 'rgb'\n                    )\n\nval_generator = val_datagen.flow_from_directory(\n                  val_dir,\n                  target_size = (image_width,image_height),\n                  color_mode = 'rgb'   \n                  )\n\ntest_generator = test_datagen.flow_from_directory(\n                  test_dir,\n                  target_size=(image_width,image_height),\n                  color_mode = 'rgb',\n                  shuffle=False\n                  )","a529edfe":"train_generator.class_indices","6ae4a5ff":"DSClass = ['airplane','car','cat','dog','flower','fruit','motorbike','person']","c6c7a6ca":"bModel = VGG16(include_top=False,weights='imagenet',input_tensor=Input(shape=(224,224,3)))\nbModel.summary()","03f5e914":"hModel = bModel.output\nhModel = AveragePooling2D(pool_size=(4,4))(hModel)\nhModel = Flatten()(hModel)\nhModel = Dense(128,activation='relu')(hModel)\nhModel = Dropout(0.5)(hModel)\nhModel = Dense(8,activation='softmax')(hModel)\n\nmodel = Model(bModel.input,hModel)\n\nfor layer in bModel.layers:\n  layer.trainable=False\n\nmodel.summary()","40d8af55":"opt = keras.optimizers.Adam(lr=0.001)\nmodel.compile(optimizer=opt,\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])","cf96c5b0":"batch_size = 32\n\ntrain = model.fit(train_generator,\n                            epochs=10,\n                            steps_per_epoch = train_generator.samples \/\/ batch_size,\n                            validation_data = val_generator,\n                            validation_steps = val_generator.samples \/\/ batch_size,\n                            verbose = 1)","7b72f378":"acc = train.history['accuracy']\nval_acc = train.history['val_accuracy']\nloss = train.history['loss']\nval_loss = train.history['val_loss']\nepochs = range(10)\n\n# Plot akurasi data taraining dan validation\nplt.plot(epochs, acc, 'b', label='Akurasi training')\nplt.plot(epochs, val_acc, 'r', label='Akurasi validasi')\nplt.title('Akurasi Training dan Validasi')\nplt.legend()\n\n\n\nplt.show()","e86b4b6b":"plt.plot(epochs, loss, 'b', label='Loss training',linestyle='--')\nplt.plot(epochs, val_loss, 'r', label='Loss validasi',linestyle='--')\nplt.title('Akurasi Training dan Validasi')\nplt.legend()\nplt.show()","569b48cd":"model.save('TugasADL_VGG16.h5')","a7cd5732":"model = keras.models.load_model('.\/TugasADL_VGG16.h5')","b889eb90":"pred= model.predict_generator(test_generator)\npredicted_class_indices=np.argmax(pred,axis=1)\nlabels=(test_generator.class_indices)\nlabels2=dict((v,k) for k,v in labels.items())\npredictions=[labels2[k] for k in predicted_class_indices]\n#print(predicted_class_indices)\n#print(labels)\n#print(predictions)","4357d191":"len(predicted_class_indices)\nlen(labels)\nlen(predictions)","01cecc1d":"from sklearn.metrics import confusion_matrix,accuracy_score,classification_report\n\nconfusion_matrix(predicted_class_indices,test_generator.labels)","8832d2c2":"accuracy_score(predicted_class_indices,test_generator.labels)","67bcabbb":"print(classification_report(predicted_class_indices,test_generator.labels))","573d2c34":"from keras.preprocessing import image\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\ndef prepare(img_path):\n  img = image.load_img(img_path, target_size=(224,224,3), color_mode='rgb')\n  x = image.img_to_array(img)\n  x = x\/255\n  return np.expand_dims(x, axis=0)","02f240d0":"citra_test = '..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4007.jpg'","0741b03a":"imgs = image.load_img(citra_test, target_size=(224,224,3), color_mode='rgb')\nplt.imshow(imgs)","fd0f682c":"pred= model.predict_generator(prepare(citra_test))\nhasil_akhir=np.argmax(pred,axis=1)\nhasil_akhir_2 = model.predict(prepare(citra_test))\nindex = np.argsort(hasil_akhir_2[0,:])\n\nprint('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\nprint('Diagnosis Penyakit pada tanaman Tomat')\nprint('         by ShiftAcademy             ')\nprint('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\nprint('')\nprint('Hasil Deteksi :')\nprint('')\nprint('          ', DSClass[int(hasil_akhir)])","a9df0db2":"bModel2 = InceptionV3(include_top=False,weights='imagenet',input_tensor=Input(shape=(224,224,3)))\nbModel2.summary()","16a7a8cf":"hModel2 = bModel2.output\nhModel2 = AveragePooling2D(pool_size=(4,4))(hModel2)\nhModel2 = Flatten()(hModel2)\nhModel2 = Dense(128,activation='relu')(hModel2)\nhModel2 = Dropout(0.5)(hModel2)\nhModel2 = Dense(8,activation='softmax')(hModel2)\n\nmodel2 = Model(bModel2.input,hModel2)\n\nfor layer in bModel2.layers:\n  layer.trainable=False\n\nmodel2.summary()","18107201":"opt = keras.optimizers.Adam(lr=0.001)\nmodel2.compile(optimizer=opt,\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])\n\nbatch_size = 32\n\ntrain2 = model2.fit(train_generator,\n                            epochs=10,\n                            steps_per_epoch = train_generator.samples \/\/ batch_size,\n                            validation_data = val_generator,\n                            validation_steps = val_generator.samples \/\/ batch_size,\n                            verbose = 1)","5bdc7e0f":"acc = train2.history['accuracy']\nval_acc = train2.history['val_accuracy']\nloss = train2.history['loss']\nval_loss = train2.history['val_loss']\nepochs = range(10)\n\n# Plot akurasi data taraining dan validation\nplt.plot(epochs, acc, 'b', label='Akurasi training')\nplt.plot(epochs, val_acc, 'r', label='Akurasi validasi')\nplt.title('Akurasi Training dan Validasi')\nplt.legend()\n\n\n\nplt.show()","87598e36":"plt.plot(epochs, loss, 'b', label='Loss training',linestyle='--')\nplt.plot(epochs, val_loss, 'r', label='Loss validasi',linestyle='--')\nplt.title('Akurasi Training dan Validasi')\nplt.legend()\nplt.show()","d6a5e207":"model2.save('TugasADL_InceptionV3.h5')","a9135718":"model2 = keras.models.load_model('.\/TugasADL_InceptionV3.h5')","2be625de":"pred= model2.predict_generator(test_generator)\npredicted_class_indices=np.argmax(pred,axis=1)\nlabels=(test_generator.class_indices)\nlabels2=dict((v,k) for k,v in labels.items())\npredictions=[labels2[k] for k in predicted_class_indices]\n#print(predicted_class_indices)\n#print(labels)\n#print(predictions)","3c4ef309":"from sklearn.metrics import confusion_matrix,accuracy_score,classification_report\n\nconfusion_matrix(predicted_class_indices,test_generator.labels)","19096217":"print(classification_report(predicted_class_indices,test_generator.labels))","1c2910d0":"print(accuracy_score(predicted_class_indices,test_generator.labels))","304b36e8":"model3 = Sequential()\n\nmodel3.add(Conv2D(128, (3,3), input_shape=(224,224, 3), padding='same', strides=1, activation='relu'))\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel3.add(Conv2D(64, (3,3), padding='same', strides=1, activation='relu'))\nmodel3.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel3.add(Flatten())\nmodel3.add(Dense(128, activation='relu'))\nmodel3.add(Dropout(0.5))\nmodel3.add(Dense(8, activation='softmax'))\n\nmodel3.summary()","e0a9b733":"opt = keras.optimizers.Adam(lr=0.001)\nmodel3.compile(optimizer=opt,\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])\n\nbatch_size = 32\n\ntrain3 = model3.fit(train_generator,\n                            epochs=10,\n                            steps_per_epoch = train_generator.samples \/\/ batch_size,\n                            validation_data = val_generator,\n                            validation_steps = val_generator.samples \/\/ batch_size,\n                            verbose = 1)","ce8a7cf7":"predicted = model3.predict_classes(test_generator, verbose=1)","6252f9c1":"predicts = predicted.flatten()","0dd0c267":"import pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\n\ndata = {'y_Actual':    test_generator.classes,\n        'y_Predicted': predicts\n        }\n\ndf = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])\nconfusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])\n\nsn.heatmap(confusion_matrix, annot=True, fmt='.0f')\nplt.show()","9e13734c":"print(classification_report(predicts,test_generator.labels))","6fd16b08":"print(accuracy_score(predicts,test_generator.labels))","86e42aba":"model3.save('TugasADL_SelfModel.h5')","65fd9194":"# Model VGG16","c80c722a":"# Model InceptionV3","6b2059b1":"# SelfModel"}}