{"cell_type":{"d3f866a2":"code","9eb6a9ac":"code","dc1db960":"code","92fd478a":"code","056d44c8":"code","5d8acc1b":"code","238e1b4c":"code","70ed76e5":"code","0efe91b1":"code","d7a6f23a":"code","014ada99":"code","b5f79b73":"code","a452439c":"code","179950d6":"code","f63569c6":"code","a7250760":"code","a1b9f09b":"code","bc8a42c3":"code","363b42b6":"code","314b83a9":"code","94c12f9b":"code","f21cd856":"code","1c56eae3":"code","797192c8":"code","cae53814":"code","2ea97142":"code","c1e56ffb":"code","c363d13a":"code","bb31a070":"code","ca9e494e":"code","da48021b":"code","0ef3fa16":"markdown","c1c5f9c5":"markdown","7499ff55":"markdown","bfb96f82":"markdown","46f1ca5f":"markdown","cebf94d7":"markdown","3d38223a":"markdown","3e1336a1":"markdown","762d7144":"markdown","a0158f26":"markdown","12afe0ed":"markdown","2a139b79":"markdown","c2d13d1f":"markdown","c75c6d87":"markdown","b733968f":"markdown","5326a895":"markdown","9b39b7a2":"markdown"},"source":{"d3f866a2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.max_columns = 100\npd.options.display.max_colwidth = 200\npd.options.display.max_rows = 500\n\nimport os\nprint(os.listdir(\"..\/input\"))","9eb6a9ac":"import glob\nimport json\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport gc\n\n%matplotlib inline","dc1db960":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/sample_submission.csv\")\nlabels_df = pd.read_csv(\"..\/input\/labels.csv\")","92fd478a":"print(\"[train]\")\nprint(len(train_df))\nprint(Counter(map(lambda x: x.split(\".\")[-1], os.listdir(\"..\/input\/train\/\"))))\n\nprint(\"[test]\")\nprint(len(test_df))\nprint(Counter(map(lambda x: x.split(\".\")[-1], os.listdir(\"..\/input\/test\/\"))))","056d44c8":"len(labels_df)","5d8acc1b":"labels_df[\"attribute_type\"] = labels_df.attribute_name.apply(lambda x: x.split(\"::\")[0])\nprint(labels_df[\"attribute_type\"].value_counts())\nlabels_df.attribute_type.value_counts().plot.bar()","238e1b4c":"labels_df.query(\"attribute_type == 'culture'\").index ","70ed76e5":"labels_df.query(\"attribute_type == 'tag'\").index ","0efe91b1":"labels_df[:398].head(10)","d7a6f23a":"labels_df[398:].head(10)","014ada99":"train_attr_ohot = np.zeros((len(train_df), len(labels_df)), dtype=int)\n\nfor idx, attr_arr in enumerate(train_df.attribute_ids.str.split(\" \").apply(lambda l: list(map(int, l))).values):\n    train_attr_ohot[idx, attr_arr] = 1","b5f79b73":"names_arr = labels_df.attribute_name.values\ntrain_df[\"attribute_names\"] = [\", \".join(names_arr[arr == 1]) for arr in train_attr_ohot]","a452439c":"train_df[\"attr_num\"] = train_attr_ohot.sum(axis=1)\ntrain_df[\"culture_attr_num\"] = train_attr_ohot[:, :398].sum(axis=1)\ntrain_df[\"tag_attr_num\"] = train_attr_ohot[:, 398:].sum(axis=1)","179950d6":"train_df.head()","f63569c6":"train_df.attr_num.value_counts().sort_index()","a7250760":"train_df.culture_attr_num.value_counts().sort_index()","a1b9f09b":"train_df.tag_attr_num.value_counts().sort_index()","bc8a42c3":"fig = plt.figure(figsize=(15, 10))\nfig.subplots_adjust(hspace=0.4)\nax1 = fig.add_subplot(3,1,1)\nsns.countplot(train_df.attr_num,)\nax1.set_title(\"number of attributes each art has\")\nax2 = fig.add_subplot(3,1,2,)\nsns.countplot(train_df.culture_attr_num, ax=ax2)\nax2.set_title(\"number of 'culture' attributes each art has\")\nax3 = fig.add_subplot(3,1,3,)\nax3.set_title(\"number of 'tag' attributes each art has\")\nsns.countplot(train_df.tag_attr_num, ax=ax3)","363b42b6":"pd.pivot_table(\n    train_df, index='culture_attr_num', columns='tag_attr_num', values='attr_num',\n    aggfunc=len)","314b83a9":"train_df.culture_attr_num.value_counts(normalize=True).sort_index()","94c12f9b":"train_df.tag_attr_num.value_counts(normalize=True).sort_index()","f21cd856":"train_df.sort_values(by=\"culture_attr_num\", ascending=False).head(15)","1c56eae3":"train_df.sort_values(by=\"tag_attr_num\", ascending=False).head(15)","797192c8":"from PIL import Image","cae53814":"fig = plt.figure(figsize=(5 * 5, 5 * 6))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df.sort_values(by=\"culture_attr_num\", ascending=False)[[\"id\", \"attribute_names\"]].values[:15]):\n    ax = fig.add_subplot(5, 3, i \/\/ 3 * 3 + i % 3 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","2ea97142":"fig = plt.figure(figsize=(5 * 6, 5 * 5))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df.sort_values(by=\"tag_attr_num\", ascending=False)[[\"id\", \"attribute_names\"]].values[:15]):\n    ax = fig.add_subplot(5, 3, i \/\/ 3 * 3 + i % 3 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","c1e56ffb":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 1][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","c363d13a":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 2][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","bb31a070":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 3][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","ca9e494e":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 4][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","da48021b":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 5][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","0ef3fa16":"### arts with 2 _tag_ attributes","c1c5f9c5":"### number of attributes each art has","7499ff55":"### arts with 3 _tag_ attributes","bfb96f82":"### number of _\"tag\"_ attributes each art has","46f1ca5f":"It seems that more _tag_ attributes arts have, more complex they are.\n\nMost of arts with one _tag_ attributes are single objects such as ornaments.  \nIn contrast, most of arts with five ones are pictures or objects with complex design.\n\nMaybe, we can predict number of _tag_ attributes by **_complexity_** of arts ?","cebf94d7":"### arts with 4 _tag_ attributes","3d38223a":"### arts with 5 _tag_ attributes","3e1336a1":"### plots","762d7144":"### arts with many _tag_ attirbutes","a0158f26":"Since I have poor knowledge of art, cannot validate _culture_ attributes.\n\nHow about _tag_ attributes? They are relatively interpretable, but may be splitable into some types:\n\n* objects painted (or carved) on arts: animals, humans, places, ...\n* type of arts: 'cups', 'coat of arms', 'textiles'. 'dishes', 'vines'...\n* special situations: 'nativity', 'last jugement', 'crucifixion',...\n* actions: 'hourse riding', 'reading', 'suffering', ...\n* ...\n\nTherefore, I think it may be useful for classification to consider type of _tag_ attribute.\n<br>\n<br>\n<br>\nWith respect to number, pictures tend to have more _tag_ attributes because of painted objects on them.  \nI have one assumption that number of tag attributes depends on type of arts. Then, check several examples.","12afe0ed":"There is difference between the distribution of number of culture attributes and one of tag attributes.  \n\nThe number of _culture_ attributes 99% of arts have is 0 or 1 or 2, moreover, **80% is 1**.  \nOn the other hands, the number of _tag_ attributes shows a **gentler** slope from 1 to 5. Very few of arts have no tag attribute.\n\nI think these observations may be useful for deciding thresholds ofclassifiers. \n\n\nNext, I show the arts which have many culuture or tag attributes. ","2a139b79":"### number of _\"culture\"_ attributes each art has","c2d13d1f":"### arts with 1 _tag_ attribute","c75c6d87":"It is difficult for me to find somthing from these tables. Let's show images of arts in these tables.","b733968f":"### arts with many _culture_ attributes","5326a895":"## check attibure_id's frequency in train","9b39b7a2":"## check labels"}}