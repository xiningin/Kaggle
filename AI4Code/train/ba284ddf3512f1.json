{"cell_type":{"49b72c2a":"code","78d2bb3e":"code","73afdca4":"code","596a8fe1":"code","3ac90535":"code","ba3251af":"code","0c5879e0":"code","98e104e1":"code","83b58252":"code","62c4bd08":"code","3b57c667":"code","5516917a":"markdown","0564617f":"markdown","5e669a50":"markdown","f7ae47b3":"markdown","c5316901":"markdown","b332c923":"markdown"},"source":{"49b72c2a":"!wget https:\/\/bin.equinox.io\/c\/4VmDzA7iaHb\/ngrok-stable-linux-amd64.zip\n!unzip ngrok-stable-linux-amd64.zip\nLOG_DIR = '.\/logs' # Here you have to put your log directory\nget_ipython().system_raw(\n    'tensorboard --logdir {} --host 0.0.0.0 --port 6006 &'\n    .format(LOG_DIR)\n)\nget_ipython().system_raw('.\/ngrok http 6006 &')\n! curl -s http:\/\/localhost:4040\/api\/tunnels | python3 -c \\\n    \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\"","78d2bb3e":"import numpy as np\nimport pandas as pd \nimport cv2\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\nprint(os.listdir(\"..\/input\/utkface_aligned_cropped\/\"))","73afdca4":"def imshow(img):\n    plt.imshow(img, interpolation='bicubic')\n    plt.xticks([]), plt.yticks([]) \n    plt.show()","596a8fe1":"onlyfiles = os.listdir(\"..\/input\/utkface_aligned_cropped\/UTKFace\")\ny = np.array([[[i.split('_')[0]],[i.split('_')[1]]] for i in onlyfiles])\n# y = np.array([[i.split('_')[1] for i in onlyfiles]]).T\nprint(y.shape)\nprint(y[0])","3ac90535":"X_data =[]\nfor file in onlyfiles:\n    face = cv2.imread(\"..\/input\/utkface_aligned_cropped\/UTKFace\/\"+file,cv2.IMREAD_COLOR)\n    face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n    face =cv2.resize(face, (32,32) )\n    X_data.append(face)\nX_data=np.array(X_data)\nX_data.shape","ba3251af":"X = np.squeeze(X_data)\nimshow(X[1])\nprint(y[1])","0c5879e0":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33)\ny_train=[y_train[:,1],y_train[:,0]]\ny_valid=[y_valid[:,1],y_valid[:,0]]","98e104e1":"\ndef gen_model():\n    inputs = tf.keras.layers.Input(shape=(32, 32, 3))\n    x = inputs\n    x = layers.Conv2D(32,3,activation='relu')(x)\n    x = layers.Conv2D(32,3,activation='relu')(x)\n    x = layers.MaxPool2D(2)(x)\n    x = layers.Dropout(0.3)(x)\n    x = layers.Conv2D(64,3,activation='relu')(x)\n    x = layers.Conv2D(64,3,activation='relu')(x)\n    x = layers.MaxPool2D(2)(x)\n    x = layers.Dropout(0.3)(x)\n    x = layers.Conv2D(84,3,activation='relu')(x)\n    x = layers.Dropout(0.3)(x)\n    x = layers.Flatten()(x)\n    x1 = layers.Dense(64,activation='relu')(x)\n    x2 = layers.Dense(64,activation='relu')(x)\n    x1 = layers.Dense(1,activation='sigmoid',name='sex_out')(x1)\n    x2 = layers.Dense(1,activation='relu',name='age_out')(x2)\n    model = tf.keras.models.Model(inputs=inputs, outputs=[x1, x2])\n    model.compile(optimizer='Adam', loss=['binary_crossentropy','mae'])\n    tf.keras.utils.plot_model(model, 'model.png',show_shapes=True)  \n    return model\nmodel=gen_model()\n\nImage('model.png')","83b58252":"import random\nrandom_id=random.random()\nmodel.summary()\ncallbacks = [\n    tf.keras.callbacks.EarlyStopping(patience=75, monitor='val_loss',restore_best_weights=True),\n    tf.keras.callbacks.TensorBoard(log_dir='.\/logs\/'+str(random_id))\n]\nmodel.fit(X_train, y_train, epochs=200,batch_size=240,validation_data=(X_valid,y_valid),callbacks=callbacks, shuffle=True)\n","62c4bd08":"model.evaluate(X_valid,y_valid)","3b57c667":"p_id=2\nimshow(X_valid[p_id])\nprint(y_valid[0][p_id],y_valid[1][p_id])\nprint(model.predict([[X_valid[p_id]]]))","5516917a":"## Evaluate Model","0564617f":"## Build Model","5e669a50":"## Load and Visualize data","f7ae47b3":"## Import Dependencies and run Tensorboard","c5316901":"## Table of contents\n* [Import Dependencies and run Tensorboard](#Import-Dependencies-and-run-Tensorboard)\n* [Load and Visualize data](#Load-and-Visualize-data)\n* [Build Model](#Build-Model)\n* [Train Model](#Train-Model)\n* [Evaluate Model](#Evaluate-Model)","b332c923":"## Train Model"}}