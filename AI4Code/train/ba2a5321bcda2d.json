{"cell_type":{"825b9775":"code","9a0cee46":"code","7c9eac5f":"code","b6dff020":"code","2d285914":"code","e4470749":"code","267154ac":"code","5f2f1f39":"code","b8b75af8":"code","a4ce1ccb":"code","5923fc40":"code","96831648":"code","28ff35a6":"markdown","dd0101c8":"markdown","dd13953f":"markdown","f41ca34e":"markdown","f1788612":"markdown","0df81349":"markdown","0b5fb4be":"markdown","1952cd7e":"markdown","058617a9":"markdown","55eef553":"markdown","39446609":"markdown","c0d0e1b0":"markdown","5ec8569c":"markdown","758f087e":"markdown"},"source":{"825b9775":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","9a0cee46":"df = pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ndf = df.set_index(\"CustomerID\")\n\ndisplay(df)","7c9eac5f":"from sklearn.preprocessing import LabelEncoder\ndf[\"Gender\"] = LabelEncoder().fit_transform(df[\"Gender\"])\ndisplay(df)","b6dff020":"def cluster_assignment(X,mu):\n    C = []\n    for i in range(len(X)):\n        distance_array = []\n        for centroid in range(len(mu)):\n            distance = np.sqrt(np.sum((X[i] - mu[centroid])**2))\n            distance_array.append(distance) # MSE \n        C.append(np.argmin(distance_array))\n    return C\n    ","2d285914":"def centroid_recalculation(X,C,NUMBER_OF_CENTROID):\n    mu_new = []\n    for k in range(NUMBER_OF_CENTROID):\n        cnt = 0\n        sum_of_all_points = np.zeros([1,len(X[0])])\n        for i in range(len(X)):\n            if C[i] == k:\n                cnt += 1\n                sum_of_all_points = np.add(sum_of_all_points, X[i])\n\n\n        new_centroid_location = sum_of_all_points \/ cnt\n        mu_new.append(new_centroid_location)\n    return mu_new\n","e4470749":"def calculate_cost(X,C,mu):\n    cost = 0\n    for i in range(len(X)):\n          cost += (X[i] - mu[C[i]])**2\n    return (1\/len(X)) * np.sqrt(np.sum(cost))","267154ac":"def main(NUMBER_OF_CENTROID):\n    X = df.values\n    INITIAL_CENTEROIDS = df.sample(n=NUMBER_OF_CENTROID).values # initialize centroids\n    mu = INITIAL_CENTEROIDS\n    J = []\n    for i in range(MAX_NUMBER_OF_ITERATIONS):\n        C = cluster_assignment(X,mu)\n        mu_new = centroid_recalculation(X,C,NUMBER_OF_CENTROID)\n\n        J.append(calculate_cost(X,C,mu_new))\n\n        if not i == 0 :  \n            if J[i] == J[i-1] :\n                break\n        mu = mu_new\n    return J[-1]","5f2f1f39":"NUMBER_OF_EXAMPLES = df.shape[0]\nNUMBER_OF_ATTRIBUTES = df.shape[1]\nMAX_NUMBER_OF_ITERATIONS = 20\n\nfinal_cost = []\nfor k in range(1,10):\n    NUMBER_OF_CENTROID = k\n    cost = main(NUMBER_OF_CENTROID)\n    final_cost.append((k,cost))","b8b75af8":"plt.plot([x[0] for x in final_cost],[x[1] for x in final_cost])","a4ce1ccb":"from sklearn.cluster import KMeans\nclf = KMeans(n_clusters=7,init=df.sample(n=7).values)\nclf.fit(df)\nclf.cluster_centers_","5923fc40":" X = df.values\nNUMBER_OF_CENTROID = 7\nINITIAL_CENTEROIDS = df.sample(n=NUMBER_OF_CENTROID).values # initialize centroids\nmu = INITIAL_CENTEROIDS\nJ = []\nfor i in range(MAX_NUMBER_OF_ITERATIONS):\n    C = cluster_assignment(X,mu)\n    mu_new = centroid_recalculation(X,C,NUMBER_OF_CENTROID)\n    J.append(calculate_cost(X,C,mu_new))\n    \n    if not i == 0 :  \n        if J[i] == J[i-1] :\n            break\n    mu = mu_new","96831648":"for x in range(NUMBER_OF_ATTRIBUTES-1):\n    PARAM_X = x\n    for y in range(x+1,NUMBER_OF_ATTRIBUTES):\n        PARAM_Y = y\n    \n        plt.scatter([x[PARAM_X] for x in X],[x[PARAM_Y] for x in X],c=C)\n        plt.scatter([i[0][PARAM_X] for i in mu],[i[0][PARAM_Y] for i in mu],linewidth=3,color='red', marker='o',)\n        plt.xlabel(df.columns[x])\n        plt.ylabel(df.columns[y])\n        \n        plt.show()","28ff35a6":"## Elbow Method","dd0101c8":"### Imports","dd13953f":"### Define global parameters","f41ca34e":"#### Cluster Assignment","f1788612":"### Data Viz\n#### Looking at the effect of every attribute ","0df81349":"### Reading Dataset","0b5fb4be":"#### Driver Function","1952cd7e":"## K Means Implementation","058617a9":"### Data Cleaning \/ Pre processing","55eef553":"## K Means algorithm implementation from scratch using numpy","39446609":"#### Cost Calculation","c0d0e1b0":"#### Move Centeroids","5ec8569c":"Optimum values of K is 7","758f087e":"### Comparing Results with Sklearn"}}