{"cell_type":{"f828a502":"code","d97b6d66":"code","3865f92e":"code","b2325e07":"code","b60a0ada":"code","940483ad":"code","fad1171c":"code","24d8e6e7":"code","4bd7ab1f":"code","8718b31c":"code","48f5e309":"code","85db836a":"code","fd6e7bb8":"code","848b25a5":"code","8951d82e":"code","28179154":"code","76c4690d":"code","633bfc3e":"code","3ee726b8":"code","74e5f8f5":"code","cb5f809b":"code","c80e2eea":"code","2f97370a":"code","509b41ff":"markdown","8fd8b946":"markdown","953b8fdf":"markdown","650f16f9":"markdown","8005ed4d":"markdown","086cc073":"markdown","f21a6d9a":"markdown","948e9a6a":"markdown","51b3df5c":"markdown","dedaef55":"markdown","37ac6d8b":"markdown","56214e36":"markdown"},"source":{"f828a502":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport xgboost as XGB\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","d97b6d66":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","3865f92e":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show","b2325e07":"df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')","b60a0ada":"df.head()","940483ad":"labels = [\"T-shirt\/top\",\"Trouser\",\"Pullover\",\"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\n          \"Sneaker\",\"Bag\",\"Ankle boot\"]","fad1171c":"print(labels[df.label[0]])","24d8e6e7":"df.shape","4bd7ab1f":"df.head(50)","8718b31c":"y = df['label']","48f5e309":"X = df.drop(['label'], axis=1)","85db836a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","fd6e7bb8":"X1 = np.array(X)","848b25a5":"image = X1[0].reshape(28,28)","8951d82e":"plt.imshow(image)","28179154":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","76c4690d":"n_samples = len(df.index)\nimages = X1.reshape(n_samples,28,28)","633bfc3e":"plt.figure(figsize = (10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","3ee726b8":"xgb = XGB.XGBClassifier()","74e5f8f5":"xgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)","cb5f809b":"pd.crosstab(y_test, y_xgb, rownames=['Reel'], colnames=['Prediction'], margins=True)","c80e2eea":"print(classification_report(y_test, y_xgb))","2f97370a":"y_pred = xgb.predict(X_test)\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)","509b41ff":"## Librairies et fonctions utiles","8fd8b946":"## Zalando Fashion MNIST","953b8fdf":"**Appliquer des m\u00e9thodes de machine learning \u00e0 la reconnaissance des objets (for\u00eats al\u00e9atoires, xgboost, ...)**  ","650f16f9":"**Afficher les 50 premiers \u00e9l\u00e9ments du dataset avec leur label**  \n","8005ed4d":"Fonction pour tracer la courbe ROC :","086cc073":"La premi\u00e8re image du dataset est un pull :","f21a6d9a":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","948e9a6a":"## Defining training data and test data\n","51b3df5c":"Le dataset a \u00e9t\u00e9 constitu\u00e9 par Zalando :  \nhttps:\/\/github.com\/zalandoresearch\/fashion-mnist  \n  \nOn a un ensemble d'apprentissage de 60 000 images 28x28 pixels en niveaux de gris, et 10 classes de v\u00eatements : jupes, pantalons, baskets, ...","dedaef55":"# Exercice : Zalando Fashion MNIST","37ac6d8b":"<img src=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true\">","56214e36":"# *Xgboost*"}}