{"cell_type":{"43cf0c1b":"code","e764b9d8":"code","b6e2f37a":"code","5d30a148":"code","424e2410":"code","47a1068e":"code","22d0fe15":"code","084faf6f":"code","bba889f0":"code","ab15502c":"code","3145563b":"code","16ae9cc2":"code","ff50a4c9":"code","4d1d0490":"code","a14612cb":"code","bfe2883a":"code","5b3c6792":"code","28bcef15":"code","af59817b":"code","e3bde37d":"markdown","d7f63630":"markdown","5a2df37c":"markdown","e6d73b07":"markdown","e560a6a0":"markdown","6d3ce05a":"markdown","0f30b7fa":"markdown","d0efc2b5":"markdown","8db11633":"markdown","5e17da35":"markdown","2f62e881":"markdown","19bd27ba":"markdown"},"source":{"43cf0c1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e764b9d8":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv')\nfull_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nfull_deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')","b6e2f37a":"containment = pd.read_csv('\/kaggle\/input\/covid19-containment-and-mitigation-measures\/COVID 19 Containment measures data.csv')","5d30a148":"train.tail()","424e2410":"full_data.head()","47a1068e":"full_deaths.head()","22d0fe15":"import plotly.graph_objects as go\n\nfull_data = full_data.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_data['text'] = full_data['Country'] + \" \" + full_data[\"4\/13\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_data[\"Long\"],\n    lat = full_data[\"Lat\"],\n    text = full_data[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_data['4\/13\/20'],\n        cmax = full_data['4\/13\/20'].max(),\n        colorbar_title = \"COVID 19 Reported Cases\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Confirmed Cases Around the World on 13th April\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","084faf6f":"full_data = full_data.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_data['text'] = full_data['Country'] + \" \" + full_data[\"4\/30\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_data[\"Long\"],\n    lat = full_data[\"Lat\"],\n    text = full_data[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_data['4\/30\/20'],\n        cmax = full_data['4\/30\/20'].max(),\n        colorbar_title = \"COVID 19 Reported Cases\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Confirmed Cases Around the World on 30th April\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","bba889f0":"full_data = full_data.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_data['text'] = full_data['Country'] + \" \" + full_data[\"5\/4\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_data[\"Long\"],\n    lat = full_data[\"Lat\"],\n    text = full_data[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_data['5\/4\/20'],\n        cmax = full_data['5\/4\/20'].max(),\n        colorbar_title = \"COVID 19 Reported Cases\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Confirmed Cases Around the World on 4th May\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","ab15502c":"full_deaths = full_deaths.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_deaths['text'] = full_deaths['Country'] + \" \" + full_deaths[\"4\/13\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_deaths[\"Long\"],\n    lat = full_deaths[\"Lat\"],\n    text = full_deaths[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_deaths['4\/13\/20'],\n        cmax = full_deaths['4\/13\/20'].max(),\n        colorbar_title = \"COVID 19 Deaths\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Deaths Around the World on 13th April\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","3145563b":"full_deaths = full_deaths.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_deaths['text'] = full_deaths['Country'] + \" \" + full_deaths[\"4\/30\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_deaths[\"Long\"],\n    lat = full_deaths[\"Lat\"],\n    text = full_deaths[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_deaths['4\/30\/20'],\n        cmax = full_deaths['4\/30\/20'].max(),\n        colorbar_title = \"COVID 19 Deaths\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Deaths Around the World on 30th April\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","16ae9cc2":"full_deaths = full_deaths.rename(columns= {\"Country\/Region\" : \"Country\", \"Province\/State\": \"Province\"})\n\nfull_deaths['text'] = full_deaths['Country'] + \" \" + full_deaths[\"5\/4\/20\"].astype(str)\nfig = go.Figure(data = go.Scattergeo(\n    lon = full_deaths[\"Long\"],\n    lat = full_deaths[\"Lat\"],\n    text = full_deaths[\"text\"],\n    mode = \"markers\",\n    marker = dict(\n        size = 12,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = True,\n        symbol = 'square',\n        line = dict(\n            width = 1,\n            color = 'rgba(102, 102, 102)'\n        ),\n        cmin = 0,\n        color = full_deaths['5\/4\/20'],\n        cmax = full_deaths['5\/4\/20'].max(),\n        colorbar_title = \"COVID 19 Deaths\"\n    )\n))\n\nfig.update_layout(\n    title = \"COVID19 Deaths Around the World on 4th May\",\n    geo = dict(\n        scope = \"world\",\n        showland = True,\n    )\n)\n\n\nfig.show()","ff50a4c9":"US = full_data[full_data['Country'] == 'US']\nIndia = full_data[full_data['Country'] == 'India']\nItaly = full_data[full_data['Country'] == 'Italy']\nSK = full_data[full_data['Country'] == 'Korea, South']\n","4d1d0490":"US","a14612cb":"US.drop(['text', 'Country', 'Province', 'Lat', 'Long'], axis=1, inplace=True)\ncolumns = US.columns\n\nUS_data = pd.DataFrame(columns=['day', 'cases'])\nindex = 1\nfor col in columns:\n    US_data.loc[len(US_data)] = [index, US[col].values[0]]\n    index += 1\n\n# ------- -------- ------- -------- ------- -------- ------- -------- ------- --------\nIndia.drop(['text', 'Country', 'Province', 'Lat', 'Long'], axis=1, inplace=True)\ncolumns = India.columns\n\nIndia_data = pd.DataFrame(columns=['day', 'cases'])\nindex = 1\nfor col in columns:\n    India_data.loc[len(India_data)] = [index, India[col].values[0]]\n    index += 1\n    \n# ------- -------- ------- -------- ------- -------- ------- -------- ------- --------\nItaly.drop(['text', 'Country', 'Province', 'Lat', 'Long'], axis=1, inplace=True)\ncolumns = Italy.columns\n\nItaly_data = pd.DataFrame(columns=['day', 'cases'])\nindex = 1\nfor col in columns:\n    Italy_data.loc[len(Italy_data)] = [index, Italy[col].values[0]]\n    index += 1\n    \n# ------- -------- ------- -------- ------- -------- ------- -------- ------- --------\nSK.drop(['text', 'Country', 'Province', 'Lat', 'Long'], axis=1, inplace=True)\ncolumns = SK.columns\n\nSK_data = pd.DataFrame(columns=['day', 'cases'])\nindex = 1\nfor col in columns:\n    SK_data.loc[len(SK_data)] = [index, SK[col].values[0]]\n    index += 1","bfe2883a":"plt.scatter(US_data['day'], US_data['cases'])","5b3c6792":"plt.scatter(India_data['day'], India_data['cases'])","28bcef15":"plt.scatter(Italy_data['day'], Italy_data['cases'])","af59817b":"plt.scatter(SK_data['day'], SK_data['cases'])","e3bde37d":"However, First we need to covert the data into a column, instead of keeping it in a single row. We will also get rid of the province, country, lat, long and text columns, since we know the country is fixed.","d7f63630":"South Koreas looks like it is reaching the end of the COVID-19 rollercoster, like China. However, the data points have too much variance to use an effective polynomial regression. Hence, a more complicated time series model may be required.","5a2df37c":"Thank you for reading this notebook. I will create another notebook to try and create polynomial regression models for at least US, India and Italy. So, stay Tuned.\n\nPlease upvote, as it helps me understand that my work is helpful.","e6d73b07":"# Confirmed Cases - World Map\n\nThe below plots are interactive. Howevering over a square will show you the number of confirmed cases in that region. Some countries have only 1 square, while others (look China and US) have it split across.","e560a6a0":"# Scatter plots + Regression Ideas","6d3ce05a":"This competition aims to understand the spread of the COVID-19 Virus across the globe.\nThe main additional dataset I will be using is the novel corona virus 2019 datset by SRK. Although it isn't purely 2019 data.\n\nHere, I will plot the confirmed cases and deaths over time on a map, and then on a scatter graph (for 4 countries). I think that for most countries, a high order polynomial regression can be sucessfull (taking inspiration from the idea behind the Taylor Series, where non-polynomial functions can be approximated with polynomial functions). Obviously, we will have to pre-process the data a lot for this, and I have given ideas for the 3 countries below. I hope my insights can help in fitting a good model, which I plan to do in another notebook. \n\n\nPlease upvote if you find the visualizations helpful, as it means a lot to me. - Thanks","0f30b7fa":"Now, let us try to look at individual countries to understand what is going on.","d0efc2b5":"We are only going to consider China, US, India (my country, so I am biased :), and South Korea.","8db11633":"Italy's graph is slowing down, so here, I think we can cut of the data from about 70 days, and then try a logarithmic regression. (One possible way of acheiving logarithmic regression is by exponentiating the values, and then fitting a linear model. After that, log the predictions.)","5e17da35":"So, we can see that the situation is getting progressively worse all across the world (except for China). All of the squares are getting darker in color - look at India, it has a noticable orange tinge as compared to earlier.\n\n# Deaths - World Map\n\nNow, let us move on to see how the number of deaths is progressing. Again, the plots are interactive, and hovering over a square gives you the number of deaths in that region.","2f62e881":"India is still early on in its journey, and is still exponential. Since every non-polynomial function can be approximated by a polynomial function, maybe a polynomial regression (n = 6) can give accurate results. ","19bd27ba":"So, US has managed to slow down the growth. It doesn't look exponential anymore. My guess is that the R (reproductive rate) is roughly 1, so a linear regression might be able to extrapolate accurate values (after cutting off data for the first 70 days)."}}