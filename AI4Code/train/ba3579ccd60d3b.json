{"cell_type":{"b056f288":"code","79c65d0b":"code","952d2ec3":"code","761e83eb":"code","8b6b8c47":"code","bfae3e2c":"code","27507b72":"code","24463905":"code","5f9d88db":"code","2385e638":"code","90a6fab2":"code","4aab595c":"code","7565f71b":"code","4c6fbe8f":"code","e953571c":"code","cbce3c72":"code","de017924":"code","8df3e9e0":"code","98f8d07c":"code","b3eab92c":"code","a4e67427":"code","beccde84":"code","c1796c44":"code","2444a50a":"code","c4407cf2":"code","ccd61040":"code","ac7ac55c":"code","cfa7de33":"code","3ce76a18":"code","f3b2c692":"code","885d74fb":"code","0360197b":"code","1f6d1804":"code","3772a910":"code","18c98251":"code","0cfc22bf":"code","eaffc077":"code","af309cbf":"code","7b38df2b":"code","2ee4cdb0":"code","5f0453bf":"markdown","25076256":"markdown","93af40a3":"markdown","240cdfb6":"markdown","056e773a":"markdown","8e7f1ee0":"markdown","339a8801":"markdown","9611aca2":"markdown","5ae7907b":"markdown","1cb47f37":"markdown","a3cb160c":"markdown","881ba49f":"markdown","29fea05b":"markdown","4adbf5b3":"markdown","2b3c2798":"markdown","8c7841bc":"markdown"},"source":{"b056f288":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","79c65d0b":"data = pd.read_csv(\"..\/input\/hivprogression\/training_data.csv\")","952d2ec3":"data.head()","761e83eb":"list(data)","8b6b8c47":"data = data[['PatientID', 'Resp', 'VL-t0', 'CD4-t0']]","bfae3e2c":"data.shape","27507b72":"data.isna().sum()","24463905":"data.head()","5f9d88db":"data['Resp'].value_counts()","2385e638":"data['Resp'].nunique()","90a6fab2":"data['Resp'].unique()","4aab595c":"import matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(data.drop(['PatientID'],axis = 1))\nplt.show()","7565f71b":"plt.plot(data['Resp'],data['CD4-t0'],'bo')\nplt.xlabel('Resp')\nplt.ylabel('CD4-t0')\nplt.show()","4c6fbe8f":"data.boxplot(by = 'Resp',column = ['CD4-t0'],grid = False)\n","e953571c":"plt.plot(data['Resp'],data['VL-t0'],'bo')\nplt.xlabel('Resp')\nplt.ylabel('VL-t0')\nplt.show()","cbce3c72":"data.boxplot(by = 'Resp',column = ['VL-t0'],grid = False)","de017924":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","8df3e9e0":"X = data[['VL-t0','CD4-t0']].values\nY = data[['Resp']].values","98f8d07c":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2, random_state =2 )","b3eab92c":"model = LogisticRegression()\nmodel.fit(X_train, Y_train)","a4e67427":"prediction = model.predict(X_test)","beccde84":"from sklearn.metrics import classification_report \nprint(classification_report(Y_test, prediction))","c1796c44":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, Y_train)","2444a50a":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","c4407cf2":"print(classification_report(Y_test, y_pred))","ccd61040":"y_score_rf = model.predict_proba(X_test)[:,-1]\ny_score_rf","ac7ac55c":"from sklearn.metrics import average_precision_score, auc, roc_curve, precision_recall_curve\naverage_precision = average_precision_score(Y_test, y_score_rf)\n\nprint('Average precision-recall score RF: {}'.format(average_precision))","cfa7de33":"from sklearn.metrics import precision_recall_curve\nimport matplotlib.pyplot as plt\n\nprecision, recall, _ = precision_recall_curve(Y_test, y_score_rf)\nplt.step(recall, precision, color='b', alpha=0.2,\n         where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2,\n                 color='b')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n          average_precision))","3ce76a18":"# importing SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n# applying SMOTE to our data and checking the class counts\nX_resampled, y_resampled = SMOTE().fit_resample(X, Y)\nprint(sorted(Counter(y_resampled).items()))","f3b2c692":"X1_train,X1_test,Y1_train,Y1_test = train_test_split(X_resampled,y_resampled,test_size = 0.2, random_state =2 )","885d74fb":"model.fit(X1_train, Y1_train)","0360197b":"pred1 = model.predict(X1_test)","1f6d1804":"print(classification_report(Y1_test, pred1))","3772a910":"from imblearn.over_sampling import ADASYN\nfrom collections import Counter\n# applying SMOTE to our data and checking the class counts\nX_resampled1, y_resampled1 = ADASYN().fit_resample(X, Y)\nprint(sorted(Counter(y_resampled1).items()))","18c98251":"X2_train,X2_test,Y2_train,Y2_test = train_test_split(X_resampled1,y_resampled1,test_size = 0.2, random_state =2 )","0cfc22bf":"model.fit(X2_train, Y2_train)","eaffc077":"pred2 = model.predict(X2_test)","af309cbf":"print(classification_report(Y2_test, pred2))","7b38df2b":"y_score_rf2 = model.predict_proba(X2_test)[:,-1]\naverage_precision1 = average_precision_score(Y2_test, y_score_rf2)\n\nprint('Average precision-recall score RF: {}'.format(average_precision1))","2ee4cdb0":"precision, recall, _ = precision_recall_curve(Y2_test, y_score_rf2)\n\nplt.step(recall, precision, color='b', alpha=0.2,\n         where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2,\n                 color='b')\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n          average_precision1))","5f0453bf":"No missing Values ","25076256":"We can see that now models accuracy and recall both are good. Our model is performing bettter.","93af40a3":"We can see that though accuracy of the model is good which is 82% but our model is not prforming well. As precision and recall for class 1 is very poor.","240cdfb6":"Matrix plot of data excluding the Patient Id column to check the correlation between the variables. ","056e773a":"Average precision-recall score is 0.38 which is very low.","8e7f1ee0":"Precision Recall Curve","339a8801":"**K Nearest Neighbour**","9611aca2":"Some outliers are present in the data. Patients which are in class 0 are having high value of CD4-t0 and those are in class 1 are having low values of CD4-t0.","5ae7907b":"We can see that now models accuracy and recall both are good. Our model is performing bettter.","1cb47f37":"Check number of unique entries and what are the entries.","a3cb160c":"There is no relation between the variables.","881ba49f":"One outliers is present in the data. Patients which are in class 0 are having low value of VL-t0 and those are in class 1 are having high values of VL-t0.","29fea05b":"As there is class imbalance in the data we will use SMOTE (Synthetic Minority Oversampling Technique) and ADASYN (Adaptive synthetic sampling approach) to balanced the classes.","4adbf5b3":" **Logistic Regression**","2b3c2798":"We can see that though accuracy of the model is good which is 82% but our model is not prforming well. As precision and recall for class 1 is very poor.","8c7841bc":"We can see there is class imbalance in data."}}