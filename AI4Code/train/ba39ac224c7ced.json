{"cell_type":{"eb3b4c79":"code","1ccb667d":"code","43022816":"code","404b1478":"code","b31cd9ce":"code","39cd9e70":"code","53ba9ff4":"code","9b126673":"code","d10297e8":"code","260999dc":"code","9c975ae1":"code","2de680a3":"code","61490aef":"code","c49c5018":"code","f1623165":"code","ee7dbdbc":"code","35d0ec8b":"code","dc856e89":"code","183c508f":"code","fcf7cc35":"code","7b724bdc":"code","542ad7d3":"code","1e60b130":"code","51ca5376":"code","aa3839eb":"code","365aa9d1":"code","9c957b11":"code","834eeddf":"code","46008db7":"code","d96f629a":"code","ba726505":"code","8c0eb075":"code","18293d5e":"code","530da622":"code","ee3e2695":"code","ec58ea66":"code","49822640":"code","87bf4806":"code","17470631":"code","2cc6547c":"code","26c5bc22":"code","e8383f6c":"code","76bee9c8":"code","84e11781":"code","9ab95e4e":"code","26a44c48":"code","10db9245":"code","80ada36e":"code","864565ae":"code","8b63e88e":"code","f0ec5b9f":"code","0a7db012":"code","afa876e4":"code","51c5603a":"code","5b683d19":"code","e0c9fae1":"code","d1d2d60d":"code","dc947c3e":"code","fb6e04c5":"code","3d3296ca":"code","37adab77":"code","91da354f":"code","270f0ac9":"code","2a72e020":"code","9b82297e":"code","6c66f992":"code","a829f46f":"code","476bbfd5":"code","b332fb8c":"code","9f189dfb":"code","9fe8a13f":"code","b54942de":"code","1f2fde23":"code","6cd85173":"code","66df8661":"code","d7d1b4b0":"markdown","f0b17b85":"markdown","63aa4117":"markdown","8e7ae902":"markdown","f355c692":"markdown","85332908":"markdown","50c42ae0":"markdown","25d71c64":"markdown","a1a6e777":"markdown","dde92b4c":"markdown","f190d3aa":"markdown","26203b68":"markdown","39a5a9aa":"markdown","3acf1498":"markdown","5f073b68":"markdown","c492f422":"markdown","86b0d79a":"markdown","e9c37271":"markdown","28087ab8":"markdown","c1cf1a2e":"markdown","e8022c8b":"markdown","256b2759":"markdown","93f52e22":"markdown","93724a8d":"markdown","5495dbdf":"markdown","21e136af":"markdown","30c5527a":"markdown","eba0710c":"markdown","18696385":"markdown","02ef16e0":"markdown","abebf456":"markdown","c80768b5":"markdown","2d6b767a":"markdown"},"source":{"eb3b4c79":"# Import libraries\n\nimport pandas as pd\nimport numpy as np\n\n# Check the folder structure\nimport os\nimport datetime\nprint(os.listdir('..\/input'))\n\n#Visualisations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Model\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport lightgbm as lgb\n\n#Metrics\nfrom sklearn.metrics import roc_auc_score, roc_curve","1ccb667d":"#Let's load the train and test datasets\ndf_train = pd.read_csv('..\/input\/train.csv', parse_dates=['Date'])\ndf_test = pd.read_csv('..\/input\/test-3.csv', index_col='index', parse_dates=['Date'])","43022816":"df_train.head()","404b1478":"df_test.head()","b31cd9ce":"df_train.info()","39cd9e70":"df_test.info()","53ba9ff4":"df_test = df_test.drop('Referee', axis=1)","9b126673":"df_train.describe()","d10297e8":"df_test.describe()","260999dc":"df_train.shape, df_test.shape","9c975ae1":"df_train['FTR'].value_counts()","2de680a3":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.barplot(x=df_train['FTR'].value_counts().index, y = df_train['FTR'].value_counts().values, color='orange')\nax.set_title('Distribution of Full Time Result', fontsize=14)\nax.set_xlabel('Full Time Result', fontsize=12)\nax.set_ylabel('Count', fontsize=12)\nplt.show()","61490aef":"df_train[df_train['AF'].isnull()]","c49c5018":"drop_index = df_train[(df_train['HomeTeam'].isnull()) & (df_train['AwayTeam'].isnull())].index\ndf_train.drop(drop_index, inplace=True)","f1623165":"#Define a function which returns a null dataframe\ndef check_null(df):\n    df_null = df.isna().sum().reset_index()\n    df_null.columns = ['Column', 'Null_Count']\n    df_null = df_null[df_null['Null_Count'] > 0]\n    df_null = df_null.sort_values(by='Null_Count', ascending=False).reset_index(drop=True)\n    return df_null","ee7dbdbc":"df_null_train = check_null(df_train)\ndf_null_train","35d0ec8b":"#Let's fill null values grouped by the hometeam\nfor _, item in df_null_train.iterrows():\n    column = item['Column']\n    df_train[column] = df_train.groupby(['HomeTeam'])[column].transform(lambda x: x.fillna(x.mode()[0]))","dc856e89":"check_null(df_train)","183c508f":"check_null(df_test)","fcf7cc35":"def check_unique(df):\n    df_unique = df.nunique().reset_index()\n    df_unique.columns = ['Column', 'Unique_Count']\n    df_unique = df_unique[df_unique['Unique_Count'] < 2]\n    df_unique = df_unique.sort_values(by='Unique_Count', ascending=False).reset_index(drop=True)\n    return df_unique","7b724bdc":"check_unique(df_train)","542ad7d3":"check_unique(df_test)","1e60b130":"def plot_feature_distributions(df, features, palette):\n    i = 0\n    plt.figure()\n    fig, ax = plt.subplots(len(features),1,figsize=(14,35))\n    plt.subplots_adjust(bottom=0.001)\n\n    for feature in features:\n        i += 1\n        plt.subplot(len(features),1,i)\n        sns.barplot(df[feature].value_counts().index, df[feature].value_counts().values, palette=palette)\n        plt.title('Distribution of {0}'.format(feature), fontsize=14)\n        plt.xlabel(feature, fontsize=12)\n        plt.ylabel('Count', fontsize=12)\n    plt.show()","51ca5376":"def plot_feature_distribution_hue_target(df, features, palette):\n    i = 0\n    plt.figure()\n    fig, ax = plt.subplots(len(features),1,figsize=(14,35))\n    plt.subplots_adjust(bottom=0.001)\n\n    for feature in features:\n        i += 1\n        plt.subplot(len(features),1,i)\n        sns.countplot(x=feature, hue='FTR', data=df, palette=palette)\n        plt.title('Distribution of {0} by Full Time Result'.format(feature), fontsize=14)\n        plt.xlabel(feature, fontsize=12)\n        plt.ylabel('Count', fontsize=12)\n    plt.show()","aa3839eb":"features = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HTAG']\nplot_feature_distributions(df_train, features, 'RdBu')","365aa9d1":"features = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HTAG']\nplot_feature_distributions(df_test, features, 'PuOr')","9c957b11":"#Let's bin Away Team Corners values greater than 11.0 to 11.0\ndf_train['AC'] = df_train['AC'].transform(lambda x: 11.0 if x > 11.0 else x)\ndf_test['AC'] = df_test['AC'].transform(lambda x: 11.0 if x > 11.0 else x)\n\n#Let's bin values greater than 30.0 to 30.0 and test values greater than 26.0 to 26.0\ndf_train['AF'] = df_train['AF'].transform(lambda x: 30.0 if x > 30.0 else x)\ndf_test['AF'] = df_test['AF'].transform(lambda x: 26.0 if x > 26.0 else x)\n\n#Let's bin Away Team shots values greater than 27.0 to 27.0\ndf_train['AS'] = df_train['AS'].transform(lambda x: 27.0 if x > 27.0 else x)\ndf_test['AS'] = df_test['AS'].transform(lambda x: 27.0 if x > 27.0 else x)\n\n#Let's bin Away Team shots on Target values greater than 12.0 to 12.0\ndf_train['AST'] = df_train['AST'].transform(lambda x: 12.0 if x > 12.0 else x)\ndf_test['AST'] = df_test['AST'].transform(lambda x: 12.0 if x > 12.0 else x)\n\n#Let's bin Away Team Yellow Card values greater than 6.0 to 6.0\ndf_train['AY'] = df_train['AY'].transform(lambda x: 6.0 if x > 6.0 else x)\ndf_test['AY'] = df_test['AY'].transform(lambda x: 6.0 if x > 6.0 else x)","834eeddf":"features = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HTAG']\nplot_feature_distribution_hue_target(df_train, features, 'coolwarm')","46008db7":"features = ['HC', 'HF', 'HR', 'HS', 'HST', 'HTHG', 'HY']\nplot_feature_distributions(df_train, features, 'RdYlBu')","d96f629a":"features = ['HC', 'HF', 'HR', 'HS', 'HST', 'HTHG', 'HY']\nplot_feature_distributions(df_test, features, 'YlGnBu')","ba726505":"#Let's bin Home Team Corners values greater than 14.0 to 14.0\ndf_train['HC'] = df_train['HC'].transform(lambda x: 14.0 if x > 11.0 else x)\ndf_test['HC'] = df_test['HC'].transform(lambda x: 11.0 if x > 11.0 else x)\n\n#Let's bin Home Team values greater than 27.0 to 27.0 and test values greater than 24.0 to 24.0\ndf_train['HF'] = df_train['HF'].transform(lambda x: 27.0 if x > 27.0 else x)\ndf_test['HF'] = df_test['HF'].transform(lambda x: 24.0 if x > 24.0 else x)\n\n#Let's bin Home Team shots values greater than 30.0 to 30.0\ndf_train['HS'] = df_train['HS'].transform(lambda x: 30.0 if x > 30.0 else x)\ndf_test['HS'] = df_test['HS'].transform(lambda x: 30.0 if x > 30.0 else x)\n\n#Let's bin Home Team shots on Target values greater than 14.0 to 14.0 and 12.0 to 12.0 for test set\ndf_train['HST'] = df_train['HST'].transform(lambda x: 14.0 if x > 14.0 else x)\ndf_test['HST'] = df_test['HST'].transform(lambda x: 12.0 if x > 12.0 else x)\n\n#Let's bin Away Team Yellow Card values greater than 6.0 to 6.0\ndf_train['HY'] = df_train['HY'].transform(lambda x: 6.0 if x > 6.0 else x)\ndf_test['HY'] = df_test['HY'].transform(lambda x: 6.0 if x > 6.0 else x)","8c0eb075":"features = ['HC', 'HF', 'HR', 'HS', 'HST', 'HTHG', 'HY']\nplot_feature_distribution_hue_target(df_train, features, 'coolwarm')","18293d5e":"fig, ax = plt.subplots(figsize=(10, 35))\nsns.barplot(x=df_train['HomeTeam'].value_counts().values, y=df_train['HomeTeam'].value_counts().index, color='Orange')\nax.set_title('Matches played by teams home between 2009 and 2017', fontsize=14)\nax.set_xlabel('Matches Played', fontsize=12)\nax.set_ylabel('Teams', fontsize=12)\nplt.show()","530da622":"fig, ax = plt.subplots(figsize=(10, 35))\nsns.barplot(x=df_train['AwayTeam'].value_counts().values, y=df_train['AwayTeam'].value_counts().index, color='Green')\nax.set_title('Matches played by teams away between 2009 and 2017')\nax.set_xlabel('Matches Played', fontsize=12)\nax.set_ylabel('Teams', fontsize=12)\nplt.show()","ee3e2695":"df_train['Year'] = df_train['Date'].dt.year\ndf_train['Month'] = df_train['Date'].dt.month\ndf_train['FTR'] = df_train['FTR'].map({'H':0, 'D':1, 'A':2})\ndf_test['Year'] = df_test['Date'].dt.year\ndf_test['Month'] = df_test['Date'].dt.month","ec58ea66":"df_HTHG = df_train.groupby(['HomeTeam'])['HomeTeam', 'HTHG'].sum().reset_index()\ndf_HTHG = df_HTHG.sort_values(by='HTHG', ascending=False).reset_index(drop=True)\nfig, ax = plt.subplots(figsize=(10, 35))\nsns.barplot(x=df_HTHG['HTHG'], y=df_HTHG['HomeTeam'], color='yellow')\nax.set_title('Half Time goals by home teams', fontsize=14)\nax.set_xlabel('Goals', fontsize=12)\nax.set_ylabel('Teams', fontsize=12)\nplt.show()","49822640":"df_HTAG = df_train.groupby(['AwayTeam'])['AwayTeam', 'HTAG'].sum().reset_index()\ndf_HTAG = df_HTAG.sort_values(by='HTAG', ascending=False).reset_index(drop=True)\nfig, ax = plt.subplots(figsize=(10, 35))\nsns.barplot(x=df_HTAG['HTAG'], y=df_HTAG['AwayTeam'], color='blue')\nax.set_title('Half Time goals by away teams', fontsize=14)\nax.set_xlabel('Goals', fontsize=12)\nax.set_ylabel('Teams', fontsize=12)\nplt.show()","87bf4806":"df_HTHG_season = df_train.groupby(['Year'])['HTHG'].sum().reset_index()\nfig, ax = plt.subplots(figsize=(8, 8))\nsns.barplot(x=df_HTHG_season['Year'], y=df_HTHG_season['HTHG'], palette='RdBu')\nax.set_title('Half Time goals by Home Team by season', fontsize=14)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Goals', fontsize=12)\nplt.show()","17470631":"df_HTAG_season = df_train.groupby(['Year'])['HTAG'].sum().reset_index()\nfig, ax = plt.subplots(figsize=(8, 8))\nsns.barplot(x=df_HTAG_season['Year'], y=df_HTAG_season['HTAG'], palette='RdBu')\nax.set_title('Half Time goals by Away Team by season', fontsize=14)\nax.set_xlabel('Year', fontsize=12)\nax.set_ylabel('Goals', fontsize=12)\nplt.show()","2cc6547c":"conditions = [df_train['FTR']==2,df_train['FTR']==0,df_train['FTR']==1]\nselect = [df_train['AwayTeam'],df_train['HomeTeam'],'Draw']\ndf_train['FTW']=np.select(conditions, select)","26c5bc22":"df_Winner = df_train['FTW'].value_counts().reset_index()\ndf_Winner.columns = ['Team', 'Win_Counts']\n\n#Dropping Winner Feature as we will not be able to produce the same in test set and for modelling\ndf_train.drop('FTW', axis=1, inplace=True)\n\n\n#Drop Draws from the dataframe\ndf_Winner.drop(df_Winner.head(1).index, axis=0, inplace=True)\ndf_Winner = df_Winner.head(20)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.barplot(x=df_Winner['Team'], y=df_Winner['Win_Counts'], palette='GnBu_r')\nax.set_title('Teams with maximum full-time wins', fontsize=14)\nax.set_xlabel('Teams', fontsize=12)\nax.set_ylabel('Wins', fontsize=12)\nax.set_xticklabels(df_Winner['Team'], rotation=45)\nplt.show()","e8383f6c":"#Lambda Function\ndef select_winner(x):\n    if x > 0:\n        return 0\n    elif x < 0:\n        return 2\n    else:\n        return 1\n\ndef transform_HTR(df):\n    df['HTW'] = df['HTHG'] - df['HTAG']\n    df['HTW'] = df['HTW'].transform(lambda x: select_winner(x))\n    conditions = [df['HTW']==2,df['HTW']==0,df['HTW']==1]\n    select = [df['AwayTeam'],df['HomeTeam'],'Draw']\n    df['HTW']=np.select(conditions, select)\n    return df['HTW']\n    \ndf_train['HTW'] = transform_HTR(df_train)","76bee9c8":"df_Winner = df_train['HTW'].value_counts().reset_index()\ndf_Winner.columns = ['Team', 'Win_Counts']\n\n#Dropping Winner Feature as we will not be able to produce the same in test set and for modelling\ndf_train.drop('HTW', axis=1, inplace=True)\n\n#Drop Draws from the dataframe\ndf_Winner.drop(df_Winner.head(1).index, axis=0, inplace=True)\ndf_Winner = df_Winner.head(20)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.barplot(x=df_Winner['Team'], y=df_Winner['Win_Counts'], palette='GnBu_r')\nax.set_title('Teams with maximum half-time wins', fontsize=14)\nax.set_xlabel('Teams', fontsize=12)\nax.set_ylabel('Wins', fontsize=12)\nax.set_xticklabels(df_Winner['Team'], rotation=45)\nplt.show()","84e11781":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(df_train[features].mean(axis=1),color=\"green\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].mean(axis=1),color=\"blue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","9ab95e4e":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of std values per row in the train and test set\")\nsns.distplot(df_train[features].std(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].std(axis=1),color=\"blue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","26a44c48":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of min values per row in the train and test set\")\nsns.distplot(df_train[features].min(axis=1),color=\"green\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].min(axis=1),color=\"blue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","10db9245":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of max values per row in the train and test set\")\nsns.distplot(df_train[features].max(axis=1),color=\"gold\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].max(axis=1),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","80ada36e":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of skew values per row in the train and test set\")\nsns.distplot(df_train[features].skew(axis=1),color=\"gold\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].skew(axis=1),color=\"darkblue\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","864565ae":"plt.figure(figsize=(16,8))\nfeatures = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nplt.title(\"Distribution of kurtosis values per row in the train and test set\")\nsns.distplot(df_train[features].kurtosis(axis=1),color=\"red\", kde=True,bins=120, label='train')\nsns.distplot(df_test[features].kurtosis(axis=1),color=\"orange\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","8b63e88e":"df_train_corr = df_train.corr()","f0ec5b9f":"fig, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(df_train_corr, cmap='RdYlBu_r', annot=True)\nax.set_title('Correlation of training set features', fontsize=14)\nplt.show()","0a7db012":"df_test_corr = df_test.corr()","afa876e4":"fig, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(df_train_corr, cmap='RdYlBu_r', annot=True)\nax.set_title('Correlation of test set features', fontsize=14)\nplt.show()","51c5603a":"%%time\nidx = features = ['AC', 'AF', 'AR', 'AS', 'AST', 'AY', 'HC','HF', 'HR', 'HS', 'HST', 'HTAG', 'HTHG', 'HY']\nfor df in [df_test, df_train]:\n    df['sum'] = df[idx].sum(axis=1)  \n    df['max'] = df[idx].max(axis=1)\n    df['mean'] = df[idx].mean(axis=1)\n    df['std'] = df[idx].std(axis=1)\n    df['skew'] = df[idx].skew(axis=1)\n    df['kurt'] = df[idx].kurtosis(axis=1)\n    df['med'] = df[idx].median(axis=1)","5b683d19":"%%time\nfor df in [df_test, df_train]:\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['weekend'] = (df['Date'].dt.dayofweek >= 5).astype('int')\n    df['quarter'] = df['Date'].dt.quarter\n    df['is_month_start'] = df['Date'].dt.is_month_start\n    df['month_diff'] = ((datetime.datetime.today() - df['Date']).dt.days)\/\/30","e0c9fae1":"def aggregate_away_metrics(df, prefix):\n    agg_func = {\n        'AC': ['sum', 'mean', 'max', 'std', 'count'],\n        'AF': ['sum', 'mean', 'max', 'std', 'count'],\n        'AR': ['sum', 'mean', 'max', 'std', 'count'],\n        'AS': ['sum', 'mean', 'max', 'std', 'count'],\n        'AST': ['sum', 'mean', 'max', 'std', 'count'],\n        'AY': ['sum', 'mean', 'max', 'std', 'count'],\n        'HTAG': ['sum', 'mean', 'max', 'std', 'count']\n    }\n    \n    agg_transactions = df.groupby(['HomeTeam']).agg(agg_func)\n    agg_transactions.columns = [prefix + '_'.join(col).strip() \n                           for col in agg_transactions.columns.values]\n    agg_transactions.reset_index(inplace=True)\n    return agg_transactions","d1d2d60d":"agg_away = aggregate_away_metrics(df_train, 'away_')","dc947c3e":"df_train = pd.merge(df_train, agg_away, on='HomeTeam', how='left')\ndf_train.shape","fb6e04c5":"agg_away = aggregate_away_metrics(df_test, 'away_')","3d3296ca":"df_test = pd.merge(df_test, agg_away, on='HomeTeam', how='left')\ndf_test.shape","37adab77":"def aggregate_home_metrics(df, prefix):\n    agg_func = {\n        'HC': ['sum', 'mean', 'max', 'std', 'count'],\n        'HF': ['sum', 'mean', 'max', 'std', 'count'],\n        'HR': ['sum', 'mean', 'max', 'std', 'count'],\n        'HS': ['sum', 'mean', 'max', 'std', 'count'],\n        'HST': ['sum', 'mean', 'max', 'std', 'count'],\n        'HY': ['sum', 'mean', 'max', 'std', 'count'],\n        'HTHG': ['sum', 'mean', 'max', 'std', 'count']\n    }\n    \n    agg_transactions = df.groupby(['AwayTeam']).agg(agg_func)\n    agg_transactions.columns = [prefix + '_'.join(col).strip() \n                           for col in agg_transactions.columns.values]\n    agg_transactions.reset_index(inplace=True)\n    return agg_transactions","91da354f":"agg_home = aggregate_home_metrics(df_train, 'home_')","270f0ac9":"df_train = pd.merge(df_train, agg_home, on='AwayTeam', how='left')\ndf_train.shape","2a72e020":"agg_home = aggregate_home_metrics(df_test, 'home_')","9b82297e":"df_test = pd.merge(df_test, agg_home, on='AwayTeam', how='left')\ndf_test.shape","6c66f992":"df_train = df_train.join(pd.get_dummies(df_train['league']))\ndf_train.drop('league', axis=1, inplace=True)\ndf_train.head()","a829f46f":"df_test = df_test.join(pd.get_dummies(df_test['league']))\ndf_test.drop('league', axis=1, inplace=True)\ndf_test.head()","476bbfd5":"df_train.drop(['Date', 'HomeTeam', 'AwayTeam'], axis=1, inplace=True)","b332fb8c":"df_test.drop(['Date', 'HomeTeam', 'AwayTeam'], axis=1, inplace=True)","9f189dfb":"df_train.shape, df_test.shape","9fe8a13f":"Y_train = df_train['FTR']\nX_train = df_train.drop(['FTR'], axis=1)\nX_test = df_test","b54942de":"param = {\n    'max_bin': 119,\n    'min_data_in_leaf': 11,\n    'learning_rate': 0.001,\n    'min_sum_hessian_in_leaf': 0.00245,\n    'bagging_fraction': 0.7, \n    'bagging_freq': 5, \n    'lambda_l1': 4.972,\n    'lambda_l2': 2.276,\n    'min_gain_to_split': 0.65,\n    'max_depth': 14,\n    'save_binary': True,\n    'seed': 1337,\n    'feature_fraction_seed': 1337,\n    'bagging_seed': 1337,\n    'drop_seed': 1337,\n    'data_random_seed': 1337,\n    'verbose': 1,\n    'is_unbalance': True,\n    'boost': 'gbdt',\n    'feature_fraction' : 0.8,  # colsample_bytree\n    'metric':'multi_logloss',\n    'num_leaves': 30,\n    'objective' : 'multiclass',\n    'num_class' : 3,\n    'verbosity': 1\n}","1f2fde23":"folds = StratifiedKFold(n_splits=10, shuffle=False, random_state=44000)\noof = np.zeros((len(X_train), 3))\npredictions = np.zeros((len(X_test), 3))\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(X_train.values, Y_train.values)):\n    print(\"Fold {}\".format(fold_))\n    trn_data = lgb.Dataset(X_train.iloc[trn_idx][X_train.columns], label=Y_train.iloc[trn_idx])\n    val_data = lgb.Dataset(X_train.iloc[val_idx][X_train.columns], label=Y_train.iloc[val_idx])\n\n    num_round = 20000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=2000, early_stopping_rounds = 500)\n    oof[val_idx] = clf.predict(X_train.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    print('Fold Validation Set Accuracy: {0}'.format(np.mean(Y_train[val_idx] == np.argmax(oof[val_idx],axis=1))))\n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = X_train.columns\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(X_test[features], num_iteration=clf.best_iteration) \/ folds.n_splits\n","6cd85173":"cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:150].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,28))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('Features importance (averaged\/folds)')\nplt.tight_layout()\nplt.savefig('FI.png')","66df8661":"output = pd.DataFrame({ 'index' : df_test.index, 'FTR': np.argmax(predictions, axis=1) })\noutput.tail()","d7d1b4b0":"# Statistical analysis of features by row\n\n**Let's try to get the statistical values per row for train and test set.**","f0b17b85":"# Exploratory Data Analysis\n\n## AC - Away Team Corners - Training set","63aa4117":"Leading goal scorers when playing at home: Real Madrid, Barcelona, Bayern Munich, Chelsea, ManU, Paris SG.\n\nLeading goal scorers when playing away: Real Madris, Barcelona, Arsenal, Man City, Dotmund.\n\n**Let's plot Half Time goals scored by home and away teams by season**","8e7ae902":"## Let's now plot the distribution of Away Team features by Full Time Result","f355c692":"# Unique Values","85332908":"We will remove Date, Hometeam, AwayTeam and OneHot encode league feature. ","50c42ae0":"# Feature Engineering\n\nLet's start with calculating few aggregate values for the existing features","25d71c64":"## Let's check the distribution of training set features for Away Team","a1a6e777":"**Observations:**\n\nAway Team Corners did not increase the prospect of away team winning irrespective of the numbers of corners.\n\nAs away team committed more fouls, we see the home team winning more.\n\nRed card for away team increased the prospect of home team winning.\n\nThe more the shots and shots on target, away team won more.\n\nYellow card marginally had impact on the matches away team won.\n\nHalf-time away team goals had a huge impact in away teams winning.","dde92b4c":"Observations:\n\nThe AwayTeam, HomeTeam and League features are objects. \n\nMean values are distributed over a long range.\n\nMin, max, mean, std values for train and test data looks close.\n","f190d3aa":"# Null handling","26203b68":"As we can see in the above distributions, there are feature items whose value counts are too less. We will bin some of the classes which I have decided after checking the skew and kurtosis plotted down below.","39a5a9aa":"## More Data Analysis\n\n### Let's see how teams performed home and away.\n\nFirst let's plot how many matches each teams played.","3acf1498":"# Correlation of train and test features","5f073b68":"### Let's check the data and understand the data types and other statistics of the features","c492f422":"Home Teams won ~46% of the matches. Away team won ~28% of the matches. ~26% matches were \"draw\". We will deal with the class imbalance later.","86b0d79a":"**Observations:**\n\nHome Team Corners increases the prospect of home team winning the matches.\n\nFouls committed by home team did not have any significnt impact.\n\nRed card for home team increased the prospect of away team winning.\n\nThe more the shots and shots on target, home team won more.\n\nYellow card had minimal impact on the matches home team won.\n\nHalf-time home team goals had a huge impact in home teams winning.","e9c37271":"There are no features with unique values.","28087ab8":"# Let's check the output feature distribution.","c1cf1a2e":"## Let's check the distribution of test set features for Away Team","e8022c8b":"## Let's do the same for home team features in training set","256b2759":"Based on the feature importance plotted below, we can see the top 10 important features: \n\n**HST, AST, HTHG, HTAG, month_diff, HC, std, away_HTAG_std, away_AC_mean, kurtosis**","93f52e22":"Let's add a new analysis for FTW(Full Time Winner) and HTW(Half Time Winner)","93724a8d":"## Let's check the distribution of test set features for Away Team","5495dbdf":"Referee feature has too many NaNs and is present only in test set. Let's drop that feature.","21e136af":"Let's add features based on Date","30c5527a":"# Model\n\nLet's define the hyperparameters for the model.","eba0710c":"Let's add aggregate of away team features based on \"HomeTeam\" and home team based on \"AwayTeam\".","18696385":"# Football Match Outcome Predictor\n\n## Problem Statement:\n\nBuild a model to predict the outcome of a football match, given data for the past 9 years. \n\n## Goal:\n\nCome up with an optimal solution to predict if a Home Team would win or lose or draw (FTR - Target Feature) for the year of 2017 - 18.\n\n## Feature Details:\n\n**HomeTeam:** Home Team\n\n**AwayTeam:** Away Team\n\n**FTR:** Full Time Result (Target Feature)\n\n**HTHG:** Half-Time Home Team Goals\n\n**HTAG:** Half-Time Away Team Goals\n\n**HS:** Home Team Shots\n\n**AS:** Away Team Shots\n\n**HST:** Home Team Shots on Target\n\n**AST:** Away Team Shots on Target\n\n**AC:** Away Team Corners\n\n**HF:** Home Team Fouls Committed\n\n**AF:** Away Team Fouls Committed\n\n**HC:** Home Team Corners\n\n**HY:** Home Team Yellow Cards\n\n**AY:** Away Team Yellow Cards\n\n**HR:** Home Team red Cards\n\n**AR:** Away Team Red Cards\n\n**Date:** On which day the match was played\n\n**league:** Under which league the match was played\n\n### Instructions before executing this kernel:\n\n**Libraries needed:** LightGBM, seaborn. Others I have managed to keep standard packages and modules.\n\n**Folder Structure:** Create input and output folder in the level of .ipynb file. Add input files to input folder and output will get written to output folder.","02ef16e0":"**Observation:**\n\nWe have similar correlation of input features for both train and test set features","abebf456":"By applying additional boosting algorithms like XGBoost and CatBoost, the performance can be improved. \nI wil also source extra data and improve this model and send it as v2.\n\nHappy Programming!!","c80768b5":"To treat the null values we will follow the process as below:\n\n1. Drop the samples for which both hometeam and awayteam are null\n2. For the rest, Group all the features by hometem and take mode and fill null values","2d6b767a":"Teams played home and away matches almost equally.\n\n**Now, let's how home teams and away teams fared with half time goals**"}}