{"cell_type":{"193c6aa8":"code","7553a81c":"code","4112c3a5":"code","cc9a5e01":"code","a9f20612":"code","e90576e0":"code","f5120c3f":"code","e1347928":"code","16c179f1":"code","9afa90b5":"code","f448cbb9":"code","a43958a5":"code","3c89b7bb":"markdown","79bf3fe6":"markdown","b48d4896":"markdown","9a2c4215":"markdown","daf0987e":"markdown","9c1563f6":"markdown","e3105781":"markdown","a25d8bf4":"markdown","dd5fff93":"markdown","a7ca1de6":"markdown","865c7bb1":"markdown","f7e496ad":"markdown","57fbdce9":"markdown","4a4cc165":"markdown","08fba8dc":"markdown"},"source":{"193c6aa8":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom IPython.core.display import HTML\n\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")\n","7553a81c":"database_root = \"\/kaggle\/input\/respiratory-sound-database\"\nprint(\"Current path: \", database_root)\nprint(\"Main folder contains:\")\nprint(os.listdir(database_root))\nauido_files_path = os.path.join(database_root, \"Respiratory_Sound_Database\/Respiratory_Sound_Database\/audio_and_txt_files\")\nprint(f'Searching from {auido_files_path}')\nfilenames = [s.split('.')[0] for s in os.listdir(path=auido_files_path) if '.txt' in s]\nfilenames.sort()\nprint(f\"Found: {len(filenames)} recordings\")\n# print(filenames)\n","4112c3a5":"patient_info = pd.read_csv(os.path.join(database_root, \"demographic_info.txt\"), names=['Patient', 'Age', 'Sex', 'BMI', 'Weight', 'Height'], delim_whitespace=True)\ndiagnostics = pd.read_csv(os.path.join(database_root, \"Respiratory_Sound_Database\/Respiratory_Sound_Database\/patient_diagnosis.csv\"), names=['Patient', 'Diagnosis'])","cc9a5e01":"patient_info.info()\n = Pneumonia\npatient_info.loc[patient_info['Diagnosis'] == ]","a9f20612":"patient_info[\"Diagnosis\"] = diagnostics[[\"Diagnosis\"]]\ndisease_df = patient_info.groupby(['Diagnosis']).count()['Patient'] # Series\ndisease_df.plot.pie(figsize=(9, 9), explode=(0,0,0,0,0.1,0,0,0), startangle=100, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title(\"Diseases\", fontsize=22, pad=50.0)\nplt.legend(fontsize=12, loc='best', bbox_to_anchor=(1, 1));\nplt.show()\nprint(\"Total de datos en dataset: \", patient_info['Diagnosis'].count())\nprint(f'Total de saludables: {patient_info.Diagnosis.value_counts().Healthy}')\nprint(f'Total de enfermos: {patient_info.Diagnosis.count() - patient_info.Diagnosis.value_counts().Healthy}')","e90576e0":"Healthy_age = []\nSick_age = []\nfor index, row in patient_info[['Age','Diagnosis']].iterrows():\n    person_age = row['Age']\n    if(row['Diagnosis'] != 'Healthy'):\n        Sick_age.append(person_age)\n    else:\n        Healthy_age.append(person_age)\n\nplt.figure(figsize=(11, 9))\ncolors = [\"#90EE90\", \"#9B870C\"]\nn, b, p = plt.hist([Healthy_age, Sick_age], bins=15, stacked=True, label=['Healthy', 'Sick'], align=\"mid\", color=colors)\nplt.title(\"Age - Health\", fontsize=22, pad=25.0)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.xticks(b)\nplt.legend(loc=\"upper right\", fontsize=12);","f5120c3f":"sex_df = patient_info.groupby(['Sex']).count()['Patient'] # Series\ncolors = [\"#42A5F5\", \"#5C6BC0\"]\nsex_df.plot.pie(figsize=(7, 7), colors=colors, explode=(0.08, 0), shadow=True, startangle=100, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title(\"Sex destribution\", fontsize=22, pad=25.0)\nplt.legend(loc=\"upper right\", fontsize=12);\nplt.show()\n\nprint(\"Total de datos en dataset: \", patient_info['Patient'].count())\nprint(f'Total de hombres: {patient_info.Sex.value_counts().M}')\nprint(f'Total de mujeres: {patient_info.Sex.value_counts().F}')","e1347928":"F_age = []\nM_age = []\nfor index, row in patient_info[['Age','Sex']].iterrows():\n    person_age = row['Age']\n    if(row['Sex'] == 'F'):\n        F_age.append(person_age)\n    else:\n        M_age.append(person_age)\n\ncolors = [\"#42A5F5\", \"#5C6BC0\"]\nplt.figure(figsize=(11, 9))\nn, b, p = plt.hist([F_age, M_age],histtype=\"barstacked\", bins=15, stacked=True, label=['Female', 'Male'], align=\"mid\", color=colors)\nplt.title(\"Sex - Age Distribution\", fontsize=22, pad=25.0)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.xticks(b)\nplt.legend(loc=\"upper right\", fontsize = 12)\n\nprint(\"Porcentage para cada bin para los hombres:\\n\", n[1]*round(100\/patient_info.Sex.value_counts().M, 1))\nprint(\"Porcentage para cada bin para las mujeres:\\n\", n[0]*round(100\/patient_info.Sex.value_counts().F, 1))","16c179f1":"patient_info","9afa90b5":"def get_recording_info_and_annotations(file_name, root):\n    \"\"\" Recovers data frames for recording information and annotations \"\"\"\n    fields = file_name.split('_')\n    recording_info = pd.DataFrame(data=[fields], columns=['Patient', 'Recording index', 'Chest location', 'Acquisition mode', 'Recording equipment'])\n    recording_annotations = pd.read_csv(os.path.join(root, file_name + '.txt'), names = ['Start', 'End', 'Crackles', 'Wheezes'], delimiter= '\\t')\n    return (recording_info, recording_annotations)","f448cbb9":"recording_info_list = []\nrecording_annotations_list = []\nfor s in filenames:\n    info, annotation = get_recording_info_and_annotations(s, auido_files_path)\n    recording_info_list.append(info)\n    recording_annotations_list.append(annotation)\n    ","a43958a5":"recording_annotations_list[0]","3c89b7bb":"Pareceria estar balanceado porcentualmente no? COmo que tenemos graficos muy parecidos para las mujeres que para los hombres, simplemente hay mas hombres que mujeres pero el grafico pareceria ser igual. Esto y el grafico de arriba me llevaria a pensar que no puedo extraer conclusiones de correlacion entre hombres y enfermedad o muejeres y enfermedad ya que tengo las mismas proporciones para ","79bf3fe6":"Graficos que estarian copados hacer: Correlacion entre generos y enfermedad, correlacion entre BMI y enfermedad, Tipos de enfermedad por edad, que enfermedades presentan crackles y whisles (URTI no presenta al parecer), relacion enfermedad - silbidos y crujidos en los audios, cantidad de audios con anomalias","b48d4896":"## Enfermedades","9a2c4215":"Para entrenar nuestro modelo de deteccion nos basamos en el dataset abierto: https:\/\/www.kaggle.com\/vbookshelf\/respiratory-sound-database","daf0987e":"* Tenemos varios caminos:\n- 1 Es Distinguir si un audio tiene crujidos o si tiene silbidos\n- 2 Es distinguir si un audio tiene cualquiera de los dos o no tienen ninguuno\n- 3 Distinguir si el audio es de una persona enferma (una de todas las enfermedades de arriba) o es de una persona sana, mas alla de si tiene o no silbido y crujidos (hay enfermedades que no los presentan)","9c1563f6":"### Inspiration: https:\/\/www.kaggle.com\/eatmygoose\/cnn-detection-of-wheezes-and-crackles","e3105781":"En este trabajo nos proponemos clasificar audios respiratorios con anomalias de audios normales. La finalidad del proyecto es poder dar un primer indicio con rapidez de si el paciente presenta un trastorno respiratorio. ","a25d8bf4":"Imports y librerias\n","dd5fff93":"# Detection of Wheezels and Crackles with CNN","a7ca1de6":"Informacion general y demogr\u00e1fica de los pacientes tomados para el dataset","865c7bb1":"## Distribuci\u00f3n de Edades y Generos","f7e496ad":"## Age and Health","57fbdce9":"## G\u00e9nero","4a4cc165":"Manejo de archivos","08fba8dc":"Procederemos en 2 pasos:\n- An\u00e1lisis del dataset presentado\n- Entrenamiento del modelo"}}