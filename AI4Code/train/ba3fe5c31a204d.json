{"cell_type":{"118a4fda":"code","c3ca6ea8":"code","7c40c0f0":"code","c004f179":"code","f6cd6efd":"code","daed2c31":"code","46bf64f0":"code","b728b1a5":"code","94757639":"code","fe1b289f":"code","3107e3b6":"code","465c4da6":"code","3c43c6b1":"code","ee5011b9":"code","13a0f47a":"code","c2811c68":"code","425cf7e7":"code","b13b014c":"code","46d2d3e0":"code","982bb162":"code","135b7d2c":"code","e97c884d":"code","3d4253db":"code","f5cc1360":"markdown","f5d8737f":"markdown","93a87954":"markdown","934a5803":"markdown","fa26687e":"markdown","4d771980":"markdown","22c0cfa0":"markdown","832f2ab6":"markdown","e4f98254":"markdown","9fe048de":"markdown","1faab021":"markdown","5899fc97":"markdown","f13fc8fe":"markdown","b20b88b2":"markdown","f3607eb5":"markdown","a4513903":"markdown","1f93b159":"markdown","31a0c711":"markdown","f2f5ea45":"markdown","0f33d745":"markdown","d1c3e0bb":"markdown","a6565e1c":"markdown","8bf29d87":"markdown","8a7558b1":"markdown","ede31da5":"markdown"},"source":{"118a4fda":"import os, random, json, PIL, shutil, re\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import Model, losses, optimizers, layers","c3ca6ea8":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(f'Running on TPU {tpu.master()}')\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy()\n\n\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')\nAUTO = tf.data.experimental.AUTOTUNE","7c40c0f0":"HEIGHT = 256\nWIDTH = 256\nCHANNELS = 3\nEPOCHS = 30 # or 50\nBATCH_SIZE = 4 # or one of 1, 2, 8, or 16","c004f179":"GCS_PATH = KaggleDatasets().get_gcs_path('monet-gan-getting-started')\n\nMONET_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/monet_tfrec\/*.tfrec'))\nPHOTO_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/photo_tfrec\/*.tfrec'))\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nn_monet_samples = count_data_items(MONET_FILENAMES)\nn_photo_samples = count_data_items(PHOTO_FILENAMES)\n\nprint(f'Monet TFRecord files: {len(MONET_FILENAMES)}')\nprint(f'Monet image files: {n_monet_samples}')\nprint(f'Photo TFRecord files: {len(PHOTO_FILENAMES)}')\nprint(f'Photo image files: {n_photo_samples}')","f6cd6efd":"def data_augment(image):\n    \n    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    \n    # Jitter\n    if p_crop > .5:\n        image = tf.image.resize(image, [286, 286])\n        image = tf.image.random_crop(image, size=[256, 256, 3])\n        if p_crop > .9:\n            image = tf.image.resize(image, [300, 300])\n            image = tf.image.random_crop(image, size=[256, 256, 3])\n    \n    # Rotation\n    if p_rotate > .9:\n        image = tf.image.rot90(image, k=3) # rotate 270\u00ba\n    elif p_rotate > .7:\n        image = tf.image.rot90(image, k=2) # rotate 180\u00ba\n    elif p_rotate > .5:\n        image = tf.image.rot90(image, k=1) # rotate 90\u00ba\n    \n    # Mirroring\n    if p_spatial > .6:\n        image = tf.image.random_flip_left_right(image)\n        image = tf.image.random_flip_up_down(image)\n        if p_spatial > .9:\n            image = tf.image.transpose(image)\n\n    return image\n\ndef decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=CHANNELS)\n    image = (tf.cast(image, tf.float32) \/ 127.5) - 1\n    image = tf.reshape(image, [HEIGHT, WIDTH, CHANNELS])\n    return image\n\ndef read_tfrecord(example):\n    tfrecord_format = {\n        'image_name': tf.io.FixedLenFeature([], tf.string),\n        'image':      tf.io.FixedLenFeature([], tf.string),\n        'target':     tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    return image\n\ndef load_dataset(filenames):\n    dataset = tf.data.TFRecordDataset(filenames)\n    dataset = dataset.map(read_tfrecord, num_parallel_calls=AUTO)\n    return dataset\n\ndef get_gan_dataset(monet_files, photo_files, augment=None, repeat=True, shuffle=True, batch_size=1):\n\n    monet_ds = load_dataset(monet_files)\n    photo_ds = load_dataset(photo_files)\n\n    if augment:\n        monet_ds = monet_ds.map(augment, num_parallel_calls=AUTO)\n        photo_ds = photo_ds.map(augment, num_parallel_calls=AUTO)\n    \n    if repeat:\n        monet_ds = monet_ds.repeat()\n        photo_ds = photo_ds.repeat()\n    if shuffle:\n        monet_ds = monet_ds.shuffle(2048)\n        photo_ds = photo_ds.shuffle(2048)\n        \n    monet_ds = monet_ds.batch(batch_size, drop_remainder=True)\n    photo_ds = photo_ds.batch(batch_size, drop_remainder=True)\n    monet_ds = monet_ds.cache()\n    photo_ds = photo_ds.cache()\n    monet_ds = monet_ds.prefetch(AUTO)\n    photo_ds = photo_ds.prefetch(AUTO)\n    \n    gan_ds = tf.data.Dataset.zip((monet_ds, photo_ds))\n    \n    return gan_ds\n\ndef display_samples(ds, row, col):\n    ds_iter = iter(ds)\n    plt.figure(figsize=(15, int(15*row\/col)))\n    for j in range(row*col):\n        example_sample = next(ds_iter)\n        plt.subplot(row,col,j+1)\n        plt.axis('off')\n        plt.imshow(example_sample[0] * 0.5 + 0.5)\n    plt.show()\n        \ndef display_generated_samples(ds, model, n_samples):\n    ds_iter = iter(ds)\n    for n_sample in range(n_samples):\n        example_sample = next(ds_iter)\n        generated_sample = model.predict(example_sample)\n        \n        plt.subplot(121)\n        plt.title(\"input image\")\n        plt.imshow(example_sample[0] * 0.5 + 0.5)\n        plt.axis('off')\n        \n        plt.subplot(122)\n        plt.title(\"Generated image\")\n        plt.imshow(generated_sample[0] * 0.5 + 0.5)\n        plt.axis('off')\n        plt.show()\n        \ndef predict_and_save(input_ds, generator_model, output_path):\n    i = 1\n    for img in input_ds:\n        prediction = generator_model(img, training=False)[0].numpy() # make predition\n        prediction = (prediction * 127.5 + 127.5).astype(np.uint8)   # re-scale\n        im = PIL.Image.fromarray(prediction)\n        im.save(f'{output_path}{str(i)}.jpg')\n        i += 1\n                \n\n# Model functions\ndef downsample(filters, size, apply_instancenorm=True, strides=2):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = tf.keras.Sequential()\n    result.add(layers.Conv2D(filters, size, strides=strides, padding='same',\n                        kernel_initializer=initializer, use_bias=False))\n\n    if apply_instancenorm:\n        result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    result.add(layers.LeakyReLU())\n\n    return result\n\ndef upsample(filters, size, apply_dropout=False, strides=2):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = tf.keras.Sequential()\n    result.add(layers.Conv2DTranspose(filters, size, strides=strides, padding='same',\n                                 kernel_initializer=initializer, use_bias=False))\n\n    result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    if apply_dropout:\n        result.add(layers.Dropout(0.5))\n\n    result.add(layers.ReLU())\n\n    return result","daed2c31":"full_dataset = get_gan_dataset(MONET_FILENAMES, PHOTO_FILENAMES, augment=data_augment, repeat=True, shuffle=True, batch_size=BATCH_SIZE)","46bf64f0":"example_monet, example_photo = next(iter(full_dataset))\n\nplt.subplot(121)\nplt.title('Photo')\nplt.imshow(example_photo[0] * 0.5 + 0.5)\n\nplt.subplot(122)\nplt.title('Monet')\nplt.imshow(example_monet[0] * 0.5 + 0.5)","b728b1a5":"display_samples(load_dataset(MONET_FILENAMES).batch(1), 4, 6)","94757639":"display_samples(load_dataset(PHOTO_FILENAMES).batch(1), 4, 6)","fe1b289f":"OUTPUT_CHANNELS = 3\n\ndef generator_fn():\n    inputs = layers.Input(shape=[HEIGHT, WIDTH, CHANNELS])\n\n    down_stack = [\n        downsample(64, 4, apply_instancenorm=False), # (bs, 128, 128, 64)\n        downsample(128, 4),                          # (bs, 64, 64, 128)\n        downsample(256, 4),                          # (bs, 32, 32, 256)\n        downsample(512, 4),                          # (bs, 16, 16, 512)\n        downsample(512, 4),                          # (bs, 8, 8, 512)\n        downsample(512, 4),                          # (bs, 4, 4, 512)\n        downsample(512, 4),                          # (bs, 2, 2, 512)\n        downsample(512, 4),                          # (bs, 1, 1, 512)\n    ]\n\n    up_stack = [\n        upsample(512, 4, apply_dropout=True), # (bs, 2, 2, 1024)\n        upsample(512, 4, apply_dropout=True), # (bs, 4, 4, 1024)\n        upsample(512, 4, apply_dropout=True), # (bs, 8, 8, 1024)\n        upsample(512, 4),                     # (bs, 16, 16, 1024)\n        upsample(256, 4),                     # (bs, 32, 32, 512)\n        upsample(128, 4),                     # (bs, 64, 64, 256)\n        upsample(64, 4),                      # (bs, 128, 128, 128)\n    ]\n\n    initializer = tf.random_normal_initializer(0., 0.02)\n    last = layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,\n                             strides=2,\n                             padding='same',\n                             kernel_initializer=initializer,\n                             activation='tanh') # (bs, 256, 256, 3)\n\n    x = inputs\n\n    # Downsampling through the model\n    skips = []\n    for down in down_stack:\n        x = down(x)\n        skips.append(x)\n\n    skips = reversed(skips[:-1])\n\n    # Upsampling and establishing the skip connections\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        x = layers.Concatenate()([x, skip])\n\n    x = last(x)\n\n    return Model(inputs=inputs, outputs=x)","3107e3b6":"def discriminator_fn():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    inp = L.Input(shape=[HEIGHT, WIDTH, CHANNELS], name='input_image')\n\n    x = inp\n\n    down1 = downsample(64, 4, False)(x) # (bs, 128, 128, 64)\n    down2 = downsample(128, 4)(down1) # (bs, 64, 64, 128)\n    down3 = downsample(256, 4)(down2) # (bs, 32, 32, 256)\n\n    zero_pad1 = L.ZeroPadding2D()(down3) # (bs, 34, 34, 256)\n    conv = L.Conv2D(512, 4, strides=1,\n                    kernel_initializer=initializer,\n                    use_bias=False)(zero_pad1) # (bs, 31, 31, 512)\n\n    norm1 = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(conv)\n\n    leaky_relu = L.LeakyReLU()(norm1)\n\n    zero_pad2 = L.ZeroPadding2D()(leaky_relu) # (bs, 33, 33, 512)\n\n    last = L.Conv2D(1, 4, strides=1,\n                    kernel_initializer=initializer)(zero_pad2) # (bs, 30, 30, 1)\n\n    return Model(inputs=inp, outputs=last)","465c4da6":"IMAGE_SIZE = 256\nPATCH_SIZE = 16\nNUM_PATCHES = (IMAGE_SIZE \/\/ PATCH_SIZE) ** 2\nPROJECTION_DIM = 64\nNUM_HEADS = 4\nTRANSFORMER_UNITS = [PROJECTION_DIM * 2, PROJECTION_DIM]\nTRANSFORMER_LAYERS = 8\nHEAD_UNITS = [2048, 1024] \nNUM_CLASSES = 2\nEPOCHS_VIT = 10 # we need less epochs for the Vision Transformer","3c43c6b1":"# This was our attempt at replacing the function that did not work on the TPU with our own version, but this did not work either\ndef extract_patches(images, patch_size):\n    \n    image_shape = tf.shape(images)[1]\n    \n    n_patches = image_shape \/\/ patch_size\n    example_patch = tf.slice(images, begin=[0, 0, 0, 0], size=[-1, patch_size, patch_size, -1])\n    patches = example_patch\n        \n    for i in range(n_patches):\n        for j in range(n_patches):\n            \n            patch = tf.slice(images,\n                            begin = [0, i*patch_size, j*patch_size, 0],\n                            size = [-1, patch_size, patch_size, -1])\n            \n            patches = tf.concat([patches, patch], axis=-1) if i!=0 or j!=0 else patch\n\n    return patches\n\nclass Patches(layers.Layer):\n    def __init__(self, patch_size):\n        super(Patches, self).__init__()\n        self.patch_size = patch_size\n\n    def call(self, images):\n        batch_size = tf.shape(images)[0]\n        # This is the part that does not work on the TPU\n        patches = tf.image.extract_patches(\n            images = images,\n            sizes = [1, self.patch_size, self.patch_size, 1],\n            strides = [1, self.patch_size, self.patch_size, 1],\n            rates = [1, 1, 1, 1],\n            padding = \"VALID\",\n        )\n        # This is where we use our our definition of the function\n        # patches = extract_patches(images, self.patch_size) \n        patch_dims = patches.shape[-1]\n        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n        return patches\n    \nclass PatchEncoder(layers.Layer):\n    def __init__(self, num_patches, PROJECTION_DIM):\n        super(PatchEncoder, self).__init__()\n        self.num_patches = num_patches\n        self.projection = layers.Dense(units=PROJECTION_DIM)\n        self.position_embedding = layers.Embedding(\n            input_dim=num_patches, output_dim=PROJECTION_DIM\n        )\n\n    def call(self, patch):\n        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n        encoded = self.projection(patch) + self.position_embedding(positions)\n        return encoded","ee5011b9":"example_tensor = next(iter(full_dataset))\n\nimage_size = tf.shape(example_tensor[0][0])\n\nplt.figure(figsize=(4, 4))\npatches = Patches(PATCH_SIZE)(example_tensor[0])\nprint(f\"Image size: {image_size[0]} X {image_size[1]}\")\nprint(f\"Patch size: {PATCH_SIZE} X {PATCH_SIZE}\")\nprint(f\"Patches per image: {patches.shape[1]}\")\nprint(f\"Elements per patch: {patches.shape[-1]}\")\n\nn = int(np.sqrt(patches.shape[1]))\nplt.figure(figsize=(24, 24))\nfor i, patch in enumerate(patches[0]):\n    ax = plt.subplot(n, n, i + 1)\n    patch_img = tf.reshape(patch, (PATCH_SIZE, PATCH_SIZE, 3))\n    plt.imshow(patch_img.numpy())\n    plt.axis(\"off\")\nplt.show()","13a0f47a":"def dense_block(x, hidden_units, dropout_rate):\n    for units in hidden_units:\n        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n        x = layers.Dropout(dropout_rate)(x)\n    return x\n\ndef discriminator_fn_vit():\n    \n    inp = layers.Input(shape=[HEIGHT, WIDTH, CHANNELS], name='input_image')\n    \n    # Create patches.\n    patches = Patches(PATCH_SIZE)(inp)\n    \n    # Encode patches.  \n    encoded_patches = PatchEncoder(NUM_PATCHES, PROJECTION_DIM)(patches)\n    \n     # Create multiple layers of the Transformer block.\n    for _ in range(TRANSFORMER_LAYERS):\n        # Layer normalization 1.\n        x1 = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n        # Create a multi-head attention layer.\n        attention_output = layers.MultiHeadAttention(head_size=PROJECTION_DIM,\n            num_heads=NUM_HEADS, dropout=0.1\n        )(x1, x1)\n        # Skip connection 1.\n        x2 = layers.Add()([attention_output, encoded_patches])\n        # Layer normalization 2.\n        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n        \n        x3 = dense_block(x3, TRANSFORMER_UNITS, 0.1)\n\n        # Skip connection 2.\n        encoded_patches = layers.Add()([x3, x2])\n\n    # Create a [batch_size, projection_dim] tensor.\n    representation = layers.LayerNormalization(epsilon=1e-6)(encoded_patches)\n    representation = layers.Flatten()(representation)\n    representation = layers.Dropout(0.5)(representation)\n    \n    features = dense_block(representation, HEAD_UNITS, 0.5)\n\n    # Classify outputs.\n    last = layers.Dense(NUM_CLASSES)(features) \n    \n    \n    return Model(inputs=inp, outputs=last)","c2811c68":"!pip install vit-keras","425cf7e7":"from vit_keras import vit, utils\n\ndef discriminator_fn():\n    vit_model = vit.vit_b32(\n        image_size = 256,\n        activation = 'softmax',\n        pretrained = True,\n        include_top = False,\n        pretrained_top = False,\n        classes = 2)\n    \n    model = tf.keras.Sequential([\n        vit_model,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(11, activation = tfa.activations.gelu),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(2, 'softmax')\n    ])\n    \n    return model\n    \ndiscriminator_fn().summary()","b13b014c":"with strategy.scope():\n    monet_generator = generator_fn() # transforms photos to Monet-esque paintings\n    photo_generator = generator_fn() # transforms Monet paintings to be more like photos\n\n    monet_discriminator = discriminator_fn() # differentiates real Monet paintings and generated Monet paintings\n    photo_discriminator = discriminator_fn() # differentiates real photos and generated photos\n\n\nclass CycleGan(Model):\n    def __init__(\n        self,\n        monet_generator,\n        photo_generator,\n        monet_discriminator,\n        photo_discriminator,\n        lambda_cycle=10,\n    ):\n        super(CycleGan, self).__init__()\n        self.m_gen = monet_generator\n        self.p_gen = photo_generator\n        self.m_disc = monet_discriminator\n        self.p_disc = photo_discriminator\n        self.lambda_cycle = lambda_cycle\n        \n    def compile(\n        self,\n        m_gen_optimizer,\n        p_gen_optimizer,\n        m_disc_optimizer,\n        p_disc_optimizer,\n        gen_loss_fn,\n        disc_loss_fn,\n        cycle_loss_fn,\n        identity_loss_fn\n    ):\n        super(CycleGan, self).compile()\n        self.m_gen_optimizer = m_gen_optimizer\n        self.p_gen_optimizer = p_gen_optimizer\n        self.m_disc_optimizer = m_disc_optimizer\n        self.p_disc_optimizer = p_disc_optimizer\n        self.gen_loss_fn = gen_loss_fn\n        self.disc_loss_fn = disc_loss_fn\n        self.cycle_loss_fn = cycle_loss_fn\n        self.identity_loss_fn = identity_loss_fn\n        \n    def train_step(self, batch_data):\n        real_monet, real_photo = batch_data\n        \n        with tf.GradientTape(persistent=True) as tape:\n            # photo to monet back to photo\n            fake_monet = self.m_gen(real_photo, training=True)\n            cycled_photo = self.p_gen(fake_monet, training=True)\n\n            # monet to photo back to monet\n            fake_photo = self.p_gen(real_monet, training=True)\n            cycled_monet = self.m_gen(fake_photo, training=True)\n\n            # generating itself\n            same_monet = self.m_gen(real_monet, training=True)\n            same_photo = self.p_gen(real_photo, training=True)\n\n            # discriminator used to check, inputing real images\n            disc_real_monet = self.m_disc(real_monet, training=True)\n            disc_real_photo = self.p_disc(real_photo, training=True)\n\n            # discriminator used to check, inputing fake images\n            disc_fake_monet = self.m_disc(fake_monet, training=True)\n            disc_fake_photo = self.p_disc(fake_photo, training=True)\n\n            # evaluates generator loss\n            monet_gen_loss = self.gen_loss_fn(disc_fake_monet)\n            photo_gen_loss = self.gen_loss_fn(disc_fake_photo)\n\n            # evaluates total cycle consistency loss\n            total_cycle_loss = self.cycle_loss_fn(real_monet, cycled_monet, self.lambda_cycle) + self.cycle_loss_fn(real_photo, cycled_photo, self.lambda_cycle)\n\n            # evaluates total generator loss\n            total_monet_gen_loss = monet_gen_loss + total_cycle_loss + self.identity_loss_fn(real_monet, same_monet, self.lambda_cycle)\n            total_photo_gen_loss = photo_gen_loss + total_cycle_loss + self.identity_loss_fn(real_photo, same_photo, self.lambda_cycle)\n\n            # evaluates discriminator loss\n            monet_disc_loss = self.disc_loss_fn(disc_real_monet, disc_fake_monet)\n            photo_disc_loss = self.disc_loss_fn(disc_real_photo, disc_fake_photo)\n\n        # Calculate the gradients for generator and discriminator\n        monet_generator_gradients = tape.gradient(total_monet_gen_loss,\n                                                  self.m_gen.trainable_variables)\n        photo_generator_gradients = tape.gradient(total_photo_gen_loss,\n                                                  self.p_gen.trainable_variables)\n\n        monet_discriminator_gradients = tape.gradient(monet_disc_loss,\n                                                      self.m_disc.trainable_variables)\n        photo_discriminator_gradients = tape.gradient(photo_disc_loss,\n                                                      self.p_disc.trainable_variables)\n\n        # Apply the gradients to the optimizer\n        self.m_gen_optimizer.apply_gradients(zip(monet_generator_gradients,\n                                                 self.m_gen.trainable_variables))\n\n        self.p_gen_optimizer.apply_gradients(zip(photo_generator_gradients,\n                                                 self.p_gen.trainable_variables))\n\n        self.m_disc_optimizer.apply_gradients(zip(monet_discriminator_gradients,\n                                                  self.m_disc.trainable_variables))\n\n        self.p_disc_optimizer.apply_gradients(zip(photo_discriminator_gradients,\n                                                  self.p_disc.trainable_variables))\n        \n        return {\n            'monet_gen_loss': total_monet_gen_loss,\n            'photo_gen_loss': total_photo_gen_loss,\n            'monet_disc_loss': monet_disc_loss,\n            'photo_disc_loss': photo_disc_loss\n        }","46d2d3e0":"with strategy.scope():\n    # Discriminator loss {0: fake, 1: real} (The discriminator loss outputs the average of the real and generated loss)\n    def discriminator_loss(real, generated):\n        real_loss = losses.BinaryCrossentropy(from_logits=True, reduction=losses.Reduction.NONE)(tf.ones_like(real), real)\n\n        generated_loss = losses.BinaryCrossentropy(from_logits=True, reduction=losses.Reduction.NONE)(tf.zeros_like(generated), generated)\n\n        total_disc_loss = real_loss + generated_loss\n\n        return total_disc_loss * 0.5\n    \n    # Generator loss\n    def generator_loss(generated):\n        return losses.BinaryCrossentropy(from_logits=True, reduction=losses.Reduction.NONE)(tf.ones_like(generated), generated)\n    \n    \n    # Cycle consistency loss (measures if original photo and the twice transformed photo to be similar to one another)\n    with strategy.scope():\n        def calc_cycle_loss(real_image, cycled_image, LAMBDA):\n            loss1 = tf.reduce_mean(tf.abs(real_image - cycled_image))\n\n            return LAMBDA * loss1\n\n    # Identity loss (compares the image with its generator (i.e. photo with photo generator))\n    with strategy.scope():\n        def identity_loss(real_image, same_image, LAMBDA):\n            loss = tf.reduce_mean(tf.abs(real_image - same_image))\n            return LAMBDA * 0.5 * loss","982bb162":"with strategy.scope():\n    # Create generators\n    monet_generator_optimizer = optimizers.Adam(2e-4, beta_1=0.5)\n    photo_generator_optimizer = optimizers.Adam(2e-4, beta_1=0.5)\n\n    # Create discriminators\n    monet_discriminator_optimizer = optimizers.Adam(2e-4, beta_1=0.5)\n    photo_discriminator_optimizer = optimizers.Adam(2e-4, beta_1=0.5)\n    \n    # Create GAN\n    gan_model = CycleGan(monet_generator, photo_generator, \n                         monet_discriminator, photo_discriminator)\n\n    gan_model.compile(m_gen_optimizer=monet_generator_optimizer,\n                      p_gen_optimizer=photo_generator_optimizer,\n                      m_disc_optimizer=monet_discriminator_optimizer,\n                      p_disc_optimizer=photo_discriminator_optimizer,\n                      gen_loss_fn=generator_loss,\n                      disc_loss_fn=discriminator_loss,\n                      cycle_loss_fn=calc_cycle_loss,\n                      identity_loss_fn=identity_loss)\n\n# Training the model using the ViT discriminator\n# history = gan_model.fit(full_dataset, \n#                         steps_per_epoch=(max(n_photo_samples, n_monet_samples)\/\/BATCH_SIZE),\n#                         epochs=EPOCHS_VIT,\n#                         verbose=1).history\n\n# Training the model using the default discriminator\nhistory = gan_model.fit(full_dataset, \n                        steps_per_epoch=(max(n_photo_samples, n_monet_samples)\/\/BATCH_SIZE),\n                        epochs=EPOCHS,\n                        verbose=1).history","135b7d2c":"display_generated_samples(load_dataset(PHOTO_FILENAMES).batch(1), monet_generator, 8)","e97c884d":"os.makedirs('..\/images\/') # Create folder to save generated images\n\npredict_and_save(load_dataset(PHOTO_FILENAMES).batch(1), monet_generator, '..\/images\/')","3d4253db":"shutil.make_archive('\/kaggle\/working\/images\/', 'zip', '..\/images')\n\nprint(f\"Generated samples: {len([name for name in os.listdir('..\/images\/') if os.path.isfile(os.path.join('..\/images\/', name))])}\")","f5cc1360":"Creating the discriminator as a ViT.","f5d8737f":"# Build model (CycleGAN)\n\nBuilding the model as usual. We did not modify this code.","93a87954":"## (Default) Discriminator\n\nThis is the default discriminator that we used in our experiments with batch sizes and epochs.","934a5803":"## Looking at a few Monet paintings","fa26687e":"# GAN Gogh - Monet painting style transfer\n\nThis notebook is based on [Introduction to CycleGAN - Monet painting](https:\/\/www.kaggle.com\/dimitreoliveira\/introduction-to-cyclegan-monet-paintings).\n\n**Our modifications\/improvements include**:  \n1) Adding data augmentation, by applying jitters, rotations and mirroring  \n2) Changing hyperparameters, using batchsizes of 1, 2, 4, 8 and 16, and 30 or 50 epochs  \n3) Replacing discriminator with Vision Transformer","4d771980":"# Visualize predictions","22c0cfa0":"## Looking at a few photo samples","832f2ab6":"## TPU configuration\n\nUse TPU for faster training, if available.","e4f98254":"Defining the functions that create the patches that are used in the ViT.","9fe048de":"## Looking at the augmented data\n\nWe check if our augmentation works properly by applying it to the dataset and checking a few samples. ","1faab021":"### Failed manual implementation\n\nDefining the parameters for the ViT.","5899fc97":"## Make predictions","f13fc8fe":"# Generator model\n\nThis is the default generator, we did not touch this part (although it *can* be replaced with transformers). Maybe something to look into in future work?","b20b88b2":"# Submission file","f3607eb5":"# Model parameters\n\nThese parameters were a big part of our experiments, where we tried several combinations to see which one did best.","a4513903":"## Vision Transformer as discriminator\n\nWe first tried to implement the Vision Transformer from scratch using the [Keras implementation](https:\/\/keras.io\/examples\/vision\/image_classification_with_vision_transformer\/), but some functions turned out not to be available on the TPU. We then decided to use a Python package called `vit-keras`.","1f93b159":"Print some of the patches, to see if it works (it does when not training the model)","31a0c711":"Creating our model but changing the final few layers.","f2f5ea45":"# Load data\n\nLoad the data from Kaggle in the usual way.","0f33d745":"## Dependencies\n\nImport all the necessary modules.","d1c3e0bb":"# Discriminator model\n\nWe experimented with two versions of the discriminator, namely one with the (default) discriminator that uses convolutions to classify the images, and one in which we use a Vision Transformer to classify them.","a6565e1c":"# Train","8bf29d87":"## Auxiliar functions\n\nHere we added the `data_augment` function, and integrated it with the `get_gan_dataset` function.","8a7558b1":"# Loss functions\n\nThese are the default loss functions. One of the most attractive parts of replacing the discriminator with a ViT is that we did not have to modify the loss function.","ede31da5":"### Using vit-keras\n\nInstalling the package:"}}