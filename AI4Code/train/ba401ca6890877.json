{"cell_type":{"7427fe38":"code","84eef13d":"code","787e9b3f":"code","1515883c":"markdown","a9a6277f":"markdown","e233312e":"markdown","633cfe43":"markdown","3b845805":"markdown"},"source":{"7427fe38":"# capitalizing is the way to define a class in Python\nclass Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, year):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.year = year\n        \n    def carData(self):\n        '''Car information'''\n        car_info = f\"{self.year} {self.brand}\"\n        return car_info.title()\n        \nclass hydrogenCar(Car):\n    '''details on a hydrogen car'''\n    def __init__(self, brand, year):\n        '''initialize attributes of the parent class'''\n        super().__init__(brand, year)\n        \nhy_car = hydrogenCar('Rictor', '2025')\nprint(hy_car.carData())\n\n        ","84eef13d":"class Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, year):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.year = year\n        \n    def carData(self):\n        '''Car information'''\n        car_info = f\"{self.year} {self.brand}\"\n        return car_info.title()\n        \nclass hydrogenCar(Car):\n    '''details on a hydrogen car'''\n    def __init__(self, brand, year):\n        '''initialize attributes of the parent class'''\n        super().__init__(brand, year)\n        self.cellSize = \"Large\"\n    \n    def hyCell(self):\n        '''information on car cell'''\n        print(f\"This car is equipped with a {self.cellSize} hydrogen cell\")\n        \nhy_car = hydrogenCar('Rictor', '2025')\nprint(hy_car.carData())\nhy_car.hyCell()","787e9b3f":"class Car:\n    '''building out a car and model'''\n    \n    def __init__(self, brand, year):\n        '''Initialize car brand and year'''\n        self.brand = brand\n        self.year = year\n        \n    def carData(self):\n        '''Car information'''\n        car_info = f\"{self.year} {self.brand}\"\n        return car_info.title()\n    \nclass Cell:\n    '''define your cell'''\n    def __init__(self, cellSize = \"Large\"):\n        '''initialize attributes of Cell'''\n        self.cellSize = cellSize\n        \n    def hyCell_size(self):\n        '''information on car cell'''\n        print(f\"This car is equipped with a {self.cellSize} hydrogen cell\")\n        \nclass hydrogenCar(Car):\n    '''details on a hydrogen car'''\n    def __init__(self, brand, year):\n        '''initialize attributes of the parent class'''\n        super().__init__(brand, year)\n        self.cell = Cell()\n\n        \nhy_car = hydrogenCar('Rictor', '2025')\nprint(hy_car.carData())\nhy_car.cell.hyCell_size()","1515883c":"**Add new attributes and methods for a child class**","a9a6277f":"# How to use Inheritance in Python to build extensible code\n\nWhen writing a new class based on an existing class, you can call the __init__() method from the parent class. This will initialize any attributes that were defined in the parent __init__() method and make them available in the child class.[](http:\/\/)","e233312e":"hy_car takes the Cell attribute and calls the method hyCell_Size() that\u2019s associated with the Cell instance stored in the attribute.","633cfe43":"Create Multiple Classes for Inheritance","3b845805":"super() is a function that allows you to call a method from a parent class"}}