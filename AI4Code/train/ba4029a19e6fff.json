{"cell_type":{"ea9e6fc1":"code","c96aa0d2":"code","894c833b":"code","cc69cc86":"code","67abfe73":"code","9a13507f":"code","d1113c00":"code","83b8f6ff":"code","83e8a5cf":"code","666c4be0":"code","e51b0e68":"code","c18f111a":"code","cb33c005":"code","7917a4e0":"code","3a549b90":"code","4d4298e5":"code","6806c074":"code","f9a33eee":"code","2fefd7df":"code","8d9e2a9b":"code","23be434d":"code","a35577ab":"code","f57a591a":"code","3edcf6de":"code","9cbc098f":"code","eb03853e":"code","e01aa7b0":"code","fb5aa5b2":"code","c4134db4":"code","1120c26b":"code","c9178a05":"code","ffd6271d":"code","4c82fb9e":"code","148953fd":"code","45fb149a":"code","59d85f96":"code","103f9efa":"code","8b8dcf39":"code","1472b42f":"code","4e9a00b6":"code","edc9b456":"code","74b179a7":"code","c16ddb09":"code","9d885e2d":"code","ee5942ea":"code","00550ac5":"code","49aa0f04":"code","a701dcc8":"code","135f1aa5":"code","13631399":"code","5fcf6fc2":"code","81f7017b":"code","1cb9075d":"code","41db67e9":"code","f0518f66":"code","1c96de34":"code","57d283f7":"code","34acbfcf":"code","a083a1c3":"markdown","03a79fb1":"markdown","a64e824a":"markdown","14725cd9":"markdown","36cc0d43":"markdown","66c669ca":"markdown","59f9ed7a":"markdown","5128a6c9":"markdown","ab9bf355":"markdown","20112ede":"markdown","584fb95a":"markdown","b7d16701":"markdown","f7528646":"markdown","f48ffc45":"markdown","0e9b3bd3":"markdown","9449f904":"markdown","c3a1087d":"markdown","55dc2e6b":"markdown","bec4c08d":"markdown","eeabc729":"markdown","e23808f9":"markdown","516e63bd":"markdown","0bc09229":"markdown","f84b828f":"markdown","bd513f4f":"markdown","a24c6b94":"markdown","d061fea5":"markdown","89e5224c":"markdown","b9ae22af":"markdown","0149ab81":"markdown","a2dfe256":"markdown","da06b84e":"markdown","03ab5646":"markdown","5d792f07":"markdown","fae00ce7":"markdown","0bf9b358":"markdown","c93bacbd":"markdown","43ee38d7":"markdown","2f959d36":"markdown","93374929":"markdown","79d9e9ad":"markdown","665dc635":"markdown","f5ae3171":"markdown","531b5de3":"markdown","f403bae8":"markdown","13a751ea":"markdown","0c7925fc":"markdown","31c2864b":"markdown","34c8385b":"markdown","d7424993":"markdown","2d2f9b73":"markdown","da768cf3":"markdown","134649f3":"markdown","46daa01c":"markdown","516f862d":"markdown","60d9ef3e":"markdown","964ae741":"markdown","c6a97d04":"markdown"},"source":{"ea9e6fc1":"import numpy as np\nimport os\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')","c96aa0d2":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","894c833b":"train_data.info()","cc69cc86":"test_data.info()","67abfe73":"train_data.drop(['Cabin'], axis=1, inplace=True)\ntest_data.drop(['Cabin'], axis=1, inplace=True)","9a13507f":"sns.countplot(train_data.Survived)\nplt.show()","d1113c00":"sns.countplot(train_data.Pclass)\nplt.show()","83b8f6ff":"sns.barplot(x='Pclass', y='Survived', data=train_data)\nplt.show()","83e8a5cf":"sns.countplot(train_data.Sex)\nplt.show()","666c4be0":"sns.barplot(x='Sex', y='Survived', data=train_data)\nplt.show()","e51b0e68":"plt.hist(train_data.Age, edgecolor='black')\nplt.xlabel('Age')\nplt.ylabel('count')\nplt.show()","c18f111a":"sns.boxplot(x='Survived', y='Age', data=train_data)\nplt.show()","cb33c005":"sns.countplot(train_data.SibSp)\nplt.show()","7917a4e0":"sns.barplot(x='SibSp', y='Survived', data=train_data)\nplt.show()","3a549b90":"sns.countplot(train_data.Parch)\nplt.show()","4d4298e5":"sns.barplot(x='Parch', y='Survived', data=train_data)\nplt.show()","6806c074":"train_data.Ticket.head(10)","f9a33eee":"sns.distplot(train_data.Fare)\nplt.show()","2fefd7df":"sns.boxplot(x='Survived', y='Fare', data=train_data)\nplt.show()","8d9e2a9b":"sns.countplot(train_data.Embarked)\nplt.show()","23be434d":"sns.barplot(x='Embarked', y='Survived', data=train_data)\nplt.show()","a35577ab":"train_data.Name.head(10)","f57a591a":"whole_data = train_data.append(test_data)\nwhole_data['Title'] = whole_data.Name.str.extract(r'([A-Za-z]+)\\.', expand=False)\nwhole_data.Title.value_counts()","3edcf6de":"Common_Title = ['Mr', 'Miss', 'Mrs', 'Master']\nwhole_data['Title'].replace(['Ms', 'Mlle', 'Mme'], 'Miss', inplace=True)\nwhole_data['Title'].replace(['Lady'], 'Mrs', inplace=True)\nwhole_data['Title'].replace(['Sir', 'Rev'], 'Mr', inplace=True)\nwhole_data['Title'][~whole_data.Title.isin(Common_Title)] = 'Others'","9cbc098f":"train_data = whole_data[:len(train_data)]\ntest_data = whole_data[len(train_data):]\nsns.boxplot(x='Title', y='Age', data=train_data)\nplt.show()","eb03853e":"AgeMedian_by_titles = train_data.groupby('Title')['Age'].median()\nAgeMedian_by_titles","e01aa7b0":"for title in AgeMedian_by_titles.index:\n    train_data['Age'][(train_data.Age.isnull()) & (train_data.Title == title)] = AgeMedian_by_titles[title]\n    test_data['Age'][(test_data.Age.isnull()) & (test_data.Title == title)] = AgeMedian_by_titles[title]","fb5aa5b2":"train_data['Embarked'].fillna(train_data.Embarked.mode()[0], inplace=True)","c4134db4":"test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)","1120c26b":"#For train dataset, there are outliers observed. Replace them with median.\ntrain_data.Fare.sort_values(ascending=False).head(5)","c9178a05":"train_data.loc[train_data.Fare>512, 'Fare'] = 263\ntrain_data.Fare.sort_values(ascending=False).head(5)","ffd6271d":"train_data.info()\nprint('')\ntest_data.info()","4c82fb9e":"train_data['Sex_Code'] = train_data['Sex'].map({'female':1, 'male':0}).astype('int')\ntest_data['Sex_Code'] = test_data['Sex'].map({'female':1, 'male':0}).astype('int')","148953fd":"train_data['Embarked_Code'] = train_data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')\ntest_data['Embarked_Code'] = test_data['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')","45fb149a":"train_data['AgeBin_5'] = pd.qcut(train_data['Age'], 5)\ntest_data['AgeBin_5'] = pd.qcut(test_data['Age'], 5)\nsns.barplot(x='AgeBin_5', y='Survived', data=train_data)\nplt.show()","59d85f96":"train_data['FareBin_5'] = pd.qcut(train_data['Fare'], 5)\ntest_data['FareBin_5'] = pd.qcut(test_data['Fare'], 5)","103f9efa":"label = LabelEncoder()\ntrain_data['AgeBin_Code_5'] = label.fit_transform(train_data['AgeBin_5'])\ntest_data['AgeBin_Code_5'] = label.fit_transform(test_data['AgeBin_5'])\nlabel = LabelEncoder()\ntrain_data['FareBin_Code_5'] = label.fit_transform(train_data['FareBin_5'])\ntest_data['FareBin_Code_5'] = label.fit_transform(test_data['FareBin_5'])","8b8dcf39":"train_data['FamilySize'] = train_data.SibSp + train_data.Parch + 1\ntest_data['FamilySize'] = test_data.SibSp + test_data.Parch + 1\nsns.countplot(train_data.FamilySize)\nplt.show()","1472b42f":"train_data['Alone'] = train_data.FamilySize.map(lambda x: 1 if x == 1 else 0)\ntest_data['Alone'] = test_data.FamilySize.map(lambda x: 1 if x == 1 else 0)\nsns.countplot(train_data.Alone)\nplt.show()","4e9a00b6":"sns.barplot(x='Alone', y='Survived', data=train_data)\nplt.show()","edc9b456":"sns.countplot(train_data.Title)\nplt.show()","74b179a7":"sns.barplot(x='Title', y='Survived', data=train_data)\nplt.show()","c16ddb09":"train_data['Title_Code'] = train_data.Title.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Others':4}).astype('int')\ntest_data['Title_Code'] = test_data.Title.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Others':4}).astype('int')","9d885e2d":"train_data[['Name', 'Ticket']].sort_values('Name').head(20)","ee5942ea":"whole_data = train_data.append(test_data)\nwhole_data['Surname'] = whole_data.Name.str.extract(r'([A-Za-z]+),', expand=False)\nwhole_data['TixPref'] = whole_data.Ticket.str.extract(r'(.*\\d)', expand=False)\nwhole_data['SurTix'] = whole_data['Surname'] + whole_data['TixPref']\nwhole_data['IsFamily'] = whole_data.SurTix.duplicated(keep=False)*1\nsns.countplot(whole_data.IsFamily)\nplt.show()","00550ac5":"whole_data['Child'] = whole_data.Age.map(lambda x: 1 if x <=16 else 0)\nFamilyWithChild = whole_data[(whole_data.IsFamily==1)&(whole_data.Child==1)]['SurTix'].unique()\nlen(FamilyWithChild)","49aa0f04":"whole_data['FamilyId'] = 0\nx = 1\nfor tix in FamilyWithChild:\n whole_data.loc[whole_data.SurTix==tix, ['FamilyId']] = x\n x += 1","a701dcc8":"whole_data['SurvivedDemo'] = whole_data['Survived'].fillna(9)\npd.crosstab(whole_data.FamilyId, whole_data.SurvivedDemo).drop([0]).plot(kind='bar', stacked=True, color=['black','g','grey'])\nplt.show()","135f1aa5":"whole_data['ConnectedSurvival'] = 0.5 \nSurvived_by_FamilyId = whole_data.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n   if Survived_by_FamilyId[i] >= 1:\n     whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 1\n   elif Survived_by_FamilyId[i] == 0:\n     whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 0\ntrain_data = whole_data[:len(train_data)]\ntest_data = whole_data[len(train_data):]\nsns.barplot(x='ConnectedSurvival', y='Survived', data=train_data)\nplt.show()","13631399":"train_data.columns","5fcf6fc2":"X_train = train_data.drop(['Age', 'Embarked', 'Fare', 'Name', 'Parch', 'PassengerId', 'Sex', 'SibSp', 'Survived', 'Ticket', 'Title', 'AgeBin_5', 'FareBin_5', 'FamilySize', 'Surname', 'TixPref', 'SurTix', 'IsFamily', 'Child', 'FamilyId'], axis=1)\ny_train = train_data['Survived']","81f7017b":"model = RandomForestClassifier(n_estimators=200, random_state=2)","1cb9075d":"model.fit(X_train,y_train)\nimportance = pd.DataFrame({'feature':X_train.columns, 'importance': np.round(model.feature_importances_,3)})\nimportance = importance.sort_values('importance', ascending=False).set_index('feature')\nimportance.plot(kind='bar', rot=0)\nplt.show()","41db67e9":"final = ['Title_Code', 'Sex_Code', 'ConnectedSurvival', 'Pclass', 'FareBin_Code_5']","f0518f66":"grid_param = {\n 'n_estimators': [100, 200, 300],\n 'criterion':['gini', 'entropy'],\n 'min_samples_split': [2, 10, 20],\n 'min_samples_leaf': [1, 5],\n 'bootstrap': [True, False],\n}\ngd_sr = GridSearchCV(estimator=model,\n param_grid=grid_param,\n scoring='accuracy',\n cv=5,\n n_jobs=-1)\ngd_sr.fit(X_train[final], y_train)\nbest_parameters = gd_sr.best_params_\nprint(best_parameters)","1c96de34":"model1 = RandomForestClassifier(n_estimators=300, bootstrap=True, criterion= 'entropy', min_samples_leaf=5, min_samples_split=2, random_state=2)","57d283f7":"all_accuracies = cross_val_score(estimator=model1, X=X_train, y=y_train, cv=5)\nall_accuracies\nall_accuracies.mean()","34acbfcf":"X_test = test_data[final]\nmodel.fit(X_train[final],y_train)\nprediction = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': prediction.astype(int)})\noutput.to_csv('my_submission.csv', index=False)","a083a1c3":"1. Most of the passengers travel with 1 sibling\/spouse.\n2. Passengers having 1 sibling\/spouse are more likely to survive compared to those not.\n3. For those more than 1 siblings\/spouses, the information is insufficient to provide any insight.","03a79fb1":"### Survived","a64e824a":"### Connected Survival\nFrom the Titanic movie, those survived were often in family groups. They helped each other to find way out. In addition, families usually have children which are the first priority to sent to safe boats. Of course, there should be parents to take care of their children.\n\nTo find out family groups, apart from surnames of passenges (there may be same surnames but different families), let\u2019s also look at Ticket.","14725cd9":"# 2. Exploratory Data Analysis\nImport libraries:","36cc0d43":"1. Passengers in Pclass 1 (Upper class) are more likely to survive.\n2. Pclass is a good feature for prediction of survival.","66c669ca":"### SibSp","59f9ed7a":"Check for missing data.","5128a6c9":"Encode the Age and Fare bins into numbers for modelling.","ab9bf355":"Let\u2019s look at the relationship between titiles and age in train dataset.","20112ede":"Set the model paramters after tunning.","584fb95a":"### Kaggle is a great platform which holds machine learning competition and provides real-world datasets. As my first attempt, I have spent 10 days in total for this project. Thanks to online resources such as Stackoverflow and articles from Medium which help a lot!\n\n# Index\n1. Background\n2. Exploratory Data Analysis\n3. Imputation of Missing Data\/ Outliers\n4. Data Transformation\n5. Feature Creation\n6. Feature Selection\n7. Model\n8. Submission","b7d16701":"There are 66 families which have 1 or more children.\n\nEncode each family with children (i.e. Assign 0 for others).","f7528646":"Outliers should be handled in order not to distort the distribution and thus make the model more robust.\n\nOutliers can be replaced with maximum cap, median or you can simply remove them.\n\nI choose to replace the outliers the 2nd higher fare (i.e. 263).","f48ffc45":"### Sex","0e9b3bd3":"**Overall probability of survivial ~38%**","9449f904":"Let\u2019s extract the titles (Mr.\/Mrs.\/Miss\/Master) from the names of passengers. This can be done for both train and test datasets.","c3a1087d":"1. Total no. of rows: 891 for train and 418 for test dataset.\n2. Cabin: data missing > 70% .\n   Since data with less than 30% can\u2019t provide meaning information, Cabin data can be ignored.","55dc2e6b":"# 5. Feature Creation\n### Alone\nSibSp and Parch are both related to family members. for simple sake, I decided to combined them into a single feature namely FamilySize.","bec4c08d":"1. Passengers are mainly aged 20\u201340.\n2. Younger passengers tends to survive.","eeabc729":"Group data into bins to make the model more robust and avoid over-fitting.\n### Age","e23808f9":"It is observed that travelling alone is less likely to survive (~30% vs ~50%).\n### Title\nTitle is created for the imputation missing values of Age. It can also be used as a new features.","516e63bd":"Calculate the accuracy of prediction using 5-fold cross-validation.","0bc09229":"### Embarked","f84b828f":"let\u2019s look at the survival data of each families with children","bd513f4f":"### Fare\nFor test dataset, there is only 1 missing value. Simply impute the median,","a24c6b94":"Let\u2019s look at the feature importance.","d061fea5":"First, drop those unused columns","89e5224c":"For train dataset, there 3 outliers (i.e. 512.3292).","b9ae22af":"The common titles are(Mr\/Miss\/Mrs\/Master). Some of the titles (Ms\/Lady\/Sir\u2026etc.) can be grouped to the common titles. The remaining unclassified titles can be frouped to \u201cOthers\u201d.","0149ab81":"# 4. Data Transformation\nEncode string to numbers for modelling.\n\n### Sex","a2dfe256":"### Embarked\nFor train dataset, there are only 2 missing values. Simply impute the mode.","da06b84e":"### Parch","03ab5646":"1. The distribution is right-skewed. Outliers are observed.\n2. For those who survived, their fares are relatively higher.","5d792f07":"Assign model as RandomForestClassifier.","fae00ce7":"1. Less than 2\/3 passengers embarked at Port C.\n2. Passengers embarked at Port C are more likely to survive.","0bf9b358":"It appears that passengers with same surnames have the same Ticket names.\n\nLet\u2019s extract the surnames and tickets name and find out duplicate ones. There may be passengers in train and test dataset from the same families. So, I decided to do it as a whole.","c93bacbd":"### Embarked","43ee38d7":"Choose the top 5 important features for modelling (i.e. Title_Code, Sex_Code, Connected_Survivial, Pclass and FareBin_Code_5). Always keep minimal number of features to avoid over-fitting.","2f959d36":"# 3. Imputation of Missing Data\/ Outliers\n### Age","93374929":"Around 1\/3 of the passengers are travelling with families.\n\nNext, let\u2019s dig out the families with children. Simply list out those \u2018SurTix\u2019 being families and having children.","79d9e9ad":"### Fare","665dc635":"1. Proportion of male and female: ~2\/3 vs ~1\/3\n2. Male is much less likely to survive, with only 20% chance of survival. For female, >70% chance of survival.\n3. Obviously, Sex is an important feature to predict survival.","f5ae3171":"Data structure:","531b5de3":"It is obviously that Title Mr. is much less likely to survive compared to others .\nLet\u2019s encode the features for modelling.","f403bae8":"Find the median of Age in each title.\n(Remarks: only use train dataset to avoid data leakage)","13a751ea":"1. Less than 70% passengers travel without parents\/children.\n2. Passengers travelling with parents\/children are more likely to survive than those not.","0c7925fc":"### Age","31c2864b":"### Fare","34c8385b":"Import data:","d7424993":"Impute the missing Age values according to the titles.","2d2f9b73":"Since the proportion of FamilySize=1 is dominant, it may not provide sufficeint predictive power. I decided to group them and convert to travelling alone or not.","da768cf3":"# 8. Submission","134649f3":"### Pclass","46daa01c":"The probability of survival is much higher for the passengers which:\n\nTravelling with family member\n1. Having 1 or more children in the family\n2. Having 1 or more survivor in the family\n\n# 6. Feature Selection","516f862d":"### Ticket","60d9ef3e":"# 7. Model\nTune model parameters.","964ae741":"# 1. Background\n\n#### The Challenge\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n#### Overview\n\nThe data has been split into two groups:\n* training set (train.csv)\n* test set (test.csv)\nThe training set should be used to build your machine learning models. For the training set, we provide the outcome (also known as the \u201cground truth\u201d) for each passenger. Your model will be based on \u201cfeatures\u201d like passengers\u2019 gender and class. You can also use feature engineering to create new features.\nThe test set should be used to see how well your model performs on unseen data. For the test set, we do not provide the ground truth for each passenger. It is your job to predict these outcomes. For each passenger in the test set, use the model you trained to predict whether or not they survived the sinking of the Titanic.\nWe also include gender_submission.csv, a set of predictions that assume all and only female passengers survive, as an example of what a submission file should look like.\n\n#### Data Dictionary\n\nVariableDefinitionKeysurvivalSurvival0 = No, 1 = YespclassTicket class1 = 1st, 2 = 2nd, 3 = 3rdsexSexAgeAge in yearssibsp# of siblings \/ spouses aboard the Titanicparch# of parents \/ children aboard the TitanicticketTicket numberfarePassenger farecabinCabin numberembarkedPort of EmbarkationC = Cherbourg, Q = Queenstown, S = Southampton\n#### Variable Notes\n\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\nsibsp: The dataset defines family relations in this way\u2026\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\nparch: The dataset defines family relations in this way\u2026\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.\n#### Goal\n\nIt is your job to predict if a passenger survived the sinking of the Titanic or not.\nFor each in the test set, you must predict a 0 or 1 value for the variable.\n#### Metric\n\nYour score is the percentage of passengers you correctly predict. This is known as accuracy.","c6a97d04":"It is observed that the families are usually all survived (i.e. all green) or not survived (i.e. all black). This finding proves the concept of connected survival. For each family of above, if there is at least one survived, we assume the others can survive too."}}