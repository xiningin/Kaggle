{"cell_type":{"a53710d6":"code","823de989":"code","a690511e":"code","30f3ff61":"code","2e705ad6":"code","b588faaa":"code","84bd7381":"code","cf7a9e1b":"code","c548c3bf":"code","21ad7687":"code","099ba94c":"code","b20b149d":"code","91544ed5":"code","c1e679c6":"code","0764641b":"code","b92c36f0":"code","60dd063b":"code","55571c38":"code","26aacf5d":"code","4ceda46b":"code","df51e2e8":"code","78db43df":"code","15c3a533":"code","3d3ce3dc":"code","40f408db":"code","8f20329e":"code","6f79ec5e":"code","02293a60":"code","ce9d7cc9":"code","67474e41":"code","de3715c6":"code","c2be59b7":"code","33c4a642":"code","7c268228":"code","89738cc7":"markdown","ccfe32a5":"markdown","d7944518":"markdown"},"source":{"a53710d6":"import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D # \uc6d0\ub798 CNN\ud560\ub824\uad6c \ud588\ub294\ub370 \uadc0\ucc2e\uc544\uc11c \uc548\ud588\uc74c\nfrom keras import optimizers\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport xgboost as xgb\nimport re","823de989":"dataTrain = pd.read_csv('..\/input\/train.csv')\ndataTest = pd.read_csv('..\/input\/test.csv')","a690511e":"### \ud559\uc2b5, \ud14c\uc2a4\ud2b8\uc790\ub8cc\uc5d0 Null \uac12\uc744 \ud655\uc778\nfor col in dataTrain.columns.tolist():\n    length = len(dataTrain[col])\n    lengthNull = len(dataTrain[col].dropna())\n    print('Null values of {:s} is {:d}'.format(col, length - lengthNull))\n # \ud559\uc2b5\uc790\ub8cc\uc5d0\ub294 Age, Cabin \uadf8\ub9ac\uace0 Embarked \uc5d0 Null \uac12\uc774 \uc788\ub2e4.\n\nfor col in dataTest.columns.tolist():\n    length = len(dataTest[col])\n    lengthNull = len(dataTest[col].dropna())\n    print('Null values of {:s} is {:d}'.format(col, length - lengthNull))\n # Age, Fare have null values on test data.\n # \ud14c\uc2a4\ud2b8\uc790\ub8cc\uc5d0\ub294 Age, Fare \uadf8\ub9ac\uace0 Cabin\uc5d0 Null \uac12\uc774 \uc788\ub2e4.","30f3ff61":"### \uc774\ub984(Name)\uc5d0 \ud638\uce6d\uc744 \ucc3e\uae30\nnameWords = []\nfor i in dataTrain['Name']:\n    i = re.sub('[,.()\"]', '', i).strip().split(' ')\n    for j in i:\n        nameWords.append(j)\nnameTitles = Series(nameWords).value_counts()[:10]\nprint(nameTitles) # \ub300\ucda9 \ub2e4\uc74c\uacfc \uac19\uc740 \ud638\uce6d\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4 - Mr, Miss, Mrs, Master\ndel i, j, nameWords, nameTitles","2e705ad6":"### \ud638\uce6d(Mr, Miss, Mrs, Master)\uc744 \uc22b\uc790\ud615\ud0dc\ub85c \ubcc0\ud658\ndef nameClassifier(dataset):\n    nameList = []\n    for name in dataset:\n        if re.search('Master', name) != None:\n            nameList.append(0)\n        elif re.search('Mrs', name) != None:\n            nameList.append(1)\n        elif re.search('Mr', name) != None:\n            nameList.append(2)\n        elif re.search('Miss', name) != None:\n            nameList.append(3)\n        else:\n            nameList.append(4)\n    return Series(nameList)\ndataTrain['segName'] = nameClassifier(dataTrain['Name'])","b588faaa":"### \uc804\uccb4 \uac00\uc871\uc22b\uc790\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4 !\ndef familySize(dataset):\n    return dataset['SibSp'] + dataset['Parch']\ndataTrain['Family'] = familySize(dataTrain)","84bd7381":"### 'Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'segName', 'Family' \uc5d0 \ub300\ud55c \uc0dd\uc874\/\uc0ac\ub9dd\nfig, ax = plt.subplots(2, 4, figsize=(18, 8))\ncolnames= ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'segName', 'Family']\ni = 0\nfor row in range(2):\n    for col in range(4):\n        try:\n            temp = dataTrain.groupby([colnames[i], 'Survived']).agg({'PassengerId':'count'}).reset_index()\n            sns.barplot(data=temp, x=colnames[i], y='PassengerId', hue='Survived', ax=ax[row, col])\n            i += 1\n        except:\n            continue\nplt.show()","cf7a9e1b":"### 'SibSp', 'Parch', 'Family', 'Embarked'\ubcc4, Pclass \ub4f1\uae09\ud655\uc778\nfig, ax = plt.subplots(2, 2, figsize=(18, 8))\ncolnames= ['SibSp', 'Parch', 'Family', 'Embarked']\ni = 0\nfor row in range(2):\n    for col in range(2):\n        try:\n            # temp = dataTrain.groupby(['Pclass', 'Survived', colnames[i]]).agg({'PassengerId':'count'}).reset_index()\n            temp = dataTrain.groupby(['Pclass', colnames[i]]).agg({'PassengerId':'count'}).reset_index()\n            # temp['Class_Survived'] = temp['Pclass'].astype(str) + '_' + temp['Survived'].astype(str)\n            sns.barplot(data=temp, x=colnames[i], y='PassengerId', hue='Pclass', ax=ax[row, col])\n            i += 1\n        except:\n            continue\nplt.show()","c548c3bf":"### \ub0a8\uc131\/\uc5ec\uc131(Sex)\ub97c 0\/1\ub85c \ubcc0\ud658\ndef sexClassifier(dataset):\n    return Series([1 if i == 'male' else 0 for i in dataset])\ndataTrain['segSex'] = sexClassifier(dataTrain['Sex'])","21ad7687":"### (Pclass)\ub97c 0-2\ub85c \ubcc0\ud658\ndef pclassClassifier(dataset):\n    return dataset -1\ndataTrain['segPclass'] = pclassClassifier(dataTrain['Pclass'])","099ba94c":"### SibSp\ub97c \uc22b\uc790\ud615\ud0dc\ub85c \ubcc0\ud658\nprint(dataTrain.pivot_table(index=['SibSp'], columns=['Survived'], values=['PassengerId'], aggfunc='count', fill_value=0))\n # \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc740 \ubd84\ub958\uc5d0 1\uc744, \uc0ac\ub9dd\uc790\uac00 \ub354 \ub9ce\uc740 \uacbd\uc6b0 0\uc744\ndef sibClassifier(dataset):\n    return Series([1 if (1 <= i) & (i <= 2) else 0 for i in dataset])\n    # return Series([0 if 0 == i else 1 for i in dataset])\ndataTrain['segSib'] = sibClassifier(dataTrain['SibSp'])","b20b149d":"### Parch\ub97c \uc22b\uc790\ud615\ud0dc\ub85c \ubcc0\ud658\nprint(dataTrain.pivot_table(index=['Parch'], columns=['Survived'], values=['PassengerId'], aggfunc='count', fill_value=0))\n # \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uc740 \ubd84\ub958\uc5d0 1\uc744, \uc0ac\ub9dd\uc790\uac00 \ub354 \ub9ce\uc740 \uacbd\uc6b0 0\uc744\ndef parClassifier(dataset):\n    return Series([0 if (1 <= i) & (i <= 3) else 1 for i in dataset])\n    # return Series([0 if 0 == i else 1 for i in dataset])\ndataTrain['segPar'] = parClassifier(dataTrain['Parch'])","91544ed5":"### Family \ub97c 0\/1 \uc22b\uc790\ud615\ud0dc\ub85c \ubcc0\ud658\ndef familyClassifier(dataset):\n    return Series([0 if (1 <= i) & (i <= 3) else 1 for i in dataset])\ndataTrain['segFamily'] = familyClassifier(dataTrain['Family'])","c1e679c6":"### \uac1d\uc2e4(Cabin) \uc720\ubb34\ub85c \uc0dd\uc874\/\uc0ac\ub9dd \ud655\uc778 : \uac1d\uc2e4\uc774 \uc5c6\ub294 \uacbd\uc6b0 \uc0ac\ub9dd\uc728\uc774 \ub192\ub2e4\nprint(dataTrain[dataTrain['Cabin'].isnull()].groupby(['Pclass', 'Survived'])['PassengerId'].count(), '\\n')\nprint(dataTrain[dataTrain['Cabin'].notnull()].groupby(['Pclass', 'Survived'])['PassengerId'].count())\ndef cabinClassifier(dataset):\n    temp = pd.DataFrame(dataset)\n    temp.loc[temp[temp.columns[0]].notnull(), temp.columns] = 1\n    temp.loc[temp[temp.columns[0]].isnull(), temp.columns] = 0\n    return temp[temp.columns]\ndataTrain['segCabin'] = cabinClassifier(dataTrain['Cabin'])","0764641b":"### \uc694\uae08\uc744 quartile\uc744 \uae30\uc900\uc73c\ub85c \uc22b\uc790\ub85c \ubcc0\ud658 : \ud50c\ub86f\uc740 \uadf8\ub9ac\uae30 \uadc0\ucc2e\uc544\uc11c \uadf8\ub7f0\ub370... \ub300\ucda9 \ube44\uc300 \uc218\ub85d \uc548\uc8fd\ub294\ub2e4.\ndef fareClassifier(dataset):\n    return pd.qcut(dataset, [0, .25, .5, .75, 1], labels=[0, 1, 2, 3]).astype(int)\ndataTrain['segFare'] = fareClassifier(dataTrain['Fare'])","b92c36f0":"### \ub098\uc774(Age)\uc758 Null \uac12\uc744 \ucc44\uc6b0\uae30 (Null\uc774 \uc544\ub2cc \ub808\ucf54\ub4dc\uc758 4\uac00\uc9c0 Feature \uc870\ud569\uc73c\ub85c \ub098\uc774\uc758 \uc911\uc704\uc218\uc744 \ucc44\uc6b4\ub2e4)\ndataAgeSet = dataTrain.groupby(['Pclass', 'segName', 'segSib', 'segPar']).agg({'Age':'median'}).reset_index() # \uc870\ud569\ubcc4 \ub098\uc774\uc758 \uc911\uc704\uc218\ub97c \uad6c\ud568 \ndataTrain = dataTrain.merge(dataAgeSet, on=['Pclass', 'segName', 'segSib', 'segPar'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTrain['Age'] = dataTrain['Age'].where(dataTrain['Age'].notnull(), dataTrain['Age_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTrain['Age_y']","60dd063b":"### \ub098\uc774\ubcc4 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc778\ub370, \uadf8\ub0e5 \uadf8\ub824\ubd04\nfig, ax = plt.subplots(1,2, figsize=(12, 6))\nax[0].hist(dataTrain['Age'])\nax[1].boxplot(dataTrain['Age'])\nplt.show()","55571c38":"# \ub098\uc774\ub97c quartile\uc744 \uae30\uc900\uc73c\ub85c \uc22b\uc790\ub85c \ubcc0\ud658\ndef ageClassifier(dataset):\n    return pd.qcut(dataset, [0, .25, .5, .75, 1], labels=[0, 1, 2, 3]).astype(int)\ndataTrain['segAge'] = ageClassifier(dataTrain['Age'])","26aacf5d":"### \ud0d1\uc2b9\ud56d\uad6c(Embarked)\uc758 Null \uac12\uc744 \ucc44\uc6b0\uae30 (Null\uc774 \uc544\ub2cc \ub808\ucf54\ub4dc\uc758 4\uac00\uc9c0 Feature \uc870\ud569\uc73c\ub85c \ud56d\uad6c\uc758 \ucd5c\ube48\uac12\uc744 \ucc44\uc6b4\ub2e4)\ndataEmbarkedSet = dataTrain.groupby(['Pclass', 'segName', 'segSib', 'segPar']).agg({'Embarked':lambda x: x.mode()}).reset_index()  # \uc870\ud569\ubcc4 \ud56d\uad6c\uc758 \ucd5c\ube48\uac12\uc744 \uad6c\ud568 \ndataTrain = dataTrain.merge(dataEmbarkedSet, on=['Pclass', 'segName', 'segSib', 'segPar'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTrain['Embarked'] = dataTrain['Embarked'].where(dataTrain['Embarked'].notnull(), dataTrain['Embarked_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTrain['Embarked_y']\n\ndef ebkClassifier(dataset): # \ud0d1\uc2b9\ud56d\uad6c(Embarked)\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\n    lists = []\n    for row in dataset:\n        if re.search('S', row) != None:\n            lists.append(0)\n        elif re.search('C', row) != None:\n            lists.append(1)\n        elif re.search('Q', row) != None:\n            lists.append(2)\n        else:\n            lists.append(3)\n    return Series(lists)\ndataTrain['segEmbarked'] = ebkClassifier(dataTrain['Embarked'])","4ceda46b":"### \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c Feature\ub9cc \ucd94\ucd9c\ndataTrainTemp = dataTrain[['segName', 'segSex', 'segPclass', 'segSib', 'segFamily', 'segPar', 'segFare', 'segAge']] # \uba87\ubc88 \ub3cc\ub9ac\ub2e4\ubcf4\ub2c8 \uc774 \uc870\ud569\uc774 \uac00\uc7a5 \uc88b\uc74c\n\ndef transformEncoding(dataset): # One hot encoidng \ud615\ud0dc\ub85c \ubc14\uafd4\uc8fc\ub294 \ud568\uc218\n    temp1 = pd.DataFrame()\n    for col in dataset.columns:\n        if len(dataset[col].unique()) == 2:\n            temp0 = dataset[col]\n        else:\n            temp0 = pd.get_dummies(dataset[col])\n            temp0.columns = [col + str(i) for i in temp0.columns]\n        temp1 = pd.concat([temp1, temp0], axis=1)\n    return temp1\n\nX = transformEncoding(dataTrainTemp).values # \ud559\uc2b5 Features\ny = dataTrain['Survived'].values.reshape(len(dataTrainTemp), 1).astype(int) # \ub2f5\uc548 Label","df51e2e8":"### \ubaa8\ud615\ud568\uc218 : \uc6d0\ub798 \uc5ec\ub7ec\uac1c \ub9cc\ub4e4\uc5b4\uc57c \ud558\ub294\ub370, \uadc0\ucc2e\uc544\uc11c 2\uac1c\ub85c \ub54c\uc6c1\ub2c8\ub2e4. \ud68c\uc0ac\uc77c \ub54c\ubb38\uc5d0 \uc7a0\uc744 \ubabb\uc790\uc11c \ud53c\uace4\ud574\uc694... (CNN\uc740 \ub9cc\ub4e4\ub2e4\uac00 \ub9dd\ud574\uc11c \ube7c\ubc84\ub9bc)\ndef modelXGB(X_train, y_train):\n    model = xgb.XGBClassifier(max_depth=50, n_estimators=700, n_jobs=-1, learning_rate=0.005, gamma=0.01) # \uc774\uac8c \uc7b4 \uc88b\ub354\ub77c\uad6c\uc694.\n    model.fit(X_train, y_train)\n    return model\n\ndef modelMLP(X_train, y_train, n_epoch, n_batch, optm): # \uadf8\ub0e5 \ud2b9\uc9d5\uc5c6\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\n    model = Sequential()\n    model.add(Dense(256, input_shape=(X_train.shape[1], ), activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(y_train.shape[1], activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=optm, metrics=['accuracy'])\n    model.fit(X_train, y_train, epochs=n_epoch, batch_size=n_batch)\n    return model","78db43df":"### \ud30c\ub77c\uba54\ud130\ub294 \uc774\uc815\ub3c4\ub85c~\nn_epoch = 100\nn_batch = 50\noptm = optimizers.Adam(lr=0.0001)","15c3a533":"### K-Fold Cross Validation : \ud53c\uace4\ud574\ub3c4 \uad50\ucc28\uac80\uc99d\uc740 \ud574\uc57c\uc8e0.\nkfold = StratifiedKFold(n_splits=5, random_state=0)\naccuracyXGB, accuracyMLP, accuracyENS = [], [], []\nfor train, test in kfold.split(X, y, groups=y):\n    \n    # XGBoost\n    model1 = modelXGB(X[train], y[train])\n    accuracy1 = model1.score(X[test], y[test])\n    print(accuracy1)\n    accuracyXGB.append(accuracy1)\n    \n    # MLP\n    model2 = modelMLP(X[train], y[train], n_epoch, n_batch, optm)\n    accuracy2 = model2.evaluate(X[test], y[test])[1]\n    print(accuracy2)\n    accuracyMLP.append(accuracy2)\n    \n    # 2\uac1c \ud569\uce5c\uac70\n    pred1 = model1.predict_proba(X[test])[:, 1]; pred1 = pred1.reshape(len(pred1))\n    pred2 = model2.predict_proba(X[test]); pred2 = pred2.reshape(len(pred2))\n    pred = (pred1 + pred2) \/ 2\n    pred = np.array([1 if i > 0.5 else 0 for i in pred])\n    accuracy3= accuracy_score(pred, y[test].reshape(len(y[test])))\n    accuracyENS.append(accuracy3)","3d3ce3dc":"### 3\uac1c \ubaa8\ud615 (CNN \/ MLP \/ \ub450\uac1c \uc18c\ud504\ud2b8 \ubc30\uae45) : \uc774\uc820 XGBoost \ubfd0\uc774\uc57c !\naccTable1 = DataFrame({'accuracy':accuracyXGB, 'model':'XGB'})\naccTable2 = DataFrame({'accuracy':accuracyMLP, 'model':'MLP'})\naccTable3 = DataFrame({'accuracy':accuracyENS, 'model':'Ensemble'})\naccTable = pd.concat([accTable1, accTable2, accTable3], axis=0)\ndel accTable1, accTable2, accTable3\naccTableAgg = accTable.groupby(['model']).agg({'accuracy':['mean', 'max', 'min', 'std']})\nprint(accTableAgg)","40f408db":"### 3\uac1c \ubaa8\ud615 (CNN \/ MLP \/ \ub450\uac1c \uc18c\ud504\ud2b8 \ubc30\uae45) \uc2dc\uac01\ud654\ub85c \ubd05\uc2dc\ub2e4 : \uc774\uc820 XGBoost \ubfd0\uc774\uc57c !\nfig, ax = plt.subplots(1,3, figsize=(16,5))\nplt.suptitle('K-Fold Cross Validation (K=5)')\nfor i, col in enumerate(accTable['model'].unique().tolist()):\n    temp = accTable[accTable['model'] == col]\n    ax[i].bar(range(len(temp)), temp['accuracy'])\n\n    ax[i].set_ylim(accTable['accuracy'].min()*.95, accTable['accuracy'].max())\n\n    ax[i].set_title('Accuracy : {}'.format(col))\nplt.show()","8f20329e":"### \ud14c\uc2a4\ud2b8 \uc790\ub8cc \uc804\ucc98\ub9ac : \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ud568\uc218\ub4e4\ub85c \uc804\ucc98\ub9ac\ud568\ndataTest['segName'] = nameClassifier(dataTest['Name'])\ndataTest['Family'] = familySize(dataTest)\ndataTest['segSex'] = sexClassifier(dataTest['Sex'])\ndataTest['segPclass'] = pclassClassifier(dataTest['Pclass'])\ndataTest['segSib'] = sibClassifier(dataTest['SibSp'])\ndataTest['segPar'] = parClassifier(dataTest['Parch'])\ndataTest['segFamily'] = familyClassifier(dataTest['Family'])\ndataTest['segCabin'] = cabinClassifier(dataTest['Cabin'])","6f79ec5e":"### \ud14c\uc2a4\ud2b8 \uc790\ub8cc\uc5d0 \ub098\uc774(Age) Null \uac12\uc744 \uccb4\uc6c0\ndataAgeSet = dataTrain.groupby(['Pclass', 'segName', 'segSib', 'segPar']).agg({'Age':'median'}).reset_index() # \uc870\ud569\ubcc4 \ub098\uc774\uc758 \uc911\uc704\uc218\ub97c \uad6c\ud568 \ndataTest = dataTest.merge(dataAgeSet, on=['Pclass', 'segName', 'segSib', 'segPar'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTest['Age'] = dataTest['Age'].where(dataTest['Age'].notnull(), dataTest['Age_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTest['Age_y']\n\ndataAgeSet = dataTrain.groupby(['Pclass', 'segName', 'segSib']).agg({'Age':'median'}).reset_index() # \uc870\ud569\ubcc4 \ub098\uc774\uc758 \uc911\uc704\uc218\ub97c \uad6c\ud568 \ndataTest = dataTest.merge(dataAgeSet, on=['Pclass', 'segName', 'segSib'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTest['Age'] = dataTest['Age'].where(dataTest['Age'].notnull(), dataTest['Age_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTest['Age_y']\n\ndataAgeSet = dataTrain.groupby(['segName', 'segSib', 'segPar']).agg({'Age':'median'}).reset_index() # \uc870\ud569\ubcc4 \ub098\uc774\uc758 \uc911\uc704\uc218\ub97c \uad6c\ud568 \ndataTest = dataTest.merge(dataAgeSet, on=['segName', 'segSib', 'segPar'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTest['Age'] = dataTest['Age'].where(dataTest['Age'].notnull(), dataTest['Age_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTest['Age_y']","02293a60":"### \ud14c\uc2a4\ud2b8 \uc790\ub8cc\uc5d0 \uc694\uae08(Fare) Null \uac12\uc744 \uccb4\uc6c0\ndataFareSet = dataTrain.groupby(['Pclass', 'segName', 'segSib', 'segPar']).agg({'Fare':'median'}).reset_index() # \uc870\ud569\ubcc4 \ub098\uc774\uc758 \uc911\uc704\uc218\ub97c \uad6c\ud568 \ndataTest = dataTest.merge(dataFareSet, on=['Pclass', 'segName', 'segSib', 'segPar'], how='left', suffixes=('','_y')) # \uc0c1\uae30\uad6c\ud55c \uc870\ud569\uc744 Join\ndataTest['Fare'] = dataTest['Fare'].where(dataTest['Fare'].notnull(), dataTest['Fare_y']) # Null \uac12\uc744 \ucc44\uc6c0\ndel dataTest['Fare_y']","ce9d7cc9":"### \ub098\uba38\uc9c0 Feature \ubcc0\ud658\ndataTest['segFare'] = fareClassifier(dataTest['Fare'])\ndataTest['segAge'] = ageClassifier(dataTest['Age'])\ndataTest['segEmbarked'] = ebkClassifier(dataTest['Embarked'])","67474e41":"### One Hot Encoding\uc73c\ub85c \ubcc0\ud658\ndataTestTemp = dataTest[['segName', 'segSex', 'segPclass', 'segSib', 'segFamily', 'segPar', 'segFare', 'segAge']]\nX_test = transformEncoding(dataTestTemp).values","de3715c6":"### \ubaa8\ud615 : XGB\ub85c \uac11\uc2dc\ub2e4\nmodel1 = modelXGB(X, y)\npred = model1.predict(X_test)\npred = Series(pred)","c2be59b7":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['Survived'] = pred","33c4a642":"submission.head() # \uc62c~~~","7c268228":"# \ub450\uadfc\ub450\uadfc \uc81c\ucd9c\uc644\ub8cc\nsubmission.to_csv('.\/submission.csv', index=False)","89738cc7":"\uc608\uc0c1\ub300\ub85c \uc0dd\uc874\ube44\uc728\uc774 \ub0ae\uc740 \ud56d\ubaa9\uc758 \uc9d1\ub2e8\uc774 \ub0ae\uc740 Pclass\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\ub2e4. (\ub3c8\uc774 \uc660\uc218\ub2e4)","ccfe32a5":"# \uc774\uc81c \uc608\uce21\uc744 \ud574\ubd05\uc2dc\ub2e4 !","d7944518":"1) Pclass : \ub3c8 \uc5c6\uc73c\uba74 \uc8fd\ub294\ub2e4. (\ud314\uc790\ub2e4...)<br\/>\n2) Sex : \uc5ec\uc131\uc758 \uc0dd\uc874\uc774 \ub9ce\ub2e4.<br\/>\n3) SibSp\uc774 1\uba85\uc77c \ub54c, \uc0dd\uc874\uc774 \ub354 \ub9ce\ub2e4.(Pclass\uc5d0 \ub530\ub978 \ube44\uad50\uac00 \ud544\uc694\ud558\ub2e4.)<br\/>\n4) Parch : 1 - 3\uc77c \ub54c, \uc0dd\uc874\uc774 \ub354 \ub9ce\ub2e4.(Pclass\uc5d0 \ub530\ub978 \ube44\uad50\uac00 \ud544\uc694\ud558\ub2e4.)<br\/>\n5) Embarked : S\uc77c \ub54c, \uc0ac\ub9dd\uc774 \ub9ce\ub2e4.(S \ud56d\uad6c\uac00 \ub0ae\uc740 \ub4f1\uae09 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc774 \ud0d1\uc2b9\ud588\ub098?)<br\/>\n6) segName : \ud638\uce6d\uc774 Mr\uc77c\ub54c \uc0ac\ub9dd\uc774 \ub9ce\uc558\ub2e4. (\uae30\uc0ac\ub3c4?)<br\/>\n7) Family : \uc804\uccb4 \uac00\uc871\uc218\uac00 1 - 3\uc77c\ub54c \uc0dd\uc874\uc774 \ub354 \ub9ce\uc558\ub2e4.(Pclass\uc5d0 \ub530\ub978 \ube44\uad50\uac00 \ud544\uc694\ud558\ub2e4.)<br\/>"}}