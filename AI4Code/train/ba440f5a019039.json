{"cell_type":{"49f31f09":"code","b67fa9da":"code","ad914aaf":"code","9cb9ad9e":"code","f642599d":"code","fd463142":"code","c07ad408":"code","41778663":"code","42bbd5cc":"code","d2473be5":"code","fd54a191":"code","4dd65351":"code","dd61d715":"code","8968a25d":"code","09c83884":"code","6fbc1057":"code","22b78402":"code","e4acbd6a":"code","b94af97f":"code","9da70d9e":"code","50e31c70":"code","a233b405":"code","2cbc0d84":"code","4388293d":"code","ad4bd5c5":"code","3c0d801d":"code","b731aa3b":"code","11f4941e":"code","b12a55c5":"code","5b040a7f":"code","821f7db6":"code","3c10421b":"code","ffeb6d50":"code","8b4e9679":"code","cb9cefff":"code","fc4fc2fa":"code","975e3790":"code","024e9a7e":"code","c1bfab74":"code","26b83502":"code","2f98ffc7":"code","277ef16c":"code","d2161375":"code","4f711847":"code","c7f88eca":"code","0cace9a0":"code","594b885c":"code","83b4985a":"code","b1edd095":"code","6e3240c1":"markdown","82cb98ef":"markdown","fe4b46d9":"markdown","f672edc0":"markdown","73d049bd":"markdown","e89961e9":"markdown","2bcd041c":"markdown","15fa7ede":"markdown","12993182":"markdown"},"source":{"49f31f09":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b67fa9da":"data = pd.read_csv('\/kaggle\/input\/spacemissionsflightstatus\/SpaceMissions.csv')\ndata.head(10)","ad914aaf":"data.info()","9cb9ad9e":"data.isnull().sum()","f642599d":"#handling null temperature values\nx = data.iloc[:, 4].values\nx = x.reshape(-1,1)\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer = imputer.fit(x)\nx = imputer.transform(x)\ndata.iloc[:, 4] = x\ndata.isnull().sum()\n\n#handling null humidity values\nx = data.iloc[:, 6].values\nx = x.reshape(-1,1)\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer = imputer.fit(x)\nx = imputer.transform(x)\ndata.iloc[:, 6] = x\ndata.isnull().sum()\n\n#handling null wind speed values\nx = data.iloc[:, 5].values\nx = x.reshape(-1,1)\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer = imputer.fit(x)\nx = imputer.transform(x)\ndata.iloc[:, 5] = x\ndata.isnull().sum()","fd463142":"#handling fairing diameter missing values\ndata[data[\"Fairing Diameter (m)\"].isnull()]","c07ad408":"fm_arienaspace = data[data['Company'] == 'Arianespace']\nlist_1 = fm_arienaspace['Fairing Diameter (m)']\n\nfrom statistics import mean\na = list_1.mean()\n\nfor a,b in zip(data['Company'], data['Fairing Diameter (m)']):\n    if a == 'Arianespace'or a == 'European Space Agency':\n         data[\"Fairing Diameter (m)\"] = data[\"Fairing Diameter (m)\"].fillna(a)\n\ndata.isnull().sum()\n\n\n","41778663":"#handling Payload Type missing values\ndata[data['Payload Type'].isnull()]","42bbd5cc":"#checking for the most frequent payload type in company spacex\nfm_arienaspace = data[data['Company'] == 'SpaceX']\nfm_arienaspace['Payload Type'].describe()","d2473be5":"#filling nan w\/most frequent payload type in  SpaceX\ndata['Payload Type'] = data['Payload Type'].fillna('Communication Satellite')\ndata.isnull().sum()","fd54a191":"#handling payload mass nan values\na = data[data['Payload Mass (kg)'].isnull()]\na['Payload Name'].unique()\n","4dd65351":"data['Payload Mass (kg)'].unique()","dd61d715":"#converting the classified rows to numerical data and changing dtype of payloadmass to int\ndata.loc[ data['Payload Mass (kg)'] == 'Classified', 'Payload Mass (kg)'] = 0\ndata['Payload Mass (kg)'] = data['Payload Mass (kg)'].astype(float)\ndata['Payload Mass (kg)'].unique()","8968a25d":"#handling null values and changing dtype to int\nx = data.iloc[:, -4].values\nx = x.reshape(-1,1)\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer = imputer.fit(x)\nx = imputer.transform(x)\ndata.iloc[:, -4] = x\n\ndata['Payload Mass (kg)'] = data['Payload Mass (kg)'].astype(int)\ndata.isnull().sum()","09c83884":"data['Launch Time'].describe()","6fbc1057":"#handling the null launch time values\nx = data.iloc[:, 2].values\nx = x.reshape(-1,1)\nimputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimputer = imputer.fit(x)\nx = imputer.transform(x)\ndata.iloc[:, 2] = x","22b78402":"#drop the failure reason column\ndata = data.drop(['Failure Reason'], axis = 1)","e4acbd6a":"#Company\ndata['Company'].unique()","b94af97f":"data.loc[data['Company'] == 'SpaceX', 'Company'] = 0\ndata.loc[data['Company'] == 'Boeing', 'Company'] = 1\ndata.loc[data['Company'] == 'Martin Marietta', 'Company'] = 2\ndata.loc[data['Company'] == 'US Air Force', 'Company'] = 3\ndata.loc[data['Company'] == 'European Space Agency', 'Company'] = 4\ndata.loc[data['Company'] == 'Brazilian Space Agency', 'Company'] = 5\ndata.loc[data['Company'] == 'Arianespace', 'Company'] = 6","9da70d9e":"data['Company'].unique()","50e31c70":"#Launch Site\ndata['Launch Site'].unique()","a233b405":"data.loc[data['Launch Site'] == 'Marshall Islands', 'Launch Site'] = 0\ndata.loc[data['Launch Site'] == 'Cape Canaveral', 'Launch Site'] = 1\ndata.loc[data['Launch Site'] == 'Vandenberg ', 'Launch Site'] = 2\ndata.loc[data['Launch Site'] == ' Guiana Space Centre', 'Launch Site'] = 3\ndata.loc[data['Launch Site'] == 'Alc\u00e2ntara Launch Center', 'Launch Site'] = 4\ndata.loc[data['Launch Site'] == 'Kennedy Space Center', 'Launch Site'] = 5","2cbc0d84":"data = data.rename({'Vehicle Type': \"Vehicle_Type\"}, axis = 1)\ndata['Vehicle_Type'].unique()","4388293d":"#Vehicle Type\ntitles = {\"Falcon\": 0, \"Delta\": 1, \"Titan\": 2, \"Ariane\": 3, \"Vega\": 4, \"VLS\": 5}\n\n# extract titles\ndata['vehicle_type'] = data.Vehicle_Type.str.extract('([A-Za-z]+)', expand=False)\n# convert titles into numbers\ndata['vehicle_type'] = data['vehicle_type'].map(titles)  \n\ndata = data.drop(['Vehicle_Type'], axis=1)\ndata.head()","ad4bd5c5":"# Payload Name and Type\n#too much unique values, we're gonna have to drop them\ndata = data.drop(['Payload Name', 'Payload Type'], axis = 1)","3c0d801d":"#Payload Orbit\ndata['Payload Orbit'].unique()","b731aa3b":"data.loc[data['Payload Orbit'] == 'Low Earth Orbit', 'Payload Orbit'] = 0\ndata.loc[data['Payload Orbit'] == 'Geostationary Transfer Orbit', 'Payload Orbit'] = 1\ndata.loc[data['Payload Orbit'] == 'Medium Earth Orbit', 'Payload Orbit'] = 2\ndata.loc[data['Payload Orbit'] == 'Sun-Synchronous Orbit', 'Payload Orbit'] = 3\ndata.loc[data['Payload Orbit'] == 'Polar Orbit', 'Payload Orbit'] = 4\ndata.loc[data['Payload Orbit'] == 'High Earth Orbit', 'Payload Orbit'] = 5\ndata.loc[data['Payload Orbit'] == 'Sun\/Earth Orbit', 'Payload Orbit'] = 6\ndata.loc[data['Payload Orbit'] == 'Heliocentric Orbit', 'Payload Orbit'] = 7\ndata.loc[data['Payload Orbit'] == 'Suborbital', 'Payload Orbit'] = 8\ndata.loc[data['Payload Orbit'] == 'Mars Orbit', 'Payload Orbit'] = 9\ndata.loc[data['Payload Orbit'] == 'Earth-Moon L2', 'Payload Orbit'] = 10","11f4941e":"#Mission Status\ndata.loc[data['Mission Status'] == 'Failure', 'Mission Status'] = 0\ndata.loc[data['Mission Status'] == 'Success', 'Mission Status'] = 1","b12a55c5":"data.head()","5b040a7f":"# Launch Date and Launch Time\ndata['Launch Date'] = data['Launch Date'].astype(str)\ndata['Launch Time'] = data['Launch Time'].astype(str)\n#merging the columns\ndata['Launch_Time'] = data['Launch Date'].str.cat(data['Launch Time'],sep=\" \")\ndata = data.drop(['Launch Time', 'Launch Date'], axis = 1)\ndata.head()","821f7db6":"#convert to datetime\nfrom datetime import datetime\ndata['Launch_Time'] = data['Launch_Time'].map(lambda x: datetime.strptime(x, '%d %B %Y %H:%M'))","3c10421b":"# Fairing Diameter (European Space Agency)\ndata['Fairing Diameter (m)'].unique()","ffeb6d50":"data.loc[data['Fairing Diameter (m)'] == \"European Space Agency\", 'Fairing Diameter (m)'] = 5.2","8b4e9679":"#Fairing diameter\ndata['Fairing Diameter (m)'].unique()","cb9cefff":"for a in data['Fairing Diameter (m)']:\n    if a == 'European Space Agency':\n        a = 5.2\n        \n\n# data['Fairing Diameter (m)'].unique()","fc4fc2fa":"# Company\nsns.lineplot(x='Company', y='Mission Status', data=data)\n","975e3790":"#vehicle type\nsns.lineplot(x='vehicle_type', y='Mission Status', data=data)","024e9a7e":"#launch site\nsns.barplot(x='Launch Site', y='Mission Status', data=data)","c1bfab74":"# Temperature\nsns.lineplot(x='Temperature (\u00b0 F)', y='Mission Status', data=data)","26b83502":"#wind speed\nsns.lineplot(x='Wind speed (MPH)', y='Mission Status', data=data)","2f98ffc7":"#humidity\nsns.lineplot(x='Humidity (%)', y='Mission Status', data=data)","277ef16c":"#liftoff thrust\nsns.lineplot(x='Liftoff Thrust (kN)', y='Mission Status', data=data)","d2161375":"# Payload Orbit\nsns.lineplot(x='Payload Orbit', y='Mission Status', data=data)\n\n","4f711847":"#launch time\nsns.lineplot(x='Launch_Time', y='Mission Status', data=data)","c7f88eca":"#splitting dataset to train and test sets\nx = data.iloc[:, [0,1,2,3,4,5,6,7,8,9,10,12]]\ny = data.iloc[:, -3].values\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 0)","0cace9a0":"# Fitting Random Forest Classification to Training set\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\n\ny_pred = random_forest.predict(x_test)\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","594b885c":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\n# Fitting Naive Bayes Algorithm to Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(x_train, y_train)\n\n# Predicting Test set results\ny_pred = classifier.predict(x_test)\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","83b4985a":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\n# Fitting k-NN to Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\nclassifier.fit(x_train, y_train)\n\n# Predicting Test set results\ny_pred = classifier.predict(x_test)\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","b1edd095":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n\n# Fitting Logistic Regression to Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0, solver='lbfgs')\nclassifier.fit(x_train, y_train)\n\n\n# Predicting Test set results\nY_pred = classifier.predict(x_test)\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","6e3240c1":"## Different variable realtion to Mission Status","82cb98ef":"## Null Values","fe4b46d9":"92.8% accurate","f672edc0":"93.3% acccurate","73d049bd":"#### Most of these variables have unique relationships w\/the mission status.\n#### For the case of vehicle type, company, Launch Site and Payload Orbit its pretty clearer.","e89961e9":"90% accurate","2bcd041c":"## Model Fitting","15fa7ede":"93.3% accurate","12993182":"## Categorical Data"}}