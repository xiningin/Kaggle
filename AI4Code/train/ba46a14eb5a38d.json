{"cell_type":{"e021e3c3":"code","a88eae88":"code","d86e68ae":"code","8f97495a":"code","839df364":"code","bbb2b8e3":"code","8967e948":"code","5ff2e789":"code","5e817b27":"markdown","c60fc5f2":"markdown","a623c2e8":"markdown","875b07e1":"markdown","e8fb3689":"markdown","cee151d5":"markdown","62ac6e37":"markdown"},"source":{"e021e3c3":"# imports\n\nimport pathlib\nimport geopandas","a88eae88":"INPUTS_DIR = pathlib.Path('..\/input\/cpe-data\/')\ndept_dirs = [x for x in INPUTS_DIR.iterdir() if x.is_dir()]","d86e68ae":"EXPECTED_DIRECTORIES = [\n    '{name}_ACS_education-attainment',\n    '{name}_ACS_education-attainment-over-25',\n    '{name}_ACS_employment',\n    '{name}_ACS_income',\n    '{name}_ACS_owner-occupied-housing',\n    '{name}_ACS_poverty',\n    '{name}_ACS_race-sex-age',\n]\n\ndef get_dept_name(dept_dir):\n    return dept_dir.name[5:]\n\ndef get_acs_data_dir(dept_dir):\n    name = get_dept_name(dept_dir)\n    return dept_dir \/ f'{name}_ACS_data'\n\ndef get_shapefile_dir(dept_dir):\n    name = get_dept_name(dept_dir)\n    return dept_dir \/ f'{name}_Shapefiles'","8f97495a":"for dept_dir in dept_dirs:\n    name = get_dept_name(dept_dir)\n    expected_dirs = set([x.format(name=name) for x in EXPECTED_DIRECTORIES])\n    found_dirs = set([x.name for x in get_acs_data_dir(dept_dir).iterdir()])\n\n    if expected_dirs != found_dirs:\n        left = expected_dirs - found_dirs\n        right = found_dirs - expected_dirs\n        \n        msg = f\"\\n\"\n        msg += f\"{name}\\n\"\n        msg += f\"Expected dirs not found: {left}\\n\"\n        msg += f\"Found dirs not expected: {right}\"\n        print(msg)","839df364":"# same as EXPECTED_DIRECTORIES\n\nEXPECTED_TABLES = [\n    'S1501',\n    'B15003',\n    'S2301',\n    'S1903',\n    'S2502',\n    'S1701',\n    'DP05',\n]\n\nfor dept_dir in dept_dirs:\n    name = get_dept_name(dept_dir)\n    # we will use pathlib objects\n    acs_dir = get_acs_data_dir(dept_dir)\n        \n    expected_dirs = [acs_dir \/ x.format(name=name) for x in EXPECTED_DIRECTORIES]    \n    expected_files = []\n    for x_dir, x_table in zip(expected_dirs, EXPECTED_TABLES):\n        x_file1 = x_dir \/ f'ACS_15_5YR_{x_table}_with_ann.csv'\n        x_file2 = x_dir \/ f'ACS_15_5YR_{x_table}_metadata.csv'\n        expected_files += [x_file1, x_file2]\n        \n    found_files = []\n    for f_dir in acs_dir.iterdir():\n        found_files += list(f_dir.iterdir())\n\n    expected_files = set(str(x.relative_to(acs_dir)) for x in expected_files)\n    found_files = set(str(x.relative_to(acs_dir)) for x in found_files)\n    if expected_files != found_files:\n        left = expected_files - found_files\n        right = found_files - expected_files\n        \n        msg = f\"\\n\"\n        msg += f\"{name}\\n\"\n        msg += f\"Expected files not found: {left}\\n\"\n        msg += f\"Found files not expected: {right}\"\n        print(msg)","bbb2b8e3":"for dept_dir in dept_dirs:\n    name = get_dept_name(dept_dir)\n    shape_dir = get_shapefile_dir(dept_dir)\n    try:\n        df = geopandas.read_file(str(shape_dir))\n    except Exception as ex:\n        raise ValueError(f\"Could not load Department {name} shapefile\") from ex","8967e948":"for dept_dir in dept_dirs:\n    name = get_dept_name(dept_dir)\n    acs_dir = get_acs_data_dir(dept_dir)\n    shape_dir = get_shapefile_dir(dept_dir)\n    \n    files = [x.relative_to('..\/input') \n             for x in dept_dir.iterdir() \n             if x not in (acs_dir, shape_dir)]\n    \n    msg = f\"{name}\\n\"\n    for file in files:\n        msg += f\"{file}\\n\"\n    print(msg)","5ff2e789":"!ls -l ..\/input\/cpe-data\/Dept_49-00009\/*_UOF.csv","5e817b27":"# 4. Outer files","c60fc5f2":"# Notes\n\nPlease note that the scripts here only check how the files look on the outside (except the shapefiles that are loaded).\n\nI will try to keep this updated with each dataset version.\n\nAlso, feel free to suggest any other tests for the inputs (you may also fork this and implement yourself ha!).\n\nGood bye","a623c2e8":"Department 49-00009 seems to have a duplicate.","875b07e1":"# Verifying integrity of inputs\n\nHello there! Given that lots of inputs for this challenge were retrieved manually (all of them?), here is a little kernel to verify their integrity.","e8fb3689":"# 3. Shapefiles\n\nNow, checking if the shapefiles can be loaded (no exceptions = okay).","cee151d5":"# 1. ACS Directories\n\nLet's see if all ACS Directories are named as expected.","62ac6e37":"# 2. ACS Files\n\nAnd if the files are what we would expect"}}