{"cell_type":{"aa11ef3a":"code","dd66e4a3":"code","c7d45e8d":"code","824876ee":"code","750ae0c4":"code","006c8caa":"code","11bacbf5":"code","5d7aa3be":"code","4d7400d1":"code","f69c1ec4":"code","95c56f7f":"code","cf9edf62":"code","682d2918":"code","d3929980":"code","727c0b0c":"code","2137a8b8":"code","d73e57d7":"code","16a3c656":"code","2be2b475":"code","f31a6a5d":"code","677d09fe":"code","e8cf79fd":"code","afc530f4":"code","451ef220":"code","8ec3e875":"code","e73d778c":"code","0aecc73a":"code","cb6be715":"code","1310f157":"code","ec5cd315":"code","a9a654e9":"code","4d4eee01":"code","a38f98cd":"code","1f7f9362":"code","840771d0":"code","c3d6c67e":"code","040c91cf":"code","a92e404c":"code","da4854e8":"code","d4a05224":"code","ffecfa9a":"code","bb42cfe0":"code","8af739d3":"code","e393ff29":"code","4d17d8f4":"code","5b58daae":"code","660e16bb":"markdown","97217330":"markdown","fbf70ef8":"markdown","87b3f9c2":"markdown","0c772e81":"markdown","7b9bd898":"markdown","3e171b2d":"markdown","d90f174d":"markdown","e1d0f7bf":"markdown","72e09444":"markdown"},"source":{"aa11ef3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd66e4a3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import preprocessing \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom datetime import datetime","c7d45e8d":"df = pd.read_csv('..\/input\/drug-classification\/drug200.csv')\ndf","824876ee":"df.head()","750ae0c4":"df.tail()","006c8caa":"df.shape","11bacbf5":"df.size","5d7aa3be":"df.dtypes","4d7400d1":"df.columns","f69c1ec4":"df.info()","95c56f7f":"df.describe()","cf9edf62":"df.duplicated().sum()","682d2918":"df.isnull().sum()","d3929980":"df.drop(['Sex', 'BP', 'Cholesterol','Drug'],axis  = 1).skew()","727c0b0c":"df.drop(['Sex', 'BP', 'Cholesterol','Drug'],axis  = 1).corr()","2137a8b8":"! pip install autoviz","d73e57d7":"! pip install xlrd","16a3c656":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz('..\/input\/drug-classification\/drug200.csv')","2be2b475":"df['Sex'].value_counts()  #two types of categorical data","f31a6a5d":"sns.countplot(x = 'Sex',data=df)\nplt.show()","677d09fe":"df['BP'].value_counts()","e8cf79fd":"sns.countplot(x = 'BP',data=df)\nplt.show()","afc530f4":"df['Cholesterol'].value_counts()","451ef220":"sns.countplot(x = 'Cholesterol',data=df)\nplt.show()","8ec3e875":"df['Drug'].value_counts()","e73d778c":"sns.countplot(x = 'Drug',data=df)\nplt.show()","0aecc73a":"fig = px.histogram(df, 'Age',             \n                   color=\"Drug\",\n                   title=\"<b>Average age of people taken drug<\/b>\")\n\nfig.add_vline(x=df['Age'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n#below age 50 no one took drugB\n#Above age 51 no one took drugA","cb6be715":"fig = px.histogram(df, 'Na_to_K',             \n                   color=\"Drug\",\n                   title=\"<b>Average grams of Na_to_K in drug <\/b>\")\n\nfig.add_vline(x=df['Na_to_K'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n#In DrugY there the capacity of Na_to_K is 15-40\n# All other drugs has below 15 capacity of Na_to_K","1310f157":"df_Sex_Drug = df.groupby([\"Drug\",\"Sex\"]).size().reset_index(name = \"Count\")\ndf_Sex_Drug","ec5cd315":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Sex\",data = df_Sex_Drug)\nplt.title(\"Sex -- Drug\")\nplt.show()\n\n#Male people get drugA, drugB and drugC more than male people.\n#Female people get DrugY more than female people.\n#drugX seems equal for male and female people.\n#According to this graph, Sex feature is not an important feature for classification.","a9a654e9":"df_BP_Drug = df.groupby([\"Drug\",\"BP\"]).size().reset_index(name = \"Count\")\ndf_BP_Drug","4d4eee01":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"BP\",data = df_BP_Drug)\nplt.title(\"BP -- Drug\")\nplt.show()\n\n#drugA and drugB are got only by people who have HIGH blood pressure.\n#drugC is got by people who have LOW blood pressure.\n#drugX is got by people who have HIGH blood pressure.\n#BP is an important feature for classification.","a38f98cd":"df_CH_Drug = df.groupby([\"Drug\",\"Cholesterol\"]).size().reset_index(name = \"Count\")\ndf_CH_Drug","1f7f9362":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Cholesterol\",data = df_CH_Drug)\nplt.title(\"Cholesterol -- Drug\")\nplt.show()\n\n#drugC is got by people who have HIGH cholesterol.\n#Cholesterol is an important feature to classify drugC","840771d0":"plt.figure(figsize=(16,9))\nx = df.drop(['Sex','BP','Cholesterol','Drug'],axis = 1)\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()\n\n#Age and Na_to_K are not related","c3d6c67e":"x = df.drop(['Sex','BP','Cholesterol','Drug'],axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","040c91cf":"x = df.drop(['Sex','BP','Cholesterol','Drug'],axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')\n    plt.xlabel(i)\n    plt.show()","a92e404c":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(x,i)","da4854e8":"df","d4a05224":"df1=pd.get_dummies(data=df,columns=[\"BP\",\"Cholesterol\",'Sex'],drop_first=True)","ffecfa9a":"df1","bb42cfe0":"c1='Drug'\nlabel_encoder = preprocessing.LabelEncoder() \ndf1[c1]= label_encoder.fit_transform(df1[c1]) \ndf1[c1].unique()\ndf1","8af739d3":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df1.corr(),annot = True,cmap = 'viridis')\nplt.show()","e393ff29":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df1.drop(['Drug'],axis = 1))","4d17d8f4":"X = df1.drop(['Drug','Age'],axis = 1)\nY = df1['Drug']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","5b58daae":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nrfc = RandomForestClassifier(random_state = 42)\naccuracies = cross_val_score(rfc, X_train, Y_train, cv=5)\nrfc.fit(X_train,Y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",rfc.score(X_test,Y_test))","660e16bb":"# Count of outliers","97217330":"# Data Visualisation Using Autoviz","fbf70ef8":"# Loading DataSet","87b3f9c2":"# Exploratory Data Analysis","0c772e81":"# Import Libraries","7b9bd898":"# Feature Scaling","3e171b2d":"# Feature Selection","d90f174d":"# Data Visualisation","e1d0f7bf":"# Prediction using randomforest","72e09444":"# Data Preprocessing"}}