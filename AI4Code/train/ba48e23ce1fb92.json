{"cell_type":{"b678bf80":"code","3a31e889":"code","b69b722b":"code","814bf372":"code","99c727ff":"code","bad66f25":"code","9bbbf3b3":"code","f4ead0f3":"code","4a26ccdc":"code","ee05fc54":"code","52362575":"code","2e09c38d":"code","ca2ca7f7":"code","bfa7af69":"code","6af27895":"code","721d6c11":"code","8344a0cb":"code","2e3e7b97":"code","62abe234":"code","7d67f30f":"code","72166740":"code","76580a53":"code","b956bef8":"code","8e11ab67":"code","594c11fa":"code","bf37cb71":"code","2ba1219f":"code","169e4ebb":"code","3f9962aa":"code","ee366387":"markdown","f47b3fd1":"markdown","c335fdae":"markdown","9e1d8c94":"markdown","a09e4eff":"markdown","e3412bdf":"markdown","59fa2df0":"markdown","05cd2c85":"markdown","622d56cc":"markdown","d62dacc2":"markdown","d8779351":"markdown","744df879":"markdown","40c91266":"markdown","c4da4b43":"markdown","0194e20d":"markdown","1a7f9612":"markdown"},"source":{"b678bf80":"## Importing the Libraries\nimport os\nimport pandas as pd\npd.set_option('max_columns',105)\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats as ss\nfrom IPython.core.display import HTML\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set()","3a31e889":"## Loading the Dataset\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b69b722b":"## Printing the shape of the dataset\nprint(\"Shape of the Train dataset is:\",train_data.shape)\nprint(\"*\"*50)\nprint(\"Shape of the Test dataset is:\",test_data.shape)","814bf372":"train_data.head()","99c727ff":"## Summary of numeric values in the train dataset\ntrain_data.describe()","bad66f25":"## Printing the datatype of train and test set\nprint(\"Training data:\",train_data.info())\nprint(\"*\"*50)\nprint(\"Test data:\",test_data.info())","9bbbf3b3":"## Distribution of Traget varible i.e. \"SalePrice\"\nsns.distplot(train_data['SalePrice'])\n\n## Skewness and Kurtosis\nprint(\"Skewness %f\" % train_data['SalePrice'].skew())\nprint(\"Kurtosis %f\" % train_data['SalePrice'].kurt())","f4ead0f3":"## Fitting log curve to check the distribution with Log Transfornation\ntrain_data['SalePrice_Log'] = np.log(train_data['SalePrice'])\n## Log Transformed Curve\nsns.distplot(train_data['SalePrice_Log'])\n\n## Skewness and Kurtosis of the data\nprint(\"Skewness\",train_data['SalePrice_Log'].skew())\nprint(\"kurtosis\",train_data['SalePrice_Log'].kurt())","4a26ccdc":"## Numerical and Ctegorical columns\nnumerical_features = train_data.dtypes[train_data.dtypes != \"object\"].index\nprint(\"Total Numerical Features in the dataset:\",len(numerical_features))\n\ncategorical_features = train_data.dtypes[train_data.dtypes == \"object\"].index\nprint(\"Total Categorical Features in the dataset:\", len(categorical_features))","ee05fc54":"print(\"Numerical columns:\",numerical_features)\nprint(\"*\"*60)\nprint(\"Categrical features:\",categorical_features)","52362575":"## List of Features with Missing Values\ntotal = train_data.isnull().sum().sort_values(ascending = False)\npercent = (train_data.isnull().sum()\/train_data.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = [\"Total\",\"Percent\"])\nmissing_data.head(20)","2e09c38d":"## Filling the Missing Values where  NAN has meaning ex. No pool \n## This information can be found from the Data Discription\nfill_na_cols = ['PoolQC','MiscFeature','Alley','Fence','MasVnrType','FireplaceQu',\n               'GarageQual','GarageCond','GarageFinish','GarageType', 'Electrical',\n               'KitchenQual', 'SaleType', 'Functional', 'Exterior2nd', 'Exterior1st',\n               'BsmtExposure','BsmtCond','BsmtQual','BsmtFinType1','BsmtFinType2',\n               'MSZoning', 'Utilities']\n\n## Replace 'NaN' with 'None' in these columns\nfor cols in fill_na_cols:\n    train_data[cols].fillna('None',inplace = True)\n    test_data[cols].fillna('None',inplace = True)","ca2ca7f7":"## Checking the percentage of the missing values after this transformation\ntotal = train_data.isnull().sum().sort_values(ascending = False)\npercent = (train_data.isnull().sum()\/train_data.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total,percent],axis = 1, keys = [\"Total\",\"Percent\"])\nmissing_data.head(10)","bfa7af69":"## Filling the remainig numerical columns with the mean value\ntrain_data.fillna(train_data.mean(), inplace = True)\ntest_data.fillna(test_data.mean(),inplace = True)","6af27895":"## Checking the missing data status\nprint(\"Missing Status of the Training data:\",train_data.isnull().sum().sum())\nprint(\"Missing Status of the Test data:\",test_data.isnull().sum().sum())","721d6c11":"## Checking the Distribution of the columns in the Train dataset\nfor col in numerical_features:\n    print('{:15}'.format(col),\n          'Skweness:{:05.2f}'.format(train_data[col].skew()),\n          '   ',\n          'Kurtosis: {:06.2f}'.format(train_data[col].kurt())\n         )","8344a0cb":"train_data.head()","2e3e7b97":"test_data.columns","62abe234":"sns.distplot(train_data['LotArea'])\nprint(\"Skewness: %f\" %train_data['LotArea'].skew())\nprint(\"Kurtosis: %f\" %train_data['LotArea'].kurt())","7d67f30f":"sns.distplot(train_data['GrLivArea'])\nprint(\"Skewness of the data:\",train_data['GrLivArea'].skew())\nprint(\"Kurtosis of the data:\",train_data['GrLivArea'].kurt())","72166740":"for data in [train_data, test_data]:\n    data['GrLivArea_log'] = np.log(data['GrLivArea'])\n    data.drop('GrLivArea', inplace= True, axis = 1)\n    data['LotArea_log'] = np.log(data['LotArea'])\n    data.drop('LotArea', inplace= True, axis = 1)\n    \n    \n    \nnumerical_feats = train_data.dtypes[train_data.dtypes != \"object\"].index\n   ","76580a53":"sns.distplot(train_data['LotArea_log'])\nprint(\"Skewness: %f\" %train_data['LotArea_log'].skew())\nprint(\"Kurtosis: %f\" %train_data['LotArea_log'].kurt())","b956bef8":"sns.distplot(train_data['GrLivArea_log'])\nprint(\"Skewness of the data:\",train_data['GrLivArea_log'].skew())\nprint(\"Kurtosis of the data:\",train_data['GrLivArea_log'].kurt())","8e11ab67":"target = 'SalePrice_Log'","594c11fa":"## Separating Numerical and Categorical features after \"Log\" Transformation\nnumerical_features = train_data.dtypes[train_data.dtypes != \"object\"].index\ncategorical_features = train_data.dtypes[train_data.dtypes == \"object\"].index","bf37cb71":"n_rows = 12\nn_cols = 3\n\nfig,axs = plt.subplots(n_rows, n_cols, figsize = (n_cols*3.5,n_rows*3))\n\nnum_features_list = list(numerical_features)\nnot_to_plot_list = ['Id','SalePrice','SalePrice_Log']\nplot_numerical_features_list = [c for c in list(numerical_features) if c not in not_to_plot_list]\n\nfor r in range(0, n_rows):\n    for c in range(0, n_cols):\n        i = r*n_cols + c\n        if i < len(plot_numerical_features_list):\n            sns.regplot(train_data[plot_numerical_features_list[i]], train_data[target], ax = axs[r][c])\n            stp = ss.pearsonr(train_data[plot_numerical_features_list[i]], train_data[target])\n            str_title = \"r = \" + \"{0:.2f}\".format(stp[0]) + \" \" \"p = \" + \"{0:.2f}\".format(stp[1])\n            axs[r][c].set_title(str_title, fontsize = 11)\n\nplt.tight_layout()\nplt.show()","2ba1219f":"for cat in list(categorical_features):\n    print(train_data[cat].value_counts())\n    print('#'*50)","169e4ebb":"cat_features_list = list(categorical_features)\nn_rows = 15\nn_cols = 3\n\nfig, axs = plt.subplots(n_rows, n_cols, figsize = (n_cols * 4, n_rows * 3))\n\nfor r in range(0, n_rows):\n    for c in range(0, n_cols):\n        i = r * n_cols + c\n        if i < len(cat_features_list):\n            sns.boxplot(x = cat_features_list[i], y = target, data = train_data, ax = axs[r][c])\n\nplt.tight_layout()\nplt.show()","3f9962aa":"#correlation matrix\ncorrmat = train_data.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","ee366387":"<font color='blue'><h2 style = 'background:LightGray'> Checking the Distribution of Target Data <\/h2><\/font>","f47b3fd1":"<font color='blue'><h2 style = 'background:LightGray'> Statistical Test  <\/h2><\/font>","c335fdae":"### Key Finding:\n#### The above plot is showing that the SalePrice is Normally Distributed\n#### and the Data is Moderately Skewed which we can consider while implemeting the Regression Modeling","9e1d8c94":"<font color='blue'><h2 style = 'background:LightGray'> Understanding the Data <\/h2><\/font>","a09e4eff":"![housing_price.jpg](attachment:housing_price.jpg)","e3412bdf":"<font color='blue'><h2 style = 'background:LightGray'> Analysing the Categorical and Numerical Features <\/h2><\/font>","59fa2df0":"### Key Findings:\n#### Based on the above plot the Sale Price is highly skewed which indicates that the data is not normally distributed\n#### Which will mislead the result in Regression.","05cd2c85":"## --- Please if you like my work, do upvote !! More additions are coming... Stay Tuned!!","622d56cc":"<font color='blue'><h2 style = 'background:LightGray'> Correlations<\/h2><\/font>","d62dacc2":"#### References:\n\n1. https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n2. https:\/\/www.kaggle.com\/dejavu23\/house-prices-eda-to-ml-beginner\n3. https:\/\/www.kaggle.com\/kabure\/houseprices-pipeline-featuretools-tpot\n","d8779351":"#### List of Categorical features and their unique values","744df879":"<font color='blue'><h2 align = 'center' style = 'background:LightGray'> Quick Navigation <\/h2><\/font>\n\n#### [1. Dataset Overview](#1)\n#### [2. Statistical Test](#2)\n#### [3. Handling Missing Values](#2)\n#### [4. Univariate and Multivariate Feature Visulaizations - To Understand the Data Better](#4)\n#### [5. Features Exploration](#5)\n#### [6. Modelling](#6)\n#### [7. References](#7)","40c91266":"<font color='blue'><h2 style = 'background:LightGray'> Missing Values <\/h2><\/font>","c4da4b43":"<font color='blue'><h1 align = 'center'> Housing Price Prediction EDA <\/h1><\/font>\n\n<h3>About this Competition<\/h3>\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","0194e20d":"#### Numerical features Analysis","1a7f9612":"<font color='blue'><h2 style = 'background:LightGray'> Relation between dependent(Sale Price) varibales and independent variables <\/h2><\/font>"}}