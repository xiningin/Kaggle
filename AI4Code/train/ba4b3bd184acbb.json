{"cell_type":{"1f961f98":"code","37c26dd7":"code","13c9fb8f":"code","044a7b8d":"code","d07f17cd":"code","6304e776":"code","da66947c":"code","a8ff2f74":"code","dca85c96":"code","d5e342d0":"code","5e05d92b":"code","089af3ae":"code","f4e45c7a":"code","14efa1f0":"code","9c125af9":"code","8a8dce51":"code","3c5c8ef1":"code","295ccf1a":"code","b1cc6ae7":"code","790991a0":"code","b568abde":"code","d5055101":"code","0a7b259b":"code","49113154":"code","b8e56148":"code","dd45eafe":"code","7ad152aa":"code","3d5d42ac":"code","39079e9f":"code","51b83774":"code","a58854bd":"code","4e5e7b12":"code","a2ce4305":"code","bd1d6e72":"code","89631156":"code","bc23159b":"code","1009fe4d":"code","65a6286b":"code","44f67efe":"code","6d420ccf":"code","fb3ecdb3":"code","2ec0a9e7":"code","df051f49":"code","402dbd3b":"code","a6ad2d51":"code","027f73e9":"code","42a8dc11":"code","c04601b2":"code","c88858d7":"code","019bc322":"code","be189a56":"code","dfe72efd":"code","e123098c":"code","fb49da98":"code","a1dd90f0":"code","33a4d009":"code","c681d48f":"code","aa5dbab4":"code","b7d52b20":"code","738a2e67":"code","d74cfa96":"code","7f7bafd0":"code","9d0a096e":"code","9a51628e":"code","f1ccd543":"code","dbda7f14":"code","9587b73e":"code","2df8015b":"code","0351665f":"markdown","5ef31e01":"markdown","04a4d936":"markdown","bbd7db86":"markdown","96f3731b":"markdown","f917f416":"markdown","b48d4f29":"markdown","5b77ee9c":"markdown","93312304":"markdown","31af4554":"markdown","30d9b716":"markdown","53fdfb56":"markdown","ac3d2e70":"markdown","5062ebee":"markdown","a7e7c45d":"markdown","6f7e3922":"markdown","63492969":"markdown","cfa8473e":"markdown","1ce6bb93":"markdown","9eea859f":"markdown","462220da":"markdown","e1ff2cf1":"markdown","04658d6f":"markdown","0991c6d6":"markdown","de0d673e":"markdown","bf3805d6":"markdown","4f48a507":"markdown","bd808561":"markdown","347f04b5":"markdown","0836417f":"markdown","70db51fe":"markdown","fab175ee":"markdown","df58c573":"markdown","8fd87611":"markdown","f361f136":"markdown","50539032":"markdown","5fe4d264":"markdown","08c5e7a7":"markdown","2f69462e":"markdown","873ea2cb":"markdown","854b2ceb":"markdown","56a1ac08":"markdown","dd521d07":"markdown","e0f9d6e2":"markdown","3b22762a":"markdown","60161565":"markdown","23ab082e":"markdown","eb49579a":"markdown","cb019e84":"markdown","68ccf745":"markdown","b9076ecb":"markdown","cd2816f8":"markdown","c332b1d1":"markdown","341ff981":"markdown","4729d2f2":"markdown","a26d0a83":"markdown","38c6f077":"markdown","85bca632":"markdown","52a54d8a":"markdown","72ae1b59":"markdown","3d852db9":"markdown","ded30e8e":"markdown","807d7594":"markdown","7d4222b6":"markdown","d99c8bc2":"markdown"},"source":{"1f961f98":"import pandas as pd","37c26dd7":"df = pd.DataFrame(columns=['A', 'B', 'C'])\nprint(df)\ndf","13c9fb8f":"df = pd.DataFrame(columns=['A','B','C'], index=['W', 'X','Y','Z'])\ndf","044a7b8d":"data=[\n    [\"A\",1,3],\n    [\"B\",6,8],\n    [\"C\",3,4],\n    [\"D\",9,12],]\ndf = pd.DataFrame(data)\ndf","d07f17cd":"data={\n    \"Name\":[\"John\",\"Jo\",\"Sam\",\"April\"],\n    \"Year\":[\"Senior\",\"Junior\",\"Freshman\",\"Junior\"],\n    \"GPA\":[3.5,3.0,4.0,3.8]\n}\ndf = pd.DataFrame(data)\ndf","6304e776":"data=[\n    {\"Name\":\"John\",\"GPA\":3.5},\n    {},\n    {\"Name\":\"Jo\",\"Year\":\"Junior\",\"Job\":\"Waiter\",\"GPA\":3.0},\n    {\"Name\":\"Sam\",\"Job\":\"Data Analyst\",\"GPA\":4.0},\n    {\"Name\":\"April\",\"Year\":\"Junior\",\"GPA\":3.8}]\ndf = pd.DataFrame(data)\ndf","da66947c":"apps = pd.read_table(\"..\/input\/google-play-store-apps\/googleplaystore.csv\",delimiter=',')\napps.head()","a8ff2f74":"app_reviews = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")\napp_reviews.head()","dca85c96":"df = pd.read_html(\"https:\/\/en.wikipedia.org\/wiki\/List_of_countries_by_population_(United_Nations)\")\ndf[0].head()","d5e342d0":"app_reviews.head()[[\"App\"]]","5e05d92b":"app_reviews.head()[[\"Sentiment\",\"Sentiment_Polarity\",\"Sentiment_Subjectivity\"]]","089af3ae":"bools = app_reviews[\"Sentiment\"]==\"Positive\"\nprint(bools)\napp_reviews[bools]","f4e45c7a":"app_reviews[app_reviews[\"Sentiment\"]==\"Positive\"]\n","14efa1f0":"apps[apps.index==1057]","9c125af9":"apps.loc[[1057]]","8a8dce51":"app_reviews.loc[:,[\"App\"]]","3c5c8ef1":"apps.loc[1057:1060]","295ccf1a":"df = pd.DataFrame(columns=['Name','Year','GPA'])\ndf.loc[0]=[\"John\",\"Senior\",3.5]\ndf.loc[1]=[\"Jo\",\"Junior\",3.0]\ndf.loc['a']=[\"Sam\",\"Freshman\",4.0]\ndf.loc['b']=[\"April\",\"Junior\",3.8]\ndf.loc['x','GPA']=4.0\ndf.loc['x','Year']=\"Freshman\"\ndf","b1cc6ae7":"df.iloc[4,0]=[\"Alex\"]\ndf","790991a0":"df.iloc[5]=[\"James\",\"Senior\",1.0]","b568abde":"print(\"App DataFrame Summary:\")\nprint(apps.dtypes)\nprint(apps.shape)","d5055101":"print(\"App Reviews DataFrame Summary:\")\nprint(app_reviews.dtypes)\nprint(app_reviews.shape)","0a7b259b":"def floatTest(df, column):\n    '''\n    input:\n        df: DataFrame to test\n        column: string of column name to be tested\n    '''\n    # Test to make sure column is actually a column in df\n    if column in df:\n        try:\n            # Loop over elements of the column and try to turn them into a float\n            for i in df[column]:\n                x=i\n                float(i)\n            print(\"Casting \"+column+\" to float is possible\")\n        except ValueError:\n            # If an error occurs while trying to convert to a float, print the value that caused the error\n            print(\"First non-float value in the \" + column +\" column: \"+ x)\n    else:\n        print(column+\" is not a column in the DataFrame provided\")","49113154":"floatTest(apps,\"Reviews\")\nfloatTest(apps,\"Price\")","b8e56148":"def uniqueTable(df):\n    '''\n    input:\n        df: DataFrame \n    output:\n        DataFrame with datatype and number of unique values per column\n    '''\n    # Create empty DataFrame with 2 columns: \"Data Type\" and \"Unique Values\"\n    uniques = pd.DataFrame(columns=[\"Data Type\", \"Unique Values\"])\n    for i in df.columns:\n        # Add the datatype and number of unique values to the DataFrame as a row indexed with the column name\n        uniques.loc[i] = [df[i].dtype,df[i].nunique()]\n    return uniques","dd45eafe":"print(\"Number of unique values in each column of apps DataFrame:\")\nuniqueTable(apps)","7ad152aa":"print(\"Number of unique values in each column of app_reviews DataFrame:\")\nuniqueTable(app_reviews)","3d5d42ac":"floatTest(apps,\"Price\")","39079e9f":"apps[\"Price\"] = apps[\"Price\"].replace('\\$', '', regex=True)","51b83774":"floatTest(apps,\"Price\")","a58854bd":"apps[apps[\"Price\"]==\"Everyone\"]","4e5e7b12":"apps.loc[10472,\"Rating\":\"Android Ver\"] = apps.loc[10472,\"Category\":\"Current Ver\"].to_numpy()\napps.loc[10472,\"Category\"] = None\napps.loc[[10472]]","a2ce4305":"floatTest(apps,\"Price\")\nfloatTest(apps,\"Reviews\")","bd1d6e72":"print(\"Memory usage of Apps DataFrame before cast: \" + str(apps.memory_usage().sum()))","89631156":"casts = {\n    \"Category\":\"category\",\n    \"Rating\":\"float64\",\n    \"Reviews\":\"float64\",\n    \"Installs\":\"category\",\n    \"Type\":\"category\",\n    \"Price\": \"float64\",\n    \"Content Rating\":\"category\",\n    \"Genres\":\"category\",\n    \"Android Ver\":\"category\"}\napps = apps.astype(casts)\napps.dtypes","bc23159b":"print(\"Memory usage of Apps Data after cast: \" + str(apps.memory_usage().sum()))","1009fe4d":"print(\"Memory usage of Sentiment Column before cast: \" + str(app_reviews[\"Sentiment\"].memory_usage()) + '\\n')\napp_reviews = app_reviews.astype({\"Sentiment\":'category'})\nprint(\"Memory usage of Sentiment Column after cast: \" + str(app_reviews[\"Sentiment\"].memory_usage())+'\\n')\napp_reviews.dtypes","65a6286b":"def nulls(df):\n    '''\n    input:\n        df: DataFrame \n    '''\n    # Loop over columns\n    for col in df.columns:\n        # Print the column name and number number of null values in it\n        n=df[df[col].isna()]\n        print(str(col)+\" : \"+str(len(n)))","44f67efe":"nulls(apps)","6d420ccf":"apps.dropna(subset=[\"Category\",\"Type\",\"Genres\",\"Current Ver\",\"Android Ver\"],inplace=True)","fb3ecdb3":"apps_with_rating=apps.dropna()","2ec0a9e7":"nulls(apps)","df051f49":"nulls(apps_with_rating)","402dbd3b":"nulls(app_reviews)","a6ad2d51":"app_reviews.dropna(inplace=True)","027f73e9":"apps.to_csv(\"googleplaystoreclean.csv\",mode='w',compression='zip')","42a8dc11":"apps_with_rating.to_hdf(\"appdata.hd5\",key='ratings',mode='w',format='table')\napp_reviews.to_hdf(\"appdata.hd5\",key='reviews',format='table')","c04601b2":"df1 = pd.DataFrame([\n    [0,1,2],\n    [1,2,3],\n    [2,3,4]])\ndf2 = pd.DataFrame([\n    [4,5,6],\n    [6,7,8],\n    [8,9,10]])\ndf3 = pd.DataFrame([\n    [11,12,13],\n    [13,14,15],\n    [15,16,17]])","c88858d7":"pd.concat([df1,df2,df3],axis=1,ignore_index=True)","019bc322":"pd.concat([df1,df2,df3],axis=0,keys=[\"A\",\"B\",\"C\"])","be189a56":"df1.append([df2,df3],ignore_index=True)","dfe72efd":"data1 = {\n    \"Student\":[\"John\",\"Chris\",\"James\"],\n    \"Class\":[\"A\",\"A\",\"C\"],\n    \"Midterm_Grade\":[50,60,80],\n    \"Final\":[60,60,80],\n}\ndata2 = {\n    \"Class\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\n    \"Student Average\":[77,88,99,87,78],\n}\ndf1 = pd.DataFrame(data1)\ndf2 = pd.DataFrame(data2)\n\nprint(df1)\nprint(df2)","e123098c":"pd.merge(left=df1,right=df2,left_on=\"Class\",right_on=\"Class\",how=\"outer\",validate=\"m:1\")","fb49da98":"df1.set_index(\"Class\").join(df2.set_index(\"Class\"),how=\"outer\")","a1dd90f0":"df = pd.read_csv(\"googleplaystoreclean.csv\",index_col=[0],compression='zip',usecols=[\"Category\",\"Price\"])","33a4d009":"category_avg_price = df.groupby(by=[\"Category\"],axis='index').mean()\ncategory_avg_price","c681d48f":"sorted_avg_price = category_avg_price.sort_values(by=[\"Price\"],axis='index',ascending=False)\nsorted_avg_price","aa5dbab4":"analysis1 = sorted_avg_price.iloc[0:5]  # identical to sorted_avg_price.head()\nanalysis1","b7d52b20":"pd.read_csv(\"googleplaystoreclean.csv\",index_col=[0],usecols=[\"Category\",\"Price\"],compression='zip').groupby(by=[\"Category\"],axis='index').mean().sort_values(by=[\"Price\"],axis='index',ascending=False).iloc[0:5]","738a2e67":"analysis1.to_html(\"Top5MostExpensiveCategories.html\")","d74cfa96":"rating = pd.read_hdf(\"appdata.hd5\",key=\"ratings\",columns=[\"App\",\"Rating\"])\nreview = pd.read_hdf(\"appdata.hd5\",key=\"reviews\",columns=[\"App\",\"Sentiment\"])","7f7bafd0":"rating = rating[rating[\"Rating\"]>=4.5]","9d0a096e":"review[\"Sentiment\"].dtypes","9a51628e":"review.replace({\"Positive\":1,\"Neutral\":0,\"Negative\":-1},inplace=True)","f1ccd543":"rating_review = rating.merge(right=review,how=\"inner\",left_on=\"App\",right_on=\"App\")\nrating_review","dbda7f14":"analysis2 = rating_review.groupby(by=\"App\",sort=False).mean().sort_values(by=[\"Sentiment\",\"Rating\"],ascending=False)\nanalysis2","9587b73e":"analysis2_pivot = rating_review.pivot_table(index=\"App\").sort_values(by=[\"Sentiment\",\"Rating\"],ascending=False)\nanalysis2_pivot.eq(analysis2).all()","2df8015b":"analysis2.to_hdf(\"appdata.hd5\",key='analysis')","0351665f":"The analysis results can be written to an html file.","5ef31e01":"# Accessing Data\n\nNow that we have covered how to get data into a DataFrame, we need to understand how to access data within a DataFrame\n\n### Basic Indexing\n\nThis indexing method is the most convenient when looking to access a specific column or list of columns.","04a4d936":"***","bbd7db86":"Sweet! It looks like our fixes worked!","96f3731b":"Next we can group by Category and take the mean of each.\n\nThe `groupby` method is an essential DataFrame tool that is used quite often.","f917f416":"We can see that there are 10,841 different apps and a total of 64,295 reviews.\n\nThe `app` DataFrame has 13 columns, the `app_reviews` DataFrame has 5 and all the columns have either an `object` or `float64` datatype.\n\nHowever, some of the columns of the app data such as Reviews and Price were assigned to the `object` datatype when they appeared to be numerical.\n\nLet's figure out why:","b48d4f29":"There are many other options for storage formats and optional parameters that can be explored [here](https:\/\/pandas.pydata.org\/docs\/reference\/frame.html#serialization-io-conversion).","5b77ee9c":"And output the top 5.","93312304":"It looks like one of the values in the Price column is `Everyone` which definitly does not seem right.\n\nWe can use boolean indexing to find the culprit row.","31af4554":"### Boolean Indexing\n\nWith boolean indexing denoted by square brackets, a subset of rows is returned based on a series of True\/False values the same length.\n\nThis is very useful to extract rows that meet a certain criteria.","30d9b716":"Then we can merge the DataFrames to have all the necessary information in one DataFrame.","53fdfb56":"Since each step uses a method based on the datatype returned by the prior step, an identical analysis can also be done in one line.","ac3d2e70":"\nHowever, this cannot be used to add new rows to the DataFrame","5062ebee":"### Removing Null Values\n\nThe next cleaning process to undertake is to remove null values.\n\nFirst we use the `isna` method to count the null values in each column to see how we should address them.","a7e7c45d":"#### HTML\n\nAnother practical datasource is an HTML file.\n\nThe `read_html` method will extract a list of tables from within an HTML source like a URL.\n\nThe tables found within the webpage are returned as a list.","6f7e3922":"***","63492969":"### Reading Data\n\nThough more often than not, data comes from external sources.\n\nThere are a few different input methods to create DataFrames from specific types of sources\n\n#### Flat Files\n\nFlat files include text or csv files that use a delimiter to seperate the columns.\n\nCommonly used methods are `read_table` which assumes a tab delimiter while `read_csv` assumes a comma.\n\nThere are a plethora of optional parameters to explore when working with different datasets that can be found [here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_table.html).\n\n*Note the `.head(n=5)` method can be called on DataFrames to only show the first n rows.*","cfa8473e":"# Analysis\n\nWe will walk through two examples of useful analyses that can be performed on the cleaned data.\n\n### Most Expensive Category\n\nThis first analysis will find the 5 app categories with the highest average price.\n\nWe can start reading from the compressed csv.","1ce6bb93":"We can see that the values are shifted over by one column probably due to this app not having a Category.\n\nIt also happens that for this row the Reviews column contains the value `3.0M` which is the same issue that the `floatTest` found.\n\nLet's quickly fix it by replacing shifting the values over one column and replacing the missing Category with a null value.","9eea859f":"# Writing Data\n\nSince our data is more usable now, we should create files to save it for future access.\n\n### To CSV\n\nOur first option is to write to a csv file with the added option of compressing it to reduce storage.","462220da":"It seems that the Price has a $ character at the beginning in some cases.\n\nWe can use the `replace` method combined with regular expressions (regex) to remove the $ character.","e1ff2cf1":"Some of the columns only have a few null values so we will remove the rows containing those.\n\nHowever, the Rating column has numerous null values so we will create a seperate DataFrame with these values removed.","04658d6f":"### Join\n\nThe `join` method is for adding columns of one DataFrame to another based on index values which provides a subset of the functionality of `merge`.","0991c6d6":"### Merge\n\nThe `merge` method can be used to combine two DataFrames based on column values, similar to the SQL join function.\n\nThe `left` and `right` parameters are the respective DataFrames while the `left_on` and `right_on` parameters dictate which columns will be used for the join.","de0d673e":"Another way we could find the mean of the Sentiment grouped by App is to use the `pivot_table` method.\n\nUsing App as the index, we are selecting that as the group by variable and the default aggregation function is mean so we do not have to specify it.\n\nUsing the `eq` and `all` methods together, we can check if every cell is the same for both DataFrames. ","bf3805d6":"***","4f48a507":"Boolean indexing can also be used to select a single index and it should be noted that a DataFrame is returned.","bd808561":"Next we can use boolean indexing to select only the apps with ratings of at least 4.5.","347f04b5":"### Changing Column Types\n\nFinally we can cast the columns using the `astype` method.\n\nUsing the `memory_usage` method before and after casting the columns shows how much memory we save.","0836417f":"***","70db51fe":"***","fab175ee":"Let's retry the `floatTest` again for both columns...","df58c573":"# Data Cleaning\n\nThe next step in the data science lifecycle is to clean our data for analysis.\n\n### Modifying Values\n\nFirst we will focus on the Price column. \n\nRemember our test to find values that couldn't be converted to floats?","8fd87611":"### To HDF\n\nAnother storage format is an HDF file where we can write multiple DataFrames to the same file using a key.","f361f136":"When we try to cast the `Reviews` column to a float, we can see that `3.0M` is a value in the column.\n\nFor the `Price` column, the first non-float value we find is `$4.99`.\n\nThis is important to know and we will resolve these values before casting the columns.\n\nBefore we start the cleaning stage, we will look for columns with a low number of unique values so we can casting them to the `category` datatype. \n\nThe `category` datatype is not always the right choice, but if used correctly it can reduce memory usage, increase performance and allow for custom sorting.","50539032":"### Loc Method\n\nThe `loc` method can be used to access a single or set of specified rows and columns.","5fe4d264":"# Exploring DataFrames\n\nWith a basic understanding of DataFrames, we can start to explore them more in depth.\n\n### Overview\n\nThe first exploritory task when working with new data is to get an overall picture of it.\n\nThe `.dtypes` property shows us the datatype for each column of a DataFrame\n\nThe `.shape` property of a DataFrame returns the size as a tuple of (# of rows, # of columns)","08c5e7a7":"# Conclusion\n\nCongrats! You know enough now to perform your own analysis using Pandas!\n\nHere are some ideas for furthur analysis of this dataset to get your feet wet:\n- Find the highest rated app for each content rating\n- Which app has the largest revenue (approximately)?\n- Make a generator that outputs a random review for a given app\n\nWorking with these ideas will get you into the mindset of using Pandas, but I think you are ready to take it to the next level!\n\nThe following resources will be useful as you continue using Pandas:\n- [Datasets from Kaggle](https:\/\/www.kaggle.com\/datasets)\n- [Documentation and more Tutorials](https:\/\/pandas.pydata.org\/docs\/)\n- [Troubleshooting with Stackoverflow](https:\/\/stackoverflow.com\/questions\/tagged\/pandas)\n\nGood luck and happy coding!","2f69462e":"### Append\n\nThe `append` method can easily concatinate rows, providing a subset of the `concat` method's functionality.","873ea2cb":"### Iloc Method","854b2ceb":"#### List of Dictionaries\n\nFor more less structured data, a list of dictionaries may be more appropriate. \n\nEach dictionary represents a row and each key in the dictionary represents a column.\n\nThe dictionaries may have any number of keys and they are not required to match.","56a1ac08":"We can now find the mean of the Sentiment grouped by App.\n\nThe results will be sorted by average Sentiment score and then by Rating.","dd521d07":"Many of these rows seem to have all null values except for the app name so we will remove all rows with null values.","e0f9d6e2":"If we do not want to use the index labels, we can also access the index position using the `iloc` method.","3b22762a":"#### List of Lists\n\nWhen providing a list of lists, each internal list is interpreted as a row in the DataFrame.\n\nIt is important to note that all of the lists must be the same length for this to work.","60161565":"Now we have two DataFrames: \n\n- apps which only has null values in the Ratings column\n- apps_with_rating which has no null values","23ab082e":"### Well Liked Apps\n\nThe second analysis will determine all apps that have a rating of 4.5 or higher and rank them by Sentiment.\n\nWe can start by reading from the HDF file.","eb49579a":"Wow! The Apps DataFrame uses about half the memory after casting and the Setiment column uses about 1\/8th!","cb019e84":"# Introduction\n\nPandas is an open source Python package that can makes working with data more intuitive and faster.\n\nThe primary Pandas objects are **Series** and **DataFrames**.\n\n**Series** are 1D arrays where the elements have index labels.\n\n**DataFrames** are 2D arrays with labeled columns and indexed rows, comparable to an SQL table but with more features.\n\nThis tutorial focuses on the Pandas DataFrame, so we first need to import pandas","68ccf745":"Another convenient functionality of the `loc` method is that it can be used to add rows by creating index labels if they do not exist.","b9076ecb":"From the output, we can see that Category, Installs, Type, Content Rating, and Android Ver are all `object` datatype and have less than 50 unique values.\n\nThese columns could be stored more efficiently as a `category` datatype.","cd2816f8":"The Sentiment column only has 3 unique values so it would definitely benefit from being converted into a `category` datatype.","c332b1d1":"***","341ff981":"We can see that 23,998 of the reviews were marked as positive.\n\nThis can also be done with only one line and no extra variable","4729d2f2":"We can write the completed analysis back to the HDF file.","a26d0a83":"We can replace the Sentiment category with numerical values.","38c6f077":"Sort the results by Price in descending order.","85bca632":"Now that we solved that issue, let's retry the `floatTest` to see if there are other non-float values in the Price column.","52a54d8a":"***","72ae1b59":"***","3d852db9":"# Pandas DataFrames Tutorial\n#### By: [Dylan Manchester](http:\/\/dmanchester.info)\n\nDatasource: https:\/\/www.kaggle.com\/lava18\/google-play-store-apps","ded30e8e":"# Creating DataFrames\n\n### DataFrame Method\nSyntax: `DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)`\n\n#### No Data\n\nThe simplest way to create a DataFrame is to just provide the structure without any data.","807d7594":"# Manipulation Methods\n\nAnother important feature of Pandas DataFrames are the manipulation methods.\n\n### Concatinate\n\nThe `concat` method is for combining DataFrame either by column or by row.\n\nMultiple DataFrames can be concatinated at a time and there are many join type and indexing options.","7d4222b6":"#### Dictionary of Lists\n\nIf the lists we have represent a column rather than a row, we can use a dictionary of the lists where the key for each list becomes the column label.\n\nThis method also requires the lists to be the same length.","d99c8bc2":"***"}}