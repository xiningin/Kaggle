{"cell_type":{"50a6232b":"code","fe11faec":"code","3986fe3a":"code","516b96b0":"code","de497930":"code","db42370f":"code","19c47da1":"code","14b0af1a":"code","d51c809c":"code","b3bcef84":"code","51801b99":"code","6d683885":"code","d5397962":"code","ef4318a1":"code","9fb7ff50":"code","19b96eb2":"code","39b7d657":"markdown","e754b37e":"markdown","ecbeb422":"markdown","d0fea4eb":"markdown","0b3e39a5":"markdown","46db523f":"markdown","d4143332":"markdown","d0a0fa22":"markdown","0d9be997":"markdown","3d0d10c0":"markdown","fdecf9ff":"markdown","13f11a50":"markdown","abd9cbe4":"markdown","e249a7d4":"markdown","80243f88":"markdown","d7e3e510":"markdown","8b13a259":"markdown","a35b6365":"markdown"},"source":{"50a6232b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n%matplotlib inline","fe11faec":"train_df = pd.read_csv('..\/input\/houses_train.csv')\ntest_df = pd.read_csv('..\/input\/houses_test.csv')\nprint('Train shape:', train_df.shape)\nprint('Test shape:', test_df.shape)\n\ntrain_df.head()","3986fe3a":"train_df = train_df.drop('id', 1)\ntest_df = test_df.drop('id', 1)\n\ntrain_df.head()","516b96b0":"def get_month_and_year(date):\n    return pd.Series({'year': int(date[:4]), 'month': int(date[4:6])})\n    \ntrain_df = pd.concat([train_df, train_df['date'].apply(get_month_and_year)], 1).drop('date', 1)\ntest_df = pd.concat([test_df, test_df['date'].apply(get_month_and_year)], 1).drop('date', 1)\n\ntrain_df.head()","de497930":"def get_dates(df, min_year):\n    return df.year * 12 + df.month - min_year * 12\n\nmin_year = min(train_df.year.min(), test_df.year.min())\nplt.figure(figsize=(12, 8))\nplt.title('Month distribution starting from January {}'.format(min_year))\n\nplt.hist(get_dates(train_df, min_year), label='train')\nplt.hist(get_dates(test_df, min_year), label='test')\nplt.legend();","db42370f":"def add_coord(df):\n    x = np.cos(df.lat) * np.cos(df.long)\n    y = np.cos(df.lat) * np.sin(df.long) \n    z = np.sin(df.lat) \n    return pd.DataFrame({'x': x, 'y': y, 'z': z})\n\ntrain_df = pd.concat([train_df, add_coord(train_df)], 1).drop(['lat', 'long'], 1)\ntest_df = pd.concat([test_df, add_coord(test_df)], 1).drop(['lat', 'long'], 1)\n\ntrain_df.head()","19c47da1":"X_with_ans, y = train_df.drop('price', 1), train_df.price\nX_test = test_df\n\nX_with_ans.head()","14b0af1a":"import seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nplt.figure(figsize=(18, 6))\nplt.subplot(121)\nsns.distplot(y, fit=norm);\n\n(mu, sigma) = norm.fit(y)\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\nplt.subplot(122)\nstats.probplot(y, plot=plt)\nplt.title('Price QQ-plot');","d51c809c":"y = np.log1p(y)\n\nplt.figure(figsize=(18, 6))\nplt.subplot(121)\nsns.distplot(y, fit=norm);\n\n(mu, sigma) = norm.fit(y)\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.xlabel('Price')\nplt.ylabel('Frequency')\nplt.title('Price distribution')\n\nplt.subplot(122)\nstats.probplot(y, plot=plt)\nplt.title('Price QQ-plot');","b3bcef84":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\ndef mape_exp(y_true, y_pred):\n    y_true = np.expm1(y_true)\n    y_pred = np.expm1(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmape_scorer = make_scorer(mape_exp, greater_is_better=False)","51801b99":"from lightgbm import LGBMRegressor\n\ndef score_model(model, model_name):\n    score = cross_val_score(model, X_with_ans.values, y.values, scoring=mape_scorer, cv=3)\n    print(f'{model_name} score on folds:', -score)\n    print(f'{model_name} mean score:', -score.mean())\n    \n\nlgb = LGBMRegressor(n_jobs=-1, subsample_freq=1, subsample=0.9, colsample_bytree=0.7,\n                    n_estimators=760, num_leaves=40, random_state=42)\nscore_model(lgb, 'LightGBM')","6d683885":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_jobs=-1, colsample_bytree=0.7, max_depth=6, learning_rate=0.05,\n                   random_state=42, num_leaves=40, subsample=0.9, n_estimators=920)\nscore_model(xgb, 'XGBoost')","d5397962":"from sklearn.base import BaseEstimator, RegressorMixin, TransformerMixin, clone\nfrom sklearn.model_selection import KFold\n\nclass StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","ef4318a1":"from sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\n\nlasso = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=42))\nstack_model = StackingAveragedModels([lgb, xgb], lasso)\n\nscore_model(stack_model, 'StackModel')","9fb7ff50":"stack_model.fit(X_with_ans.values, y)\nans = np.expm1(stack_model.predict(X_test.values))\nans[:5]","19b96eb2":"ans_pd = pd.DataFrame({'index': np.arange(len(ans)) + 1, 'price': ans})\nans_pd.to_csv('submission.csv', index=False)\npd.read_csv('submission.csv').head()","39b7d657":"\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u0437\u0432\u043b\u0435\u0447\u0451\u043c \u0438\u0437 \u0434\u0430\u0442\u044b \u0433\u043e\u0434 \u0438 \u043c\u0435\u0441\u044f\u0446 (\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0443 \u0446\u0435\u043d\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u0440\u0435\u043d\u0434, \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439\n\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0434\u0430 \u0438 \u043c\u0435\u0441\u044f\u0446\u0430, \u0438 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0435\u0433\u043e \u0443\u0447\u0435\u0441\u0442\u044c):","e754b37e":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0442\u0435\u0441\u0442\u0435:","ecbeb422":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u0440\u0435\u0434\u043d\u044f\u044e\u0449\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Lasso, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0432 \u0435\u0451 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u043c \u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c.\n\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438:","d0fea4eb":"# \u0421\u043f\u0435\u0446. \u043a\u0443\u0440\u0441 \u043f\u043e \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e\n\n## \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","0b3e39a5":"**\u0412\u044b\u0432\u043e\u0434:**\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u0442\u0435\u0441\u0442 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c, \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434, \u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u0442\u0443\n\u043a\u0430\u043a \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","46db523f":"\u0423\u0434\u0430\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 **id**, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0446\u0435\u043d\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b:","d4143332":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043d\u0430 \u0442\u0440\u0451\u0445 \u0444\u043e\u043b\u0434\u0430\u0445, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e.\n\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u0435\u043c \u0442\u0430\u043a\u0436\u0435 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 MAPE, \u0442\u0430\u043a \u043a\u0430\u043a \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430:","d0a0fa22":"### \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e","0d9be997":"# \u0421\u0422\u0415\u041a\u0418\u041d\u0413","3d0d10c0":"\u0422\u0430\u043a \u043a\u0430\u043a \u043c\u0435\u0442\u0440\u0438\u043a\u0430 MSE \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u041e\u041c\u041f \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0434\u043e\u0431\u044c\u0451\u043c\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e\n\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:","fdecf9ff":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e:","13f11a50":"\u0414\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c 2 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n![](https:\/\/i.imgur.com\/QoJOTzV.jpg)","abd9cbe4":"### Feature engineering","e249a7d4":"\u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearch, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c cross\\_val\\_score \u043d\u0430 \u043d\u0438\u0445:","80243f88":"\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435:","d7e3e510":"\u0418\u0437 \u0448\u0438\u0440\u043e\u0442\u044b \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432 3D, \u0442\u0430\u043a \u043a\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f **longitude** \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0431\u043b\u0438\u0437\u043a\u043e,\n\u0447\u0442\u043e \u043f\u0440\u0435\u043f\u044f\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c\u0443 \u0438\u0441\u0442\u043e\u043b\u043a\u043e\u0432\u0430\u043d\u0438\u044e \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u0438:","8b13a259":"### Modelling","a35b6365":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435:"}}