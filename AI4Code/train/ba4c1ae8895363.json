{"cell_type":{"8b0b9435":"code","acf0851b":"code","8ede2b5c":"code","f97cde49":"code","9614e515":"code","114504ea":"code","440521e4":"code","d56faaa7":"code","15434a38":"code","149ab905":"code","914fe436":"code","30b6d3ec":"code","a32832c9":"code","c2f6832f":"code","fdc1d6a9":"code","8bd02d0f":"code","bc4d772b":"code","93ec80e6":"code","3b16695b":"code","5fbe91dc":"code","a33dea2b":"code","09f1bdd6":"code","d14f3f0e":"code","188f4560":"code","a7e45e04":"code","758f2849":"code","36d2a3a0":"code","cbda0f74":"code","3d3f70a2":"code","2dfa9e81":"code","a0b6969d":"code","20974b46":"code","91dab530":"markdown","f0bfe5e7":"markdown","a4eb2274":"markdown","daece54b":"markdown","d374508a":"markdown","bf52373c":"markdown","98981630":"markdown","4ffacc53":"markdown","d8a59c03":"markdown","03551861":"markdown","586dff51":"markdown","19ca6f96":"markdown","861e719d":"markdown"},"source":{"8b0b9435":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra # numerial arrays\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acf0851b":"\n# load data ans store in trainDF\n\ntrainDF = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n","8ede2b5c":"# Show first 5 rows with the help of head() method\ntrainDF.head()","f97cde49":"# To know numerical features here.\ntrainDF.describe()","9614e515":"# To show how many rows and null and data types\ntrainDF.info()\n\n# We can see that, there are 891 rows and 12 columns","114504ea":"\n# define function here\ndef bar_plot(column):\n    Survived = trainDF[ trainDF['Survived'] == 1 ][ column ].value_counts()\n    Dead = trainDF[ trainDF['Survived'] == 0 ][ column ].value_counts()\n    newDF = pd.DataFrame([Survived, Dead])\n    newDF.index = ['Survived', 'Dead']\n    \n    # show plot here\n    newDF.plot(kind='bar', stacked=True, figsize=( 15, 6 ))\n    ","440521e4":"# Call the bar_plot() function to show barplot\nbar_plot('Sex')\n","d56faaa7":"# Now create X and y \ncolumns = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n\n# Saperate variables\nX = trainDF[columns] # for Prediction - Dependent Variable\n\ny = trainDF['Survived'] # Indipendet Variable\ny","15434a38":"# To check how many null values and diffrent data type\nX.info()","149ab905":"# We can use this method also\nX.isnull().sum()\n\n# Here age and Embarked Missing values","914fe436":"#  For this problem we need to give some numeriac values to Age and Embarked Column","30b6d3ec":"# Fill missing values\nX['Age'] = X['Age'].fillna(X['Age'].median())\n\n\nX['Embarked'] = X.fillna(X['Embarked'].value_counts().index[0])\n","a32832c9":"# Import LabelEncoder here\n\nfrom sklearn.preprocessing import LabelEncoder","c2f6832f":"\n# Now, Create an Instance of LabelEncoder\nLe = LabelEncoder()\n\n# Convert and Transforming\n\n# For Sex\nX['Sex'] = Le.fit_transform(X['Sex'])\n\n# For Embarked\nX['Embarked'] = Le.fit_transform(X['Embarked'])","fdc1d6a9":"print(X.info(), \"\\n\") # Here we can see all the values are filled.\nprint(y.describe)","8bd02d0f":"# Load train_test_split method for training and testing\nfrom sklearn.model_selection import train_test_split","bc4d772b":"#  Create Training and testing Data using X and y\nX_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=.1, random_state =10)\n","93ec80e6":"# Here we are using XGBoost Library.\n\nfrom xgboost import XGBClassifier","3b16695b":"# creating instance\nclassify = XGBClassifier(colsample_bylevel=.9,\n                        colsample_bytree=.8,\n                        gamma=.99,\n                        max_depth=5,\n                        min_child_weight=1,\n                        n_estimators=10,\n                        nthread=10\n                        )","5fbe91dc":"# Model Fitting.\nclassify.fit(X_train, y_train)\n","a33dea2b":"score_is =classify.score(X_test, y_test)\nprint(\"Score is\", score_is * 100)","09f1bdd6":"# Load Testing data\ntestDF = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# show fist five rows\ntestDF.head()","d14f3f0e":"# Test data\ntest_X = testDF[columns]\ntest_X.head()","188f4560":"# Fill missing values\ntest_X['Age'] = test_X['Age'].fillna(test_X['Age'].median())\ntest_X['Embarked'] = test_X.fillna(test_X['Embarked'].value_counts().index[0])\n","a7e45e04":"# Convert and Transforming\n\n# For Sex\ntest_X['Sex'] = Le.fit_transform(test_X['Sex'])\n\n# For Embarked\ntest_X['Embarked'] = Le.fit_transform(test_X['Embarked'])","758f2849":"from sklearn.ensemble import RandomForestClassifier","36d2a3a0":"\n# Try new features\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\ny = trainDF[\"Survived\"]\n\nX = pd.get_dummies(trainDF[features])\nX_test = pd.get_dummies(trainDF[features])","cbda0f74":"# Create and fit the model\nmodel = RandomForestClassifier(n_estimators=100)\n\nmodel.fit(X, y)\n\nprint(model.score(X_test, y) *100)\n\n# Predict the Random Forest Model\npredictions = model.predict(X_test)\n\n# print(\"Score\", predictions.score_)","3d3f70a2":"\noutputRFM = pd.DataFrame({'PassengerId': trainDF.PassengerId, 'Survived': predictions})\noutputRFM.to_csv('RandomForestClassifier_19-10.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2dfa9e81":"\nprediction = classify.predict(test_X)\n","a0b6969d":"#  Now create Output DataFrame\n\ndict = { 'PassengerId' : testDF['PassengerId'],\n       'Survived' : prediction\n       }\n\noutputXGB = pd.DataFrame(dict)\n\n# outputDF.head()","20974b46":"outputXGB.to_csv('my_submission_XGB.csv', index=False)\noutputXGB\n","91dab530":"** First of all create a function to show bar plot for diffrent column wise..","f0bfe5e7":"# Data Analysis","a4eb2274":"## A little bit of information about catagorical values.\n\n**Variable Notes**\n\n**Pclass**: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\n**Age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n**SibSp**: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n**Parch**: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them.","daece54b":"# Final Predictions","d374508a":"\nFor Catagorical values, We need to convert into numerical values\n\nSo, with can use LabelEncode method here,\n","bf52373c":"# Load The Data from Input directory","98981630":"* Applying RandomForestClassifier","4ffacc53":"# Final Submission","d8a59c03":"--- \n---\n\n<div class=\"text-center\">\n    <h1>That's it Guys,<\/h1>\n    <h1>\ud83d\ude4f<\/h1>\n    \n        \n        I Hope you guys you like and enjoy it, and learn something interesting things from this notebook, \n        \n        Even I learn a lots of things while I'm creating this notebook\n    \n        Keep Learning,\n        Regards,\n        Vikas Ukani.\n    \n<\/div>\n\n---\n---\n\n<img src=\"https:\/\/static.wixstatic.com\/media\/3592ed_5453a1ea302b4c4588413007ac4fcb93~mv2.gif\" align=\"center\" alt=\"Thank You\" style=\"min-height:20%; max-height:20%\" width=\"90%\" \/>\n\n","03551861":"# Data Visualization","586dff51":"# Train and Test the Filterd Data.\n","19ca6f96":"* Applying XGBClassifier","861e719d":"# Testing Prediction"}}