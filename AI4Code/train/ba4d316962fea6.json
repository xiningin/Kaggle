{"cell_type":{"4e3c2d5e":"code","603704df":"code","e6b8be40":"code","9c2497f1":"code","cc482623":"code","f3dd74cb":"code","e3a815e4":"code","3559f983":"code","e811ffae":"code","85d3f045":"code","a449a6ec":"code","1da53ac9":"code","7e837786":"code","707432d1":"code","b26d198d":"code","87d270e3":"code","5c978ae0":"code","634e1a5f":"code","47a8f555":"code","6fb20200":"code","366a79c2":"code","8f7e2501":"code","b5bb80fa":"code","58ae414a":"code","79dfa558":"code","046d2160":"code","bab43031":"markdown","d6b3b021":"markdown","5a2f592f":"markdown","8c30e12a":"markdown","09835a66":"markdown","39d87971":"markdown","82a6f48e":"markdown","b22c645e":"markdown","88323963":"markdown"},"source":{"4e3c2d5e":"! pip install -q \/kaggle\/input\/readability\/readability-0.3.1-py3-none-any.whl\nfrom textblob import TextBlob\nimport readability\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nimport pandas as pd","603704df":"train_data = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/test.csv')","e6b8be40":"train_data.info()\ntrain_data.head()","9c2497f1":"test_data.info()\ntest_data.head()","cc482623":"pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv')","f3dd74cb":"def readability_analysis(text):\n    rd = readability.getmeasures(text, lang='en')\n    return rd['readability grades']['FleschReadingEase']","e3a815e4":"def length_analysis_words(text):\n    return len(text.split())","3559f983":"def length_analysis_chars(text):\n    return len(text)","e811ffae":"def sentiment_analysis(text):\n    return TextBlob(text).sentiment.polarity","85d3f045":"X = pd.DataFrame(train_data['id'])\nX.loc[:,'readability'] = train_data.apply(lambda row: readability_analysis(row.excerpt), axis=1)\nX.loc[:,'len_words'] = train_data.apply(lambda row: length_analysis_words(row.excerpt), axis=1)\nX.loc[:,'len_chars'] = train_data.apply(lambda row: length_analysis_chars(row.excerpt), axis=1)\nX.loc[:,'sentiment'] = train_data.apply(lambda row: sentiment_analysis(row.excerpt), axis=1)","a449a6ec":"X.info()\nX.head()","1da53ac9":"X = X[['readability', 'len_words', 'len_chars', 'sentiment']]","7e837786":"y = train_data['target']","707432d1":"y.describe()","b26d198d":"train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)","87d270e3":"model = RandomForestRegressor(random_state=0)\ncv = RepeatedKFold(n_splits=5, n_repeats=3, random_state=0)\nspace = {'n_estimators': [100, 300, 1000, 3000, 10000],\n        'max_depth': [3, 10, 30, 100, 300, 1000]}\nsearch = GridSearchCV(model, space, cv=cv, scoring='neg_root_mean_squared_error', n_jobs=-1)\nresult = search.fit(train_X, train_y)","5c978ae0":"print(result.best_score_)\nprint(result.best_params_)","634e1a5f":"model = RandomForestRegressor(random_state=0, n_estimators=result.best_params_['n_estimators'], max_depth=result.best_params_['max_depth'])\n\nmodel.fit(train_X, train_y)","47a8f555":"train_preds = model.predict(train_X)\nmean_squared_error(train_y, train_preds)","6fb20200":"val_preds = model.predict(val_X)\nmean_squared_error(val_y, val_preds)","366a79c2":"X_test = pd.DataFrame(test_data['id'])\nX_test.loc[:,'readability'] = test_data.apply(lambda row: readability_analysis(row.excerpt), axis=1)\nX_test.loc[:,'len_words'] = test_data.apply(lambda row: length_analysis_words(row.excerpt), axis=1)\nX_test.loc[:,'len_chars'] = test_data.apply(lambda row: length_analysis_chars(row.excerpt), axis=1)\nX_test.loc[:,'sentiment'] = test_data.apply(lambda row: sentiment_analysis(row.excerpt), axis=1)","8f7e2501":"X_test.info()\nX_test.head()","b5bb80fa":"val_preds = model.predict(X_test[['readability', 'len_words', 'len_chars', 'sentiment']])","58ae414a":"solution = pd.DataFrame(X_test['id'])\nsolution.loc[:, 'target'] = val_preds","79dfa558":"solution.info()","046d2160":"solution.to_csv('submission.csv', index=False)","bab43031":"In this notebook, I try to solve the [CommonLit Readability Prize](https:\/\/www.kaggle.com\/c\/commonlitreadabilityprize\/overview) competition using [Random Forest](https:\/\/en.wikipedia.org\/wiki\/Random_forest).\n\nI have created a similar model using [Decision Tree](https:\/\/en.wikipedia.org\/wiki\/Decision_tree) which got a score of 0.941. The notebook for that model is [here](https:\/\/www.kaggle.com\/aniketsharma00411\/commonlit-readability-decision-tree).\n\nI will extract the following features from the excerpts to train the Random Forest model.\n- Readability\n- Length\n- Sentiment\n\nFor my next approach, I will try extracting more features to gather more insights from the excerpts.","d6b3b021":"\n\nI am using the [readability Python package](https:\/\/pypi.org\/project\/readability\/) to evaluate readability of each excerpt and [textblob](https:\/\/pypi.org\/project\/textblob\/) for sentiment analysis.\n","5a2f592f":"# Evaluating the result","8c30e12a":"# Training","09835a66":"# Functions","39d87971":"# Creating features for test set and predicting results","82a6f48e":"Using Grid Search to find the optimal values of hyperparameters.","b22c645e":"# Initialization","88323963":"# Creating Features"}}