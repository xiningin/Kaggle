{"cell_type":{"0267c013":"code","319838a7":"code","29379d2b":"code","ce0dd1e7":"code","50217602":"code","4de117c3":"code","75ebb792":"code","86bddaf7":"code","adb0ee6f":"code","bc8aee41":"code","61a74f58":"code","3fe18434":"code","5c53eb27":"code","9d416fb6":"code","8bc57c5e":"code","a21fe5a3":"code","ebd0380a":"code","3e6cb3c2":"code","1cdd02a6":"code","54de2d69":"code","42c43673":"code","b9eee8c0":"code","94108e66":"code","a1a39fe8":"code","e3fe0fb5":"code","d56e2c3e":"code","a16e886e":"code","dfa595c8":"code","17225d87":"code","cbb43310":"code","326eca83":"code","32dc3d03":"code","2af23f6d":"code","60a52ee1":"code","ed58130e":"code","81482e84":"code","d34ddf10":"code","0efabcfd":"code","f8499844":"code","4bba42d2":"code","e28bc440":"code","d49bf7d1":"markdown","ae9c5768":"markdown","8ff5768e":"markdown","5b93af12":"markdown","2e9d7662":"markdown","f2eea96b":"markdown","9ee328a0":"markdown","c9e5935f":"markdown","bff684d8":"markdown","6a7a7de3":"markdown","baf76a7a":"markdown","78d342f4":"markdown","94453884":"markdown","6430a7b2":"markdown","2e794960":"markdown","66084caf":"markdown","9f18f01f":"markdown","9cbbe8fd":"markdown","f05c2324":"markdown","add90d86":"markdown","f49febc4":"markdown","76c3f72c":"markdown","7bed543f":"markdown","1fd3e07e":"markdown","52dddfe2":"markdown","8295e338":"markdown","032a1066":"markdown","2ac5e922":"markdown","3fd325cd":"markdown","fe55ef04":"markdown","b6fa2ac4":"markdown","197cc883":"markdown","9a5a119c":"markdown","c09ecf31":"markdown","b4e11558":"markdown","bccf3540":"markdown","d1062422":"markdown","48284d3f":"markdown"},"source":{"0267c013":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","319838a7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","29379d2b":"df_pgen1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\ndf_sen1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")\ndf_pgen2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\")\ndf_sen2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv\")","ce0dd1e7":"plt.rcParams['figure.figsize'] = [8, 4]\nplt.rcParams['figure.dpi'] = 100","50217602":"df_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute","4de117c3":"df_sen1['DATE_TIME'] = pd.to_datetime(df_sen1['DATE_TIME'],format = '%Y-%m-%d %H:%M')\ndf_sen1['DATE'] = df_sen1['DATE_TIME'].apply(lambda x:x.date())\ndf_sen1['TIME'] = df_sen1['DATE_TIME'].apply(lambda x:x.time())\ndf_sen1['DATE'] = pd.to_datetime(df_sen1['DATE'],format = '%Y-%m-%d')\ndf_sen1['HOUR'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.hour\ndf_sen1['MINUTES'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.minute","75ebb792":"df_pgen2['DATE_TIME'] = pd.to_datetime(df_pgen2['DATE_TIME'],format = '%Y-%m-%d %H:%M')\ndf_pgen2['DATE'] = df_pgen2['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen2['TIME'] = df_pgen2['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen2['DATE'] = pd.to_datetime(df_pgen2['DATE'],format = '%Y-%m-%d')\ndf_pgen2['HOUR'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen2['MINUTES'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.minute","86bddaf7":"df_sen2['DATE_TIME'] = pd.to_datetime(df_sen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_sen2['DATE'] = df_sen1['DATE_TIME'].apply(lambda x:x.date())\ndf_sen2['TIME'] = df_sen1['DATE_TIME'].apply(lambda x:x.time())\ndf_sen2['DATE'] = pd.to_datetime(df_sen1['DATE'],format = '%Y-%m-%d')\ndf_sen2['HOUR'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.hour\ndf_sen2['MINUTES'] = pd.to_datetime(df_sen1['TIME'],format='%H:%M:%S').dt.minute","adb0ee6f":"print(\"The Mean of 'DAILY_YIELD' over the dataset 'Plant_1_Generation_Data' is\",df_pgen1['DAILY_YIELD'].mean())","bc8aee41":"df_pgen1.plot('DATE','DAILY_YIELD', kind = 'line');","61a74f58":"print(\"The Mean of 'DAILY_YIELD' over the dataset 'Plant_2_Generation_Data' is\",df_pgen2['DAILY_YIELD'].mean())","3fe18434":"df_pgen2.plot('DATE','DAILY_YIELD', kind = 'line');","5c53eb27":"print(\"Total IRRADIATION per day is :\")\nprint(df_sen1.groupby(['DATE']).sum()['IRRADIATION'])","9d416fb6":"df_sen1.groupby(['SOURCE_KEY']).plot('HOUR','IRRADIATION', kind = 'box');","8bc57c5e":"print(\"Total IRRADIATION per day is :\")\nprint(df_sen2.groupby(['DATE']).sum()['IRRADIATION'])","a21fe5a3":"df_sen2.groupby(['SOURCE_KEY']).plot('HOUR','IRRADIATION', kind = 'box');","ebd0380a":"print('Max. Ambient Temperature is :',df_sen1['AMBIENT_TEMPERATURE'].max())\nprint('Max. Module Temperature is :',df_sen1['MODULE_TEMPERATURE'].max())","3e6cb3c2":"df_sen1.groupby(['SOURCE_KEY']).plot('AMBIENT_TEMPERATURE','MODULE_TEMPERATURE', kind = 'scatter');","1cdd02a6":"print('Max. Ambient Temperature is :',df_sen2['AMBIENT_TEMPERATURE'].max())\nprint('Max. Module Temperature is :',df_sen2['MODULE_TEMPERATURE'].max())","54de2d69":"df_sen2.groupby(['SOURCE_KEY']).plot('AMBIENT_TEMPERATURE','MODULE_TEMPERATURE', kind = 'scatter');","42c43673":"print(\"The number of Inverters in Plant 1 are :\",len(df_pgen1['SOURCE_KEY'].unique()))\nprint(\"The number of Inverters in Plant 2 are :\",len(df_pgen2['SOURCE_KEY'].unique()))","b9eee8c0":"df_pgen1.groupby('DATE').max('DC_POWER')['DC_POWER']","94108e66":"df_pgen1.groupby('DATE').min('DC_POWER')['DC_POWER']","a1a39fe8":"df_pgen2.groupby('DATE').max('DC_POWER')['DC_POWER']","e3fe0fb5":"df_pgen1.groupby('DATE').min('DC_POWER')['DC_POWER']","d56e2c3e":"df_pgen1.groupby('DATE').max('AC_POWER')['AC_POWER']","a16e886e":"df_pgen1.groupby('DATE').min('AC_POWER')['AC_POWER']","dfa595c8":"df_pgen2.groupby('DATE').max('AC_POWER')['AC_POWER']","17225d87":"df_pgen2.groupby('DATE').min('AC_POWER')['AC_POWER']","cbb43310":"df_pgen1.groupby(\"SOURCE_KEY\").max('DC_POWER').max()","326eca83":"df=df_pgen1.groupby(\"SOURCE_KEY\").max('DC_POWER')['DC_POWER']\ndf.plot()\nplt.xticks(rotation=45)","32dc3d03":"df_pgen2.groupby(\"SOURCE_KEY\").max('DC_POWER').max()","2af23f6d":"df=df_pgen2.groupby(\"SOURCE_KEY\").max('DC_POWER')['DC_POWER']\ndf.plot()\nplt.xticks(rotation=45)","60a52ee1":"df_pgen1.groupby('SOURCE_KEY').max().sort_values(by=['DC_POWER'],ascending=False)['DC_POWER']","ed58130e":"df_pgen1.groupby('SOURCE_KEY').max().sort_values(by=['AC_POWER'],ascending=False)['AC_POWER']","81482e84":"df_pgen2.groupby('SOURCE_KEY').max().sort_values(by=['DC_POWER'],ascending=False)['DC_POWER']","d34ddf10":"df_pgen2.groupby('SOURCE_KEY').max().sort_values(by=['AC_POWER'],ascending=False)['AC_POWER']","0efabcfd":"print('The number of rows with missing values are :',sum(df_pgen1.isnull().values.any(axis=1)))\nprint('Rows with empty values are :')\nprint(df_pgen1[df_pgen1.isnull().any(axis=1)])","f8499844":"print('The number of rows with missing values are :',sum(df_sen1.isnull().values.any(axis=1)))\nprint('Rows with empty values are :')\nprint(df_sen1[df_sen1.isnull().any(axis=1)])","4bba42d2":"print('The number of rows with missing values are :',sum(df_pgen2.isnull().values.any(axis=1)))\nprint('Rows with empty values are :')\nprint(df_pgen2[df_pgen2.isnull().any(axis=1)])","e28bc440":"print('The number of rows with missing values are :',sum(df_sen2.isnull().values.any(axis=1)))\nprint('Rows with empty values are :')\nprint(df_sen2[df_sen2.isnull().any(axis=1)])","d49bf7d1":"# **Ranking the inverters based on the DC\/AC power they produce :**","ae9c5768":"# **Importing Necessary Libraries**","8ff5768e":"# **Which inverter (source_key) has produced maximum DC\/AC power?**","5b93af12":"# **How many inverters are there for each plant?**","2e9d7662":"# **What is the mean value of daily yield?**","f2eea96b":"Generator","9ee328a0":"# Plant 1","c9e5935f":"# Plant 1 ","bff684d8":"Power Generation Data - Plant 2","6a7a7de3":"# Plant 2","baf76a7a":"# Plant 2","78d342f4":"# **Is there any missing data?**","94453884":"# Plant 2","6430a7b2":"# Plant 2","2e794960":"# Plant 1","66084caf":"DC Power","9f18f01f":"Sensor","9cbbe8fd":"# Plant 1","f05c2324":"Sensor","add90d86":"Weather Sensor Data - Plant 2","f49febc4":"AC Power","76c3f72c":"Power Generation Data - Plant 1","7bed543f":"# **What is the max ambient and module temperature?**","1fd3e07e":"Weather Sensor Data - Plant 1","52dddfe2":"# Plant 2","8295e338":"# Plant 1","032a1066":"Generator","2ac5e922":"Max and Min each day in DC power in Plant 1","3fd325cd":"DC Power","fe55ef04":"Max and Min each day in AC power in Plant 1","b6fa2ac4":"# Plant 1","197cc883":"# **What is the total irradiation per day?**","9a5a119c":"# Plant 2","c09ecf31":"# **Cleaning Data**","b4e11558":"# **What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?**","bccf3540":"Max and Min each day in DC power in Plant 2","d1062422":"Max and Min each day in AC power in Plant 2","48284d3f":"AC Power"}}