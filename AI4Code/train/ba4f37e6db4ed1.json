{"cell_type":{"eb851530":"code","56dd9088":"code","3f26113d":"code","be8eac3b":"code","8ef87559":"code","289f7ce0":"code","b435e503":"code","6f04e462":"code","7cc68ee6":"code","9d9856da":"code","b042c999":"code","410d59dc":"code","c75af942":"code","4266c54b":"code","c5a95465":"code","bec01f13":"code","b577c1c9":"code","54ecbea9":"code","0dfe4046":"code","d75e1c22":"code","7a9a89e6":"code","82c20386":"code","b71902e2":"code","912f321f":"code","259b4eaa":"code","72236527":"code","1a96bc5e":"code","3af53d76":"code","b3c4f24f":"code","f229a3ac":"code","06ea1d6f":"code","05278cf8":"code","39926a24":"code","2fbe104f":"code","f471f61a":"code","5eb4ca1f":"code","a6722d37":"code","08813956":"code","1525d481":"code","72b97630":"markdown","f195da08":"markdown","26814d3f":"markdown","2e1ad04a":"markdown","d9ae93e0":"markdown","f6476f5f":"markdown","96990550":"markdown","a893593c":"markdown","49f2fa6b":"markdown","8138324d":"markdown","08bd43a6":"markdown","32051083":"markdown","a0799437":"markdown","c8604b2a":"markdown","14d24f88":"markdown","f204b734":"markdown","7b8eb69a":"markdown","8e2969b8":"markdown","9dd4226f":"markdown"},"source":{"eb851530":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56dd9088":"DATA_DIR = '\/kaggle\/input\/ds-masters-default-prediction\/'\ntrain = pd.read_csv(DATA_DIR + 'default_train.csv')\ntest = pd.read_csv(DATA_DIR + 'default_test.csv')\ntrain.head()","3f26113d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","be8eac3b":"print('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430:',train.shape)\nprint('\u0421\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435:',len(train.columns))\nprint('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439:','\\n',train.loan_default.value_counts(normalize=True))\nprint('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430')\ntrain.head()","8ef87559":"print('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430:',test.shape)\nprint('\u0421\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435:',len(test.columns))\nprint('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430')\ntest.set_index('id',inplace=True)\ntest.head()","289f7ce0":"train.isnull().sum()\/train.shape[0]*100","b435e503":"train['Employment.Type'].value_counts()","6f04e462":"train['Employment.Type'].fillna('Unknown', inplace = True)\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043c\u0435\u043d\u044b ():',train['Employment.Type'].isnull().sum())","7cc68ee6":"test['Employment.Type'].fillna('Unknown', inplace = True)\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043c\u0435\u043d\u044b ():',test['Employment.Type'].isnull().sum())","9d9856da":"train.dtypes","b042c999":"train.select_dtypes(include='object')","410d59dc":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\ntrain['Date.of.Birth'] = pd.to_datetime(train['Date.of.Birth'],errors = 'coerce')\n# \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\ntrain['Year_of_birth'] = train['Date.of.Birth'].dt.year","c75af942":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\ntest['Date.of.Birth'] = pd.to_datetime(test['Date.of.Birth'],errors = 'coerce')\n# \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f\ntest['Year_of_birth'] = test['Date.of.Birth'].dt.year","4266c54b":"train['Year_of_birth'].hist()","c5a95465":"train.loc[train['Year_of_birth']>2000,'Year_of_birth'].value_counts()","bec01f13":"train.loc[train['Year_of_birth']>2020,'Year_of_birth'] = train.loc[train['Year_of_birth']>2020,'Year_of_birth'].astype('str').str.replace('20','19')\ntrain['Year_of_birth'] = train['Year_of_birth'].astype('int')","b577c1c9":"test.loc[test['Year_of_birth']>2020,'Year_of_birth'] = test.loc[test['Year_of_birth']>2020,'Year_of_birth'].astype('str').str.replace('20','19')\ntest['Year_of_birth'] = test['Year_of_birth'].astype('int')","54ecbea9":"train['Year_of_birth'].hist()","0dfe4046":"train['DisbursalDate'] = pd.to_datetime(train['DisbursalDate'],errors = 'coerce')\nprint('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0434\u044b \u0432\u044b\u043f\u043b\u0430\u0442 train',train['DisbursalDate'].dt.year.value_counts())\n\ntest['DisbursalDate'] = pd.to_datetime(test['DisbursalDate'],errors = 'coerce')\nprint('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0434\u044b \u0432\u044b\u043f\u043b\u0430\u0442 test',test['DisbursalDate'].dt.year.value_counts())","d75e1c22":"train['DisbursalMonth'] = train['DisbursalDate'].dt.month\n\ntest['DisbursalMonth'] = test['DisbursalDate'].dt.month\n\ntrain['DisbursalMonth'].hist()","7a9a89e6":"import re\n#\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430\ntrain['AVERAGE.ACCT.AGE'] = train['AVERAGE.ACCT.AGE'].apply(lambda x: (re.sub('[a-z]','',x)).split())\n#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ntrain['AVERAGE.ACCT.AGE']= train['AVERAGE.ACCT.AGE'].apply(lambda x: int(x[0])*12+int(x[1]))\n\n#\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430\ntest['AVERAGE.ACCT.AGE'] = test['AVERAGE.ACCT.AGE'].apply(lambda x: (re.sub('[a-z]','',x)).split())\n#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ntest['AVERAGE.ACCT.AGE']= test['AVERAGE.ACCT.AGE'].apply(lambda x: int(x[0])*12+int(x[1]))\n\ntrain['AVERAGE.ACCT.AGE'].head()","82c20386":"#\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430\ntrain['CREDIT.HISTORY.LENGTH'] = train['CREDIT.HISTORY.LENGTH'].apply(lambda x: (re.sub('[a-z]','',x)).split())\n#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ntrain['CREDIT.HISTORY.LENGTH']= train['CREDIT.HISTORY.LENGTH'].apply(lambda x: int(x[0])*12+int(x[1]))\n\n#\u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430\ntest['CREDIT.HISTORY.LENGTH'] = test['CREDIT.HISTORY.LENGTH'].apply(lambda x: (re.sub('[a-z]','',x)).split())\n#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ntest['CREDIT.HISTORY.LENGTH']= test['CREDIT.HISTORY.LENGTH'].apply(lambda x: int(x[0])*12+int(x[1]))\n\n\n#\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ntrain['CREDIT.HISTORY.LENGTH'].head()","b71902e2":"train['PERFORM_CNS.SCORE.DESCRIPTION'].value_counts()","912f321f":"train['PERFORM_CNS.SCORE'].value_counts()","259b4eaa":"train['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('No Bureau History Available', 'NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Sufficient History Not Available', 'NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Not Enough Info available on the customer', 'NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: No Activity seen on the customer (Inactive)','NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: No Updates available in last 36 months', 'NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Only a Guarantor', 'NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: More than 50 active Accounts found','NO')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('M-Very High Risk', 'Very High Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('L-Very High Risk', 'Very High Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('K-High Risk', 'High Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('J-High Risk', 'High Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('I-Medium Risk', 'Medium Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('H-Medium Risk', 'Medium Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('G-Low Risk', 'Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('F-Low Risk', 'Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('E-Low Risk', 'Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('D-Very Low Risk', 'Very Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('C-Very Low Risk', 'Very Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('B-Very Low Risk', 'Very Low Risk')\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'] = train['PERFORM_CNS.SCORE.DESCRIPTION'].replace('A-Very Low Risk', 'Very Low Risk')\n\n# checing the values in bureau score\ntrain['PERFORM_CNS.SCORE.DESCRIPTION'].value_counts()","72236527":"test['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('No Bureau History Available', 'NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Sufficient History Not Available', 'NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Not Enough Info available on the customer', 'NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: No Activity seen on the customer (Inactive)','NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: No Updates available in last 36 months', 'NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: Only a Guarantor', 'NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('Not Scored: More than 50 active Accounts found','NO')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('M-Very High Risk', 'Very High Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('L-Very High Risk', 'Very High Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('K-High Risk', 'High Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('J-High Risk', 'High Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('I-Medium Risk', 'Medium Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('H-Medium Risk', 'Medium Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('G-Low Risk', 'Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('F-Low Risk', 'Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('E-Low Risk', 'Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('D-Very Low Risk', 'Very Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('C-Very Low Risk', 'Very Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('B-Very Low Risk', 'Very Low Risk')\ntest['PERFORM_CNS.SCORE.DESCRIPTION'] = test['PERFORM_CNS.SCORE.DESCRIPTION'].replace('A-Very Low Risk', 'Very Low Risk')\n\n# checing the values in bureau score\ntest['PERFORM_CNS.SCORE.DESCRIPTION'].value_counts()\n","1a96bc5e":"matrix = train.corr() \nf, ax = plt.subplots(figsize=(30, 18)) \nsns.heatmap(matrix, vmax=1.5, square=True,annot=True, fmt=\".1f\",cmap=\"BuPu\")\nplt.show()","3af53d76":"train=train.drop(['supplier_id','Current_pincode_ID','branch_id','MobileNo_Avl_Flag',\n                  'manufacturer_id', 'State_ID', 'Employee_code_ID','VoterID_flag', 'Date.of.Birth', 'DisbursalDate',\n                  'PRI.DISBURSED.AMOUNT', 'disbursed_amount','PRI.NO.OF.ACCTS','SEC.NO.OF.ACCTS','SEC.SANCTIONED.AMOUNT',\n                  'SEC.DISBURSED.AMOUNT','PRI.ACTIVE.ACCTS','PERFORM_CNS.SCORE'], axis=1) \n\ntest=test.drop(['supplier_id','Current_pincode_ID','branch_id','MobileNo_Avl_Flag',\n                  'manufacturer_id', 'State_ID', 'Employee_code_ID','VoterID_flag', 'Date.of.Birth', 'DisbursalDate',\n                  'PRI.DISBURSED.AMOUNT', 'disbursed_amount','PRI.NO.OF.ACCTS','SEC.NO.OF.ACCTS','SEC.SANCTIONED.AMOUNT',\n                  'SEC.DISBURSED.AMOUNT','PRI.ACTIVE.ACCTS','PERFORM_CNS.SCORE'], axis=1) ","b3c4f24f":"train = pd.get_dummies(train,columns=['Employment.Type','PERFORM_CNS.SCORE.DESCRIPTION'],drop_first=True)\n\ntest = pd.get_dummies(test,columns=['Employment.Type','PERFORM_CNS.SCORE.DESCRIPTION'],drop_first=True)","f229a3ac":"X,y=train.drop('loan_default',axis=1),train['loan_default']\n","06ea1d6f":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,f1_score\n\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.3,random_state = 10,shuffle=True)","05278cf8":"\nfrom imblearn.over_sampling import SMOTE\n\n\nsm = SMOTE(random_state=10)\nX_train_res, y_train_res = sm.fit_sample(X_train, y_train.ravel())","39926a24":"from imblearn.ensemble import BalancedRandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\n\nRf = BalancedRandomForestClassifier(max_depth=4,verbose=True,random_state=10)\nRf.fit(X_train_res, y_train_res.ravel())\ny_pred = Rf.predict(X_val)\n\nprint(classification_report(y_val,y_pred))\nprint('Random Forest AUC ROC Score: {}'.format(roc_auc_score(y_val,y_pred)))\nprint('Random Forest Accuracy Score test: {}'.format(accuracy_score(y_val,y_pred)))","2fbe104f":"from sklearn.ensemble import  RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\n\nRf2 = RandomForestClassifier(max_depth=4,verbose=True,random_state=10)\nRf2.fit(X_train_res, y_train_res.ravel())\ny_pred = Rf2.predict(X_val)\n\nprint(classification_report(y_val,y_pred))\nprint('Random Forest AUC ROC Score: {}'.format(roc_auc_score(y_val,y_pred)))\nprint('Random Forest Accuracy Score: {}'.format(accuracy_score(y_val,y_pred)))","f471f61a":"import numpy as np\n#categorical features\ncategorical_features_indices = np.where(X_train.dtypes =='object')[0]\ncategorical_features_indices\n\nfrom catboost import CatBoostClassifier\n\n\nm=CatBoostClassifier(n_estimators=1000,random_state=10,eval_metric='AUC',max_depth=6,od_wait=50\n                     ,l2_leaf_reg=5,cat_features=categorical_features_indices,random_strength=100,\n                     use_best_model=True)\nm.fit(X_train,y_train,eval_set=[(X_train,y_train),(X_val, y_val)], early_stopping_rounds=100,verbose=100)\np2=m.predict(X_val)\np2\nprint(classification_report(y_val,p2))\nroc_auc_score(y_val,p2)\nprint('Catboost AUC ROC Score: {}'.format(roc_auc_score(y_val,p2)))\nprint('Catboost Forest Accuracy Score: {}'.format(accuracy_score(y_val,p2)))","5eb4ca1f":"from sklearn.ensemble import GradientBoostingClassifier\n\nRf = GradientBoostingClassifier(max_depth=4,verbose=True,random_state=10)\nRf.fit(X_train_res, y_train_res.ravel())\ny_pred = Rf.predict(X_val)\n\nprint(classification_report(y_val,y_pred))\nprint('GradientBoosting AUC ROC Score: {}'.format(roc_auc_score(y_val,y_pred)))\nprint('GradientBoosting Accuracy Score: {}'.format(accuracy_score(y_val,y_pred)))","a6722d37":"from xgboost import XGBClassifier\nxgb1 = XGBClassifier()\nxgb1.fit(X_train_res,y_train_res.ravel())\ny_pred = xgb1.predict(X_val)\nprint(\"ROC AUC Score: {}\".format(roc_auc_score(y_val,y_pred)))\nprint(\"Accuracy Score: {}\".format(accuracy_score(y_val,y_pred)))","08813956":"\nsample_submission = pd.read_csv(DATA_DIR +'default_sample_submission.csv')\nsample_submission['loan_default'] = m.predict(test)\nsample_submission.to_csv('submission00.csv', index=False)","1525d481":"test['loan_default'] = m.predict(test)\nf_d.to_csv(r'submission90.csv',index=True)","72b97630":"\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0430\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:\n\nPRI Sanctioned Amount & **PRI Disbursed Amount**. (1.0)\\\n**PRI No. of Accts** & PRI Active Accts. (0.8)\\\n**SEC. No. of Accts** & SEC.Active Accts. (1.0)\\\nSEC. Current Balance & **SEC Sanctioned Amount**. (0.9)\\\nSEC. Current Balance & **SEC. Disbursed Amount**. (0.9)\\\n**SEC Sanctioned Amount** & **SEC. Disbursed Amount**. (1.0)\\\nAdhar_flag & **VoterID_flag**. (-0.9)\\\nNew Accts in last 6 months & **PRI Active Accts**.(0.7)\\\n**Disbursed_Amount** & Asset_cost.(0.7)\n\n\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u044b bold \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435","f195da08":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438","26814d3f":"## RandomForestClassifier\n","2e1ad04a":"## XGBOOST","d9ae93e0":"\u041c\u043e\u0436\u043d\u043e:\n    1. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u0434\u0443\n    2. \u0418\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043d\u043e \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0443\u0442\u0435\u0440\u044f\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044f \u043c\u0438\u043d\u043e\u0440\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 1\n    3. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 3\u0439 \u043a\u0430\u0442\u043e\u0433\u0435\u0440\u0438\u0435\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 'unknown'","f6476f5f":"## Catboost","96990550":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c SMOTE \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","a893593c":"\u041f\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u0433\u043e\u0434\u043e\u043c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0440\u0448\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e. \u0422\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e\n\u041c\u043e\u0436\u043d\u043e:\n1. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u043c\u043e\u0434\u0443\n2. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 21 \u0432\u0435\u043a \u0432 \u044d\u0442\u0438\u0445 \u0434\u0430\u0442\u0430\u0445 \u043d\u0430 20\n\n\u0412\u044b\u0431\u0438\u0440\u0430\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e 2","49f2fa6b":"## BalancedRandomForestClassifier","8138324d":"# 2. DisbursalDate - \u0433\u043e\u0434\u044b \u0432\u044b\u043f\u043b\u0430\u0442","08bd43a6":"## GradientBoostingClassifier","32051083":"## 3. AVERAGE.ACCT.AG\n\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 AVERAGE.ACCT.AG \u0432 \u043c\u0435\u0441\u044f\u0446\u044b","a0799437":"## 1. Date.of.Birth","c8604b2a":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f catboostom","14d24f88":"3% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Employment.Type. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u0440\u0438\u0440\u043e\u0434\u0443.","f204b734":"# 4. CREDIT.HISTORY.LENGTH\n\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 CREDIT.HISTORY.LENGTH \u0432 \u043c\u0435\u0441\u044f\u0446\u044b","7b8eb69a":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","8e2969b8":"##  5.PERFORM_CNS.SCORE.DESCRIPTION","9dd4226f":"\u0412\u0441\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b \u0432 2018 \u0433\u043e\u0434\u0443. \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043c \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0432\u044b\u043f\u043b\u0430\u0442\u0430"}}