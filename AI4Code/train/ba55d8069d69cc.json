{"cell_type":{"a0ff972f":"code","c0b11506":"code","506c758c":"code","e486a881":"code","505bcf94":"code","d510e1fe":"code","d0e771e9":"code","ad20a6cc":"code","f3bc9d0a":"code","95d6e1ba":"code","f0ccada0":"code","32fbb2ff":"code","85d701aa":"code","ba7ec772":"code","a287c033":"code","014da976":"code","5b19717d":"code","2554873e":"code","089fdafe":"code","74f41ac3":"code","1c026041":"code","a0ef5420":"code","5e5fca83":"code","50360ce6":"code","694afb08":"code","fc412881":"code","651623a0":"code","b52d8f87":"code","309aded9":"code","7e393030":"code","1e66fae1":"code","851c00b3":"code","af44202b":"code","0d7d0c32":"code","925e5760":"code","72972a51":"markdown","85fd7f06":"markdown","d4392d76":"markdown","d2f4a0e2":"markdown"},"source":{"a0ff972f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0b11506":"import numpy as np\nimport pandas as pd \nimport os\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","506c758c":"from sklearn import preprocessing\nimport xgboost as xgb\n\nprint(\"XGBoost version:\", xgb.__version__)","e486a881":"import janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set","505bcf94":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","d510e1fe":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(example_test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","d0e771e9":"train.head()","ad20a6cc":"\ntrain = train[train['weight'] != 0]\n\ntrain['action'] = ((train['weight'].values * train['resp'].values) > 0).astype('int')\n\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = train.loc[:, 'action']\n","f3bc9d0a":"X_train = X_train.fillna(-999)","95d6e1ba":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import learning_curve,StratifiedKFold","f0ccada0":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, stratify=y_train,random_state=42)","32fbb2ff":"# The training part taked from here https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s\n\nclf = xgb.XGBClassifier(\n    n_estimators=500,\n    max_depth=11,\n    learning_rate=0.05,\n    subsample=0.9,\n    colsample_bytree=0.7,\n    missing=-999,\n    random_state=2020,\n    tree_method='gpu_hist'  # THE MAGICAL PARAMETER\n)","85d701aa":"%time clf.fit(X_train, y_train)","ba7ec772":"y_pred=clf.predict(X_test)","a287c033":"#Accuracy on test split\nclf.score(X_test, y_test)","014da976":"#Accracy on train split\nclf.score(X_train, y_train)","5b19717d":"target_names = ['Yes', 'No']\nprint(classification_report(y_test, y_pred, target_names=target_names))","2554873e":"print('ROC-AUC:',round(roc_auc_score(y_test,y_pred),4))","089fdafe":"import seaborn as sns          \n# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred).T\ncm = cm.astype('float')\/cm.sum(axis=0)\nax = sns.heatmap(cm, annot=True, cmap='Blues');\nax.set_xlabel('True Label',size=12)\nax.set_ylabel('Predicted Label',size=12)","74f41ac3":"clf = LogisticRegression(random_state=0,penalty='l2').fit(X_train, y_train)\n\n","1c026041":"y_pred=clf.predict(X_test)","a0ef5420":"#Accuracy on test split\nclf.score(X_test, y_test)","5e5fca83":"#Accracy on train split\nclf.score(X_train, y_train)","50360ce6":"target_names = ['Yes', 'No']\nprint(classification_report(y_test, y_pred, target_names=target_names))","694afb08":"print('ROC-AUC:',round(roc_auc_score(y_test,y_pred),4))","fc412881":"import seaborn as sns          \n# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred).T\ncm = cm.astype('float')\/cm.sum(axis=0)\nax = sns.heatmap(cm, annot=True, cmap='Blues');\nax.set_xlabel('True Label',size=12)\nax.set_ylabel('Predicted Label',size=12)","651623a0":"from sklearn import tree","b52d8f87":"clf = tree.DecisionTreeClassifier()","309aded9":"clf.fit(X_train, y_train)","7e393030":"y_pred=clf.predict(X_test)","1e66fae1":"clf.score(X_test, y_test)","851c00b3":"\n\nclf.score(X_train, y_train)\n\n","af44202b":"target_names = ['Yes', 'No']\nprint(classification_report(y_test, y_pred, target_names=target_names))","0d7d0c32":"print('ROC-AUC:',round(roc_auc_score(y_test,y_pred),4))","925e5760":"# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred).T\ncm = cm.astype('float')\/cm.sum(axis=0)\nax = sns.heatmap(cm, annot=True, cmap='Blues');\nax.set_xlabel('True Label',size=12)\nax.set_ylabel('Predicted Label',size=12)","72972a51":"# Decision Tree Classifier","85fd7f06":"# **LogisticRegression**","d4392d76":"# XGBoost Classifier","d2f4a0e2":"# Data loading"}}