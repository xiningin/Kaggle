{"cell_type":{"e096d11d":"code","c1f02adf":"code","225be610":"code","917e46f1":"code","f6184701":"code","278c0f32":"code","e0cdc751":"code","918c6434":"code","fd6c1668":"code","31f47dc2":"code","bf8202b1":"code","02c6f65a":"code","1ab09fa7":"markdown","4a3832eb":"markdown","686ada4e":"markdown","a964fa25":"markdown","f856d42a":"markdown","1fd31305":"markdown","ed786e11":"markdown","4c8e7c98":"markdown","7c552831":"markdown"},"source":{"e096d11d":"import pandas as pd\nimport numpy as np\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize ","c1f02adf":"data=pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","225be610":"data.head()","917e46f1":"data=data[['title','description']]","f6184701":"data.head()","278c0f32":"data['description']=data['description'].fillna('')","e0cdc751":"def rem_stopwords_tokenize(data,name):\n      \n    def getting(sen):\n        example_sent = sen\n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n\n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n\n        filtered_sentence = [] \n\n        for w in word_tokens: \n            if w not in stop_words: \n                filtered_sentence.append(w) \n        return filtered_sentence\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x","918c6434":"rem_stopwords_tokenize(data,'description')","fd6c1668":"data.head()","31f47dc2":"freq_dic={}\nfor i in data.description:\n    for j in i:\n        if j not in freq_dic:\n            freq_dic[j]=1\n        else:\n            freq_dic[j]+=1","bf8202b1":"def set_rec_finder(na,number):\n    def intersection(lst1, lst2): \n        return list(set(lst1) & set(lst2)) \n    def find_rec(name):\n        x=list(data[data['title']==name]['description'].values)[0]\n        score=[]\n        for i in range(len(data)):\n            inter=intersection(x,data['description'].values[i])\n            sc=0\n            for pp in inter:\n                sc+=freq_dic[pp]\n            score.append([sc,data['title'].values[i]])\n        return score\n    recommendations=find_rec(na)\n    recommendations.sort(reverse=True)\n    recommendations=np.array(recommendations)\n    ans=recommendations[:number,1]\n    for i in ans:\n        print(i)","02c6f65a":"# Enter the movie name and the top n recommendations !!\nset_rec_finder('Kabir Singh',10)","1ab09fa7":"# Making Set Recommendation Function","4a3832eb":"Making a recommendation system just using description :)","686ada4e":"# Having a look at the updated data","a964fa25":"# Having First Look At The Data","f856d42a":"# Adding frequency score dictionary for description","1fd31305":"# Importing Packages","ed786e11":"# Making some changes :)","4c8e7c98":"Frequency score dictionary will contain the score of all the words in description . The score is based on the number of times the word occurs . The more number of times the word occurs it will be given less attention at the end ....","7c552831":"# Starting with the Recommendation System"}}