{"cell_type":{"94fd1540":"code","ace1cbff":"code","dc20f691":"code","6d401269":"code","b3db7c8b":"code","22043044":"code","ffd2845a":"code","21d533f1":"code","28853b83":"code","c680c12f":"code","c28611d9":"code","99c216a7":"code","7ef3a728":"code","e0c2092e":"code","213de8ee":"code","e976fea8":"code","d2867ec2":"code","1c9fd2c3":"code","3d6035eb":"code","0037159a":"code","6835928d":"code","a913a543":"code","88bfa515":"code","e9206fe4":"code","370c5f54":"code","0d07d88d":"code","02cb4a3c":"code","5de01afa":"code","8eb0de8f":"markdown"},"source":{"94fd1540":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ace1cbff":"t_data= pd.read_csv('\/kaggle\/input\/titanic\/train.csv',index_col='PassengerId')\nt_data.head()","dc20f691":"t_data","6d401269":"t_data.drop(columns=['Name','Ticket','Fare','Cabin'],inplace=True)","b3db7c8b":"t_data.columns","22043044":"for col in range(len( t_data.columns)):\n    print (t_data[t_data.columns[col]].value_counts())","ffd2845a":"t_data.isna().sum()","21d533f1":"t_data.Age.mean()","28853b83":"np.std(t_data.Age)","c680c12f":"t_data.Age.value_counts().mode()","c28611d9":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","99c216a7":"t_data","7ef3a728":"target_col=\"Survived\"\ny = t_data[target_col]\nX = t_data[['Pclass','Sex','Age','SibSp','Parch','Embarked']]\n\nX = pd.get_dummies(X)\n#X_test = pd.get_dummies(test_data[features])\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y)\nval_X\n","e0c2092e":"cols_with_missing = [col for col in train_X.columns  if train_X[col].isnull().any()]\nred_X_train=train_X.drop(columns=cols_with_missing)\nred_X_val=val_X.drop(columns=cols_with_missing)","213de8ee":"def get_accuracy (n_estimators,max_depth,train_X, val_X, train_y, val_y):\n    model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth ,random_state=1)\n    model.fit(train_X,train_y)\n    preds = model.predict(val_X)\n    lr_accuracy = accuracy_score(val_y,preds)\n    return lr_accuracy","e976fea8":"accuracy=get_accuracy(200,10,red_X_train,red_X_val,train_y,val_y)\nprint(\"Validation accurcy for Random Forest Model: {}\".format(accuracy))","d2867ec2":"from sklearn.impute import SimpleImputer\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(train_X))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(val_X))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns =train_X.columns\nimputed_X_valid.columns = val_X.columns\n\n","1c9fd2c3":"accuracy=get_accuracy(1000,10,imputed_X_train,imputed_X_valid,train_y,val_y)\nprint(\"Validation accurcy for Random Forest Model: {}\".format(accuracy))","3d6035eb":"max_accur=.5\nmax_dep=0\nbest_tree_size=0\nfor maxDepth in range(1,11):  \n    for i in range(10,101,10):\n        accuracy=get_accuracy(i,maxDepth,imputed_X_train,imputed_X_valid,train_y,val_y)\n        if accuracy>max_accur:\n            max_accur=accuracy\n            max_dep=maxDepth\n            best_tree_size=i\nprint(\"max accuracy = {}     max depth={}      best tree size={}\".format(max_accur,max_dep,best_tree_size))","0037159a":"max_accur=.5\nmax_dep=0\nbest_tree_size=0\nfor maxDepth in range(1,11):  \n    for i in range(10,101,10):\n        accuracy=get_accuracy(i,maxDepth,red_X_train,red_X_val,train_y,val_y)\n        if accuracy>max_accur:\n            max_accur=accuracy\n            max_dep=maxDepth\n            best_tree_size=i\nprint(\"max accuracy = {}     max depth={}      best tree size={}\".format(max_accur,max_dep,best_tree_size))","6835928d":"pd.get_dummies(df, prefix=['col1', 'col2'])","a913a543":"accuracy=get_accuracy(60,4,red_X_train,red_X_val,train_y,val_y)\naccuracy","88bfa515":"test_data= pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.info()\n","e9206fe4":"test_data","370c5f54":"model = RandomForestClassifier(n_estimators=60, max_depth=10 ,random_state=1)\nmodel.fit(imputed_X_train,train_y)\npreds = model.predict(imputed_X_valid)\nmodel_accuracy = accuracy_score(val_y,preds)\nprint(\"Accarany = {}:\".format(model_accuracy))","0d07d88d":"test=test_data[['Pclass','Sex','Age','SibSp','Parch','Embarked']]\nfinal_X_test = pd.get_dummies(test)\n\nX_test.info()","02cb4a3c":"final_X_test = pd.DataFrame(my_imputer.transform(final_X_test))","5de01afa":"\npredictions = model.predict(final_X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n'''output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")'''","8eb0de8f":"# **Built Final Model**"}}