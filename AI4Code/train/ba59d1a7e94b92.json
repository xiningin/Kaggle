{"cell_type":{"f7a30312":"code","1a83c79a":"code","81f3cd7c":"code","7f47aebc":"code","4ded9556":"code","b96750a9":"code","d760e33a":"code","731533bf":"code","225b9363":"code","51777047":"code","4e805760":"code","9d9ba433":"code","80c1d18a":"code","0abfb7e6":"code","1f40a59e":"code","d297509d":"code","d81e704d":"code","47968928":"code","e763a4eb":"code","4c64f7ea":"code","227005df":"code","9d8116d0":"code","833a0210":"code","a8fe6b8c":"code","09fd762a":"code","157307f1":"code","245cf4c0":"code","d971c7ec":"code","cab030e3":"code","21940f9b":"markdown","30519672":"markdown","81a387a1":"markdown","a7feaf13":"markdown","a0e671bf":"markdown"},"source":{"f7a30312":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # data visualization\n\n%matplotlib inline","1a83c79a":"# Import the train csv file\nbike_df = pd.read_csv('\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/train.csv')\n\n# Shape of the dataset\nbike_df.shape","81f3cd7c":"# Read the first five rows of dataset\nbike_df.head()","7f47aebc":"# Get info about dataset\nbike_df.info()","4ded9556":"# Check for missing values in dataset\nbike_df.isnull().sum()","b96750a9":"# drop duplicate data instances if any\nprint('bike_df shape with duplicates' , bike_df.shape)\n\nbike_df = bike_df.drop_duplicates()\nprint('bike_df shape after drop duplicates' , bike_df.shape)","d760e33a":"bike_df = bike_df.drop(columns='ID')","731533bf":"# Create mappings for Seasons and replace\nmappings = {'Winter': 0 , 'Spring': 1, 'Summer': 2, 'Autumn': 3}                        \n\nbike_df['Seasons'] = bike_df['Seasons'].replace(mappings)\n\n# Print WeekDay\nprint(bike_df['Seasons'].unique())","225b9363":"# Convert Date type to datetime\nbike_df['Date'] = pd.to_datetime(bike_df['Date'], \n                                 infer_datetime_format = True)\n\nassert bike_df['Date'].dtype == 'datetime64[ns]'","51777047":"# Get year of Date\nbike_df['year'] = bike_df['Date'].dt.year\n\n# Print years\nprint(bike_df['year'].unique())","4e805760":"# Get month of Date\nbike_df['month'] = bike_df['Date'].dt.month\n\n# Print months\nprint(bike_df['month'].unique())","9d9ba433":"# Label the day hours to Day -> 1 and Night -> 0\nbike_df['label_day_night'] = bike_df['Hour'].apply(lambda x : 0 if (x > 20 or x < 5) else 1)\n\n# Print label_day_night\nprint(bike_df['label_day_night'].unique())","80c1d18a":"# Get WeekDay of Date\nbike_df['WeekDay'] = bike_df[\"Date\"].dt.day_name()\n\n# Print WeekDay\nprint(bike_df['WeekDay'].unique())","0abfb7e6":"# Create mappings and replace\nmappings = {'Monday': 0 , 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3,  \n            'Friday': 4, 'Saturday': 5,'Sunday': 6}                     \n\nbike_df['WeekDay'] = bike_df['WeekDay'].replace(mappings)\n\n# Print WeekDay\nprint(bike_df['WeekDay'].unique())","1f40a59e":"# Summary statistics of dataset\nbike_df.describe().T","d297509d":"# Correlation Matrix\nfig, ax = plt.subplots(figsize=(20,10))\nsns.heatmap(bike_df.corr(), vmin=-1, vmax=1, annot=True, cmap='BrBG')","d81e704d":"# Set the style to \"whitegrid\" \nfig,ax = plt.subplots(figsize=(10,5))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\") \n\n# Bar plot for seasonwise monthly distribution of counts\nsns.barplot(x='Seasons', y='y', data=bike_df, ax=ax)\nax.set_title('Seasons distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","47968928":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\") \n\n# Bar plot for weekday monthly distribution \nsns.barplot(x='month', y='y',data=bike_df[['month','y','WeekDay']], hue='WeekDay', ax=ax)\nax.set_title('Weekday monthly distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","e763a4eb":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Barplot for label_day_night distribution of counts\nsns.barplot(x='month', y='y',data=bike_df[['month','y','label_day_night']], hue='label_day_night', ax=ax)\nax.set_title('label_day_night distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","4c64f7ea":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Barplot for Holiday distribution of counts\nsns.barplot(x='Holiday',y='y',hue='Seasons', data=bike_df, ax=ax)\nax.set_title('Holidays distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","227005df":"# Calculte no. of holidays in Korea\nHolidays = bike_df.loc[bike_df['Holiday'] == 'Holiday']\nprint('Number of holidays in Korea =', Holidays.shape[0])","9d8116d0":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Bar plot for WeekDay distribution of counts\nsns.barplot(data=bike_df, x='WeekDay', y='y', hue='Seasons')\nax.set_title('WeekDays distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","833a0210":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette([\"#FF7965\"])\n\n# Solar Radiation distribution of counts\n#sns.lineplot(x=[np.sin(i) for i in bike_df[\"Solar Radiation (MJ\/m2)\"]], y=\"y\",\n           #data=bike_df, ci=None, ax=ax)\nsns.lineplot (x=\"Solar Radiation (MJ\/m2)\", y=\"y\",\n           data=bike_df, ci=None, ax=ax, color='blue')\nax.set_title('Solar Radiation distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","a8fe6b8c":"# Set the style to \"whitegrid\" \nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette([\"#FF7965\"])\n\n# Temperature distribution of counts\nsns.lineplot(x=\"Temperature(\ufffdC)\", y=\"y\",\n           data=bike_df, ci=None, ax=ax)\nax.set_title('Temperature distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","09fd762a":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette([\"#FF7965\"])\n\n# Rainfall (mm) distribution of counts\nsns.lineplot(x=\"Rainfall(mm)\", y=\"y\",\n           data=bike_df, ci=None, ax=ax)\nax.set_title('Rainfall(mm) distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","157307f1":"# Set the style to \"whitegrid\"\nfig, ax = plt.subplots(figsize=(18,8))\nsns.set_style('whitegrid')\nsns.set_palette([\"#FF7965\"])\n\n# Snowfall (cm) distribution of counts\nsns.lineplot(x=\"Snowfall (cm)\", y=\"y\",\n           data=bike_df, ci=None, ax=ax)\nax.set_title('Snowfall (cm) distribution of counts')\nax.set_ylabel('Counts')\n\n# Show plot\nplt.show()","245cf4c0":"# Check for outliers\nfig,ax = plt.subplots(figsize=(30,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Box plot for Temp_windspeed_humidity_outliers\nsns.boxplot(data=bike_df[['Temperature(\ufffdC)', 'Wind speed (m\/s)', 'Humidity(%)']], orient=\"h\")\nax.set_title('Temp_windspeed_humidity_outiers')\n\n# Show plot\nplt.show()\n","d971c7ec":"# Check for outliers\nfig,ax = plt.subplots(figsize=(20,5))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Box plot for Visibility_outiers\nsns.boxplot(data=bike_df[['Visibility (10m)']], orient=\"h\")\nax.set_title('Visibility_outiers')\n\n# Show plot\nplt.show()\n","cab030e3":"# Check for outliers\nfig,ax = plt.subplots(figsize=(10,8))\nsns.set_style('whitegrid')\nsns.set_palette(\"Set3\")\n\n# Box plot for Rainfall_Snowfall_Solar Radiation_outiers\nsns.boxplot(data=bike_df[['Rainfall(mm)', 'Snowfall (cm)', 'Solar Radiation (MJ\/m2)']], orient=\"h\")\nax.set_title('Rainfall_Snowfall_Solar Radiation_outiers')\n\n# Show plot\nplt.show()\n\n","21940f9b":"> *No duplicate appears in the training dataset*","30519672":"We can notice that there are only 240 rows of holidays in Korea which is very short. So, we understand that this column isn't that important.","81a387a1":"> *No missing values appears in the training dataset*","a7feaf13":"# **Exploratory Data Analysis (EDA)**","a0e671bf":"## **Data Preparation**"}}