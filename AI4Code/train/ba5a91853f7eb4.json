{"cell_type":{"7d3a71ed":"code","e7520f5c":"code","e7769763":"code","da0554b8":"code","9f195102":"code","89f9652b":"code","7cb650e1":"code","0642f65b":"code","101beb40":"code","0bdf0719":"code","bd5b1f08":"markdown","b2606113":"markdown","c8800db8":"markdown","6b93fe22":"markdown","8e8281b6":"markdown","0bcba7e4":"markdown","9b662e85":"markdown","e1a57b5a":"markdown","ea7a977d":"markdown","edc3b928":"markdown","b7bf620f":"markdown"},"source":{"7d3a71ed":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport itertools as it\n\nimport sklearn\nfrom sklearn import preprocessing\nfrom umap import UMAP\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nimport plotly.express as px","e7520f5c":"mall = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nmall.sample(10)","e7769763":"mall['Gender Numeric'] = mall['Gender'].map({'Male': -1, 'Female': 1})\nmall","da0554b8":"numeric_features = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Gender Numeric']\n\nnumeric_transformer = Pipeline(steps=[('scaler', preprocessing.MinMaxScaler())])\n\npreprocessor = ColumnTransformer(\n    transformers=[('num', numeric_transformer, numeric_features)])","9f195102":"umap = UMAP(n_components=2, random_state=2020)\npipe = Pipeline(steps=[('preprocessor', preprocessor), ('uamp', umap)])\numap_out = pipe.fit_transform(mall)","89f9652b":"sse = []\nnclusters = list(range(1,11))\nfor k in nclusters:\n    kmeans = KMeans(n_clusters=k)\n    clusters = kmeans.fit_predict(umap_out)\n    sse.append(kmeans.inertia_)\n    \nsb.pointplot(nclusters, sse).set_title('Inertia');","7cb650e1":"kmeans = KMeans(n_clusters = 6, random_state = 2020)\nclusters = kmeans.fit_predict(umap_out)","0642f65b":"df_umap = pd.DataFrame(data = umap_out, columns = ['Embedding 1', 'Embedding 2'])\ndf_clusters = pd.DataFrame(data = clusters, columns = ['Clusters']).apply(lambda x: 'C'+x.astype(str))\n\nresults = pd.concat([mall, df_umap, df_clusters], axis = 1)","101beb40":"results","0bdf0719":"fig = px.scatter(results, x = 'Embedding 1', y='Embedding 2',\n                    color= 'Clusters',\n                    hover_data = ['Age', 'Gender', 'Annual Income (k$)', 'Spending Score (1-100)'],\n                    width=600, height=600)\nfig.show()","bd5b1f08":"# Visualization and Segmentation of Mall Customer Data\n\n### In this Kernel, we visualize UMAP embeddings for the Mall Customer Dataset, and then find and describe Clusters in the embedded datapoints.","b2606113":"We can see 3 clusters, one for each gender, featuring traits such as:\n- [C4 & C5] People in their 20s with high Spending Score.\n- [C1 & C3] High income & high Spending Score, Ages 30-40.\n- [C0 & C2] Mostly older people (>40) with medium and low Spending Scores. Some outliers show young people (<25) with very low Spending Score.\n\nIf we set 4 clusters, we would end up fusing pairs of these clusters, and much of these human interpretations!","c8800db8":"### Sklearn Pipeline: MinMaxScale our features","6b93fe22":"Let's see how many clusters we would need for our efforts. For that, we calculate the inertia (residuals) for the fit of several number of clusters.","8e8281b6":"Since Gender is a binary categorical feature, we can transform it into a number for easier treatment, without losing information.","0bcba7e4":"A final thought: I believe that adding Gender as a feature to our embeddings didn't add much, since there are clear parallels between the proposed clusters. It might have been better to just set 3 clusters, and dismiss that feature. Of course, in the real world this might be a bad idea as well! (take for example, I am targeting potential customers of gender-defined apparel?)","9b662e85":"According to this result, setting more than 4 clusters does not improve the fit much more. But, as we will see later, setting 6 will be a better choice.","e1a57b5a":"# Let's see what we did!","ea7a977d":"Add clusters to a *results* dataset","edc3b928":"### Read Dataset","b7bf620f":"UMAP is an outstanding dimensionality reduction technique, which we will use to have a \"compact\" 2-D representation of our 4-D dataset."}}