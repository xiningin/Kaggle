{"cell_type":{"7b99febd":"code","ab4c24c6":"code","751f9a51":"code","3587a4e2":"code","317c2af8":"code","28acd5b8":"code","db0712bd":"code","aa7b81f3":"code","b9662cef":"code","1753d10b":"code","95245aea":"code","42b689d3":"code","134e0881":"code","d935d9cf":"code","8af2d8ca":"code","28c221cd":"code","23a0eb80":"code","fcf1308d":"code","ed42cfaf":"code","b9e84003":"code","3e3f9381":"code","70e61845":"code","fc063c93":"code","168371b9":"code","b0a886b2":"markdown","189f278f":"markdown","4c408caf":"markdown","b9f97c00":"markdown","99c1e8e5":"markdown","623599b8":"markdown","68864f57":"markdown","e37517e9":"markdown","306299d1":"markdown","ab709cbc":"markdown"},"source":{"7b99febd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab4c24c6":"df = pd.read_csv('..\/input\/unemployment-rate-aged-1564japan\/LRUN64TTJPM156S (1).csv',parse_dates=[\"DATE\"])","751f9a51":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n","3587a4e2":"#IF THERE IS ANY NULL VALUE\ndf.isnull().sum()","317c2af8":"#CHECKING DATA INFO \ndf.info()","28acd5b8":"df.iloc[0][\"DATE\"] # checking data format for an individual element","db0712bd":"#Checking if total data count is equal to the number of months between starting and ending date.\n\nprint(\"\\nDATA CHECKING : checking if total data count is equal to the number of months between starting and ending date.\")\n\n\nstarting_year=df.iloc[0][\"DATE\"].year\nstarting_month=df.iloc[0][\"DATE\"].month\n\nending_year=df.iloc[len(df)-1][\"DATE\"].year\nending_month=df.iloc[len(df)-1][\"DATE\"].month\n\ntotalmonths = ((ending_year - (starting_year+1) ) * 12 )\ntotalmonths = totalmonths + ending_month + (12-starting_month) + 1\n\nprint(\" Data starting year = {0}\\n Data starting month ={1} \\n Data ending year ={2}\\n Data ending month = {3}\\n\".format(starting_year,starting_month,ending_year,ending_month))\nprint(\" Total months = \",totalmonths)\nprint(\" Total data count\",len(df))\n\nif len(df) == totalmonths:\n    print(\" Total data count is equal to total month count.\")\nelse:\n    print(\" Data has missing monthly data, total data count should be = \",totalmonths)\n\n","aa7b81f3":"# checking if there are same year-month data exists for multiple times\n\nprint(\"\\nDATA CHECKING : checking if there are same year-month data exists for multiple times\")\n\nyear_month = [] \n\nfor index,row in df.iterrows():\n    year_month.append(str(row[\"DATE\"].year)+\"-\"+str(row[\"DATE\"].month))\n\ndf[\"YEAR-MONTH\"] = year_month\n\nprint(\"Data format after adding YEAR-MONTH column :\\n\\n\",df.head())\n\n\n\n# COUNTING GROUP BY DATA GROUPING ON YEAR-MONTH COLUMN\n\nsumof_unique_year_months = df.groupby(by=\"YEAR-MONTH\")[\"DATE\"].count().sum()\n\nif len(df) == sumof_unique_year_months:\n    print(\"\\n\\nData has no missing months or repeating year-month pair(s).\")\nelse:\n    print(\"\\n\\nData has missing months or repeating year-month pair(s)\")","b9662cef":"df.head()\ndf [\"ds\"] = df[\"DATE\"]\ndf [\"y\"] = df[\"LRUN64TTJPM156S\"]\n","1753d10b":"try:\n    df =df.drop(\"DATE\",axis=1)\n    df = df.drop(\"LRUN64TTJPM156S\",axis=1)\nexcept Exception as e:\n    print(\"ERROR\",e)","95245aea":"fig, ax = plt.subplots(figsize=(20,10))\n\nax.plot(df[\"ds\"],df[\"y\"],label='Unemployment Rate Line')\n# plt.xticks(df[\"ds\"],rotation=90)\nax.plot(df[\"ds\"],[df[\"y\"].mean()]*len(df),label='Unemployment Rate Average Line')\n\n\nax.set(xlabel='Date (monthly)', ylabel='Unemployment Rate',\n       title='Monthly Unemployment Rate (2011-03-01 to 2021-03-01)\\n SHOWING YEARLY X-LABEL')\nax.grid(True)\nplt.legend()\n\nplt.show()\n\n","42b689d3":"fig, ax = plt.subplots(figsize=(20,10))\n\nax.plot(df[\"ds\"],df[\"y\"])\nplt.xticks(df[\"ds\"],rotation=90)\n\nax.set(xlabel='Date (monthly)', ylabel='Unemployment Rate',\n       title='Monthly Unemployment Rate (2011-03-01 to 2021-03-01)\\nSHOWING ALL X-LABEL')\nax.grid(True)\nplt.show()","134e0881":"df20 = df[:20]\nfig, ax = plt.subplots(figsize=(20,10))\n\nax.plot(df20[\"ds\"],df20[\"y\"],label='Unemployment Rate Line')\nax.plot(df20[\"ds\"],[df20[\"y\"].mean()]*20,label='Unemployment Rate Average Line')\nplt.xticks(df20[\"ds\"],rotation=90)\n\n\nax.set(xlabel='Date (monthly)', ylabel='Unemployment Rate',\n       title='Monthly Unemployment Rate (2011-03-01 to 2021-03-01)\\nSHOWING FIRST 20 DATA FOR X-LABEL')\nax.grid(True)\nplt.legend()\nplt.show()","d935d9cf":"#INSTALLING FB PROPHET\n!pip install Prophet","8af2d8ca":"from prophet import Prophet","28c221cd":"print(\"TOTAL MONTHS OF DATA:\",len(df))","23a0eb80":"traindf = df[:-12]\ntestdf = df[-12:]","fcf1308d":"m = Prophet(seasonality_mode='multiplicative').fit(traindf)\n\nfuture = m.make_future_dataframe(periods=12, freq='MS')\nfcst = m.predict(future)\nfig = m.plot(fcst)","ed42cfaf":"fcst[-12:][[\"yhat\",\"ds\"]]","b9e84003":"# creating result dataframe\nresultdf = fcst[-12:][[\"yhat\",\"ds\"]]\nresultdf[\"real\"] = testdf[\"y\"]\nprint(\"RESULT DATAFRAME :\",resultdf)","3e3f9381":"# calculating mae\nresultdf[\"error\"] = abs(resultdf[\"real\"]-resultdf[\"yhat\"])\nprint(\"MAE = \",resultdf[\"error\"].mean())","70e61845":"fig, ax = plt.subplots(figsize=(20,10))\n\nax.plot(resultdf[\"ds\"],resultdf[\"real\"],label='Unemployment Rate Line Real')\nax.plot(resultdf[\"ds\"],resultdf[\"yhat\"],label='Unemployment Rate Line Prediction')\nplt.xticks(resultdf[\"ds\"],rotation=90)\n\n\nax.set(xlabel='Date (monthly)', ylabel='Unemployment Rate',\n       title='Monthly Unemployment Rate Forecast')\nax.grid(True)\nplt.legend()\nplt.show()","fc063c93":"m = Prophet(seasonality_mode='multiplicative').fit(df)\n\nfuture = m.make_future_dataframe(periods=12, freq='MS')\nfcst = m.predict(future)\nfig = m.plot(fcst)\n","168371b9":"#Plotting last 24 months .Last 12 months are prediciton result.\n\nresultdf = fcst[-24:][[\"ds\",\"yhat\"]]\nresultdf2 = df[-12:]\n\n\nfig, ax = plt.subplots(figsize=(20,10))\n\nax.plot(resultdf2[\"ds\"],resultdf2[\"y\"],label='Unemployment Rate Line Real')\nax.plot(resultdf[\"ds\"],resultdf[\"yhat\"],label='Unemployment Rate Line Prediction')\n\nax.set(xlabel='Date (monthly)', ylabel='Unemployment Rate',\n       title='Monthly Unemployment Rate Forecast')\nax.grid(True)\nplt.legend()\nplt.show()","b0a886b2":"# PLOTTING DATA \n1. x-axis defining dates [ monthly frequency :format yyyy-mm-dd]\n2. y-axis defining the unemployment rate : [ floaring point]","189f278f":"# TRAIN-TEST SPLIT \n1. keeping fist (121-12)=109 monts of data for training purpose\n2. keeping 12 months of data for testing purpose ","4c408caf":"## Plotting last 24 months \nWhere last 12 months are prediciton result.","b9f97c00":"# Description \nIn this notebook I will try to forecast 12 months of future unemployment rate using fbprophet .\nA very simple approach to a simple data set.","99c1e8e5":"# Conclution\n\n1. Though it doesn't seems to be a promising solution but considering a simple approach just using prophet to forecast without any regressor or other kind of feature engineering MAE = 0.798753962937098 is not unexpected.Can't do a miracle here.\n2. Forecast data shows an upper trend that started from the end(approximately) of 2018.\n3. It seems our the model could understand the upper trend.","623599b8":"# INSTALLING FB PROPHET\nWe have to install fb prophet to use it.","68864f57":"# PREPARING DATA FOR FB propeht","e37517e9":"# DATA ANOMALY CHECKING\n1. CHECK IF WE HAVE ALL MONTHLY DATA FROM 2011 TILL NOW\n2. CHECKING FOR MISSING MONTHS\n3. CHECKING IF ANY YEAR-MONTH PAIR REPEATS","306299d1":"# ERROR CHECKING AND VISUAL REPRESENTATION\n1. Creating result dataframe\n2. Check MAE\n3. Plot comparison of real data and forecast data","ab709cbc":"# Unknown future Forecast"}}