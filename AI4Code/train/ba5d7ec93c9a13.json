{"cell_type":{"92d8760b":"code","812afd0a":"code","24ab5e25":"code","13c4a40e":"code","335cae67":"code","1347ec29":"code","f3c68f3b":"code","4795baa9":"code","a48563c7":"code","f70a4e68":"code","6797bcee":"code","bb5ca747":"code","46ea8587":"code","b37aa5d1":"markdown"},"source":{"92d8760b":"import sys\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\n#from scipy.stats import entropy\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom scipy.stats import skew\nfrom sklearn.model_selection import  KFold , GridSearchCV, train_test_split\nfrom sklearn.ensemble import  RandomForestClassifier\nimport json\nfrom sklearn.feature_selection import SelectKBest, chi2, f_classif\nfrom sklearn.metrics import confusion_matrix, log_loss, make_scorer, accuracy_score, f1_score\n\nfrom sklearn.preprocessing import scale\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.feature_selection import VarianceThreshold\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\n\nimport h2o\nfrom h2o.estimators import H2ORandomForestEstimator","812afd0a":"def getColumnsDataTypesForH2o(df_test):\n    \"\"\"\n       This function gets pandas dataframe\n       column types and returns\n       a dictionary with keys as\n       dataframe colum names and values\n       as correspoding h2o dataframe column type\n       Args:\n           df_test: pandas dataframe\n       Returns:\n           col_types: dictionary\n    \"\"\"\n    col_types = df_test.dtypes.to_dict()\n    for x in col_types:\n        if col_types[x] == 'object':\n            col_types[x] = 'factor'\n        if col_types[x] == 'int64':\n            col_types[x] = 'float'\n        if col_types[x] == 'float64':\n            col_types[x] = 'float'\n        if col_types[x] == 'bool':\n            col_types[x] = 'factor'\n\n    return col_types","24ab5e25":"sub = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')\ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntest_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')","13c4a40e":"catList = ['cp_type', 'cp_dose']\n\ncountList =  list (set(train_features.columns) - set(catList))\n\ncountList.remove('sig_id')","335cae67":"lb=LabelEncoder()\n\nfor f in catList: \n\n    train_features[f]=lb.fit_transform(train_features[f])\n    test_features[f]=lb.transform(test_features[f])","1347ec29":"h2o.init()","f3c68f3b":"labelList = list(train_targets_scored.columns[1:])\n\nfor label in labelList: \n\n   train_targets_scored[label] = train_targets_scored[label].astype('str')\n\ntrain_features_all = pd.concat([train_features[countList + catList] , train_targets_scored[labelList]], axis = 1)\n","4795baa9":"set(train_features.dtypes.values)","a48563c7":"train_features_all_24 = train_features_all.loc[train_features_all.cp_time==24]\n\ntrain_features_all_48 = train_features_all.loc[train_features_all.cp_time==48]\n\ntrain_features_all_72 = train_features_all.loc[train_features_all.cp_time==72]\n\n\ntest_features_24 = test_features.loc[test_features.cp_time==24]\n\ntest_features_48 = test_features.loc[test_features.cp_time==48]\n\ntest_features_72 = test_features.loc[test_features.cp_time==72]","f70a4e68":"\nh2o_train_data_24 = h2o.H2OFrame(train_features_all, column_types=getColumnsDataTypesForH2o(train_features_all_24))\nh2o_test_data_24 = h2o.H2OFrame(test_features[countList + catList],  column_types=getColumnsDataTypesForH2o(test_features_24[countList + catList]))\n\nh2o_train_data_48 = h2o.H2OFrame(train_features_all, column_types=getColumnsDataTypesForH2o(train_features_all_48))\nh2o_test_data_48 = h2o.H2OFrame(test_features[countList + catList],  column_types=getColumnsDataTypesForH2o(test_features_48[countList + catList]))\n\nh2o_train_data_72 = h2o.H2OFrame(train_features_all, column_types=getColumnsDataTypesForH2o(train_features_all_72))\nh2o_test_data_72 = h2o.H2OFrame(test_features[countList + catList],  column_types=getColumnsDataTypesForH2o(test_features_72[countList + catList]))\n\ntraining_columns = countList + catList","6797bcee":"#mask = test_features.cp_type == test_features.cp_type.value_counts().index[-1]\n\nfor label in labelList: \n    \n\n    rf = H2ORandomForestEstimator(ntrees=30,\n                                     max_depth=15,\n                                     nfolds=2,\n                                     seed=1234)\n    # Train model\n    rf.train(x=training_columns,\n             y=label,\n             training_frame=h2o_train_data_24)\n        \n    test_features_24[label] =  rf.predict(test_data=h2o_test_data_24).as_data_frame()['p1'] \n    \n    \n    rf = H2ORandomForestEstimator(ntrees=30,\n                                     max_depth=15,\n                                     nfolds=2,\n                                     seed=1234)\n    # Train model\n    rf.train(x=training_columns,\n             y=label,\n             training_frame=h2o_train_data_48)\n        \n    test_features_48[label] =  rf.predict(test_data=h2o_test_data_48).as_data_frame()['p1'] \n    \n    rf = H2ORandomForestEstimator(ntrees=30,\n                                     max_depth=15,\n                                     nfolds=2,\n                                     seed=1234)\n    # Train model\n    rf.train(x=training_columns,\n             y=label,\n             training_frame=h2o_train_data_72)\n        \n    test_features_72[label] =  rf.predict(test_data=h2o_test_data_72).as_data_frame()['p1'] \n\n    #test_features.loc[mask][label] = 0\n    \n    print('label:', label)\n    ","bb5ca747":" test_features_all = pd.concat([test_features_24, test_features_48, test_features_72], axis = 0)","46ea8587":"test_features_all[\n['sig_id'] + labelList ].to_csv('submission.csv', index=False)","b37aa5d1":"## Saving predictions"}}