{"cell_type":{"3417348c":"code","2b37a2d2":"code","40b3e777":"code","2b94fbf2":"code","8467bdc6":"code","705aa4ab":"code","4d5a99b8":"code","6f22b301":"code","5a1ef46f":"code","7c05aedc":"code","80e0419c":"code","86a7a293":"code","a3d41582":"code","451ece92":"code","d3fbb713":"code","8161a1f9":"code","70131c6e":"code","e0777f7a":"code","8ef173b2":"code","4096fab4":"code","bb4271d9":"code","9298e038":"code","a4706512":"code","85449aac":"code","d54eb264":"code","8fd9d1ac":"code","cf1f952f":"code","5f37a3a3":"code","c75c46f5":"code","14b9810a":"code","4eda6c98":"code","3f109cf6":"code","1d857eb2":"code","b7ea232f":"code","30dcbfbd":"code","b86f9bfb":"code","b2cece82":"code","02ebf46a":"code","23d7b975":"code","f32d5184":"code","e734e337":"code","bd84b3fa":"code","decce3a0":"code","6207944b":"code","7dea7649":"code","1b1ee2b0":"code","169f4726":"code","7a58e4c0":"code","d69875c5":"code","5eea2585":"code","18f69687":"code","daaf7fd4":"code","78013cdf":"code","014e176f":"code","4a7ee839":"code","0449ed8a":"code","c5aa030f":"code","aeac5957":"code","829d942c":"code","7a90b334":"code","e3ef3292":"code","db528085":"code","01c80d58":"code","3c6d8b94":"code","c57acb8b":"code","7e0b54cf":"code","8406071d":"code","7678af84":"code","8fd79dc6":"code","bd6efdee":"code","cc61ea16":"code","ad8e5122":"code","7d5445dc":"code","88ce7f0c":"code","7496669f":"code","a701933b":"code","f48a87a0":"code","f22b8901":"code","101372f6":"code","9d30b2e5":"code","3e44f0a9":"code","0cfaff0d":"code","b9cd7aa5":"code","c2a80872":"code","6b7fdbe9":"code","d0a9eb6e":"code","fb73e167":"code","a276f806":"code","227f12a5":"code","f2025696":"code","bb3ee860":"code","c8af3f39":"code","33845539":"code","22b08d62":"code","2881a00e":"code","6e58e3b0":"code","c49ff087":"code","dc8b8530":"code","36304763":"code","6d05c4f9":"code","ade22b62":"code","ef9dd539":"code","a342c561":"code","dc56d19c":"code","26e098f3":"code","72814e58":"code","bed351ce":"code","660dc997":"code","c4f0c898":"code","4430f94e":"code","e08bb0a2":"code","9b4b1e5e":"code","78ebf944":"code","3801a187":"code","edd84b2d":"code","6b0fea6a":"code","95e94936":"code","c86cef1c":"code","5b93398c":"code","30f88587":"code","b8e5b385":"code","f9e26827":"code","f3ded7b3":"code","39d5490f":"code","1c0db430":"code","7ab9ddac":"code","552906f6":"code","b992fbdb":"code","610dfedf":"code","2c13c138":"code","f74fed3d":"code","db8aa7c3":"code","11d038fa":"code","63aed8b4":"code","7aeefa94":"code","b6af84a7":"code","25981aec":"code","d547724e":"code","6dcb9dbf":"code","2983acd7":"code","38ff855f":"code","eda6ca9d":"code","a78d365c":"code","d1d5ab87":"code","1a96d60b":"code","47562bbf":"code","f8d13e36":"code","e140bfa4":"code","72489bc4":"code","488c81eb":"code","7f076cb2":"code","c2707e6d":"code","ecfd2f03":"code","a3b9eb80":"code","5de6c642":"code","b367c9e9":"code","084c7e27":"code","eb370ab9":"code","9a3f435f":"code","d3f6eef4":"code","7dca0d82":"code","5f5e8127":"code","29b9d074":"code","0b15bd74":"code","3eb486be":"code","748a9f3a":"code","c277af29":"code","7d01eb8f":"code","efc4e424":"code","6d9e9a3e":"code","3eceea20":"code","06770a52":"code","70d8e8d2":"code","430892f0":"code","3e253929":"code","2601be14":"code","82b28a34":"markdown","887874cb":"markdown","caad9ce8":"markdown","c4aba95a":"markdown","c065cc88":"markdown","9fea50db":"markdown","8b00c237":"markdown","453bda65":"markdown","162929f8":"markdown","448df0a8":"markdown","82ad7db7":"markdown","836e73dd":"markdown","f9b29272":"markdown","81f894b1":"markdown","85c9c019":"markdown","07a6a4f9":"markdown","1007d0f7":"markdown","a62b644b":"markdown","0580c48f":"markdown","9accd37b":"markdown","286858df":"markdown","f7f02a52":"markdown","849ae3c7":"markdown","a13dca6d":"markdown","014f1fca":"markdown","47c9f7ef":"markdown","9ac342ad":"markdown","6e776748":"markdown","bff7d0ea":"markdown","a452ba16":"markdown","0fbd854d":"markdown","cc63aad3":"markdown","74f4e139":"markdown","4eaed913":"markdown","18a3eeb7":"markdown","ea36416d":"markdown","27b2266d":"markdown","fa14d8fa":"markdown","eddfb489":"markdown","ea9f1b7b":"markdown","c7c9a508":"markdown","e01bbdf2":"markdown","0f40b40d":"markdown","868e9fcb":"markdown","1a01eb1c":"markdown","5c3b47d8":"markdown","bcf8f308":"markdown","d2b0c3c7":"markdown","4bd05334":"markdown","666da459":"markdown","333b936a":"markdown","3003bf58":"markdown","eabbe879":"markdown","cab88c73":"markdown","191c3ddb":"markdown","cb2ea3af":"markdown","ffdcde0d":"markdown","a7a2688f":"markdown"},"source":{"3417348c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport math\nfrom collections import OrderedDict \n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport itertools\nN = 10\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b37a2d2":"df_beat = pd.read_csv('\/kaggle\/input\/clean-cpp-data\/df_beat_clean.csv')\ndf_subject_id = pd.read_csv('\/kaggle\/input\/clean-cpp-data\/df_subject_id.csv')\ndf_trr_by_beat = pd.read_csv('\/kaggle\/input\/clean-cpp-data\/df_trr_by_beat_clean.csv')\ndf_trr_id = pd.read_csv('\/kaggle\/input\/clean-cpp-data\/df_trr_id_final-2.csv')","40b3e777":"df_beat.columns","2b94fbf2":"df_beat.head()","8467bdc6":"df_subject_id.columns","705aa4ab":"df_subject_id.head()","4d5a99b8":"df_trr_by_beat.columns","6f22b301":"df_trr_by_beat.head()","5a1ef46f":"df_trr_id.columns","7c05aedc":"df_trr_id.head(10)","80e0419c":"#table of 20 beats with highest reported number of crimes\ndf_beat.sort_values(by = 'number_of_reported_crimes', ascending = False, inplace = True)\ndf_beat.head(20)","86a7a293":"#graph of above table\ntop20_beat = df_beat.beat[:20]\n#print(top20_beat)\ntop20_crime = df_beat.number_of_reported_crimes[:20]\nsns.set(font_scale = 1)\nax = sns.barplot(x = top20_beat, y = top20_crime, order = top20_beat, label = 'small')\nax.set_title('20 Beats with HIGHEST Number of Reported Crimes')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","a3d41582":"#table showing 20 beats with lowest number of reported crimes\ndf_beat.tail(20)","451ece92":"#graph of above table\nlast20_beat = df_beat.beat[-20:]\n#print(last20_beat)\nlast20_crime = df_beat.number_of_reported_crimes[-20:]\nsns.set(font_scale = 1)\nax = sns.barplot(x = last20_beat, y = last20_crime, order = last20_beat, label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nax.set_title('20 Beats with Fewest Number of Reported Crimes')\nplt.show()","d3fbb713":"#create counter for the 20 beats with highest number of crimes\ntop20_crime = {}\nfor ind in df_beat.index[:20]:\n    beat = df_beat['beat'][ind]\n    numCrimes = df_beat['number_of_reported_crimes'][ind]\n    top20_crime[beat] = numCrimes\nprint(top20_crime)","8161a1f9":"#sort counter by district\ntop20_crime_district = {}\nfor beat in top20_crime:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in top20_crime_district.keys():\n        top20_crime_district[district] += 1\n    else:\n        top20_crime_district[district] = 1\n#print(top20_crime_district)\ntop20_crime_district_sorted_keys = sorted(top20_crime_district, key=top20_crime_district.get, reverse=True)\ntop20_crime_district_sort ={}\nfor district in top20_crime_district_sorted_keys:\n    top20_crime_district_sort[district] = top20_crime_district[district]\nprint(top20_crime_district_sort)","70131c6e":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_crime_district_sort.keys()), y = list(top20_crime_district_sort.values()), order = top20_crime_district_sort, label = 'small')\nax.set_title('Districts with HIGHEST Number of Crimes')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","e0777f7a":"#create counter for the 20 beats with lowest number of crimes\nlow20_crime = {}\nfor ind in df_beat.index[-20:]:\n    beat = df_beat['beat'][ind]\n    numCrimes = df_beat['number_of_reported_crimes'][ind]\n    low20_crime[beat] = numCrimes\nprint(low20_crime)","8ef173b2":"#sort this counter by district\nlow20_crime_district = {}\nfor beat in low20_crime:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in low20_crime_district.keys():\n        low20_crime_district[district] += 1\n    else:\n        low20_crime_district[district] = 1\n#print(low20_crime_district)\nlow20_crime_district_sorted_keys = sorted(low20_crime_district, key=low20_crime_district.get, reverse=True)\nlow20_crime_district_sort ={}\nfor district in low20_crime_district_sorted_keys:\n    low20_crime_district_sort[district] = low20_crime_district[district]\nprint(low20_crime_district_sort)","4096fab4":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_crime_district_sort.keys()), y = list(low20_crime_district_sort.values()), order = low20_crime_district_sort, label = 'small')\nax.set_title('Districts with LOWEST Number of Crimes')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","bb4271d9":"#table showing 20 beats with highest number of arrests\ndf_beat.sort_values(by = 'arrests_by_beat', ascending = False, inplace = True)\ndf_beat.head(20)","9298e038":"#graph of above table\ntop20_beat = df_beat.beat[:20]\ntop20_arrest = df_beat.arrests_by_beat[:20]\n#print(top20_beat)\nsns.set(font_scale = 1)\nax = sns.barplot(x = top20_beat, y = top20_arrest, order = top20_beat, label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nax.set_title('20 Beats with HIGHEST Number of Arrests')\nplt.show()","a4706512":"#table showing 20 beats with lowest number of arrests\ndf_beat.tail(20)","85449aac":"#graph of above table\nlast20_beat = df_beat.beat[-20:]\nlast20_arrest = df_beat.arrests_by_beat[-20:]\n#print(last20_beat)\nsns.set(font_scale = 1)\nax = sns.barplot(x = last20_beat, y = last20_arrest, order = last20_beat, label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nax.set_title('20 Beats with LOWEST Number of Arrests')\nplt.show()","d54eb264":"#create counter for the 20 beats with highest number of arrests\ntop20_arrest = {}\nfor ind in df_beat.index[:20]:\n    beat = df_beat['beat'][ind]\n    numarrests = df_beat['arrests_by_beat'][ind]\n    top20_arrest[beat] = numarrests\nprint(top20_arrest)","8fd9d1ac":"#sort counter by district\ntop20_arrest_district = {}\nfor beat in top20_arrest:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in top20_arrest_district.keys():\n        top20_arrest_district[district] += 1\n    else:\n        top20_arrest_district[district] = 1\n#print(top20_arrest_district)\ntop20_arrest_district_sorted_keys = sorted(top20_arrest_district, key=top20_arrest_district.get, reverse=True)\ntop20_arrest_district_sort ={}\nfor district in top20_arrest_district_sorted_keys:\n    top20_arrest_district_sort[district] = top20_arrest_district[district]\nprint(top20_arrest_district_sort)","cf1f952f":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_arrest_district_sort.keys()), y = list(top20_arrest_district_sort.values()), order = top20_arrest_district_sort, label = 'small')\nax.set_title('Districts with HIGHEST Number of arrests')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","5f37a3a3":"#create counter for the 20 beats with highest number of arrests\nlow20_arrest = {}\nfor ind in df_beat.index[-20:]:\n    beat = df_beat['beat'][ind]\n    numarrests = df_beat['arrests_by_beat'][ind]\n    low20_arrest[beat] = numarrests\nprint(low20_arrest)","c75c46f5":"#sort coutner by district\nlow20_arrest_district = {}\nfor beat in low20_arrest:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in low20_arrest_district.keys():\n        low20_arrest_district[district] += 1\n    else:\n        low20_arrest_district[district] = 1\n#print(low20_arrest_district)\nlow20_arrest_district_sorted_keys = sorted(low20_arrest_district, key=low20_arrest_district.get, reverse=True)\nlow20_arrest_district_sort ={}\nfor district in low20_arrest_district_sorted_keys:\n    low20_arrest_district_sort[district] = low20_arrest_district[district]\nprint(low20_arrest_district_sort)","14b9810a":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_arrest_district_sort.keys()), y = list(low20_arrest_district_sort.values()), order = low20_arrest_district_sort, label = 'small')\nax.set_title('Districts with LOWEST Number of Arrests')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","4eda6c98":"df_beat.columns","3f109cf6":"#creating the ratio column\ndf_beat['arrest_to_crime_ratio'] = df_beat.apply(lambda x: x.arrests_by_beat\/x.number_of_reported_crimes, axis = 1)","1d857eb2":"#table showing 20 beats with highest arrest:crime ratio\ndf_beat.sort_values(by = 'arrest_to_crime_ratio', ascending = False, inplace = True)\ndf_beat.head(20)","b7ea232f":"#graphing above data\ntop20_beat = df_beat.beat[:20]\ntop20_ratio = df_beat.arrest_to_crime_ratio[:20]\n#print(top20_beat)\nsns.set(font_scale = 1)\nax = sns.barplot(x = top20_beat, y = top20_ratio, order = top20_beat, label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nax.set_title('20 Beats with HIGHEST Arrest to Number of Reported Crimes Ratio')\nplt.show()","30dcbfbd":"#table showing 20 beats with lowest arrest:crime ratio\ndf_beat.tail(20)","b86f9bfb":"#graphing above table\nlow20_beat = df_beat.beat[-20:]\nlow20_ratio = df_beat.arrest_to_crime_ratio[-20:]\n#print(low20_beat)\nsns.set(font_scale = 1)\nax = sns.barplot(x = low20_beat, y = low20_ratio, order = low20_beat, label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nax.set_title('20 Beats with LOWEST Arrest to Reported Crimes Ratio')\nplt.show()","b2cece82":"#create counter for the 20 beats with highest number of ratios\ntop20_ratio = {}\nfor ind in df_beat.index[:20]:\n    beat = df_beat['beat'][ind]\n    numratios = df_beat['arrest_to_crime_ratio'][ind]\n    top20_ratio[beat] = numratios\nprint(top20_ratio)","02ebf46a":"top20_ratio_district = {}\nfor beat in top20_ratio:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in top20_ratio_district.keys():\n        top20_ratio_district[district] += 1\n    else:\n        top20_ratio_district[district] = 1\n#print(top20_ratio_district)\ntop20_ratio_district_sorted_keys = sorted(top20_ratio_district, key=top20_ratio_district.get, reverse=True)\ntop20_ratio_district_sort ={}\nfor district in top20_ratio_district_sorted_keys:\n    top20_ratio_district_sort[district] = top20_ratio_district[district]\nprint(top20_ratio_district_sort)","23d7b975":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_ratio_district_sort.keys()), y = list(top20_ratio_district_sort.values()), order = top20_ratio_district_sort, label = 'small')\nax.set_title('Districts with HIGHEST Arrest to Crime Ratio')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","f32d5184":"#create counter for the 20 beats with lowest arrest to crime ratio\nlow20_ratio = {}\nfor ind in df_beat.index[-20:]:\n    beat = df_beat['beat'][ind]\n    numratio = df_beat['arrest_to_crime_ratio'][ind]\n    low20_ratio[beat] = numratio\nprint(low20_ratio)","e734e337":"#sort coutner by district\nlow20_ratio_district = {}\nfor beat in low20_ratio:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in low20_ratio_district.keys():\n        low20_ratio_district[district] += 1\n    else:\n        low20_ratio_district[district] = 1\n#print(low20_ratio_district)\nlow20_ratio_district_sorted_keys = sorted(low20_ratio_district, key=low20_ratio_district.get, reverse=True)\nlow20_ratio_district_sort ={}\nfor district in low20_ratio_district_sorted_keys:\n    low20_ratio_district_sort[district] = low20_ratio_district[district]\nprint(low20_ratio_district_sort)","bd84b3fa":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_ratio_district_sort.keys()), y = list(low20_ratio_district_sort.values()), order = low20_ratio_district_sort, label = 'small')\nax.set_title('Districts with LOWEST Number of ratios')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","decce3a0":"print('TOP 20 BEATS IN CRIME, ARREST, AND RATIO\\n')\nprint('CRIME: ')\nprint(top20_crime_district_sort)\nprint('-'*60)\nprint('ARREST: ')\nprint(top20_arrest_district_sort)\nprint('-'*60)\nprint('RATIO: ')\nprint(top20_ratio_district_sort)\nprint('-'*60)","6207944b":"print('BOTTOM 20 BEATS IN CRIME, ARREST, AND RATIO\\n')\nprint('CRIME: ')\nprint(low20_crime_district_sort)\nprint('-'*60)\nprint('ARREST: ')\nprint(low20_arrest_district_sort)\nprint('-'*60)\nprint('RATIO: ')\nprint(low20_ratio_district_sort)\nprint('-'*60)","7dea7649":"df_subject_id.head()","1b1ee2b0":"df_subject_id.race.value_counts()","169f4726":"#graphing this subject breakdown by race\nax = sns.barplot(x = df_subject_id.race.value_counts().index, y = df_subject_id.race.value_counts(), label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.set_xlabel('Race')\nax.set_ylabel('Number of Subjects')\nax.tick_params(labelsize=8.5)\nax.set_title('Number of Subjects by Race')\nplt.show()","7a58e4c0":"#making the aforementioned column\ndf_subject_id['number_of_trr'] = df_subject_id.list_of_trr_id.apply(lambda x: len(x.split(','))-1)\ndf_subject_id.head()","d69875c5":"#we have a null value for race for some reason\n#assuming this means the subjects race was either undisclosed or not one of the 5 main races, we just call it 'OTHER'\ndf_subject_id.race.replace(np.nan, 'OTHER', inplace = True)\ndf_subject_id.race.unique()","5eea2585":"#counting and storing the number of trr incidents by race\ntrr_by_race_dict ={}\nfor ind in df_subject_id.index:\n    race = df_subject_id['race'][ind]\n    num_trr = df_subject_id['number_of_trr'][ind]\n    if race in trr_by_race_dict.keys():\n        trr_by_race_dict[race] += num_trr\n    else:\n        trr_by_race_dict[race] = num_trr\nout = dict(itertools.islice(trr_by_race_dict.items(), N)) \nprint(out)","18f69687":"#graphing our data\nplt.bar(x = trr_by_race_dict.keys(), height =trr_by_race_dict.values())\nplt.title('Number of TRR Incidents by Race')\nplt.xlabel('Race')\nplt.ylabel(\"Number of TRR Incidents\")\nplt.xticks(rotation=90)\nplt.show()","daaf7fd4":"#estbalish our age bands and count the number of suspects in each age band\nage_band_dict = {}\nage_band_dict['<20'] = 0\nage_band_dict['20-29'] = 0\nage_band_dict['30-39'] = 0\nage_band_dict['40-49'] = 0\nage_band_dict['50-59'] = 0\nage_band_dict['60-69'] = 0\nage_band_dict['>=70'] = 0\nfor ind in df_subject_id.index:\n    age = df_subject_id['age'][ind]\n    if (age<20):\n        age_band_dict['<20'] += 1\n    elif(age>=20 and age<30):\n        age_band_dict['20-29'] += 1\n    elif(age>=30 and age<40):\n        age_band_dict['30-39'] += 1\n    elif(age>=40 and age<50):\n        age_band_dict['40-49'] += 1\n    elif(age>=50 and age<60):\n        age_band_dict['50-59'] += 1\n    elif(age>=60 and age<70):\n        age_band_dict['60-69'] += 1\n    else:\n        age_band_dict['>=70'] += 1\nout = dict(itertools.islice(age_band_dict.items(), N)) \nprint(out)","78013cdf":"#helper function to apply the age banding\ndef bander(age):\n    if (age<20):\n        return '<20'\n    elif(age>=20 and age<30):\n        return '20-29'\n    elif(age>=30 and age<40):\n        return '30-39'\n    elif(age>=40 and age<50):\n        return '40-49'\n    elif(age>=50 and age<60):\n        return '50-59'\n    elif(age>=60 and age<70):\n        return '60-69'\n    else:\n        return '>=70'","014e176f":"#creating a new column in our data table for the age banding and applying it to each subject\ndf_subject_id['age_bands'] = df_subject_id.age.apply(lambda x: bander(x))","4a7ee839":"#graphing the frequencies of the age bands\nplt.bar(x = age_band_dict.keys(), height =age_band_dict.values())\nplt.title('Number of Subjects by Age')\nplt.xlabel('Age Bands')\nplt.ylabel(\"Number of Subjects\")\nplt.show()","0449ed8a":"#graphing the subjects by frequency of gender\nax = sns.countplot(x=\"gender\", data=df_subject_id)\nax.set_title('Number of Subject by Gender')\nplt.show()","c5aa030f":"#first, males\ndf_subject_id_males = df_subject_id.loc[df_subject_id.gender == 'MALE']","aeac5957":"#sorting the males by race\ntrr_by_race_dict_male ={}\nfor ind in df_subject_id_males.index:\n    race = df_subject_id_males['race'][ind]\n    num_trr = df_subject_id_males['number_of_trr'][ind]\n    if race in trr_by_race_dict_male.keys():\n        trr_by_race_dict_male[race] += num_trr\n    else:\n        trr_by_race_dict_male[race] = num_trr\ndict1 = OrderedDict(sorted(trr_by_race_dict_male.items())) \nout = dict(itertools.islice(dict1.items(), N)) \nprint(out)","829d942c":"#now the ladies\ndf_subject_id_females = df_subject_id.loc[df_subject_id.gender == 'FEMALE']","7a90b334":"#sorting females by race\ntrr_by_race_dict_female ={}\nfor ind in df_subject_id_females.index:\n    race = df_subject_id_females['race'][ind]\n    num_trr = df_subject_id_females['number_of_trr'][ind]\n    if race in trr_by_race_dict_female.keys():\n        trr_by_race_dict_female[race] += num_trr\n    else:\n        trr_by_race_dict_female[race] = num_trr\ndict2 = OrderedDict(sorted(trr_by_race_dict_female.items())) \nout = dict(itertools.islice(dict2.items(), N)) \nprint(out)","e3ef3292":"#combining the two on a bar chart\nn = 6\nindex = np.arange(n)\nwidth = .3\nfig, ax = plt.subplots()\ny1 = list(dict1.values())\ny2 = list(dict2.values())\nrects1 = ax.bar(index, y1, width, color='r')\nrects2 = ax.bar(index + width, y2, width, color='y')\nax.set_ylabel('Number of TRR Incidents')\nax.set_title('TRR Incidents by Gender and Race')\nax.set_xticks(index + width \/ 2)\n#ax.xticks(rotation=90)\nax.set_xticklabels(('ASIAN\/PACIFIC ISLANDER', 'BLACK', 'HISPANIC', 'NATIVE AMERICAN\/ALASKAN NATIVE', 'OTHER', 'WHITE'), rotation = 90)\nax.legend((rects1[0], rects2[0]), ('Men', 'Women'))\nplt.show()","db528085":"df_subject_id.columns = ['subject_ID', 'list_of_trr_id', 'gender', 'race', 'age','number_of_trr', 'age_bands']","01c80d58":"#a really useful table to sum up our findings in this dataset\npd.set_option('display.max_rows', None)\ntable = pd.pivot_table(df_subject_id, values='number_of_trr', index=['race', 'gender', 'age_bands'], aggfunc=np.sum)\ntable","3c6d8b94":"df_trr_by_beat.head()","c57acb8b":"#show table sorted by 20 beats with highest number of trr reports\ndf_trr_by_beat.sort_values(by = 'number_of_trr_reports', ascending = False, inplace = True)\ndf_trr_by_beat.head(20)","7e0b54cf":"#graph above table\ntop20_beat = df_trr_by_beat.beat[:20]\n#print(top20_beat)\ntop20_trr = df_trr_by_beat.number_of_trr_reports[:20]\nsns.set(font_scale = 1)\nax = sns.barplot(x = top20_beat, y = top20_trr, order = top20_beat, label = 'small')\nax.set_title('20 Beats with HIGHEST Number of TRR Reports')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","8406071d":"#show table with 20 beats with lowest number of trr reports\ndf_trr_by_beat.tail(20)","7678af84":"#graph above table\nlow20_beat = df_trr_by_beat.beat[-20:]\n#print(top20_beat)\nlow20_trr = df_trr_by_beat.number_of_trr_reports[-20:]\nsns.set(font_scale = 1)\nax = sns.barplot(x = low20_beat, y = low20_trr, order = low20_beat, label = 'small')\nax.set_title('20 Beats with LOWEST Number of TRR Reports')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","8fd79dc6":"#create counter of districts from top 20 beats and sort\ntop20_district = {}\nfor beat in top20_beat:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in top20_district.keys():\n        top20_district[district] += 1\n    else:\n        top20_district[district] = 1\n#print(top20_district)\ntop20_district_sorted_keys = sorted(top20_district, key=top20_district.get, reverse=True)\ntop20_district_sort ={}\nfor district in top20_district_sorted_keys:\n    top20_district_sort[district] = top20_district[district]","bd6efdee":"#graph above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_district_sort.keys()), y = list(top20_district_sort.values()), order = top20_district_sort, label = 'small')\nax.set_title('20 Districts with HIGHEST Number of TRR Reports')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","cc61ea16":"#create counter of districts from low 20 beats and sort\nlow20_district = {}\nfor beat in low20_beat:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in low20_district.keys():\n        low20_district[district] += 1\n    else:\n        low20_district[district] = 1\n#print(low20_district)\nlow20_district_sorted_keys = sorted(low20_district, key=low20_district.get, reverse=True)\nlow20_district_sort ={}\nfor district in low20_district_sorted_keys:\n    low20_district_sort[district] = low20_district[district]","ad8e5122":"#graph above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_district_sort.keys()), y = list(low20_district_sort.values()), order = low20_district_sort, label = 'small')\nax.set_title('20 Districts with LOWEST Number of TRR Reports')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","7d5445dc":"df_trr_id.head()","88ce7f0c":"df_trr_id.columns","7496669f":"len(df_trr_id.event_id.unique())","a701933b":"#create a coutner for each resistance level\nHRL = df_trr_id.highest_resistance_level.value_counts()\nHRL.sort_index(inplace = True)\nprint(HRL)","f48a87a0":"#map for each resistance level to its label\nrl_dict = {}\nrl_dict[0.0] = 'Passive Resister'\nrl_dict[1.0] = 'Active Resister'\nrl_dict[2.0] = 'Assailant Assault'\nrl_dict[3.0] = 'Assailant Assault\/Battery'\nrl_dict[4.0] = 'Assailant Battery'\nrl_dict[5.0] = 'Assailant Deadly Force'","f22b8901":"#re-label the counter we create two blocks ago\nHRL.rename(index = {0.0: 'Passive Resister', 1.0: 'Active Resister', 2.0 : 'Assailant Assault', 3.0: 'Assailant Assault\/Battery', 4.0: 'Assailant Battery', 5.0: 'Assailant Deadly Force'}, inplace = True)","101372f6":"#graph the counter of resistance levels\nsns.set(font_scale = 1)\nax = sns.barplot(x = HRL.index, y = HRL, order =HRL.index, label = 'small')\nax.set_title('Distribution of Resistance Levels Across TRR Incidents')\nax.set(xlabel='Resistance Level', ylabel='Number of Incidents')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.tick_params(labelsize=8.5)\nplt.show()","9d30b2e5":"#isolate the trr's where the officer logged his action\ndf_trr_id_cat_iso = df_trr_id.loc[df_trr_id.list_of_cats.notnull()]","3e44f0a9":"#create a counter for the frequencies of each action category\ncat_counter = {}\nfor i in range (2,7):\n    cat_counter[i] = 0\nfor ind in df_trr_id_cat_iso.index:\n    cat_list_str = df_trr_id_cat_iso['list_of_cats'][ind]\n    cat_list = cat_list_str.split(\",\")\n    cat_list = cat_list[:-1].copy()\n    #print(cat_list)\n    #cat_list.pop()\n    for cat in cat_list:\n        intCat = int(float(cat))\n        cat_counter[intCat] += 1","0cfaff0d":"#label each action category on the counter we just made\ncat_labels = {}\ncat_labels[2] = 'Other Force'\ncat_labels[3] = 'Physical Force - Holding, Taser Display'\ncat_labels[4] = 'Physical Force - Stunning, Chemical'\ncat_labels[5] = 'Impact Weapon, Taser, Physical Force - Direct Mechanical'\ncat_labels[6] = 'Firearm'\ncat_counter_labeled = {}\nfor i in range(2,7):\n    amt = cat_counter[i]\n    cat_counter_labeled[cat_labels[i]] = amt","b9cd7aa5":"#graph the counter!\nplt.bar(x = cat_counter_labeled.keys(), height =cat_counter_labeled.values())\nplt.title('Frequency of Member Action across All Incidents')\nplt.xlabel('Action Categories')\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Member Action Instances\")\nplt.show()","c2a80872":"#counter for each subject action (sorry it's so sloppy!)\nsubject_acts_dict = {}\nsubject_acts_dict['subject_pulled_away'] = 0\nsubject_acts_dict['subject_disobey_verbal'] = 0\nsubject_acts_dict['subject_stiffened'] = 0\nsubject_acts_dict['subject_fled'] = 0\nsubject_acts_dict['subject_attack_no_weapon'] = 0\nsubject_acts_dict['subject_battery_threat'] = 0\nsubject_acts_dict['subject_had_weapon'] = 0\nsubject_acts_dict['subject_attack_with_weapon'] = 0\nsubject_acts_dict['subject_deadly_force'] = 0\nsubject_acts_dict['subject_other'] = 0\nsubject_acts_dict['subject_armed'] = 0\nfor ind in df_trr_id.index:\n    if df_trr_id['subject_pulled_away'][ind] == 1:\n        subject_acts_dict['subject_pulled_away'] += 1\n    if df_trr_id['subject_disobey_verbal'][ind] == 1:\n        subject_acts_dict['subject_disobey_verbal'] += 1\n    if df_trr_id['subject_stiffened'][ind] == 1:\n        subject_acts_dict['subject_stiffened'] += 1\n    if df_trr_id['subject_fled'][ind] == 1:\n        subject_acts_dict['subject_fled'] += 1\n    if df_trr_id['subject_battery_threat'][ind] == 1:\n        subject_acts_dict['subject_battery_threat'] += 1\n    if df_trr_id['subject_had_weapon'][ind] == 1:\n        subject_acts_dict['subject_had_weapon'] += 1\n    if df_trr_id['subject_attack_with_weapon'][ind] == 1:\n        subject_acts_dict['subject_attack_with_weapon'] += 1\n    if df_trr_id['subject_deadly_force'][ind] == 1:\n        subject_acts_dict['subject_deadly_force'] += 1\n    if df_trr_id['subject_other'][ind] == 1:\n        subject_acts_dict['subject_other'] += 1\n    if df_trr_id['subject_armed'][ind] == 1:\n        subject_acts_dict['subject_armed'] += 1\nout = dict(itertools.islice(subject_acts_dict.items(), N)) \nprint(out)","6b7fdbe9":"#graph this counter\nplt.bar(x = subject_acts_dict.keys(), height =subject_acts_dict.values())\nplt.title('Frequency of Subject Action across All Incidents')\nplt.xlabel('Type of Subject Action')\nplt.xticks(rotation= 90)\nplt.ylabel(\"Number of Subject Action Instances\")\nplt.show()","d0a9eb6e":"df_trr_id.head()","fb73e167":"df_subject_id.head()","a276f806":"#put the TRR incident ID's for each event ID in an accesible format\ntrr_by_event_dict = {}\nfor ind in df_trr_id.index:\n    eventID = df_trr_id['event_id'][ind]\n    trrID = str(df_trr_id['trr_id'][ind])\n    if(eventID in trr_by_event_dict.keys()):\n        trr_by_event_dict[eventID] += (trrID+',')\n    else:\n        trr_by_event_dict[eventID] = (trrID+',')\nfor key in trr_by_event_dict.keys():\n    lizt = trr_by_event_dict[key].split(',')\n    trr_by_event_dict[key] = lizt[:-1].copy()\nout = dict(itertools.islice(trr_by_event_dict.items(), N)) \nprint(out)","227f12a5":"#put the races of each subject in a more accessible format\nrace_by_id = {}\nfor ind in df_subject_id.index:\n    subjectID = df_subject_id['subject_ID'][ind]\n    race = df_subject_id['race'][ind]\n    race_by_id[subjectID] = race\nout = dict(itertools.islice(race_by_id.items(), N)) \nprint(out)","f2025696":"#get subject ID of each subject in each TRR incident\nsubject_by_trr = {}\nfor ind in df_subject_id.index:\n    subjectID = df_subject_id['subject_ID'][ind]\n    trr_list = df_subject_id['list_of_trr_id'][ind].split(',')[:-1]\n    for trr in trr_list:\n        subject_by_trr[trr] = subjectID\nout = dict(itertools.islice(subject_by_trr.items(), N)) \nprint(out)","bb3ee860":"#get subject ID of each suject in each event ID\nsubjectID_in_event = {}\nfor eventID in trr_by_event_dict.keys():\n    subjectID_in_event[eventID] = ''\n    for trr in trr_by_event_dict[eventID]:\n        subID = str(subject_by_trr[trr])\n        if subID not in subjectID_in_event[eventID]:\n            subjectID_in_event[eventID] += (subID+',')\nfor key in subjectID_in_event.keys():\n    lizt = subjectID_in_event[key].split(',')\n    subjectID_in_event[key] = lizt[:-1].copy()\nout = dict(itertools.islice(subjectID_in_event.items(), N)) \nprint(out)","c8af3f39":"#use subject id's to get race of each subject in each event\nrace_in_event = {}\nfor eventID in subjectID_in_event.keys():\n    race_in_event[eventID] = ''\n    for subjectID in subjectID_in_event[eventID]:\n        race_in_event[eventID] += (race_by_id[int(float(subjectID))]+',')\nout = dict(itertools.islice(race_in_event.items(), N)) \nprint(out)","33845539":"#begin making our dataframe that's indexed by event ID by adding the race of each subject in each event\ndf_event_id = pd.DataFrame.from_dict(race_in_event, orient = 'index')\ndf_event_id.columns = ['race_of_subjects']\ndf_event_id.index.name = 'event_ID'\ndf_event_id.head()","22b08d62":"#adding number of subjcets to that dataframe\ndf_event_id['num_of_subjects'] = df_event_id.race_of_subjects.apply(lambda x: len(x.split(','))-1)\ndf_event_id.head()","2881a00e":"#map each event id to a list of trr incidents that occured during that event ID\ntrr_by_event = {}\nfor eventID in trr_by_event_dict.keys():\n    trr_by_event[eventID] = ''\n    for trrID in trr_by_event_dict[eventID]:\n        trr_by_event[eventID] += str(trrID) + ','\nout = dict(itertools.islice(trr_by_event.items(), N)) \nprint(out)","6e58e3b0":"#adding the list of trr events to that dataframe\ntemp = pd.DataFrame.from_dict(trr_by_event, orient = 'index')\ntemp.columns = ['list_of_trr']\ntemp.index.name = 'event_ID'\ntemp.head()","c49ff087":"#table concatenation\ndf_event_id = pd.concat([df_event_id, temp], axis = 1)\ndf_event_id.head()","dc8b8530":"#isolate the trr's where an injury was officialy reported or allegedly occured\ndf_trr_id_injured = df_trr_id.loc[(df_trr_id.injured == 1) | (df_trr_id.alleged_injury == 1)]","36304763":"df_trr_id_injured.info()","6d05c4f9":"#see how many TRR's had an alleged injury, but the officer didn't report such an injury\ndf_trr_id_injured.loc[(df_trr_id_injured.injured == 0) & (df_trr_id_injured.alleged_injury == 1)].info()","ade22b62":"#sorting the resistance levels in the incidents where an injury occured\ninjured_HRL = df_trr_id_injured.highest_resistance_level.value_counts()\nprint(injured_HRL)","ef9dd539":"#re-labeling\ninjured_HRL.rename(index = {0.0: 'Passive Resister', 1.0: 'Active Resister', 2.0 : 'Assailant Assault', 3.0: 'Assailant Assault\/Battery', 4.0: 'Assailant Battery', 5.0: 'Assailant Deadly Force'}, inplace = True)","a342c561":"#graphing the sorting of resitance levels where an injury occured we just did\nax = sns.barplot(x = injured_HRL.index, y = injured_HRL, order = injured_HRL.index.sort_values(), label = 'small')\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\nax.set_xlabel('Resitance Level')\nax.set_ylabel('Number of TRR Incidents Reporting Injury (Alleged or Officer-Reported)')\nax.tick_params(labelsize=8.5)\nax.set_title('Number of Reported Injuries by Resistance Level')\nplt.show()","dc56d19c":"#sorting our index for neatness\nHRL.sort_index(inplace = True)","26e098f3":"#printing the level of resistance and percentage of incidnets resulting in injury at this resistance level\nfor ind in HRL.index:\n    print('Level of Resistance: ' + ind)\n    print('Number of Injuries: '+ str(injured_HRL[ind]))\n    print('Number of Incidents: '+ str(HRL[ind]))\n    print('Percentage of Injuries per Incident: '+str(injured_HRL[ind]\/float(HRL[ind])*100)+ '%')\n    print('-'*50)","72814e58":"df_trr_id_injured.head()","bed351ce":"df_subject_id.head()","660dc997":"#putting the race of each subject in each TRR incident in\nrace_in_trr = {}\nfor ind in df_subject_id.index:\n    trr_str = df_subject_id['list_of_trr_id'][ind]\n    race = df_subject_id['race'][ind]\n    trr_lizt = trr_str.split(',')[:-1]\n    for trr in trr_lizt:\n        trr_int = int(trr)\n        race_in_trr[trr_int] = race\nout = dict(itertools.islice(race_in_trr.items(), N)) \nprint(out)","c4f0c898":"df_trr_id_injured['race'] = ''\ndf_trr_id['race'] = ''","4430f94e":"df_trr_id.head()","e08bb0a2":"#adding the race feature to the main dataframe and the injured dataframe\nfor ind in df_trr_id.index:\n    trr = df_trr_id['trr_id'][ind]\n    df_trr_id['race'][ind] = race_in_trr[trr]\nfor ind in df_trr_id_injured.index:\n    trr = df_trr_id_injured['trr_id'][ind]\n    df_trr_id_injured['race'][ind] = race_in_trr[trr]","9b4b1e5e":"df_trr_id_injured.head()","78ebf944":"df_trr_id_injured.head()","3801a187":"passive_resister = df_trr_id.loc[df_trr_id.highest_resistance_level == 0]","edd84b2d":"passive_race = {}\npassive_race['BLACK'] = 0\npassive_race['WHITE'] = 0\npassive_race['HISPANIC'] = 0\npassive_race['OTHER'] = 0\n\nfor ind in passive_resister.index:\n    race = passive_resister['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/PACIFIC ISLANDER'):\n        passive_race['OTHER'] +=1\n    else:\n        passive_race[race] +=1","6b0fea6a":"print('PERCENTAGE OF \\'PASSIVE RESISTER\\' BY RACE: \\n')\nfor race in passive_race.keys():\n    percentage = str(passive_race[race]\/float(len(passive_resister))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(passive_race[race]))\n    print('Total Number of Incidents where Passive Resister was Highest Resistance: '+str(len(passive_resister)))\n    print('Percentage of '+race+' Subjects who were Passive Resisters: '+percentage+'%')\n    print('-'*50)\n","95e94936":"data = list(passive_race.values())\nlabels = list(passive_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Passive Resisters by Race')\nplt.axis('equal')\nplt.show()","c86cef1c":"active_resister = df_trr_id.loc[df_trr_id.highest_resistance_level == 1]","5b93398c":"active_race = {}\nactive_race['BLACK'] = 0\nactive_race['WHITE'] = 0\nactive_race['HISPANIC'] = 0\nactive_race['OTHER'] = 0\n\nfor ind in active_resister.index:\n    race = active_resister['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/ALASKAN NATIVE'):\n        active_race['OTHER'] +=1\n    else:\n        active_race[race] +=1","30f88587":"print('PERCENTAGE OF \\'ACTIVE RESISTER\\' BY RACE: \\n')\nfor race in active_race.keys():\n    percentage = str(active_race[race]\/float(len(active_resister))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(active_race[race]))\n    print('Total Number of Incidents where Active Resister was Highest Resistance: '+str(len(active_resister)))\n    print('Percentage of '+race+' Subjects who were Active Resisters: '+percentage+'%')\n    print('-'*50)","b8e5b385":"data = list(active_race.values())\nlabels = list(active_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Active Resisters by Race')\nplt.axis('equal')\nplt.show()","f9e26827":"assailant_assault = df_trr_id.loc[df_trr_id.highest_resistance_level == 2]","f3ded7b3":"assailant_assault_race = {}\nassailant_assault_race['BLACK'] = 0\nassailant_assault_race['WHITE'] = 0\nassailant_assault_race['HISPANIC'] = 0\nassailant_assault_race['OTHER'] = 0\n\nfor ind in assailant_assault.index:\n    race = assailant_assault['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/ALASKAN NATIVE'):\n        assailant_assault_race['OTHER'] +=1\n    else:\n        assailant_assault_race[race] +=1","39d5490f":"print('PERCENTAGE OF ASSAILANT ASSAULT BY RACE: \\n')\nfor race in assailant_assault_race.keys():\n    percentage = str(assailant_assault_race[race]\/float(len(assailant_assault))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(assailant_assault_race[race]))\n    print('Total Number of Incidents where Assailant Assault was Highest Resistance: '+str(len(assailant_assault)))\n    print('Percentage of '+race+' Subjects who were Assailant Assaulters: '+percentage+'%')\n    print('-'*50)","1c0db430":"data = list(assailant_assault_race.values())\nlabels = list(assailant_assault_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Assailant Assault by Race')\nplt.axis('equal')\nplt.show()","7ab9ddac":"assailant_ab = df_trr_id.loc[df_trr_id.highest_resistance_level == 3]","552906f6":"assailant_ab_race = {}\nassailant_ab_race['BLACK'] = 0\nassailant_ab_race['WHITE'] = 0\nassailant_ab_race['HISPANIC'] = 0\nassailant_ab_race['OTHER'] = 0\n\nfor ind in assailant_ab.index:\n    race = assailant_ab['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/ALASKAN NATIVE'):\n        assailant_ab_race['OTHER'] +=1\n    else:\n        assailant_ab_race[race] +=1","b992fbdb":"print('PERCENTAGE OF ASSAILANT ASSAULT\/BATTERY BY RACE: \\n')\nfor race in assailant_ab_race.keys():\n    percentage = str(assailant_ab_race[race]\/float(len(assailant_ab))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(assailant_ab_race[race]))\n    print('Total Number of Incidents where Assailant Assault\/Battery was Highest Resistance: '+str(len(assailant_ab)))\n    print('Percentage of '+race+' Subjects who were Assailant Assaulters\/Battery: '+percentage+'%')\n    print('-'*50)","610dfedf":"data = list(assailant_ab_race.values())\nlabels = list(assailant_ab_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Assailant Assault\/Battery by Race')\nplt.axis('equal')\nplt.show()","2c13c138":"assailant_battery = df_trr_id.loc[df_trr_id.highest_resistance_level == 4]","f74fed3d":"assailant_battery_race = {}\nassailant_battery_race['BLACK'] = 0\nassailant_battery_race['WHITE'] = 0\nassailant_battery_race['HISPANIC'] = 0\nassailant_battery_race['OTHER'] = 0\n\nfor ind in assailant_battery.index:\n    race = assailant_battery['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/ALASKAN NATIVE'):\n        assailant_battery_race['OTHER'] +=1\n    else:\n        assailant_battery_race[race] +=1","db8aa7c3":"print('PERCENTAGE OF ASSAILANT BATTERY BY RACE: \\n')\nfor race in assailant_battery_race.keys():\n    percentage = str(assailant_battery_race[race]\/float(len(assailant_battery))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(assailant_battery_race[race]))\n    print('Total Number of Incidents where Assailant Battery was Highest Resistance: '+str(len(assailant_battery)))\n    print('Percentage of '+race+' Subjects who were Assailants committing Battery: '+percentage+'%')\n    print('-'*50)","11d038fa":"data = list(assailant_battery_race.values())\nlabels = list(assailant_battery_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Assailant Battery by Race')\nplt.axis('equal')\nplt.show()","63aed8b4":"deadly = df_trr_id.loc[df_trr_id.highest_resistance_level == 5]","7aeefa94":"deadly_race = {}\ndeadly_race['BLACK'] = 0\ndeadly_race['WHITE'] = 0\ndeadly_race['HISPANIC'] = 0\ndeadly_race['OTHER'] = 0\n\nfor ind in deadly.index:\n    race = deadly['race'][ind]\n    if(race == 'OTHER' or race == 'ASIAN\/PACIFIC ISLANDER' or race == 'NATIVE AMERICAN\/ALASKAN NATIVE'):\n        deadly_race['OTHER'] +=1\n    else:\n        deadly_race[race] +=1","b6af84a7":"print('PERCENTAGE OF ASSAILANT DEADLY FORCE BY RACE: \\n')\nfor race in deadly_race.keys():\n    percentage = str(deadly_race[race]\/float(len(deadly))*100)\n    print('Number of Incidents for '+race+' citizens: '+str(deadly_race[race]))\n    print('Total Number of Incidents where Assailant Deadly Force was Highest Resistance: '+str(len(deadly)))\n    print('Percentage of '+race+' Subjects who were Assailants presenting Deadly Force: '+percentage+'%')\n    print('-'*50)","25981aec":"data = list(deadly_race.values())\nlabels = list(deadly_race.keys())\nplt.pie(data,labels= labels,autopct='%1.2f%%')\nplt.title('Breakdown of Assailant Deadly Force by Race')\nplt.axis('equal')\nplt.show()","d547724e":"#BLACK\nblack_all = df_trr_id.loc[df_trr_id.race == 'BLACK']\nblack_denom = len(black_all)\n#print(black_denom)\nblack_num = black_all.highest_resistance_level.value_counts()\nblack_num.sort_index(inplace = True)\n#print(black_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST BLACK CITIZENS')\nprint()\nfor ind in black_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(black_num[ind]))\n    print('Number of Total Incidents Against BLACK Citizens: '+ str(black_denom))\n    print('Percentage of Total Inicidents at this Resistnace: '+str(black_num[ind]\/float(black_denom)*100)+ '%')\n    print('-'*50)","6dcb9dbf":"#HISPANIC\nhispanic_all = df_trr_id.loc[df_trr_id.race == 'HISPANIC']\nhispanic_denom = len(hispanic_all)\n#print(hispanic_denom)\nhispanic_num = hispanic_all.highest_resistance_level.value_counts()\nhispanic_num.sort_index(inplace = True)\n#print(hispanic_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST HISPANIC CITIZENS')\nprint()\nfor ind in hispanic_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(hispanic_num[ind]))\n    print('Number of Total Incidents Against HISPANIC Citizens: '+ str(hispanic_denom))\n    print('Percentage of Total Incidents at this Resistance: '+str(hispanic_num[ind]\/float(hispanic_denom)*100)+ '%')\n    print('-'*50)","2983acd7":"#WHITE\nwhite_all = df_trr_id.loc[df_trr_id.race == 'WHITE']\nwhite_denom = len(white_all)\n#print(white_denom)\nwhite_num = white_all.highest_resistance_level.value_counts()\nwhite_num.sort_index(inplace = True)\n#print(white_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST WHITE CITIZENS')\nprint()\nfor ind in white_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(white_num[ind]))\n    print('Number of Total Incidents Against WHITE Citizens: '+ str(white_denom))\n    print('Percentage of Incidents at this Resistance: '+str(white_num[ind]\/float(white_denom)*100)+ '%')\n    print('-'*50)","38ff855f":"#OTHER\nother_all = df_trr_id.loc[df_trr_id.race == 'OTHER']\nother_denom = len(other_all)\n#print(other_denom)\nother_num = other_all.highest_resistance_level.value_counts()\nother_num.sort_index(inplace = True)\n#print(other_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST \\'OTHER\\' CITIZENS')\nprint()\nfor ind in other_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(other_num[ind]))\n    print('Number of Total Incidents Against \\'OTHER\\' Citizens: '+ str(other_denom))\n    print('Percentage of Incidents at this Resistance: '+str(other_num[ind]\/float(other_denom)*100)+ '%')\n    print('-'*50)","eda6ca9d":"#ASIAN\/PACIFIC ISLANDER\nasian_all = df_trr_id.loc[df_trr_id.race == 'ASIAN\/PACIFIC ISLANDER']\nasian_denom = len(asian_all)\n#print(asian_denom)\nasian_num = asian_all.highest_resistance_level.value_counts()\nasian_num.sort_index(inplace = True)\n#print(asian_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST ASIAN\/PACIFIC ISLANDER CITIZENS')\nprint()\nfor ind in asian_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(asian_num[ind]))\n    print('Number of Total Incidents Against ASIAN Citizens: '+ str(asian_denom))\n    print('Percentage of Incidents at this Resistance: '+str(asian_num[ind]\/float(asian_denom)*100)+ '%')\n    print('-'*50)","a78d365c":"#NATIVE AMERICAN\/ALASKAN NATIVE\nnative_all = df_trr_id.loc[df_trr_id.race == 'NATIVE AMERICAN\/ALASKAN NATIVE']\nnative_denom = len(native_all)\n#print(native_denom)\nnative_num = native_all.highest_resistance_level.value_counts()\nfor i in range (0,6):\n    key = float(i)\n    if key not in native_num.keys():\n        native_num[key] = 0\nnative_num.sort_index(inplace = True)\n#print(native_num)\nprint('BREAKDOWN OF HIGHEST RESISTANCE LEVEL AMONGST NATIVE AMERICAN\/ALASKAN NATIVE CITIZENS')\nprint()\nfor ind in native_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Incidents at this Resistance: '+ str(native_num[ind]))\n    print('Number of Total Incidents Against NATIVE AMERICAN Citizens: '+ str(native_denom))\n    print('Percentage of Incidents at this Resistance: '+str(native_num[ind]\/float(native_denom)*100)+ '%')\n    print('-'*50)","d1d5ab87":"#NOTE: 'OTHER' category is now Other, Asian, and Native American combined\n#putpercetnage data into dicts for graphing acess\nblack_dict ={}\nhispanic_dict = {}\nwhite_dict = {}\nother_dict = {}\nfor i in range (0,6):\n    key = float(i)\n    black_dict[key] = black_num[key]\/black_denom*100\n    hispanic_dict[key] = hispanic_num[key]\/hispanic_denom*100\n    white_dict[key] = white_num[key]\/white_denom*100\n    other_dict[key] = (other_num[key]+asian_num[key]+native_num[key])\/(other_denom+asian_denom+native_denom)*100\nprint(black_dict)\nprint(hispanic_dict)\nprint(white_dict)\nprint(other_dict)","1a96d60b":"#graph above data\nn = 6\nindex = np.arange(n)\nwidth = .15\nfig, ax = plt.subplots()\ny1 = list(black_dict.values())\ny2 = list(hispanic_dict.values())\ny3 = list(white_dict.values())\ny4 = list(other_dict.values())\nrects1 = ax.bar(index, y1, width, color='r')\nrects2 = ax.bar(index + width, y2, width, color='y')\nrects3 = ax.bar(index + 2*width, y3, width, color='b')\nrects4 = ax.bar(index + 3*width, y4, width, color='m')\nax.set_ylabel('Percetange')\nax.set_title('Percentage of TRR Incidents At Each Resistance Level Per Race')\nax.set_xticks(index + width \/ 2)\n#ax.xticks(rotation=90)\nax.set_xticklabels(('Passive Resister', 'Active Resister', 'Assailant Assault', 'Assailant Assault\/Battery', 'Assailant Battery', 'Assailant Deadly Force'), rotation = 45)\nax.legend((rects1[0], rects2[0], rects3[0], rects4[0]), ('BLACK', 'HISPANIC', 'WHITE', 'OTHER'), bbox_to_anchor=(1.28, 1.02))\nplt.show()","47562bbf":"#breakdown of trr with injuries by race\nrace_inj_num = df_trr_id_injured.race.value_counts()","f8d13e36":"#breakdown of incidents with an injury by race\nrace_inj_denom = df_trr_id.race.value_counts()\nprint(race_inj_denom)","e140bfa4":"#printing out the brekadown percetnage of trr's resulting in injury by race\nfor ind in race_inj_num.index:\n    print('Race: ' + ind)\n    print('Number of Injuries involving '+ind+' citizens: '+ str(race_inj_num[ind]))\n    print('Number of Incidents involving '+ind+' citizens: '+ str(race_inj_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(race_inj_num[ind]\/float(race_inj_denom[ind])*100)+ '%')\n    print('-'*50)","72489bc4":"#BLACK\nblack_all = df_trr_id.loc[df_trr_id.race == 'BLACK']\nblack_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'BLACK']\nblack_denom = black_all.highest_resistance_level.value_counts()\n#print(black_denom)\nblack_num = black_injured.highest_resistance_level.value_counts()\nblack_num.sort_index(inplace = True)\n#print(black_num)\nprint('PERCENTAGE OF INJURIES AMONGST BLACK CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in black_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(black_num[ind]))\n    print('Number of Incidents: '+ str(black_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(black_num[ind]\/float(black_denom[ind])*100)+ '%')\n    print('-'*50)","488c81eb":"#HISPANIC\nhispanic_all = df_trr_id.loc[df_trr_id.race == 'HISPANIC']\nhispanic_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'HISPANIC']\nhispanic_denom = hispanic_all.highest_resistance_level.value_counts()\n#print(hispanic_denom)\nhispanic_num = hispanic_injured.highest_resistance_level.value_counts()\nhispanic_num.sort_index(inplace = True)\n#print(hispanic_num)\nprint('PERCENTAGE OF INJURIES AMONGST HISPANIC CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in hispanic_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(hispanic_num[ind]))\n    print('Number of Incidents: '+ str(hispanic_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(hispanic_num[ind]\/float(hispanic_denom[ind])*100)+ '%')\n    print('-'*50)","7f076cb2":"#WHITE\nwhite_all = df_trr_id.loc[df_trr_id.race == 'WHITE']\nwhite_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'WHITE']\nwhite_denom = white_all.highest_resistance_level.value_counts()\n#print(white_denom)\nwhite_num = white_injured.highest_resistance_level.value_counts()\nwhite_num.sort_index(inplace = True)\n#print(white_num)\nprint('PERCENTAGE OF INJURIES AMONGST WHITE CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in white_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(white_num[ind]))\n    print('Number of Incidents: '+ str(white_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(white_num[ind]\/float(white_denom[ind])*100)+ '%')\n    print('-'*50)","c2707e6d":"#OTHER\nother_all = df_trr_id.loc[df_trr_id.race == 'OTHER']\nother_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'OTHER']\nother_denom = other_all.highest_resistance_level.value_counts()\n#print(other_denom)\nother_num = other_injured.highest_resistance_level.value_counts()\nother_num.sort_index(inplace = True)\n#print(other_num)\nprint('PERCENTAGE OF INJURIES AMONGST \\'OTHER\\' CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in other_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(other_num[ind]))\n    print('Number of Incidents: '+ str(other_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(other_num[ind]\/float(other_denom[ind])*100)+ '%')\n    print('-'*50)","ecfd2f03":"#ASIAN\/PACIFIC ISLANDER\nasian_all = df_trr_id.loc[df_trr_id.race == 'ASIAN\/PACIFIC ISLANDER']\nasian_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'ASIAN\/PACIFIC ISLANDER']\nasian_denom = asian_all.highest_resistance_level.value_counts()\n#print(asian_denom)\nasian_num = asian_injured.highest_resistance_level.value_counts()\nasian_num.sort_index(inplace = True)\n#print(asian_num)\nprint('PERCENTAGE OF INJURIES AMONGST ASIAN\/PACIFIC ISLANDER CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in asian_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(asian_num[ind]))\n    print('Number of Incidents: '+ str(asian_denom[ind]))\n    print('Percentage of Injuries per Incident: '+str(asian_num[ind]\/float(asian_denom[ind])*100)+ '%')\n    print('-'*50)","a3b9eb80":"#NATIVE AMERICAN\/ALASKAN NATIVE\nnative_all = df_trr_id.loc[df_trr_id.race == 'NATIVE AMERICAN\/ALASKAN NATIVE']\nnative_injured = df_trr_id_injured.loc[df_trr_id_injured.race == 'NATIVE AMERICAN\/ALASKAN NATIVE']\nnative_denom = native_all.highest_resistance_level.value_counts()\n#print(native_denom)\nnative_num = native_injured.highest_resistance_level.value_counts()\nnative_num.sort_index(inplace = True)\n#print(native_num)\nfor i in range (0,6):\n    key = float(i)\n    if key not in native_num.keys():\n        native_num[key] = 0\n        native_denom[key] = 0\nprint('PERCENTAGE OF INJURIES AMONGST NATIVE AMERICAN\/ALASKAN NATIVE CITIZENS PER RESISTANCE LEVEL')\nprint()\nfor ind in black_num.index:\n    print('Level of Resistance: ' + str(rl_dict[ind]))\n    print('Number of Injuries: '+ str(native_num[ind]))\n    print('Number of Incidents: '+ str(native_denom[ind]))\n    if native_denom[ind] == 0:\n        print('Percentage of Injuries per Incident: 0%')\n    else:\n        print('Percentage of Injuries per Incident: '+str(native_num[ind]\/float(native_denom[ind])*100)+ '%')\n    print('-'*50)","5de6c642":"#NOTE: 'OTHER' category is now Other, Asian, and Native American combined\nblack_dict ={}\nhispanic_dict = {}\nwhite_dict = {}\nother_dict = {}\nfor i in range (0,6):\n    key = float(i)\n    black_dict[key] = black_num[key]\/black_denom[key]*100\n    hispanic_dict[key] = hispanic_num[key]\/hispanic_denom[key]*100\n    white_dict[key] = white_num[key]\/white_denom[key]*100\n    other_dict[key] = (other_num[key]+asian_num[key]+native_num[key])\/(other_denom[key]+asian_denom[key]+native_denom[key])*100\nprint(black_dict)\nprint(hispanic_dict)\nprint(white_dict)\nprint(other_dict)","b367c9e9":"n = 6\nindex = np.arange(n)\nwidth = .15\nfig, ax = plt.subplots()\ny1 = list(black_dict.values())\ny2 = list(hispanic_dict.values())\ny3 = list(white_dict.values())\ny4 = list(other_dict.values())\nrects1 = ax.bar(index, y1, width, color='r')\nrects2 = ax.bar(index + width, y2, width, color='y')\nrects3 = ax.bar(index + 2*width, y3, width, color='b')\nrects4 = ax.bar(index + 3*width, y4, width, color='m')\nax.set_ylabel('Percetange')\nax.set_title('Percentage of TRR Incidents Resulting in Injury Based off Subject Resistance')\nax.set_xticks(index + width \/ 2)\n#ax.xticks(rotation=90)\nax.set_xticklabels(('Passive Resister', 'Active Resister', 'Assailant Assault', 'Assailant Assault\/Battery', 'Assailant Battery', 'Assailant Deadly Force'), rotation = 45)\nax.legend((rects1[0], rects2[0], rects3[0], rects4[0]), ('BLACK', 'HISPANIC', 'WHITE', 'OTHER'), bbox_to_anchor=(1.1, 1.05))\nplt.show()","084c7e27":"beat_injury = df_trr_id_injured.beat.value_counts()","eb370ab9":"#create counter for the 20 beats with highest number of injuries\ntop20_injured = {}\nfor beat in beat_injury.index[:20]:\n    top20_injured[beat] = beat_injury[beat]\nprint(top20_injured)","9a3f435f":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_injured.keys()), y = list(top20_injured.values()), order = top20_injured, label = 'small')\nax.set_title('20 Beats with HIGHEST Number of Injuries')\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\nax.tick_params(labelsize=8.5)\nplt.show()","d3f6eef4":"#create counter for the 20 beats with lowest number of injuries\nlow20_injured = {}\nfor beat in beat_injury.index[-20:]:\n    low20_injured[beat] = beat_injury[beat]\nprint(low20_injured)","7dca0d82":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_injured.keys()), y = list(low20_injured.values()), order = low20_injured, label = 'small')\nax.set_title('20 Beats with LOWEST Number of Injuries')\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\nax.tick_params(labelsize=8.5)\nplt.show()","5f5e8127":"#sort above GREATEST counter by district\ntop20_injured_district = {}\nfor beat in top20_injured:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in top20_injured_district.keys():\n        top20_injured_district[district] += 1\n    else:\n        top20_injured_district[district] = 1\n#print(top20_injured_district)\ntop20_injured_district_sorted_keys = sorted(top20_injured_district, key=top20_injured_district.get, reverse=True)\ntop20_injured_district_sort ={}\nfor district in top20_injured_district_sorted_keys:\n    top20_injured_district_sort[district] = top20_injured_district[district]\nprint(top20_injured_district_sort)","29b9d074":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(top20_injured_district_sort.keys()), y = list(top20_injured_district_sort.values()), order = top20_injured_district_sort, label = 'small')\nax.set_title('District with HIGHEST Number of Injuries')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","0b15bd74":"#sort above LEAST counter by district\nlow20_injured_district = {}\nfor beat in low20_injured:\n    last2 = beat%100\n    beat = beat - last2\n    district = int(beat\/100)\n    if district in low20_injured_district.keys():\n        low20_injured_district[district] += 1\n    else:\n        low20_injured_district[district] = 1\n#print(low20_injured_district)\nlow20_injured_district_sorted_keys = sorted(low20_injured_district, key=low20_injured_district.get, reverse=True)\nlow20_injured_district_sort ={}\nfor district in low20_injured_district_sorted_keys:\n    low20_injured_district_sort[district] = low20_injured_district[district]\nprint(low20_injured_district_sort)","3eb486be":"#graph of above counter\nsns.set(font_scale = 1)\nax = sns.barplot(x = list(low20_injured_district_sort.keys()), y = list(low20_injured_district_sort.values()), order = low20_injured_district_sort, label = 'small')\nax.set_title('Districts with LOWEST Number of Injuries')\nax.set_xticklabels(ax.get_xticklabels())\nax.tick_params(labelsize=8.5)\nplt.show()","748a9f3a":"print('TOP 20 BEATS IN CRIME, ARREST, RATIO (arrest to crime), AND INJURIES\\n')\nprint('CRIME: ')\nprint(top20_crime_district_sort)\nprint('-'*60)\nprint('ARREST: ')\nprint(top20_arrest_district_sort)\nprint('-'*60)\nprint('RATIO: ')\nprint(top20_ratio_district_sort)\nprint('-'*60)\nprint('INJURIES: ')\nprint(top20_injured_district_sort)\nprint('-'*60)","c277af29":"print('BOTTOM 20 BEATS IN CRIME, ARREST, RATIO (arrest to crime), AND INJURIES\\n')\nprint('CRIME: ')\nprint(low20_crime_district_sort)\nprint('-'*60)\nprint('ARREST: ')\nprint(low20_arrest_district_sort)\nprint('-'*60)\nprint('RATIO: ')\nprint(low20_ratio_district_sort)\nprint('-'*60)\nprint('INJURIES: ')\nprint(low20_injured_district_sort)\nprint('-'*60)","7d01eb8f":"outF = open(\"outputBeats_EDA_TOP.txt\", \"w\")","efc4e424":"df_beat_crime = df_beat.sort_values(by = 'number_of_reported_crimes', ascending = False)\ndf_beat_crime.head(20)","6d9e9a3e":"outF.write(\"T20 Crimes: \\n\")\nfor ind in df_beat_crime.index[:20]:\n    beat = str(df_beat_crime['beat'][ind])\n    outF.write(beat+\" \")\noutF.write('\\n')","3eceea20":"df_beat_arrests = df_beat.sort_values(by = 'arrests_by_beat', ascending = False)\ndf_beat_arrests.head(20)","06770a52":"outF.write(\"T20 Arrests: \\n\")\nfor ind in df_beat_arrests.index[:20]:\n    beat = str(df_beat_arrests['beat'][ind])\n    outF.write(beat+\" \")\noutF.write('\\n')","70d8e8d2":"df_beat_ratio = df_beat.sort_values(by = 'arrest_to_crime_ratio', ascending = False)\ndf_beat_ratio.head(20)","430892f0":"outF.write(\"T20 Ratio: \\n\")\nfor ind in df_beat_ratio.index[:20]:\n    beat = str(df_beat_ratio['beat'][ind])\n    outF.write(beat+\" \")\noutF.write('\\n')","3e253929":"outF.write(\"T20 Ratio: \\n\")\nfor beat in top20_injured.keys():\n    beat = str(beat)\n    outF.write(beat+\" \")\noutF.write('\\n')","2601be14":"from IPython.display import FileLink\nFileLink(r'outputBeats_EDA_TOP.txt')","82b28a34":"Key Takeaways:\n* Already, we see the vast majority of subjects are Black, young (<40), males\n* Native Americans and Asians are rarely invovled in such incidents, possibly due to the fact that they are the true minority demographics living in the Chicago-Metro Area\n* The majority of subjects involved in such incidents were in their 20's, though many teens and subjects in their 30's were also involved. Those over 40 were invovled in considerably fewer incidents\n* Males across all age groups and races were invovled in nearly 7 times more incidents than females\n* Black Females were involved in close to the same number TRR incidents as Hispanic males\n* White Males were in a considerable amount of incidents, though paling in comparison to Black Males, yet comparable to Black Females\n* White Females and Hispanic Females were involved in nearly the same amount of incidents\n\n**Next Steps...**\n* Determine how these numbers stack up propotionally to the demographic makeup of Chicago and even the police beats (though at a later step for beat info)\n* Possibly enumerate the correlation of race, age, and gender to likelihood of being invovled in a TRR incident\n","887874cb":"Now, let's see the number of subjects by Age:\n\nThere are too many ages to enumerate each on a plot, so we'll make age bands grouped by 10's","caad9ce8":"Now that we have a race feature in the TRR ID dataframe, we can do sort a lot of the TRR data by race...\n\nFirst, we will look at the breakdown of resistance levels across race...\n\nHere, we will lump the race categories of 'Other', 'Asian\/Pacific Islander', and 'Native American\/Alaskan Native' together into one category called 'Other'. This is because these three catgories are invovled in such few incidents (<0.1% of all resistance levels) to be meaningful by themselves.\n\n*Note, we will do this \"Other\" grouping very often when we look at trends by race from now on since the aforementioned groups are invovled in very few incidents.*","c4aba95a":"We will do a similar sort by districts here too...","c065cc88":"Now, we will look at the breakdown of resistance levels across race, within each race (i.e. the number of Black Active Resisters\/Number of Black TRR Subjects)","9fea50db":"Now, the districts with the lowest number of crimes...","8b00c237":"We will do the same thing with action categories to determine how police officers most commonly responded across all situtaions...","453bda65":"We see nearly 25% of incidents involving a passive resistor result in injury and 28% involving an active resistor (who doesn't show any signs of threat or assault) result in injury. (Note: when we say \"injury\", we mean reported or alleged). At the highest level of resistance (Assailant Deadly Force), we see slightly more than half of all such incidents result in injury.","162929f8":"Again, we'll look at the above data now sorted by district...","448df0a8":"Key Takeaways:\n* Blacks, Hispanics, and Whites are the predominant races of subject invovled in TRR incidents. Even when we combine Other, Asian, and Native American into one category, they are still less than 5% of each resistance level\n* Blacks subjects make up a large majority of each resistance levels (~75%)\n* Hispanic subjects usually make up around 15% of each resistance level, white subjects are about 8% of each resistance level\n\nPreliminary Prediction:\n* The prominence of Black subjects at each resistance level would seem to suggest they are invovled in a greater amount of police brutality incidents, likely due to their prominence at each resistance level. As we would expect police to take reasonable action against all subjects showing a certain level of resistance, Black citizens will likely be involved in more injuries\/police brutaility instances if we assume these events occur with even the slightest level of regularity. Thus, for every subject who presents signs of resistance in any capacity, we would expect a Black citizen to be invovled roughly 3\/4 of the time, and thus be 3\/4 as likely to be the victim of a police-related injury","82ad7db7":"We see a similar distribution to the number of trr incidents sorted by resitance level, thus the data here isn't too surprising. Rather, we should look at the percentage of trr incidents reporting injury per each resistance level for some more meaningful data...","836e73dd":"Not much is happening here...it would be helpful to make a bar chart of the beats with the most\/least number of trr reports:","f9b29272":"Let's see the distribution of resistance levels across these events...\n\nFor reference: \n\nPassive Resister = 0\n\nActive Resister = 1\n\nAssailant Assault = 2\n\nAssailant Assault\/Battery = 3\n\nAssailant Battery = 4\n\nAssailant Deadly Force = 5\n\n*Note: Assailant Assault\/Battery and Assailalnt Battery are of relatively similar \"ranking\". Do not assume Assailant Battery is significantly worse than Assailant Assault\/Battery as the two are realtively comparable*\n","81f894b1":"We will sort the two above graphs by district as well....","85c9c019":"Now the districts with the lowets number of injuries...","07a6a4f9":"Looking at the TRR incidents were an injury occured or allegedly occured...","1007d0f7":"The districts with the lowest arrest to crime ratio...","a62b644b":"First, we need to make a column that holds this ratio","0580c48f":"Turning to 20 beats with lowest number of arrests...","9accd37b":"We will graph all the above data side-by-side. In order to do this, we will compress the 'Other', Asain\/Pacific Islander, and Native American data together into the 'Other' category...","286858df":"Let's look at all our District data side by side and see if we can notice some patterns...","f7f02a52":"Now the Districts with the lowest number of arrests...","849ae3c7":"We can sort the above data by District too, as that will be easier to draw geographical conclusions from than many sparse beats...","a13dca6d":"In total, we are looking at 39942 different TRR events...","014f1fca":"Now, number of arrests:","47c9f7ef":"We see police mostly took actions corresponding to categories 3 and 4...below is the actioan category dictionary for reference:\n\n2.0: 'Other Force\n\n3.0: Physical Force - Holding, Taser Display\n\n4.0: Physical Force - Stunning, Chemical\n\n5.0: Impact Weapon, Taser, Physical Force - Direct Mechanical\n\n6.0: Firearm ","9ac342ad":"The 20 beats with the lowest number of reported crimes...","6e776748":"We can look at Gender too:","bff7d0ea":"Let's see the combined relationship of gender and race to trr incidents:","a452ba16":"We see the most common level of resistance across all incidents is an Active Resister, but the second highest is Assailant Battery, which means the subject acted in a way that harmed or offesnively contacted the police officer without his\/her consent","0fbd854d":"Let's see if we can stratify the above data by race...","cc63aad3":"Since each gives a list of action categories, we will have to go into each list and count the frequencies of each category...","74f4e139":"Preview our data:","4eaed913":"Now the 20 beats wtih the lowets number of injuries...","18a3eeb7":"We'll do a similar process with subject actions...","ea36416d":"Perhaps, it will be helpful to look at the beats with the most amount of injuries and cross-reference with the beats with the most number of crimes\/arrests\/arrest to crime ratio...","27b2266d":"Key Takeaways: \n* Again, we see the prominence of District 11 and even 15 in having the highest number of TRR reports. These beats were particularly high in arrests ... a possible link between the two\n\n* District 6, which was high in reported crimes, was slightly more prevalent in the number of TRR reports, but District 4, which was also high in reported crimes, wasn\u2019t very present here in TRR reports\n\n* A much wider variance of districts here compared to number of crimes, arrests comparisons made earlier\n\n* Districts 19, 12, and 16 were prevalent all across the fewest amount of TRR reports, matching the trend we saw of these same districts having the lowest number of arrests and reported crimes\n\n**Next Steps...**\n* It is very much worthwhile to see the demographic makeups\/location of the districts we noted for some baseline data\n* Within each beat, we should track a ratio of trr_reports:arrests and trr_reports:crimes\n* We should also have an aggregate average of amount of trr_reports to arrests and crimes to determine how often trr_reports are filed in these instances","fa14d8fa":"The above output tells us the breakdown of injuries (again, officer-reported or alleged) across all TRR incidents, sorted by race.\n\nWe can't glean much from this data since the breakdown is identical to the number of crimes and TRR incidents when broken down by race (i.e. Black citizens are invovled in more crimes, arrests, and TRR incidents than the other races, Native Americans the least). Thus, we will look at percentages again...","eddfb489":"# BEAT DATA\n\n20 beats with highest and lowest # of reported crimes, arrests, and arrest:crime ratio","ea9f1b7b":"# Chicago PD Arrest and TRR Data Analysis!\n\nWelcome to our notebook! We have collected and cleaned data from the Chicago PD regarding the arrests, reported crimes, and TRR incidents that the police department has collected between 2004 and 2016. Note, however, this is an active notebook and data and analyis are constnatly being added, edited, and refined. Please feel free to scroll through our preliminary findings and note any comments\/concerns\/suggestions about our data. We initially began this project in the wake of Mr. George Floyd's death and wanted to dive deeper into the statistics behind police brutality and systemic racism. Our hearts go out to the families and loved ones of all victims of police brutality and systemic racism, here and around the world, as we stand with our brothers and sisters in the movement for change and reform.  Enjoy! - Logan and Robert\n\n*Note to the Reader:  If the past month has taught us anything, it's that our city's police department's are far from equitable. With that in mind, realize our data was collected directly from the Chicago PD public records website, with all of our data being official police reports filled out by police and filed by police. Take our data with that caveat in mind. We seek not to divide, rather, to inform.*\n\nSome jargon you'll encounter: \n\n* TRR Incident: A tactical response report incident; A TRR documents the actions of an officer and civilian subject in an encounter where the officer used a substantial physical force or the civilian alleged that they were injured by the officer. \n* Subject: The civilian(s) involved in a TRR incident\n* Member: The police officer(s) involved in a TRR incident\n* District: The Chicago PD is split into 22 distinct regional police districts. The officers in each district are responsible only to their district, but all officers comprise the greater Chicago Police Force. We only have 'Beat' data, but the first two digits of a 4-digit beat and the first digit of a 3 digit beat will represent which beat that district is in. (i.e. Beat '123' is in District 1, and is Beat 23 within District 1).\n* Beat: the territory and time that a police officer patrols. Think of these as sub-districts of each of the 22 police districts. We only have 'Beat' data, but the first two digits of a 4-digit beat and the first digit of a 3 digit beat will represent which beat that district is in. (i.e. Beat '123' is in District 1, and is Beat 23 within District 1).\n* Ratio: 'Ratio' is a term we use for the ratio of arrests to crimes in each beat. It is mathematically equivalent to the percentage of arrests to reported crimes, as all arrests are reported crimes\n* Assault: act which causes the victim to apprehend imminent physical harm. It\u2019s a threat\u2014real or implied\u2014of a battery, or an incomplete battery.\n* Battery: the actual act causing the physical harm","c7c9a508":"**Key Observations:**\n\n* Beats in Police Districts 4 and 6 typically had the highest number of reported crimes, District 4 also had some high number of arrests\n* Beats in Police Districts 2, 12, 16, and 19 posted some of the lowest results across all categories\n* Beats in Districts 7, 8, and 25 also had prevelant results at the upper ends of the crime and arrest categories\n* Beats in Districts 10, 11, and 15 were consistently high in all three categories\n* Beats 1112, 1522, was in the top 20 in all 3 categories, 713 in crimes and arrests\n* Beats that neighbor each other (beat #'s are within a small amount [~5] of each other) often have similar stats, unsurprisingly\n\n**Next Steps...**\n* Examine the demographic data in these beats...we will make the preliminary assumption that those consistently at the top of all 3 categories (and even the number of arrests and reported crimes categories) will have predominantly black populations\n* Determine if beats with high frequencies of escalated police force matches the beats at the top of these categories","e01bbdf2":"First, let's see the race breakdown of the subjects:","0f40b40d":"Roughly 13% (2634\/20488) of incidents where an alleged injury was reported, a police officer did NOT report this same injury \n\nLet's look at the number of injuries (reported or alleged) by resistance level\n\n\n*From now on, when we refer to 'injury', we mean an injury was officer-reported or subject-alleged*","868e9fcb":"Load in Dataframes:","1a01eb1c":"Now, let's sort the trr events by event id and see what we can glean...","5c3b47d8":"We are going to graph the above data for each resitance level, but we will omit combine Native American group with the Asian group and the Other group since they have so few incidents compared to the other 3 groups and could produce very skewed data...","bcf8f308":"# TRR ID","d2b0c3c7":"Now, let's examine the beats with highest and lowest arrest to reported crime ratio, which is equivalent to the percentage of reported crimes leading to arrests:","4bd05334":"# TRR BY BEAT:","666da459":"Key Takeaways:\n* Like in the analysis of the arrest, crime, and ratio data by district, we see the same districts are prevelant in the injury data:\n    * Districts 11, 15, 6, and 5 (even 8) all have beats in the top 20 of all 4 categories\n    * Districts 12, 19, 16, and 2  all have beats in the bottom 20 of all 4 categories\n* This shouldn't really be surprising, as the beats with the most amount of crimes will naturally have more arrests and likely have more instances of injury due to the greater volume of crimes and subsequent police presence.\n* We can use the relevant geogprahical data (once obtained) to add some more context to our data, but my initial hypothesis is that the inclusion of demographic data via location will NOT be at ends with our previous findings on race across all TRR incidents","333b936a":"Perhaps it would be useful to also see the number of trr incidents by subject id and race:\n\nFirst, a column with the number of trr incidents attributed to each subject id should be made.","3003bf58":"*This graph, at first glance, might be a little misleading...This chart shows the districts with the most beats with the LOWEST number of crimes (i.e. District 12 has 6 beats that are all in the list of the 20 Beats with the LOWEST Number of Crimes). All future district graphs will function in this manner*","eabbe879":"The percetnage of injuires amongst black civilians is roughly 6% lower to all other ethnic groups (excluding Native Americans) on average. This is certainly surprising at first glance, but we must take into account the fact that our raw data (which is police-reported) could hold some inital bias, possibly racially. Keeping that in mind, let's isolate each racial group and look at the percentage of injuries among incidents when we categorize by the highest reported subject resistance level...","cab88c73":"Like we did much earlier, we will sort the beats with the most\/least number of injuries by district and cross-reference with the districts we noted earlier for arrests and crime....","191c3ddb":"Starting with Reported Crimes:","cb2ea3af":"To clear up some confusion (I graphed the wrong data here and too lazy to change it), the percentages graphed represent the number of resisters of that race at that given resistance level divided by the number of total resisters in that RACE. (i.e. the number of Black Active Resisters\/Number of Black TRR Subjects)\n\nKey Takeaways:\n* We see that at each level of resistance, the percentage of incidents with the given level of resistance as its highest level of resistance within each race is relatively equal\n    * What this means, in essence, is that each race has relatively the same percentage of Active Resistors, Assailant Assaulters, etc. \n* There are minor spikes in races for each resistance level (Blacks and Others in Acitve Resister, Whites in Assailant Battery), but very few are significant\n* The majority of levels of resistance in each race where Active Resisters or Assailant Battery (the two 'intermediate' levels), while the least common levels of resistance where Passive Resister and Assailant Deadly Force (the two extreme levels, so to speak)","ffdcde0d":"Key Takeaways: \n\n* Altough this is just the last graph we created with a little refinement, it's still very surprising to see Black citizens having the lowest percentage of injuries per police encounter across nearly all resitance levels\n* Rather, we see Hispanic and White citizens having the highest percentages of injuries per police encounter, especially at the lower levels of resistance where we would presume racial profiling would be more prevelant\n* One issue that continues to irk is the possible inconsistency\/inaccuracy of our RAW data. After all, these reports were filed by police officers themselves and if the last month has taught us anything, it is that the police don't always hold all suspects to the same standard. Thus, we suspect officers may not report an injury for certain racial groups when an injury did occur. ","a7a2688f":"# SUBJECT ID:"}}