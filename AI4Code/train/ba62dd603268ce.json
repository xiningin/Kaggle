{"cell_type":{"b8e0fbb2":"code","b0c3aed7":"code","eb892613":"code","4f296723":"code","cbd77cf4":"code","9a0060ee":"code","da54de19":"code","bdcd63a2":"code","5914e672":"code","1f80b12f":"code","8ad0a7a4":"code","6b3c8a2f":"code","aeaf3a07":"code","fefd69d5":"code","a3e9f6e8":"code","40751dfa":"code","1a2f0a22":"code","c81c507d":"code","57df1b45":"code","5fc6384b":"code","5cddc06c":"code","63c657d7":"code","17365533":"code","9426119f":"code","d0809cf0":"code","72aae715":"code","7ba99ec7":"code","eb3c42bf":"code","fe2b3f4d":"code","994b61c0":"code","2cb4445c":"code","2740562a":"code","ae2688ed":"code","d3c7c25d":"code","c10f2ced":"code","097df03d":"code","1cc283c2":"code","973eb2f8":"code","9aa1d322":"code","de97cb02":"code","a5502731":"markdown","0db8c98f":"markdown","d6b05933":"markdown","9a0d6cde":"markdown","78e6d3fd":"markdown","5fa3028a":"markdown","30bfd51b":"markdown","cacf8e5a":"markdown","e0499a53":"markdown","996e7dbf":"markdown","19fb0c46":"markdown","e8ed6541":"markdown","abe52781":"markdown","da920da6":"markdown","ac16edc2":"markdown","76ebd9ba":"markdown","7d1dd45a":"markdown","6c1a00c4":"markdown","1e77065d":"markdown","fee76531":"markdown","5d869249":"markdown","b6bb2630":"markdown","9c2dd325":"markdown","bfbc7d76":"markdown","a814b917":"markdown","74548e1c":"markdown","30ee7d95":"markdown","b48c1ced":"markdown","366ae808":"markdown","5eaa265c":"markdown","28c800df":"markdown","66ef63db":"markdown","208f6483":"markdown","9b65bc08":"markdown","b1102ddc":"markdown","f84af693":"markdown","a5287c96":"markdown","cbb32dd1":"markdown","873271c1":"markdown","a43169de":"markdown"},"source":{"b8e0fbb2":"import pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split","b0c3aed7":"diabetes = pd.read_csv('\/kaggle\/input\/ml-basics-data-files\/diabetes.csv')\ndiabetes.head()","eb892613":"# Separate features and labels\nfeatures = ['Pregnancies','PlasmaGlucose','DiastolicBloodPressure','TricepsThickness','SerumInsulin','BMI','DiabetesPedigree','Age']\nlabel = 'Diabetic'\nX, y = diabetes[features].values, diabetes[label].values\n\nfor n in range(0,4):\n    print(f\"Patient {str(n+1)}, \\n  Features: {list(X[n])} \\n  Label: {y[n]}\")","4f296723":"features = ['Pregnancies','PlasmaGlucose','DiastolicBloodPressure','TricepsThickness','SerumInsulin','BMI','DiabetesPedigree','Age']\nfor col in features:\n    diabetes.boxplot(column=col, by='Diabetic', figsize=(6,6))\n    plt.title(col)\nplt.show()","cbd77cf4":"# Split data 70%-30% into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3, random_state= 0)\nprint (f'X_train: {X_train.shape} \\nX_test: {X_test.shape} \\ny_train: {y_train.shape} \\ny_test: {y_test.shape}')","9a0060ee":"# Train the model\nfrom sklearn.linear_model import LogisticRegression\n\n# Set regularization rate\nreg = 0.01\n\n# train a logistic regression model on the training set\nmodel = LogisticRegression(C=1\/reg, solver=\"liblinear\").fit(X_train, y_train)\nprint (model)","da54de19":"predictions = model.predict(X_test)\nprint('Predicted labels: ', predictions)\nprint('Actual labels:    ' ,y_test)","bdcd63a2":"from sklearn.metrics import accuracy_score\n\nprint(f\"Accuracy score: {accuracy_score(y_test, predictions)}\")","5914e672":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, predictions))","1f80b12f":"from sklearn.metrics import precision_score, recall_score\n\nprint(\"Overall Precision:\",precision_score(y_test, predictions))\nprint(\"Overall Recall:\",recall_score(y_test, predictions))","8ad0a7a4":"from sklearn.metrics import confusion_matrix\n\n# Print the confusion matrix\ncm = confusion_matrix(y_test, predictions)\nprint (cm)","6b3c8a2f":"y_scores = model.predict_proba(X_test)\nprint(y_scores)","aeaf3a07":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import confusion_matrix\n\n# calculate ROC curve\nfpr, tpr, thresholds = roc_curve(y_test, y_scores[:,1])\n\n# plot ROC curve\nfig = plt.figure(figsize=(6, 6))\n# Plot the diagonal 50% line\nplt.plot([0, 1], [0, 1], 'k--')\n# Plot the FPR and TPR achieved by our model\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","fefd69d5":"from sklearn.metrics import roc_auc_score\n\nauc = roc_auc_score(y_test,y_scores[:,1])\nprint('AUC: ' + str(auc))","a3e9f6e8":"# Train the model\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nimport numpy as np\n\n# Define preprocessing for numeric columns (normalize them so they're on the same scale)\nnumeric_features = [0,1,2,3,4,5,6]\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\n# Define preprocessing for categorical features (encode the Age column)\ncategorical_features = [7]\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])\n\n# Create preprocessing and training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('logregressor', LogisticRegression(C=1\/reg, solver=\"liblinear\"))])\n\n\n# fit the pipeline to train a logistic regression model on the training set\nmodel = pipeline.fit(X_train, (y_train))\nprint (model)","40751dfa":"# Get predictions from test data\npredictions = model.predict(X_test)\ny_scores = model.predict_proba(X_test)\n\n# Get evaluation metrics\ncm = confusion_matrix(y_test, predictions)\nprint ('Confusion Matrix:\\n',cm, '\\n')\nprint('Accuracy:', accuracy_score(y_test, predictions))\nprint(\"Overall Precision:\",precision_score(y_test, predictions))\nprint(\"Overall Recall:\",recall_score(y_test, predictions))\nauc = roc_auc_score(y_test,y_scores[:,1])\nprint('AUC: ' + str(auc))\n\n# calculate ROC curve\nfpr, tpr, thresholds = roc_curve(y_test, y_scores[:,1])\n\n# plot ROC curve\nfig = plt.figure(figsize=(6, 6))\n# Plot the diagonal 50% line\nplt.plot([0, 1], [0, 1], 'k--')\n# Plot the FPR and TPR achieved by our model\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","1a2f0a22":"from sklearn.ensemble import RandomForestClassifier\n\n# Create preprocessing and training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('logregressor', RandomForestClassifier(n_estimators=100))])\n\n# fit the pipeline to train a random forest model on the training set\nmodel = pipeline.fit(X_train, (y_train))\nprint (model)","c81c507d":"predictions = model.predict(X_test)\ny_scores = model.predict_proba(X_test)\ncm = confusion_matrix(y_test, predictions)\nprint ('Confusion Matrix:\\n',cm, '\\n')\nprint('Accuracy:', accuracy_score(y_test, predictions))\nprint(\"Overall Precision:\",precision_score(y_test, predictions))\nprint(\"Overall Recall:\",recall_score(y_test, predictions))\nauc = roc_auc_score(y_test,y_scores[:,1])\nprint('\\nAUC: ' + str(auc))\n\n# calculate ROC curve\nfpr, tpr, thresholds = roc_curve(y_test, y_scores[:,1])\n\n# plot ROC curve\nfig = plt.figure(figsize=(6, 6))\n# Plot the diagonal 50% line\nplt.plot([0, 1], [0, 1], 'k--')\n# Plot the FPR and TPR achieved by our model\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","57df1b45":"import joblib\n\n# Save the model as a pickle file\nfilename = 'diabetes_model.pkl'\njoblib.dump(model, filename) # Save it at \/kaggle\/working\/diabetes_model.pkl","5fc6384b":"# Load the model from the file\nmodel = joblib.load('\/kaggle\/working\/diabetes_model.pkl')\n\n# predict on a new sample\n# The model accepts an array of feature arrays (so you can predict the classes of multiple patients in a single call)\n# We'll create an array with a single array of features, representing one patient\nX_new = np.array([[2,180,74,24,21,23.9091702,1.488172308,22]])\nprint ('New sample: {}'.format(list(X_new[0])))\n\n# Get a prediction\npred = model.predict(X_new)\n\n# The model returns an array of predictions - one for each set of features submitted\n# In our case, we only submitted one patient, so our prediction is the first one in the resulting array.\nprint('Predicted class is {}'.format(pred[0]))","5cddc06c":"# load the training dataset\npenguins = pd.read_csv('\/kaggle\/input\/ml-basics-data-files\/penguins.csv')\n\n# Display a random sample of 10 observations\nsample = penguins.sample(10)\n\nprint(f\"Shape of data: {sample.shape}\")\nsample","63c657d7":"penguin_classes = ['Amelie', 'Gentoo', 'Chinstrap']\nprint(sample.columns[0:5].values, 'SpeciesName')\nfor index, row in penguins.sample(10).iterrows():\n    print('[',row[0], row[1], row[2], row[3], int(row[4]),']',penguin_classes[int(row[4])])","17365533":"# Count the number of null values for each column\npenguins.isnull().sum()","9426119f":"# Show rows containing nulls\npenguins[penguins.isnull().any(axis=1)]","d0809cf0":"# Drop rows containing NaN values\npenguins=penguins.dropna()\n#Confirm there are now no nulls\npenguins.isnull().sum()","72aae715":"penguin_features = ['CulmenLength','CulmenDepth','FlipperLength','BodyMass']\npenguin_label = 'Species'\nfor col in penguin_features:\n    penguins.boxplot(column=col, by=penguin_label, figsize=(6,6))\n    plt.title(col)\nplt.show()","7ba99ec7":"# Separate features and labels\npenguins_X, penguins_y = penguins[penguin_features].values, penguins[penguin_label].values\n\n# Split data 70%-30% into training set and test set\nx_penguin_train, x_penguin_test, y_penguin_train, y_penguin_test = train_test_split(penguins_X, penguins_y,\n                                                                                    test_size=0.30,\n                                                                                    random_state=0,\n                                                                                    stratify=penguins_y)\n\nprint ('Training Set: %d, Test Set: %d \\n' % (x_penguin_train.size, x_penguin_test.size))","eb3c42bf":"from sklearn.linear_model import LogisticRegression\n\n# Set regularization rate\nreg = 0.1\n\n# train a logistic regression model on the training set\nmulti_model = LogisticRegression(C=1\/reg, solver='lbfgs', multi_class='auto', max_iter=10000).fit(x_penguin_train, y_penguin_train)\nprint (multi_model)","fe2b3f4d":"penguin_predictions = multi_model.predict(x_penguin_test)\nprint('Predicted labels: ', penguin_predictions[:15])\nprint('Actual labels   : ' ,y_penguin_test[:15])","994b61c0":"from sklearn. metrics import classification_report\n\nprint(classification_report(y_penguin_test, penguin_predictions))","2cb4445c":"from sklearn.metrics import accuracy_score, precision_score, recall_score\n\nprint(\"Overall Accuracy:\",accuracy_score(y_penguin_test, penguin_predictions))\nprint(\"Overall Precision:\",precision_score(y_penguin_test, penguin_predictions, average='macro'))\nprint(\"Overall Recall:\",recall_score(y_penguin_test, penguin_predictions, average='macro'))","2740562a":"# Print the confusion matrix\nmcm = confusion_matrix(y_penguin_test, penguin_predictions)\nprint(mcm)","ae2688ed":"plt.imshow(mcm, interpolation=\"nearest\", cmap=plt.cm.Blues)\nplt.colorbar()\ntick_marks = np.arange(len(penguin_classes))\nplt.xticks(tick_marks, penguin_classes, rotation=45)\nplt.yticks(tick_marks, penguin_classes)\nplt.xlabel(\"Actual Species\")\nplt.ylabel(\"Predicted Species\")\nplt.show()","d3c7c25d":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n# Get class probability scores\npenguin_prob = multi_model.predict_proba(x_penguin_test)\n\n# Get ROC metrics for each class\nfpr = {}\ntpr = {}\nthresh ={}\nfor i in range(len(penguin_classes)):    \n    fpr[i], tpr[i], thresh[i] = roc_curve(y_penguin_test, penguin_prob[:,i], pos_label=i)\n    \n# Plot the ROC chart\nplt.plot(fpr[0], tpr[0], linestyle='--',color='orange', label=penguin_classes[0] + ' vs Rest')\nplt.plot(fpr[1], tpr[1], linestyle='--',color='green', label=penguin_classes[1] + ' vs Rest')\nplt.plot(fpr[2], tpr[2], linestyle='--',color='blue', label=penguin_classes[2] + ' vs Rest')\nplt.title('Multiclass ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","c10f2ced":"auc = roc_auc_score(y_penguin_test,penguin_prob, multi_class='ovr')\nprint('Average AUC:', auc)","097df03d":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\n\n# Define preprocessing for numeric columns (scale them)\nfeature_columns = [0,1,2,3]\nfeature_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n    ])\n\n# Create preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('preprocess', feature_transformer, feature_columns)])\n\n# Create training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('regressor', SVC(probability=True))])\n\n\n# fit the pipeline to train a linear regression model on the training set\nmulti_model = pipeline.fit(x_penguin_train, y_penguin_train)\nprint (multi_model)","1cc283c2":"# Get predictions from test data\npenguin_predictions = multi_model.predict(x_penguin_test)\npenguin_prob = multi_model.predict_proba(x_penguin_test)\n\n# Overall metrics\nprint(\"Overall Accuracy:\",accuracy_score(y_penguin_test, penguin_predictions))\nprint(\"Overall Precision:\",precision_score(y_penguin_test, penguin_predictions, average='macro'))\nprint(\"Overall Recall:\",recall_score(y_penguin_test, penguin_predictions, average='macro'))\nprint('Average AUC:', roc_auc_score(y_penguin_test,penguin_prob, multi_class='ovr'))\n\n# Confusion matrix\nplt.imshow(mcm, interpolation=\"nearest\", cmap=plt.cm.Blues)\nplt.colorbar()\ntick_marks = np.arange(len(penguin_classes))\nplt.xticks(tick_marks, penguin_classes, rotation=45)\nplt.yticks(tick_marks, penguin_classes)\nplt.xlabel(\"Actual Species\")\nplt.ylabel(\"Predicted Species\")\nplt.show()","973eb2f8":"import joblib\n\n# Save the model as a pickle file\nfilename = 'penguin_model.pkl'\njoblib.dump(multi_model, filename) # Save it at \/kaggle\/working\/penguin_model.pkl","9aa1d322":"# Load the model from the file\nmulti_model = joblib.load(\"\/kaggle\/working\/penguin_model.pkl\")\n\n# The model accepts an array of feature arrays (so you can predict the classes of multiple penguin observations in a single call)\n# We'll create an array with a single array of features, representing one penguin\nx_new = np.array([[50.4,15.3,224,5550]])\nprint ('New sample: {}'.format(x_new[0]))\n\n# The model returns an array of predictions - one for each set of features submitted\n# In our case, we only submitted one penguin, so our prediction is the first one in the resulting array.\npenguin_pred = multi_model.predict(x_new)[0]\nprint('Predicted class is', penguin_classes[penguin_pred])","de97cb02":"# This time our input is an array of two feature arrays\nx_new = np.array([[49.5,18.4,195, 3600],\n         [38.2,20.1,190,3900]])\nprint ('New samples:\\n{}'.format(x_new))\n\n# Call the web service, passing the input data\npredictions = multi_model.predict(x_new)\n\n# Get the predicted classes.\nfor prediction in predictions:\n    print(prediction, '(' + penguin_classes[prediction] +')')","a5502731":"The results look a little better, so clearly preprocessing the data has made a difference.\n\n# Try a different algorithm\nNow let's try a different algorithm. Previously we used a logistic regression algorithm, which is a linear algorithm. There are many kinds of classification algorithm we could try, including:\n\n* **Support Vector Machine algorithms:** Algorithms that define a hyperplane that separates classes.\n* **Tree-based algorithms:** Algorithms that build a decision tree to reach a prediction\n* **Ensemble algorithms:** Algorithms that combine the outputs of multiple base algorithms to improve generalizability.\nThis time, We'll use the same preprocessing steps as before, but we'll train the model using an ensemble algorithm named Random Forest that combines the outputs of multiple random decision trees","0db8c98f":"Now let's look at the confusion matrix for our model:","d6b05933":"There are two rows that contain no feature values at all (NaN stands for \"not a number\"), so these won't be useful in training a model. Let's discard them from the dataset.","9a0d6cde":"Now we've trained the model using the training data, we can use the test data we held back to evaluate how well it predicts","78e6d3fd":"# Train and Evaluate a Binary Classification Model\nOK, now we're ready to train our model by fitting the **training features (X_train)** to the **training labels (y_train)**. There are various algorithms we can use to train the model. In this example, we'll use **Logistic Regression**, which (despite its name) is a well-established algorithm for classification. In addition to the training features and labels, we'll need to set a **regularization parameter**. This is used to counteract any bias in the sample, and help the model generalize well by avoiding overfitting the model to the training data.","5fa3028a":"## Train and evaluate a multiclass classifier\nNow that we have a set of training features and corresponding training labels, we can fit a multiclass classification algorithm to the data to create a model. Most scikit-learn classification algorithms inherently support multiclass classification. We'll try a logistic regression algorithm.","30bfd51b":"Now that we know what the feaures and labels in the data represent, let's explore the dataset. First, let's see if there are any missing (null) values","cacf8e5a":"Now let's compare the feature distributions for each label value.","e0499a53":"The decision to score a prediction as a 1 or a 0 depends on the threshold to which the predicted probabilties are compared. If we were to change the threshold, it would affect the predictions; and therefore change the metrics in the confusion matrix. A common way to evaluate a classifier is to examine the true positive rate (which is another name for recall) and the false positive rate for a range of possible thresholds. These rates are then plotted against all possible thresholds to form a chart known as a **received operator characteristic (ROC) chart******, like this:","996e7dbf":"Now we can use the trained model to predict the labels for the test features, and compare the predicted labels to the actual labels:","19fb0c46":"As with binary classification, the report includes precision and recall metrics for each class. However, while with binary classification we could focus on the scores for the positive class; in this case, there are multiple classes so we need to look at an overall metric (either the macro or weighted average) to get a sense of how well the model performs across all three classes.\n\nYou can get the overall metrics separately from the report using the scikit-learn metrics score classes, but with multiclass results you must specify which average metric you want to use for precision and recall.\n\n* **macro average**: The function to compute f1 for each label, and returns the average without considering the proportion for each label in the dataset.\n* **weighted average**: The function to compute f1 for each label, and returns the average considering the proportion for each label in the dataset.","e8ed6541":"The ROC chart shows the curve of the true and false positive rates for different threshold values between 0 and 1. A perfect classifier would have a curve that goes straight up the left side and straight across the top. The diagonal line across the chart represents the probability of predicting correctly with a 50\/50 random prediction; so you obviously want the curve to be higher than that (or your model is no better than simply guessing!).\n\nThe area under the curve (AUC) is a value between 0 and 1 that quantifies the overall performance of the model. The closer to 1 this value is, the better the model. Once again, scikit-Learn includes a function to calculate this metric.","abe52781":"# Introduction\nIn case of binary classification, the model must predict a label that belongs to one of two classes. We'll train a binary classifier to predict whether or not a patient should be tested for diabetes based on some medical data.\n\nNote: This is my study notebook, for original notebook please refer https:\/\/github.com\/satishgunjal\/ml-basics\/blob\/master\/03%20-%20Classification.ipynb\n\n# Import Libraries","da920da6":"# Explore the data\n\nThis data consists of diagnostic information about some patients who have been tested for diabetes. Final column in the dataset (Diabetic) contains the value 0 for patients who tested negative for diabetes, and 1 for patients who tested positive. This is the label that we will train our mode to predict; most of the other columns (Pregnancies,PlasmaGlucose,DiastolicBloodPressure, and so on) are the features we will use to predict the Diabetic label.\n\nLet's separate the features from the labels - we'll call the features X and the label y:","ac16edc2":"When we have some new observations for which the label is unknown, we can load the model and use it to predict values for the unknown label:","76ebd9ba":"OK, so now we have a trained model. Let's use it to predict the class of a new penguin observation:","7d1dd45a":"## Preprocess data in a pipeline\nAgain, just like with binary classification, you can use a pipeline to apply preprocessing steps to the data before fitting it to an algorithm to train a model. Let's see if we can improve the penguin predictor by scaling the numeric features in a transformation steps before training. We'll also try a different algorithm (a support vector machine), just to show that we can!","6c1a00c4":"The accuracy is returned as a decimal value - a value of 1.0 would mean that the model got 100% of the predictions right; while an accuracy of 0.0 is, well, pretty useless!\n\nAccuracy seems like a sensible metric to evaluate (and to a certain extent it is), but you need to be careful about drawing too many conclusions from the accuracy of a classifier. Remember that it's simply a measure of how many cases were predicted correctly. Suppose only 3% of the population is diabetic. You could create a classifier that always just predicts 0, and it would be 97% accurate - but not terribly helpful in identifying patients with diabetes!\n\nFortunately, there are some other metrics that reveal a little more about how our model is performing. Scikit-Learn includes the ability to create a classification report that provides more insight than raw accuracy alone.","1e77065d":"# Perform preprocessing in a pipeline\nIn this case, the ROC curve and its AUC indicate that the model performs better than a random guess which is not bad considering we performed very little preprocessing of the data.\n\nIn practice, it's common to perform some preprocessing of the data to make it easier for the algorithm to fit a model to it. There's a huge range of preprocessing transformations you can perform to get your data ready for modeling, but we'll limit ourselves to a few common techniques:\n\n* Scaling numeric features so they're on the same scale. This prevents feaures with large values from producing coefficients that disproportionately affect the predictions.\n* Encoding categorical variables. For example, by using a one hot encoding technique you can create individual binary (true\/false) features for each possible category value.\n\nTo apply these preprocessing transformations, we'll make use of a Scikit-Learn feature named pipelines. These enable us to define a set of preprocessing steps that end with an algorithm. You can then fit the entire pipeline to the data, so that the model encapsulates all of the preprocessing steps as well as the regression algorithm. This is useful, because when we want to use the model to predict values from new data, we need to apply the same transformations (based on the same statistical distributions and catagory encodings used with the training dat","fee76531":"To quantify the ROC performance, you can calculate an aggregate area under the curve score that is averaged across all of the OVR curves.","5d869249":"Now we can evaluate the new model.","b6bb2630":"Until now, we've considered the predictions from the model as being either 1 or 0 class labels. Actually, things are a little more complex than that. Statistical machine learning algorithms, like logistic regression, are based on probability; so what actually gets predicted by a binary classifier is the probability that the label is true (P(y)) and the probability that the label is false (1 - P(y)). A threshold value of 0.5 is used to decide whether the predicted label is a 1 (P(y) > 0.5) or a 0 (P(y) <= 0.5). You can use the predict_proba method to see the probability pairs for each case:","9c2dd325":"The dataset contains the following columns:\n\n* **CulmenLength**: The length in mm of the penguin's culmen (bill).\n* **CulmenDepth**: The depth in mm of the penguin's culmen.\n* **FlipperLength**: The length in mm of the penguin's flipper.\n* **BodyMass**: The body mass of the penguin in grams.\n* **Species**: An integer value that represents the species of the penguin.\nThe Species column is the label we want to train a model to predict. The dataset includes three possible species, which are encoded as 0, 1, and 2. The actual species names are revealed by the code below:","bfbc7d76":"That looks better!\n\n# Use the Model for Inferencing\nNow that we have a reasonably useful trained model, we can save it for use later to predict labels for new data:","a814b917":"For some of the features, there's a noticable difference in the **distribution for each label** value. In particular, **Pregnancies** and **Age** show markedly different distributions for diabetic patients than for non-diabetic patients. **These features may help predict whether or not a patient is diabetic.**\n\n# Split the Data","74548e1c":"It looks like there are some missing feature values, but no missing labels. Let's dig a little deeper and see the rows that contain nulls.","30ee7d95":"Let's look at a classification report.","b48c1ced":"The confusion matrix shows the intersection of predicted and actual label values for each class - in simple terms, the diagonal intersections from top-left to bottom-right indicate the number of correct predictions.\n\nWhen dealing with multiple classes, it's generally more intuitive to visualize this as a heat map, like this:","366ae808":"# Multiclass Classification\nBinary classification techniques work well when the data observations belong to one of two classes or categories, such as \"True\" or \"False\". When the data can be categorized into more than two classes, you must use a multiclass classification algorithm.\n\nMulticlass classification can be thought of as a combination of multiple binary classifiers. There are two ways in which you approach the problem:\n\n* **One vs Rest (OVR)**, in which a classifier is created for each possible class value, with a positive outcome for cases where the prediction is this class, and negative predictions for cases where the prediction is any other class. A classification problem with four possible shape classes (square, circle, triangle, hexagon) would require four classifiers that predict:\n    * square or not\n    * circle or not\n    * triangle or not\n    * hexagon or not\n\n* **One vs One (OVO)**, in which a classifier for each possible pair of classes is created. The classification problem with four shape classes would require the following binary classifiers:\n    *     square or circle\n    *     square or triangle\n    *     square or hexagon\n    *     circle or triangle\n    *     circle or hexagon\n    *     triangle or hexagon\nIn both approaches, the overall model that combines the classifiers generates a vector of predictions in which the probabilities generated from the individual binary classifiers are used to determine which class to predict.\n\nFortunately, in most machine learning frameworks, including scikit-learn, implementing a multiclass classification model is not significantly more complex than binary classification - and in most cases, the estimators used for binary classification implicitly support multiclass classification by abstracting an OVR algorithm, an OVO algorithm, or by allowing a choice of either.\n\n## Explore the data\nLet's start by examining a dataset that contains observations of multiple classes. We'll use a dataset that contains observations of three different species of penguin.","5eaa265c":"# Challenge: Classify Wines\n[\/challenges\/03 - Wine Classification Challenge.ipynb](https:\/\/render.githubusercontent.com\/view\/challenges\/03%20-%20Wine%20Classification%20Challenge.ipynb) >>  To classify wines into their grape varietals!","28c800df":"The classification report includes the following metrics for each class (0 and 1)\n\n* Precision: Of the predictons the model made for this class, what proportion were correct?\n* Recall: Out of all of the instances of this class in the test dataset, how many did the model identify?\n* F1-Score: An average metric that takes both precision and recall into account.\n* Support: How many instances of this class are there in the test dataset?\n\nThe classification report also includes averages for these metrics, including a weighted average that allows for the imbalance in the number of cases of each class.\n\nBecause this is a binary classification problem, the 1 class is considered positive and its precision and recall are particularly interesting - these in effect answer the questions:\n\n* Of all the patients the model predicted are diabetic, how many are actually diabetic?\n* Of all the patients that are actually diabetic, how many did the model identify?\nYou can retrieve these values on their own by using the precision_score and recall_score metrics in scikit-learn (which by default assume a binary classification model).","66ef63db":"## \nUse the model with new data observations\nNow let's save our trained model so we can use it again later.","208f6483":"The darker squares in the confusion matrix plot indicate high numbers of cases, and you can hopefully see a diagonal line of darker squares indicating cases where the predicted and actual label are the same.\n\nIn the case of a multiclass classification model, a single ROC curve showing true positive rate vs false positive rate is not possible. However, you can use the rates for each class in a One vs Rest (OVR) comparison to create a ROC chart for each class.","9b65bc08":"Now that we've dealt with the missing values, let's explore how the features relate to the label by creating some box charts.","b1102ddc":"The arrays of labels are too long to be displayed in the notebook output, so we can only compare a few values. Even if we printed out all of the predicted and actual labels, there are too many of them to make this a sensible way to evaluate the model.\n\nThe most obvious thing you might want to do is to check the accuracy of the predictions - in simple terms, what proportion of the labels did the model predict correctly?","f84af693":"Let's look at the performance metrics for the new model.","a5287c96":"The pipeline encapsulates the preprocessing steps as well as model training.\n\nLet's use the model trained by this pipeline to predict labels for our test set, and compare the performance metrics with the basic model we created previously.","cbb32dd1":"# Load the Data","873271c1":"From the box plots, it looks like species 0 and 2 (Amelie and Chinstrap) have similar data profiles for culmen depth, flipper length, and body mass, but Chinstraps tend to have longer culmens. Species 1 (Gentoo) tends to have fairly clearly differentiated features from the others; which should help us train a good classification model.\n\n## Prepare the data\nJust as for binary classification, before training the model, we need to separate the features and label, and then split the data into subsets for training and validation. We'll also apply a stratification technique when splitting the data to maintain the proportion of each label value in the training and validation datasets.","a43169de":"You can also submit a batch of penguin observations to the model, and get back a prediction for each one."}}