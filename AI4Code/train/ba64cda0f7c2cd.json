{"cell_type":{"6fb67757":"code","fd448f03":"code","36373490":"code","79231753":"code","20924df4":"code","56d4b30b":"code","22b4f517":"code","a14c7073":"code","195ff446":"code","da3f81ba":"code","6efd1c34":"code","a0bdb490":"code","6a93e249":"code","ee0dabcf":"code","2f7877d3":"code","34e422ff":"code","4fe91e58":"code","5d389033":"code","410c1f2a":"code","abe0801c":"code","991423a0":"code","e74a8cef":"code","badeec91":"code","551504d8":"code","a62564a1":"code","efdde8f9":"code","5b90fc72":"code","9b999c68":"code","f7a0d0a8":"code","2364d8a3":"code","dc65ce8d":"code","2f530733":"code","c8fe9756":"code","1c422889":"code","4c6281a3":"code","678f632c":"code","6da3934b":"code","0e0a2c1d":"code","a134b317":"code","347c1507":"code","95034626":"code","73dacd86":"code","2049892c":"code","9bbd4733":"code","1dc94172":"code","b98c1f18":"code","581aee5f":"code","8be6797a":"code","88e1b893":"code","f51984ae":"code","f6e6a1d7":"code","a7191d53":"code","2d775664":"code","6ee093ad":"code","5511fda1":"code","85f9398a":"code","5b75aeac":"code","f203a7fd":"code","94108b78":"code","804a115d":"code","269be2e1":"code","7d7aedc1":"code","02d82620":"code","e79c876d":"code","de272441":"code","5936ae61":"code","d17a2f1f":"code","acc9dbc9":"code","aee8cdc3":"code","93289fab":"code","6a058ed0":"code","255da8bf":"code","0c5319b6":"code","24e8668e":"code","893156a2":"code","b06d8001":"code","9eeb9007":"code","6a9bda37":"code","4fac0677":"code","63da0221":"code","31b3f6ac":"markdown","0088de78":"markdown","a7d49712":"markdown","3337c0ee":"markdown","44e63ece":"markdown","24cd0a2c":"markdown","afb13d52":"markdown","2a3ed54c":"markdown","36fe1ad6":"markdown","cb90f3ea":"markdown","98f149a0":"markdown","11d27af7":"markdown","b1c0445f":"markdown","41f0bf23":"markdown","ed36fc45":"markdown","9ebb1fa1":"markdown","54da6764":"markdown","1cede648":"markdown","97c619ed":"markdown","acf89d7a":"markdown","7b5c87c8":"markdown","10743cac":"markdown","ae7b6da4":"markdown","4c93c6d0":"markdown"},"source":{"6fb67757":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd448f03":"df=pd.read_csv('..\/input\/startup-investment\/Startup_Investment.csv')","36373490":"df.head(15)","79231753":"list(df.columns) #column labels","20924df4":"list(df.index) #row labels","56d4b30b":"df.info()","22b4f517":"df.mean()","a14c7073":"df.std()","195ff446":"df.corr()","da3f81ba":"import matplotlib.pyplot as plt","6efd1c34":"plt.figure()\nplt.hist(df['Profit'])\nplt.title('Histogram of profit using matplotlib')","a0bdb490":"plt.figure()\nplt.hist(df['Administration'])\nplt.title('Histogram of administration using matplotlib')","6a93e249":"plt.figure()\nplt.plot(df['R&D Spend'],df['Profit'])\nplt.xlabel('R&D Spend')\nplt.ylabel('Profit')","ee0dabcf":"plt.figure()\ndf.plot('Marketing Spend','Profit')","2f7877d3":"plt.figure()\ndf.hist() #ploting histogram","34e422ff":"#Probaility density of a colum\n\ndf['Profit'].plot.kde()","4fe91e58":"df['R&D Spend'].plot.kde()","5d389033":"#import from the library the function to split data\nfrom sklearn.model_selection import train_test_split","410c1f2a":"Y=df['Profit']  #variable to be predicted, labels","abe0801c":"X=df[['R&D Spend', 'Administration', 'Marketing Spend']]","991423a0":"X","e74a8cef":"X=df.drop(['State','Profit'],axis=1)","badeec91":"X","551504d8":"df.head()","a62564a1":"type(X)","efdde8f9":"Y","5b90fc72":"X.info()","9b999c68":"Y.info()","f7a0d0a8":"result=train_test_split(X,Y,test_size=0.2) #20% of data points for testing","2364d8a3":"X_train = result[0] #Predictors from training set\nX_test  = result[1] #Predictors from testing set\nY_train = result[2] #Labels of the training set \nY_test  = result[3] #Labels for the testing set","dc65ce8d":"type(X_train)","2f530733":"type(Y_train)","c8fe9756":"X_train.shape","1c422889":"Y_train.shape","4c6281a3":"X_train.head(15)","678f632c":"Y_train.head(15)","6da3934b":"df.loc[7,:]","0e0a2c1d":"X_train.loc[7,:]","a134b317":"Y_train.iloc[0]","347c1507":"from sklearn.linear_model import LinearRegression","95034626":"lr = LinearRegression()  #create variable containing an\n                         #unitialized linear regression model","73dacd86":"lr.fit(X_train,Y_train) #fitting your model to training data.","2049892c":"Ypred=lr.predict(X_test)\n","9bbd4733":"Ypred-Y_test","1dc94172":"#Difficult to decide if Ypred-Y_test is large or not\n#Option; visual check\nplt.plot(range(X_test.shape[0]),Y_test,'r', range(X_test.shape[0]),Ypred, 'b')\nplt.legend(['True profit','Predicted profit'])","b98c1f18":"#Relative norm of the error:\nnp.linalg.norm(Y_test-Ypred)\/np.linalg.norm(Y_test)","581aee5f":"#Mean square error \nnp.sqrt(np.linalg.norm(Y_test-Ypred)**2\/(Y_test.shape[0]))","8be6797a":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","88e1b893":"r2_score(Ypred,Y_test)","f51984ae":" np.sqrt(mean_squared_error(Ypred,Y_test))","f6e6a1d7":" np.sqrt(mean_absolute_error(Ypred,Y_test))","a7191d53":"X2=X[['R&D Spend','Marketing Spend']]","2d775664":"result2=train_test_split(X2,Y,test_size=0.2) #20% of data points for testing\nX_train2 = result2[0] #Predictors from training set\nX_test2  = result2[1] #Predictors from testing set\nY_train2 = result2[2] #Labels of the training set \nY_test2  = result2[3] #Labels for the testing set\n\nlr2=LinearRegression()\nlr2.fit(X_train2,Y_train2)\nYpred2=lr2.predict(X_test2)","6ee093ad":"X2.info()","5511fda1":"plt.plot(range(X_test2.shape[0]),Y_test2,'r', range(X_test2.shape[0]),Ypred2, 'b')\nplt.legend(['True profit','Predicted profit'])","85f9398a":"r2_score(Ypred2,Y_test2)","5b75aeac":" np.sqrt(mean_squared_error(Ypred2,Y_test2))","f203a7fd":"dd={'name': ['Anastasia', 'Dima' , 'Katherine' , 'James' , 'Emily' , 'Michael' , 'Matthew' , 'Laura' , 'Kevin', 'Jonas' ], 'score' : [ 12.5 , 9 , 16.5 , np.nan , 9 , 20 , 14.5 , np.nan , 8 , 19] ,\n'attempts' : [ 1 , 3 , 2 , 3 , 2 , 3 , 1 , 1 , 2 , 1 ] ,'qualify' : [ 'yes' , 'no' , 'yes' , 'no', 'no' , 'yes' , 'yes' , 'no', 'no' , 'yes']}","94108b78":"df4=pd.DataFrame(dd)","804a115d":"df4","269be2e1":"df4.shape","7d7aedc1":"Z=(df4['score'] > 10) ","02d82620":"Z2=(df4['attempts'] > 1)","e79c876d":"Z2","de272441":"Z","5936ae61":"Z & Z2","d17a2f1f":"Z3=pd.Series(np.array([False,True,False,False,False,False,False,False,True,False]),index=[0,1,2,3,4,7,8,5,6,9])","acc9dbc9":"Z3","aee8cdc3":"Z3.shape","93289fab":"df4[Z3]","6a058ed0":"df4","255da8bf":"df4[Z & Z2]","0c5319b6":"df4[(df4['score'] > 10) & (df4['attempts'] > 1)]","24e8668e":"df4","893156a2":"df4[np.isnan(df4['score'])]","b06d8001":"meanscore=df4['score'].mean()","9eeb9007":"meanscore","6a9bda37":"df5=df4.fillna({'score':meanscore})  ","4fac0677":"df5","63da0221":"np.isnan(df5['score'])","31b3f6ac":"Step 1: choose a model class, we choose linear regression","0088de78":"The model which does not use 'Administration' is just as good as the model which uses it. So 'Administration' is not very relevant to predict Profit. This called feature selection.","a7d49712":"Basic statistics: mean, standard deviation, correlation\n\nmean: $m_x=\\frac{1}{n} \\sum_{i=1}^{n} x_i$\n\nstandard deviation: $\\sigma_{x} =\\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_x)^2}$\n\n\ncorrelation: $cor_{x,y}=\\frac{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_x)(y_i-m_y)}{\\sigma_x \\sigma_y}$.","3337c0ee":"Create pandas data frame from file","44e63ece":"Average score","24cd0a2c":"df.std() - standard deviation for each column, the same structure as df.mean()","afb13d52":"First option: we specify the columns we would like to use.","2a3ed54c":"Get the rows for which the score is missing","36fe1ad6":"df.corr()  -- pandas DataFrame, it columns and rows are indexed by the column labels of df, the element in the row indexed by x and the column indexed by y is the correlation between the columns x and y of df","cb90f3ea":"Table whose columns are the variables we would like to use for prediction","98f149a0":"Replace the missing values by the mean score in the score column.","11d27af7":"Exericse: repeat the same exercise, but use only R&D Spend and Marketing Spend to predict profit","b1c0445f":"Plot histogram, probability, etc. using matplotlib and built in functions of DataFrame","41f0bf23":"Split data into training and testing data","ed36fc45":"Now, lr contains the trained model. We have to test using the test set","9ebb1fa1":"Machine learning: learning the model","54da6764":"Machine learning, applying linear regression.","1cede648":"Fit the model lr to data","97c619ed":"Exercise 2","acf89d7a":"Alternative: delete those columns which will not be used","7b5c87c8":"df.mean() returns a Series indexed by the column indices of df, and\ncontaining the mean for each column","10743cac":"Relative error: 8%, quite good","ae7b6da4":"Ploting using DataFrame","4c93c6d0":"Splitting the data into training and testing sets"}}