{"cell_type":{"b0e5afaf":"code","d33147c7":"code","5dcec7c5":"code","705cc57b":"code","4b44bf6b":"code","4a128410":"code","6d15594b":"code","b4fce8e8":"code","9e9db4b1":"code","b7161531":"code","64fce64b":"code","dfcb81fb":"code","c3b8b65a":"code","dcb2b55a":"code","9fe69088":"code","49451901":"code","fbc67437":"code","05975db3":"code","16df6767":"code","cfb8f659":"code","270867f4":"code","2b7b455b":"code","16f60fd2":"code","42ee4065":"code","644e51f2":"code","2971a4ff":"code","58d0a88a":"code","10de2b27":"code","1c109252":"code","ef59bdf0":"code","e1ab03bc":"code","692cf74d":"code","ee5c94ff":"code","8b06f22f":"code","457aa520":"code","e169c3fd":"code","6293a5ff":"code","bcbb09d3":"code","5d417ce4":"code","1f86df9a":"code","a5529ad1":"code","4fc4ffa7":"code","9147c2bf":"code","9cbf53a2":"code","a6929403":"code","bd7ff9ab":"code","cb9e4b36":"code","315d2a70":"code","48974ed0":"code","8bd922f2":"code","c79a7ce4":"code","cec780ac":"code","e62996fe":"code","0ab39fe7":"code","7647846c":"code","b11abf41":"code","ff126049":"markdown","8fac0b6b":"markdown","c4394bbc":"markdown","204db2a8":"markdown","794b5ef7":"markdown","ee048ecf":"markdown","5f8ff7fc":"markdown","baab9cb9":"markdown","22048075":"markdown","fae684a1":"markdown","ef65b2d8":"markdown"},"source":{"b0e5afaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d33147c7":"# The code cell above shows the path to the competition files\n# \u042f\u0447\u0435\u0439\u043a\u0430 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f","5dcec7c5":"# library import\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV","705cc57b":"# Read the data\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","4b44bf6b":"# Let's look at the size of the raw data\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain.shape, test.shape","4a128410":"# Let's look at the data structure\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain.head(2)","6d15594b":"# Let's look at the data types in the columns and the presence of gaps\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain.info()","b4fce8e8":"# Let's look at the omissions in more detail\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\n(train.isnull().sum() * 100 \/ len(train))","9e9db4b1":"train['age_missed'] = train['Age'].map(lambda x: 1 if pd.isnull(x) else 0)\ntrain['cabin_missed'] = train['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)","b7161531":"sns.countplot(x=train['Survived'], hue=train['age_missed']);","64fce64b":"sns.countplot(x=train['Survived'], hue=train['cabin_missed']);","dfcb81fb":"train['title'] = train['Name'].map(lambda name: name.split(',')[1].split('.')[0])\ntrain['title'].value_counts()","c3b8b65a":"train['is_child'] = train['title'].map(lambda x: 1 if x.strip() in ['Miss', 'Ms', 'Mlle', 'Master']\n                                      else 0)","dcb2b55a":"sns.countplot(x=train['is_child'], hue=train['Survived']);","9fe69088":"train.loc[(train['Pclass'] == 1) & (train['Sex'] == 'male') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 1) & (train['Sex'] == 'male') & (train['is_child'] == 0)]['Age'].median()\ntrain.loc[(train['Pclass'] == 2) & (train['Sex'] == 'male') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 2) & (train['Sex'] == 'male') & (train['is_child'] == 0)]['Age'].median()\ntrain.loc[(train['Pclass'] == 3) & (train['Sex'] == 'male') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 3) & (train['Sex'] == 'male') & (train['is_child'] == 0)]['Age'].median()","49451901":"train.loc[(train['Pclass'] == 1) & (train['Sex'] == 'female') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 1) & (train['Sex'] == 'female') & (train['is_child'] == 0)]['Age'].median()\ntrain.loc[(train['Pclass'] == 2) & (train['Sex'] == 'female') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 2) & (train['Sex'] == 'female') & (train['is_child'] == 0)]['Age'].median()\ntrain.loc[(train['Pclass'] == 3) & (train['Sex'] == 'female') & (train['is_child'] == 0) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 3) & (train['Sex'] == 'female') & (train['is_child'] == 0)]['Age'].median()","fbc67437":"train.loc[(train['Pclass'] == 1) & (train['Sex'] == 'male') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 1) & (train['Sex'] == 'male') & (train['is_child'] == 1)]['Age'].median()\ntrain.loc[(train['Pclass'] == 2) & (train['Sex'] == 'male') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 2) & (train['Sex'] == 'male') & (train['is_child'] == 1)]['Age'].median()\ntrain.loc[(train['Pclass'] == 3) & (train['Sex'] == 'male') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 3) & (train['Sex'] == 'male') & (train['is_child'] == 1)]['Age'].median()","05975db3":"train.loc[(train['Pclass'] == 1) & (train['Sex'] == 'female') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 1) & (train['Sex'] == 'female') & (train['is_child'] == 1)]['Age'].median()\ntrain.loc[(train['Pclass'] == 2) & (train['Sex'] == 'female') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 2) & (train['Sex'] == 'female') & (train['is_child'] == 1)]['Age'].median()\ntrain.loc[(train['Pclass'] == 3) & (train['Sex'] == 'female') & (train['is_child'] == 1) & (train['Age'].isnull()), 'Age'] = train[(train['Pclass'] == 3) & (train['Sex'] == 'female') & (train['is_child'] == 1)]['Age'].median()","16df6767":"# the information about the cabin number is deleted, because we will not be able to restore the skips correctly\n# \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u043a\u0430\u044e\u0442\u044b \u0443\u0434\u0430\u043b\u044f\u0435\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain = train.drop('Cabin', axis=1)","cfb8f659":"# fill in the missing landing port entries\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0440\u0442\u0430 \u043f\u043e\u0441\u0430\u0434\u043a\u0438\ntrain[train['Embarked'].isnull()]","270867f4":"sns.countplot(x=train['Embarked'], hue=train['Pclass']);","2b7b455b":"train.loc[train['Embarked'].isnull(), 'Embarked'] = 'S'","16f60fd2":"# Let's see how the presence of relatives affects the survivability of the passenger\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u043d\u0430 \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430","42ee4065":"sns.countplot(x=train['SibSp'], hue=train['Survived']);","644e51f2":"sns.countplot(x=train['Parch'], hue=train['Survived']);","2971a4ff":"# instead of SibSp and Parch attributes, let's create one relatives and check if the distribution has changed\n# \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 SibSp \u0438 Parch \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043e\u0434\u0438\u043d relatives \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\ntrain['relatives'] = train['SibSp'] + train['Parch']","58d0a88a":"sns.countplot(x=train['relatives'], hue=train['Survived']);","10de2b27":"train['group'] = train['relatives'].map(lambda x: 'alone' if x == 0\n                 else ('small group' if 1 <= x <= 3\n                      else 'big group'))","1c109252":"train.head(2)","ef59bdf0":"one_hot_features = ['Pclass', 'Embarked', 'group']\ntrain = pd.get_dummies(train, columns=one_hot_features)","e1ab03bc":"ord_enc = OrdinalEncoder()\ntrain['Sex'] = ord_enc.fit_transform(train[['Sex']])","692cf74d":"X_train = train.drop(['PassengerId', 'Survived', 'Name', \n                    'Ticket', 'SibSp', 'Parch', \n                    'relatives', 'title'], axis=1)\ny_train = train['Survived']","ee5c94ff":"X_train.head(2)","8b06f22f":"test['age_missed'] = test['Age'].map(lambda x: 1 if pd.isnull(x) else 0)\ntest['cabin_missed'] = test['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)","457aa520":"test['title'] = test['Name'].map(lambda name: name.split(',')[1].split('.')[0])\ntest['is_child'] = test['title'].map(lambda x: 1 if x.strip() in ['Miss', 'Ms', 'Mlle', 'Master']\n                                      else 0)","e169c3fd":"test.loc[(test['Pclass'] == 1) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n= test[(test['Pclass'] == 1) & (test['Sex'] == 'male') & (test['is_child'] == 0)]['Age'].median()\ntest.loc[(test['Pclass'] == 2) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 2) & (test['Sex'] == 'male') & (test['is_child'] == 0)]['Age'].median()\ntest.loc[(test['Pclass'] == 3) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 3) & (test['Sex'] == 'male') & (test['is_child'] == 0)]['Age'].median()","6293a5ff":"test.loc[(test['Pclass'] == 1) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n= test[(test['Pclass'] == 1) & (test['Sex'] == 'female') & (test['is_child'] == 0)]['Age'].median()\ntest.loc[(test['Pclass'] == 2) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 2) & (test['Sex'] == 'female') & (test['is_child'] == 0)]['Age'].median()\ntest.loc[(test['Pclass'] == 3) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 0) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 3) & (test['Sex'] == 'female') & (test['is_child'] == 0)]['Age'].median()","bcbb09d3":"test.loc[(test['Pclass'] == 1) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n= test[(test['Pclass'] == 1) & (test['Sex'] == 'male') & (test['is_child'] == 1)]['Age'].median()\ntest.loc[(test['Pclass'] == 2) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 2) & (test['Sex'] == 'male') & (test['is_child'] == 1)]['Age'].median()\ntest.loc[(test['Pclass'] == 3) \n          & (test['Sex'] == 'male') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 3) & (test['Sex'] == 'male') & (test['is_child'] == 1)]['Age'].median()","5d417ce4":"test.loc[(test['Pclass'] == 1) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n= test[(test['Pclass'] == 1) & (test['Sex'] == 'female') & (test['is_child'] == 1)]['Age'].median()\ntest.loc[(test['Pclass'] == 2) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 2) & (test['Sex'] == 'female') & (test['is_child'] == 1)]['Age'].median()\ntest.loc[(test['Pclass'] == 3) \n          & (test['Sex'] == 'female') \n          & (test['is_child'] == 1) \n          & (test['Age'].isnull()), 'Age'] \\\n    = test[(test['Pclass'] == 3) & (test['Sex'] == 'female') & (test['is_child'] == 1)]['Age'].median()","1f86df9a":"test.loc[test['Fare'].isnull()]","a5529ad1":"test.loc[test['Fare'].isnull(), 'Fare'] = test[(test['Pclass'] == 3)]['Fare'].median()","4fc4ffa7":"test = test.drop('Cabin', axis=1)","9147c2bf":"test['relatives'] = test['SibSp'] + test['Parch']","9cbf53a2":"test['group'] = test['relatives'].map(lambda x: 'alone' if x == 0\n                 else ('small group' if 1 <= x <= 3\n                      else 'big group'))","a6929403":"test = pd.get_dummies(test, columns=one_hot_features)","bd7ff9ab":"test['Sex'] = ord_enc.fit_transform(test[['Sex']])","cb9e4b36":"X_test = test.drop(['PassengerId', 'Name', \n                    'Ticket', 'SibSp', 'Parch', \n                    'relatives', 'title'], axis=1)","315d2a70":"X_test.head(2)","48974ed0":"X_train.shape, X_test.shape","8bd922f2":"rf = RandomForestClassifier(n_estimators=100, random_state=123)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)","c79a7ce4":"cross_val_score(rf, X_train, y_train, cv=10).mean()","cec780ac":"params = {'max_features': range(4, 10),\n         'min_samples_leaf': range(2, 10),\n         'max_depth': range(4, 10)}\nrnd_grid = RandomizedSearchCV(rf, params, random_state=123)\nrnd_grid.fit(X_train, y_train)","e62996fe":"rnd_grid.best_params_","0ab39fe7":"cross_val_score(rnd_grid.best_estimator_, X_train, y_train, cv=10).mean()","7647846c":"best_rf = best_rf = rnd_grid.best_estimator_\nbest_rf.fit(X_train, y_train)\ny_sub = best_rf.predict(X_test)","b11abf41":"output = pd.DataFrame()\noutput['PassengerId'] = test['PassengerId']\noutput['Survived'] = y_sub\noutput.to_csv('output_1.csv',index=False)","ff126049":"Indeed, the absence of a record of age and stateroom is a good sign\n\n\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435 \u0438 \u043a\u0430\u044e\u0442\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c","8fac0b6b":"Let's try to fill in the missing age entries.\n\n\u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435.","c4394bbc":"Possibly missing values of age and stateroom, will indicate whether the passenger survived or not\n\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438 \u043a\u0430\u044e\u0442\u044b, \u0431\u0443\u0434\u0443\u0442 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u0442\u043e, \u0432\u044b\u0436\u0438\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 \u0438\u043b\u0438 \u043d\u0435\u0442","204db2a8":"## EDA","794b5ef7":"## Preparing a test dataset","ee048ecf":"## data pre-processing","5f8ff7fc":"Perhaps the passenger is a child or an adult would also be a good sign.\n\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0431\u0435\u043d\u043a\u043e\u043c \u0438\u043b\u0438 \u0432\u0437\u0440\u043e\u0441\u043b\u044b\u043c \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c.","baab9cb9":"Data missing in three columns:\n1. Age - 20% of values are missing, we can fill in.\n2. Cabin - 77% of values are missing, we cannot fill this out without critical errors.\n3. \u0415mbarked - less than 1% of the values are missing, we can fill in the gaps or ignore them.\n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0442\u0440\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445:\n1. Age - 20% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.\n2. Cabin - 77% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044d\u0442\u043e \u0431\u0435\u0437 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a.\n3. \u0415mbarked - \u043c\u0435\u043d\u0435\u0435 1% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438\u043b\u0438 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445.","22048075":"The distribution has not changed, so we leave the combined feature.\nWe can also notice that people who traveled with 1-3 relatives had a higher chance of survival than those who traveled alone or in large groups\nLet's highlight another trait\n\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.\n\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043b\u044e\u0434\u0438, \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0432\u0448\u0438\u0435 \u0441 1-3 \u0440\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430\u043c\u0438, \u0438\u043c\u0435\u043b\u0438 \u0432\u044b\u0448\u0435 \u0448\u0430\u043d\u0441 \u0432\u044b\u0436\u0438\u0442\u044c, \u0447\u0435\u043c \u0442\u0435, \u043a\u0442\u043e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u0440\u0443\u043f\u043f\u0430\u0445.\n\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a","fae684a1":"## Random Forest","ef65b2d8":"The graph shows that most of the survivors are children\nLet's fill in the missing values of age, taking into account the class of the passenger, sex and category (child\/adult)\n\n\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441\u0440\u0435\u0434\u0438 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0434\u0435\u0442\u0435\u0439,\n\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430, \u043f\u043e\u043b\u0430 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438(\u0440\u0435\u0431\u0435\u043d\u043e\u043a\/\u0432\u0437\u0440\u043e\u0441\u043b\u044b\u0439)"}}