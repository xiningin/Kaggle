{"cell_type":{"3b574b10":"code","3de38b97":"code","13f4483b":"code","e046afee":"code","a7ab8495":"code","f0dd49a6":"code","2856fe31":"code","7b296c88":"code","3c1ae5c5":"code","fcb6496a":"code","484e0f6f":"code","86df74ee":"code","3bdad65c":"code","e349f56e":"code","54dea66a":"code","b075c38d":"code","d9be98e8":"code","ff156c7c":"code","cb4d11fa":"code","cbd4861e":"code","5f2c0027":"code","421e2a83":"code","f2647049":"code","41774450":"code","48426060":"code","b2e48dec":"code","f0742f1e":"code","deacba3a":"code","629f29e0":"code","c9debffe":"code","11f95466":"code","2f76378c":"code","562e8013":"code","7e1dcb2f":"code","8204b455":"code","356f9c40":"code","dd59d497":"code","8fef352d":"code","603cb592":"code","855dce1f":"code","968280a9":"code","81db6458":"code","09550ea8":"code","f35b84c5":"code","5c9fa570":"code","a364232d":"code","513e13b9":"code","8779e0fc":"code","947c7096":"code","98324870":"code","bb484cb6":"code","702cc7df":"code","fb802a2d":"code","b579de97":"code","afc326bc":"code","9e445672":"code","b21a9fc5":"code","6935e180":"code","9171df06":"code","32965043":"markdown","d91046f5":"markdown","e19bfdd3":"markdown","91667a3e":"markdown","94c6083e":"markdown","3b3befaa":"markdown","4b8624b4":"markdown","45d932e2":"markdown","960effc7":"markdown","a46dccf8":"markdown","d9133e7b":"markdown","27072c8c":"markdown","4a7f1ae4":"markdown","d2f83b44":"markdown","c3649559":"markdown","364ecfcd":"markdown","fae00e8a":"markdown","9f10e88f":"markdown","cefd62f3":"markdown","ce9ad421":"markdown","76e9ba57":"markdown","86d795b3":"markdown","72070845":"markdown","adefe853":"markdown","73e29ec4":"markdown","8bc50c90":"markdown","55eb6947":"markdown","e9c2a007":"markdown"},"source":{"3b574b10":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \nfrom wordcloud import WordCloud\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n\ndf_anime = pd.read_csv('..\/input\/anime_filtered.csv')\ndf_users = pd.read_csv('..\/input\/users_filtered.csv')\ndf_userlists = pd.read_csv('..\/input\/animelists_filtered.csv')","3de38b97":"df_anime.info()","13f4483b":"df_users.info()","e046afee":"df_userlists.info()","a7ab8495":"df_anime.head(3)","f0dd49a6":"df_users.head(3)","2856fe31":"df_userlists.head(3)","7b296c88":"anime = df_anime[df_anime.genre.notnull()][['anime_id','title','type','source','score','scored_by','rank','popularity','genre']]\nusers = df_users[df_users.gender.isin(['Female','Male'])][['username','gender','user_completed','user_days_spent_watching','birth_date' ]]\nuserlists = df_userlists[df_userlists.my_status.isin([1,2]) & df_userlists.anime_id.notnull()][['username', 'anime_id', 'my_score', ]]\n\nuserlists = pd.merge(userlists,users, how='inner')\nuserlists = pd.merge(userlists,anime, how='left')\n\nuserlists_sub = userlists[userlists.genre.notnull()].head(100000)\nuserlists_sub.head()","3c1ae5c5":"anime_rank_100 = df_anime[df_anime.popularity!=0].sort_values(by='rank').head(100).loc[:,['popularity','rank', 'title','type', 'source', 'scored_by','favorites','score']]\npopularity_and_rank_100 = anime_rank_100[(anime_rank_100.popularity <= 100)]\npopularity_and_rank_100[\"point\"] = (popularity_and_rank_100[\"scored_by\"] * popularity_and_rank_100[\"favorites\"] * popularity_and_rank_100[\"score\"]) \/ 10000000000\npopularity_and_rank_100","fcb6496a":"data = [\n    {\n        'y':popularity_and_rank_100[\"popularity\"],\n        'x': popularity_and_rank_100[\"rank\"],\n        'mode': 'markers',\n        'marker': {\n            'color': popularity_and_rank_100[\"popularity\"],\n            'size':  popularity_and_rank_100[\"point\"],\n            'showscale': True,\n            'sizemin':4\n        },\n        \"text\" :  popularity_and_rank_100[\"title\"]\n    }\n]\n\nlayout = go.Layout(title='In Terms Of Rank And Popularity TOP 100 Animes',\n                   xaxis=dict(title='Rank'),\n                   yaxis=dict( title='Popularity'),\n                   autosize=False,\n                   width=800,\n                   height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","484e0f6f":"df_title = popularity_and_rank_100['title'].astype(\"str\").tolist()\ndf_point  = popularity_and_rank_100['point'].astype(\"int32\").tolist()\n\nlist_popularity_and_rank_100 = []\n\nfor i in range(0, len(df_point)):\n    for j in range(0, df_point[i]):\n        list_popularity_and_rank_100.append(df_title[i])\n\nlist_popularity_and_rank_100[-10:]","86df74ee":"plt.subplots(figsize=(14,7))\nwordcloud = WordCloud(    collocations=False,\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(list_popularity_and_rank_100))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","3bdad65c":"anime_sorted_by_pop = df_anime[df_anime.popularity!=0].sort_values(by='popularity').head(100).loc[:,['title','popularity','rank']]\nanime_sorted_by_pop.head()","e349f56e":"f,ax1 = plt.subplots(figsize =(25,5))\nsns.pointplot(x='popularity',y='rank',data=anime_sorted_by_pop,color='red')\nplt.grid()","54dea66a":"anime_sorted_by_pop[anime_sorted_by_pop[\"popularity\"]==17]","b075c38d":"anime_genre = anime.genre\nanime_genre.head()","d9be98e8":"genre_list = []\n\ngenre_splited = []\n\nfor i in anime_genre.index:\n    for j in anime_genre[i].split(\", \"):\n        genre_splited.append(j)\n        if j not in genre_list:\n            genre_list.append(j)        ","ff156c7c":"genre_splited[0:6]","cb4d11fa":"anime_genres_count = pd.Series(genre_splited).value_counts() \n\nplt.figure(figsize=(15,10))\nsns.barplot(x=anime_genres_count.index.tolist(), y=anime_genres_count.tolist())\nplt.xlabel('Genres')\nplt.ylabel('Anime Count')\nplt.title('The Most Popular Genres In The Anime Industry (Regarded all Multi-label Genre Tags)') \nplt.xticks(rotation= 75) \nplt.show()","cbd4861e":"genre_firsts = []\n\nfor i in anime_genre.index:\n    genre_firsts.append(anime_genre[i].split(\", \")[0])","5f2c0027":"anime_genres_firsts = pd.Series(genre_firsts).value_counts()   \n\nplt.figure(figsize=(10,12))\nsns.barplot(x=anime_genres_firsts[0:25].tolist(), y=anime_genres_firsts[0:25].index.tolist())\nplt.xlabel('Genres')\nplt.ylabel('Anime Count')\nplt.title('25 Of The Most Popular Genres In The Anime Industry (Considered First Genre Tag)') \nplt.show()","421e2a83":"genres_with_comedy = []\n\nfor i in anime_genre.index:\n    if anime_genre[i].find('Comedy') > -1:\n        for j in anime_genre[i].split(\", \"):\n            if j != 'Comedy':\n                genres_with_comedy.append(j)       ","f2647049":"genres_with_comedy_count = pd.Series(genres_with_comedy).value_counts().head(10)   \n\nfig = {\n  \"data\": [\n    {\n      \"values\": genres_with_comedy_count.tolist(),\n      \"labels\": genres_with_comedy_count.index.tolist(),\n      \"domain\": {\"x\": [0, .8]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Top 10 Multi-label Tags With Comedy\"\n    }\n}\niplot(fig)","41774450":"genre_one_label = []\n\nfor i in anime_genre.index:\n    if len(anime_genre[i].split(\", \")) == 1:\n        genre_one_label.append(anime_genre[i])         ","48426060":"anime_genres_one_label_count = pd.Series(genre_one_label).value_counts()  \n\nplt.subplots(figsize=(14,7))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(anime_genres_one_label_count.index.tolist()))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","b2e48dec":"# for 43 genre\nF = [0]*43\nM =   [0]*43\n\ngenre_df = pd.DataFrame({'genre': genre_list, 'Female': F, 'Male': M})\ngenre_df.set_index('genre', inplace=True)\n\nfor i in userlists_sub.index:\n    for j in userlists_sub.genre[i].split(\", \"):\n        genre_df[userlists_sub.gender[i]][j] +=1 ","f0742f1e":"genre_df.head()","deacba3a":"#genre\nFemale = []\nMale = []\n\nfor i in genre_list:\n    Female.append(genre_df.loc[i,'Female']\/sum(genre_df.loc[i,:]))\n    Male.append(genre_df.loc[i,'Male']\/sum(genre_df.loc[i,:]))  \n\nf,ax = plt.subplots(figsize=(8,16))\nsns.barplot(x=Female, y=genre_list, label='Female', color='r', alpha = 0.7)\nsns.barplot(x=Male, y=genre_list, label='Male', color='b', alpha = 0.4)\n\nax.set(xlabel='Percentage of Genders', ylabel='Genres', title='Percentage of Anime Genres According to Gender')\nax.legend(loc='lower right',frameon= True)\nplt.show()","629f29e0":"users['birth_date'] = pd.to_datetime(users['birth_date'], errors = 'coerce')\nusers=users[users.birth_date.notnull()]\n\nbirth_date = users.birth_date\ngender = users.gender\nspent = users.user_days_spent_watching\n \nage = []\nfor each in birth_date:\n    age.append(round((datetime.datetime.now()-each).days\/365.25,1))","c9debffe":"age_dict = {'gender':gender,'age':age,'spent':spent}\nusers_age_spent = pd.DataFrame(age_dict,columns=['gender','age','spent'])\n\nfig, ax = plt.subplots(nrows=1, ncols=1,figsize=(5, 6))\nsns.boxplot(x=\"gender\", y=\"age\", data=users_age_spent, palette=\"Set1\", ax=ax)\nax.set_ylim([0, 60])\nplt.show()","11f95466":"age.sort()\nage[0:5]\n\n#in the first step i dropped obvious outliers\n\nusers_age_spent.drop(users_age_spent[users_age_spent.spent>1000].index, inplace=True)\nusers_age_spent.drop(users_age_spent[users_age_spent.age>80].index, inplace=True)","2f76378c":"users_age_spent.head()","562e8013":"fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(5, 6))\nsns.boxplot(x=\"gender\", y=\"spent\", data=users_age_spent, palette=\"Set1\", ax=ax)\nax.set_ylim([0, 300])\nplt.show()","7e1dcb2f":"users_age_spent.plot(kind='scatter', x='age', y='spent', alpha=0.5, figsize = (15,9),\n                     color=[\"r\" if each ==\"Female\" else \"b\" for each in users_age_spent.gender])\nplt.show()","8204b455":"F_stats = df_users[(df_users[\"gender\"]=='Female') & (df_users[\"stats_episodes\"]>=0)].loc[:,[\"stats_rewatched\",\"stats_mean_score\"]]     \nM_stats = df_users[(df_users[\"gender\"]=='Male') & (df_users[\"stats_episodes\"]>=0)].loc[:,[\"stats_rewatched\",\"stats_mean_score\"]]    \n\nf,ax=plt.subplots(1,2,figsize=(14,6))\nF_stats.stats_mean_score.plot.hist(ax=ax[0],bins=10,edgecolor='black',color='mediumvioletred')\nax[0].set_title('Female Mean Score')\nx1=list(range(0,11,1))\nax[0].set_xticks(x1)\nM_stats.stats_mean_score.plot.hist(ax=ax[1],bins=10,edgecolor='black',color='slateblue')\nax[1].set_title('Male Mean Score')\nx2=list(range(0,11,1))\nax[1].set_xticks(x2)\nplt.suptitle('Anime Rating by Gender')\nplt.show()","356f9c40":"anime_premiered = df_anime[df_anime.premiered.notnull()].premiered\nrelease_seasons = []\n\nfor i in anime_premiered.index:\n    release_seasons.append(anime_premiered[i].split(\" \")[0])\n\napc = pd.Series(release_seasons).value_counts()   \nanime_premiered_count = pd.DataFrame({'season':apc.index, 'premier':apc.values, 'order':[1,3,4,2]})\nanime_premiered_count.set_index('order', inplace=True)\nanime_premiered_count.sort_index(inplace=True)","dd59d497":"anime_premiered_count","8fef352d":"plt.figure(figsize=(5,4))\nsns.barplot(x='season',y='premier', data=anime_premiered_count, palette=\"muted\")\nplt.xticks(rotation=60)\nplt.title('Animes Released on the Premiere Seasons',color = 'darkred',fontsize=12)\nplt.show()","603cb592":"anime_premiered = df_anime[df_anime.premiered.notnull()].premiered\npremier_seasons = []\npremier_years = []\n\n\nfor i in anime_premiered.index:\n    if(2009 <= int(anime_premiered[i].split(\" \")[1]) <= 2018):\n        premier_seasons.append(anime_premiered[i].split(\" \")[0])\n        premier_years.append(anime_premiered[i].split(\" \")[1])\n        \npremier_df = pd.DataFrame({\n                            'Year':premier_years,\n                            'Spring': [1 if each == 'Spring' else 0 for each in premier_seasons],\n                            'Summer': [1 if each == 'Summer' else 0 for each in premier_seasons],\n                            'Fall':   [1 if each == 'Fall'   else 0 for each in premier_seasons],\n                            'Winter': [1 if each == 'Winter' else 0 for each in premier_seasons],\n                            })\n\npremier_years_seasons = premier_df.groupby(['Year'])['Spring','Summer','Fall','Winter'].agg('sum')","855dce1f":"premier_years_seasons.plot(kind='bar',stacked=True, figsize=(10,5), title='Animes Released on the Premiere Seasons by Years (Last 10 year)')\nplt.show()","968280a9":"broadcast = [x.split(\" at \")[0].strip() for x in df_anime[\"broadcast\"].astype(\"str\")]\nbroad_days = pd.Series(broadcast).value_counts()[2:9]\ndf_broad_days = pd.DataFrame({'days':broad_days.index, 'broadcast':broad_days.values, 'index':[7,6,5,2,4,1,3]}).set_index('index').sort_index()\n\nplt.figure(figsize=(7,4))\nsns.barplot(x='days',y='broadcast', data=df_broad_days, palette=\"hls\")\nplt.xticks(rotation=60)\nplt.title('Animes Released on the Premiere Seasons',color = 'darkred',fontsize=14)\nplt.show()","81db6458":"animetypes = df_anime['type'].value_counts(dropna=False)","09550ea8":"print(animetypes)","f35b84c5":"plt.figure(figsize=(8,5))\nsns.barplot(x=animetypes.index,y=animetypes.values, palette=\"rocket\")\nplt.title('Types of Animes',color = 'purple',fontsize=15)\nplt.show()","5c9fa570":"animesources= df_anime['source'].value_counts(dropna=False)\nanimesources = animesources[animesources.index != 'Unknown']","a364232d":"animesources.head(5)","513e13b9":"plt.figure(figsize=(10,6))\nsns.barplot(x=animesources.index,y=animesources.values, palette=\"Blues_d\")\nplt.xticks(rotation=60)\nplt.title('Sources of Animes',color = 'darkblue',fontsize=15)\nplt.show()","8779e0fc":"df_anime_ghibli = df_anime[(df_anime.favorites >= 500) & (df_anime[\"rank\"] <= 500) & (df_anime.title_english.notnull()) & \n                           (df_anime.studio == 'Studio Ghibli') & (df_anime.type == 'Movie')]\nanime_ghibli = df_anime_ghibli.loc[:,[\"title_english\", \"favorites\", \"aired_string\", \"rank\", \"score\"]]","947c7096":"#i normalized the result with p_norm\nanime_ghibli[\"p_norm\"] = ((anime_ghibli[\"favorites\"] - np.min(anime_ghibli[\"favorites\"]))) \/ (np.max(anime_ghibli[\"favorites\"]) - np.min(anime_ghibli[\"favorites\"]))\n#i added 000001 to showed The Tale of the Princess Kaguya which has 0 p_norm.\nanime_ghibli[\"point\"] = (anime_ghibli[\"p_norm\"]+0.000001)*75\nanime_ghibli[\"year\"] = [x.split(\", \")[1] for x in anime_ghibli[\"aired_string\"]]\nanime_ghibli.loc[2258:2259,\"title_english\"] = \"Howl's Moving Castle\"","98324870":"anime_ghibli.sort_values(\"rank\")","bb484cb6":"data = [\n    {\n        'y':anime_ghibli[\"score\"],\n        'x': anime_ghibli[\"rank\"],\n        'mode': 'markers',\n        'marker': {\n            'color':anime_ghibli[\"score\"],\n            'size':  anime_ghibli[\"point\"],\n            'showscale': True,\n            'sizemin':3\n        },\n        \"text\" : anime_ghibli[\"title_english\"] + ' (' + anime_ghibli[\"year\"] + ')'\n    }\n]\n\nlayout = go.Layout(title='Popular Anime Movies From Studio Ghibli',\n                   xaxis=dict(title='Rank'),\n                   yaxis=dict( title='Score'),\n                   autosize=False,\n                   width=800,\n                   height=600\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","702cc7df":"anime_movies = df_anime[(df_anime.type == \"Movie\") & (df_anime.aired_string != \"Not available\")]\nanime_movies[\"year\"] = [x.split(\",\")[1].strip()[0:4] if len(x.split(\",\")) > 1 else x.split(\",\")[0].strip()[0:4] for x in anime_movies[\"aired_string\"]]\n#location = [x.split(\",\")[1].strip() if len(x.split(\",\")) > 1 else x.split(\",\")[0].strip() for x in df_users[\"location\"].astype(\"str\")]\nanime_movies = anime_movies[\"year\"].value_counts()\nanime_movies_years = pd.DataFrame({'Year':anime_movies.index, 'Movie Count':anime_movies.values})\nanime_movies_years = anime_movies_years.sort_values(\"Year\")\n#i think 2018 and 2019 is incomplete\nanime_movies_years = anime_movies_years.iloc[:-2,:]","fb802a2d":"fig = px.line(anime_movies_years, x=\"Year\", y=\"Movie Count\", \n              title='Anime Movies by Years', width=750, height=400)\nfig.show()","b579de97":"location = [x.split(\",\")[1].strip() if len(x.split(\",\")) > 1 else x.split(\",\")[0].strip() for x in df_users[\"location\"].astype(\"str\")]","afc326bc":"pd.Series(location).value_counts()[:5] ","9e445672":"location = [\"USA\" if x in (\"USA\", \"United States of America\", \"U.S.A.\", \"US\", \"U.S.\", \"U.S.A\", \n                           \"usa\", \"United States\", \"California\", \"Texas\", \"New York\", \"Florida\", \n                           \"Ohio\", \"Michigan\", \"Illinois\", \"Washington\", \"Pennsylvania\", \"Virginia\", \n                           \"Arizona\", \"Maryland\", \"Tennessee\",  \"New Jersey\", \"North Carolina\", \n                           \"Colorado\", \"Oregon\", \"Indiana\", \"Massachusetts\", \"Minnesota\", \"NY\", \"CA\", \n                           \"TX\", \"FL\", \"PA\", \"IL\", \"MA\", \"NC\", \"NJ\", \"AZ\", \"GA\", \"VA\", \"IN\",\"TN\", \n                           \"MI\", \"SC\", \"MN\", \"NYC\", \"MD\", \"MO\", \"WI\", \"Tx\", \"CT\", \"NV\", \"OR\", \"KY\", \n                           \"OH\", \"Ca\", \"CO\", \"LA\", \"DC\", \"AL\", \"ny\", \"NH\", \"Philadelphia\", \"north carolina\", \n                           \"Missouri\", \"Nevada\", \"Kentucky\", \"Louisiana\", \"Connecticut\", \"california\", \n                           \"Oklahoma\", \"Alabama\", \"Hawaii\", \"Kansas\", \"Utah\", \"Iowa\", \"South Carolina\", \n                           \"Arkansas\", \"Nebraska\", \"texas\", \"Southern California\", \"New England\", \n                           \"Mississippi\", \"florida\", \"new york\", \"Idaho\", \"New Mexico\", \"Chicago\", \n                           \"New Hampshire\", \"Los Angeles\", \"Rhode Island\", \"New York City\", \"Maine\", \n                           \"America\", \"Alaska\", \"Delaware\", \"Northern Ireland\", \"ohio\", \"Seattle\", \n                           \"West Virginia\", \"North Dakota\", \"South Dakota\", \"Boston\", \"Vermont\", \"Montana\", \n                           \"michigan\", \"washington\", \"New york\", \"Las Vegas\", \"Wisconsin\", \n                           \"Washington State\", \"SoCal\")  else x for x in location]\nlocation = [\"UK\" if x in (\"England\", \"england\", \"United Kingdom\", \"Scotland\", \"Glasgow\", \"London\", \"london\", \n                          \"Wales\", \"Manchester\", \"Nottingham\", \"Kent\", \"England.\", \"united kingdom\", \"Essex\", \n                          \"UK\", \"Uk\", \"uk\", \"Britain\", \"Liverpool\", \"Birmingham\") else x for x in location]\nlocation = [\"Netherlands\" if x in (\"Netherlands\", \"The Netherlands\", \"Nederland\", \"Netherland\", \"the Netherlands\", \n                                   \"The netherlands\", \"netherlands\", \"Holland\", \"Amsterdam\", \"Utrecht\", \"Rotterdam\", \n                                   \"Limburg\", \"the netherlands\", \"Zuid-Holland\") else x for x in location]\nlocation = [\"Canada\" if x in (\"Canada\", \"canada\", \"CANADA\", \"Ontario\", \"ON\", \"Quebec\", \"Qu\u00e9bec\", \"Alberta\", \n                              \"Toronto\", \"Vancouver\", \"British Columbia\", \"Saskatchewan\", \"ontario\", \"BC\", \n                              \"Montreal\", \"Manitoba\", \"Nova Scotia\") else x for x in location]\nlocation = [\"Brazil\" if x in (\"Brazil\", \"Brasil\", \"S\u00e3o Paulo\", \"Sao Paulo\", \"S\u00e3o Paulo - Brazil\", \"Paran\u00e1\", \n                              \"Par\u00e1\", \"Rio de Janeiro\", \"RJ\", \"RS\", \"SP\", \"MG\", \"DF\", \"Porto Alegre\", \n                              \"Minas Gerais\", \"brasil\", \"Brasil.\", \"Rio Grande do Sul\", \"Santa Catarina\", \n                              \"Bahia\", \"Cear\u00e1\", \"Pernambuco\", \"Brazil.\", \"brazil\", \n                              \"Goi\u00e1s\") else x for x in location]\nlocation = [\"Russia\" if x in (\"Russia\", \"Moscow\", \"Russian Federation\", \"Saint-Petersburg\", \"St. Petersburg\", \n                              \"Saint Petersburg\", \"Novosibirsk\", \"\u0420\u043e\u0441\u0441\u0438\u044f\", \n                              \"St.Petersburg\") else x for x in location]\nlocation = [\"Japan\" if x in (\"Japan\", \"japan\", \"Tokyo\", \"tokyo\", \"Ikebukuro\", \"Kyoto\", \n                             \"Osaka\") else x for x in location]\nlocation = [\"Turkey\" if x in (\"Turkey\", \"Istanbul\", \"\u0130stanbul\", \"istanbul\", \"Ankara\", \"Bursa\", \"T\u00fcrkiye\", \n                              \"Turkiye\", \"turkey\", \n                              \"\u0130zmir\", \"Izmir\", \"Antalya\", \"TURKEY\") else x for x in location]\nlocation = [\"Philippines\" if x in (\"Philippines\", \"philippines\", \"Manila\", \"Cavite\", \"Phillipines\", \n                                   \"Metro Manila\", \"manila\", \"Cebu\", \"Laguna\", \n                                   \"Quezon City\") else x for x in location]\nlocation = [\"Indonesia\" if x in (\"Indonesia\", \"Jakarta\", \"indonesia\", \"Bandung\", \"West Java\", \"Central Java\", \n                                 \"jakarta\", \"Jawa Timur\", \"Banten\", \"Jawa Barat\", \"East Java\", \"Indonesian\", \n                                 \"Yogyakarta\") else x for x in location]\nlocation = [\"Spain\" if x in (\"Spain\", \"Espa\u00f1a\", \"Barcelona\", \"Madrid\", \"Valencia\", \n                             \"Catalonia\") else x for x in location]\nlocation = [\"Poland\" if x in (\"Poland\", \"poland\", \"Warsaw\", \"Warszawa\", \"Pozna\u0144\", \"\u0141\u00f3d\u017a\", \"Gda\u0144sk\", \"Wroc\u0142aw\", \n                              \"Krak\u00f3w\", \"Cracow\", \"Szczecin\", \"Gdynia\", \"Bydgoszcz\", \"Lublin\", \"Bia\u0142ystok\", \n                              \"Katowice\", \"Rzesz\u00f3w\", \"Lodz\") else x for x in location]\nlocation = [\"France\" if x in (\"France\", \"Paris\", \"france\", \"paris\", \"FRANCE\") else x for x in location]\nlocation = [\"Australia\" if x in (\"Australia\", \"australia\", \"Sydney\", \"Melbourne\", \"Victoria\", \"WA\", \"NSW\",\n                                 \"Western Australia\", \"New South Wales\", \"Adelaide\", \"Queensland\", \"Perth\",\n                                 \"South Australia\", \"Brisbane\") else x for x in location]\nlocation = [\"Portugal\" if x in (\"Portugal\", \"Lisbon\", \"Porto\", \"Lisboa\", \"portugal\") else x for x in location]\nlocation = [\"Italy\" if x in (\"Italy\", \"Italia\", \"italy\", \"Rome\", \"Roma\", \"italia\") else x for x in location]\nlocation = [\"Mexico\" if x in (\"Mexico\", \"M\u00e9xico\", \"Mexico City\", \"mexico\", \"Baja California\", \n                              \"Jalisco\") else x for x in location]\nlocation = [\"Argentina\" if x in (\"Argentina\", \"Buenos Aires\") else x for x in location]\nlocation = [\"Greece\" if x in (\"Greece\", \"Athens\", \"greece\", \"athens\") else x for x in location]\nlocation = [\"Hungary\" if x in (\"Hungary\", \"Budapest\") else x for x in location]\nlocation = [\"India\" if x in (\"India\", \"india\", \"INDIA\", \"Mumbai\") else x for x in location]\nlocation = [\"Sweden\" if x in (\"Sweden\", \"sweden\", \"Stockholm\", \"Gothenburg\") else x for x in location]\nlocation = [\"Latvia\" if x in (\"Latvia\", \"Riga\") else x for x in location]\nlocation = [\"Germany\" if x in (\"Germany\", \"Berlin\", \"Deutschland\", \"NRW\", \"Hamburg\", \"germany\", \n                               \"Bavaria\", \"Hessen\") else x for x in location]\nlocation = [\"Malaysia\" if x in (\"Malaysia\", \"malaysia\", \"Kuala Lumpur\", \"Selangor\", \n                                \"Sarawak\") else x for x in location]\nlocation = [\"Bulgaria\" if x in (\"Bulgaria\", \"Sofia\") else x for x in location]\nlocation = [\"Singapore\" if x in (\"Singapore\", \"singapore\") else x for x in location]\nlocation = [\"Romania\" if x in (\"Romania\", \"Bucharest\") else x for x in location]\nlocation = [\"Austria\" if x in (\"Austria\", \"Vienna\") else x for x in location]\nlocation = [\"Israel\" if x in (\"Israel\", \"israel\") else x for x in location]\nlocation = [\"Lithuania\" if x in (\"Lithuania\", \"Vilnius\", \"Kaunas\") else x for x in location]\nlocation = [\"Czech Republic\" if x in (\"Czech Republic\", \"Czech republic\", \"Prague\") else x for x in location]\nlocation = [\"Estonia\" if x in (\"Estonia\", \"Tallinn\") else x for x in location]\nlocation = [\"Ukraine\" if x in (\"Ukraine\", \"Kiev\", \"Odessa\") else x for x in location]\nlocation = [\"Norway\" if x in (\"Norway\", \"Oslo\", \"norway\") else x for x in location]\nlocation = [\"Colombia\" if x in (\"Colombia\", \"Cali\") else x for x in location]\nlocation = [\"New Zealand\" if x in (\"New Zealand\", \"Auckland\", \"NZ\") else x for x in location]\nlocation = [\"Finland\" if x in (\"New Zealand\", \"Helsinki\") else x for x in location]\nlocation = [\"Belgium\" if x in (\"Belgium\", \"belgium\", \"Antwerp\") else x for x in location]\nlocation = [\"China\" if x in (\"China\", \"Hong Kong\") else x for x in location]\nlocation = [\"Vietnam\" if x in (\"Vietnam\", \"Viet Nam\") else x for x in location]\nlocation = [\"Peru\" if x in (\"Peru\", \"Per\u00fa\", \"Lima\") else x for x in location]\nlocation = [\"Saudi Arabia\" if x in (\"Saudi Arabia\", \"Riyadh\", \"KSA\", \"K.S.A\", \"Jeddah\", \"saudi arabia\", \n                                    \"jeddah\") else x for x in location]\nlocation = [\"Kuwait\" if x in (\"Kuwait\", \"kuwait\") else x for x in location]\nlocation = [\"Thailand\" if x in (\"Thailand\", \"Bangkok\") else x for x in location]\nlocation = [\"Bangladesh\" if x in (\"Bangladesh\", \"Dhaka\", \"bangladesh\") else x for x in location]\nlocation = [\"United Arab Emirates\" if x in (\"UAE\", \"Dubai\") else x for x in location]\nlocation = [\"Ireland\" if x in (\"Ireland\", \"Dublin\") else x for x in location]\nlocation = [\"Chile\" if x in (\"Chile\", \"Santiago\") else x for x in location]\nlocation = [\"Serbia\" if x in (\"Serbia\", \"Belgrade\") else x for x in location]\nlocation = [\"Egypt\" if x in (\"Egypt\", \"Cairo\") else x for x in location]\nlocation = [\"Belarus\" if x in (\"Belarus\", \"Minsk\") else x for x in location]\nlocation = [\"Denmark\" if x in (\"Denmark\", \"Copenhagen\") else x for x in location]\nlocation = [\"South Korea\" if x in (\"South Korea\", \"Korea\", \"Seoul\") else x for x in location]\nlocation = [\"Croatia\" if x in (\"Croatia\", \"Zagreb\") else x for x in location]\nlocation = [\"Georgia\" if x in (\"Georgia\", \"Tbilisi\", \"georgia\") else x for x in location]\n#Georgia can be state of America \"Georgia\" or country \"Georgia\". I putted it in country category. \n#And i putted GA in state category.","b21a9fc5":"pd.Series(location).value_counts()[:5] ","6935e180":"loc = pd.Series(location).value_counts()[:25] \ndf_loc = pd.DataFrame({'Country':loc.index, 'Members':loc.values})\n\nfig = px.bar(df_loc, x='Country', y='Members', title=\"Anime Watchers Around The World (MyAnimeList Members)\")\nfig.show()","9171df06":"loc_exc_usa = pd.Series(location).value_counts()[0:250] \ndf_loc_exc_usa = pd.DataFrame({'Country':loc_exc_usa.index, 'Members':loc_exc_usa.values})\ndf_loc_exc_usa = df_loc_exc_usa[df_loc_exc_usa.Country != \"Antarctica\"].reset_index(drop=True)\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = df_loc_exc_usa['Country'],\n        locationmode = 'country names',\n        z = df_loc_exc_usa['Members'],\n        text = df_loc_exc_usa['Country'],\n        colorscale=\n            [[0.0, \"rgb(251, 237, 235)\"],\n            [0.09, \"rgb(245, 211, 206)\"],\n            [0.12, \"rgb(239, 179, 171)\"],\n            [0.15, \"rgb(236, 148, 136)\"],\n            [0.22, \"rgb(239, 117, 100)\"],\n            [0.29, \"rgb(235, 90, 70)\"],\n            [0.36, \"rgb(207, 81, 61)\"],\n            [0.41, \"rgb(176, 70, 50)\"],\n            [0.77, \"rgb(147, 59, 39)\"],\n            [1.00, \"rgb(110, 47, 26)\"]],\n        autocolorscale = False,\n        reversescale = False,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Members'),\n      ) ]\n\nlayout = dict(\n    title = 'Anime Watchers Around The World (On The Basis Of MyAnimeList)',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nw_map = dict( data=data, layout=layout )\niplot( w_map, validate=False)","32965043":"#### To be continued with other charts... Please upvote if you like it","d91046f5":"In the first chart i charted anime which are in the both top 100 rank and popularity. In the following pointplot chart i showed top 100 popular anime regardless rank.","e19bfdd3":"# Introduction","91667a3e":"In the first genre chart, i considered all multi-label tags. This chart is free from anime count because despite the fact that a number of anime has one genre tag, others have multiple (4,5,6) genres.","94c6083e":"In the chart one point is striking. 17th popular anime despite a high popularity score has the worst rank score among 100 others. This anime is Sword Art Online II.","3b3befaa":"I used boxplot to see outliers. ","4b8624b4":"In the following chart i considered only singular tags not multi-labels.","45d932e2":"In the third chart i showed tags coexisting with comedy tag.","960effc7":"In this kernel, i looked over anime industry in the light of MyAnimeList dataset that is Imdb of Anime. I tried to use various visualization libraries and create all of the major chart types for data visualization. \n\nAnime is hand-drawn and computer animation originating from or associated with Japan. The History of anime can be traced back to the start of the 20th century, with the earliest verifiable films dating from 1917 (wikipedia)\n\nAs an old anime watcher i must say this firstly: Anime is not a cartoon :) There are some of my favorite animes at the following picture. Lets begin...\n\n\n**Content**\n1. [Importing Libraries And Loading Datasets](#1)\n1. [Data Exploration and Preparation](#2)\n1. [Data Visualization](#3)\n    1. [In Terms Of Rank And Popularity TOP 100 Animes (Plotly Bubble Chart, WordCloud, PointPlot)](#3.1)\n    1. [The Most Popular Genres In The Anime Industry (With Multi-label Tags) (Bar Plots, Pie Chart, WordCloud)](#3.2)\n    1. [Genre Preferences According to Gender And Age-Gender Correlation (Bar Plots as Subplot, Scatter Plot, Boxplot, Histogram)](#3.3)\n    1. [Features of Anime (Release, Types, Sources) (Bar Plots, Stacked Bar Plot)](#3.4)\n    1. [10 Best Studio Ghibli Movies & Anime Movies By Years (Plotly Bubble Chart, Line Charts)](#3.5)    \n    1. [Anime Watchers Around The World (In MyAnimeList Members) (Plotly Map Plot)](#3.6)    \n1. [Ending](#4)","a46dccf8":"In this chart i compared males and females for anime genre preferences. For a quick calculation, i considered only 100k rows. Even so result is sensible. When i run for 1m rows, the result is same. Girls are ahead in Shoujo, Shounen Ai and Yaoi.","d9133e7b":"<a id=\"2\"><\/a> <br>\n## 2. Data Exploration and Preparation","27072c8c":"<a id=\"3.2\"><\/a> <br>\n### 3.B. The Most Popular Genres In The Anime Industry (With Multi-label Tags) (Bar Plots, Pie Chart, WordCloud)","4a7f1ae4":"In this section i took a look Ghibli Movies. My intention was to chart Hayao Miyazaki's Movies but unfortunately there was no director variable in the anime dataset. Still 6 of 10 movies' director is Miyazaki. ","d2f83b44":"Anime watchers' age range seems to be between 15-38 mostly. Yes adults watch anime too.","c3649559":"<a id=\"3\"><\/a> <br>\n## 3. Data Visualization","364ecfcd":"<a id=\"3.4\"><\/a> <br>\n### 3.D. Features of Anime (Release, Types, Sources) (Bar Plots, Stacked Bar Plot)","fae00e8a":"The chart agree with Elon Musk. Fullmetal Alchemist is one of the best anime :) I started anime with first Fullmetal Alchemist series too.\n\nFor WordCloud, i used calculated point too. I appended each anime title to a list as much as their points.","9f10e88f":"<a id=\"3.1\"><\/a> <br>\n### 3.A. In Terms Of Rank And Popularity TOP 100 Animes (Plotly Bubble Chart, WordCloud, PointPlot)","cefd62f3":"In the second chart, i counted first tags from multilabels, and singular tags. In this chart each anime has one genre.","ce9ad421":"In this section i charted anime features as premiere times, types of anime, source of anime with bar plots.","76e9ba57":"I filtered top 100 popular and ranked anime. For bubble size i devised a formula and calculated point from \"scored_by\", \"favorites\" and \"score\" variables. So in addition rank and popularity (x, y axis) i showed effects of 3 variables as bubble size. For a better view i set min size of bubble.","86d795b3":"<a id=\"4\"><\/a> <br>\n## 4. Ending","72070845":"<a id=\"3.6\"><\/a> <br>\n### 3.F. Anime Watchers Around The World (In MyAnimeList Members) (Plotly Map Plot)","adefe853":"<a id=\"3.3\"><\/a> <br>\n### 3.C. Genre Preferences According to Gender And Age-Gender Correlation (Bar Plots as Subplot, Scatter Plot, Boxplot)","73e29ec4":"In this section, i showed location data on map. But it was hard. Because of location field is free text, there were a lot of combination of locations and irrelevant places like Konoha, Narnia, Soul Society... I strived to form meaningful map chart. So i added cities and states to their countries if a location's value is counted greater than or equal to twenty.","8bc50c90":"<a id=\"3.5\"><\/a> <br>\n### 3.E. 10 Best Studio Ghibli Movies & Anime Movies By Years (Plotly Bubble Chart, Line Charts)","55eb6947":"<img src=\"https:\/\/i.ibb.co\/9Z03vtj\/anime-world.jpg\" width=\"1600px\"> ","e9c2a007":"<a id=\"1\"><\/a> <br>\n## 1. Importing Libraries And Loading Datasets"}}