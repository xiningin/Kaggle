{"cell_type":{"c0e9c729":"code","a2bffdba":"code","ed796bc8":"code","ed4d8b0b":"code","eb86db18":"code","bc47d3f6":"code","040e9f6f":"code","2c5cbfd8":"code","81d6ae40":"code","f0b03055":"code","4aa98745":"code","066efee5":"code","bd510414":"code","a5ffeeb4":"code","110bf81e":"code","43c2cc11":"code","17ecdf18":"code","02e1255c":"code","e82c0328":"code","4667e0ac":"code","decc995a":"code","2374810e":"code","266b5a59":"code","13369ae9":"code","0403a85e":"code","a9fa4ff1":"code","22f9b864":"code","9d378bff":"code","6a0bf37e":"code","870aaad9":"code","aac0b444":"code","e31bbc86":"code","f3392086":"code","67b92e43":"code","5dcab92c":"code","8a70c66d":"code","b22c758a":"code","0f3e4665":"code","e0441de9":"code","f3997f57":"code","98f53bbf":"code","5a21ce8f":"code","ba137df1":"code","3e67fdcd":"code","deb778a5":"code","afb2c672":"code","3c37934e":"code","9e27afec":"code","9725ecb9":"code","1f7b8f21":"code","0585997f":"code","b1666d25":"markdown","643bad33":"markdown","adc0ed59":"markdown","fc1071dc":"markdown","e57ef5ef":"markdown","2c835d7d":"markdown","cafd958c":"markdown","9305807f":"markdown","4fc1fb20":"markdown","c0234f3a":"markdown","d4c557e1":"markdown","07c37ae7":"markdown","a72ef0ab":"markdown","14865007":"markdown","f6639604":"markdown","1c55aaa7":"markdown","6c3b6d2b":"markdown","7746acce":"markdown","7d909520":"markdown","ee9bd447":"markdown","13c141a1":"markdown","ac009bac":"markdown","1672d83a":"markdown","757f8ec3":"markdown","110fd15b":"markdown","ce9b0e71":"markdown","e1ef7f2c":"markdown","3f82d559":"markdown","3133c9ba":"markdown","88721971":"markdown","c88287a5":"markdown","b7ec432c":"markdown","e7983194":"markdown","e10e6d11":"markdown","c35a60b3":"markdown","1160a38c":"markdown","79b161fc":"markdown","f309ea35":"markdown","c967a87d":"markdown","66ee3845":"markdown","b122950a":"markdown","d57b4a08":"markdown","a0e13da4":"markdown","db02fdb9":"markdown","8a4817bd":"markdown","23493692":"markdown","400dc89f":"markdown","1071b4fd":"markdown","0ce254f3":"markdown","4cb69e73":"markdown","d752eba0":"markdown","38b7219a":"markdown","de8f5c12":"markdown","e24f55b7":"markdown","b12fb444":"markdown","54c0d126":"markdown","36b6a549":"markdown","9c43db21":"markdown"},"source":{"c0e9c729":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns \nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, train_test_split\nfrom geopy.distance import distance, geodesic","a2bffdba":"train = pd.read_csv(\"..\/input\/atividade-regressao-PMR3508\/train.csv\")\ntest = pd.read_csv(\"..\/input\/atividade-regressao-PMR3508\/test.csv\")","ed796bc8":"train.head()","ed4d8b0b":"train.shape","eb86db18":"test.head()","bc47d3f6":"test.shape","040e9f6f":"train = train.drop(\"Id\", axis = 1)\ntestId = test.Id\ntest = test.drop(\"Id\", axis = 1)","2c5cbfd8":"train.head()","81d6ae40":"test.head()","f0b03055":"train.describe()","4aa98745":"train.info()","066efee5":"train.isnull().sum()","bd510414":"test.info()","a5ffeeb4":"test.isnull().sum()","110bf81e":"train[\"median_house_value\"].hist()","43c2cc11":"plt.figure(figsize=(10,10))\nplt.title(\"Matriz de correla\u00e7\u00e3o\")\nsns.heatmap(train.corr(), annot=True, linewidths=0.2)","17ecdf18":"coord_LA = (34.0522, -118.2437)\ncoord_SF = (37.7749, -122.4194)\ncoord_SD = (32.7157, -117.1611)\n\ndef dist_cidades(df):\n    coord_casa = (df[\"latitude\"], df[\"longitude\"])\n    df[\"dist_to_city\"] = min(geodesic(coord_casa, coord_SF).km, geodesic(coord_casa, coord_LA).km, geodesic(coord_casa, coord_SD).km)\n    \n    return df","02e1255c":"train = train.apply(dist_cidades, axis = 1)\ntrain = train.drop([\"latitude\", \"longitude\"], axis = 1)","e82c0328":"train[\"avg_rooms\"] = train.total_rooms\/train.households\ntrain[\"avg_bedrooms\"] = train.total_bedrooms\/train.households\ntrain[\"avg_population\"] = train.population\/train.households\ntrain[\"bedrooms\/rooms\"] = train.total_bedrooms\/train.total_rooms\ntrain[\"people\/room\"] = train.population\/train.total_rooms\ntrain[\"people\/bedroom\"] = train.population\/train.total_bedrooms","4667e0ac":"plt.figure(figsize=(15,15))\nplt.title(\"Matriz de correla\u00e7\u00e3o\")\nsns.heatmap(train.corr(), annot=True, linewidths=0.2)","decc995a":"train = train.drop([\"people\/room\", \"avg_population\", \"avg_rooms\", \"total_bedrooms\", \"total_rooms\"], axis = 1)\nplt.figure(figsize=(10,10))\nplt.title(\"Matriz de correla\u00e7\u00e3o\")\nsns.heatmap(train.corr(), annot=True, linewidths=0.2)","2374810e":"test = test.apply(dist_cidades, axis = 1)\ntest[\"avg_bedrooms\"] = test.total_bedrooms\/test.households\ntest[\"bedrooms\/rooms\"] = test.total_bedrooms\/test.total_rooms\ntest[\"people\/bedroom\"] = test.population\/test.total_bedrooms\n\ntest = test.drop([\"latitude\", \"longitude\", \"total_bedrooms\", \"total_rooms\"], axis = 1)","266b5a59":"train.head()","13369ae9":"test.head()","0403a85e":"scaler = MinMaxScaler()\nsel_col = ['median_age', 'population', 'households', 'median_income', 'dist_to_city', \"avg_bedrooms\", \"bedrooms\/rooms\", \"people\/bedroom\"]\ntrainScaled = scaler.fit_transform(train[sel_col])\nX_train, X_test, Y_train, Y_test = train_test_split(trainScaled, train['median_house_value'], test_size=0.20)","a9fa4ff1":"testScaled = scaler.fit_transform(test[sel_col])","22f9b864":"def rmsle(y_test,y_pred):\n    return np.sqrt(np.mean((np.log(np.abs(y_pred)+1) - np.log(np.abs(y_test)+1))**2))","9d378bff":"scorer = make_scorer(rmsle, greater_is_better=False)","6a0bf37e":"LR = LinearRegression()\nLR.get_params()","870aaad9":"LR_score = np.mean(cross_val_score(LR, X_train, Y_train, cv = 10))\nLR_score","aac0b444":"grid_params_LR = {\"fit_intercept\":[True, False],\"normalize\":[True,False]}\ngrid_LR = GridSearchCV(LR,grid_params_LR,cv=10,scoring=scorer)","e31bbc86":"grid_LR.fit(X_train, Y_train)\nprint(grid_LR.best_estimator_)","f3392086":"LR = grid_LR.best_estimator_\nLR.fit(X_train, Y_train)\nY_pred = LR.predict(X_test)\nLR_RMSLE = rmsle(Y_pred, Y_test)\nprint(\"RMSLE:\", LR_RMSLE)","67b92e43":"knn = KNeighborsRegressor()\nknn.get_params()","5dcab92c":"knn_score = np.mean(cross_val_score(knn, X_train, Y_train, cv = 10))\nknn_score","8a70c66d":"grid_params_knn = {\"n_neighbors\":[i for i in range(1,31)],\"weights\":[\"uniform\",\"distance\"],\"p\":[1,2]}\ngrid_knn = GridSearchCV(knn,grid_params_knn,cv=10)","b22c758a":"grid_knn.fit(X_train,Y_train)\nprint(grid_knn.best_estimator_)","0f3e4665":"knn = grid_knn.best_estimator_\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nknn_RMSLE = rmsle(Y_pred, Y_test)\nprint(\"RMSLE:\", knn_RMSLE)","e0441de9":"ridge = Ridge()\nridge.get_params()","f3997f57":"ridge_score = np.mean(cross_val_score(ridge, X_train, Y_train, cv = 10))\nridge_score","98f53bbf":"grid_params_ridge = {\"alpha\":np.linspace(0.5,10.5,101).tolist()}\ngrid_ridge = GridSearchCV(ridge,grid_params_ridge,cv=10,scoring=scorer)","5a21ce8f":"grid_ridge.fit(X_train, Y_train)\nprint(grid_ridge.best_estimator_)","ba137df1":"ridge = grid_ridge.best_estimator_\nridge.fit(X_train, Y_train)\nY_pred = ridge.predict(X_test)\nridge_RMSLE = rmsle(Y_pred, Y_test)\nprint(\"RMSLE:\", ridge_RMSLE)","3e67fdcd":"lasso = Lasso()\nlasso.get_params()","deb778a5":"lasso_score = np.mean(cross_val_score(lasso, X_train, Y_train, cv = 10))\nlasso_score","afb2c672":"grid_params_lasso = {\"alpha\":np.linspace(0.5,5.5,51).tolist(),\"normalize\":[True,False]}\ngrid_lasso = GridSearchCV(lasso,grid_params_lasso,cv=10,scoring=scorer)","3c37934e":"grid_lasso.fit(X_train, Y_train)\nprint(grid_lasso.best_estimator_)","9e27afec":"lasso = grid_lasso.best_estimator_\nlasso.fit(X_train, Y_train)\nY_pred = lasso.predict(X_test)\nlasso_RMSLE = rmsle(Y_pred, Y_test)\nprint(\"RMSLE:\", lasso_RMSLE)","9725ecb9":"resultados = {\"Regressor\": [\"LR\", \"kNN\", \"Ridge\", \"LASSO\"],\"RMSLE\":[LR_RMSLE, knn_RMSLE, ridge_RMSLE, lasso_RMSLE], \"Score\":[LR_score, knn_score, ridge_score, lasso_score]}\ntable = pd.DataFrame(resultados, columns =  [\"Regressor\", \"RMSLE\", \"Score\"])\nprint(table)","1f7b8f21":"knn.fit(X_train, Y_train)","0585997f":"YtestPred = knn.predict(test)\npredict = pd.DataFrame(testId)\npredict[\"median_house_value\"] = YtestPred\npredict.to_csv(\"pred_knn.csv\", index = False, index_label = 'Id')","b1666d25":"## 4.4. Implementa\u00e7\u00e3o de Regress\u00e3o LASSO:","643bad33":"Agora, devemos criar um arquivo csv com as predi\u00e7\u00f5es para a base de teste, no formato pedido:","adc0ed59":"Esse regressor tem um score de:","fc1071dc":"Treinando-o para a base de dados:","e57ef5ef":"Nesse EP, vamos criar um modelo que prediz o pre\u00e7o m\u00e9dio de uma casa em uma regi\u00e3o da Calif\u00f3rnia. O objetivo \u00e9 testar os regressores lineares vistos at\u00e9 agora em aula: KNN, LASSO e RIDGE.","2c835d7d":"Vamos buscar otimizar os hiperpar\u00e2metros por meio do GridSearch:","cafd958c":"Com isso, percebe-se uma concentra\u00e7\u00e3o em aproximadamente US$150.000.","9305807f":"# 1. Introdu\u00e7\u00e3o:","4fc1fb20":"## 4.3. Implementa\u00e7\u00e3o de Regress\u00e3o RIDGE:","c0234f3a":"Note que a coluna \"Id\" serve apenas para indexa\u00e7\u00e3o. Assim, ele ser\u00e1 removido de ambos os datasets. No entanto, vamos armazenar a ordem do arquivo de teste para fazer a submiss\u00e3o posteriormente:","d4c557e1":"Utilizando a biblioteca geopy, vamos definir uma fun\u00e7\u00e3o que calcula a dist\u00e2ncia de determinada casa at\u00e9 as tr\u00eas cidades, e retorna o menor valor encontrado:","07c37ae7":"Al\u00e9m disso, a partir da matriz de correla\u00e7\u00e3o, podemos ver que as vari\u00e1veis \"total_rooms\", \"total_bedrooms\", \"population\" e \"household\" t\u00eam uma liga\u00e7\u00e3o extrema entre si. Por isso, vamos adicionar uma m\u00e9dia em rela\u00e7\u00e3o a \"households\". Al\u00e9m disso, podemos adicionar a vari\u00e1vel \"bedrooms\/rooms\", uma vez que \"total_bedrooms\" e \"total_rooms\" t\u00eam alta correla\u00e7\u00e3o entre si, mas baixa com a vari\u00e1vel alvo. Finalmente, podemos tamb\u00e9m criar as features \"people\/room\" e \"people\/bedroom\":","a72ef0ab":"Vamos importar as bases de treino e teste, respectivamente:","14865007":"Primeiramente, \u00e9 interessante analisar como est\u00e3o distribu\u00eddos os valores das casas:","f6639604":"Junto a um sistema de scoring que leva em conta esse erro:","1c55aaa7":"Vamos normalizar o conjunto de treino, exceto a vari\u00e1vel de classe, e vamos criar um conjunto de avalia\u00e7\u00e3o:","6c3b6d2b":"## 3.1. Leitura dos dados:","7746acce":"Com isso, vamos remover \"people\/room\", \"avg_population\", \"avg_rooms\", \"total_bedrooms\" e \"total_rooms\":","7d909520":"Devemos escolher o modelo que apresentou menor RMSLE, mas que ainda tenha um score razo\u00e1vel. Temos a seguinte tabela:","ee9bd447":"Realizando uma an\u00e1lise quantitativa inicial dos dados de treino:","13c141a1":"Esse regressor tem score de:","ac009bac":"Vamos otimizar os hiperpar\u00e2metros para o menor RMSLE utilizando o GridSearch:","1672d83a":"A partir desse heatmap, percebemos que a feature mais relacionada ao alvo \u00e9 a renda m\u00e9dia (\"median_income\"). Aparentemente, as vari\u00e1veis de posi\u00e7\u00e3o (latitude e longitude) n\u00e3o t\u00eam influ\u00eancia sobre as outras vari\u00e1veis. Vamos convert\u00ea-las para uma s\u00f3 feature: a menor dist\u00e2ncia at\u00e9 as tr\u00eas maiores cidades da Calif\u00f3rnia: Los Angeles, S\u00e3o Francisco e S\u00e3o Diego.","757f8ec3":"# 4. Aplica\u00e7\u00e3o dos modelos de Regress\u00e3o:","110fd15b":"Em nosso dataset, temos os seguintes atributos:","ce9b0e71":"Portanto temos:","e1ef7f2c":"Novamente, utilizaremos o GridSearch para encontrar os melhores hiperpar\u00e2metros:","3f82d559":"# PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es","3133c9ba":"## Autor: Rodrigo Gebara Reis","88721971":"O mesmo ocorre com os dados de teste:","c88287a5":"Definidas as vari\u00e1veis auxiliares que ser\u00e3o utilizadas, vamos cri\u00e1-las tamb\u00e9m para a base de teste:","b7ec432c":"Esse regressor tem score de:","e7983194":"O processo a ser seguido \u00e9 totalmente an\u00e1logo ao realizado para as outras duas regress\u00f5es:","e10e6d11":"# 6. Exporta\u00e7\u00e3o das predi\u00e7\u00f5es:","c35a60b3":"## 4.2. Implementa\u00e7\u00e3o de Regress\u00e3o kNN:","1160a38c":"Vamos proceder criando uma matriz de correla\u00e7\u00e3o, relacionando todas as features:","79b161fc":"Se ainda n\u00e3o tiverem uma correla\u00e7\u00e3o significante com a vari\u00e1vel alvo, podemos descart\u00e1-las.","f309ea35":"# 3. An\u00e1lise da base de dados:","c967a87d":"Agora vamos visualizar as primeiras linhas do dataframe de treino, para conhecer seus atributos. Al\u00e9m disso, devemos conferir seu tamanho:","66ee3845":"Agora vamos aplicar essa fun\u00e7\u00e3o ao dataframe de treino, substituindo latitude e longitude pela dist\u00e2ncia:","b122950a":"## 3.2. Tratamento inicial dos dados:","d57b4a08":"Vamos fazer a importa\u00e7\u00e3o das bibliotecas pertinentes: pandas, matplotlib e seaborn para an\u00e1lise dos dados e cria\u00e7\u00e3o de gr\u00e1ficos; numpy para algumas opera\u00e7\u00f5es matem\u00e1ticas; sklearn para os regressores propriamente ditos e geopy para c\u00e1lculo de dist\u00e2ncias a partir de coordenadas geogr\u00e1ficas:","a0e13da4":"Note que n\u00e3o h\u00e1 dados faltantes na base de dados, o que deve proporcionar uma an\u00e1lise mais precisa.","db02fdb9":"Observando a matriz, vemos que \"people\/room\", \"people\/bedroom\" e \"avg_population\" est\u00e3o muito relacionadas, ent\u00e3o podemos manter apenas uma delas. Al\u00e9m disso, temos que \"total_rooms\" \u00e9 aproximadamente igual a \"avg_rooms\". O mesmo ocorre com \"households\" e \"total_bedrooms\"; \"households\" e \"total_rooms\".","8a4817bd":"Visualizando o in\u00edcio de cada tabela para conferir os atributos:","23493692":"## 3.3. Explora\u00e7\u00e3o inicial dos dados:","400dc89f":"$\\bullet$ Id - Identifica\u00e7\u00e3o dos locais\n\n$\\bullet$ latitude: Latitude do local (em graus)\n\n$\\bullet$ longitude: Longitude do local\n\n$\\bullet$ median_age: Mediana das idades dos im\u00f3veis no local\n\n$\\bullet$ total_rooms: Contagem do n\u00famero de c\u00f4modos das casas na regi\u00e3o\n\n$\\bullet$ total_bedrooms: Contagem do total de quartos das casas na regi\u00e3o\n\n$\\bullet$ population: Popula\u00e7\u00e3o na regi\u00e3o\n\n$\\bullet$ households: N\u00famero total de casas na regi\u00e3o\n\n$\\bullet$ median_income: Mediana da renda das pessoas na regi\u00e3o\n\n$\\bullet$ median_house_value: Vari\u00e1vel Target.","1071b4fd":"Logo, o regressor RIDGE que vamos escolher tem score de:","0ce254f3":"# 2. Importa\u00e7\u00e3o das bibliotecas:","4cb69e73":"Realizando o mesmo procedimento para os dados de teste:","d752eba0":"Esse regressor tem score de:","38b7219a":"Logo, vemos que o regressor kNN \u00e9 o que apresentou menor RMSLE e maior Score, o que n\u00e3o \u00e9 de surpreender. A regress\u00e3o kNN \u00e9 baseada em otimizar o hiperpar\u00e2metro k para conseguir o menor RMSE e, consequentemente, o menor RMSLE.","de8f5c12":"## 4.1. Implementa\u00e7\u00e3o de Regress\u00e3o Linear:","e24f55b7":"## EP2: Regress\u00e3o Linear na Base \"California Housing\"","b12fb444":"Al\u00e9m disso, tamb\u00e9m devemos normalizar o dataset de teste, de modo que tenhamos entradas de ordens de grandeza equivalentes, condi\u00e7\u00e3o necess\u00e1ria para classifica\u00e7\u00e3o correta da vari\u00e1vel de classe:","54c0d126":"Podemos calcular o erro do melhor estimador comparando o resultado gerado pelo conjunto de teste com o \"gabarito\" do conjunto de avalia\u00e7\u00e3o:","36b6a549":"Devemos definir uma fun\u00e7\u00e3o para calcular o \"root mean squared log error\", que ser\u00e1 usado no Leaderboard:","9c43db21":"Assim, escolhemos o regressor com melhor pontua\u00e7\u00e3o:"}}