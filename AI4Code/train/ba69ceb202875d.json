{"cell_type":{"40856f5c":"code","4bcc3cc5":"code","85b93766":"code","4ee09a32":"code","03c214af":"code","99b46ec3":"code","e17fe193":"code","c930778f":"code","ea0471cf":"code","302abe51":"code","f04cfb04":"code","4103f9eb":"code","3e955c82":"code","8657517b":"code","f4fbb6e2":"code","bf333920":"code","7ef8862f":"code","da49c17d":"code","7bb509ad":"code","0cdaca00":"code","91055f01":"code","48af77ef":"code","be2cab59":"code","fb5543b9":"code","d336ac39":"code","fde1e7fe":"code","bf84c5c8":"code","e45649d1":"code","db2a6542":"code","73178cd8":"code","f20db4f2":"code","f4a0fe70":"code","bbb171d0":"code","13a39262":"code","1bb45f99":"code","2ab23e0e":"code","b71ee2bc":"markdown","56fa845b":"markdown","2ba16450":"markdown","80f657f2":"markdown","7b2a506f":"markdown","ce653563":"markdown","d16d6c6e":"markdown","3c59a401":"markdown","47f78708":"markdown","70dd2f0b":"markdown","011dd6c5":"markdown","0cfe4d38":"markdown","2a9cafd9":"markdown","5ec5f250":"markdown","3236ef94":"markdown","900f09c5":"markdown","8f554a5f":"markdown","dfd9f29b":"markdown","91203f42":"markdown"},"source":{"40856f5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4bcc3cc5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","85b93766":"#read the dataset \n\ndf = pd.read_csv('..\/input\/diamonds\/diamonds.csv')","4ee09a32":"#check top values \n\ndf.head()","03c214af":"#check how many rows and columns in the dataset \n\ndf.shape","99b46ec3":"#describe the dataset \n\ndf.describe()","e17fe193":"df.isnull().sum()","c930778f":"df.isnull().any()","ea0471cf":"#calculate skewness\n\nprint('The skewness is: \\n')\n\nprint(df.skew())","302abe51":"#check kurtosis\n\nprint('The kurtosis is: \\n')\n\nprint(df.kurtosis())","f04cfb04":"fig, axes = plt.subplots(1,2, figsize=(12,5))\n\nsns.distplot(df['depth'], ax=axes[0])\nsns.distplot(df['price'], ax=axes[1])\nplt.show()","4103f9eb":"fig, axes = plt.subplots(1,2, figsize=(15,5))\n\nsns.distplot(df['x'], ax=axes[0])\nsns.distplot(df['y'], ax=axes[1])\n\nplt.show()","3e955c82":"df.corr()","8657517b":"fig, ax = plt.subplots()\n\n\nsns.heatmap(df.corr(), annot=True, vmin=0, vmax=1)  #here define the range\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n\n\nfig.tight_layout()\nplt.show()","f4fbb6e2":"#calculate correlation of particule feature\ndf[['table','price']].corr()","bf333920":"#calculate correlation of z vs depth\ndf[['z','depth']].corr()","7ef8862f":"df.cov()","da49c17d":"df['depth'].var()","7bb509ad":"print('The variance is:-\\n')\n\nprint(df.var())","0cdaca00":"#calculate standard deviation\n\nprint('The sta. deviation is:-\\n')\n\nprint(df.std())","91055f01":"print(\"The skewness is:-\\n\")\n\nprint(df.skew())","48af77ef":"print('The kurtosis is:-\\n')\n\nprint(df.kurtosis())","be2cab59":"f, axes = plt.subplots(3, 2, figsize=(7, 7), sharex=True)\n\nsns.distplot(df.iloc[:,0], color='skyblue', ax=axes[0,0])\nsns.distplot(df.iloc[:,1], color='olive', ax=axes[0,1])\nsns.distplot(df.iloc[:,5], color='gold', ax=axes[1,0])\nsns.distplot(df.iloc[:,6], color='teal', ax=axes[1,1])\nsns.distplot(df.iloc[:,7], color='red', ax=axes[2,0])\nsns.distplot(df.iloc[:,8], color='blue', ax=axes[2,1])\n\n\n\nplt.show()","fb5543b9":"#check the unique values \n\nprint(df.cut.unique())","d336ac39":"df.cut.value_counts().plot(kind='bar', color='green')\n\nplt.text(x = -0.15, y = df.cut.value_counts()[1]+1, s = df.cut.value_counts()[1])\nplt.text(x = 0.85, y = df.cut.value_counts()[0]+2, s = df.cut.value_counts() [0])\nplt.text(x = 1.85, y = df.cut.value_counts()[2]+3, s = df.cut.value_counts() [2])\nplt.text(x = 2.85, y = df.cut.value_counts()[3]+4, s = df.cut.value_counts() [3])\nplt.text(x = 3.85, y = df.cut.value_counts()[4]+5, s = df.cut.value_counts() [4])\n\nplt.title('Count the value cutting edge', fontsize=18)\nplt.xlabel('Cut', fontsize=15, fontweight='bold', fontstyle='italic')\nplt.ylabel('Counts', fontsize=15, fontweight='bold', fontstyle='italic')\n\nplt.show()","fde1e7fe":"sns.barplot(x = 'cut', y = 'depth',data=df)\n\nplt.xlabel('cutting edge types')\nplt.ylabel('depth of diamond')\nplt.show()","bf84c5c8":"plt.figure(figsize=(10,5))\nplt.pie(df.clarity.value_counts(), autopct=\"%.1f%%\", radius=2.5)\n\n\nplt.show() #print before show","e45649d1":"plt.figure(figsize=(10,4))\n\nplt.pie(df.clarity.value_counts(), autopct=\"%.1f%%\", radius=2.0, labels=['SI1','VS2','SI2','VS1','VVS2','VVS1','IF','I1'])\n\n\nplt.show()","db2a6542":"#specify the bins (bar) for histogram\n\nplt.hist(df['price'], bins=6)\n\n#define labels and title\n\nplt.title('Histogram of Diamond Price')\nplt.xlabel('Price', fontsize=12)\nplt.ylabel('Frequency', fontsize=12)\n\nplt.show()","73178cd8":"#specify the bins (bar) for histogram\n\nplt.hist(df['depth'], bins=6)\n\n#define labels and title\n\nplt.title('Histogram of Diamond Depth')\nplt.xlabel('Depth', fontsize=12)\nplt.ylabel('Frequency', fontsize=12)\n\nplt.show()","f20db4f2":"sns.set_style('whitegrid') \nsns.distplot(df['price'], kde = False, color ='red', bins = 30) ","f4a0fe70":"#sns.set_style('whitegrid') \nsns.distplot(df['depth'], kde = True, color ='red', bins = 30) ","bbb171d0":"df.head()","13a39262":"#sns.set_style('whitegrid') \nsns.distplot(df['price'], kde = False, color ='red', bins = 30) ","1bb45f99":"print('The minimum value of diamond price:',(df['price'].min()))\n\nprint('The maximum value of diamond price:', (df['price'].max()))","2ab23e0e":"plt.boxplot(df['price'])\n\n#add title and label\nplt.title('Box Plot of Price', fontsize=15)\nplt.ylabel('Count', fontsize=12)\n\n#add labesl of five summary \nplt.text(x = 1.1, y=df['price'].min(), s='min')\nplt.text(x = 1.1, y=df['price'].max(), s='max')\n\nplt.text(x = 1.1, y=df.price.quantile(0.25), s='Q1')\nplt.text(x = 1.1, y=df['price'].median(), s='median(Q2)')\nplt.text(x = 1.1, y=df.price.quantile(0.75), s='Q3')\n\n\n#check outliers\n#add an arrow(annotate) to show the outliers\n\n\n\nplt.show()","b71ee2bc":"**Variance**","56fa845b":"* From above graph in **price** values have more tend towards the right side called as **positive skewness**. \n\n* It means that more outliers present in that column.","2ba16450":"**Null Values**","80f657f2":"**Outliers**","7b2a506f":"* From above dataset **price** as a target column.","ce653563":"**Covariance**","d16d6c6e":"* There is no any null values.","3c59a401":"**Visualization**","47f78708":"* Depth of all types of diamond are same. Its like **Normal Distribution**.","70dd2f0b":"* Above cut type is reference of diamond cutting. There are 5 types of cutting. ","011dd6c5":"**Distplot**","0cfe4d38":"**Histogram**","2a9cafd9":"1. There are total 53940 rows and 11 columns(also called as features)","5ec5f250":"**Pie Chart**","3236ef94":"**Point Estimation Plot**","900f09c5":"* It is used basically for **univariant** set of observations and visualizes it through a histogram i.e. only one observation and hence we choose one particular column of the dataset.","8f554a5f":"**Correlation**","dfd9f29b":"* The above graph shows diamond price always hike. ","91203f42":"**Box Plot**"}}