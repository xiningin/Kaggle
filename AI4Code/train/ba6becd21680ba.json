{"cell_type":{"3b254e9f":"code","bbe761fa":"code","77c37882":"code","c9dd2471":"code","e910e202":"code","1bef92da":"code","6a3e5dc3":"code","a06a6141":"code","9d8e287d":"code","cae969c0":"code","6dcb1ae8":"markdown","7825a95d":"markdown","52c55809":"markdown","49cdb6d1":"markdown","c0685f6e":"markdown","922b42c8":"markdown","c1571a5c":"markdown","e5531f9f":"markdown","d6c8bed7":"markdown","206997fd":"markdown","1673806c":"markdown","278e623b":"markdown","4762ee7b":"markdown"},"source":{"3b254e9f":"import io\nimport base64\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nfrom mpl_toolkits.basemap import Basemap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.colors import rgb2hex, Normalize\nfrom matplotlib.colorbar import ColorbarBase\n\nfrom IPython.display import HTML\n\nimport warnings\nwarnings.filterwarnings('ignore')","bbe761fa":"# comfirmed case constant\nNUM_CASES_MAX = 4000 # upper bound of comfirmed case, in case of some province have very high number\n\n# input, output constants\nCOVID_19_DATA_PATH = '\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv'\nMAP_DATA_PATH = '\/kaggle\/input\/cn-map\/'\nANIMATION_OUTPUT_PATH = '\/kaggle\/working\/COVID-19_geo_visualization.gif'\n\n# map bounding box constants\nLOWER_LEFT_LON = 73.55770111084013\nLOWER_LEFT_LAT = 18.159305572509766\nUPPER_RIGHT_LON = 134.7739257812502\nUPPER_RIGHT_LAT = 53.56085968017586","77c37882":"def num_days_max(month, year):\n    # Feb\n    if month is 2:\n        day = 29 if year % 4 is 0 else 28\n    else: # other months\n        day = 31 if month in [1, 3, 4, 7, 8, 10, 12] else 30   \n    return day\n\ndef validDate(date1, date2):\n    m1, d1, y1 = date1\n    m2, d2, y2 = date2\n    \n    if y1 < y2: return True\n    \n    if y1 > y2: return False\n    \n    if m1 < m2: return True\n    \n    if m1 > m2: return False\n    \n    if d1 > d2: return False\n    \n    return True","c9dd2471":"# Compute number of days based on latest dataset\ndata = pd.read_csv(COVID_19_DATA_PATH)\n\nstart_month, start_day, start_year = data['Date'][0].split('\/')\nlatest_month, latest_day, latest_year = data['Date'][len(data)-1].split('\/')\n\nyear = int(start_year); month = int(start_month); day = int(start_day)-1\n\ntime_line = {'start': None}\nwhile validDate((month, day, year), (int(latest_month), int(latest_day)-1, int(latest_year))):\n    # 12\/31\n    if month is 12 and day is 31:\n        year += 1\n        month = 1\n        day = 1\n    elif day >= num_days_max(month, year): # make sure day is valid after increment\n        month +=1\n        day = 1\n    else:\n        day +=1\n    \n    time_line[\"{}\/{}\/{}\".format(month,day,year)] = None","e910e202":"data['Country\/Region'].replace({\"Mainland China\": \"China\", \n                                \"Taiwan\": \"China\", \n                                \"Hong Kong\": \"China\", \n                                \"Macau\": \"China\"}, \n                               inplace=True)\nis_China = data['Country\/Region'] == \"China\"\ndata_China = data[is_China].fillna(0)\n\ngroup_provinces = data_China.groupby(\"Province\/State\")","1bef92da":"cmap = plt.get_cmap('Oranges')\nvmin = 0; vmax = NUM_CASES_MAX # set range.\n\n# create the dictionary for data and their color value\nfor date in time_line:\n    prov = {}\n    for p in group_provinces.groups:\n            \n        confirmed = 0.0\n        \n        # get the number of comfired cases for non-start date\n        if date is not 'start':\n            province_data = group_provinces.get_group(p)\n            confirmed = province_data[province_data['Date'] == date].max()['Confirmed']    \n            \n            # make sure there's no nan\n            if np.isnan(confirmed):\n                confirmed = 0.0\n        \n        # get color\n        if confirmed >= NUM_CASES_MAX: \n            confirmed = NUM_CASES_MAX\n        color = cmap(np.sqrt((confirmed-vmin)\/(vmax-vmin)))[:3]\n        \n        # correct some province names\n        if p == 'Macau': \n            p = 'Macao'\n        if p == 'Inner Mongolia':\n            p = 'Nei Mongol'\n        if p == 'Xinjiang':\n            p = 'Xinjiang Uygur'\n            \n        prov[p] = (confirmed, color)\n        \n    time_line[date] = prov","6a3e5dc3":"date_sample = time_line['1\/22\/20']\nprint('{Province: (num_cases, (R, G, B))}')\nres = [{p: date_sample[p]} for p in list(date_sample)[0:2]]\nfor e in res:\n    print(e)","a06a6141":"# Initialize the figure, axis and get the colormap\nfig = plt.figure(figsize=(40, 18))\nax = plt.gca()\n\ninfo_text = plt.text(74, 50, \"Start\\nComfired: 0\",fontsize=30)\n\n# Initialize the basemap with a bounding box drawing around the map.\nmp = Basemap(\n    llcrnrlon = LOWER_LEFT_LON, \n    llcrnrlat = LOWER_LEFT_LAT, \n    urcrnrlon = UPPER_RIGHT_LON, \n    urcrnrlat = UPPER_RIGHT_LAT\n)\n\n# combine maps of mainland China, Taiwan, Hong Kong and Macau\nmaps = ['CHN', 'TWN', 'HKG', 'MAC']\nstates_info = []; states = []\n\nfor m in maps:\n    mp.readshapefile(r'{}{}'.format(MAP_DATA_PATH, m), 'states', drawbounds=True)    \n    states_info +=[ d['NAME_1'] for d in mp.states_info] if 'CHN' in m else states_info + [ d['NAME_0'] for d in mp.states_info]\n    states += mp.states\n\ndef update(frame_num):\n    date = list(time_line)[frame_num]\n    lis = time_line[date]   \n\n    # add map polygons\n    for nshape,seg in enumerate(states): \n        if states_info[nshape] in lis:\n            color = rgb2hex(lis[states_info[nshape]][1])  \n        else:\n            color = rgb2hex(cmap(np.sqrt((0.0-vmin)\/(vmax-vmin)))[:3])\n        ax.add_patch(Polygon(seg,facecolor=color,edgecolor=color))\n    \n    # update plot information\n    if date is not 'start':\n        total_cases = sum([lis[i][0] for i in lis])\n        info_text.set_text(\"Date: {}\\nTotal Comfired Cases: {}\".format(date.replace('\/', '-'), \n                                                                                           int(total_cases)))\nani = animation.FuncAnimation(fig, update, frames=len(time_line))\n\nplt.title('Geographic Map Visualiztion of the Spread of COVID-19 in China', fontsize=30)\n\n# add colorbar\nax_c = fig.add_axes([0.19, 0.07, 0.64, 0.04])\nax_c.tick_params(labelsize=20)\n\ncb = ColorbarBase(ax_c, cmap=cmap, norm=Normalize(0, NUM_CASES_MAX), orientation='horizontal')\ncb.set_label(r'Number of Comfirmed Cases from 0 to {}+'.format(NUM_CASES_MAX), size=35)\n\nplt.show()","9d8e287d":"ani.save(ANIMATION_OUTPUT_PATH, writer='imagemagick', fps=1)","cae969c0":"filename = ANIMATION_OUTPUT_PATH\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii'))) ","6dcb1ae8":"Two helper functions to determine the max number of days in the given month of the year, and check if the first of the given two dates is earlier than the second.","7825a95d":"I know there must be better and more efficient ways to implement the geographic visualization for the dataset, so I'm open for any feedbacks of improvement!","52c55809":"Save the animation as in a gif file so the visualization can be displayed latter. Note that this following cell takes a while to run.","49cdb6d1":"## Organize\/Preprocess the dateset\n1. Extract data of China\n2. Group data by provinces\n3. Create a dictionary to store provinces and its number of comdired cases and RGB color","c0685f6e":"## Display the visualization","922b42c8":"## Draw the geographic map with colored provinces\n\nCreate figure and basemap objects. The map dataset of China only includes the mainland China, then it's necessary to combine it with the maps of Tai Wan, Hong Kong and Macau together.\n\nThe time_line dictionary contains all information needed in terms of drawing the color geographic map, so by adding each drawing of a date in the time_line to an animation as a single frame, it's able to visualize changes of numbers of cases by changes of colors. Note that this following code cell doesn't show the animation, it only display the initial map which numbers of comfirmed cases for all provinces are zero. The animation is saved as a gif file and presented in html latter on.","c1571a5c":"Create a time line. The time line starts at earliest date in the dataset. The dates in the time line are based upon the number of days from the starting day to the last day in the dateset. Hence the code adapts to the dynamic dataset as long as the format is consistant. ","e5531f9f":"# Geographic Map Visualiztion of COVID-19 Spreading in China\n\nCOVID-19 is spreading across the world. The virus is highly contagious, and many people's healths and lives are threaten by the virus. Understanding the spreading pattern of the virus is crucial for preventing further infection. This notebook uses geographic map to visualize the spread of the coronavirus in terms of the number of comfired cases in China throughout the time line from 1\/22\/2020 to latest update.","d6c8bed7":"## Create timeline","206997fd":"## Import required packages","1673806c":"Save the province and its number of comfired cases and RGB values into the time_line dictionary. Each date in the time line maps to a dictionary which province name is the key, a pair of num of cases and RGB values is the value. \n\nI set an upper bound for the case number to 2000 for colormapping since there are way more cases in Hubei than any other provinces combined. The second largest number of comfirmed cases in China is less than 2000 so far, so the upper bound allows the extreme in Hubei to stand out while keeps the details of changes in other provinces. However, the text message in the plot shows the true number of comfirmed cases.\n","278e623b":"Extract and group the data","4762ee7b":"Here is an example element in the time_line dictionary:\n"}}