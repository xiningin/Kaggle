{"cell_type":{"790dfa47":"code","e5d42bb9":"code","57facb5b":"code","dea27f7f":"code","6d21a187":"code","55333ec7":"code","79e5e383":"code","fc299ff7":"code","d9619656":"code","68b5369e":"code","5f88114b":"markdown","22c6338b":"markdown","2adf618b":"markdown","5f4ac3ea":"markdown","71416a61":"markdown","85dcf90c":"markdown"},"source":{"790dfa47":"!pip install --no-dependencies \/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/anyascii-0.3.0-py3-none-any.whl\n!pip install --no-dependencies \/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/textsearch\n!pip install --no-dependencies \/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/pyahocorasick\n!pip install --no-dependencies \/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/contractions","e5d42bb9":"from transformers import RobertaTokenizer,RobertaModel\nimport torch\ntokenizer = RobertaTokenizer.from_pretrained('\/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/tokenizer\/')\n\nclass JigsawModel(torch.nn.Module):\n    def __init__(self):\n        super(JigsawModel, self).__init__()\n        self.model = RobertaModel.from_pretrained('\/kaggle\/input\/hf-deepspeed-jigsaw-starter-libraries\/tokenizer\/')\n        self.fc = torch.nn.Linear(1024,1) #LazyLinear won't work with huggingface trainer\n        \n    def forward(self, ids, mask):        \n        out = self.model(input_ids=ids,attention_mask=mask,\n                         output_hidden_states=False)\n        outputs = self.fc(out.pooler_output)\n        return outputs","57facb5b":"model = JigsawModel()\nmodel.load_state_dict(torch.load('..\/input\/hf-deepspeed-jigsaw-starter-training\/results\/pytorch_model.bin'))","dea27f7f":"import nltk\nfrom nltk.tokenize import word_tokenize\nimport re\nimport contractions\n\nRE_COMBINATIONS = {\n    '\\n':' ',\n    'https?:\/\/\\S+|www\\.\\S+':' link ',\n    '[\/.]':' ',\n    '[ .-]':' ',\n    '([A-Za-z])\\1{2,}':'\\1',\n    '([A-Za-z]{1,})([*!?\\'])\\2{2,}([A-Za-z]{1,})':'\\1\\2\\3',\n}\n\nMAX_LENGTH = 190","6d21a187":"class JigsawEvalDataset(torch.utils.data.Dataset):\n    def __init__(self, df, max_length):\n        self.df = df\n        self.max_len = max_length\n        self.tokenizer = tokenizer\n        self.text = df['text'].values\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def transform_text(self,text):\n        #removing common errors specific to this dataset\n        global RE_COMBINATIONS\n        for i in RE_COMBINATIONS.items():\n            text = re.sub(i[0],i[1],text)\n        \n        #uncontracting words :D\n        text = ' '.join([contractions.fix(word) for word in text.lower().split()])\n        \n        #removing any punctuations\n        text = list(map(lambda x:x if x.isalpha() else '',word_tokenize(text)))\n        text = [word for word in text if word != '']\n        \n        return ' '.join(text)\n    \n    def __getitem__(self, index):\n        text = self.transform_text(self.text[index])\n        inputs = self.tokenizer.encode_plus(\n                        text,\n                        truncation=True,\n                        add_special_tokens=True,\n                        max_length=self.max_len,\n                        padding='max_length'\n                    )\n        \n        ids = inputs['input_ids']\n        mask = inputs['attention_mask']        \n        \n        return {\n            'ids': torch.tensor(ids, dtype=torch.long),\n            'mask': torch.tensor(mask, dtype=torch.long)\n        }","55333ec7":"from tqdm import tqdm\nimport numpy as np\n@torch.no_grad()\ndef valid_fn(model, dataloader):\n    model.eval()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    PREDS = []\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, data in bar:\n        ids = data['ids'].cuda()\n        mask = data['mask'].cuda()\n        \n        outputs = model(ids, mask)\n        PREDS.append(outputs.view(-1).cpu().detach().numpy()) \n    \n    PREDS = np.concatenate(PREDS)\n    return PREDS","79e5e383":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")\ndf.head()","fc299ff7":"test_dataset = JigsawEvalDataset(df, max_length=MAX_LENGTH)\ntest_loader = torch.utils.data.DataLoader(test_dataset, batch_size=32,\n                         num_workers=2, shuffle=False, pin_memory=True)","d9619656":"df['score'] = valid_fn(model.cuda(),test_loader)\ndf['score'] = df['score'].rank(method='first')\ndf.head()","68b5369e":"df.drop('text', axis=1, inplace=True)\ndf.to_csv(\"submission.csv\", index=False)","5f88114b":"<h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Validation Function <\/h1>","22c6338b":"<h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Redefineing Model <\/h1>","2adf618b":"<span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; color:chartreuse; border-style: inset; border-color: limegreen;border-radius:30px; text-align:center; border-width:8px; padding:20px;\"> Huggingface + Deepspeed Starter<\/h1><\/span>","5f4ac3ea":"<h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Loading Model <\/h1>","71416a61":"<h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\">  Inference Dataset <\/h1>","85dcf90c":"<h1 style = \"font-family: garamond; font-size: 35px; font-style: normal; letter-spcaing: 3px; border-width:5px; color:#90afc5; border-style: inset; border-radius: 100px 100px; border-color: #2a3132; padding:5px; text-align:center\"> Installing Contractions <\/h1>"}}