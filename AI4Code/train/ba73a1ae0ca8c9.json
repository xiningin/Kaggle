{"cell_type":{"cc7adf90":"code","54096596":"code","210cf99b":"code","dcfa3dd9":"code","1668f2ac":"code","ca6e0ce9":"code","5a92db0b":"code","020c719b":"code","a017c9cb":"code","f2f0241e":"code","334aa3ee":"code","c440d75a":"code","2b831aed":"code","065cabea":"code","e7c7f776":"code","2407fc87":"code","d3bedd9c":"code","8bb5c339":"code","384611b9":"code","0074c19c":"code","39f62e88":"code","072e0316":"code","9a446303":"code","93d986ab":"code","035d72de":"code","9c6b41af":"code","9e54bab5":"code","dae4e8cd":"code","d63a857b":"markdown","5bff6c9d":"markdown","a2f04743":"markdown","56eda85f":"markdown","fdeeb5fb":"markdown","035a28f9":"markdown"},"source":{"cc7adf90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54096596":"# !pip install optuna --user\n# import optuna","210cf99b":"import sys\nsys.path.append(\"..\/input\/iterativestratification\/iterative-stratification-master\/\")\nsys.path.append(\"..\/input\/my-lib-pytorch-nn\/lib_kaggle\/\")","dcfa3dd9":"# Modified from\n# https:\/\/www.kaggle.com\/utkukubilay\/notebooks\n\nimport sys\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedShuffleSplit\n\n# from lib.model import Model\n# from lib.model import train_fn, valid_fn, inference_fn\nfrom lib.data import *\nfrom lib.data_processing import *\n\nimport numpy as np\nimport random\nimport pandas as pd\nimport os\nimport json\n\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import VarianceThreshold\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef seed_everything(seed=1903):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","1668f2ac":"# model definition \n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\n\nclass Model(nn.Module):\n    def __init__(self, num_features, num_targets, hidden_size):\n        super(Model, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_features)\n        self.dropout1 = nn.Dropout(0.2)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_features, hidden_size))\n\n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(0.2)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(hidden_size, hidden_size))\n\n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(0.25)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(hidden_size, num_targets))\n\n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.relu(self.dense1(x))\n\n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.dense2(x))\n\n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = self.dense3(x)\n\n        return x\n\ndef train_fn(model, optimizer, scheduler, loss_fn, dataloader, device):\n    model.train()\n    final_loss = 0\n    count = 0\n    for data in dataloader:\n        optimizer.zero_grad()\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        # print(inputs.shape)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        optimizer.step()\n        # change the lr if use OneCycle schedule\n        # scheduler.step()\n\n        final_loss += loss.item()\n\n    final_loss \/= len(dataloader)\n    scheduler.step()\n\n    return final_loss\n\n\ndef valid_fn(model, loss_fn, dataloader, device):\n    model.eval()\n    final_loss = 0\n    valid_preds = []\n\n    for data in dataloader:\n        inputs, targets = data['x'].to(device), data['y'].to(device)\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n\n        final_loss += loss.item()\n        valid_preds.append(outputs.sigmoid().detach().cpu().numpy())\n\n    final_loss \/= len(dataloader)\n    valid_preds = np.concatenate(valid_preds)\n\n    return final_loss, valid_preds\n\n\ndef inference_fn(model, dataloader, device):\n    model.eval()\n    preds = []\n\n    for data in dataloader:\n        inputs = data['x'].to(device)\n\n        with torch.no_grad():\n            outputs = model(inputs)\n\n        preds.append(outputs.sigmoid().detach().cpu().numpy())\n\n    preds = np.concatenate(preds)\n\n    return preds","ca6e0ce9":"data_loc = \"..\/input\/lish-moa\/\"\n# load data\ntrain_features = pd.read_csv(data_loc + 'train_features.csv')\ntrain_targets_scored = pd.read_csv(data_loc + 'train_targets_scored.csv')\n# train_targets_nonscored = pd.read_csv(data_loc +  'train_targets_nonscored.csv')\n\ntest_features = pd.read_csv(data_loc + 'test_features.csv')\n# sample_submission = pd.read_csv(data_loc + 'sample_submission.csv')\n\ntarget_cols = [x for x in train_targets_scored.columns.to_list() if x != 'sig_id']\n# save the target_cols into json file\n\nprint(train_features.shape, test_features.shape)","5a92db0b":"GENES = [col for col in train_features.columns if col.startswith('g-')]\nCELLS = [col for col in train_features.columns if col.startswith('c-')]","020c719b":"# ohe\n\ndata_entire = pd.concat([train_features, test_features], axis=0)\n\n# name_dict = {}\n# for i, col in enumerate(train_features.columns.to_list()):\n#     name_dict[i] = col\n    \n# # data_train = data_final.iloc[0:23814, :]\ndata_entire.iloc[23812:23816, :]","a017c9cb":"feature_to_scale = [\"cp_time\"] + GENES + CELLS\nprint(len(feature_to_scale))\n\ndata_scaler = MinMaxScaler()\ndata_entire[feature_to_scale ] = data_scaler.fit_transform(data_entire[feature_to_scale ])","f2f0241e":"# data_entire[feature_to_scale].describe()","334aa3ee":"print(data_entire.shape)\n# ohe\ncols_ohe = ['cp_type', 'cp_dose']\ndata_entire = ohe(data_entire, cols_ohe)\n","c440d75a":"data_entire.head(2)","2b831aed":"data_train = data_entire.iloc[0:23814, :].copy(deep=True)\ndata_test = data_entire.iloc[23814:, :].copy(deep=True)","065cabea":"tmp_data_dir = \"\/kaggle\/working\/tmp_data\/\"\ntry:\n    os.makedirs(tmp_data_dir)\nexcept FileExistsError:\n    pass\n\ndata_train.to_pickle(tmp_data_dir + \"data_train.pkl\")\ndata_test.to_pickle(tmp_data_dir + \"data_test.pkl\")","e7c7f776":"seed_everything(seed=1903)\n\ntmp_data_dir = \"\/kaggle\/working\/tmp_data\/\"\n\ndata_train_x = pd.read_pickle(tmp_data_dir + \"data_train.pkl\")\ndata_test_x = pd.read_pickle(tmp_data_dir + \"data_test.pkl\")\n\ntarget_cols = [x for x in train_targets_scored.columns.to_list() if x != 'sig_id']\nfeature_cols = [c for c in data_train_x.columns.to_list() if c != 'sig_id']","2407fc87":"print(len(feature_cols)); print(len(target_cols))","d3bedd9c":"train_entire = data_train_x.merge(train_targets_scored, on=\"sig_id\")\n# ==========================\n# # k-fold split\n#\nNFOLDS = 5\nseed = 1903\nmskf = MultilabelStratifiedKFold(n_splits=NFOLDS, random_state=seed)\n\nfor f, (t_idx, v_idx) in enumerate(mskf.split(X=data_train_x, y=train_targets_scored[target_cols])):\n    train_entire.loc[v_idx, 'kfold'] = int(f)\n\ntrain_entire['kfold'] = train_entire['kfold'].astype(int)","8bb5c339":"train_entire.to_pickle(tmp_data_dir + \"data_train_process2_5fold_1903.pkl\")","384611b9":"# ============================\ndef run_training(train, valid, feature_cols, target_cols, model_path, seed, param_provided=None):\n    seed_everything(seed)\n\n    x_train, y_train = train[feature_cols].values, train[target_cols].values\n    \n    # create the dataset loader\n    train_dataset = MoADataset(x_train, y_train)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    \n    if valid is not None:\n        x_valid, y_valid = valid[feature_cols].values, valid[target_cols].values\n        valid_dataset = MoADataset(x_valid, y_valid)\n        validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\n\n\n    # create an model instance\n    if param_provided is not None:\n        EPOCHS = param_provided['epoch']\n        hidden_size = param_provided['hidden_size']\n        LEARNING_RATE = param_provided['lr']\n    \n    print(\"hidden_size: \", hidden_size, \", learning_rate: \", LEARNING_RATE)\n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n\n    model.to(DEVICE)\n\n    optimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY)\n    # scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.05, div_factor=1.5e3,\n    #                                           max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=4, gamma=0.5)\n    \n    loss_fn = nn.BCEWithLogitsLoss()\n\n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n\n    best_loss = np.inf\n\n    #\n    train_losses = []; valid_losses = []\n\n    for epoch in range(EPOCHS):\n\n        train_loss = train_fn(model, optimizer, scheduler, loss_fn, trainloader, DEVICE)\n        train_losses.append(train_loss)\n        # print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n        \n        if valid is not None: # only run the valid if valid set is provided\n            valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n            valid_losses.append(valid_loss)\n\n            if epoch % 5 == 0:\n                print(f\"EPOCH: {epoch}, train_loss: {train_loss}, valid_loss: {valid_loss}\")\n\n            if valid_loss < best_loss:\n\n                best_loss = valid_loss\n                # oof[val_idx] = valid_preds\n                torch.save(model.state_dict(), model_path)\n\n            elif EARLY_STOP == True:\n                early_step += 1\n                if early_step >= early_stopping_steps:\n                    break\n        else:\n            if epoch % 10 == 0:\n                print(f\"EPOCH: {epoch}, train_loss: {train_loss}\")\n    \n    print(\"early stop with epoch: \", epoch)\n    print(f\"LAST EPOCH: {epoch}, train_loss: {train_loss}\")\n    \n    if valid is None: # when there is not valid set, save the model\n        torch.save(model.state_dict(), model_path)\n\n    return {\"train_losses\": train_losses, \"valid_losses\": valid_losses}","0074c19c":"def run_training_tune(trial, train, valid, feature_cols, target_cols, model_path, seed):\n    seed_everything(seed)\n\n    x_train, y_train = train[feature_cols].values, train[target_cols].values\n    x_valid, y_valid = valid[feature_cols].values, valid[target_cols].values\n\n    # create the dataset loader\n    train_dataset = MoADataset(x_train, y_train)\n    valid_dataset = MoADataset(x_valid, y_valid)\n    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n    validloader = torch.utils.data.DataLoader(valid_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\n    hidden_size = trial.suggest_int(\"hidden_size\", 200, 500, step=50)\n    # create an model instance\n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n\n    model.to(DEVICE)\n\n    lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\n    # lr = 0.0084\n\n    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=WEIGHT_DECAY)\n    # this is used to change the learning rate when training model\n    # scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.05,\n    #                                          max_lr=1e-2, epochs=EPOCHS, steps_per_epoch=len(trainloader))\n    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=4, gamma=0.5)\n\n    loss_fn = nn.BCEWithLogitsLoss()\n\n    early_stopping_steps = EARLY_STOPPING_STEPS\n    early_step = 0\n\n    best_loss = np.inf\n\n    #\n    train_losses = []; valid_losses = []\n\n    for epoch in range(EPOCHS):\n\n        train_loss = train_fn(model, optimizer, scheduler, loss_fn, trainloader, DEVICE)\n        train_losses.append(train_loss)\n        # print(f\"FOLD: {fold}, EPOCH: {epoch}, train_loss: {train_loss}\")\n\n        valid_loss, valid_preds = valid_fn(model, loss_fn, validloader, DEVICE)\n        valid_losses.append(valid_loss)\n\n        if epoch % 5 == 0:\n            print(f\"EPOCH: {epoch}, train_loss: {train_loss}, valid_loss: {valid_loss}\")\n\n        if valid_loss < best_loss:\n\n            best_loss = valid_loss\n            # now don't save the model to adapt to the use of optuna\n            # torch.save(model.state_dict(), model_path)\n\n        elif EARLY_STOP == True:\n            early_step += 1\n            if early_step >= early_stopping_steps:\n                break\n                \n#     don't need this at the moment\n#     if trial.should_prune():\n#         raise optuna.exceptions.TrialPruned()\n\n    return valid_losses[-1]\n","39f62e88":"def print_model_results(train_loss, valid_loss, train_len, valid_len):\n    total_num_inst = train_len + valid_len\n    train_loss_final = train_loss\n    valid_loss_final = valid_loss\n    entire_train_loss = train_len \/ total_num_inst * train_loss_final \\\n                        + valid_len \/ total_num_inst * valid_loss_final\n    print(\"train loss: \", train_loss_final, \" valid loss: \", valid_loss_final,\n          \"entire loss: \", entire_train_loss)","072e0316":"import datetime\nimport time\n\nstart_time = datetime.datetime.now()\ntime.sleep(5)\nend_time = datetime.datetime.now()\nprint(\"time elapsed: \", end_time -  start_time)","9a446303":"# # run the main function\n\n# seed_everything(seed=1903)\n\n# # data_loc = \"..\/input\/lish-moa\/\"\n# # # load data\n# # train_features = pd.read_csv(data_loc + 'train_features.csv')\n# # train_targets_scored = pd.read_csv(data_loc + 'train_targets_scored.csv')\n# # # train_targets_nonscored = pd.read_csv(data_loc +  'train_targets_nonscored.csv')\n# #\n# # test_features = pd.read_csv(data_loc + 'test_features.csv')\n# # # sample_submission = pd.read_csv(data_loc + 'sample_submission.csv')\n# #\n# # target_cols = [x for x in train_targets_scored.columns.to_list() if x != 'sig_id']\n# # # save the target_cols into json file\n# #\n# #\n# # # prepare training\/test data\n# # data_train_x, data_test_x = one_step_processing(train_features, test_features)\n# #\n# # feature_cols = [c for c in data_train_x.columns.to_list() if c != 'sig_id']\n\n# # ====\n# # with open(\"..\/input\/process_1\/target_cols.json\", \"w\", encoding=\"utf-8\") as f:\n# #     json.dump(target_cols, f)\n# # with open(\"..\/input\/process_1\/feature_cols.json\", \"w\", encoding=\"utf-8\") as f:\n# #     json.dump(feature_cols, f)\n\n# # data_processed_input = \"..\/input\/process-1\/process_1\/\"\n# # with open(data_processed_input + \"target_cols.json\", \"r\", encoding=\"utf-8\") as f:\n# #     target_cols = json.load(f)\n# # with open(data_processed_input + \"feature_cols.json\", \"r\", encoding=\"utf-8\") as f:\n# #     feature_cols = json.load(f)\n\n\n# # HyperParameters\n# # ==========================\n# DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# print(DEVICE)\n# EPOCHS = 100 # 100\n# # EPOCHS = 2\n# BATCH_SIZE = 64\n# # LEARNING_RATE = 1e-3\n# LEARNING_RATE = 1e-2\n# WEIGHT_DECAY = 1e-5\n\n# EARLY_STOPPING_STEPS = 11\n# EARLY_STOP = True\n\n# num_features = len(feature_cols)\n# num_targets = len(target_cols)\n# # hidden_size = 1024\n# hidden_size = 50\n\n# if_tune = True\n# # =====================================================\n# # run kFold (# 3) twice\n# # SEED = [1903, 1881]\n# SEED = [1903]\n\n\n# prefix = \"process_1\"\n\n# models_dir = \"\/kaggle\/working\/trained_models\/\"\n# try:\n#     os.makedirs(models_dir)\n# except FileExistsError:\n#     pass\n\n\n# for seed in SEED:\n#     NFOLDS = 5\n#     # step 1: do the splitting on train_entire here to generate train, valid\n\n#     # train_entire = data_train_x.merge(train_targets_scored, on=\"sig_id\")\n#     # # ==========================\n#     # # # k-fold split\n#     # #\n#     # NFOLDS = 5\n#     # mskf = MultilabelStratifiedKFold(n_splits=NFOLDS, random_state=seed)\n#     #\n#     # for f, (t_idx, v_idx) in enumerate(mskf.split(X=data_train_x, y=train_targets_scored[target_cols])):\n#     #     train_entire.loc[v_idx, 'kfold'] = int(f)\n#     #\n#     # train_entire['kfold'] = train_entire['kfold'].astype(int)\n#     # # we can create 5 train-valid pairs\n#     # train = train_entire[train_entire[\"kfold\"] != 4]\n#     # valid = train_entire[train_entire[\"kfold\"] == 4]\n#     # ==========================\n#     # train-valid split\n#     # msss = MultilabelStratifiedShuffleSplit(nsplit=2, test_size=0.2,  random_state=seed)\n#     # for train_index, test_index in msss.split(X=data_train_x, y=train_targets_scored[target_cols]):\n#     #     train, valid = train_entire[train_index], train_entire[test_index]\n\n#     # ==========================\n\n#     # one can just load the post-process data here\n#     # train_entire = pd.read_pickle(data_processed_input + \"data_train_5fold_1903.pkl\")\n#     train_entire = pd.read_pickle(tmp_data_dir + \"data_train_process2_5fold_1903.pkl\")\n#     best_param = {}\n    \n#     for k_fold in np.arange(NFOLDS):\n#     # for k_fold in [4]:\n#         print(\"runing fold \", k_fold)\n#         # k_fold = 4\n#         train = train_entire[train_entire[\"kfold\"] != k_fold]\n#         valid = train_entire[train_entire[\"kfold\"] == k_fold]\n#         # data_test_x = pd.read_pickle(data_processed_input + \"data_test_x.pkl\")\n#         data_test_x = pd.read_pickle(tmp_data_dir + \"data_test.pkl\")\n        \n#         model_path = models_dir + prefix + \"_model_fold_{0:d}.pth\".format(k_fold)\n\n#         model_result = None\n        \n#         if if_tune:\n#             # optuna for hyperparameter tuning\n#             # ==========================\n#             start_time = datetime.datetime.now()\n\n#             study = optuna.create_study(direction=\"minimize\")\n#             study.optimize(lambda trial: run_training_tune(trial, train, valid, feature_cols, target_cols, model_path,\n#                                                        seed), n_trials=20) # timeout=600\n            \n#             # to check the optuna optimization\n#             pruned_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.PRUNED]\n#             complete_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.COMPLETE]\n#             print(\"Study statistics: \")\n#             print(\"  Number of finished trials: \", len(study.trials))\n#             print(\"  Number of pruned trials: \", len(pruned_trials))\n#             print(\"  Number of complete trials: \", len(complete_trials))\n\n#             print(\"Best trial:\")\n#             trial = study.best_trial\n\n#             print(\"  Value: \", trial.value)\n\n#             print(\"  Params: \")\n#             for key, value in trial.params.items():\n#                 print(\"    {}: {}\".format(key, value))\n                \n#             best_param[\"kfold_\" + str(k_fold)] = trial.params\n            \n#             end_time = datetime.datetime.now()\n#             print(\"time elapsed: \", end_time -  start_time)\n            \n#         else:\n#             model_result = run_training(train, valid, feature_cols, target_cols, model_path, seed)\n            \n#             print_model_results(model_result[\"train_losses\"][-1], model_result[\"valid_losses\"][-1],\n#                     train.shape[0], valid.shape[0])","93d986ab":"best_param_with_epoch = {'kfold_0': {'hidden_size': 450, 'lr': 0.0008925929114331024, 'epoch': 30},\n 'kfold_1': {'hidden_size': 400, 'lr': 0.0051852480304641155, 'epoch': 17},\n 'kfold_2': {'hidden_size': 200, 'lr': 0.0020302278497303823, 'epoch': 30},\n 'kfold_3': {'hidden_size': 300, 'lr': 0.0029643441803447576, 'epoch': 20},\n 'kfold_4': {'hidden_size': 250, 'lr': 0.006931570763035235, 'epoch': 16}}","035d72de":"# run the main function\n\nseed_everything(seed=1903)\n\n\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(DEVICE)\nEPOCHS = 100 # 100\n# EPOCHS = 2\nBATCH_SIZE = 64\n# LEARNING_RATE = 1e-3\nLEARNING_RATE = 1e-2\nWEIGHT_DECAY = 1e-5\n\nEARLY_STOPPING_STEPS = 11\nEARLY_STOP = True\n\nnum_features = len(feature_cols)\nnum_targets = len(target_cols)\n# hidden_size = 1024\nhidden_size = 50\n\nif_tune = False\n# =====================================================\n# run kFold (# 3) twice\n# SEED = [1903, 1881]\nSEED = [1903]\n\n\nprefix = \"process_2\"\n\nmodels_dir = \"\/kaggle\/working\/trained_models\/\"\ntry:\n    os.makedirs(models_dir)\nexcept FileExistsError:\n    pass\n\n# let's find the best epoch first\nfor seed in SEED:\n    NFOLDS = 5\n    train_entire = pd.read_pickle(tmp_data_dir + \"data_train_process2_5fold_1903.pkl\")\n    best_param = {}\n    \n    for k_fold in np.arange(NFOLDS):\n    # for k_fold in [0]:\n        print(\"runing fold \", k_fold)\n        \n#         print(\"hyperparameters: \", best_param_with_epoch[\"kfold_\" + str(k_fold)])\n#         EPOCHS = best_param_with_epoch[key]['epoch']\n#         EPOCHS = 100\n#         hidden_size = best_param_with_epoch[key]['hidden_size']\n#         LEARNING_RATE = best_param_with_epoch[key]['lr']\n        \n        # k_fold = 4\n        # train = train_entire[train_entire[\"kfold\"] != k_fold]\n        # valid = train_entire[train_entire[\"kfold\"] == k_fold]\n        train = train_entire\n        valid = None\n        \n        # data_test_x = pd.read_pickle(data_processed_input + \"data_test_x.pkl\")\n        data_test_x = pd.read_pickle(tmp_data_dir + \"data_test.pkl\")\n        \n        model_path = models_dir + prefix + \"_model_fold_{0:d}.pth\".format(k_fold)\n\n        model_result = None\n        \n        if if_tune:\n            # optuna for hyperparameter tuning\n            # ==========================\n            start_time = datetime.datetime.now()\n\n            study = optuna.create_study(direction=\"minimize\")\n            study.optimize(lambda trial: run_training_tune(trial, train, valid, feature_cols, target_cols, model_path,\n                                                       seed), n_trials=20) # timeout=600\n            \n            # to check the optuna optimization\n            pruned_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.PRUNED]\n            complete_trials = [t for t in study.trials if t.state == optuna.trial.TrialState.COMPLETE]\n            print(\"Study statistics: \")\n            print(\"  Number of finished trials: \", len(study.trials))\n            print(\"  Number of pruned trials: \", len(pruned_trials))\n            print(\"  Number of complete trials: \", len(complete_trials))\n\n            print(\"Best trial:\")\n            trial = study.best_trial\n\n            print(\"  Value: \", trial.value)\n\n            print(\"  Params: \")\n            for key, value in trial.params.items():\n                print(\"    {}: {}\".format(key, value))\n                \n            best_param[\"kfold_\" + str(k_fold)] = trial.params\n            \n            end_time = datetime.datetime.now()\n            print(\"time elapsed: \", end_time -  start_time)\n            \n        else:\n            start_time = datetime.datetime.now()\n            model_result = run_training(train, valid, feature_cols, target_cols, \n                                        model_path, seed, \n                                        param_provided = best_param_with_epoch[\"kfold_\" + str(k_fold)])\n            end_time = datetime.datetime.now()\n            print(\"time elapsed: \", end_time -  start_time)\n            \n            if valid is None:\n                print(\"loss on the entire training data\", model_result[\"train_losses\"][-1])\n            else:\n                print_model_results(model_result[\"train_losses\"][-1], model_result[\"valid_losses\"][-1],\n                        train.shape[0], valid.shape[0])","9c6b41af":"# --------------------- PREDICTION on test dataset---------------------\nx_test = data_test_x[feature_cols].values\ntestdataset = TestDataset(x_test)\ntestloader = torch.utils.data.DataLoader(testdataset, batch_size=BATCH_SIZE, shuffle=False)\n\nfor k_fold in np.arange(NFOLDS):\n# for k_fold in [0]:\n    \n    if best_param_with_epoch is not None:\n        hidden_size = best_param_with_epoch[\"kfold_\" + str(k_fold)]['hidden_size']\n        \n    model_path = models_dir + prefix + \"_model_fold_{0:d}.pth\".format(k_fold)\n        \n    model = Model(\n        num_features=num_features,\n        num_targets=num_targets,\n        hidden_size=hidden_size,\n    )\n    model.load_state_dict(torch.load(model_path))\n    model.to(DEVICE)\n    \n    predictions = inference_fn(model, testloader, DEVICE)\n    # save the prediction on test set\n    pred_test = pd.DataFrame(data=predictions, columns=target_cols).fillna(0)\n    pred_test = pd.concat([data_test_x[[\"sig_id\"]], pred_test], axis=1)\n    pred_result_f = models_dir + prefix + \"_fold_{0:d}_prediction.csv\".format(k_fold)\n    pred_test.to_csv(pred_result_f, index=False)","9e54bab5":"# for k_fold in np.arange(NFOLDS):\nfolds_to_use = np.arange(NFOLDS)\nfor i_count, k_fold in enumerate(folds_to_use):\n    pred_result_f = models_dir + prefix + \"_fold_{0:d}_prediction.csv\".format(k_fold)\n\n    pred_test = pd.read_csv(pred_result_f, header=0)\n    pred_test[target_cols] = pred_test[target_cols]\/len(folds_to_use)\n    if i_count == 0:\n        pred_test_average = pred_test.copy(deep=True)\n    else:\n        pred_test_average[target_cols] = pred_test_average[target_cols] + pred_test[target_cols]","dae4e8cd":"sample_submission = pd.read_csv(\"..\/input\/lish-moa\/\" + 'sample_submission.csv')\n\nsub = sample_submission.drop(columns=target_cols).merge(pred_test_average, on='sig_id', how='left').fillna(0)\n\nsub.to_csv('submission.csv', index=False)","d63a857b":"## train with all data","5bff6c9d":"## model definition (perhaps need fine tunning)","a2f04743":"## Some other help functions","56eda85f":"## tune the hyperparameter using optuna","fdeeb5fb":"## define the running function with optuna tunning[](http:\/\/)","035a28f9":"## define the running function"}}