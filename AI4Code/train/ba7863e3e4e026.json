{"cell_type":{"5f16b4ce":"code","0b75e520":"code","39546eb1":"code","68e13fef":"code","88ddff2d":"code","aa95db20":"code","58dc7b53":"code","e3c15779":"code","e9f67160":"code","d02b2d74":"code","1b23d7a8":"code","82207d8f":"code","61d79aa5":"markdown","46a71dca":"markdown","c8543c6f":"markdown","c8f167a8":"markdown","29893629":"markdown","12396038":"markdown","b855b87e":"markdown","79373ff6":"markdown","055a5fc4":"markdown","60c88a3a":"markdown"},"source":{"5f16b4ce":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('..\/input\/BR_eleitorado_2016_municipio.csv', delimiter=',')\ndf.head(1)","0b75e520":"resposta = [[\"uf\",\"Qualitativa Nominal\"],\n            [\"nome_municipio\",\"Qualitativa Nominal\"],\n            [\"gen_feminino\",\"Quantitativa Discreta\"],\n            [\"gen_masculino\",\"Quantitativa Discreta\"],\n            [\"f_16\",\"Quantitativa Discreta\"],\n            [\"f_17\",\"Quantitativa Discreta\"],\n            [\"f_18_20\",\"Quantitativa Discreta\"],\n            [\"f_21_24\",\"Quantitativa Discreta\"],\n            [\"f_25_34\",\"Quantitativa Discreta\"],\n            [\"f_35_44\",\"Quantitativa Discreta\"],\n            [\"f_45_59\",\"Quantitativa Discreta\"],\n            [\"f_60_69\",\"Quantitativa Discreta\"],\n            [\"f_70_79\",\"Quantitativa Discreta\"],\n            [\"f_sup_79\",\"Quantitativa Discreta\"]]\nresposta = pd.DataFrame(resposta, columns=[\"Variavel\", \"Classifica\u00e7\u00e3o\"])\nresposta","39546eb1":"df.dtypes","68e13fef":"df_uf = df[\"uf\"].value_counts()\ndf_uf","88ddff2d":"df_nome_municipio = df[\"nome_municipio\"].value_counts()\ndf_nome_municipio","aa95db20":"#Dataframe por regi\u00e3o\ndf_norte = df[(df['uf'] == 'AM') | \n                (df['uf'] == 'RR') | \n                (df['uf'] == 'AP') | \n                (df['uf'] == 'PA') | \n                (df['uf'] == 'TO') |\n                (df['uf'] == 'RO') | \n                (df['uf'] == 'AC')]\n\ndf_nordeste = df[(df['uf'] == 'MA') | \n                (df['uf'] == 'PI') | \n                (df['uf'] == 'CE') | \n                (df['uf'] == 'RN') | \n                (df['uf'] == 'PE') |\n                (df['uf'] == 'PB') | \n                (df['uf'] == 'SE') |\n                (df['uf'] == 'AL') |\n                (df['uf'] == 'BA') ]\n\ndf_centro_oeste = df[(df['uf'] == 'MT') | \n                (df['uf'] == 'MS') | \n                (df['uf'] == 'GO') |\n                (df['uf'] == 'DF')]\n\ndf_sudeste = df[(df['uf'] == 'SP') | \n                (df['uf'] == 'RJ') | \n                (df['uf'] == 'ES') | \n                (df['uf'] == 'MG')]\n\ndf_sul = df[(df['uf'] == 'PR') | \n                (df['uf'] == 'RS') | \n                (df['uf'] == 'SC')]\n\n#Total de eleitores\ntotal_eleitores_geral = df.groupby(['uf'])['total_eleitores'].apply(lambda x : x.astype(int).sum()).sum()\n\n#por genero total eleitores\ntot_feminino = df.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino = df.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_eleitores = pd.DataFrame({'porcentagem': [round(tot_feminino \/ total_eleitores_geral * 100,2),\n                                           round(tot_masculino \/ total_eleitores_geral * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])\n\n#por genero por regi\u00e3o Norte\ntot_norte = df_norte['total_eleitores'].sum()\ntot_feminino_norte = df_norte.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino_norte = df_norte.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_norte = pd.DataFrame({'porcentagem': [round(tot_feminino_norte \/ tot_norte * 100,2),\n                                           round(tot_masculino_norte \/ tot_norte * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])\n\n#por genero por regi\u00e3o Nordeste\ntot_nordeste = df_nordeste['total_eleitores'].sum()\ntot_feminino_nordeste = df_nordeste.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino_nordeste = df_nordeste.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_nordeste = pd.DataFrame({'porcentagem': [round(tot_feminino_nordeste \/ tot_nordeste * 100,2),\n                                           round(tot_masculino_nordeste \/ tot_nordeste * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])\n\n#por genero por regi\u00e3o centro-oeste\ntot_centro_oeste = df_nordeste['total_eleitores'].sum()\ntot_feminino_centro_oeste = df_centro_oeste.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino_centro_oeste = df_centro_oeste.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_centro_oeste = pd.DataFrame({'porcentagem': [round(tot_feminino_centro_oeste \/ tot_centro_oeste * 100,2),\n                                           round(tot_masculino_centro_oeste \/ tot_centro_oeste * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])\n\n#por genero por regi\u00e3o sudeste\ntot_sudeste = df_nordeste['total_eleitores'].sum()\ntot_feminino_sudeste = df_sudeste.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino_sudeste = df_sudeste.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_sudeste = pd.DataFrame({'porcentagem': [round(tot_feminino_sudeste \/ tot_sudeste * 100,2),\n                                           round(tot_masculino_sudeste \/ tot_sudeste * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])\n\n#por genero por regi\u00e3o sul\ntot_sul = df_nordeste['total_eleitores'].sum()\ntot_feminino_sul = df_sul.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).sum()\ntot_masculino_sul = df_sul.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).sum()\ndf_genero_sul = pd.DataFrame({'porcentagem': [round(tot_feminino_sul \/ tot_sul * 100,2),\n                                           round(tot_masculino_sul \/ tot_sul * 100,2)]},\n                          index=['gen_feminino', 'gen_masculino'])","58dc7b53":"# Cria\u00e7\u00e3o da figure com uma linha e duas colunas. Figsize define o tamanho da\n# figure\nfig, eixos = plt.subplots(nrows=2, ncols=3, figsize=(18,9))\n\n# Cria o gr\u00e1fico de pizza na primeira posi\u00e7\u00e3o com as configura\u00e7\u00f5es definidas\npie_1 = eixos[0][0].pie(df_genero_eleitores, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\npie_2 = eixos[0][1].pie(df_genero_norte, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\npie_3 = eixos[0][2].pie(df_genero_nordeste, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\npie_4 = eixos[1][0].pie(df_genero_centro_oeste, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\npie_5 = eixos[1][1].pie(df_genero_sudeste, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\npie_6 = eixos[1][2].pie(df_genero_sul, labels=['Feminino','Masculino'],\n                    autopct='%1.1f%%', colors=['pink', 'lightskyblue'])\n\n# Define o t\u00edtulo deste gr\u00e1fico\neixos[0][0].set_title('Percentual por Genero no Brasil')\neixos[0][1].set_title('Percentual por Genero na Regi\u00e3o Norte')\neixos[0][2].set_title('Percentual por Genero na Regi\u00e3o Nordeste')\neixos[1][0].set_title('Percentual por Genero na Regi\u00e3o Centro-Oeste')\neixos[1][1].set_title('Percentual por Genero na Regi\u00e3o Sudeste')\neixos[1][2].set_title('Percentual por Genero na Regi\u00e3o Sul')\n\n# Deixa os dois eixos iguais, fazendo com que o gr\u00e1fico mantenha-se redondo\neixos[0][0].axis('equal')\neixos[0][1].axis('equal')\neixos[0][2].axis('equal')\neixos[1][0].axis('equal')\neixos[1][1].axis('equal')\neixos[1][2].axis('equal')\n\n\nplt.axis('equal')\n\n# Ajusta o espa\u00e7o entre os dois gr\u00e1ficos\nplt.subplots_adjust(wspace=1)\nplt.show()","e3c15779":"#Tabela Frequencia de eleitores por estado\ndf_total_eleitores_estado = df.groupby(['uf'])['total_eleitores'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_eleitores')\n\n#V\u00e1riavel do Total de Eleitores\ntotal_eleitores_geral = df_total_eleitores_estado['total_eleitores'].sum()\n\n#Tabela de frequencia por genero feminino por estado\ndf_gen_feminino = df.groupby(['uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_feminino')\ndf_gen_masculino = df.groupby(['uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_masculino')\ndf_gen_feminino['%_feminino'] = round(df_gen_feminino['total_feminino'] \/ df_total_eleitores_estado['total_eleitores'] * 100,2)\ndf_gen_masculino['%_masculino'] = round(df_gen_masculino['total_masculino'] \/ df_total_eleitores_estado['total_eleitores'] * 100,2)\n\n#Largura da barra no gr\u00e1fico\nwidth = 0.50\n\n#Count dos grupos\nN = df_gen_masculino['uf'].count()\n\n#Indices\nind = np.arange(N)\n\n#Valores\ncolx = df_gen_feminino.sort_values('%_feminino', ascending=False)['uf']\nval1 = df_gen_feminino.sort_values('%_feminino', ascending=False)['%_feminino']\nval2 = df_gen_masculino.sort_values('%_masculino', ascending=True)['%_masculino']\n\n\n#estilo\nplt.style.use('ggplot')\n\n#padronizando o tamanho dos gr\u00e1ficos\nplt.rcParams['figure.figsize'] = (16,7)\n\np1 = plt.bar(ind, val1, width, color='purple')\np2 = plt.bar(ind, val2, width, color='lightskyblue')\n\nplt.xlabel('Estados (UF)')\nplt.ylabel('% porcentagem')\nplt.title('Percentual de eleitores por generos nos Estado (UF)')\nplt.xticks(ind, colx)\nplt.yticks(np.arange(0, 61, 10))\nplt.legend((p1[0], p2[0]), ('Feminino','Masculino'))\n\nplt.show()\n\ndf_gen_feminino.sort_values('%_feminino', ascending=False)","e9f67160":"#Tabela Frequencia de eleitores por estado\ndf_total_eleitores_municipio = df.groupby(['cod_municipio_tse','nome_municipio','uf'])['total_eleitores'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_eleitores')\n\n#Total de eleitores feminino nos Municipios\ndf_gen_feminino = df.groupby(['cod_municipio_tse','nome_municipio','uf'])['gen_feminino'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_feminino')\n\n#Adiciona na dataframe a porcentagem de eleitores feminino\ndf_gen_feminino['%_feminino'] = round(df_gen_feminino['total_feminino'] \/ df_total_eleitores_municipio['total_eleitores'] * 100,2)\n\n#Adiciona na dataframe a media de eleitores feminino por Municipios\ndf_gen_feminino['%_media'] = round(df_gen_feminino['%_feminino'].mean(),2)\n\n#Ordena\u00e7\u00e3o por valores\nsort_gen_feminino = df_gen_feminino.sort_values(by='%_feminino', ascending=False)\n\n#top 20\ntop20 = sort_gen_feminino.head(20).sort_values(by='%_feminino', ascending=True)\n\n#Largura da barra no gr\u00e1fico\nwidth = 0.50\n\n#Count dos grupos\nN = top20['uf'].count()\n\n#Indices\nind = np.arange(N)\n\n#Valores\ncolx = top20['nome_municipio'] + ' - ' + top20['uf']\nval1 = top20['%_feminino']\nval2 = top20['%_media']\n\np1 = plt.barh(ind, val1, width, color='purple')\np2 = plt.barh(ind, val2, width, color='silver')\n\nplt.xlabel('% porcentagem')\nplt.ylabel('Munic\u00edpios')\nplt.title('Top 20 dos munic\u00edpios que tiveram o maior porcentual de eleitores femininos')\nplt.yticks(ind, colx)\nplt.xticks(np.arange(0, 71, 10))\nplt.legend((p1[0], p2[0]), ('Resultado','M\u00e9dia'))\n\n#estilo\nplt.style.use('ggplot')\n\n#padronizando o tamanho dos gr\u00e1ficos\nplt.rcParams['figure.figsize'] = (16,7)\n\nplt.show()\n\ntop20","d02b2d74":"#Tabela Frequencia de eleitores por estado\ndf_total_eleitores_municipio = df.groupby(['cod_municipio_tse','nome_municipio','uf'])['total_eleitores'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_eleitores')\n\n#Total de eleitores feminino nos Municipios\ndf_gen_masculino = df.groupby(['cod_municipio_tse','nome_municipio','uf'])['gen_masculino'].apply(lambda x : x.astype(int).sum()).reset_index(name='total_masculino')\n\n#Adiciona na dataframe a porcentagem de eleitores feminino\ndf_gen_masculino['%_masculino'] = round(df_gen_masculino['total_masculino'] \/ df_total_eleitores_municipio['total_eleitores'] * 100,2)\n\n#Adiciona na dataframe a media de eleitores feminino por Municipios\ndf_gen_masculino['%_media'] = round(df_gen_masculino['%_masculino'].mean(),2)\n\n#Ordena\u00e7\u00e3o por valores\nsort_gen_masculino = df_gen_masculino.sort_values(by='%_masculino', ascending=False)\n\n#top 20\ntop20 = sort_gen_masculino.head(20).sort_values(by='%_masculino', ascending=True)\n\n#Largura da barra no gr\u00e1fico\nwidth = 0.50\n\n#Count dos grupos\nN = top20['uf'].count()\n\n#Indices\nind = np.arange(N)\n\n#Valores\ncolx = top20['nome_municipio'] + ' - ' + top20['uf']\nval1 = top20['%_masculino']\nval2 = top20['%_media']\n\np1 = plt.barh(ind, val1, width, color='blue')\np2 = plt.barh(ind, val2, width, color='silver')\n\nplt.xlabel('% porcentagem')\nplt.ylabel('Munic\u00edpios')\nplt.title('Top 20 dos munic\u00edpios que tiveram o maior porcentual de eleitores masculino')\nplt.yticks(ind, colx)\nplt.xticks(np.arange(0, 71, 10))\nplt.legend((p1[0], p2[0]), ('Resultado','M\u00e9dia'))\n\n#estilo\nplt.style.use('ggplot')\n\n#padronizando o tamanho dos gr\u00e1ficos\nplt.rcParams['figure.figsize'] = (16,7)\n\nplt.show()\n\ntop20","1b23d7a8":"def heatmap(data, row_labels, col_labels, ax=None,\n            cbar_kw={}, cbarlabel=\"\", **kwargs):\n    \"\"\"\n    Create a heatmap from a numpy array and two lists of labels.\n\n    Arguments:\n        data       : A 2D numpy array of shape (N,M)\n        row_labels : A list or array of length N with the labels\n                     for the rows\n        col_labels : A list or array of length M with the labels\n                     for the columns\n    Optional arguments:\n        ax         : A matplotlib.axes.Axes instance to which the heatmap\n                     is plotted. If not provided, use current axes or\n                     create a new one.\n        cbar_kw    : A dictionary with arguments to\n                     :meth:`matplotlib.Figure.colorbar`.\n        cbarlabel  : The label for the colorbar\n    All other arguments are directly passed on to the imshow call.\n    \"\"\"\n\n    if not ax:\n        ax = plt.gca()\n\n    # Plot the heatmap\n    im = ax.imshow(data, **kwargs)\n\n    # Create colorbar\n    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)\n    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va=\"bottom\")\n\n    # We want to show all ticks...\n    ax.set_xticks(np.arange(data.shape[1]))\n    ax.set_yticks(np.arange(data.shape[0]))\n    # ... and label them with the respective list entries.\n    ax.set_xticklabels(col_labels)\n    ax.set_yticklabels(row_labels)\n\n    # Let the horizontal axes labeling appear on top.\n    ax.tick_params(top=True, bottom=False,\n                   labeltop=True, labelbottom=False)\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=-30, ha=\"right\",\n             rotation_mode=\"anchor\")\n\n    # Turn spines off and create white grid.\n    for edge, spine in ax.spines.items():\n        spine.set_visible(False)\n\n    ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)\n    ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)\n    ax.grid(which=\"minor\", color=\"w\", linestyle='-', linewidth=3)\n    ax.tick_params(which=\"minor\", bottom=False, left=False)\n\n    return im, cbar","82207d8f":"fig, ax = plt.subplots()\n\ndf_sum = df.groupby(['uf']).sum()\n\nidade = [\"16\", \"17\", \"18 - 20\",\"21 - 24\", \"25 - 34\", \"35 - 44\", \"45 - 59\", \"60 - 69\", \"70 - 79\", \"+79\"]\n\nestados = df_sum.index\n\neleitores = np.array([df_sum['f_16'],\n                     df_sum['f_17'],\n                     df_sum['f_18_20'],\n                     df_sum['f_21_24'],\n                     df_sum['f_25_34'],\n                     df_sum['f_35_44'],\n                     df_sum['f_45_59'],\n                     df_sum['f_60_69'],\n                     df_sum['f_70_79'],\n                     df_sum['f_sup_79']])\n\nim, cbar = heatmap(eleitores, idade, estados, ax=ax,\n                   cmap=\"Reds\", cbarlabel=\"Eleitores [Idade]\")\n\nfig.tight_layout()\nplt.show()","61d79aa5":"## Quest\u00e3o 1\n**Enunciado:**  Este notebook est\u00e1 associado ao *Kaggle Dataset* chamado \"Aula1 | Exerc\u00edcio1\". Este *Kaggle Dataset* possui dois arquivos em formato CSV (anv.csv e BR_eleitorado_2016_municipio ). Escolha um dos datasets dispon\u00edveis e j\u00e1 conhecidos, a seu crit\u00e9rio. Uma vez definido o csv, escolha no m\u00ednimo 7 e no m\u00e1ximo 12 vari\u00e1veis (colunas) que voc\u00ea avalia como sendo relevantes. Para cada uma das suas vari\u00e1veis escolhidas, forne\u00e7a:\n\n\n### Quest\u00e3o 1 - Item A - Classifica\u00e7\u00e3o das vari\u00e1veis\n\nClassifique todas as vari\u00e1veis escolhidas, e construa um dataframe com sua resposta.\nExemplo:","46a71dca":"# Especializa\u00e7\u00e3o em Ci\u00eancia de Dados - Turma 2018.1 - Facens\n## Aula1 | Exerc\u00edcio 1 (valendo nota)\n\n* **Data de entrega:** 06\/nov\/2018 07:59\n* **Professor:**  Matheus Mota\n* **Aluno:**  Alex Cozer Abrantes\n* **RA:**  183150","c8543c6f":"Analisando o gr\u00e1fico dos 20 munic\u00edpios que com maior eleitores femininos pude observar que a grande maioria \u00e9 da regi\u00e3o Nordeste, apenas algumas cidades da regi\u00e3o Sudeste.","c8f167a8":"Os estados do Rio de Janeiro (53,49%), Pernambuco (53,42%) e Alagoas (53,23%) s\u00e3o os que mais tem eleitores do sexo feminino","29893629":"Nota-se que as regi\u00f5es Nordeste e o Sudeste tem o maior \u00edndice de eleitores do sexo femininos ambos com o percentual iguais, enquanto a regi\u00e3o Norte \u00e9 a maior entre o sexo masculino.\nSobre o total de eleitores, h\u00e1 mais eleitores feminino do que masculino, cerca de 52,21 % s\u00e3o do sexo feminino.\nExiste uma diferen\u00e7a de 2,21% que representa 6.458.422 eleitores do sexo femininos a mais do que o masculino.\n","12396038":"### Quest\u00e3o 1 - Item B - Tabela de frequ\u00eancia\n\nConstrua uma tabela de frequ\u00eancia para cada uma das **vari\u00e1veis qualitativas** que voc\u00ea escolheu (caso n\u00e3o tenha escolhido nenhuma, deixe esta quest\u00e3o em branco). Uma dica: a fun\u00e7\u00e3o *value_counts()* do Pandas pode ser muito \u00fatil. =)\n","b855b87e":"### Quest\u00e3o 1 - Item C - Representa\u00e7\u00e3o Gr\u00e1fica\nPara cada uma das vari\u00e1veis, produza um ou mais gr\u00e1ficos, usando matplotlib, que descreva seu comportamento \/ caracteristica. Lembre-se que estes gr\u00e1ficos precisam ser compat\u00edveis com a classifica\u00e7\u00e3o da vari\u00e1vel. ","79373ff6":"# Dicas\n\n- Exemplo de acesso aos CSVs dispon\u00edveis no dataset\n> df = pd.read_csv('..\/input\/anv.csv', delimiter=',')","055a5fc4":"Analisando os dados dos eleitores por idade no gr\u00e1fico de mapa de calor, podemos observar uma predomin\u00e2ncia entre as idades 25 \u00e0 59 anos com mais enfase para o estado de S\u00e3o Paulo, onde se concentra a maior parte desses eleitores.","60c88a3a":"Analisando o gr\u00e1fico dos 20 munic\u00edpios que com maior eleitores masculino, diferentemente da analise gr\u00e1fica dos eleitores feminino, a grande maioria \u00e9 da regi\u00e3o Centro-Oeste seguido por algumas cidades da regi\u00e3o Sudeste."}}