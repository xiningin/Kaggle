{"cell_type":{"111a6d79":"code","52d3652c":"code","a90225e0":"code","df5af738":"code","1f0ab866":"code","b6e113a7":"code","2bd038bb":"code","504851e1":"code","1f55d966":"code","91471ba3":"code","20f8acab":"code","b8298547":"code","25b5cdfe":"code","a0d8f913":"code","29e09a8d":"code","4a02fbd1":"code","a6239512":"code","8352511c":"code","9615d037":"code","9bec5c50":"code","e8de023b":"code","fe4cf092":"code","05375fe4":"code","6f5ec4d9":"code","44ab0c79":"code","e537b59a":"code","5e91661a":"code","ddff7e77":"code","5c357502":"code","6c822784":"code","046905f2":"code","0503113e":"code","9710e32e":"code","aadb0b01":"markdown","a9f54a47":"markdown","e868f248":"markdown","de4ae783":"markdown","a7dbd469":"markdown","c7b362c8":"markdown","c3e4bdf3":"markdown","7ba51afd":"markdown","e27ce7fe":"markdown","eb53951b":"markdown","f9a0f7d1":"markdown","f915bd2b":"markdown","9b7a4d00":"markdown","373041fe":"markdown","8395dff2":"markdown","4185afac":"markdown","02917507":"markdown","b3e308fd":"markdown","c2b4a0f8":"markdown","044213b7":"markdown","95c4078e":"markdown","e30d3ab0":"markdown","f4cbda37":"markdown","399a68af":"markdown","940d2872":"markdown","fe733119":"markdown","d1b334ed":"markdown","f9d97033":"markdown","23d0af5c":"markdown","85933f9d":"markdown","8a52e2f6":"markdown","cbc0be87":"markdown","7c320c5f":"markdown"},"source":{"111a6d79":"%matplotlib inline\nimport pandas as pd#\u6570\u636e\u5206\u6790\nimport numpy as np#\u79d1\u5b66\u8ba1\u7b97\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\nPassengerId=test['PassengerId']\nall_data = pd.concat([train, test], ignore_index = True)","52d3652c":"train.head()","a90225e0":"train.info()","df5af738":"train.describe()","1f0ab866":"train['Survived'].value_counts()","b6e113a7":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n","2bd038bb":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n","504851e1":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train)","1f55d966":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=2)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlabel('Age') \nplt.ylabel('density') ","91471ba3":"sns.countplot('Embarked',hue='Survived',data=train)\n","20f8acab":"all_data['Title'] = all_data['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\nTitle_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))\n\nall_data['Title'] = all_data['Title'].map(Title_Dict)\nsns.barplot(x=\"Title\", y=\"Survived\", data=all_data)","b8298547":"all_data['FamilySize']=all_data['SibSp']+all_data['Parch']+1\nsns.barplot(x=\"FamilySize\", y=\"Survived\", data=all_data)\n\n","25b5cdfe":"def Fam_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0\nall_data['FamilyLabel']=all_data['FamilySize'].apply(Fam_label)\nsns.barplot(x=\"FamilyLabel\", y=\"Survived\", data=all_data)\n","a0d8f913":"all_data['Cabin'] = all_data['Cabin'].fillna('Unknown')\nall_data['Deck']=all_data['Cabin'].str.get(0)\nsns.barplot(x=\"Deck\", y=\"Survived\", data=all_data)","29e09a8d":"Ticket_Count = dict(all_data['Ticket'].value_counts())\nall_data['TicketGroup'] = all_data['Ticket'].apply(lambda x:Ticket_Count[x])\nsns.barplot(x='TicketGroup', y='Survived', data=all_data)","4a02fbd1":"def Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0\n\nall_data['TicketGroup'] = all_data['TicketGroup'].apply(Ticket_Label)\nsns.barplot(x='TicketGroup', y='Survived', data=all_data)","a6239512":"from sklearn.ensemble import RandomForestRegressor\nage_df = all_data[['Age', 'Pclass','Sex','Title']]\nage_df=pd.get_dummies(age_df)\nknown_age = age_df[age_df.Age.notnull()].values\nunknown_age = age_df[age_df.Age.isnull()].values\ny = known_age[:, 0]\nX = known_age[:, 1:]\nrfr = RandomForestRegressor(random_state=0, n_estimators=100, n_jobs=-1)\nrfr.fit(X, y)\npredictedAges = rfr.predict(unknown_age[:, 1::])\nall_data.loc[ (all_data.Age.isnull()), 'Age' ] = predictedAges ","8352511c":"all_data[all_data['Embarked'].isnull()]","9615d037":"all_data.groupby(by=[\"Pclass\",\"Embarked\"]).Fare.median()","9bec5c50":"all_data['Embarked'] = all_data['Embarked'].fillna('C')\n","e8de023b":"all_data[all_data['Fare'].isnull()]\n","fe4cf092":"fare=all_data[(all_data['Embarked'] == \"S\") & (all_data['Pclass'] == 3)].Fare.median()\nall_data['Fare']=all_data['Fare'].fillna(fare)\n","05375fe4":"all_data['Surname']=all_data['Name'].apply(lambda x:x.split(',')[0].strip())\nSurname_Count = dict(all_data['Surname'].value_counts())\nall_data['FamilyGroup'] = all_data['Surname'].apply(lambda x:Surname_Count[x])\nFemale_Child_Group=all_data.loc[(all_data['FamilyGroup']>=2) & ((all_data['Age']<=12) | (all_data['Sex']=='female'))]\nMale_Adult_Group=all_data.loc[(all_data['FamilyGroup']>=2) & (all_data['Age']>12) & (all_data['Sex']=='male')]\n","6f5ec4d9":"Female_Child=pd.DataFrame(Female_Child_Group.groupby('Surname')['Survived'].mean().value_counts())\nFemale_Child.columns=['GroupCount']\nFemale_Child\n","44ab0c79":"sns.barplot(x=Female_Child.index, y=Female_Child[\"GroupCount\"]).set_xlabel('AverageSurvived')\n","e537b59a":"Male_Adult=pd.DataFrame(Male_Adult_Group.groupby('Surname')['Survived'].mean().value_counts())\nMale_Adult.columns=['GroupCount']\nMale_Adult","5e91661a":"Female_Child_Group=Female_Child_Group.groupby('Surname')['Survived'].mean()\nDead_List=set(Female_Child_Group[Female_Child_Group.apply(lambda x:x==0)].index)\nprint(Dead_List)\nMale_Adult_List=Male_Adult_Group.groupby('Surname')['Survived'].mean()\nSurvived_List=set(Male_Adult_List[Male_Adult_List.apply(lambda x:x==1)].index)\nprint(Survived_List)","ddff7e77":"train=all_data.loc[all_data['Survived'].notnull()]\ntest=all_data.loc[all_data['Survived'].isnull()]\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Sex'] = 'male'\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Age'] = 60\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Title'] = 'Mr'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Sex'] = 'female'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Age'] = 5\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Title'] = 'Miss'\n","5c357502":"all_data=pd.concat([train, test])\nall_data=all_data[['Survived','Pclass','Sex','Age','Fare','Embarked','Title','FamilyLabel','Deck','TicketGroup']]\nall_data=pd.get_dummies(all_data)\ntrain=all_data[all_data['Survived'].notnull()]\ntest=all_data[all_data['Survived'].isnull()].drop('Survived',axis=1)\nX = train.values[:,1:]\ny = train.values[:,0]","6c822784":"from sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectKBest\n\npipe=Pipeline([('select',SelectKBest(k=20)), \n               ('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])\n\nparam_test = {'classify__n_estimators':list(range(20,50,2)), \n              'classify__max_depth':list(range(3,60,3))}\ngsearch = GridSearchCV(estimator = pipe, param_grid = param_test, scoring='roc_auc', cv=10)\ngsearch.fit(X,y)\nprint(gsearch.best_params_, gsearch.best_score_)\n","046905f2":"from sklearn.pipeline import make_pipeline\nselect = SelectKBest(k = 20)\nclf = RandomForestClassifier(random_state = 10, warm_start = True, \n                                  n_estimators = 26,\n                                  max_depth = 6, \n                                  max_features = 'sqrt')\npipeline = make_pipeline(select, clf)\npipeline.fit(X, y)","0503113e":"from sklearn.model_selection import cross_val_score\nfrom sklearn import  metrics\ncv_score = cross_val_score(pipeline, X, y, cv= 10)\nprint(\"CV Score : Mean - %.7g | Std - %.7g \" % (np.mean(cv_score), np.std(cv_score)))\n","9710e32e":"predictions = pipeline.predict(test)\nsubmission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(r\"submission1.csv\", index=False)\n","aadb0b01":"2\uff09\u540c\u7ec4\u8bc6\u522b\uff1a\u628a\u59d3\u6c0f\u76f8\u540c\u7684\u4e58\u5ba2\u5212\u5206\u4e3a\u540c\u4e00\u7ec4\uff0c\u4ece\u4eba\u6570\u5927\u4e8e\u4e00\u7684\u7ec4\u4e2d\u5206\u522b\u63d0\u53d6\u51fa\u6bcf\u7ec4\u7684\u5987\u5973\u513f\u7ae5\u548c\u6210\u5e74\u7537\u6027\u3002","a9f54a47":"\u53ef\u4ee5\u770b\u5230891\u540d\u4e58\u5ba2\u4e2d\u53ea\u6709342\u540d\u4e58\u5ba2survived","e868f248":"\u9996\u5148\u5bfc\u5165\u6570\u636e\u5305\u4e0e\u6570\u636e\u96c6\uff0c\u67e5\u770b\u603b\u4f53\u67e5\u770b\u6570\u636etrain\u5982\u4e0b","de4ae783":"Embarked Feature\uff1aEmbarked\u7f3a\u5931\u91cf\u4e3a2\uff0c\u7f3a\u5931Embarked\u4fe1\u606f\u7684\u4e58\u5ba2\u7684Pclass\u5747\u4e3a1\uff0c\u4e14Fare\u5747\u4e3a80\uff0c\u56e0\u4e3aEmbarked\u4e3aC\u4e14Pclass\u4e3a1\u7684\u4e58\u5ba2\u7684Fare\u4e2d\u4f4d\u6570\u4e3a80\uff0c\u6240\u4ee5\u7f3a\u5931\u503c\u586b\u5145\u4e3aC\u3002","a7dbd469":"\u6211\u4eec\u770b\u5230\uff0c\u603b\u5171\u670912\u5217\uff0c\u5176\u4e2dSurvived\u5b57\u6bb5\u8868\u793a\u7684\u662f\u8be5\u4e58\u5ba2\u662f\u5426\u83b7\u6551\uff0c\u5176\u4f59\u90fd\u662f\u4e58\u5ba2\u7684\u4e2a\u4eba\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\nPassengerID\uff08ID\uff09\nSurvived(\u5b58\u6d3b\u4e0e\u5426)\nPclass\uff08\u5ba2\u8231\u7b49\u7ea7\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\nName\uff08\u59d3\u540d\uff0c\u53ef\u63d0\u53d6\u51fa\u66f4\u591a\u4fe1\u606f\uff09\nSex\uff08\u6027\u522b\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\nAge\uff08\u5e74\u9f84\uff0c\u8f83\u4e3a\u91cd\u8981\uff09\nParch\uff08\u76f4\u7cfb\u4eb2\u53cb\uff09\nSibSp\uff08\u65c1\u7cfb\uff09\nTicket\uff08\u7968\u7f16\u53f7\uff09\nFare\uff08\u7968\u4ef7\uff09\nCabin\uff08\u5ba2\u8231\u7f16\u53f7\uff09\nEmbarked\uff08\u4e0a\u8239\u7684\u6e2f\u53e3\u7f16\u53f7\uff09","c7b362c8":"\u6309\u751f\u5b58\u7387\u628aFamilySize\u5206\u4e3a\u4e09\u7c7b\uff0c\u6784\u6210FamilyLabel\u7279\u5f81\u3002","c3e4bdf3":"\u4ece\u4e0d\u540c\u751f\u8fd8\u60c5\u51b5\u7684\u5bc6\u5ea6\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5e74\u9f8415\u5c81\u7684\u5de6\u4fa7\uff0c\u751f\u8fd8\u7387\u6709\u660e\u663e\u5dee\u522b\uff0c\u5bc6\u5ea6\u56fe\u975e\u4ea4\u53c9\u533a\u57df\u9762\u79ef\u975e\u5e38\u5927\uff0c\u4f46\u5728\u5176\u4ed6\u5e74\u9f84\u6bb5\uff0c\u5219\u5dee\u522b\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u8ba4\u4e3a\u662f\u968f\u673a\u6240\u81f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5c06\u6b64\u5e74\u9f84\u504f\u5c0f\u7684\u533a\u57df\u5206\u79bb\u51fa\u6765\u3002","7ba51afd":"Pclass\u5f71\u54cd\uff1a\u793e\u4f1a\u7b49\u7ea7\u8d8a\u9ad8\uff0c\u5b58\u6d3b\u7387\u8d8a\u9ad8\u3002","e27ce7fe":"\u4ee5\u4e0a\u7684\u7b80\u5355\u5206\u6790\u53ef\u4ee5\u770b\u5230\uff1a\n\u83b7\u6551\u7684\u4eba\u4e0d\u5230\u534a\u6570\n\u4e0d\u540c\u8231\u4f4d\/\u4e58\u5ba2\u7b49\u7ea7\u83b7\u6551\u6982\u7387\u4e0d\u540c\n\u5e74\u9f84\u5bf9\u83b7\u6551\u6982\u7387\u4e5f\u6709\u5f71\u54cd","eb53951b":"\u56e0\u4e3a\u666e\u904d\u89c4\u5f8b\u662f\u5973\u6027\u548c\u513f\u7ae5\u5e78\u5b58\u7387\u9ad8\uff0c\u6210\u5e74\u7537\u6027\u5e78\u5b58\u8f83\u4f4e\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4e0d\u7b26\u5408\u666e\u904d\u89c4\u5f8b\u7684\u53cd\u5e38\u7ec4\u9009\u51fa\u6765\u5355\u72ec\u5904\u7406\u3002\u628a\u5973\u6027\u548c\u513f\u7ae5\u7ec4\u4e2d\u5e78\u5b58\u7387\u4e3a0\u7684\u7ec4\u8bbe\u7f6e\u4e3a\u9047\u96be\u7ec4\uff0c\u628a\u6210\u5e74\u7537\u6027\u7ec4\u4e2d\u5b58\u6d3b\u7387\u4e3a1\u7684\u8bbe\u7f6e\u4e3a\u5e78\u5b58\u7ec4\uff0c\u63a8\u6d4b\u5904\u4e8e\u9047\u96be\u7ec4\u7684\u5973\u6027\u548c\u513f\u7ae5\u5e78\u5b58\u7684\u53ef\u80fd\u6027\u8f83\u4f4e\uff0c\u5904\u4e8e\u5e78\u5b58\u7ec4\u7684\u6210\u5e74\u7537\u6027\u5e78\u5b58\u7684\u53ef\u80fd\u6027\u8f83\u9ad8\u3002","f9a0f7d1":"\u6309\u751f\u5b58\u7387\u628aTicketGroup\u5206\u4e3a\u4e09\u7c7b\u3002","f915bd2b":"* \u4f5c\u4e1a\u8bf4\u660e\uff1a\u672c\u6b21\u4f5c\u4e1a\u9009\u62e9\u9898\u76ee\u4e3atitanic\n* \u5c0f\u7ec4\u6210\u5458\uff1a\u9676\u4ed5\u6797 \u6797\u5cf0\u5370 \u90dd\u6668\u9633 \u6234\u5c21\u9e4f \n* \u672c\u90e8\u5206\u7531 \u90dd\u6668\u9633 \u5b8c\u6210\n* homework-titanic-ml\u7248\u672c\u5bf9\u7279\u5f81\u8fdb\u884c\u63d0\u5347\u63d0\u9ad8\u7ed3\u679c\u6b63\u786e\u7387\uff0c\u8fd9\u4efd\u4ee3\u7801\u53c2\u8003\u5176\u4ed6\u535a\u5ba2\uff0c\u901a\u8fc7\u6784\u5efa\u968f\u673a\u68ee\u6797\u6a21\u578b\uff0c\u5e76\u7ed3\u5408\u5c0f\u7ec4\u540c\u5b66\u7684\u6539\u8fdb\uff0c\u8fdb\u4e00\u6b65\u63d0\u9ad8\u4e86\u7ed3\u679c\u6b63\u786e\u7387\u3002\u6700\u7ec8\u5206\u6570\u4e3a0.83732\n","9b7a4d00":"\u901a\u8fc7\u67e5\u770b\u5177\u4f53\u6570\u636e\u6570\u503c\u60c5\u51b5\uff0c\u5f97\u5230\u6570\u503c\u578b\u6570\u636e\u7684\u4e00\u4e9b\u5206\u5e03\u3002\nmean\u5b57\u6bb5\u544a\u8bc9\u6211\u4eec\uff0c\u5927\u69820.383838\u7684\u4eba\u6700\u540e\u83b7\u6551\u4e86\uff0c2\/3\u7b49\u8231\u7684\u4eba\u6570\u6bd41\u7b49\u8231\u8981\u591a\uff0c\u5e73\u5747\u4e58\u5ba2\u5e74\u9f84\u5927\u6982\u662f29.7\u5c81\u7b49\u3002","373041fe":"Age Feature\uff1aAge\u7f3a\u5931\u91cf\u4e3a263\uff0c\u7f3a\u5931\u91cf\u8f83\u5927\uff0c\u7528Sex, Title, Pclass\u4e09\u4e2a\u7279\u5f81\u6784\u5efa\u968f\u673a\u68ee\u6797\u6a21\u578b\uff0c\u586b\u5145\u5e74\u9f84\u7f3a\u5931\u503c\u3002","8395dff2":"SibSp\uff1a\u914d\u5076\u53ca\u5144\u5f1f\u59d0\u59b9\u6570\u9002\u4e2d\u7684\u4e58\u5ba2\u5b58\u6d3b\u7387\u8d8a\u9ad8","4185afac":"1\uff09\u53c2\u6570\u4f18\u5316","02917507":"\u63a5\u4e0b\u6765\u4f9d\u6b21\u67e5\u770b\u4e58\u5ba2\u7684\u5404\u5c5e\u6027\u4e0e\u7ed3\u679c\u4e4b\u95f4\u7684\u5173\u7cfb","b3e308fd":"\u4e3a\u4e86\u4f7f\u5904\u4e8e\u8fd9\u4e24\u79cd\u53cd\u5e38\u7ec4\u4e2d\u7684\u6837\u672c\u80fd\u591f\u88ab\u6b63\u786e\u5206\u7c7b\uff0c\u5bf9\u6d4b\u8bd5\u96c6\u4e2d\u5904\u4e8e\u53cd\u5e38\u7ec4\u4e2d\u7684\u6837\u672c\u7684Age\uff0cTitle\uff0cSex\u8fdb\u884c\u60e9\u7f5a\u4fee\u6539\u3002","c2b4a0f8":"Embarked\u767b\u6e2f\u6e2f\u53e3\u5f71\u54cd\uff1aC\u5730\u7684\u751f\u5b58\u7387\u66f4\u9ad8,\u8fd9\u4e2a\u4e5f\u5e94\u8be5\u4fdd\u7559\u4e3a\u6a21\u578b\u7279\u5f81.","044213b7":"sex\u5f71\u54cd\uff1a\u5973\u6027\u5b58\u6d3b\u7387\u8fdc\u9ad8\u4e8e\u7537\u6027","95c4078e":"FamilyLabel Feature(New)\uff1a\u5bb6\u5ead\u4eba\u6570\u4e3a2\u52304\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u8f83\u9ad8\n\u65b0\u589eFamilyLabel\u7279\u5f81\uff0c\u5148\u8ba1\u7b97FamilySize=Parch+SibSp+1\uff0c\u7136\u540e\u628aFamilySize\u5206\u4e3a\u4e09\u7c7b\u3002","e30d3ab0":"\u63a5\u4e0b\u6765\u5229\u7528\u7edf\u8ba1\u5b66\u6570\u636e\u4e0e\u7ed8\u56fe\u6765\u8fdb\u884c\u6570\u636e\u7684\u521d\u6b65\u5206\u6790\u3002","f4cbda37":"TicketGroup Feature(New)\uff1a\u4e0e2\u81f34\u4eba\u5171\u7968\u53f7\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u8f83\u9ad8\n\u65b0\u589eTicketGroup\u7279\u5f81\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u4e58\u5ba2\u7684\u5171\u7968\u53f7\u6570\u3002","399a68af":"\u901a\u8fc7\u4e0a\u9762\u6570\u636e\u5206\u6790\u53d1\u73b0\u6709\u4e9b\u5217\u7684\u7279\u5f81\u662f\u6709\u7a7a\u503c\u7684\uff0c\u6bd4\u5982Cabin\u53ea\u6709204\u540d\u4e58\u5ba2\u7684\u662f\u5df2\u77e5\u7684\u3002\n","940d2872":"2\uff09\u8bad\u7ec3\u6a21\u578b","fe733119":"3)\u7279\u5f81\u8f6c\u6362\uff1a\u9009\u53d6\u7279\u5f81\uff0c\u8f6c\u6362\u4e3a\u6570\u503c\u53d8\u91cf\uff0c\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002","d1b334ed":"\u9884\u6d4b\uff1a","f9d97033":"\u7edd\u5927\u90e8\u5206\u6210\u5e74\u7537\u6027\u7ec4\u7684\u5e73\u5747\u5b58\u6d3b\u7387\u4e5f\u4e3a1\u62160\u3002","23d0af5c":"Title Feature(New)\uff1a\u4e0d\u540c\u79f0\u547c\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u4e0d\u540c\n\u65b0\u589eTitle\u7279\u5f81\uff0c\u4ece\u59d3\u540d\u4e2d\u63d0\u53d6\u4e58\u5ba2\u7684\u79f0\u547c\uff0c\u5f52\u7eb3\u4e3a\u516d\u7c7b","85933f9d":"Fare Feature\uff1aFare\u7f3a\u5931\u91cf\u4e3a1\uff0c\u7f3a\u5931Fare\u4fe1\u606f\u7684\u4e58\u5ba2\u7684Embarked\u4e3aS\uff0cPclass\u4e3a3\uff0c\u6240\u4ee5\u7528Embarked\u4e3aS\uff0cPclass\u4e3a3\u7684\u4e58\u5ba2\u7684Fare\u4e2d\u4f4d\u6570\u586b\u5145\u3002","8a52e2f6":"\u53d1\u73b0\u7edd\u5927\u90e8\u5206\u5973\u6027\u548c\u513f\u7ae5\u7ec4\u7684\u5e73\u5747\u5b58\u6d3b\u7387\u90fd\u4e3a1\u62160\uff0c\u5373\u540c\u7ec4\u7684\u5973\u6027\u548c\u513f\u7ae5\u8981\u4e48\u5168\u90e8\u5e78\u5b58\uff0c\u8981\u4e48\u5168\u90e8\u9047\u96be\u3002","cbc0be87":"Deck Feature(New)\uff1a\u4e0d\u540c\u7532\u677f\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u4e0d\u540c\n\u65b0\u589eDeck\u7279\u5f81\uff0c\u5148\u628aCabin\u7a7a\u7f3a\u503c\u586b\u5145\u4e3a'Unknown'\uff0c\u518d\u63d0\u53d6Cabin\u4e2d\u7684\u9996\u5b57\u6bcd\u6784\u6210\u4e58\u5ba2\u7684\u7532\u677f\u53f7","7c320c5f":"3\uff09\u4ea4\u53c9\u9a8c\u8bc1"}}