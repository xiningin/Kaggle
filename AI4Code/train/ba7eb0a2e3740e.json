{"cell_type":{"bc529f2f":"code","94326445":"code","61949723":"code","bbebbe8a":"code","1f41af07":"code","5c0490d2":"code","7d42a1c2":"code","eaf80fd8":"code","31dc52cf":"code","d3199c64":"code","922e84f0":"code","58c8d673":"code","958bb2e0":"code","1731ef07":"code","171a6a52":"code","a7e60839":"code","d0058fc7":"markdown","31bd62a5":"markdown","3968314a":"markdown","55e68156":"markdown","ec14a30b":"markdown","3b96aa1c":"markdown","676b648e":"markdown","9879ee26":"markdown","8ee2bf35":"markdown","4db04a5f":"markdown","1d970041":"markdown","26557c1b":"markdown","d0944c1c":"markdown","a1cf4515":"markdown","75067e6e":"markdown","ca54da48":"markdown","6aabeb80":"markdown"},"source":{"bc529f2f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom IPython.display import display, HTML, Markdown\nfrom datetime import date\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom glob import glob\nfrom statsmodels.tsa.stattools import acovf\nfrom statsmodels.tsa.stattools import acf, ccf\n\npath_ibov =  glob('\/kaggle\/input\/ibovespa-stocks\/b3*.csv')[0]\npath_usd =  glob('\/kaggle\/input\/ibovespa-stocks\/usd*.csv')[0]","94326445":"df = pd.read_csv(path_ibov)\ndf.loc[:, \"datetime\"]  = pd.to_datetime(df.datetime)\ndf = df.set_index([\"ticker\", \"datetime\", ]).sort_index()","61949723":"def plot_acf(x, lag_range, reverse=True, figsize=(12, 5),\n             title_fontsize=15, xlabel_fontsize=16, ylabel_fontsize=16):\n    \"\"\"\n    plot autocorrelation of series x\n    :param x: series that we will perform the lag\n    :type x: pd.Series\n    :param lag_range: range of lag\n    :type lag_range: int\n    :param out_path: path to save figure\n    :type out_path: str\n    :param ccf: cross-correlation function\n    :type ccf: function\n    :param reverse: param to reverse lags\n    :type reverse: boolean\n    :param figsize: figure size\n    :type figsize: tuple\n    :param title_fontsize: title font size\n    :type title_fontsize: int\n    :param xlabel_fontsize: x axis label size\n    :type xlabel_fontsize: int\n    :param ylabel_fontsize: y axis label size\n    :type ylabel_fontsize: int\n    \"\"\"\n\n    title = \"{}\".format(x.name)\n    lags = range(lag_range)\n    ac = acf(x,fft=False,nlags=lag_range)\n    sigma = 1 \/ np.sqrt(x.shape[0])\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.vlines(lags, [0], ac)\n    plt.plot(lags, [0] * len(lags), c=\"black\", linewidth=1.0)\n    plt.plot(lags, [2 * sigma] * len(lags), '-.', c=\"blue\", linewidth=0.6)\n    plt.plot(lags, [-2 * sigma] * len(lags), '-.', c=\"blue\", linewidth=0.6)\n    ax.set_xlabel('Lag', fontsize=xlabel_fontsize)\n    ax.set_ylabel('autocorrelation', fontsize=ylabel_fontsize)\n    fig.suptitle(title, fontsize=title_fontsize, fontweight='bold', y=0.93)\n    \n\n\ndef plot_ccf(x, y, lag_range,\n             figsize=(12, 5),\n             title_fontsize=15, xlabel_fontsize=16, ylabel_fontsize=16):\n    \"\"\"\n    plot cross-correlation between series x and y\n    :param x: series that we leads y on the left\n    :type x: pd.Series\n    :param y: series that we leads x on the right\n    :type y: pd.Series\n    :param lag_range: range of lag\n    :type lag_range: int\n    :param figsize: figure size\n    :type figsize: tuple\n    :param title_fontsize: title font size\n    :type title_fontsize: int\n    :param xlabel_fontsize: x axis label size\n    :type xlabel_fontsize: int\n    :param ylabel_fontsize: y axis label size\n    :type ylabel_fontsize: int\n    \"\"\"\n\n    title = \"{} & {}\".format(x.name, y.name)\n    lags = range(-lag_range, lag_range + 1)\n    left = ccf(y, x)[:lag_range + 1]\n    right = ccf(x, y)[:lag_range]\n\n    left = left[1:][::-1]\n    cc = np.concatenate([left, right])\n\n    sigma = 1 \/ np.sqrt(x.shape[0])\n    fig, ax = plt.subplots(figsize=figsize)\n    ax.vlines(lags, [0], cc)\n    plt.plot(lags, [0] * len(lags), c=\"black\", linewidth=1.0)\n    plt.plot(lags, [2 * sigma] * len(lags), '-.', c=\"blue\", linewidth=0.6)\n    plt.plot(lags, [-2 * sigma] * len(lags), '-.', c=\"blue\", linewidth=0.6)\n    ax.set_xlabel('Lag', fontsize=xlabel_fontsize)\n    ax.set_ylabel('cross-correlation', fontsize=ylabel_fontsize)    \n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))\n    fig.suptitle(title, fontsize=title_fontsize, fontweight='bold', y=0.93)\n    \ndef get_lead_matrix(lead_series, fixed_series, lag_range):\n    \n    \"\"\"\n    get ccf vector of size 'max_lag' for each ts in 'lead_series' in\n    relation with 'fixed_series'. All the ccf results\n    are arranged in matrix format.\n\n    :param lead_series: list of series to be lagged. \n                        All series are indexed by time.\n    :type lead_series: [pd.Series]\n    :param fixed_series: list of series indexed by time.\n    :type fixed_series: pd.Series\n    :param lag_range: range of lag\n    :type lag_range: int\n    :return: matrix of ccf information\n    :rtype: pd.DataFrame\n    \"\"\"\n\n    ccf_rows = []\n    for ts in lead_series:\n        merged = pd.merge_asof(ts, fixed_series,\n                               left_index=True, right_index=True)\n\n        lagged_ts = merged[ts.name]\n        fixed_ts = merged[fixed_series.name]\n        row = ccf(fixed_ts, lagged_ts)[:lag_range +1]\n        ccf_rows.append(row)\n\n\n\n    ccf_matrix = np.array(ccf_rows)\n    ccf_matrix = pd.DataFrame(ccf_matrix,\n                              columns=[\"lag_{}\".format(i) for i in range(lag_range +1)],\n                              index=[ts.name for ts in lead_series]) \n    return ccf_matrix","bbebbe8a":"ticker_name = \"BOVA11\"\n# ticker_name = \"ITUB4\"\n# ticker_name = \"VVAR3\"  \n\n\nticker_ts = df.xs(ticker_name).close\nticker_ts.name = ticker_name\n\nsimple_net_return = ticker_ts.pct_change().dropna()\nsimple_gross_return = 1 + simple_net_return\nlog_return = np.log(simple_gross_return)\n\nfig, ax = plt.subplots(1,3,figsize=(26,6))\nsimple_net_return.plot(ax=ax[0]);\nsimple_gross_return.plot(ax=ax[1]);\nlog_return.plot(ax=ax[2]);\nax[0].set_title(\"Simple Net Return\\n\", fontsize=18);\nax[1].set_title(\"Simple Gross Return\\n\", fontsize=18);\nax[2].set_title(\"Log Return\\n\", fontsize=18);\nplt.suptitle(ticker_name, fontsize=20, y=1.1);","1f41af07":"wnoise = pd.Series(np.random.normal(0,1,500))\nwnoise.name = \"white noise\"\nfig, ax = plt.subplots(1,2,figsize=(20,5))\nwnoise.plot(ax=ax[0]);\nwnoise.rolling(30).mean().plot(ax=ax[1]);\nax[0].set_title(\"White Noise\\n\", fontsize=18);\nax[1].set_title(\"White Noise (Moving Average)\\n\", fontsize=18);\n","5c0490d2":"steps = 500\nw = np.random.normal(0,1,steps)\ninit1,init2 = np.random.normal(0,1,2)\nxs = [init1, init2]\n\nfor i in range(2, steps):\n    new = xs[i-1] - 0.9*xs[i-2] + w[i]\n    xs.append(new)\n    \nauto_ts = pd.Series(xs)\nw = pd.Series(w)\nfig, ax = plt.subplots(1,2,figsize=(20,5))\nauto_ts.plot(ax=ax[0]);\nw.plot(ax=ax[1]);\nax[1].set_title(\"White Noise\\n\", fontsize=18);\nax[0].set_title(\"Autoregressive series\\n\", fontsize=18);","7d42a1c2":"steps = 500\nw = np.random.normal(0,1,steps)\ndrift1 = 0.2\ndrift2 = 0.4\ndrift3 = - 0.1\ninit = 0\nx1 = [init]\nx2 = [init]\nx3 = [init]\n\nfor i in range(1, steps):\n    new1 = drift1 + x1[i-1] + w[i]\n    new2 = drift2 + x2[i-1] + w[i]\n    new3 = drift3 + x3[i-1] + w[i]\n    x1.append(new1)\n    x2.append(new2)\n    x3.append(new3)\n\n    \nrw1 = pd.Series(x1)\nrw1.name = r\"$\\delta = {}$\".format(drift1)\nrw2 = pd.Series(x2)\nrw2.name = r\"$\\delta = {}$\".format(drift2)\nrw3 = pd.Series(x3)\nrw3.name = r\"$\\delta = {}$\".format(drift3)\nfig, ax = plt.subplots(1,1,figsize=(10,5))\nrw1.plot(ax=ax);\nrw2.plot(ax=ax);\nrw3.plot(ax=ax);\nax.set_title(\"Randon walk\\n\", fontsize=18);\nax.legend(loc=\"best\");","eaf80fd8":"wnoise1 = pd.Series(np.random.normal(0,1,500))\nwnoise2 = pd.Series(np.random.normal(0,1,500))\nlp1 = wnoise1.rolling(30).sum() + 100\nlp2 = wnoise2.rolling(30).sum() + 100\nfig, ax = plt.subplots(1,1,figsize=(10,5))\nlp1.plot(ax=ax);\nlp2.plot(ax=ax);\nax.set_title(\"Linear Process\\n\", fontsize=18);\n","31dc52cf":"window = 30\n\nex1 = rw1.rolling(window).mean()\nex1.name = \"random walk (non-stationary)\"\nex2 = wnoise.rolling(window).mean()\nex2.name = \"white noise (stationary)\"\n\nfig, ax = plt.subplots(1,1,figsize=(10,5))\nex1.plot(ax=ax);\nex2.plot(ax=ax);\nax.set_title(\"Rolling Mean\\n\", fontsize=18);\nax.legend(loc=\"best\");","d3199c64":"window = 60\n\nticker_name1 = \"ITUB4\"\nticker_name2 = \"PETR3\"  \nticker_name3 = \"VALE3\"  \nticker_ts1 = df.xs(ticker_name1).close\nticker_ts1.name = ticker_name1\nticker_ts2 = df.xs(ticker_name2).close\nticker_ts2.name = ticker_name2\nticker_ts3 = df.xs(ticker_name3).close\nticker_ts3.name = ticker_name3\nsimple_net_return1 = ticker_ts1.pct_change().dropna()\nsimple_net_return2 = ticker_ts2.pct_change().dropna()\nsimple_net_return3 = ticker_ts3.pct_change().dropna()\n\n\nfig, ax = plt.subplots(1,1,figsize=(10,5))\nsimple_net_return1.rolling(window).mean().plot(ax=ax);\nsimple_net_return2.rolling(window).mean().plot(ax=ax);\nsimple_net_return3.rolling(window).mean().plot(ax=ax);\nax.set_title(\"Rolling Mean Ticker Returns \\n\", fontsize=18);\nax.legend(loc=\"best\");","922e84f0":"# sanity check for the statsmodel function\nts = wnoise\nn = ts.shape[0]\ntest_size = 40\ncheck1_cov = acovf(ts,fft=False)[:test_size]\ncheck1_corr = acf(ts,fft=False)[:test_size]\nfor i in range(test_size):\n    raw_cov = ((ts - ts.mean())*(ts.shift(i) - ts.mean())).sum() \/ n\n    raw_corr = raw_cov \/ ts.var(ddof=0)\n    stats_cov = check1_cov[i]\n    stats_corr = check1_corr[i]\n    \n    test_cov = (raw_cov - stats_cov)**2\n    test_corr = (raw_corr - stats_corr)**2\n    assert test_cov < 1e-4\n    assert test_corr < 1e-4    ","58c8d673":"plot_acf(wnoise, lag_range=100)\nplot_acf(simple_net_return1, lag_range=100)\nplot_acf(simple_net_return2, lag_range=100)\nplot_acf(simple_net_return3, lag_range=100)","958bb2e0":"# sanity check for the statsmodel function\n# ccf([FIXED SERIES], [LAGGED SERIES])\n\n\nx = pd.Series(np.random.normal(0,1,100))\ny = x.shift(9)\ny = y.fillna(1)\n\n\nx_mean =  x.mean()\ny_mean =  y.mean()\nstd_x = x.std()\nstd_y = y.std()\nstats_corr = ccf(y, x)\nmy_corr = []\n\nfor h in range(90):\n    cov = (x.shift(h) - x_mean)*(y - y_mean)\n    cov = cov.dropna().mean()\n    corr = cov\/(std_x*std_y)\n    my_corr.append(corr)\n    test = (corr - stats_corr[h])**2\n    assert test < 1e-3, print(\"error: h= {} | my_corr = {:.4f} | stats_corr = {:.4f}\".format(h, corr, stats_corr[h]))\n\nmy_corr = np.array(my_corr)\nprint(my_corr.max(), stats_corr.max())\nprint(my_corr.min(), stats_corr.min())\nplot_ccf(x, y, 12)","1731ef07":"a = pd.Series(np.random.normal(0,1,100))\na.name = \"a\"\nb = a.shift(2)\nb = b.fillna(1)\nb.name = \"a.shift(2)\"\nplot_ccf(a, b, 8)\n\na = pd.Series(np.random.normal(0,1,100))\na.name = \"a\"\nb = a.shift(-4)\nb = b.fillna(1)\nb.name = \"a.shift(-4)\"\nplot_ccf(a, b, 8)\n\n\na = pd.Series(np.random.normal(0,1,100))\na.name = \"a\"\nb = a.shift(50) \nb = b.fillna(1)\nb.name = \"a.shift(50)\"\nplot_ccf(a, b, 60)\n\na = pd.Series(np.random.normal(0,1,100))\na.name = \"a\"\nw = pd.Series(np.random.normal(0,0.1,100))\nb = w\nb.name = \"noise\"\nplot_ccf(a, b, 60)","171a6a52":"usd_brl = pd.read_csv(path_usd)\nusd_brl.loc[:, \"datetime\"]  = pd.to_datetime(usd_brl.datetime)\nusd_brl = usd_brl.set_index(\"datetime\")[\"usd_brl\"]\nbrl_usd = (1\/usd_brl)\nbrl_usd = brl_usd.pct_change().dropna()\nbrl_usd.name = \"brl_usd\"\n\n\nfig, ax = plt.subplots(1,1,figsize=(10,5))\nbrl_usd.plot(ax=ax);\nax.set_title(\"BRL\/USD pct_change \\n\", fontsize=18);\nax.legend(loc=\"best\");\n\nibov = [\"ABEV3\", \"AZUL4\", \"B3SA3\", \"BBAS3\", \"BBDC3\", \"BBDC4\", \"BBSE3\", \"BPAC11\", \"BRAP4\",\n        \"BRDT3\", \"BRFS3\", \"BRKM5\", \"BRML3\", \"BTOW3\", \"CCRO3\", \"CIEL3\", \"CMIG4\", \"COGN3\", \"CRFB3\",\n        \"CSAN3\", \"CSNA3\", \"CVCB3\", \"CYRE3\", \"ECOR3\", \"EGIE3\", \"ELET3\", \"ELET6\", \"EMBR3\", \"ENBR3\",\n        \"EQTL3\", \"FLRY3\", \"GGBR4\", \"GNDI3\", \"GOAU4\", \"GOLL4\", \"HAPV3\", \"HGTX3\", \"HYPE3\", \"IGTA3\",\n        \"IRBR3\", \"ITSA4\", \"ITUB4\", \"JBSS3\", \"KLBN11\", \"LAME4\", \"LREN3\", \"MRFG3\",\"MGLU3\",\n        \"MRVE3\", \"MULT3\", \"NTCO3\", \"PCAR4\", \"PETR3\", \"PETR4\", \"QUAL3\", \"RADL3\",\n        \"RAIL3\", \"RENT3\", \"SANB11\", \"SBSP3\", \"SMLS3\", \"SULA11\", \"SUZB3\", \"TAEE11\",\n        \"TIMP3\", \"TOTS3\", \"UGPA3\", \"USIM5\", \"VALE3\", \"VIVT4\", \"VVAR3\", \"WEGE3\", \"YDUQ3\"]\n\nlead_series = [] \nlead_series_dict = {}\n\nfor ticker_name in ibov:\n    ticker_ts = df.xs(ticker_name).close\n    ticker_ts.name = ticker_name\n    simple_net_return = ticker_ts.pct_change().dropna()\n    lead_series.append(simple_net_return)\n    lead_series_dict[ticker_name] = simple_net_return\n    \nlead_m = get_lead_matrix(lead_series, brl_usd, 5)\nlead_m = lead_m.sort_values(\"lag_1\", ascending=False)\nfig, ax = plt.subplots(figsize=(8,20))\nax.set_title(\"Tickers cross-correlation on BRL\/USD pct change \\n\", fontsize=18)\nsns.heatmap(lead_m, center=0,cmap='PuOr', linewidths=1, annot=True, fmt=\".3f\", ax=ax, cbar=False);\nplt.xticks(rotation=45);\nplt.yticks(rotation=0);","a7e60839":"ticker_1 = \"ITSA4\"\nticker_2 = \"BBAS3\"\nlag = 1\n\nts1 = lead_series_dict[ticker_1]\nts2 = lead_series_dict[ticker_2]\nm1 = pd.merge_asof(ts1, brl_usd,\n                   left_index=True, right_index=True)\nplot_ccf(m1[ticker_1], m1[\"brl_usd\"], 5)\nm1.loc[:, ticker_1] = m1[ticker_1].shift(lag)\nm2 = pd.merge_asof(ts2, brl_usd,\n                   left_index=True, right_index=True)\nplot_ccf(m2[ticker_2], m2[\"brl_usd\"], 5)\nm2.loc[:, ticker_2] = m2[ticker_2].shift(lag)\n\nfig, ax = plt.subplots(1,2,figsize=(12,5))\nax[0].scatter(m1[ticker_1], m1[\"brl_usd\"]);\nax[1].scatter(m2[ticker_2], m2[\"brl_usd\"]);\nax[0].set_ylabel(\"BRL\/USD pct_change\", fontsize=14);\nax[0].set_xlabel(\"{} simple net return (lag = {})\".format(ticker_1,lag), fontsize=14);\nax[1].set_ylabel(\"BRL\/USD pct_change\", fontsize=14);\nax[1].set_xlabel(\"{} simple net return (lag = {})\".format(ticker_2,lag), fontsize=14);\nax[0].set_title(\"corr = {:.3f}\\nsample size = {}\".format(m1.corr().iloc[0,1], m1.shape[0]), fontsize=18)\nax[1].set_title(\"corr = {:.3f}\\nsample size = {}\".format(m2.corr().iloc[0,1], m2.shape[0]), fontsize=18)\nplt.subplots_adjust(wspace=0.3)\nfig.suptitle(\"Naive correlation analysis\", fontsize=20, y=1.1);\n\n","d0058fc7":"### 2)  White Noise","31bd62a5":"## Estimation of Correlation\n\n> Although the theoretical autocorrelation and cross-correlation functions are useful for describing the properties of certain hypothesized models, most of the analyses must be performed using sampled data. This limitation means the sampled points $x_1, x_2 , \\dots, x_n$ only are available for estimating the mean, autocovariance, and autocorrelation functions. From the point of view of classical statistics, this poses a problem because we will typically not have iid copies of $X_t$ that are available for estimating the covariance and correlation functions. In the usual situation with only one realization, however, the assumption of stationarity becomes critical. Somehow, we must use averages over this single realization to estimate the population means and covariance functions. (TSA, p.26)\n\n\nWhen $\\{X_t\\}_{t\\in T}$ is stationary ts, we have:\n\n- The sample mean \n\n\\begin{equation}\n\\bar{X}_n = \\frac{1}{n}\\sum_{t=1}^n X_t ,\n\\end{equation}\n\nis an unbiased estimator of the constant function $\\mu_X$.\n\n- The **sample autocovariance function** is a biased estimator of $\\gamma(h)$\n\n\\begin{equation}\n\\hat{\\gamma}(h) =  \\frac{1}{n}\\sum_{t=1}^{n-h}(X_{t+h} - \\bar{X}_n)(X_t - \\bar{X}_n)\n\\end{equation}\n\nwhere $h \\in {0, \\dots, n-1}$. It is easy to show that $\\hat{\\gamma}(h) = \\hat{\\gamma}(-h)$ (note: for negative values we need to change the order in the summation).\n\n- The **sample autocorrelation function** is a estimator of $\\rho(h)$\n\n\\begin{equation}\n\\hat{\\rho}(h) =  \\frac{\\hat{\\gamma}(h)}{\\hat{\\gamma}(0)}\n\\end{equation}\n\nwhere $h \\in {0, \\dots, n-1}$. \n\n### Large-Sample distribution of the ACF\n\nUnder some general conditions, $\\hat{\\rho}(h)$ is a consistent estimate of $\\rho(h)$. For example, if\n$X_1, \\dots, X_n$ is an independent and identically distributed (iid) sequence and $X_t$ has finite variance, then $\\hat{\\rho}(h)$ is asymptotically normal with mean zero and standart deviation $1\/\\sqrt{n}$.\n\n> Based on the previous result, we obtain a rough method of assessing whether peaks in $\\hat{\\rho}(h)$ are significant by determining whether the observed peak is outside the interval $\\pm 2\/\\sqrt{n}$ (or plus\/minus two standard errors); for a white noise sequence, approximately $95\\%$ of the sample ACFs should be within these limits. (TSA p.29).\n","3968314a":"# Time Series Analysis 1\n\n## References:\n\n- **TSA**: [Time Series Analysis and Its Applications](https:\/\/www.springer.com\/gp\/book\/9783319524511).\n- **AFTS**: [Analysis of Financial Time Series](https:\/\/www.amazon.com\/Analysis-Financial-Time-Ruey-Tsay\/dp\/0470414359)\n\n## Notation\n\n- $\\{X_t\\}_{t\\in T}$ denotes a collection of random variables with indexes in some set $T$ (a *time series* - ts).\n- $\\{x_t\\}_{t\\in T}$ denotes a collection of constants with indexes in some set $T$ (a realization of a ts).","55e68156":"### Check plots","ec14a30b":"### Cross-Correlation, Lead and Lag\n\nFor two samples $\\{X_t\\}_{t\\leq n}$ and $\\{Y_t\\}_{t\\leq n}$ the **sample cross-covariance function** is given by\n\n\\begin{equation}\n\\hat{\\gamma}_{XY}(h) =  \\frac{1}{n}\\sum_{t=1}^{n-h}(X_{t+h} - \\bar{X}_n)(Y_t - \\bar{Y}_n)\n\\end{equation}\n\nwhere $h \\in {0, \\dots, n-1}$ (note that $\\hat{\\gamma}_{XY}(h) = \\hat{\\gamma}_{YX}(-h)$). \n\nSimilarly, the **sample cross-correlation function** is defined as\n\n\n\\begin{equation}\n\\hat{\\rho}_{XY}(h) = \\frac{\\hat{\\gamma}_{XY}(h)}{\\sqrt{\\hat{\\gamma}_{X}(0) \\, \\hat{\\gamma}_{Y}(0)} }\n\\end{equation}\n\nwhere $h \\in {0, \\dots, n-1}$. \n\n\nWe can use the cross-correlation function to understand the relation between series. Given two series $\\{X_t\\}_{t\\in T}$ and $\\{Y_t\\}_{t\\in T}$, $l\\geq 0$ and $W_t$ uncorrelated with $X_t$, if the model\n\n\\begin{equation}\nY_t = \\beta X_{t-l} + W_t,\n\\end{equation}\n\nholds, we say that $X_t$ **leads** $Y_t$.\n\nSimilarly, if the relationship\n\n\\begin{equation}\nY_t = \\beta X_{t+l} + W_t,\n\\end{equation}\n\nholds, we say that $X_t$ **lags** $Y_t$.\n\nFor two samples $\\{X_t\\}_{t\\leq n}$ and $\\{Y_t\\}_{t\\leq n}$, the cross-correlation function **can help us guessing at the linear dependence relationship between $X_t$ and $Y_t$**.\n\nFor two independent linear processes $\\{X_t\\}_{t\\leq n}$ and $\\{Y_t\\}_{t\\leq n}$, the large sample distribution of $\\hat{\\rho}_{XY}(h)$ is normal with mean zero and standart deviation $1\/\\sqrt{n}$, if at leat one of the processes is independent white noise (TSA p.31).","3b96aa1c":"### Imports","676b648e":"## Loading Ibov data","9879ee26":"### 5) Linear Process\n\nA **Linear processs** $X_t$ is defined to be a linear combination of white noise variates $W_t$, and is given by\n\n\\begin{equation}\nX_t = \\mu + \\sum_{j = -\\infty}^{\\infty}\\beta_j W_{t-j} \\,, \\quad \\sum_{-\\infty}^{\\infty}|\\beta_j| < \\infty.\n\\end{equation}\n\n**Example**","8ee2bf35":"## Application Example\n\n\n### Can we use the performance of a ticker on the day $t-h$ to predict the percetange change of the BRL to USD ratio for the day $t$?\n\nWith the ccf function, it is possible to guess at the linear depence of these two instruments.\n","4db04a5f":"### Plot Functions","1d970041":"### Stationary in Finance \n\n> In the finance literature, it is common to assume that an asset return series is weakly stationary. This assumption can be checked empirically provided that a sufficient number of historical returns are available. For example, one can divide the data into subsamples and check the consistency of the results obtained across the subsamples. (AFTS, p.30)","26557c1b":"### ACF Plot Examples","d0944c1c":"### 3)  Autoregressions\n\n**Example**\n\n\\begin{equation}\nX_t = X_{t-1}  - 0.9X_{t-2} + W_t \\,,\n\\end{equation}\n\nwhere $W_t \\thicksim N(0,1)$.\n","a1cf4515":"## Measures of Dependence\n\n### Autocovariance\n\nLet $\\{X_t\\}_{t\\in T}$ be a ts such that each $X_t$ has a finite variance. The **mean value function** is the function $\\mu_X: T \\rightarrow \\mathbb{R}$ such that\n\n\\begin{equation}\n\\mu_X(t) = \\mathbb{E}[X_t].\n\\end{equation}\n\nThe **autocovariance function** is the function $\\gamma_X: T\\times T \\rightarrow \\mathbb{R}$ such that\n\n\\begin{equation}\n\\gamma_X(s,t) =  \\mathbb{E}[(X_s - \\mu_X(s))(X_t - \\mu_X(t))].\n\\end{equation}\n\nClearly, for every $t\\in T$:\n\n\\begin{equation}\n\\gamma_X(t,t) =  \\mathbb{E}[(X_t - \\mu_X(t))(X_t - \\mu_X(t))] = \\mathbb{E}[(X_t - \\mu_X(t))^2] = \\mathbb{V}[X_t].\n\\end{equation}\n\n### Autocorrelation\n\nThe **autorcorrelation function** is defined as\n\n\\begin{equation}\n\\rho_X(s,t) = \\frac{\\gamma_X(s,t)}{\\sqrt{\\gamma_X(s,s) \\gamma_X(t,t)}}.\n\\end{equation}\n\nUsing the [Cauchy-Schwartz inequality](https:\/\/www.probabilitycourse.com\/chapter6\/6_2_4_cauchy_schwarz.php) we can prove that for every $s, t \\in T$, $\\rho_X(s,t) \\in [-1, 1]$. Moreover, $|\\rho_X(s,t)| =1$ if and only if $X_t = \\beta_0 + \\beta_1 X_s$ for $\\beta_0, \\beta_1 \\in \\mathbb{R}$. **Hence, we have a rough measure of the ability to forecast the series at time $t$ from the value at time $s$.**\n\nWhen it is clear from the context which ts we are referring to, we use $\\mu_t, \\gamma(s,t), \\rho(s,t)$ to denote $\\mu_X(t), \\gamma_X(s,t), \\rho_X(s,t)$, respectively.\n\n### Cross-Covariance and Cross-Correlation \n\nThe **cross-covariance function** between two ts $\\{X_t\\}_{t\\in T}$  and $\\{Y_t\\}_{t\\in T}$ (both with finite variance) is defined as:\n\n\\begin{equation}\n\\gamma_{XY}(s,t) = \\mathbb{E}[(X_s - \\mu_X(s))(Y_t - \\mu_Y(t))].\n\\end{equation}\n\nThe **cross-correlation function** is given by \n\n\n\\begin{equation}\n\\rho_{XY}(s,t) = \\frac{\\gamma_{XY}(s,t)}{\\sqrt{\\gamma_X(s,s) \\gamma_Y(t,t)}}.\n\\end{equation}\n\n\n## Stationary Time Series\n\nLet $\\{X_t\\}_{t\\in T}$ be a ts such that each $X_t$ has a finite variance. For $t_1, \\dots, t_n \\in T$ let $F_{t_1, \\dots, t_n}$ be the joint distribuiton, i.e., for each sample point $(x_1, \\dots, x_n)\\in \\mathbb{R}^n$\n\n\\begin{equation}\nF_{t_1, \\dots, t_n}(x_1, \\dots, x_n) = \\mathbb{P}(X_{t_1}\\leq x_1, \\dots, X_{t_n}\\leq x_n).\n\\end{equation}\n\nWe say that $\\{X_t\\}_{t\\in T}$ is a **strictly stationary** time series if for all set of indices  $\\{t_1, \\dots, t_n\\} \\subseteq T$  and all time shifts $h \\in \\mathbb{N}$:\n\n\\begin{equation}\nF_{t_1, \\dots, t_n} = F_{t_{1+h}, \\dots, t_{n+h}}.\n\\end{equation}\n\nWhen $\\{X_t\\}_{t\\in T}$ is a strictly stationary ts, we can deduce two facts:\n\n- **i)** For every $t$, $\\mu_t = \\mu$, where $\\mu \\in \\mathbb{R}$.\n\n- **ii)** For every $t,s \\in T$ and shift $h$ we have:\n\n\\begin{equation}\n\\gamma(s,t) =  \\mathbb{E}_{F_{t,s}}[(X_s - \\mu)(X_t - \\mu)] = \\mathbb{E}_{F_{t+h,s+h}}[(X_{s+h} - \\mu)(X_{t+h} - \\mu)] = \\gamma(s+h,t+h).\n\\end{equation}\n\nWe say that $\\{X_t\\}_{t\\in T}$ is a **weakly stationary** ts if it satisfies the properties **i)** and **ii)**. We say that a series is **stationary** if it is **weakly stationary**.\n\n\nThe **autocovariance function of a stationary time series** can be defined as a function that takes only the argument $h$:\n\n\\begin{equation}\n\\gamma(h) = \\gamma(h,0) = \\gamma(t+h,t),\n\\end{equation}\n\nwhere $t$ is an arbitrary index in $T$. One of the properties of this autocovariance function is that it is symmetric around the origin:\n\n\\begin{align}\n\\gamma(h) &= \\gamma(h,0)\\\\\n &= \\gamma(t+h,t)\\\\\n &= \\gamma(t,t+h)\\\\\n &= \\gamma((t+h)-h,(t+h))\\\\\n &= \\gamma(-h,0)\\\\\n &= \\gamma(-h)\\\\\n\\end{align}\n\n\nSimilarly, the **autocorrelation function (ACF) of a stationary time series** is defined as:\n\n\\begin{equation}\n\\rho(h) = \\frac{\\gamma(t+h,t)}{\\sqrt{\\gamma(t+h,t+h) \\gamma(t,t)}} = \\frac{\\gamma(h)}{\\gamma(0)}.\n\\end{equation}\n\nWe say that two time series $\\{X_t\\}_{t\\in T}$ and $\\{Y_t\\}_{t\\in T}$ are **jointly stationary** if they are each stationary, and the cross-covariance function\n\n\\begin{equation}\n\\gamma_{XY}(h) =   \\mathbb{E}[(X_{t+h} - \\mu_X)(Y_{t} - \\mu_Y)].\n\\end{equation}\n\nis a function only of lag $h$.\n\nIn this same line, the **cross-correlation function (CCF)** of jointly stationary time series $\\{X_t\\}_{t\\in T}$ and $\\{Y_t\\}_{t\\in T}$ is defined as \n\n\\begin{equation}\n\\rho_{XY}(h) = \\frac{\\gamma_{XY}(h)}{\\sqrt{\\gamma_X(0) \\gamma_Y(0)}}.\n\\end{equation}\n\n### Example of Stationary and non-Stationary Time Series\n","75067e6e":"### CCF Plot Examples\n\n### Remember: Pandas Notation\n\nGiven a ts $x_t$:\n\n- $x_{t+h} \\rightarrow$ `x.shift(-h)`\n- $x_{t-h} \\rightarrow$ `x.shift(h)`\n\n\n","ca54da48":"### 4) Random walk\n\n**Example**\n\n\\begin{equation}\nX_t = \\delta + X_{t-1} + W_t \\,,\n\\end{equation}\n\nwhere $\\delta \\in \\mathbb{R}$ is a constant called the *drift* and $W_t \\thicksim N(0,1)$. When $\\delta=0$, $\\{X_t\\}_{t\\in T}$ is called a *random walk*.\n","6aabeb80":"## Time Series Examples\n### 1) Returns from stock price"}}