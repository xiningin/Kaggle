{"cell_type":{"ff685f8f":"code","a92e5de3":"code","b35be323":"code","d5c71437":"code","f597fc74":"code","80e4eae9":"code","9dbd3c4f":"code","2f0d4d70":"code","515d3a1c":"code","8a5eec89":"code","dd0ab97e":"code","8ee04143":"code","2eb6e26c":"code","65087567":"code","699ce00f":"code","55ec01cd":"code","bfeb6f91":"code","842eb7be":"code","01c173dd":"code","1134977b":"code","1308f558":"markdown","aab59211":"markdown","f8e1a75f":"markdown","cc4206f9":"markdown","cb795c65":"markdown","6ebccd55":"markdown","78d5393d":"markdown","d49c7437":"markdown","4396b266":"markdown","1719da12":"markdown"},"source":{"ff685f8f":"# Bibliotecas necess\u00e1rias\n# Manipula\u00e7\u00e3o de dados\nimport pandas as pd\n# Redes Neurais\nfrom tensorflow import keras\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten, AveragePooling2D\nfrom tensorflow.keras.optimizers import RMSprop\n# Plot\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Avalia\u00e7\u00e3o\nfrom sklearn.metrics import classification_report, confusion_matrix\n","a92e5de3":"# Lendo o dataset Kaggle\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\n\n#Alternativa ler do pr\u00f3prio keras\n#(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","b35be323":"# Analisando o dataset\nprint(\"Quantidade de elementos de treino: {}\". format(len(train)))\nprint(train.head())","d5c71437":"# Separando x_train e y_train\nY = train[\"label\"]\nX = train.drop(labels = [\"label\"],axis = 1)\nprint(X.head())\n# Em formato numpy array de imagens 28 x 28\n#x = X.values.reshape(-1,28,28,1)\n#print(x[0])","f597fc74":"print(X.shape)","80e4eae9":"# Numtendi nada!\n# Bora ver com matplotlib\nplt.imshow(X.values[0].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Label: {}'.format(Y[0]))","9dbd3c4f":"# Transformando a imagem 2d em um numpy array (imagem 28*28)\nx = X.values.reshape(42000, 28, 28, 1)\n\n#Normalizando para valores entre 0 e 1\nx = x.astype('float32')\nx \/= 255\n\n#print(x[0])","2f0d4d70":"# Vamos ajustar o formato da saida\nnum_classes = 10\n\n# Convertendo para um vetor de saida com 10 dimensoes\n# ex. 8 => [0,0,0,0,0,0,0,0,1,0]\ny = keras.utils.to_categorical(Y, num_classes)\nprint(y[0])","515d3a1c":"# Separando uma parte para treino (90%) e outra para valida\u00e7\u00e3o (10%)\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.1, random_state=42)\nprint('Qtde de treino: {}'.format(len(x_train)))\nprint('Qtde de valida\u00e7\u00e3o: {}'.format(len(x_val)))","8a5eec89":"# Criando o modelo Sequential\n# Sequential: Modelo Keras de ir adicionando camadas (como um lego)\n# Conv2D: Camada com kernels (filtros) que percorrem a imagem extraindo caracter\u00edsitcas (mapas de caracte\u00edsticas)\n# MaxPooling2D: Camada que reduz a dimensionalidade dos mapas de caracter\u00edsticas 2D\n# Flatten: Camada que transforma um mapa de caracter\u00edsticas 2D num vetor para classficador final\n# Dense: Camada onde todas as entradas est\u00e3o conectadas em cada neur\u00f4nio (totalmente conectada)\n# Dropout: Camada usa durante treino que descarta aleatoriamente um percentual de conex\u00f5es (reduz overfitting)\n\n\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(2, 2),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(Conv2D(64, kernel_size=(2, 2),\n                 activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, kernel_size=(2,2), activation='relu'))\nmodel.add(Conv2D(64, kernel_size=(2,2), activation='relu'))\nmodel.add(AveragePooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(32, kernel_size=(2,2), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()","dd0ab97e":"# Compila o modelo\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(),\n              metrics=['accuracy'])","8ee04143":"# Treina com os parte dos dados\nbatch_size = 32\nepochs = 30\n\n#Salvar o melhor modelo\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    callbacks = callbacks_list,\n                    verbose=1,\n                    validation_data=(x_val, y_val))","2eb6e26c":"#Vamos ver como foi o treino?\n\nfig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","65087567":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","699ce00f":"# Testa\nscore = model.evaluate(x_val, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","55ec01cd":"# Testando uma entrada qualquer\nprint(y_train[10])\nprint(model.predict(x_train[10].reshape((1,28,28,1))))\nprint(model.predict_classes(x_train[10].reshape((1,28,28,1))))","bfeb6f91":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","842eb7be":"# Vendo alguns reports# Vendo alguns reports\n# Usando sklearn\nimport numpy as np\n\n# Classificando toda base de teste\ny_pred = model.predict_classes(x_val)\n# voltando pro formato de classes\ny_test_c = np.argmax(y_val, axis=1)\ntarget_names = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n#Confution Matrix\ncm = confusion_matrix(y_test_c, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\n\nprint('Classification Report')\nprint(classification_report(y_test_c, y_pred, target_names=target_names, digits=4))","01c173dd":"# Gerando sa\u00edda para dataset de teste\n\n#Carrega dataset de teste\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(\"Qtde de testes: {}\".format(len(test)))\n# Bota no formato numpy e normaliza\nx_test = test.values.reshape(len(test),28,28,1)\nx_test = x_test.astype('float32')\nx_test \/= 255\n\n# Faz classifica\u00e7\u00e3o para dataset de teste\ny_pred = model.predict_classes(x_test)\n\n# Verficando algum exemplo\ni = 0\nplt.imshow(test.values[i].reshape(28,28), cmap=plt.cm.binary)\nplt.show()\nprint('Previsto: {}'.format(y_pred[i]))\n\n# Botando no formato de sa\u00edda (competi\u00e7\u00e3o Kaggle)\nresults = pd.Series(y_pred,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,len(y_pred)+1),name = \"ImageId\"),results],axis = 1)\nprint(submission.head(10))\n#Salvando Arquivo\nsubmission.to_csv(\"mlp_mnist_v1.csv\",index=False)","1134977b":"#introduzindo ruido\nimport numpy as np\nmean = 0.\nstddev = 0.2\nnoise = np.random.normal(mean, stddev, (4200, 28, 28,1))\nx_te = x_val + noise\nx_te = np.clip(x_te, 0., 1.)\n\nplt.imshow(x_te.reshape(4200, 28,28)[0], cmap=plt.cm.binary)\nplt.show()\n\n# Testa\nscore = model.evaluate(x_te, y_val, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","1308f558":"# Bibliotecas e Dados","aab59211":"# Criando e treinando o Modelo","f8e1a75f":"# Gerando Sa\u00edda","cc4206f9":"# Avaliando o Modelo","cb795c65":"# Introdu\u00e7\u00e3o","6ebccd55":"**Resumo:**\n\nO exemplo aqui desenvolvido tem como objetivo apresentar conceitos iniciais de implementa\u00e7\u00e3o de redes neurais com python e tensorflow\/keras. Esse modelo apresenta um modelo de Rede Neural Convolucional (CNN) b\u00e1sico que pode ser expandido mudando o n\u00famero de neur\u00f4nios e camadas. Em adapta\u00e7\u00f5es mais avan\u00e7adas, pode-se estudar possibilidade de otimiza\u00e7\u00e3o de hyperpar\u00e2metros e outras t\u00e9cnincas como aumento de dados.\n\n**N\u00e3o \u00e9 objetivo nosso desenvolver e otimizar o modelo de classifica\u00e7\u00e3o**. O exemplo tem objetivo meramente did\u00e1tico.\n\n---\n\n**Para saber mais:**\n* [Palestras e cursos do Ocean](http:\/\/www.oceanbrasil.com\/)\n* Fran\u00e7ois Chollet. Deep Learning with Python. Manning Publications, 2017.\n* Ian Goodfellow and Yoshua Bengio and Aaron Courville. [Deep Learning](https:\/\/www.deeplearningbook.org\/). MIT Press, 2016.","78d5393d":"Minha arquitetura descrita na c\u00e9lula abaixo foi feita seguindo um padr\u00e3o visto nos slides e em um artigo no medium: https:\/\/medium.com\/data-hackers\/uma-introdu%C3%A7%C3%A3o-as-redes-neurais-convolucionais-utilizando-o-keras-41ee8dcc033e\n\n- A primeira camada convulucional com 32 filtros e kernel 2,2 para captura de mais detalhes\n- A segunda camada convulucional com 64 filtros para aumentar a quantidade de dados para o treino e kernel 2,2\n- A terceira camada um MaxPooling com poll de 2,2 para fazer a imagem de 28x28 para 14x14\n- A quarta camada e a quinta camada seguem com 64 filtros e kernel 2,2\n- A Sexta camada com um Average Pooling com pool de 2,2 para imagem de 14x14 ser 7x7\n- A S\u00e9tima camada uma Conv com 32 filtros e kernel 2,2\n- A oitava camada um \u00faltimo MaxPooling com pool 2,2\n- A nova camada segue por um Flatten\n- A d\u00e9cima \u00e9 uma camada com 50 neur\u00f4nios\n- A 11\u00ba \u00e9 uma de dropout 0.2\n- A 12\u00ba \u00e9 uma camada com 10 neur\u00f4nios correspondente as 10 classes dos n\u00faemros, com softmax","d49c7437":"- Test accuracy: 0.98785716\n- Test accuracy: 0.9885714 maxPooling para de (2,2) para (3,3), epocs =20\n- Test accuracy: 0.9840476 segunda camda  com 40 neuronios, epocs =20\n- Test accuracy: 0.9830952 segunda camada com 25 neuronios, epocs=20\n- Test accuracy: 0.98904765 MaxPooling (3,3), segunda camada com 40 neuronios, epochs=30\n- Test accuracy: 0.98380953 AveragePooling (3,3), segunda camada com 40 neuronios, epochs=30\n- Test accuracy: 0.98714286 Covn 20, Conv 20, AvergePoll (3,3), conv20, conv20, AvgPool (3,3), epochs=30\n- Test accuracy: 0.9885714 Covn 32, Conv 64, MaxPoll (2,2), conv128, conv256, AvgPool (2,2), epochs=30\n- Test accuracy: 0.98833334 Covn 32, Conv 64, MaxPool (2,2), conv64, conv64, MaxPool (2,2), dense, dense epochs=30\n- Test accuracy: 0.99142855 Covn 32 (2), Conv 64(2), MaxPool (2,2), conv64(2), conv64(2), AvgPool (2,2), Conv32(2), MaxPool(2,2), dense epochs=30","4396b266":"Com ru\u00eddo, percebemos que a acur\u00e1cia dos exemplos de valida\u00e7\u00e3o caiu, mas muito menos que o modelo MLP cl\u00e1ssico (ver exemplo de MLP).\nUm modelo Convolucional (CNN) captura melhor regi\u00f5es, ou padr\u00f5es espaciais de pixels, tornando o modelo mais robusto.","1719da12":"# Teste Adicional: Com ru\u00eddo"}}