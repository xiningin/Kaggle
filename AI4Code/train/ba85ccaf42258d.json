{"cell_type":{"23b7382e":"code","5d7ad86a":"code","0a21922b":"code","63f92b95":"code","dbed4ee9":"code","2073922d":"code","8e6ad7d1":"code","817969d0":"code","9d11cb44":"code","23cab06a":"code","6d7d9774":"code","95fbc6bf":"code","0d91b0ea":"code","6fce059b":"code","48cdc1d2":"code","f5bfde16":"code","55b57c17":"code","b525521f":"code","c0a8b429":"code","67735f61":"code","758aec81":"code","df422be7":"code","0d44b7f0":"code","30b0e22a":"code","4a8bb503":"code","b7d60ca1":"code","ffae103b":"code","9bf98d1b":"code","faa2b811":"markdown","46b01f0c":"markdown","1a805a8f":"markdown","27aa66f2":"markdown","2dc8e5e8":"markdown","6894d906":"markdown","a97d8eb7":"markdown","22b7479f":"markdown","7536b83a":"markdown","85952a13":"markdown","4ab2fdea":"markdown","f91075a9":"markdown","8ee24438":"markdown","88ad2852":"markdown","70595b85":"markdown","7fd3a2c5":"markdown","0fe9985f":"markdown","7e781675":"markdown","f95c5953":"markdown","78fc18d4":"markdown","d28ef0db":"markdown","9772ea6a":"markdown","2ed5c817":"markdown","89076d80":"markdown","80955953":"markdown","76456a78":"markdown","208f95b5":"markdown","a4b77f3a":"markdown","b174baf1":"markdown","27bb6d98":"markdown","12fcfe05":"markdown","d4ef3bb9":"markdown"},"source":{"23b7382e":"#First we need to import the numpy library\nimport numpy as np # linear algebra","5d7ad86a":"#1) Create arrays\ndata = np.array([[1, 2], [3, 4]])  # create 2D array\nprint(data)\ndata_complex = np.array([1, 2, 3], dtype = complex) \nprint(data_complex)\n#2) see datatype\nprint(np.dtype(np.int64)) \nprint(np.dtype('i1')) #int8=i1, int16=i2, int64=i4\n#3) shape\nprint(data.shape)\n#4) arange\ndata_arange = np.arange(15) #one dimentional array\nprint(data_arange)\n#5) reshape, change shape\nreshaped = data_arange.reshape((3,5))\nprint(reshaped.shape)\n#6) itemsize : length of each element of array in bytes\nprint(reshaped.itemsize)","0a21922b":"#1) empty : array of random values (not initialized)\nempty = np.empty([2,3]) #Default dtype is float\nprint(empty) \n#2) zeros : \nzeros = np.zeros([2,3], dtype = int)\nprint(zeros)\n#3) ones : \nones = np.ones([2,3], dtype = int)\nprint(ones)\n#4) create based on exising list\nlist_data = [1,2,3] \nnp_data = np.asarray(list_data)\nprint(np_data)\n#5) create based on exising tuple\ntuple_data = (1,2,3,5) \nnp_data_tuple = np.asarray(tuple_data)\nprint(np_data_tuple)\n#6) from buffer\nstr_data = 'String date'.encode()\nnp_str = np.frombuffer(str_data, dtype = 'S1') \nprint(np_str)\n#7) range func\nrange_data = np.asarray(range(5))\nprint(range_data)\n#8) linspace : eg -> linspace(start, stop, num, endpoint, retstep, dtype)\nlinspace_data = np.linspace(10,20,5) \nprint(linspace_data)\nlinspace_data_1 = np.linspace(1,2,5, retstep = True)\nprint(linspace_data_1)\n#9) logspace : numbers that are evenly spaced on a log scale (numpy.logspace(start, stop, num, endpoint, base, dtype)) \nlog_data = np.logspace(1.0, 2.0, num = 10) \nprint(log_data)","63f92b95":"#1) slice :  slice(start:stop:step) \ndata = np.arange(10) \nsliced = slice(2,7,2) \nprint(data)\nprint(data[sliced])\n#2) same above with array with colon\ndata = np.arange(10) \nsliced_index = data[2:7:2]\nprint(sliced_index)\n#3) few indexed operations\ndata = np.array([[1,2,3],[3,4,5],[4,5,6]]) \nprint('Original array is:') \nprint(data)   \n# this returns array of items in the second column \nprint('The items in the second column are:')  \nprint(data[...,1]) \n# Now we will slice all items from the second row \nprint('The items in the second row are:') \nprint(data[1,...]) \n# Now we will slice all items from column 1 onwards \nprint('The items column 1 onwards are:') \nprint(data[...,1:])","dbed4ee9":"#First we need to import the pandas library\nimport pandas as pd\nimport numpy as np","2073922d":"#### 1) Series(One dimentinal array)[^](#Series)<a id=\"Series\" ><\/a><br>###Create Series\n#1) list\nlist_series = pd.Series(list('abcdef'))\nprint(list_series)\n#2) ndarray\narr_series = pd.Series(np.array([\"one\",\"two\"]))\nprint(arr_series)\n#3) dict\ndict_series = pd.Series([120,230],index=[\"one\",\"two\"])\nprint(dict_series)\n#4) scalar\nscalar_series = pd.Series(3.,index=[\"a\",\"b\",\"c\"])\nprint(scalar_series)","8e6ad7d1":"#### Access data of a series\nprint(dict_series[1])  # index\nprint(scalar_series[0:1]) # index range\nprint(dict_series.loc['one']) # index name\nprint(list_series.iloc[2]) # index position","817969d0":"###Create Data Frames\n#1) list\ndata_list = {'city':[\"London\",\"Sydney\"],'year':[2001,2005]}\nlist_df = pd.DataFrame(data_list)\nprint(list_df)\n#2) dict\ndict_data = {'London':{2001:100},'Sydney':{2005:200}}\ndict_df = pd.DataFrame(dict_data)\nprint(dict_df)\n#3) Series\nseries_data = pd.Series([120,230],index=[\"one\",\"two\"])\nseries_df = pd.DataFrame({'value':series_data})\nprint(series_df)\n#4) narray\narray_data = np.array([2001,2005,2006])\narr_df = pd.DataFrame({'year':array_data})\nprint(arr_df)\n#4) dataframe\ndf_data = pd.DataFrame({'year':array_data})\ndf_df = pd.DataFrame(array_data)\nprint(df_df)","9d11cb44":"#Using above data frames \n#View Data\nprint(list_df.city) # specific column\nlist_df.describe # whole dataset \nprint(arr_df.head(1)) #top records \nprint(arr_df.index) #list indexs\nprint(dict_df.columns)  #list columns\nprint(list_df['year'])  #specific column by name give column\nprint(dict_df.loc[2001])  #view by key gives row\nprint(dict_df.iloc[0:1])  #view by index gives rows\nprint(dict_df.iat[1,1])  #view by index gives value\nprint(list_df[list_df['year']>2003])  #view by condition, column greater than a value","23cab06a":"import pandas as pd\ndf = pd.DataFrame({'col1':{2001:100,2002:300},'col2':{2002:200}})\nprint(\"df : \\n\",df)\ndf_droped  = df.dropna()\nprint(\"droped df : \\n\",df_droped)","6d7d9774":"import pandas as pd\ndf = pd.DataFrame({'col1':{2001:100,2002:300},'col2':{2002:200}})\nprint(\"df : \\n\",df)\ndf_filled  = df.fillna(0)\nprint(\"filled df : \\n\",df_filled)","95fbc6bf":"import pandas as pd\ndf_movie_rating = pd.DataFrame({'movie 1':[5,4,3,3,2,1],'movie 2':[4,2,1,2,3,5]},\n                              index=['Tom','Jeff','Pterm','Ann','Ted','Paul'])\ndf_movie_rating","0d91b0ea":"def movie_grade(rating):\n    if rating==5:\n        return 'A'\n    if rating==4:\n        return 'B'\n    if rating==3:\n        return 'C'\n    else:\n        return 'F'\n\nprint(movie_grade(4))\n\ndf_movie_rating.applymap(movie_grade)","6fce059b":"import pandas as pd\ndf_test_scores = pd.DataFrame({'test 1':[98,89,34,23,45],'test 2':[23,34,50,76,80]}\n                            ,index=['Sam','Ann','Tom','Fed','Jef'])\ndf_test_scores","48cdc1d2":"print(\"max : \",df_test_scores.max())\nprint(\"min : \",df_test_scores.min())\nprint(\"mean : \",df_test_scores.mean())\nprint(\"std : \",df_test_scores.std())","f5bfde16":"df_names = pd.DataFrame({'first':['George','Bill','Ronald','Jimmy','George'],\n                        'last':['Bush','Clienton','Regon','Carter','Washington']})\ndf_names","55b57c17":"df_names_grouped = df_names.groupby('first')\ndf_names_grouped.get_group('George')","b525521f":"df_names.sort_values('first') # indexes will remain same unless you are re indexing","c0a8b429":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\nrandomNumbers = np.random.rand(10)\nprint(randomNumbers)\nstyle.use('ggplot')\nplt.plot(randomNumbers,'g',label='line one',linewidth=2)\nplt.xlabel('Range')\nplt.ylabel('Numbers')\nplt.title('Random number plot')\nplt.legend()\nplt.show()","67735f61":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\nweb_customers_monday = [12,34,5,232,232,232,53,5,64,34]\nweb_customers_tuesday = [3,23,12,21,500,54,34,65,87,92]\nweb_customers_wednesday = [32,82,23,22,332,242,153,73,12,23]\ntime_hrs = [2,4,6,7,8,10,12,15,18,20]\nstyle.use('ggplot')\nplt.plot(time_hrs,web_customers_monday,'r',label='monday',linewidth=1)\nplt.plot(time_hrs,web_customers_tuesday,'g',label='tuesday',linewidth=1.2)\nplt.plot(time_hrs,web_customers_wednesday,'b',label='wednesday',linewidth=1.5)\nplt.title('Web site traffic')\nplt.xlabel('Hrs')\nplt.ylabel('Number of users')\nplt.legend()\nplt.show()","758aec81":"#subplot(row,cloum,position)\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\nweb_customers_monday = [12,34,5,232,232,232,53,5,64,34]\nweb_customers_tuesday = [3,23,12,21,500,54,34,65,87,92]\nweb_customers_wednesday = [32,82,23,22,332,242,153,73,12,23]\ntime_hrs = [2,4,6,7,8,10,12,15,18,20]\nstyle.use('ggplot')\nplt.figure(figsize=(8,4))\nplt.subplots_adjust(hspace=1,wspace=1)\nplt.subplot(2,2,1)\nplt.title('Monday')\nplt.plot(time_hrs,web_customers_monday,'r',label='monday',linewidth=1,linestyle='-')\nplt.subplot(2,2,2)\nplt.title('Tuesday')\nplt.plot(time_hrs,web_customers_tuesday,'g',label='tuesday',linewidth=1.2)\nplt.subplot(2,2,3)\nplt.title('Wednesday')\nplt.plot(time_hrs,web_customers_wednesday,'b',label='wednesday',linewidth=1.5)\nplt.xlabel('Hrs')\nplt.ylabel('Number of users')\nplt.show()","df422be7":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\nweb_customers = [12,34,5,232,232,232,53,5,64,34]\ntime_hrs = [2,4,6,7,8,10,12,15,18,20]\nstyle.use('ggplot')\nplt.plot(time_hrs,web_customers,alpha=0.4)\nplt.title('Web site traffic')\nplt.xlabel('Hrs')\nplt.ylabel('Number of users')\nplt.show()","0d44b7f0":"import matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\n#Alpha for line transparency\nweb_customers = [12,34,10,232,200,180,53,5,64,34]\ntime_hrs = [2,4,6,7,8,10,12,15,18,20]\nstyle.use('ggplot')\nplt.plot(time_hrs,web_customers,alpha=0.7)\nplt.title('Web site traffic')\nplt.xlabel('Hrs')\nplt.ylabel('Number of users')\n#plt.annotate('annotation text','ha=horizontal align',va='vertical align',xytext=text position,\n#xy=arrow position,arrowprops=properties of arrow)\nplt.annotate('Max',ha='center',va='bottom',xytext=(5,232),xy=(7,232),arrowprops={'facecolor':'green'})\nplt.annotate('Min',ha='center',va='bottom',xytext=(13,5),xy=(15,5),arrowprops={'facecolor':'green'})\n\nplt.show()","30b0e22a":"#Histogram\nfrom sklearn.datasets import load_boston\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n%matplotlib inline\n\nbostan_real_state_data = load_boston()\n#print(bostan_real_state_data.DESCR)\nx_axis = bostan_real_state_data.data\ny_axis = bostan_real_state_data.target\nstyle.use('ggplot')\nplt.figure(figsize=(8,8))\nplt.hist(y_axis,bins=50)\nplt.xlabel('price')\nplt.ylabel('number of houses')\nplt.show()","4a8bb503":"#Scatter plot\nstyle.use('ggplot')\nplt.figure(figsize=(6,6))\nplt.scatter(x_axis[:,5],y_axis)\nplt.show()","b7d60ca1":"#Heat Map\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nflight_data = sns.load_dataset('flights')\n#flight_data.head()\nflight_data = flight_data.pivot('month','year','passengers')\nsns.heatmap(flight_data)","ffae103b":"#Pie Charts\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\njob_data = ['40','20','12','23','15']\nlabels = ['IT','Finace','marketing','Admin','HR']\nexplode = (0.05,0.04,0,0,0)  #spilit the chart\n#autopct= percent value embedded\nplt.pie(job_data,labels=labels,explode=explode,autopct='%1.1f%%',startangle=70)\nplt.axis('equal') # equal size chart\nplt.show()\n","9bf98d1b":"import numpy as np\nimport matplotlib.pyplot as plt\n\n# example data\nx = np.arange(0.1, 4, 0.5)\ny = np.exp(-x)\n\n# example variable error bar values\nyerr = 0.1 + 0.2*np.sqrt(x)\nxerr = 0.1 + yerr\n\n# First illustrate basic pyplot interface, using defaults where possible.\nplt.figure()\nplt.errorbar(x, y, xerr=0.2, yerr=0.4)\nplt.title(\"Simplest errorbars, 0.2 in x, 0.4 in y\")\nplt.show()","faa2b811":"### 1) Data Structures[^](#DataStructures)<a id=\"DataStructures\" ><\/a><br>\n\n1. Series - labled 1D array\n2. Data Frames - \n3. Panel - 3 dimensional\n4. Panel 4D - 4 dimensional","46b01f0c":"#### 2) Scatter (scatter)[^](#scatter)<a id=\"scatter\" ><\/a><br>","1a805a8f":"### 2) Multiple plots[^](#MultiplePlots)<a id=\"MultiplePlots\" ><\/a><br>","27aa66f2":"#### 3) Grouping (groupby)[^](#groupby)<a id=\"groupby\" ><\/a><br>","2dc8e5e8":"### 3) Indexing & Slicing[^](#slicing)<a id=\"slicing\" ><\/a><br>","6894d906":"#### 1) Drop missing data[^](#dropna)<a id=\"dropna\" ><\/a><br>","a97d8eb7":"#### 1) Histogram (histogram)[^](#histogram)<a id=\"histogram\" ><\/a><br>","22b7479f":"### Please help by upvoting this kernel if you feel useful. ","7536b83a":"* ### 2) Handle Missing Data[^](#MissingDataHandle)<a id=\"MissingDataHandle\" ><\/a><br>","85952a13":"### 1) Basic operations[^](#BasicOperation)<a id=\"BasicOperation\" ><\/a><br>","4ab2fdea":"is a library consisting of multidimensional array objects and a collection of routines for processing those arrays. Using NumPy, mathematical and logical operations on arrays can be performed.","f91075a9":"### 1) Basic plot[^](#basicplot)<a id=\"basicplot\" ><\/a><br>","8ee24438":"#### 2) Fill missing data[^](#fillna)<a id=\"fillna\" ><\/a><br>","88ad2852":"## 1) Numpy(Numerical Python)[^](#Numpy)<a id=\"Numpy\" ><\/a><br>","70595b85":"### 4) Properties [^](#Properties)<a id=\"Properties\" ><\/a><br>\n\nLine properties\n1. alpha\n2. animated\n\nPlot graphics\n1. line style\n2. line width\n3. marker style","7fd3a2c5":"### 2) Array creations[^](#creation)<a id=\"creation\" ><\/a><br>","0fe9985f":"#### 1) Alpha [^](#Alpha)<a id=\"Alpha\" ><\/a><br>","7e781675":"#### 2) Statistical functions(max,mean,std)[^](#StatFunction)<a id=\"StatFunction\" ><\/a><br>","f95c5953":"## 2) Pandas[^](#Pandas)<a id=\"Pandas\" ><\/a><br>","78fc18d4":"#### 2) Data Frame(Two dimentinal array)[^](#DataFrame)<a id=\"DataFrame\" ><\/a><br>\nlike a spread sheet","d28ef0db":"#### 1) Series(One dimentinal array)[^](#Series)<a id=\"Series\" ><\/a><br>","9772ea6a":"#### 1) Custom Function(applymap)[^](#CustomFunction)<a id=\"CustomFunction\" ><\/a><br>","2ed5c817":"#### 2) Annotation [^](#Annotation)<a id=\"Annotation\" ><\/a><br>","89076d80":"#### 3) Heat Map (heatmap)[^](#heatmap)<a id=\"heatmap\" ><\/a><br>","80955953":"### 1) Types of plots (types)[^](#Types)<a id=\"Types\" ><\/a><br>\n\n1. Histogram\n2. Heat Map\n3. Scatter Plot\n4. Pie Chart\n5. Error Bar","76456a78":"#### 5) Error bar (errorbar)[^](#errorbar)<a id=\"errorbar\" ><\/a><br>\n\nError bars use mainly to identify errors\n","208f95b5":"## 3) matplotlib[^](#matplotlib)<a id=\"matplotlib\" ><\/a><br>","a4b77f3a":"### 3) Sub plots[^](#Subplots)<a id=\"Subplots\" ><\/a><br>","b174baf1":"### 2) Data Operations[^](#DataOperations)<a id=\"DataOperations\" ><\/a><br>","27bb6d98":"#### 4) Sorting (sort_values)[^](#Sorting)<a id=\"Sorting\" ><\/a><br>","12fcfe05":"This note book will guide you quickly for the neccesary funtions to use in data science.\n\n# Contents\n\n1. [Numpy(Numerical Python)](#Numpy)\n    1. [Basic operations](#BasicOperation)\n    2. [Array creation](#creation)\n    3. [Indexing & Slicing](#slicing)\n2. [Pandas](#Pandas)\n    1. [Data Structures](#DataStructures)\n       1. [Series](#Series)\n       2. [Data Frame](#DataFrames)\n    2. [Handle Missing Data](#MissingDataHandle)\n        1. [Drop missing data](#dropna)\n        2. [Fill missing data](#fillna)\n    3. [Data Operations](#DataOperations)\n        1. [Custom functions(applymap)](#CustomFunction)\n        2. [Statistical functions(max,mean,std)](#StatFunction)\n        3. [Grouping(groupby)](#groupby)\n        4. [Sorting(sort_values)](#Sorting)        \n3. [matplotlib](#matplotlib)\n    1. [Basic Plot](#basicplot)\n    2. [Multiple plots](#MultiplePlots)\n    3. [Subplots](#Subplots)\n    4. [Properties](#Properties)\n        1. [Alpha](#Alpha)\n        2. [Annotation](#Annotation)\n    5. [Types of plots](#Types)\n        1. [histogram](#histogram)\n        2. [scatter](#scatter)\n        3. [heatmap](#heatmap)\n        3. [pie](#pie)\n        4. [errorbar](#errorbar)","d4ef3bb9":"#### 4) Pie chart (pie)[^](#pie)<a id=\"pie\" ><\/a><br>\n"}}