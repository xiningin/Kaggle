{"cell_type":{"10415f0c":"code","f30a5768":"code","e5b4f1d3":"code","a9d13392":"code","eb6b7322":"code","aa11ae99":"code","21b158ff":"code","4ba702e8":"code","54ac3b7e":"code","364123e2":"code","a9bf490e":"code","a807a955":"code","088bdd9c":"code","5b2d7645":"code","1af50a8a":"code","0f7735de":"code","07cad927":"code","35570a67":"code","9ad12fb9":"code","15b76225":"code","8616d886":"code","3a7723b4":"code","678e91fa":"code","c4419876":"code","036ea5dc":"code","d7960e92":"code","761a64ea":"code","8c4e5289":"code","521d2731":"code","066ae99f":"code","cbb3c7e2":"code","1a0f8e67":"code","aeed4f74":"code","26e33dd6":"code","4e4e6d9f":"code","a42dd0b8":"code","9ec3fde6":"code","8b5487cc":"code","8d6eecfa":"code","5f44df90":"code","deaf72a5":"code","ab9c81a4":"code","860a660b":"code","05beff63":"code","8095e2aa":"code","815a08ce":"code","74259850":"code","0df935c6":"code","74cb3b66":"code","0260b829":"code","b0952d81":"code","de71378c":"code","af7ca782":"code","f60f9629":"code","2e60c8f9":"code","00a9f6da":"code","de26a2c3":"code","58713576":"code","e03df89b":"code","d7f8e6fa":"code","5e3dbb15":"code","273bd0c3":"code","7d58d14d":"code","bee6e012":"code","d2057828":"code","e4960321":"code","d28b337b":"code","6edf72c8":"code","c5d639c4":"code","c964f539":"code","1d5fae9a":"markdown","d0bedd83":"markdown","0d6f522a":"markdown","957c5494":"markdown","ed387919":"markdown","7a054f92":"markdown","28e5a1e9":"markdown","782f2e42":"markdown","6f14b7af":"markdown","bb958e00":"markdown","21313376":"markdown","d5348d1e":"markdown","46e2dadb":"markdown","56d8f9bd":"markdown","235d6b70":"markdown","a0b15fe4":"markdown","584b1e67":"markdown","1271946a":"markdown","a32c2455":"markdown","d151779f":"markdown","d8e165f0":"markdown","a4a983d9":"markdown","a01d7a4e":"markdown","cc1434dd":"markdown","615c538a":"markdown","4e24e40d":"markdown","3a7ae233":"markdown","09947002":"markdown","5c424eb7":"markdown","15450dd7":"markdown","0a0bd24b":"markdown","45429ad0":"markdown","b57e972b":"markdown","5a707f6e":"markdown","830ee502":"markdown","f354b97e":"markdown","c69eccee":"markdown","f8336a0e":"markdown","692e4911":"markdown","318f6125":"markdown","69a7654c":"markdown","53488617":"markdown","006c57c6":"markdown"},"source":{"10415f0c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f30a5768":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport sqlite3\nimport csv\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom wordcloud import WordCloud\nimport re\nimport os\nfrom sqlalchemy import create_engine # database connection\nimport datetime as dt\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.snowball import SnowballStemmer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import f1_score,precision_score,recall_score\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom skmultilearn.adapt import mlknn\nfrom skmultilearn.problem_transform import ClassifierChain\nfrom skmultilearn.problem_transform import BinaryRelevance\nfrom skmultilearn.problem_transform import LabelPowerset\nfrom sklearn.naive_bayes import GaussianNB\nfrom datetime import datetime","e5b4f1d3":"#Creating db file from csv\n#Learn SQL: https:\/\/www.w3schools.com\/sql\/default.asp\nif not os.path.isfile('train.db'):\n    start = datetime.now()\n    disk_engine = create_engine('sqlite:\/\/\/train.db')\n    start = dt.datetime.now()\n    chunksize = 180000\n    j = 0\n    index_start = 1\n    for df in pd.read_csv(\n        '..\/input\/facebook-recruiting-iii-keyword-extraction\/Train.zip', \n        names=['Id', 'Title', 'Body', 'Tags'], chunksize=chunksize, \n        iterator=True, encoding='utf-8'\n    ):\n        df.index += index_start\n        j += 1\n        print('{} rows'.format(j*chunksize))\n        df.to_sql('data', disk_engine, if_exists = 'append')\n        index_start = df.index[-1] + 1\n    print(\"Time taken to run this cell: \", datetime.now() - start)","a9d13392":"if os.path.isfile('train.db'):\n    start = datetime.now()\n    con = sqlite3.connect('train.db')\n    num_rows = pd.read_sql_query(\"\"\"SELECT count(*) FROM data\"\"\", con)\n    print(\"Number of rows in the database: \",\"\\n\",num_rows['count(*)'].values[0])\n    con.close()  # Always remember to close the database\n    print(\"Time taken to count the number of rows: \", datetime.now() - start)\nelse:\n    print(\"Please download the train.db file from drive or run the above cell to genarate train.db file\")","eb6b7322":"if os.path.isfile('train.db'):\n    start = datetime.now() \n    con = sqlite3.connect('train.db')\n    df_no_dup = pd.read_sql_query('SELECT Title, Body, Tags, COUNT(*) as cnt_dup FROM data GROUP BY Title, Body, Tags', con)\n    con.close()\n    print(\"Time taken to run this cell :\", datetime.now() - start)\nelse:\n    print(\"Please download the train.db file from drive or run the first to genarate train.db file\")","aa11ae99":"df_no_dup.head()\n# we can observe that there are duplicates","21b158ff":"print(\"number of duplicate questions :\", num_rows['count(*)'].values[0]- df_no_dup.shape[0], \"(\",(1-((df_no_dup.shape[0])\/(num_rows['count(*)'].values[0])))*100,\"% )\")","4ba702e8":"# number of times each question appeared in our database\ndf_no_dup.cnt_dup.value_counts()","54ac3b7e":"start = datetime.now()\ndf_no_dup[\"tag_count\"] = df_no_dup[\"Tags\"].apply(lambda text: len(text.split(\" \")) \n                                                 if text != None \n                                                 else 0 \n)\n# adding a new feature number of tags per question\nprint(\"Time taken to run this cell :\", datetime.now() - start)\ndf_no_dup.head()","364123e2":"# distribution of number of tags per question\ndf_no_dup.tag_count.value_counts()","a9bf490e":"#Creating a new database with no duplicates\nif not os.path.isfile('..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/train_no_dup.db'):\n    disk_dup = create_engine(\"sqlite:\/\/\/train_no_dup.db\")\n    no_dup = pd.DataFrame(df_no_dup, columns=['Title', 'Body', 'Tags'])\n    no_dup.to_sql('no_dup_train',disk_dup)","a807a955":"# This method seems more appropriate to work with this much data.\n# Creating the connection with database file.\nif os.path.isfile('..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/train_no_dup.db'):\n    start = datetime.now()\n    con = sqlite3.connect('..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/train_no_dup.db')\n    tag_data = pd.read_sql_query(\"\"\"SELECT Tags FROM no_dup_train\"\"\", con)\n    # Always remember to close the database\n    con.close()\n\n    # Let's now drop unwanted column.\n    tag_data.drop(tag_data.index[0], inplace = True)\n    # Printing first 5 rows from our data frame\n    tag_data.head()\n    print(\"Time taken to run this cell: \", datetime.now() - start)\nelse:\n    print(\"Please download the train.db file from drive or run the above cells to genarate train.db file\")","088bdd9c":"# Importing & Initializing the \"CountVectorizer\" object, which is scikit-learn's bag of words tool.\n# By default 'split()' will tokenize each tag using space.\nvectorizer = CountVectorizer(tokenizer = lambda x: x.split())\n\n# fit_transform() does two functions\n# First, it fits the model & learns the vocabulary\n# Second, it transforms our training data into feature vectors. \n# The input to fit_transform should be a list of strings.\ntag_dtm = vectorizer.fit_transform(tag_data['Tags'])","5b2d7645":"print(\"Number of data points :\", tag_dtm.shape[0])\nprint(\"Number of unique tags :\", tag_dtm.shape[1])","1af50a8a":"#'get_feature_name()' gives us the vocabulary.\ntags = vectorizer.get_feature_names()\n#Lets look at the tags we have.\nprint(\"Some of the tags we have :\", tags[:10])","0f7735de":"# https:\/\/stackoverflow.com\/questions\/15115765\/how-to-access-sparse-matrix-elements\n#Lets now store the document term matrix in a dictionary.\nfreqs = tag_dtm.sum(axis=0).A1\nresult = dict(zip(tags, freqs))","07cad927":"#Saving this dictionary to csv files.\nif not os.path.isfile('..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/tag_counts_dict_dtm.csv'):\n    with open('tag_counts_dict_dtm.csv', 'w') as csv_file:\n        writer = csv.writer(csv_file)\n        for key, value in result.items():\n            writer.writerow([key, value])\ntag_df = pd.read_csv(\"..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/tag_counts_dict_dtm.csv\", names=['Tags', 'Counts'])\ntag_df.head()","35570a67":"tag_df_sorted = tag_df.sort_values(['Counts'], ascending=False)\ntag_counts = tag_df_sorted['Counts'].values","9ad12fb9":"plt.plot(tag_counts[0:10000])\nplt.title('first 10k tags: Distribution of number of times tag appeared questions')\nplt.grid()\nplt.xlabel(\"Tag number\")\nplt.ylabel(\"Number of times tag appeared\")\nplt.show()\nprint(len(tag_counts[0:10000:25]), tag_counts[0:10000:25])","15b76225":"plt.plot(tag_counts)\nplt.title(\"Distribution of number of times tag appeared questions\")\nplt.grid()\nplt.xlabel(\"Tag number\")\nplt.ylabel(\"Number of times tag appeared\")\nplt.show()","8616d886":"plt.plot(tag_counts[0:1000])\nplt.title('first 1k tags: Distribution of number of times tag appeared questions')\nplt.grid()\nplt.xlabel(\"Tag number\")\nplt.ylabel(\"Number of times tag appeared\")\nplt.show()\nprint(len(tag_counts[0:1000:5]), tag_counts[0:1000:5])","3a7723b4":"plt.plot(tag_counts[0:500])\nplt.title('first 500 tags: Distribution of number of times tag appeared questions')\nplt.grid()\nplt.xlabel(\"Tag number\")\nplt.ylabel(\"Number of times tag appeared\")\nplt.show()\nprint(len(tag_counts[0:500:5]), tag_counts[0:500:5])","678e91fa":"# plt.plot(tag_counts[0:100], c='b')\n# plt.scatter(x=list(range(0,100,5)), y=tag_counts[0:100:5], c='orange', label=\"quantiles with 0.05 intervals\")\n# # Quantiles with 0.25 difference\n# plt.scatter(x=list(range(0,100,25)), y=tag_counts[0:100:25], c='m', label = \"quantiles with 0.25 intervals\")\n\n# for x,y in zip(list(range(0,100,25)), tag_counts[0:100:25]):\n#     plt.annotate(s=\"({} , {})\".format(x,y), xy=(x,y), xytext=(x-0.05, y+500))\n\n# plt.title('First 100 tags: Distribution of number of times tag appeared questions')\n# plt.grid()\n# plt.xlabel(\"Tag number\")\n# plt.ylabel(\"Number of times tag appeared\")\n# plt.legend()\n# plt.show()\n# print(len(tag_counts[0:100:5]), tag_counts[0:100:5]) ","c4419876":"# Store tags greater than 10K in one list\nlst_tags_gt_10k = tag_df[tag_df.Counts>10000].Tags\n#Print the length of the list\nprint ('{} Tags are used more than 10000 times'.format(len(lst_tags_gt_10k)))\n# Store tags greater than 100K in one list\nlst_tags_gt_100k = tag_df[tag_df.Counts>100000].Tags\n#Print the length of the list.\nprint ('{} Tags are used more than 100000 times'.format(len(lst_tags_gt_100k)))","036ea5dc":"#Storing the count of tag in each question in list 'tag_count'\ntag_quest_count = tag_dtm.sum(axis=1).tolist()\n#Converting list of lists into single list, we will get [[3], [4], [2], [2], [3]] and we are converting this to [3, 4, 2, 2, 3]\ntag_quest_count=[int(j) for i in tag_quest_count for j in i]\nprint ('We have total {} datapoints.'.format(len(tag_quest_count)))\n\nprint(tag_quest_count[:5])","d7960e92":"print( \"Maximum number of tags per question: %d\"%max(tag_quest_count))\nprint( \"Minimum number of tags per question: %d\"%min(tag_quest_count))\nprint( \"Avg. number of tags per question: %f\"% ((sum(tag_quest_count)*1.0)\/len(tag_quest_count)))","761a64ea":"sns.countplot(tag_quest_count, palette='gist_rainbow')\nplt.title(\"Number of tags in the questions \")\nplt.xlabel(\"Number of Tags\")\nplt.ylabel(\"Number of questions\")\nplt.show()","8c4e5289":"# Ploting word cloud\nstart = datetime.now()\n\n# Lets first convert the 'result' dictionary to 'list of tuples'\ntup = dict(result.items())\n#Initializing WordCloud using frequencies of tags.\nwordcloud = WordCloud(    background_color='black',\n                          width=1600,\n                          height=800,\n                    ).generate_from_frequencies(tup)\n\nfig = plt.figure(figsize=(30,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.tight_layout(pad=0)\nfig.savefig(\"tag.png\")\nplt.show()\nprint(\"Time taken to run this cell :\", datetime.now() - start)","521d2731":"# i=np.arange(30)\n# tag_df_sorted.head(30).plot(kind='bar')\n# plt.title('Frequency of top 20 tags')\n# plt.xticks(i, tag_df_sorted['Tags'])\n# plt.xlabel('Tags')\n# plt.ylabel('Counts')\n# plt.show()","066ae99f":"def striphtml(data):\n    cleanr = re.compile('<.*?>')\n    cleantext = re.sub(cleanr, ' ', str(data))\n    return cleantext\nstop_words = set(stopwords.words('english'))\nstemmer = SnowballStemmer(\"english\")","cbb3c7e2":"#http:\/\/www.sqlitetutorial.net\/sqlite-python\/create-tables\/\ndef create_connection(db_file):\n    \"\"\" create a database connection to the SQLite database\n        specified by db_file\n    :param db_file: database file\n    :return: Connection object or None\n    \"\"\"\n    try:\n        conn = sqlite3.connect(db_file)\n        return conn\n    except Error as e:\n        print(e)\n \n    return None\n\ndef create_table(conn, create_table_sql):\n    \"\"\" create a table from the create_table_sql statement\n    :param conn: Connection object\n    :param create_table_sql: a CREATE TABLE statement\n    :return:\n    \"\"\"\n    try:\n        c = conn.cursor()\n        c.execute(create_table_sql)\n    except Error as e:\n        print(e)\n        \ndef checkTableExists(dbcon):\n    cursr = dbcon.cursor()\n    str = \"select name from sqlite_master where type='table'\"\n    table_names = cursr.execute(str)\n    print(\"Tables in the databse:\")\n    tables =table_names.fetchall() \n    print(tables[0][0])\n    return(len(tables))\n\ndef create_database_table(database, query):\n    conn = create_connection(database)\n    if conn is not None:\n        create_table(conn, query)\n        checkTableExists(conn)\n    else:\n        print(\"Error! cannot create the database connection.\")\n    conn.close()\n\nsql_create_table = \"\"\"CREATE TABLE IF NOT EXISTS QuestionsProcessed (question text NOT NULL, code text, tags text, words_pre integer, words_post integer, is_code integer);\"\"\"\ncreate_database_table(\"Processed.db\", sql_create_table)","1a0f8e67":"# http:\/\/www.sqlitetutorial.net\/sqlite-delete\/\n# https:\/\/stackoverflow.com\/questions\/2279706\/select-random-row-from-a-sqlite-table\nstart = datetime.now()\nread_db = '..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/train_no_dup.db'\nwrite_db = '..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/Processed.db'\nif os.path.isfile(read_db):\n    conn_r = create_connection(read_db)\n    if conn_r is not None: \n        reader =conn_r.cursor() \n        reader.execute(\"SELECT Title, Body, Tags From no_dup_train ORDER BY RANDOM() LIMIT 1000000;\")\n\nif os.path.isfile(write_db): \n    conn_w = create_connection(write_db)\n    if conn_w is not None: \n        tables = checkTableExists(conn_w)\n        writer =conn_w.cursor() \n        if tables != 0: \n            writer.execute(\"DELETE FROM QuestionsProcessed WHERE 1\")\n            print(\"Cleared All the rows\")\nprint(\"Time taken to run this cell :\", datetime.now() - start) ","aeed4f74":"#http:\/\/www.bernzilla.com\/2008\/05\/13\/selecting-a-random-row-from-an-sqlite-table\/\n\nstart = datetime.now()\npreprocessed_data_list=[]\nreader.fetchone()\nquestions_with_code=0\nlen_pre=0\nlen_post=0\nquestions_proccesed = 0\nfor row in reader:\n    is_code = 0\n    title, question, tags = row[0], row[1], row[2]\n    if '<code>' in question:\n        questions_with_code+=1\n        is_code = 1\n    x = len(question)+len(title)\n    len_pre+=x\n\n    code = str(re.findall(r'<code>(.*?)<\/code>', question, flags=re.DOTALL))\n\n    question=re.sub('<code>(.*?)<\/code>', '', question, flags=re.MULTILINE|re.DOTALL)\n    question=striphtml(question.encode('utf-8'))\n\n    title=title.encode('utf-8')\n\n    question=str(title)+\" \"+str(question)\n    question=re.sub(r'[^A-Za-z]+',' ',question)\n    words=word_tokenize(str(question.lower()))\n\n    #Removing all single letter and and stopwords from question exceptt for the letter 'c'\n    question=' '.join(str(stemmer.stem(j)) for j in words if j not in stop_words and (len(j)!=1 or j=='c'))\n\n    len_post+=len(question)\n    tup = (question,code,tags,x,len(question),is_code)\n    questions_proccesed += 1\n    writer.execute(\"insert into QuestionsProcessed(question,code,tags,words_pre,words_post,is_code) values (?,?,?,?,?,?)\",tup)\n    if (questions_proccesed%100000==0):\n        print(\"number of questions completed=\",questions_proccesed)\n\nno_dup_avg_len_pre=(len_pre*1.0)\/questions_proccesed\nno_dup_avg_len_post=(len_post*1.0)\/questions_proccesed\n\nprint( \"Avg. length of questions(Title+Body) before processing: %d\"%no_dup_avg_len_pre)\nprint( \"Avg. length of questions(Title+Body) after processing: %d\"%no_dup_avg_len_post)\nprint (\"Percent of questions containing code: %d\"%((questions_with_code*100.0)\/questions_proccesed))\n\nprint(\"Time taken to run this cell :\", datetime.now() - start)","26e33dd6":"# dont forget to close the connections, or else you will end up with locks\nconn_r.commit()\nconn_w.commit()\nconn_r.close()\nconn_w.close()","4e4e6d9f":"# dont forget to close the connections, or else you will end up with locks\nconn_r.commit()\nconn_w.commit()\nconn_r.close()\nconn_w.close()","a42dd0b8":"#Taking 1 Million entries to a dataframe.\nwrite_db = 'Processed.db'\nif os.path.isfile(write_db):\n    conn_r = create_connection(write_db)\n    if conn_r is not None:\n        preprocessed_data = pd.read_sql_query(\"\"\"SELECT question, Tags FROM QuestionsProcessed\"\"\", conn_r)\nconn_r.commit()\nconn_r.close()","9ec3fde6":"preprocessed_data.head()","8b5487cc":"preprocessed_data.head()","8d6eecfa":"# binary='true' will give a binary vectorizer\nvectorizer = CountVectorizer(tokenizer = lambda x: x.split(), binary='true')\nmultilabel_y = vectorizer.fit_transform(preprocessed_data['tags'])","5f44df90":"def tags_to_choose(n):\n    t = multilabel_y.sum(axis=0).tolist()[0]\n    sorted_tags_i = sorted(range(len(t)), key=lambda i: t[i], reverse=True)\n    multilabel_yn=multilabel_y[:,sorted_tags_i[:n]]\n    return multilabel_yn\n\ndef questions_explained_fn(n):\n    multilabel_yn = tags_to_choose(n)\n    x= multilabel_yn.sum(axis=1)\n    return (np.count_nonzero(x==0))","deaf72a5":"questions_explained = []\ntotal_tags=multilabel_y.shape[1]\ntotal_qs=preprocessed_data.shape[0]\nfor i in range(500, total_tags, 100):\n    questions_explained.append(np.round(((total_qs-questions_explained_fn(i))\/total_qs)*100,3))","ab9c81a4":"fig, ax = plt.subplots()\nax.plot(questions_explained)\nxlabel = list(500+np.array(range(-50,450,50))*50)\nax.set_xticklabels(xlabel)\nplt.xlabel(\"Number of tags\")\nplt.ylabel(\"Number Questions coverd partially\")\nplt.grid()\nplt.show()\n# you can choose any number of tags based on your computing power, minimun is 50(it covers 90% of the tags)\nprint(\"with \",5500,\"tags we are covering \",questions_explained[50],\"% of questions\")","860a660b":"multilabel_yx = tags_to_choose(5500)\nprint(\"number of questions that are not covered :\", questions_explained_fn(5500),\"out of \", total_qs)","05beff63":"print(\"Number of tags in sample :\", multilabel_y.shape[1])\nprint(\"number of tags taken :\", multilabel_yx.shape[1],\"(\",(multilabel_yx.shape[1]\/multilabel_y.shape[1])*100,\"%)\")","8095e2aa":"total_size=preprocessed_data.shape[0]\ntrain_size=int(0.80*total_size)\n\nx_train=preprocessed_data.head(train_size)\nx_test=preprocessed_data.tail(total_size - train_size)\n\ny_train = multilabel_yx[0:train_size,:]\ny_test = multilabel_yx[train_size:total_size,:]","815a08ce":"print(\"Number of data points in train data :\", y_train.shape)\nprint(\"Number of data points in test data :\", y_test.shape)","74259850":"start = datetime.now()\nvectorizer = TfidfVectorizer(min_df=0.00009, max_features=200000, smooth_idf=True, norm=\"l2\", \\\n                             tokenizer = lambda x: x.split(), sublinear_tf=False, ngram_range=(1,3))\nx_train_multilabel = vectorizer.fit_transform(x_train['question'])\nx_test_multilabel = vectorizer.transform(x_test['question'])\nprint(\"Time taken to run this cell :\", datetime.now() - start)","0df935c6":"print(\"Dimensions of train data X:\",x_train_multilabel.shape, \"Y :\",y_train.shape)\nprint(\"Dimensions of test data X:\",x_test_multilabel.shape,\"Y:\",y_test.shape)","74cb3b66":"# https:\/\/www.analyticsvidhya.com\/blog\/2017\/08\/introduction-to-multi-label-classification\/\n#https:\/\/stats.stackexchange.com\/questions\/117796\/scikit-multi-label-classification\n# classifier = LabelPowerset(GaussianNB())\n\"\"\"\nfrom skmultilearn.adapt import MLkNN\nclassifier = MLkNN(k=21)\n\n# train\nclassifier.fit(x_train_multilabel, y_train)\n\n# predict\npredictions = classifier.predict(x_test_multilabel)\nprint(accuracy_score(y_test,predictions))\nprint(metrics.f1_score(y_test, predictions, average = 'macro'))\nprint(metrics.f1_score(y_test, predictions, average = 'micro'))\nprint(metrics.hamming_loss(y_test,predictions))\n\n\"\"\"\n# we are getting memory error because the multilearn package \n# is trying to convert the data into dense matrix\n# ---------------------------------------------------------------------------\n#MemoryError                               Traceback (most recent call last)\n#<ipython-input-170-f0e7c7f3e0be> in <module>()\n#----> classifier.fit(x_train_multilabel, y_train)","0260b829":"# this will be taking so much time try not to run it, download the lr_with_equal_weight.pkl file and use to predict\n# This takes about 6-7 hours to run.\nclassifier = OneVsRestClassifier(SGDClassifier(loss='log', alpha=0.00001, penalty='l1'), n_jobs=-1)\nclassifier.fit(x_train_multilabel, y_train)\npredictions = classifier.predict(x_test_multilabel)\n\nprint(\"accuracy :\",metrics.accuracy_score(y_test,predictions))\nprint(\"macro f1 score :\",metrics.f1_score(y_test, predictions, average = 'macro'))\nprint(\"micro f1 scoore :\",metrics.f1_score(y_test, predictions, average = 'micro'))\nprint(\"hamming loss :\",metrics.hamming_loss(y_test,predictions))\nprint(\"Precision recall report :\\n\",metrics.classification_report(y_test, predictions))\n","b0952d81":"from sklearn.externals import joblib\njoblib.dump(classifier, 'lr_with_equal_weight.pkl') ","de71378c":"sql_create_table = \"\"\"CREATE TABLE IF NOT EXISTS QuestionsProcessed (question text NOT NULL, code text, tags text, words_pre integer, words_post integer, is_code integer);\"\"\"\ncreate_database_table(\"Titlemoreweight.db\", sql_create_table)","af7ca782":"# http:\/\/www.sqlitetutorial.net\/sqlite-delete\/\n# https:\/\/stackoverflow.com\/questions\/2279706\/select-random-row-from-a-sqlite-table\n\nread_db = '..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/train_no_dup.db'\nwrite_db = 'Titlemoreweight.db'\ntrain_datasize = 400000\nif os.path.isfile(read_db):\n    conn_r = create_connection(read_db)\n    if conn_r is not None:\n        reader =conn_r.cursor()\n        # for selecting first 0.5M rows\n        reader.execute(\"SELECT Title, Body, Tags From no_dup_train LIMIT 500001;\")\n        # for selecting random points\n        #reader.execute(\"SELECT Title, Body, Tags From no_dup_train ORDER BY RANDOM() LIMIT 500001;\")\n\nif os.path.isfile(write_db):\n    conn_w = create_connection(write_db)\n    if conn_w is not None:\n        tables = checkTableExists(conn_w)\n        writer =conn_w.cursor()\n        if tables != 0:\n            writer.execute(\"DELETE FROM QuestionsProcessed WHERE 1\")\n            print(\"Cleared All the rows\")","f60f9629":"#http:\/\/www.bernzilla.com\/2008\/05\/13\/selecting-a-random-row-from-an-sqlite-table\/\nstart = datetime.now()\npreprocessed_data_list=[]\nreader.fetchone()\nquestions_with_code=0\nlen_pre=0\nlen_post=0\nquestions_proccesed = 0\nfor row in reader:\n    \n    is_code = 0\n    \n    title, question, tags = row[0], row[1], str(row[2])\n    \n    if '<code>' in question:\n        questions_with_code+=1\n        is_code = 1\n    x = len(question)+len(title)\n    len_pre+=x\n    \n    code = str(re.findall(r'<code>(.*?)<\/code>', question, flags=re.DOTALL))\n    \n    question=re.sub('<code>(.*?)<\/code>', '', question, flags=re.MULTILINE|re.DOTALL)\n    question=striphtml(question.encode('utf-8'))\n    \n    title=title.encode('utf-8')\n    \n    # adding title three time to the data to increase its weight\n    # add tags string to the training data\n    \n    question=str(title)+\" \"+str(title)+\" \"+str(title)+\" \"+question\n    \n#     if questions_proccesed<=train_datasize:\n#         question=str(title)+\" \"+str(title)+\" \"+str(title)+\" \"+question+\" \"+str(tags)\n#     else:\n#         question=str(title)+\" \"+str(title)+\" \"+str(title)+\" \"+question\n\n    question=re.sub(r'[^A-Za-z0-9#+.\\-]+',' ',question)\n    words=word_tokenize(str(question.lower()))\n    \n    #Removing all single letter and and stopwords from question exceptt for the letter 'c'\n    question=' '.join(str(stemmer.stem(j)) for j in words if j not in stop_words and (len(j)!=1 or j=='c'))\n    \n    len_post+=len(question)\n    tup = (question,code,tags,x,len(question),is_code)\n    questions_proccesed += 1\n    writer.execute(\"insert into QuestionsProcessed(question,code,tags,words_pre,words_post,is_code) values (?,?,?,?,?,?)\",tup)\n    if (questions_proccesed%100000==0):\n        print(\"number of questions completed=\",questions_proccesed)\n\nno_dup_avg_len_pre=(len_pre*1.0)\/questions_proccesed\nno_dup_avg_len_post=(len_post*1.0)\/questions_proccesed\n\nprint( \"Avg. length of questions(Title+Body) before processing: %d\"%no_dup_avg_len_pre)\nprint( \"Avg. length of questions(Title+Body) after processing: %d\"%no_dup_avg_len_post)\nprint (\"Percent of questions containing code: %d\"%((questions_with_code*100.0)\/questions_proccesed))\n\nprint(\"Time taken to run this cell :\", datetime.now() - start)","2e60c8f9":"# never forget to close the conections or else we will end up with database locks\nconn_r.commit()\nconn_w.commit()\nconn_r.close()\nconn_w.close()","00a9f6da":"if os.path.isfile(write_db):\n    conn_r = create_connection(write_db)\n    if conn_r is not None:\n        reader =conn_r.cursor()\n        reader.execute(\"SELECT question From QuestionsProcessed LIMIT 10\")\n        print(\"Questions after preprocessed\")\n        print('='*100)\n        reader.fetchone()\n        for row in reader:\n            print(row)\n            print('-'*100)\nconn_r.commit()\nconn_r.close()","de26a2c3":"#Taking 0.5 Million entries to a dataframe.\nwrite_db = 'Titlemoreweight.db'\nif os.path.isfile(write_db):\n    conn_r = create_connection(write_db)\n    if conn_r is not None:\n        preprocessed_data = pd.read_sql_query(\"\"\"SELECT question, Tags FROM QuestionsProcessed\"\"\", conn_r)\nconn_r.commit()\nconn_r.close()","58713576":"preprocessed_data.head()","e03df89b":"print(\"number of data points in sample :\", preprocessed_data.shape[0])\nprint(\"number of dimensions :\", preprocessed_data.shape[1])","d7f8e6fa":"vectorizer = CountVectorizer(tokenizer = lambda x: x.split(), binary='true')\nmultilabel_y = vectorizer.fit_transform(preprocessed_data['tags'])","5e3dbb15":"questions_explained = []\ntotal_tags=multilabel_y.shape[1]\ntotal_qs=preprocessed_data.shape[0]\nfor i in range(500, total_tags, 100):\n    questions_explained.append(np.round(((total_qs-questions_explained_fn(i))\/total_qs)*100,3))","273bd0c3":"fig, ax = plt.subplots()\nax.plot(questions_explained)\nxlabel = list(500+np.array(range(-50,450,50))*50)\nax.set_xticklabels(xlabel)\nplt.xlabel(\"Number of tags\")\nplt.ylabel(\"Number Questions coverd partially\")\nplt.grid()\nplt.show()\n# you can choose any number of tags based on your computing power, minimun is 500(it covers 90% of the tags)\nprint(\"with \",5500,\"tags we are covering \",questions_explained[50],\"% of questions\")\nprint(\"with \",500,\"tags we are covering \",questions_explained[0],\"% of questions\")","7d58d14d":"# we will be taking 500 tags\nmultilabel_yx = tags_to_choose(500)\nprint(\"number of questions that are not covered :\", questions_explained_fn(500),\"out of \", total_qs)","bee6e012":"x_train=preprocessed_data.head(train_datasize)\nx_test=preprocessed_data.tail(preprocessed_data.shape[0] - 400000)\n\ny_train = multilabel_yx[0:train_datasize,:]\ny_test = multilabel_yx[train_datasize:preprocessed_data.shape[0],:]","d2057828":"print(\"Number of data points in train data :\", y_train.shape)\nprint(\"Number of data points in test data :\", y_test.shape)","e4960321":"start = datetime.now()\nvectorizer = TfidfVectorizer(min_df=0.00009, max_features=200000, smooth_idf=True, norm=\"l2\", \\\n                             tokenizer = lambda x: x.split(), sublinear_tf=False, ngram_range=(1,3))\nx_train_multilabel = vectorizer.fit_transform(x_train['question'])\nx_test_multilabel = vectorizer.transform(x_test['question'])\nprint(\"Time taken to run this cell :\", datetime.now() - start)","d28b337b":"print(\"Dimensions of train data X:\",x_train_multilabel.shape, \"Y :\",y_train.shape)\nprint(\"Dimensions of test data X:\",x_test_multilabel.shape,\"Y:\",y_test.shape)","6edf72c8":"start = datetime.now()\nclassifier = OneVsRestClassifier(SGDClassifier(loss='log', alpha=0.00001, penalty='l1'), n_jobs=-1)\nclassifier.fit(x_train_multilabel, y_train)\npredictions = classifier.predict (x_test_multilabel)\n\n\nprint(\"Accuracy :\",metrics.accuracy_score(y_test, predictions))\nprint(\"Hamming loss \",metrics.hamming_loss(y_test,predictions))\n\n\nprecision = precision_score(y_test, predictions, average='micro')\nrecall = recall_score(y_test, predictions, average='micro')\nf1 = f1_score(y_test, predictions, average='micro')\n \nprint(\"Micro-average quality numbers\")\nprint(\"Precision: {:.4f}, Recall: {:.4f}, F1-measure: {:.4f}\".format(precision, recall, f1))\n\nprecision = precision_score(y_test, predictions, average='macro')\nrecall = recall_score(y_test, predictions, average='macro')\nf1 = f1_score(y_test, predictions, average='macro')\n \nprint(\"Macro-average quality numbers\")\nprint(\"Precision: {:.4f}, Recall: {:.4f}, F1-measure: {:.4f}\".format(precision, recall, f1))\n\nprint (metrics.classification_report(y_test, predictions))\nprint(\"Time taken to run this cell :\", datetime.now() - start)","c5d639c4":"classifier = joblib.load('..\/input\/d\/elemento\/facebook-recruiting-iii-keyword-extraction\/lr_with_more_title_weight.pkl') ","c964f539":"start = datetime.now()\nclassifier_2 = OneVsRestClassifier(LogisticRegression(penalty='l1'), n_jobs=-1)\nclassifier_2.fit(x_train_multilabel, y_train)\npredictions_2 = classifier_2.predict(x_test_multilabel)\nprint(\"Accuracy :\",metrics.accuracy_score(y_test, predictions_2))\nprint(\"Hamming loss \",metrics.hamming_loss(y_test,predictions_2))\n\n\nprecision = precision_score(y_test, predictions_2, average='micro')\nrecall = recall_score(y_test, predictions_2, average='micro')\nf1 = f1_score(y_test, predictions_2, average='micro')\n \nprint(\"Micro-average quality numbers\")\nprint(\"Precision: {:.4f}, Recall: {:.4f}, F1-measure: {:.4f}\".format(precision, recall, f1))\n\nprecision = precision_score(y_test, predictions_2, average='macro')\nrecall = recall_score(y_test, predictions_2, average='macro')\nf1 = f1_score(y_test, predictions_2, average='macro')\n \nprint(\"Macro-average quality numbers\")\nprint(\"Precision: {:.4f}, Recall: {:.4f}, F1-measure: {:.4f}\".format(precision, recall, f1))\n\nprint (metrics.classification_report(y_test, predictions_2))\nprint(\"Time taken to run this cell :\", datetime.now() - start)","1d5fae9a":"We create a new data base to store the sampled and preprocessed questions","d0bedd83":"#### Performance Metric","0d6f522a":"# Exploring the Data","957c5494":"## Observations\n\n1. There are total 153 tags which are used more than 10000 times.\n2. 14 tags are used more than 100000 times.\n3. Most frequent tag (i.e. c#) is used 331505 times.\n4. Since some tags occur much more frequenctly than others, Micro-averaged F1-score is the appropriate metric for this probelm.","ed387919":"We will sample the number of tags instead considering all of them (due to limitation of computing power)","7a054f92":"#### Converting string Tags to multilable output variables ","28e5a1e9":"#### Saving Preprocessed data to a Database","782f2e42":"#### We consider top 15% tags which covers 99% of the questions","6f14b7af":"#### Selecting 500 Tags","bb958e00":"## Top 20 tags","21313376":"<p style='font-size:18px'><b> Description <\/b><\/p>\n<p>\nStack Overflow is the largest, most trusted online community for developers to learn, share their programming knowledge, and build their careers.<br \/>\n<br \/>\nStack Overflow is something which every programmer use one way or another. Each month, over 50 million developers come to Stack Overflow to learn, share their knowledge, and build their careers. It features questions and answers on a wide range of topics in computer programming. The website serves as a platform for users to ask and answer questions, and, through membership and active participation, to vote questions and answers up or down and edit questions and answers in a fashion similar to a wiki or Digg. As of April 2014 Stack Overflow has over 4,000,000 registered users, and it exceeded 10,000,000 questions in late August 2015. Based on the type of tags assigned to questions, the top eight most discussed topics on the site are: Java, JavaScript, C#, PHP, Android, jQuery, Python and HTML.<br \/>\n<br \/>\n<\/p>","d5348d1e":"### Tags Per Question","46e2dadb":"<ol> \n    <li> Sample 1M data points <\/li>\n    <li> Separate out code-snippets from Body <\/li>\n    <li> Remove Spcial characters from Question title and description (not in code)<\/li>\n    <li> Remove stop words (Except 'C') <\/li>\n    <li> Remove HTML Tags <\/li>\n    <li> Convert all the characters into small letters <\/li>\n    <li> Use SnowballStemmer to stem the words <\/li>\n<\/ol>","56d8f9bd":"## Applying Logistic Regression with OneVsRest Classifier","235d6b70":"## Number of times a tag appeared","a0b15fe4":"<b>Observations:<\/b><br \/>\n1. Maximum number of tags per question: 5\n2. Minimum number of tags per question: 1\n3. Avg. number of tags per question: 2.899\n4. Most of the questions are having 2 or 3 tags","584b1e67":"Refer: https:\/\/www.kaggle.com\/c\/facebook-recruiting-iii-keyword-extraction\/data\n<br>\n<p> It is a multi-label classification problem  <br>\n<b>Multi-label Classification<\/b>: Multilabel classification assigns to each sample a set of target labels. This can be thought as predicting properties of a data-point that are not mutually exclusive, such as topics that are relevant for a document. A question on Stackoverflow might be about any of C, Pointers, FileIO and\/or memory-management at the same time or none of these. <br>\n__Credit__: http:\/\/scikit-learn.org\/stable\/modules\/multiclass.html\n<\/p>","1271946a":"# Preprocessing of Questions","a32c2455":"<ol> \n    <li> Separate Code from Body <\/li>\n    <li> Remove Spcial characters from Question title and description (not in code)<\/li>\n    <li> <b> Give more weightage to title : Add title three times to the question <\/b> <\/li>\n    Remove stop words (Except 'C') <br>\n    Remove HTML Tags<br>\n    Convert all the characters into small letters <br>\n    Use SnowballStemmer to stem the words <br>\n<\/ol>","d151779f":"# Machine Learning Models","d8e165f0":"## Featurizing data with TfIdf vectorizer","a4a983d9":"## Further Transformations","a01d7a4e":"### Using Pandas with SQLite to load the data","cc1434dd":"## Check for duplicates","615c538a":"# Objectives & Constraints\n1. Predict as many tags as possible with high precision and recall.\n2. Incorrect tags could impact customer experience on StackOverflow.\n3. No strict latency constraints.","4e24e40d":"### Observations:\n1. Majority of the most frequent tags are programming language.\n2. C# is the top most frequent programming language.\n3. Android, IOS, Linux and windows are among the top most frequent operating systems.","3a7ae233":"## Most Frequent Tags","09947002":"## Total No. of Unique Tags","5c424eb7":"## Applying Logistic Regression with OneVsRest Classifier","15450dd7":"<p style='font-size:18px'><b> Problem Statemtent <\/b><\/p>\nSuggest the tags based on the content that was there in the question posted on Stackoverflow.\n\n<p style='font-size:18px'><b> Source:  <\/b> https:\/\/www.kaggle.com\/c\/facebook-recruiting-iii-keyword-extraction\/<\/p>","0a0bd24b":"# EDA","45429ad0":"<b>Micro-Averaged F1-Score (Mean F Score) <\/b>: \nThe F1 score can be interpreted as a weighted average of the precision and recall, where an F1 score reaches its best value at 1 and worst score at 0. The relative contribution of precision and recall to the F1 score are equal. The formula for the F1 score is:\n\n<i>F1 = 2 * (precision * recall) \/ (precision + recall)<\/i><br>\n\nIn the multi-class and multi-label case, this is the weighted average of the F1 score of each class. <br>\n\n<b>'Micro f1 score': <\/b><br>\nCalculate metrics globally by counting the total true positives, false negatives and false positives. This is a better metric when we have class imbalance.\n<br>\n\n<b>'Macro f1 score': <\/b><br>\nCalculate metrics for each label, and find their unweighted mean. This does not take label imbalance into account.\n<br>\n\nhttps:\/\/www.kaggle.com\/wiki\/MeanFScore <br>\nhttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.f1_score.html <br>\n<br>\n<b> Hamming loss <\/b>: The Hamming loss is the fraction of labels that are incorrectly predicted. <br>\nhttps:\/\/www.kaggle.com\/wiki\/HammingLoss <br>","b57e972b":"## Counting the number of rows","5a707f6e":"<b>Observations:<\/b><br \/>\nA look at the word cloud shows that \"c#\", \"java\", \"php\", \"asp.net\", \"javascript\", \"c++\" are some of the most frequent tags.","830ee502":"# Stackover flow Tag Predictor","f354b97e":"## Modeling with less data points (0.5M data points) and more weight to title and 500 tags only.","c69eccee":"## Split the data into test and train","f8336a0e":"###  Preprocessing of questions","692e4911":"# Analyzing tags","318f6125":"<ol>\n    <li> Use bag of words upto 4 grams and compute the micro f1 score with Logistic regression(OvR) <\/li>\n    <li> Perform hyperparam tuning on alpha (or lambda) for Logistic regression to improve the performance using GridSearch  <\/li>\n    <li> Try OneVsRestClassifier  with Linear-SVM (SGDClassifier with loss-hinge)<\/li>\n<\/ol>","69a7654c":"#### Sample quesitons after preprocessing of data","53488617":"## Featurizing data","006c57c6":"## Converting tags for multilabel problems\n\n<table>\n<tr>\n<th>X<\/th><th>y1<\/th><th>y2<\/th><th>y3<\/th><th>y4<\/th>\n<\/tr>\n<tr>\n<td>x1<\/td><td>0<\/td><td>1<\/td><td>1<\/td><td>0<\/td>\n<\/tr>\n<tr>\n<td>x1<\/td><td>1<\/td><td>0<\/td><td>0<\/td><td>0<\/td>\n<\/tr>\n<tr>\n<td>x1<\/td><td>0<\/td><td>1<\/td><td>0<\/td><td>0<\/td>\n<\/tr>\n<\/table>"}}