{"cell_type":{"196c95b1":"code","a79fa515":"code","c9cc3d6d":"code","0a7938b2":"code","7af0991f":"code","fc85ef55":"code","96182c0a":"code","f40e4cb7":"code","1550b513":"code","d4cf9370":"code","10ab0f35":"code","55f043f8":"code","7a1cb263":"code","de6fe14b":"code","f7446421":"code","1910e320":"code","697140a4":"markdown"},"source":{"196c95b1":"print(14 * \" >\", \"\\t n.B.a. \\t\", \"< \" * 14, \"\\n\\n\\n\")\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nimport numpy as np\nplt.style.use('fivethirtyeight')\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nimport folium.plugins\nfrom matplotlib import animation,rc\nimport io\nimport base64\nfrom IPython.display import HTML, display\nfrom scipy.misc import imread\nimport codecs\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport warnings            \nwarnings.filterwarnings(\"ignore\") # if there is a warning after some codes, this will avoid us to see them.\nplt.style.use('ggplot') # style of plots. ggplot is one of the most used style, I also like it.\n# Any results you write to the current directory are saved as output.","a79fa515":"data = pd.read_csv(\"\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv\", encoding=\"ISO-8859-1\")\ndata.info()","c9cc3d6d":"data.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed','nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type','weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)\ndata=data[['Year','Month','Day','Country','Region','city','latitude','longitude','AttackType','Killed','Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]\ndata['casualities']=data['Killed']+data['Wounded']\ndata.head()","0a7938b2":"data = data[pd.isna(data.Country)==False]\ndata = data[pd.isna(data['Target'])==False]\ndata = data[pd.isna(data['longitude'])==False]\ndata = data[pd.isna(data['latitude'])==False]\ndata.head()","7af0991f":"data.info()","fc85ef55":"print('Country with Highest Terrorist Attacks:\\n',data['Country'].value_counts().head(10))\nprint('\\n\\nRegions with Highest Terrorist Attacks:\\n',data['Region'].value_counts().head())\nprint('\\n\\nMaximum people killed in an attack are:\\n',data['Killed'].max(),'that took place in',data.loc[data['Killed'].idxmax()].Country)\n","96182c0a":"plt.subplots(figsize=(15,6))\nsns.countplot('Year',data=data,palette='RdYlGn_r',edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","f40e4cb7":"m3 = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\nlat_100=list(data[data['casualities']>=75].latitude)\nlong_100=list(data[data['casualities']>=75].longitude)\nx_100,y_100=m3(long_100,lat_100)\nm3.plot(x_100, y_100,'go',markersize=5,color = 'r')\nlat_=list(data[data['casualities']<75].latitude)\nlong_=list(data[data['casualities']<75].longitude)\nx_,y_=m3(long_,lat_)\nm3.plot(x_, y_,'go',markersize=2,color = 'b',alpha=0.4)\nm3.drawcoastlines()\nm3.drawcountries()\nm3.fillcontinents(lake_color='aqua')\nm3.drawmapboundary(fill_color='aqua')\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.title('Global Terrorist Attacks')\nplt.legend(loc='lower left',handles=[mpatches.Patch(color='b', label = \"< 75 casualities\"),\n                    mpatches.Patch(color='red',label='> 75 casualities')])\nplt.show()","1550b513":"plt.subplots(figsize=(18,6))\nsns.barplot(data['Country'].value_counts()[:10].index,data['Country'].value_counts()[:10].values,palette='inferno')\nplt.title('Top Affected Countries')\nplt.show()","d4cf9370":"sns.barplot(data['Group'].value_counts()[1:15].values,data['Group'].value_counts()[1:15].index,palette=('inferno'))\nplt.xticks(rotation=90)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.title('Terrorist Groups with Highest Terror Attacks')\nplt.show()","10ab0f35":"terror_fol=data.copy()\nterror_fol.dropna(subset=['latitude','longitude'],inplace=True)\nlocation_fol=terror_fol[['latitude','longitude']][:5000]\ncountry_fol=terror_fol['Country'][:5000]\ncity_fol=terror_fol['city'][:5000]\nkilled_fol=terror_fol['Killed'][:5000]\nwound_fol=terror_fol['Wounded'][:5000]\ndef color_point(x):\n    if x>=30:\n        color='red'\n    elif ((x>0 and x<30)):\n        color='blue'\n    else:\n        color='green'\n    return color   \ndef point_size(x):\n    if (x>30 and x<100):\n        size=2\n    elif (x>=100 and x<500):\n        size=8\n    elif x>=500:\n        size=16\n    else:\n        size=0.5\n    return size   \nmap2 = folium.Map(location=[30,0],tiles='CartoDB dark_matter',zoom_start=2)\nfor point in location_fol.index:\n    info='<b>Country: <\/b>'+str(country_fol[point])+'<br><b>City: <\/b>: '+str(city_fol[point])+'<br><b>Killed <\/b>: '+str(killed_fol[point])+'<br><b>Wounded<\/b> : '+str(wound_fol[point])\n    iframe = folium.IFrame(html=info, width=200, height=200)\n    folium.CircleMarker(list(location_fol.loc[point].values),popup=folium.Popup(iframe),radius=point_size(killed_fol[point]),color=color_point(killed_fol[point])).add_to(map2)\nmap2\n\n","55f043f8":"terror_turkey=data[data['Country']=='Turkey']\nterror_turkey_fol=terror_turkey.copy()\nterror_turkey_fol.dropna(subset=['latitude','longitude'],inplace=True)\nlocation_turkey=terror_turkey_fol[['latitude','longitude']][:5000]\ncity_turkey=terror_turkey_fol['city'][:5000]\nkilled_turkey=terror_turkey_fol['Killed'][:5000]\nwound_turkey=terror_turkey_fol['Wounded'][:5000]\ntarget_turkey=terror_turkey_fol['Target_type'][:5000]","7a1cb263":"map4 = folium.Map(location=[40.59, 40.96],tiles='CartoDB dark_matter',zoom_start=4.5)\nfor point in location_turkey.index:\n    folium.CircleMarker(list(location_turkey.loc[point].values),popup='<b>City: <\/b>'+str(city_turkey[point])+'<br><b>Killed: <\/b>'+str(killed_turkey[point])+\\\n                        '<br><b>Injured: <\/b>'+str(wound_turkey[point])+'<br><b>Target: <\/b>'+str(target_turkey[point]),radius=point_size(killed_turkey[point]),color=color_point(killed_turkey[point]),fill_color=color_point(killed_turkey[point])).add_to(map4)\nmap4","de6fe14b":"f,ax=plt.subplots(1,2,figsize=(25,12))\nturkey_groups=terror_turkey['Group'].value_counts()[1:15].index         # ilk 10 terror gruplari\nturkey_groups=terror_turkey[terror_turkey['Group'].isin(turkey_groups)]\nsns.countplot(y='Group',data=turkey_groups,ax=ax[0])\nsns.countplot(y='AttackType',data=turkey_groups,ax=ax[1])\nplt.subplots_adjust(hspace=0.3,wspace=0.6)\nax[0].set_title('Top Terrorist Groups')\nax[1].set_title('Favorite Attack Types')\nax[0].tick_params(labelsize=15)\nax[1].tick_params(labelsize=15)\nplt.show()","f7446421":"fig = plt.figure(figsize = (10,8))\ndef animate(Year):\n    ax = plt.axes()\n    ax.clear()\n    ax.set_title('Terrorism In Turkey '+'\\n'+'Year:' +str(Year))\n    m5 = Basemap(projection='lcc',resolution='l',llcrnrlon=10,llcrnrlat=10,urcrnrlon=99,urcrnrlat=37,lat_0=15,lon_0=25)\n    lat_gif=list(terror_turkey[terror_turkey['Year']==Year].latitude)\n    long_gif=list(terror_turkey[terror_turkey['Year']==Year].longitude)\n    x_gif,y_gif=m5(long_gif,lat_gif)\n    m5.scatter(x_gif, y_gif,s=[killed+wounded for killed,wounded in zip(terror_turkey[terror_turkey['Year']==Year].Killed,terror_turkey[terror_turkey['Year']==Year].Wounded)],color = 'r')\n    m5.drawcoastlines()\n    m5.drawcountries()\n    m5.fillcontinents(color='coral',lake_color='aqua', zorder = 1,alpha=0.4)\n    m5.drawmapboundary(fill_color='aqua')\nani = animation.FuncAnimation(fig,animate,list(terror_turkey.Year.unique()), interval = 1500)    \nani.save('animation.gif', writer='imagemagick', fps=1)\nplt.close(1)\nfilename = 'animation.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","1910e320":"fig = plt.figure(figsize = (10,6))\ndef animate(Year):\n    ax = plt.axes()\n    ax.clear()\n    ax.set_title('Animation Of Terrorist Activities'+'\\n'+'Year:' +str(Year))\n    m6 = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')\n    lat6=list(data[data['Year']==Year].latitude)\n    long6=list(data[data['Year']==Year].longitude)\n    x6,y6=m6(long6,lat6)\n    m6.scatter(x6, y6,s=[(kill+wound)*0.1 for kill,wound in zip(data[data['Year']==Year].Killed,data[data['Year']==Year].Wounded)],color = 'r')\n    m6.drawcoastlines()\n    m6.drawcountries()\n    m6.fillcontinents(zorder = 1,alpha=0.4)\n    m6.drawmapboundary()\nani = animation.FuncAnimation(fig,animate,list(data.Year.unique()), interval = 1500)    \nani.save('animation.gif', writer='imagemagick', fps=1)\nplt.close(1)\nfilename = 'animation.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","697140a4":"## Until 2017, we will visualize terrorist attacks in countries, especially in Turkey."}}