{"cell_type":{"f2c6976d":"code","4937ef1f":"code","ad175302":"code","8b318d72":"code","0497e52f":"code","5adcc511":"code","837c8ae8":"code","5bdfbab7":"code","cf7eabca":"code","10e4567e":"code","7591d00a":"code","25e0d8f3":"code","ade05252":"code","bd556547":"code","d01dc5ae":"code","52853f29":"code","2c083e62":"code","05b45fda":"code","d360e185":"code","f167d67f":"code","85db6609":"code","ff9a2196":"code","b294e93b":"code","be86d405":"code","4efbdcfb":"code","bb2be62c":"code","ae7ee7fc":"code","af830897":"code","314f6943":"code","e9621c68":"code","65a2ac38":"code","bdc0b5be":"code","66e9d2b5":"code","0b4508e3":"code","7f21a872":"code","07d6f00c":"code","4ba4caea":"code","b36dedd2":"code","0d075465":"code","369d59fb":"code","e4037591":"code","cfaaa838":"code","718de7d6":"code","676298ea":"code","dce8ede4":"code","08824b82":"code","3d4d1c8d":"code","e5f02ecf":"code","13339a57":"code","645bc48f":"code","de73f2a8":"code","0a585113":"code","3fe84901":"code","da0e13d6":"code","0b0d3d73":"code","8a3120c8":"code","5a92b9fa":"code","52b06228":"code","e1752d8b":"code","d7fda76c":"code","3594e526":"code","7c3b151f":"markdown","3fcdafb5":"markdown","54551bb3":"markdown","de807619":"markdown","5655539d":"markdown","8cff7990":"markdown","fb16cdf7":"markdown","2cd35f56":"markdown","99fbf6c9":"markdown","c08d57ba":"markdown","b7c33cae":"markdown","46de2184":"markdown","50cc8997":"markdown","202c41fc":"markdown","9670facd":"markdown","a1b9725a":"markdown","4fe018f2":"markdown","2a95dcc7":"markdown","4645569f":"markdown","21637637":"markdown","97721389":"markdown","ccfe1275":"markdown","9f860ca9":"markdown","13ac38e3":"markdown","87618d92":"markdown","c7733580":"markdown","6d99c7b2":"markdown","4607b4a3":"markdown","da226ef0":"markdown"},"source":{"f2c6976d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom catboost import CatBoostRegressor\nfrom matplotlib import pyplot\nimport shap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.model_selection import RepeatedKFold,StratifiedKFold,GroupKFold\nfrom sklearn.linear_model import BayesianRidge, ElasticNet\nimport gc\nimport json\nfrom sklearn.metrics import confusion_matrix\npd.set_option('display.max_columns', 1000)","4937ef1f":"def cnt_miss(df):\n    cnt = 0\n    for e in range(len(df)):\n        x = df['event_data'].iloc[e]\n        y = json.loads(x)['misses']\n        cnt += y\n    return cnt\n\ndef get_4020_acc(df,counter_dict):\n    \n    for e in ['Cauldron Filler (Assessment)','Bird Measurer (Assessment)','Mushroom Sorter (Assessment)','Chest Sorter (Assessment)']:\n        \n        Assess_4020 = df[(df.event_code == 4020) & (df.title==activities_map[e])]   \n        true_attempts_ = Assess_4020['event_data'].str.contains('true').sum()\n        false_attempts_ = Assess_4020['event_data'].str.contains('false').sum()\n\n        measure_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n        counter_dict[e+\"_4020_accuracy\"] += (counter_dict[e+\"_4020_accuracy\"] + measure_assess_accuracy_) \/ 2.0\n    \n    return counter_dict\n\ndef get_4020_acc_new(df,counter_dict,session_title_text):\n                \n    Assess_4020 = df[(df.event_code == 4020)]\n    true_attempts_ = Assess_4020['event_data'].str.contains('true').sum()\n    false_attempts_ = Assess_4020['event_data'].str.contains('false').sum()\n\n    measure_assess_accuracy_ = true_attempts_\/(true_attempts_+false_attempts_) if (true_attempts_+false_attempts_) != 0 else 0\n    counter_dict[\"acc_4020_\"+session_title_text] = (counter_dict[\"acc_4020_\"+session_title_text] + measure_assess_accuracy_) \/ 2.0\n    \n    return counter_dict\n","ad175302":"def eval_qwk_lgb_regr_1(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train_1['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train_1)\n    reduce_train_1['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","8b318d72":"def eval_qwk_lgb_regr_2(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train_2['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train_2)\n    reduce_train_2['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","0497e52f":"def cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True","5adcc511":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","837c8ae8":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = sorted(list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique())))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = sorted(list(set(train['title'].unique()).union(set(test['title'].unique()))))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = sorted(list(set(train['event_code'].unique()).union(set(test['event_code'].unique()))))\n    list_of_event_id = sorted(list(set(train['event_id'].unique()).union(set(test['event_id'].unique()))))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = sorted(list(set(train['world'].unique()).union(set(test['world'].unique()))))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = sorted(list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index))))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map","5bdfbab7":"press_done_btn_event_id = ['d122731b', '17113b36', '25fa8af4', '93b353f2', '070a5291', '392e14df']\nincorrect_feedback_id = ['df4fe8b6', 'd88e8f25', 'c277e121', '160654fd', 'ea296733', '5859dfb6', 'e04fb33d', '28a4eb9a', '7423acbc', 'e57dd7af', '04df9b66', '2230fab4', 'c51d8688', '1af8be29', '89aace00', '763fc34e', '5290eab1', '90ea0bac', '8b757ab8', 'e5734469', '9de5e594', 'd45ed6a1', 'ac92046e', 'ad2fc29c', '5de79a6a', '88d4a5be', '907a054b', 'e37a2b78', '31973d56', '44cb4907', '0330ab6a', '3bf1cf26']\ncorrect_feedback_id = ['2b9272f4', '47026d5f', '3afde5dd', 'e720d930', '3ddc79c3', '709b1251', '4d911100', '45d01abe', '6f4adc4b', 'cf7638f3', 'd3268efa', 'ecaab346', 'e5c9df6f', '77ead60d', 'a8a78786', '9b4001e4', '3afb49e6', 'b5053438', '250513af', '55115cbd', 'c7fe2a55', 'c74f40cd', 'e4f1efe6', '73757a5e', 'cb6010f8', 'e3ff61fb', '7525289a', 'daac11b0', 'a8876db3', '9d29771f', '1f19558b', '58a0de5c']\ncorrectness_of_the_action_event_id = ['8fee50e2', '30614231', '5f0eb72c', 'd122731b', 'a5e9da97', '0db6d71d', '91561152', '14de4c5d', '8af75982', 'c0415e5c', '3bb91dda', '17113b36', '25fa8af4', '93b353f2', '4ef8cdd3', '2dc29e21', '74e5f8a7', '262136f4', '804ee27f', '070a5291', '392e14df', '5c3d2b2f', '86c924c4', 'e7561dd2']\nexit_game_event_id = ['a8cc6fec', '1b54d27f', 'b738d3d3', '3393b68b', '2b058fe3', '9565bea6', '17ca3959', 'a5be6304', '222660ff', '4074bac2', 'b2e5b0f1', '003cd2ee']\nhelp_btn_event_id = ['93edfe2e', '6043a2b4', '05ad839b', '37937459', '6aeafed4', '6f8106d9', '77c76bc5', 'f54238ee', '4e5fc6f5', '47f43a44', '85d1b0de', '47efca07', '731c0cbe', 'e080a381', '92687c59', 'eb2c19cd', '6f4bd64e', '08ff79ad', 'cb1178ad', '67aa2ada', '19967db1', 'e7e44842', '8d748b58', 'd3640339']\nbeat_round_event_id = ['2b9272f4', '47026d5f', '56817e2b', '3afde5dd', '28520915', 'e720d930', '3ddc79c3', '53c6e11a', '709b1251', '4d911100', '45d01abe', '6f4adc4b', '08fd73f3', '6c930e6e', 'b74258a0', '37c53127', 'cf7638f3', 'd3268efa', 'ecaab346', 'e9c52111', 'e5c9df6f', 'f5b8c21a', '86ba578b', '77ead60d', 'a8a78786', '9b4001e4', '3afb49e6', 'b5053438', '250513af', '4d6737eb', 'b012cd7f', '00c73085', '55115cbd', 'c7fe2a55', 'c74f40cd', 'e4f1efe6', '73757a5e', 'cb6010f8', 'e3ff61fb', '7525289a', 'ca11f653', '895865f3', 'daac11b0', 'a8876db3', '9d29771f', '9ed8f6da', '1f19558b', '58a0de5c', '36fa3ebe', '1c178d24', 'f6947f54', '16dffff1', '83c6c409']\n\nimp_event_id_list = list(set().union(press_done_btn_event_id,incorrect_feedback_id,correct_feedback_id,correctness_of_the_action_event_id,exit_game_event_id,help_btn_event_id,beat_round_event_id))\nlen(imp_event_id_list)","cf7eabca":"clip_time = {'Welcome to Lost Lagoon!':19,'Tree Top City - Level 1':17,'Ordering Spheres':61, 'Costume Box':61,\n        '12 Monkeys':109,'Tree Top City - Level 2':25, 'Pirate\\'s Tale':80, 'Treasure Map':156,'Tree Top City - Level 3':26,\n        'Rulers':126, 'Magma Peak - Level 1':20, 'Slop Problem':60, 'Magma Peak - Level 2':22, 'Crystal Caves - Level 1':18,\n        'Balancing Act':72, 'Lifting Heavy Things':118,'Crystal Caves - Level 2':24, 'Honey Cake':142, 'Crystal Caves - Level 3':19,\n        'Heavy, Heavier, Heaviest':61}","10e4567e":"def get_first_set_of_features(user_sample, test_set=False):\n     \n    # Constants and parameters declaration\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    game_time_dict = {'Clip_gametime':0, 'Game_gametime':0, 'Activity_gametime':0, 'Assessment_gametime':0}\n    \n    #last Commit by Bhavika \n    assess_4020_acc_dict = {'acc_4020_' + title: 0 for title in assess_titles}\n    \n    accumulated_game_miss = 0\n    mean_game_round = 0\n    mean_game_level = 0\n    Assessment_mean_event_count = 0\n    Game_mean_event_count = 0\n    Activity_mean_event_count = 0\n    \n    prev_assessment_timestamp = 0\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    \n    durations = []\n    \n    # *******************Added Clip Duration, Activity Duration and Game Duration \n    # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n    \n    clip_durations = []\n    #Activity_durations = []\n    #Game_durations = []\n    #**************************Clip Duration Added\n    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n        \n         \n        # *******************Added Clip Duration, Activity Duration and Game Duration \n        # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n        if session_type == 'Clip':\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n        # *******************Added Clip Duration\n                    \n        if session_type==\"Activity\":\n            Activity_mean_event_count = (Activity_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n        if session_type==\"Game\":\n            \n            Game_mean_event_count = (Game_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            game_s = session[session.event_code == 2030]   \n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n            \n            try:\n                game_round = json.loads(session['event_data'].iloc[-1])[\"round\"]\n                mean_game_round =  (mean_game_round + game_round)\/2.0\n            except:\n                pass\n\n            try:\n                game_level = json.loads(session['event_data'].iloc[-1])[\"level\"]\n                mean_game_level = (mean_game_level + game_level) \/2.0\n            except:\n                pass\n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features.update(game_time_dict.copy())\n            features.update(assess_4020_acc_dict.copy())\n            \n            features['accumulated_game_miss'] = accumulated_game_miss\n            features['mean_game_round'] = mean_game_round\n            features['mean_game_level'] = mean_game_level\n            features['Assessment_mean_event_count'] = Assessment_mean_event_count\n            features['Game_mean_event_count'] = Game_mean_event_count\n            features['Activity_mean_event_count'] = Activity_mean_event_count\n            \n            assess_4020_acc_dict = get_4020_acc_new(session , assess_4020_acc_dict, session_title_text)\n            \n            #*******************New Features added by Bhavika*******************\n            \n            current_assess_timestamp = session['timestamp'].iloc[0]\n            \n            if prev_assessment_timestamp==0:\n                features['duration_between_prev_and_curr_assessment'] = 0\n            else:\n                features['duration_between_prev_and_curr_assessment'] = (current_assess_timestamp - prev_assessment_timestamp).seconds\n            \n            prev_assessment_timestamp = session['timestamp'].iloc[-1]\n            #******************* Bhavika Features added************************ \n            \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            \n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            \n             \n            # *******************Added Clip Duration, Activity Duration and Game Duration \n            # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n            \n            if clip_durations == []:\n                features['Clip_duration_mean'] = 0\n            else:\n                features['Clip_duration_mean'] = np.mean(clip_durations)\n                \n            #*******************Clip Duration Added*************************    \n            \n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            \n            Assessment_mean_event_count = (Assessment_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        \n        if game_time_dict[session_type+'_gametime'] == 0:\n            game_time_dict[session_type+'_gametime'] += (session['game_time'].iloc[-1]\/1000.0)\n        else:\n            game_time_dict[session_type+'_gametime'] = (game_time_dict[session_type+'_gametime'] + (session['game_time'].iloc[-1]\/1000.0))\/2.0\n            \n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        user_activities_count[session_type] += 1\n          \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","7591d00a":"def get_second_set_of_features(user_sample, test_set=False):\n\n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    #New Code Added by Bhavika\n    count_assessment_title = {'cnt_' + title: 0 for title in assess_titles}\n    \n    game_time_dict = {'Clip_gametime':0, 'Game_gametime':0, 'Activity_gametime':0, 'Assessment_gametime':0}\n    \n    #assess_4020_acc_dict = {'Cauldron Filler (Assessment)_4020_accuracy':0,\n    #                            'Mushroom Sorter (Assessment)_4020_accuracy':0,\n    #                            'Bird Measurer (Assessment)_4020_accuracy':0,\n    #                            'Chest Sorter (Assessment)_4020_accuracy':0 }\n    \n    assess_4020_acc_dict = {'acc_4020_' + title: 0 for title in assess_titles}\n    \n    accumulated_game_miss = 0\n    mean_game_round = 0\n    #mean_game_level = 0\n    Assessment_mean_event_count = 0\n    Game_mean_event_count = 0\n    Activity_mean_event_count = 0\n    \n    prev_assessment_timestamp = 0\n    session_title_of_last_assessment = -1\n    session_title_of_last_clip = -1\n    session_title_of_last_activity = -1\n    session_title_of_last_game = -1\n    \n    duration_of_last_assessment = 0\n    duration_of_last_game = 0\n    duration_of_last_activity = 0\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    \n    durations = []\n    \n    # *******************Added Clip Duration, Activity Duration and Game Duration \n    # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n    \n    clip_durations = []\n    #Activity_durations = []\n    #Game_durations = []\n    #**************************Clip Duration Added\n    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    \n    event_id_count: Dict[str, int] = {eve: 0 for eve in imp_event_id_list}\n    \n    #title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n       \n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n        \n         \n        # *******************Added Clip Duration, Activity Duration and Game Duration \n        # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n        if session_type == 'Clip':\n            session_title_of_last_clip = session['title'].iloc[0]\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n        # *******************Added Clip Duration\n                    \n        if session_type==\"Activity\":\n            duration_of_last_activity = (session.iloc[-1, 2] - session.iloc[0, 2] ).seconds\n            session_title_of_last_activity = session['title'].iloc[0]\n            Activity_mean_event_count = (Activity_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n        if session_type==\"Game\":\n            duration_of_last_game = (session.iloc[-1, 2] - session.iloc[0, 2] ).seconds\n            session_title_of_last_game = session['title'].iloc[0]\n            Game_mean_event_count = (Game_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            game_s = session[session.event_code == 2030]   \n            misses_cnt = cnt_miss(game_s)\n            accumulated_game_miss += misses_cnt\n            \n            try:\n                game_round = json.loads(session['event_data'].iloc[-1])[\"round\"]\n                mean_game_round =  (mean_game_round + game_round)\/2.0\n            except:\n                pass\n\n            #try:\n            #    game_level = json.loads(session['event_data'].iloc[-1])[\"level\"]\n            #    mean_game_level = (mean_game_level + game_level) \/2.0\n            #except:\n            #    pass\n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            #features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features.update(game_time_dict.copy())\n            features.update(assess_4020_acc_dict.copy())\n            \n            features['accumulated_game_miss'] = accumulated_game_miss\n            features['mean_game_round'] = mean_game_round\n            #features['mean_game_level'] = mean_game_level\n            features['Assessment_mean_event_count'] = Assessment_mean_event_count\n            features['Game_mean_event_count'] = Game_mean_event_count\n            features['Activity_mean_event_count'] = Activity_mean_event_count\n                        \n            #*******************New Features added by Bhavika*******************\n            features['session_title_of_last_assessment'] = session_title_of_last_assessment\n            features['session_title_of_last_clip'] = session_title_of_last_clip\n            features['session_title_of_last_activity'] = session_title_of_last_activity\n            features['session_title_of_last_game'] = session_title_of_last_game\n            \n            features['duration_of_last_assessment'] = duration_of_last_assessment\n            features['duration_of_last_game'] = duration_of_last_game\n            features['duration_of_last_activity'] = duration_of_last_activity\n            \n            \n            current_assess_timestamp = session['timestamp'].iloc[0]\n            \n            if prev_assessment_timestamp==0:\n                features['duration_between_prev_and_curr_assessment'] = 0\n            else:\n                features['duration_between_prev_and_curr_assessment'] = (current_assess_timestamp - prev_assessment_timestamp).seconds\n            \n            prev_assessment_timestamp = session['timestamp'].iloc[-1]\n            \n            features['prev_assessment_count'] = count_assessment_title['cnt_' + session_title_text]\n            \n            count_assessment_title['cnt_'+ session_title_text] += 1\n            session_title_of_last_assessment = session['title'].iloc[0]\n            \n            assess_4020_acc_dict = get_4020_acc_new(session , assess_4020_acc_dict, session_title_text)\n            \n            #******************* Bhavika Features added************************ \n            \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            \n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            \n             \n            # *******************Added Clip Duration, Activity Duration and Game Duration \n            # *******************Ref : https:\/\/www.kaggle.com\/khoongweihao\/data-science-bowl-2019-regression-to-convert-lb\n            \n            if clip_durations == []:\n                features['Clip_duration_mean'] = 0\n            else:\n                features['Clip_duration_mean'] = np.mean(clip_durations)\n                \n            #*******************Clip Duration Added*************************    \n            \n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            duration_of_last_assessment = (session.iloc[-1, 2] - session.iloc[0, 2] ).seconds\n            \n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            \n            Assessment_mean_event_count = (Assessment_mean_event_count + session['event_count'].iloc[-1])\/2.0\n            \n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    try:\n                        counter[x] += num_of_session_count[k]\n                    except:\n                        pass\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        #title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n        \n        \n        \n        if game_time_dict[session_type+'_gametime'] == 0:\n            game_time_dict[session_type+'_gametime'] += (session['game_time'].iloc[-1]\/1000.0)\n        else:\n            game_time_dict[session_type+'_gametime'] = (game_time_dict[session_type+'_gametime'] + (session['game_time'].iloc[-1]\/1000.0))\/2.0\n            \n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        user_activities_count[session_type] += 1 \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","25e0d8f3":"def get_train_and_test_featureset1(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_first_set_of_features(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_first_set_of_features(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","ade05252":"def get_train_and_test_featureset2(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_second_set_of_features(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_second_set_of_features(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","bd556547":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map = encode_title(train, test, train_labels)\n# tranform function to get the train and test set with first set of features\nreduce_train_1, reduce_test_1, categoricals_1 = get_train_and_test_featureset1(train, test)\n# tranform function to get the train and test set with second set of features\nreduce_train_2, reduce_test_2, categoricals_2 = get_train_and_test_featureset2(train, test)","d01dc5ae":"print('Reduced Train_1 file have {} rows and {} columns'.format(reduce_train_1.shape[0], reduce_train_1.shape[1]))\nprint('Reduced Test_1 file have {} rows and {} columns'.format(reduce_test_1.shape[0], reduce_test_1.shape[1]))\nprint('Reduced Train_2 file have {} rows and {} columns'.format(reduce_train_2.shape[0], reduce_train_2.shape[1]))\nprint('Reduced Test_2 file have {} rows and {} columns'.format(reduce_test_2.shape[0], reduce_test_2.shape[1]))","52853f29":"reduce_train_1.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train_1.columns]\nreduce_test_1.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test_1.columns]\nreduce_train_2.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train_2.columns]\nreduce_test_2.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test_2.columns]","2c083e62":"features_1 = reduce_train_1.loc[(reduce_train_1.sum(axis=1) != 0), (reduce_train_1.sum(axis=0) != 0)].columns # delete useless columns\nfeatures_1 = [x for x in features_1 if x not in ['accuracy_group', 'installation_id']]","05b45fda":"features_2 = reduce_train_2.loc[(reduce_train_2.sum(axis=1) != 0), (reduce_train_2.sum(axis=0) != 0)].columns # delete useless columns\nfeatures_2 = [x for x in features_2 if x not in ['accuracy_group', 'installation_id']]","d360e185":"reduce_train_1[features_1].shape","f167d67f":"reduce_train_2[features_2].shape","85db6609":"# Feature set 1\ncounter = 0\nto_remove_1 = []\nfor feat_a in features_1:\n    for feat_b in features_1:\n        if feat_a != feat_b and feat_a not in to_remove_1 and feat_b not in to_remove_1:\n            c = np.corrcoef(reduce_train_1[feat_a], reduce_train_1[feat_b])[0][1]\n            if c > 0.995:\n                counter += 1\n                to_remove_1.append(feat_b)\n                #print('{}: FEAT_A: {} FEAT_B: {} - Correlation: {}'.format(counter, feat_a, feat_b, c))","ff9a2196":"def stract_hists(feature, train, test, adjust=False, plot=False):\n    n_bins = 10\n    train_data = train[feature]\n    test_data = test[feature]\n    if adjust:\n        test_data *= train_data.mean() \/ test_data.mean()\n    perc_90 = np.percentile(train_data, 95)\n    train_data = np.clip(train_data, 0, perc_90)\n    test_data = np.clip(test_data, 0, perc_90)\n    train_hist = np.histogram(train_data, bins=n_bins)[0] \/ len(train_data)\n    test_hist = np.histogram(test_data, bins=n_bins)[0] \/ len(test_data)\n    msre = mean_squared_error(train_hist, test_hist)\n    if plot:\n        print(msre)\n        plt.bar(range(n_bins), train_hist, color='blue', alpha=0.5)\n        plt.bar(range(n_bins), test_hist, color='red', alpha=0.5)\n        plt.show()\n    return msre","b294e93b":"#feature set 1\nto_exclude_1 = [] \nadjusted_test_1 = reduce_test_1.copy()\nfor feature in adjusted_test_1.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'session_title']:\n        data = reduce_train_1[feature]\n        train_mean = data.mean()\n        data = adjusted_test_1[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, reduce_train_1, reduce_test_1, adjust=True)\n            adjusted_factor = train_mean \/ test_mean\n            if adjusted_factor > 10 or adjusted_factor < 0.1:# or error > 0.01:\n                to_exclude_1.append(feature)\n                #print(feature, train_mean, test_mean, error)\n            else:\n                adjusted_test_1[feature] *= adjusted_factor\n        except:\n            to_exclude_1.append(feature)\n            #print(feature, train_mean, test_mean)","be86d405":"features_1 = [x for x in features_1 if x not in (to_exclude_1 + to_remove_1)]\nreduce_train_1[features_1].shape","4efbdcfb":"import gc\ngc.collect()","bb2be62c":"# Feature set 2\ncounter = 0\nto_remove_2 = []\nfor feat_a in features_2:\n    for feat_b in features_2:\n        if feat_a != feat_b and feat_a not in to_remove_2 and feat_b not in to_remove_2:\n            c = np.corrcoef(reduce_train_2[feat_a], reduce_train_2[feat_b])[0][1]\n            if c > 0.995:\n                counter += 1\n                to_remove_2.append(feat_b)\n                #print('{}: FEAT_A: {} FEAT_B: {} - Correlation: {}'.format(counter, feat_a, feat_b, c))","ae7ee7fc":"#feature set 1\nto_exclude_2 = [] \nadjusted_test_2 = reduce_test_2.copy()\nfor feature in adjusted_test_2.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'session_title']:\n        data = reduce_train_2[feature]\n        train_mean = data.mean()\n        data = adjusted_test_2[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, reduce_train_2, reduce_test_2, adjust=True)\n            adjust_factor = train_mean \/ test_mean\n            if adjust_factor > 10 or adjust_factor < 0.1:# or error > 0.01:\n                to_exclude_2.append(feature)\n                #print(feature, train_mean, test_mean, error)\n            else:\n                adjusted_test_2[feature] *= adjust_factor\n        except:\n            to_exclude_2.append(feature)\n            #print(feature, train_mean, test_mean)","af830897":"features_2 = [x for x in features_2 if x not in (to_exclude_2 + to_remove_2)]\nreduce_train_2[features_2].shape","314f6943":"import gc\ngc.collect()","e9621c68":"class Base_Model(object):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        self.train_df = train_df\n        self.test_df = test_df\n        self.features = features\n        self.n_splits = n_splits\n        self.categoricals = categoricals\n        self.target = 'accuracy_group'\n        self.cv = self.get_cv()\n        self.verbose = verbose\n        self.params = self.get_params()\n        self.y_pred, self.oof_pred_val, self.score, self.model = self.fit()\n        \n    def train_model(self, train_set, val_set):\n        raise NotImplementedError\n        \n    def get_cv(self):\n        cv = GroupKFold(n_splits=self.n_splits)\n        return cv.split(self.train_df, self.train_df[self.target],self.train_df['installation_id'])\n    \n    def get_params(self):\n        raise NotImplementedError\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        raise NotImplementedError\n        \n    def convert_x(self, x):\n        return x\n        \n    def fit(self):\n        raise NotImplementedError","65a2ac38":"class Catb_Model_1(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        clf = CatBoostRegressor(**self.params)\n        clf.fit(train_set['X'], \n                train_set['y'], \n                eval_set=(val_set['X'], val_set['y']),\n                verbose=verbosity, \n                cat_features=self.categoricals)\n        return clf\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {  'loss_function': 'RMSE',\n                    'task_type': \"CPU\",\n                    'iterations': 5000,\n                    'od_type': \"Iter\",\n                    'depth': 10,\n                    'colsample_bylevel': 0.5, \n                    'early_stopping_rounds': 300,\n                    'l2_leaf_reg': 18,\n                    'random_seed': 42,\n                    'use_best_model': True\n                    }\n        return params\n    \n    def fit(self):\n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_1(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_1(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","bdc0b5be":"class Catb_Model_2(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        clf = CatBoostRegressor(**self.params)\n        clf.fit(train_set['X'], \n                train_set['y'], \n                eval_set=(val_set['X'], val_set['y']),\n                verbose=verbosity, \n                cat_features=self.categoricals)\n        return clf\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {  'loss_function': 'RMSE',\n                    'task_type': \"CPU\",\n                    'iterations': 5000,\n                    'od_type': \"Iter\",\n                    'depth': 10,\n                    'colsample_bylevel': 0.5, \n                    'early_stopping_rounds': 300,\n                    'l2_leaf_reg': 18,\n                    'random_seed': 42,\n                    'use_best_model': True\n                    }\n        return params\n    \n    def fit(self):\n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_2(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_2(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","66e9d2b5":"import tensorflow as tf\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\n\nclass Nn_Model_1(Base_Model):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        features = features.copy()\n        if len(categoricals) > 0:\n            for cat in categoricals:\n                enc = OneHotEncoder()\n                train_cats = enc.fit_transform(train_df[[cat]])\n                test_cats = enc.transform(test_df[[cat]])\n                cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n                features += cat_cols\n                train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n                test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n                train_df = pd.concat([train_df, train_cats], axis=1)\n                test_df = pd.concat([test_df, test_cats], axis=1)\n        scalar = MinMaxScaler()\n        train_df[features] = scalar.fit_transform(train_df[features])\n        test_df[features] = scalar.transform(test_df[features])\n        print(train_df[features].shape)\n        super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Input(shape=(train_set['X'].shape[1],)),\n            tf.keras.layers.Dense(200, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(100, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(50, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(25, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(1, activation='relu')\n        ])\n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=4e-4), loss='mse')\n        print(model.summary())\n        save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n        early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n        model.fit(train_set['X'], \n                train_set['y'], \n                validation_data=(val_set['X'], val_set['y']),\n                epochs=100,\n                 callbacks=[save_best, early_stop])\n        model.load_weights('nn_model.w8')\n        return model\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        return None\n    \n    def fit(self):\n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_1(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_1(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","0b4508e3":"import tensorflow as tf\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\n\nclass Nn_Model_2(Base_Model):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        features = features.copy()\n        if len(categoricals) > 0:\n            for cat in categoricals:\n                enc = OneHotEncoder()\n                train_cats = enc.fit_transform(train_df[[cat]])\n                test_cats = enc.transform(test_df[[cat]])\n                cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n                features += cat_cols\n                train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n                test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n                train_df = pd.concat([train_df, train_cats], axis=1)\n                test_df = pd.concat([test_df, test_cats], axis=1)\n        scalar = MinMaxScaler()\n        train_df[features] = scalar.fit_transform(train_df[features])\n        test_df[features] = scalar.transform(test_df[features])\n        print(train_df[features].shape)\n        super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Input(shape=(train_set['X'].shape[1],)),\n            tf.keras.layers.Dense(200, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(100, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(50, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(25, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.25),\n            tf.keras.layers.Dense(1, activation='relu')\n        ])\n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=4e-4), loss='mse')\n        print(model.summary())\n        save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n        early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n        model.fit(train_set['X'], \n                train_set['y'], \n                validation_data=(val_set['X'], val_set['y']),\n                epochs=100,\n                 callbacks=[save_best, early_stop])\n        model.load_weights('nn_model.w8')\n        return model\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        return None\n    \n    def fit(self):\n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_2(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_2(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","7f21a872":"def get_plot_importance(model):\n    fig, (ax, ax1) = plt.subplots(1, 2, figsize=[11, 7])\n    lgb.plot_importance(model, ax=ax, max_num_features=20, importance_type='split')\n    lgb.plot_importance(model, ax=ax1, max_num_features=20, importance_type='gain')\n    ax.set_title('Importance by splits')\n    ax1.set_title('Importance by gain')\n    plt.tight_layout()\n    plt.savefig('feature_importance.png')","07d6f00c":"class Lgb_Model_1(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return lgb.train(self.params, train_set, valid_sets=[train_set, val_set], verbose_eval=verbosity)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=self.categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=self.categoricals)\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'feature_fraction': 0.9,\n                    'max_depth': 15,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'early_stopping_rounds': 100\n                    }\n        return params\n    \n    def fit(self):\n       \n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_1(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_1(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","4ba4caea":"class Lgb_Model_2(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return lgb.train(self.params, train_set, valid_sets=[train_set, val_set], verbose_eval=verbosity)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=self.categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=self.categoricals)\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'feature_fraction': 0.9,\n                    'max_depth': 15,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'early_stopping_rounds': 100\n                    }\n        return params\n    \n    def fit(self):\n       \n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_2(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_2(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","b36dedd2":"class XGB_Model_1(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return xgb.train(self.params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=verbosity, early_stopping_rounds=100)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n    \n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n        \n    def get_params(self):\n        params = {            \n                    'colsample_bytree': 0.8,                 \n                    'learning_rate': 0.01,\n                    'max_depth': 10,\n                    'subsample': 1,\n                    'objective':'reg:squarederror',\n                    'min_child_weight':3,\n                    'gamma':0.25,\n                    'n_estimators':5000\n                }\n        return params\n    \n    \n    def fit(self):\n       \n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_1(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_1(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","0d075465":"class XGB_Model_2(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return xgb.train(self.params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=verbosity, early_stopping_rounds=100)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n    \n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n        \n    def get_params(self):\n        params = {            \n                    'colsample_bytree': 0.8,                 \n                    'learning_rate': 0.01,\n                    'max_depth': 10,\n                    'subsample': 1,\n                    'objective':'reg:squarederror',\n                    'min_child_weight':3,\n                    'gamma':0.25,\n                    'n_estimators':5000\n                }\n        return params\n    \n    \n    def fit(self):\n       \n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        oof_pred_val = np.zeros((len(self.train_df), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_val = self.convert_x(self.train_df[self.features])\n            oof_pred_val += model.predict(x_val).reshape(oof_pred_val.shape) \/ self.n_splits\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr_2(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr_2(self.train_df[self.target], oof_pred)\n        \n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n\n        return y_pred, oof_pred_val, loss_score, model","369d59fb":"import warnings\nwarnings.filterwarnings(\"ignore\")\ncat_model_1 = Catb_Model_1(reduce_train_1, adjusted_test_1, features_1, categoricals=categoricals_1)","e4037591":"warnings.filterwarnings(\"ignore\")\ncat_model_2 = Catb_Model_2(reduce_train_2, adjusted_test_2, features_2, categoricals=categoricals_2)","cfaaa838":"warnings.filterwarnings(\"ignore\")\nnn_model_1 = Nn_Model_1(reduce_train_1, adjusted_test_1, features_1, categoricals=categoricals_1)","718de7d6":"warnings.filterwarnings(\"ignore\")\nnn_model_2 = Nn_Model_1(reduce_train_2, adjusted_test_2, features_2, categoricals=categoricals_2)","676298ea":"warnings.filterwarnings(\"ignore\")\nlgb_model_1 = Lgb_Model_1(reduce_train_1, adjusted_test_1, features_1, categoricals=categoricals_1)\nget_plot_importance(lgb_model_1.model)","dce8ede4":"warnings.filterwarnings(\"ignore\")\nlgb_model_2 = Lgb_Model_2(reduce_train_2, adjusted_test_2, features_2, categoricals=categoricals_2)\nget_plot_importance(lgb_model_2.model)","08824b82":"warnings.filterwarnings(\"ignore\")\nxgb_model_1 = XGB_Model_1(reduce_train_1, adjusted_test_1, features_1, categoricals=categoricals_1)","3d4d1c8d":"warnings.filterwarnings(\"ignore\")\nxgb_model_2 = XGB_Model_2(reduce_train_2, adjusted_test_2, features_2, categoricals=categoricals_2)","e5f02ecf":"# Light GBM Stacker\ntrain_stack_LGB = np.vstack([lgb_model_1.oof_pred_val,lgb_model_2.oof_pred_val]).transpose()\ntest_stack_LGB = np.vstack([lgb_model_1.y_pred,lgb_model_2.y_pred]).transpose()\ntarget = reduce_train_1['accuracy_group']","13339a57":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_LGB.shape[0])\n    final_pred_lightGBM_1 = np.zeros(test_stack_LGB.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_LGB,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_LGB[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_LGB[val_idx], target.iloc[val_idx].values\n\n        clf = BayesianRidge()\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_lightGBM_1 += clf.predict(test_stack_LGB) \/ runs \/ bags","645bc48f":"# XGBoost Stacker\ntrain_stack_XGB = np.vstack([xgb_model_1.oof_pred_val,xgb_model_2.oof_pred_val]).transpose()\ntest_stack_XGB = np.vstack([xgb_model_1.y_pred,xgb_model_2.y_pred]).transpose()\ntarget = reduce_train_1['accuracy_group']","de73f2a8":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_XGB.shape[0])\n    final_pred_XGBoost_1 = np.zeros(test_stack_XGB.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_XGB,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_XGB[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_XGB[val_idx], target.iloc[val_idx].values\n\n        clf = BayesianRidge()\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_XGBoost_1 += clf.predict(test_stack_XGB) \/ runs \/ bags","0a585113":"#NN Stacker\ntrain_stack_NN = np.vstack([nn_model_1.oof_pred_val,nn_model_2.oof_pred_val]).transpose()\ntest_stack_NN = np.vstack([nn_model_1.y_pred,nn_model_2.y_pred]).transpose()\ntarget = reduce_train_1['accuracy_group']","3fe84901":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_NN.shape[0])\n    final_pred_NN_1 = np.zeros(test_stack_NN.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_NN,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_NN[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_NN[val_idx], target.iloc[val_idx].values\n\n        clf = BayesianRidge()\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_NN_1 += clf.predict(test_stack_NN) \/ runs \/ bags","da0e13d6":"#catboost stacker\ntrain_stack_cat = np.vstack([cat_model_1.oof_pred_val,cat_model_2.oof_pred_val]).transpose()\ntest_stack_cat = np.vstack([cat_model_1.y_pred,cat_model_2.y_pred]).transpose()\ntarget = reduce_train_1['accuracy_group']","0b0d3d73":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_cat.shape[0])\n    final_pred_cat_1 = np.zeros(test_stack_cat.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_cat,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_cat[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_cat[val_idx], target.iloc[val_idx].values\n\n        clf = BayesianRidge()\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_cat_1 += clf.predict(test_stack_cat) \/ runs \/ bags","8a3120c8":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_LGB.shape[0])\n    final_pred_lightGBM_2 = np.zeros(test_stack_LGB.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_LGB,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_LGB[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_LGB[val_idx], target.iloc[val_idx].values\n\n        clf = ElasticNet(alpha=0.0002, random_state=seed)\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_lightGBM_2 += clf.predict(test_stack_LGB) \/ runs \/ bags","5a92b9fa":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_XGB.shape[0])\n    final_pred_XGBoost_2 = np.zeros(test_stack_XGB.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_XGB,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_XGB[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_XGB[val_idx], target.iloc[val_idx].values\n\n        clf = ElasticNet(alpha=0.0002, random_state=seed)\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_XGBoost_2 += clf.predict(test_stack_XGB) \/ runs \/ bags","52b06228":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_NN.shape[0])\n    final_pred_NN_2 = np.zeros(test_stack_NN.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_NN,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_NN[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_NN[val_idx], target.iloc[val_idx].values\n\n        clf = ElasticNet(alpha=0.0002, random_state=seed)\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_NN_2 += clf.predict(test_stack_NN) \/ runs \/ bags","e1752d8b":"n_splits = 5\nn_repeats = 2\nruns = n_splits * n_repeats\nbags = 1\nfor seed in range(bags):\n    folds_stack = RepeatedKFold(n_splits=n_splits, n_repeats=n_repeats, random_state=seed)\n    oof_stack = np.zeros(train_stack_cat.shape[0])\n    final_pred_cat_2 = np.zeros(test_stack_cat.shape[0])\n\n    for fold_, (trn_idx, val_idx) in enumerate(folds_stack.split(train_stack_cat,target)):\n        print(\"fold {}\".format(fold_))\n        trn_data, trn_y = train_stack_cat[trn_idx], target.iloc[trn_idx].values\n        val_data, val_y = train_stack_cat[val_idx], target.iloc[val_idx].values\n\n        clf = ElasticNet(alpha=0.0002, random_state=seed)\n        clf.fit(trn_data, trn_y)\n\n        oof_stack[val_idx] = clf.predict(val_data)\n        final_pred_cat_2 += clf.predict(test_stack_cat) \/ runs \/ bags","d7fda76c":"final_pred = 0.625 * (0.5 * final_pred_lightGBM_2 + 0.5 * final_pred_lightGBM_1) + 0.125 * (0.5 * final_pred_XGBoost_1 + 0.5 * final_pred_XGBoost_2) + 0.125 * (0.5 * final_pred_NN_1 + 0.5 * final_pred_NN_2) + + 0.125 * (0.5 * final_pred_cat_1 + 0.5 * final_pred_cat_2)","3594e526":"dist = Counter(reduce_train_1['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train_1)\nreduce_train_1['accuracy_group'].hist()\n\nacum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    bound[i] = np.percentile(final_pred, acum * 100)\nprint(bound)\n\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n    \nfinal_pred = np.array(list(map(classify, final_pred)))\n\nsample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission['accuracy_group'].value_counts(normalize=True)","7c3b151f":"<a id='4'><b>Execute Light GBM Models<\/b><\/a>","3fcdafb5":"<a id='10'><b>Execute XGBoost Models<\/b><\/a>","54551bb3":"<a id='12'><b>Stacker 6: Elastic Net Regressor for XG Boost<\/b><\/a>","de807619":"<a id='6'><b>Stacker 5: Elastic Net Regressor for Light GBM<\/b><\/a>","5655539d":"<a id=1b><b>2<sup>nd<\/sup> set of Features<\/b><\/a>","8cff7990":"<pre>\n<b>Team Name : Unleashing Data Science<\/b>\n\n<b>Team Members<\/b>\n- <a href='https:\/\/www.kaggle.com\/roydatascience' target=\"_blank\"><b>Ashish Gupta<\/b><\/a>\n- <a href='https:\/\/www.kaggle.com\/bhavikapanara' target=\"_blank\"><b>Bhavika Panara<\/b><\/a>  \n- <a href='https:\/\/www.kaggle.com\/braquino' target=\"_blank\"><b>Bruno Aquino<\/b><\/a>  \n- <a href='https:\/\/www.kaggle.com\/carlolepelaars' target=\"_blank\"><b>Carlo Lepelaars<\/b><\/a>   \n- <a href='https:\/\/www.kaggle.com\/kranthi9' target=\"_blank\"><b>Kranthi Kumar<\/b><\/a>   \n- <a href='https:\/\/www.kaggle.com\/manojprabhaakr' target=\"_blank\"><b>Manoj Prabhakar<\/b><\/a>   \n- <a href='https:\/\/www.kaggle.com\/muhakabartay' target=\"_blank\"><b>Mukharbek Organokov<\/b><\/a>   \n- <a href='https:\/\/www.kaggle.com\/yassinealouini' target=\"_blank\"><b>Yassine Alouini<\/b><\/a>   \n<\/pre>","fb16cdf7":"<a id='20'><b>Execute Cat Boost Models<\/b><\/a>","2cd35f56":"#### Table of Content\n<pre>\n- <a href='#1'><b>Import the Libraries and Useful Functions<\/b><\/a>\n   - <a href='#1a'><b>1<sup>st<\/sup> set of Features<\/b><\/a>\n   - <a href='#1b'><b>2<sup>nd<\/sup> set of Features<\/b><\/a>\n- <a href='#2'><b>Load the Data<\/b><\/a>  \n- <a href='#15'><b>Build Baseline Model Architecture<\/b><\/a>\n- <a href='#19'><b>Build Cat Boost Model Architecture<\/b><\/a>\n- <a href='#13'><b>Build NN Model Architecture<\/b><\/a>\n- <a href='#3'><b>Build Light GBM Model Architecture<\/b><\/a>\n- <a href='#9'><b>Build XG Boost Model Architecture<\/b><\/a>\n- <a href='#20'><b>Execute Cat Boost Models<\/b><\/a>\n- <a href='#14'><b>Execute NN Models<\/b><\/a>\n- <a href='#4'><b>Execute Light GBM Models<\/b><\/a>\n- <a href='#10'><b>Execute XG Boost Models<\/b><\/a>\n- <a href='#5'><b>Stacker 1: Bayesian Ridge Regressor for Light GBM<\/b><\/a>\n- <a href='#11'><b>Stacker 2: Bayesian Ridge Regressor for XG Boost<\/b><\/a>\n- <a href='#16'><b>Stacker 3: Bayesian Ridge Regressor for NN<\/b><\/a>\n- <a href='#21'><b>Stacker 4: Bayesian Ridge Regressor for Catboost<\/b><\/a>\n- <a href='#6'><b>Stacker 5: Elastic Net Regressor for Light GBM<\/b><\/a>\n- <a href='#12'><b>Stacker 6: Elastic Net Regressor for XG Boost<\/b><\/a>\n- <a href='#18'><b>Stacker 7: Elastic Net Regressor for NN<\/b><\/a>\n- <a href='#22'><b>Stacker 8: Elastic Net Regressor for Catboost<\/b><\/a>\n- <a href='#7'><b>Final Submission<\/b><\/a>\n<\/pre>","99fbf6c9":"# Notes\n* Check the distribution of the target variable of the out of folds score and the prediction distribution. A good model should more or less have the same distribution.","c08d57ba":"<a id ='13'><b>Build NN Model Architecture<\/b><\/a>","b7c33cae":"<a id='19'><b>Build Cat Boost Model Architecture<\/b><\/a>","46de2184":"<a id='22'><b>Stacker 8: Elastic Net Regressor for Catboost<\/b><\/a>","50cc8997":"Final Prediction","202c41fc":"<a id=1><b>Import the Libraries and Useful Functions<\/b><\/a>","9670facd":"<a id='5'><b>Stacker 1: Bayesian Ridge Regressor - Light GBM<\/b><\/a>","a1b9725a":"<a id='21'><b>Stacker 4: Bayesian Ridge Regressor for Catboost<\/b><\/a>","4fe018f2":"#### Objective\n\n* Feature Extraction and Selection is the deciding factor for DSB 2019. \n* Models used : Light GBM, XG-Boost, Neural Networks, Random Forest and Extra Trees Regression models.","2a95dcc7":"Remove Correlated and other useless features","4645569f":"<a id ='3'><b>Build Light GBM Model Architecture<\/b><\/a>","21637637":"<a id='16'><b>Stacker 3: Bayesian Ridge Regressor - NN<\/b><\/a>","97721389":"<a id='14'><b>Execute NN Models<\/b><\/a>","ccfe1275":"<a id=1a><b>1<sup>st<\/sup> set of Features<\/b><\/a>","9f860ca9":"<a id='15'><b>Build Baseline Model Architecture<\/b><\/a>","13ac38e3":"<a id='7'><b>Final Submission<\/b><\/a>","87618d92":"<a id='11'><b>Stacker 2: Bayesian Ridge Regressor - XG Boost<\/b><\/a>","c7733580":"<a id ='9'><b>Build XG Boost Model Architecture<\/b><\/a>","6d99c7b2":"<a id='18'><b>Stacker 7: Elastic Net Regressor - NN<\/b><\/a>","4607b4a3":"![](https:\/\/datasciencebowl.com\/wp-content\/uploads\/2019\/03\/dsb-logo-400.png)\n\nData Science Bowl is the world\u2019s largest data science competition focused on social good. Each year, this competition gives Kagglers a chance to use their passion to change the world. Over the last four years, more than 50,000+ Kagglers have submitted over 114,000+ submissions, to improve everything from lung cancer and heart disease detection to ocean health. I would like to dedicate fill credit of our success to our dedicated team members.","da226ef0":"<a id=2><b>Load the Data<\/b><\/a>"}}