{"cell_type":{"5d0b67d2":"code","8279b16c":"code","a625a7fb":"code","32976636":"code","e1e2e58c":"code","054cb27f":"code","7ebba6db":"code","5f76642b":"code","677ccbac":"code","211439b8":"code","ed076aae":"code","8ef9e704":"code","719266b2":"code","0ab2d5ff":"code","1033875d":"code","f91dd56f":"code","2464bbfa":"code","25395cb4":"code","38554941":"code","cb8e452c":"code","25771428":"code","39452dee":"code","38b1f641":"code","c1d45b26":"code","5345635c":"code","481ddf13":"code","b26d9a01":"code","76e136ff":"code","3b4ea421":"code","e2f6c7c0":"code","29592e65":"code","cafb18f0":"markdown","965ac645":"markdown","9b4406a3":"markdown","c79f7f7e":"markdown","9dc9c227":"markdown","77110fd8":"markdown"},"source":{"5d0b67d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense,Dropout,Embedding,CuDNNLSTM,Bidirectional\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8279b16c":"df = pd.read_csv('..\/input\/train.csv')","a625a7fb":"df.head()","32976636":"print(df['target'].value_counts())\nsns.countplot(df['target'])","e1e2e58c":"x = df['question_text']\ny = df['target']","054cb27f":"token = Tokenizer()","7ebba6db":"token.fit_on_texts(x)\nseq = token.texts_to_sequences(x)","5f76642b":"pad_seq = pad_sequences(seq,maxlen=300)","677ccbac":"vocab_size = len(token.word_index)+1","211439b8":"x = df['question_text']\ny = df['target']","ed076aae":"embedding_vector = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    value = line.split(' ')\n    word = value[0]\n    coef = np.array(value[1:],dtype = 'float32')\n    embedding_vector[word] = coef","8ef9e704":"embedding_matrix = np.zeros((vocab_size,300))\nfor word,i in tqdm(token.word_index.items()):\n    embedding_value = embedding_vector.get(word)\n    if embedding_value is not None:\n        embedding_matrix[i] = embedding_value","719266b2":"model = Sequential()","0ab2d5ff":"model.add(Embedding(vocab_size,300,weights = [embedding_matrix],input_length=300,trainable = False))","1033875d":"model.add(Bidirectional(CuDNNLSTM(75)))","f91dd56f":"model.add(Dense(32,activation = 'relu'))","2464bbfa":"model.add(Dense(1,activation = 'sigmoid'))","25395cb4":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics = ['accuracy'])","38554941":"history = model.fit(pad_seq,y,epochs = 5,batch_size=256,validation_split=0.2)","cb8e452c":"values = history.history","25771428":"val_loss = values['val_loss']\ntraining_loss = values['loss']\ntraining_acc = values['acc']\nvalidation_acc = values['val_acc']\nepochs = range(5)\n\nplt.plot(epochs,val_loss,label = 'Validation Loss')\nplt.plot(epochs,training_loss,label = 'Training Loss')\nplt.title('Epochs vs Loss')\nplt.legend()\nplt.show()","39452dee":"plt.plot(epochs,validation_acc,label = 'Validation Accuracy')\nplt.plot(epochs,training_acc,label = 'Training Accuracy')\nplt.title('Epochs vs Accuracy')\nplt.legend()\nplt.show()","38b1f641":"testing = pd.read_csv('..\/input\/test.csv')","c1d45b26":"testing.head()","5345635c":"x_test = testing['question_text']","481ddf13":"x_test = token.texts_to_sequences(x_test)","b26d9a01":"testing_seq = pad_sequences(x_test,maxlen=300)","76e136ff":"predict = model.predict_classes(testing_seq)","3b4ea421":"testing['label'] = predict","e2f6c7c0":"testing.head()","29592e65":"submit_df = pd.DataFrame({\"qid\": testing[\"qid\"], \"prediction\": testing['label']})\nsubmit_df.to_csv(\"submission.csv\", index=False)","cafb18f0":"**Using word embeddings so that words with similar words have similar representation in vector space. It represents every word as a vector. The words which have similar meaning are place close to each other.**","965ac645":"Reading the dataset","9b4406a3":"**Displaying the count of each class in Y label**","c79f7f7e":"**Building a LSTM model. LSTM networks are useful in sequence data as they are capable of remembering the past words which help them in understanding the meaning of the sentence which helps in text classification. \nBidirectional Layer is helpful as it helps in understanding thesentence from start to end and also from end to start. It works in both the direction. This is useful as the reverse order LSTM layer is capable of learning patterns which are not possible for the normal LSTM layers which goes from start to end of the sentence in the normal order. Hence Bidirectional layers are useful in text classification problems as different patterns can be captured from 2 directions.**","9dc9c227":"**Converting the text into sequence for processing in LSTM Layers**","77110fd8":"**Converting the words in our Vocabulary to their corresponding embeddings and placing them in a matrix.**"}}