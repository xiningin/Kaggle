{"cell_type":{"697867a8":"code","fa483a2f":"code","c3f07f1f":"code","23a54366":"code","68bdff10":"code","39bb621b":"code","2b82ecf2":"code","cebf357a":"code","3dc0d3b4":"code","f75e658c":"code","8e0fb302":"code","7854d58d":"code","4450c52e":"code","d0c6aaac":"code","1c715c44":"code","5e8de78e":"code","a2dedeae":"code","d329bd98":"code","aa537924":"code","ad94b605":"code","22323cb8":"code","80d2c193":"code","d963ddca":"code","4f1313fa":"code","75e2e6f0":"code","a2d5e310":"code","04073b45":"code","173720f1":"code","fc2bdabf":"code","9c63df59":"code","c1a2395c":"code","edd51877":"code","ece48a00":"code","d5dedee8":"code","d4d9fe14":"code","ffbe3393":"code","c3fc0e1f":"code","19ad3393":"code","3b4de5c2":"code","10cc015c":"code","6479a399":"code","b07e3be8":"markdown","448db464":"markdown","1f8bcddb":"markdown","4ee625ea":"markdown","8ad729b0":"markdown","4f10a71d":"markdown"},"source":{"697867a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa483a2f":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","c3f07f1f":"data = pd.read_csv('..\/input\/motorcycle-dataset\/BIKE DETAILS.csv')\ndata.head()","23a54366":"data.shape","68bdff10":"data.info()","39bb621b":"data.columns","2b82ecf2":"data.dtypes","cebf357a":"data.isnull().sum()","3dc0d3b4":"np.round(data.describe(), 2)","f75e658c":"data['name'].value_counts().head(15)","8e0fb302":"data['owner'].value_counts()","7854d58d":"data['seller_type'].value_counts()","4450c52e":"data['year'].value_counts().head(10)","d0c6aaac":"top_bike_company = data['name'].value_counts().head(10)\nplt.figure(figsize=(10, 8))\nsns.barplot(x = top_bike_company, y = top_bike_company.index)\nplt.ylabel('Name of bike')\nplt.title('Top 10 bike company')\nplt.xlabel('Count')","1c715c44":"sns.countplot(x=data['seller_type'], data=data)","5e8de78e":"sns.countplot(x=data['owner'], data=data)","a2dedeae":"sns.distplot(data['selling_price'])","d329bd98":"sns.distplot(data['km_driven'])","aa537924":"sns.displot(data['year'])","ad94b605":"highest_bike_purchased_year = data['year'].value_counts().head(10)\nhighest_bike_purchased_year","22323cb8":"sns.countplot(x=data['year'].head(10))","80d2c193":"data['ex_showroom_price'].fillna(np.round(data['ex_showroom_price'].mean(), 2), inplace=True)","d963ddca":"sns.displot(data['ex_showroom_price'])","4f1313fa":"np.round(data['ex_showroom_price'], 2)","75e2e6f0":"data = pd.get_dummies(data, columns = ['owner', 'seller_type'], drop_first = True)","a2d5e310":"data.head(2)","04073b45":"def bike_model(model_name, excl_honda_hero=False):\n    model_list = []\n    if excl_honda_hero:\n        for i in data['name']:\n            if model_name in i and 'Hero' not in i:\n                model_list.append(i)\n        return model_list\n    else:\n        for i in data['name']:\n            if model_name in i:\n                model_list.append(i)\n        return model_list","173720f1":"royal_enfield = bike_model('Royal Enfield')\nhonda = bike_model('Honda',excl_honda_hero=True)\nbajaj = bike_model('Bajaj')\nyamaha = bike_model('Yamaha')\nsuzuki = bike_model('Suzuki')\nhero = bike_model('Hero')\ntvs = bike_model('TVS')\nktm = bike_model('KTM')","fc2bdabf":"def brand(i):\n    if i in royal_enfield:\n        return 'Royal Enfield'\n    elif i in honda:\n        return 'Honda'\n    elif i in bajaj:\n        return 'Bajaj'\n    elif i in yamaha:\n        return 'Yamaha'\n    elif i in hero:\n        return 'Hero'    \n    elif i in tvs:\n        return 'TVS'    \n    elif i in suzuki:\n        return 'Suzuki'  \n    elif i in ktm:\n        return 'KTM' \n    else:\n        return 'Other'","9c63df59":"data['brand'] = data['name'].apply(lambda x:brand(x))\ndata.head()","c1a2395c":"## Now, we are droping the name column from the dataset\ndata.drop('name', axis=1, inplace=True)","edd51877":"data= pd.get_dummies(data, columns=['brand'], drop_first=True)","ece48a00":"data.head(2)","d5dedee8":"X = data.drop('selling_price', axis=1)\ny = data['selling_price']","d4d9fe14":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)","ffbe3393":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()","c3fc0e1f":"lr.fit(X_train, y_train)","19ad3393":"y_pred = lr.predict(X_test)","3b4de5c2":"from sklearn.metrics import mean_squared_error, accuracy_score","10cc015c":"lr.score(X_train, y_train)","6479a399":"mse = mean_squared_error(y_pred, y_test)\nmse","b07e3be8":"### Training and Testing the dataset","448db464":"### Splitting the dataset into X and Y","1f8bcddb":"### Handling the categorical data","4ee625ea":"### Data Preprocessing","8ad729b0":"### Checking for the accuarcy","4f10a71d":"### Data Visualization"}}