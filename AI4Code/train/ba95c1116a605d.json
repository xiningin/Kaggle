{"cell_type":{"8fc5f487":"code","7c17ecaa":"code","cca85775":"code","bf45af48":"code","7fe5b792":"code","d01ee760":"code","dcd40be4":"code","dfd342bc":"code","02b45515":"code","135dfc77":"code","05444159":"code","e6354308":"code","0765fc22":"code","ef201aa8":"code","8aac5f86":"code","ab12e8a7":"code","6fff531e":"code","998ffea8":"code","87fabc41":"code","4b4fad68":"code","c2c48ded":"code","29af5361":"markdown","875aaa40":"markdown","ca2015d3":"markdown","8e895707":"markdown","97168d0a":"markdown","7e9a334c":"markdown"},"source":{"8fc5f487":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","7c17ecaa":"#Importing Data Set\nds= pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nids = test_df[['PassengerId']]","cca85775":"#View the data\nds.head()","bf45af48":"#Statistical details of the dataset\nds.describe()","7fe5b792":"# check missing values in train data\nds.isnull().sum()","d01ee760":"#remplace missing values with mean\nds[\"Age\"].fillna(ds[\"Age\"].median(skipna=True), inplace=True)\ntest_df[\"Age\"].fillna(test_df[\"Age\"].mean(skipna=True), inplace=True)\ntest_df[\"Fare\"].fillna(ds[\"Fare\"].mean(skipna=True), inplace=True)","dcd40be4":"#Convert categorical variables\ngender=pd.get_dummies(ds['Sex'],drop_first=True)\nds['Sex']=gender\ntest_gender=pd.get_dummies(test_df['Sex'],drop_first=True)\ntest_df['Sex']=test_gender","dfd342bc":"# Convert categorical variable\nds['TravelAlone']=np.where((ds[\"SibSp\"]+ds[\"Parch\"])>0, 0, 1)\ntest_df['TravelAlone']=np.where((test_df[\"SibSp\"]+test_df[\"Parch\"])>0, 0, 1)","02b45515":"#remplace missing values with \"S\" and Convert categorical variable\nds['Embarked'].fillna(\"S\", inplace = True)\nds['Embarked'] = ds['Embarked'].replace(['S','C','Q'],[0,1,2])\ntest_df['Embarked'].fillna(\"S\", inplace = True)\ntest_df['Embarked'] = test_df['Embarked'].replace(['S','C','Q'],[0,1,2])","135dfc77":"## Categorizing titles\nfor df in [ds,test_df]:\n    df['Titles'] = df['Name'].str.extract(r', (\\w+\\.)')\n\n    df['Titles'] = df['Titles'].replace(['Capt.', 'Col.','Dr.', 'Jonkheer.',  'Lady.',  'Major.',  'Master.',\n                                              'Rev.',  'Sir.', np.nan] , 'Special')\n\n    df['Titles'] = df['Titles'].replace(['Mlle.','Mlle','Ms.','Miss.'],'Miss')\n    df['Titles'] = df['Titles'].replace(['Mme.','Mme','Mrs.','Dona.'],'Mrs')\n    df['Titles'] = df['Titles'].replace(['Mr.',  'Don.'],'Mr')\n    df['Titles'] = df['Titles'].replace(['Miss','Mrs','Mr','Special'],[0,1,2,3])\n","05444159":"#Add Child Column  \nds['Child'] = ds['Age'].apply(lambda age: 1 if age>=18 else 0)\ntest_df['Child'] = test_df['Age'].apply(lambda age: 1 if age>=18 else 0)","e6354308":"#Exploration of Traveling alone\nsns.barplot(x='TravelAlone', y='Survived', data=ds, color=\"mediumturquoise\")\nplt.show()","0765fc22":"#Exploration of Embarked Port\nsns.barplot(x='Embarked', y='Survived', data=ds, color=\"teal\")\nplt.show()","ef201aa8":"#Exploration of Passenger Class\nsns.barplot(x='Pclass', y='Survived', data=ds, color=\"darkturquoise\")\nplt.show()","8aac5f86":"#Exploration of Gender Variable\nsns.barplot(x='Sex', y='Survived', data=ds, color=\"aquamarine\")\nplt.show()","ab12e8a7":"#drop variables which are not required\nds.drop(columns=['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)\ntest_df.drop(columns=['Cabin', 'Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)","6fff531e":"#View Data after cleaning\nds.head()","998ffea8":"ds.info()","87fabc41":"#Divide the data into \u201cattributes\u201d and \u201clabels\u201d\nX=ds.drop('Survived',axis=1) #separate the other attributes from the predicting attribute\ny=ds['Survived']","4b4fad68":"# Model initialization\nLogisticReg_model = LogisticRegression(max_iter=1000)\n# Fit the data(train the model)\nLogisticReg_model.fit(X,y)\n","c2c48ded":"predictions=LogisticReg_model.predict(test_df)\n\nresults = ids.assign(Survived = predictions) # assign predictions to ids\nresults.to_csv(\"submission.csv\", index=False) # write the final dataset to a csv file.","29af5361":"**View the data**","875aaa40":"**Data Cleaning**","ca2015d3":"**Data Modelling**","8e895707":"**Load the Data**","97168d0a":"**Predict survival on the Titanic**","7e9a334c":"**Model Evaluation**"}}