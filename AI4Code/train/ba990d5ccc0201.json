{"cell_type":{"4fb246f9":"code","40dcd3de":"code","f2b93043":"code","307b7a1f":"code","fcb04012":"code","b6c7f77b":"code","7108e1df":"code","10f9c735":"code","f13dcf7f":"markdown","cdc10702":"markdown","282fb8d3":"markdown","9dcbbdbc":"markdown","44034eb8":"markdown","19bf5ea2":"markdown","c867520e":"markdown","75393acb":"markdown","a4810e1e":"markdown","edf92bc0":"markdown","cdbb236a":"markdown","ae83d7b6":"markdown"},"source":{"4fb246f9":"%%HTML\n<style type=\"text\/css\">\n\ndiv.h2 { background-color: #159957;\n         background-image: linear-gradient(120deg, #155799, #159957);\n         text-align: left;\n         color: white;              \n         padding:9px;\n         padding-right: 100px; \n         font-size: 20px; \n         max-width: 1500px; \n         margin: auto; \n         margin-top: 40px;}\n                                           \n                                           \nbody {font-size: 12px;} \n                                           \n                                           \ndiv.h3 { color: #159957; \n         font-size: 18px; \n         margin-top: 20px; \n         margin-bottom:4px;}\n   \n                                      \ndiv.h4 { color: #159957;\n         font-size: 15px; \n         margin-top: 20px; \n         margin-bottom: 8px;}\n   \n                                           \nspan.note {\n    font-size: 5; \n    color: gray; \n    font-style: italic;}\n  \n                                      \nhr {\n    display: block; \n    color: gray\n    height: 1px; \n    border: 0; \n    border-top: 1px solid;}\n  \n                                      \nhr.light {\n    display: block; \n    color: lightgray\n    height: 1px; \n    border: 0; \n    border-top: 1px solid;}   \n    \n                                      \ntable.dataframe th \n{\n    border: 1px darkgray solid;\n    color: black;\n      <table align=\"left\">\n    ...\n  <\/table>\n    background-color: white;}\n    \n                                      \ntable.dataframe td \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 11px;\n    text-align: center;} \n   \n                                                \ntable.rules th \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 11px;\n    align: left;}\n       \n        \n                                           \ntable.rules td \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 13px;\n    text-align: center;} \n   \n                                      \n                                      \ntable.rules tr.best\n{\n    color: green;}    \n    \n                                      \n.output { \n    align-items: left;}\n        \n                                      \n.output_png {\n    display: table-cell;\n    text-align: left;\n    margin:auto;}                                          \n                                                                    \n                                                             \n<\/style>  ","40dcd3de":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as patches\nimport seaborn as sns  \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#init_notebook_mode(connected=True)  # remove  \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport warnings\nwarnings.filterwarnings('ignore')\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#import sparklines\nimport colorcet as cc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom IPython.display import HTML\nfrom IPython.display import Image\nfrom IPython.display import display\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom PIL import Image\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport scipy \nfrom scipy import constants\nimport math\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ styles ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport colorcet as cc\nplt.style.use('seaborn') \ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n##%config InlineBackend.figure_format = 'retina'   < - keep in case \n%config InlineBackend.figure_format = 'svg' \n# pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 500)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n###?sns.set_context('paper')  #Everything is smaller, use ? \nSMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 12\n# plt.rc('font', size=SMALL_SIZE)          # controls default text sizes\n# plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\n# plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\n# plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n# plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n# plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\n# plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n##This helps set size of all fontssns.set(font_scale=1.5)\n#~~~~~~~~~~~~~~~~~~~~~~~~~ B O K E H ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.io import show\nfrom bokeh.io import push_notebook\nfrom bokeh.io import output_notebook\nfrom bokeh.io import output_file\nfrom bokeh.io import curdoc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.plotting import show                  \nfrom bokeh.plotting import figure                  \nfrom bokeh.plotting import output_notebook \nfrom bokeh.plotting import output_file\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models import Circle\nfrom bokeh.models import Grid \nfrom bokeh.models import LinearAxis\nfrom bokeh.models import Plot\nfrom bokeh.models import Slider\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.models import FactorRange\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.models import FixedTicker\nfrom bokeh.models import PrintfTickFormatter\nfrom bokeh.models.glyphs import HBar\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.core.properties import value\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.palettes import Blues4\nfrom bokeh.palettes import Spectral5\nfrom bokeh.palettes import Blues8\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.layouts import row\nfrom bokeh.layouts import column\nfrom bokeh.layouts import gridplot\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.sampledata.perceptions import probly\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom bokeh.transform import factor_cmap\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Altair ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Altair\nimport altair as alt\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ M L  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nimport gc, pickle, tqdm, os, datetime\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. kaggle import raw data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n# My data sources: \n# ==================\n# \/kaggle\/input\/liverpool-ion-switching\/train.csv\n# \/kaggle\/input\/liverpool-ion-switching\/test.csv\n# \/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv\n\n\nion = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\n\n\n\n# ion.signal.describe()\n# count    5.000000e+06\n# mean     1.386246e+00\n# std      3.336219e+00\n# min     -5.796500e+00\n# 25%     -1.594800e+00\n# 50%      1.124000e+00\n# 75%      3.690100e+00\n# max      1.324400e+01\n\n#  You will need to do this, get the library, and then comment out after:   \n#  !pip install altair vega_datasets notebook vega\n\n\n\n# the first time you need this (internet enabled), but then comment out afterwards... \n# !pip install altair vega_datasets notebook vega\n# !pip install --upgrade altair vega_datasets notebook vega\n\n\n\n\n# HTML(\n#     \"This block does the following:<br\/><ul>\"\n#     \"<li>Loads the column names and questions into <code>questions<\/code>.<\/li>\"\n#     \"<li>Separates out groups of questions (e.g. 'AssessJob1-5') in <code>grouped_questions<\/code>.<\/li>\"\n#     \"<li>Ingests the data into a data frame <code>df<\/code>.<\/li>\"\n#     \"<li>Sets every column except <code>ConvertedSalary<\/code> to be a string.<\/li>\"\n#     \"<\/ul>\"\n# )\n\n\n#   !jupyter notebook --version   #  5.5.0\n\n\n\n\n# source = pd.DataFrame({\n#     'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n#     'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n# })\n\n# alt.Chart(source).mark_bar().encode(\n#     x='a',\n#     y='b'\n# )\n\n\n\n# Define and register a kaggle renderer for Altair\n\nimport json\nfrom IPython.display import HTML\n\nKAGGLE_HTML_TEMPLATE = \"\"\"\n<style>\n.vega-actions a {{\n    margin-right: 12px;\n    color: #757575;\n    font-weight: normal;\n    font-size: 13px;\n}}\n.error {{\n    color: red;\n}}\n<\/style>\n<div id=\"{output_div}\"><\/div>\n<script>\nrequirejs.config({{\n    \"paths\": {{\n        \"vega\": \"{base_url}\/vega@{vega_version}?noext\",\n        \"vega-lib\": \"{base_url}\/vega-lib?noext\",\n        \"vega-lite\": \"{base_url}\/vega-lite@{vegalite_version}?noext\",\n        \"vega-embed\": \"{base_url}\/vega-embed@{vegaembed_version}?noext\",\n    }}\n}});\nfunction showError(el, error){{\n    el.innerHTML = ('<div class=\"error\">'\n                    + '<p>JavaScript Error: ' + error.message + '<\/p>'\n                    + \"<p>This usually means there's a typo in your chart specification. \"\n                    + \"See the javascript console for the full traceback.<\/p>\"\n                    + '<\/div>');\n    throw error;\n}}\nrequire([\"vega-embed\"], function(vegaEmbed) {{\n    const spec = {spec};\n    const embed_opt = {embed_opt};\n    const el = document.getElementById('{output_div}');\n    vegaEmbed(\"#{output_div}\", spec, embed_opt)\n      .catch(error => showError(el, error));\n}});\n<\/script>\n\"\"\"\n\n\nclass KaggleHtml(object):\n    def __init__(self, base_url='https:\/\/cdn.jsdelivr.net\/npm'):\n        self.chart_count = 0\n        self.base_url = base_url\n        \n    @property\n    def output_div(self):\n        return \"vega-chart-{}\".format(self.chart_count)\n        \n    def __call__(self, spec, embed_options=None, json_kwds=None):\n        # we need to increment the div, because all charts live in the same document\n        self.chart_count += 1\n        embed_options = embed_options or {}\n        json_kwds = json_kwds or {}\n        html = KAGGLE_HTML_TEMPLATE.format(\n            spec=json.dumps(spec, **json_kwds),\n            embed_opt=json.dumps(embed_options),\n            output_div=self.output_div,\n            base_url=self.base_url,\n            vega_version=alt.VEGA_VERSION,\n            vegalite_version=alt.VEGALITE_VERSION,\n            vegaembed_version=alt.VEGAEMBED_VERSION\n        )\n        return {\"text\/html\": html}\n    \n    \n\nalt.data_transformers.disable_max_rows()\n# IF YOU ARE EVER GOING TO PROCESS \n\n    \n#alt.themes.enable('ggplot2')\n\n    \n# IMPORTANT: \nalt.renderers.register('kaggle', KaggleHtml())\n\n\n# print(\"Define and register the kaggle renderer. Enable with\\n\\n\"\n#       \"    alt.renderers.enable('kaggle')\")\n\nalt.renderers.enable('kaggle')\n\nimport warnings  \nwarnings.filterwarnings('ignore')\n","f2b93043":"\ncorrect = pd.DataFrame(ion.open_channels.value_counts())\n\n#column_names = [\"open_channels\", \"counts\", \"colors\"]\ncorrect.reset_index(inplace=True)\ncorrect['color']='yellow'\ncorrect.columns = ['ChannelNumber', 'ChannelCount', 'Color']\n\n\nplt.style.use('dark_background')\nplt.figure(figsize=(8,7))\nplt.hlines(y=correct.ChannelNumber, xmin=0, xmax=correct.ChannelCount, color=correct.Color, alpha=0.6, linewidth=14)\nplt.gca().set(ylabel='\\n$Channel Number$\\n', xlabel='\\n$Instance Count$\\n')\nplt.yticks(fontsize=10)\nplt.title('\\nTraining Data:  Overall Open Channels Distribution\\n(5M samples)\\n\\n', fontdict={'size':11})\nplt.grid(linestyle='--', alpha=0.2)\nplt.gca().yaxis.set_major_locator(plt.MultipleLocator(1))   \n#plt.gca().yaxis.set_minor_locator(plt.MultipleLocator(10))   \nsns.despine(top=True, right=True, left=True, bottom=True)  \n# plt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();\n\n\n# this was slightly wrong, fixed it up:\n# temp = pd.DataFrame(columns = column_names)\n# temp['counts'] = ion.open_channels.value_counts().values\n# temp['open_channels'] = ion.open_channels.value_counts().index\n# temp['colors'] = 'yellow'\n\n# plt.style.use('dark_background')\n# plt.figure(figsize=(8,7))\n# plt.hlines(y=temp.index, xmin=0, xmax=temp.counts, color=temp.colors, alpha=0.6, linewidth=14)\n# plt.gca().set(ylabel='\\n$Channel Number$\\n', xlabel='\\n$Instance Count$\\n')\n# plt.yticks(fontsize=10)\n# plt.title('\\nTraining Data:  Overall Open Channels Distribution\\n(5M samples)\\n\\n', fontdict={'size':11})\n# plt.grid(linestyle='--', alpha=0.2)\n# plt.gca().yaxis.set_major_locator(plt.MultipleLocator(1))   \n# #plt.gca().yaxis.set_minor_locator(plt.MultipleLocator(10))   \n# sns.despine(top=True, right=True, left=True, bottom=True)  \n# # plt.gca().invert_yaxis()\n# plt.tight_layout()\n# plt.show();\n\n# column_names = [\"open_channels\", \"counts\", \"colors\"]\n# temp = pd.DataFrame(columns = column_names)\n# temp['counts'] = ion.open_channels.value_counts().values\n# temp['open_channels'] = ion.open_channels.value_counts().index\n# temp['colors'] = 'yellow'\n\n# plt.style.use('dark_background')\n# plt.figure(figsize=(8,7))\n# plt.hlines(y=temp.index, xmin=0, xmax=temp.counts, color=temp.colors, alpha=0.6, linewidth=14)\n# plt.gca().set(ylabel='\\n$Channel Number$\\n', xlabel='\\n$Instance Count$\\n')\n# plt.yticks(fontsize=10)\n# plt.title('\\nTraining Data:  Overall Open Channels Distribution\\n(5M samples)\\n\\n', fontdict={'size':11})\n# plt.grid(linestyle='--', alpha=0.2)\n# plt.gca().yaxis.set_major_locator(plt.MultipleLocator(1))   \n# #plt.gca().yaxis.set_minor_locator(plt.MultipleLocator(10))   \n# sns.despine(top=True, right=True, left=True, bottom=True)  \n# # plt.gca().invert_yaxis()\n# plt.tight_layout()\n# plt.show();\n\n\n","307b7a1f":"temp2 = pd.DataFrame(ion.open_channels.value_counts())\ntemp2.index.name = 'Channel ID'\ntemp2.columns=['InstanceCount']\n# cm = sns.light_palette(\"green\", as_cmap=True)\ntemp2.style.format(\"{:,.0f}\")\n# temp2.style.set_caption('Instace Count of Channel Instances:').background_gradient(cmap=cm)","fcb04012":"\nbars = alt.Chart(correct).mark_bar(color='orange',size=20).encode(\n    alt.X('ChannelNumber:Q', axis=alt.Axis(grid=False, tickCount=10, title='Channel Number'),   ),   \n    alt.Y(\"ChannelCount:Q\", axis=alt.Axis(grid=True, title='Channel InstanceCount'))\n)\n\n\ntext = bars.mark_text(\n    align='center',\n    baseline='middle',\n    dx=0, dy=-10,\n    color=\"darkgrey\"\n).encode(\n    text='ChannelCount:Q'\n)\n\n(bars + text).properties(width=600,height=500).interactive(bind_y=False).configure_view(strokeWidth=0).configure(background='white')\n\n\n# correct['color']='yellow'\n# correct.columns = ['ChannelNumber', 'ChannelCount', 'Color']\n\n# plt.hlines(y=correct.ChannelNumber, xmin=0, xmax=correct.ChannelCount, color=correct.Color, alpha=0.6, linewidth=14)\n# plt.gca().set(ylabel='\\n$Channel Number$\\n', xlabel='\\n$Instance Count$\\n')\n# plt.yticks(fontsize=10)\n# plt.title('\\nTraining Data:  Overall Open Channels Distribution\\n(5M samples)\\n\\n', fontdict={'size':11})\n# plt.grid(linestyle='--', alpha=0.2)\n# plt.gca().yaxis.set_major_locator(plt.MultipleLocator(1))   \n# #plt.gca().yaxis.set_minor_locator(plt.MultipleLocator(10))   \n# sns.despine(top=True, right=True, left=True, bottom=True)  \n# # plt.gca().invert_yaxis()\n# plt.tight_layout()\n# plt.show();\n","b6c7f77b":"\n# Hits pretty hard and slows down, pause for now...\n# temp3 = ion[:50000]\n\n# plt.style.use('dark_background')\n# fig, ax = plt.subplots(figsize=(7,15))\n\n# # Create a color if the group is \"B\"\n# # my_color= np.where( (df04.group == 'NE') | (df04.group == 'NO') | (df04.group == 'LA') , 'orange', 'skyblue')\n# my_color = 'orange'\n# # my_size=np.where(df04['group']=='B', 70, 30)\n \n# plt.hlines(y=temp3.index, xmin=0, xmax=temp3.signal, color=my_color, alpha=0.4, linewidth=1)\n# #plt.scatter(df04.Yards, my_range, color=my_color, s=my_size, alpha=1)\n \n    \n# # Add title and exis names\n# # plt.yticks(my_range, df04.group)\n# plt.title(\"\\nSignal (voltage) over the course of time (samples) \\n\\n\", loc='center', fontsize=10)\n# plt.xlabel('\\n Signal (Volts)', fontsize=10)\n# plt.ylabel('')\n# ##############plt.ylabel('NFL\\nTeam\\n')\n\n# ax.spines['top'].set_linewidth(.3)  \n# ax.spines['left'].set_linewidth(.3)  \n# ax.spines['right'].set_linewidth(.3)  \n# ax.spines['bottom'].set_linewidth(.3)  \n\n\n# # plt.text(0, 33.3, r'Top Three:  LA Rams, New England Patriots, and New Orleans Saints absolutely dominating the rushing game...', {'color': 'white', 'fontsize': 8.5})\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# plt.gca().invert_yaxis()\n# plt.grid(linestyle='--', alpha=0.15)\n\n# plt.tight_layout()\n# plt.show();\n\n\n\n\n\n# data = pd.DataFrame({\n#     'x': pd.date_range('2012-01-01', freq='D', periods=365),\n#     'y1': rand.randn(365).cumsum(),\n#     'y2': rand.randn(365).cumsum(),\n#     'y3': rand.randn(365).cumsum()\n# })\n\n# data = data.melt('x')\n# data.head()\n\n\n# chart = alt.Chart(data).mark_line().encode(\n#     x='x:T',\n#     y='value:Q',\n#     color='variable:N'\n# ).interactive(bind_y=False)\n\n\n# chart\n\n\n# chart = alt.Chart(data).mark_circle().encode(\n#     x='x:T',\n#     y='value:Q',\n#     color='variable:N'\n# ).interactive(bind_y=False)\n\n\n# chart\n\n\n\n\n\ntemp3 = ion[:50000]\n# my_color = 'orange' \n# plt.hlines(y=temp3.index, xmin=0, xmax=temp3.signal, color=my_color, alpha=0.4, linewidth=1)\n# plt.title(\"\\nSignal (voltage) over the course of time (samples) \\n\\n\", loc='center', fontsize=10)\n# plt.xlabel('\\n Signal (Volts)', fontsize=10)\n# plt.ylabel('')\n\n\nchart = alt.Chart(temp3).mark_circle(size=2,color='maroon').encode(\n    \n    alt.X('time:T',  axis=alt.Axis(title='TimeStamp') ),\n    \n    alt.Y('signal:Q', axis=alt.Axis(gridColor='grey', gridWidth=.2, title='SignalStrength')  )).properties(title='Batch-1: Signal Value (Interactive)',width=750, height=275).interactive(bind_y=False)\n    \n    #olor='variable:N'\n\n\nchart.configure_view(strokeWidth=0)\n","7108e1df":"# dft = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\n# dft.to_csv(\"submission.csv\",index=False)","10f9c735":"# RiffRaff:\n\n\n\n\n# rand = np.random.RandomState(578493)\n# data = pd.DataFrame({\n#     'x': pd.date_range('2012-01-01', freq='D', periods=365),\n#     'y1': rand.randn(365).cumsum(),\n#     'y2': rand.randn(365).cumsum(),\n#     'y3': rand.randn(365).cumsum()\n# })\n\n# data = data.melt('x')\n# data.head()\n\n\n# chart = alt.Chart(data).mark_line().encode(\n#     x='x:T',\n#     y='value:Q',\n#     color='variable:N'\n# ).interactive(bind_y=False)\n\n\n# chart\n\n\n# chart.mark_circle()\n\n\n","f13dcf7f":"The problem:  &nbsp; It's half a million datapoints we are trying to plot here, NOT easy to do, very easy to overplot if you aren't careful, thus the need to control the mark size. ","cdc10702":"<div class=\"h3\"><i>Approach:<\/i><\/div>\n* Emphasis on _extremely_ clear visualization\n* Incorporate some D3 and Altair for fun \n* New and innovative approaches to examining our data\n* We will be predicting the number of `open_channels` present (based on the signal data values provided)\n* Core signalling data is 'electrophysiological' in nature (Electrophysiology is the branch of physiology that pertains to the flow of ions (ion current) in biological tissues)  \n  * Inherently this is the domain of electrical properties of biological cells\/tissues, etc. \n<br>\n\n","282fb8d3":"<br><br><br><br><br>","9dcbbdbc":"> **NOTE:** &ensp; While the data's time series might **appear** to be continuous, the data is actually from **discrete** batches of 50 seconds long, 10 kHz samples (i.e. 10,000 samples\/sec, and thus 500,000 samples per 50s individual batch).\n  \n> In other words, the data from timestamp 0.0001 - 50.0000 is a different batch than 50.0001 - 100.0000, and thus discontinuous between 50.0000 and 50.0001.","44034eb8":"### LineChart D3 rendered closeup also available here:   [here](https:\/\/bl.ocks.org\/tombresee\/raw\/42777aadd72477bbf523ed2778370383\/)\n * The beauty of SVG (scalable vector graphics) is that you don't lose granularity as you zoom in :) \n * Takes a few seconds to load so be patient (this is batch 0)\n * Eventually I'll build sweep capability into the D3 viz so you can select a particular window to zoom in on...","19bf5ea2":"<br>\n<a id='bkground'><\/a>\n<div class=\"h2\"><i>NG-EDA<\/i><\/div>\n<div class=\"h3\">Exploratory Data Analysis:<\/div>\n<div class=\"h3\"><i>Towards Using Ion Channel Data to Better Model Automatic Identification Methods<\/i><\/div>\n<br>","c867520e":"<div class=\"h3\"><i>Author:&ensp; Tom Bresee<\/i><\/div>\n&ensp; &ensp;   - Location: &ensp; Frisco, TX, USA  \n&ensp; &ensp;   - Job:  Member of Technical Staff, T-Mobile USA  \n&ensp; &ensp;   - Email: &ensp; tom.bresee@t-mobile.com  \n","75393acb":"#### Channel and Counts:\n * Interactive view, rendered in Altair","a4810e1e":"<br>\n<div class=\"h3\"><i>Progress:<\/i><\/div><br>\n**Feb 25, 2020 ** &nbsp; - &nbsp; *Begin*   ","edf92bc0":"<div class=\"h3\"><i>Summary of our dataset:<\/i><\/div> \n<p style=\"margin-top: 50px\">It is always important to look at our entire training dataset and examine the descriptive statistics:<\/p>\n&ensp; **Training Data: Total observations:** &ensp; 5,000,000  (5M)  \n&ensp; **Testing Data:   Total observations:** &ensp; 2,000,000  (2M)   \n&ensp; **Number of unique features:** &ensp; 2   \n&ensp; **Actual Data Features:** &ensp; Time, Signal    \n&ensp; **Prediction Target field:** &ensp; Open Channels  \n&ensp; **Batch Count:** &ensp;  10   \n&ensp; **A Batch Size (in seconds):** &ensp;  50    \n&ensp; **Batch Size (in data observations\/rows):** &ensp;  500,000  ","cdbb236a":"#### Signal Value (Batch 1):\n * Interactive view, rendered in Altair","ae83d7b6":"<div class=\"h3\"><i>The University of Liverpool:<\/i><\/div>\n* The University of Liverpool is a public university based in the city of Liverpool (England), and ten Nobel Prize winners are amongst its alumni and past faculty\n* The University of Liverpool\u2019s [Institute of Ageing and Chronic Disease](https:\/\/www.liverpool.ac.uk\/ageing-and-chronic-disease\/) is actively working to advance ion channel research"}}