{"cell_type":{"47660d93":"code","726ce0b7":"code","ebc697cf":"code","24022577":"code","40fce02c":"code","8683cb3d":"code","afb4d8b8":"code","aaef2ab2":"code","316d0023":"code","3fc1b18c":"code","678ef817":"code","c24d2e80":"code","5fed144a":"code","1c689fdc":"code","0db5948b":"code","fea13845":"code","7848ceb9":"code","1f20c4a1":"code","75c04254":"code","b8bc2665":"code","22d0bd97":"code","9e513a66":"code","85b07195":"markdown","b2837bc2":"markdown","2af171fc":"markdown","49e9f59c":"markdown","5820567b":"markdown"},"source":{"47660d93":"import tensorflow as tf\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random ","726ce0b7":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","ebc697cf":"train.shape","24022577":"test.shape","40fce02c":"train.head()","8683cb3d":"sns.countplot(train.label)","afb4d8b8":"test.head()","aaef2ab2":"# Create training and testing arrays\ntraining = np.array(train, dtype = 'float32')\ntesting = np.array(test, dtype='float32')","316d0023":"training","3fc1b18c":"# Let's view some images!\ni = random.randint(1,42000) # select any random index from 1 to 60,000\nplt.imshow( training[i,1:].reshape((28,28)) ) # reshape and plot the image","678ef817":"# Let's view more images in a grid format\n# Define the dimensions of the plot grid \nW_grid = 15\nL_grid = 15\n\n# fig, axes = plt.subplots(L_grid, W_grid)\n# subplot return the figure object and axes object\n# we can use the axes object to plot specific figures at various locations\n\nfig, axes = plt.subplots(L_grid, W_grid, figsize = (17,17))\n\naxes = axes.ravel() # flaten the 15 x 15 matrix into 225 array\n\nn_training = len(training) # get the length of the training dataset\n\n# Select a random number from 0 to n_training\nfor i in np.arange(0, W_grid * L_grid): # create evenly spaces variables \n\n    # Select a random number\n    index = np.random.randint(0, n_training)\n    # read and display an image with the selected index    \n    axes[i].imshow( training[index,1:].reshape((28,28)) )\n    axes[i].set_title(training[index,0], fontsize = 8)\n    axes[i].axis('off')\n\nplt.subplots_adjust(hspace=0.4)","c24d2e80":"# Prepare the training and testing dataset \nX_train = training[:,1:]\/255\ny_train = training[:,0]\n\nX_test = testing[:,:]\/255","5fed144a":"X_train.shape","1c689fdc":"y_train.shape","0db5948b":"X_test.shape","fea13845":"# unpack the tuple and channel as 1\nX_train = X_train.reshape(X_train.shape[0], *(28, 28, 1))\nX_test = X_test.reshape(X_test.shape[0], *(28, 28, 1))","7848ceb9":"from tensorflow.keras import datasets, layers, models\n\ncnn = models.Sequential()\n\ncnn.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (28,28,1,)))\ncnn.add(layers.MaxPooling2D(2,2))\n\ncnn.add(layers.Conv2D(64, (3,3), activation = 'relu'))\ncnn.add(layers.MaxPooling2D(2,2))\n\ncnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\ncnn.add(layers.Flatten())\n\ncnn.add(layers.Dense(64, activation = 'relu'))\n\ncnn.add(layers.Dense(10, activation = 'softmax'))\ncnn.summary()","1f20c4a1":"cnn.compile(loss ='sparse_categorical_crossentropy', optimizer = 'Adam', metrics =['accuracy'])","75c04254":"history = cnn.fit(X_train,\n                  y_train,\n                  batch_size = 512,\n                  epochs = 100,\n                  verbose = 1)","b8bc2665":"predicted_classes = cnn.predict_classes(X_train)","22d0bd97":"L = 5\nW = 5\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel() # \n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_train[i].reshape(28,28))\n    axes[i].set_title(\"Prediction Class = {:0.1f}\\n True Class = {:0.1f}\".format(predicted_classes[i], y_train[i]))\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=0.5)","9e513a66":"pred = cnn.predict(X_test)\ny_pred = pred.argmax(axis=-1)\nres = pd.DataFrame()\nres['ImageId'] = list(range(1,28001))\nres['Label'] = y_pred\nres.to_csv(\"output.csv\", index = False)","85b07195":"# **Import Libraries**","b2837bc2":"# **Build and train a deep learning model**","2af171fc":"# **Generate Predictions**","49e9f59c":"# **Data Visualization**","5820567b":"# **Load Dataset**"}}