{"cell_type":{"b90cf018":"code","98910f91":"code","9aa35ff7":"code","680cee67":"code","cc652c4a":"code","80428592":"code","147da601":"code","6d86b6f1":"code","20f1a2ec":"code","74efe985":"code","e1e18961":"code","68611a9c":"code","3015cf67":"code","70dea50c":"code","c471ce69":"code","975f711f":"code","0257f22f":"code","0c3d53c6":"code","b4ef1828":"code","1932d6a7":"code","12eac759":"code","cade62c9":"code","101b1eb2":"code","28d84705":"markdown","096e4110":"markdown","757125f6":"markdown","c78f92ea":"markdown","74a90f76":"markdown","83aa1b71":"markdown"},"source":{"b90cf018":"class Vehiculo:\n    color = None\n    placa = None\n    \n    def __init__(self, color=None, placa=None):\n        self.color=color\n        self.placa=placa\n        \n    def obtener_datos_principales(self):\n        return f\"El veh\u00edculo es de color {self.color} y su placa es {self.placa}\"\n                \nclass Carro(Vehiculo):\n    cinturones = None\n    puertas = None\n    \n    def __init__(self, color=None, placa=None, cinturones=None, puertas=None):\n        self.color=color\n        self.placa=placa\n        self.cinturones=cinturones\n        self.puertas=puertas\n          \n    def obtener_datos_carro(self):\n        result = f\"El veh\u00edculo es de color {self.color}, su placa es {self.placa}, \"\n        result += f\"cuenta con {self.cinturones} cinturones y {self.puertas} puertas\"\n        return result\n                \nclass Moto(Vehiculo):\n    color_casco = None\n\n    def __init__(self, color=None, placa=None, color_casco=None):\n        self.color=color\n        self.placa=placa\n        self.color_casco=color_casco\n\n    def obtener_datos_moto(self):\n        result = f\"El veh\u00edculo es de color {self.color}, su placa es {self.placa} y \"\n        result += f\"cuenta con un casco de color {self.color_casco}\"\n        return result\n","98910f91":"c = Carro('Rojo', 'SSS237', 4, 4)\nm = Moto('Azul', 'AR36F', 'Negro')","9aa35ff7":"print (c.obtener_datos_principales())","680cee67":"print (c.obtener_datos_carro())","cc652c4a":"print (m.obtener_datos_moto())","80428592":"class Vehiculo:\n    color = None\n    placa = None\n    \n    def __init__(self, color=None, placa=None):\n        self.color=color\n        self.placa=placa\n        \n    def obtener_datos_principales(self):\n        return f\"El veh\u00edculo es de color {self.color} y su placa es {self.placa}\"\n                \nclass Carro(Vehiculo):\n    cinturones = None\n    puertas = None\n    \n    def __init__(self, color=None, placa=None, cinturones=None, puertas=None):\n        super().__init__(color, placa)\n        self.cinturones=cinturones\n        self.puertas=puertas\n          \n    def obtener_datos_carro(self):\n        result = f\"El veh\u00edculo es de color {self.color}, su placa es {self.placa}, \"\n        result += f\"cuenta con {self.cinturones} cinturones y {self.puertas} puertas\"\n        return result\n                \nclass Moto(Vehiculo):\n    color_casco = None\n\n    def __init__(self, color=None, placa=None, color_casco=None):\n        super().__init__(color, placa)\n        self.color_casco=color_casco\n\n    def obtener_datos_moto(self):\n        result = f\"El veh\u00edculo es de color {self.color}, su placa es {self.placa} y \"\n        result += f\"cuenta con un casco de color {self.color_casco}\"\n        return result\n","147da601":"c = Carro('Rojo', 'SSS237', 4, 4)\nm = Moto('Azul', 'AR36F', 'Negro')","6d86b6f1":"print (c.obtener_datos_principales())\nprint (c.obtener_datos_carro())\nprint (m.obtener_datos_moto())","20f1a2ec":"import json\n\nclass Vehiculo:\n    color = None\n    placa = None\n    \n    def __init__(self, color=None, placa=None):\n        self.color=color\n        self.placa=placa\n        \n    def obtener_datos_principales(self):\n        return f\"El veh\u00edculo es de color {self.color} y su placa es {self.placa}\"\n        \n    def obtenerDict(self):\n        data = {}\n        data['color'] = self.color\n        data['placa'] = self.placa\n        return data\n                \nclass Carro(Vehiculo):\n    cinturones = None\n    puertas = None\n    \n    def __init__(self, color=None, placa=None, cinturones=None, puertas=None):\n        super().__init__(color, placa)\n        self.cinturones=cinturones\n        self.puertas=puertas\n          \n    def obtener_datos(self):\n        result = super().obtener_datos_principales()\n        result += f\", cuenta con {self.cinturones} cinturones y {self.puertas} puertas\"\n        return result\n    \n    def obtenerJson(self):\n        data = super().obtenerDict()\n        data['cinturones'] = self.cinturones\n        data['puertas'] = self.puertas\n        return json.dumps(data)\n                \nclass Moto(Vehiculo):\n    color_casco = None\n\n    def __init__(self, color=None, placa=None, color_casco=None):\n        super().__init__(color, placa)\n        self.color_casco=color_casco\n\n    def obtener_datos(self):\n        result = super().obtener_datos_principales()\n        result += f\" y cuenta con un casco de color {self.color_casco}\"\n        return result\n\n    def obtenerJson(self):\n        data = super().obtenerDict()\n        data['color_casco'] = self.color_casco\n        return json.dumps(data)\n                ","74efe985":"c = Carro('Rojo', 'SSS237', 4, 4)\nm = Moto('Azul', 'AR36F', 'Negro')","e1e18961":"print (c.obtener_datos_principales())\nprint (c.obtener_datos())\nprint (m.obtener_datos_principales())\nprint (m.obtener_datos())","68611a9c":"print (c.obtenerJson())","3015cf67":"print (m.obtenerJson())","70dea50c":"print (c.obtenerDict())","c471ce69":"\nclass Vehiculo:\n    __color = None\n    __placa = None\n    \n    def __init__(self, color=None, placa=None):\n        self.__color=color\n        self.__placa=placa\n        \n    def obtener_datos_principales(self):\n        return f\"El veh\u00edculo es de color {self.__color} y su placa es {self.__placa}\"\n        \n    def __obtenerDict(self):\n        data = {}\n        data['color'] = self.__color\n        data['placa'] = self.__placa\n        return data\n                \n    def obtener_color(self):\n        return self.__color\n                \n    def obtener_placa(self):\n        return self.__placa\n    \n    def cambiar_color(self, color):\n        self.__color = color\n    \n    def cambiar_placa(self, placa):\n        self.__placa = placa\n    \nclass Carro(Vehiculo):\n    __cinturones = None\n    puertas = None\n    \n    def __init__(self, color=None, placa=None, cinturones=None, puertas=None):\n        super().__init__(color, placa)\n        self.__cinturones=cinturones\n        self.puertas=puertas\n          \n    def obtener_datos(self):\n        result = super().obtener_datos_principales()\n        result += f\", cuenta con {self.__cinturones} cinturones y {self.puertas} puertas\"\n        return result\n    \n    def obtenerJson(self):\n        data = super().__obtenerDict()\n        data['cinturones'] = self.__cinturones\n        data['puertas'] = self.puertas\n        return json.dumps(data)\n                          \n    def obtener_cinturones(self):\n        return self.__cinturones\n    \n    def cambiar_cinturones(self, cinturones):\n        self.__cinturones = cinturones\n    \nclass Moto(Vehiculo):\n    color_casco = None\n\n    def __init__(self, color=None, placa=None, color_casco=None):\n        super().__init__(color, placa)\n        self.color_casco=color_casco\n\n    def obtener_datos(self):\n        result = super().obtener_datos_principales()\n        result += f\" y cuenta con un casco de color {self.color_casco}\"\n        return result\n\n    def obtenerJson(self):\n        data = super().__obtenerDict()\n        data['color_casco'] = self.color_casco\n        return json.dumps(data)\n                ","975f711f":"c = Carro('Rojo', 'SSS237', 4, 4)\nm = Moto('Azul', 'AR36F', 'Negro')","0257f22f":"print (c.obtener_datos_principales())\nprint (c.obtener_datos())\nprint (m.obtener_datos_principales())\nprint (m.obtener_datos())","0c3d53c6":"m.color_casco","b4ef1828":"print(m.__color)","1932d6a7":"m.obtener_color()","12eac759":"m.cambiar_color('Negro')","cade62c9":"m.obtener_color()","101b1eb2":"c.__obtenerDict()","28d84705":"# Programaci\u00f3n Orientada a Objetos\n\nLa Programaci\u00f3n Orientada a Objetos tiene tres propiedades que facilitan la programaci\u00f3n y la reutilizaci\u00f3n del c\u00f3digo.\n\n## Herencia\n\nComo vimos en el bloque anterior la Herencia en Programaci\u00f3n Orientada a Objetos, permite trasladar a una Clase, los atributos de la clase padre, eso tambi\u00e9n sucede con los m\u00e9todos.","096e4110":"# Caso Extendido\n\nResuelva el siguiente problema:\n\nLa dirigencia de Conalcr\u00e9ditos, nos ha manifestado que el an\u00e1lisis realizado recientemente ha cumplido con las expectativas de la empresa.\n\nAhora quiere complementar la soluci\u00f3n con la generaci\u00f3n de la n\u00f3mina de los empleados, la idea es que se liquide el valor a pagar a cada uno de los empleados, teniendo en cuenta los siguientes puntos:\n\n1. El sistema debe recibir un archivo de entrada en formato JSON, con los datos de los empleados (se debe simular uno), el archivo contiene una lista de diccionarios y cada diccionario est\u00e1 relacionado con un empleado.\n  \n   Los datos de cada empleado, son los siguientes:\n    \n   identificacion, nombre, edad, genero, cargo, salario, cuenta_bancaria, banco\n   \n   Para el desarrollo, genere un archivo usando como base la informaci\u00f3n de los empleados definidos en el caso extendido de la Clase 4, los datos faltantes y que no sean sencillos deducir, ll\u00e9nelos usando t\u00e9cnica de generaci\u00f3n de datos aleatorios.  Tenga en cuenta que ning\u00fan empleado puede ganar menos que 1 salario m\u00ednimo ($828.116 en el 2019).\n   \n2. El segundo archivo de entrada es el archivo de horarios_2019.xlsx, similar al del caso extendido de la clase 4.  Este archivo le entregar\u00e1 informaci\u00f3n acerca del ingreso del empleado a la organizaci\u00f3n, cuando y que tiempo estuvo en vacaciones (las celdas tienen la palabra VACACIONES), cuando estuvo incapacitado (las celdas con la palabra INCAPACIDAD), tenga en cuenta para los c\u00e1lculos las siguientes condiciones laborales:\n   \n   Se trabaj\u00f3 de **lunes a viernes** con hora de ingreso a las **7:30 am** y los d\u00edas **s\u00e1bados** con hora de ingreso a las **8:00 am**.  \n\n    Por favor ignorar los d\u00edas festivos que se relacionan a continuaci\u00f3n, estos d\u00edas no deben ser parte del an\u00e1lisis.\n\n    * A\u00f1o Nuevo - 2019-01-01\n    * D\u00eda de los Reyes Magos - 2019-01-07\n    * D\u00eda de San Jos\u00e9 - 2019-03-25\n    * Domingo de Ramos - 2019-04-14\n    * Jueves Santo - 2019-04-18\n    * Viernes Santo - 2019-04-19\n    * Domingo de Resurrecci\u00f3n - 2019-04-21\n    * D\u00eda del Trabajo - 2019-05-01\n    * D\u00eda de la Ascensi\u00f3n - 2019-06-03\n    * Corpus Christi - 2019-06-24\n    * Sagrado Coraz\u00f3n - 2019-07-01\n    * San Pedro y San Pablo - 2019-07-01\n    * D\u00eda de la Independencia - 2019-07-20\n    * Batalla de Boyac\u00e1 - 2019-08-07\n    * La asunci\u00f3n de la Virgen - 2019-08-19\n    * D\u00eda de la Raza - 2019-10-14\n    * Todos los Santos - 2019-11-04\n    * Independencia de Cartagena - 2019-11-11\n    * D\u00eda de la Inmaculada Concepci\u00f3n - 2019-12-08\n    * D\u00eda de Navidad - 2019-12-25\n   \n   \n3. El Sistema debe calcular si el empleado debe tener Auxilio de Transporte por valor de ($97.032 en el 2019), el cual debe ser pagado a los empleados cuyos sueldos no supere los 2 salarios m\u00ednimos.\n\n4. En los meses de Junio y Diciembre, se debe cancelar el valor correspondiente a la Prima, el cual corresponde a la sumatoria de los sueldos del semestre dividido por 6 (por ahora se asumir\u00e1 que no hay aumentos de sueldo).\n\n5. En el mes de Enero se debe cancelar los Intereses a las cesant\u00edas, corresponde a la sumatoria de los sueldos del a\u00f1o anterior dividido por 12 (por ahora se asumir\u00e1 que no hay aumentos de sueldo).\n\n6. Se deben hacer las deducciones de ley, 4% a Salud y 4% a Pensi\u00f3n, todos los empleados cuyo sueldo supere los 4 salarios m\u00ednimos deben cancelar el 1% para el Fondo de Solidaridad Pensional.\n\n7. Los d\u00edas en vacaciones o en incapacidad, no se le cancela al empleado el Auxilio de Transporte correspondiente al d\u00eda.\n\n8. Si durante el mes el empleado suma 2 o m\u00e1s horas de tiempo tarde, se debe poner una sanci\u00f3n por el valor de 2 horas de salario por cada hora acumulada (redondeando al piso), es decir en el caso de un empleado que acumule 5:42 horas tarde, se le descontar\u00edan 10 horas del salario por sanci\u00f3n.\n\n9. El sistema debe generar un archivo en formato json, con la informaci\u00f3n de la planilla, llamado planilla_YYYYMM.json, donde YYYY se debe reemplazar por el a\u00f1o y MM se debe reemplazar por el n\u00famero del mes.  El archivo debe contener una lista de diccionarios, cada diccionario corresponde a la planilla de pago del empleado, ella debe contener los siguiente datos:\n\nidentificacion, nombre, cargo, banco, cuenta_bancaria, salario_base, dias, auxilio_transporte, prima, intereses_cesantias, total_devengado, deduccion_salud, deduccion_pension, deduccion_fondo_solidaridad, deduccion_sanciones, total_deducciones, neto_pagar.\n\n10. Si considera que hay otros puntos que enriquezcan el proyecto, sientanse libre de implementarlos.\n\nCondiciones:\n\n1. Se debe desarrollar el sistema usando Programaci\u00f3n Orientada a Objetos.\n\n2. Se requiere la reutilizaci\u00f3n del c\u00f3digo de los trabajos previos.\n\n3. El sistema debe generar las 12 planillas de n\u00f3mina del a\u00f1o 2019.\n","757125f6":"## Encapsulaci\u00f3n\n\nLa encapsulaci\u00f3n es una forma de darle uso exclusivo a los comportamientos o atributos que posee una clase, es decir, protege los atributos y m\u00e9todos para que los primeros no sean modificados de manera directa y en el caso de los m\u00e9todos, estos solo pueden ser llamados por otros m\u00e9todos de la clase.\n","c78f92ea":"\n## Polimorfismo\n\nEs la capacidad que tiene el interprete de determinar a que clase pertenece un m\u00e9todo o un atributo, sin importar que haya otro con el mismo nombre en otra clase.","74a90f76":"**Ejercicio 6.2.** Implemente los m\u00e9todos necesarios a las clases, utilizando las 3 propiedades de la Programaci\u00f3n Orientada a Objetos.","83aa1b71":"Se puede notar que el m\u00e9todo __init__ de las clases **Carro** y **Moto** podr\u00eda ser definido usando la definici\u00f3n del m\u00e9todo __init__ de la clase **Veh\u00edculo**, para ello usamos la funci\u00f3n **super()**, el cual retorna el mismo objeto, pero con la clase padre."}}