{"cell_type":{"7295845c":"code","07c0202e":"code","69dba737":"code","831fcd76":"code","61c50e8b":"code","1bd303a1":"code","e925692d":"code","95ee4969":"code","cfcd0582":"code","651979c4":"code","930c9ca2":"code","2a57302e":"code","52a1b52a":"code","f702bb34":"code","95cf7a6b":"code","6df42509":"code","bfa3d772":"code","0f5b5628":"code","bd2a25ff":"code","2dfd7889":"code","a19de3a2":"code","0759ce89":"code","56c60557":"code","34ae4c22":"code","89209fb3":"code","c2da059d":"code","2c8e00ae":"code","3e780163":"code","d25eb242":"code","324f7d90":"code","11d51bd6":"code","2abe674b":"code","91ca1f01":"code","c802dfb7":"code","db98ebc9":"code","3e82164e":"code","a6b83513":"code","5ad590d2":"markdown","428219d1":"markdown","684ad388":"markdown","fa8f9346":"markdown","bdf8a1ef":"markdown","10bf4013":"markdown","5c22b471":"markdown","ccda65e8":"markdown","af0ec563":"markdown","03f2116e":"markdown","f21f6af3":"markdown","620a7208":"markdown","5e0374c6":"markdown","395cd0a9":"markdown","525eb274":"markdown"},"source":{"7295845c":"import os\nimport numpy as np\nimport pandas as pd","07c0202e":"# loading the dataset\ndf = pd.read_csv('..\/input\/indian-premier-league\/ipl.csv')","69dba737":"df.columns","831fcd76":"df.shape","61c50e8b":"df.dtypes","1bd303a1":"df.head()","e925692d":"df.columns","95ee4969":"# Removing unwanted columns\ncolumns_to_remove = ['mid', 'venue', 'batsman', 'bowler', 'striker', 'non-striker']\n\nprint('Before removing unwanted columns: {}'.format(df.shape))\ndf.drop(labels=columns_to_remove, axis=1, inplace=True)\nprint('After removing unwanted columns: {}'.format(df.shape))","cfcd0582":"df.columns","651979c4":"df.head()","930c9ca2":"df['bat_team'].unique()","2a57302e":"consistent_teams = ['Kolkata Knight Riders', 'Chennai Super Kings', 'Rajasthan Royals',\n                    'Mumbai Indians', 'Kings XI Punjab', 'Royal Challengers Bangalore',\n                    'Delhi Daredevils', 'Sunrisers Hyderabad']","52a1b52a":"# Keeping only consistent teams\nprint('Before removing inconsistent teams: {}'.format(df.shape))\ndf = df[(df['bat_team'].isin(consistent_teams)) & (df['bowl_team'].isin(consistent_teams))]\nprint('After removing inconsistent teams: {}'.format(df.shape))","f702bb34":"df['bat_team'].unique()","95cf7a6b":"# Removing the first 5 overs data in every match\nprint('Before removing first 5 overs data: {}'.format(df.shape))\ndf = df[df['overs']>=5.0]\nprint('After removing first 5 overs data: {}'.format(df.shape))","6df42509":"# Converting the column 'date' from string into datetime object\nfrom datetime import datetime\nprint(\"Before converting 'date' column from string to datetime object: {}\".format(type(df.iloc[0,0])))\ndf['date'] = df['date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\nprint(\"After converting 'date' column from string to datetime object: {}\".format(type(df.iloc[0,0])))","bfa3d772":"# Selecting correlated features using Heatmap\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Get correlation of all the features of the dataset\ncorr_matrix = df.corr()\ntop_corr_features = corr_matrix.index\n\n# Plotting the heatmap\nplt.figure(figsize=(13,10))\ng = sns.heatmap(data=df[top_corr_features].corr(), annot=True, cmap='RdYlGn')","0f5b5628":"#Converting categorical features using OneHotEncoding method\nencoded_df = pd.get_dummies(data=df, columns=['bat_team', 'bowl_team'])\nencoded_df.columns","bd2a25ff":"encoded_df.head()","2dfd7889":"# Rearranging the columns\nencoded_df = encoded_df[['date', 'bat_team_Chennai Super Kings', 'bat_team_Delhi Daredevils', 'bat_team_Kings XI Punjab',\n              'bat_team_Kolkata Knight Riders', 'bat_team_Mumbai Indians', 'bat_team_Rajasthan Royals',\n              'bat_team_Royal Challengers Bangalore', 'bat_team_Sunrisers Hyderabad',\n              'bowl_team_Chennai Super Kings', 'bowl_team_Delhi Daredevils', 'bowl_team_Kings XI Punjab',\n              'bowl_team_Kolkata Knight Riders', 'bowl_team_Mumbai Indians', 'bowl_team_Rajasthan Royals',\n              'bowl_team_Royal Challengers Bangalore', 'bowl_team_Sunrisers Hyderabad',\n              'overs', 'runs', 'wickets', 'runs_last_5', 'wickets_last_5', 'total']]","a19de3a2":"# Splitting the data into train and test set\nX_train = encoded_df.drop(labels='total', axis=1)[encoded_df['date'].dt.year <= 2016]\nX_test = encoded_df.drop(labels='total', axis=1)[encoded_df['date'].dt.year >= 2017]\n\ny_train = encoded_df[encoded_df['date'].dt.year <= 2016]['total'].values\ny_test = encoded_df[encoded_df['date'].dt.year >= 2017]['total'].values\n\n# Removing the 'date' column\nX_train.drop(labels='date', axis=True, inplace=True)\nX_test.drop(labels='date', axis=True, inplace=True)\n\nprint(\"Training set: {} and Test set: {}\".format(X_train.shape, X_test.shape))","0759ce89":"# Linear Regression Model\nfrom sklearn.linear_model import LinearRegression\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X_train,y_train)","56c60557":"# Predicting results\ny_pred_lr = linear_regressor.predict(X_test)","34ae4c22":"# Linear Regression - Model Evaluation\nfrom sklearn.metrics import mean_absolute_error as mae, mean_squared_error as mse, accuracy_score\nprint(\"---- Linear Regression - Model Evaluation ----\")\nprint(\"Mean Absolute Error (MAE): {}\".format(mae(y_test, y_pred_lr)))\nprint(\"Mean Squared Error (MSE): {}\".format(mse(y_test, y_pred_lr)))\nprint(\"Root Mean Squared Error (RMSE): {}\".format(np.sqrt(mse(y_test, y_pred_lr))))","89209fb3":"# Decision Tree Regression Model\nfrom sklearn.tree import DecisionTreeRegressor\ndecision_regressor = DecisionTreeRegressor()\ndecision_regressor.fit(X_train,y_train)","c2da059d":"# Predicting results\ny_pred_dt = decision_regressor.predict(X_test)","2c8e00ae":"# Decision Tree Regression - Model Evaluation\nprint(\"---- Decision Tree Regression - Model Evaluation ----\")\nprint(\"Mean Absolute Error (MAE): {}\".format(mae(y_test, y_pred_dt)))\nprint(\"Mean Squared Error (MSE): {}\".format(mse(y_test, y_pred_dt)))\nprint(\"Root Mean Squared Error (RMSE): {}\".format(np.sqrt(mse(y_test, y_pred_dt))))","3e780163":"# Random Forest Regression Model\nfrom sklearn.ensemble import RandomForestRegressor\nrandom_regressor = RandomForestRegressor()\nrandom_regressor.fit(X_train,y_train)","d25eb242":"# Predicting results\ny_pred_rf = random_regressor.predict(X_test)","324f7d90":"# Random Forest Regression - Model Evaluation\nprint(\"---- Random Forest Regression - Model Evaluation ----\")\nprint(\"Mean Absolute Error (MAE): {}\".format(mae(y_test, y_pred_rf)))\nprint(\"Mean Squared Error (MSE): {}\".format(mse(y_test, y_pred_rf)))\nprint(\"Root Mean Squared Error (RMSE): {}\".format(np.sqrt(mse(y_test, y_pred_rf))))","11d51bd6":"# AdaBoost Model using Linear Regression as the base learner\nfrom sklearn.ensemble import AdaBoostRegressor\nadb_regressor = AdaBoostRegressor(base_estimator=linear_regressor, n_estimators=100)\nadb_regressor.fit(X_train, y_train)","2abe674b":"# Predicting results\ny_pred_adb = adb_regressor.predict(X_test)","91ca1f01":"# AdaBoost Regression - Model Evaluation\nprint(\"---- AdaBoost Regression - Model Evaluation ----\")\nprint(\"Mean Absolute Error (MAE): {}\".format(mae(y_test, y_pred_adb)))\nprint(\"Mean Squared Error (MSE): {}\".format(mse(y_test, y_pred_adb)))\nprint(\"Root Mean Squared Error (RMSE): {}\".format(np.sqrt(mse(y_test, y_pred_adb))))","c802dfb7":"def predict_score(batting_team='Chennai Super Kings', bowling_team='Mumbai Indians', overs=5.1, runs=50, wickets=0, runs_in_prev_5=50, wickets_in_prev_5=0):\n  temp_array = list()\n\n  # Batting Team\n  if batting_team == 'Chennai Super Kings':\n    temp_array = temp_array + [1,0,0,0,0,0,0,0]\n  elif batting_team == 'Delhi Daredevils':\n    temp_array = temp_array + [0,1,0,0,0,0,0,0]\n  elif batting_team == 'Kings XI Punjab':\n    temp_array = temp_array + [0,0,1,0,0,0,0,0]\n  elif batting_team == 'Kolkata Knight Riders':\n    temp_array = temp_array + [0,0,0,1,0,0,0,0]\n  elif batting_team == 'Mumbai Indians':\n    temp_array = temp_array + [0,0,0,0,1,0,0,0]\n  elif batting_team == 'Rajasthan Royals':\n    temp_array = temp_array + [0,0,0,0,0,1,0,0]\n  elif batting_team == 'Royal Challengers Bangalore':\n    temp_array = temp_array + [0,0,0,0,0,0,1,0]\n  elif batting_team == 'Sunrisers Hyderabad':\n    temp_array = temp_array + [0,0,0,0,0,0,0,1]\n\n  # Bowling Team\n  if bowling_team == 'Chennai Super Kings':\n    temp_array = temp_array + [1,0,0,0,0,0,0,0]\n  elif bowling_team == 'Delhi Daredevils':\n    temp_array = temp_array + [0,1,0,0,0,0,0,0]\n  elif bowling_team == 'Kings XI Punjab':\n    temp_array = temp_array + [0,0,1,0,0,0,0,0]\n  elif bowling_team == 'Kolkata Knight Riders':\n    temp_array = temp_array + [0,0,0,1,0,0,0,0]\n  elif bowling_team == 'Mumbai Indians':\n    temp_array = temp_array + [0,0,0,0,1,0,0,0]\n  elif bowling_team == 'Rajasthan Royals':\n    temp_array = temp_array + [0,0,0,0,0,1,0,0]\n  elif bowling_team == 'Royal Challengers Bangalore':\n    temp_array = temp_array + [0,0,0,0,0,0,1,0]\n  elif bowling_team == 'Sunrisers Hyderabad':\n    temp_array = temp_array + [0,0,0,0,0,0,0,1]\n\n  # Overs, Runs, Wickets, Runs_in_prev_5, Wickets_in_prev_5\n  temp_array = temp_array + [overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]\n\n  # Converting into numpy array\n  temp_array = np.array([temp_array])\n\n  # Prediction\n  return int(linear_regressor.predict(temp_array)[0])","db98ebc9":"final_score = predict_score(\n    batting_team='Kolkata Knight Riders', \n    bowling_team='Delhi Daredevils', \n    overs=9.2, \n    runs=79, \n    wickets=2, \n    runs_in_prev_5=60, \n    wickets_in_prev_5=1)\nprint(\"The final predicted score (range): {} to {}\".format(final_score-10, final_score+5))","3e82164e":"final_score = predict_score(\n    batting_team='Mumbai Indians', \n    bowling_team='Kings XI Punjab', \n    overs=12.3, \n    runs=113, \n    wickets=2, \n    runs_in_prev_5=55, \n    wickets_in_prev_5=0)\nprint(\"The final predicted score (range): {} to {}\".format(final_score-10, final_score+5))","a6b83513":"final_score = predict_score(\n    batting_team='Delhi Daredevils', \n    bowling_team='Chennai Super Kings', \n    overs=10.2, \n    runs=68, \n    wickets=3, \n    runs_in_prev_5=29,\n    wickets_in_prev_5=1)\nprint(\"The final predicted score (range): {} to {}\".format(final_score-10, final_score+5))","5ad590d2":"#  IPL First Innings Score Prediction ","428219d1":"*Note: Using AdaBoost did not reduce the error to a significant level. Hence, we will you simple linear regression model for prediction*","684ad388":"### *Random Forest*","fa8f9346":"# Data Preprocessing\n\u2022 Handling categorical features <\/br>\n\u2022 Splitting dataset into train and test set on the basis of date","bdf8a1ef":"## **Predictions**\n\u2022 Model *trained on* the data from **IPL Seasons 1 to 9** ie: (2008 to 2016)<br\/>\n\u2022 Model *tested on* data from **IPL Season 10** ie: (2017)<br\/>\n\u2022 Model *predicts on* data from **IPL Seasons 11 to 12** ie: (2018 to 2019)","10bf4013":"***Prediction 3*** <\/br>\n\u2022 Date: 10th May 2019<br\/>\n\u2022 IPL : Season 12<br\/>\n\u2022 Match number: 59 (Eliminator)<br\/>\n\u2022 Teams: Delhi Daredevils vs. Chennai Super Kings<br\/>\n\u2022 First Innings final score: 147\/9","5c22b471":"***Prediction 2***<\/br>\n\u2022 Date: 30th March 2019<\/br>\n\u2022 IPL : Season 12<\/br>\n\u2022 Match number: 9<\/br>\n\u2022 Teams: Mumbai Indians vs. Kings XI Punjab<\/br>\n\u2022 First Innings final score: 176\/7<\/br>","ccda65e8":"### *AdaBoost Algorithm*","af0ec563":"# *Linear Regression*","03f2116e":"# Model Building\nI will experiment with 5 different algorithms, they are as follows:<\/br>\n\u2022 Linear Regression <\/br>\n\u2022 Decision Tree Regression <\/br>\n\u2022 Random Forest Regression <\/br>\n\n ----- Boosting Algorithm ----- <\/br>\n\u2022 Adaptive Boosting (AdaBoost) Algorithm <\/br>","f21f6af3":"*Note: Since Linear Regression model performs best as compared to other two, we use this model and boost it's performance using AdaBoost Algorithm*","620a7208":"***Note: In IPL, it is very difficult to predict the actual score because in a moment of time the game can completely turn upside down! Still it was a fun project to do... ***","5e0374c6":"***Prediction 1*** <\/br>\n\u2022 Date: 16th April 2018<\/br>\n\u2022 IPL : Season 11<\/br>\n\u2022 Match number: 13<\/br>\n\u2022 Teams: Kolkata Knight Riders vs. Delhi Daredevils<\/br>\n1. \u2022 First Innings final score: 200\/9<\/br>","395cd0a9":"# **Data Cleaning**\n Points covered under this section: <\/br>\n \u2022 Removing unwanted columns<\/br>\n \u2022 Keeping only consistent teams<\/br>\n \u2022 Removing the first 5 overs data in every match<\/br>\n \u2022 Converting the column 'date' from string into datetime object<\/br>","525eb274":"# *Decision Tree*"}}