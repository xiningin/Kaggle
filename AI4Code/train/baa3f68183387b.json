{"cell_type":{"c5a2a7d2":"code","2512b6e5":"code","7fcbcad3":"code","af0d91f3":"code","94597c0a":"code","5abcb2ab":"code","ed62a7d6":"code","219e71c1":"code","d252c45e":"code","383002c9":"code","67d65b9c":"code","6b8d191b":"code","767afca6":"code","4b0ec5f5":"code","c86dfedd":"code","e6aa495b":"code","fb3f2bda":"code","6d3e1c1c":"code","2246488d":"code","0cbf258f":"code","59fc2143":"code","2c87ea12":"code","d8bd698e":"code","46b1edc4":"code","80e88630":"code","653808bf":"code","1403ce5f":"code","2f869aed":"code","e900edca":"code","1f595b4c":"code","0fa99ca5":"code","f2cf3b7d":"markdown"},"source":{"c5a2a7d2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","2512b6e5":"# 1. User's Dataset\nu_cols = ['user_id', 'age', 'sex', 'occupation', 'zip_code']\nusers = pd.read_csv('..\/input\/ml-100k\/u.user', sep='|', names=u_cols,\n                    encoding='latin-1', parse_dates=True) \n# 2. Rating dataset\nr_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']\nratings = pd.read_csv('..\/input\/ml-100k\/u.data', sep='\\t', names=r_cols,\n                      encoding='latin-1')\n\n# 3.Movies Dataset\nm_cols = ['movie_id', 'title', 'release_date', 'video_release_date', 'imdb_url','unknown', 'Action', 'Adventure',\n'Animation', 'Children\\'s', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy','Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']\nmovies = pd.read_csv('..\/input\/ml-100k\/u.item', sep='|', names=m_cols,\n                     encoding='latin-1')","7fcbcad3":"#users\nprint(users.shape)\nusers.head(4)","af0d91f3":"#ratings\nprint(ratings.shape)\nratings.head(4)","94597c0a":"#items\nprint(movies.shape)\nmovies.head(4)","5abcb2ab":"r_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']\nratings_train = pd.read_csv('..\/input\/ml-100k\/ua.base', sep='\\t', names=r_cols, encoding='latin-1')\nratings_test = pd.read_csv('..\/input\/ml-100k\/ua.test', sep='\\t', names=r_cols, encoding='latin-1')\nratings_train.shape, ratings_test.shape","ed62a7d6":"ratings_train.head(4),ratings_test.head(4)","219e71c1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x=ratings_train.rating,data=ratings_train)","d252c45e":"no_of_rated_movies_per_user = ratings_train.groupby(by='user_id')['rating'].count().sort_values(ascending=False)\nno_of_rated_movies_per_user.head()","383002c9":"ax1 = plt.subplot(121)\nsns.kdeplot(no_of_rated_movies_per_user, shade=True, ax=ax1)\nplt.xlabel('No of ratings by user')\nplt.title(\"PDF\")\n\nax2 = plt.subplot(122)\nsns.kdeplot(no_of_rated_movies_per_user, shade=True, cumulative=True,ax=ax2)\nplt.xlabel('No of ratings by user')\nplt.title('CDF')\n\nplt.show()","67d65b9c":"no_of_rated_movies_per_user.describe()","6b8d191b":"quantiles = no_of_rated_movies_per_user.quantile(np.arange(0,1.01,0.01), interpolation='higher')\nquantiles","767afca6":"plt.title(\"Quantiles and their Values\")\nquantiles.plot()\n# quantiles with 0.05 difference\nplt.scatter(x=quantiles.index[::5], y=quantiles.values[::5], c='orange', label=\"quantiles with 0.05 intervals\")\n# quantiles with 0.25 difference\nplt.scatter(x=quantiles.index[::25], y=quantiles.values[::25], c='m', label = \"quantiles with 0.25 intervals\")\nplt.ylabel('No of ratings by user')\nplt.xlabel('Value at the quantile')\nplt.legend(loc='best')\n\n# annotate the 25th, 50th, 75th and 100th percentile values....\nfor x,y in zip(quantiles.index[::25], quantiles[::25]):\n    plt.annotate(s=\"({} , {})\".format(x,y), xy=(x,y), xytext=(x-0.05, y+500)\n                ,fontweight='bold')\n\nplt.show()","4b0ec5f5":"quantiles[::5]","c86dfedd":"print('\\n No of ratings at last 5 percentile : {}\\n'.format(sum(no_of_rated_movies_per_user>= 301)) )","e6aa495b":"no_of_ratings_per_movie = ratings_train.groupby(by='movie_id')['rating'].count().sort_values(ascending=False)\n\nfig = plt.figure(figsize=plt.figaspect(.5))\nax = plt.gca()\nplt.plot(no_of_ratings_per_movie.values)\nplt.title('# RATINGS per Movie')\nplt.xlabel('Movie')\nplt.ylabel('No of Users who rated a movie')\nax.set_xticklabels([])\n\nplt.show()","fb3f2bda":"n_users = ratings.user_id.unique().shape[0]\nn_items = ratings.movie_id.unique().shape[0]","6d3e1c1c":"data_matrix = np.zeros((n_users, n_items))\nfor line in ratings.itertuples():\n    data_matrix[line[1]-1, line[2]-1] = line[3]","2246488d":"from sklearn.metrics.pairwise import pairwise_distances \nuser_similarity = pairwise_distances(data_matrix, metric='cosine')\nitem_similarity = pairwise_distances(data_matrix.T, metric='cosine')","0cbf258f":"def predict(ratings, similarity, type='user'):\n    if type == 'user':\n        mean_user_rating = ratings.mean(axis=1)\n        #We use np.newaxis so that mean_user_rating has same format as ratings\n        ratings_diff = (ratings - mean_user_rating[:, np.newaxis])\n        pred = mean_user_rating[:, np.newaxis] + similarity.dot(ratings_diff) \/ np.array([np.abs(similarity).sum(axis=1)]).T\n    elif type == 'item':\n        pred = ratings.dot(similarity) \/ np.array([np.abs(similarity).sum(axis=1)])\n    return pred","59fc2143":"user_prediction = predict(data_matrix, user_similarity, type='user')\nitem_prediction = predict(data_matrix, item_similarity, type='item')","2c87ea12":"import graphlab\ntrain_data = graphlab.SFrame(ratings_base)\ntest_data = graphlab.SFrame(ratings_test)","d8bd698e":"popularity_model = graphlab.popularity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating')","46b1edc4":"#Get recommendations for first 5 users and print them\n#users = range(1,6) specifies user ID of first 5 users\n#k=5 specifies top 5 recommendations to be given\npopularity_recomm = popularity_model.recommend(users=range(1,6),k=5)\npopularity_recomm.print_rows(num_rows=25)","80e88630":"ratings_base.groupby(by='movie_id')['rating'].mean().sort_values(ascending=False).head(20)","653808bf":"#Train Model\nitem_sim_model = graphlab.item_similarity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating', similarity_type='pearson')\n\n#Make Recommendations:\nitem_sim_recomm = item_sim_model.recommend(users=range(1,6),k=5)\nitem_sim_recomm.print_rows(num_rows=25)","1403ce5f":"model_performance = graphlab.compare(test_data, [popularity_model, item_sim_model])\ngraphlab.show_comparison(model_performance,[popularity_model, item_sim_model])","2f869aed":"import turicreate\ntrain_data = turicreate.SFrame(ratings_train)\ntest_data = turicreate.Sframe(ratings_test)","e900edca":"popularity_model = turicreate.popularity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating')","1f595b4c":"popularity_recomm = popularity_model.recommend(users=[1,2,3,4,5],k=5)\npopularity_recomm.print_rows(num_rows=25)","0fa99ca5":"#Training the model\nitem_sim_model = turicreate.item_similarity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating', similarity_type='cosine')\n\n#Making recommendations\nitem_sim_recomm = item_sim_model.recommend(users=[1,2,3,4,5],k=5)\nitem_sim_recomm.print_rows(num_rows=25)","f2cf3b7d":"Looking PDF and CDF of number of rated movies per user\n\n**CDF**: cummulative denisty function. It is the total probability of anything below it. Its range is 0-1. Also known as density function. Represented as F(x).\n\n**PDF** : Probability denisty function. It is probability at one point. also know as probability mass function(PMF). Represented as f(x).\n![1](https:\/\/qph.ec.quoracdn.net\/main-qimg-e50787cd6024e1945ef5632192b70a69)\n\nSo both F(x) and f(x) as inter related to each other.\nif we do the derivative of F(x) we get the f(x) and vice versa if we integrate f(x) we get the F(x).\n\n**In detail Explaination:**\nGenerally Random variables are two types \n\n1.** Continuos**: Which is solved by integral.\n![image.png](attachment:image.png)  \n2.** Discrete** : Which is solved by summation.\n\nSo we can say the *PDF* is the continuous function.\n\n[For more Explanation please refer this vedio](http:\/\/youtu.be\/DIsZFAV9Hy0)"}}