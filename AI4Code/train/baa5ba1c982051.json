{"cell_type":{"15c1addd":"code","c8663bb8":"code","a4d37260":"code","c46e4755":"code","4992e4fa":"code","366e9c1a":"code","14d92409":"code","df289a7e":"code","a0c5b020":"code","30c44527":"code","43af9f9a":"code","e66763b8":"code","3031d9fa":"code","bc7a8225":"code","5e5607da":"code","64b0ab94":"code","b3ff8753":"code","b8bde10a":"code","0ecca0a6":"code","fd4115f2":"code","04f4c5a8":"code","a609870e":"code","09575a4f":"code","032bff95":"code","b4f66c17":"code","ed845efe":"code","7775c8b5":"code","ce342300":"code","3b63c4f3":"code","3d855114":"code","ceedb433":"code","0f0cac57":"code","f89cde10":"code","1a4c0d2f":"code","c6a79717":"code","b982b5c9":"code","e3d54a09":"code","e9cfcfdc":"code","3db4da8b":"code","d6a1490b":"code","f66a38f9":"code","dc5428f6":"code","1d5cf966":"markdown"},"source":{"15c1addd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c8663bb8":"import pandas as pd","a4d37260":"cd \/kaggle\/input\/craigslist-carstrucks-data","c46e4755":"ls","4992e4fa":"data = pd.read_csv(\"vehicles.csv\")","366e9c1a":"data.shape","14d92409":"for column in data.columns:\n    print(f\"Column: {column}\")","df289a7e":"data.price.describe()","a0c5b020":"data.isnull().sum(axis = 0)","30c44527":"def fill(val, fill_in):\n    \n    if pd.isnull(val):\n        return fill_in\n    else:\n        return val","43af9f9a":"x = list()\nfor year in data['year']:\n    if not pd.isnull(year):\n        x.append(year)\nmedian_age = np.median(x)","e66763b8":"median_age","3031d9fa":"data['year'] = data['year'].apply(fill, fill_in=median_age)","bc7a8225":"data['year'].isna().sum()","5e5607da":"x  = list()\nfor dist in data['odometer']:\n    if not pd.isnull(dist):\n        x.append(dist)\nmedian_dist = np.median(x)","64b0ab94":"data['odometer'] = data['odometer'].apply(fill, fill_in=median_dist)","b3ff8753":"data['odometer'].isna().sum()","b8bde10a":"data.rename({'manufacturer':'make'}, axis=1, inplace=True)","0ecca0a6":"data['make'] = data['make'].apply(fill, fill_in='ford')","fd4115f2":"makes = list(data['make'])\nmodels = list(data['model'])\n\nno_info = list()\nfor i in range(0, len(makes)):\n    if pd.isnull(models[i]):\n        no_info.append(i)","04f4c5a8":"def get_make_popular_model(make):\n    return data.groupby('make').get_group(make)['model'].value_counts().index[0]","a609870e":"file = open('sample.txt','w')","09575a4f":"#data.groupby('make').get_group('hennessey')['price']\ndescription = (data[data['make'] == 'hennessey']['description'])","032bff95":"data[data['model'] == 'camaro'].shape[0]","b4f66c17":"data[data['make'] == 'hennessey']['make'] = 'chevrolet'\ndata[data['make'] == 'hennessey']['model'] = 'camaro'\n","ed845efe":"description = pd.DataFrame(description)","7775c8b5":"data = data.drop(data[data['make'] == 'hennessey'].index)","ce342300":"data[data['make'] == 'hennessey']","3b63c4f3":"data.columns","3d855114":"makes = list(data['make'])\nmodels = list(data['model'])","ceedb433":"make_best_model = dict()\nfor make in data['make'].unique():\n    try:\n        make_best_model[make] = get_make_popular_model(make)\n    except:\n        print(f\"Make: {make}\")\nfor i in range(0, len(models)):\n    \n    if pd.isnull(models[i]):\n        try:\n            if makes[i] == 'hennessey':\n                makes[i] = 'chevrolet'\n            models[i] = make_best_model[makes[i]]\n        except:\n            print(f\"Index: {i} Make: {makes[i]}\")\ndata['model'] = models","0f0cac57":"data['condition'] = data['condition'].apply(fill, fill_in='excellent')\ndata['cylinders'] = data['cylinders'].apply(fill, fill_in='6 cylinders')\ndata['fuel'] = data['fuel'].apply(fill, fill_in='gas')","f89cde10":"data.title_status.value_counts()","1a4c0d2f":"x = list(data['title_status'])\nfor status in range (0,len(x)):\n    if x[status] == 'gas':\n        x[status] = 'clean'\ndata['title_status'] = x  \ndata['title_status'] = data['fuel'].apply(fill, fill_in='gas')","c6a79717":"data['transmission'] = data['transmission'].apply(fill, fill_in='automatic')\ndata['drive'] = data['drive'].apply(fill, fill_in='4wd')\ndata['paint_color'] = data['paint_color'].apply(fill, fill_in='black')","b982b5c9":"data.isnull().sum(axis = 0)","e3d54a09":"data['title_status'].value_counts()","e9cfcfdc":"data['title_status'] = data['title_status'].apply(fill, fill_in='clean')","3db4da8b":"data['size'] = data['size'].apply(fill, fill_in='full-size')\n\n","d6a1490b":"import random","f66a38f9":"types = list(data.type)\nfor i in range(0, len(types)):\n    if pd.isnull(types[i]):\n        if random.randint(0,1) == 0:\n            types[i] = 'sedan'\n        else:\n            types[i] = 'SUV'\ndata['type'] = types","dc5428f6":"data.isnull().sum(axis = 0)","1d5cf966":"## Missing Values"}}