{"cell_type":{"1b2e1591":"code","7618a822":"code","5a1fc1e0":"code","ea43f658":"code","a0b68cdd":"code","91c2a84f":"code","2efb7557":"code","fb274359":"code","d5fe95d8":"code","7b421dc7":"code","151804c9":"code","6884d491":"code","1f3b891a":"code","a1a72c08":"code","0dd66a44":"code","5d61d2b3":"code","399b4c90":"code","f7923ae6":"code","7b223881":"code","127c2bf6":"code","297807ce":"code","4db57e5b":"code","908bfbd2":"code","feb8b249":"code","e5bd78cd":"code","33410985":"code","de65c9db":"code","55fbcbe5":"code","d8807308":"code","50cae0e1":"code","ae31b368":"code","13ecda4d":"code","fad8af8f":"code","5d08288c":"code","730d7917":"code","3eac65e2":"code","c91191c3":"code","a3559363":"code","d15232de":"code","4663a8ff":"code","51f57e42":"code","9088ce80":"code","79d43bb0":"code","727b33ad":"code","702d4843":"code","398f0803":"code","a21eb790":"code","c2c2c94c":"code","be4f938d":"code","50c6ee8f":"code","fc3b0599":"code","3948b436":"code","0bd4bbd6":"code","81add779":"code","6cce2c82":"code","4364b803":"code","3231e660":"code","28c0d74b":"code","034b48aa":"code","2f357e79":"code","214eed0e":"code","9d81d956":"code","b6260dd0":"code","bfb8e8aa":"code","b30c1af3":"code","3221d181":"code","e253c9e1":"code","42e2932d":"code","9a5fd141":"code","1edae6d3":"code","edf9f20f":"code","26131094":"code","a358d430":"code","5dbc739d":"code","a4a24ce2":"code","399d476e":"code","3b7be5f0":"code","cb8c9664":"code","8e85062e":"code","87a8d904":"code","ee077c7f":"code","5d321247":"code","17071d63":"markdown","c27cd6cf":"markdown","c8084bf8":"markdown","8f57519f":"markdown","52bd4686":"markdown","4aefeaa2":"markdown","e277053a":"markdown","6b51ede3":"markdown","13cab726":"markdown","76715818":"markdown","7f3d6aaf":"markdown","5cf468ca":"markdown"},"source":{"1b2e1591":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7618a822":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler","5a1fc1e0":"data_train = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","ea43f658":"data_train.head(7)","a0b68cdd":"data_test = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')","91c2a84f":"data_test.head(6)","2efb7557":"data_test = data_test.drop('id', axis = 1)","fb274359":"data_test","d5fe95d8":"data_train.shape","7b421dc7":"data_test.shape","151804c9":"data_train.info()","6884d491":"data_test.info()","1f3b891a":"data_train.describe()","a1a72c08":"data_train.isnull()","0dd66a44":"data_train.isnull().sum()","5d61d2b3":"data_test.isnull().sum()","399b4c90":"data_train.plot(x ='price_range', y = 'ram', kind = 'scatter' )","f7923ae6":"data_train.plot(x ='price_range', y = 'battery_power', kind = 'scatter' )","7b223881":"data_train.plot(x ='price_range', y = 'fc', kind = 'scatter')","127c2bf6":"data_train.plot(x ='price_range', y = 'n_cores', kind = 'scatter')","297807ce":"data_train.plot(x ='price_range', y = 'n_cores', kind = 'scatter')","4db57e5b":"data_train.plot(x ='price_range', y = 'clock_speed', kind = 'scatter')","908bfbd2":"data_train.plot(x ='price_range', y = 'mobile_wt', kind = 'scatter')","feb8b249":"data_train.plot(kind='box',figsize=(20,10))\nplt.show()","e5bd78cd":"X = data_train.drop('price_range', axis = 1)","33410985":"X","de65c9db":"Y = data_train['price_range']","55fbcbe5":"Y","d8807308":"std = StandardScaler()","50cae0e1":"X_std = std.fit_transform(X)\ndata_test_std = std.transform(data_test)","ae31b368":"X_std","13ecda4d":"data_test_std","fad8af8f":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()","5d08288c":"dt","730d7917":"dt.fit(X_std,Y)","3eac65e2":"dt.predict(data_test_std)","c91191c3":"data_test","a3559363":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier()","d15232de":"knn.fit(X_std,Y)","4663a8ff":"knn","51f57e42":"knn.predict(data_test_std)","9088ce80":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()","79d43bb0":"lr.fit(X_std, Y)","727b33ad":"lr","702d4843":"lr.predict(data_test_std)","398f0803":"X","a21eb790":"Y","c2c2c94c":"from sklearn.model_selection import train_test_split","be4f938d":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=1)","50c6ee8f":"X_train","fc3b0599":"X_test","3948b436":"Y_train","0bd4bbd6":"Y_test","81add779":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()","6cce2c82":"dt","4364b803":"dt.fit(X_train,Y_train)","3231e660":"X_test","28c0d74b":"Y_pred = dt.predict(X_test)","034b48aa":"Y_pred","2f357e79":"Y_test","214eed0e":"from sklearn.metrics import accuracy_score","9d81d956":"dt_ac=accuracy_score(Y_test,Y_pred)","b6260dd0":"dt_ac","bfb8e8aa":"X_train_std=std.fit_transform(X_train)\n\nX_test_std=std.transform(X_test)","b30c1af3":"X_train_std","3221d181":"X_test_std","e253c9e1":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier()","42e2932d":"knn.fit(X_train_std,Y_train)","9a5fd141":"Y_pred = knn.predict(X_test_std)","1edae6d3":"Y_pred","edf9f20f":"Y_test","26131094":"knn_ac = accuracy_score(Y_pred,Y_test)","a358d430":"knn_ac","5dbc739d":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()","a4a24ce2":"lr","399d476e":"lr.fit(X_train_std,Y_train)","3b7be5f0":"Y_pred = lr.predict(X_test_std)","cb8c9664":"Y_pred","8e85062e":"Y_test","87a8d904":"lr_ac = accuracy_score(Y_pred ,Y_test)","ee077c7f":"lr_ac","5d321247":"plt.bar(x=['dt','knn','lr'],height=[dt_ac,knn_ac,lr_ac])\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Accuracy Score\")\nplt.show()","17071d63":"## 3) Logistic Regression","c27cd6cf":"##","c8084bf8":"## 2) KNN","8f57519f":"## As we predicted on Test Data csv, we are not able to plot accuracy score as we dont have Ground Truth, so we are going to use only Train.csv and gonna split it into train and test","52bd4686":"## 1) Decision Tree\n## We dont need to use Standard Scaler for DT since distance doesnt matter here","4aefeaa2":"#### We need to use Standard Scaler for knn since distance matter here","e277053a":"## 2) KNN","6b51ede3":"### 3) Logistic Regression","13cab726":"## Training The Model","76715818":"## LOGISTIC REGRESSION ACCURACY IS MOST","7f3d6aaf":"## Explortory Data Analysis","5cf468ca":"## 1) Decision Tree"}}