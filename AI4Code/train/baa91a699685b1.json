{"cell_type":{"e5e58b9a":"code","81a98ab9":"code","05a921ed":"code","277806ef":"code","45f931ca":"code","40729812":"code","4c92bbfa":"code","92b5149a":"code","2e146508":"code","2e03c9d7":"code","811478b5":"code","059b1e26":"code","670992b4":"code","186ba431":"code","5fe18e95":"code","d2411a50":"code","d79a5ba2":"code","6048eabb":"code","194a6860":"code","cec77b5a":"markdown","f242e22d":"markdown"},"source":{"e5e58b9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns;\nimport matplotlib.pyplot as plt;\nfrom collections import Counter;\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81a98ab9":"# Import data\nmedianHouseHoldInCome = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv\", encoding = \"windows-1252\");\npercentagePeopleBelowPovertyLevel = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv\", encoding = \"windows-1252\");\npercentOver25CompletedHighSchool = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv\", encoding = \"windows-1252\");\nshareRaceCity = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv\", encoding = \"windows-1252\");\nkill = pd.read_csv(\"..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv\", encoding = \"windows-1252\");","05a921ed":"percentagePeopleBelowPovertyLevel.head()","277806ef":"percentagePeopleBelowPovertyLevel.info()","45f931ca":"print(percentagePeopleBelowPovertyLevel.poverty_rate.value_counts());","40729812":"# Delete all poverty_rate = \"-\" items\npercentagePeopleBelowPovertyLevel.poverty_rate.replace(\"-\", 0.0, inplace = True);\npercentagePeopleBelowPovertyLevel.poverty_rate.value_counts()","4c92bbfa":"percentagePeopleBelowPovertyLevel.poverty_rate = percentagePeopleBelowPovertyLevel.poverty_rate.astype(\"float\");\npercentagePeopleBelowPovertyLevel.info()","92b5149a":"# Get poverty rate of each state\nareaList = list(percentagePeopleBelowPovertyLevel[\"Geographic Area\"].unique());\nprint(areaList);\nprint(\"The number of states: {}\".format(len(percentagePeopleBelowPovertyLevel[\"Geographic Area\"].unique())));\nareaPovertyRatio = [];\nfor each in areaList:\n    stateFilter = percentagePeopleBelowPovertyLevel[\"Geographic Area\"] == each\n    currentState = percentagePeopleBelowPovertyLevel[stateFilter];\n    areaPovertyRate = sum(currentState.poverty_rate) \/ len(currentState);\n    areaPovertyRatio.append(areaPovertyRate);\ndata = pd.DataFrame({\"areaList\": areaList, \"areaPovertyRatio\": areaPovertyRatio});\nnewIndex = (data[\"areaPovertyRatio\"].sort_values(ascending = False)).index.values; # S\u0131ralanan de\u011ferlerin indisleri\nsortedData = data.reindex(newIndex);\n\nplt.figure(figsize=(15, 10));\nax = sns.barplot(x = sortedData.areaList, y = sortedData.areaPovertyRatio);\nplt.xticks(rotation=90);\nplt.xlabel(\"States\");\nplt.ylabel(\"Poverty Rate\");\nplt.title(\"Poverty Rata vs States\");","2e146508":"sortedData.head()","2e03c9d7":"# Find most 15 Name or Surname of the killed people\n#print(kill.head());\n#print(kill.name.value_counts());\nnameFilter = kill.name != \"TK TK\";\nseparate = kill.name[nameFilter].str.split();\nprint(separate.value_counts());\na, b = zip(*separate);\n#print(b);\nnameList = (a+b);\n#print(nameList);\nnameCount = Counter(nameList);\n#print(nameCount);\nmostCommonNames = nameCount.most_common(15);\n#print(mostCommonNames);\nx, y = zip(*mostCommonNames);\n#print(y)\nx,y = list(x), list(y);\n\nplt.figure(figsize = (15, 10));\nax = sns.barplot(x = x, y=y, palette=sns.cubehelix_palette(len(x)));\nplt.xlabel(\"Name or Surname of the killed people\");\nplt.ylabel(\"Frequency\");\nplt.title(\"The most common names or surnames of the killed people\");","811478b5":"print(percentOver25CompletedHighSchool.head())","059b1e26":"print(percentOver25CompletedHighSchool.percent_completed_hs.value_counts());\npercentOver25CompletedHighSchool.percent_completed_hs.replace(\"-\", 0.0, inplace = True);\npercentOver25CompletedHighSchool.percent_completed_hs = percentOver25CompletedHighSchool.percent_completed_hs.astype(\"float\");\nprint(percentOver25CompletedHighSchool.info());\n","670992b4":"areaList = list(percentOver25CompletedHighSchool[\"Geographic Area\"].unique());\nprint(areaList);\nareaHighSchool = [];\nfor each in areaList:\n    filterArea = percentOver25CompletedHighSchool[\"Geographic Area\"] == each;\n    x = percentOver25CompletedHighSchool[filterArea];\n    rate = sum(x.percent_completed_hs) \/ len(x);\n    areaHighSchool.append(rate);\n\n# sorting\ndata = pd.DataFrame({\"AreaList\": areaList, \"hsRate\": areaHighSchool});\nnewIndices = (data.hsRate.sort_values(ascending = True)).index.values;\nsortedData2 = data.reindex(newIndices);\n\n# Visualization\nplt.figure(figsize = (15, 10));\nsns.barplot(x = sortedData.areaList, y = sortedData.areaPovertyRatio);\nplt.xticks(rotation = 90);\nplt.xlabel(\"States\");\nplt.ylabel(\"High School Rate\");\nplt.title(\"High School Rate vs States\");\n","186ba431":"sortedData2.head()","5fe18e95":"#print(shareRaceCity.head());\nprint(shareRaceCity.info());","d2411a50":"shareRaceCity.replace(\"-\", 0.0, inplace = True);\nshareRaceCity.replace(\"(X)\", 0.0, inplace = True);\nshareRaceCity.loc[:, [\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]] = shareRaceCity.loc[:, [\"share_white\", \"share_black\", \"share_native_american\", \"share_asian\", \"share_hispanic\"]].astype(\"float\");\nshareRaceCity.info()","d79a5ba2":"areaList = list(shareRaceCity[\"Geographic area\"].unique());\nprint(areaList);\nshare_white = [];\nshare_black = [];\nshare_native_american = [];\nshare_asian = [];\nshare_hispanic = [];\n\nfor each in areaList:\n    currentAreaFilter = (shareRaceCity[\"Geographic area\"] == each);\n    share_white.append(sum(shareRaceCity[currentAreaFilter].share_white) \/ len(shareRaceCity[currentAreaFilter].share_white));\n    share_black.append(sum(shareRaceCity[currentAreaFilter].share_black) \/ len(shareRaceCity[currentAreaFilter].share_black));\n    share_native_american.append(sum(shareRaceCity[currentAreaFilter].share_native_american) \/ len(shareRaceCity[currentAreaFilter].share_native_american));\n    share_asian.append(sum(shareRaceCity[currentAreaFilter].share_asian) \/ len(shareRaceCity[currentAreaFilter].share_asian));\n    share_hispanic.append(sum(shareRaceCity[currentAreaFilter].share_hispanic) \/ len(shareRaceCity[currentAreaFilter].share_hispanic));","6048eabb":"# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=areaList,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=areaList,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=areaList,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=areaList,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=areaList,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")\n","194a6860":"# sortedData = areaPovertyRatio\n# sortedData2 = areaHighSchool\n\nsortedData.areaPovertyRatio = sortedData.areaPovertyRatio \/ max(sortedData.areaPovertyRatio);\nsortedData2.hsRate = sortedData2.hsRate \/ max(sortedData2.hsRate);\ndata = pd.concat([sortedData, sortedData2[\"hsRate\"]], axis = 1);\ndata.sort_values(\"areaPovertyRatio\", inplace = True);\n\n# Visualization\nf, ax1 = plt.subplots(figsize = (20, 10));\nsns.pointplot(x = \"areaList\", y = \"areaPovertyRatio\", data = data, color = \"lime\", alpha = 0.8);\nsns.pointplot(x = \"areaList\", y = \"hsRate\", data = data, color = \"red\", alpha = 0.8);\nplt.text(40, 0.6, \"HS Graduate Ratio\", color = \"red\", fontsize = 17, style = \"italic\");\nplt.text(40, 0.55, \"Poverty Ratio\", color = \"lime\", fontsize = 17, style = \"italic\");\nplt.xlabel(\"States\", fontsize = 15, color = \"blue\");\nplt.ylabel(\"Values\", fontsize = 15, color = \"blue\");\nplt.title(\"High School Gradate Rate vs Poverty Rate\", fontsize = 20, color = \"blue\");\nplt.grid();","cec77b5a":"Percentage of state's population according to races which are black, white, native American, asian and hispanic","f242e22d":"Point Plot"}}