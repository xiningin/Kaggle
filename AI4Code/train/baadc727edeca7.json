{"cell_type":{"585f2362":"code","a58bf839":"code","3cd4d8c3":"code","ae747993":"markdown"},"source":{"585f2362":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport re\nimport joblib\nimport gc\nfrom scipy import stats\n\nimport lightgbm as lgb\nfrom sklearn.ensemble import ExtraTreesClassifier as et\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\nimport optuna\n\nimport warnings\nwarnings.simplefilter('ignore')","a58bf839":"\ndef objective(trial):\n    train = pd.read_pickle('..\/input\/tpsfeb2022-ds-to-pickle-with-folds\/train.pkl').drop_duplicates(keep='first').sample(frac=1)\n    models = []\n    kfold = StratifiedKFold(5, shuffle=True, random_state=42)\n    X = train.drop(['5_folds', '10_folds', '20_folds', 'target'], axis=1)\n\n    le = LabelEncoder()\n    y = le.fit_transform(train.target)\n    del train\n    params = dict(n_estimators=trial.suggest_int('n_estimators', 100,1000),\n              criterion='gini', \n              max_depth=None, \n              min_samples_split=2, \n              min_samples_leaf=1, \n              min_weight_fraction_leaf=0.0, \n              max_features='auto', \n              max_leaf_nodes=None, \n              min_impurity_decrease=0.0, \n              bootstrap=False, \n              oob_score=False, \n              n_jobs=-1, \n              random_state=42, \n              verbose=0, \n              warm_start=False, \n              class_weight=None, \n              ccp_alpha=0.0, \n              max_samples=None\n             )\n\n    \n    fold_scores = []\n    for fold, (trn_idx, val_idx) in enumerate(kfold.split(X,y)):\n        X_train, y_train = X.iloc[trn_idx], y[trn_idx]\n        X_val, y_val = X.iloc[val_idx], y[val_idx]\n        \n        model = et(**params)\n\n        model.fit(X_train, y_train)\n        #joblib.dump(model, f'et_fold_{fold}.pkl')\n\n        y_pred = model.predict(X_val)\n\n        score = accuracy_score(y_pred, y_val)\n        fold_scores.append(score)\n        #models.append(model)\n        \n        del model, y_pred, score, X_train, y_train, X_val, y_val\n        gc.collect()\n\n    del X, y\n    gc.collect()\n    \n    return np.mean(fold_scores, axis=0)","3cd4d8c3":"# Optimization with optuna\nstudy = optuna.create_study(direction='maximize', pruner = optuna.pruners.MedianPruner(n_warmup_steps=10))\nstudy.optimize(objective, timeout=8*3600)\n\nprint(len(study.trials))\nprint(study.best_trial.params)","ae747993":"# Objective\n\nClassify 10 different bacteria species based on repeated lossy measurements of DNA snippets.\n\n\n## Versions"}}