{"cell_type":{"0d300980":"code","270777ad":"code","670d842e":"code","3aac738a":"code","cb070cfa":"code","15f8b3d3":"code","7e28dfa5":"code","aaa5ae2c":"code","14c6a00a":"code","7817f0f9":"code","36908dfc":"code","eb5f0828":"code","3210b177":"code","ca6c7c8d":"code","b3b065bf":"code","a9487557":"code","259cf2cc":"code","d5102c78":"code","bb1bc20c":"code","74242bad":"code","bef2b422":"code","337d254f":"code","58c33a41":"code","a118b85e":"code","f39ff384":"code","eee448ee":"code","02d7c3a0":"code","9920faab":"code","6c5dc4f3":"code","ce1c05ce":"code","7b3e3934":"markdown","6c22c7e4":"markdown","c878f38f":"markdown","8ec05d9c":"markdown","5da6139b":"markdown","5c2628a6":"markdown","0602c62f":"markdown","522b4698":"markdown","78e99397":"markdown","6f650d2b":"markdown","2b36c812":"markdown","e6493e5e":"markdown","41f2d0e4":"markdown","b545591b":"markdown","e4da9335":"markdown","83fca635":"markdown","fd13d74e":"markdown","b1868b6d":"markdown","c1112287":"markdown","6539e50d":"markdown","bda4c5e8":"markdown","fac40eac":"markdown","84db7a46":"markdown","c28ef5e9":"markdown","08484cf6":"markdown","0857e226":"markdown"},"source":{"0d300980":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.applications import EfficientNetB3\nfrom tensorflow.keras.optimizers import Adam\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport os, cv2, json\nfrom PIL import Image","270777ad":"WORK_DIR = '..\/input\/cassava-leaf-disease-classification'\nos.listdir(WORK_DIR)","670d842e":"print('Train images: %d' %len(os.listdir(\n    os.path.join(WORK_DIR, \"train_images\"))))","3aac738a":"with open(os.path.join(WORK_DIR, \"label_num_to_disease_map.json\")) as file:\n    print(json.dumps(json.loads(file.read()), indent=4))","cb070cfa":"train_labels = pd.read_csv(os.path.join(WORK_DIR, \"train.csv\"))\ntrain_labels.head()","15f8b3d3":"sns.countplot(train_labels.label, edgecolor = 'black',\n              palette = sns.color_palette(\"viridis\", 5))\nplt.show()","7e28dfa5":"sample = train_labels[train_labels.label == 0].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","aaa5ae2c":"sample = train_labels[train_labels.label == 1].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","14c6a00a":"sample = train_labels[train_labels.label == 2].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","7817f0f9":"sample = train_labels[train_labels.label == 3].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","36908dfc":"sample = train_labels[train_labels.label == 4].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","eb5f0828":"# Main parameters\nBATCH_SIZE = 24\nSTEPS_PER_EPOCH = len(train_labels)*0.8 \/ BATCH_SIZE\nVALIDATION_STEPS = len(train_labels)*0.2 \/ BATCH_SIZE\nEPOCHS = 26\nTARGET_SIZE = 386","3210b177":"train_labels.label = train_labels.label.astype('str')\n\ntrain_datagen = ImageDataGenerator(validation_split = 0.2,\n                                     preprocessing_function = None,\n                                     rotation_range = 20,\n                                     zoom_range = 0.2,\n                                     cval = 0.1,\n                                     horizontal_flip = True,\n                                     vertical_flip = True,\n                                     fill_mode = 'nearest',\n                                     shear_range = 0.15,\n                                     height_shift_range = 0.15,\n                                     width_shift_range = 0.15,\n                                     featurewise_center = True,\n                                     featurewise_std_normalization = True)\n\ntrain_generator = train_datagen.flow_from_dataframe(train_labels,\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         subset = \"training\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")\n\n\nvalidation_datagen = ImageDataGenerator(validation_split = 0.2)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(train_labels,\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         subset = \"validation\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")","ca6c7c8d":"img_path = os.path.join(WORK_DIR, \"train_images\", train_labels.image_id[20])\nimg = image.load_img(img_path, target_size = (TARGET_SIZE, TARGET_SIZE))\nimg_tensor = image.img_to_array(img)\nimg_tensor = np.expand_dims(img_tensor, axis = 0)\nimg_tensor \/= 255.\n\nplt.imshow(img_tensor[0])\nplt.axis('off')\nplt.show()","b3b065bf":"generator = train_datagen.flow_from_dataframe(train_labels.iloc[20:21],\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")\n\naug_images = [generator[0][0][0]\/255 for i in range(10)]\nfig, axes = plt.subplots(2, 5, figsize = (20, 10))\naxes = axes.flatten()\nfor img, ax in zip(aug_images, axes):\n    ax.imshow(img)\n    ax.axis('off')\nplt.tight_layout()\nplt.show()","a9487557":"# def create_model():\n#     conv_base = EfficientNetB3(include_top = False, weights = 'imagenet',\n#                                input_shape = (TARGET_SIZE, TARGET_SIZE, 3))\n#     model = conv_base.output\n#     model = layers.GlobalAveragePooling2D()(model)\n#     model = layers.Dense(5, activation = \"softmax\")(model)\n#     model = models.Model(conv_base.input, model)\n\n#     model.compile(optimizer = Adam(lr = 0.001),\n#                   loss = \"sparse_categorical_crossentropy\",\n#                   metrics = [\"acc\"])\n#     return model","259cf2cc":"def create_model():\n    conv_base = EfficientNetB3(include_top = False, weights = None,\n                               input_shape = (TARGET_SIZE, TARGET_SIZE, 3))\n    model = conv_base.output\n    model = layers.GlobalAveragePooling2D()(model)\n    model = layers.Dense(5, activation = \"softmax\")(model)\n    model = models.Model(conv_base.input, model)\n\n    model.compile(optimizer = Adam(lr = 0.001),\n                  loss = \"sparse_categorical_crossentropy\",\n                  metrics = [\"acc\"])\n    return model","d5102c78":"model = create_model()\nmodel.summary()","bb1bc20c":"print('Our EfficientNet CNN has %d layers' %len(model.layers))","74242bad":"model.load_weights('..\/input\/effnetb3-weight\/EffNetB3.h5')","bef2b422":"model_save = ModelCheckpoint('.\/EffNetB3_out_best_weights.h5', \n                             save_best_only = True, \n                             save_weights_only = True,\n                             monitor = 'val_loss', \n                             mode = 'min', verbose = 1)\nearly_stop = EarlyStopping(monitor = 'val_loss', min_delta = 0.001, \n                           patience = 5, mode = 'min', verbose = 1,\n                           restore_best_weights = True)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.3, \n                              patience = 2, min_delta = 0.001, \n                              mode = 'min', verbose = 1)\n\n\nhistory = model.fit(\n    train_generator,\n    steps_per_epoch = STEPS_PER_EPOCH,\n    epochs = EPOCHS,\n    validation_data = validation_generator,\n    validation_steps = VALIDATION_STEPS,\n    callbacks = [model_save, early_stop, reduce_lr]\n)","337d254f":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\nsns.set_style(\"white\")\nplt.suptitle('Train history', size = 15)\n\nax1.plot(epochs, acc, \"bo\", label = \"Training acc\")\nax1.plot(epochs, val_acc, \"b\", label = \"Validation acc\")\nax1.set_title(\"Training and validation acc\")\nax1.legend()\n\nax2.plot(epochs, loss, \"bo\", label = \"Training loss\", color = 'red')\nax2.plot(epochs, val_loss, \"b\", label = \"Validation loss\", color = 'red')\nax2.set_title(\"Training and validation loss\")\nax2.legend()\n\nplt.show()","58c33a41":"model.save('.\/EffNetB3_out.h5')","a118b85e":"def activation_layer_vis(img, activation_layer = 0, layers = 10):\n    layer_outputs = [layer.output for layer in model.layers[:layers]]\n    activation_model = models.Model(inputs = model.input, outputs = layer_outputs)\n    activations = activation_model.predict(img)\n    \n    rows = int(activations[activation_layer].shape[3] \/ 3)\n    cols = int(activations[activation_layer].shape[3] \/ rows)\n    fig, axes = plt.subplots(rows, cols, figsize = (15, 15 * cols))\n    axes = axes.flatten()\n    \n    for i, ax in zip(range(activations[activation_layer].shape[3]), axes):\n        ax.matshow(activations[activation_layer][0, :, :, i], cmap = 'viridis')\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","f39ff384":"activation_layer_vis(img_tensor, 0)","eee448ee":"def all_activations_vis(img, layers = 10):\n    layer_outputs = [layer.output for layer in model.layers[:layers]]\n    activation_model = models.Model(inputs = model.input, outputs = layer_outputs)\n    activations = activation_model.predict(img)\n    \n    layer_names = []\n    for layer in model.layers[:layers]: \n        layer_names.append(layer.name) \n\n    images_per_row = 3\n    for layer_name, layer_activation in zip(layer_names, activations): \n        n_features = layer_activation.shape[-1] \n\n        size = layer_activation.shape[1] \n\n        n_cols = n_features \/\/ images_per_row \n        display_grid = np.zeros((size * n_cols, images_per_row * size)) \n\n        for col in range(n_cols): \n            for row in range(images_per_row): \n                channel_image = layer_activation[0, :, :, col * images_per_row + row] \n                channel_image -= channel_image.mean() \n                channel_image \/= channel_image.std() \n                channel_image *= 64 \n                channel_image += 128 \n                channel_image = np.clip(channel_image, 0, 255).astype('uint8') \n                display_grid[col * size : (col + 1) * size, \n                             row * size : (row + 1) * size] = channel_image \n        scale = 1. \/ size \n        plt.figure(figsize=(scale * 5 * display_grid.shape[1], \n                            scale * 5 * display_grid.shape[0])) \n        plt.title(layer_name) \n        plt.grid(False)\n        plt.axis('off')\n        plt.imshow(display_grid, aspect = 'auto', cmap = 'viridis')","02d7c3a0":"all_activations_vis(img_tensor, 5)","9920faab":"ss = pd.read_csv(os.path.join(WORK_DIR, \"sample_submission.csv\"))\nss","6c5dc4f3":"preds = []\n\nfor image_id in ss.image_id:\n    image = Image.open(os.path.join(WORK_DIR,  \"test_images\", image_id))\n    image = image.resize((TARGET_SIZE, TARGET_SIZE))\n    image = np.expand_dims(image, axis = 0)\n    preds.append(np.argmax(model.predict(image)))\n\nss['label'] = preds\nss","ce1c05ce":"ss.to_csv('submission.csv', index = False)","7b3e3934":"## Cassava Leaf Disease Classification:\n\n# Best Keras CNN\n\n![Cassava](https:\/\/cdn.hauschka.com\/images\/system\/plant_library\/hauschka\/manihot-esculenta-crantz-gross.jpg)\n\n### The final part of this [Cassava Leaf Disease: Keras CNN baseline](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-baseline) and this [Cassava Leaf Disease: Keras CNN prediction](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-prediction) notebooks.\n\n### Some models and weights stored in this dataset: [Cassava Leaf Disease Models](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-models)\n\n#### Here you'll find:\n* examples of ImageDataGenerator work;\n* my best experiments with EfficientNet CNNs;\n* visualizations of CNN intermediate activations;\n* something else interesting in the future.\n\n#### Ideas for future improvements:\n* try various image sizes;\n* try various batch sizes;\n* experiments with learning rate;\n* experiments with data augmentation;\n* other.\n\n#### I am grateful to Fran\u00e7ois Cholet for the book \"Deep Learning with Python\", wherefrom I borrowed some useful techniques.","6c22c7e4":"### Creating the CNN","c878f38f":"### See also [Cassava Leaf Disease: Keras CNN baseline](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-baseline)","8ec05d9c":"### ImageDataGenerator","5da6139b":"### Loading weights","5c2628a6":"### This photo after augmentation","0602c62f":"## WORK IN PROGRESS...","522b4698":"## Some photos of \"1\": \"Cassava Brown Streak Disease (CBSD)\"","78e99397":"## Some photos of \"0\": \"Cassava Bacterial Blight (CBB)\"","6f650d2b":"Visualization of intermediate activations gives a rough step-by-step understanding of how CNN works.","2b36c812":"### Training","e6493e5e":"### Visualization of the first 5 layers","41f2d0e4":"At first, we'll load the basic EfficientNetB0 CNN with \"imagenet\" weights. I created this model before and store it in my dataset created especially for this competition: [Cassava Leaf Disease Models](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-models).","b545591b":"# Prediction","e4da9335":"## Work directory","83fca635":"There is a wide space for experimentation here. The cells below show how the ImageDataGenerator works.","fd13d74e":"# First look at the data","b1868b6d":"# Preparation for modeling","c1112287":"### Visualization of the first layer","6539e50d":"### Random photo before augmentation","bda4c5e8":"## Some photos of \"4\": \"Healthy\"","fac40eac":"# Visualization of CNN intermediate activations","84db7a46":"## Some photos of \"2\": \"Cassava Green Mottle (CGM)\"","c28ef5e9":"# Modeling","08484cf6":"## Some photos of \"3\": \"Cassava Mosaic Disease (CMD)\"","0857e226":"## Loading packages"}}