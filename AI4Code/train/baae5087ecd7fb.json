{"cell_type":{"e234bd98":"code","079fe247":"code","cabda214":"code","5606a068":"code","e81bf5ab":"code","19e6c88a":"code","2966c39a":"code","0257403f":"code","7e1127d5":"code","e57cee59":"markdown","fd0c6542":"markdown","3106f214":"markdown","d0cf8160":"markdown","8fb8f959":"markdown","c6197ebf":"markdown","2ccdfd6b":"markdown","690590fb":"markdown","6f5c8fc2":"markdown"},"source":{"e234bd98":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nplt.rcParams['figure.figsize']=(20.0,10.0)","079fe247":"data=pd.read_csv('..\/input\/headbraincsv\/headbrain.csv')\nprint(data.shape)\ndata.head()","cabda214":"X=data['Head Size(cm^3)'].values\ny=data['Brain Weight(grams)'].values","5606a068":"#Mean X and y\nmean_X=np.mean(X)\nmean_y=np.mean(y)\n\n#total numbers of values\nn=len(X)\n\n#using the formula to calculate b1 and b2\ncovar=0;var=0\nfor i in range(n):\n    covar+=(X[i]-mean_X)*(y[i]-mean_y)\n    var+=(X[i]-mean_X)**2\n    \nm=covar\/var\nc=mean_y-(m*mean_X)\n\n#print coefficients\nprint('Slope: ',m,'Intercept: ',c)","e81bf5ab":"c#motting values and regression line\nmax_X=np.max(X)+100\nmin_X=np.min(X)-100\n\n#calculating line values X and y\nx=np.linspace(min_X,max_X,1000)\ny_1=c+m*X\n\n#plotting Line\nplt.plot(X,y,label='Regression Line')\n#plotting Scatter points\nplt.scatter(X,y,label='Scatter Plot')\n\nplt.xlabel('Head Size(cm^3)')\nplt.ylabel('Brain Weight(grams)')\nplt.legend()\nplt.show()","19e6c88a":"#R^2  value\nss_t=0;ss_r=0\nfor i in range(n):\n    y_pred=c+m*X[i]\n    ss_t+=(y[i]-mean_y)**2\n    ss_r+=(y[i]-y_pred)**2\nr2=1-(ss_r\/ss_t)\nprint('MSE:',ss_r\/n)\nprint('RMSE:',(ss_r\/n)**0.5)\nprint('R^2: ',r2)","2966c39a":"\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score","0257403f":"#cannot use Rank 1 matrix in scikit-learn\nX=X.reshape((n,1))\n#creating Model\nreg=LinearRegression()\n#fitting training data\nreg=reg.fit(X,y)\n#y prediction\ny_pred=reg.predict(X)\n\n# printing values\nprint('Slope:' ,reg.coef_)\nprint('Intercept:', reg.intercept_)\n","7e1127d5":"# model evaluation\nmse=mean_squared_error(y,y_pred)\nrmse=np.sqrt(mean_squared_error(y,y_pred))\nprint('MSE:',mse)\nprint('RMSE:',rmse)\n#calculating R2 score\nr2_score1=reg.score(X,y)\nr2_score2=r2_score(y, y_pred)\nprint('R^2(r2):',r2_score1)\nprint('R^2:',r2_score2)","e57cee59":"$y=mx+c  $\n  \n  $\nSlope(m)=\\frac{Sample~Covariance}{Sample~Variance}=\\frac{\\sum(x-\\bar{x})(y-\\bar{y})}{\\sum(x-\\bar{x})^2}\n$\n\n$\nIntercept(c)=\\bar{y}-Slope(m)*\\bar{x}\n$\n  \n","fd0c6542":"#### Create a Model","3106f214":"\n### model evaluation","d0cf8160":"$$\nR^2=\\frac{\\sum(y_{predicted}-y_{mean})^2}{\\sum(y_{actual}-y_{mean})^2}=1-\\frac{\\sum(y_{actual}-y_{predicted})^2}{\\sum(y_{actual}-y_{mean})^2}\n$$\n  \n$\nR^2=\\frac{SSR}{SST}\n$","8fb8f959":"#### Collecting X and y","c6197ebf":"#### Train the Model","2ccdfd6b":"#### Visualizing the Data","690590fb":"#### Import the Data","6f5c8fc2":"## using Scikit-Learn"}}