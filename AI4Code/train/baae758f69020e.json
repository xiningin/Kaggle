{"cell_type":{"efec01e3":"code","f77594cc":"code","91b3f7e9":"code","49f27040":"code","a8d6ce3f":"code","9de07b9d":"code","a06def07":"code","92484370":"code","65585e2f":"code","321d39d1":"code","0bcb4d00":"code","672e33ad":"code","467c1e58":"markdown","540dedad":"markdown","c0b65711":"markdown","456b7fa2":"markdown","a18d3ca2":"markdown","68f9b056":"markdown","86e1c9ea":"markdown","61d9f0ee":"markdown","97433b18":"markdown"},"source":{"efec01e3":"import pickle\nimport os.path\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom sklearn.decomposition import PCA, TruncatedSVD, NMF","f77594cc":"!pip3 install pickle5","91b3f7e9":"import pickle5 as pickle","49f27040":"#%% load simulation data\n\ndata_dir = '\/kaggle\/input\/fiter-and-fire-paper'\n#results_summary = pd.read_pickle(os.path.join(data_dir, \"sim_results_excitatory.p\"))\n#results_summary = pd.read_pickle(os.path.join(data_dir, \"sim_results.p\"))\n\nwith open(os.path.join(data_dir, \"sim_results_excitatory.p\"), \"rb\") as fh:\n    results_summary = pickle.load(fh)\n\n#%% gather necessary fields from data\n\nsim_results = results_summary.iloc[5,:]\nprint(list(sim_results.index))\n\nrecording_time_sec = sim_results['recordingTimeHighRes']\nsoma_voltage_traces = sim_results['somaVoltageHighRes']\nnexus_voltage_traces = sim_results['nexusVoltageHighRes']\n\nnum_segments = soma_voltage_traces.shape[0]","a8d6ce3f":"#%% display soma and nexus voltages for all segments \n\ntime_lims_ms = [2000, 2120]\n\nplt.close('all')\nplt.figure(figsize=(15,15))\nplt.subplot(2,1,1); plt.title('soma voltage'); plt.ylabel('voltage (mV)');\nplt.plot(recording_time_sec.T, soma_voltage_traces.T)\nplt.xlim(time_lims_ms); plt.ylim(-81.3,-79.1)\nplt.subplot(2,1,2); plt.title('nexus voltage'); plt.ylabel('voltage (mV)');\nplt.plot(recording_time_sec.T, nexus_voltage_traces.T)\nplt.xlim(time_lims_ms); plt.xlabel('time (ms)'); plt.ylim(-76.5,-70.8);","9de07b9d":"#%% crop and normalize somatic traces\n\nstart_time_ind = list(recording_time_sec[0,:]).index(time_lims_ms[0])\nfinal_time_ind = list(recording_time_sec[0,:]).index(time_lims_ms[1])\n\ntime_ms = recording_time_sec[0,start_time_ind:final_time_ind].copy()\ntime_ms -= time_ms[0]\n\nnormalized_syn_filter = soma_voltage_traces[:,start_time_ind:final_time_ind]\n\n# normalized_syn_filter = normalized_syn_filter - soma_voltage_traces[:,start_time_ind - 1][:,np.newaxis]\nnormalized_syn_filter = normalized_syn_filter - normalized_syn_filter.min(axis=1)[:,np.newaxis]\nnormalized_syn_filter = normalized_syn_filter \/ normalized_syn_filter.max(axis=1)[:,np.newaxis]\n\nplt.close('all')\nplt.figure(figsize=(25,20));\nplt.subplot(2,1,1); plt.plot(time_ms, normalized_syn_filter.T);\nplt.title('normlized synaptic filters as traces', fontsize=22); plt.xlabel('time (ms)');\nplt.subplot(2,1,2); plt.imshow(normalized_syn_filter);\nplt.title('normlized synaptic filters as heatmaps', fontsize=22); plt.ylabel('synaptic filter index', fontsize=22);","a06def07":"#%% calculate SVD and display results\n\nX = normalized_syn_filter\nPSP_SVD_model = TruncatedSVD(n_components=100)\nPSP_SVD_model.fit(X)\n\nSVD_cutoff_ind = 3\nmax_SVD_basis_to_present = 18\n\nplt.close('all')\nplt.figure(figsize=(25,20));\nplt.subplot(3,1,1); plt.imshow(np.kron(PSP_SVD_model.components_[:max_SVD_basis_to_present], np.ones((10,1))));\nplt.title('normlized synaptic filters as heatmaps', fontsize=22); plt.axis('off')\nplt.subplot(3,1,2); plt.plot(time_ms, PSP_SVD_model.components_[:SVD_cutoff_ind].T);\nplt.title('first 3 basis functions', fontsize=22); plt.xlabel('time [ms]', fontsize=22); plt.ylabel('normalized PSP (A.U)', fontsize=22);\nplt.subplot(3,1,3); plt.plot(time_ms, PSP_SVD_model.components_[SVD_cutoff_ind:max_SVD_basis_to_present].T);\nplt.title('rest of the basis functions', fontsize=22); plt.xlabel('time [ms]', fontsize=22); plt.ylabel('normalized PSP (A.U)', fontsize=22);","92484370":"#%% show variance explained (using PCA)\n\nPSP_PCA_model = PCA(n_components=100)\nPSP_PCA_model.fit(X)\n\nnum_basis_functions = PSP_PCA_model.explained_variance_ratio_.shape[0]\nexplained_var_percent = 100 * PSP_PCA_model.explained_variance_ratio_\ncumsum_explained_var_percent = np.concatenate((np.array([0]), np.cumsum(explained_var_percent)))\ndot_selected_ind = 3\n\nplt.close('all')\nplt.figure(figsize=(10,7));\nplt.plot(np.arange(num_basis_functions + 1), cumsum_explained_var_percent, c='k')\nplt.scatter(dot_selected_ind, cumsum_explained_var_percent[dot_selected_ind+1], c='r', s=200)\nplt.xlabel('num basis functions', fontsize=16); plt.ylabel('explained %s' %('%'), fontsize=16); \nplt.title('Cumulative explained percent \\ntotal variance explained = %.2f%s' %(cumsum_explained_var_percent[dot_selected_ind+1],'%'), fontsize=18);\nplt.ylim(-1,105); plt.xlim(-1,num_basis_functions+1); plt.xlim(-0.3,12);","65585e2f":"#%% Show NMF basis functions\n\nfrom warnings import simplefilter\nfrom sklearn.exceptions import ConvergenceWarning\nsimplefilter(\"ignore\", category=ConvergenceWarning)\n\n# to avoid numberic instability, replicate the data and add some noise\nnoisy_data_for_NMF = np.tile(X,[3,1])\nnoisy_data_for_NMF = noisy_data_for_NMF + 0.0001 * np.random.rand(noisy_data_for_NMF.shape[0], noisy_data_for_NMF.shape[1])\n\nPSP_NMF_model = NMF(n_components=20)\nPSP_NMF_model.fit(noisy_data_for_NMF)\n\nNMF_cutoff_ind = 3\nmax_basis_to_present = 10\n\n# normalize each basis vector to it's maximum (for presentation)\nNMF_basis = PSP_NMF_model.components_\nNMF_basis_norm = NMF_basis \/ np.tile(NMF_basis.max(axis=1, keepdims=True), [1, NMF_basis.shape[1]])\n\nplt.close('all')\nplt.figure(figsize=(25,20));\nplt.subplot(3,1,1); plt.imshow(np.kron(NMF_basis_norm[:max_basis_to_present], np.ones((10,1))));\nplt.title('normlized synaptic filters as heatmaps', fontsize=22); plt.xlabel('time [ms]', fontsize=22); plt.ylabel('synaptic filter index', fontsize=22);\nplt.subplot(3,1,2); plt.plot(time_ms, NMF_basis_norm[:NMF_cutoff_ind].T);\nplt.title('first %d basis functions' %(NMF_cutoff_ind), fontsize=22); plt.xlabel('time [ms]', fontsize=22); plt.ylabel('normalized PSP (A.U)', fontsize=22);\nplt.subplot(3,1,3); plt.plot(time_ms, NMF_basis_norm[NMF_cutoff_ind:max_basis_to_present].T);\nplt.title('rest of the basis functions', fontsize=22); plt.xlabel('time [ms]', fontsize=22); plt.ylabel('normalized PSP (A.U)', fontsize=22);\n","321d39d1":"#%% display everything together (like in Fig. 4)\n\nxy_label_fontsize = 16\ntitle_fontsize = 19\n\nplt.close('all')\nfig = plt.figure(figsize=(17,16))\ngs_figure = gridspec.GridSpec(nrows=8,ncols=5)\ngs_figure.update(left=0.04, right=0.95, bottom=0.05, top=0.95, wspace=0.5, hspace=0.9)\n\nax_PSP_heatmap   = plt.subplot(gs_figure[ :6, :3])\nax_SVD_heatmap   = plt.subplot(gs_figure[6: , :3])\nax_PSP_traces    = plt.subplot(gs_figure[ :3,3: ])\nax_NMF_trance    = plt.subplot(gs_figure[3:6,3: ])\nax_explained_var = plt.subplot(gs_figure[6: ,3: ])\n\ninterp_method_PSP = 'spline16'\ninterp_method_SVD = 'bilinear'\ncolormap = 'jet'\n\nax_PSP_heatmap.imshow(np.kron(normalized_syn_filter, np.ones((2,1))), cmap=colormap, interpolation=interp_method_PSP);\nax_PSP_heatmap.set_title('all PSPs as heatmap', fontsize=title_fontsize)\nax_PSP_heatmap.set_axis_off()\n\nax_SVD_heatmap.imshow(np.kron(PSP_SVD_model.components_[:max_SVD_basis_to_present], np.ones((19,1))), cmap=colormap, interpolation=interp_method_SVD);\nax_SVD_heatmap.set_title('SVD basis functions as heatmap', fontsize=title_fontsize)\nax_SVD_heatmap.set_axis_off()\n\nax_PSP_traces.plot(time_ms, normalized_syn_filter.T, alpha=0.15);\nax_PSP_traces.set_title('all PSPs as traces', fontsize=title_fontsize)\nax_PSP_traces.set_xlabel('time (ms)', fontsize=xy_label_fontsize)\n\nax_NMF_trance.plot(time_ms, NMF_basis_norm[:NMF_cutoff_ind].T);\nax_NMF_trance.set_title('NMF first %d basis functions' %(NMF_cutoff_ind), fontsize=title_fontsize)\nax_NMF_trance.set_xlabel('time (ms)', fontsize=xy_label_fontsize)\n\nax_explained_var.plot(np.arange(num_basis_functions + 1), cumsum_explained_var_percent, c='k')\n\nax_explained_var.scatter(dot_selected_ind, cumsum_explained_var_percent[NMF_cutoff_ind + 1], c='r', s=200)\nax_explained_var.set_title('variance explained = %.2f%s' %(cumsum_explained_var_percent[NMF_cutoff_ind + 1],'%'), fontsize=title_fontsize);\nax_explained_var.set_xlabel('num basis functions', fontsize=xy_label_fontsize); \nax_explained_var.set_ylabel('explained %s' %('%'), fontsize=xy_label_fontsize); \nax_explained_var.set_ylim(-1,115); ax_explained_var.set_xlim(-0.3,12);\nax_explained_var.set_xticks([0,3,6,9,12]);\n","0bcb4d00":"#%% for the final Figure, display also neuronal morphology and a few selected traces\n\n\ndef get_morphology(morphology_filename=\".\/morphology_dict.pickle\", experiment_dict={'Params': {}},\n                   experiment_table=None):\n    morphology_dict = pickle.load(open(morphology_filename, \"rb\"), encoding='latin1')\n    # allSectionsLength                  = morphology_dict['all_sections_length']\n    # allSections_DistFromSoma           = morphology_dict['all_sections_distance_from_soma']\n    # allSegmentsLength                  = morphology_dict['all_segments_length']\n    allSegmentsType = morphology_dict['all_segments_type']\n    # allSegments_DistFromSoma           = morphology_dict['all_segments_distance_from_soma']\n    # allSegments_SectionDistFromSoma    = morphology_dict['all_segments_section_distance_from_soma']\n    allSegments_SectionInd = morphology_dict['all_segments_section_index']\n    allSegments_seg_ind_within_sec_ind = morphology_dict['all_segments_segment_index_within_section_index']\n\n    all_basal_section_coords = morphology_dict['all_basal_section_coords']\n    all_basal_segment_coords = morphology_dict['all_basal_segment_coords']\n    all_apical_section_coords = morphology_dict['all_apical_section_coords']\n    all_apical_segment_coords = morphology_dict['all_apical_segment_coords']\n\n    if experiment_dict['Params'] == {} and experiment_table is not None:\n        section_index = np.array(experiment_table.allSegments_SectionInd)\n        distance_from_soma = np.array(experiment_table.allSegments_SecDistFromSoma)\n        is_basal = np.array([x == 'basal' for x in experiment_table.allSegmentsType])\n    elif experiment_dict['Params'] != {}:\n        section_index = np.array(experiment_dict['Params']['allSegments_SectionInd'])\n        distance_from_soma = np.array(experiment_dict['Params']['allSegments_SecDistFromSoma'])\n        is_basal = np.array([x == 'basal' for x in experiment_dict['Params']['allSegmentsType']])\n    else:\n        return\n\n    seg_ind_to_xyz_coords_map = {}\n    seg_ind_to_sec_ind_map = {}\n    for k in range(len(allSegmentsType)):\n        curr_segment_ind = allSegments_seg_ind_within_sec_ind[k]\n        if allSegmentsType[k] == 'basal':\n            curr_section_ind = allSegments_SectionInd[k]\n            seg_ind_to_xyz_coords_map[k] = all_basal_segment_coords[(curr_section_ind, curr_segment_ind)]\n            seg_ind_to_sec_ind_map[k] = ('basal', curr_section_ind)\n        elif allSegmentsType[k] == 'apical':\n            curr_section_ind = allSegments_SectionInd[k] - len(all_basal_section_coords)\n            seg_ind_to_xyz_coords_map[k] = all_apical_segment_coords[(curr_section_ind, curr_segment_ind)]\n            seg_ind_to_sec_ind_map[k] = ('apical', curr_section_ind)\n        else:\n            print('error!')\n\n    return seg_ind_to_xyz_coords_map, seg_ind_to_sec_ind_map, section_index, distance_from_soma, is_basal\n\n\ndef plot_morphology(ax, segment_colors, names=[], width_mult_factors=None, seg_ind_to_xyz_coords_map={}):\n    if width_mult_factors is None:\n        width_mult_factor = 1.2\n        width_mult_factors = width_mult_factor * np.ones((segment_colors.shape))\n\n    segment_colors = segment_colors \/ segment_colors.max()\n    colors = plt.cm.jet(segment_colors)\n\n    all_seg_inds = seg_ind_to_xyz_coords_map.keys()\n\n    # assemble the colors for each dendritic segment\n    colors_per_segment = {}\n    widths_per_segment = {}\n    for seg_ind in all_seg_inds:\n        colors_per_segment[seg_ind] = colors[seg_ind]\n        widths_per_segment[seg_ind] = width_mult_factors[seg_ind]\n\n    # plot the cell morphology\n    for key in all_seg_inds:\n        seg_color = colors_per_segment[key]\n        # seg_line_width = width_mult_factor * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean()\n        seg_line_width = min(6, widths_per_segment[key] * np.array(seg_ind_to_xyz_coords_map[key]['d']).mean())\n        # print(np.array(seg_ind_to_xyz_coords_map[key]['d']).mean())\n        seg_x_coords = seg_ind_to_xyz_coords_map[key]['x']\n        seg_y_coords = seg_ind_to_xyz_coords_map[key]['y']\n\n        ax.plot(seg_x_coords, seg_y_coords, lw=seg_line_width, color=seg_color)\n    if names != []:\n        for ind in all_seg_inds:\n            ax.text(np.max(seg_ind_to_xyz_coords_map[key]['x']), np.max(seg_ind_to_xyz_coords_map[key]['y']),\n                    names[ind])\n\n    # add black soma\n    ax.scatter(x=45.5, y=19.8, s=120, c='k')\n    ax.set_xlim(-180, 235)\n    ax.set_ylim(-210, 1200);\n\n\nmorphology_filename = os.path.join(data_dir, 'morphology_dict.pickle')\nseg_ind_to_xyz_coords_map, seg_ind_to_sec_ind_map, section_index, distance_from_soma, is_basal = get_morphology(morphology_filename=morphology_filename, experiment_dict={\"Params\": {}}, experiment_table=sim_results)\n\n\nplt.close('all')\nfig = plt.figure(figsize=(17,16))\ngs_figure = gridspec.GridSpec(nrows=8,ncols=5)\ngs_figure.update(left=0.04, right=0.95, bottom=0.05, top=0.95, wspace=0.5, hspace=0.9)\n\nax_morphology    = plt.subplot(gs_figure[ :9, :3])\nax_chosen_PSPs   = plt.subplot(gs_figure[ :2,3: ])\nax_PSP_traces    = plt.subplot(gs_figure[2:4,3: ])\nax_NMF_trance    = plt.subplot(gs_figure[4:6,3: ])\nax_explained_var = plt.subplot(gs_figure[6: ,3: ])\n\n\n# plot the morphology with a few selected segments highlighted\nchosen_PSP_segment_inds = [1, 49, 132, 200, 344, 468, 530]\nchosen_PSP_segment_colors = 0.5 + np.arange(len(chosen_PSP_segment_inds)) \/ len(chosen_PSP_segment_inds)\n\nsegment_colors_selected = np.zeros(num_segments)\nsegment_widths_selected = 1.2 * np.ones(segment_colors_selected.shape)\nfor curr_selected_segment_index, color in zip(chosen_PSP_segment_inds, chosen_PSP_segment_colors):\n    segment_colors_selected[curr_selected_segment_index] = color\n    segment_widths_selected[curr_selected_segment_index] = 30.0\n\nplot_morphology(ax_morphology, segment_colors_selected, width_mult_factors=segment_widths_selected,\n                seg_ind_to_xyz_coords_map=seg_ind_to_xyz_coords_map, names=[])\nax_morphology.set_axis_off()\n\n\n# plot a few selected segments max normalized PSPs\nfor curr_selected_segment_index, color in zip(chosen_PSP_segment_inds, chosen_PSP_segment_colors):\n    curr_normalized_syn_filter = soma_voltage_traces[curr_selected_segment_index, start_time_ind:final_time_ind]\n    curr_normalized_syn_filter = curr_normalized_syn_filter - soma_voltage_traces[curr_selected_segment_index, start_time_ind-1]\n    # curr_normalized_syn_filter = curr_normalized_syn_filter - curr_normalized_syn_filter.min()\n    curr_normalized_syn_filter = curr_normalized_syn_filter \/ (curr_normalized_syn_filter.max())\n\n    curr_color = plt.cm.jet(color \/ chosen_PSP_segment_colors.max())\n    ax_chosen_PSPs.plot(time_ms, curr_normalized_syn_filter,color=curr_color, lw=2.5, label='segment %d' %(curr_selected_segment_index))\n\nax_chosen_PSPs.legend(fontsize=11)\nax_chosen_PSPs.set_xlabel('Time (ms)', fontsize=xy_label_fontsize)\nax_chosen_PSPs.set_xlim(-1,time_ms[-1] + 1);\nax_chosen_PSPs.set_title('Selected PSPs (max normalized)', fontsize=title_fontsize)\n\n\n# all PSP traces\nax_PSP_traces.plot(time_ms, normalized_syn_filter.T, alpha=0.15);\nax_PSP_traces.set_xlim(-1,time_ms[-1] + 1);\nax_PSP_traces.set_title('All PSPs (min-max normalized)', fontsize=title_fontsize)\nax_PSP_traces.set_xlabel('Time (ms)', fontsize=xy_label_fontsize)\n\n# NMF basis functions\nax_NMF_trance.plot(time_ms, NMF_basis_norm[:NMF_cutoff_ind].T);\nax_NMF_trance.set_xlim(-1,time_ms[-1] + 1);\nax_NMF_trance.set_title('NMF first %d basis functions' %(NMF_cutoff_ind), fontsize=title_fontsize)\nax_NMF_trance.set_xlabel('Time (ms)', fontsize=xy_label_fontsize)\n\n# variance explained\nax_explained_var.plot(np.arange(num_basis_functions + 1), cumsum_explained_var_percent, c='k')\nax_explained_var.scatter(dot_selected_ind, cumsum_explained_var_percent[NMF_cutoff_ind + 1], c='r', s=200)\nax_explained_var.set_title('Variance explained = %.2f%s' %(cumsum_explained_var_percent[NMF_cutoff_ind + 1],'%'), fontsize=title_fontsize);\nax_explained_var.set_xlabel('Num basis functions', fontsize=xy_label_fontsize); \nax_explained_var.set_ylabel('Explained %s' %('%'), fontsize=xy_label_fontsize); \nax_explained_var.set_ylim(-1,109); ax_explained_var.set_xlim(-0.3,12);\nax_explained_var.set_xticks([0,3,6,9,12]);\n","672e33ad":"# save figure\nfigure_name = 'F&F_L5PC_PSP_Figure_S2'\nfor file_ending in ['.png','.pdf']:\n    fig.savefig(figure_name + file_ending, bbox_inches='tight')","467c1e58":"## Save the figure","540dedad":"## Show NMF basis functions","c0b65711":"## Load data and gather necessary fields","456b7fa2":"# Display the final Figure (with neuronal morphology and a few selected traces)","a18d3ca2":"## Display everything together (like in Fig. 4)","68f9b056":"## Display soma and nexus voltages for all segments","86e1c9ea":"## Crop and normalize somatic traces","61d9f0ee":"## Calculate SVD and display basis functions","97433b18":"## Show variance explained (using PCA)"}}