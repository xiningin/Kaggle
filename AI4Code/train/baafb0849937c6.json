{"cell_type":{"37c09aaa":"code","e88aec26":"code","3a42789a":"code","5e252fc5":"code","b47a907e":"code","d20456d6":"code","cf2e4c02":"code","2792c8ad":"code","9530b340":"code","2434dca5":"code","485105b5":"code","ff1976fc":"code","686cb7a2":"code","14368efc":"markdown"},"source":{"37c09aaa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e88aec26":"#reading the files\ntrain = pd.read_csv(\"..\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"..\/input\/learn-together\/test.csv\")","3a42789a":"#some basic data characteristics\na = (train[train.columns[15:-1]]==1).sum() \nb = (test[test.columns[15:]]==1).sum() \nprint(pd.concat([a.rename('train'),b.rename('test')], axis=1))","5e252fc5":"#Seems like cols Soil_Type7 and Soil_Type15 can be dropped without much affecting accuracy\nc = (train[train.columns[11:15]]==1).sum() \nd = (test[test.columns[11:15]]==1).sum() \nprint(pd.concat([c.rename('train'),d.rename('test')], axis=1))","b47a907e":"#The distribution of Wilderness Area appears to be ok.\n#dropping Soil_Type7 and Soil_Type15\ntrain = train.drop(['Id','Soil_Type7', 'Soil_Type15'], axis = 1)\ntestids = test['Id']\ntest = test.drop(['Id','Soil_Type7', 'Soil_Type15'], axis = 1)","d20456d6":"#preparing data for training the model\nX = train.drop(['Cover_Type'], axis = 1)\ny = train.Cover_Type","cf2e4c02":"def reduceToColIndex(df, col_name, head, mid, end):\n    '''reduce soil type cols to single col with col index'''\n    df_ = df.iloc[:, :head].join(df.iloc[:,head:end] \\\n                          .dot(range(1,mid)).to_frame(col_name)) \\\n                          .join(df.iloc[:,end])\n    return df_","2792c8ad":"#reducing Soil_Type cols to col index\nX = reduceToColIndex(X, 'Soil_Type1', 14, 38, -1)\ntest = reduceToColIndex(test, 'Soil_Type1', 14, 38, -1)","9530b340":"from sklearn.model_selection import train_test_split\n#splitting data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y)","2434dca5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV","485105b5":"#preparing model\nmodel = RandomForestClassifier()\nparams_rf = {'n_estimators': [10, 50, 75]}\nrf_gs = GridSearchCV(model, params_rf, cv=5)\nrf_gs.fit(X_train,y_train)","ff1976fc":"#get the error rate\nval_predictions = rf_gs.predict(X_val)\nval_mae = mean_absolute_error(y_val,val_predictions)\nprint('Fourth try mae with RFClassifier: ', val_mae)","686cb7a2":"test_preds = rf_gs.predict(test)\noutput = pd.DataFrame({'Id': testids, 'Cover_Type': test_preds.astype(int)})\noutput.to_csv('submission.csv', index=False)","14368efc":"# Persisting with basics"}}