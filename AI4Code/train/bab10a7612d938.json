{"cell_type":{"80eff7d9":"code","156c35cb":"code","b0980e22":"code","394f0034":"code","acb64e88":"code","d95ead40":"code","249d5c03":"code","44c4573d":"code","5d254082":"code","c131e7b9":"code","331848ca":"code","569732f7":"code","ec8a6eec":"code","9fb524ad":"code","4bf408bc":"code","8206162d":"code","89276e13":"code","24e60f7c":"code","81d0a567":"code","3163c7f1":"code","d7e8c52d":"code","4fa037b1":"code","2bc245e7":"code","2f6ce41b":"code","fba2b2b4":"code","3e754db3":"code","fc015454":"code","c34982bf":"code","36efea2c":"code","0fc7c34d":"code","11b1964a":"code","98233bf1":"code","ebca32df":"code","667df38a":"code","be85b6c0":"code","21b34eb8":"code","d90f9b8b":"code","824d4d0a":"code","619b3078":"code","912dc747":"code","28970bbf":"code","479d8adb":"code","d107bb4e":"code","28a46977":"code","d1358f1d":"code","698398b7":"code","7816d632":"code","a97dacf0":"code","5b9b57e3":"code","6cd78f69":"code","be28f786":"code","20ab9cd6":"code","850c4a4c":"code","b4a4f02d":"code","652e309b":"code","45560112":"code","8957fd4f":"code","49c99d76":"code","ac1d5e4c":"code","5c1e0370":"code","5660abf0":"code","11a31905":"code","ad701f89":"code","d8f6c566":"code","ec63af50":"code","aee86f79":"code","29965127":"code","5eeae60d":"code","1bba68ea":"code","a4c2e645":"code","b0ca9e13":"code","fab98d9d":"code","d03c778e":"code","4597b2b6":"code","fd00f6e0":"code","8fe7bcaf":"code","4d5431e1":"code","5f1f0437":"code","e291452e":"code","b4fcc33e":"code","d1db67af":"code","1822951a":"code","cc3a3a64":"code","3cf43487":"code","a84e30fd":"code","793132fe":"code","c2ec9daa":"code","a28efea9":"code","8b4ac532":"code","e23f3c58":"code","5ed42669":"code","b8050b76":"code","71a448ea":"code","fb9bf0da":"code","5ae1a789":"code","bb3e2c84":"code","549b596f":"code","a4441f14":"code","18516e6d":"code","9cea80ba":"code","8d81217a":"code","5de26563":"code","5fd4de61":"code","9192502a":"code","449b3800":"code","a964c6fc":"code","ae4a2794":"markdown","c67cb9c7":"markdown"},"source":{"80eff7d9":"import pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","156c35cb":"PATH = '\/kaggle\/input\/superstore'\nDATASET = 'US Superstore data.xls'","b0980e22":"\"\"\"\nfrom io import BytesIO\nfrom urllib.request import urlopen\nfrom zipfile import ZipFile\n\nwith urlopen(DATASET_URL) as zipresp:\n    with ZipFile(BytesIO(zipresp.read())) as zfile:\n        zfile.extractall(PATH)\n\"\"\"","394f0034":"%ls -lrt","acb64e88":"df = pd.read_excel(f'{PATH}\/{DATASET}', date_parser=['TransactionDateTime', 'Ship Date'])","d95ead40":"df.sample(10)","249d5c03":"df.drop('Row ID', axis=1, inplace=True)","44c4573d":"df.shape","5d254082":"df.info()","c131e7b9":"df['NetPrice'] = (df['Sales'] - df['Profit']) \/ df['Quantity']","331848ca":"df.sample(5)","569732f7":"df.rename(columns={'Order ID': 'TransactionID', 'Order Date': 'TransactionDateTime', 'Ship Date': 'ShipDate', 'Ship Mode': 'ShipMode', 'Sub-Category': 'SubCategory', 'Postal Code':'PostalCode', 'Customer ID': 'CustomerID', 'Customer Name': 'CustomerName', 'Product ID': 'SKU', 'Product Name': 'ProductName'}, inplace=True)","ec8a6eec":"df.info()","9fb524ad":"df.describe()","4bf408bc":"df['SKU'].unique()","8206162d":"df['SKU'].nunique()","89276e13":"df['TransactionDateTime'].min(), df['TransactionDateTime'].max()","24e60f7c":"from datetime import datetime\n\ntoday = datetime.today()\noffset = today - df.TransactionDateTime.max()\nprint(offset.days)","81d0a567":"#df['TransactionDateTime'] = df['TransactionDateTime'] + pd.DateOffset(offset.days)\n#df['ShipDate'] = df['ShipDate'] + pd.DateOffset(offset.days)","3163c7f1":"#df['TransactionDateTime'].min(), df['TransactionDateTime'].max()","d7e8c52d":"df.loc[:, 'Country'].unique()","4fa037b1":"df.loc[:, 'State'].unique()","2bc245e7":"df.loc[:, 'City'].unique()","2f6ce41b":"states = df.loc[:, 'State'].unique()\nstateCities = dict()\nfor state in states:\n  stateCities[state] = df.loc[df.loc[:, 'State'] == state, 'City'].nunique()\n  \nprint(stateCities)\n","fba2b2b4":"df.loc[:, 'State'].value_counts()","3e754db3":"df.loc[:, 'ProductName'].value_counts()","fc015454":"df.loc[df.loc[:, 'TransactionID'] == 'CA-2014-148040']","c34982bf":"df['Year'] = df['TransactionDateTime'].dt.year\ndf['Month'] = df['TransactionDateTime'].dt.strftime('%Y-%b')\ndf['Week'] = df['TransactionDateTime'].dt.week\ndf['DayOfWeek'] = df['TransactionDateTime'].dt.dayofweek\ndf['Day'] = df['TransactionDateTime'].dt.day","36efea2c":"df.sample(5)","0fc7c34d":"import plotly.express as px","11b1964a":"px.scatter(data_frame=df, x='TransactionDateTime', y='Sales', size='Sales', color='Category')","98233bf1":"thresholdSales = 2000\ndf.drop(df[df['Sales'] > thresholdSales].index, inplace=True)","ebca32df":"px.scatter(data_frame=df, x='TransactionDateTime', y='Sales', size='Sales', color='Category')","667df38a":"import plotly.graph_objects as go","be85b6c0":"df_sales_per_week = df.groupby(['Year', 'Week'])['Sales'].sum().reset_index()","21b34eb8":"df_sales_per_week.head()","d90f9b8b":"df_sales_per_week.loc[:, 'Year'].unique()","824d4d0a":"for year in df_sales_per_week.loc[:, 'Year'].unique():\n  df_plot = df_sales_per_week.loc[df_sales_per_week.loc[:, 'Year'] == year]\n  x = df_plot.loc[:, 'Week']\n  y = df_plot.loc[:, 'Sales']\n  fig = go.Figure(go.Bar(x=x, y=y))\n  fig.add_trace(go.Line(x=x, y=y))\n  fig.show()","619b3078":"fig = px.line(df_sales_per_week, x=\"Week\", y=\"Sales\", color='Year', title=\"Weekly Sales\")\nfig.show()","912dc747":"df_sales_per_month = df.groupby(['Year', 'Month'])['Sales'].sum().reset_index()","28970bbf":"fig = px.line(df_sales_per_month, x=\"Month\", y=\"Sales\", title=\"Monthly Sales\")\nfig.show()","479d8adb":"N = 5\ntopN_products = df['SKU'].value_counts()[:N].index","d107bb4e":"df_sales_per_product_id = df.groupby(['Year', 'SKU', 'Month'])['Sales'].count().reset_index()","28a46977":"df_sales_per_product_id","d1358f1d":"df_plot = df_sales_per_product_id.loc[df_sales_per_product_id.loc[:, 'SKU'].isin(topN_products)]","698398b7":"fig = px.bar(df_plot.loc[df_plot.loc[:, 'Year'] == 2014], x=\"Month\", y=\"Sales\", color='SKU', title=\"Monthly SKU Sales\")\nfig.show()","7816d632":"fig = px.bar(df_plot.loc[df_plot.loc[:, 'Year'] == 2015], x=\"Month\", y=\"Sales\", color='SKU', title=\"Monthly SKU Sales\")\nfig.show()","a97dacf0":"fig = px.bar(df_plot.loc[df_plot.loc[:, 'Year'] == 2016], x=\"Month\", y=\"Sales\", color='SKU', title=\"Monthly SKU Sales\")\nfig.show()","5b9b57e3":"fig = px.bar(df_plot.loc[df_plot.loc[:, 'Year'] == 2017], x=\"Month\", y=\"Sales\", color='SKU', title=\"Monthly SKU Sales\")\nfig.show()","6cd78f69":"df.info()","be28f786":"df['Category'].unique()","20ab9cd6":"df['SubCategory'].unique()","850c4a4c":"from fbprophet import Prophet","b4a4f02d":"# set the uncertainty interval to 95% (the Prophet default is 80%)\nmy_model = Prophet(interval_width=0.95)","652e309b":"df_Train = df.loc[:, ['TransactionDateTime', 'Sales']]","45560112":"df_Train.info()","8957fd4f":"df_Train.sort_values(by='TransactionDateTime', ascending=True, inplace=True)","49c99d76":"df_Train['TransactionDateTime'][:500].value_counts()","ac1d5e4c":"df_Train = df_Train.set_index('TransactionDateTime')\ndaily_df = df_Train.resample('D').mean()\ndf_Train.reset_index()\nd_df = daily_df.reset_index().dropna()","5c1e0370":"d_df['Sales'] = np.log(d_df['Sales'])","5660abf0":"d_df.columns = ['ds', 'y']","11a31905":"d_df.head()","ad701f89":"d_df['ds'].min(), d_df['ds'].max()","d8f6c566":"m = Prophet()\nm.fit(d_df)","ec63af50":"future = m.make_future_dataframe(periods=12, freq=\"m\")\nfuture.tail()","aee86f79":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","29965127":"fig1 = m.plot(forecast, uncertainty=True, figsize=(30,6))","5eeae60d":"fig2 = m.plot_components(forecast, figsize=(30,12))","1bba68ea":"from fbprophet.plot import plot_plotly\n\nfig = plot_plotly(m, forecast, figsize=(1600, 900))\nfig.show()","a4c2e645":"forecast","b0ca9e13":"d_df","fab98d9d":"out_df = forecast[['ds', 'yhat']]\nout_df.set_index('ds', inplace=True)","d03c778e":"in_df = d_df.copy()\nin_df.set_index('ds', inplace=True)\n\nout_df['y'] = in_df['y']\nout_df = out_df.reset_index()","4597b2b6":"metrics_df = out_df[out_df['ds'] <= df['TransactionDateTime'].max()]\nout_df","fd00f6e0":"from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error\n\nmae = mean_absolute_error(y_true=metrics_df['y'], y_pred=metrics_df['yhat'])\nmse = mean_squared_error(y_true=metrics_df['y'], y_pred=metrics_df['yhat'])\nmsle = mean_squared_log_error(y_true=metrics_df['y'], y_pred=metrics_df['yhat'])\n\nprint(f'Prophet model has MAE {mae:0.4f} - MSE {mse:0.4f} - MSLE {msle:0.4f}')","8fe7bcaf":"del out_df, in_df, metrics_df","4d5431e1":"df.sample(5)","5f1f0437":"df['SKU'].nunique()","e291452e":"df['SKU'].value_counts()","b4fcc33e":"thresholdNProducts = 10\nindexNProducts = (df['SKU'].value_counts() >= thresholdNProducts).sum()\nprint(indexNProducts)","d1db67af":"df['SKU'].value_counts()[:indexNProducts].index","1822951a":"topNProducts = list(df['SKU'].value_counts()[:indexNProducts].index)","cc3a3a64":"df_temp = df[['TransactionDateTime', 'SKU', 'Quantity']]\nminDate = df['TransactionDateTime'].min()\nmaxDate = df['TransactionDateTime'].max()\ndf_emptyDateIndex = pd.DataFrame(index=pd.date_range(start=minDate, end=maxDate, freq=\"7d\"), columns=['Quantity']).fillna(0)\ndf_emptyDateIndex.index.rename(\"TransactionDateTime\", inplace=True)\ndf_topNProducts = dict()\nfor sku in topNProducts:\n  df_empty_temp = df_emptyDateIndex.copy()\n  df_sku_temp = df_temp[df_temp['SKU'] == sku].groupby('TransactionDateTime')['Quantity'].sum().reset_index().set_index('TransactionDateTime')\n  df_topNProducts[sku] = pd.concat([df_sku_temp, df_empty_temp], join='outer')\n  ","3cf43487":"df_temp[df_temp['SKU'] == 'OFF-PA-10001970']['Quantity'].sum()","a84e30fd":"df_sku_temp = df_temp[df_temp['SKU'] == 'OFF-PA-10001970'].groupby('TransactionDateTime')['Quantity'].sum().reset_index().set_index('TransactionDateTime')\ndf_sku_temp","793132fe":"df_empty_temp = df_emptyDateIndex.copy()\ndf_empty_temp","c2ec9daa":"df_empty_temp.update(df_sku_temp)\ndf_empty_temp.combine_first(df_sku_temp)\ndf_empty_temp['Quantity'].sum()","a28efea9":"df_tt = df_topNProducts['OFF-PA-10001970']\nprint(df_tt[df_tt['Quantity'] > 0])\nprint(df_tt['Quantity'].sum())","8b4ac532":"def prophetModel(df, period, frequency):\n  m = Prophet()\n  #m.add_country_holidays(country_name='US')\n  m.fit(df)\n  future = m.make_future_dataframe(periods=period, freq=frequency)\n  forecast = m.predict(future)\n  return forecast","e23f3c58":"df_toModel = df_topNProducts['OFF-PA-10001970'].reset_index().dropna()\ndf_toModel.columns = ['ds', 'y']\n#df_toModel['y'] = np.log(df_toModel['y'])\n#df_toModelTrain = df_toModel[:int(df_toModel.shape[0] * 0.8)]\ndf_toModelTrain = df_toModel\ndf_forecastProduct = prophetModel(df_toModelTrain, 2, \"w\") # 21 days\ndf_forecastProduct[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(50)","5ed42669":"forecastNProducts = dict()\nperiod = 2\nfrequency = \"w\"\nfor key in df_topNProducts.keys():\n  df_toModel = df_topNProducts[key].reset_index().dropna()\n  df_toModel.columns = ['ds', 'y']\n  df_forecastProduct = prophetModel(df_toModel, period, frequency) # for 3 weeks\n  forecastNProducts[key] = df_forecastProduct.tail()","b8050b76":"print(forecastNProducts['OFF-PA-10001970'])","71a448ea":"df.loc[df.loc[:, 'SKU'] == 'OFF-PA-10000587']","fb9bf0da":"df.info()","5ae1a789":"df11 = df.groupby('SKU')['ProductName', 'NetPrice'].max().reset_index()\ndf11['Quantity'] = np.random.choice([2, 5], df11.shape[0])","bb3e2c84":"df11.info()","549b596f":"#df11.to_csv('inventory.csv')","a4441f14":"#df.to_csv('tranactions.csv')","18516e6d":"import fbprophet as prophet\nprophet.__version__\n","9cea80ba":"import pickle","8d81217a":"df_Products = df.groupby(['SKU', 'ProductName'])['CustomerID'].max().reset_index()[['SKU', 'ProductName']]\ndf_Products.sample(5)","5de26563":"df_predictedAll = pd.DataFrame()\n\nfor key in forecastNProducts.keys():\n  df_prod = forecastNProducts[key][['ds', 'yhat', 'yhat_lower', 'yhat_upper']]\n  df_prod['SKU'] = key\n  df_predictedAll = df_predictedAll.append(df_prod)","5fd4de61":"df_predictedAll = df_predictedAll.merge(df_Products, on='SKU')\ndf_predictedAll.sample(5)","9192502a":"df_predictedAll.drop_duplicates(subset=['ds', 'SKU'], keep='last', inplace=True)","449b3800":"df_predictedAll.to_csv('predictions.csv', index=False)","a964c6fc":"df.columns","ae4a2794":"Prophet model has MAE 0.6598 - MSE 0.7695 - MSLE 0.0295","c67cb9c7":"Removing the Outliers"}}