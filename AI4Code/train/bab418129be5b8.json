{"cell_type":{"c3e394ba":"code","281f7041":"code","8d9b4981":"code","4870bd5a":"code","5a32345f":"code","d4f102ed":"code","4ce6e9d3":"code","f056d93e":"code","0fda5e22":"code","7c0e0d0f":"code","b9c974b9":"code","affc818c":"code","f5bc7d26":"code","90d4c08c":"code","2d493f89":"code","92935ea4":"code","d71dfda5":"code","793ef5fb":"code","0a8a0978":"code","08453973":"code","f99406d7":"code","0cf0e67f":"code","07c90283":"code","b9ed31ca":"code","f4ae5954":"code","16c0c9eb":"markdown","8a0be833":"markdown","2fffdb1c":"markdown","32549106":"markdown","289f6d01":"markdown","cdfef0eb":"markdown","2cb604e6":"markdown","03a70608":"markdown","7a6757ae":"markdown"},"source":{"c3e394ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats\nimport squarify as sq\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\nimport sklearn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler,LabelEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split,cross_val_score, KFold\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.cluster import KMeans\nfrom wordcloud import WordCloud, STOPWORDS\n%matplotlib inline\n\n\n# Any results you write to the current directory are saved as output.","281f7041":"#reading the data\nmusic = pd.read_csv('..\/input\/top50spotify2019\/top50.csv',encoding='ISO-8859-1')","8d9b4981":"music.shape","4870bd5a":"music.info()","5a32345f":"music.head(10)","d4f102ed":"music.describe()","4ce6e9d3":"music.drop('Unnamed: 0', axis=1, inplace=True)","f056d93e":"music.isnull().sum()\nmusic=music.fillna(0)","0fda5e22":"music.isnull()","7c0e0d0f":"music.hist(figsize=(20,20))","b9c974b9":"music['Genre'].value_counts().plot.bar()\nplt.suptitle('Counts for Genre')","affc818c":"music_corr = music.corr()\nsns.heatmap(music_corr, annot=True,cmap ='RdYlGn')\nplt.suptitle('Correlation for Top 50')","f5bc7d26":"#changing columns\nmusic.columns = ['Track', 'Artist', 'Genre', 'BPM', 'Energy', 'Danceability', 'Loudness', \n               'Liveness', 'Valence', 'Length', 'Acousticness', 'Speechiness', 'Popularity']","90d4c08c":"#Most popular artist\nart_pop = music.groupby('Artist')['Popularity'].mean().sort_values(ascending = False)\nprint(\"Artist Popularity\")\nart_pop","2d493f89":"#Finding out the skew for each attribute\nskew=music.skew()\nprint(skew)\n# Removing the skew by using the boxcox transformations\ntransform=np.asarray(music[['Liveness']].values)\nmusic_transform = stats.boxcox(transform)[0]\n# Plotting a histogram to show the difference \nplt.hist(music['Liveness'],bins=10)#original data\nplt.suptitle('Skewness for Music Liveness')\nplt.show()\nplt.hist(music_transform,bins=10) #corrected skew data\nplt.suptitle('Skewness for Music Liveness after Transformation')\nplt.show()","92935ea4":"artist_list = music[\"Artist\"].unique().tolist()\nartist_list[:2]","d71dfda5":"artist = \" \".join(artist_list)\nartist[:100]","793ef5fb":"# create a word cloud for artist\nartist_wordcloud = WordCloud().generate(artist)\n# show the created image of word cloud\nplt.figure()\nplt.imshow(artist_wordcloud)\nplt.show()","0a8a0978":"#word cloud for genre\ngenre_list = music[\"Genre\"].unique().tolist()\ngenre_list[:2]\ngenre = \" \".join(genre_list)\ngenre[:100]\n# create a word cloud for artist\ngenre_wordcloud = WordCloud().generate(genre)\n# show the created image of word cloud\nplt.figure()\nplt.imshow(genre_wordcloud)\nplt.show()","08453973":"le = LabelEncoder()\n\nfor col in music.columns.values:\n  if music[col].dtypes == 'object':\n    le.fit(music[col].values)\n    music[col] = le.transform(music[col])\n\nmusic.head()","f99406d7":"# Create test and train dataset\nX = music.drop('Loudness', axis=1)\ny = music.Loudness\n","0cf0e67f":"X.drop('Artist', axis=1, inplace=True)\n\n# Creating a test and training dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n#Scaling the data\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)\n\ntype(X_train), type(X_test)","07c90283":"# Linear Regression\nLin_reg = LinearRegression()\nLin_reg.fit(X_train, y_train)\n\ny_pred = Lin_reg.predict(X_test)\n\nprint(Lin_reg.intercept_, Lin_reg.coef_)\nprint(mean_squared_error(y_test, y_pred))","b9ed31ca":"#SVR\nSVR_Reg = SVR(C=0.5)\nSVR_Reg.fit(X_train, y_train)\n\ny_pred = SVR_Reg.predict(X_test)\nprint(mean_squared_error(y_test, y_pred))","f4ae5954":"#KMEAN\nclustering = KMeans(n_clusters=2)\nclustering.fit(X_train, y_train)\n\ny_pred = clustering.predict(X_test)\nprint(mean_squared_error(y_test, y_pred))","16c0c9eb":"Author: Shruti Gupta <br>\nDate: 22\/02\/2020 <br>\nVersion: 2","8a0be833":"getting the initial discription of top 50 songs from spotify","2fffdb1c":"Some Machine Learning to Aanalysis Spotify Top 50","32549106":"dropping unwanted columns and filling any missing values","289f6d01":"Word Cloud","cdfef0eb":"Further Calculations","2cb604e6":"Displaying intital graphs","03a70608":"Date: 05\/01\/2020<br>\nVersion: 1<br>\n**Checking of top 50 of songs and artist in the year 2019 on Spotify.**","7a6757ae":"Based on this it seens that SVR best calculations"}}