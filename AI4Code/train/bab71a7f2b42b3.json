{"cell_type":{"feb9b417":"code","55c2dbfc":"code","283a427b":"code","2ccb75c5":"code","207a6d59":"code","c66b5ff1":"code","e1e26f8c":"code","cf51245c":"code","900c9d78":"code","eff416f0":"markdown","8aed5eb2":"markdown"},"source":{"feb9b417":"import numpy as np\nimport pandas as pd\nimport glob\nimport os\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom pathlib import Path\nimport plotly.express as px\nimport math","55c2dbfc":"data_dir = Path(\"..\/input\/google-smartphone-decimeter-challenge\")\ntrain_df = pd.read_csv(data_dir \/ \"baseline_locations_train.csv\")","283a427b":"# get all ground truth dataframe\ngt_df = pd.DataFrame()\nfor (collection_name, phone_name), df in tqdm(train_df.groupby([\"collectionName\", \"phoneName\"])):\n    path = data_dir \/ f\"train\/{collection_name}\/{phone_name}\/ground_truth.csv\"\n    df = pd.read_csv(path)  \n    gt_df = pd.concat([gt_df, df]).reset_index(drop=True)   \ngt_df.head()\n\ngt_df['phone'] = gt_df['collectionName'] + '_' + gt_df['phoneName']\n\ntrain_data = pd.read_csv('..\/input\/google-smartphone-decimeter-challenge\/baseline_locations_train.csv')","2ccb75c5":"def calc_haversine(lat1, lon1, lat2, lon2):\n    \"\"\"Calculates the great circle distance between two points\n    on the earth. Inputs are array-like and specified in decimal degrees.\n    \"\"\"\n    RADIUS = 6_367_000\n    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = np.sin(dlat\/2)**2 + \\\n        np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2)**2\n    dist = 2 * RADIUS * np.arcsin(a**0.5)\n    return dist\n\ndef percentile50(x):\n    return np.percentile(x, 50)\ndef percentile95(x):\n    return np.percentile(x, 95)\n\ndef get_train_score(df, gt):\n    gt = gt.rename(columns={'latDeg':'latDeg_gt', 'lngDeg':'lngDeg_gt'})\n    df = df.merge(gt, on=['collectionName', 'phoneName', 'millisSinceGpsEpoch'], how='inner')\n    # calc_distance_error\n    df['err'] = calc_haversine(df['latDeg_gt'], df['lngDeg_gt'], df['latDeg'], df['lngDeg'])\n    # calc_evaluate_score\n    df['phone'] = df['collectionName'] + '_' + df['phoneName']\n    res = df.groupby('phone')['err'].agg([percentile50, percentile95])\n    res['p50_p90_mean'] = (res['percentile50'] + res['percentile95']) \/ 2 \n    score = res['p50_p90_mean'].mean()\n    return score","207a6d59":"gt_df['gt'] = 1\ntrain_data['gt'] = 0","c66b5ff1":"def dm(x):\n    degrees = x \/\/ 100\n    minutes = x - 100*degrees\n\n    return degrees, minutes\n\ndef decimal_degrees(degrees, minutes):\n    return degrees + minutes\/60 ","e1e26f8c":"data_path = Path(\"..\/input\/android-smartphones-high-accuracy-datasets\/training\")\n\ntruths = (data_path).rglob('*chipset.nmea')\n    # returns a generator\n    \ndf_list = []\n\nfor t in tqdm(truths, total=34):\n    \n    df_phone = pd.read_table(t, sep=',', header=None, index_col=1, parse_dates=True, comment='*')\n    \n    df_phone['phone'] = t\n    print(t)\n    \n    df_list.append(df_phone)\n    \ndf_truth = pd.concat(df_list, ignore_index=True)\n\n#The next steps are just input data processing. \n#To understand it better, you may want to run it line by line and compare with the previous line.\n\ndf_truth = df_truth[[2,4, 'phone']]\ndf_truth.rename(columns={2: 'latDeg', 4: 'lngDeg'}, inplace=True)\n\ndf_truth = df_truth[df_truth.latDeg != 'A']\ndf_truth[\"latDeg\"] = pd.to_numeric(df_truth[\"latDeg\"], downcast=\"float\")\ndf_truth[\"lngDeg\"] = pd.to_numeric(df_truth[\"lngDeg\"], downcast=\"float\")\ndf_truth['latDeg'] = decimal_degrees(*dm(df_truth['latDeg']))\ndf_truth['lngDeg'] = 0 - decimal_degrees(*dm(df_truth['lngDeg']))\n\ndf_truth['gt'] = 2\n\ndf_truth","cf51245c":"ccc = pd.concat([df_truth, gt_df],ignore_index=True)","900c9d78":"fig = px.scatter_mapbox(ccc,\n\n                    # Here, plotly gets, (x,y) coordinates\n                    lat=\"latDeg\",\n                    lon=\"lngDeg\",\n                    #text='phoneName',\n\n                    #Here, plotly detects color of series\n                    color=\"gt\",\n                    #labels=\"collectionName\",\n\n                    zoom=9,\n                    center={\"lat\":37.423576, \"lon\":-122.094132},\n                    height=600,\n                    width=800)\nfig.update_layout(mapbox_style='open-street-map')\nfig.update_layout(margin={\"r\": 0, \"t\": 0, \"l\": 0, \"b\": 0})\nfig.update_layout(title_text=\"GPS trafic\")\nfig.show()","eff416f0":"Now let us see that newly added data is indeed new and wasnt included as the basic training datasets.","8aed5eb2":"Now let us introduce some helper functions which would help us to get lat\/lng. For more info on that you may want to look for converting a degrees-minutes-seconds coordinate pairs to decimal degrees."}}