{"cell_type":{"63be4b70":"code","5f96f800":"code","713e36c7":"code","6cb9077a":"code","822e53d6":"code","f08ba07a":"code","bb5d3dd4":"code","89cb261b":"code","77f49f52":"code","0d829ff5":"code","d0ddcc65":"code","89fb6238":"code","f42f1b44":"code","60c715bd":"code","e382f718":"code","1c66ed28":"code","8f1976f4":"code","91a9401f":"code","abc5d3c1":"code","af4ca653":"code","19551992":"code","fa13d3e7":"code","8cf6114d":"code","4b11060b":"markdown","66686add":"markdown","aaed3304":"markdown","82c6644d":"markdown","cac7a835":"markdown","87a025ed":"markdown","25bf4def":"markdown","c7dfdb28":"markdown","aa192b4f":"markdown","7e1d8900":"markdown","b7c949b6":"markdown","ebe163ef":"markdown","60ce64c6":"markdown","13a9e7ec":"markdown","8d5eed03":"markdown","853a4c9e":"markdown","c16a29be":"markdown","320da80f":"markdown","9a26677e":"markdown","794ef25e":"markdown","0ced5ec7":"markdown","15348840":"markdown","cc80d005":"markdown","10dd53a4":"markdown","5a0938ce":"markdown","987775fb":"markdown","f0ef6a3e":"markdown"},"source":{"63be4b70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f96f800":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport datetime\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)","713e36c7":"data = pd.read_csv('\/kaggle\/input\/windows-store\/msft.csv', parse_dates=['Date'])\n# Making 3 copies to use the original dataset on different occations\ndf = data.copy()\ndf1 = data.copy()\ndf_copy = data.copy()\ndata.head()","6cb9077a":"# Broadly classifying the ratings for convenience\nmapping_dict = {\n5.0:'Good',\n4.5:'Good',    \n4.0:'Good',    \n3.5:'Average',     \n3.0:'Average',     \n2.5:'Average',     \n2.0:'Poor',     \n1.5:'Poor',      \n1.0:'Poor',     \n}\n\ndf.loc[:,'Rating'] = df.Rating.map(mapping_dict)\ndf.dropna(inplace=True)\n\n# Chaning the price of paid apps to a single value-'Paid'.\nfor row in range(df.shape[0]):\n    if df.loc[row, 'Price'] != 'Free':\n        df.loc[row, 'Price'] = 'Paid'\ndf.tail()","822e53d6":"plt.figure(figsize=(12,7))\ng = sns.countplot(df.Rating, hue=df.Price, palette=\"cubehelix\", order=['Good', 'Average', 'Poor'])\nfor p in g.patches:\n    g.annotate(p.get_height(), (p.get_x() + p.get_width()\/2, p.get_height()), ha='center', va='center', xytext=(0,10), textcoords = 'offset points')\ng.set_ylabel('Total Ratings')\ng.set_title('Frequency of Good, Average and Bad Ratings', fontsize=20)\nplt.show()","f08ba07a":"fig = px.pie(df, names='Rating', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(title_text='Distribution of Ratings', font_size=15)\nfig.show()","bb5d3dd4":"plt.figure(figsize=(12,7))\ncat_df = df_copy.groupby(['Category'])['No of people Rated'].sum().sort_values(ascending=False).reset_index()\ng = sns.barplot(x='Category', y='No of people Rated', data=cat_df, palette=\"cubehelix\")\nfor p in g.patches:\n  g.annotate(int(p.get_height()), (p.get_x() + p.get_width()\/2, p.get_height()), ha='center', va='center', xytext=(0,10), textcoords = 'offset points')\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title('Total number of people rated the Apps by Category', fontsize=20)\nplt.show()","89cb261b":"df_total_people = pd.DataFrame(df1.groupby(['Category'])['No of people Rated'].sum().reset_index())\ndf_avg_rating = pd.DataFrame(df1.groupby(['Category'])['Rating'].mean().reset_index())\n\ndf_final = df_total_people \ndf_final['Average Rating'] = df_avg_rating['Rating']\n\nfig = px.scatter(df_final, x='Average Rating', y='Category', size='No of people Rated', color='Category')\nfig.update_layout(title=\"Average Rating - Category wise\")\nfig.show()","77f49f52":"plt.figure(figsize=(12,7))\nrate_df = df1.groupby(['Category'])['Rating'].mean().sort_values(ascending=False).reset_index()\ng = sns.barplot(x='Category', y='Rating', data=rate_df, palette='GnBu_d')\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '0.2f'), (p.get_x() + p.get_width()\/2, p.get_height()), ha='center', va='center', xytext=(0,10), textcoords = 'offset points')\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title('Average Rating by Category', fontsize=20)\nplt.show()","0d829ff5":"plt.figure(figsize=(12,7))\ng = sns.boxplot(x='Category', y='Rating', data=data.dropna())\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title('Interquartile distribution of Ratings by Category', fontsize=20)\nplt.show()","d0ddcc65":"percentage_free = format(df.Price.value_counts()['Free']\/len(df)*100, '0.2f')\npercentage_paid = format(df.Price.value_counts()['Paid']\/len(df)*100, '0.2f')\n\ncolors = ['gold', 'mediumturquoise']\n\nfig = go.Figure(data=[go.Pie(labels=['Free Apps','Paid Apps'],\n                             values=[percentage_free, percentage_paid])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+label', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution of Paid Apps & Free Apps', font_size=15)\nfig.show()","89fb6238":"df['Year'] = pd.DatetimeIndex(df['Date']).year\ndf_year = df.groupby(['Year', 'Category'])['No of people Rated'].sum()\ndf_year = pd.DataFrame(df_year.reset_index())\ndf_year","f42f1b44":"plt.figure(figsize=(16,9))\ng = sns.barplot(x='Year', y='No of people Rated', data = df_year, palette='Set2', errwidth=1, capsize=0.5, dodge=True)\ng.set_title('Total number of people rated the Apps by Year ', fontsize=20)\nplt.show()","60c715bd":"plt.figure(figsize=(20,9))\ng = sns.barplot(x='Year', y='No of people Rated', data = df_year, hue='Category')\ng.set_title('Total number of people rated the Apps by Year by Category ', fontsize=20)\ng.legend(loc='upper left')\nplt.show()","e382f718":"dayOfWeek={0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}\ndf['Weekday'] = pd.DatetimeIndex(df['Date']).weekday\ndf['Weekday'] = df['Weekday'].map(dayOfWeek)","1c66ed28":"table0 = pd.pivot_table(df, index='Weekday', values=['No of people Rated'], aggfunc={'No of people Rated':np.sum}).reset_index()\nfig = px.bar(table0, x=\"Weekday\", y=\"No of people Rated\",\n             color='Weekday',\n             height=400)\nfig.update_layout(title_text='No of people reviewed Apps by Weekday', font_size=15)\nfig.show()","8f1976f4":"df_paid = df[df.Price=='Paid']\npaid_perc_poor = format(df_paid.Rating.value_counts()['Poor']\/df_paid.Rating.value_counts().sum()*100, '0.2f')\npaid_perc_good = format(df_paid.Rating.value_counts()['Good']\/df_paid.Rating.value_counts().sum()*100, '0.2f')\npaid_perc_average = format(df_paid.Rating.value_counts()['Average']\/df_paid.Rating.value_counts().sum()*100, '0.2f')","91a9401f":"import plotly.graph_objects as go\ncolors = ['gold', 'mediumturquoise', 'lightgreen']\nfig = go.Figure(data=[go.Pie(labels=['poor','good','average'],\n                              values=[paid_perc_poor, paid_perc_good, paid_perc_average])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+label', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution of Ratings of Paid Apps', font_size=15)\nfig.show()","abc5d3c1":"df_price = df1[df1.Price!='Free'].dropna()\ndf_price['price'] = df_price.Price.str.split(expand=True)[1]\ndf_price.drop('Price', axis=1, inplace=True)\ndf_price['price'] = df_price['price'].str.replace(',','')\ndf_price['price'] = df_price['price'].astype(float)\ndf_top_priced = df_price.sort_values(by='price', ascending=False).head(20)\ndf_top_priced = df_top_priced.reset_index(drop=True)\ndf_top_priced","af4ca653":"fig = px.bar(df_top_priced, x='price', y='Name',\n             hover_data=['Rating', 'No of people Rated'], color='Category',\n             height=800, orientation='h', color_discrete_sequence=px.colors.qualitative.G10)\nfig.update_layout(\n    title=\"Most expensive Paid Apps - Category wise\",\n    xaxis_title=\"Pricing(\u20b9)\",\n    yaxis_title=None\n    )\nfig.show()","19551992":"table1 = pd.pivot_table(df_top_priced, index=['Category'], values=['No of people Rated'], aggfunc={'No of people Rated':np.sum})\ntable1 = table1.reset_index()\nfig = px.bar(table1, x=\"Category\", y=\"No of people Rated\",\n             color='Category',\n             height=400)\nfig.update_layout(title_text='No of people reviewed Paid Apps by Category', font_size=15)\nfig.show()","fa13d3e7":"table2 = pd.pivot_table(df_top_priced, index=['Category'], values=['price'], aggfunc={'price':np.mean})\ntable2 = table2.reset_index()\nfig = px.bar(table2, x=\"Category\", y=\"price\",\n             color='Category',\n             height=400)\nfig.update_layout(title_text='Average Price of Paid Apps by Category', font_size=15)\nfig.show()\n","8cf6114d":"plt.figure(figsize=(12,7))\ng = sns.countplot(df.Weekday, order = df.Weekday.value_counts().index, palette='GnBu_d')\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\ng.set_title('Count of Apps published by Weekday', fontsize=20)\nplt.show()","4b11060b":"## <a id=\"2\">Distribution of Ratings<\/a>","66686add":"## <a id=\"11\">What is the average price of Paid Apps by Category?<\/a>","aaed3304":"### *Inference* : \n### Data shows that 'Monday', the starting of the weekdays is the most preferred day to release the Apps.","82c6644d":"### *Inference* : \n### Unlike the Free Apps the Paid Apps are rated very poorly. This is because of lower customer satisfaction even after paying for it.","cac7a835":"<ul>\n    <h2>Contents<\/h2>\n    <li><a href=\"#1\">Feature Columns<\/a><\/li>\n    <li><a href=\"#2\">Distribution of Ratings<\/a><\/li>\n    <li><a href=\"#3\">Category with highest downloads<\/a><\/li>\n    <li><a href=\"#4\">Category wise Average Rating<\/a><\/li>\n    <li><a href=\"#5\">Distribution of Paid and Free Apps<\/a><\/li>\n    <li><a href=\"#6\">Which year saw more number of Ratings? - Category wise study<\/a><\/li>\n    <li><a href=\"#7\">Weekdays with more number of Ratings<\/a><\/li>\n    <li><a href=\"#8\">How does the Paid App's Ratings are distributed?<\/a><\/li>\n    <li><a href=\"#9\">Which are the most expensive Paid Apps?<\/a><\/li>\n    <li><a href=\"#10\">How many have rated the Paid Apps?<\/a><\/li>\n    <li><a href=\"#11\">What is the average price of Paid apps by Category?<\/a><\/li>\n    <li><a href=\"#12\">Which weekdays the Developers tend to publish their Apps?<\/a><\/li>\n<\/ul>","87a025ed":"### *Inference* : \n### Pengwin Enterprice, EasyReader and RocketCake Professional are the most expensive apps to purchase","25bf4def":"## <a id=\"4\">Category wise Average Rating<\/a>","c7dfdb28":"### *Inference* : \n### Among the Paid Apps, Developer Tools is the most reviewed and rated (most times) Category.","aa192b4f":"## <a id=\"1\">Feature Columns<\/a>","7e1d8900":"### *Inference* : \n### It is observed that most of the Apps are rated either Good or Average in general. Looking even close reveals that many of the paid apps are rated Poor.\n","b7c949b6":"## <a id=\"6\">Which year witnessed more number of Ratings? - Category wise study<\/a>","ebe163ef":"## <a id=\"10\">How many people have rated the Paid Apps?<\/a>","60ce64c6":"### *Inference* : \n### It is evident that Saturdays and Sundays records the least number of downloads. This is probably because people are spending time with their family.","13a9e7ec":"## <a id=\"12\">Which weekdays the Developers tend to publish their Apps?<\/a>\n","8d5eed03":"# Microsoft Store - EDA\n\n### Exhaustive Analysis of Windows app data\n\n**Microsoft Store(Digital) is a digital distribution platform owned by Microsoft serving as the unified distribution point for apps, console games, and digital videos. Exploratory data analysis of user data always have revealed surprisingly useful insights about the products. This notebook is one such analysis done on Microsoft Windows App Data.**\n\n<img src=\"https:\/\/cdn.neow.in\/news\/images\/uploaded\/2019\/02\/1550593849_msstore6.jpg\" width=600><br>","853a4c9e":"### The dataset consists of the following feature columns\n\n1. Name: Name of the app\n2. Rating: Rating for the app\n3. No of People Rated : No of people who rated the app\n4. Category : Category of the app\n5. Date : Date when it is posted\n6. Price : Price of the app","c16a29be":"## <a id=\"7\">Weekdays with more number of Ratings<\/a>","320da80f":"### *Inference* : \n### There was a boom in the year 2016 and it shows moderate downloads in the year 2017 and 2018. This is probably due to the introduction of Nokia Lumia series phones with windows operating system. As Nokia shifted to andriod, the number of app downloads begine to diminish.","9a26677e":"### *Inference* : \n### Music, Books and Business Apps are rated more time whereas Food, Navigation, Multimedia and Government apps are rated least. This gives no evidence that the ones in top of the hierarchy are the favourites.","794ef25e":"## <a id=\"5\">Distribution of Paid and Free Apps<\/a>","0ced5ec7":"## <a id=\"3\">Category with highest downloads<\/a>","15348840":"## <a id=\"9\">Which are the most expensive Paid Apps?<\/a>","cc80d005":"### *Inference* : \n### Among the Paid Apps the Books Category has the highest Average Price.","10dd53a4":"## Thank you for your time. A review of this kernel is highly appreciated.","5a0938ce":"### *Inference* : \n### Majority of the apps (97%) are available to download for free","987775fb":"### *Inference* : \n### Almost all the Categories are having the average rating within 3.5 and 4 indicating that the Apps are curated before publishing. It is surprising that the all the categories except Multimedia design have the median at 4.","f0ef6a3e":"## <a id=\"8\">How does the Paid App's Ratings are distributed?<\/a>"}}