{"cell_type":{"72adc95e":"code","3f7baf72":"code","caf9c10e":"code","64af8f15":"code","f9078479":"code","23d70d9b":"code","924caf76":"code","c9674886":"code","5a36c9d7":"code","86a3f30d":"code","b23f5727":"code","19e366fe":"code","f1ab87c7":"code","566fc7ba":"code","93ef09d5":"code","8d89b5f3":"code","b5cb8cc3":"code","d548bb3a":"code","4ed8335c":"code","3f49efc5":"code","acea4631":"code","26085ec8":"code","bd7172f8":"code","7a83e229":"code","cc04a567":"code","8a91989f":"code","9addd6d7":"code","c976c746":"code","aedec707":"code","eab06ac9":"code","bd2c7c60":"code","2d416496":"code","ed69c416":"code","354d15c3":"code","44827df1":"code","0e60dfab":"code","166e5a4b":"code","ce528040":"code","19f3de9c":"code","6d1434d9":"code","55b75993":"code","2af7fa57":"code","995deff3":"code","f1de0e7a":"code","0f4049b1":"code","0ebd812c":"code","8dc39a86":"code","03985926":"code","66895b76":"code","f9edb2ae":"code","cb5b28a4":"code","355c1754":"code","05804bb1":"code","953aa10b":"code","46a58c79":"code","daf54a3c":"code","fc6cbd50":"code","69151dba":"code","415c6b09":"code","682dc27b":"code","f358cd0f":"code","e1d20a4a":"markdown","9b20acce":"markdown","d03762d6":"markdown","0e9b5dcb":"markdown","57a631f6":"markdown","45334d19":"markdown","0384839b":"markdown","014a869a":"markdown","f7bd92d7":"markdown","c7ad3fd3":"markdown","32c85dc2":"markdown","ed2ecb8b":"markdown","f047f4cc":"markdown","dcfa966c":"markdown","9715e252":"markdown","0a97b0ac":"markdown","8249efe0":"markdown","05acb3c1":"markdown","423531f6":"markdown","aa7cc1a0":"markdown","fcf78f8b":"markdown","07ddfc82":"markdown","7e1fcd07":"markdown"},"source":{"72adc95e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns # Visualization\nimport matplotlib.pyplot as plt # Visualization\nimport plotly.express as ex\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nfrom datetime import datetime\npyo.init_notebook_mode()\n%matplotlib inline\n\nimport warnings # Supress warnings \nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f7baf72":"vacc = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\nsummary = pd.read_csv(\"\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv\")\ndaily = pd.read_csv(\"\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv\")","caf9c10e":"summary.info()","64af8f15":"summary.head().append(summary.tail())","f9078479":"summary.sort_values(by='population',ascending=False)","23d70d9b":"daily.info()","924caf76":"daily.country.value_counts()","c9674886":"vacc.info()","5a36c9d7":"vacc.country.value_counts()","86a3f30d":"# Identify the differences of Country Names\n\nprint([x for x in daily.country.unique() if x not in summary.country.unique()])\n#There is no difference between Daily Data and Summary Data","b23f5727":"print(\"Countries in the Vaccination Data not in Summary Data\")\nprint([x for x in vacc.country.unique() if x not in summary.country.unique()])","19e366fe":"print(\"the number of counties in Vaccine Data: \",len(vacc.country.unique()), \n      \"the number of countries in Summarn Data: \",len(summary.country.unique()))","f1ab87c7":"# Unify the names according to Summary Data\nvacc.country = vacc.country.replace().replace({\n    \"Czechia\": \"Czech Republic\", \n    \"United States\": \"USA\", \n    \"United Kingdom\": \"UK\", \n    \"Isle of Man\": \"Isle Of Man\",\n    \"Republic of Ireland\": \"Ireland\",\n    \"Northern Cyprus\" : \"Cyprus\"\n})\n\n# drop England, Scotland, Wales, Northern Ireland since they are included in UK \nvacc = vacc[vacc.country.apply(lambda x: x not in ['England', 'Scotland', 'Wales', 'Northern Ireland'])]","566fc7ba":"# function to easily agrregate columns\ndef aggregate(df: pd.Series, agg_col: str) -> pd.DataFrame:\n    \n    data = df.groupby(\"country\")[agg_col].max()\n    data = pd.DataFrame(data)\n    \n    return data","93ef09d5":"daily.date.max()","8d89b5f3":"daily.daily_new_cases.sum()","b5cb8cc3":"summary.total_confirmed.sum()","d548bb3a":"vacc.date.max()","4ed8335c":"# \uba3c\uc800 \ubc31\uc2e0 \ub370\uc774\ud130\ub97c \uad6d\uac00\ubcc4\ub85c \ubb36\uc5b4\uc11c \ubd05\uc2dc\ub2e4.\ndata = vacc.groupby(\"country\").max()\ndata = pd.DataFrame(data)\ndata.info()","3f49efc5":"# define the columns we want to summarize\ncols_to_summarize = ['people_vaccinated', \n                     'people_vaccinated_per_hundred', \n                     'people_fully_vaccinated', \n                     'people_fully_vaccinated_per_hundred', \n                     'total_vaccinations_per_hundred', \n                     'total_vaccinations']\n\nsummary = summary.set_index(\"country\")\nvaccines = vacc[['country', 'vaccines']].drop_duplicates().set_index('country')\nsummary = summary.join(vaccines)\n\nfor col in cols_to_summarize:   \n    summary = summary.join(aggregate(vacc, col))\n\nsummary['percentage_vaccinated'] = summary.total_vaccinations \/ summary.population * 100\nsummary['tested_positive'] = summary.total_confirmed \/ summary.total_tests * 100\n","acea4631":"#\ud569\uce5c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ubd05\uc2dc\ub2e4.\nsummary.head()","26085ec8":"summary.info()","bd7172f8":"sns.heatmap(summary.isnull(),cbar=False)","7a83e229":"summary = summary.reset_index()","cc04a567":"summary_total_vacc = summary[['country','total_vaccinations']]","8a91989f":"summary_total_vacc[summary_total_vacc['total_vaccinations']==0]","9addd6d7":"summary['country'][pd.isnull(summary_total_vacc).any(axis=1)]","c976c746":"fig = ex.treemap(summary, path=[\"country\"], values=\"total_confirmed\", height = 750,\n                 title=\"<b>Total Coronavirus Confirmed Cases Breakdown by Country<\/b>\",\n                 color_discrete_sequence = ex.colors.qualitative.Set3)\n\nfig.update_traces(textinfo = \"label+text+value\")\nfig.show()","aedec707":"fig = ex.area(daily[daily.country.isin(daily[daily['date'] == daily['date'].max()].sort_values(\"active_cases\", ascending=False).iloc[:20].country)].sort_values(\"active_cases\", ascending=False),\n              x=\"date\", y=\"active_cases\", color=\"country\", template=\"plotly_dark\")#, groupnorm='percent')\n\nfig.update_traces(line={\"width\":1.25})\nfig.update_layout(title = f\"Top 20 Countries with Most Active Cases on {daily['date'].max()}\",\n                  xaxis={\"title\": \"\"},\n                  yaxis={\"title\":\"Active Cases\"})","eab06ac9":"fig = ex.area(vacc[vacc.country.isin(vacc[vacc['date'] == vacc['date'].max()].sort_values(\"total_vaccinations\", ascending=False).iloc[:20].country)].sort_values(\"total_vaccinations\", ascending=False),\n              x=\"date\", y=\"total_vaccinations\", color=\"country\", template=\"plotly_dark\")#, groupnorm='percent')\n\nfig.update_traces(line={\"width\":1.25})\nfig.update_layout(title = f\"Top 20 Countries with Most Vaccinated on {vacc['date'].max()}\",\n                  xaxis={\"title\": \"date\"},\n                  yaxis={\"title\": \"total vaccinations\" })","bd2c7c60":"# helper functions \ndef get_multi_line_title(title:str, subtitle:str):\n    return f\"{title}<br><sub>{subtitle}<\/sub>\"\n\ndef visualize_column(data: pd.DataFrame, xcolumn: str, ycolumn:str, title:str, colors:str, ylabel=\"Count\", n=None):\n    hovertemplate ='<br><b>%{x}<\/b>'+f'<br><b>{ylabel}: <\/b>'+'%{y}<br><extra><\/extra>'    \n    data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])        \n    \n    if n is not None: \n        data = data.iloc[:n]\n    else:\n        n = \"\"\n    fig = go.Figure(go.Bar(\n                    hoverinfo='skip',\n                     x=data[xcolumn], \n                     y=data[ycolumn], \n                     hovertemplate = hovertemplate,\n                     marker=dict(\n                         color = data[ycolumn],\n                         colorscale=colors,\n                        ),\n                    ),\n                )\n    fig.update_layout(\n        title=title,\n        xaxis_title=f\"Top {n} {xcolumn.title()}\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgba(0,0,0,0)',\n        hovermode=\"x\"\n    )\n    \n    fig.show()","2d416496":"title = get_multi_line_title(\"People Confirmed\", \"Individuals who tested positive\")\nvisualize_column(summary, 'country', \"total_confirmed\", title, \"Blugrn\", n=20 )","ed69c416":"title = get_multi_line_title(\"Most Deaths\", \"Number of People who Died of Covid-19\")\nvisualize_column(summary, 'country', \"total_deaths\", title, \"Blugrn\", n=20 )","354d15c3":"title = get_multi_line_title(\"Cases per 1M\", \"Number of the confirmed per 1 million people\")\nvisualize_column(summary, 'country', \"total_cases_per_1m_population\", title, \"Blugrn\", n=20 )\n","44827df1":"summary[['continent','total_cases_per_1m_population']][summary['total_cases_per_1m_population'] >=85844].groupby('continent').count()","0e60dfab":"title = get_multi_line_title(\"Deaths per 1M\", \"Number of the diceased out of covid per 1 million people\")\nvisualize_column(summary, 'country', \"total_deaths_per_1m_population\", title, \"Blugrn\", n=20 )","166e5a4b":"summary[['continent','total_cases_per_1m_population']][summary['total_deaths_per_1m_population'] >=1695].groupby('continent').count()","ce528040":"title = get_multi_line_title(\"People Vaccinated\", \"Individuals who received at least the first dose of the vaccine\")\nvisualize_column(summary, 'country', \"total_vaccinations\", title, \"Blugrn\", n=20 )","19f3de9c":"title = get_multi_line_title(\"People Vaccinated per 100\", \"the number of people who received the vaccine per 100\")\nvisualize_column(summary, 'country', \"people_vaccinated_per_hundred\", title, \"Blugrn\", n=20 )","6d1434d9":"title = get_multi_line_title(\"People Fully Vaccinated per 100\", \"the number of people who finished their second dose  per 100\")\nvisualize_column(summary, 'country', \"people_fully_vaccinated_per_hundred\", title, \"Blugrn\", n=20 )","55b75993":"title = get_multi_line_title(\"Confirmed Rates\", \"The number of confirmed cases per total confirmed cases\")\ndata = summary\ndata['confirmed_rate'] =  data['total_confirmed']*100\/data['population']\ndata = data.dropna(subset=['confirmed_rate'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"confirmed_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","2af7fa57":"title = get_multi_line_title(\"Death Rates\", \"Percentage of people have died from Covid-19 per total confirmed cases\")\ndata = summary\ndata['death_rate'] =  data['total_deaths']*100\/data['total_confirmed']\ndata = data.dropna(subset=['death_rate'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"death_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","995deff3":"title = get_multi_line_title(\"Death Rates\", \"Percentage of people have died from Covid-19 per total population\")\ndata = summary\ndata['death_rate2'] =  data['total_deaths']*100\/data['population']\ndata = data.dropna(subset=['death_rate2'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"death_rate2\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","f1de0e7a":"title = get_multi_line_title(\"Active Cases Rates\", \"The number of active cases on 2021-05-17 per population\")\ndata = summary\ndata['active_cases_rate'] =  data['active_cases']*100\/data['population']\ndata = data.dropna(subset=['active_cases_rate'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"active_cases_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","0f4049b1":"title = get_multi_line_title(\"Serious Rates\", \"The number of serious cases per population\")\ndata = summary\ndata['serious_rate'] =  data['serious_or_critical']*100\/data['population']\ndata = data.dropna(subset=['serious_rate'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"serious_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","0ebd812c":"title = get_multi_line_title(\"Vaccinated Rates\", \"The number of vaccinated people per population\")\ndata = summary\ndata = data.dropna(subset=['percentage_vaccinated'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"percentage_vaccinated\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","8dc39a86":"title = get_multi_line_title(\"Fully Vaccinated Rates\", \"The number of fully vaccinated people per population\")\ndata = summary\ndata['fully_vaccintated_rate'] =  data['people_fully_vaccinated']*100\/data['population']\ndata = data.dropna(subset=['fully_vaccintated_rate'])\nfig = ex.scatter_geo(data, locations=\"country\", color=\"continent\",\n                     locationmode='country names',\n                     hover_name=\"country\", size=\"fully_vaccintated_rate\",\n                     projection=\"natural earth\")\nfig.update_layout(title=title, title_x=0.45)\nfig.show()","03985926":"from datetime import timedelta\nimport datetime as dt","66895b76":"def draw_mapplot():\n    # Numerical columns of DATA\n    cols_dd = ['total_confirmed', 'total_deaths','total_recovered', 'active_cases']\n    # Define which trade will be visible:\n    visible = np.array(cols_dd)\n    \n    # Define traces and buttons:\n    traces = []\n    buttons = []\n    for value in cols_dd:\n        traces.append(go.Choropleth(locations=summary['country']\n                                    , locationmode='country names'\n                                    , z=summary[value].astype(float)\n                                    , colorbar_title=value\n                                    , visible= True if value==cols_dd[0] else False\n                                    , colorscale='RdBu'\n                                    , reversescale=True\n                                )\n                    )\n\n        buttons.append(dict(label=value\n                            , method='update'\n                            , args=[{'visible':list(visible==value)}\n                            , {'title':f\"<b>{value}<\/b>\"}]))\n\n    updatemenus = [{'active':0\n                    ,'buttons':buttons\n                }]\n\n\n    # Show figure\n    fig = go.Figure(data=traces,\n                    layout=dict(updatemenus=updatemenus))\n    # This is in order to get the first title displayed correctly\n    first_title = cols_dd[0]\n    fig.update_layout(title=f\"<b>{first_title}<\/b>\")\n\n    return fig.show()","f9edb2ae":"draw_mapplot()","cb5b28a4":"daily = daily.dropna()\n\ndaily","355c1754":"daily.sort_values(by=\"date\", inplace=True)","05804bb1":"daily[\"date\"] = pd.to_datetime(daily[\"date\"], format ='%Y-%m-%d')\n","953aa10b":"fig = ex.choropleth(daily, locations=\"country\", \n                    color=np.log(daily[\"daily_new_cases\"]),\n                    locationmode='country names', hover_name=\"country\", \n                    animation_frame=daily[\"date\"].dt.strftime('%Y-%m-%d'),\n                    title='Daily New Cases', color_continuous_scale=ex.colors.sequential.matter)\nfig.show()","46a58c79":"data = vacc[['country','date','daily_vaccinations']]","daf54a3c":"data = data.dropna(axis=0)\ndata\n","fc6cbd50":"data.sort_values(by='date',inplace=True)","69151dba":"data[\"date\"] = pd.to_datetime(data[\"date\"], format ='%Y-%m-%d')\n","415c6b09":"fig = ex.choropleth(data, locations=\"country\", \n                    color=np.log(data[\"daily_vaccinations\"]),\n                    locationmode='country names', hover_name=\"country\", \n                    animation_frame = data['date'].dt.strftime('%Y-%m-%d') ,\n                    title='Daily Vaccinations', color_continuous_scale=ex.colors.sequential.matter)\nfig.show()","682dc27b":"summary.to_csv(\"summary.csv\")\ndaily.to_csv(\"daily.csv\")\nvacc.to_csv(\"vacc.csv\")","f358cd0f":"vacc.info()","e1d20a4a":"\ucf54\ub85c\ub098 19\uac00 \ubcf8\uaca9\uc801\uc73c\ub85c \ud655\uc0b0\ub41c\uc9c0 1\ub144 \ubc18\uc774\ub77c\ub294 \uae34 \uc2dc\uac04\uc774 \ud758\ub800\uc2b5\ub2c8\ub2e4.  \n\ucf54\ub85c\ub098 \ud655\uc0b0\uc758 \uc591\uc0c1\ub3c4 \uc2dc\uac04\uc774 \ud750\ub984\uc5d0 \ub530\ub77c \ubcc0\ud654\ud558\uc600\uc2b5\ub2c8\ub2e4.  \n\uc9c0\uae08\ubd80\ud130\ub294 \uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \uc8fc\ubaa9\ud558\uba74\uc11c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","9b20acce":"### \ubcc0\uc218 \uc124\uba85\n\n1. Summary Data\n- country: designates the Country in which the the row's data was observed.\n- continent: designates the Continent of the observed country.\n- total_confirmed: designates the total number of confirmed cases in the observed country.\n- total_deaths: designates the total number of confirmed deaths in the observed country.\n- total_recovered: designates the total number of confirmed recoveries in the observed country.\n- active_cases: designates the number of active cases in the observed country.\n- serious_or_critical: designates the estimated number of cases in serious or critical conditions in the observed country.\n- total_cases_per_1m_population: designates the number of total cases per 1 million population in the observed country.\n- total_deaths_per_1m_population: designates the number of total deaths per 1 million population in the observed country.\n- total_tests: designates the number of total tests done in the observed country.\n- total_tests_per_1m_population: designates the number of total test done per 1 million population in the observed country.\n- population: designates the population count in the observed country.\n\n2. Daily Data\n- date: designates the date of observation of the row's data in YYYY-MM-DD format.\n- country: designates the Country in which the the row's data was observed.\n- cumulative_total_cases: designates the cumulative number of confirmed cases as of the row's date, for the row's country.\n- daily_new_cases: designates the daily new number of confirmed cases on the row's date, for the row's country.\n- active_cases: designates the number of active cases (i.e., confirmed cases that still didn't recover nor die) on the row's date, for the row's country.\n- cumulative_total_deaths: designates the cumulative number of confirmed deaths as of the row's date, for the row's country.\n- daily_new_deaths: designates the daily new number of confirmed deaths on the row's date, for the row's country.\n\n3. Vaccination Data\n\n- Country- this is the country for which the vaccination information is provided;\n- Country ISO Code - ISO code for the country;\n- Date - date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n- Total number of vaccinations - this is the absolute number of total immunizations in the country;\n- Total number of people vaccinated - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n- Total number of people fully vaccinated - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n- Daily vaccinations (raw) - for a certain data entry, the number of vaccination for that date\/country;\n- Daily vaccinations - for a certain data entry, the number of vaccination for that date\/country;\n- Total vaccinations per hundred - ratio (in percent) between vaccination number and total population up to the date in the country;\n- Total number of people vaccinated per hundred - ratio (in percent) between population immunized and total population up to the date in the country;\n- Total number of people fully vaccinated per hundred - ratio (in percent) between population fully immunized and total population up to the date in the country;\n- Number of vaccinations per day - number of daily vaccination for that day and country;\n- Daily vaccinations per million - ratio (in ppm) between vaccination number and total population for the current date in the country;\n- Vaccines used in the country - total number of vaccines used in the country (up to date);\n- Source name - source of the information (national authority, international organization, local organization etc.);\n- Source website - website of the source of information;","d03762d6":"## Data preprocessing\n1. \uad6d\uac00\uba85 \ubcc0\uc218\n\n\uc774 \ub370\uc774\ud130\uc14b\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \uac01 \uad6d\uac00\ubcc4 \ub370\uc774\ud130\ub97c \ubaa8\uc544\uc11c \ube44\uad50\ud558\uc5ec \ubcfc \uc218 \uc788\ub294 \uad6c\uc870\uc758 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ub54c\ub85c\ub294 \uac19\uc740 \uad6d\uac00\uc784\uc5d0\ub3c4 country value\uc5d0 \ub2e4\ub978 \uac12\uc73c\ub85c \ud45c\uae30\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc6b0\ub9ac \ub098\ub77c\ub97c \uc601\uc5b4\ub85c \ud45c\uae30\ud560 \ub54c, 'South Korea' \ub77c\uace0 \ud45c\uae30\ud558\ub294 \uacbd\uc6b0\ub3c4, 'Republic of Korea' \ub77c\uace0 \ud45c\uae30\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \uac19\uc740 \ub098\ub77c\ub85c \ubb36\uc5b4\uc11c \ub370\uc774\ud130\ub97c \ubd10\uc57c\uaca0\uc8e0.\n","0e9b5dcb":"\uc804\uccb4 \uc778\uad6c \uc218\ub2f9 \ud655\uc9c4\uc790 \ube44\uc728\uc774\ub098 \uc0ac\ub9dd\uc790 \ube44\uc728\uc740 \uc544\uba54\ub9ac\uce74\/\uc720\ub7fd\/\uc911\ub3d9 \uc9c0\uc5ed\uc774 \ub192\uc558\ub358 \uac83\uc5d0 \ube44\ud574,\n\ud655\uc9c4\uc790 \uc218 \ub300\ube44 \uc0ac\ub9dd\uc790 \ube44\uc728\uc740 \uc544\ud504\ub9ac\uce74 \uc9c0\uc5ed\uc774 \ud2b9\ud788 \ub192\uc740 \uac83\uc744 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.   \n\uc544\ud504\ub9ac\uce74 \uc9c0\uc5ed\uc758 \uc758\ub8cc \uc2dc\uc2a4\ud15c \ubbf8\ube44, \ud639\uc740 \ucf54\ub85c\ub098 \uce58\ub8cc \ub2a5\ub825 \ubd80\uc7ac\ub97c \uc0dd\uac01\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.  \n\uc804\uccb4 \uce58\uba85\uc728, \ud655\uc9c4\ub960 \ubaa8\ub450\uc5d0\uc11c \uc911\ub3d9\uc744 \uc81c\uc678\ud55c \uc544\uc2dc\uc544 \uc9c0\uc5ed\uc740 \ub208\uc5d0 \ub744\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.  \n\ucf54\ub85c\ub098 19\uc758 \ubc1c\ubcd1\uacfc \ud655\uc0b0\uc740 \ub3d9\uc544\uc2dc\uc544 \uc9c0\uc5ed\uc5d0\uc11c \uc2dc\uc791\ub418\uc5c8\uc9c0\ub9cc, \ucd08\uae30 \ub300\uc751\uc5d0 \uc131\uacf5\ud558\uc5ec, \ud655\uc0b0 1\ub144 \uc774\uc0c1 \uc9c0\ub09c \ud604\uc7ac \uc2dc\uc810\uc5d0\uc11c\ub294 \uc0c1\ub300\uc801\uc73c\ub85c \ucf54\ub85c\ub098\ub85c \uc778\ud55c \ud53c\ud574\uac00 \uc801\uc740 \uc9c0\uc5ed\uc774 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. ","57a631f6":"Summary Data\uc758 \uad6d\uac00 \uac2f\uc218\uac00 \ub354 \ub9ce\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, Summary Data\uc5d0\ub294 \uc5c6\uc73c\ub098 Vaccine Data\uc5d0\ub294 \uc788\ub294 \uad6d\uac00 \uba85\uc774 \ub9ce\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uac19\uc740 \uad6d\uac00\ub97c \ub2e4\ub974\uac8c \ud45c\uae30\ud588\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uae30 \ub54c\ubb38\uc5d0 \ube44\uad50\ud574\ubcf4\uace0 \uac19\uc740 \uc774\ub984\uc73c\ub85c \ud1b5\uc77c\ud569\ub2c8\ub2e4.","45334d19":"### 2. geographical presentation of data\n\uc9c0\uc5ed\ubcc4 \ud604\ud669 \ubd84\ud3ec\ub97c \ud55c \ub208\uc5d0 \ubcf4\uace0, \uc9c0\uc5ed\ubcc4 \ud2b9\uc131\uacfc \ucc28\uc774\ub97c \ud30c\uc545\ud558\uae30 \uc704\ud574, \uc9c0\ub3c4 \uadf8\ub798\ud504\ub85c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0384839b":"## EDA\n\n### 1. \uad6d\uac00\ubcc4 \ud655\uc9c4\uc790 \/ \ubc31\uc2e0 \uc811\uc885 \ud604\ud669 (Top 20)","014a869a":"\uadf8\ub7f0\ub370, \uc808\ub300\uc801\uc778 \uc218\ub85c\ub294 \uc544\ubb34\ub798\ub3c4 \uc778\uad6c\uc218\uac00 \ub9ce\uc740 \uad6d\uac00\ub4e4\uc774 \ub192\uac8c \ub9c8\ub828\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uac00\uc7a5 \ud06c\uac8c \ud53c\ud574\ub97c \uc785\uc740 \uad6d\uac00\ub294 \uc808\ub300\uc801\uc778 \uc778\uad6c\uc218\ubcf4\ub2e4 \uc0c1\ub300\uc801 \ube44\uc728, \uc989, \uac19\uc740 \uc778\uad6c\uc218 \ub300\ube44 \uac10\uc5fc\uc728\uc774 \ub192\uc740 \uad6d\uac00\ub4e4\uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc704 \uc778\uad6c\ub2f9 \ud655\uc9c4\uc790 \uc218\ub97c \uae30\uc900\uc73c\ub85c Top 20 \uad6d\uac00\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","f7bd92d7":"2. Summary Data\uc5d0 \ubc31\uc2e0 \uc811\uc885 \ud604\ud669 \ucd94\uac00\ud558\uae30\n\nSummray Data\ub294 \uad6d\uac00\ubcc4 corona 19 \ub204\uc801 \ud655\uc9c4\uc790, \uce58\ub8cc\uc790, \uc0ac\ub9dd\uc790, \uc9c4\ub2e8 \uac80\uc0ac\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc5ec\uae30\uc5d0 vaccine \ud604\ud669 \ub204\uc801 \ub370\uc774\ud130\ub97c \ucd94\uac00\ud574 \ubd05\uc2dc\ub2e4.","c7ad3fd3":"\ub2e8\uc704 \uc778\uad6c\ub2f9 \uc811\uc885\uc790 \uc218\ub97c \ud655\uc778\ud588\ub354\ub2c8 \uc5ed\uc2dc \ud655\uc9c4\uc790 \ud604\ud669\uacfc \ube44\uc2b7\ud558\uac8c \uc720\ub7fd\uc5d0 \uc18c\uad6d\uac00\ub4e4\uc774 \uc0c1\uc704\uad8c\uc744 \ucc28\uc9c0\ud588\ub294\ub370, \uc5b4\ub290 \uc815\ub3c4 \uaddc\ubaa8\uac00 \uc788\ub294 \uad6d\uac00 \uc911\uc5d0\uc11c\ub294 \uc774\uc2a4\ub77c\uc5d8\uc774 \uad49\uc7a5\ud788 \ube60\ub974\uac8c \ubc31\uc2e0 \uc811\uc885\uc744 \uc2e4\uc2dc\ud558\uace0 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","32c85dc2":"\ud2b9\ud788 \ud604\uc7ac \uc591\uc131 \ubc18\uc751\uc744 \ub098\ud0c0\ub0b4\ub294 \ud658\uc790\uc758 \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubcc0\uc218 active_cases\uc640, \ubc31\uc2e0 \uc811\uc885\uc790 \uc911\uc5d0\uc11c\ub3c4 2\ud68c, 3\ud68c \ub4f1 \uadf8 \ubc31\uc2e0\uc774 \uc694\uad6c\ud558\ub294 \uc811\uc885 \ud69f\uc218\ub97c \ubaa8\ub450 \ucc44\uc6b4 \uc811\uc885\uc790\uc758 \uc218\ub97c \ub098\ud0dc\ub294 \ubcc0\uc218 people_fully_vaccinated\uac00 \uacb0\uce21\uce58\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uc774\uc640 \uac19\uc740 \ubcc0\uc218\ub294 \uc0ac\uc6a9\ud560 \ub54c \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4.  \n\ubc31\uc2e0 \uc811\uc885\uacfc \uad00\ub828\ub41c \ubcc0\uc218 \uc911\uc5d0\uc11c \ube44\uad50\uc801 null\uac12\uc774 \uc801\uc740 total_vaccination, \uc9c0\uae08\uae4c\uc9c0 \ubc31\uc2e0\uc744 \ub9de\uc740 \uc778\uad6c \uc218 \ubcc0\uc218\uc758 \uacb0\uce21\uce58\ub97c \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc774 \ubcc0\uc218\uc5d0 \uacb0\uce21\uc774 \uc788\ub294 \uad6d\uac00\ub4e4 \uc911\uc5d0 \uc8fc\uc694 \uad6d\uac00\uac00 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","ed2ecb8b":"\uba3c\uc800 \ucd1d \ud655\uc9c4\uc790 \uc218\ub97c \ubcf4\uba74, \ubbf8\uad6d, \uc778\ub3c4, \ube0c\ub77c\uc9c8,\n\ucd1d \uc0ac\ub9dd\uc790 \uc218\ub97c \ubcf4\uba74, \ubbf8\uad6d, \ube0c\ub77c\uc9c8, \uc778\ub3c4 \uc21c\uc774\uc5c8\uc2b5\ub2c8\ub2e4.\n\uc808\ub300\uc801\uc778 \uc218\ub85c\ub294 \uc774 \uc138 \uad6d\uac00\uac00 \uac00\uc7a5 \ub9ce\uc740 \uc778\uad6c\uac00 \ucf54\ub85c\ub098 19 \ubc14\uc774\ub7ec\uc2a4\uc5d0 \uac10\uc5fc\ub418\uc5c8\uace0, \ub9ce\uc740 \ud53c\ud574\ub97c \uc785\uc740 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.  \n\uc774 \uc138 \uad6d\uac00\ub294 \uc804 \uc138\uacc4\uc801\uc73c\ub85c \uac00\uc7a5 \uc778\uad6c \uc218\uac00 \ub9ce\uc740 \uad6d\uac00\ub4e4\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4.  \n\uc804\uc138\uacc4\uc5d0\uc11c \uc778\uad6c\uc218\ub3c4 \uc81c\uc77c \ub9ce\uace0, covid-19 \ubc14\uc774\ub7ec\uc2a4\uac00 \ucc98\uc74c \ubc1c\uacac\ub418\uc5b4 \ud655\uc0b0\ub418\uae30 \uc2dc\uc791\ud55c \uc911\uad6d\uc740 1\ub144 \uc774\uc0c1 \uc9c0\ub09c 2021\ub144 \ud604\uc7ac \ud655\uc9c4\uc790\/ \uc0ac\ub9dd\uc790 top 20 \uc548\uc5d0\ub3c4 \ub4e4\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc810\uc774 \uc778\uc0c1\uc801\uc785\ub2c8\ub2e4.","f047f4cc":"## Introduction\n\nCorona-19\ub294 \uadf8 \uc774\ub984\uc774 \uac00\ub9ac\ud0a4\ub294 2019\ub144 \ucc98\uc74c \ubc14\uc774\ub7ec\uc2a4 \uac10\uc5fc\uc774 \ubcf4\uace0\ub418\uc5c8\uace0, 2020\ub144 1\uc6d4 \uc911\uad6d \uc6b0\ud55c \uc9c0\uc5ed\uc744 \uc2dc\uc791\uc73c\ub85c \ubcf8\uaca9\uc801\uc73c\ub85c \uc804\uc138\uacc4\uc5d0 \ud655\uc0b0\ub418\uc5b4 \uc138\uc0c1\uc744 \uba48\ucd94\uac8c \ud55c \uc9c0 1\ub144\uc774 \ud6cc\uca4d \ub118\uc5c8\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7ec\ub098 2021\ub144 5\uc6d4 22\uc77c \ud604\uc7ac \uc544\uc9c1\ub3c4 \ud558\ub8e8 50\ub9cc\uba85 \uc774\uc0c1\uc774 \uc0c8\ub85c \ud655\uc9c4\ub418\uace0, 1\ub9cc\uba85 \uc774\uc0c1\uc774 \ucf54\ub85c\ub098 19\ub85c \uc0ac\ub9dd\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub9ce\uc740 \uc804\ubb38\uac00\ub4e4\uc774 \uc774 \ubc14\uc774\ub7ec\uc2a4\uac00 \uc778\uac04\uc758 \uc0b6\uacfc \uc0ac\uace0 \ubc29\uc2dd\uc744 \ubc14\uafb8\uc5c8\uace0, \ub2e4\uc2dc\ub294 \uacfc\uac70\ub85c \uc644\ubcbd\ud788 \ub3cc\uc544\uac08 \uc218 \uc5c6\uc744 \uac83\uc774\ub77c\uace0 \ub9d0\ud569\ub2c8\ub2e4.\n\n\ud55c\ud3b8, \uc774 \uc804\uc5fc\ubcd1\uc744 \uadf9\ubcf5\ud558\ub824\ub294 \uc778\uac04\uc758 \ub178\ub825 \ub610\ud55c \ub04a\uc784\uc5c6\uc774 \uacc4\uc18d\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ubc14\uc774\ub7ec\uc2a4\uc5d0 \ub300\ud55c \ubcf8\uaca9\uc801\uc778 \uc5f0\uad6c\uac00 \uc2dc\uc791\ub41c\uc9c0 \ucc44 1\ub144\uc774 \ub418\uae30 \uc804\uc5d0 \uc5ec\ub7ec \uc81c\uc57d \uc5c5\uccb4\uc5d0\uc11c \ubc31\uc2e0\uc744 \uc81c\uc791\uc5d0 \uc131\uacf5\ud588\uc744 \ubfd0 \uc544\ub2c8\ub77c \ub300\ub7c9 \uc0dd\uc0b0, \ubc30\ud3ec\ub97c \uc2dc\uc791\ud558\uc600\uc2b5\ub2c8\ub2e4. 2021\ub144 \ub4e4\uc5b4\uc11c\ub294 \ubc1c\ube60\ub974\uac8c \ubc31\uc2e0\uc744 \ud655\ubcf4\ud55c \uc77c\ubd80 \uc120\uc9c4\uad6d\ub4e4\uc744 \uc911\uc2ec\uc73c\ub85c \ubcf8\uaca9\uc801\uc73c\ub85c \ubc14\uc774\ub7ec\uc2a4\uc758 \ud655\uc0b0\uc744 \ub9c9\uae30 \uc704\ud55c vaccine \uc811\uc885\uc774 \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ubcf8 \ub178\ud2b8\uc5d0\uc11c\ub294 \uc138\uacc4 \ubc31\uc2e0 \uc811\uc885 \ud604\ud669\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \ubcf4\ub2e4 \ud55c \ub208\uc5d0 \ubcf4\uae30 \uc88b\uac8c \uc2dc\uac01\ud654\ud574\uc11c \uc0b4\ud3b4\ubcf4\uace0 \ube60\ub978 \ubc31\uc2e0 \uc811\uc885\uacfc \ucf54\ub85c\ub098 \ud655\uc0b0\uc138\uac00 \uad00\ub828\uc774 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","dcfa966c":"\ubc31\uc2e0 \uc811\uc885\uc744 \ubc1b\uc740 \uc778\uad6c \uc218\ub294 \uc911\uad6d, \ubbf8\uad6d, \uc778\ub3c4, \uc601\uad6d, \ube0c\ub77c\uc9c8 \uc21c\uc785\ub2c8\ub2e4.\n\uc911\uad6d\uc744 \uc81c\uc678\ud558\uace0\ub294 \ud655\uc9c4\uc790 \uc218\uc5d0\uc11c \uc0c1\uc704\uad8c\uc744 \ucc28\uc9c0\ud588\ub358 \uc778\uad6c \ub300\uad6d\ub4e4\uc774 \uc0c1\uc704\uad8c\uc5d0 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7f0\ub370 \ud655\uc9c4\uc790 \ud604\ud669\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc808\ub300\uc801\uc778 \uc778\uad6c\uc218\uc758 \uc601\ud5a5\uc774 \ud06c\ubbc0\ub85c, \uc778\uad6c \ubc31\uba85 \ub2f9 \uc811\uc885\uc790 \uc218\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","9715e252":"daily \uc790\ub8cc\uc758 \uac00\uc7a5 \ucd5c\uadfc \ub0a0\uc9dc\uc640 vaccine \uc790\ub8cc\uc758 \uac00\uc7a5 \ucd5c\uadfc \uc790\ub8cc\uac00 2\uc77c \ubc16\uc5d0 \ucc28\uc774 \ub098\uc9c0 \uc54a\uace0, summary\uc758 \ucd1d \ud655\uc9c4\uc790 \uc218\uac00 daily\uc758 \ud655\uc9c4\uc790\uc218 \ub354\ud55c \uac83 \ubcf4\ub2e4 \ubbf8\uc138\ud558\uac8c \ub9ce\uae30 \ub54c\ubb38\uc5d0 vaccine \ub370\uc774\ud130\uc758 sum \uc790\ub8cc\ub97c summary \ub370\uc774\ud130\uc5d0 \ubd99\uc5ec\ub3c4 \ub0a0\uc9dc\uc801 \ubd88\uc77c\uce58\ub294 \uac70\uc758 \uc5c6\uc744 \uac70\ub77c\uace0 \ubcf4\uc785\ub2c8\ub2e4.","0a97b0ac":"\uc778\uad6c 1\ubc31\ub9cc\uba85 \ub2f9 \ud655\uc9c4\uc790 \uc218\uc640 \uc0ac\ub9dd\uc790 \uc218\ub97c \ubcfc \uacbd\uc6b0, \uc720\ub7fd \ub300\ub959\uc758 \uc18c\uad6d\uac00\ub4e4\uc774 \uc0c1\uc704\uad8c\uc5d0 \ub300\uac70 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc720\ub7fd \ub300\ub959\uc758 \ucf54\ub85c\ub098 19 \ud53c\ud574\uac00 \ud2b9\ubcc4\ud788 \ub354 \uc2ec\uac01\ud588\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n\uadf8\ub807\ub2e4\uba74, \ubc31\uc2e0 \uc811\uc885 \ud604\ud669\uc740 \uc5b4\ub5a8\uae4c\uc694?","8249efe0":"\uacb0\uce21\uc774 \uc788\ub294 \uad6d\uac00 \ub4e4 \uc911\uc5d0 \uc778\uad6c 100\ub9cc \uc774\uc0c1\uc778 \uad6d\uac00\ub4e4\uc744 \ubcf4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ubc31\uc2e0 \uc811\uc885 \uc218\uac00 0\uc778 \uad6d\uac00\ub294 \uc5c6\uace0, null\uc778 \uad6d\uac00\ub9cc \uc788\uc73c\uba70, \uc774 \uad6d\uac00\ub4e4\uc774 \ub300\ubd80\ubd84 \uc544\ud504\ub9ac\uce74, \ub3d9\ub0a8 \uc544\uc2dc\uc544, \uc624\uc138\uc544\ub2c8\uc544 \ub4f1\uc758 \uc800\uac1c\ubc1c \uad6d\uac00\uc784\uc744 \uac10\uc548\ud558\uba74, \uc544\uc9c1 \ubc31\uc2e0 \uc811\uc885\uc744 \uc2dc\uc791\ud558\uc9c0 \ubabb\ud55c \uad6d\uac00\uc77c \ud655\ub960\uc774 \ub192\uc740 \uac83 \uac19\uc2b5\ub2c8\ub2e4. ","05acb3c1":"### 3. Covid over Time","423531f6":"\ucd08\ubc18\uc5d0\ub294 \uc911\uad6d \ub0b4\uc5d0\uc11c \uae09\uc18d\ub3c4\ub85c \ud655\uc0b0\ub418\uc5c8\ub2e4\uac00, \uc2a4\ud398\uc778, \uc774\ud0c8\ub9ac\uc544\ub97c \uc911\uc2ec\uc73c\ub85c \ud55c \uc720\ub7fd-> \ubbf8\uad6d-> \ube0c\ub77c\uc9c8-> \uc778\ub3c4 \ub4f1\uc73c\ub85c \uc704\uae30 \uc9c0\uc5ed\uc774 \uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \ub530\ub77c \ubcc0\ud558\ub294 \uac83\uc744 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","aa7cc1a0":"### dataset \ucd9c\ucc98\n1. \ucf54\ub85c\ub098 19 \ubc31\uc2e0 \uc811\uc885 \ud604\ud669 : https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress\n2. \ucf54\ub85c\ub098 19 \ud655\uc0b0 \ud604\ud669 : https:\/\/www.kaggle.com\/josephassaker\/covid19-global-dataset\/\n\n1\ubc88 \ub370\uc774\ud130\ub294 Our World in Data, 2\ubc88 \ub370\uc774\ud130\ub294 worldometers.info \uc5d0\uc11c \uc218\uc9d1\ub41c \uc815\ubcf4\uc785\ub2c8\ub2e4.","fcf78f8b":"\ubc31\uc2e0\uc811\uc885\ub960\uc740 \uc5ed\uc2dc \ud655\uc9c4\uc790\uc728\uc774 \ub192\uc558\ub358 \uc544\uba54\ub9ac\uce74, \uc720\ub7fd, \uc911\ub3d9 \uc9c0\uc5ed\uc5d0\uc11c \ub192\uc740 \ud3b8\uc774\uc5c8\uc2b5\ub2c8\ub2e4.  \n\uadf8\ub7ec\ub098 \uc804\uccb4 \ud655\uc9c4\uc790\uc218 \ub300\ube44 \uc0ac\ub9dd\ub960, \uc911\ud658\uc790 \ube44\uc728\uc774 \ub192\uc558\ub358 \uc544\ud504\ub9ac\uce74 \uc9c0\uc5ed\uc758 \ubc31\uc2e0 \uc811\uc885\uc774 \uc798 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uace0 \uc788\ub2e4\ub294 \uc810\uc774 \ub208\uc5d0 \ub755\ub2c8\ub2e4.\n","07ddfc82":"\ub370\uc774\ud130\uc5d0 \uacb0\uce21\uce58\uac00 \uc0c1\ub2f9\ud788 \uc788\uc2b5\ub2c8\ub2e4.","7e1fcd07":"\ubc31\uc2e0 \uc811\uc885\uc758 \uc591\uc0c1 \uc5ed\uc2dc \uc911\uad6d\uacfc \uc720\ub7fd\uc758 \uc77c\ubd80\uc5d0\uc11c \uc2dc\uc791\ub418\uc5b4 \uc544\uba54\ub9ac\uce74, \uc911\ub3d9 \uc9c0\uc5ed\uc73c\ub85c \ud655\uc0b0\ub418\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."}}