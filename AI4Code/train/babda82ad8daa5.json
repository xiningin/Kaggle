{"cell_type":{"bfc28b81":"code","e7b41e3b":"code","f8d75dd0":"code","8af91ea4":"code","f8ee8220":"code","fac252e5":"code","3f8a2c86":"code","825cccd4":"code","a2ea8719":"code","75d576d1":"code","c9dd0782":"code","ce87f110":"code","05114a73":"code","04dc6229":"code","ed67c0e6":"code","837f8f05":"code","b97b6e69":"code","820c40bd":"code","4c640be5":"code","47d9d585":"code","40915b62":"code","8bf3c78e":"code","cbc535aa":"code","c1edda9d":"code","d8cb64ce":"code","8452e07c":"code","6a2cf86e":"code","1ce6d8ec":"code","bf329cdd":"code","8e0381ef":"code","64070030":"code","033c9852":"code","047474db":"code","c22616a5":"code","86623d0e":"code","1a81ff00":"code","554fb673":"code","455c0f0c":"code","20d5e09a":"code","29733c57":"code","fc78e98a":"code","a0fb7fae":"code","254c212f":"code","d3a6dbfb":"code","8a622bc6":"code","aa47e3eb":"code","e66357d1":"code","8729bd16":"code","e1b2f132":"code","aa3cbfd2":"code","4e2c4f11":"code","e9fb424b":"code","7a9c515a":"code","2ce5e447":"code","816ec954":"code","91d02f1c":"code","faf038f0":"code","cfffc335":"code","4d67f999":"code","c0164614":"code","0a588ca0":"code","b48575ee":"code","2c88795c":"code","97cf3275":"markdown","3a60381c":"markdown","d096659e":"markdown","1ccd30eb":"markdown","68af4b45":"markdown","e854b770":"markdown","d8431490":"markdown","3e9059e7":"markdown","0d002211":"markdown","7aafa764":"markdown"},"source":{"bfc28b81":"!pip install lifelines","e7b41e3b":"from lifelines.datasets import load_rossi","f8d75dd0":"rossi = load_rossi()","8af91ea4":"rossi","f8ee8220":"from lifelines import CoxPHFitter","fac252e5":"cph = CoxPHFitter()","3f8a2c86":"cph.fit(rossi, duration_col='week', event_col='arrest')","825cccd4":"cph.print_summary()  # access the individual results using cph.summary","a2ea8719":"cph.plot()","75d576d1":"cph.plot_partial_effects_on_outcome(covariates='prio', values=[0, 2, 4, 6, 8, 10], cmap='coolwarm')","c9dd0782":"cph.fit(rossi, duration_col='week', event_col='arrest', formula=\"fin + wexp + age * prio\")","ce87f110":"cph.print_summary()","05114a73":"X = rossi","04dc6229":"cph.predict_survival_function(X)\ncph.predict_median(X)\ncph.predict_partial_hazard(X)","ed67c0e6":"cph_spline = CoxPHFitter(baseline_estimation_method=\"spline\", n_baseline_knots=5)\ncph_spline.fit(rossi, 'week', event_col='arrest')","837f8f05":"cph_semi = CoxPHFitter().fit(rossi, 'week', event_col='arrest')\ncph_piecewise = CoxPHFitter(baseline_estimation_method=\"piecewise\", breakpoints=[20, 35]).fit(rossi, 'week', event_col='arrest')\n\nax = cph_spline.baseline_cumulative_hazard_.plot()\ncph_semi.baseline_cumulative_hazard_.plot(ax=ax, drawstyle=\"steps-post\")\ncph_piecewise.baseline_cumulative_hazard_.plot(ax=ax)","b97b6e69":"from lifelines import WeibullAFTFitter","820c40bd":"aft = WeibullAFTFitter()\naft.fit(rossi, duration_col='week', event_col='arrest')\n\naft.print_summary(3)  # access the results using aft.summary","4c640be5":"print(aft.median_survival_time_)\nprint(aft.mean_survival_time_)","47d9d585":"from matplotlib import pyplot as plt","40915b62":"wft = WeibullAFTFitter().fit(rossi, 'week', 'arrest', ancillary=True)\nwft.plot()","8bf3c78e":"import numpy as np","cbc535aa":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))\n\ntimes = np.arange(0, 100)\nwft_model_rho = WeibullAFTFitter().fit(rossi, 'week', 'arrest', ancillary=True, timeline=times)\nwft_model_rho.plot_partial_effects_on_outcome('prio', range(0, 16, 3), cmap='coolwarm', ax=ax[0])\nax[0].set_title(\"Modelling rho_\")\n\nwft_not_model_rho = WeibullAFTFitter().fit(rossi, 'week', 'arrest', ancillary=False, timeline=times)\nwft_not_model_rho.plot_partial_effects_on_outcome('prio', range(0, 16, 3), cmap='coolwarm', ax=ax[1])\nax[1].set_title(\"Not modelling rho_\");","c1edda9d":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(7, 4))\n\n# modeling rho == solid line\nwft_model_rho.plot_partial_effects_on_outcome('prio', range(0, 16, 5), cmap='coolwarm', ax=ax, lw=2, plot_baseline=False)\n\n# not modeling rho == dashed line\nwft_not_model_rho.plot_partial_effects_on_outcome('prio', range(0, 16, 5), cmap='coolwarm', ax=ax, ls='--', lw=2, plot_baseline=False)\n\nax.get_legend().remove()","d8cb64ce":"X = rossi.loc[:10]\n\naft.predict_cumulative_hazard(X, ancillary=X)\naft.predict_survival_function(X, ancillary=X)\naft.predict_median(X, ancillary=X)\naft.predict_percentile(X, p=0.9, ancillary=X)\naft.predict_expectation(X, ancillary=X)","8452e07c":"aft_with_elastic_penalty = WeibullAFTFitter(penalizer=1e-4, l1_ratio=1.0)\naft_with_elastic_penalty.fit(rossi, 'week', 'arrest')\naft_with_elastic_penalty.predict_median(rossi)\n\naft_with_elastic_penalty.print_summary(columns=['coef', 'exp(coef)'])","6a2cf86e":"from lifelines import LogLogisticAFTFitter","1ce6d8ec":"from lifelines import LogNormalAFTFitter","bf329cdd":"llf = LogLogisticAFTFitter().fit(rossi, 'week', 'arrest')\nlnf = LogNormalAFTFitter().fit(rossi, 'week', 'arrest')","8e0381ef":"from lifelines import GeneralizedGammaRegressionFitter","64070030":"df = load_rossi()","033c9852":"df['Intercept'] = 1.\n\n# this will regress df against all 3 parameters\nggf = GeneralizedGammaRegressionFitter(penalizer=1.).fit(df, 'week', 'arrest')\nggf.print_summary()","047474db":"# If we want fine control over the parameters <-> covariates.\n# The values in the dict become can be formulas, or column names in lists:\nregressors = {\n    'mu_': rossi.columns.difference(['arrest', 'week']),\n    'sigma_': [\"age\", \"Intercept\"],\n    'lambda_': 'age + 1',\n}\n\nggf = GeneralizedGammaRegressionFitter(penalizer=0.0001).fit(df, 'week', 'arrest', regressors=regressors)\nggf.print_summary()","c22616a5":"from lifelines import LogLogisticAFTFitter, WeibullAFTFitter, LogNormalAFTFitter","86623d0e":"wf = WeibullAFTFitter().fit(rossi, 'week', 'arrest')","1a81ff00":"print(llf.AIC_)  # 1377.877\nprint(lnf.AIC_)  # 1384.469\nprint(wf.AIC_)   # 1377.833, slightly the best model.","554fb673":"# with some heterogeneity in the ancillary parameters\nancillary = rossi[['prio']]\nllf = LogLogisticAFTFitter().fit(rossi, 'week', 'arrest', ancillary=ancillary)\nlnf = LogNormalAFTFitter().fit(rossi, 'week', 'arrest', ancillary=ancillary)\nwf = WeibullAFTFitter().fit(rossi, 'week', 'arrest', ancillary=ancillary)","455c0f0c":"print(llf.AIC_) # 1377.89, the best model here, but not the overall best.\nprint(lnf.AIC_) # 1380.79\nprint(wf.AIC_)  # 1379.21","20d5e09a":"from lifelines.datasets import load_diabetes","29733c57":"df = load_diabetes()\n\ndf['gender'] = df['gender'] == 'male'\n\nprint(df.head())","fc78e98a":"wf = WeibullAFTFitter().fit_interval_censoring(df, lower_bound_col='left', upper_bound_col='right')\nwf.print_summary()","a0fb7fae":"from lifelines import AalenAdditiveFitter","254c212f":"from lifelines.datasets import load_dd","d3a6dbfb":"data = load_dd()\ndata.head()","8a622bc6":"import patsy","aa47e3eb":"X = patsy.dmatrix('un_continent_name + regime + start_year', data, return_type='dataframe')\nX = X.rename(columns={'Intercept': 'baseline'})","e66357d1":"print(X.columns.tolist())","8729bd16":"aaf = AalenAdditiveFitter(coef_penalizer=1.0, fit_intercept=False)","e1b2f132":"X['T'] = data['duration']\nX['E'] = data['observed']","aa3cbfd2":"aaf.fit(X, 'T', event_col='E')","4e2c4f11":"aaf.cumulative_hazards_.head()","e9fb424b":"aaf.plot(columns=['regime[T.Presidential Dem]', 'baseline', 'un_continent_name[T.Europe]'], iloc=slice(1,15))","7a9c515a":"ix = (data['ctryname'] == 'Canada') & (data['start_year'] == 2006)\nharper = X.loc[ix]\nprint(\"Harper's unique data point:\")\nprint(harper)","2ce5e447":"ax = plt.subplot(2,1,1)\naaf.predict_cumulative_hazard(harper).plot(ax=ax)\n\nax = plt.subplot(2,1,2)\naaf.predict_survival_function(harper).plot(ax=ax);","816ec954":"rossi = load_rossi().sample(frac=1.0)\ntrain_rossi = rossi.iloc[:400]\ntest_rossi = rossi.iloc[400:]\n\ncph_l2 = CoxPHFitter(penalizer=0.1, l1_ratio=0.).fit(train_rossi, 'week', 'arrest')\ncph_l1 = CoxPHFitter(penalizer=0.1, l1_ratio=1.).fit(train_rossi, 'week', 'arrest')\n\nprint(cph_l2.score(test_rossi))\nprint(cph_l1.score(test_rossi)) # better model","91d02f1c":"rossi = load_rossi()\n\ncph_l2 = CoxPHFitter(penalizer=0.1, l1_ratio=0.).fit(rossi, 'week', 'arrest')\ncph_l1 = CoxPHFitter(penalizer=0.1, l1_ratio=1.).fit(rossi, 'week', 'arrest')\n\nprint(cph_l2.AIC_partial_) # lower is better\nprint(cph_l1.AIC_partial_)","faf038f0":"cph = CoxPHFitter()\ncph.fit(rossi, duration_col=\"week\", event_col=\"arrest\")\n\n# fours ways to view the c-index:\n# method one\ncph.print_summary()\n\n# method two\nprint(cph.concordance_index_)\n\n# method three\nprint(cph.score(rossi, scoring_method=\"concordance_index\"))\n\n# method four\nfrom lifelines.utils import concordance_index\nprint(concordance_index(rossi['week'], -cph.predict_partial_hazard(rossi), rossi['arrest']))","cfffc335":"from lifelines.datasets import load_regression_dataset","4d67f999":"from lifelines.utils import k_fold_cross_validation","c0164614":"regression_dataset = load_regression_dataset()\ncph = CoxPHFitter()\nscores = k_fold_cross_validation(cph, regression_dataset, 'T', event_col='E', k=3)\nprint(scores)\n#[-2.9896, -3.08810, -3.02747]\n\nscores = k_fold_cross_validation(cph, regression_dataset, 'T', event_col='E', k=3, scoring_method=\"concordance_index\")\nprint(scores)\n# [0.5449, 0.5587, 0.6179]","0a588ca0":"from lifelines.calibration import survival_probability_calibration","b48575ee":"regression_dataset = load_rossi()\ncph = CoxPHFitter(baseline_estimation_method=\"spline\", n_baseline_knots=3)\ncph.fit(rossi, \"week\", \"arrest\")\n\n\nsurvival_probability_calibration(cph, rossi, t0=25)","2c88795c":"# all regression models can be used here, WeibullAFTFitter is used for illustration\nwf = WeibullAFTFitter().fit(rossi, \"week\", \"arrest\")\n\n# filter down to just censored subjects to predict remaining survival\ncensored_subjects = rossi.loc[~rossi['arrest'].astype(bool)]\ncensored_subjects_last_obs = censored_subjects['week']\n\n# predict new survival function\nwf.predict_survival_function(censored_subjects, conditional_after=censored_subjects_last_obs)\n\n# predict median remaining life\nwf.predict_median(censored_subjects, conditional_after=censored_subjects_last_obs)","97cf3275":"### The Weibull AFT model","3a60381c":"**The idea behind Cox\u2019s proportional hazard model is that the log-hazard of an individual is a linear function of their covariates and a population-level baseline hazard that changes over time. **","d096659e":"### Prediction","1ccd30eb":"### Model probability calibration","68af4b45":"### Model selection and calibration in survival regression","e854b770":"### Aalen\u2019s additive model","d8431490":"### Prediction","3e9059e7":"### Cross validation","0d002211":"### Prediction on censored subjects","7aafa764":"We can also use \u2728formulas\u2728 to handle the right-hand-side of the linear model."}}