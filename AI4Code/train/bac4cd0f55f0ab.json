{"cell_type":{"63aae7f3":"code","08b67f53":"code","932ebfed":"code","44470339":"code","4f404bc5":"code","97251d7a":"code","c7cdb950":"code","70313852":"code","6e61e69f":"code","4f7722c7":"code","dfb0c105":"code","fd2b772e":"code","9301acf6":"code","d5c8a54c":"code","959a00b9":"code","3220f638":"code","4fb139d2":"code","4e37ac90":"code","0b5f96a0":"code","2eb4a5ed":"code","c629db1c":"code","9181e1af":"code","d27a7ca9":"code","f85806a7":"code","d3add7d3":"markdown","ff434856":"markdown","bac34e9f":"markdown","274673bf":"markdown","501d2cc4":"markdown","227a1b71":"markdown","9486b73e":"markdown","8edd86b0":"markdown","4a3d1d78":"markdown","fad4ca2d":"markdown","30c9ed25":"markdown","ae258a9a":"markdown","d9abed4d":"markdown","1bdf9eea":"markdown","8a9dcc29":"markdown","2c0bb2f1":"markdown","c18d2a9c":"markdown","8863eec0":"markdown","26c733ba":"markdown"},"source":{"63aae7f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08b67f53":"!python -m pip install snap-stanford","932ebfed":"import snap","44470339":"G1 = snap.LoadEdgeList(snap.PNGraph,\"\/kaggle\/input\/ml-in-graphs-hw0\/wiki-Vote.txt\",0,1)","4f404bc5":"# nodes = set()\n# G1 = snap.TNGraph.New()\n# for line in ['1\\t2', '2\\t1', '1\\t3', '1\\t1']:\n#     node1, node2 = line.replace('\\n','').split('\\t')\n#     node1 = int(node1)\n#     node2 = int(node2)\n#     if node1==node2:\n#         print(node1)\n#     if node1 not in nodes:\n#         G1.AddNode(node1)\n#         nodes=set.union(nodes,{node1})\n#     if node2 not in nodes:\n#         G1.AddNode(node2)\n#         nodes=set.union(nodes,{node2})\n#     G1.AddEdge(node1,node2)","97251d7a":"G1.GetNodes()","c7cdb950":"result = 0\nfor EI in G1.Edges():\n    if EI.GetSrcNId()==EI.GetDstNId():\n        print (\"(%d, %d)\" % (EI.GetSrcNId(), EI.GetDstNId()))\n        result+=1\nprint(result)","70313852":"result = 0\nfor EI in G1.Edges():\n    if EI.GetSrcNId()!=EI.GetDstNId():\n        result+=1\nprint(result)","6e61e69f":"result = 0\nedges = 0\nfor node in G1.Nodes():\n    node_id = node.GetId()\n    in_set = set()\n    for edge in node.GetInEdges():\n        if node_id!=edge:\n            in_set.add(edge)\n            edges+=1\n    out_set = set()\n    for edge in node.GetOutEdges():\n        if node_id!=edge:\n            out_set.add(edge)\n            edges+=1\n    result+=len(set.intersection(out_set, in_set) )\nprint(edges\/2-result\/2)\nprint('Undirected edges amount: {}'.format(snap.CntUniqUndirEdges(G1)))","4f7722c7":"result = 0\nNodes = snap.TIntV()\nfor nodeId in G1.Nodes():\n    Nodes.Add(nodeId.GetId())\n    \nfor node in G1.Nodes():\n    node_id = node.GetId()\n    in_set = set()\n    for edge in node.GetInEdges():\n        if node_id!=edge:\n            in_set.add(edge)\n    out_set = set()\n    for edge in node.GetOutEdges():\n        if node_id!=edge:\n            out_set.add(edge)\n    result+=len(set.intersection(out_set, in_set) )\nprint(result\/2)\n\nprint('Reciprocated edges amount: {}'.format(snap.CntUniqDirEdges(G1) - snap.CntUniqUndirEdges(G1)))\n\n# results = snap.GetEdgesInOut(G1,Nodes)","dfb0c105":"result = 0\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    if len(out_set)==0:\n        result+=1\nprint(result)","fd2b772e":"result = 0\nfor node in G1.Nodes():\n    in_set = set()\n    for edge in node.GetInEdges():\n        in_set.add(edge)\n    if len(in_set)==0:\n        result+=1\nprint(result)","9301acf6":"result = 0\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    if len(out_set)>10:\n        result+=1\nprint(result)","d5c8a54c":"result = 0\nfor node in G1.Nodes():\n    in_set = set()\n    for edge in node.GetInEdges():\n        in_set.add(edge)\n    if len(in_set)<10:\n        result+=1\nprint(result)","959a00b9":"result = []\nfor node in G1.Nodes():\n    out_set = set()\n    for edge in node.GetOutEdges():\n        out_set.add(edge)\n    result.append(len(out_set))","3220f638":"df = pd.DataFrame(result).groupby(0).size()\ndf = df[1:]\nx = np.log(df.index)\ny = np.log(df.values)","4fb139d2":"import matplotlib.pyplot as plt\nplt.bar(x, y)","4e37ac90":"from scipy.stats import linregress\nlinregress(x, y)","0b5f96a0":"G2 = snap.LoadEdgeList(snap.PNGraph,\"\/kaggle\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt\",0,1)","2eb4a5ed":"Components = snap.TCnComV()\nsnap.GetWccs(G2, Components)\nlen(Components)","c629db1c":"MxWcc = snap.GetMxWcc(G2)\nMxWcc.GetEdges(),MxWcc.GetNodes()","9181e1af":"result = []\nPRankH = snap.TIntFltH()\nsnap.GetPageRank(G2, PRankH)\nfor item in PRankH:\n    result.append([item, PRankH[item]])\nresult.sort(key= lambda x: x[1],reverse=True)\n[x[0] for x in result[:3]]","d27a7ca9":"NIdHubH = snap.TIntFltH()\nNIdAuthH = snap.TIntFltH()\nsnap.GetHits(G2, NIdHubH, NIdAuthH)\nresult = []\nfor item in NIdHubH:\n    result.append([item, NIdHubH[item]])\n    \nresult.sort(key= lambda x: x[1],reverse=True)\n[x[0] for x in result[:3]]","f85806a7":"result = []\nfor item in NIdAuthH:\n    result.append([item, NIdAuthH[item]])\n    \nresult.sort(key= lambda x: x[1],reverse=True)\n[x[0] for x in result[:3]]","d3add7d3":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","ff434856":"# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","bac34e9f":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc.","274673bf":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","501d2cc4":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","227a1b71":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","9486b73e":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","8edd86b0":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n","4a3d1d78":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","fad4ca2d":"## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.","30c9ed25":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","ae258a9a":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n","d9abed4d":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","1bdf9eea":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","8a9dcc29":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)","2c0bb2f1":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","c18d2a9c":"## The number of nodes in the network. (G small has 3 nodes.)","8863eec0":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)","26c733ba":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics."}}