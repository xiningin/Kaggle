{"cell_type":{"32785355":"code","3571c1d8":"code","d2dd12d4":"code","a8b70aab":"code","37c35ce7":"code","00d02295":"code","434b5e9b":"code","52aa6fa1":"code","0b14420c":"code","e1792e77":"markdown","52e03923":"markdown","e5a0543a":"markdown","a3c81f6e":"markdown","3045cb86":"markdown","36e790aa":"markdown","bb6edf27":"markdown","3342615f":"markdown"},"source":{"32785355":"import numpy as np\nimport pandas as pd \n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest  = pd.read_csv('..\/input\/test.csv')\ntrain.head()","3571c1d8":"train.shape","d2dd12d4":"import sklearn \nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfeatures = train.iloc[:,0:562]\nlabel = train[\"Activity\"]\nclf = ExtraTreesClassifier()\nclf = clf.fit(features,label)\nmodel = SelectFromModel(clf,prefit=True)\nNew_features = model.transform(features)\nprint(New_features.shape)","a8b70aab":"from sklearn.svm import LinearSVC\nlsvc = LinearSVC(C=0.01, penalty=\"l1\", dual=False).fit(features, label)\nmodel_2 = SelectFromModel(lsvc, prefit=True)\nNew_features_2 = model_2.transform(features)\nprint(New_features_2.shape)\n","37c35ce7":"# Loading Models \n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nClassifiers = [DecisionTreeClassifier(),RandomForestClassifier(n_estimators=200),GradientBoostingClassifier(n_estimators=200)]","00d02295":"#Without Feature Selection \n\nfrom sklearn.metrics import accuracy_score\nimport timeit\ntest_features= test.iloc[:,0:562]\nTime_1=[]\nModel_1=[]\nOut_Accuracy_1=[]\n\nfor clf in Classifiers:\n    start_time = timeit.default_timer()\n    fit=clf.fit(features,label)\n    pred=fit.predict(test_features)\n    elapsed = timeit.default_timer() - start_time\n    Time_1.append(elapsed)\n    Model_1.append(clf.__class__.__name__)\n    Out_Accuracy_1.append(accuracy_score(test['Activity'],pred))\n    \n    ","434b5e9b":"test_features= model.transform(test.iloc[:,0:562])\n\nTime_2=[]\nModel_2=[]\nOut_Accuracy_2=[]\n\nfor clf in Classifiers:\n    start_time = timeit.default_timer()\n    fit=clf.fit(New_features,label)\n    pred=fit.predict(test_features)\n    elapsed = timeit.default_timer() - start_time\n    Time_2.append(elapsed)\n    Model_2.append(clf.__class__.__name__)\n    Out_Accuracy_2.append(accuracy_score(test['Activity'],pred))\n","52aa6fa1":"test_features= model_2.transform(test.iloc[:,0:562])\n\nTime_3=[]\nModel_3=[]\nOut_Accuracy_3=[]\n\nfor clf in Classifiers:\n    start_time = timeit.default_timer()\n    fit=clf.fit(New_features_2,label)\n    pred=fit.predict(test_features)\n    elapsed = timeit.default_timer() - start_time\n    Time_3.append(elapsed)\n    Model_3.append(clf.__class__.__name__)\n    Out_Accuracy_3.append(accuracy_score(test['Activity'],pred))","0b14420c":"import matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\nind =  np.arange(3)   # the x locations for the groups\nwidth = 0.1       # the width of the bars\nfig, ax = plt.subplots()\nrects1 = ax.bar(ind, Out_Accuracy_1, width, color='r')\nrects2 = ax.bar(ind + width, Out_Accuracy_2, width, color='y')\nrects3 = ax.bar(ind + width + width ,Out_Accuracy_3, width, color='b')\nax.set_ylabel('Accuracy')\nax.set_title('Accuracy by Models and Selection Process')\nax.set_xticks(ind + width)\nax.set_xticklabels(Model_3,rotation=45)\nplt.show()\n","e1792e77":"# Finally We will look for Accuracy of our models and time Taken by each model ","52e03923":"## Fitting Classifiers ","e5a0543a":"# Tree Based Feature selection \n","a3c81f6e":"## Accuracy plots ","3045cb86":"# L1 Based Feature Selection ","36e790aa":"# L1 Based Feature Selection ","bb6edf27":"## Feature Selection Using Scikit Learn ","3342615f":"# Tree based Feature selection "}}