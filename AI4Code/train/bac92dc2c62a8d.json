{"cell_type":{"e41b8787":"code","0c1432e0":"code","714b1380":"code","3d9ff89a":"code","4c1a6556":"code","48e93c21":"code","7df40412":"code","46de90a2":"code","805da935":"code","6fab724d":"code","ff419814":"code","b24a80c1":"code","a4b57872":"code","fdac09f9":"code","feccedd0":"code","a37b1119":"code","d115c504":"code","47bcb0d4":"code","6ba1cfc6":"code","1edeba0e":"code","dd3b5dd6":"code","61a0baf9":"code","7b231646":"code","66100c1f":"code","9cf96660":"code","73dc5d54":"code","203b9e2d":"code","4798022c":"code","8fd0b37c":"code","ce83eaac":"code","3b5d9328":"code","1c676a3b":"code","b13e022f":"code","ba08eafa":"code","9126efec":"code","6805f578":"code","1a6dab6f":"code","6c3bbf08":"code","9cf0f040":"code","d29216c2":"code","db3f918d":"code","c85296a9":"code","9398f3c2":"code","dfaf8f9e":"code","cd467284":"code","eff37b24":"code","fb6759c9":"code","39ca433b":"code","e1d2cfa7":"code","1852269a":"code","e1d72791":"code","82830e12":"code","976154a9":"code","82e060dc":"code","8d5a22af":"code","14123cc2":"code","1491b139":"code","ee4fa44d":"code","9ef7abef":"code","61c3a9bb":"code","f89a95bb":"code","5e308164":"code","5e25e9fb":"code","2cefb54f":"code","669bb8c9":"code","ddd9da0a":"code","dbbd6183":"code","03efb300":"code","542c0267":"code","dc53c609":"code","75e746f9":"code","a7772b1b":"code","919c7b61":"code","e108d4ca":"code","0c09c4e9":"code","518bcd4d":"code","6cf1c7f3":"code","7c0e23f6":"code","c0a02edb":"code","369e52d3":"code","4026875c":"code","c5f5b98d":"code","0e027bc1":"code","6c476a37":"code","ac788403":"code","5a53b7b2":"code","174c9a9d":"code","22ed2b8b":"markdown","4477f9bb":"markdown","afb0e78b":"markdown","4e98f5c6":"markdown","fe303344":"markdown","e33e7abc":"markdown","8096d7bd":"markdown","bc9b10de":"markdown","afc8d49f":"markdown","ef670220":"markdown","51852229":"markdown","045d74fc":"markdown","b681e438":"markdown","3e02ae67":"markdown","54853aa1":"markdown","791b0953":"markdown","a99ae935":"markdown"},"source":{"e41b8787":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport tensorflow as tf\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nprint('Tensorflow version',tf.__version__)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c1432e0":"#!pip install rpy2","714b1380":"pd.set_option('display.max_columns', None)\ndata = pd.read_csv('\/kaggle\/input\/life-expectancy-who\/Life Expectancy Data.csv')\ndata.head()","3d9ff89a":"print('the size of the dataset', data.shape)\nprint('the columns of the dataset ', list(data.columns))","4c1a6556":"data.rename(columns={\" BMI \":\"BMI\",\"Life expectancy \":\"Life_Expectancy\",\"Adult Mortality\":\"Adult_Mortality\",\n                   \"infant deaths\":\"Infant_Deaths\",\"percentage expenditure\":\"Percentage_Exp\",\"Hepatitis B\":\"HepatitisB\",\n                  \"Measles \":\"Measles\",\" BMI \":\"BMI\",\"under-five deaths \":\"Under_Five_Deaths\",\"Diphtheria \":\"Diphtheria\",\n                  \" HIV\/AIDS\":\"HIV\/AIDS\",\" thinness  1-19 years\":\"thinness_1to19_years\",\" thinness 5-9 years\":\"thinness_5to9_years\",\"Income composition of resources\":\"Income_Comp_Of_Resources\",\n                   \"Total expenditure\":\"Tot_Exp\"},inplace=True)","48e93c21":"print('Number of Countries', len(data['Country'].unique()))","7df40412":"data.info()","46de90a2":"data.Country.unique()","805da935":"#Count of developing and developed countries\ndata.groupby('Status')[\"Status\"].count()","6fab724d":"data.loc[:, [\"Life_Expectancy\", \"Alcohol\"]].groupby(data['Country']).describe().loc[['Morocco','Germany','France','Spain'],:]","ff419814":"#Distribution of the response variable\ndata['Life_Expectancy'].hist()","b24a80c1":"plt.figure(figsize=(6,6))\nplt.bar(data.groupby('Status')['Status'].count().index, data.groupby('Status')['Life_Expectancy'].mean())\nplt.xlabel(\"Status\",fontsize=12)\nplt.ylabel(\"Avg Life_Expectancy\",fontsize=12)\nplt.title(\"Life_Expectancy w.r.t Status\")\nplt.show()","a4b57872":"data[data.Country.isin(['Morocco','Germany','Spain','France'])].boxplot(by='Country', \n                       column=['Life_Expectancy'], \n                       grid=False)","fdac09f9":"fig = plt.figure()\nax1 = fig.add_subplot(211)\ndata[data.Country.isin(['Morocco','Germany','Spain','France'])].groupby('Country')['Life_Expectancy'].mean().sort_values().plot(kind='barh', ax=ax1)","feccedd0":"# Life_Expectancy w.r.t Year using bar plot.\nplt.figure(figsize=(7,5))\nplt.bar(data.groupby('Year')['Year'].count().index, data.groupby('Year')['Life_Expectancy'].mean(),color='red',alpha=0.65)\nplt.xlabel(\"Year\",fontsize=12)\nplt.ylabel(\"Avg Life_Expectancy\",fontsize=12)\nplt.title(\"Life_Expectancy w.r.t Year\")\nplt.show()","a37b1119":"# Using heatmap to observe correlations.\ncormat = data.corr()\nplt.figure(figsize=(15,15))\nsns.heatmap(cormat, square=True, annot=True, linewidths=.5)\nplt.title(\"Correlation matrix among variables\")\nplt.show()","d115c504":"plt.scatter(data[\"thinness_5to9_years\"], data[\"thinness_1to19_years\"])\nplt.title(\"thinness_1to19_years vs thinness_5to9_years\")\nplt.show()","47bcb0d4":"#Strong correlation between \"thinness_1to19_years\" and \"thinness_5to9_years\"\ndata = data.drop(['thinness_5to9_years'], axis=1)","6ba1cfc6":"data.isnull().sum()","1edeba0e":"# percentage of null values in each column.\ndata.isnull().sum()*100\/data.isnull().count()","dd3b5dd6":"country_list = data.Country.unique()\nfill_list = ['Life_Expectancy','Adult_Mortality','Alcohol','HepatitisB',\n             'BMI','Polio','Tot_Exp','Diphtheria','GDP','Population','thinness_1to19_years','Income_Comp_Of_Resources','Schooling']","61a0baf9":"# Treat null values using interpolation.\nfor country in country_list:\n    data.loc[data['Country'] == country,fill_list] = data.loc[data['Country'] == country,fill_list].interpolate()","7b231646":"#Droping rows with null target variable\ndata[np.isnan(data['Life_Expectancy'])]\ndata = data.drop(data.index[[624, 769, 1650,1715,1812,1909,1958,2167,2216,2713]])","66100c1f":"def impute_col(row, col): #MCAR\n    mean_col = pd.DataFrame({'mean_col':pd.Series(np.round(data.groupby('Country')[col].mean(), 2))})\n    if np.isnan(row[col]):\n        cnt = row['Country']\n        row[col] = mean_col.loc[cnt][0]\n    return row","9cf96660":"# Alcohol null values\ndata[np.isnan(data.Alcohol)]","73dc5d54":"data = data.apply(impute_col, args=('Alcohol',) , axis=1)\ndata = data[data.Country != 'South Sudan']","203b9e2d":"# Hepatitis B null values\ndata[np.isnan(data['HepatitisB'])]","4798022c":"data = data.drop(['HepatitisB'], axis=1)","8fd0b37c":"#BMI null values\ndata[np.isnan(data['BMI'])]","ce83eaac":"data = data[data.Country != 'Sudan']","3b5d9328":"#Total expenditure null values\ndata = data.apply(impute_col, args=('Tot_Exp',) , axis=1)","1c676a3b":"data = data[~data['Country'].isin([\"Democratic People's Republic of Korea\",\"Somalia\"])]","b13e022f":"#GDP null values\ndata = data.apply(impute_col, args=('GDP',) , axis=1)","ba08eafa":"data = data.drop(['GDP'], axis=1)","9126efec":"#Population null values\ndata = data.apply(impute_col, args=('Population',) , axis=1)","6805f578":"data[np.isnan(data.Population)]['Country'].unique()","1a6dab6f":"data = data.drop(['Population'], axis=1)","6c3bbf08":"#Income_Comp_Of_Resources\ndata = data.apply(impute_col, args=('Income_Comp_Of_Resources',) , axis=1)","9cf0f040":"data = data.drop(['Income_Comp_Of_Resources'], axis=1)","d29216c2":"#Schooling\ndata = data.apply(impute_col, args=('Schooling',) , axis=1)\ndata = data.drop(['Schooling'], axis=1)","db3f918d":"data.isnull().sum()","c85296a9":"# Create a dictionary of columns.\ncol_dict = {'Life_Expectancy':1, 'Adult_Mortality':2,\n            'Infant_Deaths':3, 'Alcohol':4,\n            'Percentage_Exp':5,'Measles':6,\n            'BMI':7,'Under_Five_Deaths':8,\n            'Polio':9,'Tot_Exp':10,\n            'Diphtheria':11,'HIV\/AIDS':12,\n            'thinness_1to19_years':13}\n\n# Detect outliers in each variable using box plots.\nplt.figure(figsize=(20,30))\n\nfor variable,i in col_dict.items():\n                     plt.subplot(5,4,i)\n                     plt.boxplot(data[variable])\n                     plt.title(variable)\n\nplt.show()","9398f3c2":"data.head()","dfaf8f9e":"import scipy.stats as stats\nstats.ttest_ind(data.loc[data['Status']=='Developed','Life_Expectancy'],data.loc[data['Status']=='Developing','Life_Expectancy'])","cd467284":"feature_df = data[['Country','Status','Adult_Mortality','Alcohol','HIV\/AIDS','Polio','BMI', 'thinness_1to19_years','Life_Expectancy']]","eff37b24":"feature_df = pd.concat([feature_df,pd.get_dummies(feature_df['Status'],drop_first=True)],axis=1)\nfinal = feature_df.drop('Status',axis=1)","fb6759c9":"final['Adult_Mortality_scaled'] =final['Adult_Mortality'].apply(lambda x : ((x-np.min(final['Adult_Mortality']))\/(np.max(final['Adult_Mortality'])-np.min(final['Adult_Mortality'])) * (20)))","39ca433b":"final['Polio_scaled'] =final['Polio'].apply(lambda x : ((x-np.min(final['Polio']))\/(np.max(final['Polio'])-np.min(final['Polio'])) * (20)))","e1d2cfa7":"final.to_csv('.\/final.csv',index = False) ","1852269a":"final = pd.read_csv('.\/final.csv')","e1d72791":"final.head()","82830e12":"countries = final.Country.unique()\ncountry_dict = {'countries': list(countries)}\ncountry_df = pd.DataFrame(country_dict)","976154a9":"def demo(feature_column):\n    feature_layer = layers.DenseFeatures(feature_column)\n    return feature_layer(country_dict).numpy()","82e060dc":"countries = feature_column.categorical_column_with_vocabulary_list(\n 'countries', country_df['countries'])","8d5a22af":"countries_embedding = feature_column.embedding_column(countries, dimension=4)","14123cc2":"countries_embedding =  demo(countries_embedding)","1491b139":"b = []\nfor embed in countries_embedding:\n    b.extend([embed] * 16)","ee4fa44d":"final['countries_embedding'] = pd.Series(b)","9ef7abef":"final['sum_countries_embedding'] = final['countries_embedding'].apply(lambda x: x.sum())","61c3a9bb":"final =  final.rename(columns={\"HIV\/AIDS\": \"hivaids\"})","f89a95bb":"feature_df = ['sum_countries_embedding','Adult_Mortality_scaled','Alcohol','hivaids','Polio_scaled','BMI', 'thinness_1to19_years','Developing']","5e308164":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression(fit_intercept=True)\nx = final.loc[:,feature_df]\ny = final.Life_Expectancy\nmodel.fit(x, y)","5e25e9fb":"print(\"Model slopes:    \", model.coef_)\nprint(\"Model intercept:\", model.intercept_)","2cefb54f":"y_predict = model.predict(x.values)\nRMSE = np.sqrt(((y-y_predict)**2).values.mean())\n\nresults = pd.DataFrame()\nresults[\"Method\"] = [\"Linear Regression\"]\nresults[\"RMSE\"] = RMSE\nresults","669bb8c9":"np.min(final['Life_Expectancy']), np.max(final['Life_Expectancy'])","ddd9da0a":"from yellowbrick.regressor import ResidualsPlot\nvisualizer = ResidualsPlot(estimator = model)\nvisualizer.fit(x, y) \nvisualizer.poof()","dbbd6183":"#!pip install -q statsmodels\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nmd = smf.mixedlm(\"Life_Expectancy ~ Adult_Mortality_scaled + Alcohol + Polio_scaled + hivaids + BMI + thinness_1to19_years + Developing\", \n                 final, \n                 groups=final[\"sum_countries_embedding\"], re_formula=\"~Adult_Mortality_scaled + Alcohol + Polio_scaled + hivaids + BMI + thinness_1to19_years + Developing\") \n#re_formula To ensure that each country has its own random slope","03efb300":"mdf = md.fit(method=[\"lbfgs\"])\nprint(mdf.summary())","542c0267":"performance = pd.DataFrame()\nperformance[\"residuals\"] = mdf.resid.values\nperformance[\"predicted\"] = mdf.fittedvalues\n\nsns.lmplot(x = \"predicted\", y = \"residuals\", data = performance)","dc53c609":"y_predict = mdf.fittedvalues\nRMSE = np.sqrt(((y-y_predict)**2).values.mean())\nresults.loc[3] = [\"Mixed_Random_Slopes\", RMSE]\nresults","75e746f9":"final = pd.read_csv('.\/final.csv')","a7772b1b":"final.head()","919c7b61":"final['Status'] = final['Developing'].map(lambda x: 'Developing' if x==1 else 'Developed')","e108d4ca":"train, test = train_test_split(final, test_size=0.2)\ntrain, val = train_test_split(train, test_size=0.2)\nprint(len(train), 'train examples')\nprint(len(val), 'validation examples')\nprint(len(test), 'test examples')","0c09c4e9":"def df_to_dataset(dataframe, shuffle=True, batch_size=32):\n    dataframe = dataframe.copy()\n    labels = dataframe.pop('Life_Expectancy')\n    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n    if shuffle:\n        ds = ds.shuffle(buffer_size=len(dataframe))\n    ds = ds.batch(batch_size)\n    return ds","518bcd4d":"train_ds = df_to_dataset(train)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=16)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=16)","6cf1c7f3":"final_batch = next(iter(train_ds))[0]","7c0e23f6":"def demo(feature_column):\n    feature_layer = layers.DenseFeatures(feature_column)\n    return feature_layer(final_batch).numpy()","c0a02edb":"feature_columns = []\n# numeric cols\nfor header in ['Alcohol', 'HIV\/AIDS', 'Polio_scaled','BMI','thinness_1to19_years']:\n    feature_columns.append(feature_column.numeric_column(header))","369e52d3":"#catgorical cols\nstatus = feature_column.categorical_column_with_vocabulary_list(\n      'Status', ['Developing', 'Developed'])\n\nstatus = feature_column.indicator_column(status)\nfeature_columns.append(status)","4026875c":"# embedding columns\ncountry = feature_column.categorical_column_with_vocabulary_list(\n      'Country', final.Country.unique())\ncountry_embedding = feature_column.embedding_column(country, dimension=6)\nfeature_columns.append(country_embedding)","c5f5b98d":"#Input layer\nfeature_layer = tf.keras.layers.DenseFeatures(feature_columns)\n#Model architecture\nmodel = tf.keras.Sequential([\n  feature_layer,\n  layers.Dense(128, activation='relu'),\n  layers.Dense(64, activation='relu'),\n  layers.Dense(32, activation='relu'), \n  layers.Dense(16, activation='relu'), \n  layers.Dense(1)\n])\nmodel.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(0.001), metrics=[tf.keras.metrics.RootMeanSquaredError()])","0e027bc1":"#Fitting\nhistory = model.fit(train_ds, validation_data=val_ds, epochs=40)","6c476a37":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.tail()","ac788403":"predictions = model.predict(test_ds)\ny = np.concatenate([y for x, y in test_ds], axis=0)","5a53b7b2":"compare = pd.DataFrame({'predictions':predictions.reshape((-1,)), 'True': y})\ncompare.tail()","174c9a9d":"model_err = model.evaluate(test_ds)","22ed2b8b":"# **FEATURE ENGINEERING**","4477f9bb":"* **DUMMIFICATION OF STATUS**\n* **NORMALIZING NUMERICAL FEATURES**","afb0e78b":"## **DEALING WITH MISSING DATA**","4e98f5c6":"# **OUTLIERS**","fe303344":"# **FEATURE SELECTION**","e33e7abc":"**p value is < 0.05\nTherefore, the difference of Life Expectancy between Developed and Developing countries is significant. We can consider 'Status' as a feature.**\n\n**Also \"Adult mortality\" : -0.7, \"HIV\/AIDS\" : -0.56,  \"BMI\" : 0.57, \"Polio\" : 0.47, \"GDP\" : 0.46, \"Alcohol\" : 0.4, \"thinness_1to19_years\" : 0.45**","8096d7bd":"## **LINEAR REGRESSION**","bc9b10de":"# **TRAINING**","afc8d49f":"## **MIXED EFFECT MODEL**","ef670220":"## **IMPORTING NECESSARY MODULES**","51852229":"**Residuals should be pretty symmetrically distributed, tending to cluster towards the middle of the plot. Clustered around the lower single digits of the y-axis.\nIn general, no clear patterns.**","045d74fc":"## **IN THIS PARTICULAR CASE, THE MIXED EFFECT MODEL IS SUPERIOR TO BOTH NORMAL LINEAR REGRESSION AND THE USED NEURAL NETWORK ARCHITECTURE, SINCE IT TAKES INTO ACCOUNT THE DEPENDANCE OF THE DATA.**","b681e438":"## **DATA VISUALIZATION**","3e02ae67":"## **IMPORTING DATA**","54853aa1":"# **USING A NEURAL NETWORK**","791b0953":"# **Observation**\n* **LifeExpectancy has a negative correlation with adult mortality** \n* **LifeExpectancy has strong correlatios with Schooling and Income composition of resources** \n* **Strong correlation between thinness_1to19_years and thinness_5to9_years** \n* **There is a non-negligible correlation between LifeExpectancy and BMI and body deseases** ","a99ae935":"# **EMBED THE COUNTRY FEATURE**"}}