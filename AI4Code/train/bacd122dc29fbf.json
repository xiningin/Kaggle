{"cell_type":{"324c7cd5":"code","d4f71b53":"code","147c739a":"code","b9aa6622":"code","95e5b606":"code","d1688019":"code","ca3b6c0b":"code","4484c1ba":"code","82bd4a66":"code","fe8e170c":"code","79b4e7f9":"code","75fc3f9a":"markdown","6a2a5b5a":"markdown","49b95abc":"markdown","c971ff33":"markdown","6d7f168a":"markdown","e891151b":"markdown","42a50003":"markdown"},"source":{"324c7cd5":"print(\"Read in libraries\")\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random","d4f71b53":"print(\"read in train file\")\ndf=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\",\n               usecols=['Province_State','Country_Region','Date','ConfirmedCases','Fatalities'])\n","147c739a":"print(\"fill blanks and add region for counting\")\ndf.fillna(' ',inplace=True)\ndf['Lat']=df['Province_State']+df['Country_Region']\ndf.drop('Province_State',axis=1,inplace=True)\ndf.drop('Country_Region',axis=1,inplace=True)\n\n\n","b9aa6622":"countries_list=df.Lat.unique()\ndf1=[]\nfor i in countries_list:\n    df1.append(df[df['Lat']==i])\nprint(\"we have \"+ str(len(df1))+\" regions in our dataset\")\n\n#read in test file \ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")","95e5b606":"#create the estimates assuming measurement error \nsubmit_confirmed=[]\nsubmit_fatal=[]\nfor i in df1:\n    # contrived dataset\n    data = i.ConfirmedCases.astype('int32').tolist()\n    # fit model\n    try:\n        #model = SARIMAX(data, order=(2,1,0), seasonal_order=(1,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        model = SARIMAX(data, order=(1,1,0), seasonal_order=(1,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        #model = SARIMAX(data, order=(1,1,0), seasonal_order=(0,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        # make prediction\n        predicted = model_fit.predict(len(data), len(data)+34)\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        submit_confirmed.extend(list(new[-43:]))\n    except:\n        submit_confirmed.extend(list(data[-10:-1]))\n        for j in range(34):\n            submit_confirmed.append(data[-1]*2)\n    \n    # contrived dataset\n    data = i.Fatalities.astype('int32').tolist()\n    # fit model\n    try:\n        #model = SARIMAX(data, order=(1,0,0), seasonal_order=(0,1,1,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        model = SARIMAX(data, order=(1,1,0), seasonal_order=(1,1,0,12),measurement_error=True)#seasonal_order=(1, 1, 1, 1))\n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        # make prediction\n        predicted = model_fit.predict(len(data), len(data)+34)\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        submit_fatal.extend(list(new[-43:]))\n    except:\n        submit_fatal.extend(list(data[-10:-1]))\n        for j in range(34):\n            submit_fatal.append(data[-1]*2)\n\n","d1688019":"#create an alternative fatality metric \n#submit_fatal = [i * .005 for i in submit_confirmed]\n#print(submit_fatal)","ca3b6c0b":"#make the submission file \ndf_submit=pd.concat([pd.Series(np.arange(1,1+len(submit_confirmed))),pd.Series(submit_confirmed),pd.Series(submit_fatal)],axis=1)\ndf_submit=df_submit.fillna(method='pad').astype(int)","4484c1ba":"#view submission file \ndf_submit.head()\n#df_submit.dtypes","82bd4a66":"#examine the test file \ntest.head()","fe8e170c":"#join the submission file info to the test data set \n#rename the columns \ndf_submit.rename(columns={0: 'ForecastId', 1: 'ConfirmedCases',2: 'Fatalities',}, inplace=True)\n\n#join the two data items \ncomplete_test= pd.merge(test, df_submit, how=\"left\", on=\"ForecastId\")","79b4e7f9":"#df_submit.interpolate(method='pad', xis=0, inplace=True)\ndf_submit.to_csv('submission.csv',header=['ForecastId','ConfirmedCases','Fatalities'],index=False)\ncomplete_test.to_csv('complete_test.csv',index=False)\n","75fc3f9a":"# Submission","6a2a5b5a":"Notes on how to determine the ARIMA \/ SARIMA model \n#https:\/\/www.sciencedirect.com\/science\/article\/pii\/S1201971218344618\n\nA total of 1,341 specimens were positive for influenza A and 490 for influenza B. The majority of infected patients were 1\u201311 years old (87.7%). The ARIMA model could effectively predict the positive rate of influenza virus in a short time. ARIMA(0,0,11), SARIMA(1,0,0)(0,1,1)12, ARIMA(0,0,1) and SARIMA(0,0,1)(1,0,1)12 were suitable for B(Victoria), B(Yamagata), A(H1N1)pdm09, and A(H3N2), respectively.\n\n#https:\/\/journals.lww.com\/md-journal\/fulltext\/2016\/06280\/time_series_analysis_of_influenza_incidence_in.15.aspx\n It is conceivable that SARIMA (0,1,1)(0,1,1)12 could simultaneously forecast the influenza incidence of the Hebei Province, Guizhou Province, Henan Province, and Shandong Province; SARIMA (1,0,0)(0,1,1)12 could forecast the influenza incidence in Gansu Province; SARIMA (3,1,1)(0,1,1)12 could forecast the influenza incidence in Tianjin City; and SARIMA (0,1,1)(0,0,1)12 could forecast the influenza incidence in Hunan Province. Time series analysis is a good tool for prediction of disease incidence.\n \n #https:\/\/www.researchgate.net\/publication\/337619595_Predicting_Seasonal_Influenza_Based_on_SARIMA_Model_in_Mainland_China_from_2005_to_2018\n The SARIMA (1, 0, 0) \u00d7 (0, 1, 1) 12 model predicted that the influenza incidence in 2018 was similar to that of previous years, and it fitted the seasonal fluctuation. The relative errors between actual values and predicted values fluctuated from 0.0010 to 0.0137, which indicated that the predicted values matched the actual values well. This study demonstrated that the SARIMA model could effectively make short-term predictions of seasonal influenza.\n \n #https:\/\/www.mdpi.com\/1660-4601\/17\/4\/1381\/htm\n  For the SARIMA and ARIMA models, AICc-based model selection using the training data resulted in SARIMA(1,0,0)(1,1,0)[52] and ARIMA(5,1,0) with S=4 harmonics, respectively. The final number of parameters for each of these models is given in Table 1, and it ranges from 3 (SARIMA) to 20 (Beta(4)).","49b95abc":"# Papers that Informed Parameters","c971ff33":"# Read and Clean Data","6d7f168a":"*Forked and edited from the https:\/\/www.kaggle.com\/mertcaglar\/sarimax-baseline-starter-prediction","e891151b":"# Visualisation of Predictions","42a50003":"# Read in Libraries"}}