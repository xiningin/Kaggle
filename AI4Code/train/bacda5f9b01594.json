{"cell_type":{"02b9637a":"code","8c66d05e":"code","e34e6dea":"code","096b7fcd":"code","43a97a7b":"code","eebfaca6":"code","d672ce1c":"code","ca0367b4":"code","d7dcd754":"code","9a3a4e1a":"code","b40ffeec":"code","22c3416d":"code","00885242":"code","69dcfb2c":"code","0b70fa1a":"code","f7a9263b":"markdown","b5399865":"markdown"},"source":{"02b9637a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c66d05e":"## Import Liberaries\nimport pandas as pd\nimport sqlite3","e34e6dea":"## Read the files\n\ndf_olist_customers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\ndf_olist_sellers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv')\ndf_olist_order_reviews= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\ndf_olist_order_items= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\ndf_olist_products= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\ndf_olist_geolocation= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv')\ndf_product_category_name_translation= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/product_category_name_translation.csv')\ndf_olist_orders = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\ndf_olist_order_payments= pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')\n\ndf_olist_customers.head()\n\n","096b7fcd":"## print the columns of all dataframes\n\nprint('The columns of olist_customers are :-  ',df_olist_customers.columns)\nprint('\\n')\nprint('The columns of olist_sellers are :-  ',df_olist_sellers.columns)\nprint('\\n')\nprint('The columns of olist_order_reviews are :-  ',df_olist_order_reviews.columns)\nprint('\\n')\nprint('The columns of olist_order_items are :-  ',df_olist_order_items.columns)\nprint('\\n')\nprint('The columns of olist_products are :-  ',df_olist_products.columns)\nprint('\\n')\nprint('The columns of olist_geolocation are :-  ',df_olist_geolocation.columns)\nprint('\\n')\nprint('The columns of product_category_name_translation are :-  ',df_product_category_name_translation.columns)\nprint('\\n')\nprint('The columns of olist_orders_dataset are :-  ',df_olist_orders.columns)\nprint('\\n')\nprint('The columns of olist_order_payments are :-  ',df_olist_order_payments.columns)\n","43a97a7b":"# import sqlalchemy and create a sqlite engine\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\n\n# export the dataframe as a table 'playstore' to the sqlite engine\ndf_olist_customers.to_sql(\"olist_customers\", con =engine)\ndf_olist_sellers.to_sql(\"olist_sellers\", con =engine)\ndf_olist_order_reviews.to_sql(\"olist_order_reviews\", con =engine)\ndf_olist_order_items.to_sql(\"olist_order_items\", con =engine)\ndf_olist_products.to_sql(\"olist_products_dataset\", con =engine)\ndf_olist_geolocation.to_sql(\"olist_geolocation\", con =engine)\ndf_product_category_name_translation.to_sql(\"product_category_name_translation\", con =engine)\ndf_olist_orders.to_sql(\"olist_orders\", con =engine)\ndf_olist_order_payments.to_sql(\"olist_order_payments\", con =engine)\ndf_olist_order_payments.head()\n","eebfaca6":"## Test the code by select the complete table\n\nsql='''\n\nSelect * from olist_customers\nlimit 5\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","d672ce1c":"## Query 1:-  count and % of Orders purchased in Jan18 with 5 Review score\nsql='''\nselect\nsum(b.review_score_5)+1 as orders_with_reviee_5,\nsum(b.review_score_total) as Total_orders,\n100*(round(round(sum(b.review_score_5),4)\/round(sum(b.review_score_total),4),4)) as Percentage\nfrom (\nselect\ncase when a.review_score=5 and a.order_id !=lag(order_id) over (order by a.customer_id,a.order_id,a.review_id asc) then 1 else 0 end as review_score_5,\ncase when a.review_score<6 then 1 else 0 end as review_score_total\nfrom (\nSelect\no.customer_id,\no.order_id,\nr.review_id,\nr.review_score,\no.order_delivered_customer_date\nfrom olist_orders o\njoin olist_order_reviews r on\no.order_id=r.order_id\nwhere o.order_delivered_customer_date between '2018-01-01 00:00:00' and '2018-01-30 00:00:00'\ngroup by o.customer_id,o.order_id,r.review_id\norder by o.customer_id,o.order_id,r.review_id asc\n) a\ngroup by a.customer_id,a.order_id,a.review_id\norder by a.customer_id,a.order_id,a.review_id asc\n)b\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","ca0367b4":"## Query 2:-  Customer purchase trend Year-on-Year\nsql='''\n\nselect\nmonth as month_no,\ncase \nwhen a.month='01' then 'Jan' \nwhen a.month='02' then 'Feb'\nwhen a.month='03' then 'Mar'\nwhen a.month='04' then 'Apr'\nwhen a.month='05' then 'May'\nwhen a.month='06' then 'Jun'\nwhen a.month='07' then 'Jul'\nwhen a.month='08' then 'Aug'\nwhen a.month='09' then 'Sep'\nwhen a.month='10' then 'Oct'\nwhen a.month='11' then 'Nov'\nwhen a.month='12' then 'Dec'\nelse 0 end as month,\nsum(case when a.year= '2016' then 1 else 0 end) as Year2016,\nsum(case when a.year= '2017' then 1 else 0 end) as Year2017,\nsum(case when a.year= '2018' then 1 else 0 end) as Year2018\nfrom\n(select \ncustomer_id,\norder_id,\norder_delivered_customer_date,\norder_status,\nstrftime('%Y',order_delivered_customer_date) as Year,\nstrftime('%m',order_delivered_customer_date) as Month\nfrom olist_orders\nwhere order_status= 'delivered' and order_delivered_customer_date is not null\ngroup by customer_id,order_id,order_delivered_customer_date\norder by order_delivered_customer_date asc) a\ngroup by month\norder by month_no asc\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(12)","d7dcd754":"# Query 3:- Average order values of customers\n\nsql='''\nselect\nraw_data.customer_unique_id,\ncount(raw_data.order_id) as Total_Orders_By_Customers,\navg(raw_data.payment_value) as Total_Payment_By_Customers,\nraw_data.customer_city,\nraw_data.customer_state\nfrom (\n\nselect\ndelivery_details.customer_unique_id,\ndelivery_details.customer_id,\ndelivery_details.order_id,\ndelivery_details.customer_city,\ndelivery_details.customer_state,\ndelivery_details.order_status,\ndelivery_details.order_delivered_customer_date,\npayment_details.payment_value\nfrom\n(select\nc.customer_unique_id,\nc.customer_id,\no.order_id,\nc.customer_city,\nc.customer_state,\no.order_status,\no.order_delivered_customer_date\nfrom olist_customers c\njoin olist_orders o on c.customer_id=o.customer_id\ngroup by 1,2,3\norder by 1,2,3 asc) delivery_details\n\njoin (select\no.customer_id,\no.order_id,\no.order_status,\no.order_delivered_customer_date,\np.payment_value\n\nfrom olist_orders o\njoin olist_order_payments p\non o.order_id=p.order_id\ngroup by 1,2,3,4,5) payment_details\non delivery_details.customer_id=payment_details.customer_id\nand delivery_details.order_id=payment_details.order_id \nand delivery_details.order_status=payment_details.order_status\nand delivery_details.order_delivered_customer_date=payment_details.order_delivered_customer_date\ngroup by 1,2,3,4,5,6,7,8\norder by 1,2,3,4,5,6,7,8 asc\n) raw_data\nwhere raw_data.order_status='delivered'\ngroup by 1\norder by 1\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","9a3a4e1a":"## Query 4:- Top 5 Cities with highest revenue from 2016 to 2018\n\n## Note:- To achieve this we will be using the raw table from quert 3\n\n\nsql='''\nselect \nresult.customer_city,\nresult.customer_state,\nresult.Total_Orders_By_Customers as Total_Orders,\nresult.Total_Payment_By_Customers as Total_Customers_Payment\nfrom (\nselect\nraw_data.customer_city,\nraw_data.customer_state,\ncount(distinct raw_data.order_id) as Total_Orders_By_Customers,\nsum(raw_data.payment_value) as Total_Payment_By_Customers\nfrom (\n\nselect\ndelivery_details.customer_unique_id,\ndelivery_details.customer_id,\ndelivery_details.order_id,\ndelivery_details.customer_city,\ndelivery_details.customer_state,\ndelivery_details.order_status,\ndelivery_details.order_delivered_customer_date,\npayment_details.payment_value\nfrom\n(select\nc.customer_unique_id,\nc.customer_id,\no.order_id,\nc.customer_city,\nc.customer_state,\no.order_status,\no.order_delivered_customer_date\nfrom olist_customers c\njoin olist_orders o on c.customer_id=o.customer_id\ngroup by 1,2,3\norder by 1,2,3 asc) delivery_details\n\njoin (select\no.customer_id,\no.order_id,\no.order_status,\no.order_delivered_customer_date,\np.payment_value\n\nfrom olist_orders o\njoin olist_order_payments p\non o.order_id=p.order_id\ngroup by 1,2,3,4,5) payment_details\non delivery_details.customer_id=payment_details.customer_id\nand delivery_details.order_id=payment_details.order_id \nand delivery_details.order_status=payment_details.order_status\nand delivery_details.order_delivered_customer_date=payment_details.order_delivered_customer_date\ngroup by 1,2,3,4,5,6,7,8\norder by 1,2,3,4,5,6,7,8 asc\n) raw_data\nwhere raw_data.order_status='delivered'\ngroup by 1,2\norder by 1,2 desc\n) result\n\ngroup by 1,2\norder by 4 desc\nlimit 5\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","b40ffeec":"## Query 5:- State wise revenue table between 2016 to 2018\n\n## Note:- To achieve this we will be using the raw table from query 3\n\n\nsql='''\nselect\nresult.year as Year,\nmax(result.SP) as SP,\nmax(result.SC) as SC,\nmax(result.MG) as MG,\nmax(result.PR) as PR,\nmax(result.RJ) as RJ,\nmax(result.RS) as RS,\nmax(result.PA) as PA,\nmax(result.GO) as GO,\nmax(result.ES) as ES,\nmax(result.BA) as BA,\nmax(result.MA) as MA,\nmax(result.MS) as MS,\nmax(result.CE) as CE,\nmax(result.DF) as DF,\nmax(result.RN) as RN,\nmax(result.PE) as PE,\nmax(result.MT) as MT,\nmax(result.AM) as AM,\nmax(result.AP) as AP,\nmax(result.AL) as AL,\nmax(result.RO) as RO,\nmax(result.PB) as PB,\nmax(result.TOs) as TOs,\nmax(result.PI) as PI,\nmax(result.AC) as AC,\nmax(result.SE) as SE,\nmax(result.RR) as RR\nfrom (\nselect \nstrftime('%Y',raw.order_delivered_customer_date) as Year,\nraw.customer_city,\nraw.customer_state,\ncase when raw.customer_state='SP' then sum(raw.payment_value) else 0 end as SP,\ncase when raw.customer_state='SC' then sum(raw.payment_value) else 0 end as SC,\ncase when raw.customer_state='MG' then sum(raw.payment_value) else 0 end as MG,\ncase when raw.customer_state='PR' then sum(raw.payment_value) else 0 end as PR,\ncase when raw.customer_state='RJ' then sum(raw.payment_value) else 0 end as RJ,\ncase when raw.customer_state='RS' then sum(raw.payment_value) else 0 end as RS,\ncase when raw.customer_state='PA' then sum(raw.payment_value) else 0 end as PA,\ncase when raw.customer_state='GO' then sum(raw.payment_value) else 0 end as GO,\ncase when raw.customer_state='ES' then sum(raw.payment_value) else 0 end as ES,\ncase when raw.customer_state='BA' then sum(raw.payment_value) else 0 end as BA,\ncase when raw.customer_state='MA' then sum(raw.payment_value) else 0 end as MA,\ncase when raw.customer_state='MS' then sum(raw.payment_value) else 0 end as MS,\ncase when raw.customer_state='CE' then sum(raw.payment_value) else 0 end as CE,\ncase when raw.customer_state='DF' then sum(raw.payment_value) else 0 end as DF,\ncase when raw.customer_state='RN' then sum(raw.payment_value) else 0 end as RN,\ncase when raw.customer_state='PE' then sum(raw.payment_value) else 0 end as PE,\ncase when raw.customer_state='MT' then sum(raw.payment_value) else 0 end as MT,\ncase when raw.customer_state='AM' then sum(raw.payment_value) else 0 end as AM,\ncase when raw.customer_state='AP' then sum(raw.payment_value) else 0 end as AP,\ncase when raw.customer_state='AL' then sum(raw.payment_value) else 0 end as AL,\ncase when raw.customer_state='RO' then sum(raw.payment_value) else 0 end as RO,\ncase when raw.customer_state='PB' then sum(raw.payment_value) else 0 end as PB,\ncase when raw.customer_state='TO' then sum(raw.payment_value) else 0 end as TOs,\ncase when raw.customer_state='PI' then sum(raw.payment_value) else 0 end as PI,\ncase when raw.customer_state='AC' then sum(raw.payment_value) else 0 end as AC,\ncase when raw.customer_state='SE' then sum(raw.payment_value) else 0 end as SE,\ncase when raw.customer_state='RR' then sum(raw.payment_value) else 0 end as RR\nfrom \n(select\ndelivery_details.customer_unique_id,\ndelivery_details.customer_id,\ndelivery_details.order_id,\ndelivery_details.customer_city,\ndelivery_details.customer_state,\ndelivery_details.order_status,\ndelivery_details.order_delivered_customer_date,\npayment_details.payment_value\nfrom\n(select\nc.customer_unique_id,\nc.customer_id,\no.order_id,\nc.customer_city,\nc.customer_state,\no.order_status,\no.order_delivered_customer_date\nfrom olist_customers c\njoin olist_orders o on c.customer_id=o.customer_id\ngroup by 1,2,3\norder by 1,2,3 asc) delivery_details\n\njoin (select\no.customer_id,\no.order_id,\no.order_status,\no.order_delivered_customer_date,\np.payment_value\n\nfrom olist_orders o\njoin olist_order_payments p\non o.order_id=p.order_id\ngroup by 1,2,3,4,5) payment_details\non delivery_details.customer_id=payment_details.customer_id\nand delivery_details.order_id=payment_details.order_id \nand delivery_details.order_status=payment_details.order_status\nand delivery_details.order_delivered_customer_date=payment_details.order_delivered_customer_date\ngroup by 1,2,3,4,5,6,7,8\norder by 1,2,3,4,5,6,7,8 asc) raw\ngroup by 1,2,3\norder by 1,2,3 asc) result\ngroup by 1\norder by 1 asc\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","22c3416d":"## Query 6:- Top  Successfull sellers in terms of no of goods sold ,total revenue and customer_count,selleer with highest 5 star ratings\n\n\nsql='''\nselect * from \n(\nselect\n'Seller with most of unique customers :-' as Description,raw.seller_id as Seller_ID,\ncount(distinct customer_unique_id) as Value\nfrom (\nselect\nc.customer_id,\nc.customer_unique_id,\ns.seller_id,\no.order_id,\no.order_status,\ni.order_item_id,\ni.product_id,\ni.price,\ni.freight_value,\ns.seller_city,\ns.seller_state,\nc.customer_city,\nc.customer_state,\no.order_delivered_customer_date\n\nfrom olist_orders o\njoin olist_customers c \non o.customer_id=c.customer_id\njoin olist_order_items i \non o.order_id=i.order_id\njoin olist_sellers s \non i.seller_id=s.seller_id\nwhere order_status='delivered'\ngroup by 1,2,3,5,6,7,8,9,10,11,12,13\n) raw\n)\nunion all\n\nselect * from (\nselect\n'Seller with highest Profit :-' as Description,raw.seller_id as Seller_ID,\nsum(raw.profit) as Value\nfrom (\nselect\nc.customer_id,\nc.customer_unique_id,\ns.seller_id,\no.order_id,\no.order_status,\ni.order_item_id,\ni.product_id,\ni.price,\ni.freight_value,\ni.price-i.freight_value as profit,\ns.seller_city,\ns.seller_state,\nc.customer_city,\nc.customer_state,\no.order_delivered_customer_date\n\nfrom olist_orders o\njoin olist_customers c \non o.customer_id=c.customer_id\njoin olist_order_items i \non o.order_id=i.order_id\njoin olist_sellers s \non i.seller_id=s.seller_id\nwhere order_status='delivered'\ngroup by 1,2,3,5,6,7,8,9,10,11,12,13\n) raw\n)\n\nunion all\n\nselect * from (\nselect\n'Seller with most of unique orders :-' as Description,raw.seller_id as Seller_ID,\ncount(distinct order_id) as Value\nfrom (\nselect\nc.customer_id,\nc.customer_unique_id,\ns.seller_id,\no.order_id,\no.order_status,\ni.order_item_id,\ni.product_id,\ni.price,\ni.freight_value,\ns.seller_city,\ns.seller_state,\nc.customer_city,\nc.customer_state,\no.order_delivered_customer_date\n\nfrom olist_orders o\njoin olist_customers c \non o.customer_id=c.customer_id\njoin olist_order_items i \non o.order_id=i.order_id\njoin olist_sellers s \non i.seller_id=s.seller_id\nwhere order_status='delivered'\ngroup by 1,2,3,5,6,7,8,9,10,11,12,13\n) raw\n)\n\nunion all\n\nselect * from (\nselect\n'Seller with most 5 star ratings :-' as Description,raw.seller_id as Seller_ID,\ncount(raw.review_score) as Value\nfrom (\nselect\nc.customer_id,\nc.customer_unique_id,\ns.seller_id,\no.order_id,\no.order_status,\nr.review_score,\ni.order_item_id,\ni.product_id,\ni.price,\ni.freight_value,\ns.seller_city,\ns.seller_state,\nc.customer_city,\nc.customer_state,\no.order_delivered_customer_date\n\nfrom olist_orders o\njoin olist_customers c \non o.customer_id=c.customer_id\njoin olist_order_items i \non o.order_id=i.order_id\njoin olist_sellers s \non i.seller_id=s.seller_id\njoin olist_order_reviews r on\no.order_id=r.order_id\nwhere order_status='delivered'\ngroup by 1,2,3,5,6,7,8,9,10,11,12,13\nhaving r.review_score>4\n) raw\n)\n\n\n\n\n\n\n\n\ngroup by 1\norder by 1 desc\nlimit 4\n\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","00885242":"## Query 7:-  ## sDelivery Success Rate across state\n\nsql='''\n\nselect\nc.customer_state,\nstrftime('%Y',o.order_delivered_customer_date) as Year,\ncount(distinct c.customer_city) as Total_Cities_Delivered,\ncount(c.customer_unique_id) as Total_Customers,\nsum(case when o.order_status='delivered' then 1 else 0 end) as Delivered,\nsum(case when o.order_status!='delivered' then 1 else 0 end) as Not_Delivered,\n100-100*round(round(sum(case when o.order_status!='delivered' then 1 else 0 end),4)\/round(count(o.order_status),4),4) as Delivery_Success_Rate,\n100*round(round(sum(case when o.order_status!='delivered' then 1 else 0 end),4)\/round(count(o.order_status),4),4) as Delivery_Failure_Rate\nfrom olist_customers c\njoin olist_orders o on o.customer_id=c.customer_id\ngroup by c.customer_state,strftime('%Y',o.order_delivered_customer_date)\norder by c.customer_state,strftime('%Y',o.order_delivered_customer_date) asc\n\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(100)","69dcfb2c":"## Query 8:-  ## Preferred form of payment for differenct categories\n\nsql='''\nselect \nfinal.product_category_name as Category_Name,\ncase max(final.Credit_Card_Payment, final.Boleto_Payment,final.Voucher_Payment,final.Debit_Card_Payment,final.Not_defined_Payment) \n\nwhen final.Credit_Card_Payment then 'Credit_Card_Payment'\nwhen final.Boleto_Payment then 'Boleto_Payment'\nwhen final.Voucher_Payment then 'Voucher_Payment'\nwhen final.Debit_Card_Payment then 'Debit_Card_Payment'\nwhen final.Not_defined_Payment then 'Not_defined_Payment'\nend as Preferred_option,\ncase max(final.Credit_Card_Payment, final.Boleto_Payment,final.Voucher_Payment,final.Debit_Card_Payment,final.Not_defined_Payment) \n\nwhen final.Credit_Card_Payment then max(final.Credit_Card_Payment)\nwhen final.Boleto_Payment then max(final.Boleto_Payment)\nwhen final.Voucher_Payment then max(final.Voucher_Payment)\nwhen final.Debit_Card_Payment then max(final.Debit_Card_Payment)\nwhen final.Not_defined_Payment then max(final.Not_defined_Payment)\nend as Total_Payments\nfrom \n(select\nresult.product_category_name,\nmax(result.Credit_Card_Payment) as Credit_Card_Payment,\nmax(result.Boleto_Payment) as Boleto_Payment,\nmax(result.Voucher_Payment) as Voucher_Payment,\nmax(result.Debit_Card_Payment) as Debit_Card_Payment,\nmax(result.Not_defined_Payment) as Not_defined_Payment\nfrom (\nselect\nraw.product_category_name,\ncase when raw.payment_type='credit_card' then count(raw.order_id) else 0 end as Credit_Card_Payment,\ncase when raw.payment_type='boleto' then count(raw.order_id) else 0 end as Boleto_Payment,\ncase when raw.payment_type='voucher' then count(raw.order_id) else 0 end as Voucher_Payment,\ncase when raw.payment_type='debit_card' then count(raw.order_id) else 0 end as Debit_Card_Payment,\ncase when raw.payment_type='not_defined' then count(raw.order_id) else 0 end as Not_defined_Payment\nfrom (\nselect \np.product_category_name,\np.order_id,\np.payment_type\nfrom olist_order_payments p\njoin olist_orders o on o.order_id=p.order_id\njoin olist_order_items i on i.order_id=o.order_id\njoin olist_products_dataset p on i.product_id=p.product_id \ngroup by 1,2,3) raw\ngroup by 1\norder by 1 asc ) result\ngroup by 1) final\ngroup by 1\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(100)","0b70fa1a":"## Query 9:-  ## Preferred form of payment for differenct categories\n\nsql='''\nselect * from (\nSelect\na.geolocation_city as city_one,\nlag(a.geolocation_city) over(order by a.geolocation_state,a.geolocation_city,a.geolocation_zip_code_prefix,a.geolocation_lat,a.geolocation_lng asc) as city_two,\na.distance_between_two_cities- lag(a.distance_between_two_cities) over(order by a.geolocation_state,a.geolocation_city,a.geolocation_zip_code_prefix,a.geolocation_lat,a.geolocation_lng asc) as Distance\n\nfrom (\nSELECT *,(6371 * acos( \n                cos( radians(geolocation_lat) ) \n              * cos( radians(lag(geolocation_lat) over(order by geolocation_state,geolocation_city,geolocation_zip_code_prefix,geolocation_lat,geolocation_lng asc) ) ) \n              * cos( radians(lag(geolocation_lng) over(order by geolocation_state,geolocation_city,geolocation_zip_code_prefix,geolocation_lat,geolocation_lng asc) ) - radians(geolocation_lng) ) \n              + sin( radians(lag(geolocation_lng) over(order by geolocation_state,geolocation_city,geolocation_zip_code_prefix,geolocation_lat,geolocation_lng asc)) ) \n              * sin( radians(lag(geolocation_lat) over(order by geolocation_state,geolocation_city,geolocation_zip_code_prefix,geolocation_lat,geolocation_lng asc) ) )\n                ) ) as distance_between_two_cities from olist_geolocation\n) a\ngroup by 1\n) result\ngroup by 1,2\norder by result.Distance desc\n''';\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","f7a9263b":"## DataBase Schema\n![image.png](attachment:ec041364-a5f9-437e-94f0-3550facf3f3f.png)","b5399865":"## Hey Kaggle Fam :)! The below is an exhaustive SQL EDA of the Brazillian E-Commerce Dataset,\n\n## If you'd like a buddy mentor for SQL and Data Analytics i'm just a ping away :)"}}