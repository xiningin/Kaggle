{"cell_type":{"26bca2e7":"code","881b19ce":"code","4cedc20e":"code","0dfbcf7e":"code","01d21aa0":"code","8e4f6d82":"code","79e7c02d":"code","ed1ae124":"code","14496185":"code","cf47af72":"code","414b92e7":"code","a0c99c50":"code","d6bbf690":"code","3bcafedc":"code","f78a51ed":"code","ef59ed41":"code","46d166b3":"code","0ba604b6":"code","b22e6209":"code","51d1882c":"code","1d250e04":"code","1b397f31":"code","8d0925d1":"code","a3ee9c6e":"code","ab1ab77c":"code","4d17ecec":"code","5eb62027":"markdown","ccb87f9c":"markdown","edb397d5":"markdown","b672f372":"markdown","1428b48b":"markdown","8ae087d8":"markdown","722672e4":"markdown","d61268d6":"markdown","6f79dc8b":"markdown","66083dff":"markdown","7aa64a06":"markdown","7ca663a2":"markdown"},"source":{"26bca2e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport os\nfrom bokeh.io import show, output_file\nfrom bokeh.models import ColumnDataSource, Legend, LegendItem, Scatter\nfrom bokeh.plotting import figure, output_file, show, output_notebook\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.core.properties import value\nfrom bokeh.palettes import Spectral10, Category20, Category20_17, inferno, magma, viridis\nimport matplotlib.pyplot as plt\nfrom bokeh.transform import jitter\n\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","881b19ce":"dtype = {'DayOfWeek': np.uint8, 'DayofMonth': np.uint8, 'Month': np.uint8 , \n         'Cancelled': np.uint8, 'Year': np.uint16, 'FlightNum': np.uint16 , \n         'Distance': np.uint16, 'UniqueCarrier': str, 'CancellationCode': str, \n         'Origin': str, 'Dest': str, 'ArrDelay': np.float16, \n         'DepDelay': np.float16, 'CarrierDelay': np.float16, \n         'WeatherDelay': np.float16, 'NASDelay': np.float16, \n         'SecurityDelay': np.float16, 'LateAircraftDelay': np.float16, \n         'DepTime': np.float16}","4cedc20e":"path = '..\/input\/btstats\/2008.csv'\nflights_df = pd.read_csv(path, usecols=dtype.keys(), dtype=dtype)","0dfbcf7e":"flights_df.head()","01d21aa0":"flights_df = flights_df[np.isfinite(flights_df['DepTime'])]\nflights_df['DepHour'] = flights_df['DepTime'] \/\/ 100\nflights_df['DepHour'].replace(to_replace=24, value=0, inplace=True)\nflights_df['DepMin'] = flights_df['DepTime'] - flights_df['DepHour']*100","8e4f6d82":"flights_df['DepHour'] = flights_df['DepHour'].apply(lambda f: format(f, '.0f'))\nflights_df['DepMin'] = flights_df['DepMin'].apply(lambda f: format(f, '.0f'))","79e7c02d":"flights_df['Date'] = pd.to_datetime(flights_df.rename(columns={'DayofMonth': 'Day'})[['Year', 'Month', 'Day']])\n\nflights_df['DateTime'] = pd.to_datetime(flights_df.rename(columns={'DayofMonth': 'Day', 'DepHour': 'Hour', 'DepMin':'Minute'})\\\n                                        [['Year', 'Month', 'Day', 'Hour', 'Minute']])","ed1ae124":"num_flights_by_date = flights_df.groupby('Date').size().reset_index()\nnum_flights_by_date.columns = ['Date', 'Count']","14496185":"TOOLS = \"pan, wheel_zoom, box_zoom, box_select,reset, save\" # the tools you want to add to your graph\nsource = ColumnDataSource(num_flights_by_date) # data for the graph","cf47af72":"# Graph has date on the x-axis\np = figure(title=\"Graph 1: Number of flights per day in 2008\", x_axis_type='datetime',tools = TOOLS)\n\np.line(x='Date', y='Count', source=source) #build a line chart\np.xaxis.axis_label = 'Date'\np.yaxis.axis_label = 'Number of flights'\n\np.xgrid.grid_line_color = None\n\n# add a hover tool and show the date in date time format\nhover = HoverTool()\nhover.tooltips=[\n    ('Date', '@Date{%F}'),\n    ('Count', '@Count')\n]\nhover.formatters = {'Date': 'datetime'}\np.add_tools(hover)\noutput_notebook() # show the output in jupyter notebook\nshow(p)","414b92e7":"# for the sake of image clarity, let us take only a couple of months data\ndf = flights_df[flights_df['Date']<'03-01-2008']\nct = pd.crosstab(df.Date, df.UniqueCarrier)\ncarriers = ct.columns.values #list of the carriers","a0c99c50":"ct = ct.reset_index() # we want to make the date a column\nct['Date'] = ct['Date'].astype(str) # to show it in the x-axis","d6bbf690":"# Graph has date on the x-axis \n\nsource = ColumnDataSource(data=ct) # data for the graph\nDate = source.data['Date']\n\n#legend = Legend(items=[LegendItem(legend_data)], position=(0,-30))\n\n# x_range : specifies the x-axis values, in our case Date\np = figure(x_range=Date, title=\"Graph 2: Flights in the first 2 months of 2008, by carrier\",\\\n           tools = TOOLS, width=750)\n\nrenderers = p.vbar_stack(carriers, x='Date', source=source, width=0.5, color=magma(20), \\\n             legend=[value(x) for x in carriers])\n\np.xaxis.axis_label = 'Date'\np.yaxis.axis_label = 'Number of flights'\n\np.xgrid.grid_line_color = None\n\np.y_range.start = 0\np.y_range.end = 25000 #to make room for the legend\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.axis.minor_tick_line_color = None\np.outline_line_color = None\n\n#add hover\nhover = HoverTool()\nhover.tooltips=[\n    ('Date', '@Date{%F}'),\n    ('Carrier', '$name'), #$name provides data from legend\n    ('Count', '@$name') #@$name gives the value corresponding to the legend\n]\nhover.formatters = {'Date': 'datetime'}\np.add_tools(hover)\np.xaxis.major_label_orientation = math.pi\/2 #so that the labels do not come on top of each other\n\n#move legend outside the plot so that it does not interfere with the data\n# creating external legend did not work\n# so doing a roundabout of creating an intenal legend, copying it over to a new legend\n# placing it on right and nulling te internal legend\nnew_legend = p.legend[0]\np.legend[0].plot = None\np.add_layout(new_legend, 'right')\np.legend.click_policy=\"hide\"\n\noutput_notebook()\nshow(p)","3bcafedc":"# Let us next plot a bubble chart of the flights between 2 cities.\n\ndf = flights_df[['Origin', 'Dest', 'UniqueCarrier', 'Distance']]\ndf['Flight'] = df['Origin']+'-'+df['Dest'] # new variable for flight","f78a51ed":"df.head()","ef59ed41":"#find number of flights  between any 2 cities and sort them\ndf_by_flight = df.groupby(['Flight']).agg({'Flight': 'count'}).sort_values(('Flight'), ascending=False)","46d166b3":"df_by_flight.head()","0ba604b6":"df_by_flight.columns=['Count']\ndf_by_flight = df_by_flight.reset_index()\n\n#merge it back with df to get other columns of interest\ndf_new = df_by_flight.merge(df, on='Flight')","b22e6209":"df_new = df_new.drop_duplicates(subset=['Flight'])","51d1882c":"df_new.head()","1d250e04":"df_new.describe()","1b397f31":"df_new = df_new.drop(columns=['Flight', 'UniqueCarrier', 'Distance'])","8d0925d1":"df_new.head()","a3ee9c6e":"df_new = df_new[0:100]","ab1ab77c":"df_new['Count_gr'] = df_new['Count']\/5000 #for the sake of charting","4d17ecec":"source = ColumnDataSource(data=df_new)\nOrigin_l = df_new['Origin'].unique()\nDest_l = df_new['Dest'].unique()\n\np = figure(title='Graph 3: Flights between 2 cities (top 100 values only)',x_range=Origin_l, y_range=Dest_l, tools=TOOLS, width=750)\n\np.circle(x='Origin', y='Dest', radius='Count_gr',\n          fill_color='purple', fill_alpha=0.4, source=source,\n          line_color=None)\n\np.x_range.range_padding = 0.5\np.y_range.range_padding = 0.5\n\n#add hover\nhover = HoverTool()\nhover.tooltips=[\n    ('From', '@Origin'),\n    ('To', '@Dest'),\n    ('Count', '@Count') #@$name gives the value corresponding to the legend\n]\n\np.add_tools(hover)\np.xaxis.major_label_orientation = math.pi\/2\n\noutput_notebook()\nshow(p)","5eb62027":"**Learning:**\n\n* How to present categorical data for a scatter plot\n* Customizable parameters","ccb87f9c":"> The above shows that 75 percentile is at 1683 flights which is 1\/15th of 13299 (total rows = 5356). We will plot only the top 100 rows of data.","edb397d5":"**Graph 1: We will plot the flights per day for the entire year (2008) **\n\nChoose only those columns we are interested in.","b672f372":"Let us build 2 new fields - date and date time of the flight. Then let us get the flights per day for the entire year and plot it with bokeh.","1428b48b":"**References: **\n\n[1] Bokeh documentation for handling categorical data\nhttps:\/\/bokeh.pydata.org\/en\/latest\/docs\/user_guide\/categorical.html\n\n[2] Hover for Stacked Bar Chart\n(https:\/\/github.com\/bokeh\/bokeh\/blob\/16e87ed63ca1aecaa42e93293f32d936685dcd3e\/sphinx\/source\/docs\/user_guide\/examples\/categorical_bar_stacked_hover.py)\n\n[3] Visualization with Bokeh (https:\/\/programminghistorian.org\/en\/lessons\/visualizing-with-bokeh)\n\n[4] Legend outside chart area (https:\/\/stackoverflow.com\/questions\/48240867\/how-can-i-make-legend-outside-plot-area-with-stacked-bar)\n \n","8ae087d8":"**Graph 3: We will show the flights between 2 cities as a bubble chart.**","722672e4":"**Learning:**\n\n* How to create a stacked bar chart using Bokeh\n* Choose the color palette for the chart\n* How to zoom in and out with your mouse (Wheel Zoom)\n* Hover Data  - shows values corresponding to the data\n* X-axis label formatting\n* Place legend outside the chart area","d61268d6":"> For the purpose of this tutorial, we will use the 2008 USA Flight Statistics data that has been used in the mlcourse.ai course.","6f79dc8b":"Let us eliminate all flights with NaN departure time and create 2 new fields for departure hour and minute. Let us also remove the trailing zero's after the newly created fields.","66083dff":"**Learning:**\n\n* How to create your FIRST interactive plot using Bokeh\n* Source data creation\n* Choose the different tools you want to show\n* Show corresponding data on hover","7aa64a06":"> The purpose of this tutorial is to give an overview of how Bokeh can be used to generate reasonably good looking graphs. While most of how to go about this is available all over the world wide web in a distributed manner, hope all that research can be presented in a collective manner here.\n","7ca663a2":"**Graph2: We will try to show the Carriers that accounted for the flights as a stacked bar chart.**"}}