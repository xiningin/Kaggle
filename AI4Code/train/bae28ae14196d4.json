{"cell_type":{"e910b9a5":"code","6f3e5605":"code","f9eafef8":"code","7fb658a0":"code","d0fc312a":"code","71471a0b":"code","20e12d6f":"code","9687522d":"code","541d91d6":"code","c9078378":"code","cb1bbedc":"code","882571ec":"code","8bcc5ee3":"code","cfa5f240":"code","76ae1af6":"code","67744d0e":"code","dc387dc8":"code","6f94bfba":"code","0b47fc7b":"code","46701e0c":"code","28ad14c5":"code","c1f988e9":"code","0e8b50d9":"code","21fdde44":"code","3e8bf11e":"code","3fd31978":"code","cf7518db":"code","9a063d87":"code","ab65e89d":"code","db9ffdb1":"code","58d218e9":"code","c9983f9e":"code","3909de64":"code","725f45eb":"code","265c5579":"code","9a12d9ca":"code","173bc991":"code","13171290":"code","b3633cab":"code","87e6bf25":"code","197e16f9":"code","324cbf27":"code","f9913de0":"code","5088cd0c":"code","0b5ba3d7":"code","94b598c1":"code","8ce980f8":"code","2b747fb3":"code","5df22934":"code","bddfe552":"code","cfe90bf9":"code","0e910de7":"code","1106944f":"code","0e089954":"code","c7755add":"code","3acf79d5":"code","4a234f7b":"code","b0defdfd":"code","6326ce8b":"code","b35575cf":"code","30425899":"code","15e453ff":"code","86d8589b":"code","35681aec":"code","ce71c80c":"code","5752acc4":"code","ef978d26":"code","b54bbc9e":"code","1028d4de":"code","797cb42a":"code","1dee4f59":"code","6624da88":"code","7b5bee69":"code","7cfbe62d":"code","28c3722c":"code","77734e0d":"code","d34e0057":"code","fa4de617":"code","a502349d":"code","7898d514":"code","afd3b506":"code","638f3571":"code","5ed9c233":"code","faa69985":"code","1aacc0d1":"code","83c7b94e":"code","d49021ea":"code","b40524a7":"code","58e578db":"code","fab94baa":"code","47c1a3c5":"code","4fb192e8":"code","494c0535":"code","a4782209":"code","4b3fa997":"code","d73b0208":"markdown","19c4485a":"markdown","af7b0a8e":"markdown","9b2b65fb":"markdown","033c0b2b":"markdown","c738757d":"markdown","d092aaf6":"markdown","a9f595c3":"markdown","32711434":"markdown","52239a0e":"markdown","d1913c2f":"markdown","9c3e9911":"markdown","a507645e":"markdown","b76dcf89":"markdown","bea6407e":"markdown"},"source":{"e910b9a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f3e5605":"import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline ","f9eafef8":"train_df = pd.read_csv('..\/input\/data-science-bowl-2019\/train.csv')\ntrain_df.head()","7fb658a0":"train_df.shape","d0fc312a":"test_df = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv')\ntest_df.head()","71471a0b":"test_df.shape","20e12d6f":"train_labels_df = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')\ntrain_labels_df.head()","9687522d":"train_labels_df.shape","541d91d6":"specs_df = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')\npd.set_option('max_colwidth', 150)\nspecs_df.head()","c9078378":"specs_df.shape","cb1bbedc":"sample_submission_df = pd.read_csv('..\/input\/data-science-bowl-2019\/sample_submission.csv')\nsample_submission_df.head()","882571ec":"sample_submission_df.shape","8bcc5ee3":"print(f\"train installation id: {train_df.installation_id.nunique()}\")\nprint(f\"test installation id: {test_df.installation_id.nunique()}\")\nprint(f\"test & submission installation ids identical: {set(test_df.installation_id.unique()) == set(sample_submission_df.installation_id.unique())}\")","cfa5f240":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","76ae1af6":"missing_data(train_df)","67744d0e":"missing_data(test_df)","dc387dc8":"missing_data(train_labels_df)","6f94bfba":"missing_data(specs_df)","0b47fc7b":"for column in train_df.columns.values:\n    print(f\"[train] Unique values of `{column}` : {train_df[column].nunique()}\")","46701e0c":"for column in test_df.columns.values:\n    print(f\"[test] Unique values of `{column}`: {test_df[column].nunique()}\")","28ad14c5":"def plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()  ","c1f988e9":"plot_count('title', 'title (first most frequent 20 values - train)', train_df, size=4)","0e8b50d9":"plot_count('title', 'title (first most frequent 20 values - test)', test_df, size=4)","21fdde44":"print(f\"Title values (train): {train_df.title.nunique()}\")\nprint(f\"Title values (test): {test_df.title.nunique()}\")","3e8bf11e":"plot_count('type', 'type - train', train_df, size=2)","3fd31978":"plot_count('type', 'type - test', test_df, size=2)","cf7518db":"plot_count('world', 'world - train', train_df, size=2)","9a063d87":"plot_count('world', 'world - test', test_df, size=2)","ab65e89d":"plot_count('event_code', 'event_code - test', train_df, size=4)","db9ffdb1":"plot_count('event_code', 'event_code - test', test_df, size=4)","58d218e9":"for column in train_labels_df.columns.values:\n    print(f\"[train_labels] Unique values of {column} : {train_labels_df[column].nunique()}\")","c9983f9e":"plot_count('title', 'title - train_labels', train_labels_df, size=3)","3909de64":"plot_count('accuracy', 'accuracy - train_labels', train_labels_df, size=4)","725f45eb":"plot_count('accuracy_group', 'accuracy_group - train_labels', train_labels_df, size=2)","265c5579":"plot_count('num_correct', 'num_correct - train_labels', train_labels_df, size=2)","9a12d9ca":"plot_count('num_incorrect', 'num_incorrect - train_labels', train_labels_df, size=4)","173bc991":"for column in specs_df.columns.values:\n    print(f\"[specs] Unique values of `{column}`: {specs_df[column].nunique()}\")","13171290":"sample_train_df = train_df.sample(100000)","b3633cab":"sample_train_df.head()","87e6bf25":"sample_train_df.iloc[0].event_data","197e16f9":"sample_train_df.iloc[1].event_data","324cbf27":"%%time\nextracted_event_data = pd.io.json.json_normalize(sample_train_df.event_data.apply(json.loads))","f9913de0":"print(f\"Extracted data shape: {extracted_event_data.shape}\")","5088cd0c":"extracted_event_data.head(10)","0b5ba3d7":"missing_data(extracted_event_data)","94b598c1":"def existing_data(data):\n    total = data.isnull().count() - data.isnull().sum()\n    percent = 100 - (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    tt = pd.DataFrame(tt.reset_index())\n    return(tt.sort_values(['Total'], ascending=False))","8ce980f8":"stat_event_data = existing_data(extracted_event_data)","2b747fb3":"plt.figure(figsize=(10, 10))\nsns.set(style='whitegrid')\nax = sns.barplot(x='Percent', y='index', data=stat_event_data.head(40), color='blue')\nplt.title('Most frequent features in event data')\nplt.ylabel('Features')","5df22934":"stat_event_data[['index', 'Percent']].head(20)","bddfe552":"specs_df.args[0]","cfe90bf9":"specs_args_extracted = pd.DataFrame()\nfor i in range(0, specs_df.shape[0]): \n    for arg_item in json.loads(specs_df.args[i]) :\n        new_df = pd.DataFrame({'event_id': specs_df['event_id'][i],\\\n                               'info':specs_df['info'][i],\\\n                               'args_name': arg_item['name'],\\\n                               'args_type': arg_item['type'],\\\n                               'args_info': arg_item['info']}, index=[i])\n        specs_args_extracted = specs_args_extracted.append(new_df)","0e910de7":"print(f\"Extracted args from specs: {specs_args_extracted.shape}\")","1106944f":"specs_args_extracted.head(5)","0e089954":"tmp = specs_args_extracted.groupby(['event_id'])['info'].count()\ndf = pd.DataFrame({'event_id':tmp.index, 'count': tmp.values})\nplt.figure(figsize=(6,4))\nsns.set(style='whitegrid')\nax = sns.distplot(df['count'],kde=True,hist=False, bins=40)\nplt.title('Distribution of number of arguments per event_id')\nplt.xlabel('Number of arguments'); plt.ylabel('Density'); plt.show()","c7755add":"plot_count('args_name', 'args_name (first 20 most frequent values) - specs', specs_args_extracted, size=4)","3acf79d5":"plot_count('args_type', 'args_type - specs', specs_args_extracted, size=3)","4a234f7b":"plot_count('args_info', 'args_info (first 20 most frequent values) - specs', specs_args_extracted, size=4)","b0defdfd":"def extract_time_features(df):\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['date'] = df['timestamp'].dt.date\n    df['month'] = df['timestamp'].dt.month\n    df['hour'] = df['timestamp'].dt.hour\n    df['year'] = df['timestamp'].dt.year\n    df['dayofweek'] = df['timestamp'].dt.dayofweek\n    df['weekofyear'] = df['timestamp'].dt.weekofyear\n    df['dayofyear'] = df['timestamp'].dt.dayofyear\n    df['quarter'] = df['timestamp'].dt.quarter\n    df['is_month_start'] = df['timestamp'].dt.is_month_start\n    return df","6326ce8b":"train_df = extract_time_features(train_df)","b35575cf":"train_df.head()","30425899":"plot_count('year', 'year - year', train_df, size=1)","15e453ff":"plot_count('month', 'month - train', train_df, size=1)","86d8589b":"plot_count('hour', 'hour -  train', train_df, size=4)","35681aec":"plot_count('dayofweek', 'dayofweek - train', train_df, size=2)","ce71c80c":"plot_count('weekofyear', 'weekofyear - train', train_df, size=2)","5752acc4":"plot_count('is_month_start', 'is_month_start - train', train_df, size=1)","ef978d26":"numerical_columns = ['game_time', 'month', 'dayofweek', 'hour']\ncategorical_columns = ['type', 'world']\n\ncomp_train_df = pd.DataFrame({'installation_id': train_df['installation_id'].unique()})\ncomp_train_df.set_index('installation_id', inplace = True)","b54bbc9e":"def get_numeric_columns(df, column):\n    df = df.groupby('installation_id').agg({f'{column}': ['mean', 'sum', 'min', 'max', 'std', 'skew']})\n    df[column].fillna(df[column].mean(), inplace = True)\n    df.columns = [f'{column}_mean', f'{column}_sum', f'{column}_min', f'{column}_max', f'{column}_std', f'{column}_skew']\n    return df","1028d4de":"for i in numerical_columns:\n    comp_train_df = comp_train_df.merge(get_numeric_columns(train_df, i), left_index = True, right_index = True)","797cb42a":"print(f\"comp_train shape: {comp_train_df.shape}\")","1dee4f59":"comp_train_df.head()","6624da88":"# get the mode of the title\nlabels_map = dict(train_labels_df.groupby('title')['accuracy_group'].agg(lambda x:x.value_counts().index[0]))\n# merge target\nlabels = train_labels_df[['installation_id', 'title', 'accuracy_group']]\n# replace title with the mode\nlabels['title'] = labels['title'].map(labels_map)\n# join train with labels\ncomp_train_df = labels.merge(comp_train_df, on = 'installation_id', how = 'left')\nprint('We have {} training rows'.format(comp_train_df.shape[0]))","7b5bee69":"comp_train_df.head()","7cfbe62d":"print(f\"comp_train_df shape: {comp_train_df.shape}\")\nfor feature in comp_train_df.columns.values[3:20]:\n    print(f\"{feature} unique values: {comp_train_df[feature].nunique()}\")","28c3722c":"plot_count('title', 'title - compound train', comp_train_df)","77734e0d":"plot_count('accuracy_group', 'accuracy_group - compound train', comp_train_df, size=2)","d34e0057":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of log(`game time mean`) values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(np.log(red_comp_train_df['game_time_mean']), kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","fa4de617":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of log(`game time std`) values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(np.log(red_comp_train_df['game_time_std']), kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","a502349d":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `game time skew` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['game_time_skew'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","7898d514":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `hour mean` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['hour_mean'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","afd3b506":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `hour std` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['hour_std'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","638f3571":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `hour skew` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['hour_skew'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","5ed9c233":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `month mean` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['month_mean'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","faa69985":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `month std` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['month_std'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","1aacc0d1":"plt.figure(figsize=(16,6))\n_titles = comp_train_df.title.unique()\nplt.title(\"Distribution of `month skew` values (grouped by title) in the comp train\")\nfor _title in _titles:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.title == _title]\n    sns.distplot(red_comp_train_df['month_skew'], kde=True, label=f'title: {_title}')\nplt.legend()\nplt.show()","83c7b94e":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of log(`game time mean`) values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(np.log(red_comp_train_df['game_time_mean']), kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","d49021ea":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of log(`game time std`) values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(np.log(red_comp_train_df['game_time_std']), kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","b40524a7":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `game time skew` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['game_time_skew'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","58e578db":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `hour mean` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['hour_mean'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","fab94baa":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `hour std` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['hour_std'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","47c1a3c5":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `hour skew` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['hour_skew'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","4fb192e8":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `month mean` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['month_mean'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","494c0535":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `month std` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['month_std'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","a4782209":"plt.figure(figsize=(16,6))\n_accuracy_groups = comp_train_df.accuracy_group.unique()\nplt.title(\"Distribution of `month skew` values (grouped by accuracy group) in the comp train\")\nfor _accuracy_group in _accuracy_groups:\n    red_comp_train_df = comp_train_df.loc[comp_train_df.accuracy_group == _accuracy_group]\n    sns.distplot(red_comp_train_df['month_skew'], kde=True, label=f'accuracy group= {_accuracy_group}')\nplt.legend()\nplt.show()","4b3fa997":"sample_submission_df['accuracy_group'].value_counts(normalize=True)","d73b0208":"**Merged data distribution**\n\nLet's merge train and train_labels.\n\nWe define a function to extract time features. We will apply this function for both train and test datasets.","19c4485a":"**Specs**","af7b0a8e":"## **Extract features from specs\/args**","9b2b65fb":"Let's check the statistics of the missing values in these columns.","033c0b2b":"**Train labels**","c738757d":"ordered by percent of existing data (descending).","d092aaf6":"## **Missing values**","a9f595c3":"**Train & Test**","32711434":"We modify the missing_data function to order the most frequent encountered event data features (newly created function called existing_data).","52239a0e":"We have 17K different installation_id in train and 1K in test sets","d1913c2f":"## **Extract features from train\/event_data**\n\nWe will parse a subset of train_df to extract features from event_data. We only extract data from 100K random sampled rows. This should be enough to get a good sample of the content.","9c3e9911":"Let's see the distribution of the number of arguments for each event_id.","a507645e":"We use json package to normalize the json; we will create one column for each key; the value in the column will be the value associated to the key in the json. The extracted data columns will be quite sparse.","b76dcf89":"There are no missing values in the datasets.","bea6407e":"Here we define the numerical columns and the categorical columns. We will use these to calculate the aggregated functions for the merge."}}