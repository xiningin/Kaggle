{"cell_type":{"d8fdfe02":"code","583ee6c6":"code","9f18ea07":"code","5fd59f14":"code","b3796c55":"code","04a40d71":"code","33b09e48":"code","f6844ec7":"code","73b0cf36":"code","c8012f6f":"code","c3c3636e":"code","e853f35d":"code","b7e8cae3":"code","f95990f2":"code","2ff244e4":"code","15ec3db4":"code","189ac061":"code","add03562":"code","1482543c":"code","230378fc":"code","ee5ae583":"code","e82763ef":"code","ebe63ae2":"code","5ac21d76":"code","787aa458":"code","e8ae457f":"code","e9d4072f":"code","a8810327":"code","66eb43a1":"code","d515b489":"code","a12caf70":"code","677cb91a":"code","2dc8ff5f":"code","14d26250":"code","535544f0":"code","58ff422a":"code","ea5e234b":"code","a477e6ca":"code","acb37180":"code","8620f26e":"code","1238684f":"code","6801ff02":"code","0261f086":"code","db3cae6a":"code","fb0cf4c3":"code","970bd5ae":"code","aa3ed1db":"code","46ffe415":"code","5ecbdd37":"code","84e19ff9":"code","d6083f63":"code","32b05df2":"code","db164f1a":"code","3eb2a469":"code","d9538ff3":"code","231ddc7e":"code","a1a19984":"code","333ce757":"code","447fb9c6":"markdown","fe4f5cb0":"markdown","44832644":"markdown","6139bab0":"markdown","547e6aa7":"markdown","328d13b0":"markdown"},"source":{"d8fdfe02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","583ee6c6":"past_sales = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\npast_sales['Date'] = pd.to_datetime(past_sales['Date'], format='%Y-%m-%d')\npast_sales['StateHoliday'] = past_sales['StateHoliday'].replace({0:'0'})\npast_sales['month'] = past_sales['Date'].dt.strftime('%b')\nprint(past_sales.shape)\npast_sales.head()","9f18ea07":"num_cols = ['Sales', 'Customers']\npast_sales[num_cols].describe()","5fd59f14":"cat_cols = ['Store', 'DayOfWeek', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Open']\npast_sales[cat_cols].astype(object).describe(include=object)","b3796c55":"past_sales['StateHoliday'].unique()","04a40d71":"date_cols = ['Date']\npast_sales[date_cols].describe()","33b09e48":"past_sales.isna().sum()","f6844ec7":"1115 * 942, past_sales.shape[0], 1115 * 942 - past_sales.shape[0]","73b0cf36":"past_sales['Store'].value_counts()","c8012f6f":"sample = past_sales[past_sales['Store'] == 233]\nsample.set_index('Date')['Sales'].plot.line(figsize=(14,4));","c3c3636e":"sample = past_sales[past_sales['Store'] == 677]\nsample.set_index('Date')['Sales'].plot.line(figsize=(14,4));","e853f35d":"past_sales[past_sales['Open'] == 0]['Sales'].min()","b7e8cae3":"past_sales[past_sales['Open'] == 1]['Sales'].min()","f95990f2":"#past_sales[(past_sales['Open'] == 1) &\n#           (past_sales['Sales'] == 0)]","2ff244e4":"past_sales['Sales'].plot.hist()","15ec3db4":"past_sales['Sales'].skew()","189ac061":"past_sales.groupby('Store')['Sales'].mean().sort_values(ascending=False).head(200).plot.bar()","add03562":"past_sales.groupby('Store')['Sales'].mean().quantile([0,0.25,0.5,0.75,1])","1482543c":"past_sales.groupby('month')['Sales'].mean().plot.bar()","230378fc":"past_sales.groupby('Promo')['Sales'].mean().plot.bar()","ee5ae583":"past_sales.groupby('Open')['Sales'].mean().plot.bar()","e82763ef":"past_sales.groupby('StateHoliday')['Sales'].mean().plot.bar()","ebe63ae2":"past_sales.groupby('SchoolHoliday')['Sales'].mean().plot.bar()","5ac21d76":"sns.heatmap(past_sales[['Customers', 'Sales']].corr(), cmap='Blues', annot=True)","787aa458":"store = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nprint(store.shape)\nstore.head()","e8ae457f":"store['StoreType'].value_counts()","e9d4072f":"store['Assortment'].value_counts()","a8810327":"store.isna().sum() \/ store.shape[0] * 100","66eb43a1":"drop_cols = ['CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear',\n             'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval']\n#store[store['CompetitionDistance'].isna()]\nstore['CompetitionDistance'] = store['CompetitionDistance'].fillna(0)","d515b489":"past_sales_merged = pd.merge(left=past_sales, right=store.drop(drop_cols, axis=1),\n                             on='Store', how='left')\npast_sales.shape, past_sales_merged.shape","a12caf70":"#past_sales_merged.isna().sum()\npast_sales_merged.groupby('StoreType')['Sales'].mean().plot.bar()","677cb91a":"past_sales_merged.groupby('Assortment')['Sales'].mean().plot.bar()","2dc8ff5f":"past_sales_merged[['CompetitionDistance', 'Sales']].plot.scatter(x='CompetitionDistance', y='Sales')","14d26250":"past_sales_merged[['CompetitionDistance', 'Sales', 'Customers']].corr()","535544f0":"#future_sales = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\n#future_sales.head()","58ff422a":"store_avg_sales = past_sales_merged.groupby(['Store'])['Sales'].mean()\nbins = store_avg_sales.quantile([0, 0.25, 0.5, 0.75, 1]).tolist()\nbins[0] = bins[0]-1\nstore_sales_labels = pd.cut(store_avg_sales, bins=bins, labels=[0,1,2,3]).to_dict()\npast_sales_merged['store_sales_type'] = past_sales_merged['Store'].replace(store_sales_labels)\npast_sales_merged.isna().sum().sum()","ea5e234b":"past_sales_merged['dayofmonth'] = past_sales_merged['Date'].dt.day\nstore_avg_customers = past_sales_merged.groupby(['Store', 'month'])['Customers'].mean().to_frame().reset_index()\npast_sales_with_avg_customers = pd.merge(left=past_sales_merged.drop('Customers', axis=1),\n                                         right=store_avg_customers,\n                                         on=['Store', 'month'], how='left')","a477e6ca":"target_col = 'Sales'\ndrop_cols = ['Date', 'Store']\npast_sales_with_avg_customers['DayOfWeek'] = past_sales_with_avg_customers['Date'].dt.strftime('%a')\npast_sales_with_avg_customers['month'] = past_sales_with_avg_customers['Date'].dt.strftime('%b')\ndummies = pd.get_dummies(past_sales_with_avg_customers.drop(drop_cols, axis=1), drop_first=True)\ninput_cols = dummies.columns.drop(target_col)\ndummies.shape, past_sales_with_avg_customers.drop(drop_cols, axis=1).shape","acb37180":"from sklearn.model_selection import train_test_split\ntrain_x, validate_x, train_y, validate_y = train_test_split(dummies[input_cols],\n                                                            dummies[target_col],\n                                                            test_size=0.2,\n                                                            random_state=1)\ntrain_x.shape, validate_x.shape, train_y.shape, validate_y.shape","8620f26e":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler().fit(train_x)\ntrain_x_scaled = scaler.transform(train_x)\nvalidate_x_scaled = scaler.transform(validate_x)","1238684f":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","6801ff02":"from sklearn.metrics import mean_squared_error\nlinear_model = LinearRegression().fit(train_x_scaled, train_y)\nvalidate_y_pred = linear_model.predict(validate_x_scaled)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nrmse","0261f086":"#import statsmodels.api as sm\n#model = sm.OLS(train_y, pd.DataFrame(train_x_scaled, columns=train_x.columns, index=train_x.index))\n#results = model.fit()\n#print(results.summary())","db3cae6a":"'''\n\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\ngrids = {'max_depth': list(range(5, 15))}\ncv = GridSearchCV(estimator=DecisionTreeRegressor(),\n                  param_grid=grids, cv=5, return_train_score=True).fit(train_x, train_y)\n'''","fb0cf4c3":"#cv.best_params_","970bd5ae":"#df_cv = pd.DataFrame(cv.cv_results_)\n#df_cv","aa3ed1db":"'''\n\nimport matplotlib.pyplot as plt\nplt.plot(df_cv['param_max_depth'], df_cv['mean_train_score'])\nplt.plot(df_cv['param_max_depth'], df_cv['mean_test_score'])\nplt.legend(['Train score', 'Test Score'])\nplt.xlabel('Max Depth')\nplt.ylabel('R2 Score');\n'''","46ffe415":"#df_cv[['param_max_depth', 'mean_test_score', 'rank_test_score']]","5ecbdd37":"'''\n\ndt_model = DecisionTreeRegressor(max_depth=10, random_state=1).fit(train_x, train_y)\nvalidate_y_pred = dt_model.predict(validate_x)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nrmse\n'''","84e19ff9":"rf_model = RandomForestRegressor(n_estimators=50).fit(train_x, train_y)\nvalidate_y_pred = rf_model.predict(validate_x)\nrmse = mean_squared_error(validate_y, validate_y_pred, squared=False)\nrmse","d6083f63":"future_sales = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\nfuture_sales['Date'] = pd.to_datetime(future_sales['Date'], format='%Y-%m-%d')\nfuture_sales['StateHoliday'] = future_sales['StateHoliday'].replace({0:'0'})\nfuture_sales['month'] = future_sales['Date'].dt.strftime('%b')\ndrop_cols = ['CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear',\n             'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval']\nfuture_sales_merged = pd.merge(left=future_sales, right=store.drop(drop_cols, axis=1),\n                             on='Store', how='left')\nfuture_sales_merged['store_sales_type'] = future_sales_merged['Store'].replace(store_sales_labels)\n\nfuture_sales_merged['dayofmonth'] = future_sales_merged['Date'].dt.day\n\nfuture_sales_with_avg_customers = pd.merge(left=future_sales_merged,\n                                         right=store_avg_customers,\n                                         on=['Store', 'month'], how='left')\n\nfuture_sales_with_avg_customers['DayOfWeek'] = future_sales_with_avg_customers['Date'].dt.strftime('%a')\nfuture_sales_with_avg_customers['month'] = future_sales_with_avg_customers['Date'].dt.strftime('%b')\ndrop_cols = ['Date', 'Store']\ndummies_test = pd.get_dummies(future_sales_with_avg_customers.drop(drop_cols, axis=1), drop_first=True)\ndummies_test.shape, dummies.shape","32b05df2":"missing_levels = np.setdiff1d(dummies.columns, dummies_test.columns)\nfor level in missing_levels:\n    print(level)\n    if level != 'Sales':\n        dummies_test[level] = 0\ndummies_test['Open'] = dummies_test['Open'].fillna(1)\ndummies.shape, dummies_test.shape","db164f1a":"dummies_test.isna().sum().sum()","3eb2a469":"test_y_pred = rf_model.predict(dummies_test[input_cols])\n","d9538ff3":"sample_submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsample_submission.head()","231ddc7e":"pd.Series(test_y_pred).plot.hist()","a1a19984":"submission = pd.DataFrame({\n    'Id': future_sales['Id'],\n    'Sales': test_y_pred\n})\nsubmission.head()","333ce757":"submission.to_csv('submission.csv', index=False)","447fb9c6":"### Data Anomalies","fe4f5cb0":"## Bivariate analysis","44832644":"### Data Preprocessing","6139bab0":"## Descriptive Summary\n### On numerical columns","547e6aa7":"### On categorical columns","328d13b0":"### On date columns"}}