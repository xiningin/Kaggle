{"cell_type":{"3eaf2e5e":"code","139988b4":"code","adda87e8":"code","da38f0c8":"code","ac4bc71d":"code","06f97687":"code","dc0d20e1":"code","04198d51":"code","d8c94d57":"code","e9c6c843":"code","75c9e3d8":"code","420d4b9c":"code","be1f8139":"code","623cca48":"code","577e3621":"markdown","fffcc814":"markdown","09fb4d89":"markdown","a63ffdc3":"markdown","155bbfab":"markdown","e4da33fa":"markdown","19423322":"markdown","976fa625":"markdown","1c2b8ac3":"markdown","7e3437e7":"markdown","35d99451":"markdown","d44186be":"markdown","bfc4f923":"markdown","1b76a773":"markdown"},"source":{"3eaf2e5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","139988b4":"from plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nvalues = [[\"District\",\"District\",\"District\",\"District\",\"District\",\"District\",\"District\",\"Product\",\"Product\",\"Product\",\"Product\",\"Product\",\"Product\",\"Engagement\",\"Engagement\",\"Engagement\",\"Engagement\"],\n    ['district_id', 'state', 'locale', 'pct_black\/hispanic', 'pct_free\/reduced', 'countyconnectionsratio','pptotalraw',\n          'LP ID', 'URL', 'Product Name', 'Provider\/Company Name', 'Sector(s)', 'Primary Essential Function',\n          'time', 'lp_id', 'pct_access', 'engagement_index'],\n  [\"The unique identifier of the school district\",\n  \"The state where the district resides in\",\n  \"NCES locale classification that categorizes U.S. territory into four types of areas: City, Suburban, Town, and Rural.\",\n  \"Percentage of students in the districts identified as Black or Hispanic based on 2018-19 NCES data\",\n  \"Percentage of students in the districts eligible for free or reduced-price lunch based on 2018-19 NCES data\",\n  \"ratio (residential fixed high-speed connections over 200 kbps in at least one direction\/households) based on the county level data from FCC From 477 (December 2018 version)\",\n  \"Per-pupil total expenditure (sum of local and federal expenditure) from Edunomics Lab's National Education Resource Database on Schools (NERD$) project. The expenditure data are school-by-school, and we use the median value to represent the expenditure of a given school district.\",\n   \"The unique identifier of the product\",\n\"Web Link to the specific product\",\"Name of the specific product\",\"Name of the product provider\", \"Sector of education where the product is used\",\n \"The basic function of the product. There are two layers of labels here. Products are first labeled as one of these three categories: ,<b>LC = Learning & Curriculum, CM = Classroom Management<b>, and <b>SDO = School & District Operations<b>. Each of these categories have multiple sub-categories with which the products were labeled\",\n  \"date in YYYY-MM-DD\",\"The unique identifier of the product\",\n    \"Percentage of students in the district have at least one page-load event of a given product and on a given day\",\n    \"Total page-load events per one thousand students of a given product and on a given day\"]]\n\n\nfig = go.Figure(data=[go.Table(columnorder = [1,2,3],\n                columnwidth = [60,80,400],\n                header = dict(values = [[\"<b>Dataset<\/b>\"],['<b>Columns Names<\/b>'],['<b>Description<\/b>']],\n                line_color='darkslategray',\n                fill_color='royalblue',\n                align=['left','center'],\n                font=dict(color='white', size=15),\n                height=40),\n                cells=dict(values=values,\n                line_color='darkslategray',\n                fill=dict(color=['paleturquoise', 'white']),\n                align=['left', 'center'],\n                font_size=12,\n                height=30))])\nfig.show()","adda87e8":"import pandas as pd\n# load DISTRICT data\ndistrict_data= pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\n\n# load PRODUCT data\nproduct_data= pd.read_csv(\"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\n\n\n# DISTRICT data table\nfig= go.Figure(data=[go.Table(header= dict(values= list(district_data.columns),\n               fill_color= 'paleturquoise',\n               align= 'left'),\n               cells= dict(values= [district_data['district_id'],district_data['state'],\n               district_data['locale'],district_data['pct_black\/hispanic'],\n               district_data['pct_free\/reduced'],district_data['county_connections_ratio'],\n               district_data['pp_total_raw']],\n               fill_color= [['white', 'lavender']*len(district_data)],\n#              fill_color= 'lavender',\n               align= 'left'))])\nfig.show()\n\n\n# PRODUCT data table\nfig= go.Figure(data=[go.Table(header= dict(values= list(product_data.columns),\n               fill_color= 'paleturquoise',\n               align= 'left'),\n               cells= dict(values= [product_data['LP ID'],product_data['URL'],\n               product_data['Product Name'],product_data['Provider\/Company Name'],\n               product_data['Sector(s)'],product_data['Primary Essential Function']],\n               fill_color= [['white', 'lavender']*len(product_data)],\n               align= 'left'))])\nfig.show()","da38f0c8":"# ENGAGEMENT data\nall_csv= []\nfor district in district_data[\"district_id\"]:\n    df= pd.read_csv(f'\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/{district}.csv')\n    df.insert(0, 'district_id', district)\n    all_csv.append(df)\nengagement_data= pd.concat(all_csv)\nengagement_data.head()\n\n# # data table\n# fig= go.Figure(data=[go.Table(header= dict(values= list(engagement_data.columns),\n#                fill_color= 'paleturquoise',\n#                align= 'left'),\n#                cells= dict(values= [engagement_data['district_id'],engagement_data['time'],\n#                engagement_data['lp_id'],engagement_data['pct_access'],engagement_data['engagement_index']],\n#                fill_color= [['white', 'lavender']*len(engagement_data)],\n# #              fill_color= 'lavender',\n#                align= 'left'))])\n# fig.show()\n# print(f'engagement_data has {engagement_data.shape[0]} rows and {engagement_data.shape[1]} columns')","ac4bc71d":"# checking missing values\nprint('-'*45)\nprint(\"percentage of missing values in DISTRICT DATA\")\nprint('-'*45)\nprint(district_data.isnull().sum()\/len(district_data)*100)\nprint('-'*45)\nprint(\"percentage of missing values in PRODUCT DATA\")\nprint('-'*45)\nprint(product_data.isnull().sum()\/len(product_data)*100)\nprint('-'*45)\nprint(\"percentage of missing values in ENGAGEMENT DATA\")\nprint('-'*45)\nprint(engagement_data.isnull().sum()\/len(engagement_data)*100)\n\n# dropping rows with missing values\ndistrict_data.dropna(subset= ['state'],axis=0,inplace= True)\n\n# also dropping \"pp_total_raw\" column as it has ~50% null values\ndistrict_data.drop(columns=[\"pp_total_raw\"], axis=1, inplace= True)","06f97687":"# states with number of school districts\na= district_data[\"state\"].value_counts()\nfig= px.scatter(a, x=a.index, y=a.values, size=a.values, color=a.index, hover_name= a.index, size_max=60, \n                title=\"States with number of school districts\")\nfig.update_layout()\nfig.show()","dc0d20e1":"# locale with number of school districts\nlocale= district_data[\"locale\"].value_counts()\nfig= px.scatter(locale, x=locale.index, y=locale.values, size=locale.values, color=locale.index, hover_name= locale.index, size_max=60, \n                title=\"Locale with number of school districts\")\nfig.update_layout()\nfig.show()","04198d51":"state_locale=district_data.groupby(\"state\")[\"locale\"].value_counts().to_frame().rename(columns={\"locale\": \"number of school districts\"}).reset_index()\nfig = px.treemap(state_locale, path=['state', 'locale'], values='number of school districts',color='number of school districts', \n                 color_continuous_scale='piyg',\n                title=('State-Wise School District Distribution in Locale'))\nfig.update_layout(title_x=0.5)\n                \nfig.show()\n","d8c94d57":"district_data.dropna(subset= ['pct_free\/reduced'],axis=0,inplace= True)\ndistrict_data[\"pct_black\/hispanic\"] = district_data[\"pct_black\/hispanic\"].apply(lambda x: float(str(x).split(',')[0][1:])+0.1)\ndistrict_data[\"pct_free\/reduced\"] = district_data[\"pct_free\/reduced\"].apply(lambda x: float(str(x).split(',')[0][1:])+0.1)\n\ndf_state=district_data[district_data[\"state\"].isin([\"Utah\", \"Illinois\", \"Connecticut\",\"California\", \"Ohio\"])]\ndf_state=df_state.groupby(\"state\").agg({\"pct_black\/hispanic\": \"mean\", \"pct_free\/reduced\": \"mean\"})\n\ndf_locale=district_data.groupby(\"locale\").agg({\"pct_black\/hispanic\": \"mean\", \"pct_free\/reduced\": \"mean\"})\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Mean-Percentage distribution in top 5 states\", \"Mean-Percentage distribution in locale\"))\nfig.add_trace(go.Bar(name='State',x=df_state.index, y=df_state[\"pct_black\/hispanic\"], marker_color=\"#720026\"),row=1, col=1)\nfig.add_trace(go.Bar(name='Locale',x=df_locale.index, y=df_locale[\"pct_black\/hispanic\"], marker_color=\"pink\"),row=1, col=2)\nfig.update_traces(marker_line_color='rgb(8,48,107)',marker_line_width=1.2, opacity=0.6)\nfig.update_layout(height=400, width=1000)\nfig.show()","e9c6c843":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"Mean-Percentage distribution in top 5 states\", \"Mean-Percentage distribution in locale\"))\nfig.add_trace(go.Bar(name='State', x=df_state.index, y=df_state[\"pct_free\/reduced\"], marker_color=\"#5e60ce\"), row=1, col=1)\nfig.add_trace(go.Bar(name='Locale', x=df_locale.index, y=df_locale[\"pct_free\/reduced\"], marker_color=\"#ade8f4\"),row=1, col=2)\nfig.update_traces(marker_line_color='rgb(8,48,107)',marker_line_width=1.2, opacity=0.6)\nfig.update_layout(height=400, width=900)\nfig.show()","75c9e3d8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nengagement_data.rename(columns={\"lp_id\": \"LP ID\"}, inplace=True)\nmerged=pd.merge(engagement_data, product_data, on= \"LP ID\")\nm=merged.groupby(\"Product Name\")[\"pct_access\"].mean().sort_values(ascending=False).head(10)\n\nengagement_data.rename(columns={\"lp_id\": \"LP ID\"}, inplace=True)\nmerged=pd.merge(engagement_data, product_data, on= \"LP ID\")\nn=merged.groupby(\"Product Name\")[\"engagement_index\"].sum().sort_values(ascending=False).head(10)\n\n# plot\nplt.figure(figsize=(15,4))\n\nplt.subplot(121)\nplt.bar(m.index, m.values, color=[\"#6930c3\",\"#5e60ce\",\"#0096c7\",\"#48cae4\",\"#ade8f4\",\"#ff7f51\",\"#ff9b54\",\"#ffbf69\"])\nplt.xlabel('Product Name')\nplt.xticks(rotation=90)\nplt.ylabel('Mean percentage of students')\nplt.title(\"With atleast one-page load event\")\n\nplt.subplot(122)\nplt.bar(n.index, n.values, color=[\"#4f000b\",\"#720026\",\"#ce4257\",\"#ff7f51\",\"#ff9b54\"])\nplt.xlabel('Product Name')\nplt.xticks(rotation=90)\nplt.ylabel('Page-load per 1000 students')\nplt.title(\"With number of page-load per 1000 students\")","420d4b9c":"class_doc=merged[(merged[\"Product Name\"]==\"Google Classroom\")|(merged[\"Product Name\"]==\"Google Docs\")]\npct=class_doc.groupby([\"time\", \"Product Name\"])[\"pct_access\"].mean().to_frame().reset_index()\neng=class_doc.groupby([\"time\", \"Product Name\"])[\"engagement_index\"].sum().to_frame().reset_index()\n# plot\nfig = px.line(pct, x=\"time\", y=\"pct_access\", color='Product Name',title='Percentage of students with atleast one-page load event on a given day',\n              template=\"ggplot2\", width=800, height=400)\nfig.show()\n\nfig = px.line(eng, x=\"time\", y=\"engagement_index\",title='Sum of number of page-load per 1000 students on a given day', color='Product Name',\n              template=\"seaborn\", width=800, height=400)\nfig.show()","be1f8139":"product_data[\"Basic function\"]= product_data[\"Primary Essential Function\"].str.extract('(LC|CM|SDO)')\nfunction_dict ={'LC' : 'Learning & Curriculum', 'CM' : 'Classroom Management', 'SDO' : 'School & District Operations'}\nproduct_data['Basic_function_full_form'] = product_data[\"Basic function\"].map(function_dict)\nproduct_data[\"Sub Basic function\"]= product_data[\"Primary Essential Function\"].str.lstrip('(LCCMSDO')\nproduct_data = product_data.replace('-', '', regex=True)\n\ncolors = ['#AFEEEE', 'hotpink', '800080']\nfig = go.Figure(data=[go.Pie(labels=product_data[\"Basic_function_full_form\"].value_counts().index, values=product_data[\"Basic_function_full_form\"].value_counts().values)])\nfig.update_traces(hoverinfo='label+value', textinfo='label+percent', textfont_size=12,\n                  marker=dict(colors=colors, line=dict(color='#808080', width=1)))\nfig.show()","623cca48":"LC=product_data[product_data[\"Basic function\"]==\"LC\"]\n\ncolors = [\"#aa4465\",\"#dd2d4a\",\"#f26a8d\",\"#f49cbb\",\"#ffcbf2\",\"#e2afff\",\"#ff86c8\",\"#ffa3a5\",\n          \"#20B2AA\",\"#00FFFF\",\"#40E0D0\", \"#7FFFD4\",\"#AFEEEE\",\"#008080\", \"#B0E0E6\", \"#3CB371\", \"#66CDAA\"]\nfig = go.Figure(data=[go.Pie(labels=LC[\"Sub Basic function\"].value_counts().index, values=LC[\"Sub Basic function\"].value_counts().values, \n                             hole=.75)])\nfig.update_traces(hoverinfo='label+value', textinfo='percent', textfont_size=12,\n                  marker=dict(colors=colors, line=dict(color='#808080', width=1)))\nfig.update_layout(\n    title_text=\"Sub Basic function Distribution\",\n    annotations=[dict(text='Learning & Curriculum', x=0.50, y=0.5, font_size=12, showarrow=False)])\nfig.show()","577e3621":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Locale with number of school districts\n<\/p>\n<\/div>","fffcc814":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   State-Wise School District Distribution in Locale\n<\/p>\n<\/div>","09fb4d89":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n  Learning & Curriculum-Sub Basic function\n<\/p>\n<\/div>","a63ffdc3":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#ffe4e1;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 20px;\n              color:#4a4a4a;\">\n    <u><b>By looking at the data:<\/b><\/u><br><br>\n   <i>Given data is from <b>1st Jan 2020<\/b> to <b>31st Dec 2020<\/b> with<br>\n            <b>233<\/b> School Districts<br>\n            <b>372<\/b> Tech Products<br>Around <b>22M<\/b> engagement records\n        <\/i>\n<\/p>\n<\/div>","155bbfab":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n  Tech Products-Basic function Distribution\n<\/p>\n<\/div>","e4da33fa":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Top 10 Tech-Products\n<\/p>\n<\/div>","19423322":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#ffe4e1;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 20px;\n              color:#4a4a4a;\">\n    <i>    <u><b>Google Classroom<\/b><\/u> and <u><b>Google Docs<\/b><\/u> are the two products having maximum accessibility to the students in terms of one-page load event and total-page load event.\n<\/i>\n<\/p>\n<\/div>","976fa625":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Data Description\n<\/p>\n<\/div>","1c2b8ac3":"<p style=\"text-align:center;font-size:30px;\">\n ENGAGEMENT DATA\n<\/p>","7e3437e7":"###  \u231b\ufe0f \u23f3More plots to go.....","35d99451":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Students eligible for Free or Reduced-Price Lunch \n<\/p>\n<\/div>","d44186be":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Students identified as Black or Hispanic\n<\/p>\n<\/div>","bfc4f923":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   States with number of school districts\n<\/p>\n<\/div>","1b76a773":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#e6e6fa;\n           font-size:100%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 5px;color:black;text-align:center;font-size:25px;\">\n   Datasets (1.District Data    2.Product Data)\n<\/p>\n<\/div>"}}