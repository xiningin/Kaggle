{"cell_type":{"106a0dd3":"code","81ad220c":"code","0d59a425":"code","3f524389":"code","85ac0f94":"code","0d2b33c6":"code","a4048107":"code","4ca3135d":"code","f2631908":"code","b1f8559c":"code","6dcc2b3e":"code","90da54e9":"code","349fd84b":"markdown","3e2477ab":"markdown","a37b3a66":"markdown","4df209ff":"markdown","22bbac15":"markdown","69b77598":"markdown"},"source":{"106a0dd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81ad220c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport datetime as dt\n\nfrom ipywidgets import interact, interactive, fixed\nimport ipywidgets as widgets\nfrom IPython.display import display\n\nfrom sklearn import linear_model\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dropout,Dense\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.metrics import accuracy_score as acs","0d59a425":"#Cases APIs\ncase_time_series=pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/case_time_series.csv\")\ncase_time_series[\"Date_YMD\"]=pd.to_datetime(case_time_series.Date_YMD,format=\"%Y-%m-%d\")\ncase_time_series.index=case_time_series['Date_YMD']\n#display(case_time_series)\n#display(case_time_series.describe())\n#display(case_time_series.shape)\n\n#Testing APIs\ntested_numbers_icmr_data=pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/tested_numbers_icmr_data.csv\")\n#display(tested_numbers_icmr_data.tail())\n#tested_numbers_icmr_data.info()\n\n#Create new dataframe for testing data\ntestingAndVaccinating=pd.DataFrame()\ntestingAndVaccinating[\"Date\"]=tested_numbers_icmr_data[\"Tested As Of\"]\ntestingAndVaccinating[\"Daily Tested\"]=tested_numbers_icmr_data[\"Daily RTPCR Samples Collected_ICMR Application\"]\ntestingAndVaccinating[\"Total Tested\"]=tested_numbers_icmr_data[\"Total Samples Tested\"]\ntestingAndVaccinating[\"Total Vaccinations\"]=tested_numbers_icmr_data[\"Total Individuals Vaccinated\"]\ntestingAndVaccinating[\"Date\"]=pd.to_datetime(testingAndVaccinating.Date,infer_datetime_format=True)\ntestingAndVaccinating.index=testingAndVaccinating[\"Date\"]\ntestingAndVaccinating.drop([\"Date\"],axis=1,inplace=True)\ntestingAndVaccinating.fillna(0,axis=1,inplace=True)\n#display(testingAndVaccinating)","3f524389":"#Cases\nTC=case_time_series[\"Total Confirmed\"]\nTR=case_time_series[\"Total Recovered\"]\nTD=case_time_series[\"Total Deceased\"]\nX=case_time_series[\"Daily Confirmed\"]\nY=case_time_series[\"Daily Recovered\"]\nZ=case_time_series[\"Daily Deceased\"]\nD=case_time_series[\"Date_YMD\"]\nDF=case_time_series[\"Date\"]\nTOTC=case_time_series[\"Total Confirmed\"]\nTOTR=case_time_series[\"Total Recovered\"]\nTOTD=case_time_series[\"Total Deceased\"]\n\n#Testing and jabs\nT=testingAndVaccinating[\"Daily Tested\"]\nTV=testingAndVaccinating[\"Total Vaccinations\"]\nTdate=testingAndVaccinating.index\nTOTT=testingAndVaccinating[\"Total Tested\"]\n\nDAC=(X-Y-Z)  #Daily Active cases\nTAC=(TC-TR-TD) #Total Active cases\nAR=(TC-TR-TD)\/TC*100  #Active cases ratio\ndr=(TD\/TC*100) #Death Rate\nrr=(TR\/TC*100) #Recovery Rate\ngr = (X.pct_change(periods=7)*100)\/7 #Growth Rate\n\n#Daily change in stats\ndelC=X.diff()\ndelR=Y.diff()\ndelD=Z.diff()\ndelA=DAC.diff()\ndelT=T.diff()\n\n#Moving Averages\ncase_time_series['CMA'] = X.rolling(window=7).mean()\ncase_time_series['RMA'] = Y.rolling(window=7).mean()\ncase_time_series['DMA'] = Z.rolling(window=7).mean()\ncase_time_series['AMA'] = DAC.rolling(window=7).mean()\ntestingAndVaccinating[\"TMA\"] = T.rolling(window=7).mean()\nCMA=case_time_series[\"CMA\"]\nRMA=case_time_series[\"RMA\"]\nAMA=case_time_series[\"AMA\"]\nDMA=case_time_series[\"DMA\"]\nTMA=testingAndVaccinating[\"TMA\"]\n\nAtoday=X[len(X)-1]-Y[len(Y)-1]-Z[len(Z)-1]\nTOTA=TOTC-TOTR-TOTD","85ac0f94":"#Confirmed Cases\nconfirmed = go.Figure(data=[go.Bar(x=D,y=X,    #Trace 1\n                                   name=\"Daily Cases\",\n                                   marker = dict(color = 'rgba(255, 0, 0,1)'),\n                                   text=\"Peak: {}, Average: {}\".format(X.max(),round(X.mean()),2)),\n                            go.Scatter(x=D, y=CMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"red\")]\n                     )\nconfirmed.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                         .format(DF[len(DF)-1],X[len(X)-1],delC[len(delC)-1],TOTC[len(TOTC)-1]),\n                         bgcolor='rgba(255, 0, 0,0.2)',\n                         font=dict(size=16,family=\"orbitron\"),\n                         borderwidth=2,\n                         bordercolor=\"red\",\n                         x=0, \n                         xanchor=\"left\",\n                         xref=\"paper\",\n                         y=1,\n                         yanchor=\"top\",\n                         yref=\"paper\",\n                         showarrow=False,\n                         align=\"left\" \n                  )\nconfirmed.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"Confirmed cases\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Cases\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(255, 0, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Recovered Cases\nrecovered = go.Figure(data=[go.Bar(x=D,y=Y,    #Trace 1\n                                   name=\"Daily recoveries\",\n                                   marker = dict(color = 'rgba(0, 255, 0,1)'),\n                                   text=\"Peak: {}, Average: {}\".format(Y.max(),round(Y.mean()),2)),\n                            go.Scatter(x=D, y=RMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"green\")]\n                     )\n\nrecovered.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                         .format(DF[len(DF)-1],Y[len(Y)-1],delR[len(delR)-1],TOTR[len(TOTR)-1]),\n                         bgcolor='rgba(0, 255, 0,0.2)',\n                         font=dict(size=16,family=\"orbitron\"),\n                         borderwidth=2,\n                         bordercolor=\"green\",\n                         x=0, \n                         xanchor=\"left\",\n                         xref=\"paper\",\n                         y=1,\n                         yanchor=\"top\",\n                         yref=\"paper\",\n                         showarrow=False,\n                         align=\"left\"\n                        )\nrecovered.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"Recoveries\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Recoveries\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(0, 255, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Active Cases\nactive = go.Figure(data=[go.Bar(x=D,y=DAC,    #Trace 1\n                                   name=\"Daily active cases\",\n                                   marker = dict(color = 'rgba(0, 0, 255,1)'),\n                                   text=\"Peak: {}, Average: {}\".format(DAC.max(),round(DAC.mean()),2)),\n                            go.Scatter(x=D, y=AMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"blue\")]\n                     )\nactive.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                      .format(DF[len(DF)-1],Atoday,delA[len(delA)-1],TOTA[len(TOTA)-1]),\n                         bgcolor='rgba(0, 0, 255,0.2)',\n                         font=dict(size=16,family=\"orbitron\"),\n                         borderwidth=2,\n                         bordercolor=\"blue\",\n                         x=0, \n                         xanchor=\"left\",\n                         xref=\"paper\",\n                         y=1,\n                         yanchor=\"top\",\n                         yref=\"paper\",\n                         showarrow=False,\n                         align=\"left\"\n                        )\nactive.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"Active Cases\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Cases\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(0, 0, 255,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Deaths \ndeaths = go.Figure(data=[go.Bar(x=D,y=Z,    #Trace 1\n                                   name=\"Daily deaths\",\n                                   marker = dict(color = 'rgba(0, 0, 0,1)'),\n                                   text=\"Peak: {}, Average: {}\".format(Z.max(),round(Z.mean()),2)),\n                            go.Scatter(x=D, y=DMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"black\")]\n                     )\ndeaths.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {}\".format(DF[len(DF)-1],Z[len(Z)-1],delD[len(delD)-1]),\n                         bgcolor='rgba(0, 0, 0,0.2)',\n                         font=dict(size=16,family=\"orbitron\"),\n                         borderwidth=2,\n                         bordercolor=\"black\",\n                         x=0, \n                         xanchor=\"left\",\n                         xref=\"paper\",\n                         y=1,\n                         yanchor=\"top\",\n                         yref=\"paper\",\n                         showarrow=False,\n                         align=\"left\"\n                        )\ndeaths.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"Deceased\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Deaths\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(0, 0, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n#Rates\nrates = go.Figure(make_subplots(rows=3, cols=2,\n                      specs=[[{}, {}],[{\"colspan\": 2}, None],[{\"colspan\":2},None]],\n                      subplot_titles=(\"Active Rate\", \"Recovery Rate\",\"Death Rate\",\"Growth Rate\"))\n                 )\n\nrates.add_trace(\n    go.Scatter(x=D,y=AR,\n               mode=\"lines\",\n               name=\"Active rate\",\n               marker = dict(color = 'rgba(0, 0, 255,1)'),\n               text=\"Maximum: {}%, Average: {}%\".format(round(AR.max(),2),round(AR.mean()),2)),\n    row=1,col=1\n)\nrates.add_trace(\n    go.Scatter(x=D,y=rr,\n               mode=\"lines\",\n               name=\"Recovery rate\",\n               marker = dict(color = 'rgba(0, 255, 0,1)'),\n               text=\"Maximum: {}%, Average: {}%\".format(round(rr.max(),2),round(rr.mean()),2)),\n    row=1,col=2\n)\nrates.add_trace(\n    go.Scatter(x=D,y=dr,\n               mode=\"lines\",\n               name=\"Death rate\",\n               marker = dict(color = 'rgba(0, 0, 0,1)'),\n               text=\"Maximum: {}%, Average: {}%\".format(round(dr.max(),2),round(dr.mean()),2)),\n    row=2,col=1\n)\nrates.add_trace(\n    go.Scatter(x=D[70:],y=gr[70:],\n               mode=\"lines\",\n               name=\"Cases growth rate\",\n               marker = dict(color = 'rgba(255, 0, 0,1)'),\n               text=\"Maximum: {}%, Average: {}%\".format(round(gr[70:].max(),2),round(gr[70:].mean()),2)),\n    row=3,col=1\n)\nrates.update_xaxes(title_text=\"Date\", row=1, col=1)\nrates.update_xaxes(title_text=\"Date\", row=1, col=2)\nrates.update_yaxes(title_text=\"Rate\", row=1, col=1)\nrates.update_yaxes(title_text=\"Rate\", row=1, col=2)\nrates.update_xaxes(title_text=\"Date\", row=2, col=1)\nrates.update_yaxes(title_text=\"Rate\", row=2, col=1)\nrates.update_xaxes(title_text=\"Date\", row=3, col=1)\nrates.update_yaxes(title_text=\"Rate\", row=3, col=1)\n\nrates.update_layout(\n    title_text=\"Statistical Rates\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(0, 100, 100,0.5)',\n    margin=dict(l=20,r=20,b=50,t=70),\n    height=600\n)\n\n#Testing\ntesting = go.Figure(data=[go.Bar(x=Tdate,y=T,    #Trace 1\n                                   name=\"Daily Testing\",\n                                   marker = dict(color = 'rgba(128, 0, 128,1)'),\n                                   text=\"Peak: {}, Average: {}\".format(T.max(),round(T.mean()),2)),\n                            go.Scatter(x=testingAndVaccinating.index, y=TMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"purple\")]\n                     )\ntesting.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {}\".format(Tdate[len(Tdate)-1],T[len(T)-1],delT[len(delT)-1]),\n                         bgcolor='rgba(128, 0, 128,0.2)',\n                         font=dict(size=16,family=\"orbitron\"),\n                         borderwidth=2,\n                         bordercolor=\"purple\",\n                         x=0, \n                         xanchor=\"left\",\n                         xref=\"paper\",\n                         y=1,\n                         yanchor=\"top\",\n                         yref=\"paper\",\n                         showarrow=False,\n                         align=\"left\" \n                  )\ntesting.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"Testing Data\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Tests\",\n    legend_title=\"India: \",\n    paper_bgcolor='rgba(128, 0, 128,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\nconfirmed.show()\nrecovered.show()\nactive.show()\ndeaths.show()\ntesting.show()\nrates.show()","0d2b33c6":"case_time_series1=case_time_series.sort_index(ascending=True,axis=0)\nnew_dataset=pd.DataFrame(index=range(0,len(case_time_series)),columns=['Date_YMD','Daily Confirmed'])\n\nfor i in range(0,len(case_time_series1)):\n    new_dataset[\"Date_YMD\"][i]=case_time_series1['Date_YMD'][i]\n    new_dataset[\"Daily Confirmed\"][i]=case_time_series1[\"Daily Confirmed\"][i]\n    \n#Normalize the Dataset\nscaler=MinMaxScaler(feature_range=(0,1))\nnew_dataset.index=new_dataset.Date_YMD\nnew_dataset.drop(\"Date_YMD\",axis=1,inplace=True)\nfinal_dataset=new_dataset.values\n\ntrain_data=final_dataset[0:(len(final_dataset)-70),:]\nvalid_data=final_dataset[(len(final_dataset)-70):,:]\nscaled_data=scaler.fit_transform(final_dataset)\n\nx_train_data,y_train_data=[],[]\n\nfor i in range(70,len(train_data)):\n    x_train_data.append(scaled_data[i-70:i,0])\n    y_train_data.append(scaled_data[i,0])\n    \nx_train_data,y_train_data=np.array(x_train_data),np.array(y_train_data)\nx_train_data=np.reshape(x_train_data,(x_train_data.shape[0],x_train_data.shape[1],1))\n\n#Build and train the LSTM model\nlstm_model=Sequential()\nlstm_model.add(LSTM(units=70,return_sequences=True,input_shape=(x_train_data.shape[1],1)))\nlstm_model.add(LSTM(units=70))\nlstm_model.add(Dense(1))\n\ninputs_data=new_dataset[len(new_dataset)-len(valid_data)-70:].values\ninputs_data=inputs_data.reshape(-1,1)\ninputs_data=scaler.transform(inputs_data)\n\nlstm_model.compile(loss='mean_squared_error',optimizer='adam')\nlstm_model.fit(x_train_data,y_train_data,epochs=1,batch_size=1,verbose=2)","a4048107":"#Testing data for the model\nX_test=[]\nfor i in range(70,inputs_data.shape[0]):\n    X_test.append(inputs_data[i-70:i,0])\nX_test=np.array(X_test)\n\nX_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\npredicted_daily_confirmed=lstm_model.predict(X_test)\npredicted_daily_confirmed=scaler.inverse_transform(predicted_daily_confirmed)\n\ntrain_data=new_dataset[:(len(final_dataset)-70)]\nvalid_data=new_dataset[(len(final_dataset)-70):]\nvalid_data['Predictions']=predicted_daily_confirmed\n\n#Confirmed Cases\nplt.figure(figsize=(16,8))\nplt.plot(train_data[\"Daily Confirmed\"])\nplt.plot(valid_data['Daily Confirmed'],label = \"Real Value\")\nplt.plot(valid_data[\"Predictions\"],label = \"Prediction\")\n\nplt.legend()\nplt.grid()\nplt.show()","4ca3135d":"#Cases\nstate_wise_daily = pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/state_wise_daily.csv\")\nstate_wise_daily[\"Date_YMD\"]=pd.to_datetime(state_wise_daily.Date_YMD,format=\"%Y-%m-%d\")\nstate_wise=pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv\")\n#display(state_wise)\n#display(state_wise.info())\n#display(state_wise_daily)\n#display(state_wise_daily.info())\n\n#Testing and jabs\nstatewise_tested_numbers_data=pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/statewise_tested_numbers_data.csv\")\nstatewise_tested_numbers_data[\"Updated On\"]=pd.to_datetime(statewise_tested_numbers_data[\"Updated On\"],\n                                                           infer_datetime_format=True)\nstatewise_tested_numbers_data[\"State\"]=statewise_tested_numbers_data[\"State\"].replace(\n    [\"Maharashtra\",\"Kerala\",\"Karnataka\",\"Andhra Pradesh\",\"Tamil Nadu\",\"Delhi\",\"Uttar Pradesh\",\"West Bengal\",\"Odisha\",\n     \"Rajasthan\",\"Chhattisgarh\",\"Telangana\",\"Haryana\",\"Gujarat\",\"Bihar\",\"Madhya Pradesh\",\"Assam\",\"Punjab\",\"Jammu and Kashmir\",\n     \"Jharkhand\",\"Uttarakhand\",\"Himachal Pradesh\",\"Goa\",\"Puducherry\",\"Tripura\",\"Manipur\",\"Chandigarh\",'Arunachal Pradesh',\n     'Meghalaya',\"Nagaland\",\"Ladakh\",\"Sikkim\",\"Andaman and Nicobar Islands\",\"Mizoram\",\"Dadra and Nagar Haveli and Daman and Diu\",\n     \"Lakshadweep\"],\n    [\"MH\",\"KL\",\"KA\",\"AP\",\"TN\",\"DL\",\"UP\",\"WB\",\"OR\",\"RJ\",\"CT\",\"TG\",\"HR\",\"GJ\",\"BR\",\"MP\",\"AS\",\"PB\",\"JK\",\"JH\",\"UT\",\"HP\",\"GA\",\"PY\",\n     \"TR\",\"MN\",\"CH\",\"AR\",\"ML\",\"NL\",\"LA\",\"SK\",\"AN\",\"MZ\",\"DN\",\"LD\"])\nstatewise_tested_numbers_data.index=statewise_tested_numbers_data['Updated On']\n#display(statewise_tested_numbers_data)state_wise_daily = pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/state_wise_daily.csv\")\nstate_wise_daily[\"Date_YMD\"]=pd.to_datetime(state_wise_daily.Date_YMD,format=\"%Y-%m-%d\")\nstate_wise=pd.read_csv(\"https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv\")\n#display(state_wise.head())\n#display(state_wise.info())\n#display(state_wise_daily)\n#display(state_wise_daily.info())","f2631908":"def f(x):\n    display(x)\n    return x\n\nC = state_wise_daily.columns[3:]\n#print(\"Select a state to view statistics.\")\nP = interactive(f, x=widgets.Dropdown(options=C,value='MH',description='State Code:',disabled=False))\nprint(\"Select a state to view statistics.\")\ndisplay(P)","b1f8559c":"State = P.result\nX=state_wise_daily[state_wise_daily.Status==\"Confirmed\"][State]\nY=state_wise_daily[state_wise_daily.Status==\"Recovered\"][State]\nZ=state_wise_daily[state_wise_daily.Status==\"Deceased\"][State]\nAC=X.values-Y.values-Z.values\nActive=pd.DataFrame(AC,columns=[\"Active\"])\nDF=state_wise_daily[state_wise_daily.Status==\"Confirmed\"][\"Date\"]\nD=state_wise_daily[state_wise_daily.Status==\"Confirmed\"][\"Date_YMD\"]\nTOTC=state_wise[state_wise[\"State_code\"]==State][\"Confirmed\"]\nTOTR=state_wise[state_wise[\"State_code\"]==State][\"Recovered\"]\nTOTD=state_wise[state_wise[\"State_code\"]==State][\"Deaths\"]\nTOTA=TOTC-TOTR-TOTD\n\n#Testing\nDate=statewise_tested_numbers_data[statewise_tested_numbers_data.State==State][\"Updated On\"]\ntested=statewise_tested_numbers_data[statewise_tested_numbers_data.State==State][\"Total Tested\"].diff()\nTOTT=statewise_tested_numbers_data[statewise_tested_numbers_data.State==State][\"Total Tested\"]\n\n#gr = (X.pct_change(periods=7)*100)\/7\n#pr=(X.values)\/(tested.values)*100\n\n#Latest values\nCtoday=X[3*(len(X))-3]\nRtoday=Y[3*(len(Y))-2]\nDtoday=Z[3*(len(Z))-1]\nTtoday=tested[len(tested)-2]\nAtoday=Ctoday-Rtoday-Dtoday\n\n#Daily change in stats\ndelC=X.diff()\ndelR=Y.diff()\ndelD=Z.diff()\ndelA=Active[\"Active\"].diff()\ndelT=tested.diff()\n\n#Moving Averages\nstate_wise_daily['CMA'] = X.rolling(window=7).mean()\nstate_wise_daily['RMA'] = Y.rolling(window=7).mean()\nstate_wise_daily['DMA'] = Z.rolling(window=7).mean()\nActive['AMA'] = Active[\"Active\"].rolling(window=7).mean()\nstatewise_tested_numbers_data[\"TMA\"]=tested.rolling(window=7).mean()\nCMA=state_wise_daily[state_wise_daily.Status==\"Confirmed\"][\"CMA\"]\nRMA=state_wise_daily[state_wise_daily.Status==\"Recovered\"][\"RMA\"]\nDMA=state_wise_daily[state_wise_daily.Status==\"Deceased\"][\"DMA\"]\nAMA=Active[\"AMA\"]\nTMA=statewise_tested_numbers_data[statewise_tested_numbers_data.State==State][\"TMA\"]","6dcc2b3e":"#Confirmed Cases\nSTconfirmed = go.Figure(data=[go.Bar(x=D,y=X,    #Trace 1\n                                   name=\"Daily Cases\",\n                                   marker = dict(color = 'rgba(255, 0, 0,0.7)'),\n                                   text=\"Peak: {}, Average: {}\".format(X.max(),round(X.mean()),2)),\n                            go.Scatter(x=D, y=CMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"red\")]\n                     )\nSTconfirmed.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                           .format(DF[3*(len(DF))-3],Ctoday,delC[3*(len(delC))-3],TOTC.values),\n                           bgcolor='rgba(255, 0, 0,0.2)',\n                           font=dict(size=16,family=\"orbitron\"),\n                           borderwidth=2,\n                           bordercolor=\"red\",\n                           x=0, \n                           xanchor=\"left\",\n                           xref=\"paper\",\n                           y=1,\n                           yanchor=\"top\",\n                           yref=\"paper\",\n                           showarrow=False,\n                           align=\"left\"\n                  )\nSTconfirmed.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State confirmed cases\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Cases\",\n    legend_title=\"{}: \".format(State),\n    paper_bgcolor='rgba(255, 0, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Recovered Cases\nSTrecovered = go.Figure(data=[go.Bar(x=D,y=Y,    #Trace 1\n                                   name=\"Daily recoveries\",\n                                   marker = dict(color = 'rgba(0, 255, 0,0.7)'),\n                                   text=\"Peak: {}, Average: {}\".format(Y.max(),round(Y.mean()),2)),\n                            go.Scatter(x=D, y=RMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"green\")]\n                     )\nSTrecovered.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                           .format(DF[3*(len(DF))-3],Rtoday,delR[3*(len(delR))-2],TOTR.values),\n                           bgcolor='rgba(0, 255, 0,0.2)',\n                           font=dict(size=16,family=\"orbitron\"),\n                           borderwidth=2,\n                           bordercolor=\"green\",\n                           x=0, \n                           xanchor=\"left\",\n                           xref=\"paper\",\n                           y=1,\n                           yanchor=\"top\",\n                           yref=\"paper\",\n                           showarrow=False,\n                           align=\"left\"\n                  )\nSTrecovered.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State recoveries\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Recoveries\",\n    legend_title=\"{}: \".format(State),\n    paper_bgcolor='rgba(0, 255, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Active Cases\nSTactive = go.Figure(data=[go.Bar(x=D,y=Active[\"Active\"],    #Trace 1\n                                   name=\"Daily active\",\n                                   marker = dict(color = 'rgba(0, 0, 255,0.7)'),\n                                   text=\"Peak: {}, Average: {}\".format(Active[\"Active\"].max(),round(Active[\"Active\"].mean()),2)),\n                            go.Scatter(x=D, y=AMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"blue\")\n                          ]\n                     )\nSTactive.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                        .format(DF[3*(len(DF))-3],Atoday,delA[len(delA)-1],TOTA.values),\n                           bgcolor='rgba(0, 0, 255,0.2)',\n                           font=dict(size=16,family=\"orbitron\"),\n                           borderwidth=2,\n                           bordercolor=\"blue\",\n                           x=0, \n                           xanchor=\"left\",\n                           xref=\"paper\",\n                           y=1,\n                           yanchor=\"top\",\n                           yref=\"paper\",\n                           showarrow=False,\n                           align=\"left\"\n                  )\nSTactive.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State active\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Active\",\n    legend_title=\"{}: \".format(State),\n    paper_bgcolor='rgba(0, 0, 255,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Deaths \nSTdeaths = go.Figure(data=[go.Bar(x=D,y=Z,    #Trace 1\n                                   name=\"Daily deaths\",\n                                   marker = dict(color = 'rgba(0, 0, 0,0.7)'),\n                                   text=\"Peak: {}, Average: {}\".format(Z.max(),round(Z.mean()),2)),\n                            go.Scatter(x=D, y=DMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"black\")]\n                     )\nSTdeaths.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                        .format(DF[3*(len(DF))-3],Dtoday,delD[3*(len(delD))-1],TOTD.values),\n                           bgcolor='rgba(0, 0, 0,0.2)',\n                           font=dict(size=16,family=\"orbitron\"),\n                           borderwidth=2,\n                           bordercolor=\"black\",\n                           x=0, \n                           xanchor=\"left\",\n                           xref=\"paper\",\n                           y=1,\n                           yanchor=\"top\",\n                           yref=\"paper\",\n                           showarrow=False,\n                           align=\"left\"\n                  )\nSTdeaths.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State deceased\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Deaths\",\n    legend_title=\"{}: \".format(State),\n    paper_bgcolor='rgba(0, 0, 0,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\n#Testing\nSTTesting=go.Figure(data=[go.Bar(x=Date,y=tested,    #Trace 1\n                                   name=\"Daily Tests\",\n                                   marker = dict(color = 'rgba(128, 0, 128,0.7)'),\n                                   text=\"Peak: {}, Average: {}\".format(tested.max(),round(tested.mean()),2)),\n                            go.Scatter(x=Date, y=TMA,\n                                   mode='lines',\n                                   name=\"7-Day moving average\",\n                                   line_color=\"purple\")]\n                     )\nSTTesting.add_annotation(text=\"{}:<br><b>{}<\/b>  \u2206= {} <br>Total: {}\"\n                         .format(Date[len(Date)-2],Ttoday,delT[len(delT)-2],TOTT[len(TOTT)-2]),\n                           bgcolor='rgba(128, 0, 128,0.2)',\n                           font=dict(size=16,family=\"orbitron\"),\n                           borderwidth=2,\n                           bordercolor=\"purple\",\n                           x=0, \n                           xanchor=\"left\",\n                           xref=\"paper\",\n                           y=1,\n                           yanchor=\"top\",\n                           yref=\"paper\",\n                           showarrow=False,\n                           align=\"left\"\n                  )\nSTTesting.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State testing\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Tests\",\n    legend_title=\"{}: \".format(State),\n    paper_bgcolor='rgba(128, 0, 128,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\n\nSTconfirmed.show()\nSTrecovered.show()\nSTactive.show()\nSTdeaths.show()\nSTTesting.show()","90da54e9":"SWC=state_wise[state_wise.State!=\"Total\"][\"Confirmed\"]\nSWR=state_wise[state_wise.State!=\"Total\"][\"Recovered\"]\nSWD=state_wise[state_wise.State!=\"Total\"][\"Deaths\"]\nT=state_wise[state_wise.State==\"Total\"]\nSC=state_wise[state_wise.State!=\"Total\"][\"State_code\"]\nar=((SWC-SWR-SWD)\/SWC*100)\n\n#Display\nPR = go.Figure(data=[go.Bar(x=SC,y=SWC,    #Trace 1\n                                   name=\"Confirmed\",\n                            text=SWC,\n                                   marker = dict(color = 'rgba(255, 0, 0,1)'),\n                           ),\n                     go.Bar(x=SC,y=SWR,name=\"Recovered\",\n                            text=SWR,\n                            marker=dict(color = 'rgba(0, 255, 0,1)')),\n                     go.Bar(x=SC,y=SWD,name=\"Deaths\",\n                            text=SWD,\n                            marker=dict(color = 'rgba(0, 0, 0,1)')),\n                    ]\n                    \n              )\nPR.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nPR.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State-wise\",\n    xaxis_title=\"State\",\n    yaxis_title=\"Confirmed\/\/Recovered\/\/Deaths\",\n    legend_title=\"Plots: \",\n    paper_bgcolor='#9ef7ad',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\nAR = go.Figure(data=[go.Bar(x=SC,y=ar,    #Trace 1\n                                   name=\"Active Rate\",\n                            text=ar,\n                                   marker = dict(color = '#9ef7ad'),\n                           )]    \n              )\nAR.update_traces(texttemplate='%{text:.2s}%', textposition='outside')\nAR.update_layout(\n    margin=dict(l=20,r=20,b=50,t=70),\n    title=\"State-wise\",\n    xaxis_title=\"State\",\n    yaxis_title=\"Active Rate\",\n    legend_title=\"Plots: \",\n    paper_bgcolor='rgba(0, 0, 255,0.3)',\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([dict(count=3,step=\"month\",stepmode=\"backward\"),\n                          dict(count=6,step=\"month\",stepmode=\"backward\"),\n                          dict(count=1,step=\"year\",stepmode=\"backward\")])\n        ),\n        rangeslider=dict(visible=True),\n    )\n)\nPR.show()\nAR.show()","349fd84b":"__Active Rate in states__","3e2477ab":"__Importing Data__","a37b3a66":"# __India Daily Analysis__","4df209ff":"# LSTM model to predict curve","22bbac15":"# **__State Wise analysis__**","69b77598":"# Visualization of data"}}