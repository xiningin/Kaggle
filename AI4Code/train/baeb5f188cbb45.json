{"cell_type":{"140ae34f":"code","9d13e96b":"code","5c824e9b":"code","2244d18b":"code","4dde49b1":"code","9185f29e":"code","b077b7b2":"code","0f05859a":"code","a34690fa":"code","6a4e6989":"code","a92c6cb9":"code","89fadb3f":"code","f646e324":"code","40e70505":"code","60e156a2":"code","7f4115c1":"code","94687c0b":"code","3a86bb1e":"code","42f9c424":"code","333d7c29":"code","17d63afc":"code","214ae053":"code","d0424568":"code","b969eec9":"code","0cde836c":"code","8ba953b2":"code","26e0cf53":"code","74003f6f":"code","c8efbe61":"code","6f201165":"code","bd080679":"code","50694160":"code","8d64228b":"code","09dca29f":"code","a2ad626e":"code","c7da01ef":"code","b6bc04a8":"markdown","0c3202c8":"markdown","25112d46":"markdown"},"source":{"140ae34f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9d13e96b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns","5c824e9b":"#3 Functions\n# 3.1 Print 5 Rows for any column\ndef print_rows(name_column):\n    return df1[name_column][0:5]\n# 3.2 Get Details of the Column\ndef describe_column(name_column):\n    return df1[name_column].describe()","2244d18b":"print(os.listdir('..\/input'))","4dde49b1":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Superstore.csv has 9994 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/superstore-sales\/superstore.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'superstore.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","9185f29e":"df1.shape","b077b7b2":"df1.columns","0f05859a":"df1.isnull().sum()","a34690fa":"df1.head()","6a4e6989":"df1.info()","a92c6cb9":"df1.describe()","89fadb3f":"print_rows('Order Date')","f646e324":"df1['Order Date'] = pd.to_datetime(df1['Order Date'])\ndescribe_column('Order Date')","40e70505":"print_rows(\"Ship Date\")","60e156a2":"df1['Ship Date'] = pd.to_datetime(df1['Ship Date'])\ndescribe_column('Ship Date')","7f4115c1":"print_rows('Ship Mode')","94687c0b":"df1['Ship Mode'].unique()","3a86bb1e":"plt.figure(figsize=(16,8))\ntop20states = df1.groupby('State')['Row ID'].count().sort_values(ascending=False)\ntop20states = top20states [:20]\ntop20states.plot(kind='bar', color='blue')\nplt.title('Top 20 States in Sales')\nplt.ylabel('Count')\nplt.xlabel('States')\nplt.show()","42f9c424":"plt.figure(figsize=(16,8))\ntop20city = df1.groupby('City')['Row ID'].count().sort_values(ascending=False)\ntop20city = top20city [:20]\ntop20city.plot(kind='bar', color='red')\nplt.title('Top 20 Cities in Sales')\nplt.ylabel('Count')\nplt.xlabel('Cities')\nplt.show()","333d7c29":"plt.figure(figsize=(16,8))\ntop20pid = df1.groupby('Product ID')['Row ID'].count().sort_values(ascending=False)\ntop20pid = top20pid [:20]\ntop20pid.plot(kind='bar', color='Green')\nplt.title('Top 20 Products by Product IDs in Sales')\nplt.ylabel('Count')\nplt.xlabel('Product IDs')\nplt.show()","17d63afc":"plt.figure(figsize=(16,8))\ntop20pname = df1.groupby('Product Name')['Row ID'].count().sort_values(ascending=False)\ntop20pname = top20pname [:20]\ntop20pname.plot(kind='bar', color='Orange')\nplt.title('Top 20 Products in Sales')\nplt.ylabel('Count')\nplt.xlabel('Products')\nplt.show()","214ae053":"x = df1.sort_values('Profit', ascending=False)\ntop20 = x.head(20)\ntop20[['Customer Name', 'Profit']] ","d0424568":"sns.barplot(x = \"Profit\", y= \"Customer Name\", data=top20)  # plotting of top 20 profitable customers","b969eec9":"plt.figure(figsize=(16,8))\ndf1['Segment'].value_counts().plot.bar()\n# sns.countplot(\"Segment\", data = data)           #Distribution of customer Segment\nplt.title('Segment Wise Sales')\nplt.ylabel('Count')\nplt.xlabel('Segments')\nplt.show()","0cde836c":"plt.figure(figsize=(16,8))\ndf1['Ship Mode'].value_counts().plot.bar()\nplt.title('Ship Mode Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Ship Modes')\nplt.show()","8ba953b2":"plt.figure(figsize=(16,8))\ndf1['Region'].value_counts().plot.bar()\nplt.title('Region Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Regions')\nplt.show()","26e0cf53":"plt.figure(figsize=(16,8))\ndf1['Category'].value_counts().plot.bar()\nplt.title('Category Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Categories')\nplt.show()","74003f6f":"plt.figure(figsize=(16,8))\ndf1['Sub-Category'].value_counts().plot.bar()\nplt.title('Sub-Category Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Sub Categories')\nplt.show()","c8efbe61":"plt.figure(figsize=(14,8))\nCusCountry = pd.DataFrame({'Count' : df1.groupby([\"Country\",\"State\"]).size()}).reset_index().sort_values('Count',ascending = False).head(20)\nsns.barplot(x = \"Country\", y= \"Count\", hue=\"State\", data = CusCountry.sort_values('Country'))\nplt.show()","6f201165":"plt.figure(figsize=(16,8))\nsale_category = df1.groupby([\"Category\",\"Sub-Category\"])['Quantity'].aggregate(np.sum).reset_index().sort_values('Quantity',ascending = False)\nsns.barplot(x = \"Category\", hue=\"Sub-Category\", y= \"Quantity\", data=sale_category)\nplt.show()","bd080679":"df1['Order Date'] = pd.to_datetime(df1['Order Date'])      \ntop20Cust= df1.sort_values(['Order Date'], ascending=False).head(20)\ntop20Cust.loc[:,['Customer Name']]","50694160":"Visit=df1.groupby('Customer ID').apply(lambda x: pd.Series(dict(visit_count=x.shape[0])))\nVisit.loc[(Visit.visit_count==1)]","8d64228b":"#Relationship between sales and profit -- use scatter plot\nregionwiseSalesAndProfit = df1.groupby(\"Region\").agg({\"Sales\":np.sum, \"Profit\": np.sum})\nregionwiseSalesAndProfit\nfig = plt.figure(figsize=(6,4))\nax = fig.add_subplot(111)\np = sns.scatterplot(x=\"Sales\", y=\"Profit\", hue=regionwiseSalesAndProfit.index, data=regionwiseSalesAndProfit) # kind=\"scatter\")\nax.set_title(\"Relationship between Sales and Profit by Region\")\nplt.tight_layout()\nplt.show()","09dca29f":"#Year-wise sales and profit\ndf1[\"Order_Year\"] = pd.to_datetime(df1[\"Order Date\"])\ndf1[\"Year\"] = df1[\"Order_Year\"].dt.year\nyearwiseSalesAndProfit = df1.groupby(\"Year\").agg({\"Sales\":np.sum, \"Profit\": np.sum})","a2ad626e":"yearwiseSalesAndProfit","c7da01ef":"fig = plt.figure(figsize=(16,8))\nax = fig.add_subplot(221)\np=sns.barplot(x=yearwiseSalesAndProfit.index,y=\"Profit\", data=yearwiseSalesAndProfit, palette=\"winter\", ax=ax)\nax.set_title(\"Year-wise Profit\")\nax.set_xticklabels(p.get_xticklabels(), rotation=0)\nax = fig.add_subplot(222)\np=sns.barplot(x=yearwiseSalesAndProfit.index,y=\"Sales\", data=yearwiseSalesAndProfit, palette=\"spring\", ax=ax)\nax.set_title(\"Year-wise Sales\")\nax.set_xticklabels(p.get_xticklabels(), rotation=0)\nplt.tight_layout()\nplt.show()","b6bc04a8":"TEC-AC-10003832 Product tops all the Products in Sales","0c3202c8":" California as a State tops all the States in Sales","25112d46":" New York City as a City tops all the Cities in Sales"}}