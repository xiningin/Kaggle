{"cell_type":{"3f489270":"code","0702de60":"code","d4692fbb":"code","c2d85c43":"code","122f3b9a":"code","74705e5a":"code","73493a5e":"code","cce2a3ce":"code","b7033c12":"code","c6ff01b8":"code","b7e6bf68":"code","298a76c9":"code","07c64ae6":"code","574d248f":"code","1db73a77":"code","738bef9e":"code","4cab3e4e":"code","0aab3165":"code","9bae5200":"code","0bdaaf9a":"code","dc072d60":"code","3809f064":"code","bd78d8ce":"code","041f2eb2":"markdown","e2f543d7":"markdown","e65fe830":"markdown","01dfc878":"markdown","51a424f1":"markdown"},"source":{"3f489270":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0702de60":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d4692fbb":"df_train=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_sub=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\n\nprint(df_train.shape)\nprint(df_test.shape)\nprint(df_sub.shape)","c2d85c43":"df_train.head()","122f3b9a":"print(f\"Unique Countries: {len(df_train.Country_Region.unique())}\")","74705e5a":"train_dates=list(df_train.Date.unique())\nprint(f\"Period : {len(df_train.Date.unique())} days\")\nprint(f\"From : {df_train.Date.min()} To : {df_train.Date.max()}\")","73493a5e":"print(f\"Unique Regions: {df_train.shape[0]\/len(df_train.Date.unique())}\")","cce2a3ce":"df_train.Country_Region.value_counts()","b7033c12":"print(f\"Number of rows without Country_Region : {df_train.Country_Region.isna().sum()}\")","c6ff01b8":"df_train[\"UniqueRegion\"]=df_train.Country_Region\ndf_train.UniqueRegion[df_train.Province_State.isna()==False]=df_train.Province_State+\" , \"+df_train.Country_Region\ndf_train[df_train.Province_State.isna()==False]","b7e6bf68":"df_train.drop(labels=[\"Id\",\"Province_State\",\"Country_Region\"], axis=1, inplace=True)","298a76c9":"df_train","07c64ae6":"df_test.head()","574d248f":"test_dates=list(df_test.Date.unique())\nprint(f\"Period :{len(df_test.Date.unique())} days\")\nprint(f\"From : {df_test.Date.min()} To : {df_test.Date.max()}\")","1db73a77":"print(f\"Total Regions : {df_test.shape[0]\/43}\")","738bef9e":"df_test[\"UniqueRegion\"]=df_test.Country_Region\ndf_test.UniqueRegion[df_test.Province_State.isna()==False]=df_test.Province_State+\" , \"+df_test.Country_Region\ndf_test.drop(labels=[\"Province_State\",\"Country_Region\"], axis=1, inplace=True)","4cab3e4e":"len(df_test.UniqueRegion.unique())","0aab3165":"df_sub.head()","9bae5200":"# Dates in train only\nonly_train_dates=set(train_dates)-set(test_dates)\nprint(\"Only train dates : \",len(only_train_dates))\n#dates in train and test\nintersection_dates=set(test_dates)&set(train_dates)\nprint(\"Intersection dates : \",len(intersection_dates))\n#dates in only test\nonly_test_dates=set(test_dates)-set(train_dates)\nprint(\"Only Test dates : \",len(only_test_dates))","0bdaaf9a":"import random\ndf_test_temp=pd.DataFrame()\ndf_test_temp[\"Date\"]=df_test.Date\ndf_test_temp[\"ConfirmedCases\"]=0.0\ndf_test_temp[\"Fatalities\"]=0.0\ndf_test_temp[\"UniqueRegion\"]=df_test.UniqueRegion\ndf_test_temp[\"Delta\"]=1.0","dc072d60":"%%time\nfinal_df=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\"])\n\nfor region in df_train.UniqueRegion.unique():\n    df_temp=df_train[df_train.UniqueRegion==region].reset_index()\n    df_temp[\"Delta\"]=1.0\n    size_train=df_temp.shape[0]\n    for i in range(1,df_temp.shape[0]):\n        if(df_temp.ConfirmedCases[i-1]>0):\n            df_temp.Delta[i]=df_temp.ConfirmedCases[i]\/df_temp.ConfirmedCases[i-1]\n\n    #number of days for delta trend\n    n=7    \n\n    #delta as trend for previous n days\n    delta_list=df_temp.tail(n).Delta\n    \n    #Average Growth Factor\n    delta_avg=df_temp.tail(n).Delta.mean()\n\n    #Morality rate as on last availabe date\n    death_rate=df_temp.tail(1).Fatalities.sum()\/df_temp.tail(1).ConfirmedCases.sum()\n\n    df_test_app=df_test_temp[df_test_temp.UniqueRegion==region]\n    df_test_app=df_test_app[df_test_app.Date>df_temp.Date.max()]\n\n    X=np.arange(1,n+1).reshape(-1,1)\n    Y=delta_list\n    model=LinearRegression()\n    model.fit(X,Y)\n    #score_pred.append(model.score(X,Y))\n    #reg_pred.append(region)\n\n    df_temp=pd.concat([df_temp,df_test_app])\n    df_temp=df_temp.reset_index()\n\n    for i in range (size_train, df_temp.shape[0]):\n        n=n+1        \n        damper=df_temp.Delta[i-5]\n        pred=max(1,model.predict(np.array([n]).reshape(-1,1))[0])\n        \n        df_temp.Delta[i]=(damper+pred+delta_avg)\/3\n        #df_temp.Delta[i]=pred\n        \n    for i in range (size_train, df_temp.shape[0]):\n        df_temp.ConfirmedCases[i]=round(df_temp.ConfirmedCases[i-1]*df_temp.Delta[i],0)\n        df_temp.Fatalities[i]=round(death_rate*df_temp.ConfirmedCases[i],0)\n\n\n    size_test=df_temp.shape[0]-df_test_temp[df_test_temp.UniqueRegion==region].shape[0]\n\n    df_temp=df_temp.iloc[size_test:,:]\n    \n    df_temp=df_temp[[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"Delta\"]]\n    final_df=pd.concat([final_df,df_temp], ignore_index=True)\n\n#df_score=pd.DataFrame({\"Region\":reg_pred,\"Score\":score_pred})\n#print(f\"Average score (n={n}): {df_score.Score.mean()}\")\n#sns.distplot(df_score.Score)    \nfinal_df.shape","3809f064":"df_sub.shape","bd78d8ce":"df_sub.Fatalities=final_df.Fatalities\ndf_sub.ConfirmedCases=final_df.ConfirmedCases\ndf_sub.to_csv(\"submission.csv\", index=None)","041f2eb2":"Total regions in test is same as train data","e2f543d7":"### EDA Train Data","e65fe830":"### EDA Test Data","01dfc878":"### Predict cases","51a424f1":"### EDA Submission data"}}