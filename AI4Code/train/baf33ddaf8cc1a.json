{"cell_type":{"c0d81c6e":"code","eafd12a7":"code","f6a1f642":"code","152c4bac":"code","097b317d":"code","3faa9db3":"code","8ad68b9f":"code","8534716c":"code","81ae3447":"code","ec4dadd1":"code","79d908c3":"code","ce2d031e":"code","25f75860":"code","02ac66cb":"markdown","5ac31b8f":"markdown","a18047c3":"markdown","ea089e7e":"markdown","874d5f52":"markdown","84d44e25":"markdown","24971341":"markdown","22d9afd6":"markdown","a9bcc2c1":"markdown","6a9f0903":"markdown","f5bceb98":"markdown","ddeb5a01":"markdown"},"source":{"c0d81c6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eafd12a7":"train_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-spring-21-assignment-1\/train.csv\")\ntrain_data.head()","f6a1f642":"test_data = pd.read_csv(\"\/kaggle\/input\/cap-4611-spring-21-assignment-1\/test.csv\")\ntest_data.head()","152c4bac":"from scipy import stats\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import f1_score \n","097b317d":"x = train_data.dropna()","3faa9db3":"from scipy import stats\n\noutliersM = np.abs(stats.zscore(train_data))\n   \nprint(outliersM)","8ad68b9f":"from sklearn.model_selection import train_test_split\n\nfeatures = [ x for x in train_data.columns if x != 'Bankrupt' and x != 'id' ]\n\ntarget = ['Bankrupt'] \n\nX = train_data[features]\ny = train_data[target]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .4, random_state = 1, stratify = y)","8534716c":"for x in features:\n    train_data[x].plot(kind = 'hist')\n    plt.title(x)\n    plt.show()","81ae3447":"train_data.isnull().values.any()","ec4dadd1":"from sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\n\nnormal = MinMaxScaler().fit(X_train)\n\ntrainNormal = normal.transform(X_train)\n\ntestNormal = normal.transform(X_test)\n","79d908c3":"from sklearn.ensemble import RandomForestRegressor\ny = train_data[\"Bankrupt\"]\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestRegressor(n_estimators = 1000, max_depth = 5, random_state = 1)\n\nmodel.fit(X, y)\n\nprediction = model.predict(X_test)\n\nOutput = pd.DataFrame({'id' : test_data.id, 'Bankrupt' : prediction})\n\nOutput.to_csv('my_submission.csv', index = False)\n\nprint(\"Submission \")\n","ce2d031e":"from sklearn.metrics import roc_auc_score\n\ndecisionTree = DecisionTreeClassifier()\n\ndecisionTree = decisionTree.fit(X, y)\n\npredictionTree = decisionTree.predict(X_test)\n\nOutput = pd.DataFrame({'id' : test_data.id, 'Bankrupt' : prediction})\n\nOutput.to_csv('my_submissionDecision.csv', index = False)\n\nmodelDecision = DecisionTreeRegressor(max_depth = 5)\nmodelDecision.fit(X,y)\n\nX_test_Dataset2 = pd.DataFrame(data = testNormal, columns = features)\n\npredict2 = modelDecision.predict(X_test_Dataset2)\n\nprint(\"ROC :\")\nrocScore = roc_auc_score(y_true = y_test, y_score = predict2)\n\nprint(rocScore)\n\nprint(\"Accuracy Score :\")\naccuracyScore = accuracy_score(y_test , predict2.round())\nprint(accuracyScore)\n\n\nprint(\"F1 Score :\")\nF1Score = f1_score(y_test, predict2.round())\nprint(F1Score)","25f75860":"\n\n#secondFit = RandomForestRegressor(n_estimators = 1000, max_depth = 20, random_state = 1)\n#second.fit(X, y)\n\nmodel.fit(X,y)\nX_test_Dataset = pd.DataFrame(data = testNormal, columns = features)\n\npredict = model.predict(X_test_Dataset)\n\nprint(\"ROC :\")\nrocScore = roc_auc_score(y_true = y_test, y_score = predict)\n\nprint(rocScore)\n\nprint(\"Accuracy Score :\")\naccuracyScore = accuracy_score(y_test , predict.round())\nprint(accuracyScore)\n\n\nprint(\"F1 Score :\")\nF1Score = f1_score(y_test, predict.round())\nprint(F1Score)\n\n","02ac66cb":"# Drops any Null\/Missing Values","5ac31b8f":"# Histograms of the Data","a18047c3":"# Normalizes Data","ea089e7e":"# Making the Random Forest Regressor","874d5f52":"# Checks to See if there are Outliers in the Data","84d44e25":"# ROC\/AUC, Accuracy, and F1 Score for the Random Forest Regressor","24971341":"# Import Test Data","22d9afd6":"# Decision Tree","a9bcc2c1":"# Import Training Data","6a9f0903":"# Imports","f5bceb98":"# Checks for any Null values in the data","ddeb5a01":"# Splits Training Data"}}