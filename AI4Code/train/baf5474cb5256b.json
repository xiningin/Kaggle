{"cell_type":{"0ea2c65f":"code","b6d4272c":"code","ee7dc93b":"code","5a17ab8d":"code","1ae9b75a":"code","a4b12d2f":"code","5fb0199c":"code","73344815":"code","751d3382":"code","3fb9d394":"code","f929ee68":"code","1d9dd1f9":"code","e4d01700":"code","f2009903":"code","93d52378":"code","22d5c5df":"code","ac6ff821":"code","dc914a41":"code","04e3e765":"code","5f4ae767":"code","afa8dc65":"code","3318d8ff":"code","197c2f55":"code","13fc48ef":"code","d100b67e":"code","4e27129d":"code","12737461":"code","5757b084":"code","9c170c78":"code","d8c915d9":"code","4a904821":"code","bc8621b6":"code","923f2548":"code","fef855fd":"code","590b4d33":"code","e2f84c6e":"code","2ac664bd":"code","3fba5ad0":"markdown","432bf337":"markdown","1e0b256e":"markdown","efd1e5eb":"markdown","47fb8564":"markdown","1e3d7ffa":"markdown","9d694c2c":"markdown","63cda724":"markdown"},"source":{"0ea2c65f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6d4272c":"from IPython.display import HTML\nHTML(\"\"\"\n<style>\nh1,h2,h3 {\n\tmargin: 1em 0 0.5em 0;\n\tfont-weight: 600;\n\tfont-family: 'Titillium Web', sans-serif;\n\tposition: relative;  \n\tfont-size: 36px;\n\tline-height: 40px;\n\tpadding: 15px 15px 15px 2.5%;\n\tcolor: #00018D;\n\tbox-shadow: \n\t\tinset 0 0 0 1px rgba(97,0,45, 1), \n\t\tinset 0 0 5px rgba(53,86,129, 1),\n\t\tinset -285px 0 35px #F2D8FF;\n\tborder-radius: 0 10px 0 15px;\n\tbackground: #d45d00\n    \n}\n<\/style>\n\"\"\")","ee7dc93b":"from tqdm.notebook import tqdm \nimport  matplotlib.pyplot  as plt\nimport pathlib \nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.tools as pts\nimport plotly.graph_objs as go\nimport seaborn as sns\nfrom wordcloud import WordCloud\nfrom folium.plugins import HeatMap\nfrom folium.plugins import FastMarkerCluster\nimport missingno as msno\nPATH = '\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning'","5a17ab8d":"products_info = pd.read_csv(PATH +'\/products_info.csv')\ndistricts_info = pd.read_csv(PATH + '\/districts_info.csv')","1ae9b75a":"readme = open(PATH + '\/README.md')\nreadmes = readme.readlines()\ndisplay(readmes)","a4b12d2f":"!ls '\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data'","5fb0199c":"## merge the engagement_datas \np = pathlib.Path(PATH)\ndatas= list(p.glob('engagement_data\/*'))\nprint('the engagements sum:',len(datas))\nen_datas  = []\nfor en_data in tqdm (datas):\n    en_datas.append(pd.read_csv(en_data))\n    \nengagement_all = pd.concat(en_datas)\ndisplay(engagement_all)\n\n                    ","73344815":"print(\"1\u3001Show The Districts_info info \\n\")\nprint('*'*50+'\\n')\ndisplay(districts_info.info())\nprint('*'*50+'\\n')\nprint('2\u3001Show The Districts_info isnull \\n')\nprint(\"*\"*50+'*')\ndisplay(districts_info.isnull().sum())\nprint('*'*50+'\\n')\nprint('3\u3001Show The Districts_info duplicates \\n')\nprint('*'*50+'\\n')\ndisplay(districts_info.duplicated().sum())\nprint('*'*50+'\\n')\nprint('4\u3001Show The Districts_info basic description \\n')\nprint('*'*50+'\\n')\ndisplay(districts_info.describe())\n","751d3382":"msno.matrix(districts_info,labels=True,fontsize=18)\nplt.show()","3fb9d394":"msno.bar(districts_info,figsize=(12,8),fontsize=20)\nplt.show()","f929ee68":"# the wordcloud\ncloud_state = WordCloud(width=2000,height=1200).generate(\" \".join(districts_info['state'].astype(str)))\nplt.figure(figsize=(40,10))\nplt.imshow(cloud_state)\nplt.axis('off')","1d9dd1f9":"cloud_locale = WordCloud(width=1500,height=1200).generate(\" \".join(districts_info['locale'].astype(str)))\nplt.figure(figsize=(40,10))\nplt.imshow(cloud_locale)\nplt.axis('off')","e4d01700":"plt.figure(figsize=(25,15))\nsns.set_theme(style='whitegrid')\nax = sns.countplot(x=\"state\", data=districts_info)\nplt.xticks(rotation=90,fontsize=20)\nplt.xlabel('state',fontsize=25,color='r')\nplt.ylabel('count',fontsize=25,color='r')\nplt.title('Locale Info Count',fontsize=30,color='g')\nplt.show()\n","f2009903":"labels = list(districts_info.locale.value_counts().index)\nvalue = districts_info['state'].value_counts()\nfig = go.Figure(data=go.Pie(labels=labels,\n                             values=value))\n\n\nfig.update_traces(textposition='inside', hoverinfo='percent+label',textinfo='label+percent')  # \u5c06\u6587\u672c\u7684\u4fe1\u606f\u653e\u5728\u91cc\u9762\nfig.update_layout(title='Locale Info',titlefont={'size':25})\nfig.show()\n\n\n","93d52378":"plt.figure(figsize=(25,15))\nsns.set_theme(style='whitegrid')\nax = sns.countplot(x=\"locale\", data=districts_info)\nplt.xticks(rotation=90,fontsize=20)\nplt.xlabel('state',fontsize=25,color='g')\nplt.ylabel('count',fontsize=25,color='g')\nplt.title('State Info Count',fontsize=30,color='g')\nplt.show()\n","22d5c5df":"plt.figure(figsize=(25,18))\nlabels = list(districts_info.state.value_counts().index)\nvalue = districts_info['state'].value_counts()\nfig = go.Figure(data=go.Pie(labels=labels,\n                             values=value))\n\n\nfig.update_traces(textposition='inside', hoverinfo='percent+label',textinfo='label+percent')  # \u5c06\u6587\u672c\u7684\u4fe1\u606f\u653e\u5728\u91cc\u9762\nfig.update_layout(title='State Info',titlefont={'size':25})\nfig.show()\n","ac6ff821":"plt.figure(figsize=(15,10))\nsns.countplot(data=districts_info,x='pct_black\/hispanic') \nplt.ylabel('Counts',fontsize=15)\nplt.xlabel('pct_black\/hispanic',fontsize=15)\nplt.show()\n","dc914a41":"plt.figure(figsize=(15,10))\nsns.countplot(data=districts_info,x='pct_free\/reduced') \nplt.ylabel('Counts',fontsize=15)\nplt.xlabel('pct_free\/reduced',fontsize=15)\nplt.show()\n","04e3e765":"plt.figure(figsize=(15,10))\nsns.countplot(data=districts_info,x='county_connections_ratio') \nplt.ylabel('Counts',fontsize=15)\nplt.xlabel('county_connections_ratio',fontsize=15)\nplt.show()","5f4ae767":"## loading the data analysis\nfrom sklearn.preprocessing import LabelEncoder\nlist_map = []\ndistricts = districts_info.copy()\nvalue1=list(districts.state)\nclass_le = LabelEncoder()\nint_state1 = class_le.fit_transform(value1)\nlist_map.append(int_state1)\nvalue2=list(districts.locale)\nint_state2 = class_le.fit_transform(value2)\nlist_map.append(int_state2)\nvalue3=list(districts['pct_black\/hispanic'])\nint_state3 = class_le.fit_transform(value3)\nlist_map.append(int_state3)\nvalue4=list(districts['pct_free\/reduced'])\nint_state4 = class_le.fit_transform(value4)\nlist_map.append(int_state4)\nvalue5=list(districts['county_connections_ratio'])\nint_state5 = class_le.fit_transform(value5)\nlist_map.append(int_state5)\ndf_map = pd.DataFrame({'state':int_state1,'locale':int_state2,'pct_black\/hispanic':int_state3,'pct_free\/reduced':int_state4,'county_connections_ratio':int_state5})\nplt.figure(figsize = (15,10))\nsns.heatmap(df_map.corr())\nplt.yticks(rotation = 360,fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.title(\"The districts's data correlation \\n\")\nplt.show()\n","afa8dc65":"\nimport folium\nnorth_america_map = folium.Map(location=[38.9, -77.05], tiles='https:\/\/mt.google.com\/vt\/lyrs=s&x={x}&y={y}&z={z}', zoom_start=3,attr='default')\nnorth_america_map\n","3318d8ff":"locations = pd.DataFrame({'State':districts_info['state'].unique()})\n\n\nfrom geopy.geocoders import Nominatim\n\ngeolocator=Nominatim(user_agent=\"app\")\nlat=[]\nlon=[]\nfor location in locations['State']:\n    location = geolocator.geocode(location)    \n    if location is None:\n        lat.append(np.nan)\n        lon.append(np.nan)\n    else:\n        lat.append(location.latitude)\n        lon.append(location.longitude)\n\n\n\nlocations['lat'] = lat\nlocations['lon'] = lon\n\n\n","197c2f55":"locations_again = pd.DataFrame(districts_info['state'].value_counts().reset_index())\nlocations_again.columns=['State','count']\nlocation=locations_again.merge(locations,on='State',how=\"left\").dropna()\n","13fc48ef":"FastMarkerCluster(location[['lat','lon','count']],zoom=20,radius=20).add_to(north_america_map)\nnorth_america_map","d100b67e":"print(\"1\u3001Show The Products_info info \\n\")\nprint('*'*50+'\\n')\ndisplay(products_info.info())\nprint('*'*50+'\\n')\nprint('2\u3001Show The Products_info isnull \\n')\nprint(\"*\"*50+'*')\ndisplay(products_info.isnull().sum())\nprint('*'*50+'\\n')\nprint('3\u3001Show The Products_info duplicates \\n')\nprint('*'*50+'\\n')\ndisplay(products_info.duplicated().sum())\nprint('*'*50+'\\n')\nprint('4\u3001Show The Products_info basic description \\n')\nprint('*'*50+'\\n')\ndisplay(products_info.describe())\n","4e27129d":"print('\\n')\nplt.figure(figsize=(15,12))\nmsno.matrix(products_info,labels=True,fontsize=15)\nplt.title('The Matrix of the missing value',fontsize=20)\nplt.figure(figsize=(15,12))","12737461":"print('\\n')\nplt.figure(figsize=(15,12))\nmsno.bar(products_info,fontsize=15)\nplt.title('The bar of the missing value',fontsize=20)\nplt.show()","5757b084":"\nplt.figure(figsize=(18,15))\nlabels = list(products_info['Sector(s)'].value_counts().index)\nvalues = products_info['Sector(s)'].value_counts().values\ncolors = ['#FF0000', '#E066FF']\n\ntrace = [go.Pie(labels = labels, \n                values = values,\n                rotation = 30,\n                opacity = 1,\n                showlegend = True,\n                hoverinfo = 'label+percent', \n                textinfo = 'percent',#textinfo = 'value',\n                insidetextorientation='radial',\n                textfont = dict(size = 30, color = 'white'),\n                marker = dict(colors = colors, \n                   line = dict(color = '#000000',width=2)))]\nfig = go.Figure(data = trace)\nfig.show()","9c170c78":"plt.figure(figsize=(20,15))\nlabels = list(products_info['Primary Essential Function'].value_counts().index)\nvalues = products_info['Primary Essential Function'].value_counts().values\nfig = px.pie(products_info, values=values, names=labels,hole=.3,title='The Primary Essential Function distribution')\n\nfig.update_traces(textposition='inside') # \u6587\u5b57\u4fe1\u606f\u5728\u91cc\u9762\nfig.update_layout(uniformtext_minsize=15,  # \u6587\u672c\u4fe1\u606f\u7684\u6700\u5c0f\u503c\n                  uniformtext_mode='hide'  # \u5c0f\u4e8e\u6700\u5c0f\u503c\u5219\u88ab\u9690\u85cf\n                 )\n","d8c915d9":"plt.figure(figsize=(15, 10))\nsns.countplot(y='Primary Essential Function', data=products_info, order=products_info[\"Primary Essential Function\"].value_counts().index[:15])\nplt.title(\"The Primary Essential Function distribution\",font=\"Serif\", size=20)\nplt.show()\n","4a904821":"## loading the data analysis\nfrom sklearn.preprocessing import LabelEncoder\npro_list = []\nproducts = products_info.copy()\nvalue1=list(products['LP ID'])\nclass_le = LabelEncoder()\nint_state1 = class_le.fit_transform(value1)\npro_list.append(int_state1)\nvalue2=list(products.URL)\nint_state2 = class_le.fit_transform(value2)\npro_list.append(int_state2)\nvalue3=list(products['Product Name'])\nint_state3 = class_le.fit_transform(value3)\npro_list.append(int_state3)\nvalue4=list(products['Provider\/Company Name'])\nint_state4 = class_le.fit_transform(value4)\npro_list.append(int_state4)\nvalue5=list(products['Sector(s)'])\nint_state5 = class_le.fit_transform(value5)\nlist_map.append(int_state5)\nvalue6=list(products['Primary Essential Function'])\nint_state6 = class_le.fit_transform(value6)\npro_list.append(int_state6)\ndf_map = pd.DataFrame({'state':int_state1,'locale':int_state2,'pct_black\/hispanic':int_state3,'pct_free\/reduced':int_state4,'county_connections_ratio':int_state5,'Primary Essential Function':int_state6})\nplt.figure(figsize = (15,10))\nsns.heatmap(df_map.corr())\nplt.yticks(rotation = 360,fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.title(\"The products's data correlation \\n\")\nplt.show()","bc8621b6":"display(engagement_all)\nprint(\"1\u3001Show The Engagement_all info \\n\")\nprint('*'*50+'\\n')\ndisplay(engagement_all.info())\nprint('*'*50+'\\n')\nprint('2\u3001Show The Engagement_all isnull \\n')\nprint(\"*\"*50+'*')\ndisplay(engagement_all.isnull().sum())\nprint('*'*50+'\\n')\nprint('3\u3001Show The Engagement_all duplicates \\n')\nprint('*'*50+'\\n')\ndisplay(engagement_all.duplicated().sum())\nprint('*'*50+'\\n')\nprint('4\u3001Show The Engagement_all basic description \\n')\nprint('*'*50+'\\n')\ndisplay(engagement_all.describe())\n","923f2548":"print(\"The product_info's lp_id nunique:\" ,products_info['LP ID'].nunique())\nprint(\"The engagement_all's lp_id nunique:\",engagement_all.lp_id.nunique())","fef855fd":"engagement_all['date'] = pd.to_datetime(engagement_all['time']).dt.date\nengagement_all['month']= pd.to_datetime(engagement_all['time']).dt.month_name()\nengagement_all['weekday']= pd.to_datetime(engagement_all['time']).dt.day_name()","590b4d33":"display(engagement_all)","e2f84c6e":"plt.figure(figsize=(15,12))\nsns.set_style('whitegrid')\nsns.stripplot(x=\"month\", y=\"pct_access\", data=engagement_all)\nplt.show()","2ac664bd":"plt.figure(figsize=(15,12))\nsns.stripplot(x=\"weekday\", y=\"pct_access\",\n                   data=engagement_all, palette=\"Set2\", size=20, marker=\"D\",\n                   edgecolor=\"gray\", alpha=.25)\nplt.show()","3fba5ad0":"## Exploratory of the data","432bf337":"# Engagement_all data","1e0b256e":"# Products_info","efd1e5eb":"# Districts_data","47fb8564":"## data visualization","1e3d7ffa":"## data visualization","9d694c2c":"## Exploratory the data","63cda724":"<h1 style=\"background-color:#fec5bb;font-size:20px;color:#00033E;font-weight : bold\">\u270c\ud83c\udffe\u270c\ud83c\udffeThank you very much for seeing here. I'm a newcomer. If you like it,Please vote it!! I'll KEEP DOING IT!!<\/h1>\n"}}