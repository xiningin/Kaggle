{"cell_type":{"2a5d6b5e":"code","91ae4912":"code","9a993c43":"code","344ec46d":"code","2b4fe4ab":"code","be0542ea":"code","2f03d428":"code","30d47358":"code","dd9db56e":"code","89a9555a":"code","c288afe3":"code","41990502":"code","449b85ea":"code","59ce35e5":"code","f36e2614":"code","6539ae04":"code","f5ce7e97":"code","c139067d":"code","e2fc49c8":"code","62c05dd9":"code","0860592f":"code","8328ed8e":"code","c9e4ff13":"code","8ee680f3":"code","bdd1875d":"code","ba831385":"code","a28bd98f":"code","a4f9b320":"code","4d4c412b":"code","474c59b1":"code","fd2d870b":"code","164eb330":"code","297e618b":"code","d7a50041":"code","f4299a7a":"code","f0bddf14":"code","b5ded7df":"code","de4e1ef5":"code","fd6292c2":"code","59f2ac0d":"markdown","6c811db3":"markdown","d7fd6b87":"markdown","f96c37dc":"markdown","758be303":"markdown","c0aa9996":"markdown","d02d82bf":"markdown","f946e543":"markdown","ec57a033":"markdown","cb02222e":"markdown","2ffbbac8":"markdown","a9a82e07":"markdown","da1ebdab":"markdown","58f2c40e":"markdown","7fd2de1b":"markdown","445dfec9":"markdown","e850dbfb":"markdown","0a508c01":"markdown","f04d3024":"markdown","7e5d9b31":"markdown","a56d89f6":"markdown","8f198074":"markdown"},"source":{"2a5d6b5e":"import numpy as np\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport cv2\nimport matplotlib.pyplot as plt\n\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\nimport glob\nimport zipfile","91ae4912":"def plot_image(number):\n    \"\"\"\n    \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 3 \u0432\u0438\u0434\u0430 \u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438: [BGR, Grayscale, RGB] \u0441 \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\n    \"\"\"\n    fig = plt.figure(figsize=(16, 10))\n    image = cv2.imread(f\"{dirname}\/0{number}.png\")\n    \n    fig.add_subplot(1, 3, 1)\n    plt.imshow(image)\n    plt.title('BGR', fontsize=15)\n    \n    fig.add_subplot(1, 3, 2)\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY), cmap='gray')\n    plt.title('Grayscale', fontsize=15)\n    \n    fig.add_subplot(1, 3, 3)\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.title('RGB', fontsize=15)\n    \n\n# Validation image: 0 + [801; 900]\nip = widgets.interactive(plot_image,\n                         number=widgets.IntSlider(min=801, max=900, step=1, value=866, \n                                                  description=r'$Number\\;of\\;image$',\n                                                  style={'description_width': 'initial'}, \n                                                  layout=dict(width='80%')))\n\ndisplay(widgets.HBox(ip.children[:1]))\ndisplay(ip.children[-1])\nip.update()","9a993c43":"def images_save(cv_format, name_directory, save_directory):\n    \"\"\"\n    \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \"png\" \u0444\u0430\u0439\u043b\u044b \u0438\u0437 name_directory \u0432 save_directory, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u043e\u0440\u043c\u0430\u0442 cv_format\n    \"\"\"\n    images = [(os.path.basename(file), \n               cv2.cvtColor(cv2.imread(file), cv_format)) for file in glob.glob(f\"{name_directory}\/*.png\")]\n    \n    save_list = [cv2.imwrite(filename=f\"{save_directory}\/{name_file}\", img=image) for name_file, image in images]\n    return images, all(save_list)","344ec46d":"open_dirr = '\/kaggle\/input\/movavi-dataset\/DIV2K_valid_HR'\nsave_dirr = 'original'\n\n!mkdir -p {save_dirr}\n\nlist_images, flag = images_save(cv2.COLOR_BGR2GRAY, open_dirr, save_dirr)\nflag","2b4fe4ab":"def plot_directory(name_directory, count=None, gray=False):\n    \"\"\"\n    \u041e\u0442\u0440\u0438\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u0442 count \"png\" \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 name_directory \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \n    \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0432 grayscale, \u0435\u0441\u043b\u0438 gray=True\n    \"\"\"\n    images = []\n    \n    list_png = glob.glob(f\"{name_directory}\/*.png\")\n    count = len(list_png) if count == None else count\n    \n    fig = plt.figure(figsize=(20, count * 2))\n    \n    for i, png in enumerate(sorted(list_png)[:count]):\n        # \u043f\u0443\u0441\u0442\u044c 3 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n        fig.add_subplot(count \/\/ 3 + 1, 3, i + 1)\n        image = cv2.imread(png, 0 if gray else 1)\n        plt.imshow(image, cmap='gray' if gray else None)\n        plt.title(os.path.basename(png), fontsize=15)\n\n        images.append((os.path.basename(png), image))\n        \n    return images\n\n\ncount_images = 10\nlist_images = plot_directory(name_directory=save_dirr, count=count_images, gray=True)","be0542ea":"negativ = lambda image: cv2.bitwise_not(image)","2f03d428":"def list_save(l, save_directory, fun_format, **other):\n    \"\"\"\n    \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439 l \u0432 save_directory, \n    \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e fun_format c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 other\n    \"\"\"\n    for elem in l:\n        pixels = fun_format(elem[1], **other)\n        cv2.imwrite(filename=f\"{save_directory}\/{elem[0]}\", img=pixels)","30d47358":"save_dirr = 'negative'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, negativ)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","dd9db56e":"logaryth = lambda image: cv2.normalize(np.uint8(np.log1p(image)), None, alpha=0, beta=255, \n                                       norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)\n\n# \u0442\u043e\u0447\u043d\u043e \u0432 [0; 255]\nlogaryth2 = lambda image: np.uint8(255 \/ np.log1p(np.max(image)) * np.log1p(image))\n\n# (np.clip(> 255) -> 255) -> uint8\nlogaryth3 = lambda image, c: np.uint8(np.clip(c * np.log1p(np.int64(image)), 0, 255))","89a9555a":"fig = plt.figure(figsize=(18, 14))\n\nimage = cv2.imread('.\/original\/0801.png')\nfig.add_subplot(1, 4, 1)\nplt.imshow(image)\nplt.title('Original', fontsize=15)\n\nfig.add_subplot(1, 4, 2)\nplt.imshow(logaryth(image))\nplt.title('logaryth', fontsize=15)\n\nfig.add_subplot(1, 4, 3)\nplt.imshow(logaryth2(image))\nplt.title('logaryth2', fontsize=15)\n\nc = 35\nfig.add_subplot(1, 4, 4)\nplt.imshow(logaryth3(image, c))\nplt.title('logaryth3', fontsize=15)\n\nplt.show()","c288afe3":"save_dirr = 'logarythm'\n!mkdir -p {save_dirr}\n\n# \u043c\u043e\u0436\u043d\u043e logaryth \/ logaryth3\nlist_save(list_images, save_dirr, logaryth2)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","41990502":"gamm = lambda image, c, gamma: cv2.LUT(image, np.array([np.uint8(np.clip(c * ((i \/ 255.0) ** gamma), 0, 255)) \\\n                                              for i in np.arange(0, 256)]).astype(\"uint8\"))","449b85ea":"save_dirr = 'gamma'\n!mkdir -p {save_dirr}\n\nc = 255\ngamma = 2.5\nlist_save(list_images, save_dirr, gamm, c=c, gamma=gamma)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","59ce35e5":"equalization = lambda image: cv2.equalizeHist(image)","f36e2614":"plt.subplots(figsize=(16, 10))\n\nimage = cv2.imread('.\/original\/0801.png', 0)\n\nequ = equalization(image)\n\n# -> hist ~ Rav() \u043f\u043e \u0431\u043b\u043e\u043a\u0430\u043c\nclahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))\ncl1 = clahe.apply(image)\n\nres = np.hstack((image, equ, cl1)) \n\nplt.imshow(res, cmap='gray')\nplt.title('Original \/ Histogram Equalization \/ CLANE', fontsize=15)\nplt.show()","6539ae04":"save_dirr = 'histo'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, equalization)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","f5ce7e97":"def linear_smooth(image, method, width, height):\n    \"\"\"\n    \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 method \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 image \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043e\u043a\u043d\u0430 [width; height] \n    \"\"\"\n    options = {\n        'average': cv2.blur(image, (width, height)),\n        'gaussian': cv2.GaussianBlur(image, (width, height), 0)\n    }\n    return options[method]","c139067d":"width, height = 17, 17\nimage2 = linear_smooth(image, 'gaussian', width, height)\nimage3 = linear_smooth(image, 'average', width, height)\n\nplt.subplots(figsize=(16, 10))\n\nplt.imshow(np.hstack((image, image2, image3)), cmap='gray')\nplt.title(f'Original \/ Gaussian({width}; {height}) \/ Average({width}; {height})', fontsize=15)\nplt.show()","e2fc49c8":"save_dirr = 'smooth'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, linear_smooth, method='average', width=width, height=height)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","62c05dd9":"# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u0438\u043a\u0441\u0435\u043b\u044f (64 \u0431\u0438\u0442\u0430)\n# \u0437\u0430\u0442\u0435\u043c \u0432 uint8 (p.s. \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 -> \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435; \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 > 255 -> 255), \u0442.\u0435. \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439\nlaplacian1 = lambda image: cv2.convertScaleAbs(cv2.Laplacian(image, cv2.CV_64F))\n\n# \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 [0; 255] \u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c: \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 -> 0\nlaplacian2 = lambda image: cv2.Laplacian(image, ddepth=-1, ksize=1)","0860592f":"plt.subplots(figsize=(14, 10))\nplt.imshow(np.hstack([laplacian1(image), laplacian2(image)]), cmap='gray')\nplt.title('\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d \/ \u0421 \u043f\u043e\u0442\u0435\u0440\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438', fontsize=15)\nplt.show()","8328ed8e":"save_dirr = 'laplassian'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, laplacian1)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","c9e4ff13":"save_dirr = 'laplassian2'\n!mkdir -p {save_dirr}\n\n# \u0432\u0442\u043e\u0440\u0430\u044f \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u044f\nlist_save(list_images, save_dirr, laplacian2)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","8ee680f3":"def standart(image):\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 (\u0431\u0435\u0437 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439) image \u0432 uint8\n    \"\"\"\n    image2 = image.copy()\n    image2[image2 < 0.0] = 0.0\n    image2[image2 > 255.0] = 255.0\n    image2 = image2.astype(np.uint8)\n    return image2\n\n\n# abs_uint8(f + c * abs(lapl))\nsharp_laplacian = lambda image, c: cv2.convertScaleAbs(np.int64(image) + c * cv2.Laplacian(image, cv2.CV_64F))","bdd1875d":"plt.subplots(figsize=(18, 14))\nplt.imshow(np.hstack([standart(np.int64(image) -1 * cv2.Laplacian(image, cv2.CV_64F)), \n                      sharp_laplacian(image, -1)]), cmap='gray')\nplt.title('\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d (\u0441 = -1) \/ \u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 (\u0441 = -1)', fontsize=15)\nplt.show()","ba831385":"save_dirr = 'sharp'\n!mkdir -p {save_dirr}\n\n# c = -3 \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0438\u0445 \u043a\u043e\u043d\u0442\u0443\u0440\u043e\u0432\nlist_save(list_images, save_dirr, sharp_laplacian, c=-3)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","a28bd98f":"# \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 -> abs(intensity)\nsobel_X = lambda image: np.uint8(np.abs(cv2.Sobel(image, cv2.CV_64F, 1, 0)))\nsobel_Y = lambda image: np.uint8(np.abs(cv2.Sobel(image, cv2.CV_64F, 0, 1)))\n\n# Sobel - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 (X, Y)\nsobel_XY = lambda image: cv2.bitwise_or(sobel_X(image), sobel_Y(image))","a4f9b320":"plt.subplots(figsize=(20, 16))\nplt.imshow(np.hstack([sobel_X(image), sobel_Y(image), sobel_XY(image)]), cmap='gray')\nplt.title(r'Sobel: X \/ Y \/ X  $\\vee$ Y', fontsize=15)\nplt.show()","4d4c412b":"save_dirr = 'sobel'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, sobel_XY)\n_ = plot_directory(name_directory=save_dirr, count=count_images, gray=False)","474c59b1":"def gradation_cor(image, c):\n    \"\"\"\n    \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044e image \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 c\n    \"\"\"\n    image2 = image.copy()\n    image2 = image2 - image2.min()\n    image2 = c * image2 \/ image2.max()\n    return image2","fd2d870b":"image = cv2.imread('..\/input\/moon-opencv\/moon.jpg', 0)\n\n# \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430\nkernel = np.ones((3, 3))\nkernel[1,1] = -8\n\nlaplassian_64bit = cv2.filter2D(image, cv2.CV_64F, kernel)\n# laplassian_64bit = cv2.Laplacian(image, cv2.CV_64F)\n\ngradcor_64bit = gradation_cor(laplassian_64bit, 255)\n\nplt.subplots(figsize=(16, 12))\nplt.imshow(np.hstack([image, standart(laplassian_64bit), standart(gradcor_64bit)]), cmap='gray')\nplt.title('\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 (1) \/ \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d \/ \u0413\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043d\u0430 \u043b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d\u0435 (2)', fontsize=15)\nplt.show()\n\nplt.subplots(figsize=(10, 10))\nplt.imshow(np.hstack([standart(np.int64(image) - 1 * laplassian_64bit), \n                      standart(np.int64(image) - 1 * gradcor_64bit)]), cmap='gray')\nplt.title(r'\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 - 1 $\\cdot$ \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d \/ \u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 - 1 $\\cdot$ \u0413\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d\u0430 (3)')\nplt.show()","164eb330":"sobel = sobel_XY(image)\nsobel_smoothed = linear_smooth(sobel, method='average', width=5, height=5)","297e618b":"plt.subplots(figsize=(12, 10))\n# standart == \u043e\u0431\u044b\u0447\u043d\u043e\u043c\u0443\nplt.imshow(np.hstack([standart(sobel), standart(sobel_smoothed)]), cmap='gray')\nplt.title(r'\u0421\u043e\u0431\u0435\u043b\u044c X $\\vee$ Y (4) \/ \u0421\u043e\u0431\u0435\u043b\u044c $\\wedge$ Average (5)', fontsize=15)\nplt.show()","d7a50041":"laplacian_sobel = cv2.bitwise_and(standart(laplassian_64bit), sobel_smoothed)\nlog = linear_smooth(standart(laplassian_64bit), method='gaussian', width=5, height=5)","f4299a7a":"plt.subplots(figsize=(16, 12))\nplt.imshow(np.hstack([laplacian_sobel, standart(laplassian_64bit), log]), cmap='gray')\nplt.title(r'\u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\cdot$ \u0441\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0421\u043e\u0431\u0435\u043b\u044c (6) \/ \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d \/ \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\wedge$ \u0413\u0430\u0443\u0441\u0441\u0438\u0430\u043d', fontsize=15)\nplt.show()","f0bddf14":"plt.subplots(figsize=(16, 12))\nplt.imshow(np.hstack([standart(np.int64(image) - 1 * np.int64(laplacian_sobel)), \n                      gamm(image, 255, 0.5)]), cmap='gray')\nplt.title(r'\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 - 1 $\\cdot$ \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\cdot$ \u0441\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0421\u043e\u0431\u0435\u043b\u044c (7) \/ + \u0413\u0430\u043c\u043c\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 $(\\gamma = 0.5)$ (8)',\n         fontsize=15)\nplt.show()","b5ded7df":"def combination(image, kernel):\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0451\u043d\u043d\u043e\u0435 \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435:\n    [\u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435, \u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 - \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d, \u0421\u043e\u0431\u0435\u043b\u044c, \u0418\u0441\u0445\u043e\u0434\u043d\u043e\u0435 - \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d * \u0421\u043e\u0431\u0435\u043b\u044c, \u0413\u0430\u043c\u043c\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e]\n    kernel - \u043e\u043a\u043d\u043e \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d\u0430\n    \"\"\"\n    laplassian_64bit = cv2.filter2D(image, cv2.CV_64F, kernel)\n    gradcor_64bit = gradation_cor(laplassian_64bit, 255)\n    \n    sobel = sobel_XY(image)\n    sobel_smoothed = linear_smooth(sobel, method='average', width=5, height=5)\n    laplacian_sobel = cv2.bitwise_and(standart(laplassian_64bit), sobel_smoothed)\n    log = linear_smooth(standart(laplassian_64bit), method='gaussian', width=5, height=5)\n\n    return np.hstack([image, standart(np.int64(image) - 1 * laplassian_64bit), standart(sobel), \n                          standart(np.int64(image) - 1 * np.int64(laplacian_sobel)),\n                                  gamm(image, 255, 0.5)])","de4e1ef5":"save_dirr = 'enhancement'\n!mkdir -p {save_dirr}\n\nlist_save(list_images, save_dirr, combination, kernel=kernel)\n\nfor image in sorted(glob.glob(f\"{save_dirr}\/*.png\")):\n    plt.subplots(figsize=(20, 10))\n    plt.imshow(cv2.imread(image), cmap='gray')\n    plt.title(fr\"{image} \/ - \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d \/ \u0421\u043e\u0431\u0435\u043b\u044c \/ - \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\cdot$ \u0421\u043e\u0431\u0435\u043b\u044c \/ - \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\cdot$ \u0421\u043e\u0431\u0435\u043b\u044c \u0441 \u0433\u0430\u043c\u043c\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c\",\n             fontsize=15)\n    plt.show()","fd6292c2":"def zip_and_remove(path):\n    \"\"\"\n    \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0432\u0441\u0435 \u043f\u0430\u043f\u043a\u0438 \u0432 zip-\u0444\u0430\u0439\u043b\u044b, \u0443\u0434\u0430\u043b\u044f\u044f \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445\n    [\u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435 kernel-\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u0441\u043e\u0442\u0435\u043d \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439]\n    \"\"\"\n    ziph = zipfile.ZipFile(f'{path}.zip', 'w', zipfile.ZIP_DEFLATED)\n    \n    for root, dirs, files in os.walk(path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            ziph.write(file_path)\n            os.remove(file_path)\n    \n    ziph.close()\n\n    \nfor dirname, dirs, filenames in os.walk('\/kaggle\/working'):\n    for dirname in dirs:\n        zip_and_remove(dirname)","59f2ac0d":"\u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e output-\u0430 \u043f\u0440\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435 kernel-\u0430","6c811db3":"\u041f\u0440\u0438\u043c\u0435\u0440","d7fd6b87":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","f96c37dc":"## 10) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 enhancement\n\n1. \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n2. \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d (\u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430) + \u0413\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f\n3. 1 + 2\n4. \u0421\u043e\u0431\u0435\u043b\u044c + \u0413\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f\n5. \u0421\u043e\u0431\u0435\u043b\u044c \u0441\u043e \u0441\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u043c + \u0413\u0440\u0430\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f\n6. \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d $\\cdot$ \u0441\u0433\u043b\u0430\u0436\u0435\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\n7. 1 + 6\n8. 7 \u0441 \u0433\u0430\u043c\u043c\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c","758be303":"## 7 \/ 9) \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \"\u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u043a\u043e\u0441\u0442\u0438 \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d\u0430\" + \"\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 \u043b\u0430\u043f\u043b\u0430\u0441\u0438\u0430\u043d\u043e\u043c \u0434\u043b\u044f \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0430\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0438 sharp + laplassian\n\n\u0414\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u044b\u0439 $\\nabla^2 f(I) = f(x + 1, y) + f(x - 1, y) + f(x, y + 1) + f(x, y - 1) - 4 \\cdot f(x, y)$","c0aa9996":"## \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f grayscale \u0432 \u043f\u0430\u043f\u043a\u0443 original\n\n\u0422.\u043a. \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 dataset-\u0430 \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f - \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 RGB $\\uparrow$ $\\Rightarrow$ \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0443 \u0432 grayscale \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044e ","d02d82bf":"Average \u0438\u043b\u0438 \u0413\u0430\u0443\u0441\u0441\u0438\u0430\u043d","f946e543":"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u043a\u0430\u0447\u0430\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 zip - \u0444\u0430\u0439\u043b\u0430 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u044b \u0432 input","ec57a033":"$res (I) =  \\neg\\;array (I) \\backsim s(intensity) = (L - 1) - intensity, L - 1 = max(intensity)$","cb02222e":"## 2) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 logarythm\n\n$s = c \\cdot log(1 + r)$\n\n\u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0432\u0435\u0442\u0430:\n\n1. c = 1; + \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f image\n2. c = $\\frac{255}{log(1 + max(intensity))}$\n3. c = Constant; + \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0443 [0; 255]\n\n2 - \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0435\u0435\u0435","2ffbbac8":"\u041d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0437 \u043a\u043d\u0438\u0433\u0438","a9a82e07":"## 4) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u044d\u043a\u0432\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 histo\n\n$\\tilde f(I) \\rightarrow  \\tilde f'(I) \\backsim Rav[0; L - 1]$\n\n$\\tilde f(I) \\leftarrow histogram$","da1ebdab":"## 8) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0421\u043e\u0431\u0435\u043b\u044f\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 sobel\n\n$s = |g_x| + |g_y|$","58f2c40e":"## 3 \/ 5) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u0433\u0430\u043c\u043c\u0430-\u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 gamma\n\n$s = c \\cdot r^{\\;\\gamma}, r \\rightarrow [0; 1]$","7fd2de1b":"\u041f\u0440\u0438\u043c\u0435\u0440","445dfec9":"\u0434\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u044b\u0439 $\\nabla^2 f(I)$ \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u043a $\\Rightarrow$ \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0435\u0433\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u043a [0; 255] \u0441\u0432\u0435\u0441\u0442\u0438: $f(I) + c \\cdot \\nabla^2 f(I)$","e850dbfb":"## 1) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \"\u0447\u0435\u0440\u043d\u043e-\u0431\u0435\u043b\u043e\u0435 (\u0427\/\u0411) \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 -> \u043d\u0435\u0433\u0430\u0442\u0438\u0432\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 negative","0a508c01":"## 6) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \"\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0427\/\u0411 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\" \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 smooth","f04d3024":"\u0414\u0430\u043b\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f $\\mathbf{\u043f\u0435\u0440\u0432\u044b\u0435\\;\u0434\u0435\u0441\u044f\u0442\u044c}$ \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0442\u0430 \u0447\u0435\u0440\u043d\u043e-\u0431\u0435\u043b\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u043f\u0430\u043f\u043a\u0435 original, \u0430 \u0442\u0430\u043a\u0436\u0435 \n$\\mathbf{\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b\\;\u0442\u0440\u0435\u0442\u044c\u0435\u0439\\;\u0433\u043b\u0430\u0432\u044b}$ \u0438 $\\mathbf{\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e\\;\u0434\u043b\u044f\\;opencv}$ \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0438\u0436\u0435\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 python \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438\u0437 opencv","7e5d9b31":"## \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u043f\u0430\u043f\u043a\u0435","a56d89f6":"\u041b\u0430\u043f\u043b\u0430\u0441\u0441\u0438\u0430\u043d (\u0432 \u0442.\u0447. \u0441 \u0432\u044b\u0447\u0435\u0442\u043e\u043c \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e) + 4 + 7 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438 (\u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c)\n\n\u0412 \u043a\u043d\u0438\u0433\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f","8f198074":"\u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442"}}