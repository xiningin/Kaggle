{"cell_type":{"bc6509b0":"code","f6563c20":"code","f5739706":"code","90c2aff7":"code","cf475f11":"code","f67ceff1":"code","8a4628ea":"code","3ca75ad6":"code","60edb9e2":"code","3d4e0a11":"code","eec2404f":"code","8cfdc5df":"code","225089ac":"code","b499e7fd":"code","73630a65":"code","cfb51137":"markdown","ea77165e":"markdown","64985664":"markdown"},"source":{"bc6509b0":"from types import SimpleNamespace\nfrom functools import lru_cache\nimport os\nimport time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport pandas as pd\nimport numpy as np\nimport scipy.io.wavfile\nimport scipy.fftpack\nimport scipy.linalg\nimport torch\nimport torch.utils.data as data\nimport torch.nn as nn\nimport torch.optim as optim\nimport math","f6563c20":"# 95% Confidence Interval for AUC. Hanley and McNeil (1982). https:\/\/gist.github.com\/doraneko94\/e24643136cfb8baf03ef8a314ab9615c\ndef roc_auc_score_ci(y_true, y_score, positive=1):\n    AUC = roc_auc_score(y_true, y_score)\n    N1 = sum(y_true == positive)\n    N2 = sum(y_true != positive)\n    Q1 = AUC \/ (2 - AUC)\n    Q2 = 2*AUC**2 \/ (1 + AUC)\n    SE_AUC = math.sqrt((AUC*(1 - AUC) + (N1 - 1)*(Q1 - AUC**2) + (N2 - 1)*(Q2 - AUC**2)) \/ (N1*N2))\n    lower = AUC - 1.96*SE_AUC\n    upper = AUC + 1.96*SE_AUC\n    if lower < 0:\n        lower = 0\n    if upper > 1:\n        upper = 1\n    return AUC, (lower, upper)","f5739706":"# Create a dataset with (key, wave_file, target_id) entries\ndef make_dataset(kaldi_path, class_to_id):\n    text_path = os.path.join(kaldi_path, 'text')     # labels\n    wav_path = os.path.join(kaldi_path, 'wav.scp')   # audio files\n\n    key_to_word = dict()\n    key_to_wav = dict()\n    \n    with open(wav_path, 'rt') as wav_scp:\n        for line in wav_scp:\n            key, wav = line.strip().split(' ', 1)\n            key_to_wav[key] = wav\n            key_to_word[key] = None # default\n\n    if os.path.isfile(text_path):\n        with open(text_path, 'rt') as text:\n            for line in text:\n                key, word = line.strip().split(' ', 1)\n                key_to_word[key] = word\n\n    wavs = []\n    for key, wav_command in key_to_wav.items():\n        word = key_to_word[key]\n        word_id = class_to_id[word] if word is not None else -1 # default for test\n        wav_item = [key, wav_command, word_id]\n        wavs.append(wav_item)\n\n    return wavs","90c2aff7":"def wav_read(path):\n    sr, y = scipy.io.wavfile.read(path)\n    y = y\/32768 # Normalize to -1..1\n    return y, sr","cf475f11":"vggish = torch.hub.load('harritaylor\/torchvggish', 'vggish')\nvggish.cuda().eval()","f67ceff1":"# The model use the output of VGGish (time averaged)\nparam_cache = dict()\ndef param_loader(path, max_seconds):\n    try:\n        y = param_cache[path]\n    except:\n        y, sfr = wav_read(path)\n        y = y.astype(np.float32)\n        if len(y) < 16000:\n            y.resize(16000)\n        y = vggish(y, 16000).detach()\n        if y.ndim > 1:\n            y = y.mean(dim=0)\n        param_cache[path] = y\n\n    return y","8a4628ea":"# Target values and id mapping\ndef get_classes():\n    classes = ['neg', 'pos']\n    weight = None\n    class_to_id = {label: i for i, label in enumerate(classes)}\n    return classes, weight, class_to_id","3ca75ad6":"# PyTorch Dataset\nclass Loader(data.Dataset):\n\n    def __init__(self, root, max_seconds=20):\n\n        classes, weight, class_to_id = get_classes()\n        self.root = root\n        self.wavs = make_dataset(root, class_to_id)\n        self.classes = classes\n        self.weight = weight\n        self.class_to_id = class_to_id\n        self.loader = param_loader\n        self.max_seconds = max_seconds\n\n    def __getitem__(self, index):\n        \"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (key, params, target) where target is class_index of the target class.\n        \"\"\"\n        key, path, target = self.wavs[index]\n        path = '..\/input\/covid\/wavs16k\/' + path\n        params = self.loader(path, self.max_seconds)\n        return key, params, target\n\n    def __len__(self):\n        return len(self.wavs)","60edb9e2":"class VGGISH(nn.Module):\n    def __init__(self, input_size=128, hidden_size=64):\n        super().__init__()\n\n        self.classifier = nn.Sequential(\n            nn.Linear(input_size, hidden_size),\n            nn.ReLU(True),           \n            nn.Dropout(0.1),            \n            nn.Linear(hidden_size, 1),\n        )           \n\n    def forward(self, x):\n        # x shape: (B,E)\n\n        # Mutilayer perceptron\n        out = self.classifier(x)\n        # out shape: (B,1)\n\n        # Remove last dimension\n        return out.squeeze(-1)\n        # return shape: (B)","3d4e0a11":"def train(loader, model, criterion, optimizer, epoch, cuda, log_interval, max_norm=1, verbose=True):\n    model.train()\n    global_epoch_loss = 0\n    samples = 0\n    for batch_idx, (_, data, target) in enumerate(loader):\n        if cuda:\n            data, target = data.cuda(), target.cuda()\n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target.float())\n        loss.backward()\n        nn.utils.clip_grad_norm_(model.parameters(), max_norm)\n        optimizer.step()\n        global_epoch_loss += loss.data.item() * len(target)\n        samples += len(target)\n        if verbose and (batch_idx % log_interval == 0):\n            print('Train Epoch: {} [{}\/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n                epoch, samples, len(loader.dataset), 100*samples\/len(loader.dataset), global_epoch_loss\/samples))\n    return global_epoch_loss \/ samples","eec2404f":"def test(loader, model, criterion, cuda, verbose=True, data_set='Test', save=None):\n    model.eval()\n    test_loss = 0\n    tpred = []\n    ttarget = []\n\n    if save is not None:\n        csv = open(save, 'wt')\n        print('index,prob', file=csv)\n\n    with torch.no_grad():\n        for keys, data, target in loader:\n            if cuda:\n                data, target = data.cuda(), target.cuda()\n            output = model(data)\n            pred = output.sigmoid()\n            tpred.append(pred.cpu().numpy())\n\n            if target[0] != -1:\n                loss = criterion(output, target.float()).data.item()\n                test_loss += loss * len(target) # sum up batch loss \n                ttarget.append(target.cpu().numpy())\n\n            if save is not None:\n                for i, key in enumerate(keys):\n                    print(f'{key},{pred[i]}', file=csv)\n    \n    if len(ttarget) > 0:\n        test_loss \/= len(loader.dataset)\n        auc, auc_ci = roc_auc_score_ci(np.concatenate(ttarget), np.concatenate(tpred))\n        if verbose:\n            print('\\n{} set: Average loss: {:.4f}, AUC: {:.1f}% ({:.1f}% - {:.1f}%)\\n'.format(\n                data_set, test_loss, 100 * auc, auc_ci[0]*100, auc_ci[1]*100))\n\n        return test_loss, auc","8cfdc5df":"args = SimpleNamespace(\n    # general options\n    train_path = '..\/input\/covid\/train',         # train data folder\n    valid_path = '..\/input\/covid\/valid',         # valid data folder\n    test_path = '..\/input\/covid\/test',           # test data folder\n    batch_size = 20,                             # training and valid batch size\n    test_batch_size = 20,                        # batch size for testing\n    arch = 'VGGISH',                             # PASE, VGG11, VGG13, VGG16, VGG19\n    epochs = 50,                                 # maximum number of epochs to train\n    lr = 0.0002,                                 # learning rate\n    momentum = 0.9,                              # SGD momentum, for SGD only\n    optimizer = 'adam',                          # optimization method: sgd | adam\n    seed = 1234,                                 # random seed\n    log_interval = 5,                            # how many batches to wait before logging training status\n    patience = 10,                               # how many epochs of no loss improvement should we wait before stop training\n    checkpoint = '.',                            # checkpoints directory\n    train = True,                                # train before testing\n    cuda = True,                                 # use gpu\n    num_workers = 0,                             # how many subprocesses to use for data loading\n)","225089ac":"args.cuda = args.cuda and torch.cuda.is_available()\ntorch.manual_seed(args.seed)\nif args.cuda:\n    torch.cuda.manual_seed(args.seed)\n    print('Using CUDA with {0} GPUs'.format(torch.cuda.device_count()))\n\n\n# build model\nif args.arch == 'PASE':\n    model = PASE(256)\nif args.arch == 'VGGISH':\n    model = VGGISH(hidden_size=64)\nif args.cuda:\n    model.cuda()\n\n# Define criterion\ncriterion = nn.BCEWithLogitsLoss(reduction='mean') # This loss combines a Sigmoid layer and the BCELoss in one single class.","b499e7fd":"# loading data\nif args.train:\n    train_dataset = Loader(args.train_path)\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=args.batch_size, shuffle=True, num_workers=args.num_workers)\n\n    valid_dataset = Loader(args.valid_path)\n    valid_loader = torch.utils.data.DataLoader(\n        valid_dataset, batch_size=args.batch_size, shuffle=False, num_workers=args.num_workers)\n\n    # define optimizer\n    if args.optimizer.lower() == 'adam':\n        optimizer = optim.Adam(model.parameters(), lr=args.lr)\n    else:\n        optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum)\n\n    best_valid_auc = 0\n    iteration = 0\n    epoch = 1\n    best_epoch = epoch\n    \n    # trainint with early stopping\n    t0 = time.time()\n    while (epoch < args.epochs + 1) and (iteration < args.patience):\n        train(train_loader, model, criterion, optimizer, epoch, args.cuda, args.log_interval)\n        valid_loss, valid_auc = test(valid_loader, model, criterion, args.cuda, data_set='Validation')\n        if not os.path.isdir(args.checkpoint):\n            os.mkdir(args.checkpoint)\n        torch.save(model.state_dict(), '.\/{}\/model{:03d}.pt'.format(args.checkpoint, epoch))\n        if valid_auc <= best_valid_auc:\n            iteration += 1\n            print('AUC was not improved, iteration {0}'.format(str(iteration)))\n        else:\n            print('Saving state')\n            iteration = 0\n            best_valid_auc = valid_auc\n            best_epoch = epoch\n            state = {\n                'valid_auc': valid_auc,\n                'valid_loss': valid_loss,\n                'epoch': epoch,\n            }\n            if not os.path.isdir(args.checkpoint):\n                os.mkdir(args.checkpoint)\n            torch.save(state, '.\/{}\/ckpt.pt'.format(args.checkpoint))\n        epoch += 1\n        print(f'Elapsed seconds: ({time.time() - t0:.0f}s)')\n    print(f'Best AUC: {best_valid_auc*100:.1f}% on epoch {best_epoch}')","73630a65":"test_dataset = Loader(args.test_path)\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset, batch_size=args.test_batch_size, shuffle=False, num_workers=args.num_workers)\n\n# get best epoch and model\nstate = torch.load('.\/{}\/ckpt.pt'.format(args.checkpoint))\nepoch = state['epoch']\nprint(\"Testing model (epoch {})\".format(epoch))\nmodel.load_state_dict(torch.load('.\/{}\/model{:03d}.pt'.format(args.checkpoint, epoch)))\nif args.cuda:\n    model.cuda()\n\nresults = 'submission.csv'\nprint(\"Saving results in {}\".format(results))\ntest(test_loader, model, criterion, args.cuda, save=results)","cfb51137":"## Test Model","ea77165e":"## Train model (Only new parameters)","64985664":"## Baseline model using a pre-trained VGGish model"}}