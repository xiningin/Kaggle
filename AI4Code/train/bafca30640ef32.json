{"cell_type":{"184758f0":"code","df66d6dc":"code","b6beb88b":"code","f1e288fe":"code","6831781a":"code","7d3ab6c0":"code","ff5c45a1":"code","60f8e687":"code","02f9a9e7":"code","7f4105e8":"code","ab54469f":"code","acfeff1a":"code","ce059bee":"code","75e23f2b":"code","f7917fb7":"code","d7faa83c":"code","8d8f0c79":"code","8fa12693":"code","de8c49cb":"code","4c6b76a3":"code","1970255e":"code","40e24d60":"code","b0cce377":"code","e4229a7a":"code","14db3d4e":"code","dfe3bf33":"code","8ff7f9bb":"code","d9b67cfe":"code","18a276f7":"code","83f66d39":"code","4cab6de1":"code","ff415c3d":"code","9653556e":"code","70943c64":"code","b4cb2bd1":"code","3181ed62":"code","47be9080":"code","74c9c88b":"code","a7fe41dc":"code","75885a6b":"code","1185544b":"code","309c6d29":"code","3a4dbf31":"code","4344ff33":"code","12747ee0":"code","ba1b0960":"code","11dc3151":"code","f750a532":"code","04a0ae72":"code","b3255d84":"code","4721c0ec":"code","2c86388b":"code","8b1216f0":"code","d11df88d":"code","f6e5ab6e":"code","fab2c8e8":"code","55d09bd2":"code","12b2ace0":"code","679de6dc":"code","647ea184":"code","1da844dc":"code","5a194c1f":"code","f678e3a0":"code","ce55e199":"code","3b3621de":"code","cbe54b09":"code","ca854909":"code","68e99465":"code","293aee35":"code","7382ce5e":"code","39e09cde":"code","1fe68fd3":"code","b8516748":"code","ab9d42f5":"code","c31375c3":"code","15031235":"code","be4eb7af":"code","9849ea3e":"code","a82c697d":"code","90ba7f08":"code","abbb5ed0":"code","6f348ae2":"code","77db70c0":"code","64f94f4a":"code","6956a861":"code","2f118c45":"code","7e989472":"code","4b0baca1":"code","70578f27":"code","087d7de3":"code","9ef09131":"code","c0a91a43":"code","6444beb0":"code","9dbba9c3":"code","5cfc2af6":"code","244ad680":"code","bcd30bea":"code","b8531a20":"code","5b6e59cd":"code","ce643cbd":"code","872386ca":"code","cb54daad":"code","3a57f4c7":"code","8d8d21db":"code","b445e5d9":"code","41f8ca46":"code","f14ea483":"code","c2bdd144":"code","f487179c":"code","d3b1b00f":"code","46ff2ad4":"code","9f1f31a8":"code","4c6ccb89":"code","50b3dfd5":"code","e5a0cbde":"code","104161da":"code","19ddee23":"code","6b6358bd":"code","fa5d240f":"code","50e11f4a":"code","2759897f":"code","ebefc88f":"code","a9afe6a7":"code","3a8a6ed9":"code","c9ef6c8f":"code","851b5bce":"code","59910c2c":"code","701bb5d5":"code","e20748d6":"code","9f822e4b":"code","10ce8f69":"markdown","94a91baf":"markdown","600aad06":"markdown","1ccce07e":"markdown","71dd9493":"markdown","8eabd8aa":"markdown","81676b29":"markdown","71049f16":"markdown","cd906d44":"markdown","4d5ed488":"markdown","e7a9d0b6":"markdown","cb7f5394":"markdown"},"source":{"184758f0":"#import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","df66d6dc":"#reading dataset\ndf = pd.read_csv(\"..\/input\/titanic-train\/train.csv\")\ndata = df.copy()\ndata.head()","b6beb88b":"#top three values\ndata.head(n=3)","f1e288fe":"#last five values\ndata.tail()","6831781a":"data.shape","7d3ab6c0":"data.info()","ff5c45a1":"data.columns","60f8e687":"data.index","02f9a9e7":"#descriptive statistics\ndata.describe","7f4105e8":"data.describe().T","ab54469f":"\ndata.isnull()","acfeff1a":"data.isnull().values","ce059bee":"data.isnull().values.any()","75e23f2b":"data.info()","f7917fb7":"cat_colsF = []\nfor col in data.columns:\n    if data[col].dtype == \"O\":\n        cat_colsF.append(col)\ncat_colsF","d7faa83c":"#catching categorical veriables\ncat_cols = [col for col in data.columns if data[col].dtype == \"O\"]\ncat_cols","8d8f0c79":"# number of categorical veriables\nlen(cat_cols)","8fa12693":"#Determining the number of classes in the survived variable\ndata[\"Survived\"].nunique()","de8c49cb":"#Determining the number of classes in the survived variable\ncat_cols = [col for col in data.columns if len(data[col].unique()) <10]\ncat_cols","4c6b76a3":"# number of categorical veriables\nlen(cat_cols)","1970255e":"df[cat_cols].nunique()","40e24d60":"data[\"Survived\"].unique()","b0cce377":"#Finding percentages of classes of survived variable\ndata[\"Survived\"].value_counts()","e4229a7a":"sns.countplot(x=\"Sex\", data=data);","14db3d4e":"(data[\"Survived\"].value_counts()\/len(data))*100","dfe3bf33":"def cat_summary(df):\n    \n    cat_names = [col for col in df.columns if len(df[col].nunique()) < 10]\n    for col in cat_names:\n        print(pd.DataFrame({col: df[col].value_counts(),\n                           \"Ratio\":100 * df[col].value_counts()\/ len (df)}), end=\"\\n\\n\\n\")\n        sns.countplot(x = col, data=df)\n        plt.show()","8ff7f9bb":"cat_cols = [col for col in data.columns if data[col].dtype == \"O\"]\ncat_cols","d9b67cfe":"def cat_summary(df, categorical_cols, number_of_classes=10):\n    var_count = 0\n    var_more_classes = []\n    \n    for var in df:\n        if var in categorical_cols:\n            if len(list(df[var].unique())) <= number_of_classes:\n                print(pd.DataFrame({var: df[var].value_counts(),\n                                   \"Ratio\": 100 * df[var].value_counts() \/ len(df)}), end=\"\\n\\n\\n\")\n                var_count += 1\n            else:\n                var_more_classes.append(df[var].name)\n    print(\"%d categorical veriables have been described\" % var_count, end=\"\\n\\n\")\n    print(\"There are\", len(var_more_classes), \"veriables have more than\", number_of_classes, \"classes\", end=\"\\n\\n\")\n    print(\"Veriable names have more than %d classes: \" % number_of_classes, end=\"\\n\\n\")\n    print(var_more_classes)","18a276f7":"cat_summary(data, cat_cols)","83f66d39":"#Descriptive statistics\ndata.describe().T","4cab6de1":"#percentile calculation\ndata.describe([0.05, 0.1, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99])","ff415c3d":"#what numerical variables are available\nnum_cols = [col for col in data.columns if data[col].dtypes != \"O\"]\nnum_cols","9653556e":"#writing via print\nprint(\"There are {0} total variables in the train dataset\".format(len(num_cols)))","70943c64":"#Passenger id survivedi is not affected. Let's remove it\nnum_cols= [col for col in data.columns if data[col].dtypes !=\"O\"\n          and col not in \"PassengerId\"\n          and col not in \"Survived\"]\nnum_cols","b4cb2bd1":"df[\"Age\"].hist()","3181ed62":"sns.boxplot(x=\"Age\", data=data)","47be9080":"#Let's graph all the numerical columns\ndef hist_for_nums(df, numeric_cols):\n    \n    col_counter=0\n    \n    for col in numeric_cols:\n        data[col].hist()\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        \n        col_counter += 1\n        \n    print(col_counter, \"Veriables have been plotted\")\n","74c9c88b":"hist_for_nums(data, num_cols)","a7fe41dc":"data.head()","75885a6b":"data[\"Survived\"].value_counts()","1185544b":"data.groupby(\"Pclass\")[\"Survived\"].mean()","309c6d29":"def target_summary_with_cat(data, target):\n    \n    cats_names = [col for col in df.columns if len(df[col].unique()) < 10 and col in target]\n    \n    for var in cats_names:\n        print(pd.DataFrame({\"TARGET_MEAN\": df.groupby(var)[target].mean()}), end=\"\\n\\n\\n\")\n              \n        ","3a4dbf31":"target_summary_with_cat(df,\"Survived\")","4344ff33":"num_cols","12747ee0":"data.groupby(\"Survived\").agg({\"Fare\": np.mean})","ba1b0960":"#corellation\ndata.corr()","11dc3151":"#Catching outlier\ndata.head(n=3)","f750a532":"data.describe().T","04a0ae72":"sns.boxplot(x=data[\"Age\"])","b3255d84":"data[\"Age\"].quantile(.25)","4721c0ec":"data[\"Age\"].quantile(.5)","2c86388b":"data[\"Age\"].quantile(.75)","8b1216f0":"q1 = data[\"Age\"].quantile(.25)\nq3 = data[\"Age\"].quantile(.75)\niqr = q3-q1\nup = q3 + 1.5 * iqr\nlow = q3 - 1.5 * iqr","d11df88d":"up","f6e5ab6e":"low","fab2c8e8":"data[(data[\"Age\"] < low) | (data[\"Age\"] > up)][[\"Age\"]].shape[0]","55d09bd2":"#capture outlier observations in a column\ndata[(data[\"Age\"] < low) | (data[\"Age\"]> up)].any(axis=None)","12b2ace0":"def outlier_theresholds(dataframe, veriable):\n    \n    quartile1 = dataframe[veriable].quantile(.25)\n    quartile3 = dataframe[veriable].quantile(.75)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5*interquantile_range\n    low_limit = quartile1 - 1.5*interquantile_range\n    return low_limit, up_limit","679de6dc":"outlier_theresholds(data, \"Age\")","647ea184":"low,up = outlier_theresholds(data, \"Age\")","1da844dc":"low","5a194c1f":"up","f678e3a0":"def has_outliers(dataframe, veriable):\n    \n    low_limit, up_limit = outlier_theresholds(dataframe, veriable)\n    if dataframe[(dataframe[veriable]<low_limit) | (dataframe[veriable] > up_limit)].any(axis=None):\n        print(veriable, \"yes\")","ce55e199":"has_outliers(data,\"Age\")","3b3621de":"num_names = [col for col in data.columns if len(data[col].unique()) >10\n            and data[col].dtypes != \"O\"\n            and col not in \"PassengerId\"]","cbe54b09":"num_names","ca854909":"for col in num_names:\n    has_outliers(data, col)","68e99465":"def has_outliers(dataframe, num_col_names, plot=False):\n    \n    variable_names = []\n    \n    for col in num_col_names:\n        low_limit, up_limit = outlier_theresholds(dataframe, col)\n        \n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            \n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n            \n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    return variable_names","293aee35":"has_outliers(data, num_names)","7382ce5e":"has_outliers(data, num_names,True)","39e09cde":"data[~((data[\"Age\"] < low) | (data[\"Age\"] > up))]","1fe68fd3":"def remove_outliers(dataframe, veriable):\n    \n    low_limit, up_limit = outlier_theresholds(dataframe, veriable)\n    df_without_outliers = dataframe[~((dataframe[veriable] < low_limit) | (dataframe[veriable] > up_limit))]\n    \n    return df_without_outliers","b8516748":"df1 = remove_outliers(data, \"Age\")\ndf1.shape","ab9d42f5":"for col in num_cols:\n    new_df = remove_outliers(data, col)","c31375c3":"new_df.shape","15031235":"data.isnull().values.any()","be4eb7af":"data.isnull().sum()","9849ea3e":"data.columns[data.isnull().any()]","a82c697d":"data.isnull().sum().sum()","90ba7f08":"data[data.isnull().any(axis=1)]","abbb5ed0":"data[data.notnull().all(axis=1)]","6f348ae2":"(data.isnull().sum() \/ data.shape[0] * 100).sort_values(ascending=False)","77db70c0":"def missing_values_table(dataframe):\n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    \n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0]*100).sort_values(ascending=False)\n    \n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=[\"n_miss\", \"ratio\"])\n    print(missing_df)\n    return variables_with_na\n","64f94f4a":"cols_with_na = missing_values_table(data)","6956a861":"cols_with_na","2f118c45":"data.shape","7e989472":"data.dropna()","4b0baca1":"data[\"Age\"].fillna(data[\"Age\"].mean(), inplace = True)","70578f27":"missing_values_table(data)","087d7de3":"data[\"Sex\"].head()","9ef09131":"from sklearn import preprocessing","c0a91a43":"len(data[\"Sex\"].value_counts())","6444beb0":"label_encoder = preprocessing.LabelEncoder()","9dbba9c3":"label_encoder.fit_transform(df[\"Sex\"])","5cfc2af6":"data[\"Sex\"].head()","244ad680":"label_encoder.inverse_transform([0,1])","bcd30bea":"def label_encoder(dataframe):\n    labelencoder = preprocessing.LabelEncoder()\n    \n    label_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"\n                 and len(dataframe[col].value_counts()) == 2]\n    \n    for col in label_cols:\n        dataframe[col] = labelencoder.fit_transform(dataframe[col])\n    return dataframe","b8531a20":"data.head()","5b6e59cd":"data = label_encoder(data)","ce643cbd":"data.head(n=3)","872386ca":"data[\"Embarked\"].value_counts()","cb54daad":"data.shape","3a57f4c7":"pd.get_dummies(data, columns=[\"Embarked\"]).head()","8d8d21db":"pd.get_dummies(data, columns=[\"Embarked\"], drop_first=True).head()","b445e5d9":"pd.get_dummies(data, columns=[\"Embarked\"], dummy_na=True).head()","41f8ca46":"def one_hot_encoder(dataframe, category_freq=10, nan_as_category=False):\n    \n    categorical_cols = [col for col in dataframe.columns if len(dataframe[col].value_counts()) < category_freq\n                       and dataframe[col].dtypes == \"O\"]\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True)\n    \n    return dataframe","f14ea483":"data = one_hot_encoder(data)","c2bdd144":"data.head()","f487179c":"dff = df.copy()","d3b1b00f":"100*(dff[\"Parch\"].value_counts()\/len(dff))","46ff2ad4":"dff[\"Parch\"].unique()","9f1f31a8":"len(dff[\"Parch\"].unique())","4c6ccb89":"rr = dff[\"Parch\"].value_counts()\/len(dff)\nrr","50b3dfd5":"rare_labels = rr[rr<0.08].index\nrare_labels","e5a0cbde":"dff[\"Parch\"] = np.where(dff[\"Parch\"].isin(rare_labels),\"RARE\",dff[\"Parch\"])\n","104161da":"dff[\"Parch\"].value_counts()\/len(dff)","19ddee23":"def rare_encoder(dataframe, rare_perc):\n    \n    tempr_df = dataframe.copy()\n    \n    rare_columns = [col for col in tempr_df.columns if tempr_df[col].dtypes == \"O\"\n                   and (tempr_df[col].value_counts() \/ len(tempr_df) < rare_perc).any(axis=None)]\n    \n    for var in rare_columns:\n        tmp = tempr_df[var].value_counts() \/ len(tempr_df)\n        rare_labels = tmp[tmp < rare_perc].index\n        tempr_df[var] = np.where(tempr_df[var].isin(rare_labels), \"Rare\", tempr_df[var])\n        \n    return tempr_df","6b6358bd":"df1 = df.copy()","fa5d240f":"df1[\"Parch\"] = df1[\"Parch\"].apply(lambda x: str(x))","50e11f4a":"df1.nunique()    ","2759897f":"df2 = rare_encoder(df, 0.08)","ebefc88f":"df2.nunique()","a9afe6a7":"from sklearn.preprocessing import StandardScaler","3a8a6ed9":"scaler = StandardScaler().fit(data[[\"Age\"]])","c9ef6c8f":"data.describe().T","851b5bce":"data[\"Age\"] = scaler.transform(data[[\"Age\"]])\ndata.describe().T","59910c2c":"df3 = df.copy()\n\nfrom sklearn.preprocessing import RobustScaler\n\ntransformer = RobustScaler()\ntransformer.fit(df3[[\"Age\"]])\ndf3[\"Age\"] = transformer.transform(df3[[\"Age\"]])","701bb5d5":"df3.describe().T","e20748d6":"df4 = df.copy()\n\nfrom sklearn.preprocessing import MinMaxScaler\n\ntransformer = MinMaxScaler((-10,10)).fit(df4[[\"Age\"]])\ndf4[\"Age\"] = transformer.transform(df4[[\"Age\"]])\ndf4.describe().T","9f822e4b":"df = data.copy()\n\ndf.head()\ndf.loc[((df(\"SibSp\") + df[\"Parch\"] > 0), \"NEW_IS_ALONE\")] = \"NO\"\ndf.loc[(df(\"SibSp\") + df[\"Parch\"] == 0), \"NEW_IS_ALONE\"] = \"YES\"\ndf.head()","10ce8f69":"# Numerical Veriable Analysis","94a91baf":"# One-Hot Encoding","600aad06":"# List Comprehendsion Method","1ccce07e":"# Missing Value Analysis","71dd9493":"# Feature Engineering","8eabd8aa":"#  Categorical Veriable Analysis","81676b29":"# Label Encoding","71049f16":"# Numeric Veriables Analysis","cd906d44":"# Standartization","4d5ed488":"# Titanic Dataset","e7a9d0b6":"# Rare Encoding","cb7f5394":"# Target Analysis"}}