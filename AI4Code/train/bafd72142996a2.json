{"cell_type":{"15405e73":"code","6b87227a":"code","626be524":"code","fffbfc16":"code","236d9ef3":"code","97cd672d":"code","5e4251e0":"code","8c7d5809":"code","52f9a54a":"code","e30d020d":"code","a1b53c48":"code","d46a89f6":"code","f0935703":"code","a5aae47b":"code","00033d1b":"code","02cdf11d":"code","5782e04e":"code","ec3804aa":"code","c01c1f9b":"markdown","7611a295":"markdown","03c74797":"markdown","48e082b2":"markdown","667e813d":"markdown","0672def9":"markdown","681bf079":"markdown"},"source":{"15405e73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b87227a":"train_data = pd.read_csv(\"\/kaggle\/input\/googledta\/trainset.csv\")","626be524":"train_data.head()","fffbfc16":"train_data.describe()","236d9ef3":"train_data.info()","97cd672d":"from plotly.subplots import make_subplots\n\n# Create subplots and mention plot grid size\nfig = make_subplots(rows=2, cols=1, shared_xaxes=True, \n               vertical_spacing=0.08, subplot_titles=('GOOGL', 'Volume'), \n               row_width=[0.2, 0.7])\n\n# Plot data \nfig.add_trace(go.Candlestick(x=train_data[\"Date\"], open=train_data[\"Open\"], high=train_data[\"High\"],\n                low=train_data[\"Low\"], close=train_data[\"Close\"], name=\"GOOGL\"), \n                row=1, col=1)\n\nfig.update_layout(\n    title=\"Google Stock\",\n    yaxis_title=\"GOOGL Stock Price\")\n\n# Plot volume\nfig.add_trace(go.Bar(x=train_data['Date'], y=train_data['Volume'], showlegend=False), row=2, col=1)\n\nfig.update(layout_xaxis_rangeslider_visible=False)\nfig.show()","5e4251e0":"train = train_data.loc[:, [\"Open\"]].values\ntrain","8c7d5809":"# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0, 1)) # Converts between 0 and 1\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled","52f9a54a":"plt.plot(train_scaled)\nplt.ylabel(\"Price\")\nplt.xlabel(\"Time(Days)\")\nplt.title(\"Google Stock Data\")\nplt.show()","e30d020d":"# Creating a data structure with 50 timesteps and 1 output\nX_train = []\ny_train = []\ntimesteps = 1\nfor i in range(timesteps, 1258): #1258: len of days\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","a1b53c48":"# Reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train","d46a89f6":"y_train","f0935703":"print(f\"Shape of X_train: {X_train.shape}\\nShape of y_train: {y_train.shape}\")","a5aae47b":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers.recurrent import LSTM\n\n# Initialize\nmodel = Sequential()\n\n# Firs LSTM layer and Regularization with Dropout\nmodel.add(LSTM(128, input_shape = (X_train.shape[1], 1)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\n\n# Compile\nmodel.compile(loss=\"mean_squared_error\", optimizer=\"adam\")\nmodel.fit(X_train, y_train.reshape(-1,1), epochs=100)","00033d1b":"test_data = pd.read_csv('\/kaggle\/input\/googledta\/testset.csv')\ntest_data.head()","02cdf11d":"real_stock_price = test_data.loc[:, [\"Open\"]].values\nreal_stock_price","5782e04e":"dataset_total = pd.concat((train_data['Open'], test_data['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(test_data) - timesteps:].values.reshape(-1,1)\ninputs = scaler.transform(inputs)  # min max scaler\ninputs","ec3804aa":"X_test = []\nfor i in range(timesteps, 127):\n    X_test.append(inputs[i-timesteps:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = model.predict(X_test)\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)\n\n# Visualising the results\nplt.figure(figsize=(12,9))\nplt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue',alpha=0.7, label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time(Days)')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","c01c1f9b":"<a id=\"1\"><\/a>\n## Read Data","7611a295":"<a id=\"4\"><\/a>\n## Predictions and Visualization","03c74797":"# Introduction\n#### In this notebook the aim is to predict Google stock prices by using LSTM\n\n## Content\n* [Read Data](#1)\n* [Preproccesing](#2)\n* [LSTM Model](#3)\n* [Predictions and Visualization](#4)","48e082b2":"<a id=\"2\"><\/a>\n## Preproccesing","667e813d":"#### In this plot we are able to see whole data.","0672def9":"<a id=\"3\"><\/a>\n## LSTM Model","681bf079":"![image.png](attachment:908aca23-64f0-42fb-b14d-73dffe0bdf3f.png)"}}