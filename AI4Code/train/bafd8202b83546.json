{"cell_type":{"2e5ba7cb":"code","80ddb2d4":"code","e373f52f":"code","0f2f422f":"code","a074d64c":"code","a841dc43":"code","e9238873":"code","f9150ebd":"code","b1b93833":"code","e90e98bb":"code","b8deec4b":"code","6f6a642c":"markdown","9fd8639c":"markdown"},"source":{"2e5ba7cb":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport matplotlib.pyplot as plt\n        \ninput_path = Path('\/kaggle\/input\/tabular-playground-series-mar-2021\/')\n\nimport lightgbm as lgb\n\nfrom sklearn.linear_model import LogisticRegression\n\nimport optuna\nfrom sklearn.metrics import log_loss\n\nfrom sklearn.model_selection import KFold","80ddb2d4":"train = pd.read_csv(input_path \/ 'train.csv', index_col='id')\ndisplay(train.head())","e373f52f":"test = pd.read_csv(input_path \/ 'test.csv', index_col='id')\ndisplay(test.head())","0f2f422f":"submission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')\ndisplay(submission.head())","a074d64c":"for c in train.columns:\n    if train[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(train[c].values)\n        test[c] = lbl.transform(test[c].values)\n        \ndisplay(train.head())","a841dc43":"y_train = train['target']\nX_train = train.drop('target',axis=1)","e9238873":"from sklearn.model_selection import StratifiedKFold\n\n\ny_preds = []\nmodels = []\noof_train = np.zeros((len(X_train),))\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n\ncategorical_features = ['cat0','cat1','cat2','cat3','cat4','cat5','cat6','cat7','cat8','cat9','cat10','cat11','cat12','cat13','cat14','cat15','cat16','cat17','cat18','cont0','cont1','cont2','cont3','cont4','cont5','cont6','cont7','cont8','cont9','cont10']\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 264,\n    'learning_rate': 0.05,\n    'num_leaves': 52\n}\n\nfor train_index, valid_index in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    lgb_train = lgb.Dataset(X_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\n    oof_train[valid_index] = model.predict(X_val, num_iteration=model.best_iteration)\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n\n    y_preds.append(y_pred)\n    models.append(model)","f9150ebd":"pd.DataFrame(oof_train).to_csv('oof_train_skfold.csv', index=False)\nprint(oof_train[:10])\n\nscores = [\n    m.best_score['valid_1']['binary_logloss'] for m in models\n]\nscore = sum(scores) \/ len(scores)\nprint('===CV scores===')\nprint(scores)\nprint(score)","b1b93833":"from sklearn.metrics import accuracy_score\n\n\ny_pred_oof = (oof_train > 0.5).astype(int)\naccuracy_score(y_train, y_pred_oof)","e90e98bb":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = (y_sub > 0.5).astype(int)\ny_sub[:10]","b8deec4b":"submission['target'] = y_sub\nsubmission.to_csv(\"submission_lightgbm_skfold.csv\", index=False)\n\nsubmission.head()","6f6a642c":"#  **simple lightgbm**","9fd8639c":"# Read in the data files"}}