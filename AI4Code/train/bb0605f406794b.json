{"cell_type":{"58956dd1":"code","e7343e45":"code","06aed472":"code","0789b169":"code","9d4609d1":"code","2ca425e6":"code","9266f059":"code","e2392d88":"code","bb8c9cc0":"code","c6cf299a":"code","d5b07b0e":"code","399a3335":"code","ba52ec4f":"code","fd7caace":"markdown","5ca76445":"markdown","8943b85e":"markdown"},"source":{"58956dd1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\n\nimport time\nfrom tqdm.notebook import tqdm\n\n# Standard plotly imports\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\nimport cufflinks as cf\nimport plotly.figure_factory as ff\nimport os\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e7343e45":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom catboost import Pool, CatBoostClassifier, cv, CatBoostRegressor","06aed472":"print('# File sizes')\ntotal_size = 0\nstart_path = '..\/input\/jane-street-market-prediction'  # To get size of current directory\nfor path, dirs, files in os.walk(start_path):\n    for f in files:\n        fp = os.path.join(path, f)\n        total_size += os.path.getsize(fp)\nprint(\"Directory size: \" + str(round(total_size\/ 1000000, 2)) + 'MB')","0789b169":"%%time\ntrain = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nfeatures = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\nexample_test = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nprint (\"Data is loaded!\")","9d4609d1":"print('train shape is {}'.format(train.shape))\nprint('features shape is {}'.format(features.shape))\nprint('example_test shape is {}'.format(example_test.shape))\nprint('sample_prediction_df shape is {}'.format(sample_prediction_df.shape))","2ca425e6":"train.head()","9266f059":"missing_values_count = train.isnull().sum()\nprint (missing_values_count)\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","e2392d88":"train = train[train['weight'] != 0]\n\ntrain = train.query('date > 85').reset_index(drop = True) \n\ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\n\ntrain['action'] = ((train['weight'].values * train['resp'].values) > 0).astype('int')\n\ntrain.fillna(train.mean(),inplace=True)\n\nfeatures = [c for c in train.columns if 'feature' in c]\n\ndf_train = train.sample(frac=0.9, random_state=0)\ndf_valid = train.drop(df_train.index)\n\n\nX_train = df_train.loc[:, df_train.columns.str.contains('feature')]\nX_valid = df_valid.loc[:, df_valid.columns.str.contains('feature')]\ny_train = df_train['action']\ny_valid = df_valid['action']","bb8c9cc0":"x = train['action'].value_counts().index\ny = train['action'].value_counts().values\n\ntrace2 = go.Bar(\n     x=x ,\n     y=y,\n     marker=dict(\n         color=y,\n         colorscale = 'Viridis',\n         reversescale = True\n     ),\n     name=\"Imbalance\",    \n )\nlayout = dict(\n     title=\"Data imbalance - action\",\n     #width = 900, height = 500,\n     xaxis=go.layout.XAxis(\n     automargin=True),\n     yaxis=dict(\n         showgrid=False,\n         showline=False,\n         showticklabels=True,\n #         domain=[0, 0.85],\n     ), \n)\nfig1 = go.Figure(data=[trace2], layout=layout)\niplot(fig1)","c6cf299a":"del x, y, train","d5b07b0e":"model = CatBoostClassifier(iterations=10000, task_type=\"GPU\", learning_rate=0.05, l2_leaf_reg=3.5, depth=11, loss_function= 'Logloss', eval_metric='AUC',use_best_model=True,random_seed=42)","399a3335":"model.fit(X_train, y_train, eval_set=(X_valid, y_valid))","ba52ec4f":"TRAINING = True\n\nstart_time = time.time()\n\nif TRAINING:\n    import janestreet\n    env = janestreet.make_env()\n    th = 0.5\n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, features].values\n            if np.isnan(x_tt[:, 1:].sum()):\n                x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:])\n            pred = model.predict(x_tt)\n            pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)\n        \nprint(f\"took: {time.time() - start_time} seconds\")","fd7caace":"### Missing Values Count","5ca76445":"## Training","8943b85e":"# Is the data balanced or not?"}}