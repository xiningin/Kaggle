{"cell_type":{"4e96d0d9":"code","e3064768":"code","f1a33760":"code","b9979c3c":"code","b428e4b0":"code","45c026b1":"code","881e36ab":"code","7aedc7d1":"code","82998d16":"code","c7265938":"code","a8a736a1":"code","84b0fa4d":"code","5ee6afc2":"code","ee8d019f":"code","3f8902e6":"code","236198f7":"code","a58bd84d":"code","8b39bce4":"code","052fa06a":"code","570d9dc7":"code","27a7bd5a":"code","731aacea":"code","67ebfd15":"code","73f452af":"code","24e0f10d":"code","734972e7":"code","1c356102":"code","9692e4f6":"code","ef19bf8b":"code","c4caa318":"code","30930f7c":"code","407cbbab":"code","01ee0ee3":"code","fd85c7bb":"code","85f95c3f":"code","1da3762c":"markdown","3eb2d897":"markdown","ef3b8ca2":"markdown","a9eba475":"markdown","65a66dba":"markdown","6ebf47ad":"markdown","5ff8418e":"markdown","946fbfd5":"markdown","73c5db11":"markdown"},"source":{"4e96d0d9":"!pip install seaborn","e3064768":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier","f1a33760":"submission_sample = pd.read_csv('..\/input\/forest-cover-type-prediction\/sampleSubmission.csv')\ntrain = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv')","b9979c3c":"train.sample(5)","b428e4b0":"test.sample(5)","45c026b1":"print(list(enumerate(train.columns)))","881e36ab":"train.info()","7aedc7d1":"train.nunique()","82998d16":"train.describe()","c7265938":"import seaborn as sns\nplt.figure(figsize=(15,10))\nsns.countplot(train['Cover_Type'])\nplt.xlabel(\"Type of Cpver\", fontsize=12)\nplt.ylabel(\"Rows Count\", fontsize=12)\nplt.show()","a8a736a1":"# Bivariate EDA\npd.crosstab(train.Soil_Type31, train.Cover_Type)","84b0fa4d":"#Convert dummy features back to categorical\nx = train.iloc[:,15:55]\ny = train.iloc[:,11:15]\ny = pd.DataFrame(y)\nx = pd.DataFrame(x)\ns2 = pd.Series(x.columns[np.where(x!=0)[1]])\ns3 = pd.Series(y.columns[np.where(y!=0)[1]])\ntrain['soil_type'] = s2\ntrain['Wilderness_Area'] = s3\ntrain.head()","5ee6afc2":"# Create a new dataset exluding dummies variable for Mutivariate EDA\ndf_viz = train.iloc[:, 0:15]\ndf_viz = df_viz.drop(['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3', \n                      'Wilderness_Area4'], axis = 1)\ndf_viz.head()","ee8d019f":"plt.figure(figsize=(15,10))\npd.crosstab(train.Wilderness_Area, train.Cover_Type).plot.barh(figsize=(15,15),stacked = True)","3f8902e6":"plt.figure(figsize=(15,10))\npd.crosstab(train.soil_type, train.Cover_Type).plot.barh(figsize=(15,15),stacked = True)","236198f7":"plt.subplots(figsize=(10,10))\ncorr = df_viz.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);\n","a58bd84d":"def add_feature(data):   \n    data['Ele_minus_VDtHyd'] = data.Elevation-data.Vertical_Distance_To_Hydrology\n    data['Ele_plus_VDtHyd'] = data.Elevation+data.Vertical_Distance_To_Hydrology\n    data['Distanse_to_Hydrolody'] = (data['Horizontal_Distance_To_Hydrology']**2+data['Vertical_Distance_To_Hydrology']**2)**0.5\n    data['Hydro_plus_Fire'] = data['Horizontal_Distance_To_Hydrology']+data['Horizontal_Distance_To_Fire_Points']\n    data['Hydro_minus_Fire'] = data['Horizontal_Distance_To_Hydrology']-data['Horizontal_Distance_To_Fire_Points']\n    data['Hydro_plus_Road'] = data['Horizontal_Distance_To_Hydrology']+data['Horizontal_Distance_To_Roadways']\n    data['Hydro_minus_Road'] = data['Horizontal_Distance_To_Hydrology']-data['Horizontal_Distance_To_Roadways']\n    data['Fire_plus_Road'] = data['Horizontal_Distance_To_Fire_Points']+data['Horizontal_Distance_To_Roadways']\n    data['Fire_minus_Road'] = data['Horizontal_Distance_To_Fire_Points']-data['Horizontal_Distance_To_Roadways']\n    return data","8b39bce4":"train = add_feature(train)\ntest = add_feature(test)","052fa06a":"X_train = train.drop(['Id','Cover_Type','soil_type','Wilderness_Area'], axis = 1)\ny_train = train.Cover_Type\nX_test = test.drop(['Id'], axis = 1)","570d9dc7":"%%time \n\nlr_pipe = Pipeline(\n    steps = [\n        ('scaler', MinMaxScaler()),\n        ('classifier', LogisticRegression(solver='lbfgs', n_jobs=-1))\n    ]\n)\n\nlr_param_grid = {\n    'classifier__C': [1, 10, 100,1000],\n}\n\n\nnp.random.seed(1)\ngrid_search = GridSearchCV(lr_pipe, lr_param_grid, cv=5, refit='True')\ngrid_search.fit(X_train, y_train)\n\nprint(grid_search.best_score_)\nprint(grid_search.best_params_)","27a7bd5a":"%%time \n\nrf_pipe = Pipeline(\n    steps = [\n        ('classifier', RandomForestClassifier(n_estimators=500))\n    ]\n)\n\nparam_grid = {\n    'classifier__min_samples_leaf': [2, 3, 4, 8],\n    'classifier__max_depth': [30, 32, 34],\n}\n\nnp.random.seed(1)\nrf_grid_search = GridSearchCV(rf_pipe, param_grid, cv=5, refit='True', n_jobs=-1)\nrf_grid_search.fit(X_train, y_train)\n\nprint(rf_grid_search.best_score_)\nprint(rf_grid_search.best_params_)","731aacea":"rf_model = rf_grid_search.best_estimator_\n\ncv_score = cross_val_score(rf_model, X_train, y_train, cv = 5)\nprint(cv_score)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (cv_score.mean(), cv_score.std() * 2))","67ebfd15":"rf = rf_grid_search.best_estimator_.steps[0][1]","73f452af":"feat_imp = rf.feature_importances_\nfeat_imp_df = pd.DataFrame({\n    'feature':X_train.columns,\n    'feat_imp':feat_imp\n})\n\nfeat_imp_df.sort_values(by='feat_imp', ascending=False).head(10)","24e0f10d":"sorted_feat_imp_df = feat_imp_df.sort_values(by='feat_imp', ascending=True)\nplt.figure(figsize=[6,6])\nplt.barh(sorted_feat_imp_df.feature[-20:], sorted_feat_imp_df.feat_imp[-20:])\nplt.show()","734972e7":"%%time \n\nxgd_pipe = Pipeline(\n    steps = [\n        ('classifier', XGBClassifier(n_estimators=50, subsample=0.5))\n    ]\n)\n\nparam_grid = {\n    'classifier__learning_rate' : [0.45],\n    'classifier__min_samples_split' : [8, 16, 32],\n    'classifier__min_samples_leaf' : [2],\n    'classifier__max_depth': [15]\n    \n}\n\nnp.random.seed(1)\nxgd_grid_search = GridSearchCV(xgd_pipe, param_grid, cv=5,\n                              refit='True', verbose = 10, n_jobs=-1)\nxgd_grid_search.fit(X_train, y_train)\n\nprint(xgd_grid_search.best_score_)\nprint(xgd_grid_search.best_params_)","1c356102":"xgd_model = xgd_grid_search.best_estimator_\n\ncv_score = cross_val_score(xgd_model, X_train, y_train, cv = 5)\nprint(cv_score)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (cv_score.mean(), cv_score.std() * 2))","9692e4f6":"final_model = xgd_grid_search.best_estimator_.steps[0][1]","ef19bf8b":"final_model.fit(X_train, y_train)\ny_pred = final_model.predict(X_test)","c4caa318":"print(len(test.Id))","30930f7c":"print(len(y_pred))","407cbbab":"from collections import Counter\nCounter(y_pred)","01ee0ee3":"submission_sample.head()","fd85c7bb":"submission = pd.DataFrame({'Id': test.Id,\n                           'Cover_Type': y_pred})\nsubmission.head()","85f95c3f":"submission.to_csv('submission.csv', index=False)","1da3762c":"# Gradient Boosting","3eb2d897":"### Relationship among features and label","ef3b8ca2":"# Loading package","a9eba475":"# Submission","65a66dba":"# Logistics regression","6ebf47ad":"# Random Forest","5ff8418e":"# EDA","946fbfd5":"# Final model","73c5db11":"# Feature Engineering"}}