{"cell_type":{"7528d540":"code","8170c573":"code","8ca1dd22":"code","fc513560":"code","3e4f4cdc":"code","c5e7775d":"code","4d56b3c4":"code","a9c61e5f":"code","55ca5d18":"code","096d7dd8":"code","e0911967":"code","a5bc4126":"code","08d55454":"code","7d196c31":"code","7ef9c2ea":"code","07301a4b":"code","f7f2efeb":"code","05dc6453":"code","00fe30a6":"code","8afc9e0c":"code","16720212":"code","da1a35a0":"code","6fb18334":"code","70b64384":"code","a88ebda0":"code","8c74d867":"code","44a679bf":"code","b104f086":"code","9d4745e3":"code","9651217a":"code","0ccb48a1":"code","3fdf8e10":"code","7d6f89be":"code","238300f2":"code","51a85faf":"code","dcdc0540":"code","b789163e":"code","2a736def":"code","3ff4722e":"code","f4de1508":"code","baa7d0e3":"code","d08c219f":"code","4a254364":"code","c7cf9dbf":"code","b7e0704f":"code","26a55135":"code","5f258978":"code","97b699db":"code","1f5e198b":"code","3701a351":"code","6c58a458":"code","dbaa1c89":"code","8416ca3b":"code","8fb8a082":"code","3a048f30":"code","f6c31922":"code","40d7dcc7":"code","f8ca571b":"code","fdfe65a7":"code","25f646db":"code","d5103471":"code","409d844a":"code","4bcf9cf6":"code","ec4f2e97":"code","e721087e":"code","fcb31a21":"code","885ddca9":"code","bd65650e":"code","f1745533":"code","7de102aa":"code","c0ed31aa":"code","2857f6b8":"code","74bb14a1":"code","43edf01c":"code","049e2ee6":"code","d5594873":"code","458d181d":"code","72066d5b":"code","6203fafb":"code","199f4c53":"code","aa2dd1fd":"code","98506c9e":"code","b104df53":"code","6ea69943":"code","a11694af":"code","b27922a8":"code","465cdb97":"code","508fd733":"code","c1ae4616":"code","88262403":"code","86a2cfe1":"code","c9d74fd5":"code","15d042e3":"code","50bc13e0":"code","52541075":"code","d189c6b5":"code","e6a2d290":"code","ff19de9d":"code","860e3d5f":"code","832523f9":"code","2e3cef18":"code","c0292ae1":"code","1e93fb50":"code","29cc4aae":"code","e097fdca":"code","2fbac37d":"code","fcde5f8d":"code","b657e88d":"code","0e22ae8c":"code","0f11c11f":"code","89fce0bf":"code","5c23e76a":"code","dd3cc9c0":"markdown","3d223417":"markdown","cf4c9da4":"markdown","22622875":"markdown","441a4cce":"markdown","4426050d":"markdown","01db9f6e":"markdown","7a4e188c":"markdown","334ac035":"markdown","b687b058":"markdown","a2a51545":"markdown","d2249e44":"markdown","38fbe81c":"markdown","baafa29f":"markdown","8bf10b4e":"markdown","1baccc1e":"markdown","998b06ad":"markdown","0abcb56f":"markdown","ba2f46ed":"markdown","f1d52430":"markdown","32ebbc73":"markdown","c0589080":"markdown","895dafc1":"markdown","7c0e550a":"markdown","f04edce0":"markdown","3336085b":"markdown","6f4c693f":"markdown","928e3b3c":"markdown","bd2e2771":"markdown","7a4e7265":"markdown","a2f6afa9":"markdown","392bffc1":"markdown","4e5177c5":"markdown","08c5a387":"markdown","01a8164b":"markdown","1ade7bcd":"markdown","9e1ac9cf":"markdown","06f7a3c9":"markdown","f3c8a083":"markdown","bb935290":"markdown","b4c092a6":"markdown","55aa4ec7":"markdown","cf5c8aab":"markdown","e74a01ab":"markdown","73e47f26":"markdown","6c2472b1":"markdown","e7478691":"markdown","ce9b08ae":"markdown","7b88e052":"markdown","6483b748":"markdown","6be94a3e":"markdown","29c203be":"markdown"},"source":{"7528d540":"!pip install seaborn --upgrade","8170c573":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom sklearn import metrics\nimport missingno as msno\nfrom scipy import stats","8ca1dd22":"dftrain = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ndftest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","fc513560":"fig, ax = plt.subplots(ncols = 2, figsize = (25,6))\nax[0].title.set_text('Training set')\nmsno.matrix(dftrain, figsize = (10,10), ax = ax[0])\nax[1].title.set_text('Test set')\nmsno.matrix(dftest, figsize = (10,10), ax = ax[1])\nplt.show()","3e4f4cdc":"X = dftrain.drop(columns = 'SalePrice')\nY = dftrain.SalePrice","c5e7775d":"for i in X.columns:\n    null_train = (X[i].isnull().sum()\/len(X))*100\n    null_test = (dftest[i].isnull().sum()\/len(dftest))*100\n    if null_train > 0:\n        print(f'Column {i} of train set has {null_train:.2f}% of null data')\n    if null_test > 0:\n        print(f'Column {i} of the test set has {null_test:.2f}% of null data')","4d56b3c4":"dftrain , dftest = dftrain.drop(columns = 'Alley') , dftest.drop(columns = 'Alley')","a9c61e5f":"print(f'{dftrain[\"Utilities\"].value_counts()}') , print(f'\\n{dftest[\"Utilities\"].value_counts()}')","55ca5d18":"dftrain , dftest = dftrain.drop(columns = 'Utilities') , dftest.drop(columns = 'Utilities')","096d7dd8":"print(f'{dftrain[\"Exterior1st\"].value_counts()}') , print(f'\\n{dftest[\"Exterior1st\"].value_counts()}')","e0911967":"dftest['Exterior1st'] = np.where(dftest.Exterior1st.isnull(), 'VinylSd', dftest.Exterior1st)","a5bc4126":"print(f'{dftrain[\"Exterior2nd\"].value_counts()}') , print(f'\\n{dftest[\"Exterior2nd\"].value_counts()}')","08d55454":"dftest['Exterior2nd'] = np.where(dftest.Exterior2nd.isnull(), 'VinylSd', dftest.Exterior2nd)","7d196c31":"print(f'{dftrain[\"MasVnrType\"].value_counts()}') , print(f'\\n{dftest[\"MasVnrType\"].value_counts()}')","7ef9c2ea":"dftrain.MasVnrType , dftest.MasVnrType = np.where(dftrain.MasVnrType.isnull(), 'None', dftrain.MasVnrType) , np.where(dftest.MasVnrType.isnull(), 'None', dftest.MasVnrType)","07301a4b":"sns.regplot(data = dftrain.query('MasVnrType != \"None\"'), x = 'MasVnrArea', y = 'SalePrice')","f7f2efeb":"dftrain , dftest = dftrain.drop(columns = 'MasVnrArea') , dftest.drop(columns = 'MasVnrArea')","05dc6453":"print(f'{dftrain[\"BsmtQual\"].value_counts()}') , print(f'\\n{dftest[\"BsmtQual\"].value_counts()}')","00fe30a6":"sns.boxplot(data = dftrain, x = 'BsmtQual', y = 'SalePrice')","8afc9e0c":"dftrain.loc[dftrain['BsmtQual'].isnull()]['SalePrice'].mean()","16720212":"dftrain.BsmtQual, dftest.BsmtQual = np.where(dftrain.BsmtQual.isnull(), 'TA', dftrain.BsmtQual) ,  np.where(dftest.BsmtQual.isnull(), 'TA', dftest.BsmtQual)","da1a35a0":"print(f'{dftrain[\"BsmtCond\"].value_counts()}') , print(f'\\n{dftest[\"BsmtCond\"].value_counts()}')","6fb18334":"dftrain.BsmtCond, dftest.BsmtCond = np.where(dftrain.BsmtCond.isnull(), 'TA', dftrain.BsmtCond) ,  np.where(dftest.BsmtCond.isnull(), 'TA', dftest.BsmtCond)","70b64384":"print(f'{dftrain[\"BsmtExposure\"].value_counts()}') , print(f'\\n{dftest[\"BsmtExposure\"].value_counts()}')","a88ebda0":"dftrain.BsmtExposure, dftest.BsmtExposure = np.where(dftrain.BsmtExposure.isnull(), 'TA', dftrain.BsmtExposure) ,  np.where(dftest.BsmtExposure.isnull(), 'TA', dftest.BsmtExposure)","8c74d867":"print(f'{dftrain[\"BsmtFinType1\"].value_counts()}') , print(f'\\n{dftest[\"BsmtFinType1\"].value_counts()}')","44a679bf":"dftrain.BsmtFinType1, dftest.BsmtFinType1 = np.where(dftrain.BsmtFinType1.isnull(), 'Unf', dftrain.BsmtFinType1) ,  np.where(dftest.BsmtFinType1.isnull(), 'Unf', dftest.BsmtFinType1)","b104f086":"print(f'{dftrain[\"BsmtFinSF1\"].value_counts()}') , print(f'\\n{dftest[\"BsmtFinSF1\"].value_counts()}')","9d4745e3":"dftest.BsmtFinSF1 = np.where(dftest.BsmtFinSF1.isnull(), 0.0, dftest.BsmtFinSF1)","9651217a":"print(f'{dftrain[\"BsmtFinType2\"].value_counts()}') , print(f'\\n{dftest[\"BsmtFinType2\"].value_counts()}')","0ccb48a1":"dftrain.BsmtFinType2, dftest.BsmtFinType2 = np.where(dftrain.BsmtFinType2.isnull(), 'Unf', dftrain.BsmtFinType2) ,  np.where(dftest.BsmtFinType2.isnull(), 'Unf', dftest.BsmtFinType2)","3fdf8e10":"print(f'{dftrain[\"BsmtFinSF2\"].value_counts()}') , print(f'\\n{dftest[\"BsmtFinSF2\"].value_counts()}')","7d6f89be":"dftest.BsmtFinSF2 = np.where(dftest.BsmtFinSF2.isnull(), 0.0, dftest.BsmtFinSF2)","238300f2":"print(f'{dftrain[\"BsmtUnfSF\"].value_counts()}') , print(f'\\n{dftest[\"BsmtUnfSF\"].value_counts()}')","51a85faf":"dftest.BsmtUnfSF = np.where(dftest.BsmtUnfSF.isnull(), 0.0, dftest.BsmtUnfSF)","dcdc0540":"print(f'{dftrain[\"TotalBsmtSF\"].value_counts()}') , print(f'\\n{dftest[\"TotalBsmtSF\"].value_counts()}')","b789163e":"dftest.loc[dftest['TotalBsmtSF'].isnull()]['BsmtQual'].value_counts()","2a736def":"dftest.TotalBsmtSF = np.where(dftest.TotalBsmtSF.isnull(), 864.0, dftest.TotalBsmtSF)","3ff4722e":"print(f'{dftrain[\"Electrical\"].value_counts()}') , print(f'\\n{dftest[\"Electrical\"].value_counts()}')","f4de1508":"dftrain.Electrical = np.where(dftrain.Electrical.isnull(), 'SBrkr', dftrain.Electrical)","baa7d0e3":"print(f'{dftrain[\"BsmtFullBath\"].value_counts()}') , print(f'\\n{dftest[\"BsmtFullBath\"].value_counts()}')","d08c219f":"dftrain.BsmtFullBath , dftest.BsmtFullBath = np.where(dftrain.BsmtFullBath.isnull(), 0, dftrain.BsmtFullBath) , np.where(dftest.BsmtFullBath.isnull(), 0,dftest.BsmtFullBath)","4a254364":"print(f'{dftrain[\"BsmtHalfBath\"].value_counts()}') , print(f'\\n{dftest[\"BsmtHalfBath\"].value_counts()}')","c7cf9dbf":"dftest.BsmtHalfBath = np.where(dftest.BsmtHalfBath.isnull(), 0.0, dftest.BsmtHalfBath)","b7e0704f":"print(f'{dftrain[\"KitchenQual\"].value_counts()}') , print(f'\\n{dftest[\"KitchenQual\"].value_counts()}')","26a55135":"dftest.KitchenQual = np.where(dftest.KitchenQual.isnull(), 'TA', dftest.KitchenQual)","5f258978":"print(f'{dftrain[\"Functional\"].value_counts()}') , print(f'\\n{dftest[\"Functional\"].value_counts()}')","97b699db":"dftest.Functional = np.where(dftest.Functional.isnull(), 'Typ', dftest.Functional)","1f5e198b":"dftrain , dftest = dftrain.drop(columns = 'FireplaceQu') , dftest.drop(columns = 'FireplaceQu')","3701a351":"print(f'{dftrain[\"GarageType\"].value_counts()}') , print(f'\\n{dftest[\"GarageType\"].value_counts()}')","6c58a458":"dftrain.loc[dftrain['GarageYrBlt'] == dftrain['YearBuilt']]['GarageType'].value_counts() ","dbaa1c89":"dftrain.loc[dftrain['GarageYrBlt'] != dftrain['YearBuilt']]['GarageType'].value_counts() ","8416ca3b":"dftrain.GarageType = np.where((dftrain.GarageType.isnull())&(dftrain.YearBuilt == dftrain.GarageYrBlt), 'Attchd', dftrain.GarageType)","8fb8a082":"dftrain.GarageType = np.where((dftrain.GarageType.isnull())&(dftrain.YearBuilt != dftrain.GarageYrBlt), 'Detchd', dftrain.GarageType)","3a048f30":"dftest.GarageType = np.where((dftest.GarageType.isnull())&(dftest.YearBuilt == dftest.GarageYrBlt), 'Attchd', dftest.GarageType)\ndftest.GarageType = np.where((dftest.GarageType.isnull())&(dftest.YearBuilt != dftest.GarageYrBlt), 'Detchd', dftest.GarageType)","f6c31922":"print(f'{dftrain[\"GarageYrBlt\"].median()}') , print(f'\\n{dftest[\"GarageYrBlt\"].median()}')","40d7dcc7":"dftest.loc[dftest['GarageYrBlt'].isnull()]['YearBuilt'].value_counts()","f8ca571b":"dftrain.GarageYrBlt , dftest.GarageYrBlt = np.where(dftrain.GarageYrBlt.isnull(), 1980, dftrain.GarageYrBlt) , np.where(dftest.GarageYrBlt.isnull(), 1979, dftest.GarageYrBlt)","fdfe65a7":"print(f'{dftrain[\"GarageFinish\"].value_counts()}') , print(f'\\n{dftest[\"GarageFinish\"].value_counts()}')","25f646db":"dftrain.GarageFinish , dftest.GarageFinish = np.where(dftrain.GarageFinish.isnull(), 'Unf', dftrain.GarageFinish) , np.where(dftest.GarageFinish.isnull(), 'Unf', dftest.GarageFinish)","d5103471":"print(f'{dftrain[\"GarageCars\"].value_counts()}') , print(f'\\n{dftest[\"GarageCars\"].value_counts()}')","409d844a":"dftest.GarageCars = np.where(dftest.GarageCars.isnull(), 2.0, dftest.GarageCars)","4bcf9cf6":"dftrain , dftest = dftrain.drop(columns = 'GarageArea') , dftest.drop(columns = 'GarageArea')","ec4f2e97":"print(f'{dftrain[\"GarageQual\"].value_counts()}') , print(f'\\n{dftest[\"GarageQual\"].value_counts()}')","e721087e":"dftrain.GarageQual , dftest.GarageQual = np.where(dftrain.GarageQual.isnull(), 'TA', dftrain.GarageQual) , np.where(dftest.GarageQual.isnull(), 'TA', dftest.GarageQual)","fcb31a21":"dftrain , dftest = dftrain.drop(columns = 'GarageCond') , dftest.drop(columns = 'GarageCond')","885ddca9":"dftrain , dftest = dftrain.drop(columns = 'PoolQC') , dftest.drop(columns = 'PoolQC')","bd65650e":"dftrain , dftest = dftrain.drop(columns = 'Fence') , dftest.drop(columns = 'Fence')","f1745533":"dftrain , dftest = dftrain.drop(columns = 'MiscFeature') , dftest.drop(columns = 'MiscFeature')","7de102aa":"print(f'{dftrain[\"SaleType\"].value_counts()}') , print(f'\\n{dftest[\"SaleType\"].value_counts()}')","c0ed31aa":"dftest.SaleType = np.where(dftest.SaleType.isnull(), 'WD', dftest.SaleType)","2857f6b8":"dftrain , dftest = dftrain.drop(columns = 'LotFrontage') , dftest.drop(columns = 'LotFrontage')","74bb14a1":"print(f'{dftrain[\"MSZoning\"].value_counts()}') , print(f'\\n{dftest[\"MSZoning\"].value_counts()}')","43edf01c":"dftest.MSZoning = np.where(dftest.MSZoning.isnull(), 'RL', dftest.MSZoning)","049e2ee6":"dftrain, dftest = dftrain.drop(columns = 'MSSubClass'), dftest.drop(columns = 'MSSubClass')","d5594873":"fig, ax = plt.subplots()\nordem = dftrain.groupby(by = 'MSZoning', as_index = False)['SalePrice'].median()\nordem = ordem.sort_values(by = 'SalePrice',ascending = False)\nsns.boxplot(data = dftrain , x = 'MSZoning', y = 'SalePrice', order = ordem['MSZoning'])","458d181d":"sns.scatterplot(data = dftrain , x = 'LotArea', y = 'SalePrice')","72066d5b":"sns.boxplot(data = dftrain, x = 'MSZoning', y = 'LotArea')\nplt.ylim(0,50000)","6203fafb":"sns.boxplot(data = dftrain , x = 'Street', y = 'SalePrice')","199f4c53":"plt.figure(figsize = (20,10))\nsns.boxplot(data = dftrain , x = 'LotShape', y = 'SalePrice')","aa2dd1fd":"sns.countplot(data = dftrain, x = 'LotShape', hue = 'MSZoning')","98506c9e":"sns.boxplot(data = dftrain , x = 'LandContour', y = 'SalePrice')","b104df53":"sns.boxplot(data = dftrain , x = 'LotConfig', y = 'SalePrice')","6ea69943":"sns.boxplot(data = dftrain , x = 'LandSlope', y = 'SalePrice')","a11694af":"plt.figure(figsize = (20,10))\nordem = dftrain.groupby(by = 'Neighborhood', as_index = False)['SalePrice'].median()\nordem = ordem.sort_values(by = 'SalePrice', ascending = False)\nsns.boxplot(data = dftrain , x = 'Neighborhood', y = 'SalePrice', order = ordem['Neighborhood'])\nplt.xticks(rotation = 45)\nplt.show()","b27922a8":"plt.figure(figsize = (20,10))\nsns.countplot(data = dftrain, x = 'Neighborhood')\nplt.xticks(rotation = 45)\nplt.show()","465cdb97":"plt.figure(figsize = (20,10))\nsns.countplot(data = dftrain, x = 'YearBuilt')\nplt.xticks(rotation = 90)\nplt.show()","508fd733":"plt.figure(figsize = (20,10))\nsns.lineplot(data = dftrain , x = 'YearBuilt', y = 'SalePrice')\nplt.xticks(rotation = 90)\nplt.show()","c1ae4616":"list_train = list(dftrain.select_dtypes(include = 'object').columns)\nlist_test = list(dftest.select_dtypes(include = 'object').columns)","88262403":"def dummy_func(df,lista):\n    for i in lista:\n        df = df.join(df[i].str.get_dummies(), rsuffix = i)\n        df = df.drop(columns = i)\n    return df","86a2cfe1":"dftrain = dummy_func(dftrain, list_train)\ndftest = dummy_func(dftest, list_test)","c9d74fd5":"lista_falta = list()\nfor i in dftrain.columns:\n    try:\n        print(f'{len(dftrain[i])} \/\/\/\/\/ {len(dftest[i])}' )\n    except:\n        lista_falta.append(i)","15d042e3":"for i in lista_falta:\n    dftest[i] = 0","50bc13e0":"dftest","52541075":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV","d189c6b5":"seed = 1000","e6a2d290":"rfr_param = {'n_estimators':[100,120,150,200], 'max_leaf_nodes':[2,3,4,5,8,10,12,15],\n             'max_depth':[2,4,6,8,10,12,14,15]}","ff19de9d":"Y = dftrain['SalePrice']\nX = dftrain.drop(columns = ['Id','SalePrice'])\nX_test = dftest.drop(columns = ['Id', 'SalePrice'])","860e3d5f":"train_x, val_x, train_y, val_y = train_test_split(X,Y,random_state = seed)","832523f9":"rfr = RandomForestRegressor(random_state = seed)","2e3cef18":"#rfr_grid = GridSearchCV(rfr, rfr_param, scoring = 'neg_mean_absolute_error', cv = 10)","c0292ae1":"#rfr_grid.fit(X,Y)","1e93fb50":"#rfr_grid.best_params_","29cc4aae":"#rfr_grid_results = pd.DataFrame(rfr_grid.cv_results_)","e097fdca":"#rfr_grid_results = rfr_grid_results[['rank_test_score', 'mean_test_score', 'params']]","2fbac37d":"#rfr_grid_results.sort_values(by = 'rank_test_score', ascending = True)","fcde5f8d":"rfr = RandomForestRegressor(random_state = seed, max_depth = 6, max_leaf_nodes = 15, n_estimators = 120)","b657e88d":"rfr.fit(X, Y)","0e22ae8c":"y = rfr.predict(X_test)","0f11c11f":"Id = dftest['Id']","89fce0bf":"output = pd.DataFrame({'Id': Id, 'SalePrice':y})","5c23e76a":"output.to_csv('submission.csv',index = False)","dd3cc9c0":"It is clear that low density areas tends to have higher prices.","3d223417":"Checking column BsmtFinType1","cf4c9da4":"Loop to check missing features","22622875":"Checking column BsmtHalfBath","441a4cce":"Function to transform categorical columns into bynary columns","4426050d":"Checking column Electrical","01db9f6e":"MSSubClass seens not to cooperate in the future model. Lets drop.","7a4e188c":"The mean value for dftrain is within TA range, in this case lets fill NaN with TA. As I dont have information on SalePrice for dftest, I will follow the same rule","334ac035":"In this case the only null case of TotalBsmtSF is related to a Typical Basement height. So I will fulfill with the second most common value (864)","b687b058":"Checking column BsmtUnfSF","a2a51545":"# NOW I HAVE TREATED ALL NUALITY, LET'S EXPLORE THE DATA","d2249e44":"Checking column Functional","38fbe81c":"Checking column MiscFeature\nAlmost 100% null data. LETS DROP IT","baafa29f":"We already have a variable called GarageCars that gives an idea of the garage area. Let's drops this one.","8bf10b4e":"Checking column GarageQual","1baccc1e":"Checking column GarageArea","998b06ad":"Now the column Exterior2nd","0abcb56f":"Checking column MSZoning","ba2f46ed":"Checking column GarageFinish","f1d52430":"Follows the same trend of Exterior1st","32ebbc73":"Checking column TotalBsmtSF","c0589080":"Checking column BsmtFinType2","895dafc1":"Let's check the columnn MasVnrArea which represents the area of masonry veneer.","7c0e550a":"No clear correlation with SalePrice and many of the data comes from MasVnrType NONE, so no Masonry Veneer included. It means DROP IT.","f04edce0":"Now the column Exterior1st","3336085b":"# It took me over 30 minutes to run this GridSearch, so to save some time here i won't run it again. The results i got are: {'max_depth': 6, 'max_leaf_nodes': 15, 'n_estimators': 120}","6f4c693f":"Checking column GarageType","928e3b3c":"Checking column SaleType","bd2e2771":"Checking column KitchenQual","7a4e7265":"In this case I will fulfill with the most common categorical data which is NONE.","a2f6afa9":"Checking column BsmtFinSF1 that is null only on the test dataset","392bffc1":"We do not have relevant information on this column aswell. It means DROP IT","4e5177c5":"Let's filter our datasets by BsmtQual using isnull()","08c5a387":"Checking columns BsmtCond","01a8164b":"Checking column GarageCond","1ade7bcd":"Checking column LotFrontage, I think the best way to handle is to drop it, once we already have LotArea.","9e1ac9cf":"Checking column Fence\nAlmost 100% null data. LETS DROP IT","06f7a3c9":"Checking GarageCars","f3c8a083":"Checking column BsmtFullBath","bb935290":"Alley column has more than 90% of null data on both sets (train and test). It means DROP IT!","b4c092a6":"Now let's check the column MasVnrType","55aa4ec7":"# Too many work to do =P. Let's see first what columns we can drop based on life experience","cf5c8aab":"On the test dataset, this column has 0.07% of null data. It represents 1 sample. In this case I will fulfill it with the most present categorical value","e74a01ab":"Checking column BsmtFinSF2 that is null only on the test dataset","73e47f26":"Before treat my data, let's split the target from the train set","6c2472b1":"Checking GarageYrBlt","e7478691":"Checking the column BsmtExposure","ce9b08ae":"Initial visual glimpse of the datasets gives","7b88e052":"Next column to be evaluated: Utilities","6483b748":"Now let's check the column BsmtQual","6be94a3e":"Checking column FireplaceQu. Too much missing data. Let's drop it.","29c203be":"Checking column PoolQual\nAlmost 100% null data. LETS DROP IT"}}