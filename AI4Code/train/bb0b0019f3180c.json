{"cell_type":{"18110700":"code","3ecd405b":"code","d11872f1":"code","6a31e012":"code","b2c29f36":"code","f9609e6b":"code","009994d8":"code","b8db6cef":"code","4e7ea350":"code","0259063d":"code","7932704d":"code","6a122711":"code","48284d1c":"code","8490b19c":"code","acaf94a0":"code","ad116cdf":"code","8a563e29":"code","dfabcc2b":"code","7aee10b3":"code","2ba57ebf":"code","62b46831":"code","937f17b3":"code","3bf23890":"code","488ac761":"code","8abeacec":"code","e5626cbb":"code","c6a37cfd":"code","a532a066":"code","003b83ef":"code","509693fc":"code","97c6dbcd":"code","2e10f906":"code","22d5e202":"code","8830d06d":"code","85972942":"code","3368e6ad":"code","221d709e":"code","dbee45ab":"code","f33ece7e":"code","7c2933ec":"code","cc661cc9":"code","612ed7f3":"code","fb072d90":"code","67083c1b":"code","34c3c0bb":"code","848ae5b6":"code","ea113ef0":"code","d81040bc":"code","b5889e01":"code","200200ff":"code","3b8fe7a2":"code","9bf1601f":"code","3ed1a2ec":"code","37eb66d5":"code","50af9370":"code","bf91c4b8":"code","decb1eed":"code","9f12fffe":"code","6319da9c":"code","d4a94f53":"code","e7ff3a6e":"code","3a89416b":"markdown","16e86b48":"markdown","f7df6dbe":"markdown","fd09cacd":"markdown","4309762a":"markdown","c011aa2c":"markdown","70d4fe19":"markdown","222eb9aa":"markdown","b4427e80":"markdown","b33a23a9":"markdown","90693396":"markdown","2573f9ae":"markdown","51de8e7c":"markdown","9b4f861c":"markdown","d3c466d0":"markdown","70ed0eff":"markdown","5d953b6d":"markdown","1f4cf8fc":"markdown","900f95dc":"markdown","7d9bd934":"markdown","5d24dd10":"markdown","0dff90fb":"markdown","8ee0b5e9":"markdown","f2f1794a":"markdown","56a3f4bb":"markdown","a1872ceb":"markdown","7ac6f460":"markdown","079e1d40":"markdown","da9e9336":"markdown","3a1baf4f":"markdown","c85b12b1":"markdown","fc119b0c":"markdown","d8f7302a":"markdown","0603b8eb":"markdown","53e1c756":"markdown","c195f1b8":"markdown","ea55d31b":"markdown","1914e010":"markdown","0fcb5620":"markdown","b885d8a2":"markdown","03f3aac9":"markdown","20f21761":"markdown","fadc6eaf":"markdown","d36c386b":"markdown","7fb62164":"markdown","9378f8f5":"markdown","d3513d81":"markdown","c0291d4c":"markdown","a4f7d66f":"markdown","a3a878e8":"markdown"},"source":{"18110700":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ecd405b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import iplot\nimport cufflinks as cf\ncf.go_offline()\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfrom wordcloud import WordCloud\n\nimport plotly.express as px \n%matplotlib inline","d11872f1":"path = '\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv'\ndata = pd.read_csv(path)\ndata.head()","6a31e012":"cols = data.columns.tolist()\ncols","b2c29f36":"data.drop(['Unnamed: 0','ID',], axis=1, inplace = True)\ncols = data.columns.tolist()\ncols","f9609e6b":"data.info()","009994d8":"print(\"Percentage Missing Data\")\n(data.isnull().sum()\/data.shape[0])*100","b8db6cef":"data.Age.value_counts()","4e7ea350":"age_map = {'18+' : 18, '7+' : 7, '13+': 13, 'all' : 0, '16+' : 16}\ndata['intAge'] = data['Age'].map(age_map)","0259063d":"data.head()","7932704d":"data['Rotten Tomatoes'].value_counts().sort_values(ascending=False)","6a122711":"data['New_Rotten_Tomatoes'] = data['Rotten Tomatoes'].str.replace(\"%\",\"\")\nfor i in data['New_Rotten_Tomatoes']:\n    if i is str:\n        i = i.astype(int)\n    ","48284d1c":"data.info()","8490b19c":"data['New_Rotten_Tomatoes']","acaf94a0":"data['Age'].value_counts().iplot('bar', xTitle='Age Group', \n                                        yTitle='Count of Movies', \n                                        title=\"Number of Movies in specific age group in All services\")","ad116cdf":"data_netflix = data.copy()\ndata_netflix = data_netflix[data['Netflix']==1]\ndata_netflix['Age'].value_counts().iplot('bar', colors='Blue', xTitle='Age Group', \n                                        yTitle='Count of Movies', \n                                        title=\"Number of Movies in specific age group in NetFlix\")","8a563e29":"data_hulu = data.copy()\ndata_hulu = data_hulu[data['Hulu']==1]\ndata_hulu['Age'].value_counts().iplot('bar', colors='Red', xTitle='Age Group', \n                                        yTitle='Count of Movies', \n                                        title=\"Number of Movies in specific age group in Hulu\")","dfabcc2b":"data_prime = data.copy()\ndata_prime = data_prime[data['Prime Video']==1]\ndata_prime['Age'].value_counts().iplot('bar', colors='Black', xTitle='Age Group', \n                                        yTitle='Count of Movies', \n                                        title=\"Number of Movies in specific age group in Prime Video\")","7aee10b3":"data_disney = data.copy()\ndata_disney = data_disney[data['Disney+']==1]\ndata_disney['Age'].value_counts().iplot('bar', colors='Purple', \n                                        xTitle='Age Group', \n                                        yTitle='Count of Movies', \n                                        title=\"Number of Movies in specific age group in Disney+\")","2ba57ebf":"data['Rotten Tomatoes'].value_counts().iplot(kind = 'bar', colors = 'Cyan', xTitle = \"Ratings\", yTitle=\"Number of Movies\", title=\"Overall Rotten Tomato Ratings\")","62b46831":"rotten_tomato_scores = pd.DataFrame({'Streaming Service': [\"Prime Video\", \"Hulu\",\"Disney+\",\"NetFlix\"],\n                                    'Rotten Tomato Score' : [data_prime['Rotten Tomatoes'].value_counts()[0], \n                                                             data_hulu['Rotten Tomatoes'].value_counts()[0],\n                                                             data_disney['Rotten Tomatoes'].value_counts()[0],\n                                                             data_netflix['Rotten Tomatoes'].value_counts()[0]]})\nrotten_tomato_scores.head()","937f17b3":"rotten_tomato_scores.sort_values(ascending=False, by=\"Rotten Tomato Score\").iplot(kind='bar', x='Streaming Service', y='Rotten Tomato Score', \n                           color='Violet', xTitle=\"Streaming Service\", \n                           yTitle=\"Count of Movies with Score of 100%\", \n                           title=\"Streaming Service with 100% Rotten Tomato Score\")","3bf23890":"data['IMDb'].value_counts().iplot(kind=\"bar\", color=\"Red\", xTitle='IMDb Ratings', yTitle=\"Count of Movies\", title = \"Count of Movies vs IMDb Ratings\")","488ac761":"def get_imdb_count_per_service(d):\n    # This function returns the number of movies in a service having IMDb score greater than 7.5\n    num_of_movies = 0\n    for key,value in d.items():\n        if key>=7.5:\n            num_of_movies+=value\n    return num_of_movies","8abeacec":"imdb_prime_count = get_imdb_count_per_service(dict(data_prime['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_hulu_count = get_imdb_count_per_service(dict(data_hulu['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_disey_count = get_imdb_count_per_service(dict(data_disney['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_netflix_count = get_imdb_count_per_service(dict(data_netflix['IMDb'].value_counts().sort_values(ascending=False)))\n\nimdb_scores = pd.DataFrame({'Streaming Service': [\"Prime Video\", \"Hulu\",\"Disney+\",\"NetFlix\"],\n                                    'IMDb Score' :[imdb_prime_count, imdb_hulu_count, imdb_disey_count, imdb_netflix_count] })\nimdb_scores.head()","e5626cbb":"imdb_scores.sort_values(ascending=False, by='IMDb Score').iplot(kind=\"bar\", color=\"Cyan\",x='Streaming Service', \n                  xTitle='Streaming Service', \n                  yTitle=\"Count of Movies with IMDB Score >=7.5\", \n                  title = \"Streaming Services with Movies having IMDB >= 7.5\")","c6a37cfd":"data['Language'].value_counts()","a532a066":"%%time\nlanguages_dict = dict(data['Language'].value_counts())\nlanguages = set()\nfor lang,count in languages_dict.items():\n    curr_lang = lang\n    curr_langs = curr_lang.split(\",\")\n    for i in curr_langs:\n        if i in languages:\n            continue\n        else:\n            languages.add(i.lower())\nlanguages = list(languages)\nprint(\"Total number of languages are : \", len(languages))","003b83ef":"%%time\nlanguages_count = dict()\nfor lang,count in languages_dict.items():\n    curr_lang = lang.split(\",\")\n    for i in curr_lang:\n        if i in languages_count.keys():\n            languages_count[i] = languages_count.get(i) + 1\n        else:\n            languages_count[i] = 1","509693fc":"lang_count_df = pd.DataFrame(languages_count.items(), columns=['Language', 'Count'])\nlang_count_df.head()","97c6dbcd":"lang_count_df.sort_values(ascending=False, by='Count')[:20].iplot(kind='bar', \n                                                                  x='Language', \n                                                                  xTitle='Language', \n                                                                  yTitle='Count', colors='Green', \n                                                                  title='Language vs Count')","2e10f906":"lang_count_df_copy = lang_count_df[:20]\nfig = px.pie(values=lang_count_df_copy['Count'], names=lang_count_df_copy['Language']) \nfig.show()","22d5e202":"pd.DataFrame(dict(data['Runtime'].value_counts().sort_values(ascending=False)[:20]).items(), columns=['Runtime', 'Count']).iplot(kind='bar' ,\n                                                                                                                                 x='Runtime', \n                                                                                                                                 xTitle='Runtime', \n                                                                                                                                 yTitle='Count', title='Runtime vs Count',\n                                                                                                                                colors='Magenta')","8830d06d":"len(data['Directors'])","85972942":"directors = list(set(data['Directors']))\ndirectors.pop(0) #TO REMOVE NAN VALUE\nlen(directors)","3368e6ad":"new_director = set()\nfor d in directors:\n    curr_d = d.split(\",\")\n    for direc in curr_d:\n        if direc in new_director:\n            continue\n        else:\n            new_director.add(direc)\nlen(new_director)","221d709e":"%%time\nnew_data = data[data['Directors'].notna()]\ndirectors_count = dict()\ndirec_in_data = list(new_data['Directors'])\nfor xdir in direc_in_data:\n    curr_dirs = xdir.split(\",\")\n    for xd in curr_dirs:\n        if xd in directors_count.keys():\n            directors_count[xd] = directors_count.get(xd) + 1\n        else:\n            directors_count[xd] = 1","dbee45ab":"directors_count_df = pd.DataFrame(directors_count.items(), columns=['Director', 'Count'])\ndirectors_count_df.sort_values(ascending=False, by='Count').head()","f33ece7e":"directors_count_df.sort_values(ascending=False, by='Count')[:20].iplot(kind='bar', \n                                                                  x='Director', \n                                                                  xTitle='Director', \n                                                                  yTitle='Count', colors='Blue', \n                                                                  title='Director vs Count')","7c2933ec":"data[data['Directors']=='Jay Chapman']","cc661cc9":"temp_data = data[data['Netflix']==1]\ntemp_data = temp_data[temp_data['Prime Video']==1]\ntemp_data","612ed7f3":"#list(temp_data['Title'])","fb072d90":"plt.subplots(figsize = (10,10))\n\nwordcloud = WordCloud (\n                    background_color = 'white',\n                    width = 720,\n                    height = 720\n                        ).generate(' '.join(temp_data['Title']))\nplt.imshow(wordcloud) # image show\nplt.axis('off') # to off the axis of x and y\nplt.show()","67083c1b":"temp_data_nh = data[data['Netflix']==1]\ntemp_data_nh = temp_data_nh[temp_data_nh['Hulu']==1]\n#list(temp_data_nh['Title'])","34c3c0bb":"plt.subplots(figsize = (10,10))\n\nwordcloud = WordCloud (\n                    background_color = 'black',\n                    width = 720,\n                    height = 720\n                        ).generate(' '.join(temp_data_nh['Title']))\nplt.imshow(wordcloud) # image show\nplt.axis('off') # to off the axis of x and y\nplt.show()","848ae5b6":"%%time\ngenres_unclean = dict(data['Genres'].value_counts())\ngenres = set()\nfor g,count in genres_unclean.items():\n    curr_g = g.split(\",\")\n    for xg in curr_g:\n        if xg in genres:\n            continue\n        else:\n            genres.add(xg)","ea113ef0":"%%time\ncount_genres = dict()\nfor g,count in genres_unclean.items():\n    curr_g = g.split(\",\")\n    for xg in curr_g:\n        if xg in count_genres.keys():\n            count_genres[xg] = count_genres.get(xg)+1\n        else:\n            count_genres[xg] = 1","d81040bc":"count_genres_df = pd.DataFrame(count_genres.items(), columns=['Genre', 'Count'])","b5889e01":"count_genres_df.sort_values(ascending=False, by='Count').iplot(kind=\"bar\", x='Genre', xTitle='Genre', yTitle='Count', title='Count of Genres', color='pink')","200200ff":"plt.subplots(figsize = (10,10))\n\nwordcloud_genre = WordCloud (\n                    background_color = 'white',\n                    width = 720,\n                    height = 720\n                        ).generate(' '.join(count_genres_df['Genre']))\nplt.imshow(wordcloud_genre) # image show\nplt.axis('off') # to off the axis of x and y\nplt.show()","3b8fe7a2":"data_netflix_top = data_netflix[data_netflix['IMDb']>8.5]\ndata_netflix_top = data_netflix_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')","9bf1601f":"plt.figure(figsize=(10,8))\nsns.barplot(x='IMDb',y='Title',data=data_netflix_top, palette='deep')\nplt.title('Top NetFlix Movies')\nplt.show()","3ed1a2ec":"data_hulu_top = data_hulu[data_hulu['IMDb']>8.5]\ndata_hulu_top = data_hulu_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')","37eb66d5":"plt.figure(figsize=(10,8))\nsns.barplot(x='IMDb',y='Title',data=data_hulu_top, palette='husl')\nplt.title('Top Hulu Movies')\nplt.show()","50af9370":"data_disney_top = data_disney[data_disney['IMDb']>8.5]\ndata_disney_top = data_disney_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')","bf91c4b8":"plt.figure(figsize=(10,8))\nsns.barplot(x='IMDb',y='Title',data=data_disney_top, palette='husl')\nplt.title('Top Disney+ Movies')\nplt.show()","decb1eed":"data_prime_top = data_prime[data_prime['IMDb']>8.5]\ndata_prime_top = data_prime_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')[:10]","9f12fffe":"plt.figure(figsize=(10,8))\nsns.barplot(x='IMDb',y='Title',data=data_prime_top, palette='husl')\nplt.title('Top Prime Videos Movies')\nplt.show()","6319da9c":"dur_n = round(data_netflix['Runtime'].sum()\/data_netflix.shape[0],2)\ndur_h = round(data_hulu['Runtime'].sum()\/data_hulu.shape[0],2)\ndur_p = round(data_prime['Runtime'].sum()\/data_prime.shape[0],2)\ndur_d = round(data_disney['Runtime'].sum()\/data_disney.shape[0],2)\nprint(dur_n, dur_h, dur_p, dur_d)","d4a94f53":"duration_df = pd.DataFrame({\n    'Streaming Platform' : ['NetFlix','Hulu','Prime Video','Disney+'],\n    'Duration' : [dur_n, dur_h, dur_p, dur_d]\n})\nduration_df.head()","e7ff3a6e":"duration_df.sort_values(ascending=False, by='Duration').iplot(kind=\"bar\", x='Streaming Platform', \n                                                              xTitle='Streaming Platform', \n                                                              yTitle='Duration', title='Average Duration', color='Red')","3a89416b":"# **Plotting Graphs**","16e86b48":"### NetFlix","f7df6dbe":"### Disney+","fd09cacd":"<h3 style=\"color: blue;\">Around 1\/11 of 18+ movies, 1\/10 13+ moveis, 1\/13 7+ moveis and 1\/19 16+ movies are from Hulu <\/h3>","4309762a":"## **Movie\/Show Runtime**","c011aa2c":"### Thanks for visiting. Do upvote if you liked the kernel :-D","70d4fe19":"### Hulu","222eb9aa":"# **Perfroming EDA**","b4427e80":"### Prime Video","b33a23a9":"### Most of the movies have more than 1 director, hence extarcted all the names of directors in the dataset","90693396":"### Process Rotten Tomatoes column and convert it to remove %. ","2573f9ae":"<h3 style=\"color: purple;\">Prime Video has highest number of movies with IMDB more than 7.5!<\/h3>","51de8e7c":"#### Getting total languages in dataset","9b4f861c":"<h3 style=\"color: blue;\">Most movies are rated as 18+ and very less are fit for all age groups!<\/h3>","d3c466d0":"## Average Runtime of Movies in each Platform","70ed0eff":"#### Counting each language","5d953b6d":"<h3 style=\"color: blue;\">Most of the movies streamed on Disney+ is suitable for all age gorup. We can see that, per the dataset only 3 18+ movies are listed in the Disney+<\/h3>","1f4cf8fc":"### Jay Chapman has directed most number of movies as per our calculations. Lets see the moveis he has directed","900f95dc":"### Age column has values like 18+ 16+. We fill format the column to have only numerical data such as 18 and 16 which means that a movie is 18+ or 16+ respectively. We might need to have only Numerical data in the Age column in future","7d9bd934":"#### We now have a dictionary having all the languages and their count","5d24dd10":"<h3 style=\"color: blue;\">Most of the movies have run time of approx 90 minutes.<\/h3>","0dff90fb":"### **Checking Missing Data**","8ee0b5e9":"<h3 style=\"color:blue;\">Most of the movies in the platforms belong to Drama genre<\/h3>","f2f1794a":"## **IMDB Ratings**","56a3f4bb":"### **Movies available in Netflix and Prime Video**","a1872ceb":"<h3 style=\"color: purple;\">We see that approx 553 movies have IMDb rating as 6.5 where as 407 movies have received Rotten Tomato Rating as 100%!<\/h3>","7ac6f460":"# **Importing Libraries**","079e1d40":"### We see that the data represent - Movie and in which all languages it is available in. But we want is count of every language. As in Number of movies in English, in Spanish and etc.","da9e9336":"<h3 style=\"color: purple;\">Most of the movies in these Streaming servies are in English.<\/h3>","3a1baf4f":"### Analyzing number of Movies in speific age group in NetFlix","c85b12b1":"### By converting it to Set we reduced the number from 16k to 11k","fc119b0c":"#### In this top movies will be those, having IMDB > 8.5","d8f7302a":"<h3 style=\"color: blue;\">Around 1\/5 of 18+ movies, 1\/4 13+ moveis, 1\/5 7+ moveis and 1\/4 16+ movies are from NetFlix <\/h3>","0603b8eb":"## **Explore Languages**","53e1c756":"### We see that alot of columns have null\/missing data. We won't drop these columns as we are perfoming Analysis. We can drop the Rotten Tomatoes column as it has approx 69% missing data.","c195f1b8":"<h3 style=\"color: blue;\">Around 1\/11 of 18+ movies, 1\/10 13+ moveis, 1\/13 7+ moveis and 1\/19 16+ movies are from Hulu <\/h3>","ea55d31b":"Top 20 languages in Streaming Services","1914e010":"## **Checking Number of Movies in a given Age group per Streaming Service**","0fcb5620":"### **Movies available in Netflix and Hulu**","b885d8a2":"<h3 style=\"color: purple;\">Prime is home to most movies with 100% Rotten Tomato Score<\/h3>","03f3aac9":"## **Exploring Genres**","20f21761":"### **Dropping Columns - Id and Unnamed**","fadc6eaf":"## **Rotten Tomatoes Score**\n### A Tomatometer score is calculated for a movie or TV show after it receives at least five reviews. When at least 60% of reviews for a movie or TV show are positive, a red tomato is displayed to indicate its Fresh status.\n### Rotten Tomatoes gives films a score out of 100 based on the averaged reviews of professional film critics. If a film gets a rating of 60 or more it gets a 'fresh' red tomato on the site. Less than 60 and it gets a rotten tomato.\n#### : Source - Google","d36c386b":"### It is still showing as Object type. We will again process it if we encounter any issue while analyzing the data!","7fb62164":"## Directors with Most Movies","9378f8f5":"## Plotting Graph for Language and Count","d3513d81":"<h3 style=\"color:red;\">Here the List of moveis and other details for movies directed by Jay Chapman.<\/h3>","c0291d4c":"### *For now all the dats types looks fine. We can proceed with Plotting Graphs*","a4f7d66f":"## **Top Movies in each streaming platforms**","a3a878e8":"## **Movies available in more than 1 platforms**"}}