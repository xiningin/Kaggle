{"cell_type":{"6e7d70e6":"code","2defa723":"code","518e4fb2":"code","7db8dab5":"code","e05d081a":"code","8e5bad1d":"markdown","53c0b08f":"markdown","c18d3409":"markdown","fc8fc7fa":"markdown"},"source":{"6e7d70e6":"from IPython.display import clear_output\n!pip3 install rx\nclear_output()","2defa723":"import rx \nfrom rx import of,timer,operators as op","518e4fb2":"DATA = rx.range(1000)\nSKIP_CONDITION = lambda x : x < 990\nSKIP_SECOND = 0.015","7db8dab5":"DATA.pipe(\n    op.skip_while(SKIP_CONDITION)\n).subscribe(\n    on_next = lambda x : print(\"result = {0}\".format(x)),\n    on_error = lambda e : print(\"error = {0}\".format(e)),\n    on_completed = lambda : print(\"completed\")\n)","e05d081a":"DATA.pipe(\n    op.skip_until(timer(SKIP_SECOND)) # skip time \n).subscribe(\n    on_next = lambda x : print(\"result = {0}\".format(x)),\n    on_error = lambda e : print(\"error = {0}\".format(e)),\n    on_completed = lambda : print(\"completed\")\n)","8e5bad1d":"return an observable with values from the source observable \n\nthat satisfies the condition passed.","53c0b08f":"discard values from the source observable \n\nafter the second observable emits a value or is terminated.","c18d3409":"# skip_until","fc8fc7fa":"# skip_while"}}