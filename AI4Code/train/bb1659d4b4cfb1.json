{"cell_type":{"25903156":"code","c64d41c7":"code","795c9e4c":"code","27cf4dee":"code","7b45e696":"code","809aaa39":"code","cd8b63ac":"code","269c4461":"code","caf045e4":"code","82230751":"code","44109e12":"code","b4205a47":"code","be7a13aa":"code","bbc5e060":"code","38dc9076":"code","36f5566b":"code","e44f0133":"code","0db3c226":"code","f2f0c036":"code","b19c4a93":"code","931a456e":"code","8c5972ed":"code","e50d9b3b":"markdown","ccde6ff4":"markdown","10a1ce4e":"markdown","65269301":"markdown","8e4bd4a9":"markdown","92e6d949":"markdown","20bcb7c2":"markdown","e20dcb54":"markdown","5d705370":"markdown","8d4393f3":"markdown","478b0f02":"markdown","0336d0e4":"markdown","ff91b383":"markdown","0c2a5993":"markdown","7e9cd340":"markdown","b071bfae":"markdown"},"source":{"25903156":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c64d41c7":"!pip install xfeat\n!pip install japanize_matplotlib\n!pip install lightgbm==3.2.0","795c9e4c":"import warnings\nimport numpy as np\nimport pandas as pd\nimport re\n\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import train_test_split, KFold, GroupKFold, StratifiedKFold, ShuffleSplit\nfrom sklearn.preprocessing import LabelEncoder\nfrom xfeat import (ArithmeticCombinations, ConcatCombination,\n                   GBDTFeatureExplorer, GBDTFeatureSelector, LabelEncoder,\n                   LambdaEncoder, Pipeline, SelectCategorical, SelectNumerical,\n                   TargetEncoder, aggregation)\n\nfrom tqdm import tqdm\nimport lightgbm as lgb\n\nimport gc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\n\nfrom dateutil.relativedelta import relativedelta\n\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\nimport seaborn as sns\nimport japanize_matplotlib\n# sns.set(font=\"IPAexGothic\") ### \u5fc5\u305a\u3001\u6700\u5f8c\u306b\u5b9f\u884c\n\n# \u8868\u793a\u884c\u30fb\u5217\u6570\u306e\u5909\u66f4\npd.options.display.max_rows = 30\npd.options.display.max_columns = 100","27cf4dee":"train = pd.read_csv('\/kaggle\/input\/2021-sysrdc-academy\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/2021-sysrdc-academy\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/2021-sysrdc-academy\/sample_submission.csv')","7b45e696":"# train\u3068test\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u5217\u3092\u4f5c\u6210\ntrain['is_test'] = 0\ntest['is_test'] = 1\n\n# train\u3068test\u3092\u7d50\u5408\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210\ndf = train.append(test)","809aaa39":"# \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\ndf.head()","cd8b63ac":"# \u6700\u5bc4\u99c5\uff1a\u8ddd\u96e2\uff08\u5206\uff09\u306e\u5909\u63db\ndef normalize_moyori(moyori):\n    if moyori == moyori:\n        if moyori == '30\u5206?60\u5206':\n            moyori = 45\n        elif moyori == '1H?1H30':\n            moyori = 75\n        elif moyori == '1H30?2H':\n            moyori = 105\n        elif moyori == '2H?':\n            moyori = 120\n        moyori = int(moyori)\n    return moyori\n\n\n# \u6570\u5024\u4ee5\u5916\u304c\u5165\u3063\u305f\u9762\u7a4d\u306e\u5909\u63db\ndef normalize_area(area):\n    if area == area:\n        area = int(re.sub('m\\^2\u672a\u6e80|\u33a1\u4ee5\u4e0a', '', str(area)))\n    return area\n\n\n# \u548c\u66a6\u304b\u3089\u897f\u66a6\u3078\u306e\u5909\u63db\ndef convert_wareki_to_seireki(wareki):\n    if wareki == wareki:\n        if wareki == '\u6226\u524d':\n            wareki = '\u662d\u548c20\u5e74'\n        value = wareki[2:-1]\n        if value == '\u5143':\n            value = 1\n        else:\n            value = int(value)\n        if '\u662d\u548c' in wareki:\n            seireki = 1925+value\n        elif '\u5e73\u6210' in wareki:\n            seireki = 1988+value\n        elif '\u4ee4\u548c' in wareki:\n            seireki = 2018+value\n    else:\n        seireki = wareki\n    return seireki","269c4461":"# \u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u3001\u6570\u5024\u4ee5\u5916\u304c\u5165\u3063\u3066\u3044\u308b\u5217\u3092\u4fee\u6b63\u3059\u308b\ndf['\u6700\u5bc4\u99c5\uff1a\u8ddd\u96e2\uff08\u5206\uff09'] = df['\u6700\u5bc4\u99c5\uff1a\u8ddd\u96e2\uff08\u5206\uff09'].apply(lambda x: normalize_moyori(x))\ndf['\u9762\u7a4d\uff08\u33a1\uff09'] = df['\u9762\u7a4d\uff08\u33a1\uff09'].apply(lambda x: normalize_area(x))\ndf['\u5efa\u7bc9\u5e74'] = df['\u5efa\u7bc9\u5e74'].apply(lambda x: convert_wareki_to_seireki(x))","caf045e4":"# \u53d6\u5f15\u5e74\u3068\u3044\u3046\u5217\u306e\u4f5c\u6210(\u53d6\u5f15\u6642\u70b9\u304b\u3089\u5148\u982d4\u6587\u5b57\u3092\u3068\u3063\u3066\u3001\u6574\u6570\u306b\u5909\u63db\u3059\u308b)\ndf['\u53d6\u5f15\u5e74'] = df['\u53d6\u5f15\u6642\u70b9'].str[0:4].astype(int)","82230751":"df.head(1)","44109e12":"# \u81ea\u5206\u3067\u8003\u3048\u305f\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f","b4205a47":"# \u81ea\u5206\u3067\u8003\u3048\u305f\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f","be7a13aa":"# \u6570\u5024\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3057\u3066\u304a\u304f\nnum_df = SelectNumerical().fit_transform(df)\n\n# \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u9078\u3093\u3067\u3001\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9a\u7fa9\nencoder = Pipeline([\n    SelectCategorical(),\n    LabelEncoder(output_suffix=\"\"),\n])\n# \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u884c\nle_df = encoder.fit_transform(df)\n\n# \u6570\u5024\u578b\u306e\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u3066\u5143\u306b\u623b\u3059\ndf = pd.concat([num_df, le_df], axis=1)","bbc5e060":"train_df = df.query('is_test == 0')\ntest_df = df.query('is_test == 1')","38dc9076":"train_df.head(1)","36f5566b":"test_df.head(1)","e44f0133":"# \u203b\u4e0b\u8a18\u306e\u8a2d\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7d30\u304b\u304f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\nCFG = {\n    # \u4e71\u6570\u30b7\u30fc\u30c9(\u5b9f\u9a13\u306e\u518d\u73fe\u6027\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306b\u4e71\u6570\u3092\u56fa\u5b9a\u3057\u307e\u3059)\n    \"seed\":0,\n    \n    # LGBM\u30d1\u30e9\u30e1\u30fc\u30bf\n    \"num_leaves\":127, # \u8449\u306e\u6570(\u5927\u304d\u306a\u5024\u306b\u3059\u308b\u3068\u304b\u5b66\u7fd2\u3059\u308b)\n    \"max_depth\":-1, # \u6700\u5927\u306e\u6df1\u3055(-1\u306e\u5834\u5408\u306f\u4e0a\u9650\u306a\u3057)\n    \"learning_rate\":0.05, # \u5b66\u7fd2\u7387\n    \"n_estimators\":5000, # \u6728\u3092\u4f5c\u308b\u6570\n    \"subsample\":0.8, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n    \"subsample_freq\":1, # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n    \"colsample_bytree\":0.8, # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n    \"objective\":'MAE',\n    \"eval_metric\": 'MAE', # \u8a55\u4fa1\u306b\u7528\u3044\u308b\u6307\u6a19\n    \"early_stopping_rounds\":50, # \u6307\u5b9a\u56de\u6570\u4ee5\u4e0avalid\u306e\u5024\u304c\u66f4\u65b0\u3057\u306a\u3044\u5834\u5408\u306f\u5b66\u7fd2\u3092\u6b62\u3081\u308b\n    \"verbose\":50, # \u9014\u4e2d\u7d4c\u904e\u8868\u793a\u983b\u5ea6\n}","0db3c226":"# 2018\u5e74\u3092\u691c\u8a3c\u306b\u7528\u3044\u308b\ntrain_data = train_df.query(\"\u53d6\u5f15\u5e74 != 2018\")\nvalid_data = train_df.query(\"\u53d6\u5f15\u5e74 == 2018\")\n\n# \u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u5272\ntrain_data_x = train_data.drop([\"ID\",\"is_test\", \"target\"],axis=1)\ntrain_data_y = train_data[[\"target\"]]\n\n# \u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u5272\nvalid_data_x = valid_data.drop([\"ID\",\"is_test\", \"target\"],axis=1)\nvalid_data_y = valid_data[[\"target\"]]\n\n# test\u7528\u306e\u30c7\u30fc\u30bf\ntest_data_x = test_df.drop([\"ID\",\"is_test\", \"target\"],axis=1)\n\n# \u5b66\u7fd2\u3068\u691c\u8a3c\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\nprint(\"train_size\", train_data_x.shape)\nprint(\"valid_size\", valid_data_x.shape)\n\n# \u56de\u5e30\u4e88\u6e2c\u7528\u306elightgbm\u30e2\u30c7\u30eb\u3092\u8a2d\u5b9a\ngbm_model = lgb.LGBMRegressor(\n    boosting_type='gbdt', # \u6728\u3092\u4f5c\u308b\u3068\u304d\u306e\u30eb\u30fc\u30eb\n    num_leaves=CFG['num_leaves'], # \u8449\u306e\u6570\n    max_depth=CFG['max_depth'], # \u6700\u5927\u306e\u6df1\u3055\n    learning_rate=CFG['learning_rate'], # \u5b66\u7fd2\u7387\n    n_estimators=CFG['n_estimators'], # \u6728\u3092\u4f5c\u308b\u6570\n    subsample=CFG['subsample'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u30c7\u30fc\u30bf\u306e\u5272\u5408\n    subsample_freq=CFG['subsample_freq'], # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u983b\u5ea6\n    colsample_bytree=CFG['colsample_bytree'], # \u5b66\u7fd2\u306b\u7528\u3044\u308b\u5217\u306e\u5272\u5408\n    objective=CFG['objective'], # \u5bfe\u8c61\u3068\u3059\u308b\u306e\u306f\u56de\u5e30\u554f\u984c\n    random_state=CFG['seed'], # \u4e71\u6570\u30b7\u30fc\u30c9\n    silent=False, # \u5b66\u7fd2\u5185\u5bb9\u306e\u8868\u793a\n    importance_type='gain' # \u5909\u6570\u306e\u91cd\u8981\u5ea6\u306e\u8a08\u7b97\u65b9\u6cd5\n)\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\ngbm_model.fit(train_data_x, \n              train_data_y,\n              eval_set=[(valid_data_x, valid_data_y)],\n              eval_metric=CFG[\"eval_metric\"],\n              early_stopping_rounds=CFG['early_stopping_rounds'],\n              verbose=CFG['verbose'])\n\n# \u4e88\u6e2c\ngbm_pred = gbm_model.predict(valid_data_x)\n\n# \u30b9\u30b3\u30a2\u306e\u8a08\u7b97\nMAE = mean_absolute_error(valid_data_y, gbm_pred)\nprint(\"MAE : \", MAE)\n\n# \u6bd4\u8f03\u7528\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\ncomparison_gbm_df = valid_data_y.copy()\ncomparison_gbm_df['pred'] = gbm_pred\n\nprint(\"\u5b9f\u7e3e\u3068\u4e88\u6e2c\u306e\u53ef\u8996\u5316\")\n# \u6bd4\u8f03\u7d50\u679c\u3092\u6563\u5e03\u56f3\u3067\u8868\u793a\ncomparison_gbm_df.plot.scatter(x=\"target\",y=\"pred\")\nplt.plot(np.arange(10),np.arange(10),color=\"r\")\nplt.xlim([5,10])\nplt.ylim([5,10])\nplt.show()\n\n# \u8aac\u660e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = train_data_x.columns\nfeature_importances['importance'] = gbm_model.feature_importances_\n\nprint(\"\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\")\n# \u91cd\u8981\u5ea6\u304c\u5927\u304d\u3044\u9806\u306b\u53ef\u8996\u5316\nplt.figure(figsize=(16, 16))\nsns.barplot(data=feature_importances.sort_values('importance', ascending=False).head(50),\n            x='importance',\n            y='feature');\nplt.title('50 TOP feature importance')\n\n# \u63d0\u51fa\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission = test_df.copy()\npred_test = gbm_model.predict(test_data_x)\n\n# \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsubmission['target'] = pred_test\nsubmission = submission[['ID', 'target']]","f2f0c036":"print(\"MAE : \", MAE)","b19c4a93":"submission.head()","931a456e":"submission.shape","8c5972ed":"# \u30d8\u30c3\u30c0\u4ed8\u304d\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\nsubmission.to_csv('baseline.csv', header=True, index=False)","e50d9b3b":"# \u4e88\u6e2c\u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d","ccde6ff4":"# \u95a2\u6570\u5b9a\u7fa9\n\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u306b\u4f7f\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u95a2\u6570\u5185\u306e\u52d5\u4f5c\u306f\u7406\u89e3\u3057\u306a\u304f\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002","10a1ce4e":"# \u6570\u5024\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u306e\u5909\u63db","65269301":"# \u52a0\u5de5\u3092\u7d42\u3048\u305ftrain\u3068test\u306e\u30c7\u30fc\u30bf\u3092\u5206\u96e2","8e4bd4a9":"# \u6a5f\u68b0\u5b66\u7fd2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n\u3053\u3053\u3067\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066LightGBM\u3092\u4f7f\u3044\u307e\u3059\u3002  \n\u30e2\u30c7\u30eb\u306b\u306f\u5b9f\u884c\u6642\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3044\u3066\u3001\u8868\u73fe\u529b\u3092\u3042\u3052\u305f\u308a\u904e\u5b66\u7fd2\u3092\u9632\u3050\u305f\u3081\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\n\u53c2\u8003\uff1aLightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066  \n\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9(\u82f1\u8a9e)  \nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/  \n\n\u89e3\u8aac\u8a18\u4e8b  \nhttps:\/\/qiita.com\/nabenabe0928\/items\/6b9772131ba89da00354","92e6d949":"# RMSE\u306e\u78ba\u8a8d\n\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4eca\u56de\u306e\u6307\u6a19\u3067\u3042\u308bRMSE\u306e\u691c\u8a3c\u7d50\u679c\u3067\u3059\u3002  \n\u3053\u306e\u5024\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308c\u3070\u30e2\u30c7\u30eb\u304c\u6539\u5584\u3057\u3066\u3044\u308b\u3068\u3044\u3048\u307e\u3059\u3002  ","20bcb7c2":"# \u5b66\u7fd2\u30fb\u691c\u8a3c  \n\u3053\u3053\u3067\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u3042\u308b2018\u5e74\u3092\u691c\u8a3c\u7528\u3068\u3057\u3066hold-out\u691c\u8a3c\u3092\u884c\u3044\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002  \n\u4ed6\u306b\u3082\u69d8\u3005\u306a\u691c\u8a3c\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002  \n\n\u53c2\u8003:  \nhttps:\/\/upura.hatenablog.com\/entry\/2018\/12\/04\/224436  \n\nLightGBM\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u30b0\u30e9\u30d5\u3068\u3057\u3066\u53ef\u8996\u5316\u3057\u3066\u3044\u307e\u3059\u3002  \nimportance\u306b\u3064\u3044\u3066\u6c17\u306b\u306a\u308b\u65b9\u306f\u3053\u3061\u3089  \nhttps:\/\/note.com\/y_katayama\/n\/n5882e9b2d15b  \n\n\u4eca\u56de\u306fgain\u3092importance\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002","e20dcb54":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306e\u5909\u63db\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3059\u308b\u969b\u306b\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\u4ee5\u4e0b\u3067\u306f\u30c7\u30fc\u30bf\u306e\u578b\u3092\u5224\u5225\u3057\u3001\u6570\u5024\u3067\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u3001\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u3044\u3046\u624b\u6cd5\u3067\u6570\u5024\u578b\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u53c2\u8003\uff1a\u4ed6\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u624b\u6cd5\u306b\u3064\u3044\u3066  \nhttps:\/\/qiita.com\/ground0state\/items\/f516b97c7a8641e474c4","5d705370":"# train\u3068test\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d","8d4393f3":"# train\u3068test\u306e\u7d50\u5408\ntrain\u3068test\u3067\u540c\u3058\u52a0\u5de5\u3092\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u3092\u7e26\u306b\u7d50\u5408\u3059\u308b","478b0f02":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\n(\u4e00\u90e8\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3082\u542b\u307f\u307e\u3059)","0336d0e4":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306einstall\n\u3053\u3053\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3067\u306fKaggle\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002  \nxfeat : PFN\u306e\u63d0\u4f9b\u3059\u308b\u7279\u5fb4\u91cf\u4f5c\u6210\u306e\u30d1\u30c3\u30b1\u30fc\u30b8  \nhttps:\/\/github.com\/pfnet-research\/xfeat\n\njapanize_matplotlib : matplotlib\u306e\u65e5\u672c\u8a9e\u30d1\u30c3\u30b1\u30fc\u30b8  \nhttps:\/\/pypi.org\/project\/japanize-matplotlib\/\n\nlightgbm\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u3068\u30d0\u30b0\u304c\u8d77\u3053\u308b\u4e8b\u304c\u3042\u308b\u305f\u3081","ff91b383":"# Starter\u306e\u30b3\u30fc\u30c9\u3067\u3059\n\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3067\u304d\u307e\u3059\u3002  \n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3088\u308a\u826f\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \n\n### \u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u3067\u304d\u308b\u3053\u3068\n- \u65b0\u305f\u306a\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n - \u4eca\u3042\u308b\u5217\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u308a\u52a0\u5de5\u3057\u3066\u3001\u65b0\u3057\u3044\u7279\u5fb4\u3092\u4f5c\u3063\u3066\u307f\u308b\n - \u5916\u90e8\u30c7\u30fc\u30bf\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u7279\u5fb4\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\n - \u30ab\u30c6\u30b4\u30ea\u578b\u306e\u5217\u306e\u53d6\u308a\u6271\u3044\u65b9\u6cd5\u3092\u5909\u3048\u3066\u307f\u308b\n- \u30c7\u30fc\u30bf\u30af\u30ec\u30f3\u30b8\u30f3\u30b0\n - \u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3057\u3066\u307f\u308b\n - \u7570\u5e38\u5024\u3092\u9664\u5916\u3057\u305f\u308a\u3001\u5909\u63db\u3057\u3066\u307f\u308b\n- \u30e2\u30c7\u30eb\u306e\u8abf\u6574\n - LightGBM\u4ee5\u5916\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u307f\u308b\n - LightGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\n- \u691c\u8a3c\u65b9\u6cd5\u3092\u5909\u3048\u3066\u307f\u308b\n - validation\u65b9\u6cd5\u3092\u5909\u3048\u3066\u307f\u308b\n","0c2a5993":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","7e9cd340":"### \u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u306f?\n\u30c7\u30fc\u30bf\u3092\u7a2e\u985e\u3054\u3068\u306b\u6570\u5024\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002  \n\u4f8b\u3048\u3070\u3001[\u6771\u4eac, \u795e\u5948\u5ddd, \u5317\u6d77\u9053, \u6771\u4eac] \u2192 [0, 1, 2, 0]\u306e\u3088\u3046\u306b,  \n\u6771\u4eac \u2192 0  \n\u795e\u5948\u5ddd \u2192 1  \n\u5317\u6d77\u9053 \u2192 2  \n\u306e\u3088\u3046\u306b\u540d\u79f0\u3068\u6570\u5024\u30921\u5bfe1\u306b\u5bfe\u5fdc\u3055\u305b\u307e\u3059\u3002","b071bfae":"# \u7279\u5fb4\u4f5c\u6210  \n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u306b\u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046"}}