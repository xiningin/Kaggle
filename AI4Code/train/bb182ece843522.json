{"cell_type":{"25338c84":"code","8223f754":"code","9f722850":"code","a733c7c6":"code","9c265fbf":"code","17c17440":"code","268ae77c":"code","9b6d0f06":"code","03853def":"code","c5fca50e":"code","8f02605b":"code","c7186dd2":"code","2790c70a":"code","6feb69ab":"code","a43f494a":"code","142ad6a3":"markdown","809533a9":"markdown","c51fe369":"markdown","1b131937":"markdown","46674fbc":"markdown","67bbbe5f":"markdown"},"source":{"25338c84":"## Import libraries","8223f754":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport matplotlib.dates as mdates\nfrom matplotlib import pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters","9f722850":"path = 'https:\/\/www.data.gouv.fr\/fr\/datasets\/r\/63352e38-d353-4b54-bfd1-f1b3ee1cabd7'\n\n# load covid19 dat\ndata = pd.read_csv(path, sep=';',parse_dates=True, dayfirst=True)\ndata['jour'] = pd.to_datetime(data.jour)\ndata['jour'] = data['jour'].dt.strftime('%Y-%m-%d')\n\nlatest_update=data.jour.max()\nprint('latest update: ' + str(latest_update))\n\n# load departments data\ndeps_path = 'https:\/\/www.data.gouv.fr\/en\/datasets\/r\/987227fb-dcb2-429e-96af-8979f97c9c84'\ndeps = pd.read_csv(deps_path)\n\nm= pd.merge(data, deps, how='inner', left_on='dep', right_on = 'num_dep' )\n\nm.head()","a733c7c6":"# ITALIAN DATA\nita_path = 'https:\/\/raw.githubusercontent.com\/pcm-dpc\/COVID-19\/master\/dati-andamento-nazionale\/dpc-covid19-ita-andamento-nazionale.csv'\n#ita_path = 'https:\/\/github.com\/pcm-dpc\/COVID-19\/blob\/master\/dati-andamento-nazionale\/dpc-covid19-ita-andamento-nazionale.csv'\nita_data = pd.read_csv(ita_path,parse_dates=True, dayfirst=True)\n#ita_data.data = pd.to_datetime(ita_data.data)\nita_data.index = pd.to_datetime(ita_data.data)\nita_data.head()","9c265fbf":"def pie_chart(values,labels,n_regions, title):\n    colors = ['red', 'green', 'blue', 'cyan', 'yellow', 'orange', 'pink', 'purple', 'navy']\n    fig_pie, ax_pie = plt.subplots()\n    size = 1\n    props_names = dict(boxstyle='round', facecolor='white', alpha=1)\n    compressed_values = np.append(values[:n_regions], np.sum(values[n_regions:]))\n    compressed_labes = np.append(np.array(labels[:n_regions]), 'Autres regions')\n\n    ax_pie.pie(compressed_values, \n               radius=1, \n               wedgeprops=dict(width=size, edgecolor='w'), \n               labels=compressed_labes, \n               colors=colors,\n               pctdistance=0.7,\n               autopct=lambda p : '{:.0f}'.format(p * sum(compressed_values)\/100)\n                              )\n\n    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\n    ax_pie.text(1.2, 0.8, 'Source : \\nwww.data.gouv.fr', fontsize=10,verticalalignment='top', bbox=props)   \n    plt.title(title, size=15)\n    plt.tight_layout()","17c17440":"# group by department\nregions_tot = m.groupby('dep').max().groupby('region_name').sum().sort_values(by='dc', ascending=False)\nprint(regions_tot.dc.sum())\npie_chart(regions_tot.dc, regions_tot.index, 7, 'COVID19 : D\u00e9ces par region [' + latest_update + ']' )","268ae77c":"\ndef plot_data(data, label, plot_diff=False):\n    fig1, ax1 = plt.subplots(figsize=(20,10))\n    ax1.set_title('COVID19 en ' + label)\n    if(plot_diff==True):\n        plt.plot(data.index, data.hosp_diff,color='b', linestyle='--', label='hosp_diff')\n        plt.plot(data.index, data.rea_diff,color='orange', linestyle='--', label='rea_diff')\n        plt.plot(data.index, data.dc_diff,color='r', linestyle='--',label='dc_diff')\n    else:\n        plt.plot(data.index, data.hosp,color='b', linestyle='-', label='hosp')\n        plt.plot(data.index, data.rea,color='orange', linestyle='-', label='rea')\n        plt.plot(data.index, data.dc,color='r', linestyle='-',label='dc')    \n    \n    plt.legend()\n    ax1.set_xticklabels(list(data.index),rotation=90)\n    axes = plt.gca()\n    axes.yaxis.grid()   \n    plt.show()\n    \ndef shift_data(data, min_shift, max_shift, col_names):\n    for c in col_names:\n        for d in np.arange(min_shift,max_shift):\n            data[c + '_sh_' + str(d)] = data[c].shift(d)        \n    return data\n\nfrom datetime import datetime\n\n# prep data to predict future dates\ndef add_dates_to_predict(data, predicted_days):\n    print(data)\n\n    mindate = min(data.index)\n    maxdate = max(data.index)\n    ixs = pd.date_range(start=mindate,end=maxdate+pd.DateOffset(predicted_days))\n    data = data.reindex(ixs)\n    return data","9b6d0f06":"# aggregated on the country\nfrance_data = m[(m.sexe == 0)].groupby('jour').sum().sort_values(by='jour')\nfrance_data.index = pd.to_datetime(france_data.index)\n\n\n# add diff columns to have daily \nfrance_data['dc_diff'] = france_data.dc.diff()\nfrance_data['hosp_diff'] = france_data.hosp.diff()\nfrance_data['rea_diff'] = france_data.rea.diff()","03853def":"fig, ax = plt.subplots(figsize=(20,10))\nplt.plot(france_data.index, france_data['hosp_diff'], color='r', label = 'Hospitalisations diff') # prediction on train\nplt.plot(france_data.index, france_data['rea_diff'], color='b', label = 'IC diff ') # prediction on train\nplt.grid(color='black', linestyle='-', linewidth=0.5)\nplt.legend(fontsize=15)\nplt.title('COVID19 Hospitalisation [France]')\n# prediction on test\nplt.xticks(rotation=90)","c5fca50e":"fig, ax = plt.subplots(figsize=(20,10))\nplt.plot(france_data.index, france_data['hosp'], color='b', linestyle='--', label = 'FRA Hospitalisations') # \nplt.plot(ita_data.index, ita_data.ricoverati_con_sintomi, color='b', label = 'ITA Hospitalisations') # \nplt.plot(france_data.index, france_data['rea'], color='r', linestyle='--', label = 'FRA Intensive Care') # \nplt.plot(ita_data.index, ita_data.terapia_intensiva, color='r', label = 'ITA Intensive Care') # \nplt.grid(color='black', linestyle='-', linewidth=0.5)\nplt.legend(fontsize = 20)\nplt.title('COVID19 Hospital data [France, Italy]')\n# prediction on test\nplt.xticks(rotation=90)","8f02605b":"from matplotlib.ticker import PercentFormatter\n\nfig, ax = plt.subplots(figsize=(20,10))\nplt.plot(france_data.index, 100 * france_data['rea'] \/ (france_data['hosp'] + france_data['rea']), color='b', label = 'FRA') # \nplt.plot(ita_data.index, 100 * ita_data.terapia_intensiva \/ ita_data.totale_ospedalizzati, color='r', label = 'ITA') # \nplt.grid(color='black', linestyle='-', linewidth=0.5)\nplt.legend(fontsize = 20)\nplt.title('[Covid19] Intensive care vs Hospitalisations ratio', fontsize = 30)\nax.yaxis.set_major_formatter(PercentFormatter())\n# prediction on test\nplt.xticks(rotation=90)\n\n# place a text box in upper left in axes coords\nprops = dict(boxstyle='round', facecolor='wheat', alpha=0.5)\nax.text(0.8, 0.75, 'FRA source: data.gouv.fr  \\nITA source:  Protezione Civile', transform=ax.transAxes, fontsize=14,\n        verticalalignment='top', bbox=props)\n\n\n","c7186dd2":"# simple Random Forest model to predict future deaths\ndef rf_predict_series(train_feature_set, train_targets_set, test_feature_set):\n\n    from sklearn.ensemble import RandomForestRegressor\n    random_forest = RandomForestRegressor(n_estimators=10000,\n    max_depth=4,\n    max_features=10,\n    random_state=42)\n\n    random_forest.fit(train_feature_set.fillna(0),train_targets_set.fillna(0)) \n    train_preds = random_forest.predict(train_feature_set.fillna(0))\n    test_preds = random_forest.predict(test_feature_set.fillna(0))\n    \n    feats = {} # a dict to hold feature_name: feature_importance\n    for feature, importance in zip(train_feature_set.columns, random_forest.feature_importances_):\n        feats[feature] = importance #add the name\/value pair \n\n    importances = pd.DataFrame.from_dict(feats, orient='index').rename(columns={0: 'Gini-importance'})\n    importances.sort_values(by='Gini-importance').plot(kind='bar', rot=90)\n\n    \n    return test_preds, train_preds\n  ","2790c70a":"## MODEL VALIDATION with French data\n\n# prep data\ndays_to_predict = 7 # how many days do we want to predict?\naug_france_data_sim = add_dates_to_predict(france_data[:-days_to_predict], days_to_predict)\n\n#add lagged columns\nhistory_length = 15 # how long we want to look back\nshifted_sim = shift_data(aug_france_data_sim,days_to_predict, history_length,('hosp_diff', 'rea_diff','dc_diff'))\n\n# remove first days_to_predict rows\nshifted_sim = shifted_sim[history_length:]\n\n# define feature series (including rows for the future)\nfeature_series_sim = shifted_sim.drop(non_feature_columns, axis=1)\n\ntrain_ft_set_sim = feature_series_sim[:-days_to_predict]\ntargets_series_sim = shifted_sim[target_label]\ntrain_tg_set_sim = targets_series_sim[:-days_to_predict]\ntest_ft_set_sim = feature_series_sim[-days_to_predict:]        \n    \ntest_preds, train_preds = rf_predict_series(train_ft_set_sim, train_tg_set_sim, test_ft_set_sim)\n\nfig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"France COVID19 deaths prediction based on hospitalization, IC and death data [update: \" + str(latest_update) + \"]\",fontsize=20)\nplt.plot(train_tg_set_sim.index, train_preds, color='r', label = 'Train model predictions') # prediction on train\nplt.plot(test_ft_set_sim.index, test_preds, color = 'r', linestyle='--', label ='Model predictions over ' + str(days_to_predict) + ' days')\nplt.plot(france_data.index, france_data['dc_diff'], 'b', linestyle='-', label ='Ground truth')\nplt.legend(fontsize=15)\nplt.grid(color='black', linestyle='-', linewidth=0.5)\n# prediction on test\nplt.xticks(rotation=90)\n","6feb69ab":"# prep data\ntarget_label = 'dc_diff'\nnon_feature_columns = ['sexe','hosp','rea','rad','dc', 'dc_diff', 'hosp_diff','rea_diff']\n\n# add dates to predict\ndays_to_predict = 7 # how many days do we want to predict?\naug_france_data = add_dates_to_predict(france_data, days_to_predict)\n\n#add lagged columns\nhistory_length = 15 # how long we want to look back\nshifted = shift_data(aug_france_data,days_to_predict, history_length,('hosp_diff', 'rea_diff','dc_diff'))\n\n# remove first days_to_predict rows\nshifted = shifted[history_length:]\n\n# define feature series (including rows for the future)\nfeature_series = shifted.drop(non_feature_columns, axis=1)\n\ntrain_ft_set = feature_series[:-days_to_predict]\ntargets_series = shifted[target_label]\ntrain_tg_set = targets_series[:-days_to_predict]\ntest_ft_set = feature_series[-days_to_predict:]        \n    \ntest_preds, train_preds = rf_predict_series(train_ft_set, train_tg_set, test_ft_set)\n\nfig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"France COVID19 deaths prediction based on hospitalization, IC and death data [update: \" + str(latest_update) + \"]\",fontsize=20)\n#plt.plot(train_tg_set.index, train_tg_set, color='b', label ='Deaths: train ground truth') # ground truth on train\nplt.plot(train_tg_set.index, train_preds, color='r', label = 'Train model predictions') # prediction on train\nplt.plot(test_ft_set.index, test_preds, color = 'r', linestyle='--', label ='Model predictions over ' + str(days_to_predict) + ' days')\nplt.plot(france_data.index, france_data['dc_diff'], 'b', linestyle='-', label ='Ground truth')\nplt.legend(fontsize=15)\nplt.grid(color='black', linestyle='-', linewidth=0.5)\n# prediction on test\nplt.xticks(rotation=90)\n","a43f494a":"\nita_data['deceduti_diff'] = ita_data.deceduti.diff()\n\nfig, ax = plt.subplots(figsize=(20,10))\nplt.title(\"Italy COVID19 deaths prediction based on hospitalization, IC and death data [update: \" + str(latest_update) + \"]\",fontsize=20)\nplt.plot(ita_data.index, ita_data['deceduti_diff'], 'b', linestyle='-', label ='Ground truth')\nplt.legend(fontsize=15)\nplt.grid(color='black', linestyle='-', linewidth=0.5)\n# prediction on test\nplt.xticks(rotation=90)","142ad6a3":"### Some handy functions to plot\/manipulate the data","809533a9":"## Further enhacements\n- Useful information about departments' population is available online: https:\/\/www.insee.fr\/fr\/statistiques\/1893198 . It would be interesting to explore the correlation of population density and the load on the Health system measured in terms of hospitalization, IC admissions and deaths.\n- Long short-term memory models could be applied to enhance the deaths forecast\n- the RF model only takes into account hospitalization data assuming an unlimited capacity of the health system. It would be interesting to further explore this topic by modelling hospitals' saturation.","c51fe369":"### Explore data by department","1b131937":"## Load COVID19 hospitalization data\n\nThe main data set used in this notebook is made available by the French Government at the following website: # source: https:\/\/www.data.gouv.fr\/fr\/datasets\/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19\/\n\n- dep: Department (e.g. 75 for Paris, 92 for Haut de Seine)\n- sexe: [0,1,2] (0=female & male, 1=female, 2=male)\n- jour: day\n- hosp: number of total hospitalizations\n- rea: number of total patients in intensive case \n- dc: number of total deaths","46674fbc":"## Motivation\nThis short notebook is the result of a first attempt to figure out the current COVID19 situation in France. Since the testing strategy has evolved several times since March 2020, the number of currently positive individuals is not actually comparable with the data of the past six months. \n\nIt is here assumed that hospitalization data are more reliable and depict in a more precise way the current status of the virus spread and the strenght of the disease. \n\nThe main dataset used in this project is maintained by the French Health Ministry and is publicly available online.","67bbbe5f":"### Aggregate on the whole country"}}