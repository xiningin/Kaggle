{"cell_type":{"4cee56df":"code","5b4b4128":"code","f4fb7856":"code","8be21335":"code","42871ee1":"code","df0d289e":"code","8e0c8ca0":"code","a3f57666":"code","ff087c3c":"code","787f7d76":"code","32965eb0":"code","4866a158":"code","6ee87674":"code","70b1ae73":"code","36271065":"code","8343d776":"code","66a7ad24":"code","6afe05a4":"code","feaa424a":"code","910dad17":"code","28e8adc8":"code","4b3c69f2":"code","3f445e58":"code","345c4e5b":"code","2735d214":"code","bdd761d3":"code","71d53d07":"code","5813df52":"code","5533c73b":"markdown","c5571c18":"markdown","b2995685":"markdown","fc975fa2":"markdown","e49ccf0f":"markdown","7ce584ae":"markdown","d00a31d6":"markdown","23dff8d0":"markdown","8a7ef319":"markdown","7679ecb6":"markdown","0c7415f8":"markdown","e538b281":"markdown","b543640e":"markdown"},"source":{"4cee56df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b4b4128":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom pandas_profiling import ProfileReport\nfrom statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","f4fb7856":"dataset_all = pd.read_csv('\/kaggle\/input\/top-50-cryptocurrency-historical-prices\/All_combined.csv')\ndataset_all.head()","8be21335":"dataset_all['Year'] = pd.DatetimeIndex(dataset_all['Date']).year\ndataset_all.head()","42871ee1":"temp = dataset_all.groupby(['Currency_Name', 'Year'])['Price'].mean()\ntemp = temp.reset_index()\ncryptos = temp['Currency_Name'].unique()\nfor crypto in cryptos:\n    data = temp[['Price','Year']][temp['Currency_Name'] == crypto]\n    fig = px.line(data, x = 'Year', y = 'Price', title = f\"{crypto}'s Price\",\n                 labels = {'Price': 'Price'})\n    fig.show()","df0d289e":"data_top = dataset_all[dataset_all['Currency_Name'].isin(['Bitcoin', 'Ethereum', 'Tether', 'Solana', 'Binance_Coin'])]\nx = data_top.groupby(['Currency_Name', 'Year'])['High'].mean()\nx = x.reset_index()\n\npx.scatter(x, x = \"Year\", y = \"High\", animation_frame = \"Year\", animation_group = \"Currency_Name\",\n           size = \"High\", color = \"Currency_Name\", hover_name = \"Currency_Name\", size_max = 100, \n           range_x = [2010, 2021], range_y = [0, 50000])","8e0c8ca0":"dataset = pd.read_csv('\/kaggle\/input\/top-50-cryptocurrency-historical-prices\/Bitcoin.csv')\ndataset.head()","a3f57666":"dataset.describe(include = 'all')","ff087c3c":"dataset.info()","787f7d76":"dataset.isnull().sum()","32965eb0":"profile = ProfileReport(dataset, title = \"Pandas Profiling Report\")\nprofile.to_notebook_iframe()","4866a158":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['High'], line = dict(color='green', width = 4)))\nfig.update_layout(title = 'Average High of Bitcoin over a span of 10+ years',\n                   xaxis_title = 'Month',\n                   yaxis_title = 'Price in $')\nfig.show()","6ee87674":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['Low'], line = dict(color='firebrick', width = 4)))\nfig.update_layout(title = 'Average Low of Bitcoin over a span of 10+ years',\n                   xaxis_title = 'Month',\n                   yaxis_title = 'Price in $')\nfig.show()","70b1ae73":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['Vol.'], line = dict(color='royalblue', width = 4)))\nfig.update_layout(title = 'Average Volume of Bitcoin over a span of 10+ years (in Trillions)',\n                   xaxis_title = 'Month',\n                   yaxis_title = 'Volume (in millions)')\nfig.show()","36271065":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['High'], name = 'High',\n                         line = dict(color='green', width = 2)))\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['Low'], name = 'Low',\n                         line = dict(color='firebrick', width = 2)))\nfig.add_trace(go.Scatter(x = dataset['Date'], y = dataset['Open'], name = 'Open',\n                         line = dict(color='royalblue', width = 3, dash = 'dot')))\nfig.update_layout(title = 'Average High vs. Low of Bitcoin over a span of 10+ years',\n                   xaxis_title = 'Month',\n                   yaxis_title = 'Price in $')\nfig.show()","8343d776":"dataset = pd.read_csv('\/kaggle\/input\/top-50-cryptocurrency-historical-prices\/Bitcoin.csv')\ndataset.head()","66a7ad24":"final = adfuller(dataset.High.dropna())\nprint('ADF Statistic: %f' % final[0])\nprint('p-value: %f' % final[1])","6afe05a4":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(dataset.High); axes[0, 0].set_title('Original Series')\nplot_acf(dataset.High, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(dataset.High.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(dataset.High.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(dataset.High.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(dataset.High.diff().diff().dropna(), ax=axes[2, 1])\n\nplt.show()","feaa424a":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(dataset.High.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(dataset.High.diff().dropna(), ax=axes[1])\n\nplt.show()","910dad17":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(dataset.High.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(dataset.High.diff().dropna(), ax=axes[1])\n\nplt.show()","28e8adc8":"from statsmodels.tsa.arima_model import ARIMA\n\n# 1,1,2 ARIMA Model\nmodel = ARIMA(dataset.High, order=(1,1,2))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","4b3c69f2":"# 1,1,1 ARIMA Model\nmodel = ARIMA(dataset.High, order=(1,1,1))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","3f445e58":"# Plot residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","345c4e5b":"# Actual vs Fitted\nmodel_fit.plot_predict(dynamic=False)\nplt.show()","2735d214":"data = dataset[[\"Date\",\"High\"]]\ndata['Date'] = pd.to_datetime(data['Date'])\ndata = data.rename(columns = {\"Date\":\"ds\",\"High\":\"y\"})\ndata.head()","bdd761d3":"from fbprophet import Prophet\nm = Prophet(daily_seasonality = True) # the Prophet class (model)\nm.fit(data) # fit the model using all data","71d53d07":"future = m.make_future_dataframe(periods = 365) #we need to specify the number of days in future\nprediction = m.predict(future)\nm.plot(prediction)\nplt.title(\"Prediction of the Bitcoin Price using the Prophet\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"High Stock Price\")\nplt.show()","5813df52":"m.plot_components(prediction)\nplt.show()","5533c73b":"## What is Cryptocurrency?\n\nA cryptocurrency (or \u201ccrypto\u201d) is a form of payment that can circulate without the need for a central monetary authority such as a government or bank. Instead, cryptocurrencies are created using cryptographic techniques that enable people to buy, sell or trade them securely.","c5571c18":"## Applying FBProphet","b2995685":"## Importing the Libraries","fc975fa2":"## Exploratory Data Analysis","e49ccf0f":"## Pandas Profiling","7ce584ae":"## Bitcoin Predictive Analysis\n\n![image.png](attachment:0fc17441-9daf-445e-8774-e35a92301155.png)\n\n\n### What is Bitcoin?\nBitcoin is a decentralized digital currency, without a central bank or single administrator, that can be sent from user to user on the peer-to-peer bitcoin network without the need for intermediaries.","d00a31d6":"## Applying the ARIMA (Autoregressive integrated moving average) Model","23dff8d0":"## Basic Data Wrangling","8a7ef319":"## Importing the Dataset (Combined)","7679ecb6":"## Importing the Dataset","0c7415f8":"### Context\nThe dataset contains all historical daily prices (open, high, low, close) for the top 50 Cryptocurrency\n\n### Content\nThe dataset has 50 different CSV files for each of the top 50 cryptocurrencies. Price history is available on a daily basis from the launch of that respective cryptocurrency. The dataset also contains an ALL_COMBINED CSV file, which contains the combined data for all the TOP50 cryptocurrencies in one CSV file.\nAttribute Information:\n\nSNo: Serial Number \nDate: Date of observation\nPrice: Price on the given day (Also the closing price for that day)\nOpen: Opening price on the given day\nHigh: Highest price on the given day\nLow: Lowest price on the given day\nVolume: Volume of transactions on the given day\nChange%: Percentage Change from the previous day","e538b281":"## Thank You.","b543640e":"## Exploratory Data Analysis on the Combined Dataset"}}