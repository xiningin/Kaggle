{"cell_type":{"029b9a3a":"code","c732666b":"code","56741d34":"code","90cc83fb":"code","c3e5eaa1":"code","c90bfee7":"code","295c8a35":"code","04acb509":"code","19ae5020":"code","fc8a6326":"code","47eeaaee":"code","21d40699":"code","1af8341f":"code","9957be68":"code","d5f468f0":"code","f91a402e":"code","a19b2e66":"code","545c8264":"code","19ef843c":"code","aa951f05":"code","4e43f06a":"code","1b1ca9a8":"markdown","8220a465":"markdown","f75d70e4":"markdown","4a7047df":"markdown","19210971":"markdown","b3b82036":"markdown","2012355b":"markdown","26d7d3eb":"markdown","e5b7dedc":"markdown","a3b63b9b":"markdown","8bc9c771":"markdown","1ec6fa9a":"markdown","4db05f80":"markdown","14212d79":"markdown","edd31907":"markdown","8d8be614":"markdown","5168f169":"markdown"},"source":{"029b9a3a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport pandas as pd\nimport numpy as np\n\nimport datetime\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nimport warnings\nwarnings.filterwarnings('ignore')","c732666b":"gold = pd.read_csv('..\/input\/learn-time-series-forecasting-from-gold-price\/gold_price_data.csv')\ngold['Date'] = pd.to_datetime(gold['Date'], errors='coerce')\ngold","56741d34":"gold.info()","90cc83fb":"plt.figure(figsize = (18,8))\nsns.lineplot(data=gold, x=\"Date\", y=\"Value\")\nplt.title('Gold Price')\nplt.show()","c3e5eaa1":"gold_eda = gold.copy()\ngold_eda.set_index('Date', inplace=True)","c90bfee7":"plt.rcParams.update({'figure.figsize':(18,8), 'figure.dpi':75})\nresult = seasonal_decompose(gold_eda, model='additive', period=120)\nresult.plot()\nplt.show()","295c8a35":"X_train = gold[:8090]\nX_test = gold[8090:]\n\nprint(\"X_train Shape\", X_train.shape)\nprint(\"X_test Shape\", X_test.shape)","04acb509":"X_train = X_train[['Date', 'Value']]\nX_test = X_test[['Date', 'Value']]\n\nX_train.set_index('Date', inplace=True)\nX_test.set_index('Date', inplace=True)","19ae5020":"index_9_months = pd.date_range(X_test.index[-1], freq='MS', periods=9)\nindex_9_months","fc8a6326":"def define_d(data):\n    X_train = adfuller(data, autolag='AIC')\n    adf = X_train[0]\n    pvalue = X_train[1]\n    critical_value = X_train[4]['5%']\n    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations', 'Critical Value']\n    for value,label in zip(X_train,labels):\n        print(label+' : '+str(value) )\n\n    if (pvalue < 0.05):\n        print(\"** Data Is Stationary **\")\n    else:\n        print(\"** Indicating It Is Non-Stationary **\")\n\ndefine_d(X_train)","47eeaaee":"data_diff = X_train.diff()\ndata_diff.dropna(inplace=True)\ndefine_d(data_diff)","21d40699":"plt.rcParams.update({'figure.figsize':(18,8), 'figure.dpi':75})\n\n# Original Series\nfig, axes = plt.subplots(2, 3)\naxes[0, 0].plot(X_train); axes[0, 0].set_title('Original Series')\nplot_pacf(X_train, ax=axes[0, 1])\nplot_acf(X_train, ax=axes[0, 2])\n\n# 1st Differencing\naxes[1, 0].plot(X_train.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_pacf(X_train.diff().dropna(), ax=axes[1, 1])\nplot_acf(X_train.diff().dropna(), ax=axes[1, 2])\n\nplt.show()","1af8341f":"plt.rcParams.update({'figure.figsize':(18,3), 'figure.dpi':75})\nfig, ax = plt.subplots(1, 2)\nplot_pacf(X_train.diff().dropna(), lags = 15, ax=ax[0])\nplot_acf(X_train.diff().dropna(), lags = 15, ax=ax[1])\nplt.show()","9957be68":"gold_validate = gold['Value'][8090:]","d5f468f0":"model_gold = ARIMA(X_train, order = (0, 1, 0))\ngold_010 = model_gold.fit(disp=0)\nprint(gold_010.summary())\n\nfc, se, conf = gold_010.forecast(2697, alpha=0.05)\n\ndef forecast_accuracy(forecast, actual):\n    mape = (np.mean(np.abs(forecast - actual)\/np.abs(actual))*100).round(2)\n    rmse = np.sqrt(((forecast - actual) ** 2).mean())\n    return({'Mean Absolute Percentage Error (%)':mape, \n            'Root Mean Squared Error':rmse})\n\nforecast_accuracy(fc, gold_validate.values)","f91a402e":"model_gold = ARIMA(X_train, order = (1, 1, 1))\ngold_111 = model_gold.fit(disp=0)\nprint(gold_111.summary())\n\nfc, se, conf = gold_111.forecast(2697, alpha=0.05)\n\ndef forecast_accuracy(forecast, actual):\n    mape = (np.mean(np.abs(forecast - actual)\/np.abs(actual))*100).round(2)\n    rmse = np.sqrt(((forecast - actual) ** 2).mean())\n    return({'Mean Absolute Percentage Error (%)':mape, \n            'Root Mean Squared Error':rmse})\n\nforecast_accuracy(fc, gold_validate.values)","a19b2e66":"model_gold = ARIMA(X_train, order = (1, 1, 0))\ngold_110 = model_gold.fit(disp=0)\nprint(gold_110.summary())\n\nfc, se, conf = gold_110.forecast(2697, alpha=0.05)\n\ndef forecast_accuracy(forecast, actual):\n    mape = (np.mean(np.abs(forecast - actual)\/np.abs(actual))*100).round(2)\n    rmse = np.sqrt(((forecast - actual) ** 2).mean())\n    return({'Mean Absolute Percentage Error (%)':mape, \n            'Root Mean Squared Error':rmse})\n\nforecast_accuracy(fc, gold_validate.values)","545c8264":"model_gold = ARIMA(X_train, order = (0, 1, 1))\ngold_011 = model_gold.fit(disp=0)\nprint(gold_011.summary())\n\nfc, se, conf = gold_011.forecast(2697, alpha=0.05)\n\ndef forecast_accuracy(forecast, actual):\n    mape = (np.mean(np.abs(forecast - actual)\/np.abs(actual))*100).round(2)\n    rmse = np.sqrt(((forecast - actual) ** 2).mean())\n    return({'Mean Absolute Percentage Error (%)':mape, \n            'Root Mean Squared Error':rmse})\n\nforecast_accuracy(fc, gold_validate.values)","19ef843c":"plt.rcParams.update({'figure.figsize':(18,6), 'figure.dpi':75})\nfig, ax = plt.subplots(1, 2)\nresiduals = pd.DataFrame(gold_011.resid)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()\n\ngold_011.plot_predict(dynamic=False)\nplt.title('Comparison Forecast Test', fontsize = 12)\nplt.show()","aa951f05":"gold_forecast = gold_011.forecast(9)[0]\ngold_forecast = pd.Series(gold_forecast, index=index_9_months)\ngold_forecast = gold_forecast.rename(\"Prediction\")\n\nfig, ax = plt.subplots(figsize = (18, 9))\nsns.lineplot(x = 'Date', y='Value', data=gold, color = 'blue', marker = '^')\ngold_forecast.plot(ax = ax, c = 'red', marker = 'x', label = 'Prediction')\nX_test.plot(ax = ax, c = 'blue', marker = '^')\nplt.title('Gold Price')\nax.axvline(x = 18370, ls = ':', linewidth = 3, c = 'green', label = 'Border')\nplt.legend(loc = 0, fontsize = 15)\nplt.show()","4e43f06a":"gold_fcast = gold_forecast.to_frame()\ngold_fcast.rename_axis(\"Date\", inplace=True)\ngold_fcast.reset_index(inplace=True)\ngold_fcast","1b1ca9a8":"#### Model 4","8220a465":"#### Model 2","f75d70e4":"### See Time Series Components (Level, Trend, Seasonality)","4a7047df":"### Forecasting","19210971":"    Based on PACF and ACF, I define p = 0 and q = 0","b3b82036":"### Data Splitting\n- I decide to split data into 75:25","2012355b":"The model looks good based on the 3 plots that shown. It means I can continue to do the forecast.","26d7d3eb":"### Build Model","e5b7dedc":"#### Model 3","a3b63b9b":"### Define p and q using PACF and ACF plot","8bc9c771":"The forecasting result is shown above for 9 months ahead.  Hope it's useful. Thank you.","1ec6fa9a":"### Forecasting For Nine Months Ahead","4db05f80":"    I define d = 1","14212d79":"### Define Residual and Comparison Forecast Test","edd31907":"#### Model 1","8d8be614":"### Define d Using ADF Test\n- pvalue = 0.05","5168f169":"    I decide to use Model 4 based on low MAPE score and low AIC score."}}