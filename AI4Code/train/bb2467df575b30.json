{"cell_type":{"a2ba7290":"code","4e715181":"code","7af07483":"code","287a7617":"code","6d85757c":"code","2bdddbd2":"code","cf0090f6":"code","111cdab6":"code","37e86c7e":"code","6338c921":"code","c9919eb1":"code","31517eed":"code","fe7babbd":"code","8e2b0246":"code","550a73b4":"code","ac24d70d":"code","bcbcf6e5":"code","a504b499":"code","92da0ac0":"code","70e884d3":"code","480b1a86":"code","e55cb208":"code","17d347e8":"code","850d70ff":"code","926ef00c":"code","b138b2fe":"code","dd2ef5ba":"code","03b32cca":"code","b3854292":"code","d4bf2181":"code","74efc1ce":"code","2b86c555":"code","099428a4":"code","ded663a6":"code","fcbca129":"code","9259cd96":"code","eef063dd":"code","8823d19e":"code","2447f47a":"code","abc3ddc0":"code","df8f0925":"code","ea695984":"code","7fb339e3":"code","58237917":"code","46ac9e05":"code","1ce7905f":"code","53d2b16a":"code","98654c21":"code","50084189":"code","0a187d77":"code","ff165e2c":"code","10f73f88":"code","a47f8a48":"code","1e362efe":"markdown","197ea711":"markdown","a21ee5ef":"markdown","5f30f681":"markdown","790f82e8":"markdown","6a0a8ebd":"markdown","12fe0c96":"markdown","26eaf6db":"markdown","cc46bbf6":"markdown","427b8dad":"markdown"},"source":{"a2ba7290":"from IPython.display import YouTubeVideo\nYouTubeVideo('I1NYjqKb_Co')\n","4e715181":"import os\n\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(123)\n\nfrom gensim.utils import simple_preprocess\nfrom gensim.models import Word2Vec, LdaMulticore\nfrom gensim.models.phrases import Phrases, Phraser\n\nfrom gensim.corpora import Dictionary\n\nfrom ast import literal_eval\n\nimport pyLDAvis\nfrom pyLDAvis import gensim","7af07483":"from PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt","287a7617":"dir_koledy = os.path.join('\/\/kaggle\/\/input\/\/polish-christmas-carols', 'koledy.csv')","6d85757c":"df_koledy = pd.read_csv(dir_koledy)","2bdddbd2":"df_koledy.shape","cf0090f6":"df_koledy.head()","111cdab6":"df_koledy.tail()","37e86c7e":"corpus_titles = df_koledy['Title'].map(simple_preprocess)","6338c921":"model_titles = Word2Vec(corpus_titles, size=100, window=2, min_count=1)","c9919eb1":"model_titles.wv.most_similar('dzieci\u0119')","31517eed":"model_titles.wv.most_similar('mi\u0142o\u015b\u0107')","fe7babbd":"from stop_words import get_stop_words\n\nstop_words = get_stop_words('polish')\n\nstop_words.append('czyli')\nstop_words.append('li')\nstop_words.append('za')","8e2b0246":"print(stop_words)","550a73b4":"corpus_lyrics_with_stpwrds = df_koledy['Lyrics'].map(simple_preprocess)","ac24d70d":"corpus_lyrics = []\nfor song in corpus_lyrics_with_stpwrds:\n    for word in song: \n        if word not in stop_words:\n            corpus_lyrics.append(word)\n\ncorpus_lyrics = pd.Series(corpus_lyrics).map(simple_preprocess)","bcbcf6e5":"print(corpus_lyrics)","a504b499":"print(corpus_lyrics_with_stpwrds)","92da0ac0":"model_lyrics = Word2Vec(corpus_lyrics, size=150, window=2, min_count=1)","70e884d3":"model_lyrics.wv.most_similar('dzieci\u0119')","480b1a86":"model_lyrics.wv.most_similar('\u015bwiat')","e55cb208":"sentences_light_titles = np.random.permutation(corpus_titles)","17d347e8":"dictionary_titles = Dictionary(sentences_light_titles)","850d70ff":"bow_corpus_titles = [dictionary_titles.doc2bow(sent) for sent in sentences_light_titles]","926ef00c":"lda_model_titles = LdaMulticore(bow_corpus_titles, id2word=dictionary_titles, num_topics=20, passes=20, workers=8)","b138b2fe":"lda_vis_titles = pyLDAvis.gensim.prepare(lda_model_titles, bow_corpus_titles, dictionary_titles, mds='mmds') #I added `mds='mmds'` since I got error: TypeError: Object of type 'complex' is not JSON serializable\npyLDAvis.display(lda_vis_titles)","dd2ef5ba":"sentences_light_l = np.random.permutation(corpus_lyrics)\nsentences_light_l = sentences_light_l[:10000]","03b32cca":"dictionary_l = Dictionary(sentences_light_l)","b3854292":"bow_corpus_l = [dictionary_l.doc2bow(sent) for sent in sentences_light_l]","d4bf2181":"lda_model_l = LdaMulticore(bow_corpus_l, id2word=dictionary_l, num_topics=30, passes=30, workers=8)","74efc1ce":"lda_vis_l = pyLDAvis.gensim.prepare(lda_model_l, bow_corpus_l, dictionary_l, mds='mmds') #I added `mds='mmds'` since I got error: TypeError: Object of type 'complex' is not JSON serializable","2b86c555":"pyLDAvis.display(lda_vis_l)","099428a4":"titles_str = pd.Series.to_string(corpus_titles)","ded663a6":"wordcloud_titles = WordCloud(max_font_size=75, max_words=100, background_color=\"white\").generate(titles_str)\n\n# Display the generated image:\nplt.imshow(wordcloud_titles, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","fcbca129":"lyrics_str = pd.Series.to_string(corpus_lyrics)\n\nwordcloud_lyrics = WordCloud(max_font_size=75, max_words=100, background_color=\"white\").generate(lyrics_str)\n\n# Display the generated image:\nplt.imshow(wordcloud_lyrics, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","9259cd96":"wordcloud_lyrics_carol = WordCloud(max_font_size=75, max_words=100, background_color=\"white\").generate(df_koledy.iloc[5]['Title'])\n\n# Display the generated image:\nplt.imshow(wordcloud_lyrics_carol, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","eef063dd":"def create_wordclouds(df, column):\n    wordcloud_list = []\n    for idx in range(len(df)):\n        try:\n            wordcloud_list.append(WordCloud(max_font_size=75, max_words=100, background_color=\"white\").generate(df.iloc[idx][column]))\n        except:\n            wordcloud_list.append('0')\n    \n    return wordcloud_list","8823d19e":"wordcloud_list_0 = create_wordclouds(df_koledy, 0)","2447f47a":"plt.imshow(wordcloud_list_0[12], interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","abc3ddc0":"wordcloud_list_1 = create_wordclouds(df_koledy, 1)","df8f0925":"plt.imshow(wordcloud_list_1[12], interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ea695984":"# os.mkdir('\/\/kaggle\/\/working\/\/imgs')","7fb339e3":"# dir_working = '\/\/kaggle\/\/working\/\/imgs'\n\n# for i in range(len(wordcloud_list_1)):\n#     fig = plt.figure(figsize=(25, 50))\n#     plt.imshow(wordcloud_list_1[i], interpolation='bilinear')\n#     plt.axis(\"off\")\n#     plt.savefig('carol_{}.png'.format(i))","58237917":"# def createImageGrid(path_images): \n    \n#     all_item_dirs = os.listdir(path_images)\n#     item_files = [os.path.join(path_images, file) for file in all_item_dirs][:180]\n\n#     m, n = 60, 3 \n\n#     width = 64\n#     height = 256\n\n#     # create output image \n#     grid_img = Image.new('RGB', (n*width, m*height)) \n\n#     # paste images \n#     for idx, img_path in enumerate(item_files): \n#         try:\n#             row = int(idx\/n) \n#             col = idx - n*row \n#             img = Image.open(img_path)\n#             grid_img.paste(img, (col*width, row*height)) \n#         except:\n#             continue\n\n#     return grid_img ","46ac9e05":"# %time model1 = Word2Vec(final_corp, size=175, window=4 ,min_count=3, iter=25)","1ce7905f":"# plt.figure(figsize=(200,100))\n# grid = createImageGrid(dir_working)\n# plt.imshow(grid);","53d2b16a":"from sklearn.decomposition import PCA\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","98654c21":"# def plot_heatmap(model):\n#     plt.figure(figsize=(15, 8))\n#     sns.heatmap(model.wv[model.wv.vocab], linewidths=0.5)","50084189":"# plot_heatmap(model_lyrics)","0a187d77":"def plot_pca(model):\n    X = model.wv[model.wv.vocab]\n    pca_model = PCA(n_components=5)\n    result = pca_model.fit_transform(X)\n\n    plt.figure(figsize=(15, 15))\n    plt.scatter(result[:, 0], result[:, 1])\n\n    words = list(model.wv.vocab)\n    for i, word in enumerate(words):\n        plt.annotate(word, xy=(result[i, 0], result[i, 1]))","ff165e2c":"plot_pca(model_titles)","10f73f88":"plot_pca(model_lyrics)","a47f8a48":"import shutil\nshutil.rmtree(output)","1e362efe":"# Word cloud grid for every title and every lyrics","197ea711":"After titles now is the time for lyrics. We have to get rid o stop words.","a21ee5ef":"# Initial analysis","5f30f681":"# Word cloud\n\nNow we can try and generate a word cloud.\n\nI used this article: https:\/\/www.datacamp.com\/community\/tutorials\/wordcloud-python","790f82e8":"# Sentence modeling - titles","6a0a8ebd":"# Sentence modeling - lyrics","12fe0c96":"As for what \"kol\u0119dy\" actually are, they are traditional polish christmas carols sung during Christmas time. Later I hope to add some more information but for now I left you with an example. ;)","26eaf6db":"# Intro\n\nThis kernel is made for fun and to try out my new dataset \"Polish Christmas Carols\". \nMost of the code I based on the DataWorkshop challange: https:\/\/dataworkshop.eu\/challenge.","cc46bbf6":"# Word2Vec","427b8dad":"First let's check titles."}}