{"cell_type":{"728c9ac4":"code","2a1337ce":"code","b465ce19":"code","d5306565":"code","1bbc7e28":"code","9329e97a":"code","d7d70fed":"code","1ff79596":"code","46176d7c":"code","45632ecc":"code","5dd423c9":"code","620fba87":"code","8870c1d6":"code","009bf4bd":"code","c9359dc6":"code","3b219f66":"code","e8395dee":"code","6fa45948":"code","811eabdc":"code","344eb367":"code","4274b902":"code","e4d5f0e0":"code","94e08f4e":"code","085b5e6a":"code","f268ece4":"code","d0929d5f":"code","a55659ae":"code","2fccb623":"code","da658fef":"code","d839f639":"code","13b6d680":"code","a2b19e24":"code","997f9488":"code","cba87b5a":"code","801f77dc":"code","fa6697d7":"code","acae089b":"markdown","e600ef14":"markdown","4cef4291":"markdown","6d2daa39":"markdown","0cf19bdd":"markdown","af50f193":"markdown","bc1a193b":"markdown","dccd0187":"markdown","cbd200b1":"markdown","00876b4d":"markdown","bffab6d4":"markdown","9c9cb3a9":"markdown","484bb06c":"markdown","c87708c1":"markdown","37d72076":"markdown","a0b3cf16":"markdown","e5dbd2e0":"markdown"},"source":{"728c9ac4":"## for eda and visuls:\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport missingno \nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nimport matplotlib ","2a1337ce":"df=pd.read_csv(\"\/kaggle\/input\/house-rent-prices-of-metropolitan-cities-in-india\/_All_Cities_Cleaned.csv\")\n\n\ndf.head()","b465ce19":"df.info()","d5306565":"# Build a matrix of missing values\nmissingno.matrix(df, fontsize = 16)\nplt.show()","1bbc7e28":"df.shape","9329e97a":"df.drop_duplicates(inplace = True)","d7d70fed":"# color palette\n\n#black  '#1F0C07',\n#light pink '#FA74BF'\n\ncolors = ['#FB5B68','#FFEB48','#2676A1','#FFBDB0',]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\",colors)\n\n\nsns.palplot(colors, size = 4)\nplt.text(-0.75,-0.75, 'Indian house prices: A Good Palette for A Good Story.',{'font':'serif', 'size':24, 'weight':'bold'})\nplt.text(-0.75,-0.65, 'Lets have fun with these colors, and hopefully stick to them throughout presentation.',{'font':'serif', 'size':16},alpha = 0.7)\nfor idx,values in enumerate(colors):\n    plt.text(idx,-0.40, colors[idx],{'font':'serif', 'size':20, 'weight':'bold'}, alpha = 0.5)\nplt.gcf().set_facecolor('#f5f6f6')\nplt.box(None)\nplt.axis('off')\nplt.show()\n","1ff79596":"des_stats = df.describe(exclude = ['object']).drop(index = ['count'], axis = 0).T\nskew = []\nkurt = []\nnum_cols = df.select_dtypes(exclude = ['object']).columns\nfor col in num_cols:\n    skew.append(df[col].skew().round(1))\n    kurt.append(df[col].kurt().round(1))\n\nstats = pd.DataFrame({'skew':skew,'kurt':kurt}, index = num_cols)\n\nall_stats = pd.merge(left = des_stats,right = stats, left_index = True, right_index = True)","46176d7c":"all_stats","45632ecc":"sx = df.describe(exclude = ['int64', 'float64','float']).drop(index = ['count'], axis = 0).T\nsx","5dd423c9":"fig = plt.figure(figsize =(12,6), dpi = 80)\nfig.patch.set_facecolor('#f6f5f5')\n\ngs = fig.add_gridspec(2,2)\ngs.update(wspace = 0, hspace = 0.2)\n\nback_ground = '#f6f5f5'\nax1 = fig.add_subplot(gs[0,0])\nax2 = fig.add_subplot(gs[0,1])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\n\naxes = [ax1,ax2, ax3]\n\nfor ax in axes:\n    for loc in ['left','right','top','bottom']:\n        ax.spines[loc].set_visible(False)\n    ax.set_facecolor('#f6f5f5')\n    \n\n#colormap for visualization\ncolormap  = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\n\n#### statistics of numerical features \nsns.heatmap(all_stats.drop(index = ['price']),\n            annot = True, ax = ax1, \n            vmin = -0, vmax = 120,\n            square = True, linewidths = 0.09,linecolor = '#f6f5f5',\n            cbar = False,\n            cmap =colormap, annot_kws={'font':'serif', 'size':9, 'weight':'normal', 'color':'black'}, alpha = 0.9)\n\n#### statistics of target\n#ax4 = ax2.twinx()\nsns.kdeplot( df['price'], ax = ax3, palette= [colors[0]])\n\nsx = df.describe(exclude = ['int64', 'float64','float']).drop(index = ['count'], axis = 0).T\nsx['top']= ['4', '4', '6','4','4','6']\nsx = sx.astype(int)\n\nsns.heatmap(sx,annot = True,fmt = '1.0f',vmin = -0, vmax = 20,ax = ax2,\n            square = True, linewidths = 0.09,cbar = False,linecolor = '#f6f5f5',\n            cmap =colormap, annot_kws={'font':'serif', 'size':9, 'weight':'normal', 'color':'black'}, alpha =0.9)\n\n## labeling stats in violin plot\npr = df['price'].describe().drop(index = ['count', 'mean','std'], axis = 0)\n \n\n\nax2.axes.get_yaxis().set_visible(False)\n\n### price stats table\nprice_stats = all_stats.T['price'].to_frame().round(1)\nprice_stats = (price_stats.T[['mean', 'std', 'skew', 'kurt']]).T\nbbox = [0.5, 0, 0.35, 0.45]\nax4.table(cellText = price_stats.values, rowLabels = price_stats.index, \n          bbox=bbox,cellColours = np.array(['#f6f5f5','#f6f5f5','#f6f5f5','#f6f5f5']).reshape(-1,1),\n          rowColours = ['#f6f5f5','#f6f5f5','#f6f5f5','#f6f5f5'])\n\nax4.axis('off')\n\n\n\n\nfig.show()","620fba87":"\nfig =  plt.figure(figsize = (15,6))\nfig.patch.set_facecolor('#f5f6f6')\n\n\n                                                   \ngs = fig.add_gridspec(2,2)\ngs.update(wspace=0.2,hspace= 0.2)\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\n\naxes=[ax0,ax1,ax2,ax3]\nfor ax in axes:\n    ax.set_facecolor('#f5f6f6')\n    ax.tick_params(axis='x',\n                   labelsize = 12, which = 'major',\n                   direction = 'out',pad = 2,\n                   length = 1.5)\n    ax.tick_params(axis='y', colors= 'black')\n    ax.axes.get_yaxis().set_visible(False)\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\n\n        \ncols = df.select_dtypes(exclude = 'object').columns\n\nsns.countplot(df[cols[0]],ax=ax0)\nsns.kdeplot(x = df[cols[1]],color=\"green\",ax = ax1)\nsns.kdeplot(x = df[cols[2]],ax = ax2)\nsns.countplot(df[cols[3]],ax=ax3)\n\nfig.text(0.2,0.98,\"Univariate Analysis on Numerical Columns:\",**{'font':'serif', 'size':18,'weight':'bold'}, alpha = 1)\nfig.text(0.1,0.90,\"Most of the houses are of Two bedrooms and Two bathrooms \\n As we can see there is so much outliers present in price and area columns:\",**{'font':'serif', 'size':12,'weight':'bold'}, alpha = 1)\n","8870c1d6":"### univariate ananalysis\n\n\nfig =  plt.figure(figsize = (17,8), dpi = 90)\nfig.patch.set_facecolor('#f5f6f6')\n\n\n                                                    ##### Note to reader I could have used subplots feature, but going with grid\n                                                           #spec for more controlover plots\ngs = fig.add_gridspec(2,3)\ngs.update(wspace =0.1,hspace = 0.2)\n\n\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\n\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\n\n\n\n\naxes = [ax0,ax1,ax2,ax3, ax4,ax5,]\n\n\nfor ax in axes:\n    ax.set_facecolor('#f5f6f6')\n    ax.tick_params(axis='x',\n                   labelsize = 1, which = 'major',\n                   direction = 'out',pad = 2,\n                   length = 1)\n    ax.tick_params(axis='y', colors= 'black')\n    ax.axes.get_yaxis().set_visible(False)\n    ax.axes.get_xaxis().set_visible(True)\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n        \ncols = df.select_dtypes(exclude = ['int64','float64','float']).columns\nlabels = ['seller_type', 'layout_type', 'property_type', 'locality', 'furnish_type Size', 'city']\n\n\n\n\n\n### ax0- carat\ns = 250\n\nfor col,ax,label in zip(cols,axes,labels):\n    ax.bar(x = df[col].value_counts().index, height = df[col].value_counts().values, width = 0.1, color = colors[0] )\n    ax.scatter(x = df[col].value_counts().index, y = df[col].value_counts().values, s = s,color = colors[0] )\n    ht = df[col].value_counts().values.max()\n    ax.text(-1,ht\/2.2 ,label,**{'font':'serif', 'size':12, 'weight':'bold', 'rotation' : 'vertical'}, alpha = 1)\n    ax.set_xticklabels(df[col].value_counts().index , rotation = 90,**{'font':'serif', 'size':7.5, 'weight':'bold'}, alpha = 1)\n    \n    \n    \n\n        \nax0.set_xlim(-1,5)\nax1.set_xlim(-1,7)\nax2.set_xlim(-1,10)\nax3.set_xlim(-1.6,4)\nax4.set_xlim(-2,5)\nax5.set_xlim(-2,5)\n\n\n\n\n\n\n\n\nfig.show()\n    \n","009bf4bd":"df1=round(df[['price', 'property_type']].groupby('property_type').apply(lambda x: x.mean()))\ndf1.sort_values('price',inplace=True)\ndf1.reset_index(inplace=True)\n\nfig, ax = plt.subplots(figsize=(10,6), dpi= 80)\nax.vlines(x=df1.index,ymin=0,ymax=df1.price,color = colors[3],alpha=0.7,linewidth=2)\nax.scatter(x=df1.index, y=df1.price, s=75, color='firebrick', alpha=0.7)\n\n# Title, Label, Ticks and Ylim\n#ax.set_title('Average of Property Type With Price', fontdict={'size':22})\n\nax.set_xticks(df1.index)\nax.set_xticklabels(df1.property_type.str.upper(), rotation=45, fontdict={'horizontalalignment': 'right', 'size':12})\n\nax.set_facecolor('#f5f6f6')\nfor loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\nfor row in df1.itertuples():\n    ax.text(row.Index, row.price+.5, s=round(row.price, 2), horizontalalignment= 'center', verticalalignment='bottom', fontsize=14)\n\nfig.text(0.2,0.98,\"Average of Price with Property Type:\",**{'font':'serif', 'size':18,'weight':'bold'}, alpha = 1)\nfig.text(0.1,0.90,\"As we can see Pent house is most costly:\",**{'font':'serif', 'size':12,'weight':'bold'}, alpha = 1)\n\nplt.show()\n","c9359dc6":"df.head()","3b219f66":"import numpy as np","e8395dee":"df[\"price\"]=np.log(df[\"price\"])\ndf[\"area\"]=np.log(df[\"area\"])","6fa45948":"sns.kdeplot(df[\"price\"])","811eabdc":"df.head()","344eb367":"df[\"furnish_type\"].unique()","4274b902":"df[\"seller_type\"]=df[\"seller_type\"].map({'OWNER':0,'AGENT':1,'BUILDER':2})\ndf[\"layout_type\"]=df[\"layout_type\"].map({'BHK':0,'RK':1})\ndf[\"property_type\"]=df[\"property_type\"].map({'Apartment':0,'Studio Apartment':1,'Independent House':2,'Independent Floor':3,'Villa':4,'Penthouse':5})\ndf[\"furnish_type\"]=df[\"furnish_type\"].map({'Furnished':0,'Semi-Furnished':1,'Unfurnished':2})\ndf[\"city\"]=df[\"city\"].map({'Ahmedabad':0,'Bangalore':1,'Chennai':2,'Delhi':3,'Hyderabad':4,'Kolkata':5,'Mumbai':6,'Pune':7})\n\n\n\n","e4d5f0e0":"df.head()","94e08f4e":"dum=pd.get_dummies(df[\"locality\"],drop_first=True)","085b5e6a":"dum.columns","f268ece4":"dum2=pd.DataFrame(dum,columns=dum.columns)","d0929d5f":"df2=pd.concat([df,dum2],axis=1)","a55659ae":"df2.drop(\"locality\",axis=1,inplace=True)","2fccb623":"df2.head()","da658fef":"X=df2.drop(\"price\",axis=1)\ny=df2[\"price\"]","d839f639":"y","13b6d680":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)\n\n","a2b19e24":"from sklearn import metrics\n","997f9488":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\n#print(metrics.accuracy_score(y_test,y_pred))","cba87b5a":"model.score(X_train,y_train)","801f77dc":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nmodel.fit(X_train,y_train)\n","fa6697d7":"model.score(X_test,y_test)","acae089b":"price,area","e600ef14":"<p id=\"part3\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 3px; color: #FF8C00\">2 DATA DESCRIPTION AND DATA CLEANING<\/span>\n<hr style=\"height: 0.5px; border: 0; background-color: #808080\">\n\n<p style=\"font-family: Arials, sans-serif; font-size: 14px; color: rgba(0,0,0,.7)\">In this block, cleaning part will be carried out, data types, missing values, duplicates.<\/p>","4cef4291":"## numerical colimns:","6d2daa39":"<p id=\"part13\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">5. Modelling:<\/p>","0cf19bdd":"<p id=\"part7\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">2.4 Duplicates<\/p>","af50f193":"##  01. Handle outliers:","bc1a193b":"<p id=\"part8\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">3. Analysis:<\/p>","dccd0187":"<p id=\"part5\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">2.2 Data Types<\/p>","cbd200b1":"<p id=\"part11\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">3.3 Multi-variate Analysis:<\/p>","00876b4d":"<p id=\"part6\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">2.3 Missing values<\/p>","bffab6d4":"<p id=\"part9\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">3.1 Uni-variate Analysis:<\/p>","9c9cb3a9":"<p id=\"part0\"><\/p>\n\n<p style=\"font-family: Arials; line-height: 2; font-size: 24px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #FF8C00\">INDIAN HOUSES: <\/p>\n\n<img src=\"https:\/\/i.guim.co.uk\/img\/media\/6b064f11ef2e9dac7e4c66a148778c175d169571\/0_374_5616_3370\/master\/5616.jpg?width=465&quality=45&auto=format&fit=max&dpr=2&s=882e1e50f69ba005c9a7ea608100204c\" width=\"100%\" align=\"center\" hspace=\"5%\" vspace=\"5%\"\/>\n\n\n\n\n<p style=\"font-family: Arials; font-size: 20px; font-style: normal; font-weight: bold; letter-spacing: 3px; color: #808080; line-height:1.0\">TABLE OF CONTENT<\/p>\n\n\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"><a href=\"#part2\" style=\"color:#808080\">1 IMPORTING LIBRARIES<\/a><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"><a href=\"#part3\" style=\"color:#808080\">2 DATA DESCRIPTION AND DATA CLEANING<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\">\n<a href=\"#part4\" style=\"color:#808080\">2.1 Import Data<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\">\n<a href=\"#part5\" style=\"color:#808080\">2.2 Data types<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\">\n<a href=\"#part6\" style=\"color:#808080\">2.3 Missing values<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"> \n<a href=\"#part7\" style=\"color:#808080\">2.4 Duplicates<\/a><\/p>\n\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"><a href=\"#part8\" style=\"color:#808080\">3 ANALYSIS<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"> \n<a href=\"#part9\" style=\"color:#808080\">3.1 Uni-Vriate Analysis:<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"> \n<a href=\"#part10\" style=\"color:#808080\">3.2 Bi-Vriate Analysis:<\/a><\/p>\n\n<p style=\"text-indent: 1vw; font-family: Arials; font-size: 14px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"> \n<a href=\"#part11\" style=\"color:#808080\">3.3 Multi-Vriate Analysis:<\/a><\/p>\n\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"><a href=\"#part12\" style=\"color:#808080\">4 FINAL CONCLUSIONS<\/a><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 2px; color: #808080; line-height:1.3\"><a href=\"#part13\" style=\"color:#808080\">5 MODELLING<\/a><\/p>","484bb06c":"## categorical columns:","c87708c1":"## Modelling:","37d72076":"## statistical analysis:","a0b3cf16":"<p id=\"part2\"><\/p>\n\n# <span style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: bold; letter-spacing: 3px; color: #FF8C00\">1 IMPORTING LIBRARIES<\/span>\n<hr style=\"height: 0.5px; border: 0; background-color: #808080\">\n\n<p style=\"font-family: Arials, sans-serif; font-size: 14px; line-height:1.0; color: rgba(0,0,0,.7)\"><strong>LIBRARIES:<\/strong><\/p>\n\n<ol style=\"font-family: Arials, sans-serif; font-size: 14px; line-height:1.5; color: rgba(0,0,0,.7)\">\n<li>Library <strong>pandas<\/strong> will be required to work with data in tabular representation.<\/li>\n<p><\/p>\n<li>Library <strong>numpy<\/strong> will be required to round the data in the correlation matrix.<\/li>\n<p><\/p>\n<li>Library <strong>missingno<\/strong> will be required to visualize missing values in the data.<\/li>\n<p><\/p>   \n<li>Library <strong>matplotlib, seaborn, plotly<\/strong> required for data visualization.<\/li>\n<p><\/p>\n<\/ol>","e5dbd2e0":"<p id=\"part10\"><\/p>\n\n<p style=\"font-family: Arials; font-size: 16px; font-style: normal; font-weight: normal; letter-spacing: 3px; color: #FF8C00; line-height:1.0\">3.2 Bi-variate Analysis:<\/p>"}}