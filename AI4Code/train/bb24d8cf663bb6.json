{"cell_type":{"32fb4280":"code","e9f66ff1":"code","ff897770":"code","87ef9178":"code","7d9e0545":"code","9133ffab":"code","3b212740":"code","c20a512c":"code","5388dacb":"code","0bd40bc3":"code","23f6b746":"code","3a054382":"code","0aad69af":"code","7a6258ba":"code","4ac46717":"code","6bbfc954":"code","47448415":"code","0c33e19a":"code","a3a066ad":"code","53d8d005":"code","57ef5e46":"markdown","36a7f27d":"markdown","50575c04":"markdown","e2cbaf0f":"markdown","c62efe4a":"markdown","9abb4709":"markdown","a27aa2f9":"markdown"},"source":{"32fb4280":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9f66ff1":"import folium\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport geopandas as gpd \nimport math","ff897770":"#reading the csv files. \n\ndf_BRT=pd.read_excel('..\/input\/pune-bus-route-details-bus-stop-latlong\/BRT  Non BRT Route Details  Bus Stop LatLong (1).xls',index_col=0,sheet_name='BRTS UNIQUE STOP NAME')\ndf_non_BRT=pd.read_excel('..\/input\/pune-bus-route-details-bus-stop-latlong\/BRT  Non BRT Route Details  Bus Stop LatLong (1).xls',sheet_name='Non BRTS UNIQUE STOP NAME')\nroute_name=pd.read_excel('..\/input\/pune-bus-route-details-bus-stop-latlong\/BRT  Non BRT Route Details  Bus Stop LatLong (1).xls',sheet_name=3)\nshort_route_name=pd.read_excel('..\/input\/pune-bus-route-details-bus-stop-latlong\/BRT  Non BRT Route Details  Bus Stop LatLong (1).xls',sheet_name='Short Rout name Satge')\nroute_des=pd.read_excel('..\/input\/pune-bus-route-details-bus-stop-latlong\/BRT  Non BRT Route Details  Bus Stop LatLong (1).xls',sheet_name='Route Description')","87ef9178":"#Most the columns in these datasets are empty,so we'll only use these columns.\ndf_BRT=df_BRT.iloc[:,:4]\ndf_non_BRT=df_non_BRT.iloc[:,:3]\nroute_name=route_name.iloc[:,:9]\n#the Latitude column in short_route_names is of type object.Converting that in float.\nshort_route_name['LAT']=short_route_name['LAT'].astype(float)\n\n#converting the dtype of location coordinates.\nroute_name['LAT']=pd.to_numeric(route_name['LAT'],errors='coerce')\nroute_name['LONG']=pd.to_numeric(route_name['LONG'],errors='coerce')","7d9e0545":"#adding a new feature with the route id.\n\nroute_name['Route_id']=np.nan\nfor i in route_name.index:\n    route_name['Route_id'][i]=str(route_name['Route'][i]).split('-')[0]\n\nroute_name.head()","9133ffab":"#How many bus routes are there in pune?(unique two way routes.)\nroute_name['Route_id'].nunique()","3b212740":"#lets see the count of bus stops labelled as BRT and non-BRT:\n#there are duplicates so we'll introduce a new data set .\ndf_temp=pd.DataFrame()\n\n\nfor key,grp in route_name.groupby('Stop Name'):\n    try:\n        #most bus stops have stops on either side of the road so taking two values.\n        ap=grp.iloc[:2]\n    except:\n        #some places (like bus depots) can have a single point as a Stop. \n        ap=grp.iloc[0]\n    df_temp=df_temp.append(ap)\n\n\nplt.figure(figsize=(14,7))    \nsns.countplot(df_temp['Route Type'])\nplt.title('BusStop-type counts')\n","c20a512c":"#lets see the BRT stop locations clusters :\n\n#making a Marker Cluster for visualization.\nfrom folium.plugins import MarkerCluster\n\n#pune map\nLat_mean=df_BRT['Latitude'].mean()\nlon_mean=df_BRT['Longitude'].mean()\n\nm_1 = folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=12,min_zoom=11)\n\n#making a Marker Cluster for visualization.\nmc=MarkerCluster().add_to(m_1)\n\n#adding a extra tile layer.\n# folium.TileLayer('cartodbpositron').add_to(m_1)\n# folium.LayerControl().add_to(m_1)\n\nfor index,row in df_BRT.iterrows():\n    location=[row['Latitude'],row['Longitude']]\n    name=str(row['Stop Name'])\n    if not math.isnan(location[0]) and not math.isnan(location[1]):\n        mc.add_child(folium.Marker(location=location,tooltip=f'<b> {name} <\/b>'))\n    else:\n        pass\nprint('BRT Bus Stops.')\nm_1.add_child(mc)","5388dacb":"df_BRT.dropna(inplace=True)\n\n#heatmap of BRT Bus stops:\n\nm_2=folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=12,min_zoom=11)\n\nfolium.plugins.HeatMap(data=df_BRT[['Latitude','Longitude']],radius=10,opacity=.1).add_to(m_2)\nprint('BRT Bus stops Heatmap')\nm_2","0bd40bc3":"m_3 = folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=12,min_zoom=11)\n\n#making a Marker Cluster for visualization.\nmc=MarkerCluster().add_to(m_3)\n\nfor index,row in short_route_name.iterrows():\n    location=[row['LAT'],row['LONG']]\n    name=row['Stop Name']\n    if not math.isnan(location[0]) and not math.isnan(location[1]):\n        mc.add_child(folium.Marker(location=location,popup=f'<b> {name} <\/b>'))\n    else:\n        pass\nfor key,grp in short_route_name.groupby('Route'):\n    folium.PolyLine(locations=grp[['LAT','LONG']], opacity=2, weight=2, tooltip=f'<b>{key}<\/b>').add_to(m_3)\nprint('Short route Bus stops')\nm_3 ","23f6b746":"short_route_name.dropna(inplace=True)\n\nm_4=folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=12,min_zoom=10)\nfolium.plugins.HeatMap(data=short_route_name[['LAT','LONG']],radius=5,opacity=.1).add_to(m_2)\nprint('Short Route  Heatmap')\nm_2","3a054382":"#dropping Route 257-D and 8-U  from route name because they're showing anomalous data.\nidx_to_drop=list(route_name[route_name['Route'] == '257-D'].index)\nidx_to_drop.extend(route_name[route_name['Route']=='8-U'].index)\nroute_name.drop(idx_to_drop,inplace=True)","0aad69af":"m_5 = folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=12,min_zoom=10)\n\n#making a Marker Cluster for visualization.\nmc=MarkerCluster().add_to(m_5)\n\n#dropping NA values in route_names:\nroute_name.dropna(inplace=True)\n\nfor key,grp in route_name.groupby('Stop Name'):\n    location=[grp['LAT'].iloc[0],grp['LONG'].iloc[0]]\n    name=key\n    if not math.isnan(location[0]) and not math.isnan(location[1]):\n        mc.add_child(folium.Marker(location=location,popup=f'<b> {name} <\/b>'))\n    else:\n        pass\n\n# plotting a line through stops on the route:    \nfor key,grp in route_name.groupby('Route'):\n    folium.PolyLine(locations=grp[['LAT','LONG']], opacity=2, weight=.5, tooltip=f'<b>{key}<\/b>').add_to(m_5)\nprint('Pune Bus Stops with route name')    \nm_5 \n","7a6258ba":"#Heatmap.\n#df_temp created earlier.\ndf_temp.dropna(inplace=True)\n    \nm_6=folium.Map(location=[Lat_mean,lon_mean], tiles='Open Street Map', zoom_start=11,min_zoom=9)\nfolium.plugins.HeatMap(data=df_temp[['LAT','LONG']],radius=7,opacity=5).add_to(m_6)\nprint('All Bus stops Heatmap')\nm_6","4ac46717":"#creating a geopandas dataframe.\n\nroute_gdf=gpd.GeoDataFrame(route_name,geometry=gpd.points_from_xy(route_name['LONG'],route_name['LAT']),crs=4326)\n# route_gdf.set_crs(epsg=3857)\n#mercator\nroute_gdf['geometry'].to_crs(epsg=4326)","6bbfc954":"route_gdf.reset_index(drop=True)","47448415":"# lat_conv=110.574 #km\n# long_conv=111.320 * np.cos(lat)\n\n# Point.\nfrom shapely.geometry import Point\n\n#for displaying the map\nfrom IPython.display import HTML,display\n\n\ndef closest_Bus_stop(lat,long):\n    point=Point(long,lat)\n    min_idx=np.argmin(route_gdf.geometry.distance(point))\n#     min_idx=route_gdf.geometry.distance((point)).idxmin\n    \n    #finding the closest bus stop.\n    bs=route_gdf.iloc[min_idx]\n    name=bs['Stop Name']\n    dis=np.sqrt((abs(lat-bs['LAT'])*110.574)**2 + ((abs(long-bs['LONG'])*(111.320)*np.cos(lat))**2))      #aerial distance\n    \n    \n    #plotting the map and the points.\n    m=folium.Map(location=[lat,long], tiles='Open Street Map', zoom_start=13,min_zoom=9)\n    folium.Marker(location=[lat,long],tooltip=f'<b> Current Location <\/b>',icon=folium.Icon(color='blue',icon='home')).add_to(m)\n    folium.Marker(location=[bs['LAT'],bs['LONG']],tooltip=f'<b> {name} <\/b>',icon=folium.Icon(color='green',icon='info-sign')).add_to(m)\n    \n    \n    print(f'{name} is {dis} km away.')\n    display(m)","0c33e19a":"closest_Bus_stop(18.5216668,73.8296012)","a3a066ad":"#using the fuction we build,lets build a funtion to find the best bus travel option between two points:\n\ndef bus_route(start,des):\n    #point objects.\n    start_p=Point(start)\n    des_p=Point(des)\n    \n    # indexes of closest stops to the starting point and end point:\n    route_gdf['geometry'].to_crs(epsg= 4326)\n    srt_idx=np.argmin(route_gdf.geometry.distance(start_p))\n    des_idx=np.argmin(route_gdf.geometry.distance(des_p))\n    \n    #Closest stops\n    start_bs=route_gdf.iloc[srt_idx]\n    des_bs=route_gdf.iloc[des_idx]\n    #stop name;\n    s_name=start_bs['Stop Name']\n    des_name=des_bs['Stop Name']\n    \n    \n    #distance between bus stops and locations\n      #start location to closest bus stop\n    dis1=np.sqrt((abs(start[1]-start_bs['LAT'])*110.574)**2 + ((abs(start[0]-start_bs['LONG'])*(111.320)*np.cos(np.mean([start[1],des[1]]))**2)))      #aerial distance\n    \n    \n      #destination bus stop to destination\n    dis2=np.sqrt((abs(des[1]-des_bs['LAT'])*110.574)**2 + ((abs(des[0]-des_bs['LONG'])*(111.320)*np.cos(np.mean([start[1],des[1]]))**2)))      #aerial distance\n    \n    #MAP\n    m=folium.Map(location=[np.mean([start[1],des[1]]),np.mean([start[0],des[0]])],min_zoom=9,tiles='Open Street Map',zoom_start=12)\n    \n    #Markers.\n        #start_location:\n    folium.Marker(location=(start[1],start[0]),tooltip='Current Location').add_to(m)\n    \n        #destination\n    folium.Marker(location=(des[1],des[0]),tooltip='Destination',icon=folium.Icon(color='black',icon='stop')).add_to(m)\n    \n        #bus stops\n    folium.Marker(location=(start_bs.LAT,start_bs.LONG),icon=folium.Icon(color='green',icon='info-sign'),tooltip=f'{s_name}').add_to(m)\n    folium.Marker(location=(des_bs.LAT,des_bs.LONG),icon=folium.Icon(color='darkgreen',icon='info-sign'),tooltip=f'{des_name}').add_to(m)\n    \n    print(f'Current location to {s_name} is {dis1} km.  \\n  {des_name} to Destination is {dis2} km.')\n    \n    display(m)\n    ","53d8d005":"bus_route((73.8858491,18.4632745),(73.8354001,18.5234569))","57ef5e46":"# All Bus stops and Routes.","36a7f27d":"**HeatMap for BRT Bus Stops.**","50575c04":"# Function to calculate closest bus stop.","e2cbaf0f":"# Short Route Bus stops.","c62efe4a":"# BRT BUS Stops.","9abb4709":"# Function to calculate closest  Bus stop to current location and Destination and distances.","a27aa2f9":"# EDA \nThe 'route_name' dataset has all the info we need so we'll just use that. "}}