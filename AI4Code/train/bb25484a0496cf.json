{"cell_type":{"3abca2b1":"code","edd91974":"code","3b438600":"code","3a9c1bca":"code","9d90d753":"code","e86fd404":"code","a40b8a1f":"code","90420415":"code","a3ec6eba":"code","f571f21a":"code","591f29b6":"code","7f840b9b":"code","687fe788":"code","b81a5d02":"code","804b8eae":"code","6aa79965":"code","569b0267":"code","136d082c":"code","a3fc5b50":"code","cd1ee384":"code","54110df2":"code","3a296f40":"code","14aa0f4a":"code","95ac7f02":"code","03842740":"code","0a8755c1":"code","a8a12efd":"code","bc4cb1ab":"code","2b23c72e":"code","99716cbb":"code","73dde69a":"code","fa4fbafb":"code","f5a4e001":"code","e5138b28":"code","3c2fa9d8":"code","f36ee8d5":"code","e9922c47":"code","25082367":"code","80797396":"code","41de2429":"code","1ffe27cb":"code","5d238371":"code","b65ea64e":"code","81a5197c":"code","c306f9e6":"code","fd12f067":"code","2b57ff7f":"code","08e9f978":"code","c8a81c7f":"code","9d9751fa":"code","17eec946":"markdown","f6c605a4":"markdown","53051054":"markdown","b02743ea":"markdown"},"source":{"3abca2b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","edd91974":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","3b438600":"train_data.head()","3a9c1bca":"train_data.info()","9d90d753":"train_data.describe()","e86fd404":"train_data.isnull().sum()","a40b8a1f":"train_data.shape","90420415":"train_data.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'Id', 'GarageYrBlt'], axis=1, inplace = True)","a3ec6eba":"train_data['LotFrontage']=train_data['LotFrontage'].fillna(train_data['LotFrontage'].mode()[0])\ntrain_data['BsmtCond']=train_data['BsmtCond'].fillna(train_data['BsmtCond'].mode()[0])\ntrain_data['BsmtQual']=train_data['BsmtQual'].fillna(train_data['BsmtQual'].mode()[0])\ntrain_data['FireplaceQu']=train_data['FireplaceQu'].fillna(train_data['FireplaceQu'].mode()[0])\ntrain_data['GarageType']=train_data['GarageType'].fillna(train_data['GarageType'].mode()[0])\ntrain_data['GarageFinish']=train_data['GarageFinish'].fillna(train_data['GarageFinish'].mode()[0])\ntrain_data['GarageQual']=train_data['GarageQual'].fillna(train_data['GarageQual'].mode()[0])\ntrain_data['GarageCond']=train_data['GarageCond'].fillna(train_data['GarageCond'].mode()[0])","f571f21a":"train_data.shape","591f29b6":"train_data.isnull().sum()","7f840b9b":"import seaborn as sns\nsns.heatmap(train_data.isnull(),yticklabels=False,cbar=False,cmap='coolwarm')","687fe788":"train_data['MasVnrType']=train_data['MasVnrType'].fillna(train_data['MasVnrType'].mode()[0])\ntrain_data['MasVnrArea']=train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].mode()[0])\ntrain_data['BsmtExposure']=train_data['BsmtExposure'].fillna(train_data['BsmtExposure'].mode()[0])\ntrain_data['BsmtFinType2']=train_data['BsmtFinType2'].fillna(train_data['BsmtFinType2'].mode()[0])","b81a5d02":"sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","804b8eae":"train_data.dropna(inplace=True)","6aa79965":"train_data.head()","569b0267":"test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","136d082c":"test_data.isnull().sum()","a3fc5b50":"test_data.shape","cd1ee384":"test_data.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature', 'Id', 'GarageYrBlt'], axis=1, inplace = True)","54110df2":"test_data['LotFrontage']=test_data['LotFrontage'].fillna(test_data['LotFrontage'].mode()[0])\ntest_data['BsmtCond']=test_data['BsmtCond'].fillna(test_data['BsmtCond'].mode()[0])\ntest_data['BsmtQual']=test_data['BsmtQual'].fillna(test_data['BsmtQual'].mode()[0])\ntest_data['FireplaceQu']=test_data['FireplaceQu'].fillna(test_data['FireplaceQu'].mode()[0])\ntest_data['GarageType']=test_data['GarageType'].fillna(test_data['GarageType'].mode()[0])\ntest_data['GarageFinish']=test_data['GarageFinish'].fillna(test_data['GarageFinish'].mode()[0])\ntest_data['GarageQual']=test_data['GarageQual'].fillna(test_data['GarageQual'].mode()[0])\ntest_data['GarageCond']=test_data['GarageCond'].fillna(test_data['GarageCond'].mode()[0])\ntest_data['MasVnrType']=test_data['MasVnrType'].fillna(test_data['MasVnrType'].mode()[0])\ntest_data['MasVnrArea']=test_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mode()[0])\ntest_data['BsmtExposure']=test_data['BsmtExposure'].fillna(test_data['BsmtExposure'].mode()[0])\ntest_data['BsmtFinType2']=test_data['BsmtFinType2'].fillna(test_data['BsmtFinType2'].mode()[0])","3a296f40":"test_data.loc[:, test_data.isnull().any()].head()","14aa0f4a":"test_data['Utilities']=test_data['Utilities'].fillna(test_data['Utilities'].mode()[0])\ntest_data['Exterior1st']=test_data['Exterior1st'].fillna(test_data['Exterior1st'].mode()[0])\ntest_data['Exterior2nd']=test_data['Exterior2nd'].fillna(test_data['Exterior2nd'].mode()[0])\ntest_data['BsmtFinType1']=test_data['BsmtFinType1'].fillna(test_data['BsmtFinType1'].mode()[0])\ntest_data['BsmtFinSF1']=test_data['BsmtFinSF1'].fillna(test_data['BsmtFinSF1'].mean())\ntest_data['BsmtFinSF2']=test_data['BsmtFinSF2'].fillna(test_data['BsmtFinSF2'].mean())\ntest_data['BsmtUnfSF']=test_data['BsmtUnfSF'].fillna(test_data['BsmtUnfSF'].mean())\ntest_data['TotalBsmtSF']=test_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].mean())\ntest_data['BsmtFullBath']=test_data['BsmtFullBath'].fillna(test_data['BsmtFullBath'].mode()[0])\ntest_data['BsmtHalfBath']=test_data['BsmtHalfBath'].fillna(test_data['BsmtHalfBath'].mode()[0])\ntest_data['KitchenQual']=test_data['KitchenQual'].fillna(test_data['KitchenQual'].mode()[0])\ntest_data['Functional']=test_data['Functional'].fillna(test_data['Functional'].mode()[0])\ntest_data['GarageCars']=test_data['GarageCars'].fillna(test_data['GarageCars'].mean())\ntest_data['GarageArea']=test_data['GarageArea'].fillna(test_data['GarageArea'].mean())\ntest_data['SaleType']=test_data['SaleType'].fillna(test_data['SaleType'].mode()[0])","95ac7f02":"test_data.shape","03842740":"# Handling Categorical Features\ncolumns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']\n","0a8755c1":"def category_onehot_multcols(multcolumns):\n    data_final=final_data\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_data[fields],drop_first=True)\n        \n        final_data.drop([fields],axis=1,inplace=True)\n        if i==0:\n            data_final=df1.copy()\n        else:\n            \n            data_final=pd.concat([data_final,df1],axis=1)\n        i=i+1\n       \n        \n    data_final=pd.concat([final_data,data_final],axis=1)\n        \n    return data_final","a8a12efd":"train_data2 = train_data.copy()","bc4cb1ab":"final_data=pd.concat([train_data,test_data],axis=0)","2b23c72e":"final_data['SalePrice']","99716cbb":"final_data.shape","73dde69a":"final_data=category_onehot_multcols(columns)","fa4fbafb":"final_data =final_data.loc[:,~final_data.columns.duplicated()]","f5a4e001":"final_data.shape","e5138b28":"data_train=final_data.iloc[:1422,:]\ndata_test=final_data.iloc[1422:,:]","3c2fa9d8":"data_train.head()","f36ee8d5":"data_test.head()","e9922c47":"data_test.drop(['SalePrice'],axis=1,inplace=True)","25082367":"X_train=data_train.drop(['SalePrice'],axis=1)\ny_train=data_train['SalePrice']","80797396":"import xgboost\nregressor=xgboost.XGBRegressor()","41de2429":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]","1ffe27cb":"\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","5d238371":"# Set up the random search with 4-fold cross validation\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=2)","b65ea64e":"random_cv.fit(X_train,y_train)","81a5197c":"regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n       max_depth=2, min_child_weight=1, missing=None, n_estimators=900,\n       n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=1)","c306f9e6":"regressor.fit(X_train,y_train)","fd12f067":"classifier=xgboost.XGBRegressor()","2b57ff7f":"import pickle\nfilename = 'finalized_model.pkl'\npickle.dump(classifier, open(filename, 'wb'))","08e9f978":"y_pred=regressor.predict(data_test)","c8a81c7f":"y_pred","9d9751fa":"##Create Sample Submission file and Submit using ANN\npred=pd.DataFrame(y_pred)\nsub_df=pd.read_csv(\"..\/input\/sample-submission\/sample_submission.csv\")\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('\/kaggle\/working\/to_submit.csv',index=False)","17eec946":"# Training Data","f6c605a4":"# Importing Libraries","53051054":"# Test Data","b02743ea":"# XBoost Regressor Model"}}