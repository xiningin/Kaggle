{"cell_type":{"d2ffb3f4":"code","f7c80f6f":"code","30118a80":"code","e2d68533":"code","01e7b0b9":"code","509a22c7":"code","735797e7":"code","07326f80":"code","e731099c":"markdown","c15d0137":"markdown","d737e01e":"markdown","f5ab1c71":"markdown","dc88cf73":"markdown"},"source":{"d2ffb3f4":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt","f7c80f6f":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","30118a80":"train = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv\")\ntrain_labels = train.pop(\"label\")\ntest_labels = test.pop(\"label\")\ntrain_images = np.array(train).reshape((-1, 28, 28, 1, 1)) \/ 255.0\ntest_images = np.array(test).reshape((-1, 28, 28, 1, 1)) \/ 255.0","e2d68533":"batch_size = 100","01e7b0b9":"indices = np.random.choice(train_images.shape[0], 100)\nsample_images(train_images[indices].squeeze(), 10, 10)","509a22c7":"tf.keras.backend.clear_session()\nmodel = keras.Sequential(\n    [\n        keras.Input(shape=(28, 28, 1, 1)),\n        layers.Conv3D(32, kernel_size=(3, 3, 1), padding=\"same\", activation=\"relu\"),\n        layers.MaxPooling3D(pool_size=(2, 2, 1)),\n        layers.Conv3D(64, kernel_size=(3, 3, 1), padding=\"same\", activation=\"relu\"),\n        layers.MaxPooling3D(pool_size=(2, 2, 1)),\n        layers.Conv3D(128, kernel_size=(3, 3, 1), padding=\"same\", activation=\"relu\"),\n        layers.MaxPooling3D(pool_size=(2, 2, 1)),\n        layers.GlobalAveragePooling3D(),\n        layers.Dense(10, activation=\"softmax\"),\n    ]\n)\nmodel.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nmodel.summary()","735797e7":"history = model.fit(train_images, train_labels, epochs=30, batch_size=batch_size, validation_data=(test_images, test_labels))","07326f80":"pd.DataFrame(history.history).plot()","e731099c":"## Model Development","c15d0137":"## Training","d737e01e":"## Fashion MNIST Classification with 3DCNN","f5ab1c71":"## Import and preprcess dataset","dc88cf73":"## Utilities"}}