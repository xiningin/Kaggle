{"cell_type":{"a97e99b8":"code","efdaa014":"code","ee63d089":"code","d7caec5e":"code","092bc086":"code","89c8a029":"code","1bfc02c1":"code","61b3399d":"code","17cd7b67":"code","0414fee3":"code","37208bc6":"code","dd075659":"code","7feaac6d":"code","59082fce":"code","520e6f6f":"code","17788e3a":"code","725f53ee":"code","e3703aa1":"code","39e39725":"code","a02864d1":"code","0f9e9ed8":"code","e240aeb6":"code","68ea4009":"code","a6619a12":"code","8c05dd23":"code","c72e83be":"code","54de007c":"code","ecef677c":"code","c2d3fbda":"code","ff45aae9":"code","032c914f":"code","784278bc":"code","1c79e1c4":"code","d25532ed":"code","c6fbf0ec":"code","973d3ca0":"code","f6a62c6a":"markdown","80cde49c":"markdown","cc96bc9c":"markdown"},"source":{"a97e99b8":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","efdaa014":"#read power station dataset\ndf = pd.read_csv('..\/input\/power-stations-in-india\/INDIA ENERGY RESOURCES.csv')","ee63d089":"#check rows and columns of dataset\ndf.shape","d7caec5e":"#show head of dataset\ndf.head()","092bc086":"#check all columns\ndf.columns","89c8a029":"#check type of dataset\ndf.dtypes","1bfc02c1":"#check missing value in dataset\ndf.isnull().sum()","61b3399d":"#describe of dataset\ndf.describe(include = 'object')","17cd7b67":"#rename capacity(MW) and power station name columns\ndf = df.rename(columns = {'CAPACITY(MW)' : 'CAPACITY', 'Power station NAME' : 'POWER STATION'})\ndf.head()","0414fee3":"#check unique of sector column\ndf['SECTOR'].unique()","37208bc6":"#check number of sector column\ndf['SECTOR'].value_counts()","dd075659":"#check unique of power station column\ndf['POWER STATION'].unique()","7feaac6d":"#remove bracket and number from string in power station column\ndf['POWER STATION'] = [str(i).replace('[', '').replace(']', '') for i in df['POWER STATION']]\ndf['POWER STATION'] = df['POWER STATION'].str.replace('\\d+', '')\ndf['POWER STATION'].unique()","59082fce":"#check number of power station column\ndf['POWER STATION'].value_counts()","520e6f6f":"#check unique of fuel type column\ndf['FUEL TYPE'].unique()","17788e3a":"#check number of fuel type column\ndf['FUEL TYPE'].value_counts()","725f53ee":"#check unique of region column\ndf['REGION'].unique()","e3703aa1":"#check number of region column\ndf['REGION'].value_counts()","39e39725":"#check unique of state column\ndf['STATE'].unique()","a02864d1":"#check number of state column\ndf['STATE'].value_counts()","0f9e9ed8":"#check unique of fuel type column\ndf['FUEL TYPE'].unique()","e240aeb6":"#check number of fuel type column\ndf['FUEL TYPE'].value_counts()","68ea4009":"#check unique of capacity column\ndf['CAPACITY'].unique()","a6619a12":"#transform capacity column\ndf['CAPACITY'] = [float(str(i).replace(',', '')) for i in df['CAPACITY']]\ndf['CAPACITY'] = df['CAPACITY'].astype(int)\ndf.head()","8c05dd23":"print('Maximum of capacity :', df['CAPACITY'].max())\nprint('Minimum of capacity :', df['CAPACITY'].min())\nprint('Median of capacity :', df['CAPACITY'].median())\nprint('Average of capacity :', df['CAPACITY'].mean())\nprint('Total of capacity :', df['CAPACITY'].sum())\n\n#visualize outlier of capacity\ndf.boxplot(column = ['CAPACITY'])","c72e83be":"#analyze of sector, power station and fuel type that have capacity under 402.5\ndf[df['CAPACITY'] < 402.5][['SECTOR', 'FUEL TYPE', 'POWER STATION', 'CAPACITY']]","54de007c":"#analyze of sector and power station that have capacity over 402.5\ndf[df['CAPACITY'] > 402.5][['SECTOR', 'FUEL TYPE', 'POWER STATION', 'CAPACITY']]","ecef677c":"#analyze of region and state that have capacity under 402.5\ndf[df['CAPACITY'] < 402.5][['REGION', 'STATE', 'CAPACITY']]","c2d3fbda":"#analyze of region and state that have capacity over 402.5\ndf[df['CAPACITY'] > 402.5][['REGION', 'STATE', 'CAPACITY']]","ff45aae9":"#analyze of total capacity based on sector, fuel type and power station\nsector_type_power_station = pd.pivot_table(df, index = ['SECTOR', 'FUEL TYPE', 'POWER STATION'], \n                                     aggfunc = {'CAPACITY' : np.sum}).sort_values('CAPACITY', ascending = False)\nsector_type_power_station.head(50)","032c914f":"#analyze of total capacity based on region and state\nregion_state = pd.pivot_table(df, index = ['REGION', 'STATE'], \n                                     aggfunc = {'CAPACITY' : np.sum}).sort_values('CAPACITY', ascending = False)\nregion_state.head(50)","784278bc":"#visualize number of sector\nplt.figure(figsize = (6,5))\nsector = [np.count_nonzero(df[df['SECTOR'] == 'Thermal power station']),\n             np.count_nonzero(df[df['SECTOR'] == 'RENEWABLE']),\n             np.count_nonzero(df[df['SECTOR'] == 'NUCLEAR power station'])]\nactivities = ['Thermal Power Station', 'Renewable', 'Nuclear Power Station']\nplt.pie(sector, labels = activities, autopct = '%1.f%%')\nplt.title('Number of Sector', fontsize = 15, color = 'orangered')\nplt.show()\n\n#visualize number of fuel type\nchart = df['FUEL TYPE'].value_counts().sort_values(ascending = False).plot(kind = 'bar', color = 'lightseagreen')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title('Number of Fuel Type', fontsize = 15, pad = 12, color = 'b')\nplt.xlabel('Fuel Type', fontsize = 12)\nplt.ylabel('Count', fontsize = 12)\nplt.show()","1c79e1c4":"#visualize number of state\nplt.figure(figsize = (11,10))\nchart = df['STATE'].value_counts().sort_values(ascending = True).plot(kind = 'barh', color = 'darkorange')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title('Number of States', fontsize = 15, pad = 12, color = 'b')\nplt.xlabel('State', fontsize = 12)\nplt.ylabel('Count', fontsize = 12)\nplt.show()\n\n#visualize number of region\nchart = df['REGION'].value_counts().sort_values(ascending = False).plot(kind = 'bar', color = 'royalblue')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Number of Region', fontsize = 15, pad = 12, color = 'maroon')\nplt.xlabel('Region', fontsize = 12)\nplt.ylabel('Count', fontsize = 12)\nplt.show()","d25532ed":"#visualize total capacity based on sector\nchart = df.groupby('SECTOR')['CAPACITY'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'orangered')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Capacity based on Sector', fontsize = 15, pad = 12, color = 'darkviolet')\nplt.xlabel('Sector', fontsize = 12)\nplt.ylabel('Total Capacity', fontsize = 12)\nplt.show()\n\n#visualize total capacity based on fuel type\nchart = df.groupby('FUEL TYPE')['CAPACITY'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'mediumblue')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title('Total Capacity based on Fuel Type', fontsize = 15, pad = 12, color = 'orangered')\nplt.xlabel('Fuel Type', fontsize = 12)\nplt.ylabel('Total Capacity', fontsize = 12)\nplt.show()","c6fbf0ec":"#visualize total capacity based on state\nplt.figure(figsize = (11,10))\nchart = df.groupby('STATE')['CAPACITY'].sum().sort_values(ascending = True).plot(kind = 'barh', color = 'maroon')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Capacity based on State', fontsize = 15, pad = 12, color = 'mediumblue')\nplt.xlabel('Total Capacity', fontsize = 12)\nplt.ylabel('State', fontsize = 12)\nlabels, locations = plt.xticks()\nplt.xticks(labels, (labels\/1).astype(float))\nplt.show()\n\n#visualize total capacity based on state\nchart = df.groupby('REGION')['CAPACITY'].sum().sort_values(ascending = False).plot(kind = 'bar', color = 'dodgerblue')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('Total Capacity based on Region', fontsize = 15, pad = 12, color = 'g')\nplt.xlabel('Region', fontsize = 12)\nplt.ylabel('Total Capacity', fontsize = 12)\nplt.show()","973d3ca0":"#visualize distribution of capacity\ndf['CAPACITY'].hist(color = 'indigo')\nplt.title('Distribution of Capacity', fontsize = 15, pad = 12, color = 'maroon')\nplt.xlabel('Capacity', fontsize = 12)\nplt.ylabel('Density', fontsize = 12)\nplt.show()","f6a62c6a":"# Data Extraction","80cde49c":"# Number Of Power Stations In India","cc96bc9c":"# Exploratory Data Analysis (EDA)"}}