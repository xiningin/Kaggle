{"cell_type":{"49fbd399":"code","9af5adcc":"code","eadd0ade":"code","76dcab89":"code","ae437724":"code","659b36c8":"code","98fbe6f0":"code","37762cbf":"code","7cd647b8":"code","a457a996":"code","b2dea655":"code","72283739":"code","293f0946":"code","9971ecd7":"code","fc235c1f":"code","8c881635":"code","c9a3eb28":"code","8dc1d9b1":"code","fa93c870":"code","d31e38bc":"code","71d98bad":"code","0612e412":"code","58389efa":"code","8365837e":"code","30d19707":"code","51fc2d65":"markdown","7e7dc50a":"markdown","da1341ff":"markdown","fc33c54c":"markdown","def53925":"markdown"},"source":{"49fbd399":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUTExIWFhUVGBgXFxgXGRYXFxgXGBUXGBcXFRgaHSggGBolHRgXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGzUlHyUuNTUvKy0tLy0tLS0vMC0vLS0tLS0tLS0tLTUtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAFAQIDBAYAB\/\/EAEcQAAIBAgQCBwQGBgkDBQEAAAECEQADBBIhMQVBBiJRYXGBkRMyodFCUpKxwfAUYoKi0uEVFiNTVHKy4vEHJDOTo7PC00T\/xAAbAQABBQEBAAAAAAAAAAAAAAABAAIDBAUGB\/\/EADIRAAIBAwIEBAQGAgMAAAAAAAABAgMEERIhBTFBURMiYYGRodHwFDJScbHBI2IkQuH\/2gAMAwEAAhEDEQA\/ANEB+ZpJ\/OlRiye8eQ+VLctP2t8fwrksHVEjA9\/4062GkCGk6b+gqsM3afj86MdHMOXvAnZettvG3PtIqSlBzmo9xlWahByfQucdZkW3ZQSVWT4nQHx9\/wBaA3bDgFmIq3x3iuRnuGWkkjuGwA7oArCcZ6QXbmg0HZWvPeWx5zd1tdRthXG41QN6B38SWYIupYhQO8mB8TQW5iWnU1a4ES14dV2gNAQEmcpWfLMD4xTZ7RbGW9HxKsYvqzZYu8mHw3bmWPFJ0HcbjEsecFvqiqXR7i7tu0tz\/WjkQNSOwjrCI6wAmPpFhrt5lMJaXeLjqpEDKoyzOn9of26DjBpb1OKXOPo21bzOZoiBrpMRNZ0KMJwxLm\/f+DqXKqqyUV5B2MxZa8zp1dwI7GBmCNjDRI7KRLBPXyZVHUkTl3LanthgNTMKKqWsQsw3VJJOuxJMmD2TNer9FcILeFQEav12B55tp\/ZirEaUpycOSwdVOdvaU4VktUltz+J50MKW1DEZCPd1aTJkDaAFYkmANKfbsvJzN1lJWY+qSDM7mc2utE+K8Rtfpb2hhwBnFtTbJtsTop0gq3WzchtvRTiXRa5ZUuHDookkyG85mT50+ta1qMEsbENtfUbi5lOUsZ2SfR\/uZ2zjDbcagMNQRodu\/wB7TltrrWxssuLsZSCGCysb6EyFPMggldeRB2actdyFIKkGCJjN1ifek7ASdABoN6NcOvKhVXs3FYEBLiAyDtC8iCxaNtDvrVaUU45XMr3k5t6msNPbPPH3gDlSCQdwYMbeI7iII7iKSrvFrYFwMLi3A6nUDKZU\/SXlowAjklU6haN20reNSUxpropTXGhgsiKK4UprqQhIpctdSGkIjcU0insaiY0CRBLgzuXIzkqBMHbsFF3Y9o+FCeB3FAckA6xrPIeHeaInEL2D0b5UmjEupKVV4I7rtyI\/dqtmbt\/0VYu4lO77LfKq63kncfZoYIDnukDn+7UlnEMRsf3ahxN1PrD0FVxeUAw2viKWAE122zE6fFanBcLAB07x+FUfaDTX4j51Itxe77Q+dERKEYGY+PyqQ5jyH73yqsxXsX7VNe8ANMvqaACZwTy\/1fKozbP1F9H+VMQhtwPiaQ+fo3yogNao8fu\/GnZh2j8+dURiBpr69ndUntl7QJ8fnRGljz\/PpRjAD2WHd\/pP1V8Np+LHyoDbbMQFaZMCO3aKOcfuBFt2wdEXXvJ0B+B9avWccap9v5ZlcWr+HQwupj+kN0bVj8cRyo3xzEAms5dvSYqzE4V7yyVPZTRjo5hQ10KSYgTBic120pB8iaosRV3gd\/LfTQnMcunadQfDMFptVNwaRdsZ4uIZ7hDji4ZLptPbuFQoAZG6yw7qwCsYOoPfvQrE4VFg2ry3FaYBBV1Ogh17CpYeRo5xfhGIvXc4tBQebuo3OaSP8zOfMUOxPCHt5Sz2m1GiNmYHYTrt1jVWE442lvjlnPT5HT20JzvIqpDy5WGSYPDi66WghGcooy5QqwVkxuSQDJMmTyqY4\/F2sZeys6qju7JqVFpJI6p0jIkAiPeGtWOA3Ft4myWIHWHxkSezetb044k9i0gQCbjFTmAZSmUyCDvMjymtDhcnLO272NDjVGFGShTe3P37GP4Txuz7Y4i\/hx7RYJZGIBckKCbbNlze8Zke4dBWl4\/0ks38MottozgNmBUiFDQZ8VOlV+C9HrWLwWlsWGZ5DLmacmZZIdiQJZ4E6b0MxeEtWS1lZcJMMQCC5lnOXtkBR2DnprY4hKmqbXJ5x7FPhqmqmvGVHcgXTrDXKM3aNNvEEwPOr2G4peAUe1YrK7mRAIIjlyqrgb4w7G5bHVLmCVMZQAIads0g6x7p25E\/0K3cIv4f3MwN20NSmozMnaInT8jClFJJG5WuITk3Vjtjb0ZY6T4dctpoGYZVnnAW6PwX0oDR3pJfBSyAQZCnTtVHzfG4tApqHOxa4Uv8HuJFJTiaaKRpnRXGlppNIQldXE0lIchrCom01qVqgvHYdpG3qfz30kssE56IOTD3DcMoQbzudt96tG0nf6j51Ss4hgBq32h\/DT1untYnszz+FOOfbbeSVrNv8lfnUbWk\/MfOua+efxZp9Kiu3Ow6D9YmmiI7thD+f500cOHL7qS3fHM668iaf7fTRj9ifjNLcQy7gRHMeVRLwvXc\/Gpzc8fsDx7KTP4nyHypbi2K5wB5k\/vU25w8RufU1b9oOzz\/AOFpHfvUfa\/ho5YsA9cDHMetMfDidx61Pev\/AKy+r1QvYkg6OI8GpyywPCNHc6NWtNB2arNJ\/VS3Gmngv86MG6AT1ifWlW+Z0mmeJLuLR6E3RPo6iXlaAcgJ2I12HPvnypOP4vMzt2nTwGg+Ao1gH9nhnuc30H+kfifKsLxvGRpyrWgmqUU+b3+hx3Ha+amhdDP8UvSxoPnE1JjL8zVQmn4MCMSVnolwu1qzSRkRzI3BIyAjvBYHyobYXWtjgMEq8Pu3GXrXCApI+ipnq+Jj0pyi5ch6lolnsXeHYK1cs+0A669YySRE6yDoQrCD+oQdyKnP6NctsuQW3M6aWyGGkEMSimdDDzQfo7jzaaeR35x3x2Roe6Nyoo3xPhgb+2sjTTMsjTTQE7bbNsRA7DWVOGipiT26M6Wheyq0VUpLMlzX0M5bRUzBx182qxJcENoWnRQwXQEc94FHMNx2bYtYm0l9Rtm3Eba8zHPShN3BhvdGVwY0EHN2MOR237qXiGBu2cuYKwYSCpI01iRHd8RU05VKUloZu8LurS+jJVYvV1T7+gZx\/S5hZAsWltJl5MCyrIXRVHV359hoNPZ+fPs5zTcLh7l0FAF32kloM6BWgsozEwnM8zRmx0fdMrW7gLJE6FtBBAdTDgabQZ5iRNR1qik06j+\/6LdCurVSgksvl\/6QYm3fwxWHZQwEgaCdWE9zdYwdirDsq\/wZnuE3BltlZOdVCgwJbMAIKjQczLHfKRRK7aXEWShmVmPrZQ0FRI95WA35qhPvUPxePWzZFtIzabbSNVInXIJDa+8WHa1VvElL9yonGrFQUfO3zA\/FMQHusQmSOqVnTOPfKjlrA\/Y7qrE0ykNJs6e3oKlTUF0FJpc1RGuBoE+Caa402aQtSBgcRSRTS1NzUh2BTUd3gi3xne81sJMZQDMxznypHarGG90SfKe2ipuO6Kl9jw9D6gUcIYE5b1wDv0PmBU9jgl4+7iH9YrS2MMNyKsIijlTnc1O5j+DBdDNDo5ejW+ftGfWKY3Ru7\/iG8Cx+VadmHOqmDvlwSUKkMRrzgxI7qH4irzF4UDPL0evKTGIYeDH7oqQ8FvnfEt5x\/wA1pWBpuaPz99D8TU+0heFAy78DvcsS3x+c0n9D3xtiG+PzrTFvCq+LxYXSNY07KX4ip9pC8GP2wEvCb3+JefAH76luYPEkQcWxA\/UFTm+x+mR8Kaqk7ufiaPjVO\/yQPCj9so3OG3eeKf7I+dV\/6NuD\/wDoY98N86LjCAnQ6U79B7x8KeriS6\/JDXSiawKJ2FTWbUkAc9BUjYcHtFW+CYObyzsvWPlt8YplOGqaj3HVKijBy7FjpPiBbRbS\/QUepED4Sf2q8w4xfJJrS\/8AULiVxbwW1EgS0gGSdp56AD1rG4nOwllg921akq0db3OLveF3VSXiJZTBr70hFS+zpClSKSZlTpyp7SWCXCWySABJOgHaeVel9I7XscCtuPdS2nmYLfcayXRHhVvEOwuFgqge7EySd55aGtV0lxVrEZba3TaiZVlYq22WSk7ZeYqaDwmCNvOdNyXsZKxtRfhHFGtHQmOzs7Y5EfqnTsgmaqY7Bm0VUsrZhIKmQRMcwCKgXSoKkIzWJIioVKttUzHZmrz2bzoUEPI25CYED3gAxUxqu8TvUXFeH3cQ5a0BkTqgad22uxQWztzNZnE3PdXnM+GXWR2ax61PYxdwQFadgAQrnsAGcE1l1qWiWE\/id\/wanXuaP4mCUXl++Ooas9EcSyFoTeIkknvAMD48quWOGvb6t66dNQplmAHNVElR35ivaK2fD7BS2iHdVExAk8zA75qTE4dLilLiq6ncMAR6GtCXDtUFh4fUjrcRqVXipujz7F8ZW2w9gASO0yAdpOXq6jTKumimRligFxyxZiZZjJPaT91bviXQqy0m0xtnsPWX46j1rK8R6O4mzJNvMo+knWHmNx5iqVS0q0+nubvDatl\/0l5vXZ+3QGE0hNNz0tVzcFBpUFMmn8qAmIxptLFcaIRCaYTTjTGpBRJhLBdwvmfKjlrBKO+q\/R2zo7nn1R4c6JstNkZF5U1VcdiIgCmAVK1oxPjTCKYVBGAFNmnMJpseP58KIhC3ZURJPI1KVpoHdQEVrrKu5oRiXliaK4rDZ+cUNucPccpFOjgTKxmnWyJFc6kb6VynvnQ\/HSnjSRW\/M04XfGq+Y03OOyhpEehjE2zs6+oo5wYAW3uSOsYB7hv8furDJ0Yw4Oin93+GtR0gjC4H2S6dUWxt7z+997VdtlGLc+yKN020od2ZMsL157hI6zEjw2HwirjYO2wiR2Vnk6PW7oliR4Knyqaz0Msdp9E\/gqDTB7tlnfkkEn4HbIidPzzqs\/RdTs0Uz+p1gdv7n8Fd\/VGz2N\/7f8NBYi9mxk6UaixOKYY4Fwo2EfUEkz2GFGnxJoUbL+1JKkAaSQY076MYThi2cOVg5RI5T1jPIRUHCMFbJJUsD46yfCK0KdRpIyKnD6Tb07Y7AriQDXSPqIqj0zH\/AFVROhorc4PnvXLgvXBLHSAwIGg94TsKS9wU7q8nvEfGgriDfMxrrgdzqc4rK+YIVszE\/VAXz3P\/ANfStB0NwPtcSpI6tvrny934kHyoGuCuIOupBMkncSTO40r0PoBgMlg3SNbraf5F0HxzH0qKhHxrj0+h3WFYcKjTi98Y93z\/ALNRXUtJW6coJXUsV1LAQZxLgWHvavbGb6y9VvUb+c1lOJdB3Gti4GH1X6reTbH4VvYroqvVtadTmi7b8RuKG0JbdnujxzF4K7aMXbbIe8aHwOx8qjJr2S7bDAhgCDuCAQfEGs7xLobh7km3Npv1dV81P4RWfV4bJfkeTdt+PwltWjj1W6+v8nnlJRniXRTFWpIX2ijmmp8139JoI2mmxG451QnSlB4ksG5Rr06yzTkmKaiuNXMaamFe6ciNlJBhj9HTemJbkspaYuT6GnwOHZLaiDtJ8Tqal9qRy9azycBxo3xz\/nyp44Njf8a3w+VSOnH9Rzcqrk22jQrfHOuNxe2s8eB4zT\/vD5x\/DUL8Exf+K+P+yh4Uf1A1+hpsyzV3heA9qx+qNz9wHfWJPCcWNf0r4j\/869I6O2zaw1pWJZigZm7WYSSdBV\/h1jGtU3eUjO4leyoUvLs2VeL4G2CqKuViNDJjnv8AnnWfQmSCCCDB7uRBrR8TcNDa9Uisn0twGJN5Hw90qLogqAD117OoxkiPQ1pcU4ZB01UprDXMyuFcTn4jp1HlPlksMabmFZ+5gseph8TlPYyqD8bYqB7GNn\/zg+Sfw1zjt8PDkvn9DpVWyspGjulSCJqEIsctO4VnyMd\/ej0t\/Kos+NE9flr1U8Ozvoqh\/svv2E6vozQPhUPL0kVG2BTtYeYoD7fF6f2n7gj7qa2Ixf8AeD7I8eynKh\/shrqvseu8ItZ7qiDA6xmNl17aGdPcVmu27WpAlzEbnQfcfWtF0fswrv29UfefwrE4297XEXH3BYgeA0H3VNJ6LdL9TKsfPcN\/pRYwUAbH0Hzq8j9xqGxb0qzbNVMls4P3H0pwYdh9KUGnodR40U9xPkLxK8FQL2k\/ARUfD4VCxG0nY8hPMGrXGLJEAiRA8Nar37apZaFAJEcuZA\/Grz29ikt1+5Uwd0BRo3oflUvtx+t9lvlSgwsUyqKZfwPtvmYIuaWIA6rRqfCttYshFCjZQAPKs30aw+a6WOyD4nQfCa1UVs8Op4g59zHv6mZqHYZFcRT4pIrRKGTLdKukVyzdtYXDItzEXtQG91V11aCOxuegUmpuivHLl9r9m+ipew7BXyElGmYKzt7p08PChPHcNiMPxE41MM+IVrORQmpR4A1EEgaHX9Y0P4ni8Q92xYu5cI1y2cRi3snIxRM8S28gK2kmC43g1Mopoi1NM9FpIrznhHTO\/aw2Hzq197t51WZNxrKwJ0958xgduU+NabB9McKzJbd\/ZXWibbgyrHZGaMobbSdJjemODQ5VEw\/XUpFJTB400P4jwixf\/wDLbVj9bZh4MNaImkIoSipLDHwnKD1ReH6GF4l0EOpsXP2bn4OPxHnQ7hfCblhnN+3k2CkwQeZIOx5V6VXEcjVKpYU5bx2NSPGrjQ6c\/MvmYQ+z7R6\/zpGVOR\/e\/nWrxPBLTbDIf1dvTb0ig2M4JeTUdcfq6H7Pyms+rZ1Ib4yvQlp3lOfXD9QB\/WOxZJt3LQdd8wIJB7J3Aq49q3ctrctMRnXMFMGe0A9oIPpQDjOGknSCN539Kt9HTlsFWBYZnMcgAF58pM1o8PjTuf8ABUiuXPqjL4lKpa\/8inPruuaZFjb3UPXG3551s8Ld6qf5FA+yNqweLwguI2U5bo1ykEAjvn7x59tbTo9cnC2WZo\/s1mYEQoB3rRsLGdpOalyfJmbf8Qp3lOEodOaH8URzbAkCSN+yedSPbL2sqkjMNGGhnl4Tt51198M5Ga6hAMxmWJ5c6XH4+1kKo6kxpBBrWTbwjIeN3kCDhN9hlLZ1O5c7DuEUHxWGe2zDKSgYhW0giYGvbVngHTUNiLmEvjLdUsqN9G4u48Hyxpzgnuo0mFDIUZpUgg7azziqN\/ZQvI55SXX+mX7C7nZSwt4vpn5oyzIez4imZWg9U6x6b\/KrXEuCtZXNKum0gQRO0iqCopGw3rjq1CdGWmawzsqVeFaOqDyhfZ9x9D8qjZhzNE8NwV7i5lt9XtMKPKYmhmKtBGhlg76xqORHaKbKhNR1OLx3wOjXpuWlSWe2T1HiV\/2GDJ2OT959vvHpWN4Ygoz\/ANQMWxCWlOpJY+C6Dl2n4VkreDx30LtsDwH8NWLrDnpT2SK9sno1PqzVK1SBe\/Ws5aw3EP7236D+Cplw+P8A723+f2KqtY6lkPBO+rnDrIa4ATA1k1m0s4769v8AP7FaLoil\/wBqTeKkAQMvae3QdlPoR1VIr1I60nGm36BriPDi7E6QZrP8bT2aqhIBZtpJ2B5T3jlWwxC8q8\/6Y2n\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\/wDc48rZs2+drDaQg72GQH\/P416rcAIggEHcHUGhuP4LZvXrN9wS9gympy+a7HWDO+gqZVO5G4djBvbv\/pAwmFvmymBw5Nxx7puRmfMNjLEDXaGrX9DOMPi8Kl24AHllaNASp94DlP3zWYudEOIJ7e3bvWWTFNN26Qy3IkkiNQAcx0E78q0HDOE4jCtaS3dtfoiJDq6w4IDM1wMNOsxkzoBRnhoUcphXitnD3FFrEezZXOiuQJP6usz4a0Pbo8q3MRftMRev2zbUtBW2csLlAEgaJp+rWXbh1rEcaJQZlsgXLrElgzgDKByABKCB9U1DxHpdiw+JvJetJbw90W1sMAWu9YqTPvDYmR39lBRfJMTkupBhOj+JtHD27+H\/ALDC+1xDm2c\/tWHWA5dbqqoB5T5J0SW2\/EAwuFmuFsQt1GlihGtjELJCx8DG4Ij0E8YQXrNhgwe8huLtAyiSp1mY+6rWHwFpGZktIjN7zKqqW8SBrSc3jcSguhZUU6kApaiJCO9sfCvP7kQEnLzIETXoN4dU+FeeXODByc9zU8hoa0rDGHkyuJJ5jgna9atjWHY6Ab69\/ZUVt1s4gKYHtQNO8bT8R51NY4Mi+6NeWp5d340+5wwvda4QAMgVZmSRrmJI+6dqv6oma4y22CNt9waD4y7nJtqOrPWPaewU3HX7lqF+k23PzpeGpEl+WwGu\/M8hQisLI6UsvSZ\/jti0uK9i6x7VFuK0wCwlGTxACkeJqX+hUABS0G7zS9LMA2Iu2boDBLTdXT39iTPIZlUa8gaIW8UEUBpU6NrpptUcFLfPsGq4PDT3xuDxw8DR7YBOxED0qzwC2owqECNbn\/yuDU2GvtiL02x\/ZoIn6zRHpT8BY9nYg\/Qa8T\/61wj10oyj5k\/3\/r6CptKEl6r5Z+pcTbxqyFucgI7zFQJAgFhMbfefWa67icuhPKaEmPSAnDVIHKiyXD2UIw1jER7lv7f+2rK2sV\/dp9s\/w15w4s9G1IKpd8Klzd\/pQpUxPO0nk3+2prVvEEgC0Ptf7aGli1LuFcFhzcMSQB7x7B86MXryooHIaKOdMtKLaAdmpPaeZofccuZNb1pbKjHL5v7wY11cOrLC5IixLs51OnIcqatup1FK9szIq2VSODyFcVPjU+1RuTRExi3KVUHKuFIQKICRiRUObXWmByDTrlvWhkOCS9YS4uVlBHxHeDyNALZuYG9IJa23vD6y\/WA5MOcfjWiw4POn47Ai7bK891Pf8jtUc1ndcwp4DmDxSsqsplWEg+NTl6xPRHHG3cbDNsZa3PIj3k\/HyNa7PUtOWpDZLBPmqLFWVuI1txmVwVYHYgiCDFNz12an4AAeGdEreGuO+Gu3LYdGXJIZQ0HK2uvVJJAJO9Z+z0UxWIvWv0qzaUW2zXrylS+IgyohQI0gGQO3eK34amYm3nRkzMuYEZlIDCeakjQ05SYxwRmcHd\/SuLNcTW1hLZtzyNxpBA9WH7PfWyoZwjh9jCWhat9VRqSdWZubMeZq\/bvq2xBoyi3y5AUknhvclmlpoalmmYH5ObavOcVnW4xgGCfdBJGvxr0asjxdlts4ElmOwEkD+dXrGWG0Z3EY5imDsHxQbGfEgr9+tHbOIUjRhQO3bJIzBddpifOq2Nwxg5coPYGLHzCg1elBNmbGTiu5F0n4jaRgDcBadQplh499VcPxuCEs2czNrLsIHecsz6iqacM9n1mUyT\/dg\/6rgPwq3w\/HqkkWXd2PvZFWfMudPDSn4SWCJSblnkFcZxYYVA94+0vMOqoHUHcBsB371mFwd3F3Ve456wnLGUBQdl7qfxnEM11WdYMajMCQDsJiPhRPBYbTMBE8gdD4iACfKmqKW4nNyeDTcKwaWUCjSs5jMeQGsuBm9o5hSD1TcZl28R6VPcvhQcxKgDXKxj7BlazsyxNpLmUGSxgb7aQKEY75Y6c\/LhBqziAXkb8wTrQzpLiWF1Y+oP8AU1Xej2DN5ix91dAfv1qtxYl79wqBlBCj9lQPvmszjFd0aKxzyanBaPjVd+WDUWV05+YqVU8PQ\/Ko7T\/rj92plf8AWHwrijtSSe4fGiXD8MQM5GpnL4dtXOG8NCgO+rETHIeXM1ZumJPZWta2bTU5\/Azbi6TTjH4gPiLahezeq69lIHLE+NSqlaWChkXWnZq5bgG9ShxSwLJXY6U2KsFQa4WaOAFVhVS\/3USynaKkGCWlgIKtK1XTZJirq21TfeluxAjekoiyRWrUb1ct26S2tW0s0sAMX0swZtXFvJoSQw\/zrv6itPw3FC9aW4o94bdjbEeulN6R4L2lgwJK9YeW\/wAKEdC7hHtbZBgdcd06EfdUS8lTHcfziHM1Jnpb666c\/wA6CqvtKtcyMth6dnqqtynZqWBGQ4zxfEHEXEQowUwEY5WiNx9YVTt8QxhdSyZADyOnwor0i4SrnNlBPx9e2scOK3LRyp7Q79W4oI0MGDmkVsW84VIYS3MC6pzpzbk9n1NxZ6YZGy3VaPrRPrG3p51qcFj0uqGRgwPZXlifpF4ZxbVQZUyxJE7mjXDsNdsAezkkR2CfGabVtISWVsx1C9qReJbo9EDVjOkOGJus6kTIEGYOg0I\/Gj2A4iHEHR41X5dooTx24IaBqxgkchzPjG1QW0HCpuWrycalNNA\/APmYsSonQdmmnVnl30TzLGmw27\/CqWFebYOURMAGdteUxsBU1y6EUbkmdhoNNNqty5lCGyBmI4iMxUxp2\/SPMju5DuFRYziFu0uZjLH3UG5P4ChXE3zSAQYPdIPLbSo+DcIZ7he5oqbbamnOKSIVOTeAbfxLvdOa2M7EARJjuHf30auJ7NZJYnvNQoma65Bhc+\/PYUcscEUspZ2y7wddaLaQ2MXLOAQlh2UswIWCSYgR3Ue4XworZVQBLQzTEAnWDzMbfKiWJw6hddUUEkdoGw+71qxbtqADGpGsafdUMqmxYhRw9yniSti0ddYOgESe4DYV5O+Ge4zPmvDMxMK5A1PIVvOmeJi2VHn+HidayOHsjL7p+HzrB4xUa0RX7nQcFhvOfbb6m+tz2fn0qQE\/V+P8q6urlzpjUcHx\/tEynRl07ZHI1Jj3hGPdXV1dDZ1HOinIxLmChUaQBtVZUV1dVorktu2DTvYCurqOACGxSZCK6upCJVgCSPCojaYmZ8uyurqIhUs\/886nTD11dSEW7aCKntCNDXV1BiJMlILIAMDeurqAQBx0kW1ZeTCT48yajvnUH6wB8+f576Sup0eYDlepValrqkYhGUGgnFuBIx9oB1gCI7j\/AMV1dRhJxeUMqU4zjpktiLhigKQN11y9g5\/OrgvFZJHKYGv5NJXVq05a1lmHUgoS0oHY3EyQ1wi0g2E9d9RvGw7u+qnEeLOUuFdYCsCd9CAdKWuqzBLmVZTeXEJ4Rstm2znbrMdtYNBuL8TcgtMD3UnlO7QfhXV1MS8wakmo7Ga9sQdN9lH41rMLbNrDkE7Alj3nX766upT3eBlJYTZQ4OGLNlTNqCN+YG9avC2m0BKzzrq6o6r3J6C8p3EnUKFNzKGImewch4n7qnwt0OJUkqOfypK6mSXkyPjP\/JgwfTPEksqCdzIG51kfnvobh7TZdn9f511dXLcZm\/xGOyR1HBYr8Pnu3\/J\/\/9k=',width=400,height=400)","9af5adcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eadd0ade":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRKObcN_9ImUTwdxhDJEAHdW1QeclQBibgav_8TuQ3gc378bmEI',width=400,height=400)","76dcab89":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/covidportugal\/Corona(2103).csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'Corona(2103).csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","ae437724":"df = df.rename(columns={'Aum.':'aum', 'Porc.': 'percentage'})","659b36c8":"#df.head(n=5)\ndf.style.background_gradient(subset=['Day'], cmap='Greens', axis=None)\\\n        .background_gradient(subset=['aum'], cmap='Reds', axis=None)","98fbe6f0":"df[\"aum\"].plot.hist()\nplt.show()","37762cbf":"df[\"Day\"].plot.hist()\nplt.show()","7cd647b8":"sns.pairplot(df, x_vars=['Day'], y_vars='aum', markers=\"+\", size=4)\nplt.show()","a457a996":"fig, axes = plt.subplots(1, 1, figsize=(14, 6))\nsns.boxplot(x='Day', y='aum', data=df, showfliers=False);","b2dea655":"fig = px.pie( values=df.groupby(['aum']).size().values,names=df.groupby(['aum']).size().index)\nfig.update_layout(\n    title = \"Increase\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)","72283739":"cnt_srs = df['aum'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Reds',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Increase',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"aum\")","293f0946":"fig = px.histogram(df[df.aum.notna()],x=\"aum\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"Increase\",\n    xaxis_title=\"Action\",\n    yaxis_title=\"Number of Days\",\n    barmode=\"group\",\n    bargap=0.1,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )\npy.iplot(fig)","9971ecd7":"import matplotlib.style\n\nimport matplotlib as mpl\n\nmpl.style.use('classic')","fc235c1f":"fig=sns.jointplot(x='Day',y='aum',kind='hex',data=df)","8c881635":"sns.jointplot(df['Day'],df['aum'],data=df,kind='kde',space=0,color='g')","c9a3eb28":"fig=sns.lmplot(x=\"Day\", y=\"aum\",data=df)\n","8dc1d9b1":"sns.barplot(x=df['aum'].value_counts().index,y=df['aum'].value_counts())\nplt.style.use('ggplot')","fa93c870":"for col in df.columns:\n    plt.figure(figsize=(19,10))\n    sns.barplot(x=col,y='aum',data=df)\n    plt.tight_layout()\n    plt.show()","d31e38bc":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='aum',data=df)\n    plt.tight_layout()\n    plt.show()","71d98bad":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.lineplot(x=col,y='aum',data=df)\n    plt.tight_layout()\n    plt.xlabel(col)\n    plt.ylabel('aum')\n    plt.show()","0612e412":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.barplot(x=col,y='aum',data=df)\n    sns.pointplot(x=col,y='aum',data=df,color='Black')\n    plt.tight_layout()\n    plt.show()","58389efa":"plt.style.use('dark_background')\ndf.corr()\nplt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=True,cmap='RdYlGn_r')\nplt.show()","8365837e":"sns.pairplot(df)\nplt.show()","30d19707":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTv0H7fbRz7qfe0feC_i1ebMw_JGES6DwgOCe4DasU5XI63vyCV',width=400,height=400)","51fc2d65":"The Minister of Health announced this morning that the` peak of covid-19 in Portugal will be reached on APRIL 14`, according to the number of confirmed cases so far and the estimates of the epidemiological curve.\n\nIn a press conference, Marta Temido also announced the implementation of a \u201cnew model\u201d for case management starting next Thursday. The new model aims to reinforce the possibility of patients being followed at home.\n\nThe minister appealed to young people and children, recalling yesterday's words from the president of the World Health Organization, that \u201cno one is immune to the disease. We all have to be careful \u201d.\n\nThe director-general of Health, Gra\u00e7a Freitas, in turn, underlined the work of strengthening the response capacity of health services, and the early detection of positive cases, with \u201cabout 80% being treated at home because they have criteria for that.\n\nMarta Temido also said that the strategic reserve has two million type 2 masks, and a set of deliveries are planned for the next few days.\nhttps:\/\/www.dinheirovivo.pt\/economia\/governo-preve-pico-da-covid-19-em-portugal-para-14-de-abril\/","7e7dc50a":"recordeuropa.com","da1341ff":"dnoticias.pt","fc33c54c":"shutterstock.puzzlepix.hu","def53925":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke"}}