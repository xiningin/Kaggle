{"cell_type":{"ab6e51b4":"code","4baf3a1b":"code","e8aef0c1":"code","b379df68":"code","584d13f9":"code","bf294e2d":"code","eb39502a":"code","54b0f199":"code","aa85373a":"code","344e7445":"code","ff591ce1":"code","2899f231":"code","1cfdb512":"code","97725760":"code","d0b4ee12":"code","4e0d6929":"code","f69aa467":"code","2121ca77":"code","83f0f4ba":"code","38473734":"code","9d82948e":"code","755fd517":"code","3d34b175":"code","bbe0e0f8":"code","f0097f3c":"code","07ca2b6e":"code","70b226a4":"code","b753da9e":"code","5a2b11f5":"code","ff19c8a7":"code","04a33b0c":"code","7c7a090c":"code","0cfa3ef9":"code","1069c061":"code","33606919":"code","c94d9485":"code","51c9d172":"code","208ea3e2":"markdown","8917122b":"markdown","ffae3efb":"markdown","761c062f":"markdown","765d1a1b":"markdown","c7fd0a97":"markdown","12667c90":"markdown","a1737c88":"markdown","f0dbf0f6":"markdown","559091c2":"markdown","2f6f62d7":"markdown","302a8763":"markdown"},"source":{"ab6e51b4":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","4baf3a1b":"train = np.loadtxt('..\/input\/train.csv', delimiter=',', skiprows=1)\n# test = np.loadtxt('.\/data\/digit\/test.csv', delimiter=',', skiprows=1)","e8aef0c1":"# \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\ntrain_label = train[:, 0]\n# \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043a \u0443\u0434\u043e\u0431\u043d\u043e\u043c\u0443 \u0434\u043b\u044f \u043e\u0431\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0438\u0434\u0443\ntrain_img = np.resize(train[:, 1:], (train.shape[0], 28, 28))\n# test_img = np.resize(test, (test.shape[0], 28, 28))","b379df68":"train_img.shape","584d13f9":"fig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(train_img[0:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % train_label[i - 1]);","bf294e2d":"train_sobel_x = np.zeros_like(train_img)\ntrain_sobel_y = np.zeros_like(train_img)\nfor i in range(len(train_img)):\n    train_sobel_x[i] = cv2.Sobel(train_img[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n    train_sobel_y[i] = cv2.Sobel(train_img[i], cv2.CV_64F, dx=0, dy=1, ksize=3)","eb39502a":"# test_sobel_x = np.zeros_like(test_img)\n# test_sobel_y = np.zeros_like(test_img)\n# for i in range(len(test_img)):\n#     test_sobel_x[i] = cv2.Sobel(test_img[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n#     test_sobel_y[i] = cv2.Sobel(test_img[i], cv2.CV_64F, dx=0, dy=1, ksize=3)","54b0f199":"train_g, train_theta = cv2.cartToPolar(train_sobel_x, train_sobel_y)","aa85373a":"# test_g, test_theta = cv2.cartToPolar(test_sobel_x, test_sobel_y)","344e7445":"fig = plt.figure(figsize=(20, 10))\nfor i, img in enumerate(train_g[:5], 1):\n    subplot = fig.add_subplot(1, 7, i)\n    plt.imshow(img, cmap='gray');\n    subplot.set_title('%s' % train_label[i - 1]);\n    subplot = fig.add_subplot(3, 7, i)\n    plt.hist(train_theta[i - 1].flatten(),\n             bins=16, weights=train_g[i - 1].flatten())","ff591ce1":"# \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0434\u043b\u0438\u043d\u044b \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430\ntrain_hist = np.zeros((len(train_img), 16))\nfor i in range(len(train_img)):\n    hist, borders = np.histogram(train_theta[i],\n                                 bins=16,\n                                 range=(0., 2. * np.pi),\n                                 weights=train_g[i])\n    train_hist[i] = hist","2899f231":"# test_hist = np.zeros((len(test_img), 16))\n# for i in range(len(test_img)):\n#     hist, borders = np.histogram(test_theta[i],\n#                                  bins=16,\n#                                  range=(0., 2. * np.pi),\n#                                  weights=test_g[i])\n#     test_hist[i] = hist","1cfdb512":"# \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f L2 \u043d\u043e\u0440\u043c\u0430\ntrain_hist = train_hist \/ np.linalg.norm(train_hist, axis=1)[:, None]","97725760":"# test_hist = test_hist \/ np.linalg.norm(test_hist, axis=1)[:, None]","d0b4ee12":"train_hist.shape","4e0d6929":"train.shape#, test.shape","f69aa467":"data_for_svd = train[:, 1:]\ndata_for_svd.shape","2121ca77":"data_mean = np.mean(data_for_svd, axis=0)\ndata_for_svd -= data_mean","83f0f4ba":"cov_matrix = np.dot(data_for_svd.T, data_for_svd) \/ data_for_svd.shape[0]","38473734":"U, S, _ = np.linalg.svd(cov_matrix)","9d82948e":"S_thr = 0.83\nS_cumsum = 0\nfor i in range(S.shape[0]):\n    S_cumsum += S[i]\/np.sum(S)\n    if S_cumsum >= S_thr:\n        n_comp = i+1\n        print ('n_comp:', n_comp, '\\t', 'cumsum:', S_cumsum)\n        break","755fd517":"data_reduced = np.dot(data_for_svd, U[:, :n_comp])\ndata_reduced.shape","3d34b175":"train_data_svd = data_reduced[:42000]\ntest_data_svd = data_reduced[42000:]\ntrain_data_svd.shape, test_data_svd.shape","bbe0e0f8":"train_data = np.hstack((train_hist, train_data_svd))\n# test_data = np.hstack((test_hist, test_data_svd))\ntrain_data.shape#, test_data.shape","f0097f3c":"(h, w) = train_img.shape[1:]\n(cX, cY) = (int(w * 0.5), int(h * 0.5))\n        \nsegments = [(0, w, 0, cY), \n            (0, w, cY, h),\n            (0, cX, 0, h),\n            (cX, w, 0, h)]","07ca2b6e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043b\u0438\u0441\u044c \u0441\u0438\u0433\u043c\u0435\u043d\u0442\u044b\nfig = plt.figure(figsize=(16, 4))\nfor num, i in enumerate(segments, 1):\n    subplot = fig.add_subplot(1, 4, num)\n    plt.imshow(train_img[1, i[0]:i[1], i[2]:i[3]], cmap='gray')","70b226a4":"for i in segments:\n    train_img_s = train_img[:, i[0]:i[1], i[2]:i[3]]\n#     test_img_s = test_img[:, i[0]:i[1], i[2]:i[3]]\n    train_sobel_x = np.zeros_like(train_img_s)\n    train_sobel_y = np.zeros_like(train_img_s)\n    for i in range(len(train_img_s)):\n        train_sobel_x[i] = cv2.Sobel(train_img_s[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n        train_sobel_y[i] = cv2.Sobel(train_img_s[i], cv2.CV_64F, dx=0, dy=1, ksize=3)\n#     test_sobel_x = np.zeros_like(test_img_s)\n#     test_sobel_y = np.zeros_like(test_img_s)\n#     for i in range(len(test_img_s)):\n#         test_sobel_x[i] = cv2.Sobel(test_img_s[i], cv2.CV_64F, dx=1, dy=0, ksize=3)\n#         test_sobel_y[i] = cv2.Sobel(test_img_s[i], cv2.CV_64F, dx=0, dy=1, ksize=3)\n\n    train_g, train_theta = cv2.cartToPolar(train_sobel_x, train_sobel_y)\n#     test_g, test_theta = cv2.cartToPolar(test_sobel_x, test_sobel_y)\n\n\n    train_hist = np.zeros((len(train_img_s), 16))\n    for i in range(len(train_img_s)):\n        hist, borders = np.histogram(train_theta[i],\n                                     bins=16,\n                                     range=(0., 2. * np.pi),\n                                     weights=train_g[i])\n        train_hist[i] = hist\n\n#     test_hist = np.zeros((len(test_img_s), 16))\n#     for i in range(len(test_img_s)):\n#         hist, borders = np.histogram(test_theta[i],\n#                                      bins=16,\n#                                      range=(0., 2. * np.pi),\n#                                      weights=test_g[i])\n#         test_hist[i] = hist\n\n    train_hist_part = train_hist \/ np.linalg.norm(train_hist, axis=1)[:, None]\n#     test_hist_part = test_hist \/ np.linalg.norm(test_hist, axis=1)[:, None]\n\n    train_data = np.hstack((train_data, train_hist_part))\n#     test_data = np.hstack((test_data, test_hist_part))","b753da9e":"train_data.shape#, test_data.shape","5a2b11f5":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split","ff19c8a7":"X_train, X_val, y_train, y_val = train_test_split(train_data, train_label, test_size=0.2)","04a33b0c":"X_train.shape, X_val.shape, y_train.shape, y_val.shape","7c7a090c":"xgb = XGBClassifier(colsample_bytree=1, gamma=0, max_depth=5, reg_alpha=0.6, reg_lambda=0.1, \n                    subsample=0.9, n_jobs=-1, n_estimators=500, learning_rate=0.05)","0cfa3ef9":"xgb.fit(X_train, y_train)","1069c061":"y_pred = xgb.predict(X_val)","33606919":"from sklearn.metrics import accuracy_score\nprint('Accuracy: %s' % accuracy_score(y_val, y_pred))","c94d9485":"from sklearn.metrics import classification_report\nprint(classification_report(y_val, y_pred))","51c9d172":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_val, y_pred))","208ea3e2":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u043e 52 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445 \u043a \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u0438 \u0441\u043d\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 train \u0438 test","8917122b":"## \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c X \u0438 Y \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0421\u043e\u0431\u0435\u043b\u044f","ffae3efb":"## \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","761c062f":"## \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e","765d1a1b":"### \u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u043b\u043e\u0436\u0438\u043c \u043d\u0430\u0448\u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e SVD \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0438\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","c7fd0a97":"## \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","12667c90":"\u0417\u0430\u043a\u043e\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432\u0441\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441 \u0442\u0435\u0441\u0442\u043e\u043c \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0447\u0435\u0442\u0430","a1737c88":"### \u0421\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 6 \u0438 9, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043c\u0435\u0436\u0434\u0443 3 \u0438 8. \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0430\u0440\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 \u043d\u0430 \u0434\u0432\u0435 \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438, \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0430\u0440\u044b - \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438. \u041d\u0430\u0439\u0434\u0435\u043c \u0438\u0445 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.","f0dbf0f6":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0430\u0447\u0435\u0439, \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445 \u0438\u043b\u0438 \u043d\u0430 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f ","559091c2":"## \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b","2f6f62d7":"## \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u0432","302a8763":"## \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0443\u0433\u043e\u043b \u0438 \u0434\u043b\u0438\u043d\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430"}}