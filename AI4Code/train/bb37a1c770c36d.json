{"cell_type":{"b82a6663":"code","15d820db":"code","caf10983":"code","085698ca":"code","ca9e8838":"code","10e42ccc":"code","dcb38c6f":"code","809bd858":"code","14e45014":"code","1e20a55a":"code","310d8cc9":"markdown","7f9cbf98":"markdown","eb6d9220":"markdown","8616a2e1":"markdown","236e57fb":"markdown","62afb164":"markdown","98b6f779":"markdown","211a2794":"markdown","8b2b1b87":"markdown","16c3f94b":"markdown"},"source":{"b82a6663":"%matplotlib notebook\n\n# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import Math\n\nimport os\nos.listdir('\/kaggle\/input')\nos.listdir('..\/input\/')","15d820db":"# Load data\ncrime_raw_df = pd.read_csv('..\/input\/MPS Borough Level Crime.csv')\nhouse_price_raw_df = pd.read_excel('..\/input\/UK House price index.xls', sheet_name='Average price')\npop_raw_df = pd.read_excel('..\/input\/london_borough_population.xlsx', header=1)","caf10983":"def format_crime_data(df):\n    \"\"\"\n    Crime Data: Performs clean up and aggregate steps on\n    Returns a series\n    \n    \"\"\"\n    # Keep only the required columns\n    keep_columns = [\n        'Borough',\n        '201701', '201702', '201703', '201704', '201705', '201706',\n        '201707', '201708', '201709', '201710', '201711', '201712',\n    ]\n    df = df[keep_columns]\n\n    # Set borough as the index\n    df = df.set_index('Borough')\n\n    # Drop Heathrow borough rows\n    df = df.drop('London Heathrow and London City Airports', axis=0) \n\n    # Get the total crimes of 2017\n    df = df.sum(axis=1)\n\n    # Group all crime categories and find sum\n    df = df.groupby('Borough').agg('sum')\n    \n    df.name = 'Total Crime'\n    \n    return df\n    \ncrime_df = format_crime_data(crime_raw_df)","085698ca":"def format_house_price_data(df):\n    \"\"\"\n    House Price data: Performs clean up and aggregate steps on\n    Returns a series\n    \n    \"\"\"\n    # Get rows for 2017\n    df = df.loc['2017-01-01': '2017-12-01']\n    \n    # Keep the required rows and columns\n    columns = [\n        'Barking & Dagenham', 'Barnet', 'Bexley', 'Brent',\n        'Bromley', 'Camden', 'Croydon', 'Ealing', 'Enfield', 'Greenwich',\n        'Hackney', 'Hammersmith & Fulham', 'Haringey', 'Harrow', 'Havering',\n        'Hillingdon', 'Hounslow', 'Islington', 'Kensington & Chelsea',\n        'Kingston upon Thames', 'Lambeth', 'Lewisham', 'Merton', 'Newham',\n        'Redbridge', 'Richmond upon Thames', 'Southwark', 'Sutton',\n        'Tower Hamlets', 'Waltham Forest', 'Wandsworth', 'Westminster'\n    ]\n    df = df[columns]\n    \n    df.columns = map(lambda x: x.replace('&', 'and'), df.columns)\n    \n    # Get borough names as index\n    df = df.T    \n    \n    # Get the mean house price for 2017\n    df = df.mean(axis=1)\n    \n    # Convert float to int\n    df = df.astype('int')\n    \n    df.name = 'Average House Price'\n\n    return df\n    \nhouse_price_df = format_house_price_data(house_price_raw_df)","ca9e8838":"def format_population_data(df):\n    \"\"\"\n    Population data: Performs clean up and aggregate steps on \n    Returns a series\n    \n    \"\"\"\n    # 'City of Westminster' is called 'Westminster' in other tables\n    df['Borough'] = df['Borough'].replace('City of Westminster', 'Westminster')\n    df = df.set_index('Borough')\n    return df\n\npop_df = format_population_data(pop_raw_df)","10e42ccc":"final_df = pd.concat([house_price_df, crime_df, pop_df], axis=1, sort=True)\nfinal_df.head()","dcb38c6f":"# Get Crime per 1000 residents (rounded to whole number)\nfinal_df['Crime Rate'] = round( (final_df['Total Crime']\/final_df['Population']) * 1000 , 0)\nfinal_df['Crime Rate'] = final_df['Crime Rate'].astype('int')\nfinal_df.head()","809bd858":"def add_colour(df):\n    colours = [\n        '#5DFF29', # Green\n        '#FF9B51', # Orange\n        '#FF3F3F', # Red\n    ]\n    h_avg = df['Average House Price'].mean()\n    c_avg = df['Crime Rate'].mean()\n    \n    # Fill Colours column with correct colours\n    df.loc[(df['Average House Price'] <= h_avg) & (df['Crime Rate'] <= c_avg), 'Colours'] = colours[0]\n    df.loc[(df['Average House Price'] < h_avg) & (df['Crime Rate'] > c_avg), 'Colours'] = colours[1]\n    df.loc[(df['Average House Price'] > h_avg) & (df['Crime Rate'] < c_avg), 'Colours'] = colours[1]\n    df.loc[(df['Average House Price'] > h_avg) & (df['Crime Rate'] > c_avg), 'Colours'] = colours[2]\n\n    return df\n\nfinal_df = add_colour(final_df)\nfinal_df.head()","14e45014":"# Returns an array of mean value with same shape as input\navg = lambda series: np.full(series.shape[0], int(series.mean()))\n\n# Mean House Price array\nhouse_price_avg = avg(final_df['Average House Price'])\n\n# Mean Crime Rate array\ncrime_rate_avg = avg(final_df['Crime Rate'])\nhouse_price_avg","1e20a55a":"plt.figure()\n# plt.axis('off')\n\nplt.scatter(final_df['Average House Price'], final_df['Crime Rate'], color=final_df['Colours'], picker=10)\n\n# Draw mean lines for house price and crime Rate\nplt.plot(final_df['Average House Price'], crime_rate_avg, color='grey')\nplt.plot(house_price_avg, final_df['Crime Rate'], color='grey', label='HEYY')\n\n# Label House Price mean line\nh_text = 'Mean House Price London (\u00a3529k)'\nplt.text(9.5*10**5, 87, h_text, fontsize='x-small')\n\n# Label Crime mean line\nv_text = 'Mean Crime Rate London ({})'.format(crime_rate_avg[0])\nplt.text(495000, 230, v_text, fontsize='x-small', rotation='vertical')\n\ntitle = 'Click on the point to see Borough name'\nplt.gca().set_title(title, fontsize='medium')\n\nplt.xlabel('Average House Price', fontsize='small')\nplt.ylabel('Crime Rate (per 1000 population)', fontsize='small')\n\n# Remove top and right border\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\n\n# Label the x-axis with easy to read values\ntick_label_list = ['', '400K', '600K', '800K', '1M', '1.2M', '']\nplt.gca().set_xticklabels(tick_label_list)\n\ndef onpick(event):\n    borough = final_df.iloc[event.ind[0]].name\n    price = final_df.iloc[event.ind[0]]['Average House Price']\n    crime = final_df.iloc[event.ind[0]]['Crime Rate']\n    plt.gca().set_title(\n        'Borough: {}\\nAverage House Price: \u00a3{:,}\\nCrime Rate: {}'.format(borough, price, crime),\n        fontsize='small',\n    )\n\n# tell mpl_connect we want to pass a 'pick_event' into onpick when the event is detected\nplt.gcf().canvas.mpl_connect('pick_event', onpick);\nplt.savefig('HousePrice_CrimeRate_by_London_Borough.png')","310d8cc9":"### Format Population data","7f9cbf98":"### Add Colour column","eb6d9220":"###\u00a0Get Crime Rate","8616a2e1":"### Import Libraries and Load Data","236e57fb":"## House Price and Crime Rate comparison of London Boroughs (2017)","62afb164":"### Format House Price Data","98b6f779":"### Format Crime Data","211a2794":"### Data Sources\n\n##### London Crime data by borough from Sept 2016 - Aug 2018\nhttps:\/\/data.london.gov.uk\/dataset\/recorded_crime_summary\n\n\n##### London House Prices data by borough from Jan 2016 - July 2018\nhttps:\/\/data.london.gov.uk\/dataset\/uk-house-price-index\n\n\n##### Population of London boroughs (Estimate Jun 2017)\nhttps:\/\/www.citypopulation.de\/php\/uk-greaterlondon.php","8b2b1b87":"### Merge Crime, House Price and Population data into one table","16c3f94b":"### Get arrays for plotting"}}