{"cell_type":{"5962e5a9":"code","ff9490a4":"code","03a81006":"code","5ce75ad2":"code","b135d7e4":"code","2b94fd84":"code","2e322ee4":"code","74c35858":"code","e47447af":"code","ca9e01ac":"code","e53014d7":"code","f6338cb2":"code","85565626":"code","b9c29efe":"code","b9966034":"code","6ee769f2":"code","1ea70c43":"code","3e5b5157":"code","39ba7a6a":"code","b2746afa":"code","212059b6":"code","d6cd6c0b":"code","92638bb1":"code","9d982940":"code","a516b035":"code","4c8b9a36":"markdown","a4d6995c":"markdown","9df43835":"markdown","ff3f5266":"markdown","2d51771c":"markdown","6cd2f986":"markdown","e6b4d539":"markdown","cdce993a":"markdown","4dbdda87":"markdown","c50f6bce":"markdown","307a96d5":"markdown","803e041a":"markdown"},"source":{"5962e5a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ff9490a4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import ReduceLROnPlateau","03a81006":"train_df = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntest_df = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")","5ce75ad2":"test = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")\ny = test['label']","b135d7e4":"train_df.head()","2b94fd84":"plt.figure(figsize = (10,10)) # Label Count\nsns.set_style(\"darkgrid\")\nsns.countplot(train_df['label'])","2e322ee4":"y_train = train_df['label']\ny_test = test_df['label']\ndel train_df['label']\ndel test_df['label']","74c35858":"from sklearn.preprocessing import LabelBinarizer\nlabel_binarizer = LabelBinarizer()\ny_train = label_binarizer.fit_transform(y_train)\ny_test = label_binarizer.fit_transform(y_test)","e47447af":"x_train = train_df.values\nx_test = test_df.values","ca9e01ac":"# Normalize the data\nx_train = x_train \/ 255\nx_test = x_test \/ 255","e53014d7":"# Reshaping the data from 1-D to 3-D as required through input by CNN's\nx_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)","f6338cb2":"f, ax = plt.subplots(2,5) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(x_train[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()    ","85565626":"# With data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","b9c29efe":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.00001)","b9966034":"model = Sequential()\nmodel.add(Conv2D(75 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(50 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Conv2D(25 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D((2,2) , strides = 2 , padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(units = 512 , activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units = 24 , activation = 'softmax'))\nmodel.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","6ee769f2":"history = model.fit(datagen.flow(x_train,y_train, batch_size = 128) ,epochs = 20 , validation_data = (x_test, y_test) , callbacks = [learning_rate_reduction])","1ea70c43":"print(\"Accuracy of the model is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")","3e5b5157":"epochs = [i for i in range(20)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(16,9)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Validation Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Testing Loss')\nax[1].set_title('Testing Accuracy & Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","39ba7a6a":"predictions = model.predict_classes(x_test)\nfor i in range(len(predictions)):\n    if(predictions[i] >= 9):\n        predictions[i] += 1\npredictions[:5]        ","b2746afa":"classes = [\"Class \" + str(i) for i in range(25) if i != 9]\nprint(classification_report(y, predictions, target_names = classes))","212059b6":"cm = confusion_matrix(y,predictions)","d6cd6c0b":"cm = pd.DataFrame(cm , index = [i for i in range(25) if i != 9] , columns = [i for i in range(25) if i != 9])","92638bb1":"plt.figure(figsize = (15,15))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')","9d982940":"correct = np.nonzero(predictions == y)[0]","a516b035":"i = 0\nfor c in correct[:6]:\n    plt.subplot(3,2,i+1)\n    plt.imshow(x_test[c].reshape(28,28), cmap=\"gray\", interpolation='none')\n    plt.title(\"Predicted Class {},Actual Class {}\".format(predictions[c], y[c]))\n    plt.tight_layout()\n    i += 1","4c8b9a36":"**Some of the Correctly Predicted Classes**","a4d6995c":"**We perform a grayscale normalization to reduce the effect of illumination's differences.Moreover the CNN converges faster on [0..1] data than on [0..255].**","9df43835":"# Data Visualization and Preprocessing","ff3f5266":"# Training The Model","2d51771c":"# Description of the Sign-Language MNIST Problem (American Sign Language)\nAmerican Sign Language (ASL) is a complete, natural language that has the same linguistic properties as spoken languages, with grammar that differs from English. ASL is expressed by movements of the hands and face. It is the primary language of many North Americans who are deaf and hard of hearing, and is used by many hearing people as well.\nThe dataset format is patterned to match closely with the classic MNIST. Each training and test case represents a label (0-25) as a one-to-one map for each alphabetic letter A-Z (and no cases for 9=J or 25=Z because of gesture motions). The training data (27,455 cases) and test data (7172 cases) are approximately half the size of the standard MNIST but otherwise similar with a header row of label, pixel1,pixel2\u2026.pixel784 which represent a single 28x28 pixel image with grayscale values between 0-255. The original hand gesture image data represented multiple users repeating the gesture against different backgrounds. The Sign Language MNIST data came from greatly extending the small number (1704) of the color images included as not cropped around the hand region of interest. To create new data, an image pipeline was used based on ImageMagick and included cropping to hands-only, gray-scaling, resizing, and then creating at least 50+ variations to enlarge the quantity.\n![image.png](attachment:image.png)","6cd2f986":"**The dataset seems balanced as for each training label , enough training examples exist**","e6b4d539":"# Data Augmentation\nIn order to avoid overfitting problem, we need to expand artificially our dataset. We can make your existing dataset even larger. The idea is to alter the training data with small transformations to reproduce the variations.\n\nApproaches that alter the training data in ways that change the array representation while keeping the label the same are known as data augmentation techniques. Some popular augmentations people use are grayscales, horizontal flips, vertical flips, random crops, color jitters, translations, rotations, and much more.\n\nBy applying just a couple of these transformations to our training data, we can easily double or triple the number of training examples and create a very robust model.","cdce993a":"**Preview of first 10 images**","4dbdda87":"# Analysis after Model Training","c50f6bce":"For the data augmentation, i choosed to :\n\nRandomly rotate some training images by 10 degrees\nRandomly Zoom by 10% some training images\nRandomly shift images horizontally by 10% of the width\nRandomly shift images vertically by 10% of the height\nI did not apply a vertical_flip nor horizontal_flip since it could have lead to misclassify.\n\nOnce our model is ready, we fit the training dataset .","307a96d5":"# Loading the ASL dataset","803e041a":"# CONVOLUTIONAL NEURAL NETWORKS TO THE RESCUE\n**A Convolutional Neural Network is a special type of an Artificial Intelligence implementation which uses a special mathematical matrix manipulation called the convolution operation to process data from the images.**\n\n* **A convolution does this by multiplying two matrices and yielding a third, smaller matrix.**\n* **The Network takes an input image, and uses a filter (or kernel) to create a feature map describing the image.**\n* **In the convolution operation, we take a filter (usually 2x2 or 3x3 matrix ) and slide it over the image matrix. The coresponding numbers in both matrices are multiplied and and added to yield a single number describing that input space. This process is repeated all over the image.This working can be seen in the following figure**\n![image.png](attachment:image.png)"}}