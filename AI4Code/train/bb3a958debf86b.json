{"cell_type":{"4dbccc11":"code","3e4dfd19":"code","61494f13":"code","3dd24c65":"code","ce37d56b":"code","c9125335":"code","d840afed":"code","2e93a2a1":"code","9aaac5e5":"code","35dfaed8":"code","37755b59":"code","221a2ccc":"code","0423ada6":"code","5d7f4bc8":"code","1d0b9059":"code","79bf0c6f":"code","2ec8a155":"code","33a7d0d8":"code","2b7f25fe":"code","cd5fc702":"code","987645fd":"code","aabffd41":"code","5be659b0":"code","08bfb960":"code","97228896":"code","d8b36922":"code","ddd2ed15":"code","d57b7226":"code","074d6353":"code","d61a4d23":"code","651049fc":"code","59df0bbe":"code","7013acc9":"code","fde79289":"code","263097cc":"code","964666be":"code","81f02d89":"code","db58868a":"code","6b9ebd1b":"code","f481bb8a":"code","954c549e":"code","fa318cac":"code","78d50861":"code","1c835fc6":"code","4cdcc802":"code","2885c11c":"code","018cec10":"code","7d230239":"code","ba39ad26":"code","054c07e6":"code","0c209e82":"code","bab77f8d":"code","114ec864":"code","0c7da1fe":"code","ff38307a":"code","7d93b2bd":"code","1046265f":"code","ec672096":"code","6ab985a9":"code","b73b5aa6":"code","bf190b60":"code","8d7a9154":"code","996e8f23":"markdown","7b2b9bcb":"markdown","80fba5bf":"markdown","5031fc58":"markdown","8ecca064":"markdown","bd4dae0f":"markdown","09d87267":"markdown","4487faaf":"markdown","3cd598da":"markdown","47151d4b":"markdown","40ff64ca":"markdown"},"source":{"4dbccc11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e4dfd19":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\n","61494f13":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings('ignore')","3dd24c65":"#Importing necessary packages\nimport xgboost\nimport lightgbm\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression","ce37d56b":"df.head()","c9125335":"df.info()","d840afed":"df.isnull().sum()","2e93a2a1":"df.duplicated().any()","9aaac5e5":"#Lets look at our target variable\nsns.countplot(df['DEATH_EVENT'],data=df)","35dfaed8":"#Age Distribution\nfig,ax=plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['age'],label='patients')\nax[0].set_xlabel('Age')\nax[0].set_ylabel('No of patients')\nax[0].set_yticks([5,10,15,20,25,30,35,40,45,50,55,60])\nax[0].legend()\nax[0].set_title('Age Distribution')\nax[1].hist(x=[df[df['DEATH_EVENT']==1]['age'],df[df['DEATH_EVENT']==0]['age']],stacked=True,label=['Dead','Survived'])\nax[1].set_xlabel('Age')\nax[1].set_ylabel('No of patients')\nax[1].set_yticks([5,10,15,20,25,30,35,40,45,50,55,60])\nax[1].legend()\nax[1].set_title('Age Distribution against death event')","37755b59":"#Creatinine Phoskinase Distribution\nfig,ax=plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['creatinine_phosphokinase'],label = 'patients')\nax[0].set_xlabel('Creatinine phosphokinase')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250])\nax[0].legend()\nax[0].set_title('Creatinine Phosphokinase Distribution')\nax[1].hist(x=[df[df['DEATH_EVENT']==1]['creatinine_phosphokinase'],df[df['DEATH_EVENT']==0]['creatinine_phosphokinase']],stacked=True,label=['Dead','Survived'])\nax[1].set_xlabel('Creatinine Phosphokinase')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250])\nax[1].set_title('Distribution of Creatinine phosphokinase against Death_event')\nax[1].legend()","221a2ccc":"#Ejection fraction Distribution:\nfig,ax = plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['ejection_fraction'], label = 'patients')\nax[0].set_xlabel('Ejection_fraction')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[0].legend()\nax[0].set_title('Ejection_fraction Distribution')\nax[1].hist(x = [df[df['DEATH_EVENT']==1]['ejection_fraction'],df[df['DEATH_EVENT']==0]['ejection_fraction']], stacked=True, label=['Dead','Survived'])\nax[1].set_xlabel('Ejection_fraction')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[1].set_title('Distribution of ejection_fraction against Death_event')\nax[1].legend()","0423ada6":"#Platelets distribution\nfig,ax = plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['platelets'], label = 'patients')\nax[0].set_xlabel('platelets')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[0].legend()\nax[0].set_title('Platelets Distribution')\nax[1].hist(x = [df[df['DEATH_EVENT']==1]['platelets'],df[df['DEATH_EVENT']==0]['platelets']], stacked=True, label=['Dead','Survived'])\nax[1].set_xlabel('platelets')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks(([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220]))\nax[1].set_title('Distribution of Platelets against Death_event')\nax[1].legend()","5d7f4bc8":"#Serum creatinine distribution\nfig,ax = plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['serum_creatinine'], label = 'patients')\nax[0].set_xlabel('serum_creatinine')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[0].legend()\nax[0].set_title('serum_creatinine Distribution')\nax[1].hist(x = [df[df['DEATH_EVENT']==1]['serum_creatinine'],df[df['DEATH_EVENT']==0]['serum_creatinine']], stacked=True, label=['Dead','Survived'])\nax[1].set_xlabel('serum_creatinine')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks(([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220]))\nax[1].set_title('Distribution of sodium_creatinine against Death_event')\nax[1].legend()","1d0b9059":"#Serum Sodium Distribution:\nfig,ax = plt.subplots(1,2,figsize=(20,10))\nax[0].hist(df['serum_sodium'], label = 'patients')\nax[0].set_xlabel('serum_sodium')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[0].legend()\nax[0].set_title('Ejection_fraction Distribution')\nax[1].hist(x = [df[df['DEATH_EVENT']==1]['serum_sodium'],df[df['DEATH_EVENT']==0]['serum_sodium']], stacked=True, label=['Dead','Survived'])\nax[1].set_xlabel('serum_sodium')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[1].set_title('Distribution of serum_sodium against Death_event')\nax[1].legend()","79bf0c6f":"#Time Distribution\nfig,ax = plt.subplots(1,2,figsize=(16,8))\nax[0].hist(df['time'], label = 'patients')\nax[0].set_xlabel('Time')\nax[0].set_ylabel('Number of Patients')\nax[0].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[0].legend()\nax[0].set_title('Time Distribution')\nax[1].hist(x = [df[df['DEATH_EVENT']==1]['time'],df[df['DEATH_EVENT']==0]['time']], stacked=True, label=['Dead','Survived'])\nax[1].set_xlabel('Time')\nax[1].set_ylabel('Number of patients')\nax[1].set_yticks([10,20,30,40,50,60,70,80,90,100,110,120,130,140,150])\nax[1].set_title('Distribution of Time against Death_event')\nax[1].legend()","2ec8a155":"#Gender Distributiion\nd1=df[(df['DEATH_EVENT']==0)&(df['sex']==1)]\nd2=df[(df['DEATH_EVENT']==1)&(df['sex']==1)]\nd3=df[(df['DEATH_EVENT']==0)&(df['sex']==0)]\nd4=df[(df['DEATH_EVENT']==1)&(df['sex']==0)]\n\nlabel1 = [\"Male\",\"Female\"]\nlabel2 = ['Male - Survived','Male - Died', \"Female -  Survived\", \"Female - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1,values=values1,hole=0.4,name='Gender'),1,1)\nfig.add_trace(go.Pie(labels=label2,values=values2,hole=0.4,name=\"GENDER VS DEATH_EVENT\"),1, 2)\n\n# Use `hole` to create a donut-like pie chart\n#fig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"GENDER DISTRIBUTION IN THE DATASET  \\\n                   GENDER VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='GENDER', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='GENDER VS DEATH_EVENT', x=0.84, y=0.5, font_size=9, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\n\nfig.show()","33a7d0d8":"#Diabetes Distribution\n#Diabetes Distribution \nd1=df[(df['DEATH_EVENT']==0)&(df['diabetes']==1)]\nd2=df[(df['DEATH_EVENT']==1)&(df['diabetes']==1)]\nd3=df[(df['DEATH_EVENT']==0)&(df['diabetes']==0)]\nd4=df[(df['DEATH_EVENT']==1)&(df['diabetes']==0)]\n\nlabel1 = [\"Diabetes\",\"No Diabetes\"]\nlabel2 = ['Diabetes - Survived','Diabetes - Died', \"No Diabetes -  Survived\", \"No Diabetes - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1,values=values1,hole=0.4,name='Diabetes'),1,1)\nfig.add_trace(go.Pie(labels=label2,values=values2,hole=0.4,name=\"Diabetes VS DEATH_EVENT\"),1, 2)\n\n# Use `hole` to create a donut-like pie chart\n#fig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"Diabetes DISTRIBUTION IN THE DATASET  \\\n                   Diabetes VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Diabetes', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Diabetes VS DEATH_EVENT', x=0.85, y=0.5, font_size=9, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\n\nfig.show()","2b7f25fe":"#high_blood_pressure Distribution \nd1=df[(df['DEATH_EVENT']==0)&(df['high_blood_pressure']==1)]\nd2=df[(df['DEATH_EVENT']==1)&(df['high_blood_pressure']==1)]\nd3=df[(df['DEATH_EVENT']==0)&(df['high_blood_pressure']==0)]\nd4=df[(df['DEATH_EVENT']==1)&(df['high_blood_pressure']==0)]\n\nlabel1 = [\"High BP\",\"No High BP\"]\nlabel2 = ['High BP - Survived','High BP - Died', \"No High BP -  Survived\", \"No High BP - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1,values=values1,hole=0.4,name='High BP'),1,1)\nfig.add_trace(go.Pie(labels=label2,values=values2,hole=0.4,name=\"High BP VS DEATH_EVENT\"),1, 2)\n\n# Use `hole` to create a donut-like pie chart\n#fig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"High BP DISTRIBUTION IN THE DATASET  \\\n                   High BP VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='High BP', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='High BP VS DEATH_EVENT', x=0.85, y=0.5, font_size=9, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\n\nfig.show()","cd5fc702":"#Smoking Distribution \nd1=df[(df['DEATH_EVENT']==0)&(df['smoking']==1)]\nd2=df[(df['DEATH_EVENT']==1)&(df['smoking']==1)]\nd3=df[(df['DEATH_EVENT']==0)&(df['smoking']==0)]\nd4=df[(df['DEATH_EVENT']==1)&(df['smoking']==0)]\n\nlabel1 = [\"Smoking\",\"No Smoking\"]\nlabel2 = ['Smoking - Survived','Smoking - Died', \"No Smoking -  Survived\", \"No Smoking - Died\"]\nvalues1 = [(len(d1)+len(d2)), (len(d3)+len(d4))]\nvalues2 = [len(d1),len(d2),len(d3),len(d4)]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1,values=values1,hole=0.4,name='Smoking'),1,1)\nfig.add_trace(go.Pie(labels=label2,values=values2,hole=0.4,name=\"Smoking VS DEATH_EVENT\"),1, 2)\n\n# Use `hole` to create a donut-like pie chart\n#fig.update_traces(hole=.4, hoverinfo=\"label+percent\")\n\nfig.update_layout(\n    title_text=\"Smoking DISTRIBUTION IN THE DATASET  \\\n                   Smoking VS DEATH_EVENT\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Smoking', x=0.19, y=0.5, font_size=10, showarrow=False),\n                 dict(text='Smoking VS DEATH_EVENT', x=0.85, y=0.5, font_size=9, showarrow=False)],\n    autosize=False,width=1200, height=500, paper_bgcolor=\"white\")\n\nfig.show()","987645fd":"# Heat map Distribution\nplt.figure(figsize=(16,8))\nsns.heatmap(df.corr(),annot=True)","aabffd41":"df.corr()['DEATH_EVENT'].sort_values(ascending=False)","5be659b0":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1]","08bfb960":"from sklearn.ensemble import ExtraTreesClassifier\net=ExtraTreesClassifier()\net.fit(X,y)\n","97228896":"et.feature_importances_","d8b36922":"plt.figure(figsize=(14,8))\nfeat_importances=pd.Series(et.feature_importances_,index=X.columns)\nfeat_importances.nlargest(12).plot(kind='barh')\nplt.show()","ddd2ed15":"#We shall select only 4 features\nX = df[['time', 'ejection_fraction', 'serum_creatinine','age']]\ny = df['DEATH_EVENT']","d57b7226":"from sklearn.model_selection import train_test_split","074d6353":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state=0)","d61a4d23":"from sklearn.preprocessing import StandardScaler","651049fc":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","59df0bbe":"classifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\nlpred=classifier.predict(X_test)","7013acc9":"from sklearn.metrics import confusion_matrix,classification_report","fde79289":"confusion_matrix(y_test,lpred)","263097cc":"print(classification_report(y_test,lpred))","964666be":"sns.boxplot(x = df.ejection_fraction, color = 'teal')\nplt.show()\n","81f02d89":"# ejection_fraction outliers\ndf[df['ejection_fraction']>=70]","db58868a":"#Creating new dataframe removing outliers\ndf1=df[df['ejection_fraction']<70]","6b9ebd1b":"sns.boxplot(x=df1.time, color = 'red')\nplt.show()\n","f481bb8a":"# Boxplot for serum_creatinine\nsns.boxplot(x=df1.serum_creatinine, color = 'yellow')\nplt.show()\n","954c549e":"#We shall select only 4 features from the outlier removed dataframe\nX = df1[['time', 'ejection_fraction', 'serum_creatinine','age']]\ny = df1['DEATH_EVENT']","fa318cac":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state=0)","78d50861":"scaler=StandardScaler()","1c835fc6":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","4cdcc802":"classifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n","2885c11c":"logpred=classifier.predict(X_test)","018cec10":"from sklearn.metrics import confusion_matrix, classification_report","7d230239":"confusion_matrix(y_test,logpred)","ba39ad26":"print(classification_report(y_test,logpred))","054c07e6":"#KNeighbors Classification\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","0c209e82":"#Choosing K value\nlist1=[]\nfor k in range(3,10):\n    classifier=KNeighborsClassifier(n_neighbors=k)\n    classifier.fit(X_train,y_train)\n    y_pred=classifier.predict(X_test)\n    errors=1-accuracy_score(y_test,y_pred)\n    list1.append(errors)\nplt.plot(list(range(3,10)),list1)\nplt.show()","bab77f8d":"classifier = KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X_train, y_train)\n","114ec864":"kpred=classifier.predict(X_test)","0c7da1fe":"confusion_matrix(y_test,kpred)","ff38307a":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nlist1 = []\nfor c in [0.5,0.6,0.7,0.8,0.9,1.0]:\n    classifier = SVC(C = c, random_state=0, kernel = 'rbf')\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    list1.append(accuracy_score(y_test,y_pred))\nplt.plot([0.5,0.6,0.7,0.8,0.9,1.0], list1)\nplt.show()\n","7d93b2bd":"from sklearn.svm import SVC\nclassifier = SVC(C = 0.8, random_state=0, kernel = 'rbf')\nclassifier.fit(X_train, y_train)","1046265f":"y_pred = classifier.predict(X_test)","ec672096":"confusion_matrix(y_test,y_pred)","6ab985a9":"#DecisionTree Classifier\nlist5 = []\nfor leaves in range(2,10):\n    classifier = DecisionTreeClassifier(max_leaf_nodes = leaves, random_state=0, criterion='entropy')\n    classifier.fit(X_train, y_train)\n    y_pred=classifier.predict(X_test)\n    list5.append(accuracy_score(y_test,y_pred))\n#print(mylist)\nplt.plot(list(range(2,10)), list5)\nplt.show()\n","b73b5aa6":"dt_clf = DecisionTreeClassifier(max_leaf_nodes=2, random_state=0, criterion='entropy')\ndt_clf.fit(X_train, y_train)\ndt_pred = dt_clf.predict(X_test)\n","bf190b60":"confusion_matrix(y_test,dt_pred)","8d7a9154":"print(classification_report(y_test,dt_pred))","996e8f23":"Thats good..After removing outliers our accuracy and F1 score has increased significantly","7b2b9bcb":"I tried other classifier models as well..We were able to get good f1 score and accuracy with Decision tree.So lets consider this as our final model\n","80fba5bf":"### Feature Selection","5031fc58":"## Visualizing the distribution of variables","8ecca064":"Before dealing with outliers we require knowledge about the outlier, the dataset and possibly some domain knowledge.\n\nRemoving outliers without a good reason will not always increase accuracy. Without a deep understanding of what are the possible ranges that\nexist within each feature, removing outliers becomes tricky.\n\nWith little research we could see that all the values in serum_creatinine falls in possible range of values. So they are not outliers. \nThey are actual data points that helps in predicting DEATH_EVENT. \n","bd4dae0f":"Note: This F1 score is applicable for this train test split method . The accuracy and f1 score decreases if we perform cross validation. There is more scope for improvement if we have to implement in real life where we can try other feature engineering techniques and other models based on cross validation\n\nKindly upvote this kernel if you like. ","09d87267":"###  Mmm...Our accuracy and F1  score is  less Lets try some outlier removal process and check and then we can explore further models","4487faaf":"There are no outliers in time","3cd598da":"We shall select top 4 features from above graph and use it for our model building","47151d4b":"There are no null values or dupicate values which is good ","40ff64ca":"We can see there are two outliers. Lets remove them"}}