{"cell_type":{"cfaa40bf":"code","3ed978b1":"code","1d4f25de":"code","8603fc1d":"code","59d67638":"code","dafd157c":"code","67fa6ce5":"code","c3a3ccee":"code","31fec15e":"code","291dc51f":"code","61ad01f2":"code","4ce8cb28":"code","c2a86bd6":"code","bc75537f":"code","50884490":"code","74e81749":"code","35053373":"code","4bf8b752":"code","1d62dad6":"code","13e68171":"code","0a9946f8":"code","f2d11adc":"code","54328cc3":"code","8588bb09":"code","20255d97":"code","113bcc2f":"code","b0367904":"code","b22b960a":"code","ed734148":"code","3d2dfaab":"code","88344a73":"code","e2372357":"code","2f3bfea4":"code","a79cab93":"code","afd0aac2":"code","095acf9f":"code","49ab227f":"code","9c6f04eb":"code","b8c926d7":"code","60f4cd39":"code","7fbf93de":"code","5a9d1872":"code","ecebaece":"code","149201e0":"code","584a0a65":"code","466a28cd":"code","15a80e32":"code","0262bf7b":"code","3f49403c":"code","18485101":"code","96affdec":"code","0bdc6aaa":"code","9a2bbdac":"code","5722adf5":"code","4ca2c3df":"code","8716a1a8":"code","afe3d6bc":"code","50acc74f":"code","4679e16a":"code","2e68474c":"code","f2bd24d0":"code","8b1eaba0":"code","fd06ce51":"code","66bb9851":"code","9b158d3d":"markdown","e0815867":"markdown","d02fc7cf":"markdown","06ac09a0":"markdown","287b3b0f":"markdown","ca070a0e":"markdown","8ad8f51d":"markdown","9e1d5800":"markdown","da846fd7":"markdown","bf166b93":"markdown","2d0981d8":"markdown","cd262984":"markdown","343dfaa9":"markdown","d497d25f":"markdown","9f2a5364":"markdown","3845d9a9":"markdown","2aa9aaf5":"markdown","7de9450f":"markdown","2470b433":"markdown","2f56485f":"markdown","96ee8b0f":"markdown","467ae187":"markdown","eff9f12d":"markdown","965da316":"markdown","691a2544":"markdown","5f232528":"markdown","bc440911":"markdown","435bed3f":"markdown","d2d2f95a":"markdown","15b7c7ce":"markdown","7350e1bb":"markdown","ed85d097":"markdown"},"source":{"cfaa40bf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport datetime\nfrom kaggle.competitions import nflrush\nimport tqdm\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport keras\nimport tensorflow as tf\n\nsns.set_style('darkgrid')\nmpl.rcParams['figure.figsize'] = [15,10]","3ed978b1":"env = nflrush.make_env()","1d4f25de":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","8603fc1d":"train.head()","59d67638":"train['PlayId'].value_counts()","dafd157c":"train['Yards'].describe()","67fa6ce5":"ax = sns.distplot(train['Yards'])\nplt.vlines(train['Yards'].mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train['Yards'].mean()-8, plt.ylim()[1]-0.005, \"Mean yards travaled\", size=15, color='r')\nplt.xlabel(\"\")\nplt.title(\"Yards travaled distribution\", size=20);","c3a3ccee":"#from https:\/\/www.kaggle.com\/prashantkikani\/nfl-starter-lgb-feature-engg\ntrain['DefendersInTheBox_vs_Distance'] = train['DefendersInTheBox'] \/ train['Distance']","31fec15e":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append((col, len(train[col].unique())))","291dc51f":"train[(train['PossessionTeam']!=train['HomeTeamAbbr']) & (train['PossessionTeam']!=train['VisitorTeamAbbr'])][['PossessionTeam', 'HomeTeamAbbr', 'VisitorTeamAbbr']]","61ad01f2":"sorted(train['HomeTeamAbbr'].unique()) == sorted(train['VisitorTeamAbbr'].unique())","4ce8cb28":"diff_abbr = []\nfor x,y  in zip(sorted(train['HomeTeamAbbr'].unique()), sorted(train['PossessionTeam'].unique())):\n    if x!=y:\n        print(x + \" \" + y)","c2a86bd6":"map_abbr = {'ARI': 'ARZ', 'BAL': 'BLT', 'CLE': 'CLV', 'HOU': 'HST'}\nfor abb in train['PossessionTeam'].unique():\n    map_abbr[abb] = abb","bc75537f":"train['PossessionTeam'] = train['PossessionTeam'].map(map_abbr)\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].map(map_abbr)\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].map(map_abbr)","50884490":"train['HomePossesion'] = train['PossessionTeam'] == train['HomeTeamAbbr']","74e81749":"train['Field_eq_Possession'] = train['FieldPosition'] == train['PossessionTeam']","35053373":"off_form = train['OffenseFormation'].unique()\ntrain['OffenseFormation'].value_counts()","4bf8b752":"train = pd.concat([train.drop(['OffenseFormation'], axis=1), pd.get_dummies(train['OffenseFormation'], prefix='Formation')], axis=1)\ndummy_col = train.columns","1d62dad6":"train['GameClock'].value_counts()","13e68171":"\ndef strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans","0a9946f8":"train['GameClock'] = train['GameClock'].apply(strtoseconds)","f2d11adc":"sns.distplot(train['GameClock'])","54328cc3":"train['PlayerHeight']","8588bb09":"train['PlayerHeight'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))","20255d97":"train['TimeHandoff']","113bcc2f":"train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\ntrain['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n","b0367904":"train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)","b22b960a":"train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))","ed734148":"seconds_in_year = 60*60*24*365.25\ntrain['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n","3d2dfaab":"train = train.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate'], axis=1)","88344a73":"train['WindSpeed'].value_counts()","e2372357":"train['WindSpeed'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)","2f3bfea4":"train['WindSpeed'].value_counts()","a79cab93":"#let's replace the ones that has x-y by (x+y)\/2\n# and also the ones with x gusts up to y\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\ntrain['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)","afd0aac2":"#let's replace the ones that has x-y by (x+y)\/2\n# and also the ones with x gusts up to y\n#train['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n#train['WindSpeed'] = train['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\ndef str_to_float(txt):\n    try:\n        return float(txt)\n    except:\n        return -1","095acf9f":"train['WindSpeed'] = train['WindSpeed'].apply(str_to_float)","49ab227f":"train['WindDirection'].value_counts()","9c6f04eb":"train.drop('WindDirection', axis=1, inplace=True)","b8c926d7":"train['PlayDirection'].value_counts()","60f4cd39":"train['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')","7fbf93de":"train['Team'] = train['Team'].apply(lambda x: x.strip()=='home')","5a9d1872":"train['GameWeather'].unique()","ecebaece":"train['GameWeather'] = train['GameWeather'].str.lower()\nindoor = \"indoor\"\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\ntrain['GameWeather'] = train['GameWeather'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)","149201e0":"train['GameWeather'].unique()","584a0a65":"from collections import Counter\nweather_count = Counter()\nfor weather in train['GameWeather']:\n    if pd.isna(weather):\n        continue\n    for word in weather.split():\n        weather_count[word]+=1\n        \nweather_count.most_common()[:15]","466a28cd":"def map_weather(txt):\n    ans = 1\n    if pd.isna(txt):\n        return 0\n    if 'partly' in txt:\n        ans*=0.5\n    if 'climate controlled' in txt or 'indoor' in txt:\n        return ans*3\n    if 'sunny' in txt or 'sun' in txt:\n        return ans*2\n    if 'clear' in txt:\n        return ans\n    if 'cloudy' in txt:\n        return -ans\n    if 'rain' in txt or 'rainy' in txt:\n        return -2*ans\n    if 'snow' in txt:\n        return -3*ans\n    return 0","15a80e32":"train['GameWeather'] = train['GameWeather'].apply(map_weather)","0262bf7b":"train['IsRusher'] = train['NflId'] == train['NflIdRusher']","3f49403c":"train.drop(['NflId', 'NflIdRusher'], axis=1, inplace=True)","18485101":"train['Y'].describe()","96affdec":"#train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n#train['GameWeather'] = train['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\n#train['Delta_X_Y'] = train.apply(lambda row: (row['X'] + row['Y']), axis=1)\n#from math import sqrt\n#train['Delta_X_Y'] = train['Delta_X_Y'].apply(lambda x: sqrt(x) if x!=0 else 0)","0bdc6aaa":"train = train.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()","9a2bbdac":"train.drop(['GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1, inplace=True)","5722adf5":"cat_features = []\nfor col in train.columns:\n    if train[col].dtype =='object':\n        cat_features.append(col)\n        \ntrain = train.drop(cat_features, axis=1)","4ca2c3df":"train.fillna(-999, inplace=True)","8716a1a8":"players_col = []\nfor col in train.columns:\n    if train[col][:22].std()!=0:\n        players_col.append(col)","afe3d6bc":"X_train = np.array(train[players_col]).reshape(-1, 11*22)","50acc74f":"play_col = train.drop(players_col+['Yards'], axis=1).columns\nX_play_col = np.zeros(shape=(X_train.shape[0], len(play_col)))\nfor i, col in enumerate(play_col):\n    X_play_col[:, i] = train[col][::22]","4679e16a":"X_train = np.concatenate([X_train, X_play_col], axis=1)\ny_train = np.zeros(shape=(X_train.shape[0], 199))\nfor i,yard in enumerate(train['Yards'][::22]):\n    y_train[i, yard+99:] = np.ones(shape=(1, 100-yard))","2e68474c":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)","f2bd24d0":"model = keras.models.Sequential([\n    keras.layers.Dense(units=300, activation='relu', input_shape=[X_train.shape[1]]),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.15),\n    keras.layers.Dense(units=260, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.15),\n    keras.layers.Dense(units=199, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(X_train, y_train, epochs=200, batch_size=32)","8b1eaba0":"def make_pred(df, sample, env, model):\n    df['DefendersInTheBox_vs_Distance'] = df['DefendersInTheBox'] \/ df['Distance']\n    df['OffenseFormation'] = df['OffenseFormation'].apply(lambda x: x if x in off_form else np.nan)\n    df = pd.concat([df.drop(['OffenseFormation'], axis=1), pd.get_dummies(df['OffenseFormation'], prefix='Formation')], axis=1)\n    missing_cols = set( dummy_col ) - set( test.columns )-set('Yards')\n    for c in missing_cols:\n        df[c] = 0\n    df = df[dummy_col]\n    df.drop(['Yards'], axis=1, inplace=True)\n    df['PossessionTeam'] = df['PossessionTeam'].map(map_abbr)\n    df['HomeTeamAbbr'] = df['HomeTeamAbbr'].map(map_abbr)\n    df['VisitorTeamAbbr'] = df['VisitorTeamAbbr'].map(map_abbr)\n    df['HomePossesion'] = df['PossessionTeam'] == df['HomeTeamAbbr']\n    df['Field_eq_Possession'] = df['FieldPosition'] == df['PossessionTeam']\n    df['GameClock'] = df['GameClock'].apply(strtoseconds)\n    df['PlayerHeight'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n    df['PlayerBirthDate'] = df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n    seconds_in_year = 60*60*24*365.25\n    df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n    df['WindSpeed'] = df['WindSpeed'].apply(str_to_float)\n    df['PlayDirection'] = train['PlayDirection'].apply(lambda x: x is 'right')\n    df['Team'] = df['Team'].apply(lambda x: x.strip()=='home')\n    indoor = \"indoor\"\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\n    df['GameWeather'] = df['GameWeather'].apply(lambda x: x.lower().replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly').replace('clear and sunny', 'sunny and clear').replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    df['GameWeather'] = df['GameWeather'].apply(map_weather)\n    df['IsRusher'] = df['NflId'] == df['NflIdRusher']\n    \n    df = df.sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index()\n    df = df.drop(['TimeHandoff', 'TimeSnap', 'PlayerBirthDate', 'WindDirection', 'NflId', 'NflIdRusher', 'GameId', 'PlayId', 'index', 'IsRusher', 'Team'], axis=1)\n    cat_features = []\n    for col in df.columns:\n        if df[col].dtype =='object':\n            cat_features.append(col)\n\n    df = df.drop(cat_features, axis=1)\n    df.fillna(-999, inplace=True)\n    X = np.array(df[players_col]).reshape(-1, 11*22)\n    play_col = df.drop(players_col, axis=1).columns\n    X_play_col = np.zeros(shape=(X.shape[0], len(play_col)))\n    for i, col in enumerate(play_col):\n        X_play_col[:, i] = df[col][::22]\n    X = np.concatenate([X, X_play_col], axis=1)\n    X = scaler.transform(X)\n    y_pred = model.predict(X)\n    for pred in y_pred:\n        prev = 0\n        for i in range(len(pred)):\n            if pred[i]<prev:\n                pred[i]=prev\n            prev=pred[i]\n    y_pred[:, -1] = np.ones(shape=(y_pred.shape[0], 1))\n    y_pred[:, 0] = np.zeros(shape=(y_pred.shape[0], 1))\n    env.predict(pd.DataFrame(data=y_pred,columns=sample.columns))\n    return y_pred","fd06ce51":"for test, sample in tqdm.tqdm(env.iter_test()):\n    make_pred(test, sample, env, model)","66bb9851":"env.write_submission_file()","9b158d3d":"## Offense formation","e0815867":"Since we already have the quarter feature, we can just divide the Game Clock by 15 minutes so we can get the normalized time left in the quarter.","d02fc7cf":"Let's drop the categorical features and run a simple random forest in our model","06ac09a0":"## Player height","287b3b0f":"# Baseline model","ca070a0e":"# Overall analysis","8ad8f51d":"We can see there are some values that are not standardized(e.g. 12mph), we are going to remove mph from all our values.","9e1d5800":"Since I don't have any knowledge about formations, I am just goig to one-hot encode this feature","da846fd7":"## Possession Team","bf166b93":"Let's use the time handoff to calculate the players age","2d0981d8":"## PlayDirection","cd262984":"We know that 1ft=12in, thus:","343dfaa9":"Game clock is supposed to be a numerical feature.","d497d25f":"# End\n\nIf you reached this far please comment and upvote this kernel, feel free to make improvements on the kernel and please share if you found anything useful!","9f2a5364":"Let's now look at the most common words we have in the weather description","3845d9a9":"## Game Clock","2aa9aaf5":"Let's preprocess some of those features.","7de9450f":"Apparently these are the only three problems, let's fix it.","2470b433":"As expected, we have 22 of each playid since we have 22 players.\n\nLet's look at our target variable(Yards).","2f56485f":"The wind direction won't affect our model much because we are analyzing running plays so we are just going to drop it.","96ee8b0f":"## Game Weather","467ae187":"To encode our weather we are going to do the following map:\n \n- climate controlled or indoor => 3, sunny or sun => 2, clear => 1, cloudy => -1, rain => -2, snow => -3, others => 0\n- partly => multiply by 0.5\n\nI don't have any expercience with american football so I don't know if playing in a climate controlled or indoor stadium is good or not, if someone has a good idea on how to encode this it would be nice to leave it in the comments :)","eff9f12d":"- Let's see how PlayId is distribuited","965da316":"## NflId NflIdRusher","691a2544":"We have some problem with the enconding of the teams such as BLT and BAL or ARZ and ARI.\n\nLet's try to fix them manually.","5f232528":"## Wind Speed and Direction","bc440911":"## Team","435bed3f":"## Feature Engineering","d2d2f95a":"## Time handoff and snap and Player BirthDate","15b7c7ce":"We are going to apply the following preprocessing:\n \n- Lower case\n- N\/A Indoor, N\/A (Indoors) and Indoor => indoor Let's try to cluster those together.\n- coudy and clouidy => cloudy\n- party => partly\n- sunny and clear => clear and sunny\n- skies and mostly => \"\"","7350e1bb":"# Categorical features","ed85d097":"We are now going to make one big row for each play where the rusher is the last one"}}