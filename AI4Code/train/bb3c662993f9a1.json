{"cell_type":{"cb8a1c84":"code","89b2906d":"code","2c1f6ed3":"code","bfe49f4f":"code","b62cbdfb":"code","79b4f6fe":"code","28cb4228":"code","bf4f4fbd":"code","b4e7ae72":"code","44c2766b":"code","0f87906f":"code","b97f724c":"code","c2a22d98":"code","33fe3e76":"code","ab785a15":"code","0105dcb2":"code","43e9494b":"code","14880f47":"code","631a5772":"code","6b33f4d3":"code","76667150":"code","87b78ad1":"code","53c86d04":"code","fc6f21f4":"code","28c6b83a":"code","3df8a55d":"code","e2d9e714":"code","f8ce3ebe":"code","66815c92":"code","cf294603":"code","6a18618f":"code","87d0591e":"code","503d37ba":"code","607b0e1d":"code","8587e9ff":"code","291ec805":"code","4b7b4962":"code","0c11902a":"code","f67fa590":"code","788456f4":"code","0fc4606f":"code","8878437c":"code","f8de5ad6":"code","3141346c":"code","4c013057":"code","ab7a1def":"code","b4b261e3":"code","493e2294":"code","0ac149aa":"code","8c49d14c":"code","2b38a15a":"code","43302284":"code","acaa37e8":"code","1902b0f9":"code","4aa179ce":"code","b84f45c3":"code","b89c73ed":"code","98a8168b":"code","9766bf87":"code","f64dd0b3":"code","85626406":"code","1876ca2f":"code","cfb4f01e":"code","00732821":"code","5b31667f":"code","310f9ed9":"code","7518e4b4":"code","1d7a23ec":"code","0d98c8f2":"code","9aba2666":"code","28710d1a":"code","4b88ee35":"code","a526d0a5":"code","0a31bcca":"code","d3004a90":"code","238d624c":"code","0722276a":"code","776f6156":"code","b2c48ea4":"code","36ea7df6":"code","8b1056bd":"code","88c54eb5":"code","07eb30a3":"code","0d4d8b7e":"markdown","7c53c034":"markdown","721d5956":"markdown","f16d91b1":"markdown","38132041":"markdown","e0fe6dfe":"markdown","f12b8458":"markdown","085313b8":"markdown","295effa4":"markdown","3f7224dc":"markdown","d73a5d25":"markdown","2ca449ea":"markdown","dc6d7a79":"markdown","83375ecb":"markdown","a092f135":"markdown","98513a72":"markdown","74caf343":"markdown","861b35d7":"markdown","980c913f":"markdown","aec9dec5":"markdown","fa0908b7":"markdown","ac1d6a8b":"markdown","2fc35d22":"markdown","77196dd4":"markdown","3d9a8063":"markdown","2de59602":"markdown","9683f8d1":"markdown","18a06b6f":"markdown","f1a9570c":"markdown","d665e935":"markdown","f841856f":"markdown","b448bea1":"markdown","fdb6b697":"markdown","7bab9bb9":"markdown","c6308bba":"markdown","67b85c8a":"markdown","166ef1e7":"markdown","7ff23f01":"markdown","31852875":"markdown","a92ad18d":"markdown","f7d9bf50":"markdown","8719de26":"markdown","bb2fc573":"markdown","4e3dcd76":"markdown","1d54a984":"markdown","58458b52":"markdown","a81954c1":"markdown","45a6a943":"markdown","c1ed70e1":"markdown","d8203707":"markdown","ad895bac":"markdown","af087da1":"markdown","d00d00bb":"markdown","ab590f84":"markdown","8fba33be":"markdown","8fab0078":"markdown"},"source":{"cb8a1c84":"#Assignment Author = Haider Ali\n#Code provided by = Genoveva Vargas-Solar\n#INP-Grenoble-SGB\n#HVDC\n#Student id: 42002598 \n#Email-id: haider2303@gmail.com , Haider.Ali@grenoble-inp.org","89b2906d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c1f6ed3":"file = open('\/kaggle\/input\/ense32020-ict-lesson-2\/files\/ch03\/adult.data', 'r')","bfe49f4f":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","b62cbdfb":"print (data[1:2])","79b4f6fe":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","28cb4228":"df.tail()","bf4f4fbd":"df.shape","b4e7ae72":"counts = df.groupby('country').size()\n\nprint (counts) ","44c2766b":"counts = df.groupby('age').size() # grouping by age\nprint(counts)\n","0f87906f":"print(df.groupby('age').size().max())\nprint (counts[15:90])\n","b97f724c":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","c2a22d98":"fm =df[(df.sex == 'Female')]\nfm.shape","33fe3e76":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","ab785a15":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","0105dcb2":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","43e9494b":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","14880f47":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","631a5772":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","6b33f4d3":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","76667150":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","87b78ad1":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","53c86d04":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","fc6f21f4":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","28c6b83a":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","3df8a55d":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","e2d9e714":"fm_age.hist(cumulative=True, density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(cumulative=True, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","f8ce3ebe":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","66815c92":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","cf294603":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","6a18618f":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","87d0591e":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","503d37ba":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","607b0e1d":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","8587e9ff":"df['age'].median()","291ec805":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","4b7b4962":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","0c11902a":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","f67fa590":"ml1_age=ml1['age']\nfm1_age=fm1['age']","788456f4":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","0fc4606f":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","8878437c":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","f8de5ad6":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","3141346c":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","4c013057":"\nimport numpy as np\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","ab7a1def":"val = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","b4b261e3":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","493e2294":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","0ac149aa":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","8c49d14c":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","2b38a15a":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","43302284":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","acaa37e8":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","1902b0f9":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","4aa179ce":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","b84f45c3":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","b89c73ed":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","98a8168b":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","9766bf87":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","f64dd0b3":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","85626406":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","1876ca2f":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","cfb4f01e":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","00732821":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","5b31667f":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","310f9ed9":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","7518e4b4":"print ('The empirical mean of the sample is ', x.mean())","1d7a23ec":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)\n","0d98c8f2":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","9aba2666":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","28710d1a":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","4b88ee35":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","a526d0a5":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","0a31bcca":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","d3004a90":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])\n\n","238d624c":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\n","0722276a":"#Two data Sets\ngroup_1_x = X[:,0]\ngroup_1_y = X[:,1]\n\n\n#We can use the sample median as an estimator of the mean of the distribution\nmean_group_1_x = np.median(group_1_x)\nmean_group_1_y = np.median(group_1_y)\nvariance_group_1_x = np.var(group_1_x)\nvariance_group_1_y = np.var(group_1_y)\n\n\nprint (\"Mean of Group 1_x is:\",mean_group_1_x)\nprint (\"Mean of Group 1_y is:\",mean_group_1_y)\nprint (\"Variance of Group 1_x is:\",variance_group_1_x)\nprint (\"Variance of Group 1_y is:\",variance_group_1_y)\nprint (\"Covariance: Cov(X, Y) = %.2f\" % Cov(group_1_x, group_1_y))\nprint (\"Pearsons Correlation: Corr(X, Y) = %.5f\" % Corr(group_1_x, group_1_y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(group_1_x, group_1_y))\n\n","776f6156":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\n","b2c48ea4":"#Two data Sets\ngroup_2_x = X[:,2]\ngroup_2_y = X[:,3]\n\n#We can use the sample median as an estimator of the mean of the distribution\nmean_group_2_x = np.median(group_2_x)\nmean_group_2_y = np.median(group_2_y)\nvariance_group_2_x = np.var(group_2_x)\nvariance_group_2_y = np.var(group_2_y)\n\n\nprint (\"Mean of Group 2_x is:\",mean_group_2_x)\nprint (\"Mean of Group 2_y is:\",mean_group_2_y)\nprint (\"Variance of Group 2_x is:\",variance_group_2_x)\nprint (\"Variance of Group 2_y is:\",variance_group_2_y)\nprint (\"Covariance: Cov(X, Y) = %.2f\" % Cov(group_2_x, group_2_y))\nprint (\"Pearsons Correlation: Corr(X, Y) = %.5f\" % Corr(group_2_x, group_2_y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(group_2_x, group_2_y))","36ea7df6":"plt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","8b1056bd":"#Two data Sets\ngroup_3_x = X[:,4]\ngroup_3_y = X[:,5]\n\n#We can use the sample median as an estimator of the mean of the distribution\nmean_group_3_x = np.median(group_3_x)\nmean_group_3_y = np.median(group_3_y)\nvariance_group_3_x = np.var(group_3_x)\nvariance_group_3_y = np.var(group_3_y)\n\n\nprint (\"Mean of Group 3_x is:\",mean_group_3_x)\nprint (\"Mean of Group 3_y is:\",mean_group_3_y)\nprint (\"Variance of Group 3_x is:\",variance_group_3_x)\nprint (\"Variance of Group 3_y is:\",variance_group_3_y)\nprint (\"Covariance: Cov(X, Y) = %.2f\" % Cov(group_3_x, group_3_y))\nprint (\"Pearsons Correlation: Corr(X, Y) = %.5f\" % Corr(group_3_x, group_3_y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(group_3_x, group_3_y))\n\n","88c54eb5":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\n\nplt.gcf().set_size_inches((10,10))","07eb30a3":"#Two data Sets\ngroup_4_x = X[:,6]\ngroup_4_y = X[:,7]\n\n#We can use the sample median as an estimator of the mean of the distribution\nmean_group_4_x = np.median(group_4_x)\nmean_group_4_y = np.median(group_4_y)\nvariance_group_4_x = np.var(group_4_x)\nvariance_group_4_y = np.var(group_4_y)\n\n\nprint (\"Mean of Group 4_x is:\",mean_group_4_x)\nprint (\"Mean of Group 4_y is:\",mean_group_4_y)\nprint (\"Variance of Group 4_x is:\",variance_group_4_x)\nprint (\"Variance of Group 4_y is:\",variance_group_4_y)\nprint (\"Covariance: Cov(X, Y) = %.2f\" % Cov(group_4_x, group_4_y))\nprint (\"Pearsons Correlation: Corr(X, Y) = %.5f\" % Corr(group_4_x, group_4_y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(group_4_x, group_4_y))","0d4d8b7e":"# 4.3.1 Sample and Estimated Mean, Variance and Standard Scores","7c53c034":"**Question#21 What does the figure shows?t**\n\n* > This figure shows a continuous function generated by using summing guassian kernals of bimodal distribution.\n* > How do we know it is bimodal distribution? Well we can see from the above plot that it has two peaks or two bells around the scale \"2\" on x-axis.\n\n        Explanation:\n        \n*         Sometimes we aren't interested in distribution of data or in other terms histogram. We want the bigger picture of just their distribution.\n*         What we simply do is convert that distribution to form a continuous curve. For that purpose, we use something called \"kernel functions.\" For each data point we have a kernel function and we sum all of them. The choice of kernel function and its bandwidth is upto user. In our case, it was guassian kernel function.","721d5956":"> ***QUESTION#3: Describe and explain the result. Compare with the previous one.***\n* > Ans: The df.tail() command gives us some last values of table.","f16d91b1":"# 4.2.5.1 Exponential distribution","38132041":"# 4.2.1.7 Measuring Asymmetry","e0fe6dfe":"*> ***QUESTION#1: What is the obtained result? What did you ask for in the previous command? Explain.****\n> * Ans: The obtained results is a nested list of data read from file and extracted by spliting it when the \",\" occurs.\n> * For the above command, we just printed to see the content.\n> * We only printed the first element in above command. By changing the data[start:end], we can print different elements.**","f12b8458":"# 4.2.6      Kernel Density","085313b8":"# 4.2.1.4 Quantiles and Percentiles\nOrder the sample {xi}, then find xp so that it divides the data into two parts where:\n\na fraction p of the data values are less than or equal to xp and\nthe remaining fraction (1\u2212p) are greater than xp.\nThat value xp is the pth-quantile, or 100\u00d7pth percentile.\n\n5-number summary: xmin,Q1,Q2,Q3,xmax, where Q1 is the 25\u00d7pth percentile, Q2 is the 50\u00d7pth percentile and Q3 is the 75\u00d7pth percentile.","295effa4":"> **Question#8 Describe an explain the result**\n> * we considered the average age of men and women samples in our dataset in terms of their mean.\n> * In the above given code we made a quantative analysis of given data based on two parameter i.e. \"age\" and \"income\"\n> * The quantitative analysis includes mean, median etc. But in the above given code, we just used \"mean\" for both age and income.","3f7224dc":"> ***QUESTION#6: What is the age of the most represented people***\n> * Ans: Age = 36\n> * Representation: 898","d73a5d25":"# 4.3.1.4 Covariance","2ca449ea":"# 4.2.1.8 Relative Risk","dc6d7a79":"# 4.2.2 Data distributions","83375ecb":"# 4.3.1.1 Mean","a092f135":"# 4.2     Estimation","98513a72":"> ***QUESTION#5: How many items are there for USA? and for Mexico?***\n> * Ans: Mexico = 643 \n> * USA = 29170","74caf343":"**Question#14 Show the graphics and an explain the result**\n\n* > It is a PMF (Probability mass function). This function is used to present discrete variable.\n* > The graph is normalized graph where now the number of samples is 20. It was normalized to show distribution of male age.\n\n    Explanation:\n*     We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples\n*     The normalized histogram is called the Probability Mass Function.\n*     The y-axis indicates the normalization.","861b35d7":"# 4.2.1.2 Sample Variance","980c913f":"# 4.2.1.1 Mean\nIn our case, we can consider what the average age of men and women samples in our dataset would be in terms of their mean:","aec9dec5":"# 4.1  Getting acquainted with data","fa0908b7":"# 4.3.1.5 Pearson\u2019s correlation","ac1d6a8b":"# 4.2 Explanatory Data Analysis\nThe data that come from performing a particular measurement on all the subjects in a sample represent our observations for a single characteristic like country, age, education, etc.","2fc35d22":"# 4.3.1.3 Standard scores","77196dd4":"# 4.2.3 Outliers","3d9a8063":"**Question#13 Show the graphics and an explain the result**   \n* I THINK THERE IS AN ERROR IN CODE. I ADDED THE LINE 'cumulative=True' in histogram function to get the CDF. It wasn't there! I am not sure about my approach\n\n> * >  The Cumulative Distribution Function (CDF), or just distribution function, describes the probability that a real-valued random variable X with a given proba- bility distribution will be found to have a value less than or equal to x.\n> * > In simpler terms it just sums up previous terms probability into next terms. P(n+1) = P(n-1) + P(n)\n> \n    Explanation:\n*     We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples\n*     The normalized histogram is called the Probability Mass Function.\n*     The y-axis indicates the normalization.","2de59602":"**Question#18 Show the graphics and an explain the result**  \n\n> * THIS IS COMBINED \"PMF\" FOR BOTH FEMALE AGE AND MALE AGE.\n \n    Explanation:\n*     We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples\n*     The normalized histogram is called the Probability Mass Function.\n*     The y-axis indicates the normalization.","9683f8d1":"**Data Set 1**\nThis data Set is extracted from above given arrays. I have added some more variables to make code refined","18a06b6f":"> ***QUESTION#4: Describe an explain the result***\n> * Ans: df.shape returns a tuple representing the dimensionality of the DataFrame. \n> * It means that our table has 32561 rows & 15 columns.","f1a9570c":"> ***QUESTION#2: Describe an explain the result.***\n* We created a table structure from the given data using pandas.\n* Ans: The df.head() command gives us some initial values of table.","d665e935":"    Pipeline:\n1.     Extract the groups of data in the form of arrays from given array below\n1.     Calculate the estimators:\n1.         For the mean, if outliers are present we can use the median as estimate!\n1.         Covariance is calculated by the defined formula above\n1.         Pearson correlation deals with linearity. Its formula has also been defined by course advisor.\n1.         Spearman's rank is calculated by ordering the two arrays according to their rank into lists. And then using the above defined function.","f841856f":"# 4.2.1.3 Sample Median","b448bea1":"# 4.2.3.1 Outliner Treatment","fdb6b697":"**Question#10 Describe an explain the result.**\n\n    Description (Key Aspects):\n*     Sometimes in the data set there can be an outlier which can drastically change the mean value.\n*     So instead we calculated median which gives central value of samples after converting them to ordered lists.\n*     Hence, it is a value that is much more robust in the face of outliers\n\n            Explanation (Pipeline):\n        \nThe **results** are displayed in the above blocks: \n\n1. In the first step, the data was divided into male and female data sets(ml, fm).\n1. These quantitative analysis i.e finding median age and high source income individuals was done using pandas median functions.\n1. The results are variables that can be seen in the code (ml_median_hr, fm_median_age, fm_median).\n\n\n\n\n","7bab9bb9":"# Exercise:\nObtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.","c6308bba":"**Question#9. Describe an explain the result**\n\n     Description:\n* The above result shows three quantitative properties of our data (mean, variance and standard deviation) of age and hours\/week.\n*  mean is not a sufficient descriptor of the data, we can do a little better with two numbers: mean and variance.\n*  Variance \u03c32 describes the spread of data. The square root of variance, \u03c3, is called the standard deviation. We define standard deviation because variance is hard to interpret.\n\n        Explanation:\n        \nThe following **pipeline** was followed: \n1. Data set creation of ml and fm (male and female), dividing Data into two parts: male and female.\n1. Finding mean, variance and standard deviation of both data sets of their \"age\" (ml_mu, fm_mu, ml_var, fm_var etc.)\n1. Finding mean, variance and standard deviation of both data sets of their \"hours per week\" (ml_var_hr, fm_std_hr etc.)\n\n\n\n        \n        \n\n\n","67b85c8a":"**Data Set 2**\nThis data Set is extracted from above given arrays. I have added some more variables to make code refined","166ef1e7":"# 4.2.1.5 Data distributions","7ff23f01":"**Question#12 Show the graphics and an explain the result**\n\n* > It is a PMF (Probability mass function). This function is used to present discrete variable.\n* > The graph is normalized graph where now the number of samples is 20. It was normalized to show distribution of both male and female age on one single graph.\n\n    Explanation:\n*     We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples\n*     The normalized histogram is called the Probability Mass Function.\n*     The y-axis indicates the normalization.\n\n           ","31852875":"**Question#11 Show the graphics and an explain the result**\n\n> The graph is same as previous question but now is of females!\n\n    Explanation:\n*     The above given graph shows the distribution of age of females. \n*     On the x-axis we have the \"age\" and on the y-axis we have \"number of females\" corresponding to that age.  \n\n            Pipeline:\n            \nThe graph is given above.\n\n1. Divide the Data into male and female.\n1. Extract the information of \"age\" from that male data set (how many females of particular age are present)\n1. Plot the data using matplotlib.","a92ad18d":"**Data Set 4**\nThis data Set is extracted from above given arrays. I have added some more variables to make code refined","f7d9bf50":"**Question#21 What do you obtained as result?**\n\n* > We obtained \"Mean Squared Error\" between the mean of distribution data and estimated mean.\n\n        Explanation:\n        \n1.         We created random distribution using fixed paramters including mean, variance etc.\n1.         We did iterations to find out out mean squared error.","8719de26":"# 4.3.1.2 Variance","bb2fc573":"# 4.2.5.3 Central limit theorem","4e3dcd76":"**Question#20 Explain the result**\n\n> The above statement tells us about the mean difference between ages of two data sets i.e. male and female.\n> Since the answer is positive, it indicates that the mean of male age is higher than mean of female age.\n\n    Explanation (Pipeline):\n    \n1.     We need to divide both data sets into male and female using gender as our parameter.\n1.     We calculate the mean age of both data sets using mean() functions.\n1.     We then take the difference of both to get sample difference.","1d54a984":"# 4.3.2.6 Spearsman\u2019s rank correlation","58458b52":"**Data Set 3**\nThis data Set is extracted from above given arrays. I have added some more variables to make code refined","a81954c1":"**Question#10 Show the graphics and an explain the result**\n\n    Explanation:\n*     The above given graph (histogram) shows the distribution of age of males. \n*     On the x-axis we have the \"age\" and on the y-axis we have \"number of males\" corresponding to that age. \n*     From the graph, we can deduce that majority of age cluster is between 20-50 years of age. \n\n            Pipeline:\n            \nThe graph is given above.\n\n1. Divide the Data into male and female.\n1. Extract the information of \"age\" from that male data set (how many males of particular age are present)\n1. Plot the data using matplotlib.\n\n","45a6a943":"# 4.2.5 Continuous Distribution","c1ed70e1":"> **Question#7. Describe an explain the result.**\n> * We made a non graphical anaylysis of data (we didn't use any kind of graphs or plot functions to get general idea about the distribution of data).\n> * Instead we just categorized data based on the frequency of each category (in our case we categorized data based on an income level and the number of people above that income level which is called frequency in data analysis terms)","d8203707":"**Question#15 Show the graphics and an explain the result**\n\n* > It is a PMF (Probability mass function). This function is used to present discrete variable.\n* > The graph is normalized graph where now the number of samples is 20. It was normalized to show distribution of female age.\n\n    Explanation:\n*     We can normalize the frequencies of the histogram by dividing\/normalizing by n, the number of samples\n*     The normalized histogram is called the Probability Mass Function.\n*     The y-axis indicates the normalization.","ad895bac":"**Question#21 Explain the result**\n\n* > For univariate data, the formula for skewness is a statistic that measures the asymmetry of the set of n data samples.\n* > Negative deviation indicates that the distribution \u201cskews left\u201d and vice versa.\n\n        Explanation:\n        \n*         In our case both the male and female population has a positive skew.\n*         Meaning that the right tail of the distribution is longer than the left. The female skewness is greater than the male, indicating that their might be more outlier in female data sets!\n\n\n","af087da1":"**Question#17 Show the graphics and an explain the result**  \n\n> * THIS IS CDF FOR FEMALE AGE\n\n> * >  The Cumulative Distribution Function (CDF), or just distribution function, describes the probability that a real-valued random variable X with a given proba- bility distribution will be found to have a value less than or equal to x.\n> * > In simpler terms it just sums up previous terms probability into next terms. P(n+1) = P(n-1) + P(n)\n> \n","d00d00bb":"**Question#16 Show the graphics and an explain the result**  \n\n* THIS IS CDF FOR MALE AGE\n\n> * >  The Cumulative Distribution Function (CDF), or just distribution function, describes the probability that a real-valued random variable X with a given proba- bility distribution will be found to have a value less than or equal to x.\n> * > In simpler terms it just sums up previous terms probability into next terms. P(n+1) = P(n-1) + P(n)\n> \n","ab590f84":"# 4.2.5.2 Normal distribution","8fba33be":"**Question#19 Show the graphics and an explain the result**  \n\n> * THIS IS CDF FOR BOTH MALE AGE AND FEMALE AGE\n\n> * >  The Cumulative Distribution Function (CDF), or just distribution function, describes the probability that a real-valued random variable X with a given proba- bility distribution will be found to have a value less than or equal to x.\n> * > In simpler terms it just sums up previous terms probability into next terms. P(n+1) = P(n-1) + P(n)\n> \n","8fab0078":"# 4.2.1 Summarizing the Data\nThe data in can be categoricalfor which a simple tabulation of the frequency of each category is the best non-graphical exploration for data analysis. For example, we can ask what is the proportion of high- income professionals in our database:"}}