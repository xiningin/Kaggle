{"cell_type":{"894a7de7":"code","3674cb18":"code","f8a0cb54":"code","51599933":"code","9ff3b977":"code","e4eba3d3":"code","5b3f782b":"code","8b4137ad":"code","7de203bf":"markdown","50f8c6d8":"markdown"},"source":{"894a7de7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport os\nprint(os.listdir(\"..\/input\"))","3674cb18":"train_all = pd.read_csv(\"..\/input\/train.csv\")","f8a0cb54":"train_no_deleted = train_all\nlabels = train_all[\"label\"]\ntrain_all = train_all.drop(labels = [\"label\"],axis = 1) \ntrain_mean = train_all.mean(axis = 0)","51599933":"g = sns.countplot(labels)\nlabels.value_counts()","9ff3b977":"train_all, test_all, labels, test_labels = train_test_split(train_all, labels, test_size = 0.1,random_state=0)","e4eba3d3":"train_all = train_all.reset_index(drop=True)\nlabels = labels.reset_index(drop=True)\ntest_all = test_all.reset_index(drop=True)\ntest_labels = test_labels.reset_index(drop=True)","5b3f782b":"train_mean = train_all.mean(axis = 0)\ntrain_zero = train_all-train_mean \ncov = ((train_all-train_all.mean(axis=0)).T).dot((train_all-train_all.mean(axis=0)))\/train_all.shape[0]\nvalues, vectors = np.linalg.eig(cov)\n\nloss_of_information = 1-sum(values[0:2])\/sum(values[:])\nz1 = np.dot(train_zero, vectors[:,0])\nz2 = np.dot(train_zero, vectors[:,1])\n\nfor i in range(10):\n    z1_digits = z1[labels==i]\n    z2_digits = z2[labels==i]\n    plt.scatter(z1_digits,z2_digits,label =\"\"+str(i))\nplt.title('Reduced Data-Training Data- PCA ')\nplt.xlabel('First Eigenvect\u00f6r')\nplt.ylabel('Second Eigenvect\u00f6r')\nplt.legend()\n\n","8b4137ad":"test_mean = test_all.mean(axis = 0)\ntest_zero_mean = test_all-train_mean\ntest_z1 = np.dot(test_zero_mean, vectors[:,0])\ntest_z2 = np.dot(test_zero_mean, vectors[:,1])\nsuccess_cnt = 0 \nfor k in range(test_z1.shape[0]):\n    distance =[]\n    distance_1 = test_z1[k]-z1\n    distance_2 = test_z2[k]-z2\n    distance = distance_1*distance_1+distance_2*distance_2\n    if(labels[np.argmin(distance)] == test_labels[k]):\n        success_cnt = success_cnt+1 \n\ntest_error_PCA = 1-(success_cnt\/test_all.shape[0])\nprint('Q2-PCA Test Error')\nprint(test_error_PCA)\n","7de203bf":"<img src=\"https:\/\/i.imgur.com\/KQW2YMp.png\" width=\"px\">","50f8c6d8":"## PCA not using any framework\n\n\nReference to this book. : Ethem Alpayd\u0131n Introduction to Machine Learning, third edition\n\nPCA software diagram is as follows\n"}}