{"cell_type":{"1af755f8":"code","b1d66d7a":"code","d29e5bff":"code","7b8eadc0":"code","61496ff8":"code","044dc1c1":"code","07febc34":"code","69b45c33":"code","419348cb":"code","21e35e4f":"code","1d2c0e18":"code","8673093a":"code","6ec5ac67":"code","f693a319":"code","dc6572b7":"code","a6630f18":"code","46c6c589":"code","0570305f":"code","771cd068":"code","293a65e0":"code","bcb69011":"code","848f2fab":"code","3cde3d63":"code","00b67748":"code","671b4947":"code","9e1f712c":"code","4a546bdc":"code","07792e6a":"code","99a441b5":"markdown","02457cda":"markdown","680960c4":"markdown","3663d6fb":"markdown","62a857c2":"markdown","68dbe169":"markdown","e43ade98":"markdown","7e6326a4":"markdown"},"source":{"1af755f8":"# getting started with the model \n# importing required libraries\/packages \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b1d66d7a":"# Data has been converted from .xlsx to .csv before importing\n\n# Importing and Reading the Dataset\ndf_en= pd.read_csv(\"..\/input\/energyeff-uci\/EnergyEff_UCI.csv\")","d29e5bff":"df_en_row_count, df_en_column_count=df_en.shape\nprint('Total number of rows:', df_en_row_count)\nprint('Total number of columns:', df_en_column_count)","7b8eadc0":"df_en.describe().iloc[:3]","61496ff8":"df_en.isna().sum()","044dc1c1":"#check column names\ndf_en.columns","07febc34":"#correlation map for features\nf,ax = plt.subplots(figsize=(7, 7))\nax.set_title('Correlation map for variables')\nsns.heatmap(df_en.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax,cmap=\"YlOrRd\")","69b45c33":"print (\"Unique values are:\\n\",df_en.nunique())","419348cb":"#Getting an idea about the distribution of Relative Compactness vs Heating Load\np = sns.barplot(data=df_en, x = 'Relative Compactness',y='Heating Load', palette='muted')","21e35e4f":"#Getting an idea about the distribution of Relative Compactness vs Cooling Load\np = sns.barplot(data=df_en, x = 'Relative Compactness',y='Cooling Load', palette='muted')","1d2c0e18":"#Getting an idea about Surface Area vs Heating Load\np = sns.barplot(data=df_en, x = 'Surface Area',y='Heating Load', palette='muted')","8673093a":"#Getting an idea about Surface Area vs Cooling Load\np = sns.barplot(data=df_en, x = 'Surface Area',y='Cooling Load', palette='muted')","6ec5ac67":"#Getting an idea about Wall Area vs Heating Load\np = sns.barplot(data=df_en, x = 'Wall Area',y='Heating Load', palette='muted')","f693a319":"#Getting an idea about Wall Area vs Cooling Load\np = sns.barplot(data=df_en, x = 'Wall Area',y='Cooling Load', palette='muted')","dc6572b7":"#Getting an idea about Roof Area vs Heating Load\np = sns.barplot(data=df_en, x = 'Roof Area',y='Heating Load', palette='muted')","a6630f18":"#Getting an idea about Roof Area vs Cooling Load\np = sns.barplot(data=df_en, x = 'Roof Area',y='Cooling Load', palette='muted')","46c6c589":"#Getting an idea about Overall Height vs Heating Load\np = sns.barplot(data=df_en, x = 'Overall Height',y='Heating Load', palette='muted')","0570305f":"#Getting an idea about Overall Height vs Cooling Load\np = sns.barplot(data=df_en, x = 'Overall Height',y='Cooling Load', palette='muted')","771cd068":"g = sns.pairplot(df_en,palette=\"husl\")","293a65e0":"#converting float outcomes to int for the regressor and checking Datatypes\ndf_en.astype({'Heating Load': 'int64','Cooling Load': 'int64'}).dtypes","bcb69011":"# Defining X and y\nX = df_en.drop(['Heating Load','Cooling Load'], axis=1)\ny = df_en['Heating Load']\n\n# Training the model\nfrom sklearn.model_selection import train_test_split\nX_train, X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42) # 80-20 split\n\n# Checking split \nprint('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_test:', X_test.shape)\nprint('y_test:', y_test.shape)","848f2fab":"#Random Forest Trial\n# Load random forest classifier \nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.ensemble import RandomForestRegressor \n \n # create regressor object \nreg= RandomForestRegressor(n_estimators = 200, random_state = 42) \n  \n# fit the regressor with x and y data \nreg.fit(X_train, y_train)   \n\n# predict the response\n\nacc_rfr = round(reg.score(X_test,y_test)* 100, 2)\nprint(\"Random Forest Regressor Accuracy:\",acc_rfr,\"%\")","3cde3d63":"y_pred = reg.predict(X_test)\ndf_en = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf_en.iloc[:5]","00b67748":"plt.scatter(y_test,y_pred)","671b4947":"# create regressor object\n\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n\n# fit the regressor with x and y data \nreg.fit(X_train, y_train)\n\n# predict the response\n\nacc_linreg = round(reg.score(X_test,y_test)* 100, 2)\nprint(\"Linear Regression Accuracy:\",acc_linreg,\"%\")","9e1f712c":"y_pred = reg.predict(X_test)\ndf_en = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf_en.iloc[:5]","4a546bdc":"plt.scatter(y_test,y_pred)","07792e6a":"#visualizing both algorithm accuracies for Heating Load using Matplotlib\nacc = ('Random Forest Regression', 'Linear Regression')\nx_pos = np.arange(len(acc))\naccuracy = [acc_rfr, acc_linreg]\nplt.figure(figsize = (7,4))\nplt.bar(x_pos, accuracy, alpha=0.7,align='center', color='b')\nplt.xticks(x_pos, acc)\nplt.ylabel('Accuracy (%)')\nplt.title('Regressor Accuracies')\nplt.show()","99a441b5":"![Energy Efficiency.jpg](attachment:34ac629a-8dd4-440c-8456-2993a5f19997.jpg)","02457cda":"Both Random Forest Regression and Linear Regression are applicable to the Heating & Cooling Load value prediction. Good prediction capability of both is evident by the higher value of accuracies (both accuracies >90%). Random Forest Regression seems to give a better accuracy than Linear Regression.","680960c4":"### <h3 style=\"background-color:#80ed99;color:black;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;\"><strong><centre>Dataset split for prediction \u23f3 <\/centre><\/strong><\/h3>","3663d6fb":"### <h3 style=\"background-color:#80ed99;color:black;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;\"><strong><centre>Importing & Reading the dataset \ud83d\udcdd <\/centre><\/strong><\/h3>","62a857c2":"<h3 style=\"background-color:#80ed99;color:black;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;\"><strong><centre>Data Exploration for the Dataset \ud83d\udd0d <\/centre><\/strong><\/h3>","68dbe169":"### <h3 style=\"background-color:#80ed99;color:black;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;\"><strong><centre>Importing Libraries & Packages \ud83d\udcda <\/centre><\/strong><\/h3>","e43ade98":"Source:\n\nThe dataset was created by Angeliki Xifara (angxifara '@' gmail.com, Civil\/Structural Engineer) and was processed by Athanasios Tsanas (tsanasthanasis '@' gmail.com, Oxford Centre for Industrial and Applied Mathematics, University of Oxford, UK). Dataset available at https:\/\/archive.ics.uci.edu\/ml\/datasets\/energy+efficiency\n\nAttribute Information:\n\nThe dataset contains eight attributes (or features, denoted by X1...X8) and two responses (or outcomes, denoted by y1 and y2). The aim is to use the eight features to predict each of the two responses.\nfor_\nSpecifically:\n\nX1 Relative Compactness, X2 Surface Area, X3 Wall Area, X4 Roof Area, X5 Overall Height, X6 Orientation, X7 Glazing Area, X8 Glazing Area Distribution,\n\ny1 Heating Load, y2 Cooling Load","7e6326a4":"### <h3 style=\"background-color:#80ed99;color:black;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;\"><strong><centre>Checking for missing values \u270f\ufe0f <\/centre><\/strong><\/h3>"}}