{"cell_type":{"ace3ac67":"code","66d4c7db":"code","99fff942":"code","e7db7bcc":"code","b0b3e8c5":"code","685ce5f3":"code","af7d618a":"code","189ab98c":"code","06dbe818":"code","e2791d8a":"code","7f1ae670":"code","1b5b2353":"code","65888e41":"code","0d128f39":"code","4c3cdd32":"code","7ef97e1d":"code","8fe6ea51":"code","e80108a5":"code","597b0c5b":"code","04f6ffbe":"code","5c88c7ef":"code","d19ca20d":"code","07a4f6c1":"code","db4bcd3e":"code","2216ae05":"code","2bfb4925":"code","8f25db50":"code","1e8ef824":"code","6e4d616d":"code","ccc30453":"code","2ae1da06":"code","212bdf59":"code","7570272c":"code","447debe8":"code","efa297c3":"code","e38a6eb1":"code","03d319ae":"code","3380b49e":"code","511c74e9":"code","2cf5e132":"code","639f75d7":"code","c9e8e0fa":"code","9a77edbf":"code","60525d27":"code","081ad02e":"code","93427d49":"code","587946d3":"code","ce2ee760":"code","f37c85e1":"code","39215b4b":"code","b8251cda":"code","58114f82":"code","296313af":"code","28b597b0":"code","667e0f7b":"code","49cd1bdd":"code","14f1b133":"code","81c36dfe":"code","d4ed0616":"code","e283c042":"code","eee8c125":"code","96eb3e12":"code","a5687bd5":"markdown","5175dc81":"markdown","02174111":"markdown","ef37e385":"markdown","6960bc6d":"markdown","9d017c60":"markdown","1207d230":"markdown","3d8a7f3c":"markdown","0e380759":"markdown"},"source":{"ace3ac67":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","66d4c7db":"loan_data = pd.read_csv(\"..\/input\/loan.csv\",low_memory=False)\nloan = loan_data","99fff942":"loan.info()","e7db7bcc":"loan.head()","b0b3e8c5":"# approx 887379 rows,74 columns\nloan.shape","685ce5f3":"loan.describe()","af7d618a":"# inspect the structure etc.\nprint(loan.info(), \"\\n\")\nprint(loan.shape)","189ab98c":"loan.columns","06dbe818":"# unique records in loan dataset\nloan.nunique()","e2791d8a":"# identify the unique number of ids in loan dataset\nlen(loan.id.unique())","7f1ae670":"len(loan.member_id.unique())","1b5b2353":"# check if there are any duplciates or nulls on id, memberid columns because there are unique.\nloan.id.notnull().sum()","65888e41":"loan.member_id.notnull().sum()","0d128f39":"loan.duplicated('id').sum()","4c3cdd32":"loan.duplicated('member_id').sum()","7ef97e1d":"# # column-wise missing values \nloan.isnull().sum()","8fe6ea51":"# summing up the missing values (column-wise) and displaying fraction of NaNs\nround(100*(loan.isnull().sum()\/len(loan.index)), 2)","e80108a5":"loan = loan.dropna(axis='columns', how='all')","597b0c5b":"# summing up the missing values (column-wise) and displaying fraction of NaNs\nround(100*(loan.isnull().sum()\/len(loan.index)), 2)","04f6ffbe":"loan.shape","5c88c7ef":"# lists number of unique values by each column\nloan.apply(lambda x: x.nunique())","d19ca20d":"# removing the columns which has single values like - NA, 0, 'f', 'n' etc.\nunique = loan.nunique()\nunique = unique[unique.values == 1]","07a4f6c1":"loan.drop(labels = list(unique.index), axis =1, inplace=True)","db4bcd3e":"print(\"So now we are left with\",loan.shape ,\"rows & columns.\")","2216ae05":"#' Url' and 'desc' columns may not be required for analysis, These can be removed. \nloan =loan.drop(['desc', 'url'],axis=1)","2bfb4925":"loan['issue_d'].head()","8f25db50":"loan['issue_month'], loan['issue_year'] = loan['issue_d'].str.split('-', 1).str","1e8ef824":"#loan.replace({'int_rate':{'%':''}},regex=True,inplace = True)\nloan['int_rate'].head()","6e4d616d":"#loan.replace({'revol_util':{'%':''}},regex=True,inplace = True)\nloan['revol_util'].head()","ccc30453":"# title is a title for the loan entered by the borrower. Set NA to empty string.\nloan.loc[pd.isnull(loan['title'])] = \"\"\nloan.loc[pd.isnull(loan['emp_title'])] = \"\"","2ae1da06":"#Columns 'term' contains char \"months\" which makes it non-numerical, so remove chars and make the column numeric\nloan.replace({'term':{' months':''}},regex=True,inplace = True)\nloan.replace({'term':{' ':''}},regex=True,inplace = True)\nloan['term'].head()","212bdf59":"# check the nulls by column wise\nround(100*(loan.isnull().sum()\/len(loan.index)), 2)","7570272c":"# lets count number of rows which has nulls.\nloan['revol_util'].isna().sum()","447debe8":"numeric_columns = ['revol_util']\nloan[numeric_columns] = loan[numeric_columns].apply(pd.to_numeric)","efa297c3":"loan['revol_util'].fillna((loan['revol_util'].median()), inplace=True)","e38a6eb1":"loan['revol_util'].isna().sum()","03d319ae":"loan.replace({'emp_length':{' years':''}},regex=True,inplace = True)\nloan.replace({'emp_length':{' year':''}},regex=True,inplace = True)\nloan['emp_length'].head()","3380b49e":"print(loan.emp_length.unique())","511c74e9":"loan.emp_length.fillna('0',inplace=True)\nloan.emp_length.replace(['0'],'n\/a',inplace=True)\nloan.emp_length.replace([''],'n\/a',inplace=True)\nprint(loan.emp_length.unique())","2cf5e132":"loan['emp_length']= loan['emp_length'].apply(lambda x:x.zfill(2))","639f75d7":"print(loan.emp_length.unique())","c9e8e0fa":"loan['emp_length'].head()","9a77edbf":"## Removed the xx from zip code column\nloan.replace({'zip_code':{'xx':''}},regex=True,inplace = True)\n#loan.zip_code.repalce(['xx'],'',inplace=True)\nloan.zip_code.head()","60525d27":"# There are three possible loan scenarios\/statuses: fully paid, current, charged-off.\n# We are interested in identifying clients who default (charged-off status) so we can\n# create an additional column to simplify the three statuses into a defaulted binary.\nloan['defaulted'] = loan['loan_status'].apply(lambda x: 'True' if x == \"Charged Off\" else 'False')","081ad02e":"loan.info()","93427d49":"numeric_columns = ['loan_amnt','funded_amnt','funded_amnt_inv','installment','annual_inc','total_pymnt','total_pymnt_inv','total_rec_prncp',\n                    'total_rec_int','total_rec_late_fee','collection_recovery_fee','recoveries','dti']\n\nloan[numeric_columns] = loan[numeric_columns].apply(pd.to_numeric)","587946d3":"loan.info()","ce2ee760":"loan['income_bin'] = round(loan['annual_inc'] \/ 10000, 0) * 10000\nloan['loan_amnt_bin'] = round(loan['loan_amnt']\/ 2500, 0) * 2500\nloan['dti_bin'] = round(loan['dti'], 0)\nloan['revol_util_bin'] = round(loan['revol_util'] \/ 10, 0) * 10","f37c85e1":"loan.info()","39215b4b":"# Checking for outliers in the continuous variables\nnum_columns = loan[['annual_inc','funded_amnt','funded_amnt_inv','loan_amnt','total_pymnt']]","b8251cda":"# Checking outliers at 25%,50%,75%,90%,95% and 99%\nnum_columns.describe(percentiles=[.25,.5,.75,.90,.95,.99])","58114f82":"# boxplot\nsns.boxplot(y=loan['annual_inc'])\nplt.title('annual_inc')\nplt.show()","296313af":"year_wise =loan.groupby(by= [loan.issue_year])[['loan_status']].count()\nyear_wise.rename(columns={\"loan_status\": \"count\"},inplace=True)\nax =year_wise.plot(figsize=(20,8))\nyear_wise.plot(kind='bar',figsize=(20,8),ax = ax)\nplt.show()","28b597b0":"plt.figure(figsize=(16,12))\nsns.boxplot(data =loan, x='purpose', y='loan_amnt', hue ='loan_status')\nplt.title('Purpose of Loan vs Loan Amount')\nplt.show()","667e0f7b":"loan_correlation = loan.corr()\nloan_correlation","49cd1bdd":"f, ax = plt.subplots(figsize=(14, 9))\nsns.heatmap(loan_correlation, \n            xticklabels=loan_correlation.columns.values,\n            yticklabels=loan_correlation.columns.values,cmap=\"YlGnBu\",annot= True)\nplt.show()","14f1b133":"plt.figure(figsize=(12,8))\nsns.barplot('issue_year', 'loan_amnt', data=loan, palette='tab10')\nplt.title('Issuance of Loans', fontsize=16)\nplt.xlabel('Year', fontsize=14)\nplt.ylabel('Average loan amount issued', fontsize=14)","81c36dfe":"palette = [\"#3791D7\", \"#E01E1B\"]\nsns.barplot(x=\"issue_year\", y=\"loan_amnt\", hue=\"loan_status\", data=loan, palette=palette, estimator=lambda x: len(x) \/ len(loan) * 100)\nax[1].set(ylabel=\"(%)\")","d4ed0616":"fig, ((ax1, ax2), (ax3, ax4))= plt.subplots(nrows=2, ncols=2, figsize=(14,6))\n\n# Change the Palette types tomorrow!\n\nsns.violinplot(x=\"grade\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax1 )\nsns.violinplot(x=\"sub_grade\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax2)\nsns.boxplot(x=\"grade\", y=\"funded_amnt\", data=loan, palette=\"Set2\", ax=ax3)\nsns.boxplot(x=\"sub_grade\", y=\"funded_amnt_inv\", data=loan, palette=\"Set2\", ax=ax4)","e283c042":"fig, ((ax1, ax2), (ax3, ax4))= plt.subplots(nrows=2, ncols=2, figsize=(14,6))\nsns.boxplot(x=\"purpose\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax1)\nsns.boxplot(x=\"home_ownership\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax2)\nsns.boxplot(x=\"term\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax3)\nsns.boxplot(x=\"verification_status\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax4)","eee8c125":"#sns.boxplot(x=\"emp_length\", y=\"loan_amnt\", data=loan, palette=\"Set2\", ax=ax4)\n\nplt.figure(figsize=(15,9))\nax = sns.boxplot(y=\"emp_length\", x=\"loan_amnt\", data=loan)\nax = plt.xlabel('Loan Amount')\nax = plt.ylabel('Employee Length')\nax = plt.title('Loan Amount Vs Employee Length')","96eb3e12":"plt.figure(figsize=(10,6))\n\n#pal = {\"Good\": \"#6bad97\", \"Bad\": \"#d8617f\"}\n\nax = sns.violinplot(x=\"loan_status\", y=\"loan_amnt\", data=loan)\nax = plt.xlabel('Loan status')\nax = plt.ylabel('Loan Amount')\nax = plt.title('Loan Amount Distribution')","a5687bd5":"Looking the infos of our dataset","5175dc81":"Time & date cleaning","02174111":"<h2> Column names <\/h2> ","ef37e385":"DATA CLEANSING - NA values","6960bc6d":"I will do some explorations through the Loan Club Data. \nHere I'm going to analyse mainly EDA and some plotting on Loan dataset to learn with python.","9d017c60":"<h2> Importing our dataset<\/h2> ","1207d230":"**Missing Value Treatment**\nLet's now move to missing value treatment. \nLet's have a look at the number of missing values in both the dataframes.","3d8a7f3c":"<h2> Knowing our data <\/h2> ","0e380759":"<h2> Importing the Librarys <\/h2> "}}