{"cell_type":{"d2a22022":"code","59b2db82":"code","3710fe7b":"code","dd245d47":"code","67cafb39":"code","13c6b461":"code","b1fb9aa7":"code","faa9d8fc":"code","3ecb7e34":"code","0e5b72d3":"code","3a7efc6d":"code","9920f581":"code","2293f589":"code","de780863":"code","7c8f85e2":"code","3ac95052":"code","cf543ffd":"code","fafea3d3":"code","635f8a3b":"code","5fed80a2":"code","3656bfe6":"code","da89280e":"code","820f8004":"code","39998f1f":"code","3debf5d2":"code","e858a431":"code","f464f017":"code","b6b2d1f9":"code","81761b5a":"code","5d58e5f6":"code","6fe069fd":"code","b54e47d9":"code","225a58ad":"code","700e7a1f":"code","b1261dc2":"code","57f8642a":"code","e4fb4ce4":"code","648d2f56":"code","1992d49e":"code","b93631cb":"code","b8ca4fef":"code","ef75fc53":"code","7e8d1d34":"code","fd4950a1":"code","806e5a44":"code","a0784449":"code","50e42e60":"code","40f642c7":"code","cf4decaa":"code","3a5500fc":"code","44db31e9":"code","a7ddf48c":"code","e956f9f8":"code","17afad24":"markdown","b325f165":"markdown","132bf3ab":"markdown","34282e6e":"markdown","72acd7ca":"markdown","eaf99ca5":"markdown","7f791250":"markdown","3abf4280":"markdown","ec498396":"markdown","82f03dee":"markdown","d1e42a6a":"markdown","7d3244b0":"markdown","68287789":"markdown","a47a2a0a":"markdown","4dd03ca2":"markdown","8b476aef":"markdown","6b1956a1":"markdown","8b46aa26":"markdown","b7bd2fda":"markdown","486bf6c6":"markdown","4cf92f4e":"markdown","0b83f850":"markdown"},"source":{"d2a22022":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59b2db82":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\nt0_start = time.time()","3710fe7b":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","dd245d47":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","67cafb39":"m.shape\nm = m.transpose()\nm.shape","13c6b461":"pData.head(2)","b1fb9aa7":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","faa9d8fc":"df.describe()","3ecb7e34":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","0e5b72d3":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","3a7efc6d":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","9920f581":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","2293f589":"i = 0\nfor g in genes[1].values:\n    if g.startswith('CCN'):\n        i+=1;print(i,g)","de780863":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","7c8f85e2":"g2 =[ 'CDKN2A' , 'CDKN2B' , 'CDKN2C' , 'CDKN2D' , 'CDKN1A' , 'CDKN1B' , 'CDKN1C' , 'CDKN3']# 'CDKN1A[2]' , \ngl = genes[1].values\n\nfor g in g2:\n    print(g, g in gl)\n","3ac95052":"gl = genes[1].values\n'RB1' in genes[1].values, 'CKS1B' in genes[1].values, 'CKS2' in gl","cf543ffd":"'CDC2L3' in genes[1].values,'CDK11' in genes[1].values,  # CDC2L3 - Synonym for  CDK11","fafea3d3":"g = 'ENSG00000107581'\nt = [ x.split('.')[0] for x in genes[0].values ]\nI = np.where(np.array(t)==g)[0][0]\nprint(g,I, g in t, genes[1].iat[I])\nl = ['E2F1', 'E2F2', 'E2F3a'] # Activators # , 'EIF3A'\nfor g in l:\n    print(g in genes[1].values)\nl = [ 'E2F3b', 'E2F4', 'E2F5', 'E2F6', 'E2F7', 'E2F8'] # Inhibitors # 'EIF3B',\nfor g in l:\n    print(g in genes[1].values)\n","635f8a3b":"list_cyclin_genes = ['CCNA1', 'CCNA2', 'CCNB1', 'CCNB2', 'CCNB3', 'CCNC','CCND1', 'CCND2', 'CCND3',\n                      'CCNE1', 'CCNE2', 'CCNF',\n'CCNG1','CCNG2',\n'CCNH',\n'CCNI','CCNI2',\n'CCNJ','CCNJL',\n'CCNK',\n'CCNL1','CCNL2',\n'CCNO',\n'CCNP',\n'CCNT1','CCNT2',\n'CCNY','CCNYL1','CCNYL2','CCNYL3']\n\nlist_cdk_genes = ['CDK1',\n'CDK2',\n'CDK3',\n'CDK4',\n'CDK5',\n'CDK6',\n'CDK7',\n'CDK8',\n'CDK9',\n'CDK10',\n'CDK11', # synonim - CDC2L2 # non in list\n'CDK12',\n'CDK13',]\n                  \nlist_cdk_inhib_genes =[ 'CDKN2A' , 'CDKN2B' , 'CDKN2C' , 'CDKN2D' , 'CDKN1A' , 'CDKN1B' , 'CDKN1C' , 'CDKN3']# 'CDKN1A[2]' \n# Cyclin-dependent kinase inhibitor 1B (p27Kip1) is an enzyme inhibitor that in humans is encoded by the CDKN1B gene.[5] It encodes a protein which belongs to the Cip\/Kip family of cyclin dependent kinase (Cdk) inhibitor proteins. The encoded protein binds to and prevents the activation of cyclin E-CDK2 or cyclin D-CDK4 complexes, and thus controls the cell cycle progression at G1. It is often referred to as a cell cycle inhibitor protein because its major function is to stop or slow down the cell division cycle\n\nlist_other_related = ['CDC6', 'RB1', 'CKS1B', 'CKS2' ]\n\nlist_selected_genes =  list_cyclin_genes + list_cdk_genes + list_cdk_inhib_genes + list_other_related\n\nlist_e2f_activators = ['E2F1', 'E2F2', 'E2F3a'] # Activators #  'EIF3A' - not from that group\nlist_selected_genes += list_e2f_activators\n\nlist_e2f_inhibitors = [ 'E2F3b', 'E2F4', 'E2F5', 'E2F6', 'E2F7', 'E2F8'] # Inhibitors, # 'EIF3B', - not from that group\nlist_selected_genes += list_e2f_inhibitors\n\n\nfor g in list_selected_genes:\n    if g in genes[1].values:\n        pass; # print(g,'Yes - found in dataset genes list')\n    else:\n        print(g,'No - not found in dataset genes list')\n    \n    ","5fed80a2":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values\n","3656bfe6":"\nd = pd.DataFrame()\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        d.loc[g,'Found'] = False\n        continue\n    d.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    v = m[:,IX1].toarray().ravel()\n\n    d.loc[g,'Expression sum'] = v.sum()\n    d.loc[g,'Count Expressed cells'] = (v != 0 ).sum()\n    v = m2[:,IX1].toarray().ravel()\n    d.loc[g,'Expression sum normed'] = (v ).sum()\n    d.loc[g,'In cc reactome'] = g in cell_cycle_genes_reactome_extended\n    \n\nd.sort_values('Expression sum', ascending = False, inplace = True)\nd.head(20)\n","da89280e":"d.tail(20)\n","820f8004":"mm = d['Found'] == True\nlist_selected_genes_ordered = list(d[mm].index)\nprint( len(list_selected_genes_ordered), list_selected_genes_ordered )","39998f1f":"t0 = time.time()\n\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        d.loc[g,'Found'] = False\n        continue\n    d.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    ensembl_id = genes[0].iat[IX1].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    d.loc[g,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n    d.loc[g,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n    d.loc[g,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    d.loc[g,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    if 0:\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])\n        print()\n\nprint( time.time() - t0, 'seconds passed')\nd.head(20)\n        ","3debf5d2":"d.sort_values('Count Pubmed', ascending = False)","e858a431":"list_main_cell_cycle_cyclins = ['CCNA1','CCNA2','CCNB1','CCNB2','CCNB3','CCND1','CCND2'\n                      ,'CCND3','CCNE1','CCNE2']\nmask1 = d.index.isin(list_main_cell_cycle_cyclins)\nd[mask1]","f464f017":"list_main_cdk = ['CDK1','CDK2','CDK3','CDK4','CDK6']\n\nmask1 = d.index.isin(list_main_cdk)\nd[mask1]","b6b2d1f9":"#list_e2f_activators = ['E2F1', 'E2F2', 'EIF3A'] # Activators\n#list_e2f_inhibitors = ['EIF3B', 'E2F4', 'E2F5', 'E2F6', 'E2F7', 'E2F8'] # Inhibitors\n\nmask1 = d.index.isin(list_e2f_activators)\ndisplay ( d[mask1] )\nmask1 = d.index.isin(list_e2f_inhibitors)\ndisplay ( d[mask1] )\n","81761b5a":"mask1 = d.index.isin(['RB1', 'CKS1B', 'CKS2'])\ndisplay ( d[mask1] )\n","5d58e5f6":"# Cyclin dependent kinase inhibitors\n\n#list_cdk_inhib_genes =[ 'CDKN2A' , 'CDKN2B' , 'CDKN2C' , 'CDKN2D' , 'CDKN1A' , 'CDKN1B' , 'CDKN1C' , 'CDKN3']# 'CDKN1A[2]' \n\nmask1 = d.index.isin( list_cdk_inhib_genes ) # ['RB1', 'CKS1B', 'CKS2'])\ndisplay ( d[mask1] )","6fe069fd":"\nfor i,g in enumerate(d.index[:3]) : #list_selected_genes:\n    name = d.loc[d.index[i], 'Name']\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        continue\n    IX1 = IX1[0]\n\n    fig = plt.figure(figsize = (20,4) )\n\n    fig.add_subplot(1,2,1)\n    v = m[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n\n    fig.add_subplot(1,2,2)\n    v = m2[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n    plt.show()\n","b54e47d9":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","225a58ad":"for g in list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","700e7a1f":"for g in ['RB1','CKS1B', 'CKS2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","b1261dc2":"# Cyclin dependent kinase inhibitors\n\n#list_cdk_inhib_genes =[ 'CDKN2A' , 'CDKN2B' , 'CDKN2C' , 'CDKN2D' , 'CDKN1A' , 'CDKN1B' , 'CDKN1C' , 'CDKN3']# 'CDKN1A[2]' \n\n\nfor g in list_cdk_inhib_genes:#  ['RB1','CKS1B', 'CKS2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()    ","57f8642a":"\nt = pd.DataFrame()\nl = list_selected_genes_ordered\nfor g in l:\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n    t[g] = v1\n    \ncm = pd.DataFrame(np.corrcoef(t.values.T), columns = l , index = l)\ncm    \n    ","e4fb4ce4":"v = np.triu(cm.values,1).ravel()\nv = v[v!=0]\nprint(pd.Series(v).describe())\nplt.plot(np.sort(v),'*-')\nplt.show()","648d2f56":"a,b =np.where(np.triu(cm.values,1) >= 0.05); print(a,b)\nt = pd.DataFrame()\nfor i in range(len(a)):\n    #print( list_selected_genes_ordered[a[i]], list_selected_genes_ordered[b[i]], cm.values[a[i],b[i] ] )\n    t.loc[i,'Gene1'] = list_selected_genes_ordered[a[i]]\n    t.loc[i,'Gene2'] = list_selected_genes_ordered[b[i]]\n    t.loc[i,'Correlation'] = cm.values[a[i],b[i] ]\nt.sort_values('Correlation', ascending = False).head(20)    ","1992d49e":"cm['CDK2'].sort_values(ascending =False).head(10)","b93631cb":"cm['CDK3'].sort_values(ascending =False).head(10)","b8ca4fef":"cm['CDK4'].sort_values(ascending =False).head(10)","ef75fc53":"cm['CDK6'].sort_values(ascending =False).head(10)","7e8d1d34":"cm['RB1'].sort_values(ascending =False).head(10)","fd4950a1":"for g in  ['CKS1B','CKS2']:\n    display(cm[g].sort_values(ascending =False).head(10))","806e5a44":"for g in  ['CKS1B','CKS2']:\n    display(cm[g].sort_values(ascending =False).head(10))","a0784449":"# HIST1H2AC \ng = 'MDM2' \n# HIST1H2AC \ng = 'TP53' \n\ng = 'CDK6'\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","50e42e60":"# HIST1H2AC \ng = 'MDM2' \n# HIST1H2AC \ng = 'TP53' \n\ng = 'RB1'\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","40f642c7":"#cm['RB1'].sort_values(ascending =False).head(10)\ng = 'RB1'\ng = 'CKS1B'\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","cf4decaa":"#cm['RB1'].sort_values(ascending =False).head(10)\ng = 'RB1'\ng = 'CKS1B'\ng = 'CKS2'\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","3a5500fc":"#cm['RB1'].sort_values(ascending =False).head(10)\ng = 'RB1'\ng = 'CKS1B'\ng = 'CKS2'\ng = 'CDKN1A'\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(100):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n        \n\nd.head(40)","44db31e9":"print(time.time() - t0_start, 'seconds passed total')","a7ddf48c":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","e956f9f8":"print(time.time() - t0_start, 'seconds passed total')","17afad24":"# Histone genes info\n\njust to keep from previous notebook \n","b325f165":"# Look on genes correlated with selected","132bf3ab":"# Look at duplicates","34282e6e":"# Some preliminary look on genes","72acd7ca":"# Load count matrix and convert it to sparse matrix csr_matrix","eaf99ca5":"# RB1 - Retinoblastoma protein, 'CKS1B', 'CKS2'","7f791250":"# Create columns with information on each cell (drug, dose, etc)","3abf4280":"# Mygene stat on selected genes","ec498396":"# Visualization colored by genes","82f03dee":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at cyclin, cyclin dependent kinases and related genes - those related to cell cycle regulation. \n\nCyclins - are proteins which heavily involved in cell cycle regulation. \nThey bind cyclin dependent kinases (CDK) and only after that these CDK start to work. \nSee https:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/228844\nhttps:\/\/microbenotes.com\/cell-cycle\/#1-cyclins\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin-dependent_kinase#CDKs_and_cyclins_in_the_cell_cycle\n\nImage for the activity of cyclins in different phases: \nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin#\/media\/File:Cyclin_Expression.svg\nCorresponding table: \n\nTable 2: Cyclins and CDKs by Cell-Cycle Phase\n\n|Phase |\tCyclin |\tCDK|\n| --- | --- | --- |\n|G0|\tC\t| Cdk3 |\n|G1|\tD, E |\tCdk4, Cdk2, Cdk6\n|S|\tA, E\t| Cdk2\n|G2|\tA\t| Cdk2, Cdk1\n|M|\tB\t| Cdk1\n\nAt the bottom of wikipedia page \nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin\nthere is \"panel\" \"Cell cycle proteins\" - press \"show\" on it - to get list of involved proteins.\n(List seems to be quite incomplete).\n\nThe fastest cycling mammalian cells in culture, crypt cells in the intestinal epithelium, have a cycle time as short as 9 to 10 hours. Stem cells in resting mouse skin may have a cycle time of more than 200 hours. Most of this difference is due to the varying length of G1, the most variable phase of the cycle. M and S do not vary much.\n( https:\/\/en.wikipedia.org\/wiki\/Cell_cycle )\n\n### Cyclins\n\n#### CCNA1 \nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin_A1\n**This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle.**\n\n#### Cyclin F CCNF\n\nIts expression pattern closely resembles the one from cyclin A. Cyclin F levels begin to rise during S phase and reaches its peak during G2.[7]\n\nE2F1, E2F2, and E2F3A are the three canonical activators of the E2F family of transcription factors. During G2, cyclin F targets all three activator E2Fs for degradation, thereby turning off a main cell-cycle transcriptional engine.\n\nhttps:\/\/en.wikipedia.org\/wiki\/CCNF\n\n\n### CDK cyclin dependent kinases \n\n**Kinase is an enzyme** that catalyzes the transfer of phosphate groups from high-energy, phosphate-donating molecules to specific substrates. This process is known as phosphorylation, where the substrate gains a phosphate group and the high-energy ATP molecule donates a phosphate group.\n\nCyclins and cyclin-dependent kinases should be understood in pair:\nas name suggests **CDK is such kinase which activates only when binds with special molecule - cyclin**.\n\n\n\n### cyclin-dependent kinase inhibitor\n\nA cyclin-dependent kinase inhibitor protein is a protein which inhibits the enzyme cyclin-dependent kinase (CDK). Several function as tumor suppressor proteins. Cell cycle progression is delayed or stopped by cyclin-dependent kinase inhibitors, abbreviated CDIs, CKIs or CDKIs. CDIs are involved in cell cycle arrest at the G1 phase.\n\nSeven cyclin-dependent kinase inhibitor proteins have thus far been identified. They are named by the small letter \"p\" followed by their molecular weight in kilodaltons. They are p15, p16, p18, p19, p21, p27, and p57.\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin-dependent_kinase_inhibitor_protein\n\n\n\n### RB1 \n**Supress cell cycle by binding to tf e2f.\nWhere e2f normally push G1->S.**\n**Also  Rb-E2F\/DP attracts HDAC to chromatin reducing transciption of S phase promoting factors.**\n\nSee https:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/229256\n\n\n### E2F \n\nE2F family - transcription factors that regulate cell cycle.\n\nE2F family members play a major role during the G1\/S transition in mammalian and plant cell cycle. \n\nActivators such as E2F1, E2F2, E2F3a promote and help carryout the cell cycle, while repressors inhibit the cell cycle.\n\nE2F activator levels are cyclic, with maximal expression during G1\/S. In contrast, E2F repressors stay constant, especially since they are often expressed in quiescent cells. Specifically, E2F5 is only expressed in terminally differentiated cells in mice.[2] The balance between repressor and activator E2F regulate cell cycle progression. When activator E2F family proteins are knocked out, repressors become active to inhibit E2F target genes.\n\nE2F is a group of genes that encodes a family of transcription factors (TF) in higher eukaryotes.\nThree of them are activators: E2F1, 2 and E2F3a. Six others act as suppressors: E2F3b, E2F4-8. All of them are involved in the cell cycle regulation and synthesis of DNA in mammalian cells. E2Fs as TFs bind to the TTTCCCGC (or slight variations of this sequence) consensus binding site in the target promoter sequence.\n\nhttps:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/229268\nhttps:\/\/en.wikipedia.org\/wiki\/E2F\n\n\n#### 'CKS1B' Suk1 or Cks\n\nSuk1 or Cks\nThe CDKs directly involved in the regulation of the cell cycle associate with small, 9- to 13-kiloDalton proteins called Suk1 or Cks.[3] These proteins are required for CDK function, but their precise role is unknown.[3] Cks1 binds the carboxy lobe of the CDK, and recognizes phosphorylated residues. It may help the cyclin-CDK complex with substrates that have multiple phosphorylation sites by increasing affinity for the substrate.\n\n\n\n\n#### Reminder in previous notebook\nwe saw: \nMDM2 top correlation (0.36) is CDKN1A (coding p21Waf1) which is biologically meaningful - see below. \ncyclin-dependent kinase inhibitor 1 or CDK-interacting protein 1, is a cyclin-dependent kinase inhibitor (CKI) that is capable of inhibiting all cyclin\/CDK complexes\n\nSee in particular here: https:\/\/www.kaggle.com\/alexandervc\/singlecell-rnaseq-exposed-to-multiple-compounds\/discussion\/227621 \n\n\n------------------\n\n\n#### Conclusions: \n\n\n-------------------\n\n### Further info on genes\n\n#### CDK1 - subunit of MPF\n\n**Structure:**\nCdk1 is a small protein (approximately 34 kilodaltons), and is highly conserved. The human homolog of Cdk1, CDC2, shares approximately 63% amino-acid identity with its yeast homolog. \nCdk1 is comprised mostly by the bare protein kinase motif, which other protein kinases share. \nCdk1, like other kinases, contains a cleft in which ATP fits.\n\n\n#### CCNA1 https:\/\/en.wikipedia.org\/wiki\/Cyclin_A1\n**This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle.**\n\n\nThe protein encoded by this gene belongs to the highly conserved cyclin family, whose members are characterized by a dramatic periodicity in protein abundance through the cell division cycle. Cyclins function as activating subunits of enzymatic complex together with cyclin-dependent kinases (CDKs). Different cyclins exhibit distinct expression and degradation patterns that contribute to the temporal coordination of cell cycle events. Cyclin A1 was shown to be expressed in testis and brain, as well as in several leukemic cell lines, and is thought to primarily function in the control of meiosis. This cyclin binds both Cdk1 and Cdk2 kinases, which give two distinct kinase activities, one appearing in S phase, the other in G2, and thus regulate separate functions in cell cycle. This cyclin was found to bind to important cell cycle regulators, such as Rb family proteins, transcription factor E2F1, and the Kip\/Cip family of CDK-inhibitor proteins.\n\n#### 'CKS1B' Suk1 or Cks \/\/\/ CKS2\n\nSuk1 or Cks\nThe CDKs directly involved in the regulation of the cell cycle associate with small, 9- to 13-kiloDalton proteins called Suk1 or Cks.[3] These proteins are required for CDK function, but their precise role is unknown.[3] Cks1 binds the carboxy lobe of the CDK, and recognizes phosphorylated residues. It may help the cyclin-CDK complex with substrates that have multiple phosphorylation sites by increasing affinity for the substrate.\n\nFunction\nThe CKS1B protein binds to the catalytic subunit of the cyclin-dependent kinases and is essential for their biological function. The CKS1B mRNA is found to be expressed in different patterns through the cell cycle in HeLa cells, which reflects a specialized role for the encoded protein.[5]\n\nCKS1B and CKS2 proteins have demonstrated principal roles in cell cycle regulation. Defined originally as suppressors of mutations in both fission and budding yeast Cdk1 genes, Cks molecules interact with Cdk1, Cdk2 and Cdk3. These Cdk-dependent enzyme complexes in cell cycle regulation frequently consist of Cdk molecules bound to a catalytic Cdk subunit, i.e. Cks and a regulatory cyclin subunit, such as a G1 cyclin, controlling Cdk function by directing cyclin-cdk complex activity toward specific and significant substrates. Malfunctions of cdk-dependent associations lead to defects into the entry of mitosis for cells.[6]\n\nCks1 in the Cdk-independent pathway involves the recognition of substrates p27Kip1 and p21cip1 by directly associating with E3 SCFSkp2 when stimulated by certainmitogenic signals, such as TGF-\u03b2.[7]\n\nClinical significance\nCks1-depleted breast cancer cells not only exhibit slowed G(1) progression, but also accumulate in G(2)-M due to blocked mitotic entry. Cdk1 expression, which is crucial for M phase entry, is drastically diminished by Cks1 depletion, and that restoration of cdk1 reduces G(2)-M accumulation in Cks1-depleted cells.\n\nCyclin-dependent kinases regulatory subunit 2 is a protein that in humans is encoded by the CKS2 gene.[5][6][7]\n\n**CKS2** https:\/\/en.wikipedia.org\/wiki\/CKS2\n\nCKS2 protein binds to the catalytic subunit of the cyclin dependent kinases and is essential for their biological function. The CKS2 mRNA is found to be expressed in different patterns through the cell cycle in HeLa cells, which reflects specialized role for the encoded protein.[7]\n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","d1e42a6a":"# Cyclin dependent kinase inhibitors","7d3244b0":"# UMAP visualization","68287789":"|Phase |\tCyclin |\tCDK|\n| --- | --- | --- |\n|G0|\tC\t| Cdk3 |\n|G1|\tD, E |\tCdk4, Cdk2, Cdk6\n|S|\tA, E\t| Cdk2\n|G2|\tA\t| Cdk2, Cdk1\n|M|\tB\t| Cdk1\n","a47a2a0a":"# Basic statistics on selected genes","4dd03ca2":"# Info on  E2F","8b476aef":"# Load information files: genes annotations, cells info etc...","6b1956a1":"# List of selected genes","8b46aa26":"# Main CDKs info\n\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin-dependent_kinase#CDKs_and_cyclins_in_the_cell_cycle\n\nTable 2: Cyclins and CDKs by Cell-Cycle Phase\n\n|Phase |\tCyclin |\tCDK|\n| --- | --- | --- |\n|G0|\tC\t|Cdk3|\n|G1|\tD, E|\tCdk4, Cdk2, Cdk6\n|S|\tA, E\t|Cdk2\n|G2|\tA\t|Cdk2, Cdk1\n|M|\tB\t|Cdk1\n","b7bd2fda":"# Normalization and log ","486bf6c6":"# Info on main cyclins (A,B,D,E)\n\n\nNotes on cyclins:\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cyclin#Types\n\nThere are several different cyclins that are active in different parts of the cell cycle and that cause the Cdk to phosphorylate different substrates. There are also several **\"orphan\" cyclins for which no Cdk partner has been identified**. For example, **cyclin F is an orphan cyclin that is essential for G2\/M** transition.[12][13] \n\nA study in C. elegans revealed the specific roles of mitotic cyclins.[14][15] Notably, recent studies have shown that **cyclin A** creates a cellular environment that promotes microtubule detachment from kinetochores in prometaphase to ensure efficient **error correction** and faithful chromosome segregation. Cells must separate their chromosomes precisely, an event that relies on the bi-oriented attachment of chromosomes to spindle microtubules through specialized structures called kinetochores. In the early phases of division, there are numerous errors in how kinetochores bind to spindle microtubules. The unstable attachments promote the correction of errors by causing a constant detachment, realignment and reattachment of microtubules from kinetochores in the cells as they try to find the correct attachment. Protein cyclin A governs this process by keeping the process going until the errors are eliminated. In normal cells, persistent cyclin A expression prevents the stabilization of microtubules bound to kinetochores even in cells with aligned chromosomes. As levels of cyclin A decline, microtubule attachments become stable, allowing the chromosomes to be divided correctly as cell division proceeds. In contrast, in cyclin A-deficient cells, microtubule attachments are prematurely stabilized. Consequently, these cells may fail to correct errors, leading to higher rates of chromosome mis-segregation.\n","4cf92f4e":"# Plot expressions of top selected genes ","0b83f850":"# Correlation of selected genes"}}