{"cell_type":{"6d141335":"code","cc7023a3":"code","988ce2e7":"code","43cfd40a":"code","417869d9":"code","74cf58ab":"code","888affb1":"code","85863c4a":"code","5eed227d":"code","feae8747":"code","3515a650":"code","c4b8062f":"code","34127f79":"code","fbbec001":"code","239a20d0":"code","cb89efbe":"code","a8154d3f":"code","793f4333":"code","2f5b75b4":"code","0f58ceed":"markdown","a262ebc5":"markdown","4996cebd":"markdown","f2f5a7c6":"markdown","8cb138d8":"markdown","2925f165":"markdown","d6a54eaf":"markdown","98d2a93b":"markdown","a452bb64":"markdown","294cc5af":"markdown","88e1b507":"markdown","ccf9840d":"markdown"},"source":{"6d141335":"import pandas as pd\nimport numpy as np\nimport json\nfrom datetime import date\nfrom datetime import datetime\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cc7023a3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nartist_df = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/artists.csv')\ntracks_df = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/\/tracks.csv')\nwith open(\"\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/\/dict_artists.json\", encoding='utf-8', errors='ignore') as json_data:\n     data = json.load(json_data, strict=False)","988ce2e7":"tracks_df","43cfd40a":"df = tracks_df.copy()\n\ndf['release_date'] = pd.to_datetime(df['release_date'])","417869d9":"corr = df.corr()\nplt.figure(figsize=(20,8))\nsns.heatmap(corr, vmax=1, vmin=-1, center=0,linewidth=.5,square=True, annot = True, annot_kws = {'size':8},fmt='.1f', cmap='BrBG_r')\nplt.title('Correlation')\nplt.show()","74cf58ab":"corr = df[[\"acousticness\",\"danceability\",\"energy\", \"instrumentalness\", \n           \"liveness\",\"tempo\", \"valence\", \"loudness\", \"speechiness\"]]\n\nplt.figure(figsize=(10,10))\nsns.heatmap(corr.corr(), annot=True)","888affb1":"df['year'] = df.apply(lambda row: row.release_date.year, axis = 1)","85863c4a":"year_avg = df[[\"acousticness\",\"danceability\",\"energy\", \"instrumentalness\", \n               \"liveness\",\"tempo\", \"valence\", \"loudness\", \"speechiness\", \"year\"]].\\\ngroupby(\"year\").mean().sort_values(by=\"year\").reset_index()\n\n# year_avg.head()\nplt.figure(figsize=(14,8))\nplt.title(\"Song Trends Over Time\", fontdict={\"fontsize\": 15})\n\nlines = [\"acousticness\",\"danceability\",\"energy\", \n         \"instrumentalness\", \"liveness\", \"valence\", \"speechiness\"]\n\nfor line in lines:\n    ax = sns.lineplot(x='year', y=line, data=year_avg)\n    \n    \nplt.ylabel(\"value\")\nplt.legend(lines)","5eed227d":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\nartist_df.drop(['id'], axis=1, inplace=True)","feae8747":"artist_df = artist_df[artist_df['genres'] != '[]']\n# Remove data due to less computational power\nartist_df = artist_df.sort_values(by=['popularity'], ascending=False)\nl = len(artist_df)\/15\nartist_df = artist_df[:round(l)]\nartist_df = artist_df.reset_index(drop=True)","3515a650":"artist_df","c4b8062f":"model = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0, stop_words='english')\ntfidf_matrix = model.fit_transform(artist_df['genres'])\n","34127f79":"cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix) ","fbbec001":"indices = pd.Series(artist_df.index, index=artist_df['name'])","239a20d0":"results = {}\nfor idx, row in artist_df.iterrows():\n    similar_indices = cosine_similarities[idx].argsort()[:-100:-1] \n    similar_items = [(cosine_similarities[idx][i], artist_df['name'][i]) for i in similar_indices] \n    results[row['name']] = similar_items[1:]","cb89efbe":"def _recommend(item_id, num):\n    recs = results[item_id][:num]   \n    preds = {}\n    for pair in recs:\n        preds[pair[1]] = pair[0]\n    return preds","a8154d3f":"_recommend('Drake', 5)","793f4333":"def _recommend_multiple(artists, num=10):\n    dict_similar = {}\n    for artist, weight in artists.items():\n        dict_similar[artist] = _recommend(artist, num)\n    artists_all = []\n    for artist, similar_artists in dict_similar.items():\n        artists_all.append(list(similar_artists.keys()))\n    artists_unique = np.unique(artists_all).tolist()\n    artists_dict = {artist: 0 for artist in artists_unique}\n    for artist, similar_artists in dict_similar.items():\n        for similar_artist, score in similar_artists.items():\n            artists_dict[similar_artist] += artists[artist] * score\n    return list({k: v for k, v in sorted(artists_dict.items(), key=lambda item: item[1], reverse=True) if k not in artists}.keys())[0:num]","2f5b75b4":"_recommend_multiple({\"Drake\": 10, \"Queen\": 8}, 5)","0f58ceed":"The Time Series Analysis of the artists","a262ebc5":"We now use content based filtering to build the recommendation model. We will use the package from sklearn.\nAlso, we remove the id column since we don't need that for the recommendation","4996cebd":"Correlation matrix of all the variables in the dataset tracks_df","f2f5a7c6":"# Recommendation Model","8cb138d8":"First, we remove all the rows with empty genres since they will not help with the recommendation.\nSecondly, we remove data from the dataset due to less computational power. If you do not want to do this, you only need to use the first line of code from the segment","2925f165":"> Before we start, I would like to ackloedge that I am learning myself and I took inspiration from sources at Stack Overflow, Kaggle and articles on Towards Data Science. Moreover, I referred to code from other contributors on this kaggle dataset like Darkstar Dream and Florian Heiny. ","d6a54eaf":"Here, we create a new column for year for ease in visualisations.","98d2a93b":"# Spotify Dataset 1922 - 2021","a452bb64":"In this notebook, we first analyse the data and do some basic visualisations before we perform a time series analysis of the artists popularity over the years.\nFollowing that, we start working on the recommendation model where we used content based filtering.","294cc5af":"Let's convert all the dates to datetime objects for easier comprehension in the future.","88e1b507":"Correlation matrix of the important variables in the dataset tracks_df","ccf9840d":"The imports I am using for the data analysis and visualisations:"}}