{"cell_type":{"ae358849":"code","7eceb3c4":"code","24256b1d":"code","8430ecc8":"code","48afb533":"code","d263f673":"code","84a77914":"code","5e8b2f1e":"code","f6d58b39":"code","167079b1":"code","bd483e06":"code","438801a0":"code","aa491d3e":"code","5a527867":"code","59247e56":"code","b26cdf8b":"code","8fe6ee65":"code","3dbbd01b":"code","7d8d82e9":"code","8f179e17":"code","9ab8f791":"code","fbede4e5":"code","c349173b":"markdown","10ba38c1":"markdown","407a1677":"markdown","cd3587e3":"markdown","ee3aef81":"markdown","e4c8cc97":"markdown","84f6d2c1":"markdown","a6b97c07":"markdown","bc857c67":"markdown","1a6a3fad":"markdown","90e89d16":"markdown","99673f9d":"markdown","0d2e4998":"markdown","dd45bf8c":"markdown","af334ccf":"markdown","dbeacaec":"markdown"},"source":{"ae358849":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings('ignore')","7eceb3c4":"tf.__version__","24256b1d":"df = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\nX = df.iloc[:, 3:-1]\ny = df.iloc[:, -1]","8430ecc8":"X.head(2)","48afb533":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX['Gender'] = le.fit_transform(X[\"Gender\"])","d263f673":"# from sklearn.compose import ColumnTransformer\n# from sklearn.preprocessing import OneHotEncoder\n# ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\n# X = np.array(ct.fit_transform(X))\n\ndumm = pd.get_dummies(X['Geography'])\n\n","84a77914":"X = pd.concat([X,dumm],axis = 1)","5e8b2f1e":"X = X.drop(\"Geography\",1)","f6d58b39":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","167079b1":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","bd483e06":"n = int(input(\"Enter number of layers: \"))\nneuron = int(input(\"Enter the number of neurons per layer: \"))\n\nann = tf.keras.models.Sequential()\nfor i in range(1,n+1):\n  ann.add(tf.keras.layers.Dense(units = neuron, activation='relu'))\n\nann.add(tf.keras.layers.Dense(units = 1, activation='sigmoid'))\n\nann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","438801a0":"epoch = int(input(\"Enter the number of epochs: \"))\nann.fit(X_train,y_train, batch_size=32, epochs = epoch)","aa491d3e":"y_pred = ann.predict(X_test)","5a527867":"y_test = np.array(y_test).reshape(-1,1)","59247e56":"from sklearn.preprocessing import binarize\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score,f1_score\nfor i in range(1,11):\n    y_pred2=binarize(y_pred,i\/10)[:]\n    cm2=confusion_matrix(y_test,y_pred2)\n    print ('With',i\/10,'threshold the Confusion Matrix is ','\\n',cm2,'\\n',\n            'with',cm2[0,0]+cm2[1,1],'correct predictions and',cm2[1,0],'Type II errors( False Negatives)','\\n\\n',\n          'Sensitivity: ',cm2[1,1]\/(float(cm2[1,1]+cm2[1,0])),'Specificity: ',cm2[0,0]\/(float(cm2[0,0]+cm2[0,1])),'\\n\\n\\n')\n    print('The accuracy score is: ',accuracy_score(y_test,y_pred2))\n    print('The f1 score is: ',f1_score(y_test,y_pred2))\n    print('\\n')","b26cdf8b":"y_pred2=binarize(y_pred,0.5)[:]","8fe6ee65":"df.head(1)","3dbbd01b":"X_test[0]","7d8d82e9":"result = ann.predict(sc.transform([[600,0,40,3,60000,2,1,1,50000,1,0,0]]))","8f179e17":"result_=binarize(result,0.5)[:]","9ab8f791":"result_","fbede4e5":"print(\"As the value of the prediction is \",int(result_[0]),\" we can retain the customer as he is not likely to switch\")","c349173b":"### If get_dummies method is used, we have to concatenate the actual dataframe and the dataframe with the dummies of the categorical features.\n\n### If OneHotEncoder was used, we need not concatenate as it will modify the actual dataframe.","10ba38c1":"### <u>Checking the performance by comparing the predicted and actual results<\/u>","407a1677":"### Importing Libraries","cd3587e3":"### Splitting the data into Train and Test","ee3aef81":"Threshold of 0.5 yields the best result. Hence,\n- [values >= 0.5] = 1 \n- [values < 0.5] = 0\n\nThe resultant values can be used as the predicted output from the model.","e4c8cc97":"### As Neural networks work on the basis of the product of the weights and the actual wegights, it is absolutely mandatory to scale the data.","84f6d2c1":"### Data Preprocessing","a6b97c07":"## <u>NOTE<\/u>\n#### The number of layers and the number of neuron per layer depends on the problem and in this case, utilizing more number of Layers resulted in the model Over fitting to the Training data.","bc857c67":"### Checking with the customer details, whether the customer will churn or not!","1a6a3fad":"### Label Encoding Ordinal features or features with only 2 levels","90e89d16":"##### Initializing ANN with input parameters","99673f9d":"##### As the resultant values are between 0 and 1 (due to the sigmoid activation function), we have to define a threshold to convert a value to either 0 or 1.","0d2e4998":"### ANN","dd45bf8c":"### Defining number of epochs and training the data","af334ccf":"### One Hot Encoding the Nominal features","dbeacaec":"##### Importing the dataset"}}