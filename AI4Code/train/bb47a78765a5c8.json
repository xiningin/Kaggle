{"cell_type":{"46bbff15":"code","22e9fec0":"code","47c47087":"code","997a963c":"code","02e25e84":"code","525727e7":"code","eb3760f0":"code","ac1087e4":"code","2c8b0174":"code","9ef930b5":"code","f6fdee3d":"code","a3eb8058":"code","59338ff1":"code","d5b6ddd7":"code","1b5aa7a4":"code","b36a83f9":"code","be0810ce":"code","f13530c6":"code","e810b6c9":"code","37acaa11":"code","5c4443e5":"code","a98a7b49":"code","91c50880":"code","73a6e3fc":"code","94016bac":"code","56815315":"code","e2a5bb52":"code","67bfa7a3":"code","7823c03c":"code","71cde6f0":"code","65782ffe":"code","e26091b3":"code","5f1e23b9":"code","96b0e092":"code","fc570483":"code","b833ac84":"code","9db83bf4":"markdown","fedb080e":"markdown","89ed6c5e":"markdown"},"source":{"46bbff15":"#importing libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import metrics\n%matplotlib inline","22e9fec0":"#Importing datasets\nfrom sklearn.datasets import load_boston\nboston = load_boston()","47c47087":"#Initialising the dataframe\ndata = pd.DataFrame(boston.data)","997a963c":"data.head()","02e25e84":"data.describe()","525727e7":"data.info()","eb3760f0":"#adding features \ndata.columns = boston.feature_names\ndata.head()","ac1087e4":"data[\"price\"] = boston.target","2c8b0174":"data.shape","9ef930b5":"data.columns","f6fdee3d":"data.describe()","a3eb8058":"#Forming the correlation matrix\ncorr = data.corr()\ncorr.shape","59338ff1":"#Plotting the heatmaps\nplt.figure(figsize=(20,20))\nsns.heatmap(corr, cbar=True, square= True, fmt ='.1f', annot=True)","d5b6ddd7":"X = data.iloc[:,0:13]\nY = data.iloc[:,13]","1b5aa7a4":"#Splitting dataset into test and training set\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test= train_test_split(X, Y, test_size = 0.2 , random_state=4)","b36a83f9":"#Fitting the dataset to regressor\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()","be0810ce":"lin_reg.fit(X_train, Y_train)","f13530c6":"#Predicting the test result\nY_pred = lin_reg.predict(X_train)","e810b6c9":"#Visualising the trainning set result\nplt.scatter(Y_train, Y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()\n","37acaa11":"# Checking Normality of errors\nsns.distplot(Y_train-Y_pred)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show()","5c4443e5":"# Predicting Test data with the model\nY_test_pred = lin_reg.predict(X_test)","a98a7b49":"# Model Evaluation\nacc_linreg = metrics.r2_score(Y_test, Y_test_pred)\nprint('R^2:', acc_linreg)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_test, Y_test_pred))*(len(Y_test)-1)\/(len(Y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_test, Y_test_pred))\nprint('MSE:',metrics.mean_squared_error(Y_test, Y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test, Y_test_pred)))","91c50880":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor()\nregressor.fit(X_train , Y_train)","73a6e3fc":"#Predicting on train set\nY_pred= regressor.predict(X_train)","94016bac":"# Model Evaluation\nprint('R^2:',metrics.r2_score(Y_train, Y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_train, Y_pred))*(len(Y_train)-1)\/(len(Y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_train, Y_pred))\nprint('MSE:',metrics.mean_squared_error(Y_train, Y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_train, Y_pred)))","56815315":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(Y_train, Y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()\n","e2a5bb52":"#Predicting for test set\nY_pred_test = regressor.predict(X_test)","67bfa7a3":"# Model Evaluation\nacc_rf = metrics.r2_score(Y_test, Y_test_pred)\nprint('R^2:', acc_rf)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_test, Y_test_pred))*(len(Y_test)-1)\/(len(Y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_test, Y_test_pred))\nprint('MSE:',metrics.mean_squared_error(Y_test, Y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test, Y_test_pred)))","7823c03c":"#Fitting SVR to the dataset\nfrom sklearn.svm import SVR\ns_reg = SVR(kernel = 'rbf')\ns_reg.fit(X_train , Y_train)","71cde6f0":"#Predicting on train set\nY_pred= s_reg.predict(X_train)","65782ffe":"# Model Evaluation\nprint('R^2:',metrics.r2_score(Y_train, Y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_train, Y_pred))*(len(Y_train)-1)\/(len(Y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_train, Y_pred))\nprint('MSE:',metrics.mean_squared_error(Y_train, Y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_train, Y_pred)))","e26091b3":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(Y_train, Y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()\n","5f1e23b9":"#Predicting for test set\nY_pred_test = s_reg.predict(X_test)","96b0e092":"# Model Evaluation\nacc_svm = metrics.r2_score(Y_test, Y_test_pred)\nprint('R^2:', acc_svm)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_test, Y_test_pred))*(len(Y_test)-1)\/(len(Y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_test, Y_test_pred))\nprint('MSE:',metrics.mean_squared_error(Y_test, Y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test, Y_test_pred)))","fc570483":"#Visualizing the differences between actual prices and predicted values\nplt.scatter(Y_train, Y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()\n","b833ac84":"models = pd.DataFrame({\n    'Model': ['Linear Regression', 'Random Forest', 'Support Vector Machines'],\n    'R-squared Score': [acc_linreg*100, acc_rf*100, acc_svm*100]})\nmodels.sort_values(by='R-squared Score', ascending=False)\n","9db83bf4":"**SVM**","fedb080e":"**Random Forest**","89ed6c5e":"**Linear Regression**"}}