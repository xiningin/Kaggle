{"cell_type":{"27e087c0":"code","261491b4":"code","33d1cd92":"code","bba3a0f0":"code","cfbad09e":"code","c5d89301":"code","5107b62e":"code","9f35fe94":"markdown","ae2a6b26":"markdown","5857eb03":"markdown","9400d34c":"markdown","9b72fbc3":"markdown","b51b4e3c":"markdown","c12ab749":"markdown","decb4baf":"markdown"},"source":{"27e087c0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport random","261491b4":"dataset = pd.read_csv('\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv')\ndataset.head()","33d1cd92":"input_data = dataset[[\"YearsExperience\"]]\noutput_data = dataset[[\"Salary\"]]\n\nX_train, X_test, y_train, y_test = train_test_split(\n    input_data, \n    output_data, \n    test_size=0.3, \n    random_state=5\n)","bba3a0f0":"model = LinearRegression()\nmodel.fit(X_train, y_train)","cfbad09e":"model_slope = model.coef_[0][0]\nprint(\"Linear regression model slope: {}\".format(round(model_slope, 2)))\n\nmodel_y_intercept = model.intercept_[0]\nprint(\"Linear regression model y-intercept: {}\".format(round(model_y_intercept, 2)))\n\nprint(\"Linear regression model performance evaluation:\")\n\nmodel_r2 = model.score(X_test, y_test)\nprint(\" - R\\u00b2: {}\".format(round(model_r2, 2)))\n\ny_predicted_from_X_test = model_slope * X_test[\"YearsExperience\"].values + model_y_intercept\n\nmodel_rmse = mean_squared_error(\n    y_true=y_test[\"Salary\"].values, \n    y_pred=y_predicted_from_X_test,\n    squared=False\n)\nprint(\" - RMSE: ${}\".format(round(model_rmse, 2)))\n\nmodel_rse = np.sqrt(\n    np.sum(\n        (y_test[\"Salary\"].values - y_predicted_from_X_test)**2\n    ) \/ (len(y_test[\"Salary\"])-(len(model.coef_[0]) + 1))\n)\nprint(\" - RSE: ${}\".format(round(model_rse, 2)))","c5d89301":"figure = go.Figure()\n\nlinear_function_x_values = np.arange(1, 12)\nlinear_function_y_values = model_slope * linear_function_x_values + model_y_intercept\n\nfigure.add_trace(\n    go.Scatter(\n        x=linear_function_x_values, \n        y=linear_function_y_values, \n        mode='lines',\n        line=dict(\n            color='orange', \n            width=3\n        ),\n        name='Linear regression line'\n    )\n)\n\nfigure.add_trace(\n    go.Scatter(\n        x=X_train[\"YearsExperience\"], \n        y=y_train[\"Salary\"], \n        mode='markers',\n        marker=dict(\n            color='limegreen', \n            size=8,\n            line_width=1\n        ),\n        name='Training data'\n    )\n)\n\nfigure.add_trace(\n    go.Scatter(\n        x=X_test[\"YearsExperience\"], \n        y=y_test[\"Salary\"], \n        mode='markers',\n        marker=dict(\n            color='red', \n            size=8,\n            line_width=1\n        ),\n        name='Test data'\n    )\n)\n\nannotation_title = \"Model performance evaluation\"\nannotation_content = \"<b>R\\u00b2:<\/b> {}\".format(round(model_r2, 2)) \\\n    + \"   <b>RMSE:<\/b> &#36;{}\".format(round(model_rmse, 2)) \\\n    + \"   <b>RSE:<\/b> &#36;{}\".format(round(model_rse, 2))\n\nfigure.add_annotation(\n    x=0.02,\n    y=0.975,\n    xref=\"paper\",\n    yref=\"paper\",\n    text=\n        \"<span style='font-size: 13px'; 'font-family: Helvetica, Calibri';><b>{}<\/b><\/span>\".format(\n            annotation_title\n        ) \n        + \"<br><br>\" \n        + \"<span style='font-size: 9.5px'; 'font-family: Helvetica, Calibri';>{}<\/span>\".format(\n            annotation_content\n        ),\n    font=dict(size=7),\n    bordercolor=\"black\",\n    borderwidth=1.5,\n    borderpad=7.5,\n    bgcolor=\"white\",\n    showarrow=False,\n)\n\nlinear_regression_equation = \"y = {}x + {}\".format(\n    round(model_slope, 2),\n    round(model_y_intercept, 2)\n)\n\nfigure.add_annotation(\n    x=0.62,\n    y=0.52,\n    xref=\"paper\",\n    yref=\"paper\",\n    text=\"<span style='font-family: Helvetica, Calibri';><b>{}<\/b><\/span>\".format(\n        linear_regression_equation\n    ),\n    font=dict(\n        color=\"orange\", \n        size=12\n    ),\n    textangle=320,\n    showarrow=False,\n)\n\nfigure.update_layout(\n    width=650,\n    height=500,\n    title=dict(\n        text=\"<b>Linear regression model fitting results<\/b>\",\n        font=dict(size=25),\n        y=0.92,\n        x=0.5,\n        xanchor='center',\n        yanchor='top'\n    ),\n    xaxis=dict(\n        title=dict(\n            text=\"Years of experience\",\n            font=dict(size=15)\n        )\n    ),\n    yaxis=dict(\n        title=dict(\n            text=\"Salary ($)\",\n            font=dict(size=15)\n        )\n    ),\n)\n\nfigure.show()","5107b62e":"def model_test(years_of_experience):\n    \n    print(\"Years of experience: {}\".format(years_of_experience))\n    \n    actual_salary = dataset[dataset[\"YearsExperience\"] == years_of_experience][\"Salary\"].values[0]\n    print(\"Actual salary: ${}\".format(actual_salary))\n    \n    predicted_salary = round(model.predict(np.array([[years_of_experience]]))[0][0], 1)\n    print(\"Predicted salary: ${}\".format(predicted_salary))\n    \n    percentage_error = round(100*(predicted_salary - actual_salary)\/actual_salary, 2)\n    print(\"Percentage error between predicted and actual salaries: {}%\\n\".format(percentage_error))\n\nrandom_samples_from_X_test = random.sample(\n    population=list(X_test[\"YearsExperience\"].values), \n    k=3\n)\n\nfor random_sample_from_X_test in random_samples_from_X_test:\n    model_test(years_of_experience=random_sample_from_X_test)","9f35fe94":"# **Splitting the dataset into training and test sets**\n#### Splitting the dataset into two sets: one to fit the model (training set), and one to test the model (test set)","ae2a6b26":"# **Plotting the model fitting results**\n#### Plotting training data, test data, linear regression line, linear regression equation, and model performance evaluation","5857eb03":"# **Setting the model fitting results**\n#### Setting the linear regression model parameters slope and y-intercept, and the linear regression model performance evaluation metrics $R^2$, RMSE (Root Mean Square Error) and RSE (Residual Standard Error)","9400d34c":"# **Introduction**\n\n#### This notebook shows an example of the main steps of building a simple linear regression model in a succinct, straightforward, explained, and easy-to-understand way","9b72fbc3":"# **Testing the model**\n#### Testing the linear regression model by predicting salary using random samples from test set as model inputs, and calculating the percentage error between predicted and actual salaries","b51b4e3c":"# **Loading the dataset**\n#### Loading a dataset suitable for use with a linear regression model (*Salary_Data.csv*)","c12ab749":"# **Fitting the model**\n#### Fitting the linear regression model parameters with the training set","decb4baf":"# **Importing libraries**\n\n#### Importing all required libraries to run the notebook"}}