{"cell_type":{"3a85146b":"code","60a4b367":"code","74dd791c":"code","3886dc8c":"code","d968d51f":"code","d2395b08":"code","4a98ed3f":"code","1ee75648":"code","99fbd902":"code","577e354a":"code","57ad887a":"code","c66fa62c":"code","a2005e38":"code","92ed44b9":"code","26f61221":"code","e4a42a7e":"code","bb57be41":"code","7c8d5a0c":"code","a3f3b610":"code","4473e5ca":"code","4393eeac":"code","1cfd1dc6":"code","5faae902":"code","fad70923":"code","785d4018":"code","58e5f269":"code","c3f000c4":"code","11b36550":"code","5e73d7d4":"code","aee70511":"code","74e985d8":"code","a059878a":"code","ac5c8b4f":"code","f596a85d":"code","badf915f":"code","b24a9cba":"code","d3279e71":"code","59edd19a":"code","1797526c":"code","9a5906e6":"code","03c98cd4":"markdown","b425741f":"markdown","72fe0d83":"markdown","0bbaa05d":"markdown","33582cd3":"markdown","6c6913f4":"markdown","d570f497":"markdown","8a9b5406":"markdown","296d3cfd":"markdown","52801552":"markdown","663a6d93":"markdown"},"source":{"3a85146b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60a4b367":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","74dd791c":"df=pd.read_csv(\"..\/input\/us-airbnb-open-data\/AB_US_2020.csv\")\ndf.head()","3886dc8c":"df.isna().sum()","d968d51f":"df.info()","d2395b08":"df1=df.select_dtypes('float')","4a98ed3f":"np.isinf(df1.stack()).groupby(level=1).sum()","1ee75648":"df1.isna().sum()","99fbd902":"df2=df.select_dtypes(\"int\")\nnp.isinf(df2.stack()).groupby(level=1).sum()","577e354a":"df2.isna().sum()","57ad887a":"df.copy()","c66fa62c":"df.dropna()","a2005e38":"df.isna().sum().sum()","92ed44b9":"df.isna().sum()","26f61221":"df=df.replace(np.nan,0)","e4a42a7e":"df.info()","bb57be41":"mean_price = df.groupby('city').agg({'price': 'mean'})\nmean_price","7c8d5a0c":"sns.countplot(\"neighbourhood_group\",data=df)\nplt.xticks(rotation=90)","a3f3b610":"df['neighbourhood'].describe()","4473e5ca":"df['last_review'] = pd.to_datetime(df['last_review'])\ndf['last_review'] = pd.to_numeric(df['last_review'])\ndf['price'].corr(df['last_review']) ","4393eeac":"df = df.drop(['id','name','host_id','host_name','latitude','longitude','last_review'],axis=1)","1cfd1dc6":"df.shape","5faae902":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()","fad70923":"df['neighbourhood_group'] = df['neighbourhood_group'].replace(0,'null')\nneighbourhood_group = pd.DataFrame({'Neighbourhood_group':df['neighbourhood_group'].unique()})\nlabelled = le.fit_transform(neighbourhood_group['Neighbourhood_group'])\nneighbourhood_group['labelled'] = labelled\nneighbourhood_group","785d4018":"df[\"neighbourhood_group\"]=le.fit_transform(df[\"neighbourhood_group\"])\ndf[\"neighbourhood\"]=le.fit_transform(df[\"neighbourhood\"])\ndf[\"room_type\"]=le.fit_transform(df[\"room_type\"])\ndf[\"city\"]=le.fit_transform(df[\"city\"])","58e5f269":"df.info()","c3f000c4":"df['minimum_nights'] = df['minimum_nights'].astype(int)\ndf['reviews_per_month'] = df['reviews_per_month'].astype(int)","11b36550":"def normalise(feature):\n    nmx = 100\n    nmn = 0\n    \n    mx = feature.max()\n    mn = feature.min()\n    \n    return ((nmx-nmn) \/ (mx-mn) * (feature-mx) + nmx)\n\ndf = normalise(df)\n","5e73d7d4":"x=df.drop(columns=\"price\",axis=1)\ny=df[\"price\"]","aee70511":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","74e985d8":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\ny_pred=model.predict(x_test)\ny_pred","a059878a":"predictions = pd.DataFrame({\"original_Price\": y_test.values, \"predicted_Price\": y_pred})\npredictions.head(10)","ac5c8b4f":"sns.lmplot(x=\"original_Price\",y=\"predicted_Price\",data=predictions)","f596a85d":"model.score(x_test,y_test)","badf915f":"error=y_pred-y_test\nerror","b24a9cba":"from sklearn import metrics\nmodel.intercept_","d3279e71":"from sklearn.ensemble import RandomForestRegressor\nModel=RandomForestRegressor(n_estimators=200)\nModel.fit(x_train,y_train)\ny_pred=Model.predict(x_test)\n","59edd19a":"y_pred","1797526c":"predictions = pd.DataFrame({\"original_Price\": y_test.values, \"predicted_Price\": y_pred})\npredictions.head(10)","9a5906e6":"sns.scatterplot(x=\"original_Price\",y=\"predicted_Price\",data=predictions)","03c98cd4":"# split dataset","b425741f":"# coverting float to int","72fe0d83":"# handling missing values ","0bbaa05d":"# exploratory data analysis","33582cd3":"# Random forest regressor model","6c6913f4":"# normalizing dataset","d570f497":"# encoding labels into numeric values","8a9b5406":"# train model ","296d3cfd":"# linear regression model","52801552":"# finding inifite values in dataset","663a6d93":"# improting required libraries for exploratory data analysis"}}