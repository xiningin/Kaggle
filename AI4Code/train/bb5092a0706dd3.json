{"cell_type":{"f2f86727":"code","b50a5dcc":"code","fd6c9a90":"code","41245d31":"code","320ca2b0":"code","1b63860b":"code","ae7a8b29":"code","c787dacf":"code","9f5c4947":"code","154f6723":"code","0783d6ac":"code","a71c863a":"code","6dcdbdb4":"code","44c73c29":"code","b9bd95bd":"code","fcb28faa":"code","1a0d9cfe":"code","5c616b5b":"code","321562c3":"code","4431a49a":"code","1f2b2bd5":"code","1bd9ce59":"code","17dc39b0":"code","a64050ad":"code","c5602b4a":"code","1516c753":"code","8284455e":"code","423eba97":"code","7669899d":"code","45d74975":"code","030a5227":"code","2ef05870":"code","b35c9deb":"code","560cca18":"code","b6cc7edd":"code","e97fbf29":"code","9cce97da":"code","9ddd2e18":"code","7452d0c9":"code","1b35f540":"code","a8a8308a":"code","54d12286":"code","50e65441":"code","3c495023":"code","c303b11c":"code","ad4bbefa":"code","5f14f953":"code","6e775020":"markdown","f20858da":"markdown","50a4c0c4":"markdown","db08db8c":"markdown","f28c8615":"markdown","c23d7e1b":"markdown","d0ed3f11":"markdown","9174be03":"markdown","c2af2d74":"markdown","c4ec57c6":"markdown","f2b557af":"markdown","82a15dfa":"markdown","60ba8e65":"markdown","2107fe4d":"markdown","dbf3e342":"markdown","a5d5dff4":"markdown","94a2919f":"markdown","0c34ddb5":"markdown","1c12e4f8":"markdown","971fab89":"markdown","13ebeeb5":"markdown","c1b92112":"markdown","0e9e9f9c":"markdown","3b40a7c6":"markdown","2fac57d4":"markdown","b5917303":"markdown","ce3493e2":"markdown","ce2d6491":"markdown","48e2ca9c":"markdown","26f6320f":"markdown","fbbab23d":"markdown","d82bf470":"markdown","b4e52064":"markdown","9a326833":"markdown","d175f179":"markdown","44f5c37d":"markdown","fab5cf25":"markdown","67f141ce":"markdown","d7f0c67c":"markdown","f711d2d6":"markdown","2381ed7a":"markdown","da0f7050":"markdown","d16d2ce6":"markdown","1a5a447f":"markdown","0016ae96":"markdown","116f2b78":"markdown","505bf5a4":"markdown","f6b1b51e":"markdown","c7e48c0c":"markdown","bb7a4393":"markdown","2da56a37":"markdown"},"source":{"f2f86727":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)  \nimport random \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(\"Path:\", os.path.join(dirname, filename))\n        ","b50a5dcc":"df_16 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_16.csv\", error_bad_lines=False)\ndf_17 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_17.csv\", error_bad_lines=False)\ndf_18 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_18.csv\", error_bad_lines=False)\ndf_19 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_19.csv\", error_bad_lines=False)\ndf_20 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/players_20.csv\", error_bad_lines=False)\ndf_league = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/teams_and_leagues.csv\", error_bad_lines=False)","fd6c9a90":"# Drop Unnecessary columns\ndf_20 = df_20.drop(['sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], axis=1)\ndf_19 = df_19.drop(['sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], axis=1)\ndf_18 = df_18.drop(['sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], axis=1)\ndf_17 = df_17.drop(['sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], axis=1)\ndf_16 = df_16.drop(['sofifa_id', 'player_url', 'long_name', 'body_type', 'real_face', 'loaned_from', 'nation_position', 'nation_jersey_number'], axis=1)","41245d31":"stats = ['ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram',\n       'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb',\n       'lcb', 'cb', 'rcb', 'rb']\nfor col in stats:\n    new = df_20[col].str.split(\"+\", n = 1, expand = True)\n    df_20[col] = new[0]\n# Replace NaN with 0\ndf_20[stats] = df_20[stats].fillna(0)\ndf_20[stats] = df_20[stats].astype(int)\ndf_20[stats].head(6)","320ca2b0":"# Create dummy variables and append to dataframe\ndf_20 = pd.concat([df_20, pd.get_dummies(df_20['work_rate'])], axis=1)\n# Drop original work_rate column\ndf_20 = df_20.drop(['work_rate'], axis=1)\ndf_20.shape","1b63860b":"# Split the dob column to fetch month\nnew = df_20[\"dob\"].str.split(\"-\", n = 2, expand = True)\ndf_20[\"birth_month\"] = new[1].astype(int)\ndf_20[\"birth_month\"].head(6)","ae7a8b29":"df_20 = pd.concat([df_20, df_20['player_positions'].str.get_dummies(sep=', ').add_prefix('Position_')], axis=1) \n# Drop original work_rate column\ndf_20 = df_20.drop(['player_positions'], axis=1)\ndf_20.shape","c787dacf":"df_20['bmi'] = df_20['weight_kg'] \/ (df_20['height_cm']\/100)**2\ndf_19['bmi'] = df_19['weight_kg'] \/ (df_19['height_cm']\/100)**2\ndf_18['bmi'] = df_18['weight_kg'] \/ (df_18['height_cm']\/100)**2\ndf_17['bmi'] = df_17['weight_kg'] \/ (df_17['height_cm']\/100)**2\ndf_16['bmi'] = df_16['weight_kg'] \/ (df_16['height_cm']\/100)**2\ndf_20['bmi'].head(6)","9f5c4947":"# Check the missing values in the column\nmissing_data = df_20.isnull().sum().sort_values(ascending=False)\nmissing_data = missing_data.reset_index(drop=False)\nmissing_data = missing_data.rename(columns={\"index\": \"Columns\", 0: \"Value\"})\nmissing_data['Proportion'] = (missing_data['Value']\/len(df_20))*100","154f6723":"sample = missing_data[missing_data['Proportion']>10]\nfig = px.pie(sample, names='Columns', values='Proportion',\n             color_discrete_sequence=px.colors.sequential.Viridis_r,\n             title='Percentage of Missing values in Columns')\nfig.update_traces(textposition='inside', textinfo='label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","0783d6ac":"# Fill missing values of these columns by median\ncols = [\"dribbling\", \"defending\", \"physic\", \"passing\", \"shooting\", \"pace\"]\nfor col in cols:\n    df_20[col] = df_20[col].fillna(df_20[col].median())\ndf_20 = df_20.fillna(0)\ndf_20.isnull().sum()","a71c863a":"fig = go.Figure()\n\nfig = go.Figure(data=go.Scatter(\n    x = df_20['overall'],\n    y = df_20['value_eur'],\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=df_20['age'], #set color equal to a variable\n        colorscale='Plasma', # one of plotly colorscales\n        showscale=True\n    ),\n    text= df_20['short_name'],\n))\n\nfig.update_layout(title='Styled Scatter Plot (colored by Age) year 2020 - Overall Rating vs Value in Euros',\n                  xaxis_title='Overall Rating',\n                  yaxis_title='Value in Euros',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","6dcdbdb4":"import re\n# Creating a method to compare a Players growth over Time\ndef playergrowth(x):\n    a = df_20[df_20.short_name.str.startswith(x)]\n    b = df_19[df_19.short_name.str.startswith(x)]\n    c = df_18[df_18.short_name.str.startswith(x)]\n    d = df_17[df_17.short_name.str.startswith(x)]\n    e = df_16[df_16.short_name.str.startswith(x)]\n    \n    trace0 = go.Scatterpolar(\n      r = [a['pace'].values[0],a['shooting'].values[0],a['passing'].values[0],a['dribbling'].values[0],a['defending'].values[0],a['physic'].values[0],a[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = '2020'\n    )\n\n    trace1 = go.Scatterpolar(\n      r = [b['pace'].values[0],b['shooting'].values[0],b['passing'].values[0],b['dribbling'].values[0],b['defending'].values[0],b['physic'].values[0],b[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = '2019'\n    )\n    \n    trace2 = go.Scatterpolar(\n      r = [c['pace'].values[0],c['shooting'].values[0],c['passing'].values[0],c['dribbling'].values[0],c['defending'].values[0],c['physic'].values[0],c[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = '2018'\n    )\n    \n    trace3 = go.Scatterpolar(\n      r = [d['pace'].values[0],d['shooting'].values[0],d['passing'].values[0],d['dribbling'].values[0],d['defending'].values[0],d['physic'].values[0],d[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = '2017'\n    )\n    \n    trace4 = go.Scatterpolar(\n      r = [e['pace'].values[0],e['shooting'].values[0],e['passing'].values[0],e['dribbling'].values[0],e['defending'].values[0],e['physic'].values[0],e[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = '2016'\n    )\n    \n    data = [trace0, trace1, trace2, trace3, trace4]\n\n    layout = go.Layout(\n      polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 100]\n        )\n      ),\n      template=\"plotly_white\",  \n      showlegend = True,\n      font=dict(family='Cambria, monospace', size=12, color='#000000'),\n      title = \"Stats: {} from 2016 to 2020\".format(a.short_name.values[0])\n        \n    )\n    fig = go.Figure(data=data, layout=layout)\n    plotly.offline.iplot(fig, filename = \"Player stats\")","44c73c29":"# Comparing over year growth\nplayergrowth(\"Neymar\")","b9bd95bd":"fig = go.Figure()\nsample = df_20.sort_values(by='nationality')\nfig = go.Figure(data=go.Scatter(\n    x = sample['nationality'],\n    y = sample['overall'],\n    mode='markers',\n    marker=dict(\n        size=14,\n        color=sample['overall'], #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    ),\n    text= sample['short_name']\n))\n\nfig.update_layout(title='Styled Scatter Plot - Nationality vs Overall',\n                  xaxis_title='Nationality',\n                  yaxis_title='Overall Rating',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000')\n                 )\nfig.show()","fcb28faa":"fig = go.Figure()\nsample = df_20.sort_values(by='overall')\n\nfig.add_trace(go.Box(\n    x = sample['overall'],\n    y = sample['bmi'],\n    name=\"Suspected Outliers\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        size=12,\n        color='rgb(251, 158, 58)',\n        outliercolor='rgba(216, 87, 107, 0.6)',\n        line=dict(\n            outliercolor='rgba(216, 87, 107, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(73, 3, 159)',\n    text= sample['short_name']\n))\n\nfig.update_layout(title='Styled Box Plot (with Suspected Outliers) - Overall Rating vs BMI',\n                  xaxis_title='Overall Rating',\n                  yaxis_title='BMI',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'),\n                  xaxis_rangeslider_visible=True)\nfig.show()","1a0d9cfe":"fig = go.Figure()\nsample = df_20.sort_values(by='nationality')\n\nfig.add_trace(go.Box(\n    x = sample['nationality'],\n    y = sample['bmi'],\n    name=\"Suspected Outliers\",\n    boxpoints='suspectedoutliers', # only suspected outliers\n    marker=dict(\n        size=12,\n        color='rgb(180, 222, 43)',\n        outliercolor='rgba(31, 158, 137, 0.6)',\n        line=dict(\n            outliercolor='rgba(31, 158, 137, 0.6)',\n            outlierwidth=2)),\n    line_color='rgb(72, 40, 120)',\n    text= sample['short_name']\n))\n\nfig.update_layout(title='Styled Box Plot (with Suspected Outliers) - Nationality vs BMI',\n                  xaxis_title='Nationality',\n                  yaxis_title='BMI',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'),\n                  xaxis_rangeslider_visible=True)\nfig.show()","5c616b5b":"attack = ['RW', 'LW', 'ST', 'CF', 'LS', 'RS', 'RF', 'LF']\nsample = df_20.query('team_position in @attack')    \nfig = px.pie(sample, names='team_position',\n             color_discrete_sequence=px.colors.sequential.Plasma_r,\n             title='Percentage of players in Attacker Role')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","321562c3":"mid = ['CAM', 'RCM', 'CDM', 'LDM', 'RM', 'LCM', 'LM', 'RDM', 'RAM','CM', 'LAM']\nsample = df_20.query('team_position in @mid')    \nfig = px.pie(sample, names='team_position',\n             color_discrete_sequence=px.colors.sequential.Viridis_r,\n             title='Percentage of players in Midfielder Role')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","4431a49a":"defence = ['LCB', 'RCB', 'LB', 'RB', 'CB', 'RWB', 'LWB']\nsample = df_20.query('team_position in @defence')    \nfig = px.pie(sample, names='team_position',\n             color_discrete_sequence=px.colors.sequential.Magma_r,\n             title='Percentage of players in Defender Role')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","1f2b2bd5":"from scipy import stats\na = df_20[df_20['preferred_foot']=='Left'][['skill_ball_control','power_shot_power', 'attacking_finishing']] # left foot\nb = df_20[df_20['preferred_foot']=='Right'][['skill_ball_control','power_shot_power', 'attacking_finishing']] # right foot\nprint(\"Length of Samples\", len(a), len(b))","1bd9ce59":"new_a = a['skill_ball_control'].sample(n=30)\nnew_b = b['skill_ball_control'].sample(n=30)\n## Cross Checking with the internal scipy function\nt1, p1 = stats.ttest_ind(new_a,new_b, equal_var=False)\nprint(\"t = \" + str(t1))\nprint(\"p = \" + str(p1))","17dc39b0":"import matplotlib.pyplot as plt\ndata = [new_a, new_b]\nfig = plt.figure(figsize =(10, 7)) \nax = fig.add_subplot(111) \n  \n# Creating axes instance \nbp = ax.boxplot(data, patch_artist = True, \n                notch ='True', vert = 0) \n  \ncolors = ['#0000FF', '#00FF00',  \n          '#FFFF00', '#FF00FF'] \n  \nfor patch, color in zip(bp['boxes'], colors): \n    patch.set_facecolor(color) \n  \n# changing color and linewidth of \n# whiskers \nfor whisker in bp['whiskers']: \n    whisker.set(color ='#8B008B', \n                linewidth = 1.5, \n                linestyle =\":\") \n  \n# changing color and linewidth of \n# caps \nfor cap in bp['caps']: \n    cap.set(color ='#8B008B', \n            linewidth = 2) \n  \n# changing color and linewidth of \n# medians \nfor median in bp['medians']: \n    median.set(color ='red', \n               linewidth = 3) \n  \n# changing style of fliers \nfor flier in bp['fliers']: \n    flier.set(marker ='D', \n              color ='#e7298a', \n              alpha = 0.5) \n      \n# x-axis labels \nax.set_yticklabels(['a', 'b']) \n  \n# Adding title  \nplt.title(\"Customized box plot\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n      \n# show plot \nplt.show(bp) ","a64050ad":"new_a = a['power_shot_power'].sample(n=30)\nnew_b = b['power_shot_power'].sample(n=30)\n## Cross Checking with the internal scipy function\nt2, p2 = stats.ttest_ind(new_a,new_b, equal_var=False)\nprint(\"t = \" + str(t2))\nprint(\"p = \" + str(p2))","c5602b4a":"import matplotlib.pyplot as plt\ndata = [new_a, new_b]\nfig = plt.figure(figsize =(10, 7)) \nax = fig.add_subplot(111) \n  \n# Creating axes instance \nbp = ax.boxplot(data, patch_artist = True, \n                notch ='True', vert = 0) \n  \ncolors = ['#0000FF', '#00FF00',  \n          '#FFFF00', '#FF00FF'] \n  \nfor patch, color in zip(bp['boxes'], colors): \n    patch.set_facecolor(color) \n  \n# changing color and linewidth of \n# whiskers \nfor whisker in bp['whiskers']: \n    whisker.set(color ='#8B008B', \n                linewidth = 1.5, \n                linestyle =\":\") \n  \n# changing color and linewidth of \n# caps \nfor cap in bp['caps']: \n    cap.set(color ='#8B008B', \n            linewidth = 2) \n  \n# changing color and linewidth of \n# medians \nfor median in bp['medians']: \n    median.set(color ='red', \n               linewidth = 3) \n  \n# changing style of fliers \nfor flier in bp['fliers']: \n    flier.set(marker ='D', \n              color ='#e7298a', \n              alpha = 0.5) \n      \n# x-axis labels \nax.set_yticklabels(['a', 'b']) \n  \n# Adding title  \nplt.title(\"Customized box plot\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n      \n# show plot \nplt.show(bp) ","1516c753":"new_a = a['attacking_finishing'].sample(n=30)\nnew_b = b['attacking_finishing'].sample(n=30)\n## Cross Checking with the internal scipy function\nt3, p3 = stats.ttest_ind(new_a,new_b, equal_var=False)\nprint(\"t = \" + str(t3))\nprint(\"p = \" + str(p3))","8284455e":"import matplotlib.pyplot as plt\ndata = [new_a, new_b]\nfig = plt.figure(figsize =(10, 7)) \nax = fig.add_subplot(111) \n  \n# Creating axes instance \nbp = ax.boxplot(data, patch_artist = True, \n                notch ='True', vert = 0) \n  \ncolors = ['#0000FF', '#00FF00',  \n          '#FFFF00', '#FF00FF'] \n  \nfor patch, color in zip(bp['boxes'], colors): \n    patch.set_facecolor(color) \n  \n# changing color and linewidth of \n# whiskers \nfor whisker in bp['whiskers']: \n    whisker.set(color ='#8B008B', \n                linewidth = 1.5, \n                linestyle =\":\") \n  \n# changing color and linewidth of \n# caps \nfor cap in bp['caps']: \n    cap.set(color ='#8B008B', \n            linewidth = 2) \n  \n# changing color and linewidth of \n# medians \nfor median in bp['medians']: \n    median.set(color ='red', \n               linewidth = 3) \n  \n# changing style of fliers \nfor flier in bp['fliers']: \n    flier.set(marker ='D', \n              color ='#e7298a', \n              alpha = 0.5) \n      \n# x-axis labels \nax.set_yticklabels(['a', 'b']) \n  \n# Adding title  \nplt.title(\"Customized box plot\") \n  \n# Removing top axes and right axes \n# ticks \nax.get_xaxis().tick_bottom() \nax.get_yaxis().tick_left() \n      \n# show plot \nplt.show(bp) ","423eba97":"# Creating a method to compare 5 Players\ndef top5(ls_name, column, value):\n    x = df_20[df_20[\"short_name\"] == ls_name[0]]\n    y = df_20[df_20[\"short_name\"] == ls_name[1]]\n    z = df_20[df_20[\"short_name\"] == ls_name[2]]\n    az = df_20[df_20[\"short_name\"] == ls_name[3]]\n    bz = df_20[df_20[\"short_name\"] == ls_name[4]]\n\n    \n    trace0 = go.Scatterpolar(\n      r = [x['pace'].values[0],x['shooting'].values[0],x['passing'].values[0],x['dribbling'].values[0],x['defending'].values[0],x['physic'].values[0],x[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = x.short_name.values[0]\n    )\n\n    trace1 = go.Scatterpolar(\n      r = [y['pace'].values[0],y['shooting'].values[0],y['passing'].values[0],y['dribbling'].values[0],y['defending'].values[0],y['physic'].values[0],y[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = y.short_name.values[0]\n    )\n    \n    trace2 = go.Scatterpolar(\n      r = [z['pace'].values[0],z['shooting'].values[0],z['passing'].values[0],z['dribbling'].values[0],z['defending'].values[0],z['physic'].values[0],z[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = z.short_name.values[0]\n    )\n    \n    trace3 = go.Scatterpolar(\n      r = [az['pace'].values[0],az['shooting'].values[0],az['passing'].values[0],az['dribbling'].values[0],az['defending'].values[0],az['physic'].values[0],az[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = az.short_name.values[0]\n    )\n    \n    trace4 = go.Scatterpolar(\n      r = [bz['pace'].values[0],bz['shooting'].values[0],bz['passing'].values[0],bz['dribbling'].values[0],bz['defending'].values[0],bz['physic'].values[0],bz[\"overall\"].values[0]],\n      theta = ['Pace','Shooting','Passing','Dribbling','Defending','Physic','Overall'],\n      fill = 'toself',\n      name = bz.short_name.values[0]\n    )\n    \n    \n    data = [trace0, trace1, trace2, trace3, trace4]\n\n    layout = go.Layout(\n      polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 100]\n        )\n      ),\n      template=\"plotly_white\",  \n      showlegend = True,\n      font=dict(family='Cambria, monospace', size=12, color='#000000'),\n      title = \"{} stats comparison for top 5 under \u20ac{} -: {} vs {} vs {} vs {} vs {}\".format(column, value, x.short_name.values[0], y.short_name.values[0], z.short_name.values[0], az.short_name.values[0], bz.short_name.values[0] )\n        \n    )\n    fig = go.Figure(data=data, layout=layout)\n    plotly.offline.iplot(fig, filename = \"Player stats\")\n    return None\n\n# Creating a method to pick top 5 player in position\ndef position(pos, value):\n    column = str('Position_')+str.upper(pos)\n    print(\"You've Entered Position: \",column)\n    print(\"You've Entered Value \u20ac: \", value)\n    ls_name = df_20[(df_20[column]==1) & (df_20['value_eur']<=value)]['short_name'].head(5).values\n    print(ls_name)\n    top5(ls_name, column, value)\n    return None","7669899d":"position('lb', 34000000)","45d74975":"position('cdm', 44000000)","030a5227":"def alternate_position(player, df_20):\n    # Get player's index\n    idx = df_20[df_20['short_name']==player].index[0]\n    sample_1 = df_20.iloc[:,68:94]\n    # Find 5 highest scores per position of player\n    ls = sample_1.loc[idx].nlargest(5).index[0:].values\n    ls = ls.tolist()\n    sample_2 = df_20.iloc[idx,104:119]\n    # Identify positions which are not current playing positions\n    ls2 = sample_2[sample_2==1].index[:].values\n    # Make index values lower case\n    ls2 = list(map(lambda x: x.lower(), ls2.tolist()))\n    ls2 = [re.sub(r'position_', '', i) for i in ls2]\n    # Find Positions with highest rating and are not currently playing positions\n    alt_pos = set(ls)-(set(ls2))\n    print(\"Alternate Playing Positions for {} are\".format(player))\n    for i in alt_pos:\n        print(\"Position: {}, Rating: {}\".format(str.upper(i), df_20[i].values[idx]))\n    return None","2ef05870":"alternate_position(\"P. Pogba\", df_20)","b35c9deb":"alternate_position('M. Salah', df_20)","560cca18":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA","b6cc7edd":"sample = df_20.select_dtypes(include='number')\nprint(sample.head())","e97fbf29":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(12,12))\n\n# Compute the correlation matrix\ncorr = sample.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=\"GnBu\", vmax=.3, center=0,\n            square=True, linewidths=.7, cbar_kws={\"shrink\": .7})","9cce97da":"scaled = StandardScaler()\nX = scaled.fit_transform(sample)\nrecommendations = NearestNeighbors(n_neighbors=6,algorithm='kd_tree')\nrecommendations.fit(X)\nplayer_index = recommendations.kneighbors(X)[1]\n","9ddd2e18":"# Define a function to get Player's Index\ndef get_index(x):\n    return df_20[df_20['short_name']==x].index.tolist()[0]\n\n# Fetch 5 indexes of similar players\ndef recommend_similar(player):\n    print(\"These are 5 players similar to {} : \".format(player))\n    index=  get_index(player)\n    for i in player_index[index][1:]:\n        print(\"Name: {}\\nOverall: {}\\nMarket Value: \u20ac{}\\nAge: {}\\nBMI: {:.2f}\\n\".format(df_20.iloc[i]['short_name'],df_20.iloc[i]['overall'], df_20.iloc[i]['value_eur'], df_20.iloc[i]['age'], df_20.iloc[i]['bmi']))","7452d0c9":"recommend_similar('E. Hazard')","1b35f540":"recommend_similar('J. Gomez')","a8a8308a":"recommend_similar('Alisson')","54d12286":"sample = df_20.sort_values(by=['overall'], ascending=False)\nnew_sample = pd.DataFrame(columns = [\"overall\", \"pace\", \"shooting\", \"passing\", \"dribbling\", \"defending\", \"physic\", \"team\"])\nfor club in sample['club'].unique():\n    overall = sample[sample['club']==club][0:24]['overall'].median()\n    pace = sample[sample['club']==club][0:24]['pace'].median()\n    shooting = sample[sample['club']==club][0:24]['shooting'].median()\n    passing = sample[sample['club']==club][0:24]['passing'].median()\n    dribbling = sample[sample['club']==club][0:24]['dribbling'].median()\n    defending = sample[sample['club']==club][0:24]['defending'].median()\n    physic = sample[sample['club']==club][0:24]['physic'].median()\n    team = club\n    data = [overall, pace, shooting, passing, dribbling, defending, physic, team]\n    df_length = len(new_sample)\n    new_sample.loc[df_length] = data","50e65441":"new_sample","3c495023":"scaled = StandardScaler()\nX = scaled.fit_transform(new_sample.iloc[:,0:7])\nrecommendations = NearestNeighbors(n_neighbors=4,algorithm='kd_tree')\nrecommendations.fit(X)\nclub_index = recommendations.kneighbors(X)[1]","c303b11c":"# Define a function to get Club's Index\ndef get_index(x):\n    return new_sample[new_sample['team']==x].index.tolist()[0]\n\n# Fetch 5 indexes of similar players\ndef recommend_similar(club):\n    print(\"These are 3 clubs similar to {} : \".format(club))\n    index=  get_index(club)\n    for i in club_index[index][1:]:\n        print(\"Name: {}\\nOverall: {}\\nPace: {}\\nShooting: {}\\nPassing: {}\\nDribbling: {}\\nDefending: {}\\n\".format(new_sample.iloc[i]['team'],new_sample.iloc[i]['overall'],new_sample.iloc[i]['pace'],new_sample.iloc[i]['shooting'],new_sample.iloc[i]['passing'],new_sample.iloc[i]['dribbling'],new_sample.iloc[i]['defending']))","ad4bbefa":"recommend_similar('FC Barcelona')","5f14f953":"recommend_similar('FC Bayern M\u00fcnchen')","6e775020":"**Comments:** This scatterpolar chart illustrates the ratings in various aspect of a player over 5 yrs. Here we've taken an example of rising star player to identify the growth over time.","f20858da":"### 2: Correlation Matrix","50a4c0c4":"# <a id='5'> Player Recommendation <\/a>","db08db8c":"### <a id='1.3'> 3: Player's DOB <\/a>\nClean and fetch the month value from dob column to use for analysis.","f28c8615":"# <a id='3'> Pick Top 5 Players per Position <\/a>\nAvailable Positions: CAM, CB, CDM, CF, CM, GK, LB, LM, LW, LWB, RB, RM, RW, RWB, ST","c23d7e1b":"### <a id='1.5'> 5. BMI: New feature creation <\/a>\nCreation of a BMI feature using Weight_kg & Height_cm and use it instead of 'body_type' feature.","d0ed3f11":"### Test 3: Alisson","9174be03":"**Comments:** The player recommendation system takes into account 111 attributes to compute similarity among players based on their skillset, physical attributes, playing position, preferred foot, value, age, and work rate. Having a player recommendation system allows scouts and performance coaches to identify a player which they will be targeting in tranfer window market to buy or to fill a replacement position of outgoing player.","c2af2d74":"# <a id='2'> Exploratory Data Analysis <\/a>","c4ec57c6":"### Finishing\nFor unequal variance t-test (Welch's t-test) set equal_var=False <br>\nFor equal variance t-test set equal_var=True","f2b557af":"### Test 1: Eden Hazard","82a15dfa":"# <a id='6'> Club Similarity Rating<\/a>","60ba8e65":"Two Sample independent t-test Used to compare the means of two independent groups. For example, we have two different playing foots (Left foot and Right foot) and would like to compare if the overall rating of left-foot is significantly different from right-foot.\n<br>\n\n* Null hypotheses: Two group means are equal\n* Alternative hypotheses: Two group means are different (two-tailed)\n* Alternative hypotheses: Mean of one group either greater or lesser than another group (one-tailed)","2107fe4d":"### <a id='2.5'> 5: Box Plot (with Suspected Outliers) - Nationality vs BMI <\/a>","dbf3e342":"### Test 2: FC Bayern M\u00fcnchen","a5d5dff4":"### <a id='1.1'> 1: Position Columns <\/a>\nClean, Process and Assign the new attributes to columns listed below. These columns will be used to identify best alternate playing position based on ratings:\n<br>\n'ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb'","94a2919f":"**Comments:** This scatter plot illustrates the value of a player based on their overall rating. Here our key focus is on top right corner. Here we can notice that players with highest overall rating are valued more based on age group 25-30. Most players which are above 30 yrs are valued less despite their high overall. In this kernel we will further explore about player value and overall.","0c34ddb5":"### 1: Fetch numeric columns","1c12e4f8":"### Part I : With this kernel I have tried to achieve following KPIs dealt on Scout and Performance level for ESports using the dataset provided from year 2015 to year 2020. Dataset source: [FIFA 20](https:\/\/www.kaggle.com\/stefanoleone992\/fifa-20-complete-player-dataset)\n\nThe following KPI's useful for ESports:\n1. Pick Top 5 players per position based on value constraint (Buy\/Loan\/Youth).\n2. Recommend alternate playing position for player.\n3. Player Recommendation for team.\n4. Club Similarity Rating.","971fab89":"### Test 2: J. Gomez","13ebeeb5":"### <a id='2.3'> 3: Scatter Plot - Nationality vs Overall <\/a>","c1b92112":"### <a id='2.1'> 1: Scatter Plot (colored by Age) year 2020 - Overall Rating vs Value in Euros <\/a>","0e9e9f9c":"### <a id='1.2'> 2: Player's Work Rate <\/a>\nConvert the categorical values in Work Rate column in integer values. These columns are used to identify players work rate in offense and defence. Having one-hot encoding them provides us to use these features in further analysis and recommendations.","3b40a7c6":"### Test 1: 'LB'","2fac57d4":"**Comments:** This scatter plot is really interesting as it provides an overview of spread of player's rated across y-axis per nationality (x-axis). Here we can suspect clearly few outliers i.e. players with relatively high overall and relatively low overall. Also, this scatter plot highlights that specific countries with more players playing the game at league level hinting towards possible scouting destination.","b5917303":"### Shot Power\nFor unequal variance t-test (Welch's t-test) set equal_var=False <br>\nFor equal variance t-test set equal_var=True","ce3493e2":"# Index","ce2d6491":"**Part 2 of this kernel containing more challenging and vital KPI's with advance analytics will be releasing soon. Until then if you like this kernel please don't forget to upvote. And if you've any feedback please mention it in comment section.**","48e2ca9c":"![](https:\/\/i.ytimg.com\/vi\/xehD6lmwm2s\/maxresdefault.jpg)","26f6320f":"### <a id='1.7'> 7: Fill Missing Values <\/a>\nColumns: \"dribbling\", \"defending\", \"physic\", \"passing\", \"shooting\", \"pace\" can't have minimum value as 0\nPosition attributes and player's position missing values have been computed in steps above.","fbbab23d":"### Test 1: P. Pogba","d82bf470":"### Test 2: M. Salah","b4e52064":"### <a id='2.4'> 4: Box Plot (with Suspected Outliers) - Overall Rating vs BMI <\/a>","9a326833":"**Comments:** This box plot highlights relationship between Nationality and BMI. Here players with generally high or low BMI colour coded in lime are confirmed outliers. Player's color coded with Green are suspected outlier. Well I was trying to look for a relationship that would identify if nationalities any relation to BMI which is false from above box plot.","d175f179":"**Comments:** From above two test scenario's we've listed out the best alternate playing position for a player. These alternate playing positions are suggested and doesn't not comprise of player's current playing positions. A club manager, scout or performance manager could try using a player in different role that might be suited to their statistics.","44f5c37d":"### <a id='2.2'> 2: Scatterpolar - Player's Growth with Time <\/a>","fab5cf25":"### <a id='2.6'> 6: Proportion of Player's per Position <\/a>","67f141ce":"* <a href='#1'>1.Data Preprocessing and Feature Engineering<\/a>\n    - <a href='#1.1'> Position Column<\/a>\n    - <a href='#1.2'> Player's Work Rate<\/a>\n    - <a href='#1.3'> Player's DOB<\/a>\n    - <a href='#1.4'> Player's Position<\/a>\n    - <a href='#1.5'> BMI<\/a>\n    - <a href='#1.6'> Missing Value Estimation<\/a>\n    - <a href='#1.7'> Fill Missing Value<\/a>\n* <a href='#2'>2. Exploratory Data Analysis<\/a>\n    - <a href='#2.1'> Overall Rating vs Value in Euros<\/a>\n    - <a href='#2.2'> Player's Growth with Time<\/a>\n    - <a href='#2.3'> Nationality vs Overall<\/a>\n    - <a href='#2.4'> Overall vs BMI<\/a>\n    - <a href='#2.5'> Nationality vs BMI<\/a>\n    - <a href='#2.6'> Proportion per Position<\/a>\n    - <a href='#2.7'> Unpaired or Independent t-test<\/a>\n* <a href='#3'>3. Pick Top 5 Players per Position<\/a><br>\n* <a href='#4'>4. Recommend Alternate Playing Position<\/a><br>\n* <a href='#5'>5. Player Recommendation<\/a><br>\n* <a href='#6'>6. Club Similarity Rating<\/a><br>","d7f0c67c":"**Comments:** This box plot highlights relationship between Overall Rating and BMI. Here players with generally high or low BMI colour coded in orange are confirmed outliers. Player's color coded with Pink are suspected outlier. One interesting find is that players having Overall Rating above 80 are relatively fitter than players with overall rating between 55-80. And our top most rated players their BMI within 21 and 25 (extremely fit).","f711d2d6":"# <a id='4'> Recommend Alternate Playing Position per Player <\/a>\nDisplay alternate playing positions of a player which are not current playing positions of the player. <br>\n*For Goalkeepers alternate playing position will have 0 ratings*","2381ed7a":"### <a id='2.7'> 7: Unpaired or Independent t test <\/a>","da0f7050":"**Comments:** From the above correlation chart, we can see a lot of Goalkeepers attributes have a strong negative correlation with the attributes possessed by a Forward, Midfielder and Defender. Players with more attacking role have higher dribbling, passing and shooting skills.","d16d2ce6":"### <a id='1.6'> 6: Missing Value Estimation <\/a>\nCount of missing elements in the columns","1a5a447f":"### Test 1: FC Barcelona","0016ae96":"### <a id='1.4'> 4: Player's Position <\/a>\nConvert the categorical values in Player's Position column in integer values. These columns are used to identify players playing positions (single-multi). Having one-hot encoding them provides us to use these features in further analysis and recommendations.","116f2b78":"**Comments:** In the above two test scenario we have listed out top 5 players suited for a playing position with a value constraint. Clubs looking for players for specific playing position with a budget constraint could identify top pick and further explore their performance to make a decisive buying decision.","505bf5a4":"### Ball Control\nFor unequal variance t-test (Welch's t-test) set equal_var=False <br>\nFor equal variance t-test set equal_var=True","f6b1b51e":"# <a id='1'> Data Preprocessing & Feature Engineering <\/a>","c7e48c0c":"### 3: Standardize, implement NearestNeighbors generate 5 similar players","bb7a4393":"### Test 2: 'CDM'","2da56a37":"**Comments:** This pie chart provides an overview of columns that have more than 10% of missing values. Here columns related to goalkeeper attributes and player tags & traits have the highest missing values."}}