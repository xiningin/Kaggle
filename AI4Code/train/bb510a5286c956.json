{"cell_type":{"ddead782":"code","35f61839":"code","48cfa210":"code","7ffa67d4":"code","3200e3c9":"code","0cdee626":"code","808130d5":"code","3ea3364f":"code","be851776":"code","0ac877aa":"code","56c6ef7b":"code","7f9aaf53":"code","83bec0db":"code","fcc80cdc":"markdown","5550e951":"markdown"},"source":{"ddead782":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras import layers \nfrom keras import models\nfrom keras import optimizers\nfrom keras.utils import to_categorical\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage import img_as_ubyte\nfrom skimage.transform import resize\n\nfrom scipy.ndimage.interpolation import rotate","35f61839":"# train data\ntrain_data = pd.read_csv('\/kaggle\/input\/fashion-mnist_train.csv')\n\n# test data\ntest_data = pd.read_csv('\/kaggle\/input\/fashion-mnist_test.csv')","48cfa210":"print('size train data:', train_data.shape)\nprint('size test data:', test_data.shape)","7ffa67d4":"# show few images\nplt.figure(figsize=(13,7))\nfor idx, img_vec in enumerate(train_data.drop('label', axis=1).values[:75]):  \n    plt.subplot(5, 15, idx+1)\n    plt.imshow(img_vec.reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=0.1, hspace=0.1)\nplt.show()","3200e3c9":"# split dataset train data and test data for ML\n\nX_data = train_data.drop('label', axis=1)\ny_data = train_data['label'].copy()\n\nX_finish = test_data.drop('label', axis=1)\ny_finish = test_data['label'].copy()\n\nprint('size train data:', X_data.shape)\nprint('size train labels:', y_data.shape)\n\nprint('size finish test data:', X_finish.shape)\nprint('size finish test labels:', y_finish.shape)","0cdee626":"# frequency occurrence train labels\nplt.subplots(figsize=(11,4))\ny_data.value_counts().sort_index().plot('bar', color='grey')\nplt.title(\"Frequency Histogram of Numbers in Training Data\")\nplt.xlabel(\"Number Value\")\nplt.ylabel(\"Frequency\")\nplt.grid(True, alpha=0.6)","808130d5":"# split data train and test and convert to Keras model\nX_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2)","3ea3364f":"# convert train data to Keras model\nX_train = X_train.values.reshape(X_train.shape[0], 28, 28 ,1)\nX_train = X_train.astype('float32') \/ 255\n\nX_test = X_test.values.reshape(X_test.shape[0], 28, 28, 1)\nX_test = X_test.astype('float32') \/ 255\n\nX_check = X_finish.values.reshape(X_finish.shape[0], 28, 28 ,1)\nX_check = X_check.astype('float32') \/ 255","be851776":"# function build model Keras\ndef build_model():\n    # add dropout between layers\n    model = models.Sequential()\n    model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)))\n    model.add(layers.MaxPooling2D((2,2)))\n    model.add(layers.Conv2D(64, (3,3), activation='relu'))\n    model.add(layers.MaxPooling2D((2,2)))\n    model.add(layers.Conv2D(64,(3,3), activation='relu'))\n    model.add(layers.Flatten())\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(10, activation='softmax'))\n    opt = optimizers.Adam(lr=0.0015, beta_1=0.9, beta_2=0.99, epsilon=None, decay=0.0, amsgrad=False)\n    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])\n    return model","0ac877aa":"# convert train labels to categorical Keras\nif len(y_train.shape) == 1:\n    y_train = to_categorical(y_train, 10)\n    y_test = to_categorical(y_test, 10)","56c6ef7b":"# train neural network\ncnn = build_model()\ncnn.fit(X_train,\n        y_train,\n        epochs=7,\n        batch_size=64)","7f9aaf53":"# get score test data model\ntest_loss, test_acc = cnn.evaluate(X_test, y_test)\ntest_acc","83bec0db":"# get score finish data model\ntest_loss, test_acc = cnn.evaluate(X_check, to_categorical(y_finish, 10))\ntest_acc","fcc80cdc":"## <b><font color='3C89F9'>Data preparation<\/font><\/b>","5550e951":"## <b><font color='3C89F9'>Deep Learning<\/font><\/b><\/font> by Keras<\/b>"}}