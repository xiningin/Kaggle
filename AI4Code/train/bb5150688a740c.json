{"cell_type":{"de096098":"code","b1edf5e2":"code","7340c5b1":"code","f3020501":"code","7f9fe9b4":"code","45e416e2":"code","e0e0ed0e":"code","d0afdc01":"code","d405ffdb":"code","1f74a4c1":"code","b327217d":"code","6ce3a59f":"code","6fc09772":"code","f542cc9b":"code","6aab5f15":"code","0b7deb3a":"code","16d144f8":"code","f5045119":"code","44b55a13":"code","0fed2b79":"code","9b829d6d":"code","fd213e14":"code","91422b8b":"code","68bfa298":"code","2abb169f":"code","759028d4":"code","e1d72bd3":"code","44215732":"code","875cc28d":"code","7f490e1b":"code","a78d201a":"code","02994bd0":"code","56d6eed3":"code","764ba907":"code","0005ca57":"code","6d4441fb":"code","f9b62e52":"code","5d65fee8":"code","0c551bd0":"code","ff12fcb3":"code","00445b08":"code","bd48c289":"code","f11bfa85":"code","756f290a":"code","82219af0":"code","a6ae2e19":"markdown","054feac1":"markdown","343efb73":"markdown","75b09e79":"markdown","08526524":"markdown","81dc87d1":"markdown","195bda21":"markdown","e3fbd65a":"markdown","45b1f1fa":"markdown","51c4b5fa":"markdown","43b3d82e":"markdown","28f894b9":"markdown","ca780952":"markdown","103d5e90":"markdown"},"source":{"de096098":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1edf5e2":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statistics\nfrom wordcloud import WordCloud, STOPWORDS","7340c5b1":"data50=pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Future50.csv')\ndata50.head()","f3020501":"data250=pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Top250.csv')\ndata250","7f9fe9b4":"data100=pd.read_csv('..\/input\/restaurant-business-rankings-2020\/Independence100.csv')\ndata100.head()","45e416e2":"data50.replace({'%':''}, regex=True, inplace=True) \ndata50['YOY_Sales'] = data50['YOY_Sales'].astype(float)\ndata50['YOY_Units'] = data50['YOY_Units'].astype(float)\ndata50.head()","e0e0ed0e":"data250.replace({'%':''}, regex=True, inplace=True) \ndata250['YOY_Sales'] = data50['YOY_Sales'].astype(float)\ndata250['YOY_Units'] = data50['YOY_Units'].astype(float)\ndata250.head()","d0afdc01":"data50.dtypes","d405ffdb":"number_type=data50.loc[:, data50.dtypes != np.object]\nnumber_type.head()","1f74a4c1":"object_type=data50.loc[:, data50.dtypes == np.object]\nobject_type.head()","b327217d":"plt.figure(figsize=(12,12))\nsns.pairplot(data50, x_vars=number_type.columns, y_vars=[\"YOY_Units\"], height=5, aspect=.8, kind=\"reg\")","6ce3a59f":"sns.displot(data50, x=\"YOY_Units\", hue=\"Franchising\", kind=\"ecdf\")","6fc09772":"data50.Location.unique()","f542cc9b":"new = data50[\"Location\"].str.split(\",\", n = 1, expand = True) \ndata50[\"City\"]= new[0] \ndata50[\"State\"]= new[1] \ndata50.drop(columns =[\"Location\"], inplace = True) \ndata50.head()","6aab5f15":"sns.jointplot(data=data50, x=\"YOY_Units\", y=\"City\")","0b7deb3a":"sns.jointplot(data=data50, x=\"YOY_Units\", y=\"State\")","16d144f8":"data250.dtypes","f5045119":"number250_type=data250.loc[:, data250.dtypes != np.object]\nprint(\"Number type columns : \",number250_type.columns)\nprint(\" \")\nobject250_type=data250.loc[:, data250.dtypes == np.object]\nprint(\"Object type columns : \",object250_type.columns)","44b55a13":"for i in data250.columns:\n    if data250[i].isnull().sum()>0:\n        print(\"Have null\",i,\"column : \",str((data250[i].isnull().sum()\/len(data250))*100)+\"%\")","0fed2b79":"plt.figure(figsize=(12,12))\nsns.pairplot(data250, x_vars=number250_type.columns, y_vars=[\"YOY_Units\"], height=5, aspect=.8, kind=\"reg\")","9b829d6d":"sns.displot(data50, x=\"Units\", kind=\"kde\")","fd213e14":"mean_units = statistics.mean(data50['Units']) \nmean_units","91422b8b":"def change_data(row):\n    if row['Units']>=34.7: return \"Large\"\n    elif row['Units']<34.7: return \"Small\"\n    else: return 1","68bfa298":"data50.loc[:, 'Units']=data50.apply(change_data, axis=1)","2abb169f":"data50.dtypes","759028d4":"sns.displot(data50, x=\"YOY_Sales\", hue=\"Units\", multiple=\"dodge\")\nplt.title('Compare Units and YOY_Sales')","e1d72bd3":"sns.displot(data50, x=\"Sales\", hue=\"Units\", multiple=\"dodge\")\nplt.title('Compare Units and Sales')","44215732":"plt.figure(figsize=(12,12))\nsns.countplot(y=\"City\", hue=\"Units\", data=data50)\nplt.title('Compare Units and City')","875cc28d":"plt.figure(figsize=(12,12))\nsns.countplot(y=\"State\", hue=\"Units\", data=data50)\nplt.title('Compare Units and State')","7f490e1b":"sns.displot(data50, x=\"Franchising\", hue=\"Units\", multiple=\"dodge\")\nplt.title('Compare Units and Franchising')","a78d201a":"plt.figure(figsize=(5,5))\nsns.stripplot(y='YOY_Sales', x='Franchising',data=data50, jitter=True, marker='o',alpha=0.8,hue='Units')\nsns.jointplot(data=data50, x=\"Units\", y=\"YOY_Sales\")","02994bd0":"plt.figure(figsize=(5,5))\nsns.stripplot(y='Sales', x='Franchising',data=data50, jitter=True, marker='o',alpha=0.8,hue='Units')\nsns.jointplot(data=data50, x=\"Units\", y=\"Sales\")","56d6eed3":"data250.Segment_Category.unique()","764ba907":"data250.Segment_Category.replace({'&':'','\/':\"\"}, regex=True, inplace=True) ","0005ca57":"comment_words = '' \nstopwords = set(STOPWORDS) \n  \nfor val in data250.Segment_Category: \n      \n    val = str(val) \n  \n    tokens = val.split() \n      \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n      \n    comment_words += \" \".join(tokens)+\" \"\n  \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10).generate(comment_words) \n                    \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","6d4441fb":"all_cat=[]\nfor i in data250.Segment_Category.unique():\n    x=i.split(\" \")\n    for text in x:\n        if text not in all_cat:\n            all_cat.append(text)","f9b62e52":"all_cat","5d65fee8":"data250[\"Res_type\"]=data250.Segment_Category\ndata250[\"Food_type\"]=data250.Segment_Category","0c551bd0":"data250.head()","ff12fcb3":"res_list = ['Cafe', 'Service','Dining','Bar','Casual','Quick','FamilyStyle','Family']\nlist_difference = [item for item in all_cat if item not in res_list]\nprint(list_difference)","00445b08":"words=data250[\"Res_type\"]\nres_type_data=[]\nfor i in words:\n    sc = set(list_difference)\n    i=i.split(\" \")\n    i=''.join([c for c in i if c not in sc])\n    res_type_data.append(i)\ndata250[\"Res_type\"]=res_type_data\ndata250[\"Res_type\"].unique()","bd48c289":"res_list.append('Sports')\nres_list.append('Style')","f11bfa85":"words=data250[\"Food_type\"]\nfood_type_data=[]\nfor i in words:\n    sc = set(res_list)\n    i=i.split(\" \")\n    i=''.join([c for c in i if c not in sc])\n    food_type_data.append(i)\ndata250[\"Food_type\"]=food_type_data\ndata250[\"Food_type\"].unique()","756f290a":"plt.figure(figsize=(15,8))\nsns.countplot(y=\"Food_type\", data=data250)","82219af0":"plt.figure(figsize=(15,8))\nsns.countplot(y=\"Res_type\", data=data250)","a6ae2e19":"* **Future50**","054feac1":"see all words","343efb73":"* Future50","75b09e79":"Separate Location to City and State","08526524":"Split Res_type","81dc87d1":"a lot of null value T3T","195bda21":"* **Top250**","e3fbd65a":"*** Word Clound**","45b1f1fa":"I will split Segment_Category to restaurant type(ex. quick service, Fast casual, Bar) and food type(ex. Burger, Chicken)","51c4b5fa":"Split Food_type","43b3d82e":"# **Find other interesting information**","28f894b9":"I will seperate Small businesses and Large companies with mean \"Units\" value","ca780952":"# **what is YOY_Units?**","103d5e90":"# **Small businesses versus large companies?**\ncompare Units with other Attribute"}}