{"cell_type":{"ebce556e":"code","2846eb57":"code","a4b78fbc":"code","10e13747":"code","1e4a4a4d":"code","c066bd7e":"code","175c7a82":"code","466b4a34":"code","70d9dcdb":"code","d404fb97":"code","173d2bd6":"code","cf1ab89a":"code","08b1dec0":"code","e214d31e":"code","1dc82204":"code","a0b9cd7f":"code","a991dfb2":"code","c8c37c4f":"code","b7288ce8":"code","4439318c":"code","5996cb91":"code","db0bd977":"code","e93d2b25":"code","7f940e99":"code","7debd974":"code","05d7e210":"code","789709c2":"code","5d862e77":"code","7fd7f3cf":"code","cc716a16":"code","a918c434":"code","87c0d270":"markdown","8de5de3a":"markdown","878501fc":"markdown","c52356e6":"markdown","db27f20e":"markdown","3cb505eb":"markdown","8b858c61":"markdown","71c0d7fd":"markdown","f04c1446":"markdown","83486947":"markdown","a8334975":"markdown","1d482a93":"markdown","6087a136":"markdown"},"source":{"ebce556e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n!pip install fsspec\n!pip install gcsfs        \n!pip install git+https:\/\/github.com\/qubvel\/segmentation_models\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2846eb57":"!pip install tensorflow --upgrade #tensorflow\n\n!pip install -q efficientnet# pre-trained net\n\n!pip install git+https:\/\/github.com\/mjkvaak\/ImageDataAugmentor #augmentation","a4b78fbc":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\nimport zipfile\nimport csv\nimport sys\nimport os\n\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom tensorflow.keras.callbacks import LearningRateScheduler, ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.callbacks import Callback\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.models import Model\nimport efficientnet.tfkeras as efn\n\nfrom tensorflow.keras.layers import *\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\nimport PIL\nfrom PIL import ImageOps, ImageFilter\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 5\n\n%config InlineBackend.figure_format = 'svg' \n%matplotlib inline\n\n","10e13747":"EPOCHS               = 10  # training epochs\nBATCH_SIZE           = 32 # optimize batches for GPU\nLR                   = 1e-3 # learning rate\nVAL_SPLIT            = 0.2 # test size\n\nCLASS_NUM            = 10  # 10 car classes\nIMG_SIZE             = 224 # image size 224x224\nIMG_CHANNELS         = 3   # RGB\ninput_shape          = (IMG_SIZE, IMG_SIZE, IMG_CHANNELS)\n\n\nDATA_PATH = '..\/input\/sf-dl-car-classification\/'\nPATH = \"..\/working\/cars\/\"\n\n\n\nRANDOM_SEED = 69\nnp.random.seed(RANDOM_SEED)  \nPYTHONHASHSEED = 0","1e4a4a4d":"train_df = pd.read_csv(DATA_PATH+\"train.csv\")\nsample_submission = pd.read_csv(DATA_PATH+\"sample-submission.csv\")\nprint(train_df.info(),\"\\n\", \"=\"*20)\nprint(train_df.head())\nprint(\"\\n\", \"=\"*20, f\"\\nCategories: {train_df.Category.nunique()} \\n\", train_df.Category.value_counts())","c066bd7e":"print('Unloading pictures...\\n')\n# Will unzip the files so that you can see them..\nfor data_zip in ['train.zip', 'test.zip']:\n    with zipfile.ZipFile(DATA_PATH+data_zip,\"r\") as file:\n        file.extractall(PATH)\n        \nprint(os.listdir(PATH))","175c7a82":"# Let's look at the images\nplt.figure(figsize=(12,8))\n\nimage = train_df.sample(n=9)\nimg_paths = image['Id'].values\nimg_cat = image['Category'].values\n\nfor index, path in enumerate(img_paths):\n    im = PIL.Image.open(PATH+f'train\/{img_cat[index]}\/{path}')\n    plt.subplot(3,3, index+1)\n    plt.imshow(im)\n    plt.title('Class: '+str(img_cat[index]))\n    plt.axis('off')\nplt.show()","466b4a34":"import random\nfolder = '.\/cars\/train\/5'\na=random.choice(os.listdir(folder))\n\n\nimage = PIL.Image.open(folder+'\/'+a)\nimgplot = plt.imshow(image)\nplt.show()\nprint(\"Image size: \",image.size)","70d9dcdb":"from albumentations import (\n    HorizontalFlip, IAAPerspective, ShiftScaleRotate, CLAHE, RandomRotate90,\n    Transpose, ShiftScaleRotate, Blur, OpticalDistortion, GridDistortion, HueSaturationValue,\n    IAAAdditiveGaussianNoise, GaussNoise, MotionBlur, MedianBlur, IAAPiecewiseAffine,\n    IAASharpen, IAAEmboss, RandomBrightnessContrast, Flip, OneOf, Compose)\n\n\np=0.9\n\nAUGMENTATIONS = Compose([\n        RandomRotate90(),\n        Flip(),\n        Transpose(),\n        OneOf([\n            IAAAdditiveGaussianNoise(),\n            GaussNoise(),\n        ], p=0.2),\n        OneOf([\n            MotionBlur(p=0.2),\n            MedianBlur(blur_limit=3, p=0.1),\n            Blur(blur_limit=3, p=0.1),\n        ], p=0.2),\n        ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.2, rotate_limit=45, p=0.2),\n        OneOf([\n            OpticalDistortion(p=0.3),\n            GridDistortion(p=0.1),\n            IAAPiecewiseAffine(p=0.3),\n        ], p=0.2),\n        OneOf([\n            CLAHE(clip_limit=2),\n            IAASharpen(),\n            IAAEmboss(),\n            RandomBrightnessContrast(),\n        ], p=0.3),\n        HueSaturationValue(p=0.3),\n    ], p=p)","d404fb97":"# apply augmentations\nfrom ImageDataAugmentor.image_data_augmentor import *\ntrain_datagen = ImageDataAugmentor(\n        rescale=1.\/255,\n        augment = AUGMENTATIONS,\n        validation_split=VAL_SPLIT,\n        )\n        \ntest_datagen = ImageDataAugmentor(rescale=1.\/255)","173d2bd6":"# Generate images\ntrain_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',     \n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='training') # set as training data\n\ntest_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='validation') # set as validation data","cf1ab89a":"base_model = efn.EfficientNetB6(weights='imagenet', include_top=False, input_shape=input_shape)","08b1dec0":"# Let's freeze the model and only train the head\nbase_model.trainable = False","e214d31e":"import tensorflow.keras as keras\nimport tensorflow.keras.models as M\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.callbacks as C\nfrom tensorflow.keras.preprocessing import image\n\n\nmodel=M.Sequential() # Initialize\n\nmodel.add(base_model) #base\n\n#the Head v\nmodel.add(L.GlobalAveragePooling2D(),)\nmodel.add(L.Dense(256, activation='relu'))\nmodel.add(L.BatchNormalization())\nmodel.add(L.Dropout(0.25))\nmodel.add(L.Dense(CLASS_NUM, activation='softmax'))","1dc82204":"model.compile(loss=\"categorical_crossentropy\", optimizer=optimizers.Adam(lr=LR), metrics=[\"accuracy\"])\n\ncheckpoint = ModelCheckpoint('best_yet.hdf5' , monitor = ['val_accuracy'] , verbose = 1  , mode = 'max')\nearlystop = EarlyStopping(monitor='accuracy', patience=5, restore_best_weights=True)\ncallbacks_list = [checkpoint, earlystop] # callbacks for the best model and early stop if the performance doesn't improve","a0b9cd7f":"#training\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_generator.samples\/\/train_generator.batch_size,\n    validation_data = test_generator, \n    validation_steps = test_generator.samples\/\/test_generator.batch_size,\n    epochs = EPOCHS,\n    callbacks = callbacks_list\n    )","a991dfb2":"scores = model.evaluate_generator(test_generator, verbose=1)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","c8c37c4f":"model.save('..\/working\/model_last.hdf5')\nmodel.load_weights('best_yet.hdf5')","b7288ce8":"print(\"Number of layers in the base model: \", len(base_model.layers))\nbase_model.trainable = True\n\n# Fine-tune from this layer onwards\nfine_tune_at = len(base_model.layers)\/\/2\n\n# Freeze all the layers before the `fine_tune_at` layer\nfor layer in base_model.layers[:fine_tune_at]:\n    layer.trainable =  False\nprint(\"Number of trainable variables\", len(base_model.trainable_variables))","4439318c":"EPOCHS               = 10\nBATCH_SIZE           = 16 # decreasing batch size\nLR                   = 1e-4 #increasing LR to fine tune even finer","5996cb91":"# Same as before\ntrain_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',    \n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='training') # set as training data\n\ntest_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='validation') # set as validation data\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizers.Adam(lr=LR), metrics=[\"accuracy\"])\n\n  \ncheckpoint = ModelCheckpoint('best_yet.hdf5' , monitor = ['accuracy'] , verbose = 1  , mode = 'max')\nearlystop = EarlyStopping(monitor='accuracy', patience=5, restore_best_weights=True)\ncallbacks_list = [checkpoint, earlystop]\n\n# Training\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_generator.samples\/\/train_generator.batch_size,\n    validation_data = test_generator, \n    validation_steps = test_generator.samples\/\/test_generator.batch_size,\n    epochs = EPOCHS,\n    callbacks = callbacks_list\n    )","db0bd977":"scores = model.evaluate_generator(test_generator, verbose=1)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","e93d2b25":"model.save('..\/working\/model_last.hdf5')\nmodel.load_weights('best_yet.hdf5')","7f940e99":"base_model.trainable = True\nEPOCHS               = 8  \nBATCH_SIZE           = 8 #even smaller\nLR                   = 1e-5 # even larger","7debd974":"train_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',     \n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='training') # set as training data\n\ntest_generator = train_datagen.flow_from_directory(\n    PATH+'train\/',\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,\n    class_mode='categorical',\n    shuffle=True, seed=RANDOM_SEED,\n    subset='validation') # set as validation data\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=optimizers.Adam(lr=LR), metrics=[\"accuracy\"])\n\n  \ncheckpoint = ModelCheckpoint('best_yet.hdf5' , monitor = ['accuracy'] , verbose = 1  , mode = 'max')\nearlystop = EarlyStopping(monitor='accuracy', patience=5, restore_best_weights=True)\ncallbacks_list = [checkpoint, earlystop]\n\n#Training\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_generator.samples\/\/train_generator.batch_size,\n    validation_data = test_generator, \n    validation_steps = test_generator.samples\/\/test_generator.batch_size,\n    epochs = EPOCHS,\n    callbacks = callbacks_list\n    )","05d7e210":"scores = model.evaluate_generator(test_generator, verbose=1)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","789709c2":"model.save('..\/working\/model_last.hdf5')\nmodel.load_weights('best_yet.hdf5')","5d862e77":"from sklearn.metrics import accuracy_score\ntest_sub_generator = test_datagen.flow_from_dataframe( \n    dataframe=sample_submission,\n    directory=PATH+'test_upload\/',\n    x_col=\"Id\",\n    y_col=None,\n    shuffle=False,\n    class_mode=None,\n    seed=RANDOM_SEED,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    batch_size=BATCH_SIZE,)\n","7fd7f3cf":"test_sub_generator.reset()\npredictions = model.predict_generator(test_sub_generator, steps=len(test_sub_generator), verbose=1) \npredictions = np.argmax(predictions, axis=-1) #multiple categories\nlabel_map = (train_generator.class_indices)\nlabel_map = dict((v,k) for k,v in label_map.items()) #flip k,v\npredictions = [label_map[k] for k in predictions]","cc716a16":"import shutil\nshutil.rmtree(\"..\/working\/cars\")","a918c434":"filenames_with_dir=test_sub_generator.filenames\nsubmission = pd.DataFrame({'Id':filenames_with_dir, 'Category':predictions}, columns=['Id', 'Category'])\nsubmission['Id'] = submission['Id'].replace('test_upload\/','')\nsubmission.to_csv('submission.csv', index=False)\nprint('Save submit')","87c0d270":"## Training the model","8de5de3a":"## Hyperparameters","878501fc":"Like shoping on avito...\n","c52356e6":"## Base model EfficientnetB6","db27f20e":"# Prediction on Test","3cb505eb":"# How to train your:\n## {-- Car Identification Algorithm --}\n### (with keras, efficentnetB6, and augmentation)\n<img src=\"https:\/\/i.postimg.cc\/449Smnsv\/download.jpg\" width=\"750px\"\/>\n","8b858c61":"Now unfreeze the whole model","71c0d7fd":"# Modeling","f04c1446":"## Tuning","83486947":"# EDA","a8334975":"# Augmentation","1d482a93":"# Imports","6087a136":"# Goal:\nto train a new head on EfficientnetB6 to optimize for our problem utilizing augmentation"}}