{"cell_type":{"bd1f9aa6":"code","e1934e81":"code","0e52c145":"code","e0806f75":"code","cee67e5b":"code","3d231736":"code","0a956db7":"code","d29bd995":"code","8c5d7f16":"code","f1740a89":"code","982d86d2":"code","5d29f8bf":"code","2729887b":"code","16578478":"code","8826bb03":"code","34f499d6":"code","f8e2511a":"code","7e05e778":"code","ac021fa0":"code","f28c64a6":"code","75ca528f":"code","f06dfaa8":"code","a3903c59":"code","0fde5ca6":"code","4c37221e":"code","e3eb7172":"code","e568e3a4":"code","e0fbb9ea":"code","4b042bf6":"code","ed61b728":"code","bf759c8b":"code","83e5ba33":"code","5f3cb2cc":"code","d1607531":"code","90a3ecb0":"code","f30d3bf1":"code","93ecbcf2":"code","2fb3b061":"code","b5f5e979":"code","96db8ef5":"code","7e7a2fa3":"code","49a15118":"code","a02c18e3":"code","083526cd":"code","0f2d9611":"code","308135bb":"code","09f0d108":"code","fb3d60cc":"markdown"},"source":{"bd1f9aa6":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage import io,exposure,morphology\nfrom skimage.filters import gaussian\nfrom skimage import feature\nimport pandas as pd\nimport os\nfrom os import path\nfrom scipy.signal import convolve\n\n%matplotlib inline","e1934e81":"path.isfile(r\"..\/input\/bettercsv\/Horizontal_Single_frame.csv\")","0e52c145":"files = os.listdir(r\"..\/input\/bettercsv\/\")","e0806f75":"(files)","cee67e5b":"file = ['Horizontal_Single_frame_dB.csv',\n 'Diagonal_Single_frame_dB.csv',\n 'Random_Single_frame_dB.csv',\n 'Vertical_Single_frame_dB.csv']","3d231736":"img = pd.read_csv(r\"..\/input\/bettercsv\/Horizontal_Single_frame.csv\",header = None)","0a956db7":"img","d29bd995":"img = np.array(img)","8c5d7f16":"h,w = img.shape","f1740a89":"img = exposure.equalize_hist(img)\nimg = (img - np.min(img))\/(np.max(img) - np.min(img))","982d86d2":"plt.imshow(img,cmap = 'gray')\nplt.title(\"Original img\")\nplt.axis(\"off\")\nplt.show()","5d29f8bf":"plt.imsave('acc.png',img)","2729887b":"sigma = 0.10\n\n\nfil = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\ny = convolve(img, np.flip(fil.T, axis=0))\nx = convolve(img, fil)\n\ngradient_magnitude = np.sqrt(np.square(x) + np.square(y))\ngradient_magnitude *= 255.0 \/ gradient_magnitude.max()\n\nplt.imshow(gradient_magnitude)\nplt.axis(\"on\")\n\nplt.title(\"Edge detected images\")\nplt.show()","16578478":"gradient_magnitude","8826bb03":"gray_filtered = cv2.bilateralFilter(np.uint8(img), 7, 50, 50)\n\nkernel = np.ones((3,3),np.uint8)\nd = cv2.erode(gray_filtered,kernel,iterations = 2)\n\nplt.imshow(d)\n#plt.xlim(-5,5)\nplt.axis(\"on\")\n\n\nplt.title(\"Edge detected images\")\nplt.show()","34f499d6":"j = 0","f8e2511a":"for i in (file):\n    \n    print(str(i))\n    img = pd.read_csv(r\"..\/input\/bettercsv\/\" +str(i),header = None)\n    img = np.array(img)\n    img = exposure.equalize_hist(img)\n    img = (img - np.min(img))\/(np.max(img) - np.min(img))\n\n    sigma = 0.10\n\n    fil = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\n    y = convolve(img, np.flip(fil.T, axis=0))\n    x = convolve(img, fil)\n\n    gradient_magnitude = np.sqrt(np.square(x) + np.square(y))\n    gradient_magnitude *= 255.0 \/ gradient_magnitude.max()\n    \n    d = feature.canny(img, sigma=3)\n    \n    plt.imsave('sobel' + str(j) + '.png',gradient_magnitude)\n    plt.imsave('canny' + str(j) + '.png',d)\n    plt.imsave('ori' + str(j) + '.png',img)\n    \n    i1 = plt.imshow(img)\n    plt.title(\"Original image\")\n    plt.xlabel(\"Azimuth \")\n    plt.ylabel(\"Elevation \")\n    plt.axis(\"off\")\n    plt.colorbar(i1)\n    plt.show()\n\n    i2 = plt.imshow(gradient_magnitude)\n    plt.axis(\"off\")\n    plt.xlabel(\"Azimuth \")\n    plt.ylabel(\"Elevation \")\n    plt.title(\"After applying Sobel filter\")\n    plt.colorbar(i2)\n    plt.show()\n\n    i3 = plt.imshow(d)\n    plt.axis(\"off\")\n    plt.xlabel(\"Azimuth \")\n    plt.ylabel(\"Elevation \")\n    plt.title(\"After applying Canny filter\")\n    plt.colorbar(i3)\n    plt.show()\n    \n    j = j + 1","7e05e778":"img = pd.read_csv(r\"..\/input\/bettercsv\/Vertical_Single_frame.csv\",header = None)\nimg = np.array(img)\nimg = exposure.equalize_hist(img)\nimg = (img - np.min(img))\/(np.max(img) - np.min(img))\n\nsigma = 0.10\n\nfil = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])\ny = convolve(img, np.flip(fil.T, axis=0))\nx = convolve(img, fil)\n\ngradient_magnitude = np.sqrt(np.square(x) + np.square(y))\ngradient_magnitude *= 255.0 \/ gradient_magnitude.max()\n\nplt.subplot(121),plt.imshow(img,cmap = 'binary')\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(gradient_magnitude,cmap = 'gray')\nplt.title('Edge Image'), plt.xticks([]), plt.yticks([])\nplt.show()","ac021fa0":"np.unique(gradient_magnitude)","f28c64a6":"plt.imsave('sobel_hori.png',gradient_magnitude)","75ca528f":"img = pd.read_csv(r\"..\/input\/bettercsv\/Vertical_Single_frame.csv\",header = None)\nimg = np.array(img)\nimg = exposure.equalize_hist(img)\n\nv = np.median(img)\nl = int(max(0, (1.0 - sigma) * v))\nu = int(min(255, (1.0 + sigma) * v))\ne = feature.canny(img, sigma=3)\n\n\nplt.subplot(121),plt.imshow(img,cmap = 'binary')\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(e,cmap = 'gray')\nplt.title('Edge Image'), plt.xticks([]), plt.yticks([])\nplt.show()","f06dfaa8":"np.unique(e)","a3903c59":"plt.imsave('canny_hori.png',e)","0fde5ca6":"'''kernel = np.ones((5,5)) \ner = morphology.erosion(edges, kernel)'''","4c37221e":"'''plt.imshow(edges,cmap = 'binary_r')\nplt.title(\"After Canny Edge\")\nplt.axis(\"off\")\nplt.show()'''","e3eb7172":"'''plt.imshow(er,cmap = 'binary_r')\nplt.title(\"Binary marked image\")\nplt.axis(\"off\")\nplt.show()'''","e568e3a4":"from skimage import filters\nimage = filters.sobel(img)","e0fbb9ea":"#hist = filters.apply_hysteresis_threshold(gradient_magnitude, l, u)","4b042bf6":"#plt.imsave('hister_hori_skimg.png',hist)","ed61b728":"#plt.imsave('sobel_hori_skimg.png',image)","bf759c8b":"import numpy as np\nimport scipy.stats as st\n\ndef gkern(l, sig):\n    \"\"\"\\\n    creates gaussian kernel with side length l and a sigma of sig\n    \"\"\"\n\n    ax = np.linspace(-(l - 1) \/ 2., (l - 1) \/ 2., l)\n    xx, yy = np.meshgrid(ax, ax)\n\n    kernel = np.exp(-0.5 * (np.square(xx) + np.square(yy)) \/ np.square(sig))\n\n    return kernel \/ np.sum(kernel)","83e5ba33":"import pandas as pd","5f3cb2cc":"df = pd.DataFrame(gkern(9,3))","d1607531":"df.to_csv('9*9_gauss.csv')","90a3ecb0":"#backtorgb = cv2.cvtColor(d,cv2.COLOR_GRAY2RGB)","f30d3bf1":"import random as rng\n","93ecbcf2":"img = pd.read_csv(r\"..\/input\/bettercsv\/Random_Single_frame.csv\",header = None)\nimg = np.array(img)\nimg = exposure.equalize_hist(img)\n\nv = np.median(img)\nl = int(max(0, (1.0 - sigma) * v))\nu = int(min(255, (1.0 + sigma) * v))\nd = feature.canny(img, sigma=3)","2fb3b061":"# Find contours\ncontours,_ = cv2.findContours(np.uint8(img), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    # Find the convex hull object for each contour\nhull_list = []\nfor i in range(len(contours)):\n    hull = cv2.convexHull(contours[i])\n    hull_list.append(hull)\n# Draw contours + hull results\ndrawing = np.zeros((d.shape[0], d.shape[1], 3), dtype=np.uint8)\nfor i in range(len(contours)):\n    color = (255,0,0)\n    cv2.drawContours(drawing, contours, i, color)\n    cv2.drawContours(drawing, hull_list, i, color)","b5f5e979":"plt.imsave('main_contour.png',drawing)","96db8ef5":"plt.imshow(drawing)\nplt.title(\"Binary marked image\")\nplt.axis(\"off\")\nplt.show()","7e7a2fa3":"contours","49a15118":"# Find contours\ncontours,_ = cv2.findContours(np.uint8(d), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    # Find the convex hull object for each contour\nhull_list = []\nfor i in range(len(contours)):\n    hull = cv2.convexHull(contours[i])\n    hull_list.append(hull)\n# Draw contours + hull results\ndrawing = np.zeros((d.shape[0], d.shape[1], 3), dtype=np.uint8)\nfor i in range(len(contours)):\n    color = (255,0,0)\n    cv2.drawContours(drawing, contours, i, color)\n    cv2.drawContours(drawing, hull_list, i, color)","a02c18e3":"plt.imsave('detected_contour.png',drawing)","083526cd":"'''x_arr = []\ny_arr = []\n\nfor i in range(4):\n    for j in range(77):\n        x_arr.append(contours[i][j][0][0])\n        y_arr.append(contours[i][j][0][1])'''","0f2d9611":"#c.shape","308135bb":"plt.imshow(d)\nplt.title(\"Binary marked image\")\nplt.axis(\"off\")\nplt.show()","09f0d108":"plt.imshow(drawing)\nplt.title(\"Binary marked detected image\")\nplt.axis(\"off\")\nplt.show()","fb3d60cc":"h ---> row\n\nw ---> col"}}