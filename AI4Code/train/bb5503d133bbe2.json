{"cell_type":{"59768c00":"code","ddf6db49":"code","72f38b79":"code","bcb30a76":"code","50effc8a":"code","962c616a":"code","9e509ff8":"code","7b92b9e4":"code","cf9ea67b":"code","31cda9eb":"code","52b6bbd1":"code","9debd951":"markdown","6b0863c3":"markdown","2b4bdcd6":"markdown","fbe94a04":"markdown","b38f9672":"markdown","f30dcf6d":"markdown","eaebe135":"markdown","8c748f75":"markdown","ba23fff4":"markdown","ab5917f6":"markdown","4eacc234":"markdown","20e91e19":"markdown","9c65b9b6":"markdown","d00efdc3":"markdown","d66062a7":"markdown"},"source":{"59768c00":"import pandas as pd\nimport numpy as np\n\ndataframe_original = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')\ndataframe_original.head(5)\ndataframe_original.info()\n\n","ddf6db49":"df = dataframe_original[['price','year','manufacturer','model','condition']].dropna()\nprint(df.size)\nprint(df.head(10))","72f38b79":"new_model_name = df[\"manufacturer\"] + df[\"model\"]\ndf[\"model\"] = new_model_name","bcb30a76":"print(df.groupby('condition').size())","50effc8a":"df = df[df.condition != \"salvage\"]\ndf = df[df.condition != \"fair\"]\ndf = df[df.year >= 2015.0]\ndf = df[df[\"price\"].between(10000, 50000)]\nprint(df.head(10))\nprint(df.size)\n","962c616a":"man_model_df = df.groupby([\"manufacturer\", \"model\",\"year\"]).mean()\nprint(man_model_df)","9e509ff8":"print(df.sort_values(by = [\"year\"], ascending=False))\n# we could see that the latest year is 2022","7b92b9e4":"df = df[df.duplicated(subset=[\"model\"], keep=False)]\ngroup_by_data = df.groupby([\"model\",\"year\"], as_index=False).mean()\n\n# delete all the rows that only has car from a single year.\ndf_clean = group_by_data[group_by_data.duplicated(subset=[\"model\"], keep=False)]\nprint(df_clean)","cf9ea67b":"df_clean.reset_index()\n\n\nrow_num = df_clean.shape[0]  # number of rows in the clean dataframe\ndepreciation_ratio_lst = [];\ni = 0\nmodel_new_price = 0\nnewer_year = 0\ntemp_lst_model_year = []\ntemp_lst_model_price = []\n\nwhile i < row_num:\n    model_name = df_clean.iat[i, 0]\n    try:\n        if df_clean.iat[i + 1, 0] == model_name:\n            temp_lst_model_year.append(df_clean.iat[i, 1])\n            temp_lst_model_price.append(df_clean.iat[i, 2])\n            i += 1\n            if df_clean.iat[i + 1, 0] != model_name:\n                newer_year = df_clean.iat[i, 1]\n                model_new_price = df_clean.iat[i, 2]\n                depreciation_rate = (model_new_price - temp_lst_model_price[0]) \/ temp_lst_model_price[0] \/ \\\n                                    (newer_year - temp_lst_model_year[0])\n                depreciation_ratio_lst.append([model_name, depreciation_rate])\n                temp_lst_model_year = []\n                temp_lst_model_price = []\n                i += 1\n                continue\n            else:\n                newer_year = df_clean.iat[i, 1]\n                model_new_price = df_clean.iat[i, 2]\n                i += 1\n                continue\n        else:\n            # we use the straight line formula depreciation formula here to calculate the depreciation rate,\n            newer_year = df_clean.iat[i, 1]\n            model_new_price = df_clean.iat[i, 2]\n            depreciation_rate = (model_new_price - temp_lst_model_price[0]) \/ temp_lst_model_price[0] \/ \\\n                                (newer_year - temp_lst_model_year[0])\n            depreciation_ratio_lst.append([model_name, depreciation_rate])\n            temp_lst_model_year = []\n            temp_lst_model_price = []\n            i += 1\n            continue\n    # this is used to handle the last element that could be out of index bound because we should i + 1 before\n    except IndexError as error:\n        break\n\ndepreciation_ratio_lst.sort(key=lambda x: x[1])\n\ntop_value_model_name = []\nfor i in range(50):\n    top_value_model_name.append(depreciation_ratio_lst[i])\n\nresult = df[np.isin(df, top_value_model_name).any(axis=1)]\n\ngroup_by_result = result.groupby([\"model\"]).count()\ngroup_by_result.reset_index()\n# we decide to require all car models to have more than 10 sets of data to add accuracy\ntop_ten_group_by = group_by_result[(group_by_result > 10).any(axis=1)]\n\n\ntop_ten_list = list(top_ten_group_by.index)\n\nfinal_df = df_clean[np.isin(df_clean, top_ten_list).any(axis=1)]\n\n","31cda9eb":"for i in depreciation_ratio_lst:\n    for j in top_ten_list:\n        if i[0] == j:\n            print(i)","52b6bbd1":"print(final_df)\nprint(final_df.groupby([\"model\", \"year\"]).mean())","9debd951":"\nThe dataframe has 26 columns and we only need the price, year, manufacturer, model of the cars.\n\n\n## Data Selection and Cleaning\nTo clean up the dataset, we are going to choose only the columns we need and drop all the na values.\n","6b0863c3":"The range of years:","2b4bdcd6":"These are the top ten non-expensive cars with least depreciation ratio.\nThe data of these models are shown as below:\n","fbe94a04":"## Data and Model\ndata citation: we use the used cars dataset that can be downloaded from https:\/\/www.kaggle.com\/austinreese\/craigslist-carstrucks-data. This dataset keeps updating and it shows the most recent used car data from different car dealer websites. ","b38f9672":"## Results","f30dcf6d":"## Overview\nMany college students, like me, want to buy a car so that we can travel around. However, since we have a limited amount of money, we want to find a non-expensive car that does not depreciate much to save our money. This project analyzes the top ten non-expensive cars that have the lowest depreciation rate. ","eaebe135":"## Model\nWe use the straight line formula depreciation formula to calculate the depreciation rate.The formula is (latest year price - oldest year price) \/ oldest year price \/ year difference. We use a while loop to calculate all depreciation rate based on the groupby dataframe above.","8c748f75":"Now we can take a look at our dataset. We have 1198390 rows of data, and we have the price, year, manufacturer, model\nand condition of the cars for our columns. The next step is to exclude cars that are in bad conditions. As a consumer, \nwe do not want to buy cars in bad condition because that will cost us a lot of extra money to fix it. ","ba23fff4":"The mean of the price of different models:","ab5917f6":"## Conclusion\n\nThe top 10 non-expensive cars that has the lowest depreciation ratio are:\n1. Gmc savana commercial cutaway\n2. kiao ptima ex sedan 4d\n3. ford super duty f-550 drw\n4. gmc acadia slt-2 sport utility\n5. lexus is 250\n6. dodge durango limited\n7. bmw4 series 428i xdrive\n8. bmw4 series 430i xdrive\n9. dodge dart\n10.chrysler town & country\n\nThe finding is very interesting because all of the cars above have negative inflation rate. However, we know that the calculation is correct  by looking at the final_df above and do some calculation by ourselves. We also went on cardealer websites such as carmax to check if it is possible for cars to have negative inflation rate. Surprisingly, we do find some cars listed on our top-10 rankings usually have a very low depreciation ratio and sometimes negative ratio on Carmax. \n\nThe explaination for the negativce depreciation ratio is the inflation we are experiencing now in the US. Because the microchip industry has been heavily affected by Covid-19 and many factories in worldwide had to shut down, the car industry was also strongly affected because cars need microchip. To avoid waiting a long period time for a car, the consumer demand of cars goes from buying a new car to buying a used car,making the used car market heated in the past year. ","4eacc234":"We want to keep the models that have more than 1 data because we cannot calculate the depreciation rate based on single data. We also delete all the rows that have car from a single year for the same reason. ","20e91e19":"## Writer: Zhenjian(Tom) Wang on 08\/13\/2021","9c65b9b6":"As we can see, there are 532 cars in our dataframe that has the \"salvage\" title, meaning that it has been damaged before and the is declared a total loss by the insurance company. we definitely want to exclude that from our dataset. And we want to exclude \"fair\" from our dataset, too, because most sellers have a tendency to prettify their car's condition so that they could sell it in a higher price. A car that has fair condition usually indicates that the condition is bad.\n\nBesides, we are only choosing cars that are newer than 2015 and more than 10000 dollars and less than 50000 because the cars that are too old do not have a normal depreciation rate and non-expensive cars usually cost between 10000 to 50000 dollars.","d00efdc3":"Now we complete all the data cleaning and selection process. We have 7145 data. Since we used the group by statement, the year is already in ascending order.","d66062a7":"To avoid any duplicate model names that are actually from a different manufacturer, we change the model name to be the combination of manufacturer name and model name."}}