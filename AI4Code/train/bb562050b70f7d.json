{"cell_type":{"ce064cc9":"code","514b3533":"code","91b80f40":"code","31a151ce":"code","3fadc2cb":"code","15c102f3":"code","f0843dc3":"code","50ce3d16":"markdown","3a2c9e21":"markdown","99e39200":"markdown","1ecf7462":"markdown","b636ff41":"markdown","071effed":"markdown"},"source":{"ce064cc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","514b3533":"import  math\nl = [7,5,2,7,6,12,10,4,8,9]\nl.sort()\n# print(l)\ni = (len(l)-1)\/2\nif(i%2 == 1):\n    print(\"median is -> \" , l[int(i)])\nelse:\n    print(\"media is - > \" , (l[int(i)]+l[int(i+1)])\/2)","91b80f40":"dict = {}\nmode = 1\n\nfor x in range(0,len(l)):\n    if(l[x] in dict):\n        dict[l[x]]+=1;\n        \n    else:\n        dict[l[x]] = 1\nval = 0\nfor k,v in dict.items():\n    mode = max(mode,v)\nfor k,v in dict.items():\n    if(mode == v):\n        val = max(k,val)\n\nprint(\"Mode is -> \",val)","31a151ce":"sum1 = sum(l)\nmean = sum1\/len(l)\nprint(\"Mean is -> \",mean)","3fadc2cb":"print(\"Range is -> \" , l[len(l)-1] - l[0])\n","15c102f3":"x_x = []\nfor a in range(len(l)):\n    x_x.append((l[a] - mean)**2)\nlen1 = len(l)-1\nprint(\"Variance  is -> \" ,sum(x_x)\/len1)","f0843dc3":"x = math.sqrt(sum(x_x)\/len1)\nprint(\"Stand_Deviation is -> \",x)","50ce3d16":"# Standard Deviation","3a2c9e21":"# **Mean**","99e39200":"# Variance","1ecf7462":"# **Media**","b636ff41":"# **Mode**","071effed":"# Range"}}