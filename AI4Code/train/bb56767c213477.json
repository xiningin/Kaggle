{"cell_type":{"f72ac042":"code","9ea5f5bb":"code","1011c54c":"code","9d87a2fe":"code","c1584647":"code","9c9c6be3":"code","fcd79566":"code","adb95a8f":"code","31da68c9":"code","82c7b701":"code","b088d5c0":"code","cceed600":"code","4fc49e1c":"code","dea2d26c":"code","c54e77a6":"code","13609e0e":"code","30bb87a6":"code","27f247f6":"code","6584a32a":"code","a01d7aed":"code","ee21a62f":"code","eaf34f74":"code","7d21bd36":"code","86865d4e":"code","f3cf0573":"code","7a6cccb5":"code","533bd9bf":"code","19c53d82":"code","af9f0375":"code","525dc77a":"code","eded0df5":"code","263f00d1":"code","275ed642":"code","c86f9a06":"code","9f2c815c":"code","f48d89ac":"code","74de1a4a":"code","b15c3637":"code","ec7c3329":"code","fc01aecf":"code","46a6b8e7":"code","8ba4d9b6":"code","43eddcce":"code","c0c4a167":"code","785253cc":"code","4bb9ec21":"code","e3b4b5ce":"code","98dea3e6":"code","7a2d567d":"code","6bd60b32":"code","dd09b698":"code","9a3bdccb":"code","cd5cf5c8":"markdown","6f118e78":"markdown","eed9f4b8":"markdown","1976d096":"markdown","7877ae63":"markdown","f6781a88":"markdown","a1e0ba01":"markdown","76fd34a1":"markdown","a566a67a":"markdown","540508d8":"markdown","b59a3ff5":"markdown"},"source":{"f72ac042":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ea5f5bb":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nimport numpy as np\n\ndftrain= pd.read_csv(\"..\/input\/house-price-prediction\/train.csv\")\ndftrain.columns\nprint(dftrain.shape)\ndftest=pd.read_csv(\"..\/input\/house-price-prediction\/test.csv\")\nprint(dftest.shape)","1011c54c":"dftrain.head()","9d87a2fe":"dftrain.isnull().sum().sort_values()","c1584647":"x=int(((100-60)\/100)*dftrain.shape[0]+1)\ndftrain=dftrain.dropna(axis=1,thresh=x)\ndftrain.shape","9c9c6be3":"dftrain.isnull().sum().sort_values()","fcd79566":"dftrain.isnull().sum().sort_values()","adb95a8f":"plt.figure(figsize=(10,8))\nsns.heatmap(dftrain.corr(),cmap='RdBu')\nplt.show()","31da68c9":"dftrain.corr()['SalePrice'].sort_values(ascending=False)","82c7b701":"col1=list(dftrain.corr()[\"SalePrice\"][(dftrain.corr()[\"SalePrice\"]>0.50) | (dftrain.corr()[\"SalePrice\"]<-0.50)].index)\ncol1","b088d5c0":"plt.figure(figsize=(10,8))\nsns.jointplot(x='SalePrice',y='GarageArea', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='GarageCars', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='TotRmsAbvGrd', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='FullBath', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='GrLivArea', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='1stFlrSF', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='TotalBsmtSF', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='YearRemodAdd', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='YearBuilt', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='OverallQual', data=dftrain[col1],kind='reg')\nsns.jointplot(x='SalePrice',y='MasVnrArea', data=dftrain,kind='reg')\nplt.show()","cceed600":"plt.figure(figsize=(10,7))\nsns.boxplot(x=\"SalePrice\",data=dftrain)\nplt.show()","4fc49e1c":"plt.figure(figsize=(9,5))\nsns.boxplot(x=\"OverallQual\",data=dftrain)\nplt.show()","dea2d26c":"sns.histplot(dftrain['SalePrice'],palette='Blues_r',kde=True)\nplt.axvline(x=dftrain['SalePrice'].mean(),color='red',ls='--',lw=2.5)","c54e77a6":"sns.pairplot(dftrain[col1])","13609e0e":"categorical_columns=dftrain.select_dtypes(include=np.object).columns\ncategorical_columns","30bb87a6":"col2=[\"Utilities\",\"Heating\",\"KitchenQual\",\"SaleCondition\",\"LandSlope\"]\n","27f247f6":"\nfor f in categorical_columns:\n    x=dftrain[f].nunique()\n\n     \n   \n \n    \n","6584a32a":"dftrain[categorical_columns].nunique()","a01d7aed":"i=1\nplt.figure(figsize=(15,8))\nplt.subplots_adjust(wspace=1)\nfor feature in col2:\n    plt.subplot(3,3,i)\n    sns.boxplot(x='SalePrice',y=feature,data=dftrain)\n    i=i+1\n     \n          \n     \n    \n    \n   ","ee21a62f":"dftrain.shape","eaf34f74":"allcol=col1+col2\nallcol","7d21bd36":"sns.pairplot(dftrain[allcol])","86865d4e":"dftrain1=dftrain[allcol]\ndftrain1","f3cf0573":"x=dftrain1.drop('SalePrice',axis=1)\ny=dftrain1['SalePrice']\n","7a6cccb5":"x=pd.get_dummies(x,columns=col2)\n","533bd9bf":"from sklearn.preprocessing import StandardScaler\ncol1.remove('SalePrice')\nscaler=StandardScaler()\nx[col1]=scaler.fit_transform(x[col1])\n","19c53d82":"x.head()","af9f0375":"y.head()","525dc77a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3, random_state=100)","eded0df5":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nlm.fit(x_train,y_train)","263f00d1":"print(lm.coef_)","275ed642":"\n\npredicts=lm.predict(x_test)","c86f9a06":"plt.figure(figsize=(10,8))\nplt.scatter(y_test,predicts)\nplt.xlabel(\"y test\")\nplt.ylabel(\"predicted\")\nplt.show()","9f2c815c":"from sklearn import metrics\nprint(\"MAE\", metrics.mean_absolute_error(y_test,predicts))\nprint(\"MEA\",metrics.mean_squared_error(y_test,predicts))","f48d89ac":"x_test.head()","74de1a4a":" x_test['id'] =x_test.index","b15c3637":"predictions= pd.DataFrame({'ID': x_test.index, 'SalePrice': predicts})\npredictions.to_csv(\"submission3.csv\",index=False)","ec7c3329":"len(predicts)","fc01aecf":"len(x_test)","46a6b8e7":"dftest.head()","8ba4d9b6":"dftest=dftest.fillna(0)","43eddcce":"dftest.isnull().sum()","c0c4a167":"allcol","785253cc":"dftest1=dftest.copy()","4bb9ec21":"allcol.remove('SalePrice')\ndftest=dftest[allcol]\ndftest.columns","e3b4b5ce":"from sklearn.preprocessing import StandardScaler\n\nscaler=StandardScaler()\ndftest[col1]=scaler.fit_transform(dftest[col1])","98dea3e6":"dftest=pd.get_dummies(dftest,columns=col2)","7a2d567d":"dftest['Id']=dftest1['Id']","6bd60b32":"dftest.shape","dd09b698":"predictstest=lm.predict(dftest)","9a3bdccb":"predictions1= pd.DataFrame({'ID': dftest['Id'], 'SalePrice': predictstest})\npredictions1.to_csv(\"submission.csv\",index=False)","cd5cf5c8":"1.on test data= only columns required\n2. pipeline add missing data and conversion to gussain, one hot encoding\n3.","6f118e78":"#Feature Selection\nPearson coefficient method\n\n\n","eed9f4b8":"1.Numeric Columns\n","1976d096":"# Correlation","7877ae63":"EDA","f6781a88":"#Exploratory Data Analysis","a1e0ba01":"#import data\n","76fd34a1":"train test split\n\n\n","a566a67a":"consider columns which failed to reject null hypothesis","540508d8":"# Remove columns with 60% null values\n","b59a3ff5":"Predcition"}}