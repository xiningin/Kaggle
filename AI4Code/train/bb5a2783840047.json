{"cell_type":{"76400776":"code","aa27234f":"code","9858f400":"code","ceb54437":"code","b92cd3af":"code","d8bc8a40":"code","b17d7294":"code","e78b1e0b":"code","9aa0cd1a":"code","286dbfea":"code","c533d4d1":"code","30227618":"code","f5970bae":"code","cfc7eb8b":"code","57f8ed99":"code","f4827c9b":"code","20d74bf1":"code","ae495bac":"code","ff3243ef":"code","3f9057ea":"code","c766e007":"code","7909bd6f":"code","8b4f4a9d":"code","fa26e263":"code","34339484":"code","7d21b697":"code","36ae9323":"code","bcb0c1b5":"code","e0c6fdaf":"code","3b9aede3":"code","fea80db0":"code","5f6cf6af":"code","7ef33906":"code","6b8ec66b":"code","1046e90c":"code","abd59166":"code","2d776597":"code","bece1b3b":"code","c1e9d6a1":"code","d9c7bed7":"code","77df8fc3":"code","517174d8":"code","e502f3f2":"code","2fc05795":"code","78cc9ed7":"code","a57bb52c":"code","7f7a54da":"code","71a6b6f6":"code","7aa12435":"code","85c19ce1":"code","1ca627f4":"code","f51d4fdd":"code","a324101a":"code","f017e37b":"code","6af2d4cc":"code","1bc0e2e8":"code","cd5974ef":"code","8f8cce33":"markdown","4456c817":"markdown","00a7d66e":"markdown","82d30525":"markdown","69aeac91":"markdown","14bc1724":"markdown","c7396e1f":"markdown","4514d10c":"markdown","072dad91":"markdown","419a2105":"markdown","c02f2777":"markdown","cdc26b84":"markdown","5d3b2d45":"markdown","d644b273":"markdown","326f2ee7":"markdown","2acb729d":"markdown","cc95324b":"markdown","73d60101":"markdown","8ad072ae":"markdown","1de3a555":"markdown","ff323781":"markdown","685e6ad5":"markdown","534d1ba4":"markdown","3b29b5e4":"markdown","9130ff8f":"markdown","f426877b":"markdown","ed593c03":"markdown","c1ae4e7c":"markdown","bb4c4e3e":"markdown","6660b582":"markdown","4b1e28d2":"markdown","ee4ee3bf":"markdown","dac44aad":"markdown","36abb7cd":"markdown","73454224":"markdown","56af4943":"markdown","7609598d":"markdown","29e85b37":"markdown","fc33e9c3":"markdown","25ea2cd7":"markdown","fe861823":"markdown","dc360cf1":"markdown","9730c04d":"markdown","6ab40cbc":"markdown","530a4fd3":"markdown","52f8409b":"markdown","3cfd774b":"markdown","104be050":"markdown","c806de1a":"markdown","3bfbed13":"markdown","f1e0ef8c":"markdown","3872b614":"markdown","914f88f5":"markdown","e5e384cb":"markdown","74dc6056":"markdown","fd734c67":"markdown","9091e47b":"markdown"},"source":{"76400776":"import this","aa27234f":"num0 = 5\nnum1 = 2\nnum2 = 4.0\n\nprint(\"The num0's type is: \", type(num0))\nprint(\"The num1's type is: \", type(num1))\nprint(\"The num2's type is: \", type(num2))","9858f400":"add = num0+num1\nprint('%d + %d = %d' % (num0, num1, add))","ceb54437":"sub = num0-num1\nprint('%d - %d = %d' % (num0, num1, sub))","b92cd3af":"mul = num0*num1\nprint('%d * %d = %d' % (num0, num1, mul))","d8bc8a40":"div = num0\/num1\nprint('%d \/ %d = %f' % (num0, num1, div))","b17d7294":"exp = num0**num1\nprint('%d ** %d = %d' % (num0,num1, exp))","e78b1e0b":"iDiv = num0\/\/num1\nprint('%d \/\/ %d = %f' % (num0, num1, iDiv))","9aa0cd1a":"module = num0%num1\nprint('%d mod %d = %f' % (num0, num1, module))","286dbfea":"bignumber0 = 15948594859485948594589458497382732837289372893728937298372893728937289372893729837289462398\nbignumber1 = 4636473647364736473467346374637463746374637463746374634736486578367238647384637846374863748657757557555757557\n\nprint(bignumber1*bignumber0)","c533d4d1":"import math \nprint('These are the functions of the math module ...\\n\\n', dir(math))","30227618":"import math\n\nnum1 = 65\nnum2 = 10\n\nsqrt = math.sqrt(num1) #module's name like qualificator, dot & resource's name\nesp = math.exp(num2)\nloge = math.log(num1)\nlogd = math.log10(num1)\n\nprint(\"Sqrt : \", sqrt)\nprint(\"Exp  : \", esp)\nprint(\"Log e: \", loge)\nprint(\"Log10: \", logd)","f5970bae":"from math import pi, sin, cos, sqrt #Another type of import\n\nsqr = sqrt(num1)\nsinpi = sin(pi) #Use only resource's name\ncospi = cos(pi)\nprint(\"Sqrt  :\", sqr)\nprint(\"Sin Pi:\", sinpi)\nprint(\"Cos Pi:\", cospi)","cfc7eb8b":"from math import * #All module's resources withouth using the qualificator","57f8ed99":"import random\nprint('These are the functions of the random module ...\\n\\n', dir(random))","f4827c9b":"random.seed(7) #for reproducibility","20d74bf1":"random.random() #random number","ae495bac":"random.choice([1,2,3,4])","ff3243ef":"s1 = \"I'm learning to use Python. Python is quite simple.\"\ns2 = \"Python\"\ns3 = \"Spam\"\nc0 = s1[0]\n\ntest0 = s2 in s1\ntest1 = s3 in s1\n\nprint(c0)\nprint(s1.count(\"e\"))\nprint(s1.isalpha())\nprint(s1.isdigit())\nprint(s1.lower())\nprint(s1.upper())\nprint(s1.capitalize())\nprint(test0)\nprint(test1)","3f9057ea":"s0 = \"Hi, my name is Stefano \"\ns1 = \"and i'm 26 years old.\"\nprint(s0+s1)","c766e007":"s1 = \"Brian\"\ntry:\n    s1[0] = \"C\"\nexcept TypeError:\n    print(\"Strings are immutable!\")","7909bd6f":"l = [] # l = list()\n\nl1 = [\"test0\",\"test1\"]\nl2 = [3, 5, 6]\n\nl3=l1+l2\n\nprint('List1: ',l1)\nprint('List2: ',l2)\nprint('List3: ',l3)\nprint('Len List3: ', len(l3))","8b4f4a9d":"s = \"Monty Python's Life of Brian\"\nstrList = list(s) \nprint(strList)","fa26e263":"v = 0\nn = 10\nl=[v] * n \n\nprint(l)\nprint(v in l) \nprint(v not in l) ","34339484":"s = \"name\/surname\/age\"\nsep = \"\/\"\nl=s.split(sep)\ns=sep.join(l)\n\nprint(s)\nprint(sep)\nprint(l)\nprint(s)","7d21b697":"M = [[1,2,3],\n     [4,5,6],\n     [7,8,9]]\nprint(M)\nprint(M[1])\nprint(M[2][2])","36ae9323":"s = []\nfor x in range(10):\n    if x%2 == 0:\n        s.append(x**2)\nprint(s)","bcb0c1b5":"s = [x**2 for x in range(10) if x%2 == 0] #Only one row!\nprint(s)","e0c6fdaf":"d = {\"Stefano\":\"Nocco\", \n     \"Kaggle\":\"Team\",\n     \"Brian\":\"Nazareth\"}\nd","3b9aede3":"d.keys()","fea80db0":"d.values()","5f6cf6af":"d.items()","7ef33906":"\"Stefano\" in d.keys()","6b8ec66b":"a = [\"a\", \"b\", \"c\", \"d\", \"e\"]\nb = [0,1,2,3,4]\n\nmydict = dict(zip(a,b))\nprint(mydict)\nprint('-'*30)\n\nmydict[\"f\"] = {\"ste\":\"nocco\"} #new item\nprint(mydict)\nprint('-'*30)\n\nv0 = mydict.get(\"f\")\nv1 = v0.get(\"ste\")\nprint(v0)\nprint('-'*30)\nprint(v1)","1046e90c":"d = {\"id0\":[\"Stefano\", \"Nocco\", \"Data Scientist\"],\n      \"id1\":[\"Brian\", \"Nazareth\", \"Data Engineer\"]}","abd59166":"d.keys()","2d776597":"d.values()","bece1b3b":"a = [\"a\", \"b\", \"c\"]\nb = [0,1,2]\n\nd = {k:v for k,v in zip(a,b)} \nprint(d)","c1e9d6a1":"t = (1,2,3,4,5,6)","d9c7bed7":"type(t)","77df8fc3":"t[0]","517174d8":"t.index(4)","e502f3f2":"t.count(4)","2fc05795":"t1 = (7,8,9)\nt2 = t+t1\nprint(t2)","78cc9ed7":"cond = True\n\nif cond:\n    print('Run the nested code')","a57bb52c":"spam = 5\n\nif spam == 5:\n    print('Hi Brian!')","7f7a54da":"eggs = 7\nbacon = 5\n\nif eggs < bacon:\n    print('Release Brian!')\nelse:\n    print('Crucify Brian!')","71a6b6f6":"eggs = 7\nbacon = 5\n\nif eggs < bacon: print('Release Brian!')\nelse: print('Crucify Brian!')","7aa12435":"counter = 0\nif counter <= 10:\n    print(counter)\n    counter = counter + 1","85c19ce1":"counter = 0\nwhile counter <= 10:\n    print(counter)\n    counter = counter + 1","1ca627f4":"#cond = True\n\n#while cond:     \n#    print('infinite loop !!!')","f51d4fdd":"counter = 0\nwhile True:\n    print(counter)\n    counter += 1\n    if counter > 10:\n        print (\"Bye bye!\")\n        break","a324101a":"counter = 0\nwhile counter < 10:\n    print(counter)\n    counter += 1     \n    if counter == 3:\n        print ('Skipped!')\n        continue\n   ","f017e37b":"counter = 10\nprint('Increasing ...')\nfor number in range(counter):\n    print(number)","6af2d4cc":"print('Decreasing ...')\nfor numero in range(10,0,-1):\n    print(numero)","1bc0e2e8":"eggs = ['spam', 'ham', 'brian', 'stefano']\nfor egg in eggs:\n    print(egg)","cd5974ef":"chars = 'I love Python'\nfor char in chars:\n    print(char)","8f8cce33":"Strings are used to record both textual information (your name, for instance) as well as arbitrary collections of bytes.","4456c817":"#### The Syntax is the set of rules for constructing well-formulated expressions or phrases in a language.\n#### Semantics is the set of rules that allow an agent to interpret the meaning of such expressions or sentences.\nA computer generates a syntax error when an expression or phrase is not well worded. A semantic error occurs, instead, when the action described by an expression cannot be performed, even if the expression is syntactically correct.","00a7d66e":"File objects are Python code\u2019s main interface to external files on your computer. They can be used to read and write text memos, audio clips, Excel documents, saved email messages, and whatever else you happen to have stored on your machine. ","82d30525":"### 3.5. Tuples, files & other objects","69aeac91":"#### 3.4.6. Dict comprehension","14bc1724":"#### 3.5.2 Files","c7396e1f":"#### In general, the first resource import technique (import math) is preferable. The use of the module qualifier not only reminds the reader of the purpose of the function, but also helps the interpreter to distinguish between functions with the same name but for different purposes.","4514d10c":"- IF, ELIF and ELSE are perhaps the 3 most important flow control instructions in Python;\n- Indentation, or the addition of white space at the beginning, is the method used in Python to separate the various code blocks;\n- Indentation in Python is mandatory and not respecting its rules leads to the appearance of errors;\n- IF is the instruction that allows us to execute an associated code block IF the analyzed control expression returns a boolean value of True;\n- ELIF means \"else if\" and it is the instruction that allows us to define as many control blocks as we need: the code associated with each ELIF is executed if the previous IF or ELIF return False while he returns True;\n- ELSE is the last statement to be parsed and is executed if all previous conditional expressions are found to be False;","072dad91":"### 3.2. Numbers","419a2105":"#### 3.4.3. List Comprehension","c02f2777":"|Method|Description|\n|------|-----------|\n|file = open(str, [str])|Returns a reference to a file |\n|file.read()|Reads the contents of the file|\n|file.readline()|Read a line from the file|\n|file.readlines()|Read all lines of file|\n|file.write(str)| Write a string in the file|\n|file.close()|Closes the reference to a file|\n\nThere are different access modes usable with open():\n- \"r\": read-only mode (I can't write to the file). This is the default.\n- \"w\": write-only mode (I can't read from the file), overwriting.\n- \"a\": write-only mode (I can't read from the file), append.\n- \"rw\": reading and writing mode, overwriting.\n- \"ra\": reading and writing mode, append.","cdc26b84":"# 5. Conclusion","5d3b2d45":"# 1. Introduction","d644b273":"#### 1) It\u2019s Object-Oriented and Functional \nPython is an object-oriented language, from the ground up. Its class model supports advanced notions such as polymorphism, operator overloading, and multiple inheritance; yet, in the context of Python\u2019s simple syntax and typing, OOP is remarkably easy to apply.\n#### 2) It\u2019s Free \nPython is completely free to use and distribute. There are no restrictions on copying it, embedding it in your systems, or shipping it with your products. In fact, you can even sell Python\u2019s source code, if you are so inclined. But don\u2019t get the wrong idea: \u201cfree\u201d doesn\u2019t mean \u201cunsupported.\u201d On the contrary, the Python online community responds to user queries with a speed that most commercial software help desks would do well to try to emulate. Moreover, because Python comes with complete source code, it empowers developers, leading to the creation of a large team of implementation experts.\n#### 3) It\u2019s Portable\nThe standard implementation of Python is written in portable ANSI C, and it compiles and runs on virtually every major platform currently in use. \n#### 4) It\u2019s Powerful\nFrom a features perspective, Python is something of a hybrid. Its toolset places it between traditional scripting languages (such as Tcl, Scheme, and Perl) and systems development languages (such as C, C++, and Java). Python provides all the simplicity and ease of use of a scripting language, along with more advanced software-engineering tools typically found in compiled languages. Unlike some scripting languages, this combination makes Python useful for large-scale development projects. As a preview, here are some of the main things you\u2019ll find in Python\u2019s toolbox: \n- Dynamic typing\n- Automatic memory management\n- Programming-in-the-large support\n- Built-in object types\n- Built-in tools\n- Library utilities\n- Third-party utilities\n\n#### 4) It\u2019s Mixable\n#### 5) It\u2019s Relatively Easy to Use\n#### 6) It\u2019s Relatively Easy to Learn","326f2ee7":"#### 3.3.2. Strings are immutable.","2acb729d":"The tuple object is roughly like a list that cannot be changed\u2014tuples are sequences, like lists, but they are immutable, like strings. Functionally, they\u2019re used to represent fixed collections of items: the components of a specific calendar date, for instance. ","cc95324b":"- The instructions in the While loop are executed until the control condition remains True;\n- It is possible to interrupt an infinite cycle using the CTRL-C key combination;\n- The Break Instruction is used to interrupt a cycle prematurely;\n- The Continue instruction is used to skip a cycle and start the loop again from the beginning;","73d60101":"#### 3.2.4 The random Module","8ad072ae":"#### To recap:\n- Dictionaries are unordered data structures, containing pairs (key: value);\n- Both Key and Value are chosen by us in an arbitrary manner;\n- Knowing the Key, we can modify, recall or delete the associated value;","1de3a555":"#### If there is only one nested statement, you can write everything in one line!","ff323781":"### 4.1 If\/elif\/else statement","685e6ad5":"### 2.1. The difference between Sintax & Semantic","534d1ba4":"#### 3.3.1. Concatenation","3b29b5e4":"- Unlike the while loop, the for loop is executed a preset number of times;\n- The range() function allows us to set the number of times the for loop is executed;\n- At the range function () it is possible to pass three parameters, START, STOP and STEP.","9130ff8f":"### 4.3. For statement (& range())","f426877b":"#### To recap: We use the methods associated with the lists to manage them in the best way.\n\n|method|description|\n|------|-----------|\n|append()|allows us to add an element to the end of the list|\n|extend()|allows us to \"extend\" a list, with the addition of values from a second list|\n|remove()|allows us to remove an element, starting from its value|\n|pop()|allows us to delete the last element of the list|\n|sort()|method allows us to reorder the elements of a list|\n|reverse()|allows us to reverse the order of the elements of a list|\n|index()|allows us to get the index of a past element|\n|insert()|allows us to add a value in a preset position|","ed593c03":"|Type of object|Category|isMutable?|\n|--------------|--------|----------|\n|Numbers|numbers|False|\n|String|sequency|False|\n|List|sequency|True|\n|Dict|map|True|\n|Tuple|sequency|False|\n|File|extension|NA|\n|Set|sets|True|\n|frozenset|sets|False|\n|bytearray(3.0)|sequency|True|","c1ae4e7c":"### 3.6. Resume","bb4c4e3e":"#### The break statement is used to terminate a while loop prematurely: as soon as this expression is read and processed within the loop, what Python does is block the loop instantly.","6660b582":"#### 3.2.3 The math Module","4b1e28d2":"#### 3.4.2. Nested Lists","ee4ee3bf":"### 3.4. Lists & Dicts","dac44aad":"#### 3.2.2 Big Numbers","36abb7cd":"#### 3.5.1 Tuples","73454224":"#### 3.2.1 Basic operations","56af4943":"The programming language Python was conceived in the late 1980s, and its implementation was started in December 1989 by Guido van Rossum at CWI in the Netherlands as a successor to ABC capable of exception handling and interfacing with the Amoeba operating system. Guido Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL). Python was named for the BBC TV show Monty Python's Flying Circus. ","7609598d":"|Object type|Example literals\/creation|\n|-----------|-------------------------|\n|Numbers|1234, 3.1415, 3+4j, 0b111, Decimal(), Fraction()|\n|Strings|'spam', \"Bob's\", b'a\\x01c', u'sp\\xc4m'| \n|Lists|[1, [2, 'three'], 4.5], list(range(10))| \n|Dictionaries|{'food': 'spam', 'taste': 'yum'}, dict(hours=10)| |Tuples|(1, 'spam', 4, 'U'), tuple('spam'), namedtuple| \n|Files|open('eggs.txt'), open(r'C:\\ham.bin', 'wb')| \n|Sets|set('abc'), {'a', 'b', 'c'}| \n|Other core types|Booleans, types, None| \n|Program unit types|Functions, modules, classes| \n|Implementation-related types|Compiled code, stack tracebacks|\n","29e85b37":"#### Now I show you 3 ways to import a module.The difference is in the namespaces.","fc33e9c3":"<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f8\/Python_logo_and_wordmark.svg\">","25ea2cd7":"# 4. Python's Statements","fe861823":"#### 3.4.1. Lists","dc360cf1":"#### 3.4.5. Nested Dicts","9730c04d":"|Metodo|Significato|\n|------|-----------|\n|dict.get(k, [default])|Returns the value of the key, or the default |\n|dict.has_key (object) | True if the key is in the dictionary |\n|dict.keys () | Returns a list of keys |\n|dict.values () | Returns a list of values |\n|dict.items () | Returns a list of key-value pairs |\n|dict.setdefault()|allows us instead to create a key-value pair if the key passed does not already exist|\n","6ab40cbc":"### 3.1. Python's Core Data Types","530a4fd3":"# 2. The Zen of Python","52f8409b":"### This kernel wants to be an introductory guide to using python. If you liked it, please give me an upvote. If you have any advice, it's welcome.","3cfd774b":"Lists are positionally ordered collections of arbitrarily typed objects, and they have no fixed size. ","104be050":"# 3. Types & Operations","c806de1a":"#### The continue statement is similar to the break, but instead of interrupting the cycle, it skips all the code after the instruction and restarts Python from the first line of the cycle.","3bfbed13":"#### 4.2.1 break & continue","f1e0ef8c":"|Statement|Role|Example|\n|---------|----|-------|\n|Assignment| Creating references| a, b = 'good', 'bad'|\n|Calls and other expressions| Running functions| log.write(\"spam, ham\")|\n|print|calls Printing objects|print('The Killer', joke)| \n|if\/elif\/else|Selecting actions|if \"python\" in text:    print(text)|\n|for\/else|Iteration|for x in mylist:    print(x)|\n|while\/else|General loops|while X > Y:    print('hello') \n|pass|Empty placeholder|while True:    pass| \n|break|Loop exit|while True:    if exittest(): break| \n|continue|Loop continue|while True:    if skiptest(): continue| \n|def|Functions and methods|def f(a, b, c=1):    print(a+b+c)| \n|return|Functions results|def f(a, b, c=1):    return a+b+c|\n|yield|Generator functions|def gen(n):    for i in n: yield i+i| \n|global|Namespaces|x = 'old'; def function():    global x, y; x = 'new'| \n|nonlocal|Namespaces (3.X)|def outer():    x = 'old'; def function():        nonlocal x; x = 'new'| \n|import|Module access|import sys| \n|from|Attribute access|from sys import stdin| \n|class|Building objects|class Subclass(Superclass):    staticData = []    def method(self): pass| \n|try\/except\/finally|Catching exceptions|try:    action() except:    print('action error')| \n|raise|Triggering exceptions|raise EndSearch(location)| \n|assert|Debugging checks|assert X > Y, 'X too small'| \n|with\/as|Context managers (3.X, 2.6+)|with open('data') as myfile:    process(myfile)| \n|del|Deleting references|del data[k] del data[i:j] del obj.attr del variable|\n\n","3872b614":"### 1.1. Why Python?","914f88f5":"#### 3.4.4. Dicts","e5e384cb":"### 4.2 While statement","74dc6056":"### The guide, at the moment, ends here. But later I will update it with other topics. If you liked it, please give me an upvote. If you have any advice, it's welcome. Thank you!","fd734c67":"### 3.3. Strings","9091e47b":"In Python, data takes the form of objects that Python provides, or objects we create using Python classes or external language tools such as C extension libraries.\nIn fact, Python programs can be decomposed in modules, statements, expressions and objects, as follows:\n- Programs are composed of modules. \n- Modules contain statements. \n- Statements contain expressions. \n- Expressions create and process objects."}}