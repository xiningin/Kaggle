{"cell_type":{"baef0bbc":"code","252b96b9":"code","e990a608":"code","c3c48e45":"code","4f375842":"code","781ae438":"code","e5ece0ce":"code","cb259bfe":"code","8e914240":"code","27411f41":"code","3a87a420":"code","8bffa559":"code","9e94641d":"code","af10516a":"code","52cc603e":"code","3e43433c":"code","aa453596":"code","0b28c2d2":"code","74ac2df9":"code","94ec83df":"code","cd29f90c":"code","05ccecae":"markdown","1fc8d88a":"markdown","5bdb3f8f":"markdown","8482a44a":"markdown","751fde0e":"markdown","e1944000":"markdown","fac0f3dd":"markdown","4c03434a":"markdown","939de4a9":"markdown","fcf19fdb":"markdown","5b0b2d70":"markdown","024d2af4":"markdown","3b8ef49e":"markdown"},"source":{"baef0bbc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","252b96b9":"yes_data = []\n\nno_data = []\n\npaths = []\n\nlabels = []\n\nimport os\nfor dirname, _, filenames in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/yes'):\n    \n    for filename in filenames:\n        \n        if '.jpg' in filename:\n            \n            paths.append(os.path.join(dirname, filename))","e990a608":"encoder = OneHotEncoder()\n\nencoder.fit([[0], [1]])\n\nfor path in paths:\n    \n    image = Image.open(path)\n    \n    image = image.resize((128,128))\n    \n    image= np.array(image)\n    \n    if image.shape == (128,128,3):\n        \n        yes_data.append(np.array(image))\n        \n        labels.append(encoder.transform([[0]]).toarray())\n        \nlabels[0]","c3c48e45":"more_paths = []\n\nfor dirname, _, filenames in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/no'):\n    \n    for filename in filenames:\n        \n        if '.jpg' in filename:\n            \n            more_paths.append(os.path.join(dirname, filename))","4f375842":"for path in more_paths:\n    \n    image = Image.open(path)\n    \n    image = image.resize((128,128))\n    \n    image = np.array(image)\n    \n    if image.shape == (128,128,3):\n        \n        yes_data.append(np.array(image))\n        \n        labels.append(encoder.transform([[1]]).toarray())\n        \n","781ae438":"yes_data = np.array(yes_data)\n\nyes_data.shape","e5ece0ce":"labels = np.array(labels)\n\nlabels = labels.reshape(139,2)\n\nlabels.shape","cb259bfe":"np.set_printoptions(linewidth = 200)\n\nplt.imshow(yes_data[0])\n\nprint(yes_data[0])\n\nprint(labels[0])","8e914240":"train_data, test_data, train_labels, test_labels = train_test_split(yes_data, labels, random_state = 3, shuffle = True)","27411f41":"train_data.shape, test_data.shape, train_labels.shape, test_labels.shape","3a87a420":"train_data = train_data \/255.0\ntest_data = test_data\/255.0","8bffa559":"from tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import BatchNormalization\n\n\ninput = Input(shape = (128,128,3))\n\nx = Conv2D(16, (3,3), activation = 'relu')(input)\n\nx = BatchNormalization()(x)\n\nx = MaxPooling2D(2,2)(x)\n\nx = Conv2D(32, (3,3), activation = 'relu')(x)\n\nx = MaxPooling2D(2,2)(x)\n\n\n\nx = Flatten()(x)\n\nx = BatchNormalization()(x)\n\nx = Dense(124, activation = 'relu')(x)\n\nx = Dropout(0.27)(x)\n\nx = Dense(124, activation = 'relu')(x)\n\noutput = Dense(2, activation = 'softmax')(x)\n\nmodel = Model(inputs = input, outputs = output)\n\nmodel.summary()","9e94641d":"from keras.optimizers import RMSprop","af10516a":"model.compile(loss = 'categorical_crossentropy', optimizer = RMSprop(lr = 0.001), metrics = [\"accuracy\"])","52cc603e":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-8*10**(epoch \/ 20))","3e43433c":"history = model.fit(train_data, train_labels, epochs = 75, callbacks = [lr_schedule],validation_data = (test_data, test_labels))","aa453596":"# accuracy\n\nplt.figure(figsize = (12,7))\n\nplt.plot(history.history['accuracy'], label = 'train accuracy')\nplt.plot(history.history['val_accuracy'], label = 'validation accuracy')\nplt.title(\"train accuracy vs validation accuracy\")\nplt.legend()\nplt.show()","0b28c2d2":"# loss\n\nplt.figure(figsize = (12,7))\n\nplt.plot(history.history['loss'], label = 'train loss')\nplt.plot(history.history['val_loss'], label = 'validation loss')\nplt.legend()\nplt.title(\"train vs validation loss\")\nplt.show()\n","74ac2df9":"def tumor(number):\n    \n    if number == 0:\n        \n        return \"Not a tumor\"\n    \n    else:\n        \n        return \"a tumor\"","94ec83df":"#example image\n\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y1.jpg\")\n\nx = np.array(img.resize((128,128)))\n\nx = x.reshape(1, 128, 128, 3)\n\nresult = model.predict([x])\n\nclassification = np.where(result == np.amax(result))[1][0]\n\nprint(str(result[0][classification]*100) + '% Confidence This Is ' + tumor(classification))\n\nplt.imshow(img)\n","cd29f90c":"img2 = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/18 no.jpg\")\n\ny = np.array(img2.resize((128,128)))\n\ny = y.reshape(1, 128, 128, 3)\n\nresult2 = model.predict([y])\n\nind = 0\nclassification2 = 0\n\nimport numpy as np\n\nfor result in result2:\n    result = result.tolist()\n    print(result)\n    \n    if result[0] > result[1]:\n        classification = 1\n        ind = 0\n    else:\n        classification = 0\n        ind = 1\n\n#classification2 = np.where(result2 == np.amax(result2))[1][0]\n\nprint(str(result2[0][ind]*100) + '% Confidence This Is ' + tumor(classification2))\n\nplt.imshow(img2)\n\n\n\n\n","05ccecae":"## Making a Learning Rate Scheduler","1fc8d88a":"## Predictions","5bdb3f8f":"In this notebook we will be using labeled MRI images to train a neural network that will try and correctly diagnose a patient.","8482a44a":"## Normalizing Data","751fde0e":"## Fitting the Model","e1944000":"## Compile Model","fac0f3dd":"## Getting a glance at the data","4c03434a":"## Training + Testing data","939de4a9":"## Predicting if a patient does or does not have a brain tumor","fcf19fdb":"### Preprocessing Data ","5b0b2d70":"## Building A Model (Using Functional API)","024d2af4":"## Plotting results","3b8ef49e":"### Imports"}}