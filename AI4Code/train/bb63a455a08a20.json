{"cell_type":{"98e8e68b":"code","5cda498b":"code","b0d2585e":"code","ee8185e7":"code","5becf9da":"code","66189a33":"code","91608010":"code","ee4c3a0f":"code","3a92b02f":"code","b1c77147":"code","0d3688b7":"code","e198f277":"code","d4c3a42f":"code","a9ddaf97":"code","9f505a1e":"code","a1724bb7":"code","3e0957c5":"code","8bb69b99":"code","89cfc1f9":"code","4da36af2":"code","0dbca112":"code","676a9c0c":"code","93e90f1b":"code","fd66a222":"code","ab87ce28":"code","bc675b88":"code","bb3ce179":"code","a0bff3f4":"code","9bc4930a":"code","1b1d88ba":"code","48af1477":"code","57c97ffe":"code","30759f06":"code","c3072231":"markdown","88da80ea":"markdown","f6f34fb8":"markdown","cfdcf8df":"markdown","62be7e50":"markdown","c68af75c":"markdown","8f5d485d":"markdown","18fdfd5b":"markdown","0045db80":"markdown","cedfe16f":"markdown","3bd5fba5":"markdown","3a0ec396":"markdown","de4ac458":"markdown","023a2ebd":"markdown","4f4ad9fd":"markdown","de7f021b":"markdown","8a3d0239":"markdown","a85ea561":"markdown","078f69f4":"markdown","82454e7e":"markdown","39344f84":"markdown","67808fe0":"markdown","20265686":"markdown","b9676c0a":"markdown","33b0e059":"markdown","f29494df":"markdown","d8d8b538":"markdown","1f6e68f7":"markdown","da78d916":"markdown","4d96900c":"markdown","903a524f":"markdown","baa188d9":"markdown","d529a9ea":"markdown","4daf4694":"markdown"},"source":{"98e8e68b":"import pandas as pd\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, Normalizer, RobustScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nimport optuna\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom xgboost import XGBRegressor\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom xgboost import plot_importance\n\nimport matplotlib.pylab as pylab\nparams = {'legend.fontsize': 'x-large',\n          'figure.figsize': (15, 10),\n         'axes.labelsize': 'x-large',\n         'axes.titlesize':'x-large',\n         'xtick.labelsize':'x-large',\n         'ytick.labelsize':'x-large'}\npylab.rcParams.update(params)\n\nplt.style.use('dark_background')\n\ndf = pd.read_csv('..\/input\/french-second-hand-car\/dataset.csv')","5cda498b":"sns.barplot(y='index', x='carmodel', data=df['carmodel'].str.strip().value_counts().reset_index().head(20));\nplt.xlabel('Number of cars')\nplt.ylabel('Model name');","b0d2585e":"sns.barplot(y='index', x='carmodel', data=df['carmodel'].str.strip().str.split().str[0].value_counts().reset_index().head(20));\nplt.xlabel('Number of cars')\nplt.ylabel('Model name');","ee8185e7":"df['carmodel'] = df['carmodel'].str.strip().str.split().str[0]","5becf9da":"df['price'] = df['price'].str.strip().str.extract(r'([0-9 ]+)')[0].str.replace(' ', '').astype('int')","66189a33":"df['price'].hist(bins=30);\nplt.xlabel('Price (\u20ac)')\nplt.ylabel('Frequency');","91608010":"df = df[~df['ann\u00e9e'].isna()]\ndf.loc[:, ('ann\u00e9e')] = df['ann\u00e9e'].astype('int')\ndf = df.rename({'ann\u00e9e': 'year'}, axis=1)","ee4c3a0f":"sns.barplot(x='index', y='year', data=df['year'].value_counts().reset_index().head(20));\nplt.xlabel('Year')\nplt.ylabel('Number of cars');","3a92b02f":"df['technical_check'] = df['contr\u00f4letechnique'].str.strip() == 'requis'","b1c77147":"df['kilometrage'] = df['kilom\u00e9tragecompteur'].str.extract(r'([0-9\\s]+)')[0].str.replace(' ', '').astype('int')","0d3688b7":"df['kilometrage'].hist(bins=30)\nplt.xlabel('Total kilometrage (km)')\nplt.ylabel('Frequency');","e198f277":"sns.barplot(x='\u00e9nergie', y='index', data=df['\u00e9nergie'].value_counts().reset_index().head(20));\nplt.xlabel('Year')\nplt.ylabel('Number of cars');","d4c3a42f":"df = df[df['\u00e9nergie'].str.strip().isin(['Essence', 'Diesel', 'Hybride essence \u00e9lectrique', 'Electrique'])]\ndf.loc[:, ('car_type')] = df['\u00e9nergie']","a9ddaf97":"df.loc[:, ('transmission')] = df['bo\u00eetedevitesse'].str.strip()","9f505a1e":"df['color'] = df['couleurext\u00e9rieure'].str.strip().str.lower()","a1724bb7":"sns.barplot(x='color', y='index', data=df['color'].value_counts().reset_index().head(20));\nplt.xlabel('Number of cars')\nplt.ylabel('Color');","3e0957c5":"df = df[~df['nombredeportes'].isna()]\ndf['door_number'] = df['nombredeportes'].astype('int')\ndf['seats_number'] = df['nombredeplaces'].fillna(4).astype('int')","8bb69b99":"df['garantie'] = df['garantie'].fillna('0')\ndf['guaranty'] = df['garantie'].str.extract(r\"([0-9]+)\")[0].astype(\"int\")","89cfc1f9":"df['is_first_hand'] = df['premi\u00e8remain(d\u00e9claratif)'].str.strip() == 'oui'","4da36af2":"df = df[~df['puissancefiscale'].isna()]\ndf = df[~df['puissancedin'].isna()]\ndf['CV'] = df['puissancefiscale'].str.strip().str.extract(r'([0-9]+)')[0].astype('int')\ndf['car_power'] = df['puissancedin'].str.extract(r\"([0-9]+)\")[0].astype('int')\ndf['pollution'] = df[\"crit'air\"].fillna(2).astype('str')","0dbca112":"columns = ['carmodel', 'price', 'year', 'technical_check', 'kilometrage', 'car_type', 'transmission', 'color',\n'door_number', 'seats_number', 'guaranty', 'is_first_hand', 'CV', 'car_power', 'pollution']\ndf = df[columns]","676a9c0c":"corr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap);","93e90f1b":"y = df['price']\nX = df.drop(['price'], axis=1)\nnumeric_columns = list(X.select_dtypes(include=np.number).columns)\ndummies_columns = [\"car_type\", 'carmodel', 'transmission', 'color', 'pollution']\nX = pd.get_dummies(X, columns=dummies_columns, prefix=dummies_columns)","fd66a222":"X_full, X_valid, y_full, y_valid = train_test_split(X, y, test_size=0.2, random_state=5432)\n\nscaler = StandardScaler()\n\nX_full.loc[:, numeric_columns] = pd.DataFrame(scaler.fit_transform(X_full[numeric_columns]), columns=numeric_columns, index=X_full.index)\nX_valid.loc[:, numeric_columns] = pd.DataFrame(scaler.transform(X_valid[numeric_columns]), columns=numeric_columns, index=X_valid.index)","ab87ce28":"def objective(trial,X,y):\n    train_X, test_X, train_y, test_y = train_test_split(X, y, test_size = 0.2, random_state = 101)\n    param = {\n                'eta':trial.suggest_uniform('eta', 0.005, 0.01),\n                \"n_estimators\" : trial.suggest_int('n_estimators', 400, 2000),\n                'max_depth':trial.suggest_int('max_depth', 7, 9),\n                'reg_alpha':trial.suggest_uniform('reg_alpha', 0.01, 1),\n                'reg_lambda':trial.suggest_uniform('reg_lambda', 0.01, 1),\n                'min_child_weight':trial.suggest_uniform('min_child_weight', 1, 10),\n                'gamma':trial.suggest_uniform('gamma', 0.01, 1),\n                'learning_rate':trial.suggest_uniform('learning_rate', 0.001, 0.01),\n                'colsample_bytree':trial.suggest_discrete_uniform('colsample_bytree',0.1,1,0.01),\n                'nthread' : -1\n            }\n    model = XGBRegressor(tree_method='gpu_hist')\n    model.set_params(**param)\n\n    model.fit(train_X,train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=0)\n    y_preds = model.predict(test_X)\n    return np.sqrt(mean_squared_error(test_y, y_preds))","bc675b88":"%time\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(lambda trial : objective(trial, X_full, y_full), n_trials = 50)","bb3ce179":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","a0bff3f4":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","9bc4930a":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['reg_alpha','reg_lambda','colsample_bytree'])","1b1d88ba":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","48af1477":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","57c97ffe":"params = study.best_params\nxgb_model = XGBRegressor(n_jobs=-1)\nxgb_model.set_params(**params)\nxgb_model.fit(X_full, y_full)\ny_pred = xgb_model.predict(X_valid)\nprint(f\"RMSE = {np.sqrt(mean_squared_error(y_pred, y_valid))}\")","30759f06":"f, ax = plt.subplots(figsize=(15, 10))\nplot_importance(xgb_model, max_num_features=20, ax=ax);","c3072231":"### Car models","88da80ea":"### Number of doors & seats","f6f34fb8":"First of all we have to clear our data. During clearing we're going to visualize some features to explore some information about dataset structure. ","cfdcf8df":"Seems like `CV` (French Car Power metric) has quite string positive correlation with price. That's our aces now let's try out to build a model to see if this features are good.","62be7e50":"So our model gave most weights to \n* `kilometrage` (It makes sence, because the car price drops quite fast with increasing of kilometrage)\n* `car_power` (More horses under the hood - more money you have to pay for a car)\n* `year` (Brand new car costs more)\n* `CV` (CV is almost the same as `car_power`, but in another unit of measurement)\n* `guaranty` (Guaranty duration is valuable too!)","c68af75c":"### Kilometrage","8f5d485d":"## Data preprocessing & Visualization","18fdfd5b":"### Options","0045db80":"Well, quite a lot of models, but a few of data. Let's try to aggregate by car brand to make our categories more voluminous.","cedfe16f":"### Car color","3bd5fba5":"Let's look at correlation matrix.","3a0ec396":"### Price","de4ac458":"### Manual\/Automatic transmission","023a2ebd":"### Feature importance","4f4ad9fd":"\n\n<p align=\"center\">\n  <img src=\"https:\/\/cdn.jdpower.com\/Hertz-car-rental-filing-bankruptcy.jpg\"\/>\n<\/p>","de7f021b":"Wow, so many relatively new cars! In Belarus situation is diametrically opposite :)","8a3d0239":"### Guaranty ","a85ea561":"## XGBoost + Optuna","078f69f4":"## Model Performance\n\n### Let's check how our model generalises validation data!","82454e7e":"Let's scale our data","39344f84":"### Does car require a technical check","67808fe0":"Let's plot histogram of our target vector `Price`","20265686":"Would be great to add some features from `options` column. Maybe some NLP techniques would be usefull.","b9676c0a":"### Year of registration","33b0e059":"That's better! And now I know that the french love peugeot :)","f29494df":"## Model building","d8d8b538":"Hm, looks like exponential distribution.","1f6e68f7":"Let's try visualize top-20 car models by amount in dataset.","da78d916":"### Is first hand ","4d96900c":"### Car metrics","903a524f":"Quite a lot of brand new cars!","baa188d9":"I suppose there are a lot of color there, would be great to merge similar ones to bigger category. May be in future I'll do it. ","d529a9ea":"We have some unbalanced classes. Let's just drop them. ","4daf4694":"There is still a lot of work to be done with this data set. I'll try to continue updating this notebook.\n\nSome more ideas about model improvement:\n* Use other features\n* Try some NLP algorithms for preprocessing string data\n* Think about some feature engineering\n* Get rid of outliers\n* Try out other models\n* Work with some distributions. Can we estimate some prior probabilities to help our model?\n* Perform some statistic tests to prove some hypotheses \n"}}