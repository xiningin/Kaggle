{"cell_type":{"ed6e16ee":"code","f871a27d":"code","d1e8655a":"code","35143062":"code","073d995b":"code","b22dae3c":"code","02c22c08":"code","b7c5468a":"code","741d0377":"code","82a4523a":"code","91e1bde2":"code","d0829e91":"code","a13c71c8":"code","dd953503":"code","64a7367a":"code","4bfeffba":"code","e6a1d053":"code","f27a3557":"code","da708f1b":"code","f26e9805":"code","26ede92b":"code","895ea6e7":"code","0f821008":"code","56dea4fe":"code","4094f5c0":"code","94db3ed0":"code","6d93e0be":"code","497dcf70":"code","bbd88481":"code","a40ebf97":"code","435413d3":"code","e51e7073":"code","effc1c93":"code","9ee48a25":"code","ee6600a6":"code","553d53d8":"code","e9619467":"code","b5195919":"markdown","717ffb0e":"markdown","6588ae3a":"markdown","d5338913":"markdown","0e46f637":"markdown","7fd38997":"markdown","05a0e096":"markdown","d175be6c":"markdown","69b8946a":"markdown"},"source":{"ed6e16ee":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output\nimport pandas as pd\nfrom PIL import Image\nimport time","f871a27d":"size = 25","d1e8655a":"# from http:\/\/jakevdp.github.io\/blog\/2013\/08\/07\/conways-game-of-life\/\ndef life_step_1(X):\n    \"\"\"Game of life step using generator expressions\"\"\"\n    nbrs_count = sum(np.roll(np.roll(X, i, 0), j, 1)\n                     for i in (-1, 0, 1) for j in (-1, 0, 1)\n                     if (i != 0 or j != 0))\n    return (nbrs_count == 3) | (X & (nbrs_count == 2))","35143062":"def draw_image(img):\n    img = Image.fromarray(np.uint8(img) * 255)\n    return img","073d995b":"def plot_animate(arr):\n    clear_output(wait=True)\n    plt.imshow(draw_image(arr))\n    plt.show()","b22dae3c":"arr = np.random.choice([0,1], (size, size), p=[0.5, 0.5])\nfor x in range(50):\n    arr = life_step_1(arr)\n    plot_animate(arr)\n    if sum(arr.ravel()) == 0:\n        print(x)\n        break","02c22c08":"arr = np.random.choice([0,1], (size, size), p=[0.85, 0.15])\n#warm-up, based on Kaggle desccription\nfor i in range(5):\n    arr = life_step_1(arr)\n# 1 interation\nnew_arr = life_step_1(arr)","b7c5468a":"fig, ax = plt.subplots(1,2, figsize=(12,12))\nax[0].imshow(draw_image(arr))\nax[0].set_title('start')\nax[1].imshow(draw_image(new_arr))\nax[1].set_title('stop after 1 iteration')\nplt.show()","741d0377":"# WORKING WITH THE DATA\n# parts based on https:\/\/www.kaggle.com\/candaceng\/understanding-the-problem-and-eda","82a4523a":"train_df = pd.read_csv('\/kaggle\/input\/conways-reverse-game-of-life-2020\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/conways-reverse-game-of-life-2020\/test.csv')\nprint(train_df.shape)\nprint(test_df.shape)","91e1bde2":"train_df.head()","d0829e91":"train_df.groupby(['delta']).size()","a13c71c8":"# SELECTING ONE SAMPLE TO VISUALIZE","dd953503":"train_sample = train_df.sample()","64a7367a":"sample_start = train_sample.loc[:, train_sample.columns.str.startswith('start')]\nsample_stop = train_sample.loc[:, train_sample.columns.str.startswith('stop')]","4bfeffba":"start_arr = np.asarray(sample_start).reshape(25, 25)\nstop_arr = np.asarray(sample_stop).reshape(25, 25)\n# time step \ntime_step = train_sample['delta'].values[0]\nprint(time_step)","e6a1d053":"def plot_comp(arr1, arr2, step):\n    fig, ax = plt.subplots(1,2, figsize=(12,12))\n    ax[0].imshow(draw_image(arr1))\n    ax[0].set_title('start')\n    ax[0].axis('off')\n    ax[1].imshow(draw_image(arr2))\n    ax[1].set_title(f'stop after: {step}')\n    ax[1].axis('off')\n    plt.show()","f27a3557":"plot_comp(start_arr, stop_arr, time_step)","da708f1b":"updated_arr = np.copy(start_arr)\nsteps = []\nsteps.append(updated_arr)\nfor x in range(time_step):\n    updated_arr = life_step_1(updated_arr)\n    steps.append(updated_arr)\n    plot_animate(updated_arr)\n    time.sleep(0.2)","f26e9805":"fig, m_axs = plt.subplots(1, len(steps), figsize = (10,20))\nfor c_ax, c_row in zip(m_axs.flatten(), steps):\n    c_ax.imshow(c_row, cmap='gray')\n    c_ax.axis('off')","26ede92b":"# CREATING SINGLE STEP DATASET","895ea6e7":"single_step_df = pd.DataFrame(columns=[train_df.columns])","0f821008":"start_key = ['start_' + str(i) for i in range(625)]\nstop_key = ['stop_' + str(i) for i in range(625)]","56dea4fe":"arr = np.random.choice([0,1], (size, size))\n#warm-up, based on Kaggle desccription\nfor i in range(5):\n    arr = life_step_1(arr)\n# 1 interation\nupdate_arr = life_step_1(arr)","4094f5c0":"new_row = np.concatenate((np.array([0]).reshape(1,-1), np.array([1]).reshape(1,-1), arr.reshape(-1, 625).round(0).astype('uint8'), update_arr.reshape(-1, 625).round(0).astype('uint8')), axis=1)","94db3ed0":"single_step_df = single_step_df.append(pd.DataFrame(new_row, columns=list(single_step_df)), ignore_index=True)","6d93e0be":"single_step_df.head()","497dcf70":"plot_comp(np.asarray(single_step_df.loc[0, train_sample.columns.str.startswith('start')]).reshape(25,25),\n          np.asarray(single_step_df.loc[0, train_sample.columns.str.startswith('stop')]).reshape(25,25), 1)","bbd88481":"def plot_comp(arr1, arr2, *args, labels=['']):\n    lst=[]\n    lst.append(arr1)\n    lst.append(arr2)\n    for arg in args:\n        lst.append(arg)\n    n = len(lst)\n    if labels == ['']:\n        labels = labels * n\n    fig, ax = plt.subplots(1,n, figsize=(12,12))\n    for idx in range(n):\n        ax[idx].imshow(draw_image(lst[idx]), cmap='gray')\n        ax[idx].set_title(labels[idx])\n        ax[idx].axis('off')\n\n    plt.show()","a40ebf97":"r = list(np.arange(0.05,0.95,0.01))\np = np.around(list(zip(r,np.subtract(1.0,r))), 2)\nind = list(np.arange(len(p)))","435413d3":"choice = np.random.choice(ind)\narr = np.random.choice([0,1], (size, size), p = p[choice])\n#warm-up, based on Kaggle desccription\nfor i in range(5):\n    arr = life_step_1(arr)\n# 1 interation\nupdate_arr = life_step_1(arr)\nprint(p[choice])","e51e7073":"plot_comp(arr, update_arr)","effc1c93":"for i in range(10000):\n    arr = np.random.choice([0,1], (size, size), p = p[np.random.choice(ind)])\n    #warm-up, based on Kaggle desccription\n    for i in range(5):\n        arr = life_step_1(arr)\n    # 1 interation\n    update_arr = life_step_1(arr)\n\n    new_row = np.concatenate((np.array([len(single_step_df)]).reshape(1,-1), np.array([1]).reshape(1,-1), arr.reshape(-1, 625).round(0).astype('uint8'), update_arr.reshape(-1, 625).round(0).astype('uint8')), axis=1)\n    single_step_df = single_step_df.append(pd.DataFrame(new_row, columns=list(single_step_df)), ignore_index=True)","9ee48a25":"single_step_df.head()","ee6600a6":"fig, m_axs = plt.subplots(5, 2, figsize=(12,12))\nfor i, (c_ax, c_row) in enumerate(zip(m_axs.flatten(), single_step_df.sample(5).iterrows())):\n    \n    m_axs[i,0].imshow(np.asarray(c_row[1][627:]).reshape(25,25).astype('uint8'))\n    m_axs[i,0].set_title(c_row[0])\n    m_axs[i,0].axis('off')\n    \n    m_axs[i,1].imshow(np.asarray(c_row[1][2:627]).reshape(25,25).astype('uint8'))\n    m_axs[i,1].set_title(c_row[0])\n    m_axs[i,1].axis('off')","553d53d8":"fig, ax = plt.subplots(1, 1, figsize=(6,6))\nnum_bins = 50\n\ndelta = 1\ncounts = single_step_df.iloc[:, 627:][single_step_df.iloc[:, 627:] == 1].count(axis=1).values\nax.hist(counts, num_bins, density=True, label=f'{delta}', alpha=0.5)\n\nax.set_xlabel('Number of Alive Cells')\nax.set_ylabel('Probability density')\nax.legend(prop={'size': 10})    \nfig.tight_layout()\nplt.show()","e9619467":"single_step_df.shape # current amount","b5195919":"**Probability distribution variations**","717ffb0e":"See count distribution for number of iteration steps. They are fairly uniformly distributed","6588ae3a":"**Play as sequence**","d5338913":"**Compare plot for start and stop**","0e46f637":"**Run simulation**","7fd38997":"In this notebook I would like to show some simple visualization and plotting functions for those getting started as I explore the data. This can be used to create and validate new data, and help understand the problem, visualizing progression stages of the Game of Life.","05a0e096":"**Display as individual frames**","d175be6c":"**Rules for updating**","69b8946a":"**Load data**"}}