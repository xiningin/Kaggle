{"cell_type":{"169f7095":"code","78965b7a":"code","3ef2fad2":"code","8f1b868c":"code","6c35b974":"code","fc7fcc33":"code","6e34fcba":"code","9219e5ab":"code","2ec600ff":"code","8d6645c2":"code","ed8efaef":"code","8771ea89":"code","d2c87da5":"code","46d0d0e4":"code","3e5a6e62":"code","885e6e7d":"code","06c3840b":"code","ed6436c1":"code","d010cd53":"code","0aa36296":"code","202bf53a":"code","2b09d35a":"code","18188544":"code","38fa2b51":"markdown"},"source":{"169f7095":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78965b7a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom datetime import datetime","3ef2fad2":"from sklearn.manifold import TSNE\nimport umap as UMAP","8f1b868c":"def get_decile(x):\n    \n    print('Decile distribution')\n    \n    for dec in np.linspace(0,1,11):\n        \n        val = np.quantile(x, dec)\n        \n        print(f\"[{int(dec*100):>3}%] - {val}\")\n      \n    ","6c35b974":"train = pd.read_csv('\/kaggle\/input\/actuarial-loss-estimation\/train.csv')\ntrain['DateTimeOfAccident'] = train.DateTimeOfAccident.apply(lambda x: datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ'))\ntrain['DateReported'] = train.DateReported.apply(lambda x: datetime.strptime(x, '%Y-%m-%dT%H:%M:%SZ'))\ntrain['DayOfReportedDelay'] = (train.DateReported - train.DateTimeOfAccident).apply(lambda x: x.days)\ntrain['HourOfAccident'] = train.DateTimeOfAccident.apply(lambda x: x.hour)\ntrain['WeekdayOfAccident'] = train.DateTimeOfAccident.apply(lambda x: x.isoweekday())","fc7fcc33":"train.head()","6e34fcba":"train.info()","9219e5ab":"fig, ax =plt.subplots(2,4, figsize = (20,7.5))\n'''frist row'''\nsns.distplot(train.Age,rug=False, hist=True, ax = ax[0][0])\nsns.countplot(train.Gender, ax = ax[0][1])\nsns.countplot(train.MaritalStatus, ax = ax[0][2])\nsns.countplot(train.DependentChildren, ax = ax[0][3])\n'''second row'''\nsns.countplot(train.DependentsOther, ax = ax[1][0])\nsns.distplot(train.WeeklyWages,rug=False, hist=True, kde = False, ax = ax[1][1])\nsns.countplot(train.PartTimeFullTime, ax = ax[1][2])\nsns.distplot(train.InitialIncurredCalimsCost, hist=True, rug=False, ax = ax[1][3])\n'''end plot'''\nfig.tight_layout()\nfig.show()","2ec600ff":"sns.jointplot(x=train.InitialIncurredCalimsCost, y=train.UltimateIncurredClaimCost, kind=\"hex\", color=\"#4CB391\", height = 10)","8d6645c2":"get_decile(train.InitialIncurredCalimsCost)","ed8efaef":"get_decile(train.UltimateIncurredClaimCost)","8771ea89":"subset_train = train.query(\"InitialIncurredCalimsCost > 500 and InitialIncurredCalimsCost < 18000 and UltimateIncurredClaimCost > 500 and UltimateIncurredClaimCost < 25000\")\n\nsns.jointplot(x=subset_train.InitialIncurredCalimsCost, y=subset_train.UltimateIncurredClaimCost, kind=\"hex\", color=\"#4CB391\", height = 10)","d2c87da5":"sns.jointplot(x=np.log(subset_train.InitialIncurredCalimsCost), y=np.log(subset_train.UltimateIncurredClaimCost), kind=\"hex\", color=\"#4CB391\", height = 10)","46d0d0e4":"corr_matrix = train.corr()\n\nfig, ax = plt.subplots(figsize=(10, 10))\n\nsns.heatmap(corr_matrix, annot=True, \n            linewidths=.5, ax=ax, \n            vmin = -1, vmax = 1, center = 0, \n            cmap = sns.cm.vlag)\nfig.show()","3e5a6e62":"dummy_train = pd.get_dummies(subset_train.drop(['ClaimDescription', 'ClaimNumber', 'DateTimeOfAccident', 'DateReported', 'InitialIncurredCalimsCost'], axis = 1))","885e6e7d":"display(dummy_train.head())\ndummy_train.shape","06c3840b":"dummy_X = dummy_train.drop('UltimateIncurredClaimCost', axis = 1)\ndummy_y = dummy_train[['UltimateIncurredClaimCost']]","ed6436c1":"tsne = TSNE(n_jobs = -1, verbose = 1).fit_transform(dummy_X.head(5000))","d010cd53":"tsne = pd.DataFrame(tsne, columns=['Dim_1', 'Dim_2'])\ntsne['y'] = dummy_y","0aa36296":"fig, ax = plt.subplots(figsize=(10, 10))\nsns.scatterplot(x = 'Dim_1', y = 'Dim_2', data = tsne, hue = 'y')\n\nfig.show()","202bf53a":"umap = UMAP.UMAP().fit_transform(dummy_X.head(5000))","2b09d35a":"umap = pd.DataFrame(umap, columns=['Dim_1', 'Dim_2'])\numap['y'] = dummy_y","18188544":"fig, ax = plt.subplots(figsize=(10, 10))\nsns.scatterplot(x = 'Dim_1', y = 'Dim_2', data = umap, hue = 'y')\n\nfig.show()","38fa2b51":"# TSNE vs UMAP"}}