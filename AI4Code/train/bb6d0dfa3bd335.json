{"cell_type":{"36a4550c":"code","29560284":"code","1474c92b":"code","a789bc0a":"code","e1f86deb":"code","b4373da2":"code","44f226ac":"code","2832b1e0":"code","2d3a6f1a":"code","8b0fb909":"code","dc004fbc":"code","4d70ae68":"code","9ce65743":"code","5ecea563":"code","0aa424e3":"code","cdb62397":"code","2b64a6a6":"code","548f1bd3":"code","e18b97c6":"code","d592edf6":"code","a9b781b0":"code","12a7bff1":"code","13532655":"code","4254664b":"code","2898d4af":"code","432e09e6":"code","d4673e13":"code","ef183a8c":"code","6e938632":"code","5022847d":"code","d82ab816":"code","4fb181eb":"code","f29ab4a6":"code","ad6824af":"code","ccc36ac2":"code","977ace49":"code","551255b0":"code","a0070970":"code","407e2ec7":"code","aaf7753b":"code","357c7d78":"code","0f1151bb":"code","8911a596":"code","3acedc51":"code","e2c0f7d8":"code","cb1f5859":"code","be216c83":"code","cb17ae81":"code","c6cc3dc3":"code","ca1b9884":"code","f121c1ec":"code","6a2ab26a":"code","d0cbe494":"code","86e6e6b0":"code","725af3e3":"code","d605d6b8":"code","2600e3b5":"code","7b5b3f55":"code","cc902c50":"code","0cfab1f3":"code","ea28c0a7":"code","f26af5e4":"code","98363281":"code","71248814":"code","e38950d3":"code","861f015f":"code","f755471a":"code","dbe2e581":"code","8f97902b":"code","1edfbd27":"code","edcaa87a":"code","cb1c03fe":"code","ac841502":"code","e3b87797":"code","370cfb9e":"code","b0bf0f0d":"code","bed2d3b4":"code","d348b849":"code","393dfdf8":"code","665e21ff":"code","50bd302b":"code","59a5714d":"code","943f402f":"code","5bd0dbd9":"code","edf45cb3":"code","841b609c":"code","000151ac":"code","f4c42640":"code","eaaa3d7a":"code","20d80a56":"code","29d85aa3":"code","535fb4bd":"code","e562d33c":"code","e8578184":"code","b3309814":"code","36e78802":"code","9a29217e":"code","c8e98584":"code","a6de3216":"code","ecfcf9f4":"code","88f399cc":"code","446e76c8":"code","d51bcea4":"code","0d80882b":"code","b4146fea":"code","fead76ef":"code","ab0c46d4":"code","e3214d22":"code","be1576c0":"code","59820811":"code","e331d3ef":"code","6615d99f":"code","b3e7188a":"code","066cb83f":"code","7d5a193c":"code","1cdca736":"code","afa77053":"code","9c55e672":"code","6a83fe77":"code","d4e01ed6":"code","9c73802c":"code","b3b46942":"code","3be04616":"code","9cfcf1ad":"code","7b9269ac":"code","c8c48f09":"code","207434e1":"code","c15f76ea":"code","af0f5b3f":"markdown","72f2e7d8":"markdown","2e200a2b":"markdown","0d0c6170":"markdown","93d5953b":"markdown","7d23186b":"markdown","10f3b3d9":"markdown","e0851590":"markdown","58c15a1a":"markdown","02e69e90":"markdown","8b1b3cef":"markdown","d0447234":"markdown","861b47ec":"markdown","87aa3218":"markdown","e5a68ff2":"markdown","aa3da5e0":"markdown"},"source":{"36a4550c":"import pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc\n\nimport os\nimport string\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nimport lightgbm as lgb\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nimport time","29560284":"dtypes = {\n        'MachineIdentifier':                                    'object',\n        'ProductName':                                          'object',\n        'EngineVersion':                                        'object',\n        'AppVersion':                                           'object',\n        'AvSigVersion':                                         'object',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'object',\n        'Processor':                                            'object',\n        'OsVer':                                                'object',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'object',\n        'OsBuildLab':                                           'object',\n        'SkuEdition':                                           'object',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'object',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'object',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'object',\n        'Census_DeviceFamily':                                  'object',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'object',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'object',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'object',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'object',\n        'Census_InternalBatteryType':                           'object',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'object',\n        'Census_OSArchitecture':                                'object',\n        'Census_OSBranch':                                      'object',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'object',\n        'Census_OSSkuName':                                     'object',\n        'Census_OSInstallTypeName':                             'object',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'object',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'object',\n        'Census_ActivationChannel':                             'object',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'object',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","1474c92b":"%time train = pd.read_csv(\"..\/input\/train.csv\", dtype=dtypes)\n%time test = pd.read_csv(\"..\/input\/test.csv\", dtype=dtypes)","a789bc0a":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","e1f86deb":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","b4373da2":"train.head()","44f226ac":"train.columns","2832b1e0":"print(train.shape,test.shape)","2d3a6f1a":"temp = train[\"HasDetections\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nplt.figure(figsize = (14,6))\nplt.title('HasDetections 0 vs 1')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x = 'labels', y=\"values\", data=df)\nlocs, labels = plt.xticks()\nplt.show()","8b0fb909":"temp = train[\"ProductName\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nplt.figure(figsize = (14,6))\nplt.title('Count of ProductName')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x = 'labels', y=\"values\", data=df)\nlocs, labels = plt.xticks()\nplt.show()","dc004fbc":"temp","4d70ae68":"import pandas as pd # package for high-performance, easy-to-use data structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\n# from plotly import tools\n# import plotly.tools as tls\n# import squarify\n# from mpl_toolkits.basemap import Basemap\n# from numpy import array\n# from matplotlib import cm\n\n# import cufflinks and offline mode\nimport cufflinks as cf\ncf.go_offline()\n\n# from sklearn import preprocessing\n# # Supress unnecessary warnings so that presentation looks clean\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# # Print all rows and columns\n# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)","9ce65743":"temp = train[\"EngineVersion\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Engine Version')","5ecea563":"temp = train[\"AppVersion\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of App Version')","0aa424e3":"temp = train[\"AvSigVersion\"].value_counts()\ntemp","cdb62397":"temp = train[\"IsBeta\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\nplt.figure(figsize = (14,6))\nplt.title('IsBeta 0 vs 1')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x = 'labels', y=\"values\", data=df)\nlocs, labels = plt.xticks()\nplt.show()","2b64a6a6":"temp = train[\"RtpStateBitfield\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of RtpStateBitfield')","548f1bd3":"temp = train[\"IsSxsPassiveMode\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of IsSxsPassiveMode')","e18b97c6":"temp = train[\"DefaultBrowsersIdentifier\"].value_counts()\ntemp","d592edf6":"temp = train[\"AVProductStatesIdentifier\"].value_counts()\ntemp","a9b781b0":"temp = train[\"AVProductsInstalled\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of AVProductsInstalled')","12a7bff1":"temp = train[\"AVProductsInstalled\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of AVProductsInstalled')","13532655":"temp = train[\"HasTpm\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of HasTpm')","4254664b":"#histogram\nf, ax = plt.subplots(figsize=(14, 6))\nsns.distplot(train['CountryIdentifier'])","2898d4af":"temp = train[\"OrganizationIdentifier\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of OrganizationIdentifier')","432e09e6":"temp = train[\"GeoNameIdentifier\"].value_counts()\ntemp","d4673e13":"temp = train[\"LocaleEnglishNameIdentifier\"].value_counts()\ntemp\n","ef183a8c":"temp = train[\"Platform\"].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Platform')","6e938632":"temp = train[\"Processor\"].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Processor')","5022847d":"temp = train[\"OsVer\"].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of OsVer')","d82ab816":"temp = train[\"OsBuild\"].value_counts()\ntemp","4fb181eb":"temp = train[\"OsSuite\"].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of OsSuite')","f29ab4a6":"temp = train['OsPlatformSubRelease'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of OsPlatformSubRelease')","ad6824af":"temp = train['OsBuildLab'].value_counts()\n\ntemp","ccc36ac2":"temp = train['SkuEdition'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of SkuEdition')","977ace49":"temp = train['IsProtected'].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of IsProtected')","551255b0":"temp = train['AutoSampleOptIn'].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of AutoSampleOptIn')","a0070970":"temp = train['PuaMode'].value_counts()\ntemp","407e2ec7":"temp = train['PuaMode'].value_counts()\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of PuaMode')","aaf7753b":"temp = train['SMode'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of SMode')","357c7d78":"temp = train['IeVerIdentifier'].value_counts()\n\ntemp","0f1151bb":"temp = train['SmartScreen'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of SmartScreen')","8911a596":"temp = train['Firewall'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Firewall')","3acedc51":"temp = train['UacLuaenable'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of UacLuaenable')","e2c0f7d8":"temp = train['Census_MDC2FormFactor'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_MDC2FormFactor')","cb1f5859":"temp = train['Census_DeviceFamily'].value_counts()\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_DeviceFamily')","be216c83":"temp = train['Census_OEMNameIdentifier'].value_counts()\ntemp","cb17ae81":"temp = train['Census_OEMModelIdentifier'].value_counts()\ntemp","c6cc3dc3":"temp = train['Census_ProcessorCoreCount'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_ProcessorCoreCount')","ca1b9884":"temp = train['Census_ProcessorManufacturerIdentifier'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_ProcessorManufacturerIdentifier')","f121c1ec":"temp = train['Census_ProcessorModelIdentifier'].value_counts()\ntemp","6a2ab26a":"temp = train['Census_ProcessorClass'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_ProcessorClass')","d0cbe494":"train['Census_PrimaryDiskTotalCapacity'].describe()","86e6e6b0":"temp = train['Census_PrimaryDiskTypeName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_PrimaryDiskTypeName')","725af3e3":"train['Census_SystemVolumeTotalCapacity'].describe()","d605d6b8":"temp = train['Census_HasOpticalDiskDrive'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_HasOpticalDiskDrive')","2600e3b5":"train['Census_TotalPhysicalRAM'].describe()","7b5b3f55":"temp = train['Census_ChassisTypeName'].value_counts()\ntemp","cc902c50":"train['Census_InternalPrimaryDiagonalDisplaySizeInInches'].describe()","0cfab1f3":"train['Census_InternalPrimaryDisplayResolutionHorizontal'].describe()","ea28c0a7":"train['Census_InternalPrimaryDisplayResolutionVertical'].describe()","f26af5e4":"temp = train['Census_PowerPlatformRoleName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_PowerPlatformRoleName')","98363281":"temp = train['Census_InternalBatteryType'].value_counts()\ntemp","71248814":"train['Census_InternalBatteryNumberOfCharges'].describe()","e38950d3":"temp = train['Census_OSVersion'].value_counts()\ntemp","861f015f":"temp = train['Census_OSArchitecture'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSArchitecture')","f755471a":"temp = train['Census_OSBranch'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSBranch')","dbe2e581":"temp = train['Census_OSBuildNumber'].value_counts()\ntemp","8f97902b":"temp = train['Census_OSBuildRevision'].value_counts()\ntemp","1edfbd27":"temp = train['Census_OSEdition'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSEdition')","edcaa87a":"temp = train['Census_OSSkuName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSSkuName')","cb1c03fe":"temp = train['Census_OSInstallTypeName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSInstallTypeName')","ac841502":"temp = train['Census_OSInstallLanguageIdentifier'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSInstallLanguageIdentifier')","e3b87797":"temp = train['Census_OSUILocaleIdentifier'].value_counts()\ntemp","370cfb9e":"temp = train['Census_OSWUAutoUpdateOptionsName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_OSWUAutoUpdateOptionsName')","b0bf0f0d":"temp = train['Census_IsPortableOperatingSystem'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsPortableOperatingSystem')","bed2d3b4":"temp = train['Census_GenuineStateName'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_GenuineStateName')","d348b849":"temp = train['Census_ActivationChannel'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_ActivationChannel')","393dfdf8":"temp = train['Census_IsFlightingInternal'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsFlightingInternal')","665e21ff":"temp = train['Census_IsFlightsDisabled'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsFlightsDisabled')","50bd302b":"temp = train['Census_FlightRing'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_FlightRing')","59a5714d":"temp = train['Census_ThresholdOptIn'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_ThresholdOptIn')","943f402f":"temp = train['Census_FirmwareManufacturerIdentifier'].value_counts()\ntemp","5bd0dbd9":"temp = train['Census_FirmwareVersionIdentifier'].value_counts()\ntemp","edf45cb3":"temp = train['Census_IsSecureBootEnabled'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsSecureBootEnabled')","841b609c":"temp = train['Census_IsWIMBootEnabled'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsWIMBootEnabled')","000151ac":"temp = train['Census_IsWIMBootEnabled'].value_counts()\ntemp","f4c42640":"temp = train['Census_IsVirtualDevice'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsVirtualDevice')","eaaa3d7a":"temp = train['Census_IsTouchEnabled'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsTouchEnabled')","20d80a56":"temp = train['Census_IsPenCapable'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsPenCapable')","29d85aa3":"temp = train['Census_IsPenCapable'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsPenCapable')","535fb4bd":"temp = train['Census_IsAlwaysOnAlwaysConnectedCapable'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Census_IsAlwaysOnAlwaysConnectedCapable')","e562d33c":"temp = train['Wdft_IsGamer'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Wdft_IsGamer')","e8578184":"temp = train['Wdft_RegionIdentifier'].value_counts()\n\n\ndf = pd.DataFrame({'labels': temp.index,\n                   'values': temp.values\n                  })\ndf.iplot(kind='pie',labels='labels',values='values', title='Count of Wdft_RegionIdentifier')","b3309814":"temp = train[\"EngineVersion\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"EngineVersion\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"EngineVersion\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Type of EngineVersion is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","36e78802":"temp = train[\"EngineVersion\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"EngineVersion\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"EngineVersion\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Type of EngineVersion is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9a29217e":"temp = train[\"AppVersion\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"AppVersion\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"AppVersion\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Type of AppVersion is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c8e98584":"temp = train[\"RtpStateBitfield\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"RtpStateBitfield\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"RtpStateBitfield\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of RtpStateBitfield is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a6de3216":"temp = train[\"IsSxsPassiveMode\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"IsSxsPassiveMode\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"IsSxsPassiveMode\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of IsSxsPassiveMode is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ecfcf9f4":"temp = train[\"AVProductsInstalled\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"AVProductsInstalled\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"AVProductsInstalled\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of AVProductsInstalled is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","88f399cc":"temp = train[\"OrganizationIdentifier\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"OrganizationIdentifier\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"OrganizationIdentifier\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of OrganizationIdentifier is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","446e76c8":"temp = train[\"Platform\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Platform\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Platform\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Platform is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d51bcea4":"temp = train[\"Processor\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Processor\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Processor\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Processor is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0d80882b":"temp = train[\"OsVer\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"OsVer\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"OsVer\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of OsVer is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b4146fea":"temp = train[\"OsSuite\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"OsSuite\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"OsSuite\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of OsSuite is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","fead76ef":"temp = train[\"OsPlatformSubRelease\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"OsPlatformSubRelease\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"OsPlatformSubRelease\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Type of OsPlatformSubRelease is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","ab0c46d4":"temp = train[\"SkuEdition\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"SkuEdition\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"SkuEdition\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Type of SkuEdition is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e3214d22":"temp = train[\"IsProtected\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"IsProtected\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"IsProtected\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of IsProtected is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","be1576c0":"temp = train[\"SmartScreen\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"SmartScreen\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"SmartScreen\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of SmartScreen is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","59820811":"temp = train[\"UacLuaenable\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"UacLuaenable\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"UacLuaenable\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of UacLuaenable is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e331d3ef":"temp = train[\"Census_MDC2FormFactor\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_MDC2FormFactor\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_MDC2FormFactor\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_MDC2FormFactor is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6615d99f":"temp = train[\"Census_DeviceFamily\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_DeviceFamily\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_DeviceFamily\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_DeviceFamily is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b3e7188a":"temp = train[\"Census_ProcessorCoreCount\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorCoreCount\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorCoreCount\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of Census_ProcessorCoreCount is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","066cb83f":"temp = train[\"Census_ProcessorManufacturerIdentifier\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorManufacturerIdentifier\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorManufacturerIdentifier\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of Census_ProcessorManufacturerIdentifier is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7d5a193c":"temp = train[\"Census_ProcessorClass\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorClass\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_ProcessorClass\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_ProcessorClass is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1cdca736":"temp = train[\"Census_PrimaryDiskTypeName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_PrimaryDiskTypeName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_PrimaryDiskTypeName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_PrimaryDiskTypeName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","afa77053":"temp = train[\"Census_HasOpticalDiskDrive\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_HasOpticalDiskDrive\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_HasOpticalDiskDrive\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of Census_HasOpticalDiskDrive is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9c55e672":"temp = train[\"Census_PowerPlatformRoleName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_PowerPlatformRoleName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_PowerPlatformRoleName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Values of Census_PowerPlatformRoleName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6a83fe77":"temp = train[\"Census_OSArchitecture\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSArchitecture\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSArchitecture\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSArchitecture is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d4e01ed6":"temp = train[\"Census_OSBranch\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSBranch\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSBranch\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSBranch is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9c73802c":"temp = train[\"Census_OSEdition\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSEdition\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSEdition\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSEdition is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b3b46942":"temp = train[\"Census_OSSkuName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSSkuName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSSkuName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSSkuName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3be04616":"temp = train[\"Census_OSInstallTypeName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSInstallTypeName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSInstallTypeName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSInstallTypeName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9cfcf1ad":"temp = train[\"Census_OSWUAutoUpdateOptionsName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_OSWUAutoUpdateOptionsName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_OSWUAutoUpdateOptionsName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_OSWUAutoUpdateOptionsName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7b9269ac":"temp = train[\"Census_GenuineStateName\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_GenuineStateName\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_GenuineStateName\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_GenuineStateName is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c8c48f09":"temp = train[\"Census_ActivationChannel\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_ActivationChannel\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_ActivationChannel\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_ActivationChannel is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","207434e1":"temp = train[\"Census_FlightRing\"].value_counts()\n#print(temp.values)\ntemp_y0 = []\ntemp_y1 = []\nfor val in temp.index:\n    temp_y1.append(np.sum(train[\"HasDetections\"][train[\"Census_FlightRing\"]==val] == 1))\n    temp_y0.append(np.sum(train[\"HasDetections\"][train[\"Census_FlightRing\"]==val] == 0))    \ntrace1 = go.Bar(\n    x = temp.index,\n    y = (temp_y1 \/ temp.sum()) * 100,\n    name='Detected'\n)\ntrace2 = go.Bar(\n    x = temp.index,\n    y = (temp_y0 \/ temp.sum()) * 100, \n    name='Not Detected'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = \"Types of Census_FlightRing is HasDetections or not in %\",\n    #barmode='stack',\n    width = 1000,\n    xaxis=dict(\n        title='',\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n    ),\n    yaxis=dict(\n        title='Count in %',\n        titlefont=dict(\n            size=16,\n            color='rgb(107, 107, 107)'\n        ),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )\n)\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","c15f76ea":"# checking missing data\ntotal = train.isnull().sum().sort_values(ascending = False)\npercent = (train.isnull().sum()\/train.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.head(20)","af0f5b3f":"### Data Load\nit's code in [Load the Totality of the Data](https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data)\nThanks.Theo Viel \n","72f2e7d8":"Set a dtypes in advanced","2e200a2b":"Size is so big !!","0d0c6170":"![](https:\/\/news.microsoft.com\/uploads\/sites\/71\/2018\/03\/logo-960x377.jpg)\n#### Introduction\nThe malware industry continues to be a well-organized, well-funded market dedicated to evading traditional security measures. Once a computer is infected by malware, criminals can hurt consumers and enterprises in many ways.\n\nWith more than one billion enterprise and consumer customers, Microsoft takes this problem very seriously and is deeply invested in improving security.\n\nAs one part of their overall strategy for doing so, Microsoft is challenging the data science community to develop techniques to predict if a machine will soon be hit with malware. As with their previous, Malware Challenge (2015), Microsoft is providing Kagglers with an unprecedented malware dataset to encourage open-source progress on effective techniques for predicting malware occurrences.\n\nCan you help protect more than one billion machines from damage BEFORE it happens?\n\n#### Acknowledgements\nThis competition is hosted by Microsoft, Windows Defender ATP Research, Northeastern University College of Computer and Information Science, and Georgia Tech Institute for Information Security & Privacy.\n\n#### Evaluation\n\nSubmissions are evaluated on area under the ROC curve between the predicted probability and the observed label. For each MachineIdentifier in the test set, you must predict a probability for the HasDetections column. The file should contain a header and have the following format:\n```\nMachineIdentifier,HasDetections\n1,0.5\n6,0.5\n14,0.5\netc.\n```\n","93d5953b":"Very unbalanced IsBeta","7d23186b":"### Missing Value","10f3b3d9":"They are same value counts. No unbalanced problem.","e0851590":"### Data Exploration with Target Variable","58c15a1a":"### Data Exploration","02e69e90":"AvSig Version has many values. Length : 8531\nAnd some values is broken. like `1.2&#x17;3.1144.0`","8b1b3cef":"#### Columns \nUnavailable or self-documenting column names are marked with an \"NA\".\n\n- MachineIdentifier - Individual machine ID\n- ProductName - Defender state information e.g. win8defender\n- EngineVersion - Defender state information e.g. 1.1.12603.0\n- AppVersion - Defender state information e.g. 4.9.10586.0\n- AvSigVersion - Defender state information e.g. 1.217.1014.0\n- IsBeta - Defender state information e.g. false\n- RtpStateBitfield - NA\n- IsSxsPassiveMode - NA\n- DefaultBrowsersIdentifier - ID for the machine's default browser\n- AVProductStatesIdentifier - ID for the specific configuration of a user's antivirus software\n- AVProductsInstalled - NA\n- AVProductsEnabled - NA\n- HasTpm - True if machine has tpm\n- CountryIdentifier - ID for the country the machine is located in\n- CityIdentifier - ID for the city the machine is located in\n- OrganizationIdentifier - ID for the organization the machine belongs in, organization ID is mapped to both - specific companies and broad industries\n- GeoNameIdentifier - ID for the geographic region a machine is located in\n- LocaleEnglishNameIdentifier - English name of Locale ID of the current user\n- Platform - Calculates platform name (of OS related properties and processor property)\n- Processor - This is the process architecture of the installed operating system\n- OsVer - Version of the current operating system\n- OsBuild - Build of the current operating system\n- OsSuite - Product suite mask for the current operating system.\n- OsPlatformSubRelease - Returns the OS Platform sub-release (Windows Vista, Windows 7, Windows 8, TH1, TH2)\n- OsBuildLab - Build lab that generated the current OS. Example: 9600.17630.amd64fre.winblue_r7.150109-2022\n- SkuEdition - The goal of this feature is to use the Product Type defined in the MSDN to map to a 'SKU-Edition' - name that is useful in population reporting. The valid Product Type are defined in %sdxroot%\\data\\windowseditions.xml. This API has been used since Vista and Server 2008, so there are many Product Types that do not apply to Windows 10. The 'SKU-Edition' is a string value that is in one of three classes of results. The design must hand each class.\n- IsProtected - This is a calculated field derived from the Spynet Report's AV Products field. Returns: a. TRUE if there is at least one active and up-to-date antivirus product running on this machine. b. FALSE if there is no active AV product on this machine, or if the AV is active, but is not receiving the latest updates. c. null if there are no Anti Virus Products in the report. Returns: Whether a machine is protected.\n- AutoSampleOptIn - This is the SubmitSamplesConsent value passed in from the service, available on CAMP 9+\n- PuaMode - Pua Enabled mode from the service\n- SMode - This field is set to true when the device is known to be in 'S Mode', as in, Windows 10 S mode, where only Microsoft Store apps can be installed\n- eVerIdentifier - NA\n- SmartScreen - This is the SmartScreen enabled string value from registry. This is obtained by checking in order, HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\SmartScreenEnabled and HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SmartScreenEnabled. If the value exists but is blank, the value \"ExistsNotSet\" is sent in telemetry.\n- Firewall - This attribute is true (1) for Windows 8.1 and above if windows firewall is enabled, as reported by the service.\n- UacLuaenable - This attribute reports whether or not the \"administrator in Admin Approval Mode\" user type is disabled or enabled in UAC. The value reported is obtained by reading the regkey HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA.\n- Census_MDC2FormFactor - A grouping based on a combination of Device Census level hardware characteristics. The logic used to define Form Factor is rooted in business and industry standards and aligns with how people think about their device. (Examples: Smartphone, Small Tablet, All in One, Convertible...)\n- Census_DeviceFamily - AKA DeviceClass. Indicates the type of device that an edition of the OS is intended for. Example values: Windows.Desktop, Windows.Mobile, and iOS.Phone\n- Census_OEMNameIdentifier - NA\n- Census_OEMModelIdentifier - NA\n- Census_ProcessorCoreCount - Number of logical cores in the processor\n- Census_ProcessorManufacturerIdentifier - NA\n- Census_ProcessorModelIdentifier - NA\n- Census_ProcessorClass - A classification of processors into high\/medium\/low. Initially used for Pricing Level SKU. No longer maintained and updated\n- Census_PrimaryDiskTotalCapacity - Amount of disk space on primary disk of the machine in MB\n- Census_PrimaryDiskTypeName - Friendly name of Primary Disk Type - HDD or SSD\n- Census_SystemVolumeTotalCapacity - The size of the partition that the System volume is installed on in MB\n- Census_HasOpticalDiskDrive - True indicates that the machine has an optical disk drive (CD\/DVD)\n- Census_TotalPhysicalRAM - Retrieves the physical RAM in MB\n- Census_ChassisTypeName - Retrieves a numeric representation of what type of chassis the machine has. A value of 0 means xx\n- Census_InternalPrimaryDiagonalDisplaySizeInInches - Retrieves the physical diagonal length in inches of the primary display\n- Census_InternalPrimaryDisplayResolutionHorizontal - Retrieves the number of pixels in the horizontal direction of the internal display.\n- Census_InternalPrimaryDisplayResolutionVertical - Retrieves the number of pixels in the vertical direction of the internal display\n- Census_PowerPlatformRoleName - Indicates the OEM preferred power management profile. This value helps identify the basic form factor of the device\n- Census_InternalBatteryType - NA\n- Census_InternalBatteryNumberOfCharges - NA\n- Census_OSVersion - Numeric OS version Example - 10.0.10130.0\n- Census_OSArchitecture - Architecture on which the OS is based. Derived from OSVersionFull. Example - amd64\n- Census_OSBranch - Branch of the OS extracted from the OsVersionFull. Example - OsBranch = fbl_partner_eeap where OsVersion = 6.4.9813.0.amd64fre.fbl_partner_eeap.140810-0005\n- Census_OSBuildNumber - OS Build number extracted from the OsVersionFull. Example - OsBuildNumber = 10512 or 10240\n- Census_OSBuildRevision - OS Build revision extracted from the OsVersionFull. Example - OsBuildRevision = 1000 or 16458\n- Census_OSEdition - Edition of the current OS. Sourced from HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion@EditionID in registry. Example: Enterprise\n- Census_OSSkuName - OS edition friendly name (currently Windows only)\n- Census_OSInstallTypeName - Friendly description of what install was used on the machine i.e. clean\n- Census_OSInstallLanguageIdentifier - NA\n- Census_OSUILocaleIdentifier - NA\n- Census_OSWUAutoUpdateOptionsName - Friendly name of the WindowsUpdate auto-update settings on the machine.\n- Census_IsPortableOperatingSystem - Indicates whether OS is booted up and running via Windows-To-Go on a USB stick.\n- Census_GenuineStateName - Friendly name of OSGenuineStateID. 0 = Genuine\n- Census_ActivationChannel - Retail license key or Volume license key for a machine.\n- Census_IsFlightingInternal - NA\n- Census_IsFlightsDisabled - Indicates if the machine is participating in flighting.\n- Census_FlightRing - The ring that the device user would like to receive flights for. This might be different from the ring of the OS which is currently installed if the user changes the ring after getting a flight from a different ring.\n- Census_ThresholdOptIn - NA\n- Census_FirmwareManufacturerIdentifier - NA\n- Census_FirmwareVersionIdentifier - NA\n- Census_IsSecureBootEnabled - Indicates if Secure Boot mode is enabled.\n- Census_IsWIMBootEnabled - NA\n- Census_IsVirtualDevice - Identifies a Virtual Machine (machine learning model)\n- Census_IsTouchEnabled - Is this a touch device ?\n- Census_IsPenCapable - Is the device capable of pen input ?\n- Census_IsAlwaysOnAlwaysConnectedCapable - Retreives information about whether the battery enables the device to be AlwaysOnAlwaysConnected .\n- Wdft_IsGamer - Indicates whether the device is a gamer device or not based on its hardware combination.\n- Wdft_RegionIdentifier - NA","d0447234":"Visualization Code in [Home Credit : Complete EDA + Feature Importance \u2713\u2713\n](https:\/\/www.kaggle.com\/codename007\/home-credit-complete-eda-feature-importance)\nThanks Lathwal","861b47ec":"#### Census columns","87aa3218":"### I will update relationship between target and features","e5a68ff2":"Length is 70","aa3da5e0":"Pua Mode has many NA."}}