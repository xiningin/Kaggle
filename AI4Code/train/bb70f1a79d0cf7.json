{"cell_type":{"14bedb85":"code","00602b55":"code","c9087d06":"code","f4beddfc":"code","2f28ecbb":"code","8cdbd2cc":"code","08ede8a5":"code","bbdb25c8":"markdown","d7333063":"markdown","38897cd1":"markdown","4df48852":"markdown","27f503c6":"markdown"},"source":{"14bedb85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00602b55":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","c9087d06":"dataset = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","f4beddfc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","2f28ecbb":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","8cdbd2cc":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators= 11,criterion= \"entropy\",random_state= 0)\n\nclassifier.fit(X_train,y_train)\n\n#predicting test set result\ny_prad = classifier.predict(X_test)\n# np.set_printoptions(precision=2)\n\n\n\n#confusion matrix and accuracy score\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score\n\ncm = confusion_matrix(y_test, y_prad)\n\nprint(cm)\nacc = accuracy_score(y_test, y_prad)\nprint(f\"Accuracy Score : {acc}\")","08ede8a5":"print(np.concatenate((y_prad.reshape(len(y_prad),1), y_test.reshape(len(y_test),1)),1))","bbdb25c8":"**Splitting The data in Test set and Training Set**","d7333063":"**Training with Random Forest Classifier**","38897cd1":"**Importing Libs**","4df48852":"**Importing Data Sets**","27f503c6":"**feature Scaling**"}}