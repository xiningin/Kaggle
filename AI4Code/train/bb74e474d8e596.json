{"cell_type":{"8df8163d":"code","edd8e212":"code","8635e860":"code","d959b2ac":"code","a22d9d18":"code","a16cf136":"code","a5f3d708":"code","85844a5c":"code","a17abf21":"code","4cff4715":"code","e02dbd60":"code","c47513ff":"code","91e5efba":"code","723b84ad":"code","c24369c4":"code","daf0080e":"code","4e39f3cd":"code","c082e234":"code","e085b3dc":"code","ca83d0a4":"code","3bb8da50":"markdown","9b781d65":"markdown","26f10691":"markdown","1087d4a4":"markdown","74ddb4a4":"markdown","25da1546":"markdown","9af45f85":"markdown","f72249b4":"markdown","6100b9a7":"markdown","ffd1ebd2":"markdown","430aa7e1":"markdown","d30f8888":"markdown","c123d733":"markdown","723abc03":"markdown","1c89a830":"markdown","4535f988":"markdown","b110f39a":"markdown","460c7e7a":"markdown","1ad3e07c":"markdown","ff9b2022":"markdown"},"source":{"8df8163d":"# importing libraries\nimport numpy as np \nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\nfrom ipywidgets import interact, interactive, interact_manual\nimport ipywidgets as widgets\nimport colorlover as cl","edd8e212":"# loading data from different years\n\nDIR = '\/kaggle\/input\/kaggle-survey-2020\/'\ndf_choice_20 = pd.read_csv(DIR + 'kaggle_survey_2020_responses.csv', low_memory=False)\ndf_choice_20.columns = ['_'.join(col) for col in df_choice_20.columns]\ndf_choice_20.columns = df_choice_20.iloc[0]\ndf_choice_20=df_choice_20.drop([0])\n\nDIR = '\/kaggle\/input\/kagglesurvey2019\/'\ndf_free_19 = pd.read_csv(DIR + 'other_text_responses.csv', low_memory=False)\ndf_choice_19 = pd.read_csv(DIR + 'multiple_choice_responses.csv', low_memory=False, encoding='latin-1', header=[0,1])\ndf_choice_19.columns = ['_'.join(col) for col in df_choice_19.columns]\n\n\n\nDIR = '\/kaggle\/input\/kaggle-survey-2018\/'\ndf_free_18 = pd.read_csv(DIR + 'freeFormResponses.csv', low_memory=False, header=[0,1])\ndf_choice_18 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1])\n# Format Dataframes\ndf_free_18.columns = ['_'.join(col) for col in df_free_18.columns]\ndf_choice_18.columns = ['_'.join(col) for col in df_choice_18.columns]\n\n\nDIR = '\/kaggle\/input\/kaggle-survey-2017\/'\ndf_free_17 = pd.read_csv(DIR + 'freeformResponses.csv', low_memory=False)\ndf_choice_17 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, encoding='latin-1')","8635e860":"#Replacing country name with less versbose alternative\n\ndf_choice_20.loc[df_choice_20['In which country do you currently reside?'] == 'United States of America', 'In which country do you currently reside?'] = 'USA'\ndf_choice_20.loc[df_choice_20['In which country do you currently reside?'] == 'United Kingdom of Great Britain and Northern Ireland', 'In which country do you currently reside?'] = 'UK'","d959b2ac":"pd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","a22d9d18":"# processing data for visualizations\n\ntop_count = df_choice_20['In which country do you currently reside?'].value_counts().head(8).reset_index().rename(columns={'In which country do you currently reside?': 'count', 'index': 'Country'})\n\n# taking only Indian responders\ndf_choice_17 = df_choice_17.loc[df_choice_17['Country'] == 'India']\ndf_choice_18 = df_choice_18.loc[df_choice_18['Q3_In which country do you currently reside?'] == 'India']\ndf_choice_19 = df_choice_19.loc[df_choice_19['Q3_In which country do you currently reside?'] == 'India']\ndf_choice_20 = df_choice_20.loc[df_choice_20['In which country do you currently reside?'] == 'India']\n\ndef get_age(x: int):\n    \"\"\"\n    Convert numerical age to categories.\n    \"\"\"\n    if 18 <= x <= 21:\n        return '18-21'\n    elif 22 <= x <= 24:\n        return '22-24'\n    elif 25 <= x <= 29:\n        return '25-29'\n    elif 30 <= x <= 34:\n        return '30-34'\n    elif 35 <= x <= 39:\n        return '35-39'\n    elif 40 <= x <= 44:\n        return '40-44'\n    elif 45 <= x <= 49:\n        return '45-49'\n    elif 50 <= x <= 54:\n        return '50-54'\n    elif 55 <= x <= 59:\n        return '55-59'\n    elif 60 <= x <= 69:\n        return '60-69'\n    elif x >= 70:\n        return '70+'\n    \n# create a new age column with the same name and unique values in all datasets\ndf_choice_17['Age_'] = df_choice_17['Age'].apply(lambda x: get_age(x))\ndf_choice_18['Age_'] = df_choice_18['Q2_What is your age (# years)?']\ndf_choice_18.loc[df_choice_18['Age_'].isin(['70-79', '80+']), 'Age_'] = '70+'\ndf_choice_19['Age_'] = df_choice_19['Q1_What is your age (# years)?']\ndf_choice_20['Age_'] = df_choice_20['What is your age (# years)?']\n\n# renaming columns so that it would be easier to work with them\ndf_choice_17 = df_choice_17.rename(columns={'GenderSelect': 'Gender', 'FormalEducation': 'Degree'})\ndf_choice_18 = df_choice_18.rename(columns={'Q1_What is your gender? - Selected Choice': 'Gender', 'Q9_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree'})\ndf_choice_19 = df_choice_19.rename(columns={'Q2_What is your gender? - Selected Choice': 'Gender', 'Q10_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree'})\ndf_choice_20 = df_choice_20.rename(columns={'What is your gender? - Selected Choice': 'Gender', 'What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree'})\n\ndf_choice_19['Degree'] = df_choice_19['Degree'].replace({'Master\u00e2\u0080\u0099s degree': 'Master\u2019s degree', 'Bachelor\u00e2\u0080\u0099s degree': 'Bachelor\u2019s degree',\n                                                         'Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree': 'Some college\/university study without earning a bachelor\u2019s degree'})\ndf_choice_17['Degree'] = df_choice_17['Degree'].replace({\"Master's degree\": 'Master\u2019s degree', \"Bachelor's degree\": 'Bachelor\u2019s degree',\n                                                         \"Some college\/university study without earning a bachelor's degree\": 'Some college\/university study without earning a bachelor\u2019s degree',\n                                                         \"I did not complete any formal education past high school\": \"No formal education past high school\"})\n\n","a16cf136":"# changing salary values to the same categories for 2018\ndf_choice_18.loc[df_choice_18['Salary'].isin(['400-500,000', '300-400,000']), 'Salary'] = '300,000-500,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['500,000+']), 'Salary'] = '> $500,000'\n\n\n\n# changing salary values to the same categories for 2019\ndf_choice_19.loc[df_choice_19['Salary'].isin(['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999']), 'Salary'] = '0-10,000'\ndf_choice_19.loc[df_choice_19['Salary'].isin(['10,000-14,999', '15,000-19,999']), 'Salary'] = '10-20,000'\ndf_choice_19.loc[df_choice_19['Salary'].isin(['20,000-24,999', '25,000-29,999']), 'Salary'] = '20-30,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '30,000-39,999', 'Salary'] = '30-40,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '40,000-49,999', 'Salary'] = '40-50,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '50,000-59,999', 'Salary'] = '50-60,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '60,000-69,999', 'Salary'] = '60-70,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '70,000-79,999', 'Salary'] = '70-80,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '80,000-89,999', 'Salary'] = '80-90,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '90,000-99,999', 'Salary'] = '90-100,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '100,000-124,999', 'Salary'] = '100-125,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '125,000-149,999', 'Salary'] = '125-150,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '150,000-199,999', 'Salary'] = '150-200,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '200,000-249,999', 'Salary'] = '200-250,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '250,000-299,999', 'Salary'] = '250-300,000'\n\n\n\n# changing salary values to the same categories for 2020\ndf_choice_20.loc[df_choice_20['Salary'].isin(['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999']), 'Salary'] = '0-10,000'\ndf_choice_20.loc[df_choice_20['Salary'].isin(['10,000-14,999', '15,000-19,999']), 'Salary'] = '10-20,000'\ndf_choice_20.loc[df_choice_20['Salary'].isin(['20,000-24,999', '25,000-29,999']), 'Salary'] = '20-30,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '30,000-39,999', 'Salary'] = '30-40,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '40,000-49,999', 'Salary'] = '40-50,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '50,000-59,999', 'Salary'] = '50-60,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '60,000-69,999', 'Salary'] = '60-70,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '70,000-79,999', 'Salary'] = '70-80,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '80,000-89,999', 'Salary'] = '80-90,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '90,000-99,999', 'Salary'] = '90-100,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '100,000-124,999', 'Salary'] = '100-125,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '125,000-149,999', 'Salary'] = '125-150,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '150,000-199,999', 'Salary'] = '150-200,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '200,000-249,999', 'Salary'] = '200-250,000'\ndf_choice_20.loc[df_choice_20['Salary'] == '250,000-299,999', 'Salary'] = '250-300,000'","a5f3d708":"#Rename Gender values in 2020\ndf_choice_20.loc[df_choice_20['Gender']=='Man','Gender'] = 'Male'\ndf_choice_20.loc[df_choice_20['Gender']=='Woman','Gender'] = 'Female'","85844a5c":"# Functions\n\ndef plot_gender_vars(var1: str = '', title_name: str = '', avg: bool = False):\n    \"\"\"\n    Make separate count plots for genders over years.\n    \"\"\"\n    colors = cl.scales['4']['div']['PuOr']\n    names = {0: '2017', 1: '2018', 2: '2019', 3:'2020'}\n    fig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Male', 'Female'), print_grid=False)\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate(['Male', 'Female']):\n        data = []\n        for i, df in enumerate([df_choice_17, df_choice_18, df_choice_19, df_choice_20]):\n            grouped = df.loc[(df['Gender'] == c), var1].value_counts().sort_index().reset_index()\n            msg = \"Total Count\"\n            if avg:\n                msg = \"Rate\"\n                grouped['Age_'] = grouped['Age_'] \/ np.sum(grouped['Age_'])\n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped.Age_,\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            fig.append_trace(trace, 1, j + 1)    \n\n    fig['layout'].update(height=400, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'{msg} of Indian kagglers by {title_name} and gender');\n    return fig\n\n\ndef plot_var(var1: str = '', title_name: str = ''):\n    \"\"\"\n    Plot one variable over years.\n    \"\"\"\n    colors = cl.scales['4']['div']['PuOr']\n    names = {0: '2017', 1: '2018', 2: '2019', 3:'2020'}\n    \n    data = []\n    for i, df in enumerate([df_choice_17, df_choice_18, df_choice_19, df_choice_20]):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        grouped[var1] = grouped[var1] \/ np.sum(grouped[var1])\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Indian kagglers by {title_name}', xaxis={'categoryorder': 'total descending'});  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_var_salary(var1: str = '', title_name: str = '', normalize: bool = False):\n    \"\"\"\n    Plot salary over years. This is a separate function, because\n    it is necessary to add code for sorting.\n    \"\"\"\n    colors = cl.scales['4']['div']['PuOr']\n    names = {0: '2018', 1: '2019', 2:'2020'}\n    \n    data = []\n    for i, df in enumerate([df_choice_18, df_choice_19, df_choice_20]):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        if normalize:\n            grouped[var1] = grouped[var1] \/ np.sum(grouped[var1])\n        map_dict = {'0-10,000': 0,\n                    '10-20,000': 1,\n                    '100-125,000': 10,\n                    '125-150,000' : 11,\n                    '150-200,000': 12,\n                    '20-30,000': 2,\n                    '200-250,000': 13,\n                    '250-300,000': 14,\n                    '30-40,000': 3,\n                    '300,000-500,000': 15,\n                    '40-50,000': 4,\n                    '50-60,000': 5,\n                    '60-70,000': 6,\n                    '70-80,000': 7,\n                    '80-90,000': 8,\n                    '90-100,000': 9,\n                    '> $500,000': 16,\n                    'I do not wish to disclose my approximate yearly compensation': 17}\n        grouped['sorting'] = grouped['index'].apply(lambda x: map_dict[x])\n        grouped = grouped.loc[grouped['index'] != 'I do not wish to disclose my approximate yearly compensation']\n        grouped = grouped.sort_values('sorting', ascending=True)\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=500, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Indian kagglers by {title_name}');  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_choice_var(var: str = '', title_name: str = ''):\n    \"\"\"\n    Plot a variable, in which responders could select several answers.\n    \"\"\"\n    col_names = [col for col in df_choice_20.columns if f'{var}' in col]\n    data = []\n    small_df = df_choice_20[col_names]\n    text_values = [col.rsplit('- ')[2] for col in col_names]\n    counts = []\n    for m, n in zip(col_names, text_values):\n        if small_df[m].nunique() == 0:\n            counts.append(0)\n        else:\n            counts.append(sum(small_df[m] == n))\n            \n    trace = go.Bar(\n        x=text_values,\n        y=counts,\n        name='c',\n        marker=dict(color='rgb(56,118,176)'),\n        showlegend=False\n    )\n    data.append(trace)    \n    fig = go.Figure(data=data)\n    fig['layout'].update(height=600, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', title=f'Popular {title_name}', xaxis={'categoryorder': 'total descending'});\n    return fig","a17abf21":"df_count = pd.DataFrame({'Year': [2017, 2018, 2019, 2020], 'Count': [df_choice_17.shape[0], df_choice_18.shape[0], df_choice_19.shape[0],  df_choice_20.shape[0]]})\ntop_count = top_count.sort_values('count')\n\nfig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Bar(y=top_count['Country'], x=top_count['count'], orientation='h', name='Number of respondents by country in 2020',marker=dict(color = 'rgb(33,187,30)', colorscale='viridis')), row=1, col=1)\nfig.add_trace(go.Bar(x=df_count['Year'], y=df_count['Count'], name='Number of Indian responders by year', marker=dict(color = 'rgb(30,187,171)', colorscale='viridis')), row=1, col=2)\n\nfig['layout'].update(height=400, width=1000,paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)', title= 'Count of Respodents');\niplot(fig);","4cff4715":"fig = plot_gender_vars(var1='Age_', title_name='age', avg=False)\niplot(fig);","e02dbd60":"fig = plot_gender_vars(var1='Age_', title_name='age', avg=True)\niplot(fig);","c47513ff":"#Convert long Degree name to small\ndf_choice_20.loc[df_choice_20['Degree']=='Some college\/university study without earning a bachelor\u2019s degree','Degree'] = \"College w\/o bachelor's degree\"\ndf_choice_19.loc[df_choice_19['Degree']=='Some college\/university study without earning a bachelor\u2019s degree','Degree'] = \"College w\/o bachelor's degree\"\ndf_choice_18.loc[df_choice_18['Degree']=='Some college\/university study without earning a bachelor\u2019s degree','Degree'] = \"College w\/o bachelor's degree\"\ndf_choice_17.loc[df_choice_17['Degree']=='Some college\/university study without earning a bachelor\u2019s degree','Degree'] = \"College w\/o bachelor's degree\"","91e5efba":"fig = plot_var(var1='Degree', title_name='degree')\niplot(fig);","723b84ad":"fig = plot_var_salary(var1='Salary', title_name='salary')\niplot(fig);","c24369c4":"media_source_q = 'Who\/what are your favorite media sources that report on data science topics? (Select all that apply)'\nfig = plot_choice_var(var=media_source_q, title_name='resources')\niplot(fig);","daf0080e":"language_q = 'What programming languages do you use on a regular basis? (Select all that apply)'\nfig = plot_choice_var(var=language_q, title_name='languages')\niplot(fig);","4e39f3cd":"pop_lib = 'Which of the following machine learning frameworks do you use on a regular basis?'\nfig = plot_choice_var(var=pop_lib, title_name='libraries')\niplot(fig);","c082e234":"additional_activity_q = 'Select any activities that make up an important part of your role at work'\nfig = plot_choice_var(var= additional_activity_q, title_name='additional activities')\niplot(fig);\n","e085b3dc":"nlp_tools = 'Which of the following natural language processing (NLP) methods do you use on a regular basis'\nfig = plot_choice_var(var=nlp_tools, title_name='nlp tools')\niplot(fig);","ca83d0a4":"pop_ml = 'Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years'\nfig = plot_choice_var(var= pop_ml, title_name='ml tools')\niplot(fig);","3bb8da50":"* It seems age group `18-21` forms majority of the Indian Kagglers and is increasing every year. This is mostly because Kaggle is getting more popular among Indian undergraduates.\n* The count of Male kagglers is higher for all age groups but there is increasing number of women Kagglers every year, which is a good sign. ","9b781d65":"### NLP Methods","26f10691":"### Popular programming languages among Indians Kagglers\n\n* Majority of the Indians use Kaggle, Youtube and Blogs to learn Data Science.\n* It isn't surprising that Kaggle is the main sources of getting information :)\n* After Kaggle, most of Indian Kagglers consider youtube and blogs as their favourite media resource to learn data science.\n* MOOCs, Twitter Influencers, Newsletter is also used by few Indians to gain information.","1087d4a4":"\nIndian community in Kaggle is quite large and is increasing every year. \n\nIf we look at other countries, we can see that India has the highest number of respodents this year.\n\nAlmost 6000 Indians took part in the survey this year. The number of Indians taking part in survey is increasing every year.\n\nFun Fact: World's first 4x Kaggle Grandmaster is an Indian [@Abhishek Thakur](https:\/\/www.kaggle.com\/abhishek)","74ddb4a4":"While scikit-learn is a top popular library for obvious reasons, there are other interesting libraries.\n- Tensorflow and Keras is the go to library for deep learning enthusiasts.\n- LGB and XGB are very popular as they provide great results and are easy to use. CatBoost is also gaining popularity. I am sure next year it will be more popular.\n- Pytorch is a bit behind. Looks like Indians like Tensorflow more than PyTorch. ","25da1546":"* It is interesting that most of the people spend time on analysing and understanding data that is important for business.\n\n* Many build protoypes as `Proof of Concepts` for stakeholders. \n* People also experiment and iteratively try to improve existing models.\n* Interstingly, some people do research about the state-of-the-art in machine learning. I think is forms a major driving force for innovation by Indians.","9af45f85":"### Popular ML libraries","f72249b4":"### Additional Activities that are part of work","6100b9a7":"### Resources for learning Data Science","ffd1ebd2":"## Professional skills","430aa7e1":"* I work in a startup and I completely understand that the industry is now looking for Automation of full ML Pipelines and hence it is the most popular ML tool.\n\n* Automated Model Selection and Automated Feature Engineering is major part of Automation of full ML pipelines, hence these are the second and third most popular tools.\n\n* Hyperparameter optimization tools like Optuna, HyperOpt is also gaining popularity.","d30f8888":"## Count of Respodents - India vs World","c123d733":"If we talk about salaries, it is important to understand several things:\n- some Indians work in USA and other countries and as a result have quite high salaries; \n- Compared to other countries Data Scientist or ML professionals in India are paid less;\n- Few Data Scientists from India work in more developed nations are paid in USD or Euro and hence very few Indians earn more than 30k USD per annum.\n\n* More than 50k is possible, but difficult to achieve - this is usually a level of head of DS.\n    * 30k-40k is a level of a senior DS.\n    * ~20k is a level of a middle DS.\n* Not surprisingly, most Indians get less than 10K USD because these are freshers or less than 2 years experienced.\n* By the way, did you notice some rich people with 500k$+? I wonder who those people are :)","723abc03":"### To be Continued..","1c89a830":"### Popular ML tools","4535f988":"\n\n* Surprisingly, excep the `18-21` age group the average age is decreasing over time. That could be because the influx of young Indians to Kaggle every year. \n\n* It seems in 2020 on an average there are more new female Kagglers than Female.","b110f39a":"* Almost 50% of the Indian Kagglers have a bachelor's degree.\n* Following by bachelor's degree almost 30% of rest have Master's degree.\n* The number of Indian PhD holders in kaggle is less but I think this will increase over years because some industries now seek PhD level expertise on data science.","460c7e7a":"* Not surprisingly word embeddings continue to be popular. They often don't require GPU at all or can be used in small neural nets (not requiring huge resources). \n* Encoder-Decoder methods is gaining popularity.\n* On the other hand BERT and other transformers allow to get great results rather easily, provided of course you have enough resources.","1ad3e07c":"## Kaggle ML & DS Survey\n\nEvery year we have a Machine Learning and Data Science Survey from Kaggle. This is the fourth time.\n\nIn this kernel I want to do some analysis which would be interesting for all .i.e  I have decided to have a look at the country where most of the kagglers reside, you guessed it right, India!\n\nI will show how our characteristics changed (or not changed) over time and what is interesting about Indian Kagglers.\n\nLet's assume that the survery is representative and allows to make conclusions.\nFor some features it is possible to compare data in different years, but for others either there is no such data or the data is in very different formats. Let's start.\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/16394\/logos\/header.png?t=2019-10-17-20-37-58)","ff9b2022":"There are several interesting things about popular programming languages in India:\n\n- Python and SQL are, of course, top used languages;\n- Python is undoubtedly the most used programming laguage by Kagglers because it is the go to laguage for all data scientists in Industry;\n- R isn't popular. It is probably used by a small section of Researchers or Students.\n- A lot of kagglers have background in software programming, as a result a lot of people know C++, C, Java, and other languages;"}}