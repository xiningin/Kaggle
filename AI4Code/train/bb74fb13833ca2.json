{"cell_type":{"ef148e2c":"code","a91df0c1":"code","e8273938":"code","30a4646d":"code","1e537985":"code","93d70515":"code","7c7c12b5":"code","a0a6e77c":"code","48fe14ec":"code","d60032d5":"code","d2a5cb4b":"code","534f7980":"code","3528661d":"code","fafcff51":"code","5d976a3e":"code","e39b583c":"code","70a554d6":"code","35fa01ab":"code","49cd7ae9":"markdown","79d39ab2":"markdown","7014901b":"markdown","e1036bbe":"markdown","95c8b810":"markdown","615e58df":"markdown","197a8dcc":"markdown","393cdd75":"markdown","dc45615d":"markdown","4e2ab2dc":"markdown","b2016859":"markdown","f22fc5e5":"markdown","6081d6b8":"markdown"},"source":{"ef148e2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a91df0c1":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.preprocessing import MinMaxScaler\n!pip install lime\nfrom lime.lime_text import LimeTextExplainer\nimport string\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e8273938":"df = pd.read_csv(\"..\/input\/restaurants-rating-supaero\/train_set.csv\", engine='python', error_bad_lines=False)\ndf_test = pd.read_csv(\"..\/input\/restaurants-rating-supaero\/test_set.csv\", engine='python', error_bad_lines=False)","30a4646d":"df.head(2)","1e537985":"df = df.dropna(subset=[\"review\"])","93d70515":"df_train, df_val = train_test_split(\n    df, \n    test_size=0.2, \n    random_state=0, \n    stratify=df['binary_target']\n)","7c7c12b5":"def convert_text_to_lowercase(df, colname):\n    df[colname] = df[colname].str.lower()\n    return df\n    \n\ndef text_cleaning(df, colname):\n    \"\"\"\n    Takes in a string of text, then performs the following:\n    1. convert text to lowercase\n    2. ??\n    \"\"\"\n    df = (\n        df\n        .pipe(convert_text_to_lowercase, colname)\n    )\n    return df","a0a6e77c":"df_train_clean = text_cleaning(df_train, 'review')\ndf_val_clean = text_cleaning(df_val, 'review')","48fe14ec":"Count_Vectorizer = CountVectorizer(max_features=20000)\n\nlogit = LogisticRegression(random_state=0)\n\npipeline = Pipeline([\n    ('vectorizer', Count_Vectorizer),\n    ('model', logit)])","d60032d5":"x_train = df_train_clean['review']\ny_train = df_train_clean['binary_target']\n\nx_val = df_val_clean['review']\ny_val = df_val_clean['binary_target']","d2a5cb4b":"pipeline.fit(x_train, y_train)","534f7980":"y_pred = pipeline.predict(x_val)","3528661d":"print(confusion_matrix(y_val, y_pred))\nprint(classification_report(y_val, y_pred))","fafcff51":"df_test_cleaned = text_cleaning(df_test, 'review')\nx_test = df_test_cleaned['review']\n\npredictions = pipeline.predict(x_test)","5d976a3e":"soumission = pd.DataFrame({\"review_id\": df_test['review_id'], \"prediction\": predictions})\n\nsoumission['prediction'] = soumission['prediction'].astype('bool')\nsoumission['review_id'] = soumission['review_id'].astype('str')\n\nsoumission.head().dtypes\n\nsoumission.to_csv('\/kaggle\/working\/submission.csv', index=False)","e39b583c":"class_names = [0, 1]\nexplainer = LimeTextExplainer(class_names=class_names)\n\ndef lime_model_interpreter(clf, idx, n_features):\n    text_idx = x_val.iloc[idx]\n    target_idx = y_val.iloc[idx]\n\n    exp = explainer.explain_instance(text_idx, clf.predict_proba, num_features=n_features)\n    print('Document id: %d' % idx)\n    print('Probability(True) =', clf.predict_proba([text_idx])[0,1])\n    print('True class: %s' % class_names[target_idx])\n\n    exp.show_in_notebook(text=True)","70a554d6":"lime_model_interpreter(pipeline, 2, n_features=6) ","35fa01ab":"lime_model_interpreter(pipeline, 7, n_features=6) ","49cd7ae9":"# 2. Data Split","79d39ab2":"# 5. Model","7014901b":"# 8. Formatting & export to csv","e1036bbe":"## Vectorization & model initiation","95c8b810":"# 1. Data","615e58df":"# 9. Model Interpretability - Do not consider for kaggle competition","197a8dcc":"# Hackathon Supaero - Restaurants ratings prediction\n\nPredict Yelp restaurants ratings from associated reviews, data about users and restaurants# 0. Packages","393cdd75":"# 4. Feature Engineering\n## Be creative !","dc45615d":"# 7. Prediction on test set","4e2ab2dc":"## Model fit on train set","b2016859":"# 3. Cleaning","f22fc5e5":"# 6. Evaluation","6081d6b8":"# 0. Packages"}}