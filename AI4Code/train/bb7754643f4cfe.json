{"cell_type":{"7d8e6b33":"code","7f26759d":"code","3484af21":"code","7710cd86":"code","922cc67b":"code","cc3e0113":"code","856c2909":"code","58ca4433":"code","2f2fcf75":"code","15b1403a":"code","40884087":"code","b1a4643b":"code","ce3864b5":"code","1d2420a1":"code","231887b8":"code","197eb4f6":"code","f4473edd":"code","e4d67c34":"code","d5fd2e72":"code","7814f8a6":"code","75a97759":"code","56d83620":"code","9e1bc7d4":"code","8e02f473":"code","4ec1468c":"code","98db7a03":"code","746877c3":"code","3945ce03":"code","b00ba51a":"code","61816266":"code","171da240":"code","2db717c4":"code","1da76f64":"code","36c9d908":"code","39d11262":"code","651d0fee":"code","7d330d72":"code","7f9890ce":"code","c0cd1eb7":"code","5124d7a1":"code","4b72d13e":"code","0b1d4ab3":"code","c83b81e4":"code","2702623d":"code","11681089":"code","0d6468b1":"code","9f5e6808":"code","49615049":"code","8ed03c03":"code","613ce00e":"code","8dd14638":"code","3f9a6071":"code","2f8c1a05":"code","f195c1f8":"code","afdbf6c2":"code","0dc42d14":"code","921f9899":"code","4b281664":"code","b8f0445b":"code","73e48a95":"code","26dac0f8":"code","6cbd501b":"code","b7747695":"code","23be9dc7":"code","eb290f0d":"code","16217e4c":"code","c15db132":"code","16f7b470":"code","7dcf040b":"code","fc4ef1ec":"code","82db9c17":"code","f8b78beb":"code","5a9f6fe4":"code","ff652746":"code","b2c037bb":"code","09fb6730":"code","7a389e98":"code","3eee520a":"code","5e8e38a1":"markdown","9f7b6097":"markdown","8d6e75a3":"markdown","7f955119":"markdown","e725401d":"markdown","0b95bea6":"markdown","b15234d4":"markdown","6586413f":"markdown","efd537f8":"markdown","17b33d41":"markdown","be9d10ed":"markdown","1ece87ae":"markdown","3700d76e":"markdown","afd4db3c":"markdown","762d4a13":"markdown","5a1226dc":"markdown","92251bfc":"markdown","314dc6cb":"markdown","b301bff9":"markdown","a014262f":"markdown","74b548e5":"markdown","b8e0a3ad":"markdown","180a8b8e":"markdown","8a2eb6b6":"markdown","91bb12f3":"markdown","8f02a6f0":"markdown","13e73de1":"markdown","bfb588b8":"markdown","72ca5076":"markdown","aee187a0":"markdown","38691ddd":"markdown"},"source":{"7d8e6b33":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","7f26759d":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","3484af21":"train.shape","7710cd86":"train.info()","922cc67b":"train.dtypes","cc3e0113":"def show_missing(data):\n  ''' This function is used to show percentage of missing data. '''\n  missing_values = data.isnull().sum()\n\n  percent_missing = missing_values \/ data.shape[0] * 100\n  percent_missing = percent_missing.round(2) \n\n  show_missing = pd.concat([percent_missing, data.nunique(), data.dtypes], keys=['PercentageMissing', 'Nunique values', 'Dtype'], axis = 1)\n\n  return show_missing\n\nshow_missing(train)","856c2909":"survivors = train[train['Survived'] == 1].shape[0]\ndeads = train.shape[0] - survivors\n\nprint(f'Survivor: {round(survivors \/ train.shape[0], 2) * 100} % \\nDead people: {round(deads \/ train.shape[0], 2) * 100}%')\n\nsns.countplot(data=train, x='Survived')","58ca4433":"sns.countplot(data=train, hue='Survived', x='Sex')","2f2fcf75":"# Survivors rate by class\ntrain.groupby('Pclass')['Survived'].mean().to_frame()","15b1403a":"print(train['Pclass'].value_counts())","40884087":"fig, ax = plt.subplots(1, 2, figsize=(12, 6))\nsns.barplot(data=train, x='Pclass', y='Survived', palette=['green'], ci=None, ax=ax[0])\nax[0].set_title('Survived Rate by Pclass')\nsns.countplot(data=train, x='Pclass', hue='Survived', palette=['red', 'blue'], ax=ax[1])\nax[1].set_title('Survived or Dead by Pclass')","b1a4643b":"train.groupby(['Pclass', 'Sex']).Survived.mean().to_frame()","ce3864b5":"sns.barplot(data=train, x='Pclass', y='Survived', hue='Sex', palette=['red', 'blue'], ci=None)\nplt.title('Survival rate by Pclass and Sex')","1d2420a1":"train['Age'].value_counts().head(10)","231887b8":"fig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.distplot(x=train['Age'], bins=40, kde=True, ax=ax[0], color='g')\nax[0].set_title('Age Distribution')\n\nax[1].set_title('Age distribution for the two subpopulations')\nsns.kdeplot(train['Age'].loc[train['Survived'] == 1], color='green', ax=ax[1], shade=True, label='Survived')\nsns.kdeplot(train['Age'].loc[train['Survived'] == 0], color='red', ax=ax[1], shade=True, label='Not Survived')\n# ax[1].set_legends()","197eb4f6":"plt.figure(figsize=(10, 6))\nsns.swarmplot(y='Sex', x='Age', hue='Survived', palette=('#C52219', '#23C552'), data=train)\nplt.title('Survived by age and sex')","f4473edd":"train['Fare'].value_counts()","e4d67c34":"fig, ax = plt.subplots(1,2,figsize=(12,6))\n\nsns.distplot(train.Fare, color='g', ax=ax[0])\nax[0].set_title('Fare distribution')\n\nfare_range = pd.qcut(train.Fare, 4, labels = ['Low', 'Mid', 'High', 'Very high'])\nsns.barplot(x=fare_range, y=train.Survived, palette='mako', ci=None, ax=ax[1])\nax[1].set_ylabel('Survival rate')","d5fd2e72":"sns.swarmplot(x='Sex', y='Fare', hue='Survived', palette=('#C52219', '#23C552'), data=train)\nplt.title('Survived by fare and sex')","7814f8a6":"# Create new feature with +1 is by passenger's self\ntrain['Nmember'] = train['SibSp'] + train['Parch'] + 1\nprint(train['Nmember'].value_counts())\n\nsns.countplot(data=train, x='Nmember', hue='Survived', palette=['red', 'blue'])","75a97759":"train['Ticket'].value_counts().head(10)","56d83620":"# Calculate length of ticket\ntrain['Ticket_len'] = train.Ticket.apply(lambda x: len(x))\ntrain['Ticket_len'].value_counts()","9e1bc7d4":"print(train['Cabin'].unique())\n\n# Extrac to carbin models\ntrain['Cabin'] = train['Cabin'].str.get(0)\n\nsns.countplot(data=train, x='Cabin', hue='Survived')","8e02f473":"train['Cabin'].value_counts()","4ec1468c":"print(train['Embarked'].value_counts())\nsns.countplot(data=train, x='Embarked', hue='Survived')","98db7a03":"train.drop(columns=['SibSp', 'Parch'], inplace=True)\ntrain.head()","746877c3":"def remove_zero_fares(row): # Function for processing Fare column\n    if row.Fare == 0:\n        row.Fare = np.NaN\n    return row\n\ndef age_transform(row): # Function for classifying to age groups\n  if row['Age'] < 7:\n    return 0\n  elif (row['Age'] >= 8) & (row['Age'] < 19):\n    return 1\n  elif (row['Age'] >=19) & (row['Age'] < 30):\n    return 2\n  elif (row['Age'] >=30) & (row['Age'] < 60):\n    return  3\n  else:\n    return 4\n\ndef fare_sex(row): # Function for relationship between Fare column and Sex column\n  special_arrange = (row.Fare >= 200.0) & (row.Fare <=300.0)\n  not_special_arrange = (row.Fare > 300.0) | (row.Fare < 200.0)\n  if (row.Sex == 'male') & special_arrange:\n    return 0\n  elif (row.Sex == 'female') & special_arrange:\n    return 1\n  elif (row.Sex == 'male') & not_special_arrange:\n    return 0\n  else:\n    return 1\n\ndef age_sex(row): # Function for relationship between Age column and Sex column\n  special = (row.Age >=8) & (row.Age <= 12)\n  not_special = (row.Age >12) | (row.Age < 8)\n  if (row.Sex == 'female') & special:\n    return 0\n  else:\n    return 1\n    \ndef ticket_len_cat(row):  # Function for classifying to ticket's length groups\n  if row.Ticket_len <= 5:\n    return 0\n  elif (row.Ticket_len > 5) & (row.Ticket_len <= 10):\n    return 1\n  else:\n    return 2","3945ce03":"def transform_data(data):\n  data.drop(columns=['Name'])\n  try:\n    # Sex column\n    data['nSex'] = data['Sex'].replace({'male': 0, 'female': 1})\n\n    # Age column\n    data['AgeCa'] = data.apply(age_transform, axis=1)\n    AgeCa_dummies = pd.get_dummies(data['AgeCa'], prefix='AgeCa')\n\n    # Fare column\n    data = data.apply(remove_zero_fares, axis=1)\n    data['Fare'].fillna(value=data['Fare'].median())\n    data['FareCat'] = pd.qcut(data['Fare'], 4, labels = [ 0, 1, 2, 3])\n    FareCat_dummies = pd.get_dummies(data['FareCat'], prefix='FareCat')\n\n    # Cabin column\n    data['Cabin'] = data['Cabin'].fillna(value='C')\n    cabin_dummies = pd.get_dummies(data['Cabin'], prefix='Cabin')\n\n    # Ticket's column\n    data['TicketLen'] = data.apply(ticket_len_cat, axis=1)\n    TicketLen_dummies = pd.get_dummies(data['TicketLen'], prefix='TicketLen')\n\n    # Embarked column\n    data['Embarked'] = data['Embarked'].dropna()\n    Embarked_dummies = pd.get_dummies(data['Embarked'], prefix='Embarked')\n\n    # Nnumber column\n    Nmember_dummies = pd.get_dummies(data['Nmember'], prefix='Nmember')\n\n    #Pclass\n    Pclass_dummies = pd.get_dummies(data['Pclass'], prefix='Pclass')\n\n    # New feature\n    data['FareSex'] = data.apply(fare_sex, axis=1)\n\n    data['AgeSex'] = data.apply(age_sex, axis=1)\n\n    # New data\n    new_data = pd.concat([data[['Survived', 'FareSex', 'AgeSex', 'nSex']],\n                          AgeCa_dummies, FareCat_dummies, cabin_dummies,\n                          TicketLen_dummies, Embarked_dummies, Nmember_dummies,\n                          Pclass_dummies], axis=1)\n  except: \n    new_data = pd.concat([data[['FareSex', 'AgeSex', 'nSex']],\n                          AgeCa_dummies, FareCat_dummies, cabin_dummies,\n                          TicketLen_dummies, Embarked_dummies, Nmember_dummies,\n                          Pclass_dummies], axis=1)\n\n  return new_data","b00ba51a":"train_data = transform_data(train)\ntrain_data.head()","61816266":"train_data.drop(columns=['Cabin_T'], inplace=True)\ntrain_data.shape","171da240":"from sklearn.preprocessing import MinMaxScaler\ndef split_data(data):\n  '''Function for splitting data.\n  Input: A dataframe \n  Output: X_train, X_test, y_train, y_test from dataframe input.'''\n\n  scale = MinMaxScaler()\n\n  X = data.drop(['Survived'], axis=1)\n  X = scale.fit_transform(X)\n  y = data['Survived']\n\n  # Train_test_split of data 70% - 30%\n  X_train, X_test, y_train, y_test = train_test_split(X, y.values, test_size=0.3, random_state=365)\n\n  return (X_train, X_test, y_train, y_test)\n\ndef base_learners_evaluation(data, base_classifiers):\n  '''Function for showing different score from base classifier models.\n  Input: A dataframe and a list of classifier model\n  Output: A dataframe score such as accuracy score, f1 score, precision score and recall score. '''\n\n\n  X_train, X_test, y_train, y_test = split_data(data)\n\n  idx = []\n  scores = {'Accuracy': [], 'F1_score': [], 'Precision': [], 'Recall': []}\n  for bc in base_classifiers:\n    lm = bc[1]\n    lm.fit(X_train, y_train)\n\n    prediction = lm.predict(X_test)\n\n    idx.append(bc[0])\n\n    scores['Accuracy'].append(accuracy_score(y_test, prediction))\n    scores['F1_score'].append(f1_score(y_test, prediction))\n    scores['Precision'].append(precision_score(y_test, prediction))\n    scores['Recall'].append(recall_score(y_test, prediction))\n\n  return pd.DataFrame(data=scores, index=idx)\n","2db717c4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n\nbase_classifiers = [('Decision Tree 3', DecisionTreeClassifier(max_depth=3)),\n                    ('Decision Tree 5', DecisionTreeClassifier(max_depth=5)),\n                    ('Decision Tree 8', DecisionTreeClassifier(max_depth=8)),\n                    ('Naive Bayes', GaussianNB()),\n                    ('SVC', SVC()),\n                    ('Logistic Regression', LogisticRegression(max_iter=500))]\n\nbase_learners_evaluation(train_data, base_classifiers)","1da76f64":"correlations = train_data.corr(method='pearson')['Survived'].drop('Survived')\ncorrelations.sort_values().plot(kind='barh')","36c9d908":"# Filtering features with lower absolute value than a threshold\n\nthreshold = 0.1\n\npearson_feature = list(correlations[abs(correlations) > threshold].index.values)\npearson_feature","39d11262":"data_corr = pd.concat([train_data[pearson_feature], train_data['Survived']], axis=1)\n\nbase_learners_evaluation(data_corr, base_classifiers)","651d0fee":"from sklearn.feature_selection import SelectKBest, chi2\n\n# Finding the best 20 features using chi2 test\ndata_chi2 = pd.DataFrame(SelectKBest(chi2, k=27).fit_transform(train_data.drop([\"Survived\"],axis = 1),train_data[\"Survived\"]))\ndata_chi2.head()","7d330d72":"data_chi2 = pd.concat([data_chi2, train_data['Survived']], axis=1)\nbase_learners_evaluation(data_chi2, base_classifiers)","7f9890ce":"from sklearn.feature_selection import SelectKBest, f_classif\n\n# Find the best 20 feature by f_classif test\ndata_classif = pd.DataFrame(SelectKBest(f_classif, 27).fit_transform(train_data.drop(['Survived'], axis=1), train_data['Survived']))\ndata_classif.head()","c0cd1eb7":"data_classif = pd.concat([data_classif, train_data['Survived']], axis=1)\nbase_learners_evaluation(data_classif, base_classifiers)","5124d7a1":"from sklearn.feature_selection import SelectKBest, f_regression\n\n# Find the best 20 feature by f_regression test\ndata_regression = pd.DataFrame(SelectKBest(f_regression, 27).fit_transform(train_data.drop(['Survived'], axis=1), train_data['Survived']))\ndata_regression.head()","4b72d13e":"data_regression = pd.concat([data_regression, train_data['Survived']], axis=1)\nbase_learners_evaluation(data_regression, base_classifiers)","0b1d4ab3":"public_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nPassengerId = public_data['PassengerId']\npublic_data.head()","c83b81e4":"public_data['Ticket_len'] = public_data.Ticket.apply(lambda x: len(x))\npublic_data['Nmember'] = public_data['SibSp'] + public_data['Parch'] + 1\npublic_data['Cabin'] = public_data['Cabin'].str.get(0)","2702623d":"public_data.head()","11681089":"public_data.drop(columns=[ 'PassengerId', 'SibSp', 'Parch'], inplace=True)","0d6468b1":"X = transform_data(public_data)\nX.head()","9f5e6808":"X.shape","49615049":"def ensemble_evaluation(data, model, label='Original'):\n  '''This function show score with Original data or Filtered data.'''\n  X_train, X_test, y_train, y_test = split_data(data)\n  model.fit(X_train, y_train)\n  prediction = model.predict(X_test)\n\n  return pd.DataFrame({'Accuracy' : [accuracy_score(y_test, prediction)],\n                       'F1_score' : [f1_score(y_test, prediction)],\n                       'precision' : [precision_score(y_test, prediction)],\n                       'Recall' : [recall_score(y_test, prediction)]}, index=[label])","8ed03c03":"from sklearn.ensemble import VotingClassifier\n\nmodels_comparison = {}\n\nensemble = VotingClassifier(base_classifiers)     \n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\n\nmodels_comparison['Voting'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","613ce00e":"models_comparison['Voting']","8dd14638":"from sklearn.ensemble import BaggingClassifier\n\nensemble = BaggingClassifier(n_estimators=10,\n                             base_estimator=DecisionTreeClassifier(max_depth=5))\n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\nmodels_comparison['Bagging'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","3f9a6071":"models_comparison['Bagging']","2f8c1a05":"from sklearn.ensemble import AdaBoostClassifier\n\nensemble = AdaBoostClassifier(n_estimators=365)\n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_chi2, ensemble, label='Filtered')\nmodels_comparison['AdaBoost'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","f195c1f8":"models_comparison['AdaBoost']","afdbf6c2":"from sklearn.ensemble import RandomForestClassifier\n\nensemble = RandomForestClassifier(n_estimators=500, max_depth=5, criterion=\"entropy\", n_jobs=-1)\n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\nmodels_comparison['RandomForest'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","0dc42d14":"models_comparison['RandomForest']","921f9899":"from xgboost import XGBClassifier\n\nensemble = XGBClassifier()\n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\nmodels_comparison['XGBClassifier'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","4b281664":"models_comparison['XGBClassifier']","b8f0445b":"from lightgbm import LGBMClassifier\n\nensemble = LGBMClassifier()\n\nensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\nensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\nmodels_comparison['LGBMClassifier'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)","73e48a95":"models_comparison['LGBMClassifier']","26dac0f8":"# !pip install catboost\n# import catboost \n# from catboost import CatBoostClassifier\n# np.random.seed(42)\n\n# ensemble = CatBoostClassifier()\n# ensemble_data_origin = ensemble_evaluation(train_data, ensemble, label='Original')\n# ensemble_data_filtered = ensemble_evaluation(data_corr, ensemble, label='Filtered')\n# models_comparison['CatBoostClf'] = pd.concat([ensemble_data_origin, ensemble_data_filtered], axis=0)\n# models_comparison['CatBoostClf']","6cbd501b":"train.head()","b7747695":"public_data.head()","23be9dc7":"# Because null value of Cabin column is so much, we will remove it from model training\npublic_data['Cabin'].isnull().sum()","eb290f0d":"# Creation of four groups\ntrain['Nmember'] = pd.cut(train.Nmember, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])\npublic_data['Nmember'] = pd.cut(public_data.Nmember, [0,1,4,7,11], labels=['Solo', 'Small', 'Big', 'Very big'])","16217e4c":"train['Title'] = train['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\npublic_data['Title'] = public_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","c15db132":"train['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\npublic_data['Title'].replace(['Mme', 'Ms', 'Lady', 'Mlle', 'the Countess', 'Dona'], 'Miss', inplace=True)\n\ntrain['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)\npublic_data['Title'].replace(['Major', 'Col', 'Capt', 'Don', 'Sir', 'Jonkheer'], 'Mr', inplace=True)","16f7b470":"train = train.apply(remove_zero_fares, axis=1)\ntrain['Fare'].fillna(value=train['Fare'].median())\n\npublic_data = public_data.apply(remove_zero_fares, axis=1)\npublic_data['Fare'].fillna(value=public_data['Fare'].median())","7dcf040b":"train['Ticket_lett'] = train.Ticket.apply(lambda x: x[:2])\n\npublic_data['Ticket_lett'] = public_data.Ticket.apply(lambda x: x[:2])","fc4ef1ec":"# train['Ticket_len'] = train.apply(ticket_len_cat, axis=1)\n# public_data['Ticket_len'] = public_data.apply(ticket_len_cat, axis=1)","82db9c17":"# Create group for fare ticket\n# train['FareCat'] = pd.qcut(train['Fare'], 4, labels = [ 0, 1, 2, 3])\n# public_data['FareCat'] = pd.qcut(public_data['Fare'], 4, labels = [ 0, 1, 2, 3])","f8b78beb":"# train['FareSex'] = train.apply(fare_sex, axis=1)\n# public_data['FareSex'] = public_data.apply(fare_sex, axis=1) ","5a9f6fe4":"# train['AgeSex'] = train.apply(age_sex, axis=1)\n# public_data['AgeSex'] = public_data.apply(age_sex, axis=1)","ff652746":"y_train = train['Survived']\nfeatures = ['Pclass', 'Fare', 'Title', 'Embarked', 'Nmember', 'Ticket_len', 'Ticket_lett']\nX_train = train[features]\nX_train.head()","b2c037bb":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nnumerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Title', 'Embarked', 'Nmember', 'Ticket_len', 'Ticket_lett']\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Bundle preprocessing and modeling code \ntitanic_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=5))\n])\n\n# Preprocessing of training data, fit model \ntitanic_pipeline.fit(X_train,y_train)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X_train, y_train, cv=10).mean()))","09fb6730":"X_test = public_data[features]\nX_test.head()","7a389e98":"# Preprocessing of test data, get predictions\npredictions = titanic_pipeline.predict(X_test)","3eee520a":"submission = pd.DataFrame({\n        \"PassengerId\": PassengerId,\n        \"Survived\": predictions\n    })\n\nsubmission.to_csv('submission_rd.csv', index=False)","5e8e38a1":"* At a first look, the relationship between Age and Survived appears not to be very clear, we notice for sure that there is a peak corresponding to young passengers for those who survived, but apart from that the rest is not very informative.\n* We can appreciate this feature more if we consider Sex too: now it is clearer that a good number of male survivors had less than 12 years, while the female group has no particular properties.","9f7b6097":"Pclass\n*   There were three classes on the ship and from the plot we see that the number of passengers in the third class was higher than the number of passengers in the first and second classes combined.\n*   However, the survival rate by class is not the same, more than 60% of first-class passengers and around half of the second class passengers were rescued, whereas 75% of third class passengers were not able to survive the disaster.\n*   For this reason, this is definitely an important aspect to consider.\n\n","8d6e75a3":"# Training by ensemble model","7f955119":"### Ticket Column","e725401d":"# **Explore Data Analysis**","0b95bea6":"### Pclass & Sex Columns","b15234d4":"### SibSp and Parch Columns","6586413f":"### Function for transform data","efd537f8":"# Conclusion\n  Cabin and Sex columns are not valuable for model although illustrating insight is very good. Over-reliance on these two attributes will cause the model score to decrease. So next time I will redo this predictive model in a different way. Let's look forward to it.\n\nNote: This article has references and improvements from other notebooks on Kaggle.\n\n## Thank you!!","17b33d41":"## Using f_classif for feature selection","be9d10ed":"***In general, models above is not good model for public data. Finally, i will use pipeline model for this problem***","1ece87ae":"# Data Processing","3700d76e":"### Age Column","afd4db3c":"# Use Pipeline for prediction","762d4a13":"\n\n*  We can also see the survival rate by Sex and Pclass, which is quite impressive. First class and second class women who were rescued were respectively 97% and 92%, while the percentage drops to 50% for third-class women.\n*  Despite that, this is still more than the 37% survival rate for first-class men.\n\n","5a1226dc":"## Using chi2 test for feature selection","92251bfc":"* Looking at the more detailed plot, we also see for example that all males with fare between 200 and 300 died.\n* For this reason, we can left the Fare feature as it is in order to prevent losing too much information; at deeper levels of a tree, a more discriminant relationship might open up and it could become a good group detector.","314dc6cb":"### Age & Sex Columns","b301bff9":"# Feature Selection\n\n- We will use the following for this purpose :\n    - Pearson correlation factor pearson\n    - chi square test\n    - f_regression\n    - f_classif ","a014262f":"\n\n*   3\/12 columns have missing values. Age - 19.87% and Cabin - 77.10%\n*    5\/12 columns have object dtype converting\n\n","74b548e5":"\n\n*   Man have trending to not rescued\n\n\n","b8e0a3ad":"### Cabin Column","180a8b8e":"### Pclass Column","8a2eb6b6":"### Fare & Sex","91bb12f3":"# Train Modeling","8f02a6f0":"## Using f_regression for feature selection","13e73de1":"## Using Pearson Correlation factor for feature selection","bfb588b8":"### Sex Column","72ca5076":"## Data preprocessing for pipeline model","aee187a0":"### Fare Column","38691ddd":"# Data Visualization"}}