{"cell_type":{"2f7a90d4":"code","a895a815":"code","6e12c3f9":"code","dbb01b22":"code","164cc497":"code","30e48a55":"code","808e4cc1":"code","b84560c4":"code","afdf4279":"code","84003cac":"code","48d7e6ce":"code","bfcbb9d2":"code","4c2a7358":"code","4f82bc52":"code","d1651853":"code","398c685d":"code","a51de17f":"code","4219ed40":"code","c60508fd":"code","fba764e2":"code","936546fa":"code","f8f924bd":"code","2a236e64":"code","bad47356":"code","d013b1f9":"code","3c6e7642":"code","eba3fe7d":"code","c4abf94c":"code","cb8e1f30":"code","9b5e104f":"code","0dc1d64a":"code","bb3ef2dd":"code","2a3287d7":"code","4eaff263":"markdown","0dae839f":"markdown","9858e45b":"markdown","c96191d2":"markdown","97fd3396":"markdown","0ea5bd9b":"markdown","f9e5d6c8":"markdown","8d4e3a87":"markdown","6ba201ae":"markdown"},"source":{"2f7a90d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a895a815":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import pearsonr\nimport math","6e12c3f9":"df = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')","dbb01b22":"description = df.iloc[0,:]\ndf = df.iloc[1:,:]","164cc497":"# use correlation ratio \ncorrelation_ratio_list = ['Q3','Q5','Q8','Q11','Q20','Q23','Q28','Q33','Q35','Q41']\n\n# use dummy_function\ndummy_list = ['Q7',\n              'Q9',\n              'Q10',\n              'Q12',\n              'Q14',\n              'Q16',\n              'Q17',\n              'Q18',\n              'Q19',\n              'Q24',\n              'Q27_A','Q27_B',\n              'Q29_A','Q29_B',\n              'Q30_A','Q30_B',\n              'Q31_A','Q31_B',\n              'Q32_A','Q32_B',\n              'Q34_A','Q34_B',\n              'Q36_A','Q36_B',\n              'Q37_A','Q37_B',\n              'Q38_A','Q38_B',\n              'Q39',\n              'Q40',\n              'Q42',\n             ]","30e48a55":"df_new = df[correlation_ratio_list].copy()","808e4cc1":"def get_mean_salary(string):\n    if string is np.nan:\n        return None\n    stripped = string.replace('$', '').replace(',', '').replace('>', '')\n    splitted = stripped.split('-')\n    splitted_int = [int(s) for s in splitted]\n    mean_salary = sum(splitted_int) \/ len(splitted_int)\n    return mean_salary","b84560c4":"df_new.loc[:, 'Q25_mean'] = df['Q25'].map(get_mean_salary)","afdf4279":"df_new.Q25_mean.value_counts().sort_index().plot.barh(figsize=(15,8), title='Compensation distribution', xlabel='compensation')","84003cac":"# Q1\ndef get_mean_age(string):\n    stripped = string.replace('+', '')\n    splitted = stripped.split('-')\n    splitted_int = [int(s) for s in splitted]\n    mean_age = sum(splitted_int) \/ len(splitted_int)\n    return mean_age","48d7e6ce":"# Q2\ndef get_sex_bool(string):\n    if string == 'Man':\n        return 1\n    elif string == 'Woman':\n        return 0\n    else:\n        return np.nan","bfcbb9d2":"# Q4\neducation_level_dict = {\n    'No formal education past high school':0,\n    'Some college\/university study without earning a bachelor\u2019s degree':1,\n    'Bachelor\u2019s degree':2,\n    'Master\u2019s degree':3,\n    'Doctoral degree':4,\n    'Professional doctorate':5,\n    'I prefer not to answer':np.nan\n}\ndef get_education_level_int(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        return education_level_dict[string]","4c2a7358":"# Q6\ndef get_mean_experience(string):\n    if string is np.nan:\n        return np.nan\n    elif string == 'I have never written code':\n        return 0\n    else:\n        stripped = string.replace('+', '').replace('years', '').replace('<', '').replace(' ', '')\n        splitted = stripped.split('-')\n        splitted_int = [int(s) for s in splitted]\n        mean_experience = sum(splitted_int) \/ len(splitted_int)\n        return mean_experience","4f82bc52":"# Q13\ntpu_experience_dict = {\n    'Never':0,\n    'Once':1,\n    '2-5 times':3.5,\n    '6-25 times':15.5,\n    'More than 25 times':25,\n}\n\ndef get_tpu_experience_int(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        return tpu_experience_dict[string]","d1651853":"# Q15\nml_experience_dict = {\n    'I do not use machine learning methods':0,\n    'Under 1 year':1,\n    '1-2 years':1.5,\n    '2-3 years':2.5,\n    '3-4 years':3.5,\n    '4-5 years':4.5,\n    '5-10 years':7.5,\n    '10-20 years':15,\n    '20 or more years':20,\n}\n\ndef get_ml_experience_int(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        return ml_experience_dict[string]","398c685d":"# Q21\ncompany_size_dict = {\n    '0-49 employees':24.5,\n    '50-249 employees':149.5,\n    '250-999 employees':624.5,\n    '1000-9,999 employees':5499.5,\n    '10,000 or more employees':10000,\n}\n\ndef get_company_size_int(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        return company_size_dict[string]","a51de17f":"# Q22\ndatascientist_dict = {\n    '0':0,\n    '1-2':1.5,\n    '3-4':3.5,\n    '5-9':7,\n    '10-14':12,\n    '15-19':17,\n    '20+':20,\n}\n\ndef get_mean_datascientist(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        return datascientist_dict[string]","4219ed40":"# Q26\ndef get_mean_expenditure(string):\n    if string is np.nan:\n        return np.nan\n    else:\n        stripped = str(string).replace('$', '').replace('(USD)', '').replace(',', '').replace(' or more', '')\n        splitted = stripped.split('-')\n        splitted_int = [int(s) for s in splitted]\n        mean_expenditure = sum(splitted_int) \/ len(splitted_int)\n        return mean_expenditure","c60508fd":"def get_dummy(string):\n    if string is np.nan:\n        return 0\n    else:\n        return 1","fba764e2":"# Q1\ndf_new.loc[:, 'Q1_mean'] = df['Q1'].map(get_mean_age)\n# Q2\ndf_new.loc[:, 'Q2_bool'] = df['Q2'].map(get_sex_bool)\n# Q4\ndf_new.loc[:, 'Q4_int'] = df['Q4'].map(get_education_level_int)\n# Q6\ndf_new.loc[:, 'Q6_mean'] = df['Q6'].map(get_mean_experience)\n# Q13\ndf_new.loc[:, 'Q13_int'] = df['Q13'].map(get_tpu_experience_int)\n# Q15\ndf_new.loc[:, 'Q15_int'] = df['Q15'].map(get_ml_experience_int)\n# Q21\ndf_new.loc[:, 'Q21_int'] = df['Q21'].map(get_company_size_int)\n# Q22\ndf_new.loc[:, 'Q22_mean'] = df['Q22'].map(get_mean_datascientist)\n# Q26\ndf_new.loc[:, 'Q26_mean'] = df['Q26'].map(get_mean_expenditure)\n# dummy\nfor dummy in dummy_list:\n    columns = df.filter(like=dummy, axis=1).keys()\n    for column in columns:\n        df_new.loc[:, column] = df[column].map(get_dummy)","936546fa":"def get_correlation_ratio(df, key):\n#     x\uff1a\u91cf\u7684\u5909\u6570\uff08Q25_mean\uff09\n#     y\uff1a\u8cea\u7684\u5909\u6570\n    x = df['Q25_mean']\n    y = df[key]\n    all_mean = x.dropna().mean()\n    all_var = ((x.dropna() - x.dropna().mean())**2).sum()\n#     y_unique_list = get_unique_list(y)\n    y_unique_list = y.unique()\n    inter_var = [len(x[y==i].dropna()) * (x[y==i].dropna().mean() - all_mean)**2 for i in y_unique_list]\n    r = sum(inter_var) \/ all_var\n    return r","f8f924bd":"def get_pearson_correlation(df, key):\n    x = df['Q25_mean']\n    y = df[key]\n    r, _ = pearsonr(x, y)\n    return r","2a236e64":"def get_corr(df, categorical_keys):\n#     df\uff1apandas.DataFrame\n#     categorical_keys\uff1alist\n    \n    keys = df.keys()\n    corr_ratio = pd.DataFrame({})\n    corr = pd.DataFrame({})\n    for key1 in keys:\n        if (key1 in categorical_keys):\n            r = get_correlation_ratio(df.dropna(subset=[key1,'Q25_mean']), key1)\n            corr_ratio.loc[key1, 'Q25_mean'] = r\n        \n        elif (key1 not in categorical_keys):\n            r = get_pearson_correlation(df.dropna(subset=[key1,'Q25_mean']), key1)\n            corr.loc[key1, 'Q25_mean'] = r\n    return corr, corr_ratio","bad47356":"categorical_col = df_new.select_dtypes(include='object').columns\ncorr, corr_ratio = get_corr(df_new, categorical_col)","d013b1f9":"corr_sorted = corr.sort_values(['Q25_mean'], ascending=False)\ncorr_sorted.style.set_caption('Correlation coefficient with compensation')\ncorr_sorted.head(10)","3c6e7642":"corr.sort_values(['Q25_mean'], ascending=True)[:-2].plot.barh(figsize=(20,55), title='Correlation (numerical columns)')","eba3fe7d":"corr_ratio_sorted = corr_ratio.sort_values(['Q25_mean'], ascending=False)\ncorr_ratio_sorted.style.set_caption('Correlation coefficient with compensation')","c4abf94c":"corr_ratio.sort_values(['Q25_mean'], ascending=True).plot.barh(figsize=(20,5), title='Correlation (categorical columns)')","cb8e1f30":"df_new.groupby('Q3').Q25_mean.mean().sort_values().plot.barh(figsize=(20,20), title='Compensation difference among countries', xlabel='countries', ylabel='compensation')","9b5e104f":"df_new.groupby('Q26_mean').Q25_mean.mean().sort_index().plot.barh(title='Compensation\/Expenditure for ML and\/or cloud services', xlabel='expenditure for ML and\/or cloud services')","0dc1d64a":"df_new.groupby('Q6_mean').Q25_mean.mean().sort_index().plot.barh(title='Compensation\/years of coding', xlabel='years of codeing')","bb3ef2dd":"df_new.groupby('Q15_int').Q25_mean.mean().sort_index().plot.barh(title='Compensation\/years of ML experience', xlabel='years of ML experience')","2a3287d7":"df_new.groupby('Q1_mean').Q25_mean.mean().sort_index().plot.barh(title='Compensation\/Age', xlabel='Age')","4eaff263":"# Years of ML experience\n\n  The more machine learning experience you have, the more money you earn.","0dae839f":"# Years of coding\n\n The more experience writing code you have, the more money you earn.\n","9858e45b":"# Expenditure for ML\/cloud services  \n \n Compensation and expenditure for ML\/cloud services have the positive correlation.\nThe more money you spend, the more money you earn.  \n It is unclear whether high-salaried employee spend more money or who spends more money becomes high-salaried employee.","c96191d2":"<!-- Inida has the highest population in Kaggle! -->","97fd3396":"# Summary\n\n To earn more money, important thing is to wrighting more (ML) code, to invest in ML or cloud services, and to live in countries with high salary levels.  \n On the other hand, programing language and tools are less important.  \n Through this analysis, I found that **gaining experience is the most effective way** to earn money.\n\nThank you for reading!!","0ea5bd9b":"# Country\n\nGenerally, yearly compensation is quite different among countries.\nAs shown in the graph below, kagglers' compensation is highly different.\n**Switherland**, **United States of America**, **Israel** are the top 3 countries.","f9e5d6c8":"<!-- Most people have under 3 years of experience -->","8d4e3a87":"# Age\n\n The older you are, the more money you earn.","6ba201ae":"# Who earns a lot of money?\nI found the correlation between yearly compensation and other factors.  \nFor categorical columns, correlation ratio was used.  \nFor numerical columns, Pearson correlation coefficient was used.\n\nIn categorical columns, **country(Q3)** have strong correlation with yearly compensation.  \nIn nimerical columns, **expenditure for ML\/cloud services(Q26)** ,**years of coding(Q6)**,**years of ML experience(Q15)**,**age(Q1)** have strong correlation with yearly compensation.\n\nLet me explain each factors below.\n"}}