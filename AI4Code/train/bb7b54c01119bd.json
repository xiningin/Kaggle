{"cell_type":{"444e2973":"code","d2f09228":"code","102f7d12":"code","3c20241a":"code","49664a99":"code","96696f13":"code","4230980b":"code","c0dbdd4d":"code","d7ccf923":"code","0d3a97d4":"code","4cb2da04":"code","16517309":"code","364100d7":"code","75dbf110":"code","926f89d1":"code","0828f426":"code","a6b2921c":"code","fae7969b":"code","12d177c0":"code","491f61ae":"code","3f23ecf4":"code","63234df2":"code","c8149697":"code","c8a05a0f":"code","9a898c0b":"code","322a3ae4":"code","1706dbfb":"code","fb31a5e8":"code","8a2d449e":"code","22d20440":"code","049428ac":"code","730de90c":"code","1a316964":"code","01e3b7f6":"code","937b5f4e":"code","820d965f":"code","31dcbd0a":"code","aacd7c8f":"code","709d6eae":"code","62c24c20":"code","4c19d084":"code","3d6b2f8a":"code","68eae1b6":"code","b2e97230":"code","8e753812":"code","d016c429":"code","1111bb14":"code","998aa223":"code","9acd75d4":"code","557df9c7":"code","35e040f7":"code","c26c3154":"code","8369a044":"code","b4c4cb5c":"code","0957efd9":"code","f8b078e4":"code","56ddde5e":"code","9f759bdb":"code","752fc893":"code","7cbc7da8":"code","6df70903":"code","0c911349":"code","7cfe5a68":"code","c34077ba":"code","ff3aaca8":"code","20c37b52":"code","05e53d80":"code","078e656b":"code","24a61440":"code","d0713524":"code","3e761cab":"code","38391559":"code","f956402a":"code","e3ad6049":"code","a843a340":"code","67a89ef1":"code","d45ebad8":"code","4b06cca7":"code","2286df50":"code","0b78372a":"code","9cbd2a51":"code","2525394b":"code","66d1b7f8":"code","b5f1c66d":"code","19277a1c":"code","cc1c5586":"code","f1b67821":"code","6f77f238":"code","93c85a38":"code","f3cebcb5":"markdown","a2d2ebb0":"markdown","86f58a29":"markdown","3f6a4f15":"markdown","9e393930":"markdown","016072b8":"markdown","61c03724":"markdown","59fa1372":"markdown","d53e598c":"markdown","507ece99":"markdown","e540947f":"markdown","4ccb9402":"markdown","74a3324f":"markdown","99965a55":"markdown","e5cffd1d":"markdown","c6b55564":"markdown","a441042f":"markdown","8b279f32":"markdown","8a807b9d":"markdown","c4f787d6":"markdown","20632b5f":"markdown","094833c1":"markdown","1d75b9ea":"markdown","2b1540e9":"markdown","146685bb":"markdown","5c52b019":"markdown","a6db2343":"markdown","d05f1f87":"markdown","903b41b0":"markdown","2fd31896":"markdown","d86cfd6a":"markdown","eb3064ef":"markdown","8e62d060":"markdown","b597db5a":"markdown","3d409c13":"markdown","34b4541a":"markdown","d11a6c77":"markdown","570c8c57":"markdown","68dd23f9":"markdown","b28b752a":"markdown","1115c944":"markdown","dce273c7":"markdown","435d7921":"markdown","6fb1fec7":"markdown","0153dffe":"markdown","3c028945":"markdown","63961827":"markdown"},"source":{"444e2973":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2f09228":"import warnings\nwarnings.simplefilter('ignore')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport random\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score, roc_auc_score, make_scorer\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\n\nfrom skopt import BayesSearchCV\n# parameter ranges are specified by one of below\nfrom skopt.space import Real, Categorical, Integer\n\n#classifiers\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier, Pool\nimport xgboost as xgb\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import MultinomialNB","102f7d12":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_data.head()","3c20241a":"train_data.info()","49664a99":"def lower_casing(dataframe):\n    dataframe.columns = dataframe.columns.str.lower()# \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    for i in range (len(dataframe.columns)):\n        \n        if dataframe.columns[i] != 'passengerid':# \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 customerid \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\n            try:\n                dataframe[dataframe.columns[i]] = dataframe[dataframe.columns[i]].str.lower()\n            except:\n                dataframe[dataframe.columns[i]] = dataframe[dataframe.columns[i]]","96696f13":"lower_casing(train_data)\nlower_casing(test_data)","4230980b":"def miss_inf(data, name):\n    shape_data = data.shape\n    miss_data = (data.isnull().sum()\/data.shape[0]*100).sort_values(ascending = False).head(10)\n    print()\n    print(name)\n    print()\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 ' + name + ':', shape_data)\n    print()\n    print('\u0414\u043e\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 (\u0442\u043e\u043f-10):')\n    print(miss_data)\n    print()\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0432 ' + name + ':', data.duplicated().sum())","c0dbdd4d":"miss_inf(train_data, 'train_data')","d7ccf923":"test_data.head()","0d3a97d4":"test_data.info()","4cb2da04":"miss_inf(test_data, 'test_data')","16517309":"sns.set_style('whitegrid')\nplt.figure(figsize=(16, 5))\nsns.distplot(train_data['age'][train_data['survived']== 1], bins=30, hist=False, label='\u0412\u044b\u0436\u0438\u0432\u0448\u0438\u0435')\nsns.distplot(train_data['age'][train_data['survived']== 0], bins=30, hist=False, label='\u041f\u043e\u0433\u0438\u0431\u0448\u0438\u0435')\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\")\nplt.xlabel('\u0412\u043e\u0437\u0440\u0430\u0441\u0442')\nplt.ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a')\nplt.legend()\nplt.show()","364100d7":"sns.set_style('whitegrid')\nplt.figure(figsize=(16, 5))\nsns.violinplot(x=\"survived\", y=\"age\", hue=\"sex\", data=train_data, palette=\"coolwarm\")\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438 \u043f\u043e\u043b\u0430\")\nplt.legend()\nplt.show()","75dbf110":"surv_piv = train_data.pivot_table(index='sex', columns = 'survived', values = 'passengerid', aggfunc = 'count')\nsurv_piv['ratio'] = surv_piv[1] \/ (surv_piv[0] + surv_piv[1])\nsurv_piv['ratio']","926f89d1":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='sex', y='survived', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430\")\nplt.show()","0828f426":"sns.set_style('whitegrid')\nplt.figure(figsize=(16, 5))\nsns.distplot(train_data['age'], bins=30)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\")\nplt.legend()\nplt.show()","a6b2921c":"#\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntrain_data.loc[train_data['age'] <= 16, 'f_age'] = 'child'\ntrain_data.loc[(train_data['age'] > 16) & (train_data['age'] <= 25), 'f_age'] = 'young'\ntrain_data.loc[(train_data['age'] > 25) & (train_data['age'] <= 45), 'f_age'] = 'adult'\ntrain_data.loc[train_data['age'] > 45, 'f_age'] = 'senior'\n#\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest_data.loc[test_data['age'] <= 16, 'f_age'] = 'child'\ntest_data.loc[(test_data['age'] > 16) & (test_data['age'] <= 25), 'f_age'] = 'young'\ntest_data.loc[(test_data['age'] > 25) & (test_data['age'] <= 45), 'f_age'] = 'adult'\ntest_data.loc[test_data['age'] > 45, 'f_age'] = 'senior'\n\ntrain_data.head()","fae7969b":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='f_age', y='survived', hue='sex', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\")\nplt.show()","12d177c0":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='pclass', y='survived', hue='sex', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430 \u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u0438\u043b\u0435\u0442\u0430\")\nplt.show()","491f61ae":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.distplot(train_data['fare'], kde = False, bins=100)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0438\u043b\u0435\u0442\u0430\")\nplt.xlim(-1,100)\nplt.legend()\nplt.show()","3f23ecf4":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.boxplot(data=train_data, palette='rainbow', x=\"fare\", orient='h')\nplt.xlim(-1,100)\nplt.legend()\nplt.show()","63234df2":"train_data['fare'].describe()","c8149697":"#\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntrain_data.loc[train_data['fare'] <= 15, 'f_fare'] = 'cheap'\ntrain_data.loc[(train_data['fare'] > 15) & (train_data['fare'] <= 31), 'f_fare'] = 'middle'\ntrain_data.loc[(train_data['fare'] > 31) & (train_data['fare'] <= 65), 'f_fare'] = 'expensive'\ntrain_data.loc[train_data['fare'] > 65, 'f_fare'] = 'luxury'\n#\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest_data.loc[test_data['fare'] <= 15, 'f_fare'] = 'cheap'\ntest_data.loc[(test_data['fare'] > 15) & (test_data['fare'] <= 31), 'f_fare'] = 'middle'\ntest_data.loc[(test_data['fare'] > 31) & (test_data['fare'] <= 65), 'f_fare'] = 'expensive'\ntest_data.loc[test_data['fare'] > 65, 'f_fare'] = 'luxury'\n\ntrain_data.head()","c8a05a0f":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='f_fare', y='survived', hue='sex', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430 \u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u0438\u043b\u0435\u0442\u0430\")\nplt.show()","9a898c0b":"train_data['fam_size'] = train_data['sibsp'] + train_data['parch'] + 1\ntest_data['fam_size'] = test_data['sibsp'] + test_data['parch'] + 1\n\ntrain_data['fam_size'] = train_data['fam_size'].replace([5,6,7,8,11],1)\ntest_data['fam_size'] = test_data['fam_size'].replace([5,6,7,8,11],1)\n\n#\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntrain_data.loc[(train_data['sibsp'] == 0) & (train_data['parch'] == 0), 'is_family'] = 0\ntrain_data.loc[(train_data['sibsp'] != 0) | (train_data['parch'] != 0), 'is_family'] = 1\n\n#\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n\ntest_data.loc[(test_data['sibsp'] == 0) & (test_data['parch'] == 0), 'is_family'] = 0\ntest_data.loc[(test_data['sibsp'] != 0) | (test_data['parch'] != 0), 'is_family'] = 1\n\n\ntrain_data.head()","322a3ae4":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='is_family', y='survived', hue='sex', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043e\u043b\u0430 \u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0441\u0435\u043c\u044c\u0438\")\nplt.show()","1706dbfb":"train_data.loc[(train_data['cabin'].isna() == False), 'is_cabin'] = 1\ntrain_data.loc[(train_data['cabin'].isna() == True), 'is_cabin'] = 0\n\ntest_data.loc[(test_data['cabin'].isna() == False), 'is_cabin'] = 1\ntest_data.loc[(test_data['cabin'].isna() == True), 'is_cabin'] = 0","fb31a5e8":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 5))\nsns.barplot(x='is_cabin', y='survived', data=train_data, palette=\"coolwarm\")\nplt.title(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430\")\nplt.show()","8a2d449e":"def title(row):\n    a = ['mrs','mr','miss','master']\n    ret = []\n    for b in a:\n        if b in row['name']:\n            ret.append(b)\n    if len(ret)==0:\n        if row['sex'] == 'male':\n            ret = ['mr']\n        else:\n            ret = ['mrs']\n    return ' '.join(ret)\ntrain_data['title'] = train_data.apply(title, axis = 1)\ntest_data['title'] = test_data.apply(title, axis = 1)","22d20440":"#\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntrain_data.loc[(train_data['title'] == 'mrs mr') | (train_data['title'] == 'mrs mr miss'), 'title'] = 'mrs'\n\n#\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest_data.loc[(test_data['title'] == 'mrs mr') | (test_data['title'] == 'mrs mr miss'), 'title'] = 'mrs'","049428ac":"title_dict = dict(mrs = 0, miss = 1, master = 2, mr = 3)\n\ntrain_data['title'] = train_data['title'].replace(title_dict)","730de90c":"test_data['title'] = test_data['title'].replace(title_dict)","1a316964":"train_data['embarked'] = train_data['embarked'].fillna('s')\ntest_data['fare'] = test_data.groupby(['pclass'])['fare'].transform(lambda x: x.fillna(x.median()))","01e3b7f6":"avg_age_train = train_data.groupby(['sex', 'pclass'])['age'].median()\navg_age_test = test_data.groupby(['sex', 'pclass'])['age'].median()\navg_age_train","937b5f4e":"train_data['age'] = train_data.groupby(['sex', 'pclass'])['age'].transform(lambda x: x.fillna(x.median()))\ntest_data['age'] = test_data.groupby(['sex', 'pclass'])['age'].transform(lambda x: x.fillna(x.median()))\n\n#\u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043c\u043b\u0430\u0434\u0435\u043d\u0446\u0435\u0432\ntrain_data.loc[train_data['age'] < 1, 'age'] = 1\ntest_data.loc[test_data['age'] < 1, 'age'] = 1","820d965f":"print(miss_inf(train_data, 'train_data'))\nprint(miss_inf(test_data, 'train_data'))","31dcbd0a":"train_data","aacd7c8f":"train_data.head()","709d6eae":"train_data_drop = train_data.drop(['passengerid', 'name', 'age', 'sibsp', 'parch', 'ticket', 'cabin', 'f_age', 'f_fare'], axis=1)","62c24c20":"test_data_drop = test_data.drop(['passengerid', 'name', 'age', 'sibsp', 'parch', 'ticket', 'cabin', 'f_age', 'f_fare'], axis=1)","4c19d084":"train_data_drop.head()","3d6b2f8a":"# #\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n# pf = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\n# res = pf.fit_transform(train_data_drop[['pclass', 'title']]).astype('int')\n# poly_features = pd.DataFrame(res, columns=['pclass^2', 'title^2', 'pc_t'])\n# train_data_drop = train_data_drop.reset_index(drop=True)\n# train_data_drop = train_data_drop.join(poly_features)\n# train_data_drop['pclass^2'] = train_data_drop['pclass^2']**2\n# train_data_drop['title^2'] = train_data_drop['title^2']**2","68eae1b6":"# # \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\n# pf = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)\n# res = pf.fit_transform(test_data_drop[['pclass', 'title']]).astype('int')\n# poly_features = pd.DataFrame(res, columns=['pclass^2', 'title^2', 'pc_t'])\n# test_data_drop = test_data_drop.reset_index(drop=True)\n# test_data_drop = test_data_drop.join(poly_features)\n# test_data_drop['pclass^2'] = test_data_drop['pclass^2']**2\n# test_data_drop['title^2'] = test_data_drop['title^2']**2","b2e97230":"train_data_drop.head()","8e753812":"train_data_ohe = pd.get_dummies(train_data_drop, drop_first=True)\ntest_data_ohe = pd.get_dummies(test_data_drop, drop_first=True)\ntrain_data_ohe.head()","d016c429":"X = train_data_ohe.drop('survived', axis=1)\ny = train_data_ohe['survived']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=12345)\n\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:', X_train.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:', X_valid.shape)","1111bb14":"X_train.head()","998aa223":"numeric = ['fare']\n\nscaler = StandardScaler()\nscaler.fit(X_train[numeric])\n\nX_train[numeric] = scaler.transform(X_train[numeric])\nX_valid[numeric] = scaler.transform(X_valid[numeric])\ntest_data_ohe[numeric] = scaler.transform(test_data_ohe[numeric])\n\nX_train['fare'].describe().round(4)","9acd75d4":"train_data_ohe['survived'].value_counts(normalize=True)","557df9c7":"# def upsample(features, target, repeat):\n#     features_zeros = features[target == 0]\n#     features_ones = features[target == 1]\n#     target_zeros = target[target == 0]\n#     target_ones = target[target == 1]\n\n#     features_upsampled = pd.concat([features_zeros] + [features_ones] * repeat)\n#     target_upsampled = pd.concat([target_zeros] + [target_ones] * repeat)\n    \n#     features_upsampled, target_upsampled = shuffle(\n#         features_upsampled, target_upsampled, random_state=12345)\n    \n#     return features_upsampled, target_upsampled\n\n# X_upsampled, y_upsampled = upsample(X_train, y_train, 2)","35e040f7":"# print('\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0442\u0430\u0431\u043b\u0438\u0446\u044b features_upsampled:', X_upsampled.shape)\n# print('\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0442\u0430\u0431\u043b\u0438\u0446\u044b target_upsampled:',y_upsampled.shape)\n# print()\n# print(y_upsampled.value_counts(normalize=True))","c26c3154":"RND_ST = 42","8369a044":"def gridsearch(model, grid, features, target):\n\n    CV = GridSearchCV(estimator = model, param_grid = grid, cv = 3, n_jobs=-1)\n    CV.fit(features, target)\n    \n    print('accuracy_score = {:.2f}'.format(CV.best_score_))\n    print(CV.best_params_)","b4c4cb5c":"def rand_search(model, grid, features, target):\n    \n    search = RandomizedSearchCV(model, grid, cv=7, n_jobs=-1)\n    search.fit(features, target)\n    \n    print('accuracy_score = {:.2f}'.format(search.best_score_))\n    print(search.best_params_)","0957efd9":"def valid(model, fv, tv, name):\n    \n    predictions_valid = model.predict(fv)\n   \n    print(name + ' accuracy_score = {:.2f}'.format(accuracy_score(tv, predictions_valid)))","f8b078e4":"def final_pred(model, features, target, test):\n   \n    model.fit(features, target)\n    \n    pred_final = pd.DataFrame(model.predict(test), columns=['survived'])\n \n    return pred_final","56ddde5e":"# def bayes_search(model, grid, features, target):\n    \n#     opt = BayesSearchCV(model, grid, n_iter=32)\n#     opt.fit(features, target)\n    \n#     print('accuracy_score = {:.2f}'.format(opt.best_score_))\n#     print(opt.best_params_)","9f759bdb":"#\u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0433\u0435\u0440\u0435\u0441\u0441\u0438\u044f\nLogisticRegression(random_state=RND_ST, n_jobs=-1)\n\n#\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nrfc = RandomForestClassifier(random_state=RND_ST, n_jobs=-1)\nrfc_params = dict(n_estimators=range(100, 600, 50), \n                  max_depth=range(3, 10, 2), \n                  max_features=range(3, 10, 2),\n                  min_samples_split=[2,3,4]\n                 )\n\n\n#\u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\ngbc = GradientBoostingClassifier(random_state=RND_ST)\ngbc_params = dict(n_estimators=range(10, 300, 25),\n                  max_depth=[3,4,7,10], \n                  learning_rate=[0.1,0.5,1],\n                  max_leaf_nodes=range(1,6)\n                 )\n#CATBoost\ncbc = CatBoostClassifier(random_state=RND_ST)\ncbc_params = dict(n_estimators = range(50, 200, 25),\n                  max_depth = [5, 7, 10],\n                  learning_rate=[0.1,0.5,1],\n                  verbose = [0]\n                 )\n#LGBM\nlgb = LGBMClassifier(random_state=RND_ST)\nlgb_params = dict(n_estimators = range(50, 200, 25),\n                   max_depth = [5, 7, 10],\n                  learning_rate=[0.1,0.5,1],\n                   verbose = [0] \n                  )\n# GaussianNB\ngNB = GaussianNB()\n\n# KNeighborsClassifier\nknc = KNeighborsClassifier()\nknc_params = dict(metric = ['manhattan', 'minkowski'],\n                  n_neighbors = range(5,15),\n                  leaf_size=range(30,50,2))\n# SupportVector\nsvc = SVC(random_state=RND_ST)\nsvc_params = dict(\n                  gamma = np.logspace(-6, -1, 5),\n                  C = [0.1,1,10,100,1000],\n                  tol=[1e-3, 1e-4, 1e-5])\n\n# LinearSVC\nlsv = LinearSVC(random_state=RND_ST)\nlsv_params = dict(\n                  C = [0.1, 1, 10, 100], \n                  penalty = ['l1', 'l2'],\n                  max_iter = [1000,1500,2000])","752fc893":"lgr = LogisticRegression(random_state=RND_ST, n_jobs=-1)\ncross_val_score(lgr, X_train, y_train, cv=7).mean()","7cbc7da8":"gNB = GaussianNB()\ncross_val_score(gNB, X_train, y_train, cv=7).mean()","6df70903":"gridsearch(rfc, rfc_params, X_train, y_train)","0c911349":"gridsearch(gbc, gbc_params, X_train, y_train)","7cfe5a68":"gridsearch(cbc, cbc_params, X_train, y_train)","c34077ba":"gridsearch(lgb, lgb_params, X_train, y_train)","ff3aaca8":"gridsearch(knc, knc_params, X_train, y_train)","20c37b52":"gridsearch(svc, svc_params, X_train, y_train)\n","05e53d80":"gridsearch(lsv, lsv_params, X_train, y_train)","078e656b":"rfc_new = RandomForestClassifier(random_state=RND_ST, n_estimators = 200, max_features = 7, max_depth = 5, min_samples_split = 2)\ncross_val_score(rfc_new, X_train, y_train, cv=7).mean()","24a61440":"gbc_new = GradientBoostingClassifier(random_state=RND_ST, n_estimators = 285, max_depth = 3, learning_rate = 0.1, max_leaf_nodes = 4)\ncross_val_score(gbc_new, X_train, y_train, cv=7).mean()","d0713524":"cbc_new = CatBoostClassifier(random_state=RND_ST, n_estimators = 50, max_depth = 10, verbose = 0, learning_rate = 0.1 )\ncross_val_score(cbc_new, X_train, y_train, cv=7).mean()","3e761cab":"lgbm_new = LGBMClassifier(random_state=RND_ST, n_estimators = 75, max_depth = 7, verbose = 0, learning_rate = 0.1)\ncross_val_score(lgbm_new, X_train, y_train, cv=7).mean()","38391559":"knc_new = KNeighborsClassifier(leaf_size = 30, n_neighbors = 12, metric = 'manhattan')\ncross_val_score(knc_new, X_train, y_train, cv=7).mean()","f956402a":"svc_new = SVC(random_state=RND_ST, C = 100, gamma = 0.005623413251903491, tol = 0.001)\ncross_val_score(svc_new, X_train, y_train, scoring = 'accuracy', cv=7).mean()","e3ad6049":"lsv_new = LinearSVC(random_state=RND_ST, C = 10, max_iter = 1500, penalty = 'l2')\ncross_val_score(lsv_new, X_train, y_train, scoring = 'accuracy', cv=7).mean()","a843a340":"vc = VotingClassifier([('clf1', gbc_new), ('clf2', rfc_new)], voting='soft')\ncross_val_score(vc, X_train, y_train, cv=7).mean()","67a89ef1":"vc = VotingClassifier([('clf1', gbc_new), ('clf2', rfc_new)], voting='soft')\nvc.fit(X_train, y_train)\nvalid(vc, X_valid, y_valid, '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:')","d45ebad8":"vc_params = {'voting':['hard', 'soft'],\n            'weights':[(1,1),(1,2),(2,1)]}","4b06cca7":"gridsearch(vc, vc_params, X, y)","2286df50":"vc_new = VotingClassifier([('clf1', gbc_new), ('clf2', rfc_new)], voting='hard', weights = (2, 1))\nvc_new.fit(X_train, y_train)\nvalid(vc_new, X_valid, y_valid, '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:')","0b78372a":"## \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","9cbd2a51":"# gridsearch(gbc, gbc_params, X_upsampled, y_upsampled)","2525394b":"# get a stacking ensemble of models\ndef get_stacking():\n    # define the base models\n    level0 = list()\n    level0.append(('lgr', LogisticRegression()))\n    level0.append(('knc_new', KNeighborsClassifier(leaf_size = 30, n_neighbors = 9)))\n    level0.append(('rfc_new', RandomForestClassifier(random_state=RND_ST, n_estimators = 125, max_features = 5, max_depth = 5)))\n    level0.append(('gbc_new', GradientBoostingClassifier(random_state=RND_ST, n_estimators = 60, max_depth = 3, learning_rate = 0.1)))\n    level0.append(('svc_new', SVC(random_state=RND_ST, C = 10, gamma = 0.005623413251903491, tol = 0.001)))\n\n    # define meta learner model\n    level1 = CatBoostClassifier(random_state=RND_ST, n_estimators = 50, max_depth = 10, verbose = 0, learning_rate = 0.1)\n    # define the stacking ensemble\n    scl = StackingClassifier(estimators=level0, final_estimator=level1, cv=5)\n    return scl","66d1b7f8":"# get a list of models to evaluate\ndef get_models():\n    models = dict()\n    models['lgr'] = LogisticRegression()\n    models['knc_new'] = KNeighborsClassifier(leaf_size = 20, n_neighbors = 7)\n    models['rfc_new'] = RandomForestClassifier(random_state=RND_ST, n_estimators = 125, max_features = 5, max_depth = 5)\n    models['gbc_new'] = GradientBoostingClassifier(random_state=RND_ST, n_estimators = 60, max_depth = 3, learning_rate = 0.1)\n    models['svc_new'] = SVC(random_state=RND_ST, C = 10, gamma = 0.005623413251903491, tol = 0.001)\n    models['stacking'] = get_stacking()\n    return models","b5f1c66d":"# evaluate a give model using cross-validation\ndef evaluate_model(model, X, y):\n    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n    scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n    return scores","19277a1c":"# get the models to evaluate\nmodels = get_models()","cc1c5586":"# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    scores = evaluate_model(model, X_train, y_train)\n    results.append(scores)\n    names.append(name)\n    print('>%s %.3f (%.3f)' % (name, np.mean(scores), np.std(scores)))","f1b67821":"# importances = svc_new1.feature_importances_\n# print(\"Feature importances:\")\n# for i in range(len(X_train.columns)):\n#     print(\"{:2d}. feature '{:5s}' ({:.4f})\".format(i+1, X_train.columns[i], importances[i]))","6f77f238":"gbc_new1 = GradientBoostingClassifier(random_state=RND_ST, n_estimators = 285, max_depth = 3, learning_rate = 0.1, max_leaf_nodes = 4)\ngbc_new1.fit(X_train, y_train)\nvalid(gbc_new1, X_valid, y_valid, '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:')","93c85a38":"pred_final = final_pred(gbc_new1, X_train, y_train, test_data_ohe)\nsubmission = pd.DataFrame(test_data['passengerid'])\nsubmission = submission.join(pred_final)\nsubmission.to_csv('\/kaggle\/working\/titanic_gradboost9.csv', index=False)\nsubmission.head()","f3cebcb5":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442","a2d2ebb0":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043f\u043e\u043b\u0443 \u0438 \u043a\u043b\u0430\u0441\u0441\u0443 \u043a\u0430\u044e\u0442\u044b.  \n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043c \u0438 \u043f\u043e\u0441\u043e\u043c\u0442\u0440\u0438\u043c \u043d\u0430 \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","86f58a29":"### \u0412\u043e\u0437\u0440\u0430\u0441\u0442","3f6a4f15":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0434\u0438\u043d\u043e\u043a\u0438\u0439 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 \u0438\u043b\u0438 \u043d\u0435\u0442 is_family \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a family \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0442\u0441\u0432\u043e\u043c \u043f\u043e\u043f\u0443\u0442\u0447\u0438\u043a\u043e\u0432","9e393930":"\u041f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439.","016072b8":"\u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438 \u0442\u0430\u043a\u0436\u0435 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","61c03724":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","59fa1372":"\u0423\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 name, ticket, cabin. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c embarked. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c.  \nPassengerID \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u0438\u043d\u0434\u0435\u043a\u0441.","d53e598c":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u0431\u0446\u0435 cabin \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - none, \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 age - \u043f\u043e\u0434\u0443\u043c\u0430\u0435\u043c, \u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 fare \u0438 embarked \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439.","507ece99":"# \u0421\u0442\u044d\u043a\u043a\u0438\u043d\u0433","e540947f":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 embarked \u0438 fare \u043c\u043e\u0434\u043e\u0439 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e","4ccb9402":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u043e 4\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430","74a3324f":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439","99965a55":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043e\u043a","e5cffd1d":"### \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0435\u043c\u044c\u0438","c6b55564":"\u0412\u044b\u0436\u0438\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0436\u0435\u043d\u0449\u0438\u043d (\u0431\u043e\u043b\u0435\u0435 80%) \u0438 \u043c\u0435\u043d\u0435\u0435 20% \u043c\u0443\u0436\u0447\u0438\u043d.","a441042f":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.","8b279f32":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e ","8a807b9d":"\u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u0438 \u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u0430\u043c\u0435\u0442\u0440\u044b","c4f787d6":"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0431\u044b\u043b\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u0432 \u043e\u043d\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0443 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - is_cabin","20632b5f":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","094833c1":"## \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445","1d75b9ea":"### \u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 survived.  ","2b1540e9":"## VotingClassifier","146685bb":"\u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 random_state","5c52b019":"\u0412\u0434\u0435\u043b\u0438\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0442\u0438\u0442\u0443\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 'mrs.','mr.','miss','master', \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438\u043c\u044f","a6db2343":"### \u041a\u043b\u0430\u0441\u0441 \u0431\u0438\u043b\u0435\u0442\u0430","d05f1f87":"### \u041f\u043e\u043b","903b41b0":"## \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0435\u0437 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.","2fd31896":"\u0423 \u043c\u0443\u0436\u0447\u0438\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0435\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e \u043a\u043e\u043b\u0447\u0438\u0441\u0435\u0442\u0432\u0443 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445, \u0443 \u0436\u0435\u043d\u0449\u0438\u043d \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043a\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0430 \u0432\u044b\u0436\u0438\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e - \u0431\u043e\u043b\u0435\u0435 90%.","d86cfd6a":"\u0412\u0438\u0434\u0438\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 cabin, age. \u0418 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432 embarked.","eb3064ef":"\u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 gridsearch \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0442\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f RandomizedSearchCV","8e62d060":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","b597db5a":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043d\u0438\u0436\u043d\u0435\u043c\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.  ","3d409c13":"## Upsampling \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u0435\u043d","34b4541a":"\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0432 \u043d\u0438\u0445, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","d11a6c77":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","570c8c57":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0443 \u043c\u0443\u0436\u0447\u0438\u043d \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u0441\u0440\u0435\u0434\u0438 \u0434\u0435\u0442\u0435\u0439, \u0443 \u0436\u0435\u043d\u0449\u0438\u043d \u0441\u0440\u0435\u0434\u0438 \u043f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u043e\u0432.","68dd23f9":"### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435\n\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","b28b752a":"\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e final_pred.","1115c944":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","dce273c7":"### \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043b\u0435\u0442\u0430","435d7921":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0445.","6fb1fec7":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u0442\u0443\u043b \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","0153dffe":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f GridSearchCV","3c028945":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443","63961827":"## \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435"}}