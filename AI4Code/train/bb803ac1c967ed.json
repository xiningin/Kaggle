{"cell_type":{"43bc72b9":"code","ff51c5a9":"code","008ff428":"code","d3cf4bf9":"code","c566c6cf":"code","ddff444c":"code","e99c8897":"code","eabd77b1":"code","baa2858d":"code","793ae670":"code","b1ad26c1":"code","2fb9b144":"code","70b40457":"code","bb067bb3":"code","601e2985":"code","03f38a4a":"markdown","541655fb":"markdown","99c6e997":"markdown","6d735177":"markdown","e4ab3036":"markdown","cfa4731d":"markdown","7f965a82":"markdown","06a95375":"markdown","d6817bca":"markdown","f349dda7":"markdown","c23866b1":"markdown","81d187a0":"markdown","1528b83f":"markdown","53ca5070":"markdown"},"source":{"43bc72b9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport squarify\nimport plotly.graph_objs as go\nimport plotly\n%matplotlib inline\nimport warnings  # to ignore warnings\n\nwarnings.filterwarnings('ignore')\nimport os\n","ff51c5a9":"# Reading the import and export data in\n\nimp_path = r'..\/input\/import-and-export-data-of-pakistan\/Stripped imports.csv'\nexp_path = r'..\/input\/import-and-export-data-of-pakistan\/Stripped exports.csv'\n\nimp_df = pd.read_csv(imp_path)\nexp_df = pd.read_csv(exp_path)\n","008ff428":"# Import and Export with No. of countries and different commodities\n\nprint('Pakistan is importing from',len(imp_df['Country'].unique()),'different countries.')\nprint('Pakistan is exportting to',len(exp_df['Country'].unique()),'different countries.')\n\nprint('Pakistan is importing',len(imp_df['Commodity'].unique()),'different items.')\nprint('Pakistan is exporting',len(exp_df['Commodity'].unique()),'different items.')","d3cf4bf9":"# Looking for most popular commodities and countries in exports\n\ndf = pd.DataFrame(exp_df['Country'].value_counts())\ndf2 = pd.DataFrame(exp_df['Commodity'].value_counts())\nprint(df.head(5))\ndf2.head(5)","c566c6cf":"# Yearwise imports and exports plus Total Trade Deficit\n\ndf = imp_df.groupby(['Year']).agg(Value = ('Value','sum'))\ndf2 = exp_df.groupby(['Year']).agg(Value= ('Value','sum'))\n\npd.set_option('float_format','{:.0f}'.format)#To change from scientific notation to see the entire number--.f->decimals\n\ndf['Deficit'] = df2.Value - df.Value\nprint(df['Value'])\nprint(df2)\nprint(df['Deficit'])","ddff444c":"#Plotting Yearwise imports & exports, Deficit in addition\n\nt1 = go.Bar( x = df.index, \n                 y =df.Value, \n                 name = 'Import',\n                 marker = dict(color='rgba(0,10,170,1)', \n                 line = dict(color='rgb(0,0,0)', width = 1.5)),\n                 text = df.Value\n               )\n\nt2 = go.Bar(x = df2.index,\n                y = df2.Value,\n                name = 'Export',\n                marker = dict(color = 'rgba(1,200,10,1)',\n                line = dict(color = 'rgb(0,0,0)',\n                width = 1.5)),\n                text = df2.Value)\n\nt3 = go.Bar(x = df.index,\n                y = df.Deficit,\n                name = 'Trade Deficit',\n                marker = dict(color = 'rgba(220,10,10,1)',\n                line = dict(color = 'rgb(0,0,0)',\n                width = 1.5)),\n                text = df.Deficit)\n\ndata = [t1, t2, t3]\nlayout = go.Layout(barmode = 'group')\nfig = go.Figure(data=data, layout = layout)\nfig.update_layout(title = go.layout.Title(text = 'Import, Export and Defecit (Yearwise) X 10',\n                                            xref = 'paper',\n                                            x = 0),\n                 xaxis = go.layout.XAxis(title = go.layout.xaxis.Title(\n                                                                        text = 'Year',\n                                                                        font = dict\n                                                                        (\n                                                                            family = 'Courier New, monospace',\n                                                                            size = 18,\n                                                                            color = '#7f7f7f'\n                                                                        )\n                                                                      )\n                                        ),\n                 yaxis = go.layout.YAxis(\n                                             title = go.layout.yaxis.Title\n                                             (\n                                             text = 'Value',\n                                             font = dict\n                                                     (\n                                                         family = 'Courier New, monospace',\n                                                         size = 18,\n                                                         color = '#7f7f7f'\n                                                     )\n                                             )\n                                        )\n                 )\nfig.show()","e99c8897":"# Countrywise imports and exports\n\ndf3 = imp_df.groupby(['Country']).agg(Value = ('Value','sum'))\ndf3 = df3.sort_values(by='Value', ascending = False)\ndf3 = df3[:10]\n\ndf4 = exp_df.groupby(['Country']).agg(Value = ('Value','sum'))\ndf4 = df4.sort_values(by = 'Value', ascending = False)\ndf4 = df4[:10]\n\nsns.set(rc={'figure.figsize':(15,6)})\naxis1 = plt.subplot(121)\n\nsns.barplot(df3.Value, df3.index).set_title('Countrywie Import')\n\naxis2 = plt.subplot(122)\nsns.barplot(df4.Value, df4.index).set_title('Countrywise Export')\n\nplt.tight_layout()\nplt.show()","eabd77b1":"# Comparisonn of Import and Export\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n                         x=df.index, y= df.Value, \n                         name = 'Import', mode = 'lines+markers',\n                          marker = dict(size=8),\n                         line = dict(color = 'crimson', width = 1)))\n\nfig.add_trace(go.Scatter(\n                        x=df2.index, y=df2.Value, \n                        name = 'Export', mode = 'lines+markers',\n                        line = dict(color='blue', width = 1)))\n\nfig.update_layout(title = go.layout.Title(\n                        text = 'Yearwise Import\/Export',\n                        xref = 'paper', \n                        x= 0),\n                  xaxis = go.layout.XAxis\n                    (\n                      title = go.layout.xaxis.Title\n                      (\n                          text = 'Year',\n                          font = dict\n                          (\n                                      family = 'Courier New, monospace',\n                                      size = 18,\n                                      color = '#7f7f7f'\n                          )\n                      )\n                  ),\n                  yaxis = go.layout.YAxis(\n                          title = go.layout.yaxis.Title(\n                              text = 'Value',\n                              font = dict(\n                                          family = 'Courier New, monospace',\n                                          size = 18,\n                                          color = '#7f7f7f'\n                              )\n                          )\n                      )\n                 )\nfig.show()","baa2858d":"# Commoditywise imports and export\n\ndf = imp_df.groupby(['Commodity']).agg(Value=('Value','sum'))\ndf = df.sort_values(by='Value', ascending = False)\ndf = df[:10]\n\ndf2 = exp_df.groupby(['Commodity']).agg(Value=('Value','sum'))\ndf2 = df2.sort_values(by='Value', ascending=False)\ndf2 = df2[:10]\n\nsns.set(rc={'figure.figsize':(10,6)})\nsns.barplot(df.Value, df.index).set_title('Commodity Wise Imports')\nplt.show()\n\nsns.barplot(df2.Value, df2.index).set_title('Commodity Wise Exports')\nplt.show()","793ae670":"# Lets look into some expensive good imports and exports\nexpensive_imports = imp_df[imp_df.Value>100000000]\n# expensive_imports.head(10)\n\nexpensive_exports = exp_df[exp_df.Value>10000000]\n# expensive_exports.head(10)","b1ad26c1":"\n\ndf = expensive_imports.groupby(['HSCode']).agg(Value=('Value','sum'))\n\nvalue = np.array(df)\ncommodityCode = expensive_imports.Commodity\nplt.style.use('ggplot')\nplt.rcParams['figure.figsize'] = (10.0,6.0)\nsquarify.plot(sizes = value, label=commodityCode, alpha=1.0)\nplt.axis('off')\nplt.title('Expensive IMports HSCode')\nplt.show()","2fb9b144":"# Contrywise exploration of expensive data\ndf1 = expensive_imports.groupby(['Country']).agg(Value = ('Value', 'sum'))\ndf1 = df1.sort_values(by = 'Value')\n\nvalue = np.array(df1)\ncountry = expensive_imports['Country']\nplt.style.use('ggplot')\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nsquarify.plot(sizes = value, label = country, alpha=0.9)\nplt.title('Country wise expensive Imports')\nplt.axis('off')\nplt.show()","70b40457":"# Choropleth representation of value with countries\neighteen = imp_df.loc[imp_df['Year'] == 2018]\ndata = eighteen.groupby('Country')['Value'].sum().reset_index()\n\n\ndata = [dict(type= 'choropleth',\n            locations = data['Country'],\n            locationmode = 'country names',\n            z = data['Value'],\n            colorscale = 'Portland',#[[0,'rgb(255,0,0)'],[1,'rgb(255,255,255)']],#'Jet',#'Portland','Rainbow', 'Jet','Blues','Reds'\n            reversescale = False,\n            marker = dict(\n                          line = dict(color = 'rgb(0,0,0)',\n                          width = 0.1)),\n            colorbar = dict(title = 'Cost in Rs'),\n            )]\n\nlayout = dict(title = 'Imports in 2018'.title(),\n             geo = dict(\n             showframe = False, \n             showcoastlines = True, \n             projection = dict(type='orthographic'))) # equirectangular, orthographic, natural earth\n#              projection = dict(type='equirectangular')))#orthographic\n\nfig = dict(data=data, layout = layout)\nplotly.offline.plot(fig, filename='Imports of Pakistan.html')\n# fig.show()","bb067bb3":"# Graph objects Tree map representation of exports in 2018\n\ndat2 = exp_df.loc[exp_df['Year'] == 2018]\ndata = dat2.groupby('Country')['Value'].sum().reset_index()\ndata['Parents'] = ''\nfig = go.Figure(go.Treemap(\n    labels = data['Country'],\n    parents = data['Parents'],\n    values = data['Value'],\n    marker_colorscale = 'Rainbow'  #[[0,'rgb(255, 255, 255)'],[1,'rgb(200, 0, 2)']]\n))\nfig.show()","601e2985":"plot = plt.pie(imp_df[imp_df['Year'] == 2018]['Value'].sort_values(ascending=False)[0:15], \n              labels=imp_df[imp_df['Year']==2018].sort_values(by='Value', ascending = False)\n              ['Commodity'][0:15], autopct='%1.1f%%')\nplt.title('Major Imports of Pakistan')\nplt.show()","03f38a4a":"# Thanks for sticking around","541655fb":"## Top countries of Pakistan's Imports and Exports","99c6e997":"![newplot.png](attachment:a5a37a93-adb5-4955-9683-186d71b7f541.png)","6d735177":"# Importing all required libraries and reading in data","e4ab3036":"## Treemap Representation of Exports","cfa4731d":"## Choropleth Representation\nThis will generate a .html file in the directory, so it won't be visible here.","7f965a82":"# Note: \n    The data I used in this notebook is the data from 2015-2019, but the available data on www.pbs.gov.pk is from 1991 to 2019. I did not use all the data because the the years prior to 2015 were in .pdf format and cleaning that data was not possible with free available resources. So, I did not use them conviniently. If anyone has the data prior to 2015 in .CSV , .TXT or any other file format, contact me. I would love to work, modify and improve this notebook. \n    Thanks. \n    \n    Contact Info:\n    idrees3072@yahoo.com","06a95375":"### Some Random Statistics","d6817bca":"## Top Import and Export Commodities of Pakistan","f349dda7":"## Imports, Exports and Total Trade Deficit","c23866b1":"This data contains all the imports and exports of Pakistan. This is a visualized comparison of the trade over the years from 2015 to 2019. The data was collected from www.pbs.gov.pk -- the official website of Beauru of Statistics Pakistan.","81d187a0":"## On Pie Chart Representation","1528b83f":"## Rise and Fall of Imports and Exports over the years","53ca5070":"## Values\/Expensive Import and Export Commodities"}}