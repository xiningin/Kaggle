{"cell_type":{"40ec0a2f":"code","0ab1874e":"code","b5dd8195":"code","74c549ce":"code","b4825337":"code","ab767bec":"code","a35b41e4":"code","22cebbd5":"code","af759a3e":"code","29f15225":"code","07f8e4db":"code","0ceb5f7e":"code","a76f3c8f":"code","67ab9b17":"code","34bbefad":"code","ab4c562f":"code","6325d0d4":"code","219c26bd":"code","c70a658d":"code","c231ad50":"markdown","7900fd5a":"markdown","977c4d84":"markdown","d84e5b6b":"markdown","e5a5d807":"markdown","a9e53fb7":"markdown","4495d615":"markdown","5ae57e6b":"markdown","10fa4e9e":"markdown","a347646e":"markdown","f71c319a":"markdown","72c38593":"markdown","9db262af":"markdown"},"source":{"40ec0a2f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","0ab1874e":"from skimage.io import imread, imsave\nfrom glob import glob\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm # a nice progress bar\nimport pandas as pd","b5dd8195":"stack_image = imread('..\/input\/rec_8bit_ph03_cropC_kmeans_scale510.tif')\nstack_image= stack_image[:,:,:]\nprint(stack_image.shape, stack_image.dtype)","74c549ce":"%matplotlib inline\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize = (12, 4))\nfor i, (cax, clabel) in enumerate(zip([ax1, ax2, ax3], ['xy', 'zy', 'zx'])):\n    cax.imshow(np.sum(stack_image,i).squeeze(), interpolation='none', cmap = 'bone_r')\n    cax.set_title('%s Projection' % clabel)\n    cax.set_xlabel(clabel[0])\n    cax.set_ylabel(clabel[1])","b4825337":"plt.imshow(stack_image[100],cmap='bone') # showing slice No.100","ab767bec":"from skimage.morphology import binary_opening, convex_hull_image as chull\nbubble_image = np.stack([chull(csl>0) & (csl==0) for csl in stack_image])\nplt.imshow(bubble_image[5]>0, cmap = 'bone')","a35b41e4":"bubble_inver=np.invert(bubble_image)","22cebbd5":"plt.imshow(bubble_inver[100], cmap='bone')\nwater = 0\nair = 0\nfor layer in bubble_inver:\n    for i in layer:\n        for j in i:\n            if j == 0:\n                water += 1\n            else:\n                air += 1\nprint(\"The liquid fraction is\", water\/air)\n            ","af759a3e":"from scipy import ndimage as ndi\nfrom scipy.ndimage.morphology import distance_transform_edt as distmap\nbubble_dist = distmap(bubble_inver)","29f15225":"plt.imshow(bubble_dist[100,:,:], interpolation = 'none', cmap ='jet')","07f8e4db":"from skimage.feature import peak_local_max\nbubble_candidates = peak_local_max(bubble_dist, min_distance=12)\nprint('Found',len(bubble_candidates), 'bubbles')","0ceb5f7e":"df = pd.DataFrame(data=bubble_candidates, columns=['x','y','z'])\ndf.to_csv('bubble.candidates.csv')","a76f3c8f":"from skimage.morphology import watershed\nbubble_seeds = peak_local_max(bubble_dist, min_distance=12, indices=False)\nplt.imshow(np.sum(bubble_seeds,0).squeeze(), interpolation = 'none', cmap='bone_r')","67ab9b17":"markers = ndi.label(bubble_seeds)[0]\ncropped_markers = markers[:,:,:]\ncropped_bubble_dist=bubble_dist[:,:,:]\ncropped_bubble_inver=bubble_inver[:,:,:]\nlabeled_bubbles= watershed(-cropped_bubble_dist, cropped_markers, mask=cropped_bubble_inver)\nprint(len(labeled_bubbles))","34bbefad":"plt.imshow(labeled_bubbles[50,:,:], cmap=plt.cm.Spectral, interpolation='nearest')","ab4c562f":"from skimage.measure import regionprops\nprops=regionprops(labeled_bubbles)\nprops[20].filled_area\nprint(len(props))\nfilled = 0\nendindex = len(props)\nfor i in range(0,endindex):\n    filled += props[i].filled_area\nprint(filled)\n","6325d0d4":"bubble_volume=[prop.filled_area for prop in props]\nbubble_volume_mean=np.mean(bubble_volume)\ndfV = pd.DataFrame(data=bubble_volume, columns=['volume [pix^3]'])\ndfV.to_csv('bubbleVolumes.csv')\nVm = {'mean volume': [1,bubble_volume_mean]}\ndfVm=pd.DataFrame(data=Vm)","219c26bd":"from tifffile import imsave\nimsave('labeled_bubbles.tif', labeled_bubbles)","c70a658d":"bub_eccentricity = [prop.extent for prop in props]\ndfV = pd.DataFrame(data=bub_eccentricity, columns=['eccentricity'])\ndfV.to_csv('bubbleEccentricities.csv')\n\nbub_bbox = [prop.bbox for prop in props]\napprox_area = [4 * np.pi * np.power((np.power(t[3] * t[3] \/ 4,1.6075) + np.power(t[3] * t[5] \/ 4,1.6075) + np.power(t[4] * t[5] \/ 4,1.6075)) \/ 3,1\/1.6075) for t in bub_bbox]\ndfV = pd.DataFrame(data=approx_area, columns=['area [pix^2]'])\ndfV.to_csv('bubbleArea.csv')\n","c231ad50":"# Saving results\njust as we did for the bubble seeds we can save any other properties in csv files","7900fd5a":"# Load in the image\nThe image is a 3D tiff stack which is an output of tomographic reconstruction. The volume is already binarized (from gray scale image we decide which voxels will belong to the water and which to the air phase based on their gray values in the war reconstruction)\nThe sample here is a liquid foam - very similar to a shampoo or washing-up liquid foam and was produced by C. Raufaste, B. Dollet and S. Santucci during a synchrotron experiment. The scan was acquired at the TOMCAT beamline at the Paul Scherrer Institut in Switzerland. ","977c4d84":"# Feature properties\nWe find feature properties using the scikit-image library (for documentation and examples see: scikit-image.org)","d84e5b6b":"# Create a distance map\nNext we will give each black voxel (air) a value that corresponds to its distance to the closest white (water) voxel in the image.","e5a5d807":"# Import libraries\nwe use skimage (scikit-image) to calculate properties, matplotlib to do the figures,  pandas to save output","a9e53fb7":"# Invert image","4495d615":"# Show projections through the binary volume ","5ae57e6b":"# Watershed segmentation\nAfter finding the seeds we need to grow the bubbles. This is done by starting a 'flod' from the seeds and painting the voxels by a value that corresponds to the nearest seed number. This flod is done until neighbouring regions meet. Then we have all the bubbles in the system labeled. \nWe often have quite important uncertainties in this processa and should be replaced by something more robust in the future.","10fa4e9e":"These local maxima are the seeds of the future bubbles. We save them to a csv file which can be opened with any standard tool that can handle values in tables. In this table there is a list of the maxima found and their spatial coordinates. ","a347646e":"# Saving processed 3D images\nFor reference we can also save the labeled 3D volume. This can be opened in ImageJ for example ","f71c319a":"# Bubble shape and Area\nThe shape of the bubbles is characterized by using the extent function giving the ratio of the volume of the bubble to that of the smallest bounding box. In the case of a sphere, the value would become pi\/6 = 0.523.\nThe bubble area is approximated by extracting the dimensions of the bounding box using bbox and then proceding to use an appriximate formula for the area of an ellipsoid calculated from the three half axes.\n","72c38593":"# Calculate local maxima of the distance map\nThe local maxima are those black voxels which have the maximum distance from the nearest white voxles. You can imagine this as being the centers of the air bubbles in the image. ","9db262af":"# Create Bubble Image\nThe bubble image is the reverse of the plateau border image (where there is water there can't be air) with a convex hull used to find the mask of the image\n$$ \\text{Bubbles} = \\text{ConvexHull}(\\text{PlateauBorder}) - \\text{PlateauBorder} $$\nThis step is needed to select the cylinder which contains the foam and avoid the voxels that are outside the sample."}}