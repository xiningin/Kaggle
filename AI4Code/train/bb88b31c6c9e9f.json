{"cell_type":{"22e0aec2":"code","04731fd1":"code","a73084bb":"code","6ce848b4":"code","ae6bf54d":"code","870ac248":"code","ce6737ce":"code","628de095":"code","4e269272":"code","01ff703a":"code","19a903e4":"code","e949e6a7":"code","7ed04ac7":"code","b1c73806":"code","fcdc4cf3":"code","a17a5aca":"code","68519415":"code","b1cf9367":"code","e4163c39":"code","f459a052":"code","8ff8de8e":"code","8890a036":"code","9c5081f2":"code","9dfa92da":"code","d7c809ce":"code","acf9709e":"code","ed9aec7c":"code","f16619c0":"code","10c78b19":"code","dea75716":"code","12fe2a9d":"code","933f4c73":"code","2f639bca":"code","94b0544e":"code","8e32e575":"code","2b6e59ae":"code","e6244416":"code","4599a97d":"code","0e2bf6b5":"code","1ed7a5d4":"code","0f96cdab":"code","0fa50ebb":"code","5ec1dfeb":"code","d6411d9e":"code","b0328349":"code","de3ce761":"code","9ac0be24":"code","bd0b9fba":"code","2fd1a5d5":"code","fb9f6409":"code","040ee40e":"code","26297b72":"code","42656dc0":"code","56248d7f":"code","b76dd5f0":"code","13809ede":"code","aed937c7":"code","e3c672c7":"code","6cb1230a":"code","25882eea":"code","395fe780":"code","08c8f22e":"code","009c6f38":"markdown","8fefb8d4":"markdown","b6f21098":"markdown","a8964607":"markdown","b41c3baf":"markdown","4cef78b0":"markdown","2607c6a2":"markdown","84f323af":"markdown","48804540":"markdown","041bb59a":"markdown","d855979d":"markdown","fef83655":"markdown","c9d049d1":"markdown","266f9b66":"markdown","57e9aa66":"markdown","4954070b":"markdown","abbc7498":"markdown","73587132":"markdown","4e8f5f0a":"markdown","d5a5b2f0":"markdown","7910c7dc":"markdown","1e2d2054":"markdown","297031a5":"markdown","64bca3ca":"markdown","399dfa06":"markdown","d6939394":"markdown","99acae97":"markdown","50aef66a":"markdown","b1a2a291":"markdown","63bd3783":"markdown","c8dd76f4":"markdown","ae323274":"markdown"},"source":{"22e0aec2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","04731fd1":"d=pd.read_csv('..\/input\/flights.csv')\nd.head()","a73084bb":"miss = []\nfor col in d.columns:\n    i=d[col].isnull().sum()\n    miss_v_p = i*100\/d.shape[0]\n    miss.append(miss_v_p)\n    print ('{} -----> {}%'.format(col, 100-i*100\/d.shape[0]))\n\ndico = {'columns': d.columns, 'filling rate': 100-np.array(miss), 'taux nan': miss}\n#print(miss, dico['taux de remplissage'])\ntr=pd.DataFrame(dico)\nr = range(tr.shape[0])\nbarWidth=0.85\nplt.figure(figsize=(20,8))\nplt.bar(r, tr['filling rate'], color='#a3acff', edgecolor='white', width=barWidth)\nplt.bar(r, tr['taux nan'], bottom=tr['filling rate'], color ='#b5ffb9', edgecolor= 'white', width=barWidth)\nplt.title('fill rate representation')\nplt.xticks(r, tr['columns'], rotation='vertical')\nplt.xlabel('columns')\nplt.ylabel('filling rate')\nplt.margins(0.01)","6ce848b4":"def conv_min(i):\n    \"\"\"to convert 'HH MM' to minutes\"\"\"\n    if np.isnan(i):\n        return(i)\n    i=int(i)\n    s=str(i)\n    sign=1\n    if s[0]=='-':\n        sign=-1\n        s=s[1:]\n    if len(s)<3:\n        return i\n    else:\n        return sign*(int(s[:-2])*60+int(s[-2:]))\n    \n    \nd['CRS_DEP_MIN']=d['DEPARTURE_TIME'].apply(conv_min)\nd['CRS_ARR_MIN']= d['ARRIVAL_TIME'].apply(conv_min)","ae6bf54d":"d.drop(columns=['WHEELS_OFF', 'WHEELS_ON', 'TAXI_IN', 'TAXI_OUT', 'DIVERTED', \n                'CANCELLED', 'CANCELLATION_REASON', 'AIR_SYSTEM_DELAY','SECURITY_DELAY', \n                'AIRLINE_DELAY', 'LATE_AIRCRAFT_DELAY','WEATHER_DELAY'], inplace=True)#'TAIL_NUMBER', \n\nd.head()","870ac248":"d_delay = d[d['ARRIVAL_DELAY']>0]\nprint(\"the percentage of planes late in 2015 is %.2f\"%(d_delay.shape[0]*100\/d.shape[0]))\nd_ok = d[d['ARRIVAL_DELAY']==0]\nprint(\"the percentage of planes right on time in 2015 is %.2f\"%(d_ok.shape[0]*100\/d.shape[0]))\nd_advance = d[d['ARRIVAL_DELAY']<0]\nprint(\"the percentage of planes in advance in 2015 is %.2f\"%(d_advance.shape[0]*100\/d.shape[0]))","ce6737ce":"plt.boxplot(d.loc[:, ['ARRIVAL_DELAY']].dropna().T, showfliers=False)\nplt.ylabel('minutes of delays')\nplt.title('Distribution of delays')","628de095":"jan = d[d['MONTH']==1]\nfeb = d[d['MONTH']==2]","4e269272":"lab = jan['AIRLINE'].unique()\n\nl=[]\nplt.figure(figsize=(20,8))\nplt.subplot(121)\nfor carrier in lab:\n    cl=(jan[jan['AIRLINE']==carrier]['ARRIVAL_DELAY'])\n    l.append(cl.dropna().sort_values())\nax1 = plt.boxplot(l, patch_artist=True, showfliers=False) \n#print(l[0], type(d['UNIQUE_CARRIER'].unique()))\nax1 = plt.xticks(range(1, jan['AIRLINE'].nunique()+1), lab)\nax1 = plt.title('Distribution of delays by company in JANUARY')\n\nl=[]\nplt.subplot(122)\nfor carrier in lab:\n    cl=(feb[feb['AIRLINE']==carrier]['ARRIVAL_DELAY'])\n    l.append(cl.dropna().sort_values())\nax2 = plt.boxplot(l, patch_artist=True, showfliers=False) \n#print(l[0], type(d['UNIQUE_CARRIER'].unique()))\nax2 = plt.xticks(range(1, feb['AIRLINE'].nunique()+1), lab)\nax2 = plt.title('Distribution of delays by company in FEBRUARY')","01ff703a":"\nplt.style.use('default')\nsns.pairplot(jan.loc[:,['ARRIVAL_DELAY', 'DISTANCE', 'SCHEDULED_TIME', 'AIRLINE']], hue='AIRLINE', plot_kws={'s':14})\nplt.title('JANUARY flights')","19a903e4":"t_time = d[d['ARRIVAL_TIME']<90]\nt_time[t_time['ARRIVAL_TIME']>60]\n#d['TAIL_NUMBER'].unique()","e949e6a7":"\nplt.figure(figsize=(17,5))\n\nplt.subplot(121)\ndgrp = jan.loc[:,['DAY', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY').count()\nax1 = plt.plot(dgrp.index, dgrp['FLIGHT_NUMBER'])\nax1 = plt.title('number of flights by day of JANUARY')\n\nplt.subplot(122)\ndgrp = feb.loc[:,['DAY', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY').count()\nax2 = plt.plot(dgrp.index, dgrp['FLIGHT_NUMBER'])\nax2 = plt.title('number of flights by day of FEBRUARY')","7ed04ac7":"\nplt.figure(figsize=(17,5))\n\nplt.subplot(121)\nmean_delay = jan.loc[:,['DAY', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY').mean()\nax1 = plt.bar(mean_delay.index, mean_delay['ARRIVAL_DELAY'])\nax1 = plt.title('Average delays according to the day of JANUARY 2015')\n\nplt.subplot(122)\nmean_delay = feb.loc[:,['DAY', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY').mean()\nax2 = plt.bar(mean_delay.index, mean_delay['ARRIVAL_DELAY'])\nax2 = plt.title('Average delays according to the day of FEBRUARY 2015')","b1c73806":"plt.figure(figsize=(17,5))\n\nplt.subplot(121)\nweek_delay = jan.loc[:,['DAY', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY_OF_WEEK').mean()\nax1 = plt.bar(week_delay.index, week_delay['ARRIVAL_DELAY'])\nax1 = plt.title('Average of the delays according to the day of the week in JANUARY')\n\nplt.subplot(122)\nweek_delay = feb.loc[:,['DAY', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('DAY_OF_WEEK').mean()\nax2 = plt.bar(week_delay.index, week_delay['ARRIVAL_DELAY'])\nax2 = plt.title('Average of the delays according to the day of the week in FEBRUARY')","fcdc4cf3":"plt.figure(figsize=(17,5))\n\nplt.subplot(121)\nh_delay = jan.loc[:,['CRS_DEP_MIN', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('CRS_DEP_MIN').mean()\n#display(h_delay.head())\nax1=plt.plot(h_delay.index, h_delay['ARRIVAL_DELAY'], '.')\nax1=plt.title(\"Average delays based on departure time in JANUARY\")\nax1=plt.xlabel('day converted to minutes (1day = 1440min)')\nax1=plt.ylabel('average delays')\n\nplt.subplot(122)\nh_delay = feb.loc[:,['CRS_DEP_MIN', 'DAY_OF_WEEK', 'FLIGHT_NUMBER', 'ARRIVAL_DELAY']].groupby('CRS_DEP_MIN').mean()\n#display(h_delay.head())\nax2=plt.plot(h_delay.index, h_delay['ARRIVAL_DELAY'], '.')\nax2=plt.title(\"Average delays based on departure time in FEBRUARY\")\nax2=plt.xlabel('day converted to minutes (1day = 1440min)')\nax2=plt.ylabel('average delays')","a17a5aca":"plt.figure(figsize=(17,5))\n\nplt.subplot(121)\nax1 = sns.regplot(jan.loc[:, 'CRS_DEP_MIN'], jan.loc[:,'ARRIVAL_DELAY'], scatter_kws={\"color\":\"darkred\",\"alpha\":0.05,\"s\":1} )\nax1 = plt.title(\"delays according to 'departure time' in JANUARY\")\n\nplt.subplot(122)\nax2 = sns.regplot(feb.loc[:, 'CRS_DEP_MIN'], feb.loc[:,'ARRIVAL_DELAY'], scatter_kws={\"color\":\"darkred\",\"alpha\":0.05,\"s\":1} )\nax2 = plt.title(\"delays according to 'departure time' in FEBRUARY\")","68519415":"jan.head()","b1cf9367":"airp = pd.read_csv('..\/input\/airports.csv')\nairp.head()","e4163c39":"airp_state = airp.loc[:, ['IATA_CODE', 'STATE', 'CITY']]\nori_airp = airp_state.rename(columns={'IATA_CODE':'ORIGIN_AIRPORT','STATE': 'ORIGIN_STATE_ABR', 'CITY':'ORIGIN_CITY_NAME'})#rename for Origine\ndest_airp = airp_state.rename(columns={'IATA_CODE':'DESTINATION_AIRPORT','STATE': 'DEST_STATE_ABR', 'CITY': 'DEST_CITY_NAME'})#rename for Destination\ndisplay(dest_airp.head(2))\ntemp = d.merge(ori_airp, on='ORIGIN_AIRPORT')\nd = temp.merge(dest_airp, on='DESTINATION_AIRPORT')\nd.head(3)","f459a052":"#d.info()#I check the new column 'ORIGIN_STATE_ABR' contains string.","8ff8de8e":"states = airp['STATE'].unique()\nstates","8890a036":"geo_states = {'East_N' : ['OH', 'NY', 'PA', 'IN', 'ME', 'MI', 'VI', 'MA', 'VA', 'NJ', 'PR', 'MD', 'NE', 'CT', 'RI', 'AL', 'VT', 'WV', 'NH', 'DE'],\n             'East_S': ['FL', 'GA', 'SC', 'NC'],\n             'Cent_N':['ND', 'MN', 'WI', 'SD', 'IA', 'IL', 'TN', 'KY'],\n             'Cent_S':['TX','OK', 'LA', 'AR', 'MS', 'KS', 'MO'],\n             'Mont_N' : ['ID', 'WY', 'MT'],\n             'Mont_S': ['AZ', 'NM', 'UT', 'CO'],\n             'Pac_N' : ['OR', 'WA'],\n             'Pac_S' : ['NV', 'CA'],\n             'Alask': ['AK'],\n             'Haw':['HI'],\n             'Territory':['GU','AS']}","9c5081f2":"\"\"\"Classification aid\"\"\"\nrest = list(states)\nfor key, item in geo_states.items():\n    print (key, item)\n    for k in item:\n        #print(k)\n        try:\n            rest.remove(k)\n        except:\n            print(k ,'not in liste')\nprint('rest: ',len(rest), rest) ","9dfa92da":"def compare_word(word):\n    \"\"\"Check if 'word' can be referenced to one of our clusters. Each category is a key of our dico 'states'\"\"\"\n    if word == ' 'or word == 'nan':\n        pass\n    for key, val in geo_states.items():\n        if word in val:\n            return key \n    pass\n\n\ndef simple_geo (data, trajet=['ORIGIN_STATE_ABR','DEST_STATE_ABR']):\n    \"\"\"defines a new columns in 'data' with geographical simplification. This allows a cluster according to the location and trajet.\"\"\"\n    i=0\n    name=['ORI_GEO', 'DEST_GEO']\n    for lab in trajet:\n        list_column=[]\n        data[name[i]]=data[lab].apply(compare_word)\n        print('Column {} has been initialized'.format(name[i]))\n        i+=1\n    \ndef simple_traj(d, trajet=['ORIGIN_STATE_ABR','DEST_STATE_ABR'], drop_loc=False):\n    simple_geo(d, trajet=trajet )\n    d['path']=d['ORI_GEO']+'-->'+d['DEST_GEO']\n    print(\"'path' initialized\")\n    if drop_loc:\n        d.drop(columns=['ORI_GEO', 'DEST_GEO'], inplace=True)\n        print(\"We remove 'ORI_GEO' and 'DEST_GEO'\")","d7c809ce":"simple_traj(d, drop_loc=True)","acf9709e":"\"\"\"Let's redefine our tables for January and February to get the update 'path'.\"\"\"\njan = d[d['MONTH']==1]\nfeb = d[d['MONTH']==2]","ed9aec7c":"plt.figure(figsize=(13,17))\nplt.subplots_adjust(wspace = 0.3)\n\nplt.subplot(121)\nd_traj_jan = jan.loc[:,['ARRIVAL_DELAY','path']].groupby(['path']).mean()\nax1 = plt.barh(d_traj_jan.index, d_traj_jan['ARRIVAL_DELAY'])\nax1 = plt.title('Average delays by path in JANUARY ')\nax1 = plt.grid(True)\n\nplt.subplot(122)\nd_traj_feb = feb.loc[:,['ARRIVAL_DELAY','path']].groupby(['path']).mean()\nax2 = plt.barh(d_traj_jan.index, d_traj_feb['ARRIVAL_DELAY'])\nax2 = plt.title('Average delays by path in FEBRUARY ')\nax2 = plt.grid(True)","f16619c0":"d['time_f']=d['SCHEDULED_TIME']+d['ARRIVAL_DELAY']","10c78b19":"d_GA_CA = d[(d['ORIGIN_CITY_NAME']=='Atlanta')&(d['DEST_CITY_NAME']=='Los Angeles')]\n#d_MA_TX = d[(d['ORIGIN_STATE_ABR']=='MA')&(d['DEST_STATE_ABR']=='TX')]\nd_NY_TX = d[(d['ORIGIN_CITY_NAME']=='New York')&(d['DEST_CITY_NAME']=='Dallas')]\n","dea75716":"def graph_crs_time(d, lab='DAY_OF_WEEK', bar=False):\n    group = d.groupby([lab, 'SCHEDULED_TIME']).count()\n    dico = {'nb':group.iloc[:,1], lab :group.index.get_level_values(0), 'time_f':group.index.get_level_values(1)}\n    r = pd.DataFrame(dico)\n    plt.style.use('default')\n    plt.xlim((r['time_f'].quantile(0.007),r['time_f'].quantile(0.993)))\n    if bar:\n        \"\"\"\n        sns.kdeplot(data=r['time_f'], data2=r['nb'], , hue=r[lab], \n                        palette=sns.color_palette(\"hls\", r[lab].nunique()))\n        \"\"\"\n        sns.barplot(x=r['time_f'], y=r['nb'], hue=r[lab], \n                        palette=sns.color_palette(\"hls\", r[lab].nunique()))\n                        \n    else:\n        sns.scatterplot(x=r['time_f'], y=r['nb'], hue=r[lab], \n                        legend='full', \n                        palette=sns.color_palette(\"hls\", r[lab].nunique()),\n                        alpha = 0.8\n                         )\n    plt.title('Number of flights for each scheduled duration from {} to {}'.format(d['ORIGIN_CITY_NAME'].iloc[0], d['DEST_CITY_NAME'].iloc[0] ))\n    plt.show()\n    \n    \ndef graph_time_f(d, lab='DAY_OF_WEEK', bar=False):\n    group = d.groupby([lab, 'time_f']).count()\n    dico = {'nb':group.iloc[:,1], lab :group.index.get_level_values(0), 'time_f':group.index.get_level_values(1)}\n    r = pd.DataFrame(dico)\n    plt.style.use('default')\n    plt.xlim((r['time_f'].quantile(0.007),r['time_f'].quantile(0.993)))\n    if bar:\n        sns.barplot(x=r['time_f'], y=r['nb'], hue=r[lab], \n                        palette=sns.color_palette(\"hls\", r[lab].nunique()))\n    else:\n    \n        sns.scatterplot(x=r['time_f'], y=r['nb'], hue=r[lab], \n                        legend='full', \n                        palette=sns.color_palette(\"hls\", r[lab].nunique()),\n                        alpha = 0.8\n                         )\n    plt.title('Number of flights for each duration observed from {} to {}'.format(d['ORIGIN_CITY_NAME'].iloc[0], d['DEST_CITY_NAME'].iloc[0] ))\n    plt.show()    ","12fe2a9d":"graph_time_f(d_NY_TX, lab='MONTH')\ngraph_crs_time(d_NY_TX, lab='MONTH')\n","933f4c73":"#graph_time_f(d_Bos_Nash, lab='MONTH', bar=True)\n#graph_crs_time(d_Bos_Nash, lab='MONTH')\ngraph_time_f(d_GA_CA, lab='MONTH')\ngraph_crs_time(d_GA_CA, lab='MONTH')","2f639bca":"graph_crs_time(d_NY_TX, lab='DAY_OF_WEEK')","94b0544e":"plt.figure(figsize=(17,5))\n\nd01=d_NY_TX[d_NY_TX['MONTH']==1]\nd02=d_NY_TX[d_NY_TX['MONTH']==2]\n\nmean_time = d01.loc[:,['DAY', 'DAY_OF_WEEK', 'SCHEDULED_TIME', 'ARRIVAL_DELAY', 'time_f']].groupby('DAY').mean()\nplt.subplot(121)\nplt.bar(mean_time.index, mean_time['time_f'])\nplt.ylim(min(mean_time['time_f']), max(mean_time['time_f']))\nplt.title('average flight duration (New York->Dallas) according the day of January 2015')\n\nplt.subplot(122)\n#mean_time = d01.loc[:,['DAY_OF_MONTH', 'ARR_DELAY', 'CRS_ELAPSED_TIME','time_f']].groupby('DAY_OF_MONTH').mean()\np1 = plt.bar(mean_time.index, mean_time['SCHEDULED_TIME'])\np2 = plt.bar(mean_time.index, mean_time['ARRIVAL_DELAY'], bottom=mean_time['SCHEDULED_TIME'], width=0.3)\nplt.ylim(min(mean_time['time_f']), max(mean_time['time_f']))\nplt.xlabel('january day')\nplt.ylabel('duration in minutes')\nplt.legend([p1[0], p2[0]], ['Average scheduled time', 'Average delay'])\nplt.title('average flight duration(New York->Dallas) according the day of January 2015')","8e32e575":"\nd01=d_GA_CA[d_GA_CA['MONTH']==1]\nd02=d_GA_CA[d_GA_CA['MONTH']==2]\n\n\nplt.figure(figsize=(17,4))\nplt.subplot(121)\nmean_time = d01.loc[:,['DAY', 'ARRIVAL_DELAY', 'SCHEDULED_TIME','time_f']].groupby('DAY').mean()\np1 = plt.bar(mean_time.index, mean_time['SCHEDULED_TIME'])\np2 = plt.bar(mean_time.index, mean_time['ARRIVAL_DELAY'], bottom=mean_time['SCHEDULED_TIME'], width=0.3)\nplt.ylim(min(mean_time['time_f']), max(mean_time['time_f']))\nplt.xlabel('January day')\nplt.ylabel('duration in minutes')\nplt.legend([p1[0], p2[0]], ['Average scheduled time', 'Average delay'])\nplt.title('average flight duration(Atl->LA) according the day of January 2015')\n\nplt.subplot(122)\nmean_time = d02.loc[:,['DAY', 'ARRIVAL_DELAY', 'SCHEDULED_TIME','time_f']].groupby('DAY').mean()\np1 = plt.bar(mean_time.index, mean_time['SCHEDULED_TIME'])\np2 = plt.bar(mean_time.index, mean_time['ARRIVAL_DELAY'], bottom=mean_time['SCHEDULED_TIME'], width=0.3)\nplt.ylim(min(mean_time['time_f']), max(mean_time['time_f']))\nplt.xlabel('February day')\nplt.ylabel('duration in minutes')\nplt.legend([p1[0], p2[0]], ['Average scheduled time', 'Average delay'])\nplt.title('average flight duration (Atl->LA) according the day of February 2015')","2b6e59ae":"from datetime import timedelta\nholidays = ['2015-01-01', '2015-01-19', '2015-02-16', '2015-05-25', \n            '2015-07-04', '2015-09-07', '2015-10-12', '2015-11-11', '2015-11-11', '2015-12-25', '2016-01-01']\nholid=[]\nfor date in holidays:\n    holid.append(pd.Timestamp(date))\nholid\n","e6244416":"def date_dep(i, data, y=2015):\n    #i=d.index\n    return pd.Timestamp(data.loc[i,'YEAR'], data.loc[i,'MONTH'], data.loc[i,'DAY'])\n\n#ind=pd.Series(d.index)\n#d['FL_DATE']=list(ind.apply(lambda x : date_dep(x,data=d)))#take too much time to compute","4599a97d":"\nd['FL_DATE']=d['YEAR'].map(str)+'-'+d['MONTH'].map(str)+'-'+d['DAY'].map(str)\nd['FL_DATE'] = d['FL_DATE'].apply(pd.Timestamp)\n","0e2bf6b5":"def holi_feature(data):\n    \"\"\"\n    Add a new feature to the dataframe 'data':\n    'abs_H': the number of days separating the current date from the closest holiday\n    \"\"\"\n    #data['DATE_DEP']=pd.Series(data.index).apply(lambda x : date_dep(x,data=data))\n    dep_day=pd.Series(data['FL_DATE'].unique())\n    day_y=dep_day.apply(pd.Timestamp)\n    #print(type(day_y), pd.Series(day_y))\n    \n    d_abs = day_y.apply(lambda x: (min([abs(x-h) for h in holid])).days)\n    dico_holi = {'FL_DATE' : dep_day, 'abs_H' : d_abs}\n    d_holidays=pd.DataFrame(dico_holi)\n    #display(d_holidays)                      \n    data = pd.merge(data, d_holidays, on='FL_DATE')\n    return data","1ed7a5d4":"d = holi_feature(d)","0f96cdab":"d.iloc[:5,-13:]","0fa50ebb":"#from sklearn.linear_model import ElasticNetCV, Ridge, ElasticNet\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn import preprocessing\nfrom scipy import sparse\nfrom sklearn.linear_model import SGDRegressor, Lasso\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn import metrics\nfrom datetime import timedelta","5ec1dfeb":"d.dropna(subset=['ARRIVAL_DELAY'], axis=0, inplace=True)","d6411d9e":"\nd=d.sample(1000000)\n","b0328349":"d['abs_H']=d['abs_H'].apply(str)","de3ce761":"week = {1:'Monday', 2:'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', 6:'Saturday', 7:'Sunday'}\nmonth = {1:'jan',2:'feb',3:'mars',4:'apr', 5:'may',6:'jun', 7:'jul',8:'aug',9:'sept',10:'oct',11:'nov', 12:'dec'}\n\nd['DAY_W']=d['DAY_OF_WEEK'].apply(lambda x: week[x])\nd['M']=d['MONTH'].apply(lambda x: month[x])","9ac0be24":"categ_feat = pd.get_dummies(d.loc[:,['ORIGIN_CITY_NAME', 'DEST_CITY_NAME', 'DAY_W', 'AIRLINE', 'M', 'abs_H', 'path']] , sparse=False,\n                            prefix=['ORIGIN', 'DEST', 'DAY', 'CARRIER', 'M', 'd_H', 'dir'])","bd0b9fba":"COL_CAT=categ_feat.columns\nd_categ = sparse.csr_matrix(categ_feat)\nCOL_CAT.shape","2fd1a5d5":"d_y = d.loc[:,['time_f', 'ARRIVAL_DELAY']]\nd_num = d.loc[:,['DISTANCE', 'CRS_DEP_MIN', 'CRS_ARR_MIN', 'SCHEDULED_TIME']]\nCOL_NUM=d_num.columns\nN_NUM = COL_NUM.shape[0]\nd_num_s = sparse.csr_matrix(d_num)\nd_work = sparse.hstack((d_num_s, d_categ))","fb9f6409":"xtr, xte, ytr, yte = train_test_split(d_work,\n                                     d_y,\n                                     test_size=0.2, random_state=0)","040ee40e":"X_train_num = xtr[:,:N_NUM].toarray()#here we can decide to include or not (NUM_COL or NUM_COL-1)\nscale = preprocessing.StandardScaler().fit(X_train_num)\nX_train_std = scale.transform(X_train_num)","26297b72":"X_train_categ = xtr[:,N_NUM:]\nprint(type(X_train_std), type(X_train_categ))\nX_train = sparse.hstack((sparse.csr_matrix(X_train_std), X_train_categ))","42656dc0":"X_test_num = xte[:,:N_NUM].toarray()\nX_test_std = scale.transform(X_test_num[:,:N_NUM])#here we can decide to include or not (NUM_COL or NUM_COL-1)\nX_test_categ = xte[:,N_NUM:]\nX_test = sparse.hstack((sparse.csr_matrix(X_test_std), X_test_categ))","56248d7f":"n_alpha = 5#200\nalpha = np.logspace(-5,-2,n_alpha)\nparam_grid = {'alpha' : alpha, \"l1_ratio\" : [0.8, 0.6, 0.7, 0.9]}\n\n#d.loc[:,['DISTANCE', 'CRS_DEP_MIN', 'CRS_ARR_MIN', 'SCHEDULED_TIME']]\n","b76dd5f0":"\"\"\"determine the hypers parametres\"\"\"\n#reg = GridSearchCV(SGDRegressor(), param_grid=param_grid, cv=5, scoring='neg_mean_absolute_error')\n#reg.fit(X_train, ytr['time_f'])\n#reg.best_params_\n\nreg = SGDRegressor(alpha=0.01, l1_ratio=0.7)\n#reg= Lasso(alpha=0.01)\nreg.fit(X_train, ytr['time_f'])","13809ede":"print(X_test.shape)\ny_pred=reg.predict(X_test)\n\nprint('Predictions on the duration of flights: \/n RMSE ={}, MSE={}, R2= {}, RSE={} \\n mean absolute error : {}'.format(np.sqrt(mean_squared_error(y_pred, yte['time_f'])), \n                                                mean_squared_error(y_pred, yte['time_f']),\n      r2_score(y_pred, yte['time_f']),\n      (1-r2_score(y_pred, yte['time_f'])), mean_absolute_error(y_pred, yte['time_f'])))","aed937c7":"tests = pd.DataFrame({'prediction': y_pred, 'time_noted' :list(yte['time_f'])})\nsns.jointplot(x='prediction',y='time_noted', data=tests, kind='reg', scatter_kws = {'alpha':0.2,'s':0.8 })","e3c672c7":"xte_crs_time = X_test_num[:,3]#xte.todense()[:,3]\n#xte_crs_time = xte[:,3]\ny_pred_delay = y_pred-xte_crs_time.flatten()","6cb1230a":"print('Pour les retards : \/n RMSE ={}, MSE={}, R2= {}, RSE={} \\n mean absolute error : {}'.format(\n    np.sqrt(mean_squared_error(y_pred_delay, list(yte['ARRIVAL_DELAY']))), \n                                                mean_squared_error(y_pred_delay, list(yte['ARRIVAL_DELAY'])),\n      r2_score(y_pred_delay, list(yte['ARRIVAL_DELAY'])),\n      (1-r2_score(y_pred_delay, list(yte['ARRIVAL_DELAY']))), mean_absolute_error(y_pred_delay, list(yte['ARRIVAL_DELAY']))))","25882eea":"print(reg.coef_.shape[0], X_test.shape)\nplt.plot(range(reg.coef_.shape[0]),reg.coef_)\nplt.title('value of the beta coefficients')","395fe780":"#print(list(COL_NUM)[:-1])\nCOL_COEF = list(COL_NUM)+list(COL_CAT)\nCOL_CAT[610:690]\nd_coef = pd.DataFrame(reg.coef_, index=COL_COEF, columns=['coef'])\nd_coef.sort_values(by='coef', ascending=False)","08c8f22e":"tests = pd.DataFrame({'Delay prediction': y_pred_delay, 'delay_noted' :list(yte['ARRIVAL_DELAY'])})\nsns.jointplot(x='Delay prediction',y='delay_noted', data=tests, kind='reg', scatter_kws = {'alpha':0.2,'s':0.8 })","009c6f38":"# 0 Preview of the dataset","8fefb8d4":"# Conclusion : \nWe compared the delays for two consecutive months. These results are influenced by the seasons (the winters).","b6f21098":"# 'ARRIVAL_DELAY' our target","a8964607":"# 1.2 Saisonality\n#### It is easy to see weekly seasonality with the number of flights...","b41c3baf":"Let's treat the number of days separating holidays as categorical:","4cef78b0":"# 1 Comparative exploration between January and February\n## 1.1 Airline company","2607c6a2":"**Rq**: Above, we can also note irregularities related to vacation days.<br><br>\n#### ... But when we talk about delays, the seasonality is much less obvious:","84f323af":"To be continued...","48804540":"In this notebook, I would like to share an analysis on aircraft delays. I also performed a regression to better understand the impact of each features. Feel free to tell me what you think in the comments.\n#  Preview of the data\n#  Comparative exploration between January and February\n## Airline company\n## Seasonality\n## Let's make the journeys\n\n\n\n# Studies of planned flights duration and prediction model\n## Relationship between planned travel time and seasonality\n## Predictions and interpretation (Coming soon)\nVariation: \"The most likely flight time.\"\n\n\n\n\n**Acknowledgement:** Many thank to Fabien Daniel for his advices and encouragements.","041bb59a":"### One Hot Encoder trips may take too much computing time\nWe will group states according to time zones.\nIn addition this will also allow us to automatically determine the time zones later.","d855979d":"To be continued...","fef83655":"Here we can see that the scheduled elapsed time has a weekly seasonal component. We also see the impact of holidays :","c9d049d1":"### 2.1.2 Weekly seasonality : ","266f9b66":"## After subtraction of the announced flight time we obtain the prediction of the delays:","57e9aa66":"# Let include holidays\n\n\n","4954070b":"**note :** We can choose whether to use 'SCHEDULED_TIME' in our regression or not. It depends on the interpretation we want give to that regression wich predict \"the most likely flight time.\"\n(Here I use it.)","abbc7498":"### 2.1.1 Monthly seasonality:","73587132":"Let take 2 differents path to compare:","4e8f5f0a":"# 1.3 Let's make the journeys\nThe problem is that we have many different airports. We will therefore schematize the flight paths in this part.","d5a5b2f0":"In winter, the scheduled flight time is longer than in the summer.","7910c7dc":"The average delay increases in the afternoon and reaches a high point in the early evening for departures and towards 23h for arrivals. Departure time and arrival time will be useful for our predictions\n#### Same representation but without averaging delays:","1e2d2054":"The distribution of delays by company seems similar between January and February. This 'AIRLINE' feature seems interesting for our predictions<br>\nThe qualitity of the company surely plays a role. However, as we can see below these compagny can be specialized for certain types of journey (long, short,\nsurely the geographical area...).","297031a5":"Above, we understand that the dispersion of averages at the beginning of the day is due to the fact that there are fewer flights at this time.","64bca3ca":"# 2 Studies of planned flights duration and prediction model\n\n## 2.1 Relationship between planned travel time and seasonality\n\n\n\nBefore performing predictions, **let's develop the link between delay and programmed flight time**. This is an **essential** point of the notebook :<br>\nLet define **'time_f'** the real time of the flight.\n","399dfa06":"# 2.2 Predictions and Interpretations\n\nWe have seen above that the seasonal influence on delays could be offset by the planned duration of flight time. <br>\nThe model below ** facilitates interpretation **. <br> <br>\n\n## Method:\n\nLet's try to predict the duration of the trip and then subtract the expected transport time to obtain the prediction of the delay. <br>\n\n## note :\nWe could perform the regression directly on ARRIVAL_DELAY. Here, **we are not looking for the best performing model**, but the one that offers **the most readability** for the comprehension.","d6939394":"In addition to the seasonally scheduled travel times, we notice an increase in travel time in mid-February. It appends at the begining of hollidays...","99acae97":"There seem to be similarities in the average delays between these two months.<br>\nThe 'path' could therefore have an impact on delays. <br>\nOf course, this impact could be only a consequence of features already seen (as the distance and the airline). (We 'll have the answer only at the end of the notebook)","50aef66a":"Eventually, we could note a daily seasonality by averaging the delays for each minute of the day:","b1a2a291":"# Let check our new features in the dataframe:","63bd3783":"Other categorical featrues : ","c8dd76f4":"To be continued...","ae323274":"Above, Travel time planning does not seem to be affected by the day of the week.<br>\n(In fact, we will see below that it is well influenced on average by the day of the week)"}}