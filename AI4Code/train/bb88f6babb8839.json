{"cell_type":{"260e4ba7":"code","20837a4f":"code","c4a1082d":"code","abfbaf3f":"code","58a12ac5":"code","9f046bf1":"code","7cde91ab":"code","00bcc683":"code","ceccbfc9":"code","2bcb84bd":"code","cc5f6320":"code","813893f3":"code","f981f777":"code","e9737ef6":"code","a1665576":"code","29ce0346":"code","7cf12974":"code","9b9e0521":"code","37c5ec2b":"code","555a94ac":"code","33acbea4":"code","ff900c7d":"code","01e04662":"code","ecb221af":"code","12bb93bf":"code","c47ff027":"code","9ac79af7":"code","215b99ec":"code","410612a7":"code","e3cbeba5":"code","99055e2d":"markdown","20c95f9c":"markdown","fde1835d":"markdown","e204c425":"markdown","29fdbe0d":"markdown","fe59f809":"markdown","b66c1270":"markdown","b205e8d5":"markdown","a0b86d54":"markdown","e7692d67":"markdown","b588b22a":"markdown","ba2d465c":"markdown","f997587e":"markdown","1495ef78":"markdown","8edcb138":"markdown","185f4b97":"markdown","6e95c0c4":"markdown","2d341d23":"markdown"},"source":{"260e4ba7":"!pip install lightgbm\n!pip install xgboost\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBRegressor","20837a4f":"pathToDir  = '\/kaggle\/input\/competitive-data-science-predict-future-sales\/'\n\npaths = {\n    'pathToDate': pathToDir,\n    'categories': pathToDir + 'item_categories.csv',\n    'items':  pathToDir + 'items.csv',\n    'train': pathToDir + 'sales_train.csv',\n    'submission': pathToDir + 'sample_submission.csv',\n    'shops': pathToDir + 'shops.csv',\n    'test': pathToDir + 'test.csv'\n}\n\nconfig = {'paths': paths}","c4a1082d":"def displayInCenter(text):\n    outputFormated = '{:*^50}'.format(text)\n    print(outputFormated)\n    \ndef regexFilter(text, regex):\n    if not text:\n        return False\n    return re.search(regex,text)\n","abfbaf3f":"\ncategoriesDf = pd.read_csv(paths.get('categories'))\nitemsDf = pd.read_csv(paths.get('items'))\ntrainDf = pd.read_csv(paths.get('train'))\nsubmissionDf = pd.read_csv(paths.get('submission'))\nshopsDf = pd.read_csv(paths.get('shops'))\ntestDf = pd.read_csv(paths.get('test'))\n\ninitialDatasets = {\n    'categories': categoriesDf,\n    'items': itemsDf,\n    'train': trainDf,\n    'submission': submissionDf,\n    'shops': shopsDf,\n    'test': testDf,\n}\n\ndisplayInCenter('\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u043b\u0438\u0441\u044c')","58a12ac5":"for(k,v) in initialDatasets.items():\n    displayInCenter(k)\n    v.info()\n\ndisplayInCenter('\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0412\u044b\u0432\u0435\u0434\u0435\u043d\u0430')","9f046bf1":"for(k,v) in initialDatasets.items():\n    displayInCenter(k)\n    print(v.describe())","7cde91ab":"# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0433\u043e\u0440\u043e\u0434\nshopsDf['city'] = shopsDf['shop_name'].apply(lambda x: x.split()[0])","00bcc683":"#\u043f\u043e\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0433\u043e\u0440\u043e\u0434\u0430, \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438\nregFilterForCity = lambda city: not regexFilter(city, r'^[\u0410-\u042f]+[\u0410-\u042f,\u0430-\u044f, ]*$') \nstrangeCityDf = shopsDf[shopsDf.city.apply(regFilterForCity)].city\ndisplayInCenter(\"\u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430\")\nprint(strangeCityDf.unique())\ndisplayInCenter(\"\u0412\u0441\u0435 \u0413\u043e\u0440\u043e\u0434\u0430\")\nprint(shopsDf.city.unique())\n# \u043d\u0430\u0434\u043e \u0431\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c !\u042f\u043a\u0443\u0442\u0441\u043a, \u0432\u044b\u0437\u044b\u0432\u0435\u0442 \u0441\u043e\u043c\u043d\u0435\u043d\u0438\u044f \u0435\u0449\u0435 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d","ceccbfc9":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b\ntrainDf.item_price\nsns.distplot(trainDf.item_price, hist = False, kde = True,\n                 kde_kws = {'linewidth': 3})","2bcb84bd":"sns.distplot(trainDf[trainDf['item_price'] > 25000].item_price, hist = True, kde = True,\n                 kde_kws = {'linewidth': 3})","cc5f6320":"sns.distplot(trainDf.item_cnt_day, hist = False, kde = True)","813893f3":"sns.distplot(trainDf[trainDf['item_cnt_day'] > 250].item_cnt_day, hist = True, kde = True)","f981f777":"regFilterForName = lambda name: not regexFilter(name, r'^[\u0410-\u042f]+[\u0410-\u042f,\u0430-\u044f, \"]*$') \nshopsDf[['shop_name', 'shop_id']][shopsDf.shop_name.apply(regFilterForName)]\n\n# \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u041e\u0440\u0430\u0434\u0436\u0430\u043d\u0438\u043a\u0438\u0434\u0437\u0435 56,  \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39 ","e9737ef6":"shopsDf[['shop_name', 'shop_id']][shopsDf.city.str.startswith('!\u042f\u043a\u0443\u0442\u0441\u043a', na=False) | shopsDf.city.str.startswith('\u042f\u043a\u0443\u0442\u0441\u043a', na=False)]","a1665576":"# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b shop_name\ndisplayInCenter(\"\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b shop_name\")\nprint(shopsDf['shop_name'][0], '==', shopsDf['shop_name'][57])\nprint(shopsDf['shop_name'][1], '==', shopsDf['shop_name'][58])\nprint(shopsDf['shop_name'][10], '==', shopsDf['shop_name'][11])\n\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0435\ntrainDf.loc[trainDf['shop_id'] == 0, 'shop_id'] = 57\ntrainDf.loc[trainDf['shop_id'] == 1, 'shop_id'] = 58\ntrainDf.loc[trainDf['shop_id'] == 10, 'shop_id'] = 11\n\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\ntestDf.loc[testDf['shop_id'] == 0, 'shop_id'] = 57\ntestDf.loc[testDf['shop_id'] == 1, 'shop_id'] = 58\ntestDf.loc[testDf['shop_id'] == 10, 'shop_id'] = 11\n\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\nshopsDf.loc[shopsDf['city'] =='!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'","29ce0346":"# \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0446\u0435\u043d\u0435 \u0438 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0434\u0430\u0436\ntrainDf = trainDf[(trainDf[\"item_price\"] > 0) & (trainDf[\"item_price\"] < 50000)]\ntrainDf = trainDf[(trainDf[\"item_cnt_day\"] > 0) & (trainDf[\"item_cnt_day\"] < 1000)]","7cf12974":"dfAggregator = pd.merge(trainDf, itemsDf, on = 'item_id', how = 'left')\ndfAggregator = pd.merge(dfAggregator, categoriesDf, on ='item_category_id',how ='left')\ndfAggregator = pd.merge(dfAggregator, shopsDf, on ='shop_id',how ='left')\ndfAggregator['month'] = 1 + dfAggregator['date_block_num']%12\ndfAggregator['year'] = 2013 + dfAggregator['date_block_num']\/\/ 12\ndfAggregator","9b9e0521":"sns.heatmap(dfAggregator.corr())","37c5ec2b":"features = [\"item_id\",\"shop_id\",\"month\",\"year\"]","555a94ac":"train = dfAggregator[[\"item_id\",\"shop_id\",\"month\",\"year\", \"item_cnt_day\", \"date_block_num\"]].groupby([\"item_id\",\"shop_id\",\"month\",\"year\", \"date_block_num\"]).sum().reset_index()\ntrain.rename(columns={'item_cnt_day':'item_cnt_month'},inplace=True)\ntrain","33acbea4":"testDf[\"year\"] = 2015\ntestDf[\"month\"]= 11\ntestDf","ff900c7d":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(train[features],train[\"item_cnt_month\"],test_size=0.2, random_state=0)","01e04662":"xgb = XGBRegressor().fit(train_X,train_y)\nxgb.score(val_X,val_y)\n","ecb221af":"from sklearn.metrics import mean_squared_error\ny_pred = xgb.predict(train_X)\nmean_squared_error(train_y, y_pred)","12bb93bf":"lgb = LGBMRegressor().fit(train_X,train_y)\nlgb.score(val_X,val_y)\ny_pred = lgb.predict(train_X)\nmean_squared_error(train_y, y_pred)","c47ff027":"lrm = LinearRegression().fit(train_X, train_y)\nlrm.score(val_X, val_y)","9ac79af7":"y_pred = lrm.predict(train_X)\nmean_squared_error(train_y, y_pred)","215b99ec":"rfr = RandomForestRegressor(n_estimators=50).fit(train_X,train_y)\nrfr.score(val_X,val_y)","410612a7":"y_pred = rfr.predict(train_X)\nmean_squared_error(train_y, y_pred)","e3cbeba5":"pred = rfr.predict(testDf[features])\nsubmission = pd.DataFrame({\"ID\": testDf[\"ID\"],\"item_cnt_month\" : pred})\nsubmission.to_csv(\"submission.csv\",index=False)","99055e2d":"### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0446\u0435\u043d\u0430 \u0438\u0442\u0435\u043c\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u044b\u0432\u0430\u044e\u0442 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u043d\u0430\u0434\u043e \u0431\u044b \u0443\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u0438 \"\u0432\u044b\u0445\u043b\u043e\u043f\u044b\"","20c95f9c":"# Linear Regression Model","fde1835d":"# \u041c\u0435\u0440\u0434\u0436\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435","e204c425":"# RFR","29fdbe0d":"# \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0438\u043d\u0444\u043e \u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430\u0445","fe59f809":"# XGBRegressor","b66c1270":"# \u0418\u043d\u0444\u043e","b205e8d5":"# \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","a0b86d54":"# \u0423\u0442\u0438\u043b\u0438\u0442\u044b","e7692d67":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b588b22a":"# \u041a\u043e\u043d\u0444\u0438\u0433","ba2d465c":"# \u0418\u043c\u043f\u043e\u0440\u0442\u044b","f997587e":"# \u0411\u0435\u0433\u043b\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","1495ef78":"#### \u043d\u0443\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0432\u044b\u0445\u043b\u043e\u043f \u0441 \u043e\u0433\u0440\u043e\u043c\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0438\u0442\u0435\u043c","8edcb138":"# \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a","185f4b97":"\u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 1 \u0438 58","6e95c0c4":"# LGM","2d341d23":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436 "}}