{"cell_type":{"4fcecbed":"code","66215211":"code","ba7ce2ec":"code","22982472":"code","e7105e2f":"code","bba4a2d6":"code","ece29c2e":"code","eb2b9d9e":"code","f42219cb":"code","a364945b":"code","bb7020a0":"code","209c7663":"code","fccd1851":"code","64e0176c":"code","9f0e3b5c":"code","29064d2e":"code","b3fd976f":"code","a21cbf38":"markdown","881a539d":"markdown","4288fe9c":"markdown","eacd751d":"markdown","3fcdafc9":"markdown","81813928":"markdown","fea5b598":"markdown","a51cc341":"markdown"},"source":{"4fcecbed":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport string\nfrom nltk.stem import SnowballStemmer\nimport re\nimport plotly.graph_objects as go\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import classification_report, confusion_matrix\nstemmer= SnowballStemmer('english')","66215211":"df= pd.read_csv('..\/input\/toxic-tweets-dataset\/FinalBalancedDataset.csv')\ndf.drop('Unnamed: 0', axis=1, inplace=True)","ba7ce2ec":"f= open('..\/input\/stop-words\/stop_words_english.txt', 'r', encoding='utf-8')\nstop_wordsV2= f.readlines()\nf.close()\n\nfor i in range(len(stop_wordsV2)):\n    stop_wordsV2[i]= stop_wordsV2[i].replace('\\n', '')\n    \nfor i in range(len(stop_wordsV2)):\n    if \"'\" in stop_wordsV2[i]:\n        stop_wordsV2.append(stop_wordsV2[i].replace(\"'\", ''))\n\nstop_wordsV2.append('i')","22982472":"data=df.groupby('Toxicity').count()['tweet']\nfig = go.Figure([go.Bar(x=data.index.get_level_values(0), y=data.values, text=data.values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title='Dist. of data classes',\n                 xaxis_title='Classes (0=Non-Toxic, 1=Toxic)', yaxis_title='Count')\nfig.show()","e7105e2f":"\nwords= df[df['Toxicity']==1]['tweet'].apply(lambda x : [w for w in re.sub(' +', \" \", re.sub(\"@[0-9a-zA-Z]+|#|https?:\/\/[0-9a-zA-Z\\.\/\\-_\\?]+|\u00e2\u0080\u00a6|(amp)|[0-9]+\", \"\", x)).translate(str.maketrans('', '', string.punctuation)).strip().split() if not w.lower() in stop_wordsV2])\nword={'words':[]}\nfor group in words:\n    for d in group:\n        word['words'].append(stemmer.stem(d))","bba4a2d6":"data=pd.DataFrame(word).value_counts()[:10]\nfig = go.Figure([go.Bar(x=data.index.get_level_values(0), y=data.values, text=data.values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title='Top 10 words in toxic tweets',\n                 xaxis_title='Words', yaxis_title='Count')\nfig.show()","ece29c2e":"\nwords= df[df['Toxicity']==0]['tweet'].apply(lambda x : [w for w in re.sub(' +', \" \", re.sub(\"@[0-9a-zA-Z]+|#|https?:\/\/[0-9a-zA-Z\\.\/\\-_\\?]+|\u00e2\u0080\u00a6|(amp)|[0-9]+\", \"\", x)).translate(str.maketrans('', '', string.punctuation)).strip().split() if not w.lower() in stop_wordsV2])\nword={'words':[]}\nfor group in words:\n    for d in group:\n        word['words'].append(stemmer.stem(d))","eb2b9d9e":"data=pd.DataFrame(word).value_counts()[:10]\nfig = go.Figure([go.Bar(x=data.index.get_level_values(0), y=data.values, text=data.values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title='Top 10 words in non-toxic tweets',\n                 xaxis_title='Words', yaxis_title='Count')\nfig.show()","f42219cb":"words= df[df['Toxicity']==1]['tweet'].apply(lambda x : re.findall('#[a-zA-Z_0-9]+', x))\nword={'words':[]}\nfor group in words:\n    for d in group:\n        if len(re.findall('#[0-9]+',d)) == 0:#filter hashtags which are all numbers (e.g. #198473)\n            word['words'].append(d)\ndata=pd.DataFrame(word).value_counts()[:10]\nfig = go.Figure([go.Bar(x=data.index.get_level_values(0), y=data.values, text=data.values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title='Top 10 toxic hashtags',\n                 xaxis_title='Hashtag', yaxis_title='Number of apperence')\nfig.show()","a364945b":"words= df[df['Toxicity']==0]['tweet'].apply(lambda x : re.findall('#[a-zA-Z_0-9]+', x))\nword={'words':[]}\nfor group in words:\n    for d in group:\n        if len(re.findall('#[0-9]+',d)) == 0:#filter hashtags which are all numbers (e.g. #198473)\n            word['words'].append(d)\ndata=pd.DataFrame(word).value_counts()[:10]\nfig = go.Figure([go.Bar(x=data.index.get_level_values(0), y=data.values, text=data.values)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title='Top 10 non-toxic hashtags',\n                 xaxis_title='Hashtag', yaxis_title='Number of apperence')\nfig.show()","bb7020a0":"#Clean text of meaningless words\ndef clean_words(x):\n    '''\n    Function to remove stop words, Hashtags, numbers, etc...\n    \n    Input- String\n    Output- String cleaned of meaningless words\n    '''\n    a= [w for w in re.sub(' +', \" \", re.sub(r\"#[0-9]+|@[0-9a-zA-Z]+|#|https?:\/\/[0-9a-zA-Z\\.\/\\-_\\?]+|\u00e2\u0080\u00a6|(amp)|[^\\x20-\\x7e]|\u00e2|\u00a5|\u00f0|\u00bb|\u00bc|\u00ef|\u00b8|\u00a6|\u00b1|\u00af|[0-9]+\", \"\", x)).translate(str.maketrans('', '', string.punctuation)).strip().split() if not w.lower() in stop_wordsV2]\n    return \" \".join([stemmer.stem(i) for i in a])\n    \ndf['Cleaned_tweets']= df['tweet'].apply(lambda x : clean_words(x))","209c7663":"#Split data\nfrom sklearn.model_selection import train_test_split\nx=df['Cleaned_tweets']\ny=df['Toxicity']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","fccd1851":"pipeline= Pipeline([\n    ('count', CountVectorizer()),\n    ('tf', TfidfTransformer()),\n    ('clf', LinearSVC())\n])","64e0176c":"pipeline.fit(x2_train, y2_train)","9f0e3b5c":"pred= pipeline.predict(x2_test)","29064d2e":"print(classification_report(y2_test, pred))","b3fd976f":"print(confusion_matrix(y2_test, pred))","a21cbf38":"# ML Pipeline","881a539d":"# Prepare data for ML Classifier","4288fe9c":"# Evaluation","eacd751d":"# Index  \n[Goal of the notebook](#Goal-of-the-notebook)  \n[Data Visulaization](#Data-Visulaization)  \n[Prepare data for ML Classifier](#Prepare-data-for-ML-Classifier)  \n[ML Pipeline](#ML-Pipeline)  \n[Evaluation](#Evaluation)  \n[Conclusion](#Conclusion)  \n\nWARNING: due to the nature of the data there will be some swear words in the Data Visulaization section if you do not wish to view such words please skip the mentioned section.  \n\n[GitHub](https:\/\/github.com\/FancyWhale69\/toxic_tweets_classifier)  \n[DashBoard](https:\/\/toxic-tweets.herokuapp.com\/)","3fcdafc9":"# Conclusion","81813928":"From tha data visulazation phase it can observed that toxic tweets contains a lot of swear words and usally found in ploitcal hastags. on the other hand non-toxic tweets contains positive words and mostly found in positive hashtags.\n\nML model achived an accuracy of 94%, while the LSTM network i built achived from 91% to 93% while being slow in the training phase unlike the ML model.","fea5b598":"# Data Visulaization","a51cc341":"# Goal of the notebook  \n\nThe goal of this notebook is to understand some characteristics of toxic tweets and to build a ML pipeline to classify tweets into toxic or non toxic"}}