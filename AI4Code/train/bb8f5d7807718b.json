{"cell_type":{"3e1e6e9f":"code","feb327f5":"code","1a956d19":"code","a2979083":"code","5641c983":"code","5db63b25":"code","93a1cb8a":"code","9a21431e":"code","82488690":"code","90f0feec":"code","dee8cade":"code","6308cc0c":"code","9fa6820c":"code","c8a4872b":"code","da7920f0":"code","f5f5cfc6":"markdown","a9d465d1":"markdown","4d376977":"markdown","2664837f":"markdown","beba887e":"markdown","fe718b76":"markdown","cdcc0499":"markdown","28ed342f":"markdown","1faa63c2":"markdown","e610a325":"markdown","51790dc1":"markdown","c9788abc":"markdown","0bcfdb2d":"markdown","08e5d171":"markdown"},"source":{"3e1e6e9f":"import matplotlib.pyplot as plt\nimport matplotlib.image as image\nimport pandas as pd\nimport numpy as np","feb327f5":"from matplotlib.widgets import SpanSelector\ndef onselect(xmin, xmax):\n            print(xmin, xmax)\n            return xmin, xmax\nfig, ax = plt.subplots()\nax.plot([1,2,3,4,5,6,7], [10, 50, 100, 23,15,28,45])\nspan = SpanSelector(ax, onselect, 'horizontal', useblit=True,  rectprops=dict(alpha=0.5, facecolor='red'))\nplt.show()","1a956d19":"#Defining the x and y ranges\nxranges = [(5,5), (20,5),(20,7)]\nyrange = (2,1)\n#Plotting the broken bar chart\nplt.broken_barh(xranges, yrange, facecolors='green')\nxranges = [(6,2), (17,5),(50,2)]\nyrange = (15,1)\nplt.broken_barh(xranges, yrange, facecolors='orange')\nxranges = [(5,2), (28,5),(40,2)]\nyrange = (30,1)\nplt.broken_barh(xranges, yrange, facecolors='red')\nplt.xlabel('Sales')\nplt.ylabel('Days of the Month')\nplt.show()","a2979083":"# The following example has been taken from a tweet by Just Glowing Python(@JustGlowing) \nx = np.random.rand(5, 8)*.7\nplt.plot(x.mean(axis=0), '-o', label='average per column')\nplt.xticks([])\n \nplt.table(cellText=[['%1.2f' % xxx for xxx in xx] for xx in x],cellColours=plt.cm.GnBu(x),loc='bottom')\n \nplt.show()","5641c983":"df = pd.read_csv('..\/input\/forbes-highest-paid-athletes-19902019\/Forbes Richest Atheletes (Forbes Richest Athletes 1990-2019).csv')\nim = image.imread('..\/input\/profile-pics\/LeBron.jpeg') # Image\n","5db63b25":"lebron_james = df[df['Name']=='LeBron James']","93a1cb8a":"fig, ax = plt.subplots()\nax.grid()\nax.plot('Year','earnings ($ million)',data=lebron_james)\nax.set_title(\"LeBron James earnings in US$(millions)\")\nfig.figimage(im, 60, 40,cmap='ocean', alpha=.2)\nplt.show()\n","9a21431e":"# Creating rows of random data with 50 data points\ndata = np.random.random([8, 50])\ncolorsCodes = ['C{}'.format(i) for i in range(8)]\n                \n \n# Set spike colors for each neuron\nlineSize = [.2, 0.3, 0.2, 0.8, 0.5, 0.6, 0.7, 0.9]                                  \nfig, ax = plt.subplots(1, 2)\n         \n# Creating a horizontal plot\n \nax[0].eventplot(data, color=colorsCodes, linelengths = lineSize) \nax[0].set_title('Spike Raster plot- Horizontal')\nax[0].set(xlabel=\"Spike\",ylabel=\"Neuron\")\nax[1].eventplot(data, color=colorsCodes, linelengths = lineSize, orientation='Vertical')     \nax[1].set_title('Spike Raster plot- Vertical')\nax[1].set(ylabel=\"Spike\",xlabel=\"Neuron\")\nplt.tight_layout()\nplt.show() ","82488690":"import matplotlib.dates as mdates\nfrom datetime import datetime\n \nnames = ['Gingerbread', 'Ice Cream Sandwich', 'Jelly Bean', 'KitKat', 'Lollipop', 'Marshmallow',\n             'Nougat', 'Oreo', 'Pie', '10', '11']\ndates = ['2011-02-9', '2011-10-19', '2012-11-13', '2013-10-31',\n             '2014-11-3', '2015-10-5', '2016-08-22', '2017-08-21',\n             '2018-08-06', '2019-09-3', '2020-02-19']\n \n# Convert date strings (e.g. 2014-10-18) to datetime\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\n \n# Choose some nice levels\nlevels = np.tile([-5, 5, -3, 3, -1, 1],\n                 int(np.ceil(len(dates)\/6)))[:len(dates)]\n \n# Create figure and plot a stem plot with the date\nfig, ax = plt.subplots(figsize=(8.8, 4), constrained_layout=True)\nax.set(title=\"Android version history\")\nmarkerline, stemline, baseline = ax.stem(dates, levels,\n                                         linefmt=\"C3-\", basefmt=\"k-\",\n                                         use_line_collection=True)\nplt.setp(markerline, mec=\"k\", mfc=\"w\", zorder=3)\n \n# Shift the markers to the baseline by replacing the y-data by zeros.\nmarkerline.set_ydata(np.zeros(len(dates)))\n \n# annotate lines\nvert = np.array(['top', 'bottom'])[(levels > 0).astype(int)]\nfor d, l, r, va in zip(dates, levels, names, vert):\n    ax.annotate(r, xy=(d, l), xytext=(-3, np.sign(l)*3),\n                textcoords=\"offset points\", va=va, ha=\"right\")\n \n# format xaxis with 10 month intervals\nax.get_xaxis().set_major_locator(mdates.MonthLocator(interval=10))\nax.get_xaxis().set_major_formatter(mdates.DateFormatter(\"%b %Y\"))\nplt.setp(ax.get_xticklabels(), rotation=30, ha=\"right\")\n \n# remove y axis and spines\nax.get_yaxis().set_visible(False)\nfor spine in [\"left\", \"top\", \"right\"]:\n    ax.spines[spine].set_visible(False)\nax.margins(y=0.1)\nplt.show()","90f0feec":"!pip install adjustText\n\n","dee8cade":"# Before calling adjusttext\n\nx, y = np.random.random((2,30))\nfig, ax = plt.subplots()\nplt.plot(x, y, 'bo')\ntexts = [plt.text(x[i], y[i], 'Text%s' %i, ha='center', va='center') for i in range(len(x))]","6308cc0c":"# calling adjusttext\n\nfrom adjustText import adjust_text\nfig, ax = plt.subplots()\nplt.plot(x, y, 'bo')\ntexts = [plt.text(x[i], y[i], 'Text%s' %i, ha='center', va='center') for i in range(len(x))]\nadjust_text(texts)","9fa6820c":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/parulnith\/Website-articles-datasets\/master\/India%20GDP%20Growth%20Rate%20.csv', parse_dates=['Year'])\ndf['Year'] = df['Year'].apply(lambda x: pd.Timestamp(x).strftime('%Y'))\n \n#calling xkcd() method\nplt.xkcd(scale=5, length=400)\ndf.plot(x='Year',y='GDP Growth (%)',kind='bar')\nplt.ylabel('GDP Growth (%)')\nplt.xticks(rotation=-20)\nplt.figure(figsize=(10,8))\nplt.show()","c8a4872b":"!pip install mplcyberpunk","da7920f0":"import mplcyberpunk\nplt.style.use(\"cyberpunk\")\n \nplt.plot([1, 3, 9, 5, 2, 1, 1], marker='o')\nplt.plot([4, 5, 5, 7, 9, 8, 6], marker='v')\nplt.plot([2, 3, 4, 3, 4, 5, 3], marker='s')\n \n# Add glow effects-Optional\nmplcyberpunk.add_glow_effects()\n","f5f5cfc6":"# 8. [adjustText](https:\/\/github.com\/Phlya\/adjustText)\u200a\u2014\u200aautomatic label placement for matplotlib\n\nA lot of times, we struggle to adjust the text positions in a graph. This happens when there are multiple labels, and these labels start overlapping. adjustText is a pretty useful library for such situations as it automates the placement of labels.","a9d465d1":"# 7. Bar of Pie\n\nHave you ever wanted to further drill down into a pie chart? Maybe you wanted to expand one of its slices and \u2018explode\u2019 it into a bar chart? Matplotlib makes it possible through a \u2018Bar of Pie\u2019 functionality. It uses a [ConnectionPatch that connects two points (possibly in different axes](https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.patches.ConnectionPatch.html#matplotlib-patches-connectionpatch))). Here is an example from the [official documentation](https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/bar_of_pie.html?highlight=bar%20pie).\n\n![](https:\/\/parulpandeycom.files.wordpress.com\/2020\/08\/pie.png)","4d376977":"# 5.Event Plots\n\nEvent plots come in handy when one wants to plot identical parallel lines at pre-defined positions.Such plots are commonly used in neuroscience to display the spiking activity of the neurons over time,","2664837f":"The interactivity cannot be shown in the notebook hence I am enclosing a gif.\n\n![](https:\/\/parulpandeycom.files.wordpress.com\/2020\/08\/1_ewseu1uciu4rd9odu4rfjg-2.gif?w=1024)","beba887e":"# 10. CyberPunk Style\n\n[mplcyberpunk](https:\/\/github.com\/dhaitz\/mplcyberpunk), which is a Python package on top of matplotlib to create \u2018cyberpunk\u2019 style plots with just three additional lines of code.","fe718b76":"# 3. Table\u00a0Demo\n\nDisplaying Table within a plot using the [table function](https:\/\/matplotlib.org\/3.2.1\/gallery\/misc\/table_demo.html)","cdcc0499":"![](https:\/\/parulpandeycom.files.wordpress.com\/2020\/08\/punk1-1.png)","28ed342f":"# 2. Broken Barh\u200a-\u200aBroken Horizontal Bar\u00a0plot\n\nA \u201cbroken\u201d horizontal bar plot is used in situations when the data has values that vary considerably\u200a\u2014\u200afor instance, a dataset consisting of extreme temperature ranges","1faa63c2":"# 6. Timelines\n\nCreating a timeline plot with Matplotlib. Here is a timeline showing the Android version history using the code provided in the official [documentation](https:\/\/matplotlib.org\/3.1.3\/gallery\/lines_bars_and_markers\/timeline.html).","e610a325":"Load the necessary libraries","51790dc1":"# 9 Matplotlib XKCD Plots\n\nWell, if you want to add some twist to your matplotlib plots, you can simply call the xkcd()method on the pyplot object as follows. Here we are working with GDP dataset of India, which shows the GDP growth rate percentage from 2010 from 2019.","c9788abc":"# 4.Watermarking Images with Matplotlib","0bcfdb2d":"I recently wrote a two part article on some of the advanced plots in Matploltib.I am sharing some of the code snippets here but incase you want a more detailed read, you can read the articles here:\n\n* [Advanced plots in Matplotlib\u200a\u2014 Part 1](https:\/\/parulpandey.com\/2020\/08\/04\/advanced-plots-in-matplotlib%e2%80%8a-%e2%80%8apart-1\/)\n* [Advanced plots in Matplotlib\u200a- Part 2](https:\/\/parulpandey.com\/2020\/08\/17\/advanced-plots-in-matplotlib%e2%80%8a-%e2%80%8apart-2\/)\n\nThe basic capabilities of the Matplotlib library, including the ability to create bar graphs, histograms, pie charts, etc. are well known. However, in this article, I will showcase some of the advanced plots in matplotlib, which can take our analysis a notch higher.\n\nAlso here is a handy cheatsheet provides an excellent glimpse of the various functionalities of Matplotlib.\n\n![](https:\/\/parulpandeycom.files.wordpress.com\/2020\/08\/0-1-1.jpeg?w=600)\n\nMatplotlib cheat sheet. Full image: https:\/\/lnkd.in\/dD5fE8V","08e5d171":"# 1. Span\u00a0Selector\n\n[Span Selector](https:\/\/matplotlib.org\/3.1.1\/gallery\/widgets\/span_selector.html) is a mouse widget in matplotlib.Span Selector returns the maximum and minimum values of a selected region in a graph, through the mouse selection."}}