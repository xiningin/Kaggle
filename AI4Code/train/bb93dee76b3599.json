{"cell_type":{"b48b0930":"code","26f94c5e":"code","a1d9ee43":"code","d6ca98ba":"code","f3aaa96b":"code","89aba7d5":"code","a54876c0":"code","7bb98722":"code","3f465c4a":"markdown","1c637bea":"markdown","8fed7ac1":"markdown"},"source":{"b48b0930":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092import\u3057\u307e\u3059\nfrom io import BytesIO\nimport os\nimport warnings\nimport multiprocessing\nimport IPython\nimport time\nimport gc\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tqdm.notebook import tqdm\nimport librosa \nimport librosa.display\nfrom pydub import AudioSegment\nwarnings.simplefilter('ignore')","26f94c5e":"INPUT_DIR = '\/kaggle\/input\/hah-data-science-challenge'\nos.makedirs('tmp')","a1d9ee43":"# \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\ndf_train = pd.read_csv(f'{INPUT_DIR}\/train.csv', index_col=False)\ndf_test = pd.read_csv(f'{INPUT_DIR}\/test.csv', index_col=False)\ndf = pd.concat([df_train, df_test]).reset_index(drop=True)","d6ca98ba":"recording_map = {\n    'PC\u5185\u81d3': 'PC\u5185\u8535', \n    'PC\u5185\u8535': 'PC\u5185\u8535', \n    'USB1': 'USB1', \n    'USB2': 'USB2', \n    'USB3': 'USB3', \n    'USB4': 'USB4', \n    '\u30b9\u30de\u30db': '\u30b9\u30de\u30db', \n    '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0': '\u30b9\u30de\u30db', \n    '\u5185\u8535\u30de\u30a4\u30af': 'PC\u5185\u8535'\n}\n\ndistance_map = {\n    '10cm': '10cm',\n    '10\u339d': '10cm',\n    '1M': '1m',\n    '20cm': '20cm',\n    '20\u339d': '20cm',\n    '2M': '2m',\n    '2m': '2m',\n    '30cm': '30cm',\n    '30cn': '30cm',\n    '30\u339d': '30cm',\n    '3m': '3m',\n    '40cm': '40cm',\n    '40\u339d': '40cm',\n    '50cm': '50cm',\n    '50\u339d': '50cm',\n    '5cm': '5cm',\n    '8cm': '8cm',\n    '\uff11\uff2d': '1m'\n}\n\ndf['\u9332\u97f3\u65b9\u6cd5'] = df['\u9332\u97f3\u65b9\u6cd5'].replace(recording_map)\ndf['\u30de\u30a4\u30af\u8ddd\u96e2'] = df['\u30de\u30a4\u30af\u8ddd\u96e2'].replace(distance_map)\ndf['Target'] = df['Target'].fillna('\u30e9\u30d9\u30eb\u306a\u3057').replace({0.0:'\u6b63\u5e38', 1.0:'\u7570\u5e38'})\ndf['file_stem'] = df['\u30d5\u30a1\u30a4\u30eb'].str.replace('.wav', '')","f3aaa96b":"df['name'] = '\u306d\u3058' + df['\u306d\u3058'] + '_\u30d7\u30ec\u30fc\u30c8' + df['\u30d7\u30ec\u30fc\u30c8'] + '_' + df['\u9332\u97f3\u65b9\u6cd5'] + '_' + df['\u30de\u30a4\u30af\u8ddd\u96e2'] + '_' + df['Target'] + '_' + df['file_stem']","89aba7d5":"def output_fft(signal, sample_rate, figname):\n    \n    fft = np.fft.fft(signal)\n    spectrum = np.abs(fft)\n    f = np.linspace(0, sample_rate, int(len(spectrum)\/2))\n    left_spectrum = spectrum[:int(len(spectrum)\/2)]\n    left_f = f[:int(len(spectrum)\/2)]\n    # plot spectrum\n    plt.figure(figsize=(15,6))\n    # \u4eba\u9593\u306e\u8033\u306b\u306f20~20000\u307e\u3067\u3057\u304b\u805e\u3053\u3048\u306a\u3044\u305d\u3046\u306a\u306e\u3067\u3001\u4e00\u90e8\u7d5e\u308b\n    plt.plot(left_f[(20<left_f)&(left_f<20000)], \n             left_spectrum[(20<left_f)&(left_f<20000)])\n    plt.xticks([0, 2500, 5000, 7500, 10000, 12500, 15000, 17500, 20000])\n    plt.xlabel(\"Frequency\")\n    plt.ylabel(\"Magnitude\")\n    plt.title(f\"Power spectrum\")\n    plt.savefig('tmp\/' + figname + '.png')\n    plt.close('all')","a54876c0":"files = df['\u30d5\u30a1\u30a4\u30eb'].to_list()\nnames = df['name'].to_list()\nplt.ioff()\nfor file, name in zip(tqdm(files), names):\n    if 'train' in file:\n        filepath = f'{INPUT_DIR}\/train\/train\/{file}'\n    elif 'test' in file:\n        filepath = f'{INPUT_DIR}\/test\/test\/{file}'\n    audio, sample_rate = librosa.load(filepath)\n    output_fft(audio, sample_rate, name)","7bb98722":"# \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092zip\u3067\u56fa\u3081\u3066\u51fa\u529b\nimport shutil\nshutil.make_archive('.\/fft', 'zip', root_dir='tmp')","3f465c4a":"# \u540d\u5bc4\u305b\u3068\u30b0\u30eb\u30fc\u30d7\u5206\u3051\n\uff08 \u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff1ahttps:\/\/www.kaggle.com\/ryoichi0917\/corrections-to-notation-errors-and-eda-for-meta \uff09\n\n\u8868\u8a18\u63fa\u308c\u3092\u76f4\u3057\u305f\u3046\u3048\u3067\u3001\u6761\u4ef6\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u307e\u3059","1c637bea":"# \u5168\u3066\u306e\u30c7\u30fc\u30bf\u306efft\u3092\u51fa\u529b","8fed7ac1":"# FFT\u306e\u6bd4\u8f03\nhttps:\/\/www.kaggle.com\/hattan0523\/target-0-0-1-0"}}