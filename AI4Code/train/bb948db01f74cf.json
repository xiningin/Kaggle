{"cell_type":{"310840d6":"code","3e78b559":"code","f6c10bfc":"code","7e3d87a9":"code","a288447a":"code","149fe5a7":"markdown","5236734f":"markdown","baa9a047":"markdown","99e91a6d":"markdown","3281c0ae":"markdown"},"source":{"310840d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom scipy import ndimage\nfrom matplotlib import cm\nimport imageio\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e78b559":"def read_image(ext):\n    return imageio.imread(ext)\npic_gray=read_image('\/kaggle\/input\/figuragray01\/Captura de Tela (27).png')\n#pic_col=read_image('\/kaggle\/input\/figura01\/Fig0207(a)(gray-level-band).png')","f6c10bfc":"def plot_image(pic):\n    plt.figure(figsize = (10,10))\n    plt.imshow(pic)\n    axis=plt.axis('off')\nplot_image(pic_gray)\n#plot_image(pic_color)","7e3d87a9":"def get_diff_pix(pic):\n    lista=[]\n    #list_inten=[]\n    for lista_pix in pic:\n        for pix in lista_pix:\n            if(pix[0] not in lista):\n                lista.append(pix[0])\n                \n            if(pix[1] not in lista):\n                lista.append(pix[1])\n                \n            if(pix[2] not in lista):\n                lista.append(pix[2])\n                \n            #if(pix[3] not in list_inten):\n                #list_inten.append(pix[3])\n    return lista\n       \nget_diff_pix(pic_gray)    ","a288447a":"w, h = 300, 300\n#img1\ndata1 = np.zeros((h, w, 3), dtype=np.uint8)\ndata1[:, :] =[0, 0, 0]\ndata1[100:200, 100:200] = [128, 128, 128] \nimg1 = Image.fromarray(data1, 'RGB')\n\n#img2\ndata2 = np.zeros((h, w, 3), dtype=np.uint8)\ndata2[:, :] =[64, 64, 64]\ndata2[100:200, 100:200] = [128, 128, 128] \nimg2 = Image.fromarray(data2, 'RGB')\n\n\n#img3\ndata3 = np.zeros((h, w, 3), dtype=np.uint8)\ndata3[:, :] =[192, 192, 192]\ndata3[100:200, 100:200] = [128, 128, 128] \nimg3 = Image.fromarray(data3, 'RGB')\n\nplt.figure(figsize=(9.5, 3))\n\nplt.subplot(131)\nplt.imshow(img1,interpolation='nearest')\nplt.axis('off')\n\nplt.subplot(132)\nplt.imshow(img2,interpolation='nearest')\nplt.axis('off')\n\nplt.subplot(133)\nplt.imshow(img3, interpolation='nearest')\nplt.axis('off')\n\nplt.show()","149fe5a7":"> Getting distinct values of gray tones!","5236734f":"**No, because there is a phenomenon known as simultaneous contrast, which is related to the fact that the apparent brightness of a region depends on the intensity of the background. In the three figures, all the central squares have exactly the same intensity, although they seem to become darker as the depths of the funds become lighter.**","baa9a047":"**Although the intensity of each band or region of the figure is constant, an altered brightness pattern is noticed, particularly when close to the edges.**","99e91a6d":"> 2. (2.0 points) Reconstruct the three images in the figure below, in which the square of the center of each image has intensity 128 and the background squares have intensity 0, 64 and 192, respectively\n> tively. The largest square has dimensions 300 \u00d7 300 and the smaller square 100 \u00d7 100. After\n> you built the image yourself, you still think the smaller square is darker in\n> right square?","3281c0ae":"> 1. (2.0 points) Make the double loop that checks all the intensity values \u200b\u200bof each pixel (all\n> the lines and all pixels of each line). Create a list that stores each new value\n> of intensity that you find when going through all the pixels. Find out which distinct values\n> of gray tones appear in the image \u201cFig0207 (a) (gray level band) .png\u201d. When observing this\n> image it is imagined that each rectangle does NOT have constant intensity but presents a\n> gradient with the lighter side being the left side, you can deny this statement with the\n> your results?"}}