{"cell_type":{"02691cb2":"code","61e0be64":"code","0ea01646":"code","01929b69":"code","442e40a6":"code","c091cb1a":"code","aa598f0e":"code","786e991b":"code","7ed727d2":"code","1131b9e1":"code","26b90492":"code","c3520072":"code","dc5bd354":"code","d3bc0ec4":"code","61c77a7a":"code","606c3991":"code","d64a4e64":"code","27847451":"code","7ca1374a":"code","956532d6":"code","dea5a6e7":"code","f09c4acb":"code","d87501c4":"code","7c62b196":"code","bb3a14a2":"code","9cb1d81e":"code","8e4158cf":"code","0e8fb34b":"code","1ce6f9c0":"code","49442e58":"code","49f87c6f":"code","6b701d25":"code","5b675a08":"code","c448e03d":"code","11fd4ba8":"code","2a82a73a":"code","68ac8aef":"code","b3623789":"code","da76454a":"code","8c92147f":"code","01a1d317":"code","08426bd8":"code","daa3c41e":"code","62858e26":"code","003cf100":"code","1c46265c":"code","22f42532":"code","065bf870":"code","2ce75572":"code","0e210a60":"code","e460bc0d":"code","fcbba15d":"code","c4573db3":"code","b9d128ba":"code","78acc621":"code","76cb3024":"markdown","b0def9b5":"markdown","c0903844":"markdown","33f30c0f":"markdown","6f9803f5":"markdown","62982514":"markdown","0c37fa8e":"markdown","2456f7f8":"markdown","673ac488":"markdown","8408aacc":"markdown","0b78607e":"markdown","c5132628":"markdown","773ed58f":"markdown","c451dd6c":"markdown","ae6653c6":"markdown","0bb4df55":"markdown","1fd6c9b8":"markdown","8a9388c7":"markdown"},"source":{"02691cb2":"# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncustom_params = {\"axes.spines.right\": False, \"axes.spines.top\": False}\nsns.set_theme(style=\"white\", palette='pastel', rc=custom_params)\nsns.color_palette(palette='pastel', as_cmap=True)\nimport statsmodels.api as sm\nfrom scipy import stats\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.decomposition import PCA\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.metrics import silhouette_score\nimport warnings\nwarnings.filterwarnings('ignore')","61e0be64":"# Read the data\nmarketing_data = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep= '\\t')","0ea01646":"# Display all columns\npd.options.display.max_columns = marketing_data.shape[1]","01929b69":"marketing_data.head()","442e40a6":"marketing_data.isnull().sum()","c091cb1a":"# PLot the income w.r.t every categorical variable\nfig, (ax1, ax2) = plt.subplots(2, 3, figsize=(20, 12))\n\nsns.histplot(data=marketing_data, x='Income', kde=True, ax=ax1[0])\nsns.histplot(data=marketing_data, x='Income', hue='Education', kde=True, ax=ax1[1])\nsns.histplot(data=marketing_data, x='Income', hue='Marital_Status', kde=True, ax=ax1[2])\nsns.histplot(data=marketing_data, x='Income', hue='Kidhome', kde=True, ax=ax2[0])\nsns.histplot(data=marketing_data, x='Income', hue='Teenhome', kde=True, ax=ax2[1])\nsns.histplot(data=marketing_data, x='Income', hue='Complain', kde=True, ax=ax2[2])\n\nplt.show()","aa598f0e":"# Convert the distribution with logarithmic distribution\nsns.histplot(np.log(marketing_data['Income']), kde=True)\nplt.xlabel(\"Log of Income\")\nplt.show()","786e991b":"# Calculate the mean value of the log income and take the exponent to impute the null values\nlog_mean = np.mean(np.log(marketing_data['Income']))\nnull_income_imputed_val = np.exp(log_mean)","7ed727d2":"# Fill the null values in the income column\nmarketing_data['Income'] = marketing_data['Income'].fillna(null_income_imputed_val)","1131b9e1":"# Plot the distribution of the income again\nsns.histplot(data=marketing_data, x='Income', kde=True)\nplt.show()","26b90492":"# Check for null values again\nmarketing_data.isnull().sum()","c3520072":"marketing_data.head()","dc5bd354":"# Creating new features\n\n# 1. Age of Customers\nmarketing_data['Age_of_Customer'] = 2021 - marketing_data['Year_Birth']\n\n# 2. Number of Children\nmarketing_data['Children_Count'] = marketing_data['Kidhome'] + marketing_data['Teenhome']\n\n# 3. Number of Family Members\nmarital_status = {'Married' : 2,\n                  'Together' : 2,\n                  'Single' : 1, \n                  'Divorced' : 1,\n                  'Widow' : 1,\n                  'Alone' : 1,\n                  'Absurd' : 1,\n                  'YOLO' : 1\n                 }\nmarketing_data['Family_Members_Count'] = marketing_data['Children_Count'] + marketing_data['Marital_Status'].apply(lambda x : marital_status[x])\n\n# 4. Whether the customer is a parent or not\nmarketing_data['Is_Parent'] = marketing_data['Children_Count'].apply(lambda x : 1 if x > 0 else 0)\nmarketing_data.head()\n\n# 5. Number of years since customer\nmarketing_data['Dt_Customer'] = pd.to_datetime(marketing_data['Dt_Customer'])\nmarketing_data[\"Num_year_since_customer\"] = 2021 - marketing_data['Dt_Customer'].dt.year\n\n# 6. Total Amount spent on order\nmarketing_data['Amount_Spent'] = (marketing_data['MntWines'] +\n                                  marketing_data['MntFruits'] + \n                                  marketing_data['MntMeatProducts'] +\n                                  marketing_data['MntFishProducts'] +\n                                  marketing_data['MntSweetProducts'] +\n                                  marketing_data['MntGoldProds'])\n\n# 7. Amount Spent Income Ratio\nmarketing_data['AmountSpent_Income_Ratio'] = marketing_data['Amount_Spent']\/marketing_data['Income']","d3bc0ec4":"marketing_data.head()","61c77a7a":"# Visualist the overall data description\nmarketing_data.describe().drop('ID', axis=1)","606c3991":"# Z_CostContact and Z_Revenue have constant values throughout, it is better to drop these variables\nmarketing_data.drop(['Z_CostContact', 'Z_Revenue'], axis=1, inplace=True)","d64a4e64":"# Plot the correlation heatmap\ncorr_matrix = marketing_data.drop('ID', axis=1).corr()\nplt.figure(figsize=(18, 15))\nsns.heatmap(corr_matrix, annot=True,fmt = \".1f\", cmap='Pastel2')\nplt.show()","27847451":"# Drop the redundant columns\nredundant_columns = ['Kidhome', 'Teenhome', 'Dt_Customer', 'Year_Birth']\nmarketing_data.drop(redundant_columns, axis=1, inplace=True)","7ca1374a":"# Visualise the Income and amount spent w.r.t marital status\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\nsns.boxplot(data=marketing_data, x='Marital_Status', y='Income', ax=ax[0])\nsns.boxplot(data=marketing_data, x='Marital_Status', y='Amount_Spent', ax=ax[1])\nax[0].set_title(\"Income w.r.t Marital Status\")\nax[1].set_title(\"Amount Spent w.r.t Marital Status\")\nfig.show()\n","956532d6":"# Absurd and YOLO seems strange categories\nmarketing_data[(marketing_data['Marital_Status'] == 'Absurd') | (marketing_data['Marital_Status'] == 'YOLO')]","dea5a6e7":"values_to_drop = marketing_data[(marketing_data['Marital_Status'] == 'Absurd') | (marketing_data['Marital_Status'] == 'YOLO')].index\nmarketing_data.drop(index=values_to_drop, inplace=True)","f09c4acb":"marketing_data['Marital_Status'].value_counts()","d87501c4":"# Group the marital status into broader categories\nmarketing_data['Marital_Status'].replace(to_replace=['Single', 'Divorced', 'Widow', 'Alone'], value='Single', inplace=True)\nmarketing_data['Marital_Status'].replace(to_replace=['Married', 'Together'], value='Together', inplace=True)","7c62b196":"# Plot the marital status pie chart\nplt.figure(figsize=(12,8))\nplt.pie(marketing_data['Marital_Status'].value_counts(), labels=['Together', 'Single'], autopct=\"%1.1f%%\")\nplt.title(\"Marital Status Pie Chart\")\nplt.show()","bb3a14a2":"# Plot the income distribution and spend distribution w.r.t marital status\nfig, (ax1, ax2) = plt.subplots(2, 2, figsize=(15,12))\nsns.histplot(data=marketing_data, x='Income', hue='Marital_Status', kde=True, ax=ax1[0])\nsns.boxplot(data=marketing_data, x='Marital_Status', y='Income', ax=ax1[1])\nsns.histplot(data=marketing_data, x='Amount_Spent', hue='Marital_Status', kde=True, ax=ax2[0])\nsns.boxplot(data=marketing_data, x='Marital_Status', y='Amount_Spent', ax=ax2[1])\nfig.show()","9cb1d81e":"marketing_data[marketing_data['Income'] > 300000]","8e4158cf":"outlier_income = marketing_data[marketing_data['Income'] > 300000].index\nmarketing_data.drop(index=outlier_income, inplace=True)","0e8fb34b":"# Plot the scatterplot b\/w Amount Spent and Income\nplt.figure(figsize=(8, 5))\nsns.scatterplot(data=marketing_data, x='Income', y='Amount_Spent', hue='Marital_Status')\nplt.xlabel(\"Income\")\nplt.ylabel(\"Amount Spent\")\nplt.show()","1ce6f9c0":"# Plot the distribution of parents and non parents\nplt.figure(figsize=(12,8))\nplt.pie(marketing_data['Is_Parent'].value_counts(), labels=['Yes', 'No'], autopct=\"%1.1f%%\")\nplt.title(\"Parents and Non Parents Pie Chart\")\nplt.show()","49442e58":"# Plot the Income and amount w.r.t Is_Parent\nfig, ax = plt.subplots(1, 2, figsize=(12,5))\nsns.boxplot(data=marketing_data, x='Is_Parent', y='Income', ax=ax[0])\nsns.boxplot(data=marketing_data, x='Is_Parent', y='Amount_Spent', ax=ax[1])\nax[0].set_title(\"Income Distribution w.r.t Parent\")\nax[1].set_title(\"Amount Spent Distribution w.r.t Parent\")\nplt.show()","49f87c6f":"# Plot the Income and amount w.r.t Is_Parent frequency distribution\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\nsns.histplot(data=marketing_data, hue='Is_Parent', x='Income', ax=ax[0])\nsns.histplot(data=marketing_data, hue='Is_Parent', x='Amount_Spent', ax=ax[1])\nax[0].set_title(\"Income Distribution w.r.t Parent\")\nax[1].set_title(\"Amount Spent Distribution w.r.t Parent\")\nplt.show()","6b701d25":"# Plot the Recency w.r.t Marital Status and Is_Parent\nfig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,8))\nsns.boxplot(data=marketing_data, x='Marital_Status', y='Recency', ax=ax1[0])\nsns.histplot(data=marketing_data, x='Recency', hue='Marital_Status', ax=ax1[1], kde=True)\nsns.boxplot(data=marketing_data, x='Is_Parent', y='Recency', ax=ax2[0])\nsns.histplot(data=marketing_data, x='Recency', hue='Is_Parent', ax=ax2[1], kde=True)\nplt.show()","5b675a08":"marketing_data[['Education', 'Marital_Status', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']].groupby('Marital_Status').mean().T","c448e03d":"# Plot the Frequency for each Education category\nsns.countplot(data=marketing_data, x='Education', order=['Basic', '2n Cycle', 'Master', 'PhD', 'Graduation'])\nplt.show()","11fd4ba8":"# Plot the income w.r.t education\nfig, ax = plt.subplots(1, 2, figsize=(12,5))\nsns.barplot(data=marketing_data, x='Education', y='Income', order = ['Basic', '2n Cycle', 'Graduation', 'Master', 'PhD'], ax=ax[0])\nsns.barplot(data=marketing_data, x='Education', y='Amount_Spent', order = ['Basic', '2n Cycle', 'Graduation', 'Master', 'PhD'], ax=ax[1])\nax[0].set_xlabel(\"Education\")\nax[0].set_ylabel(\"Income\")\nax[1].set_xlabel(\"Education\")\nax[1].set_ylabel(\"Amount Spent\")\nplt.show()","2a82a73a":"# Drop the variables which represent campaign deals\ncols_to_drop = ['ID', 'AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response']\nmarketing_data_copy = marketing_data.copy()\nmarketing_data_copy.drop(cols_to_drop, axis=1, inplace=True)","68ac8aef":"marketing_data_copy['Total_Purchases'] = (marketing_data_copy['NumDealsPurchases']+\n                                          marketing_data_copy['NumWebPurchases']+\n                                          marketing_data_copy['NumCatalogPurchases']+\n                                          marketing_data_copy['NumStorePurchases'])\nmarketing_data_copy.head()","b3623789":"# plot the Total Purchases\nsns.histplot(data=marketing_data_copy, x='Total_Purchases', kde=True)\nplt.xlabel(\"Total Purchases\")\nplt.show()","da76454a":"# plotting the following variables\ncols_to_plot = [ \"Income\", \"Recency\", \"Age_of_Customer\", \"Amount_Spent\", \"Is_Parent\", \"Total_Purchases\"]\nsns.pairplot(data=marketing_data_copy[cols_to_plot], hue='Is_Parent')\nplt.show()","8c92147f":"cols_to_plot = [ \"Income\", \"Recency\", \"Age_of_Customer\", \"Amount_Spent\", \"Marital_Status\", \"Total_Purchases\"]\nsns.pairplot(data=marketing_data_copy[cols_to_plot], hue='Marital_Status')\nplt.show()","01a1d317":"# Encode the categorical variables\n\n# 1. Encode ordnial variables : Education\neducation_encoding = {'2n Cycle' : 0,\n                      'Basic' : 1,\n                      'Graduation' : 2, \n                      'Master' : 3,\n                      'PhD' : 4}\n\nmarketing_data_copy['Education'] = marketing_data['Education'].apply(lambda x : education_encoding[x])\n\n# 2. Encode the Nominal Variable : Marital_Status\nmarketing_data_copy = pd.get_dummies(marketing_data_copy, drop_first=True)\nmarketing_data_copy.head()","08426bd8":"# Scale the data\nss = StandardScaler()\nmarketing_data_copy_scaled = ss.fit_transform(marketing_data_copy)\nmarketing_data_copy = pd.DataFrame(marketing_data_copy_scaled, columns=marketing_data_copy.columns)\nmarketing_data_copy.head()","daa3c41e":"# Dimensionality Reduction\npca = PCA(n_components=3, random_state=42)\nmarketing_data_reduced = pca.fit_transform(marketing_data_copy)\n\n# Convert into df\nreduced_df = pd.DataFrame(marketing_data_reduced, columns=['Column1', 'Column2', 'Column3'])","62858e26":"# plot the reduced data\nx = reduced_df['Column1']\ny = reduced_df['Column2']\nz = reduced_df['Column3']\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(x,y,z, marker=\"o\" )\nax.set_title(\"A 3D Projection Of Dimensionally Reduced Data\")\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nplt.show()","003cf100":"# Run the Elbow Method\nkmeans = KMeans()\nelbow_method = KElbowVisualizer(kmeans)\nelbow_method.fit(reduced_df)\nelbow_method.show()\nplt.show()","1c46265c":"# List to store the silhouette score of the model\nsilhouette_scores = []\n\n# iterate for k = 2 to 11 \nfor i in range(2, 11):\n    \n    # initialise the model and fit on the reduced dataset\n    kmeans = KMeans(n_clusters=i, random_state=2)\n    kmeans.fit(reduced_df)\n    \n    # Compute the silhouette_score and append in the list\n    sil_score = silhouette_score(reduced_df, kmeans.labels_)\n    silhouette_scores.append(sil_score)","22f42532":"# Plot the silhouette scores\n\nmax_silhouette_score = [max(silhouette_scores)]*10\nmin_silhouette_score = min(silhouette_scores)\ncorresponding_cluster = [silhouette_scores.index(max_silhouette_score[0]) + 2]*10\n\nx = np.arange(2,11) # number of clusters\nplt.plot(x, silhouette_scores)\nplt.plot(corresponding_cluster[0], max_silhouette_score[0], color='black', marker='o')\nplt.hlines(max_silhouette_score, linestyle='--', xmax=corresponding_cluster[0], xmin=2, color='black', alpha=0.1)\nplt.vlines(corresponding_cluster, linestyle='--', ymax=max_silhouette_score[0], ymin=min_silhouette_score, color='black', alpha=0.1)\nplt.xlabel(\"Clusters\")\nplt.ylabel(\"Silhouette Scores\")\nplt.show()","065bf870":"# 1. With k = 3\n\nkmeans_final_1 = KMeans(n_clusters=3, n_init = 20, max_iter=500)\nkmeans_final_1.fit(reduced_df)\nclusters = kmeans_final_1.predict(reduced_df)\nmarketing_data['clusters_1'] = clusters\nreduced_df['clusters_1'] = clusters\n\n# 2. With k = 4\n\nkmeans_final_2 = KMeans(n_clusters=4, n_init = 20, max_iter=500)\nkmeans_final_2.fit(reduced_df)\nclusters = kmeans_final_2.predict(reduced_df)\nmarketing_data['clusters_2'] = clusters\nreduced_df['clusters_2'] = clusters","2ce75572":"# plot the reduced data\nx = reduced_df['Column1']\ny = reduced_df['Column2']\nz = reduced_df['Column3']\n\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(1,2,1, projection=\"3d\")\nax1.scatter(x,y,z, c=reduced_df['clusters_1'], marker=\"o\", cmap='Dark2')\nax1.set_title(\"A 3D Projection Of Dimensionally Reduced Data with 3 clusters\")\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_zlabel('z')\n\nax2 = fig.add_subplot(1, 2, 2, projection=\"3d\")\nax2.scatter(x,y,z, c=reduced_df['clusters_2'], marker=\"o\", cmap='Dark2')\nax2.set_title(\"A 3D Projection Of Dimensionally Reduced Data with 4 clusters\")\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_zlabel('z')\nplt.tight_layout()\nfig.show()","0e210a60":"# Plot the cluster distribution\nsns.countplot(data=marketing_data, x='clusters_2')\nplt.show()","e460bc0d":"# Plot the variables w.r.t clusters\nfig, ax = plt.subplots(2, 2, figsize=(17,14))\nsns.scatterplot(data=marketing_data, x='Income', y='Amount_Spent', hue='clusters_2', ax=ax[0][0])\nsns.histplot(data=marketing_data, x='Amount_Spent', hue='clusters_2', kde=True, ax=ax[0][1])\nsns.histplot(data=marketing_data, x='Income', hue='clusters_2', kde=True, ax=ax[1][0])\nsns.countplot(data=marketing_data, x='Is_Parent', hue='clusters_2', ax=ax[1][1])\nax[0][0].set_title(\"Income v\/s Amount Spent Distribution w.r.t cluster\")\nax[0][1].set_title(\"Amount Spent Distribution w.r.t each cluster\")\nax[1][0].set_title(\"Income Distribution w.r.t each cluster\")\nax[1][1].set_title(\"Parent Distribution w.r.t each cluster\")\nplt.show()","fcbba15d":"# Create a new column called total purchases and plot it w.r.t each cluster\ntotal_purchases = (marketing_data['NumDealsPurchases'] + \n                   marketing_data['NumWebPurchases'] + \n                   marketing_data['NumCatalogPurchases'] + \n                   marketing_data['NumStorePurchases'])\nmarketing_data['Total_Purchases'] = total_purchases\n\n# Plot the total purchases\nfig, (ax1, ax2) = plt.subplots(2, 2, figsize=(14,14))\nsns.boxplot(data=marketing_data, x = 'clusters_2', y= 'Total_Purchases', ax=ax1[0])\nsns.boxplot(data=marketing_data, x = 'clusters_2', y= 'NumWebVisitsMonth', ax=ax1[1])\nsns.boxplot(data=marketing_data, x='clusters_2', y='Children_Count', ax=ax2[0])\nsns.boxplot(data=marketing_data, x='clusters_2', y='Family_Members_Count', ax=ax2[1])\nplt.show()","c4573db3":"# Plot the Deals and Response Variables\nfig, (ax1, ax2) = plt.subplots(2, 2, figsize=(14,14))\nsns.countplot(data=marketing_data, x = 'AcceptedCmp1', hue='clusters_2', ax=ax1[0])\nsns.countplot(data=marketing_data, x = 'AcceptedCmp2', hue='clusters_2', ax=ax1[1])\nsns.countplot(data=marketing_data, x = 'AcceptedCmp3', hue='clusters_2', ax=ax2[0])\nsns.countplot(data=marketing_data, x = 'AcceptedCmp4', hue='clusters_2', ax=ax2[1])\nplt.show()","b9d128ba":"# Plot the \nfig, (ax1, ax2) = plt.subplots(2, 2, figsize=(14,14))\nsns.countplot(data=marketing_data, x = 'Response', hue='clusters_2', ax=ax1[0])\nsns.boxplot(data=marketing_data, x = 'clusters_2', y='Age_of_Customer', ax=ax1[1])\nsns.boxplot(data=marketing_data, x = 'clusters_2', y='Num_year_since_customer', ax=ax2[0])\nsns.histplot(data=marketing_data, x = 'Age_of_Customer', hue='clusters_2', ax=ax2[1], kde=True)\nplt.show()","78acc621":"# Plot the Education w.r.t clusters\nfig, ax = plt.subplots(1, 2, figsize=(15,4))\nsns.countplot(data=marketing_data, x='Education', hue='clusters_2', ax=ax[0])\nsns.countplot(data=marketing_data, x='Marital_Status', hue='clusters_2', ax=ax[1])\nax[0].set_title(\"Education Distribution w.r.t Clusters\")\nax[1].set_title(\"Marital Status Distribution w.r.t Clusters\")\nplt.show()","76cb3024":"* Income column in \"together\" category seems to have an outlier.","b0def9b5":"# Summarizing It All","c0903844":"## Cluster 0\n* High Income People\n* High Spending People\n* Make more number of Purchases.\n* Are not Parents.\n* Most likely to accept deals and promos.\n\n## Cluster 1\n* Low Income People\n* Low Spending People\n* Make less number of Purchases.\n* Make most website visits.\n* Are Both Parents and Non Parents.\n* Least likely to accept deals and promos.\n\n## Cluster 2\n* Middle Income People\n* High Spending People\n* Make more number of Purchases.\n* Makes more number of website visits.\n* Are Parents.\n* Most likely to accept deals and promos.\n\n## Cluster 3\n* Low Income People\n* Low Spending People\n* Make less number of Purchases.\n* Are Parents.\n* Have most number of family members.\n* More likely to accept deals and promos.\n\n","33f30c0f":"* Cluster 0 people are most converted from leads to buyers.\n* Age distribution is almost even.","6f9803f5":"# Feature Engineering\n\n1. Age of Customers\n2. Number of Children\n3. Number of Family members\n4. Whether a customer is a parent or not\n5. Number of Years since customer\n6. Total amount spent\n7. Amount Spent and Income Ratio","62982514":"**Although, Elbow method is a good approach to determine the number of clusters, there is another way with which we can find the ideal number of clusters. It's called the silhouette score analysis.**","0c37fa8e":"# Customer Personality Analysis\n\n**Customer Personality Analysis is a detailed analysis of a company's ideal customers. It helps a business to better understand its customers and makes it easier for them to modify products according to the specific needs, behaviors, and concerns of different types of customers. In this Notebook, I will perform a detailed analysis and segment the customers into various clusters that can help the business better understand its customers and make it easier for them to modify products according to the specific needs, behaviors, and concerns of different types of customers.**","2456f7f8":"# Dimensionality Reduction and Clustering","673ac488":"* Cluster 0 and Cluster 2 have people with relatively more number of purchases.\n* Cluster 1 and Cluster 3 have people with less number of total purchases.\n* Cluster 1 has people with most website visits.\n* Cluster 3 has most number of children.\n* Cluster 3 has most number of family members.","8408aacc":"* PhD, Master and Graduation level educated people are most earners and spenders. Hence, they can be targeted with higher end goods campaigns.","0b78607e":"* Categories like Single, Divorced, Widow and Alone can be grouped as one while the categories like Married and Together can be grouped together.","c5132628":"* The Amount Spent and Income ratio for the above value is very less, the point probably seems a outlier.","773ed58f":"1. Cluster 0 has High Income and High Spending people. Also, cluster 0 people do not have any child.\n2. Cluster 1 are Low Income groups and low spending people, are mostly parents.\n3. Cluster 2 are Middle Income Groups and High spending people, are mostly parents.\n4. Cluster 4 are Low Income and Low Spending people,are mostly parents.","c451dd6c":"* The data points with Marital Status as YOLO, is probably a repeated value that too with just 2 values and should be removed.\n* \"Absurd\" category also has to few entries, hence can be removed.","ae6653c6":"1. **Next, I will be using Elbow method to confirm the number of clusters.**\n2. **Since, the clusters seem spherical, KMeans Clustering should be a good approach.**","0bb4df55":"# Customer Profiling","1fd6c9b8":"* We can go ahead with either 3 or 4 clusters. Let's compare both.","8a9388c7":"**Campaigns are not working well to convert leads into customers.**"}}