{"cell_type":{"a83b5b55":"code","fd30d3b0":"code","dccb5c37":"code","913eb974":"code","b62370bd":"code","26d996ce":"code","6a3bc9bc":"code","98cc3d32":"code","18f271f3":"code","cd841e43":"code","70cc3dd4":"code","c1b9af66":"code","4321902b":"code","b70b7827":"code","fcf94ec7":"code","415feb27":"code","85d4714e":"code","e4c82fbe":"code","bb0d457b":"markdown"},"source":{"a83b5b55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd30d3b0":"X_train =pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_train.csv')\ny_train = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/y_train.csv')\nX_test = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_test.csv')\n\nX_train.shape,X_test.shape","dccb5c37":"X_train.head()","913eb974":"y_train.head()","b62370bd":"y_train['Reached.on.Time_Y.N'].value_counts()","26d996ce":"#\uacb0\uce21\uce58 \ud655\uc778\nX_train.isnull().sum()","6a3bc9bc":"X_train.info()","98cc3d32":"X_col=X_train.select_dtypes(include=object).columns\n\nfor col in X_col:\n    print('----------')\n    print(X_train[col].value_counts())\n    \n# \uc774\uc0c1\ud55c\ub370\uc774\ud130 \ud655\uc778: Customer_care_calls $7","18f271f3":"# Customer_care_calls \uc804\ucc98\ub9ac\nX_train['Customer_care_calls']=X_train['Customer_care_calls'].map(lambda x: x.replace('$',''))\nprint(X_train['Customer_care_calls'].value_counts())\nX_test['Customer_care_calls']=X_test['Customer_care_calls'].map(lambda x: x.replace('$',''))\nprint(X_test['Customer_care_calls'].value_counts())","cd841e43":"#\ub370\uc774\ud130\ubd84\ub9ac\nX=X_train.drop(['ID'], axis=1)\ny=y_train.drop(['ID'], axis=1)\ntest=X_test.drop(['ID'], axis=1)\nID=X_test['ID']\nX.shape, y.shape, test.shape","70cc3dd4":"#\ub370\uc774\ud130\uc804\ucc98\ub9ac\nX=pd.get_dummies(X)\ntest=pd.get_dummies(test)\n#pd.DataFrame(X)","c1b9af66":"#\uac80\uc99d\uc14b \ubd84\ub9ac\nfrom sklearn.model_selection import train_test_split\nX_train_set, X_val, y_train_set, y_val =train_test_split(X, y, stratify=y, random_state=42)","4321902b":"import warnings\n\n#\ubaa8\ub378\uc801\ud569(RF)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nrf=RandomForestClassifier(n_estimators=100, max_depth=2, random_state=42)\nrf.fit(X_train_set, y_train_set)\ny_pred_prob=rf.predict_proba(X_val)[:,1]\n\nprint(\"roc_auc_score:\", roc_auc_score(y_val,y_pred_prob))\n#roc_auc_score: 0.7466211213312469\n#(n_estimators=200, max_depth=4, random_state=42) roc_auc_score: 0.7563085378420671\n#(n_estimators=200, max_depth=2, random_state=42) roc_auc_score: 0.7572230067554674\n#(n_estimators=100, max_depth=2, random_state=42) roc_auc_score: 0.7612243807488264","b70b7827":"#\ubaa8\ub378\uc801\ud569(XGB)\nfrom xgboost import XGBClassifier\nxgb=XGBClassifier(random_state=42)\nxgb.fit(X_train_set, y_train_set)\ny_pred_prob_xgb=xgb.predict_proba(X_val)[:,1]\n\nprint(\"roc_auc_score:\", roc_auc_score(y_val,y_pred_prob_xgb))\n#roc_auc_score: 0.7508858440517538","fcf94ec7":"#\uc81c\ucd9c\ntest_pred_proba=rf.predict_proba(test)[:,1]\ntest_pred_proba","415feb27":"# pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)\nsubmission=pd.DataFrame({'ID': ID, 'Reached.on.Time_Y.N':test_pred_proba})\nsubmission","85d4714e":"submission.to_csv('submission.csv', index=False)","e4c82fbe":"\ndef check_test_label(submission):\n    testlabel = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv')\n    Truelabel = testlabel['Reached.on.Time_Y.N']\n    guessLabel = submission['Reached.on.Time_Y.N']\n    \n    print('Test AUC score : ',roc_auc_score(Truelabel,guessLabel))\n\ncheck_test_label(submission)\n#Test AUC score :  0.7365583600613583","bb0d457b":"# check test label AUC score"}}