{"cell_type":{"a3f55464":"code","064451da":"code","5cca3402":"code","d6889cd7":"code","51ba2fd4":"code","138f0fe4":"code","70559c49":"code","2eb80a88":"code","c50541ca":"code","8c85ccda":"code","4efe1859":"code","4b656a52":"code","c6b77786":"code","a685f8c7":"code","a8d5cc2d":"code","82333fc1":"code","0310e33e":"code","470afc02":"code","9383a147":"code","15c70f8a":"code","bfdac82a":"code","3dbb5dc3":"code","96b13334":"code","1759032c":"code","7977ab58":"code","7bb9dff2":"code","2bce83b0":"code","4bea0155":"code","78ae53d4":"code","ec0827a5":"code","a0f7453f":"code","1b3c0ad9":"code","eeafb74e":"code","89acc256":"code","5c081bf8":"code","44bfeddb":"code","5333b5ee":"code","8440509b":"code","2230eae5":"code","38d358ff":"code","f720e1fe":"code","e123d00a":"code","daf69a10":"code","ec0fd381":"code","f1165696":"code","25c1d906":"markdown","05c9c27a":"markdown","c269e234":"markdown","c6e66f5b":"markdown","9ef765d0":"markdown","e508a79d":"markdown"},"source":{"a3f55464":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","064451da":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","5cca3402":"train.head()","d6889cd7":"test.head()","51ba2fd4":"train","138f0fe4":"test","70559c49":"train.isnull().sum()","2eb80a88":"test.isnull().sum()","c50541ca":"sns.heatmap(train.isnull(), yticklabels=False,  cmap='viridis')","8c85ccda":"sns.set_style('whitegrid')","4efe1859":"sns.countplot(x='Survived',hue='Sex', data=train)","4b656a52":"sns.countplot(x='Survived',hue='Pclass', data=train)","c6b77786":"sns.distplot(train['Age'].dropna(),kde=False, bins = 30)","a685f8c7":"sns.distplot(train['Age'],kde=False, bins = 30)","a8d5cc2d":"train.info()","82333fc1":"sns.countplot(x=\"SibSp\", data=train)","0310e33e":"train['Fare'].hist(bins=40, figsize=(10,4))","470afc02":"import cufflinks as cf","9383a147":"cf.go_offline()","15c70f8a":"train[\"Fare\"].iplot(kind='hist', bins=50)","bfdac82a":"# lets fill age column\nplt.figure(figsize=(10,7))\nsns.boxplot(x=\"Pclass\", y = \"Age\", data=train)","3dbb5dc3":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        elif Pclass ==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age","96b13334":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","1759032c":"train['Age'].isnull().sum()","7977ab58":"sns.heatmap(train.isnull(), yticklabels=False,  cmap='viridis')","7bb9dff2":"train = train.drop('Cabin',axis=1)","2bce83b0":"train.isnull().sum()","4bea0155":"train[\"Embarked\"] = train[\"Embarked\"].fillna('S')","78ae53d4":"train.isnull().sum()","ec0827a5":"train = train.drop( columns = [ 'Name', 'Ticket'], axis = 1)","a0f7453f":"#sex = pd.get_dummies(train['Sex'])\n#embark = pd.get_dummies(train['Embarked'])\n#train = pd.concat([train, sex, embark],axis = 1)","1b3c0ad9":"train = pd.get_dummies(train)\ntrain","eeafb74e":"train.tail() # lets make passengerid as index","89acc256":"a = train.copy()","5c081bf8":"train = train.set_index(train[\"PassengerId\"]).drop(\"PassengerId\",axis=1)\ntrain","44bfeddb":"from sklearn.model_selection import train_test_split\nX = train.drop(['Survived'], axis = 1)\ny = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression(max_iter = 1000)\nlogmodel.fit(X_train, y_train)\ny_pred = logmodel.predict(X_test)\n#y_pred\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","5333b5ee":"# from sklearn.model_selection import train_test_split,GridSearchCV\n# X = train.drop(['Survived'], axis = 1)\n# y = train['Survived']\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\n# rf=RandomForestClassifier()\n# rf_params = {'n_estimators':[50, 100, 300],'max_depth':[3,5,7],'max_features': [2,4,6,8],'min_samples_split': [2,4,6]}\n# rf_cv_model = GridSearchCV(rf, rf_params, cv = 5, n_jobs = -1, verbose = 2).fit(X_train, y_train)\n# print(rf_cv_model.best_params_)","8440509b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nX = train.drop(['Survived'], axis = 1)\ny = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)\n\nrf=RandomForestClassifier()\nrf_params = {'n_estimators':[1000],'max_depth':[9],'max_features': [3],'min_samples_split': [4]}\n\nrf_cv_model2 = GridSearchCV(rf, rf_params, cv = 5, n_jobs = -1, verbose = 2).fit(X_train, y_train)\ny_pred = rf_cv_model2.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","2230eae5":"X = train.drop(['Survived'], axis = 1)\ny = train['Survived']\nmodel_out=RandomForestClassifier(n_estimators=1000,max_depth=9,max_features=3,min_samples_split=4).fit(X, y)","38d358ff":"model_out","f720e1fe":"test","e123d00a":"#test = pd.read_csv('test.csv')\ntest['Age'] = test[['Age','Pclass']].apply(impute_age,axis=1)\ntest = test.drop(columns = ['Cabin', 'Name', 'Ticket'],axis=1)\ntest[\"Embarked\"] = test[\"Embarked\"].fillna('S')\ntest[\"Fare\"] = test[\"Fare\"].fillna(0)\ntest = test.set_index(test[\"PassengerId\"]).drop(\"PassengerId\",axis=1)\ntest = pd.get_dummies(test)","daf69a10":"test_predictions = model_out.predict(test)\ntest_predictions","ec0fd381":"new_df = pd.DataFrame(test.index)\nnew_df['Survived'] = test_predictions\nnew_df","f1165696":"new_df.to_csv('gender_submission2.csv',index=False)","25c1d906":"Thanks.","05c9c27a":"Thanks.","c269e234":"**Model to out**","c6e66f5b":"# ML","9ef765d0":"# to Kaggle","e508a79d":"# **Categorical to numerical**"}}