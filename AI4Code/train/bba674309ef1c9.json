{"cell_type":{"b0338210":"code","e547a910":"code","14410bdc":"code","c4080593":"code","a92ac0c7":"code","8545c366":"code","f2bf3248":"code","1c543922":"code","bdb15bad":"code","a0a95345":"code","07979a5d":"code","9ba86009":"code","e999bd0a":"code","c9ef912b":"code","8b2caa61":"code","1c04877d":"code","8234c19a":"code","c8872667":"code","475cbfad":"code","cc692f03":"code","4e6bd6c7":"code","5b6011c6":"code","3795233d":"code","86cb4c61":"code","62d94440":"code","a2b37973":"code","85e00f8d":"code","5a785686":"code","d3b90a57":"code","a7a67d9e":"code","0f588a79":"code","faabf221":"code","b1500575":"code","ad7236df":"code","74b81e24":"code","9c149499":"code","a34a18b4":"code","189aba8f":"code","ca87131a":"code","f1341677":"code","6edbd9cf":"code","e72e7d8c":"code","4f799476":"code","3879f439":"code","7750436e":"code","a95a8d67":"code","59aa9856":"code","3aba4dc7":"code","3712556d":"code","aa9c9d4b":"code","7e87625f":"code","cfe5b45c":"code","7ca553e7":"code","04a31eaa":"code","af119f8e":"code","cdf2b1b7":"code","27e971da":"code","1a2087d8":"code","be965a88":"code","acb11f55":"code","170ac229":"code","4d688b46":"code","f8102c7a":"code","1966a1eb":"code","2f643539":"code","212629f4":"code","20cb5ff7":"code","634f7024":"code","cb3461ae":"code","31a07ee2":"code","7e5beb01":"code","e5c67ad1":"code","9c7eff9a":"code","be101010":"code","544b6047":"code","8c10bfb9":"code","f0e06a86":"markdown","91bb63db":"markdown","7181d394":"markdown","72020f5d":"markdown","2898c2e5":"markdown","b1e06809":"markdown","84cb9d3b":"markdown","9f7eb024":"markdown","0c34fea4":"markdown","d860b233":"markdown","769e7be6":"markdown","f5352c4b":"markdown","4554433b":"markdown","eb2bae11":"markdown","651e6996":"markdown","2fe614e9":"markdown","c55834a6":"markdown"},"source":{"b0338210":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e547a910":"import warnings\nimport numpy as np\nimport pandas as pd\n#import seaborn as sns\nimport matplotlib.pyplot as plt\nimport itertools\nimport math\nfrom sklearn import linear_model\n\nimport copy\n\nimport datetime\nfrom dateutil.parser import parse","14410bdc":"#read file & check the upload\ndf = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n#df.tail(40)","c4080593":"#read file & check the upload US Only\ndf_us = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed_US.csv')\n#df_us.head(50)","a92ac0c7":"cols = [0,1,2,3,4,5,6,7,8,9,10]\ndf_nyc = df_us.loc[df_us['Admin2'] =='New York'].drop(df_us.columns[cols],axis=1)\ndf_la = df_us.loc[df_us['Admin2'] =='Los Angeles'].drop(df_us.columns[cols],axis=1)\ndf_houston = df_us.loc[(df_us['Admin2'] =='Harris') & (df_us['Province_State']=='Texas')].drop(df_us.columns[cols],axis=1)\ndf_chicago = df_us.loc[(df_us['Admin2'] =='Cook') & (df_us['Province_State']=='Illinois')].drop(df_us.columns[cols],axis=1)\ndf_phoenix = df_us.loc[df_us['Admin2'] =='Maricopa'].drop(df_us.columns[cols],axis=1) \ndf_philly = df_us.loc[df_us['Admin2'] =='Philadelphia'].drop(df_us.columns[cols],axis=1)\ndf_sanant = df_us.loc[(df_us['Admin2'] =='Bexar') & (df_us['Province_State']=='Texas')].drop(df_us.columns[cols],axis=1)\ndf_dallas = df_us.loc[(df_us['Admin2'] =='Dallas') & (df_us['Province_State']=='Texas')].drop(df_us.columns[cols],axis=1)\ndf_sanjose = df_us.loc[(df_us['Admin2'] =='Santa Clara') & (df_us['Province_State']=='California')].drop(df_us.columns[cols],axis=1)\ndf_sandiego = df_us.loc[(df_us['Admin2'] =='San Diego') & (df_us['Province_State']=='California')].drop(df_us.columns[cols],axis=1)","8545c366":"fig, ax = plt.subplots(figsize=(20, 10)) \nax.plot(list(df_la),\n        list(df_la.values.flatten()),\n          color='purple')\n\nax.plot(list(df_la),\n        list(df_chicago.values.flatten()),\n          color='red')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"ConfirmedCases\",\n       title=\"LA & Chicago\")\nplt.xticks(rotation=90)\n#plt.legend(loc='upper left')\nplt.show()","f2bf3248":"fig, ax = plt.subplots(figsize=(20, 10)) \n\nax.plot(list(df_la),\n        list(df_houston.values.flatten()),\n          color='orange')\n\nax.plot(list(df_la),\n        list(df_phoenix.values.flatten()),\n          color='blue')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"ConfirmedCases\",\n       title=\"Houston & Phoenix\")\nplt.xticks(rotation=90)\n#plt.legend(loc='upper left')\nplt.show()","1c543922":"NYC_norm = [item\/\/26 for item in list(df_nyc.values.flatten())]\nLA_norm = [round(item\/7.5) for item in list(df_la.values.flatten())]\nHouston_norm = [round(item\/3.6) for item in list(df_houston.values.flatten())]\nChicago_norm = [item\/\/12 for item in list(df_chicago.values.flatten())]\nPhoenix_norm = [round(item\/1.55) for item in list(df_phoenix.values.flatten())]\nPhilly_norm = [round(item\/4.9) for item in list(df_philly.values.flatten())]\nSanant_norm = [round(item\/3.2) for item in list(df_sanant.values.flatten())]\nDallas_norm = [round(item\/3.65) for item in list(df_dallas.values.flatten())]\nSanjose_norm = [round(item\/1.3) for item in list(df_sanjose.values.flatten())]\nSandiego_norm = [round(item\/0.8) for item in list(df_sandiego.values.flatten())]","bdb15bad":"fig, ax = plt.subplots(figsize=(20, 8)) \nax.plot(list(df_la),\n        LA_norm, label = 'LA',\n          color='purple')\n\nax.plot(list(df_la),\n        Chicago_norm, label = 'Chicago',\n          color='red')\n\nax.plot(list(df_la),\n        NYC_norm, label = 'NYC',\n          color='blue')\n\nax.plot(list(df_la),\n        Houston_norm, label = 'Houston',\n          color='orange')\n\nax.plot(list(df_la),\n        Phoenix_norm, label = 'Phoenix',\n          color='yellow')\n\nax.plot(list(df_la),\n        Philly_norm, label = 'Philadelphia',\n          color='tan')\n\nax.plot(list(df_la),\n        Sanant_norm, label = 'San Antonio',\n          color='violet')\n\nax.plot(list(df_la),\n       Dallas_norm, label = 'Dallas',\n          color='darkcyan')\n\nax.plot(list(df_la),\n       Sanjose_norm, label = 'San Jose',\n          color='tomato')\n\nax.plot(list(df_la),\n       Sandiego_norm, label = 'San Diego',\n          color='darkgreen')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"ConfirmedCases\",\n       title=\"10 Largest US Metro Areas Confirmed Cases Normalized by Population Density\")\nplt.xticks(rotation=90)\nplt.legend(loc='upper left')\nplt.show()","a0a95345":"fig, ax = plt.subplots(figsize=(20, 10)) \n# Add x-axis and y-axis\n\nax.plot(df.loc[df['Province\/State'] == 'Hubei', 'ObservationDate'],\n          df.loc[df['Province\/State'] == 'Hubei', 'Confirmed'],\n          color='purple')\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"ConfirmedCases\",\n       title=\"Hubei Only\")\nplt.xticks(rotation=90)\n#plt.legend(loc='upper left')\nplt.show()","07979a5d":"fig, ax = plt.subplots(figsize=(20, 10)) \n# Add x-axis and y-axis\n\nax.plot(df.loc[df['Province\/State'] == 'District of Columbia', 'ObservationDate'],\n          df.loc[df['Province\/State'] == 'District of Columbia', 'Confirmed'],label = 'District of Columbia - Confirmed',\n          color='green')\n\nax.plot(df.loc[df['Province\/State'] == 'District of Columbia', 'ObservationDate'],\n          df.loc[df['Province\/State'] == 'District of Columbia', 'Deaths'],label = 'District of Columbia - Deaths',\n          color='black')\n\n\n# Set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"ConfirmedCases & Deaths\",\n       title=\"DC\")\nplt.xticks(rotation=90)\nplt.legend(loc='upper left')\nplt.show()","9ba86009":"frame_Italy = {'ObservationDate': df.loc[df['Country\/Region'] == 'Italy', 'ObservationDate'],\n         'Confirmed':df.loc[df['Country\/Region'] == 'Italy', 'Confirmed'],\n         'Deaths':df.loc[df['Country\/Region'] == 'Italy', 'Deaths']}\nframe_Italy = pd.DataFrame(frame_Italy)\nframe_Italy_grouped_confirmed = frame_Italy.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_Italy_grouped_death = frame_Italy.groupby(['ObservationDate'])['Deaths'].sum()","e999bd0a":"plot_Italy = []\nrate_Italy = frame_Italy_grouped_confirmed.values\nfor item in zip(rate_Italy[::],rate_Italy[1:]):\n    plot_Italy.append((item[1]-item[0]))\nplt.plot(plot_Italy)\nplt.title('Infection Rate')","c9ef912b":"plot_Italy = []\nrate_Italy = frame_Italy_grouped_death.values\nfor item in zip(rate_Italy[::],rate_Italy[1:]):\n    plot_Italy.append((item[1]-item[0]))\nplt.plot(plot_Italy)\nplt.title('Death Rate')","8b2caa61":"frame_NY = {'ObservationDate': df.loc[df['Province\/State'] == 'New York', 'ObservationDate'],\n         'Confirmed':df.loc[df['Province\/State'] == 'New York', 'Confirmed'],\n         'Deaths':df.loc[df['Province\/State'] == 'New York', 'Deaths']}\nframe_NY = pd.DataFrame(frame_NY)\nframe_NY_grouped_confirmed = frame_NY.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_NY_grouped_death = frame_NY.groupby(['ObservationDate'])['Deaths'].sum()","1c04877d":"plot_NY = []\nplot_NY_conf = []\nrate_NY = frame_NY_grouped_confirmed.values\n#print(rate_NY)\nplot_NY = [round(sum(rate_NY[i:i+3]\/3)) for i in range(len(rate_NY)-3)]\nx_pos = np.arange(len(plot_NY))\nplt.title('Infection Rate-NY - 3 days average')\nplt.bar(x_pos,plot_NY, align='center')","8234c19a":"plot_NY = []\nplot_NY_conf = []\nrate_NY = frame_NY_grouped_confirmed.values\nfor item in zip(rate_NY[::],rate_NY[1:]):\n    plot_NY.append((item[1]-item[0]))   \nprint(plot_NY)\nplt.plot(list(frame_NY['ObservationDate'])[31:],plot_NY[30:])\nplt.xticks(rotation='vertical')\nplt.title('Infection Rate-NY-Daily')","c8872667":"plot_NY = []\nrate_NY = frame_NY_grouped_death.values\nrate_NY_filtered = list(filter(lambda x: x != 0, rate_NY))        \nfor item in zip(rate_NY_filtered[::],rate_NY_filtered[1:]):\n    plot_NY.append((item[1]-item[0]))\nplt.plot(plot_NY)\nplt.title('Death Rate')","475cbfad":"plot_NY = []\nrate_NY = frame_NY_grouped_death.values\nrate_NY_filtered = list(filter(lambda x: x != 0, rate_NY))        \nfor item in zip(rate_NY_filtered[::],rate_NY_filtered[1:]):\n    plot_NY.append((item[1]-item[0])\/item[0])\nplt.plot(plot_NY)\nplt.title('Normalized Death Rate')","cc692f03":"frame_Hubei = {'ObservationDate': df.loc[df['Province\/State'] == 'Hubei', 'ObservationDate'],\n         'Confirmed':df.loc[df['Province\/State'] == 'Hubei', 'Confirmed'],\n         'Deaths':df.loc[df['Province\/State'] == 'Hubei', 'Deaths']}\nframe_Hubei = pd.DataFrame(frame_Hubei)\nframe_Hubei_grouped_confirmed = frame_Hubei.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_Hubei_grouped_death = frame_Hubei.groupby(['ObservationDate'])['Deaths'].sum()","4e6bd6c7":"plot_Hubei = []\nrate_Hubei = frame_Hubei_grouped_confirmed.values\nfor item in zip(rate_Hubei[::],rate_Hubei[1:]):\n    plot_Hubei.append((item[1]-item[0])) \nplt.plot(plot_Hubei)\nplt.title('Infection Rate-Hubei')","5b6011c6":"plot_Hubei = []\nrate_Hubei = frame_Hubei_grouped_confirmed.values\nfor item in zip(rate_Hubei[::],rate_Hubei[1:]):\n    plot_Hubei.append((item[1]-item[0])\/item[0])   \nplot_Hubei_conf = copy.deepcopy(plot_Hubei)\nprint(plot_Hubei[:40])\ncount = 0\nfor item in reversed(plot_Hubei[:40]):\n    if item>0.1:\n        break\n    count += 1\nprint(count)\nplt.plot(plot_Hubei)\nplt.title('Normalized Infection Rate')","3795233d":"plot_Hubei = []\nrate_Hubei = frame_Hubei_grouped_death.values\nfor item in zip(rate_Hubei[::],rate_Hubei[1:]):\n    plot_Hubei.append((item[1]-item[0]))   \nplt.plot(plot_Hubei)\nplt.title('Death Rate')","86cb4c61":"plot_Hubei = []\nrate_Hubei = frame_Hubei_grouped_death.values\nfor item in zip(rate_Hubei[::],rate_Hubei[1:]):\n    plot_Hubei.append((item[1]-item[0])\/item[0])   \nplt.plot(plot_Hubei)\nplt.title('Normalized Death Rate')","62d94440":"frame_DC = {'ObservationDate': df.loc[df['Province\/State'] == 'District of Columbia', 'ObservationDate'],\n         'Confirmed':df.loc[df['Province\/State'] == 'District of Columbia', 'Confirmed'],\n         'Deaths':df.loc[df['Province\/State'] == 'District of Columbia', 'Deaths']}\nframe_DC = pd.DataFrame(frame_DC)\nframe_DC_grouped_confirmed = frame_DC.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_DC_grouped_death = frame_DC.groupby(['ObservationDate'])['Deaths'].sum()","a2b37973":"plot_DC = []\nrate_DC = frame_DC_grouped_confirmed.values\nfor item in zip(rate_DC[::],rate_DC[1:]):\n    plot_DC.append((item[1]-item[0]))   \nplot_DC_conf = copy.deepcopy(plot_DC)\nplt.plot(plot_DC)\nplt.title('Infection Rate')","85e00f8d":"frame_Russia = {'ObservationDate': df.loc[df['Country\/Region'] == 'Russia', 'ObservationDate'],\n         'Confirmed':df.loc[df['Country\/Region'] == 'Russia', 'Confirmed'],\n         'Deaths':df.loc[df['Country\/Region'] == 'Russia', 'Deaths']}\nframe_Russia = pd.DataFrame(frame_Russia)\nframe_Russia_grouped_confirmed = frame_Russia.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_Russia_grouped_death = frame_Russia.groupby(['ObservationDate'])['Deaths'].sum()\n#frame_Russia.tail(5)","5a785686":"plot_Russia = []\nframe_Russia_grouped = frame_Russia.groupby(['ObservationDate'])['Confirmed'].sum()\nrate_Russia = frame_Russia_grouped.values\nrate_Russia_filtered = list(filter(lambda x: x != 0, rate_Russia))        \n#print(rate_Russia_filtered)\nfor item in zip(rate_Russia_filtered[::],rate_Russia_filtered[1:]):\n    plot_Russia.append((item[1]-item[0]))\nplt.plot(plot_Russia)\nplt.title('Infection Rate')","d3b90a57":"plot_Russia = []\nframe_Russia_grouped = frame_Russia.groupby(['ObservationDate'])['Confirmed'].sum()\nrate_Russia = frame_Russia_grouped.values\nrate_Russia_filtered = list(filter(lambda x: x != 0, rate_Russia))        \n#print(rate_Russia_filtered)\nfor item in zip(rate_Russia_filtered[::],rate_Russia_filtered[1:]):\n    tmp = (item[1]-item[0])\/item[0]\n    if tmp >=0:\n        plot_Russia.append((item[1]-item[0])\/item[0])\n    else:\n        plot_Russia.append(0)\nplot_Russia_conf = copy.deepcopy(plot_Russia)\nplt.plot(plot_Russia)\nplt.title('Normalized Infection Rate')","a7a67d9e":"frame_Spain = {'ObservationDate': df.loc[df['Country\/Region'] == 'Spain', 'ObservationDate'],\n         'Confirmed':df.loc[df['Country\/Region'] == 'Spain', 'Confirmed'],\n         'Deaths':df.loc[df['Country\/Region'] == 'Spain', 'Deaths']}\nframe_Spain = pd.DataFrame(frame_Spain)\nframe_Spain_grouped_confirmed = frame_Spain.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_Spain_grouped_death = frame_Spain.groupby(['ObservationDate'])['Deaths'].sum()","0f588a79":"rate_Spain = frame_Spain_grouped_confirmed.values\nrate_Spain_filtered = list(filter(lambda x: x != 0, rate_Spain)) \nprint(rate_Spain_filtered)","faabf221":"plot_Spain = []\n#print(list(zip(rate_Spain_filtered[::],rate_Spain_filtered[1:])))\nfor item in zip(rate_Spain_filtered[::],rate_Spain_filtered[1:]):\n    plot_Spain.append((item[1]-item[0]))\nplot_Spain_conf = copy.deepcopy(plot_Spain)\nprint(plot_Spain)\ncount = 0\nfor item in reversed(plot_Spain):\n    if item>0.1:\n        break\n    count += 1\nprint(count)\nplt.plot(plot_Spain)\nplt.title('Infection Rate')","b1500575":"rate_Spain_d = frame_Spain_grouped_death.values\nrate_Spain_filtered_d = list(filter(lambda x: x != 0, rate_Spain_d)) \n#print(rate_Spain_filtered_d)","ad7236df":"plot_Spain_d = []\n#print(list(zip(rate_Spain_filtered_d[::],rate_Spain_filtered_d[1:])))\nfor item in zip(rate_Spain_filtered_d[::],rate_Spain_filtered_d[1:]):\n    plot_Spain_d.append((item[1]-item[0])\/item[0])\n#print(plot_Spain_d)\nplt.plot(plot_Spain_d)\nplt.title('Normalised Death Rate')","74b81e24":"frame_France = {'ObservationDate': df.loc[df['Country\/Region'] == 'France', 'ObservationDate'],\n         'Confirmed':df.loc[df['Country\/Region'] == 'France', 'Confirmed'],\n         'Deaths':df.loc[df['Country\/Region'] == 'France', 'Deaths']}\nframe_France = pd.DataFrame(frame_France)\nframe_France_grouped_confirmed = frame_France.groupby(['ObservationDate'])['Confirmed'].sum()\nframe_France_grouped_death = frame_France.groupby(['ObservationDate'])['Deaths'].sum()","9c149499":"rate_France = frame_France_grouped_confirmed.values\nrate_France_filtered = list(filter(lambda x: x != 0, rate_France)) \nprint(rate_France_filtered)","a34a18b4":"Hubei_conf = df.loc[df['Province\/State'] == 'Hubei', 'Confirmed']\nhubei_data = list(Hubei_conf.values)\nprint(len(hubei_data))","189aba8f":"temp = []\nj=0\nfor i in range(0,len(hubei_data),10):\n    if i > 0:\n        tmp = hubei_data[j:i]\n        temp.append(tmp)\n        j = i\ndf_regr = pd.DataFrame(temp, columns = ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7','x8','x9','y'])\ndf_regr","ca87131a":"x=pd.DataFrame(df_regr.iloc[:,:-1]) #features\ny=pd.DataFrame(df_regr.iloc[:,-1]) # projected variable","f1341677":"#fitting linear regression\nfrom sklearn import linear_model\npredictor_hb = linear_model.LinearRegression()","6edbd9cf":"Predictor_Hubei=predictor_hb.fit(x,y)","e72e7d8c":"v=pd.DataFrame(Predictor_Hubei.coef_,index = ['Co-efficient']).transpose()\nw = pd.DataFrame(x.columns, columns = ['Attribute'])","4f799476":"coeff_df = pd.concat([v,w],axis=1,join='inner'); coeff_df","3879f439":"NY_conf = df.loc[df['Province\/State'] == 'New York', 'Confirmed']\nNY_data = list(NY_conf.values);\nprint(len(NY_data))","7750436e":"temp = []\nj=0\nfor i in range(len(NY_data)-9):\n    tmp = NY_data[i:i+10]\n    temp.append(tmp)\n\ndf_regr_NY = pd.DataFrame(temp, columns = ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7','x8','x9','y'])\ndf_regr_NY","a95a8d67":"dim = df_regr_NY.shape[0]\nx_dates_ny = list(df.loc[df['Province\/State'] == 'New York', 'ObservationDate'])[-dim:]","59aa9856":"x_NY = pd.DataFrame(df_regr_NY.iloc[:,:-1]) #features\ny_NY = pd.DataFrame(df_regr_NY.iloc[:,-1]) # ground truth\ny_predicted_hubei_NY = Predictor_Hubei.predict(x_NY).flatten()","3aba4dc7":"#plotting\nn_points = df_regr_NY.shape[0]\nx = np.arange(n_points)\ny_NY_ground_truth = y_NY.values\nplt.plot(x_dates_ny,y_NY_ground_truth, label = 'Ground Truth')\nplt.plot(x_dates_ny,y_predicted_hubei_NY, label = 'Predicted - Hubei Model')\nax = plt.axes()\nax.xaxis.set_major_locator(plt.MaxNLocator(12))\nplt.xticks(rotation='vertical')\nplt.legend(loc='upper left')\nplt.title(' NY True Confirmed Cases vs Predicted ')\nplt.show()","3712556d":"pred = []\narr = [139875.0,151061.0,161779.0,172348.0,181026.0,189033.0,195749.0,203020.0,214454.0]\nfor i in range(30):\n    x_new = list(Predictor_Hubei.predict(np.array([arr])).flatten())\n    #print(x_new)\n    pred.extend(x_new)\n    arr.pop(0)\n    arr.extend(x_new)\npred = [int(round(item)) for item in pred]\nprint(pred)","aa9c9d4b":"#Forward Projections\nhist_pred = [146807,152053, 157023, 161871, 166038, 169730, 173578, 177232, 180340, 183089, 185792, 188104, 189951, 191632, 193226, 194516, 195567, 196557, 197444, 198089, 198595, 199045, 199360, 199503, 199567, 199576, 199470, 199257, 199003, 198694]\nn_points_SP = df_regr_NY.shape[0]\nx = list(np.arange(n_points_SP))\nx_pred_h = list(np.arange(n_points_SP-13+30))\nprint(len(x_pred_h))\n#x_pred_c = list(np.arange(n_points_SP-13+30))\ny_pred_c = list(y_predicted_hubei_NY)\ny_pred_h = copy.deepcopy(y_pred_c[:-13])\nprint(len(y_pred_h))\n#y_pred_c.extend(pred)\ny_pred_h.extend(hist_pred)\ny_NY_ground_truth = y_NY.values\nplt.plot(x,y_NY_ground_truth, label = 'Ground Truth', linewidth=4.0)\n#plt.plot(x_pred_c,y_pred_c, label = 'Predicted as of 04\/09')\nplt.plot(x_pred_h,y_pred_h, label = 'Predicted as of 04\/09)')\nplt.legend(loc='upper left')\nplt.title(' NY States True Confirmed Cases vs Predicted - Hubei Based Model ')\nplt.show()","7e87625f":"Italy_conf = df.loc[df['Country\/Region'] == 'Italy', 'Confirmed']\nitaly_data = list(Italy_conf.values)\nprint(italy_data[-5:])\nitaly_data.extend([143000,143000])#data padding experiment\nprint(len(italy_data))","cfe5b45c":"temp = []\nj=0\nfor i in range(0,len(italy_data),10):\n    if i > 0:\n        tmp = italy_data[j:i]\n        temp.append(tmp)\n        j = i\ndf_regr_italy = pd.DataFrame(temp, columns = ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7','x8','x9','y'])\ndf_regr_italy.head(10)","7ca553e7":"x_italy=pd.DataFrame(df_regr_italy.iloc[:,:-1]) #features\ny_italy=pd.DataFrame(df_regr_italy.iloc[:,-1]) # projected variable","04a31eaa":"#fitting linear regression\npredictor_it = linear_model.LinearRegression()","af119f8e":"Predictor_Italy = predictor_it.fit(x_italy,y_italy)","cdf2b1b7":"v_italy=pd.DataFrame(Predictor_Italy.coef_,index = ['Co-efficient']).transpose()\nw_italy = pd.DataFrame(x_italy.columns, columns = ['Attribute'])","27e971da":"coeff_df_italy = pd.concat([v_italy,w_italy],axis=1,join='inner'); coeff_df_italy","1a2087d8":"NY_conf = df.loc[df['Province\/State'] == 'New York', 'Confirmed']\nNY_data = list(NY_conf.values);\nprint(NY_data[-3:])\nprint(len(NY_data))","be965a88":"temp = []\nj=0\nfor i in range(len(NY_data)-9):\n    tmp = NY_data[i:i+10]\n    temp.append(tmp)\n\ndf_regr_NY = pd.DataFrame(temp, columns = ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7','x8','x9','y'])\ndf_regr_NY","acb11f55":"dim = df_regr_NY.shape[0]\nx_dates_ny = list(df.loc[df['Province\/State'] == 'New York', 'ObservationDate'])[-dim:]","170ac229":"x_NY = pd.DataFrame(df_regr_NY.iloc[:,:-1]) #features\ny_NY = pd.DataFrame(df_regr_NY.iloc[:,-1]) # ground truth\ny_predicted_NY = Predictor_Italy.predict(x_NY).flatten()","4d688b46":"#plotting\nn_points = df_regr_NY.shape[0]\nx = np.arange(n_points)\ny_NY_ground_truth = y_NY.values\nplt.plot(x_dates_ny,y_NY_ground_truth, label = 'Ground Truth')\nplt.plot(x_dates_ny,y_predicted_NY, label = 'Predicted - Italian Model')\nax = plt.axes()\nax.xaxis.set_major_locator(plt.MaxNLocator(12))\nplt.xticks(rotation='vertical')\nplt.legend(loc='upper left')\nplt.title(' NY True Confirmed Cases vs Predicted ')\nplt.show()","f8102c7a":"pred = []\narr = [75833.0,83948.0,92506.0,102987.0,113833.0,123160.0,131815.0,139875.0,151061.0]\nfor i in range(10):\n    x_new = list(Predictor_Italy.predict(np.array([arr])).flatten())\n    #print(x_new)\n    pred.extend(x_new)\n    arr.pop(0)\n    arr.extend(x_new)\npred = [int(round(item)) for item in pred]\nprint(pred)","1966a1eb":"#Distribution on the normalized daily confirmed cases rate for NY State\nplot_NY_conf = [item for item in plot_NY_conf if item<1.5 and item>0]\nplt.title('Normalized Daily Confirmed Cases Growth Distribtuion - NY State ')\nplt.hist(plot_NY_conf, bins=20)","2f643539":"#Distribution on the normalized daily confirmed cases rate for Spain\nplot_Spain_conf = [item for item in plot_Spain_conf if item<2.5 and item>0]\nplt.title('Normalized Daily Confirmed Cases Growth Distribtuion - Spain ')\nplt.hist(plot_Spain_conf, bins=20)","212629f4":"#Distribution on the normalized daily confirmed cases rate for Hubei\nplot_Hubei_conf = [item for item in plot_Hubei_conf if item<1.5 and item > 0]\nplt.hist(plot_Hubei_conf, bins=20)","20cb5ff7":"#Distribution on the normalized daily confirmed cases rate for Hubei\nplot_DC_conf = [item for item in plot_DC_conf if item<1.5 and item > 0]\nplt.hist(plot_DC_conf, bins=20)","634f7024":"#Distribution on the normalized daily confirmed cases rate for Russia\nplot_Russia_conf = [item for item in plot_Russia_conf if item<1.5 and item>0]\nplt.hist(plot_Russia_conf, bins=20)","cb3461ae":"arr = [67801., 67801., 67801., 67801., 67801., 67801., 67801., 67802., 67802.]\nx_new = list(Predictor_Hubei.predict(np.array([arr])).flatten())\n#print(x_new)","31a07ee2":"arr = [67801., 67801., 67801., 67801., 67801., 67801., 67801., 67802., 67802.]\nx_new = list(Predictor_Italy.predict(np.array([arr])).flatten())\n#print(x_new)","7e5beb01":"date = df.loc[df['Country\/Region'] == 'Spain', 'ObservationDate']\nconfirmed = df.loc[df['Country\/Region'] == 'Spain', 'Confirmed']\nframe = { 'Date': date, 'Confirmed': confirmed } \nresult = pd.DataFrame(frame)","e5c67ad1":"from scipy.stats import poisson\nfrom scipy.stats import expon\ncounts, bins = np.histogram(plot_NY_conf)\n#data_expon = expon.pdf([0,0.2,0.4,0.8,1.,1.2])\nplt.hist(bins[:-1], bins, weights=counts\/sum(counts))\n#plt.plot(data_expon)\n#plt.show()","9c7eff9a":"#fitting Normal Distribution\nfrom scipy.stats import norm\nfrom numpy import linspace\n\n# picking 150 of from a normal distrubution\n# with mean 0 and standard deviation 1\nsamp = norm.rvs(loc=0.26,scale=0.065,size=150) \n\nparam = norm.fit(samp) # distribution fitting\n\n# now, param[0] and param[1] are the mean and \n# the standard deviation of the fitted distribution\nx = linspace(0,1,50)\n# fitted distribution\npdf_fitted = norm.pdf(x,loc=param[0],scale=param[1])\n# original distribution\npdf = norm.pdf(x)\nplt.plot(x,pdf_fitted)\nplt.hist(plot_Russia_conf, bins=20)\nplt.show()","be101010":"#Poisson & Exponential Distrbutions fitting\nfrom scipy.stats import poisson\nfrom scipy.stats import expon\nimport matplotlib.pyplot as plt\nplt.ylabel('Total of ')\nplt.xlabel('Number of data points in range')\nplt.title('Total Numbers Distribution - NY Normalize growth rate of Confirmed Cases')\narr = []\ndata_expon = []\nrv = poisson(2)\nfor num in range(0,10):\n arr.append(rv.pmf(num))\ndata_poisson = poisson.rvs(mu=3, size=25)\ndata_expon = expon.rvs(scale=1,loc=1,size=25)\n#print(data_expon)\nplot_NY_conf_scaled = [item*10 for item in plot_NY_conf if item<1.5 and item>0]\n\n# print(rv.pmf(28))\n#prob = rv.pmf(28)\nplt.grid(True)\n#plt.hist(data_poisson, linewidth=2.0)\n#plt.hist(data_expon, linewidth=2.0)\nplt.hist(plot_NY_conf_scaled, bins=20)\n#plt.plot([28], [prob], marker='o', markersize=6, color=\"red\")\nplt.show()\n#data_expon.clear()","544b6047":"'''data_poisson = poisson.rvs(mu=1, size=25)\nplt.hist(data_poisson, linewidth=2.0)'''","8c10bfb9":"#data ranges\n''' from datetime import date, timedelta\n\nsdate = date(2008, 8, 15)   # start date\nedate = date(2008, 9, 15)   # end date\n\ndelta = edate - sdate       # as timedelta\n\nfor i in range(delta.days + 1):\n    day = sdate + timedelta(days=i)\n    print(day)'''","f0e06a86":"Hubei Province Confirmed Cases. I am using Hubei is one of the benchmarks (the other being Italy) bcs they have the most data for analysis while experience a high number of cases.  Only South Korea and Japan has about the same amount of the data yet those countries are, unfortunately for the rest of the world, exceptions to the current rule","91bb63db":"***NY State Forward Predictions: Hubei Model***<br>\nBelow are the rolling 30 days predictions Starting April 04.  The goal is to see where the daily forecasts start converging: <br>\nStarting with 04\/04: 109667, 116966, 123041, 128422, 132820, 136662, 140770, 144519, 147503, 150912, 153916, 156577, 158829, 161008, 162966, 164501, 165869, 167248, 168344, 169268, 170102, 170880, 171460, 171895, 172291, 172593, 172739, 172821, 172857, 172811<br><br>\nStarting with 04\/05: 121004, 128863, 135848, 141593, 145728, 150190, 154731, 158406, 161560, 165356, 168626, 171268, 173652, 176139, 178119, 179617, 181113, 182598, 183659, 184552, 185465, 186264, 186766, 187185, 187599, 187849, 187913, 187959, 187962, 187830<br><br>\nStarting with 04\/06 forward 30 days: 130928, 138826, 145390, 150214, 154826, 159547, 163627, 167135, 170800, 174475, 177428, 180012, 182604, 184854, 186580, 188143, 189688, 190948, 191911, 192854, 193721, 194336, 194789, 195214, 195522, 195640, 195677, 195684, 195577, 195354<br><br>\nStarting with 04\/07 forward 30 days: 139675, 146615, 151777, 156672, 161455, 165609, 169283, 173094, 176715, 179835, 182547, 185221, 187515, 189352, 191008, 192580, 193865, 194910, 195882, 196762, 197405, 197904, 198343, 198656, 198797, 198856, 198860, 198754, 198541, 198285<br><br>\nStarting with 04\/08 forward 30 days: 146807, 152053, 157023, 161871, 166038, 169730, 173578, 177232, 180340, 183089, 185792, 188104, 189951, 191632, 193226, 194516, 195567, 196557, 197444, 198089, 198595, 199045, 199360, 199503, 199567, 199576, 199470, 199257, 199003, 198694","7181d394":"Predictions below require some manual intervention, the data in arr variable is the last 9 days of data.  I am working on automating this step","72020f5d":"**Spain**","2898c2e5":"# Sandbox","b1e06809":"# Model Training on the Italy's Data","84cb9d3b":"*New State Forward Predictions (Italy Data Trained Predictor): <br>\nSince the Italian epidemics in still in the growth stage, the model based on the Italy predictor seems to be fairly unstable The below predictions are mostly to track the model performance<br>\nStarting 04\/06 9 days: 132485, 138266, 143706, 153380, 169844, 184386, 193584, 183346, 164890 <br>\nStarting 04\/07 9 days: 137102, 142186, 152415, 169684, 185056, 192324, 179031, 157561, 155884<br>\nStarting 04\/08 9days: 146414, 157350, 171611, 183936, 189180, 186009, 176754, 183940, 218598<br>\nStarting 04\/09 9 days: 166034, 183424, 192821, 191423, 180337, 181689, 211254, 271087, 309271<br>","9f7eb024":"# Infection Rate Analysis<br>\nA bunch of chart for the Infection Daily rates for Confirmed and Lethal cases.I considered both daily rates and normalized daily rates.  Both are interesting yet the I believe that daily rates are more useful","0c34fea4":"# US Metro Areas","d860b233":"# Model Training on the Hubey Data","769e7be6":"**New York State**","f5352c4b":"**Testing prediction model on NY State Data**<br>","4554433b":"**Projections using Hubei Model**","eb2bae11":"*Italy*","651e6996":"# **Comparative Analysis of the Hubei, Italy, NY State,Spain and Russia Data**<br>\nStatement of the problem: Both \"confirmed\" and \"death\" curves exhibit very high level variability although Italian pattern for the infection rate is becoming prevalent.  In my opinion only China and Italy have enough data to for any model training.  The below notebook consists of 2 parts:\n1. Comparative Analysis of the Infection spread in Hubei China, Italy, New York State, Spain and Russia.  Russia is included in the mix because it seems to show the confirmed cases growth rate that exceeds Italy at the same stage.  \n2. Sandbox: An attempt to fit a linear regression prediction model.  The idea: Predict a number of cases on day N as a function of a number of cases over 9 previous days assuming that the infected person spreads virus for 9 days before the transmission is arrested by testing, hospitalization, etc., I trained 2 predictors using Hubei and Italy data. This a just an experiment.  Interestingly, the aproach is surprisingly acurate for short term predictions.  This is not completely unexpected, there is an bvious dependency between infection level today from the infection level over in the past yet, the model trained on data from Italy and China works very well for all other geographies<br><br>\n**Findings as of April 4th (NY State, Spain, Russia) for the Confirmed Cases:**<br><br>\nNY State Confirmed Cases Curve is in btw Italy's and Hubei scenarios.  It seems to accelerate getting very close to Italy<br>  \nRussia Confirmed Cases growth rate exceeds Italy<br>","2fe614e9":"*Service code & New Features*","c55834a6":"**Researching the distribution of daily relative growth rates for confirmed cases**"}}