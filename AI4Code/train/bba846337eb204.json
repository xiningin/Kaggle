{"cell_type":{"e188805c":"code","a5407b9e":"code","34c56e2c":"code","0325698b":"code","9efe5d57":"code","c7f8a736":"code","9bb77cfb":"code","7d646b46":"code","f0f3e998":"code","b4ab3125":"code","37a25b49":"code","19ccbcc7":"code","9079aac2":"code","020e2d55":"code","cbf60043":"code","7c6d04d2":"code","b7e25fc2":"code","6711293f":"code","6d3cdac4":"code","61a1f687":"code","fa8ab0d9":"code","5a9e7386":"code","18531826":"markdown"},"source":{"e188805c":"# IMPORTATIONS\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import matthews_corrcoef, accuracy_score, f1_score, roc_auc_score, make_scorer","a5407b9e":"# INPORT DATASET\ndf = pd.read_csv('..\/input\/bmidataset\/bmi.csv')\n\n#DISPLAY HEADER OF DATASET\nprint(df.head())","34c56e2c":"# CREATE FUNCTION TO CHECK DATA\ndef check_data(data):\n    print('shape ',data.shape)\n    print('_'*50)\n    print('variable-types : ',data.dtypes)\n    print('_'*50)\n    print('missing values : ',df.isna().sum())\n    print('_'*50)\n    print('count values of gender: ',df['Gender'].value_counts())\n    print('_'*50)\n    print('count values of Index (our target): ',df['Index'].value_counts())\ncheck_data(df)","0325698b":"# DISTRIBUTIONS OF INTEGER COLUMNS\nfor col in df.select_dtypes('int64'):\n    plt.figure(figsize=(5,5))\n    plt.hist(df[col], alpha=0.6)\n    plt.title(col)\n    plt.grid(True)\n    plt.show()\n    ","9efe5d57":"# ENCODE TARGET\ndico={'Male':0, 'Female':1}\ndf['Gender']=df['Gender'].map(dico)","c7f8a736":"# SPLIT DATA INTO FEATURES AND TARGET\nX = df.drop('Index', axis=1)\ny = df[['Index']]\nprint(X.head())","9bb77cfb":"# DEFINE DEFAULT  MODELS \nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.tree import DecisionTreeClassifier\n\nknn_clf = KNeighborsClassifier(n_neighbors=5) \ncart_clf = DecisionTreeClassifier(random_state=0)\n\nmodels = [knn_clf, cart_clf]","7d646b46":"# SPLIT DATA INTO TESTING AND TRAINING ENSEMBLE WITH TRAIN TEST SPLIT \/ ALWAYS CHECK THE SHAPE\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nprint(X_train.shape, X_test.shape)\n","f0f3e998":"# USE FOR LOOP TO TRAIN BOTH MODELS AND PLOT SCORES IN SCORE DATAFRAME\nmcc = []\nscore_df = pd.DataFrame(index=['KNN','CART'])\nfor clf in models:\n    print(clf)\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    probas = clf.predict_proba(X_test)[:,1]\n    mcc.append(matthews_corrcoef(y_test, y_pred))\n\nscore_df['MCC'] = mcc\n    \n    \n","b4ab3125":"score_df","37a25b49":"# LOOKING FOR THE BEST VALUE OF N_NEIGHBORS  FOR KNN ALGORITHM\nmcc = []\nk_list = []\nmcc_max = 0\nk_max = 0\nfor k in range(1,31):\n    knn_clf = KNeighborsClassifier(n_neighbors=k) \n    knn_clf.fit(X_train, y_train)\n    y_pred = knn_clf.predict(X_test)\n    mcc_k= matthews_corrcoef(y_test, y_pred)\n    if mcc_k>mcc_max:\n        mcc_max = mcc_k\n        k_max = k\n    mcc.append(mcc_k)\n    k_list.append(k)  \nprint('mcc_max = ',mcc_max)\nprint('k_max = ',k_max)","19ccbcc7":"#PLOT MCC SCORE BASED ON K \nplt.figure(figsize=(10,5))\nplt.plot(k_list, mcc)\nplt.grid(True)\nplt.xlabel('n_neighbors')\nplt.ylabel('MCC')\nplt.show()","9079aac2":"# k fold cross validation (TO SEE IF IT'S BETTER THAN TRAIN TEST SPLIT)\nskf = StratifiedKFold(n_splits=10)\nprint('number of splits : ',skf.get_n_splits(X, y))\nscores = pd.DataFrame()\nmcc_avg = [] \nacc_avg = []\nlist_of_index = []\n\nfor alg in models:\n    mcc, acc = [[]for i in range(2)]\n    list_of_index.append(alg.__class__.__name__)\n    scores.index = list_of_index\n    for train_index, test_index in skf.split(X, y):\n        #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n        alg.fit(X_train, y_train)\n        y_pred = alg.predict(X_test)\n        probs_ = alg.predict_proba(X_test)[:,1]\n        mcc.append(matthews_corrcoef(y_test, y_pred))\n        acc.append(accuracy_score(y_test, y_pred))\n        \n    \n    mcc_avg.append(np.average(mcc))\n    acc_avg.append(np.average(acc))\n\nscores['MCC'] = mcc_avg\nscores['ACC'] = acc_avg\n\n    ","020e2d55":"print(knn_clf.get_params())","cbf60043":"# hyper parametre optimization USING GRID SEARCH CV\nfrom sklearn.model_selection import GridSearchCV\n\n# Choose some parameter combinations to try\nknn_hp = {'leaf_size':list(range(1,50)),\n          'weights': ['uniform', 'distance'],\n          'p':[1,2],\n          'n_neighbors':[3,4]}\ncart_hp = {\n'max_depth': [3, 4,5, 6],\n'min_samples_leaf': [0.04, 0.06, 0.08],\n'max_features': [0.2, 0.4,0.6, 0.8]\n}\nparams = [knn_hp, cart_hp]\n# Type of scoring used to compare parameter combinations\nmcc_scorer = make_scorer(matthews_corrcoef)\n\n# Run the grid search\nbest_estimators = {}\nfor clf, p in zip(models, params):\n    grid = GridSearchCV(clf,p, scoring=mcc_scorer)\n    grid.fit(X_train, y_train)\n    be = grid.best_estimator_\n    best_estimators[clf.__class__.__name__] = be\n   \n\n","7c6d04d2":"best_estimators","b7e25fc2":"# FIT AND PREDICT WITH THE BEST ESTIIMATORS\nbest_estimators['KNeighborsClassifier'].fit(X_train, y_train)\ny_pred = best_estimators['KNeighborsClassifier'].predict(X_test)\nmcc= matthews_corrcoef(y_test, y_pred)\nmcc","6711293f":"best_estimators['DecisionTreeClassifier'].fit(X_train, y_train)\ny_pred = best_estimators['DecisionTreeClassifier'].predict(X_test)\nmcc= matthews_corrcoef(y_test, y_pred)\nmcc","6d3cdac4":"# CREATE NEW INSTANCE \nnew = pd.DataFrame(columns=X_train.columns)\nnew.loc[1, 'Gender'] = 0\nnew.loc[1, 'Height'] = 175\nnew.loc[1, 'Weight'] = 64","61a1f687":"#PREDICT THE NEW INSTANCE\n\ny_pred_knn = best_estimators['KNeighborsClassifier'].predict(new)\ny_pred_cart = best_estimators['DecisionTreeClassifier'].predict(new)","fa8ab0d9":"\nindex_dict = {0:'Extremely Weak',\n             1:'Weak',\n             2:'Normal',\n             3:'Overweight',\n             4:'Obesity',\n             5:'Extreme Obesity'}","5a9e7386":"print('knn prediction of the new instance is : ',index_dict[y_pred_knn[0]])\nprint('cart prediction of the new instance is : ',index_dict[y_pred_cart[0]])","18531826":"count\n"}}