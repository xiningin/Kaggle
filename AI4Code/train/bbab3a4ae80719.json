{"cell_type":{"34c7d66a":"code","16c2cedc":"code","58b1528b":"code","5b16fab3":"code","6da5211b":"code","98462cb5":"code","f7e39975":"code","0aec02d9":"code","0c42513d":"code","074dd9e9":"code","ab127f94":"code","08b284ea":"code","e525a42a":"code","45a8fc6a":"markdown","5caf9b1d":"markdown","d7a69681":"markdown","235706ca":"markdown","4ced5bf2":"markdown","657f976d":"markdown","cd1390eb":"markdown","0ccf7a55":"markdown","af507d60":"markdown","8697261a":"markdown","5aac333d":"markdown","fbe44423":"markdown","9c3dc260":"markdown"},"source":{"34c7d66a":"import pandas as pd\nimport numpy as np\n","16c2cedc":"chess_data = pd.read_csv('..\/input\/chess\/games.csv')","58b1528b":"chess_data.head()","5b16fab3":"# [1] Afficher les 1er, 2\u00e8me et 3\u00e8me quartiles pour les variables 'turns', 'white_rating' et 'black_rating'\nresult1_1 = chess_data[['turns', 'white_rating', 'black_rating']].describe().loc['25%':'75%', :]\n\n# (+) Afficher les 1er, 2\u00e8me et 3\u00e8me quartiles pour les variables 'turns' et 'rating' (contenant l'ensemble des valeurs des variables 'white_rating' et 'black_rating')\nresult1_2 = chess_data.assign(rating = chess_data.black_rating + chess_data.white_rating).describe().loc['25%':'75%', ['turns', 'rating']]\nresult1_2","6da5211b":"# [1] Afficher le nombre de parties par ouverture ('opening_eco')\nresult2_1 = chess_data.groupby(by='opening_eco').agg({\"id\":\"count\"}).rename(columns={'id':'games_number'})\n\n# (+) Afficher 5 ouvertures les plus populares ('opening_eco')\nresult2_2 = chess_data.groupby(by='opening_eco').agg({\"id\":\"count\"}).rename(columns={'id':'games_number'}).sort_values(by='games_number', ascending=False).iloc[:5]","98462cb5":"# [1] Afficher le nombre moyen de tours par ouverture ('opening_eco')\nresult3 = chess_data.groupby(by='opening_eco').agg({\"turns\":\"mean\"})","f7e39975":"# [2] Afficher 5 joueurs qui ont jou\u00e9 le plus de parties en consid\u00e9rant uniquement ceux qui ont jou\u00e9 avec les blancs\nresult4_1 = chess_data.groupby(by='white_id').agg({\"id\":\"count\"}).sort_values(by='id', ascending=False).iloc[:5]\n\n# (+) Afficher 5 joueurs qui ont jou\u00e9 le plus de parties (avec les blancs ou avec les noirs) !!! A faire encore\ntemp_1 = chess_data.groupby(by='white_id').agg({\"id\":\"count\"}).sort_values(by='id', ascending=False)\ntemp_2 = chess_data.groupby(by='black_id').agg({\"id\":\"count\"}).sort_values(by='id', ascending=False)\ntemp_1.append(temp_2).reset_index().groupby(by='index').agg({'id':'sum'}).sort_values(by='id', ascending=False).iloc[:5]","0aec02d9":"# [3] Pour chaque ouverture ('opening_eco') afficher le nombre de parties jou\u00e9es et \n# le pourcentage des victoires des blancs (sur le nombre total des parties pour une ouverture donn\u00e9e)\nchess_data[\"white_winner\"] = np.where(chess_data.winner==\"white\", 1, 0)\nresult = chess_data.groupby(by=\"opening_eco\").agg({'id':'count', 'white_winner':'mean'}).rename(columns={\"white_winner\":\"percentage\"})\nresult.percentage = result.percentage * 100\n# (+) Afficher uniquement les ouvertures avec plus de 100 parties jou\u00e9es et \n# les trier dans l'ordre d\u00e9croissant du pourcentage des victoires des blancs\nresult.sort_values(by='percentage', ascending=False).loc[result.id>=100]","0c42513d":"# [2] Formuler et impl\u00e9menter votre propre requ\u00eate comprenant une s\u00e9lection des lignes sur une condition \n# basant sur les valeurs de 2 variables et une agr\u00e9gation de donn\u00e9es par groupes de votre choix.\nchess_data.loc[(chess_data.turns>50) & (chess_data.white_rating>1000)].groupby(by='opening_eco').agg({'id':'count'})","074dd9e9":"# [2] Afficher un histogramme repr\u00e9sentant la r\u00e9partition du nombre de tours\nimport seaborn as sns\n\n# sns.distplot(a=chess_data.turns, kde=False)\nchess_data.turns.plot.hist()\n\n# (+) Afficher un histogramme repr\u00e9sentant la r\u00e9partition du nombre de tours par classe d'ouverture (A, B, C, ...)\n# chess_data[['turns', 'opening_eco']].plot.hist()","ab127f94":"# [2] Afficher un nuage de points repr\u00e9sentant la relation entre le score des joueurs jouant les uns contre les autres. \n# Diff\u00e9rencier les points par les valeurs de la variable 'rated'\n#chess_data.plot.scatter(x=\"white_rating\",y=\"black_rating\")\nsns.scatterplot(x=chess_data.white_rating, y=chess_data.black_rating, hue=chess_data.rated)\n\n# (+) Prendre en compte uniquement des parties de 10 minutes par joueur ('increment_code': 10+..) \n# qui \u00e9taient commenc\u00e9es par \"d4\".","08b284ea":"# [3] Afficher la distribution (box plot) du nombre de tours ('turns') par ouverture \n# pour 2 ouvertures de votre choix ('opening_eco')\nsns.boxplot(x=chess_data.loc[(chess_data.opening_eco == \"A00\") | (chess_data.opening_eco == \"C00\")].opening_eco, y=chess_data.turns)\n\n# (+) Afficher la distribution (box plot) du nombre de tours ('turns') par ouverture \n# pour 5 ouvertures les plus populaires ('opening_eco')\n# most_populars = chess_data.groupby(by='opening_eco').agg({\"id\":\"count\"}).rename(columns={'id':'games_number'}).sort_values(by='games_number', ascending=False).iloc[:5].reset_index().opening_eco.tolist()\n\n# sns.boxplot(x=chess_data.loc[chess_data.opening_eco. in most_populars].opening_eco, y=chess_data.turns)","e525a42a":"# [3] Afficher l'\u00e9volution du score dans le temps pour un joueur de votre choix\n# L'axe du temps doit \u00eatre construit \u00e0 partir de la variable `last_move_at` qui doit \u00eatre transform\u00e9e : \n# ses valeurs correspondent au nombre de millisecondes depuis le 01\/01\/1970 00:00:00 GMT (cf librairie datetime).\nchess_data['changed_last_move_at'] = pd.to_datetime(chess_data['last_move_at'], unit='ms')\ntaranga_chess_data = chess_data.loc[(chess_data.white_id==\"taranga\") | (chess_data.black_id==\"taranga\")]\ntaranga_chess_data[\"taranga_player_rating\"] = np.where(taranga_chess_data.white_id==\"taranga\", taranga_chess_data.white_rating, taranga_chess_data.black_rating)\nsns.lineplot(data=taranga_chess_data, x='changed_last_move_at', y='taranga_player_rating')\n\n# (+) Afficher l'\u00e9volution du score dans le temps pour le joueur qui a jou\u00e9 le plus de parties \n# (peu importe avec les blancs ou avec les noirs)","45a8fc6a":"#### Manipulation de donn\u00e9es 2\/6","5caf9b1d":"### Manipulation de donn\u00e9es : 10 points maximum","d7a69681":"#### Manipulation de donn\u00e9es 4\/6","235706ca":"#### Manipulation de donn\u00e9es 6\/6","4ced5bf2":"#### Visualisation de donn\u00e9es 4\/4","657f976d":"#### Visualisation de donn\u00e9es 1\/4","cd1390eb":"### Visualisation de donn\u00e9es : 10 points maximum","0ccf7a55":"## EXAMEN\nDataset : https:\/\/www.kaggle.com\/datasnaek\/chess<br\/><br\/>\n[...] d\u00e9signe la valeur du devoir de base<br\/>\nDevoir marqu\u00e9 avec (+) vaut 50% de plus par rapport au devoir de base qui le pr\u00e9c\u00e8de : vous faites un devoir des deux.<br\/>\nLa somme par bloc de devoirs (manipulation\/visualisation de donn\u00e9es) ne pourra pas d\u00e9passer le maximum fix\u00e9.\n\nPas de restrictions sur l'utilisation des supports de cours (notamment, des exemples de code vus en cours - cf \u00e9quipe du cours sur Teams \/\/ Fichiers)","af507d60":"#### Manipulation de donn\u00e9es 5\/6","8697261a":"#### Manipulation de donn\u00e9es 1\/6","5aac333d":"#### Visualisation de donn\u00e9es 2\/4","fbe44423":"#### Manipulation de donn\u00e9es 3\/6","9c3dc260":"#### Visualisation de donn\u00e9es 3\/4"}}