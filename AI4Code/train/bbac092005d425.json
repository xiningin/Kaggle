{"cell_type":{"20fa79b2":"code","bf9334a2":"code","0b46db48":"code","2fa30284":"code","38b9066b":"code","71ee4aa8":"code","611ace3c":"code","5230a568":"code","09fe9096":"code","01aeed3a":"code","e3fb075e":"code","e63c905a":"code","38dd9282":"code","75c80f23":"code","dd35d8fb":"code","b31dfd60":"code","249d5a55":"code","4a78adc0":"code","55fd5ee0":"code","1b0e2737":"markdown","42510119":"markdown","c9cc0eff":"markdown","38abe6f7":"markdown","5af58535":"markdown","e6fdde0a":"markdown","f114bca3":"markdown","4c7a6aa8":"markdown","069aae02":"markdown","04a2ed05":"markdown","e9e7e189":"markdown","4101c79f":"markdown","d2701b8d":"markdown","31066b7d":"markdown","798f3cae":"markdown","9edada5d":"markdown","7ce66de6":"markdown","1af3cf47":"markdown","30494589":"markdown"},"source":{"20fa79b2":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBClassifier\n\nfrom tpot import TPOTClassifier, TPOTRegressor\nfrom tpot.config import classifier_config_dict\n\nfrom deap.gp import Primitive\n\nimport os\nos.chdir('\/kaggle\/input\/evolution\/')\n!pip install -qq logger\nfrom evolution import NeuroEvolution\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Dense\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')","bf9334a2":"path = '\/kaggle\/input\/fetal-health-classification\/fetal_health.csv'\ndf = pd.read_csv(path)\ndf.head()","0b46db48":"df.describe()","2fa30284":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True, fmt='.0%')","38b9066b":"X=df.drop([\"fetal_health\"],axis=1)\ny=df[\"fetal_health\"]","71ee4aa8":"col_names = list(X.columns)\ns_scaler = preprocessing.StandardScaler()\nX_df= s_scaler.fit_transform(X)\nX_df = pd.DataFrame(X_df, columns=col_names)   \nX_df.describe().T","611ace3c":"X_train, X_test, y_train, y_test = train_test_split(X_df, y, test_size=0.25, random_state=23)","5230a568":"classifier_config_dict['xgboost.XGBClassifier'] = {\n    'n_estimators': [100],\n    'max_depth': range(1, 11),\n    'learning_rate': [1e-3, 1e-2, 1e-1, 0.5, 1.],\n    'subsample': np.arange(0.05, 1.01, 0.05),\n    'min_child_weight': range(1, 21),\n    'n_jobs': [1],\n    'verbosity': [0]\n}\n        \n# for a quick test\ntpot = TPOTClassifier(generations=2, population_size=10, verbosity=2,\n                      config_dict=classifier_config_dict)\ntpot.fit(X_train, y_train)","09fe9096":"xgb = XGBClassifier(tpot._optimized_pipeline)\nxgb.fit(X_train, y_train)","01aeed3a":"preds = xgb.predict(X_test)\nacc = accuracy_score(y_test, preds)\nprint(\"Accuracy: {:1.3f}\".format(acc))","e3fb075e":"y_train = pd.get_dummies(y_train)\ny_test = pd.get_dummies(y_test)","e63c905a":"params = {\n    \"epochs\": [25, 75, 100],\n    \"batch_size\": [8, 16, 32],\n    \"n_layers\": [1, 2, 3],\n    \"n_neurons\": [8, 16, 32],\n    \"dropout\": [0.0],\n    \"optimizers\": [\"nadam\", \"adam\", \"adadelta\", \"sgd\"],\n    \"activations\": [\"relu\", \"sigmoid\", \"tanh\"],\n    \"last_layer_activations\": [\"tanh\", \"sigmoid\", \"relu\", \"softmax\"],\n    \"losses\": [\"mean_absolute_error\", \"mean_squared_error\",\n               \"mean_squared_logarithmic_error\"],\n    \"metrics\": [\"accuracy\"]\n}","38dd9282":"search = NeuroEvolution(generations=2, population=10, params=params)\n\nsearch.evolve(X_train, y_train, X_test, y_test)","75c80f23":"n_layers = search.best_params.network['n_layers']\nn_neurons = search.best_params.network['n_neurons']\nactivation = search.best_params.network['activations']\nlast_activation = search.best_params.network['last_layer_activations']\n\nmodel = tf.keras.Sequential()\nfor n in range(n_layers):\n    model.add(Dense(n_neurons, activation=activation))\nmodel.add(Dense(y_train.shape[1], activation=last_activation))","dd35d8fb":"model.build(X_train.shape)\nmodel.summary()","b31dfd60":"epochs = search.best_params.network['epochs']\nbatch_size = search.best_params.network['batch_size']\noptimizer = search.best_params.network['optimizers']\nloss = search.best_params.network['losses']\nmetrics = [search.best_params.network['metrics']]","249d5a55":"model.compile(optimizer=optimizer, loss=loss, metrics=metrics)\nhistory = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test), verbose=0)","4a78adc0":"_ = plt.figure(figsize=(14,8))\n_ = plt.plot(history.history['accuracy'], label=\"Accuracy\")\n_ = plt.plot(history.history['loss'], label=\"Loss\")\nplt.legend()\nplt.show()","55fd5ee0":"preds = model.predict(X_test)\nacc = accuracy_score(np.argmax(preds, axis=1), np.argmax(y_test.values, axis=1))\nprint(\"Accuracy: {:1.3f}\".format(acc))","1b0e2737":"## Compile and fit the model","42510119":"## Fit XGBoost with best parameters","c9cc0eff":"## Analyze results","38abe6f7":"<h1 id=\"class\" style=\"color:#a05d40; background:#e8e5dc; border:0.5px dotted;\"> \n    <center>Classification\n        <a class=\"anchor-link\" href=\"#class\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","5af58535":"## Correlation graph","e6fdde0a":"## Describe data","f114bca3":"<h1 id=\"dataset\" style=\"color:#a05d40; background:#e8e5dc; border:0.5px dotted;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","4c7a6aa8":"## Analyze results","069aae02":"## Transform labels to one hot encodings","04a2ed05":"## Split training\/testing data","e9e7e189":"## Feature Engineering","4101c79f":"## Model build and summary","d2701b8d":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/916586\/1553068\/ddd9373754b16217a54a513f0d94628a\/dataset-cover.png\" \/>\n<\/div>","31066b7d":"<h1 id=\"inference\" style=\"color:#a05d40; background:#e8e5dc; border:0.5px dotted;\"> \n    <center>Inference\n        <a class=\"anchor-link\" href=\"#inference\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","798f3cae":"## Set the parameters for genetic hyperparameter tunning","9edada5d":"## Use best parameters to train a DNN","7ce66de6":"## Load data","1af3cf47":"## Use of NeuroEvolution to find best parameters","30494589":"## Loading TPOT with XGBoost"}}