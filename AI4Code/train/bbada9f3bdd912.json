{"cell_type":{"cce46d9a":"code","2552ef5b":"code","1558a72c":"code","fee763c9":"code","a1932266":"code","0c708859":"code","8774c018":"code","d0963ff2":"code","af2cdfcd":"code","c346c149":"code","8e7946fe":"code","0338935f":"code","f9139384":"code","698b75df":"code","f5b85a76":"code","489ed2a9":"code","46705b5b":"code","09f0d027":"code","6db35322":"code","5ff06e74":"code","7f913d26":"code","95c353fb":"code","3a4660fb":"code","d8d4e55f":"code","d7c56229":"code","e4d5bef9":"code","e4338dca":"code","6aadc19e":"code","e69e15cb":"code","de54810c":"code","5435e190":"code","686f07e7":"code","a76ea8c0":"code","935d1116":"code","7a72e457":"code","09082981":"code","feaaebcf":"code","4a82a132":"code","96817002":"code","b2e6c168":"code","5d772590":"code","8f27b8f2":"code","b351df82":"code","021a3145":"code","5e96c023":"code","333bb13e":"code","f93f0497":"code","7e223d62":"code","453ef1b7":"code","f82fa85f":"code","e5c4a410":"code","fae34abc":"code","6ad0a5ad":"code","cec22319":"markdown","44e91d05":"markdown","263b6280":"markdown","ecac379d":"markdown","d4302a7f":"markdown","8cf84e0f":"markdown","5e88202d":"markdown","892dbbd5":"markdown","951f05ae":"markdown","fafd5339":"markdown","54b2d4d0":"markdown","ab9fe323":"markdown","9b078f37":"markdown","650ab003":"markdown","bacb7d33":"markdown","da001047":"markdown","9de55bb6":"markdown","d9f5f68a":"markdown","183aa353":"markdown","f73ccc1f":"markdown","e5a097a0":"markdown","c75a0e45":"markdown","9d205064":"markdown","d8830ecc":"markdown","02d968e1":"markdown","7ab24060":"markdown","b8efc1f6":"markdown","1ccab1ec":"markdown","02ececbd":"markdown","71ce19c5":"markdown","279f46d0":"markdown","de28defb":"markdown"},"source":{"cce46d9a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import mode","2552ef5b":"df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","1558a72c":"df.shape","fee763c9":"df.info()","a1932266":"df.head()","0c708859":"def converter(x):\n    if x[-1] == 'M' :\n        x = float(x[:-1]) * 1000000\n    else:\n        x = float(x)\n    return x\ndf['Reviews'] = df['Reviews'].apply(lambda x : converter(x))","8774c018":"def converter(x):\n    if x[-1] == 'M' :\n        x = float(x[:-1])\n    elif x[-1] == 'k' :\n        x = float(x[:-1]) \/1024\n    else :\n        x = np.nan\n    return x\ndf['Size'] = df['Size'].apply(lambda x : converter(x))","d0963ff2":"def converter(x):\n    if x[-1] == '+':\n        x = float(x[:-1].replace(',',''))\n    elif x == 'Free':\n        x = 0\n    else :\n        x = float(x.replace(',',''))\n    return x\ndf['Installs'] =df['Installs'].apply(lambda x : converter(x))","af2cdfcd":"def converter(x):\n    if x[0] == '$':\n        x = float(x[1:])\n    elif x == 'Everyone' :\n        x = 0\n    else :\n        x = float(x)\n    return x\ndf['Price'] = df['Price'].apply(lambda x : converter(x))","c346c149":"df.isnull().sum()","8e7946fe":"mapper = pd.pivot_table(data=df, values='Size', columns='Category', aggfunc=mode)\ntemp  = df[df['Size'].isnull()]['Category'].apply(lambda x : mapper.loc[:,x][0][0][0])\n\ndf['Size'].fillna(value=temp,inplace=True)\ndel temp,mapper","0338935f":"mapper = pd.pivot_table(data=df, values='Rating', columns='Category', aggfunc=mode)\n\ntemp  = df[df['Rating'].isnull()]['Category'].apply(lambda x : mapper.loc[:,x][0][0][0])\n\ndf['Rating'].fillna(value=temp,inplace=True)\ndel temp,mapper","f9139384":"df.isnull().sum()","698b75df":"df.dropna(inplace=True)","f5b85a76":"df.info()","489ed2a9":"df.head()","46705b5b":"df['Last Updated'] = pd.to_datetime(df['Last Updated'])","09f0d027":"plt.figure(figsize=(15,4))\nsns.countplot(df['Category'])\nplt.xticks(rotation=90)","6db35322":"temp = df['Type'].value_counts()\nplt.pie(temp, labels=temp.index, autopct='%1.1f%%', explode=[0,0.1], shadow=True)","5ff06e74":"sns.countplot(df['Content Rating'])\nplt.xticks(rotation=90)","7f913d26":"df.columns","95c353fb":"top_rated = df.sort_values(by=['Rating','Reviews'],ascending=False).head(50)\ntop_rated[['App','Rating','Reviews']].head(10)","3a4660fb":"most_installs = df.sort_values(by='Installs',ascending=False).head(50)\nmost_installs[['App','Installs']].head(10)","d8d4e55f":"most_expensive = df.sort_values(by='Price',ascending=False).head(50)\nmost_expensive[['App','Price']].head(10)","d7c56229":"largest = df.sort_values(by='Size',ascending=False).head(50)\nlargest[['App','Size']].head(10)","e4d5bef9":"fig,ax = plt.subplots(1,3,figsize=(20,5))\n\ntop_rated['Category'].value_counts().plot(kind='bar',ax=ax[0],color='y',title='Category')\n\ntop_rated['Content Rating'].value_counts().plot(kind='bar',ax=ax[1],color='y',title='Content Rating')\n\ntop_rated['Genres'].value_counts().plot(kind='bar',ax=ax[2],color='y',title='Genres')","e4338dca":"fig,ax = plt.subplots(1,3,figsize=(20,5))\n\nmost_installs['Category'].value_counts().plot(kind='bar',ax=ax[0],color='y',title='Category')\n\nmost_installs['Content Rating'].value_counts().plot(kind='bar',ax=ax[1],color='y',title='Content Rating')\n\nmost_installs['Genres'].value_counts().plot(kind='bar',ax=ax[2],color='y',title = 'Genres')","6aadc19e":"fig,ax = plt.subplots(1,3,figsize=(20,5))\n\nmost_expensive['Category'].value_counts().plot(kind='bar',ax=ax[0],color='y',title='Category')\n\nmost_expensive['Content Rating'].value_counts().plot(kind='bar',ax=ax[1],color='y',title='Content Rating')\n\nmost_expensive['Genres'].value_counts().plot(kind='bar',ax=ax[2],color='y',title='Genres')","e69e15cb":"fig,ax = plt.subplots(1,3,figsize=(20,5))\n\nlargest['Category'].value_counts().plot(kind='bar',ax=ax[0],color='y',title='Category')\n\nlargest['Content Rating'].value_counts().plot(kind='bar',ax=ax[1],color='y',title='Content Rating')\n\nlargest['Genres'].value_counts().plot(kind='bar', ax=ax[2],color='y',title='Genres')","de54810c":"del top_rated,most_expensive,most_installs,largest","5435e190":"plt.figure(figsize=(15,4))\ndf.groupby(by='Category')['Price'].mean().sort_values(ascending=False).plot(kind='bar',title='Price')","686f07e7":"plt.figure(figsize=(15,4))\ndf.groupby(by='Category')['Size'].median().sort_values(ascending=False).plot(kind='bar',title='Size')","a76ea8c0":"plt.figure(figsize=(15,4))\ndf.groupby(by='Category')['Rating'].median().sort_values(ascending=False).plot(kind='bar',title='Rating')","935d1116":"plt.figure(figsize=(15,4))\ndf.groupby(by='Category')['Installs'].median().sort_values(ascending=False).plot(kind='bar',title='Number of Installs')","7a72e457":"plt.figure(figsize=(20,4))\ndf.groupby(by='Genres')['Price'].mean().sort_values(ascending=False).plot(kind='bar',title='Price',color='g')","09082981":"plt.figure(figsize=(20,4))\ndf.groupby(by='Genres')['Rating'].mean().sort_values(ascending=False).plot(title='Rating',color='g')","feaaebcf":"plt.figure(figsize=(20,4))\ndf.groupby(by='Genres')['Size'].mean().sort_values(ascending=False).plot(kind='bar',title='Size',color='g')","4a82a132":"plt.figure(figsize=(20,4))\ndf.groupby(by='Genres')['Installs'].mean().sort_values(ascending=False).plot(kind='bar',title='Installs',color='g')","96817002":"fig,ax = plt.subplots(1,4,figsize=(15,3))\ndf.groupby(by='Content Rating')['Price'].mean().sort_values(ascending=False).plot(kind='bar',title='Price',ax=ax[0])\ndf.groupby(by='Content Rating')['Rating'].mean().sort_values(ascending=False).plot(kind='bar',title='Rating',ax=ax[1])\ndf.groupby(by='Content Rating')['Size'].mean().sort_values(ascending=False).plot(kind='bar',title='Size',ax=ax[2])\ndf.groupby(by='Content Rating')['Installs'].mean().sort_values(ascending=False).plot(kind='bar',title='Installs',ax=ax[3])","b2e6c168":"sns.pairplot(df,hue='Type')","5d772590":"sns.jointplot(data=df,x='Size',y='Rating')","8f27b8f2":"sns.jointplot(data=df,x='Price',y='Rating')","b351df82":"sns.scatterplot(data=df, x='Rating', y='Size',hue='Type')","021a3145":"g = sns.FacetGrid(df,col='Category',col_wrap=5,sharey=False,margin_titles=True)\ng.map(sns.countplot,'Rating',order=[1,2,3,4,5])","5e96c023":"temp = df.groupby(by=['Category','Type'])['App'].count().unstack()\ntemp['Total'] = temp.sum(axis=1)\ntemp =temp.sort_values(by='Total',ascending=False).head(5)\ntemp.drop('Total',axis=1,inplace=True)\n\ntemp.plot(kind='bar')\n\ndel temp","333bb13e":"import pandas_profiling","f93f0497":"report = pandas_profiling.ProfileReport(df)\nreport","7e223d62":"report.to_file('App_Data_Profile_Report.html')","453ef1b7":"df.columns","f82fa85f":"reviews = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")","e5c4a410":"reviews.head()","fae34abc":"from wordcloud import WordCloud, STOPWORDS\n\nstop = set(STOPWORDS)\n\nsentiments = str('').join(reviews['Translated_Review'].dropna().to_list())\n\n","6ad0a5ad":"cloud = WordCloud(width=800, height=500, stopwords=stop, background_color='white',max_words=50)\n\nimg = cloud.generate(sentiments)\n\nplt.figure(figsize = (8, 5), facecolor = None) \nplt.imshow(img) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","cec22319":"### How Price affects ratings.","44e91d05":"#### Most Top rated apps have 2mb < size < 40mb","263b6280":"### How categories have paid and free apps count.","ecac379d":"# Let's see the distribution of data by different attributes.","d4302a7f":"#### ALl these null value has to be taken care of.","8cf84e0f":"#### Attribute 'Last Updated' has data vlaues of date but in string format. We should converting it into datetime format will be more convinient.","5e88202d":"## Distribution By Category :","892dbbd5":"### from above graphs we can interpret that if:\n- App that fall into Finance, Lifestyle and medical category are expected to be expensive.\n- Apps that fall in tools or libraries category are expected to be smaller in size. Other than these, size vary by different categories except for games.\n- If someone is downloading a app that is of category Game, it is expected to be large in size.\n- All Categories have similar user ratings. This means that user ratings are not biased on categories.\n- If an app falls in Entertainment or Photography Category, it has chances of having more downloads.","951f05ae":"### Above are the top 10 most rated apps on playstore with their ratings and number of reviews. ","fafd5339":"#### Above graph shows us that 92.6% of the apps on play store are free of cost. that sounds good.","54b2d4d0":"#### We have attributes that have measurements but as data type object. We should convert them to into numeric for better usability.","ab9fe323":"#### Above are the top 10 most expensive apps on playstore and their prices.","9b078f37":"#### Above diagram shows the distrbution of the app categories. Play store has more number of apps that fall in 'Family','game' or 'tools Category.","650ab003":"### Largest :","bacb7d33":"### Top Rated :","da001047":"### Let's see the top apps by every category.","9de55bb6":"#### Let's start some Exploratory Data Analysis and get some insights from data.","d9f5f68a":"### From Above Graphs we can interpret :\n- An app that falls in finance or lifestyle genre is expectedly expensive.\n- User ratings are bias to genre, some of the genres generally better ratings than others.This can suggest that there are fewer good performing apps of those genres that have lesser general user ratings.\n- Size of the app varies in different genres. \n- Apps that fall in Communication genre have generally more downloads.","183aa353":"### Distribution of dataset.","f73ccc1f":"#### Now that we have lesser null values we can simply drop them.","e5a097a0":"#### Above are the top 10 largest apps on playstore and their sizes.","c75a0e45":"### Ratings amongs different categories.","9d205064":"## Now, we'll look for the distribution of these top apps of each segment.","d8830ecc":"### Now, user reviews :","02d968e1":"#### Above are the top 10 most intalled apps on playstore with their number of installs.","7ab24060":"### Most Installed :","b8efc1f6":"## Distribution By Genres :","1ccab1ec":"### Most Expensive :","02ececbd":"#### Most apps are made for everyone where we have lesser number of apps that specifically focus on any group.","71ce19c5":"#### Wordcloud below represents all sentimens.","279f46d0":"#### Paid apps have average high ratings.","de28defb":"### How size affects raings :"}}