{"cell_type":{"d17c6bcf":"code","d3471bfe":"code","aed52051":"code","80cee1cb":"code","88342748":"code","04536225":"code","d6f74ae4":"code","02ee3e6b":"code","8fba9c57":"code","e2849450":"code","1910ee77":"code","022e25f4":"code","89539ba0":"code","5473aaec":"code","8f05b1db":"code","04352cf4":"code","74fbb0b2":"code","cf11a577":"markdown","d461af4f":"markdown","62e4de8b":"markdown","b9e49d20":"markdown","27b180a7":"markdown","2267d601":"markdown","b623e70f":"markdown","fc7847cd":"markdown","cc545bea":"markdown","ed989cde":"markdown","be366556":"markdown"},"source":{"d17c6bcf":"#Import the necessay libraries to work\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os","d3471bfe":"#Import the necessary files from Kaggle's survey\nschema = pd.read_csv(\"..\/input\/SurveySchema.csv\")\nfreeForm = pd.read_csv(\"..\/input\/freeFormResponses.csv\", dtype=np.object)\nmultiple = pd.read_csv(\"..\/input\/multipleChoiceResponses.csv\", dtype=np.object)","aed52051":"#Let's see question 35\ndfq35 = multiple.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 35))[1:]","80cee1cb":"#Eliminate all the NaN values\ndfq35 = dfq35.dropna(how='any')\ndfq35.head(6)","88342748":"#Get the values for each column\ndfq35_1 = dfq35[\"Q35_Part_1\"][1:].values\ndfq35_2 = dfq35[\"Q35_Part_2\"][1:].values\ndfq35_3 = dfq35[\"Q35_Part_3\"][1:].values\ndfq35_4 = dfq35[\"Q35_Part_4\"][1:].values\ndfq35_5 = dfq35[\"Q35_Part_5\"][1:].values\ndfq35_6 = dfq35[\"Q35_Part_6\"][1:].values\n\n#Convert each value to float and get the mean of the column\ndfq35_1 = dfq35_1.astype(np.float).mean()\ndfq35_2 = dfq35_2.astype(np.float).mean()\ndfq35_3 = dfq35_3.astype(np.float).mean()\ndfq35_4 = dfq35_4.astype(np.float).mean()\ndfq35_5 = dfq35_5.astype(np.float).mean()\ndfq35_6 = dfq35_6.astype(np.float).mean()\n\n#Get the percentage\nq35pie = dfq35_1, dfq35_2, dfq35_3, dfq35_4, dfq35_5, dfq35_6\nprint (\"Mean values for all the ages:\" + '\\n'+ \"Self-Taught: {}\".format(q35pie[0]) + '\\n' + \"Online Courses: {}\".format(q35pie[1]) + '\\n' + \"Work: {}\".format(q35pie[2]) \n       + '\\n' + \"University: {}\".format(q35pie[3]) + '\\n' + \"Kaggle Competitions: {}\".format(q35pie[4]) + '\\n' + \"Others: {}\".format(q35pie[5]))","04536225":"#Graph \nq35labels = (\"Self-taught\", \"Online courses\", \"Work\", \"University\", \"Kaggle Competitions\", \"Others\")\nexplode = (0.1, 0, 0, 0, 0, 0)\nfig1, ax1 = plt.subplots()\nax1.pie(q35pie, explode=explode, labels=q35labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()","d6f74ae4":"#Make a df for each age group\nmultjov = multiple[(multiple.Q2 == '18-21')|(multiple.Q2 == '22-24')|(multiple.Q2 == '25-29')]\nmultadult = multiple[(multiple.Q2 == '30-34')|(multiple.Q2 == '35-39')|(multiple.Q2 == '40-44')]\nmultmoread = multiple[(multiple.Q2 == '45-49')|(multiple.Q2 == '50-54')|(multiple.Q2 == '55-59')]\nmultolder = multiple[(multiple.Q2 == '60-69')|(multiple.Q2 == '70-79')|(multiple.Q2 == '80+')]\n\n#Calculate the mean for each group (we use the same method than the previous df )\n##Youngers\njovq35 = multjov.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 35))[1:]\njovq35 = jovq35.dropna(how='any')\n\njovq35_1 = jovq35[\"Q35_Part_1\"][1:].values\njovq35_2 = jovq35[\"Q35_Part_2\"][1:].values\njovq35_3 = jovq35[\"Q35_Part_3\"][1:].values\njovq35_4 = jovq35[\"Q35_Part_4\"][1:].values\njovq35_5 = jovq35[\"Q35_Part_5\"][1:].values\njovq35_6 = jovq35[\"Q35_Part_6\"][1:].values\n\njovq35_1 = jovq35_1.astype(np.float).mean()\njovq35_2 = jovq35_2.astype(np.float).mean()\njovq35_3 = jovq35_3.astype(np.float).mean()\njovq35_4 = jovq35_4.astype(np.float).mean()\njovq35_5 = jovq35_5.astype(np.float).mean()\njovq35_6 = jovq35_6.astype(np.float).mean()\n\njovq35pie = jovq35_1, jovq35_2, jovq35_3, jovq35_4, jovq35_5, jovq35_6\n\n##Adults\nadultq35 = multadult.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 35))[1:]\nadultq35 = adultq35.dropna(how='any')\n\nadultq35_1 = adultq35[\"Q35_Part_1\"][1:].values\nadultq35_2 = adultq35[\"Q35_Part_2\"][1:].values\nadultq35_3 = adultq35[\"Q35_Part_3\"][1:].values\nadultq35_4 = adultq35[\"Q35_Part_4\"][1:].values\nadultq35_5 = adultq35[\"Q35_Part_5\"][1:].values\nadultq35_6 = adultq35[\"Q35_Part_6\"][1:].values\n\nadultq35_1 = adultq35_1.astype(np.float).mean()\nadultq35_2 = adultq35_2.astype(np.float).mean()\nadultq35_3 = adultq35_3.astype(np.float).mean()\nadultq35_4 = adultq35_4.astype(np.float).mean()\nadultq35_5 = adultq35_5.astype(np.float).mean()\nadultq35_6 = adultq35_6.astype(np.float).mean()\n\nadultq35pie = adultq35_1, adultq35_2, adultq35_3, adultq35_4, adultq35_5, adultq35_6\n\n##Medium Adultos\nmadultq35 = multmoread.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 35))[1:]\nmadultq35 = madultq35.dropna(how='any')\n\nmadultq35_1 = madultq35[\"Q35_Part_1\"][1:].values\nmadultq35_2 = madultq35[\"Q35_Part_2\"][1:].values\nmadultq35_3 = madultq35[\"Q35_Part_3\"][1:].values\nmadultq35_4 = madultq35[\"Q35_Part_4\"][1:].values\nmadultq35_5 = madultq35[\"Q35_Part_5\"][1:].values\nmadultq35_6 = madultq35[\"Q35_Part_6\"][1:].values\n\nmadultq35_1 = madultq35_1.astype(np.float).mean()\nmadultq35_2 = madultq35_2.astype(np.float).mean()\nmadultq35_3 = madultq35_3.astype(np.float).mean()\nmadultq35_4 = madultq35_4.astype(np.float).mean()\nmadultq35_5 = madultq35_5.astype(np.float).mean()\nmadultq35_6 = madultq35_6.astype(np.float).mean()\n\nmadultq35pie = madultq35_1, madultq35_2, madultq35_3, madultq35_4, madultq35_5, madultq35_6\n\n#Olders\nolderq35 = multolder.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 35))[1:]\nolderq35 = olderq35.dropna(how='any')\n\nolderq35_1 = olderq35[\"Q35_Part_1\"][1:].values\nolderq35_2 = olderq35[\"Q35_Part_2\"][1:].values\nolderq35_3 = olderq35[\"Q35_Part_3\"][1:].values\nolderq35_4 = olderq35[\"Q35_Part_4\"][1:].values\nolderq35_5 = olderq35[\"Q35_Part_5\"][1:].values\nolderq35_6 = olderq35[\"Q35_Part_6\"][1:].values\n\nolderq35_1 = olderq35_1.astype(np.float).mean()\nolderq35_2 = olderq35_2.astype(np.float).mean()\nolderq35_3 = olderq35_3.astype(np.float).mean()\nolderq35_4 = olderq35_4.astype(np.float).mean()\nolderq35_5 = olderq35_5.astype(np.float).mean()\nolderq35_6 = olderq35_6.astype(np.float).mean()\n\nolderq35pie = olderq35_1, olderq35_2, olderq35_3, olderq35_4, olderq35_5, olderq35_6\n\njovq35pie, adultq35pie, madultq35pie, olderq35pie\n\nprint (\"Mean values for age ranges:\" + '\\n'+ '\\n' + \"Youngers: \" + '\\n' + \"Self-taught: {}\".format(jovq35pie[0]) + '\\n' + \"Online Courses: {}\".format(jovq35pie[1]) + '\\n' + \"Work: {}\".format(jovq35pie[2]) \n       + '\\n' + \"University: {}\".format(jovq35pie[3]) + '\\n' + \"Kaggle Competitions: {}\".format(jovq35pie[4]) + '\\n' + \"Others: {}\".format(jovq35pie[5]) + '\\n' + '\\n'\n       + \"Adults: \" + '\\n' + \"Self-taught: {}\".format(adultq35pie[0]) + '\\n' + \"Online Courses: {}\".format(adultq35pie[1]) + '\\n' + \"Work: {}\".format(adultq35pie[2]) \n       + '\\n' + \"University: {}\".format(adultq35pie[3]) + '\\n' + \"Kaggle Competitions: {}\".format(adultq35pie[4]) + '\\n' + \"Others: {}\".format(adultq35pie[5]) + '\\n' + '\\n'\n       + \"Medium Adults: \" + '\\n' + \"Self-taught: {}\".format(madultq35pie[0]) + '\\n' + \"Online Courses: {}\".format(madultq35pie[1]) + '\\n' + \"Work: {}\".format(madultq35pie[2]) \n       + '\\n' + \"University: {}\".format(madultq35pie[3]) + '\\n' + \"Kaggle Competitions: {}\".format(madultq35pie[4]) + '\\n' + \"Others: {}\".format(madultq35pie[5])+ '\\n'+ '\\n' + \"Olders: \" \n       + '\\n' + \"Self-taught: {}\".format(olderq35pie[0]) + '\\n' + \"Online Courses: {}\".format(olderq35pie[1]) + '\\n' + \"Work: {}\".format(olderq35pie[2]) \n       + '\\n' + \"University: {}\".format(olderq35pie[3]) + '\\n' + \"Kaggle Competitions: {}\".format(olderq35pie[4]) + '\\n' + \"Others: {}\".format(olderq35pie[5]))","02ee3e6b":"#Graph\n##Set width of bar\nbarWidth = 0.20\n \n##Sset height of bar\nbars1 = jovq35pie\nbars2 = adultq35pie\nbars3 = madultq35pie\nbars4 = olderq35pie\n \n##Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n\n##Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='Youngers')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='Adults')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='Medium Adults')\nplt.bar(r4, bars4, color='#ADFF2F', width=barWidth, edgecolor='white', label='Olders')\n\n#Add xticks on the middle of the group bars\n#plt.xlabel('group', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], \n           ['Self-taught', 'Online Courses', 'Work', 'University','Kaggle Competitions', 'Other'],\n          rotation=45)\n#plt.setp(xtickNames, rotation=45, fontsize=8)\nplt.ylabel('Percentage of user than learn by')\nplt.xlabel('Platform')\n# Create legend & Show graphic\nplt.legend()\nplt.show()","8fba9c57":"#Eliminate all the NaN's values\ndfq24 = multiple.filter(regex=\"(Q{t})\".format(t = 24))[1:]\ndfq24 = dfq24.dropna(how='any')\ndfq24.head(6)","e2849450":"##We use the same method than the previous df\n#Youngers\njovq24 = multjov.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 24))[1:]\njovq24 = jovq24.dropna(how='any')\n\njovq24_1 = len(jovq24[jovq24.Q24 == '< 1 year'])-1\njovq24_2 = len(jovq24[jovq24.Q24 == '1-2 years'])-1\njovq24_5 = len(jovq24[jovq24.Q24 == '3-5 years'])-1\njovq24_10 = len(jovq24[jovq24.Q24 == '5-10 years'])-1\njovq24_20 = len(jovq24[jovq24.Q24 == '10-20 years'])-1\njovq24_30 = len(jovq24[jovq24.Q24 == '20-30 years'])\njovq24_40 = len(jovq24[jovq24.Q24 == '30-40 years'])-1\njovq24_50 = len(jovq24[jovq24.Q24 == '40+ years'])-1\njovq24_l = len(jovq24[jovq24.Q24 == 'I have never written code but I want to learn'])-1\njovq24_n = len(jovq24[jovq24.Q24 == 'I have never written code and I do not want to learn'])-1\n\njovq24_years = (jovq24_1,jovq24_2,jovq24_5,jovq24_10,jovq24_20,jovq24_30,jovq24_40,jovq24_50,jovq24_l,jovq24_n)\njovq24_years = np.asarray(jovq24_years)\njovq24_yearstotal = jovq24_years.sum()\njovq24_porc = (jovq24_years *100 )\/jovq24_yearstotal \n\n##Adults\nadultq24 = multadult.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 24))[1:]\nadultq24 = adultq24.dropna(how='any')\n\nadultq24_1  = len(adultq24[adultq24.Q24 == '< 1 year'])-1\nadultq24_2  = len(adultq24[adultq24.Q24 == '1-2 years'])-1\nadultq24_5  = len(adultq24[adultq24.Q24 == '3-5 years'])-1\nadultq24_10 = len(adultq24[adultq24.Q24 == '5-10 years'])-1\nadultq24_20 = len(adultq24[adultq24.Q24 == '10-20 years'])-1\nadultq24_30 = len(adultq24[adultq24.Q24 == '20-30 years'])\nadultq24_40 = len(adultq24[adultq24.Q24 == '30-40 years'])-1\nadultq24_50 = len(adultq24[adultq24.Q24 == '40+ years'])-1\nadultq24_l  = len(adultq24[adultq24.Q24 == 'I have never written code but I want to learn'])-1\nadultq24_n  = len(adultq24[adultq24.Q24 == 'I have never written code and I do not want to learn'])-1\n\nadultq24_years = (adultq24_1,\n                  adultq24_2,\n                  adultq24_5,\n                  adultq24_10,\n                  adultq24_20,\n                  adultq24_30,\n                  adultq24_40,\n                  adultq24_50,\n                  adultq24_l,\n                  adultq24_n)\nadultq24_years = np.asarray(adultq24_years)\nadultq24_yearstotal = adultq24_years.sum()\nadultq24_porc = (adultq24_years *100 )\/adultq24_yearstotal \n\n##Medium Adults\nmadultq24 = multmoread.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 24))[1:]\nmadultq24 = madultq24.dropna(how='any')\n\nmadultq24_1  = len(madultq24[madultq24.Q24 == '< 1 year'])-1\nmadultq24_2  = len(madultq24[madultq24.Q24 == '1-2 years'])-1\nmadultq24_5  = len(madultq24[madultq24.Q24 == '3-5 years'])-1\nmadultq24_10 = len(madultq24[madultq24.Q24 == '5-10 years'])-1\nmadultq24_20 = len(madultq24[madultq24.Q24 == '10-20 years'])-1\nmadultq24_30 = len(madultq24[madultq24.Q24 == '20-30 years'])\nmadultq24_40 = len(madultq24[madultq24.Q24 == '30-40 years'])-1\nmadultq24_50 = len(madultq24[madultq24.Q24 == '40+ years'])-1\nmadultq24_l  = len(madultq24[madultq24.Q24 == 'I have never written code but I want to learn'])-1\nmadultq24_n  = len(madultq24[madultq24.Q24 == 'I have never written code and I do not want to learn'])-1\n\nmadultq24_years = (madultq24_1,\n                   madultq24_2,\n                   madultq24_5,\n                   madultq24_10,\n                   madultq24_20,\n                   madultq24_30,\n                   madultq24_40,\n                   madultq24_50,\n                   madultq24_l,\n                   madultq24_n)\nmadultq24_years = np.asarray(madultq24_years)\nmadultq24_yearstotal = madultq24_years.sum()\nmadultq24_porc = (madultq24_years *100 )\/madultq24_yearstotal \n\n##Olders\nolderq24 = multolder.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 24))[1:]\nolderq24 = olderq24.dropna(how='any')\n\nolderq24_1  = len(olderq24[olderq24.Q24 == '< 1 year'])-1\nolderq24_2  = len(olderq24[olderq24.Q24 == '1-2 years'])-1\nolderq24_5  = len(olderq24[olderq24.Q24 == '3-5 years'])-1\nolderq24_10 = len(olderq24[olderq24.Q24 == '5-10 years'])-1\nolderq24_20 = len(olderq24[olderq24.Q24 == '10-20 years'])-1\nolderq24_30 = len(olderq24[olderq24.Q24 == '20-30 years'])\nolderq24_40 = len(olderq24[olderq24.Q24 == '30-40 years'])-1\nolderq24_50 = len(olderq24[olderq24.Q24 == '40+ years'])-1\nolderq24_l  = len(olderq24[olderq24.Q24 == 'I have never written code but I want to learn'])-1\nolderq24_n  = len(olderq24[olderq24.Q24 == 'I have never written code and I do not want to learn'])-1\n\nolderq24_years = (olderq24_1,\n                  olderq24_2,\n                  olderq24_5,\n                  olderq24_10,\n                  olderq24_20,\n                  olderq24_30,\n                  olderq24_40,\n                  olderq24_50,\n                  olderq24_l,\n                  olderq24_n)\n\n#Get the percentage\nolderq24_years = np.asarray(olderq24_years)\nolderq24_yearstotal = olderq24_years.sum()\nolderq24_porc = (olderq24_years *100 )\/olderq24_yearstotal ","1910ee77":"#Graph\n##Set width of bar\nbarWidth = 0.20\n \n##Sset height of bar\nbars1 = jovq24_porc\nbars2 = adultq24_porc\nbars3 = madultq24_porc\nbars4 = olderq24_porc\n \n##Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n\n##Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='Youngers')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='Adults')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='Medium Adults')\nplt.bar(r4, bars4, color='#ADFF2F', width=barWidth, edgecolor='white', label='Olders')\n\n#Add xticks on the middle of the group bars\n#plt.xlabel('group', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], \n           ['<1 year', '1-2 years', '3-5 years', '5-10 years','10-20 years', '20-30 years','30-40 years', '40+ years','I want to learn', 'I don\\'t want to learn'],\n          rotation=90)\n#plt.setp(xtickNames, rotation=45, fontsize=8)\n\n# Create legend & Show graphic\nplt.xlabel('Years that started to learn code')\nplt.ylabel('Percentage of groups')\nplt.legend()\nplt.show()","022e25f4":"dfq9 = multiple.filter(regex=\"(Q{t})\".format(t = 9))[1:]\ndfq9.head(6)","89539ba0":"##We use the same method than the previous df\n\n#Youngers\njovq9    = multjov.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 9))[1:]\njovq9    = jovq9.dropna(how='any')\n\njovq9_10    = len(jovq9[jovq9.Q9 == '0-10,000'])-1\njovq9_20    = len(jovq9[jovq9.Q9 == '10-20,000'])-1\njovq9_30    = len(jovq9[jovq9.Q9 == '20-30,000'])-1\njovq9_40    = len(jovq9[jovq9.Q9 == '30-40,000'])-1\njovq9_50    = len(jovq9[jovq9.Q9 == '40-50,000'])-1\njovq9_60    = len(jovq9[jovq9.Q9 == '50-60,000'])\njovq9_70    = len(jovq9[jovq9.Q9 == '60-70,000'])-1\njovq9_80    = len(jovq9[jovq9.Q9 == '70-80,000'])-1\njovq9_90    = len(jovq9[jovq9.Q9 == '80-90,000'])-1\njovq9_100   = len(jovq9[jovq9.Q9 == '90-100,000'])-1\njovq9_125   = len(jovq9[jovq9.Q9 == '100-125,000'])-1\njovq9_150   = len(jovq9[jovq9.Q9 == '125-150,000'])-1\njovq9_200   = len(jovq9[jovq9.Q9 == '150-200,000'])-1\njovq9_250   = len(jovq9[jovq9.Q9 == '200-250,000'])-1\njovq9_300   = len(jovq9[jovq9.Q9 == '250-300,000'])-1\njovq9_400   = len(jovq9[jovq9.Q9 == '300-400,000'])\njovq9_500   = len(jovq9[jovq9.Q9 == '400-500,000'])-1\njovq9_600   = len(jovq9[jovq9.Q9 == '500+'])\njovq9_n     = len(jovq9[jovq9.Q9 == 'I do not wish to disclose my approximate yearly compensation'])-1\n\njovq9_compens = (jovq9_10,jovq9_20,jovq9_30,jovq9_40,jovq9_50,jovq9_60,jovq9_70,jovq9_80,jovq9_90,\n              jovq9_100,jovq9_125,jovq9_150,jovq9_200,jovq9_250,jovq9_300,jovq9_400,jovq9_500,\n              jovq9_600,jovq9_n)\njovq9_compens = np.asarray(jovq9_compens)\njovq9_compenstotal = jovq9_compens.sum()\njovq9_compensporc = (jovq9_compens*100)\/jovq9_compenstotal \n\n##Adults\n\nadultq9    = multadult.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 9))[1:]\nadultq9    = adultq9.dropna(how='any')\n\nadultq9_10    = len(adultq9[adultq9.Q9 == '0-10,000'])-1\nadultq9_20    = len(adultq9[adultq9.Q9 == '10-20,000'])-1\nadultq9_30    = len(adultq9[adultq9.Q9 == '20-30,000'])-1\nadultq9_40    = len(adultq9[adultq9.Q9 == '30-40,000'])-1\nadultq9_50    = len(adultq9[adultq9.Q9 == '40-50,000'])-1\nadultq9_60    = len(adultq9[adultq9.Q9 == '50-60,000'])\nadultq9_70    = len(adultq9[adultq9.Q9 == '60-70,000'])-1\nadultq9_80    = len(adultq9[adultq9.Q9 == '70-80,000'])-1\nadultq9_90    = len(adultq9[adultq9.Q9 == '80-90,000'])-1\nadultq9_100   = len(adultq9[adultq9.Q9 == '90-100,000'])-1\nadultq9_125   = len(adultq9[adultq9.Q9 == '100-125,000'])-1\nadultq9_150   = len(adultq9[adultq9.Q9 == '125-150,000'])-1\nadultq9_200   = len(adultq9[adultq9.Q9 == '150-200,000'])-1\nadultq9_250   = len(adultq9[adultq9.Q9 == '200-250,000'])-1\nadultq9_300   = len(adultq9[adultq9.Q9 == '250-300,000'])-1\nadultq9_400   = len(adultq9[adultq9.Q9 == '300-400,000'])\nadultq9_500   = len(adultq9[adultq9.Q9 == '400-500,000'])-1\nadultq9_600   = len(adultq9[adultq9.Q9 == '500+'])\nadultq9_n     = len(adultq9[adultq9.Q9 == 'I do not wish to disclose my approximate yearly compensation'])-1\n\nadultq9_compens = (adultq9_10,\n                   adultq9_20,\n                   adultq9_30,\n                   adultq9_40,\n                   adultq9_50,\n                   adultq9_60,\n                   adultq9_70,\n                   adultq9_80,\n                   adultq9_90,\n                   adultq9_100,\n                   adultq9_125, \n                   adultq9_150,\n                   adultq9_200,\n                   adultq9_250,\n                   adultq9_300,\n                   adultq9_400,\n                   adultq9_500,\n                   adultq9_600,\n                   adultq9_n)\nadultq9_compens = np.asarray(adultq9_compens)\nadultq9_compenstotal = adultq9_compens.sum()\nadultq9_compensporc = (adultq9_compens*100)\/adultq9_compenstotal \n\n##Medium adults\nmadultq9    = multmoread.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 9))[1:]\nmadultq9    = madultq9.dropna(how='any')\n\nmadultq9_10    = len(madultq9[madultq9.Q9 == '0-10,000'])-1\nmadultq9_20    = len(madultq9[madultq9.Q9 == '10-20,000'])-1\nmadultq9_30    = len(madultq9[madultq9.Q9 == '20-30,000'])-1\nmadultq9_40    = len(madultq9[madultq9.Q9 == '30-40,000'])-1\nmadultq9_50    = len(madultq9[madultq9.Q9 == '40-50,000'])-1\nmadultq9_60    = len(madultq9[madultq9.Q9 == '50-60,000'])\nmadultq9_70    = len(madultq9[madultq9.Q9 == '60-70,000'])-1\nmadultq9_80    = len(madultq9[madultq9.Q9 == '70-80,000'])-1\nmadultq9_90    = len(madultq9[madultq9.Q9 == '80-90,000'])-1\nmadultq9_100   = len(madultq9[madultq9.Q9 == '90-100,000'])-1\nmadultq9_125   = len(madultq9[madultq9.Q9 == '100-125,000'])-1\nmadultq9_150   = len(madultq9[madultq9.Q9 == '125-150,000'])-1\nmadultq9_200   = len(madultq9[madultq9.Q9 == '150-200,000'])-1\nmadultq9_250   = len(madultq9[madultq9.Q9 == '200-250,000'])-1\nmadultq9_300   = len(madultq9[madultq9.Q9 == '250-300,000'])-1\nmadultq9_400   = len(madultq9[madultq9.Q9 == '300-400,000'])\nmadultq9_500   = len(madultq9[madultq9.Q9 == '400-500,000'])-1\nmadultq9_600   = len(madultq9[madultq9.Q9 == '500+'])\nmadultq9_n     = len(madultq9[madultq9.Q9 == 'I do not wish to disclose my approximate yearly compensation'])-1\n\nmadultq9_compens = (madultq9_10,\n                   madultq9_20,\n                   madultq9_30,\n                   madultq9_40,\n                   madultq9_50,\n                   madultq9_60,\n                   madultq9_70,\n                   madultq9_80,\n                   madultq9_90,\n                   madultq9_100,\n                   madultq9_125, \n                   madultq9_150,\n                   madultq9_200,\n                   madultq9_250,\n                   madultq9_300,\n                   madultq9_400,\n                   madultq9_500,\n                   madultq9_600,\n                   madultq9_n)\nmadultq9_compens = np.asarray(madultq9_compens)\nmadultq9_compenstotal = madultq9_compens.sum()\nmadultq9_compensporc = (madultq9_compens*100)\/madultq9_compenstotal\n\n##Olders\nolderq9    = multolder.filter(regex=\"(Q{t}$|Q{t}_)\".format(t = 9))[1:]\nolderq9    = olderq9.dropna(how='any')\n\nolderq9_10    = len(olderq9[olderq9.Q9 == '0-10,000'])-1\nolderq9_20    = len(olderq9[olderq9.Q9 == '10-20,000'])-1\nolderq9_30    = len(olderq9[olderq9.Q9 == '20-30,000'])-1\nolderq9_40    = len(olderq9[olderq9.Q9 == '30-40,000'])-1\nolderq9_50    = len(olderq9[olderq9.Q9 == '40-50,000'])-1\nolderq9_60    = len(olderq9[olderq9.Q9 == '50-60,000'])\nolderq9_70    = len(olderq9[olderq9.Q9 == '60-70,000'])-1\nolderq9_80    = len(olderq9[olderq9.Q9 == '70-80,000'])-1\nolderq9_90    = len(olderq9[olderq9.Q9 == '80-90,000'])-1\nolderq9_100   = len(olderq9[olderq9.Q9 == '90-100,000'])-1\nolderq9_125   = len(olderq9[olderq9.Q9 == '100-125,000'])-1\nolderq9_150   = len(olderq9[olderq9.Q9 == '125-150,000'])-1\nolderq9_200   = len(olderq9[olderq9.Q9 == '150-200,000'])-1\nolderq9_250   = len(olderq9[olderq9.Q9 == '200-250,000'])-1\nolderq9_300   = len(olderq9[olderq9.Q9 == '250-300,000'])-1\nolderq9_400   = len(olderq9[olderq9.Q9 == '300-400,000'])\nolderq9_500   = len(olderq9[olderq9.Q9 == '400-500,000'])-1\nolderq9_600   = len(olderq9[olderq9.Q9 == '500+'])\nolderq9_n     = len(olderq9[olderq9.Q9 == 'I do not wish to disclose my approximate yearly compensation'])-1\n\nolderq9_compens = (olderq9_10,\n                   olderq9_20,\n                   olderq9_30,\n                   olderq9_40,\n                   olderq9_50,\n                   olderq9_60,\n                   olderq9_70,\n                   olderq9_80,\n                   olderq9_90,\n                   olderq9_100,\n                   olderq9_125, \n                   olderq9_150,\n                   olderq9_200,\n                   olderq9_250,\n                   olderq9_300,\n                   olderq9_400,\n                   olderq9_500,\n                   olderq9_600,\n                   olderq9_n)\nolderq9_compens = np.asarray(olderq9_compens)\nolderq9_compenstotal = olderq9_compens.sum()\nolderq9_compensporc = (olderq9_compens*100)\/olderq9_compenstotal\n","5473aaec":"#Graph\n##Set width of bar\nbarWidth = 0.20\n \n##Sset height of bar\nbars1 = jovq9_compensporc\nbars2 = adultq9_compensporc\nbars3 = madultq9_compensporc\nbars4 = olderq9_compensporc\n \n##Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n\n##Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='Youngers')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='Adults')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='Medium Adults')\nplt.bar(r4, bars4, color='#ADFF2F', width=barWidth, edgecolor='white', label='Olders')\n\n#Add xticks on the middle of the group bars\n#plt.xlabel('group', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(bars1))], \n           ['0-10,000','10-20,000','20-30,000','30-40,000','40-50,000','50-60,000','60-70,000',\n            '70-80,000','80-90,000','90-100,000','100-125,000','125-150,000','150-200,000',\n            '200-250,000','250-300,000','300-400,000','400-500,000','500,000+',\n            'I do not wish to disclose'],\n          rotation=90)\n#plt.setp(xtickNames, rotation=45, fontsize=8)\n\n# Create legend & Show graphic\nplt.xlabel('Percentage by group')\nplt.ylabel('Compensations')\nplt.legend()\nplt.show()","8f05b1db":"dfq39 = multiple.filter(regex=\"Q{t}_Part_2\".format(t = 39))[1:]\ndfq39.dropna(how='any').head(6)","04352cf4":"jovq39 = multjov.filter(regex=\"(Q39_Part_1)\")[1:]\njovq39 = jovq39.dropna(how='any')\n\njovq39_1    = len(jovq39[jovq39.Q39_Part_1 == 'Slightly better'])-1\njovq39_2    = len(jovq39[jovq39.Q39_Part_1 == 'Much better'])-1\njovq39_3    = len(jovq39[jovq39.Q39_Part_1 == 'Neither better nor worse'])-1\njovq39_4    = len(jovq39[jovq39.Q39_Part_1 == 'Slightly better'])-1\njovq39_5    = len(jovq39[jovq39.Q39_Part_1 == 'Much worse'])-1\njovq39_6    = len(jovq39[jovq39.Q39_Part_1 == 'No opinion; I do not know'])\n\njovq39_quality = (jovq39_1,\n                  jovq39_2,\n                  jovq39_3,\n                  jovq39_4,\n                  jovq39_5,\n                  jovq39_6)\njovq39_quality = np.asarray(jovq39_quality)\njovq39_qualitytotal = jovq39_quality.sum()\njovq39_qualityporc = (jovq39_quality*100)\/jovq39_qualitytotal \n\n##\n\nadultq39 = multadult.filter(regex=\"(Q39_Part_1)\")[1:]\nadultq39 = adultq39.dropna(how='any')\n\nadultq39_1    = len(adultq39[adultq39.Q39_Part_1 == 'Slightly better'])-1\nadultq39_2    = len(adultq39[adultq39.Q39_Part_1 == 'Much better'])-1\nadultq39_3    = len(adultq39[adultq39.Q39_Part_1 == 'Neither better nor worse'])-1\nadultq39_4    = len(adultq39[adultq39.Q39_Part_1 == 'Slightly better'])-1\nadultq39_5    = len(adultq39[adultq39.Q39_Part_1 == 'Much worse'])-1\nadultq39_6    = len(adultq39[adultq39.Q39_Part_1 == 'No opinion; I do not know'])\n\nadultq39_quality = (adultq39_1,\n                    adultq39_2,\n                    adultq39_3,\n                    adultq39_4,\n                    adultq39_5,\n                    adultq39_6)\nadultq39_quality = np.asarray(adultq39_quality)\nadultq39_qualitytotal = adultq39_quality.sum()\nadultq39_qualityporc = (adultq39_quality*100)\/adultq39_qualitytotal \n\n##\n\nmadultq39 = multmoread.filter(regex=\"(Q39_Part_1)\")[1:]\nmadultq39 = madultq39.dropna(how='any')\n\nmadultq39_1    = len(madultq39[madultq39.Q39_Part_1 == 'Slightly better'])-1\nmadultq39_2    = len(madultq39[madultq39.Q39_Part_1 == 'Much better'])-1\nmadultq39_3    = len(madultq39[madultq39.Q39_Part_1 == 'Neither better nor worse'])-1\nmadultq39_4    = len(madultq39[madultq39.Q39_Part_1 == 'Slightly better'])-1\nmadultq39_5    = len(madultq39[madultq39.Q39_Part_1 == 'Much worse'])-1\nmadultq39_6    = len(madultq39[madultq39.Q39_Part_1 == 'No opinion; I do not know'])\n\nmadultq39_quality = (madultq39_1,\n                     madultq39_2,\n                     madultq39_3,\n                     madultq39_4,\n                     madultq39_5,\n                     madultq39_6)\nmadultq39_quality = np.asarray(madultq39_quality)\nmadultq39_qualitytotal = madultq39_quality.sum()\nmadultq39_qualityporc = (madultq39_quality*100)\/madultq39_qualitytotal \n\n##\n\nolderq39 = multolder.filter(regex=\"(Q39_Part_1)\")[1:]\nolderq39 = olderq39.dropna(how='any')\n\nolderq39_1    = len(olderq39[olderq39.Q39_Part_1 == 'Slightly better'])-1\nolderq39_2    = len(olderq39[olderq39.Q39_Part_1 == 'Much better'])-1\nolderq39_3    = len(olderq39[olderq39.Q39_Part_1 == 'Neither better nor worse'])-1\nolderq39_4    = len(olderq39[olderq39.Q39_Part_1 == 'Slightly better'])-1\nolderq39_5    = len(olderq39[olderq39.Q39_Part_1 == 'Much worse'])-1\nolderq39_6    = len(olderq39[olderq39.Q39_Part_1 == 'No opinion; I do not know'])\n\nolderq39_quality =  (olderq39_1,\n                     olderq39_2,\n                     olderq39_3,\n                     olderq39_4,\n                     olderq39_5,\n                     olderq39_6)\nolderq39_quality = np.asarray(olderq39_quality)\nolderq39_qualitytotal = olderq39_quality.sum()\nolderq39_qualityporc = (olderq39_quality*100)\/olderq39_qualitytotal ","74fbb0b2":"#Graph\n##Set width of bar\nbarWidth = 0.20\n \n##Set height of bar\nbars1 = jovq39_qualityporc\nbars2 = adultq39_qualityporc\nbars3 = madultq39_qualityporc\nbars4 = olderq39_qualityporc\n \n##Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n\n##Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='Youngers')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='Adults')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='Medium Adults')\nplt.bar(r4, bars4, color='#ADFF2F', width=barWidth, edgecolor='white', label='Olders')\n\n#Add xticks on the middle of the group bars\nplt.xticks([r + barWidth for r in range(len(bars1))], \n           ['Slightly better','Much better','Neither better nor worse','Slightly worse','Much worse','No opinion; I do not know'],\n          rotation=90)\n#plt.setp(xtickNames, rotation=45, fontsize=8)\n\n# Create legend & Show graphic\nplt.xlabel('Opinions')\nplt.ylabel('Percentage by group')\nplt.legend()\nplt.show()","cf11a577":"There is an tendence to decrease the percentage between age ranges in slightly better opinion, and is the similar tendence in slightly worse opinion, so, there are divided opinions. If we consider the sum of the 'better' opinions (Slightly better and much better), and the sum of the 'worse' opinions (Slightly worse  and much worse), there are better opinions about online platforms than traditional education.\n\nMost of young people prefer online education, so we must question why?, What are the differences between online education and traditional education?, and why is better one than other?\n\nThere are some question that we must ask to our next Kagglers.  ;)\n \n\n","d461af4f":"Every day it's necessary the use of programming tools for work, the computers are substituting people as workforce, so it's almost mandatory to learn (at least) programming for analyzing data.\n\nThe question for Kagglers is: When did you learn Data Science or Machine Learning and how it helps to your laboral life?\n\nWe have a big job: we have to find a correlation (if exist) between when did you learn Data Science or Machine Learning (DS\/ML) (before, during o after University) and how it affects in your economical compensation at work. \n\nLet's start with question 35 to find out how to Kagglers did learn:\n\n**What percentage of your current DS\/ML training falls under each category?**\n\nThe options are:\n* Self-Taught\n* Online Courses (Coursera, Udemy, edX, etc)\n* Work\n* University\n* Kaggle competitions\n* Others\n\nEvery Kaggler had to sum a total of 100% in their answers.\n \n Take a look to the answers of question 35 (I exclude NaN values, because don't work dfor us):\n","62e4de8b":"And now, another beautiful graph:","b9e49d20":"**Learning to code at school correlate with the income at laboral life**","27b180a7":"We know how and when Kaggler's started to programming, it's time for an important question: **Learning to code at school correlates with the income at laboral life?**\n\nAnd there is an easy way to analyze that question.\n\nQuestion 9: **What is your current yearly compensation(approximate ** \\$ USD)?**\n\nThe options are:\n* 0  - 10,000\n* 10 - 20,000\n* 20 - 30,000\n* 30 - 40,000\n* 40 - 50,000\n* 50 - 60,000\n* 60 - 70,000\n* 70  - 80,000\n* 80  - 90,000\n* 90  - 100,000\n* 100 - 125,000\n* 125  - 150,000\n* 150  - 200,000\n* 200 - 250,000\n* 250 - 300,000\n* 300 - 400,000\n* 400 - 500,000\n* 500,000+\n* I do not wish to disclose my approximate yearly compensation\n\nLet's see the answers for question 9:\n","2267d601":"We define four groups of age by grouping the following age ranges:\n\n**Youngers**\n-  18 - 21\n-  22 - 24\n-  25 - 29\n\n**Adults**\n- 30 - 34\n- 35 - 39\n- 40 - 44\n\n**Medium adults**\n- 45 - 49\n- 50 - 54\n- 55 - 59\n\n**Older adults**\n- 60 - 69\n- 70 - 79\n- 80+\n\nLet's calculate the mean percentage of where did each group learned DS\/ML:","b623e70f":"The tendence in self-taught increase with the age groups, and the supposition that we make is correct! And, this is related with learning programming at University, because it decrease with the age ranges! :o\n\nInteresting?\n\nNow we know,  how did Kagglers learn DS\/ML, now let's see when did they start learn programming to analyze data.\n\nLet's analize question 24 to find out when Kagglers did learn:\n\n**How long have you been writing code to analyze data?**\n\nThe options are:\n* <1 year\n* 1 - 2 years\n* 3 - 5 years\n* 5 - 10 years\n* 10 - 20 years\n* 20 - 30 years\n* 30 - 40  years\n* 40+ years\n* I have never written code but I want to learn\n* I have never written code and I do not want to learn\n\nTake a look to the answers for question 24 (again, we exclude NaN values):","fc7847cd":"Now, we are interested in the mean for each answer, so, we calculate it and present then in a beautiful pie graph.","cc545bea":"Ok, there are good news, bad news and worst news.\nThe good news are that the big percentage of age range with a great compensation (90-100,000)  are the olders, and most of them learn by self-taught, so there is no necessary to learn code at University to get high compensations.\n\nThe bad news are than almost a quarter of the Kaggler's didn't want to give information :(, sorprendently, adults and medium adults are who give more information. The problem with adults and medium adults is when they will start to get a better compensation?\n\nThe worst news are than young people receive the worst compensation (0-10,000)\n\nSo, young people learned to programming recently, are the age range with the worst compensation, and older people are who have the \"best\" compensation, they started to learning almost 30 years ago.\n\nWhat's the perception of each group about traditional education and online school?\n\nLet's see question 39:\n**How do you perceive the quality of online learning platforms and in-person bootcamps as compares to the quality of the education provided by traditional brick and mortar institutions?**\n\nThe options are:\n* Slighty better\n* Much better\n* Neither better nor worse\n* Slightly worse\n* Much worse\n* No opinion, I do not know\n\nTake a look of answers for question 39: Take a look of answers for question 39: ","ed989cde":"We can do some conclusions for each age group:\n* For youngers:\n    Most of young people (18-29 years) started to learn programming recently 1-2 years ago, and remember than we already know that they learned at University.\n    \n* For adults:\n    Most of adult people (30-44 years) have been programming since 3-10 years ago, and other big percentage since 1-2 years ago, so, we can say they also started to programming recently, almost a quarter of their life.\n\n* For medium adults:\n   There is a similiar percentage of medium adults (45-59) who learned 10-20 years ago and 1-5 years ago, so, we can think than maybe they had to learned for requirement at work, remember than most of them learned by self-taught.\n   \n* For olders:\nMost of older people (60+) have been programming since 30 or more years ago, almost a half of their life. It's easy to think why is the only age group that have a percentage in each range of years, this is the group that learned the most by self-taught, so they have been learning but in different stages of ther lifes. It is also the group with the bigger percentage that do not want to learn.\n\nThere is a similar percentage of each group that want to learn programming.","be366556":"It's easy to see than most people have learned DS\/ML by self-taught, and also by Online courses. \n\nThis is a general view for all the Kagglers, what if we divide them for age range? \n\nWe can suppose that older people learned DS\/ML for self-taught because in the past it not was too common to learn DS\/ML at school."}}