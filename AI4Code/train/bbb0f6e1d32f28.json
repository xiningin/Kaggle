{"cell_type":{"9721ce40":"code","549a55ad":"code","44fd370c":"code","97157643":"code","956c202d":"code","e203c544":"code","54e39391":"code","f3748fa5":"code","68574c78":"code","5ffcf013":"code","9ad6946d":"code","b4921f46":"code","afa230a1":"code","ce3ea8c4":"code","58fd2a4d":"code","2576f792":"code","c7defe3f":"markdown","f5924313":"markdown","42ee2d9e":"markdown"},"source":{"9721ce40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","549a55ad":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeRegressor \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","44fd370c":"agegroup=pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\ncovid_19_india=pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds=pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details=pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')","97157643":"agegroup.head()","956c202d":"hospital_beds=hospital_beds[:-2]\nhospital_beds.fillna(0,inplace=True)\nfor col in hospital_beds.columns[2:]:\n    if hospital_beds[col].dtype=='object':\n        hospital_beds[col]=hospital_beds[col].astype('int64')","e203c544":"covid_19_india['Date']=pd.to_datetime(covid_19_india['Date'])\ncovid_19_india['ConfirmedForeignNational'].replace('-',0,inplace=True)\ncovid_19_india['ConfirmedIndianNational'].replace('-',0,inplace=True)\ncovid_19_india['ConfirmedIndianNational']=covid_19_india['ConfirmedIndianNational'].astype('int64')\ncovid_19_india['ConfirmedForeignNational']=covid_19_india['ConfirmedForeignNational'].astype('int64')\n","54e39391":"lbl=LabelEncoder()\ncovid_19_india['State\/UnionTerritory']=lbl.fit_transform(covid_19_india['State\/UnionTerritory'])\ncovid_19_india['date']=covid_19_india['Date'].dt.day\ncovid_19_india['month']=covid_19_india['Date'].dt.month","f3748fa5":"tree=DecisionTreeRegressor()\nlinear=LinearRegression()\nlogistic=LogisticRegression()\nnb=GaussianNB()\nforest=RandomForestClassifier()","68574c78":"x=covid_19_india[['State\/UnionTerritory','date','month','Cured','Deaths','ConfirmedIndianNational','ConfirmedForeignNational']]\ny=covid_19_india['Confirmed']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","5ffcf013":"tree.fit(x_train,y_train)\nlinear.fit(x_train,y_train)\nlogistic.fit(x_train,y_train)\nnb.fit(x_train,y_train)\nforest.fit(x_train,y_train)","9ad6946d":"from sklearn.metrics import r2_score\nprediction=tree.predict(x_test)\nscore1=r2_score(y_test,prediction)","b4921f46":"prediction=logistic.predict(x_test)\nscore2=r2_score(y_test,prediction)","afa230a1":"prediction=linear.predict(x_test)\nscore3=r2_score(y_test,prediction)","ce3ea8c4":"prediction=forest.predict(x_test)\nscore4=r2_score(y_test,prediction)","58fd2a4d":"prediction=nb.predict(x_test)\nscore5=r2_score(y_test,prediction)","2576f792":"scores=[score1,score2,score3,score4,score5]\nmodels=['DecisionTreeRegressor','LogisticRegression','LinearRegression','RandomForestClassifier','GaussianNB']\nplt.figure(figsize=(20,10))\nplt.title('Comparing Accuracy of different models',fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('models',fontsize=30)\nplt.ylabel('Accuracy',fontsize=30)\nplt.bar(models,scores,color=['red','magenta','cyan','blue','green'],alpha=0.5,linewidth=3,edgecolor='black')\nfor i,v in enumerate(scores):\n    plt.text(i-.15,v+.03,format(scores[i],'.2f'),fontsize=20)","c7defe3f":"# Label Encoding","f5924313":"# Fitting Models","42ee2d9e":"# Train Test Split"}}