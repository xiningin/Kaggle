{"cell_type":{"26598c1a":"code","89bfa09a":"code","5da1135d":"code","39784222":"code","e0715732":"code","aaacc2a0":"code","9acbd9e1":"code","1167427a":"code","da3c1daf":"code","274c3bbd":"code","2eea8a9f":"code","afd353b7":"code","56c4afe9":"code","4df6be62":"code","3eb3ca3c":"code","404a98dd":"code","430db21f":"code","f97526b0":"markdown"},"source":{"26598c1a":"import os\nimport cv2\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","89bfa09a":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model, Model\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, Conv2D, MaxPool2D, Flatten\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","5da1135d":"c_dir = r'\/kaggle\/input\/cat-and-dog\/training_set\/training_set'","39784222":"cat = cv2.imread(os.path.join(c_dir, 'cats\/cat.788.jpg'))\ncat = cv2.cvtColor(cat, cv2.COLOR_BGR2RGB)\nplt.imshow(cat)","e0715732":"# Getting random images from the train folder.\ncategory = ['dogs','cats']\nfor i in category:\n    path = os.path.join(c_dir,i)\n    dir_path = os.listdir(path)\n    random_pick = random.choices(dir_path)\n    \n    for j in random_pick:\n        image = cv2.imread(os.path.join(path, j))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        plt.imshow(image)\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","aaacc2a0":"# Modifying Images:\ntrain_set = ImageDataGenerator(rescale=1.0\/255, \n                               shear_range=0.2, \n                               zoom_range=0.3, \n                               horizontal_flip=True,\n                              vertical_flip=True,\n                              brightness_range=(0.2,1.0),\n                              rotation_range=30).flow_from_directory(directory= c_dir, \n                                                                         target_size=(256,256),\n                                                                         batch_size=32, \n                                                                         class_mode='binary')","9acbd9e1":"# Just moulding the size of the image of test data.\ntest_set = ImageDataGenerator(rescale=1.0\/255).flow_from_directory(directory= c_dir,\n                                                                  target_size=(256,256), \n                                                                  class_mode= 'binary', \n                                                                  batch_size=32)","1167427a":"# Checkpoint for the model to stop training if val_loss stop decresing after 3 epochs.\nearly_stops = EarlyStopping(monitor='val_loss', mode='min',patience=5)\n\n# Model needs to be saved or else you will have to run model again and again which is time costly. \n# --So, Saving the model does\n# helps in saving the best epoch of the trained model by considering val_loss(or can be accuracy) minimum.\ncallbacks_save = ModelCheckpoint('cat-dog classification model.hdf5', monitor='val_loss', mode='min', \n                                 save_best_only=True)","da3c1daf":"cnn = Sequential()\n\ncnn.add(Conv2D(filters=32, kernel_size=3, activation='relu',input_shape=[256,256,3]))#adding input_size based on \n                                                                             #data-augmentation done earlier.\ncnn.add(MaxPool2D(pool_size=3, strides=2))\n#cnn.add(Dropout(0.1)) # adding a Dropout layer.\n\ncnn.add(Conv2D(filters=64, kernel_size=2, activation='relu'))\ncnn.add(MaxPool2D(pool_size=2,strides=2))\n\ncnn.add(Flatten())\ncnn.add(Dense(1,activation='sigmoid')) # Sigmoid function because its best for binary classification.\ncnn.compile(optimizer= 'Adam', loss='binary_crossentropy', metrics=['accuracy'])","274c3bbd":"cnn.fit(x= train_set, validation_data=test_set, epochs=20, callbacks= [early_stops, callbacks_save])","2eea8a9f":"loss = cnn.history.history['loss']\naccuracy = cnn.history.history['accuracy']\nval_loss = cnn.history.history['val_loss']\nval_accuracy = cnn.history.history['val_accuracy']","afd353b7":"plt.plot(loss,color='b',label='Training loss')\nplt.plot(val_loss, color='r', label='validation loss')\nplt.legend()\nplt.title('Training and Validation loss')\nplt.show()","56c4afe9":"plt.plot(accuracy, color='b', label='Training accuracy')\nplt.plot(val_accuracy, color='r', label='Validation accuracy')\nplt.legend()\nplt.title('Training and validation accuracy')\nplt.show()","4df6be62":"model = load_model('cat-dog classification model.hdf5') # Loading model.","3eb3ca3c":"c_dir","404a98dd":"# Importing random image from cat folder:\n\ntest_dir = r'\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats'\npath = os.listdir(test_dir) # listing it directory so random.choice() function can be applied.\nrandom_pick = random.choice(path)\n\nimage = cv2.imread(os.path.join(test_dir, random_pick))\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)","430db21f":"# Rescaling the image as per model which is(128,128,3)\nimage_test = cv2.resize(image, dsize=(256,256))\nimage_test = np.resize(image_test, (1,256,256,3))\n\nprediction = model.predict(image_test) # prediction\n\nprint('prediction is', prediction, 'which is')\n# Since the model predict in array zero or one so function define zero as cat and one as dog.\nfor i in prediction:\n    if i==1:\n        print('dog')\n    else:\n        print('cat')","f97526b0":"## Data Augmentation"}}