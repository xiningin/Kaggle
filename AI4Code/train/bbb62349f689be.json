{"cell_type":{"2daf6061":"code","afb352f5":"code","25dbd318":"code","15aba562":"code","4d267836":"code","50bf9b3a":"code","a829cb92":"code","50402635":"code","da5d2f81":"code","28c59aa0":"code","ac84dc4d":"code","d3015d90":"code","73dbfc7f":"code","33d7b682":"code","188c2b8a":"code","1730cb5e":"code","4e1c3c5e":"code","5657a8c7":"code","d9f15320":"code","2427d3cf":"code","ff5a895a":"code","29da74cb":"code","77edbb4b":"code","192fe257":"code","c91c9d60":"code","0ba2c05d":"code","c80339ef":"code","88b16485":"code","812b70cd":"code","182c04e4":"code","9a9f1a7d":"code","6af11250":"code","d12f6359":"code","6ea437cc":"code","c7c60c62":"code","88854925":"code","524c5a85":"code","27d5566b":"code","26907638":"code","0e8292a7":"code","084ac6a6":"code","0e34a503":"code","e49356aa":"code","df7b57a8":"code","aa1d436b":"code","196c2977":"code","631ed9cd":"code","2dc9c20d":"code","cfa3817d":"markdown","6785152f":"markdown","586b2aae":"markdown","9b9830d6":"markdown","e5994ce8":"markdown","bed51a3c":"markdown","f8fa1a42":"markdown","04f3aee7":"markdown","0580c4d2":"markdown","79c4e6b5":"markdown","c2f7dd95":"markdown","53c8e2cf":"markdown","4cf5a1d2":"markdown","b6666ea8":"markdown","ec8c72fe":"markdown","dac58edf":"markdown","82c74e22":"markdown","55b43cc3":"markdown"},"source":{"2daf6061":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\n!pip install pycaret[full]","afb352f5":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nimport pandas as pd\nimport numpy as np \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pycaret.regression import *\nfrom sklearn.datasets import make_classification\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndata = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv',index_col='row_id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv',index_col='row_id')","25dbd318":"def mem_usage(pandas_obj):\n    if isinstance(pandas_obj,pd.DataFrame):\n        usage_b = pandas_obj.memory_usage(deep=True).sum()\n    else: # we assume if not a df it's a series\n        usage_b = pandas_obj.memory_usage(deep=True)\n    usage_mb = usage_b \/ 1024 ** 2 # convert bytes to megabytes\n    return \"{:03.2f} MB\".format(usage_mb)","15aba562":"mem_usage(train)","4d267836":"mem_usage(test)","50bf9b3a":"train.head()","a829cb92":"test.head()","50402635":"data.head().style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}])","da5d2f81":"data = data.drop('row_id', axis=1)\ndata.head()\n\ndata.date = pd.to_datetime(data.date)\ndata.date.dtype","28c59aa0":"prop = pd.DataFrame(data.groupby('product')['num_sold'].sum()).reset_index()\n\nprop.num_sold = prop.num_sold\/prop.num_sold.sum()\nprop.style.applymap(lambda x : \"background-color: #bff9ff\")\\\n.set_table_styles([{'selector' : '', 'props' : [('border', '2px solid black')]}])","ac84dc4d":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain.describe","d3015d90":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    print(col, train[col].unique())","73dbfc7f":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nprint('train date duration : ', train['date'].min(), train['date'].max())\nprint('test date duration : ', test['date'].min(), test['date'].max())","33d7b682":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    display(pd.DataFrame(train[col].value_counts()))","188c2b8a":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    display(pd.DataFrame(test[col].value_counts()))","1730cb5e":"train.isnull().sum()","4e1c3c5e":"test.isnull().sum()","5657a8c7":"train.isna().sum()","d9f15320":"test.isna().sum()","2427d3cf":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])","ff5a895a":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain_date = train.set_index('date').pivot(columns=['country', 'store', 'product'], values='num_sold')\ntrain_date.head()","29da74cb":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain_month = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country', 'store', 'product'])['num_sold'].mean().unstack([1, 2, 3])\ntrain_month_country = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country'])['num_sold'].mean().unstack()\ntrain_month.head()","77edbb4b":"norway  = data[data.country == 'Norway']\nnorway  = pd.DataFrame(norway.groupby('product')['num_sold'].sum()).reset_index()\n\nfinland = data[data.country == 'Finland']\nfinland = pd.DataFrame(finland.groupby('product')['num_sold'].sum()).reset_index()\n\nsweden  = data[data.country == 'Sweden']\nsweden  = pd.DataFrame(sweden.groupby('product')['num_sold'].sum()).reset_index()","192fe257":"fig = make_subplots(rows=3, cols=1,\n                    specs=[[{'type':'domain'}],[{'type':'domain'}],[{'type':'domain'}]],\n                    vertical_spacing = 0.1)\n\nfig.add_trace(go.Pie(\n             values = norway['num_sold'],\n             labels = norway['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Norway',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),1,1)\n\nfig.add_trace(go.Pie(\n             values = finland['num_sold'],\n             labels = finland['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Finland',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),2,1)\n\nfig.add_trace(go.Pie(\n             values = sweden['num_sold'],\n             labels = sweden['product'],\n             title = dict(text = 'Distribution of<br>Kaggle Products<br>sales in Sweden',\n                          font = dict(size=18, family = 'monospace'),\n                          ),\n             hole = 0.5,\n             hoverinfo='label+percent',),3,1)\n\nfig.update_traces(row=1, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Reds').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=2, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Blues').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.update_traces(row=3, col=1, hoverinfo='label+percent',\n                  textinfo='label+percent',\n                  textfont_size=12,\n                  opacity = 0.8,\n                  showlegend = False,\n                  marker = dict(colors = sns.color_palette('Wistia').as_hex(),\n                              line=dict(color='#000000', width=1)))\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/mZ8B9tGT\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.92, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/wv9Yydft\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.55, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.add_layout_image(\n    dict(\n        source=\"https:\/\/i.postimg.cc\/T27vwFrw\/image.png\",\n        xref=\"paper\", yref=\"paper\",\n        x=0.05, y=0.18, opacity = 0.8,\n        sizex=0.2, sizey=0.2,\n        xanchor=\"left\", yanchor=\"top\"\n    )\n)\n\nfig.update_layout(margin=dict(t=0, b=0, l=0, r=0),\n                  paper_bgcolor = '#d5eff0',\n                  height = 1200,\n                  font_family   = 'monospace',)","c91c9d60":"plt.figure(figsize=(8, 4))\nsns.countplot(x='country', data=train, order=train[\"country\"].value_counts().index[:3],palette = \"turbo\")\nplt.title(\"Total counts of country \", size=15)\nplt.show()","0ba2c05d":"plt.figure(figsize=(8, 4))\nsns.countplot(x='store', data=train, order=train[\"store\"].value_counts().index[:2],palette = \"turbo\")\nplt.title(\"Total counts of stores \", size=15)\nplt.show()","c80339ef":"plt.figure(figsize=(7,2))\nsns.countplot(x='product', data=train, order=train[\"product\"].value_counts().index[:3],palette = \"flag\")\nplt.title(\"Total count kaggle products \", size=13)\nplt.show()","88b16485":"train['date'] = pd.to_datetime(train['date'], format='%Y\/%m\/%d')\nplt.figure(figsize=(15,7))\nsld_time = train.groupby(['date']).sum().reset_index()\nsns.lineplot(x=sld_time.date, y=sld_time.num_sold,)\nplt.title('number sold over time ', fontsize=14)\nplt.show()","812b70cd":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_daily = train.groupby(['date','country'])[['num_sold']].sum().reset_index(level=[0,1])\nfor country in train['country'].unique():\n    display(country_daily[country_daily['country']==country].sort_values(by=['num_sold'], ascending=False).head(30))","182c04e4":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_monthly_country = train.set_index('date').groupby([pd.Grouper(freq='M'),'country'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y='num_sold', hue='country', data=train_monthly_country, ax=ax)\n\nax.set_ylabel('num_sold')\nax.set_title('Monthly Trend by Country', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","9a9f1a7d":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['dayofweek'] = train['date'].dt.dayofweek\ntest['dayofweek'] = test['date'].dt.dayofweek","6af11250":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_dayofweek = train.set_index('date').groupby([pd.Grouper(freq='M'), 'dayofweek'])[['num_sold']].mean()\n\nsns.lineplot(x=\"date\", y='num_sold', hue='dayofweek', data=train_dayofweek, ax=ax)\nax.set_title('Trend by day of the week', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","d12f6359":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['weekend'] = train['dayofweek'].apply(lambda x : x >= 5)\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_weekend = train.set_index('date').groupby([pd.Grouper(freq='M'), 'weekend'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y=\"num_sold\", hue='weekend', data=train_weekend, ax=ax)\nax.set_title('Weekend vs. Weekday Trend Comparison', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","6ea437cc":"country_dayofweek = pd.pivot_table(train, index='country', columns='dayofweek', values='num_sold', aggfunc=np.mean)\ncountry_dayofweek = pd.DataFrame(country_dayofweek.divide(country_dayofweek.sum(axis=1), axis=0).unstack()).reset_index(level=[0,1])\ncountry_dayofweek.rename(columns={0:'num_sold'}, inplace=True)\ncountry_dayofweek","c7c60c62":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(figsize=(12, 9))\ncountry_dayofweek = pd.pivot_table(train, index='country', columns='dayofweek', values='num_sold', aggfunc=np.mean)\ncountry_dayofweek = pd.DataFrame(country_dayofweek.divide(country_dayofweek.sum(axis=1), axis=0).unstack()).reset_index(level=[0,1])\ncountry_dayofweek.rename(columns={0:'num_sold'}, inplace=True)\n# country_dayofweek.reset_index(level=[0,1])\nsns.barplot(x='dayofweek', y='num_sold', hue='country',data=country_dayofweek, ax=ax)\nax.grid(axis='y',alpha=0.5, )\nax.set_xticklabels(['MON', 'TUE', 'WED','THU','FRI','SAT','SUN'])\nax.set_title('Percentage by day of the week by country', fontsize=15, fontweight='bold', loc='left')\nplt.show()","88854925":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_product = pd.pivot_table(train, index='country', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product.divide(country_product.sum(axis=1), axis=0)","524c5a85":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_product_dayofweek = pd.pivot_table(train, index='dayofweek', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product_dayofweek.divide(country_product_dayofweek.sum(axis=1), axis=0)","27d5566b":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\ndef pre_process(df):\n    \n    df['date'] = pd.to_datetime(df['date'])\n    df['week']= df['date'].dt.week\n    df['year'] = 'Y'+df['date'].dt.year.astype(str)\n    df['quarter'] = 'Q'+df['date'].dt.quarter.astype(str)\n    df['day'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df.loc[(df.date.dt.is_leap_year) & (df.dayofyear >= 60),'dayofyear'] -= 1\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = 'WD' + df['date'].dt.weekday.astype(str)\n    df.drop(columns=['date'],inplace=True)   \n\npre_process(train)\npre_process(test)","26907638":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\ntrain.info(), test.info()","0e8292a7":"# Code sorce : https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","084ac6a6":"reg = setup(data = train,\n            target = 'num_sold',\n            normalize=True,\n            normalize_method='robust',\n            transform_target = True,\n            data_split_shuffle = False, \n            create_clusters = False,\n            use_gpu = True,\n            silent = True,\n            fold=10,\n            n_jobs = -1)","0e34a503":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nadd_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)\ntop =compare_models(sort = 'SMAPE',n_select = 3, include = ['catboost','lightgbm','xgboost']) ","e49356aa":"best_models = compare_models(top)","df7b57a8":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nblend = blend_models(top)\npredict_model(blend)","aa1d436b":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nfinal_blend = finalize_model(blend)  \npredict_model(final_blend)","196c2977":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\npreds = predict_model(final_blend, data=test) \nsub = pd.DataFrame(list(zip(test.index,preds.Label)),columns = ['row_id', 'num_sold']) \nsub.to_csv('submission.csv', index = False) \nprint(sub.head(),sub.describe())","631ed9cd":"test.head()","2dc9c20d":"train.head()","cfa3817d":"# Modeling (\ubaa8\ub378\ub9c1)","6785152f":"#### Grouping by month makes it easier to see overall trends. You can see the trend of peaking at the beginning and end of the year and decreasing before and after.\n#### (\uc6d4\ubcc4\ub85c \uadf8\ub8f9\ud654\ud558\uba74 \uc804\ubc18\uc801\uc778 \ucd94\uc138\ub97c \ub354 \uc27d\uac8c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n####  \uc5f0\ucd08\uc640 \uc5f0\ub9d0\uc5d0 \uc815\uc810\uc744 \ucc0d\uace0 \uc804\ud6c4\ub85c \uac10\uc18c\ud558\ub294 \ucd94\uc138\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.)","586b2aae":"#### You can see that Friday has a higher percentage compared to other days of the week.\n#### (\uae08\uc694\uc77c\uc5d0\ub294 \ub2e4\ub978 \uc694\uc77c\uc5d0 \ube44\ud574 \ube44\uc728\uc774 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.)","9b9830d6":"![](https:\/\/t4.ftcdn.net\/jpg\/04\/60\/05\/05\/360_F_460050532_7JjxeTTaZLyk7RTOayql8iX4O6Zlctjs.jpg)","e5994ce8":"#### Create a model using the following library.: (\ub2e4\uc74c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378\uc744 \uc0dd\uc131\ud588\ub2e4.:)\n#### \u25cf Pycaret (\ud30c\uc774\uce90\ub86f)","bed51a3c":"#### Pivot (etc) (\ud53c\ubc97(\uae30\ud0c0))\n####  \u25b6 product ratio by country  (\uad6d\uac00\ubcc4 \uc81c\ud488 \ube44\uc728)\n#### You can check the following to see if there is a preference for each country, and there does not seem to be a significant difference.\n#### (\uad6d\uac00\ubcc4 \uc120\ud638\ub3c4\uac00 \uc788\ub294\uc9c0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud655\uc778\ud560 \uc218 \uc788\uc73c\uba70, \ud070 \ucc28\uc774\ub294 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.)","f8fa1a42":"#### The following is a comparison by creating a weekend column in more detail.\n#### (\ub2e4\uc74c\uc740 \uc8fc\ub9d0 \uce7c\ub7fc\uc744 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc73c\ub85c \uc0dd\uc131\ud558\uc5ec \ube44\uad50\ud55c \uac83\uc774\ub2e4.)","04f3aee7":"#### Train dataset is data for 3 years from 2015 to 2018, and test dataset is data for 1 year from 2019.\n#### (Train \ub370\uc774\ud130\uc14b\uc740 2015\ub144\ubd80\ud130 2018\ub144\uae4c\uc9c0 3\ub144\uac04\uc758 \ub370\uc774\ud130\uc774\uace0, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc740 2019\ub144\ubd80\ud130 1\ub144\uac04\uc758 \ub370\uc774\ud130\uc785\ub2c8\ub2e4.)","0580c4d2":"#### \u25b6 by month (\uc6d4 \ubcc4)\n#### \u25b6 For grouping by month, I recommend using pandas' latest feature grouper.\n####   (\uc6d4 \ubcc4 \uadf8\ub8f9\ud654\ub294 pandas\uc758 \ucd5c\uc2e0 \uae30\ub2a5 \uadf8\ub8f9\ud654\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.)","79c4e6b5":"#### Code to calculate the 'time series data' of the second place in the 'Web Traffic Time Series Prediction' contest held in Kaggle 4 years ago\n#### (4\ub144\uc804 \uce90\uae00\uc5d0\uc11c \uc5f4\ub9b0 '\uc6f9 \ud2b8\ub798\ud53d \uc2dc\uacc4\uc5f4 \uc608\uce21' \ub300\ud68c\uc5d0\uc11c 2\ub4f1\uc744 \ud55c \uc0ac\ub78c\uc758 '\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130'\ub97c \uacc4\uc0b0\ud558\ub294 \ucf54\ub4dc)","c2f7dd95":"# Loading Data (\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30)","53c8e2cf":"# Preprocessing & Visualization (\uc804\ucc98\ub9ac\uc640 \uc2dc\uac01\ud654)\n#### Time series data needs to be preprocessed for data analysis, feature engineering, visualization, etc.\n#### (\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ub294 \ub370\uc774\ud130 \ubd84\uc11d, \ud53c\uccd0 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \uc2dc\uac01\ud654 \ub4f1\uc744 \uc704\ud574 \uc804\ucc98\ub9ac\ud574\uc57c \ud569\ub2c8\ub2e4.)","4cf5a1d2":"#### \u25b6 The date column type is text. Convert to datetime type for easy handling in pandas. \n#### (\ub0a0\uc9dc \uc5f4 \uc720\ud615\uc740 \ud14d\uc2a4\ud2b8\uc785\ub2c8\ub2e4. pandas\uc5d0\uc11c \uc27d\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d datetime\ud615\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.)","b6666ea8":"#### This year is the year of the black tiger. happy New Year.\n#### (\uc62c\ud574\ub294 \ud751\ud638\uc758 \ud574\uc785\ub2c8\ub2e4. \uc0c8\ud574 \ubcf5 \ub9ce\uc774 \ubc1b\uc73c\uc138\uc694.)","ec8c72fe":"#### Pivot Table (time) (\ud53c\ubc97 \ud14c\uc774\ube14(\uc2dc\uac04))\n#### \u25b6 by date (\ub0a0\uc9dc \ubcc4)","dac58edf":"#### You can check the following to see if there is a preference for each day of week, and there does not seem to be a significant difference.\n#### (\uc694\uc77c\ubcc4 \uc120\ud638\ub3c4\uac00 \uc788\ub294\uc9c0 \ub2e4\uc74c\uacfc \uac19\uc774 \ud655\uc778\ud560 \uc218 \uc788\uc73c\uba70, \ud070 \ucc28\uc774\ub294 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.)","82c74e22":"#### Day of Week (\uc694\uc77c)\n#### Time-series data, such as product sales, often have different distributions on weekends and weekdays. Using the day of the week as a feature is often very effective.\n#### (\uc81c\ud488 \ud310\ub9e4\uc640 \uac19\uc740 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ub294 \uc885\uc885 \uc8fc\ub9d0\uacfc \uc8fc\uc911\uc758 \ubd84\ud3ec\uac00 \ub2e4\ub985\ub2c8\ub2e4. \uc694\uc77c\uc744 \uae30\ub2a5\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \uc885\uc885 \ub9e4\uc6b0 \ud6a8\uacfc\uc801\uc785\ub2c8\ub2e4.)","55b43cc3":"#### \u25b6 This is the code to check the total file size.\n####   If you put 'train' and 'test' in '( )', you can check the capacity of each.\n####   (\uc804\uccb4 \ud30c\uc77c \uc6a9\ub7c9\uc744 \ud655\uc778\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. '( )' \uc548\uc5d0 'train'\uacfc 'test'\ub97c \ub123\uc73c\uba74 \uac01\uac01\uc758 \uc6a9\ub7c9\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.)"}}