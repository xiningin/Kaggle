{"cell_type":{"312ab392":"code","4bb74769":"code","846a7920":"code","09d83741":"code","fb5bc650":"code","dbc175d7":"code","5833d70d":"code","5fe449dc":"code","03a62c9a":"code","529ff5d0":"code","741bf663":"code","29ed2e54":"code","72244fb8":"code","dcf641ac":"code","26647b1c":"code","04b2d2cd":"code","d0ecc862":"code","1fe7456d":"code","b888525b":"code","02c44e28":"code","fd1b9b91":"code","d5ac01db":"code","b1ce6de4":"code","ea406a04":"code","491f5bb1":"code","d1ee0726":"code","c5ab0fb0":"code","ff4f636a":"code","e370c115":"code","5e9a429c":"code","01416cd4":"markdown","873e2d72":"markdown","ab8d3354":"markdown","bc5d1b8a":"markdown","361ce0a8":"markdown","61837bb2":"markdown","cfe71d54":"markdown","fad6f10e":"markdown","d353dbb2":"markdown","52aa6420":"markdown","e1b2383b":"markdown","e1b340a0":"markdown","e6a5b32b":"markdown","6dc18052":"markdown","ed281265":"markdown","2404a5e7":"markdown","c2aa1d47":"markdown"},"source":{"312ab392":"# IMPORT THE NECESSARY PACKAGES\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport datetime\nimport plotly.express as px\nfrom collections import Counter\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","4bb74769":"df_path = \"..\/input\/netflix-shows\/netflix_titles.csv\"\n\ndf = pd.read_csv(df_path)\ndf_copy = df.copy()","846a7920":"df.head(5)","09d83741":"# Sort rows from old date to new date based on \"date_added\" column\ndf['date_added'] =pd.to_datetime(df.date_added)\ndf = df.sort_values('date_added')","fb5bc650":"# Analyzing NaN values\ndef check_nan_values(dataset):\n    for col in dataset:\n        print(\"- {} = {}\".format(col, df[col].isnull().sum()))\n        \ncheck_nan_values(df)","dbc175d7":"# deleting unnecessary columns\ndel df['show_id']","5833d70d":"# snchronize the most repeated rating value to columns with rating value \"NaN\"\ndf['rating'] = df['rating'].fillna(value=df['rating'].value_counts().idxmax())","5fe449dc":"# delete the NaN rows in the date_add column (10 row)\ndf.dropna(subset=['date_added'],inplace=True)","03a62c9a":"# changing the values of the director from NaN to \"unknown\"\ndf['director'] = df['director'].fillna(\"unknown\")","529ff5d0":"# changing the cast values from NaN to \"unknown\"\ndf['cast'] = df['cast'].fillna(\"unknown\")","741bf663":"check_nan_values(df)","29ed2e54":"# Browsing unique countries\ndf.country.unique()[10:20]","72244fb8":"# changing the country values from NaN to \"other\"\ndf.country = df.country.fillna(\"other\")","dcf641ac":"def fix_country_col(data):\n    new_col = []\n    for row in data[\"country\"]:\n        new_col.append(row.split(\",\"))\n    return new_col\n\ndef fix_cast_col(data):\n    new_col = []\n    for row in data[\"cast\"]:\n        new_col.append(row.split(\",\"))\n    return new_col\n\ndef fix_listed_in_col(data):\n    new_col = []\n    for row in data[\"listed_in\"]:\n        new_col.append(row.lower().replace(\"&\",\",\").replace(\"tv\",\"\").split(\",\"))\n    return new_col\n\ndf['country'] = fix_country_col(df)\ndf['listed_in'] = fix_listed_in_col(df)\ndf['cast'] = fix_cast_col(df)","26647b1c":"# I don't need detailed date in \"date_added\" column. \n# I am converting the format from \"year-month-day\" to \"year\" format.\ndf['date_added'] = [col.strftime('%Y') for col in df['date_added']]","04b2d2cd":"df.head(5)","d0ecc862":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\n\ntypes = df['type'].value_counts().reset_index()\n\ntrace = go.Pie(labels=types['index'], values=types['type'], \n               pull=[0.1, 0], marker=dict(colors=[\"#fed049\", \"#007580\"]),\n               title=\"Netflix Content Types\")\nfig = go.Figure([trace])\nfig.show()","1fe7456d":"def get_categories(data):\n    categories = {}\n    for listed_in in data['listed_in']:\n        for category in listed_in:\n            category = category.lower().strip()\n            if category in categories: # increase current category count\n                categories[category] = categories[category] + 1\n            else: # create new category in categories object\n                categories[category] = 1\n    return pd.DataFrame(categories.values(), index= categories.keys())\n\ncategories = get_categories(df).reset_index()\ncategories.columns = [\"category\", \"count\"]","b888525b":"sorted_category=  categories.sort_values(by=\"count\")\ntrace = go.Bar(x=sorted_category['count'], y=sorted_category['category'], orientation=\"h\", \n               marker_color='MediumPurple')\nlayout = go.Layout(title=\"Countries with most content\", height=700, \n                   legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure([trace], layout=layout)\nfig.show()","02c44e28":"movies = df[df[\"type\"]==\"Movie\"]['date_added'].value_counts().rename('count').reset_index()\ntv_shows = df[df[\"type\"]==\"TV Show\"]['date_added'].value_counts().rename('count').reset_index()\n\n# sorting by years\nmovies = movies.sort_values(by=\"index\")\ntv_shows = tv_shows.sort_values(by=\"index\")\n\ntrace1 = go.Bar(x=movies['index'], \n                    y=movies['count'],\n                    name=\"Movies\",\n                    marker_color='MediumPurple')\ntrace2 = go.Bar(x=tv_shows['index'], \n                    y=tv_shows['count'],\n                    name=\"TV Shows\",\n                    marker_color='DarkSlateGrey')\nlayout = go.Layout(title=\"Number of content additions by years\", height=500)\nfig = go.Figure([trace1,trace2], layout=layout)\nfig.show()","fd1b9b91":"movies = df[df[\"type\"]==\"Movie\"]['release_year'].value_counts().rename('count').reset_index()\ntv_shows = df[df[\"type\"]==\"TV Show\"]['release_year'].value_counts().rename('count').reset_index()\n\n# sorting by years\nmovies = movies.sort_values(by=\"index\")\ntv_shows = tv_shows.sort_values(by=\"index\")\n\n\ntrace1 = go.Scatter(x=movies['index'], \n                    y=movies['count'],\n                    name=\"Movies\",\n                    marker_color='MediumPurple')\ntrace2 = go.Scatter(x=tv_shows['index'], \n                    y=tv_shows['count'],\n                    name=\"TV Shows\",\n                    marker_color='DarkSlateGrey')\nlayout = go.Layout(title=\"Production years of contents\", height=500)\nfig = go.Figure([trace1,trace2], layout=layout)\nfig.show()","d5ac01db":"def get_country_code(country):\n    country_codes = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\n    if country == \"South Korea\":\n        return \"KOR\"\n    elif country == \"Notrh Korea\":\n        return \"PRK\"\n    elif country == \"West Germany\" or country == \"East Germany\":\n        return \"DEU\"\n    elif country == \"Bahamas\":\n        return \"BHM\"\n    elif country == \"Soviet Union\":\n        return \"RUS\"\n    else:\n        try:\n            return country_codes[country_codes[\"COUNTRY\"] == country].reset_index()[\"CODE\"][0]\n        except:\n            return None\n        \n\ndef get_countries(data):\n    countries = {}\n    for cs in data['country']:\n        for country in cs:\n            if country == \"other\":\n                continue\n            country = country.strip()\n            if country in countries: # increase current country count\n                countries[country][0] = countries[country][0] + 1\n            else: # create new country in countries object\n                if get_country_code(country) is not None:\n                    countries[country] = [1, get_country_code(country)]\n                        \n    return pd.DataFrame(countries.values(), index= countries.keys())\n\ncountries = get_countries(df).reset_index()\ncountries.columns = [\"country\", \"count\", \"code\"]","b1ce6de4":"fig = px.choropleth(countries, \n                    locations=\"code\",\n                    color=\"count\",\n                    hover_name=\"country\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","ea406a04":"ratings = df.groupby(\"rating\").size().reset_index()\nratings.columns = [\"rating\", \"size\"]\n\ntrace = go.Bar(x=ratings['rating'],\n               y=ratings['size'],\n               marker_color='MediumPurple')\nlayout = go.Layout(title=\"Ratings\", height=500)\nfig = go.Figure([trace], layout=layout)\nfig.show()","491f5bb1":"def get_cast(data):\n    casts = {}\n    for c in data['cast']:\n        for cast in c:\n            cast = cast.lower().strip()\n            if cast in casts: # increase current cast count\n                casts[cast] = casts[cast] + 1\n            else: # create new cast in casts object\n                casts[cast] = 1\n    return pd.DataFrame(casts.values(), index= casts.keys())\n\ncasts = get_cast(df).reset_index()\ncasts.columns = [\"cast\", \"count\"]\nsorted_cast = casts[casts[\"cast\"] != \"unknown\"].sort_values(by=\"count\", ascending=[False])","d1ee0726":"top20_casts = sorted_cast[0:20]\n\nfig = px.funnel(top20_casts, x=\"count\", y=\"cast\", color='count')\nfig.show()","c5ab0fb0":"df","ff4f636a":"movies = df[df['type'] == \"Movie\"]\nmovies['duration'] = movies['duration'].str.replace(' min','')\nmovies['duration'] = movies['duration'].astype(str).astype(int)\n\nsns.set(style=\"darkgrid\")\nsns.kdeplot(data=movies['duration'], shade=True)","e370c115":"imdb_ratings=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv', usecols=['title','year','genre'])\n\nratings = pd.DataFrame({'Title':imdb_titles.title,\n                    'Release Year':imdb_titles.year,\n                    'Rating': imdb_ratings.weighted_average_vote,\n                    'Genre':imdb_titles.genre})\nratings.drop_duplicates(subset=['Title','Release Year','Rating'], inplace=True)\n\nratings.dropna()\njoint_data=ratings.merge(df_copy,left_on='Title',right_on='title',how='inner')\njoint_data=joint_data.sort_values(by='Rating', ascending=False)","5e9a429c":"top_rated=joint_data[0:10]\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating')\nfig.show()","01416cd4":"## What is the number of content added to Netflix by years? I want to examine TV Show and Movie types separately.","873e2d72":"In this project, we will do some analysis by looking at the data of movies and TV shows on Netflix. As a result of these analyzes:\n- How many Netflix content has been produced in which country?\n- How many movies and TV shows?\n- What are the categories of content available on Netflix? Which movie categories have the most and least published content?\n- How is Netflix content according to the rating order?\n- What are the publishing dates and production dates of content on Netlix?\n- Which age groups are the content on Netflix targeting?\n- Which players are the most featured in Netflix content?\n- What are the durations of movies and TV shows on Netflix?\n\nWe will answer these and similar questions in this project.","ab8d3354":"The string problem arises here. Many movies and TV shows have been released in more than one country. However, since it is saved as a string instead of an array while it is being saved in the data set, it is not clear which movie or series was shown in which country. As a result, we need to change the data a little bit here. For this, I will convert the structure as a string to an array string structure.\n\nThis problem also exists with the \"listed_in\" and \"cast\" columns. I will apply the same method to these.","bc5d1b8a":"<div style=\"position: relative;margin:auto;\">\n    <div style=\"font-size:30px; background: #2b2e4a; text-align:center; border-radius: 8px; padding: 10px; width: 500px;\">\n        <h1>Netflix - EDA <\/h1>\n    <\/div>\n<\/div>\n","361ce0a8":"We see that most of the content broadcast on Netflix is created by TV shows. But here it is wrong to comment directly: \"The number of TV shows is more than the number of TV series and movies\" is wrong. TV shows take less time than serials. Most of the series are over 1 season. There is no counting according to the season here. For example,  The Walking Dead series is 9 season, but the season and the number of episodes do not reflect the chart above. The chart above covers the number of different contents.","61837bb2":"### How many content has been produced or published in which country?","cfe71d54":"## What are the actual release year for uploaded content?","fad6f10e":"### Preparing data for analysis","d353dbb2":"## What are the types of content available on Netflix? Comparison.","52aa6420":"We can have multiple genres of TV series or movie. For example; a horror movie can also fall into the thriller category. That's why I counted each category regardless of the content while I was doing the ranking above. In this way, I have actually achieved the category ranking of Netflix content. I achieved the above ranking by combining movies and TV shows.","e1b2383b":"### Top rated 10 movies on Netflix are:","e1b340a0":"### Data Loading","e6a5b32b":"### Data Viewing","6dc18052":"### Which player has been in how many content?","ed281265":"## What are the types of content? How many content has been produced in which types?","2404a5e7":"### What is the duration of the movies? ","c2aa1d47":"### What are the ratings and number of ratings for content on Netflix?"}}