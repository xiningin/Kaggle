{"cell_type":{"4133892e":"code","a8372a83":"code","e8fbea13":"code","2281ff1a":"code","4048f202":"code","2bcad568":"code","9da03afd":"code","972742db":"code","79389deb":"code","f5919fa9":"code","3070da07":"code","febf12df":"code","56ce01fe":"code","d84563d7":"code","1d1e28ec":"code","107ed223":"code","6dbb0fce":"code","ed74bbbc":"code","c8362b4d":"code","086ccf74":"code","58787c71":"code","2b74d988":"code","71ef4921":"code","c2d445b7":"code","33617c23":"code","6eabb59d":"code","26c94808":"code","91048c79":"code","a4e4392f":"code","bff93b82":"code","8f53b521":"code","695f5ec9":"code","d25a37f5":"code","af511d8d":"code","f943b201":"code","1f3a3116":"code","a4f1f2cd":"code","f31763ac":"code","b23df396":"code","96537416":"code","02bcf81f":"code","c93aa086":"code","5ad94a35":"markdown","899f8685":"markdown","aaf262c1":"markdown","a6ea8680":"markdown","73710f73":"markdown","16123568":"markdown","fa69c620":"markdown","717fa72f":"markdown","c96301df":"markdown","ebd0d4d7":"markdown","21eb3cfe":"markdown","18c480d2":"markdown","9f5d7ffa":"markdown","e71b848e":"markdown","ff2cfea6":"markdown","6ffb7656":"markdown","e14bc664":"markdown","3505dca8":"markdown","b68c57e9":"markdown","4ab897a4":"markdown"},"source":{"4133892e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8372a83":"import pandas as pd\nimport csv\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport time\nfrom time import gmtime, strftime\nfrom plotly.subplots import make_subplots\nimport plotly.offline as py\nimport json\nfrom urllib.request import urlopen\nfrom os.path import isfile, join\nfrom os import listdir\nfrom tkinter import Tcl\n\n#pd.set_option('display.max_rows', 500)\npy.init_notebook_mode(connected=True)","e8fbea13":"# Seta o diret\u00f3rio onde os arquivos se encontram no Kaggle.\npath = '\/kaggle\/input\/jhucovid19\/csse_covid_19_data\/csse_covid_19_daily_reports\/'\n\n# Busca todos os arquivos.\nlist_arqs = [arq for arq in listdir(path) if isfile(join(path, arq))]\n\n# Ordena pelo nome do arquivo.\nlist_arqs = Tcl().call('lsort', '-dict', list_arqs)\n# pega o \u00faltimo arquivo inserido que n\u00e3o seja o README.\nlast_arq = list_arqs[-2]\nlast_arq","2281ff1a":"dataset_url = f'\/kaggle\/input\/jhucovid19\/csse_covid_19_data\/csse_covid_19_daily_reports\/{last_arq}'\n\ndf_global = pd.read_csv(dataset_url, delimiter=\",\")\ndf_global.head()","4048f202":"df_ww = df_global\ndf_ww = df_ww.drop(['FIPS', 'Admin2', 'Province_State', 'Last_Update', 'Lat', 'Long_', 'Combined_Key'], axis=1)\ndf_ww = df_ww.groupby(['Country_Region']).sum()[['Confirmed', 'Deaths', 'Recovered', 'Active']]\ndf_ww = df_ww.sort_values(['Confirmed'], ascending=False).reset_index()\n\ndf_ww['Mortality'] = np.round((df_ww.Deaths \/ df_ww.Confirmed) * 100, 2)","2bcad568":"global_confirmed = df_ww.Confirmed.sum()\nglobal_deaths = df_ww.Deaths.sum()\nglobal_recovered = df_ww.Recovered.sum()\nglobal_active = df_ww.Active.sum()\nglobal_mortality = global_deaths \/ global_confirmed","9da03afd":"print(f\"Casos confirmados ao redor Mundo: {global_confirmed}\")\nprint(f\"Mortes confirmadas ao redor Mundo: {global_deaths}\")\nprint(f\"Casos recuperados ao redor Mundo: {global_recovered}\")\nprint(f\"Casos ativos ao redor do Mundo: {global_active}\")\nprint(f\"Taxa de Mortalidade Mundial: {global_mortality * 100:.03}%\")","972742db":"df_filt = df_ww.copy()\ndf_filt = df_filt.set_index('Country_Region')\ndf_filt = df_filt.head(20)  \n\ndf_filt = df_filt.style.background_gradient(cmap='Reds',subset=[\"Confirmed\"])\\\n                       .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                       .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                       .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                       .background_gradient(cmap='Reds',subset=[\"Mortality\"])\\\n                       .format(\"{:.2f}\", subset=[\"Mortality\"])\\\n\ndf_filt","79389deb":"df_filt = df_ww.copy()\ndf_filt = df_filt.head(10)\n\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', \n           x=df_filt.Confirmed, \n           y=df_filt.Country_Region,\n           orientation='h',\n           text=df_filt.Confirmed,\n           textposition='auto',\n           hoverinfo='none',\n           marker={'color': 'blue'})\n])\n\nfig.update_layout(title=f\"Pa\u00edses com mais Casos Confirmados (Top 10)\",\n                  yaxis=dict(autorange=\"reversed\"))\n\nfig.show()","f5919fa9":"df_filt = df_ww.copy()\ndf_filt = df_filt.sort_values(['Deaths'], ascending=False)\ndf_filt = df_filt.head(10)\n\nfig = go.Figure(data=[\n    go.Bar(name='Deaths', \n           x=df_filt.Deaths, \n           y=df_filt.Country_Region,\n           orientation='h',\n           text=df_filt.Deaths,\n           textposition='auto',\n           hoverinfo='none',\n           marker={'color': 'firebrick'})\n])\n\nfig.update_layout(title=f\"Pa\u00edses com mais Mortes (Top 10)\",\n                  yaxis=dict(autorange=\"reversed\"))\n\nfig.show()","3070da07":"df_filt = df_ww.copy()\ndf_filt = df_filt.sort_values(['Mortality'], ascending=False)\ndf_filt = df_filt.head(10)\n\nfig = go.Figure(data=[\n    go.Bar(name='Mortality', \n           x=df_filt.Mortality, \n           y=df_filt.Country_Region,\n           orientation='h',\n           text=df_filt.Mortality,\n           textposition='auto',\n           hoverinfo='none',\n           marker={'color': 'firebrick'})\n])\n\nfig.update_layout(title=f\"Pa\u00edses com os maiores percentuais de Mortalidade (Top 10)\",\n                  yaxis=dict(autorange=\"reversed\"))\n\nfig.show()","febf12df":"df_filt = df_ww.copy()\ndf_filt = df_filt.sort_values(['Recovered'], ascending=False)\ndf_filt = df_filt.head(10)\n\nfig = go.Figure(data=[\n    go.Bar(name='Recovered', \n           x=df_filt.Recovered, \n           y=df_filt.Country_Region,\n           orientation='h',\n           text=df_filt.Recovered,\n           textposition='auto',\n           hoverinfo='none',\n           marker={'color': 'green'})\n])\n\nfig.update_layout(title=f\"Pa\u00edses com mais Casos Recuperados (Top 10)\",\n                  yaxis=dict(autorange=\"reversed\"))\n\nfig.show()","56ce01fe":"df_filt = df_ww.copy()\ndf_filt = df_filt.sort_values(['Active'], ascending=False)\ndf_filt = df_filt.head(10)\n\nfig = go.Figure(data=[\n    go.Bar(name='Active', \n           x=df_filt.Active, \n           y=df_filt.Country_Region,\n           orientation='h',\n           text=df_filt.Active,\n           textposition='auto',\n           hoverinfo='none',\n           marker={'color': 'orangered'})\n])\n\nfig.update_layout(title=f\"Pa\u00edses com mais Casos Ativos (Top 10)\",\n                  yaxis=dict(autorange=\"reversed\"))\n\nfig.show()","d84563d7":"df = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv', delimiter=\",\")\ndf = df.sort_values(['state', 'region', 'date'])\n\n# Adiciona as colunas com casos\/mortes novas por dia.\ndf['new_cases'] = np.where(df.state.eq(df.state.shift()), df.cases.diff(), 1)\ndf['new_deaths'] = np.where(df.state.eq(df.state.shift()), df.deaths.diff(), 1)\n\n# Adiciona a coluna UF ao DataFrame.\nUF = {'Acre':'AC',\n      'Alagoas':'AL',\n      'Amap\u00e1':'AP',\n      'Amazonas':'AM',\n      'Bahia':'BA',\n      'Cear\u00e1':'CE',\n      'Distrito Federal':'DF',\n      'Esp\u00edrito Santo':'ES',\n      'Goi\u00e1s':'GO',\n      'Maranh\u00e3o':'MA',\n      'Mato Grosso':'MT',\n      'Mato Grosso do Sul':'MS',\n      'Minas Gerais': 'MG',\n      'Par\u00e1':'PA',\n      'Para\u00edba':'PB',\n      'Paran\u00e1': 'PR',\n      'Pernambuco':'PE',\n      'Piau\u00ed':'PI',\n      'Rio de Janeiro':'RJ',\n      'Rio Grande do Norte':'RN',\n      'Rio Grande do Sul':'RS',\n      'Rond\u00f4nia':'RO',\n      'Roraima':'RR',\n      'Santa Catarina':'SC',\n      'S\u00e3o Paulo':'SP',\n      'Sergipe':'SE',\n      'Tocantins':'TO'}\n\ndf['uf'] = df.state.map(UF)\n\n# Converte a coluna data de str para datetime.\ndf.date = pd.to_datetime(df.date, format=\"%Y-%m-%d\")\n\n# Cria novas colunas.\ndf[\"year\"] = df.date.dt.year\ndf[\"month\"] = df.date.dt.month\ndf[\"dayofweek\"] = df.date.dt.dayofweek\ndf[\"weekofyear\"] = df.date.dt.weekofyear\ndf[\"weekend\"] = 0\n\ndf.loc[(df.dayofweek == 5) | (df.dayofweek == 6), 'weekend'] = 1\n\n# Importa o dataset regi\u00f5es\/popula\u00e7\u00e3o.\ndf_pop = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_population_2019.csv', sep=\",\", error_bad_lines=False, index_col=False, warn_bad_lines=False)\ndf_pop = df_pop.groupby(['region', 'state']).sum()[['population']].reset_index()\n\ndf = pd.merge(df, df_pop, on=['region', 'state'])\n\ndf.tail()","1d1e28ec":"df.info()","107ed223":"df_copy = df.copy()\n\n# Cria um DF agregado por Data;\ndf_br = df_copy.groupby(['date']).sum()[['cases',\n                                         'deaths',\n                                       ]].reset_index()\n\ndf_br['new_cases'] = df_br.cases.diff()\ndf_br['new_deaths'] = df_br.deaths.diff()\n\n# Importa o DF com as colunas recovered e monitoring.\ndf_macro = pd.read_csv('\/kaggle\/input\/corona-virus-brazil\/brazil_covid19_macro.csv', sep=\",\", error_bad_lines=False, index_col=False, warn_bad_lines=False)\n# Converte a coluna data de str para datetime.\ndf_macro.date = pd.to_datetime(df_macro.date, format=\"%Y-%m-%d\")\n# Deleta todas as colunas desnecess\u00e1rias.\ndf_macro = df_macro.drop(['week', 'cases', 'deaths', 'country'], axis=1)\n\ndf_br = pd.merge(df_br, df_macro, on=['date'])\n\ndf_br['mortality'] = df_br.deaths \/ df_br.cases\n\ndf_br.tail()","6dbb0fce":"min_date = min(df.date)\nmin_date_en = f'{min_date.year}-{min_date.month:02d}-{min_date.day:02d}'\nmin_date_br = f'{min_date.day:02d}\/{min_date.month:02d}\/{min_date.year}'\n\nmax_date = max(df.date)\nmax_date_en = f'{max_date.year}-{max_date.month:02d}-{max_date.day:02d}'\nmax_date_br = f'{max_date.day:02d}\/{max_date.month:02d}\/{max_date.year}'\n\nlast_update = df_br.date.iloc[-1]\nlast_update_en = f'{last_update.year}-{last_update.month:02d}-{last_update.day:02d}'\nlast_update_br = f'{last_update.day:02d}\/{last_update.month:02d}\/{last_update.year}'\n\nfirst_case = df.sort_values(['date']).query('cases > 0').date.iloc[0]\nfirst_case_en = f'{first_case.year}-{first_case.month:02d}-{first_case.day:02d}'\nfirst_case_br = f'{first_case.day:02d}\/{first_case.month:02d}\/{first_case.year}'\n\nfirst_death = df.sort_values(['date']).query('deaths > 0').date.iloc[0]\nfirst_death_en = f'{first_death.year}-{first_death.month:02d}-{first_death.day:02d}'\nfirst_death_br = f'{first_death.day:02d}\/{first_death.month:02d}\/{first_death.year}'\n\nconfirmed_cases = df_br.cases.iloc[-1]\nconfirmed_deaths = df_br.deaths.iloc[-1]\n\nnew_cases_today = df_br.new_cases.iloc[-1]\nnew_deaths_today = df_br.new_deaths.iloc[-1]\n\nmortality_rate = round((confirmed_deaths \/ confirmed_cases) * 100, 2)","ed74bbbc":"print(f\"\u00daltima Atualiza\u00e7\u00e3o: {last_update_br}\\n\")\nprint(f\"Data do Primeiro Caso Confirmado: {first_case_br}\")\nprint(f\"Data da primeira Morte: {first_death_br}\\n\")\nprint(f\"Casos Acumulados: {confirmed_cases}\")\nprint(f\"Mortes Acumuladas: {confirmed_deaths}\")\nprint(f\"Taxa de Mortalidade: {mortality_rate}%\\n\")\nprint(f\"Novos Casos em {last_update_br}: {int(new_cases_today)}\")\nprint(f\"Novas Mortes em {last_update_br}: {int(new_deaths_today)}\")","c8362b4d":"df.isnull().values.any()","086ccf74":"df_br.isnull().values.any()","58787c71":"# +1 = Forte correla\u00e7\u00e3o positiva.\n#  0 = N\u00e3o h\u00e1 correla\u00e7\u00e3o.\n# -1 = Forte correla\u00e7\u00e3o negativa.\ndf.corr()","2b74d988":"def plot_corr(df, size=15):\n    corr = df.corr()\n    fig, ax = plt.subplots(figsize = (size, size))\n    ax.matshow(corr)\n    \n    plt.xticks(range(len(corr.columns)), corr.columns)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n\nplot_corr(df)","71ef4921":"df_copy = df_br.copy()\n\ndate_x = df_copy['date']\nconfirmed_y = df_copy['cases']\nmortes_y = df_copy['deaths']\nrecovered_y = df_copy['recovered']\nmonitoring_y = df_copy['monitoring']\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=date_x, \n                         y=confirmed_y,\n                         mode='lines+markers',\n                         name='Casos Confirmados'))\n\nfig.add_trace(go.Scatter(x=date_x, \n                         y=mortes_y,\n                         mode='lines+markers',\n                         name='Mortes Confirmadas'))\n\nfig.add_trace(go.Scatter(x=date_x, \n                         y=recovered_y,\n                         mode='lines+markers',\n                         name='Casos Recuperados'))\n\nfig.add_trace(go.Scatter(x=date_x, \n                         y=monitoring_y,\n                         mode='lines+markers',\n                         name='Casos em Monitoramento',\n                         line=dict(color='Pink', width=2)))\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title=f'Crescimento dos casos de Covid-19 no Brasil em {max_date_br}',\n                  yaxis_title='N\u00famero de Casos', \n                  legend=dict(x=0.01,y=0.98))\n\nfig.show()","c2d445b7":"df_copy = df_br.copy()\n\ndate_x = df_copy['date']\nconfirmed_y = df_copy['new_cases']\nmortes_y = df_copy['new_deaths']\n\n# Criando as linhas\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=date_x, \n                         y=confirmed_y,\n                         mode='lines+markers',\n                         name='Casos Confirmados'))\n\nfig.add_trace(go.Scatter(x=date_x, \n                         y=mortes_y,\n                         mode='lines+markers',\n                         name='Mortes Confirmadas'))\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title=f'Registro de novos casos de Covid-19 no Brasil por dia at\u00e9 {max_date_br}',\n                  yaxis_title='N\u00famero de Casos',\n                  legend=dict(x=0.01,y=0.98))\n\nfig.show()","33617c23":"df_copy = df_br.copy()\n\ndate_x = df_copy['date']\nrate_y = df_copy['mortality']\n\n# Criando as linhas\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=date_x, y=rate_y,\n                    mode='lines',\n                    name='Mortalidade'))\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title= f\"Taxa de Mortalidade no Brasil ao Longo do Tempo at\u00e9 {max_date_br}\",\n                  yaxis_title='Taxa de Mortalidade', \n                  yaxis_tickformat = '.1%')\n\nfig.show()","6eabb59d":"df_copy = df_br.copy()\n\ndf_copy = df_copy[(df_copy['new_cases'] > 0)]\n\ncolors = {'recovered':'green',\n          'monitoring':'pink',\n          'cases':'blue',\n          'deaths':'firebrick'}\n\nfig = go.Figure(data=[\n    go.Bar(name='Mortes', \n           x=df_copy['date'], \n           y=df_copy['recovered'], \n           marker_color=colors['recovered']),\n    go.Bar(name='Mortes', \n           x=df_copy['date'], \n           y=df_copy['monitoring'],\n           marker_color=colors['monitoring']),\n    go.Bar(name='Casos Confirmados', \n           x=df_copy['date'], \n           y=df_copy['cases'], \n           marker_color=colors['cases']),\n    go.Bar(name='Mortes',\n           x=df_copy['date'], \n           y=df_copy['deaths'], \n           marker_color=colors['deaths'])\n])\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_yaxes(title_text='Casos')\nfig.update_layout(title= f\"Total de casos confirmados, recuperados, em monitoramento e mortes no Brasil at\u00e9 {max_date_br}\",\n                  barmode='stack')\n\nfig.show()","26c94808":"df_woy = df_br.copy()\n\ndf_woy[\"weekofyear\"] = df_woy.date.dt.weekofyear\ndf_woy[\"new_cases\"] = df_woy.new_cases.fillna(1)\ndf_woy[\"new_deaths\"] = df_woy.new_deaths.fillna(0)\ndf_woy = df_woy.groupby(['weekofyear']).sum()[['new_cases',\n                                               'new_deaths']].reset_index()\n\ndf_woy = df_woy[(df_woy['new_cases'] > 0)]\n\nfig = go.Figure(data=[\n    go.Bar(name='Casos Confirmados', x=df_woy['weekofyear'], y=df_woy['new_cases']),\n    go.Bar(name='Mortes', x=df_woy['weekofyear'], y=df_woy['new_deaths'])\n])\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_yaxes(title_text='Casos')\nfig.update_layout(title= f\"Total de casos confirmados + mortes no Brasil, por semana, at\u00e9 {max_date_br}\",\n                  barmode='stack')\n\nfig.show()","91048c79":"df_dow = df_br.copy()\n\ndf_dow[\"dayofweek\"] = df_dow.date.dt.dayofweek\ndf_dow[\"new_cases\"] = df_dow.new_cases.fillna(1)\ndf_dow[\"new_deaths\"] = df_dow.new_deaths.fillna(0)\n\n# Cria um DF agregado por Dia da Semana;\ndf_dow = df_dow.groupby(['dayofweek']).sum()[['new_cases',\n                                              'new_deaths']].reset_index()\n\ndf_dow['dayofweekformated'] = df_dow.dayofweek.map({0: 'Segunda',\n                                                    1: 'Ter\u00e7a',\n                                                    2: 'Quarta',\n                                                    3: 'Quinta',\n                                                    4: 'Sexta',\n                                                    5: 'S\u00e1bado',\n                                                    6: 'Domingo',})\n\ndf_dow['mortality'] = df_dow.new_deaths \/ df_dow.new_cases\ndf_dow['mortality'].fillna(0, inplace=True)\n\nlabels = df_dow.dayofweekformated\nvalues_casos = df_dow.new_cases\nvalues_mortalidade = df_dow.new_deaths\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_casos, \n                     name=\"Casos Confirmados\"),\n              1, 1)\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_mortalidade, \n                     name=\"Mortes Confirmadas\"),\n              1, 2)\n\nfig.update_traces(hole=.4,\n                  hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=f\"Incid\u00eancia de novos Casos e Mortes por Dia de Semana at\u00e9 {max_date_br}\",\n  annotations=[dict(text='Casos', x=0.20, y=0.5, font_size=20, showarrow=False),\n               dict(text='Mortes', x=0.80, y=0.5, font_size=20, showarrow=False)])\nfig.show()","a4e4392f":"# Copia o DF original.\ndf_wen = df_br.copy()\n\n# Adiciona a coluna dayofweek.\ndf_wen[\"dayofweek\"] = df_wen.date.dt.dayofweek\n\n# Preenche os valores nulos.\ndf_wen[\"new_cases\"] = df_wen.new_cases.fillna(1)\ndf_wen[\"new_deaths\"] = df_wen.new_deaths.fillna(0)\n\n# Seta o final de semana\ndf_wen[\"weekend\"] = 0\ndf_wen.loc[(df_wen.dayofweek == 5) | (df_wen.dayofweek == 6), 'weekend'] = 1\n\n# Agrupa o novo DF.\ndf_wen = df_wen.groupby(['weekend']).sum()[['new_cases',\n                                            'new_deaths']].reset_index()\n\n# Renomeia os valores da coluna weekend.\ndf_wen[\"weekend\"] = df_wen.weekend.replace({0: 'Dia de Semana',\n                                            1: 'Final de Semana'})\n# Monta o gr\u00e1fico.\nlabels = df_wen.weekend\nvalues_casos = df_wen.new_cases\nvalues_mortalidade = df_wen.new_deaths\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_casos, \n                     name=\"Casos Confirmados\"),\n              1, 1)\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_mortalidade, \n                     name=\"Mortes Confirmadas\"),\n              1, 2)\n\nfig.update_traces(hole=.4,\n                  hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=f\"Incid\u00eancia de novos Casos e Mortes por Final de Semana at\u00e9 {max_date_br}\",\n  annotations=[dict(text='Casos', x=0.20, y=0.5, font_size=20, showarrow=False),\n               dict(text='Mortes', x=0.80, y=0.5, font_size=20, showarrow=False)])\nfig.show()","bff93b82":"df_reg = df.copy()\n\n# Cria um DF agregado por Data\/Regi\u00e3o;\ndf_reg = df_reg.groupby(['date', 'region']).sum()[['cases',\n                                         'deaths'\n                                       ]].reset_index()\n\ndf_reg = df_reg.sort_values(['region', 'date'])\n\ndf_reg['new_cases'] = np.where(df_reg.region.eq(df_reg.region.shift()), df_reg.cases.diff(), 1)\ndf_reg['new_deaths'] = np.where(df_reg.region.eq(df_reg.region.shift()), df_reg.deaths.diff(), 0)\n\ndf_reg = df_reg.groupby(['region']).sum()[['new_cases',\n                                         'new_deaths'\n                                       ]].reset_index()\n\n# Adiciona novas colunas.\ndf_reg['mortality'] = df_reg.new_deaths  \/ df_reg.new_cases\ndf_reg['national_rate'] = df_reg.new_deaths.sum()  \/ df_reg.new_cases.sum()\n\nlabels = df_reg.region\nvalues_casos = df_reg.new_cases\nvalues_mortalidade = df_reg.new_deaths\n\nfig = make_subplots(rows=1, \n                    cols=2, \n                    specs=[[\n                            {'type':'domain'}, \n                            {'type':'domain'}\n                          ]])\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_casos,\n                     name=\"Casos Confirmados\"\n                     ), 1, 1)\n\nfig.add_trace(go.Pie(labels=labels, \n                     values=values_mortalidade, \n                     name=\"Taxa de Mortalidade\"), 1, 2)\n\nfig.update_traces(hole=.4, \n                  hoverinfo=\"label+percent+name\"\n                 )\n\nfig.update_layout(\n    title_text=f\"Incid\u00eancia de Casos e Taxa de Mortalidade por Regi\u00e3o Brasileira at\u00e9 {max_date_br}\",\n \n    annotations=[dict(text='Casos', \n                      x=0.20, \n                      y=0.5, \n                      font_size=20, \n                      showarrow=False\n                      ),\n                 dict(text='Mortalidade', \n                      x=0.82,\n                      y=0.5, \n                      font_size=20, \n                      showarrow=False\n                      )\n                ])\n\nfig.show()","8f53b521":"df_reg_dia = df.copy()\n\n# Cria um DF agregado por Data\/Regi\u00e3o;\ndf_reg_dia = df_reg_dia.groupby(['date', 'region']).sum()[['cases',\n                                                           'deaths', \n                                                           'population']].reset_index()\n\ndf_reg_dia = df_reg_dia.sort_values(['region', 'date'])\n\ndf_reg_dia['new_cases'] = np.where(df_reg_dia.region.eq(df_reg_dia.region.shift()), df_reg_dia.cases.diff(), 1)\ndf_reg_dia['new_deaths'] = np.where(df_reg_dia.region.eq(df_reg_dia.region.shift()), df_reg_dia.deaths.diff(), 0)\ndf_reg_dia['mortality'] = df_reg_dia.deaths \/ df_reg_dia.cases\n\nfig = px.line(df_reg_dia, \n              x=\"date\", \n              y=\"mortality\", \n              color='region',\n              labels={'region': 'Regi\u00e3o',\n                      'date': 'Data',\n                      'mortality': 'Mortalidade',\n                     }\n             )\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title= f\"Mortalidade ao Longo do Tempo em cada Regi\u00e3o Brasileira at\u00e9 {max_date_br}\",\n                  yaxis_title = \"Taxa de Mortalidade\",\n                  xaxis_title = \"Data\",\n                  yaxis_tickformat = '.1%'\n                 )\n\nfig.show()","695f5ec9":"fig = go.Figure(data=[\n    go.Bar(name='Mortalidade', x=df_reg['region'], y=df_reg['mortality']),\n    go.Scatter(x=df_reg['region'], \n               y=df_reg['national_rate'],\n               mode='lines+markers',\n               line=dict(color='red'), \n               name='M\u00e9dia Nacional')\n])\n\nfig.update_yaxes(title_text='Taxa de Mortalidade')\nfig.update_layout(title=f\"Taxa de Mortalidade por Regi\u00e3o Brasileira at\u00e9 {max_date_br}\",\n                  yaxis_tickformat = '.1%')\n\nfig.show()","d25a37f5":"df_est = df.copy()\n\n# Cria um DF agregado por Data\/Regi\u00e3o;\ndf_est = df_est.groupby(['date', 'state', 'uf']).sum()[['cases',\n                                                        'deaths']].reset_index()\n\ndf_est = df_est.sort_values(['date', 'uf'])\ndf_est = df_est.tail(27)\ndf_est = df_est.set_index(df_est.uf)\ndf_est = df_est.drop(['date', 'uf'], axis=1)\n\n# Adiciona novas colunas.\ndf_est['mortality'] = np.round((df_est.deaths \/ df_est.cases) * 100, 2)\n\ndf_est = df_est.style.background_gradient(cmap='Reds',subset=[\"cases\"])\\\n                     .background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n                     .background_gradient(cmap='Reds',subset=[\"mortality\"])\\\n                     .format(\"{:.2f}\", subset=[\"mortality\"])\\\n\ndf_est","af511d8d":"df_est = df.copy()\n\n# Cria um DF agregado por Data\/Regi\u00e3o;\ndf_est = df_est.groupby(['date', 'state', 'uf']).sum()[['cases',\n                                                        'deaths',\n                                                        'population']].reset_index()\n\ndf_est = df_est.sort_values(['date', 'uf'])\ndf_est = df_est.tail(27)\ndf_est = df_est.set_index(df_est.uf)\ndf_est = df_est.drop(['date', 'uf'], axis=1)\n\n# Adiciona novas colunas.\ndf_est['mortality'] = np.round((df_est.deaths \/ df_est.cases) * 100, 2)\ndf_est['national_rate'] = df_est.deaths.sum() \/ df_est.cases.sum()\n\nfig = px.scatter(df_est, \n                 x=\"cases\", \n                 y=\"mortality\", \n                 size=\"cases\", \n                 color=df_est.mortality,\n                 hover_name=df_est.state, \n                 log_y=False, \n                 log_x=True, \n                 size_max=80,\n                 labels={'cases': 'Casos Confirmados',\n                         'mortality': 'Taxa de Mortalidade',\n                        }\n                )\nfig.update_layout(title=f\"N\u00famero de Casos x Mortalidade por Estado Brasileiro at\u00e9 {max_date_br}\",\n                  yaxis_title = \"Taxa de Mortalidade\",\n                  xaxis_title = \"N\u00famero de Casos\",\n                 )\nfig.show()","f943b201":"df_est['mortality_unf'] = df_est.deaths \/ df_est.cases\n\nfig = go.Figure(data=[\n    go.Bar(x=df_est['state'], \n           y=df_est['mortality_unf'],\n           name='Mortalidade',\n           marker_color='red'\n          ),\n    go.Scatter(x=df_est['state'], \n               y=df_est['national_rate'],\n               mode='lines+markers',\n               line=dict(color='blue'), \n               name='M\u00e9dia Nacional')\n])\n\nfig.update_xaxes(rangeslider_visible=True)\n\nfig.update_layout(title=f\"Taxa de Mortalidade por Estado Brasileiro at\u00e9 {max_date_br}\",\n                  yaxis_title='Taxa de Mortalidade',\n                  yaxis_tickformat = '.1%')\n\nfig.show()","1f3a3116":"filt = df_est.copy()\nfilt = filt.sort_values(['cases'], ascending=False)\n\nfig = go.Figure(data=[\n    go.Bar(name='Casos Confirmados', x=filt['state'], y=filt['cases']),\n    go.Bar(name='Mortes', x=filt['state'], y=filt['deaths'])\n])\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title= f\"Total de casos confirmados + mortes por Estado Brasileiro at\u00e9 {max_date_br}\",\n                  yaxis_title='N\u00famero de Casos',\n                  barmode='stack')","a4f1f2cd":"df_est2 = df_est.copy()\ndf_est2 = df_est2.drop(['mortality', 'mortality_unf'], axis=1)\n\ndf_est2['mortality'] = df_est2.deaths \/ df_est2.cases\ndf_est2['cases100k'] = round(df_est2.cases \/ (df_est2.population \/ 100000))\ndf_est2['deaths100k'] = round(df_est2.deaths \/ (df_est2.population \/ 100000))\ndf_est2['mortality100k'] = round((df_est2.deaths100k \/ df_est2.cases100k) * 100, 2)\n\nfig = px.scatter(df_est2, \n                 x=\"cases100k\", \n                 y=\"deaths100k\", \n                 size=\"deaths100k\", \n                 color=df_est2.mortality100k,\n                 hover_name=df_est2.state, \n                 log_y=False, \n                 log_x=True, \n                 size_max=80,\n                 labels={'cases100k': 'Casos',\n                         'deaths100k': '\u00d3bitos',\n                         'mortality100k': 'Taxa de Mortalidade',\n                        }\n                )\nfig.update_layout(title= \"Casos x \u00d3bitos por Estado a cada 100k habitantes por Estado Brasileiro\",\n                  yaxis_title = \"\u00d3bitos\",\n                  xaxis_title = \"N\u00famero de Casos\",\n                 )\nfig.show()","f31763ac":"# Taxa de Mortalidade\nfilt = df_est2.copy()\n\nfilt.drop(['state',\n           'cases',\n           'deaths',\n           'population',\n           'national_rate',\n           'cases100k',\n           'deaths100k',\n           'mortality100k'], axis=1, inplace=True)\n\nfilt['UF'] = filt.index\nfilt['Mortalidade'] = round(filt.mortality * 100, 2)\n\nwith open('\/kaggle\/input\/majson\/data\/Brasil.json', encoding='utf-8') as response:\n    counties = json.load(response)\n\nfig = px.choropleth_mapbox(filt, \n                           geojson=counties, \n                           locations=filt.UF, \n                           featureidkey=\"properties.UF\",\n                           color='Mortalidade',\n                           range_color=(0, max(filt.Mortalidade)),\n                           mapbox_style=\"carto-positron\",\n                           zoom=2.5, \n                           center = {\"lat\": -15.98, \"lon\": -49.86}, \n                           # opacity=0.9\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.update_coloraxes(colorbar_title=\"Taxa de Mortalidade\",colorscale=\"reds\")\nfig.show()","b23df396":"# Casos\nfilt = df_est2.copy()\n\nfilt.drop(['state',\n           'deaths',\n           'population',\n           'national_rate',\n           'cases100k',\n           'deaths100k',\n           'mortality',\n           'mortality100k'], axis=1, inplace=True)\n\nfilt['UF'] = filt.index\n\nfig = px.choropleth_mapbox(filt, \n                           geojson=counties, \n                           locations=filt.UF, \n                           featureidkey=\"properties.UF\",\n                           color='cases',\n                           mapbox_style=\"carto-positron\",\n                           zoom=2.5, \n                           center = {\"lat\": -15.98, \"lon\": -49.86}, \n                           # opacity=0.9,\n                           labels={'cases':'Casos Confirmados'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n                  title = 'teste'\n                 )\nfig.update_coloraxes(colorbar_title=\"Casos Confirmados\", colorscale=\"blues\")\nfig.show()","96537416":"# Mortes\nfilt = df_est2.copy()\n\nfilt.drop(['state',\n           'cases',\n           'population',\n           'national_rate',\n           'cases100k',\n           'deaths100k',\n           'mortality',\n           'mortality100k'], axis=1, inplace=True)\n\nfilt['UF'] = filt.index\n\nfig = px.choropleth_mapbox(filt, \n                           geojson=counties, \n                           locations=filt.UF, \n                           featureidkey=\"properties.UF\",\n                           color='deaths',\n                           mapbox_style=\"carto-positron\",\n                           zoom=2.5, \n                           center = {\"lat\": -15.98, \"lon\": -49.86}, \n                           # opacity=0.9,\n                           labels={'deaths':'Mortes'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n                  title = 'teste'\n                 )\nfig.update_coloraxes(colorbar_title=\"Mortes\", colorscale=\"reds\")\nfig.show()","02bcf81f":"filt = df_est2.copy()\n\nfilt.drop(['state',\n           'cases',\n           'deaths',\n           'population',\n           'national_rate',\n           'deaths100k',\n           'mortality',\n           'mortality100k'], axis=1, inplace=True)\n\nfilt['UF'] = filt.index\n\nfig = px.choropleth_mapbox(filt, \n                           geojson=counties, \n                           locations=filt.UF, \n                           featureidkey=\"properties.UF\",\n                           color='cases100k',\n                           mapbox_style=\"carto-positron\",\n                           zoom=2.5, \n                           center = {\"lat\": -15.98, \"lon\": -49.86}, \n                           # opacity=0.9,\n                           labels={'cases100k':'Casos por 100k Habitantes'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n                  title = 'teste'\n                 )\nfig.update_coloraxes(colorbar_title=\"Casos por 100k\", colorscale=\"blues\")\nfig.show()","c93aa086":"filt = df_est2.copy()\n\nfilt.drop(['state',\n           'cases',\n           'deaths',\n           'population',\n           'national_rate',\n           'cases100k',\n           'mortality',\n           'mortality100k'], axis=1, inplace=True)\n\nfilt['UF'] = filt.index\n\nfig = px.choropleth_mapbox(filt, \n                           geojson=counties, \n                           locations=filt.UF, \n                           featureidkey=\"properties.UF\",\n                           color='deaths100k',\n                           mapbox_style=\"carto-positron\",\n                           zoom=2.5, \n                           center = {\"lat\": -15.98, \"lon\": -49.86}, \n                           # opacity=0.9,\n                           labels={'deaths100k':'Mortes por 100k Habitantes'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n                  title = 'teste'\n                 )\nfig.update_coloraxes(colorbar_title=\"Mortes por 100k\", colorscale=\"reds\")\nfig.show()","5ad94a35":"**Prepara\u00e7\u00e3o dos dados:**\n\n\n>* Faz uma c\u00f3pia do DF original;\n>* Cria um DF agregado por **Data**;\n>>* Adiciona a coluna calculada **Taxa de Mortalidade**.\n>>* Adiciona a coluna calculada **Percentual de Casos**.\n>>* Adiciona a coluna calculada **Percentual de Mortes**.\n>* Cria um DF agregado por **M\u00eas**;\n>>* Adiciona a coluna calculada **Taxa de Mortalidade**.\n>>* Adiciona a coluna calculada **Percentual de Casos**.\n>>* Adiciona a coluna calculada **Percentual de Mortes**.\n>>* Converte a coluna **m\u00eas** (int) para o nome do **m\u00eas** (str) correspondente.\n>* Cria um DF agregado por **Dia da Semana**;\n>>* Adiciona a coluna calculada **Taxa de Mortalidade**.\n>>* Adiciona a coluna calculada **Percentual de Casos**.\n>>* Adiciona a coluna calculada **Percentual de Mortes**.\n>>* Converte a coluna **dia da semana** (int - 0 a 6) para o nome do **dia da semana** (str - Segunda a Domingo) correspondente.\n>* Cria um DF agregado por **Semana do Ano**;\n>>* Adiciona a coluna calculada **Taxa de Mortalidade**.\n>>* Adiciona a coluna calculada **Percentual de Casos**.\n>>* Adiciona a coluna calculada **Percentual de Mortes**.\n>* Cria um DF agregado por **Final de Semana**;\n>>* Adiciona a coluna calculada **Taxa de Mortalidade**.\n>>* Adiciona a coluna calculada **Percentual de Casos**.\n>>* Adiciona a coluna calculada **Percentual de Mortes**.\n>>* Converte a coluna **final de semana** (int - 0 e 1) para **dia de semana**, caso o valor seja 0 e **final se semana**, caso o valor seja 1. *","899f8685":"**Total de Casos Confirmados por Estado**","aaf262c1":"# **An\u00e1lises N\u00edvel Brasil**","a6ea8680":"<p><img src=\"https:\/\/github.com\/fcampos300\/covid19\/blob\/master\/covid19.jpg?raw=true\" alt=\"covid19.jpg\"><\/p>\n\n# O que \u00e9 o COVID-19?\n\nCOVID-19 (do ingl\u00eas Coronavirus Disease 2019) \u00e9 uma doen\u00e7a infeciosa causada pelo coronav\u00edrus da s\u00edndrome respirat\u00f3ria aguda grave 2 (SARS-CoV-2). Os sintomas mais comuns s\u00e3o febre, tosse seca e cansa\u00e7o. Entre outros sintomas menos comuns est\u00e3o dores musculares, dor de garganta, dor de cabe\u00e7a, congest\u00e3o nasal, conjuntivite, perda do olfato e do paladar, erup\u00e7\u00f5es cut\u00e2neas na pele ou dedos de tom azul. Cerca de 80% dos casos confirmados s\u00e3o ligeiros ou assintom\u00e1ticos e a maioria recupera sem sequelas. No entanto, 15% s\u00e3o infe\u00e7\u00f5es graves que necessitam de oxig\u00e9nio e 5% s\u00e3o infe\u00e7\u00f5es muito graves que necessitam de ventila\u00e7\u00e3o assistida em ambiente hospitalar. Os casos mais graves podem evoluir para pneumonia grave com insufici\u00eancia respirat\u00f3ria grave, septic\u00e9mia, fal\u00eancia de v\u00e1rios \u00f3rg\u00e3os e morte. Entre os sinais de agravamento da doen\u00e7a est\u00e3o a falta de ar, dor ou press\u00e3o no peito ou perturba\u00e7\u00f5es na fala e no movimento. O agravamento pode ser s\u00fabito, ocorre geralmente durante a segunda semana e requer aten\u00e7\u00e3o m\u00e9dica urgente.\n\nA doen\u00e7a transmite-se atrav\u00e9s de got\u00edculas produzidas nas vias respirat\u00f3rias das pessoas infetadas. Ao espirrar ou tossir, estas got\u00edculas podem ser inaladas ou atingir diretamente a boca, nariz ou olhos de pessoas em contacto pr\u00f3ximo. Estas got\u00edculas podem tamb\u00e9m depositar-se em objetos e superf\u00edcies pr\u00f3ximos que podem infetar quem nelas toque e leve a m\u00e3o aos olhos, nariz ou boca, embora esta forma de transmiss\u00e3o seja menos comum. O intervalo de tempo entre a exposi\u00e7\u00e3o ao v\u00edrus e o in\u00edcio dos sintomas \u00e9 de 2 a 14 dias, sendo em m\u00e9dia 5 dias. Entre os fatores de risco est\u00e3o a idade avan\u00e7ada e doen\u00e7as cr\u00f3nicas graves como doen\u00e7as cardiovasculares, diabetes ou doen\u00e7as pulmonares. O diagn\u00f3stico \u00e9 suspeito com base nos sintomas e fatores de risco e confirmado com ensaios em tempo real de rea\u00e7\u00e3o em cadeia de polimerase para dete\u00e7\u00e3o de ARN do v\u00edrus em amostras de muco ou de sangue.\n\nEntre as medidas de preven\u00e7\u00e3o est\u00e3o a lavagem frequente das m\u00e3os, evitar o contacto pr\u00f3ximo com outras pessoas e evitar tocar com as m\u00e3os na cara. A utiliza\u00e7\u00e3o de m\u00e1scaras cir\u00fargicas \u00e9 recomendada apenas para pessoas suspeitas de estar infetadas ou para os cuidadores de pessoas infetadas. N\u00e3o existe vacina ou tratamento antiviral espec\u00edfico para a doen\u00e7a. O tratamento consiste no al\u00edvio dos sintomas e cuidados de apoio. As pessoas com casos ligeiros conseguem recuperar em casa. Os antibi\u00f3ticos n\u00e3o t\u00eam efeito contra v\u00edrus.\n\nO SARS-CoV-2 foi identificado pela primeira vez em seres humanos em dezembro de 2019 na cidade de Wuhan, na China. Pensa-se que o SARS-CoV-2 seja de origem animal. O surto inicial deu origem a uma pandemia global que \u00e0 data de 22 de maio de 2020 tinha resultado em 5 097 944 casos confirmados e 332 425 mortes em todo o mundo. Os coronav\u00edrus s\u00e3o uma grande fam\u00edlia de v\u00edrus que causam v\u00e1rias doen\u00e7as respirat\u00f3rias, desde doen\u00e7as ligeiras como a constipa\u00e7\u00e3o at\u00e9 doen\u00e7as mais graves como a s\u00edndrome respirat\u00f3ria aguda grave (SARS). Entre outras epidemias causadas por coronav\u00edrus est\u00e3o a epidemia de SARS em 2002-2003 e a epidemia de s\u00edndrome respirat\u00f3ria do M\u00e9dio Oriente (MERS) em 2012.\n<font size=\"1\">Descri\u00e7\u00e3o retirada do Wikip\u00e9dia - https:\/\/pt.wikipedia.org\/wiki\/COVID-19<\/font>","73710f73":"**Total de Mortes por Estado a cada 100k Habitantes**","16123568":"**Taxa de Mortalidade por Estado**","fa69c620":"Cria um DataFrame, a partir do DF original, agrupado por Data e adiciona as colunas ***mortality***, ***Recovered*** e ***Monitoring***.","717fa72f":"# **DataFrame - N\u00edvel Global**","c96301df":"Coletar dados (diferentes fontes) sobre a doen\u00e7a e organizar em um Data Frame que permita analisar o avan\u00e7o do v\u00edrus ao redor do mundo, e em especial, no Brasil.\n","ebd0d4d7":"**Total de Mortes por Estado**","21eb3cfe":"# **Objetivo desse Notebook**","18c480d2":"**Vari\u00e1reis que ser\u00e3o utilizadas nas an\u00e1lises.**","9f5d7ffa":"# **DataFrame - N\u00edvel Brasil**\n\n**Etapas de Prepara\u00e7\u00e3o dos Dados:**\n\n1.   Ordena o DF por estado, regi\u00e3o e data: Necess\u00e1rio para pegar a diferen\u00e7a entre as linhas das colunas ***cases*** e ***deaths***;\n2.   Adiciona a coluna calculada ***new_cases*** para novos casos: Busca a diferen\u00e7a entre a linha atual e a linha anterior da coluna ***cases***, onde os estados s\u00e3o iguais;\n3.   Adiciona a coluna calculada ***new_deaths***  para novas mortes: Busca a diferen\u00e7a entre a linha atual e a linha anterior da coluna ***deaths***, onde os estados s\u00e3o iguais;\n4.   Adiciona a coluna ***uf***: Adiciona a UF do estado de acordo com a vari\u00e1vel mapeada UF;\n5.   Converte a coluna data de *str* para *datetime*: Necess\u00e1rio para criar novas vari\u00e1veis a partir da coluna;\n6.   Cria novas colunas no DataFrame;\n> * **Year**: Ano (year) indicado na coluna date.\n> * **Month**: M\u00eas (month) indicado na coluna date.\n> * **Dayofweek**: Dia da semana (dayofweek) que pertence o dia indicado na coluna date.\n> * **Weekofyear**: N\u00famero da semana (weekofyear) que pertence a data no ano.\n> * **Weekend**: Coluna que indica se a data \u00e9 um dia ou final de semana.\n7.   Cria um novo DF com informa\u00e7\u00f5es sobre a popula\u00e7\u00e3o nos estados brasileiros;\n8.   Agrupa por regi\u00e3o e estado e soma a coluna popula\u00e7\u00e3o;\n5.   Junta os dois DFs;","e71b848e":"**Verifica a correla\u00e7\u00e3o entra as colunas no DF**","ff2cfea6":"> # **Mapas de Calor**","6ffb7656":"**Total de Casos Confirmados por Estado a cada 100k habitantes**","e14bc664":"# **An\u00e1lises N\u00edvel Global**","3505dca8":"**Verifica se existe colunas em branco no DF**","b68c57e9":"**Vari\u00e1veis que ser\u00e3o usadas nas an\u00e1lises**","4ab897a4":"**Gr\u00e1ficos**"}}