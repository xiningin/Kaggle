{"cell_type":{"63cfa53a":"code","d9683391":"code","38f8abb1":"code","176235b0":"code","a2d84704":"code","be61e026":"code","5369d7e5":"code","133a0a59":"code","25d918c8":"code","d1d8c0f5":"code","b275fc62":"code","44e9b881":"code","e53d5119":"code","506b963e":"code","412e8b69":"code","df3bbadf":"code","1d3959dc":"code","df0de3ff":"code","11535b33":"code","abe7281e":"code","80a1d997":"code","03b44157":"code","8e5c1c2a":"code","63350de1":"code","457fcb4d":"code","5f7fedca":"code","cff5fbeb":"markdown","6fa385b2":"markdown","a9f5ee4f":"markdown","700f9a08":"markdown","51ec7c7b":"markdown"},"source":{"63cfa53a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9683391":"df= pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')","38f8abb1":"df.describe()","176235b0":"df.isnull().sum()","a2d84704":"df.head(3)","be61e026":"sns.countplot(x='math score',data=df)\nplt.show()","5369d7e5":"sns.countplot(x='reading score',data=df)\nplt.show()","133a0a59":"sns.countplot(x='writing score',data=df)\nplt.show()","25d918c8":"def con(x):\n    if x>=40:\n        return 'pass'\n    else:\n        return 'fail'\ndf['math_pass'] = df['math score'].apply(con)","d1d8c0f5":"def con(x):\n    if x>=40:\n        return 'pass'\n    else:\n        return 'fail'\ndf['reading_pass'] = df['reading score'].apply(con)\ndf['writing_pass'] = df['writing score'].apply(con)","b275fc62":"df.head()","44e9b881":"sns.countplot(x='parental level of education',hue='math_pass',data=df)\nplt.xticks(rotation=45)\nplt.show()","e53d5119":"sns.countplot(x='parental level of education',hue='reading_pass',data=df)\nplt.xticks(rotation=45)\nplt.show()","506b963e":"sns.countplot(x='parental level of education',hue='writing_pass',data=df)\nplt.xticks(rotation=45)\nplt.show()","412e8b69":"df.head(3)","df3bbadf":"df['math_pass'].value_counts()","1d3959dc":"df['over_all']= df.apply(lambda x: 'fail' if x['math_pass']=='fail' or x['reading_pass']=='fail'\n                        or x['writing_pass']=='fail' else 'pass',axis=1)","df0de3ff":"df['percentage']= (df['math score']+df['reading score']+df['writing score'])\/3","11535b33":"df.head()","abe7281e":"def con(x):\n    if x>=90:\n        return 'A+'\n    elif x>=80:\n        return 'A'\n    elif x>=70:\n        return 'B'\n    elif x>=60:\n        return 'C'\n    elif x>=50:\n        return 'D'\n    elif x>=40:\n        return 'E'\n    else:\n        return 'F'","80a1d997":"df['grade']= df['percentage'].apply(con)","03b44157":"df.head()","8e5c1c2a":"sns.countplot(x= 'grade',data=df)","63350de1":"po=df.grade.value_counts()","457fcb4d":"plt.pie(po,labels=po.keys(),autopct='%.0f%%')\nplt.show()","5f7fedca":"sns.countplot(x='parental level of education',hue='grade',data=df)\nplt.xticks(rotation=45)\nplt.show()","cff5fbeb":"**pass according to education**","6fa385b2":"**percentage of marks**","a9f5ee4f":"**grade of student**","700f9a08":"**overall pass**","51ec7c7b":"**Score according to subject**"}}