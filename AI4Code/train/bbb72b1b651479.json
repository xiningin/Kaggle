{"cell_type":{"77d22a4d":"code","360608b8":"code","8b250c53":"code","85dbaa3f":"code","366cbbb0":"code","3cc9cd17":"code","b5ee10ae":"code","3e704ff2":"code","1e3398ad":"code","643424a0":"code","5ba5acd0":"code","a1ca2da8":"markdown","55398ce3":"markdown","eb8710fa":"markdown","ed4ec7ce":"markdown","2160d424":"markdown","c23728b9":"markdown","ef1a1737":"markdown","32754395":"markdown","7169844b":"markdown","1139581f":"markdown","75b27465":"markdown","ede100e0":"markdown","d8cd1a84":"markdown","2bffae12":"markdown"},"source":{"77d22a4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport json # load JSON data\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nimport os\n\nfrom datetime import datetime\nfrom pandasql import sqldf # run SQL queries on dataframe\npysql = lambda q: sqldf(q, globals())\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","360608b8":"with open('..\/input\/kartikeyaSh_lb-2019-03-20.json') as f:\n    listens_json = json.load(f)\ncolumns=['timestamp', 'artist_name', 'track_name', 'release_name']\ndata = [[listen.get(column) for column in columns ] for listen in listens_json]\ndata = [[idx] + listen for idx, listen in enumerate(data)]\ndata = pd.DataFrame(data, columns=['id'] + columns)\ndata['date_time'] = pd.to_datetime(data['timestamp'], unit='s')\n# Convert time to my timezone\ndata['date_time'] = data['date_time'] + pd.Timedelta('5 hour 30 min')\ndata.info()","8b250c53":"data.head()","85dbaa3f":"top_tracks = pysql(\"\"\"\nSELECT\n    id, track_name, count(track_name) AS track_count , artist_name\nFROM\n    data\nGROUP BY\n    track_name\nORDER BY\n    count(track_name) DESC\nLIMIT 10\n\"\"\")\n\ntrack_artist_name = [\"{0}<br>By: {1}\".format(track, artist) for (track, artist) in zip(top_tracks['track_name'], top_tracks['artist_name'])]\n\ngraph = [go.Bar(\n            x=top_tracks['track_name'],\n            y=top_tracks['track_count'],\n            text=track_artist_name,\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5,\n                )\n            ),\n            opacity=0.7,\n)]\n\nlayout = go.Layout(\n    title='Top 10 Listens',\n    plot_bgcolor='azure',\n    paper_bgcolor='azure',\n    titlefont=dict(\n            size=20,\n            color='black'\n    ),\n    xaxis=dict(\n        title='Tracks',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='gray'\n        )\n    ),\n    yaxis=dict(\n        title='Listen Count',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='black'\n        )\n    ),\n)\n\nfig = go.Figure(data=graph, layout=layout)\n\niplot(fig)\n","366cbbb0":"top_artists = pysql(\"\"\"\nSELECT\n    id, artist_name, count(artist_name) AS artist_count \nFROM\n    data\nGROUP BY\n    artist_name\nORDER BY\n    count(artist_name) DESC\nLIMIT 10\n\"\"\")\n\ngraph = [go.Bar(\n            x=top_artists['artist_name'],\n            y=top_artists['artist_count'],\n            text=top_artists['artist_name'],\n            marker=dict(\n                color='purple',\n                line=dict(\n                    color='blue',\n                    width=1.5,\n                )\n            ),\n            opacity=0.6,\n)]\n\nlayout = go.Layout(\n    title='Top 10 Artists',\n    plot_bgcolor='pink',\n    paper_bgcolor='pink',\n    titlefont=dict(\n            size=20,\n            color='black'\n    ),\n    xaxis=dict(\n        title='Artists',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='gray'\n        )\n    ),\n    yaxis=dict(\n        title='Listen Count',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='black'\n        )\n    ),\n)\n\nfig = go.Figure(data=graph, layout=layout)\n\niplot(fig)","3cc9cd17":"top_releases = pysql(\"\"\"\nSELECT\n    id, release_name, count(release_name) AS release_count \nFROM\n    data\nWHERE\n    release_name IS NOT NULL\nGROUP BY\n    release_name\nORDER BY\n    count(release_name) DESC\nLIMIT 10\n\"\"\")\n\ngraph = [go.Bar(\n            x=top_releases['release_name'],\n            y=top_releases['release_count'],\n            text=top_releases['release_name'],\n            marker=dict(\n                color='seagreen',\n                line=dict(\n                    color='green',\n                    width=1.5,\n                )\n            ),\n            opacity=0.6,\n)]\n\nlayout = go.Layout(\n    title='Top 10 Releases',\n    plot_bgcolor='lightgreen',\n    paper_bgcolor='lightgreen',\n    titlefont=dict(\n            size=20,\n            color='black'\n    ),\n    xaxis=dict(\n        title='Releases',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='gray'\n        )\n    ),\n    yaxis=dict(\n        title='Listen Count',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='black'\n        )\n    ),\n)\n\nfig = go.Figure(data=graph, layout=layout)\n\niplot(fig)","b5ee10ae":"daily_listen_count =  pysql(\"\"\"\nSELECT\n    strftime('%d-%m-%Y', date_time) as date, count(strftime('%d-%m-%Y', date_time)) AS listen_count\nFROM\n    data\nGROUP BY\n    strftime('%d-%m-%Y', date_time)\nORDER BY\n    strftime('%Y-%m-%d', date_time)\n\"\"\")\n\nts_min = daily_listen_count['date'].min()\nts_max = daily_listen_count['date'].max()\n\ngraph = [go.Scatter(\n            x=daily_listen_count['date'],\n            y=daily_listen_count['listen_count'],\n            text=daily_listen_count['date'],\n            marker=dict(\n                color='blue',\n                line=dict(\n                    color='blue',\n                    width=4,\n                )\n            ),\n            opacity=0.6,\n)]\n\nlayout = go.Layout(\n    title='Daily Listens Count',\n    plot_bgcolor='azure',\n    paper_bgcolor='azure',\n    titlefont=dict(\n            size=20,\n            color='black'\n    ),\n    xaxis=dict(\n        title='Timeline',\n        showticklabels=False,\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='gray'\n        )\n        \n    ),\n    yaxis=dict(\n        title='Listens Count',\n        showgrid=True,\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='black'\n        )\n    ),\n)\n\nfig = go.Figure(data=graph, layout=layout)\niplot(fig)","3e704ff2":"daily_timing =  pysql(\"\"\"\nSELECT\n    strftime('%H', date_time) as hour, count(strftime('%H', date_time)) AS listen_count\nFROM\n    data\nGROUP BY\n    strftime('%H', date_time)\nORDER BY\n    strftime('%H', date_time)\n\"\"\")\n\ngraph = [go.Bar(\n            x=daily_timing['hour'],\n            y=daily_timing['listen_count'],\n            marker=dict(\n                color='blue',\n                line=dict(\n                    color='mediumorchid',\n                    width=2.5,\n                )\n            ),\n            opacity=0.6,\n)]\n\nlayout = go.Layout(\n    title='Daily Listening timings',\n    plot_bgcolor='lightgreen',\n    paper_bgcolor='lightgreen',\n    titlefont=dict(\n            size=20,\n            color='black'\n    ),\n    xaxis=dict(\n        title='Hours(24hrs format)',\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='gray'\n        ),\n    ),\n    yaxis=dict(\n        title='Listens Count',\n        showgrid=True,\n        titlefont=dict(\n            size=16,\n            color='black'\n        ),\n        tickfont=dict(\n            size=12,\n            color='black'\n        )\n    ),\n)\n\nfig = go.Figure(data=graph, layout=layout)\niplot(fig)","1e3398ad":"top_track_listen_timeline = []\nfor track in top_tracks['track_name']:\n    if \"'\" in track:\n        track = track.replace(\"'\", \"''\")\n    top_track_listen_timeline.append(pysql(\"\"\"\n        SELECT\n            track_name, strftime('%Y-%m-%d', date_time) as date, timestamp,\n            count(strftime('%d-%m-%Y', date_time)) AS listen_count\n        FROM\n            data\n        WHERE\n            track_name = '{0}'\n        GROUP BY\n            strftime('%d-%m-%Y', date_time)\n        ORDER BY\n            strftime('%Y-%m-%d', date_time)\n    \"\"\".format(track))\n    )\n\nfor idx, track in enumerate(top_tracks['track_name']):\n    graph = [go.Scatter(\n                x=top_track_listen_timeline[idx]['date'],\n                y=top_track_listen_timeline[idx]['listen_count'],\n                marker=dict(\n                    color='blue',\n                ),\n                opacity=0.6,\n    )]\n\n    layout = go.Layout(\n        title=track,\n        plot_bgcolor='azure',\n        paper_bgcolor='azure',\n        titlefont=dict(\n                size=20,\n                color='black'\n        ),\n        xaxis=dict(\n            title='Timeline',\n            zerolinewidth=4,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n\n        ),\n        yaxis=dict(\n            title='Listens Count',\n            showgrid=True,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n        ),\n    )\n\n    fig = go.Figure(data=graph, layout=layout)\n    iplot(fig)","643424a0":"top_artist_listen_timeline = []\nfor artist in top_artists['artist_name']:\n    if \"'\" in artist:\n        artist = artist.replace(\"'\", \"''\")\n    top_artist_listen_timeline.append(pysql(\"\"\"\n        SELECT\n            artist_name, strftime('%Y-%m-%d', date_time) as date, timestamp,\n            count(strftime('%d-%m-%Y', date_time)) AS listen_count\n        FROM\n            data\n        WHERE\n            artist_name = '{0}'\n        GROUP BY\n            strftime('%d-%m-%Y', date_time)\n        ORDER BY\n            strftime('%Y-%m-%d', date_time)\n    \"\"\".format(artist))\n    )\n\nfor idx, artist in enumerate(top_artists['artist_name']):\n    graph = [go.Scatter(\n                hoverinfo='x+y+text',\n                x=top_artist_listen_timeline[idx]['date'],\n                y=top_artist_listen_timeline[idx]['listen_count'],\n                text=artist,\n                marker=dict(\n                    color='red',\n                ),\n                opacity=0.6,\n    )]\n\n    layout = go.Layout(\n        title=artist,\n        plot_bgcolor='lightpink',\n        paper_bgcolor='lightpink',\n        titlefont=dict(\n                size=20,\n                color='black'\n        ),\n        xaxis=dict(\n            title='Timeline',\n            zerolinewidth=4,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n\n        ),\n        yaxis=dict(\n            title='Listens Count',\n            showgrid=True,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n        ),\n    )\n\n    fig = go.Figure(data=graph, layout=layout)\n    iplot(fig)\n","5ba5acd0":"top_release_listen_timeline = []\nfor release in top_releases['release_name']:\n    if \"'\" in release:\n        release = release.replace(\"'\", \"''\")\n    top_release_listen_timeline.append(pysql(\"\"\"\n        SELECT\n            release_name, strftime('%Y-%m-%d', date_time) as date, timestamp,\n            count(strftime('%d-%m-%Y', date_time)) AS listen_count\n        FROM\n            data\n        WHERE\n            release_name = '{0}'\n        GROUP BY\n            strftime('%d-%m-%Y', date_time)\n        ORDER BY\n            strftime('%Y-%m-%d', date_time)\n    \"\"\".format(release)\n    ))\n\nfor idx, release in enumerate(top_releases['release_name']):\n    graph = [go.Scatter(\n                x=top_release_listen_timeline[idx]['date'],\n                y=top_release_listen_timeline[idx]['listen_count'],\n                marker=dict(\n                    color='blue',\n                ),\n                opacity=0.6,\n    )]\n\n    layout = go.Layout(\n        title=release,\n        plot_bgcolor='lightgreen',\n        paper_bgcolor='lightgreen',\n        titlefont=dict(\n                size=20,\n                color='black'\n        ),\n        xaxis=dict(\n            title='Timeline',\n            zerolinewidth=4,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n\n        ),\n        yaxis=dict(\n            title='Listens Count',\n            showgrid=True,\n            titlefont=dict(\n                size=16,\n                color='black'\n            ),\n            tickfont=dict(\n                size=12,\n                color='black'\n            )\n        ),\n    )\n\n    fig = go.Figure(data=graph, layout=layout)\n    iplot(fig)","a1ca2da8":"# Load JSON data and convert it into a DataFrame <a class=\"anchor\" id=\"0\"><\/a>\n- Load JSON data.\n- Retrive only coulmns that are relevant to us.\n- Create a pandas DataFrame for easy processing.","55398ce3":"# Top 10 Listens <a class=\"anchor\" id=\"1\"><\/a>\n* Get top 10 listens based on the number of times I've listened to those.","eb8710fa":"# Top 10 Artists Listening Timeline <a class=\"anchor\" id=\"7\"><\/a>\n* Graphs of how many times I listened to an artist on a particular day.","ed4ec7ce":"# Top 10 Tracks Listening Timeline <a class=\"anchor\" id=\"6\"><\/a>\n* Graphs of how many times I listened to a track on a particular day.","2160d424":"# View a small sample of data <a class=\"anchor\" id=\"-2\"><\/a>\n","c23728b9":"# Top 10 Artists <a class=\"anchor\" id=\"2\"><\/a>\n* Get top 10 artists based on the number of times I've listened to those.","ef1a1737":"# Daily Listens Count <a class=\"anchor\" id=\"4\"><\/a>\n* Get the number of songs I listened each day.","32754395":"# Conclusion  <a class=\"anchor\" id=\"9\"><\/a>\nWith just the timestamp, track, artist, and release we can have this type of stats. But the data contains much more information than that.\n\nWe have MSIDs(MessyBrainzIDentifier) in the data which are associated with unclean metadata submitted by users (to know more about it checkout [here](https:\/\/messybrainz.org\/)).\n\nWe also have MBIDs(MusicBrainzIDentifier) for some data which are associated with clean metadata (to know more about it checkout [here](https:\/\/musicbrainz.org\/doc\/MusicBrainz_Identifier)). Using the wide varity of information from [MusicBrainz](https:\/\/musicbrainz.org\/) we can have access to a lot more stats.\n\nFrom MBIDs we can get  Acoustic information of a recording (to know more go to [AcousticBrainz](https:\/\/acousticbrainz.org\/)), we can get information about genres and moods of the song with which we can get stats like:\n\n- Most listened genres\n- Daily mood based on listen history","7169844b":"# Import required libraries <a class=\"anchor\" id=\"-1\"><\/a>","1139581f":"# Daily Listening Timings <a class=\"anchor\" id=\"5\"><\/a>\n* Get the daily timings on which I listen to music.\n\n* This one is the most interesting graph in this entire notebook. As can be seen from the graph I listen to music a lot more aroud 10PM-5AM and 2PM-4PM. This can be seen as the time in which I'm not busy. This graph will vary a lot for different users and can be a measure on how busy a person is around which time of the day.","75b27465":"# Top 10 Releases <a class=\"anchor\" id=\"3\"><\/a>\n* Get top 10 Releases based on the number of times I've listened to those.","ede100e0":"# Top 10 Releases Listening Timeline <a class=\"anchor\" id=\"8\"><\/a>\n* Graphs of how many times I listened to a release on a particular day.\n* An interesting one here is timeline of release \"100 violin masterworks\". Which makes to the top 10 despite of the fact that I've listened it on only two days.","d8cd1a84":"# Contents:\n* [Import required libraries](#-1)\n* [Load JSON data and convert it into a DataFrame](#0)\n* [View a small sample of data](#-2)\n* [Top 10 Listens](#1)\n* [Top 10 Artists](#2)\n* [Top 10 Releases](#3)\n* [Daily Listens Count](#4)\n* [Daily Listening Timings](#5)\n* [Top 10 Tracks Listening Timeline](#6)\n* [Top 10 Artists Listening Timeline](#7)\n* [Top 10 Releases Listening Timeline](#8)\n* [Conclusion](#9)","2bffae12":"# Music Listens Analysis from ListenBrainz data.\nYou can add your music listening history at [ListenBrainz](https:\/\/listenbrainz.org\/). This project is an open source and open data project about which you can know more from the website. They allow you to export your listens history in an JSON format. I've used my listens history to get some cool stats of my data.\n\nI've used [Plotly](https:\/\/plot.ly) for plotting graphs which makes the graphs interactive. I've used [pandasql](https:\/\/pypi.org\/project\/pandasql\/) to query the DataFrame\nwhich makes it easier to execute SQL queries on the DataFrame. The queries are in no way the most efficient ones to do the job but with around 2000 listens this works fine."}}