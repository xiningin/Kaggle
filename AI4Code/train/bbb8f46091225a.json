{"cell_type":{"e769f2af":"code","f046fd86":"code","dd013fb2":"code","233188ca":"code","cbe2c723":"code","7e9ade87":"code","3dc09791":"code","6e6faa30":"code","12a163f6":"code","5186742d":"code","fd092296":"code","787c0231":"code","c7a29b6a":"code","444701c6":"code","70ce8b62":"code","cab0c6d9":"code","d014613c":"code","b709f660":"code","b198c32f":"code","039e870c":"code","b4f4de2d":"code","77631c0f":"code","5b4156f9":"code","09c96132":"code","622ea302":"code","9bf1495d":"code","410d56c7":"code","5daa1f67":"code","2ee2c568":"code","92c92fd8":"code","de4beaa8":"code","68a3dac8":"code","7eaece74":"code","e00d8906":"code","17cdd236":"code","fae2468c":"code","de35fda7":"code","166d4327":"code","1a25a40a":"code","1d7e818c":"code","14847b07":"code","9e587f42":"code","baf61006":"code","95a8aead":"code","bfafd1f7":"code","6d488a4e":"code","0e165a33":"code","6a580ff7":"code","57cd52d6":"code","49cd33d5":"code","3524303f":"code","501a9a5d":"code","7badbae4":"code","1796d369":"code","295c5463":"code","00ba0f1f":"code","978baeac":"code","37e0f220":"code","56b95b9b":"code","23a538a0":"markdown","d6f5e006":"markdown","3069e3c6":"markdown","8713f4f9":"markdown","63812268":"markdown","dc4f5a64":"markdown","76c17a2f":"markdown","6b19e4a9":"markdown","97173485":"markdown"},"source":{"e769f2af":"#Import necessary packages\n\nimport pandas as pd #data manipulation packages\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder #creating a label dictionary \nfrom sklearn.model_selection import train_test_split #splitting data to train & validation\n\nfrom torchvision.datasets.folder import default_loader #loading image data\nfrom torch.utils.data import DataLoader\n\nimport matplotlib.pyplot as plt #data visualization\nimport seaborn as sns\nfrom torchvision.utils import make_grid\n    \nimport torchvision.transforms as transforms #machine learning packages\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n","f046fd86":"#Check summary file & metadata content\n\nsummary_csv = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_dataset_Summary.csv', index_col=0)\ntotal = summary_csv['Image_Count'].sum()\nprint('Total observations: ', total)\nprint(summary_csv)","dd013fb2":"#Loan metadata\nlabels_csv = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv')\nlabels_csv = labels_csv.rename(columns = {'Unnamed: 0':'Index'}) #rename index column\n\nlabels_csv.head(10000) #Note that some rowid's do not match with Index","233188ca":"#Create a new category Label Subcat where we recode the categories as Normal, Pneumonia Viral, Pneumonia Bacterial, or Pneumonia Stress.\n#We do not model for COVID 19 since we only have a few datasets for COVID.\n\nlabels_csv.loc[labels_csv['Label'] == 'Normal', 'Label_Subcat'] = 'Normal'\nlabels_csv.loc[(labels_csv['Label'] == 'Pnemonia') & (labels_csv['Label_1_Virus_category']=='Virus'), 'Label_Subcat'] = 'Pneumonia, Viral'\nlabels_csv.loc[(labels_csv['Label'] == 'Pnemonia') & (labels_csv['Label_1_Virus_category']=='bacteria'), 'Label_Subcat'] = 'Pneumonia, Bacterial'\nlabels_csv.loc[(labels_csv['Label'] == 'Pnemonia') & (labels_csv['Label_1_Virus_category']=='Stress-Smoking'), 'Label_Subcat'] = 'Pneumonia, Stress'  ","cbe2c723":"#Determing share of dataset per category\nc = labels_csv.groupby(['Dataset_type', 'Label_Subcat'])['X_ray_image_name'].count().rename(\"count\")\nc \/ c.groupby(level=0).sum() *100","7e9ade87":"#Create the directory for train and test sets\n\ndir_train = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train\/'\ndir_test = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test\/'\n\n#Filter dataset to train and test\ntrain_filtered = labels_csv[labels_csv['Dataset_type']=='TRAIN'][['X_ray_image_name','Label_Subcat']]\ntest_filtered = labels_csv[labels_csv['Dataset_type']=='TEST'][['X_ray_image_name','Label_Subcat']]","3dc09791":"#Split train dataset to train and validation data\n\ntorch.manual_seed(10) #fix randomization\n \ntrain_data, val_data=train_test_split(train_filtered, stratify=train_filtered[\"Label_Subcat\"], test_size=0.1, random_state=30) #split the data proportionally by category size\ntest_data= test_filtered","6e6faa30":"#Determine share of categories for train dataset\nt_cnt=train_data.groupby(['Label_Subcat'])['X_ray_image_name'].count().rename(\"count\")\nt_cnt \/ t_cnt.sum() *100","12a163f6":"#Determine share of categories for validation dataset\nv_cnt=val_data.groupby(['Label_Subcat'])['X_ray_image_name'].count().rename(\"count\")\nv_cnt \/ v_cnt.sum() *100","5186742d":"#Create dictionary for subcategories\n\nlabelencoder = LabelEncoder()\nlabel_subcat_list = [subcat for subcat in labels_csv[\"Label_Subcat\"].unique()]\nlabel_subcat_transform = sorted(labelencoder.fit_transform(label_subcat_list))\nsubcat_dict = {label_subcat_list[l]:label_subcat_transform[l] for l in range(len(label_subcat_list))}\nsubcat_dict\nsubcat_dict_items = { x:y for y,x in subcat_dict.items()}\nsubcat_dict_items","fd092296":"#Create a custom data loader\nclass ChestXray(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = csv_file\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        img_fname = self.root_dir +  self.df.iloc[idx,0]\n        img = default_loader(img_fname)\n        actual = self.df.iloc[idx,1]\n        actual_dict = subcat_dict[actual]\n        if self.transform:\n            img = self.transform(img)\n        return img, actual_dict","787c0231":"#Load images using sample data to check if data is loaded properly\n\ntorch.manual_seed(10)\ntemp_dataset = ChestXray(csv_file=train_filtered.sample(frac=1), root_dir=dir_train)\n\n\nfig = plt.figure(figsize=(20, 10))\n\nfor i, batch in enumerate(temp_dataset):\n    img, img_label = batch\n    fig.add_subplot(5, 5, i+1, xticks=[], yticks=[])\n    plt.imshow(img)\n    plt.title(subcat_dict_items[img_label])\n    if i == 9:\n        break","c7a29b6a":"#Resize and convert images to Tensor\ntransform_image = transforms.Compose([ transforms.Resize((100, 100)), \n                                       transforms.ToTensor()])\n\n#Load datasets using custom loader\ntrain_data_cload = ChestXray(train_data, root_dir=dir_train, transform=transform_image)\nval_data_cload = ChestXray(val_data, root_dir=dir_train, transform=transform_image)\ntest_data_cload  = ChestXray(test_data, root_dir=dir_test, transform=transform_image)\n","444701c6":"# create dataloaders\nfrom torch.utils.data import DataLoader\n\nbatch_size=32\nnum_workers=4\n\ntrain_dataset = DataLoader(train_data_cload, batch_size=batch_size, shuffle=True, pin_memory=True, num_workers=num_workers)\nval_dataset = DataLoader(val_data_cload, batch_size=batch_size, shuffle=True, pin_memory=True, num_workers=num_workers)\ntest_dataset = DataLoader(test_data_cload, batch_size=batch_size*2, shuffle=True, pin_memory=True, num_workers=num_workers)\n","70ce8b62":"#Plot sample images from train dataset\nfor images, _ in train_dataset:\n    print('images.shape:', images.shape)\n    plt.figure(figsize=(15,15))\n    plt.axis('off')\n    plt.imshow(make_grid(images, nrow=16).permute((1, 2, 0)))\n    break","cab0c6d9":"! pip install jovian","d014613c":"import jovian\nproject_name=\"Course-Project\"\n# jovian.commit(message=\"getting-data-ready\", project=project_name)","b709f660":"torch.cuda.is_available()","b198c32f":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')","039e870c":"device = get_default_device()\ndevice","b4f4de2d":"def to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","77631c0f":"for images, labels in train_dataset:\n    print(images.shape)\n    images = to_device(images, device)\n    print(images.device)\n    break","5b4156f9":"class DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","09c96132":"train_dataset = DeviceDataLoader(train_dataset, device)\nval_dataset = DeviceDataLoader(val_dataset, device)\ntest_dataset = DeviceDataLoader(test_dataset, device)","622ea302":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","9bf1495d":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');","410d56c7":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","5daa1f67":"import torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.models as models","2ee2c568":"# class XRayModel(nn.Module):\n#     \"\"\"Feedfoward neural network with 1 hidden layer\"\"\"\n#     def __init__(self, in_size, hidden_size, out_size):\n#         super().__init__()\n#         # hidden layer\n#         self.linear1 = nn.Linear(in_size, hidden_size)\n#         # output layer\n#         self.linear2 = nn.Linear(hidden_size, out_size)\n        \n#     def forward(self, xb):\n#         # Flatten the image tensors\n#         xb = xb.view(xb.size(0), -1)\n#         # Get intermediate outputs using hidden layer\n#         out = self.linear1(xb)\n#         # Apply activation function\n#         out = F.relu(out)\n#         # Get predictions using output layer\n#         out = self.linear2(out)\n#         return out\n    \n#     def training_step(self, batch):\n#         images, labels = batch \n#         out = self(images)                  # Generate predictions\n#         loss = F.cross_entropy(out, labels) # Calculate loss\n#         return loss\n    \n#     def validation_step(self, batch):\n#         images, labels = batch \n#         out = self(images)                    # Generate predictions\n#         loss = F.cross_entropy(out, labels)   # Calculate loss\n#         acc = accuracy(out, labels)           # Calculate accuracy\n#         return {'val_loss': loss, 'val_acc': acc}\n        \n#     def validation_epoch_end(self, outputs):\n#         batch_losses = [x['val_loss'] for x in outputs]\n#         epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n#         batch_accs = [x['val_acc'] for x in outputs]\n#         epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n#         return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n#     def epoch_end(self, epoch, result):\n#         print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))","92c92fd8":"# input_size = 30000\n# hidden_size = 32 # you can change this\n# num_classes = 4","de4beaa8":"# model = XRayModel(input_size, hidden_size=hidden_size, out_size=num_classes)\n# to_device(model, device)","68a3dac8":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))","7eaece74":"class XRayModelFF3(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n         # hidden layer\n        self.linear1 = nn.Linear(input_size, 7048)\n        # hidden layer 2\n        self.linear2 = nn.Linear(7048, 784)\n        # hidden layer 3\n        self.linear3 = nn.Linear(784, 587)\n         # output layer\n        self.linear4 = nn.Linear(587, output_size)\n        \n    def forward(self, xb):\n        # Flatten images into vectors\n        out = xb.view(xb.size(0), -1)\n       # Get intermediate outputs using hidden layer 1\n        out = self.linear1(out)\n        # Apply activation function\n        out = F.relu(out)\n        # Get intermediate outputs using hidden layer 2\n        out = self.linear2(out)\n        # Apply activation function\n        out = F.relu(out)\n        # Get intermediate outputs using hidden layer 3\n        out = self.linear3(out)\n        # Apply activation function\n        out = F.relu(out)\n        # Get predictions using output layer\n        out = self.linear4(out)\n        \n        return out","e00d8906":"input_size = 30000\noutput_size = 4","17cdd236":"model = XRayModelFF3()\nto_device(model, device)","fae2468c":"# class XRayCNN(ImageClassificationBase):\n#     def __init__(self):\n#         super().__init__()\n#         self.network = nn.Sequential(\n#             nn.Conv2d(3, 32, kernel_size=3, padding=1),\n#             nn.ReLU(),\n#             nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n#             nn.ReLU(),\n#             nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n\n#             nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n#             nn.ReLU(),\n#             nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n#             nn.ReLU(),\n#             nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n\n#             nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n#             nn.ReLU(),\n#             nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n#             nn.ReLU(),\n#             nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n\n#             nn.Flatten(), \n#             nn.Linear(36864, 1024),\n#             nn.ReLU(),\n#             nn.Linear(1024, 512),\n#             nn.ReLU(),\n#             nn.Linear(512, 4))\n        \n#     def forward(self, xb):\n#         return self.network(xb)","de35fda7":"# model = XRayCNN()\n# to_device(model, device)","166d4327":"for t in model.parameters():\n    print(t.shape)","1a25a40a":"for images, labels in train_dataset:\n    outputs = model(images)\n    loss = F.cross_entropy(outputs, labels)\n    print('Loss:', loss.item())\n    break\n\nprint('outputs.shape : ', outputs.shape)\nprint('Sample outputs :\\n', outputs[:2].data)","1d7e818c":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","14847b07":"history = []\nhistory = [evaluate(model, val_dataset)]\nhistory","9e587f42":"history1 = fit(5, 0.0005, model, train_dataset, val_dataset)","baf61006":"history2 = fit(10, 0.001, model, train_dataset, val_dataset)","95a8aead":"history3 = fit(5, 0.000001, model, train_dataset, val_dataset)","bfafd1f7":"# history += fit(10, 0.05, model, train_dataset, val_dataset)","6d488a4e":"# history += fit(10, 0.99, model, train_dataset, val_dataset)","0e165a33":"history = history1 + history2 + history3","6a580ff7":"plot_losses(history)","57cd52d6":"plot_accuracies(history)","49cd33d5":"evaluate(model, test_dataset)","3524303f":"test_acc = 39.11\ntest_loss = 1.17","501a9a5d":"arch = \"Feedforward 3 hidden layers (7048, 784, 587)\"","7badbae4":"lrs = [0.0005,0.001,0.000001]","1796d369":"epochs = [5,10,5]","295c5463":"torch.save(model.state_dict(), 'xray-feedforward-3layers')","00ba0f1f":"jovian.reset()","978baeac":"jovian.log_hyperparams(arch=arch, \n                       lrs=lrs, \n                       epochs=epochs)","37e0f220":"jovian.log_metrics(test_loss=test_loss, test_acc=test_acc)","56b95b9b":"jovian.commit(project=project_name, outputs=['xray-feedforward.pth'], environment=None)","23a538a0":"Model 2: Feedforward with 2 hidden layers","d6f5e006":"> > # GPU Set up","3069e3c6":"> # 3. Training the Model","8713f4f9":"> # 2. Modelling Set Up","63812268":"> # 4. Recording results","dc4f5a64":"Model 1: Feed forward","76c17a2f":"# Classification of Chest Xray Infection","6b19e4a9":"Model 3: Convulutional Neural Network","97173485":"> # 1. Data Preparation"}}