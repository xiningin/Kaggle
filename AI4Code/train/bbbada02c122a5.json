{"cell_type":{"7325490e":"code","a480175b":"code","2fe6556e":"code","b2977f95":"code","37740019":"code","fe6f3013":"code","21b575e4":"code","e4bfd151":"code","6662eb20":"code","af375c03":"code","ecc32bf8":"code","cab88d8e":"code","db439746":"code","4a762444":"code","50166eb1":"code","1e805a20":"code","8b74284f":"code","945a80a7":"code","0cd63a2d":"code","3d841303":"code","5fb73b31":"code","8a182d0a":"code","667f96ff":"code","b34f1cd9":"code","68237b9e":"code","807849ab":"code","b2e8d046":"code","9b2b7819":"code","cc72c289":"code","869ce095":"markdown","1d591c7f":"markdown","e33f9d04":"markdown"},"source":{"7325490e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a480175b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","2fe6556e":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","b2977f95":"df.head()","37740019":"df.info()","fe6f3013":"df.dtypes","21b575e4":"df.isnull().sum()","e4bfd151":"df.describe()","6662eb20":"sns.countplot(x='target', data=df, palette='Set1')\nplt.title('Frequency Distribution of target variable')\nplt.show()","af375c03":"plt.figure(figsize=(10,8))\nsns.catplot(x='age',hue='target',data=df,kind=\"count\")\nplt.plot()","ecc32bf8":"sns.countplot(x='target', hue='sex', data=df, palette='Set1')\nplt.title('Frequency Distribution of target variable')\nplt.show()","cab88d8e":"df.corr().style.format('{:.4}').background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","db439746":"df.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure','cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved', 'exercise_induced_angina','st_depression','st_slope','num_major_vessels','thalassemia','target']","4a762444":"df['sex'][df['sex']==0] = 'female'\ndf['sex'][df['sex']==1] = 'male'\n\ndf['chest_pain_type'][df['chest_pain_type']==1] = 'typical angina'\ndf['chest_pain_type'][df['chest_pain_type']==2] = 'atypical angina'\ndf['chest_pain_type'][df['chest_pain_type']==3] = 'non-angina pain'\ndf['chest_pain_type'][df['chest_pain_type']==4] = 'asymptomatic'\n\ndf['fasting_blood_sugar'][df['fasting_blood_sugar']==0] = 'lower than 120mg\/ml'\ndf['fasting_blood_sugar'][df['fasting_blood_sugar']==1] = 'greater than 120mg\/ml'\n\ndf['rest_ecg'][df['rest_ecg']==0] = 'normal'\ndf['rest_ecg'][df['rest_ecg']==1] = 'ST-T wave abnormality'\ndf['rest_ecg'][df['rest_ecg']==2] = 'left ventricular hypertrophy'\n\ndf['exercise_induced_angina'][df['exercise_induced_angina']==0] = 'no'\ndf['exercise_induced_angina'][df['exercise_induced_angina']==1] = 'yes'\n\ndf['st_slope'][df['st_slope']==1] = 'upsloping'\ndf['st_slope'][df['st_slope']==2] = 'flat'\ndf['st_slope'][df['st_slope']==3] = 'downsloping'\n\ndf['thalassemia'][df['thalassemia']==1] = 'normal'\ndf['thalassemia'][df['thalassemia']==2] = 'fixed defect'\ndf['thalassemia'][df['thalassemia']==3] = 'reversable defect'","50166eb1":"df.dtypes","1e805a20":"df['sex'] = df['sex'].astype('object')\ndf['chest_pain_type'] = df['chest_pain_type'].astype('object')\ndf['fasting_blood_sugar'] = df['fasting_blood_sugar'].astype('object')\ndf['rest_ecg'] = df['rest_ecg'].astype('object')\ndf['exercise_induced_angina'] = df['exercise_induced_angina'].astype('object')\ndf['st_slope'] = df['st_slope'].astype('object')\ndf['thalassemia'] = df['thalassemia'].astype('object')","8b74284f":"df.dtypes","945a80a7":"df = pd.get_dummies(df, drop_first=True)","0cd63a2d":"df.head()","3d841303":"X = df.iloc[:,0:13]\ny = df.iloc[:,-1]","5fb73b31":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)","8a182d0a":"print('X-train shape: ', X_train.shape)\nprint('X-test shape: ', X_test.shape)","667f96ff":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth=5)\nrf.fit(X_train, y_train)","b34f1cd9":"estimator = rf.estimators_[1]\nfeatures = [i for i in X_train.columns]\n\ny_train_str = y_train.astype('str')\ny_train_str[y_train_str=='0'] == 'no disease'\ny_train_str[y_train_str=='1'] == 'disease'\ny_train_str = y_train_str.values","68237b9e":"y_pred = rf.predict(X_test)\ny_pred_proba = rf.predict_proba(X_test)[:,1]","807849ab":"from sklearn.metrics import confusion_matrix, classification_report\ncm = confusion_matrix(y_test, y_pred)\ncm","b2e8d046":"print(classification_report(y_test,y_pred))","9b2b7819":"from sklearn.metrics import roc_curve, auc\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls='--', c='0.3')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.rcParams['font.size']=12\nplt.title('ROC curve for diabetes classifier')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)","cc72c289":"auc(fpr, tpr)","869ce095":"## Visualize Dataset","1d591c7f":"+ Our dataset does not have any missing values.","e33f9d04":"+ We can see that our dataset contains all numerical variables."}}