{"cell_type":{"650b6dc2":"code","9334bd14":"code","4b63f500":"code","5b1d687b":"code","e772f81d":"code","6c35c713":"code","ff08e4a6":"code","4fbfa431":"code","fed3874a":"code","928f7440":"code","a1285f94":"code","f37c48b2":"code","f0a91a1b":"code","5487442c":"code","14d40cbc":"code","e974bb18":"code","a449ce03":"code","11fb0596":"code","343bddc5":"code","6415a319":"code","d859f7c9":"code","6f912382":"code","28afa4d3":"code","9f97e0a5":"code","a2bd7f72":"code","a6f6b657":"code","1dc83850":"code","5686a41c":"code","4832dfa4":"code","df511e69":"code","aa0c112f":"code","20ffcf66":"code","25101cf4":"code","59a09afe":"code","ab65fd5e":"code","35c37cfe":"code","b8126042":"code","75e8a858":"code","59fedcad":"markdown","9507980b":"markdown","3977d0ac":"markdown","bbd47044":"markdown","37032250":"markdown","41f43f7f":"markdown","7c6a506f":"markdown","3a5969b0":"markdown","7a705b38":"markdown","0b9d77a9":"markdown","8d07b599":"markdown","654270a2":"markdown","817890f7":"markdown","fe457d17":"markdown","d09e5842":"markdown","249536f4":"markdown","34d9881e":"markdown","f33a0885":"markdown","ed3364f3":"markdown","2b061471":"markdown","276495f9":"markdown","38b25f4b":"markdown","32d40ea4":"markdown","dc38759e":"markdown"},"source":{"650b6dc2":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline","9334bd14":"train_df = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/test.csv\")\nsurvivor_df = pd.read_csv(\"\/kaggle\/input\/gender_submission.csv\")","4b63f500":"train_df.count()","5b1d687b":"test_df.count()","e772f81d":"train_df[\"Sex\"].replace(['male', 'female'], [0,1], inplace=True)\ntrain_df[\"Embarked\"].replace(['C', 'Q', 'S'], [0,1,2], inplace=True)\ntest_df[\"Sex\"].replace(['male', 'female'], [0,1], inplace=True)\ntest_df[\"Embarked\"].replace(['C', 'Q', 'S'], [0,1,2], inplace=True)","6c35c713":"train_df[\"Age\"].replace(np.nan, train_df[\"Age\"].median(), inplace=True)\ntest_df[\"Age\"].replace(np.nan, test_df[\"Age\"].median(), inplace=True)","ff08e4a6":"train_df[\"Embarked\"].replace(np.nan, train_df[\"Embarked\"].median(), inplace=True)","4fbfa431":"train_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 0) & (train_df['Age'] < 4), 0)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 4) & (train_df['Age'] < 18), 1)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 18) & (train_df['Age'] < 20), 2)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 20) & (train_df['Age'] < 29), 3)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 29) & (train_df['Age'] < 39), 4)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 39) & (train_df['Age'] < 49), 5)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 49) & (train_df['Age'] < 59), 6)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 59) & (train_df['Age'] < 69), 7)\ntrain_df['Age'] = train_df['Age'].mask((train_df['Age'] >= 69) & (train_df['Age'] <= 80), 8)","fed3874a":"test_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 0) & (test_df['Age'] < 4), 0)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 4) & (test_df['Age'] < 18), 1)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 18) & (test_df['Age'] < 20), 2)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 20) & (test_df['Age'] < 29), 3)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 29) & (test_df['Age'] < 39), 4)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 39) & (test_df['Age'] < 49), 5)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 49) & (test_df['Age'] < 59), 6)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 59) & (test_df['Age'] < 69), 7)\ntest_df['Age'] = test_df['Age'].mask((test_df['Age'] >= 69) & (test_df['Age'] <= 80), 8)","928f7440":"train_df.info()","a1285f94":"train_df.describe()","f37c48b2":"test_df.info()","f0a91a1b":"test_df.describe()","5487442c":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.tight_layout()\ntrain_df.groupby(\"Sex\")[\"PassengerId\"].count().plot.pie(labels=[\"male\", \"female\"], ax=axes[0], title=\"Repartition female\/male\", figsize=(15,20))\ntrain_df[train_df.Survived == 1].groupby(\"Sex\")[\"PassengerId\"].count().plot.pie(labels=[\"male\", \"female\"], ax=axes[1], title=\"Repartition female\/male among survivors\")","14d40cbc":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.subplots_adjust(wspace=1)\ntrain_df.groupby(\"Pclass\")[\"PassengerId\"].count().plot.bar(ax=axes[0], title=\"Repartition Pclass\", figsize=(20,5))\ntrain_df[train_df.Survived == 1].groupby(\"Pclass\")[\"PassengerId\"].count().plot.bar(ax=axes[1], title=\"Repartition Pclass among survivors\")","e974bb18":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.subplots_adjust(wspace=0.5)\ntrain_df.groupby(\"Age\")[\"PassengerId\"].count().plot.bar(ax=axes[0], title=\"Repartition Age\", figsize=(40,10))\ntrain_df[train_df.Survived == 1].groupby(\"Age\")[\"PassengerId\"].count().plot.bar(x=axes[1], title=\"Repartition Age among survivors\")","a449ce03":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.subplots_adjust(wspace=1)\ntrain_df.groupby(\"SibSp\")[\"PassengerId\"].count().plot.bar(ax=axes[0], title=\"Repartition SibSp\", figsize=(20,5))\ntrain_df[train_df.Survived == 1].groupby(\"SibSp\")[\"PassengerId\"].count().plot.bar(ax=axes[1], title=\"Repartition SibSp among survivors\")","11fb0596":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.subplots_adjust(wspace=1)\ntrain_df.groupby(\"Parch\")[\"PassengerId\"].count().plot.bar(ax=axes[0], title=\"Repartition Parch\", figsize=(20,5))\ntrain_df[train_df.Survived == 1].groupby(\"Parch\")[\"PassengerId\"].count().plot.bar(ax=axes[1], title=\"Repartition Parch among survivors\")","343bddc5":"fig, axes = plt.subplots(nrows=1, ncols=2)\nfig.subplots_adjust(wspace=1)\ntrain_df.groupby(\"Embarked\")[\"PassengerId\"].count().plot.bar(ax=axes[0], title=\"Repartition Embarked\", figsize=(20,5))\ntrain_df[train_df.Survived == 1].groupby(\"Embarked\")[\"PassengerId\"].count().plot.bar(ax=axes[1], title=\"Repartition Embarked among survivors\")","6415a319":"train_df[\"NbRelatives\"] = train_df[\"Parch\"] + train_df[\"SibSp\"]\ntest_df[\"NbRelatives\"] = test_df[\"Parch\"] + test_df[\"SibSp\"]","d859f7c9":"train_df.drop(columns=[\"Cabin\", \"Ticket\", \"Parch\", \"SibSp\"], inplace=True)\ntest_df.drop(columns=[\"Cabin\", \"Ticket\", \"Parch\", \"SibSp\"], inplace=True)","6f912382":"score_list = []","28afa4d3":"X_train = train_df[[\"NbRelatives\", \"Sex\", \"Pclass\", \"Embarked\", \"Age\"]]\ny_train = train_df[\"Survived\"]\n\nX_test = test_df[[\"NbRelatives\", \"Sex\", \"Pclass\", \"Embarked\", \"Age\"]]","9f97e0a5":"regressor = LogisticRegression()\nregressor.fit(X_train, y_train)","a2bd7f72":"score_list.append(regressor.score(X_train, y_train))","a6f6b657":"y_pred = regressor.predict(X_test)","1dc83850":"corr_df = pd.DataFrame({'features':X_train.columns})\ncorr_df[\"Corr\"] = pd.Series(regressor.coef_[0])\ncorr_df","5686a41c":"clf = RandomForestClassifier(n_estimators=128, max_depth=2, random_state=0)\nclf.fit(X_train, y_train)","4832dfa4":"score_list.append(clf.score(X_train, y_train))","df511e69":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train, y_train)\nscore_list.append(clf.score(X_train, y_train))","aa0c112f":"prediction = clf.predict(X_test)","20ffcf66":"submit_df = pd.DataFrame({'PassengerId': survivor_df[\"PassengerId\"], 'Survived': prediction})","25101cf4":"clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)\nclf.fit(X_train, y_train)\nscore_list.append(clf.score(X_train, y_train))","59a09afe":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)\nscore_list.append(gnb.score(X_train, y_train))","ab65fd5e":"models = [\"Logistic Regression\", \"Random Forest\", \"Decision Tree\", \"Neural Networks\", \"Bayesian Networks\"]","35c37cfe":"pd.DataFrame({\"Models\":models, \"Score\":score_list}).sort_values(\"Score\", ascending=False)","b8126042":"submit_df.to_csv('submission.csv', index=False)","75e8a858":"ls","59fedcad":"**Features** that seem to have an influence on the survival chance :<br>\n<br>\n**Sex** - Females are more likely to survive than men <br>\n**Pclass** - 1st class passenger have more chance to survive<br>\n**Age**<br>\n**SibSp** - Passenger without siblings or spouse are more likely to survive <br>\n**Parch** - Passenger without children or parents are more likely to survive <br>\n**Embarked** - Passenger that embarked on S are more likely to survive <br>","9507980b":"## <a id=\"intro\">Introduction<\/a>","3977d0ac":"<hr>\n<ol id=\"1\">\n  <li><a>[Introduction](#intro)<\/li>\n  <li>[Libraries](#lib)<\/li>\n  <li>[Loading the data](#load)<\/li>\n  <li>[Data Preparation](#prep)<\/li>\n  <li>[Exploratory Data Analysis](#section1)<\/li>\n  <li>[Machine Learning models](#model)\n      <ol id=\"2\">\n          <li>[Logistic Regression](#lr)<\/li>\n          <li>[Random Forest](#rf)<\/li>\n          <li>[Decision Tree](#lr)<\/li>\n          <li>[Neural Networks](#nn)<\/li>\n          <li>[Bayesian Networks](#bn)<\/li>      \n      <\/ol>\n  <\/li>\n  <li>[Conclusion](#concl)<\/li>\n<\/ol>\n<hr>\n\n","bbd47044":"## <a id=\"prep\">Data Preparation<\/a>","37032250":"<hr>","41f43f7f":"<hr>","7c6a506f":"## <a id=\"model\">Machine Learning models<\/a>","3a5969b0":"### <a id=\"lr\">Logistic Regression<\/a>","7a705b38":"### <a id=\"nn\">Neural Networks<\/a>","0b9d77a9":"**Decision Tree** offers the best prediction with 86.4% of accuracy.","8d07b599":"## <a id=\"concl\">Conclusion<\/a>","654270a2":"<hr>","817890f7":"### <a id=\"rf\">Random Forest<\/a>","fe457d17":"* There are 891 passengers in **train.csv**\n* There are 418 passengers in **test.csv**","d09e5842":"<hr>","249536f4":"## Table of contents","34d9881e":"This is my first kernel on Kaggle. My objective here is to perform a detailed analysis of the dataset in order to understand which are the features that might have influenced if a passenger survived or not to the sinking of the RMS Titanic in 1912. \nFrom that understanding of the dataset, I want to use several Maching Learning models in order to predict if a passenger might survive or not to the sinking and score the different models in order to choose the best solution.\n\nIt is very exciting for me to share my first kernel with the community and I wish to have your opinion about the kernel as you **leave a comment** !","f33a0885":"## <a id=\"load\">Loading the data<\/a>","ed3364f3":"**Age**, **Cabin** and **Embarked** values are missing in the training dataset<br>\n**Age**, **Fare** and **Cabin** values are missing in the testing dataset\n\nLet's fill these missing values.","2b061471":"## <a id=\"lib\">Libraries<\/a>","276495f9":"### <a id=\"dt\">Decision Tree<\/a>","38b25f4b":"### <a id=\"bn\">Bayesian Networks<\/a>","32d40ea4":"<hr>","dc38759e":"> ## <a id=\"section1\">Exploratory Data Analysis<\/a>"}}