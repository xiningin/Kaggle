{"cell_type":{"ff1e912e":"code","800f3889":"code","e19b641e":"code","f4d45f7d":"code","28140f6c":"code","43070eca":"code","ac309341":"code","2ce67602":"code","7ef513c4":"code","3c1161ca":"code","1a8be576":"code","f244a008":"code","cee4b5ca":"code","8241045e":"code","490e2618":"code","66cab136":"code","48da7d80":"code","55af5bdd":"code","ef420d68":"code","bf9776c6":"code","0db4c66e":"code","7442f45a":"code","b056b0db":"code","ca17653c":"code","37493bfb":"markdown","aac0f522":"markdown","912516e1":"markdown","b119508f":"markdown","bfed0a7d":"markdown","e70344e2":"markdown","40523a81":"markdown","69f5847e":"markdown","56c88daf":"markdown","16dd90f8":"markdown","f2bf405d":"markdown","201651b7":"markdown","a8e87e07":"markdown","5d03ff59":"markdown","5145dc91":"markdown","e9300520":"markdown"},"source":{"ff1e912e":"# import modules\nimport math\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nimport plotly.express as px\n\nimport gc\nimport re\nimport folium\nimport pycountry","800f3889":"url = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\n\n# upload dataset as pandas dataframe\ndf = pd.read_csv(url)","e19b641e":"df_uk = df[(df['Country\/Region']=='United Kingdom')]\ndf_uk.head(20)","f4d45f7d":"df_fr = df[(df['Country\/Region']=='France')]\ndf_fr.head(20)","28140f6c":"df_de = df[(df['Country\/Region']=='Denmark')]\ndf_de.head(20)","43070eca":"df_ne = df[(df['Country\/Region']=='Netherlands')]\ndf_ne.head(20)","ac309341":"# drop regions outside Europe\ndropped_uk = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='United Kingdom')].index\ndf.drop(dropped_uk, inplace=True)\n\ndropped_fr = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='France')].index\ndf.drop(dropped_fr, inplace=True)\n\ndropped_de = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='Denmark')].index\ndf.drop(dropped_de, inplace=True)\n\ndropped_ne = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='Netherlands')].index\ndf.drop(dropped_ne, inplace=True)","2ce67602":"# set latest date\ncurrent_date = df.iloc[:,-1]","7ef513c4":"# set map\n\nfig = px.choropleth(df, locations=\"Country\/Region\",\n                    projection=\"natural earth\", locationmode=\"country names\", title=\"<b>COVID-19<\/b>:<br>total number of cases\", color = current_date,\n                    template=\"plotly\", scope=\"europe\", color_continuous_scale=\"Reds\",range_color=[0,1000000] )\n\nannotations = []\n\n# data source\nannotations.append(dict(xref='paper', yref='paper', x=0.88, y=-0.07,\n                              xanchor='center', yanchor='top',\n                              text='Source: Johns Hopkins University<br>Our World In Data',\n                              font=dict(family='arial narrow',\n                                        size=8,\n                                        color='rgb(96,96,96)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n   \n))\n\nfig.update_layout(\n    font=dict(family='calibri',\n                                size=12,\n                                color='rgb(64,64,64)'))   \n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=\"cases\"    \n))\n\nfig.show()","3c1161ca":"# load second dataset\nurl_two = \"https:\/\/covid.ourworldindata.org\/data\/ecdc\/locations.csv\"\n\n# upload dataset as pandas dataframe\ndf_population = pd.read_csv(url_two)\n\n# select and drop original columns relevant to task at hand\ncols = ['countriesAndTerritories', 'population_year']\ndf_population = df_population.drop(cols, axis=1)\n\n# rename column for merge\ndf_population.rename(columns = {'location':'Country\/Region'}, inplace = True) \n\n# select European countries only\ndf_population_eu =  df_population[(df_population['continent'] == 'Europe')]\n\ndf_population_eu.head(10)","1a8be576":"# check unique locations\ndf_population_eu['Country\/Region'].unique()","f244a008":"# merge dataframe on Country\/Region column with left join \ndf_top_eu = pd.merge(df, df_population_eu, on='Country\/Region', how='left')\n\n# choose Europe as continent\ndf_top_eu = df_top_eu[(df_top_eu['continent']=='Europe')]\n\n# select and drop original columns relevant to task at hand\ncol = ['Province\/State']\ndf_top_eu = df_top_eu.drop(col, axis=1)\n\ndf_top_eu.head(20)","cee4b5ca":"# values to two lists\n# list_1 consists of values from the latest date (third last column)\nlist_1 = df_top_eu.iloc[:,-3].values.tolist()\nlist_2 = df_top_eu['population'].values.tolist()\n\n# empty list\nRelPop = []\n\n# function to calculate relative infection rate using two lists of values\ndef relative_population(x1, x2): \n                    result =  [(x1 \/ x2 * 100) for (x1, x2) in zip(list_1,list_2)] \n                    RelPop.append(result)   \n            \n# execute function on list values            \nrelative_population (list_1,list_2)\n\n# flatten results list\nRelPop = np.array(RelPop).flatten()\n\n# round to four digits\nRelPop = np.round(RelPop, 4)\n\n#create new column\ndf_top_eu['CasesPerCapita'] = np.array(RelPop)\n\n# values to descending order\ndf_top_eu = df_top_eu.sort_values(by ='CasesPerCapita', ascending=False)\n\ndf_top_eu.head(10)","8241045e":"# create Top 10 nations on both ends\ndf_most_eu = df_top_eu[:10]  \n# same as df.head(10)\ndf_least_eu = df_top_eu[-10:] \n# same as df.tail(10)\n\n# values to asscending order\ndf_most_eu = df_most_eu.sort_values(by ='CasesPerCapita', ascending=True)\ndf_least_eu = df_least_eu.sort_values(by ='CasesPerCapita', ascending=True)\n\ndf_most_eu.head(10)","490e2618":"df_least_eu.head(10)","66cab136":"# define parameters\nfig = px.bar(df_most_eu, x='Country\/Region', y ='CasesPerCapita', text = 'CasesPerCapita', color= 'CasesPerCapita', height=600)\n\n# set graphics\nfig.data[0].marker.line.width = 0.5\nfig.data[0].marker.line.color = \"black\"\n\nfig.update_traces(texttemplate='%{text}', textposition='outside')\nfig.update_layout(uniformtext_mode='hide')  \n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\nfig.update_layout(\n    yaxis=dict(\n        showline=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\n# set annotations\nannotations = []\n\n# data source\nannotations.append(dict(xref='paper', yref='paper', x=0.88, y=-0.16,\n                              xanchor='center', yanchor='top',\n                              text='Data: Johns Hopkins University,<br>Our World In Data',\n                              font=dict(family='arial narrow',\n                                        size=8,\n                                        color='rgb(96,96,96)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\n# set plot title\nfig.update_layout(\n    title='<b>COVID-19<\/b>:<br>highest number of cases per capita (0-100%)',\n                font=dict(family='calibri',\n                                size=12,\n                                color='rgb(64,64,64)'))\n\n# set axe titles etc.\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\n\nfig.update_yaxes(title_text='Cases Per Capita')\nfig.update_xaxes(title_text='Country')\n\nfig.update_yaxes(title_font=dict(size=14))\nfig.update_xaxes(title_font=dict(size=14))\n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=\"cases per capita\"    \n))\n\nfig.update_layout(xaxis_showgrid=False)\n\n# show figure\nfig.show()","48da7d80":"#plot second datafraem\n\n# define parameters\nfig = px.bar(df_least_eu, x='Country\/Region', y='CasesPerCapita', text = 'CasesPerCapita', color= 'CasesPerCapita', height=600)\n\n# set graphics\nfig.data[0].marker.line.width = 0.5\nfig.data[0].marker.line.color = \"black\"\n\nfig.update_traces(texttemplate='%{text}', textposition='outside')\nfig.update_layout(uniformtext_mode='hide')  \n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\nfig.update_layout(\n    yaxis=dict(\n        showline=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\n# set annotations\nannotations = []\n\n# data source\nannotations.append(dict(xref='paper', yref='paper', x=0.88, y=-0.12,\n                              xanchor='center', yanchor='top',\n                              text='Data: Johns Hopkins University,<br>Our World In Data',\n                              font=dict(family='arial narrow',\n                                        size=8,\n                                        color='rgb(96,96,96)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\n# set plot title\nfig.update_layout(\n    title='<b>COVID-19<\/b>:<br>lowest number of cases per capita (0-100%)',\n                font=dict(family='calibri',\n                                size=12,\n                                color='rgb(64,64,64)'))\n\n# set axe titles etc.\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\n\nfig.update_yaxes(title_text='Cases Per Capita')\nfig.update_xaxes(title_text='Country')\n\nfig.update_yaxes(title_font=dict(size=14))\nfig.update_xaxes(title_font=dict(size=14))\n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=\"cases per capita\"    \n))\n\nfig.update_layout(xaxis_showgrid=False)\n\n# show figure\nfig.show()","55af5bdd":"# load dataset from Github\nurl_three = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\n\n# upload dataset as pandas dataframe\ndf = pd.read_csv(url_three)\n\ndf.head(10)","ef420d68":"# drop regions outside Europe\ndropped_uk = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='United Kingdom')].index\ndf.drop(dropped_uk, inplace=True)\n\ndropped_fr = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='France')].index\ndf.drop(dropped_fr, inplace=True)\n\ndropped_de = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='Denmark')].index\ndf.drop(dropped_de, inplace=True)\n\ndropped_ne = df[(df['Province\/State'].notnull()) & (df['Country\/Region']=='Netherlands')].index\ndf.drop(dropped_ne, inplace=True)\n\n# create new dataframe\ndf_eu_data = df_top_eu [['Country\/Region', 'population', 'continent', 'CasesPerCapita']].copy()\n\n# merge new dataframe on Country\/Region column with left join \ndf_mortality_eu = pd.merge(df, df_eu_data, on='Country\/Region', how='left')\n\n# choose Europe as continent\ndf_mortality_eu = df_mortality_eu[(df_mortality_eu['continent']=='Europe')]\n\n# select and drop original columns relevant to task at hand\ncol = ['Province\/State']\ndf_mortality_eu = df_mortality_eu.drop(col, axis=1)\n\ndf_mortality_eu.head()","bf9776c6":"# values to two lists\nlist_1 = df_mortality_eu.iloc[:,-4].values.tolist()\nlist_2 = df_mortality_eu['population'].values.tolist()\n\n# empty list\nRelPop = []\n\n# function to calculate relative mortality rate using two lists of values\ndef relative_population(x1, x2): \n                    result =  [(x1 \/ x2 * 100) for (x1, x2) in zip(list_1,list_2)] \n                    RelPop.append(result)   \n            \n# execute function on list values            \nrelative_population (list_1,list_2)\n\n# flatten results list\nRelPop = np.array(RelPop).flatten()\n\n# round to four digits\nRelPop = np.round(RelPop, 4)\n\n#create new column\ndf_mortality_eu['MortalityPerCapita'] = np.array(RelPop)\n\n# values to descending order\ndf_mortality_eu = df_mortality_eu.sort_values(by ='MortalityPerCapita', ascending=False)\n\ndf_mortality_eu.head(10)","0db4c66e":"# create Top 10 nations on both ends\ndf_most_d_eu = df_mortality_eu[:10]  \n# same as df.head(10)\ndf_least_d_eu = df_mortality_eu[-10:] \n# same as df.tail(10)\n\n# values to asscending order\ndf_most_d_eu = df_most_d_eu.sort_values(by ='MortalityPerCapita', ascending=True)\ndf_least_d_eu = df_least_d_eu.sort_values(by ='MortalityPerCapita', ascending=True)\n\ndf_most_d_eu.head(10)","7442f45a":"df_least_d_eu.head(10)","b056b0db":"# define parameters\nfig = px.bar(df_most_d_eu, x='Country\/Region', y ='MortalityPerCapita', text = 'MortalityPerCapita', color= 'MortalityPerCapita', height=600)\n\n# set graphics\nfig.data[0].marker.line.width = 0.5\nfig.data[0].marker.line.color = \"black\"\n\nfig.update_traces(texttemplate='%{text}', textposition='outside')\nfig.update_layout(uniformtext_mode='hide')  \n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\nfig.update_layout(\n    yaxis=dict(\n        showline=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\n# set annotations\nannotations = []\n\n# data source\nannotations.append(dict(xref='paper', yref='paper', x=0.88, y=-0.22,\n                              xanchor='center', yanchor='top',\n                              text='Data: Johns Hopkins University,<br>Our World In Data',\n                              font=dict(family='arial narrow',\n                                        size=8,\n                                        color='rgb(96,96,96)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\n# set plot title\nfig.update_layout(\n    title='<b>COVID-19<\/b>:<br>highest mortality rate in Europe (0-100%)',\n                font=dict(family='calibri',\n                                size=12,\n                                color='rgb(64,64,64)'))\n\n# set axe titles etc.\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\n\nfig.update_yaxes(title_text='Mortality Per Capita')\nfig.update_xaxes(title_text='Country')\n\nfig.update_yaxes(title_font=dict(size=14))\nfig.update_xaxes(title_font=dict(size=14))\n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=\"mortality per capita\"    \n))\n\nfig.update_layout(xaxis_showgrid=False)\n\n# show figure\nfig.show()","ca17653c":"# define parameters\nfig = px.bar(df_least_d_eu, x='Country\/Region', y='MortalityPerCapita', text = 'MortalityPerCapita', color= 'MortalityPerCapita', height=600)\n\n# set graphics\nfig.data[0].marker.line.width = 0.5\nfig.data[0].marker.line.color = \"black\"\n\nfig.update_traces(texttemplate='%{text}', textposition='outside')\nfig.update_layout(uniformtext_mode='hide')  \n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\nfig.update_layout(\n    yaxis=dict(\n        showline=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        )))\n\n# set annotations\nannotations = []\n\n# data source\nannotations.append(dict(xref='paper', yref='paper', x=0.88, y=-0.12,\n                              xanchor='center', yanchor='top',\n                              text='Data: Johns Hopkins University,<br>Our World In Data',\n                              font=dict(family='arial narrow',\n                                        size=8,\n                                        color='rgb(96,96,96)'),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n\n# set plot title\nfig.update_layout(\n    title='<b>COVID-19<\/b>:<br>lowest mortality rate in Europe (0-100%)',\n                font=dict(family='calibri',\n                                size=12,\n                                color='rgb(64,64,64)'))\n\n# set axe titles etc.\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\nfig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\n\nfig.update_yaxes(title_text='Mortality Per Capita')\nfig.update_xaxes(title_text='Country')\n\nfig.update_yaxes(title_font=dict(size=14))\nfig.update_xaxes(title_font=dict(size=14))\n\nfig.update_layout(coloraxis_colorbar=dict(\n    title=\"mortality per capita\"    \n))\n\nfig.update_layout(xaxis_showgrid=False)\n\n# show figure\nfig.show()","37493bfb":"The next two plots gives us visual outlook on COVID-19 mortality rate in different European countries.","aac0f522":"In similar manner to reported COVID-19 cases data, regions outside Europe will be excluded. Also, a new dataframe \"de_eu_data\" will be created. It will include selected columns from our earlier calculations on per capita cases etc.","912516e1":"Next two new dataframes will be created, based on the CasesPerCapita value. First dataframe will include ten countries with highest per capita cases, whereas the second dataframe includes ten lowest countries.","b119508f":"Since the focus of this notebook is Europe, it is worth noting that European countries are still in charge of regions other than their own actual territory. The following printouts show more about this.","bfed0a7d":"As mentioned before, COVID-19 pandemic and the data related to it changes on daily basis. What we can see however is that sometimes a single COVID-19 case or death in small population has higher relative statistical significance than in more populated countries. One aspect worth further inspecting would be to analyze whether the relatively high COVID-19 per capita cases and deaths in Belgium have anything to do with the fact that Belgium - especially Brussels - is the decision-making hub for the European Union along with Strasbourg in France. This of course means constant travel and movement of people across Europe also during national and regional lockdowns etc. However, all this is speculation and cannot directly be deducted from data used in this notebook.","e70344e2":"Similar to per capita COVID-19, the mortality rate in different countries can now be calculated.","40523a81":"To get the per capita number of COVID-19 cases in different countries, we need population data mentioned in the beginning.","69f5847e":"Now we can plot the two dataframes and actually see the situation.","56c88daf":"When it comes to Europe and COVID-19, most headlines are usually about France or Italy and their recent developments. This notebooks take quick peek at the larger scheme, showing the latest situation across the region.\n\nThe first part of the notebook does that quite literally by showing a map of Europe based on total number of reported COVID-19 cases. Next this number will be reflected upon population in different countries. In the final part, mortality rate per capita in different countries will be analyzed in similar manner.\n\nThis notebook uses two different datasets available online. The COVID-19 data was compiled from the Johns Hopkins University dataset, which is updated regularly on GitHub. The population data used takes advantage of the **Our World In Data** project. External links to both datasets are below:\n\n__[COVID-19 data](https:\/\/github.com\/CSSEGISandData\/COVID-19)__\n\n__[population data (direct link to csv file)](https:\/\/covid.ourworldindata.org\/data\/ecdc\/locations.csv)__\n\nThe research question of this notebook is to analyze whether the \"hotspots\" such as Italy, Spain or France actually have most cases per capita or highest mortality rate in Europe. Of course the COVID-19 pandemic is still very much subject to change on daily basis, so claiming anything definitive about it would not be very meaningful a task.\n\n***December 2nd, 2020***<br>\n***Jari Peltola***","16dd90f8":"In the final part of this notebook, we will add mortality rate to all this. To achieve the task, a new dataset consisting on reported COVID-19 deaths is used.","f2bf405d":"The latest daily COVID-19 data is always located in the same column, so next we will make a date selection based on that location.","201651b7":"With the merged dataset it is now possible to calculate per capita number of COVID-19 cases.","a8e87e07":"Now we can use that data on plotting a region map of Europe and COVID-19 cases.","5d03ff59":"Again we concentrate on lowest and highest relative values.","5145dc91":"Next we merge the population data with COVID-19 case data.","e9300520":"Because we are about to analyze situation in Europe only, we will exclude all regions located outside Europe from our selection."}}