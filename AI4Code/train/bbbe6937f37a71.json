{"cell_type":{"c53f79cf":"code","63fce925":"code","aa9889ab":"code","2d5ba005":"code","a25815ba":"code","a730ba62":"code","a50e807d":"code","f0c022b2":"code","5fae2643":"code","6fd0eb09":"code","192eacd8":"code","6e94faec":"code","35a9105a":"code","4002ff78":"code","919f63a3":"code","22c015f7":"code","27f7169a":"code","69b36e57":"code","b8193fad":"code","1453cdde":"code","c2ed6d4c":"code","466ae271":"code","af87aec7":"code","e5840a77":"code","e1875c39":"code","9a6859cd":"code","04ff93f2":"code","46fb4c60":"code","f831e15d":"code","61e867ad":"code","a5c08eea":"code","a518b7cb":"code","6685c12b":"code","183b1a46":"code","dd5700d5":"code","dbff57b5":"code","534b56fa":"code","8ef009eb":"code","1880858e":"code","014d8cf6":"code","5a663690":"code","b7f9b37b":"code","2415bfa5":"code","11270ed0":"code","206bfb22":"code","9e1556df":"code","e9860a59":"code","9eb97067":"code","6736907d":"code","7a81bc67":"code","e2dc6c7f":"code","6f30b3d2":"code","b7e16264":"code","4b0a889b":"code","f8f39521":"code","d5ff0cf3":"markdown","bf834472":"markdown"},"source":{"c53f79cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63fce925":"# Import packages\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nsns.set(style=\"white\", font_scale=1.2)\n","aa9889ab":"# Load dataframes\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","2d5ba005":"df_train.head()","a25815ba":"print(df_train.shape)\nprint(df_test.shape)","a730ba62":"df_test.head()","a50e807d":"df_train.info()","f0c022b2":"df_test.info()","5fae2643":"df_train.describe()","6fd0eb09":"def check_missing_values(df, df_name=None):\n    print(f'{df_name} - Missing values:')\n    print('-'*30)\n    columns = df.columns\n\n    for column in columns:\n        count_missing_values = df[column].isnull().sum()\n        missing_values = (count_missing_values \/ len(df[column])) * 100\n    \n        if missing_values !=0:\n            print(f'{column} --> {count_missing_values} values | {missing_values:.2f}%')","192eacd8":"check_missing_values(df_train, 'TRAIN')\nprint(\"-----------------------------------------\")\ncheck_missing_values(df_test, 'TEST')","6e94faec":"df_train.drop(['PassengerId', 'Cabin', 'Ticket'], axis=1, inplace=True)\n\nsubmission = pd.DataFrame()\nsubmission['PassengerId'] = df_test['PassengerId']\ndf_test.drop(['PassengerId', 'Cabin', 'Ticket'], axis=1, inplace=True)","35a9105a":"print('df_train shape:',df_train.shape)\nprint('df_test shape:',df_test.shape)","4002ff78":"fig, axes = plt.subplots(1, 4, figsize=(20,5))\n\nsns.distplot(df_train['Age'].dropna(), kde=False, bins=30, ax=axes[0])\naxes[0].set_title('Age Distribution overall')\n\nsns.distplot(df_train[df_train['Sex']=='male']['Age'].dropna(),\n             kde=False, color='blue', bins=30, ax=axes[1])\naxes[1].set_title('Age Distribution (Male)')\n\nsns.distplot(df_train[df_train['Sex']=='female']['Age'].dropna(),\n             kde=False, color='orange', bins=30, ax=axes[2])\naxes[2].set_title('Age Distribution (Female)')\n\nsns.kdeplot(df_train[df_train['Sex']=='male']['Age'].dropna(),\n            color='blue', ax=axes[3])\nsns.kdeplot(df_train[df_train['Sex']=='female']['Age'].dropna(),\n            color='orange', ax=axes[3])","919f63a3":"fig, axes = plt.subplots(1, 2, figsize=(12,5))\n\nsns.countplot(x='Sex', data=df_train, ax=axes[0])\naxes[0].set_title('Number of males and females')\n\nsns.countplot(x='Sex', hue='Survived', data=df_train, ax=axes[1], palette='Set3')\naxes[1].set_title('Survival by sex')\naxes[1].set_ylabel('')","22c015f7":"fig, axes = plt.subplots(1, 3, figsize=(16,5))\n\nsns.countplot(x='Pclass', data=df_train, ax=axes[0], palette='Set1')\naxes[0].set_title('Number of people in each Pclass')\n\nsns.countplot(x='Pclass', hue='Sex', data=df_train, ax=axes[1])\naxes[1].set_title('Sex by Pclass')\naxes[1].set_ylabel('')\n\nsns.countplot(x='Pclass', hue='Survived', data=df_train, ax=axes[2], palette='Set3')\naxes[2].set_title('Survival by Pclass')\naxes[2].set_ylabel('')\n\nplt.tight_layout()","27f7169a":"fig, axes = plt.subplots(1, 3, figsize=(16,5))\n\nsns.countplot(x='Embarked', data=df_train, ax=axes[0], palette='Set1')\naxes[0].set_title('Number of people in each Embarkation')\n\nsns.countplot(x='Embarked', hue='Sex', data=df_train, ax=axes[1])\naxes[1].set_title('Sex by Embarcation')\naxes[1].set_ylabel('')\n\nsns.countplot(x='Embarked', hue='Survived', data=df_train, ax=axes[2], palette='Set3')\naxes[2].set_title('Survival by Embarcation')\naxes[2].set_ylabel('')\n\nplt.tight_layout()","69b36e57":"fig, axes = plt.subplots(1, 3, figsize=(14,5))\n\nsns.pointplot(x ='Sex', y=\"Survived\", data=df_train, ax=axes[0])\naxes[0].set_title('Survival by Sex')\n\nsns.pointplot(x ='Pclass', y=\"Survived\", data=df_train, ax=axes[1])\naxes[1].set_title('Survival by Pclass')\naxes[1].set_ylabel('')\n\nsns.pointplot(x ='Embarked', y=\"Survived\", data=df_train, ax=axes[2])\naxes[2].set_title('Survival by Embarkation')\naxes[2].set_ylabel('')\n\nfor ax in axes:\n    ax.set_yticks(np.arange(0, 1.1, 0.1))\n\nplt.tight_layout()","b8193fad":"sns.boxplot(x='Survived', y='Age', data=df_train, palette='Set3')\nplt.title('Survival by Age')","1453cdde":"sns.boxplot(x='Survived', y='Fare', data=df_train)\nplt.title('Survival by Fare')","c2ed6d4c":"plt.figure(figsize=(8,8))\n\nsns.heatmap(df_train.corr(), annot=True, cmap='magma', square=True,\n            linecolor=\"white\", linewidths=0.1)\nplt.title('Correlations between variables')","466ae271":"check_missing_values(df_train, 'DF TRAIN')\ncheck_missing_values(df_test, 'DF TEST')","af87aec7":"df_train['Familysize'] = df_train['SibSp'] + df_train['Parch']\n\ndf_test['Familysize'] = df_test['SibSp'] + df_test['Parch']","e5840a77":"df_train['Alone'] = df_train['Familysize'].apply(lambda x: 1 if x == 0 else 0)\n\ndf_test['Alone'] = df_test['Familysize'].apply(lambda x: 1 if x == 0 else 0)","e1875c39":"df_train[df_train['Embarked'].isnull()]","9a6859cd":"fig, axes = plt.subplots(2, 2, figsize=(16,8))\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=df_train, ax=axes[0,0])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Sex\", data=df_train, ax=axes[0,1])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Survived\", data=df_train, ax=axes[1,0])\n\nsns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Alone\", data=df_train, ax=axes[1,1])\n\nplt.tight_layout()","04ff93f2":"df_train['Embarked'] = df_train['Embarked'].fillna('C')","46fb4c60":"df_test[df_test['Fare'].isnull()]","f831e15d":"median_fare = df_test[(df_test['Pclass'] == 3) & (df_test['Embarked'] == 'S') & (df_test['Alone'] == 1)]['Fare'].median()\n\nmedian_fare","61e867ad":"df_test['Fare'] = df_test['Fare'].fillna(median_fare)","a5c08eea":"#Fill Age values\nplt.figure(figsize=(12, 7))\n\ntestPlot = sns.boxplot(x='Pclass', y='Age', hue='Sex', data=df_train)\n\nm1 = df_train.groupby(['Pclass', 'Sex'])['Age'].median().values\nmL1 = [str(np.round(s, 2)) for s in m1]\n\nind = 0\nfor tick in range(len(testPlot.get_xticklabels())):\n    testPlot.text(tick-.2, m1[ind+1]+1, mL1[ind+1],  horizontalalignment='center',  color='w', weight='semibold')\n    testPlot.text(tick+.2, m1[ind]+1, mL1[ind], horizontalalignment='center', color='w', weight='semibold')\n    ind += 2\n\n# Display median values from: https:\/\/stackoverflow.com\/questions\/45475962\/labeling-boxplot-with-median-values\/45476485","a518b7cb":"# Get median value for Age based on Pclass and Sex (Not having survive\/die in account, for now)\n\ndef get_age(cols):\n    age = cols[0]\n    pclass = cols[1]\n    sex = cols[2]\n    \n    if pd.isnull(age):\n\n        if pclass == 1:\n            if sex == 'male':\n                return 40\n            else:\n                return 35\n\n        elif pclass == 2:\n            if sex == 'male':\n                return 30\n            else:\n                return 28\n\n        else:\n            if sex == 'male':\n                return 25\n            else:\n                return 21.5\n            \n    else:\n        return age","6685c12b":"df_train['Age'] = df_train[['Age','Pclass', 'Sex']].apply(get_age, axis=1)\n\ndf_test['Age'] = df_test[['Age','Pclass', 'Sex']].apply(get_age, axis=1)","183b1a46":"#Extract Title from Name\ndef get_title(name):\n    for string in name.split():\n        if '.' in string:\n            return string[:-1]","dd5700d5":"df_train['Title'] = df_train['Name'].apply(lambda x: get_title(x))\n\ndf_test['Title'] = df_test['Name'].apply(lambda x: get_title(x))","dbff57b5":"df_train['Title'].value_counts()","534b56fa":"df_train.drop('Name', axis=1, inplace=True)\ndf_test.drop('Name', axis=1, inplace=True)","8ef009eb":"#Handle Title\nfor dataframe in [df_train, df_test]:\n    \n    dataframe['Title'] = dataframe['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', \n                                                 'Major', 'Rev', 'Sir', 'Dona', 'Countess', 'Jonkheer'], 'Other')\n\n    dataframe['Title'] = dataframe['Title'].replace('Mlle', 'Miss')\n    dataframe['Title'] = dataframe['Title'].replace('Ms', 'Miss')\n    dataframe['Title'] = dataframe['Title'].replace('Mme', 'Mrs')","1880858e":"#Encoding variables\nsex = pd.get_dummies(df_train['Sex'], prefix='Sex', drop_first=True)\nembarked = pd.get_dummies(df_train['Embarked'], prefix='Embarked', drop_first=True)\npclass = pd.get_dummies(df_train['Pclass'], prefix='Pclass', drop_first=True)\ntitle = pd.get_dummies(df_train['Title'], prefix='Title', drop_first=True)\n\ndf_train.drop(['Sex', 'Embarked', 'Pclass', 'Title'], axis=1, inplace=True)\n\ndf_train = pd.concat([df_train, sex, embarked, pclass, title], axis=1)","014d8cf6":"print('df_train shape:',df_train.shape)\ndf_train.head()","5a663690":"sex = pd.get_dummies(df_test['Sex'], prefix='Sex', drop_first=True)\nembarked = pd.get_dummies(df_test['Embarked'], prefix='Embarked',drop_first=True)\npclass = pd.get_dummies(df_test['Pclass'], prefix='Pclass',drop_first=True)\ntitle = pd.get_dummies(df_test['Title'], prefix='Title', drop_first=True)\n\ndf_test.drop(['Sex', 'Embarked', 'Pclass', 'Title'], axis=1, inplace=True)\n\ndf_test = pd.concat([df_test, sex, embarked, pclass, title], axis=1)","b7f9b37b":"print('df_test shape:',df_test.shape)\ndf_train.head()","2415bfa5":"#Scaling Age and Fare variables\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf_train[['Age', 'Fare']] = scaler.fit_transform(df_train[['Age', 'Fare']])\n\ndf_test[['Age', 'Fare']] = scaler.transform(df_test[['Age', 'Fare']])","11270ed0":"df_train.corr()['Survived'].sort_values()[:-1]","206bfb22":"df_train.corr()['Survived'].sort_values()[:-1].plot.bar()","9e1556df":"from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, make_scorer","e9860a59":"X = df_train.drop('Survived', axis=1)\ny = df_train['Survived']","9eb97067":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=1)","6736907d":"# Dictionary with each prediction\npredictions = {}","7a81bc67":"#KNN:\nfrom sklearn.neighbors import KNeighborsClassifier","e2dc6c7f":"error_rate = []\n\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    \n    pred_i = knn.predict(X_test)\n    \n    error_rate.append(np.mean(pred_i != y_test))","6f30b3d2":"# Plot Error rate vs Number of neighbors\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40), error_rate,\n         color='blue', ls='--',\n         marker='o', markerfacecolor='red', markersize=10)\nplt.xlabel('Neighbors')\nplt.ylabel('Error rate')\nplt.title('Error rate vs Number of neighbors')","b7e16264":"knn = KNeighborsClassifier(n_neighbors=25)\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)","4b0a889b":"print(f'Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%')\nprint('-'*55)\nprint(classification_report(y_test, y_pred))\nprint('-'*55)\nprint(confusion_matrix(y_test, y_pred))","f8f39521":"prediction = knn.predict(df_test)\n\nsubmission['Survived'] = prediction\n\nsubmission.to_csv('Submission.csv', index=False)","d5ff0cf3":"Checking missing values:","bf834472":"TRAINIGN:"}}