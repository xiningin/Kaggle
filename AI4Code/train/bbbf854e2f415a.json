{"cell_type":{"3dbb2340":"code","7ab58a27":"code","4f4ee20e":"code","b3e77e60":"code","9c090aa5":"code","5d0dbdc6":"code","fe76e5e5":"code","19b6fb25":"code","23e326a6":"code","fda02862":"code","09ff327c":"code","02a2c85c":"code","389cf025":"code","beb9848e":"code","a9ec2852":"code","eee733a4":"markdown","725da052":"markdown","f617b673":"markdown","87cc6e4a":"markdown","99ac1f64":"markdown","b8bb1f87":"markdown","c94a008a":"markdown","af5e2f67":"markdown"},"source":{"3dbb2340":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ab58a27":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","4f4ee20e":"X_train = train_data.drop(columns=\"Survived\")\ny_train = train_data[\"Survived\"]","b3e77e60":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","9c090aa5":"X_test = test_data","5d0dbdc6":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX_train = pd.get_dummies(X_train[features])\nX_test = pd.get_dummies(X_test[features])\nX_train.head()","fe76e5e5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_validate","19b6fb25":"rf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\ncv_results = cross_validate(rf, X_train, y_train, cv=5, scoring='accuracy', \n                            return_train_score=True)\n\nprint(\"Test score:\",cv_results['test_score'])\n# To compare with best_score_ from models that use gridsearch (see below):\nprint(\"*Mean test score:\",cv_results['test_score'].mean())\n\nprint(\"Train score:\",cv_results['train_score'])\nprint(\"Mean train score:\",cv_results['train_score'].mean())","23e326a6":"from sklearn.model_selection import GridSearchCV","fda02862":"param_grid = {\"n_estimators\": np.arange(10, 200, 10),\n              \"max_depth\": np.arange(1, 10, 1)}\n\nrf = RandomForestClassifier(random_state=1)\nsearch1 = GridSearchCV(rf, param_grid=param_grid, cv=5, refit=True, scoring = 'accuracy', \n                      n_jobs=-1, verbose=1)\n\nsearch1.fit(X_train, y_train)\nprint(\"Best parameters :\", search1.best_params_)\n# Useful to compare to other models (including with the cv scores obtained above)\n# in order to select the best one:\nprint(\"Best score (mean cross-validated score of the best_estimator) :\",\n      search1.best_score_)","09ff327c":"# Recover the best estimator of the previous gridsearch (refit on the entire train set)\nsearch1_best_estimator = search1.best_estimator_\nsearch1_best_estimator","02a2c85c":"model = RandomForestClassifier(n_estimators=140, max_depth=4, random_state=1)\nmodel.fit(X_train, y_train);","389cf025":"model = search1_best_estimator # already trained on the entire train set\nmodel","beb9848e":"y_test = model.predict(X_test)","a9ec2852":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_test})\noutput.to_csv('rf_gridsearch.csv', index=False)\nprint(\"Prediction successfully saved\")","eee733a4":"#### Train final model on entire train set (1st cell), or recover best estimator of a previous grid search (2nd cell)","725da052":"#### Models with hyperparameters (grid search)","f617b673":"#### Models without hyperparameters","87cc6e4a":"### Import data","99ac1f64":"### Model","b8bb1f87":"### Predict and save predictions to csv","c94a008a":"### Preprocessing - Exploratory Data Analysis - Feature Engineering","af5e2f67":"### Model Evaluation (done by Kaggle)"}}