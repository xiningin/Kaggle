{"cell_type":{"335aa853":"code","79755747":"code","42c43e4b":"code","a8689a29":"code","e99f8c84":"code","27ae65e3":"code","ccf0dc81":"code","1808027b":"code","7905bcaf":"code","e9a2fbf6":"code","7abc3a94":"code","2cde6f3e":"code","8a36ff49":"code","4af592b6":"code","7abde67e":"code","feab156a":"code","2529ae20":"code","77303df1":"code","51661899":"code","c8e3d00e":"code","c5bc72a3":"code","c994d529":"code","b93e6eb9":"code","4df79d95":"code","08be3ee1":"code","58407363":"markdown","64153549":"markdown","519a5fdd":"markdown","f702ca5c":"markdown","842939a0":"markdown","ad59b251":"markdown","fe5a6a64":"markdown","d7a7a032":"markdown","3ac6b6db":"markdown","2d204262":"markdown","d45d1dbe":"markdown","def79e98":"markdown","7d0f0bd9":"markdown","a1faefd2":"markdown","81a2f97c":"markdown","1d50dab5":"markdown","6026be32":"markdown"},"source":{"335aa853":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","79755747":"virus_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nvirus_data.head(5)","42c43e4b":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\n#statewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\ncovid_India_cases.head(5)","a8689a29":"country_codes = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\ncountry_codes = country_codes.drop('GDP (BILLIONS)', 1)\ncountry_codes.rename(columns={'COUNTRY': 'Country', 'CODE': 'Code'}, inplace=True)","e99f8c84":"virus_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nprev_index = 0\nfirst_time = False\ntmp = 0\n\n\nfor i, row in virus_data.iterrows():\n\n    if(virus_data.loc[i,'SNo'] < 1342 and virus_data.loc[i,'Province\/State']=='Hubei'):\n        if(first_time):\n            tmp = virus_data.loc[i,'Confirmed']\n            prev_index = i\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[i,'Confirmed'] + 593\n            first_time = False\n        else:\n            increment = virus_data.loc[i,'Confirmed'] - tmp\n            tmp = virus_data.loc[i,'Confirmed']\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[prev_index,'Confirmed'] + increment + 593\n            prev_index = i\n    \n\nvirus_data.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\nvirus_data = virus_data.fillna('unknow')\nvirus_data['Country'] = virus_data['Country'].str.replace('US','United States')\nvirus_data['Country'] = virus_data['Country'].str.replace('UK','United Kingdom') \nvirus_data['Country'] = virus_data['Country'].str.replace('Mainland China','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('South Korea','Korea, South')\nvirus_data['Country'] = virus_data['Country'].str.replace('North Korea','Korea, North')\nvirus_data['Country'] = virus_data['Country'].str.replace('Macau','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('Ivory Coast','Cote d\\'Ivoire')\nvirus_data = pd.merge(virus_data,country_codes,on=['Country'])\n#virus_data.head()\n#print(len(virus_data))","27ae65e3":"covid_India_cases = covid_India_cases.fillna('unknow')\ntop_country = covid_India_cases.loc[covid_India_cases['Date'] == covid_India_cases['Date'].iloc[-1]]\ntop_country = top_country.groupby(['State'])['Confirmed'].sum().reset_index()\ntop_country = top_country.sort_values('Confirmed', ascending=False)\ntop_country = top_country[:30]\ntop_country_codes = top_country['State']\ntop_country_codes = list(top_country_codes)\n\n#countries = virus_data.loc[virus_data['Country'] in top_country_codes]\ncountries = covid_India_cases[covid_India_cases['State'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','State'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n    \n################################    Maharashtra    #################\nMaharashtra = countries_day.loc[countries_day['State']=='Maharashtra']\nMaharashtra=Maharashtra.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Maharashtra = []\nnew_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[0] - list(Maharashtra['Deaths'])[0] \n                           - list(Maharashtra['Recovered'])[0] )\n\nfor i in range(1,len(Maharashtra)):\n\n    new_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[i] - \n                                     list(Maharashtra['Deaths'])[i] - \n                                     list(Maharashtra['Recovered'])[i])\n    \n#######################   Gujarat   ############\nGujarat = countries_day.loc[countries_day['State']=='Gujarat']\nGujarat=Gujarat.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Gujarat = []\nnew_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[0] - list(Gujarat['Deaths'])[0] \n                           - list(Gujarat['Recovered'])[0] )\n\nfor i in range(1,len(Gujarat)):\n    \n    new_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[i] - \n                                  list(Gujarat['Deaths'])[i] - \n                                  list(Gujarat['Recovered'])[i])\n    \n###########################    Delhi   ##################3\nDelhi = countries_day.loc[countries_day['State']=='Delhi']\nDelhi=Delhi.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Delhi = []\nnew_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[0] - list(Delhi['Deaths'])[0] \n                           - list(Delhi['Recovered'])[0] )\n\nfor i in range(1,len(Delhi)):\n    \n    new_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[i] - \n                                     list(Delhi['Deaths'])[i] - \n                                    list(Delhi['Recovered'])[i])\n    \n#############################    Madhya Pradesh    ################3\nMadhya_Pradesh = countries_day.loc[countries_day['State']=='Madhya Pradesh']\nMadhya_Pradesh=Madhya_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Madhya_Pradesh = []\nnew_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[0] - list(Madhya_Pradesh['Deaths'])[0] \n                           - list(Madhya_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Madhya_Pradesh)):\n    \n    new_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[i] - \n                                     list(Madhya_Pradesh['Deaths'])[i] - \n                                    list(Madhya_Pradesh['Recovered'])[i])\n    \n################################   Rajasthan  ##########\nRajasthan = countries_day.loc[countries_day['State']=='Rajasthan']\nRajasthan=Rajasthan.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Rajasthan = []\nnew_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[0] - list(Rajasthan['Deaths'])[0] \n                           - list(Rajasthan['Recovered'])[0] )\n\nfor i in range(1,len(Rajasthan)):\n    \n    new_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[i] - \n                                     list(Rajasthan['Deaths'])[i] - \n                                    list(Rajasthan['Recovered'])[i])\n    \n#################################    Uttar Pradesh   ##############\nUttar_Pradesh = countries_day.loc[countries_day['State']=='Uttar Pradesh']\nUttar_Pradesh=Uttar_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Uttar_Pradesh = []\nnew_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[0] - list(Uttar_Pradesh['Deaths'])[0] \n                           - list(Uttar_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Uttar_Pradesh)):\n    \n    new_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[i] - \n                                     list(Uttar_Pradesh['Deaths'])[i] - \n                                    list(Uttar_Pradesh['Recovered'])[i])\n    \n#####################################  Tamil Nadu  ############\nTamil_Nadu = countries_day.loc[countries_day['State']=='Tamil Nadu']\nTamil_Nadu=Tamil_Nadu.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Tamil_Nadu = []\nnew_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[0] - list(Tamil_Nadu['Deaths'])[0] \n                           - list(Tamil_Nadu['Recovered'])[0] )\n\nfor i in range(1,len(Tamil_Nadu)):\n    \n    new_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[i] - \n                                     list(Tamil_Nadu['Deaths'])[i] - \n                                    list(Tamil_Nadu['Recovered'])[i])\n######################################## Andhra Pradesh ##############\nAndhra_Pradesh = countries_day.loc[countries_day['State']=='Andhra Pradesh']\nAndhra_Pradesh=Andhra_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Andhra_Pradesh = []\nnew_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[0] - list(Andhra_Pradesh['Deaths'])[0] \n                           - list(Andhra_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Andhra_Pradesh)):\n    \n    new_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[i] - \n                                     list(Andhra_Pradesh['Deaths'])[i] - \n                                    list(Andhra_Pradesh['Recovered'])[i])\n\n########################################Telengana#####################\n\nTelengana = countries_day.loc[countries_day['State']=='Telengana']\nTelengana=Telengana.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Telengana = []\nnew_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[0] - list(Telengana['Deaths'])[0] \n                           - list(Telengana['Recovered'])[0] )\n\nfor i in range(1,len(Telengana)):\n    \n    new_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[i] - \n                                     list(Telengana['Deaths'])[i] - \n                                    list(Telengana['Recovered'])[i])\n\n\n##########################################  West Bengal #####################33\nWest_Bengal = countries_day.loc[countries_day['State']=='West Bengal']\nWest_Bengal=West_Bengal.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_West_Bengal = []\nnew_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[0] - list(West_Bengal['Deaths'])[0] \n                           - list(West_Bengal['Recovered'])[0] )\n\nfor i in range(1,len(West_Bengal)):\n    \n    new_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[i] - \n                                     list(West_Bengal['Deaths'])[i] - \n                                    list(West_Bengal['Recovered'])[i])\n############################################ \np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Gujarat['Confirmed'])), np.log(new_confirmed_cases_Gujarat), color='#3EC358', \n        legend_label='Gujarat', line_width=1)\np1.circle(np.log(list(Gujarat['Confirmed'])[-1]), np.log(new_confirmed_cases_Gujarat[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Delhi['Confirmed'])), np.log(new_confirmed_cases_Delhi), color='#C3893E', \n       legend_label='Delhi', line_width=1)\np1.circle(np.log(list(Delhi['Confirmed'])[-1]), np.log(new_confirmed_cases_Delhi[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(Madhya_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Madhya_Pradesh), color='#3E4CC3', \n        legend_label='Madhya Pradesh', line_width=1)\np1.circle(np.log(list(Madhya_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Madhya_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Rajasthan['Confirmed'])), np.log(new_confirmed_cases_Rajasthan), color='#F54138', \n        legend_label='Rajasthan', line_width=1)\np1.circle(np.log(list(Rajasthan['Confirmed'])[-1]), np.log(new_confirmed_cases_Rajasthan[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Uttar_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Uttar_Pradesh), color='#23BCDB', \n        legend_label='Uttar Pradesh', line_width=1)\np1.circle(np.log(list(Uttar_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Uttar_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Tamil_Nadu['Confirmed'])), np.log(new_confirmed_cases_Tamil_Nadu), color='#010A0C', \n        legend_label='Tamil Nadu', line_width=1)\np1.circle(np.log(list(Tamil_Nadu['Confirmed'])[-1]), np.log(new_confirmed_cases_Tamil_Nadu[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Andhra_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Andhra_Pradesh), color='#bf40bf', \n        legend_label='Andhra Pradesh', line_width=1)\np1.circle(np.log(list(Andhra_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Andhra_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Telengana['Confirmed'])), np.log(new_confirmed_cases_Telengana), color='lime', \n        legend_label='Telengana', line_width=1)\np1.circle(np.log(list(Telengana['Confirmed'])[-1]), np.log(new_confirmed_cases_Telengana[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='#0000ff', \n        legend_label='West Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","ccf0dc81":"p1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='Blue', \n        legend_label='West_Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","1808027b":"import IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","7905bcaf":"df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndata = df.copy()\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.drop(['Sno', 'Time'],axis=1,inplace=True)\n\n# collect present data\nfrom datetime import date\ndata_apr = data[data['Date'] > pd.Timestamp(date(2020,4,12))]\n\n# prepaing data state wise\nstate_cases = data_apr.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","e9a2fbf6":"state_details = pd.pivot_table(df, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\nstate_details['Recovery Rate'] = round(state_details['Cured'] \/ state_details['Confirmed'],2)\nstate_details['Deaths']['Madhya Pradesh#']=119\n\nstate_details['Deaths']=state_details['Deaths'].astype(np.float32)\n#state_details=state_details.reset_index()\nstate_details['Active']=state_details['Confirmed']-state_details['Cured']-state_details['Deaths']\n\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\n#state_details.style.background_gradient(cmap='PuBuGn')\nstate_details.style.bar(subset=['Confirmed'], color='#ff781c')\\\n                    .bar(subset=['Cured'], color='green')\\\n                    .bar(subset=['Deaths'], color='red')\\\n                    .bar(subset=['Active'], color='#cd4f39')\\\n                    .bar(subset=['Recovery Rate'], color='lime')\\\n                    .bar(subset=['Death Rate'], color='gray')","7abc3a94":"from pandas_profiling import ProfileReport \nreport = ProfileReport(state_cases)\nreport","2cde6f3e":"from plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=False)\nlabs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nfig = px.treemap(labs, path=['state','city'],\n                  color='city', hover_data=['lab','address'],\n                  color_continuous_scale='reds')\nfig.show()","8a36ff49":"plt.figure(figsize=(35, 15))\nplt.title('Labs Across State')\nlabs.state.value_counts().plot.bar();","4af592b6":"plt.figure(figsize=(35, 15))\nplt.title('Labs Across City')\nlabs.city.value_counts().plot.bar();","7abde67e":"state_details=state_details.reset_index()\nfig = px.sunburst(state_details, path=['State\/UnionTerritory'], values='Active',\n                  color='Active', hover_data=['Confirmed','Cured','Deaths'],\n                  color_continuous_scale='PuBuGn')\nfig.show()","feab156a":"india_map=state_details\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nl=list(india_map[\"State\/UnionTerritory\"])\nfig = make_subplots(rows=11, cols=3,subplot_titles=l,specs=[[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],[{'type':'domain'}, {'type':'domain'},{'type':'domain'}]])\na=1\nb=1\n\nfor i in l:\n    \n    \n    temp_df=india_map[india_map[\"State\/UnionTerritory\"]==i]\n    values=[int(temp_df[\"Deaths\"]),int(temp_df[\"Cured\"]),int(temp_df[\"Active\"])]\n    labels=[\"Cured\",\"Deaths\",\"Active\"]\n \n    #annot.append(dict(text=i,font_size=10, showarrow=False))\n    \n    fig.add_trace(go.Pie(labels=labels, textposition=\"inside\",values=values, name=i),a, b)\n    \n    if b==3 and a<11:\n        a=a+1\n   \n      \n    if b+1>3:\n        b=1\n    else:\n        b=b+1\n   \n    fig.update_traces(hole=.4)\n\nfig.update_layout(\n    \n    height=1900,width=1000\n)\nfig.update(layout_title_text='StateWise analysis of Positive cases')\n\n\n#fig = go.Figure(fig)\nfig.show()\n#iplot(fig)  ","2529ae20":"import datetime\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\n\ncumulative_df = india_covid_19.groupby([\"State\/UnionTerritory\", \"Date\"])[\"Confirmed\", \"Deaths\", \"Cured\"].sum().reset_index()\ncumulative_df[\"Date\"] = pd.to_datetime(cumulative_df[\"Date\"] , format=\"%d\/%m\/%y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"Date\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"Date\"]>=start_date]\ncumulative_df[\"Date\"] = cumulative_df[\"Date\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"Date\", animation_group=\"State\/UnionTerritory\",\n           size=\"Confirmed\", color=\"State\/UnionTerritory\", hover_name=\"State\/UnionTerritory\",\n           log_x=False, size_max=55, range_x=[0,15000], range_y=[-20,800])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & death cases over time in India states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()\n\n","77303df1":"import datetime\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\n\ncumulative_df = india_covid_19.groupby([\"State\/UnionTerritory\", \"Date\"])[\"Confirmed\", \"Deaths\", \"Cured\"].sum().reset_index()\ncumulative_df[\"Date\"] = pd.to_datetime(cumulative_df[\"Date\"] , format=\"%d\/%m\/%y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"Date\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"Date\"]>=start_date]\ncumulative_df[\"Date\"] = cumulative_df[\"Date\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Cured\", animation_frame=\"Date\", animation_group=\"State\/UnionTerritory\",\n           size=\"Confirmed\", color=\"State\/UnionTerritory\", hover_name=\"State\/UnionTerritory\",\n           log_x=False, size_max=55, range_x=[0,15000], range_y=[-20,2500])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & recovered cases over time in India states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of recovered cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()\n","51661899":"import datetime\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\n\ncumulative_df = india_covid_19.groupby([\"State\/UnionTerritory\", \"Date\"])[\"Confirmed\", \"Deaths\", \"Cured\"].sum().reset_index()\ncumulative_df[\"Date\"] = pd.to_datetime(cumulative_df[\"Date\"] , format=\"%d\/%m\/%y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"Date\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"Date\"]>=start_date]\ncumulative_df[\"Date\"] = cumulative_df[\"Date\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Cured\", y=\"Deaths\", animation_frame=\"Date\", animation_group=\"State\/UnionTerritory\",\n           size=\"Confirmed\", color=\"State\/UnionTerritory\", hover_name=\"State\/UnionTerritory\",\n           log_x=False, size_max=55, range_x=[0,2500], range_y=[-20,800])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of recovered & death cases over time in India states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of recovered cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()\n","c8e3d00e":"zone=pd.read_csv('\/kaggle\/input\/covid-19-india-zone-classification\/lockdownindiawarningzones.csv')","c5bc72a3":"zone.style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'})","c994d529":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]}')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","b93e6eb9":"plotPerColumnDistribution(zone, 10, 5)","4df79d95":"fig = px.treemap(zone, path=[\"State\",'Zone','District'],\n                  color='Zone',\n                 color_discrete_map={'(?)':'black','Green Zone':'#00FF00', 'Red Zone':'#ff0000', 'Orange Zone':'#FFA500'},\n                 hover_data=['Zone'])\nfig.show()","08be3ee1":"state_details","58407363":"# Tree Plot","64153549":"# State Wise:","519a5fdd":"# Hope you guys find this notebook useful.\n# If you like this notebook, please upvote.***\ud83d\udc4d\n# That will keep me motivated :)","f702ca5c":"# StateWise analysis of Positive cases","842939a0":"Reference: \n1. https:\/\/www.kaggle.com\/soham1024\/covid-19-india-visualization-forecasting#Containment-Zones-in-India\n2. https:\/\/www.kaggle.com\/vanshjatana\/coronavirus-attack-in-india","ad59b251":"# To be continued....","fe5a6a64":"![](https:\/\/images.livemint.com\/img\/2020\/04\/19\/original\/Chart1a_1587287717356.png)","d7a7a032":"![](https:\/\/wordpress.accuweather.com\/wp-content\/uploads\/2020\/03\/CoronavirusAnimation2.gif)","3ac6b6db":"# Containment Zones","2d204262":"# Report Profilling","d45d1dbe":"# Load Data","def79e98":"![](https:\/\/www.hindustantimes.com\/images\/app-images\/2020\/4\/DelhiMetro_pg7_gfx.jpg)","7d0f0bd9":"# Test","a1faefd2":"# State","81a2f97c":"# City","1d50dab5":"# Visualization","6026be32":"# Introduction\n\n**The first case of the COVID-19 pandemic in India was reported on 30 January 2020, originating from China. As of 4 May 2020, the Ministry of Health and Family Welfare have confirmed a total of 42,533 cases, 11,707 recoveries (including 1 migration) and 1373 deaths in the country. Experts suggest the number of infections could be much higher as India's testing rates are among the lowest in the world. The infection rate of COVID-19 in India is reported to be 1.7, significantly lower than in the worst affected countries.**\n\n**The outbreak has been declared an epidemic in more than a dozen states and union territories, where provisions of the Epidemic Diseases Act, 1897 have been invoked, and educational institutions and many commercial establishments have been shut down. India has suspended all tourist visas, as a majority of the confirmed cases were linked to other countries.**\n\n**On 22 March 2020, India observed a 14-hour voluntary public curfew at the instance of the prime minister Narendra Modi. The government followed it up with lockdowns in 75 districts where COVID-19 cases had occurred as well as all major cities. Further, on 24 March, the prime minister ordered a nationwide lockdown for 21 days, affecting the entire 1.3 billion population of India. On 14 April, the prime minister extended the ongoing nationwide lockdown till 3 May.**\n\n**Michael Ryan, chief executive director of the World Health Organisation's health emergencies programme, said that India had \"tremendous capacity\" to deal with the coronavirus outbreak and, as the second most populous country, will have enormous impact on the world's ability to deal with it. Other commentators worried about the economic devastation caused by the lockdown, which has huge effects on informal workers, micro and small enterprises, farmers and the self-employed, who are left with no livelihood in the absence of transportation and access to markets.**\n\n**Observers state that the lockdown has slowed the growth rate of the pandemic by 6 April to a rate of doubling every 6 days, and, by 18 April, to a rate of doubling every 8 days.**\n\n**The Oxford COVID-19 Government Response Tracker (OxCGRT), in its report based on data from 73 countries, reports that the Indian Government has responded more stringently than other countries in tackling the pandemic. It noted the government's swift action, emergency policy making emergency investment in healthcare, fiscal measures, investment in vaccine research and active response to the situation, and scored India with a \"100\" for its strictness.**\n\n**As of 27 April the states of Goa, Sikkim, Nagaland, Arunachal Pradesh, Manipur and Tripura have been declared as \"Covid-19 Free\" with zero active cases by the Government of India. More states are expected to join this list in a few weeks.**"}}