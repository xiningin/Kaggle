{"cell_type":{"b7eda623":"code","001d60e7":"code","77b3ce51":"code","0c0649e2":"code","848b840c":"code","7b3b9e66":"code","b0387d74":"code","bcdb2854":"code","6cd884a6":"code","b4f21be3":"code","40036634":"code","1c667702":"code","8a421692":"code","6d27ba55":"code","397dd2be":"code","c44061db":"code","389f78db":"code","48020193":"code","12f52659":"code","c810d490":"code","1d8e7a1b":"code","b5fd0476":"code","fe555344":"code","b4297298":"code","28208dc1":"code","3eab72f3":"code","bc360a36":"code","c88c2228":"code","d5c75997":"code","a422775a":"code","2238aa02":"code","fbdc0d98":"code","c9970b51":"code","31f5b705":"code","6d1d999c":"code","ac3b4579":"code","6b318289":"code","cf7a6f12":"code","37f52b65":"code","63a580d4":"code","85bb4268":"code","0393f079":"markdown"},"source":{"b7eda623":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","001d60e7":"!pip install pytorch-lightning","77b3ce51":"test_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\nsample_submission= pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')\ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')","0c0649e2":"train_targets_scored.head()","848b840c":"train_targets_scored.shape","7b3b9e66":"train_features.head()","b0387d74":"train_features.shape","bcdb2854":"train_features['cp_type'].value_counts()","6cd884a6":"import matplotlib.pyplot as plt\n%matplotlib inline\n","b4f21be3":"train_features['cp_time'].value_counts()","40036634":"cs = train_features[:1][[col for col in train_features.columns if 'c-' in col]].values.reshape(-1, 1)","1c667702":"plt.plot(cs)","8a421692":"plt.plot(sorted(cs))","6d27ba55":"train_features = pd.concat([train_features, pd.get_dummies(train_features['cp_time'], prefix='cp_time')], axis=1)\ntrain_features = pd.concat([train_features, pd.get_dummies(train_features['cp_dose'], prefix='cp_dose')], axis=1)\ntrain_features = pd.concat([train_features, pd.get_dummies(train_features['cp_type'], prefix='cp_type')], axis=1)\ntrain_features = train_features.drop(['cp_type', 'cp_time', 'cp_dose'], axis=1)","397dd2be":"train_features.shape","c44061db":"import torch\nimport pandas as pd\nimport torch.nn as nn\n\nclass MoADataset :\n    def __init__(self, dataset, targets) :\n        self.dataset = dataset\n        self.targets = targets\n    \n    def __len__(self) :\n        return self.dataset.shape[0]\n    \n    def __getitem__(self, item) :\n        return {\n            \"x\" : torch.tensor(self.dataset[item,:], dtype = torch.float),\n            \"y\" : torch.tensor(self.targets[item,:], dtype = torch.float)\n        }\n","389f78db":"\n\nclass Model(nn.Module):\n    def __init__(self, num_features, num_targets):\n        super().__init__()\n        self.model = nn.Sequential(\n            nn.Linear(num_features, 1024),\n            nn.BatchNorm1d(1024),\n            nn.Dropout(0.3),\n            nn.PReLU(),\n            nn.Linear(1024, 1024),\n            nn.BatchNorm1d(1024),\n            nn.Dropout(0.3),\n            nn.PReLU(),\n            nn.Linear(1024, num_targets),\n        )\n\n    def forward(self, x):\n        x = self.model(x)\n        return x\n        ","48020193":"import pytorch_lightning as pl\nfrom sklearn.model_selection import train_test_split\n","12f52659":"\nclass MoADataModule(pl.LightningDataModule):\n    def __init__(self, hparams, data, targets):\n        super().__init__()\n        self.hparams = hparams\n        self.data = data\n        self.targets = targets\n\n    def prepare_data(self):\n        pass\n\n    def setup(self, stage=None):\n\n        train_data, valid_data, train_targets, valid_targets = train_test_split(self.data, self.targets,\n                                                                                test_size=0.1, random_state=42)\n        self.train_dataset = MoADataset(dataset=train_data.iloc[:, 1:].values,\n                                   targets=train_targets.iloc[:, 1:].values)\n        self.valid_dataset = MoADataset(dataset=valid_data.iloc[:, 1:].values,\n                                         targets=valid_targets.iloc[:, 1:].values)\n\n    def train_dataloader(self):\n        train_loader = torch.utils.data.DataLoader(\n            self.train_dataset,\n            batch_size=1024,\n            num_workers=0,\n            shuffle=True,\n        )\n        return train_loader\n\n    def val_dataloader(self):\n        valid_loader = torch.utils.data.DataLoader(  self.valid_dataset,\n            batch_size=1024,\n            num_workers=0,\n            shuffle=False,\n        )\n\n        return valid_loader\n\n    def test_dataloader(self):\n        return None\n        ","c810d490":"\n    \nclass LitMoA(pl.LightningModule):\n    def __init__(self, hparams, model):\n        super(LitMoA, self).__init__()\n        self.hparams = hparams\n        self.model = model\n        self.criterion = nn.BCEWithLogitsLoss()\n        \n    def forward(self, x):\n        return self.model(x)\n        \n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer,\n                                                               patience=3, threshold=0.00001, mode=\"min\", verbose=True)\n        return ([optimizer],\n                [{'scheduler': scheduler, 'interval': 'epoch', 'monitor': 'valid_loss'}])\n    \n    def training_step(self, batch, batch_idx):\n        data = batch['x']\n        target = batch['y']\n        out = self(data)\n        loss = self.criterion(out, target)\n        \n        logs = {'train_loss': loss}\n        \n        return {'loss': loss, 'log': logs, 'progress_bar': logs}\n    \n    def training_epoch_end(self, outputs):\n        avg_loss = torch.stack([x['loss'] for x in outputs]).mean()\n        logs = {'train_loss': avg_loss}\n        return {'log': logs, 'progress_bar': logs}\n\n    def validation_step(self, batch, batch_idx):\n        data = batch['x']\n        target = batch['y']\n        out = self(data)\n        loss = self.criterion(out, target)\n        \n        logs = {'valid_loss': loss}\n        \n        return {'loss': loss, 'log': logs, 'progress_bar': logs}\n    \n    def validation_epoch_end(self, outputs):\n        avg_loss = torch.stack([x['loss'] for x in outputs]).mean()\n        logs = {'valid_loss': avg_loss}\n        return {'log': logs, 'progress_bar': logs}","1d8e7a1b":"trainer = pl.Trainer(gpus=1,\n                    max_epochs=5,\n                    weights_summary='full')","b5fd0476":"train_features.shape","fe555344":"train_targets_scored.shape","b4297298":"net = Model(879, 206)\nmodel = LitMoA(hparams = {}, model=net)\ndm = MoADataModule(hparams = {}, data = train_features, targets = train_targets_scored)\n","28208dc1":"trainer.fit(model, dm)","3eab72f3":"test_features = pd.concat([test_features, pd.get_dummies(test_features['cp_time'], prefix='cp_time')], axis=1)\ntest_features = pd.concat([test_features, pd.get_dummies(test_features['cp_dose'], prefix='cp_dose')], axis=1)\ntest_features = pd.concat([test_features, pd.get_dummies(test_features['cp_type'], prefix='cp_type')], axis=1)\ntest_features = test_features.drop(['cp_type', 'cp_time', 'cp_dose'], axis=1)","bc360a36":"class TestMoADataset :\n    def __init__(self, dataset) :\n        self.dataset = dataset\n        \n    def __len__(self) :\n        return self.dataset.shape[0]\n    \n    def __getitem__(self, item) :\n        return {\n            'x' : torch.tensor(self.dataset[item, :], dtype=torch.float)\n        }","c88c2228":"test_dataset = TestMoADataset(dataset=test_features.iloc[:, 1:].values)","d5c75997":"test_loader = torch.utils.data.DataLoader(test_dataset,\n            batch_size=1024,\n            num_workers=0,\n            shuffle=False,\n        )","a422775a":"predictions = np.zeros((test_features.shape[0], 206))\ninference_model = model.model\ninference_model.eval()\nfor ind, batch in enumerate(test_loader) :\n    p = torch.sigmoid(inference_model(batch['x'])).detach().cpu().numpy()\n    predictions[ind*1024 : (ind+1)*1024] = p","2238aa02":"predictions.shape","fbdc0d98":"test_features1 = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ns = pd.DataFrame({'sig_id': test_features1['sig_id'].values})","c9970b51":"s","31f5b705":"for col in train_targets_scored.columns[1:].tolist():\n    s[col] = 0","6d1d999c":"s.shape","ac3b4579":"s.loc[:, train_targets_scored.columns[1:]] = predictions","6b318289":"s.head()","cf7a6f12":"test_features1.loc[test_features1['cp_type'] =='ctl_vehicle', 'sig_id']","37f52b65":"s.loc[s['sig_id'].isin(test_features1.loc[test_features1['cp_type'] =='ctl_vehicle', 'sig_id']), train_targets_scored.columns[1:]] = 0","63a580d4":"s.to_csv('submission.csv', index=False)\n\n","85bb4268":"torch.save(model.model.state_dict(), 'model_shashank_copied.pt')\n","0393f079":"Model"}}