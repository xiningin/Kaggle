{"cell_type":{"7529f2aa":"code","ac30d136":"code","493e87b0":"code","d06341a7":"code","f3b1281a":"code","7e01a72d":"code","3b73375e":"code","12a998c0":"code","3ec9e031":"code","59e53b01":"code","d3ba479a":"code","1ab5f090":"code","fb51e7e3":"code","51a2641b":"code","78b2b1fa":"code","81b4ec5f":"code","d2e8b93f":"code","e84ea659":"markdown","392c129c":"markdown","8e5c8063":"markdown","43da71c9":"markdown"},"source":{"7529f2aa":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt","ac30d136":"X_train = pd.read_csv(\"..\/input\/kaistbme587\/X_train.csv\")\nX_test = pd.read_csv(\"..\/input\/kaistbme587\/X_test.csv\")","493e87b0":"X_train.describe()","d06341a7":"X_train[\"\uacb0\uce21\uac2f\uc218\"]=X_train.isna().sum(axis = 1)\nX_test[\"\uacb0\uce21\uac2f\uc218\"]=X_test.isna().sum(axis = 1)","f3b1281a":"plt.hist(X_train.query(\"Fraud ==1\")[\"\uacb0\uce21\uac2f\uc218\"],bins = 50)\nplt.show()","7e01a72d":"plt.hist(X_train.query(\"Fraud ==0\")[\"\uacb0\uce21\uac2f\uc218\"],bins = 50)\nplt.show()","3b73375e":"X_train[\"\uc794\ub3c8\"] = X_train[\"\uacb0\uc81c\uae08\uc561\"].apply(lambda x : x - x\/\/100*100)\nX_train[\"\uc794\ub3c8\uc5ec\ubd80\"] = X_train[\"\uacb0\uc81c\uae08\uc561\"].apply(lambda x : x == x\/\/100*100)\nX_test[\"\uc794\ub3c8\"] = X_test[\"\uacb0\uc81c\uae08\uc561\"].apply(lambda x : x - x\/\/100*100)\nX_test[\"\uc794\ub3c8\uc5ec\ubd80\"] = X_test[\"\uacb0\uc81c\uae08\uc561\"].apply(lambda x : x == x\/\/100*100)","12a998c0":"cols = ['\uc8fc\uc18c\uc815\ubcf41','\uc8fc\uc18c\uc815\ubcf42','\uce74\ub4dc\uc815\ubcf4_1','\uce74\ub4dc\uc815\ubcf4_2',\"\uce74\ub4dc\uc815\ubcf4_3\",\"\uce74\ub4dc\uc815\ubcf4_4\",'\uce74\ub4dc\uc18c\uc720\uc8fc\uc8fc\uc18c',\"\uce74\ub4dc\uc0ac\uc6a9\uc790\uc8fc\uc18c\"]\nfor col in cols :\n    sum_df = pd.concat([X_train[col],X_test[col]])\n    # value_counts\ub294 Series \ub098 Dataframe \ub0b4 \ub370\uc774\ud130\uc758 \uac2f\uc218\ub97c \uad6c\ud574\uc900\ub2e4\n    # \uc774\ub97c normalize \uc2dc\ud0a8 \ub4a4 (\uac01 \ub77c\ubca8\uc758 \ubd84\ud3ec\ub97c \uacc4\uc0b0 ) X_train\uc5d0 mapping\ud574\uc8fc\ub294 \uc0c8\ub85c\uc6b4 col\uc744 \uc0dd\uc131 \ud574\uc900\ub2e4.\n    # \uc774\ub7ec\uba74 \ub9ce\uc774 \ub098\uc628 \ub370\uc774\ud130(\uc9c0\uc5ed)\uc758 \uc22b\uc790\uac00 \ucee4\uc9c0\ub2c8\uae4c \uc0c1\ub300\uc801\uc73c\ub85c \uc774\uc0c1\uce58\uc778 \uc9c0\uc5ed\uc5d0 \uac00\uc911\uce58\ub97c \uc801\uac8c\uc8fc\uac8c \ub428.\n    # dropna = True\ub294 na\uc5d0 \uc77c\uad00\uc801\uc73c\ub85c -1\uc744 \uc8fc\uae30\uc704\ud568.\n    count = sum_df.value_counts(dropna = True, normalize = True).to_dict()\n    count[-1] = -1\n    \n    new_col = col+\"\uc758\ubd84\ud3ec\"\n    \n    X_train[new_col] = X_train[col].map(count)\n    X_test[new_col] = X_test[col].map(count)\n    \n    print(f\"{new_col} \uc0dd\uc131\uc644\ub8cc\")\n    \n    ","3ec9e031":"X_train = X_train.fillna(-1)\nX_test = X_test.fillna(-1)","59e53b01":"for col in (X_train.columns):\n    if X_train[col].dtype == 'object':\n        enc = LabelEncoder()\n        enc.fit(list(X_train[col].values) + list(X_test[col].values))\n        X_train[col] = enc.transform(list(X_train[col].values))\n        X_test[col] = enc.transform(list(X_test[col].values)) ","d3ba479a":"X = X_train.iloc[:,1:]\ny = X_train.iloc[:,0]","1ab5f090":"\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","fb51e7e3":"params = {\n          'learning_rate': 0.005,\n          \"boosting_type\": \"gbdt\",\n          'objective': 'binary',\n          \"metric\": 'auc',\n          \"verbosity\": -1,\n          'random_state': 1028\n         }","51a2641b":"trn_data = lgb.Dataset(X_train, label=y_train)\nval_data = lgb.Dataset(X_val, label=y_val)\nclf = lgb.train(params, trn_data, 20000, valid_sets = [trn_data, val_data], verbose_eval=1000, early_stopping_rounds=500)","78b2b1fa":"best_iter = clf.best_iteration","81b4ec5f":"clf = lgb.LGBMClassifier(**params, num_boost_round=best_iter)\nclf.fit(X, y)","d2e8b93f":"sub = pd.read_csv(\"..\/input\/kaistbme587\/sample_submission.csv\")\nsub['Fraud'] = clf.predict_proba(X_test.iloc[:,1:])[:, 1]\nsub.to_csv('baseline4.csv', index=False)","e84ea659":"## \uacb0\uce21\uc774 \ub9ce\uc740\ub370\uc774\ud130\uc778\ub370.. \uc774\uac74..\ubb34\uc870\uac74 \ubd10\uc918\uc57c \ud55c\ub2e4..?!","392c129c":"## \uae08\uc561\uc5d0 10\uc6d0\uc774 \uc788\ub2e4\uba74???","8e5c8063":"## \uc5ec\uae30\uc11c\ub294, Feature Engineering \uc758 \uc911\uc694\uc131\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0\uac00\ub294 \ucf54\ub4dc\uc774\ub2e4.\n## \ub370\uc774\ud130 EDA\ub791 \ub370\uc774\ud130\uc5d0 \ub9de\ub294 Feature \uc0dd\uc131\uc740 \ub9e4\uc6b0\ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4~! \uc0dd\uac01\ub098\ub294\uac70\ub97c \ub2e4 \ub9cc\ub4e4\uc5b4 \ubcf4\ub294\uac83\uc774 \uc815\ub9d0 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4..\n## \ub3d9\uc77c\ud55c LGBM \ucf54\ub4dc\uc5d0\uc11c \uc815\ub9d0 \ubbf8\ubbf8\ud55c feature \ucd94\uac00\ub85c! AUC 0.6 ~ 0.7 % \ub97c \uc62c\ub9ac\ub294 \ubc95??\n## \uc5b4\ub5a4 \ud559\uc0dd\ubd84 \ub355\uc5d0 \uc4f0\ub294 \ucc38\uace0\uae00) AUC\uac00 92.3\uc774\ub77c\uace0 \uae30\ub9d0\uace0\uc0ac 2\ucc28 \uc810\uc218\uac00 92.3\uc810\uc740 \uc808\ub300 \uc544\ub2d9\ub2c8\ub2e4.. \uc81c \ubca0\uc774\uc2a4\ub77c\uc778 \ucf54\ub4dc (\uc774 \ucf54\ub4dc\ub294 auc 92.3) \uc5d0\uc11c \uc810\uc218\ub97c \uc62c\ub824\uc57c \uadf8 \ucc28\uc774\uc5d0 \ub300\ud574\uc11c.. \uae30\ub9d0\uace0\uc0ac \uc810\uc218\uac00 \ubc18\uc601 \ub418\ub294\uac83\uc785\ub2c8\ub2e4.. \u3160\u3160!","43da71c9":"## LabelEncoding\uc744 \uccab \uc8fc Baseline\uc5d0 \uc37c\ub294\ub370.. \n## \uc774\uac78 \ubc18\ub300\ub85c \ub77c\ubca8\uc744 \uc218\uce58\ud654\ub41c\ub370\uc774\ud130\ub85c \ubc14\uafb8\ub294 \ubc29\ubc95\uc740 \uc0dd\uac01\ud574\ubd24\ub294\uac00?! \n## Label\ud654 \ub41c \ub370\uc774\ud130\uc5d0 \uac00\uc911\uce58\ub97c \uc8fc\ub294 \ubc29\ubc95!"}}