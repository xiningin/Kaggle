{"cell_type":{"e5cad31e":"code","faab22f9":"code","65eedf64":"code","73f5eb89":"code","b910b25a":"code","64f2c853":"code","68b346b6":"code","d1ba36bf":"code","eb493f8d":"code","fb38ccb4":"code","27e1cb24":"code","1c1b5ac6":"code","e9deaf85":"code","620a0734":"code","4ee4b017":"code","bef8f420":"code","7926e177":"code","1b1036a1":"markdown","b0f8d3ae":"markdown","7d190e8d":"markdown","2e556a9b":"markdown","520d0171":"markdown","6dac0285":"markdown","0933e589":"markdown","bee4ac13":"markdown","6e777166":"markdown","d0320684":"markdown","f2ca146c":"markdown","7cc3bc3a":"markdown"},"source":{"e5cad31e":"import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n\ntrain = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\n\n#model = RandomForestRegressor(n_estimators=100, criterion=\"mse\", random_state=50)\nmodel = XGBRegressor(n_estimators=700, learning_rate = 0.05)\n\nfeatures = ['OverallQual','OverallCond', 'Neighborhood', 'Condition1', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', 'CentralAir', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'KitchenQual', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageQual', 'GarageCond', 'GarageArea', 'WoodDeckSF',  'SaleType', 'SaleCondition']\nfeatures += ['BsmtFullBath', 'BsmtHalfBath', 'HalfBath']\n\ny = train['SalePrice']\nX = train[features]\n\nX = X.drop('Condition1', axis=1)\n#X = X.drop('CentralAir', axis=1)\n#X = X.drop('KitchenQual', axis=1)\nX['12FlrSF'] = X['TotalBsmtSF'] + X['1stFlrSF'] + X['2ndFlrSF']\nX['No2ndFlr']=(X['2ndFlrSF']==0)\nX['NoBsmt']=(X['TotalBsmtSF']==0)\nX = X.drop('TotalBsmtSF', axis=1)\nX = X.drop('1stFlrSF', axis=1)\nX = X.drop('2ndFlrSF', axis=1)\n#X = X.drop('GarageCars', axis=1)\nX = X.drop('SaleType', axis=1)#\n#X = X.drop('SaleCondition', axis=1)\nX['AboutBath'] = X['BsmtFullBath'] + X['FullBath'] + X['BsmtHalfBath'] + X['HalfBath']\nX = X.drop('FullBath', axis=1)\nX = X.drop('BsmtFullBath', axis=1)\nX = X.drop('BsmtHalfBath', axis=1)\nX = X.drop('HalfBath', axis=1)\nX['YearSum'] = X['YearBuilt']+X['YearRemodAdd']\nX['hadRemod'] = (X['YearBuilt']==X['YearRemodAdd']) ^ 1\n#X = X.drop('GarageYrBlt', axis=1)\n#X = X.drop('YearBuilt', axis=1)\nX = X.drop('YearRemodAdd', axis=1)\n\ntrain_X, val_X, train_y, val_y = train_test_split(X,y)\nprint('settings completed')","faab22f9":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('ggplot')\nprint(\"Setup Complete\")","65eedf64":"from sklearn.metrics import mean_squared_log_error\n\ndef cal_err(gmodel, train_X, train_y, val_X, val_y):\n    gmodel.fit(train_X, train_y)\n    preds = gmodel.predict(val_X)\n    err = mean_squared_log_error(val_y, preds)\n    return err","73f5eb89":"s = (train_X.dtypes == 'object')\nobj_cols = list(s[s].index)\nnum_cols = list(set(train_X.columns) - set(obj_cols))\n\nprint(\"Categorical variables:\")\nprint(obj_cols)\nprint(\"Numerical variabels:\")\nprint(num_cols)","b910b25a":"# Shape of training data (num_rows, num_columns)\nprint(train_X.shape)\n\n# Number of missing values in each column of training data\nmissing_val_count_by_column = (train_X.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","64f2c853":"target_rm = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\n\n# Make copy to avoid changing original data (when imputing)\nX_train_plus = train_X.copy()\nX_valid_plus = val_X.copy()\n\n# Make new columns indicating whether the house has garage\ntrain_X['hasGarage'] = X_train_plus['GarageType'].isnull() ^ 1\nval_X['hasGarage'] = X_valid_plus['GarageType'].isnull() ^ 1\n\ntrain_X['GarageYrBlt'].fillna(train_X['YearBuilt'], inplace=True)\nval_X['GarageYrBlt'].fillna(train_X['YearBuilt'], inplace=True)\ntrain_X.drop('YearBuilt', axis=1)\nval_X.drop('YearBuilt',axis=1)\n\ntrain_X = train_X.drop(target_rm, axis=1)\nval_X = val_X.drop(target_rm, axis=1)\n\nobj_cols = list(set(obj_cols) - set(target_rm))","68b346b6":"object_nunique = list(map(lambda col: train_X[col].nunique(), obj_cols))\nd = dict(zip(obj_cols, object_nunique))\n\n# Print number of unique entries by column, in ascending order\nsorted(d.items(), key=lambda x: x[1])","d1ba36bf":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\ntarget = []\nfor item in d:\n    if d[item] < 10:\n        target.append(item)\n\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_X[target]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(val_X[target]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = train_X.index\nOH_cols_valid.index = val_X.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = train_X.drop(target, axis=1)\nnum_X_valid = val_X.drop(target, axis=1)\n\n# Add one-hot encoded columns to numerical features\ntrain_X = pd.concat([num_X_train, OH_cols_train], axis=1)\nval_X = pd.concat([num_X_valid, OH_cols_valid], axis=1)\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\ntrain_X['Neighborhood'] = label_encoder.fit_transform(train_X['Neighborhood'])\nval_X['Neighborhood'] = label_encoder.transform(val_X['Neighborhood'])\n\ncon_encoder = LabelEncoder()\ntrain_X['OverallCond'] = con_encoder.fit_transform(train_X['OverallCond'])\nval_X['OverallCond'] = con_encoder.transform(val_X['OverallCond'])","eb493f8d":"# Nothing to do yet","fb38ccb4":"print(cal_err(model, train_X, train_y, val_X, val_y))\n#while True:\n#    model = RandomForestRegressor(n_estimators=100, criterion=\"mse\", random_state=50)\n#    res = cal_err(model, train_X, train_y, val_X, val_y)\n#    print(res)\n#    if res < 0.0185:\n#        break\n#print(res)","27e1cb24":"test[features].isnull().sum()","1c1b5ac6":"test['TotalBsmtSF'].fillna(value=test['TotalBsmtSF'].mode()[0], inplace=True)\ntest['KitchenQual'].fillna(value=test['KitchenQual'].mode()[0], inplace=True)\ntest['SaleType'].fillna(value=test['SaleType'].mode()[0], inplace=True)\ntest['GarageCars'].fillna(value=test['GarageCars'].mean(), inplace=True)\ntest['GarageArea'].fillna(value=test['GarageArea'].mean(), inplace=True)\n\ntest['BsmtFullBath'].fillna(value=test['BsmtFullBath'].median(), inplace=True)\ntest['BsmtHalfBath'].fillna(value=test['BsmtHalfBath'].median(), inplace=True)\n\ntest_X = test[features]","e9deaf85":"test_X = test_X.drop('Condition1', axis=1)\n#test_X = test_X.drop('CentralAir', axis=1)\n#test_X = test_X.drop('KitchenQual', axis=1)\ntest_X['12FlrSF'] = test_X['TotalBsmtSF'] + test_X['1stFlrSF'] + test_X['2ndFlrSF']\ntest_X['No2ndFlr']=(test_X['2ndFlrSF']==0)\ntest_X['NoBsmt']=(test_X['TotalBsmtSF']==0)\ntest_X = test_X.drop('TotalBsmtSF', axis=1)\ntest_X = test_X.drop('1stFlrSF', axis=1)\ntest_X = test_X.drop('2ndFlrSF', axis=1)\n#test_X = test_X.drop('GarageCars', axis=1)\ntest_X = test_X.drop('SaleType', axis=1)\n#test_X = test_X.drop('SaleCondition', axis=1\ntest_X['AboutBath'] = test_X['BsmtFullBath'] + test_X['FullBath'] + test_X['BsmtHalfBath'] + test_X['HalfBath']\ntest_X = test_X.drop('FullBath', axis=1)\ntest_X = test_X.drop('BsmtFullBath', axis=1)\ntest_X = test_X.drop('BsmtHalfBath', axis=1)\ntest_X = test_X.drop('HalfBath', axis=1)\ntest_X['YearSum'] = test_X['YearBuilt']+test_X['YearRemodAdd']\ntest_X['hadRemod'] = (test_X['YearBuilt']==test_X['YearRemodAdd']) ^ 1\n#X = X.drop('GarageYrBlt', axis=1)\n\ntest_X = test_X.drop('YearRemodAdd', axis=1)","620a0734":"target_rm = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\n\n# Make copy to avoid changing original data (when imputing)\nX_plus = X.copy()\ntest_X_plus = test_X.copy()\n\n# Make new columns indicating whether the house has garage\nX['hasGarage'] = X['GarageType'].isnull() ^ 1\ntest_X['hasGarage'] = test_X['GarageType'].isnull() ^ 1\n\nX['GarageYrBlt'].fillna(X['YearBuilt'], inplace=True)\ntest_X['GarageYrBlt'].fillna(test_X['YearBuilt'], inplace=True)\nX = X.drop('YearBuilt', axis=1)\ntest_X = test_X.drop('YearBuilt', axis=1)\n\nX = X.drop(target_rm, axis=1)\ntest_X = test_X.drop(target_rm, axis=1)\n\nobj_cols = list(set(obj_cols) - set(target_rm))\n\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_X = pd.DataFrame(OH_encoder.fit_transform(X[target]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(test_X[target]))\n\n# One-hot encoding removed index; put it back\nOH_cols_X.index = X.index\nOH_cols_test.index = test_X.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X = X.drop(target, axis=1)\nnum_X_test = test_X.drop(target, axis=1)\n\n# Add one-hot encoded columns to numerical features\nX = pd.concat([num_X, OH_cols_X], axis=1)\ntest_X = pd.concat([num_X_test, OH_cols_test], axis=1)\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nX['Neighborhood'] = label_encoder.fit_transform(X['Neighborhood'])\ntest_X['Neighborhood'] = label_encoder.transform(test_X['Neighborhood'])\n\ncon_encoder = LabelEncoder()\nX['OverallCond'] = con_encoder.fit_transform(X['OverallCond'])\ntest_X['OverallCond'] = con_encoder.transform(test_X['OverallCond'])","4ee4b017":"#test[['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath']].isnull().sum()","bef8f420":"model.fit(X,y)\n\npreds = model.predict(test_X)","7926e177":"submission = pd.read_csv('..\/input\/home-data-for-ml-course\/sample_submission.csv')\nsubmission.head()\n\nsubmission['SalePrice'] = preds\n\nsubmission.to_csv('submission_5.csv', index=False)\nprint('Completed')","1b1036a1":"attributes of which have less than 10 unique values, do One Hot Encoding<br>\nand the others, Label Encoding","b0f8d3ae":"## testing","7d190e8d":"## Submission (Not yet)","2e556a9b":"## Testing Function","520d0171":"## Settings","6dac0285":"min2 = 100\nfor i in range(100,1001,100):\n    for j in range(10):\n        model = RandomForestRegressor(n_estimators=i, criterion=\"mse\")\n        score[i] += cal_err(train_X, train_y, val_X, val_y)\n    if score[min2] > score[i]:\n        min2 = i\n\nprint('The proper value is '+str(min2))\nprint('The score is '+str(score[min2] \/ 10))\n\nif score[min1] < score[min2]:\n    min_est = min1\nelse:\n    min_est = min2\n\nori_score = score[min_est]","0933e589":"## Categorical Variables","bee4ac13":"fig,axes = plt.subplots(2,2)\nfig.set_size_inches(20,18)\nsns.regplot(x='GarageYrBlt', y='SalePrice', data=train, ax=axes[0,0])\nsns.regplot(x='YearBuilt', y='SalePrice', data=train, ax=axes[0,1])\nsns.regplot(x='YearRemodAdd', y='SalePrice', data=train, ax=axes[1,0])\n\nplt.show()\n\ntmp = pd.DataFrame({'Sum':train['YearBuilt']+train['YearRemodAdd']+train['GarageYrBlt'],\n                   'SalePrice':train['SalePrice'],\n                   'hadRemod':train['YearBuilt']!=train['YearRemodAdd']})\nsns.lmplot(x='Sum', y='SalePrice',hue='hadRemod', data=tmp )","6e777166":"## Numerical Variables","d0320684":"## filling NaN","f2ca146c":"score3 = [0] * 600\nmin_leaf = 10\nmin_est = 900\nfor i in range(10,31):\n    for j in range(10):\n        model = RandomForestRegressor(n_estimators=min_est, criterion = \"mse\", max_leaf_nodes = i)\n        score3[i] += cal_err(train_X, train_y, val_X, val_y)\n    if score3[min_leaf] > score3[i]:\n        min3 = i\n    \nprint('The proper value is '+str(min_leaf))\nprint('The score is '+str(score3[min_leaf] \/ 10))\nprint('---------------------------------------------')\nif score3[min_leaf] < ori_score:\n    model = RandomForestRegressor(n_estimators=min_est, criterion = \"mse\", max_leaf_nodes = min_leaf)\n    print('The final score is' + str(score3[min_leaf] \/ 10))\nelse:\n    model = RandomForestRegressor(n_estimators=min_est, criterion = 'mse')\n    print('The final score is '+str(ori_score \/ 10))","7cc3bc3a":"score = [0]*1001\nmin1 = 10\nfor i in range(10,101):\n    for j in range(10):\n        model = RandomForestRegressor(n_estimators=i, criterion=\"mse\")\n        score[i] += cal_err(train_X, train_y, val_X, val_y)\n    if score[min1] > score[i]:\n        min = i\n\nprint('The proper value is '+str(min1))\nprint('The score is '+str(score[min1] \/ 10))"}}