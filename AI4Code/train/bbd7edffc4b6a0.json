{"cell_type":{"81aa5dba":"code","1906a8ac":"code","73d5f14e":"code","72e00937":"code","e5790824":"code","646b7925":"code","a8c1b2e1":"code","38d2415a":"code","7113aead":"code","7f13d409":"code","ea912eff":"code","d809fe32":"code","40ee10f9":"code","746fdc20":"code","63a42921":"code","162cd694":"code","cc65a74e":"code","2414acb9":"code","601f68dc":"code","cc82951f":"code","967ca766":"code","e488038d":"code","1bbf4bba":"code","b54b0025":"code","d1011ca6":"code","dfd1b044":"code","47554b70":"code","a39827ff":"code","cae60b0d":"code","a350cffe":"code","9ef7edb7":"code","c0c9c747":"code","7bfbcffe":"code","18f82e6a":"code","51f9d020":"code","5ce2d89d":"markdown","7a46de47":"markdown","d47ce45c":"markdown","21640897":"markdown","ca6fe3fe":"markdown","da6cc2f6":"markdown","34710bfd":"markdown","7f2ca3fd":"markdown","30a463ef":"markdown","f4ce69b2":"markdown","9251655e":"markdown","8b420278":"markdown","ae33626c":"markdown","edf96dab":"markdown"},"source":{"81aa5dba":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport cv2\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport gc\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#================================\n# import the necessary packages\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras import backend as K\n\n#================================\n\nimport matplotlib\n#matplotlib.use(\"Agg\")\n \n# import the necessary packages\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\n#from pyimagesearch.smallervggnet import SmallerVGGNet\nimport matplotlib.pyplot as plt\n#from imutils import paths\nimport numpy as np\n#import argparse\nimport random\nimport pickle\nimport cv2\nimport os","1906a8ac":"filepath0=\"..\/input\/train\/\"\nfilepath1=\"..\/input\/test\/\"","73d5f14e":"train_df=pd.read_csv(\"..\/input\/train.csv\")\ntrain_image=os.listdir(\"..\/input\/train\/\")\ngreenimage= [n for n in train_image if \"green\" in n]\ngdf=pd.DataFrame({\"imagename\":greenimage})\n","72e00937":"gdf.shape","e5790824":"dff=pd.concat([train_df,gdf],axis=1)","646b7925":"dff.head(3)","a8c1b2e1":"df=dff[0:1000]","38d2415a":"df.shape","7113aead":"img_height=512\nimg_width=512","7f13d409":"image=[]\n#labels = []\nfor i in df['imagename']:\n        images = cv2.imread(filepath0+i,0) \n        images = cv2.resize(images, (img_width, img_height))\n        image.append(images)\n       ","ea912eff":"len(image)","d809fe32":"plt.figure(figsize=(12, 12))\nfor i in range(0, 9):\n    plt.subplot(330 + 1 + i)\n    plt.imshow(image[i])\n    plt.gca().get_xaxis().set_ticks([])\n    plt.gca().get_yaxis().set_ticks([])\n   \nplt.show()","40ee10f9":"labels = []\nfor i in df['Target']:\n    li = list(i.split(\" \")) \n    labels.append(li)","746fdc20":"len(labels)","63a42921":"labels[0:5]","162cd694":"image = np.array(image)\nlabels = np.array(labels)","cc65a74e":"# binarize the labels using scikit-learn's special multi-label\n# binarizer implementation\nprint(\"[INFO] class labels:\")\nmlb = MultiLabelBinarizer()\nlabels = mlb.fit_transform(labels)\n \n# loop over each of the possible class labels and show them\nfor (i, label) in enumerate(mlb.classes_):\n    print(\"{}. {}\".format(i + 1, label))","2414acb9":"gc.collect()","601f68dc":"(trainX, testX, trainY, testY) = train_test_split(image,labels, test_size=0.2, random_state=42)\n\ntrainX = trainX.reshape(trainX.shape[0], img_width, img_height,1) \ntestX = testX.reshape(testX.shape[0], img_width, img_height,1) ","cc82951f":"trainY.shape","967ca766":"aug = ImageDataGenerator()","e488038d":"EPOCHS = 20\nINIT_LR = 1e-3\nBS = 32\n","1bbf4bba":"height=512\nwidth=512\ndepth=1\nchanDim = -1\nclasses=28, \nfinalAct=\"sigmoid\"\n\n\ninputShape = (height, width, depth)\n\nmodel = Sequential()\n# CONV => RELU => POOL\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",\ninput_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.25))\n# (CONV => RELU) * 2 => POOL\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n# (CONV => RELU) * 2 => POOL\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# first (and only) set of FC => RELU layers\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\n# use a *softmax* activation for single-label classification\n# and *sigmoid* activation for multi-label classification\nmodel.add(Dense(27))\nmodel.add(Activation(finalAct))\n \nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])","b54b0025":"H = model.fit_generator(aug.flow(trainX, trainY, batch_size=1),validation_data=(testX, testY),steps_per_epoch=len(trainX) \/\/ BS,epochs=EPOCHS, verbose=1)\n\n#H=model.fit(trainX, trainY, batch_size=BS,validation_data=(testX, testY),steps_per_epoch=len(trainX) \/\/ BS,epochs=EPOCHS)","d1011ca6":"plt.plot(H.history['acc'])\nplt.plot(H.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'Validation'], loc='upper left')\nplt.show()","dfd1b044":"\nplt.plot(H.history['loss'])\nplt.plot(H.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validaiton'], loc='upper left')\nplt.show()","47554b70":"sub_df=pd.read_csv(\"..\/input\/sample_submission.csv\")\ntest_image=os.listdir(\"..\/input\/test\/\")\ntestgreenimage= [n for n in test_image if \"green\" in n]\n#testgdf=pd.DataFrame({\"imagename\":testgreenimage})\n","a39827ff":"sub_df.shape","cae60b0d":"len(testgreenimage)","a350cffe":"X_test=[]\nY_test=[]\n\nfor i in testgreenimage[20:21]:\n    image = cv2.imread(filepath1+i,0) \n    images = cv2.resize(image, (img_width, img_height))\n    X_test.append(images)\n    Y_test.append(images)","9ef7edb7":"X_test=np.array(X_test)\nX_test = X_test.reshape(X_test.shape[0], img_width, img_height,1) ","c0c9c747":"X_test.shape","7bfbcffe":"proba = model.predict(X_test)[0]\nproba.shape","18f82e6a":"idxs = np.argsort(proba)[::-1][:2]","51f9d020":"# loop over the indexes of the high confidence class labels\nfor (i, j) in enumerate(idxs):\n\n    label = \"{}: {:}%\".format(mlb.classes_[j], proba[j] * 100)\n\n# show the probabilities for each of the individual labels\nfor (label, p) in zip(mlb.classes_, proba):\n    print(\"{}: {:}%\".format(label, int(p * 100)))\n\n","5ce2d89d":"### if  you want to understand competition and protein related terminology please refer below kernel ###\n\nhttps:\/\/www.kaggle.com\/nikitpatel\/eda-with-human-protein-information","7a46de47":"### Read test data greeen filter images ###","d47ce45c":"## make final data with only green filter images ##\n\n* per sample four color images available but for this whole kernal we are going to use greeen color samples and it is mapped with train.csv \n* after concat we get finalize df","21640897":"### Convert image and labels list to numpy array ###","ca6fe3fe":"### Data splited for train and validation ###\n\n* reshape images","da6cc2f6":"### Selected image fall in 25th class there where result is 99% nearer to 100%","34710bfd":"### Read images and stored in image list ###\n\n* images read using openCV library","7f2ca3fd":"### Convert test data images to numpy array and then reshaped ###","30a463ef":"### Make keras deep learning model for image classification ###","f4ce69b2":"### Put Labels in labels list ###","9251655e":"### Import Required Libraries ###","8b420278":"### train vs validation acuraccy and loss ###**","ae33626c":"### Predict selected one test image result and stored into proba ###","edf96dab":"### this notebook applied on green color channel we can apply it to more three channel using same approach ###"}}