{"cell_type":{"b5f2add5":"code","44c31a10":"code","92e46aca":"code","f5844f52":"code","c1eb2e66":"code","bca6a8ce":"code","dfd02f4b":"code","b1e46f1d":"code","14874f4b":"code","155f3b5c":"code","7bd147f1":"code","40b0a444":"code","f471d584":"markdown","9aab3ccd":"markdown","cc619aad":"markdown","334762cd":"markdown","20c02675":"markdown","d5c57377":"markdown","0defb799":"markdown","c059501b":"markdown","1f6f5e9b":"markdown","f98d3003":"markdown","164047da":"markdown","967647fb":"markdown"},"source":{"b5f2add5":"import numpy as np\nimport pandas as pd \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport h2o\nfrom h2o.automl import H2OAutoML","44c31a10":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","92e46aca":"h2o.init()","f5844f52":"hf = h2o.H2OFrame(train)\ntest_hf = h2o.H2OFrame(test)\nhf.head()","c1eb2e66":"hf['Survived'] = hf['Survived'].asfactor()\npredictors = hf.drop('Survived').columns\nresponse = 'Survived'","bca6a8ce":"train_hf, valid_hf = hf.split_frame(ratios=[.8], seed=1234)","dfd02f4b":"# Add a Stopping Creterias: max number of models and max time\n# We are going to exclude DeepLearning algorithms because they are too slow\naml = H2OAutoML(\n    max_models=20,\n    max_runtime_secs=300,\n    seed=1234,\n    # exclude_algos = [\"DeepLearning\"]\n)","b1e46f1d":"# Train the model\naml.train(x=predictors,\n        y=response,\n        training_frame=hf,\n)","14874f4b":"lb = aml.leaderboard\nlb.head(rows=5)  # Print the first 5 rows","155f3b5c":"valid_pred = aml.leader.predict(valid_hf)","7bd147f1":"from sklearn import metrics\nmetrics.accuracy_score(valid_pred.as_data_frame()['predict'], valid_hf.as_data_frame()['Survived'])","40b0a444":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest_pred = aml.predict(test_hf)\nsubmission.Survived = test_pred.as_data_frame()['predict']\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","f471d584":"# create h2o model","9aab3ccd":"# predict validation set ","cc619aad":"# test set prediction and submission ","334762cd":"# validation set prediction result","20c02675":"# preprocessing","d5c57377":"# initialize h2o ","0defb799":"# set input data and target data ","c059501b":"# load data","1f6f5e9b":"# import libraries","f98d3003":"# train model","164047da":"# show train result ","967647fb":"# devide train set and test set"}}