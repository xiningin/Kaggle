{"cell_type":{"04c6d7b6":"code","58244e0a":"code","04c930e4":"code","a2bfe3f6":"code","a3d811ff":"code","c3f4560f":"code","3b7f63f6":"markdown","e03107b0":"markdown","5f3a3e94":"markdown"},"source":{"04c6d7b6":"import numpy \nimport pandas\nimport requests\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfav_country = 'India'","58244e0a":"type_info = pandas.read_csv('\/kaggle\/input\/mbtitypes-full\/types.csv', index_col='Type')\ndf = pandas.read_csv('\/kaggle\/input\/mbtitypes-full\/countries.csv', index_col='Country')\npandas.options.display.max_columns = 32\ndf.loc[[fav_country]] * 100","04c930e4":"types = df.columns\n\none_slice = ['I', 'N', 'F', 'P']  # One slice of the indicators\n\ntraits_df = pandas.DataFrame(index=df.index, columns=one_slice)\n\nfor ind, trait in enumerate(one_slice):\n    columns_to_sum = list(filter(lambda x: x[ind] == trait, types))\n    traits_df[trait] = df[columns_to_sum].sum(axis=1) * 100\n\ntraits_df.loc[[fav_country]][one_slice]","a2bfe3f6":"for trait, trait_name, projection_type in zip(one_slice, ['Introversion', 'Intuitive', 'Feeling', 'Perceptive'], \n                                              ['equirectangular', 'orthographic', 'natural earth', 'sinusoidal']):\n    fig = go.Figure(data=go.Choropleth(\n        locations = traits_df.index,\n        z = traits_df[trait],\n        locationmode='country names',\n        reversescale=True,\n        colorbar_title = '{} %'.format(trait_name),\n        colorbar_ticksuffix = '%',\n    ))\n    fig.update_layout(\n        title={'text': 'Countries with {} % - {}'.format(trait_name, projection_type), 'y': 0.9, 'x': 0.5, 'xanchor': 'center', 'yanchor': 'top'},\n        geo=dict(projection_type=projection_type))\n    fig.show()","a3d811ff":"original_types = sorted(list(set(map(lambda x: x.split('-')[0], types))))\noriginal_types_df = pandas.DataFrame(index=df.index, columns=original_types)\n\nfor otype in original_types:\n    columns_to_sum = list(filter(lambda x: otype in x, types))\n    original_types_df[otype] = df[columns_to_sum].sum(axis=1) * 100\n\nmax_type = original_types_df.idxmax(axis=1)","c3f4560f":"fav_type = max_type[fav_country]\n\nlayout = {\n    \"xaxis\": {\"title\": \"MBTI Type\"},\n    \"yaxis\": {\"title\": \"Percentage of Population\", \"range\": [0, 21]},\n    \"title_text\": fav_country + ' - ' + type_info.loc[fav_type]['Nickname'] + ' - ' + type_info.loc[fav_type]['Description'],\n    \"updatemenus\": [{\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 2000, \"redraw\": True}, \"fromcurrent\": True, \n                                \"transition\": {\"duration\": 300, \"easing\": \"quadratic-in-out\"}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"showactive\": False,\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }]\n}\n\nsliders_dict = {\"active\": original_types_df.index.tolist().index(fav_country), \n    \"yanchor\": \"top\", \"xanchor\": \"left\", \"len\": 0.9, \"x\": 0.1, \"y\": 0, \"steps\": [], \"pad\": {\"b\": 10, \"t\": 50},\n    \"currentvalue\": {\"font\": {\"size\": 20}, \"prefix\": \"Country: \", \"visible\": True, \"xanchor\": \"right\"},\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n}\n\nframes = []\nfor country in original_types_df.index:    \n    bar = go.Bar(x=original_types, y=original_types_df.loc[country].tolist())\n    country_max = max_type[country]\n    title = country + ' - ' + type_info.loc[country_max]['Nickname'] + ' - ' + type_info.loc[country_max]['Description']\n    frame = go.Frame(data=[bar], name=country, layout=go.Layout(title_text=title))\n    frames.append(frame)\n    \n    slider_step = {\n        \"args\": [\n            [country],\n            {\"frame\": {\"duration\": 300, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 300}}\n        ],\n        \"label\": country,\n        \"method\": \"animate\"\n    }\n    sliders_dict[\"steps\"].append(slider_step)\n\nlayout['sliders'] = [sliders_dict]\nbar = go.Bar(x=original_types, y=original_types_df.loc[fav_country].tolist())  # Initial data\n\nfig = go.Figure(data=[bar], frames=frames, layout=layout)\nfig.show()","3b7f63f6":"## Have fun zooming \/ moving the above plots\n\n### It makes sense to use \"natural earth\" or \"equirectangular\" for this visualisation. All info is present at one glance. \n\nBut you have to agree that \"orthographic\" is plain fun!","e03107b0":"### Wow! My country has lot of people who are Campaigners! Lot of smiling people in India! Make sure you visit :) \n\nAll this was possible by learning and getting inspired from multiple sources. \"Standing on the shoulders of Giants :)\"","5f3a3e94":"# Exploring Country Wise MBTI Personalities\n\n## Approach\nLook at different traits (specifically: I, N, F, P) and MBTI Types and their variation across countries. \n\n## Bit of background \nMBTI is a (one of many) way to understand psychology behind how people perceive the world & make decisions. It is set of 4 traits (4 boolean variables) assigned to a person based on a test.\n\n### Traits\nThe (Fantastic) Four Dichotomies\n1. **I vs E**: Introversion vs Extraversion - Attitude - This talks about the general attitude of the person towards external world \n2. **S vs N**: Sensing vs Intuition - Perceiving functions - This talks about the way the person gathers information \n3. **T vs F**: Thinking vs Feeling - Judging functions - This talks about the way the person makes decisions \n4. **J vs P**: Judging vs Perception - Lifestyle preference - This talks about the way the person which of the above two does the person prefer when dealing with external world \n\nOne combination of the four traits makes one MBTI Type. So, total number of MBTI Types are (How many?) 16 (You guessed right!). \n\nIntrigued?! You can take the personality test online to know what type you belong to! (e.g., at 16personalities.com).\n\nOr, you can put all the text you have ever written through the ML model I made which predicts your MBTI type from text (How cool is that!). Check it out here: [Predicting MBTI Type](https:\/\/www.kaggle.com\/rajjain\/predict-mbti-type-from-text-using-tpu) & [Predicting MBTI Traits](https:\/\/www.kaggle.com\/rajjain\/predict-mbti-traits-from-text-using-tpu)\n\n(More info on this [Myers\u2013Briggs Type Indicator Wiki Page](https:\/\/en.wikipedia.org\/wiki\/Myers%E2%80%93Briggs_Type_Indicator). Highly encourage you to give this a look-see for usage & criticism of the method. Also, [16personalities](https:\/\/www.16personalities.com\/) for a better UX than Wikipedia :P)\n\n# Dataset Explanation\n\n## Extra trait (Wait, what?!)\n\nThere is a new trait that is used in addition to the original four (Fantastic Five now?!), which is, **A vs T**: Assertive vs Turbulent - Identity - This talks about how confident we are in our abilities and decisions! \n\nFor the purpose of this notebook, I will focus on the original four (Whew!) \n\n## What does the dataset give us?!\n\nThe dataset gives us for each country, what is the percentage of the population belonging to each MBTI Type. We will sum respective information to get the distribution at trait level \/ original MBTI type for each country. \n\n# Detailed Approach\n\n* We will use Choropleth maps to visualise the data effectively. We will look at different configurations of the map for different trait and make a conclusion on which was the best way. We will use plotly for this. One of the best visualisation libraries for Python!\n* We will also visualise at MBTI types variation w.r.t each country. Through sliders and animation! Again using Plotly!"}}