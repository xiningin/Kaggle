{"cell_type":{"38231902":"code","cf658964":"code","60e2cb08":"code","12a2c356":"code","4f26fd3b":"code","7b256c7b":"code","fb4c2753":"code","234167a8":"code","8c7ab3b8":"code","7db20af6":"code","3a323502":"code","5ae68a9b":"code","fe59e27f":"code","cfeebb0a":"code","c35eedf0":"code","29c640a2":"code","4d458715":"code","fe9477ab":"code","6a1c3377":"code","79ab7616":"code","7938ad71":"code","216cc990":"code","708f1988":"code","cac46d91":"code","effbd0ff":"code","396742b7":"code","38e1cb6f":"code","398e7ba4":"code","f636becb":"code","47917ef7":"code","8e7c4738":"code","c9227a4a":"code","5b8d2806":"code","0470117f":"code","645d20bb":"code","670f3de0":"code","60866972":"code","ccfe2513":"code","305f63e5":"code","999777fb":"code","1c77970a":"markdown","b0829aed":"markdown","90f8e4b2":"markdown"},"source":{"38231902":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf658964":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split,cross_validate, cross_val_score,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression,Ridge,RidgeCV,Lasso, LassoCV,ElasticNetCV\\\n,ElasticNet,LogisticRegression,LogisticRegressionCV\nfrom sklearn.svm import SVC,SVR\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,make_scorer,r2_score,confusion_matrix, classification_report, plot_confusion_matrix,plot_roc_curve,roc_auc_score,ConfusionMatrixDisplay\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\n\nplt.rcParams[\"figure.figsize\"] = (10,6)\npd.set_option(\"max_columns\",100)\npd.set_option(\"max_rows\",900)\npd.set_option(\"max_colwidth\",200)","60e2cb08":"# Basic Libraries\nimport numpy as np\nimport pandas as pd\nfrom warnings import filterwarnings\nfrom collections import Counter\n\n# Visualizations Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.offline as pyo\nimport plotly.express as px\nimport plotly.graph_objs as go\npyo.init_notebook_mode()\nimport plotly.figure_factory as ff\nimport missingno as msno\n\n# Data Pre-processing Libraries\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n# Modelling Libraries\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,SGDClassifier,PassiveAggressiveClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.svm import SVC,LinearSVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier,NearestCentroid\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.ensemble import VotingClassifier\n\n# Evaluation & CV Libraries\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold","12a2c356":"dataset = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")\ndf = dataset.copy()\ndf.sample(7)","4f26fd3b":"# import pandas_profiling\n# pandas_profiling.ProfileReport(df)","7b256c7b":"def missing(df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values\n\nmissing(df)","fb4c2753":"df.Potability.value_counts()","234167a8":"df.corr()[\"Sulfate\"]","8c7ab3b8":"df.drop(columns=\"Potability\").describe()","7db20af6":"X = df.drop(columns=\"Potability\")\ny = df.Potability\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=44)","3a323502":"X_train.isnull().sum()","5ae68a9b":"df[df['Potability']==0][['ph','Sulfate','Trihalomethanes']].median()","fe59e27f":"df[df['Potability']==1][['ph','Sulfate','Trihalomethanes']].median()","cfeebb0a":"df[df['Potability']==0][['ph','Sulfate','Trihalomethanes']].mean()","c35eedf0":"df[df['Potability']==1][['ph','Sulfate','Trihalomethanes']].mean()","29c640a2":"X_train['ph'].fillna(value=X_train['ph'].mean(),inplace=True)\nX_train['Sulfate'].fillna(value=X_train['Sulfate'].mean(),inplace=True)\nX_train['Trihalomethanes'].fillna(value=X_train['Trihalomethanes'].mean(),inplace=True)","4d458715":"X_test['ph'].fillna(value=X_test['ph'].mean(),inplace=True)\nX_test['Sulfate'].fillna(value=X_test['Sulfate'].mean(),inplace=True)\nX_test['Trihalomethanes'].fillna(value=X_test['Trihalomethanes'].mean(),inplace=True)","fe9477ab":"X_test.isnull().sum()","6a1c3377":"X_train.isnull().sum()","79ab7616":"X_train = X_train.drop(index=1001)","7938ad71":"y_train= y_train.drop(index=1001)","216cc990":"X_train.info()","708f1988":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","cac46d91":"filterwarnings('ignore')\nmodels =[(\"LR\", LogisticRegression(max_iter=1000)),(\"SVC\", SVC()),('KNN',KNeighborsClassifier(n_neighbors=10)),\n         (\"DTC\", DecisionTreeClassifier()),(\"GNB\", GaussianNB()),\n        (\"SGDC\", SGDClassifier()),(\"Perc\", Perceptron()),(\"NC\",NearestCentroid()),\n        (\"Ridge\", RidgeClassifier()),(\"NuSVC\", NuSVC()),(\"BNB\", BernoulliNB()),\n         ('RF',RandomForestClassifier()),('ADA',AdaBoostClassifier()),\n        ('XGB',GradientBoostingClassifier()),('PAC',PassiveAggressiveClassifier())]\n\nresults = []\nnames = []\nfinalResults = []\n\nfor name,model in models:\n    model.fit(X_train, y_train)\n    model_results = model.predict(X_test)\n    score = precision_score(y_test, model_results,average='macro')\n    results.append(score)\n    names.append(name)\n    finalResults.append((name,score))\n    \nfinalResults.sort(key=lambda k:k[1],reverse=True)","effbd0ff":"finalResults","396742b7":"from sklearn.ensemble import AdaBoostRegressor,RandomForestRegressor","38e1cb6f":"def train_val(y_train, y_pred_train, y_test, y_pred):\n\n    scores = {\"train_set\": {\"Accuracy\" : accuracy_score(y_train, y_pred_train),\n                            \"Precision\" : precision_score(y_train, y_pred_train),\n                            \"Recall\" : recall_score(y_train, y_pred_train),                          \n                            \"f1\" : f1_score(y_train, y_pred_train)},\n    \n              \"test_set\": {\"Accuracy\" : accuracy_score(y_test,y_pred),\n                           \"Precision\" : precision_score(y_test, y_pred),\n                           \"Recall\" : recall_score(y_test, y_pred),                          \n                           \"f1\" : f1_score(y_test, y_pred)}}\n    \n    return pd.DataFrame(scores)","398e7ba4":"from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score","f636becb":"ada_model = AdaBoostRegressor(random_state=44)\nada_model.fit(X_train_scaled, y_train)\ny_pred = ada_model.predict(X_test_scaled)\ny_train_pred = ada_model.predict(X_train_scaled)\n# train_val(y_train, y_train_pred, y_test, y_pred)","47917ef7":"def eval_metric(actual, pred):\n    mae = mean_absolute_error(actual, pred)\n    mse = mean_squared_error(actual, pred)\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    R2_score = r2_score(actual, pred)\n    print(\"Model testing performance:\")\n    print(\"--------------------------\")\n    print(f\"R2_score \\t: {R2_score}\")\n    print(f\"MAE \\t\\t: {mae}\")\n    print(f\"MSE \\t\\t: {mse}\")\n    print(f\"RMSE \\t\\t: {rmse}\")","8e7c4738":"eval_metric(y_test,y_pred)","c9227a4a":"from sklearn.model_selection import cross_validate, cross_val_score\nmodel = AdaBoostRegressor(random_state=44, n_estimators=50)\nscores = cross_validate(ada_model, X_train_scaled, y_train, scoring=['r2', \n            'neg_mean_absolute_error','neg_mean_squared_error','neg_root_mean_squared_error'], cv =10)\npd.DataFrame(scores)\npd.DataFrame(scores).iloc[:, 2:].mean()","5b8d2806":"from sklearn.linear_model import LogisticRegression","0470117f":"scale = StandardScaler()","645d20bb":"X_train_scale = scale.fit_transform(X_train)\nX_test_scale = scale.transform(X_test)","670f3de0":"\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train_scale,y_train)\ny_pred = log_reg.predict(X_test_scale)\ny_pred_proba = log_reg.predict_proba(X_test_scale)","60866972":"from sklearn.metrics import confusion_matrix,plot_confusion_matrix,plot_precision_recall_curve,plot_roc_curve","ccfe2513":"print(confusion_matrix(y_test,y_pred))\nplot_confusion_matrix(log_reg,X_test_scale,y_test);","305f63e5":"from sklearn.metrics import classification_report","999777fb":"print(classification_report(y_test,y_pred))","1c77970a":"5. Sulfate:\nSulfates are naturally occurring substances that are found in minerals, soil, and rocks. They are present in ambient air, groundwater, plants, and food. The principal commercial use of sulfate is in the chemical industry. Sulfate concentration in seawater is about 2,700 milligrams per liter (mg\/L). It ranges from 3 to 30 mg\/L in most freshwater supplies, although much higher concentrations (1000 mg\/L) are found in some geographic locations.\n","b0829aed":"# Adaboost Regressor","90f8e4b2":"Trihalomethanes: (bromoform, bromodichloromethane,\ndibromochloromethane, chloroform)\n\n\nTrihalomethanes (THMs) are formed in drinking-water primarily as a result of chlorination of organic matter present naturally in raw water supplies. The rate and degree\nof THM formation increase as a function of the chlorine and humic acid concentration, temperature, pH and bromide ion concentration.\n"}}