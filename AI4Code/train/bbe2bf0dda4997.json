{"cell_type":{"53652f76":"code","3b74b83d":"code","a702cbb0":"code","918d2ab6":"code","1b579a19":"code","91c03eba":"code","cef81e03":"code","445484c9":"code","d7dec863":"code","9f1b351c":"code","b0161e4b":"code","26bc141b":"code","9f251515":"code","c547c80b":"code","cf4d9eb6":"code","81fc39cb":"code","568b32a8":"code","25e45df1":"code","94969972":"code","0de2faf6":"code","8f32e459":"code","07af2b90":"code","07689f03":"code","7b9e9116":"code","92c4e1f3":"code","aca77728":"code","a9c0ba88":"code","d74bdca0":"code","78707d64":"code","ecfe5d71":"code","ababcb4a":"markdown","9069a3dc":"markdown"},"source":{"53652f76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b74b83d":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn import metrics, preprocessing\nfrom xgboost import XGBClassifier\nfrom sklearn.impute import SimpleImputer\n","a702cbb0":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col=0)\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntrain.shape, test.shape, submission.shape, train, test, submission","918d2ab6":"train.info()","1b579a19":"cols_o = train.select_dtypes(include='object').columns.tolist()\ncols_o","91c03eba":"test['Survived'] = -999","cef81e03":"all_df = pd.concat([train, test], axis=0)\nall_df","445484c9":"all_df.isnull().sum()","d7dec863":"all_df['Cabin'].unique()","9f1b351c":"all_df['Cabin'] = all_df['Cabin'].fillna('unknown')\nall_df['Cabin']","b0161e4b":"all_df['Cabin'] = all_df['Cabin'].apply(lambda x: x if len(x.split(' ')) == 1 else 'unknown')\nall_df['Cabin'].unique()","26bc141b":"all_df['Embarked'].unique()","9f251515":"all_df['Embarked'] = all_df['Embarked'].fillna('NA')\nall_df['Embarked'].unique()","c547c80b":"imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_data = imp_mean.fit_transform(all_df[['Fare', 'Age']].values)\nall_df['Fare'] = imp_data[:,0]\nall_df['Age'] = imp_data[:,1]\n","cf4d9eb6":"all_df","81fc39cb":"all_df.isnull().sum()","568b32a8":"all_df","25e45df1":"for column in cols_o:\n    le = preprocessing.LabelEncoder()\n    le.fit(all_df[column])\n    all_df[column] = le.transform(all_df[column])\n\nall_df","94969972":"X = all_df[all_df['Survived'] != -999].drop(['Survived', 'Name', 'Ticket'], axis=1)\ny = all_df[all_df['Survived'] != -999]['Survived']\n\nX_Test = all_df[all_df['Survived'] == -999].drop(['Survived', 'Name', 'Ticket'], axis=1)\n\nX.shape, y.shape, X_Test.shape","0de2faf6":"X","8f32e459":"params = {\n    'learning_rate': [0.1, 0.01, 0.001],\n    'max_depth': list(range(1, 11)),\n    'subsample': [0.1, 0.3, 0.5, 0.7, 0.9],\n    'n_estimators': [10, 100, 1000],\n}\n","07af2b90":"xgb = XGBClassifier()\n\ngcv = GridSearchCV(xgb, params, cv=5, return_train_score=True)\ngcv.fit(X, y)","07689f03":"gcv.best_params_","7b9e9116":"gcv.cv_results_","92c4e1f3":"train_score = gcv.cv_results_['mean_train_score']\ntest_score = gcv.cv_results_['mean_test_score']","aca77728":"gcv.cv_results_","a9c0ba88":"plt.figure(figsize=(20, 4))\nplt.plot(train_score)\nplt.plot(test_score)\nplt.xticks(list(range(0, 10)), list(range(0, 450)))\n","d74bdca0":"pred = gcv.predict(X_Test)\npred","78707d64":"submission['Survived'] = pred","ecfe5d71":"submission.to_csv('submit_20200815_002.csv', index=None)","ababcb4a":"## load datasets","9069a3dc":"## import"}}