{"cell_type":{"0b70c2e4":"code","f9ab3e61":"code","07dc5b85":"code","4f3a68c4":"code","c9a03125":"code","0c53cabc":"code","2faf1b19":"code","5aaecfd4":"code","fcab4a6a":"code","72a4c46b":"code","988c9825":"code","7b0eeeef":"code","44438095":"code","7c657ebc":"code","5757f0c0":"code","70453818":"code","ac61edab":"code","a2412d6b":"code","bcef91a6":"code","f211edcb":"code","1cb060c8":"code","727278d9":"code","c74edcd5":"markdown"},"source":{"0b70c2e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f9ab3e61":"train = pd.read_csv('\/kaggle\/input\/electricity-consumption\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/electricity-consumption\/test.csv')\ntest1 = pd.read_csv('\/kaggle\/input\/electricity-consumption\/test.csv')","07dc5b85":"train.head()","4f3a68c4":"train['datetime'] = pd.to_datetime(train.datetime,format='%Y-%m-%d %H:%M:%S') \ntest['datetime'] = pd.to_datetime(test.datetime,format='%Y-%m-%d %H:%M:%S')","c9a03125":"for i in (train, test):\n    i['Year'] = i.datetime.dt.year\n    i['Month'] = i.datetime.dt.month\n    i['Day'] = i.datetime.dt.day\n    i['Hour'] = i.datetime.dt.hour","0c53cabc":"train = train.drop(['ID','datetime'], axis=1)\ntest = test.drop(['ID','datetime'], axis=1)","2faf1b19":"train.head()","5aaecfd4":"train.shape, test.shape","fcab4a6a":"train = pd.get_dummies(train)\ntest = pd.get_dummies(test)\ntrain.shape, test.shape","72a4c46b":"train['electricity_consumption'] = np.log(np.log(train['electricity_consumption']))\ntrain['windspeed'] = np.log(train['windspeed'])\ntrain['pressure'] = np.log(train['pressure'])\n\ntest['pressure'] = np.log(test['pressure'])\ntest['windspeed'] = np.log(test['windspeed'])","988c9825":"from sklearn.preprocessing import StandardScaler\ncols = ['temperature', 'var1']\nscaler = StandardScaler().fit(train[cols])\n\ntrain[cols] = scaler.transform(train[cols])\ntest[cols] = scaler.transform(test[cols])\nscaler.mean_","7b0eeeef":"train.head()","44438095":"train['electricity_consumption'].hist()","7c657ebc":"from sklearn.model_selection import train_test_split\nX = train.drop('electricity_consumption', axis=1)\ny = train['electricity_consumption']\n\nX_test = test.copy()\n\nx_train, x_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","5757f0c0":"from sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nmodel = LGBMRegressor(learning_rate=0.5, max_depth=5)\nmodel.fit(x_train, y_train)","70453818":"model.score(x_train, y_train)","ac61edab":"from sklearn.metrics import mean_squared_error\ny_pred = model.predict(x_val)\nnp.sqrt(mean_squared_error(np.exp(np.exp(y_pred)), np.exp(np.exp(y_val))))","a2412d6b":"import lightgbm\nlightgbm.plot_importance(model)","bcef91a6":"pred_test = model.predict(X_test)","f211edcb":"err = []\ny_pred_tot_lgm = []\n\nfrom sklearn.model_selection import KFold\n\nfold = KFold(n_splits=15, shuffle=True, random_state=2020)\ni = 1\nfor train_index, test_index in fold.split(X, y):\n    x_train, x_val = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_val = y[train_index], y[test_index]\n    m = LGBMRegressor(max_depth=5, \n                      learning_rate=0.4)\n    m.fit(x_train, y_train,\n          eval_set=[(x_train,y_train),(x_val, y_val)],\n          early_stopping_rounds=200,\n          eval_metric='rmse',\n          verbose=200)\n    pred_y = m.predict(x_val)\n    print(\"err_lgm: \",np.sqrt(mean_squared_error(np.exp(np.exp(pred_y)), np.exp(np.exp(y_val)))))\n    err.append(np.sqrt(mean_squared_error(np.exp(np.exp(pred_y)), np.exp(np.exp(y_val)))))\n    pred_test = m.predict(X_test)\n    i = i + 1\n    y_pred_tot_lgm.append(pred_test)","1cb060c8":"np.mean(err)","727278d9":"submission = pd.DataFrame()\nsubmission['ID'] = test1['ID']\nsubmission['electricity_consumption'] = np.exp(np.exp(np.mean(y_pred_tot_lgm, 0)))\nsubmission.to_csv('LGB.csv', index=False)","c74edcd5":"# Tree Modelling"}}