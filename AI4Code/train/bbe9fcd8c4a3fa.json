{"cell_type":{"629f6a23":"code","2bfc60f2":"code","dcc3ae35":"code","c1ef4f63":"code","8a3b7f7b":"code","ef044de5":"code","ee4bdcf4":"code","975d1e00":"code","e713d3a0":"code","192fd578":"code","6fe7c8db":"code","8d0296e2":"code","8554fb93":"code","f54b257b":"code","b2d07e8f":"code","ae4d87b7":"code","cb1fbf36":"code","4ca9e6e7":"code","872b634f":"code","550520d5":"code","fd08f564":"code","a32369f9":"code","5e9b4dd6":"code","54f8e9da":"code","ea830af9":"code","855bd576":"code","42e220a4":"code","9ffd32d5":"code","286e625c":"code","4de4bcce":"code","a4f9452a":"code","4610f175":"code","8a16579f":"code","f74a9427":"code","5ed3742e":"code","913345dc":"code","d4d4d8bf":"code","b2d3fbb5":"code","83614818":"code","9a2604f8":"code","b11210db":"code","625b139f":"code","3aba20ef":"code","773925d9":"code","45135aa8":"code","7100582e":"code","35bd911b":"code","99dedc35":"code","574e1198":"code","fda76dda":"code","cd81adc1":"code","6191dcd6":"code","e8f453fe":"code","2d0ca09d":"code","ad056935":"code","97c4fb04":"code","66a5f587":"code","41d8bbd5":"code","b9c8356d":"code","1339d9d0":"code","03d06ef0":"code","7ad4ab54":"code","61933729":"code","52443534":"code","25a7683e":"code","89cccdd6":"code","41cdcf8c":"code","fc037506":"code","b92a058e":"code","6d993ed5":"code","f21cf620":"code","14089fa8":"code","b6f7bf69":"code","b1895afa":"code","4136108e":"code","7283455c":"code","0a7d8cfc":"code","4da4252a":"code","33a48a82":"code","9d6ca685":"code","f630be7b":"code","a0bdf0c5":"code","487a0105":"code","ea813a57":"code","6f3a37b3":"code","6bca0be3":"code","788bb623":"code","8da570c5":"code","2d946956":"code","76d75df4":"code","9f55ad91":"code","966ee9e0":"code","f68ff9aa":"markdown","41088007":"markdown","60158134":"markdown","b7bd8418":"markdown","384a503d":"markdown","2d9636aa":"markdown","6da7fc55":"markdown","bc517b10":"markdown","14fb5f8c":"markdown","dbd43d3d":"markdown","a1bba07a":"markdown","958acbe7":"markdown","4d37fda7":"markdown","238c3d8b":"markdown","e8134bb6":"markdown","544f4077":"markdown","7629ba61":"markdown","837b5f5c":"markdown","7fd79471":"markdown","e0d44eb6":"markdown","e54e25c8":"markdown","dd129665":"markdown","b19a49c7":"markdown","1fcf7bb0":"markdown","02ed8942":"markdown","9e39c461":"markdown","ae79ebc6":"markdown","900b5413":"markdown","83d09263":"markdown","ceab8ca9":"markdown","a9a73d3f":"markdown","c479c401":"markdown","c51c3aa6":"markdown","a926230e":"markdown","0d70a6da":"markdown","61094e0a":"markdown","f38e1b33":"markdown","51c9bd47":"markdown","b073ce68":"markdown","2b5392df":"markdown","f3117843":"markdown","8fb38f27":"markdown","4ad67763":"markdown","e8da9c54":"markdown","2afb0298":"markdown","576a8ade":"markdown","df5dd396":"markdown","e15e87b9":"markdown","aab7a5d7":"markdown","de482d09":"markdown","737b7033":"markdown","b30d7868":"markdown","10173adc":"markdown","0f7150e7":"markdown","e1772682":"markdown","bd5f39e9":"markdown","46c527f1":"markdown","7fca9060":"markdown","fd72f702":"markdown","0d926d3f":"markdown","54ae7b39":"markdown","fcfdcd4c":"markdown","264c46b4":"markdown","85b51652":"markdown","dcf6a44f":"markdown","e56bf99f":"markdown","7c52cbf1":"markdown","db29db7f":"markdown","858a68f4":"markdown","06334c06":"markdown","4895908f":"markdown","41181d61":"markdown","33e9da86":"markdown","e423461a":"markdown","eb176e84":"markdown","c282021e":"markdown","83c10b6a":"markdown","a84df707":"markdown","32e8b501":"markdown","331adfca":"markdown","465fb472":"markdown","b1c022b1":"markdown","63bbd7af":"markdown","a5b3f2da":"markdown","69317491":"markdown","d97bfd21":"markdown","2e1b3df4":"markdown","2c9cde5d":"markdown","3fcbc106":"markdown","2eade69b":"markdown","d3d77a92":"markdown","c7c68ecc":"markdown","80b2fc93":"markdown","1ed12111":"markdown","214b2ca8":"markdown","967307a5":"markdown","d4eca257":"markdown","d6c2ebc3":"markdown","e09c0e35":"markdown","6b47b3c0":"markdown","3be14c4e":"markdown","0b8b931e":"markdown","76688467":"markdown","b501f7e9":"markdown","83507f88":"markdown","e22e4231":"markdown","54450e92":"markdown","1595c031":"markdown","58ff8e62":"markdown","90177496":"markdown","f71b5c5f":"markdown","262ceadf":"markdown","fdd333ad":"markdown","4404320f":"markdown","46d9d65d":"markdown","d6fa32aa":"markdown","2f1605fd":"markdown","d77ea9ca":"markdown","b761c2b4":"markdown","3e4946d9":"markdown","23ded614":"markdown","518b07c8":"markdown","6eb89000":"markdown","7b3e73ba":"markdown","01c14e7a":"markdown","e778e54f":"markdown","c7fdf0e1":"markdown","a06b948d":"markdown","3cabd5d5":"markdown","83788fb9":"markdown","e78c0591":"markdown","3e8ddb7a":"markdown","0867b0ba":"markdown","5f95732d":"markdown","c78dc5f0":"markdown","cd2c6a65":"markdown","dae24430":"markdown","24eff8bf":"markdown","95175b52":"markdown","de73cef6":"markdown","1be741b9":"markdown","effef4b3":"markdown","b37a1686":"markdown","d3913ee9":"markdown","25a7355e":"markdown","0e708ed8":"markdown","15490746":"markdown"},"source":{"629f6a23":"import pandas as pd\nimport os\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy import stats\n%matplotlib inline\nsns.set_style('darkgrid')\n%matplotlib inline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy.stats import zscore\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\nfrom sklearn import model_selection\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom collections import Counter\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.over_sampling import SMOTENC\nfrom imblearn.over_sampling import SMOTE","2bfc60f2":"df1=pd.read_csv('..\/input\/customer-banking-data\/Part2 - Data1.csv')","dcc3ae35":"df1.head()","c1ef4f63":"df1.shape","8a3b7f7b":"df1.head() #checking sample 5 records","ef044de5":"df2=pd.read_csv('..\/input\/customer-banking-data\/Part2 -Data2.csv')","ee4bdcf4":"df2.shape","975d1e00":"df2.head() #checking first 5 records","e713d3a0":"df=df1.merge(df2,left_on='ID',right_on='ID') #id is common in both dataframe","192fd578":"df.shape","6fe7c8db":"df.head()","8d0296e2":"df.dtypes","8554fb93":"col=['HiddenScore','Level','Security','FixedDepositAccount', 'InternetBanking', 'CreditCard', 'LoanOnCard']\nfor i in col:\n    df[i]=df[i].astype('category')","f54b257b":"df.dtypes","b2d07e8f":"df.info()","ae4d87b7":"df.isnull().sum()","cb1fbf36":"df.dropna(axis=0,inplace=True)","4ca9e6e7":"df.isnull().sum()","872b634f":"df.drop('ID',axis=1,inplace=True)","550520d5":"df.describe()","fd08f564":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'Age', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['Age'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['Age'],25),np.percentile(df['Age'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['Age'] if i < lower or i > upper]\nprint('{} Total Number of outliers in Age: {}'.format('\\033[1m',len(Outliers)))","a32369f9":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'CustomerSince', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['CustomerSince'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['CustomerSince'],25),np.percentile(df['CustomerSince'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['CustomerSince'] if i < lower or i > upper]\nprint('{} Total Number of outliers in CustomerSince: {}'.format('\\033[1m',len(Outliers)))","5e9b4dd6":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'HighestSpend', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['HighestSpend'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['HighestSpend'],25),np.percentile(df['HighestSpend'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['HighestSpend'] if i < lower or i > upper]\nprint('{} Total Number of outliers in HighestSpend: {}'.format('\\033[1m',len(Outliers)))","54f8e9da":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'MonthlyAverageSpend', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['MonthlyAverageSpend'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['MonthlyAverageSpend'],25),np.percentile(df['MonthlyAverageSpend'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['MonthlyAverageSpend'] if i < lower or i > upper]\nprint('{} Total Number of outliers in MonthlyAverageSpend: {}'.format('\\033[1m',len(Outliers)))","ea830af9":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'ZipCode', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['ZipCode'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['ZipCode'],25),np.percentile(df['ZipCode'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['ZipCode'] if i < lower or i > upper]\nprint('{} Total Number of outliers in ZipCode: {}'.format('\\033[1m',len(Outliers)))","855bd576":"f, axes = plt.subplots(1, 2, figsize=(17,7))\nsns.boxplot(x = 'Mortgage', data=df,  orient='h' , ax=axes[1])\nsns.distplot(df['Mortgage'],  ax=axes[0])\naxes[0].set_title('Distribution plot')\naxes[1].set_title('Box plot')\nplt.show()\n#checking count of outliers.\nq25,q75=np.percentile(df['Mortgage'],25),np.percentile(df['Mortgage'],75)\nIQR=q75-q25\nThreshold=IQR*1.5\nlower,upper=q25-Threshold,q75+Threshold\nOutliers=[i for i in df['Mortgage'] if i < lower or i > upper]\nprint('{} Total Number of outliers in Mortgage: {}'.format('\\033[1m',len(Outliers)))","42e220a4":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['HiddenScore'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('HiddenScore',data=df,ax=axes[1],order=[1,2,4,3])\naxes[0].set_title('HiddenScore Variable Pie Chart')\naxes[1].set_title('HiddenScore Variable Bar Graph')\nplt.show()","9ffd32d5":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['Level'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('Level',data=df,ax=axes[1],order=[1,3,2])\naxes[0].set_title('Level Variable Pie Chart')\naxes[1].set_title('Level Variable Bar Graph')\nplt.show()","286e625c":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['FixedDepositAccount'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('FixedDepositAccount',data=df,ax=axes[1])\naxes[0].set_title('FixedDepositAccount Variable Pie Chart')\naxes[1].set_title('FixedDepositAccount Variable Bar Graph')\nplt.show()","4de4bcce":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['InternetBanking'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('InternetBanking',data=df,ax=axes[1],order=[1,0])\naxes[0].set_title('InternetBanking Variable Pie Chart')\naxes[1].set_title('InternetBanking Variable Bar Graph')\nplt.show()","a4f9452a":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['CreditCard'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('CreditCard',data=df,ax=axes[1],order=[0,1])\naxes[0].set_title('CreditCard Variable Pie Chart')\naxes[1].set_title('CreditCard Variable Bar Graph')\nplt.show()","4610f175":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['LoanOnCard'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('LoanOnCard',data=df,ax=axes[1],order=[0,1])\naxes[0].set_title('LoanOnCard Variable Pie Chart')\naxes[1].set_title('LoanOnCard Variable Bar Graph')\nplt.show()","8a16579f":"plt.figure(figsize=(15,7))\nsns.boxplot(x='LoanOnCard', y='CustomerSince', data= df)\nplt.show()","f74a9427":"df.groupby(by=['LoanOnCard'])['CustomerSince'].mean().reset_index().sort_values(['CustomerSince']).tail(10).plot(x='LoanOnCard',\n                                                                                                           y='CustomerSince',\n                                                                                                           kind='bar',\n                                                                                                           figsize=(15,5))\nplt.show()","5ed3742e":"plt.figure(figsize=(15,7))\nsns.boxplot(x='LoanOnCard', y='HighestSpend', data= df)\nplt.show()","913345dc":"df.groupby(by=['LoanOnCard'])['HighestSpend'].mean().reset_index().sort_values(['HighestSpend']).tail(10).plot(x='LoanOnCard',\n                                                                                                           y='HighestSpend',\n                                                                                                           kind='bar',\n                                                                                                           figsize=(15,5))\n\nplt.show()","d4d4d8bf":"plt.figure(figsize=(15,7))\nsns.boxplot(x='LoanOnCard', y='MonthlyAverageSpend', data= df)\nplt.show()","b2d3fbb5":"df.groupby(by=['LoanOnCard'])['MonthlyAverageSpend'].mean().reset_index().sort_values(['MonthlyAverageSpend']).tail(10).plot(x='LoanOnCard',\n                                                                                                           y='MonthlyAverageSpend',\n                                                                                                           kind='bar',\n                                                                                                           figsize=(15,5))\n\nplt.show()","83614818":"plt.figure(figsize=(15,7))\nsns.boxplot(x='LoanOnCard', y='Mortgage', data= df)\nplt.show()","9a2604f8":"df.groupby(by=['LoanOnCard'])['Mortgage'].mean().reset_index().sort_values(['Mortgage']).tail(10).plot(x='LoanOnCard',\n                                                                                                           y='Mortgage',\n                                                                                                           kind='bar',\n                                                                                                           figsize=(15,5))\n\nplt.show()","b11210db":"plt.figure(figsize=(15,7))\nsns.boxplot(x='LoanOnCard', y='Age', data= df)\nplt.show()","625b139f":"df.groupby(by=['LoanOnCard'])['Age'].mean().reset_index().sort_values(['Age']).tail(10).plot(x='LoanOnCard',\n                                                                                                           y='Age',\n                                                                                                           kind='bar',\n                                                                                                           figsize=(15,5))\n\nplt.show()","3aba20ef":"figure = plt.figure(figsize=(50,25))\n\nax = sns.regplot(x='MonthlyAverageSpend',y='HighestSpend', data=df) # regression plot - scatter plot with a regression line","773925d9":"figure = plt.figure(figsize=(50,25))\n\nax = sns.regplot(x='Age',y='MonthlyAverageSpend', data=df) # regression plot - scatter plot with a regression line","45135aa8":"figure = plt.figure(figsize=(50,25))\nax = sns.regplot(x='CustomerSince',y='MonthlyAverageSpend', data=df) # regression plot - scatter plot with a regression line","7100582e":"figure = plt.figure(figsize=(50,25))\nax = sns.regplot(x='Mortgage',y='MonthlyAverageSpend', data=df) # regression plot - scatter plot with a regression line","35bd911b":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f', center = 1 )  # heatmap\nplt.show()","99dedc35":"plt.figure(figsize=(15,7))\nsns.countplot(df['HiddenScore'],hue=df['LoanOnCard'])","574e1198":"plt.figure(figsize=(15,7))\nsns.countplot(df['Level'],hue=df['LoanOnCard'])","fda76dda":"plt.figure(figsize=(15,7))\nsns.countplot(df['Security'],hue=df['LoanOnCard'])","cd81adc1":"plt.figure(figsize=(15,7))\nsns.countplot(df['FixedDepositAccount'],hue=df['LoanOnCard'])\nplt.show()","6191dcd6":"plt.figure(figsize=(15,5))\nsns.pointplot(x=\"Level\", y=\"MonthlyAverageSpend\", hue = 'LoanOnCard',  data=df)\nplt.show()","e8f453fe":"plt.figure(figsize=(15,5))\nsns.pointplot(x=\"InternetBanking\", y=\"MonthlyAverageSpend\", hue = 'LoanOnCard',  data=df)\nplt.show()","2d0ca09d":"plt.figure(figsize=(15,5))\nsns.pointplot(x=\"CreditCard\", y=\"MonthlyAverageSpend\", hue = 'LoanOnCard',  data=df)\nplt.show()","ad056935":"plt.figure(figsize=(15,5))\nsns.pointplot(x=\"FixedDepositAccount\", y=\"MonthlyAverageSpend\", hue = 'LoanOnCard',  data=df)\nplt.show()","97c4fb04":"class_summary=df.groupby('LoanOnCard') #getting mean values of each class for all independent variables\nclass_summary.mean().reset_index()","66a5f587":"col=list(df.select_dtypes(include=['int64','float64']).columns)","41d8bbd5":"for i in col:\n    x = np.array(df[df.LoanOnCard == 0][i]) \n    y = np.array(df[df.LoanOnCard == 1][i])\n    t, p_value  = stats.ttest_ind(x,y, axis = 0,equal_var=False) \n    print('{} P_Value:{}'.format('\\033[1m',p_value))\n    if p_value < 0.05:  # Setting our significance level at 5%\n        print('{} Rejecting Null Hypothesis.{} of Loan holders and non-Loan holders are not same'.format('\\033[1m',i))\n    else:\n        print('{} Fail to Reject Null Hypothesis.{} of Loan holders and non-Loan holders are  same'.format('\\033[1m',i))\n    print('\\n')","b9c8356d":"df.drop(['Age','CustomerSince','ZipCode'],axis=1,inplace=True)","1339d9d0":"crosstab=pd.crosstab(df['LoanOnCard'],df['HiddenScore'])\nprint(crosstab)","03d06ef0":"chi,p_value,dof,expected=stats.chi2_contingency(crosstab)\nprint('P_Value:', p_value)","7ad4ab54":"if p_value < 0.05:  # Setting our significance level at 5%\n    print('{} Rejecting Null Hypothesis. \\n There is significant difference in hidden score for different category of target variable(Loan on card)'.format('\\033[1m'))\nelse:\n    print('{} Fail to Reject Null Hypothesis.\\n There is no significant difference in hidden score for different category of target variable(Loan on card)'.format('\\033[1m'))","61933729":"cat_col=list(df.select_dtypes(include=['category']).columns)","52443534":"cat_col.remove('HiddenScore')\ncat_col.remove('LoanOnCard')","25a7683e":"for i in cat_col:\n    crosstab=pd.crosstab(df['LoanOnCard'],df[i])\n    chi,p_value,dof,expected=stats.chi2_contingency(crosstab)\n    if p_value < 0.05:  # Setting our significance level at 5%\n        print('{} Rejecting Null Hypothesis. \\n There is significant difference in {} Feature for different category of target variable(Loan on card)'.format('\\033[1m',i))\n    else:\n        print('{} Fail to Reject Null Hypothesis.\\n There is no significant difference in {} Feature for different category of target variable(Loan on card)'.format('\\033[1m',i))\n    print('\\n')","89cccdd6":"df.drop(['CreditCard','InternetBanking','Security'],axis=1,inplace=True)","41cdcf8c":"col=['HighestSpend','MonthlyAverageSpend','Mortgage']","fc037506":"for c in col:\n    #getting upper lower quartile values\n    q25,q75=np.percentile(df[c],25),np.percentile(df[c],75)\n    IQR=q75-q25\n    Threshold=IQR*1.5\n    lower,upper=q25-Threshold,q75+Threshold\n    Outliers=[i for i in df[c] if i < lower or i > upper]\n    print('{} Total Number of outliers in {} Before Imputing : {}'.format('\\033[1m',c,len(Outliers)))\n    print('\\n')\n    #taking mean of a column without considering outliers\n    df_include = df.loc[(df[c] >= lower) & (df[c] <= upper)]\n    mean=int(df_include[c].mean())\n    print('{} Mean of {} is {}'.format('\\033[1m',c,mean))\n    print('\\n')\n    #imputing outliers with mean\n    df[c]=np.where(df[c]>upper,mean,df[c])\n    df[c]=np.where(df[c]<lower,mean,df[c])\n    Outliers=[i for i in df[c] if i < lower or i > upper]\n    print('{} Total Number of outliers in {} After Imputing : {}'.format('\\033[1m',c,len(Outliers)))  \n    print('\\n')","b92a058e":"f,axes=plt.subplots(1,2,figsize=(17,7))\ndf['LoanOnCard'].value_counts().plot.pie(autopct='%1.1f%%',ax=axes[0],shadow=True)\nsns.countplot('LoanOnCard',data=df,ax=axes[1],order=[0,1])\naxes[0].set_title('LoanOnCard Variable Pie Chart')\naxes[1].set_title('LoanOnCard Variable Bar Graph')\nplt.show()","6d993ed5":"# Arrange data into independent variables and dependent variables\nX=df.drop(columns='LoanOnCard')\ny=df['LoanOnCard'] #target","f21cf620":"# Split X and y into training and test set in 70:30 ratio\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=10)","14089fa8":"logit = LogisticRegression()\nlogit.fit(X_train, y_train)\nlogit_pred = logit.predict(X_test)\n\nprint('Accuracy on Training data:',logit.score(X_train, y_train) )\nprint('Accuracy on Test data:',logit.score(X_test, y_test) )","b6f7bf69":"cm = confusion_matrix(y_test, logit_pred, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"Non-Loan holders\",\"Loan holders\"]],\n                  columns = [i for i in [\"Non-Loan holders\",\"Loan holders\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True ,fmt='g')\nplt.show()","b1895afa":"print(\"classification  Matrix:\\n\",classification_report(y_test,logit_pred))","4136108e":"smote_nc=SMOTENC(categorical_features=[1,3,5],random_state=42) #specifying categorical column numbers\nx_s,y_s=smote_nc.fit_resample(X,y)","7283455c":"print('Before sampling:')\nprint(y.value_counts())","0a7d8cfc":"print('After sampling:')\nprint(y_s.value_counts())","4da4252a":"# Split X and y into training and test set in 70:30 ratio\nX_train, X_test, y_train, y_test = train_test_split(x_s, y_s, test_size=0.30, random_state=10)","33a48a82":"logit = LogisticRegression()\nlogit.fit(X_train, y_train)\nlogit_pred = logit.predict(X_test)\n\nprint('Accuracy on Training data:',logit.score(X_train, y_train) )\nprint('Accuracy on Test data:',logit.score(X_test, y_test) )","9d6ca685":"cm = confusion_matrix(y_test, logit_pred, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"Non-Loan holders\",\"Loan holders\"]],\n                  columns = [i for i in [\"Non-Loan holders\",\"Loan holders\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True ,fmt='g')\nplt.show()","f630be7b":"print(\"classification  Matrix:\\n\",classification_report(y_test,logit_pred))","a0bdf0c5":"# Split X and y into training and test set in 70:30 ratio\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=10)","487a0105":"smote_nc=SMOTENC(categorical_features=[1,3,5],random_state=42)\nx_train_res, y_train_res = smote_nc.fit_resample(X_train, y_train)","ea813a57":"logit = LogisticRegression()\nlogit.fit(x_train_res, y_train_res)\nlogit_pred = logit.predict(X_test)\n\nprint('Accuracy on Training data:',logit.score(X_train, y_train) )\nprint('Accuracy on Test data:',logit.score(X_test, y_test) )","6f3a37b3":"cm = confusion_matrix(y_test, logit_pred, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"Non-Loan holders\",\"Loan holders\"]],\n                  columns = [i for i in [\"Non-Loan holders\",\"Loan holders\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True ,fmt='g')\nplt.show()","6bca0be3":"print(\"classification  Matrix:\\n\",classification_report(y_test,logit_pred))","788bb623":"g_model = GaussianNB()\ng_model.fit(x_train_res, y_train_res.ravel())\ng_pred = g_model.predict(X_test)\n\nprint('Accuracy on Training data:',g_model.score(X_train, y_train) )\nprint('Accuracy on Test data:',g_model.score(X_test, y_test) )","8da570c5":"cm = confusion_matrix(y_test, g_pred, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"Non-Loan holders\",\"Loan holders\"]],\n                  columns = [i for i in [\"Non-Loan holders\",\"Loan holders\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True ,fmt='g')\nplt.show()","2d946956":"print(\"classification  Matrix:\\n\",classification_report(y_test,g_pred))","76d75df4":"LR_model=LogisticRegression()\nKNN_model=KNeighborsClassifier(n_neighbors=13)\nGN_model=GaussianNB()","9f55ad91":"#seed = 7\n# prepare models\nmodels = []\nmodels.append(('LR', LR_model))\nmodels.append(('KNN', KNN_model))\nmodels.append(('NB', GN_model))\n\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n\tkfold = model_selection.KFold(n_splits=10)\n\tcv_results = model_selection.cross_val_score(model,  X,y, cv=kfold, scoring=scoring)\n\tresults.append(cv_results)\n\tnames.append(name)\n\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n\tprint(msg)\n# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","966ee9e0":"#seed = 7\n# prepare models\nmodels = []\nmodels.append(('LR', LR_model))\nmodels.append(('KNN', KNN_model))\nmodels.append(('NB', GN_model))\n\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n\tkfold = model_selection.StratifiedKFold(n_splits=10)\n\tcv_results = model_selection.cross_val_score(model,  X,y, cv=kfold, scoring=scoring)\n\tresults.append(cv_results)\n\tnames.append(name)\n\tmsg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n\tprint(msg)\n# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","f68ff9aa":"**CustomerSince**","41088007":"**we can see the target is balanced after sampling**","60158134":"**Now we can see recall value is improved after sampling.**\n\n**So whenever we have imbalance target we will use sampling method to balance the data.**","b7bd8418":"# **MultiVariate Analysis**","384a503d":"**MonthlyAverageSpend**","2d9636aa":"**Level**","6da7fc55":"# 4. Data Pre-processing","bc517b10":"**we are doing smote only for training data**","14fb5f8c":"**We have 8 columns and 5000 rows**","dbd43d3d":"**Numerical vs Category**","a1bba07a":"**We can statistically check whether all the independent variables has significant effect on target variables**","958acbe7":">**We can see positive skewness in the data**\n\n> **In one transaction highest spend amount is between 45 to 100. Here the units are masked**\n\n>**We can see 96 Outliers. Few customers spent more than 200 as well**","4d37fda7":"# **Naive Bayes Model**","238c3d8b":"> **Mean values are nearly equal for both loan holders and non loan holders**","e8134bb6":"**We have 7 columns and 5000 rows**","544f4077":"**Target variable Loanoncard having few missing records**","7629ba61":"> **Spend is slightly more for credit card holders**","837b5f5c":"**Shape of the dataset**","7fd79471":"> **Average spend mean values are more for loan holders.**","e0d44eb6":"**\"MonthlyAverageSpend\" vs \"Loan\" vs \"FixedDepositAccount\"**","e54e25c8":"> **It is surprisingly to see more customers those who have loan does not have any security**\n\n> **Security of loan holders are very less**","dd129665":"**Here you can see model is poor in predicting class 1 compared to class 0**\n\n**Accuracy is good but in this case we need to look on recall value**\n\n**Here Recall tells that only 48% class 1 is predicted correctly from actual values**\n\n**We dont have enough sample of class 1 to train the model.**\n\n**We will do the sampling and check how recall values improves in this case.**","b19a49c7":"# **Logistic Regression Model**","1fcf7bb0":"> **It is evident that people having loan on card spends more than who doesn't have**\n\n>**Some customer who does not have loan also spends more sometimes.**","02ed8942":"> **60 % of people uses internet banking**","9e39c461":"# Merging the dataset","ae79ebc6":"**Level vs Loan on card**","900b5413":"**ZipCode**","83d09263":"# **Outlier Analysis**","ceab8ca9":"**Very slight improvement in accuracy**","a9a73d3f":"**Shape of the dataset**","c479c401":"**Without doing any sampling using k-fold we are getiing good accuracy score in logistic regresssion.**\n\n**Naive bayes performance is less compared to others.**","c51c3aa6":"**We have very less missing value so we will drop the missing records.**","a926230e":"**LoanOnCard vs CustomerSince**","0d70a6da":"**Age**","61094e0a":"**HiddenScore**","f38e1b33":"**Here accuracy in test data slightly less compared to training data.**","51c9bd47":"**CustomerSince vs MonthlyAverageSpend**","b073ce68":"**\"Monthly average spend\" vs \"loan\" vs \"level\"**","2b5392df":"**As we are having imbalanced data we will use stratified k-fold to check the performance.**","f3117843":"> **Age and customer since has correlation as 1. Any one can be used for the model.**\n\n> **Highest spend has large correlation with monthly average spend**\n\n> **Mortage and highest spend has little correlation**\n\n> **Rest of the variables does not have any relation**","8fb38f27":"> **Mean values are nearly equal so age is not affected for taking loans**","4ad67763":"> **Customer period is not dependent on spend**","e8da9c54":"# 5. Model training, testing and tuning:","2afb0298":"**Distribution and outlier analysis of numerical variables**","576a8ade":"> **Spend is slightly more for FD Account holders**","df5dd396":"**Checking the datatypes**","e15e87b9":"**5 Point summary**","aab7a5d7":"**Here we are building model without sampling**","de482d09":"# Importing Necessary Packages","737b7033":"**Two widely used resampling methods:**\n    \n**Undersampling: It is the process where you randomly delete some of the observations from the majority class in order to match the numbers with the minority class.**\n\n**Oversampling: It is the process of generating synthetic data that tries to randomly generate a sample of the attributes from observations in the minority class**","b30d7868":"**Age vs LoanOnCard**","10173adc":"#  Predictors and Target","0f7150e7":"# **SMOTE**","e1772682":"**After doing sampling only on training data we can see difference in values**\n\n**We are getting good recall value but the precision value is reduced**\n\n**We will do sampling oly on training data to check real performance of the model**","bd5f39e9":"**Dataset 1**","46c527f1":"> **Mortage value is high for loan holders**\n\n> **We can see extreme value in both the cases**","7fca9060":"> **Customer of the bank since has equal distribution on loan holders and non-loan holders.**","fd72f702":"**We can see Age,Customer since and zip code does not have effect on target variable. So dropping this column before building model**","0d926d3f":"**Mortgage** ","54ae7b39":"**Similarly we will check for other categorical columns**","fcfdcd4c":"**All the missing records are dropped**","264c46b4":"> **We can see 93.9% of customers does not have fixed deposit account**","85b51652":"**94% accuracy on training set and 93% accuracy on test set.**\n\n**Here training set accuracy and testing accuracy are balanced when model is built without sampling also accuracy is good**","dcf6a44f":"**Id column is not useful in model building so dropping that feature**","e56bf99f":"**Mortgage value has slight relationship with spend**","7c52cbf1":"**CreditCard**","db29db7f":"**\u2022 CONTEXT: A bank X is on a massive digital transformation for all its departments. Bank has a growing customer base whee majority of them are liability customers (depositors) vs borrowers (asset customers). The bank is interested in expanding the borrowers base rapidly to bring in more business via loan interests. A campaign that the bank ran in last quarter showed an average single digit conversion rate. Digital transformation being the core strength of the business strategy, marketing department wants to devise effective campaigns with better target marketing to increase the conversion ratio to double digit with same budget as per last campaign.**","858a68f4":"**\u2022 DATA DESCRIPTION: The data consists of the following attributes:**\n1. **ID: Customer ID**\n2. **Age Customer\u2019s approximate age.**\n3. **CustomerSince: Customer of the bank since. [unit is masked]**\n4. **HighestSpend: Customer\u2019s highest spend so far in one transaction. [unit is masked]**\n5. **ZipCode: Customer\u2019s zip code.**\n6. **HiddenScore: A score associated to the customer which is masked by the bank as an IP.**\n7. **MonthlyAverageSpend: Customer\u2019s monthly average spend so far. [unit is masked]**\n8. **Level: A level associated to the customer which is masked by the bank as an IP.**\n9. **Mortgage: Customer\u2019s mortgage. [unit is masked]**\n10. **Security: Customer\u2019s security asset with the bank. [unit is masked]**\n11. **FixedDepositAccount: Customer\u2019s fixed deposit account with the bank. [unit is masked]**\n12. **InternetBanking: if the customer uses internet banking.**\n13. **CreditCard: if the customer uses bank\u2019s credit card.**\n14. **LoanOnCard: if the customer has a loan on credit card.**","06334c06":"**FixedDepositAccount vs  Loanoncard**","4895908f":"**Recall value is good for both the classes**\n\n**Recall value for class 1 is less in naive bayes model compared to logistic regression.**","41181d61":"**HighestSpend**","33e9da86":"> **Age does not have any relationship with spend.**","e423461a":"**Dataset-2**","eb176e84":"> **We have imputed all outliers with mean value**","c282021e":"**FixedDepositAccount**","83c10b6a":"**SMOTE for target imbalance**","a84df707":"**We can see all categorical columns datatypes are changed**","32e8b501":"> **There is clear linear relationship between Monthly average spend and highest spend.**","331adfca":"**Checking First 5 Rows**","465fb472":"**Age vs MonthlyAverageSpend**","b1c022b1":"> **Most of the zipcodes are appeared once.**\n\n> **There is no proper distribution**\n\n> **This column does not add value to the model. We will drop during model building**","63bbd7af":"**Mean and Median of Age,customer since column is nearly equal,So there wont be any skewness**\n\n**Mean is greater than Median in highestspend and monthly average spend.So Positive skewness will exist**\n\n**We can see high fluctuation in mortage column. 50% of data has zero values but maximum value is 635. This is hugely affected by outliers**","a5b3f2da":"> **There is no fluctuation due to internet banking**","69317491":"# 2. Data Cleansing","d97bfd21":"**Hidden Score vs Loan on card**","2e1b3df4":"> **Age distribution is nearly equal for both loan holders and non-loan holders**","2c9cde5d":"**Security vs Loan on card**","3fcbc106":"**We can see credit card,internet banking and security does not have significant difference in target variable.So dropping this column before building model**","2eade69b":"**LoanOnCard**","d3d77a92":"**\"MonthlyAverageSpend\" vs \"Loan\" vs \"InternetBanking\"**","c7c68ecc":"**\"MonthlyAverageSpend\" vs \"Loan\" vs \"CreditCard\"**","80b2fc93":"**MonthlyAverageSpend vs LoanOnCard**\n","1ed12111":"> **We can clearly see that loan holder spend more money.Particulary the spend is more on level 2 and 3**","214b2ca8":"> **Hidden score is more for non-loan holders**","967307a5":"**Statistical Testing of continuous feature with target variable**","d4eca257":"**Statistical Testing of categorical features with target variable**","d6c2ebc3":"**Ho: There is no significant difference in hidden score for different category of target variable(Loan on card)**\n\n**H1: There is significant difference in hidden score for different category of target variable(Loan on card)**    ","e09c0e35":"**Here we will use oversampling because undersampling may remove important information from the dataset**","6b47b3c0":"**In the above figure 76 and 26 are the errors in the model.**\n\n**we are getting very less error**","3be14c4e":"**Mortgage vs LoanOnCard**","0b8b931e":"# Hypothesis Testing","76688467":"**We will do point plot to have detailed analysis of categorical variable**","b501f7e9":"> **We are selecting final model as logistic regression as it performs well in training and testing test.**\n\n> **Logistic Regression is not affected by overfitting and it is also has good recall value.**\n\n> **Logistic regression performed well in k-fold cross validation as well.**\n\n> **Deviation also less in logistic regression.**\n\n> **Sampling improved to predict minority classes as well**\n\n> **Suggesting to collect data equally for both the classes.**\n\n> **Few customers does't have credit card but those customer having loan on card. This data error can be avoided**\n","83507f88":"**If we do smote on entire data it may leak information to validation data as well. we need to test the model with unseen information. so we will do sampling only on training data.**","e22e4231":"# 3.Data Analysis & Visulaization","54450e92":"> **There is normality maintained in age column. Center area is little wider.**\n\n> **People with age between 35 to 65 are more**\n\n> **We have no outliers in this column**","1595c031":"> **Mortgage Mean values are more for loan holders**","58ff8e62":"> **We can see 90% of people does not have loan on credit card**","90177496":"**Ho(Null Hypothesis):There is no significant difference in independent feature with different category of Target variable**\n\n**H1(Alternate Hypothesis):There is significant difference in independent feature with different category of Target variable**","f71b5c5f":"**Numerical vs Numerical**\n\n**MonthlyAverageSpend vs HighestSpend**","262ceadf":"**we can see there is decrease in test accuracy.**","fdd333ad":"> **Monthly average spend is more for loan holders**\n\n> **This column is directly proportional to highest spend**","4404320f":"**Do these data provide sufficient evidence at the 5% significance level to infer that there are differences in Hiddenscore among Loan on card (0 and 1)?**","46d9d65d":"> **70 % of people uses bank's credit card**","d6fa32aa":"> **Level 1 has minimum number of loan holders**\n\n> **Loan holders in Level 2 and 3 are nearly equal**","2f1605fd":"**Here both accuracy is reduced after sampling. Let us check on the classification report.**","d77ea9ca":"# **\u2022 DOMAIN:Banking and finance**","b761c2b4":"**Highest Spend mean values differ huge for loan and non-loan customer**\n\n**Age mean is equal for each class**\n\n**We can check by statistical test**","3e4946d9":"# **Checking on Target Imbalance**","23ded614":"> **Count of non loan holders are more**\n","518b07c8":"**Here we will be using two-sample unpaired t-test**","6eb89000":"**We are imputing outiers with mean**","7b3e73ba":"**K-Fold CV for finding best model**","01c14e7a":"> **Level 2 and 3 has nearly equal distribution**\n\n> **Level 1 customers are more compared to others**","e778e54f":"**Category vs Category**","c7fdf0e1":"# **6.Conclusion  and improvisation.**","a06b948d":"# Univariate Analysis","3cabd5d5":" # **Bi Variate Analysis**","83788fb9":"**Checking the information about dataset**","e78c0591":"**Mortgage vs MonthlyAverageSpend**","3e8ddb7a":"**InternetBanking**","0867b0ba":"**Confusion Matrix**","5f95732d":"> **We can see huge positive skewness in the data**\n\n> **Monthly average spend of the customer are mostly between 1 to 3(Units are masked)**\n\n> **There is more number of outliers.This tells some customers spent huge amount as well**","c78dc5f0":"**Here we are doing smote for all  data**","cd2c6a65":"**Changing datatypes of categorical features**","dae24430":"> **Most of the people became customer of bank between 10 to 30. Here the units are masked**\n\n>**We have no outliers**","24eff8bf":"> **There is huge imbalance in target variable.** \n\n> **If the imbalanced data is not treated beforehand, then this will degrade the performance of the classifier model. Most of the predictions will correspond to the majority class and treat the minority class features as noise in the data and ignore them. This will result in a high bias in the model.**\n\n> **A widely adopted technique for dealing with highly unbalanced datasets is called resampling**","95175b52":"**We can see nearly equal distribution of each category**","de73cef6":"# Train - Test Split","1be741b9":"**Final Dataframe has 14 columns and 5000 rows**","effef4b3":"> **Mean value of highest spend is more for loan holders**","b37a1686":"**Distribution of categorical variables**","d3913ee9":"> **Most of cases we have zero as value this tell most of the cutomer doest have mortage.**\n\n> **we can see there is no proper distribution.**","25a7355e":"# 1. Import and warehouse data:","0e708ed8":"**HighestSpend vs LoanOnCard**","15490746":"**Correlation among pairs of continuous variables**"}}