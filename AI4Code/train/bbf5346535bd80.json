{"cell_type":{"94fc750e":"code","c0d8e560":"code","04d308c7":"code","a9201ab7":"code","59a69c39":"code","ed011c2d":"code","9b0452b8":"code","06194548":"code","bcefe6b8":"code","31f1eb4f":"code","bff4a30f":"code","84e0af77":"code","32c9f765":"code","418721b7":"code","b1d21c47":"code","d4de1997":"code","be9b278f":"code","4b049a6f":"code","ddb661a3":"code","65f41cb0":"code","ba825a4d":"code","aa71b6f0":"code","29ff3f1c":"code","447f34e2":"code","ff8d3e32":"code","c858c690":"code","92a2da27":"code","3f8ae9b7":"code","d601136c":"code","4b08e5ee":"code","0bc27bbc":"code","a7bf00bc":"code","8052d35c":"code","bc1c0f42":"code","ad2ba12b":"code","53f338b6":"code","1c1e14da":"code","a829983d":"code","878b5386":"code","6e2259ff":"code","f9efbdf7":"code","473562be":"code","457ffe0b":"code","876c3f74":"code","69e0d3d6":"code","03eb4e94":"code","b0602c86":"code","db513757":"code","3da04a10":"code","e8f9ba97":"code","75025f91":"code","fb86d133":"code","1455dd65":"code","dc257410":"code","17ab4439":"code","2cb301b0":"code","a1a1ae04":"markdown","d8aa7399":"markdown","561904e6":"markdown","aa6e0663":"markdown","7d333469":"markdown","c18a634e":"markdown","923e5b69":"markdown","bbe03a99":"markdown","9f87b556":"markdown","bfbbb20a":"markdown","64d8781b":"markdown","859c2bbd":"markdown","f030903f":"markdown","77bb9a00":"markdown","91fca941":"markdown","5ec94dde":"markdown","8b0e1b5f":"markdown","375886ea":"markdown","d774a450":"markdown","69d86558":"markdown"},"source":{"94fc750e":"import pandas as pd\nimport numpy as np\nimport tqdm\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.inspection import permutation_importance\n\nimport lightgbm as lgb\nimport catboost as cb\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport shap\n\nnp.warnings.filterwarnings('ignore')","c0d8e560":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'","04d308c7":"!pip freeze > requirements.txt","a9201ab7":"merged_train_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_data.csv')\nmerged_test_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_test_data.csv')","59a69c39":"targets = merged_train_data.flag.values\n\ncv = KFold(n_splits=5, random_state=100, shuffle=True)","ed011c2d":"num_model = 1","9b0452b8":"!mkdir model1","06194548":"features = [x for x in merged_train_data.columns if x not in ['app_id', 'flag']]","bcefe6b8":"%%time\n\noof = np.zeros(len(merged_train_data))\ntrain_preds = np.zeros(len(merged_train_data))\n\nmodels = []\n\ntree_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_depth': 3,\n    'reg_lambda': 1,\n    'num_leaves': 64,\n    'n_jobs': 5,\n    'n_estimators': 1000\n}\n\nfor fold_, (train_idx, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'\u041d\u0430\u0447\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_}.')\n    lgb_model = lgb.LGBMClassifier(**tree_params)\n    train, val = merged_train_data.iloc[train_idx], merged_train_data.iloc[val_idx]\n    \n    lgb_model.fit(train[features], train.flag.values, eval_set=[(val[features], val.flag.values)],\n              early_stopping_rounds=50, verbose=50)\n\n    oof[val_idx] = lgb_model.predict_proba(val[features])[:, 1]\n    train_preds[train_idx] += lgb_model.predict_proba(train[features])[:, 1] \/ (cv.n_splits-1)\n    models.append(lgb_model)\n    \n    file_name_model = f'model{num_model}\/model{num_model}_{fold_}.txt'\n    lgb_model.booster_.save_model(PATH_TO_WORKDIR+file_name_model)\n    print(f'\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_} \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u043e\u0441\u044c.')","31f1eb4f":"file_name_pickle = PATH_TO_WORKDIR + f'model{num_model}\/feats_model{num_model}.pickle'\nwith open(file_name_pickle, 'wb') as f:\n    pickle.dump(features, f)","bff4a30f":"f'Train roc-auc model{num_model}', roc_auc_score(targets, train_preds)","84e0af77":"f'CV roc-auc model{num_model}', roc_auc_score(targets, oof)","32c9f765":"score = np.zeros(len(merged_test_data))\n\nfor model in tqdm.tqdm_notebook(models):\n    score += model.predict_proba(merged_test_data[features])[:, 1] \/ len(models)\n    \nsubmission = pd.DataFrame({\n    'app_id' : merged_test_data.app_id.values,\n    'score': score\n}) \n\nsubmission.to_csv(f'sub_model{num_model}.csv', index=None)  # ~ 0.737 roc-auc \u043d\u0430 public test","418721b7":"importances = np.zeros(len(features))\nfor model in models:\n    importances += model.feature_importances_ \/ len(models)","b1d21c47":"def plot_feature_importance(feature_names, feature_scores, top_feats=20, title='Importance', x_label='Importance', \n                            y_label='Features'):\n    tuples = [(name, round(score, 3)) for name, score in zip(feature_names, feature_scores)]\n    tuples = sorted(tuples, key=lambda x: x[1])[-top_feats:]\n    \n    labels, values = zip(*tuples)\n    _, ax = plt.subplots(1, 1, figsize=(10, 8))\n    ylocs = np.arange(len(values))\n    \n    ax.barh(ylocs, values, align='center', height=0.4)\n    for x, y in zip(values, ylocs):\n        ax.text(x + 1, y, x, va='center')\n        \n    ax.set_yticks(ylocs)\n    ax.set_yticklabels(labels)\n    xlim = (0, max(values) * 1.1)\n    ax.set_xlim(xlim)\n    ylim = (-1, len(values))\n    ax.set_ylim(ylim)\n    \n    ax.set_title(title)\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.grid(True)","d4de1997":"plot_feature_importance(features, importances, top_feats=20, title='LightGBM feature importance', \n                        x_label='Importance')","be9b278f":"tuples = [(name, round(score, 3)) for name, score in zip(features, importances)]\ntuples = sorted(tuples, key=lambda x: x[1])\n\ntop_selected_feats = [x[0] for x in tuples if x[1] >= np.median(importances)]\nprint(f'\u041a\u043e\u043b-\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 Feature importance (median):= {len(top_selected_feats)}')","4b049a6f":"num_model = 2","ddb661a3":"!mkdir model2","65f41cb0":"%%time\n\noof = np.zeros(len(merged_train_data))\ntrain_preds = np.zeros(len(merged_train_data))\n\nnew_models = []\n\ntree_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_depth': 3,\n    'reg_lambda': 1,\n    'num_leaves': 64,\n    'n_jobs': 5,\n    'n_estimators': 1000\n}\n\n\nfor fold_, (train_idx, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'\u041d\u0430\u0447\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_}.')\n    lgb_model = lgb.LGBMClassifier(**tree_params)\n    train, val = merged_train_data.iloc[train_idx], merged_train_data.iloc[val_idx]\n    \n    lgb_model.fit(train[top_selected_feats], train.flag.values, eval_set=[(val[top_selected_feats], val.flag.values)],\n              early_stopping_rounds=50, verbose=50)\n\n    oof[val_idx] = lgb_model.predict_proba(val[top_selected_feats])[:, 1]\n    train_preds[train_idx] += lgb_model.predict_proba(train[top_selected_feats])[:, 1] \/ (cv.n_splits-1)\n    new_models.append(lgb_model)\n    \n    file_name_model = f'model{num_model}\/model{num_model}_{fold_}.txt'\n    lgb_model.booster_.save_model(PATH_TO_WORKDIR+file_name_model)\n    print(f'\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0444\u043e\u043b\u0434\u0435 \u043d\u043e\u043c\u0435\u0440:= {fold_} \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u043e\u0441\u044c.')","ba825a4d":"file_name_pickle = PATH_TO_WORKDIR + f'model{num_model}\/feats_model{num_model}.pickle'\nwith open(file_name_pickle, 'wb') as f:\n    pickle.dump(top_selected_feats, f)","aa71b6f0":"f'Train roc-auc model{num_model}', roc_auc_score(targets, train_preds)","29ff3f1c":"f'CV roc-auc model{num_model}', roc_auc_score(targets, oof)","447f34e2":"score = np.zeros(len(merged_test_data))\n\nfor model in tqdm.tqdm_notebook(new_models):\n    score += model.predict_proba(merged_test_data[top_selected_feats])[:, 1] \/ len(models)\n    \nsubmission = pd.DataFrame({\n    'app_id' : merged_test_data.app_id.values,\n    'score': score\n}) \n\nsubmission.to_csv(f'sub_model{num_model}.csv', index=None)  # ~ 0.7346 \u043d\u0430 public test","ff8d3e32":"%%time\npermut_importance = np.zeros(len(features))\n\nfor fold_, (_, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'\u041d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u043e\u043b\u0434\u0430:= {fold_}')\n    val = merged_train_data.iloc[val_idx]\n    importances_report = permutation_importance(models[fold_-1], val[features], val.flag.values, n_repeats=3, \n                                     n_jobs=3, scoring='roc_auc')\n    permut_importance += importances_report.importances_mean \/ cv.n_splits\n    print(f'\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u043e\u043b\u0434\u0430:= {fold_} \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430.')","c858c690":"plot_feature_importance(features, permut_importance*10000, top_feats=20, title='Permutation importance', \n                        x_label='Importance')","92a2da27":"tuples = [(name, round(score, 3)) for name, score in zip(features, permut_importance)]\ntuples = sorted(tuples, key=lambda x: x[1])\n\ntop_selected_feats = [x[0] for x in tuples if x[1] > 0]\nprint(f'\u041a\u043e\u043b-\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 Permutation importance:= {len(top_selected_feats)}')","3f8ae9b7":"num_model = 3","d601136c":"!mkdir model3","4b08e5ee":"%%time\n\noof = np.zeros(len(merged_train_data))\ntrain_preds = np.zeros(len(merged_train_data))\n\nnew_models = []\n\ntree_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_depth': 3,\n    'reg_lambda': 1,\n    'num_leaves': 64,\n    'n_jobs': 5,\n    'n_estimators': 1000\n}\n\n\nfor fold_, (train_idx, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'Training with fold {fold_} started.')\n    lgb_model = lgb.LGBMClassifier(**tree_params)\n    train, val = merged_train_data.iloc[train_idx], merged_train_data.iloc[val_idx]\n    \n    lgb_model.fit(train[top_selected_feats], train.flag.values, eval_set=[(val[top_selected_feats], val.flag.values)],\n              early_stopping_rounds=50, verbose=50)\n\n    \n    oof[val_idx] = lgb_model.predict_proba(val[top_selected_feats])[:, 1]\n    train_preds[train_idx] += lgb_model.predict_proba(train[top_selected_feats])[:, 1] \/ (cv.n_splits-1)\n    new_models.append(lgb_model)\n    \n    file_name_model = f'model{num_model}\/model{num_model}_{fold_}.txt'\n    lgb_model.booster_.save_model(PATH_TO_WORKDIR+file_name_model)\n    print(f'Training with fold {fold_} completed.')","0bc27bbc":"file_name_pickle = PATH_TO_WORKDIR + f'model{num_model}\/feats_model{num_model}.pickle'\nwith open(file_name_pickle, 'wb') as f:\n    pickle.dump(top_selected_feats, f)","a7bf00bc":"f'Train roc-auc model{num_model}', roc_auc_score(targets, train_preds)","8052d35c":"f'CV roc-auc model{num_model}', roc_auc_score(targets, oof)","bc1c0f42":"score = np.zeros(len(merged_test_data))\n\nfor model in tqdm.tqdm_notebook(new_models):\n    score += model.predict_proba(merged_test_data[top_selected_feats])[:, 1] \/ len(models)\n    \nsubmission = pd.DataFrame({\n    'app_id' : merged_test_data.app_id.values,\n    'score': score\n}) \n\nsubmission.to_csv(f'sub_model{num_model}.csv', index=None)  # ~ 0.736 roc-auc \u043d\u0430 public test","ad2ba12b":"%%time\ntrain, val = train_test_split(merged_train_data, random_state=100, test_size=0.1)\n\ntree_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_depth': 3,\n    'reg_lambda': 1,\n    'num_leaves': 64,\n    'seed': 100,\n    'n_jobs': 5,\n    'n_estimators': 1000\n}\n\nlgb_model = lgb.LGBMClassifier(**tree_params)\nlgb_model.fit(train[features], train.flag.values, eval_set=[(val[features], val.flag.values)],\n              early_stopping_rounds=50, verbose=-1)","53f338b6":"explainer = shap.TreeExplainer(lgb_model)","1c1e14da":"shap_values = explainer.shap_values(val[features])","a829983d":"shap.summary_plot(shap_values[1], val[features])","878b5386":"def get_feature_importances(frame, shuffle=False, seed=100, importance_type='gain'):\n    # \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e target \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n    y = frame.flag.values.copy()\n    if shuffle:\n        # \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n        y = frame.flag.copy().sample(frac=1.0).values\n    \n    # \u043e\u0431\u0443\u0447\u0438\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0438\u0437 LightGBM ( \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c \u0432 sklearn )\n    # \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043f\u043e\u0434 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430\n    tree_params = {\n    'objective': 'binary',\n    'boosting_type': 'rf',\n    'metric': 'auc',\n    'subsample_freq': np.random.choice([5, 10, 15, 20]),\n    'subsample': np.random.choice([0.6, 0.8, 0.9]),\n    'max_depth': np.random.choice([7, 8, 10]),\n    'num_leaves': 64,\n    'seed': seed,\n    'n_jobs': 5,\n    'n_estimators': 100,\n    'importance_type': importance_type\n    }\n    \n    lgb_model = lgb.LGBMClassifier(**tree_params)\n    lgb_model.fit(frame[features], y)\n    \n    importance = pd.DataFrame({\n        'feature': features,\n        f'importance_{importance_type}': lgb_model.feature_importances_,\n        'score': roc_auc_score(y, lgb_model.predict_proba(frame[features])[:, 1])\n    })\n    \n    return importance","6e2259ff":"real_importance = get_feature_importances(train, shuffle=False, seed=100, importance_type='split')\nreal_importance.head()","f9efbdf7":"def calculate_null_importance(frame, num_runs=80, importance_type='gain'):\n    null_importance = pd.DataFrame()\n    for i in tqdm.tqdm_notebook(range(num_runs)):\n        # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n        importance = get_feature_importances(frame, shuffle=True, seed=None, importance_type=importance_type)\n        importance['run'] = i + 1 \n        null_importance = pd.concat([null_importance, importance], axis=0)\n    return null_importance","473562be":"%%time\nnull_importance = calculate_null_importance(train, num_runs=30, importance_type='split')","457ffe0b":"def plot_distribution(real_importance, null_importance, feature_name, importance_name='gain'):\n    fig, ax = plt.subplots(figsize=(8, 6))\n    a = ax.hist(null_importance.loc[null_importance['feature'] == feature_name, f'importance_{importance_name}'].values, \n                label='Null importances')\n    \n    ax.vlines(x=real_importance.loc[real_importance['feature'] == feature_name, f'importance_{importance_name}'].mean(), \n               ymin=0, ymax=np.max(a[0]), color='r',linewidth=10, label='Real Target')\n    ax.legend()\n    ax.set_title(f'Split Importance of {feature_name}', fontweight='bold')\n    plt.xlabel(f'Null Importance ({importance_name}) Distribution for {feature_name}')","876c3f74":"plot_distribution(real_importance, null_importance, feature_name='product', importance_name='split')","69e0d3d6":"plot_distribution(real_importance, null_importance, feature_name='hour_diff_median', importance_name='split')","03eb4e94":"plot_distribution(real_importance, null_importance, feature_name='amnt_sum', importance_name='split')","b0602c86":"scores = []\nimportance_name = 'split'\n\nfor feature in features:\n    hist_null_importance = null_importance.loc[null_importance['feature'] == feature, f'importance_{importance_name}'].values\n    actual_importance = real_importance.loc[real_importance['feature'] == feature, f'importance_{importance_name}'].mean()\n    score = (1e-10 + actual_importance) \/ (1 + np.mean(hist_null_importance))        \n    scores.append(round(score, 3))","db513757":"plot_feature_importance(features, scores, top_feats=20, title='target permutation importance', \n                        x_label='Importance')","3da04a10":"tuples = [(name, round(score, 3)) for name, score in zip(features, scores)]\ntuples = sorted(tuples, key=lambda x: x[1])\n\ntop_selected_feats = [x[0] for x in tuples if x[1] > 0]\nprint(f'\u041a\u043e\u043b-\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0442\u0431\u043e\u0440\u0430:= {len(top_selected_feats)}')","e8f9ba97":"num_model = 4","75025f91":"!mkdir model4","fb86d133":"%%time\n\noof = np.zeros(len(merged_train_data))\ntrain_preds = np.zeros(len(merged_train_data))\n\nnew_models = []\n\ntree_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_depth': 3,\n    'reg_lambda': 1,\n    'num_leaves': 64,\n    'n_jobs': 5,\n    'n_estimators': 1000\n}\n\n\nfor fold_, (train_idx, val_idx) in enumerate(cv.split(merged_train_data, targets), 1):\n    print(f'Training with fold {fold_} started.')\n    lgb_model = lgb.LGBMClassifier(**tree_params)\n    train, val = merged_train_data.iloc[train_idx], merged_train_data.iloc[val_idx]\n    \n    lgb_model.fit(train[top_selected_feats], train.flag.values, eval_set=[(val[top_selected_feats], val.flag.values)],\n              early_stopping_rounds=50, verbose=50)\n\n    \n    oof[val_idx] = lgb_model.predict_proba(val[top_selected_feats])[:, 1]\n    train_preds[train_idx] += lgb_model.predict_proba(train[top_selected_feats])[:, 1] \/ (cv.n_splits-1)\n    new_models.append(lgb_model)\n    \n    file_name_model = f'model{num_model}\/model{num_model}_{fold_}.txt'\n    lgb_model.booster_.save_model(PATH_TO_WORKDIR+file_name_model)\n    print(f'Training with fold {fold_} completed.')","1455dd65":"file_name_pickle = PATH_TO_WORKDIR + f'model{num_model}\/feats_model{num_model}.pickle'\nwith open(file_name_pickle, 'wb') as f:\n    pickle.dump(top_selected_feats, f)","dc257410":"f'Train roc-auc model{num_model}', roc_auc_score(targets, train_preds)","17ab4439":"f'CV roc-auc model{num_model}', roc_auc_score(targets, oof)","2cb301b0":"score = np.zeros(len(merged_test_data))\n\nfor model in tqdm.tqdm_notebook(new_models):\n    score += model.predict_proba(merged_test_data[top_selected_feats])[:, 1] \/ len(models)\n    \nsubmission = pd.DataFrame({\n    'app_id' : merged_test_data.app_id.values,\n    'score': score\n})\nsubmission.to_csv(f'sub_model{num_model}.csv', index=None)  # ~ 0.733 \u043d\u0430 public test","a1a1ae04":"# 10. Target Permutation\n---\n\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u043c target permutation \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u0430\u043b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0430 \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u0441 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u044b \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","d8aa7399":"\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u043c\u0435\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c \u0438 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. \u0412 \u0438\u0434\u0435\u0430\u043b\u0435, \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0434\u0430\u043b\u044c\u0448\u0435 \u043e\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","561904e6":"# 8. LightGBM + CV (3)\n---\n## 8.1. \u0422\u0440\u0435\u0442\u044c\u044f \u043c\u043e\u0434\u0435\u043b\u044c (model3)\n(\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u0431\u043e\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Features importance(median) \u0438 Permutation importance)","aa6e0663":"# 5. Feature Importance\n---\n\u041e\u0446\u0435\u043d\u043a\u0430 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u0432\u0430\u0436\u043d\u044b\u0439 \u0448\u0430\u0433 \u0432 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. LightGBM \u0438\u043c\u0435\u0435\u0442 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u043b\u0438\u0442 \u0432 \u0432\u0435\u0440\u0448\u0438\u043d\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (split) \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u043e\u0439 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u0430\u0435\u0442 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 (gain). \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0417\u0430\u0442\u0435\u043c \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u0442\u043e\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430 \u043d\u0438\u0445 \u043d\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.","7d333469":"## 1.2. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","c18a634e":"## 4.2. Submission (model1) ","923e5b69":"### \u0414\u0438\u043f\u043b\u043e\u043c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430\n\n#### \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\n\u041a\u0435\u0440\u043d\u0435\u043b 3 \u0438\u0437 5 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 ML (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 21.04.2021)\n---\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n## 1.1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","bbe03a99":"\u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 Catboost \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043a\u0435\u0440\u043d\u0435\u043b\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0432\u043e\u0442\u0443 \u0442\u0430\u043a \u043a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043d\u0430 GPU\n\n**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (\u043c\u0435\u0442\u0440\u0438\u043a\u0430 AUC ROC):**  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Model \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u0447\u0438\u0441\u043b\u043e \u043f\u0440\u0438\u0437\u043d.\u00a0|\u00a0\u00a0\u00a0\u00a0Train\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a0\u00a0CV\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0Public Test\u00a0\u00a0\u00a0   \n---  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lgb+cv(5)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0127\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.801\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.77\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.737\u00a0\u00a0\u00a0\u00a0   \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lgb+cv(5)+split_importance\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a064\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.795\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.767\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.735  \nlgb+cv(5)+permutation_importance\u00a0|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a057\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.796\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.768\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.736   \n\u00a0\u00a0\u00a0\u00a0lgb+cv(5)+target_permutation\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a060\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.796\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.766\u00a0\u00a0\u00a0\u00a0|\u00a0\u00a0\u00a0\u00a00.733 \n","9f87b556":"# 6. LightGBM + CV (2)\n---\n## 6.1. \u0412\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (model2)\n(\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0440\u0430\u0441\u0447\u0435\u0442\u043d\u0430\u044f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b)","bfbbb20a":"\u0413\u0440\u0430\u0444\u0438\u043a \u0432\u044b\u0448\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\n- \u043a\u0430\u0436\u0434\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u044d\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\n- \u0446\u0432\u0435\u0442 - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u0447\u0435\u043c \u043a\u0440\u0430\u0441\u043d\u0435\u0435 - \u0442\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0432\u044b\u0448\u0435, \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442\n- \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0438\u0447\u0438 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u0440\u043e\u0441\u0442\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u0438\u043b\u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442.\n\n***\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0435\u043d\u0434\u044b:***\n\n1. \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'hour_diff_median' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u0442\u043e \u0435\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0447\u0430\u0441\u0442\u043e - \u0430 \u044d\u0442\u043e \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u044b\u0439\u0434\u0435\u0442 \u0432 \u0434\u0435\u0444\u043e\u043b\u0442, \u0447\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0447\u0443\u0432\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0435\u0431\u044f \u0431\u043e\u043b\u0435\u0435 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e \u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c \u043f\u043b\u0430\u043d\u0435 \u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0440\u0430\u0437\u0443 \u043d\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0438\u0445 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438)\n2. \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'hour_diff_max' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u0442\u043e \u0435\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0433\u043e \u043d\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u0430\u0440\u0442\u043e\u0439 \u044d\u0442\u043e \u043c\u043e\u0433\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0442\u0438 \u0432 \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u043e\u0432\u0435\u0440\u0434\u0440\u0430\u0444\u0442\u0430 \u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0431\u0430\u043d\u043a\u0435)\n3. \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'count_mcc_category_9' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u044b\u043b\u0438 \u043e\u0431\u0435\u0437\u043b\u0438\u0447\u0435\u043d\u044b, \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f '\u041a\u0430\u0444\u0435,\u0431\u0430\u0440\u044b \u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b' \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0438\u0441\u043f\u044b\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u044e\u0442 \u0438\u0445 \u043f\u043e\u0441\u0435\u0449\u0430\u0442\u044c \u0438\u043b\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u044d\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0435\u0436\u0435.)\n4. \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'count_operation_type_5' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u0438\u0437-\u0437\u0430 \u043e\u0431\u0435\u0437\u043b\u0438\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0430\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0435\u0442, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0440\u0435\u0447\u044c \u043e\u0431 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0432\u043c\u0435\u0441\u0442\u043e \u0433\u0430\u0448\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430. \u0418 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0442\u0430\u043a \u0447\u0442\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u0435\u0442)\n5. \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'product' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0443 \u0447\u0442\u043e 0 - \u043a\u0440\u0435\u0434\u0438\u0442 \u0431\u0435\u0437\u043d\u0430\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430 \u043a\u0430\u0440\u0442\u0443, 1 - \u044d\u0442\u043e \u043a\u0440\u0435\u0434\u0438\u0442 \u043d\u0430\u043b\u0438\u0447\u043d\u044b\u043c\u0438, 2 - \u043a\u0440\u0435\u0434\u0438\u0442 \u043d\u0430 \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u043f\u043e\u043a\u0443\u043f\u043a\u0438, 3 - \u043a\u0440\u0435\u0434\u0438\u0442 \u043d\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0443 \u0430\u0432\u0442\u043e, 4 - \u0438\u043f\u043e\u0442\u0435\u043a\u0430. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0438-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e 80% \u0432\u0441\u0435\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b 0,1. \u0410 \u0441\u0430\u043c\u044b\u0439 \u0440\u0435\u0434\u043a\u0438\u0439 \u044d\u0442\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442 4. \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 2-2,5% \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u043c 0,1,3. \u041f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443 2 - 7%. \u0410 \u043f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443 4 - 3%. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u043d\u0430 \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c \u0438\u043f\u043e\u0442\u0435\u043a\u0430 \u0438 \u043e\u043d\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u0430\u0432\u0442\u043e \u0434\u043b\u044f \u043f\u043e\u0433\u0430\u0448\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u0430.)\n6. \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'days_before_max' \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0440\u043e\u0441\u0442\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u043d\u0438\u0437\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430 \u043a\u043e\u043b-\u0432\u0430 \u0434\u043d\u0435\u0439 \u043f\u0435\u0440\u0435\u0434 \u0432\u0437\u044f\u0442\u0438\u0435\u043c \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0432 \u0431\u0430\u043d\u043a\u0435. \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043a\u0440\u044b\u043b \u043a\u0430\u0440\u0442\u0443 \u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043a\u0440\u0435\u0434\u0438\u0442. \u042d\u0442\u043e \u043b\u0438\u0431\u043e \u043c\u043e\u0448\u0435\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0445\u0435\u043c\u0430, \u043d\u043e \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043c\u044b \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442 \u0438\u0431\u043e \u043e\u043d \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0439. \u0410 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u044d\u0442\u043e \u0441\u043b\u0443\u0447\u0430\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0431\u0430\u043d\u043a\u0435, \u043a\u043e\u0433\u0434\u0430 \u0431\u0430\u043d\u043a \u043f\u043e \u0441\u043e\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043b\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u0443\u044e \u043b\u0438\u043d\u0438\u044e. \u0427\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c \u043d\u0435\u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.)","64d8781b":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u0430. \u0422\u043e \u0435\u0441\u0442\u044c \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430 \u0448\u0443\u043c\u0435.","859c2bbd":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u043d\u043e\u0432\u044b\u0439 \u0441\u043a\u043e\u0440, \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0438\u043c\u0435\u0435\u043c. \u041e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 - \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0445 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. ","f030903f":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043f\u043b\u0438\u0442\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435 random forest) \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","77bb9a00":"# 3. \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\n---\n\u0412\u0430\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f. ","91fca941":"# 11. LightGBM + CV (4)\n---\n## 11.1. \u0427\u0435\u0442\u0432\u0435\u0440\u0442\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (model4)\n(\u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u0431\u043e\u0440\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 Features importance(median), Permutation importance \u0438 Target importance)","5ec94dde":"# 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n---\n\u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u043b\u0430\u0441\u044c \u0432 [\u043f\u0435\u0440\u0432\u043e\u043c \u043a\u0435\u0440\u043d\u0435\u043b\u0435](https:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-diplom-1-ml-sokolov)","8b0e1b5f":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043b\u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0443\u0434\u0430\u043b\u044f\u044f \u0441\u0430\u043c\u044b\u0435 \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f) `permutation importance`. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u0435\u0435 \u0441\u043a\u043b\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043a \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e. \u0410 \u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 - \u043c\u043e\u0436\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0435 \u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u0446\u0435\u043b\u044f\u0445, \u0447\u0442\u043e \u0434\u043b\u044f \u043c\u0435\u043d\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0446\u0435\u043b\u044c \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0435\u043f\u043b\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 heroku, \u0430 \u0435\u0433\u043e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0441\u043a\u0440\u043e\u043c\u043d\u044b\u0435. ","375886ea":"# 4. LightGBM + CV (1)\n---\n## 4.1. \u041f\u0435\u0440\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (model1)","d774a450":"# 7. Permutation importance\n---\n\u042d\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u043b\u044e\u0431\u043e\u0439 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0441\u043a\u043e\u0440\u0435 (\u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - roc_auc) \u043f\u0440\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0438\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437.","69d86558":"# 9. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (shap)\n---\n\u0412 \u0437\u0430\u0434\u0430\u0447\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u043a\u043e\u0440\u0440\u0438\u043d\u0433\u0430 \u0432\u0430\u0436\u043d\u0430 \u0438\u043d\u0442\u0435\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c  \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 shap. \u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 summary plot, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0449\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443 \u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0438 \u0442\u043e\u0433\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0443\u0440\u0443\u044f \u0432\u0441\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0441\u0440\u0430\u0437\u0443. \u042f \u043d\u0435 \u0441\u043c\u043e\u0433 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b shap \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 5-\u0442\u0438 \u0444\u043e\u043b\u0434\u0430\u0445. \u041d\u0438\u0436\u0435 \u044f \u0437\u0430\u043d\u043e\u0432\u043e \u043e\u0431\u0443\u0447\u0430\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0441\u043f\u043b\u0438\u0442\u0430 90:10 \u0431\u0435\u0437 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0444\u043e\u043b\u0434\u044b, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0444\u0438\u0447 \u043d\u0430 \u0442\u0430\u0440\u0433\u0435\u0442 \u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c."}}