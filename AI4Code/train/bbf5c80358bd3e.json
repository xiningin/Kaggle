{"cell_type":{"f7aa7adb":"code","dae8b0e6":"code","4dcdc8cf":"code","7174ef9f":"code","99079297":"code","25f4d633":"code","49f54d08":"code","4b3bdeb5":"code","3f15f1f4":"code","4c081ffc":"code","19cf02fc":"code","e70bf20d":"code","0aa44efa":"code","fff56a41":"code","bcc8c08d":"code","28f39462":"code","5d0ebf9c":"code","1a285bbf":"code","a41b010d":"code","6df2d1ff":"code","fb378f7e":"code","16736f58":"code","8a12d36c":"code","f6260706":"code","d0b1c03f":"code","eef0c636":"code","8459f909":"code","f8072e57":"code","625153ae":"code","80dbcf5b":"code","e0f5e7f7":"code","5a4796c9":"code","5effa3b3":"code","06212fa5":"code","dca1e1dd":"code","eab9dc01":"code","32a283c9":"code","810bbf9d":"code","0f847981":"code","cebc09c6":"code","69a7c2a8":"code","215e1dec":"markdown","95fdfe20":"markdown","dfc7dfa0":"markdown","4475edf4":"markdown","2aa4404d":"markdown","e0d9089f":"markdown","2c964689":"markdown","45fe3f02":"markdown","7f7cde50":"markdown","f99dd4a5":"markdown","7dc1446f":"markdown","624d59f7":"markdown","576485f1":"markdown"},"source":{"f7aa7adb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","dae8b0e6":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndatas = [train, test]","4dcdc8cf":"for data in datas:\n    print(data.isnull().sum())","7174ef9f":"train['Survived'].value_counts().plot.bar()","99079297":"sns.countplot('Sex', hue='Survived', data=train)","25f4d633":"sns.countplot('Pclass', hue='Survived', data=train)","49f54d08":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=train)","4b3bdeb5":"f, ax = plt.subplots(1,2,figsize=(12,6))\nsns.violinplot('Pclass', 'Age', hue='Survived', data=train, split=True, ax=ax[0])\nax[0].set_yticks(range(0,90,10))\n\nsns.violinplot('Sex', 'Age', hue='Survived', data=train, split=True, ax=ax[1])\nax[1].set_yticks(range(0, 90, 10))","3f15f1f4":"sns.factorplot('Embarked', 'Survived', data=train)","4c081ffc":"sns.factorplot('Embarked', 'Survived', hue='Sex', col='Pclass', data=train)","19cf02fc":"sns.barplot('SibSp', 'Survived', data=train)","e70bf20d":"sns.barplot('Parch', 'Survived', data=train)","0aa44efa":"del train, test, datas","fff56a41":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\npassenger = test['PassengerId']\ndatas = [train, test]","bcc8c08d":"for data in datas:\n    data['Initial'] = 0\n    data['Initial'] = data['Name'].str.extract('([A-Za-z]+)\\.')","28f39462":"train['Initial'].unique()","5d0ebf9c":"for data in datas:\n    data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Other'],inplace=True)","1a285bbf":"train.groupby('Initial')['Age'].mean()","a41b010d":"for data in datas:\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Mr'), 'Age'] = 33\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Master'), 'Age'] = 5\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Mrs'), 'Age'] = 36\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Miss'), 'Age'] = 22\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Other'), 'Age'] = 46","6df2d1ff":"print(datas[0]['Age'].isnull().sum())\nprint(datas[1]['Age'].isnull().sum())\nprint(datas[0]['Initial'].unique())\nprint(datas[1]['Initial'].unique())","fb378f7e":"for data in datas:\n    data['Embarked'].fillna('S', inplace=True)","16736f58":"print(datas[0]['Embarked'].isnull().sum())\nprint(datas[1]['Embarked'].isnull().sum())","8a12d36c":"for data in datas:\n    data['Fare'] = data[\"Fare\"].map(lambda i: np.log(i) if i > 0 else 0)","f6260706":"for data in datas:\n    data['Age_band']=0\n    data.loc[data['Age']<=16,'Age_band']=0\n    data.loc[(data['Age']>16)&(data['Age']<=32),'Age_band']=1\n    data.loc[(data['Age']>32)&(data['Age']<=48),'Age_band']=2\n    data.loc[(data['Age']>48)&(data['Age']<=64),'Age_band']=3\n    data.loc[data['Age']>64,'Age_band']=4","d0b1c03f":"for data in datas:\n    data['Family_Size']=0\n    data['Family_Size']=data['Parch']+data['SibSp']\n    data['Alone']=0\n    data.loc[data.Family_Size==0,'Alone']=1","eef0c636":"for data in datas:\n    data['Sex'].replace(['male','female'],[0,1],inplace=True)\n    data['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)\n    data['Initial'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)","8459f909":"for data in datas:\n    data.drop(['Name','Age','Ticket','Cabin','PassengerId'],axis=1,inplace=True)","f8072e57":"train.columns","625153ae":"test.columns","80dbcf5b":"train.head()","e0f5e7f7":"X=train[train.columns[1:]]\nY=train['Survived']","5a4796c9":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n\nkfold = StratifiedKFold(n_splits=10)","5effa3b3":"decisionTree = DecisionTreeClassifier()\n\nada = AdaBoostClassifier(decisionTree, random_state=0)\n\n## \uadf8\ub9ac\ub4dc \uc11c\uce58\nada_param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n              \"base_estimator__splitter\" :   [\"best\", \"random\"],\n              \"algorithm\" : [\"SAMME\",\"SAMME.R\"],\n              \"n_estimators\" :[1,2,3],\n              \"learning_rate\":  [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3,1.5]}\n\ndecision_grid = GridSearchCV(ada, param_grid = ada_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ndecision_grid.fit(X,Y)\n\nada_best = decision_grid.best_estimator_\ndecision_grid.best_score_","06212fa5":"rf = RandomForestClassifier()\n\n\n## \uadf8\ub9ac\ub4dc \uc11c\uce58\nrf_param_grid = {\"max_depth\": [None],\n              \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,300, 500, 700, 800, 900]\n              }\n\n\nrf_grid = GridSearchCV(rf,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\nrf_grid.fit(X,Y)\n\nrf_best = rf_grid.best_estimator_\nrf_grid.best_score_","dca1e1dd":"gradient_boost = GradientBoostingClassifier()\ngb_param_grid = {'loss' : [\"deviance\"],\n              'n_estimators' : [100,200,300],\n              'learning_rate': [0.1, 0.05, 0.01],\n              'max_depth': [4, 8],\n              'min_samples_leaf': [100,150,200],\n              'max_features': [0.3, 0.1] \n              }\n\ngb_grid = GridSearchCV(gradient_boost,param_grid = gb_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngb_grid.fit(X,Y)\n\ngb_best = gb_grid.best_estimator_\ngb_grid.best_score_","eab9dc01":"svc = SVC(probability=True)\nsvc_param_grid = {'kernel': ['rbf'], \n                  'gamma': [ 0.001, 0.01, 0.1, 0.5, 1],\n                  'C': [0.01, 0.1, 1, 10, 50, 100,200,300]}\n\nsvc_grid = GridSearchCV(svc,param_grid = svc_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\nsvc_grid.fit(X,Y)\n\nsvc_best = svc_grid.best_estimator_\nsvc_grid.best_score_","32a283c9":"vote = VotingClassifier(estimators=[('rf', rf_best), ('ada', ada_best),\n('svc', svc_best), ('gb',gb_best)], voting='soft', n_jobs=4)\n\nvote_result = vote.fit(X,Y)","810bbf9d":"pred = vote.predict(test)","0f847981":"#submission = pd.DataFrame({\n#    'PassengerId' : passenger,\n#    'Survived' : pred\n#})","cebc09c6":"#submission.head()","69a7c2a8":"#import os\n\n#if os.path.exists(\".\/submission.csv\"):os.remove(\".\/submission.csv\")\n#print(os.listdir(\".\/\"))\n#submission.to_csv('submission.csv', index=False)\n#print(os.listdir(\".\/\"))","215e1dec":"** we simply looked at the data **\n\nnow, lets fill the null data and analysis the data, make model","95fdfe20":"extract the initials of the name.\n\nbecause of fill the nan value in 'Age' column.","dfc7dfa0":"fill nan value in age focus on Initial","4475edf4":"most of Embarked is 'S'. so fill the nan value in 'Embakred' by 'S'","2aa4404d":"finally make model","e0d9089f":"there are more people who didnt survived\n\nthis competition is predict 'survived'. so, we focus on survived columns.\n\n\n1. Sex vs Survived\n\n2. Pclass vs Survived\n\n3. Age vs Survived\n\n4. SipSp vs Survived\n\n5. Parch vs Survived","2c964689":"age to categorical","45fe3f02":"drop unnecessary columns","7f7cde50":"make family_size","f99dd4a5":"![](https:\/\/ibb.co\/WB2YVX7)\n\n# My kernel doesn't have a detailed description of the nature.\n\nfor a detailed description, please refer to the kernel below!\n\nhttps:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic\n\n\nfirst, load basic lib","7dc1446f":"make categorical columns","624d59f7":"Fare size to log scale beacause is too large","576485f1":"there is null data in age, cabin, embarked"}}