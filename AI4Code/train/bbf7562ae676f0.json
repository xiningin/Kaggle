{"cell_type":{"489795a9":"code","2b21f376":"code","610b6cce":"code","f5d214f8":"code","5c764aa9":"code","9ab5edc9":"code","b97d8ef8":"code","ccace5dd":"code","bb81c065":"code","19e29608":"code","f72c34fc":"code","6513c700":"code","db3e1a6a":"code","053110b4":"code","bfb64cf5":"code","284c5672":"code","c7bd8b82":"code","3a6f5473":"code","7f768e79":"code","9bcbcaad":"code","ae589997":"code","07d77f2a":"code","2365b8fa":"code","3e21f88c":"code","bdb88c19":"code","644d42b1":"code","783317a4":"code","a3ed26a8":"code","fdb59dea":"code","1c053c4d":"code","e7c2dba6":"code","c4bfb43e":"markdown","9d4c68d1":"markdown","6de805c3":"markdown","503af8db":"markdown","1810cc8e":"markdown","f7631d67":"markdown","dd17cce9":"markdown","cfd034e9":"markdown","8813a135":"markdown"},"source":{"489795a9":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom time import time\nimport gc\ngc.enable()\n\n%matplotlib inline","2b21f376":"train_data = pd.read_csv('..\/input\/train_V2.csv')\ntest_data = pd.read_csv('..\/input\/test_V2.csv')","610b6cce":"train_data.drop(['Id', 'groupId', 'matchId'], axis=1, inplace=True)\ntrain_data.head()","f5d214f8":"train_data.columns","5c764aa9":"train_data[train_data['kills'] > 0].plot.scatter(x='winPlacePerc', y='kills', figsize=(12, 6))","9ab5edc9":"l = ['winPlacePerc', 'boosts', 'damageDealt', 'heals', 'kills', 'rideDistance', 'roadKills', 'walkDistance', 'weaponsAcquired']\nfigure, ax = plt.subplots(figsize=(12,8))\nf = train_data.loc[:, l].corr()\ng = sns.heatmap(f, annot=True, ax=ax)\ng.set_yticklabels(labels=l[::-1], rotation=0)\ng.set_xticklabels(labels=l[:], rotation=90)","b97d8ef8":"fig, axarr = plt.subplots(2, 2, figsize=(12, 8))\ntrain_data[train_data['walkDistance'] > 0].plot.scatter(x='winPlacePerc', y='walkDistance', ax=axarr[0][0])\ntrain_data[train_data['boosts'] > 0].plot.scatter(x='winPlacePerc', y='boosts', ax=axarr[0][1])\ntrain_data[train_data['weaponsAcquired'] > 0].plot.scatter(x='winPlacePerc', y='weaponsAcquired', ax=axarr[1][0])\ntrain_data[train_data['damageDealt'] > 0].plot.scatter(x='winPlacePerc', y='damageDealt', ax=axarr[1][1])\nplt.subplots_adjust(hspace=.3)\nsns.despine()","ccace5dd":"train_data.columns","bb81c065":"train_data[train_data['winPlacePerc'].isnull()]","19e29608":"train_data.drop(2744604, inplace=True)","f72c34fc":"figure1, axarr1 = plt.subplots(1, 3, figsize=(14, 6))\ntrain_data['swimDistance'].value_counts().sort_index()[1:20].plot.hist(ax=axarr1[0])\ntrain_data['rideDistance'].value_counts().sort_index()[1:20].plot.hist(ax=axarr1[1])\ntrain_data['walkDistance'].value_counts().sort_index()[1:20].plot.hist(ax=axarr1[2])\naxarr1[0].set_title('Swim dist')\naxarr1[1].set_title('Ride dist')\naxarr1[2].set_title('Walk dist')\nplt.subplots_adjust(hspace=.3)\nsns.despine()","6513c700":"train_data['totalDistance'] = train_data['swimDistance'] + train_data['rideDistance'] + train_data['walkDistance']\ntrain_data.drop(['swimDistance', 'rideDistance', 'walkDistance'], axis=1, inplace=True)","db3e1a6a":"train_data['matchType'].value_counts().index","053110b4":"# Creating cat codes of match type\n\ntrain_data['matchType'] = train_data['matchType'].astype('category')\ntrain_data['matchType'] = train_data['matchType'].cat.codes","bfb64cf5":"# Combining boosts and heals as health\n\ntrain_data['health'] = train_data['boosts'] + train_data['heals']\ntrain_data.drop(['boosts', 'heals'], axis=1, inplace=True)","284c5672":"train_data.head()","c7bd8b82":"figure2, axarr2 = plt.subplots(1, 3, figsize=(14, 6))\ntrain_data['headshotKills'].value_counts().sort_index().head(10)[1:].plot.bar(ax=axarr2[0])\ntrain_data['roadKills'].value_counts().sort_index().head(10)[1:].plot.bar(ax=axarr2[1])\ntrain_data['teamKills'].value_counts().sort_index().head(10)[1:].plot.bar(ax=axarr2[2])\naxarr2[0].set_title('Headshot kills')\naxarr2[1].set_title('Road kills')\naxarr2[2].set_title('Team kills')\nplt.subplots_adjust(hspace=.3)\nsns.despine()","3a6f5473":"train_data['kills'] += train_data['headshotKills'] + train_data['roadKills'] + train_data['teamKills']\ntrain_data.drop(['headshotKills', 'roadKills', 'teamKills'], axis=1, inplace=True)","7f768e79":"train_data.head()","9bcbcaad":"test_data.drop(['Id', 'groupId', 'matchId'], axis=1, inplace=True)","ae589997":"test_data['totalDistance'] = test_data['swimDistance'] + test_data['rideDistance'] + test_data['walkDistance']\ntest_data.drop(['swimDistance', 'rideDistance', 'walkDistance'], axis=1, inplace=True)","07d77f2a":"test_data['matchType'] = test_data['matchType'].astype('category')\ntest_data['matchType'] = test_data['matchType'].cat.codes","2365b8fa":"test_data['health'] = test_data['boosts'] + test_data['heals']\ntest_data.drop(['boosts', 'heals'], axis=1, inplace=True)","3e21f88c":"test_data['kills'] += test_data['headshotKills'] + test_data['roadKills'] + test_data['teamKills']\ntest_data.drop(['headshotKills', 'roadKills', 'teamKills'], axis=1, inplace=True)","bdb88c19":"train_data.columns","644d42b1":"# Mean\n\nfill_NaN = Imputer(missing_values=np.nan, strategy='mean', axis=1)\ntrain_data_mu = pd.DataFrame(fill_NaN.fit_transform(train_data))\ntrain_data_mu.columns = train_data.columns\ntrain_data_mu.index = train_data.index\ntrain_data_mu.head()","783317a4":"y = train_data_mu['winPlacePerc']\nX = train_data_mu.drop(['winPlacePerc'], axis=1)\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state=1511)","a3ed26a8":"gc.collect()","fdb59dea":"clf = RandomForestRegressor(n_estimators=60, min_samples_leaf=2, min_samples_split=3, max_features=0.5 ,n_jobs=-1)\nt0 = time()\nclf.fit(train_X, train_y)\nprint('Training time', round(time() - t0, 3), 's')\npred = clf.predict(val_X)\nprint('MAE validation', mean_absolute_error(val_y, pred))","1c053c4d":"# Mean\n\nfill_NaN_test = Imputer(missing_values=np.nan, strategy='mean', axis=1)\ntest_data_mu = pd.DataFrame(fill_NaN_test.fit_transform(test_data))\ntest_data_mu.columns = test_data.columns\ntest_data_mu.index = test_data.index\ntest_data_mu.head()","e7c2dba6":"test_data = pd.read_csv('..\/input\/test_V2.csv')\npred1 = clf.predict(test_data_mu)\ntest_data['winPlacePerc'] = pred1\nsubmission = test_data[['Id', 'winPlacePerc']]\nsubmission.to_csv('output.csv', index=False)","c4bfb43e":"**swimDistance** doesn't make much sense, to me, for predicting **winPlacePerc** as swimming distance would generally be much much less than ride distance or walking distance.\n\nBut as seen from the figure below, it is pretty useful or maybe that's where everyone's hiding!","9d4c68d1":"# Preparing data for ML model","6de805c3":"# Preprocessing train data","503af8db":"Kaggler ['averagemn'](https:\/\/www.kaggle.com\/donkeys) pointed out that there is one NaN value in **winPlacePerc**.","1810cc8e":"As seen below, most of the kill types are not that varied on their own. So we'll just add those to **kills**","f7631d67":"The **kills** feature seems pretty important, practically, for prediction **winPlacePerc** ","dd17cce9":"# Data preprocessing\n\nRemoving unnecessary features and filling in missing values","cfd034e9":"Seemingly, **walkDistance**, **boosts** and **weaponsAcquired** have the most correlation with **winPlacePerc**. ","8813a135":"As you can see in the above figure, there is a very moderate increase in the slope, which suggests that **kills** has an alright amount of correlation with **winPlacePerc** but also cannot have a high variance.\n\nLet's have a look at the **Heatmap** for more correlation analysis."}}