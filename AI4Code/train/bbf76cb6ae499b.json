{"cell_type":{"9d2920f3":"code","41996d8e":"code","de6ddd76":"code","beada24e":"code","8eed1deb":"code","2785b726":"code","ed00e61c":"code","7002762b":"code","343e01b1":"code","32e0206c":"code","fe32486e":"code","1e9aa04f":"code","9d58d2dc":"code","80e9d076":"code","87929d8b":"code","0be390ba":"code","32d00a51":"code","404c4ecf":"code","1767e807":"code","695084a2":"code","bbebb692":"code","71cb8099":"code","d514cb2e":"code","0cebd36c":"code","4a7cbff5":"markdown","571493da":"markdown","9992793a":"markdown","0ef38447":"markdown","7d17ccfe":"markdown","3e40489f":"markdown","1f19dce1":"markdown","e4b6f376":"markdown","dcf41ea1":"markdown","55040177":"markdown","02dda8f3":"markdown","05eb8bc7":"markdown","36c4dcec":"markdown","c406b302":"markdown","1b20e289":"markdown","5ed8e068":"markdown","71ec8602":"markdown","87d1efaf":"markdown","255ab0b7":"markdown","1890f85a":"markdown","d954cf34":"markdown","b5c3743f":"markdown","4ea16a32":"markdown","0eb9e9ec":"markdown","adac15a3":"markdown","7349c1e3":"markdown","24d08f94":"markdown","61e426cf":"markdown","401f032b":"markdown"},"source":{"9d2920f3":"import numpy as np\nimport pandas as pd\nfrom pandas_profiling import ProfileReport\nfrom numpy import percentile\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import RidgeCV","41996d8e":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'","de6ddd76":"# pandas couldn't identify the type of the following two columns\nrecs_df = pd.read_csv(\"..\/input\/residential-energy-consumption-survey\/recs2009_public.csv\",dtype={\"NOCRCASH\":\"object\",\"NKRGALNC\":\"object\"})","beada24e":"# profile = ProfileReport(recs_df, title=\"RECS Dataset Profile\",minimal=True)\n# profile.to_notebook_iframe()","8eed1deb":"# profile.to_file(\"recs_report.html\")","2785b726":"recs_df['KWH'].hist()","ed00e61c":"def get_high_corr_df(df,positive_threshold=0.4):\n  corr = df.corr().stack().reset_index().drop_duplicates()\n  corr.columns = ['FEATURE_1', 'FEATURE_2', 'CORRELATION']\n  high_corr = corr[((corr['FEATURE_1'] != corr['FEATURE_2'] ) & ((corr['CORRELATION'] >= positive_threshold) | (corr['CORRELATION'] <= positive_threshold*-1)))]\n  return high_corr","7002762b":"high_corr = get_high_corr_df(recs_df)\nhigh_corr[((high_corr['FEATURE_1'] == 'KWH'))]","343e01b1":"KWH_cheat_columns = [c for c in recs_df.columns if ((\"KWH\" in c and len(c)>3) or \"BTUEL\" in c) ]\nrecs_df.drop(columns=KWH_cheat_columns,inplace=True)","32e0206c":"recs_df.drop(columns=[\"DOEID\"],inplace=True)","fe32486e":"imputation_columns = [c for c in recs_df.columns if c.startswith(\"Z\")]\nrecs_df.drop(columns=imputation_columns,inplace=True)","1e9aa04f":"columns_with_constant_values = []\nfor c in recs_df.columns:\n  value_frequencies = recs_df[c].value_counts(normalize=True)\n  if value_frequencies.max()>=0.85:\n    columns_with_constant_values.append(c)\nprint(columns_with_constant_values)\nprint(len(columns_with_constant_values))","9d58d2dc":"high_corr[((high_corr['FEATURE_1'] == 'KWH') & (high_corr['FEATURE_2'].isin(columns_with_constant_values)))]","80e9d076":"recs_df.drop(columns=columns_with_constant_values,inplace=True)","87929d8b":"high_corr = get_high_corr_df(recs_df) #calculate again, after deleting so many columns\nredundant_sets=[]\nfor i,row in high_corr[(high_corr['CORRELATION']>=0.90)|(high_corr['CORRELATION']<=-0.90)].iterrows():\n  f1 = row['FEATURE_1']\n  f2 = row['FEATURE_2']\n  fset = {f1,f2}\n  belongs_to_sets = []\n  for j in range(len(redundant_sets)):\n    if len(redundant_sets[j].intersection(fset))!=0:  \n      belongs_to_sets.append(j)\n\n  if len(belongs_to_sets)==0:\n    redundant_sets.append(fset)\n  elif len(belongs_to_sets)==1:\n    redundant_sets[belongs_to_sets[0]].update(fset)\n  else:\n    sets_to_merge = [redundant_sets[j] for j in belongs_to_sets]\n    for sm in sets_to_merge:\n      redundant_sets.remove(sm)\n      fset.update(sm)\n    redundant_sets.append(fset)\n  ","0be390ba":"for s in redundant_sets:\n  print(s)","32d00a51":"for s in redundant_sets:\n  s.pop()\n  recs_df.drop(columns=list(s),inplace=True)","404c4ecf":"sns.heatmap(recs_df.corr())","1767e807":"rows = set()\nfor c,column in recs_df.iteritems():\n  if column.dtype=='object':\n    continue\n\n  q25, q75 = percentile(column, 25), percentile(column, 75)\n  iqr = q75 - q25\n  cut_off = iqr * 1.5\n  lower, upper = q25 - cut_off, q75 + cut_off\n  outliers = recs_df[(recs_df[c] < lower) | (recs_df[c] > upper)] \n  if len(outliers)>0:\n    percentage = outliers.shape[0]\/recs_df.shape[0]*100\n    print('%s #outliers: %d %d%%' % (c,outliers.shape[0],percentage))\n    if percentage<1:\n      recs_df.drop(index=outliers.index,inplace=True)\n\n    else:\n      recs_df[c].where(((recs_df[c] < lower) | (recs_df[c] > upper)),recs_df[c].mean())","695084a2":"recs_df.shape[0]","bbebb692":"for c in recs_df.columns:\n  if recs_df[c].dtype=='object':\n    continue\n  skew = recs_df[c].skew()\n  if skew>2 or skew<-2:\n    print('%s skew before transforamtion: %f' % (c,skew))\n    recs_df[c] = np.log(recs_df[c] + 1 - min(recs_df[c]))\n    print('%s skew after log transforamtion: %f' % (c,recs_df[c].skew()))","71cb8099":"X = recs_df.loc[:,recs_df.columns!='KWH'].copy()\ny = recs_df['KWH'].copy()\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","d514cb2e":"categorical_columns = [c for c in recs_df.columns if recs_df[c].dtype=='object']\nfor c in categorical_columns:\n  print(c)\n  encoder = LabelEncoder()\n  encoder.fit(X_train[c].values)\n  X_train[c] = encoder.transform(X_train[c])\n  X_test[c] = encoder.transform(X_test[c])","0cebd36c":"from sklearn.linear_model import LinearRegression\n\nestimators = [('lgbm', GradientBoostingRegressor(random_state=42,max_depth=5)),\n              ('lr', LinearRegression()),\n              ('rc', RidgeCV())]\n\nstack = StackingRegressor(estimators=estimators[:-1],final_estimator=estimators[-1][1])\nprint(\"Individual resutls:\")\nfor estimator in estimators:\n  print(\"model: %s, score: %f\" %(estimator[0],estimator[1].fit(X_train, y_train).score(X_test, y_test)))\n  \nprint(\"################\\nEnsemble result\")\nstack.fit(X_train, y_train).score(X_test, y_test)","4a7cbff5":"# Prediction ","571493da":"## Dealing with Categorical Values","9992793a":"we can see from the names of each group that the values are highly related, and we can just use one of them as the representor of that group. for example, for the {'PELHOTWA', 'ELWATER'} pair, most people chose \"not applicable\" for the first one, and 0 (not electricity used for heating water) for the second one. So when they don't use it, they don't pay for it. the same information. we can just use one.","0ef38447":"there are some columns that almost have a constant value, such as DOLKEROTH with mostly zeros, or AGEHHMEMCAT11 with mostly -2.\n\nFirst, we'll find these columns.","7d17ccfe":"drop id, unique value","3e40489f":"Some important insights from a glance at the report:\n\n* over 900 columns, high dimensional data --> curse-of-dimensionality a great concern\n\n* many columns with almost constant values (zeros for example) --> redundant columns\n\n* no missing values reported (missing values are most likely already imputetd by the center who did the survey)\n\n* many columns with skewed distribution, must keep an eye on these when doing regression","1f19dce1":"## Target Variable Analysis","e4b6f376":"## Skewness","dcf41ea1":"# Data Analysis and Preprocessing","55040177":"Linear Regression is sensitive to outliers and we must take care of them before building a prediction model.\n\nStrategy for dealing with outliers: If the number of outliers found for a column make up less than 1% of the rows, remove the rows, else replace the outliers with mean.\n\nInitially, the threshold was higher (I tried a range of values from 20% to 1%). I noticed that even with a low threshold as much as 2%, we would still lose about 25% of the rows after outlier removal. So in order not to lose too much data, I used the afromentioned strategy. I think it's not ideal, but a quick and general solution for now.","02dda8f3":"Even after removing redundant columns, there is still noticable correlation between some columns in data. When using linear regression, we ideally want the predictors to have no correlation with each other.","05eb8bc7":"## Correlations","36c4dcec":"Pandas profiling revealed that distribution of a lot of columns are higly skewed. Therefore the normality assumption for linear regression will be violated. We will detect skewed columns and try to transform into a normal distribution witn log transformation. The rule of thumb is if the skewness is not within [-1,1] range that the distribution is skewed. But in the profiling report, I noticed almost no column has a perfect normal distribuion and most have skewness around 2-3. So I set the threshold a bit higher in order not to transform too many columns and completely transform the data.","c406b302":"## Train Test Sets","1b20e289":"drop the imputation flag columns, extra information that (I personally think) is irrelevant to prediction. Moreover, mostly zeros and also no noticable correlation found with \"KWH\" ","5ed8e068":"We will have a look at the correlation among variables in our dataset.","71ec8602":"## Noise and Outliers","87d1efaf":"# Set Up","255ab0b7":"we can see that the distribution is a bit skewed. Since our end goal is to predict this value, and it's continuous, we need a regression model. However, based on linear regression assumptions, we ideally want our target variable and predictors be normally distributed. ","1890f85a":"now, we look for highly correlated (close to 1 or -1) pairs. If such pairs exist perhaps we could get rid of one of the variables, and reduce number of columns for building a model.","d954cf34":"The unit of the values in the columns are not uniform. Some came from multi-answer questions so only have a categorical value. Some have continues values with large numbers. \n\nHowever, we will not use nueral networks or linear models sensitive to unscaled data.So we don't have to worry about this much for now. (Also, linear regression makes no assumption about the scale of the variables).\n\n","b5c3743f":"For dealing with categorical values, we'll use label encoding. We will fit the encoder only on training set so we don't leak any information to test set and help the models cheat!","4ea16a32":"We'll drop the redundant columns.","0eb9e9ec":"There is a perfect correlation of 1 between KWH and BTUEL. If we have a look at the codebook provided on the website, we'll see that they are representing the same thing (total electricity site usage), but in different units (one in kw\/h and the other one in thousand BTU). Furthermore, there are columns that show categories of KWH such as electricity usage for air-conditioning. I personally think, we should drop these columns for training a prediction model, otherwise they would serve a data-leak or cheating for the model. They are part of our target variable.","adac15a3":"We take advantage of pandas profiling to get an overview of the data and a quick analysis. Due to the large size of the report, I chose minimal report without correlation calculations. I commented the following lines, since the report was too large for Google Colab to save.","7349c1e3":"Then, see if any of them have a meaningful correlation with our target variable.","24d08f94":"## Scaling","61e426cf":"We'll first try two separate regression models to predict KWH. Then we'll see if we can improve the prediction by stacking the two and building an ensemble model. ","401f032b":"[![Open In Colab](https:\/\/colab.research.google.com\/assets\/colab-badge.svg)](https:\/\/colab.research.google.com\/drive\/1RN93yQ0kqAwlgAQZLVs9fAezk_5DryAd?usp=sharing)"}}