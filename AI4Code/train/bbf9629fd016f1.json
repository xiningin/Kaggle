{"cell_type":{"c928bdd4":"code","558bd09e":"code","b0a21c90":"code","78a21409":"code","5460277a":"code","55ed64d8":"code","237f7231":"code","0fd2793c":"code","30b2cf61":"code","c9d7d5c4":"code","0319abcb":"code","0b838a24":"code","3be7812a":"code","6760a300":"code","f4392afc":"code","c0d7f966":"code","bd590469":"code","646fcb4a":"code","d1fad55c":"code","ea680161":"code","3593ed3b":"code","f38b0675":"code","d4342ba3":"markdown","ac39ef26":"markdown","a53af1f8":"markdown","ee0c2351":"markdown","bfb2ffad":"markdown","027d6f3b":"markdown","0c7130d0":"markdown","8534a9ae":"markdown","5679dd03":"markdown","7c7daea8":"markdown"},"source":{"c928bdd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","558bd09e":"# Preparation\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","b0a21c90":"# Load the data\ntrain=pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')\nsubmission=pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/submission.csv')\n\nprint(np.shape(train))\nprint(np.shape(test))","78a21409":"train.head(10)","5460277a":"train.describe()","55ed64d8":"train.info() # Found that only Province_State has different row numbers","237f7231":"train['Province_State'].value_counts()","0fd2793c":"train['Province_State'].unique()[:50] # nan found","30b2cf61":"train['Province_State'].fillna('No Data',inplace=True)\ntest['Province_State'].fillna('No Data',inplace=True)","c9d7d5c4":"train['Date']= pd.to_datetime(train['Date']) \ntest['Date']= pd.to_datetime(test['Date']) ","0319abcb":"def create_time_features(df):\n    df['date'] = df['Date']\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X\n\ncreate_time_features(train)\ncreate_time_features(test)\n\n# drop the original date columns\ntrain=train.drop(columns=['Date'],axis=1)\ntest=test.drop(columns=['Date'],axis=1)\n\ntrain=train.drop(columns=['date'],axis=1)\ntest=test.drop(columns=['date'],axis=1)","0b838a24":"train.head()","3be7812a":"train.info()","6760a300":"train_dummies_Province_State = pd.get_dummies(train['Province_State'])\ntest_dummies_Province_State = pd.get_dummies(test['Province_State'])\n\ntrain_dummies_Country_Region = pd.get_dummies(train['Country_Region'])\ntest_dummies_Country_Region = pd.get_dummies(test['Country_Region'])\n\ntrain=train.drop(['Country_Region','Province_State','Id'],axis=1)\ntest=test.drop(['Country_Region','Province_State','ForecastId'],axis=1)\n\ntrain=pd.concat([train,train_dummies_Province_State,train_dummies_Country_Region],axis=1)\ntest=pd.concat([test,test_dummies_Province_State,test_dummies_Country_Region],axis=1)\n\ntrain.head()","f4392afc":"features=train.drop(['ConfirmedCases','Fatalities'],axis=1)\ntarget1=train['ConfirmedCases']\ntarget2=train['Fatalities']\n\nprint(features.shape)\nprint(target1.shape)\nprint(target2.shape)\nprint(test.shape)","c0d7f966":"model = DecisionTreeRegressor(criterion='mse', splitter='best')","bd590469":"model.fit(features,target1)","646fcb4a":"submission['ConfirmedCases'] = model.predict(test)","d1fad55c":"model.fit(features,target2)\nsubmission['Fatalities'] = model.predict(test)","ea680161":"submission.round().astype(int)","3593ed3b":"submission.head()","f38b0675":"submission.to_csv('submission.csv',index=False)","d4342ba3":"Transform to pandas datetime","ac39ef26":"Separate the features and targets.","a53af1f8":"Use Decison Tree as our Regression model","ee0c2351":"Individual second,minutes,hours,date help the algorithm predict better","bfb2ffad":"There are 2 ```object``` columns left in the data: ```Province_State``` and ```Country_Region```. Convert them into dummy variables.","027d6f3b":"For target1: ```ConfirmedCases```","0c7130d0":"Round the results and then convert them to ```int```.","8534a9ae":"For target2: ```Fatalities```","5679dd03":"Use \"No Data\" to fill the ```nan```s in both train and test data sets.","7c7daea8":"# COVID-Week-2-First-Submission"}}