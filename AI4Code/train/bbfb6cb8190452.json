{"cell_type":{"64f31db5":"code","e00d30af":"code","2bef3ee3":"code","1ca3c471":"code","627211fd":"code","4ac33632":"code","0e3195db":"code","3f6b8659":"code","297b4ba4":"code","7cce1262":"code","3fcaf263":"code","d2e88ba7":"code","0237169e":"code","1266fefa":"code","99842b0e":"code","24fb2940":"code","31a536cf":"code","23dc963d":"code","b2fc1c19":"code","e58a2e2c":"code","fa91ffd9":"code","ad50b491":"code","3ff246a4":"code","45c1051e":"code","bdac1ca4":"code","687a3ba9":"code","15495eff":"code","3549839a":"code","cff6d0c9":"code","db80959f":"code","3a228169":"code","970dff5f":"code","eb1ccdf0":"code","a74b6917":"code","dd7c40a3":"code","3bf62cd0":"code","578c8370":"code","6e1f9470":"code","b7a4c2c9":"code","347945d0":"code","099a91a6":"code","f521bc53":"code","cb3c76ad":"code","29d52ada":"code","e214ea6a":"code","0d00bdc8":"code","0ede292f":"code","93ed22c6":"code","e009f61c":"code","bab15897":"code","7a5c71de":"markdown","2c511b1f":"markdown","d71077a1":"markdown","808f262f":"markdown","9e921624":"markdown","648f484e":"markdown","f45a69ca":"markdown","94770f8b":"markdown","64375653":"markdown","bc852347":"markdown","8b877e1d":"markdown","df3208b2":"markdown","fed76b2c":"markdown","b8ff02c3":"markdown","ba1f5987":"markdown","c5151014":"markdown","8480c3b4":"markdown","f5bbf5bc":"markdown","0e899e7b":"markdown","a2b1d652":"markdown","fed54eac":"markdown","b4fb698b":"markdown","36969f9e":"markdown","e6b04e9a":"markdown","690af577":"markdown","6108480f":"markdown","58372309":"markdown","1b4bd45d":"markdown","4e72e405":"markdown","8c68ed3b":"markdown"},"source":{"64f31db5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e00d30af":"df = pd.read_csv('..\/input\/rijksmuseum\/rijksmuseum\/metadata.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf.head()","2bef3ee3":"df.isnull().sum()","1ca3c471":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom PIL import Image\nfrom glob import glob\nimport cv2\n\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras import Model, layers\nfrom keras.callbacks import *\nfrom keras.models import load_model, model_from_json","627211fd":"def plotImages(artist,directory):\n    print(artist)\n    multipleImages = glob(directory)\n    plt.rcParams['figure.figsize'] = (15, 15)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    i_ = 0\n    for l in multipleImages[:25]:\n        im = cv2.imread(l)\n        im = cv2.resize(im, (128, 128)) \n        plt.subplot(5, 5, i_+1) #.set_title(l)\n        plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n        i_ += 1\n        \n        \nplotImages(\"Rijksmuseum Drawing in Gray Scale\",\"..\/input\/rijksmuseum\/rijksmuseum\/drawing\/**\")","4ac33632":"def plotImages(artist,directory):\n    print(artist)\n    multipleImages = glob(directory)\n    plt.rcParams['figure.figsize'] = (15, 15)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    i_ = 0\n    for l in multipleImages[:25]:\n        im = cv2.imread(l)\n        im = cv2.resize(im, (128, 128)) \n        plt.subplot(5, 5, i_+1) #.set_title(l)\n        plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n        i_ += 1\n        \n        \nplotImages(\"Rijksmuseum Painting in Gray Scale\",\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/**\")","0e3195db":"%reload_ext autoreload\n%autoreload 2\n\nfrom fastai.vision.all import *\nfrom fastai.imports import *\nfrom fastai.vision.data import *\nfrom fastai import *\nimport numpy as np\nimport fastai","3f6b8659":"from tqdm import tqdm\nfrom PIL import Image as Img\nfrom keras import Input\nfrom keras.layers import Dense, Reshape, LeakyReLU, Conv2D, Conv2DTranspose, Flatten, Dropout\nfrom keras.models import Model\nfrom keras.optimizers import RMSprop","297b4ba4":"PIC_DIR = f'..\/input\/rijksmuseum\/rijksmuseum\/painting\/'\n\nIMAGES_COUNT = 1125\n\nORIG_WIDTH = 178\nORIG_HEIGHT = 208\ndiff = (ORIG_HEIGHT - ORIG_WIDTH) \/\/ 2\n\nWIDTH = 128\nHEIGHT = 128\n\ncrop_rect = (0, diff, ORIG_WIDTH, ORIG_HEIGHT - diff)\n\nimages = []\nfor pic_file in tqdm(os.listdir(PIC_DIR)[:IMAGES_COUNT]):\n    pic = Image.open(PIC_DIR + pic_file).crop(crop_rect)\n    pic.thumbnail((WIDTH, HEIGHT), Image.ANTIALIAS)\n    images.append(np.uint8(pic))","7cce1262":"#Display first 25 images\nplt.figure(1, figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5, 5, i+1)\n    plt.imshow(images[i])\n    plt.axis('off')\nplt.show()","3fcaf263":"def visualize_images(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    image_names = all_names[:n_images]   \n    if is_random:\n        image_names = random.sample(all_names, n_images)\n            \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.xticks([])\n        plt.yticks([])\n    \n    plt.show()","d2e88ba7":"paintings_PNG_PATH = '..\/input\/rijksmuseum\/rijksmuseum\/painting'","0237169e":"visualize_images(paintings_PNG_PATH, 9)","1266fefa":"def show_color_histogram(path):\n    image_names = os.listdir(path)\n    image_name = random.choice(image_names)\n    img = cv2.imread(os.path.join(path, image_name))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    fig = make_subplots(1, 2)\n\n    fig.add_trace(go.Image(z=img), 1, 1)\n    for channel, color in enumerate(['red', 'green', 'blue']):\n        fig.add_trace(\n            go.Histogram(\n                x=img[..., channel].ravel(), \n                opacity=0.5,\n                marker_color=color, \n                name='%s channel' %color\n            ), 1, 2)\n    fig.update_layout(height=400)\n    fig.show()","99842b0e":"def color_hist_visualization(image_path, figsize=(16, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 4, 1)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \n    colors = [\"red\", \"green\", \"blue\"]\n    for i in range(len(colors)):\n        plt.subplot(1, 4, i + 2)\n        plt.hist(\n            img[:, :, i].reshape(-1),\n            bins=25,\n            alpha=0.5,\n            color=colors[i],\n            density=True\n        )\n        plt.xlim(0, 255)\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()    ","24fb2940":"img_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-614.jpg'\ncolor_hist_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-7.jpg'\ncolor_hist_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-4771.jpg'\ncolor_hist_visualization(img_path)","31a536cf":"import plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nshow_color_histogram(paintings_PNG_PATH)","23dc963d":"def batch_visualization(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    \n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    \n    image_names = all_names[:n_images]\n    if is_random:\n        image_names = random.sample(all_names, n_images)\n    \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.axis(\"off\")\n    \n    plt.show()","b2fc1c19":"batch_visualization(paintings_PNG_PATH, 1, is_random=True, figsize=(5, 5))","e58a2e2c":"batch_visualization(paintings_PNG_PATH, 4, is_random=True, figsize=(10, 10))","fa91ffd9":"batch_visualization(paintings_PNG_PATH, 9, is_random=True)","ad50b491":"batch_visualization(paintings_PNG_PATH, 16, is_random=True)","3ff246a4":"def channels_visualization(image_path, figsize=(16, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 4, 1)\n    plt.imshow(np.mean(img, axis=2), cmap=\"gray\")\n    plt.axis('off')\n    \n    for i in range(3):\n        plt.subplot(1, 4, i + 2)\n        tmp_img = np.full_like(img, 0)\n        tmp_img[:, :, i] = img[:, :, i]\n        plt.imshow(tmp_img)\n        plt.xlim(0, 255)\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()  ","45c1051e":"img_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-1477.jpg'\ncolor_hist_visualization(img_path)\nchannels_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-4516.jpg'\ncolor_hist_visualization(img_path)\nchannels_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-2990.jpg'\ncolor_hist_visualization(img_path)\nchannels_visualization(img_path)","bdac1ca4":"def grayscale_visualization(image_path, figsize=(8, 4)):\n    plt.figure(figsize=figsize)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.axis('off')\n    \n    plt.subplot(1, 2, 2)\n    tmp_img = np.full_like(img, 0)\n    for i in range(3):\n        tmp_img[:, :, i] = img.mean(axis=-1)\n    plt.imshow(tmp_img)\n    plt.axis('off')\n    \n    \n    plt.show()","687a3ba9":"img_path = '..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-1254.jpg'\ngrayscale_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-341.jpg'\ngrayscale_visualization(img_path)\n\nimg_path = '..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-1541.jpg'\ngrayscale_visualization(img_path)","15495eff":"def plot_simple_augmentation(image_path, transform):\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    \n    plt.figure(figsize=(10, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \n    plt.subplot(1, 2, 2)\n    x = transform(image=img)[\"image\"]\n    plt.imshow(x)\n    plt.axis(\"off\")\n\n    plt.show()\n    \ndef plot_multiple_augmentation(image_path, transform):\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    \n    plt.figure(figsize=(10, 10))\n    \n    plt.subplot(2, 2, 1)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \n    plt.subplot(2, 2, 2)\n    x = transform(image=img)[\"image\"]\n    plt.imshow(x)\n    plt.axis(\"off\")\n    \n    plt.subplot(2, 2, 3)\n    x = transform(image=img)[\"image\"]\n    plt.imshow(x)\n    plt.axis(\"off\")\n    \n    plt.subplot(2, 2, 4)\n    x = transform(image=img)[\"image\"]\n    plt.imshow(x)\n    plt.axis(\"off\")\n\n    plt.show()","3549839a":"import albumentations as A\n\n\ntransform = A.Compose(\n    [\n        A.Blur(p=1.0, blur_limit=(5, 5)),\n    ]\n)\n\nplot_simple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-333.jpg\", transform)","cff6d0c9":"transform = A.CLAHE(p=1.0, clip_limit=(10, 10), tile_grid_size=(3, 3))\n\nplot_simple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-1537.jpg\", transform)","db80959f":"transform = A.CenterCrop(p=1.0, height=100, width=150)\n\nplot_simple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/drawing\/AK-MAK-346.jpg\", transform)","3a228169":"transform = A.ChannelDropout(p=1.0, channel_drop_range=(1, 2), fill_value=0)\n\nplot_multiple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/BK-NM-5783-10.jpg\", transform)","970dff5f":"transform = A.ChannelShuffle(p=1.0)\n\nplot_multiple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/NG-2008-64.jpg\", transform)","eb1ccdf0":"transform = A.Crop(p=1.0, x_min=0, y_min=0, x_max=150, y_max=150)\n\nplot_simple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/NG-2010-40.jpg\", transform)","a74b6917":"transform = A.RandomCrop(p=1.0, height=100, width=100)\n\nplot_multiple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/NG-1987-7.jpg\", transform)","dd7c40a3":"transform = A.Cutout(p=1.0, num_holes=8, max_h_size=15, max_w_size=15)\n\nplot_multiple_augmentation(\"..\/input\/rijksmuseum\/rijksmuseum\/painting\/NG-2010-41.jpg\", transform)","3bf62cd0":"transform = A.Downscale(\n    p=1.0, scale_min=0.01, scale_max=0.20, interpolation=0,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1950-205.jpg\",\n    transform,\n)","578c8370":"transform = A.Equalize(\n    p=1.0, mode='cv', by_channels=True,\n)\n\nplot_simple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-00-773.jpg\",\n    transform,\n)","6e1f9470":"transform = A.HorizontalFlip(\n    p=1.0,\n)\n\nplot_simple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1952-248.jpg\",\n    transform,\n)","b7a4c2c9":"transform = A.VerticalFlip(\n    p=1.0,\n)\n\nplot_simple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1940-543.jpg\",\n    transform,\n)","347945d0":"transform = A.Flip(\n    p=1.0,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/NG-2010-39.jpg\",\n    transform,\n)","099a91a6":"transform = A.GaussNoise(\n    p=1.0, var_limit=(500.0, 500.0),\n)\n\nplot_simple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1952-199.jpg\",\n    transform,\n)","f521bc53":"transform = A.GridDistortion(\n    p=1.0, num_steps=15, distort_limit=(-2., 2.), \n    interpolation=0, border_mode=0, value=(0, 0, 0), mask_value=None,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1979-45.jpg\",\n    transform,\n)","cb3c76ad":"transform = A.HueSaturationValue(\n    p=1.0, \n    hue_shift_limit=(-100, 100), \n    sat_shift_limit=(-100, 100), \n    val_shift_limit=(-100, 100),\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/BK-NM-10269.jpg\",\n    transform,\n)","29d52ada":"transform = A.ISONoise(\n    p=1.0, intensity=(0.0, 2.0), color_shift=(0.0, 1.0)\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/BK-NM-1010-245.jpg\",\n    transform,\n)","e214ea6a":"transform = A.ImageCompression(\n    p=1.0, quality_lower=0, quality_upper=10, compression_type=0,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/BK-14656-311.jpg\",\n    transform,\n)","0d00bdc8":"transform = A.InvertImg(\n    p=1.0,\n)\n\nplot_simple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1952-200.jpg\",\n    transform,\n)","0ede292f":"transform = A.JpegCompression(\n    p=1.0, quality_lower=0, quality_upper=10,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1940-543.jpg\",\n    transform,\n)","93ed22c6":"transform = A.MotionBlur(\n    p=1.0, blur_limit=(3, 50),\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/RP-T-1987-9.jpg\",\n    transform,\n)","e009f61c":"transform = A.MultiplicativeNoise(\n    p=1.0, multiplier=(0.1, 5.0), per_channel=True, elementwise=False,\n)\n\nplot_multiple_augmentation(\n    \"..\/input\/rijksmuseum\/rijksmuseum\/painting\/SK-A-1011.jpg\",\n    transform,\n)","bab15897":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here.' )","7a5c71de":"#Augmentation - Crop","2c511b1f":"#Augmentation - ChannelDropout","d71077a1":"#Augmentation - HueSaturationValue","808f262f":"#Augmentation - JpegCompression","9e921624":"#Augmentation - InvertImg","648f484e":"#Individual Channels Visualization","f45a69ca":"#Grayscale Visualization","94770f8b":"#Augmentation - CutOut","64375653":"#Augmentation - MultiplicativeNoise","bc852347":"#Augmentation - Flip","8b877e1d":"#Load data. Resize images","df3208b2":"#Augmentation - ChannelShuffle","fed76b2c":"#Augmentation - GaussNoise","b8ff02c3":"#Codes by Yaroslav Isaienkov https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques","ba1f5987":"#Augmentation - VerticalFlip","c5151014":"#Image shape\nimages = np.array(images) \/ 255\nprint(images.shape)","8480c3b4":"#Augmentation - Equalize","f5bbf5bc":"#Augmentation - ImageCompression","0e899e7b":"#Augmentation - MotionBlur","a2b1d652":"Rijksmuseum\n\nEen historisch museum waar altijd iets nieuws te ontdekken is. Het Rijksmuseum kijkt met de blik van nu naar de kunst van toen. Zo verzeker je jezelf steeds weer van een bijzonder bezoek.\nhttps:\/\/www.rijksmuseum.nl\/nl","fed54eac":"#Augmentation - CLAHE","b4fb698b":"#Augmentation - RandomCrop","36969f9e":"![](https:\/\/cdn.getyourguide.com\/img\/tour\/5ece5a2c8ea7e.jpeg\/146.jpg)getyourguide.com.br","e6b04e9a":"#Augmentation - GridDistortion","690af577":"#Augmentation - HorizontalFlip","6108480f":"#Codes by Nagesh Singh Chauhan https:\/\/www.kaggle.com\/nageshsingh\/generate-realistic-human-face-using-gan","58372309":"#Augmentation - Downscale","1b4bd45d":"#Augmentation - ISONoise","4e72e405":"#Augmentation - CenterCrop","8c68ed3b":"#Augmentation - Blur"}}