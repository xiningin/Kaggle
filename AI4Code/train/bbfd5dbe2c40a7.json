{"cell_type":{"3ea6cab6":"code","c1edb5df":"code","bfaeecc9":"code","286010f0":"code","c7db2d4b":"code","e5a149c8":"code","3edea314":"code","d283094e":"code","2b509317":"code","11a5e9c8":"code","0caf1cbc":"code","ce848879":"code","7d0a8cc4":"code","f7480d44":"code","f3b4fd06":"markdown","2fe333cc":"markdown","1a5cc7f4":"markdown"},"source":{"3ea6cab6":"# All libraries we will need\nimport pandas as pd # To store data as a dataframe\nimport requests # to get the data of an url\nprint('Setup complete!')","c1edb5df":"# We need the url of the page we are gonna scrape, we will start with the first page\nurl = 'https:\/\/www.kaggle.com\/rankings.json?group=notebooks&page=1&pageSize=20'\nresponse = requests.get(url) # Get content of page","bfaeecc9":"import json\n\n# Get json object, take a look at how data is structured\njson_resp = json.loads(response.text)\n#json_resp # Uncomment to see structure ","286010f0":"#Counts for tier\njson_resp['counts']","c7db2d4b":"# We need to sum the first 3 tiers, the ones that count for the datasets ranking (grandmaster, master, expert)\nrankingTiers = json_resp['counts'][0:3]\nrankingTiers","e5a149c8":"# We need the number of rankers in notebooks to know how many pages of 20 (every page has a fixed size of 20 users) we need to scrappe.\nnumberOfRankers = 0\nfor tier in rankingTiers:\n    numberOfRankers += tier['count']\nprint(numberOfRankers)","3edea314":"# Round up using ceil as we need an extra page for the last ones\nimport math\n\nnumPagsToScrappe = math.ceil(numberOfRankers \/ 20)\nnumPagsToScrappe","d283094e":"# Get the kagglers users data \nusersList = json_resp['list']\nusersList[0] # Show first user of the list","2b509317":"# Data to extract\n\ncurrentRanking = []\ndisplayName = []\nthumbnailUrl = []\nuserId = []\nuserUrl = []\ntier = []\npoints = []\njoined = []\ntotalGoldMedals = []\ntotalSilverMedals = []\ntotalBronzeMedals = []","11a5e9c8":"baseURL = 'https:\/\/www.kaggle.com\/rankings.json?group=notebooks&pageSize=20&page='\n\nfor page in range(1, numPagsToScrappe + 1): # Page query starts at 1, and its a range()  function so we need to add 1 \n    # We need the url of the page we are gonna scrape\n    pageToScrape = baseURL + str(page) # To acces the multiple pages\n    resp = requests.get(pageToScrape) # Get content of page\n    json_response = json.loads(resp.text) # Get JSON object \n    jsonRespListUsers = json_response['list'] # Get list of users of the JSON object\n    \n    for user in range(0, len(jsonRespListUsers)):\n        currentRanking.append(jsonRespListUsers[user]['currentRanking'])\n        displayName.append(jsonRespListUsers[user]['displayName'])\n        #thumbnailUrl.append(jsonRespListUsers[user]['thumbnailUrl'])\n        userId.append(jsonRespListUsers[user]['userId'])\n        userUrl.append(jsonRespListUsers[user]['userUrl'])\n        tier.append(jsonRespListUsers[user]['tier'])\n        points.append(jsonRespListUsers[user]['points'])\n        joined.append(jsonRespListUsers[user]['joined'])\n        totalGoldMedals.append(jsonRespListUsers[user]['totalGoldMedals'])\n        totalSilverMedals.append(jsonRespListUsers[user]['totalSilverMedals'])\n        totalBronzeMedals.append(jsonRespListUsers[user]['totalBronzeMedals'])\n","0caf1cbc":"# Create dataFrame with the information we have\ntopKagglersNotebooks = pd.DataFrame({\n    'displayName':displayName,\n    'currentRanking':currentRanking,\n    #'thumbnailUrl':thumbnailUrl,\n    'userId':userId,\n    'userUrl':userUrl,\n    'tier':tier,\n    'points':points,\n    'userJoinDate':joined,\n    'totalGoldMedals':totalGoldMedals,\n    'totalSilverMedals':totalSilverMedals,\n    'totalBronzeMedals':totalBronzeMedals\n\n})","ce848879":"# First 7 rows of the dataframe\ntopKagglersNotebooks.head(7)","7d0a8cc4":"# We check the sizes of the dataframe\ntopKagglersNotebooks.shape","f7480d44":"# Build csv\ntopKagglersNotebooks.to_csv('topKagglersNotebooks.csv', index=False)","f3b4fd06":"In the next tutorials we will see that similar pages have very similar data formats, so you can extract data with the same code.\n\nThe only thing that changes between this scrapping and the last one is the query group:\n\ngroup=notebooks","2fe333cc":"Data Mining - Web Scrapping: The saga:\n1. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapper-vol-1-pokedex # Scrapping a pokedex, all pokemon with all stats\n2. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-2-pokedex-pandas # Scrapping a pokedex, using a diferent method than number 1, easier but in case a column has multiple values, in some cases you may need to do some cleaning. Result similar as 1, only changes: Type and ID. \n3. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapper-vol-3-sudoku-to-string # Extract sudokus data and transform it to string\n4. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-66-kaggle-datasets # It's about scrapping the top 20 kagglers in datasets ranking\n5. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-4-kaggle-datasets2 # Second take at kaggle datasets scrapping \n6. https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-5-kaggle-notebooks # Scrap top notebook kagglers","1a5cc7f4":"To understand how this notebook work check this tutorial: https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-4-kaggle-datasets2"}}