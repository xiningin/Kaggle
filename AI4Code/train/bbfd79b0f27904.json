{"cell_type":{"9dac7ecb":"code","cf3ce49f":"code","170b0655":"code","44e17f1e":"code","9a1634bb":"code","d925a076":"code","64f1411b":"code","f7dbd2a5":"code","880f9189":"code","f10c8d94":"code","a6123685":"code","f9b25b2e":"code","b31591f2":"code","2e04f683":"code","740ebf48":"code","82daae49":"code","4e2d226d":"code","dd8924ea":"code","aaf8b8aa":"code","a55f68d5":"code","27071163":"code","d3eb4194":"code","9d8e01c7":"code","ea610a81":"code","60c20c79":"code","c260dd54":"code","274d3171":"code","10803a54":"code","a9e59e76":"code","997555d7":"code","6544124f":"code","ddf0ef7b":"code","710d3f2c":"code","6657ae77":"code","c1bb70a1":"code","b99c450a":"code","88bda99a":"code","d9ab8895":"markdown","c9845664":"markdown","44621520":"markdown","20084858":"markdown","a2dfff41":"markdown","f7d8a306":"markdown","d5c54b12":"markdown","0a275c6f":"markdown","ed6fa56d":"markdown","632781b8":"markdown"},"source":{"9dac7ecb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom datetime import datetime\nfrom scipy.stats import skew  # for some statistics\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cf3ce49f":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","170b0655":"print(train_data.head())\nprint(train_data.columns)","44e17f1e":"print(train_data.head())\nprint(train_data.columns)","9a1634bb":"train_data['SalePrice'].hist()","d925a076":"train_data = train_data[train_data.GrLivArea < 4000]\ntrain_data.reset_index(drop=True, inplace=True)\ntrain_data[\"SalePrice\"] = np.log1p(train_data[\"SalePrice\"])\ny = train_data['SalePrice'].reset_index(drop=True)","64f1411b":"train_data['SalePrice'].hist()","f7dbd2a5":"train_data_features = train_data.drop(['SalePrice'], axis=1)\ntest_data_features = test_data\nfeatures = pd.concat([train_data_features, test_data_features]).reset_index(\n    drop=True)","880f9189":"features.shape,features.describe(),features.columns","f10c8d94":"features.head()","a6123685":"train_data.head()","f9b25b2e":"features['MSSubClass'] = features['MSSubClass'].apply(str)\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)\n\n## Filling these columns With most suitable value for these columns \nfeatures['Functional'] = features['Functional'].fillna('Typ') \nfeatures['Electrical'] = features['Electrical'].fillna(\"SBrkr\") \nfeatures['KitchenQual'] = features['KitchenQual'].fillna(\"TA\") \nfeatures[\"PoolQC\"] = features[\"PoolQC\"].fillna(\"None\")\n\n\n\n## Filling these with MODE , i.e. , the most frequent value in these columns .\nfeatures['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0]) \nfeatures['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])","b31591f2":"### Missing data in GarageYrBit most probably means missing Garage , so replace NaN with zero . \n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    features[col] = features[col].fillna(0)\n\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    features[col] = features[col].fillna('None')\n\n    \n### Same with basement\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('None')","2e04f683":"features['MSZoning'] = features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","740ebf48":"objects = []\nfor i in features.columns:\n    if features[i].dtype == object:\n        objects.append(i)\nfeatures.update(features[objects].fillna('None'))\nprint(objects)","82daae49":"# We are still filling up missing values \nfeatures['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\nnumeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics.append(i)\nfeatures.update(features[numerics].fillna(0))\nnumerics[1:10]","4e2d226d":"numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in features.columns:\n    if features[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nskew_features = features[numerics2].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    features[i] = boxcox1p(features[i], boxcox_normmax(features[i] + 1))","dd8924ea":"# Removing features that are not very useful . This can be understood only by doing proper EDA on data\n\nfeatures = features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n\n\n# Adding new features . Make sure that you understand this. \n\nfeatures['YrBltAndRemod']=features['YearBuilt']+features['YearRemodAdd']\nfeatures['TotalSF']=features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['Total_sqr_footage'] = (features['BsmtFinSF1'] + features['BsmtFinSF2'] +\n                                 features['1stFlrSF'] + features['2ndFlrSF'])\n\nfeatures['Total_Bathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                               features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n\nfeatures['Total_porch_sf'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                              features['EnclosedPorch'] + features['ScreenPorch'] +\n                              features['WoodDeckSF'])","aaf8b8aa":"## For ex, if PoolArea = 0 , Then HasPool = 0 too\n\nfeatures['haspool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['has2ndfloor'] = features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasgarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasbsmt'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['hasfireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","a55f68d5":"features.shape","27071163":"final_features = pd.get_dummies(features).reset_index(drop=True)\nfinal_features.shape","d3eb4194":"X = final_features.iloc[:len(y), :]\nX_sub = final_features.iloc[len(y):, :]\nX.shape, y.shape, X_sub.shape","9d8e01c7":"outliers = [30, 88, 462, 631, 1322]\nX = X.drop(X.index[outliers])\ny = y.drop(y.index[outliers])\n\noverfit = []\nfor i in X.columns:\n    counts = X[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(X) * 100 > 99.94:\n        overfit.append(i)\n\noverfit = list(overfit)\nX = X.drop(overfit, axis=1)\nX_sub = X_sub.drop(overfit, axis=1)\noverfit","ea610a81":"X.shape, y.shape, X_sub.shape","60c20c79":"# defining error functions for handy use. \n\n\nkfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kfolds))\n    return (rmse)","c260dd54":"alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","274d3171":"ridge = make_pipeline(RobustScaler(), RidgeCV(alphas=alphas_alt, cv=kfolds))\nlasso = make_pipeline(RobustScaler(), LassoCV(max_iter=1e7, alphas=alphas2, random_state=42, cv=kfolds))\nelasticnet = make_pipeline(RobustScaler(), ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio))                                \nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003,))","10803a54":"gbr = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42)                     ","a9e59e76":"lightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )","997555d7":"xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)","6544124f":"stack_gen = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, gbr, xgboost, lightgbm),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","ddf0ef7b":"# Using various prediction models that we just created \n\n\nscore = cv_rmse(ridge , X)\nscore = cv_rmse(lasso , X)\nprint(\"LASSO: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(elasticnet)\nprint(\"elastic net: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(svr)\nprint(\"SVR: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )\n\nscore = cv_rmse(xgboost)\nprint(\"xgboost: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()), datetime.now(), )","710d3f2c":"print('START Fit')\n\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X), np.array(y))\n\nprint('elasticnet')\nelastic_model_full_data = elasticnet.fit(X, y)\n\nprint('Lasso')\nlasso_model_full_data = lasso.fit(X, y)\n\nprint('Ridge')\nridge_model_full_data = ridge.fit(X, y)\n\nprint('Svr')\nsvr_model_full_data = svr.fit(X, y)\n\nprint('GradientBoosting')\ngbr_model_full_data = gbr.fit(X, y)\n\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X, y)\n\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X, y)","6657ae77":"def blend_models_predict(X):\n    return ((0.1 * elastic_model_full_data.predict(X)) + \\\n            (0.05 * lasso_model_full_data.predict(X)) + \\\n            (0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.1 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.15 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.3 * stack_gen_model.predict(np.array(X))))","c1bb70a1":"print('Predict submission')\nsubmission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsubmission.iloc[:,1] = (np.expm1(blend_models_predict(X_sub)))","b99c450a":"q1 = submission['SalePrice'].quantile(0.0042)\nq2 = submission['SalePrice'].quantile(0.99)\n# Quantiles helping us get some extreme values for extremely low or high values \nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x > q1 else x*0.77)\nsubmission['SalePrice'] = submission['SalePrice'].apply(lambda x: x if x < q2 else x*1.1)\nsubmission.to_csv(\"submission.csv\", index=False)","88bda99a":"submission.head()","d9ab8895":"### SalePrice is not uniformly distributed and is skewed towards the left . Therefore , we use log1p to remove the skewness .","c9845664":"Storing SalePrice column seperately , as it is the 'Y' label that our model will learn to predict. Not to be stored in 'X' or features.","44621520":"Turns out we have dropped just one column (Compare the shape)","20084858":"Now , we are merging train and test datasets , so that we can handle 'noise' and missing data in the dataset .","a2dfff41":"# STEP 3 : Feature Engineering","f7d8a306":"### Submission","d5c54b12":"Let's have a look inside the data coefficients","0a275c6f":"Fill the remaining columns as** None**","ed6fa56d":"As you can see the data is now more balanced, suitable for training and prediction purposes.","632781b8":"This code will filll the missing values with the mode (The frequently category appearing) By each MSsubclass:"}}