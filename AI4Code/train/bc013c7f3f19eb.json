{"cell_type":{"f32da7f5":"code","ea18facc":"code","b02bad70":"code","546b05ac":"code","fa843922":"code","0e05f2b7":"code","9b83e05b":"code","e68b447e":"code","99261b6c":"code","6eb4f286":"code","b2ff8c21":"code","32e0f5b1":"code","6dc4a01a":"code","2ff2a4c8":"code","a794f3af":"code","57c1c11a":"code","d7c4ed23":"markdown","89189853":"markdown","b515a2bf":"markdown","4c8cb569":"markdown","4b8182ed":"markdown","85430b82":"markdown"},"source":{"f32da7f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nimport warnings\nfrom pandas_profiling import ProfileReport \nfrom pycaret.regression import *\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea18facc":"df = pd.read_csv('..\/input\/carbonelectrodesmilkbiosensors\/iMicroq carbon magenta 8x\/Listeria\/G19 104 (magenta carbon)_1018.csv', encoding='ISO-8859-2')\ndf.head()","b02bad70":"from colorama import Fore, Style\n\ndef count(string: str, color=Fore.RED):\n    \"\"\"\n    Saves some work \n    \"\"\"\n    print(color+string+Style.RESET_ALL)","546b05ac":"def statistics(dataframe, column):\n    count(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.RED)\n    count(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.BLUE)\n    count(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.YELLOW)\n    count(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.GREEN)\n    count(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    count(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.MAGENTA)","fa843922":"# Print Offset Column Statistics\nstatistics(df, '0.0442')","0e05f2b7":"# Let's plot the 0.0442 column too\nplt.style.use(\"classic\")\nsns.distplot(df['0.0442'], color='blue')\nplt.title(f\"0.0442 Distribution [\\u03BC : {df['0.0442'].mean():.2f} conditions | \\u03C3 : {df['0.0442'].std():.2f} conditions]\")\nplt.xlabel(\"0.0442\")\nplt.ylabel(\"Count\")\nplt.show()","9b83e05b":"# Print Offset Column Statistics\nstatistics(df, '-0.0197')","e68b447e":"# Let's plot the 0.0442 column too\nplt.style.use(\"classic\")\nsns.distplot(df['-0.0197'], color='red')\nplt.title(f\"-0.0197 Distribution [\\u03BC : {df['-0.0197'].mean():.2f} conditions | \\u03C3 : {df['-0.0197'].std():.2f} conditions]\")\nplt.xlabel(\"-0.0197\")\nplt.ylabel(\"Count\")\nplt.show()","99261b6c":"corr = df.corr()\ncorr.style.background_gradient(cmap = 'coolwarm')","6eb4f286":"import matplotlib.gridspec as gridspec\nfrom scipy.stats import skew\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nfrom scipy import stats\nimport matplotlib.style as style\nstyle.use('seaborn-colorblind')","b2ff8c21":"def plotting_3_chart(df, feature): \n    ## Creating a customized chart. and giving in figsize and everything. \n    fig = plt.figure(constrained_layout=True, figsize=(10,6))\n    ## crea,ting a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    #gs = fig3.add_gridspec(3, 3)\n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );\n \n\nprint('Skewness: '+ str(df['0.0393'].skew())) \nprint(\"Kurtosis: \" + str(df['0.0393'].kurt()))\nplotting_3_chart(df, '0.0393')","32e0f5b1":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Blues')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","6dc4a01a":"plot_count(\"0.0393\", \"0.0393\", df,4)","2ff2a4c8":"!pip install autoviz\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()","a794f3af":"df = AV.AutoViz(filename=\"\",sep=',', depVar='0.0442', dfte=df, header=0, verbose=2, \n                 lowess=False, chart_format='svg', max_rows_analyzed=150000, max_cols_analyzed=30)","57c1c11a":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge, Grace Hopper quote' )","d7c4ed23":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRVhK7sYVHEOjcj9f3KlUEltIXMssSc0b_SMA&usqp=CAU)prezi.com","89189853":"#A bacteriophage endolysin-based electrochemical impedance biosensor for the rapid detection of Listeria cells\n\nAuthors: Mona Tolba,   Minhaz Uddin Ahmed,   Chaker Tlili,   Fritz Eichenseher,   Martin J. Loessner  and  Mohammed Zourob\n\n![](https:\/\/pubs.rsc.org\/en\/Image\/Get?imageInfo.ImageType=GA&imageInfo.ImageIdentifier.ManuscriptID=C2AN35988J&imageInfo.ImageIdentifier.Year=2012)https:\/\/pubs.rsc.org\/en\/content\/articlelanding\/2012\/an\/c2an35988j#!divAbstract","b515a2bf":"#AutoViz: A New Tool for Automated Visualization, Written on December 28th, 2019 by Dan Roth.\n\nIt is not hard to see how helpful automated visualization can be. Within moments, the library is capable of generating highly informational plots and provides many pathways of potential expansion for a data scientist's modeling or analysis pipeline. AutoViz is meant to be integrated within a systematic iterative process. Exploratory data analysis (EDA) can be effectively initiated with AutoViz; features can be selected based on the tool's analysis and then the data can be repeatedly processed for automatic visualization. Once strong visualizations are generated, a data scientist can now jump into modeling or communicating the data with a well informed analysis. It is surprising that automated visualization options are so sparse given its many conceivable uses as an objective and practical tool, but AutoViz thankfully fulfills this role to great effect. Now let's get some visualizations going!https:\/\/danrothdatascience.github.io\/datascience\/autoviz.html","4c8cb569":"#Newly Developed System for Acetamiprid Residue Screening in the Lettuce Samples Based on a #Bioelectric Cell Biosensor\n\nAuthors:\nApostolou, T.; Loizou, K.; Hadjilouka, A.; Inglezakis, A.; Kintzios, S. Newly Developed System for Acetamiprid Residue Screening in the Lettuce Samples Based on a Bioelectric Cell Biosensor. Biosensors 2020, 10, 8. Biosensors 2020, 10(2), 8; https:\/\/doi.org\/10.3390\/bios10020008\n\nPopulation growth and increased production demands on fruit and vegetables have driven agricultural production to new heights. Nevertheless, agriculture remains one of the least optimized industries, with laboratory tests that take days to provide a clear result on the chemical level of produce. To address this problem, the authors developed a tailor-made solution for the industry that can allow multiple field tests on key pesticides, based on a bioelectric cell biosensor and the measurement of the cell membrane potential changes, according to the principle of the Bioelectric Recognition Assay (BERA).https:\/\/www.mdpi.com\/2079-6374\/10\/2\/8","4b8182ed":"#Listeria\n\nListeria is a genus of bacteria that acts as an intracellular parasite in mammals. Until 1992, 10 species were known, each containing two subspecies. By 2019, 20 species had been identified. The genus received its current name, after the British pioneer of sterile surgery Joseph Lister, in 1940. Listeria species are Gram-positive, rod-shaped, and facultatively anaerobic, and do not produce endospores. The major human pathogen in the genus Listeria is L. monocytogenes. It is usually the causative agent of the relatively rare bacterial disease listeriosis, an infection caused by eating food contaminated with the bacteria.https:\/\/en.wikipedia.org\/wiki\/Listeria","85430b82":"#Reference\n https:\/\/github.com\/DanRothDataScience\/autoviz_test\/blob\/master\/AutoViz_test.ipynb\nhttps:\/\/www.kaggle.com\/nareshbhat\/data-visualization-in-just-a-single-line-of-"}}