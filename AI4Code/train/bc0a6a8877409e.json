{"cell_type":{"c7cd2a95":"code","07cd342a":"code","abbc6517":"code","c2aa9f0b":"code","4c47c7ef":"code","73bef8c6":"code","01faf9c5":"code","fcf5bb7c":"code","94a27b2c":"code","cd6c8bf8":"code","6c86d9ea":"code","4a2625d8":"code","1cb6b5d3":"code","ccedcd91":"code","7a859e4e":"code","770a6ea4":"code","7f6e4083":"code","07b19526":"code","663225ae":"code","10b82793":"code","15038cc2":"code","41408d5d":"code","62b43a87":"code","a508aa06":"code","72485ebe":"code","0c179ea7":"code","fb2a39f9":"code","ca050f51":"code","69c5a01c":"code","97d6ce1c":"code","06d63674":"code","6ca48980":"code","28165922":"code","8ea78ab7":"code","df018458":"code","c18bbec5":"code","63715842":"code","52a9de6b":"code","be1eb55c":"code","945d5b5f":"markdown","5110bc21":"markdown","1188ad88":"markdown","41acdc2e":"markdown","42daa800":"markdown","8926d089":"markdown","c1ac3335":"markdown","9f23cefe":"markdown","5235f79b":"markdown","7e9902e3":"markdown","300ff9a1":"markdown","b6c02f6a":"markdown","50ebf39a":"markdown","12912e6a":"markdown","6b881ec7":"markdown","dc20835e":"markdown","89b5d83d":"markdown","78d62985":"markdown","3b29f04e":"markdown","5c2df8c3":"markdown"},"source":{"c7cd2a95":"# KimBaek Seyeong\n# Class Data Analysis and Utilization\n\n# Comparison between 2019,12 and 2020,10\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random as rd\n\ndf1 = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2019_12_after_preprocessing.csv\", low_memory = False)\ndf2 = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2020_10_after_preprocessing.csv\", low_memory = False)\ndf1ch = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2019_12_changed_compared_with_2020_10_after_preprocessing.csv\", low_memory = False)\ndf2ch = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2020_10_changed_compared_with_2019_12_after_preprocessing.csv\", low_memory = False)\ndfad = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2020_10_added_compared_with_2019_12_after_preprocessing.csv\", low_memory = False)\ndfdr = pd.read_csv(\"\/kaggle\/input\/kbs-airbnb-after-preprocessing\/2020_10_dropped_compared_with_2019_12_after_preprocessing.csv\", low_memory = False)","07cd342a":"df1.info()\ndf2.info()\ndf1ch.info()\ndf2ch.info()\ndfad.info()\ndfdr.info()","abbc6517":"import matplotlib as mpl\nfrom subprocess import check_output\nfrom wordcloud import WordCloud, STOPWORDS","c2aa9f0b":"#mpl.rcParams['figure.figsize']=(8.0,6.0)    #(6.0,4.0)\nmpl.rcParams['font.size']=12                #10 \nmpl.rcParams['savefig.dpi']=100             #72 \nmpl.rcParams['figure.subplot.bottom']=.1\n\nstopwords = set(STOPWORDS)","4c47c7ef":"# df1, df2, df1ch, df2ch, dfad, dfdr\n# description, neighborhood_overview, amenities \ndata1 = df1['description']\ndata2 = df1['neighborhood_overview']\ndata3 = df1['amenities']\n\ndata4 = df2['description']\ndata5 = df2['neighborhood_overview']\ndata6 = df2['amenities']\n\ndata7 = df1ch['description']\ndata8 = df1ch['neighborhood_overview']\ndata9 = df1ch['amenities']\n\ndata10 = df2ch['description']\ndata11 = df2ch['neighborhood_overview']\ndata12 = df2ch['amenities']\n\ndata13 = dfad['description']\ndata14 = dfad['neighborhood_overview']\ndata15 = dfad['amenities']\n\ndata16 = dfdr['description']\ndata17 = dfdr['neighborhood_overview']\ndata18 = dfdr['amenities']","73bef8c6":"for i in range(1, 19):\n    globals()['wc{}'.format(i)] = WordCloud(background_color='white',\n                                            stopwords=stopwords,\n                                            max_words=200,\n                                            max_font_size=50, \n                                            random_state=42\n                                            ).generate(str(globals()['data{}'.format(i)]))","01faf9c5":"for i in range(1, 19):\n    print(globals()['wc{}'.format(i)])\n    fig = plt.figure(1)\n    plt.imshow(globals()['wc{}'.format(i)])\n    plt.axis('off')\n    plt.show()\n    # fig.savefig(globals()['wordcloud{}.png'.format(i)], dpi=900)\n    name = 'word'+str(i)+'.png'\n    fig.savefig(name, dpi=900)","fcf5bb7c":"word1 = df1.iloc[0,2]\nwordlist = word1.lower().split()","94a27b2c":"def clean_wordlist(input_list):\n    output_list = []\n    for word in input_list:\n        symbols = \"\"\"!@#$%^&*()_-+={[}]|\\;:\"\u2018'\u00b7<>?\/., \"\"\"\n        for i in range(len((symbols))):\n            word = word.replace(symbols[i], '')      \n        if len(word) > 0:\n            output_list.append(word)\n    return output_list\n    \nclean_list = clean_wordlist(wordlist)","cd6c8bf8":"def counter(input_list):\n    word_count = {}\n    for word in input_list:\n        if word in  word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n    \nword_count = counter(clean_list)\nword_count","6c86d9ea":"word_count = sorted(word_count.items(), key=lambda x:x[1], reverse=True)\nword_count","4a2625d8":"for i in range(0, len(data1)):\n    name1 = df1.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test1_{}'.format(i)] = name1\n    globals()['list1_{}'.format(i)] = name2","1cb6b5d3":"print(len(data1))","ccedcd91":"print(test1_0)\nprint(list1_0)\nprint(test1_24569)\nprint(list1_24569)","7a859e4e":"for i in range(0, len(data1)):\n    # cleanlist+i = clean_wordlist(list1_+i)\n    globals()['cleanlist1_{}'.format(i)] = clean_wordlist(globals()['list1_{}'.format(i)])","770a6ea4":"for i in range(0, len(data1)):\n    # word_count = counter(clean_list)\n    # word_count = sorted(word_count.items(), key=lambda x:x[1], reverse=True)\n    globals()['wordcount1_{}'.format(i)] = counter(globals()['cleanlist1_{}'.format(i)])\n    globals()['wordcount1_{}'.format(i)] = sorted(globals()['wordcount1_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)","7f6e4083":"type(cleanlist1_0)","07b19526":"cleanlist1 = []\nfor i in range(0, len(data1)):\n    cleanlist1 = cleanlist1 + globals()['cleanlist1_{}'.format(i)]","663225ae":"wordcount1 = counter(cleanlist1)\nwordcount1 = sorted(wordcount1.items(), key=lambda x:x[1], reverse=True)","10b82793":"print(len(cleanlist1))\nprint(len(wordcount1))\nprint(wordcount1)","15038cc2":"# data2 : df1, 3\nfor i in range(0, len(data2)):\n    name1 = df1.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test2_{}'.format(i)] = name1\n    globals()['list2_{}'.format(i)] = name2\n    \nfor i in range(0, len(data2)):\n    globals()['cleanlist2_{}'.format(i)] = clean_wordlist(globals()['list2_{}'.format(i)])\n    \nfor i in range(0, len(data2)):\n    globals()['wordcount2_{}'.format(i)] = counter(globals()['cleanlist2_{}'.format(i)])\n    globals()['wordcount2_{}'.format(i)] = sorted(globals()['wordcount2_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist2 = []\nfor i in range(0, len(data2)):\n    cleanlist2 = cleanlist2 + globals()['cleanlist2_{}'.format(i)]\n    \nwordcount2 = counter(cleanlist2)\nwordcount2 = sorted(wordcount2.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist2))\nprint(len(wordcount2))\nprint(wordcount2)","41408d5d":"# data3 : df1, 15\nfor i in range(0, len(data3)):\n    name1 = df1.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test3_{}'.format(i)] = name1\n    globals()['list3_{}'.format(i)] = name2\n    \nfor i in range(0, len(data3)):\n    globals()['cleanlist3_{}'.format(i)] = clean_wordlist(globals()['list3_{}'.format(i)])\n    \nfor i in range(0, len(data3)):\n    globals()['wordcount3_{}'.format(i)] = counter(globals()['cleanlist3_{}'.format(i)])\n    globals()['wordcount3_{}'.format(i)] = sorted(globals()['wordcount3_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist3 = []\nfor i in range(0, len(data3)):\n    cleanlist3 = cleanlist3 + globals()['cleanlist3_{}'.format(i)]\n    \nwordcount3 = counter(cleanlist3)\nwordcount3 = sorted(wordcount3.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist3))\nprint(len(wordcount3))\nprint(wordcount3)","62b43a87":"# data4 : df2, 2\nfor i in range(0, len(data4)):\n    name1 = df2.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test4_{}'.format(i)] = name1\n    globals()['list4_{}'.format(i)] = name2\n    \nfor i in range(0, len(data4)):\n    globals()['cleanlist4_{}'.format(i)] = clean_wordlist(globals()['list4_{}'.format(i)])\n    \nfor i in range(0, len(data4)):\n    globals()['wordcount4_{}'.format(i)] = counter(globals()['cleanlist4_{}'.format(i)])\n    globals()['wordcount4_{}'.format(i)] = sorted(globals()['wordcount4_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist4 = []\nfor i in range(0, len(data4)):\n    cleanlist4 = cleanlist4 + globals()['cleanlist4_{}'.format(i)]\n    \nwordcount4 = counter(cleanlist4)\nwordcount4 = sorted(wordcount4.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist4))\nprint(len(wordcount4))\nprint(wordcount4)","a508aa06":"# data5 : df2, 3\nfor i in range(0, len(data5)):\n    name1 = df2.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test5_{}'.format(i)] = name1\n    globals()['list5_{}'.format(i)] = name2\n    \nfor i in range(0, len(data5)):\n    globals()['cleanlist5_{}'.format(i)] = clean_wordlist(globals()['list5_{}'.format(i)])\n    \nfor i in range(0, len(data5)):\n    globals()['wordcount5_{}'.format(i)] = counter(globals()['cleanlist5_{}'.format(i)])\n    globals()['wordcount5_{}'.format(i)] = sorted(globals()['wordcount5_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist5 = []\nfor i in range(0, len(data5)):\n    cleanlist5 = cleanlist5 + globals()['cleanlist5_{}'.format(i)]\n    \nwordcount5 = counter(cleanlist5)\nwordcount5 = sorted(wordcount5.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist5))\nprint(len(wordcount5))\nprint(wordcount5)","72485ebe":"# data6 : df2, 15\nfor i in range(0, len(data6)):\n    name1 = df2.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test6_{}'.format(i)] = name1\n    globals()['list6_{}'.format(i)] = name2\n    \nfor i in range(0, len(data6)):\n    globals()['cleanlist6_{}'.format(i)] = clean_wordlist(globals()['list6_{}'.format(i)])\n    \nfor i in range(0, len(data6)):\n    globals()['wordcount6_{}'.format(i)] = counter(globals()['cleanlist6_{}'.format(i)])\n    globals()['wordcount6_{}'.format(i)] = sorted(globals()['wordcount6_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist6 = []\nfor i in range(0, len(data6)):\n    cleanlist6 = cleanlist6 + globals()['cleanlist6_{}'.format(i)]\n    \nwordcount6 = counter(cleanlist6)\nwordcount6 = sorted(wordcount6.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist6))\nprint(len(wordcount6))\nprint(wordcount6)","0c179ea7":"# data7 : df1ch, 2\nfor i in range(0, len(data7)):\n    name1 = df1ch.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test7_{}'.format(i)] = name1\n    globals()['list7_{}'.format(i)] = name2\n    \nfor i in range(0, len(data7)):\n    globals()['cleanlist7_{}'.format(i)] = clean_wordlist(globals()['list7_{}'.format(i)])\n    \nfor i in range(0, len(data7)):\n    globals()['wordcount7_{}'.format(i)] = counter(globals()['cleanlist7_{}'.format(i)])\n    globals()['wordcount7_{}'.format(i)] = sorted(globals()['wordcount7_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist7 = []\nfor i in range(0, len(data7)):\n    cleanlist7 = cleanlist7 + globals()['cleanlist7_{}'.format(i)]\n    \nwordcount7 = counter(cleanlist7)\nwordcount7 = sorted(wordcount7.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist7))\nprint(len(wordcount7))\nprint(wordcount7)","fb2a39f9":"# data8 : df1ch, 3\nfor i in range(0, len(data8)):\n    name1 = df1ch.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test8_{}'.format(i)] = name1\n    globals()['list8_{}'.format(i)] = name2\n    \nfor i in range(0, len(data8)):\n    globals()['cleanlist8_{}'.format(i)] = clean_wordlist(globals()['list8_{}'.format(i)])\n    \nfor i in range(0, len(data8)):\n    globals()['wordcount8_{}'.format(i)] = counter(globals()['cleanlist8_{}'.format(i)])\n    globals()['wordcount8_{}'.format(i)] = sorted(globals()['wordcount8_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist8 = []\nfor i in range(0, len(data8)):\n    cleanlist8 = cleanlist8 + globals()['cleanlist8_{}'.format(i)]\n    \nwordcount8 = counter(cleanlist8)\nwordcount8 = sorted(wordcount8.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist8))\nprint(len(wordcount8))\nprint(wordcount8)","ca050f51":"# data9 : df1ch, 15\nfor i in range(0, len(data9)):\n    name1 = df1ch.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test9_{}'.format(i)] = name1\n    globals()['list9_{}'.format(i)] = name2\n    \nfor i in range(0, len(data9)):\n    globals()['cleanlist9_{}'.format(i)] = clean_wordlist(globals()['list9_{}'.format(i)])\n    \nfor i in range(0, len(data9)):\n    globals()['wordcount9_{}'.format(i)] = counter(globals()['cleanlist9_{}'.format(i)])\n    globals()['wordcount9_{}'.format(i)] = sorted(globals()['wordcount9_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist9 = []\nfor i in range(0, len(data9)):\n    cleanlist9 = cleanlist9 + globals()['cleanlist9_{}'.format(i)]\n    \nwordcount9 = counter(cleanlist9)\nwordcount9 = sorted(wordcount9.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist9))\nprint(len(wordcount9))\nprint(wordcount9)","69c5a01c":"# data10 : df2ch, 2\nfor i in range(0, len(data10)):\n    name1 = df2ch.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test10_{}'.format(i)] = name1\n    globals()['list10_{}'.format(i)] = name2\n    \nfor i in range(0, len(data10)):\n    globals()['cleanlist10_{}'.format(i)] = clean_wordlist(globals()['list10_{}'.format(i)])\n    \nfor i in range(0, len(data10)):\n    globals()['wordcount10_{}'.format(i)] = counter(globals()['cleanlist10_{}'.format(i)])\n    globals()['wordcount10_{}'.format(i)] = sorted(globals()['wordcount10_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist10 = []\nfor i in range(0, len(data10)):\n    cleanlist10 = cleanlist10 + globals()['cleanlist10_{}'.format(i)]\n    \nwordcount10 = counter(cleanlist10)\nwordcount10 = sorted(wordcount10.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist10))\nprint(len(wordcount10))\nprint(wordcount10)","97d6ce1c":"# data11 : df2ch, 3\nfor i in range(0, len(data11)):\n    name1 = df2ch.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test11_{}'.format(i)] = name1\n    globals()['list11_{}'.format(i)] = name2\n    \nfor i in range(0, len(data11)):\n    globals()['cleanlist11_{}'.format(i)] = clean_wordlist(globals()['list11_{}'.format(i)])\n    \nfor i in range(0, len(data11)):\n    globals()['wordcount11_{}'.format(i)] = counter(globals()['cleanlist11_{}'.format(i)])\n    globals()['wordcount11_{}'.format(i)] = sorted(globals()['wordcount11_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist11 = []\nfor i in range(0, len(data11)):\n    cleanlist11 = cleanlist11 + globals()['cleanlist11_{}'.format(i)]\n    \nwordcount11 = counter(cleanlist11)\nwordcount11 = sorted(wordcount11.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist11))\nprint(len(wordcount11))\nprint(wordcount11)","06d63674":"# data12 : df2ch, 15\nfor i in range(0, len(data12)):\n    name1 = df2ch.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test12_{}'.format(i)] = name1\n    globals()['list12_{}'.format(i)] = name2\n    \nfor i in range(0, len(data12)):\n    globals()['cleanlist12_{}'.format(i)] = clean_wordlist(globals()['list12_{}'.format(i)])\n    \nfor i in range(0, len(data12)):\n    globals()['wordcount12_{}'.format(i)] = counter(globals()['cleanlist12_{}'.format(i)])\n    globals()['wordcount12_{}'.format(i)] = sorted(globals()['wordcount12_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist12 = []\nfor i in range(0, len(data12)):\n    cleanlist12 = cleanlist12 + globals()['cleanlist12_{}'.format(i)]\n    \nwordcount12 = counter(cleanlist12)\nwordcount12 = sorted(wordcount12.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist12))\nprint(len(wordcount12))\nprint(wordcount12)","6ca48980":"# data13 : dfad, 2\nfor i in range(0, len(data13)):\n    name1 = dfad.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test13_{}'.format(i)] = name1\n    globals()['list13_{}'.format(i)] = name2\n    \nfor i in range(0, len(data13)):\n    globals()['cleanlist13_{}'.format(i)] = clean_wordlist(globals()['list13_{}'.format(i)])\n    \nfor i in range(0, len(data13)):\n    globals()['wordcount13_{}'.format(i)] = counter(globals()['cleanlist13_{}'.format(i)])\n    globals()['wordcount13_{}'.format(i)] = sorted(globals()['wordcount13_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist13 = []\nfor i in range(0, len(data13)):\n    cleanlist13 = cleanlist13 + globals()['cleanlist13_{}'.format(i)]\n    \nwordcount13 = counter(cleanlist13)\nwordcount13 = sorted(wordcount13.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist13))\nprint(len(wordcount13))\nprint(wordcount13)","28165922":"# data14 : dfad, 3\nfor i in range(0, len(data14)):\n    name1 = dfad.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test14_{}'.format(i)] = name1\n    globals()['list14_{}'.format(i)] = name2\n    \nfor i in range(0, len(data14)):\n    globals()['cleanlist14_{}'.format(i)] = clean_wordlist(globals()['list14_{}'.format(i)])\n    \nfor i in range(0, len(data14)):\n    globals()['wordcount14_{}'.format(i)] = counter(globals()['cleanlist14_{}'.format(i)])\n    globals()['wordcount14_{}'.format(i)] = sorted(globals()['wordcount14_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist14 = []\nfor i in range(0, len(data14)):\n    cleanlist14 = cleanlist14 + globals()['cleanlist14_{}'.format(i)]\n    \nwordcount14 = counter(cleanlist14)\nwordcount14 = sorted(wordcount14.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist14))\nprint(len(wordcount14))\nprint(wordcount14)","8ea78ab7":"# data15 : dfad, 15\nfor i in range(0, len(data15)):\n    name1 = dfad.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test15_{}'.format(i)] = name1\n    globals()['list15_{}'.format(i)] = name2\n    \nfor i in range(0, len(data15)):\n    globals()['cleanlist15_{}'.format(i)] = clean_wordlist(globals()['list15_{}'.format(i)])\n    \nfor i in range(0, len(data15)):\n    globals()['wordcount15_{}'.format(i)] = counter(globals()['cleanlist15_{}'.format(i)])\n    globals()['wordcount15_{}'.format(i)] = sorted(globals()['wordcount15_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist15 = []\nfor i in range(0, len(data15)):\n    cleanlist15 = cleanlist15 + globals()['cleanlist15_{}'.format(i)]\n    \nwordcount15 = counter(cleanlist15)\nwordcount15 = sorted(wordcount15.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist15))\nprint(len(wordcount15))\nprint(wordcount15)","df018458":"# data16 : dfdr, 2\nfor i in range(0, len(data16)):\n    name1 = dfdr.iloc[i, 2]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test16_{}'.format(i)] = name1\n    globals()['list16_{}'.format(i)] = name2\n    \nfor i in range(0, len(data16)):\n    globals()['cleanlist16_{}'.format(i)] = clean_wordlist(globals()['list16_{}'.format(i)])\n    \nfor i in range(0, len(data16)):\n    globals()['wordcount16_{}'.format(i)] = counter(globals()['cleanlist16_{}'.format(i)])\n    globals()['wordcount16_{}'.format(i)] = sorted(globals()['wordcount16_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist16 = []\nfor i in range(0, len(data16)):\n    cleanlist16 = cleanlist16 + globals()['cleanlist16_{}'.format(i)]\n    \nwordcount16 = counter(cleanlist16)\nwordcount16 = sorted(wordcount16.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist16))\nprint(len(wordcount16))\nprint(wordcount16)","c18bbec5":"# data17 : dfdr, 3\nfor i in range(0, len(data17)):\n    name1 = dfdr.iloc[i, 3]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test17_{}'.format(i)] = name1\n    globals()['list17_{}'.format(i)] = name2\n    \nfor i in range(0, len(data17)):\n    globals()['cleanlist17_{}'.format(i)] = clean_wordlist(globals()['list17_{}'.format(i)])\n    \nfor i in range(0, len(data17)):\n    globals()['wordcount17_{}'.format(i)] = counter(globals()['cleanlist17_{}'.format(i)])\n    globals()['wordcount17_{}'.format(i)] = sorted(globals()['wordcount17_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist17 = []\nfor i in range(0, len(data17)):\n    cleanlist17 = cleanlist17 + globals()['cleanlist17_{}'.format(i)]\n    \nwordcount17 = counter(cleanlist17)\nwordcount17 = sorted(wordcount17.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist17))\nprint(len(wordcount17))\nprint(wordcount17)","63715842":"# data18 : dfdr, 15\nfor i in range(0, len(data18)):\n    name1 = dfdr.iloc[i, 15]\n    name1 = str(name1)\n    name2 = name1.lower().split()\n    globals()['test18_{}'.format(i)] = name1\n    globals()['list18_{}'.format(i)] = name2\n    \nfor i in range(0, len(data18)):\n    globals()['cleanlist18_{}'.format(i)] = clean_wordlist(globals()['list18_{}'.format(i)])\n    \nfor i in range(0, len(data18)):\n    globals()['wordcount18_{}'.format(i)] = counter(globals()['cleanlist18_{}'.format(i)])\n    globals()['wordcount18_{}'.format(i)] = sorted(globals()['wordcount18_{}'.format(i)].items(), key=lambda x:x[1], reverse=True)\n    \ncleanlist18 = []\nfor i in range(0, len(data18)):\n    cleanlist18 = cleanlist18 + globals()['cleanlist18_{}'.format(i)]\n    \nwordcount18 = counter(cleanlist18)\nwordcount18 = sorted(wordcount18.items(), key=lambda x:x[1], reverse=True)\n\nprint(len(cleanlist18))\nprint(len(wordcount18))\nprint(wordcount18)","52a9de6b":"# code from Inah Song\nwordcount1_df = pd.DataFrame(wordcount1)\nwordcount1_df.to_csv(\"wordcount1.csv\", index=False)\nwordcount2_df = pd.DataFrame(wordcount2)\nwordcount2_df.to_csv(\"wordcount2.csv\", index=False)\nwordcount3_df = pd.DataFrame(wordcount3)\nwordcount3_df.to_csv(\"wordcount3.csv\", index=False)\n\nwordcount4_df = pd.DataFrame(wordcount4)\nwordcount4_df.to_csv(\"wordcount4.csv\", index=False)\nwordcount5_df = pd.DataFrame(wordcount5)\nwordcount5_df.to_csv(\"wordcount5.csv\", index=False)\nwordcount6_df = pd.DataFrame(wordcount6)\nwordcount6_df.to_csv(\"wordcount6.csv\", index=False)\n\nwordcount7_df = pd.DataFrame(wordcount7)\nwordcount7_df.to_csv(\"wordcount7.csv\", index=False)\nwordcount8_df = pd.DataFrame(wordcount8)\nwordcount8_df.to_csv(\"wordcount8.csv\", index=False)\nwordcount9_df = pd.DataFrame(wordcount9)\nwordcount9_df.to_csv(\"wordcount9.csv\", index=False)\n\nwordcount10_df = pd.DataFrame(wordcount10)\nwordcount10_df.to_csv(\"wordcount10.csv\", index=False)\nwordcount11_df = pd.DataFrame(wordcount11)\nwordcount11_df.to_csv(\"wordcount11.csv\", index=False)\nwordcount12_df = pd.DataFrame(wordcount12)\nwordcount12_df.to_csv(\"wordcount12.csv\", index=False)\n\nwordcount13_df = pd.DataFrame(wordcount13)\nwordcount13_df.to_csv(\"wordcount13.csv\", index=False)\nwordcount14_df = pd.DataFrame(wordcount14)\nwordcount14_df.to_csv(\"wordcount14.csv\", index=False)\nwordcount15_df = pd.DataFrame(wordcount15)\nwordcount15_df.to_csv(\"wordcount15.csv\", index=False)\n\nwordcount16_df = pd.DataFrame(wordcount16)\nwordcount16_df.to_csv(\"wordcount16.csv\", index=False)\nwordcount17_df = pd.DataFrame(wordcount17)\nwordcount17_df.to_csv(\"wordcount17.csv\", index=False)\nwordcount18_df = pd.DataFrame(wordcount18)\nwordcount18_df.to_csv(\"wordcount18.csv\", index=False)","be1eb55c":"wordcount1_df.head()","945d5b5f":"\uc608\uc81c\uc5d0\uc11c \uc791\uc131\ud55c clean_wordlist \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \uae30\ud638\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4.","5110bc21":"\ubc14\ub85c split\uc744 \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 data1(df1, description)\uc744 \ud0c0\uac9f\uc73c\ub85c \uc6d0\uc18c\ub97c \ud558\ub098\uc529 \ubb38\uc7a5\uc744 \ub098\ub220 list1_i\uc5d0 \uc800\uc7a5\ud588\uc2b5\ub2c8\ub2e4.","1188ad88":"\uc608\uc81c\uc5d0\uc11c \uc791\uc131\ud55c counter \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 \ub2e8\uc5b4 \ube48\ub3c4\uc218\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n\n24570\uac1c\uc758 \ub098\ub220\uc9c4 \ub370\uc774\ud130\ub4e4\uc744 \ud558\ub098\ub85c \ud569\uccd0 \ub2e8\uc5b4 \ube48\ub3c4\ub97c \uacc4\uc0b0\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0, clean_wordlist \ud568\uc218\ub97c \uc801\uc6a9\ud55c cleanlist1_0 ~ cleanlist1_24569\ub97c \ud558\ub098\uc758 cleanlist1\ub85c \ud569\uccd0\uc90d\ub2c8\ub2e4.","41acdc2e":"# \uc791\uc131\ud55c notebook \ucc38\uace0\uc6a9 url \ucca8\ubd80\n\n* Preprocessing Airbnb Data 2019\/12 and 2020\/10 : https:\/\/www.kaggle.com\/kimbaekseyeong\/preprocessing-airbnb-data-2019-12-and-2020-10\n* Data Extraction Airbnb Data 2019\/12 and 2020\/10 : https:\/\/www.kaggle.com\/kimbaekseyeong\/extracting-dataset-airbnb-data-2019-12-and-2020-10\n* NB for Regular Expression Test : https:\/\/www.kaggle.com\/kimbaekseyeong\/nb-for-regular-expression-test","42daa800":"# Non-numerical, Word Count (data2~18)\n\ndata1~3 : df1\n\ndata4~6 : df2\n\ndata7~9 : df1ch\n\ndata10~12 : df2ch\n\ndata13~15 : dfad\n\ndata16~18 : dfdr\n\ndescription(2), neighborhood_overview(3), amenities(15)","8926d089":"# Continued...\n\n\uc774\uc5b4\uc9c0\ub294 notebook\uc5d0\uc11c \uc9c4\ud589\ud560 \uc0ac\ud56d\ub4e4\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n\ud604\uc7ac \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0 \ucd94\uac00\ud574\uc57c \ud560 \ubd80\ubd84:\n* \ubd88\uc6a9\uc5b4(\uc608\uce21\/\ud559\uc2b5\uc5d0 \uc2e4\uc81c\ub85c \uae30\uc5ec\ud558\uc9c0 \uc54a\ub294 \ud14d\uc2a4\ud2b8) \uc81c\uac70\n* \uc5b4\uac04(\uacfc\uac70, \ud604\uc7ac, \ubbf8\ub798\ud615\uc758 \uad6c\ubd84\uc744 \ubb34\ud6a8\ud654 \ud558\uae30 \uc704\ud568) \ucd94\ucd9c\n\n\uc704\uc758 \uacfc\uc815\uc774 \ub05d\ub09c \uc774\ud6c4:\n* \uc804\ucc98\ub9ac \uc644\ub8cc\ud55c \uacb0\uacfc csv \ud30c\uc77c\ub85c output\n* \uadf8\ub8f9 \ub098\ub204\uae30 + \ub098\ub220\uc11c numerical, non-numerical \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubc0f \ube44\uad50 (\uadf8\ub8f9\ubcc4, \uc2dc\uae30\ubcc4)","c1ac3335":"# Input Datasets","9f23cefe":"counter \ud568\uc218\uc5d0\uc11c\ub294 \uae30\ud638\ub97c \uc81c\uac70\ud55c \ub2e8\uc5b4\ub97c \uc804\uccb4 \ubb38\uc7a5 \uc548\uc5d0\uc11c \ud655\uc778\ud558\uba74\uc11c \uac2f\uc218\ub97c \ud29c\ud50c \ud615\ud0dc\ub85c \ud568\uaed8 \uc800\uc7a5\ud569\ub2c8\ub2e4.","5235f79b":"numerical\uacfc non-numerical \ub370\uc774\ud130\ud0c0\uc785\uc73c\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4.\n* numerical : id, host_id, latitude, longitude, accommodates, bathrooms, bedrooms, beds, price, minimum_nights, maximum_nights, availability_365, number_of_reviews, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month\n* non-numerical : name, description, neighborhood_overview, host_name, neighbourhood_cleansed, neighbourhood_group_cleansed, room_type, amenities, first_review\n\n\uc5ec\uae30\uc11c \uc6cc\ub4dc \ud074\ub77c\uc6b0\ub4dc \uc791\uc131\uc774 \ud544\uc694\ud55c column\uc740 description, neighborhood_overview, amenities \uc785\ub2c8\ub2e4.","7e9902e3":"non-numerical datatype column\uc740 \ubaa8\ub4e0 row\uac00 multi string\uc744 \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ud558\ub098\uc758 \uc140\uc5d0\uc11c \ubaa8\ub4e0 \ub2e8\uc5b4\ub97c \uacf5\ubc31\uc744 \uae30\uc900\uc73c\ub85c \ub098\ub220 \ubaa8\ub4e0 \ub2e8\uc5b4\ub97c wordlist\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.","300ff9a1":"# Notebook Outline\n\n\ud544\uc218\uc801\uc778 \ubd80\ubd84\uc5d0\uc11c\uc758 Data Preprocessing\uc744 \ub9c8\ucce4\uae30 \ub54c\ubb38\uc5d0 \ubd84\uc11d \ubaa9\uc801\uc5d0 \ub530\ub978 \uac04\ub2e8\ud55c \ucf54\ub4dc\ubd80\ud130 \uc791\uc131\uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4.\n\n\ud574\ub2f9 notebook\uc5d0\uc11c\ub294 numerical data\uc758 \ud1b5\uacc4\ub97c \uc815\ub9ac\ud558\uace0 \uc784\uc758 \ubd84\ub958\ud55c \uadf8\ub8f9\uc5d0 \ub530\ub978 numerical data\uc758 \ubd84\ud3ec\uc640 \ube44\uc728\uc744 \uc0b4\ud3b4\ubcfc \uac83\uc774\uba70, non-numerical data\uc5d0\uc11c\ub294 \uc6b0\uc120 column \ubcc4\ub85c word cloud\ub97c \uc791\uc131\ud558\uace0 \ud45c\ud604\uacfc \ub2e8\uc5b4\uc758 \ub4f1\uc7a5 \ube48\ub3c4\ub97c \ud655\uc778\ud574 \uc800\uc7a5\ud560 \uac83\uc785\ub2c8\ub2e4.","b6c02f6a":"# Non-numerical, Word Count Test","50ebf39a":"# Non-numerical, Word Cloud","12912e6a":"\ud29c\ud50c \ud615\ud0dc\ub85c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ub41c \ub370\uc774\ud130\ub97c \uac2f\uc218\uac00 \ub9ce\uc740 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud558\uc5ec \uc800\uc7a5 \ubc0f \ud655\uc778\ud569\ub2c8\ub2e4.","6b881ec7":"clean wordlist \ud568\uc218\uc5d0\uc11c\ub294 \ub9ac\uc2a4\ud2b8\ub97c input\uc73c\ub85c \ubc1b\uc544 \ub2e8\uc5b4 \ube48\ub3c4 \ubd84\uc11d\uc5d0 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uae30\ud638\ub4e4\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4.","dc20835e":"\ub370\uc774\ud130 \ud504\ub808\uc784 \uc774\ub984 \uba54\ubaa8\n* df1 : 2019\ub144 12\uc6d4 Airbnb \uc81c\uacf5 NY, United States \ub370\uc774\ud130\uc14b(30\uac1c\uc758 column)\n* df2 : 2020\ub144 10\uc6d4 Airbnb \uc81c\uacf5 NY, United States \ub370\uc774\ud130\uc14b(30\uac1c\uc758 column)\n* df1ch : 2019\ub144 12\uc6d4 Airbnb \uc81c\uacf5 NY, United States \ub370\uc774\ud130\uc14b \uc911 2020\ub144 10\uc6d4\uc5d0 \ub370\uc774\ud130\uc5d0 \ubcc0\ub3d9\uc0ac\ud56d\uc774 \uc788\ub294 \ub9e4\ubb3c(30\uac1c\uc758 column)\n* df2ch : 2020\ub144 10\uc6d4 Airbnb \uc81c\uacf5 NY, United States \ub370\uc774\ud130\uc14b \uc911 2019\ub144 12\uc6d4\uacfc \ube44\uad50\ud588\uc744 \ub54c \ub370\uc774\ud130 \ubcc0\ub3d9\uc0ac\ud56d\uc774 \uc788\ub294 \ub9e4\ubb3c(30\uac1c\uc758 column)\n* dfad : 2019\ub144 12\uc6d4\uc5d0\ub294 \uc5c6\uc5c8\uc73c\ub098 2020\ub144 10\uc6d4\uc5d0 \ucd94\uac00\ub41c \ub370\uc774\ud130 \ubaa8\uc74c \ub370\uc774\ud130\uc14b(30\uac1c\uc758 column)\n* dfdr : 2019\ub144 12\uc6d4\uc5d0\ub294 \uc788\uc5c8\uc73c\ub098 2020\ub144 10\uc6d4\uc5d0 \uc0ac\ub77c\uc9c4 \ub370\uc774\ud130 \ubaa8\uc74c \ub370\uc774\ud130\uc14b(30\uac1c\uc758 column)\n\n\uc774\uc5b4 info() function\uc744 \ud1b5\ud574 column\uacfc column\uc5d0 \ud574\ub2f9\ud558\ub294 datatype\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","89b5d83d":"\uc815\ub82c\ud558\uc9c0 \uc54a\uc740 \ub2e8\uc5b4 \ube48\ub3c4\uc218 \ud655\uc778 \ubc30\uc5f4\uc744 wordcount{}.csv \ud615\ud0dc\ub85c \uc800\uc7a5\ud569\ub2c8\ub2e4.","78d62985":"\ucd9c\ub825 \uacb0\uacfc\ub97c \ubcf4\uba74 \uc798 \ub098\ub220\uc9c4 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3b29f04e":"# Non-numerical, Word Count Example\n\n\uc5ec\uae30\uc11c \ub2e8\uc5b4 \ube48\ub3c4\uc218\ub97c \ud655\uc778\ud560 column\uc740 description(2), neighborhood_overview(3), amenities(15) \uc785\ub2c8\ub2e4.\n\n\uc6b0\uc120 \uc804\uccb4 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc801\uc6a9\ud558\uae30 \uc774\uc804\uc5d0 \ud558\ub098\uc758 cell\uc744 \uc9c0\uc815\ud574 \ud14c\uc2a4\ud2b8\ub97c \ud569\ub2c8\ub2e4.","5c2df8c3":"\ub370\uc774\ud130 \ud504\ub808\uc784 column \uba54\ubaa8\n* id (int)\n* name : \ub4f1\ub85d\ub41c \uc219\uc18c \uc774\ub984 (obj)\n* description : \uc219\uc18c\uc5d0 \ub300\ud55c \uc18c\uac1c (obj)\n* neighborhood_overview : \uc219\uc18c \uc778\uadfc \uc2dc\uc124 (obj)\n* host_id : \ud638\uc2a4\ud2b8 \uc544\uc774\ub514 (int)\n* host_name : \ud638\uc2a4\ud2b8 \uc774\ub984 (obj)\n* neighbourhood_cleansed : \uc138\ubd80\uc9c0\uc5ed(\ub354 \uc791\uc740 \ubc94\uc704) (obj)\n* neighbourhood_group_cleansed : \uc138\ubd80\uc9c0\uc5ed (obj)\n* latitude : \uc704\ub3c4 (float)\n* longitude : \uacbd\ub3c4 (float)\n* room_type : \uc219\uc18c \uad6c\ubd84 (obj)\n* accommodates : \uc219\uc18c \uc218\uc6a9 \uac00\ub2a5 \uc778\uc6d0 (int)\n* bathrooms : \uc695\uc2e4 \uc218 (float)\n* bedrooms : \uce68\uc2e4 \uc218 (float)\n* beds : \uce68\ub300\/\uc7a0\uc790\ub9ac \uc218 (float)\n* amenities : \uc219\uc18c\uc5d0\uc11c \uc774\uc6a9\uac00\ub2a5\ud55c \uac83\ub4e4 \uc911 \ud638\uc2a4\ud2b8\uac00 \uccb4\ud06c\ud574\ub454 \uac83\ub4e4\uc758 \uc9d1\ud569 (obj)\n* price : \uc219\uc18c \uc774\uc6a9\ube44 (float)\n* minimum_nights : \ucd5c\uc18c \uc219\ubc15 \uc77c\uc218 (int)\n* maximum_nights : \ucd5c\ub300 \uc219\ubc15 \uc77c\uc218 (int)\n* availability_365 : \uc5f0\uc911 \uc774\uc6a9 \uac00\ub2a5 \uc77c\uc218 (int)\n* number_of_reviews : \uc774\uc6a9\ud6c4\uae30 \uc218 (int)\n* first_review : \uccab \uc774\uc6a9\ud6c4\uae30 \uc791\uc131\ub41c \uc77c\uc790 (obj)\n* review_scores_rating : \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 \ub4f1\uae09 (float)\n* review_scores_accuracy : \uc815\ud655\ub3c4\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* review_scores_cleanliness : \uccad\uacb0\ub3c4\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* review_scores_checkin : \uc219\uc18c \uc608\uc57d\uacfc \ucd9c\uc785\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* review_scores_communication : \ud638\uc2a4\ud2b8\uc640\uc758 \uc5f0\ub77d\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* review_scores_location : \uc704\uce58\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* review_scores_value : value\uc5d0 \uad00\ud55c \uc774\uc6a9\ud6c4\uae30 \uc810\uc218 (float)\n* reviews_per_month : \uc6d4\ud3c9\uade0 \uc774\uc6a9\ud6c4\uae30 \uc791\uc131 \uc218 (float)"}}