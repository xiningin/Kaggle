{"cell_type":{"471910d1":"code","20a2ebc3":"code","bc3a5505":"code","5e5fa372":"code","8c0b3b37":"code","ae5f8e10":"code","72f732f3":"code","09bbe717":"code","1937d5c4":"code","fece32c9":"code","aa53d304":"code","640d58a0":"code","10d199a8":"code","03b42d28":"code","c9195a69":"code","54d0a4be":"code","979ae600":"code","dd63b857":"code","5141178d":"code","591e5181":"code","7fb56bb8":"code","3ee0aae2":"code","95ec085c":"code","29f66aae":"code","656bdf5f":"code","4d06bce5":"code","2c18fb3d":"code","ec72d182":"code","6e7bbd83":"code","60a05b93":"code","9fe867c1":"code","dc89978b":"code","a6bdbbd8":"code","24f2e3e9":"code","481daa8a":"code","52a18091":"code","45db31c7":"code","fffbdfcc":"markdown","9f9a9769":"markdown","f3177af9":"markdown","e987e49f":"markdown","22f480f0":"markdown","f82f9198":"markdown","144f53e2":"markdown","72bfd22e":"markdown","058a9f28":"markdown","db294068":"markdown","d132899a":"markdown","c91d61fc":"markdown","bdeca26d":"markdown","04c780fc":"markdown","037d07f1":"markdown","0a5c365c":"markdown","6b6735fe":"markdown","95c1365c":"markdown","f3f2d8d2":"markdown","94bbe452":"markdown","05d3812d":"markdown","39ea64d8":"markdown"},"source":{"471910d1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\n\n%matplotlib inline","20a2ebc3":"df_raw = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')","bc3a5505":"df_raw.info()","5e5fa372":"# PatientId should be int64, not float64\ndf_raw['PatientId'] = df_raw['PatientId'].astype('int64')\n\n# Convert ScheduledDay and AppointmentDay to datetime64[ns]\ndf_raw['ScheduledDay'] = pd.to_datetime(df_raw['ScheduledDay']).dt.date.astype('datetime64[ns]')\ndf_raw['AppointmentDay'] = pd.to_datetime(df_raw['AppointmentDay']).dt.date.astype('datetime64[ns]')","8c0b3b37":"# check the head of dataset\ndf_raw.head()","ae5f8e10":"# rename typo columns\ndf_raw.rename(columns={\"Hipertension\": \"Hypertension\",\"Handcap\":\"Handicap\",\n                      \"SMS_received\": \"SMSReceived\", \"No-show\": \"NoShow\"},inplace=True)","72f732f3":"# check for typos\nprint(sorted(df_raw['Neighbourhood'].unique()))","09bbe717":"# Check Age\nprint(sorted(df_raw['Age'].unique()))","1937d5c4":"df_raw[df_raw['Age'] == -1]","fece32c9":"df_raw[df_raw['Age'] == 115]","aa53d304":"# Remove erroneous entries\ndf_raw = df_raw[(df_raw['Age'] < 115) & (df_raw['Age'] > 0)]","640d58a0":"df_raw = df_raw.drop(['PatientId','AppointmentID'],axis=1)","10d199a8":"df_raw['ScheduledMonth'] = df_raw['ScheduledDay'].dt.month\ndf_raw['ScheduledDayofWeek'] = df_raw['ScheduledDay'].dt.day_name()\ndf_raw['ScheduledHour'] = df_raw['ScheduledDay'].dt.hour","03b42d28":"df_raw['AppointmentMonth'] = df_raw['AppointmentDay'].dt.month\ndf_raw['AppointmentDayofWeek'] = df_raw['AppointmentDay'].dt.day_name()\ndf_raw['AppointmentHour'] = df_raw['AppointmentDay'].dt.hour","c9195a69":"sns.countplot(x='Gender', hue='NoShow', data=df_raw)","54d0a4be":"plt.figure(figsize=(30,12))\nfig = sns.countplot(x='Neighbourhood',hue='NoShow',data=df_raw)\nfig.set_xticklabels(fig.get_xticklabels(), rotation=90);","979ae600":"sns.heatmap(df_raw.corr(), vmin=-0.9, vmax=0.9,cmap='coolwarm')","dd63b857":"df_raw['AppointmentDayofWeek'] = df_raw['AppointmentDay'].dt.weekday\ndf_raw['ScheduledDayofWeek'] = df_raw['ScheduledDay'].dt.weekday","5141178d":"df_raw['NoShow'] = pd.get_dummies(df_raw['NoShow'])['Yes']","591e5181":"no_show = len(df_raw[df_raw['NoShow'] == 1])\nprint(f'No-shows: {no_show}')\n\ntotal = len(df_raw)\nprint(f'Percentage no-show: {(no_show\/total) * 100}')","7fb56bb8":"# skewed towards female entries\nprint(f\"Gender entries: {df_raw['Gender'].unique()}\")\nprint(df_raw['Gender'].describe())\ndf_raw['Male'] = pd.get_dummies(df_raw['Gender'])['M']\n      \ndf_raw = df_raw.drop('Gender',axis=1)","3ee0aae2":"# get dummy variables for neighbourhood\nneighbourhoods = pd.get_dummies(df_raw['Neighbourhood'])\n\n# join dummy neighbourhood columns and drop string neighbourhood column\ndf_raw = df_raw.join(neighbourhoods).drop('Neighbourhood',axis=1)","95ec085c":"df = df_raw.drop(['AppointmentDay','ScheduledDay'],axis=1)","29f66aae":"# import StandardScaler from Scikit learn\nfrom sklearn.preprocessing import StandardScaler\n\n# create StandardScaler object\nscaler = StandardScaler()\n\n# fit scaler to features\nscaler.fit(df.drop(['NoShow'],axis=1))","656bdf5f":"# use .transform() to transform features to scaled version\nscaled_features = scaler.transform(df.drop('NoShow',axis=1))","4d06bce5":"df_feat = pd.DataFrame(scaled_features)\ndf_feat.head()","2c18fb3d":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\nX = df_feat  # Features\ny = df['NoShow']  # Labels\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test\n","ec72d182":"from sklearn.tree import DecisionTreeClassifier\n\ndtree = DecisionTreeClassifier()\n\n# fit to data\ndtree.fit(X_train,y_train)\n\n# get predictions\ndtree_pred = dtree.predict(X_test)","6e7bbd83":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn.metrics import classification_report,confusion_matrix","60a05b93":"print(classification_report(y_test,dtree_pred))","9fe867c1":"print(\"Confusion matrix:\\n\",confusion_matrix(y_test, dtree_pred))","dc89978b":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nrfc = RandomForestClassifier(n_estimators=100,verbose=5)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nrfc.fit(X_train,y_train)\n\nrfc_pred = rfc.predict(X_test)","a6bdbbd8":"print(classification_report(y_test,rfc_pred))","24f2e3e9":"# Model Accuracy, how often is the classifier correct?\nprint(\"Confusion matrix:\\n\",confusion_matrix(y_test, rfc_pred))","481daa8a":"from sklearn.linear_model import LogisticRegression\n\n# Instantiate model\nlogmodel = LogisticRegression(max_iter=1000)\n\n# Train model\nlogmodel.fit(X_train,y_train)\n\n# Get predictions\nlog_pred = logmodel.predict(X_test)","52a18091":"print(classification_report(y_test,log_pred))","45db31c7":"print(\"Confusion matrix:\\n\",confusion_matrix(y_test, log_pred))","fffbdfcc":"## Random Forest\nWe got 73% accuracy with a single decision tree, let's see if we can improve that with a random forest classifier","9f9a9769":"### Clean up datatypes\nNow I check for mismatched datatypes and convert each category appropriately.","f3177af9":"# Predicting No-Shows in Hospitals\nIn this notebook I look at the [\"Medical Appointment No Shows\" dataset](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments) on www.kaggle.com\nAfter cleaning the data, I will use Machine Learning models to predict future no shows.","e987e49f":"# Step 1: Data Wrangling\nAfter reading in my data, I'm going to look for missing values and invalid entries.","22f480f0":"# Step 3: Preprocessing\n* Next I prepare data for modelling, creating logical variables and dropping redundant features","f82f9198":"### Check for typos","144f53e2":"# Step 4: Modelling\n* Now I'll make some predictions using Machine Learning models","72bfd22e":"## Decision Tree Model\nI'll start by training a single decision tree first.","058a9f28":"Looks clean, so I check other categories","db294068":"## Logistic Regression\nLastly I'll try a logistic regression model.","d132899a":"* \"Age\" column has negative value and anomalous entries of 115. These entries are too far-removed from the rest of dataset. A Google search has confirmed that there were no 115-year-olds alive in Brazil at the timestamps stated. See reference [1] for confirmation.\n* I will remove these entries.","c91d61fc":"* Now I drop the \"AppointmentDay\" \"ScheduledDay\" columns, as we have no more use for these","bdeca26d":"## Standardise Variables\nLastly, I'm going to standardise the variables to prepare data for modelling.","04c780fc":"# References\n[1] Wikipedia List of verified oldest people: https:\/\/en.wikipedia.org\/wiki\/List_of_the_verified_oldest_people","037d07f1":"### Get dummy variables\nNow I convert non-numeric variables to logical variables","0a5c365c":"Evidently there are no missing values.","6b6735fe":"* Now I clean up \"ScheduledDay\" and \"AppointmentDay\" columns","95c1365c":"* \"PatientId\" and \"AppointmentID\" columns are random system generated numbers. I will delete these.","f3f2d8d2":"# Conclusion\n* Logistic regression produced the predictions with the highest accuracy, at 79%, though only slightly higher than the random forest, which scored 78%. The single decision tree performed worst at 73%.\n* Further investigation is needed to determine why it outperformed the decision tree-based models.","94bbe452":"### Drop redundant variables","05d3812d":"* To help with following plots, I now create a logical variable for gender","39ea64d8":"# Step 2: EDA\n* Time for some Exploratory Data Analysis."}}