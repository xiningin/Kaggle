{"cell_type":{"fd85b95c":"code","9e40a294":"code","8b0e6501":"code","b7ed7f85":"code","9a86376a":"code","6efe0d73":"code","0150d2eb":"code","297bc7b1":"code","1d018d12":"code","fd893f8e":"code","ef68493d":"code","9a39e9e4":"code","11a61320":"code","444f96d8":"code","cc23ed89":"code","e38cd43e":"code","fb46f495":"code","002bb9d2":"code","fc83396b":"markdown","27ae7a5f":"markdown","dc04666d":"markdown","6d096277":"markdown","0080d10b":"markdown","dae27573":"markdown","28eded71":"markdown","dc0956c9":"markdown","d099495a":"markdown","477e7e12":"markdown","c729bc2c":"markdown","499a21c7":"markdown","1d269184":"markdown","85a45b08":"markdown","2f39a107":"markdown","2fc9c98d":"markdown","c525df0d":"markdown","7c55fd7b":"markdown"},"source":{"fd85b95c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e40a294":"import numpy as np\nimport os\nimport six.moves.urllib as urllib\nimport sys\nimport tarfile\nimport tensorflow as tf\nimport zipfile\nimport pathlib\n\nfrom collections import defaultdict\nfrom io import StringIO\nfrom matplotlib import pyplot as plt\nfrom PIL import Image\nfrom IPython.display import display\n","8b0e6501":"!pip install tf_slim","b7ed7f85":"# Install the protobufs compiler\n!wget -O protobuf.zip https:\/\/github.com\/google\/protobuf\/releases\/download\/v3.0.0\/protoc-3.0.0-linux-x86_64.zip -q\n!unzip -o protobuf.zip\n!rm protobuf.zip","9a86376a":"%cd \/kaggle\n!rm -fr models\n!git clone https:\/\/github.com\/tensorflow\/models.git\n!rm -fr models\/.git","6efe0d73":"# Compile protobufs\n%cd \/kaggle\/models\/research\n!..\/..\/working\/bin\/protoc object_detection\/protos\/*.proto --python_out=.","0150d2eb":"# Environment Variables\nos.environ['AUTOGRAPH_VERBOSITY'] = '0'\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nos.environ['PYTHONPATH']=os.environ['PYTHONPATH']+':\/kaggle\/models\/research\/slim:\/kaggle\/models\/research'\nos.environ['PYTHONPATH']","297bc7b1":"from object_detection.utils import ops as utils_ops\nfrom object_detection.utils import label_map_util\nfrom object_detection.utils import visualization_utils as vis_util","1d018d12":"# patch tf1 into `utils.ops`\nutils_ops.tf = tf.compat.v1\n\n# Patch the location of gfile\ntf.gfile = tf.io.gfile","fd893f8e":"def load_model(model_name):\n  base_url = 'http:\/\/download.tensorflow.org\/models\/object_detection\/'\n  model_file = model_name + '.tar.gz'\n  model_dir = tf.keras.utils.get_file(\n    fname=model_name, \n    origin=base_url + model_file,\n    untar=True)\n\n  model_dir = pathlib.Path(model_dir)\/\"saved_model\"\n\n  model = tf.saved_model.load(str(model_dir))\n  model = model.signatures['serving_default']\n\n  return model","ef68493d":"# List of the strings that is used to add correct label for each box.\n#PATH_TO_LABELS = 'models\/research\/object_detection\/data\/mscoco_label_map.pbtxt'\nPATH_TO_LABELS = 'object_detection\/data\/mscoco_label_map.pbtxt'\ncategory_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)","9a39e9e4":"# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.\nPATH_TO_TEST_IMAGES_DIR = pathlib.Path('\/kaggle\/input')\nTEST_IMAGE_PATHS = sorted(list(PATH_TO_TEST_IMAGES_DIR.glob(\"*.jpg\")))\nTEST_IMAGE_PATHS","11a61320":"model_name = 'ssd_mobilenet_v1_coco_2017_11_17'\ndetection_model = load_model(model_name)","444f96d8":"print(detection_model.inputs)","cc23ed89":"detection_model.output_dtypes","e38cd43e":"def run_inference_for_single_image(model, image):\n  image = np.asarray(image)\n  # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.\n  input_tensor = tf.convert_to_tensor(image)\n  # The model expects a batch of images, so add an axis with `tf.newaxis`.\n  input_tensor = input_tensor[tf.newaxis,...]\n\n  # Run inference\n  output_dict = model(input_tensor)\n\n  # All outputs are batches tensors.\n  # Convert to numpy arrays, and take index [0] to remove the batch dimension.\n  # We're only interested in the first num_detections.\n  num_detections = int(output_dict.pop('num_detections'))\n  output_dict = {key:value[0, :num_detections].numpy() \n                 for key,value in output_dict.items()}\n  output_dict['num_detections'] = num_detections\n\n  # detection_classes should be ints.\n  output_dict['detection_classes'] = output_dict['detection_classes'].astype(np.int64)\n   \n  # Handle models with masks:\n  if 'detection_masks' in output_dict:\n    # Reframe the the bbox mask to the image size.\n    detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(\n              output_dict['detection_masks'], output_dict['detection_boxes'],\n               image.shape[0], image.shape[1])      \n    detection_masks_reframed = tf.cast(detection_masks_reframed > 0.5,\n                                       tf.uint8)\n    output_dict['detection_masks_reframed'] = detection_masks_reframed.numpy()\n    \n  return output_dict","fb46f495":"def show_inference(model, image_path):\n  # the array based representation of the image will be used later in order to prepare the\n  # result image with boxes and labels on it.\n  image_np = np.array(Image.open(image_path))\n  # Actual detection.\n  output_dict = run_inference_for_single_image(model, image_np)\n  # Visualization of the results of a detection.\n  vis_util.visualize_boxes_and_labels_on_image_array(\n      image_np,\n      output_dict['detection_boxes'],\n      output_dict['detection_classes'],\n      output_dict['detection_scores'],\n      category_index,\n      instance_masks=output_dict.get('detection_masks_reframed', None),\n      use_normalized_coordinates=True,\n      line_thickness=8)\n\n  display(Image.fromarray(image_np))","002bb9d2":"for image_path in TEST_IMAGE_PATHS:\n  show_inference(detection_model, image_path)","fc83396b":"## Variables","27ae7a5f":"Add a wrapper function to call the model, and cleanup the outputs:","dc04666d":"import pdb\nimport pathlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pandas as pd\nimport tensorflow as tf\nimport sys\nimport tarfile\nimport tempfile\nimport zipfile\nimport glob\nimport cv2\nfrom pathlib import Path\n\nfrom PIL import Image, ImageOps\nfrom IPython.display import display\n#import hvplot.pandas\nimport os\n\n%matplotlib inline\n%xmode Verbose\n\nimage_path = Path('\/kaggle\/input\/open-images-object-detection-rvc-2020')\ndata_path = Path('\/kaggle\/input\/open-image-2019')\nimage_list = sorted(image_path.glob('test\/*.jpg'))\n\nprint(tf.__version__)\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    # Restrict TensorFlow to only use the first GPU\n    try:\n        tf.config.experimental.set_visible_devices(gpus[0], 'GPU')\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPU\")\n    except RuntimeError as e:\n        # Visible devices must be set before GPUs have been initialized\n        print(e)","6d096277":"# Install models\n!pip install .","0080d10b":"!pip install pycocotools\n!pip install --user Cython -q\n!pip install --user contextlib2 -q\n!pip install --user pillow -q\n!pip install --user lxml -q","dae27573":"# Environment Variables\nos.environ['AUTOGRAPH_VERBOSITY'] = '0'\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n#os.environ['PYTHONPATH']=os.environ['PYTHONPATH']+':\/kaggle\/models\/research\/slim:\/kaggle\/models\/research'\nos.environ['PYTHONPATH']","28eded71":"# Install the protobufs compiler\n!wget -O protobuf.zip https:\/\/github.com\/google\/protobuf\/releases\/download\/v3.0.0\/protoc-3.0.0-linux-x86_64.zip -q\n!unzip -o protobuf.zip\n!rm protobuf.zip","dc0956c9":"Run it on each test image and show the results:","d099495a":"Any model exported using the export_inference_graph.py tool can be loaded here simply by changing the path.\n\nBy default we use an \"SSD with Mobilenet\" model here. See the detection model zoo for a list of other models that can be run out-of-the-box with varying speeds and accuracies.","477e7e12":"## Loader","c729bc2c":"## Loading label map","499a21c7":"%cd \/kaggle\n!rm -fr models\n!git clone https:\/\/github.com\/tensorflow\/models.git\n!rm -fr models\/.git","1d269184":"## Model preparation","85a45b08":"## **Detection**","2f39a107":"## **Installing dependencies** for object_detection.utils","2fc9c98d":"# Compile protobufs\n%cd \/kaggle\/models\/research\n!..\/..\/working\/bin\/protoc object_detection\/protos\/*.proto --python_out=.","c525df0d":"!pip install tf_slim","7c55fd7b":"Label maps map indices to category names, so that when our convolution network predicts 5, we know that this corresponds to airplane. Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine"}}