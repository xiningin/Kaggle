{"cell_type":{"46c0eb27":"code","2e909763":"code","2bba3480":"code","9fc02136":"code","8592507e":"code","81403c4e":"markdown","b0a2e33e":"markdown","f9e84307":"markdown","91bc953c":"markdown","3d28ca08":"markdown"},"source":{"46c0eb27":"import numpy as np\nimport pandas as pd \nimport os,random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom subprocess import check_output\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_randFloat\nfrom scipy.stats import randint as sp_randInt\n\nfrom sklearn import tree","2e909763":"TRAIN_PATH = \"..\/input\/house-prices-advanced-regression-techniques\/train.csv\"\nTEST_PATH = \"..\/input\/house-prices-advanced-regression-techniques\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"Id\"\nTARGET = \"SalePrice\"\n\nSEED = 2022\ndef seed_everything(seed=SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything()\n\nRS_CV = 5\nRS_N_ITER = 5000\nRS_N_JOBS = -1\nRS_SCORING = 'neg_root_mean_squared_error'","2bba3480":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = \"None\"\n#                 df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.label encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \nfor col in str_list:\n    encoder = LabelEncoder()\n    encoder.fit(train[col])\n    train[col] = encoder.transform(train[col])\n\n    for label in np.unique(test[col]):\n        if label not in encoder.classes_: \n            encoder.classes_ = np.append(encoder.classes_, label) \n    test[col] = encoder.transform(test[col])","9fc02136":"####################################################################################\n#split input data and target data \nX = train.drop([ID,TARGET],axis=1)\ny = train[TARGET]\n####################################################################################\n# search best parameter and model\nmodel = tree.DecisionTreeRegressor()\nparameters = {\n#     'criterion':[\"squared_error\", \"friedman_mse\"],\n    'splitter':[\"best\", \"random\"],\n    'max_depth' : sp_randInt(1, 1000),\n    'min_samples_split' : sp_randFloat(),\n    'min_impurity_decrease':sp_randFloat(),\n#     'random_state':sp_randInt(1, 100),\n}\n\nrs = RandomizedSearchCV(estimator=model, \n                           param_distributions = parameters,\n                           scoring=RS_SCORING,\n                           cv = RS_CV, \n                           n_iter = RS_N_ITER, \n                           n_jobs=RS_N_JOBS)\nrs.fit(X, y)\n\n# best model \nprint(rs.best_params_)\nbestModel = rs.best_estimator_\n####################################################################################","8592507e":"####################################################################################\n#predict\nX_test = test.drop([ID],axis=1)\npred_test = bestModel.predict(X_test)\n####################################################################################\n#submit\nsub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH, index=False)\nsub.head()\n####################################################################################","81403c4e":"# imports","b0a2e33e":"# load & preprocess","f9e84307":"# variables","91bc953c":"# Build Model","3d28ca08":"# After Building Model"}}