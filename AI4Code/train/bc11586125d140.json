{"cell_type":{"f8adf41c":"code","74fce67e":"code","0d6eb9fd":"code","7220eb19":"code","7080982b":"code","2cda94c3":"code","69357557":"code","5aa6166f":"code","c96d3ed3":"code","db28ad50":"code","11246e5e":"code","9bcca213":"code","11896082":"code","181332d1":"code","2388d4de":"code","2f5ec390":"code","058a186f":"code","32c66256":"code","491baa37":"code","4166b1eb":"code","351b7297":"code","7a10695e":"code","7802fe4b":"code","0e78e2c8":"code","31adca6e":"code","d5be4edc":"code","b4e61d77":"code","a6d0aa56":"code","ec952416":"code","354f0ace":"code","c7654a89":"code","7cc9c812":"code","f6dff71e":"code","afd5aad5":"code","d23dbe76":"code","1685d9a7":"code","16177ebf":"code","fea0e9d1":"code","4e0a37cd":"code","fbdf337b":"markdown","7d160954":"markdown","129b1121":"markdown","61c4e65b":"markdown"},"source":{"f8adf41c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74fce67e":"import matplotlib.pyplot as plt\nimport seaborn as sns","0d6eb9fd":"%%time\n\ntrain_err = pd.read_csv('\/kaggle\/input\/dacon-lg\/train_err_data.csv')\ntrain_qual = pd.read_csv('\/kaggle\/input\/dacon-lg\/train_quality_data.csv')\ntrain_prob = pd.read_csv('\/kaggle\/input\/dacon-lg\/train_problem_data.csv')\n\ntest_err = pd.read_csv('\/kaggle\/input\/dacon-lg\/test_err_data.csv')\ntest_qual = pd.read_csv('\/kaggle\/input\/dacon-lg\/test_quality_data.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/dacon-lg\/sample_submission.csv')","7220eb19":"test_qual.head()","7080982b":"print(train_err.shape)\nprint(train_qual.shape)\nprint(train_prob.shape)\nprint()\nprint(test_err.shape)\nprint(test_qual.shape)\nprint(sample_submission.shape)","2cda94c3":"%%time\ntrain_err['time'] = pd.to_datetime(train_err['time'], format=\"%Y%m%d%H%M%S\")\ntrain_qual['time'] = pd.to_datetime(train_qual['time'], format=\"%Y%m%d%H%M%S\")\ntrain_prob['time'] = pd.to_datetime(train_prob['time'], format=\"%Y%m%d%H%M%S\")","69357557":"train_err.head()","5aa6166f":"%%time\ntrain_err['year'] = train_err['time'].dt.year\ntrain_err['month'] = train_err['time'].dt.month\ntrain_err['day'] = train_err['time'].dt.day\ntrain_err['hour'] = train_err['time'].dt.hour\ntrain_err['minute'] = train_err['time'].dt.minute\ntrain_err['second'] = train_err['time'].dt.second","c96d3ed3":"train_err.head()","db28ad50":"print(len(train_err['year'].unique()))\nprint(len(train_err['month'].unique()))\nprint(len(train_err['day'].unique()))\nprint()\nprint(len(sorted(train_err['hour'].unique())))\nprint(len(sorted(train_err['minute'].unique())))\nprint(len(sorted(train_err['second'].unique())))\nprint()\n\n#2020\ub144\nprint(train_err['year'].unique())\n# 10, 11, 12\uc6d4\nprint(sorted(train_err['month'].unique()))\n# 31\uc77c \uc804\uccb4\nprint(sorted(train_err['day'].unique()))\nprint()\n\n# 0 ~ 23\uc2dc, \uc804\uccb4\nprint(sorted(train_err['hour'].unique()))\nprint()\n# 0 ~ 59 \uc804\uccb4\nprint(sorted(train_err['minute'].unique()))\nprint()\n# 0 ~ 59 \uc804\uccb4\nprint(sorted(train_err['second'].unique()))","11246e5e":"train_prob.head()","9bcca213":"%%time\ntrain_prob['year'] = train_prob['time'].dt.year\ntrain_prob['month'] = train_prob['time'].dt.month\ntrain_prob['day'] = train_prob['time'].dt.day\ntrain_prob['hour'] = train_prob['time'].dt.hour\ntrain_prob['minute'] = train_prob['time'].dt.minute\ntrain_prob['second'] = train_prob['time'].dt.second","11896082":"print(len(train_prob['year'].unique()))\nprint(len(train_prob['month'].unique()))\nprint(len(train_prob['day'].unique()))\nprint()\nprint(len(sorted(train_prob['hour'].unique())))\nprint(len(sorted(train_prob['minute'].unique())))\nprint(len(sorted(train_prob['second'].unique())))\nprint()\n\n# 2020\ub144\nprint(train_prob['year'].unique())\n# 11\uc6d4\ub9cc !\nprint(sorted(train_prob['month'].unique()))\n# 30\uc77c !\nprint(sorted(train_prob['day'].unique()))\nprint()\n\n# 0 ~ 23\uc2dc, \uc804\uccb4\nprint(sorted(train_prob['hour'].unique()))\nprint()\n# \ubd84\uc740 0\ubd84\uc73c\ub85c \uace0\uc815\nprint(sorted(train_prob['minute'].unique()))\nprint()\n# \ucd08\ub294 0\uc73c\ub85c \uace0\uc815\nprint(sorted(train_prob['second'].unique()))\n\n# => \uc2dc\uac04 \ub2e8\uc704\ub85c \ubd88\ub9cc \uae30\ub85d\ub418\ub294 \ub4ef","181332d1":"train_qual.head()","2388d4de":"%%time\ntrain_qual['year'] = train_qual['time'].dt.year\ntrain_qual['month'] = train_qual['time'].dt.month\ntrain_qual['day'] = train_qual['time'].dt.day\ntrain_qual['hour'] = train_qual['time'].dt.hour\ntrain_qual['minute'] = train_qual['time'].dt.minute\ntrain_qual['second'] = train_qual['time'].dt.second","2f5ec390":"print(len(train_qual['year'].unique()))\nprint(len(train_qual['month'].unique()))\nprint(len(train_qual['day'].unique()))\nprint()\nprint(len(sorted(train_qual['hour'].unique())))\nprint(len(sorted(train_qual['minute'].unique())))\nprint(len(sorted(train_qual['second'].unique())))\nprint()\n\n#2020\ub144\nprint(train_qual['year'].unique())\n# 10, 11\uc6d4\nprint(train_qual['month'].unique())\n# 31\uc77c\nprint(train_qual['day'].unique())\nprint()\n\n# 0 ~ 23\uc2dc\nprint(sorted(train_qual['hour'].unique()))\nprint()\n# 10\ubd84 \ub2e8\uc704\nprint(sorted(train_qual['minute'].unique()))\nprint()\n# \ucd08\ub294 0\uc73c\ub85c \uace0\uc815\nprint(sorted(train_qual['second'].unique()))","058a186f":"# Missing Value \ud655\uc778\nprint(\"Train-set\")\ndisplay( train_err.isnull().sum() )\n\nprint('=' * 80)\n\nprint(\"Test-set\")\ndisplay( test_err.isnull().sum() )","32c66256":"# Missing Value \ud655\uc778\nprint(\"Train-set : %s\" %len(train_qual))\ndisplay( train_qual.isnull().sum() )\n\nprint('=' * 80)\n\nprint(\"Test-set: %s\" %len(test_qual))\ndisplay( test_qual.isnull().sum() )","491baa37":"# \ub370\uc774\ud130 \uc694\uc57d\n# err : 2020\/10,11,12\uc6d4\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/0-59\uc804\uccb4\/0-59\uc804\uccb4\n# prob : 2020\/11\uc6d4\ub9cc\/1-30\uc77c!\/0-23\uc804\uccb4\/0\/0\n# qual : 2020\/10,11\uc6d4\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/10\ubd84\ub2e8\uc704\/0\uc73c\ub85c \uace0\uc815","4166b1eb":"mdl_nm_cnt = train_err.groupby('model_nm')['user_id'].count()\nmdl_nm_cnt.plot()\nmdl_nm_cnt","351b7297":"# \uc5d0\ub7ec\uac00 \ub9ce\uc774 \ub098\ub294 \ubaa8\ub378 : 1,0,2,3 \uc21c\nplt.figure(figsize=(18,5))\nsns.barplot(mdl_nm_cnt.index, mdl_nm_cnt.values\/sum(mdl_nm_cnt.values))\nplt.grid()\nplt.xlabel('error dist by model_nm', fontsize = 14)\nplt.xticks(rotation=45)","7a10695e":"train_prob","7802fe4b":"day_cnt = train_prob.groupby('day')['user_id'].count()\nday_cnt.plot()\n# \ubd88\ub9cc \uc811\uc218 \uc77c\uc790\uac00 \uc5b4\ub290\uc815\ub3c4 \uc2dc\uacc4\uc5f4\uc744 \ub744\ub294\ub4ef \ubcf4\uc784\nday_cnt","0e78e2c8":"# \ubd88\ub9cc\uc811\uc218\ub418\ub294 \uc77c\uc790\uac00 1\uc8fc\uc77c \ub2e8\uc704\ub85c \ubc18\ubcf5\ub418\ub294 \uacbd\ud5a5\uc774 \ubcf4\uc784\nplt.figure(figsize=(18,5))\nsns.barplot(day_cnt.index, day_cnt.values)\nplt.grid()\nplt.xlabel('problem dist by day', fontsize = 14)\nplt.xticks(rotation=45)","31adca6e":"hour_cnt = train_prob.groupby('hour')['user_id'].count()\nhour_cnt.plot()\n# \ubd88\ub9cc \uc811\uc218 \uc2dc\uac04\uc740 \uc544\ubb34\ub798\ub3c4 \uc0ac\ub78c\ub4e4\uc758 \uc77c\ubc18\uc801\uc778 \ud65c\ub3d9 \uc2dc\uac04\uacfc \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc5b4\ubcf4\uc784\nhour_cnt","d5be4edc":"# \ubd88\ub9cc\uc811\uc218\ub418\ub294 \uc2dc\uac04\uc774 \uc810\uc2ec\uc2dc\uac04 \uc55e\ub4a4\ub85c, \uc624\ud6c4 3\uc2dc\ubd80\ud130 7\uc2dc\uae4c\uc9c0\uac00 \uc81c\uc77c \ub9ce\uace0, \nplt.figure(figsize=(18,5))\nsns.barplot(hour_cnt.index, hour_cnt.values\/sum(hour_cnt))\nplt.grid()\nplt.xlabel('problem dist by hour', fontsize = 14)\nplt.xticks(rotation=45)","b4e61d77":"# train \ub370\uc774\ud130 \uc694\uc57d\n# err : 2020\/10,11,12\uc6d4\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/0-59\uc804\uccb4\/0-59\uc804\uccb4\n# prob : 2020\/11\uc6d4\ub9cc\/1-30\uc77c!\/0-23\uc804\uccb4\/0\/0\n# qual : 2020\/10,11\uc6d4\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/10\ubd84\ub2e8\uc704\/0\uc73c\ub85c \uace0\uc815","a6d0aa56":"# \ubd88\ub9cc\uc811\uc218 \uc720\uc800 \ub9ac\uc2a4\ud2b8\nprob_user_set = set(train_prob['user_id'])\nprint('prob :' , len(prob_user_set))\n# \uc5d0\ub7ec \ub85c\uadf8 \uc720\uc800 \ub9ac\uc2a4\ud2b8\nerr_user_set = set(train_err['user_id'])\nprint('err :', len(err_user_set))\n\n# \uc5d0\ub7ec \uc788\ub294\ub370 \uc811\uc218\uc548\ud558\ub294 \uc0ac\ub78c\uc774 2\ubc30 \ub9ce\uc74c","ec952416":"p = len(prob_user_set)\ne = len(err_user_set)\nsns.barplot(['prob_user', 'err_user'], [p\/(p+e), e\/(p+e)])\nplt.grid()\nplt.xlabel('uniq user dist', fontsize = 14)","354f0ace":"# \ubd88\ub9cc\uc788\ub294 \uc0ac\ub78c\uc758 \uc5d0\ub7ec\ub85c\uadf8\nhave_prob_train_err = train_err[train_err['user_id'].isin(prob_user_set)]\nprint(len(have_prob_train_err), len(have_prob_train_err)\/len(train_err))\n\n# \ubd88\ub9cc \uc788\ub294 \uc0ac\ub78c\uc758 \uc5d0\ub7ec\ub85c\uadf8\uac00 \uc0ac\ub78c \uc218\uc5d0 \ube44\ud574 \ud655\uc2e4\ud788 \ub9ce\uc74c\n\n# \ubd88\ub9cc\uc556\ub294 \uc0ac\ub78c\uc758 \uc5d0\ub7ec\ub85c\uadf8\nhave_no_prob_train_err = train_err[~train_err['user_id'].isin(prob_user_set)]\nprint(len(have_no_prob_train_err), len(have_no_prob_train_err)\/len(train_err))","c7654a89":"h = len(have_prob_train_err)\nnh = len(train_err) - h\nsns.barplot(['prob_user_err', 'no_prob_user_err'], [h\/(h+nh), nh\/(h+nh)])\nplt.grid()\nplt.xlabel('err log dist', fontsize = 14)","7cc9c812":"# train \ub370\uc774\ud130 \uc694\uc57d\n# err : 2020\/10,11,12\uc6d4(\ub300\ubd80\ubd84 11\uc6d4)\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/0-59\uc804\uccb4\/0-59\uc804\uccb4\n# prob : 2020\/11\uc6d4\ub9cc\/1-30\uc77c!\/0-23\uc804\uccb4\/0\/0\n# qual : 2020\/10,11\uc6d4(\ub300\ubd80\ubd84 11\uc6d4)\/1-31\uc804\uccb4\/0-23\uc804\uccb4\/10\ubd84\ub2e8\uc704\/0\uc73c\ub85c \uace0\uc815","f6dff71e":"train_qual.groupby('month')['user_id'].count()","afd5aad5":"# \uc6d4\/\uc77c\/\uc2dc\/\ubd84\/\ucd08\/\ubaa8\ub378\/\uc5d0\ub7ec\ud0c0\uc785\/\uc5d0\ub7ec\ucf54\ub4dc\/\ud38c\uc6e8\uc5b4 \ubc84\uc804(1,2,3)\ncols = ['month', 'day', 'hour', 'minute', 'second', 'model_nm', 'errtype', 'errcode', 'fwver']\nfor col in cols:\n    figure, ax = plt.subplots(1, 2, figsize=(20, 3))\n    g = sns.countplot(have_prob_train_err[col], ax=ax[0])\n    g.set_xticklabels(g.get_xticklabels(), rotation=45)\n    g = sns.countplot(have_no_prob_train_err[col], ax=ax[1])\n    g.set_xticklabels(g.get_xticklabels(), rotation=45)\n    ax[0].set_title('problem')\n    ax[1].set_title('no_problem')\n    \n# \ubd88\ub9cc\uc811\uc218 \uc77c\uc790\ub294 1\uc8fc\uc77c \ub2e8\uc704\ub85c \ubc18\ubcf5\ub418\ub294 \ud328\ud134\uc774 \uc788\ub294\ub370, \uc5d0\ub7ec\ub85c\uadf8\ub294 \uc77c\uc790\uc5d0\uc11c \ubd88\ub9cc \uc788\ub4e0 \uc5c6\ub4e0 \ube44\uc2b7\ud558\ub2e4..\n# \ubd88\ub9cc \uc811\uc218 \uc2dc\uac04\ub3c4 \uc0ac\ub78c\ub4e4 \uc6c0\uc9c1\uc784?\ub4f1\uc5d0 \ub530\ub77c \uacbd\ud5a5\uc774 \uc788\uc5b4\ubcf4\uc774\ub294\ub370, \uc5d0\ub7ec\ub85c\uadf8\ub294 \ubd88\ub9cc\uc788\ub4e0 \uc5c6\ub4e0 \ube44\uc2b7\ud558\uac8c \uc77c\uc5b4\ub098\uace0\uc788\ub2e4.\n## \uc2ec\uc9c0\uc5b4 \ubd88\ub9cc \uc5c6\ub294 \uc0ac\ub78c \uc0c8\ubcbd\uc2dc\uac04\ub300\uc5d0\ub294 \ub354 \ub9ce\uc774 \uc77c\uc5b4\ub0a8","d23dbe76":"train_prob.groupby('user_id')['time'].count().plot()","1685d9a7":"train_prob.groupby('user_id')['time'].count()","16177ebf":"train_prob.groupby('user_id')['time'].count().values","fea0e9d1":"from collections import Counter\nCounter(train_prob.groupby('user_id')['time'].count().values)","4e0a37cd":"plt.figure(figsize=(18,5))\nx = np.array(list(Counter(train_prob.groupby('user_id')['time'].count().values).keys()))\ny = np.array(list(Counter(train_prob.groupby('user_id')['time'].count().values).values()))\ny = y\/sum(y)\nsns.barplot(x, y)\nplt.grid()\nplt.xlabel('problem dist by hour', fontsize = 14)\nplt.xticks(rotation=45)","fbdf337b":"## 1. \ud2b9\uc815 \ubaa8\ub378\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ub9ce\uc774 \ub0a0\uae4c?","7d160954":"## \uc5d0\ub7ec\uc2e0\uace0\ud55c user_id \ubcc4 \uc2e0\uace0 \ud69f\uc218","129b1121":"## 2.\ubd88\ub9cc\uc774 \uc811\uc218\ub418\ub294 \ub0a0\uc9dc\/\uc2dc\uac04?","61c4e65b":"## 3.\ubd88\ub9cc\uc744 \uc811\uc218\ud558\ub294 \uc720\uc800\uc758 \ud65c\ub3d9(\uc5d0\ub7ec)\uc774 \ub9ce\uc740 \uc6d4\/\uc77c\/\uc2dc\/\ubd84\/\ucd08\/\ubaa8\ub378\/\uc5d0\ub7ec\ud0c0\uc785\/\uc5d0\ub7ec\ucf54\ub4dc\/\ud38c\uc6e8\uc5b4 \ubc84\uc804(1,2,3)"}}