{"cell_type":{"5bb8a586":"code","c2eea1c2":"code","3fa74dfc":"code","a51c78d8":"code","42a41fd2":"code","74a910ff":"code","55a9edbf":"code","84fed023":"code","98ce9e5f":"code","6dbf94d8":"code","92614381":"code","98d1da61":"code","7aa8661d":"code","14215a85":"code","34e711b7":"code","95af0cc4":"code","5d27765a":"code","0dd46327":"code","a90d9bbb":"code","3ad455a1":"code","359eb841":"code","ecde794d":"code","d6a93960":"code","fe32579b":"code","b0a8b7de":"code","633db56a":"code","5476fd7b":"code","1c409c87":"code","bd8e099c":"code","d84cf286":"code","1c8e2c46":"code","42328da6":"code","3e68bb67":"code","d6f26261":"code","1ed64810":"code","0d6b4a69":"code","18a39daa":"code","804416e8":"code","e5f692ae":"code","a7f54274":"code","9b48e151":"code","51d59c58":"code","aea30c92":"code","a74ef3c2":"code","6a6d4eeb":"markdown","c4379181":"markdown","5845ed32":"markdown","6d818460":"markdown","3cc6e5a1":"markdown","255120dd":"markdown","d27c74ca":"markdown","62df8cf8":"markdown","66412dde":"markdown","617ee043":"markdown","5ad47beb":"markdown","05b68893":"markdown","66f36f76":"markdown","c7857d38":"markdown","4f68fac4":"markdown","040903ca":"markdown","9b43448a":"markdown","48f1bb40":"markdown","780f694c":"markdown","7911c77e":"markdown","898bcede":"markdown","5e0091a0":"markdown","12dd076c":"markdown","049c9b38":"markdown","e7632fc1":"markdown","2ff873f3":"markdown","aef95545":"markdown","d01d4c14":"markdown","e770cbef":"markdown","0eea6b76":"markdown","6122c504":"markdown","f2a62291":"markdown","846f9976":"markdown","e978975e":"markdown","4a547035":"markdown"},"source":{"5bb8a586":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c2eea1c2":"# We are reading our data\ndf = pd.read_csv(\"..\/input\/heart.csv\")","3fa74dfc":"# First 5 rows of our data\ndf.head()","a51c78d8":"df.target.value_counts()","42a41fd2":"sns.countplot(x=\"target\", data=df, palette=\"bwr\")\nplt.show()","74a910ff":"countNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))","55a9edbf":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","84fed023":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","98ce9e5f":"df.groupby('target').mean()","6dbf94d8":"pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","92614381":"pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","98d1da61":"plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","7aa8661d":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","14215a85":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","34e711b7":"pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","95af0cc4":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","5d27765a":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","0dd46327":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","a90d9bbb":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","3ad455a1":"# Normalize\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","359eb841":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","ecde794d":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","d6a93960":"#initialize\ndef initialize(dimension):\n    \n    weight = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weight,bias","fe32579b":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","b0a8b7de":"def forwardBackward(weight,bias,x_train,y_train):\n    # Forward\n    \n    y_head = sigmoid(np.dot(weight.T,x_train) + bias)\n    loss = -(y_train*np.log(y_head) + (1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss) \/ x_train.shape[1]\n    \n    # Backward\n    derivative_weight = np.dot(x_train,((y_head-y_train).T))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"Derivative Weight\" : derivative_weight, \"Derivative Bias\" : derivative_bias}\n    \n    return cost,gradients","633db56a":"def update(weight,bias,x_train,y_train,learningRate,iteration) :\n    costList = []\n    index = []\n    \n    #for each iteration, update weight and bias values\n    for i in range(iteration):\n        cost,gradients = forwardBackward(weight,bias,x_train,y_train)\n        weight = weight - learningRate * gradients[\"Derivative Weight\"]\n        bias = bias - learningRate * gradients[\"Derivative Bias\"]\n        \n        costList.append(cost)\n        index.append(i)\n\n    parameters = {\"weight\": weight,\"bias\": bias}\n    \n    print(\"iteration:\",iteration)\n    print(\"cost:\",cost)\n\n    plt.plot(index,costList)\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n\n    return parameters, gradients","5476fd7b":"def predict(weight,bias,x_test):\n    z = np.dot(weight.T,x_test) + bias\n    y_head = sigmoid(z)\n\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(y_head.shape[1]):\n        if y_head[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","1c409c87":"def logistic_regression(x_train,y_train,x_test,y_test,learningRate,iteration):\n    dimension = x_train.shape[0]\n    weight,bias = initialize(dimension)\n    \n    parameters, gradients = update(weight,bias,x_train,y_train,learningRate,iteration)\n\n    y_prediction = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"Manuel Test Accuracy: {:.2f}%\".format((100 - np.mean(np.abs(y_prediction - y_test))*100)))","bd8e099c":"logistic_regression(x_train,y_train,x_test,y_test,1,100)","d84cf286":"accuracies = {}\n\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nacc = lr.score(x_test.T,y_test.T)*100\n\naccuracies['Logistic Regression'] = acc\nprint(\"Test Accuracy {:.2f}%\".format(acc))","1c8e2c46":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))","42328da6":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.savefig('knn.png', dpi=500, bbox_inches='tight')\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","3e68bb67":"from sklearn.svm import SVC","d6f26261":"svm = SVC(random_state = 1)\nsvm.fit(x_train.T, y_train.T)\n\nacc = svm.score(x_test.T,y_test.T)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","1ed64810":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train.T, y_train.T)\n\nacc = nb.score(x_test.T,y_test.T)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","0d6b4a69":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train.T, y_train.T)\n\nacc = dtc.score(x_test.T, y_test.T)*100\naccuracies['Decision Tree'] = acc\nprint(\"Decision Tree Test Accuracy {:.2f}%\".format(acc))","18a39daa":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train.T, y_train.T)\npred=rf.predict(x_test.T)\n\n\nacc = rf.score(x_test.T,y_test.T)*100\naccuracies['Random Forest'] = acc\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(acc))","804416e8":"\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \nactual = y_test.T \npredicted = pred\nresults = confusion_matrix(actual, predicted) \nprint(\"Confusion Matrix :\")\nprint(results) \nprint('Accuracy Score :',accuracy_score(actual, predicted)) \nprint('Report : ')\nprint(classification_report(actual, predicted))","e5f692ae":"from sklearn.metrics import roc_curve\ndef plot_roc_cur(fper, tper):  \n    plt.plot(fper, tper, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.savefig('roc.png', dpi=300, bbox_inches='tight')\n    plt.show()","a7f54274":"\nprobs = pred \nprobs = probs[:]  \nfper, tper, thresholds = roc_curve(y_test.T, probs) \nplot_roc_cur(fper, tper)","9b48e151":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.savefig('comparison.png', dpi=300, bbox_inches='tight')\nplt.show()","51d59c58":"# Predicted values\ny_head_lr = lr.predict(x_test.T)\nknn3 = KNeighborsClassifier(n_neighbors = 3)\nknn3.fit(x_train.T, y_train.T)\ny_head_knn = knn3.predict(x_test.T)\ny_head_svm = svm.predict(x_test.T)\ny_head_nb = nb.predict(x_test.T)\ny_head_dtc = dtc.predict(x_test.T)\ny_head_rf = rf.predict(x_test.T)","aea30c92":"from sklearn.metrics import confusion_matrix\n\ncm_lr = confusion_matrix(y_test,y_head_lr)\ncm_knn = confusion_matrix(y_test,y_head_knn)\ncm_svm = confusion_matrix(y_test,y_head_svm)\ncm_nb = confusion_matrix(y_test,y_head_nb)\ncm_dtc = confusion_matrix(y_test,y_head_dtc)\ncm_rf = confusion_matrix(y_test,y_head_rf)\n","a74ef3c2":"plt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nplt.subplot(2,3,1)\nplt.title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(cm_lr,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,3)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,4)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,5)\nplt.title(\"Decision Tree Classifier Confusion Matrix\")\nsns.heatmap(cm_dtc,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,6)\nplt.title(\"Random Forest Confusion Matrix\")\nsns.heatmap(cm_rf,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.show()","6a6d4eeb":"Data contains; <br>\n\n* age - age in years <br>\n* sex - (1 = male; 0 = female) <br>\n* cp - chest pain type <br>\n* trestbps - resting blood pressure (in mm Hg on admission to the hospital) <br>\n* chol - serum cholestoral in mg\/dl <br>\n* fbs - (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false) <br>\n* restecg - resting electrocardiographic results <br>\n* thalach - maximum heart rate achieved <br>\n* exang - exercise induced angina (1 = yes; 0 = no) <br>\n* oldpeak - ST depression induced by exercise relative to rest <br>\n* slope - the slope of the peak exercise ST segment <br>\n* ca - number of major vessels (0-3) colored by flourosopy <br>\n* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect <br>\n* target - have disease or not (1=yes, 0=no)","c4379181":"## Creating Model for Logistic Regression\n<br>\nWe can use sklearn library or we can write functions ourselves. Let's them both. Firstly we will write our functions after that we'll use sklearn library to calculate score.","5845ed32":"# INTRODUCTION\n<br>\nWe have a data which classified if patients have heart disease or not according to features in it. We will try to use this data to create a model which tries predict if a patient has this disease or not. We will use logistic regression (classification) algorithm.","6d818460":"## <font color=\"#0FBBAE\">Test Accuracy of Random Forest: <font color=\"red\">88.52%<\/font><\/font>","3cc6e5a1":"### Creating Dummy Variables","255120dd":"## Read Data","d27c74ca":"### Sklearn Logistic Regression","62df8cf8":"## <font color=\"orange\">Test Accuracy of SVM Algorithm is <font color=\"red\"> 86.89%<\/font><\/font>","66412dde":"## <font color=\"#CFC60E\">Test Accuracy of Decision Tree Algorithm: <font color=\"red\">78.69%<\/font><\/font>","617ee043":"## Comparing Models","5ad47beb":"## Confusion Matrix","05b68893":"By the way in formulas; <br>\n* h0(x^i)= y_head\n* y^i = y_train\n* x^i = x_train","66f36f76":"### Forward and Backward Propagation\n<br>\n<img src=\"https:\/\/image.slidesharecdn.com\/gradientdescentbackpropandautomaticdifferentiation-160829164205\/95\/gradient-descent-back-propagation-and-auto-differentiation-advanced-spark-and-tensorflow-meetup-08042016-62-638.jpg?cb=1472489358\" width=\"500px\"\/>","c7857d38":"### Sigmoid Function\n<br>\n<img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-05edc1873d0103e36064862a45566dba\" width=\"500px\"\/>","4f68fac4":"## <font color=\"magenta\">Accuracy of Naive Bayes: <font color=\"red\">86.89%<\/font><\/font>","040903ca":"## Random Forest Classification","9b43448a":"## <font color=\"blue\">Manuel Test Accuracy is <font color=\"red\">**86.89%**<\/font><\/font><br>\nLet's find out sklearn's score.","48f1bb40":"![](http:\/\/)Since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables.","780f694c":"Our models work fine but best of them are KNN and Random Forest with 88.52% of accuracy. Let's look their confusion matrixes.","7911c77e":"1. ## <font color = \"purple\">Our model works with <font color=\"red\">**86.89%**<\/font> accuracy.<\/font>","898bcede":"### Normalize Data\n<br>\n<br>\n<img src=\"https:\/\/beyondbacktesting.files.wordpress.com\/2017\/07\/normalization.png?w=863\" width=\"400px\"\/>","5e0091a0":"## Decision Tree Algorithm","12dd076c":"**Naive Bayes Algorithm**\n<br>\n<img src=\"https:\/\/s3.ap-south-1.amazonaws.com\/techleer\/204.png\" width=\"500px\"\/>","049c9b38":"## Data Exploration","e7632fc1":"Let's say weight = 0.01 and bias = 0.0","2ff873f3":"**Support Vector Machine Algorithm**\n<br>\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*TudH6YvvH7-h5ZyF2dJV2w.jpeg\" width=\"500px\"\/><br>\n<img src=\"https:\/\/aitrends.com\/wp-content\/uploads\/2018\/01\/1-19SVM-2.jpg\" width=\"500px\"\/>\n","aef95545":"**Decision Tree Algorithm**\n<br>\n![image.png](attachment:image.png)","d01d4c14":"### Cost Function\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/XbU4S.png\" width=\"500px\"\/>","e770cbef":"We will split our data. 80% of our data will be train data and 20% of it will be test data.","0eea6b76":"## Support Vector Machine (SVM) Algorithm \nNow we will use SVM algorithm. ","6122c504":"## Naive Bayes Algorithm","f2a62291":"As you can see above if we define k as 3-7-8 we will reach maximum score. <br>\n## <font color=\"green\">KNN Model's Accuracy is <font color=\"red\">88.52%<\/font><\/font>","846f9976":"## K-Nearest Neighbour (KNN) Classification\n<br>\nLet's see what will be score if we use KNN algorithm.","e978975e":"### Gradient Descent\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/pYVzl.png\" width=\"500px\"\/>","4a547035":"**KNN Algorithm**\n<br>\n<img src=\"http:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1531424125\/KNN_final_a1mrv9.png\"\/>"}}