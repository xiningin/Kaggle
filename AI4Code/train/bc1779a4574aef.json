{"cell_type":{"ff47c00a":"code","004b6acc":"code","0c37764f":"code","8b139a36":"code","928b38c4":"code","30427f23":"code","c17b8908":"code","d5dfd908":"code","9638a061":"code","fc940e9e":"code","6d696b41":"code","91039b25":"code","d26dd177":"markdown","107b8c29":"markdown","e947c148":"markdown","6ccdd617":"markdown","302406fe":"markdown","5bd53646":"markdown","ef33a2e9":"markdown","64f3b6a4":"markdown"},"source":{"ff47c00a":"# Importing libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error, mean_squared_log_error # metrics\nnp.random.seed(0)","004b6acc":"# Let's check the data\ndata = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n# Limits of the map for further plots\nBBox = ((data.longitude.min(),   data.longitude.max(),      \n         data.latitude.min(), data.latitude.max()))\n# Drop unnecessary columns\ndata.drop(columns=[\"id\", \"name\", \"host_id\", \"host_name\", \"last_review\"], inplace = True)\nprint(\"\\nThis dataset contains {} rows\\n\".format(data.shape[0]))\ndata.head(5)","0c37764f":"# Visualizing missing values\nimport missingno as msno\n\nmsno.matrix(data)\nplt.title(\"Missing Data\", fontsize = 30)\nplt.show()","8b139a36":"index_reviews_month_nan = data[data.reviews_per_month.isnull() == True].index \nprint(\"\\nWhen reviews_per_month is nan, the number_of_reviews is: {}\\nSo column reviews_per_month value is 0 when nan\\n\"\n      .format(np.max(data.loc[index_reviews_month_nan,'number_of_reviews'])))\n\n\ndata.reviews_per_month.fillna(0, inplace=True)\n\nmsno.matrix(data)\nplt.title(\"Missing Data After Filling NAN With 0\", fontsize = 30)\nplt.show()","928b38c4":"# Encoding neighbourhood_group\ndata[\"neighbourhood_group_label\"] = data.neighbourhood_group.astype('category').cat.codes\n\n# Neighbourhood Group and Label\nneighbourhood_groups_and_labels = data[[\"neighbourhood_group\",\"neighbourhood_group_label\"]].sort_values(\"neighbourhood_group_label\").drop_duplicates() \nneighbourhood_groups_and_labels = tuple(zip(neighbourhood_groups_and_labels.iloc[:,1], \n                                            neighbourhood_groups_and_labels.iloc[:,0]))\n\nprint(neighbourhood_groups_and_labels)","30427f23":"# Ploting on map\n\n# Map image    \nmap_image = mpimg.imread('\/kaggle\/input\/new-york-city-airbnb-open-data\/New_York_City_.png', format='jpeg')\n# Scatter Plot\nfig, ax = plt.subplots(figsize = (10,10))\nscatter = ax.scatter(data.longitude, data.latitude, \n           c=data.neighbourhood_group_label, s=10)\nax.set_title(\"Airbnb's locations\")\nax.set_xlim(BBox[0],BBox[1])\nax.set_ylim(BBox[2],BBox[3])\n# Legend\nunzipped_object = zip(*neighbourhood_groups_and_labels)\nunzipped_list = list(unzipped_object)\nhandles, labels = scatter.legend_elements(prop=\"colors\", alpha=0.6)\nlegend = ax.legend(handles, unzipped_list[1], loc=\"upper left\", title=\"Groups\")\n# Image show\nax.imshow(map_image, zorder=0, extent = BBox, aspect= 'equal')","c17b8908":"import plotly.express as px\n# Scatter Plot\nfig = px.scatter(data, x=\"longitude\", y=\"latitude\", color=\"neighbourhood_group\",\n                 size=\"price\")\nfig.update_layout(title=\"Neighbourhood and Prices\",\n                  legend_title=\"Neighbourhood\",\n                  font=dict(\n                      family=\"Helvetica\",\n                      size=16,\n                  ))\nfig.show()\n","d5dfd908":"# Scatter Plot\nfig = px.scatter(data[data.price<=300], x=\"longitude\", y=\"latitude\", color=\"neighbourhood_group\",\n                 size=\"price\")\nfig.update_layout(title=\"Neighbourhood and Prices (Price <= 300)\",\n                  legend_title=\"Neighbourhood\",\n                  font=dict(\n                      family=\"Helvetica\",\n                      size=16,\n                  ))\nfig.show()\n","9638a061":"fig, ax = plt.subplots(figsize = (5,5))\nsns.countplot(x=data.neighbourhood_group)\nax.set_title(\"Airbnb's locations\")","fc940e9e":"categorical_feature_mask = data.dtypes==object\ncategorical_cols = data.columns[categorical_feature_mask].tolist()\ndata.drop(columns=[\"neighbourhood_group_label\"], inplace=True)\nfor column in data[categorical_cols]:\n    data[column] = data[column].astype('category').cat.codes\n\nlast_col = data.pop('price')\ndata.insert(len(data.columns), 'price', last_col)\nprint(data)","6d696b41":"from sklearn.ensemble import RandomForestRegressor\n\nX, y = data.iloc[:,:-1], data.iloc[:,-1]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.3, random_state=42)\n\nmodel = RandomForestRegressor(max_depth=5)\nmodel.fit(X_train, y_train)\ny_predTrain = model.predict(X_train)\ny_pred = model.predict(X_test)\n\nprint(\"RMSE prediction on train = {0}\".format(np.sqrt(mean_squared_error(y_predTrain, y_train))))\nprint(\"R2 Score prediciton on train = {0}\".format(r2_score(y_train,y_predTrain)))\n\nprint(\"\\nRMSE prediction on test = {0}\".format(np.sqrt(mean_squared_error(y_pred, y_test))))\nprint(\"R2 Score prediciton on test = {0}\".format(r2_score(y_test,y_pred)))\n\n\nfig, ax = plt.subplots()\nax.scatter(y_test, y_pred, edgecolors=(0, 0, 0), label=\"Dados de teste\")\nax.plot([y_test.min(), y_test.max()], [y_test.min(),\\\ny_test.max()], 'k--', lw=4)\nax.set_xlabel('Atual')\nax.set_ylabel('Previsto')\nax.set_title(\"Valores reais vs Previstos\")","91039b25":"X, y = data[data.price<=300].iloc[:,:-1], data[data.price<=300].iloc[:,-1]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.3, random_state=42)\n\nmodel = RandomForestRegressor(max_depth=10)\nmodel.fit(X_train, y_train)\ny_predTrain = model.predict(X_train)\ny_pred = model.predict(X_test)\n\nprint(\"RMSE prediction on train = {0}\".format(np.sqrt(mean_squared_error(y_predTrain, y_train))))\nprint(\"R2 Score prediciton on train = {0}\".format(r2_score(y_train,y_predTrain)))\n\nprint(\"\\nRMSE prediction on test = {0}\".format(np.sqrt(mean_squared_error(y_pred, y_test))))\nprint(\"R2 Score prediciton on test = {0}\".format(r2_score(y_test,y_pred)))\n\n\nfig, ax = plt.subplots()\nax.scatter(y_test, y_pred, edgecolors=(0, 0, 0), label=\"Dados de teste\")\nax.plot([y_test.min(), y_test.max()], [y_test.min(),\\\ny_test.max()], 'k--', lw=4)\nax.set_xlabel('Atual')\nax.set_ylabel('Previsto')\nax.set_title(\"Valores reais vs Previstos\")","d26dd177":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bullet; Vizualizing and cleaning the data<\/p>\n<\/div>","107b8c29":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Handle missing values<\/p>\n<\/div>","e947c148":"<div style=\"font-family:helvetica; text-align:center\"> \n    <h1 style=\"font-size:40px\">New York City Airbnb Predict Rental Prices<\/h1>\n    <img src=\"http:\/\/images.unsplash.com\/photo-1570290870545-277c2f5ad465?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80\">\n    <p style=\"font-size:20px; text-align:center\">Analyzing and making predictions with new-york-city-airbnb-open-data dataset!<\/p>\n<\/div>","6ccdd617":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Predicting with the entire data<\/p>\n<\/div>","302406fe":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Conclusion<\/p>\n    <p style=\"font-size: 15px;\">The performance of prediciton with higher prices was poor, if we analyze only the lower prices the performance get better, is necessary more cases of higher prices, if we train the model with prices less than 300 the r2 metric is over 0.5 on test, if we train the model with all the data the r2 metric is less than 0.2 on test<\/p>\n<\/div>","5bd53646":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Predicting with data where price less than 300<\/p>\n<\/div>","ef33a2e9":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Encoding<\/p>\n<\/div>","64f3b6a4":"<div style=\"font-family:helvetica; font-size:30px;\">\n    <p>&bull; Plotting some information<\/p>\n<\/div>"}}