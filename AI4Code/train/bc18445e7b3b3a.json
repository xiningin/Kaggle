{"cell_type":{"42b30b79":"code","02d049d5":"code","8ad5090b":"code","35c1b7f4":"code","7f971975":"code","c3e643cd":"code","2764a3be":"code","4ffafc79":"code","85ef3a04":"code","468e5ab3":"code","7262d9a4":"code","1ce052ee":"code","9c4f979c":"code","cc40e7d7":"code","f41f5fbb":"code","7f09fdd6":"code","e2578097":"code","04e00009":"code","f8df6561":"code","213e4c35":"code","7b6ba858":"code","fce2b9e9":"code","d0f46596":"code","f549ed61":"code","395e939a":"code","7b59c306":"code","cecb7106":"code","4b1e9938":"code","d4eeed21":"code","224f8030":"code","a1ba75ce":"code","2bd13feb":"code","25c7f830":"code","4b1bcac6":"code","f51b37ff":"code","099128ad":"code","f5b5248f":"code","649a0735":"code","1efcc33e":"markdown","28ac5544":"markdown","a1698eb5":"markdown","2b19a130":"markdown","4c1d7fab":"markdown","509e74d1":"markdown","5bf253de":"markdown","c58a8c88":"markdown","f7c97fca":"markdown","77401f9c":"markdown","77688110":"markdown","9962946e":"markdown","bd49dcca":"markdown","3ac2e6f6":"markdown","044cfc03":"markdown","195c67cd":"markdown","0680f40e":"markdown","8226bb76":"markdown","2d7c076c":"markdown","67f4371d":"markdown","0527f2c5":"markdown","b9fc6095":"markdown","0ba0f663":"markdown","604c6130":"markdown","436f4560":"markdown"},"source":{"42b30b79":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n%matplotlib inline","02d049d5":"from xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import VotingRegressor\n\nimport optuna","8ad5090b":"from sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom mlxtend.preprocessing import minmax_scaling\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import StratifiedKFold, KFold, LeaveOneGroupOut\n","35c1b7f4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","7f971975":"DF1 = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\n\nDF2 = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\n\nSAM = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')","c3e643cd":"MV1 = DF1.isnull().sum()\nMV2 = DF2.isnull().sum()\n\nprint(f'Missing Value 1:  {MV1[MV1 > 0]}')\nprint(f'Missing Value 2:  {MV2[MV2 > 0]}')","2764a3be":"display(DF1, DF2)\n\n# display(DF1.describe().transpose())\n# display(DF2.describe().transpose())","4ffafc79":"print('=' * 40)\nDF1.info(memory_usage='deep')\nprint('=' * 40)\nDF2.info(memory_usage='deep')\nprint('=' * 40)","85ef3a04":"data1 = DF1.copy()\ndata2 = DF2.copy()\n\ncolumns = data2.columns[1:]\ndisplay(columns)","468e5ab3":"data1['loss'].value_counts().plot(figsize=(16, 8), kind='bar')","7262d9a4":"data1['loss'].value_counts().plot(figsize=(10, 10), kind='pie')\n\ndata1['loss'].value_counts(normalize=True)","1ce052ee":"X = data1.drop(columns = ['id','loss'])\ndisplay(X)","9c4f979c":"y = data1.loss\ndisplay(y)","cc40e7d7":"display(y.min() , y.max())","f41f5fbb":"XX = data2.drop(columns = ['id'])\ndisplay(XX)","7f09fdd6":"yc = y.copy()\n\nyc = np.clip(yc, 0, 1)\ndisplay(yc)","e2578097":"display(yc.min() , yc.max())","04e00009":"yc.value_counts().plot(figsize=(4, 4), kind='bar')","f8df6561":"yc.value_counts().plot(figsize=(5, 5), kind='pie')\n\nyc.value_counts(normalize=True)","213e4c35":"train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.50, random_state=123) \n\nval_X.to_csv(\"val_X.csv\",index=False)\nval_y.to_csv(\"val_y.csv\",index=False)","7b6ba858":"train_X, val_X, train_yc, val_yc = train_test_split(X, yc, test_size=0.50, random_state=123)\n\nval_yc.to_csv(\"val_yc.csv\",index=False)","fce2b9e9":"X_scaled = minmax_scaling(X, columns=X.columns)\n# display(X_scaled)","d0f46596":"XX_scaled = minmax_scaling(XX, columns=XX.columns)\n# display(XX_scaled)","f549ed61":"model1v = XGBRegressor(max_depth=7,\n                       n_estimators=2500,\n                       learning_rate=0.008,\n                       subsample=0.84,\n                       booster= 'gbtree',\n                       tree_method= 'gpu_hist',\n                       colsample_bytree= 0.70,\n                       reg_lambda= 5,\n                       reg_alpha= 32,\n                       n_jobs= 4,  \n                       alpha=0.5,\n                       random_state=123)                                  \n    \nmodel1v.fit(train_X, train_y)\noof_pred1 = model1v.predict(val_X)\noof_pred1 = np.clip(oof_pred1, y.min(), y.max())\n\nprint(30 * '=')\nprint(f'Mean Error: {np.sqrt(mean_squared_error(val_y, oof_pred1))}')\nprint(30 * '=')","395e939a":"model1v.feature_importances_","7b59c306":"model1 = XGBRegressor(max_depth=7,                     \n                      n_estimators=2500,\n                      learning_rate=0.008,\n                      subsample=0.84,\n                      booster= 'gbtree',\n                      tree_method= 'gpu_hist',\n                      colsample_bytree= 0.70,\n                      reg_lambda= 5,\n                      reg_alpha= 32,\n                      n_jobs= 4,            \n                      alpha=0.5,\n                      random_state=123)   \n\nmodel1.fit(X, y)\npred1 = model1.predict(XX)\npred1 = np.clip(pred1, y.min(), y.max())\ndisplay(pred1, pred1.shape) ","cecb7106":"sub1 = SAM.copy()\n\nsub1.iloc[:, 1] = pred1.data\ndisplay(sub1)","4b1e9938":"sub1.to_csv(\"submission_xgb.csv\",index=False)\n# Public Score: 7.87965","d4eeed21":"model2v = CatBoostRegressor(depth=6,\n                            iterations=1600,\n                            learning_rate=0.024,\n                            l2_leaf_reg=20,\n                            random_strength=1.5,\n                            grow_policy='Depthwise',\n                            leaf_estimation_method='Newton', \n                            bootstrap_type='Bernoulli',\n                            thread_count=4,\n                            verbose=False,\n                            loss_function='RMSE',\n                            eval_metric='RMSE',\n                            od_type='Iter',\n                            task_type='GPU',\n                            early_stopping_rounds=500,\n                            random_state=123)    \n\nmodel2v.fit(train_X, train_y, verbose=200)\noof_pred2 = model2v.predict(val_X)\noof_pred2 = np.clip(oof_pred2, y.min(), y.max())\n\nprint(30 * '=')\nprint(f'Mean Error: {np.sqrt(mean_squared_error(val_y, oof_pred2))}')\nprint(30 * '=')","224f8030":"model2v.feature_importances_","a1ba75ce":"model2 = CatBoostRegressor(depth=6,                     \n                           iterations=1600,\n                           learning_rate=0.024,\n                           l2_leaf_reg=20,\n                           random_strength=1.5,\n                           grow_policy='Depthwise',\n                           leaf_estimation_method='Newton', \n                           bootstrap_type='Bernoulli',\n                           thread_count=4,\n                           verbose=False,\n                           loss_function='RMSE',\n                           eval_metric='RMSE',\n                           od_type='Iter',\n                           task_type='GPU',\n                           early_stopping_rounds=500,\n                           random_state=123)    \n\nmodel2.fit(X, y)\npred2 = model2.predict(XX)\npred2 = np.clip(pred2, y.min(), y.max())\ndisplay(pred2, pred2.shape) ","2bd13feb":"sub2 = SAM.copy()\n\nsub2.iloc[:, 1] = pred2.data\ndisplay(sub2)","25c7f830":"sub2.to_csv(\"submission_catboost.csv\",index=False)\n# Public Score: 7.87995","4b1bcac6":"a1 = model1v.feature_importances_\na2 = model2v.feature_importances_\n\naxis_x  = X.columns.values\naxis_y1 = minmax_scaling(a1, columns=[0])\naxis_y2 = minmax_scaling(a2, columns=[0])\n\nplt.style.use('seaborn-whitegrid') \nplt.figure(figsize=(16, 6), facecolor='lightgray')\nplt.title(f'\\nX G B o o s t  &  C a t B o o s t\\n\\nF e a t u r e   I m p o r t a n c e s\\n', fontsize=14)  \n\nplt.scatter(axis_x, axis_y1, s=20, label='XGBoost') \nplt.scatter(axis_x, axis_y2, s=20, label='CatBoost')\n\nplt.legend(fontsize=12, loc=2)\nplt.show()","f51b37ff":"def best_blend(coeff):    \n    oof_pred = (oof_pred1 * coeff) + (oof_pred2 * (1.0 - coeff))   \n    mae = np.sqrt(mean_squared_error(val_y, oof_pred)) \n    return mae\n\nresults = {}\nfor i in range(0, 11):       \n    results[0.1 * i] = best_blend(0.1 * i)  \n    \nplt.plot(list(results.keys()), list(results.values()))\nplt.show()   ","099128ad":"pred = (pred1 * 0.50) + (pred2 * (1.0 - 0.50)) ","f5b5248f":"sub3 = SAM.copy()\n\nsub3.iloc[:, 1] = pred.data\ndisplay(sub3)","649a0735":"sub3.to_csv(\"submission3.csv\",index=False)\n# Public Score: 7.87752","1efcc33e":"<div class=\"alert alert-success\">  \n<\/div>","28ac5544":"<div class=\"alert alert-success\">  \n<\/div>","a1698eb5":"## Split","2b19a130":"## XGBRegressor\n\n### Validation Model - 1","4c1d7fab":"## Data Set","509e74d1":"<div>\n    <h1 align=\"center\">XGBoost & CatBoost<\/h1>    \n    <h1 align=\"center\">Tabular Playground Series - Aug 2021<\/h1> \n<\/div>","5bf253de":"## Model - 1","c58a8c88":"## Model - 2","f7c97fca":"<div class=\"alert alert-success\">  \n<\/div>","77401f9c":"<div class=\"alert alert-success\">  \n<\/div>","77688110":"<div class=\"alert alert-success\">  \n<\/div>","9962946e":"<div class=\"alert alert-success\">  \n<\/div>","bd49dcca":"<div class=\"alert alert-success\">  \n<\/div>","3ac2e6f6":"<div class=\"alert alert-success\">  \n<\/div>","044cfc03":"<div class=\"alert alert-success\">  \n<\/div>","195c67cd":"<div class=\"alert alert-success\">  \n<\/div>","0680f40e":"<div class=\"alert alert-success\">  \n<\/div>","8226bb76":"<div class=\"alert alert-success\">  \n<\/div>","2d7c076c":"## CatBoostRegressor\n\n### Validation Model - 2","67f4371d":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","0527f2c5":"<div class=\"alert alert-success\">  \n<\/div>","b9fc6095":"## Feature Importances","0ba0f663":"## Scaling","604c6130":"## Best Blend","436f4560":"<div class=\"alert alert-success\">  \n<\/div>"}}