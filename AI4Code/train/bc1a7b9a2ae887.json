{"cell_type":{"7c216713":"code","78d12ec0":"code","63d4d4d8":"code","790699c6":"code","234c5625":"code","cbddaf7e":"code","5deb07c2":"code","3fa7d39d":"code","23efef1a":"code","cc949696":"code","d14944ed":"code","31a3a6ec":"code","3d276e27":"code","79611337":"code","88fd08f0":"code","e6f6df8e":"code","e3889107":"markdown","c7f5ab01":"markdown","21af459d":"markdown","efb9996f":"markdown","ecff2cb1":"markdown"},"source":{"7c216713":"import numpy as np\nimport pandas as pd\nimport matplotlib.image as mpimg\nimport os\n\nfrom tensorflow.keras.utils import Sequence\n\nclass DataGenerator(Sequence):\n\n  def __init__(self, csv_file, base_dir, mask_dir, output_size, shuffle=False, batch_size=32):\n\n    self.df = pd.read_csv(csv_file)\n    self.base_dir = base_dir\n    self.mask_dir = mask_dir\n    self.output_size = output_size\n    self.shuffle = shuffle\n    self.batch_size = batch_size\n    self.on_epoch_end()\n\n  def on_epoch_end(self):\n    self.indices = np.arange(len(self.df))\n    if self.shuffle:\n      np.random.shuffle(self.indices)\n\n  def __len__(self):\n    return int(len(self.df) \/ self.batch_size)\n\n  def __getitem__(self, idx):\n    X = np.empty((self.batch_size, *self.output_size, 3),dtype=np.float32)\n    y = np.empty((self.batch_size, *self.output_size,1),dtype=np.float32)\n\n    indices = self.indices[idx*self.batch_size:(idx+1)*self.batch_size]\n\n    for i, data_index in enumerate(indices):\n      img_path = os.path.join(self.base_dir,\n                  self.df.iloc[data_index, 0])\n\n      img = mpimg.imread(img_path)\n      \n      mask_path = os.path.join(self.mask_dir,\n                  self.df.iloc[data_index, 1])\n      \n      mask = mpimg.imread(mask_path)\n      mask = np.expand_dims(mask, axis = 2)\n\n      X[i,] = img\n      y[i,] = mask\n\n    return X, y","78d12ec0":"train_image_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/train\/Images\"\ntrain_mask_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/train\/Masks\"\ntrain_gen = DataGenerator(\"..\/input\/raise-jpeg-blocks\/50\/train\/train names.csv\", train_image_path, train_mask_path,(224, 224), batch_size=32)","63d4d4d8":"train_image_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/train\/Images\"\ntrain_mask_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/train\/Masks\"\ntrain_gen = DataGenerator(\"..\/input\/test-33-width-blocks-names\/train names_temp.csv\", train_image_path, train_mask_path,(224, 224), batch_size=32)","790699c6":"vali_image_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/validate\/Images\"\nvali_mask_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/validate\/Masks\"\nvali_gen = DataGenerator(\"..\/input\/raise-jpeg-blocks\/50\/validate\/vali names.csv\", vali_image_path, vali_mask_path,(224, 224), batch_size=32)","234c5625":"vali_image_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/validate\/Images\"\nvali_mask_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/validate\/Masks\"\nvali_gen = DataGenerator(\"..\/input\/test-33-width-blocks-names\/vali names_temp.csv\", vali_image_path, vali_mask_path,(224, 224), batch_size=32)","cbddaf7e":"test_image_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/test\/Images\"\ntest_mask_path = \"..\/input\/raise-jpeg-width-of-3-blocks\/50\/50\/test\/Masks\"\ntest_gen = DataGenerator(\"..\/input\/test-33-width-blocks-names\/test names_temp.csv\", test_image_path, test_mask_path,(224, 224), batch_size=1)","5deb07c2":"from tensorflow.keras.applications import vgg16\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import ZeroPadding2D,Conv2D,BatchNormalization,UpSampling2D,Softmax,Activation\ndef create_model():\n  vgg16_model = keras.applications.vgg16.VGG16()\n  vgg16_model = Sequential(vgg16_model.layers[:-5])\n  vgg16_model.add(ZeroPadding2D())\n  vgg16_model.add(Conv2D(512, (3, 3), padding='valid'))\n  vgg16_model.add(BatchNormalization())\n\n  vgg16_model.add(UpSampling2D((2, 2)))\n  vgg16_model.add(ZeroPadding2D())\n  vgg16_model.add(Conv2D(256, (3, 3), padding='valid'))\n  vgg16_model.add(BatchNormalization())\n\n  vgg16_model.add(UpSampling2D((2, 2)))\n  vgg16_model.add(ZeroPadding2D())\n  vgg16_model.add(Conv2D(128, (3, 3), padding='valid'))\n  vgg16_model.add(BatchNormalization())\n\n  vgg16_model.add(UpSampling2D((2, 2)))\n  vgg16_model.add(ZeroPadding2D())\n  vgg16_model.add(Conv2D(64, (3, 3), padding='valid'))\n  vgg16_model.add(BatchNormalization())\n\n  vgg16_model.add(UpSampling2D((2, 2)))\n  vgg16_model.add(ZeroPadding2D())\n  vgg16_model.add(Conv2D(2, (3, 3), padding='valid'))\n  vgg16_model.add(Activation('softmax'))\n  return vgg16_model","3fa7d39d":"import keras\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import Adadelta,Adam\nwith tf.device('\/device:GPU:0'):\n  vgg16_model = create_model()\n  vgg16_model.compile(optimizer=Adadelta(learning_rate = 1,rho=0.95), loss='categorical_crossentropy', metrics=['accuracy'])","23efef1a":"import keras\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import Adadelta,Adam\nvgg16_model = create_model()\nvgg16_model.compile(optimizer=Adadelta(learning_rate = 1,rho=0.95), loss='categorical_crossentropy', metrics=['accuracy'])","cc949696":"vgg16_model.summary()","d14944ed":"checkpoint_path = '.\/cp-{epoch:04d}.ckpt'\ncp_callback =  tf.keras.callbacks.ModelCheckpoint(checkpoint_path,\n                                                 verbose=1,\n                                                 save_weights_only=True,\n                                                 period=5)\nhistory = vgg16_model.fit(train_gen, verbose = 1,\n                          epochs = 90,\n                          validation_data=vali_gen,\n                          callbacks=[cp_callback])","31a3a6ec":"predection=vgg16_model.predict(test_gen)","3d276e27":"import matplotlib.pyplot as plt\nplt.imshow(predection[2],cmap='gray')","79611337":"x,y=test_gen[2]\nplt.imshow(y[0],cmap='gray')","88fd08f0":"from keras.models import Model, Sequential\nfrom keras.layers import Activation, Dense, BatchNormalization, Dropout, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, Input, Reshape\ndef segnet():\n\n    # Encoding layer\n    img_input = Input(shape= (224, 224, 3))\n    x = Conv2D(64, (3, 3), padding='same', name='conv1',strides= (1,1))(img_input)\n    x = BatchNormalization(name='bn1')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(64, (3, 3), padding='same', name='conv2')(x)\n    x = BatchNormalization(name='bn2')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n    \n    x = Conv2D(128, (3, 3), padding='same', name='conv3')(x)\n    x = BatchNormalization(name='bn3')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(128, (3, 3), padding='same', name='conv4')(x)\n    x = BatchNormalization(name='bn4')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n\n    x = Conv2D(256, (3, 3), padding='same', name='conv5')(x)\n    x = BatchNormalization(name='bn5')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(256, (3, 3), padding='same', name='conv6')(x)\n    x = BatchNormalization(name='bn6')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(256, (3, 3), padding='same', name='conv7')(x)\n    x = BatchNormalization(name='bn7')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n\n    x = Conv2D(512, (3, 3), padding='same', name='conv8')(x)\n    x = BatchNormalization(name='bn8')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(512, (3, 3), padding='same', name='conv9')(x)\n    x = BatchNormalization(name='bn9')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(512, (3, 3), padding='same', name='conv10')(x)\n    x = BatchNormalization(name='bn10')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n    \n    x = Conv2D(512, (3, 3), padding='same', name='conv11')(x)\n    x = BatchNormalization(name='bn11')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(512, (3, 3), padding='same', name='conv12')(x)\n    x = BatchNormalization(name='bn12')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(512, (3, 3), padding='same', name='conv13')(x)\n    x = BatchNormalization(name='bn13')(x)\n    x = Activation('relu')(x)\n    #x = MaxPooling2D()(x)\n\n    #x = Dense(1024, activation = 'relu', name='fc1')(x)\n    #x = Dense(1024, activation = 'relu', name='fc2')(x)\n    # Decoding Layer \n    #x = UpSampling2D()(x)\n    x = Conv2DTranspose(512, (3, 3), padding='same', name='deconv1')(x)\n    x = BatchNormalization(name='bn14')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(512, (3, 3), padding='same', name='deconv2')(x)\n    x = BatchNormalization(name='bn15')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(512, (3, 3), padding='same', name='deconv3')(x)\n    x = BatchNormalization(name='bn16')(x)\n    x = Activation('relu')(x)\n    \n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(512, (3, 3), padding='same', name='deconv4')(x)\n    x = BatchNormalization(name='bn17')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(512, (3, 3), padding='same', name='deconv5')(x)\n    x = BatchNormalization(name='bn18')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(256, (3, 3), padding='same', name='deconv6')(x)\n    x = BatchNormalization(name='bn19')(x)\n    x = Activation('relu')(x)\n\n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(256, (3, 3), padding='same', name='deconv7')(x)\n    x = BatchNormalization(name='bn20')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(256, (3, 3), padding='same', name='deconv8')(x)\n    x = BatchNormalization(name='bn21')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(128, (3, 3), padding='same', name='deconv9')(x)\n    x = BatchNormalization(name='bn22')(x)\n    x = Activation('relu')(x)\n\n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(128, (3, 3), padding='same', name='deconv10')(x)\n    x = BatchNormalization(name='bn23')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(64, (3, 3), padding='same', name='deconv11')(x)\n    x = BatchNormalization(name='bn24')(x)\n    x = Activation('relu')(x)\n    \n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(64, (3, 3), padding='same', name='deconv12')(x)\n    x = BatchNormalization(name='bn25')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(1, (3, 3), padding='same', name='deconv13')(x)\n    x = BatchNormalization(name='bn26')(x)\n    pred = Activation('sigmoid')(x)\n    \n    model = Model(inputs=img_input, outputs=pred)\n    \n    model.summary()\n    return model","e6f6df8e":"import tensorflow as tf\nfrom tensorflow.keras.optimizers import Adadelta,Adam\nwith tf.device('\/device:GPU:0'):\n    vgg16_model = segnet()\n    vgg16_model.compile(optimizer=Adadelta(learning_rate = 1,rho=0.95), loss='binary_crossentropy', metrics=['accuracy'])","e3889107":"validate","c7f5ab01":"### **Dataset Generator**\n\n---\n\n","21af459d":"### **DATASET preparing**","efb9996f":"train","ecff2cb1":"### **Create a Convolutional Neural Network and train it on TPUs**\n\n---\n\n"}}