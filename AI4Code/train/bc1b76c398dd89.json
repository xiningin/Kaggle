{"cell_type":{"5995bde6":"code","af51445a":"code","062416e2":"code","c6b70444":"code","7bf8722a":"code","fbf36ea7":"code","6f748b7f":"code","5621ffd6":"code","e46a9f22":"code","38de0775":"code","fd8c37e2":"code","d4db2d69":"code","65eb1ab5":"code","f8aa5c6f":"code","9b83fac5":"code","442f2bb3":"code","4de317d3":"code","9dcf81bf":"code","563c82d8":"code","768853e1":"code","0b949f8f":"code","ca0b315d":"code","a677747e":"markdown","59f4a9ef":"markdown","1439774d":"markdown","fe0604f4":"markdown","f2fa30b1":"markdown","1b2b4459":"markdown"},"source":{"5995bde6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af51445a":"import plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport re\n\nimport pandas as pd\nimport seaborn as sns\nsns.set()\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport sklearn","062416e2":"housing = pd.read_csv(\"..\/input\/california-housing-prices\/housing.csv\")\nhousing.head()","c6b70444":"housing.info()","7bf8722a":"housing.describe()","fbf36ea7":"housing.corr(method='pearson').sort_values(by='median_income',ascending=False)","6f748b7f":"fig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(housing.corr(), vmin=-1, vmax=1, annot = True,cmap=\"YlGnBu\",ax=ax)","5621ffd6":"housing[\"rooms_per_household\"] = housing[\"total_rooms\"]\/housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]\/housing[\"total_rooms\"]\nhousing[\"population_per_household\"]=housing[\"population\"]\/housing[\"households\"]\n\na=housing['median_house_value']\nhousing.loc[(a<=100000) , 'house_value_cat'] = 'Low' \nhousing.loc[((a>100000 ) & (a <=200000)) , 'house_value_cat'] = 'Medium'  \nhousing.loc[((a>200000 ) & (a <=300000)) , 'house_value_cat'] = 'High'    \nhousing.loc[(a>300000 ) , 'house_value_cat'] = 'Very_high' \n\na=housing['median_house_value']\nhousing.loc[(a<=100000) , 'house_value_cat'] = 0\nhousing.loc[((a>100000 ) & (a <=200000)) , 'house_value_cat'] = 1\nhousing.loc[((a>200000 ) & (a <=300000)) , 'house_value_cat'] = 2    \nhousing.loc[(a>300000 ) , 'house_value_cat'] = 3","e46a9f22":"%matplotlib inline\nimport matplotlib.pyplot as plt\nhousing.hist(bins=50, figsize=(20,15))\nplt.show()","38de0775":"housing.plot(kind='density',subplots=True,layout=(4,4),sharex=False,figsize=(10,10))\nplt.tight_layout()","fd8c37e2":"housing.plot(kind='box', subplots=True, layout=(4,4), sharex=False,\nfontsize=8,figsize=(10,10))\nplt.tight_layout()","d4db2d69":"from pandas.plotting import scatter_matrix\n\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\"]\nscatter_matrix(housing[attributes], figsize=(12, 8))\nplt.show()","65eb1ab5":"housing_group=housing.groupby('longitude').mean()\nhousing_group.reset_index(inplace=True)\nhousing_group.head()","f8aa5c6f":"import folium\n\nimport branca\nimport branca.colormap as cm\n\nx_start = (housing_group['latitude'].max() + housing_group['latitude'].min()) \/ 2\ny_start = (housing_group['longitude'].max() + housing_group['longitude'].min()) \/ 2\nstart_coord = (x_start, y_start)\n\nvmin=housing_group['median_house_value'].min()\nvmax=housing_group['median_house_value'].max()\n#colormap = cm.LinearColormap(colors=['red','lightblue'],vmin=housing_group['median_house_value'].min(),vmax=housing_group['median_house_value'].max())\ncolormap=cm.LinearColormap(\n    ['green', 'yellow', 'red'],\n    vmin=vmin, vmax=vmax)\n\nmap = folium.Map(location=start_coord, zoom_start=5)\n\nfor lat, lon, house_value, room,population in zip(housing_group['latitude'], housing_group['longitude'], \n                                       housing_group['median_house_value'],housing_group['rooms_per_household'],\n                                       housing_group['population']):\n  folium.CircleMarker(\n        [lat, lon],\n        radius=population*0.005,\n                        popup = (\n                                '<strong>House_value: <\/strong>: ' + str(house_value) + '<br>'\n                                '<strong>Room: <\/strong>: ' + str(room) + '<br>'\n                                '<strong>Population: <\/strong>: ' + str(population) + '<br>'),\n        fill=colormap(house_value),\n        color=colormap(house_value),\n        fill_opacity=0.7\n    ).add_to(map)\nmap.add_child(colormap)\nmap.save('map.html')\nmap","9b83fac5":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.violinplot(x='house_value_cat',y='median_income',data=housing)","442f2bb3":"sns.FacetGrid(housing, hue=\"house_value_cat\", size=6) \\\n   .map(sns.kdeplot, \"median_income\") \\\n   .add_legend()\nplt.ioff() ","4de317d3":"fig=sns.jointplot(x='median_income',y='median_house_value',data=housing,kind='kde',\n                  color='g')","9dcf81bf":"import plotly.express as px\nfig = px.parallel_coordinates(housing, color=\"house_value_cat\",\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             #color_continuous_midpoint=2\n                              )\nfig.show()","563c82d8":"import plotly.express as px\ndf = px.data.wind()\nfig = px.line_polar(housing, r=\"median_house_value\", theta=\"ocean_proximity\", color=\"house_value_cat\", line_close=True,\n                    color_discrete_sequence=px.colors.sequential.Plasma_r,\n                    template=\"plotly_dark\",)\n#r : do lon tren tung category\n#theta: category tren radar chart\n#color: mau sac\nfig.show()","768853e1":"plt.figure(figsize=(15, 25))\n\nfor i, column in enumerate(housing.columns, 1):\n  plt.subplot(8, 2, i)\n  housing[housing[\"house_value_cat\"] == 0][column].hist(bins=35, color='blue', label='Low', alpha=0.6)\n  housing[housing[\"house_value_cat\"] == 1][column].hist(bins=35, color='red', label='Medium', alpha=0.6)\n  housing[housing[\"house_value_cat\"] == 2][column].hist(bins=35, color='red', label='High', alpha=0.6)\n  housing[housing[\"house_value_cat\"] == 3][column].hist(bins=35, color='red', label='VeryHigh', alpha=0.6)\n  plt.legend()\n  plt.xlabel(column)\nplt.tight_layout","0b949f8f":"px.scatter(housing, x=\"median_income\", y=\"median_house_value\", \n           animation_frame=\"ocean_proximity\",\n           #animation_group=\"age\",\n           size=\"rooms_per_household\", \n           color=\"house_value_cat\", \n           #hover_name=\"sex\",\n           #log_x=True, \n           #size_max=55, range_x=[100,100000], range_y=[25,90]\n           )","ca0b315d":"a=housing.sort_values(by='housing_median_age')\npx.scatter(a, x=\"median_income\", y=\"median_house_value\", \n           animation_frame=\"housing_median_age\",\n           #animation_group=\"age\",\n           size=\"rooms_per_household\", \n           color=\"house_value_cat\", \n           #hover_name=\"sex\",\n           #log_x=True, \n           #size_max=55, range_x=[100,100000], range_y=[25,90]\n           )","a677747e":"Parallel coordinate plot: This type of visualisation is used for plotting multivariate, numerical data. Parallel Coordinates Plots are ideal for comparing many variables together and seeing the relationships between them. For example, if you had to compare an array of products with the same attributes (comparing computer or cars specs across different models).","59f4a9ef":"# 1. Get data","1439774d":"Map visual: radius is population (larger is higher pop), color: house value (more red more value)","fe0604f4":"# 4. Data visualization","f2fa30b1":"# 3. Feature engineer","1b2b4459":"# 2. Descriptive Statics"}}