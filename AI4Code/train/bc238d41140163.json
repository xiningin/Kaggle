{"cell_type":{"dd0fd1a2":"code","bf070156":"code","171f2f70":"code","5fb9b4d5":"code","8d10797f":"code","fa3a84fb":"code","4ae921e0":"markdown","726273eb":"markdown","3eb83cde":"markdown","fbd20a0b":"markdown","6080c53e":"markdown"},"source":{"dd0fd1a2":"import os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex7 import *\n\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n\ndf = pd.read_csv('..\/input\/train.csv')\n\ny = df.SalePrice\n\nfeatures = new_features = ['OpenPorchSF','LotArea','BsmtFinSF1','BsmtUnfSF','BsmtFullBath','HalfBath','BedroomAbvGr','Fireplaces','WoodDeckSF','OpenPorchSF','ScreenPorch',\n                     'OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF','2ndFlrSF',\n               'GrLivArea','FullBath','TotRmsAbvGrd','GarageCars','GarageArea']\n\n\n\nX2 = df[new_features]\n\ny= df['SalePrice']\n\nX_train, X_test, y_train, y_test = train_test_split(X2, y, random_state=1)\n\n\n\ndtree = DecisionTreeRegressor(random_state=1)\ndtree.fit(X_train,y_train)\ndtree_pred = dtree.predict(X_test)\ndtree_mae = mean_absolute_error(dtree_pred, y_test)\nprint(\"Validation MAE using Decision Tress: {:,.0f}\".format(dtree_mae))\n\n\nrfr = RandomForestRegressor(random_state=1)\nrfr.fit(X_train,y_train)\nrfr_pred= rfr.predict(X_test)\nrfr_mae = mean_absolute_error(rfr_pred, y_test)\nprint(\"Validation MAE using Random Forests: {:,.0f}\".format(rfr_mae))","bf070156":"rfr_full = RandomForestRegressor(random_state=1)\nrfr_full.fit(X2,y)","171f2f70":"test_data = pd.read_csv(\"..\/input\/test.csv\")\n\n\ntest_X = test_data[new_features]\n\ntest_X.info()\n\n","5fb9b4d5":"test_X['BsmtFinSF1'] = test_X['BsmtFinSF1'].fillna(test_X['BsmtFinSF1'].mean())\ntest_X['BsmtUnfSF'] = test_X['BsmtUnfSF'].fillna(test_X['BsmtUnfSF'].mean())\ntest_X['BsmtFullBath'] = test_X['BsmtFullBath'].fillna(test_X['BsmtFullBath'].mean())\ntest_X['TotalBsmtSF'] = test_X['TotalBsmtSF'].fillna(test_X['TotalBsmtSF'].mean())\ntest_X['GarageCars'] = test_X['GarageCars'].fillna(test_X['GarageCars'].mean())\ntest_X['GarageArea'] = test_X['GarageArea'].fillna(test_X['GarageArea'].mean())","8d10797f":"test_X.info()","fa3a84fb":"test_preds = rfr_full.predict(test_X)\n        \noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","4ae921e0":"# Making Predictions","726273eb":"# Analyzing Test Data","3eb83cde":"# Filling Missing Values\n\n(Just ignore the warnings)","fbd20a0b":"## House Price Prediction Competition","6080c53e":"## Model Training"}}