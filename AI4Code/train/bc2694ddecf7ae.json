{"cell_type":{"005e5463":"code","b8320363":"code","ef993711":"code","0e424be2":"code","a36d7171":"code","3d0b86de":"code","a936bc56":"code","71e7db68":"code","401821cc":"code","99f3bd95":"code","6af61964":"code","68ef5eaa":"code","4b958c01":"code","10d4c694":"code","d553b969":"code","3a84a881":"markdown","49a25319":"markdown","5436f8f8":"markdown","e238da3d":"markdown","dd69ab38":"markdown","37c1d831":"markdown","d146bd22":"markdown","434bf360":"markdown","fe15d463":"markdown"},"source":{"005e5463":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport gc\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8320363":"TRAINING = True\nDEBUG = False\n\ntrain_data = pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/train.csv\")\ntrain_data","ef993711":"asset_details = pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/asset_details.csv\")\nasset_details.sort_values(by=['Asset_ID'], inplace=True)\nasset_details","0e424be2":"def fix_train_test_data(df, debug=False):\n    df['order1'] = range(df.shape[0])\n    df['order2'] = df.timestamp\n    \n    fixed_data = pd.DataFrame(columns=[col for col in df.columns if col != 'timestamp'])\n    for asset_id in range(14):\n        if debug:\n            print(\"-\"*81)\n            print(\"For Asset_ID:\", asset_id)\n            print()\n        \n        temp = df[df.Asset_ID == asset_id].set_index('timestamp')\n        \n        if debug:\n            print(\"Total number of NaN:\", sum(temp.isna().sum()))\n            \n        temp.fillna(method='ffill', inplace=True)\n        temp.fillna(method='bfill', inplace=True) #For edge cases\n        \n        if debug:\n            print(\"NaN after fill:\", sum(temp.isna().sum()))\n            print()\n            print(\"Before fixing gaps:\")\n            display((temp.index[1:]-temp.index[:-1]).value_counts().head())\n     \n        temp = temp.reindex(range(temp.index[0],temp.index[-1]+60,60),method='pad')\n        \n        if debug:\n            print()\n            print(\"After fixing gaps:\")\n            display((temp.index[1:]-temp.index[:-1]).value_counts().head())\n    \n        fixed_data = pd.concat([fixed_data, temp])\n        if debug:\n            print(\"-\"*81)\n            print(\"Total size:\", fixed_data.shape)\n            \n    return fixed_data.sort_values(by=['order1', 'order2'])\n\nfixed_data = fix_train_test_data(train_data, debug=DEBUG)","a36d7171":"fixed_data","3d0b86de":"temp = fixed_data[fixed_data.Asset_ID == 0]\nplt.plot(temp.index, temp.Target, c='#00aa00', alpha=0.75)\nplt.show()","a936bc56":"test_data = pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/example_test.csv\")\ntest_data.head(7)","71e7db68":"fixed_test = fix_train_test_data(test_data, debug=DEBUG)","401821cc":"with pd.option_context('display.max_rows',10):\n    display(fixed_test)","99f3bd95":"if not TRAINING:\n    fig, ax = plt.subplots(14, 3, sharex=True, figsize=(24, 32))\n\n    for i, lab in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n        temp = fixed_data[fixed_data.Asset_ID == i]\n        ax[i, 0].title.set_text(f'{lab} Open Price:')\n        ax[i, 0].plot(temp.index, temp.Open, c=\"#0000aa\", alpha=0.75)\n        ax[i, 1].title.set_text(f'{lab} Close Price:')\n        ax[i, 1].plot(temp.index, temp.Close, c=\"#aa0000\", alpha=0.75)\n        ax[i, 2].title.set_text(f'{lab} Price Gap:')\n        ax[i, 2].plot(temp.index, temp.Close - temp.Open, c=\"#00aa00\", alpha=0.75)\n        del temp\n        gc.collect()\n    plt.show()","6af61964":"if not TRAINING:\n    fig, ax = plt.subplots(14, 3, sharex=True, figsize=(24, 32))\n\n    for i, lab in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n        temp = fixed_data[fixed_data.Asset_ID == i]\n        ax[i, 0].title.set_text(f'{lab} Minute Lowest Price:')\n        ax[i, 0].plot(temp.index, temp.Low, c=\"#0000aa\", alpha=0.75)\n        ax[i, 1].title.set_text(f'{lab} Minute Highest Price:')\n        ax[i, 1].plot(temp.index, temp.High, c=\"#aa0000\", alpha=0.75)\n        ax[i, 2].title.set_text(f'{lab} Minute Gap:')\n        ax[i, 2].plot(temp.index, temp.High - temp.Low, c=\"#00aa00\", alpha=0.75)\n        del temp\n        gc.collect()\n    plt.show()","68ef5eaa":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, Dropout, Reshape, BatchNormalization\n\nnode_size = 128\ndef create_model(n_features):\n    model = Sequential()\n    \n    #model.add(Dense(units=node_size*2, activation='sigmoid', input_shape=(n_features,)))\n    model.add(Reshape((n_features, 1), input_shape=(n_features,)))\n    \n    model.add(LSTM(units = node_size, kernel_initializer='random_normal', return_sequences = True))\n    model.add(Dropout(0.1))\n\n    model.add(LSTM(units = node_size, kernel_initializer='random_normal', return_sequences = True))\n    model.add(Dropout(0.1))\n    \n    model.add(BatchNormalization())\n\n    model.add(LSTM(units = node_size, kernel_initializer='random_normal', return_sequences = True))\n    model.add(Dropout(0.1))\n\n    model.add(LSTM(units = node_size, kernel_initializer='random_normal'))\n    model.add(Dropout(0.1))\n    \n    model.add(BatchNormalization())\n    \n    model.add(Dense(units = 1))\n    \n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n    model.compile(optimizer = optimizer, loss = 'mean_squared_error')\n    return model\nmodel = create_model(7)\nmodel.summary()","4b958c01":"models = {}\ntrain_columns = [\"Count\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\", \"VWAP\"]\n\nif TRAINING:\n    for i, lab in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n        print(f\"Training for {lab}:\")\n        x_train = fixed_data[fixed_data.Asset_ID == i]\n        y_train = x_train.Target\n        x_train = x_train[train_columns]\n\n        batch_size = 256\n        epochs = 10\n        model = create_model(len(train_columns))\n        model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1)\n        models[lab] = model\n        model.save(f\"{lab}_trained_weights.hdf5\")\n        print(f\"Finished training for {lab}.\")","10d4c694":"import gresearch_crypto\n\nif TRAINING:\n    env = gresearch_crypto.make_env()\n    iter_test = env.iter_test()\n\n    for i, (df_test, df_pred) in enumerate(iter_test):\n        for j , row in df_test.iterrows():\n\n            model = models[asset_details[asset_details.Asset_ID == 0].Asset_Name.values[0]]\n            x_test = row[train_columns]\n            y_pred = model.predict(x_test.values.reshape(1, -1))[0]\n\n            df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n\n            # Print just one sample row to get a feeling of what it looks like\n            if i == 0 and j == 0:\n                display(x_test)\n\n        # Display the first prediction dataframe\n        if i == 0:\n            display(df_pred)\n\n        # Send submissions\n        env.predict(df_pred)","d553b969":"for i, lab in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n    temp = fixed_data[fixed_data.Asset_ID == i][:100]\n    preds = models[lab].predict(temp[train_columns])\n    plt.title(f\"{lab} Target vs Prediction:\")\n    plt.plot(temp.index, temp.Target, c='#00aa00')\n    plt.plot(temp.index, preds, c='#bb0000')\n    plt.legend(['Target', \"Prediction\"])\n    plt.show()\n    plt.savefig(f'{lab}_compare_target.png')\n    plt.close()","3a84a881":"## Check Target Data Fluctuation","49a25319":"# Read Train Data","5436f8f8":"# Model Creation","e238da3d":"# Predict","dd69ab38":"# Import","37c1d831":"# Exploratory Analysis","d146bd22":"## Define Data Cleaning Function","434bf360":"To be continued...","fe15d463":"# Test Data"}}