{"cell_type":{"d3bb1bb6":"code","cec771d2":"code","0c0930f0":"markdown","0d0ce169":"markdown"},"source":{"d3bb1bb6":"import numpy as np\nimport pandas as pd\n!pip install rake-nltk\nfrom rake_nltk import Rake\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndf = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\n'''\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\n\n\n#c_data = np.loadtxt('..\/input\/consinesimilaritymatrix\/cosine.csv', delimiter=',')'''\n\nnew_df = df[['title','director','cast','listed_in','description']]\n\n# REMOVE NaN VALUES AND EMPTY STRINGS:\nnew_df.dropna(inplace=True)\n\nblanks = []  # start with an empty list\n\ncol=['title','director','cast','listed_in','description']\nfor i,col in new_df.iterrows():  # iterate over the DataFrame\n    if type(col)==str:            # avoid NaN values\n        if col.isspace():         # test 'review' for whitespace\n            blanks.append(i)     # add matching index numbers to the list\n\nnew_df.drop(blanks, inplace=True)\n\n# initializing the new column\nnew_df['Key_words'] = \"\"\n\nfor index, row in new_df.iterrows():\n    description = row['description']\n    \n    # instantiating Rake, by default it uses english stopwords from NLTK\n    # and discards all puntuation characters as well\n    r = Rake()\n\n    # extracting the words by passing the text\n    r.extract_keywords_from_text(description)\n\n    # getting the dictionary whith key words as keys and their scores as values\n    key_words_dict_scores = r.get_word_degrees()\n    \n    # assigning the key words to the new column for the corresponding movie\n    row['Key_words'] = list(key_words_dict_scores.keys())\n\n# dropping the Plot column\nnew_df.drop(columns = ['description'], inplace = True)\n\n# discarding the commas between the actors' full names and getting only the first three names\nnew_df['cast'] = new_df['cast'].map(lambda x: x.split(',')[:3])\n\n# putting the genres in a list of words\nnew_df['listed_in'] = new_df['listed_in'].map(lambda x: x.lower().split(','))\n\nnew_df['director'] = new_df['director'].map(lambda x: x.split(' '))\n\n# merging together first and last name for each actor and director, so it's considered as one word \n# and there is no mix up between people sharing a first name\nfor index, row in new_df.iterrows():\n    row['cast'] = [x.lower().replace(' ','') for x in row['cast']]\n    row['director'] = ''.join(row['director']).lower()\n    \nnew_df.set_index('title', inplace = True)\n\nnew_df['bag_of_words'] = ''\ncolumns = new_df.columns\nfor index, row in new_df.iterrows():\n    words = ''\n    for col in columns:\n        if col != 'director':\n            words = words + ' '.join(row[col])+ ' '\n        else:\n            words = words + row[col]+ ' '\n    row['bag_of_words'] = words\n    \nnew_df.drop(columns = [col for col in new_df.columns if col!= 'bag_of_words'], inplace = True)\n\n# instantiating and generating the count matrix\ncount = CountVectorizer()\ncount_matrix = count.fit_transform(new_df['bag_of_words'])\n\n# creating a Series for the movie titles so they are associated to an ordered numerical\n# list I will use later to match the indexes\nindices = pd.Series(new_df.index)\n\ncosine_sim = cosine_similarity(count_matrix, count_matrix)\n\n\n# function that takes in movie title as input and returns the top 10 recommended movies\ndef recommendations(Title, cosine_sim = cosine_sim):\n    \n    recommended_movies = []\n    \n    # gettin the index of the movie that matches the title\n    idx = indices[indices == Title].index[0]\n\n    # creating a Series with the similarity scores in descending order\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n\n    # getting the indexes of the 10 most similar movies\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    \n    # populating the list with the titles of the best 10 matching movies\n    for i in top_10_indexes:\n        recommended_movies.append(list(new_df.index)[i])\n        \n    return recommended_movies","cec771d2":"recommendations(\"Logan's Run\")","0c0930f0":"## Ch\u1ecdn danh s\u00e1ch phim t\u1eeb [\u0111\u00e2y](https:\/\/docs.google.com\/spreadsheets\/d\/1nMcxQd7NUnbPmD1_ZB_kXcRt2oaVMVcdNCFluY66zqk\/edit#gid=3546623), h\u1ec7 th\u1ed1ng s\u1ebd t\u1ef1 recommend film ph\u00f9 h\u1ee3p.\n\nV\u00ed d\u1ee5:","0d0ce169":"## T\u1ea3i th\u01b0 vi\u1ec7n v\u00e0 load m\u00f4 h\u00ecnh "}}