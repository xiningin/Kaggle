{"cell_type":{"184424f3":"code","ed1082dd":"code","eb3c9ed3":"code","a4aabefb":"code","998552c5":"code","2d42aac5":"code","1b11dbf5":"code","5742d7df":"code","fe4f2984":"code","8cbff734":"code","d5131465":"code","ff7aeac8":"code","4060260b":"code","a92e7ccd":"code","c72a8ff1":"code","beabdf9f":"code","68ff9040":"code","caf0d05a":"code","ca3fde13":"code","e1a69038":"code","5c150411":"code","a8e2e3b9":"code","b41a5734":"code","bddca52a":"code","84ce7bc3":"code","0730c531":"code","44dfd01a":"code","2149ec57":"code","e8c84869":"code","57ccf712":"code","831bc495":"code","21afb8e4":"code","d365e13d":"code","6c654f8d":"code","ef2552c6":"code","16153225":"code","3a03028d":"code","672d3f1a":"code","a6de4aaf":"code","3eb05ff6":"code","567b5620":"code","6cca90dd":"code","0002ce5a":"code","01d9c05f":"code","6854c03f":"code","1f32a471":"code","1df071fe":"code","8ce8df81":"code","6d2a843c":"code","658c7de1":"code","222421f3":"code","15ee8864":"code","87fd8bc1":"code","4fdae347":"code","1d94258e":"code","1f3426b8":"code","214ef686":"code","26391383":"code","f0c504e4":"code","213d41ec":"code","e615f002":"code","8c9cb34b":"code","3ae1cd77":"code","7d6c9333":"code","a5d26dc7":"code","02ce8b93":"code","df97d388":"code","9d60305e":"code","44ca8f5d":"code","e1f2f711":"code","8fdc966e":"code","5ce2f895":"code","6568acc6":"code","e79dd78a":"code","3d41c753":"code","8bdc8f91":"code","c31b08ae":"code","73c074cf":"code","32cb24e9":"code","d42355b2":"code","ad8f2dc5":"code","54758fc9":"code","5f50fffd":"code","b0926d64":"code","855fd323":"code","4d6aa696":"code","2a6cb2c6":"code","bb808ef3":"code","54448702":"code","89869ddf":"code","f1fc4078":"code","23d0a9f5":"code","23550ba2":"code","dbb422e0":"code","89a8cfbc":"code","83de3fee":"code","4a365262":"code","f247993a":"code","40d67bba":"code","05beeb17":"code","2b33e772":"code","05998b3b":"code","a913eef5":"code","4c1da04d":"code","7253bbd5":"code","3c190f08":"code","14510338":"code","295a0f78":"code","f7256b34":"code","7a3b543c":"code","432247d1":"code","2d5ab56e":"code","4716c353":"code","64410694":"code","4f49b311":"code","5aafa4ac":"code","d1238fff":"code","dffbc83f":"markdown","149aba20":"markdown","9cb79e0c":"markdown","5e93a450":"markdown","8f064be5":"markdown","113f2e10":"markdown","846a3cb6":"markdown","94ee080c":"markdown","58c3c14a":"markdown","63c7bee3":"markdown","c012d062":"markdown","6aebb9f0":"markdown","b58259b3":"markdown","bee3e5c7":"markdown","3c66b941":"markdown","c3124611":"markdown","846e582d":"markdown","c2317099":"markdown","a8b81dda":"markdown","afb2404c":"markdown","0062edd8":"markdown","5e1bdb30":"markdown","fde38926":"markdown","c8279454":"markdown","6d6cc7ae":"markdown","d13bc9e4":"markdown","b662bc69":"markdown","9e9a8131":"markdown","ec1fc3bd":"markdown","109c7213":"markdown","b628b429":"markdown","530a3c83":"markdown","56753153":"markdown","d29c50c3":"markdown","3e09888e":"markdown","3c11a0ba":"markdown","faa890d1":"markdown"},"source":{"184424f3":"import numpy as np\nimport pandas as pd\nimport gc\nimport math \nimport pickle\nfrom datetime import datetime, timedelta\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.style as style\nimport seaborn as sns\nstyle.use('seaborn-poster') \n# style.use('ggplot')\nplt.rcParams[\"date.autoformatter.day\"] = \"%Y-%m-%d\"\npd.options.display.max_rows = 999\npd.set_option('display.max_columns', 500)\n\n\nimport requests\nimport io\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","ed1082dd":"# Print available file names (data imported to this kernel); note: we will access some files directly from Johns Hopkins and other sources -- see next cells \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eb3c9ed3":"# Assign World Bank data files (posted to this kernel) to variables  \nfile_world_bank_pop='..\/input\/world-bank-country-demographics\/World_Bank_Pop_by_Country.csv'\nfile_world_bank_age65='..\/input\/world-bank-country-demographics\/World_Bank_Age_65plus_by_Country.csv'\nfile_pop_density = '..\/input\/world-bank-country-demographics\/World_Bank_Pop_Density.csv'\nfile_df_demographics='..\/input\/world-bank-country-demographics\/df_demographics.pkl'\n\n# Assign CDC data files (posted to this kernel) to variables\nfile_cdc_onset= '..\/input\/cdc-coronavirus-03-25\/CDC_onset_date.csv'","a4aabefb":"# To access files directly from Hopkins' github, use these variables\/URLs\nfile_confirmed ='https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\nfile_deaths =  'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\n\n# Country data, derived from Johns Hopkins and other sources, is available here:  \nfile_regions_deaths= 'https:\/\/coviddata.github.io\/coviddata\/v1\/regions\/deaths.csv'\nfile_regions_cases= 'https:\/\/coviddata.github.io\/coviddata\/v1\/regions\/cases.csv'","998552c5":"def prep_data(filename, colname):\n    '''\n    Reads coronavirus csv file and edits\/reshapes it, including turning date columns into rows\/obseravtions.\n    \n    filename: the name of the csv file to be imported.\n    colname: the name of a new column to be added to the data.\n    returns: a dataframe with the edited\/reshaped data.     \n    '''\n    df=pd.read_csv(filename)\n    df=pd.melt(df, id_vars=['Country\/Region', 'Province\/State', 'Lat', 'Long'], var_name='Date', value_name=colname)\n    df=df[['Date','Country\/Region', 'Province\/State', 'Lat', 'Long', colname]]\n    df['Date']= pd.to_datetime(df['Date'])\n    return df  \n\ndef prep_region_data(filename, colname):\n    '''\n    Reads coronavirus csv file and edits\/reshapes it, including turning date columns into rows\/obseravtions.\n    \n    filename: the name of the csv file to be imported.\n    colname: the name of a new column to be added to the data.\n    returns: a dataframe with the edited\/reshaped data.     \n    '''\n    df=pd.read_csv(filename)\n    df=pd.melt(df, id_vars=['Country', 'Region'], var_name='Date', value_name=colname)\n    df=df[['Date','Country', 'Region', colname]]\n    df['Date']= pd.to_datetime(df['Date'])\n    return df  \n\ndef calc_daily_numbers(df):\n    '''\n    Calculates the daily numbers from the rolling cumulative data.\n    df: dataframe with the underlying data.\n    returns: an expanded dataframe with the daily breakouts.\n    '''\n    df['Number_Confirmed_Day'] = df['Number_Confirmed'].diff().fillna(df['Number_Confirmed'])\n#     df['Number_Recovered_Day'] = df['Number_Recovered'].diff().fillna(df['Number_Recovered'])\n    df['Number_Deaths_Day'] = df['Number_Deaths'].diff().fillna(df['Number_Deaths'])\n    return df\n","2d42aac5":"# Get yesterday's date (GMT-based)\nlast_date = datetime.strftime(datetime.now() - timedelta(1), '%Y-%m-%d')\nprint(\"Last date in dataset:  \", last_date)","1b11dbf5":"df_confirmed=prep_data(file_confirmed, 'Number_Confirmed')\ndf_confirmed.tail()","5742d7df":"df_deaths=prep_data(file_deaths, 'Number_Deaths')\ndf_deaths=df_deaths[['Date', 'Country\/Region', 'Province\/State', 'Number_Deaths']]\ndf_deaths.tail()","fe4f2984":"# Merge into one dataframe \ndf_master = df_confirmed.merge(df_deaths, on=['Date', 'Country\/Region', 'Province\/State'])\ndf_master[['Country\/Region', 'Province\/State']]=df_master[['Country\/Region', 'Province\/State']].fillna(value='NA')\ndf_master[['Number_Confirmed', 'Number_Deaths']]=df_master[['Number_Confirmed', 'Number_Deaths']].fillna(value=0)\ndf_master=df_master[['Date', 'Country\/Region', 'Province\/State','Lat', 'Long','Number_Confirmed', 'Number_Deaths']]\ndf_master","8cbff734":"# Check\ndf_master.loc[df_master['Country\/Region']=='US'].tail(20)","d5131465":"sorted(df_master['Country\/Region'].unique())","ff7aeac8":"df_master_country=df_master.copy()\ndf_master_country.drop(columns=['Province\/State'], inplace=True)\ndf_master_country=df_master_country.groupby(['Date', 'Country\/Region'])['Number_Confirmed', \n       'Number_Deaths'].agg('sum').reset_index()\ndf_master_country","4060260b":"# Look at one country \ncountry='Germany'\ndf_master_country.loc[df_master_country['Country\/Region']==country][-10:]","a92e7ccd":"# Aggregate data globally by date\ndf_global=df_master_country.groupby(['Date']).agg('sum').reset_index()\ndf_global.tail()","c72a8ff1":"df_global['Number_Confirmed_Daily'] = df_global['Number_Confirmed'].diff().fillna(\n        df_global['Number_Confirmed'])\ndf_global['Number_Deaths_Daily'] = df_global['Number_Deaths'].diff().fillna(\n        df_global['Number_Deaths'])\ndf_global.tail()","beabdf9f":"df_global.plot(x='Date', y=['Number_Confirmed', 'Number_Deaths'], kind='line', title=\"Global Coronavirus Trends-Cumulative\")","68ff9040":"df_global_copy=df_global.copy()[-60:]\ndf_global_copy['Date']=df_global_copy['Date'].dt.strftime('%Y-%m-%d')\ndf_global_copy.plot(x='Date', y=['Number_Confirmed_Daily', 'Number_Deaths_Daily'], kind='bar', \n                    title=\"Global Coronavirus Trends - Daily\", fontsize=8)\nplt.xticks(rotation=45)\nsns.set_context('poster') \nplt.show","caf0d05a":"# Countries sorted by Number Confirmed as of last date\ndf_sorted=df_master_country.loc[df_master_country['Date']==last_date]\ndf_sorted=df_sorted.sort_values(by=['Number_Confirmed'], ascending=False).reset_index(drop=True)\ndf_sorted.index = df_sorted.index + 1\ndf_sorted.head(20)","ca3fde13":"# top 10 countries\ncountry_list=list(df_sorted['Country\/Region']) \n# country_list=[c for c in country_list if c != 'Others']\ncountry_list=country_list[:10]\ncountry_list","e1a69038":"df_grouped_daily=df_master_country.groupby('Country\/Region').apply(lambda x: x.reset_index(drop=True)).drop(['Country\/Region'],axis=1).reset_index()\ndf_grouped_daily.drop(columns=['level_1'], inplace=True)\ndf_grouped_daily.head()","5c150411":"df_grouped_daily['Number_Confirmed_Daily'] = df_grouped_daily.groupby(\n    'Country\/Region')['Number_Confirmed'].diff().fillna(\n        df_grouped_daily['Number_Confirmed'])\ndf_grouped_daily['Number_Deaths_Daily'] = df_grouped_daily.groupby(\n    'Country\/Region')['Number_Deaths'].diff().fillna(\n        df_grouped_daily['Number_Deaths'])\ndf_grouped_daily.tail()","a8e2e3b9":"# Check one country \ncountry_view='US'\ndf_grouped_daily.loc[df_grouped_daily['Country\/Region']==country_view][-10:]","b41a5734":"df_grouped_daily['Death_Rate']=df_grouped_daily['Number_Deaths'] * 100 \/ df_grouped_daily['Number_Confirmed']\n# Check\ndf_grouped_daily.loc[df_grouped_daily['Country\/Region']=='Korea, South'][-5:]","bddca52a":"df_comp_deaths = df_grouped_daily.loc[(\n    df_grouped_daily['Date'] == last_date)]\ndf_comp_deaths = df_comp_deaths.sort_values(\n    by=['Death_Rate'],\n    ascending=False).dropna(axis=0).reset_index()\ndf_comp_deaths.index+=1\ndf_comp_deaths=df_comp_deaths[['Date', 'Country\/Region', 'Number_Confirmed', 'Number_Deaths', 'Death_Rate']]\n# Death rate - minimum of n confirmed cases \nmin_n=500\ndf_comp_deaths.loc[df_comp_deaths['Number_Confirmed']>=min_n]","84ce7bc3":"df_demographics=pd.read_pickle(file_df_demographics)\ndf_demographics","0730c531":"# Append demograohic data to master data  \ndf_grouped_daily=df_grouped_daily.merge(df_demographics, how='left', on=['Country\/Region'])\n# Check \ndf_grouped_daily.loc[df_grouped_daily['Country\/Region']=='US'][-5:]","44dfd01a":"# Add column on # cases\/population \ndf_grouped_daily['Confirmed_Per_Mil']=df_grouped_daily['Number_Confirmed'] * 1_000_000 \/ df_grouped_daily['2018_Tot_Pop']\n# Rank countries by cases per million for last date\ndf_comp_percentages = df_grouped_daily.loc[(\n    df_grouped_daily['Date'] == last_date)]\ndf_comp_percentages = df_comp_percentages.sort_values(\n    by=['Confirmed_Per_Mil'],\n    ascending=False).dropna(axis=0).reset_index()\ndf_comp_percentages.index+=1\ndf_comp_percentages=df_comp_percentages[['Date', 'Country\/Region', 'Number_Confirmed', '2018_Tot_Pop', 'Confirmed_Per_Mil']]\ndf_comp_percentages","2149ec57":"# Results from last n days \nfrom datetime import datetime, timedelta\nlast_n_days=3\ndate_start = datetime.today() - timedelta(days=last_n_days)\nprint(\"Last n days = \" + str(last_n_days))\nprint(\"Start date = \" + date_start.strftime('%Y-%m-%d'))","e8c84869":"df_grouped_last_n=df_grouped_daily.loc[df_grouped_daily['Date'] > date_start]\ndf_grouped_last_n.head()","57ccf712":"df_sorted_last_n=df_grouped_last_n.sort_values(by=['Number_Confirmed'], ascending=False).reset_index(drop=True)\ndf_sorted_last_n.index = df_sorted_last_n.index + 1\ndf_sorted_last_n.head()","831bc495":"# Last n days grouped by country \ndf_sorted_last_n_grouped=df_sorted_last_n.groupby(['Country\/Region'])['Number_Confirmed_Daily', \n       'Number_Deaths_Daily'].agg('sum')\ndf_sorted_last_n_grouped=df_sorted_last_n_grouped.sort_values(\n    by=['Number_Confirmed_Daily'],\n    ascending=False).dropna(axis=0).reset_index()\ndf_sorted_last_n_grouped.index+=1\nprint(\"Totals from Last \"+ str(last_n_days) + \" Days\")\ndf_sorted_last_n_grouped","21afb8e4":"df_sorted_=df_grouped_daily.loc[df_grouped_daily['Date']==last_date]\ndf_sorted=df_sorted.sort_values(by=['Number_Confirmed'], ascending=False).reset_index(drop=True)\ndf_sorted.index = df_sorted.index + 1\ndf_sorted.head(10)","d365e13d":"# Example -- any country\ncountry='US'\ndf_country=df_grouped_daily.loc[df_grouped_daily['Country\/Region']== country].copy()\ndf_country.tail()","6c654f8d":"df_country=df_grouped_daily.loc[df_grouped_daily['Country\/Region']== country].copy()\ndf_country=df_country.loc[df_country['Date'] > '02-20-2020']\ndf_country.plot(x='Date', y=['Number_Confirmed', 'Number_Deaths'], kind='line', title=country + \" Coronavirus Trends - Cumulative\")\nsns.set_context('poster') ","ef2552c6":"# Without rolling average \ndf_country_copy=df_country.copy()\ndf_country_copy['Date']=df_country_copy['Date'].dt.strftime('%Y-%m-%d')\nmax_y=max(df_country_copy['Number_Confirmed_Daily'])\nmax_y=int(math.ceil(max_y \/ 1000.0)) * 1000 + 1_000\ndf_country_copy.plot(x=\"Date\", y=['Number_Confirmed_Daily'], kind='bar', title=country + \" Coronavirus Trends - Cases\", fontsize=10, color='b')\nplt.xticks(rotation=45, fontsize=8)\nsns.set_context('poster') \nplt.ylim([0, max_y])\nplt.show()","16153225":"# Add rolling averages\ndf_country_copy=df_country.copy()\nrolling_window=7\ndf_country_copy['Rolling_Confirmed']=df_country_copy['Number_Confirmed_Daily'].rolling(window=rolling_window).mean().fillna(0)\ndf_country_copy['Rolling_Deaths']=df_country_copy['Number_Deaths_Daily'].rolling(window=rolling_window).mean().fillna(0)\ndf_country_copy","3a03028d":"#Plot with rolling average \ndf_country_copy['Date']=df_country_copy['Date'].dt.strftime('%Y-%m-%d')\nmax_y=max(df_country_copy['Number_Confirmed_Daily'])\nmax_y=int(math.ceil(max_y \/ 1000.0)) * 1000 + 1_000\ndf_country_copy.plot(x=\"Date\", y=['Number_Confirmed_Daily'], kind='bar', title=country + \" Coronavirus Trends - Cases\", fontsize=10, color='b')\nplt.plot(df_country_copy[\"Date\"], df_country_copy['Rolling_Confirmed'], color='b', label='Rolling_Average')\nplt.xticks(rotation=45, fontsize=8)\nplt.legend(loc='upper left', fontsize=12)\nsns.set_context('poster') \nplt.ylim([0, max_y])\nplt.xlim(left=+30) # Picks up x values (dates) 30 days from start\nplt.show()\nplt.clf()","672d3f1a":"# Plot deaths\ndf_country_copy.plot(x=\"Date\", y=['Number_Deaths_Daily'], \n                     kind='bar', title=country + \" Coronavirus Trends - Deaths\", fontsize=10, color='r')\nplt.plot(df_country_copy[\"Date\"], df_country_copy['Rolling_Deaths'], color='r', label='Rolling_Average')\nplt.xticks(rotation=45, fontsize=8)\nplt.xlim(left=+30)\nplt.legend(loc='upper left', fontsize=12)\nplt.show()\nplt.clf()","a6de4aaf":"# Review detail \ndf_country_copy","3eb05ff6":"df_n_cases=df_grouped_daily.copy()\ndf_n_cases=df_n_cases[['Country\/Region', 'Date', 'Number_Confirmed']]\ndf_n_cases.head()","567b5620":"case_threshhold=100\ndf_n_cases=df_n_cases.loc[df_n_cases['Number_Confirmed'] >= case_threshhold]\ndf_n_cases.reset_index(drop=True, inplace=True) \nprint(\"Case threshhold = \" + str(case_threshhold))\ndf_n_cases.head(10)","6cca90dd":"# Add cum count of days by country after hitting threshhold  \ndf_n_cases['Day']=df_n_cases.groupby(['Country\/Region']).cumcount()\ndf_n_cases.head(10)","0002ce5a":"# Remove cases designated as \"Cruise Ship\"\ndf_n_cases=df_n_cases.loc[df_n_cases['Country\/Region']!='Cruise Ship']","01d9c05f":"# Build dataframe with comparative countries \ncomp_countries=['Iran', 'Italy', 'Japan',\n       'Korea, South', 'Singapore', 'US', 'France', 'Spain', 'Germany', 'United Kingdom']\ndf_comps=df_n_cases.loc[df_n_cases['Country\/Region'].isin(comp_countries)]","6854c03f":"import math \nimport seaborn as sns\n\n\nmax_confirmed=max(df_comps['Number_Confirmed'])\nmax_confirmed=int(math.ceil(max_confirmed \/ 1000.0)) * 1000 + 100_000\nax=sns.lineplot(\n    data=df_comps, x='Day', y='Number_Confirmed', hue='Country\/Region'\n).set_title(\n    'Trend from Selected Countries After Hitting Confirmed Cases Threshold', fontsize=16)\nplt.xlabel('Days Since Hitting Threshold')\n# sns.set_context('poster')  \nplt.axis([0, 60, 100, max_confirmed])\nplt.legend(fontsize=12)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","1f32a471":"case_threshhold_mil=5\ndf_n_cases_mil=df_grouped_daily.copy()\ndf_n_cases_mil=df_n_cases_mil[['Country\/Region', 'Date', 'Confirmed_Per_Mil']]\ndf_n_cases_mil=df_n_cases_mil.loc[df_n_cases_mil['Confirmed_Per_Mil'] >= case_threshhold_mil]\ndf_n_cases_mil.reset_index(drop=True, inplace=True) \nprint(\"Case threshhold_mil = \" + str(case_threshhold_mil))\ndf_n_cases_mil.head(10)","1df071fe":"# Add cum count of days by country after hitting threshhold  \ndf_n_cases_mil['Day']=df_n_cases_mil.groupby(['Country\/Region']).cumcount()\ndf_n_cases_mil.head(10)","8ce8df81":"# Check\ndf_n_cases_mil.loc[df_n_cases_mil['Country\/Region']== 'United Kingdom']","6d2a843c":"# Build dataframe with comparative countries \ncomp_countries=['Japan',\n       'Korea, South', 'Singapore', 'US', 'France', 'Spain', 'Germany', 'United Kingdom', 'Italy', 'Sweden']\ndf_comps_mil=df_n_cases_mil.loc[df_n_cases_mil['Country\/Region'].isin(comp_countries)]","658c7de1":"marker = ['o', 'v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X']\nmarkers=[marker[i] for i in range(len(comp_countries))]\nplt.figure(figsize=(16, 12))\nax=sns.lineplot(\n    data=df_comps_mil, x='Day', y='Confirmed_Per_Mil', hue='Country\/Region', style='Country\/Region', markers=markers, dashes=False\n).set_title(\n    'Trend from Selected Countries After Hitting Confirmed Per Mil Cases Threshold', fontsize=16)\nplt.xlabel('Days Since Hitting Threshold')\nplt.axis([0, 100, 5, 6_000])\nplt.legend(fontsize=12)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","222421f3":"# Confirmed Per Million by Most Recent Day of Selected Countries \ndf_comps_mil.groupby(['Country\/Region']).tail(1).sort_values(by='Confirmed_Per_Mil', ascending=False)","15ee8864":"min_deaths=100\ndf_n_deaths_mil=df_grouped_daily.copy()\ndf_n_deaths_mil=df_n_deaths_mil[['Country\/Region', 'Date', '2018_Tot_Pop', 'Number_Deaths']]\ndf_n_deaths_mil.reset_index(drop=True, inplace=True) \ndf_n_deaths_mil=df_n_deaths_mil.loc[df_n_deaths_mil['Number_Deaths']>=min_deaths]\ndf_n_deaths_mil['Number_Deaths_Mil']=df_n_deaths_mil['Number_Deaths'] \/ ( df_n_deaths_mil['2018_Tot_Pop'] \/ 1_000_000) \ndf_n_deaths_mil=df_n_deaths_mil.groupby(['Country\/Region']).tail(1).sort_values(by='Number_Deaths_Mil', ascending=False).reset_index(drop=True)\ndf_n_deaths_mil\n","87fd8bc1":"fig = plt.figure(figsize=(12,14))\nplt.barh(df_n_deaths_mil['Country\/Region'], df_n_deaths_mil['Number_Deaths_Mil'])\n_ = plt.xticks(rotation=30, fontsize=10)\n_ = plt.yticks(fontsize=10)\n_ = plt.legend(fontsize=12, loc='center right')\n_ = plt.title('Deaths Per Million in Population (Min ' + str(min_deaths) + ' Deaths)')\n_ = plt.gca().invert_yaxis()\n_ = plt.show()","4fdae347":"# Look at data from last three days \nthree_days_ago=datetime.strftime(datetime.now() - timedelta(3), '%Y-%m-%d')\ndf_comps.loc[df_comps['Date']>=three_days_ago]","1d94258e":"target_country='United Kingdom'\ndf_comps.loc[df_comps['Country\/Region']==target_country]","1f3426b8":"# Add demographic context \ndf_comps=df_comps.merge(df_demographics, on='Country\/Region')\ndf_comps['Confirmed_Per_Mil']=df_comps['Number_Confirmed'] * 1_000_000 \/ df_comps['2018_Tot_Pop']\ndf_comps=df_comps[['Country\/Region', 'Date', 'Day', 'Number_Confirmed', 'Confirmed_Per_Mil', '2018_Tot_Pop',\n       '2018_Age_65_Percent', '2018_Pop_Density']]\ndf_comps.head()","214ef686":"# Compare countries by Number_Confirmed and days since passing threshhold\ndays_since=24\ndf_comps[df_comps['Day']==days_since].sort_values(by='Number_Confirmed', ascending=False)","26391383":"# Compare countries by Number_Confirmed PER MILLION and days since passing threshhold\ndf_comps[df_comps['Day']==days_since].sort_values(by='Confirmed_Per_Mil', ascending=False)","f0c504e4":"df_country_cases=prep_region_data(file_regions_cases, \"Number_Confirmed\")\ndf_country_deaths=prep_region_data(file_regions_deaths, \"Number_Deaths\")\ndf_country_combined=df_country_cases.merge(df_country_deaths,how='left', on=['Date', 'Country', 'Region'])\ndf_country_combined","213d41ec":"# Review any country \n# country_name='France'\n# df_country_cases=df_country_combined.loc[df_country_combined['Country']==country_name].copy()","e615f002":"# US-specific analysis \ncountry_name='United States'\ndf_country_cases=df_country_combined.loc[df_country_combined['Country']==country_name].copy()\ndf_US_states=df_country_cases\ndf_US_states","8c9cb34b":"# Check\ndf_US_states.loc[df_US_states['Region']=='New York']","3ae1cd77":"# Map all values containing \"Diamond Princess\"to just \"Diamond Princess\"\ndf_US_states['Region']=np.where(df_US_states['Region'].str.contains('Diamond Princess'), 'Diamond Princess', df_US_states['Region'])\ndf_US_states","7d6c9333":"# Extract state abbreviation from city\/state string \ndf_US_states['Region']=df_US_states['Region'].apply(lambda x: x.split(\", \")) # Note space after comma \ndf_US_states['Region']=df_US_states['Region'].apply(lambda x: x[-1])\ndf_US_states.tail(10)","a5d26dc7":"# Dictionary of state abreviations and names \nstates={\"AL\":\"Alabama\", \"AK\":\"Alaska\", \"AS\":\"American Samoa\", \"AZ\":\"Arizona\", \"AR\":\"Arkansas\", \"CA\":\"California\", \n        \"CO\":\"Colorado\", \"CT\":\"Connecticut\", \"DE\":\"Delaware\", \"DC\":\"District Of Columbia\", \n        \"FM\":\"Federated States Of Micronesia\", \"FL\":\"Florida\", \"GA\":\"Georgia\", \"GU\":\"Guam\", \"HI\":\"Hawaii\", \"ID\":\"Idaho\", \n        \"IL\":\"Illinois\", \"IN\":\"Indiana\", \"IA\":\"Iowa\", \"KS\":\"Kansas\", \"KY\":\"Kentucky\", \"LA\":\"Louisiana\", \"ME\":\"Maine\", \n        \"MH\":\"Marshall Islands\", \"MD\":\"Maryland\", \"MA\":\"Massachusetts\", \"MI\":\"Michigan\", \"MN\":\"Minnesota\", \n        \"MS\":\"Mississippi\", \"MO\":\"Missouri\", \"MT\":\"Montana\", \"NE\":\"Nebraska\", \"NV\":\"Nevada\", \"NH\":\"New Hampshire\",\n        \"NJ\":\"New Jersey\", \"NM\":\"New Mexico\", \"NY\":\"New York\", \"NC\":\"North Carolina\", \"ND\":\"North Dakota\", \n        \"MP\":\"Northern Mariana Islands\", \"OH\":\"Ohio\", \"OK\":\"Oklahoma\", \"OR\":\"Oregon\", \"PW\":\"Palau\", \"PA\":\"Pennsylvania\", \n        \"PR\":\"Puerto Rico\", \"RI\":\"Rhode Island\", \"SC\":\"South Carolina\", \"SD\":\"South Dakota\", \"TN\":\"Tennessee\",\n        \"TX\":\"Texas\", \"UT\":\"Utah\", \"VT\":\"Vermont\", \"VI\":\"Virgin Islands\", \"VA\":\"Virginia\", \"WA\":\"Washington\",\n        \"WV\":\"West Virginia\", \"WI\":\"Wisconsin\", \"WY\":\"Wyoming\"}","02ce8b93":"# Map the state abbrevs to state names \ndf_US_states['Region']=df_US_states['Region'].map(states).fillna(df_US_states['Region'])\ndf_US_states.head(10)","df97d388":"# See numbers by state for last date \ndf_US_states.loc[df_US_states['Date']==last_date].sort_values(by='Number_Confirmed', ascending=False)","9d60305e":"# Aggregate by state and date \ndf_US_states=df_US_states.groupby(['Date', 'Region']).agg('sum').reset_index()\ndf_US_states.loc[df_US_states['Date']==last_date].sort_values(by='Number_Confirmed', ascending=False)","44ca8f5d":"clean_states=['Wuhan Evacuee','D.C.', 'OR', ' OR', 'OR ','US', 'U.S.', 'Recovered', 'Grand Princesss Cruise Ship']\n# df_US_states.drop(df_US_states.loc[df_US_states['Region'].isin(clean_states)].index, axis=0, inplace=True)\ndf_US_states=df_US_states[~df_US_states['Region'].isin(clean_states)]\ndf_US_states","e1f2f711":"df_US_states.loc[df_US_states['Date']==last_date].sort_values(by='Number_Confirmed', ascending=False)","8fdc966e":"df_US_states['Region'].unique()","5ce2f895":"# Aggregate by state and date \ndf_US_states=df_US_states.groupby(['Date', 'Region']).agg('sum').reset_index()\ndf_US_states.tail(10)","6568acc6":"# Derive the daily numbers from the time series \ndf_US_states['Number_Confirmed_Daily'] = df_US_states.groupby(\n    'Region')['Number_Confirmed'].diff().fillna(\n        df_US_states['Number_Confirmed'])\ndf_US_states['Number_Deaths_Daily'] = df_US_states.groupby(\n    'Region')['Number_Deaths'].diff().fillna(\n        df_US_states['Number_Deaths'])\ndf_US_states","e79dd78a":"# Add rolling n day averages for new confirmed cases and new deaths \nroll_window=3\nrolling_confirmed=df_US_states.groupby(\n    'Region', as_index=False)['Number_Confirmed_Daily'].rolling(window=roll_window).mean()\nrolling_deaths=df_US_states.groupby(\n    'Region', as_index=False)['Number_Deaths_Daily'].rolling(window=roll_window).mean()\ndf_US_states['Rolling_Confirmed']=rolling_confirmed.reset_index(level=0, drop=True).fillna(0)\ndf_US_states['Rolling_Deaths']=rolling_deaths.reset_index(level=0, drop=True).fillna(0)\ndf_US_states","3d41c753":"# Check one state \ncheck_state='New York'\ndf_US_states.loc[df_US_states['Region']==check_state]","8bdc8f91":"# Produce plots for selected states, \ncomp_states=['New York', 'New Jersey', 'Connecticut', 'Washington','California', 'Massachusetts', 'Colorado', 'Louisiana', 'Florida',  \n            'Georgia', 'Illinois', 'Texas', 'Pennsylvania', 'Virginia']\n\nmax_y_states=max(df_US_states['Number_Confirmed_Daily'])\nmax_y_states=int(math.ceil(max_y_states \/ 1000.0)) * 1000 \n\n# for s in comp_states:\n#     target_state=s\n#     date_after='2020-02-26'\n#     df_US_states_copy=df_US_states.loc[(df_US_states['Region']==target_state) & (df_US_states['Date']>=date_after)].copy()\n#     df_US_states_copy['Date']=df_US_states_copy['Date'].dt.strftime('%Y-%m-%d')\n#     style.use('seaborn-poster')\n# #     style.use('ggplot')\n#     df_US_states_copy.plot(x=\"Date\", y=['Number_Confirmed_Daily'], kind='bar', \n#                             title= target_state + \" Coronavirus Trends - Daily\", fontsize=8, figsize=(10,6))\n#     plt.xticks(rotation=45)\n#     plt.ylim(0,max_y_states)\n#     plt.show\n    \n\nfor s in comp_states:\n    target_state=s\n    date_after='2020-02-26'\n    df_US_states_copy=df_US_states.loc[(df_US_states['Region']==target_state) & (df_US_states['Date']>=date_after)].copy()\n    df_US_states_copy['Date']=df_US_states_copy['Date'].dt.strftime('%Y-%m-%d')\n#     style.use('seaborn-poster')\n#     style.use('ggplot')\n\n    plt.bar(df_US_states_copy[\"Date\"], df_US_states_copy['Number_Confirmed_Daily'], label='Daily Confirmed Cases')\n    plt.plot(df_US_states_copy[\"Date\"], df_US_states_copy['Rolling_Confirmed'], color='b', label='Rolling_Average')\n    plt.title(target_state + \" Coronavirus Trends - Daily\", fontsize=16) #, fontsize=8, figsize=(10,6))\n    plt.legend(loc='upper left', fontsize=12)\n    plt.xticks(fontsize=8, rotation=80)\n    plt.yticks(fontsize=12)\n    plt.ylim(0,max_y_states)\n    plt.show()\n    plt.clf()\n","c31b08ae":"selected_states = [\n   'New York',  'New Jersey',\n    'Connecticut'\n]\nnon_selected_states = [  'California', 'Washington', \n    'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'Colorado', 'Delaware',\n    'District Of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho',\n    'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine',\n    'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\n    'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Mexico',\n    'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon',\n    'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota',\n    'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'West Virginia',\n    'Wisconsin', 'Wyoming'\n]","73c074cf":"df_US_states_selected=df_US_states.copy()\ndf_US_states_selected['Selected']=np.where(df_US_states_selected['Region'].isin(selected_states), \"Selected\", \"Other\")\ndf_US_states_selected=df_US_states_selected.groupby(['Date', 'Selected']).agg('sum').reset_index()\ndf_US_states_selected.head(20)","32cb24e9":"df_US_states_selected_copy=df_US_states_selected.copy()\ndate_after='2020-02-26'\n# Plot Selected States \ndf_US_selected_states=df_US_states_selected_copy.loc[(df_US_states_selected_copy['Selected']=='Selected') \n                                                      & (df_US_states_selected_copy['Date']>=date_after)].copy()\ndf_US_selected_states['Date']=df_US_selected_states['Date'].dt.strftime('%Y-%m-%d')\ndf_US_selected_states.plot(x=\"Date\", y=['Number_Confirmed_Daily'], kind='bar', \n                           title= \", \".join(selected_states) + \" -- Coronavirus Trends - Daily\", fontsize=8, figsize=(12,8))\n# style.use('seaborn-poster')\nstyle.use('ggplot')\nplt.xticks(rotation=80)\nplt.yticks(fontsize=12)\n# fig = plt.gcf()\n# fig.set_size_inches(10, 8)\n# plt.ylim(0,10_000)\nplt.legend(loc='upper left', fontsize=12)\nplt.show","d42355b2":"# Plot Non-Selected States\ndf_US_other_states = df_US_states_selected_copy.loc[\n    (df_US_states_selected_copy['Selected'] == 'Other')\n    & (df_US_states_selected_copy['Date'] >= date_after)].copy()\ndf_US_other_states['Date']=df_US_other_states['Date'].dt.strftime('%Y-%m-%d')\ndf_US_other_states.plot(x=\"Date\",\n                        y=['Number_Confirmed_Daily'],\n                        kind='bar',\n                        title=\"Other States -- Coronavirus Trends - Daily\",\n                        fontsize=8, figsize=(12,8))\n# style.use('seaborn-poster')\nstyle.use('ggplot')\nplt.xticks(rotation=80)\nplt.yticks(fontsize=12)\n# fig = plt.gcf()\n# fig.set_size_inches(10, 8)\n# plt.ylim(0, 10_000)\nplt.legend(loc='upper left', fontsize=14)\nplt.show","ad8f2dc5":"df_US_onset=pd.read_csv(file_cdc_onset, index_col = 0, parse_dates=True)\ndf_US_onset","54758fc9":"# Work in progress -- figuring metric of how onset of symptoms is trending -- e.g., percentage of cases with onset of symptoms on day 10 prior to report   \nfor col in list(df_US_onset.columns):\n    new_col=col + '_pct'\n    df_US_onset[new_col]=df_US_onset[col] \/ df_US_onset[col].sum()\n    new_new_col=new_col+ '_cumsum'\n    df_US_onset[new_new_col]=df_US_onset[new_col].cumsum() \n#     df_US_onset.drop(columns=[new_col], inplace=True)\ndf_US_onset['DayCount']=np.arange(len(df_US_onset)) +1  # adds counter of days starting with first report \ncols = list(df_US_onset.columns)\ncols = [cols[-1]] + cols[:-1] # makes day counter the first column \ndf_US_onset = df_US_onset[cols]\ndf_US_onset","5f50fffd":"# last_date_onset=last_date # Use on weekdays \nlast_date_onset='4\/13\/2020' # Use on weekends (revert to Friday data)\ncol_to_use=last_date_onset + '_pct_cumsum'\ndf_US_base=df_grouped_daily.loc[df_grouped_daily['Country\/Region']=='US'].copy()\ndf_US_onset_v_confirm=df_US_base.merge(df_US_onset, how='left', left_on='Date', right_on=df_US_onset.index)\ndf_US_onset_v_confirm = df_US_onset_v_confirm[['Date',last_date_onset, col_to_use, 'Number_Confirmed_Daily']]\ndf_US_onset_v_confirm.set_index('Date', inplace=True)\ndf_US_onset_v_confirm.fillna(0, inplace=True)\ndf_US_onset_v_confirm","b0926d64":"df_US_onset_v_confirm_last_28=df_US_onset_v_confirm[-28:]\n\nsns.set_style(\"white\")\n#Plot graph with 2 y axes\nfig, ax1= plt.subplots()\nplt.xticks(fontsize=10)\n\nplt.figure(figsize=(14,8)) \n\n#Set up ax2 to be the second y axis with x shared\nax2 = ax1.twinx()\nax1.bar(df_US_onset_v_confirm_last_28.index, df_US_onset_v_confirm_last_28['Number_Confirmed_Daily'], color='r',linewidth=0, width=-0.4, align='edge')\nfig.suptitle(\"US - Onset of Symptoms vs Confirmed Cases Daily\", fontsize=16)\n\n\n# place a text box in upper left in axes coords\nnote='''Different scale for onset of symptoms data, as it is a sample set. \nSome illnesses that began <=10 days ago may not have yet been reported -- \nthe gray bars will trend somewhat higher.'''\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"b\", lw=2)\nax1.text(0.2, 1.1, note , transform=ax1.transAxes, fontsize=10, verticalalignment='top', bbox=bbox_props)\nax2.bar(df_US_onset_v_confirm_last_28.index, df_US_onset_v_confirm_last_28[last_date_onset], color='0.5',  width=0.40, align='edge', linewidth=0)\n\n\nax1.set_ylabel('Number Cases Confirmed Daily (red bars)')\nax2.set_ylabel('Onset of Symptoms (gray bars)')\n# style.use('ggplot')\n# style.use('seaborn-poster')\n# sns.set_context('poster') \nfig.autofmt_xdate()\nax1.tick_params(axis='both', which='major', labelsize=10)\nax2.tick_params(axis='both', which='major', labelsize=10)\nplt.show()","855fd323":"cols_to_use2=[c for c in df_US_onset.columns if c.endswith('pct')]\ncols_to_use2","4d6aa696":"sns.set_style(\"white\")\ndf_US_onset.tail(24).plot(y=cols_to_use2, kind='bar', \n                           title= \"Rolling Date of Symptom Onset -- Pct of Cases\", fontsize=8, figsize=(12,8), width=0.6)\nstyle.use('ggplot')\nplt.xticks(rotation=45)\nplt.legend(prop={'size': 10})\n# plt.ylim(0, 1.0)\nplt.show","2a6cb2c6":"cols_to_use3=list(df_US_onset.columns)[1:19]\ncols_to_use3","bb808ef3":"sns.set_style(\"white\")\ndf_US_onset.tail(24).plot(y=cols_to_use3, kind='bar', \n                           title= \"Rolling Date of Symptom Onset -- Number of Cases by Report Date\", fontsize=8, figsize=(12,8), width=0.6)\nstyle.use('ggplot')\nplt.xticks(rotation=45)\nplt.legend(prop={'size': 10})\n# plt.ylim(0, 1.0)\nplt.show","54448702":"# Use only last n days \n\nnum_days=24\ndf_US_onset_excerpt=df_US_onset.iloc[-num_days:, :].fillna(0)\ndf_US_onset_excerpt.index=df_US_onset_excerpt.index.strftime('%Y-%m-%d')\nsaved_values=df_US_onset_excerpt['3\/24\/2020']\ndf_US_onset_excerpt=df_US_onset_excerpt[cols_to_use3].astype(float)\ndf_US_onset_excerpt=df_US_onset_excerpt.diff(axis=1)\ndf_US_onset_excerpt['3\/24\/2020']=saved_values\n\nfig, ax = plt.subplots(figsize=(14,10))\nreport_dates=cols_to_use3\nmargin_bottom = np.zeros(num_days)    \n# sns.set_palette(\"bright\")\npalette = sns.color_palette(palette='BuGn_d', n_colors=len(report_dates)+3) # Blues_d  BuPu_d  'Greens_d'\n\nfor num, report_date in enumerate(report_dates):\n    values = list(df_US_onset_excerpt[report_date].values)\n    df_US_onset_excerpt[report_date].plot.bar(ax=ax, bottom = margin_bottom,  color=palette[num], label=report_date) #  stacked=True\n    margin_bottom += values\n    plt.plot(margin_bottom, color=palette[2], linewidth=1.4)\n\nplt.xticks(rotation=80, fontsize=10)\nplt.xlabel('Date of Symptom Onset', fontsize=16)\nplt.ylabel('Number of Cases (Onset Reported)', fontsize=16)\nplt.yticks(fontsize=14)\nplt.legend(fontsize=12)\nplt.title( \"Rolling Date of Symptom Onset -- Number of Cases by Report Date (Source: CDC)\", fontsize=16)\nboxtext= '''Illnesses that began \nin last ~10 days (>= 4\/5)\nmay not be reported >>>>'''\nbbox_props = dict(boxstyle=\"square,pad=0.5\", fc=\"w\", ec=\"b\", lw=1)\nplt.text(0.6, 0.95, boxtext,  transform=ax1.transAxes, fontsize=10, verticalalignment='top', bbox=bbox_props)\nplt.show() ","89869ddf":"df_US_onset_excerpt","f1fc4078":"# US testing totals by date\n\n# df_US_daily=pd.read_csv('https:\/\/covidtracking.com\/api\/us\/daily.csv') # Not working\nresponse = requests.get('https:\/\/covidtracking.com\/api\/us\/daily.csv')\nfile_object = io.StringIO(response.content.decode('utf-8'))\ndf_US_daily = pd.read_csv(file_object) #index_col=['date']\ndf_US_daily['dateTime'] = df_US_daily['date'].apply(lambda x: pd.to_datetime(str(x), format='%Y%m%d'))\ndf_US_daily.set_index('dateTime', inplace=True)\ndf_US_daily=df_US_daily.reindex(index=df_US_daily.index[::-1])\ndf_US_daily.rename(columns={'posNeg': 'posAndneg', 'total': 'totalTests', \n                            'death': 'deaths', 'states': 'numStates'}, inplace=True)\ndf_US_daily['testPositiveRate']= df_US_daily['positive'] \/ df_US_daily['posAndneg'] * 100\ndf_US_daily['fatalityRate']=df_US_daily['deaths'] \/ df_US_daily['positive'] * 100\ndf_US_daily['pendingPercent']=df_US_daily['pending']  \/ (df_US_daily['positive'] + df_US_daily['negative'])\ndf_US_daily=df_US_daily[['positive', 'negative', 'posAndneg', 'testPositiveRate', 'pending', 'pendingPercent',\n    'totalTests', 'deaths', 'fatalityRate', 'numStates']]\ndf_US_daily","23d0a9f5":"df_US_daily.tail()","23550ba2":"cumval=0\nfig = plt.figure(figsize=(14,10))\ncols_to_use=['positive', 'negative', 'pending']\nfor col in cols_to_use:\n    plt.bar(df_US_daily.index, df_US_daily[col], bottom=cumval, label=col)\n    cumval = cumval+df_US_daily[col]\n_ = plt.xticks(rotation=30, fontsize=10)\n_ = plt.yticks(fontsize=10)\n_ = plt.legend(fontsize=12)\n_ = plt.title('Cumulative Testing by Date - US')\n_ = plt.show()","dbb422e0":"df_daily_deaths= pd.DataFrame(df_US_daily[['deaths', 'fatalityRate']])\ndf_daily_deaths=df_daily_deaths.loc[df_daily_deaths.index > '2020-03-11']\ndf_daily_deaths","89a8cfbc":"sns.set_style(\"white\")\n\n#Plot graph with 2 y axes\nfig, ax1= plt.subplots()\n# Plot the bars \nax1.bar(df_daily_deaths.index, df_daily_deaths['deaths'], color='b') # \nax1.set_ylabel('Daily Deaths (blue bars)')\nplt.xticks(rotation=45, fontsize=8)\nplt.title(\"Fatality Rate vs Daily Deaths\")\n#Set up ax2 to be the second y axis with x shared\nax2 = ax1.twinx()\n#Plot the line\nax2.plot(df_daily_deaths.index, df_daily_deaths['fatalityRate']) # df_daily_deaths.index,\nax2.set_ylabel('Fatality Rate (red line)')\n# sns.set_context('poster')\nplt.show()\n","83de3fee":"# States sorted by total tests \nresponse = requests.get('https:\/\/covidtracking.com\/api\/states.csv')\nfile_object = io.StringIO(response.content.decode('utf-8'))\ndf_states_current = pd.read_csv(file_object) # index_col=['index']\ndf_states_current['testPositiveRate']= df_states_current['positive'] \/ (df_states_current['positive'] + df_states_current['negative']) * 100\ndf_states_current['fatalityRate']=df_states_current['death'] \/ df_states_current['positive'] * 100\ndf_states_current=df_states_current[['state','total', 'positive', 'negative','pending',  \n                                     'testPositiveRate', 'death', 'fatalityRate', 'lastUpdateEt']]\ndf_states_current.rename(columns={'total': 'totalTests', 'death': 'deaths'}, inplace=True)\ndf_states_current=df_states_current.sort_values(by=['totalTests'], ascending=False).reset_index(drop=True)\ndf_states_current=df_states_current.sort_values('totalTests', ascending=False)\ndf_states_current=df_states_current.loc[df_states_current['state'].notna()]\ndf_states_current","4a365262":"# Estimate of new tests on currrent day\nyesterday_total_tests=df_US_daily.iloc[-1,6] # first row, third column\ncurrent_total_tests=df_states_current['totalTests'].sum() # sum of states' tests as of latest info \nprint(\"Cumulative tests as of yesterday = \", yesterday_total_tests)\nprint(\"Total tests as of now = \", current_total_tests)","f247993a":"df_US_daily","40d67bba":"# # US fatality rate excluding Washington, which include a large number of fatalities early on tied to one nuring home \n# df_US_ex_wash=df_states_current.loc[df_states_current['state']!= 'WA']\n# fatality_rate_ex_wash=df_US_ex_wash['deaths'].sum() \/ df_US_ex_wash['positive'].sum() * 100\n# print('The US fatality rate excluding Washington (in this dataset) is: ', round(fatality_rate_ex_wash, 2))","05beeb17":"# Testing by state -- graph \ncumval=0\nfig = plt.figure(figsize=(12,14))\ncols_to_use=['positive', 'negative', 'pending']\nfor col in cols_to_use:\n    plt.barh(df_states_current.state, df_states_current[col], left=cumval,label=col)\n    cumval = cumval+df_states_current[col]\n_ = plt.xticks(rotation=30, fontsize=10)\n_ = plt.yticks(fontsize=10)\n_ = plt.legend(fontsize=12, loc='center right')\n_ = plt.title('Testing by State - Latest Numbers')\n_ = plt.gca().invert_yaxis()\n_ = plt.show()","2b33e772":"# Detail by state\ndf_states_current.set_index('state', inplace=True)\ndf_states_current","05998b3b":"### New York City -- Work in Progress","a913eef5":"df_nyc=pd.read_csv('https:\/\/raw.githubusercontent.com\/nychealth\/coronavirus-data\/master\/tests-by-zcta.csv', index_col = 0)\ndf_nyc","4c1da04d":"df_nyc.drop(df_nyc.index[0], inplace=True) # Drop the unsassigned zip code row \ndf_nyc.columns=['Positive', 'Total', 'Perc_Pos'] # Rename columns\ndf_nyc.index=df_nyc.index.astype(int) # Change index to int type \ndf_nyc.index.name=None # Delete index name \ndf_nyc","7253bbd5":"df_nyc.index=df_nyc.index.astype(int)","3c190f08":"df_nyc","14510338":"###################  End ","295a0f78":"df_tot_pop=pd.read_csv(file_world_bank_pop, usecols=['Country Name', '2018'])\ndf_tot_pop.rename(columns={'Country Name': 'Country\/Region','2018': '2018_Tot_Pop'}, inplace=True)\ndf_tot_pop.dropna(axis=0, inplace=True)\ndf_tot_pop['2018_Tot_Pop']=df_tot_pop['2018_Tot_Pop'].astype(int)\ndf_tot_pop","f7256b34":"df_over_65=pd.read_csv(file_world_bank_age65, usecols=['Country Name', '2018'])\ndf_over_65.rename(columns={'Country Name': 'Country\/Region','2018': '2018_Age_65_Percent'}, inplace=True)\ndf_over_65.dropna(axis=0, inplace=True)\ndf_over_65","7a3b543c":"df_pop_density=pd.read_csv(file_pop_density, usecols=['Country Name', '2018'])\ndf_pop_density.rename(columns={'Country Name': 'Country\/Region','2018': '2018_Pop_Density'}, inplace=True)\ndf_pop_density.dropna(axis=0, inplace=True)\ndf_pop_density","432247d1":"df_demographics=df_tot_pop.merge(df_over_65, how='left', on=['Country\/Region'])\ndf_demographics=df_demographics.merge(df_pop_density, how='left', on=['Country\/Region'])\ndf_demographics","2d5ab56e":"# Rationalize country names between the Johns Hopkins and World Bank data \ncorona_countries=list(df_master['Country\/Region'].unique())\ndemo_countries=list(df_demographics['Country\/Region'].unique())\nmissing = [item for item in corona_countries if item not in demo_countries]\nmissing","4716c353":"country_map={'Egypt, Arab Rep.': 'Egypt',\n    'Slovak Republic': 'Slovakia',\n    'Brunei Darussalam': 'Brunei',\n    'United States': 'US',\n    'Iran, Islamic Rep.': 'Iran',\n    'Korea, Rep.': 'Korea, South',\n    'Russian Federation': 'Russia',\n    'Congo, Dem. Rep.': 'Congo (Kinshasa)',\n    'Venezuela, RB': 'Venezuela',\n    'St. Lucia': 'Saint Lucia',\n    'St. Vincent and the Grenadines': 'Saint Vincent and the Grenadines',\n    'Congo, Rep.': 'Congo (Brazzaville)', \n    'Czech Republic':'Czechia'}\ndf_demographics['Country\/Region']=df_demographics['Country\/Region'].map(country_map).fillna(df_demographics['Country\/Region'])\ndf_demographics","64410694":"demo_countries_rev=list(df_demographics['Country\/Region'].unique())\nmissing_still = [item for item in corona_countries if item not in demo_countries_rev]\nmissing_still","4f49b311":"# For reference, filling blanks \nmed_pop=df_demographics['2018_Tot_Pop'].median()\nmed_age_65=df_demographics['2018_Age_65_Percent'].median()\nmed_density=df_demographics['2018_Pop_Density'].median()\nprint(\"Median population per country (mil): \", str(round(med_pop \/ 1_000_000, 2)))\nprint(\"Median percentage of population age 65+: \", str(round(med_age_65, 2)))\nprint(\"Median people\/km: \", str(round(med_density, 2)))","5aafa4ac":"df_demographics.describe()","d1238fff":"# Save demographics dataframe \n# df_demographics.to_pickle('df_demographics.pkl')","dffbc83f":"<a id=\"section-three\"><\/a>\n# Global Summary ","149aba20":"<a id=\"section-six\"><\/a>\n# Appendix: Demographic Data","9cb79e0c":"<a id=\"section-five\"><\/a>\n# Extended US Data and Analysis ","5e93a450":"Compare Selected States to Other States","8f064be5":"#### Global Coronavirus Trends - Cumulative and Daily[](http:\/\/)","113f2e10":"Deaths Per Million in Population","846a3cb6":"<a id=\"section-four\"><\/a>\n# Country Data ","94ee080c":"# Introduction   \n**Johns Hopkins University is playing a central role in collecting data globally on the coronavirus pandemic and sharing the information publicly (see screenshot of [web tool](https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6) below). Johns Hopkins has also made the underlying data available on a [github repository](https:\/\/github.com\/CSSEGISandData\/COVID-19). This notebook provides additional analysis of the Johns Hopkins' data and related data sources.**\n\n* [Making Sense of Ambiguous Data](#section-intro)\n* [Subways, Social Networks and the Coronavirus](#section-intro2)\n* [Imports and Key Functions](#section-one)\n* [Load Data and Initial Prep](#section-two)\n* [Global Summary](#section-three)\n* [Country Data and Comparisons](#section-four)\n* [Extended US Data and Analysis](#section-five)\n* [Appendix: Demographic Data](#section-six)\n\nNOTE: Due to delays in reporting, some recent data may be missing\/incomplete. ","58c3c14a":"### Cases Per Million in Population","63c7bee3":"Functions and key variables ","c012d062":"### Country-Specific Analyses","6aebb9f0":"Aggregate data by date and country\/region","b58259b3":"<a id=\"section-intro\"><\/a>\n### Coronavirus: Making Sense of Ambiguous Data \n\n\nNew data on the coronavirus pandemic is made public virtually every minute, with each data point scrutinized for meaning.  But current data on the coronavirus must be viewed carefully and skeptically -- directionally at best.     \n\nFor example, two metrics receiving widespread attention are new daily confirmed cases and fatality rates. A key problem affecting both measures is that they rely on testing.  But testing is highly variable.  It is subject to local testing capacity, and most testing does not capture asymptomatic patients. As a result, some estimates put the number of actual coronavirus cases at five or even 10 times the confirmed rate.  In turn, this must be factored into fatality rates, as confirmed cases is the denominator of the fatality rate calculation (with number of deaths as numerator).  If we assume that the real number of confirmed cases is five times the current number, then an estimated fatality rate of 3.0% suddenly drops to 0.6%; a rate of 1.0% becomes 0.2%, very close to the seasonal flu.\n\nAs a result, number of deaths may be a more reliable indicator, as deaths are far more likely to be recorded. But some countries assign every death where coronavirus is present as a coronavirus death, while others record another factor (e.g., diabetes) as the primary cause, with coronavirus as a comorbidity.  Moreover, from a predictive standpoint,  deaths are a lagging indicator of the virus' spread, as the average time between onset of symptoms and death is about three weeks. The number of deaths is also greatly influenced by the efficacy of treatments and care, which can vary widely. \n\nHospitalizations might be a good intermediate indicator between confirmed cases and deaths, but data on hospitalizations is not widely and consistently available.   \n\nLastly, there is date of symptom onset, which is sometimes available for at least a sample of cases.  In China's Hubei province, date of symptom onset clearly foreshadowed peak confirmed cases (more below).        \n\nWith the above in mind, the key questions come down to: (1) what are the actual de-noised trends -- especially around whether infection rates will grow exponentially and for how long; (2) what effect do containment tactics -- social distancing, testing and isolation, lockdowns, masks, etc. -- and other factors (e.g., demographics, climate) have on the numbers; and (3) what is the impact of emerging treatments on the death rate. Together, this mix of number-driven questions will determine the best courses of action going forward. \n\n- From Hubei (province in China where virus originated): Confirmed cases peaked about 12 days after lockdown; mapping of reported onset of symptoms to testing and confirmation shows a gap of about 10 days between peak onset of symptoms and peak confirmed; peak onset started about two days after lockdown (and stayed at peak for a few days); peak deaths trailed peak confirmed by about a week; confirmed daily cases dwindled about two weeks after peak confirmed.   \n- Hong Kong, Singapore, Japan and South Korea (all Asian countries) have successfully limited\/slowed the spread; past experience containing SARs\/MERs may be a factor, as well as strong social norms, contact tracing, broad testing (esp. South Korea) and case isolation.  \n- Testing issues are likely introducing significant anomalies in the data. For example: the US was slow to test, due to test design and production issues and reluctance by government officials to use some tests due to concerns about accuracy;  this is likely causing a more exponential curve in the US -- fewer cases caught earlier, with limited testing, more cases caught later, with improved testing; but limited testing clearly impacted the ability to isolate more cases; Chinese researchers [have found](https:\/\/pubmed.ncbi.nlm.nih.gov\/32133832\/?fbclid=IwAR3LHLplRtmPZED3jt_Hjf2ZKysmDcXMU5LgVgNPcqNAtb9EzcQBKMtCIoI) false-positive rates 50% or more of asympotatic close contacts of coronavirus patients; but the trade-off between false-positives vs. limited testing are unclear -- might be better to generate many false positives than limited testing (and thus sub-optimal) case isolation; overall, [\"... no countries have reliable data on the prevalence of the virus in a representative random sample of the general population.\"](https:\/\/www.statnews.com\/2020\/03\/17\/a-fiasco-in-the-making-as-the-coronavirus-pandemic-takes-hold-we-are-making-decisions-without-reliable-data\/); this inability to capture asymptomatic cases might be skewing the data heavily, understating infection rates and overstating death rates.    \n- That said, [the Diamond Princess cruise ship may provide some clues](https:\/\/wattsupwiththat.com\/2020\/03\/16\/diamond-princess-mysteries\/) about the overall population, as it represents something of a controlled trial with a relatively large sample: 83% of passengers did not get the virus (despite confined quarters over several weeks), relatively consistent across age groups; 49% of passengers with the virus showed no symptoms; the very young and the old were most likely to show no symptoms, with those in their 20s, 30s and 40s most likely to show symptoms; adjusting for age (a cruise ship's passengers skew toward the older), the death rate is estimated by one observer at 1.2% and much lower (more in the 0.5% range) by others, less than the 3% first assumed for coronavirus overall.  The coronavirus death rate appears likely higher than the 0.1% estimate for seasonal influenza, but for a variety of reasons (e.g., fact that the influenza rate is based on estimated -- not confirmed -- cases), the influenza rate and the coronavirus rate might not be as far apart as first thought.  \n- The US Center for Disease Control (CDC) estimates that 12% of coronavirus cases require hospitalization; by contrast, this year's flu season will result in about 370,000 hospitalizations out of 30-50 million cases in the US.\n- The time from symptom onset to death ranges from 2 to 8 weeks, according to an [analysis](https:\/\/www.who.int\/docs\/default-source\/coronaviruse\/who-china-joint-mission-on-covid-19-final-report.pdf) by the World Health Organization (WHO). \n- Digging into South Korea's success, [this article](http:\/\/(https:\/\/medium.com\/@stevejang\/flattening-the-curve-the-south-korean-approach-to-covid-19-49cb55d1e782)) reports that, according to a South Korean officials, 81% of outbreaks were tied to viral clusters, which included: office workplaces, churches, internet cafes, medical and long-term care facilities, schools, travel groups and fitness centers. \n- Climate may also play a role. Several studies ([from MIT](https:\/\/papers.ssrn.com\/sol3\/papers.cfm?abstract_id=3556998), [from Spain and Finland](https:\/\/www.medrxiv.org\/content\/10.1101\/2020.03.12.20034728v1), and [from China](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/2003\/2003.05003.pdf)) appear to show that the virus is hindered by warmer temperatures -- above the 50 or 60 degree mark -- similar to seasonal flu.  \n- [A prominent Israeli researcher](https:\/\/www.haaretz.com\/israel-news\/.premium.MAGAZINE-israeli-expert-trump-is-right-about-covid-19-who-is-wrong-1.8691031) takes issue with the current portrayal of how exponential growth works for diseases: \"We do not move about in space like particles,\u201d says Dan Yamin, of Tel Aviv University\u2019s industrial engineering department. \u201cTry to remember what you did yesterday. Even without all the social distancing measures, you probably would have met the same people you met today. We move across networks of social contact. So, from a certain stage, it will be difficult to infect even those who bear a potential for becoming infected, because the carriers don\u2019t wander around looking for new people to infect.\u201d In other words,after an initial flash of contagion to close contacts, most clusters flame out due to a dearth of new close contacts to infect. He also notes, as others do, that fatality rates are overstated due to the fact that testing is focused on more severe cases: \u201cThe actual number of people who are sick with the virus in South Korea is at least double what\u2019s being reported, so the chance of dying is at least twice as low, standing at about 0.45 percent \u2013 very far from the World Health Organization\u2019s [global mortality] figure of 3.4 percent. And that\u2019s already a reason for cautious optimism.\u201d\n- [Research](https:\/\/www.medrxiv.org\/content\/10.1101\/2020.02.16.20023820v2) by US academics based on \"math graph theory\" comes to a similar conclusion. Graph theory analyzes social networks (e.g., Twitter), looking at people as nodes and mapping all their connections to each other. Unlike some social networks, where any person or node can easily interact with another (\"random networks\"), human networks resemble so-called small world networks, where people generally have a limited number of people with whom they have frequent interactions -- they behave more like cliques.  With human networks, infection grows exponentially at first, but then settles to a less-than-exponential growth rate as the strength of connections between people diminish -- and then runs out of people in the clique to infect. [\"Exponential growth is not maintained because 'the number of susceptible individuals around an infected individual decays with time.'\"](https:\/\/www.zdnet.com\/article\/graph-theory-suggests-covid-19-might-be-a-small-world-after-all\/)\n- One widely circulated -- but also widely challenged -- [article](https:\/\/www.zerohedge.com\/health\/covid-19-evidence-over-hysteria) argued that worries over the coronavirus are significantly overblown. One of the article's points is relatively straightforward: the widely followed Johns Hopkins visualization (screenshot above) presents cumulative cases with ominous-looking red bubbles on a map, stoking fear; but more than half of the data accounted for in the red bubbles represent inactive cases, and they fail to capture other context, such as cases per capita and case severity. For example (as of March 20), the US and German each had just under 20K cases, but the US numbers represented 59 cases per million in US population, compared with 237 per million for Germany, or about one-quarter the rate on a per capita basis.  \n- Notwithstanding the chance for more optimistic outcomes, many argue that we need to take very aggressive and costly actions to counter the virus in the face of a highly improbable yet potentially ruinous \"Black Swan\"-like event.  Made famous by Nassim Nicholas Taleb, Black Swans are characterized by low, uncertain probability but huge negative potential outcomes (\"fat tails\").  [Black Swan theorists mandate quick action](https:\/\/twitter.com\/nntaleb\/status\/1239933769982840832\/photo\/1) against such threats -- the earlier, the better -- as costs to counter Black Swans also grow exponentially with time.  In essence, the actions are insurance against an unlikely but possible catastrophe. The cost of insurance skyrockets with time as we move along the path to a possible Black Swan event. \n- As the pandemic progresses and more data become available, there is more focus on comparing the efficacy of wholesale lockdowns versus more targeted and less sweeping interventions (e.g., wearing masks in public).  [This article](https:\/\/medium.com\/@yinonweiss\/lets-visualize-state-by-state-shutdown-effectiveness-on-covid-19-e13a5cdb50ad) finds little to no correlation between how quickly a state went on lockdown and subsequent deaths.     \n\nIn the end, it is not a contradiction to expect the virus to play out largely along small world network dynamics, while taking immediate, aggressive steps to hedge against a Black Swan-like event. As the data become more clear, tactics can be adjusted accordingly.   \n  \n  \n \nSuggested reading\/visualizations:   \n- https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6 -- Johns Hopkins visualization   \n- https:\/\/www.healthmap.org\/covid-19\/ -- visualization       \n- https:\/\/www.worldometers.info\/coronavirus\/ -- visualization  \n- https:\/\/ourworldindata.org\/coronavirus -- analysis\/visualization  \n- https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/cases-updates\/cases-in-us.html -- US CDC data\/visualization \n- https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca -- broad and thorough analysis of data; see \"Timeline of Events in Hubei\" chart below (Hubei is a province in China; its capital city is Wuhan, where the first case of coronavirus was identified)    \n- https:\/\/wattsupwiththat.com\/2020\/03\/16\/diamond-princess-mysteries\/ -- analysis of cruise ship data       \n- https:\/\/www.calcalistech.com\/ctech\/articles\/0,7340,L-3800632,00.html  -- \"Corona Is Slowing Down, Humanity Will Survive, Says Biophysicist Michael Levitt\"   \n- https:\/\/www.statnews.com\/2020\/03\/17\/a-fiasco-in-the-making-as-the-coronavirus-pandemic-takes-hold-we-are-making-decisions-without-reliable-data\/    \n- https:\/\/medium.com\/@stevejang\/flattening-the-curve-the-south-korean-approach-to-covid-19-49cb55d1e782 -- Deep analysis of South Korea's success\n- https:\/\/www.zdnet.com\/article\/graph-theory-suggests-covid-19-might-be-a-small-world-after-all\/ -- small world networks (this and next two links) \n- https:\/\/news.umich.edu\/containment-efforts-appear-to-step-covid-19-spread-down-from-exponential-norm\/ \n- https:\/\/www.medrxiv.org\/content\/10.1101\/2020.02.16.20023820v2.full.pdf -- detailed scientific report on small world networks \n- https:\/\/www.nicholaslewis.org\/why-herd-immunity-to-covid-19-is-reached-much-earlier-than-thought\/, https:\/\/arxiv.org\/abs\/2005.03085 and https:\/\/www.medrxiv.org\/content\/10.1101\/2020.04.27.20081893v1.full.pdf -- three papers that argue that traditional estimates of the percent of the population needed to be infected to develop herd immunity (60-70 percent) are overstated, as there is wide variability within populations in terms of susceptibility to the disease and propensity to spread it. \n","bee3e5c7":"<a id=\"section-intro2\"><\/a>\nPublished on *Medium *\n\n### Subways, Social Networks and the Coronavirus\nRobert McKee\nApr 19 \u00b7 4 min read\n\n\n\n*Updated: May 11, 2020*  \n  \nMuch has been made of the mathematical model from the University of Washington\u2019s Institute for Health Metrics and Evaluation (IHME) that originally predicted as many as 2.2 million U.S. deaths from the coronavirus. IHME has revised that number downward to about 60 thousand deaths, but the Washington Post still has called it \u201cAmerica\u2019s most influential coronavirus model.\u201d\n\nFierce debate surrounds the model\u2019s inputs and predictions, but what if its underlying premise is incorrect?\n\nThe gist of the argument is this: the IHME and other traditional models assume what French mathematician David Madore calls \u201cperfect mixing: any individual is equally likely to infect any other individual.\u201d But does this reflect reality?\n\nAnother school of thought \u2014 given far less media and public policy attention \u2014 borrows from research into social networks on the web. These networks are called \u201cgraphs\u201d and are visualized as \u201cnodes\u201d or \u201cvertices\u201d connected by lines. The visualizations often show people and their connections (e.g., their Facebook friends).\n\nUsing the lens of a social network, traditional epidemic models assume that any individual can infect any other individual. Simplified, the models\u2019 social network looks something like this:\n\n![](https:\/\/cdn-images-1.medium.com\/max\/750\/1*v7WFs2HWyau6Ot3Eywg-gA.png)\n\n\nHowever, networks do not need to be completely connected. There is another network model called \u201csmall world networks.\u201d Here, people organize into various clusters or cliques (e.g., family, friends, colleagues). This is how such a small world network might look:\n\n![](https:\/\/cdn-images-1.medium.com\/max\/750\/1*xKhrTwVd_LA3KXu7R6uu9A.png)\n\nThe example above shows connections between real people for the purpose of tracking an outbreak of sexually transmitted diseases. The key point is that in real life people tend to cluster together, with some \u201cnodes\u201d or people connecting the various groups. People with a lot of inter-group connections can be viewed as super influencers \u2014 or super spreaders. When companies want to reach the most people with a marketing message, they target these super influencers. The messages then cascade across the network \u201cvirally.\u201d\n\nA research report from the University of Michigan argues that such small world networks apply to the coronavirus. Accordingly, the virus spreads mainly through cliques. At first, the virus spreads exponentially, but this levels off and then drops sharply as the supply of nearby uninfected targets (people or nodes) is exhausted.\nWhich brings us to subways.\n\nHere is a striking slide from the White House\u2019s April 18 update on the coronavirus, showing cumulative coronavirus cases in the U.S.\u2019s top 25 metro areas:\n\n![image.png](attachment:image.png)\n\n\nClearly, something different is going on in the New York City metro area. And the answer might be the subways, according to researchers at MIT, who argue: \u201cNew York City\u2019s multitentacled subway system was a major disseminator \u2014 if not the principal transmission vehicle \u2014 of coronavirus infection during the initial takeoff of the massive epidemic that became evident throughout the city during March 2020.\u201d\n\nIn a series of tweets, political commentator Buck Sexton summarized the MIT findings this way:\n\u201cNew Yorkers have thought all along that the subway was the covid-19 super spread[.] But with the panic driven lockdown, authorities took a virus that had already spread widely and forced people into more crowded subway cars and buses with limited service. This made it worse\u2026.\n\u201cSo once the subway lines had already help spread this disease to 10,000s of NYC residents, the city authorities told everyone to lockdown at home[.] Queens and Brooklyn have a huge number of multigenerational families living under one roof[.] Such [i]ntra-familial spread can be lethal.\u201d\n\nAnd so this is the alternative to \u201cperfect mixing\u201d: The spread is largely through clusters of families, friends and colleagues \u2014 small world networks \u2014 with the subway connecting otherwise disparate nodes. The subway itself acts as a super spreader.\n\nViewing the virus through the lens of a small world network also impacts thinking about herd immunity, or how much of the population has to have had the disease and developed immunity to curtail further spreading. Traditional models peg that number at 60 or 70 percent. But, again, traditional models treat all people (or nodes) as equals \u2014 they are equally likely to catch or spread the disease. But a number of new papers (here, here and here) argue that if enough super spreaders develop immunity, then the 60 or 70 percent level can drop into the 20 percent or so range. Meaning only 20 percent of the population (if made up mostly of super spreaders) needs to have developed immunity to check the growth of the disease.\n\nFinal note: some have argued that the traditional models did their job of communicating danger and prompting action. But like the models\u2019 underlying premise of random mixing, policy interventions have been broad and sweeping. The small world model suggests more targeted actions aimed at specific clusters (e.g., nursing homes) and key nodes (super spreaders).","3c66b941":"US Testing Stats  \nAs described earlier, the US was slow to implement coronavirus testing, but the numbers ramped up recently, likely reflecting a combination of increased test availability, faster turnaround and shrinking backlog.  A website sponsored by the COVID Tracking Project makes daily data available on testing. Below are key tables.    \n  \nNOTE: This is a different dataset than the core Johns Hopkins data; also, numbers appear to not capture centrally tested cases by the US CDC. ","c3124611":"See the Appendix for process for importing and prepping data from the World Bank on country populations, percentage of elderly for each country and population density (people\/km). Here, the already-prepped dataframe is loaded and the demographic information is appended to the master file.","846e582d":"View Last n Days","c2317099":"### Country Results for Last N Days ","a8b81dda":"Derive daily numbers from the cumulative sums","afb2404c":"![image.png](attachment:image.png)","0062edd8":"### Country Numbers (Cumulative) for Last Date ","5e1bdb30":"Read in the Data Files and Combine Into Master Dataframe","fde38926":"Key Chart on Timeline of Events in Hubei (from https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca)","c8279454":"Trend by Confirmed Cases per Million of Population ","6d6cc7ae":"Date of Disease Onset","d13bc9e4":"<a id=\"section-two\"><\/a>\n# Load Data and Initial Prep","b662bc69":"### Comparison of Countries After Hitting Case Threshold","9e9a8131":"#### Country Totals for Last N Days ","ec1fc3bd":"The US CDC is [posting data](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/cases-updates\/cases-in-us.html) on the date of disease onset to its website.  The data represents a sample of cases (over 1\/3 ot total cases in recent samples).  The CDC notes that data from the last ten days may not reflect all illnesses that began at that time (as the cases might not have been reported by then). \n\nUPDATED MON-FRI ONLY; CDC SUSPENDED PROVIDING THIS DATA ON 4\/15","109c7213":"Look at One Country's Data ","b628b429":"List of All Countries\/Regions in Dataset ","530a3c83":"### Death Rates Per Confirmed Case","56753153":"THIS CODE IS FOR REFERENCE, IF YOU WANT TO RECREATE THE DEMOGRAPHICS DATAFRAME.  OTEHRWISE, JUST READ IN THE SAVED DATAFRAME AS SHOWN AT THE APPROPRIATE POINT ABOVE. \n\nThe following code can be used to read in files from the World Bank with country-specific population data, elderly population (65+) as a percentage of country population, and population density (people per square km) -- and to create a combined dataframe. The files are saved here and are available from the OECD at:  \nhttps:\/\/data.oecd.org\/pop\/population.htm#indicator-chart  \nhttps:\/\/data.oecd.org\/pop\/elderly-population.htm#indicator-chart  \nhttps:\/\/data.worldbank.org\/indicator\/EN.POP.DNST  \nThe combined data, after some prep, is saved as \"df_demographics.pkl\".","d29c50c3":"### Demographic Data ","3e09888e":"Comparative Death Rates as of Last Date ","3c11a0ba":"![image.png](attachment:image.png)\n","faa890d1":"<a id=\"section-one\"><\/a>\n# Imports and Key Functions "}}