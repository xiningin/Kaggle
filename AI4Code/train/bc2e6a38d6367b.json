{"cell_type":{"2953034a":"code","cf5c1f06":"code","df856595":"code","8ae317d8":"code","18ecc370":"code","7c9a9e86":"code","7c03b23b":"markdown"},"source":{"2953034a":"!python3 -m pip install ..\/input\/nflimpactdetectron\/detectron2\/detectron2 --no-index --find-links ..\/input\/nflimpactdetectron\/wheelz\/wheelz","cf5c1f06":"# importing all needed libs:\n\nimport cv2\nimport numpy as np \nimport pandas as pd\nimport os\nimport subprocess\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n%matplotlib inline\nplt.rcParams['figure.dpi'] = 150\n\nimport seaborn as sns\n\nfrom IPython.display import Video, display\nfrom detectron2 import model_zoo\nfrom detectron2.config import get_cfg\nfrom detectron2.data import MetadataCatalog\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.structures import Instances, BoxMode\nfrom detectron2.utils.visualizer import Visualizer\n","df856595":"# this basically creates the detectron2 configuration for our pre-trained model\ndef new_model_cfg():\n    cfg = get_cfg()\n    model = \"COCO-InstanceSegmentation\/mask_rcnn_R_101_FPN_3x.yaml\"\n    cfg.merge_from_file(model_zoo.get_config_file(model))\n    cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(model)\n    cfg.MODEL.MASK_ON = False\n    cfg.INPUT.RANDOM_FLIP = \"none\"\n    cfg.OUTPUT_DIR = \"output\"\n    cfg.DATASETS.TRAIN = (\"nflimpact_train\",)\n    cfg.DATASETS.TEST = (\"nflimpact_test\",)\n\n    cfg.DATALOADER.NUM_WORKERS = 2\n    cfg.SOLVER.IMS_PER_BATCH = 4\n    cfg.SOLVER.CHECKPOINT_PERIOD = 2000\n    cfg.SOLVER.STEPS = (21000, 50000)\n    cfg.SOLVER.MAX_ITER = 200000\n    cfg.SOLVER.BASE_LR = 0.001\n    cfg.TEST.EVAL_PERIOD = 2000\n    cfg.MODEL.ROI_HEADS.NUM_CLASSES = len(classes)\n    cfg.DATALOADER.FILTER_EMPTY_ANNOTATIONS = True\n    return cfg","8ae317d8":"# this sets up the pre-trained model with the weights from our dataset and creates a predictor off of it\nclasses = [\"helmet\"]\nMetadataCatalog.get(\"nflimpact\").set(thing_classes=classes)\ncfg = new_model_cfg()\ncfg.MODEL.WEIGHTS = \"..\/input\/nflimpactdetectron\/model_v2_0071999.pth\"\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = len(classes)\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5\npredictor = DefaultPredictor(cfg)","18ecc370":"# some sample image from the training set\nimg_path = '\/kaggle\/input\/nfl-impact-detection\/images\/57503_000116_Endzone_frame443.jpg'\nimg = cv2.imread(img_path) \nplt.imshow(img)\nplt.show()","7c9a9e86":"# predict on the image\nmodel_output = predictor(img)\n\nmodel_output = model_output[\"instances\"].to(\"cpu\")\n# only include detected instances with high enough score\nni = model_output[model_output.scores > 0.9]\n\n# use the built-in visualizer to draw the boxes onto the image\nv = Visualizer(img[:, :, ::-1], metadata=MetadataCatalog.get(\"nflimpact\"))\nimg = v.draw_instance_predictions(ni).get_image()\nplt.imshow(img)\nplt.show()","7c03b23b":"First, add the dataset that contains the pre-trained model and the installation for detectron2:\nhttps:\/\/www.kaggle.com\/tjungblut\/nflimpactdetectron\n\nThen you can proceed to install it via pip and offline installation:"}}