{"cell_type":{"3761bfb4":"code","acaeea17":"code","ec0835e9":"code","db6d0746":"code","8e1e4f51":"code","acae7886":"code","363b0700":"code","7c4cec57":"code","d69c8012":"code","2ef58290":"code","fb385004":"code","c90316d5":"code","41bfe947":"code","2acee71a":"code","1800f495":"code","eb5333bf":"code","ea6b1a9a":"markdown","ba8d3911":"markdown","fb2ef2ce":"markdown","1a993621":"markdown","0006636a":"markdown","57555105":"markdown","cc2a7592":"markdown","917ffc9a":"markdown","7cf15568":"markdown","4aaf44f2":"markdown","b377db1a":"markdown","56565169":"markdown"},"source":{"3761bfb4":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}","acaeea17":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\ncitytracker[\"Chicago\"]","ec0835e9":"#first I tried adding the extra 17,500 to the existing value of Seattle by using the sum. \n#citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n#citytracker[\"Seattle\"] = \"Seattle\" + \"17,500\"\n#That didn't work, so I manually added 17,500 to the existing 724725 (which is 742225) and will ask Python to make that value associated with the Seattle key: #\n\n","db6d0746":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\ncitytracker[\"Seattle\"] = 74225\nprint(citytracker[\"Seattle\"])\n","8e1e4f51":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\ncitytracker[\"Los Angeles\"] = \"45000\"\nprint(citytracker[\"Los Angeles\"])\n\n","acae7886":"#First I tried concatenating the string \"Denver:\" with the output of \"Denver\" but because that output is an integer and not a string, I got an error\n\n\n#citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n#print(\"Denver:\"+ citytracker['Denver'])\n\n#So then I just put the population of Denver as X and added it to the string of \"Denver:\") There's probably a more official way to do this but that's what I got. \n\ncitytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\nx = \"619968\"\n\nprint(\"Denver:\"+ x)\n\n\n","363b0700":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\nfor cities in citytracker:\n        print(cities)\n\n        #Note: I'm not sure what you meant by \"one line at a time\" here. I just printed the list on separate lines; I hope that was right.","7c4cec57":"#I'm not sure how to do this one. I read the class slides, my own notes, watched a library video on python (for high schoolers and undergrads) and googled it. I tried using code that made sense to me from my google search but it still didn't work. \n#Am I supposed to create a separate list of the residents and then add those to the dictionary and then print it or merge the two together? \n#I don't know how to combine functions like this and googling it is a massive rabbit hole of a million different options, none of which seem to work for this particular instance.  \n\ncitytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\n#for city,residents in citytracker():\n   # print(city \":\" residents)\n    \n#Here's another one that I tried that also didn't work\n\nfor c in citytracker:\n    print(c,\":\", citytracker[c])\n\n#This is as close as I got, based on the Mark Lutz slide from class. I tried adding code to print it with colons, but that didn't work. I don't know how to format it. \n# I know the functions separately, but I don't know how to combine them in a way that doesn't result in an error. \n#This is a sinkhole of options that I could spend hours on for each question. \n\n#D = citytracker\n\n#D.items()\n\n","d69c8012":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\n#Once again, I don't know how to do this and googling + notes + lecture slides turned up nothing that worked\n#Apparently I\"m doing something wrong with the first \"New York\" but Pythontutor didn't tell me what actually is invalid about the syntax. \n#Please, please don't advertise this class as for novices anymore. It's really not for novices. I'm having to watch extra python for dummies videos on the side. This class is for people who have some coding background and can figure out WTF to do with these assignments\n\n\nif \"New York\" in citytracker:\n        print(\"New York:\", citytracker[\"New York\"])\nelse:\n        print(\"Sorry, that is not in the City Tracker\")\n        \nif \"Atlanta\" in citytracker:\n        print(\"Atlanta:\", citytracker[\"Atlanta\"])\nelse:\n        print(\"Sorry, that is not in the City Tracker\")","2ef58290":"potentialcities = ['Cleveland','Phoenix','Nashville','Philadelphia','Milwaukee']","fb385004":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\npotentialcities = ['Cleveland','Phoenix','Nashville','Philadelphia','Milwaukee', 'Atlanta']\n\nfor c in potentialcities:\n    if c in citytracker:\n        print(c,\":\", citytracker[c])\n    else:\n        print(\"zero\")\n        \n\n","c90316d5":"citytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\n\n\nfor c in citytracker:\n    print(c,\",\", citytracker[c])\n    \n","41bfe947":"import os\n\nNewfile = open(\"popreport.csv\", \"w\" )\n\nfor c in citytracker:\n    Newfile.write(c + \",\" + str(citytracker[c]) + \"\\n\")\n    \nNewfile.close()\n    \n### Add your code here\n\n\n\n### This will print out the list of files in your \/working directory to confirm you wrote the file.\n### You can also examine the right sidebar to see your file.\n\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\n","2acee71a":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"key\") # make sure this matches the Label of your key\nkey1 = secret_value_0\n\nfrom opencage.geocoder import OpenCageGeocode\ngeocoder = OpenCageGeocode(key1)\n#query = 'Seattle'  # replace this city with cities from the names in your citytracker dictionary\nresults = geocoder.geocode('Seattle')\nlat = str(results[0]['geometry']['lat'])\nlng = str(results[0]['geometry']['lng'])\nprint (\"Lat: %s, Lon: %s\" % (lat, lng))","1800f495":"print(citytracker)\nfor cities in citytracker:\n    results = geocoder.geocode(cities)\n    lat = str(results[0]['geometry']['lat'])\n    lng = str(results[0]['geometry']['lng'])\n    print (cities, \"Lat: %s, Lon: %s\" % (lat, lng))","eb5333bf":"# This code retrieves your key from your Kaggle Secret Keys file\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"darkSkyKey\") # make sure this matches the Label of your key\n\nimport urllib.error, urllib.parse, urllib.request, json, datetime\n\ndef safeGet(url):\n    try:\n        return urllib.request.urlopen(url)\n    except urllib2.error.URLError as e:\n        if hasattr(e,\"code\"):\n            print(\"The server couldn't fulfill the request.\")\n            print(\"Error code: \", e.code)\n        elif hasattr(e,'reason'):\n            print(\"We failed to reach a server\")\n            print(\"Reason: \", e.reason)\n        return None\n\n# lat and lon below are for UW\n#lat and long here can be variables in the for loop \n#Make a dictionary inside a dictionary\n\n#def getForecast(lat=\"47.656648\",lng=\"-122.310233\"): # default values are for UW\n    # https:\/\/api.darksky.net\/forecast\/[key]\/[latitude],[longitude]\n    #key2 = secret_value_0\n    #url = \"https:\/\/api.darksky.net\/forecast\/\"+key2+\"\/\"+lat+\",\"+lng\n    #return safeGet(url)\n    \n#Here I'm trying to figure out a way to put a for loop after the getForecast dictionary. Someone in class told me to replace the hardcoded lat\/long for getForecast and then put a\n#dictionary within a dictionary, but I wasn't sure how to do that. It seems like getForecast needs to be defined? I will ask Brock about this one. \n    \ndef getForecast(lat = str((results[0]['geometry']['lat']),lng = str(results[0]['geometry']['lng']))\n    key2 = secret_value_0\n    url = \"https:\/\/api.darksky.net\/forecast\/\"+key2+\"\/\"+lat+\",\"+lng\n    return safeGet(url)\ncitytracker = {'Atlanta': 486290, 'Boston': 685094, 'Chicago': 2749360, 'Denver': 619968, 'Seattle': 724725}\nfor cities in citytracker:\n    results = geocoder.geocode(cities)\n\n \n    print (cities, \"Lat: %s, Lon: %s\" % (lat, lng))\n\n\n\ndata = json.load(getForecast(lat,lng))\ncurrent_time = datetime.datetime.now() \nprint(\"Retrieved at: %s\" %current_time)\nprint(data['currently']['summary'])\nprint(\"Temperature: \" + str(data['currently']['temperature']))\nprint(data['minutely']['summary'])\n","ea6b1a9a":"### Step 2: Incrementing the value of a dictionary at a key.\n\nWrite code to increment the number of residents in Seattle by 17,500 (that happened in one month in Summer 2018!). In other words, add 17,500 to the existing value of cities at key 'Seattle').  Then, print out the number of residents in the Seattle.","ba8d3911":"### Step 8: Default values\n\nWe have a list of potential cities (in the list potentialcities) and we want to check whether the city exists within the City Tracker. If it is, we want to print `city: #`, where city is the city name and # is the population. If the city is not in the dictionary, it should print zero. Add to the code below to do this. *Hint: you can use default values here to make this take less code!*\n","fb2ef2ce":"### Step 10: Saving a dictionary to a CSV file\nWrite key and value pairs from `citytracker` out to a file named 'popreport.csv'. *Hint: the procedure is very close to that of Step 9.* You should also include a header to row describe each column, labeling them as \"city\" and \"pop\".","1a993621":"### Step 4: Concatenating strings and integers. \n\nWrite code that creates a string that says 'Denver: X', where X is the number of residents extracted from the `citytracker` dictionary.  Print the string. Hint: you will need to use the + string concatenation operator in conjunction with str() or another string formatting instruction.","0006636a":"### Step 9: Printing comma separated data from a dictionary.\n\nYou may have worked with comma separated values before: they are basically spreadsheets or tables represented as plain text files, with each row represented on a new line and each cell divided by a comma. Print out the keys and values of the dictionary stored in `citytracker`. The keys and values you print should be separated only by commas (there should be no spaces). Print each `key:value` pair on a different line. *Hint: this is almost identical to Step 6*","57555105":"### Step 7: Testing membership in a dictionary.\n\nWrite code to test whether 'New York' is in the `citytracker` dictionary.  If the test yields `true`, print `New York: <x>`, where `<x>` is the current population. If the test yields false, it should print \"Sorry, that is not in the Coty Tracker. Do the same thing for the key 'Atlanta'.","cc2a7592":"## A4: Manipulating Data\nThis assignment is focused on working with dictionaries and manipulating data. Follow the instructions for each step below. After each step, insert your Code Cell with your solution if necessary (in some steps there will be some code provided for you).The assignment is in two parts (A and B). Part A focuses on data manipulation and using dictionaries. Part B focuses on retrieving data to update the dictionary.\n\n### Submission\nWhen you have finished, submit this homework by sharing your Kaggle notebook. Click Commit in the upper right of your Kaggle notebook screen. Click on Open Version to view it. Make sure to set Sharing permissions to public. Then copy the URL for that version. To submit on Canvas, click Submit Assignment and paste the link into the URL submission field.","917ffc9a":"### Step 6: iterating over keys to access values in a dictionary. \n\nWrite code that prints each city (key), followed by a colon and the number of residents (e.g., Seattle : 724725), one line at a time using a for loop.","7cf15568":"# PART A\n### Step 1: Accessing values at a specified key in a dictionary.\n\nWe have created a list of cities to keep track of what current populations are and potentially identify which cities are growing fastest, what the weather is like there, etc. Add code to print the number of residents in Chiago the our `citytracker` list. (the value associated with key 'Chicago' in the dictionary dinocount). Hint: this is just one simple line of code. Add the code below.","4aaf44f2":"### Step 5: Iterating over keys in a dictionary.  \n\nWrite code that prints each city (key), one line at a time, using a for loop.","b377db1a":"# PART B\nIn this part, you will use API keys to access weather information for cities in the `citytracker` dictionary. You need to get the weather for each item and store it in the same (or a new) dictionary. You then print out the data and format it to be pretty (whatever that means to you) and finally, write it out as a json file with a timestamp.\n\n**You will need to enable Internet connections in the sidebar to the right of your notebook. If you get a `Connection error` in the Console, it is because your notebook can't access the internet.**\n\n### Step 1: Accessing APIs to retrieve data\nFirst, you will need to request an API Secret Key from OpenCage (https:\/\/opencagedata.com\/api) and add it to your Kaggle notebook in the Add-ons menu item. Once you have the Secret Key, you attach it to this notebook (click the checkbox) so you can make the API call. Make sure the **Label** for your key in your Kaggle Secrets file is what you use in your code below.\n\nYou will also an API Secret Key from DarkSky (https:\/\/darksky.net\/dev). Attach it to this notebook and use it in the code. Make sure you have created different labels for each key and use them in the code below.\n\nFinally, make sure to install the `opencage` module in this notebook. Use the console at the bottom of the window and type `pip install opencage`. You should receive a confirmation message if it installs successfully\/\n\nThen try running the code cells below to see the output. Once the code sucessfully works for Seattle (which has been provided for you below), try typing in different cities instead to see the results to make sure it is working.\n\n### Step 2: Retreiving values for each city in your dictionary\nNow try to get information for all of the cities in your `citytracker` dictionary. You can print the information out to make sure it is working. Store the results of `getForecast` for each city in your dictionary.\n\n### Step 3: Writing the datafile\nSave the results of your work as a JSON formatted output file in your Kaggle output folder and Commit your notebook. Make sure to make it publc and submit the resulting URL in Canvas.\n","56565169":"### Step 3: Adding an entry to a dictionary. \n\nOur list of cities just got bigger. (What could go wrong?) Write code to insert a new key, 'Los Angeles' into the dictionary, with a value of 45000. Verify that it worked by printing out the value associated with the key 'Los Angeles'"}}