{"cell_type":{"6b5b4654":"code","6d85f995":"code","7c267049":"code","99c0f1f0":"code","d09381c2":"code","044cdfc6":"code","986d3b76":"code","11e3c35b":"code","21168948":"code","5fcb996c":"code","9b25116e":"code","4ff0a702":"code","2b888834":"code","964d7bde":"code","2407c4a2":"code","bc73f99e":"code","6f895231":"code","6801cf9c":"code","e83d3e6d":"code","1567611f":"code","06a7b9cb":"code","d829552a":"code","eebe7711":"code","9954620b":"code","f9204e7f":"code","0802f118":"code","9a1f9094":"code","f8cdbc56":"code","e43b20b2":"markdown","f854687a":"markdown","3a7f6c6b":"markdown","48c698c3":"markdown","9c6f492c":"markdown","fd92de75":"markdown","063f1be4":"markdown","b0820c7a":"markdown","1a4ba76c":"markdown","3260c59c":"markdown","9c288ad2":"markdown","830de44e":"markdown","c41ac7c9":"markdown","5a072eb1":"markdown","3d89ac9f":"markdown","02e06cc3":"markdown","8c9ff380":"markdown","686cd62c":"markdown","a5c2f732":"markdown","fba13de0":"markdown","7898273f":"markdown","ef158d8a":"markdown","00238076":"markdown","0f987536":"markdown","1528dc93":"markdown","9063957c":"markdown"},"source":{"6b5b4654":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d85f995":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor","7c267049":"df = pd.read_csv('..\/input\/insurance-premium-prediction\/insurance.csv')\ndf.head(5)","99c0f1f0":"df.isnull().sum()","d09381c2":"df.describe()","044cdfc6":"sns.set_style('whitegrid')\nsns.countplot(x='sex',data=df)","986d3b76":"plt.figure(figsize=(16,6))\nplt.style.use('fivethirtyeight')\nax=sns.countplot('region',data=df,palette='dark',)\nax.set_xlabel(xlabel='Type',fontsize=18)\nax.set_ylabel(ylabel='Total people in Region',fontsize=18)\nax.set_title(label='Region',fontsize=20)\nplt.show()","11e3c35b":"sns.relplot(x='expenses',y='bmi',data=df,hue='smoker')","21168948":"sns.relplot(x='expenses',y='bmi',hue='smoker',col='sex',data=df)","5fcb996c":"g=sns.catplot(x='region',y='expenses',data=df)\ng.set_xticklabels(rotation=45)","9b25116e":"g=sns.catplot(x='region',y='expenses',hue='sex',data=df,kind='box')\ng.set_xticklabels(rotation=45)","4ff0a702":"sns.catplot(x='region',y='expenses',kind='violin',data=df,inner=None)","2b888834":"Age_Group_0_10=0\nAge_Group_11_20=0\nAge_Group_21_30=0\nAge_Group_31_40=0\nAge_Group_41_50=0\nAge_Group_51_60=0\nAge_Group_61_70=0\n\nfor i in range(len(df)):\n    if df.loc[i,'age']>0 and df.loc[i,'age']<=10:\n        Age_Group_0_10 +=1\n    elif df.loc[i,'age']>10 and df.loc[i,'age']<=20:\n        Age_Group_11_20 +=1\n    elif df.loc[i,'age']>20 and df.loc[i,'age']<=30:\n        Age_Group_21_30 +=1\n    elif df.loc[i,'age']>30 and df.loc[i,'age']<=40:\n        Age_Group_31_40 +=1        \n    elif df.loc[i,'age']>40 and df.loc[i,'age']<=50:\n        Age_Group_41_50 +=1  \n    elif df.loc[i,'age']>50 and df.loc[i,'age']<=60:\n        Age_Group_51_60 +=1    \n    else:\n        Age_Group_61_70 +=1","964d7bde":"Age_dict = {'Age_Group':['Age(0-10)','Age(11-20)','Age(21-30)','(Age31-40)',\n            'Age(41-50)','Age(51-60)','Age(61-70)'],\n            'Count':[Age_Group_0_10,Age_Group_11_20,Age_Group_21_30,\n                    Age_Group_31_40,Age_Group_41_50,Age_Group_51_60,\n                    Age_Group_61_70]\n           }","2407c4a2":"df2 = pd.DataFrame(Age_dict)\ndf2","bc73f99e":"plt.figure(figsize=(20,20))\nplt.title(\"Pie Chart of Age Group Distribution opting for Insurance Premium\",fontsize=30)\nplt.pie(df2['Count'],labels=df2['Age_Group'],autopct='%1.1f%%',wedgeprops={'edgecolor':'black'})\nplt.show()","6f895231":"categorical_features=[feature for feature in df.columns if df[feature].dtypes=='O']\ncategorical_features","6801cf9c":"numerical_features=[feature for feature in df.columns if df[feature].dtypes!='O']\nnumerical_features","e83d3e6d":"for feature in categorical_features:\n    print('The feature is {} and number of categories are {}'.format(feature,len(df[feature].unique())))","1567611f":"lbl_encoders={}\nfor feature in categorical_features:\n    lbl_encoders[feature]=LabelEncoder()\n    df[feature]=lbl_encoders[feature].fit_transform(df[feature])","06a7b9cb":"df","d829552a":"X = df.loc[:,['age','sex','bmi','children','smoker','region']]\nY = df.loc[:,'expenses']","eebe7711":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.05)","9954620b":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","f9204e7f":"model = DecisionTreeRegressor()\n\ngs = GridSearchCV(model,\n                  param_grid = {'max_depth': range(1, 11),\n                                'min_samples_split': range(10, 60, 10)},\n                  cv=5,\n                  n_jobs=1,\n                  scoring='neg_mean_squared_error')\n\ngs.fit(X_train, y_train)\n\nprint(gs.best_params_)","0802f118":"regressor = DecisionTreeRegressor(max_depth=4, min_samples_split=20)\nregressor.fit(X_train, y_train)","9a1f9094":"y_pred = regressor.predict(X_test)","f8cdbc56":"r2_score(y_test,y_pred)","e43b20b2":"## Determine the Categorical features","f854687a":"## Get the total no of people across the regions","3a7f6c6b":"## Get the total male and female in the dataset","48c698c3":"## Split the dataset into training and Test Data","9c6f492c":"## Check for Missing or null values","fd92de75":"## Fit the Decision Tree model with best parameters on training Sample","063f1be4":"## Create a Dicitionary of Age Group and count as values","b0820c7a":"## Determine the Numercial features","1a4ba76c":"## Split the Dependent and Independent features","3260c59c":"## Transform the Categorical features into Labels","9c288ad2":"## Catplot with kind as Violin and Region Vs Expenses","830de44e":"## Get the count of people in different Age Groups","c41ac7c9":"## Create a Dataframe of AgeGroup Vs Count","5a072eb1":"## Find the best parameters using GridSearchCV","3d89ac9f":"## Get the data from the file","02e06cc3":"## Import the Libraries","8c9ff380":"## Calculate the accuracy using r2_score","686cd62c":"## Total Categories in individual Categorical features","a5c2f732":"## Describe the Statistics","fba13de0":"## The relation between Expenses and BMI which is distinguished by Smoker and categorised by Gender","7898273f":"## The relation between Expenses and BMI which is distinguished by Smoker","ef158d8a":"## Catplot of Region Vs Expenses","00238076":"## Perform Standardisation","0f987536":"## Piechart of percentage Distribution of Age-Group and count","1528dc93":"## Catplot of Region Vs Expenses categorised by Gender","9063957c":"## Predict the Test samples"}}