{"cell_type":{"8245a6c5":"code","cbb6dafa":"code","725a0c91":"code","5ba3440f":"code","1d687944":"code","a654e1ac":"code","9a475fbe":"code","7dcb2a5e":"code","a5a5e848":"code","5ae924c3":"code","b85cdeb0":"code","a71664b7":"code","c36da655":"code","7f686268":"code","37196131":"code","6e387150":"code","e5139a97":"code","c5e81c8f":"code","1efe7921":"code","ec057878":"code","84c780f0":"code","c2bb4cd7":"code","0b66834a":"code","8c19821e":"code","51a7e0e5":"code","6b699705":"code","7ec63af7":"code","7bb5bc63":"code","445cd4cd":"code","553e0b2b":"code","a2473c28":"code","c35649e8":"code","ae92648c":"code","bd42e595":"code","431b4d53":"code","554a65d2":"code","552538cc":"code","a578f39e":"code","1f1411ba":"code","338838a1":"code","7b22445d":"code","998b47e8":"code","34b071b1":"code","d430ba14":"code","330ab7a7":"code","0e243da7":"code","60585254":"code","3441fe51":"code","71654e90":"code","a19fadad":"code","28ce46b0":"code","881033ed":"code","3a73479d":"code","dd6135c1":"code","def754ec":"code","71d8982b":"code","3e93e36b":"code","e8b048cd":"code","f43002ef":"code","e6b19551":"code","d31b7b7c":"code","46df65d8":"code","dd59274b":"code","483fe2d3":"code","e5e7d6ce":"code","3a5e472a":"code","438715a3":"code","4dd54c3f":"code","daaa8749":"code","09bcd5f6":"code","7d21091f":"code","f2b2d90a":"code","47a86af4":"code","4879bc55":"code","793f37e4":"code","dce0bc7e":"code","274f9dcb":"code","5f8a2fa1":"code","94134033":"code","72197e90":"code","bd749294":"code","1ba7afad":"code","14a5caff":"code","abb19075":"code","903c2849":"code","233347ad":"markdown","fd7da937":"markdown","d5690f23":"markdown","9d9aa33b":"markdown","85ba4b9b":"markdown","6c3ae2b5":"markdown","f0226ede":"markdown","3af12fa5":"markdown","abca5031":"markdown","80ac4240":"markdown","56cd6945":"markdown","3a85e3c3":"markdown","ee58232d":"markdown","0740163f":"markdown","05e46084":"markdown","27501d29":"markdown","d2fca847":"markdown","2d4418cb":"markdown","0b2dd090":"markdown","e331cf20":"markdown","815495c9":"markdown","d5076240":"markdown","bdb864f5":"markdown","55af5c25":"markdown","3ec44d5c":"markdown","39ee64c9":"markdown","6d9f9537":"markdown","342ddcbc":"markdown","7193c4ca":"markdown","48b3e93c":"markdown","095c8bbc":"markdown","df9b9c7e":"markdown","cf40f431":"markdown","fb959bba":"markdown","d333f452":"markdown"},"source":{"8245a6c5":"import pandas as pd\n\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","cbb6dafa":"train.head()","725a0c91":"test.head()","5ba3440f":"train.shape","1d687944":"test.shape","a654e1ac":"train.info()","9a475fbe":"test.info()","7dcb2a5e":"train.isnull().sum()","a5a5e848":"test.isnull().sum()","5ae924c3":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","b85cdeb0":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","a71664b7":"bar_chart('Sex')","c36da655":"bar_chart('Pclass')","7f686268":"bar_chart('SibSp')","37196131":"bar_chart('Parch')","6e387150":"bar_chart('Embarked')","e5139a97":"train.head()","c5e81c8f":"train.head(10)","1efe7921":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","ec057878":"train['Title'].value_counts()","84c780f0":"test['Title'].value_counts()","c2bb4cd7":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","0b66834a":"train.head()","8c19821e":"test.head()","51a7e0e5":"bar_chart('Title')","6b699705":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","7ec63af7":"train.head()","7bb5bc63":"test.head()","445cd4cd":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","553e0b2b":"bar_chart('Sex')","a2473c28":"train.head(100)","c35649e8":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","ae92648c":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","bd42e595":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show() ","431b4d53":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","554a65d2":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","552538cc":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","a578f39e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","1f1411ba":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","338838a1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","7b22445d":"train.info()","998b47e8":"test.info()","34b071b1":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","d430ba14":"train.head()","330ab7a7":"bar_chart('Age')","0e243da7":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","60585254":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","3441fe51":"train.head()","71654e90":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","a19fadad":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","28ce46b0":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()  ","881033ed":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","3a73479d":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","dd6135c1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","def754ec":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","71d8982b":"train.head()","3e93e36b":"train.Cabin.value_counts()","e8b048cd":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","f43002ef":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","e6b19551":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","d31b7b7c":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","46df65d8":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","dd59274b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","483fe2d3":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","e5e7d6ce":"train.head()","3a5e472a":"train.head()","438715a3":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","4dd54c3f":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","daaa8749":"train_data.head(10)","09bcd5f6":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","7d21091f":"train.info()","f2b2d90a":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","47a86af4":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","4879bc55":"# kNN Score\nround(np.mean(score)*100, 2)","793f37e4":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","dce0bc7e":"# decision tree Score\nround(np.mean(score)*100, 2)","274f9dcb":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5f8a2fa1":"# Random Forest Score\nround(np.mean(score)*100, 2)","94134033":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","72197e90":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","bd749294":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","1ba7afad":"round(np.mean(score)*100,2)","14a5caff":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","abb19075":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","903c2849":"submission = pd.read_csv('submission.csv')\nsubmission.head()","233347ad":"### 4.3 Sex\n\nmale: 0\nfemale: 1","fd7da937":"### 6.2 Cross Validation (K-fold)","d5690f23":"### 6.2.5 SVM","9d9aa33b":"## 4. Feature engineering\n\nFeature engineering is the process of using domain knowledge of the data  \nto create features (**feature vectors**) that make machine learning algorithms work.  \n\nfeature vector is an n-dimensional vector of numerical features that represent some object.  \nMany algorithms in machine learning require a numerical representation of objects,  \nsince such representations facilitate processing and statistical analysis.","85ba4b9b":"We can see that *Age* value is missing for many rows. \n\nOut of 891 rows, the *Age* value is present only in 714 rows.\n\nSimilarly, *Cabin* values are also missing in many rows. Only 204 out of 891 rows have *Cabin* values.","6c3ae2b5":"## 5. Modelling","f0226ede":"### 6.2.2 Decision Tree","3af12fa5":"### 4.7 Cabin","abca5031":"## 3. Exploratory data analysis\nPrinting first 5 rows of the train dataset.","80ac4240":"#### Title map\nMr : 0  \nMiss : 1  \nMrs: 2  \nOthers: 3\n","56cd6945":"### 6.2.4 Naive Bayes","3a85e3c3":"There are 177 rows with missing *Age*, 687 rows with missing *Cabin* and 2 rows with missing *Embarked* information.","ee58232d":"### Bar Chart for Categorical Features\n- Pclass\n- Sex\n- SibSp ( # of siblings and spouse)\n- Parch ( # of parents and children)\n- Embarked\n- Cabin","0740163f":"### 4.6 Fare","05e46084":"### import python lib for visualization","27501d29":"#### 4.4.2 Binning\nBinning\/Converting Numerical Age to Categorical Variable  \n\nfeature vector map:  \nchild: 0  \nyoung: 1  \nadult: 2  \nmid-age: 3  \nsenior: 4","d2fca847":"more than 50% of 1st class are from S embark  \nmore than 50% of 2nd class are from S embark  \nmore than 50% of 3rd class are from S embark\n\n**fill out missing embark with S embark**","2d4418cb":"### 4.5 Embarked","0b2dd090":"### Data Dictionary\n- Survived: \t0 = No, 1 = Yes  \n- pclass: \tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd  \t\n- sibsp:\t# of siblings \/ spouses aboard the Titanic  \t\n- parch:\t# of parents \/ children aboard the Titanic  \t\n- ticket:\tTicket number\t\n- cabin:\tCabin number\t\n- embarked:\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton  ","e331cf20":"The Chart confirms **Women** more likely survivied than **Men**","815495c9":"### 4.2 Name","d5076240":"## 7. Testing","bdb864f5":"#### 4.4.1 some age is missing\nLet's use Title's median age for missing Age","55af5c25":"### 6.2.1 kNN","3ec44d5c":"The Chart confirms **a person aboarded with more than 2 parents or children** more likely survived  \nThe Chart confirms ** a person aboarded alone** more likely dead","39ee64c9":"The Chart confirms **1st class** more likely survivied than **other classes**  \nThe Chart confirms **3rd class** more likely dead than **other classes**","6d9f9537":"### 4.8 FamilySize","342ddcbc":"**Total rows and columns**\n\nWe can see that there are 891 rows and 12 columns in our training dataset.","7193c4ca":"The Chart confirms **a person aboarded from C** slightly more likely survived  \nThe Chart confirms **a person aboarded from Q** more likely dead  \nThe Chart confirms **a person aboarded from S** more likely dead","48b3e93c":"### 6.2.3 Ramdom Forest","095c8bbc":"### 4.4 Age","df9b9c7e":"The Chart confirms **a person aboarded with more than 2 siblings or spouse** more likely survived  \nThe Chart confirms ** a person aboarded without siblings or spouse** more likely dead","cf40f431":"# Titanic: Machine Learning from Disaster\n### Predict survival on the Titanic\n- Defining the problem statement\n- Collecting the data\n- Exploratory data analysis\n- Feature engineering\n- Modelling\n- Testing","fb959bba":"### 4.1 how titanic sank?\nsank from the bow of the ship where third class rooms located  \nconclusion, Pclass is key feature for classifier","d333f452":"#### 4.5.1 filling missing values"}}