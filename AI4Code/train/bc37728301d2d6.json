{"cell_type":{"6aafd450":"code","43fb20d5":"markdown","d0f45a5c":"markdown"},"source":{"6aafd450":"#Input: Codon pattern, Genome\n#Output: Frequency of multiple codon patterns in the genome!\n# define new function\ndef PatternCount(Pattern,Genome):\n# set up a location dictionary on string to generate output variable\n    Occurence_Positions=[]\n# set variable genome\n    n = len (Genome)\n# set variable pattern\n    k = len (Pattern)\n# set search window (starts at search origin and ends one pattern length before text end, but n+1 to get full window)\n    for i in range(n-k+1):\n#  If genome matches pattern\n        if Genome[i:i+k]==Pattern:\n# save the position\n            Occurence_Positions.append(i)\n# return the positions\n    return Occurence_Positions\n\n# Look for replication initiation sequences in the oriC region of T petrophila\n# Input text\n\nT_Petrophilia_Ori=\"AACTCTATACCTCCTTTTTGTCGAATTTGTGTGATTTATAGAGAAAATCTTATTAACTGAAACTAAAATGGTAGGTTTGGTGGTAGGTTTTGTGTACATTTTGTAGTATCTGATTTTTAATTACATACCGTATATTGTATTAAATTGACGAACAATTGCATGGAATTGAATATATGCAAAACAAACCTACCACCAAACTCTGTATTGACCATTTTAGGACAACTTCAGGGTGGTAGGTTTCTGAAGCTCTCATCAATAGACTATTTTAGTCTTTACAAACAATATTACCGTTCAGATTCAAGATTCTACAACGCTGTTTTAATGGGCGTTGCAGAAAACTTACCACCTAAAATCCAGTATCCAAGCCGATTTCAGAGAAACCTACCACTTACCTACCACTTACCTACCACCCGGGTGGTAAGTTGCAGACATTATTAAAAACCTCATCAGAAGCTTGTTCAAAAATTTCAATACTCGAAACCTACCACCTGCGTCCCCTATTATTTACTACTACTAATAATAGCAGTATAATTGATCTGA\"\n\n# Create a variable called count_1 that is equal to the number of times that \"TCA\" occurs in Text.\ncount_1= len(PatternCount(\"TCA\",T_Petrophilia_Ori))\n# Create a variable called count_1 that is equal to the number of times that \"TTT\" occurs in Text.\ncount_2= len(PatternCount(\"TTT\",T_Petrophilia_Ori))\n# Print the sum of count_1 and count_2\nprint (count_1+count_2)","43fb20d5":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#626567;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:1.5px;\n           line-height: 2\">\n\n<p style=\"padding: 30px;\n              color:white;\"> \n    <span style=\"font-size:18px;\">\n    <b>\n         \ud83d\udccd  Bioinformatics python project \n    <\/b>\n        <\/span>\n    <br>\n <br>\n    \u25fd I am learning python by building simple bioinformatics applications with the online University of California San Diego \u00a9 Bioinformatics Specialization on coursera. Substitute any genetic sequences and it will still work!\n    \n<\/p>\n<\/div>","d0f45a5c":"* From https:\/\/www.nature.com\/scitable\/definition\/codon-155\/\n\nA codon is a sequence of three DNA or RNA nucleotides that corresponds with a specific amino acid or stop signal during protein synthesis. DNA and RNA molecules are written in a language of four nucleotides; meanwhile, the language of proteins includes 20 amino acids. Codons provide the key that allows these two languages to be translated into each other. Each codon corresponds to a single amino acid (or stop signal), and the full set of codons is called the genetic code. The genetic code includes 64 possible permutations, or combinations, of three-letter nucleotide sequences that can be made from the four nucleotides. Of the 64 codons, 61 represent amino acids, and three are stop signals. For example, the codon CAG represents the amino acid glutamine, and TAA is a stop codon. The genetic code is described as degenerate, or redundant, because a single amino acid may be coded for by more than one codon. When codons are read from the nucleotide sequence, they are read in succession and do not overlap with one another."}}