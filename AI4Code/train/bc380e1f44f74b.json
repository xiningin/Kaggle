{"cell_type":{"2d04b9df":"code","1044a684":"code","05762799":"code","8cd44ba4":"code","58a148d8":"code","ff15e198":"code","14395289":"code","b22c53d3":"code","8e6b08b0":"code","a88940f2":"code","4405f9a2":"code","39064a67":"code","2af16146":"code","85f5b844":"code","f4a1772c":"code","46da309c":"code","2486b344":"code","6d6c8556":"code","072052b2":"code","7386722a":"code","2ab77dcb":"code","43134eba":"code","3d8df0b4":"markdown","cae06dc3":"markdown","6f68164b":"markdown","b2d58e08":"markdown","2f759045":"markdown","5366d70f":"markdown","179f612b":"markdown","8a657249":"markdown","178c6e08":"markdown","7d03d574":"markdown","dba7ed43":"markdown","63197375":"markdown","670c577c":"markdown","fe98220f":"markdown","207fa567":"markdown","3aa345ab":"markdown","0f1dfdc3":"markdown","fcaa75ad":"markdown","7fd60838":"markdown","a1509c54":"markdown","2ebb9aa3":"markdown","c9be96cc":"markdown","8054617d":"markdown","701d0322":"markdown","4b11b549":"markdown","fc3a75cb":"markdown","4d23ce68":"markdown","a6457fb2":"markdown","d8ea1b4f":"markdown"},"source":{"2d04b9df":"# Import the required Libraries\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n# Set it up to work with Jupyter Notebook\n# (this is a Jupyter command, not Python code)\n%matplotlib inline","1044a684":"# Create data\n\ndef create_sample_chart():\n    x_series = np.arange(10)\n    y_series = x_series ** 2\n\n    #Plotting to our canvas in memory\n    plt.plot(x_series, y_series)\n    #Title of our canvas\n    plt.title('String Title Here')\n    #X-axis label\n    plt.xlabel('X Axis Title Here')\n    #Y_axis label\n    plt.ylabel('Y Axis Title Here')\n\n    #Showing what we plotted\n    plt.show();\n    \ncreate_sample_chart()","05762799":"plt.figure()  # create a plot figure\nx = np.linspace(0, 10, 100)\n# create the first of two panels and set current axis\nplt.subplot(2, 1, 1) # (rows, columns, panel number)\nplt.plot(x, np.sin(x))\n\n# create the second panel and set current axis\nplt.subplot(2, 1, 2)\nplt.plot(x, np.cos(x));\nplt.show()","8cd44ba4":"# First create a grid of plots\n# ax will be an array of two Axes objects\nfig, ax = plt.subplots(2)\n\n# Call plot() method on the appropriate object\nax[0].plot(x, np.sin(x))\nax[1].plot(x, np.cos(x));","58a148d8":"x = np.linspace(0, 10, 30)\ny = np.sin(x)\n\nplt.plot(x, y, 'o', color='black');\nplt.show()","ff15e198":"plt.plot(x, y, '-ok');\nplt.show()","14395289":"# Data Introduction\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nimport pandas as pd\nweather_df = pd.read_csv('..\/input\/weather_2012.csv', parse_dates=True, index_col='Date\/Time')\nweather_df.head(5)","b22c53d3":"monthly_data = weather_df.groupby(weather_df.index.month).mean()\nmonthly_data.head(3)\nx_series = monthly_data.index\ny_series = monthly_data['Temp (C)']","8e6b08b0":"plt.plot(x_series, y_series)\n\nplt.title('Temperature Trend, 2012')\nplt.xlabel('Month')\nplt.ylabel('Temp (C)')\nplt.show()","a88940f2":"# First, get calendar month names\nimport calendar\ncalendar_months = calendar.month_name[1:]\n\n\nprint(calendar_months)","4405f9a2":"x=calendar_months\ny=monthly_data['Temp (C)']\nplt.plot(x,y)\nplt.title('Temperature Trend, 2012')\nplt.xlabel('Month')\nplt.xticks(rotation=90)\nplt.ylabel('Temp (C)')\nplt.show()","39064a67":"import matplotlib.pyplot as plt\nimport calendar\n\ndef bar_plot():\n    weekly_data = weather_df.groupby(weather_df.index.dayofweek).mean()\n    \n    plt.bar(weekly_data.index, weekly_data['Visibility (km)'])\n\n    plt.title('Visibility by week, 2012')\n    plt.xlabel('Day of week')\n    plt.ylabel('Visibility (km)')\n\n    plt.xticks(weekly_data.index, calendar.day_abbr, rotation=45)\n\n    plt.show()\n\n    \nbar_plot()","2af16146":"# Sample histogram \n\nx = np.arange(0, 10, 0.1)\ny1 = (((x - 3) ** 3 ) - 100) + np.random.randint(-20, 20, size=len(x))\n\nplt.hist(y1)\nplt.show()","85f5b844":"def hist_plot():\n    plt.hist(weather_df['Wind Spd (km\/h)'])\n    plt.xlabel('Wind Spd (km\/h)')\n    plt.ylabel('Frequency');\n    \nhist_plot()","f4a1772c":"# Sample boxplot \n\nx= np.arange(0, 10, 0.1)\ny = np.exp(x)\n\nplt.boxplot(y)\nplt.show()","46da309c":"def box_plot():\n    plt.boxplot(weather_df['Wind Spd (km\/h)']);\n\nbox_plot()","2486b344":"# Sample scatter plot\n\nx= np.arange(0, 10, 0.1)\ny1 = (((x - 3) ** 3 ) - 100) + np.random.randint(-20, 20, size=len(x))\ny2 = (((3 - x) ** 3 ) + 50) + np.random.randint(-20, 20, size=len(x))\n\nplt.scatter(x, y1, c='r')\nplt.scatter(x, y2, c='b')\nplt.show()","6d6c8556":"jan_df = weather_df['2012-01']\n\ndef scatter_plot():\n    plt.scatter(x=jan_df['Temp (C)'],y=jan_df['Stn Press (kPa)'])   \n    plt.xlabel('Temp (C)')\n    plt.ylabel('Pressure')\n    plt.title('Corelation between Temperature and Pressure for January')\n    \nscatter_plot() # Scatter plot below shows a negative correlation.","072052b2":"fig, ax = plt.subplots()\nax.plot(x, x**2, 'b.-') # blue line with dots\nax.plot(x, x**2.5, 'g--') # green dashed line\nax.plot(x, x**3, c='r') # red line color\nfig.show()","7386722a":"def two_plots():\n    x = np.array([0, 1, 2, 3, 4, 5])\n    y = x ** 2\n\n    # Create Figure (empty canvas)\n    fig = plt.figure()\n\n    # Add set of axes to figure\n    axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\n    axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes \n    # (0.2x left, 0.5x bottom) to (0.4x width, 0.3x height)\n\n    # Larger Figure Axes 1\n    axes1.plot(x, y, 'b')\n    axes1.set_xlabel('X_label_axes1')\n    axes1.set_ylabel('Y_label_axes1')\n    axes1.set_title('Axes 1 Title')\n\n    # Insert Figure Axes 2\n    axes2.plot(y, x, 'r')\n    axes2.set_xlabel('X_label_axes2')\n    axes2.set_ylabel('Y_label_axes2')\n    axes2.set_title('Axes 2 Title');  \n    \ntwo_plots()","2ab77dcb":"# Canvas of 2 by 2 subplots\nfig, axes = plt.subplots(nrows=2, ncols=2)\n\n# axes is an array of shape (2, 2)","43134eba":"x = np.arange(0,10,0.1)\n\nfig,ax = plt.subplots(nrows=2,ncols=2)\nplt.subplot(2,2,1)\nplt.plot(x,x**2,c='r')\nplt.subplot(2,2,4)\nplt.plot(x,x**2,'g--');","3d8df0b4":"## Histogram\n\nSome important characteristics of histogram are:\n\nIt is a display of statistical information that uses bars to show the *frequency of data items* in successive numerical intervals of equal size.\n\nThey can be both vertical and horizontal.\n\nIt has only a numerical variable as input and shows its distribution.\n\nIt divides up the range of possible values in a data set into classes or groups.\n\nGenerally, a histogram will have bars of equal width, although this is not the case when class intervals vary in size.\n\nIt is generally used when dealing with large data sets (greater than 100 observations).\n\nA histogram can also help detect any unusual observations (outliers) or any gaps in the data.\n\nIn a histogram, it is the area of the bar that indicates the frequency of occurrences for each bin.\n\nSince a histogram is a plot of frequency(X) vs X, it only needs one series.","cae06dc3":"## Box Plot\n\nIn descriptive statistics, a box plot is a method for graphically depicting groups of numerical data through their quartiles.\n\nSome important characteristics of a box plot are:\n\nA boxplot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.\n\nSimplest possible box plot displays the full range of variation (from min to max), the likely range of variation (the IQR), and a typical value (the median). Not uncommonly real datasets will display surprisingly high maximums or surprisingly low minimums called outliers. John Tukey has provided a precise definition for two types of outliers: \n\n(a) Outliers are either 3\u00d7IQR or more above the third quartile or 3\u00d7IQR or more below the first quartile. \n\n(b) Suspected outliers are are slightly more central versions of outliers: either 1.5\u00d7IQR or more above the third quartile or 1.5\u00d7IQR or lesser below the first quartile.","6f68164b":"**Matplotlib Basics**\n\nAt the core of it, we need to remember some important things\n\nThe canvas to \"draw\" data(stored in the computer's memory)\n\nThe axes \"Show\" that data\n\nEverything else is just details.","b2d58e08":"## Plot Customizations\nMatplotlib being a low level library, provides a lot of ways to customize your plots.\n\nSome examples include:\n\n* Configuring the line (color, width, ticks, etc)\n* Configuring the axes (setting limits, layout, etc.)\n* Figure and Sub Plots: Multiple plots on one canvas\n* Configuring the figure size\n* Adding legends, etc.","2f759045":"**Other Plot Types**\n\nThe chart we have so far worked with is called a Line Chart. There are other types of plots. Some important examples are:\n\n* Bar Plots\n* Histograms\n* Box Plots\n* Scatter Plots","5366d70f":"## Barplot\n\nSome of the important characteristics of a barplot are:\n\nIt is a chart or graph that presents grouped data with rectangular bars with lengths proportional to the values that they represent.\nThey can be both vertical and horizontal.\nIt shows the relationship between a numerical variable and a categorical variable.\nBar charts can also show big changes in data over time.\nLine graphs are useful for displaying smaller changes in a trend over time. Bar graphs are better for comparing larger changes or differences in data among groups.\nBar graphs are an effective way to compare items between different groups.\nTypes of bar chart-\n\n* Vertical\n* Horizontal\n* Stacked\n\nThe only difference in plotting a bar chart from plotting a line chart is you call plt.bar() instead of plt.plot()","179f612b":"Find the distribution of values in the Wind Speed column","8a657249":"## .xlim & .ylim\nWe can configure the ranges of the axes using the set_ylim and set_xlim methods in the axis object, or axis('tight') for automatically getting \"tightly fitted\" axes ranges.","178c6e08":"## .tight_layout()\nA common issue with matplotlib is overlapping subplots or figures. We can use fig.tight_layout() or plt.tight_layout() method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content.","7d03d574":"**How did the temperature vary amongst the months of the year?**\n\nSince we want to compare amongst months, we need one value for each month. Let's pick the mean for doing this.\n\nGenerate a line chart that visualizes the temperature readings in the month of January:\n\n* x-values should be the values should be the months.\n* y-values should be the mean values in the Temp (C) column per month.\nDisplay the plot.","dba7ed43":"**Create a figure with four subplots, and plot y = x ** 2 on the first and last plots\nMake the color red in the first subplot, and a green dashed line in the last**","63197375":"**Creating the data in the required format**","670c577c":"## Scatter Plot\nScatter plots are similar to line graphs in that they use horizontal and vertical axes to plot data points. However, they have a very specific purpose. Scatter plots show how much one variable is affected by another. The relationship between two variables is called their correlation .\n\nSome important characteristics of a scatter plot are:\n\nA scatter plot can indicate the presence or absence of an association or relationship between two variables.\nIf some association or relationship exists, the data will tend to cluster on or around some line or curve that cuts through the plotted points.\nIf no association or relationship exists, the data will appear spread out.\nWhen some association or relationship exists between two variables, a scatter plot can indicate the direction of the relationship.\nWhen high values of one variable correspond to high values of another variable, and low values of one variable correspond to low values of another variable, we say the relationship is positive because there is a direct relationship between the two variables.\nWhen high values of one variable correspond to low values of another variable, and low values of one variable correspond to high values of another variable, we say the relationship is negative because there is an inverse relationship between the two variables.\nCalculating the correlation coefficient will give us a precise number and a scatter plot helps us find outliers, gain a more intuitive sense of how spread out the data is.\nA scatter plot can be used to help determine if an association or relationship is linear or nonlinear.\nA scatter plot provides a visual revelation of outliers on dubiously measured or erroneously plotted data.","fe98220f":"Are the temperature and pressure correlated, according to the data in the month of January? Look at it by generating a scatter plot","207fa567":"## Seaborn\nSeaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.\n\nUnderstanding matplotlib was essential for understanding how to create plots, but we'll be using Seaborn for general data analysis.","3aa345ab":"**Plotting: Step 1**","0f1dfdc3":"## .figure() and .axes()\n\nFigure: This object essentially returns a new figure to work with. Axes need to be added to the figure to plot on it. The Figure is the overall window or page that everything is drawn on. You can create multiple independent Figures. A Figure can have several other things in it(subtitle, legend, color bar etc).\n\nAxes: To the figure you add Axes. The Axes is the area on which the data is plotted with functions such as plot() and scatter() and that can have ticks, labels, etc. associated with it. This explains why Figures can contain multiple Axes.\n\nThe methods on axes work the same way as .plot()","fcaa75ad":"Now, lets discuss some important definitions that we commonly encounter while generating a boxplot.\n\nMedian- The median (middle quartile) marks the mid-point of the data and is shown by the line that divides the box into two parts. Half the scores are greater than or equal to this value and half are less.\n\nInter-quartile range- The middle \u201cbox\u201d represents the middle 50% of scores for the group. The range of scores from lower to upper quartile is referred to as the inter-quartile range. The middle 50% of scores fall within the inter-quartile range.\n\nUpper quartile- Seventy-five percent of the scores fall below the upper quartile.\n\nLower quartile- Twenty-five percent of scores fall below the lower quartile.\n\nWhiskers- The upper and lower whiskers represent scores outside the middle 50%. Whiskers often (but not always) stretch over a wider range of scores than the middle quartile groups.","7fd60838":"## Weather data\nLet's do this with the Weather data! \nQuick Refresher:\n\nThe Weather Dataset is a time-series data set with per-hour information about the weather conditions at a particular location. It records Temperature, Dew Point Temperature, Relative Humidity, Wind Speed, Visibility, Pressure, and Conditions.\nRead the data set","a1509c54":"## .savefig()\nMatplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF.\n\nfig.savefig(\"filename.png\", dpi=200)","2ebb9aa3":"Draw a boxplot for wind speed","c9be96cc":"**Configuring the plotted line**\n\nIt's easy to set colors, line types, etc. An example is below.","8054617d":"## Matplotlib\nMatplotlib is a library in Python that can help for easily draw Plotting.Matplotlib is a library for making 2D plots of arrays in Python.Although it has its origins in emulating the MATLAB graphics commands, it is independent of MATLAB, and can be used in a Pythonic, object oriented way. Although Matplotlib is written primarily in pure Python, it makes heavy use of NumPy and other extension code to provide good performance even for large arrays.\n\nThe most popular data visualization library with Python is *Matplotlib*. It produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, Jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nMatplotlib makes hard things easy to interpret. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code.\n\nIt is used along with NumPy and Pandas to provide an environment that is an effective open source alternative for MatLab. It can also be used with graphics toolkits like PyQt and wxPython. Here, you will learn to build various types of plots and to customize them to make them more visually appealing and interpretable.","701d0322":"**Plotting: Step 2**\n\nThe chart we plotted is decent, but we aren't done yet. The X axis is labelled correctly (\"Month\"), but the values themselves are 2, 4, etc, instead of January, February, etc.","4b11b549":"## .figsize\nfigsize is a tuple of the width and height of the figure in inches","fc3a75cb":"find the variation in mean visibility, aggregated by day of the week","4d23ce68":"## .legend()\nYou can use the label=\"label text\" keyword argument when plots or other objects are added to the figure, and then using the legend method without arguments to add the legend to the figure.","a6457fb2":"## Python Data Visualization Libraries\nPython is vastly popular among data scientists, one key reason being its strength with data analysis. Data Visualization is a key skill for aspiring data scientists. It helps us to interpret data easily and convey information in an effective way.\n\n### Why is it important?\n* Explore data to get a better grasp of the data.\n* Report insights to convey their results to somebody else.","d8ea1b4f":"## .subplots()\nThe plt.subplots() object will act as a more automatic axis manager and is used to creating multiple charts on the same figure. It is similar to plt.figure(), except use tuple unpacking to grab fig and axes."}}