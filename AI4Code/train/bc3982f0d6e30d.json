{"cell_type":{"37a0867c":"code","fb11aded":"code","6d1ceb74":"code","a46128a4":"code","1ef08b0b":"code","d4370e49":"code","21dd090d":"code","b573c6b3":"code","fa8a89bb":"code","7814dc44":"code","494a475b":"code","0d508ea9":"code","00230045":"code","582e74aa":"code","ef3a8539":"code","91abc042":"code","675b18f8":"code","8f0ac9f5":"code","7794b122":"code","0ab1eccf":"code","6d1602f5":"code","6eaa88fa":"code","fdbd2617":"code","4a7d5029":"code","f82e91bc":"code","9de42b0d":"code","a2aba3ee":"code","511a11b1":"code","88b194ed":"code","7be7cd71":"code","902ea5da":"code","f3a7c0de":"code","39b13dea":"code","b692078b":"code","b69cb697":"code","c9188b61":"code","04efb5d8":"code","8de28cb6":"code","50d6e71f":"code","d397e687":"code","97747314":"code","67d6aac7":"code","4af4eccf":"code","2ba07db1":"code","c9642bbd":"code","ba789153":"code","e2f00fd7":"code","2de3a412":"code","19dd1676":"code","9abac368":"code","b0cc7f6f":"code","dcc57ce0":"code","d9ddfcfc":"code","bdfa26d7":"markdown","5a88b44f":"markdown","7bacda10":"markdown","1b5876aa":"markdown","83d4c22b":"markdown","d93c3461":"markdown","99ae905e":"markdown","d61e82f3":"markdown","3c7f9683":"markdown","45dc27e1":"markdown","4363d4db":"markdown","98ba45da":"markdown","f8cfbbfb":"markdown","de74b607":"markdown","35b7ae60":"markdown","4eb99c74":"markdown","f47d6e6d":"markdown","da098f17":"markdown","dc86e49f":"markdown","fc4440cc":"markdown","297b1d8f":"markdown","25599cb6":"markdown","be80f15b":"markdown","4adf5b4e":"markdown","ba9f4a65":"markdown","9e57010d":"markdown"},"source":{"37a0867c":"# Load libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nimport folium\nfrom folium.plugins import HeatMap\nfrom collections import Counter\n# Import data\ndata = pd.read_csv('..\/input\/crime.csv', encoding='latin-1')","fb11aded":"data.dtypes","6d1ceb74":"data.head(10)\n","a46128a4":"data.tail()","1ef08b0b":"data.info()","d4370e49":"data.columns","21dd090d":"data.corr()","b573c6b3":"#correlation map\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.7, fmt= '.1f',ax=ax)\nplt.show()","fa8a89bb":"# Scatter Plot \n# x = Hour, y = Month\ndata.plot(kind='scatter', x='YEAR', y='MONTH',alpha = 0.1,color = 'red')\nplt.xlabel('YEAR')              # label = name of label\nplt.ylabel('MONTH')\nplt.title('YEAR-MONTH Scatter Plot')            # title = title of plot\nplt.show()","7814dc44":"data.boxplot(column='OFFENSE_CODE',by = 'DISTRICT')\nplt.show()","494a475b":"data['OFFENSE_CODE'].value_counts(dropna =False)\n","0d508ea9":"data['OFFENSE_DESCRIPTION'].value_counts(dropna =False)\n","00230045":"data5 = data.OFFENSE_CODE\ndata6= data.OFFENSE_DESCRIPTION\nconc_data_col = pd.concat([data5,data6],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","582e74aa":"\ndata.boxplot(column='MONTH',by = 'YEAR')\nplt.show()","ef3a8539":"# Histogram\n# bins = number of bar in figure\ndata.HOUR.plot(kind = 'hist',bins = 100,figsize = (12,12))\nplt.show()","91abc042":"# Histogram\n# bins = number of bar in figure\ndata.MONTH.plot(kind = 'hist',bins = 100,figsize = (12,12))\nplt.show()","675b18f8":"#create dictionary and look its keys and values\ndictionary = {'crime' : 'Vandalism','punisment' : '6-year'}\nprint(dictionary.keys())\nprint(dictionary.values())\n                \n","8f0ac9f5":"series = data['DISTRICT']        # data['VANDALISM'] = series\nprint(type(series))\ndata_frame = data[['DISTRICT']]  # data[['VANDALISM']] = data frame\nprint(type(data_frame))","7794b122":"x = data['YEAR'] < 2017 # There are 265685 cases which occured before 17'\ndata [x]","0ab1eccf":"x = data['YEAR'] > 2015 # There are 319071 cases which occured after 15'\ndata [x]","6d1602f5":"data[np.logical_and(data['YEAR']>2015, data['YEAR']<2017 )] # There are 99114 cases which occured between 15'-17'\n\n","6eaa88fa":"data.DISTRICT[data.YEAR == 2016]","fdbd2617":"data[np.logical_and(data['YEAR'] == 2015, data['OFFENSE_DESCRIPTION'] == \"HARASSMENT\"  )] # There are 358 cases in 15'","4a7d5029":"data[np.logical_and(data['HOUR']>0, data['HOUR']<9 )] # There are 55189 cases in between 00:00 - 09:00","f82e91bc":"u = data.OFFENSE_CODE_GROUP\n","9de42b0d":"# For example lets look frequency of Offence Code Group types\ndata['OFFENSE_CODE_GROUP'].value_counts(dropna =False)\n","a2aba3ee":"sta = data.OFFENSE_CODE_GROUP.value_counts().index[:10]\nsns.barplot(x=sta,y = data.OFFENSE_CODE_GROUP.value_counts().values[:10])\nplt.rcParams['figure.figsize']=(20,20)\nplt.title('Offense Code Groups',color = 'blue',fontsize=15)\nplt.show()","511a11b1":"\np = data['OFFENSE_CODE_GROUP'].value_counts(dropna =False)\nplt.figure(figsize=(15,15))\nsns.barplot(x=p[:8].index,y=p[:8].values)\nplt.ylabel('Number of Crime')\nplt.xlabel('Crime Code Group')\nplt.title('Top 8 Crime Groups',color = 'red',fontsize=15)\nplt.show()","88b194ed":"for index,value in data[['DISTRICT']][0:10].iterrows(): #This data shows us top 10 crime districts.\n    print(index,\" : \",value)","7be7cd71":"data['DISTRICT'].value_counts().plot.pie()\n\n# Unsquish the pie.\nimport matplotlib.pyplot as plt\nplt.gca().set_aspect('equal')","902ea5da":"\ndata['DISTRICT'].value_counts(dropna =True)\n","f3a7c0de":"p = data['DISTRICT'].value_counts(dropna =True)\nplt.figure(figsize=(15,15))\nsns.barplot(x=p[:10].index,y=p[:10].values)\nplt.ylabel('# of Cases')\nplt.xlabel('District')\nplt.title('Top 10 Crime District',color = 'red',fontsize=15)\nplt.show()","39b13dea":"\n#Crime numbers for head() districts => D14 = 20127,C11 = 42530,D4 = 41915,B3 = 35442\ndata2 = data.head()\ncrime_nm = [20127,42530,41915,41915,35442]\ndata2['CRIME_RATE'] = crime_nm\ndata2.head()","b692078b":"AVE_CRIME_RATE = 319073\/9\ndata2[\"CRIME_CHANCE\"] = [\"High\" if i > AVE_CRIME_RATE else \"Low\" for i in data2.CRIME_RATE]\ndata2.loc[:5,[\"OFFENSE_CODE_GROUP\",\"DISTRICT\",\"OCCURRED_ON_DATE\",\"UCR_PART\",\"STREET\",\"Location\",\"CRIME_RATE\",\"CRIME_CHANCE\"]]","b69cb697":"plt.figure(figsize=(15,10))\nsns.barplot(x=data2['DISTRICT'], y=data2['CRIME_RATE'])\nplt.xticks(rotation= 45)\nplt.xlabel('DISTRICTS')\nplt.ylabel('CRIME_RATE')\nplt.title('CRIME RATE BY SOME DISTRICTS')\nplt.show()","c9188b61":"data[np.logical_and(data['DISTRICT'] == \"D14\", data['OFFENSE_DESCRIPTION'] == \"WARRANT ARREST\" )]# There are 250 Warrant arrest cases which occured in District D14","04efb5d8":"data['REPORTING_AREA'].value_counts(dropna =False)\n\n\n\n","8de28cb6":"x = data['STREET'] == \"DELHI ST\" # There are 97 cases which occured \u0130N DELHI ST\ndata [x]","50d6e71f":"data[np.logical_and(data['STREET'] == \"DELHI ST\", data['OFFENSE_DESCRIPTION'] == \"INVESTIGATE PERSON\" )]\n","d397e687":"data_new = data.head()\ndata_new","97747314":"melted = pd.melt(frame=data_new,id_vars = 'STREET', value_vars= ['OFFENSE_CODE_GROUP','OFFENSE_CODE'])\nmelted","67d6aac7":"melted.pivot(index = 'STREET', columns = 'variable',values='value')","4af4eccf":"data1 = data[np.logical_and(data['STREET'] == \"DELHI ST\", data['OFFENSE_DESCRIPTION'] == \"VANDALISM\" )]\ndata2 = data[np.logical_and(data['STREET'] == \"LINCOLN ST\", data['OFFENSE_DESCRIPTION'] == \"VANDALISM\" )]\n\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","2ba07db1":"data['SHOOTING'].value_counts(dropna =False).plot.pie()\n\n# Unsquish the pie.\nimport matplotlib.pyplot as plt\nplt.gca().set_aspect('equal')","c9642bbd":"x = data['SHOOTING'].value_counts(dropna =False)\nprint(x)","ba789153":"data[np.logical_and(data['SHOOTING'] == \"Y\", data['OFFENSE_CODE_GROUP'] == \"Robbery\" )]\n","e2f00fd7":"data[np.logical_and(data['SHOOTING'] == \"Y\", data['YEAR'] < 2020 )]\n","2de3a412":"data2 = data\ndatetime_object = pd.to_datetime(data.OCCURRED_ON_DATE)\ndata2[\"Date_Time\"] = datetime_object\n# lets make date as index\ndata2 = data2.set_index(\"Date_Time\")\ndata2 = data2.drop(\"OCCURRED_ON_DATE\", axis=1)\ndata2\n","19dd1676":"print(data2.loc[\"2018-09-02 13:00:00\"])\nprint(data2.loc[\"2018-09-02 13:00:00\":\"2018-09-03 20:38:00\"])\n","9abac368":"print(data2.loc[\"2017-09-02 13:00:00\":\"2018-09-03 20:38:00\"])\n","b0cc7f6f":"data.Date_Time.sort_values()","dcc57ce0":"data.index.name = \"#\"\ndata.head()","d9ddfcfc":"data1 = data.set_index([\"YEAR\",\"MONTH\"]) \ndata1","bdfa26d7":"**I turned dataframe to Time-Series DataFrame**","5a88b44f":"#If we compare two figures below,Those figures shows us which Offense code means which case for example CODE 3006 means SICK\/INJURED\/MEDICAL - PERSON ","7bacda10":"#There are 8 Investigate Person cases which occured \u0130N DELHI ST","1b5876aa":"#We can see the med of crime cases by months and it's 7 so it means there are more cases in second half of a years than first half ","83d4c22b":"#Here we can see relations between some of our column parameters.","d93c3461":"#There are Harassment Cases in 15'","99ae905e":"#Sorting by years","d61e82f3":"#Criminal activity peak is around to 16.00 - 18.00","3c7f9683":"#Here is the info and columns of our data","45dc27e1":"#Here is the first 10 raws on our data ","4363d4db":"**Shooting cases before 2020**","98ba45da":"#Crime Districts in 16'","f8cfbbfb":"#This figure shows us our datas are between June 15' to September 18' and there is at least one crime situation per month","de74b607":"**Our Shooting datas are missing so we only know at least 1019 cases with shooting **","35b7ae60":"#CALCULAT\u0130NG CR\u0130ME CHANCES BY HEAD() DISTRICTS","4eb99c74":"**This changing give me chance to sort datas by random time-intervals**","f47d6e6d":"**We define a new data and it contains first 5 rows of our data and it shows which street has which case and their offense codes**","da098f17":"**Here we can see all vandalism cases in Lincoln ST and Delhi ST**","dc86e49f":"#Here is the numbers and types of offense code groups(64 Types!)","fc4440cc":"**The robbery cases with end-up with shooting**","297b1d8f":"#Sum-Sum-Summer-Time , Summer-Time Sadness","25599cb6":"#Common Offense code intervals by every district ","be80f15b":"#For District types and numbers","4adf5b4e":"#Changing index as Year and Mouth gives us the figure above ","ba9f4a65":"**This changing give me chance to sort datas by using dates**","9e57010d":"**We sort our data by Date and Time **"}}