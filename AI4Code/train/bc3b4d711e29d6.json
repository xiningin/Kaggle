{"cell_type":{"f8f920af":"code","515306cf":"code","6e9166bc":"code","624f3c82":"code","30783552":"code","ae84589c":"code","f9641bdf":"code","fb2ddac6":"code","128e0280":"code","1f8174e3":"code","cc3f243b":"code","d6ddd406":"code","46b8d440":"code","d6f396de":"code","f559eea5":"code","2f57a556":"code","4bdd1018":"code","d199e028":"code","836b676f":"code","269a127e":"code","4e4aab7f":"code","76d6cb99":"code","8a4f636a":"code","1ac3e077":"code","9e8646a0":"code","b0ad1894":"code","adb7da46":"code","e7cd7567":"code","02ee5d3b":"code","8d103dd0":"code","14390735":"code","2a1dd46d":"code","4e072b39":"code","eb6dc833":"code","3549befb":"code","58124f6c":"code","8b304a83":"code","fd8fa0f7":"code","ba89fef6":"code","14960108":"code","8ada4445":"code","8c89b8a8":"code","653bc921":"code","c9db1dee":"code","93fc7a2e":"code","931527aa":"code","e3e92932":"code","2726e73f":"code","a8b4775a":"code","734ee432":"code","45f78921":"code","9959caf6":"code","f92db610":"code","13132feb":"code","14e44e48":"code","e1504f2b":"code","7a7f98bf":"code","71a86a47":"code","14b2c5f1":"markdown","867ba205":"markdown","7fa84849":"markdown","fd04e57b":"markdown","31bbba40":"markdown","0344f291":"markdown","b3dfa9b6":"markdown","61b310c0":"markdown","130d1910":"markdown","4b63d034":"markdown","a08066c0":"markdown","f0e40024":"markdown","83ae630c":"markdown","4a100a4d":"markdown","85aea27e":"markdown","20345f26":"markdown","03fdee33":"markdown","646ea53f":"markdown","745526b3":"markdown","5666498f":"markdown","a9807bf4":"markdown","5d48c437":"markdown","25485c39":"markdown","ebdc760b":"markdown","ce9b509b":"markdown","64457350":"markdown","1a7db77a":"markdown","92f60481":"markdown","770ea9db":"markdown","cc2a16a0":"markdown","cab96961":"markdown"},"source":{"f8f920af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom collections import Counter\nfrom scipy import stats\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","515306cf":"df_train=pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\ndf_train_nonscored=pd.read_csv(\"..\/input\/lish-moa\/train_targets_nonscored.csv\")\ntrain_features=pd.read_csv(\"..\/input\/lish-moa\/train_features.csv\")\ntest_features=pd.read_csv(\"..\/input\/lish-moa\/test_features.csv\")","6e9166bc":"df_train.shape,df_train_nonscored.shape,train_features.shape,test_features.shape","624f3c82":"train_features.head()","30783552":"train_features['cp_type'].value_counts()","ae84589c":"train_features['cp_time'].value_counts()","f9641bdf":"train_features['cp_dose'].value_counts()","fb2ddac6":"## Map the categorical features,\n\ntrain_features['cp_type']=train_features['cp_type'].map({'trt_cp':'0','ctl_vehicle':'1'})\ntrain_features['cp_time']=train_features['cp_time'].map({48:'0',72:'1',24:'2'})\ntrain_features['cp_dose']=train_features['cp_dose'].map({'D1':'0','D2':'1'})","128e0280":"gene_expressions=train_features.columns.str.startswith('g-')\nsum(gene_expressions)","1f8174e3":"plt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\nsns.distplot(train_features.loc[:,gene_expressions].median())\nplt.title(\"Distribution of Gene Expression - Plot of Median\",fontsize=16)\nplt.xlabel(\"Median of gene expression\",fontsize=8)\nplt.subplot(2,2,2)\nsns.distplot(train_features.loc[:,gene_expressions].max())\nplt.title(\"Distribution of Gene Expression - Plot of Max\",fontsize=16)\nplt.xlabel(\"Max of gene expression\",fontsize=8)\nplt.subplot(2,2,3)\nsns.distplot(train_features.loc[:,gene_expressions].min())\nplt.title(\"Distribution of Gene Expression - Plot of Min\",fontsize=16)\nplt.xlabel(\"Min of gene expression\",fontsize=8)\nplt.subplot(2,2,4)\nsns.distplot(train_features.loc[:,gene_expressions].std())\nplt.title(\"Distribution of Gene Expression - Plot of std\",fontsize=16)\nplt.xlabel(\"Std of gene expression\",fontsize=8)","cc3f243b":"##Reference -Chris Delotte's kernel.\nplt.figure(figsize=(15,15))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_features.iloc[:,i+4])\n    plt.title(train_features.columns[i+4])\n    plt.xlabel('')\n\nplt.subplots_adjust(hspace=0.4)\nplt.show()\n\n","d6ddd406":"train_dur_48=train_features[train_features['cp_time']=='0']\nfig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_48.iloc[:,i+4])\n    plt.title(train_dur_48.columns[i+4])\nfig.suptitle(\"For treatment duration 48 hrs Gene expression features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","46b8d440":"train_dur_72=train_features[train_features['cp_time']=='1']\nfig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_72.iloc[:,i+4])\n    plt.title(train_dur_72.columns[i+4])\nfig.suptitle(\"For treatment duration 72 hrs gene expression features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","d6f396de":"train_dur_24=train_features[train_features['cp_time']=='2']\nfig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_24.iloc[:,i+4])\n    plt.title(train_dur_24.columns[i+4])\nfig.suptitle(\"For treatment duration 24 hrs gene expression features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","f559eea5":"cell_viability=train_features.columns.str.startswith('c-')\nsum(cell_viability)","2f57a556":"plt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\nsns.distplot(train_features.loc[:,cell_viability].median())\nplt.title(\"Distribution of Cell Viability - Plot of Median\",fontsize=16)\nplt.xlabel(\"Median of Cell Viability\",fontsize=8)\nplt.subplot(2,2,2)\nsns.distplot(train_features.loc[:,cell_viability].max())\nplt.title(\"Distribution of Cell Viability - Plot of Max\",fontsize=16)\nplt.xlabel(\"Max of Cell Viability\",fontsize=8)\n#plt.subplot(2,2,3)\n# sns.distplot(train_features.loc[:,cell_viability].min())\n# plt.title(\"Distribution of Cell Viability - Plot of Min\",fontsize=16)\n# plt.xlabel(\"Min of Cell Viability\",fontsize=8)\nplt.subplot(2,2,3)\nsns.distplot(train_features.loc[:,cell_viability].std())\nplt.title(\"Distribution of Cell Viability - Plot of std\",fontsize=16)\nplt.xlabel(\"Std of Cell Viability\",fontsize=8)","4bdd1018":"train_features.loc[:,cell_viability].min().value_counts()","d199e028":"##Reference -Chris Delotte's kernel.\nplt.figure(figsize=(15,15))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_features.iloc[:,i+776])\n    plt.title(train_features.columns[i+776])\n\nplt.subplots_adjust(hspace=0.4)\nplt.show()","836b676f":"fig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_48.iloc[:,i+776])\n    plt.title(train_dur_48.columns[i+776])\nfig.suptitle(\"For treatment duration 48 hrs Cell Viability features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","269a127e":"fig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_72.iloc[:,i+776])\n    plt.title(train_dur_72.columns[i+776])\nfig.suptitle(\"For treatment duration 72 hrs Cell Viability features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","4e4aab7f":"fig=plt.figure(figsize=(10,10))\nplt.subplot(3,3,9)\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    sns.distplot(train_dur_24.iloc[:,i+776])\n    plt.title(train_dur_24.columns[i+776])\nfig.suptitle(\"For treatment duration 24 hrs Cell Viability features\")\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show()","76d6cb99":"feats=[col for col in train_features.columns if col not in ['sig_id']]\nlen(feats)","8a4f636a":"##Correlation between the features:\n#Reference https:\/\/www.kaggle.com\/senkin13\/eda-starter#Feature-Correlation\ncorrelations=train_features[feats].corr().abs().unstack().sort_values(kind='quicksort').reset_index()\ncorrelations=correlations[correlations['level_0']!=correlations['level_1']]\ncorrelations.head(10)","1ac3e077":"correlations.tail(10)","9e8646a0":"df_train.head()","b0ad1894":"target_sums=df_train.iloc[:,1:].sum(axis=0)","adb7da46":"## Agents class names,\nprint('Total Agent classes',len(target_sums.loc[target_sums.index.str.contains('_agent')]))\nprint('Agent class names & total active MOA for each class')\nprint(target_sums.loc[target_sums.index.str.contains('_agent')])","e7cd7567":"## Receptors class names,\nprint('Total Receptors',len(target_sums.loc[target_sums.index.str.contains('_agonist')])+len(target_sums.loc[target_sums.index.str.contains('_antagonist')]))\n# print('Agonist class names & total active MOA for each class')\n# print(target_sums.loc[target_sums.index.str.contains('_agonist')])\n# print('Antagonist class names & total active MOA for each class')\n# print(target_sums.loc[target_sums.index.str.contains('_antagonist')])","02ee5d3b":"## Enzymes class names,\nprint('Total Enzymes class names',len(target_sums.loc[target_sums.index.str.contains('_inhibitor')])+len(target_sums.loc[target_sums.index.str.contains('_activator')])+len(target_sums.loc[target_sums.index.str.contains('_blocker')]))","8d103dd0":"# print('Inhibitor class names & total active MOA for each class')\n# print(target_sums.loc[target_sums.index.str.contains('_inhibitor')])\n# print('Activator class names & total active MOA for each class')\n# print(target_sums.loc[target_sums.index.str.contains('_activator')])\n# print('Blocker class names & total active MOA for each class')\n# print(target_sums.loc[target_sums.index.str.contains('_blocker')])","14390735":"#Other class names,\nprint(\"Total Other class names\",len(target_sums.loc[~((target_sums.index.str.contains('_agent')) | \n                  (target_sums.index.str.contains('_inhibitor')) |\n                  (target_sums.index.str.contains('_agonist')) | \n                  (target_sums.index.str.contains('_antagonist') | \n                   (target_sums.index.str.contains('_activator') |\n                    (target_sums.index.str.contains('_blocker')))))]))\nprint(target_sums.loc[~((target_sums.index.str.contains('_agent')) | \n                  (target_sums.index.str.contains('_inhibitor')) |\n                  (target_sums.index.str.contains('_agonist')) | \n                  (target_sums.index.str.contains('_antagonist') | \n                   (target_sums.index.str.contains('_activator') |\n                    (target_sums.index.str.contains('_blocker')))))])","2a1dd46d":"print(f'''Percentage of inhibitors present {(target_sums[target_sums.index.str.contains('_inhibitor')].count()\/206)*100:.2f} %''')\nprint(f'''Percentage of antagonist present {(target_sums[target_sums.index.str.contains('_antagonist')].count()\/206)*100:.2f} %''')\nprint(f'''Percentage of agonist present {(target_sums[target_sums.index.str.contains('_agonist')].count()\/206)*100:.2f} %''')","4e072b39":"#Counter([i[-1] for i in target_sums.index.str.split(\"_\")])","eb6dc833":"df_train.loc[:,target_sums.sort_values(ascending=False).head(5).index].sum(axis=0)","3549befb":"df_train.loc[:,target_sums.sort_values(ascending=False).tail(5).index].sum(axis=0)","58124f6c":"df_train.loc[:,target_sums.sort_values(ascending=False).tail(10).index].sum(axis=0)","8b304a83":"plt.figure(figsize=(8,8))\nsns.countplot(df_train.iloc[:,1:].sum(axis=1))\nplt.title(\"Distribution of Multi-labels in target\",fontsize=16)\nplt.xlabel(\"Label Count\",fontsize=8)","fd8fa0f7":"target_stat=df_train.iloc[:,1:].sum(axis=1).reset_index(drop=True)\n(target_stat.value_counts()\/target_stat.shape[0])*100","ba89fef6":"target_stat.value_counts()","14960108":"single_moa=df_train.loc[(df_train.iloc[:,1:].sum(axis=1))==1]","8ada4445":"(single_moa.iloc[:,1:].idxmax(axis=1).value_counts()\/12532)*100","8c89b8a8":"len(df_train.loc[(df_train.iloc[:,1:].sum(axis=1))==1])","653bc921":"df_train_nonscored.head()","c9db1dee":"plt.figure(figsize=(8,8))\nsns.countplot(df_train_nonscored.iloc[:,1:].sum(axis=1))\nplt.title(\"Distribution of Multi-labels in target(in Non Scored Data)\",fontsize=16)\nplt.xlabel(\"Label Count\",fontsize=8)","93fc7a2e":"target_nonsco_stat=df_train_nonscored.iloc[:,1:].sum(axis=1).reset_index(drop=True)\n(target_nonsco_stat.value_counts()\/target_nonsco_stat.shape[0])*100","931527aa":"set(df_train_nonscored['sig_id'])-set(df_train['sig_id'])","e3e92932":"len(set(df_train_nonscored.columns)-set(df_train.columns))","2726e73f":"target_sum_nonscored=df_train_nonscored.iloc[:,1:].sum(axis=0)","a8b4775a":"set([i[-1] for i in  target_sum_nonscored.index.str.split('_')])","734ee432":"from sklearn import metrics\nfrom scipy.spatial.distance import cdist\nfrom sklearn.cluster import KMeans\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import DBSCAN","45f78921":"gene_expression=train_features.loc[:,train_features.columns.str.contains('g-')]","9959caf6":"# distortions = []\n# K = range(2, 50)\n# for k in K:\n#     k_means = KMeans(n_clusters=k, random_state=42).fit(gene_expression)\n#     k_means.fit(gene_expression)\n#     distortions.append(sum(np.min(cdist(gene_expression, k_means.cluster_centers_, 'euclidean'), axis=1)) \/ gene_expression.shape[0])","f92db610":"# X_line = [K[0], K[-1]]\n# Y_line = [distortions[0], distortions[-1]]\n\n# # Plot the elbow\n# plt.plot(K, distortions, 'b-')\n# plt.plot(X_line, Y_line, 'r')\n# plt.xlabel('k')\n# plt.ylabel('Distortion')\n# plt.title('The Elbow Method showing the optimal k')\n# plt.show()","13132feb":"k=9\nk_means=KMeans(n_clusters=k,random_state=42)\nclust=k_means.fit_transform(gene_expression)","14e44e48":"train_feat_cluster=train_features.copy()\ntrain_feat_cluster['cluster']=k_means.labels_","e1504f2b":"train_feat_cluster['cluster'].value_counts()","7a7f98bf":"## Visualizing the clusters:\ntsne=TSNE(n_components=2,verbose=1,perplexity=100,random_state=42)\ntrain_feat_embedded=tsne.fit_transform(gene_expression.values)","71a86a47":"plt.figure(figsize=(10,10))\npalette=sns.hls_palette(9,l=0.5,s=0.6)\nsns.scatterplot(train_feat_embedded[:,0],train_feat_embedded[:,1],hue=train_feat_cluster['cluster'],palette=palette)\nplt.title(\"t-SNE with cluster\",fontsize=10)\nplt.xlabel('x',fontsize=8)\nplt.ylabel('y',fontsize=8)\n","14b2c5f1":"All 402 target classes present in the non-scored data is different.","867ba205":"This is the dosage of the drug.-High or low.It is not very clear as to which one is high or which one is low.","7fa84849":"The sig_id is same between nonscored and scored dataset.Lets check the columns.","fd04e57b":"This data provides the class labels we need to predict.Lets check for which target classes are there most active MOA's.Before that lets inspect the column names based on the input from [Andrea Zaliani](https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda\/comments)'s comments in Head's or Tails kernel.","31bbba40":"772 gene expression features and 100 cell viability features.","0344f291":"trt_cp -Compound treatment - A compound treatment study design type is where the response to administration of a compound or chemical (including biological compounds such as hormones) is assayed.\n\nctl_vehicle - control perturbation . This does not have MOA's.","b3dfa9b6":"The cell viability has a left tailed distribution.Except for c7,the plot shows a peak near -10 for all the plotted viability columns.\n\nLets plot it for different treatment duration and check their distribution.","61b310c0":"g-1,g-2 & g-6 range decreases during durations 72 & 24 hrs.","130d1910":"In this kernel,I have done a basic exploratory data analysis of the MOA datasets.In most of the sections,I have borrowed ideas from [Head's or Tails EDA](https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda) kernel and tried to reproduce the same in python.\n\n#### Whats different ?\n* Tried to deep dive into the target column names.\n* Done clustering,t-SNE of gene expressions to identify if there is any pattern.\n\nIf there is any mistake in any of my interpretation,pls let me know in the comments section.Thanks.\n","4b63d034":"For the purpose of visualizing the clusters,let us apply t-SNE and check the plot.","a08066c0":"Observing the plots of the duration for the first 8 cell viability features,it is seen that though there is not much difference between duraations 48 vs 72 ,for 24 hours ,the peak at around -10 is missing except for c-6.","f0e40024":"The range of gene expression for each feature is different.It appears that the gene expressions g-0,g-3,g-4 are right tailed.","83ae630c":"Now that we have checked on the class names,lets see which classes have most and least active MOA.","4a100a4d":"#### References\n\n1.https:\/\/mlexplained.com\/2018\/09\/14\/paper-dissected-visualizing-data-using-t-sne-explained\/\n\n2.https:\/\/www.kaggle.com\/maksimeren\/covid-19-literature-clustering\/\n\n3.https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda\/\n\n4.https:\/\/www.kaggle.com\/cdeotte\/support-vector-machine-0-925","85aea27e":"39 % of the sig_ids do not have any MOA's whereas 52 % have 1 MOA.Less than 0.5 % of the sig_ids have more than 4 MOA's.","20345f26":"#### To do:\n* The above cluster info could be used as a feature in our original dataset along with the other features and see if there is any improvement in scores.\n\n* Use the clusters to check if we are able to differentiate between the class names as mentioned by [Andrea Zaliani](https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda\/comments).","03fdee33":"Class names can be receptors or enzymes both are proteins.\n \n* Receptors - Targets lying on the surface.They can be modulated positively by agonists and negatively by antagonists.\n\n* Enzymes - Targets lying within the cells.They can be modulated positively by activators and negatively by inhibitors or blockers.\n\n* Agents - Modulators.\n","646ea53f":"Receptor class names,","745526b3":"* Cell viability min value is around -10  for almost all of the cell viability columns.\n* Max values are between 3 to 4.It is multimodal.\n* Standard deviation peaks at 2.\n* From the above stats,we can understand that each individual cell viabilities if plotted could form a bell shaped curve.Lets take few random cell viability columns and plot the same.","5666498f":"In the non-scored dataset,we have 80 % of sig-ids which are not scored whereas 18 % have one MOA.Unlike the target dataset,this one is more sparse.\n\nLets check whether the sig_ids present are different from the train dataset or we have a case where they are same.","a9807bf4":"There are three treatment durations - 24 hrs,48 hrs and 72 hrs.","5d48c437":"**Work in progress**","25485c39":"There is a small difference between my results and Head's or Tails.A closer look at this will reveal that there are many target classes with activations of 6 and hence the classes in Head's or Tails kernel match with my results.\n\nIt is seen from the top and bottom frequency target classes that most of them are inhibitor,agonist,antagonist.Lets do a quick check of what percentage of these class names are common.","ebdc760b":"Here g-* signifies gene expression data and c-* signifies cell viability.\n\ngene expression - Gene expression is the process by which the information encoded in a gene is used to direct the assembly of a protein molecule. The cell reads the sequence of the gene in groups of three bases.\n\ncell viability- Cell viability is a measure of the proportion of live, healthy cells within a population. Cell viability assays are used to determine the overall health of cells, optimize culture or experimental conditions, and to measure cell survival following treatment with compounds, such as during a drug screen.\n","ce9b509b":"In the comments section of Heads or Tails kernel,Andreas suggests to cluster the gene expression data to check whether they are able distinguish between the target classes - agonist\/enzymes and agents.Lets attempt to do and check the results.","64457350":"Here are my interpretations,\n* There is a non-linear separation boundary between each clusters.K-means and t-SNE seem to agree on the points used for separation though there are a few points where the clusters are different.\n* Cluster 2 & 3 form a large portion of the gene expression data.\n\n","1a7db77a":"Agent class names,","92f60481":"### Exploring the class names ","770ea9db":"### Non scored train dataset","cc2a16a0":"Lets choose arbitary cluster value of 9 for the sake of simplicity and run k-means.","cab96961":"Lets check how many target classes are active at once."}}