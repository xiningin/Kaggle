{"cell_type":{"7a711174":"code","f277645a":"code","7f0e17e7":"code","1ceda4ef":"code","6a26cb8d":"code","b7ef5877":"code","db771c1e":"code","c766da85":"code","47f0df5c":"code","e3fc5ef5":"code","0b92165d":"code","63402802":"code","c23f2342":"code","e706d1ee":"code","93a36e35":"code","3aa38946":"code","1167bcb3":"code","90b8d611":"code","2e682459":"code","69150e1a":"code","238bc882":"code","0fe8d6f5":"code","0a558270":"code","a803ccdc":"code","958feda4":"code","de91901d":"code","a023327d":"code","1fdad6ff":"code","800c4053":"code","c3925928":"code","13e8f147":"code","b1dcc201":"code","509a8ea2":"code","8143cf25":"code","f4b85d3c":"code","6f89f518":"code","fb1b1dc0":"code","fd30aee0":"code","184a0d9a":"code","8aa2fab3":"code","4d004d0f":"code","0a8dd651":"code","bbcdd45c":"code","5994c93d":"code","4751fdc3":"code","f2ea613a":"code","64bcd679":"code","b660d51c":"code","ca1864c0":"code","37032b9c":"code","2050f6a0":"code","c75b61e5":"code","b15ae5f0":"code","255b487b":"code","f9b6ecb6":"code","31c8eb1d":"code","df20336f":"code","1d0e3576":"code","7bc1639e":"code","612c04c2":"code","f2d7935b":"code","ce5b9a47":"code","45b6abda":"code","b23be3e7":"code","aabf33db":"code","804dcddf":"code","bace99e6":"code","5ec68a00":"code","74dee54c":"code","40683a8e":"code","20ee1885":"code","9a329641":"code","7e97a2fc":"code","3e63f86a":"code","afbf5288":"code","084b8066":"code","9db46a75":"code","264bae98":"code","a66d5812":"code","84ec87ff":"code","d73408ba":"code","cdf610dc":"code","41736229":"code","35a8d24b":"code","291feed2":"code","79e5ab71":"code","6de18014":"code","70de5e3a":"code","515bd075":"code","4e600fe2":"code","2932c31d":"code","edf6ac49":"code","9d15838d":"code","bf606a60":"code","c6c95d4b":"code","1438ad86":"code","2d08c9cf":"code","d1c915cd":"code","f225411e":"code","64a19c52":"code","0a9add31":"code","f9830609":"code","46265f5e":"code","6d50ecc7":"code","06ebc711":"code","a0f58052":"code","607ca7d8":"code","f3d47396":"code","d6e690e5":"code","a6c947d0":"code","b50b776f":"code","91f7da5f":"code","b806ab90":"code","786b9ba5":"code","b106ce2c":"code","473f6f74":"code","eea60131":"code","c6d4e833":"code","0362be0c":"code","b0666416":"code","89b43169":"code","8bec7151":"code","af50d5cb":"code","19e1cdd0":"code","a9963322":"code","c99d0ff5":"code","9a8955a7":"code","1e5219df":"code","f8ef3769":"code","aca2069d":"code","b6525376":"code","4068c71b":"code","65840e5b":"code","2dd27afb":"code","eb6b7489":"code","d15aeb5d":"code","4bd9e7a9":"markdown","f39cf120":"markdown","b257de05":"markdown","e68c75e5":"markdown","a1f39a2a":"markdown","874f3fb2":"markdown","a0ecedc0":"markdown","2635cfe0":"markdown","bf3dd683":"markdown","9402d4f1":"markdown","aa349ac1":"markdown","d6b013a8":"markdown","dc1137a2":"markdown","d58d1ccc":"markdown","e591873a":"markdown","fbae81f8":"markdown"},"source":{"7a711174":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom collections import Counter\nfrom scipy.stats.stats import skew\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom scipy.special import boxcox1p\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import Ridge, ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, VotingRegressor\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\nimport warnings\nsns.set(style = 'white', palette = 'deep')\nwarnings.filterwarnings(action='ignore')\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","f277645a":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","7f0e17e7":"test.shape","1ceda4ef":"train.describe()","6a26cb8d":"test.describe()","b7ef5877":"train.describe(include = ['O'])","db771c1e":"test.describe(include = ['O'])","c766da85":"g = sns.distplot(train['SalePrice'], label = 'Skewness : %.2f'%(train['SalePrice'].skew()))\ng = g.legend(loc = 'best')","47f0df5c":"temp_train = train.copy()\ntemp_train.drop(columns = 'Id', inplace = True)\ntrain_object_cols = temp_train.dtypes[temp_train.dtypes == 'O'].index\n\nfor col in train_object_cols:\n    lbl = LabelEncoder() \n    temp_train[col] = lbl.fit_transform(list(temp_train[col].values)) \n\ntemp_train.head()","e3fc5ef5":"temp_train_cols = temp_train.columns[:] \ntemp_train_cor = abs(temp_train[temp_train_cols].corr(method = 'spearman'))\ntemp_train_cor = pd.DataFrame(temp_train_cor['SalePrice']).sort_values('SalePrice', ascending = False)\ntemp_train_cor.columns = ['corr']\n\ntemp_train_cor_high = temp_train_cor[temp_train_cor['corr'] >= 0.5]\ntemp_train_cor_mid = temp_train_cor[(temp_train_cor['corr'] >= 0.3) & (temp_train_cor['corr'] < 0.5)]\n# print(temp_train_cor[1:])\n\nfig, ax2 = plt.subplots()\nax1 = ax2.twinx()\nsns.barplot(ax = ax1, data = temp_train_cor_high[1:], x = 'corr', y = temp_train_cor_high[1:].index)\nsns.barplot(ax = ax2, data = temp_train_cor_mid, x = 'corr', y = temp_train_cor_mid.index)\nax2.set_zorder(ax1.get_zorder() + 10)\nax2.patch.set_visible(False)","0b92165d":"sns.boxplot(x = 'GarageCars', y = 'SalePrice', data = train)","63402802":"temp = train[train['GarageCars'] == 4]","c23f2342":"sns.lmplot(x = 'YearBuilt', y = 'SalePrice', data = train, hue = 'GarageCars', col = 'GarageCars')","e706d1ee":"sns.boxplot(x = 'BldgType', y = 'YearBuilt', data = train)","93a36e35":"sns.regplot(x = 'GarageArea', y = 'SalePrice', lowess = True, data = train,\n            line_kws={'color': 'blue'}, scatter_kws={'color': 'grey'})","3aa38946":"ga_1200 = train[(train['GarageArea'] >= 1200) & (train['SalePrice'] <= 300000)]\nga_1200","1167bcb3":"ga_1200['Neighborhood']","90b8d611":"sns.boxplot(y = 'Neighborhood', x = 'SalePrice', data = train)","2e682459":"sns.regplot(x = 'GrLivArea', y = 'SalePrice', lowess = True, data = train,\n            line_kws={'color': 'blue'}, scatter_kws={'color': 'grey'})","69150e1a":"train[(train['GrLivArea'] >= 4000) & (train['SalePrice'] <= 300000)][['Neighborhood']]","238bc882":"sns.regplot(x = 'LotArea', y = 'SalePrice', lowess = True, data = train,\n            line_kws={'color': 'blue'}, scatter_kws={'color': 'grey'})","0fe8d6f5":"train[train['LotArea'] >= 100000][['LotArea', 'GrLivArea','MSZoning','TotalBsmtSF', 'GarageArea', 'YearBuilt', 'Neighborhood','SalePrice']]","0a558270":"sns.regplot(x = 'YearBuilt', y = 'SalePrice', lowess = True, data = train,\n            line_kws={'color': 'blue'}, scatter_kws={'color': 'grey'})","a803ccdc":"sns.regplot(x = 'TotalBsmtSF', y = 'SalePrice', lowess = True, data = train,\n            line_kws={'color': 'red'}, scatter_kws={'color': 'grey'})","958feda4":"test.loc[1132][['GarageYrBlt']]","de91901d":"test.loc[1132, 'GarageYrBlt'] = 2007","a023327d":"y_train = train['SalePrice']\ntest_ID = test['Id']\n\ntrain.drop(columns = ['Id', 'SalePrice'], inplace = True)\ntest.drop(columns = 'Id', inplace = True)\n\ndataset = pd.concat(objs = [train, test], axis = 0).reset_index(drop = True)\ndataset = dataset.fillna(np.nan)","1fdad6ff":"na_value_counts = dataset.isnull().sum()\nna_value_counts.drop(na_value_counts[na_value_counts == 0].index, inplace = True)\nna_value_ratio = round((dataset.isnull().sum()\/len(dataset)) * 100, 2)\nna_value_ratio.drop(na_value_ratio[na_value_ratio == 0].index, inplace = True)\nna_df = pd.concat(objs = [na_value_counts, na_value_ratio], axis = 1)\nna_df.columns = ['counts', 'ratio']\nna_df.sort_values(by = ['ratio'], axis = 0, ascending = False, inplace = True)","800c4053":"plt.figure(figsize = (15,5))\nsns.barplot(x = na_df.index, y = na_df['ratio'], data = na_df)\nplt.xticks(rotation=45)\nplt.xlabel('Features')\nplt.ylabel('% of Missing Data')\nplt.show()","c3925928":"temp_dataset = dataset.copy()\ndataset_object_cols = temp_dataset.dtypes[temp_dataset.dtypes == 'O'].index\n\nfor col in dataset_object_cols:\n    lbl = LabelEncoder() \n    temp_dataset[col] = lbl.fit_transform(list(temp_dataset[col].values)) \n    \ntemp_dataset_cor = temp_dataset.corr(method = 'spearman')","13e8f147":"garageType_na = dataset['GarageType'].isnull()\ngarageFinish_na = dataset['GarageFinish'].isnull()\ngarageQual_na = dataset['GarageQual'].isnull()\ngarageCond_na = dataset['GarageCond'].isnull()\ngarageYrBlt_na = (dataset['GarageYrBlt'].isnull()) | (dataset['GarageYrBlt'] == 0)\ngarageCars_na = (dataset['GarageCars'].isnull()) | (dataset['GarageCars'] == 0)\ngarageArea_na = (dataset['GarageArea'].isnull()) | (dataset['GarageArea'] == 0)\n\ngarage_na = list(dataset[garageType_na & garageFinish_na & garageQual_na & \\\n                         garageCond_na & garageYrBlt_na & garageCars_na & garageArea_na].index)\n\nfor i in garage_na :\n    for object_col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond') :\n        dataset.at[i, object_col] = 'None'\n    for numeric_col in ('GarageYrBlt', 'GarageCars', 'GarageArea') :\n        dataset.at[i, numeric_col] = 0","b1dcc201":"garageType_na = dataset['GarageType'].isnull()\ngarageFinish_na = dataset['GarageFinish'].isnull()\ngarageQual_na = dataset['GarageQual'].isnull()\ngarageCond_na = dataset['GarageCond'].isnull()\ngarageYrBlt_na = dataset['GarageYrBlt'].isnull()\ngarageCars_na = dataset['GarageCars'].isnull()\ngarageArea_na = dataset['GarageArea'].isnull()\n\ngarage_na = list(dataset[garageType_na | garageFinish_na | garageQual_na | \\\n                         garageCond_na | garageYrBlt_na | garageCars_na | garageArea_na].index)\n\ndataset.iloc[garage_na][['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageYrBlt', 'GarageCars', 'GarageArea']]","509a8ea2":"dataset.loc[2576, 'GarageType'] = 'None'\ndataset.loc[2576, 'GarageFinish'] = 'None'\ndataset.loc[2576, 'GarageQual'] = 'None'\ndataset.loc[2576, 'GarageCond'] = 'None'\ndataset.loc[2576, 'GarageYrBlt'] = 0\ndataset.loc[2576, 'GarageCars'] = 0\ndataset.loc[2576, 'GarageArea'] = 0","8143cf25":"garageYrBlt_corr = pd.DataFrame(data = temp_dataset_cor['GarageYrBlt'])\ngarageYrBlt_corr.columns = ['corr']\ngarageYrBlt_corr.sort_values(by = 'corr',ascending = False, inplace = True)\ngarageYrBlt_corr[abs(garageYrBlt_corr['corr']) >= 0.6][1:]","f4b85d3c":"dataset[(dataset['GarageYrBlt'].notnull()) & (dataset['YearBuilt'] == 1910) & (dataset['Functional'] == 'Typ') & (dataset['ExterQual'] >= 'TA') & (dataset['YearRemodAdd'] >= 1970) & (dataset['YearRemodAdd'] <= 1990)][['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageYrBlt', 'GarageCars', 'GarageArea']]\n\ndataset.loc[2126, 'GarageYrBlt'] = round(dataset[(dataset['GarageYrBlt'].notnull()) & (dataset['YearBuilt'] == 1910) & (dataset['Functional'] == 'Typ') & (dataset['YearRemodAdd'] >= 1970) & (dataset['YearRemodAdd'] <= 1990)]['GarageYrBlt'].mean())","6f89f518":"garageFinish_corr = pd.DataFrame(data = temp_dataset_cor['GarageFinish'])\ngarageFinish_corr.columns = ['corr']\ngarageFinish_corr.sort_values(by = 'corr',ascending = False, inplace = True)\ngarageFinish_corr[abs(garageFinish_corr['corr']) >= 0.5][1:]","fb1b1dc0":"dataset[(dataset['GarageFinish'].notnull()) & (dataset['YearBuilt'] == 1910) & (dataset['GarageType'] == 'Detchd') & (dataset['GarageYrBlt'] >= 1962) & (dataset['GarageYrBlt'] <= 1982) & (dataset['OverallQual'] == 6)][['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageYrBlt', 'GarageCars', 'GarageArea']]\ndataset.loc[2126, 'GarageFinish'] = 'Unf'","fd30aee0":"garageQual_corr = pd.DataFrame(data = temp_dataset_cor['GarageQual'])\ngarageQual_corr.columns = ['corr']\ngarageQual_corr.sort_values(by = 'corr',ascending = False, inplace = True)\ngarageQual_corr[abs(garageQual_corr['corr']) >= 0.5][1:]","184a0d9a":"fig = plt.figure()\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2)\n\nsns.countplot(x = 'GarageQual', data = dataset, ax = ax1)\nsns.countplot(x = 'GarageCond', data = dataset, ax = ax2)\nfig.tight_layout()         \n\ndataset.loc[2126, 'GarageQual'] = 'TA'\ndataset.loc[2126, 'GarageCond'] = 'TA'","8aa2fab3":"bsmtQual_na = dataset['BsmtQual'].isnull()\nbsmtCond_na = dataset['BsmtCond'].isnull()\nbsmtExposure_na = dataset['BsmtExposure'].isnull()\nbsmtFinType1_na = dataset['BsmtFinType1'].isnull()\nbsmtFinType2_na = dataset['BsmtFinType2'].isnull()\n\nbsmtFinSF1_na = (dataset['BsmtFinSF1'].isnull()) | (dataset['BsmtFinSF1'] == 0)\nbsmtFinSF2_na = (dataset['BsmtFinSF2'].isnull()) | (dataset['BsmtFinSF2'] == 0)\nbsmtUnfSF_na = (dataset['BsmtUnfSF'].isnull()) | (dataset['BsmtUnfSF'] == 0)\ntotalBsmtSF_na = (dataset['TotalBsmtSF'].isnull()) | (dataset['TotalBsmtSF'] == 0)\n\nbsmt_na = list(dataset[bsmtQual_na & bsmtCond_na & bsmtExposure_na & \\\n                         bsmtFinType1_na & bsmtFinType2_na & bsmtFinSF1_na & \\\n                         bsmtFinSF2_na & bsmtUnfSF_na & totalBsmtSF_na].index)\n\nfor i in bsmt_na :\n    for object_col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \\\n                       'BsmtFinType2') :\n        dataset.at[i, object_col] = 'None'\n    for numeric_col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF') :\n        dataset.at[i, numeric_col] = 0","4d004d0f":"bsmt_na_Bath = dataset[(dataset['BsmtQual'] == 'None') & (dataset['BsmtFullBath'].isnull()) & (dataset['BsmtHalfBath'].isnull())].index\n\ndataset.at[bsmt_na_Bath, 'BsmtFullBath'] = 0\ndataset.at[bsmt_na_Bath, 'BsmtHalfBath'] = 0","0a8dd651":"bsmtQual_na = dataset['BsmtQual'].isnull()\nbsmtCond_na = dataset['BsmtCond'].isnull()\nbsmtExposure_na = dataset['BsmtExposure'].isnull()\nbsmtFinType1_na = dataset['BsmtFinType1'].isnull()\nbsmtFinType2_na = dataset['BsmtFinType2'].isnull()\nbsmtFinSF1_na = dataset['BsmtFinSF1'].isnull()\nbsmtFinSF2_na = dataset['BsmtFinSF2'].isnull()\nbsmtUnfSF_na = dataset['BsmtUnfSF'].isnull()\ntotalBsmtSF_na = dataset['TotalBsmtSF'].isnull()\n\nbsmt_na = list(dataset[bsmtQual_na | bsmtCond_na | bsmtExposure_na | \\\n                         bsmtFinType1_na | bsmtFinType2_na | bsmtFinSF1_na | \\\n                         bsmtFinSF2_na | bsmtUnfSF_na | totalBsmtSF_na].index)\n\ndataset.iloc[bsmt_na][['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \\\n                       'BsmtFinType2', 'BsmtFinSF1', 'BsmtFinSF2', \\\n                       'BsmtUnfSF', 'TotalBsmtSF']]","bbcdd45c":"bsmtQual_corr = pd.DataFrame(data = temp_dataset_cor['BsmtQual'])\nbsmtQual_corr.columns = ['corr']\nbsmtQual_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nbsmtQual_corr[abs(bsmtQual_corr['corr']) >= 0.4][1:]","5994c93d":"dataset[dataset['BsmtQual'].isnull()][['YearBuilt', 'OverallQual', 'ExterQual' , 'YearRemodAdd']]","4751fdc3":"grouped_BQ = dataset[(dataset['BsmtQual'].notnull()) & (dataset['YearBuilt'] >= 1890) \\\n        & (dataset['YearBuilt'] <= 1915) & (dataset['OverallQual'] == 4) \\\n        & (dataset['ExterQual'] == 'TA') & (dataset['YearRemodAdd'] >= 1945) \\\n        & (dataset['YearRemodAdd'] <= 2005)][['BsmtQual']]\n\nsns.countplot(x = 'BsmtQual', data = grouped_BQ)","f2ea613a":"bsmtQual_na = dataset[dataset['BsmtQual'].isnull()].index\ndataset.at[bsmtQual_na, 'BsmtQual'] = 'TA'","64bcd679":"bsmtExposure_corr = pd.DataFrame(data = temp_dataset_cor['BsmtExposure'])\nbsmtExposure_corr.columns = ['corr']\nbsmtExposure_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nbsmtExposure_corr[abs(bsmtExposure_corr['corr']) >= 0.3][1:]","b660d51c":"dataset[dataset['BsmtExposure'].isnull()][['BsmtQual', 'TotalBsmtSF', 'BsmtFinSF1' , 'YearBuilt', 'BsmtFullBath']]","ca1864c0":"grouped_BE = dataset[(dataset['BsmtExposure'].notnull()) & (dataset['BsmtQual'] == 'Gd') \\\n        & (dataset['TotalBsmtSF'] >= 700) & (dataset['TotalBsmtSF'] <= 1620) \\\n        & (dataset['BsmtFinSF1'] == 0) & (dataset['YearBuilt'] >= 2000) \\\n        & (dataset['YearBuilt'] <= 2009) & (dataset['BsmtFullBath'] == 0)]\n\nsns.countplot(x = 'BsmtExposure', data = grouped_BE)","37032b9c":"bsmtExposure_na = dataset[dataset['BsmtExposure'].isnull()].index\ndataset.at[bsmtExposure_na, 'BsmtExposure'] = 'No'","2050f6a0":"bsmtFinType2 = pd.DataFrame(data = temp_dataset_cor['BsmtFinType2'])\nbsmtFinType2.columns = ['corr']\nbsmtFinType2.sort_values(by = 'corr',ascending = False, inplace = True)\nbsmtFinType2[abs(bsmtFinType2['corr']) >= 0.2][1:]","c75b61e5":"dataset[dataset['BsmtFinType2'].isnull()][['BsmtFinSF2']]","b15ae5f0":"grouped_FT2 = dataset[(dataset['BsmtFinType2'].notnull()) \\\n        & (dataset['BsmtFinSF2'] >= 450) & (dataset['BsmtFinSF2'] <= 500)][['BsmtFinType2']]\n\nsns.countplot(x = 'BsmtFinType2', data = grouped_FT2)","255b487b":"bsmtFinType2_na = dataset[dataset['BsmtFinType2'].isnull()].index\ndataset.at[bsmtFinType2_na, 'BsmtFinType2'] = 'Rec'","f9b6ecb6":"bsmtCond_corr = pd.DataFrame(data = temp_dataset_cor['BsmtCond'])\nbsmtCond_corr.columns = ['corr']\nbsmtCond_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nbsmtCond_corr[abs(bsmtCond_corr['corr']) >= 0.1][1:]","31c8eb1d":"sns.countplot(x = 'BsmtCond', data = dataset)","df20336f":"bsmtCond_na = dataset[dataset['BsmtCond'].isnull()].index\ndataset.at[bsmtCond_na, 'BsmtCond'] = 'TA'","1d0e3576":"lotFrontage_corr = pd.DataFrame(data = temp_dataset_cor['LotFrontage'])\nlotFrontage_corr.columns = ['corr']\nlotFrontage_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nlotFrontage_corr[abs(lotFrontage_corr['corr']) >= 0.4][1:]","7bc1639e":"sns.regplot(y = 'LotArea', x = 'LotFrontage', lowess = True, data = dataset,\n            line_kws={'color': 'red'}, scatter_kws={'color': 'grey'})","612c04c2":"sns.regplot(y = '1stFlrSF', x = 'LotFrontage', lowess = True, data = dataset,\n            line_kws={'color': 'red'}, scatter_kws={'color': 'grey'})","f2d7935b":"sns.boxplot(x = 'BldgType', y = 'LotFrontage', data = dataset)","ce5b9a47":"bt_TwnhsE_na_LF = dataset[(dataset['LotFrontage'].isnull()) & (dataset['BldgType'] == 'TwnhsE')].index\nbt_Twnhs_na_LF = dataset[(dataset['LotFrontage'].isnull()) & (dataset['BldgType'] == 'Twnhs')].index\n\ndataset.at[bt_TwnhsE_na_LF, 'LotFrontage'] = dataset[(dataset['LotFrontage'].notnull()) & (dataset['BldgType'] == 'TwnhsE')]['LotFrontage'].median()\ndataset.at[bt_Twnhs_na_LF, 'LotFrontage'] = dataset[(dataset['LotFrontage'].notnull()) & (dataset['BldgType'] == 'Twnhs')]['LotFrontage'].median()","45b6abda":"for i in range(0, 60000, 5000) :\n    lotArea_isna = dataset[(dataset['LotFrontage'].isnull()) & (dataset['LotArea'] >= i) & (dataset['LotArea'] <= i+5000)].index\n    lotArea_notna = dataset[(dataset['LotFrontage'].notnull()) & (dataset['LotArea'] >= i) & (dataset['LotArea'] <= i+5000)]['LotFrontage'].median()\n\n    dataset.at[lotArea_isna, 'LotFrontage'] = lotArea_notna","b23be3e7":"lotArea_isna_over = dataset[(dataset['LotFrontage'].isnull()) & (dataset['LotArea'] >= 55000)].index\nlotArea_notna_over = dataset[(dataset['LotFrontage'].notnull()) & (dataset['LotArea'] >= 55000)]['LotFrontage'].median()\n\ndataset.at[lotArea_isna_over, 'LotFrontage'] = lotArea_notna_over","aabf33db":"pool_na = dataset[dataset['PoolArea'] == 0].index\ndataset.at[pool_na, 'PoolQC'] = 'None'","804dcddf":"dataset[dataset['PoolQC'].isnull()][['PoolQC', 'PoolArea']]","bace99e6":"sns.boxplot(x = 'PoolArea', data = dataset[dataset['PoolArea'] != 0], y = 'PoolQC')","5ec68a00":"poolQC_na = dataset[dataset['PoolQC'].isnull()].index\ndataset.at[poolQC_na, 'PoolQC'] = 'Ex'","74dee54c":"misc_na = dataset[dataset['MiscVal'] == 0].index\ndataset.at[misc_na, 'MiscFeature'] = 'None'","40683a8e":"miscFeature_corr = pd.DataFrame(data = temp_dataset_cor['MiscFeature'])\nmiscFeature_corr.columns = ['corr']\nmiscFeature_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nmiscFeature_corr[abs(miscFeature_corr['corr']) >= 0.5][1:]","20ee1885":"dataset[dataset['MiscFeature'].isnull()]","9a329641":"sns.boxplot(x = 'MiscFeature', y = 'MiscVal', data = dataset)","7e97a2fc":"miscFeature_na = dataset[dataset['MiscFeature'].isnull()].index\ndataset.at[miscFeature_na, 'MiscFeature'] = 'Gar2'","3e63f86a":"dataset['Alley'] = dataset['Alley'].fillna('None')","afbf5288":"dataset['Fence'] = dataset['Fence'].fillna('None')","084b8066":"fireplace_na = dataset[dataset['Fireplaces'] == 0].index\ndataset.at[fireplace_na, 'FireplaceQu'] = 'None'","9db46a75":"masVnr_na = dataset[(dataset['MasVnrType'].isnull()) & ((dataset['MasVnrArea'].isnull()) | (dataset['MasVnrArea'] == 0))].index\ndataset.at[masVnr_na, 'MasVnrType'] = 'None'\ndataset.at[masVnr_na, 'MasVnrArea'] = 0","264bae98":"masVnrType_corr = pd.DataFrame(data = temp_dataset_cor['MasVnrType'])\nmasVnrType_corr.columns = ['corr']\nmasVnrType_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nmasVnrType_corr[abs(masVnrType_corr['corr']) >= 0.3][1:]","a66d5812":"dataset[dataset['MasVnrType'].isnull()]","84ec87ff":"sns.boxplot(x = 'MasVnrType', y = 'MasVnrArea', data = dataset)","d73408ba":"temp = dataset[dataset['Neighborhood'] == 'Mitchel']\nsns.barplot(x = 'MasVnrType', y = 'MasVnrArea', data = temp, hue = 'Neighborhood')","cdf610dc":"masVnrType_na = dataset[dataset['MasVnrType'].isnull()].index\ndataset.at[masVnrType_na, 'MasVnrType'] = 'BrkFace'","41736229":"mSZoning_corr = pd.DataFrame(data = temp_dataset_cor['MSZoning'])\nmSZoning_corr.columns = ['corr']\nmSZoning_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nmSZoning_corr[abs(mSZoning_corr['corr']) >= 0.3][1:]","35a8d24b":"temp = dataset[(dataset['Neighborhood'] == 'IDOTRR') | (dataset['Neighborhood'] == 'Mitchel')]\nsns.countplot(x = 'Neighborhood', data = temp, hue = 'MSZoning')","291feed2":"dataset[dataset['MSZoning'].isnull()][['Neighborhood']]","79e5ab71":"dataset['MSZoning'] = dataset.groupby(['Neighborhood'])['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","6de18014":"utilities_na = dataset[dataset['Utilities'].isnull()].index\ndataset.at[utilities_na, 'Utilities'] = 'AllPub'","70de5e3a":"functional_na = dataset[dataset['Functional'].isnull()].index\ndataset.at[functional_na, 'Functional'] = 'Typ'","515bd075":"exterior1st_corr = pd.DataFrame(data = temp_dataset_cor['Exterior1st'])\nexterior1st_corr.columns = ['corr']\nexterior1st_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nexterior1st_corr[abs(exterior1st_corr['corr']) >= 0.3][1:]","4e600fe2":"dataset[(dataset['Exterior1st'].isnull()) & (dataset['Exterior2nd'].isnull())]","2932c31d":"sns.countplot(x = 'Exterior1st', data = dataset, hue = 'Foundation')\nplt.legend(loc = 'upper right')","edf6ac49":"exterior1st_na = dataset[dataset['Exterior1st'].isnull()].index\ndataset.at[exterior1st_na, 'Exterior1st'] = 'VinylSd'\ndataset.at[exterior1st_na, 'Exterior2nd'] = 'VinylSd'","9d15838d":"electrical_corr = pd.DataFrame(data = temp_dataset_cor['Electrical'])\nelectrical_corr.columns = ['corr']\nelectrical_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nelectrical_corr[abs(electrical_corr['corr']) >= 0.3][1:]","bf606a60":"sns.countplot(x = 'Electrical', data = dataset)","c6c95d4b":"dataset[dataset['Electrical'].isnull()]","1438ad86":"sns.boxplot(x = 'Electrical', y = 'YearBuilt', data = dataset)","2d08c9cf":"electrical_na = dataset[dataset['Electrical'].isnull()].index\ndataset.at[electrical_na, 'Electrical'] = 'SBrkr'","d1c915cd":"kitchenQual_corr = pd.DataFrame(data = temp_dataset_cor['KitchenQual'])\nkitchenQual_corr.columns = ['corr']\nkitchenQual_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nkitchenQual_corr[abs(kitchenQual_corr['corr']) >= 0.5][1:]","f225411e":"dataset[dataset['KitchenQual'].isnull()]","64a19c52":"sns.countplot(x = 'ExterQual', hue = 'KitchenQual', data = dataset)","0a9add31":"kitchenQual_na = dataset[dataset['KitchenQual'].isnull()].index\ndataset.at[kitchenQual_na, 'KitchenQual'] = 'TA'","f9830609":"saleType_corr = pd.DataFrame(data = temp_dataset_cor['SaleType'])\nsaleType_corr.columns = ['corr']\nsaleType_corr.sort_values(by = 'corr',ascending = False, inplace = True)\nsaleType_corr[abs(saleType_corr['corr']) >= 0.3][1:]","46265f5e":"sns.countplot(x = 'SaleCondition', data = dataset, hue = 'SaleType')\nplt.legend(loc = 'upper right')","6d50ecc7":"dataset[dataset['SaleType'].isnull()]","06ebc711":"saleType_na = dataset[dataset['SaleType'].isnull()].index\ndataset.at[saleType_na, 'SaleType'] = 'WD'","a0f58052":"y_train = y_train.map(lambda i: np.log1p(i) if i > 0 else 0)","607ca7d8":"dataset = dataset.drop(['Utilities'], axis = 1)","f3d47396":"dataset['TotalHouse'] = dataset['TotalBsmtSF'] + dataset['GrLivArea']\ndataset['TotalArea'] = dataset['TotalBsmtSF'] + dataset['GrLivArea'] + dataset['GarageArea']\ndataset['TotalBath'] = dataset['FullBath'] + (dataset['HalfBath'] * 0.5) + dataset['BsmtFullBath'] + (dataset['BsmtHalfBath'] * 0.5)\ndataset['TotalPorch'] = dataset['OpenPorchSF'] + dataset['3SsnPorch'] + dataset['EnclosedPorch'] + dataset['ScreenPorch'] + dataset['WoodDeckSF']\ndataset['TotalRoom'] = dataset['BedroomAbvGr'] + dataset['TotRmsAbvGrd']\ndataset['OverallQual_GrLivArea'] = dataset['OverallQual'] * dataset['GrLivArea']","d6e690e5":"dataset['hasPool'] = dataset['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndataset['hasGarage'] = dataset['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ndataset['hasBsmt'] = dataset['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ndataset['hasFireplace'] = dataset['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","a6c947d0":"numeric_feats = dataset.dtypes[dataset.dtypes != 'O'].index\nskewed_feats = dataset[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness","b50b776f":"temp = dataset.copy()\nskewness_list = [0 for i in range(4)]\nlam = [-1,-2,2,3]\nskewness_list[0] = skewness[(skewness[\"Skew\"] > 0.75) & (skewness[\"Skew\"] < 10)].index\nskewness_list[1] = skewness[skewness[\"Skew\"] > 10].index\nskewness_list[2] = skewness[(skewness[\"Skew\"] < -0.75) & (skewness[\"Skew\"] > -10)].index\nskewness_list[3] = skewness[skewness[\"Skew\"] < -10].index\n\nfor i in range(len(skewness_list)) :\n    for feat in skewness_list[i]:\n        temp[feat] = boxcox1p(temp[feat], lam[i])\n        \nnumeric_feats = temp.dtypes[temp.dtypes != 'O'].index\n\nskewed_feats = temp[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness_ = pd.DataFrame({'Skew_' :skewed_feats})\nskew = pd.concat(objs = [skewness, skewness_], axis = 1)\nskew","91f7da5f":"skewness_10 = skewness[skewness['Skew'] >= 10].index\nn = 1\n\nfig, axes = plt.subplots(nrows = 3, ncols = 2, figsize = (25, 15))\n\nfor i in range(3) :\n    for j in range(2) :\n        if n <= len(skewness_10) :\n            g = sns.kdeplot(dataset[skewness_10[n-1]], ax = axes[i,j], color = 'Blue', shade = True, legend=True)\n            g = sns.kdeplot(dataset[skewness_10[n-1]][dataset[skewness_10[n-1]] != 0], ax = axes[i,j], color = 'Red', shade = True, legend=True)\n        n += 1","b806ab90":"MiscVal_0 = dataset[dataset['MiscVal'] != 0]\nMiscValBand = pd.qcut(MiscVal_0['MiscVal'], 3)\nMiscVal_0['MiscVal'].groupby(MiscValBand).count()","786b9ba5":"dataset.loc[ dataset['MiscVal'] <= 0, 'MiscVal'] = 0\ndataset.loc[(dataset['MiscVal'] > 0) & (dataset['MiscVal'] <= 480.0), 'MiscVal'] = 1\ndataset.loc[(dataset['MiscVal'] > 480.0) & (dataset['MiscVal'] <= 700.0), 'MiscVal'] = 2\ndataset.loc[ dataset['MiscVal'] > 700.0, 'MiscVal'] = 3","b106ce2c":"sns.countplot(dataset['MiscVal'])","473f6f74":"PoolArea_0 = dataset[dataset['PoolArea'] != 0]\nPoolAreaBand = pd.qcut(PoolArea_0['PoolArea'], 2)\nPoolArea_0['PoolArea'].groupby(PoolAreaBand).count()","eea60131":"dataset.loc[ dataset['PoolArea'] <= 0, 'PoolArea'] = 0\ndataset.loc[(dataset['PoolArea'] > 0) & (dataset['PoolArea'] <= 519.0), 'PoolArea'] = 1\ndataset.loc[ dataset['PoolArea'] > 519.0, 'PoolArea'] = 2","c6d4e833":"dataset['LotArea'] = boxcox1p(dataset['LotArea'], 0.1)\n                    \ng = sns.distplot(dataset['LotArea'], color = 'r', label = 'Skewness : %.2f'%(dataset['LotArea'].skew()))\ng = g.legend(loc = 'best')","0362be0c":"LowQualFinSF_0 = dataset[dataset['LowQualFinSF'] != 0]\nLowQualFinSFBand = pd.qcut(LowQualFinSF_0['LowQualFinSF'], 2)\nLowQualFinSF_0['LowQualFinSF'].groupby(LowQualFinSFBand).count()","b0666416":"dataset.loc[ dataset['LowQualFinSF'] <= 0, 'LowQualFinSF'] = 0\ndataset.loc[(dataset['LowQualFinSF'] > 0) & (dataset['LowQualFinSF'] <= 366.5), 'LowQualFinSF'] = 1\ndataset.loc[ dataset['LowQualFinSF'] > 366.5, 'LowQualFinSF'] = 2","89b43169":"SsnPorch_0 = dataset[dataset['3SsnPorch'] != 0]\nSsnPorchBand = pd.qcut(SsnPorch_0['3SsnPorch'], 3)\nSsnPorch_0['3SsnPorch'].groupby(SsnPorchBand).count()","8bec7151":"dataset.loc[ dataset['3SsnPorch'] <= 0, '3SsnPorch'] = 0\ndataset.loc[(dataset['3SsnPorch'] > 0) & (dataset['3SsnPorch'] <= 162.0), '3SsnPorch'] = 1\ndataset.loc[(dataset['3SsnPorch'] > 162.0) & (dataset['3SsnPorch'] <= 219.0), '3SsnPorch'] = 2\ndataset.loc[ dataset['3SsnPorch'] > 219.0, '3SsnPorch'] = 3","af50d5cb":"skewness_2 = skewness[(skewness['Skew'] >= 2) & (skewness['Skew'] < 10)].index\nfor feat in skewness_2 :\n    dataset[feat] = boxcox1p(dataset[feat], -1)","19e1cdd0":"label_features = ('OverallQual', 'OverallCond', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence')\n\nfor feature in label_features:\n    lbl = LabelEncoder() \n    dataset[feature] = lbl.fit_transform(list(dataset[feature].values))","a9963322":"one_hot_features = ['LandSlope', 'MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'LotConfig', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating', 'CentralAir', 'Electrical', 'Functional', 'GarageType', 'PavedDrive', 'MiscFeature', 'SaleType', 'SaleCondition']\ndataset = pd.get_dummies(dataset, columns = one_hot_features)","c99d0ff5":"X_train = dataset[:train.shape[0]]\nX_test = dataset[train.shape[0]:]\n\nrandom_state = 14\nkfold = KFold(n_splits = 10,  shuffle = True, random_state = random_state).get_n_splits(X_train.values)","9a8955a7":"regressifiers = []\nregressifiers.append(Ridge(normalize = True, random_state = random_state)) \nregressifiers.append(Lasso(normalize = True, random_state = random_state)) \nregressifiers.append(ElasticNet(normalize = True, random_state = random_state)) \nregressifiers.append(RandomForestRegressor(random_state = random_state)) \nregressifiers.append(GradientBoostingRegressor(random_state = random_state)) \nregressifiers.append(xgb.XGBRegressor(random_state = random_state)) \nregressifiers.append(lgb.LGBMRegressor(objective = 'regression',random_state = random_state))\n\ncv_results = []\nfor regressifier in regressifiers :\n    cv_results.append(np.sqrt(-cross_val_score(regressifier, X_train.values, np.ravel(y_train), scoring = 'neg_mean_squared_error', cv = kfold)))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results :\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n    \ncv_res = pd.DataFrame({'Algorithm' : ['Ridge', 'Lasso', 'ElasticNet', 'RandomForest', 'Gb', 'Xgb', 'Lgb'],\n                        'cv_means' : cv_means,\n                        'cv_std' : cv_std})\n\nprint(cv_res)\ng = sns.barplot('cv_means', 'Algorithm', data = cv_res, palette = 'Set2', orient = \"h\",**{'xerr':cv_std})\nplt.xlabel('RMSE')","1e5219df":"ridge = Ridge(normalize = True, random_state = random_state)\n\nridge_param_grid = {'alpha':  [0.1, 0.2, 0.3, 0.4, 0.5]}\ngsRidge = GridSearchCV(estimator = ridge, param_grid = ridge_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsRidge.fit(X_train, np.ravel(y_train))\nridge_estimator = gsRidge.best_estimator_\nridge_score = np.sqrt(-gsRidge.best_score_)\n\nprint(\"\\nRidge : {0} \/ {1}\\n\".format(ridge_estimator, ridge_score))","f8ef3769":"lasso = Lasso(normalize = True, random_state = random_state)\n\nlasso_param_grid = {'alpha':  [0.0001, 0.001, 0.01, 0.1]}\ngsLasso = GridSearchCV(estimator = lasso, param_grid = lasso_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsLasso.fit(X_train, np.ravel(y_train))\nlasso_estimator = gsLasso.best_estimator_\nlasso_score = np.sqrt(-gsLasso.best_score_)\n\nprint(\"\\nLasso : {0} \/ {1}\\n\".format(lasso_estimator, lasso_score))","aca2069d":"en = ElasticNet(normalize = True, random_state = random_state)\n\nen_param_grid = {'alpha':  [0.0001, 0.001, 0.01, 0.1]}\ngsEN = GridSearchCV(estimator = en, param_grid = en_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsEN.fit(X_train, np.ravel(y_train))\nen_estimator = gsEN.best_estimator_\nen_score = np.sqrt(-gsEN.best_score_)\n\nprint(\"\\nElasticNet : {0} \/ {1}\\n\".format(en_estimator, en_score))","b6525376":"rf = RandomForestRegressor(random_state = random_state)\nrf_param_grid = {\"max_features\": ['sqrt'],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[500]}\ngsRF = GridSearchCV(estimator = rf, param_grid = rf_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsRF.fit(X_train, np.ravel(y_train))\nrf_estimator = gsRF.best_estimator_\nrf_score = np.sqrt(-gsRF.best_score_)\n\nprint(\"\\nRandomForest : {0} \/ {1}\\n\".format(rf_estimator, rf_score))","4068c71b":"gb = GradientBoostingRegressor(random_state = random_state)\n\ngb_param_grid = {'max_depth' : [4],\n              'max_features' : ['sqrt'],\n              'min_samples_split' : [2,3],\n              'min_samples_leaf' : [22],\n              'learning_rate' : [0.05],\n              'loss' : ['huber'],\n              'n_estimators' : [500]}\ngsGB = GridSearchCV(estimator = gb, param_grid = gb_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsGB.fit(X_train, np.ravel(y_train))\ngb_estimator = gsGB.best_estimator_\ngb_score = np.sqrt(-gsGB.best_score_)\n\nprint(\"\\nGradientBoosting : {0} \/ {1}\\n\".format(gb_estimator, gb_score))","65840e5b":"xgb = xgb.XGBRegressor(random_state = random_state)\n\nxgb_param_grid = {'max_depth' : [4],\n                  'min_child_weight' : [0.001],\n                  'colsample_bytree' : [0.7],\n                  'subsample' : [0.7],\n                  'gamma' : [0.01],\n                  'learning_rate' : [0.05],\n                  'n_estimators' : [500],\n                  'eval_metric' : ['rmse']}\ngsXGB = GridSearchCV(estimator = xgb, param_grid = xgb_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsXGB.fit(X_train, np.ravel(y_train))\nxgb_estimator = gsXGB.best_estimator_\nxgb_score = np.sqrt(-gsXGB.best_score_)\n\nprint(\"\\nXGB : {0} \/ {1}\\n\".format(xgb_estimator, xgb_score))","2dd27afb":"lgb = lgb.LGBMRegressor(objective = 'regression',random_state = random_state)\n\nlgb_param_grid = {'max_depth' : [3],\n                  'num_leaves' : [5],\n                  'max_bin' : [49],\n                  'learning_rate' : [0.07],\n                  'feature_fraction' : [0.8],\n                  'num_iterations' : [1000],\n                  'n_estimators' : [1000],\n                  'metric' : ['mse']}\ngsLGB = GridSearchCV(estimator = lgb, param_grid = lgb_param_grid, cv = kfold, scoring = 'neg_mean_squared_error', verbose = 1)\ngsLGB.fit(X_train, np.ravel(y_train))\nlgb_estimator = gsLGB.best_estimator_\nlgb_score = np.sqrt(-gsLGB.best_score_)\n\nprint(\"\\nLGB : {0} \/ {1}\\n\".format(lgb_estimator, lgb_score))","eb6b7489":"regressifiers = []\nregressifiers.append(ridge_estimator) #alpha\nregressifiers.append(lasso_estimator) #alpha\nregressifiers.append(en_estimator) #alpha\nregressifiers.append(rf_estimator) \nregressifiers.append(gb_estimator) \nregressifiers.append(xgb_estimator) \nregressifiers.append(lgb_estimator) \n\ncv_results = []\nfor regressifier in regressifiers :\n    cv_results.append(np.sqrt(-cross_val_score(regressifier, X_train.values, np.ravel(y_train), scoring = 'neg_mean_squared_error', cv = kfold)))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results :\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n    \ncv_res = pd.DataFrame({'Algorithm' : ['Ridge', 'Lasso', 'ElasticNet', 'RandomForest', 'Gb', 'Xgb', 'Lgb'],\n                        'cv_means' : cv_means,\n                        'cv_std' : cv_std})\n\nprint(cv_res)\ng = sns.barplot('cv_means', 'Algorithm', data = cv_res, palette = 'Set2', orient = \"h\",**{'xerr':cv_std})\nplt.xlabel('RMSE')","d15aeb5d":"votingR = VotingRegressor(estimators = [('gb', gb_estimator), ('xgb', xgb_estimator),\n('lgb', lgb_estimator)])\n\nvotingR.fit(X_train.values, np.ravel(y_train))\nvotingR_train_pred = votingR.predict(X_train.values) \nvotingR_pred = np.expm1(votingR.predict(X_test.values))   \n\nsub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = votingR_pred\nsub.to_csv('ver11.csv',index = False)","4bd9e7a9":"> #1 \n\n**Elements outside the building** : LotFrontage \/ Street \/ Alley \/ LandContour \/ LotConfig \/ LandSlope \/ Neighborhood \/ Condition1 \/ Condition2 \/ PavedDrive\n\n**Elements inside the building** : MSSubClass \/ MSZoning \/ LotShape \/ Utilities \/ BldgType \/ HouseStyle \/ OverallQual \/ OverallCond \/ RoofStyle \/ RoofMatl \/ Exterior1st \/ Exterior2nd \/ MasVnrType \/ MasVnrArea \/ ExterQual \/ ExterCond \/ Foundation \/ Functional\n\n**Area** : LotArea \/ GrLivArea \/ 1stFlrSF \/ 2ndFlrSF \/ LowQualFinSF\n\n**Date** : YearBuilt \/ YearRemodAdd \/ MoSold \/ YrSold\n\n**Basement** : BsmtQual \/ BsmtCond \/ BsmtExposure \/ BsmtFinType1 \/ BsmtFinType2 \/ BsmtFinSF1 \/ BsmtFinSF2 \/ BsmtUnfSF \/ TotalBsmtSF \/ BsmtFullBath \/ BsmtHalfBath\n\n**Garage** : GarageType \/ GarageYrBlt \/ GarageFinish \/ GarageCars \/ GarageArea \/ GarageQual \/ GarageCond\n\n**Porch** : WoodDeckSF \/ OpenPorchSF \/ EnclosedPorch \/ 3SsnPorch \/ ScreenPorch\n\n**Other** : Heating \/ HeatingQC \/ CentralAir \/ Electrical \/ MiscFeature \/ MiscVal \/ SaleCondition \/ SaleType \/ FullBath \/ HalfBath \/ BedroomAbvGr \/ KitchenAbvGr \/ KitchenQual \/ MasVnrArea \/ TotRmsAbvGrd \/ Fireplaces \/ FireplaceQu \/ PoolArea \/ PoolQC \/ Fence","f39cf120":"The data density distribution of variables with skewness of 10 or more is a blue distribution, and the data density distribution excluding 0 is a red distribution. Variables with a skewness of 10 or more often have a value of 0, so simple scaling was not performed. In order to express the data distribution of variables well, bining was used in continuous variables to sectioning was performed.","b257de05":"# Data Preprocessing\n\n**1. Data Cleaning**\n\n- Outlier Treatment","e68c75e5":"# Modeling","a1f39a2a":"- Feature Engineering\n\nIn order to increase the accuracy of the model, new characteristics were added by combining related variables or multiplying highly correlated variables.","874f3fb2":"- Missing Value\n\nThe process of handling missing values is as follows.\n\n1) Determine whether a facility for data in a variable does not exist, and whether it is actually present but missing, and treat a missing value that does not exist as 'None' or zero.\n\n2) Calculate the correlation between the missing value variable and another explanatory variable.\n\n3) The missing values are processed by indexing the same or similar columns as the highly correlated variables.\n\n4) If the correlation with other variables is low, domain knowledge is used to process missing values.","a0ecedc0":"- Encoding","2635cfe0":"**Garage Group**","bf3dd683":"- LotArea : Outliers were observed at the maximum value of the train.\n- GarageYrBlt : This characteristic refers to the construction year of the garage, and an outlier of 2207 was observed in the test.\n- Utilities : Except for one record, all had values of 'AllPub'.","9402d4f1":"# EDA\n\n**1. Observation of data using statistical values**","aa349ac1":"- Scaling\nScaling was performed to increase the accuracy of the model by reducing the variance and making the size similar to the response variable. ","d6b013a8":"**2. Observation of data using visualization**\n\n- Visualize Response Variable (SalePrice)","dc1137a2":"**Area Group**","d58d1ccc":"# Ensemble","e591873a":"- Visualize Explanatory variables","fbae81f8":"To understand and observe many variables, a common theme was created.\nThe clusters were set to Elements outside the building, Elements inside the building, Area, Date, Basement, Garage, Porch, Other. (See #1 below for details.)\n\nAssume that clusters with many properties with correlations greater than 0.5 are closely related to the response variable. The variables are identified through visualization sequentially according to the importance of the cluster."}}