{"cell_type":{"5bdbdc6e":"code","32adada4":"code","452e1d74":"code","e5b3fcf5":"code","ef30c574":"code","ab7e760d":"code","154e1d82":"code","2be430ad":"code","62a2b5b1":"code","e187a71c":"code","c6a996e6":"code","a2973903":"code","1c331295":"code","547430a2":"code","b58968a4":"code","66453509":"code","6d08e4f1":"code","3efba544":"code","c3ca1221":"code","47e267ac":"code","4c085fbf":"code","a3da0045":"code","e5afdc43":"code","188e9669":"code","051ac33c":"code","0057ad24":"code","f9bb0e3e":"code","504e40bc":"code","6362eb42":"code","571e0a3b":"code","4d41d15e":"code","b866679d":"code","289b717f":"code","33272524":"code","6e70bb8e":"code","8005dfdc":"code","0d308154":"code","712b1515":"code","d13948d9":"code","9274cd70":"code","5adb23a8":"code","b27449ef":"code","0305ae0c":"code","50317c57":"code","7c92f1ba":"code","c73bd439":"code","d0a05c28":"code","9e5071f5":"code","07a5da1e":"code","81924ab7":"code","29c19a78":"code","3216aa32":"code","475e827b":"code","4cb229f0":"code","5aa0baeb":"code","b47cc892":"code","83c00ac1":"code","da65fa50":"code","3315eb36":"code","3335b005":"code","d63642fe":"code","327a57f6":"code","cb14ca8f":"code","28c72dd1":"code","cbac0a3d":"code","09549c96":"code","bc71d43b":"code","7fe5b117":"code","24939f5a":"code","487651ec":"code","c4a6a618":"code","0d3671e9":"code","f71648fb":"code","3aec065f":"code","9dd29549":"code","3ebb5ee1":"code","731b36bd":"code","290b9f65":"code","46b21681":"code","df6465b7":"code","b8e8b6e7":"code","a096958b":"code","890e78d1":"code","4ca85bef":"code","ca86a39f":"code","eb73a31f":"code","ee1a03c4":"code","1f87ab86":"code","52446cdb":"code","f332dbd0":"code","4531885a":"code","dec5fff5":"code","d079cc31":"code","b1a6228b":"code","4b68a8be":"code","bb4d2849":"code","d350ea90":"code","87013916":"code","9cecfb63":"code","4fe3a19d":"code","22dcda36":"code","69524638":"code","4dc09332":"code","60900597":"code","83b9f486":"code","08cd07d2":"code","e0bb71f1":"code","80817794":"code","ebe21a3e":"code","211855bf":"code","28090586":"code","2f119abf":"code","2b45ad85":"code","fd4d59e7":"code","60282be8":"code","2a1edd9d":"code","8987550d":"code","6ea40ff2":"code","0588dad7":"code","3f25685a":"code","5753f277":"code","03c5b4f0":"code","18adf231":"code","0719f825":"code","2076a64d":"code","f62ceef4":"code","70d0286f":"code","251df330":"code","f9553891":"code","ba18783f":"code","66be5b38":"code","3d616548":"code","4b6aad15":"code","d7ccf8b6":"code","0e459cf8":"code","383bb702":"code","28d86891":"code","e48181b6":"code","37c17717":"code","80a2fb3c":"code","27ad331d":"code","ee0a5db3":"code","5408c9e8":"code","9533cb6a":"code","93a98e93":"code","c3977653":"code","0a918b8f":"code","edd2fb15":"code","b5ca86fc":"code","be3d6b05":"code","a14882ad":"code","163bd2ab":"code","a3209071":"code","cb33cf86":"code","2a6a26d7":"code","3149bc2a":"code","7c7f7e4f":"code","190fae92":"code","7d87ccf7":"code","f277a480":"code","c5f923ce":"code","4380fd74":"code","5a147a8c":"code","f1a9c98b":"code","8fa79a55":"code","ff78f7d9":"code","e68a696e":"code","346d8a39":"code","de3141fa":"code","45aaaab7":"code","79bce416":"code","c1f2139d":"code","d5f8b973":"code","b1397c8e":"code","025939b6":"code","cd6f49b8":"code","5c985e5f":"code","69cddcaf":"code","ad1af88d":"code","3d6561da":"code","3b233713":"code","274b00c1":"code","2b325b12":"code","fce5aeb1":"code","c289fe54":"code","4ce4cf65":"code","2d27002e":"code","bcea15be":"code","589ae87a":"code","a7a90081":"code","757ce7a7":"code","52a733df":"code","76ac1a97":"code","122c1c1f":"code","833ab60e":"code","ba5613c6":"code","ccc6b8f3":"code","a9703f8e":"code","c670255b":"code","92144506":"code","2fa46392":"code","97f8f49e":"code","865ccad4":"code","ee43be6f":"code","4baf05cd":"code","5ed62aa7":"code","dff3171d":"code","6a9c6aa9":"code","37f66583":"code","e848e0e2":"code","0ce718db":"code","525c39b5":"code","12ca3964":"code","4a67bdb1":"code","04126d38":"code","4b7285cc":"code","65c727cc":"code","b3847392":"code","90dc21fd":"code","613b450e":"code","84c11ed3":"code","f78fcdb1":"code","9ef6aa0a":"code","440e2831":"code","682a4537":"code","a43de212":"code","a8814d01":"code","1e409e42":"code","15ab88a9":"code","62b45e03":"code","ea4b9826":"code","8eedf69f":"code","95198b84":"code","488541ab":"code","0e558dd2":"code","852b04d6":"code","81a38aba":"code","edcd91c3":"code","cd1167f3":"code","16f9f032":"code","0023b4ab":"code","88341fa0":"code","d98d476b":"code","670614c9":"code","d897c8f8":"code","2c9491eb":"code","fdc8d237":"code","5dcaa899":"code","62661ecf":"code","012ab3fc":"code","66bd6a01":"code","9f5f23c4":"code","d7d36193":"code","641fe88f":"code","e4b763f7":"code","288794f5":"code","dfaa8312":"code","f3c01d82":"code","6c53b031":"code","2b035e1a":"code","059124e1":"code","50178559":"code","2412eb3c":"code","054dc7a7":"code","a0e1473a":"code","fdc00528":"code","9505567c":"code","6a4b53c4":"code","48c91c38":"code","24625917":"code","db28aad0":"code","ba76cf86":"code","b56e91ec":"markdown","6bc58edb":"markdown","f08deaf2":"markdown","3412561f":"markdown","b548a4b6":"markdown","28115bdb":"markdown","a560e363":"markdown","531de58d":"markdown","65a25378":"markdown","3cfebd54":"markdown","092bcc80":"markdown","2a4bf302":"markdown","6043a33e":"markdown","36a8fb40":"markdown","454d16a2":"markdown","e450e501":"markdown","e834dd98":"markdown","4ab91e03":"markdown","3f912fcc":"markdown","ff9c375e":"markdown","45927c6c":"markdown","e642e132":"markdown","b5723a1c":"markdown","30a7c6e4":"markdown","32c11b4d":"markdown","a607f929":"markdown","85c595d7":"markdown","163cd196":"markdown","fed14401":"markdown","a43a6c55":"markdown","8434860e":"markdown","7ac0a253":"markdown","7bae1753":"markdown","7c7fd61b":"markdown","662246be":"markdown","b94390c0":"markdown","45ee93e6":"markdown","d2735d51":"markdown","55a490dc":"markdown","37768d5f":"markdown","9f3452b9":"markdown","d6fecc96":"markdown","3a6a9c50":"markdown","1187fa88":"markdown","3a14f354":"markdown","402f4598":"markdown","79d1ee3e":"markdown","53a97279":"markdown","6650428d":"markdown","4a745ca5":"markdown","dc4b3c08":"markdown","668470bc":"markdown","b681776f":"markdown","9efd2183":"markdown","af43e7f5":"markdown","8bf61f83":"markdown","90b404d3":"markdown","ac1c135a":"markdown","24b7727d":"markdown","35922177":"markdown","6d51e63c":"markdown","e850da52":"markdown","9b0f0992":"markdown","27c0f175":"markdown","efc50e4c":"markdown","70b2347a":"markdown","ea54e544":"markdown","56a82edc":"markdown","2892b11a":"markdown","9b9e1ab1":"markdown","f7c71314":"markdown","edc0572b":"markdown","6314594d":"markdown","d6316b38":"markdown","607175bf":"markdown","bbeb7d45":"markdown","48e19e35":"markdown","c8b9c5a6":"markdown","63072079":"markdown","88159713":"markdown","ffdefa93":"markdown","d0c0a33c":"markdown","6fc85b7a":"markdown","f8a23f2a":"markdown","da22563e":"markdown","36cb7eb1":"markdown","6d3b4696":"markdown","1d885be8":"markdown","c486254e":"markdown","b036bd69":"markdown","a41c949f":"markdown","e3a197a1":"markdown","623b8ed9":"markdown","f83757d1":"markdown","f55df244":"markdown","abd70278":"markdown","085a154d":"markdown","2699927d":"markdown","f5b64f2b":"markdown","720d5e40":"markdown","c9d7168c":"markdown","89ac97dc":"markdown","92603b11":"markdown","e1308d4a":"markdown","ae4eacf8":"markdown"},"source":{"5bdbdc6e":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","32adada4":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","452e1d74":"# visulaisation\nfrom matplotlib.pyplot import xticks\n%matplotlib inline","e5b3fcf5":"# Data display coustomization\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","ef30c574":"lead = pd.read_csv(r\"\/kaggle\/input\/lead-scoring-dataset\/Lead Scoring.csv\")\nlead.head()","ab7e760d":"word=pd.read_excel(r\"\/kaggle\/input\/lead-scoring-dataset\/Leads Data Dictionary.xlsx\")\nword.head()","154e1d82":"pd.set_option('display.max_colwidth', -1)\nword.drop('Unnamed: 0',inplace=True,axis=1)\nword.columns = word.iloc[1]\nword = word.iloc[2:]\nword.reset_index(drop=True, inplace=True)\nword.head(len(word))","2be430ad":"lead.drop(['Asymmetrique Activity Index','Asymmetrique Profile Index',\n           'Asymmetrique Activity Score','Asymmetrique Profile Score',\n           'Tags','Lead Quality','Lead Profile'], 1, inplace = True)","62a2b5b1":"lead_dub = lead.copy()\n\n# Checking for duplicates and dropping the entire duplicate row if any\nlead_dub.drop_duplicates(subset=None, inplace=True)\nlead_dub.shape","e187a71c":"lead.shape","c6a996e6":"lead.shape","a2973903":"lead.info()","1c331295":"lead.describe()","547430a2":"# As we can observe that there are select values for many column.\n#This is because customer did not select any option from the list, hence it shows select.\n# Select values are as good as NULL.\n\n# Converting 'Select' values to NaN.\nlead = lead.replace('Select', np.nan)\nlead.head()","b58968a4":"lead.isnull().sum()","66453509":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","6d08e4f1":"# we will drop the columns having more than 60% NA values.\nlead = lead.drop(lead.loc[:,list(round(100*(lead.isnull().sum()\/len(lead.index)), 2)>60)].columns, 1)","3efba544":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","c3ca1221":"#dropping Lead Number and Prospect ID since they have all unique values\n\nlead.drop(['Prospect ID', 'Lead Number'], 1, inplace = True)","47e267ac":"lead.head()","4c085fbf":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","a3da0045":"# City","e5afdc43":"lead.City.value_counts()\n","188e9669":"lead.City.describe()","051ac33c":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['City'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","0057ad24":"# Around 57.8% of the data available  is Mumbai so we can impute Mumbai in the missing values.","f9bb0e3e":"lead['City'] = lead['City'].replace(np.nan, 'Mumbai')","504e40bc":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['City'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","6362eb42":"# Specailization","571e0a3b":"lead.Specialization.describe()","4d41d15e":"lead.Specialization.value_counts()","b866679d":"plt.figure(figsize = (20,5))\nax= sns.countplot(lead['Specialization'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","289b717f":"# It maybe the case that lead has not entered any specialization if his\/her option is not availabe on the list,\n#  may not have any specialization or is a student.\n# Hence we can make a category \"Others\" for missing values. \n","33272524":"lead['Specialization'] = lead['Specialization'].replace(np.nan, 'Others')","6e70bb8e":"plt.figure(figsize = (20,5))\nax= sns.countplot(lead['Specialization'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","8005dfdc":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","0d308154":"# What matters most to you in choosing a course","712b1515":"lead['What matters most to you in choosing a course'].describe()","d13948d9":"lead['What matters most to you in choosing a course'].value_counts()","9274cd70":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['What matters most to you in choosing a course'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","5adb23a8":"# Blanks in the this column may be imputed by 'Better Career Prospects'.","b27449ef":"lead['What matters most to you in choosing a course'] = lead['What matters most to you in choosing a course'].replace(np.nan, 'Better Career Prospects')","0305ae0c":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['What matters most to you in choosing a course'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","50317c57":"# Occupation","7c92f1ba":"lead['What is your current occupation'].describe()","c73bd439":"lead['What is your current occupation'].value_counts()","d0a05c28":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['What is your current occupation'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","9e5071f5":"# 86% entries are of Unemployed so we can impute \"Unemployed\" in it.","07a5da1e":"lead['What is your current occupation'] = lead['What is your current occupation'].replace(np.nan, 'Unemployed')","81924ab7":"plt.figure(figsize = (10,5))\nax= sns.countplot(lead['What is your current occupation'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","29c19a78":"# Country","3216aa32":"lead['Country'].describe()","475e827b":"lead['Country'].value_counts()","4cb229f0":"plt.figure(figsize = (20,5))\nax= sns.countplot(lead['Country'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","5aa0baeb":"# Country is India for most values so let's impute the same in missing values.\nlead['Country'] = lead['Country'].replace(np.nan, 'India')","b47cc892":"plt.figure(figsize = (20,5))\nax= sns.countplot(lead['Country'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","83c00ac1":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","da65fa50":"lead.isnull().sum()","3315eb36":"# Rest missing values are under 1.5% so we can drop these rows.\nlead.dropna(inplace = True)","3335b005":"round(100*(lead.isnull().sum()\/len(lead.index)), 2)","d63642fe":"lead.isnull().sum()","327a57f6":"data_retailed= len(lead)* 100 \/ len(lead_dub)\nprint(\"{} % of original rows is available for EDA\".format(round(data_retailed,2)))","cb14ca8f":"lead.shape","28c72dd1":"# Converted is the target variable, Indicates whether a lead has been successfully converted (1) or not (0).","cbac0a3d":"Converted = round((sum(lead['Converted'])\/len(lead['Converted'].index))*100,2)\n\nprint(\"We have almost {} %  Converted rate\".format(Converted))\n\n","09549c96":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Lead Origin\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","bc71d43b":"plt.figure(figsize = (25,5))\nax= sns.countplot(x = \"Lead Source\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","7fe5b117":"lead['Lead Source'] = lead['Lead Source'].replace(['google'], 'Google')\nlead['Lead Source'] = lead['Lead Source'].replace(['Click2call', 'Live Chat', 'NC_EDM', 'Pay per Click Ads', 'Press_Release',\n  'Social Media', 'WeLearn', 'bing', 'blog', 'testone', 'welearnblog_Home', 'youtubechannel'], 'Others')","24939f5a":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Lead Source\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","487651ec":"plt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nax= sns.countplot(x = \"Do Not Email\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.subplot(1,2,2)\nax= sns.countplot(x = \"Do Not Call\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","c4a6a618":"lead['TotalVisits'].describe(percentiles=[0.05,.25, .5, .75, .90, .95, .99])","0d3671e9":"plt.figure(figsize = (10,5))\nsns.violinplot(lead['TotalVisits'])\nplt.show()","f71648fb":"# As we can see there are a number of outliers in the data.\n# We will cap the outliers to 95% value for analysis.","3aec065f":"percentiles = lead['TotalVisits'].quantile([0.05,0.95]).values\nlead['TotalVisits'][lead['TotalVisits'] <= percentiles[0]] = percentiles[0]\nlead['TotalVisits'][lead['TotalVisits'] >= percentiles[1]] = percentiles[1]","9dd29549":"plt.figure(figsize = (10,5))\nsns.violinplot(lead['TotalVisits'])\nplt.show()","3ebb5ee1":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'TotalVisits', x = 'Converted', data = lead)\nplt.show()","731b36bd":"lead['Total Time Spent on Website'].describe()","290b9f65":"plt.figure(figsize = (10,5))\nsns.violinplot(lead['Total Time Spent on Website'])\nplt.show()","46b21681":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'Total Time Spent on Website', x = 'Converted', data = lead)\nplt.show()","df6465b7":"lead['Page Views Per Visit'].describe()","b8e8b6e7":"plt.figure(figsize = (10,5))\nsns.violinplot(lead['Page Views Per Visit'])\nplt.show()","a096958b":"# As we can see there are a number of outliers in the data.\n# We will cap the outliers to 95% value for analysis.","890e78d1":"percentiles = lead['Page Views Per Visit'].quantile([0.05,0.95]).values\nlead['Page Views Per Visit'][lead['Page Views Per Visit'] <= percentiles[0]] = percentiles[0]\nlead['Page Views Per Visit'][lead['Page Views Per Visit'] >= percentiles[1]] = percentiles[1]","4ca85bef":"plt.figure(figsize = (10,5))\nsns.violinplot(lead['Page Views Per Visit'])\nplt.show()","ca86a39f":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'Page Views Per Visit', x = 'Converted', data = lead)\nplt.show()","eb73a31f":"lead['Last Activity'].describe()","ee1a03c4":"lead['Last Activity'].value_counts()","1f87ab86":"plt.figure(figsize = (25,5))\nax= sns.countplot(x = \"Last Activity\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","52446cdb":"# Let's keep considerable last activities as such and club all others to \"Other_Activity\"\nlead['Last Activity'] = lead['Last Activity'].replace(['Had a Phone Conversation', 'View in browser link Clicked', \n                                                       'Visited Booth in Tradeshow', 'Approached upfront',\n                                                       'Resubscribed to emails','Email Received', 'Email Marked Spam'],\n                                                      'Other_Activity')","f332dbd0":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Last Activity\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","4531885a":"lead.Country.describe()","dec5fff5":"lead.Country.value_counts()","d079cc31":"plt.figure(figsize = (25,5))\nax= sns.countplot(x = \"Country\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","b1a6228b":"lead.Specialization.describe()","4b68a8be":"lead.Specialization.value_counts()","bb4d2849":"lead['Specialization'] = lead['Specialization'].replace(['Others'], 'Other_Specialization')","d350ea90":"plt.figure(figsize = (25,5))\nax= sns.countplot(x = \"Specialization\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","87013916":"lead['What is your current occupation'].describe()","9cecfb63":"lead['What is your current occupation'].value_counts()","4fe3a19d":"lead['What is your current occupation'] = lead['What is your current occupation'].replace(['Other'], 'Other_Occupation')","22dcda36":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"What is your current occupation\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","69524638":"lead['What matters most to you in choosing a course'].describe()","4dc09332":"lead['What matters most to you in choosing a course'].value_counts()","60900597":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"What matters most to you in choosing a course\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","83b9f486":"lead.Search.describe()","08cd07d2":"lead.Search.value_counts()","e0bb71f1":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Search\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","80817794":"lead.Magazine.describe()","ebe21a3e":"lead.Magazine.value_counts()","211855bf":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Magazine\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","28090586":"lead['Newspaper Article'].describe()","2f119abf":"lead['Newspaper Article'].value_counts()","2b45ad85":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Newspaper Article\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","fd4d59e7":"lead['X Education Forums'].describe()","60282be8":"lead['X Education Forums'].value_counts()","2a1edd9d":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"X Education Forums\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","8987550d":"lead['Newspaper'].describe()","6ea40ff2":"lead['Newspaper'].value_counts()","0588dad7":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Newspaper\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","3f25685a":"lead['Digital Advertisement'].describe()","5753f277":"lead['Digital Advertisement'].value_counts()","03c5b4f0":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Digital Advertisement\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","18adf231":"lead['Through Recommendations'].describe()","0719f825":"lead['Through Recommendations'].value_counts()","2076a64d":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Through Recommendations\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","f62ceef4":"lead['Receive More Updates About Our Courses'].describe()","70d0286f":"lead['Receive More Updates About Our Courses'].value_counts()","251df330":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"Receive More Updates About Our Courses\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","f9553891":"lead['Update me on Supply Chain Content'].describe()","ba18783f":"lead['Update me on Supply Chain Content'].value_counts()","66be5b38":"plt.figure(figsize = (10,6))\nax= sns.countplot(x = \"Update me on Supply Chain Content\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","3d616548":"lead['Get updates on DM Content'].describe()","4b6aad15":"lead['Get updates on DM Content'].value_counts()","d7ccf8b6":"plt.figure(figsize = (10,6))\nax= sns.countplot(x = \"Get updates on DM Content\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","0e459cf8":"lead['I agree to pay the amount through cheque'].describe()","383bb702":"lead['I agree to pay the amount through cheque'].value_counts()","28d86891":"plt.figure(figsize = (10,6))\nax= sns.countplot(x = \"I agree to pay the amount through cheque\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","e48181b6":"lead['A free copy of Mastering The Interview'].describe()","37c17717":"lead['A free copy of Mastering The Interview'].value_counts()","80a2fb3c":"plt.figure(figsize = (10,6))\nax= sns.countplot(x = \"A free copy of Mastering The Interview\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","27ad331d":"lead.City.describe()","ee0a5db3":"lead.City.value_counts()","5408c9e8":"plt.figure(figsize = (10,6))\nax= sns.countplot(x = \"City\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","9533cb6a":"lead['Last Notable Activity'].describe()","93a98e93":"lead['Last Notable Activity'].value_counts()","c3977653":"plt.figure(figsize = (20,6))\nax= sns.countplot(x = \"Last Notable Activity\", hue = \"Converted\", data = lead)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nax.set_yscale('log')\nplt.show()","0a918b8f":"lead = lead.drop(['What matters most to you in choosing a course','Search',\n                  'Magazine','Newspaper Article','X Education Forums','Newspaper',\n           'Digital Advertisement','Through Recommendations','Receive More Updates About Our Courses',\n                  'Update me on Supply Chain Content',\n           'Get updates on DM Content','I agree to pay the amount through cheque',\n                  'A free copy of Mastering The Interview','Country'],1)","edd2fb15":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10,5))\nsns.heatmap(lead.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","b5ca86fc":"print(lead['Last Activity'].value_counts())\nprint(lead['Last Notable Activity'].value_counts())","be3d6b05":"#Values under 'Last Activity' are coverved as values under 'Last Notable Activity'. Either of one can be dropped. \nlead.drop(['Last Notable Activity'], 1, inplace = True)","a14882ad":"print(\"Original Columns {} % Retained\".format(round((100* len(lead.columns)\/len(lead_dub.columns)),2)))","163bd2ab":"print(\"Original Rows {} % Retained\".format(round((len(lead)*100)\/len(lead_dub),2)))\n","a3209071":"print(\"Original Data {} % Retained\".format(round((len(lead) * \n                                                     len(lead.columns))*100\/(len(lead_dub.columns)*len(lead_dub)),2)))","cb33cf86":"lead.shape","2a6a26d7":"lead.head()","3149bc2a":"# List of variables to map\n\nvarlist =  ['Do Not Email', 'Do Not Call']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\nlead[varlist] = lead[varlist].apply(binary_map)\nlead.head()","7c7f7e4f":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(lead[['Lead Origin', 'Lead Source', 'Last Activity', 'Specialization','What is your current occupation',\n                              'City']], drop_first=True)\n\ndummy1.head()","190fae92":"# Adding the results to the master dataframe\nlead = pd.concat([lead, dummy1], axis=1)\nlead.head()","7d87ccf7":"lead = lead.drop(['Lead Origin', 'Lead Source', 'Last Activity', 'Specialization',\n                  'What is your current occupation','City'], axis = 1)\n\nlead.head()\n","f277a480":"lead.shape","c5f923ce":"from sklearn.model_selection import train_test_split\n\n# Putting feature variable to X\nX = lead.drop(['Converted'], axis=1)","4380fd74":"X.head()","5a147a8c":"X.shape","f1a9c98b":"# Putting response variable to y\ny = lead['Converted']","8fa79a55":"y.head()","ff78f7d9":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=333)","e68a696e":"X_train.head()","346d8a39":"X_train.shape","de3141fa":"X_test.head()","45aaaab7":"X_test.shape","79bce416":"y_train.head()","c1f2139d":"y_train.shape","d5f8b973":"y_test.head()","b1397c8e":"y_test.shape","025939b6":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.fit_transform(X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\n\nX_train.head()","cd6f49b8":"# Checking the Converted Rate\nConverted = round((sum(lead['Converted'])\/len(lead['Converted'].index))*100,2)\nprint(\"We have almost {} %  Converted rate after successful data manipulation\".format(Converted))","5c985e5f":"import statsmodels.api as sm","69cddcaf":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","ad1af88d":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\n\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg,18)             # running RFE with 18 variables as output\nrfe = rfe.fit(X_train, y_train)","3d6561da":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","3b233713":"col = X_train.columns[rfe.support_]\ncol","274b00c1":"X_train.columns[~rfe.support_]","2b325b12":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","fce5aeb1":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","c289fe54":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4ce4cf65":"col1 = col.drop('What is your current occupation_Housewife',1)","2d27002e":"col1","bcea15be":"X_train_sm = sm.add_constant(X_train[col1])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","589ae87a":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a7a90081":"col1 = col1.drop('Lead Source_Reference',1)","757ce7a7":"X_train_sm = sm.add_constant(X_train[col1])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","52a733df":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","76ac1a97":"col1 = col1.drop('What is your current occupation_Unemployed',1)","122c1c1f":"X_train_sm = sm.add_constant(X_train[col1])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","833ab60e":"vif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ba5613c6":"col1 = col1.drop('What is your current occupation_Student',1)","ccc6b8f3":"X_train_sm = sm.add_constant(X_train[col1])\nlogm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","a9703f8e":"vif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c670255b":"col1 = col1.drop('Last Activity_Unreachable',1)","92144506":"X_train_sm = sm.add_constant(X_train[col1])\nlogm5 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm5.fit()\nres.summary()","2fa46392":"vif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","97f8f49e":"col1 = col1.drop('Last Activity_Unsubscribed',1)","865ccad4":"X_train_sm = sm.add_constant(X_train[col1])\nlogm6 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm6.fit()\nres.summary()","ee43be6f":"# Getting the predicted values on the train set\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","4baf05cd":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","5ed62aa7":"y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Converted_prob':y_train_pred})\ny_train_pred_final.head()","dff3171d":"y_train_pred_final['predicted'] = y_train_pred_final.Converted_prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","6a9c6aa9":"from sklearn import metrics\n\n# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\nprint(confusion)","37f66583":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.predicted))","e848e0e2":"# Checking VIF","0ce718db":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col1].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col1].values, i) for i in range(X_train[col1].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","525c39b5":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","12ca3964":"# Let's see the sensitivity of our model\nTP \/ float(TP+FN)","4a67bdb1":"# Let us calculate specificity\nTN \/ float(TN+FP)\n","04126d38":"# Calculate false postive rate - predicting Converted when customer does not have Converted\nprint(FP\/ float(TN+FP))","4b7285cc":"# positive predictive value \nprint (TP \/ float(TP+FP))","65c727cc":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","b3847392":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None\n","90dc21fd":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Converted, \n                                         y_train_pred_final.Converted_prob, drop_intermediate = False )","613b450e":"draw_roc(y_train_pred_final.Converted, y_train_pred_final.Converted_prob)","84c11ed3":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Converted_prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","f78fcdb1":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","9ef6aa0a":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'],figsize = (10,5))\nplt.grid(True)\nplt.show()","440e2831":"#### From the curve above, 0.34 is the optimum point to take it as a cutoff probability\n\ny_train_pred_final['final_predicted'] = y_train_pred_final.Converted_prob.map( lambda x: 1 if x > 0.34 else 0)\n\ny_train_pred_final.head()","682a4537":"y_train_pred_final['Lead_Score'] = y_train_pred_final.Converted_prob.map( lambda x: round(x*100))\n\ny_train_pred_final.head()","a43de212":"# Let's check the overall accuracy.\ntrainaccuracy= metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)\ntrainaccuracy","a8814d01":"\n\nconfusion2 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.final_predicted )\nconfusion2\n\n","1e409e42":"\n\nTP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","15ab88a9":"# Let's see the sensitivity of our model\ntrainsensitivity= TP \/ float(TP+FN)\ntrainsensitivity","62b45e03":"# Let us calculate specificity\ntrainspecificity= TN \/ float(TN+FP)\ntrainspecificity","ea4b9826":"# Calculate false postive rate - predicting Converted when customer does not have Converted\nprint(FP\/ float(TN+FP))","8eedf69f":"# Positive predictive value \nprint (TP \/ float(TP+FP))","95198b84":"# Negative predictive value\nprint(TN \/ float(TN+ FN))","488541ab":"#Using sklearn utilities for the same","0e558dd2":"from sklearn.metrics import precision_score, recall_score","852b04d6":"precision= precision_score(y_train_pred_final.Converted , y_train_pred_final.predicted)\nprecision","81a38aba":"recall=recall_score(y_train_pred_final.Converted, y_train_pred_final.predicted)\nrecall","edcd91c3":"trainF1_score= 2 * (precision * recall) \/ (precision + recall)\ntrainF1_score","cd1167f3":"from sklearn.metrics import precision_recall_curve","16f9f032":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Converted, y_train_pred_final.Converted_prob)","0023b4ab":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","88341fa0":"X_test[['TotalVisits','Total Time Spent on Website',\n        'Page Views Per Visit']] = scaler.transform(X_test[['TotalVisits',\n                                                                'Total Time Spent on Website','Page Views Per Visit']])\n\nX_train.head()","d98d476b":"X_test = X_test[col1]\nX_test.head()","670614c9":"X_test_sm = sm.add_constant(X_test)","d897c8f8":"y_test_pred = res.predict(X_test_sm)","2c9491eb":"y_test_pred[:10]","fdc8d237":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)\n","5dcaa899":"# Let's see the head\ny_pred_1.head()","62661ecf":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)","012ab3fc":"# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)","66bd6a01":"y_pred_final.head()","9f5f23c4":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Converted_prob'})","d7d36193":"# Let's see the head of y_pred_final\ny_pred_final.head()","641fe88f":"y_pred_final['final_predicted'] = y_pred_final.Converted_prob.map(lambda x: 1 if x > 0.34 else 0)","e4b763f7":"y_pred_final['Lead_Score'] = y_pred_final.Converted_prob.map( lambda x: round(x*100))\n","288794f5":"Lead_Score=y_pred_final.copy()\ny_pred_final.head()","dfaa8312":"Lead_Score.reset_index(level=0, inplace=True)\nLead_Score.drop(['Converted', 'Converted_prob', 'final_predicted'], 1, inplace = True)\nLead_Score.head()","f3c01d82":"Lead=lead_dub.copy()\nLead.reset_index(level=0, inplace=True)\nLead.drop(['Lead Origin', 'Lead Source','Do Not Email', 'Do Not Call', 'Converted', 'TotalVisits',\n       'Total Time Spent on Website', 'Page Views Per Visit', 'Last Activity',\n       'Country', 'Specialization', 'How did you hear about X Education',\n       'What is your current occupation',\n       'What matters most to you in choosing a course', 'Search', 'Magazine',\n       'Newspaper Article', 'X Education Forums', 'Newspaper',\n       'Digital Advertisement', 'Through Recommendations',\n       'Receive More Updates About Our Courses',\n       'Update me on Supply Chain Content', 'Get updates on DM Content',\n       'City', 'I agree to pay the amount through cheque',\n       'A free copy of Mastering The Interview', 'Last Notable Activity'], 1, inplace = True)\nLead.head()","6c53b031":"Lead_Score=pd.merge(Lead,Lead_Score,on='index')\nLead_Score.drop(['index'], 1, inplace = True)\nLead_Score.head()","2b035e1a":"Lead_Score.sort_values([\"Lead_Score\"], ascending = False,inplace=True)\nLead_Score.head()","059124e1":"# Let's check the overall accuracy.\ntestaccuracy= metrics.accuracy_score(y_pred_final.Converted, y_pred_final.final_predicted)\ntestaccuracy","50178559":"confusion2 = metrics.confusion_matrix(y_pred_final.Converted, y_pred_final.final_predicted )\nconfusion2","2412eb3c":"# Let's see the sensitivity of our lmodel\ntestsensitivity=TP \/ float(TP+FN)\ntestsensitivity","054dc7a7":"# Let us calculate specificity\ntestspecificity= TN \/ float(TN+FP)\ntestspecificity","a0e1473a":"precision= precision_score(y_pred_final.Converted , y_pred_final.final_predicted)\nprecision","fdc00528":"recall=recall_score(y_pred_final.Converted , y_pred_final.final_predicted)\nrecall","9505567c":"testF1_score= 2 * (precision * recall) \/ (precision + recall)\ntestF1_score","6a4b53c4":"Lead_Score","48c91c38":"# Let us compare the values obtained for Train & Test:\nprint(\"Train Data Accuracy    :{} %\".format(round((trainaccuracy*100),2)))\nprint(\"Train Data Sensitivity :{} %\".format(round((trainsensitivity*100),2)))\nprint(\"Train Data Specificity :{} %\".format(round((trainspecificity*100),2)))\nprint(\"Train Data F1 Score    :{}  \".format(round((trainF1_score),2)))\nprint(\"Test Data Accuracy     :{} %\".format(round((testaccuracy*100),2)))\nprint(\"Test Data Sensitivity  :{} %\".format(round((testsensitivity*100),2)))\nprint(\"Test Data Specificity  :{} %\".format(round((testspecificity*100),2)))\nprint(\"Test Data F1 Score     :{}  \".format(round((testF1_score),2)))","24625917":"from sklearn.metrics import classification_report","db28aad0":"print (classification_report(y_train_pred_final['Converted'], y_train_pred_final['final_predicted']))","ba76cf86":"print (classification_report(y_pred_final.Converted, y_pred_final.final_predicted))","b56e91ec":"## Duplicate Check","6bc58edb":"## Goals","f08deaf2":"- Median for converted and unconverted leads is the same.","3412561f":"## Receive More Updates About Our Courses","b548a4b6":"Making predictions on the test set","28115bdb":"## Total Visits","a560e363":"'Last Activity_Unsubscribed' is dropped due to high p value , accepted one here is 0.001","531de58d":"# Lead Scoring ","65a25378":"Now we will take care of null values in each column one by one.\n","3cfebd54":"**Nothng conclusive can be said on the basis of Total Visits.**","092bcc80":"**To improve overall lead conversion rate, focus should be on improving lead converion of olark chat, organic search, direct traffic, and google leads and generate more leads from reference and welingak website.**","2a4bf302":"- Total Visits & Page Views per Vist are higly correlated with correlation of .77","6043a33e":"**They have potential to make business from US, Middle East & Europe**","36a8fb40":"## Page views per visit","454d16a2":"An education company named X Education sells online courses to industry professionals. On any given day, many professionals who are interested in the courses land on their website and browse for courses. \n\n \n\nThe company markets its courses on several websites and search engines like Google. Once these people land on the website, they might browse the courses or fill up a form for the course or watch some videos. When these people fill up a form providing their email address or phone number, they are classified to be a lead. Moreover, the company also gets leads through past referrals. Once these leads are acquired, employees from the sales team start making calls, writing emails, etc. Through this process, some of the leads get converted while most do not. The typical lead conversion rate at X education is around 30%. \n\n \n\nNow, although X Education gets a lot of leads, its lead conversion rate is very poor. For example, if, say, they acquire 100 leads in a day, only about 30 of them are converted. To make this process more efficient, the company wishes to identify the most potential leads, also known as \u2018Hot Leads\u2019. If they successfully identify this set of leads, the lead conversion rate should go up as the sales team will now be focusing more on communicating with the potential leads rather than making calls to everyone. A typical lead conversion process can be represented using the following funnel:\n\n\nLead Conversion Process - Demonstrated as a funnel\nAs you can see, there are a lot of leads generated in the initial stage (top) but only a few of them come out as paying customers from the bottom. In the middle stage, you need to nurture the potential leads well (i.e. educating the leads about the product, constantly communicating etc. ) in order to get a higher lead conversion.\n\n \n\nX Education has appointed you to help them select the most promising leads, i.e. the leads that are most likely to convert into paying customers. The company requires you to build a model wherein you need to assign a lead score to each of the leads such that the customers with higher lead score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%.\n\n \n\nData\nYou have been provided with a leads dataset from the past with around 9000 data points. This dataset consists of various attributes such as Lead Source, Total Time Spent on Website, Total Visits, Last Activity, etc. which may or may not be useful in ultimately deciding whether a lead will be converted or not. The target variable, in this case, is the column \u2018Converted\u2019 which tells whether a past lead was converted or not wherein 1 means it was converted and 0 means it wasn\u2019t converted. You can learn more about the dataset from the data dictionary provided in the zip folder at the end of the page. Another thing that you also need to check out for are the levels present in the categorical variables. Many of the categorical variables have a level called 'Select' which needs to be handled because it is as good as a null value (think why?).","e450e501":"## Data Preparation","e834dd98":"- All entries are 'No'. No Inference can be drawn with this parameter.","4ab91e03":"- Median for converted and not converted leads are the same.","3f912fcc":"- Focus should be more on the Specialization with high conversion rate.","ff9c375e":"## Problem Statement","45927c6c":"# Precision and recall tradeoff","e642e132":"## Get updates on DM Content","b5723a1c":"- Most entries are 'No'. No Inference can be drawn with this parameter.","30a7c6e4":"**Website should be made more engaging to make leads spend more time.**","32c11b4d":"## I agree to pay the amount through cheque","a607f929":"- Most entries are 'No'. No Inference can be drawn with this parameter.","85c595d7":"There are quite a few goals for this case study.\n\n\nBuild a model to assign a lead score between 0 and 100 to each of the leads which can be used by the company to target potential leads. A higher score would mean that the lead is hot, i.e. is most likely to convert whereas a lower score would mean that the lead is cold and will mostly not get converted.\nThere are some more problems presented by the company which your model should be able to adjust to if the company's requirement changes in the future so you will need to handle these as well. ","163cd196":"# Model Evaluation Metrics","fed14401":"\nBased on the univariate analysis we have seen that many columns are not adding any information to the model, hence we can drop them for frther analysis","a43a6c55":"Creating new column 'predicted' with 1 if Converted_Prob > 0.5 else 0","8434860e":"'What is your current occupation_Student' is dropped due to high VIF","7ac0a253":"## Last Activity","7bae1753":"## Magazine","7c7fd61b":"## City","662246be":"# Precision and Recall","b94390c0":"## Do Not Email & Do Not Call","45ee93e6":"- API and Landing Page Submission have 30-35% conversion rate but count of lead originated from them are considerable.\n- Lead Add Form has more than 90% conversion rate but count of lead are not very high.\n- Lead Import are very less in count.","d2735d51":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","55a490dc":"## Search","37768d5f":"# Model Building","9f3452b9":"- Google and Direct traffic generates maximum number of leads.\n- Conversion Rate of reference leads and leads through welingak website is high.","d6fecc96":"Making predictions on the test set","3a6a9c50":"## Data Inspection","1187fa88":"- Most entries are 'No'. No Inference can be drawn with this parameter.","3a14f354":"- Most entries are 'No'. No Inference can be drawn with this parameter.","402f4598":"## Data Preparation","79d1ee3e":"# Exploratory Data Analytics","53a97279":"- Most entries are 'Better Career Prospects'. No Inference can be drawn with this parameter.","6650428d":"## What matters most to you in choosing a course","4a745ca5":"## Update me on Supply Chain Content","dc4b3c08":"## Last Notable Activity","668470bc":"# VIF","b681776f":"Creating a dataframe with the actual Converted flag and the predicted probabilities","9efd2183":"- All entries are 'No'. No Inference can be drawn with this parameter.","af43e7f5":"With insights from data, Team able to design a model to share lead Score , whic will help sales team to target hot leads & convert them into Customers. Table UI  is made simple to make sure teams works efficenctly & improves the sales.","8bf61f83":"An ROC curve demonstrates several things:\n\n- It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n- The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n- The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","90b404d3":"- Leads spending more time on the weblise are more likely to be converted.","ac1c135a":"- Most leads are from mumbai with around 30% conversion rate.","24b7727d":"All entries are 'No'. No Inference can be drawn with this parameter.","35922177":"- Working Professionals going for the course have high chances of joining it.\n- Unemployed leads are the most in numbers but has around 30-35% conversion rate.","6d51e63c":"# Assessing the model with StatsModels","e850da52":"'Last Activity_Unreachable' is dropped due to high p value , accepted one here is 0.001","9b0f0992":"# Assigning Lead Score","27c0f175":"As per the business, they a model to target potential leads. A higher score would mean that the lead is hot, i.e. is most likely to convert whereas a lower score would mean that the lead is cold and will mostly not get converted","efc50e4c":"What is your current occupation_Unemployed is dropped due to High VIF","70b2347a":"Optimal cutoff probability is that prob where we get balanced sensitivity and specificity","ea54e544":"## Occupation","56a82edc":"## Data Cleaning","2892b11a":"'Lead Source_Reference' can be dropped due to High p value & High VIF","9b9e1ab1":"# Final Observation:","f7c71314":"- Most entries are 'No'. No Inference can be drawn with this parameter.","edc0572b":"## Digital Advertisement","6314594d":"## Newspaper","d6316b38":"**Nothing can be said specifically for lead conversion from Page Views Per Visit**","607175bf":"## Univariate Analysis","bbeb7d45":"- Most of the lead have their Email opened as their last activity.\n- Conversion rate for leads with last activity as SMS Sent is almost 62%.","48e19e35":"## Metrics beyond simply accuracy","c8b9c5a6":"### Data Loading","63072079":"## Total time spent on website","88159713":"## Lead Source","ffdefa93":"### Converting some binary variables (Yes\/No) to 1\/0","d0c0a33c":"- All entries are 'No'. No Inference can be drawn with this parameter.","6fc85b7a":"## A free copy of Mastering The Interview","f8a23f2a":"## Through Recommendations","da22563e":"## Specialization","36cb7eb1":"**To improve overall lead conversion rate, we need to focus more on improving lead converion of API and Landing Page Submission origin and generate more leads from Lead Add Form.**","6d3b4696":"### Remove Columns which are now generated after we call a lead ","1d885be8":"- Most values are 'India' , we can tell core business is coming from India market ","c486254e":"## Country","b036bd69":"# Feature Selection Using RFE","a41c949f":"Now Data is free from all missing value  and we can start with the analysis ","e3a197a1":"## Newspaper Article","623b8ed9":"# Feature Scaling","f83757d1":"# Finding Optimal Cutoff Point","f55df244":"'What is your current occupation_Housewife' is dropped due to high p value ","abd70278":"- All entries are 'No'. No Inference can be drawn with this parameter.","085a154d":"- 'A free copy of Mastering The Interview' doesn't play role in decision making. ","2699927d":"## **Results**","f5b64f2b":"- Most entries are 'No'. No Inference can be drawn with this parameter.","720d5e40":"## Plotting the ROC Curve","c9d7168c":"### Converted","89ac97dc":"## X Education Forums","92603b11":"- 'SMS Sent' is strong symbol for positive lead ","e1308d4a":"### Lead Origin","ae4eacf8":"Data Dictionary"}}