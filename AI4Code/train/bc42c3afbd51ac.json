{"cell_type":{"03f96f4c":"code","2c7880c6":"code","c5269f0f":"code","1c22e94a":"code","52fa0a49":"code","778f2fe8":"code","2dd1254e":"code","97ba51ea":"code","a1a6bec1":"code","47087776":"code","60ad3f42":"markdown","9c0c7f33":"markdown","de3d5c5c":"markdown","7f1aee43":"markdown","c51e4816":"markdown","0797e9f7":"markdown","99a144a2":"markdown","e7713bbb":"markdown"},"source":{"03f96f4c":"\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport shutil\n\nprint(tf.__version__)","2c7880c6":"# In CSV, label is the first column, after the features, followed by the key\nCSV_COLUMNS = ['X', 'Y']\nFEATURES = CSV_COLUMNS[0:len(CSV_COLUMNS) - 1]\nLABEL = CSV_COLUMNS[0]\n\ndf_train = pd.read_csv('..\/input\/dataTraining.txt', header = None, names = CSV_COLUMNS)\ndf_valid = pd.read_csv('..\/input\/dataTraining.txt', header = None, names = CSV_COLUMNS)\ndf_test = pd.read_csv('..\/input\/dataTraining.txt', header = None, names = CSV_COLUMNS)","c5269f0f":"def make_train_input_fn(df, num_epochs):\n  return tf.estimator.inputs.pandas_input_fn(\n    x = df,\n    y = df[LABEL],\n    batch_size = 128,\n    num_epochs = num_epochs,\n    shuffle = True,\n    queue_capacity = 1000\n  )","1c22e94a":"def make_eval_input_fn(df):\n  return tf.estimator.inputs.pandas_input_fn(\n    x = df,\n    y = df[LABEL],\n    batch_size = 128,\n    shuffle = False,\n    queue_capacity = 1000\n  )","52fa0a49":"def make_prediction_input_fn(df):\n  return tf.estimator.inputs.pandas_input_fn(\n    x = df,\n    y = None,\n    batch_size = 128,\n    shuffle = False,\n    queue_capacity = 1000\n  )","778f2fe8":"def make_feature_cols():\n  input_columns = [tf.feature_column.numeric_column(k) for k in FEATURES]\n  return input_columns","2dd1254e":"def print_rmse(model, df):\n  metrics = model.evaluate(input_fn = make_eval_input_fn(df))\n  print('RMSE on dataset = {}'.format(np.sqrt(metrics['average_loss'])))","97ba51ea":"tf.logging.set_verbosity(tf.logging.ERROR)\n\nOUTDIR = '..\/input\/trained_model'\nshutil.rmtree(OUTDIR, ignore_errors = True) # start fresh each time\n\nmodel = tf.estimator.LinearRegressor(\n      feature_columns = make_feature_cols())#, model_dir = OUTDIR)  because it is Read-only file system\n\nmodel.train(input_fn = make_train_input_fn(df_train, num_epochs = 10))\n\n\n#model = tf.estimator.DNNRegressor(hidden_units = [32, 8, 2],\n#      feature_columns = make_feature_cols(), model_dir = OUTDIR)\n#model.train(input_fn = make_train_input_fn(df_train, num_epochs = 100))","a1a6bec1":"\nprint_rmse(model, df_valid)","47087776":"predictions = model.predict(input_fn = make_prediction_input_fn(df_test))\nfor items in predictions:\n  print(items)","60ad3f42":"<h2> Train and eval input functions to read from Pandas Dataframe <\/h2>","9c0c7f33":"Our input function for predictions is the same except we don't provide a label","de3d5c5c":"<h1>Machine Learning using tf.estimator <\/h1>\n ","7f1aee43":"### Create feature columns for estimator","c51e4816":"Read data created in the previous chapter.","0797e9f7":"<h3> Linear Regression with tf.Estimator framework <\/h3>","99a144a2":"Evaluate on the validation data (we should defer using the test data to after we have selected a final model).","e7713bbb":"### RMSE for estimator"}}