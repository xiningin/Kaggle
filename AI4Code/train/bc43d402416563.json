{"cell_type":{"a9732bd5":"code","caa9ce69":"code","2b7d1999":"code","bc6661ff":"code","ff304aeb":"code","820a9cfd":"code","49736fa6":"code","f9d7223f":"code","05664bdc":"code","283a1e52":"code","b348393d":"code","057f4123":"code","de0db730":"code","6d49ab53":"markdown","6b26334c":"markdown"},"source":{"a9732bd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","caa9ce69":"import matplotlib.pyplot as plt\nimport datetime\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import models, layers","2b7d1999":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","bc6661ff":"#No need to perform that since we do Not need to reshape Now.\n\n#scaler = MinMaxScaler()\n#creditability = scaler.fit_transform(np.array(df['Creditability']).reshape(-1,1))\n#df['Creditability'] = creditability","ff304aeb":"X_l = []\ny_l = []\nN = len(df)\nD = 50\nfor i in range(N-D-21):\n    X_l.append(df.iloc[i:i+D])\n    y_l.append(df.iloc[i+D])\n    \nX = np.array(X_l)\ny = np.array(y_l)\n\nprint(X.shape, y.shape)","820a9cfd":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 100)","49736fa6":"m_x = layers.Input(shape = X_train.shape[1:])\nm_h = layers.LSTM(10)(m_x)\nm_y = layers.Dense(21)(m_h)\nm = models.Model(m_x,m_y)\nm.compile('adam','mse')\nm.summary()","f9d7223f":"history = m.fit(X_train, y_train, epochs=500, validation_data=(X_test, y_test),verbose=0)","05664bdc":"plt.figure(figsize=(15,5))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train','Test'])\nplt.title(\"The model's evaluation\", fontsize=14)\nplt.xlabel('Epoch')\nplt.xlim(2,500)\nplt.ylabel('Loss')\nplt.show()","283a1e52":"pred = []\n\npr = m.predict(np.array(df.iloc[-50:]).reshape(1,50,21))\n\npred.append(pr[0])\n\nfor i in range(1,50):\n    pr = m.predict(np.concatenate((np.array(df[-50+i:]), pred[:]), axis=0).reshape(1,50,21))\n    pred.append(pr[0])\n\nfor i in range(0,250):\n    pr = m.predict(np.concatenate(pred[i:],axis=0).reshape(-1,50,21))\n    pred.append(pr[0])","b348393d":"pred","057f4123":"#Since this Dataset has No Series or objs I can Not make the last chart.\n#The Original Notebook has Timestamp  https:\/\/www.kaggle.com\/jeongbinpark\/lstm-can-we-predict-the-bitcoin-price\/notebook\n\n\n#pred = pd.DataFrame(pred)\n\n#pred = pred.reset_index()\n\n#pred.columns = ['z','Creditability']\n\n#pred.drop(['z'],axis=1,inplace=True)\n\n\n#data = pd.concat([df.reset_index().drop('Purpose',axis=1),pred],ignore_index=True)\n\n#plt.figure(figsize=(17,7))\n#plt.plot(data[-1300:-300])\n#plt.title(\"Creditability\",fontsize=20)\n#plt.text(13200,1,\"predict data\",fontsize=14)\n#plt.text(13015,1,\"- 2020\/12\/31\",fontsize=14)\n#plt.plot(data[-300:])\n#plt.show()\n\n#TypeError: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid","de0db730":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks to Jeong Bin Park for all the code.' )","6d49ab53":"#Code by Jeong Bin Park https:\/\/www.kaggle.com\/jeongbinpark\/creditability-lstm\/notebook\n\n#The Notebook above was made to fix my errors. Thank you Jeong again.\n\n#Original LSTM by Jeong https:\/\/www.kaggle.com\/jeongbinpark\/lstm-can-we-predict-the-bitcoin-price\/notebook","6b26334c":"#Since I got: ValueError: Input 0 is incompatible with layer model: expected shape=(None, 50, 21), found shape=(None, 21)\n\n#I added Jeong's snippet: Reshaping to reshape(1,50,21))."}}