{"cell_type":{"1b894868":"code","d60df982":"code","20df0789":"code","90717cd3":"code","488c31be":"code","487c2d48":"code","d1a1ac22":"code","7dc13240":"code","ee6b5766":"code","0acf72c6":"code","979ee9f3":"code","bdeb7779":"code","09ed06d2":"code","c4ee1335":"code","3dd8beb9":"code","0616f644":"code","50c27008":"code","edbe33de":"code","b19f3d45":"code","b531c00d":"code","6674760d":"code","98dbd11e":"code","f60bcefb":"code","2d549bce":"code","0f8ea4fe":"markdown","b982cafa":"markdown","e928ba3a":"markdown","63fd2402":"markdown"},"source":{"1b894868":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d60df982":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.impute import SimpleImputer as Imputer\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error, accuracy_score\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.svm import SVC\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","20df0789":"import pandas as pd\nprint(pd.__version__)\n# Declare the libraries that will be used\nimport pandas as pd\n# Used to plot the results\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')","90717cd3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","488c31be":"df = pd.read_csv('\/kaggle\/input\/credit-risk-classification-dataset\/customer_data.csv')\ndf.head()","487c2d48":"print(df.dtypes)","d1a1ac22":"df","7dc13240":"\ndf['id'].is_unique","ee6b5766":"df.shape","0acf72c6":"!pip install sklearn\n!pip install numpy","979ee9f3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.impute import SimpleImputer as Imputer\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error, accuracy_score\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.svm import SVC\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","bdeb7779":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","09ed06d2":"df = pd.read_csv('\/kaggle\/input\/credit-risk-classification-dataset\/payment_data.csv')","c4ee1335":"df = df[:10000]","3dd8beb9":"df.head()","0616f644":"df.info()","50c27008":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.impute import SimpleImputer\n\nimport matplotlib.pyplot as plt\nimport os","edbe33de":"df = pd.read_csv('\/kaggle\/input\/credit-risk-classification-dataset\/payment_data.csv')\ndf.to_csv('data.csv')\nprint(df.info())","b19f3d45":"df = df[['OVD_t1','new_balance','pay_normal']]\n\nprint(df.head())\nprint(df.OVD_t1.unique())","b531c00d":"df = df.dropna()","6674760d":"le = preprocessing.LabelEncoder()\n\narr = le.fit_transform(df.OVD_t1)\n\ndf.OVD_t1 = arr\n","98dbd11e":"print(arr)\ndf.head()","f60bcefb":"\nlr = linear_model.LinearRegression()\n\ny = df.new_balance\nX = df.drop(columns='pay_normal')\n\npredict = cross_val_predict(lr, X, y, cv=10)\n\nfig, ax = plt.subplots(figsize=(20, 10))\nax.scatter(y, predict, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()\n\n","2d549bce":"print(df.corr())","0f8ea4fe":"T\u00e4ss\u00e4 lineaarisessa regressiossa k\u00e4ytettiin muuttujina new_balance ja pay_normal muuttujia. T\u00e4ss\u00e4 kohti voidaan todeta, ett\u00e4 t\u00e4m\u00e4 nyt ei antanut mit\u00e4\u00e4n fiksun n\u00e4k\u00f6ist\u00e4 kuvaajaa \/ analyysi\u00e4. Lis\u00e4ksi muuttujat korreloivat toistensa kanssa, niin kuin kuvaajastakin n\u00e4kyy. Joten t\u00e4ss\u00e4 olisi tullut valita erilaiset muuttujat, joiden korrelaatio ei ole samanlaista. Ehk\u00e4 tulevaisuutta ajatellen voidaan n\u00e4hd\u00e4 \/ ennustaa, ett\u00e4 luottoriskin ennustamisessa t\u00e4t\u00e4 aineistoa voidaan k\u00e4ytt\u00e4\u00e4 hyv\u00e4ksi, mutta t\u00e4ss\u00e4 olisi pit\u00e4nyt osata yhdistell\u00e4 dataa esimerkiksi niin, ett\u00e4 olisi otettu lineaariseen regressioon mukaan demograafiset tekij\u00e4t toisesta aineistosta. ","b982cafa":"Seuraavaksi lineaariseen regressioon. ","e928ba3a":"T\u00e4ss\u00e4 harjoitusty\u00f6ss\u00e4 on k\u00e4ytetty aineistona Credit risk classification -dataa, mik\u00e4 sis\u00e4lt\u00e4\u00e4 dataa liittyen asiakastietoihin, jotka voivat olla riskillisi\u00e4 tai riskitt\u00f6mi\u00e4 pankeille\/rahoituslaitoksille. Aineisto sis\u00e4lt\u00e4\u00e4 my\u00f6s asiakkaisiin liittyv\u00e4\u00e4 sosioekonomista dataa. T\u00e4m\u00e4 valikoitui harjoitusty\u00f6n aineistol\u00e4hteeksi, sill\u00e4 aihe on mielenkiintoinen ja t\u00e4rke\u00e4. Pankit ja rahoituslaitokset k\u00e4ytt\u00e4v\u00e4t yh\u00e4eneneviss\u00e4 m\u00e4\u00e4rin erilaisia ennustumia, joiden avulla yritet\u00e4\u00e4n v\u00e4hent\u00e4\u00e4\u00e4 niiden rahoitusriskej\u00e4, kuten sit\u00e4, ett\u00e4 maksukyvytt\u00f6mille asiakkaille ei my\u00f6nnet\u00e4 lainoja tai luottoja. \n\nHarjoitusty\u00f6t\u00e4 varten on ladattu Anaconda omalle koneelle ja harjoitusty\u00f6 toteutetaan Notebookina, kuten oppimisp\u00e4iv\u00e4kirja. K\u00e4yt\u00f6ss\u00e4 on valmis datasetti, joka on per\u00e4isin Kagglesta. \n\nTavoitteena on tehd\u00e4 malli, jonka avulla pystyt\u00e4\u00e4n ennustamaan  \/ l\u00f6yt\u00e4m\u00e4\u00e4n yhteys onko muuttujien newbalance ja pay normal v\u00e4lill\u00e4 yhteytt\u00e4.\n\nAlussa siistit\u00e4\u00e4n v\u00e4h\u00e4n my\u00f6s toista dataa, joka koostuu customer_data tiedostosta. Data on valmiiksi aika siisti\u00e4. \n\nDatasetit:\n- payment_data.csv: \ncustomer\u2019s card payment history. id: customer id OVDt1: number of times overdue type 1\nOVDt2: number of times overdue type 2 OVDt3: number of times overdue type 3\nOVDsum: total overdue days paynormal: number of times normal payment\nprodcode: credit product code prodlimit: credit limit of product\nupdatedate: account update date newbalance: current balance of product\nhighestbalance: highest balance in history reportdate: date of recent payment\n- customer_data.csv:\ncustomer\u2019s demographic data and category attributes which have been encoded. \nCategory features are fea1, fea3, fea5, fea6, fea7, fea9.\nlabel is 1, the customer is in high credit risk\nlabel is 0, the customer is in low credit risk\n\nTiedot otettu sielt\u00e4, mist\u00e4 data per\u00e4isin Kagglesta. ","63fd2402":"Datan siistimist\u00e4 tehty, vaikka se valmiiksi oli jo siisti\u00e4."}}