{"cell_type":{"60cef79c":"code","d3989476":"code","e1fcefdf":"code","2b3869b8":"code","fc0938d9":"code","7e1766cf":"code","11e4002a":"code","359856bd":"code","5d80a5dd":"code","433a805d":"code","cf44c9b5":"code","b5c04f11":"code","b753c5f6":"code","7ae5f3a1":"code","19b132f8":"code","c5714b80":"code","eff70b39":"code","ea1ebed5":"code","d0fed1e2":"code","bac41018":"code","96fadfa9":"code","b4776eb4":"code","3d11a0a2":"code","b4abef36":"code","88b02e09":"code","d52caa3a":"code","8e880576":"code","e8679871":"code","3e9a8736":"code","0f773eff":"code","3821cbb0":"code","95a9be94":"code","4e0bbf80":"code","ecfc9a8d":"code","3af23ab0":"code","e01fdefd":"code","1ad3595a":"code","e3db27f9":"markdown","bd06f3af":"markdown","a95ec884":"markdown","9843fc58":"markdown","bfeb5f97":"markdown","af406c39":"markdown"},"source":{"60cef79c":"\n#importing numpy package\nimport numpy as np\n\n#checking numpy version\nprint('Installed NumPy version:',np.__version__)\n\n#Creating list of integers\nl=list(range(20))\n\n#list in python works very much like arrays in C\nprint('\\nComplete list\\n','-'*30,'\\n',l)\n\n#Checking list data type\nprint('\\ndata type of a list value:',type(l[0]))\n\n#Accessing individual list elements\nprint('\\n4th element of the list:',l[3])\n\n#Creating list copy\nl1=l.copy()\n\n#A list can hold any data type as its element\n#Adding items to an existing list\nl.append(['a','b','c'])\nl.append('xx')\nl.append(0.3456)\nprint('\\nComplete list\\n','-'*30,'\\n',l)\nprint('\\nData type of 21st object in the list:',type(l[20]))","d3989476":"##Understanding Python list...\n\n#unlike C array, python list can hold different data types within same list\nl2=[1,'rahul',4.555,'amit','c']\nprint('Each element in List l2:\\n',l2)\n\n#creating a list of data types for each element in list l1\nl2_dtype=[type(i) for i in l2]\nprint('\\nData type of each element in List l2:\\n',l2_dtype)\nprint('\\nnotice both \"amit\" and \"c\" are considered string')","e1fcefdf":"#Converting data type of each element of the list to string\nl3=[str(i) for i in l]\nprint(l3)","2b3869b8":"##Operations on lists\n\n#Add operator concatenates two lists\nprint('Adding two lists:\\n',l+l1)\n\n#Other mathematical operations will give error\n#below line will give error\n\n#print('Subtracting two lists:\\n',l-l1) ","fc0938d9":"#importing array package\nimport array\n\n#Creating an integer array\nar=array.array('i',l1)\nar\n#output describes ar an array of type integer 'i'","7e1766cf":"#Creating array using numpy array() function\n#range([start], stop[, step]) function start takes 0 as default\nar1=np.array(range(1,20,3))\nar1","11e4002a":"##Python variables are pointers.\n\n#When we assign one variable to another, we actually copy pointers or reference to other variable \nar=ar1\nprint('array ar:\\n',ar,type(ar))\nfor i in range(5):\n    ar1[i]=ar1[i]+1\nprint('array ar1:\\n',ar1)\nprint('array ar:\\n',ar)\n\nprint('\\nNote: Change done on array ar1 reflects in array ar')","359856bd":"##How to copy array\n\n#Creating a copy of an array. And not just copying pointer value \nar=np.array(ar1)\n#can also use copy function ar=ar1.copy()\n\nprint('array ar:\\n',ar)\nfor i in range(5):\n    ar1[i]=ar1[i]+1\nprint('array ar1:\\n',ar1)\nprint('array ar:\\n',ar)\n\nprint('\\nNote: In this case changes done on array ar1 not reflecting in array ar')","5d80a5dd":"##Creating a blank array\n\n#very useful when you don't know number of items you want to store\nAR=np.array([])\nAR1=np.array([])\nAR2=np.empty((2,3),int)\nprint('blank array AR:\\n',AR,',type:',type(AR))\n\n#below assignment converts array type to list\nAR=[1,2]\nprint('array AR:\\n',AR,',type:',type(AR))\nAR.append(range(5))\nprint('array AR:\\n',AR,type(AR))\n\n#Populating AR1 as an array\nAR1=np.append(AR1,[0,1,2,3,4,5])\nprint('array AR1:\\n',AR1,',type:',type(AR1))","433a805d":"##Creating a 2D array\n\nAR2=np.array([range(i,i+5) for i in ar])\nprint(AR2)\n#accessing individual element in 2D array\n#remember index starts from AR2[0][0]\nprint('Value from 4th row and 4th Column:',AR2[3][3])","cf44c9b5":"#creating a 2D array with variable number of row items\nAR2_vr=np.array([range(i,i+100,i+3) for i in ar])\nprint(AR2_vr)\n#we can also call this 1D array of variable length ranges\n#accessing complete 2D array\nfor i in range(5):\n    for j in AR2_vr[i]:\n          print(j,end=',')\n    print()","b5c04f11":"##Creating a 3D array\n\n#1D array: collection of single items\n#2D array: collection of 1D arrays\n#3D array: collection of 2D arrays\nAR3=np.array([AR2+i for i in range(3)])\nprint(AR3)\n#accessing an element in 3D array\nprint('Value from 3rd row and 2nd Column of 2nd 2D array :',AR3[1][2][1])","b753c5f6":"##Creating a 4D array\n\n#4D array: collection of 3D arrays\nAR4=np.array([AR3+i for i in range(3)])\nprint(AR4)\n#accessing an element in 4D array\nprint('Value from 3rd row and 2nd Column 2st 2D array within 2nd 3D array :',AR4[1][1][2][1])","7ae5f3a1":"##Creating a floating point array\n\n#Random function generates floating value x (0.0 <= x < 1.0)\nimport random as rd\nAR_fp=np.array([round(100*rd.random(),2) for i in range(10)])\nprint(AR_fp,'\\n','Arrary data type:',type(AR_fp[0]))","19b132f8":"#creating an array with combination of integer and floating point values\n#all integers are upcasted as floating values\nAR_fp1=np.array([1,2.3,3,4,5,6.7,8])\nprint(AR_fp1,'\\n','Arrary data type:',type(AR_fp1[0]))","c5714b80":"#declaring an array with initialization\nAR_dz=np.zeros((3,5),dtype=int)\nprint(AR_dz)","eff70b39":"#declaring an array with initialization\nAR_do=np.ones((3,5),dtype=np.float64)\nprint(AR_do)","ea1ebed5":"#declaring an array with given specific initialization\n#We are initializing a float value, but downcasting using integer value\nAR_ini=np.full((3,5),3.5,dtype=np.int32)\nprint(AR_ini)","d0fed1e2":"#declaring an array of complex numbers\nAR_i=np.full((3,5),3.5,dtype=np.complex64)\nprint(AR_i)","bac41018":"#arange() is numpy function which works same as range() function\nAR_rng=np.arange(0,45,3)\nprint(AR_rng)","96fadfa9":"#using numpy linspace() function\n#gives evenly spaced float values between start and stop\nAR_lns=np.linspace(0,8,10)\nprint(AR_lns)","b4776eb4":"#using random() function with numpy\nAR_nrd=np.random.random((3,3))\nprint(AR_nrd)","3d11a0a2":"#creating a normal distribution (bell curve) with mean 0 and standard deviation 1\nAR_nor=np.random.normal(0,1,(3,4))\nprint(AR_nor)","b4abef36":"#creating a random array of integers\nAR_rint=np.random.randint(0,20,(4,4))\nprint(AR_rint)","88b02e09":"#creating identity matrix (array)\nAR_imtx=np.eye(5)\nprint(AR_imtx)","d52caa3a":"#creating an empty array\n#displayed values are values existing in memory\nAR_emp=np.empty((3,4))\nprint(AR_emp)","8e880576":"#creating a diagonal matrix\nAR_diag=np.diag((1,2,3,4))\nprint(\"Diagonal matrix with diagonal elements (1,2,3,4):\\n\",'-'*50,'\\n',AR_diag)","e8679871":"##Creating Random Arrays\n\n#seed function is used called while initializing Randomstate\n#a constant value ensures same random combinations will be generated every time we run below code\n#you can comment seed() function to generate different combinations each time\nnp.random.seed(1)\nx1=np.random.randint(-15,15,size=10)\nprint('\\n1D random array\\n','-'*25,'\\n',x1)\nx2=np.random.randint(100,size=(3,4))\nprint('\\n2D random array\\n','-'*25,'\\n',x2)\nx3=np.random.randint(10,size=(3,4,6))\nprint('\\n3D random arrary\\n','-'*25,'\\n',x3)","3e9a8736":"##Array Attributes\n\n#ndim gives array dimensionality\nprint('dimensionality of x1, x2, x3:',x1.ndim,'D,',x2.ndim,'D,',x3.ndim,'D')\n#size gives number of elements in an array\nprint('size of x1, x2, x3:',x1.size,',',x2.size,',',x3.size)\n#shape gives number of rows, columns, etc. in a given array\nprint('shape of x1, x2, x3:',x1.shape,',',x2.shape,',',x3.shape)\n#dtype gives data type of an array\nprint('data type of x1, x2, x3:',x1.dtype,',',x2.dtype,',',x3.dtype)\n#itemsize gives byte size of each array element\nprint('Each item size in bytes of x1, x2, x3:',x1.itemsize,' bytes,',x2.itemsize,' bytes,',x3.itemsize,' bytes')\n#nbytes gives byte size of an array\nprint('Array size in bytes of x1, x2, x3:',x1.nbytes,' bytes,',x2.nbytes,' bytes,',x3.nbytes,' bytes')\n#nbyte calculation (nbyte=size*itemsize)\nbsize_x1=x1.size*x1.itemsize\nbsize_x2=x2.size*x2.itemsize\nbsize_x3=x3.size*x3.itemsize\nprint('Array size in bytes of x1, x2, x3:(size*itemsize)',bsize_x1,' bytes,',bsize_x2,' bytes,',bsize_x3,' bytes')","0f773eff":"##Array Flags\n\n#C_CONTIGUOUS: The data is in a single, C-style contiguous segment\n#F_CONTIGUOUS: The data is in a single, Fortran-style contiguous segment\n#OWNDATA: The array owns the memory it uses or borrows it from another object\n#WRITEABLE: The data area can be written to. Setting this to False locks the data, making it read-only\n#ALIGNED: The data and all elements are aligned appropriately for the hardware\n#UPDATEIFCOPY: This array is a copy of some other array. \n#When this array is deallocated, the base array will be updated with the contents of this array\nprint('Flags associated with array x1:\\n','-'*50,'\\n',x1.flags)\n#setting WRITEABLE FLAG to false\n#Array items can't be edited if WRITEABLE flag is false\nx1.flags.writeable=0\nprint('x1 flags after setting WRITEABLE flag to false:\\n','-'*50,'\\n',x1.flags)","3821cbb0":"##Understanding array indices\n\nprint('Array x1:',x1)\nprint('Arrary x1 3rd element:',x1[2])\n\n#Negative array indices\n#negative indices are used to read array in reverse order. x1[-1] will fetch last element\nprint('last element of x1:',x1[-2])\n\n#indices for 2D array\nprint('Array x2:\\n',x2)\nprint('Array x2 element at 2nd row and 3rd column:',x2[1,2])\n\n#indices for 3D array\nprint('Array x3:\\n',x3)\nprint('Array x3 element at 2nd 2D array 2nd row and 3rd column:',x3[1,1,2])","95a9be94":"##Slicing Arrays\n#Slicing 1D Array\n\n#Array slicing uses following syntex x[start:stop:step]\nprint('Array x1:',x1)\n\n#Slicing a 1D array (fetching alternate elements)\ns_x1=x1[0:x1.size:2]\nprint('Sliced x1 array:',s_x1)\n\n#accessing reversed array using slicing\nrev_x1=x1[::-1]\nprint('Reverse x1:',rev_x1)\n\n#using negative value as step\nrevi_x1=x1[6::-2]\nprint('Reverse step x1:',revi_x1)","4e0bbf80":"#Slicing 2D Array\n\n#2D array x2\nprint('Array x2:\\n',x2)\n\n#accessing complele 2D array using slicing\nprint('Accessing complete array x2 using slicing:\\n',x2[:,:])\n\n#Excluding first row of 2D array x2\nprint('Excluding first row of array x2:\\n',x2[1:,:])\n\n#accessing alternte rows of 2D array\nprint('Accessing alternate rows of array x2:\\n',x2[::2,::])\n\n#accessing alternte columns of 2D array\nprint('Accessing alternate cols of array x2:\\n',x2[::,::2])\n\n#accessing last row of  2D array using negative indexing\nprint('Accessing last row of array x2:\\n',x2[-1::,::])\n\n#accessing last 2 cols of 2D array using negative indexing\nprint('Accessing last 2 cols of array x2:\\n',x2[::,-2::])","ecfc9a8d":"##Combining indices and slicing\n\nprint('Array x2:\\n',x2)\n\n#accessing 3rd col of array x2 by combining slicing and indices\nprint('Accessing 3rd col of Array x2:\\n',x2[:,2])\n\n#accessing last 2 elements of 4th col from array x2 by combining slicing and indices\nprint('Accessing last 2 elements of 4th col from Array x2:\\n',x2[1:,3])","3af23ab0":"##Reshaping Arrays\n\n#Reshaping 1D array into 2D array\nprint('Array x1:\\n',x1)\nprint('Reshaped Array x1:\\n',x1.reshape((2,5)))\n\n#Reshaping 2D array into 1D array\nprint('Array x2:\\n',x2)\nprint('Reshaped Array x2 - 2D to 1D:\\n',x2.reshape((x2.shape[0]*x2.shape[1])))\n\n#Reshaping 2D array into 2D array of different shape \nprint('Reshaped Array x2 - 2D changed shape:\\n',x2.reshape((x2.shape[1],x2.shape[0])))\n\n\nprint('Note: Number elements in reshaped array must be same as base array')\n#below line will through error\n#print('Reshaped Array x1:',x1.reshape((4,2)))","e01fdefd":"##Array Concatenation\n\nprint('Array x1:\\n',x1)\nprint('Concatenating Array x1 with Array x1:\\n',np.concatenate([x1,x1]))\nprint('Note: Only Arrays with same number of dimensions can be concatenated')\n#therefore below code will through error\n#print('Concatenating Array x1 with Array x2:\\n',np.concatenate([x1,x2]))\n\n#concatenating two 2D arrays\nprint('Array x2:\\n',x2)\nprint('Concatenating x2 with x2:\\n',np.concatenate([x2,x2]))\n\n#horizontally concatenating two 2D arrays\nprint('Horizontally concatenating x2 with x2:\\n',np.hstack([x2,x2]))","1ad3595a":"##Array Splitting\n\n#splitting 1D array\nprint('Array x1:\\n',x1)\nprint('Splitting Array x1 at index 4 and 7:\\n',np.split(x1,[4,7]))\n\n#vertically splitting 2D array\nprint('Array x2:\\n',x2)\nprint('Splitting x2 vertically into individual rows:\\n',np.vsplit(x2,[1,2]))\n\n#horizontally splitting 2D array\nprint('Splitting x2 horizontally into 3 parts:\\n',np.hsplit(x2,[1,2]))\nprint('Splitting x2 horizontally into 4 parts:\\n',np.hsplit(x2,[1,2,3]))\nprint('Note: If we give N indices to split function N+1 arrays will be generated')","e3db27f9":"<H3><a id=\"section2\">Introduction to array<\/a><\/H3>\n<ol>\n    <li>Creating an integer array<\/li>\n    <li>Creating an array using numpy array() function<\/li>\n    <li>range() function<\/li>\n    <li>Python variables are pointers<\/li>\n    <li>How to copy array?<\/li>\n    <li>Creating a blank array<\/li>\n<\/ol> \n<a href=\"#content\"><b>BACK TO CONTENT<\/b><\/a>","bd06f3af":"<H3><a id=\"section1\">Understanding Python list<\/a><\/H3>\n<ol>\n    <li>Checking NumPy version<\/li>\n    <li>Creating list of integers<\/li>\n    <li>Accessing individual list elements<\/li>\n    <li>Creating list copy<\/li>\n    <li>Single list can hold different data types<\/li>\n    <li>Adding items to an existing list<\/li>\n    <li>Converting datatype of an existing list<\/li>\n    <li>Concatenating two lists<\/li>\n<\/ol> \n<a href=\"#content\"><b>BACK TO CONTENT<\/b><\/a>","a95ec884":"<H1><b>Python Beginners Series: Part 1<\/b><\/H1>(Work in progress....)\n<H2><I><a href=\"http:\/\/www.numpy.org\">NumPy<\/a><\/I> (Numerical Python) TUTORIAL <\/H2>\nNote: Fork the notebook for quick hands on \n<H3><u><a id=\"content\">CONTENT<\/a><\/u><\/H3>\n<ul>\n    <li><H3><a href=\"#section1\">Understanding Python list<\/a><\/H3><\/li>\n<ol>\n    <li>Creating list of integers<\/li>\n    <li>Accessing individual list elements<\/li>\n    <li>Creating list copy<\/li>\n    <li>Single list can hold different data types<\/li>\n    <li>Adding items to an existing list<\/li>\n    <li>Converting datatype of an existing list<\/li>\n    <li>Concatenating two lists<\/li>\n<\/ol> \n    <li><H3><a href=\"#section2\">Introduction to array<\/a><\/H3><\/li>\n<ol>\n    <li>Creating an integer array<\/li>\n    <li>Creating an array using numpy array() function<\/li>\n    <li>range() function<\/li>\n    <li>Python variables are pointers<\/li>\n    <li>How to copy array?<\/li>\n    <li>Creating a blank array<\/li>\n<\/ol> \n    <li><H3><a href=\"#section3\">Understanding 2D,3D and 4D arrays<\/a><\/H3><\/li>\n<ol>\n    <li>Creating a 2D array<\/li>\n    <li>creating a 2D array with variable number of row items<\/li>\n    <li>Creating a 3D array<\/li>\n    <li>Creating a 4D array<\/li>\n    <li>Creating a floating point array<\/li>\n    <li>Declaring an array with initialization<\/li>\n    <li>Declaring an array of complex numbers<\/li>\n    <li>Using <b>arange(),linspace(),random(),normal(),randint(),eye(),empty(),diag()<\/b> functions<\/li>\n<\/ol> \n    <li><H3><a href=\"#section4\">Working with arrays<\/a><\/H3><\/li>\n<ol>\n    <li>Array Attributes<\/li>\n    <li>Array Flags<\/li>\n    <li>Array indices<\/li>\n    <li>Slicing Arrays<\/li>\n    <li>Combining of Indices and Slicing<\/li>\n    <li>Reshaping Arrays<\/li>\n    <li>Array Concatenation<\/li>\n    <li>Array Splitting<\/li>\n<\/ol>\n<\/ul>\n","9843fc58":"<H3><a id=\"section3\">Understanding 2D,3D and 4D arrays<\/a><\/H3>\n<ol>\n    <li>Creating a 2D array<\/li>\n    <li>creating a 2D array with variable number of row items<\/li>\n    <li>Creating a 3D array<\/li>\n    <li>Creating a 4D array<\/li>\n    <li>Creating a floating point array<\/li>\n    <li>Declaring an array with initialization<\/li>\n    <li>Declaring an array of complex numbers<\/li>\n    <li>Using <b>arange(),linspace(),random(),normal(),randint(),eye(),empty(),diag()<\/b> functions<\/li>\n<\/ol> \n<a href=\"#content\"><b>BACK TO CONTENT<\/b><\/a>","bfeb5f97":"<H3><a id=\"section4\">Working with arrays<\/a><\/H3>\n<ol>\n    <li>Array Attributes<\/li>\n    <li>Array Flags<\/li>\n    <li>Array indices<\/li>\n    <li>Slicing Arrays<\/li>\n    <li>Combining of Indices and Slicing<\/li>\n    <li>Reshaping Arrays<\/li>\n    <li>Array Concatenation<\/li>\n    <li>Array Splitting<\/li>\n<\/ol>\n<a href=\"#content\"><b>BACK TO CONTENT<\/b><\/a>","af406c39":"Check below links for seed() function and Randomstate\n* [seed() function](https:\/\/docs.scipy.org\/doc\/numpy-1.13.0\/reference\/generated\/numpy.random.seed.html)\n* [Randomstate](https:\/\/docs.scipy.org\/doc\/numpy-1.13.0\/reference\/generated\/numpy.random.RandomState.html#numpy.random.RandomState)"}}