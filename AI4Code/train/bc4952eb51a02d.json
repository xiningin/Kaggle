{"cell_type":{"274dffab":"code","c9b259e4":"code","c9412215":"code","c05c88ab":"code","b2ae60f8":"code","be0708d8":"code","5d82b60d":"code","f0bd9409":"code","5c277c21":"code","ffda572b":"code","2f89f9a1":"code","989f7857":"code","115b6bf9":"code","f317e4df":"code","0251b127":"code","b6eb9a10":"code","8be8cb53":"code","7519c0bc":"code","e1ccbeb5":"code","dab6ca1b":"code","00967458":"code","e6e4d5a2":"code","93884524":"code","f05ade06":"code","cd191c85":"code","31523b04":"code","ab2a043e":"code","2d6204ec":"markdown","ef9d156b":"markdown","e91f6cc8":"markdown","83624ee5":"markdown"},"source":{"274dffab":"from fastai import *\nfrom fastai.vision import *\nfrom bs4 import BeautifulSoup as bs","c9b259e4":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","c9412215":"def my_len(*args):\n    return [len(x) for x in args]","c05c88ab":"import shutil\n\npath_cpy = \"\/kaggle\/input\/face-mask-detection\"\npath_pst = \"\/kaggle\/working\/data\"\n\nshutil.copytree(path_cpy,path_pst)","b2ae60f8":"def gen_box(obj):\n#     Getting bounding box coordinates\n    xmin = int(obj.find('xmin').text)\n    xmax = int(obj.find('xmax').text)\n    ymin = int(obj.find('ymin').text)\n    ymax = int(obj.find('ymax').text)\n    \n    return [xmin, ymin, xmax, ymax]\n\ndef gen_label(obj):\n    if obj.find('name').text == \"with_mask\":\n        return \"mask\" #     for without_mask label set to 1\n    elif obj.find('name').text == \"mask_weared_incorrect\":\n        return \"incorrect_mask\"     # for mask_weared_incorrect label set to 2\n    return \"no_mask\" #     for without_mask label set to 0","be0708d8":"coordinates = []\nlabels = []\nname= []\nsize = []\ndef gen_list(path):\n    xml_list  = list(sorted(os.listdir(path+\"\/annotations\")))\n    img_list = list(sorted(os.listdir(path+\"\/images\")))\n    total = len(img_list)\n    assert len(img_list) == len(xml_list)\n    counter = 0\n    for xml in xml_list:\n        with open(path+f\"\/annotations\/{xml}\") as file:\n            data = file.read()\n            soup = bs(data, \"xml\")\n            xml_objs = soup.find_all('object')\n            counter +=1\n            for i in xml_objs:\n                coordinates.append(gen_box(i)) \n                labels.append(gen_label(i))\n                name.append(soup.find('filename').text)\n        print(f\"file processed {counter} \/ {total}...\")    \n                \ngen_list(path_pst)                ","5d82b60d":"my_len(name,labels,coordinates)","f0bd9409":"labels_set = set(labels)\nlabels_set","5c277c21":"# Creating folder\ndef gen_folder(label_set, path):\n    import shutil\n    os.mkdir(path)\n    for l in label_set:\n            os.mkdir(path+f\"\/{l}\")\n            ","ffda572b":"path = \"\/kaggle\/working\/data2\"\ngen_folder(labels_set,path)","2f89f9a1":"#cropping images\nimport PIL\nfor i in range(len(name)):\n    im = PIL.Image.open(path_pst+f\"\/images\/{name[i]}\") \n    w,h = im.size\n#     print(path_pst+f\"\/images\/{name[i]}\")\n#     print(coordinates[i])\n#     [xmin,ymax,xmax ,ymin]\n#     coordinates[i] = [coordinates[i][0],coordinates[i][1],w-coordinates[i][2], h-coordinates[i][3] ]\n    coordinates[i] = [coordinates[i][0],coordinates[i][1],coordinates[i][2],coordinates[i][3]]\n#     print(coordinates[i])\n    im = im.crop(box = coordinates[i])\n    \n    if labels[i] == \"mask\":\n        shutil.copy(path_pst+f\"\/images\/{name[i]}\", path+f\"\/mask\/{name[i]}\")\n        im = im.save(path+f\"\/mask\/{i}.png\")\n    elif labels[i] == \"incorrect_mask\":\n        im = im.save(path+f\"\/incorrect_mask\/{i}.png\")\n    else:\n        im = im.save(path+f\"\/no_mask\/{i}.png\")\n        \n    print(f\"Processed {i}th image...\") ","989f7857":"data = ImageDataBunch.from_folder(path = path,size = 64, valid_pct = 0.2).normalize()","115b6bf9":"data.show_batch(rows = 3, figsize=(7,6))","f317e4df":"data.classes","0251b127":"model = create_cnn(data, models.resnet50, metrics = error_rate)","b6eb9a10":"model.fit_one_cycle(5)","8be8cb53":"model.lr_find()","7519c0bc":"model.recorder.plot()","e1ccbeb5":"model.save('\/kaggle\/working\/stage-1')","dab6ca1b":"model.load('\/kaggle\/working\/stage-1');","00967458":"model.unfreeze()\nmodel.fit_one_cycle(2, max_lr = slice(1e-3, 1e-02))","e6e4d5a2":"model.save('\/kaggle\/working\/stage-2')","93884524":"model.lr_find()","f05ade06":"model.recorder.plot()","cd191c85":"model.fit_one_cycle(2, max_lr = slice(1e-3, 1e-2))","31523b04":"model.load(\"\/kaggle\/working\/stage-2\")","ab2a043e":"# model.export(\"\/kaggle\/working\/model.pkl\")","2d6204ec":"# Getting data from xml file","ef9d156b":"# Importing libraries","e91f6cc8":"# Arranging Data and preprocessing of images","83624ee5":"# Copying Data from \/kaggle\/input to \/kaggle\/working"}}