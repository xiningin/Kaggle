{"cell_type":{"feb7556e":"code","c6dbbd36":"code","4d08f790":"code","64e47d72":"code","0d191ca7":"code","326cf12f":"code","d6acb303":"code","580b9b77":"code","362493f7":"code","5355295b":"code","5e663722":"markdown","9b6ed46f":"markdown","0230c2fc":"markdown"},"source":{"feb7556e":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)","c6dbbd36":"import random\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import layers\nfrom keras import Model\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# import Inception V3 for transfer learning\n\nfrom keras.applications.inception_v3 import InceptionV3","4d08f790":"training_dir = \"..\/input\/cat-and-dog\/training_set\/training_set\/\"\ntesting_dir = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/\"\n\ntraining_cats_dir = \"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\/\"\ntraining_dogs_dir = \"..\/input\/cat-and-dog\/training_set\/training_set\/dogs\/\"\n\ntesting_cats_dir = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/cats\/\"\ntesting_dogs_dir = \"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/dogs\/\"\n\nprint(len(os.listdir(training_cats_dir)))\nprint(len(os.listdir(training_dogs_dir)))\nprint(len(os.listdir(testing_cats_dir)))\nprint(len(os.listdir(testing_dogs_dir)))","64e47d72":"base_convnet = InceptionV3(input_shape = (150,150,3),\n                           include_top = False,\n                           weights = \"imagenet\")\n\nbase_convnet.trainable = False \n\nlast_layer = base_convnet.get_layer(\"mixed7\")\n\nlast_output = last_layer.output","0d191ca7":"# build a model based on the Inception V3\n# add 2 hidden dense layers with ELU activation and He initializer\n# add 10% dropout rate\n\nx = layers.Flatten()(last_output)\nx = layers.Dense(1024, activation=\"elu\", kernel_initializer=\"he_normal\")(x)\nx = layers.Dense(512, activation=\"elu\", kernel_initializer=\"he_normal\")(x)\nx = layers.Dropout(0.1)(x)\nx = layers.Dense(1, activation=\"sigmoid\")(x)\n\nmodel = Model(base_convnet.input, x)\n\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n\n# model.summary()\n# keras.utils.plot_model(model)","326cf12f":"# callback function, stop training if there is no improvement after 5 epochs \n\nearly_stopping_cb = keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)","d6acb303":"# image generator with data augmentation to increase the size of training set\n\ntrain_datagen = ImageDataGenerator(rescale=1.0\/255.0,\n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode=\"nearest\")\n\ntrain_generator = train_datagen.flow_from_directory(training_dir,\n                                                   target_size=(150,150),\n                                                   batch_size=64,\n                                                   class_mode=\"binary\")\n\nvalidation_datagen = ImageDataGenerator(rescale=1.0\/255.0)\n\nvalidation_generator = validation_datagen.flow_from_directory(testing_dir,\n                                                 target_size=(150,150),\n                                                 batch_size=32,\n                                                 class_mode=\"binary\")","580b9b77":"# train the model\n\nhistory = model.fit(train_generator,\n                   epochs=20,\n                   verbose=1,\n                   validation_data=validation_generator,\n                   callbacks=early_stopping_cb)","362493f7":"# save the model\n\nmodel.save(\"dog_or_cat_with_inceptionv3.h5\")","5355295b":"# plot accuracy and loss\n\nimport matplotlib.pyplot as plt\n\nacc = history.history[\"accuracy\"]\nval_acc = history.history[\"val_accuracy\"]\nloss = history.history[\"loss\"]\nval_loss = history.history[\"val_loss\"]\n\nepochs = range(1, len(acc) + 1)\n\n# accuracy\n\nplt.plot(epochs, acc, \"b\", label=\"Training accuracy\")\nplt.plot(epochs, val_acc, \"b--\", label=\"Validation accuracy\")\nplt.title(\"Training and validation accuracy\")\nplt.legend()\nplt.show()\n\n# loss\n\nplt.plot(epochs, loss, \"r\", label=\"Training loss\")\nplt.plot(epochs, val_loss, \"r--\", label=\"Validation loss\")\nplt.title(\"Training and validation loss\")\nplt.legend()\nplt.show()","5e663722":"### The Result \n\n**After training my new model with InceptionV3's layers with much fewer epochs, I was able to get considerably higher accuracy for both training and validation set.**\n\nSo at this point, I can conclude that this transfer learning approach is far more superior than training my own model from scratch with a very small dataset. This approach save me lots of time and also the cost of training with GPU.","9b6ed46f":"### This is the schematic diagram of InceptionV3 model.\n\n![](https:\/\/www.researchgate.net\/profile\/Masoud_Mahdianpari\/publication\/326421398\/figure\/fig6\/AS:649353890889730@1531829440919\/Schematic-diagram-of-InceptionV3-model-compressed-view.png)","0230c2fc":"## Dog or Cat Image Detection with Transfer Learning\n\n![](https:\/\/www.mypet.com\/img\/diabetes\/2-5-1-DogCatLookingAtCamera-750x250.jpg)\n\nIn this notebook, I will experiment with a technique called transfer learning on the dog and cat dataset to see how significant its impact has on the model.\n\nThis technique is recommended by researchers and experts in deep learning when you are trying to train a model to solve similar tasks but only have a small dataset.\n\nIn this case, I have a pretty small dataset consisting of only 8000 training images and 2000 testing images. So to deal with this \"small dataset\" issue, I am going to:\n\n- Use data augmentation to make the training set larger.\n- Reuse the Inception V3 model's lower layers for my model.\n\n### For comparison, I trained the below CNN model on Google Colab's GPU with 50 epochs and data augmentation.\n\nCheck out the notebook for this model [here](https:\/\/github.com\/thanhdtnguyen\/Deep-Learning-with-Keras-Tensorflow\/blob\/master\/convnet_dog_cat_with_augmentation.ipynb)\n\nAfter about 2 hours, I got 0.9053 accuracy on training set and 0.8820 on validation set.\n\n![Screen%20Shot%202020-08-30%20at%2011.58.29.png](attachment:Screen%20Shot%202020-08-30%20at%2011.58.29.png)\n\n### Now, let's see the result after training my model with InceptionV3's layers."}}