{"cell_type":{"b6ec1c9f":"code","73c775d5":"code","e9f1445a":"code","355ab3be":"code","0fa1ad9d":"code","84099e85":"code","4c4c3437":"code","d19e46db":"code","7da02338":"code","feca3adc":"code","6b683de8":"code","ce531623":"code","d7334ec2":"code","4cb82e7c":"code","91e86ba3":"code","b2229734":"code","bd259c5f":"code","ff0402e1":"code","86127f24":"code","5dbd507c":"code","379d8752":"code","74e743dd":"code","4a136f9a":"code","e9440c0b":"code","09f38ed8":"code","61df81cb":"code","6ff143a5":"code","4d7af966":"code","cb7e6746":"code","21211a38":"code","9a0c93c9":"code","22b44f31":"code","6b9d8bb8":"code","dfce7204":"code","7dafc3c1":"code","014b7e62":"code","2ab83303":"code","968c3f06":"code","6d2576f1":"code","fc932089":"code","5cc92f8f":"code","9e35e5d8":"code","297b7eac":"code","716f1e4d":"code","6a8700fa":"code","2cb3598c":"code","38ab02c5":"code","7137ad44":"code","99a711ab":"code","f2c3131a":"code","bbd6c470":"code","728b4fef":"code","8dd36f46":"code","15f8d08a":"code","03890cee":"code","414337ce":"code","5063cc4a":"code","dac129d4":"markdown","1467637e":"markdown"},"source":{"b6ec1c9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.\n\n\n\n# Writtin by Omar \n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","73c775d5":"# DO NOT TOUCH\n# Writtin by Omar \n# load train dataset\n\ntrain_data = pd.read_csv('..\/input\/train.csv')","e9f1445a":"# DO NOT TOUCH\n# Writtin by Omar \n# load test dataset\n\ntest_data = pd.read_csv('..\/input\/test.csv')","355ab3be":"# DO NOT TOUCH\n# Writtin by Omar \n# Create dataframe for train dataset\n\ntrain = pd.DataFrame(train_data)","0fa1ad9d":"# DO NOT TOUCH\n# Writtin by Omar \n# Create dataframe for test dataset\n\ntest = pd.DataFrame(test_data)","84099e85":"# Writtin by Omar \n# check shape \n\ntrain.shape","4c4c3437":"# Writtin by Omar \n# chack shape\n\ntest.shape","d19e46db":"# DO NOT TOUCH\n# Writtin by Omar \n# concat -> Join the two dataframes togather \n\ndf = pd.concat([train, test])","7da02338":"# Writtin by Omar \n# View dataframe\n\ndf.head()","feca3adc":"# Writtin by Omar \n# chack shape\n\ndf.shape","6b683de8":"# Writtin by Omar \n# chack tail to see NaN valuse at SalePrice (targat) \n# To chack if the test_data at the end of the new dataframe \n\ndf.tail()","ce531623":"# Writtin by Omar \n# These are the most important faetures that we have choosn beased on our domain knewledge \n\n# ['OverallQual', 'GrLivArea', 'GarageCars',\n#                     'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n#                     'YearBuilt', 'YearRemodAdd',\n#                     'Fireplaces', 'BsmtFinSF1', 'SalePrice']","d7334ec2":"# checking the data types of our favoret features, you can r use it at any stage of your code, copy and paste.\n\nprint('OverallQual is type: ', df.OverallQual.dtypes)\nprint('GrLivArea is type: ', df.GrLivArea.dtypes)\nprint('GarageCars is type: ', df.GarageCars.dtypes) # couldn't be converted to int because of the nan in the test data,\n# it's all int exept the nan, and if it wasn't, we can change the datatype 'in both dataframes'after splitting.\nprint('TotalBsmtSF is type: ', df.TotalBsmtSF.dtypes)\nprint('1stFlrSF is type: ', df['1stFlrSF'].dtypes)\nprint('FullBath is type: ', df.FullBath.dtypes)\nprint('TotRmsAbvGrd is type: ', df.TotRmsAbvGrd.dtypes)\nprint('Fireplaces is type: ', df.Fireplaces.dtypes)\nprint('BsmtFinSF1 is type: ', df.BsmtFinSF1.dtypes)\nprint('SalePrice is type: ', df.SalePrice.dtypes)","4cb82e7c":"df[df.TotalBsmtSF == 0.0].count()","91e86ba3":"# checking the nan values in our 11 features that is suppose to be int and is not int.\ndf[df.TotalBsmtSF.isna()]\n# this nan is in the test data we will deal with it after spliting the 2 dataframes","b2229734":"df[df['BsmtFinSF1'].isna()]\n# one nan in the test data set, we will deal with it after spliting the 2 dataframes","bd259c5f":"# DO NOT TOUCH\n# splited the train data\ntrain_splited = df[df.SalePrice.notnull()]","ff0402e1":"# sns.pairplot(train[['SalePrice']])\n","86127f24":"# DO NOT TOUCH\n# splited the test data, Now, any modefication you do in one, do on the other.\ntest_splited = df[df.SalePrice.isna()].copy()","5dbd507c":"#A7\n","379d8752":"# all modeling above is a trail, we will apply it to 'train_splited' after cleaning it.\n# let's check the data types in train_splited & test_splited\n\nprint('train_splited OverallQual is type: ', train_splited.OverallQual.dtypes)\nprint('train_splited GrLivArea is type: ', train_splited.GrLivArea.dtypes)\nprint('train_splited GarageCars is type: ', train_splited.GarageCars.dtypes)\nprint('train_splited TotalBsmtSF is type: ', train_splited.TotalBsmtSF.dtypes)\nprint('train_splited 1stFlrSF is type: ', train_splited['1stFlrSF'].dtypes)\nprint('train_splited FullBath is type: ', train_splited.FullBath.dtypes)\nprint('train_splited TotRmsAbvGrd is type: ', train_splited.TotRmsAbvGrd.dtypes)\nprint('train_splited Fireplaces is type: ', train_splited.Fireplaces.dtypes)\nprint('train_splited BsmtFinSF1 is type: ', train_splited.BsmtFinSF1.dtypes)\nprint('train_splited SalePrice is type: ', train_splited.SalePrice.dtypes)","74e743dd":"# DO NOT TOUCH\n# let's fix the data type in GarageCars in both train_splited & test_splited.\n\n\ntrain_splited[train_splited.GarageCars.isna()] #no NaNs, let's convert to int.\ntrain_splited = train_splited.astype({\"GarageCars\": int})\ntrain_splited.GarageCars.dtypes #Done","4a136f9a":"print('test_splited OverallQual is type: ', test_splited.OverallQual.dtypes)\nprint('test_splited GrLivArea is type: ', test_splited.GrLivArea.dtypes)\nprint('test_splited GarageCars is type: ', test_splited.GarageCars.dtypes)\nprint('test_splited TotalBsmtSF is type: ', test_splited.TotalBsmtSF.dtypes)\nprint('test_splited 1stFlrSF is type: ', test_splited['1stFlrSF'].dtypes)\nprint('test_splited FullBath is type: ', test_splited.FullBath.dtypes)\nprint('test_splited TotRmsAbvGrd is type: ', test_splited.TotRmsAbvGrd.dtypes)\nprint('test_splited Fireplaces is type: ', test_splited.Fireplaces.dtypes)\nprint('test_splited BsmtFinSF1 is type: ', test_splited.BsmtFinSF1.dtypes)\nprint('test_splited SalePrice is type: ', test_splited.SalePrice.dtypes)","e9440c0b":"# DO NOT TOUCH\ntest_splited[test_splited.GarageCars.isna()] #one NaN.\ntest_splited['GarageCars'].fillna(0, inplace=True) #replicing the only NaN with Zero.\ntest_splited[test_splited.GarageCars.isna()] ##no NaNs, let's convert to int.\ntest_splited = test_splited.astype({\"GarageCars\": int})\ntest_splited.GarageCars.dtypes #Done","09f38ed8":"# DO NOT TOUCH\n# let's fix the data type in TotalBsmtSF in both train_splited & test_splited.\ntrain_splited[train_splited.TotalBsmtSF.isna()] #no NaNs, let's convert to int.\ntrain_splited = train_splited.astype({\"TotalBsmtSF\": int})\ntrain_splited.TotalBsmtSF.dtypes #Done","61df81cb":"# DO NOT TOUCH\ntest_splited[test_splited.TotalBsmtSF.isna()] #one NaN.\ntest_splited['TotalBsmtSF'].fillna(0, inplace=True) #replicing the only NaN with Zero.\ntest_splited[test_splited.TotalBsmtSF.isna()] #no NaNs, let's convert to int.\ntest_splited = test_splited.astype({\"TotalBsmtSF\": int})\ntest_splited.TotalBsmtSF.dtypes #Done","6ff143a5":"# DO NOT TOUCH\n# let's fix the data type in BsmtFinSF1 in both train_splited & test_splited.\n\ntrain_splited[train_splited.BsmtFinSF1.isna()] #no NaNs, let's convert to int.\ntrain_splited = train_splited.astype({\"BsmtFinSF1\": int})\ntrain_splited.BsmtFinSF1.dtypes #Done","4d7af966":"# DO NOT TOUCH\ntest_splited[test_splited.BsmtFinSF1.isna()] #one NaN.\ntest_splited['BsmtFinSF1'].fillna(0, inplace=True) #replicing the only NaN with Zero.\ntest_splited[test_splited.BsmtFinSF1.isna()] #no NaNs, let's convert to int.\ntest_splited = test_splited.astype({\"BsmtFinSF1\": int})\ntest_splited.BsmtFinSF1.dtypes #Done","cb7e6746":"# DO NOT TOUCH\n# in SalePrice all prices are integers, no need for the float.\ntrain_splited[train_splited.SalePrice.isna()] #no NaNs, let's convert to int.\ntrain_splited = train_splited.astype({\"SalePrice\": int})\ntrain_splited.SalePrice.dtypes #Done","21211a38":"# Now let's check our data type after fixing them.\nprint('train_splited OverallQual is type: ', train_splited.OverallQual.dtypes)\nprint('train_splited GrLivArea is type: ', train_splited.GrLivArea.dtypes)\nprint('train_splited GarageCars is type: ', train_splited.GarageCars.dtypes)\nprint('train_splited TotalBsmtSF is type: ', train_splited.TotalBsmtSF.dtypes)\nprint('train_splited 1stFlrSF is type: ', train_splited['1stFlrSF'].dtypes)\nprint('train_splited FullBath is type: ', train_splited.FullBath.dtypes)\nprint('train_splited TotRmsAbvGrd is type: ', train_splited.TotRmsAbvGrd.dtypes)\nprint('train_splited Fireplaces is type: ', train_splited.Fireplaces.dtypes)\nprint('train_splited BsmtFinSF1 is type: ', train_splited.BsmtFinSF1.dtypes)\nprint('train_splited SalePrice is type: ', train_splited.SalePrice.dtypes)\n# All int, No nans.","9a0c93c9":"test_splited.SalePrice.unique() # All nans, great!","22b44f31":"# DO NOT TOUCH\n# in the test_splited we have unwanted colume SalePrice, let's drop it.\ntest_splited.drop(['SalePrice'], axis=1, inplace=True)\n# SalePrice is gone from test_splited.","6b9d8bb8":"print('test_splited  OverallQual is type: ', test_splited.OverallQual.dtypes)\nprint('test_splited GrLivArea is type: ', test_splited.GrLivArea.dtypes)\nprint('test_splited GarageCars is type: ', test_splited.GarageCars.dtypes)\nprint('test_splited TotalBsmtSF is type: ', test_splited.TotalBsmtSF.dtypes)\nprint('test_splited 1stFlrSF is type: ', test_splited['1stFlrSF'].dtypes)\nprint('test_splited FullBath is type: ', test_splited.FullBath.dtypes)\nprint('test_splited TotRmsAbvGrd is type: ', test_splited.TotRmsAbvGrd.dtypes)\nprint('test_splited Fireplaces is type: ', test_splited.Fireplaces.dtypes)\nprint('test_splited BsmtFinSF1 is type: ', test_splited.BsmtFinSF1.dtypes)\n# test_splited all type int.","dfce7204":"# all data types are good in both dataframes, thursday we want to investigate the values of each column\n# and if we are satisfied with the range and the values itself we will start building our actual model.","7dafc3c1":"train= train_splited","014b7e62":"#\u0639\u0628\u062f\u0627\u0644\u0631\u062d\u0645\u0646 \n## Training the Model ##\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\n\nX = train[['OverallQual', 'GrLivArea', 'GarageCars',\n                     'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n                     'YearBuilt', 'YearRemodAdd',\n                     'Fireplaces', 'BsmtFinSF1']]   # 11 features (columns) wree chosen\n\ny = train.SalePrice\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4)\n\n# Feature Scaling\n# from sklearn.preprocessing import StandardScaler\n# sc_X = StandardScaler()\n# X_train = sc_X.fit_transform(X_train)\n# X_test = sc_X.transform(X_test)\n# sc_y = StandardScaler()\n# y_train = sc_y.fit_transform(y_train.reshape(-1,1))\n\n","2ab83303":"#A2\n## Feature Scaling ##\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\n# X = train[['OverallQual', 'GrLivArea', 'GarageCars',\n#                      'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n#                      'YearBuilt', 'YearRemodAdd',\n#                      'Fireplaces', 'BsmtFinSF1']]   # 11 features (columns) wree chosen\n\nX[['OverallQual', 'GrLivArea', 'GarageCars',\n                     'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n                     'YearBuilt', 'YearRemodAdd',\n                     'Fireplaces', 'BsmtFinSF1']] = scale.fit_transform(X[['OverallQual', 'GrLivArea', 'GarageCars',\n                     'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n                     'YearBuilt', 'YearRemodAdd',\n                     'Fireplaces', 'BsmtFinSF1']].as_matrix())\ny = train.SalePrice\n\nprint (X)\n\nest = sm.OLS(y, X).fit()\n\n# est.summary()","968c3f06":"#A3\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit (X_train, y_train)\n","6d2576f1":"#A4\nlr.score(X_train, y_train)\nprint ('lr.score for train :', lr.score(X_train, y_train))\n\nlr.score(X_test, y_test)\nprint ('lr.score for test :', lr.score(X_test, y_test))","fc932089":"#A5\ncoeff_df = pd.DataFrame(lr.coef_,X.columns,columns=['Coefficient'])\ncoeff_df","5cc92f8f":"#O6\nfrom sklearn.model_selection import KFold, cross_val_score , cross_val_predict\nkf = KFold(n_splits=4, shuffle=True)\n\nnp.mean(cross_val_score(lr, X, y, cv=kf))\n# cross_val_score(lr, X, y, cv=kf)\n","9e35e5d8":"predictions = lr.predict(X_test)","297b7eac":"#A8\n## Evaluating the Model ##\n\nfrom sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","716f1e4d":"#A9\n# Create a scatterplot of the real test values versus the predicted values:\nplt.scatter(y_test,predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","6a8700fa":"#A10\n# Plot a histogram of the residuals\nsns.distplot((y_test-predictions),bins=50);","2cb3598c":"# Now its time to apply the MVLR model on the testing data\n# test.head()\ntest.shape","38ab02c5":"############\n# Now we need to evaluate the performance of the model on the test data\n","7137ad44":"test_splited.Id","99a711ab":"## Predicting Test Data\nfrom sklearn.linear_model import LinearRegression\nX_testdata = test_splited[['OverallQual', 'GrLivArea', 'GarageCars',\n                     'TotalBsmtSF', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd',\n                     'YearBuilt', 'YearRemodAdd',\n                     'Fireplaces', 'BsmtFinSF1']]\nlr.predict(X_testdata)","f2c3131a":"predicted_Saleprice = lr.predict(X_testdata)\npredicted_Saleprice","bbd6c470":"\ndf_subm_test = test_splited[['Id']].copy()\n","728b4fef":"df_subm_test['predicted_Saleprice'] = predicted_Saleprice","8dd36f46":"df_subm_test.head()","15f8d08a":"df_subm_test.to_csv('df_subm_test.csv', index=False)","03890cee":"from IPython.display import HTML\nimport base64\n\ndef create_download_link( df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = f'<a target=\"_blank\">{title}<\/a>'\n    return HTML(html)\n\ncreate_download_link(df_subm_test, filename='df_subm_test')","414337ce":"plt.scatter(y_test,predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","5063cc4a":"# log model enhancing ","dac129d4":"- Holding all other features fixed, OverallQual is associated with an increase of \t19269.700102 Dollar in Sale price.\n- Holding all other features fixed, GrLivArea is associated with an increase of 40.370932  Dollar in Sale price.\n- Holding all other features fixed, GarageCars is associated with an increase of 14009.266097 Dollar in Sale price.\n- Holding all other features fixed, TotalBsmtSF\t is associated with an increase of 12.792927 Dollar in Sale price.\n- Holding all other features fixed, 1stFlrSF is associated with an increase of 10.847304 Dollar in Sale price.\n- Holding all other features fixed, FullBath is associated with  decrease of -2966.011076 Dollar in Sale price.\n- Holding all other features fixed, TotRmsAbvGrd is associated with an increase of 1800.430890 Dollar in Sale price.\n- Holding all other features fixed, YearBuilt is associated with an increase of 214.179009 Dollar in Sale price.\n- Holding all other features fixed, YearRemodAdd is associated with an increase of 345.461272 Dollar in Sale price.\n- Holding all other features fixed, Fireplaces is associated with an increase of 8380.694711 Dollar in Sale price.\n- Holding all other features fixed, BsmtFinSF1 is associated with an increase of 19.810939 Dollar in Sale price.","1467637e":"Evaluation metrics for regression problems:\n\n**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors:\n\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\n\n**Mean Squared Error** (MSE) is the mean of the squared errors:\n\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\n\n**Root Mean Squared Error** (RMSE) is the square root of the mean of the squared errors:\n\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\n\nComparing these metrics:\n\n- **MAE** is the easiest to understand, because it's the average error.\n- **MSE** is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\n- **RMSE** is even more popular than MSE, because RMSE is interpretable in the \"y\" units."}}