{"cell_type":{"7853e043":"code","3dbc8cd5":"code","3441f91b":"code","8cd291a4":"code","5bd36caf":"code","16a7e805":"code","988b8e3f":"code","bf9988d9":"code","f2b14b33":"code","96810bbc":"code","3f97c01b":"code","056f2f5d":"code","342ede99":"code","32e92aee":"code","eda83ced":"code","16baa77e":"code","2200c139":"code","bf401566":"code","2341de62":"code","76ce9245":"markdown","fc5b68b0":"markdown","8d1a6d49":"markdown","06197b95":"markdown","16237c6e":"markdown","2737edb0":"markdown","f79005a9":"markdown","899e78db":"markdown","e0e04c74":"markdown","00f8b260":"markdown","55a5b2c6":"markdown","8a0e166f":"markdown","ba2cee61":"markdown","955fb5d5":"markdown","8a762598":"markdown","feab993f":"markdown"},"source":{"7853e043":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.decomposition import PCA\nfrom sklearn import preprocessing as prepro\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.regularizers import l1, l2\nfrom keras.optimizers import Adam, SGD\nfrom keras.layers import Dense, Dropout, BatchNormalization, Conv2D, MaxPooling2D, Flatten\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter","3dbc8cd5":"estimated = pd.read_csv('..\/input\/malaria-dataset\/estimated_numbers.csv')\nincidence = pd.read_csv('..\/input\/malaria-dataset\/incidence_per_1000_pop_at_risk.csv')\nreported = pd.read_csv('..\/input\/malaria-dataset\/reported_numbers.csv')\ntest = incidence[:107]","3441f91b":"reported","8cd291a4":"reported = pd.concat([reported, pd.get_dummies(reported['Country'])], axis=1)","5bd36caf":"cols = ['Country', 'WHO Region']\nfor col in cols:\n    le = LabelEncoder()\n    letest = LabelEncoder()\n    reported[col] = le.fit_transform(reported[col])","16a7e805":"reported['Incidence'] = (incidence['No. of cases'][107:]).reset_index(drop=True)\nreported['Cases bin'] = pd.cut(reported['No. of cases'], bins=[0, 100, 1000, 10000, 100000, 1000000, 16000000], labels=[0, 1, 2, 3, 4, 5]).fillna(0)\nreported['Incidence bin'] = pd.cut(reported['Incidence'], bins=[0, 0.3, 5, 45, 250, 800], labels=[0, 1, 2, 3, 4]).fillna(0)\nreported = reported.fillna(0)","988b8e3f":"reported['Log no. of cases'] = (reported['No. of cases']+1).transform(np.log)\nreported['Box Cox no. of cases'] = stats.boxcox(reported['No. of cases']+1)[0]\n\nreported['Log WHO Region'] = (reported['WHO Region']+1).transform(np.log)\nreported['Box Cox WHO Region'] = stats.boxcox(reported['WHO Region']+1)[0]\n\nreported['Log Incidence'] = (reported['Incidence']+1).transform(np.log)\nreported['Box Cox Incidence'] = stats.boxcox(reported['Incidence']+1)[0]","bf9988d9":"reported['Cases minmax'] = prepro.minmax_scale(reported[['No. of cases']])\nreported['Cases standardized'] = prepro.StandardScaler().fit_transform(reported[['No. of cases']])\nreported['Cases l2'] = prepro.normalize(reported[['No. of cases']])\n\nreported['Incidence minmax'] = prepro.minmax_scale(reported[['Incidence']])\nreported['Incidence standardized'] = prepro.StandardScaler().fit_transform(reported[['Incidence']])\nreported['Incidence l2'] = prepro.normalize(reported[['Incidence']])","f2b14b33":"y = reported['No. of deaths']\nX = reported.drop('No. of deaths', axis=1).reset_index(drop=True)","96810bbc":"count=Counter(reported['Cases bin'])\nplt.bar(count.keys(), count.values(), color='blue')\nplt.title('Cases bin')\nplt.ylabel('Cases')\nplt.xlabel('Bin')\nplt.show()\n\ncount=Counter(reported['Incidence bin'])\nplt.bar(count.keys(), count.values(), color='red')\nplt.title('Incidence bin')\nplt.ylabel('Incidence')\nplt.xlabel('Bin')\nplt.show()","3f97c01b":"cases_decile = reported['No. of cases'].quantile([.1, .2, .3, .4, .5, .6, .7, .8, .9])\nsns.set_style('whitegrid')\nfig, ax = plt.subplots(1, 1)\nreported['No. of cases'].hist(ax=ax, bins=100)\nfor pos in cases_decile:\n    handle = plt.axvline(pos, color='r')\n    \nax.legend([handle], ['decile'], fontsize=12)\nax.set_yscale('log')\nax.set_xscale('log')\nax.tick_params(labelsize=14)\nax.set_xlabel('No. of cases', fontsize=14)\nax.set_ylabel('Occurence', fontsize=14)\nplt.show()\n\nincidence_decile = reported['Incidence'].quantile([.1, .2, .3, .4, .5, .6, .7, .8, .9])\nsns.set_style('whitegrid')\nfig, ax = plt.subplots(1, 1)\nreported['Incidence'].hist(ax=ax, bins=100)\nfor pos in incidence_decile:\n    handle = plt.axvline(pos, color='r')\n    \nax.legend([handle], ['decile'], fontsize=12)\nax.set_yscale('log')\nax.set_xscale('log')\nax.tick_params(labelsize=14)\nax.set_xlabel('Incidence', fontsize=14)\nax.set_ylabel('Occurence', fontsize=14)\nplt.show()","056f2f5d":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nax1.scatter(X['No. of cases'], y)\nax1.set_title('No. of Cases', fontsize=10)\nax1.set_ylabel('No. of Deaths', fontsize=10)\n\nax2.scatter(X['Log no. of cases'], y)\nax2.set_title('Log', fontsize=10)\nax2.set_ylabel('No. of Deaths', fontsize=10)\n\nax3.scatter(stats.boxcox(reported['No. of cases']+1)[0], y)\nax3.set_title('Box Cox', fontsize=10)\nax3.set_ylabel('No. of Deaths', fontsize=10)\n\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nX['No. of cases'].hist(ax=ax1, bins=100)\nax1.set_title('No. of Cases')\nax1.set_ylabel('No. of Deaths')\n\nX['Log no. of cases'].hist(ax=ax2, bins=100)\nax2.set_title('Log No. of Cases')\nax2.set_ylabel('Log')\n\npd.DataFrame(stats.boxcox(reported['No. of cases']+1)[0]).hist(ax=ax3, bins=100)\nax3.set_title('Box Cox No. of Cases')\nax3.set_ylabel('Box Cox')\n\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1)\n\nprob1 = stats.probplot(X['No. of cases'], dist=stats.norm, plot=ax1)\nax1.set_xlabel('No. of Cases')\nax1.set_ylabel('No. of Deaths')\n\nprob2 = stats.probplot(X['Log no. of cases'], dist=stats.norm, plot=ax2)\nax2.set_xlabel('Log No. of Cases')\nax2.set_ylabel('Log')\n\nprob3 = stats.probplot(stats.boxcox(reported['No. of cases']+1)[0], dist=stats.norm, plot=ax3)\nax3.set_xlabel('Box Cox No. of Cases')\nax3.set_ylabel('Box Cox')\n\nplt.show()","342ede99":"count = Counter(X['WHO Region'])\nplt.bar(count.keys(), count.values())\nplt.title('WHO Region')\nplt.xlabel('Number of regions')\nplt.ylabel('Region count')\nplt.show()","32e92aee":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nax1.scatter(X['WHO Region'], y)\nax1.set_title('Who Region', fontsize=10)\nax1.set_ylabel('No. of Deaths', fontsize=10)\n\nax2.scatter(X['Log WHO Region'], y)\nax2.set_title('Log WHO Region', fontsize=10)\nax2.set_ylabel('No. of Deaths', fontsize=10)\n\nax3.scatter(stats.boxcox(X['WHO Region']+1)[0], y)\nax3.set_title('Cox Box WHO Region', fontsize=10)\nax3.set_ylabel('No. of Deaths', fontsize=10)\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nX['WHO Region'].hist(ax=ax1, bins=100)\nax1.set_title('WHO Region', fontsize=10)\nax1.set_ylabel('No. of Deaths', fontsize=10)\n\nX['Log WHO Region'].hist(ax=ax2, bins=100)\nax2.set_title('Log WHO Region', fontsize=10)\nax2.set_ylabel('No. of Deaths', fontsize=10)\n\npd.DataFrame(stats.boxcox(X['WHO Region']+1)[0]).hist(ax=ax3, bins=100)\nax3.set_title('Cox Box WHO Region', fontsize=10)\nax3.set_ylabel('No. of Deaths', fontsize=10)\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1)\n\nprob1 = stats.probplot(X['WHO Region'], dist=stats.norm, plot=ax1)\nax1.set_xlabel('WHO Region')\nax1.set_ylabel('No. of Deaths')\n\nprob2 = stats.probplot(X['Log WHO Region'], dist=stats.norm, plot=ax2)\nax2.set_xlabel('Log WHO Region')\nax2.set_ylabel('Log')\n\nprob3 = stats.probplot(stats.boxcox(reported['WHO Region']+1)[0], dist=stats.norm, plot=ax3)\nax3.set_xlabel('Box Cox WHO Region')\nax3.set_ylabel('Box Cox')\n\nplt.show()","eda83ced":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nax1.scatter(X['Incidence'], y)\nax1.set_title('Incidence', fontsize=10)\nax1.set_ylabel('No. of Deaths', fontsize=10)\n\nax2.scatter(X['Log Incidence'], y)\nax2.set_title('Log Incidence', fontsize=10)\nax2.set_ylabel('No. of Deaths', fontsize=10)\n\nax3.scatter(stats.boxcox(X['Incidence']+1)[0], y)\nax3.set_title('Cox Box Incidence', fontsize=10)\nax3.set_ylabel('No. of Deaths', fontsize=10)\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 8))\n\nX['Incidence'].hist(ax=ax1, bins=100)\nax1.set_title('Incidence', fontsize=10)\nax1.set_ylabel('No. of Deaths', fontsize=10)\n\nX['Log Incidence'].hist(ax=ax2, bins=100)\nax2.set_title('Log Incidence', fontsize=10)\nax2.set_ylabel('No. of Deaths', fontsize=10)\n\npd.DataFrame(stats.boxcox(X['Incidence']+1)[0]).hist(ax=ax3, bins=100)\nax3.set_title('Cox Box Incidence', fontsize=10)\nax3.set_ylabel('No. of Deaths', fontsize=10)\nplt.show()\n\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1)\n\nprob1 = stats.probplot(X['Incidence'], dist=stats.norm, plot=ax1)\nax1.set_xlabel('Incidence')\nax1.set_ylabel('No. of Deaths')\n\nprob2 = stats.probplot(X['Log Incidence'], dist=stats.norm, plot=ax2)\nax2.set_xlabel('Log Incidence')\nax2.set_ylabel('Log')\n\nprob3 = stats.probplot(stats.boxcox(reported['Incidence']+1)[0], dist=stats.norm, plot=ax3)\nax3.set_xlabel('Box Cox Incidence')\nax3.set_ylabel('Box Cox')\n\nplt.show()","16baa77e":"X['Cases bin'] = X['Cases bin'].astype('float64')\nX['Incidence bin'] = X['Incidence bin'].astype('float64')","2200c139":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)\nX_train = prepro.minmax_scale(X_train)\nX_val = prepro.minmax_scale(X_val)","bf401566":"model = Sequential()\n\nmodel.add(Dense(128, activation='relu', kernel_regularizer=l2(1.0), kernel_initializer='RandomUniform', input_dim=127))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.325))\n\nmodel.add(Dense(86, activation='relu', kernel_regularizer=l2(1.0), kernel_initializer='RandomUniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.325))\n\nmodel.add(Dense(58, activation='relu', kernel_regularizer=l2(1.0), kernel_initializer='RandomUniform'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.325))\n\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(metrics=['accuracy'], loss='binary_crossentropy', optimizer=Adam(lr=0.0001, epsilon=2e-06))\nhistory=model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=98, batch_size=32, steps_per_epoch=100)\n\nfor j in history.history:\n    plt.figure(figsize=(3, 3))\n    plt.xlabel('Epochs')\n    plt.ylabel(j)\n    plt.title(j + ' over epochs')\n    plt.plot(history.history[j])\n    plt.show()","2341de62":"score = model.evaluate(X_val, y_val)\nprint('Accuracy: ' + str(score[1]) + ' Loss: ' + str(score[0]))","76ce9245":"### We have created a Multilayer Perceptron with 3 hidden layers, 3 dropouts which have a dropout rate of 0.325 and an output activation of sigmoid. The loss is a binary cross entropy and the optimizer is an Adam which has a learning rate of 0.0001 and an epsilon of 2e-06.","fc5b68b0":"### Thank you for reading my notebook.\n### If you enjoyed notebook and found it helpful, please upvote it so that I can make more of these.","8d1a6d49":"### Now, an incidence feature is added to the reported data, followed by binning the cases and incidence features.","06197b95":"### Afterwards, we must now visualise our new feature engineered data with comparison to their original.","16237c6e":"### Next, log transform and box cox features have been added to the reported dataframe.","2737edb0":"### Firstly, we look at the binned data which has come from the cases and incidence features.","f79005a9":"# Data visualisation","899e78db":"### In preperation for inputting the X and y to our model, we must first split it into train and val sets.\n### After that, the X_train and X_val are scaled with a min max scaler.","e0e04c74":"# Feature engineering","00f8b260":"# Model prediction","55a5b2c6":"### Secondly, the log transform and box cox of our X is visualised and compared to the original data.\n### This is done for the cases, WHO Region and incidence features.","8a0e166f":"### We use a Label Encoder to convert the 'Country' and 'WHO Region' features from categorical to numerical.","ba2cee61":"### Get dummies has been applied to the 'Country' feature of the reported data, thereby one hot encoding it.","955fb5d5":"### We also add a minmax, standardized and normalized set of variables.","8a762598":"# Malaria Deaths Prediction\n### Welcome to the Malaria dataset, where we will be predicting how many deaths have occured in a country given the number of cases in that area, the WHO region of that country, year they occurred and its incidence value.","feab993f":"### Firstly, we take in the estimated data, incidence, reported and test variables. We will engineer the reported and incidence variables into an X and y. The test dataframe will be brought from the incidence."}}