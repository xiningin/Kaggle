{"cell_type":{"2e25503e":"code","2277a9d8":"code","6246d8cc":"code","2180a6fa":"code","fac96867":"code","24a41042":"code","94f8eb4e":"code","bc88261f":"code","5c11d511":"code","ed21ee9d":"code","305f424d":"code","91218ea8":"code","a4e1cc92":"code","a53616c2":"code","39a96f07":"code","fca790ec":"code","abda7fa3":"markdown","346dfd6d":"markdown","b67b4fd5":"markdown","dc5a4097":"markdown","7f3cf439":"markdown","d4f6c642":"markdown","130052c1":"markdown","24712d2b":"markdown","0f28a3ab":"markdown","74f16596":"markdown","d129aad6":"markdown","40bfb8ef":"markdown","f99ec673":"markdown"},"source":{"2e25503e":"# OpenCV\nimport cv2\n\n# Scikit-Image\nimport skimage\nfrom skimage import io\nfrom skimage.transform import resize\n\n# Pillow\/PIL\nimport PIL\nfrom PIL import Image\n\n# To use Pillow-simd you just need to unistall PIL and install PIL-simd\n\n# Other helper libraries\nimport json\nfrom matplotlib import pyplot as plt","2277a9d8":"# Versions used\nprint(\"OpenCV: \", cv2.__version__)\nprint(\"Scikit Image: \", skimage.__version__)\nprint(\"PIL: \", PIL.__version__)","6246d8cc":"with open('..\/input\/iwildcam2021-fgvc8\/metadata\/iwildcam2021_megadetector_results.json', encoding='utf-8') as json_file:\n    detections = json.load(json_file)\n\n# detections['images'][0] looks like\n# {\n#     'detections': [{'category': '1', 'bbox': [0.6529, 0.5425, 0.3471, 0.4038], 'conf': 0.999}], \n#     'id': '905a3c8c-21bc-11ea-a13a-137349068a90', \n#     'max_detection_conf': 0.999\n# }\n\ndata = {} # {image_name:[detections]}\n\ntotal_im_reads = 500\ntotal_im_crops = 0\nfor detection in detections['images'][:total_im_reads]:\n    data[detection['id']+ '.jpg'] = [x['bbox'] for x in detection['detections']]\n    total_im_crops += len(detection['detections'])\n    \nprint(f\"The benchmarking task involves reading images {total_im_reads} times, cropping and resizing images {total_im_crops} times.\")","2180a6fa":"SIZE = 200","fac96867":"def numpy_crop_image(img, bbox):\n    h,w,c = img.shape\n    x1, y1,w_box, h_box = bbox\n    ymin,xmin,ymax,xmax = y1, x1, y1 + h_box, x1 + w_box\n    ymin,xmin,ymax,xmax = ymin*h,xmin*w,ymax*h,xmax*w\n    crop_img = img[int(ymin):int(ymax), int(xmin):int(xmax)]\n    return crop_img\n\ndef opencv_task():\n    for image, detections in data.items():\n        img = cv2.imread(\"..\/input\/iwildcam2021-fgvc8\/train\/\"+image)\n        for detection in detections:\n            crop = numpy_crop_image(img, detection)\n            resized = cv2.resize(crop,(SIZE,SIZE))\n            results.append(resized)","24a41042":"results = []\n%timeit opencv_task()","94f8eb4e":"# See some results\nfig = plt.figure(figsize=(25, 25))\nfor i,result in enumerate(results[:16]):\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    ax.title.set_text(f'OpenCV {i}')\n    plt.imshow(result)","bc88261f":"def skimage_task():\n    for image, detections in data.items():\n        img = io.imread(\"..\/input\/iwildcam2021-fgvc8\/train\/\"+image)\n        for detection in detections:\n            crop = numpy_crop_image(img, detection)\n            resized = resize(crop,(SIZE,SIZE))\n            results.append(resized)","5c11d511":"results = []\n%timeit skimage_task()","ed21ee9d":"# See some results\nfig = plt.figure(figsize=(25, 25))\nfor i,result in enumerate(results[:16]):\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    ax.title.set_text(f'Scikit-Image {i}')\n    plt.imshow(result)","305f424d":"def pil_crop_image(bbox, image_size):\n    x1, y1,w_box, h_box = bbox\n    ymin,xmin,ymax, xmax = y1, x1, y1 + h_box, x1 + w_box\n    area = (xmin * image_size[0], ymin * image_size[1], \n            xmax * image_size[0], ymax * image_size[1])\n    return area\n\ndef pil_task():\n    for image, detections in data.items():\n        img = Image.open(\"..\/input\/iwildcam2021-fgvc8\/train\/\"+image)\n        for detection in detections:\n            area = pil_crop_image(detection, img.size)\n            crop = img.crop(area)\n            resized = crop.resize((SIZE,SIZE))\n            results.append(resized)","91218ea8":"results = []\n%timeit pil_task()","a4e1cc92":"# See some results\nfig = plt.figure(figsize=(25, 25))\nfor i,result in enumerate(results[:16]):\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    ax.title.set_text(f'PIL {i}')\n    plt.imshow(result)","a53616c2":"!pip uninstall -y pillow\n!pip install pillow-simd","39a96f07":"results = []\n%timeit pil_task()","fca790ec":"# See some results\nfig = plt.figure(figsize=(25, 25))\nfor i,result in enumerate(results[:16]):\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    ax.title.set_text(f'PIL-SIMD {i}')\n    plt.imshow(result)","abda7fa3":"## 4. Pillow-simd\n\n<br>\n\nTo use pillow-simd you just need to unistall pillow and install pillow-simd. And it works exactly same as normal PIL.","346dfd6d":"## 1. OpenCV","b67b4fd5":"<div style=\"color:#FFFFFF; background:#34b1eb; border-radius:5px;\"> \n    <center><br> <h1>1. Libraries for image processing<\/h1> <br><\/center>\n<\/div>\n\n### The most famous ones - \n1. OpenCV\n2. Scikit Image\n3. Pillow\n4. Pillow-SIMD\n\nThere is a lot of documentation available for all of them. I recommend reading basic things about all of them in case you are not aware.","dc5a4097":"<div style=\"color:#FFFFFF; background:#34b1eb; border-radius:5px;\"> \n    <center><br> <h1>4. Conclusion<\/h1> <br><\/center>\n<\/div>\n\n<br>\n\n### Winner : PIL \ud83d\udd25\ud83d\udd25\ud83d\udd25\n\n<br>\n\n### Comparison :\n<br>\n\nWe ran each method of the same task 7 times and following is the average time for one loop. Width of each bar = (2 x (mean_time x 10)) pixels\n<div style=\"padding:10px;width:350px;background:#ffadad;\"><center>Opencv: 17.5 s \u00b1 66 ms<\/center><\/div>\n<div style=\"padding:10px;width:982px;background:#e1ffad\"><center>Skimage: 49.1 s \u00b1 2.26 s<\/center><\/div>\n<div style=\"padding:10px;width:230px;background:#adffdb\"><center>PIL: 11.5 s \u00b1 33.2 ms<\/center><\/div>\n<div style=\"padding:10px;width:232px;background:#d5adff\"><center>PIL-simd: 11.6 s \u00b1 53.1 ms<\/center><\/div>\n\n<br>\n\nEven if PIL-SIMD is highly optimized library, we see that PIL performs slightly better. \n\n**Only a very detailed benchmarking would reveal strengths and weaknesses of each library. But as of now, to do the basic reading, cropping and resizing we see that PIL is the fastest.**","7f3cf439":"<div style=\"color:#FFFFFF; background:#34b1eb; border-radius:5px;\"> \n    <center><br> <h1>3. Compare the libraries<\/h1> <br><\/center>\n<\/div>\n\n<br>\n\nWe will use %timeit module to measure the time. And every crop will be resized to 200 x 200 image size. ","d4f6c642":"<div style=\"color:#FFFFFF; background:#34b1eb; border-radius:5px;\"> \n    <center><br> <h1>5. References and further reading<\/h1> <br><\/center>\n<\/div>\n\n<br>\n\nhttps:\/\/learnopencv.com\/efficient-image-loading\/\n\nhttps:\/\/python-pillow.org\/pillow-perf\/\n\nhttps:\/\/www.kaggle.com\/vfdev5\/pil-vs-opencv","130052c1":"## 3. PIL","24712d2b":"<div style=\"color:#FFFFFF; background:#34b1eb; border-radius:5px;\"> \n    <center><br> <h1>2. Create a benchmark task<\/h1> <br><\/center>\n<\/div>\n\n<br>\n\nWe will ofcourse use [iWildCam2021](https:\/\/www.kaggle.com\/c\/iwildcam2021-fgvc8\/overview) dataset. I recommend going through this wonderful [notebook](https:\/\/www.kaggle.com\/nayuts\/iwildcam-2021-starter-notebook) if you are not fully aware about the competition and dataset. \n\nThe task will be simple but a little tiresome.\n\n**The task is to read 500 images and for each image, crop the annotated detections (provided in json file) and then resize the same.**\n\n1. For each image in 500 images <br>\n    i. Read the image <br>\n    ii. Crop the detections <br>\n    iii. Resize the cropped detections <br>\n\nThis task will test Reading, Cropping and Resizing operations of all libraries which is core to any image preprocessing pipeline","0f28a3ab":"![](https:\/\/i.redd.it\/nklty63uzav41.png)","74f16596":"# Introduction\n\nIn this notebook, let's get to know about the fastest way of reading and processing images. We will use iWildCam2021 dataset and compare various libraries available using a benchmarking task. A fast and efficient data loading pipeline will help us train our models faster and **save a lot of GPU time**.\n\nNotebook is distributed in following sections -\n1. Libraries for image processing\n2. Create a benchmark task\n3. Compare the libraries\n4. Conclusion\n5. References and further reading","d129aad6":"## 2. Scikit-Image\n\nOpenCV and Scikit-Image both work with numpy arrays. Thus, both use numpy array slicing for cropping images. And hence we will use extact same function for both of these.","40bfb8ef":"We have created a dictionary {} called data which has names and detections of our images.","f99ec673":"<center>\n    <div style=\"color:red;\">\n        <h2>Please don't forget to upvote if you find this notebook useful :)<\/h2>\n    <\/div>\n<center>"}}