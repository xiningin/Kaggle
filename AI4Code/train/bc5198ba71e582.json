{"cell_type":{"3d8f6164":"code","fdf83308":"code","8b47a11d":"code","50a27fee":"code","386a6119":"code","88e12e2b":"code","c1c9431c":"code","640aceb0":"code","fadaceda":"code","18cb7c79":"code","d9ea86a5":"code","18f32e1f":"code","1a228154":"markdown","5f999d0b":"markdown","de6cf92f":"markdown","a9ac7871":"markdown","c09a9a39":"markdown","a5bdd629":"markdown","6139de3a":"markdown","4fec6383":"markdown","719653d6":"markdown","11fbd02c":"markdown"},"source":{"3d8f6164":"#!pip install transformers","fdf83308":"import numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\n\nimport torch\nimport transformers as ppb\n\nimport warnings\nwarnings.filterwarnings('ignore')","8b47a11d":"df = pd.read_csv('..\/input\/nlp-reports-news-classification\/water_problem_nlp_ua_for_Kaggle_100.csv', delimiter=';', \n                 header=0, encoding='cp1251')\ndf = df.fillna(0)\n\nconvert_dict = {'text': str, \n                'env_problems': int,\n                'pollution': int, \n                'treatment': int,\n                'climate': int,\n                'biomonitoring': int} \n  \ndf = df.astype(convert_dict)\ndf","50a27fee":"df.info()","386a6119":"# For pre-trained DistilBERT:\nmodel_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-multilingual-cased')\n\n# Other models: https:\/\/huggingface.co\/transformers\/pretrained_models.html\n\n# Load pretrained model\/tokenizer\ntokenizer = tokenizer_class.from_pretrained(pretrained_weights)\nmodel = model_class.from_pretrained(pretrained_weights)","88e12e2b":"# Tokenization the sentences - break them up into word and subwords in the format BERT is comfortable with\ntokenized = df['text'].apply((lambda x: tokenizer.encode(x, add_special_tokens=True)))\n\nmax_len = 0\nfor i in tokenized.values:\n    if len(i) > max_len:\n        max_len = len(i)\n\npadded = np.array([i + [0]*(max_len-len(i)) for i in tokenized.values])\nnp.array(padded).shape","c1c9431c":"# Creation variable to ignore (mask) the data padding\nattention_mask = np.where(padded != 0, 1, 0)\nprint(attention_mask.shape)\nattention_mask","640aceb0":"# Modeling\ninput_ids = torch.tensor(padded).to(torch.int64)\nattention_mask = torch.tensor(attention_mask).to(torch.int64)\n\nwith torch.no_grad():\n    last_hidden_states = model(input_ids, attention_mask=attention_mask)","fadaceda":"# Last hidden states\nfeatures = last_hidden_states[0][:,0,:].numpy()","18cb7c79":"def target_prediction(df, features, target, test_size=0.2):\n    # Text classification model and prediction for given feature \"target\" (with labels) in df\n    \n    # Target\n    labels = df[target]\n    \n    # EDA\n    print()\n    # Extracting the number of examples of each class\n    Relevant_len = df[df[target] == 1].shape[0]\n    Not_len = df[df[target] == 0].shape[0]\n    # Draw bar plot\n    plt.rcParams['figure.figsize'] = (7, 5)\n    plt.bar(10, Relevant_len, 3, label=\"Relevant\", color='green')\n    plt.bar(15, Not_len, 3, label=\"Not\", color='red')\n    plt.legend(loc='upper center')\n    plt.ylabel('Number of examples')\n    plt.title('Propertion of examples for ' + target)\n    plt.show()\n    \n    # Train, test split \n    train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size=test_size)\n    \n    # Train a simple model\n    print(f'Classification for {col}:')\n    parameters = {'C': np.linspace(0.0002, 100, 40)}\n    model = GridSearchCV(LogisticRegression(), parameters)\n    model.fit(train_features, train_labels)\n\n    print('best parameters: ', model.best_params_)\n    print('best scores: ', model.best_score_)\n    \n    # Test prediction\n    test_pred = model.predict(test_features)\n    print('Score of the test prediction -', accuracy_score(test_labels, test_pred),'\\n\\n')","d9ea86a5":"# List of the target features in df\ncols = df.columns.tolist()[1:]\nprint('Target columns:', cols)","18f32e1f":"%%time\n# Solving NLP Classification tasks\nprint('Solving NLP Classification tasks')\nfor col in cols:\n    target_prediction(df, features, col, test_size=0.2)","1a228154":"## Thanks to Kaggle GM, Prof. [@vbmokin](https:\/\/www.kaggle.com\/vbmokin)","5f999d0b":"# Acknowledgements\n\nThis notebook uses such good notebooks: \n* BERT model from the paper with notebook [A Visual Guide to Using BERT for the First Time](http:\/\/jalammar.github.io\/a-visual-guide-to-using-bert-for-the-first-time\/)\n* EDA from the notebook [NLP - EDA, Bag of Words, TF IDF, GloVe, BERT](https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert)\n* Classification model from the notebook [Heart Disease - Automatic AdvEDA & FE & 20 models](https:\/\/www.kaggle.com\/vbmokin\/heart-disease-automatic-adveda-fe-20-models)\n* similar my notebook [NLP for EN : BERT Classification for Water Report](https:\/\/www.kaggle.com\/vbmokin\/nlp-for-en-bert-classification-for-water-report)\n\nMy dataset [NLP : Reports & News Classification](https:\/\/www.kaggle.com\/vbmokin\/nlp-reports-news-classification)\n\nSource of models:\nhttps:\/\/huggingface.co\/transformers\/pretrained_models.html","de6cf92f":"## 3. BERT: Data Prepairing and Modeling <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","a9ac7871":"<a class=\"anchor\" id=\"0\"><\/a>\n# [NLP : Reports & News Classification](https:\/\/www.kaggle.com\/vbmokin\/nlp-reports-news-classification)\n## Automatic Environmental Reports & News Classification (Ukranian)","c09a9a39":"## 1. Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","a5bdd629":"[Go to Top](#0)","6139de3a":"## 4. Text Classification and Prediction <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","4fec6383":"## Thanks to Kaggle GM, Prof. [@vbmokin](https:\/\/www.kaggle.com\/vbmokin)","719653d6":"## 2. Download data <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","11fbd02c":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [BERT: Data Prepairing and Modeling](#3)\n1. [Text Classification and Prediction](#4)"}}