{"cell_type":{"346471d7":"code","8ccfc26d":"code","85deaae8":"code","952aadff":"code","76a70de6":"code","9ec61fc3":"code","60e56b81":"code","c504ff7f":"code","ebf360a9":"code","a277eae7":"code","e24c1ad0":"code","77186ba5":"code","7127cca4":"code","73a6a661":"code","1124fd5c":"code","bc5f39b5":"code","ac9c3da6":"code","e5a64854":"code","56a66699":"code","f30def45":"code","60691a29":"code","0c99f8bc":"code","4da9510d":"code","561e2ec5":"code","5fed950a":"code","725215a1":"code","a270aed1":"markdown","5b55af13":"markdown","583fef3f":"markdown","150f1120":"markdown","604e9556":"markdown","13d6631a":"markdown"},"source":{"346471d7":"!pip install bokeh","8ccfc26d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\n\nfrom sklearn.ensemble import GradientBoostingClassifier as GB\n#from sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","85deaae8":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# bokeh packages\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import *\nfrom bokeh.models import ColumnDataSource,HoverTool,CategoricalColorMapper\nfrom bokeh.layouts import row,column,gridplot,widgetbox\nfrom bokeh.models.widgets import Tabs,Panel\nfrom IPython.html.widgets import interact\noutput_notebook()","952aadff":"clinical_data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","76a70de6":"#The explanation of the columns' meaning\n#https:\/\/bmcmedinformdecismak.biomedcentral.com\/articles\/10.1186\/s12911-020-1023-5\/tables\/1\nclinical_data.head()","9ec61fc3":"print(clinical_data.shape)\nclinical_data.isnull().sum()","60e56b81":"cont_features = [i for i in clinical_data.columns if len(clinical_data[i].unique())>2]\ndiscrete_features = [i for i in clinical_data.drop('DEATH_EVENT',axis=1).columns\\\n                     if len(clinical_data[i].unique())<=2]","c504ff7f":"cont_features","ebf360a9":"source = ColumnDataSource(clinical_data)\n\nx,y = 'age','creatinine_phosphokinase'\nplot = figure(x_axis_label = x,y_axis_label = y)\nplot.circle(x=x,y=y,source = source)   #Can be added hue of death\nshow(plot)","a277eae7":"# Selection appearance\nplot = figure(tools=\"box_select,lasso_select\")\nplot.circle(x= x,y = y,source=source,color = \"black\",\n            selection_color = \"orange\",\n            nonselection_fill_alpha = 0.2,\n           nonselection_fill_color = \"blue\")\nshow(plot)","e24c1ad0":"data_died = clinical_data[clinical_data['DEATH_EVENT']==1]\ndata_survived = clinical_data[clinical_data['DEATH_EVENT']==0]","77186ba5":"for i in cont_features[1:]:\n    curdoc().theme = 'dark_minimal'\n\n    # create and define the figure object\n    x,y = 'age',i\n\n    fig = figure(title=f'Age vs {y}', \n                 x_axis_label=x, \n                 y_axis_label=y,          \n                 plot_width=750, plot_height=500,\n                 tools= 'hover',# set this to None if you do not want data to be displayed on hover\n                 toolbar_location=\"above\", \n                 toolbar_sticky=False)\n\n    fig.circle(x=x,y=y, \n             size=12, alpha=0.5, \n             color=\"#F78888\", \n             legend_label='Not Survived', \n             source=data_died),\n    fig.circle(x=x,y=y, \n             size=9, alpha=0.99, \n             color=\"green\", \n             legend_label='Survived', \n             source=data_survived),\n\n    fig.title.text_font_size = '20pt'\n    fig.title.text_font_style = 'bold'\n    fig.title.text_font = 'Serif'\n    fig.xaxis.axis_label_text_font_size = \"16pt\"\n    fig.yaxis.axis_label_text_font_size = \"16pt\"\n    fig.legend.location = 'top_left'\n    fig.legend.background_fill_color = \"skyblue\"\n\n    show(fig)","7127cca4":"len(cont_features)","73a6a661":"curdoc().theme = 'dark_minimal'\ntitles = []\n# create and define the figure object\nx,y = 'age',cont_features[1]\ntitle=f'Age vs {y}'\ntitles.append(title)\np1 = figure(title=title, \n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np1.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np1.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),\n#show(p1)\n\ncurdoc().theme = 'dark_minimal'\n\n# create and define the figure object\nx,y = 'age',cont_features[2]\ntitle=f'Age vs {y}'\ntitles.append(title)\np2 = figure(title=title, \n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np2.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np2.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),\n\nx,y = 'age',cont_features[3]\ntitle=f'Age vs {y}'\ntitles.append(title)\np3 = figure(title=title, \n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np3.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np3.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),\n\n\nx,y = 'age',cont_features[4]\ntitle=f'Age vs {y}'\ntitles.append(title)\np4 = figure(title=title, \n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np4.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np4.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),\n\nx,y = 'age',cont_features[5]\ntitle=f'Age vs {y}'\ntitles.append(title)\np5 = figure(title=title, \n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np5.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np5.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),\n\nx,y = 'age',cont_features[6]\ntitle=f'Age vs {y}'\ntitles.append(title)\np6 = figure(title=title,\n             x_axis_label=x, \n             y_axis_label=y,          \n             plot_width=750, plot_height=500,\n             tools= 'hover',# set this to None if you do not want data to be displayed on hover\n             toolbar_location=\"above\", \n             toolbar_sticky=False)\n\np6.circle(x=x,y=y, \n         size=12, alpha=0.5, \n         color=\"#F78888\", \n         legend_label='Not Survived', \n         source=data_died),\np6.circle(x=x,y=y, \n         size=9, alpha=0.99, \n         color=\"green\", \n         legend_label='Survived', \n         source=data_survived),","1124fd5c":"#Tabbed layout\n#I use p1 and p2 that are created at above\ntab1 = Panel(child = p1,title=titles[0])\ntab2 = Panel(child = p2,title=titles[1])\ntab3 = Panel(child = p3,title=titles[2])\ntab4 = Panel(child = p4,title=titles[3])\ntab5 = Panel(child = p5,title=titles[4])\ntab6 = Panel(child = p6,title=titles[5])\ntabs = Tabs(tabs = [tab1,tab2,tab3,tab4,tab5,tab6])\nshow(tabs)","bc5f39b5":"print(clinical_data['DEATH_EVENT'].value_counts())\nprint(clinical_data['time'].value_counts())","ac9c3da6":"clinical_data[['time','DEATH_EVENT']].corr()","e5a64854":"sns.heatmap(clinical_data.corr(),annot=False)","56a66699":"sns.catplot(x='DEATH_EVENT', y=\"age\", kind=\"box\", data=clinical_data)","f30def45":"print(clinical_data['age'].min())\nprint(clinical_data['age'].max())","60691a29":"X = clinical_data.iloc[:,:-1]\n#X.drop('time',axis=1,inplace=True)\ny = clinical_data.iloc[:,-1]\nseed = 23\nscoring = 'f1'","0c99f8bc":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=seed)","4da9510d":"# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10, random_state=seed,shuffle = True)\n    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    #msg = %s: %f (%f) % (name, cv_results.mean(), cv_results.std())\n    print('{} {} {}'.format(name, cv_results.mean(), cv_results.std()))","561e2ec5":"model = LinearDiscriminantAnalysis()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\nprint(f1_score(y_test, pred))\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","5fed950a":"kfold = KFold(n_splits=5, shuffle = True)\nfor i in range(10,200,10):\n\n    clf = GB(n_estimators=i,random_state=seed)\n    start_time = datetime.datetime.now()\n    mean_score = cross_val_score(clf, X, y, scoring=\"roc_auc\", cv = kfold).mean()\n    #print ('Time elapsed:', datetime.datetime.now() - start_time)\n    #print(mean_score)\n    plt.scatter(i,mean_score)","725215a1":"model = GB(n_estimators=50)#,learning_rate = )\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","a270aed1":"## Data Modelling","5b55af13":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))","583fef3f":"By the last plot we can conclude that the longer follow-up period can lower the death event probability. ","150f1120":"What can be used? <br>\nPCA, imbalanced dataset, columns can be renamed into higher letter inthe beginning","604e9556":"High correlation between time and Death","13d6631a":"## Data Visualization with Bokeh"}}