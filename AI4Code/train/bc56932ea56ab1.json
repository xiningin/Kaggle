{"cell_type":{"d7c28f81":"code","e899c392":"code","1b174017":"code","3896e0e2":"code","a1851948":"code","eb45b6a8":"code","dd42e6fd":"code","21161969":"code","484c0098":"code","861eac84":"code","9f61b647":"code","1e70d790":"code","6a63102d":"code","d27e36ec":"code","e3804a4d":"code","93f365ae":"code","0e64fc5a":"code","23d11f39":"code","5d581082":"code","23b4ef23":"code","89674521":"code","d3e32cea":"code","4fd5ede2":"code","285c64e7":"code","36a7af4f":"code","2855706d":"code","2d964304":"code","6ab85d59":"code","14909c2a":"markdown","1d3179e5":"markdown","96c00df6":"markdown","5425064a":"markdown","af10ca98":"markdown","964b79f1":"markdown","d4a58d0e":"markdown","7e9cac22":"markdown","1b8d6dbc":"markdown","5af726c6":"markdown","e04cc8b9":"markdown","cc79954f":"markdown","7fb617ca":"markdown","0c6bb96c":"markdown","c87d76f9":"markdown","e50607c3":"markdown","9d509abf":"markdown","1111bbca":"markdown","779e15c6":"markdown","9aa23346":"markdown","9a8255cb":"markdown","66c2897c":"markdown","e900bc98":"markdown","ae3d4bec":"markdown","81dbfd1b":"markdown","52a89c3b":"markdown","ca6df0f2":"markdown"},"source":{"d7c28f81":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","e899c392":"df = pd.read_csv('..\/input\/habermans-survival-data-set\/haberman.csv', header=None, names=['age', 'year', 'nodes', 'status'])\ndf.head()","1b174017":"df.shape","3896e0e2":"df.columns","a1851948":"df.describe()","eb45b6a8":"df['status'].value_counts()\/df.shape[0]","dd42e6fd":"df.info()","21161969":"plt.figure()\nsns.distplot(df['age']).set_title(\"Histogram for age\") #Creates a histogram pdf, for count of values, use countplot.\nplt.show()","484c0098":"#It will make more sense if we combine age histogram with status.\nplt.figure()\n\nax1 = plt.subplot(1,2,1)\nsns.distplot(df[df['status']==1]['age']) #Age of all patients who lived for less than 5 years.\nax1.set_title(\">5 yrs\")\n\nax2 = plt.subplot(1,2,2)\nsns.distplot(df[df['status']==2]['age']) #Age of all patients who lived for more than 5 years.\nax2.set_title(\"<5 yrs\")\n\nplt.tight_layout() #Avoids overlapping\nplt.show()\n","861eac84":"plt.figure()\nsns.countplot(df['year']).set_title(\"Histogram for year\")\nplt.show()","9f61b647":"#It will make more sense if we combine age histogram with status.\nplt.figure()\n\nax1 = plt.subplot(1,2,1)\nsns.countplot(df[df['status']==1]['year']) #Age of all patients who lived for more than 5 years.\nax1.set_title(\">5 yrs\")\n\nax2 = plt.subplot(1,2,2)\nsns.countplot(df[df['status']==2]['year']) #Age of all patients who lived for less than 5 years.\nax2.set_title(\"<5 yrs\")\n\nplt.tight_layout() #Avoids overlapping\nplt.show()","1e70d790":"print(\"patients with age<50: \",len(df[(df['year']==65) & (df['age']<50)])) #While using 'and' inside dataframe it is \n                                                                            #important to use '('.\nprint(\"patients with age>50: \",len(df[(df['year']==65) & (df['age']>50)]))","6a63102d":"#It will make more sense if we combine age histogram with status.\nplt.figure()\n\nax1 = plt.subplot(1,2,1)\nsns.distplot(df[df['year']==65]['age'])\nax1.set_title(\"Age of patients in 1965\")\n\nax2 = plt.subplot(1,2,2)\nsns.countplot(df[df['year']==65]['nodes']) \nax2.set_title(\"Nodes of patients in 1965\")\n\nplt.tight_layout() #Avoids overlapping\nplt.show()\n","d27e36ec":"#It will make more sense if we combine age histogram with status.\nplt.figure()\n\nax1 = plt.subplot(1,2,1)\nsns.distplot(df[df['year']==60]['age'])\nax1.set_title(\"Age of patients in 1965\")\n\nax2 = plt.subplot(1,2,2)\nsns.countplot(df[df['year']==60]['nodes']) \nax2.set_title(\"Nodes of patients in 1965\")\n\nplt.tight_layout() #Avoids overlapping\nplt.show()\n","e3804a4d":"plt.figure()\nsns.countplot(df['nodes']).set_title(\"Histogram for count of nodes\")\nplt.show()","93f365ae":"#Maximum number of patients have shown 0 nodes. Let's check their status.\nlabels = df[df['nodes']==0]['status'].value_counts().index\nvalues = df[df['nodes']==0]['status'].value_counts().values\n\nexplode = [0.1, 0]\nfig1, ax1 = plt.subplots()\nax1.pie(values, labels=labels, explode=explode,\n            autopct='%1.1f%%', startangle=90)\n    # autopct is used for labelling inside pie wedges, startangle rotates pie counterclockwise\nax1.axis('equal')\nax1.set_title(\"Pie graph for node\")\nplt.tight_layout()\nplt.show()","0e64fc5a":"labels = df['status'].value_counts().index\nvalues = df['status'].value_counts().values\n\nexplode = [0.1, 0]\nfig1, ax1 = plt.subplots()\nax1.pie(values, labels=labels, explode=explode,\n            autopct='%1.1f%%', startangle=90)\n    # autopct is used for labelling inside pie wedges, startangle rotates pie counterclockwise\nax1.axis('equal')\nax1.set_title(\"Pie graph for status\")\nplt.tight_layout()\nplt.show()","23d11f39":"#Pair plot by default will consider every numeric feature to plot. Use vars to specify which columns to use.\nplt.figure()\nsns.set_style(\"whitegrid\")\nsns.pairplot(df, hue=\"status\", vars=['age', 'year', 'nodes'], size=3)\nplt.show()","5d581082":"for col in list(df.columns):\n    if col!=\"status\":\n        plt.figure()\n        sns.FacetGrid(df, hue=\"status\").map(sns.distplot, col).add_legend()\n        plt.title(\"PDF for \"+col)\n        plt.show()","23b4ef23":"df_status_one = df[df['status']==1]\ndf_status_two = df[df['status']==2]","89674521":"#Observation for 'age'\nlabel = [\"pdf of status 1\",\"cdf of status 1\",\"pdf of status 2\",\"cdf of status 2\"] #This is takken in order\n\ncounts, bin_edges = np.histogram(df_status_one['age'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\ncounts, bin_edges = np.histogram(df_status_two['age'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.xlabel(\"age\")\nplt.title(\"PDF and CDF for age column when status is 1 and 2\")\nplt.legend(label)\n\nplt.show()","d3e32cea":"#Observation for 'year'\nlabel = [\"pdf of status 1\",\"cdf of status 1\",\"pdf of status 2\",\"cdf of status 2\"] #This is takken in order\n\ncounts, bin_edges = np.histogram(df_status_one['year'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\ncounts, bin_edges = np.histogram(df_status_two['year'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.xlabel(\"year\")\nplt.title(\"PDF and CDF for year column when status is 1 and 2\")\nplt.legend(label)\n\nplt.show()","4fd5ede2":"#Observation for 'nodes'\nlabel = [\"pdf of status 1\",\"cdf of status 1\",\"pdf of status 2\",\"cdf of status 2\"] #This is takken in order\n\ncounts, bin_edges = np.histogram(df_status_one['nodes'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\ncounts, bin_edges = np.histogram(df_status_two['nodes'], bins=10, density=True)\nprint(\"counts list is=>\",counts) #Density of count of element in each bin\nprint(\"bin edges are=>\",bin_edges) #bins\n\npdf = counts\/sum(counts) #density at each bin. \ncdf = np.cumsum(pdf)\nprint(\"pdf is=>\",pdf)\nprint(\"cdf is=>\",cdf)\n\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.xlabel(\"nodes\")\nplt.title(\"PDF and CDF for nodes column when status is 1 and 2\")\nplt.legend(label)\n\nplt.show()","285c64e7":"print(\"Median:\")\nprint(np.median(df_status_one['age']), \"for status one and\", np.median(df_status_two['age']), \"for status two\")\nprint(np.median(df_status_one['year']), \"for status one and\", np.median(df_status_two['year']), \"for status two\")\nprint(np.median(df_status_one['nodes']), \"for status one and\", np.median(df_status_two['nodes']), \"for status two\")\n\n\nprint(\"\\nQuantile:\")\nprint(\"For age\")\nprint(np.percentile(df_status_one['age'], np.arange(0,100,25)), \"for status one and\", np.percentile(df_status_two['age'], np.arange(0,100,25)), \"for status two\")\nprint(\"For year\")\nprint(np.percentile(df_status_one['year'], np.arange(0,100,25)), \"for status one and\", np.percentile(df_status_two['year'], np.arange(0,100,25)), \"for status two\")\nprint(\"For nodes\")\nprint(np.percentile(df_status_one['nodes'], np.arange(0,100,25)), \"for status one and\", np.percentile(df_status_two['nodes'], np.arange(0,100,25)), \"for status two\")\n\nprint(\"\\n90th percentile:\")\nprint(\"For age\")\nprint(np.percentile(df_status_one['age'], 90), \"for status one and\", np.percentile(df_status_two['age'], 90), \"for status two\")\nprint(\"For year\")\nprint(np.percentile(df_status_one['year'], 90), \"for status one and\", np.percentile(df_status_two['year'], 90), \"for status two\")\nprint(\"For nodes\")\nprint(np.percentile(df_status_one['nodes'], 90), \"for status one and\", np.percentile(df_status_two['nodes'], 90), \"for status two\")\n\nfrom statsmodels import robust\nprint(\"\\nMedian Absolute Deviation:\")\nprint(\"For age\")\nprint(robust.mad(df_status_one['age']), \"for status one and\", robust.mad(df_status_two['age']), \"for status two\")\nprint(\"For year\")\nprint(robust.mad(df_status_one['year']), \"for status one and\", robust.mad(df_status_two['year']), \"for status two\")\nprint(\"For nodes\")\nprint(robust.mad(df_status_one['nodes']), \"for status one and\", robust.mad(df_status_two['nodes']), \"for status two\")\n\nprint(\"\\nIQR:\")\nprint(\"For age\")\nprint( (np.percentile(df_status_one['age'], 75)-np.percentile(df_status_one['age'], 25)), \"for status one and\", (np.percentile(df_status_one['age'], 75)-np.percentile(df_status_one['age'], 25)), \"for status two\")\nprint(\"For year\")\nprint( (np.percentile(df_status_one['year'], 75)-np.percentile(df_status_one['year'], 25)), \"for status one and\", (np.percentile(df_status_one['year'], 75)-np.percentile(df_status_one['year'], 25)), \"for status two\")\nprint(\"For nodes\")\nprint( (np.percentile(df_status_one['nodes'], 75)-np.percentile(df_status_one['nodes'], 25)), \"for status one and\", (np.percentile(df_status_one['nodes'], 75)-np.percentile(df_status_one['nodes'], 25)), \"for status two\")","36a7af4f":"plt.figure()\n\nax1 = plt.subplot(1,3,1)\nsns.boxplot(x='status', y='age', data=df)\nax1.set_title(\"Box plot for age\")\n\nax2 = plt.subplot(1,3,2)\nsns.boxplot(x='status', y='year', data=df)\nax2.set_title(\"Box plot for year\")\n\nax3 = plt.subplot(1,3,3)\nsns.boxplot(x='status', y='nodes', data=df)\nax3.set_title(\"Box plot for nodes\")\n\n\nplt.tight_layout()\nplt.show()","2855706d":"#Nodes for status 1 have too many outliers.","2d964304":"plt.figure()\n\nax1 = plt.subplot(1,3,1)\nsns.boxplot(x='status', y='age', data=df)\nax1.set_title(\"Box plot for age\")\n\nax2 = plt.subplot(1,3,2)\nsns.boxplot(x='status', y='year', data=df,)\nax2.set_title(\"Box plot for year\")\n\nax3 = plt.subplot(1,3,3)\nsns.boxplot(x='status', y='nodes', data=df,)\nax3.set_title(\"Box plot for nodes\")\n\n\nplt.tight_layout()\nplt.show()","6ab85d59":"plt.figure()\n\nax1 = plt.subplot(1,3,1)\nsns.violinplot(x='status', y='age', data=df)\nax1.set_title(\"Box plot for age\")\n\nax2 = plt.subplot(1,3,2)\nsns.violinplot(x='status', y='year', data=df)\nax2.set_title(\"Box plot for year\")\n\nax3 = plt.subplot(1,3,3)\nsns.violinplot(x='status', y='nodes', data=df)\nax3.set_title(\"Box plot for nodes\")\n\n\nplt.tight_layout()\nplt.show()","14909c2a":"<b>Domain<\/b>\n1. Lymph node-negative means the axillary lymph nodes do not contain cancer. \n2. Lymph node-positive means the axillary lymph nodes do contain cancer.\n3. https:\/\/ww5.komen.org\/BreastCancer\/LymphNodeStatusandStaging.html#:~:text=Lymph%20node%2Dnegative%20means%20the,lymph%20nodes%20do%20contain%20cancer.","1d3179e5":"## PDF and CDF","96c00df6":"<b>Inferences<\/b>\n1. In 1965 number of cases where patients survived for less than 5 years is max.\n2. It could be due to various factors such as\n    2.1. Large number of older patients.\n    2.2. Challenging mediacl condition and development in field of medicine.","5425064a":"## Nodes column","af10ca98":"Attribute Information:\n\nsrc: https:\/\/www.kaggle.com\/gilsousa\/habermans-survival-data-set\/version\/1\n\n1. Age of patient at time of operation (numerical)\n2. Patient's year of operation (year - 1900, numerical)\n3. Number of positive axillary nodes detected (numerical)\n4. Survival status (class attribute)\n    1 = the patient survived 5 years or longer\n    2 = the patient died within 5 year\n5. Missing Attribute Values: None","964b79f1":"# 2-D Observations","d4a58d0e":"### CDF","7e9cac22":"<b>Inferences<\/b>\n1. 86% of the patients which have shown 0 nodes, have survived for longer years.","1b8d6dbc":"<b>Objective<\/b>: Classify a new patient as belonging to one of the 2 cases given 3 features, i.e age , year and nodes.","5af726c6":"The dataset contains cases from a study that was conducted between 1958 and 1970 at the University of Chicago's Billings Hospital on the survival of patients who had undergone surgery for breast cancer.","e04cc8b9":"# Description","cc79954f":"1. <b>73%<\/b> of patients survived for more than 5 years\n2. Remaining <b>26%<\/b> of patiets survived for less than 5 years.","7fb617ca":"# Box plots and Violin plots ","0c6bb96c":"### In 1965","c87d76f9":"### PDF","e50607c3":"<b>Inferences<\/b>\n1. As expected , max patients this year has 0 or 1 nodes.","9d509abf":"## Year column","1111bbca":"<b>Inferences<\/b>\n1. Max number of nodes are showing 0, still patient survived the least in this year. \n2. It might be due to wrong testing in this year.","779e15c6":"### In 1960","9aa23346":"## Pair plots","9a8255cb":"# 1-D observations ","66c2897c":"## Age column","e900bc98":"## Status column","ae3d4bec":"# Median, Percentiles and IQR","81dbfd1b":"Mean of age is 52, and std 10, it may indicate that people with age group 40-60 are more prone to breast cancer .","52a89c3b":"<b>Inferences<\/b>\n1. More than 95% of all the patients who lived for more than 5 years have nodes less than 10. Hence having lesser number of nodes may show a sign of living for more than 5 years","ca6df0f2":"<b>Inferences<\/b>\n1. Age is normally distributed\n2. Mean value of age of the patients who survived for less than 5 yrs is greater. That is older patients tend to survice less years."}}