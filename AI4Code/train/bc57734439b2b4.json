{"cell_type":{"775a780f":"code","f362441d":"code","58accccf":"code","1ec5f4b1":"code","79e1bec1":"code","f87bb1a6":"code","09910d57":"code","1111039f":"code","67e832a9":"code","1562acb1":"markdown","fe529bff":"markdown"},"source":{"775a780f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f362441d":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#Read the input data\nX_full = pd.read_csv('..\/input\/learn-together\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/learn-together\/test.csv', index_col='Id')\n\ny = X_full.Cover_Type\nX_full.drop(['Cover_Type'], axis=1,inplace=True)\n\n#Break off the validation set from the training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","58accccf":"#shouldn't be any categorical columns, train dataset is completely numeric\nprint(categorical_cols)","1ec5f4b1":"print(numerical_cols)","79e1bec1":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = RandomForestRegressor(n_estimators=500, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))\n","f87bb1a6":"from xgboost import XGBRegressor\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='mean')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n\nmodelXGB = XGBRegressor(random_state=0, n_estimators=4000, learning_rate=0.02, early_stopping_rounds=5)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', modelXGB)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))\n","09910d57":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='mean')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\nmyGridSearchCVPipeline = Pipeline([('imputer', Imputer()), ('xgbrg', XGBRegressor())])\n\n\n","1111039f":"param_grid = {\n    \"xgbrg__n_estimators\": [10,50,100,500],\n    \"xgbrg__learning_rate\": [0.1, 0.5, 1]\n    \n}\n\nfit_params = {\"xgbrg__eval_set\": [(val_X, val_y)],\n              \"xgbrg__early_stopping_rounds\": 10,\n              \"xgbrg__verbose\":  False\n}","67e832a9":"preds = clf.predict(X_test)\n\n# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'Target': preds})\noutput.to_csv('submission.csv', index=False)\n","1562acb1":"Alternate Configuration 1  XGBRegressor  -- worse MAE socre","fe529bff":"**Lets try GridSearchCV to find the optimal parameters\n**"}}