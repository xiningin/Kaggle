{"cell_type":{"87a5e24c":"code","d8b170dd":"code","e3551f91":"code","7d9b0b28":"code","2c87beb4":"code","45efef97":"code","0918fc2a":"code","c217be36":"code","6b09c243":"code","7e0a17e7":"code","9be698fe":"code","67470e66":"code","c55643cf":"code","43ed13ae":"code","cca31db1":"code","af1219b2":"code","abc80a5f":"code","203d4cb7":"code","b60188b3":"code","7dec0bfd":"code","2a3c032b":"code","b544cca3":"code","03137bd9":"code","6290666b":"code","fb66dc9f":"code","39ec3600":"code","ffa9f480":"code","113f0060":"code","38e4dc7d":"code","a703310f":"code","ef4a1b4a":"markdown","eb70b7fc":"markdown","f676fb02":"markdown","a4682d2f":"markdown","7404ce20":"markdown","009a0f47":"markdown","f31d2121":"markdown","4de387d0":"markdown","fff30b9a":"markdown","aa0d243f":"markdown","78695ec9":"markdown","59d3109e":"markdown","978b0fae":"markdown","d65a7021":"markdown","00c00931":"markdown","dac3a2de":"markdown","6cc05f6f":"markdown","81684546":"markdown","69d7e44a":"markdown","cf8948fd":"markdown","b1d5721c":"markdown","2461caf2":"markdown","23ecbd00":"markdown","b8eb7410":"markdown"},"source":{"87a5e24c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8b170dd":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport missingno as mn\nimport plotly.graph_objects as go\nimport numpy as np\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\n\npd.set_option('display.max_rows', 50)    \npd.set_option('display.max_columns', 50)    ","e3551f91":"df_GlobalDeathsRaw = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/RAW_global_deaths.csv')\ndf_GlobalDeaths = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv')\ndf_GlobalMetadata = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_metadata.csv')\ndf_USDeaths = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_us_deaths.csv')\ndf_USDeathsRaw = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/RAW_us_deaths.csv')\ndf_GlobalCases = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv')\ndf_GlobalCasesRaw= pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/RAW_global_confirmed_cases.csv')","7d9b0b28":"# Global Deaths\n\ndf_GlobalDeaths5 = df_GlobalDeaths\ndf_GlobalDeaths5 = df_GlobalDeaths5.T\ndf_GlobalDeaths5['Countries'] = df_GlobalDeaths5.index.astype(str) + '' + df_GlobalDeaths5.loc[:,0].astype(str)\ndf_GlobalDeaths5['Countries']= df_GlobalDeaths5['Countries'].str.replace('nan','')\ndf_GlobalDeaths5 = df_GlobalDeaths5.T\nindex = len(df_GlobalDeaths5.index) - 1 # to get current date\ndf_GlobalDeaths5.columns = df_GlobalDeaths5.iloc[index]\ndf_GlobalDeaths5 = df_GlobalDeaths5.drop([0, 'Countries']) \ndf_GlobalDeaths5['Australia'] = (df_GlobalDeaths5['AustraliaAustralian Capital Territory'].astype(float)\n                                + df_GlobalDeaths5['Australia.1New South Wales'].astype(float)\n                                + df_GlobalDeaths5['Australia.2Northern Territory'].astype(float)\n                                + df_GlobalDeaths5['Australia.3Queensland'].astype(float)\n                                + df_GlobalDeaths5['Australia.4South Australia'].astype(float)\n                                + df_GlobalDeaths5['Australia.5Tasmania'].astype(float)\n                                + df_GlobalDeaths5['Australia.6Victoria'].astype(float)\n                                + df_GlobalDeaths5['Australia.7Western Australia'].astype(float)\n                                )\ndf_GlobalDeaths5['Canada'] = (df_GlobalDeaths5['CanadaAlberta'].astype(float)\n                                + df_GlobalDeaths5['Canada.1British Columbia'].astype(float)\n                                + df_GlobalDeaths5['Canada.2Diamond Princess'].astype(float)\n                                + df_GlobalDeaths5['Canada.3Grand Princess'].astype(float)\n                                + df_GlobalDeaths5['Canada.4Manitoba'].astype(float)\n                                + df_GlobalDeaths5['Canada.5New Brunswick'].astype(float)\n                                + df_GlobalDeaths5['Canada.6Newfoundland and Labrador'].astype(float)\n                                + df_GlobalDeaths5['Canada.7Northwest Territories'].astype(float)\n                                + df_GlobalDeaths5['Canada.8Nova Scotia'].astype(float)\n                                + df_GlobalDeaths5['Canada.9Nunavut'].astype(float)\n                                + df_GlobalDeaths5['Canada.10Ontario'].astype(float)\n                                + df_GlobalDeaths5['Canada.11Prince Edward Island'].astype(float)\n                                + df_GlobalDeaths5['Canada.12Quebec'].astype(float)\n                                + df_GlobalDeaths5['Canada.13Repatriated Travellers'].astype(float)\n                                + df_GlobalDeaths5['Canada.14Saskatchewan'].astype(float)\n                                + df_GlobalDeaths5['Canada.15Yukon'].astype(float)\n                                )\ndf_GlobalDeaths5['China'] = (df_GlobalDeaths5['ChinaAnhui'].astype(float)\n                                + df_GlobalDeaths5['China.1Beijing'].astype(float)\n                                + df_GlobalDeaths5['China.2Chongqing'].astype(float)\n                                + df_GlobalDeaths5['China.3Fujian'].astype(float)\n                                + df_GlobalDeaths5['China.4Gansu'].astype(float)\n                                + df_GlobalDeaths5['China.5Guangdong'].astype(float)\n                                + df_GlobalDeaths5['China.6Guangxi'].astype(float)\n                                + df_GlobalDeaths5['China.7Guizhou'].astype(float)\n                                + df_GlobalDeaths5['China.8Hai'].astype(float)\n                                + df_GlobalDeaths5['China.9Hebei'].astype(float)\n                                + df_GlobalDeaths5['China.10Heilongjiang'].astype(float)\n                                + df_GlobalDeaths5['China.11He'].astype(float)\n                                + df_GlobalDeaths5['China.12Hong Kong'].astype(float)\n                                + df_GlobalDeaths5['China.13Hubei'].astype(float)\n                                + df_GlobalDeaths5['China.14Hu'].astype(float)\n                                + df_GlobalDeaths5['China.15Inner Mongolia'].astype(float)\n                                + df_GlobalDeaths5['China.16Jiangsu'].astype(float)\n                                + df_GlobalDeaths5['China.17Jiangxi'].astype(float)\n                                + df_GlobalDeaths5['China.18Jilin'].astype(float)\n                                + df_GlobalDeaths5['China.19Liaoning'].astype(float)\n                                + df_GlobalDeaths5['China.20Macau'].astype(float)\n                                + df_GlobalDeaths5['China.21Ningxia'].astype(float)\n                                + df_GlobalDeaths5['China.22Qinghai'].astype(float)\n                                + df_GlobalDeaths5['China.23Shaanxi'].astype(float)\n                                + df_GlobalDeaths5['China.24Shandong'].astype(float)\n                                + df_GlobalDeaths5['China.25Shanghai'].astype(float)\n                                + df_GlobalDeaths5['China.27Sichuan'].astype(float)\n                                + df_GlobalDeaths5['China.28Tianjin'].astype(float)\n                                + df_GlobalDeaths5['China.29Tibet'].astype(float)\n                                #+ df_GlobalDeaths5['China.30Xinjiang'].astype(float)\n                                #+ df_GlobalDeaths5['China.31Yun'].astype(float)\n                                #+ df_GlobalDeaths5['China.32Zhejiang'].astype(float)\n                                )\n\ndf_GlobalDeaths5['Congo'] = (df_GlobalDeaths5['Congo (Brazzaville)'].astype(float)\n                                + df_GlobalDeaths5['Congo (Kinshasa)'].astype(float)\n                                )\n\ndf_GlobalDeaths5['Denmark'] = (df_GlobalDeaths5['DenmarkFaroe Islands'].astype(float)\n                                + df_GlobalDeaths5['Denmark.1Greenland'].astype(float)\n                                + df_GlobalDeaths5['Denmark.2'].astype(float)\n                                )\n\ndf_GlobalDeaths5['France'] = (df_GlobalDeaths5['FranceFrench Guiana'].astype(float)\n                                + df_GlobalDeaths5['France.1French Polynesia'].astype(float)\n                                + df_GlobalDeaths5['France.2Guadeloupe'].astype(float)\n                                + df_GlobalDeaths5['France.3Martinique'].astype(float)\n                                + df_GlobalDeaths5['France.4Mayotte'].astype(float)\n                                + df_GlobalDeaths5['France.5New Caledonia'].astype(float)\n                                + df_GlobalDeaths5['France.6Reunion'].astype(float)\n                                + df_GlobalDeaths5['France.7Saint Barthelemy'].astype(float)\n                                + df_GlobalDeaths5['France.8Saint Pierre and Miquelon'].astype(float)\n                                + df_GlobalDeaths5['France.9St Martin'].astype(float)\n                                + df_GlobalDeaths5['France.10Wallis and Futuna'].astype(float)\n                                + df_GlobalDeaths5['France.11'].astype(float)\n                                )\n\ndf_GlobalDeaths5['Netherlands'] = (df_GlobalDeaths5['NetherlandsAruba'].astype(float)\n                                + df_GlobalDeaths5['Netherlands.1Bonaire, Sint Eustatius and Saba'].astype(float)\n                                + df_GlobalDeaths5['Netherlands.2Curacao'].astype(float)\n                                + df_GlobalDeaths5['Netherlands.3Sint Maarten'].astype(float)\n                                + df_GlobalDeaths5['Netherlands.4'].astype(float)\n                                )\n\ndf_GlobalDeaths5['United Kingdom'] = (df_GlobalDeaths5['United KingdomAnguilla'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.1Bermuda'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.2British Virgin Islands'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.3Cayman Islands'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.4Channel Islands'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.5Falkland Islands (Malvinas)'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.6Gibraltar'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.7Isle of Man'].astype(float)\n                                + df_GlobalDeaths5['United Kingdom.8Montserrat'].astype(float)\n                                #+ df_GlobalDeaths5['United Kingdom.9Turks and Caicos Islands'].astype(float)\n                                #+ df_GlobalDeaths5['United Kingdom.10'].astype(float)\n                                )\ndf_GlobalDeaths5 = df_GlobalDeaths5.drop(['AustraliaAustralian Capital Territory',\n 'Australia.1New South Wales',\n 'Australia.2Northern Territory',\n 'Australia.3Queensland',\n 'Australia.4South Australia',\n 'Australia.5Tasmania',\n 'Australia.6Victoria',\n 'Australia.7Western Australia',\n    'CanadaAlberta',\n 'Canada.1British Columbia',\n 'Canada.2Diamond Princess',\n 'Canada.3Grand Princess',\n 'Canada.4Manitoba',\n 'Canada.5New Brunswick',\n 'Canada.6Newfoundland and Labrador',\n 'Canada.7Northwest Territories',\n 'Canada.8Nova Scotia',\n 'Canada.9Nunavut',\n 'Canada.10Ontario',\n 'Canada.11Prince Edward Island',\n 'Canada.12Quebec',\n 'Canada.13Repatriated Travellers',\n 'Canada.14Saskatchewan',\n 'Canada.15Yukon',\n    'Congo (Brazzaville)',\n    'Congo (Kinshasa)',\n    'ChinaAnhui',\n 'China.1Beijing',\n 'China.2Chongqing',\n 'China.3Fujian',\n 'China.4Gansu',\n 'China.5Guangdong',\n 'China.6Guangxi',\n 'China.7Guizhou',\n 'China.8Hai',\n 'China.9Hebei',\n 'China.10Heilongjiang',\n 'China.11He',\n 'China.12Hong Kong',\n 'China.13Hubei',\n 'China.14Hu',\n 'China.15Inner Mongolia',\n 'China.16Jiangsu',\n 'China.17Jiangxi',\n 'China.18Jilin',\n 'China.19Liaoning',\n 'China.20Macau',\n 'China.21Ningxia',\n 'China.22Qinghai',\n 'China.23Shaanxi',\n 'China.24Shandong',\n 'China.25Shanghai',\n 'China.26Shanxi',\n 'China.27Sichuan',\n 'China.28Tianjin',\n 'China.29Tibet',\n #'China.30Xinjiang',\n #'China.31Yun',\n #'China.32Zhejiang',\n    'DenmarkFaroe Islands',\n 'Denmark.1Greenland',\n 'Denmark.2',\n 'FranceFrench Guiana',\n 'France.1French Polynesia',\n 'France.2Guadeloupe',\n 'France.3Martinique',\n 'France.4Mayotte',\n 'France.5New Caledonia',\n 'France.6Reunion',\n 'France.7Saint Barthelemy',\n 'France.8Saint Pierre and Miquelon',\n 'France.9St Martin',\n 'France.10Wallis and Futuna',\n 'France.11',\n    'NetherlandsAruba',\n 'Netherlands.1Bonaire, Sint Eustatius and Saba',\n 'Netherlands.2Curacao',\n 'Netherlands.3Sint Maarten',\n 'Netherlands.4',\n    'United KingdomAnguilla',\n 'United Kingdom.1Bermuda',\n 'United Kingdom.2British Virgin Islands',\n 'United Kingdom.3Cayman Islands',\n 'United Kingdom.4Channel Islands',\n 'United Kingdom.5Falkland Islands (Malvinas)',\n 'United Kingdom.6Gibraltar',\n 'United Kingdom.7Isle of Man',\n 'United Kingdom.8Montserrat'],axis=1)\n #'United Kingdom.9Turks and Caicos Islands',\n #'United Kingdom.10'],\n                                         \ndf_GlobalDeaths5['Country\/RegionProvince\/State']= pd.to_datetime(df_GlobalDeaths5['Country\/RegionProvince\/State'])\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Country\/RegionProvince\/State\": \"Date\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"US\": \"United States of America\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Argentian\": \"Argentina\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Korea, South\": \"South Korea\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"North Macedonia\": \"Macedonia\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Bosnia and Herzegovian\": \"Bosnia and Herz.\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Central African Republic\": \"Central African Rep.\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Ghaan\": \"Ghana\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={'Botswaan': \"Botswana\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={'Dominican Republic': \"Dominican Rep.\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={'Guyaan': \"Guyana\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={'South Sudan': \"S. Sudan\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={'Congo': 'Dem. Rep. Congo'})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Eswatini\": \"eSwatini\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Burma\": \"Myanmar\"})\ndf_GlobalDeaths5 = df_GlobalDeaths5.rename(columns={\"Taiwan*\": \"Taiwan\"})\ndf_GlobalDeaths5","2c87beb4":"df_GlobalCases = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv')\n# Cases Cleansed\n\ndf_GlobalCases2 = df_GlobalCases\ndf_GlobalCases2 = df_GlobalCases2.drop([0])\ndf_GlobalCases2.iloc[:, 1:] = df_GlobalCases2.iloc[:,1:].astype(float)\n\nfor x in df_GlobalCases2.columns:\n    if x.startswith('Australia'):\n        df_GlobalCases2['Australia'] = df_GlobalCases2['Australia'] + df_GlobalCases2[x]\n\nfor x in df_GlobalCases2.columns:\n    if x.startswith('Canada'):\n        df_GlobalCases2['Canada'] = df_GlobalCases2['Canada'] + df_GlobalCases2[x]\n        \nfor x in df_GlobalCases2.columns:\n    if x.startswith('China'):\n        df_GlobalCases2['China'] = df_GlobalCases2['China'] + df_GlobalCases2[x]\n\ndf_GlobalCases2['Congo'] = (df_GlobalCases2['Congo (Brazzaville)'].astype(float)\n                                + df_GlobalCases2['Congo (Kinshasa)'].astype(float)\n                                )        \n        \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Denmark'):\n        df_GlobalCases2['Denmark'] = df_GlobalCases2['Denmark'] + df_GlobalCases2[x]\n\nfor x in df_GlobalCases2.columns:\n    if x.startswith('France'):\n        df_GlobalCases2['France'] = df_GlobalCases2['France'] + df_GlobalCases2[x]\n         \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Netherlands'):\n        df_GlobalCases2['Netherlands'] = df_GlobalCases2['Netherlands'] + df_GlobalCases2[x]\n         \nfor x in df_GlobalCases2.columns:\n    if x.startswith('United Kingdom'):\n        df_GlobalCases2['United Kingdom'] = df_GlobalCases2['United Kingdom'] + df_GlobalCases2[x]\n \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Australia.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Canada.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Congo ('):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('China.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Denmark.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('France.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('Netherlands.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \nfor x in df_GlobalCases2.columns:\n    if x.startswith('United Kingdom.'):\n         df_GlobalCases2 = df_GlobalCases2.drop([x], axis=1)\n            \ndf_GlobalCases2['Country\/Region']= pd.to_datetime(df_GlobalCases2['Country\/Region'])    \n\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Country\/Region\": \"Date\"})        \n\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"US\": \"United States of America\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Korea, South\": \"South Korea\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"North Macedonia\": \"Macedonia\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Bosnia and Herzegovina\": \"Bosnia and Herz.\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Central African Republic\": \"Central African Rep.\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={'Dominican Republic': \"Dominican Rep.\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={'South Sudan': \"S. Sudan\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={'Congo': 'Dem. Rep. Congo'})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Eswatini\": \"eSwatini\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Burma\": \"Myanmar\"})\ndf_GlobalCases2 = df_GlobalCases2.rename(columns={\"Taiwan*\": \"Taiwan\"})\n\ndf_GlobalCases2[\"Turkey\"].replace({823225: 0}, inplace=True)\n\ndf_GlobalCases2\n","45efef97":"#CAses cleansed with Lat and Long\n\n\ndf_GlobalCasesLL = df_GlobalCases.T\ndf_GlobalCasesLL.columns = df_GlobalCasesLL.iloc[0]\ndf_GlobalCasesLL = df_GlobalCasesLL.drop('Country\/Region')\n\n\ndf_GlobalCasesRaw.index = df_GlobalCasesLL.index\n\ndf_GlobalCasesLL['Lat'] = df_GlobalCasesRaw['Lat']\ndf_GlobalCasesLL['Long'] = df_GlobalCasesRaw['Long']\n\ndf_GlobalCasesLL = df_GlobalCasesLL.T\ndf_GlobalCasesLL = df_GlobalCasesLL.drop('Province\/State')\ndf_GlobalCasesLL = df_GlobalCasesLL.astype(float)\n\nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Australia'):\n        df_GlobalCasesLL['Australia'] = df_GlobalCasesLL['Australia'] + df_GlobalCasesLL[x]\n\nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Canada'):\n        df_GlobalCasesLL['Canada'] = df_GlobalCasesLL['Canada'] + df_GlobalCasesLL[x]\n        \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('China'):\n        df_GlobalCasesLL['China'] = df_GlobalCasesLL['China'] + df_GlobalCasesLL[x]\n\ndf_GlobalCasesLL['Congo'] = (df_GlobalCasesLL['Congo (Brazzaville)'].astype(float)\n                                + df_GlobalCasesLL['Congo (Kinshasa)'].astype(float))        \n        \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Denmark'):\n        df_GlobalCasesLL['Denmark'] = df_GlobalCasesLL['Denmark'] + df_GlobalCasesLL[x]\n\nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('France'):\n        df_GlobalCasesLL['France'] = df_GlobalCasesLL['France'] + df_GlobalCasesLL[x]\n         \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Netherlands'):\n        df_GlobalCasesLL['Netherlands'] = df_GlobalCasesLL['Netherlands'] + df_GlobalCasesLL[x]\n         \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('United Kingdom'):\n        df_GlobalCasesLL['United Kingdom'] = df_GlobalCasesLL['United Kingdom'] + df_GlobalCasesLL[x]\n \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Australia.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Canada.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Congo ('):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('China.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Denmark.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('France.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('Netherlands.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)\n            \nfor x in df_GlobalCasesLL.columns:\n    if x.startswith('United Kingdom.'):\n         df_GlobalCasesLL = df_GlobalCasesLL.drop([x], axis=1)   \n\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Country\/Region\": \"Date\"})        \n\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"US\": \"United States of America\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Korea, South\": \"South Korea\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"North Macedonia\": \"Macedonia\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Bosnia and Herzegovina\": \"Bosnia and Herz.\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Central African Republic\": \"Central African Rep.\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={'Dominican Republic': \"Dominican Rep.\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={'South Sudan': \"S. Sudan\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={'Congo': 'Dem. Rep. Congo'})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Eswatini\": \"eSwatini\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Burma\": \"Myanmar\"})\ndf_GlobalCasesLL = df_GlobalCasesLL.rename(columns={\"Taiwan*\": \"Taiwan\"})\n\ndf_GlobalCasesLL[\"Turkey\"].replace({823225: 0}, inplace=True)\n    \ndf_GlobalCasesLL = df_GlobalCasesLL.T\ndf_GlobalCasesLL","0918fc2a":"# cleansed merge with deaths and cases for lethality\n\ndf_GlobalCases = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_confirmed_cases.csv')\ndf_GlobalDeaths = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv')\n\ndf_GlobalDeathsB = df_GlobalDeaths\ndf_GlobalCasesB = df_GlobalCases\n\ndf_GlobalCasesB.iloc[1:, 1:] = df_GlobalCasesB.iloc[1:,1:].astype(float).replace(0, np.nan)\ndf_GlobalDeathsB.iloc[1:, 1:] = df_GlobalDeathsB.iloc[1:,1:].astype(float).replace(0, np.nan)\n\ndivisionResults = df_GlobalDeathsB.iloc[1:, 1:].div(df_GlobalCasesB.iloc[1:, 1:]) \n\ndivisionResults = (divisionResults.mul(100, axis=0))\n\n\ndf_GlobalCasesBdate = df_GlobalCasesB\ndf_GlobalCasesBdate = df_GlobalCasesBdate.drop([0]) \ndivisionResults['Date'] = df_GlobalCasesBdate['Country\/Region']\n\ndivisionResults['Date'] = pd.to_datetime(divisionResults['Date']) \ndivisionResults","c217be36":"# cleansed deaths table to merge with cases for lethality\n\ndf_GlobalDeaths = pd.read_csv('\/kaggle\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv')\n\ndf_GlobalDeathsCL = df_GlobalDeaths\ndf_GlobalDeathsCL = df_GlobalDeathsCL.drop([0])\ndf_GlobalDeathsCL.iloc[:, 1:] = df_GlobalDeathsCL.iloc[:,1:].astype(float)\n\nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Australia'):\n        df_GlobalDeathsCL['Australia'] = df_GlobalDeathsCL['Australia'] + df_GlobalDeathsCL[x]\n\nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Canada'):\n        df_GlobalDeathsCL['Canada'] = df_GlobalDeathsCL['Canada'] + df_GlobalDeathsCL[x]\n        \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('China'):\n        df_GlobalDeathsCL['China'] = df_GlobalDeathsCL['China'] + df_GlobalDeathsCL[x]\n\ndf_GlobalDeathsCL['Congo'] = (df_GlobalDeathsCL['Congo (Brazzaville)'].astype(float)\n                                + df_GlobalDeathsCL['Congo (Kinshasa)'].astype(float)\n                                )        \n        \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Denmark'):\n        df_GlobalDeathsCL['Denmark'] = df_GlobalDeathsCL['Denmark'] + df_GlobalDeathsCL[x]\n\nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('France'):\n        df_GlobalDeathsCL['France'] = df_GlobalDeathsCL['France'] + df_GlobalDeathsCL[x]\n         \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Netherlands'):\n        df_GlobalDeathsCL['Netherlands'] = df_GlobalDeathsCL['Netherlands'] + df_GlobalDeathsCL[x]\n         \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('United Kingdom'):\n        df_GlobalDeathsCL['United Kingdom'] = df_GlobalDeathsCL['United Kingdom'] + df_GlobalDeathsCL[x]\n \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Australia.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Canada.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Congo ('):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('China.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Denmark.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('France.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('Netherlands.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \nfor x in df_GlobalDeathsCL.columns:\n    if x.startswith('United Kingdom.'):\n         df_GlobalDeathsCL = df_GlobalDeathsCL.drop([x], axis=1)\n            \ndf_GlobalDeathsCL['Country\/Region']= pd.to_datetime(df_GlobalDeathsCL['Country\/Region'])    \n\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Country\/Region\": \"Date\"})        \n\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"US\": \"United States of America\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Korea, South\": \"South Korea\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"North Macedonia\": \"Macedonia\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Bosnia and Herzegovina\": \"Bosnia and Herz.\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Central African Republic\": \"Central African Rep.\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={'Dominican Republic': \"Dominican Rep.\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={'South Sudan': \"S. Sudan\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={'Congo': 'Dem. Rep. Congo'})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Eswatini\": \"eSwatini\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Burma\": \"Myanmar\"})\ndf_GlobalDeathsCL = df_GlobalDeathsCL.rename(columns={\"Taiwan*\": \"Taiwan\"})\n\ndf_GlobalDeathsCL","6b09c243":"# merge of deaths and cases for lethality per country\n\ndf_GlobalCasesCC = df_GlobalCases2  #.drop(columns=['Sum'])\ndf_GlobalDeathsCC = df_GlobalDeathsCL\n\ndf_GlobalCasesCC.iloc[:, 1:] = df_GlobalCasesCC.iloc[:,1:].astype(float).replace(0, np.nan)\ndf_GlobalDeathsCC.iloc[:, 1:] = df_GlobalDeathsCC.iloc[:,1:].astype(float).replace(0, np.nan)\n\nDD = df_GlobalDeathsCC.iloc[:, 1:].div(df_GlobalCasesCC.iloc[:, 1:]) \n\nDD = (DD.mul(100, axis=0))\n\n\ndf_GlobalCasesBdate = df_GlobalCasesB\ndf_GlobalCasesBdate = df_GlobalCasesBdate.drop([0]) \nDD['Date'] = df_GlobalCasesBdate['Country\/Region']\n\nDD['Date'] = pd.to_datetime(divisionResults['Date']) \n\nDD\n","7e0a17e7":"df_GlobalDeathsSum = df_GlobalDeaths5.iloc[:, 1:191].astype(float)\ndf_GlobalDeathsSum['Sum'] = df_GlobalDeathsSum.sum(axis = 1, skipna = True) \ndf_GlobalDeathsSum['Date'] = df_GlobalDeaths5['Date']\nfig = px.line(df_GlobalDeathsSum, x='Date' , y='Sum', labels={\n                     \"Date\": \"Date\",\n                     \"Sum\": \"Daily Deaths\"\n                 },title='Daily Global Deaths')\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","9be698fe":"df_GlobalDeathsSum2 = df_GlobalDeaths5.iloc[:, 1:191].astype(float)\ndf_GlobalDeathsSum2['Sum'] = df_GlobalDeathsSum2.sum(axis = 1, skipna = True) \ndf_GlobalDeathsSum2b = df_GlobalDeathsSum2.cumsum(axis = 0)\ndf_GlobalDeathsSum2b['Date'] = df_GlobalDeaths5['Date']\nfig2 = px.line(df_GlobalDeathsSum2b, x='Date' , y='Sum', labels={\n                     \"Date\": \"Date\",\n                     \"Sum\": \"Deaths\"\n                 },title='Global Deaths')\nfig2.update_xaxes(rangeslider_visible=True)\nfig2.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig2.show()","67470e66":"\ndf_GlobalDeaths10 = df_GlobalDeaths5.T\ndf_GlobalDeaths10.drop(df_GlobalDeaths10.index[0], inplace=True)\ndf_GlobalDeaths10['Total Deaths'] = df_GlobalDeaths10.sum(axis = 1, skipna = True) \nindex = len(df_GlobalDeaths10.columns) - 1\ndf_GlobalDeaths10.drop(df_GlobalDeaths10.iloc[:, 0:index], axis=1, inplace=True)\n\ndf_GlobalDeaths10 = df_GlobalDeaths10[~df_GlobalDeaths10['Total Deaths'].str.contains(\"0.00.00.00.00\", na=False)]\ndf_GlobalDeaths10 = df_GlobalDeaths10.sort_values(by = 'Total Deaths', ascending = False)\ndf_GlobalDeaths10['Total Deaths'] = df_GlobalDeaths10['Total Deaths'].astype(int)\ndf_GlobalDeaths10.style.background_gradient('viridis')\n","c55643cf":"df_GlobalDeaths11 = df_GlobalDeaths5.T\ndf_GlobalDeaths11 = df_GlobalDeaths11.drop('Date')\ndf_GlobalDeaths11['Sum'] = df_GlobalDeaths11.sum(axis = 1, skipna = True)\nindex = len(df_GlobalDeaths11.columns) - 1\ndf_GlobalDeaths11.drop(df_GlobalDeaths11.iloc[:, 0:index], inplace=True, axis=1) # change iloc for current date\n\ndf_GlobalDeaths11.index.name = 'name'\ndf_GlobalDeaths11 = df_GlobalDeaths11[~df_GlobalDeaths11['Sum'].str.contains(\"0.00.00.00.00\", na=False)]\n\ndf_GlobalDeaths11['Sum'].astype(float)\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\ntest2 = pd.merge(world,df_GlobalDeaths11,on=['name'],how='left')\ntest2['Sum'] = test2['Sum'].fillna(0)\ntest2['Deaths per million'] = ((test2['Sum']\/test2['pop_est'])*1000000).astype(int)\ntest2 = test2.drop(columns=['pop_est', 'continent', 'iso_a3', 'gdp_md_est', 'geometry', 'Sum'])\ntest2 = test2.rename(columns={'name': 'Country'})\ntest2 = test2.sort_values(by = 'Deaths per million', ascending = False)\ntest2 = test2.set_index('Country')\ntest2.style.background_gradient('viridis')\n","43ed13ae":"fig = go.Figure()\nfor step in df_GlobalDeaths5.columns.values[1:]:\n    fig.add_trace(\n        go.Scatter(\n            name=\"Deaths in \" + step,\n            x=df_GlobalDeaths5['Date'],\n            y=df_GlobalDeaths5[step].values))\n\nfig.update_layout(title_text=\"Daily Deaths per Country\")\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\", ticklabelmode=\"period\")\nfig.show()","cca31db1":"df_GlobalDeaths12 = df_GlobalDeaths5.T\nworld2 = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld2= world2.rename(columns={'name': 'Countries'})\ntest3 = pd.merge(world2,df_GlobalDeaths12,on=['Countries'],how='left')\ntest3 = test3.drop(columns=['continent', 'iso_a3', 'gdp_md_est', 'geometry'])\ntest3 = test3.fillna(0)\ntest3.iloc[:,2:] = test3.iloc[:,2:].div(test3.pop_est, axis=0)\ntest3.iloc[:,2:] = (test3.iloc[:,2:].mul(1000000, axis=0)).astype(int)\ntest3 = test3.sort_values(by = 'Countries', ascending = True)\ntest3 = test3.T\ntest3.columns = test3.iloc[1]\ntest3 = test3.drop('pop_est')\ntest3 = test3.drop('Countries')\ntest3['Date'] = df_GlobalDeaths5['Date']\n\nfig = go.Figure()\nfor step in test3.columns.values[0:177]:\n    fig.add_trace(\n        go.Scatter(\n            name=\"Deaths in \" + step,\n            x=test3['Date'],\n            y=test3[step].values))\n\nfig.update_layout(title_text=\"Daily Deaths per million Countrywise\")\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\", ticklabelmode=\"period\")\nfig.show()\n","af1219b2":"df_GlobalDeaths7 = df_GlobalDeaths5.T\n#df_GlobalDeaths7 = df_GlobalDeaths7.drop('Sum')\ndf_GlobalDeaths7 = df_GlobalDeaths7.drop('Date')\ndf_GlobalDeaths7['Sum'] = df_GlobalDeaths7.sum(axis = 1, skipna = True)\nindex = len(df_GlobalDeaths7.columns)-1\n\ndf_GlobalDeaths7.drop(df_GlobalDeaths7.iloc[:, 0:index], inplace=True, axis=1) # change iloc for current date\n\ndf_GlobalDeaths7.index.name = 'name'\n#df_GlobalDeaths7['Sum'].astype(float)\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\ntest = pd.merge(world,df_GlobalDeaths7,on=['name'],how='left')\ntest['Sum'] = test['Sum'].fillna(0)\ntest.plot(cmap='cividis_r', column='Sum', legend=True, figsize=(20,15), scheme='quantiles', k=5)\nplt.title('Global Death Toll', fontsize=20)\nplt.show()","abc80a5f":"\ntest2b = test2\n\ntest2b.index.name = 'name'\ntest2b['Deaths per million'].astype(float)\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ntest2c = pd.merge(world,test2b,on=['name'],how='left')\ntest2c['Deaths per million'] = test2c['Deaths per million'].fillna(0)\ntest2c.plot(cmap='cividis_r', column='Deaths per million', legend=True, figsize=(20,15), scheme='quantiles', k=5)\nplt.title('Global Deaths per million', fontsize=20)\nplt.show()","203d4cb7":"region = []\ntime = []\nlatitude = []\nlongitude = []\nfat = []\nfor u in list(df_GlobalDeathsRaw.columns)[4:]:\n    time.append([u for i in range(df_GlobalDeathsRaw.shape[0])])\n    region.append(list(df_GlobalDeathsRaw['Country\/Region']))\n    latitude.append(list(df_GlobalDeathsRaw.Lat))\n    longitude.append(list(df_GlobalDeathsRaw.Long))\n    fat.append(list(df_GlobalDeathsRaw[u]))\n    \nglobal_covid19 = pd.DataFrame()\nglobal_covid19['date'] = np.concatenate(time)\nglobal_covid19['country'] = np.concatenate(region)\nglobal_covid19['Lat'] = np.concatenate(latitude)\nglobal_covid19['Long'] = np.concatenate(longitude)\nglobal_covid19['deaths'] = np.concatenate(fat)\n\ncenter_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(global_covid19, lat='Lat', lon='Long', z=\"deaths\",\n                        center = center_point, hover_name='country', zoom = 5,\n                         range_color= [20, 20] , radius=20,\n                        mapbox_style= 'open-street-map', title='Deaths Sum per Country in the World',\n                        animation_frame='date')\nfigx.update(layout_coloraxis_showscale=True)\nfigx.update_layout(autosize=False, width=1000, height=1000)\nfigx.show()","b60188b3":"df_GlobalDeathsRaw2 = df_GlobalDeathsRaw\nworld3 = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nworld3 = world3.rename(columns={'name': 'Country\/Region'})\ntest4 = pd.merge(world3, df_GlobalDeathsRaw2, on=['Country\/Region'], how='left')\ntest4 = test4.drop(columns=['continent', 'iso_a3', 'gdp_md_est', 'geometry', 'Province\/State'])\ntest4 = test4.fillna(0)\ntest4.iloc[:,4:] = test4.iloc[:, 4:].div(test4.pop_est, axis=0)\ntest4.iloc[:,4:] = (test4.iloc[:, 4:].mul(1000000, axis=0)).astype(int)\ntest4 = test4.drop(columns=['pop_est'])\n\nregion = []\ntime = []\nlatitude = []\nlongitude = []\nfat = []\nfor u in list(test4.columns)[28:]:\n    time.append([u for i in range(test4.shape[0])])\n    region.append(list(test4['Country\/Region']))\n    latitude.append(list(test4.Lat))\n    longitude.append(list(test4.Long))\n    fat.append(list(test4[u]))\n\n\nglobal_covid19 = pd.DataFrame()\nglobal_covid19['date'] = np.concatenate(time)\nglobal_covid19['country'] = np.concatenate(region)\nglobal_covid19['Lat'] = np.concatenate(latitude)\nglobal_covid19['Long'] = np.concatenate(longitude)\nglobal_covid19['deaths'] = np.concatenate(fat)\n\ncenter_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(global_covid19, lat='Lat', lon='Long', z=\"deaths\",\n                        center = center_point, hover_name='country', zoom = 5,\n                         range_color= [20, 20] , radius=20,\n                        mapbox_style= 'open-street-map', title='Total Deaths per million of Population in the World',\n                        animation_frame='date')\nfigx.update(layout_coloraxis_showscale=True)\nfigx.update_layout(autosize=False, width=1000, height=1000)\nfigx.show()\n\n#USA not included\n","7dec0bfd":"df_GlobalCases3 = df_GlobalCases2.iloc[:, 1:].astype(float)\ndf_GlobalCases3['Sum'] = df_GlobalCases3.sum(axis = 1, skipna = True)\ndf_GlobalCases3['Date'] = df_GlobalCases2['Date']\nfig = px.line(df_GlobalCases3, x='Date' , y='Sum', labels={\n                     \"Date\": \"Date\",\n                     \"Sum\": \"Daily Cases\"\n                 },title='Daily Global Cases')\nfig.update_xaxes(rangeslider_visible=True)\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","2a3c032b":"df_GlobalCases5 = df_GlobalCases2.iloc[:, 1:].astype(float)\ndf_GlobalCases5['Sum'] = df_GlobalCases5.sum(axis = 1, skipna = True)\ndf_GlobalCases5 = df_GlobalCases5.cumsum(axis = 0)\ndf_GlobalCases5['Date2'] = df_GlobalCases2['Date']\nfig2 = px.line(df_GlobalCases5, x='Date2', y = 'Sum', labels= {'Date2':'Date', 'Sum': 'Cases'}, title = 'Global Cases')\nfig2.update_xaxes(rangeslider_visible=True)\nfig2.update_xaxes(dtick='M1', tickformat=\"%b\\n%Y\", ticklabelmode='period')\nfig2.show()","b544cca3":"fig = go.Figure()\nfor step in df_GlobalCases2.columns.values[1:(len(df_GlobalCases2.columns)-1)]:\n    fig.add_trace(\n        go.Scatter(\n            name = 'Cases in ' + step,\n            x=df_GlobalCases2['Date'],\n            y=df_GlobalCases2[step].values))\n#fig.update_xaxes(rangeslider_visible=True)\nfig.update_layout(title = 'Daily Cases per Country')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()","03137bd9":"df_GlobalCases2\nworld2 = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ndf_GlobalCases10 = df_GlobalCases2.T\ndf_GlobalCases10.index.name = 'name'\ntestmerge = pd.merge(world2, df_GlobalCases10, on=['name'], how = 'left')\ntestmerge = testmerge.drop(columns=['continent', 'iso_a3', 'gdp_md_est', 'geometry'])\ntestmerge = testmerge.fillna(0)\ntestmerge.iloc[:,2:] = testmerge.iloc[:,2:].div(testmerge.pop_est, axis=0)\ntestmerge.iloc[:,2:] = (testmerge.iloc[:,2:].mul(1000000, axis=0)).astype(int)\ntestmerge = testmerge.sort_values(by = 'name', ascending =True)\ntestmerge = testmerge.T\ntestmerge.columns = testmerge.iloc[1]\ntestmerge = testmerge.drop('pop_est')\ntestmerge = testmerge.drop('name')\ndf_GlobalCases11= df_GlobalCases10.T\ntestmerge['Date'] = df_GlobalCases11['Date']\n\nfig = go.Figure()\nfor step in testmerge.columns.values[:-1]:\n    fig.add_trace(\n        go.Scatter(\n            name=\"Cases in \" + step,\n            x=testmerge['Date'],\n            y=testmerge[step].values))\n\nfig.update_layout(title_text=\"Daily Cases per million Countrywise\")\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\", ticklabelmode=\"period\")\nfig.show()","6290666b":"df_GlobalCases6 = df_GlobalCases2.T\ndf_GlobalCases6.drop(df_GlobalCases6.index[0], inplace=True)\ndf_GlobalCases6['Total Cases'] = df_GlobalCases6.sum(axis=1, skipna=True)\nindex=(len(df_GlobalCases6.columns) - 1)\ndf_GlobalCases6.drop(df_GlobalCases6.iloc[:, 0:index], axis=1, inplace=True)\ndf_GlobalCases6 = df_GlobalCases6.sort_values(by = 'Total Cases', ascending = False)\ndf_GlobalCases6 = df_GlobalCases6.drop(df_GlobalCases6.index[0])\ndf_GlobalCases6['Total Cases'] = df_GlobalCases6['Total Cases'].astype(int)\n\ndf_GlobalCases6.style.background_gradient('viridis')","fb66dc9f":"\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ndf_GlobalCases7 = df_GlobalCases6\ndf_GlobalCases7.index.name = 'name'\ntest5 = pd.merge(world,df_GlobalCases7,on=['name'],how='left')\ntest5['Total Cases'] = test5['Total Cases'].fillna(0)\ntest5['Cases per million'] = ((test5['Total Cases']\/test5['pop_est'])*1000000).astype(int)\ntest5 = test5.drop(columns=['pop_est', 'continent', 'iso_a3', 'gdp_md_est', 'geometry', 'Total Cases'])\ntest5 = test5.rename(columns={'name': 'Country'})\ntest5 = test5.sort_values(by = 'Cases per million', ascending = False)\ntest5 = test5.set_index('Country')\ntest5.style.background_gradient('viridis')","39ec3600":"df_GlobalCases8 = df_GlobalCases6\ndf_GlobalCases8.index.name = 'name'\ndf_GlobalCases8['Total Cases'].astype(float)\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ntestCases = pd.merge(world, df_GlobalCases8, on = ['name'], how = 'left')\ntestCases['Total Cases'] = testCases['Total Cases'].fillna(0)\ntestCases.plot(cmap='cividis_r', column='Total Cases', legend=True, figsize=(20,16), scheme='quantiles', k=5)\nplt.title('Global Covid19 Cases', fontsize=20)\nplt.show()","ffa9f480":"testcases2 = test5\ntestcases2.index.name= 'name'\ntestcases2['Cases per million'].astype(float)\nworldcases = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\ntestcases2b = pd.merge(worldcases, testcases2, on=['name'], how='left')\ntestcases2b['Cases per million'] = testcases2b['Cases per million'].fillna(0)\ntestcases2b.plot(cmap='cividis_r', column='Cases per million', legend=True, figsize=(20,15), scheme='quantiles', k=5)\nplt.title('Global Cases per million residents', fontsize=20)\nplt.show()","113f0060":"region = []\ntime = []\nlatitude = []\nlongitude = []\nfat = []\nfor u in list(df_GlobalCasesRaw.columns)[4:]:\n    time.append([u for i in range(df_GlobalCasesRaw.shape[0])])\n    region.append(list(df_GlobalCasesRaw['Country\/Region']))\n    latitude.append(list(df_GlobalCasesRaw.Lat))\n    longitude.append(list(df_GlobalCasesRaw.Long))\n    fat.append(list(df_GlobalCasesRaw[u]))\n    \nglobal_covid19 = pd.DataFrame()\nglobal_covid19['date'] = np.concatenate(time)\nglobal_covid19['country'] = np.concatenate(region)\nglobal_covid19['Lat'] = np.concatenate(latitude)\nglobal_covid19['Long'] = np.concatenate(longitude)\nglobal_covid19['Cases'] = np.concatenate(fat)\n\ncenter_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(global_covid19, lat='Lat', lon='Long', z=\"Cases\",\n                        center = center_point, hover_name='country', zoom = 5,\n                         range_color= [20, 20] , radius=20,\n                        mapbox_style= 'open-street-map', title='Total Cases per Country in the World',\n                        animation_frame='date')\nfigx.update(layout_coloraxis_showscale=True)\nfigx.update_layout(autosize=False, width=1000, height=1000)\nfigx.show()","38e4dc7d":"divisionResultsmean = divisionResults\ndivisionResultsmean['mean'] = divisionResultsmean.iloc[:, :-1].mean(numeric_only=True, axis=1)\nfig = px.line(divisionResultsmean.iloc[30:, :], x='Date' , y='mean', labels={\n                     \"Date\": \"Date\",\n                     \"Sum\": \"Daily Deaths\"\n                 },title='Daily Mean Lethality (%)')\n#fig.update_xaxes(rangeslider_visible=True)\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    ticklabelmode=\"period\")\nfig.show()\n","a703310f":"DDcountries = DD.T\nDDcountries = DDcountries.drop(['Date']) \nDDcountries['mean (%)'] = DDcountries.iloc[:, :].astype(float).mean(numeric_only=True, axis=1)\n\nindex = (len(DDcountries.columns) - 1)\nDDcountries.drop(DDcountries.iloc[:, 0:-1], inplace = True, axis = 1) \n\n\nDDcountries = DDcountries.sort_values(by = 'mean (%)', ascending = False)\nDDcountries.style.background_gradient('viridis')\n","ef4a1b4a":"# COVID-19 EXPLORATORY DATA ANALYSIS - JOHN HOPKINS UNIVERSITY DATA\n\n\n<b>CONTENTS:<\/b>\n   <li><b>1. Load Data\n   <li><b>2. Data Cleaning\n   <li><b>3. Deaths from Covid-19\n   <li><b>4. Confirmed Cases of Covid-19\n   <li><b>5. Lethality of Covid-19\n  \n\n","eb70b7fc":"## 4.5 Total Cases","f676fb02":"## 5.1 Global Lethality","a4682d2f":"## 3.6 Global Deaths per million of Population","7404ce20":"## 4.2 Total Global Cases","009a0f47":"## 4.4 Daily Cases per million of population","f31d2121":"## 3.8 Total Deaths per million of Population","4de387d0":"## 4.6 Confirmed Cases World Map","fff30b9a":"# 4. Confirmed Cases of Covid-19","aa0d243f":"# 2. Data Cleaning","78695ec9":" # 5. Lethality (Deaths per Cases) of Covid-19","59d3109e":"## 4.3 Daily Cases per Country","978b0fae":"# 1. Load Data","d65a7021":"## 3.4 Daily Deaths per Country","00c00931":"## 4.7 Confirmed Cases per Day ","dac3a2de":"## 3.7 Total Deaths World Map","6cc05f6f":"## 5.2 Mean Lethality per Country","81684546":"## 3.5 Daily Deaths per Million Countrywise","69d7e44a":"## 4.1 Daily Global Cases","cf8948fd":"## 3.3 Total Deaths per Country","b1d5721c":"## 3.5 Global Death Count","2461caf2":"# 3. Deaths from Covid-19","23ecbd00":"## 3.2 Total Global Deaths","b8eb7410":"## 3.1 Daily Global Deaths"}}