{"cell_type":{"e1a24579":"code","125a6573":"code","ace30f0b":"code","42a42441":"code","f69d599c":"code","34eff464":"code","715566d9":"code","da5db79e":"code","7ca1353d":"code","a1f700ec":"code","f64801f1":"code","4872789f":"code","d0ac53fa":"code","a0015994":"code","e4fccfb8":"code","b40141fa":"code","1c63c882":"code","035cdad6":"code","db6c3513":"code","993fa2cf":"code","889b49e4":"code","0aea01aa":"code","62007a32":"code","f80b3cc0":"code","f0bf6b00":"code","343c1681":"code","21a0b2f7":"code","6ee7098d":"code","89bec75a":"code","2b7481aa":"code","5610cdf6":"code","e8719734":"code","033d5c13":"code","53c145f8":"code","b1ce5914":"code","5d5d3c8c":"code","360e4076":"code","98621e52":"code","f15ab499":"code","9f06e8a8":"code","c590804c":"code","7c8745b3":"code","824afbba":"code","a66b4fd1":"code","51972b79":"code","02cfbbf8":"code","6f4f98c0":"code","903ce6ca":"code","4e9d5c4a":"code","30e2c305":"code","23dd6d88":"code","9d29bafc":"code","9fe60439":"markdown","03260f0f":"markdown","87c52dfb":"markdown","c03a55bc":"markdown","033f1462":"markdown","0826845d":"markdown","ca688886":"markdown","b1526c7a":"markdown","fae05562":"markdown","d6bb5a9c":"markdown","b08369ad":"markdown","8b038168":"markdown","86e3d05a":"markdown","f6b42b75":"markdown","21985919":"markdown","5946c053":"markdown","c1ef375f":"markdown"},"source":{"e1a24579":"# Load packages\nimport pandas as pd\nimport numpy as np\nimport pystan\nimport matplotlib.pyplot as plt\nimport random\n\n\n# Load wc qualifying data\ndf = pd.read_csv(\"..\/input\/womens_world_cup_data.csv\")\n\n# Load fifa rankings\ndat = pd.read_csv(\"..\/input\/womens_world_cup_rankings.csv\")\n\n\n\n## Formatting qualifying data\ndf['date'] = df['date'].str.replace('\u00ff', ' ')\ndf['date'] = pd.to_datetime(df['date'])\n\n# Filter to needed columns and rename\ndf = df.rename(columns={'Team_i'  : 'teami',\n                        'score_i' : 'scorei',\n                        'Team_j'  : 'teamj', \n                        'score_j' : 'scorej',\n                        'home_i'  : 'homei',\n                        'home_j'  : 'homej'})\n\n# Create margin\ndf['margin'] = df.scorei - df.scorej\n\n\n\n## Formatting ranking data\ndat[\"team\"] = dat[\"team\"].str.lower()\ndat = dat.loc[dat.team.isin(df.teami.append(df.teamj))]\n\n# Making fifa ranking mean 0 sd .5\ndat[\"ranking\"] = (dat.rating - dat.rating.mean())\/np.std(dat.rating)\/2\n# merge with df (need to add to final dataset)\n\n# List of womens world cup teams and rankings\nfifarnk = pd.DataFrame({\"team\" : [\"france\", \"norway\", \"south korea\", \"nigeria\", \"germany\", \"spain\", \"china\", \"south africa\", \"australia\", \"brazil\", \"italy\", \"jamaica\",\n                                  \"england\", \"japan\", \"scotland\", \"argentina\", \"canada\", \"netherlands\", \"new zealand\", \"cameroon\", \"united states\", \"sweden\", \"thailand\", \"chile\"],\n                         \"ranking\" : [3, 13, 14, 39, 2, 12, 15, 48, 6, 10, 16, 53, 4, 8, 20, 36, 5, 7, 19, 46, 1, 9, 29, 38] })\n\n\n\n\n## Set up team id mapping\nteam_key = pd.DataFrame({\"teamname\" : df.teami.append(df.teamj).unique(),\n                         \"teamid\"   : range(1, 1+len(df.teami.append(df.teamj).unique()))})\n\n# Recoding ids in qualifying data\ndf = df.merge(team_key, left_on=\"teami\" , right_on=\"teamname\")\ndf = df.drop(columns=[\"teamname\", \"teami\"])\ndf = df.rename(index = str, columns = {\"teamid\" : \"teami\"})\n\ndf = df.merge(team_key, left_on=\"teamj\" , right_on=\"teamname\")\ndf = df.drop(columns=[\"teamname\", \"teamj\"])\ndf = df.rename(index = str, columns = {\"teamid\" : \"teamj\"})\n\n# Recoding ids in ranking data\ndat = dat.merge(team_key, left_on=\"team\" , right_on=\"teamname\")\ndat = dat.drop(columns=[\"teamname\"])\n\n\n\n# Final dataset for modeling\nnames = [\"N\", \"y\", \"h_i\", \"h_j\", \"team_i\", \"team_j\", \"N_g\"]\nvalues = [len(df.index), df.margin, df.homei, df.homej, df.teami, df.teamj, 79]\n\ntrain = dict(zip(names, values))","125a6573":"\nmodel = \"\"\"\ndata {\n    int N;\n    vector[N] y;\n    int team_i[N];\n    int team_j[N];\n    int h_i[N];\n    int h_j[N];\n    int N_g;\n}\nparameters {\n    vector[N_g] alpha_raw;\n    vector[N_g] theta_raw;\n    real eta;\n    real<lower=0> tau_theta;\n    real<lower=0> tau_alpha;\n    real<lower=0> sigma;\n}\ntransformed parameters {\n    vector[N_g] alpha;\n    vector[N_g] theta;\n    alpha = eta + alpha_raw*tau_alpha;\n    theta = theta_raw*tau_theta;\n}\nmodel {\n    \/\/ vector for conditional mean storage\n    vector[N] mu;\n\n    \/\/ priors\n    tau_theta ~ cauchy(0,1)T[0,];\n    tau_alpha ~ cauchy(0,.25)T[0,];\n    sigma ~ cauchy(0,1)T[0,];\n    eta ~ normal(.5,.25);\n    theta_raw ~ normal(0,1);\n    alpha_raw ~ normal(0,1);\n\n    \/\/ define mu for the Gaussian\n    for( t in 1:N ) {\n    mu[t] = (theta[team_i[t]] + alpha[team_i[t]]*h_i[t]) - \n    (theta[team_j[t]] + alpha[team_j[t]]*h_j[t]);\n}\n\n    \/\/ the likelihood\n    y ~ normal(mu,sigma);\n}\n\"\"\"\n\nsm = pystan.StanModel(model_code = model)\nfit = sm.sampling(data = train, \n                  iter = 1500, \n                  warmup = 750,\n                  refresh = 100,\n                  control = dict(adapt_delta = 0.9))","ace30f0b":"# Extracting team skill levels\nth = pd.DataFrame(fit.extract()[\"theta\"])\na = pd.DataFrame(fit.extract()[\"alpha\"])\nsig = fit.extract()[\"sigma\"]\na.columns = team_key.teamname\nth.columns = team_key.teamname\n\n# Filtering to top 25 teams\ntheta25 = th[th.median().nlargest(25).index]\ntheta25 = theta25[theta25.columns[::-1]]\n\n# Creating the plot\ntheta25.boxplot(grid = False, vert = False, showfliers = False, figsize=(12, 8))\nplt.title('Team Power Rankings')\nplt.xlabel('Skill Level')\nplt.ylabel('Teams')","42a42441":"def compare(i, j, homei = 0, homej = 0, th= th, a = a, sig = sig, reps = 1000, allowdraw = False):\n    if allowdraw:\n        win_prob = []\n        draw_prob = []\n        \n        # Simulating specified number of games\n        for r in range(1, reps):\n            win_prob.append(\n                np.mean(\n                    \n                    # Ability difference\n                    th[i].sample(1).values - th[j].sample(1).values + \n                    \n                    # Home field advantage\n                    a[i].sample(1).values*homei - a[j].sample(1).values*homej\n                    ) > 0\n                )\n         \n        # Averaging game results\n        win_prob = np.mean(win_prob)\n        \n        # Displaying results\n        print(i + \" has a \" + str(round(win_prob*100, 2)) + \"% chance of beating \" + j)\n    \n    else:\n        win_prob = []\n        \n        # Simulating specified number of games\n        for r in range(1, reps):\n            win_prob.append(\n                np.mean(\n                    \n                    # Ability difference\n                    th[i].sample(1).values - th[j].sample(1).values + \n                    \n                    # Home field advantage\n                    a[i].sample(1).values*homei - a[j].sample(1).values*homej\n                    ) > 0\n                )\n         \n        # Averaging game results\n        win_prob = np.mean(win_prob)\n        \n        # Displaying results\n        print(i + \" has a \" + str(round(win_prob*100, 2)) + \"% chance of beating \" + j)\n    \n    \ndef short_compare(i, j, homei, homej, th= th, a = a, sig = sig, allowdraw = True):\n    \n    gamescore = th[i].sample(1).values - th[j].sample(1).values + a[i].sample(1).values*homei - a[j].sample(1).values*homej\n    \n    if(allowdraw):\n        if(abs(gamescore) < 1):\n            return([1, 1])\n        if(gamescore > 0):\n            return([3, 0])        \n        else:\n            return([0, 3])\n    \n    else:\n        if(gamescore > 0):\n            return([3, 0])\n        else:\n            return([0, 3])\n\ndef group_sim_short(i, j, k, l, homei, homej, homek, homel, th= th, a = a, sig = sig):\n\n    # Initial values\n    score_i, score_j, score_k, score_l = 0, 0, 0, 0\n    \n    # Round robin games\n    score_i, score_j = [score_i, score_j] + np.array(short_compare(i, j, homei, homej))\n    score_i, score_k = [score_i, score_k] + np.array(short_compare(i, k, homei, homek))\n    score_i, score_l = [score_i, score_l] + np.array(short_compare(i, l, homei, homel))\n    score_j, score_k = [score_j, score_k] + np.array(short_compare(j, k, homej, homek))\n    score_j, score_l = [score_j, score_l] + np.array(short_compare(j, l, homej, homel))\n    score_k, score_l = [score_k, score_l] + np.array(short_compare(k, l, homek, homel))\n    \n    # Determining winners\n    d = {'teams': [i, j, k, l], 'points': [score_i, score_j, score_k, score_l]}\n    df = pd.DataFrame(data=d)\n    df.sort_values(by=[\"points\"], inplace=True, ascending=False)\n    df.index = np.arange(1, len(df) + 1)\n    df[\"ranking\"] = df.index    \n    \n    return(df)\n\ndef group_sim(i, j, k, l, homei, homej, homek, homel, th= th, a = a, sig = sig, reps = 1000):\n\n    df = pd.DataFrame()\n    \n    for r in range(1, reps):\n        \n        # Simulate games\n        df_temp = group_sim_short(i, j, k, l, homei, homej, homek, homel)\n        df = df.append(df_temp)\n        \n    # Average points in season\n    dat = pd.DataFrame(df.groupby(\"teams\").points.mean()).reset_index()\n    \n    # Count of Rankings\n    df[\"first\"] = (df.ranking == 1)\n    df[\"second\"] = (df.ranking == 2)\n    df[\"third\"] = (df.ranking == 3)\n    df[\"fourth\"] = (df.ranking == 4)\n    \n    # Percents\n    dat = dat.merge(pd.DataFrame(df.groupby('teams')[\"first\"].sum()\/reps*100).reset_index(), on=\"teams\")\n    dat = dat.merge(pd.DataFrame(df.groupby('teams')[\"second\"].sum()\/reps*100).reset_index(), on=\"teams\")\n    dat = dat.merge(pd.DataFrame(df.groupby('teams')[\"third\"].sum()\/reps*100).reset_index(), on=\"teams\")\n    dat = dat.merge(pd.DataFrame(df.groupby('teams')[\"fourth\"].sum()\/reps*100).reset_index(), on=\"teams\")\n    \n    # Sort by points\n    dat = dat.sort_values(by=[\"points\"], ascending=False)\n    dat.index = np.arange(1, len(dat)+1)\n\n    return(dat)\n\ndef choose_matchup(inputs):\n    \n    inputs1 = inputs.group.sort_values().tolist()\n    \n    if inputs1 == [\"A\", \"B\", \"C\", \"D\"]:\n        output = [inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"B\", \"C\", \"E\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"B\", \"C\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"B\", \"D\", \"E\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"B\", \"D\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"B\", \"E\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"C\", \"D\", \"E\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"C\", \"D\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"C\", \"E\", \"F\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"A\", \"D\", \"E\", \"F\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0], inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"A\"][\"team\"].values[0]]\n    elif inputs1 == [\"B\", \"C\", \"D\", \"E\"]:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    elif inputs1 == [\"B\", \"C\", \"D\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    elif inputs1 == [\"B\", \"C\", \"E\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0]]\n    elif inputs1 == [\"B\", \"D\", \"E\", \"F\"]:\n        output = [inputs[inputs.group == \"F\"][\"team\"].values[0], inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"B\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0]]\n    else:\n        output = [inputs[inputs.group == \"E\"][\"team\"].values[0], inputs[inputs.group == \"C\"][\"team\"].values[0], inputs[inputs.group == \"D\"][\"team\"].values[0], inputs[inputs.group == \"F\"][\"team\"].values[0]]\n    \n    return(output)","f69d599c":"def tourn_sim(group, fifarnk = fifarnk, th= th, a = a, sig = sig, reps = 1000):\n    # setting up final results\n    results = pd.DataFrame({\"team\" : fifarnk.team, \n                            \"grp4\" : [0]*24, \n                            \"grp3\" : [0]*24, \n                            \"rd16\" : [0]*24, \n                            \"quarters\" : [0]*24, \n                            \"semis\" : [0]*24, \n                            \"fourth\" : [0]*24, \n                            \"third\" : [0]*24, \n                            \"second\" : [0]*24, \n                            \"first\" : [0]*24})\n    \n    for reps in range(0, reps):\n                \n        # Setting up group results\n        grp = pd.DataFrame({\"ranking\" : [1,2,3,4]})\n            \n            \n        # Simulate groups\n        for ind in range(0, len(group.index)):\n            grp_temp = group_sim_short(group.team1[ind],   group.team2[ind],   group.team3[ind],   group.team4[ind], \n                                       group.team1_h[ind], group.team2_h[ind], group.team3_h[ind], group.team4_h[ind])\n            \n            grp = grp.merge(grp_temp, on = \"ranking\", suffixes = [\"\", group.group[ind]])\n        grp = pd.DataFrame(grp)\n        \n            \n        # Recording 4th place teams\n        done_teams = [grp.teams[3], grp.teamsB[3], grp.teamsC[3], grp.teamsD[3], grp.teamsE[3], grp.teamsF[3]]\n        results.loc[results.team.isin(done_teams), \"grp4\"] += 1\n        \n        \n        # Determing 3rd place advancers\n        tie = grp[grp.ranking == 3]\n        tie = pd.DataFrame({\"team\"   : [tie.teams[2], tie.teamsB[2], tie.teamsC[2], tie.teamsD[2], tie.teamsE[2], tie.teamsF[2]],\n                            \"group\"  : [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n                            \"points\" : [tie.points[2], tie.pointsB[2], tie.pointsC[2], tie.pointsD[2], tie.pointsE[2], tie.pointsF[2]],\n                            \"fifa\"   : [-fifarnk[fifarnk.team.isin(tie.teams)].ranking.values[0],\n                                        -fifarnk[fifarnk.team.isin(tie.teamsB)].ranking.values[0],\n                                        -fifarnk[fifarnk.team.isin(tie.teamsC)].ranking.values[0],\n                                        -fifarnk[fifarnk.team.isin(tie.teamsD)].ranking.values[0],\n                                        -fifarnk[fifarnk.team.isin(tie.teamsE)].ranking.values[0],\n                                        -fifarnk[fifarnk.team.isin(tie.teamsF)].ranking.values[0]]})\n    \n        # Selecting 3rd place teams \n        tie = tie.sort_values(by=[\"points\", \"fifa\"], ascending=False)\n        tie.index = range(1,7)\n        \n        # Recording 3rd place, non-advancing teams\n        done_teams = [tie.team[5], tie.team[6]]\n        results.loc[results.team.isin(done_teams), \"grp3\"] += 1\n        \n        # Determining matchups of advanceing, 3rd place teams\n        thirdplace = tie.iloc[0:4][[\"team\", \"group\"]]\n        thirdplace = choose_matchup(inputs=thirdplace)\n    \n        # Setting up round of 16\n        rd16 = pd.DataFrame({\"team1\" : [grp.teams[1],  grp.teamsD[0], grp.teams[0], grp.teamsB[1], grp.teamsC[0], grp.teamsE[0], grp.teamsB[0], grp.teamsF[1]],\n                             \"team2\" : [grp.teamsC[1], thirdplace[0], thirdplace[1], grp.teamsF[0], thirdplace[2], grp.teamsD[1], thirdplace[3], grp.teamsE[1]]})\n        \n        # Recording those who made rd of 16\n        results.loc[results.team.isin(rd16.team1.append(rd16.team2)), \"rd16\"] += 1\n        \n        # Preparing round 16 playing\n        winners = []\n        losers = []\n        \n        # Playing rd 16\n        for ind in range(0, 8):\n            i  = rd16.team1[ind]\n            j  = rd16.team2[ind]\n            homei = (i==\"france\")\n            homej = (j==\"france\")\n            team1, team2 = short_compare(i, j, homei, homej, th= th, a = a, sig = sig, allowdraw = False)\n            if (team1 == 3):\n                winners.append(i)\n            elif (team2 == 3):    \n                winners.append(j)\n        \n        # Recording those who made quarters\n        results.loc[results.team.isin(winners), \"quarters\"] += 1\n        \n        \n        # Setting up quarters\n        quarters = pd.DataFrame({\"team1\" : [winners[0], winners[2], winners[4], winners[6]],\n                                 \"team2\" : [winners[1], winners[3], winners[5], winners[7]]})\n        \n        # Preparing quarters playing\n        winners = []\n        \n        # Playing quarters\n        for ind in range(0, 4):\n            i  = quarters.team1[ind]\n            j  = quarters.team2[ind]\n            homei = (i==\"france\")\n            homej = (j==\"france\")\n            team1, team2 = short_compare(i, j, homei, homej, th= th, a = a, sig = sig, allowdraw = False)\n            if (team1 == 3):\n                winners.append(i)\n            elif (team2 == 3):    \n                winners.append(j)\n        \n        # Recording those who made semis\n        results.loc[results.team.isin(winners), \"semis\"] += 1\n    \n        # Setting up semis\n        semis = pd.DataFrame({\"team1\" : [winners[0], winners[2]],\n                              \"team2\" : [winners[1], winners[3]]})\n        \n        # Preparing semis playing\n        winners = []\n        losers = []\n        \n        # Playing semis\n        for ind in range(0, 2):\n            i  = semis.team1[ind]\n            j  = semis.team2[ind]\n            homei = (i==\"france\")\n            homej = (j==\"france\")\n            team1, team2 = short_compare(i, j, homei, homej, th= th, a = a, sig = sig, allowdraw = False)\n            if (team1 == 3):\n                winners.append(i)\n                losers.append(j)\n            elif (team2 == 3):    \n                winners.append(j)\n                losers.append(i)\n        \n        # Setting up finals\n        finals = pd.DataFrame({\"team1\" : [winners[0], losers[0]],\n                               \"team2\" : [winners[1], losers[1]]})\n        \n        # Preparing finals playing\n        winners = []\n        losers = []\n        \n        # Playing finals\n        for ind in range(0, 2):\n            i  = finals.team1[ind]\n            j  = finals.team2[ind]\n            homei = (i==\"france\")\n            homej = (j==\"france\")\n            team1, team2 = short_compare(i, j, homei, homej, th= th, a = a, sig = sig, allowdraw = False)\n            if (team1 == 3):\n                winners.append(i)\n                losers.append(j)\n            elif (team2 == 3):    \n                winners.append(j)\n                losers.append(i)\n                \n        # Recording finals results\n        results.loc[results.team == winners[0], \"first\"] += 1\n        results.loc[results.team == losers[0], \"second\"] += 1\n        results.loc[results.team == winners[1], \"third\"] += 1\n        results.loc[results.team == losers[1], \"fourth\"] += 1\n    \n    results[results.select_dtypes(include=['number']).columns] \/= (reps+1)\n    results[results.select_dtypes(include=['number']).columns] *= 100\n    \n    results.index = [\"A\"]*4 + [\"B\"]*4 + [\"C\"]*4 + [\"D\"]*4 + [\"E\"]*4 + [\"F\"]*4\n    results = results.sort_values(by=[\"first\", \"second\", \"third\", \"fourth\", \"semis\", \"quarters\", \"rd16\"], ascending=False)\n    \n    results = results.round(2)\n    \n    return(results)","34eff464":"groupA = group_sim(\"france\", \"norway\", \"south korea\", \"nigeria\", homei=1, homej=0, homek=0, homel=0)\ngroupA","715566d9":"groupB = group_sim(\"germany\", \"spain\", \"china\", \"south africa\", homei=0, homej=0, homek=0, homel=0)\ngroupB","da5db79e":"groupC = group_sim(\"australia\", \"brazil\", \"italy\", \"jamaica\", homei=0, homej=0, homek=0, homel=0)\ngroupC","7ca1353d":"groupD = group_sim(\"england\", \"japan\", \"scotland\", \"argentina\", homei=0, homej=0, homek=0, homel=0)\ngroupD","a1f700ec":"groupE = group_sim(\"canada\", \"netherlands\", \"new zealand\", \"cameroon\", homei=0, homej=0, homek=0, homel=0)\ngroupE","f64801f1":"groupF = group_sim(\"united states\", \"sweden\", \"thailand\", \"chile\", homei=0, homej=0, homek=0, homel=0)\ngroupF","4872789f":"# Group input\ngroup = pd.DataFrame({'group': [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], \n                      'team1': [\"france\", \"germany\", \"australia\", \"england\", \"canada\", \"united states\"],\n                      'team2': [\"norway\", \"spain\", \"brazil\", \"japan\", \"netherlands\", \"sweden\"],\n                      'team3': [\"south korea\", \"china\", \"italy\", \"scotland\", \"new zealand\", \"thailand\"],\n                      'team4': [\"nigeria\", \"south africa\", \"jamaica\", \"argentina\", \"cameroon\", \"chile\"],\n                      'team1_h' : [1, 0, 0, 0, 0, 0],\n                      'team2_h' : [0, 0, 0, 0, 0, 0],\n                      'team3_h' : [0, 0, 0, 0, 0, 0],\n                      'team4_h' : [0, 0, 0, 0, 0, 0],\n                      'team1_r' : [3, 2, 6, 4, 5, 1],\n                      'team2_r' : [13, 12, 10, 8, 7, 9],\n                      'team3_r' : [14, 15, 16, 20, 19, 29],\n                      'team4_r' : [39, 48, 53, 36, 46, 38]\n                    })\n\n# Simulating tournament\ntourn_results = tourn_sim(group)\ntourn_results[\"finals\"] = tourn_results[\"first\"] + tourn_results[\"second\"]\ntourn_results","d0ac53fa":"nikki = pd.DataFrame({\"team\"          : [\"norway\", \"france\", \"nigeria\", \"south korea\", \"spain\", \"germany\", \"south africa\", \"china\", \"brazil\", \"italy\", \"australia\", \"jamaica\", \"england\", \"argentina\", \"scotland\", \"japan\", \"netherlands\", \"cameroon\", \"canada\", \"new zealand\", \"united states\", \"sweden\", \"chile\", \"thailand\"],\n                      \"group_place\"   : [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],\n                      \"advance\"       : [True, True, False, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, False, False, True, True, True, False],\n                      \"make_quarters\" : [True, True, False, False, True, False, False, False, True, False, False, False, True, True, False, False, False, False, False, False, True, True, False, False],\n                      \"make_semis\"    : [False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False],\n                      \"make_finals\"   : [False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False],\n                      \"win_it\"        : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False],\n                      \"third\"         : [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]})\n\nnikki.index = [\"A\"]*4 + [\"B\"]*4 + [\"C\"]*4 + [\"D\"]*4 + [\"E\"]*4 + [\"F\"]*4\n\n\n\nnikki[\"odds_of_place\"] = [float(groupA.loc[groupA.teams == \"norway\",        \"first\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"france\",        \"second\"])\/100,\n                          float(groupA.loc[groupA.teams == \"nigeria\",       \"third\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"south korea\",   \"fourth\"])\/100,\n                          float(groupB.loc[groupB.teams == \"spain\",         \"first\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"germany\",       \"second\"])\/100,\n                          float(groupB.loc[groupB.teams == \"south africa\",  \"third\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"china\",         \"fourth\"])\/100,\n                          float(groupC.loc[groupC.teams == \"brazil\",        \"first\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"italy\",         \"second\"])\/100,\n                          float(groupC.loc[groupC.teams == \"australia\",     \"third\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"jamaica\",       \"fourth\"])\/100,\n                          float(groupD.loc[groupD.teams == \"england\",       \"first\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"argentina\",     \"second\"])\/100,\n                          float(groupD.loc[groupD.teams == \"scotland\",      \"third\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"japan\",         \"fourth\"])\/100,\n                          float(groupE.loc[groupE.teams == \"netherlands\",   \"first\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"cameroon\",      \"second\"])\/100,\n                          float(groupE.loc[groupE.teams == \"canada\",        \"third\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"new zealand\",   \"fourth\"])\/100,\n                          float(groupF.loc[groupF.teams == \"united states\", \"first\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"sweden\",        \"second\"])\/100,\n                          float(groupF.loc[groupF.teams == \"chile\",         \"third\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"thailand\",      \"fourth\"])\/100]","a0015994":"# Perfect Group Prediction\ngroup_perfect = pd.DataFrame(nikki[\"odds_of_place\"].groupby(level=0).prod()*100).rename({\"odds_of_place\" : \"chance of perfect group\"}, axis='columns')\nn_perf_group = 3*group_perfect[\"chance of perfect group\"].sum()\/100\nprint(\"Expected perfect group points: \" + str(n_perf_group))\ngroup_perfect","e4fccfb8":"# Predict First Place\ngroup_first = pd.DataFrame(nikki[nikki.group_place == 1][\"odds_of_place\"]).rename({\"odds_of_place\" : \"chance of first\"}, axis='columns')\nn_first_place = 2*group_first[\"chance of first\"].sum()\nprint(\"Expected first place points: \" + str(n_first_place))\ngroup_first*100","b40141fa":"# Odds of Advancing\nadvance_group = tourn_results[tourn_results.team.isin(nikki[nikki.advance == True].team)][[\"team\", \"rd16\"]]\nn_advance_group = advance_group.rd16.sum()\/100\nprint(\"Expected points from picking advancing team: \" + str(n_advance_group))\nadvance_group","1c63c882":"# Odds of Quarters\nquarters_odds = tourn_results[tourn_results.team.isin(nikki[nikki.make_quarters == True].team)][[\"team\", \"quarters\"]]\nn_quarters = 2*quarters_odds.quarters.sum()\/100\nprint(\"Expected points from picking quarters team: \" + str(n_quarters))\nquarters_odds","035cdad6":"# Odds of Semis\nsemis_odds = tourn_results[tourn_results.team.isin(nikki[nikki.make_semis == True].team)][[\"team\", \"semis\"]]\nn_semis = 4*semis_odds.semis.sum()\/100\nprint(\"Expected points from picking semis team: \" + str(n_semis))\nsemis_odds","db6c3513":"# Odds of Finals\nfinals_odds = tourn_results[tourn_results.team.isin(nikki[nikki.make_finals == True].team)][[\"team\", \"finals\"]]\nn_finals = 8*finals_odds.finals.sum()\/100\nprint(\"Expected points from picking finals team: \" + str(n_finals))\nfinals_odds","993fa2cf":"# Odds of Third\nthird_odds = tourn_results[tourn_results.team.isin(nikki[nikki.third == True].team)][[\"team\", \"third\"]]\nn_thirds = 8*third_odds.third.sum()\/100\nprint(\"Expected points from picking third place team: \" + str(n_thirds))\nthird_odds","889b49e4":"# Odds of Winning\nwinner_odds = tourn_results[tourn_results.team.isin(nikki[nikki.win_it == True].team)][[\"team\", \"first\"]]\nn_winners_odds = 16*float(winner_odds[\"first\"])\/100\nprint(\"Expected points from picking winner: \" + str(n_winners_odds))\nwinner_odds","0aea01aa":"jerry = pd.DataFrame({\"team\"          : [\"france\", \"south korea\", \"nigeria\", \"norway\", \"germany\", \"spain\", \"china\", \"south africa\", \"brazil\", \"italy\", \"jamaica\", \"australia\", \"japan\", \"england\", \"scotland\", \"argentina\", \"netherlands\", \"canada\", \"new zealand\", \"cameroon\", \"united states\", \"sweden\", \"chile\", \"thailand\"],\n                      \"group_place\"   : [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],\n                      \"advance\"       : [True, True, True, False, True, True, True, False, True, True, True, False, True, True, False, False, True, True, True, False, True, True, False, False],\n                      \"make_quarters\" : [True, True, False, False, True, False, False, False, True, False, False, False, True, True, False, False, False, False, False, False, True, True, False, False],\n                      \"make_semis\"    : [False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, True, False, False],\n                      \"make_finals\"   : [False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False],\n                      \"win_it\"        : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False],\n                      \"third\"         : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False]})\n\njerry.index = [\"A\"]*4 + [\"B\"]*4 + [\"C\"]*4 + [\"D\"]*4 + [\"E\"]*4 + [\"F\"]*4\n\njerry[\"odds_of_place\"] = [float(groupA.loc[groupA.teams == \"france\",        \"first\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"south korea\",   \"second\"])\/100,\n                          float(groupA.loc[groupA.teams == \"nigeria\",       \"third\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"norway\",        \"fourth\"])\/100,\n                          float(groupB.loc[groupB.teams == \"germany\",       \"first\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"spain\",         \"second\"])\/100,\n                          float(groupB.loc[groupB.teams == \"china\",         \"third\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"south africa\",  \"fourth\"])\/100,\n                          float(groupC.loc[groupC.teams == \"brazil\",        \"first\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"italy\",         \"second\"])\/100,\n                          float(groupC.loc[groupC.teams == \"jamaica\",       \"third\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"australia\",     \"fourth\"])\/100,\n                          float(groupD.loc[groupD.teams == \"japan\",         \"first\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"england\",       \"second\"])\/100,\n                          float(groupD.loc[groupD.teams == \"scotland\",      \"third\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"argentina\",     \"fourth\"])\/100,\n                          float(groupE.loc[groupE.teams == \"netherlands\",   \"first\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"canada\",        \"second\"])\/100,\n                          float(groupE.loc[groupE.teams == \"new zealand\",   \"third\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"cameroon\",      \"fourth\"])\/100,\n                          float(groupF.loc[groupF.teams == \"united states\", \"first\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"sweden\",        \"second\"])\/100,\n                          float(groupF.loc[groupF.teams == \"chile\",         \"third\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"thailand\",      \"fourth\"])\/100]","62007a32":"# Perfect Group Prediction\ngroup_perfect = pd.DataFrame(jerry[\"odds_of_place\"].groupby(level=0).prod()*100).rename({\"odds_of_place\" : \"chance of perfect group\"}, axis='columns')\nja_group_perfect = 3*group_perfect[\"chance of perfect group\"].sum()\/100\nprint(\"Expected perfect group points: \" + str(ja_group_perfect))\ngroup_perfect","f80b3cc0":"# Predict First Place\ngroup_first = pd.DataFrame(jerry[jerry.group_place == 1][\"odds_of_place\"]).rename({\"odds_of_place\" : \"chance of first\"}, axis='columns')\nja_first = 2*group_first[\"chance of first\"].sum()\nprint(\"Expected first place points: \" + str(ja_first))\ngroup_first*100","f0bf6b00":"# Odds of Advancing\nadvance_group = tourn_results[tourn_results.team.isin(jerry[jerry.advance == True].team)][[\"team\", \"rd16\"]]\nja_advance_16 = advance_group.rd16.sum()\/100\nprint(\"Expected points from picking advancing team: \" + str(ja_advance_16))\nadvance_group","343c1681":"# Odds of Quarters\nquarters_odds = tourn_results[tourn_results.team.isin(jerry[jerry.make_quarters == True].team)][[\"team\", \"quarters\"]]\nja_quarters = 2*quarters_odds.quarters.sum()\/100\nprint(\"Expected points from picking quarters team: \" + str(ja_quarters))\nquarters_odds","21a0b2f7":"# Odds of Semis\nsemis_odds = tourn_results[tourn_results.team.isin(jerry[jerry.make_semis == True].team)][[\"team\", \"semis\"]]\nja_semis = 4*semis_odds.semis.sum()\/100\nprint(\"Expected points from picking semis team: \" + str(ja_semis))\nsemis_odds","6ee7098d":"# Odds of Finals\nfinals_odds = tourn_results[tourn_results.team.isin(jerry[jerry.make_finals == True].team)][[\"team\", \"finals\"]]\nja_finals = 8*finals_odds.finals.sum()\/100\nprint(\"Expected points from picking finals team: \" + str(ja_finals))\nfinals_odds","89bec75a":"# Odds of Third\nthird_odds = tourn_results[tourn_results.team.isin(jerry[jerry.third == True].team)][[\"team\", \"third\"]]\nja_thirds = 8*third_odds.third.sum()\/100\nprint(\"Expected points from picking third place team: \" + str(ja_thirds))\nthird_odds","2b7481aa":"# Odds of Winning\nwinner_odds = tourn_results[tourn_results.team.isin(jerry[jerry.win_it == True].team)][[\"team\", \"first\"]]\nja_champs = 16*float(winner_odds[\"first\"])\/100\nprint(\"Expected points from picking winner: \" + str())\nwinner_odds","5610cdf6":"jerrod = pd.DataFrame({\"team\"          : [\"france\", \"norway\", \"nigeria\", \"south korea\", \"germany\", \"spain\", \"south africa\", \"china\", \"brazil\", \"italy\", \"jamaica\", \"australia\", \"argentina\", \"scotland\", \"japan\", \"england\", \"netherlands\", \"new zealand\", \"cameroon\", \"canada\", \"chile\", \"united states\", \"sweden\", \"thailand\"],\n                      \"group_place\"   : [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],\n                      \"advance\"       : [True, True, True, False, True, True, True, False, True, True, False, False,True, True, True, False, True, True, False, False, True, True, True, False],\n                      \"make_quarters\" : [False, False, False, False, True, True, False, False,True, True, False, False, True, False, True, False, True, False, False, False, False, True, False, False],\n                      \"make_semis\"    : [False, False, False, False, False, False, False, False,True, False, False, False, True, False, True, False, False, False, False, False, False, True, False, False],\n                      \"make_finals\"   : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, True, False, False],\n                      \"win_it\"        : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False],\n                      \"third\"         : [False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False]})\n\njerrod.index = [\"A\"]*4 + [\"B\"]*4 + [\"C\"]*4 + [\"D\"]*4 + [\"E\"]*4 + [\"F\"]*4\n\njerrod[\"odds_of_place\"] = [float(groupA.loc[groupA.teams == \"france\",       \"first\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"norway\",        \"second\"])\/100,\n                          float(groupA.loc[groupA.teams == \"nigeria\",       \"third\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"south korea\",   \"fourth\"])\/100,\n                          float(groupB.loc[groupB.teams == \"germany\",       \"first\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"spain\",         \"second\"])\/100,\n                          float(groupB.loc[groupB.teams == \"south africa\",  \"third\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"china\",         \"fourth\"])\/100,\n                          float(groupC.loc[groupC.teams == \"brazil\",        \"first\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"italy\",         \"second\"])\/100,\n                          float(groupC.loc[groupC.teams == \"jamaica\",       \"third\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"australia\",     \"fourth\"])\/100,\n                          float(groupD.loc[groupD.teams == \"argentina\",     \"first\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"scotland\",      \"second\"])\/100,\n                          float(groupD.loc[groupD.teams == \"japan\",         \"third\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"england\",       \"fourth\"])\/100,\n                          float(groupE.loc[groupE.teams == \"netherlands\",   \"first\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"new zealand\",   \"second\"])\/100,\n                          float(groupE.loc[groupE.teams == \"cameroon\",      \"third\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"canada\",        \"fourth\"])\/100,\n                          float(groupF.loc[groupF.teams == \"chile\",         \"first\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"united states\", \"second\"])\/100,\n                          float(groupF.loc[groupF.teams == \"sweden\",        \"third\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"thailand\",      \"fourth\"])\/100]","e8719734":"# Perfect Group Prediction\ngroup_perfect = pd.DataFrame(jerrod[\"odds_of_place\"].groupby(level=0).prod()*100).rename({\"odds_of_place\" : \"chance of perfect group\"}, axis='columns')\njc_group_perf = 3*group_perfect[\"chance of perfect group\"].sum()\/100\nprint(\"Expected perfect group points: \" + str(jc_group_perf))\ngroup_perfect","033d5c13":"# Predict First Place\ngroup_first = pd.DataFrame(jerrod[jerrod.group_place == 1][\"odds_of_place\"]).rename({\"odds_of_place\" : \"chance of first\"}, axis='columns')\njc_first = 2*group_first[\"chance of first\"].sum()\nprint(\"Expected first place points: \" + str(jc_first))\ngroup_first*100","53c145f8":"# Odds of Advancing\nadvance_group = tourn_results[tourn_results.team.isin(jerrod[jerrod.advance == True].team)][[\"team\", \"rd16\"]]\njc_advance_16 = advance_group.rd16.sum()\/100\nprint(\"Expected points from picking advancing team: \" + str(jc_advance_16))\nadvance_group","b1ce5914":"# Odds of Quarters\nquarters_odds = tourn_results[tourn_results.team.isin(jerrod[jerrod.make_quarters == True].team)][[\"team\", \"quarters\"]]\njc_quarters = 2*quarters_odds.quarters.sum()\/100\nprint(\"Expected points from picking quarters team: \" + str(jc_quarters))\nquarters_odds","5d5d3c8c":"# Odds of Semis\nsemis_odds = tourn_results[tourn_results.team.isin(jerrod[jerrod.make_semis == True].team)][[\"team\", \"semis\"]]\njc_semis = 4*semis_odds.semis.sum()\/100\nprint(\"Expected points from picking semis team: \" + str(jc_semis))\nsemis_odds","360e4076":"# Odds of Finals\nfinals_odds = tourn_results[tourn_results.team.isin(jerrod[jerrod.make_finals == True].team)][[\"team\", \"finals\"]]\njc_finals = 8*finals_odds.finals.sum()\/100\nprint(\"Expected points from picking finals team: \" + str(jc_finals))\nfinals_odds","98621e52":"# Odds of Third\nthird_odds = tourn_results[tourn_results.team.isin(jerrod[jerrod.third == True].team)][[\"team\", \"third\"]]\njc_third = 8*third_odds.third.sum()\/100\nprint(\"Expected points from picking third place team: \" + str(jc_third))\nthird_odds","f15ab499":"# Odds of Winning\nwinner_odds = tourn_results[tourn_results.team.isin(jerrod[jerrod.win_it == True].team)][[\"team\", \"first\"]]\njc_champs = 16*float(winner_odds[\"first\"])\/100\nprint(\"Expected points from picking winner: \" + str(jc_champs))\nwinner_odds","9f06e8a8":"alex = pd.DataFrame({\"team\"          : [\"france\", \"norway\", \"south korea\", \"nigeria\", \n                                        \"germany\", \"spain\", \"china\", \"south africa\", \n                                        \"australia\", \"brazil\", \"italy\", \"jamaica\", \n                                        \"england\", \"japan\", \"scotland\", \"argentina\", \n                                        \"canada\", \"netherlands\", \"new zealand\", \"cameroon\", \n                                        \"united states\", \"sweden\", \"chile\", \"thailand\"],\n                      \"group_place\"   : [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],\n                      \"advance\"       : [True, True, True, False,True, True, True, False,True, True, True, False,True, True, False, False,True, True, True, False,True, True, False, False],\n                      \"make_quarters\" : [True, False, False, False,True, False, False, False,True, True, False, False,True, False, False, False,True, True, False, False,True, False, False, False],\n                      \"make_semis\"    : [False, False, False, False,True, False, False, False,False, False, False, False,True, False, False, False,True, False, False, False,True, False, False, False],\n                      \"make_finals\"   : [False, False, False, False,True, False, False, False,False, False, False, False,False, False, False, False,False, False, False, False,True, False, False, False],\n                      \"win_it\"        : [False, False, False, False,True, False, False, False,False, False, False, False,False, False, False, False,False, False, False, False,False, False, False, False],\n                      \"third\"         : [False, False, False, False,False, False, False, False,False, False, False, False,True, False, False, False,False, False, False, False,False, False, False, False]})\n\nalex.index = [\"A\"]*4 + [\"B\"]*4 + [\"C\"]*4 + [\"D\"]*4 + [\"E\"]*4 + [\"F\"]*4\n\nalex[\"odds_of_place\"] = [float(groupA.loc[groupA.teams == \"france\",         \"first\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"norway\",        \"second\"])\/100,\n                          float(groupA.loc[groupA.teams == \"south korea\",   \"third\"]) \/100,\n                          float(groupA.loc[groupA.teams == \"nigeria\",       \"fourth\"])\/100,\n                          float(groupB.loc[groupB.teams == \"germany\",       \"first\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"spain\",         \"second\"])\/100,\n                          float(groupB.loc[groupB.teams == \"china\",         \"third\"]) \/100,\n                          float(groupB.loc[groupB.teams == \"south africa\",  \"fourth\"])\/100,\n                          float(groupC.loc[groupC.teams == \"australia\",     \"first\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"brazil\",        \"second\"])\/100,\n                          float(groupC.loc[groupC.teams == \"italy\",         \"third\"]) \/100,\n                          float(groupC.loc[groupC.teams == \"jamaica\",       \"fourth\"])\/100,\n                          float(groupD.loc[groupD.teams == \"england\",       \"first\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"japan\",         \"second\"])\/100,\n                          float(groupD.loc[groupD.teams == \"scotland\",      \"third\"]) \/100,\n                          float(groupD.loc[groupD.teams == \"argentina\",     \"fourth\"])\/100,\n                          float(groupE.loc[groupE.teams == \"canada\",        \"first\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"netherlands\",   \"second\"])\/100,\n                          float(groupE.loc[groupE.teams == \"new zealand\",   \"third\"]) \/100,\n                          float(groupE.loc[groupE.teams == \"cameroon\",      \"fourth\"])\/100,\n                          float(groupF.loc[groupF.teams == \"united states\", \"first\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"sweden\",        \"second\"])\/100,\n                          float(groupF.loc[groupF.teams == \"chile\",         \"third\"]) \/100,\n                          float(groupF.loc[groupF.teams == \"thailand\",      \"fourth\"])\/100]","c590804c":"# Perfect Group Prediction\ngroup_perfect = pd.DataFrame(alex[\"odds_of_place\"].groupby(level=0).prod()*100).rename({\"odds_of_place\" : \"chance of perfect group\"}, axis='columns')\na_group_perf = 3*group_perfect[\"chance of perfect group\"].sum()\/100\nprint(\"Expected perfect group points: \" + str(a_group_perf))\ngroup_perfect","7c8745b3":"# Predict First Place\ngroup_first = pd.DataFrame(alex[alex.group_place == 1][\"odds_of_place\"]).rename({\"odds_of_place\" : \"chance of first\"}, axis='columns')\na_first = 2*group_first[\"chance of first\"].sum()\nprint(\"Expected first place points: \" + str(a_first))\ngroup_first*100","824afbba":"# Odds of Advancing\nadvance_group = tourn_results[tourn_results.team.isin(alex[alex.advance == True].team)][[\"team\", \"rd16\"]]\na_advance_16 = advance_group.rd16.sum()\/100\nprint(\"Expected points from picking advancing team: \" + str(a_advance_16))\nadvance_group","a66b4fd1":"# Odds of Quarters\nquarters_odds = tourn_results[tourn_results.team.isin(alex[alex.make_quarters == True].team)][[\"team\", \"quarters\"]]\na_quarters = 2*quarters_odds.quarters.sum()\/100\nprint(\"Expected points from picking quarters team: \" + str(a_quarters))\nquarters_odds","51972b79":"# Odds of Semis\nsemis_odds = tourn_results[tourn_results.team.isin(alex[alex.make_semis == True].team)][[\"team\", \"semis\"]]\na_semis = 4*semis_odds.semis.sum()\/100\nprint(\"Expected points from picking semis team: \" + str(a_semis))\nsemis_odds","02cfbbf8":"# Odds of Finals\nfinals_odds = tourn_results[tourn_results.team.isin(alex[alex.make_finals == True].team)][[\"team\", \"finals\"]]\na_finals = 8*finals_odds.finals.sum()\/100\nprint(\"Expected points from picking finals team: \" + str(a_finals))\nfinals_odds","6f4f98c0":"# Odds of Third\nthird_odds = tourn_results[tourn_results.team.isin(alex[alex.third == True].team)][[\"team\", \"third\"]]\na_third = 8*third_odds.third.sum()\/100\nprint(\"Expected points from picking third place team: \" + str(a_third))\nthird_odds","903ce6ca":"# Odds of Winning\nwinner_odds = tourn_results[tourn_results.team.isin(alex[alex.win_it == True].team)][[\"team\", \"first\"]]\na_champs = 16*float(winner_odds[\"first\"])\/100\nprint(\"Expected points from picking winner: \" + str(a_champs))\nwinner_odds","4e9d5c4a":"summary = pd.DataFrame({\"competitor\"      : [\"Alex\",       \"Jerrod\",      \"Jerry\",          \"Nikki\"],\n                        \"EX pefect group\" : [a_group_perf, jc_group_perf, ja_group_perfect, n_perf_group],\n                        \"EX 1st in group\" : [a_first,      jc_first,      ja_first,         n_first_place],\n                        \"EX round of 16\"  : [a_advance_16, jc_advance_16, ja_advance_16,    n_advance_group],\n                        \"EX quarters\"     : [a_quarters,   jc_quarters,   ja_quarters,      n_quarters],\n                        \"EX semis\"        : [a_semis,      jc_semis,      ja_semis,         n_semis],\n                        \"EX finals\"       : [a_finals,     jc_finals,     ja_finals,        n_finals],\n                        \"EX 3rd place\"    : [a_third,      jc_third,      ja_thirds,        n_thirds],\n                        \"EX champion\"     : [a_champs,     jc_champs,     ja_champs,        n_winners_odds]})\nsummary[\"EX total\"] = summary[\"EX pefect group\"] + summary[\"EX 1st in group\"] + summary[\"EX round of 16\"] + summary[\"EX quarters\"] + summary[\"EX semis\"] + summary[\"EX finals\"] + summary[\"EX 3rd place\"] + summary[\"EX champion\"]\n\nsummary","30e2c305":"compare(\"germany\", \"china\", )","23dd6d88":"compare(\"spain\", \"south africa\")","9d29bafc":"compare(\"norway\", \"nigeria\")","9fe60439":"### Group E","03260f0f":"# Summary of Expected Points","87c52dfb":"# Jerrod's Bracket","c03a55bc":"# Tournament Simulation","033f1462":"## Team Rankings\n\nHere is a look at the ranking of the top 25 teams according to my model","0826845d":"## Model Training\n\nI used a Bayesian model that takes into consideration score margin and home and away.","ca688886":"### Group B","b1526c7a":"### Group D","fae05562":"This simulates the tournament 1000 times and aggregates the results, code to be tidied up in the future.","d6bb5a9c":"# Group Prediction\n\n### Group A","b08369ad":"# Women' World Cup 2019 Predictions\n\n![](https:\/\/worldsoccertalk.com\/wp-content\/uploads\/2018\/09\/womens-world-cup-teams.jpg)\n## Setup\n\nHere I load in previous games. Given the lack of women's national team data, I inputed the game scores manually. The tournaments that I included were:\n- World Cup Qualifiers\n- Olympics (2016)\n- She Believes Cup (2019, 2018, 2017)\n- UEFA Womens Championship (2017)\n- FFA Cup of Nations (2019)","8b038168":"# Bracket Results\n\nA few of my friends and I filled out brackets to predict the results of the tournament. Scores are awarded through the following means (max score is 118):\n\n- Predict first place in a group (2 points)\n- Predict a perfect group (3 points)\n- Predict team advancing to the round of 16 (1 point)\n- Predict team advancing to the quarter-finals round (2 points)\n- Predict team advancing to the semi-finals (4 points)\n- Predict team advancing to the finals (8 points)\n- Predict team winning tournament (16 points)\n- Predict 3rd place team (8 points)\n\n# Nikki's Bracket","86e3d05a":"### Group F","f6b42b75":"# My Bracket","21985919":"### Group C","5946c053":"# Jerry's Bracket","c1ef375f":"## Function Building\n\nHere are functions useful in predicting the world cup."}}