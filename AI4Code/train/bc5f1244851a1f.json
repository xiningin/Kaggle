{"cell_type":{"5f595d6c":"code","b8948018":"code","78df8d16":"code","b25054e1":"code","f7a9af07":"code","34addade":"code","f44af873":"code","7dbbbded":"code","3930a3bb":"code","b50cc949":"code","9deee9df":"code","c9eab105":"code","3ce9a86b":"code","1269fe48":"code","cd563af8":"code","a867d7f4":"code","340dfbe7":"code","2f7c6021":"code","8cecce28":"code","5fbaefd7":"code","5d899d15":"code","d523e186":"code","b5c86e27":"code","f5beb8b9":"markdown"},"source":{"5f595d6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8948018":"from matplotlib import rcParams\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom wordcloud import WordCloud","78df8d16":"train = pd.read_csv(\"\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv\",encoding='latin-1')","b25054e1":"train.head()","f7a9af07":"df=train.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1)\ndf=df.rename(columns={'v1':'labels','v2': 'text'})\ndf.head()","34addade":"rcParams[\"figure.figsize\"] = 10,15\ndf[\"labels\"].value_counts().plot(kind=\"pie\")","f44af873":"rcParams[\"figure.figsize\"] = 15,8\ndf[\"labels\"].value_counts().plot(kind=\"bar\")","7dbbbded":"lb = LabelEncoder()\ndf[\"labels\"] = lb.fit_transform(df[\"labels\"])","3930a3bb":"df.head()","b50cc949":"df[\"text_len\"] = df[\"text\"].apply(len)","9deee9df":"df.head()","c9eab105":"rcParams[\"figure.figsize\"] = 10,6\nsns.distplot(a=df['text_len'],kde=False)\nplt.legend()","3ce9a86b":"def generate_word_cloud(text):\n    wordcloud = WordCloud(\n        width = 3000,\n        height = 2000,\n        background_color = 'black').generate(str(text))\n    fig = plt.figure(\n        figsize = (40, 30),\n        facecolor = 'k',\n        edgecolor = 'k')\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","1269fe48":"real_data_text = df.text\ngenerate_word_cloud(real_data_text)","cd563af8":"!wget https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","a867d7f4":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\nimport tokenization","340dfbe7":"module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","2f7c6021":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","8cecce28":"def build_model(bert_layer, max_len):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(200, activation='sigmoid')(clf_output)\n    out1 = Dense(1,activation='sigmoid')(out)\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out1)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","5fbaefd7":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","5d899d15":"train_input = bert_encode(df.text.values, tokenizer, max_len=160)\n# test_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = df.labels.values","d523e186":"model = build_model(bert_layer, max_len=512)\nmodel.summary()","b5c86e27":"checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only=True)\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=5,\n    callbacks=[checkpoint],\n    batch_size=16\n)\n\n","f5beb8b9":"# Target Distribution"}}