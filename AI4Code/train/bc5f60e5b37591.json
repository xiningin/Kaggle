{"cell_type":{"966b8085":"code","1893af32":"code","c23c683e":"code","586943c3":"code","32772a17":"code","31f32d8e":"code","30cc686f":"code","4f477b94":"code","cba34640":"code","bd273ee4":"code","1b42beb4":"code","5583dc5c":"code","ac41ddee":"code","bd7b8197":"code","70041bc5":"code","4735cf6a":"code","326cf175":"code","fbb84b46":"markdown","da726ba6":"markdown","575558c2":"markdown","b4448b0b":"markdown","10738f6b":"markdown","2bb1d1b9":"markdown","09da21e9":"markdown","1cb74484":"markdown","9c01f585":"markdown","7b014959":"markdown"},"source":{"966b8085":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Lambda, MaxPooling2D # convolution layers\nfrom keras.layers import Dense, Dropout, Flatten # core layers\n\nfrom keras.layers.normalization import BatchNormalization\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom keras.utils.np_utils import to_categorical\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1893af32":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","c23c683e":"train.describe()","586943c3":"X = train.drop(['label'], 1).values\ny = train['label'].values\n\ntest_x = test.values\nprint(X)\nnp.shape(X)","32772a17":"X = X \/ 255.0\ntest_x = test_x \/ 255.0\nX = X.reshape(-1,28,28,1)\ntest_x = test_x.reshape(-1,28,28,1)","31f32d8e":"y = to_categorical(y)\n\nprint(f\"Label size {y.shape}\")","30cc686f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)","4f477b94":"X_train__ = X_train.reshape(X_train.shape[0], 28, 28)\n\nfig, axis = plt.subplots(1, 4, figsize=(20, 10))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_train__[i], cmap='binary')\n    digit = y_train[i].argmax()\n    ax.set(title = f\"Real Number is {digit}\");","cba34640":"mean = np.mean(X_train)\nstd = np.std(X_train)\n\ndef standardize(x):\n    return (x-mean)\/std","bd273ee4":"batch_size = 64","1b42beb4":"model=Sequential()\n#model.add(Lambda(standardize,input_shape=(28,28,1)))    \nmodel.add(Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\", input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=64, kernel_size = (3,3), activation=\"relu\"))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\nmodel.add(Conv2D(filters=128, kernel_size = (3,3), activation=\"relu\"))\n\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())    \nmodel.add(Conv2D(filters=256, kernel_size = (3,3), activation=\"relu\"))\n    \nmodel.add(MaxPooling2D(pool_size=(2,2)))\n    \nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(512,activation=\"relu\"))\n    \nmodel.add(Dense(10,activation=\"softmax\"))\n    \nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","5583dc5c":"\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\n#datagen.fit(X_train)\ntrain_gen = datagen.flow(X_train, y_train, batch_size=batch_size)\ntest_gen = datagen.flow(X_test, y_test, batch_size=batch_size)","ac41ddee":"epochs = 50\nhistory = model.fit_generator(train_gen, \n                              epochs = epochs, \n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                              validation_data = test_gen,\n                              validation_steps = X_test.shape[0] \/\/ batch_size)","bd7b8197":"from keras.utils.vis_utils import plot_model\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","70041bc5":"y_pred = model.predict(X_test)\nX_test__ = X_test.reshape(X_test.shape[0], 28, 28)\n\nfig, axis = plt.subplots(4, 4, figsize=(12, 14))\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(X_test__[i], cmap='binary')\n    ax.set(title = f\"Real Number is {y_test[i].argmax()}\\nPredict Number is {y_pred[i].argmax()}\");","4735cf6a":"pred = model.predict_classes(test_x, verbose=1)","326cf175":"sub['Label'] = pred\nsub.to_csv(\"DigitSolutionCNN.csv\", index=False)\nsub.head()","fbb84b46":"# Normalization","da726ba6":"# Load data","575558c2":"# Model training","b4448b0b":"# Visualization","10738f6b":"# CNN","2bb1d1b9":"# Prediction and submition\n","09da21e9":"# Imports\n\n***Using*:**\n* **numpy** for linear algebra\n* **pandas** for data processing\n* **matplotlib** and seaborn for graphics\n* **sklearn** for algorithms\n* **keras** for keras nn\n","1cb74484":"# Preparing data by splitting it to y(labels) and X(features)","9c01f585":"#  Label encoding","7b014959":"# Data augmentation"}}