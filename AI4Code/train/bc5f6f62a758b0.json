{"cell_type":{"7e213a15":"code","a7769bac":"code","ba185925":"code","729454c4":"code","f7bbacec":"code","0ab50b4e":"code","b04bff4a":"code","a173c27e":"code","d6a7d813":"code","f3d8e4ee":"code","8f416c1e":"code","9dea7d4b":"code","2f97e4c7":"code","ceb66e11":"code","7208c434":"code","78ca9349":"code","05005f7f":"code","65fc4217":"code","c93a3a76":"code","d5e05870":"code","2a43fcb6":"code","5d85bdb0":"code","f7784c91":"code","6d25b1db":"code","c1d6935d":"code","628549ac":"code","3f028056":"code","0618587b":"code","1a10704e":"code","3bb99856":"code","4d17f643":"code","ecc965f6":"code","c8ace5e9":"code","64bea46b":"code","3077cae1":"code","3e91456a":"code","69e4373f":"code","7179f5c0":"code","bf49728d":"code","42de3ea2":"code","1fc2e902":"code","6cc38a83":"code","6835399f":"code","28ebe1ca":"code","f8ebb0af":"code","a16c70b6":"code","16247adf":"code","7c077520":"code","9668e219":"code","2fb06045":"code","eb6068fc":"code","5dc043e1":"code","bdab601a":"code","f1cfad5d":"code","96718f14":"code","37211608":"code","bf0e12e5":"code","71f2c681":"code","1987c106":"code","e32e0cb2":"code","6ea87f62":"code","dde1ed77":"code","df990aa9":"code","7429d108":"code","319dfdcd":"code","fbdcc411":"code","24740d8e":"code","b858c0cc":"code","799dd353":"code","e4b6f60e":"code","49075dcc":"code","ffb7d4c0":"code","6ce790d2":"code","f9eaec6e":"code","2dfb4d0c":"code","f33b016e":"code","b5dcfe58":"code","78d0c398":"code","b5711d9f":"code","1d6b63df":"code","b33b2ce0":"code","95d16f41":"code","81722988":"code","69a2c31c":"code","8e0b260f":"code","3622bb87":"markdown","902dc873":"markdown","cae52ac5":"markdown","2d3af55d":"markdown","d5d09a06":"markdown","d65b8894":"markdown","2153ab03":"markdown","c6b7dfa4":"markdown","5d2574cb":"markdown","c80d4447":"markdown","9e754e51":"markdown","e72f874f":"markdown","8d4d4fdf":"markdown","0d69dcac":"markdown","846698a4":"markdown","7746cc0f":"markdown","74f9e116":"markdown","928b8e55":"markdown","ec293e70":"markdown","d47b596c":"markdown","a42b639c":"markdown","ee7f45c0":"markdown","019d6f71":"markdown","25291770":"markdown","76609b4e":"markdown","7407a926":"markdown","c31184cf":"markdown","503b2182":"markdown","f9411d68":"markdown","a2d1092b":"markdown","235760f4":"markdown"},"source":{"7e213a15":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport pandas as pd\n\nimport numpy as np\n\nimport gensim\nfrom gensim import corpora\nfrom pprint import pprint\n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nimport re\n\nimport datetime\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n%matplotlib inline\nimport seaborn as sns \n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport cufflinks as cf\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,plot,iplot\n\nimport folium\n\npyo.init_notebook_mode(connected=True)\ncf.go_offline()\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')","a7769bac":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\nRANDOM_SEED = 25","ba185925":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","729454c4":"DATA_DIR = 'C:\/Users\/danya\/SkillFactory1.4'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\n","f7bbacec":"df_train.info()","0ab50b4e":"df_train.head(5)","b04bff4a":"df_test.info()","a173c27e":"df_test.head(5)","d6a7d813":"sample_submission.head(5)","f3d8e4ee":"sample_submission.info()","8f416c1e":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0  # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n# \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ndf_test['Rating'] = 0\n\ndf = df_test.append(df_train, sort=False).reset_index(\n    drop=True)  # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","9dea7d4b":"df.info()","2f97e4c7":"df.sample(5)","ceb66e11":"df.Reviews[1]","7208c434":"# \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\nplt.figure(figsize=(14, 4))\nsns.heatmap(df.isnull(), cbar=False, yticklabels=False, cmap='viridis');","78ca9349":"df['Number_of_Reviews_isNAN'] = pd.isna(\n    df['Number of Reviews']).astype('uint8')\ndf['Cuisine Style_isNAN'] = pd.isna(df['Cuisine Style']).astype('uint8')\ndf['Price Range_isNAN'] = pd.isna(df['Price Range']).astype('uint8')\ndf['Reviews_isNAN'] = pd.isna(df['Reviews']).astype('uint8')","05005f7f":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 0, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u0442\u0434...\ndf['Number of Reviews'].fillna(0, inplace=True)","65fc4217":"# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0432\u0441\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0438\u043d\u0444\u0443 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0441\u0442\u0440\u043e\u0438\u0442 \u0433\u0440\u0430\u0444\u0438\u043a\u0438\ndef analyse_numeric(datafr, column):\n    '''\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n       \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 DataFrame \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n       \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0438 \u0441\u0442\u0440\u043e\u0438\u0442 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443.'''\n    count = datafr[column].count()\n    mean = datafr[column].mean()\n    std = datafr[column].std()\n    median = datafr[column].median()\n    perc25 = datafr[column].quantile(0.25)\n    perc75 = datafr[column].quantile(0.75)\n    IQR = perc75 - perc25\n    range_min = datafr[column].min()\n    range_max = datafr[column].max()\n    margin = (range_max - range_min)\/10\n    range_start = range_min - margin\n    range_stop = range_max + margin\n    range_ = (range_start, range_stop)\n    outliers = datafr[column].loc[(\n        datafr[column] < perc25 - 1.5*IQR) | (datafr[column] > perc75 + 1.5*IQR)]\n\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: {}, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: {:.3f}, \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435: {:.3f}.'.format(\n        count, mean, std))\n    print('\u041c\u0438\u043d\u0438\u043c\u0443\u043c: {}, 25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {}, \u041c\u0435\u0434\u0438\u0430\u043d\u0430: {}, 75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {}, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: {}, IQR: {}.'\n          .format(range_min, perc25, median, perc75, range_max, IQR))\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: ', pd.isnull(datafr[column]).sum())\n    print('\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].'.format(\n        f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR), '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: ', len(outliers))\n\n    datafr[column].loc[datafr[column].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)] \\\n                  .hist(bins=30, range=range_, label='\u0412 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432')\n    outliers.hist(bins=30, range=range_, label='\u0412\u044b\u0431\u0440\u043e\u0441\u044b')\n\n    plt.legend()","c93a3a76":"df.nunique(dropna=False)","d5e05870":"df.Restaurant_id.nunique()","2a43fcb6":"df_count = df.City.value_counts()\ndf_count","5d85bdb0":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndf['quantity'] = df['City'].apply(lambda x: df_count[x])","f7784c91":"population_dict = {\n    'London': 9304016,\n    'Paris': 2140526,\n    'Madrid': 3348536,\n    'Barcelona': 1620343,\n    'Berlin': 3748148,\n    'Milan': 1404239,\n    'Rome': 2856133,\n    'Prague': 1324277,\n    'Lisbon': 506654,\n    'Vienna': 1911728,\n    'Amsterdam': 873555,\n    'Brussels': 1209000,\n    'Hamburg': 1841179,\n    'Munich': 1471508,\n    'Lyon': 515695,\n    'Stockholm': 974073,\n    'Budapest': 1752286,\n    'Warsaw': 1790658,\n    'Dublin': 554554,\n    'Copenhagen': 626508,\n    'Athens': 664046,\n    'Edinburgh': 524930,\n    'Zurich': 415367,\n    'Oporto': 237559,\n    'Geneva': 201818,\n    'Krakow': 779115,\n    'Oslo': 693491,\n    'Helsinki': 648042,\n    'Bratislava': 432864,\n    'Luxembourg': 613894,\n    'Ljubljana': 292988\n}","6d25b1db":"df['population'] = df['City'].map(population_dict)","c1d6935d":"df['population'] = df['population'] \/ 1000\ndf['quantity_density'] = df.quantity \/ df.population","628549ac":"capitals = ['Paris', 'Stockholm', 'London', 'Berlin',\n            'Bratislava', 'Vienna', 'Rome', 'Madrid',\n            'Dublin', 'Brussels', 'Warsaw', 'Budapest', 'Copenhagen',\n            'Amsterdam', 'Lisbon', 'Prague', 'Oslo',\n            'Helsinki', 'Ljubljana', 'Athens', 'Luxembourg']\n# \u0417\u0434\u0435\u0441\u044c \u043a\u043e\u0434 \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d, \u0442\u0430\u043a \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 MAE\n# df['capital'] = df['city'].apply(lambda x: x in capitals).astype('uint8')","3f028056":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0441\u0442\u043e\u043b\u0438\u0446\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c\ncountries_dict = {'Amsterdam': 'Netherlands',\n                  'Athens': 'Greece',\n                  'Barcelona': 'Spain',\n                  'Berlin': 'Germany',\n                  'Bratislava': 'Slovakia',\n                  'Brussels': 'Belgium',\n                  'Budapest': 'Hungary',\n                  'Copenhagen': 'Denmark',\n                  'Dublin': 'Ireland',\n                  'Edinburgh': 'UK',\n                  'Geneva': 'Switzerland',\n                  'Hamburg': 'Germany',\n                  'Helsinki': 'Finland',\n                  'Krakow': 'Poland',\n                  'Lisbon': 'Portugal',\n                  'Ljubljana': 'Slovenia',\n                  'London': 'UK',\n                  'Luxembourg': 'Luxembourg',\n                  'Lyon': 'France',\n                  'Madrid': 'Spain',\n                  'Milan': 'Italy',\n                  'Munich': 'Germany',\n                  'Oporto': 'Portugal',\n                  'Oslo': 'Norway',\n                  'Paris': 'France',\n                  'Prague': 'Czechia',\n                  'Rome': 'Italy',\n                  'Stockholm': 'Sweden',\n                  'Vienna': 'Austria',\n                  'Warsaw': 'Poland',\n                  'Zurich': 'Switzerland'}\n\ndf['country'] = df.apply(lambda row: countries_dict[row['City']], axis=1)","0618587b":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndf = pd.concat([df, pd.get_dummies(df.City, prefix='City')], axis=1)\ndf.head(3)","1a10704e":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0448\u0438\u0440\u043e\u0442\u0443 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0443 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\ndict_\u0421ity_lat = {'London': 51.5, 'Paris': 48.8667, 'Madrid': 40.4, 'Barcelona': 41.3833,\n                 'Berlin': 52.5218, 'Milan': 45.47, 'Rome': 34.2662, 'Prague': 50.0833,\n                 'Lisbon': 40.7752, 'Vienna': 43.2344, 'Amsterdam': 52.35, 'Brussels': 50.8333,\n                 'Hamburg': 53.55, 'Munich': 48.1299, 'Lyon': 45.77, 'Stockholm': 59.3508,\n                 'Budapest': 47.5, 'Warsaw': 41.2443, 'Dublin': 53.3331,\n                 'Copenhagen': 55.6786, 'Athens': 37.9833, 'Edinburgh': 55.9483,\n                 'Zurich': 47.38, 'Oporto': 41.15, 'Geneva': 46.21, 'Krakow': 50.06,\n                 'Oslo': 59.9167, 'Helsinki': 60.1756, 'Bratislava': 48.15,\n                 'Luxembourg': 49.6117, 'Ljubljana': 46.0553}\ndf['\u0421ity_lat'] = df.apply(lambda row: dict_\u0421ity_lat[row['City']], axis=1)\ndict_\u0421ity_lng = {'London': -0.1167, 'Paris': 2.3333, 'Madrid': -3.6834, 'Barcelona': 2.1834,\n                 'Berlin': 13.4015, 'Milan': 9.205, 'Rome': 12.4833, 'Prague': 14.466,\n                 'Lisbon': -9.1449, 'Vienna': 16.3666, 'Amsterdam': 4.9166, 'Brussels': 4.3333,\n                 'Hamburg': 10, 'Munich': 11.575, 'Lyon': 4.83, 'Stockholm': 18.0973,\n                 'Budapest': 19.0833, 'Warsaw': 21, 'Dublin': -6.2489,\n                 'Copenhagen': 12.5635, 'Athens': 23.7333, 'Edinburgh': -3.2191,\n                 'Zurich': 8.55, 'Oporto': -8.62, 'Geneva': 6.14, 'Krakow': 19.96,\n                 'Oslo': 10.75, 'Helsinki': 24.9341, 'Bratislava': 17.117,\n                 'Luxembourg': 6.13, 'Ljubljana': 14.515}\ndf['\u0421ity_lng'] = df.apply(lambda row: dict_\u0421ity_lng[row['City']], axis=1)","3bb99856":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0412\u0412\u041f \u0441\u0442\u0440\u0430\u043d\u0435 - \u044d\u0442\u043e \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\ndict_Economies = {'UK': 45741, 'France': 45893, 'Spain': 40172,\n                  'Germany': 52386, 'Italy': 39676, 'Czech_c': 37340,\n                  'Portugal': 32412, 'Austria': 52172, 'Holland': 56489,\n                  'Belgium': 48327, 'Sweden': 53652, 'Romania': 26448,\n                  'Poland': 32005, 'Ireland': 79617, 'Denmark': 52279,\n                  'Greece': 29072, 'Scotland': 45741, 'Switzerland': 65010,\n                  'Norway': 74357, 'Finland': 46596, 'Slovakia': 35136,\n                  'Luxembourg': 106372, 'Slovenia': 36741, 'Hungary': 14225,\n                  'Czechia': 20368, 'Netherlands': 48223}\ndf['Economy'] = df.apply(lambda row: dict_Economies[row['country']], axis=1)","4d17f643":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Rest_density - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 (\u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432):\ndf['quantity_density'] = df['quantity'] \/ df['population']","ecc965f6":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c:\ndf.pivot_table(values=['Ranking'],\n               index='country',\n               aggfunc='mean').iplot(kind='bar', title='\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c')","c8ace5e9":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435:\ndf['Cuisine Style'] = df['Cuisine Style'].fillna(\"['Other']\")\ndf['Cuisine_count'] = df['Cuisine Style'].str[2:-2].str.split(\"', '\").str.len()\ndf.Cuisine_count.describe()","64bea46b":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c:\ndf.pivot_table(values=['Ranking', 'Number of Reviews'],\n               index='Cuisine_count',\n               aggfunc='mean').iplot(kind='bar', title='\u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c')","3077cae1":"# \u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\nanalyse_numeric(df, 'Ranking')","3e91456a":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 5 \u0433\u043e\u0440\u043e\u0434\u043e\u0432:\n(df['City'].value_counts())[0:5].index","69e4373f":"# \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\ndf[['London', 'Paris', 'Madrid', 'Barcelona', 'Berlin']].iplot(\n    kind='hist', title='\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c', bins=100)","7179f5c0":"df['Relative_rank'] = df['Ranking'] \/ df['quantity']\ndf['mean_ranking'] = df['Ranking'] \/ \\\n    df['City'].map(df.groupby(['City'])['Ranking'].max())\ndf.head(3)","bf49728d":"analyse_numeric(df, 'Rating')","42de3ea2":"# \u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u043e\u043b\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0438\u0441\u0443\u043d\u043a\u0430\ndf['Rating'].value_counts(ascending=True).iplot(\n    kind='bar', title='\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432')","1fc2e902":"df['Price Range'].value_counts(dropna=False)","6cc38a83":"# \u041e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ndf['Price Range isna'] = pd.isna(df['Price Range']).astype('uint8')\ndf['Price Range label'] = df['Price Range'].apply(lambda x: 2.5 if pd.isnull(\n    x) else 1.0 if x == '$' else 2.5 if x == '$$ - $$$' else 4.0)\ndf.head(3)","6835399f":"# \u0412\u0440\u0435\u043c\u044f \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nanalyse_numeric(df, 'Price Range label')","28ebe1ca":"df.pivot_table(values=['Price Range label'],\n               index='City',\n               aggfunc='mean').iplot(kind='bar', title='\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u043f\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c')","f8ebb0af":"analyse_numeric(df, 'Number of Reviews')","a16c70b6":"df.pivot_table(values=['Number of Reviews'],\n               index='Rating',\n               aggfunc='mean').iplot(kind='bar', title='\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432')","16247adf":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c:\ndf_reviews_by_city = df.groupby(\n    ['City'])['Number of Reviews'].sum().sort_values(ascending=False)\ndf_reviews_by_city","7c077520":"df_reviews_by_city.sort_values().iplot(\n    kind='bar', title='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c')","9668e219":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0438\u0445 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf['Reviews in city'] = df['City'].apply(lambda x: df_reviews_by_city[x])","2fb06045":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438\ndf['Number of Reviews'].fillna(0, inplace=True)","eb6068fc":"# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u0430\ndf['Number of Reviews norm'] = df['Number of Reviews'] \/ df['population']","5dc043e1":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u043b\u0438\u0447\u043d\u044b\u0439 \u0432\u0438\u0434\ndf['Reviews'] = df['Reviews'].fillna('[[], []]')","bdab601a":"# \u0418\u0437\u0432\u043b\u0435\u043a\u0435\u043c \u0434\u0430\u0442\u0443 \u0438\u0437 \u0440\u0435\u0432\u044c\u044e \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438:\ndf['Date_of_review'] = df['Reviews'].str.findall('\\d+\/\\d+\/\\d+')\ndf['Len_date'] = df['Date_of_review'].apply(lambda x: len(x))\ndf[['Date_of_review', 'Reviews']].head()","f1cfad5d":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u043b\u0438\u043d\u0443 \u0434\u0430\u0442\u044b \u043f\u043e\u043b\u044f\ndf.Date_of_review.apply(lambda x: len(x)).value_counts()","96718f14":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u044b \u0441 \u0442\u0440\u0435\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438:\nprint(\"\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Reviews \u0441 \u0442\u0440\u0435\u043c\u044f \u0434\u0430\u0442\u0430\u043c\u0438 :=\")\ntemp_list = df[df['Len_date'] == 3].Reviews.to_list()\ndisplay(df[df['Len_date'] == 3].Reviews.to_list())\ndisplay([re.findall('\\d+\/\\d+\/\\d+', x) for x in temp_list])","37211608":"# \u0412\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u043b\u044e\u0434\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0438 \u0434\u0430\u0442\u044b \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0438 \u044d\u0442\u0438 \u0434\u0430\u0442\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u0442\u044b \u0432\u043d\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\ndf['Len_date'].Date_of_review = df[df['Len_date']\n                                   == 3].Date_of_review.apply(lambda x: x.pop(0))","bf0e12e5":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0435\u0440\u0435\u0440\u044b\u0432 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 (\u043f\u043e \u0434\u0432\u0443\u043c \u043e\u0442\u0437\u044b\u0432\u0430\u043c) \u0438 \u043e\u0442\u0441\u043b\u0435\u0434\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0432\u043d\u043e \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432:\ndef time_to_now(row):\n    if row['Date_of_review'] == []:\n        return None\n    return pd.datetime.now() - pd.to_datetime(row['Date_of_review']).max()\n\n\ndef time_between_reviews(row):\n    if row['Date_of_review'] == []:\n        return None\n    return pd.to_datetime(row['Date_of_review']).max() - pd.to_datetime(row['Date_of_review']).min()\n\n\ndf['Day_to_now'] = df.apply(time_to_now, axis=1).dt.days\ndf['Day_between_reviews'] = df[df['Len_date'] == 2].apply(\n    time_between_reviews, axis=1).dt.days","71f2c681":"analyse_numeric(df, 'Day_between_reviews')","1987c106":"analyse_numeric(df, 'Day_to_now')","e32e0cb2":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0438\u043c \u0434\u043d\u0451\u043c \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c: {}'.format(\n    df['Day_to_now'].isna().sum()))\nprint('\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438: {}'.format(\n    df['Day_between_reviews'].isna().sum()))","6ea87f62":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf['Day_to_now'] = df['Day_to_now'].fillna(0)\ndf['Day_between_reviews'] = df['Day_between_reviews'].fillna(0)","dde1ed77":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Rev_year - \u0433\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430.\n# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 \u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u0430 \u0431\u043e\u043b\u0435\u0435 \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432:\ndef last_review(row):\n    if row == []:\n        return None\n    return pd.to_datetime(row).max()\n\n\ndf['Last_review'] = df['Date_of_review'].apply(last_review)","df990aa9":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c:\ndf['Last_review'].min()","7429d108":"df['Last_review'] = df['Last_review'].apply(lambda x: '2004-04-21' if pd.isnull(x) else x)\ndf['Rev_year'] = df['Last_review'].dt.year","319dfdcd":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Rev_weekday - \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430:\ndf['Rev_weekday'] = df['Last_review'].dt.dayofweek\ndf = df.drop(['Last_review'], axis = 1)","fbdcc411":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","24740d8e":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(df.drop(['sample'], axis=1).corr(),)","b858c0cc":"# \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\ndata.info()","799dd353":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()\n    \n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ############################################################## \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    df_output.drop(['Restaurant_id','ID_TA',], axis = 1, inplace=True)\n    \n    \n    # ################### 2. NAN ############################################################## \n    # \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u0442\u0434...\n    df_output['Number of Reviews'].fillna(0, inplace=True)\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 NAN\n    # ....\n    \n    \n    # ################### 3. Encoding ############################################################## \n    # \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\n    df_output = pd.get_dummies(df_output, columns=[ 'City',], dummy_na=True)\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0435 Encoding \u0444\u0438\u0442\u0447\u0435\u0439\n    # ....\n    \n    \n    # ################### 4. Feature Engineering ####################################################\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439\n    # ....\n    \n    \n    # ################### 5. Clean #################################################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    # \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n    df_output.drop(object_columns, axis = 1, inplace=True)\n    \n    return df_output","e4b6f60e":"df_preproc = preproc_data(data)\ndf_preproc.sample(10)","49075dcc":"df_preproc.info()","ffb7d4c0":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","6ce790d2":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","f9eaec6e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","2dfb4d0c":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","f33b016e":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","b5dcfe58":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","78d0c398":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","b5711d9f":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","1d6b63df":"test_data.sample(10)","b33b2ce0":"test_data = test_data.drop(['Rating'], axis=1)","95d16f41":"sample_submission","81722988":"predict_submission = model.predict(test_data)","69a2c31c":"predict_submission","8e0b260f":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","3622bb87":"# DATA","902dc873":"\u0421\u0443\u0434\u044f \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443, \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433","cae52ac5":"### \u041f\u0440\u043e\u0432\u0435\u0434\u0451\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","2d3af55d":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","d5d09a06":"\u041f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0430 0. \u0412\u043f\u043e\u043b\u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043d\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043b\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043d\u0443\u043b\u0451\u043c. \u0423\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0445 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043a\u0430 \u0447\u0442\u043e.","d65b8894":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439 \u0438\u043b\u0438 \u043d\u0435\u0442","2153ab03":">\u041f\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u043c\u0443, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0434\u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u041e\u041e\u041f). ","c6b7dfa4":"### Number of Reviews\n","5d2574cb":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# \u041f\u0440\u043e\u0435\u043a\u0442 3: \u041e \u0432\u043a\u0443\u0441\u043d\u043e\u0439 \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u043f\u0438\u0449\u0435\n## Predict TripAdvisor Rating\n### \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n**\u041f\u043e \u0445\u043e\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0438:**\n* \u041f\u0440\u043e\u043a\u0430\u0447\u0430\u0435\u043c\u00a0\u0440\u0430\u0431\u043e\u0442\u0443 \u0441 pandas\n* \u041f\u043e\u0439\u043c\u0435\u043c \u043a\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (Nan)\n* \u041f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c\u00a0[Feature Engineering](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435_\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438)\n* \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c ML \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430   \n","c80d4447":"\u0420\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0442\u043e\u0431\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u043b\u0438\u0434\u0435\u0440\u043e\u043c \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435","9e754e51":"# Data Preprocessing\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","e72f874f":"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438 (\u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0434\u043e\u0432\u043e\u0434 \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 \u041f\u041f\u0421)","8d4d4fdf":"#### Cuisine style","0d69dcac":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","846698a4":"### Ranking","7746cc0f":"### Rating","74f9e116":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","928b8e55":"### Price Range","ec293e70":"\u0423\u0434\u043e\u0431\u043d\u0435\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0436\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u0442\u044b\u0441. \u043b\u044e\u0434\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0440\u043e\u0434\u0435. \u0423\u0447\u0442\u0451\u043c \u044d\u0442\u043e","d47b596c":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","a42b639c":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","ee7f45c0":"### city","019d6f71":"\u041a\u0430\u043a \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043c\u043d\u043e\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f, \u043e\u0442 \u0442\u043e\u0433\u043e, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439, \u043e\u0442 \u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043e\u0432 \u0438 \u0442.\u0434. \u042d\u0442\u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0432\u043b\u0438\u044f\u044e\u0442 \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0442\u043e\u0438\u0442 \u0438\u0445 \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0448\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0442\u043e\u0447\u043d\u044b\u043c\u0438","25291770":"### Restaurant_id","76609b4e":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","7407a926":"# Model \n\u0421\u0430\u043c ML","c31184cf":"# import","503b2182":"### Reviews","f9411d68":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","a2d1092b":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","235760f4":"\u0421\u0440\u0435\u0434\u0438 \u043b\u0438\u0434\u0435\u0440\u043e\u0432 \u0412\u0435\u043b\u0438\u043a\u043e\u0431\u0440\u0438\u0442\u0430\u043d\u0438\u044f, \u0424\u0440\u0430\u043d\u0446\u0438\u044f \u0438 \u0418\u0441\u043f\u0430\u043d\u0438\u044f, \u0447\u0443\u0442\u044c \u043e\u0442\u0441\u0442\u0430\u044e\u0442 \u0418\u0442\u0430\u043b\u0438\u044f \u0441 \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u0435\u0439. \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"}}