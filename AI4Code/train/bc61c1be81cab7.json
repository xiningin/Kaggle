{"cell_type":{"642194da":"code","f0ccf171":"code","859da564":"code","a2c5d9bf":"code","849fb1c4":"code","5899d6c6":"code","fc1c90df":"code","178bb5ee":"code","521063d6":"code","b1da1674":"code","7a8bb56f":"code","7f72d260":"code","0c8a9a3a":"code","f82e1331":"code","0f9e68af":"code","86c63ca2":"code","a06ae1c5":"code","105b5f0c":"code","e734301b":"code","f6dd957d":"code","a8370c05":"code","ee82b68e":"code","29867b45":"code","7b73bb3c":"code","da9f0da2":"code","5801f1b5":"code","7edbf672":"code","a07e5f9f":"code","8e1c59bd":"code","56d8699c":"code","27e9bb76":"code","1b45875d":"markdown","47d86b65":"markdown","f4b19bfb":"markdown","4dbe36f3":"markdown","74ba0f01":"markdown","123470d0":"markdown","a3f19fac":"markdown","239e95e8":"markdown","70dc4be0":"markdown","8a26c08e":"markdown","94142f1a":"markdown","d0465964":"markdown","22c9a465":"markdown","bf03b380":"markdown","b4689025":"markdown"},"source":{"642194da":"import numpy as np\nimport glob\nimport cv2\n\npath_1 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/a\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\na_train = np.asarray(cv_img)\nprint(a_train.shape)\n    \npath_2 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/b\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nb_train = np.asarray(cv_img)\nprint(b_train.shape)\n\npath_3 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/c\/*.jpg\")\ncv_img = []\nfor img in path_3:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nc_train = np.asarray(cv_img)\nprint(c_train.shape)\n    \npath_4 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/d\/*.jpg\")\ncv_img = []\nfor img in path_4:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nd_train = np.asarray(cv_img)\nprint(d_train.shape)\n\npath_5 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/e\/*.jpg\")\ncv_img = []\nfor img in path_5:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ne_train = np.asarray(cv_img)\nprint(e_train.shape)\n    \npath_6 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/f\/*.jpg\")\ncv_img = []\nfor img in path_6:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nf_train = np.asarray(cv_img)\nprint(f_train.shape)\n\npath_7 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/g\/*.jpg\")\ncv_img = []\nfor img in path_7:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ng_train = np.asarray(cv_img)\nprint(g_train.shape)\n    \npath_8 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/h\/*.jpg\")\ncv_img = []\nfor img in path_8:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nh_train = np.asarray(cv_img)\nprint(h_train.shape)\n\npath_9 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/i\/*.jpg\")\ncv_img = []\nfor img in path_9:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ni_train = np.asarray(cv_img)\nprint(i_train.shape)\n    \npath_10 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Train\/j\/*.jpg\")\ncv_img = []\nfor img in path_10:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nj_train = np.asarray(cv_img)\nprint(j_train.shape)","f0ccf171":"import numpy as np\nimport glob\nimport cv2\n\npath_1 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/a\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\na_valid = np.asarray(cv_img)\nprint(a_valid.shape)\n    \npath_2 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/b\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nb_valid = np.asarray(cv_img)\nprint(b_valid.shape)\n\npath_3 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/c\/*.jpg\")\ncv_img = []\nfor img in path_3:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nc_valid = np.asarray(cv_img)\nprint(c_valid.shape)\n    \npath_4 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/d\/*.jpg\")\ncv_img = []\nfor img in path_4:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nd_valid = np.asarray(cv_img)\nprint(d_valid.shape)\n\npath_5 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/e\/*.jpg\")\ncv_img = []\nfor img in path_5:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ne_valid = np.asarray(cv_img)\nprint(e_valid.shape)\n    \npath_6 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/f\/*.jpg\")\ncv_img = []\nfor img in path_6:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nf_valid = np.asarray(cv_img)\nprint(f_valid.shape)\n\npath_7 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/g\/*.jpg\")\ncv_img = []\nfor img in path_7:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ng_valid = np.asarray(cv_img)\nprint(g_valid.shape)\n    \npath_8 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/h\/*.jpg\")\ncv_img = []\nfor img in path_8:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nh_valid = np.asarray(cv_img)\nprint(h_valid.shape)\n\npath_9 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/i\/*.jpg\")\ncv_img = []\nfor img in path_9:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ni_valid = np.asarray(cv_img)\nprint(i_valid.shape)\n    \npath_10 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Validation\/j\/*.jpg\")\ncv_img = []\nfor img in path_10:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nj_valid = np.asarray(cv_img)\nprint(j_valid.shape)","859da564":"import numpy as np\nimport glob\nimport cv2\n\npath_1 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/a\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\na_test = np.asarray(cv_img)\nprint(a_test.shape)\n    \npath_2 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/b\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nb_test = np.asarray(cv_img)\nprint(b_test.shape)\n\npath_3 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/c\/*.jpg\")\ncv_img = []\nfor img in path_3:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nc_test = np.asarray(cv_img)\nprint(c_test.shape)\n    \npath_4 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/d\/*.jpg\")\ncv_img = []\nfor img in path_4:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nd_test = np.asarray(cv_img)\nprint(d_test.shape)\n\npath_5 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/e\/*.jpg\")\ncv_img = []\nfor img in path_5:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ne_test = np.asarray(cv_img)\nprint(e_test.shape)\n    \npath_6 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/f\/*.jpg\")\ncv_img = []\nfor img in path_6:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nf_test = np.asarray(cv_img)\nprint(f_test.shape)\n\npath_7 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/g\/*.jpg\")\ncv_img = []\nfor img in path_7:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ng_test = np.asarray(cv_img)\nprint(g_test.shape)\n    \npath_8 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/h\/*.jpg\")\ncv_img = []\nfor img in path_8:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nh_test = np.asarray(cv_img)\nprint(h_test.shape)\n\npath_9 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/i\/*.jpg\")\ncv_img = []\nfor img in path_9:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\ni_test = np.asarray(cv_img)\nprint(i_test.shape)\n    \npath_10 = glob.glob(\"..\/input\/flowers-renamed\/Croped Data Set\/Test\/j\/*.jpg\")\ncv_img = []\nfor img in path_10:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(150,150))\n    cv_img.append(n)\nj_test = np.asarray(cv_img)\nprint(j_test.shape)","a2c5d9bf":"import matplotlib.pyplot as plt\nplt.imshow(a_train[4])","849fb1c4":"Xtrain = np.concatenate((a_train,b_train,c_train,d_train,e_train,f_train,g_train,h_train,i_train,j_train))\nXtest = np.concatenate((a_test,b_test,c_test,d_test,e_test,f_test,g_test,h_test,i_test,j_test))\nXvalid = np.concatenate((a_valid,b_valid,c_valid,d_valid,e_valid,f_valid,g_valid,h_valid,i_valid,j_valid))\n\nXtrain.shape , Xtest.shape, Xvalid.shape","5899d6c6":"train_a_labels = np.zeros(len(a_train))\ntrain_b_labels = np.ones(len(b_train))\ntrain_c_labels = 2*np.ones(len(c_train))\ntrain_d_labels = 3*np.ones(len(d_train))\ntrain_e_labels = 4*np.ones(len(e_train))\ntrain_f_labels = 5*np.ones(len(f_train))\ntrain_g_labels = 6*np.ones(len(g_train))\ntrain_h_labels = 7*np.ones(len(h_train))\ntrain_i_labels = 8*np.ones(len(i_train))\ntrain_j_labels = 9*np.ones(len(j_train))\n\ntrain_a_labels, train_g_labels","fc1c90df":"test_a_labels = np.zeros(len(a_test))\ntest_b_labels = np.ones(len(b_test))\ntest_c_labels = 2*np.ones(len(c_test))\ntest_d_labels = 3*np.ones(len(d_test))\ntest_e_labels = 4*np.ones(len(e_test))\ntest_f_labels = 5*np.ones(len(f_test))\ntest_g_labels = 6*np.ones(len(g_test))\ntest_h_labels = 7*np.ones(len(h_test))\ntest_i_labels = 8*np.ones(len(i_test))\ntest_j_labels = 9*np.ones(len(j_test))","178bb5ee":"valid_a_labels = np.zeros(len(a_valid))\nvalid_b_labels = np.ones(len(b_valid))\nvalid_c_labels = 2*np.ones(len(c_valid))\nvalid_d_labels = 3*np.ones(len(d_valid))\nvalid_e_labels = 4*np.ones(len(e_valid))\nvalid_f_labels = 5*np.ones(len(f_valid))\nvalid_g_labels = 6*np.ones(len(g_valid))\nvalid_h_labels = 7*np.ones(len(h_valid))\nvalid_i_labels = 8*np.ones(len(i_valid))\nvalid_j_labels = 9*np.ones(len(j_valid))","521063d6":"ytrain = np.concatenate((train_a_labels,train_b_labels,train_c_labels,train_d_labels,\n                         train_e_labels,train_f_labels,train_g_labels,train_h_labels,train_i_labels,train_j_labels))\nytest = np.concatenate((test_a_labels,test_b_labels,test_c_labels,test_d_labels,\n                         test_e_labels,test_f_labels,test_g_labels,test_h_labels,test_i_labels,test_j_labels))\nyvalid = np.concatenate((valid_a_labels,valid_b_labels,valid_c_labels,valid_d_labels,\n                         valid_e_labels,valid_f_labels,valid_g_labels,valid_h_labels,valid_i_labels,valid_j_labels))\n\nytrain.shape,  ytest.shape, yvalid.shape","b1da1674":"yvalid.shape","7a8bb56f":"from sklearn.utils import shuffle\nXtrain_shuffled, ytrain_shuffled = shuffle(Xtrain,ytrain, random_state = 9896)\nXtest_shuffled, ytest_shuffled = shuffle(Xtest,ytest, random_state = 9896)\n","7f72d260":"Xtrain_normalized = Xtrain\/255\nXtest_normalized = Xtest\/255\nXvalid_normalized = Xvalid\/255","0c8a9a3a":"ytrain[724]","f82e1331":"from keras.utils import to_categorical\ny_train = to_categorical(ytrain,10)\ny_test = to_categorical(ytest,10)\ny_valid = to_categorical(yvalid,10)","0f9e68af":"y_train[795]","86c63ca2":"ytrain[795]","a06ae1c5":"from keras import layers , models\nfrom keras.optimizers import Adam\nimport tensorflow as tf\ntf.random.set_seed(2)\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32,3,activation = 'relu',input_shape = (150,150,3)))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Conv2D(64,3,activation = 'relu'))\nmodel.add(layers.MaxPooling2D(3,3))\nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512,activation = 'relu'))\nmodel.add(layers.Dense(10,activation = 'softmax'))","105b5f0c":"model.compile(optimizer=Adam(0.00001),loss = 'categorical_crossentropy',metrics = ['acc'])","e734301b":"hist = model.fit(Xtrain_normalized,y_train ,epochs=15,validation_data=(Xvalid_normalized,y_valid))","f6dd957d":"model.evaluate(Xtest,y_test)","a8370c05":"histo = hist.history\nhisto.keys()","ee82b68e":"epochs = np.arange(1,len(histo['val_acc'])+1)\nimport matplotlib.pyplot as plt\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Training and Validation Loss\")\nplt.plot(epochs,histo[\"acc\"])\nplt.plot(epochs,histo[\"val_acc\"])","29867b45":"epochs = np.arange(1,len(histo['val_acc'])+1)\nimport matplotlib.pyplot as plt\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Training and Validation Loss\")\nplt.plot(epochs,histo[\"loss\"])\nplt.plot(epochs,histo[\"val_loss\"])","7b73bb3c":"epochs = np.arange(1,len(histo['val_acc'])+1)\nimport matplotlib.pyplot as plt\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Training and Validation Loss\")\nplt.plot(epochs,histo[\"acc\"])\nplt.plot(epochs,histo[\"val_acc\"])","da9f0da2":"epochs = np.arange(1,len(histo['val_acc'])+1)\nimport matplotlib.pyplot as plt\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Training and Validation Loss\")\nplt.plot(epochs,histo[\"loss\"])\nplt.plot(epochs,histo[\"val_loss\"])","5801f1b5":"trla = np.argmax(y_test,axis=1)","7edbf672":"labels = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]\nimport tensorflow","a07e5f9f":"from sklearn.metrics import classification_report, precision_score, recall_score, confusion_matrix\npred2 = model.predict_classes(Xtest)\nprint(precision_score(pred2,trla,average=\"micro\"))\nprint(recall_score(pred2,trla,average=\"micro\"))\nc = confusion_matrix(pred2,trla)","8e1c59bd":"import seaborn as s\n\nfig = s.heatmap(c,annot=True,xticklabels=labels,yticklabels=labels)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show(fig)","56d8699c":"model.predict_classes(Xtest[[12]])","27e9bb76":"plt.imshow(Xtest[1234])","1b45875d":"**Combining Data of dogs and cats**","47d86b65":"**Shuffling the data**","f4b19bfb":"# Converting Images to array for AI model (Test data)","4dbe36f3":"**Combining the targets or labels of classes**","74ba0f01":"**Previewing an image**","123470d0":"# Checking the prediction","a3f19fac":"**Normalzing the data**","239e95e8":"**Setting targets for test**","70dc4be0":"**Setting targets for train**","8a26c08e":"# Evaluating the model -- Calculating the accuracy","94142f1a":"# Training the model","d0465964":"# Converting Images to array for AI model (Training data)","22c9a465":"# Building the AI Model","bf03b380":"# Evaluating the model -- Predicting an input image","b4689025":"# Compiling the model"}}