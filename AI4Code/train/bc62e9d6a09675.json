{"cell_type":{"8c696e75":"code","fb0ac09f":"code","82987bdc":"code","fd6388af":"code","43a37885":"code","b5849622":"code","948a870a":"code","077b9c7b":"code","343bda1d":"code","58c8f74d":"code","fec63c07":"code","81dc03d7":"code","00cb4819":"code","f536a028":"code","395c91ad":"code","6eca0abe":"code","b6d9d9f2":"code","a89ef928":"code","ad3debd2":"code","5436858a":"code","3eb23f38":"code","92623d7c":"code","53b1e55d":"markdown","f3be6d86":"markdown","6ca363ca":"markdown","efdd255c":"markdown","ba5bf860":"markdown","33863bf5":"markdown","f0675b1d":"markdown","0797436b":"markdown"},"source":{"8c696e75":"import numpy as np\nimport pandas as pd\n\nimport xgboost as xgb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)","fb0ac09f":"df = pd.read_csv(\"..\/input\/iitgaisummerhackathon\/train.csv\")\ndf.head()","82987bdc":"# Check the shape of the dataframe\ndf.shape","fd6388af":"df.info()","43a37885":"df.describe()","b5849622":"df.drop(['Id', 'Feature 16'], axis=1, inplace=True)","948a870a":"df.duplicated().sum()","077b9c7b":"df.drop_duplicates(inplace=True)","343bda1d":"df.reset_index(drop=True, inplace=True)","58c8f74d":"feature_cols = [col for col in df.columns if col not in ['Target']]\ntarget_col = ['Target']","fec63c07":"X_train, X_test, y_train, y_test = train_test_split(df[feature_cols], df[target_col], \n                                                    stratify=df[target_col], \n                                                    test_size=0.2, random_state=42, \n                                                    shuffle=True)","81dc03d7":"model1 = xgb.XGBClassifier(n_estimators=600, learning_rate=0.013185216741789522, \n                           subsample=0.9, colsample_bytree=0.8, \n                           reg_alpha=6, reg_lambda=5, max_depth=5, \n                           min_child_weight=184, scale_pos_weight=45)","00cb4819":"model1.fit(X_train, y_train, eval_metric='auc')","f536a028":"print(f\"Training ROC: {roc_auc_score(y_train, model1.predict_proba(X_train)[:, 1])}\")\nprint(f\"Validation ROC: {roc_auc_score(y_test, model1.predict_proba(X_test)[:, 1])}\")","395c91ad":"submission = pd.read_csv(\"..\/input\/iitgaisummerhackathon\/sample_submission\")\ntest = pd.read_csv(\"..\/input\/iitgaisummerhackathon\/test.csv\")","6eca0abe":"preds1 = model1.predict_proba(test[feature_cols])[:, 1]","b6d9d9f2":"submission['Target'] = preds1\nsubmission.to_csv('submission.csv', index=False)","a89ef928":"# model2 = RandomForestClassifier(n_estimators=300, max_depth=6, random_state=42)","ad3debd2":"# model2.fit(X_train, y_train)","5436858a":"# print(f\"Training ROC: {roc_auc_score(y_train, model2.predict_proba(X_train)[:, 1])}\")\n# print(f\"Validation ROC: {roc_auc_score(y_test, model2.predict_proba(X_test)[:, 1])}\")","3eb23f38":"# preds2 = model2.predict_proba(test[feature_cols])[:, 1]","92623d7c":"# submission['Target'] = (preds1 + preds2) \/ 2\n# submission.to_csv('submission.csv', index=False)","53b1e55d":"### Set `stratify` equal to target column to ensure similar split between the training and testing set ","f3be6d86":"### There are 999 duplicates. We will drop the duplicates","6ca363ca":"## Advanced Approach: Ensembling","efdd255c":"### Uncomment the following code and tune the hyperparameters of `RandomForestClassifier`","ba5bf860":"### Now we will check for duplicates","33863bf5":"### We take average of predictions from both the models","f0675b1d":"### Check the descriptive stats of the Dataframe","0797436b":"### We notice that for feature 16, we only have constant value of 0"}}