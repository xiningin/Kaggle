{"cell_type":{"2c33c5f0":"code","0e502a61":"code","5876bd5d":"code","dd4277fd":"code","9ce5c597":"code","9e70c211":"code","7a8ae86d":"code","3d842d9a":"code","83f17b95":"code","b4048fac":"code","4aa26c0d":"code","134a6ae1":"code","52f89093":"code","9632e756":"markdown","71e216bd":"markdown","5aa45e97":"markdown","5cfe172a":"markdown","e52b8d82":"markdown","f9240dd0":"markdown","0547ba1a":"markdown","9772afd4":"markdown","6fbe2414":"markdown","65320479":"markdown","25c81fb8":"markdown","ba8640d2":"markdown","62dca906":"markdown"},"source":{"2c33c5f0":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n%matplotlib inline","0e502a61":"path0 = '..\/input\/gsdc6089\/submission.csv' \n\nsub6089 = pd.read_csv(path0)","5876bd5d":"path1 = '..\/input\/gsdc5331\/submission.csv'#'..\/input\/gsdc6027\/submission.csv' \n\nsub6027 = pd.read_csv(path1)","dd4277fd":"path2 = '..\/input\/gsdc5364\/submission_log1p_quadratic.csv'# '..\/input\/gsdc5639\/submission.csv' \n\nsub5639 = pd.read_csv(path2)","9ce5c597":"path3 = '..\/input\/gsdc5370\/submission.csv' \n\nsub5370 = pd.read_csv(path3)","9e70c211":"path4 = '..\/input\/gsdc5364\/submission_log1p_quadratic.csv' \n\nsub5364 = pd.read_csv(path4)","7a8ae86d":"path5 = '..\/input\/gsdc5331\/submission.csv' \n\nsub5331 = pd.read_csv(path5)","3d842d9a":"path = [path0, path1, path2, path3, path4, path5]","83f17b95":"def ensembling(main, support, coeff1, coeff2): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera1 = subav[i, 2]\n        pera2 = subav[i, 3]\n        \n        perb1 = subbv[i, 2]\n        perb2 = subbv[i, 3]\n\n        per1 = (pera1 * coeff1) + (perb1 * (1.0 - coeff1))\n        per2 = (pera2 * coeff2) + (perb2 * (1.0 - coeff2))\n        \n        ensev[i, 2] = per1\n        ensev[i, 3] = per2\n        \n    ense.iloc[:, 2:] = ensev[:, 2:]  \n  \n    return ense      \n","b4048fac":"sub1 = ensembling(sub6027,   sub6089, 0.85, 0.85)\n\nsub2 = ensembling(sub5639,   sub1   , 0.60, 0.60)\n\nsub530 = ensembling(sub5370, sub2  , 0.50, 0.50)\n\nsub4 = ensembling(sub530, sub5331, 0.85, 0.85)\n\n#sub4 = ensembling(sub5364,    sub2, 0.50, 0.50)\n\n","4aa26c0d":"sub530","134a6ae1":"sub5331","52f89093":"sub1.to_csv(\"submission1.csv\",index=False)\nsub2.to_csv(\"submission2.csv\",index=False)\nsub530.to_csv(\"submission530.csv\",index=False)\nsub4.to_csv(\"submission4.csv\",index=False)\n!ls","9632e756":"<div class=\"alert alert-success\">  \n<\/div>","71e216bd":"<div class=\"alert alert-success\">  \n<\/div>","5aa45e97":"<div class=\"alert alert-success\">  \n<\/div>","5cfe172a":"<div>\n    <h1 align=\"center\">Smart Ensembling<\/h1>\n    <h1 align=\"center\">Google Smartphone Decimeter Challenge<\/h1>   \n<\/div>","e52b8d82":"<div class=\"alert alert-success\">  \n<\/div>","f9240dd0":"Thanks to: @t88take https:\/\/www.kaggle.com\/t88take\/gsdc-phones-mean-prediction\/output","0547ba1a":"Thanks to: @bpetrb https:\/\/www.kaggle.com\/bpetrb\/adaptive-gauss-phone-mean\/output","9772afd4":"<div class=\"alert alert-success\">  \n<\/div>","6fbe2414":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","65320479":"<div class=\"alert alert-success\">  \n<\/div>","25c81fb8":"Thanks to: @tensorchoko https:\/\/www.kaggle.com\/tensorchoko\/google-multioutputregressor\/output","ba8640d2":"Thanks to: @columbia2131 https:\/\/www.kaggle.com\/columbia2131\/device-eda-interpolate-by-removing-device-en-ja\/output","62dca906":"<div class=\"alert alert-success\">  \n<\/div>"}}