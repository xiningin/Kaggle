{"cell_type":{"74a037be":"code","24bfc4df":"code","e8798654":"code","cba2015b":"code","3e44eeb1":"code","8231ca49":"code","df821410":"code","897cae9a":"code","09cb2ab2":"code","df478d40":"code","2b7788e9":"code","4623bd1e":"code","91e51a59":"code","6f89db8e":"code","3e668192":"code","82bb1313":"code","f37d970f":"code","8f3345c7":"code","9be06070":"code","5419d0ee":"markdown","b5568a5d":"markdown"},"source":{"74a037be":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sas\nsas.set(style='whitegrid')","24bfc4df":"pd.options.display.max_columns= None # To view all the columns\npd.options.display.max_rows= None\n\ndf = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndf.head(3)","e8798654":"df.describe()","cba2015b":"round((((df.corr()['Class']**2).sort_values(ascending=False))), 5).head(10)","3e44eeb1":"df['Class'].value_counts(normalize= True)*100","8231ca49":"plt.figure(figsize=(20,5))\nsas.heatmap(data= df.isnull(), yticklabels=False, cmap=\"rocket\", linecolor='black',\n    cbar=False, linewidths=0.01)\n\n# We see there is no missing data","df821410":"plt.figure(figsize=(14,5))\nsas.distplot(df['Time'])","897cae9a":"Fraud, Normal = df[df['Class']==1], df[df['Class']==0]\nprint(Fraud.Amount.describe(), '\\n\\n', Normal.Amount.describe())\n# Not much to gain from this:(","09cb2ab2":"X= df[['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']]\n\ny= df['Class']","df478d40":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nscaler1= StandardScaler().fit_transform(X)\npca= PCA(n_components=3).fit_transform(scaler1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","2b7788e9":"pca.shape","4623bd1e":"from sklearn.pipeline import Pipeline # Import only if you're using it\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression","91e51a59":"# from sklearn.pipeline import Pipeline\n# pipe = Pipeline([(\"classifier\", RandomForestClassifier())])\n# \n# grid_param = [\n#                 {\"classifier\": [RandomForestClassifier()],\n#                  \"classifier__n_estimators\": [10,50,100,250],\n#                  \"classifier__max_depth\": [2, 4, 8, 16, None]\n#                  },\n#                 {\"classifier\": [GradientBoostingClassifier()],\n#                  \"classifier__n_estimators\": [5, 50, 250, 500],\n#                  \"classifier__max_depth\": [1, 3, 5, 7, 9],\n#                  \"classifier__learning_rate\":[0.01, 0.1, 1, 10, 100]\n#                  },\n#                 {\"classifier\": [LogisticRegression()],\n#                  \"classifier__C\":[0.001, 0.01, 0.1, 1, 10, 100]}]\n# gridsearch = GridSearchCV(pipe, grid_param, cv=3)\n# best_model = gridsearch.fit(X_train,y_train)\n\n# To choose the best parameters among the best classifiers","6f89db8e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, precision_recall_curve\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\ncnf_matrix = confusion_matrix(y_test, y_pred)\n\nsas.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\", fmt='g')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\n\nprint(classification_report(y_test, y_pred))\nprint(roc_auc_score(y_pred,y_test), '\\n')\nprint(confusion_matrix(y_pred,y_test))","3e668192":"y_pred_prob = logreg.predict_proba(X_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","82bb1313":"# USE GRIDCV TO FIND THE BEST PARAMETERS\n\nfrom sklearn.ensemble import RandomForestClassifier\nrand_f = RandomForestClassifier()\nrand_f.fit(X_train, y_train)\ny_pred = rand_f.predict(X_test)\n\ncnf_matrix = confusion_matrix(y_test, y_pred)\nsas.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\", fmt='g')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\n\nprint(classification_report(y_pred,y_test))\nprint(roc_auc_score(y_pred,y_test), '\\n')","f37d970f":"y_pred_prob = rand_f.predict_proba(X_test)[:,1]\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred_prob)\nplt.plot(precision, recall)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision Recall Curve')","8f3345c7":"# from xgboost import XGBRegressor\n# xgb= XGBRegressor()\n# parameters= {\"learning_rate\"    : [0.01, 0.10, 0.20, 0.30] ,\n#  \"max_depth\"        : [ 5, 10, 12, 15, 30, 50],\n#  \"n_estimators\" : [50, 100, 1000, 5000, 10000 ]}\n \n# grid_search= GridSearchCV(xgb, parameters)\n# results= grid_search.fit(X_train,y_train)\n\n# ALWAYS USE GRIDCV TO FIND THE BEST PARAMETERS\n# This will take a while\n\nimport xgboost as xgb\nmodel = xgb.XGBClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\ncnf_matrix = confusion_matrix(y_test, y_pred)\nsas.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\", fmt='g')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\n\nprint(classification_report(y_test, y_pred),'\\n')\nprint(roc_auc_score(y_pred,y_test))","9be06070":"import warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nfrom sklearn.utils.testing import all_estimators\nfrom sklearn import base\n\nestimators = all_estimators()\n\nfor name, class_ in estimators:\n    if issubclass(class_, base.ClassifierMixin):\n        print(name)","5419d0ee":"### Further you can also use other ___classifiers___ or ___Neural Network___ to get better \"roc_auc_score\"\n\n#### Here's a list to some of the classifiers\n","b5568a5d":"### CAUTION: TRY THIS ONLY YOU HAVE PATIENCE AND REALLY FAST COMPUTER\n#### Took me more than an hour"}}