{"cell_type":{"1746b902":"code","fd9cb922":"code","acee3744":"code","b9f43ec1":"code","80481bb0":"code","1aa531ac":"code","5246bb11":"code","4bae4a6c":"code","a9905bbe":"code","2fcb461e":"markdown"},"source":{"1746b902":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport seaborn as sns\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn import preprocessing\nimport matplotlib.patches as mpatches\n\nprint(os.listdir(\"..\/input\"))\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]","fd9cb922":"train_transaction = pd.read_csv('..\/input\/train_transaction.csv')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv')\ntrain_identity = pd.read_csv('..\/input\/train_identity.csv')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv')","acee3744":"# Check imbalance\ntrain_transaction.groupby('isFraud') \\\n    .count()['TransactionID'] \\\n    .plot(kind='barh',\n          title='Distribution of Target in Train',\n          figsize=(15, 3))\nplt.show()","b9f43ec1":"# Merge dataset\ntrain = train_identity.merge(train_transaction[['TransactionID','TransactionDT','isFraud']],on=['TransactionID'])\ntest = test_identity.merge(test_transaction[['TransactionID','TransactionDT']],on=['TransactionID'])\n#del train_identity, test_identity, train_transaction, test_transaction","80481bb0":"label = 'isFraud'\nX_train = train.drop(label, axis=1)\ny_train = train[label]\n\nX_test = test","1aa531ac":"# Label Encoding\nfor f in X_train.columns:\n    if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n        X_train[f] = lbl.transform(list(X_train[f].values))\n        X_test[f] = lbl.transform(list(X_test[f].values))   ","5246bb11":"# Filling NaN series\nX_train = X_train.fillna(-999)","4bae4a6c":"# https:\/\/www.kaggle.com\/pavansanagapati\/anomaly-detection-credit-card-fraud-analysis\nrandom_state = 42\nn_components = 2\n\n# T-SNE Implementation\nt0 = time.time()\nX_reduced_tsne = TSNE(n_components=n_components, random_state=random_state).fit_transform(X_train.values)\nt1 = time.time()\nprint(\"T-SNE took {:.2} s\".format(t1-t0))\n\n# PCA Implementation\nt0 = time.time()\nX_reduced_pca = PCA(n_components=n_components, random_state=random_state).fit_transform(X_train.values)\nt1 = time.time()\nprint(\"PCA took {:.2} s\".format(t1-t0))\n\n# TruncatedSVD\nt0 = time.time()\nX_reduced_svd = TruncatedSVD(n_components=n_components, algorithm='randomized', random_state=random_state).fit_transform(X_train.values)\nt1 = time.time()\nprint(\"Truncated SVD took {:.2} s\".format(t1-t0))","a9905bbe":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24,6))\n# labels = ['No Fraud', 'Fraud']\nf.suptitle('Clusters using Dimensionality Reduction', fontsize=14)\n\nblue_patch = mpatches.Patch(color='#0A0AFF', label='No Fraud')\nred_patch = mpatches.Patch(color='#AF0000', label='Fraud')\n\n# t-SNE scatter plot\nax1.scatter(X_reduced_tsne[:,0], X_reduced_tsne[:,1], c=(y_train == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\nax1.scatter(X_reduced_tsne[:,0], X_reduced_tsne[:,1], c=(y_train == 1), cmap='coolwarm', label='Fraud', linewidths=2)\nax1.set_title('t-SNE', fontsize=14)\nax1.grid(True)\nax1.legend(handles=[blue_patch, red_patch])\n\n# PCA scatter plot\nax2.scatter(X_reduced_pca[:,0], X_reduced_pca[:,1], c=(y_train == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\nax2.scatter(X_reduced_pca[:,0], X_reduced_pca[:,1], c=(y_train == 1), cmap='coolwarm', label='Fraud', linewidths=2)\nax2.set_title('PCA', fontsize=14)\nax2.grid(True)\nax2.legend(handles=[blue_patch, red_patch])\n\n# TruncatedSVD scatter plot\nax3.scatter(X_reduced_svd[:,0], X_reduced_svd[:,1], c=(y_train == 0), cmap='coolwarm', label='No Fraud', linewidths=2)\nax3.scatter(X_reduced_svd[:,0], X_reduced_svd[:,1], c=(y_train == 1), cmap='coolwarm', label='Fraud', linewidths=2)\nax3.set_title('Truncated SVD', fontsize=14)\nax3.grid(True)\nax3.legend(handles=[blue_patch, red_patch])\n\nplt.show()","2fcb461e":"# Simple Visualization via t-SNE\/PCA\/TuncatedSVD\nThanks for the [kernel](https:\/\/www.kaggle.com\/janiobachmann\/credit-fraud-dealing-with-imbalanced-datasets), visualization via t-SNE\/PCA\/TruncatedSVD can be executed easily."}}