{"cell_type":{"e166d546":"code","a759087c":"code","309208d7":"code","abd556f5":"code","1cd4e215":"code","e45d055f":"code","6d34c699":"code","482cdf76":"code","9b19886c":"code","e48680b2":"code","98279f5e":"code","6fcab24f":"code","0d35b943":"code","be70e7ce":"code","a24d74ac":"code","936168de":"markdown","a5a4d067":"markdown"},"source":{"e166d546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as Image\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision.transforms as transforms\n\n# Any results you write to the current directory are saved as output.","a759087c":"data_dir = \"..\/input\"\ntrain_dir = data_dir + \"\/train\/train\"\ntest_dir = data_dir + \"\/test\/test\"","309208d7":"labels = pd.read_csv(data_dir + \"\/train.csv\")\nlabels.head()","abd556f5":"balance = labels['has_cactus'].value_counts()\nbalance","1cd4e215":"train, valid = train_test_split(labels, stratify=labels.has_cactus, test_size=0.2)","e45d055f":"# define hyper-params\nnum_epochs = 25\nnum_classes = 2\nbatch_size = 128\nlearning_rate = 0.002\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\ndevice","6d34c699":"class cactData(Dataset):\n    def __init__(self, split_data, data_root = '.\/', transform=None):\n        super().__init__()\n        self.df = split_data.values\n        self.data_root = data_root\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        img_name,label = self.df[index]\n        img_path = os.path.join(self.data_root, img_name)\n        image = Image.imread(img_path)\n        if self.transform is not None:\n            image = self.transform(image)\n        return image, label\n    ","482cdf76":"mean = [0.5, 0.5, 0.5]\nstd = [0.5, 0.5, 0.5]\n\ntrain_transf = transforms.Compose([transforms.ToPILImage(),\n#                                     transforms.Normalize(mean, std),\n#                                   transforms.RandomCrop(20),\n                                   transforms.ToTensor()\n                                  ])\n\nvalid_transf = transforms.Compose([transforms.ToPILImage(),\n                                  transforms.ToTensor()])","9b19886c":"train_data = cactData(train, train_dir, train_transf)\nvalid_data = cactData(valid, train_dir, valid_transf)\n\ntrain_loader = DataLoader(dataset=train_data, batch_size=batch_size, shuffle=True, num_workers=0)\n\nvalid_loader = DataLoader(dataset=valid_data, batch_size=batch_size\/\/2, shuffle=False, num_workers=0)","e48680b2":"### image dimension for each layer = (width - kernel_size + 2 * padding)\/stride  + 1\nclass CactCNN(nn.Module):\n    def __init__(self):\n        super(CactCNN, self).__init__()\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3, 32, 4, 2, 0),\n            nn.BatchNorm2d(32),\n            nn.ReLU()\n        )\n        # 1 + (32 - 4 + 0)\/2 = 15\n        # 32 * 15 * 15\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(32, 64, 3, 2, 0),\n            nn.BatchNorm2d(64),\n            nn.ReLU()\n        )\n        # 1 + (15 - 3 + 0)\/2 = 7\n        # 64 * 7 * 7\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(64, 128, 3, 2, 0),\n            nn.BatchNorm2d(128),\n            nn.ReLU()\n        )\n        # 1 + (7 - 3 + 0)\/2 = 3\n        # 128 * 3 * 3\n        self.conv4 = nn.Sequential(\n            nn.Conv2d(128, 256, 3, 2, 0),\n            nn.BatchNorm2d(256),\n            nn.ReLU()\n        )\n        #  1 + (3 - 3 + 0)\/2 = 1\n        # 256 * 1 * 1\n        \n        self.fc = nn.Sequential(\n            nn.Linear(256*1*1, 1024),\n            nn.ReLU(),\n            nn.Dropout(p=0.2),\n            nn.Linear(1024,2)\n        )\n    def forward(self, x):\n        x = self.conv1(x)\n\n        x = self.conv2(x)\n\n        x = self.conv3(x)\n\n        x = self.conv4(x)\n\n        x = x.view(x.shape[0],-1)\n        x = self.fc(x)\n        return x","98279f5e":"model = CactCNN().to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\nprint(device)","6fcab24f":"for epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(train_loader):\n        images = images.to(device)\n        labels = labels.to(device)\n#         print(images[0].shape)\n        \n        out = model(images)\n        loss = criterion(out, labels)\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    print('Epoch: {}\/{}, Loss: {}'.format(epoch+1, num_epochs, loss.item()))","0d35b943":"model.eval()\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in valid_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n    print('Test Accuracy: {} %'.format(100 * correct \/ total))","be70e7ce":"submit = pd.read_csv(data_dir + '\/sample_submission.csv')\ntest_data = cactData(split_data = submit, data_root = test_dir, transform = valid_transf)\ntest_loader = DataLoader(dataset = test_data, batch_size=32, shuffle=False, num_workers=0)","a24d74ac":"model.eval()\npredict = []\nfor batch_i, (data, target) in enumerate(test_loader):\n    data, target = data.to(device), target.to(device)\n    output = model(data)\n\n    pr = output[:,1].detach().cpu().numpy()\n    for i in pr:\n        predict.append(i)\n\nsubmit['has_cactus'] = predict\nsubmit.to_csv('submission.csv', index=False)","936168de":"## Transform Images","a5a4d067":"# For Submission"}}