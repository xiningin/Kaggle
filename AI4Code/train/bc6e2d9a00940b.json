{"cell_type":{"f32a9b8e":"code","341da599":"code","b3e5894a":"code","833fc56b":"code","9fa834ac":"code","1cf0ad56":"code","9073e2a3":"markdown"},"source":{"f32a9b8e":"import numpy as np \nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport gc\nwarnings.filterwarnings('ignore')\nimport lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold, StratifiedKFold, train_test_split\nfrom sklearn import metrics\nfrom tqdm import tqdm\nfrom scipy import signal\npd.set_option('display.max_columns', 10000)\npd.set_option('display.max_rows', 10000)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","341da599":"def read_data():\n    print('Reading training, testing and submission data...')\n    train = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv')\n    test = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv')\n    submission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time':str})\n    print('Train set has {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n    print('Test set has {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n    return train, test, submission\n\ndef get_batch(train, test):\n    # concatenate data\n    batch = 50\n    total_batches = 14\n    train['set'] = 'train'\n    test['set'] = 'test'\n    data = pd.concat([train, test])\n    for i in range(int(total_batches)):\n        data.loc[(data['time'] > i * batch) & (data['time'] <= (i + 1) * batch), 'batch'] = i + 1\n    train = data[data['set'] == 'train']\n    test = data[data['set'] == 'test']\n    train.drop(['set'], inplace = True, axis = 1)\n    test.drop(['set'], inplace = True, axis = 1)\n    del data\n    return train, test\n\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        if col!='open_channels':\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)  \n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","b3e5894a":"# signal processing features\ndef calc_gradients(s, n_grads = 4):\n    '''\n    Calculate gradients for a pandas series. Returns the same number of samples\n    '''\n    grads = pd.DataFrame()\n    \n    g = s.values\n    for i in range(n_grads):\n        g = np.gradient(g)\n        grads['grad_' + str(i+1)] = g\n        \n    return grads\n\ndef calc_low_pass(s, n_filts=10):\n    '''\n    Applies low pass filters to the signal. Left delayed and no delayed\n    '''\n    wns = np.logspace(-2, -0.3, n_filts)\n    \n    low_pass = pd.DataFrame()\n    x = s.values\n    for wn in wns:\n        b, a = signal.butter(1, Wn=wn, btype='low')\n        zi = signal.lfilter_zi(b, a)\n        low_pass['lowpass_lf_' + str('%.4f' %wn)] = signal.lfilter(b, a, x, zi=zi*x[0])[0]\n        low_pass['lowpass_ff_' + str('%.4f' %wn)] = signal.filtfilt(b, a, x)\n        \n    return low_pass\n\ndef calc_high_pass(s, n_filts=10):\n    '''\n    Applies high pass filters to the signal. Left delayed and no delayed\n    '''\n    wns = np.logspace(-2, -0.1, n_filts)\n    \n    high_pass = pd.DataFrame()\n    x = s.values\n    for wn in wns:\n        b, a = signal.butter(1, Wn=wn, btype='high')\n        zi = signal.lfilter_zi(b, a)\n        high_pass['highpass_lf_' + str('%.4f' %wn)] = signal.lfilter(b, a, x, zi=zi*x[0])[0]\n        high_pass['highpass_ff_' + str('%.4f' %wn)] = signal.filtfilt(b, a, x)\n        \n    return high_pass\n\ndef calc_ewm(s, windows=[10, 50, 100, 500, 1000]):\n    '''\n    Calculates exponential weighted functions\n    '''\n    ewm = pd.DataFrame()\n    for w in windows:\n        ewm['ewm_mean_' + str(w)] = s.ewm(span=w, min_periods=1).mean()\n        ewm['ewm_std_' + str(w)] = s.ewm(span=w, min_periods=1).std()\n        \n    # add zeros when na values (std)\n    ewm = ewm.fillna(value=0)\n        \n    return ewm\n\n\ndef add_features(s):\n    '''\n    All calculations together\n    '''\n    \n    gradients = calc_gradients(s)\n    low_pass = calc_low_pass(s)\n    high_pass = calc_high_pass(s)\n    ewm = calc_ewm(s)\n    \n    return pd.concat([s, gradients, low_pass, high_pass, ewm], axis=1)\n\n\ndef divide_and_add_features(s, signal_size=500000):\n    '''\n    Divide the signal in bags of \"signal_size\".\n    Normalize the data dividing it by 15.0\n    '''\n    # normalize\n    s = s \/ 15.0\n    \n    ls = []\n    for i in tqdm(range(int(s.shape[0]\/signal_size))):\n        sig = s[i*signal_size:(i+1)*signal_size].copy().reset_index(drop=True)\n        sig_featured = add_features(sig)\n        ls.append(sig_featured)\n    \n    return pd.concat(ls, axis=0)","833fc56b":"# rolling and aggreagate batch features\ndef rolling_features(train, test):\n    \n    pre_train = train.copy()\n    pre_test = test.copy()\n    \n        \n    for df in [pre_train, pre_test]:\n        \n        df['lag_t1'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(1))\n        df['lag_t2'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(2))\n        df['lag_t3'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(3))\n        \n        df['lead_t1'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(-1))\n        df['lead_t2'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(-2))\n        df['lead_t3'] = df.groupby('batch')['signal'].transform(lambda x: x.shift(-3))\n                \n        for window in [1000, 5000, 10000, 20000, 40000, 80000]:\n            \n            # roll backwards\n            df['signalmean_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).mean())\n            df['signalstd_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).std())\n            df['signalvar_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).var())\n            df['signalmin_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).min())\n            df['signalmax_t' + str(window)] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(1).rolling(window).max())\n            min_max = (df['signal'] - df['signalmin_t' + str(window)]) \/ (df['signalmax_t' + str(window)] - df['signalmin_t' + str(window)])\n            df['norm_t' + str(window)] = min_max * (np.floor(df['signalmax_t' + str(window)]) - np.ceil(df['signalmin_t' + str(window)]))\n            \n            # roll forward\n            df['signalmean_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).mean())\n            df['signalstd_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).std())\n            df['signalvar_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).var())\n            df['signalmin_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).min())\n            df['signalmax_t' + str(window) + '_lead'] = df.groupby(['batch'])['signal'].transform(lambda x: x.shift(- window - 1).rolling(window).max())   \n            min_max = (df['signal'] - df['signalmin_t' + str(window) + '_lead']) \/ (df['signalmax_t' + str(window) + '_lead'] - df['signalmin_t' + str(window) + '_lead'])\n            df['norm_t' + str(window) + '_lead'] = min_max * (np.floor(df['signalmax_t' + str(window) + '_lead']) - np.ceil(df['signalmin_t' + str(window) + '_lead']))\n            \n    del train, test, min_max\n    \n    return pre_train, pre_test\n\ndef static_batch_features(df, n):\n    \n    df = df.copy()\n    df.drop('batch', inplace = True, axis = 1)\n    df = df.sort_values(by=['time']).reset_index(drop=True)\n    df.index = ((df.time * 10000) - 1).values\n    df['batch_' + str(n)] = df.index \/\/ n\n    df['batch_index_' + str(n)] = df.index  - (df['batch_' + str(n)] * n)\n    df['batch_slices_' + str(n)] = df['batch_index_' + str(n)]  \/\/ (n \/ 10)\n    df['batch_slices2_' + str(n)] = df.apply(lambda r: '_'.join([str(r['batch_' + str(n)]).zfill(3), str(r['batch_slices_' + str(n)]).zfill(3)]), axis=1)\n\n    for c in ['batch_' + str(n), 'batch_slices2_' + str(n)]:\n        d = {}\n        # -----------------------------------------------\n        d['mean' + c] = df.groupby([c])['signal'].mean()\n        d['median' + c] = df.groupby([c])['signal'].median()\n        d['max' + c] = df.groupby([c])['signal'].max()\n        d['min' + c] = df.groupby([c])['signal'].min()\n        d['std' + c] = df.groupby([c])['signal'].std()\n        d['p10' + c] = df.groupby([c])['signal'].apply(lambda x: np.percentile(x, 10))\n        d['p25' + c] = df.groupby([c])['signal'].apply(lambda x: np.percentile(x, 25))\n        d['p75' + c] = df.groupby([c])['signal'].apply(lambda x: np.percentile(x, 75))\n        d['p90' + c] = df.groupby([c])['signal'].apply(lambda x: np.percentile(x, 90))\n        d['skew' + c] = df.groupby([c])['signal'].apply(lambda x: pd.Series(x).skew())\n        d['kurtosis' + c] = df.groupby([c])['signal'].apply(lambda x: pd.Series(x).kurtosis())\n        min_max = (d['mean' + c] - d['min' + c]) \/ (d['max' + c] - d['min' + c])\n        d['norm' + c] = min_max * (np.floor(d['max' + c]) - np.ceil(d['min' + c]))\n        d['mean_abs_chg' + c] = df.groupby([c])['signal'].apply(lambda x: np.mean(np.abs(np.diff(x))))\n        d['abs_max' + c] = df.groupby([c])['signal'].apply(lambda x: np.max(np.abs(x)))\n        d['abs_min' + c] = df.groupby([c])['signal'].apply(lambda x: np.min(np.abs(x)))\n        d['range' + c] = d['max' + c] - d['min' + c]\n        d['maxtomin' + c] = d['max' + c] \/ d['min' + c]\n        d['abs_avg' + c] = (d['abs_min' + c] + d['abs_max' + c]) \/ 2\n        # -----------------------------------------------\n        for v in d:\n            df[v] = df[c].map(d[v].to_dict())\n\n    for c in [c1 for c1 in df.columns if c1 not in ['time', 'signal', 'open_channels', 'batch', 'batch_' + str(n), \n                                                    'batch_index_' + str(n), 'batch_slices_' + str(n), \n                                                    'batch_slices2_' + str(n)]]:\n        df[c + '_msignal'] = df[c] - df['signal']\n        \n    df.reset_index(drop = True, inplace = True)\n        \n    return df","9fa834ac":"# simple lgbm with 5 stratified KFold (function has the option for a return for bayesian optimization, just ignore this)\ndef run_lgb(pre_train, pre_test, features, params):\n    \n    kf = StratifiedKFold(n_splits = 5, shuffle = True, random_state = 42)\n    target = 'open_channels'\n    oof_pred = np.zeros(len(pre_train))\n    y_pred = np.zeros(len(pre_test))\n     \n    for fold, (tr_ind, val_ind) in enumerate(kf.split(pre_train, pre_train[target])):\n        x_train, x_val = pre_train[features].iloc[tr_ind], pre_train[features].iloc[val_ind]\n        y_train, y_val = pre_train[target][tr_ind], pre_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 10000, early_stopping_rounds = 50, \n                         valid_sets = [train_set, val_set], verbose_eval = 100)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n        y_pred += model.predict(pre_test[features]) \/ kf.n_splits\n        \n    rmse_score = np.sqrt(metrics.mean_squared_error(pre_train[target], oof_pred))\n    # want to clip and then round predictions (you can get a better performance using optimization to found the best cuts)\n    oof_pred = np.round(np.clip(oof_pred, 0, 10)).astype(int)\n    round_y_pred = np.round(np.clip(y_pred, 0, 10)).astype(int)\n    f1 = metrics.f1_score(pre_train[target], oof_pred, average = 'macro')\n    \n    \n    print(f'Our oof rmse score is {rmse_score}')\n    print(f'Our oof macro f1 score is {f1}')\n    return round_y_pred","1cf0ad56":"# feature engineer part 1 (signal processing features)\ntrain, test, submission = read_data()\n\npre_train4 = divide_and_add_features(train['signal'])\npre_test4 = divide_and_add_features(test['signal'])\n\npre_train4.drop(['signal'], inplace = True, axis = 1)\npre_test4.drop(['signal'], inplace = True, axis = 1)\n\npre_train4.reset_index(inplace = True, drop = True)\npre_test4.reset_index(inplace = True, drop = True)\n\npre_train4 = reduce_mem_usage(pre_train4)\npre_test4 = reduce_mem_usage(pre_test4)\n\n\n# feature engineering part 2 (rolling and aggregate features)\ntrain, test = get_batch(train, test)\npre_train1, pre_test1 = rolling_features(train, test)\npre_train1 = reduce_mem_usage(pre_train1)\npre_test1 = reduce_mem_usage(pre_test1)\npre_train2 = static_batch_features(train, 25000)\npre_train2 = reduce_mem_usage(pre_train2)\npre_test2 = static_batch_features(test, 25000)\npre_test2 = reduce_mem_usage(pre_test2)\n\ndel train, test\ngc.collect()\n\n# join features for training\nfeat2 = [col for col in pre_train2.columns if col not in ['open_channels', 'signal', 'time', 'batch_25000', \n                                                          'batch_index_25000', 'batch_slices_25000', 'batch_slices2_25000']]\npre_train = pd.concat([pre_train1, pre_train2[feat2], pre_train4], axis = 1)\npre_test = pd.concat([pre_test1, pre_test2[feat2], pre_test4], axis = 1)\ndel pre_train1, pre_train2, pre_train4, pre_test1, pre_test2, pre_test4\n\nfeatures = [col for col in pre_train.columns if col not in ['open_channels', 'time', 'batch']]\nprint('Training with {} features'.format(len(features)))\n\n# define hyperparammeter (using bayesian optimization extracted with 151 features)\nparams = {'boosting_type': 'gbdt',\n          'metric': 'rmse',\n          'objective': 'regression',\n          'n_jobs': -1,\n          'seed': 236,\n          'num_leaves': 280,\n          'learning_rate': 0.026623466966581126,\n          'max_depth': 73,\n          'lambda_l1': 2.959759088169741,\n          'lambda_l2': 1.331172832164913,\n          'bagging_fraction': 0.9655406551472153,\n          'bagging_freq': 9,\n          'colsample_bytree': 0.6867118652742716}\n\n# run model and predict\nround_y_pred = run_lgb(pre_train, pre_test, features, params)\nsubmission['open_channels'] = round_y_pred\nsubmission.to_csv('submission.csv', index = False)","9073e2a3":"* Thanks to Chris for his clean dataset\n* Thanks to https:\/\/www.kaggle.com\/martxelo\/fe-and-ensemble-mlp-and-lgbm for signal processing features\n* Thanks to https:\/\/www.kaggle.com\/jazivxt\/physically-possible for aggregate features\n    \nHyperparammeters were obtain from a simple bayesian local optimization (can be improved)\n\nFeature selection can improve score\n\nMore feature engineering can improve score\n\nI hope this kernel help you in your work"}}