{"cell_type":{"4c513021":"code","1ae8b927":"code","866bfda3":"code","4a04efd2":"code","1786cbab":"code","fbb7bb23":"code","5ad3062f":"code","614eee17":"code","9209024c":"code","db7ea656":"code","696dcc2a":"code","2c0d2f26":"code","a9e6060a":"code","bf5fc567":"code","46b56d5e":"code","21da0ab3":"code","f0e553bd":"code","4da4776e":"code","d2082096":"code","5e750720":"code","a25f6d8a":"code","db91d3af":"code","b38e1d86":"code","c413f533":"code","338e8933":"code","3dfd556d":"code","da46f739":"code","e5d6f1c2":"code","de4d7bbd":"code","86a39166":"code","228464b8":"code","4fb72fea":"code","2a8c553c":"code","5698035f":"code","e962ee95":"markdown","f63b3551":"markdown","42c7d9fb":"markdown","a0353dfa":"markdown","3cb0e81c":"markdown","df429eb6":"markdown","04261620":"markdown","ff215516":"markdown","8216f39c":"markdown","17c2d380":"markdown","379bff76":"markdown","ca0e6db1":"markdown","750eb8b5":"markdown","eec014ee":"markdown","bf7adaeb":"markdown","04481051":"markdown","9b750fb4":"markdown","5571dcfb":"markdown","cad28d34":"markdown","e987c810":"markdown","ec60b745":"markdown","e3325f84":"markdown","948ef174":"markdown","2da76d11":"markdown","45a8d9d7":"markdown","24de451e":"markdown","2f0ed6d3":"markdown"},"source":{"4c513021":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ae8b927":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import randint\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport numpy as np\nimport pandas as pd\nimport optuna\nimport os\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","866bfda3":"train= pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf= train\ntrain","4a04efd2":"train.info()","1786cbab":"train.isnull().sum()","fbb7bb23":"train.describe()","5ad3062f":"train","614eee17":"list= ['gender', 'race\/ethnicity', 'parental level of education', 'lunch', 'test preparation course']\nfor col in list:\n    print(col+\":\", train[col].unique())","9209024c":"f = plt.figure(figsize=(25,20))\nf.add_subplot(331)\nsns.histplot(data= train, x= 'math score');\nf.add_subplot(332)\nsns.histplot(data= train, x= 'reading score');\nf.add_subplot(333)\nsns.histplot(data= train, x= 'writing score');","db7ea656":"fig, ax = plt.subplots()\ntrain['gender'].value_counts().plot(ax=ax, kind='bar')","696dcc2a":"f = plt.figure(figsize=(25,20))\nf.add_subplot(331)\nsns.histplot(data= train, x= 'math score', hue= 'gender', multiple= 'stack');\nf.add_subplot(332)\nsns.histplot(data= train, x= 'reading score', hue= 'gender', multiple= 'stack');\nf.add_subplot(333)\nsns.histplot(data= train, x= 'writing score', hue= 'gender', multiple= 'stack');","2c0d2f26":"catigorical_features = ['gender', 'race\/ethnicity', 'parental level of education', 'lunch', 'test preparation course']","a9e6060a":"for col in catigorical_features:\n    print('-'*50)\n    print(f'The column name is: {col}')\n    print(train[col].value_counts())","bf5fc567":"f = plt.figure(figsize=(30,20))\nf.add_subplot(331)\nsns.countplot(x= 'race\/ethnicity', data= train);\nf.add_subplot(332)\nsns.countplot(x= 'gender', data= train);\nf.add_subplot(333)\nsns.countplot(x= 'parental level of education', data= train);\nf.add_subplot(334)\nsns.countplot(x= 'lunch', data= train);\nf.add_subplot(336)\nsns.countplot(x= 'test preparation course', data= train);","46b56d5e":"f = plt.figure(figsize=(30,20))\nf.add_subplot(331)\nsns.countplot(data= train,x='race\/ethnicity',hue= 'gender');\nf.add_subplot(332)\nsns.countplot(data= train,x='lunch',hue= 'gender');\nf.add_subplot(334)\nsns.countplot(data= train,x='test preparation course',hue= 'gender');\nf.add_subplot(335)\nsns.countplot(data= train,x='parental level of education',hue= 'gender');\n","21da0ab3":"f = plt.figure(figsize=(30,20))\nf.add_subplot(331)\nsns.barplot(data= train, x='parental level of education',\n              y='math score',\n              hue= 'gender')\nplt.xticks(rotation= 45);\nf.add_subplot(332)\nsns.barplot(data= train, x='parental level of education',\n              y='reading score',\n              hue= 'gender')\nplt.xticks(rotation= 45);\nf.add_subplot(333)\nsns.barplot(data= train, x='parental level of education',\n              y='writing score',\n              hue= 'gender')\nplt.xticks(rotation= 45);","f0e553bd":"numerical_features=['math score', 'reading score', 'writing score']","4da4776e":"pd.crosstab(train['race\/ethnicity'], train['gender']).T","d2082096":"train.groupby(['race\/ethnicity'])[numerical_features].agg([np.mean]).T","5e750720":"train.groupby(['test preparation course'])[numerical_features].agg([np.mean]).T","a25f6d8a":"train.groupby(['lunch'])[numerical_features].agg([np.mean]).T","db91d3af":"train.groupby(['parental level of education'])[numerical_features].agg([np.mean]).T","b38e1d86":"train.corr()","c413f533":"corr = train.corr()\nf, ax = plt.subplots(figsize=(20, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr,linewidths=.5, annot= True)","338e8933":"sns.pairplot(train[numerical_features]);","3dfd556d":"train['Final Percentage']= ((train['math score']+train['reading score']+train['writing score'])\/3)\n","da46f739":"train['Final Percentage']","e5d6f1c2":"train['Final Percentage'].value_counts(bins=10, sort=False)","de4d7bbd":"train['Final Percentage'].mean()","86a39166":"train['Pass_Final'] = (train['Final Percentage'] > 40).map({True: \"P\",\n                                                     False: \"F\"})\n\ntrain['Pass_Final'].value_counts()","228464b8":"sns.countplot(data=train, x= 'Pass_Final');","4fb72fea":"def getGPA(grade):\n    if grade > 80:\n        return 'A'\n    elif grade> 70:\n        return 'B'\n    elif grade > 60:\n        return 'C'\n    elif grade > 50:\n        return 'D'\n    elif grade > 40:\n        return 'E'\n    else:\n        return 'F' ","2a8c553c":"train['GPA'] = train.apply(lambda df : getGPA(df['Final Percentage']), axis= 1)\ntrain.head()      ","5698035f":"GPA_Order = ['A','B','C','D','E']\nsns.catplot(data= train, x= 'GPA',order= GPA_Order, kind= 'count')\nplt.title('Number Of Students\/GPA')","e962ee95":"# **Multivariate Analysis**","f63b3551":"Checking for correlations between variables: ","42c7d9fb":"We can dedure that reading and writing scores are more correlated with each other math and reading\/writing scores. ","a0353dfa":"# **Univariate Analysis**","3cb0e81c":"Assigning a grade to each student based on the final percentage: ","df429eb6":"We can deduce that the percentage of females is higher at each test score. ","04261620":"Get the mean final percentage of students: ","ff215516":"divide the total grade as categories and then use pairplot \n\/\/ I am not sure I want do this now, might go first for pass\/ fail and then divide into categories. ","8216f39c":"Grade distribution:","17c2d380":"Those who have a standard lunch generally score better.","379bff76":"Calculate the final percentage of each student using the available three test scores: ","ca0e6db1":"# **Feature Engineering**","750eb8b5":"Another way to represent correlation between scores: ","eec014ee":"Students whose parents have a masters degree score higher, but not significantly higher than those whose parents have a bachelor's degree.","bf7adaeb":"We can see that the number of females is slightly higher than males in this dataset. ","04481051":"Examinging the count of each gender in each category: ","9b750fb4":"Multivariate analysis examines two or more variables.","5571dcfb":"group E scores the highest compared to students who belong to other groups.","cad28d34":"Now, we'll do the same for the rest of the features: ","e987c810":"Checking gender count:","ec60b745":"Devide the final percentage into bins to determine a reasonable grade distribution:","e3325f84":"Examining the mean score for each test for every group of race\/ethnicity: ","948ef174":"Another way to examine the count of each gender in each category of race\/ethnicity: ","2da76d11":"Categorizing students into pass\/fail:","45a8d9d7":"Those who complete test preparation course generally do better. ","24de451e":"Examining the score for each gender in each category of parental level of education: ","2f0ed6d3":"Univariate analysis is the simplest form of analyzing data. \u201cUni\u201d means \u201cone\u201d, so in other words your data has only one variable. It doesn\u2019t deal with causes or relationships (unlike regression ) and it\u2019s major purpose is to describe; It takes data, summarizes that data and finds patterns in the data."}}