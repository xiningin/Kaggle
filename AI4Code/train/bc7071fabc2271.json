{"cell_type":{"974be048":"code","edd285d2":"code","430aa101":"code","adba7b07":"code","565cb6b9":"code","548acd63":"code","91ce9832":"code","da51f59a":"code","8010573e":"code","da6b443b":"code","7d4a191a":"code","e957ce64":"code","3c3e8cf4":"code","a6e80d36":"code","420f3c7a":"code","c7ed102f":"markdown"},"source":{"974be048":"from google.colab import drive\ndrive.mount('\/content\/gdrive')","edd285d2":"cd '\/content\/gdrive\/MyDrive\/Colab Notebooks\/ai_contest\/' ","430aa101":"!unzip rawdata.zip","adba7b07":"###########################################################\n# handsign.py\n# Code written by prof. Won-Du Chang @PKNU, Rep. Korea\n# All rights are reserved to the Author. (chang@pknu.ac.kr)\n\nimport numpy as np\nimport os\n\ndef getMaxLen(folderpath_train, folderpath_test):\n    nMaxLen = 0\n    for filename in os.listdir(folderpath_train):\n        filepath = f'{folderpath_train}\/{filename}'\n        d, tmp = load_aSig(filepath)\n        if d.shape[0] > nMaxLen:\n            nMaxLen = d.shape[0]\n\n    for filename in os.listdir(folderpath_test):\n        filepath = f'{folderpath_test}\/{filename}'\n        d, tmp = load_aSig(filepath)\n        if d.shape[0] > nMaxLen:\n            nMaxLen = d.shape[0]\n\n    return nMaxLen\n\ndef load_aSig(filepath):\n    f = open(filepath,'rt')\n    nPoints = int(f.readline())\n    d = np.zeros((nPoints,2))\n    for i in range(nPoints):\n        line = f.readline()\n        toks = line.split(' ')\n        d[i,:] = [int(toks[0]), int(toks[1])]\n    f.close()\n    return d, nPoints\n\ndef load_data(folderpath,nMaxLen, sig_ids):\n    filelist = os.listdir(folderpath)\n    nFiles = len(filelist)\n    d = np.zeros((nFiles,nMaxLen,2))\n    len_sign = np.zeros(nFiles)\n\n    for i in sig_ids:\n        filepath = f'{folderpath}\/{i}.TXT'\n        d_tmp, len_sign[i-sig_ids[0]] = load_aSig(filepath)\n        d[i-sig_ids[0],:d_tmp.shape[0],:] = d_tmp\n    return d, len_sign\n","565cb6b9":"import pandas as pd\nimport numpy as np\n\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras import Sequential\n\nfrom tensorflow.keras.optimizers import Adam","548acd63":"#\ub370\uc774\ud130 \uc77d\uc5b4\uc624\uae30\nfolderpath= '\/content\/gdrive\/MyDrive\/Colab Notebooks\/ai_contest'\n\n#\uac01 \ub370\uc774\ud130\uc758 \uae38\uc774\ub97c \uccb4\ud06c\ud558\uace0 \ucd5c\ub300\uae38\uc774 \ud655\uc778\nn_max_len = get_max_len( f'{folderpath}\/Train', f'{folderpath}\/Test') \n\n#\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 load\nx_train, x_train_len = load_data(f'{folderpath}\/Train', n_max_len, range(800))  \n#\ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130 load \nx_test, x_test_len = load_data(f'{folderpath}\/Test', n_max_len, range(800,1600)) \n\n#\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 \ubcc0\ud658\ny_train_pd = pd.read_csv(f'{folderpath}\/train_info.csv')\ny_train = np.array(y_train_pd['bGenuine'])\ny_train_cat = keras.utils.to_categorical(y_train)","91ce9832":"#\uc815\uaddc\ud654\nfor i in range(x_train.shape[0]): \n  len_tmp = int(x_train_len[i])\n  h_min = np.min(x_train[i,:len_tmp,0])\n  h_max = np.max(x_train[i,:len_tmp,0])\n  v_min = np.min(x_train[i,:len_tmp,1])\n  v_max = np.max(x_train[i,:len_tmp,1])\n\n  w_h_ratio = (v_max - v_min)\/ (h_max - h_min) #\ub108\ube44-\ub192\uc774 \ube44\uc728\n\n  x_train[i,:len_tmp,0] = (x_train[i,:len_tmp,0] - h_min) \/ (h_max - h_min) \n  x_train[i,:len_tmp,1] = (x_train[i,:len_tmp,1] - v_min) \/ (v_max - v_min) * w_h_ratio ","da51f59a":"#\uc815\uaddc\ud654\nfor i in range(x_test.shape[0]): \n  len_tmp = int(x_test_len[i])\n  h_min = np.min(x_test[i,:len_tmp,0])\n  h_max = np.max(x_test[i,:len_tmp,0])\n  v_min = np.min(x_test[i,:len_tmp,1])\n  v_max = np.max(x_test[i,:len_tmp,1])\n\n  w_h_ratio = (v_max - v_min)\/ (h_max - h_min)\n\n  x_test[i,:len_tmp,0] = (x_test[i,:len_tmp,0] - h_min) \/ (h_max - h_min) \n  x_test[i,:len_tmp,1] = (x_test[i,:len_tmp,1] - v_min) \/ (v_max - v_min) * w_h_ratio ","8010573e":"y_pd = pd.read_csv(f'{folderpath}\/train_info.csv')\ny_all = np.array(y_pd['bGenuine'])\ny_train = y_all[:n_train]\ny_train_cat = keras.utils.to_categorical(y_train)\ny_test = y_all[n_train:]","da6b443b":"from tensorflow.keras.layers import *\nfrom tensorflow.keras import Sequential\n\n#\ubaa8\ub378 \uad6c\uc870 \uc9c0\uc815\nmodel = Sequential()\nmodel.add(Conv1D(8, kernel_size=3, padding='same', activation='relu'))\nmodel.add(Conv1D(8, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=3, strides=2))\n\nmodel.add(Conv1D(16, kernel_size=3, padding='same', activation='relu'))\nmodel.add(Conv1D(16, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=3, strides=2, input_dim=2))\n\nmodel.add(Conv1D(32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(Conv1D(32, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling1D(pool_size=3, strides=2, input_dim=2))\n\nmodel.add(Bidirectional(LSTM(128)))\n\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units=2, activation='softmax'))","7d4a191a":"from keras.optimizers import Adam\n#\ubaa8\ub378 \ucef4\ud30c\uc77c\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])\n\n#\ud559\uc2b5\nhist = model.fit(x=x_train, y=y_train_cat,\tepochs=80, validation_split=0.3,batch_size=16)\n","e957ce64":"#\ud14c\uc2a4\ud2b8\no = model.predict(x_test)","3c3e8cf4":"#\uc81c\ucd9c\uc6a9 \ud30c\uc77c \uc791\uc131\no[:,0] = range(800,1600)\no_df = pd.DataFrame(o,columns=['id','predicted'])\no_df['id'] = o_df['id'].astype(int)\no_df.to_csv('output.csv',index=None)\n","a6e80d36":"#\uce90\uae00\uacfc \uc5f0\ub3d9\nfrom google.colab import files\nfiles.upload()\n!mkdir ~\/.kaggle\n!mv kaggle.json ~\/.kaggle\/\n!chmod 600 ~\/.kaggle\/*","420f3c7a":"#\uc81c\ucd9c\n!kaggle competitions submit -c signature-verification-pknu-cs-ai-class -f 'output.csv' -m 'My Name'\n","c7ed102f":"\uad6c\uae00\ub4dc\ub77c\uc774\ube0c\uc5d0 ai_contest \ub77c\ub294 \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0 \ub370\uc774\ud130\ub97c \uc5c5\ub85c\ub4dc\ud55c\ub2e4. \uc5c5\ub85c\ub4dc\ub41c \ub370\uc774\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub85c \ub418\uc5b4 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n\n\/content\/gdrive\/MyDrive\/Colab Notebooks\/ai_contest\/train_info.csv<br>\n\/content\/gdrive\/MyDrive\/Colab Notebooks\/ai_contest\/rawdata.zip"}}