{"cell_type":{"9cbd1e29":"code","c9476573":"code","04df4906":"code","709ff284":"code","48a27afe":"code","e6b5bb6c":"code","c160c81c":"code","717fee77":"code","8a37f3dc":"code","31ef8d8b":"code","d2279c17":"markdown","ab8d9df7":"markdown","0588dbc9":"markdown"},"source":{"9cbd1e29":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping\n\nfrom sklearn.utils import class_weight","c9476573":"df = pd.read_csv('..\/input\/train.csv')","04df4906":"df.describe()","709ff284":"fcol = ['var_' + str(x) for x in range(200)]\nX = df[fcol].values\ny = df['target'].values\nmins = np.min(X, axis=0)\nmaxs = np.max(X, axis=0)\nrng = maxs - mins\nX = 1 - ((maxs - X) \/ rng)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.05, random_state=42)","48a27afe":"#To handle imbalance data\nclass_weights = class_weight.compute_class_weight('balanced',\n                                                 np.unique(y_train),\n                                                 y_train)","e6b5bb6c":"model = Sequential()\nmodel.add(Dense(32, input_dim=X.shape[1], activation='relu'))\nmodel.add(Dense(16, input_dim=X.shape[1], activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])\n\nmodel.fit(\n    X_train, \n    y_train, \n    epochs=150, \n    batch_size=10, \n    callbacks=[EarlyStopping(monitor='acc')],\n    validation_data=(X_val, y_val),\n    class_weight=class_weights\n)","c160c81c":"train_predict = model.predict_proba(X_train)\ntrain_roc = roc_auc_score(y_train, train_predict)\nprint('Train AUC: {}'.format(train_roc))\n\nval_predict = model.predict_proba(X_val)\nval_roc = roc_auc_score(y_val, val_predict)\nprint('Val AUC: {}'.format(val_roc))","717fee77":"test_df = pd.read_csv('..\/input\/test.csv')","8a37f3dc":"X_test = test_df[fcol].values\nX_test = 1 - ((maxs - X_test) \/ rng)","31ef8d8b":"prediction = model.predict_proba(X_test)\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['target'] = prediction\nsubmission.to_csv('submit.csv', index=False)","d2279c17":"The total line of data is only 200k, so maybe it's better to make the neural network shallow one. The SGD optimizer is good for shallow network so I'll be using that.","ab8d9df7":"As you can see the mean of target is 0.1 which means that the class 1 just 10% of the data which makes this data unbalanced.","0588dbc9":"I select all the 200 features and make prediction from it. Since the neural network need a lot of data, I think sample the input to 5% of the test data is enough. Unlike the boosting algorithm, neural network will work better if the input is normalized."}}