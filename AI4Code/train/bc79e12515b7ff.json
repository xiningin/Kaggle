{"cell_type":{"d81d2480":"code","c798623f":"code","0f564992":"code","a30f2a07":"code","68fb2e93":"code","344e7d23":"code","adde281d":"code","f807e319":"code","ae81ee49":"code","eb86f9e9":"code","ed806bad":"code","ffff8380":"code","291d2d1b":"code","c9e2f007":"code","ceeb0076":"code","e30602f7":"code","fe7894af":"code","754f5bfd":"code","389aaebd":"code","02ffca86":"code","1728450e":"code","43585d21":"code","9821fcf6":"code","ae6b8287":"code","7f973406":"code","3fce8777":"code","131ac2df":"code","0022bfec":"code","bd4057ad":"code","6565c4c9":"code","00c423b4":"code","0efc1cca":"code","94c7a025":"code","c94e12b9":"code","38ce216b":"code","21d87a49":"code","3ceb4233":"code","5b55736b":"code","7ef8e2f4":"code","90fa46d3":"code","e2f3eb36":"markdown","a9f0ed40":"markdown","562149ef":"markdown","eb58bd7f":"markdown","4814398d":"markdown"},"source":{"d81d2480":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings \nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\nfrom numpy import set_printoptions\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge","c798623f":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.shape","0f564992":"df.head(5)","a30f2a07":"df.info()","68fb2e93":"df.describe().T","344e7d23":"df_num = df.select_dtypes(exclude = 'object')\ndf_cat = df.select_dtypes(include = 'object')","adde281d":"df_num.isnull().values.any()","f807e319":"df_num.isnull().sum()","ae81ee49":"df_num['LotFrontage'].fillna(df_num['LotFrontage'].mean(), inplace = True)\ndf_num['MasVnrArea'].fillna(df_num['MasVnrArea'].mean(), inplace = True)\ndf_num['GarageYrBlt'].fillna(df_num['GarageYrBlt'].mean(), inplace = True)\n","eb86f9e9":"df_cat.isnull().sum()","ed806bad":"df_cat['Alley'].fillna('NA', inplace = True)\ndf_cat['MasVnrType'].fillna('NA', inplace = True)\ndf_cat['BsmtQual'].fillna('NA', inplace = True)\ndf_cat['BsmtCond'].fillna('NA', inplace = True)\ndf_cat['BsmtExposure'].fillna('NA', inplace = True)\ndf_cat['Electrical'].fillna('SBrkr', inplace = True)\ndf_cat['FireplaceQu'].fillna('NA', inplace = True)\ndf_cat['GarageType'].fillna('NA', inplace = True)\ndf_cat['GarageFinish'].fillna('NA', inplace = True)\ndf_cat['GarageCond'].fillna('NA', inplace = True)\ndf_cat['PoolQC'].fillna('NA', inplace = True)\ndf_cat['Fence'].fillna('NA', inplace = True)\ndf_cat['MiscFeature'].fillna('NA', inplace = True)","ffff8380":"correlation_num = df_num.corr()\ncorrelation_num.sort_values(['SalePrice'], ascending = True, inplace = True)\ncorrelation_num.SalePrice","291d2d1b":"from sklearn.preprocessing import LabelEncoder\n\n\nlabel_cat = df_cat.apply(LabelEncoder().fit_transform)\nlabel_cat['SalePrice'] = df['SalePrice']\n\ncorrelation_cat = label_cat.corr()\ncorrelation_cat.sort_values(['SalePrice'], ascending = True, inplace = True)\ncorrelation_cat.SalePrice","c9e2f007":"fig, axarr = plt.subplots(2, 1, figsize = (14, 18))\ncorrelation_num.SalePrice.plot.bar(ax=axarr[0])\ncorrelation_cat.SalePrice.plot.bar(ax=axarr[1])\naxarr[0].set_title('Correlation_num')\naxarr[1].set_title('Correlation_cat')\nplt.tight_layout()\nplt.show()","ceeb0076":"fig = plt.figure(figsize=[20,10])\n\n# Get Current axis\nax = fig.gca()\n\ndf_num.hist( ax=ax)\nplt.subplots_adjust(hspace=0.5)\nplt.tight_layout()","e30602f7":"fig = plt.figure(figsize = [20,10])\n\nax = fig.gca()\n\nlabel_cat.hist(ax=ax)\nplt.subplots_adjust(hspace= 0.5)\nplt.tight_layout()\n\n","fe7894af":"#Heatmap\n\nmask = np.triu(np.ones_like(correlation_num, dtype=bool))\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(correlation_num, mask=mask, cmap=cmap, vmax=.3, center=0,\nsquare=True, linewidths=.5, cbar_kws={\"shrink\": .5})","754f5bfd":"mask1 = np.triu(np.ones_like(correlation_cat, dtype = bool))\nfig, axes = plt.subplots(figsize = (11,9))\ncmap1 = sns.diverging_palette(230,20, as_cmap = True)\nsns.heatmap(correlation_cat, mask = mask1, cmap = cmap1, vmax = 0.3, center = 0, \n           square = True, linewidth =0.5, cbar_kws = {'shrink': 0.5})","389aaebd":"#JointPlots\n\ny = df_num['SalePrice']\nfeatures = ['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n            'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n            'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n            'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n            'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n            'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n            'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n            'MiscVal', 'MoSold', 'YrSold']\n\nfor i in features:\n    sns.set_style('whitegrid')\n    plt.figure(figsize= (10,10))\n    x = df_num[i]\n    sns.jointplot(x=x, y=y, data = df_num)","02ffca86":"fig, axes = plt.subplots(3, 3, figsize=(18,15))\nsns.boxplot(ax=axes[0, 0], data=label_cat, x='MSZoning', y='SalePrice')\nsns.boxplot(ax=axes[0, 1], data=label_cat, x='SaleType', y='SalePrice')\nsns.boxplot(ax=axes[0, 2], data=label_cat, x='GarageType', y='SalePrice')\nsns.boxplot(ax=axes[1, 0], data=label_cat, x='Foundation', y='SalePrice')\nsns.boxplot(ax=axes[1, 1], data=label_cat, x='KitchenQual', y='SalePrice')\nsns.boxplot(ax=axes[1, 2], data=label_cat, x='GarageFinish', y='SalePrice')\nsns.boxplot(ax=axes[2, 0], data=label_cat, x='ExterQual', y='SalePrice')\nsns.boxplot(ax=axes[2, 1], data=label_cat, x='ExterCond', y='SalePrice')\nsns.boxplot(ax=axes[2, 2], data=label_cat, x='BsmtQual', y='SalePrice')","1728450e":"del df_num['SalePrice']","43585d21":"data = df_num.join(label_cat)\ndata.shape","9821fcf6":"data1 = data.drop(data.index[-1])\ndata1.shape","ae6b8287":"#Normalizing\n\narray = data1.values\n# separate array into input and output components\nX = array[:,0:80]\nY = array[:,80]\nscaler = Normalizer().fit(X)\nX_R = scaler.transform(X)\n# summarize transformed data\nset_printoptions(precision=3)\nprint(X_R[0:5,:5])","7f973406":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.shape","3fce8777":"test_num = test.select_dtypes(exclude = 'object')\ntest_cat = test.select_dtypes(include = 'object')","131ac2df":"test_num.isnull().sum()","0022bfec":"test_num['LotFrontage'].fillna(test_num['LotFrontage'].mean(), inplace = True)\ntest_num['MasVnrArea'].fillna(test_num['MasVnrArea'].mean(), inplace = True)\ntest_num['GarageYrBlt'].fillna(test_num['GarageYrBlt'].mean(), inplace = True)\ntest_num['BsmtFinSF1'].fillna(test_num['BsmtFinSF1'].mean(), inplace = True)\ntest_num['BsmtFinSF2'].fillna(test_num['BsmtFinSF2'].mean(), inplace = True)\ntest_num['BsmtUnfSF'].fillna(test_num['BsmtUnfSF'].mean(), inplace = True)\ntest_num['BsmtFullBath'].fillna(test_num['BsmtFullBath'].mean(), inplace = True)\ntest_num['BsmtHalfBath'].fillna(test_num['BsmtHalfBath'].mean(), inplace = True)\ntest_num['GarageCars'].fillna(test_num['GarageCars'].mean(), inplace = True)\ntest_num['GarageArea'].fillna(test_num['GarageArea'].mean(), inplace = True)\ntest_num['TotalBsmtSF'].fillna(test_num['TotalBsmtSF'].mean(), inplace = True)","bd4057ad":"display(100 - (test_cat.isnull().sum())*100\/len(test_cat))","6565c4c9":"test_cat['Alley'].fillna('NA', inplace = True)\ntest_cat['MSZoning'].fillna('NA', inplace = True)\ntest_cat['Utilities'].fillna('NA', inplace = True)\ntest_cat['Exterior1st'].fillna('NA', inplace = True)\ntest_cat['Exterior1st'].fillna('NA', inplace = True)\ntest_cat['MasVnrType'].fillna('NA', inplace = True)\ntest_cat['BsmtQual'].fillna('NA', inplace = True)\ntest_cat['BsmtCond'].fillna('NA', inplace = True)\ntest_cat['BsmtExposure'].fillna('NA', inplace = True)\ntest_cat['BsmtFinType1'].fillna('NA', inplace = True)\ntest_cat['BsmtFinType2'].fillna('NA', inplace = True)\ntest_cat['KitchenQual'].fillna('SBrkr', inplace = True)\ntest_cat['Functional'].fillna('NA', inplace = True)\ntest_cat['FireplaceQu'].fillna('NA', inplace = True)\ntest_cat['GarageType'].fillna('NA', inplace = True)\ntest_cat['GarageFinish'].fillna('NA', inplace = True)\ntest_cat['GarageQual'].fillna('NA', inplace = True)\ntest_cat['GarageCond'].fillna('NA', inplace = True)\ntest_cat['PoolQC'].fillna('NA', inplace = True)\ntest_cat['Fence'].fillna('NA', inplace = True)\ntest_cat['MiscFeature'].fillna('NA', inplace = True)\ntest_cat['SaleType'].fillna('NA', inplace = True)","00c423b4":"test_label_cat = test_cat.apply(LabelEncoder().fit_transform)","0efc1cca":"test_final = test_num.join(test_label_cat)","94c7a025":"#Normalizing\n\nXtest = test_final.values\nscaler_N = Normalizer().fit(Xtest)\nx_test = scaler_N.transform(Xtest)\n\nset_printoptions(precision = 3)\nprint(x_test[0:5,:5])","c94e12b9":"X_train, X_test, y_train, y_test = train_test_split(X_R, Y ,test_size = 0.4, random_state = 1)","38ce216b":"# Multiple Regression\n\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\n\npredict = model.predict(X_test)\nresults = model.score(X_test,y_test)\nprint(results)\naccuracies = cross_val_score(estimator = model, X = X_test, y = y_test, cv = 10)\nprint((\"Accuracy: %.3f%% \") % (accuracies.mean()*100.0))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\nprint(mean_absolute_error(y_test,predict))\nprint(mean_squared_error(y_test,predict))\nprint(np.sqrt(mean_squared_error(y_test,predict)))","21d87a49":"# Random Forest Regresion\n\nmodel1 = RandomForestRegressor()\nmodel1.fit(X_train,y_train)\n\npredict1 = model1.predict(X_test)\nresults1 = model1.score(X_test,y_test)\nprint(results1)\naccuracies = cross_val_score(estimator = model1, X = X_test, y = y_test, cv = 10)\nprint((\"Accuracy: %.3f%% \") % (accuracies.mean()*100.0))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\nprint(mean_absolute_error(y_test,predict1))\nprint(mean_squared_error(y_test,predict1))\nprint(np.sqrt(mean_squared_error(y_test,predict1)))","3ceb4233":"# Regression model = Lasso\n\nmodel2 = Lasso(alpha =1.0)\nmodel2.fit(X_train,y_train)\n\npredict2 = model2.predict(X_test)\nresults2 = model2.score(X_test,y_test)\nprint(results2)\naccuracies1 = cross_val_score(estimator = model2, X = X_test, y = y_test, cv = 10)\nprint((\"Accuracy: %.3f%% \") % (accuracies1.mean()*100.0))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies1.std()*100))\nprint(mean_absolute_error(y_test,predict2))\nprint(mean_squared_error(y_test,predict2))\nprint(np.sqrt(mean_squared_error(y_test,predict2)))","5b55736b":"# Regression model = Ridge\n\nmodel3 = Ridge(alpha = 1.0)\nmodel3.fit(X_train,y_train)\n\npredict3 = model3.predict(X_test)\nresults3 = model3.score(X_test,y_test)\nprint(results3)\naccuracies3 = cross_val_score(estimator = model3, X = X_test, y = y_test, cv =10)\nprint((\"Accuracy: %.3f%% \") % (accuracies3.mean()*100.0))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies3.std()*100))\nprint(mean_absolute_error(y_test,predict3))\nprint(mean_squared_error(y_test,predict3))\nprint(np.sqrt(mean_squared_error(y_test,predict3)))","7ef8e2f4":"#RandomForestClassifier\n\nModel = RandomForestRegressor()\nModel.fit(X_R,Y)\nPrediction = Model.predict(x_test)","90fa46d3":"Sol = pd.Series(Model.predict(x_test), name=\"SalePrice\")\nID_column = test[\"Id\"]\nresults = pd.concat([ID_column, Sol], axis=1)\nresults.to_csv(\"Solution.csv\",index = False)","e2f3eb36":"## Train Dataset: EDA , Visualization and Preprocessing","a9f0ed40":"## Applying Model on Test data","562149ef":"## Feature Scaling","eb58bd7f":"## Spliting train set in train and test","4814398d":"# Importing Libraries"}}