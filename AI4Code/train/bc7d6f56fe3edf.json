{"cell_type":{"01a4df22":"code","fa26fd6e":"code","74d3f3a2":"code","e78fd3a1":"code","b8990a25":"code","3d829611":"code","f5683ca6":"code","ae61a477":"code","3d567288":"code","2c173aad":"code","5c07d69a":"code","469d5450":"code","75785f5b":"code","630ba23f":"code","182aab97":"code","1334ee51":"code","5ebb76e4":"markdown","3dd2bc4f":"markdown","65b05791":"markdown"},"source":{"01a4df22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa26fd6e":"import pickle\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score","74d3f3a2":"train_data = pd.read_csv('..\/input\/santander-customer-transaction-prediction-dataset\/train.csv')\ntest_data = pd.read_csv('..\/input\/santander-customer-transaction-prediction-dataset\/test.csv')","e78fd3a1":"target = train_data['target'].astype(float)","b8990a25":"train_data.drop(['ID_code', 'target'], axis = 1, inplace=True)\ntest_data.drop(['ID_code'], axis = 1, inplace=True )","3d829611":"data = {}\ndata['data'] = train_data\ndata['target'] = target\nX_train, X_test, y_train, y_test = train_test_split(data['data'], data['target'])","f5683ca6":"gnb = GaussianNB()\ngnb.fit(X_train, y_train)\n\nwith open('gaussianNB.pkl', 'wb') as file:  \n    pickle.dump(gnb, file)\ngnb = pickle.load(open('gaussianNB.pkl', 'rb'))\n\ny_pred =  gnb.predict(X_test)\n\nprint('auc_roc score:', roc_auc_score(y_test, y_pred))","ae61a477":"y_pred =  gnb.predict(test_data)","3d567288":"res = pd.DataFrame(pd.read_csv(\"..\/input\/midterm-23860-kz\/sample_submission.csv\"))\nres['target'] = pd.Series(y_pred,dtype=int)","2c173aad":"y_pred = gnb.predict(test_data)\n\nprint('auc_roc score:', roc_auc_score(data['target'], y_pred))\n\nprint('probability of each class to happen:', gnb.class_prior_)\ngnb","5c07d69a":"from sklearn.svm import SVC\n\nsvc = SVC(kernel='sigmoid', gamma=0.05)\nsvc.fit(X_train, y_train)\n\nwith open('SVC_sigmoid_gamma0.05.pkl', 'wb') as file:  \n    pickle.dump(svc, file)","469d5450":"svc = pickle.load(open('SVC_sigmoid_gamma2.pkl', 'rb'))\ny_pred = svc.predict(test_data)\n\nres = pd.DataFrame(pd.read_csv('cmp_dataset\/sample_submission.csv'))\nres['target'] = pd.Series(y_pred,dtype=int)\n\nres.to_csv('cmp_dataset\/SVC_sigmoid_gamma2_result.csv', index = False, header=True)\n\nprint('auc_roc score:', roc_auc_score(target, y_pred))","75785f5b":"svc.support_vectors_\nsvc.n_support_","630ba23f":"import xgboost as xgb\nfrom sklearn.model_selection import StratifiedKFold\nX_train = data['data']\n\nxgb_result  = np.zeros(X_train.shape[0])\nxgb_result  = np.zeros(X_train.shape[0])\n\npred = np.zeros(target.shape[0])\n\ndf_ids = np.array(X_train.index)    \nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nskf.get_n_splits(data['data'].index, target)\n\nmodel = xgb.XGBClassifier(max_depth=6,\n                              learning_rate=1.5,\n                              objective='binary:logistic', \n                              verbosity =.5,\n                              eval_metric  = 'auc',\n                              n_jobs=-2)\nfor counter, ids in enumerate(skf.split(df_ids, target)):\n  X_fit, y_fit = X_train.values[ids[0]], target.values[ids[0]]\n  X_val, y_val = X_train.values[ids[1]], target.values[ids[1]]\n\n#   model.fit(X_fit, y_fit, eval_set=[(X_val, y_val)], eval_metric ='auc', early_stopping_rounds=5)#, verbose=False)\n  \n  model.fit(X_fit, y_fit, eval_set=[(X_val, y_val)], eval_metric='auc', early_stopping_rounds=12)#, verbose=False)\n\n  xgb_result[ids[1]] += model.predict_proba(X_val)[:, 1]\n  pred += model.predict_proba(test_data.values)[:,1]\/skf.n_splits\n\nwith open('xgboost2_with_crutches.pkl', 'wb') as file:  \n    pickle.dump(model, file)\n","182aab97":"print('auc_roc score:',roc_auc_score(target, pred))\n\nres = pd.DataFrame(pd.read_csv('cmp_dataset\/sample_submission.csv'))\nres['target'] = pd.Series(pred,dtype=int)\nres.to_csv('cmp_dataset\/xgb_result.csv', index = False, header=True)","1334ee51":"with open('xgboost1.pkl', 'wb') as file:  \n    pickle.dump(model, file)\nroc_auc_score(target, xgb_result)","5ebb76e4":"trianing dataset on with svm on sigmoid kernel","3dd2bc4f":"on test data that was given for competition prediction accuracy drops significantly ","65b05791":"## Gaussian NB performs 67 on predicting data it had have learned from "}}