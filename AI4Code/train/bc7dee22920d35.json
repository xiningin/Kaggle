{"cell_type":{"070de4d3":"code","8ca4de25":"code","98c5f330":"code","2f05d71e":"code","9c1df27f":"code","3a77c39a":"code","d6660390":"code","4a5b67dc":"code","f3061e4e":"code","84481e8d":"code","4fb72a67":"code","bcf94e4b":"code","ce08774d":"code","f1ce2eea":"code","0eec7c15":"code","38f6e47d":"code","e42c0324":"code","034d66c9":"code","b7de22fe":"code","ca19d3f9":"code","0a832347":"code","6afe8c72":"code","3429aba3":"code","8c937fad":"code","ccc7e8c3":"code","cac875b9":"code","f283961f":"code","acf58805":"code","2ee826e7":"code","ad64bbac":"code","dc63896e":"code","fdc2c076":"code","c328cc6c":"code","d203be00":"code","918bfae1":"code","e7a48560":"code","13aad8ca":"code","d1bc263a":"code","184e132d":"code","280356b6":"code","7e62b661":"code","3a966061":"code","e6233fe9":"code","7245c96f":"code","a6221915":"code","b92fb6de":"code","de10afdc":"code","a0409368":"code","d649a1e9":"code","d9bf45bb":"code","0d65ed23":"code","28f0b8df":"code","b5c22158":"code","7935cc32":"markdown","3f0b222c":"markdown","a0eec1ab":"markdown","6180b2d9":"markdown","b97ce393":"markdown","9dbcb8f8":"markdown","587922a6":"markdown","4a6e6c88":"markdown","86753185":"markdown","878d2b1f":"markdown","17580d28":"markdown","edd924cd":"markdown","1869011e":"markdown","9eb0b50b":"markdown","b394254e":"markdown","aed69f47":"markdown","427051e8":"markdown","c91fd7d4":"markdown","612da492":"markdown","c721ebde":"markdown","ce222fac":"markdown","a75486aa":"markdown","0961cdb3":"markdown"},"source":{"070de4d3":"\n#\u5bfc\u5165\u3001\u67e5\u770b\u6587\u4ef6\u76ee\u5f55\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8ca4de25":"import pandas as pd \nimport numpy as np\n\nimport seaborn as sns\nsns.set_style(\"dark\")\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom time import time\n\nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","98c5f330":"df_train = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntrain_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_non_scored = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv\")","2f05d71e":"features = df_train\n","9c1df27f":"features.info()","3a77c39a":"#test_features \u524d\u4e94\u884c\u6570\u636e\ndf_train.head()\n","d6660390":"# test\ndf_test.head()","4a5b67dc":"# scored\ntrain_scored.head()","f3061e4e":"# non scored\ntrain_non_scored.head()","84481e8d":"#\u67e5\u770b\u7a7a\u503c\ndf_train.isnull().sum().sum()","4fb72a67":"# check For missing values \ndf_test.isnull().sum().sum()","bcf94e4b":"#\u67e5\u770b\u6574\u4e2a\u8868\u683cMOA\u975e\u96f6\u5360\u6bd4\nscored = train_scored.drop(columns = [\"sig_id\"] , axis = 1)\nprint((scored.to_numpy()).sum()\/(scored.shape[0]*scored.shape[1])*100 , \"%\")","ce08774d":"non_scored = train_non_scored.drop(columns = [\"sig_id\"] , axis = 1)\nprint((non_scored.to_numpy()).sum()\/(non_scored.shape[0]*non_scored.shape[1])*100 , \"%\")","f1ce2eea":"common  = ['sig_id', 'cp_type','cp_time','cp_dose']\ngenes = list(filter(lambda x : \"g-\" in x  , list(features)))\ncells = list(filter(lambda x : \"c-\" in x  , list(features)))\n#\u63d0\u53d6\u57fa\u56e0\u548c\u7ec6\u80de\u5217\u8868","0eec7c15":"plt.figure(figsize=(6,6))\nax = sns.countplot(features[\"cp_type\"] , palette=\"Set2\")\nax.set_title(\"treatment\")\n\n\nplt.show()","38f6e47d":"plt.figure(figsize=(6,6))\nax = sns.countplot(features[\"cp_dose\"] , palette=\"Set2\")\nax.set_title(\"Dose\")\nplt.show()","e42c0324":"plt.figure(figsize=(6,6))\nax = sns.countplot(features[\"cp_time\"] , palette=\"Set2\")\nax.set_title(\"Time\")\nplt.show()","034d66c9":"fig, axs = plt.subplots(ncols=2 , nrows = 2 , figsize=(9, 9))\nsns.distplot(features['g-0'] ,color=\"b\", kde_kws={\"shade\": True}, ax=axs[0][0] )\nsns.distplot(features['g-1'] ,color=\"r\", kde_kws={\"shade\": True}, ax=axs[0][1] )\nsns.distplot(features['g-2'], color=\"g\", kde_kws={\"shade\": True}, ax=axs[1][0] )\nsns.distplot(features['g-3'] ,color=\"y\", kde_kws={\"shade\": True}, ax=axs[1][1] )\nplt.show()","b7de22fe":"# some stats plot for genes\nfig, axs = plt.subplots(ncols=2 , nrows = 2 , figsize=(13,13))\nsns.distplot(features[genes].max(axis =1) ,color=\"b\",hist=False, kde_kws={\"shade\": True}, ax=axs[0][0] ).set(title = 'max')\nsns.distplot(features[genes].min(axis =1) ,color=\"r\",hist=False, kde_kws={\"shade\": True}, ax=axs[0][1] ).set(title = 'min')\nsns.distplot(features[genes].mean(axis =1), color=\"g\",hist=False, kde_kws={\"shade\": True}, ax=axs[1][0] ).set(title = 'mean')\nsns.distplot(features[genes].std(axis =1) ,color=\"y\",hist=False, kde_kws={\"shade\": True}, ax=axs[1][1] ).set(title = 'sd')\nplt.show()","ca19d3f9":"fig, axs = plt.subplots(ncols=2 , nrows = 2 , figsize=(9, 9))\nsns.distplot(features['c-0'] ,color=\"b\", kde_kws={\"shade\": True}, ax=axs[0][0] )\nsns.distplot(features['c-1'] ,color=\"r\", kde_kws={\"shade\": True}, ax=axs[0][1] )\nsns.distplot(features['c-2'], color=\"g\", kde_kws={\"shade\": True}, ax=axs[1][0] )\nsns.distplot(features['c-3'] ,color=\"y\", kde_kws={\"shade\": True}, ax=axs[1][1] )\nplt.show()","0a832347":"fig, axs = plt.subplots(ncols=2 , nrows = 2 , figsize=(13,13))\nsns.distplot(features[cells].max(axis =1) ,color=\"b\",hist=False, kde_kws={\"shade\": True}, ax=axs[0][0] ).set(title = 'max')\nsns.distplot(features[cells].min(axis =1) ,color=\"r\",hist=False, kde_kws={\"shade\": True}, ax=axs[0][1] ).set(title = 'min')\nsns.distplot(features[cells].mean(axis =1), color=\"g\",hist=False, kde_kws={\"shade\": True}, ax=axs[1][0] ).set(title = 'mean')\nsns.distplot(features[cells].std(axis =1) ,color=\"y\",hist=False, kde_kws={\"shade\": True}, ax=axs[1][1] ).set(title = 'sd')\nplt.show()","6afe8c72":"target  = train_scored.drop(['sig_id'] , axis =1)\n\nfig, ax = plt.subplots(figsize=(9,9))\nax = sns.countplot(target.sum(axis =1), palette=\"Set2\")\ntotal = float(len(target))\n\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.4f}%'.format((height\/total)*100),\n            ha=\"center\") \n\nplt.show()","3429aba3":"## counts per target class- \nsns.kdeplot(target.sum() , shade = True , color = \"b\")","8c937fad":"top_targets = pd.Series(target.sum()).sort_values(ascending=False)[:5]\nbottom_targets = pd.Series(target.sum()).sort_values()[:5]\nfig, axs = plt.subplots(figsize=(9,9) , nrows=2)\nsns.barplot(top_targets.values , top_targets.index , ax = axs[0] ).set(title = \"Top five targets\")\nsns.barplot(bottom_targets.values , bottom_targets.index, ax = axs[1] ).set(title = \"bottom five targets\")\nplt.show()","ccc7e8c3":"cols = pd.DataFrame({'value': [1 for i in list(target) ]} , index = [i.split('_')[-1] for i in list(target)] )\ncols_top_5 = cols.groupby(level=0).sum().sort_values(by = 'value' , ascending = False)[:5]","cac875b9":"fig, ax = plt.subplots(figsize=(9,9))\n\nsns.barplot(x = cols_top_5.value , y = cols_top_5.index , palette=\"Set2\" , orient='h')\n\n\nfor p in ax.patches:\n    width = p.get_width()\n    plt.text(8+p.get_width(), p.get_y()+0.55*p.get_height(),\n             '{:1.4f}%'.format((width \/206 )*100), # total 206 columns\n             ha='center', va='center')\n\nplt.show()","f283961f":"print(\"Top five suffixes constitue for about \", list(cols_top_5.sum()\/cols.sum().values)[0]*100 , \"%\")","acf58805":"\ng  = sns.FacetGrid(features, col=\"cp_type\" )\ng.map(sns.countplot , 'cp_time'  )\nplt.show()\n\n# sns.countplot(x = features['cp_time']  )\n","2ee826e7":"g  = sns.FacetGrid(features, col=\"cp_type\" )\ng.map(sns.countplot , 'cp_dose'  )\nplt.show()","ad64bbac":"g  = sns.FacetGrid(features, col=\"cp_dose\" )\ng.map(sns.countplot , 'cp_time'  )\nplt.show()","dc63896e":"# g_mean and  c_mean and g_mean for analysis.\nfeatures['c_mean'] = features[cells].mean(axis =1)\nfeatures['g_mean'] = features[genes].mean(axis =1)\n\n","fdc2c076":"fig, axs = plt.subplots(figsize=(16,16) , nrows=2 , ncols =3)\nplt.subplot(231)\nfor i in features.cp_type.unique():\n    sns.distplot(features[features['cp_type']==i]['g_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"g_mean based on cp_type\")\nplt.legend()\n\nplt.subplot(232)\nfor i in features.cp_time.unique():\n    sns.distplot(features[features['cp_time']==i]['g_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"g_mean based on cp_time\")\nplt.legend()\n\nplt.subplot(233)\nfor i in features.cp_dose.unique():\n    sns.distplot(features[features['cp_dose']==i]['g_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"g_mean based on cp_dose\")\nplt.legend()\n\nplt.subplot(234)\nsns.boxplot( x = features['cp_type'] , y = features['g_mean'] )\nplt.title(f\"g_mean based on cp_type\")\nplt.legend()\n\nplt.subplot(235)\nsns.boxplot( x = features['cp_time'] , y = features['g_mean'] )\nplt.title(f\"g_mean based on cp_time\")\nplt.legend()\n\nplt.subplot(236)\nsns.boxplot( x = features['cp_dose'] , y = features['g_mean'] )\nplt.title(f\"g_mean based on cp_dose\")\nplt.legend()\n\nplt.show()\n\n","c328cc6c":"fig, axs = plt.subplots(figsize=(16,16) , nrows=2 , ncols =3)\nplt.subplot(231)\nfor i in features.cp_type.unique():\n    sns.distplot(features[features['cp_type']==i]['c_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"c_mean based on cp_type\")\nplt.legend()\n\nplt.subplot(232)\nfor i in features.cp_time.unique():\n    sns.distplot(features[features['cp_time']==i]['c_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"c_mean based on cp_time\")\nplt.legend()\n\nplt.subplot(233)\nfor i in features.cp_dose.unique():\n    sns.distplot(features[features['cp_dose']==i]['c_mean'],label=i, hist=False, kde_kws={\"shade\": True})\nplt.title(f\"c_mean based on cp_dose\")\nplt.legend()\n\nplt.subplot(234)\nsns.boxplot( x = features['cp_type'] , y = features['c_mean'] )\nplt.title(f\"c_mean based on cp_type\")\nplt.legend()\n\nplt.subplot(235)\nsns.boxplot( x = features['cp_time'] , y = features['c_mean'] )\nplt.title(f\"c_mean based on cp_time\")\nplt.legend()\n\nplt.subplot(236)\nsns.boxplot( x = features['cp_dose'] , y = features['c_mean'] )\nplt.title(f\"c_mean based on cp_dose\")\nplt.legend()\n\nplt.show()\n\n","d203be00":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\ntrain = df_train.drop(['c_mean', 'g_mean'] , axis=1)\ntrain['type'] = 'train'\ntest = df_test\ntest['type'] = 'test'\nX = train.append(test)\n\n# label encode cp_type , cp_dose and cp_time\n# X = pd.get_dummies(columns = ['cp_type' , 'cp_dose', 'cp_time'], drop_first =True , data = X)\nnumeric_cols = genes+cells\nX[numeric_cols] = StandardScaler().fit_transform(X[numeric_cols])","918bfae1":"pca_genes = PCA(n_components=5)\npca_gene_data = pca_genes.fit_transform(X[genes])\nprincipal_genes = pd.DataFrame(data = pca_gene_data\n             , columns = ['principal component 1', 'principal component 2', 'principal component 3', 'principal component 4', 'principal component 5'])","e7a48560":"principal_genes.head()","13aad8ca":"print('Explained variation per principal component: {}'.format(pca_genes.explained_variance_ratio_))","d1bc263a":"fig,ax = plt.subplots(figsize=(9, 9))\nsns.barplot(x =['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5'], y = pca_genes.explained_variance_ratio_*100  )\nsns.lineplot(x =['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5'], y = pca_genes.explained_variance_ratio_*100, color =\"r\")\nplt.show()","184e132d":"pca_genes = PCA(n_components=2)\npca_gene_data = pca_genes.fit_transform(X[genes])\ninter_pc_gene = pd.DataFrame(data = pca_gene_data\n             , columns = ['PC1', 'PC2'])\nX['PC1_gene'] = inter_pc_gene['PC1']\nX['PC2_gene'] = inter_pc_gene['PC2']","280356b6":"fig, ax = plt.subplots(figsize=(9,16))\nplt.subplot(311)\nsns.scatterplot(\n    x=\"PC1_gene\", y=\"PC2_gene\",\n    hue=\"cp_type\",\n    style = \"cp_type\",\n    data=X,\n    legend=\"full\",\n)\nplt.subplot(312)\nsns.scatterplot(\n    x=\"PC1_gene\", y=\"PC2_gene\",\n    hue=\"cp_time\",\n    style = \"cp_time\",\n    data=X,\n    legend=\"full\",\n)\nplt.subplot(313)\nsns.scatterplot(\n    x=\"PC1_gene\", y=\"PC2_gene\",\n    hue=\"cp_dose\",\n    style = \"cp_dose\",\n    data=X,\n    legend=\"full\",\n)\nplt.show()","7e62b661":"pca_cell = PCA(n_components=5)\npca_cell_data = pca_cell.fit_transform(X[cells])\nprincipal_cell = pd.DataFrame(data = pca_cell_data\n             , columns = ['principal component 1', 'principal component 2', 'principal component 3', 'principal component 4', 'principal component 5'])","3a966061":"principal_cell.head()","e6233fe9":"print('Explained variation per principal component: {}'.format(pca_cell.explained_variance_ratio_))","7245c96f":"fig,ax = plt.subplots(figsize=(9, 9))\nsns.barplot(x =['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5'], y = pca_cell.explained_variance_ratio_*100  )\nsns.lineplot(x =['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5'], y = pca_cell.explained_variance_ratio_*100, color =\"r\")\nplt.show()","a6221915":"pca_cell = PCA(n_components=2)\npca_cell_data = pca_cell.fit_transform(X[cells])\ninter_pc_cell = pd.DataFrame(data = pca_cell_data\n             , columns = ['PC1', 'PC2'])\nX['PC1_cell'] = inter_pc_gene['PC1']\nX['PC2_cell'] = inter_pc_gene['PC2']","b92fb6de":"fig, ax = plt.subplots(figsize=(9,16))\nplt.subplot(311)\nsns.scatterplot(\n    x=\"PC1_cell\", y=\"PC2_cell\",\n    hue=\"cp_type\",\n    style = \"cp_type\",\n    data=X,\n    legend=\"full\",\n)\nplt.subplot(312)\nsns.scatterplot(\n    x=\"PC1_cell\", y=\"PC2_cell\",\n    hue=\"cp_time\",\n    style = \"cp_time\",\n    data=X,\n    legend=\"full\",\n)\nplt.subplot(313)\nsns.scatterplot(\n    x=\"PC1_cell\", y=\"PC2_cell\",\n    hue=\"cp_dose\",\n    style = \"cp_dose\",\n    data=X,\n    legend=\"full\",\n)\nplt.show()","de10afdc":"X = pd.get_dummies(columns = ['cp_type' , 'cp_dose', 'cp_time'], drop_first =True , data = X) # dummification is important here\n","a0409368":"X_train = X[X['type']  == 'train'][['PC1_gene', 'PC2_gene', 'PC1_cell', 'PC2_cell', 'cp_type_trt_cp', 'cp_dose_D2', 'cp_time_48', 'cp_time_72']]\nY_train = target\nX_test = X[X['type']  == 'test'][['PC1_gene', 'PC2_gene', 'PC1_cell', 'PC2_cell', 'cp_type_trt_cp', 'cp_dose_D2', 'cp_time_48', 'cp_time_72']]","d649a1e9":"import xgboost as xgb\nfrom sklearn.datasets import make_multilabel_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.metrics import accuracy_score\n\n\n\nx_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=77)\n\nxgb_estimator = xgb.XGBClassifier(objective='binary:logistic')\n\nmultilabel_model = MultiOutputClassifier(xgb_estimator)\n\nmultilabel_model.fit(x_train, y_train)\n","d9bf45bb":"preds = multilabel_model.predict(x_test)\n# evaluate on test data\nprint('Accuracy on test data: {:.1f}%'.format(accuracy_score(y_test,preds )*100))","0d65ed23":"preds = multilabel_model.predict(X_test)","28f0b8df":"df= pd.DataFrame(preds , columns = list(target) , index =df_test['sig_id']  )","b5c22158":"df.to_csv('submission.csv')","7935cc32":"Max\u4f3c\u4e4e\u96c6\u4e2d\u5728\u53e6\u4e00\u65b9\u9762min\u5927\u90e8\u5206\u96c6\u4e2d\uff0c\u4f46\u5bf9\u4e00\u4e9b\u70b9\u8d1f\u5c3e(-10\u5904)\u4f3c\u4e4e\u4e0a\u5347\u3002\u5728\u5e73\u5747\u503c-10\u9644\u8fd1\u4e5f\u6709\u4e00\u70b9\u78b0\u649e\u3002","3f0b222c":"***Gene vs common vars analysis***","a0eec1ab":"Comparing common variables(cp_type , cp_dose and cp_time)","6180b2d9":"approx 86% varience is explained by PC1 rest are as low as 1% a clear dominance of PC1","b97ce393":"\u57fa\u56e0\u8868\u8fbe\u548c\u7ec6\u80de\u8868\u8fbe\u7279\u5f81","9dbcb8f8":"A big difference. Almost an order of magnitude more sparse than the already sparse scoring targets.","587922a6":"\u5efa\u7acb\u6a21\u578b","4a6e6c88":"as seen in univariate analysis for cells and genes cells have negative tail and genes have a positive tail. \n\nThe distribution on the basis of common vars are simmilar with slight diffrence in negative(extreme) values for cells and positive (extreme) values for genes","86753185":"we can see that D1(low dose) is administed more for 48 hr group the rest looks preety simmilar","878d2b1f":"lets see the distribution of targets based on thier prefixes seprated  by \"_\"","17580d28":"\u4e00\u4e9b\u4f5c\u56fe \u6982\u89c8\u6570\u636e","edd924cd":"\u505a\u4e3b\u6210\u5206\u5206\u6790","1869011e":"PCA for gene columns","9eb0b50b":"\u591a\u6807\u7b7e\u5206\u7c7b\u95ee\u9898\n\u4e94\u4e2a\u6587\u4ef6\uff1a\n\u8bad\u7ec3\u96c6\u4e09\u4e2a\uff08\u7ed3\u679c\u3001\u7279\u5f81\u3001\u9644\u52a0\uff09\n\u6d4b\u8bd5\u96c6\u7279\u5f81\n\u6700\u7ec8\u63d0\u4ea4\u6587\u4ef6","b394254e":"# Bivariate analysis","aed69f47":"***gene features vs common features (cp_type , cp_dose, cp_duration )***","427051e8":"\u51e0\u4e4e\u90fd\u662f0\n","c91fd7d4":"ctrl_vehicle is as expected way less than  trt_cp as expected","612da492":"1. About 39% have no Moa annotations. it was expexcted to be a sparse data and since 40% are completly empty this verifies our assumptions.\n2. For more than 1 MoA annotation, we see a tail that extends down to 7 simultaneous MoAs (for 0.03% of cases)\n3. majority of the cases have single annotation about 52% cases","c721ebde":"**Univariate plots**","ce222fac":"***Maybe these suffixes contain some hidden meaning which could help us treat them in diffrent ways to get better results. There definately a pattern and maybe domain knowledge could help us exploit the above finding***","a75486aa":"Most of the observations are under 200 \n","0961cdb3":"***cell vs common vars analysis***"}}