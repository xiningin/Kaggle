{"cell_type":{"6d24d89f":"code","a2d42f49":"code","aec7f592":"code","f590ca04":"code","f4d6e72c":"code","e3b386e3":"code","102c6233":"code","086f248a":"code","20e9647c":"code","1f53644e":"code","1c46e0e3":"code","56555607":"code","aa2f2840":"code","38738eb2":"code","f9573327":"code","0a6de8c2":"code","c0192aca":"code","852a0812":"code","c7c6b421":"code","09055626":"code","083534af":"code","d929a020":"code","da5c5305":"code","cfe22ac7":"code","621ab41c":"code","bb5d85bb":"code","47e1a1f2":"code","0be1266f":"code","ad172bc3":"code","4d1d2ac2":"code","031f9039":"code","878ddc4a":"code","182f754f":"code","bfcc5868":"code","aa8ac3cc":"code","8273b332":"code","d797a510":"code","0dc51687":"code","43006537":"code","3bd11508":"code","05c502cd":"code","d289096b":"code","5b3e0909":"code","814131bb":"code","c501bbab":"code","00929e52":"code","c4c71981":"code","e7e36925":"code","6b59b376":"code","823aa166":"code","75719149":"code","a25390dc":"code","b177c82c":"code","f0376277":"code","fcb7ed90":"code","8d7a8f0d":"code","fdf55bf8":"code","be7e87e6":"code","350a17db":"code","1177f904":"markdown","0c30beba":"markdown","30f354ed":"markdown","0c0c1493":"markdown","aee1b73f":"markdown","bf4744d6":"markdown","1239b256":"markdown","2a308ce2":"markdown","a2cc2851":"markdown","4a4267f8":"markdown","20e3da46":"markdown","70082454":"markdown","fd168d70":"markdown","186aa0df":"markdown","f0673765":"markdown","7f6dd610":"markdown","231ba495":"markdown","500c7044":"markdown","e335a085":"markdown","88abb4e9":"markdown","a0a1a477":"markdown","79b84b5c":"markdown","25631772":"markdown"},"source":{"6d24d89f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2d42f49":"# import cufflinks as cf\nimport plotly.offline\n# cf.go_offline()\n# cf.set_config_file(offline=False, world_readable=True)\nplotly.offline.init_notebook_mode(connected = True)\n# pd.options.plotting.backend = \"plotly\"\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix, classification_report\nfrom sklearn.metrics import f1_score, hinge_loss, roc_curve, auc\n\nfrom sklearn.preprocessing import label_binarize\nfrom itertools import cycle\n","aec7f592":"# df = pd.read_csv('\/kaggle\/input\/corpus-of-russian-news-articles-from-lenta\/lenta-ru-news.csv')\n# tags = ['\u0424\u0443\u0442\u0431\u043e\u043b','\u0411\u043e\u043a\u0441 \u0438 \u041c\u041c\u0410','\u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b','\u0417\u0438\u043c\u043d\u0438\u0435 \u0432\u0438\u0434\u044b', '\u0425\u043e\u043a\u043a\u0435\u0439', '\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u0444\u0443\u0442\u0431\u043e\u043b']\n# sport = df[(df.tags.isin(tags)) | (df.topic == '\u0421\u043f\u043e\u0440\u0442')]\n# sport.to_csv('sport_news.csv')\n# sport.shape","f590ca04":"df = pd.read_csv(\n                #'\/kaggle\/working\/sport_news.csv', \n                '\/kaggle\/input\/for-sport-ru-news\/sport_news.csv',\n                 index_col=0, parse_dates=['date'])\ndf.reset_index(drop=True, inplace=True)\ndf","f4d6e72c":"(df.tags.value_counts()\/df.shape[0]).plot.bar()","e3b386e3":"def preprocess_url(x):\n    return x.url.split('\/')\n\nurl = df.apply(preprocess_url, axis=1, result_type='expand')\nurl.iloc[0]","102c6233":"url = url[[7]]\nurl","086f248a":"url = url.merge(df.tags, left_index=True, right_index=True)\nurl.to_csv('urt_to_tag.csv')\nurl","20e9647c":"# \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u044d\u0433\u043e\u0432\nurl[7].value_counts().sort_values().reset_index(drop=True).plot()","1f53644e":"(url[7].value_counts() > 33).sum()","1c46e0e3":"from wordcloud import WordCloud\n\nwcs, tags = [], []\nfor tag, gr in url.groupby('tags'):\n    wcs.append(WordCloud(width = 800, height = 800, \n                background_color ='white', colormap='Blues',\n                min_font_size = 10).generate(\" \".join(gr[7].values)))\n    tags.append(tag)\n    \ntags[1] = '\u0410\u043d\u0433\u043b. \u0444\u0443\u0442\u0431\u043e\u043b'","56555607":"import pickle\n\npickle.dump(wcs, open('wcs.pickle', 'wb'), )\npickle.dump(tags, open('tags.pickle', 'wb'), )","aa2f2840":"fig, axes = plt.subplots(4,2, figsize=(15,30))\nfont = {'family': 'IBM Plex Sans',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 60,\n        }\nfor ax, wc, tag in zip(axes.ravel(), wcs, tags):\n#     plt.figure(figsize = (10, 10), facecolor = 'white', edgecolor='blue') \n    ax.imshow(wc) \n    ax.axis(\"off\") \n    ax.set_title(tag, fontdict=font)\n    plt.tight_layout(pad = 0.5) ","38738eb2":"# \u0442\u044d\u0433 khl \u0438 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 - \u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b\ndf[(df.url.str.find('khl') != -1) & (df.tags == '\u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b')].text.iloc[0]","f9573327":"# \u043a\u043b\u0438\u043a\u0430\u0431\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u0443\u0434\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0443\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435\ndf[(df.url.str.find('khl') != -1) & (df.tags == '\u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b')].iloc[0]","0a6de8c2":"to_hockey = ['khl', 'nhl', 'hockey', \n             'ovechkin', 'ovi', 'ove', \n             'malkin', 'tarasenko', 'kovalchuk', 'voynov',\n            'fetisov', 'radulov', 'jagr', 'datsyuk', 'bobrovsky',\n            'bryzgalov', 'znarok', 'markov', 'nabokov', 'anisimov',\n            'yakupov','gagarin', 'gonchar', 'khudobin', 'varlamov',\n            'mutko',]\n\ndf_ch = df.copy()\ndf_ch.tags[(url[7].isin(to_hockey))& ((df_ch.tags != '\u0412\u0441\u0435')|(df_ch.tags != '\u0412\u0441\u0435'))] = '\u0425\u043e\u043a\u043a\u0435\u0439'\n\nurl_ch = df_ch.apply(preprocess_url, axis=1, result_type='expand')\nurl_ch.drop([0,1,2,4,5,6, 8], axis=1, inplace=True)\nurl_ch = url_ch.merge(df_ch.tags, left_index=True, right_index=True)\nurl_ch.to_csv('urt_to_tag_changed.csv')","c0192aca":"wc = WordCloud(width = 800, height = 800, \n                background_color ='white',\n                min_font_size = 10).generate(\" \".join(url_ch[url_ch.tags=='\u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b'][7].values))\nfont = {'family': 'serif',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 16,\n        }\nplt.figure(figsize=(10,10))\nplt.imshow(wc) \nplt.axis(\"off\") \nplt.title('\u041b\u0435\u0442\u043d\u0438\u0435 \u0432\u0438\u0434\u044b', fontdict=font);","852a0812":"import seaborn as sns\n\nt = pd.concat((df.tags.value_counts()\/df.shape[0], df_ch.tags.value_counts()\/df.shape[0])).to_frame()\nt['type'] = 'changed'\nt['type'].iloc[:df.tags.value_counts().shape[0]] = 'ini'\n\nsns.barplot(data=t.reset_index(), x='index', y='tags', hue='type')\nplt.xticks(rotation=45);","c7c6b421":"df.tags.value_counts().to_csv('tags_count.csv', encoding='windows-1251' )","09055626":"df = df[(~df.tags.isna()) & (df.tags != '\u0412\u0441\u0435')]\ndf_ch = df.copy()\ndf_ch.tags[(url[7].isin(to_hockey))& (df_ch.tags != '\u0412\u0441\u0435')&(df_ch.tags != '\u0424\u0443\u0442\u0431\u043e\u043b')] = '\u0425\u043e\u043a\u043a\u0435\u0439'","083534af":"!pip install pymystem3","d929a020":"import nltk\nnltk.download(\"stopwords\")\n\nfrom nltk.corpus import stopwords\nfrom pymystem3 import Mystem\nfrom string import punctuation\nfrom string import digits\n\nmystem = Mystem() \nrussian_stopwords = stopwords.words(\"russian\")\nrussian_stopwords","da5c5305":"def preprocess_text(text):\n    tokens = mystem.lemmatize(text.lower())\n    tokens = ' '.join(tokens).split()\n    tokens = [token for token in tokens\\\n              if token not in russian_stopwords\\\n              and token != \" \" \\\n              and token.strip(' ') not in digits\\\n              and token.strip(' ') not in punctuation]\n    \n    text = \" \".join(tokens)\n    return text","cfe22ac7":"import IPython\ndef display(*dfs):\n    for df in dfs:\n        IPython.display.display(df)","621ab41c":"display(df.iloc[:10].title.apply(preprocess_text), df.iloc[:10].title )","bb5d85bb":"title = df.title.apply(preprocess_text)\ntitle.to_csv('prepocess_title.csv')","47e1a1f2":"# counter = TfidfVectorizer(ngram_range=(1,1))\ncounter = CountVectorizer(ngram_range=(1,1))\ntitle_preproc = counter.fit_transform(title)\nassert title_preproc.shape[0] == df.shape[0]\n\nle = LabelEncoder()\ny = le.fit_transform(df.tags)\nint_to_class = {i: cl for i,cl in enumerate(le.classes_)}\n\nx_train ,x_test, y_train, y_test = train_test_split(title_preproc, y,\n                                                    random_state=2020, stratify=y)","0be1266f":"x_train.shape","ad172bc3":"%%time\nmodel = SGDClassifier(loss='log', random_state=2020, n_jobs=-1, class_weight='balanced',\n                     alpha=1*10e-5)\nmodel.fit(x_train, y_train)","4d1d2ac2":"print(classification_report(y_test, model.predict(x_test)))\nprint(f1_score(y_test, model.predict(x_test), average='macro'))\nplot_confusion_matrix(model, x_test, y_test)","031f9039":"pd.DataFrame(confusion_matrix(y_test, model.predict(x_test))).to_csv('cm_title.csv')","878ddc4a":"# %%time\n# mystem = Mystem() \n# text = df.text.apply(preprocess_text)\n# text.to_csv('text.csv')","182f754f":"text = pd.read_csv('\/kaggle\/input\/for-sport-ru-news\/text.csv', index_col=0)\n\nle = LabelEncoder()\ny = le.fit_transform(df.tags)\nx_train, x_test, y_train, y_test = train_test_split(text.text, y,\n                                                    random_state=2020, stratify=y)\n\ncounter = TfidfVectorizer(ngram_range=(1,1), min_df=3)\nx_train_tf = counter.fit_transform(x_train.values)\nx_test_tf = counter.transform(x_test)\nx_train_tf.shape\n","bfcc5868":"from sklearn.decomposition import SparsePCA, TruncatedSVD\nimport plotly.express as px\n\n\npca = TruncatedSVD(n_components=1000)\npca.fit(x_train_tf)","aa8ac3cc":"pd.Series(pca.explained_variance_ratio_).plot()","8273b332":"pd.Series(pca.explained_variance_ratio_).diff().plot(xlim=(0,50))","d797a510":"pca = TruncatedSVD(n_components=20)\n\nx_pca = pca.fit_transform(x_train_tf)\nx_pca.shape","0dc51687":"to_pca = pd.DataFrame(x_pca).merge(pd.Series(y_train,name='class'), left_index=True, right_index=True)\nto_pca['class'] = to_pca['class'].map(int_to_class)\nto_pca.to_csv('text_pca20.csv')","43006537":"px.scatter_3d(to_pca, x=1, y=0, z=2, color='class', \n              title=f'Total Explained Variance: {pca.explained_variance_ratio_.sum() * 100:.2f}%',\n              labels={'0': 'PC 1', '1': 'PC 2', '2': 'PC 3'},  \n              category_orders={'class': np.sort(to_pca['class'].unique()).tolist()},\n              color_discrete_sequence= px.colors.sequential.Plasma_r\n              )","3bd11508":"from sklearn.model_selection import cross_validate\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier","05c502cd":"%%time\n\nx_train, x_test, y_train, y_test = train_test_split(text.text, y,\n                                                    random_state=2020, stratify=y)\npipeline = Pipeline([('counter', TfidfVectorizer(ngram_range=(1,2), min_df=10)),\n#                     ('pca', TruncatedSVD(n_components=20)),\n                    ('model', SGDClassifier(loss='log', random_state=2020, n_jobs=-1, class_weight='balanced',\n                     alpha=0.5*10e-6))\n#                      ('model', SGDClassifier( random_state=2020, n_jobs=-1, class_weight='balanced',\n#                      alpha=0.5*10e-5))\n#                      ('model', RandomForestClassifier(n_estimators=150, class_weight='balanced', n_jobs=1,\n#                                                       max_depth=10,\n#                                                       min_samples_split=3, #max_features='log2'\n#                                                      ))                     \n                    ])\n\nresults = cross_validate(pipeline, x_train, y_train,\n                    scoring='f1_macro', cv=3,\n                    return_train_score=True, n_jobs=-1)\nresults, results['test_score'].mean(), results['train_score'].mean()","d289096b":"pipeline.fit(x_train, y_train)\npred = pipeline.predict(x_test)\nprint(classification_report(y_test, pred))\nprint(f1_score(y_test, pred, average='macro'))\nplot_confusion_matrix(pipeline, x_test, y_test);","5b3e0909":"int_to_class","814131bb":"cm = pd.DataFrame(confusion_matrix(y_test, pipeline.predict(x_test)))\ncm.columns = cm.columns.map(int_to_class)\ncm.index = cm.index.map(int_to_class)\ncm.to_csv('cm_text.csv')","c501bbab":"pred = pipeline.predict(x_test)\nmiss_class_x = x_test[y_test != pred]\nmiss_class_y = y_test[y_test != pred]\nmiss_class_pred = pred[y_test != pipeline.predict(x_test)]\nidx = y_test != pipeline.predict(x_test)\n\nprediction = pd.concat((df.loc[miss_class_x.index][['title', 'text']].reset_index(drop=True), pd.Series(miss_class_y).map(int_to_class), pd.Series(miss_class_pred).map(int_to_class)), axis=1)\nprediction.rename(columns={0: 'true', 1:'predict'}, inplace=True)\nprediction.to_csv('prediction.csv')","00929e52":"fig = plt.figure(figsize=(10,5))\nfig.suptitle('The probability distribution of main class ')\nax = plt.subplot(121)\npd.Series(pipeline.predict_proba(x_test.loc[idx]).max(axis=1)).plot(kind='hist', bins=20, ax=ax, \n                                                                    title='in miss-classification sample')\n\nax = plt.subplot(122)\npd.Series(pipeline.predict_proba(x_test.loc[~idx]).max(axis=1)).plot(kind='hist', bins=20, ax=ax,\n                                                                    title='in right classification samples')","c4c71981":"pred_miss = pd.Series(pipeline.predict_proba(x_test.loc[idx]).max(axis=1))\npred_right = pd.Series(pipeline.predict_proba(x_test.loc[~idx]).max(axis=1))","e7e36925":"threshold = 0.90\nprint(f'classificate as right in missclassification:\\t {(pred_miss > threshold).sum() \/ pred_miss.shape[0] * 100}')\nprint(f'not sure for right classification:\\t\\t {(pred_right < threshold).sum() \/ pred_right.shape[0] * 100}')","6b59b376":"def highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]","823aa166":"int_to_class","75719149":"i = pd.Series(pred_miss)[(0.80 < pred_miss) ].index\nt = pd.concat((x_test.iloc[idx].iloc[i].reset_index(), \n               pd.DataFrame(pipeline.predict_proba(x_test.iloc[idx].iloc[i])),\n               pd.Series(y_test[idx][i], name='true')), \n         axis=1)\n\nt['pred'] = t.iloc[:, -8:-1].idxmax(1).map(int_to_class)\nt['true'] = t['true'].map(int_to_class)\nt['prob'] = t.iloc[:, -10:-3].max(1)\nt[['text', 'pred', 'true', 'prob']].sort_values('prob', ascending=False).style.format({'text': '{:.200s}'})\n# t.style.apply(highlight_max, subset=[0,1,2,3,4,5,6], axis=1)","a25390dc":"p = pipeline.predict_proba(x_test)\np[p.max(axis=1) < 0.90].shape[0],p[p.max(axis=1) < 0.90].shape[0]\/p.shape[0], p.shape[0] - p[p.max(axis=1) < 0.90].shape[0]","b177c82c":"t = pd.concat((x_test.reset_index(), pd.DataFrame(p), pd.Series(y_test, name='true')), \n              axis=1)\nt['max_prob'] = t.iloc[:, -8:-1].max(1)\nt = t[t.max_prob < 0.90]\nt['pred'] = t.iloc[:, -9:-2].idxmax(1).map(int_to_class)\nt['true'] = t['true'].map(int_to_class)\nt.max_prob.plot(kind='hist', bins=20)\n# t[['text', 'pred', 'true']].style.format({'text': '{:.200s}'})\n# t.style.apply(highlight_max, subset=[0,1,2,3,4,5,6], axis=1)","f0376277":"df_ch = df.copy()\ndf_ch.tags[(url[7].isin(to_hockey))& ((df_ch.tags != '\u0412\u0441\u0435')&(df_ch.tags != '\u0424\u0443\u0442\u0431\u043e\u043b'))] = '\u0425\u043e\u043a\u043a\u0435\u0439'","fcb7ed90":"df_ch.tags.value_counts() - df.tags.value_counts()","8d7a8f0d":"le = LabelEncoder()\ny = le.fit_transform(df_ch.tags)\nx_train, x_test, y_train, y_test = train_test_split(text.text, y,\n                                                    random_state=2020, stratify=y)","fdf55bf8":"%%time\npipeline = Pipeline([('counter', TfidfVectorizer(ngram_range=(1,2), min_df=10)),\n#                     ('pca', TruncatedSVD(n_components=20)),\n                    ('model', SGDClassifier(loss='log', random_state=2020, n_jobs=-1, class_weight='balanced',\n                     alpha=0.1*10e-6))\n#                      ('model', RandomForestClassifier(n_estimators=150, class_weight='balanced', n_jobs=1,\n#                                                       max_depth=10,\n#                                                       min_samples_split=3, #max_features='log2'\n#                                                      ))                     \n                    ])\n\nresults = cross_validate(pipeline, x_train, y_train,\n                    scoring='f1_macro', cv=3,\n                    return_train_score=True, n_jobs=-1)\nresults, results['test_score'].mean(), results['train_score'].mean()","be7e87e6":"pipeline.fit(x_train, y_train)\npred = pipeline.predict(x_test)\nprint(classification_report(y_test, pred))\nprint(f1_score(y_test, pred, average='macro'))\nplot_confusion_matrix(pipeline, x_test, y_test);","350a17db":"int_to_class","1177f904":"\u0414\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0435\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u044b \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438. ","0c30beba":"\u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 - 0.891. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0430 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","30f354ed":"# Preprocessing text and model","0c0c1493":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0442\u044d\u0433\u0438 \u0438\u0437 \u0441\u0441\u044b\u043b\u043e\u043a \u0441 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\u043c\u0438 \u0441\u0442\u0430\u0442\u0435\u0439","aee1b73f":"\u041d\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f (\u0432\u0440\u0435\u043c\u044f \u0443\u0436\u0435 \u0443\u0447\u0442\u0435\u043d\u043e \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445)","bf4744d6":"\u0421\u0443\u0449\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u0445\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043d\u0435\u0442 \u0438 \u0447\u0438\u0441\u0442\u043a\u0430 \u043b\u0435\u0439\u0431\u043b\u043e\u0432 \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430","1239b256":"# With changed data","2a308ce2":"# Import for nlp","a2cc2851":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0442\u044d\u0433\u043e\u0432 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043f\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0430\u0437. \u0418 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 200 \u0442\u044d\u0433\u043e\u0432 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u043e \u0443\u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0435\u043c\u044b\u043c\u0438 \n\n\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0443\u0440\u0435\u043c \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u043f\u043e \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\u043c","4a4267f8":"\u0422\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0411\u043e\u043a\u0441\u0430 \u0438 \u041c\u041c\u0410 \u0438\u043c\u0435\u0435\u0442 \u044f\u0432\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u0432 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0451 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u0441\u043c\u0435\u0448\u0430\u043d\u044b \u0434\u0440\u0443\u0433 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0430 \u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438 ","20e3da46":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0442\u043e\u0435\u043a\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e","70082454":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA, \u0430 \u0437\u0430\u043e\u0434\u043d\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430\u043c","fd168d70":"# Tags - targets","186aa0df":"\u0417\u0430\u0447\u0435\u043d\u0438\u043c \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u0432 \u0440\u0443\u0447\u043d\u0443\u044e -  \u0441\u0442\u0430\u0442\u044c\u0438 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0445\u043e\u043a\u043a\u0435\u0439\u043d\u044b\u043c\u0438 \u0442\u0435\u0433\u0430\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u043e\u0439 \u0425\u043e\u043a\u043a\u0435\u0439","f0673765":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0435\u0448\u043e\u043a \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u0422\u0435\u043c\u0430\u0442\u0438\u043a\u0438 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u0443\u043c. \u0418 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c hold out  \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","7f6dd610":"\u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0438\u0434\u043e\u0432 \u0441\u043f\u043e\u0440\u0442\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u043e\u0432 \u0441\u043f\u043e\u0440\u0442\u0430 \u0438\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0441\u043f\u043e\u0440\u0441\u043c\u0435\u043d\u043e\u0432.\u041d\u043e \u0434\u043b\u044f \u043b\u0435\u0442\u043d\u0438\u0445 \u0432\u0438\u0434\u043e\u043c \u0441\u043f\u043e\u0440\u0442\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f - \u041d\u0425\u041b, \u041a\u0425\u041b, \u041e\u0432\u0435\u0447\u043a\u0438\u043d \u0438\u0442\u0434 (\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0445\u043e\u043a\u043a\u0435\u0439). \u0412\u0438\u0434\u0438\u043c\u043e, \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0441\u0442\u0430\u0442\u0435\u0439 \u043d\u0430 \u0441\u0430\u0439\u0442 \u0431\u044b\u043b\u0438 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0447\u0430\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u0435\u0439, \u0442\u0435\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044f\u0432\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0445\u043e\u043a\u043a\u0435\u044e, \u0431\u044b\u043b\u0438 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u044b \u043f\u043e\u0434 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u043e\u0439 \u043b\u0435\u0442\u043d\u0438\u0445 \u0432\u0438\u0434\u043e\u0432 \u0441\u043f\u043e\u0440\u0442\u0430\n\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0442\u044d\u0433 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0442\u0435\u043a\u0441\u0442\u0430","231ba495":"## URL","500c7044":"# Preprocessing title and model","e335a085":"# Imports","88abb4e9":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u044c\u0435\u0439 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d \u0432 0.8 \u0434\u043b\u044f f1","a0a1a477":"# Missclassification study\n\u0418\u0437\u0443\u0447\u0438\u043c \u043f\u043e \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0448\u0438\u0431\u0430\u0435\u0442\u0441\u044f","79b84b5c":"\u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435","25631772":"\u041f\u0435\u0440\u0432\u044b\u0435 20 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438\u043c\u0435\u044e\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e"}}