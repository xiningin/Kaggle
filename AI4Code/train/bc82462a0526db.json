{"cell_type":{"4b5b4c08":"code","4386f4ab":"code","12a3b903":"code","2a84f6fb":"code","81f9018d":"code","8c4e674a":"code","68a547d3":"code","da23163a":"code","ed865153":"code","64a03c9f":"code","a03b681a":"code","043064be":"code","da9e987b":"code","08bc6e55":"code","e36a9d05":"code","419b2781":"code","90041af5":"code","a3e2bc54":"code","760a6c75":"code","b1e72310":"code","22cc714d":"code","6dcd7a0e":"code","251fec2f":"code","480746a9":"code","0d1002cf":"code","6a5a8933":"code","e3d9f66a":"code","cdad360c":"code","37184785":"code","1b6da986":"code","d6ea4026":"markdown"},"source":{"4b5b4c08":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","4386f4ab":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","12a3b903":"train.head()","2a84f6fb":"test.head()","81f9018d":"train.columns","8c4e674a":"train.describe()\n","68a547d3":"train['SalePrice'].describe()","da23163a":"sns.displot(train['SalePrice'])\nplt.show()","ed865153":"sns.scatterplot(x = 'GrLivArea', y = 'SalePrice', data = train)\nplt.show()\n\n","64a03c9f":"sns.scatterplot(x = 'TotalBsmtSF', y='SalePrice', data = train)\nplt.show()","a03b681a":"# as we can see there are some outliers \n# in TotalBsmtSf in around 6000 and in GrLivArea in around 4000 and 5000 ","043064be":"rain = train.drop(train[(train['TotalBsmtSF']>5000) & (train['SalePrice']<30000)].index)\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","da9e987b":"sns.scatterplot(x = 'GrLivArea', y = 'SalePrice', data = train)\nplt.show()\n","08bc6e55":"sns.scatterplot(x = 'TotalBsmtSF', y='SalePrice', data = train)\nplt.show()","e36a9d05":"## correlation \ncorrelation = train.corr()\nfig, axes = plt.subplots(figsize=(15, 12))\nsns.heatmap(correlation, vmax=.8);","419b2781":"## finding missing values\ntrain.isnull().sum()","90041af5":"train.isnull().sum().sum()","a3e2bc54":"total = train.isnull().sum().sort_values(ascending=False)\npercentage = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percentage], axis=1, keys=['Total', 'Percentage'])\nmissing_data.head(20)","760a6c75":"# as we can see above electrical ,all columns are containing lot of missing data, so we can drop all these columns.\ntrain = train.drop((missing_data[missing_data['Total'] > 1]).index, 1)\ntrain = train.drop(train.loc[train['Electrical'].isnull()].index)\ntrain.isnull().sum().sum()","b1e72310":"train.isnull().sum().sum()","22cc714d":"train = pd.get_dummies(train)\ntrain","6dcd7a0e":"### machine learning models","251fec2f":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, make_scorer, accuracy_score","480746a9":"scaler = StandardScaler()\nX = train.drop('SalePrice', axis=1)\nY = train[['SalePrice']]","0d1002cf":"X_train, X_test, y_train, y_test = train_test_split(X, Y,  test_size=0.2, random_state=42)\n","6a5a8933":"train.info()","e3d9f66a":"import warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn ","cdad360c":"l_r = LinearRegression()\n","37184785":"l_r.fit(X_train, y_train)\ny_train_pred = l_r.predict(X_train)\ny_test_pred = l_r.predict(X_test)\nscorer = make_scorer(mean_squared_error, greater_is_better = False)\nrmse_train = np.sqrt(-cross_val_score(l_r, X_train, y_train, scoring = scorer, cv=10))\nrmse_test = np.sqrt(-cross_val_score(l_r, X_test, y_test, scoring = scorer, cv=10))\nprint ('Mean RMSE for training set is',rmse_train.mean())\nprint ('Mean RMSE for the test set is',rmse_test.mean())\n","1b6da986":"plt.scatter(y_train_pred, y_train, c = \"blue\", marker = \"s\", label = \"Training data\")\nplt.scatter(y_test_pred, y_test, c = \"lightgreen\", marker = \"s\", label = \"Validation data\")\nplt.title(\"Linear regresion\")\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Real values\")\nplt.legend(loc = \"upper left\")\nplt.plot([10.5, 13.5], [10.5, 13.5], c = \"red\")\nplt.show()","d6ea4026":"## sakshi chavan"}}