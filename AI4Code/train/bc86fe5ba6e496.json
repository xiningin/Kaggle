{"cell_type":{"4d33e607":"code","c41943e0":"code","c0c95da2":"code","fccb1f3b":"code","7a7a2d52":"code","a281a284":"code","e34dc129":"code","bd94b302":"code","cab2724c":"code","dca83af7":"code","5daf7b4d":"code","776be162":"code","91c77718":"code","03895bb6":"code","b6213b4b":"code","070d8f34":"markdown"},"source":{"4d33e607":"import tensorflow as tf                       # deep learning library\nimport numpy as np                            # for matrix operations\nimport pandas as pd\nimport matplotlib.pyplot as plt               # for visualization\n%matplotlib inline","c41943e0":"train_data = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","c0c95da2":"train_data.head()","fccb1f3b":"train_data.label.value_counts()","7a7a2d52":"from sklearn.model_selection import train_test_split","a281a284":"X = train_data.drop('label', axis = 1)\ny = train_data.label","e34dc129":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","bd94b302":"model = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, input_shape=(784,), activation='sigmoid')     # The input shape is 784. \n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=10)\n\nmodel.evaluate(X_test, y_test)","cab2724c":"model = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, input_shape=(784,), activation='relu'),\n    tf.keras.layers.Dense(10, activation='sigmoid')\n])\n\n# Compiling the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X_train, y_train, batch_size= 128,epochs=30)\n\nmodel.evaluate(X_test, y_test)","dca83af7":"test_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","5daf7b4d":"test_data.head()","776be162":"test_data.info()","91c77718":"pred = model.predict(test_data)","03895bb6":"predictions = [np.argmax(item) for item in pred]","b6213b4b":"my_submission = pd.DataFrame({'ImageId': test_data.index + 1, 'label': predictions})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","070d8f34":"# Agenda\n*  Loading Libraries\n*  Loading Data\n*  Model Building\n*  Prediction"}}