{"cell_type":{"0cdca7f4":"code","8109ec2d":"code","54e29d82":"code","ee858dbb":"code","2bdfe035":"code","dc1b34b6":"code","0953ee35":"code","d5a9436b":"code","42d4b697":"code","4199cdac":"code","cd75ffc7":"code","67615a3e":"code","5b61bd99":"code","14187342":"code","3ddeeb76":"code","bf5a9525":"code","0b619443":"code","d192342d":"code","a7702106":"code","812d343f":"code","5f62b87d":"markdown"},"source":{"0cdca7f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8109ec2d":"train = pd.read_csv('..\/input\/titanic\/train.csv')","54e29d82":"train.describe","ee858dbb":"train.corr()","2bdfe035":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'SibSp', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Sibsp\")","dc1b34b6":"train.isnull().sum()","0953ee35":"train[\"Age\"].fillna(train[\"Age\"].median(skipna=True), inplace=True)\ntrain[\"Embarked\"].fillna(train['Embarked'].value_counts().idxmax(), inplace=True)","d5a9436b":"train['Alone']=np.where((train['SibSp']+train['Parch'])>0, 0, 1)\ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","42d4b697":"pd.get_dummies(train['Sex'])","4199cdac":"training = pd.get_dummies(train, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntraining","cd75ffc7":"from sklearn.preprocessing import StandardScaler\ntrain_standard = StandardScaler()\ntrain_copied = training.copy()\ntrain_standard.fit(train_copied[['Age','Fare']])\ntrain_std = pd.DataFrame(train_standard.transform(train_copied[['Age','Fare']]))\ntrain_std","67615a3e":"training[['Age','Fare'] ] = train_std\ntraining","5b61bd99":"from sklearn.linear_model import LogisticRegression\ncols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX = training[cols]\ny = training['Survived']\n# Build a logreg and compute the feature importances\nmodel = LogisticRegression()\n# create the RFE model and select 8 attributes\nmodel.fit(X,y)","14187342":"from sklearn.metrics import accuracy_score\ntrain_predicted = model.predict(X)\naccuracy_score(train_predicted, y)","3ddeeb76":"test = pd.read_csv('..\/input\/titanic\/test.csv')","bf5a9525":"test.isnull().sum()","0b619443":"test.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntest[\"Age\"].fillna(28, inplace=True)\ntest[\"Embarked\"].fillna(test['Embarked'].value_counts().idxmax(), inplace=True)\ntest[\"Fare\"].fillna(train.Fare.median(), inplace=True)\ntest['Alone']=np.where((test[\"SibSp\"]+test[\"Parch\"])>0, 0, 1)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntesting=pd.get_dummies(test, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\nprint(testing.dtypes)\ntest_copied = testing.copy()\ntest_std = train_standard.transform(test_copied[['Age','Fare']])\ntest_std\ntesting[['Age','Fare']] = test_std\ntesting","d192342d":"cols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX_test=testing[cols]\nprint(X_test.dtypes)\ntest_predicted = model.predict(X_test)","a7702106":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","812d343f":"sub['Survived'] = list(map(int, test_predicted))\nsub.to_csv('submission.csv', index=False)","5f62b87d":"## \u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\u3059\u308b"}}