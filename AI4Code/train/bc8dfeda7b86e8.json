{"cell_type":{"48d6069c":"code","1d375bd5":"code","b544eba3":"code","b3b41771":"code","19588be8":"code","d89657fa":"code","ee806a47":"code","b2acb0e7":"code","30abe951":"code","77cfe1a4":"code","e076004e":"code","e12b6c65":"code","92e96240":"code","a837249b":"code","4deae3c3":"code","a0b73564":"code","da1e8ed7":"code","bffb6523":"code","52caccac":"code","18d08eac":"code","3e81a2bf":"code","974a2803":"markdown","7039a0ec":"markdown","3baa9e9b":"markdown","850a6835":"markdown","915228b9":"markdown","cecc4ad5":"markdown","20852fcf":"markdown","0506daae":"markdown","f44fa922":"markdown","fefbf5fa":"markdown","bc483359":"markdown","3b41c04b":"markdown","e0f84356":"markdown","c4fbc5bb":"markdown","33615c5b":"markdown"},"source":{"48d6069c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1d375bd5":"df_red_wine = pd.read_csv('..\/input\/winequality-red.csv', sep=',')\ndf_white_wine = pd.read_csv('..\/input\/winequality-white.csv', sep=',')","b544eba3":"df_red_wine.head()","b3b41771":"df_white_wine.head()","19588be8":"df_red_wine.info()\ndf_white_wine.info()","d89657fa":"#df = df_red_wine\ndf = pd.concat([df_red_wine, df_white_wine], ignore_index=True)\ndf.plot(kind='box', fontsize = 10, figsize= (20, 10), subplots = True)\nplt.show()\ndf['quality'].plot(kind='hist', fontsize = 20, figsize= (20,10))\nplt.xlabel('Quality', fontsize=20)\nplt.ylabel('Frequency', fontsize=20)\nplt.show()\ndf.quality.unique()","ee806a47":"#Splitting Data\ndf_quality_3 = df[df['quality'] == 3]\ndf_quality_4 = df[df['quality'] == 4]\ndf_quality_5 = df[df['quality'] == 5]\ndf_quality_6 = df[df['quality'] == 6]\ndf_quality_7 = df[df['quality'] == 7]\ndf_quality_8 = df[df['quality'] == 8]\ndf_quality_9 = df[df['quality'] == 9]\n\n#Under sampling quality 5 & 6 to quality 7\ndf_sample_5 = df_quality_5.sample(300)\ndf_sample_6 = df_quality_6.sample(300)\ndf_sample_7 = df_quality_7.sample(300)\ndf = pd.concat([df_quality_3, df_quality_4, df_sample_5, df_sample_6, df_sample_7, df_quality_8, df_quality_9], ignore_index=True)\n\ndf['quality'].plot(kind='hist', fontsize = 20, figsize= (20,10))\nplt.xlabel('Quality', fontsize=20)\nplt.ylabel('Frequency', fontsize=20)\nplt.show()\n","b2acb0e7":"df.quality.replace((3, 4, 5, 6, 7, 8, 9), (0, 0, 0, 0, 1, 1, 1), inplace=True)\ndf['quality'].plot(kind='hist', fontsize = 20, figsize= (20,10))\nplt.xlabel('Quality', fontsize=20)\nplt.ylabel('Frequency', fontsize=20)\nplt.show()","30abe951":"measurements = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']","77cfe1a4":"for measurement in measurements:\n    df[measurement].plot(kind='hist', bins=50, fontsize = 20, figsize= (20, 10), edgecolor='black', linewidth=1.2)\n    plt.xlabel(measurement, fontsize=20)\n    plt.ylabel('Frequency', fontsize=20)\n    plt.show()","e076004e":"df_translated=pd.DataFrame()\n\nfor measurement in measurements:\n    df_translated[measurement] = df[measurement].apply(lambda x: x+1-(df[measurement].min()))\n\ndf_translated.head()\n","e12b6c65":"from scipy import stats\ndf_translated_normalized = pd.DataFrame()\nfor measurement in measurements:\n    df_translated_normalized[measurement] = stats.boxcox(df_translated[measurement])[0]\n    df_translated_normalized[measurement].plot(kind='hist', bins=50, fontsize = 20, figsize= (20, 10), edgecolor='black', linewidth=1.2)\n    plt.xlabel(measurement, fontsize=20)\n    plt.ylabel('Frequency', fontsize=20)\n    plt.show()","92e96240":"df_translated_normalized['quality'] = df['quality']\ngrouped = df_translated_normalized.groupby('quality')[measurements].mean()\ngrouped","a837249b":"for measurement in measurements:\n    plt.bar(grouped.index, grouped[measurement])\n    plt.xlabel(grouped.index.name)\n    plt.ylabel(measurement)\n    plt.show()","4deae3c3":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","a0b73564":"X = df_translated_normalized[measurements].values\ny = df_translated_normalized['quality'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n","da1e8ed7":"k = np.arange(1,30)\nparams_neighbors = {'knn__n_neighbors' : k}\n\nsteps = [('scaler', StandardScaler()),\n        ('knn', KNeighborsClassifier())]\npipeline = Pipeline(steps)\n\n\ncv_knn = GridSearchCV(pipeline, param_grid=params_neighbors, cv=5)\ncv_knn.fit(X_train, y_train)\nprint(\"Tuned k neighbors {}\".format(cv_knn.best_params_))\nprint(\"Highest score {}\".format(cv_knn.best_score_))","bffb6523":"c_space= np.logspace(-5, 8, 15)\nparam_C = {'logreg__C': c_space}\n\nsteps = [('scaler', StandardScaler()),\n        ('logreg', LogisticRegression())]\npipeline = Pipeline(steps)\n\n\ncv_logreg = GridSearchCV(pipeline, param_grid=param_C, cv=5)\n\ncv_logreg.fit(X_train, y_train)\n\nprint(\"Tuned C parameter {}\".format(cv_logreg.best_params_))\nprint(\"Highest score {}\".format(cv_logreg.best_score_))","52caccac":"maxdepth_space = np.arange(1, 10, 1)\nparam_maxdepth = {'DTreeReg__max_depth': maxdepth_space}\n\nsteps = [('scaler', StandardScaler()),\n        ('DTreeReg', DecisionTreeRegressor())]\npipeline = Pipeline(steps)\npipeline.get_params().keys()\ncv_DecTree = GridSearchCV(pipeline, param_grid=param_maxdepth, cv=5)\n\ncv_DecTree.fit(X_train, y_train)\n\nprint(\"Tuned C parameter {}\".format(cv_DecTree.best_params_))\nprint(\"Highest score {}\".format(cv_DecTree.best_score_))","18d08eac":"knn_tuned = KNeighborsClassifier(n_neighbors = 1)\nlogreg_tuned = LogisticRegression(C=31.6)","3e81a2bf":"knn_tuned.fit(X_train, y_train)\nknn_tuned.predict(X_test)\nknn_tuned.score(X_test, y_test)","974a2803":"- Translating Data to offset zero\/negative values","7039a0ec":"- KNN Hyperparameter tuning","3baa9e9b":"# Importing Libraries","850a6835":"- No missing data below","915228b9":"- Defining features & target and splitting data","cecc4ad5":"- Grouping data by quality and getting means for all columns\n- plotting the mean of each feature against quality to check if there are any positive or negative correlations","20852fcf":"- Importing libraries","0506daae":"- Logistic Regression hyperparameter tuning","f44fa922":"- Checking data distribution","fefbf5fa":"- Decision Trees hyperparameter tuning","bc483359":"# Running ML Algorithms","3b41c04b":"# Data Exploration:\n\n- There seems to be a lot of outliers in all feautres.\n- quality seems imbalanced","e0f84356":"- Classify quality to be 0 for bad and 1 for high","c4fbc5bb":"- undersampling imbalanced data","33615c5b":"- Normalizing data with boxcox"}}