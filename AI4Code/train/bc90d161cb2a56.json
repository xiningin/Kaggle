{"cell_type":{"a9529acc":"code","a1f62b7e":"code","7114a88a":"code","03ae279c":"code","3059d076":"code","330ea04f":"code","9c6218ec":"code","cd8797f9":"code","3c98f43c":"code","e9d67b65":"code","0ba5a415":"code","b09bd339":"code","9d6b252f":"code","f3428038":"code","32322e22":"code","2addea24":"code","d6a490eb":"code","9a39700c":"code","c0393531":"code","c3349e00":"code","46778dc4":"code","f1850189":"code","524e320d":"code","d15693f6":"code","d41c824b":"code","96ad30ad":"code","ed68f998":"code","e1dc7266":"code","4661bd22":"code","8b02c921":"code","b88dab26":"code","d6cfb370":"code","e64ad569":"code","7b2eaf66":"markdown","cbc991c9":"markdown","f7b86209":"markdown","5bbaa863":"markdown","032f105c":"markdown","63eb6507":"markdown","36ace59e":"markdown","911bcb3a":"markdown","1ae846aa":"markdown","278ae8bf":"markdown","13881423":"markdown","8c1e1837":"markdown","2cde043b":"markdown","7b5405b1":"markdown"},"source":{"a9529acc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1f62b7e":"# !pip install bcolz","7114a88a":"# import bcolz\nimport csv\nimport torch\nimport transformers\nimport sys\nimport os\nimport pickle\nimport spacy\nimport seaborn as sns\nimport textblob\nimport string\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\n\n\nimport matplotlib.pyplot as plt\n\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tokenize import sent_tokenize\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import fbeta_score, make_scorer\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom sklearn import linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn import decomposition, ensemble\nimport sklearn\nfrom sklearn.model_selection import train_test_split","03ae279c":"TFIDF_MAX_FEATURES = 5000\nGLOVE_DIMENSIONS = 100\nGLOVE_INPUT_PATH = \"..\/input\/glove6b\"\nGLOVE_OUTPUT_PATH = \".\/glove6b\"\nGLOVE_VERSION = \"glove.6B.100d\"","3059d076":"if not os.path.exists(\"glove6b\"):\n    os.makedirs(\"glove6b\")","330ea04f":"full_dataset_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\")","9c6218ec":"full_dataset_df.info()","cd8797f9":"full_dataset_df.head()","3c98f43c":"full_dataset_df[\"tokenized_excerpt\"] = full_dataset_df[\"excerpt\"].apply(lambda x: word_tokenize(x))\nfull_dataset_df[\"sentences_in_excerpt\"] = full_dataset_df[\"excerpt\"].apply(lambda x: sent_tokenize(x))\n\ntest_df[\"tokenized_excerpt\"] = test_df[\"excerpt\"].apply(lambda x: word_tokenize(x))\ntest_df[\"sentences_in_excerpt\"] = test_df[\"excerpt\"].apply(lambda x: sent_tokenize(x))","e9d67b65":"sns.set_style('darkgrid')\nsns.displot(full_dataset_df[\"target\"])","0ba5a415":"sns.displot(full_dataset_df[\"standard_error\"])","b09bd339":"sns.displot(np.array([len(x) for x in full_dataset_df[\"tokenized_excerpt\"]]))","9d6b252f":"# Temporarily disabled - train \/ test split will be moved to later stages\n# I will not introduce the split right now, in favour of K-folds later\n# training_dataset, validation_dataset = train_test_split(train_df, test_size=0.25, train_size=0.75)","f3428038":"count_vectorizer = CountVectorizer(analyzer='word')\n\ndef generate_count_vectors(dataset):\n    count_vectorizer.fit(dataset['excerpt'])\n    count_vectors =  count_vectorizer.transform(dataset[\"excerpt\"])\n    return count_vectors\n\ndef generate_count_df(dataset, count_vectors):\n    return pd.DataFrame(count_vectors.toarray(), index=dataset['id'].values, columns=count_vectorizer.get_feature_names())","32322e22":"class TFIDF_settings:    \n    class word_level:\n        max_features = TFIDF_MAX_FEATURES\n        analyzer = \"word\"\n        ngram_range = (1,1)\n    \n    class ngram_level:\n        max_features = TFIDF_MAX_FEATURES\n        analyzer = \"word\"\n        ngram_range = (2,3)\n    \n    class character_level:\n        max_features = TFIDF_MAX_FEATURES\n        analyzer = \"char\"\n        ngram_range = (2,3)\n\n        \ndef generate_tfidf_vectors(dataset, settings):\n    tfidf_vectorizer = TfidfVectorizer(analyzer=settings.analyzer, ngram_range=settings.ngram_range, max_features=settings.max_features)\n    tfidf_vectorizer.fit(dataset['excerpt'])\n    dataset_tfidf =  tfidf_vectorizer.transform(dataset[\"excerpt\"])\n    return dataset_tfidf","2addea24":"tfidf_vectors_word_level = generate_tfidf_vectors(dataset=full_dataset_df, settings=TFIDF_settings.word_level)\ntfidf_vectors_ngram_level = generate_tfidf_vectors(dataset=full_dataset_df, settings=TFIDF_settings.ngram_level)\ntfidf_vectors_character_level = generate_tfidf_vectors(dataset=full_dataset_df, settings=TFIDF_settings.character_level)","d6a490eb":"# if not ( os.path.exists(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}.dat') and os.path.exists(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_words.pkl') and os.path.exists(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_idx.pkl') ):\n#     embedding_dict={}\n#     with open(f'{GLOVE_INPUT_PATH}\/{GLOVE_VERSION}.txt','r', encoding='utf8') as f:\n#         for line in f:\n#             values=line.split()\n#             word=values[0]\n#             vectors=np.asarray(values[1:],'float32')\n#             embedding_dict[word]=vectors\n#     f.close()\n\n#     words = []\n#     idx = 0\n#     word2idx = {}\n#     vectors = bcolz.carray(np.zeros(1), rootdir=f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}.dat', mode='w')\n\n#     with open(f'{GLOVE_INPUT_PATH}\/{GLOVE_VERSION}.txt', 'rb') as f:\n#         for l in f:\n#             line = l.decode().split()\n#             word = line[0]\n#             words.append(word)\n#             word2idx[word] = idx\n#             idx += 1\n#             vect = np.array(line[1:]).astype(np.float)\n#             vectors.append(vect)\n\n#     vectors = bcolz.carray(vectors[1:].reshape((400000, GLOVE_DIMENSIONS)), rootdir=f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}.dat', mode='w')\n#     vectors.flush()\n#     pickle.dump(words, open(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_words.pkl', 'wb'))\n#     pickle.dump(word2idx, open(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_idx.pkl', 'wb'))\n    \n# else:\n#     vectors = bcolz.open(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}.dat')[:]\n#     words = pickle.load(open(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_words.pkl', 'rb'))\n#     word2idx = pickle.load(open(f'{GLOVE_OUTPUT_PATH}\/{GLOVE_VERSION}_idx.pkl', 'rb'))\n    \n# glove = {w: vectors[word2idx[w]] for w in words}","9a39700c":"# TODO ","c0393531":"def add_experimental_features(dataset):\n    dataset['char_count'] = dataset['excerpt'].apply(len)\n    dataset['word_count'] = dataset['excerpt'].apply(lambda x: len(x.split()))\n    dataset['word_density'] = dataset['char_count'] \/ (dataset['word_count']+1)\n    dataset['sentence_count'] = dataset['sentences_in_excerpt'].apply(len)\n    dataset['sentence_average_lenght'] = dataset['char_count'] \/ (dataset['sentence_count']+1)    \n    dataset['punctuation_count'] = dataset['excerpt'].apply(lambda x: len(\"\".join(_ for _ in x if _ in string.punctuation))) \n    dataset['title_word_count'] = dataset['excerpt'].apply(lambda x: len([wrd for wrd in x.split() if wrd.istitle()]))\n    dataset['upper_case_word_count'] = dataset['excerpt'].apply(lambda x: len([wrd for wrd in x.split() if wrd.isupper()]))\n    \n    pos_family = {\n        'noun' : ['NN','NNS','NNP','NNPS'],\n        'pron' : ['PRP','PRP$','WP','WP$'],\n        'verb' : ['VB','VBD','VBG','VBN','VBP','VBZ'],\n        'adj' :  ['JJ','JJR','JJS'],\n        'adv' : ['RB','RBR','RBS','WRB']\n    }\n\n    # function to check and get the part of speech tag count of a words in a given sentence\n    def check_pos_tag(x, flag):\n        cnt = 0\n        try:\n            wiki = textblob.TextBlob(x)\n            for tup in wiki.tags:\n                ppo = list(tup)[1]\n                if ppo in pos_family[flag]:\n                    cnt += 1\n        except:\n            pass\n        return cnt\n\n    dataset['noun_count'] = dataset['excerpt'].apply(lambda x: check_pos_tag(x, 'noun'))\n    dataset['verb_count'] = dataset['excerpt'].apply(lambda x: check_pos_tag(x, 'verb'))\n    dataset['adj_count'] = dataset['excerpt'].apply(lambda x: check_pos_tag(x, 'adj'))\n    dataset['adv_count'] = dataset['excerpt'].apply(lambda x: check_pos_tag(x, 'adv'))\n    dataset['pron_count'] = dataset['excerpt'].apply(lambda x: check_pos_tag(x, 'pron'))\n    \n    return dataset\n    \nfull_dataset_df = add_experimental_features(full_dataset_df)","c3349e00":"test_df = add_experimental_features(test_df)","46778dc4":"full_dataset_df","f1850189":"# choose columns\ntraining_dataset_X = full_dataset_df.loc[:,['char_count', 'word_count', 'word_density',\n       'punctuation_count', 'title_word_count', 'upper_case_word_count',\n       'noun_count', 'verb_count', 'adj_count', 'adv_count', 'pron_count',\n       'sentence_count', 'sentence_average_lenght']]\ntraining_dataset_Y = full_dataset_df.loc[:,['target']]\ntest_dataset_X = test_df.loc[:,['char_count', 'word_count', 'word_density',\n       'punctuation_count', 'title_word_count', 'upper_case_word_count',\n       'noun_count', 'verb_count', 'adj_count', 'adv_count', 'pron_count',\n       'sentence_count', 'sentence_average_lenght']]\n\ntraining_dataset_X = training_dataset_X.set_index(full_dataset_df[\"id\"])\ntraining_dataset_Y = training_dataset_Y.set_index(full_dataset_df[\"id\"])\ntest_dataset_X = test_dataset_X.set_index(test_df[\"id\"])\n","524e320d":"# Shouldn't I use a different scaler?\nmin_max_scaler_X = MinMaxScaler()\nmin_max_scaler_Y = MinMaxScaler()\n\ntraining_dataset_X_scaled = min_max_scaler_X.fit_transform(training_dataset_X)\ntraining_dataset_Y_scaled = min_max_scaler_Y.fit_transform(training_dataset_Y)\n\ntest_dataset_X_scaled = min_max_scaler_X.transform(test_dataset_X)\n\n# min_max_scaler_Y.fit(training_dataset.loc[:,\"target\"].to_numpy().reshape(-1,1))","d15693f6":"training_dataset_X_scaled = pd.DataFrame(training_dataset_X_scaled, index=full_dataset_df[\"id\"], columns=training_dataset_X.columns)\ntest_dataset_X_scaled = pd.DataFrame(test_dataset_X_scaled, index=test_df[\"id\"], columns=test_dataset_X.columns)","d41c824b":"def tune_hyperparameters(model, X, y, hyperparameters_grid):\n    clf = GridSearchCV(model, hyperparameters_grid)\n    clf.fit(X, y)\n    return clf","96ad30ad":"parameters = {'alpha': np.linspace(0, 4, 80), 'max_iter' : np.arange(500,2500,200)}\n# parameters_SGD = {'max_iter': np.arangenge(200,2000,200), 'early_stopping'=True}\n\nlasso_clf = tune_hyperparameters(linear_model.Lasso(), training_dataset_X_scaled, training_dataset_Y_scaled, parameters) \nridge_clf = tune_hyperparameters(linear_model.Ridge(), training_dataset_X_scaled, training_dataset_Y_scaled, parameters) ","ed68f998":"parameters_elastic = {\"alpha\" : np.linspace(0, 5, 50)}\n\nelastic_clf = tune_hyperparameters(linear_model.LassoLars(), training_dataset_X_scaled, training_dataset_Y_scaled, parameters_elastic) ","e1dc7266":"for clf in [ridge_clf, lasso_clf, elastic_clf]:\n    print(clf.best_estimator_)\n    print(clf.best_score_)","4661bd22":"# prepare models\nmodels = []\nmodels.append((\"Linear\", linear_model.LinearRegression()))\nmodels.append((\"Lasso\", linear_model.Lasso(alpha=0)))\nmodels.append(('Ridge', linear_model.Ridge(alpha=0.759)))\nmodels.append(('SGD', linear_model.SGDRegressor(max_iter=1000, tol=1e-3)))\nmodels.append((\"ElasticNet\", linear_model.LassoLars(alpha=0)))\n\nrmse_scorer = make_scorer(mean_squared_error)\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10)\n    cv_results = model_selection.cross_val_score(model, training_dataset_X_scaled, training_dataset_Y_scaled.ravel(), cv=kfold, scoring=rmse_scorer)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n\n    # boxplot algorithm comparison\n    \nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","8b02c921":"X_train, X_test, y_train, y_test = train_test_split(training_dataset_X_scaled, training_dataset_Y_scaled, test_size=0.25)    ","b88dab26":"def validate_model(model):\n    model.fit(X_train, y_train)\n    prediction = model.predict(X_test)\n    denormalized_prediction = min_max_scaler_Y.inverse_transform(prediction)\n    denormalized_y = min_max_scaler_Y.inverse_transform(y_test)\n    return mean_squared_error(denormalized_prediction, denormalized_y)","d6cfb370":"# linear\nlin_result = validate_model(linear_model.LinearRegression())\n\n# ridge \nridge_result = validate_model(linear_model.Ridge(alpha=0.759, max_iter=500))\n\n# lasso\n# lasso_result = validate_model(linear_model.Lasso())\n\nprint(lin_result,\n     ridge_result)","e64ad569":"submission_model = linear_model.Ridge(alpha=0.759, max_iter=500)\nsubmission_model.fit(training_dataset_X_scaled, training_dataset_Y_scaled)\n\npredictions = submission_model.predict(test_dataset_X_scaled)\ndenormalized_prediction = min_max_scaler_Y.inverse_transform(predictions)\n\nmy_submission = pd.DataFrame({'id': test_df.id.to_numpy(), 'target': denormalized_prediction.flatten()})\nmy_submission.to_csv('submission.csv', index=False)","7b2eaf66":"## Choose columns that will be used","cbc991c9":"# Models","f7b86209":"### Count vectorization","5bbaa863":"# Prepare the dataset","032f105c":"## Choose ridge regression","63eb6507":"## Normalization","36ace59e":"## Tune the hyperparameters","911bcb3a":"Also, I will add a number of experimental features. I hypothesize that proportions of parts of speech, word density etc. may be indicative of text's readability and complexity. ","1ae846aa":"### TF-IDF Vectorization","278ae8bf":"### Word embeddings - GloVe","13881423":"I create an embedding for every paragraph by averaging all of its embeddings. I am not sure whether that's correct, but my hopes are that those embeddings will be usable in simpler, non-NN ML methods. ","8c1e1837":"## Compare the models","2cde043b":"# Data exploration","7b5405b1":"Establish a baseline with Linear Regression methods"}}