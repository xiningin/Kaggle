{"cell_type":{"18e20efe":"code","694ff2a7":"code","d580ebaa":"code","2c21962f":"code","72da7b7a":"code","d63261ba":"code","9ed66011":"code","cd94bd0a":"code","cd300a5d":"code","e0315d52":"code","43dc95aa":"code","b216e7ad":"code","89f4e5ec":"code","bce9affd":"code","93142d43":"code","29400f5e":"code","2fbf3284":"code","061b0f11":"code","274ec109":"code","24529d45":"code","3becf743":"code","0be37838":"code","109bca80":"code","fb8f0588":"code","47315456":"code","106994ca":"code","0ece3242":"code","481a9cfa":"code","7dd1ac16":"code","a936b3b6":"code","ee9f8101":"code","06b615eb":"code","6b7303cd":"code","291b6c57":"code","e6546dce":"code","5f52f04f":"code","b6157c7c":"code","7768f229":"code","df9ecd54":"code","e5c45fa7":"code","2d0bb6c3":"code","37ce307f":"code","36b3e19e":"code","4b35ef93":"code","23785f73":"code","ca1d0da2":"code","51c38601":"code","37f0374f":"code","9ccb1d2a":"markdown","ce13e8f3":"markdown","70ec0a29":"markdown","728f4ce0":"markdown","02685d08":"markdown","715551e3":"markdown","a15f1104":"markdown","738cec9a":"markdown","fb080207":"markdown","8db2aa42":"markdown","faf104be":"markdown","589ce821":"markdown","0f745ff4":"markdown","36e94271":"markdown","28da40b5":"markdown","40262561":"markdown","a2af69fc":"markdown","26806308":"markdown","60ff5238":"markdown","5ece83ff":"markdown","e1136089":"markdown","c3cbb474":"markdown","df3a5a2c":"markdown","b867dc2c":"markdown","544bf313":"markdown","d237fce9":"markdown","6929c923":"markdown","ed2838ef":"markdown","26e7dbbc":"markdown","461ce5d3":"markdown","adca44ed":"markdown","03a1eb1b":"markdown","f20263ec":"markdown","07fb99f7":"markdown","ba27b8e7":"markdown","f6c28ebc":"markdown","ec1c115c":"markdown","c8fd0b31":"markdown","ae925927":"markdown","cc3c7bc3":"markdown","c41361bb":"markdown","2949133f":"markdown","851873fc":"markdown","5ef0689d":"markdown","9c8f0d5d":"markdown","ef06f326":"markdown","25c42501":"markdown","b4cc58b6":"markdown"},"source":{"18e20efe":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\npd.set_option('precision', 3)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format = 'retina'\n\nimport seaborn as sns\nsns.set_style('dark')\n\nmpl.rcParams['axes.labelsize'] = 14\nmpl.rcParams['axes.titlesize'] = 15\nmpl.rcParams['xtick.labelsize'] = 12\nmpl.rcParams['ytick.labelsize'] = 12\nmpl.rcParams['legend.fontsize'] = 12\n\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler \nfrom sklearn.model_selection import cross_val_score, cross_val_predict, GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score\n\nprint ('Libraries Loaded!')","694ff2a7":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n\nprint ('Dataframes loaded!')\nprint ('Training set: {} rows and {} columns'.format(train_df.shape[0], train_df.shape[1]))\nprint ('    Test set: {} rows and {} columns'.format(test_df.shape[0], test_df.shape[1]))","d580ebaa":"all_data = pd.concat([train_df, test_df])\n\nprint ('Combined set: {} rows and {} columns'.format(all_data.shape[0], all_data.shape[1]))\nprint ('\\nSurvived?: ')\nall_data['Survived'].value_counts(dropna = False)","2c21962f":"train_df.head()","72da7b7a":"train_df.drop('PassengerId', axis = 1, inplace = True)","d63261ba":"train_df.info()","9ed66011":"missing_counts = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum()*100\/train_df.shape[0]).sort_values(ascending = False)\n\nmissing_df = pd.concat([missing_counts, percent], axis = 1, keys = ['Counts', '%'])\nprint('Missing values: ')\ndisplay(missing_df.head().style.background_gradient(cmap = 'Reds', axis = 0))","cd94bd0a":"train_df.describe()","cd300a5d":"num_atts = ['Age', 'SibSp', 'Parch', 'Fare', 'Pclass']\ntrain_df[num_atts].hist(figsize = (15, 6), color = 'steelblue', edgecolor = 'firebrick', linewidth = 1.5, layout = (2, 3));","e0315d52":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (11, 4))\n\nsns.countplot(x = 'Sex', hue = 'Survived', data = train_df,  palette = 'tab20', ax = ax1) \nax1.set_title('Count of (non-)Survivors by Gender')\nax1.set_xlabel('Gender')\nax1.set_ylabel('Number of Passenger')\nax1.legend(labels = ['Deceased', 'Survived'])\n\nsns.barplot(x = 'Sex', y = 'Survived', data = train_df,  palette = ['#94BFA7', '#FFC49B'], ci = None, ax = ax2)\nax2.set_title('Survival Rate by Gender')\nax2.set_xlabel('Gender')\nax2.set_ylabel('Survival Rate');","43dc95aa":"pd.crosstab(train_df['Sex'], train_df['Survived'], normalize = 'index')","b216e7ad":"men = train_df[train_df['Sex']  == 'male']\nwomen = train_df[train_df['Sex']  == 'female']","89f4e5ec":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (13, 4))\n\nsns.distplot(train_df[train_df['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax1, kde = False)\nsns.distplot(train_df[train_df['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax1, kde = False)\nax1.legend()\nax1.set_title('Age Distribution - All Passengers')\n\nsns.distplot(women[women['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax2, kde = False)\nsns.distplot(women[women['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax2, kde = False)\nax2.legend()\nax2.set_title('Age Distribution - Women')\n\nsns.distplot(men[men['Survived'] == 1]['Age'].dropna(), bins = 20, label = 'Survived', ax = ax3, kde = False)\nsns.distplot(men[men['Survived'] == 0]['Age'].dropna(), bins = 20, label = 'Deceased', ax = ax3, kde = False)\nax3.legend()\nax3.set_title('Age Distribution - Men')\n\nplt.tight_layout();","bce9affd":"# train_df['Age_Bin'] = pd.qcut(train_df['Age'], 4)  # Quantile-based discretization\ntrain_df['Age_Bin'] = (train_df['Age']\/\/15)*15\ntrain_df[['Age_Bin', 'Survived']].groupby(['Age_Bin']).mean()","93142d43":"sns.countplot(x = 'Embarked', hue = 'Survived', data = train_df,  palette = 'tab20') \nplt.ylabel('Number of Passenger')\nplt.title('Count of (non-)Survivors by Port of Embarkation')\nplt.legend(['Deceased', 'Survived']);","29400f5e":"print ('Number of passengers in each class:')\ntrain_df['Pclass'].value_counts()","2fbf3284":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.countplot(x = 'Pclass', hue = 'Survived', data = train_df,  palette = 'tab20', ax = ax1) \nax1.legend(['Deceased', 'Survived'])\nax1.set_title('Count of (non-)Survivors by Class')\nax1.set_ylabel('Number of Passengers')\n\nsns.barplot(x = 'Pclass', y = 'Survived', data = train_df,  palette = ['#C98BB9', '#F7D4BC', '#B5E2FA'], ci = None, ax = ax2)\nax2.set_title('Survival Rate by Class')\nax2.set_ylabel('Survival Rate');","061b0f11":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.boxplot(x = 'Pclass', y = 'Fare', data = train_df, palette = 'tab20', ax = ax1)\nax1.set_title('Distribution of Fares by Class')\n\nsns.distplot(train_df[train_df['Survived'] == 1]['Fare'], label = 'Survived', ax = ax2)\nsns.distplot(train_df[train_df['Survived'] == 0]['Fare'], label = 'Not Survived', ax = ax2)\nax2.set_title('Distribution of Fares for (non-)Survivors')\nax2.set_xlim([-20, 200])\nax2.legend();","274ec109":"train_df['Fare_Bin'] = pd.qcut(train_df['Fare'], 5)\ntrain_df[['Fare_Bin', 'Survived']].groupby(['Fare_Bin']).mean()","24529d45":"alone = train_df[(train_df['SibSp'] == 0) & (train_df['Parch'] == 0)]\nnot_alone = train_df[(train_df['SibSp'] != 0) | (train_df['Parch'] != 0)]","3becf743":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (12, 5))\n\nsns.countplot(x = 'Survived', data = alone,  palette = 'tab20', ax = ax1) \nax1.set_title('Count of Alone (non-)Survivors')\nax1.set_xlabel('')\nax1.set_xticklabels(['Deceased', 'Survived'])\nax1.set_ylabel('Number of Passengers')\n\nsns.countplot(x = 'Survived', data = not_alone,  palette = 'tab20', ax = ax2) \nax2.set_title('Count of (non-)Survivors with Family Onboard')\nax2.set_xlabel('')\nax2.set_xticklabels(['Deceased', 'Survived'])\nax2.set_ylabel('Number of Passengers')\n\nplt.tight_layout();","0be37838":"train_df['Relatives'] = train_df['SibSp'] + train_df['Parch']\n# train_df[['Relatives', 'Survived']].groupby(['Relatives']).mean()\n\nsns.factorplot('Relatives', 'Survived', data = train_df, color = 'firebrick', aspect = 1.5)\nplt.title('Survival rate by Number of Relatives Onboard');","109bca80":"train_df['Title'] = train_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n\ntrain_df['Title'].replace({'Mlle': 'Miss', 'Mme': 'Mrs', 'Ms': 'Miss'}, inplace = True)\ntrain_df['Title'].replace(['Don', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'the Countess', 'Jonkheer'],\n                           'Rare Title', inplace = True)\ntrain_df['Title'].value_counts()","fb8f0588":"cols = ['#067BC2', '#84BCDA', '#ECC30B', '#F37748', '#D56062']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize = (10, 4))\n\nsns.countplot(x = 'Title', data = train_df,  palette = cols, ax = ax1)\nax1.set_title('Passenger Count by Title')\nax1.set_ylabel('Number of Passengers')\n\nsns.barplot(x = 'Title', y = 'Survived', data = train_df,  palette = cols, ci = None, ax = ax2)\nax2.set_title('Survival Rate by Title')\nax2.set_ylabel('Survival Rate');","47315456":"print ('Cabin:\\n  Number of existing values: ', train_df['Cabin'].notnull().sum())\nprint ('    Number of unique values: ', train_df['Cabin'].nunique())","106994ca":"all_data['Age'] = all_data['Age'].fillna(train_df['Age'].median())\nall_data['Fare'] = all_data['Fare'].fillna(train_df['Fare'].median())\nprint ('Done!')","0ece3242":"# Again, the code for 'Family_Survival' comes from this kernel:\n# https:\/\/www.kaggle.com\/konstantinmasich\/titanic-0-82-0-83\/notebook\n\nall_data['Last_Name'] = all_data['Name'].apply(lambda x: str.split(x, ',')[0])\nall_data['Fare'].fillna(all_data['Fare'].mean(), inplace = True)\n\ndefault_sr_value = 0.5\nall_data['Family_Survival'] = default_sr_value\n\nfor grp, grp_df in all_data[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId', 'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):  # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            \n            if (smax == 1.0):\n                all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 0\n\nfor _, grp_df in all_data.groupby('Ticket'):\n    \n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                \n                if (smax == 1.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'Family_Survival'] = 0\n                    \n#####################################################################################\nall_data['Age_Bin'] = (all_data['Age']\/\/15)*15\nall_data['Fare_Bin'] = pd.qcut(all_data['Fare'], 5)\nall_data['Relatives'] = all_data['SibSp'] + all_data['Parch']\n#####################################################################################\nall_data['Title'] = all_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\nall_data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'}, inplace = True)\nall_data['Title'].replace(['Don', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'the Countess', 'Jonkheer', 'Dona'],\n                           'Rare Title', inplace = True)    \n\nprint ('Done!')","481a9cfa":"all_data['Fare_Bin'] = LabelEncoder().fit_transform(all_data['Fare_Bin'])\nall_data['Age_Bin'] = LabelEncoder().fit_transform(all_data['Age_Bin'])\nall_data['Title_Bin'] = LabelEncoder().fit_transform(all_data['Title'])\nall_data['Sex'] = LabelEncoder().fit_transform(all_data['Sex'])\n\nprint ('Done!')","7dd1ac16":"all_data.drop(['PassengerId', 'Age', 'Fare', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Title', 'Last_Name', 'Embarked'], axis = 1, inplace = True)\n\nprint ('Done!')\nprint ('Modified dataset: ')\nall_data.head()","a936b3b6":"train_df = all_data[:891]\n\nX_train = train_df.drop('Survived', 1)\ny_train = train_df['Survived']\n\n#######################################################\n\ntest_df = all_data[891:]\n\nX_test = test_df.copy()\nX_test.drop('Survived', axis = 1, inplace = True)\nprint ('Splitting: Done!')","ee9f8101":"std_scaler = StandardScaler()\n\nX_train_scaled = std_scaler.fit_transform(X_train)  # fit_transform the X_train\nX_test_scaled = std_scaler.transform(X_test)        # only transform the X_test\n\nprint ('Scaling: Done!')","06b615eb":"random_state = 1\n\n# Step 1: create a list containing all estimators with their default parameters\nclf_list = [GaussianNB(), \n            LogisticRegression(random_state = random_state),\n            KNeighborsClassifier(), \n            SVC(random_state = random_state, probability = True),\n            DecisionTreeClassifier(random_state = random_state), \n            RandomForestClassifier(random_state = random_state),\n            XGBClassifier(random_state = random_state), \n            AdaBoostClassifier(base_estimator = DecisionTreeClassifier(random_state = random_state), random_state = random_state)]\n\n\n# Step 2: calculate the cv mean and standard deviation for each one of them\ncv_base_mean, cv_std = [], []\nfor clf in clf_list:  \n    \n    cv = cross_val_score(clf, X_train_scaled, y = y_train, scoring = 'accuracy', cv = 5, n_jobs = -1)\n    \n    cv_base_mean.append(cv.mean())\n    cv_std.append(cv.std())\n\n    \n# Step 3: create a dataframe and plot the mean with error bars\ncv_total = pd.DataFrame({'Algorithm': ['Gaussian Naive Bayes', 'Logistic Regression', 'k-Nearest Neighboors', 'SVC', 'Decision Tree', 'Random Forest', 'XGB Classifier', 'AdaBoost Classifier'],\n                         'CV-Means': cv_base_mean, \n                         'CV-Errors': cv_std})\n\nsns.barplot('CV-Means', 'Algorithm', data = cv_total, palette = 'Paired', orient = 'h', **{'xerr': cv_std})\nplt.xlabel('Mean Accuracy')\nplt.title('Cross Validation Scores')\nplt.xlim([0.725, 0.88])\nplt.axvline(x = 0.80, color = 'firebrick', linestyle = '--');","6b7303cd":"estimators = [('gnb', clf_list[0]), ('lr', clf_list[1]),\n              ('knn', clf_list[2]), ('svc', clf_list[3]),\n              ('dt', clf_list[4]), ('rf', clf_list[5]),\n              ('xgb', clf_list[6]), ('ada', clf_list[7])]\n\nbase_voting_hard = VotingClassifier(estimators = estimators , voting = 'hard')\nbase_voting_soft = VotingClassifier(estimators = estimators , voting = 'soft') \n\ncv_hard = cross_val_score(base_voting_hard, X_train_scaled, y_train, cv = 5)\ncv_soft = cross_val_score(base_voting_soft, X_train_scaled, y_train, cv = 5)\n\nprint ('Baseline Models - Ensemble\\n--------------------------')\nprint ('Hard Voting: {}%'.format(np.round(cv_hard.mean()*100, 1)))\nprint ('Soft Voting: {}%'.format(np.round(cv_soft.mean()*100, 1)))","291b6c57":"base_voting_hard.fit(X_train_scaled, y_train)\nbase_voting_soft.fit(X_train_scaled, y_train)\n\ny_pred_base_hard = base_voting_hard.predict(X_test_scaled)\ny_pred_base_soft = base_voting_hard.predict(X_test_scaled)","e6546dce":"cv_means_tuned = [np.nan] # we can't actually tune the GNB classifier, so we fill its element with NaN\n\n#simple performance reporting function\ndef clf_performance(classifier, model_name):\n    print(model_name)\n    print('-------------------------------')\n    print('   Best Score: ' + str(classifier.best_score_))\n    print('   Best Parameters: ' + str(classifier.best_params_))\n    \n    cv_means_tuned.append(classifier.best_score_)","5f52f04f":"lr = LogisticRegression()\n\nparam_grid = {'max_iter' : [100],\n              'penalty' : ['l1', 'l2'],\n              'C' : np.logspace(-2, 2, 20),\n              'solver' : ['lbfgs', 'liblinear']}\n\nclf_lr = GridSearchCV(lr, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\n\nbest_clf_lr = clf_lr.fit(X_train_scaled, y_train)\nclf_performance(best_clf_lr, 'Logistic Regression')","b6157c7c":"# n_neighbors = np.concatenate((np.arange(3, 30, 1), np.arange(22, 32, 2)))\n\nknn = KNeighborsClassifier()\nparam_grid = {'n_neighbors' : np.arange(3, 30, 2),\n              'weights': ['uniform', 'distance'],\n              'algorithm': ['auto'],\n              'p': [1, 2]}\n\nclf_knn = GridSearchCV(knn, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_knn = clf_knn.fit(X_train_scaled, y_train)\nclf_performance(best_clf_knn, 'KNN')","7768f229":"svc = SVC(probability = True)\nparam_grid = tuned_parameters = [{'kernel': ['rbf'], \n                                  'gamma': [0.01, 0.1, 0.5, 1, 2, 5],\n                                  'C': [.1, 1, 2, 5]},\n                                 {'kernel': ['linear'], \n                                  'C': [.1, 1, 2, 10]},\n                                 {'kernel': ['poly'], \n                                  'degree' : [2, 3, 4, 5], \n                                  'C': [.1, 1, 10]}]\n\nclf_svc = GridSearchCV(svc, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_svc = clf_svc.fit(X_train_scaled, y_train)\nclf_performance(best_clf_svc, 'SVC')","df9ecd54":"dt = DecisionTreeClassifier(random_state = 1)\nparam_grid = {'max_depth': [3, 5, 10, 20, 50],\n              'criterion': ['entropy', 'gini'],\n              'min_samples_split': [5, 10, 15, 30],\n              'max_features': [None, 'auto', 'sqrt', 'log2']}\n                                  \nclf_dt = GridSearchCV(dt, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_dt = clf_dt.fit(X_train_scaled, y_train)\nclf_performance(best_clf_dt, 'Decision Tree')","e5c45fa7":"rf = RandomForestClassifier(random_state = 42)\nparam_grid = {'n_estimators': [50, 150, 300, 450],\n              'criterion': ['entropy'],\n              'bootstrap': [True],\n              'max_depth': [3, 5, 10],\n              'max_features': ['auto','sqrt'],\n              'min_samples_leaf': [2, 3],\n              'min_samples_split': [2, 3]}\n                                  \nclf_rf = GridSearchCV(rf, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_rf = clf_rf.fit(X_train_scaled, y_train)\nclf_performance(best_clf_rf, 'Random Forest')","2d0bb6c3":"best_rf = best_clf_rf.best_estimator_\n\nimportances = pd.DataFrame({'Feature': X_train.columns,\n                            'Importance': np.round(best_rf.feature_importances_, 3)})\n\nimportances = importances.sort_values('Importance', ascending = True).set_index('Feature')\n\nimportances.plot.barh(color = 'steelblue', edgecolor = 'firebrick', legend=False)\nplt.title('Random Forest Classifier')\nplt.xlabel('Importance');","37ce307f":"xgb = XGBClassifier(random_state = 42)\n\nparam_grid = {'n_estimators': [15, 25, 50, 100],\n              'colsample_bytree': [0.65, 0.75, 0.80],\n              'max_depth': [None],\n              'reg_alpha': [1],\n              'reg_lambda': [1, 2, 5],\n              'subsample': [0.50, 0.75, 1.00],\n              'learning_rate': [0.01, 0.1, 0.5],\n              'gamma': [0.5, 1, 2, 5],\n              'min_child_weight': [0.01],\n              'sampling_method': ['uniform']}\n\nclf_xgb = GridSearchCV(xgb, param_grid = param_grid, cv = 3, verbose = True, n_jobs = -1)\nbest_clf_xgb = clf_xgb.fit(X_train_scaled, y_train)\nclf_performance(best_clf_xgb, 'XGB')","36b3e19e":"best_xgb = best_clf_xgb.best_estimator_\n\nimportances = pd.DataFrame({'Feature': X_train.columns,\n                            'Importance': np.round(best_xgb.feature_importances_, 3)})\n\nimportances = importances.sort_values('Importance', ascending = True).set_index('Feature')\n\nimportances.plot.barh(color = 'darkgray', edgecolor = 'firebrick', legend = False)\nplt.title('XGBoost Classifier')\nplt.xlabel('Importance');","4b35ef93":"adaDTC = AdaBoostClassifier(base_estimator = DecisionTreeClassifier(random_state = random_state), random_state=random_state)\n\nparam_grid = {'algorithm': ['SAMME', 'SAMME.R'],\n              'base_estimator__criterion' : ['gini', 'entropy'],\n              'base_estimator__splitter' : ['best', 'random'],\n              'n_estimators': [2, 5, 10, 50],\n              'learning_rate': [0.01, 0.1, 0.2, 0.3, 1, 2]}\n\nclf_ada = GridSearchCV(adaDTC, param_grid = param_grid, cv = 5, scoring = 'accuracy', n_jobs = -1, verbose = 1)\nbest_clf_ada = clf_ada.fit(X_train_scaled, y_train)\n\nclf_performance(best_clf_ada, 'AdaBost')","23785f73":"best_ada = best_clf_ada.best_estimator_\nimportances = pd.DataFrame({'Feature': X_train.columns,\n                            'Importance': np.round(best_ada.feature_importances_, 3)})\n\nimportances = importances.sort_values('Importance', ascending = True).set_index('Feature')\n\nimportances.plot.barh(color = 'cadetblue', edgecolor = 'firebrick', legend = False)\nplt.title('AdaBoost Classifier')\nplt.xlabel('Importance');","ca1d0da2":"cv_total = pd.DataFrame({'Algorithm': ['Gaussian Naive Bayes', 'Logistic Regression', 'k-Nearest Neighboors', 'SVC', 'Decision Tree', 'Random Forest', 'XGB Classifier', 'AdaBoost Classifier'],\n                         'Baseline': cv_base_mean, \n                         'Tuned Performance': cv_means_tuned})\n\ncv_total","51c38601":"best_lr = best_clf_lr.best_estimator_\nbest_knn = best_clf_knn.best_estimator_\nbest_svc = best_clf_svc.best_estimator_\nbest_dt = best_clf_dt.best_estimator_\nbest_rf = best_clf_rf.best_estimator_\nbest_xgb = best_clf_xgb.best_estimator_\n# best_ada = best_clf_ada.best_estimator_  # didn't help me in my final ensemble\n\nestimators = [('lr', best_lr), ('knn', best_knn), ('svc', best_svc),\n              ('rf', best_rf), ('xgb', best_xgb), ('dt', best_dt)]\n\ntuned_voting_hard = VotingClassifier(estimators = estimators, voting = 'hard', n_jobs = -1)\ntuned_voting_soft = VotingClassifier(estimators = estimators, voting = 'soft', n_jobs = -1)\n\ntuned_voting_hard.fit(X_train_scaled, y_train)\ntuned_voting_soft.fit(X_train_scaled, y_train)\n\ncv_hard = cross_val_score(tuned_voting_hard, X_train_scaled, y_train, cv = 5)\ncv_soft = cross_val_score(tuned_voting_soft, X_train_scaled, y_train, cv = 5)\n\nprint ('Tuned Models - Ensemble\\n-----------------------')\nprint ('Hard Voting: {}%'.format(np.round(cv_hard.mean()*100, 2)))\nprint ('Soft Voting: {}%'.format(np.round(cv_soft.mean()*100, 2)))\n\ny_pred_tuned_hd = tuned_voting_hard.predict(X_test_scaled).astype(int)\ny_pred_tuned_sf = tuned_voting_soft.predict(X_test_scaled).astype(int)","37f0374f":"test_df = pd.DataFrame(pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'])\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_base_hard.astype(int)}).to_csv('01-Baseline_Hard_voting.csv', index = False)\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_base_soft.astype(int)}).to_csv('02-Baseline_Soft_voting.csv', index = False)\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_tuned_hd.astype(int)}).to_csv('03-Tuned_Hard_Voting.csv', index = False)\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_tuned_sf.astype(int)}).to_csv('04-Tuned_Soft_Voting.csv', index = False)","9ccb1d2a":"# Getting the Data\n\nThe data has already been split into a training set ('train.csv') and a test set ('test.csv'). We can use the `read_csv()` method to load them as Pandas dataframes:","ce13e8f3":"## 8. Others\n\n### Cabin\n\nAs we saw earlier, 3 out of 4 instances in the training set have a missing value for 'Cabin'. Additionally, it has a large number of unique values among the existing (non-NaN) values:","70ec0a29":"The `info()` method can give us valuable information such  as the type of each attribute and the number of missing values:","728f4ce0":"# Preparing Data\n\nIn this section, we will prepare the dataframe before we build any machine learning algorithm. We will use the combined dataframe so that both the train and the test set get processed at the same time. Another alternative would be to use pipilines.\n\nSteps:\n\n1) Replace missing values in 'Age' and 'Fare' with the corresponding median of the train set. Note that the test set has one missing value for 'Fare' (which we can easily check by calling test_df.isnull().sum()).","02685d08":"## 9. Summary\n\n\n|      Attribute      | Important |            Action           |\n|:-------------------:|:---------:|:---------------------------:|\n|     PassengerId     |     No    |           Discard           |\n|         Sex         |    Yes    |            Encode           |\n|         Age         |    Yes    |        Bin and Encode       |\n| Port of Embarkation |     No    |           Discard           |\n|        Pclass       |    Yes    |              -              |\n|         Fare        |    Yes    |        Bin and Encode       |\n|   SibSp and Parch   |    Yes    |     Engineer 'Relatives'    |\n|         Name        |    Yes    | Engineer 'Title' and Encode |\n|        Cabin        |     No    |           Discard           |\n|        Ticket       |    Yes    |  Engineer 'Family_Survival' |","715551e3":"# A Quick Look at our Data\n\nIn this stage, we will temporarily forget the test set and focus on the training set.\n\nWe can take a look at the top five rows of the training set using the `head()` method:","a15f1104":"# Exploratory Data Analysis\n\nLet's have a look at (almost) all attributes in greater detail.\n\n## 1. Gender","738cec9a":"## 3. Port of Embarkation","fb080207":"5) Split the combined dataset into train and test set and scale each feature vector.","8db2aa42":"### Decision Tree","faf104be":"# Conclusions\n\nThis notebook came to an end! We can summarise it by mentioning a few points:\n\n- **EDA** helped us understand where to **focus**. Factors such as a passenger's gender or\/ and title showed that the [initial assumption](https:\/\/www.kaggle.com\/c\/titanic) was actually true and even though 'there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others'.\n- We should not rely completely on given feautures since we could benefit from **engineering new ones**.\n- Building Machine Learning models requires a lot of **tweaking** of the parameter before we get a good\/optimal result. **Ensemble learning** can usually help us towards this direction.\n- Lastly, I would like to mention that looking at other people's work can give us new ideas and inspiration for our own project. Just make sure you **give credit** and don't copy a whole kernel.\n\nFeel free to ask me anything in the comment section.\n\nPlease <font size=+0 color=\"red\"><b>upvote<\/b><\/font> if you liked this notebook! Thank you! \ud83d\ude09","589ce821":"We have already talked about the fact that women (Mrs or Miss) had higher odds of survival. What's really interesting is that **Masters** and people with a **Rare Title** have indeed a **higher chance of survival** compared to 'common' men (Mr).","0f745ff4":"More than 50% of passengers boarded in the 3rd class. Nevertheless, **survival** favours the **wealthy** as shown in the right figure (the survival rate increases as we move from 3rd to 1st class).","36e94271":" We will now build the **final ensembles** \ud83d\ude0c:","28da40b5":"The meaning of each attribute is the following:\n\n- **PassengerId**: the ID given to each passenger,\n- **Survived**: the target attribute (1 for passengers who survived, 0 for those who didn't),\n- **Pclass**: Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd class),\n- **Name**, **Sex**, **Age**: self-explanatory,\n- **SibSp**: Number of siblings & spouses aboard the Titanic,\n- **Parch**: Number of parents & children aboard the Titanic,\n- **Ticket**: Ticket number, \n- **Fare**: Passenger fare (in pounds),\n- **Cabin**: Passenger's cabin number, and\n- **Embarked**: Port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton).\n\n'PassengerId' is unique to each passenger and can be dropped:","40262561":"## 5. Fare\n\nOne would assume that fare is closely related to class. Let's plot a boxplot for the distribution of Fare values across classes and a histogram for survival:","a2af69fc":"All estimators have a score **above 80%**, with SVC scoring the highest (85%). \n\nWe can combine the predictions of all these base classifiers and see if we get better predictive performance compared to each constituent individual classifier. This is the main motivation behind **Ensemble Learning**.\n\nThere are two options (see [here](https:\/\/www.oreilly.com\/library\/view\/machine-learning-for\/9781783980284\/47c32d8b-7b01-4696-8043-3f8472e3a447.xhtml) and [here](https:\/\/www.oreilly.com\/library\/view\/hands-on-machine-learning\/9781491962282\/)):<br>\n1) **Hard Voting**: A hard voting classifier counts the votes of each estimator in the ensemble and picks the class that gets the most votes. In other words, the majority wins. <br>\n2) **Soft Voting**: Every individual classifier provides a probability value that a specific data point belongs to a particular target class. The predictions are weighted by the classifier's importance and summed up. Then the target label with the greatest sum of weighted probabilities wins the vote.","26806308":"## Model Tuning\n\nWe are ready to tune hyperparameters using grid search and see if performance improves. For more information about hyperparemeters, please visit the corresponding [documentation](https:\/\/scikit-learn.org\/stable\/). \n\nWe write a simple performance reporting function (taken from [Ken](https:\/\/www.kaggle.com\/kenjee\/titanic-project-example)'s kernel).","60ff5238":"There were more men than women on board. However, **more women survived** the shipwreck (the survival rate is almost 75% for women compared to only 20% for men!).\n\nWe can read in [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Titanic) that a \"women and children first\" protocol was implemented for boarding lifeboats. Therefore,  apart from women, younger people had an advantage. With that in mind, let's see the age distribution.\n\n## 2. Age","5ece83ff":"## 4. Pclass","e1136089":"The results are:","c3cbb474":"## Submission","df3a5a2c":"It is evident that **different age groups** had very **different survival rates**. For instance, both genders display a higher probability of survival between the ages of 15 and 45. Also, the spike at young ages (0-4) shows that infants and young children have higher odds of survival.\n\nSince survival seems to favour certain age groups, it might be useful to **bin** 'Age' before feeding it to an algorithm. We will pick an interval of 15 years.","b867dc2c":"2) Add the new attributes ('Family_Survival', 'Age_Bin', 'Fare_Bin', 'Relatives', 'Title).","544bf313":"The most important things to note are:\n\n- Only **38%** of passenger **survived**,\n- The **mean age** is approximately **30** years old, while the **median** is **28** (therefore it won't matter much which one we use for imputation),\n- The median for both 'SibSp' and 'Parch' is 0 (most passengers were **alone**),\n- The mean fare is \u00a332.20, and\n- These attributes have **different scales**, so we need to take care of that before feeding them to a Machine Learning algorithm. \n\nWe can quickly visualize the difference in scales, by plotting a histogram for each numerical attribute.","d237fce9":"4) Discard all unnecessary attributes.","6929c923":"### Support Vector Classifier","ed2838ef":"### k-Nearest Neighbors","26e7dbbc":"The ensemble has indeed a higher (cv) score than most individual classifiers. We can also try dropping some classifiers and see if it improves more.","461ce5d3":"Having **relatives** on board **increases your chances of survival**. \n\nIs the number of relative relevant? We can create a new attribute for the number of relatives on board and test that:","adca44ed":"The training set has 891 instances and 11 columns (10 attributes + the target attribute). 6 attributes are numerical, while 5 are categorical.\n\nLet's take a closer look at the missing values:","03a1eb1b":"### AdaBoost","f20263ec":"### XGBoost Classifier","07fb99f7":"## 7. Name\/Title\n\nFinally, we could see if a person's title (Mr, Miss etc.) plays a role in survival. I used Ken's [code](https:\/\/www.kaggle.com\/kenjee\/titanic-project-example) to extract the title for each instance. I then replaced rare titles with more common ones.","ba27b8e7":"3) Use scikit-learn's `LabelEncoder()` to encode 'Fare_Bin', 'Age_Bin', 'Title' and 'Sex'.","f6c28ebc":"\n\n## 6. SibSp and Parch\n\nSomeone could argue that having relatives could influence a passenger's odds of surviving. Let's test that:","ec1c115c":"Replacing missing values in the 'Age' and 'Embarked' columns won't be that difficult. We could use the median and the most frequent value as a replacement, respectively. However, we will probably have to discard the 'Cabin' attribute since more than 75% of all values are missing.\n\nThe `describe()` method gives us a statistical summary of the numerical attributes:","c8fd0b31":"### Logistic Regression","ae925927":"Most passengers embarked from Southampton, the port from which the ship started its voyage. It has by far the highest count for both survivors and non-survivors. Cherbourg has the second largest number of passengers and interestingly, more than half of them survived.\n\nLooking at the data, I wasn't confident that this attribute would be useful. After all, the ship sank at the same point and at the same time for all passengers so it doesn't really matter where they embarked. However, I decided to test it anyway and observed that the performance of my models got worse when I included it, therefore we can **ignore it**.","cc3c7bc3":"<br>\n\nEstimators such as Random Forests, XGBoost and AdaBoost Clasiffiers allow us to see the **importance** of each feature.\n\n### Random Forest Classifier","c41361bb":"<font size=+3 color=\"#141774\"><center><b>Titanic Competition: A Beginner-friendly Approach to Top 3% with Ensemble Learning \ud83d\udef3\ufe0f<\/b><\/center><\/font>\n\n<img src=\"https:\/\/images.unsplash.com\/photo-1542614370-156b709e78f8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\" width = 400>\n<center>Photo by Annie Spratt (Unsplash)<\/center>\n\n# Introduction\n\nHello readers and welcome to my attempt at the [Titanic ML competition](https:\/\/www.kaggle.com\/c\/titanic) on Kaggle! In this notebook we will:\n\n- Perform **Exploratory Data Analysis** (EDA) and gain insights on the factors that affected passenger survival,\n- Perform **Feature Engineering** to create better features and improve our models,\n- Built several **Machine Learning models** to predict whether a passenger survived the shipwreck.\n\nI have included text to explain my reasoning\/workflow and make this kernel as <font size=+0 color=\"#BF570F\"><b>beginner friendly<\/b><\/font> as possible. I didn't go into much detail about Machine Learning concepts ('What is SVC?', 'what's k in k-Nearest Neighbors?' etc.) but you are welcome to ask me anything in the comments.\n\nPlease consider <font size=+0 color=\"red\"><b>upvoting<\/b><\/font> if you found it useful! \ud83e\uddd0\n    \n<br>\n\n**Table of Contents**\n\n1. [Introduction](#Introduction)\n2. [Libraries](#Libraries)\n3. [Getting the Data](#Getting-the-Data)\n4. [A Quick Look at our Data](#A-Quick-Look-at-our-Data)\n5. [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n6. [Preparing Data](#Preparing-Data)\n7. [Building Machine Learning Models](#Building-Machine-Learning-Models)\n8. [Conclusions](#Conclusions)","2949133f":"# Building Machine Learning Models\n\n## Baseline Models\n\nThe aim of this subsection is to calculate the **baseline performance** of 8 different estimators\/classifiers on the training set. This will enable us to later see how tuning improves each of these models. \n\nThe classifiers are:\n\n1) Gaussian Naive Bayes , <br>\n2) Logistic Regression, <br>\n3) K-Nearest Neighbor Classifier, <br>\n4) Support Vector Classifier, <br>\n5) Decision Tree Classifier, <br>\n6) Random Forest Classifier, <br>\n7) Xtreme Gradient Boosting Classifier, and <br>\n8) AdaBoost classifier.\n\nI won't go into detail about how these classifiers work. You can read more in this excellent [book](https:\/\/www.oreilly.com\/library\/view\/hands-on-machine-learning\/9781491962282\/).\n\nFor the baseline models, we will use their **default parameters** and evaluate their (mean) accuracy by performing **k-fold cross validation**. \n\nThe idea behind k-fold cross validation, which is illustrated in the following figure, is simple:\nit splits the (training) set into k subsets\/folds, trains the models using k-1 folds and evaluates the model on the remaining one fold. This process is repeated until every fold is tested once. \n\n<img src=\"https:\/\/scikit-learn.org\/stable\/_images\/grid_search_cross_validation.png\" width = 400>\n<center> Taken from the official documentation on scikit-learn's website <\/center>\n\n<br>\n\nWe can implement cross validation by using the `cross_val_score()` method from [scikit-learn](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.cross_val_score.html). We will use k = 5 folds.","851873fc":"Having 1 to 3 relatives can actually increase you chances of survival.","5ef0689d":"It's not a surprise that people in class 1 paid more than the other two classes. As we already saw in the comparison of the classes, a **higher fare** leads to a **higher chance of survival**.\n\nAs with 'Age', we can benefit from **bining** the fare value. I prefer quantile-based discretization with 5 quantiles for this attribute.","9c8f0d5d":"The training set is labeled, i.e. we know the outcome for each passenger, hence the difference in the number of columns. \n\nWe are going to merge the two dataframes into one. The new dataframe will have **NaN** in the 'Survived' column for instances of the test set:","ef06f326":"We can see that most of the passengers: \n\n- were **young** (age < 40),\n- boarded the ship **alone** (SibSp and Parch equal to 0), \n- paid a **low fare** and boarded in the **3rd class**.","25c42501":"Consequently, we can safely discard it. You can have a look at this [notebook](https:\/\/www.kaggle.com\/ccastleberry\/titanic-cabin-features) for more information about the 'Cabin' feature.\n\n### Ticket\/Family Survival\n\nWe will indirectly use the 'Ticket' attribute to engineer a new feauture called 'Family_Survival'. The idea comes from S.Xu's [kernel](https:\/\/www.kaggle.com\/shunjiangxu\/blood-is-thicker-than-water-friendship-forever), in which he groups families and people with the same tickets together and searches for info based on that. A cleaner version of the code is taken from Konstantin's [kernel](https:\/\/www.kaggle.com\/konstantinmasich\/titanic-0-82-0-83\/notebook) (see next section).","b4cc58b6":"# Libraries\n\nWe start by importing the necessary libraries and setting some parameters for the whole notebook (such as parameters for the plots, etc.). We will mainly use:\n\n- Pandas for handling and analysing data,\n- Seaborn and Matplotlib for data visualization, and\n- Scikit-learn for building Machine Learning models."}}